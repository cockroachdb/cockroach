// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const CONTAINS = 57409
const COPY = 57410
const COVERING = 57411
const CREATE = 57412
const CROSS = 57413
const CSV = 57414
const CUBE = 57415
const CURRENT = 57416
const CURRENT_CATALOG = 57417
const CURRENT_DATE = 57418
const CURRENT_SCHEMA = 57419
const CURRENT_ROLE = 57420
const CURRENT_TIME = 57421
const CURRENT_TIMESTAMP = 57422
const CURRENT_USER = 57423
const CYCLE = 57424
const DATA = 57425
const DATABASE = 57426
const DATABASES = 57427
const DATE = 57428
const DAY = 57429
const DEC = 57430
const DECIMAL = 57431
const DEFAULT = 57432
const DEALLOCATE = 57433
const DEFERRABLE = 57434
const DELETE = 57435
const DESC = 57436
const DISCARD = 57437
const DISTINCT = 57438
const DO = 57439
const DOUBLE = 57440
const DROP = 57441
const ELSE = 57442
const ENCODING = 57443
const END = 57444
const ESCAPE = 57445
const EXCEPT = 57446
const EXISTS = 57447
const EXECUTE = 57448
const EXPERIMENTAL_FINGERPRINTS = 57449
const EXPLAIN = 57450
const EXTRACT = 57451
const EXTRACT_DURATION = 57452
const FALSE = 57453
const FAMILY = 57454
const FETCH = 57455
const FETCHVAL = 57456
const FETCHTEXT = 57457
const FETCHVAL_PATH = 57458
const FETCHTEXT_PATH = 57459
const FILTER = 57460
const FIRST = 57461
const FLOAT = 57462
const FLOAT4 = 57463
const FLOAT8 = 57464
const FLOORDIV = 57465
const FOLLOWING = 57466
const FOR = 57467
const FORCE_INDEX = 57468
const FOREIGN = 57469
const FROM = 57470
const FULL = 57471
const GRANT = 57472
const GRANTS = 57473
const GREATEST = 57474
const GROUP = 57475
const GROUPING = 57476
const HAVING = 57477
const HELP = 57478
const HIGH = 57479
const HOUR = 57480
const HAS_SOME = 57481
const HAS_ALL = 57482
const IMPORT = 57483
const INCREMENTAL = 57484
const IF = 57485
const IFNULL = 57486
const ILIKE = 57487
const IN = 57488
const INET = 57489
const INTERLEAVE = 57490
const INDEX = 57491
const INDEXES = 57492
const INITIALLY = 57493
const INNER = 57494
const INSERT = 57495
const INT = 57496
const INT2VECTOR = 57497
const INT2 = 57498
const INT4 = 57499
const INT8 = 57500
const INT64 = 57501
const INTEGER = 57502
const INTERSECT = 57503
const INTERVAL = 57504
const INTO = 57505
const IS = 57506
const ISOLATION = 57507
const JOB = 57508
const JOBS = 57509
const JOIN = 57510
const KEY = 57511
const KEYS = 57512
const KV = 57513
const LATERAL = 57514
const LC_CTYPE = 57515
const LC_COLLATE = 57516
const LEADING = 57517
const LEAST = 57518
const LEFT = 57519
const LEVEL = 57520
const LIKE = 57521
const LIMIT = 57522
const LOCAL = 57523
const LOCALTIME = 57524
const LOCALTIMESTAMP = 57525
const LOW = 57526
const LSHIFT = 57527
const MATCH = 57528
const MINUTE = 57529
const MONTH = 57530
const NAN = 57531
const NAME = 57532
const NAMES = 57533
const NATURAL = 57534
const NEXT = 57535
const NO = 57536
const NO_INDEX_JOIN = 57537
const NORMAL = 57538
const NOT = 57539
const NOTHING = 57540
const NULL = 57541
const NULLIF = 57542
const NULLS = 57543
const NUMERIC = 57544
const OF = 57545
const OFF = 57546
const OFFSET = 57547
const OID = 57548
const ON = 57549
const ONLY = 57550
const OPTIONS = 57551
const OR = 57552
const ORDER = 57553
const ORDINALITY = 57554
const OUT = 57555
const OUTER = 57556
const OVER = 57557
const OVERLAPS = 57558
const OVERLAY = 57559
const PARENT = 57560
const PARTIAL = 57561
const PARTITION = 57562
const PASSWORD = 57563
const PAUSE = 57564
const PLACING = 57565
const PLANS = 57566
const POSITION = 57567
const PRECEDING = 57568
const PRECISION = 57569
const PREPARE = 57570
const PRIMARY = 57571
const PRIORITY = 57572
const QUERIES = 57573
const QUERY = 57574
const RANGE = 57575
const READ = 57576
const REAL = 57577
const RECURSIVE = 57578
const REF = 57579
const REFERENCES = 57580
const REGCLASS = 57581
const REGPROC = 57582
const REGPROCEDURE = 57583
const REGNAMESPACE = 57584
const REGTYPE = 57585
const REMOVE_PATH = 57586
const RENAME = 57587
const REPEATABLE = 57588
const RELEASE = 57589
const RESET = 57590
const RESTORE = 57591
const RESTRICT = 57592
const RESUME = 57593
const RETURNING = 57594
const REVOKE = 57595
const RIGHT = 57596
const ROLLBACK = 57597
const ROLLUP = 57598
const ROW = 57599
const ROWS = 57600
const RSHIFT = 57601
const SAVEPOINT = 57602
const SCATTER = 57603
const SEARCH = 57604
const SECOND = 57605
const SELECT = 57606
const SEQUENCES = 57607
const SERIAL = 57608
const SERIALIZABLE = 57609
const SESSION = 57610
const SESSIONS = 57611
const SESSION_USER = 57612
const SET = 57613
const SETTING = 57614
const SETTINGS = 57615
const SHOW = 57616
const SIMILAR = 57617
const SIMPLE = 57618
const SMALLINT = 57619
const SMALLSERIAL = 57620
const SNAPSHOT = 57621
const SOME = 57622
const SPLIT = 57623
const SQL = 57624
const START = 57625
const STATUS = 57626
const STDIN = 57627
const STRICT = 57628
const STRING = 57629
const STORE = 57630
const STORING = 57631
const SUBSTRING = 57632
const SYMMETRIC = 57633
const SYSTEM = 57634
const TABLE = 57635
const TABLES = 57636
const TEMP = 57637
const TEMPLATE = 57638
const TEMPORARY = 57639
const TESTING_RANGES = 57640
const TESTING_RELOCATE = 57641
const TEXT = 57642
const THEN = 57643
const TIME = 57644
const TIMESTAMP = 57645
const TIMESTAMPTZ = 57646
const TO = 57647
const TRAILING = 57648
const TRACE = 57649
const TRANSACTION = 57650
const TREAT = 57651
const TRIM = 57652
const TRUE = 57653
const TRUNCATE = 57654
const TYPE = 57655
const UNBOUNDED = 57656
const UNCOMMITTED = 57657
const UNION = 57658
const UNIQUE = 57659
const UNKNOWN = 57660
const UPDATE = 57661
const UPSERT = 57662
const USE = 57663
const USER = 57664
const USERS = 57665
const USING = 57666
const UUID = 57667
const VALID = 57668
const VALIDATE = 57669
const VALUE = 57670
const VALUES = 57671
const VARCHAR = 57672
const VARIADIC = 57673
const VIEW = 57674
const VARYING = 57675
const WHEN = 57676
const WHERE = 57677
const WINDOW = 57678
const WITH = 57679
const WITHIN = 57680
const WITHOUT = 57681
const WRITE = 57682
const YEAR = 57683
const ZONE = 57684
const NOT_LA = 57685
const WITH_LA = 57686
const AS_LA = 57687
const CONTAINED_BY = 57688
const HAS_SOME_KEY = 57689
const HAS_ALL_KEYS = 57690
const POSTFIXOP = 57691
const UMINUS = 57692
const HELPTOKEN = 57693

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6575

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	371, 53,
	-2, 673,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	149, 525,
	-2, 0,
	-1, 61,
	93, 673,
	153, 673,
	319, 673,
	320, 673,
	-2, 0,
	-1, 71,
	104, 648,
	113, 648,
	161, 648,
	180, 648,
	205, 648,
	211, 648,
	316, 648,
	-2, 637,
	-1, 103,
	4, 675,
	20, 675,
	21, 675,
	23, 675,
	28, 675,
	33, 675,
	34, 675,
	35, 675,
	36, 675,
	37, 675,
	38, 675,
	39, 675,
	40, 675,
	41, 675,
	42, 675,
	44, 675,
	45, 675,
	46, 675,
	47, 675,
	48, 675,
	51, 675,
	52, 675,
	53, 675,
	55, 675,
	56, 675,
	60, 675,
	61, 675,
	62, 675,
	64, 675,
	66, 675,
	68, 675,
	69, 675,
	72, 675,
	73, 675,
	74, 675,
	82, 675,
	83, 675,
	84, 675,
	85, 675,
	86, 675,
	87, 675,
	88, 675,
	89, 675,
	91, 675,
	93, 675,
	95, 675,
	98, 675,
	99, 675,
	101, 675,
	105, 675,
	106, 675,
	107, 675,
	108, 675,
	109, 675,
	110, 675,
	118, 675,
	119, 675,
	120, 675,
	121, 675,
	122, 675,
	124, 675,
	126, 675,
	131, 675,
	132, 675,
	134, 675,
	137, 675,
	138, 675,
	141, 675,
	142, 675,
	143, 675,
	144, 675,
	147, 675,
	148, 675,
	150, 675,
	153, 675,
	154, 675,
	155, 675,
	156, 675,
	157, 675,
	158, 675,
	159, 675,
	160, 675,
	162, 675,
	165, 675,
	166, 675,
	167, 675,
	169, 675,
	170, 675,
	171, 675,
	173, 675,
	174, 675,
	176, 675,
	178, 675,
	181, 675,
	184, 675,
	186, 675,
	187, 675,
	188, 675,
	189, 675,
	190, 675,
	191, 675,
	193, 675,
	194, 675,
	195, 675,
	196, 675,
	200, 675,
	201, 675,
	202, 675,
	203, 675,
	204, 675,
	206, 675,
	208, 675,
	209, 675,
	212, 675,
	213, 675,
	215, 675,
	217, 675,
	218, 675,
	219, 675,
	220, 675,
	221, 675,
	222, 675,
	224, 675,
	225, 675,
	226, 675,
	227, 675,
	228, 675,
	230, 675,
	231, 675,
	232, 675,
	233, 675,
	234, 675,
	235, 675,
	236, 675,
	237, 675,
	239, 675,
	240, 675,
	241, 675,
	242, 675,
	243, 675,
	245, 675,
	246, 675,
	247, 675,
	248, 675,
	249, 675,
	250, 675,
	251, 675,
	253, 675,
	255, 675,
	256, 675,
	257, 675,
	258, 675,
	260, 675,
	261, 675,
	262, 675,
	263, 675,
	265, 675,
	266, 675,
	267, 675,
	268, 675,
	269, 675,
	271, 675,
	272, 675,
	273, 675,
	274, 675,
	276, 675,
	277, 675,
	278, 675,
	279, 675,
	281, 675,
	282, 675,
	283, 675,
	284, 675,
	285, 675,
	286, 675,
	287, 675,
	288, 675,
	289, 675,
	290, 675,
	292, 675,
	294, 675,
	295, 675,
	296, 675,
	297, 675,
	298, 675,
	299, 675,
	300, 675,
	302, 675,
	303, 675,
	304, 675,
	307, 675,
	308, 675,
	309, 675,
	310, 675,
	312, 675,
	313, 675,
	314, 675,
	315, 675,
	318, 675,
	319, 675,
	320, 675,
	321, 675,
	323, 675,
	325, 675,
	326, 675,
	327, 675,
	328, 675,
	329, 675,
	330, 675,
	333, 675,
	338, 675,
	339, 675,
	340, 675,
	341, 675,
	342, 675,
	-2, 0,
	-1, 116,
	104, 647,
	113, 647,
	161, 647,
	180, 647,
	205, 647,
	211, 647,
	316, 647,
	-2, 640,
	-1, 121,
	1, 574,
	165, 574,
	230, 574,
	234, 574,
	370, 574,
	371, 574,
	-2, 0,
	-1, 123,
	1, 574,
	370, 574,
	371, 574,
	-2, 0,
	-1, 124,
	1, 574,
	370, 574,
	371, 574,
	-2, 0,
	-1, 125,
	1, 578,
	370, 578,
	371, 578,
	-2, 0,
	-1, 132,
	4, 681,
	5, 681,
	6, 681,
	7, 681,
	8, 681,
	9, 681,
	20, 681,
	21, 681,
	23, 681,
	28, 681,
	29, 681,
	33, 681,
	34, 681,
	35, 681,
	36, 681,
	37, 681,
	38, 681,
	39, 681,
	40, 681,
	41, 681,
	42, 681,
	44, 681,
	45, 681,
	46, 681,
	47, 681,
	48, 681,
	49, 681,
	50, 681,
	51, 681,
	52, 681,
	53, 681,
	55, 681,
	56, 681,
	58, 681,
	60, 681,
	61, 681,
	62, 681,
	64, 681,
	66, 681,
	68, 681,
	69, 681,
	71, 681,
	72, 681,
	73, 681,
	74, 681,
	76, 681,
	77, 681,
	78, 681,
	80, 681,
	81, 681,
	82, 681,
	83, 681,
	84, 681,
	85, 681,
	86, 681,
	87, 681,
	88, 681,
	89, 681,
	91, 681,
	93, 681,
	95, 681,
	98, 681,
	99, 681,
	101, 681,
	105, 681,
	106, 681,
	107, 681,
	108, 681,
	109, 681,
	110, 681,
	111, 681,
	112, 681,
	118, 681,
	119, 681,
	120, 681,
	121, 681,
	122, 681,
	124, 681,
	126, 681,
	129, 681,
	131, 681,
	132, 681,
	134, 681,
	137, 681,
	138, 681,
	141, 681,
	142, 681,
	143, 681,
	144, 681,
	145, 681,
	147, 681,
	148, 681,
	150, 681,
	152, 681,
	153, 681,
	154, 681,
	155, 681,
	156, 681,
	157, 681,
	158, 681,
	159, 681,
	160, 681,
	162, 681,
	164, 681,
	165, 681,
	166, 681,
	167, 681,
	168, 681,
	169, 681,
	170, 681,
	171, 681,
	173, 681,
	174, 681,
	176, 681,
	177, 681,
	178, 681,
	179, 681,
	181, 681,
	184, 681,
	186, 681,
	187, 681,
	188, 681,
	189, 681,
	190, 681,
	191, 681,
	192, 681,
	193, 681,
	194, 681,
	195, 681,
	196, 681,
	197, 681,
	199, 681,
	200, 681,
	201, 681,
	202, 681,
	203, 681,
	204, 681,
	206, 681,
	209, 681,
	212, 681,
	213, 681,
	214, 681,
	215, 681,
	216, 681,
	217, 681,
	218, 681,
	219, 681,
	220, 681,
	221, 681,
	222, 681,
	224, 681,
	225, 681,
	226, 681,
	227, 681,
	228, 681,
	230, 681,
	231, 681,
	232, 681,
	233, 681,
	234, 681,
	235, 681,
	236, 681,
	237, 681,
	239, 681,
	240, 681,
	241, 681,
	242, 681,
	243, 681,
	245, 681,
	246, 681,
	247, 681,
	248, 681,
	249, 681,
	250, 681,
	251, 681,
	253, 681,
	254, 681,
	255, 681,
	256, 681,
	257, 681,
	258, 681,
	260, 681,
	261, 681,
	262, 681,
	263, 681,
	265, 681,
	266, 681,
	267, 681,
	268, 681,
	269, 681,
	270, 681,
	271, 681,
	272, 681,
	273, 681,
	274, 681,
	275, 681,
	276, 681,
	277, 681,
	278, 681,
	279, 681,
	281, 681,
	282, 681,
	283, 681,
	284, 681,
	285, 681,
	286, 681,
	287, 681,
	288, 681,
	289, 681,
	290, 681,
	292, 681,
	294, 681,
	295, 681,
	296, 681,
	297, 681,
	298, 681,
	299, 681,
	300, 681,
	302, 681,
	303, 681,
	304, 681,
	307, 681,
	308, 681,
	309, 681,
	310, 681,
	311, 681,
	312, 681,
	313, 681,
	314, 681,
	315, 681,
	318, 681,
	319, 681,
	320, 681,
	321, 681,
	322, 681,
	323, 681,
	325, 681,
	326, 681,
	327, 681,
	328, 681,
	329, 681,
	330, 681,
	333, 681,
	338, 681,
	339, 681,
	340, 681,
	341, 681,
	342, 681,
	343, 681,
	353, 681,
	358, 681,
	359, 681,
	360, 681,
	367, 681,
	373, 681,
	-2, 0,
	-1, 135,
	1, 53,
	371, 53,
	-2, 673,
	-1, 495,
	128, 1284,
	305, 1284,
	348, 1284,
	369, 1284,
	-2, 0,
	-1, 496,
	128, 1237,
	305, 1237,
	348, 1237,
	369, 1237,
	-2, 0,
	-1, 498,
	128, 1342,
	305, 1342,
	348, 1342,
	369, 1342,
	-2, 0,
	-1, 500,
	128, 1364,
	305, 1364,
	348, 1364,
	369, 1364,
	-2, 0,
	-1, 507,
	128, 1289,
	305, 1289,
	348, 1289,
	369, 1289,
	-2, 317,
	-1, 533,
	1, 394,
	366, 394,
	368, 394,
	370, 394,
	371, 394,
	-2, 0,
	-1, 534,
	1, 441,
	125, 441,
	366, 441,
	368, 441,
	370, 441,
	371, 441,
	-2, 0,
	-1, 540,
	1, 408,
	366, 408,
	368, 408,
	370, 408,
	371, 408,
	-2, 0,
	-1, 542,
	1, 412,
	366, 412,
	368, 412,
	370, 412,
	371, 412,
	-2, 0,
	-1, 545,
	1, 420,
	366, 420,
	368, 420,
	370, 420,
	371, 420,
	-2, 0,
	-1, 546,
	1, 425,
	366, 425,
	368, 425,
	370, 425,
	371, 425,
	-2, 0,
	-1, 549,
	1, 435,
	366, 435,
	368, 435,
	370, 435,
	371, 435,
	-2, 0,
	-1, 563,
	113, 683,
	180, 683,
	205, 683,
	-2, 643,
	-1, 566,
	113, 682,
	180, 682,
	205, 682,
	-2, 641,
	-1, 623,
	367, 1215,
	-2, 1208,
	-1, 624,
	367, 1216,
	-2, 1209,
	-1, 630,
	5, 860,
	367, 860,
	-2, 1416,
	-1, 655,
	5, 819,
	-2, 1385,
	-1, 656,
	5, 854,
	367, 854,
	-2, 1387,
	-1, 657,
	5, 829,
	-2, 1388,
	-1, 658,
	5, 828,
	-2, 1389,
	-1, 659,
	5, 854,
	367, 854,
	-2, 1392,
	-1, 660,
	5, 854,
	367, 854,
	-2, 1393,
	-1, 661,
	5, 855,
	-2, 1396,
	-1, 662,
	5, 811,
	-2, 1397,
	-1, 663,
	5, 811,
	-2, 1398,
	-1, 664,
	5, 836,
	-2, 1402,
	-1, 665,
	5, 821,
	-2, 1403,
	-1, 666,
	5, 822,
	-2, 1404,
	-1, 667,
	5, 812,
	-2, 1410,
	-1, 668,
	5, 813,
	-2, 1411,
	-1, 669,
	5, 814,
	-2, 1412,
	-1, 670,
	5, 815,
	-2, 1413,
	-1, 671,
	5, 816,
	-2, 1414,
	-1, 672,
	5, 817,
	-2, 1415,
	-1, 673,
	5, 811,
	-2, 1420,
	-1, 674,
	5, 820,
	-2, 1425,
	-1, 675,
	5, 818,
	-2, 1428,
	-1, 676,
	5, 852,
	367, 852,
	-2, 1430,
	-1, 677,
	5, 856,
	-2, 1433,
	-1, 678,
	5, 858,
	-2, 1434,
	-1, 679,
	5, 851,
	367, 851,
	-2, 1439,
	-1, 775,
	221, 671,
	-2, 518,
	-1, 779,
	207, 1212,
	-2, 0,
	-1, 814,
	1, 208,
	366, 208,
	368, 208,
	370, 208,
	371, 208,
	-2, 646,
	-1, 821,
	4, 1438,
	10, 1438,
	11, 1438,
	13, 1438,
	14, 1438,
	15, 1438,
	16, 1438,
	17, 1438,
	18, 1438,
	20, 1438,
	21, 1438,
	23, 1438,
	26, 1438,
	28, 1438,
	30, 1438,
	33, 1438,
	34, 1438,
	35, 1438,
	36, 1438,
	37, 1438,
	38, 1438,
	39, 1438,
	40, 1438,
	41, 1438,
	42, 1438,
	44, 1438,
	45, 1438,
	46, 1438,
	47, 1438,
	48, 1438,
	51, 1438,
	52, 1438,
	53, 1438,
	55, 1438,
	56, 1438,
	57, 1438,
	60, 1438,
	61, 1438,
	62, 1438,
	63, 1438,
	64, 1438,
	66, 1438,
	67, 1438,
	68, 1438,
	69, 1438,
	71, 1438,
	72, 1438,
	73, 1438,
	74, 1438,
	82, 1438,
	83, 1438,
	84, 1438,
	85, 1438,
	86, 1438,
	87, 1438,
	88, 1438,
	89, 1438,
	91, 1438,
	93, 1438,
	95, 1438,
	98, 1438,
	99, 1438,
	101, 1438,
	105, 1438,
	106, 1438,
	107, 1438,
	108, 1438,
	109, 1438,
	110, 1438,
	114, 1438,
	115, 1438,
	116, 1438,
	117, 1438,
	118, 1438,
	119, 1438,
	120, 1438,
	121, 1438,
	122, 1438,
	123, 1438,
	124, 1438,
	126, 1438,
	129, 1438,
	131, 1438,
	132, 1438,
	134, 1438,
	137, 1438,
	138, 1438,
	141, 1438,
	142, 1438,
	143, 1438,
	144, 1438,
	145, 1438,
	146, 1438,
	147, 1438,
	148, 1438,
	150, 1438,
	152, 1438,
	153, 1438,
	154, 1438,
	155, 1438,
	156, 1438,
	157, 1438,
	158, 1438,
	159, 1438,
	160, 1438,
	162, 1438,
	164, 1438,
	165, 1438,
	166, 1438,
	167, 1438,
	168, 1438,
	169, 1438,
	170, 1438,
	171, 1438,
	173, 1438,
	174, 1438,
	176, 1438,
	177, 1438,
	178, 1438,
	179, 1438,
	181, 1438,
	184, 1438,
	185, 1438,
	186, 1438,
	187, 1438,
	188, 1438,
	189, 1438,
	190, 1438,
	191, 1438,
	192, 1438,
	193, 1438,
	194, 1438,
	195, 1438,
	196, 1438,
	200, 1438,
	201, 1438,
	202, 1438,
	203, 1438,
	204, 1438,
	206, 1438,
	209, 1438,
	210, 1438,
	212, 1438,
	213, 1438,
	215, 1438,
	217, 1438,
	218, 1438,
	219, 1438,
	220, 1438,
	221, 1438,
	222, 1438,
	224, 1438,
	225, 1438,
	226, 1438,
	227, 1438,
	228, 1438,
	230, 1438,
	231, 1438,
	232, 1438,
	233, 1438,
	234, 1438,
	235, 1438,
	236, 1438,
	237, 1438,
	239, 1438,
	240, 1438,
	241, 1438,
	242, 1438,
	243, 1438,
	244, 1438,
	245, 1438,
	246, 1438,
	247, 1438,
	248, 1438,
	249, 1438,
	250, 1438,
	251, 1438,
	253, 1438,
	254, 1438,
	255, 1438,
	256, 1438,
	257, 1438,
	258, 1438,
	259, 1438,
	260, 1438,
	261, 1438,
	262, 1438,
	263, 1438,
	265, 1438,
	266, 1438,
	267, 1438,
	268, 1438,
	269, 1438,
	271, 1438,
	272, 1438,
	273, 1438,
	274, 1438,
	275, 1438,
	276, 1438,
	277, 1438,
	278, 1438,
	279, 1438,
	281, 1438,
	282, 1438,
	283, 1438,
	284, 1438,
	285, 1438,
	286, 1438,
	287, 1438,
	288, 1438,
	289, 1438,
	290, 1438,
	292, 1438,
	294, 1438,
	295, 1438,
	296, 1438,
	297, 1438,
	298, 1438,
	299, 1438,
	300, 1438,
	302, 1438,
	303, 1438,
	304, 1438,
	307, 1438,
	308, 1438,
	309, 1438,
	310, 1438,
	312, 1438,
	313, 1438,
	314, 1438,
	315, 1438,
	318, 1438,
	319, 1438,
	320, 1438,
	321, 1438,
	323, 1438,
	325, 1438,
	326, 1438,
	327, 1438,
	328, 1438,
	329, 1438,
	330, 1438,
	333, 1438,
	338, 1438,
	339, 1438,
	340, 1438,
	341, 1438,
	342, 1438,
	343, 1438,
	344, 1438,
	346, 1438,
	347, 1438,
	348, 1438,
	349, 1438,
	350, 1438,
	351, 1438,
	352, 1438,
	353, 1438,
	355, 1438,
	356, 1438,
	357, 1438,
	358, 1438,
	359, 1438,
	360, 1438,
	361, 1438,
	362, 1438,
	363, 1438,
	365, 1438,
	368, 1438,
	369, 1438,
	372, 1438,
	373, 1438,
	-2, 0,
	-1, 835,
	128, 1342,
	305, 1342,
	348, 1342,
	369, 1342,
	-2, 0,
	-1, 852,
	128, 1364,
	305, 1364,
	348, 1364,
	369, 1364,
	-2, 0,
	-1, 853,
	165, 586,
	230, 586,
	234, 586,
	-2, 305,
	-1, 922,
	113, 682,
	180, 682,
	205, 682,
	-2, 644,
	-1, 1001,
	104, 648,
	113, 648,
	161, 648,
	180, 648,
	205, 648,
	211, 648,
	316, 648,
	-2, 989,
	-1, 1011,
	367, 1192,
	-2, 1180,
	-1, 1029,
	368, 1132,
	-2, 0,
	-1, 1053,
	165, 586,
	230, 586,
	234, 586,
	-2, 581,
	-1, 1085,
	104, 648,
	113, 648,
	161, 648,
	180, 648,
	205, 648,
	211, 648,
	316, 648,
	-2, 744,
	-1, 1308,
	165, 586,
	230, 586,
	234, 586,
	-2, 307,
	-1, 1406,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 895,
	-1, 1407,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 896,
	-1, 1408,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 897,
	-1, 1409,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 898,
	-1, 1410,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 899,
	-1, 1411,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 900,
	-1, 1412,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 901,
	-1, 1413,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 902,
	-1, 1422,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 911,
	-1, 1423,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 912,
	-1, 1424,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 913,
	-1, 1427,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 918,
	-1, 1433,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 920,
	-1, 1435,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 924,
	-1, 1436,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 925,
	-1, 1437,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 926,
	-1, 1438,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 927,
	-1, 1464,
	216, 1074,
	-2, 1077,
	-1, 1508,
	128, 1114,
	367, 1215,
	-2, 1208,
	-1, 1509,
	128, 1115,
	-2, 1381,
	-1, 1510,
	128, 1116,
	-2, 1288,
	-1, 1511,
	128, 1117,
	-2, 1252,
	-1, 1512,
	128, 1118,
	-2, 1268,
	-1, 1513,
	128, 1119,
	-2, 1287,
	-1, 1514,
	128, 1120,
	-2, 1339,
	-1, 1590,
	1, 745,
	71, 745,
	104, 745,
	113, 745,
	129, 745,
	133, 745,
	135, 745,
	152, 745,
	161, 745,
	168, 745,
	177, 745,
	180, 745,
	192, 745,
	205, 745,
	207, 745,
	211, 745,
	252, 745,
	254, 745,
	316, 745,
	324, 745,
	335, 745,
	336, 745,
	345, 745,
	366, 745,
	368, 745,
	370, 745,
	371, 745,
	372, 745,
	-2, 744,
	-1, 1730,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 919,
	-1, 1731,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 921,
	-1, 1736,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 922,
	-1, 1754,
	216, 1073,
	-2, 1076,
	-1, 1979,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 923,
	-1, 1984,
	164, 0,
	-2, 939,
	-1, 1994,
	216, 1075,
	-2, 1078,
	-1, 2036,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 966,
	-1, 2037,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 967,
	-1, 2038,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 968,
	-1, 2042,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 972,
	-1, 2043,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 973,
	-1, 2044,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 974,
	-1, 2169,
	164, 0,
	-2, 940,
	-1, 2172,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 943,
	-1, 2173,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 945,
	-1, 2289,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 944,
	-1, 2290,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 946,
	-1, 2297,
	164, 0,
	-2, 975,
	-1, 2374,
	164, 0,
	-2, 976,
	-1, 2451,
	36, 0,
	145, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 1384,
}

const sqlPrivate = 57344

const sqlLast = 42881

var sqlAct = [...]int{

	624, 2125, 2450, 2459, 2425, 1653, 2498, 2460, 2323, 2461,
	1661, 2013, 567, 2379, 1961, 1208, 1724, 2449, 1633, 2270,
	583, 70, 2135, 2223, 1585, 727, 2157, 2237, 600, 2159,
	2303, 1215, 1302, 1927, 2096, 2097, 769, 1079, 1650, 1637,
	173, 1632, 1114, 1868, 173, 1303, 2203, 2151, 1929, 1935,
	1820, 1662, 173, 1250, 1062, 1847, 1636, 873, 1586, 1594,
	617, 173, 1855, 1603, 575, 115, 173, 173, 1083, 2067,
	173, 1626, 1211, 173, 1819, 1385, 614, 1462, 438, 622,
	1765, 173, 621, 1720, 1380, 1251, 1204, 1007, 1333, 856,
	1091, 1093, 925, 453, 25, 1063, 594, 1450, 1329, 1472,
	1447, 804, 855, 1039, 1634, 1043, 733, 1488, 1482, 1708,
	801, 875, 1640, 435, 815, 1655, 736, 506, 1070, 1559,
	1228, 1572, 715, 1504, 996, 794, 115, 173, 173, 1088,
	593, 486, 1053, 1537, 926, 173, 164, 464, 924, 1332,
	572, 499, 116, 1222, 616, 791, 1052, 169, 713, 503,
	2238, 527, 930, 2081, 1753, 1654, 2082, 1080, 1230, 117,
	1977, 173, 173, 173, 173, 571, 571, 1945, 173, 173,
	1230, 1230, 2494, 2475, 2471, 2470, 1113, 2236, 1676, 1676,
	174, 2467, 2447, 1561, 2446, 1113, 1691, 757, 1691, 2420,
	2415, 2411, 1944, 1684, 2284, 1113, 1676, 2403, 566, 1757,
	115, 2236, 2376, 478, 2354, 1758, 1684, 2351, 2236, 581,
	2349, 1113, 2334, 2333, 2236, 2311, 1113, 2236, 2308, 1113,
	2291, 2258, 1113, 2256, 1684, 1676, 2235, 1676, 2216, 25,
	2236, 2196, 1113, 2174, 2171, 1676, 38, 1676, 1684, 2150,
	2145, 2077, 1627, 1631, 1631, 2078, 1988, 39, 1955, 1916,
	1676, 1871, 1917, 1113, 719, 1676, 720, 1844, 564, 1837,
	42, 1113, 1835, 1838, 730, 751, 1676, 741, 745, 2070,
	1834, 576, 1627, 1756, 1676, 563, 717, 1790, 1791, 1676,
	1808, 1809, 1810, 48, 1833, 1754, 1695, 1485, 1676, 1676,
	1676, 1683, 1675, 1630, 1566, 1684, 1676, 1631, 1565, 1691,
	1243, 1110, 2421, 1691, 1244, 132, 1658, 2284, 2070, 1560,
	1972, 1592, 59, 1790, 1791, 2049, 1808, 1809, 1810, 60,
	1991, 61, 1113, 1917, 1723, 1706, 1676, 1764, 1311, 2168,
	1805, 1057, 1466, 755, 134, 837, 941, 942, 1486, 971,
	972, 973, 981, 982, 983, 135, 834, 132, 833, 1330,
	832, 831, 974, 830, 63, 829, 2239, 828, 827, 944,
	1231, 826, 985, 825, 824, 823, 1805, 721, 718, 559,
	133, 558, 1231, 1231, 557, 525, 134, 524, 126, 574,
	523, 522, 521, 943, 520, 127, 519, 1487, 1484, 963,
	1796, 518, 517, 960, 516, 515, 514, 513, 512, 511,
	173, 510, 173, 173, 509, 173, 494, 493, 118, 761,
	173, 1944, 133, 492, 491, 490, 173, 426, 425, 424,
	423, 422, 407, 406, 398, 1501, 1796, 1560, 397, 173,
	173, 173, 173, 173, 396, 64, 395, 388, 818, 387,
	966, 967, 968, 969, 158, 157, 156, 155, 154, 949,
	118, 808, 1806, 1919, 153, 152, 151, 150, 149, 572,
	173, 119, 66, 1489, 67, 148, 147, 1811, 941, 942,
	146, 978, 986, 173, 145, 144, 143, 132, 1790, 1791,
	132, 1710, 1236, 142, 459, 141, 140, 99, 1806, 173,
	984, 944, 1084, 1336, 1229, 1364, 139, 138, 137, 173,
	136, 1863, 1499, 868, 2493, 976, 134, 2466, 2448, 134,
	2430, 964, 2371, 1497, 1495, 943, 937, 773, 2352, 2202,
	777, 2201, 793, 2197, 1790, 1791, 1807, 2189, 2188, 2187,
	818, 1805, 2277, 2183, 1790, 1791, 975, 2182, 2181, 2180,
	2156, 1483, 133, 2064, 768, 133, 797, 797, 2059, 816,
	126, 2058, 2057, 126, 1999, 798, 1915, 127, 1875, 1842,
	127, 173, 1807, 1839, 1827, 1818, 1789, 1689, 1247, 1786,
	970, 1785, 1783, 1770, 1769, 871, 923, 1590, 937, 1082,
	118, 949, 936, 1657, 1458, 965, 1081, 728, 1214, 2015,
	838, 1796, 1008, 2438, 999, 766, 866, 2406, 941, 942,
	1015, 979, 2400, 2399, 2398, 2390, 1790, 1791, 2388, 2366,
	2365, 2364, 2320, 1802, 1803, 1804, 2299, 2285, 819, 2264,
	572, 944, 1801, 1799, 1800, 1792, 1793, 1794, 1795, 1797,
	1798, 2242, 2194, 853, 1686, 2133, 2131, 1796, 2130, 2128,
	850, 132, 2105, 964, 922, 943, 2104, 1796, 2085, 1802,
	1803, 1804, 2073, 1806, 1983, 1959, 1906, 1901, 1801, 1799,
	1800, 1792, 1793, 1794, 1795, 1797, 1798, 921, 761, 977,
	134, 1888, 955, 956, 962, 961, 957, 958, 959, 980,
	869, 954, 952, 953, 945, 946, 947, 948, 950, 951,
	1888, 1887, 2276, 1082, 1459, 1873, 1843, 599, 2198, 1806,
	1331, 1719, 1817, 1779, 1778, 1775, 133, 1750, 1745, 1718,
	819, 949, 1452, 173, 126, 173, 1044, 965, 564, 1796,
	1047, 127, 933, 934, 1577, 941, 942, 1807, 1549, 938,
	1493, 1207, 729, 1060, 1051, 563, 1037, 1036, 173, 173,
	1035, 392, 1034, 1033, 118, 1032, 1061, 1031, 944, 1030,
	1068, 1029, 1028, 1027, 1026, 818, 173, 1025, 1024, 572,
	1011, 1023, 1117, 1041, 1042, 1022, 1021, 1020, 173, 1045,
	1019, 1012, 943, 1807, 1000, 999, 849, 841, 1066, 1048,
	173, 1806, 812, 2382, 2283, 2176, 173, 2155, 173, 1008,
	173, 1500, 2080, 1213, 173, 2076, 1578, 115, 1790, 1791,
	1111, 1957, 997, 1930, 1694, 1206, 1084, 2287, 2286, 2280,
	865, 2083, 1946, 954, 952, 953, 945, 946, 947, 948,
	950, 951, 1101, 1801, 1799, 1800, 1792, 1793, 1794, 1795,
	1797, 1798, 734, 1627, 767, 1049, 173, 173, 919, 1841,
	1050, 1017, 1099, 818, 1056, 173, 1078, 1693, 173, 1840,
	1054, 1729, 862, 1219, 1086, 1807, 1962, 1212, 743, 747,
	1100, 753, 1861, 1058, 2304, 1248, 1654, 1317, 1498, 1117,
	1799, 1800, 1792, 1793, 1794, 1795, 1797, 1798, 173, 1496,
	1494, 2016, 1761, 173, 1794, 1795, 1797, 1798, 173, 173,
	1473, 173, 793, 173, 400, 173, 1040, 173, 1940, 913,
	2092, 2433, 1257, 1112, 1680, 412, 2490, 2491, 173, 1969,
	1094, 1337, 1095, 38, 173, 173, 1094, 2250, 1095, 1233,
	1696, 1082, 1235, 1326, 39, 708, 1238, 2344, 2343, 2410,
	706, 1221, 2342, 1224, 905, 819, 2341, 42, 914, 609,
	173, 2120, 1118, 2118, 1117, 2089, 941, 942, 947, 948,
	950, 951, 729, 1540, 1792, 1793, 1794, 1795, 1797, 1798,
	48, 2088, 1014, 1774, 710, 413, 1773, 115, 682, 944,
	1687, 159, 681, 1245, 1772, 1246, 404, 850, 570, 170,
	704, 1304, 701, 393, 1771, 1308, 1394, 863, 1096, 59,
	1732, 408, 1679, 943, 1096, 1338, 60, 1305, 61, 1318,
	433, 1623, 1257, 1257, 1334, 476, 170, 1322, 1619, 484,
	1617, 1434, 489, 1604, 1958, 1055, 1352, 754, 2261, 1367,
	508, 572, 1553, 819, 1345, 1552, 572, 1386, 1393, 1395,
	864, 63, 1342, 1596, 1651, 569, 561, 1361, 1346, 2116,
	1347, 1363, 1348, 1362, 1349, 2123, 1350, 2124, 1206, 1118,
	2409, 1912, 473, 162, 1449, 2325, 173, 1202, 173, 949,
	1366, 173, 1365, 1356, 1358, 2444, 716, 716, 1485, 1596,
	1449, 2107, 173, 564, 393, 1595, 564, 564, 951, 1558,
	1225, 1117, 1489, 2482, 173, 571, 1607, 1937, 173, 1384,
	1376, 173, 2417, 1377, 1378, 173, 1470, 899, 2009, 173,
	393, 393, 749, 393, 173, 1790, 1791, 170, 758, 572,
	173, 1117, 64, 747, 173, 1341, 1473, 2418, 163, 1486,
	1460, 964, 1456, 1580, 1118, 1457, 940, 1454, 753, 941,
	942, 415, 414, 2490, 1597, 900, 848, 1970, 119, 66,
	1899, 67, 941, 942, 1908, 552, 1903, 870, 1579, 552,
	1515, 1798, 944, 1625, 132, 1608, 1610, 1104, 1351, 941,
	942, 459, 1968, 580, 99, 944, 1102, 580, 1487, 1484,
	1038, 1790, 1791, 2393, 1489, 587, 943, 1646, 918, 2348,
	1556, 1360, 944, 134, 2295, 399, 1564, 1555, 1606, 943,
	568, 1570, 1790, 1791, 1615, 965, 1574, 1575, 1522, 2506,
	1621, 1569, 1721, 1722, 1086, 1613, 943, 1600, 173, 405,
	1618, 1624, 963, 1309, 401, 173, 1097, 1742, 1796, 133,
	912, 1431, 1097, 465, 402, 553, 173, 126, 173, 553,
	173, 702, 1740, 173, 127, 173, 702, 173, 173, 904,
	173, 173, 949, 2108, 1489, 818, 470, 1321, 1320, 173,
	1330, 1327, 466, 421, 1777, 949, 994, 118, 747, 1674,
	1230, 1118, 160, 966, 967, 968, 969, 712, 878, 427,
	711, 1108, 949, 416, 1445, 2326, 1605, 1573, 1589, 2114,
	1806, 1938, 571, 467, 1796, 389, 703, 1107, 702, 1443,
	1699, 1118, 952, 953, 945, 946, 947, 948, 950, 951,
	2163, 161, 1701, 2462, 964, 1796, 469, 1105, 115, 1094,
	1737, 1095, 2481, 1734, 115, 1593, 1656, 964, 1656, 2463,
	1738, 886, 1483, 1702, 1743, 1106, 1937, 562, 1682, 1448,
	1429, 1432, 554, 1324, 964, 1700, 554, 1117, 1671, 508,
	1660, 775, 508, 472, 780, 173, 1806, 1668, 1672, 783,
	797, 431, 797, 1681, 1807, 393, 816, 1677, 1669, 1678,
	1670, 173, 173, 173, 1428, 173, 1688, 1439, 508, 508,
	393, 805, 758, 2006, 1690, 1440, 859, 1441, 965, 1707,
	1455, 1446, 2489, 909, 173, 929, 1340, 1096, 2487, 1911,
	1045, 965, 1048, 970, 2269, 2336, 939, 2335, 854, 508,
	1648, 2507, 1042, 1041, 859, 1296, 847, 844, 965, 2464,
	836, 555, 508, 1697, 2480, 555, 430, 468, 115, 2318,
	1807, 2385, 2007, 2091, 1325, 819, 1884, 2501, 845, 1880,
	2045, 1649, 1739, 1220, 1209, 734, 1089, 2005, 508, 1741,
	2192, 860, 2512, 556, 1869, 861, 2426, 556, 910, 390,
	1801, 1799, 1800, 1792, 1793, 1794, 1795, 1797, 1798, 2246,
	1430, 928, 1231, 1713, 1355, 1205, 2465, 1711, 1312, 860,
	1717, 1715, 471, 861, 572, 417, 953, 945, 946, 947,
	948, 950, 951, 747, 1372, 1223, 2136, 1223, 1763, 1442,
	945, 946, 947, 948, 950, 951, 1444, 879, 1489, 2271,
	393, 771, 911, 770, 954, 952, 953, 945, 946, 947,
	948, 950, 951, 1870, 2319, 391, 418, 1118, 1800, 1792,
	1793, 1794, 1795, 1797, 1798, 928, 887, 1890, 927, 1889,
	1735, 2046, 1733, 1092, 680, 880, 1073, 2047, 877, 1727,
	1792, 1793, 1794, 1795, 1797, 1798, 419, 2193, 420, 572,
	1749, 2511, 1003, 929, 483, 1858, 1568, 2249, 1373, 1076,
	429, 859, 173, 1117, 2248, 1845, 2245, 1567, 173, 173,
	1851, 1760, 173, 2499, 462, 1571, 859, 173, 481, 166,
	173, 1316, 569, 779, 1074, 475, 1852, 2231, 173, 432,
	2126, 790, 927, 788, 173, 173, 173, 2262, 1910, 428,
	173, 1331, 1328, 173, 1865, 1850, 2204, 2316, 2068, 173,
	173, 173, 173, 173, 1492, 1097, 2298, 2191, 173, 2122,
	173, 3, 465, 2232, 173, 1821, 860, 1982, 1314, 2500,
	861, 1913, 173, 1784, 1744, 1860, 1692, 629, 2317, 1881,
	1315, 1629, 173, 1622, 173, 470, 173, 1864, 908, 173,
	2502, 466, 489, 173, 716, 1616, 1846, 917, 173, 1874,
	173, 1075, 1257, 916, 842, 1822, 897, 173, 1824, 1825,
	1826, 2247, 759, 1918, 760, 1920, 1353, 393, 393, 572,
	173, 818, 467, 895, 1876, 458, 33, 1885, 457, 32,
	903, 1849, 818, 173, 1344, 170, 1257, 1853, 1854, 1018,
	1491, 1859, 456, 29, 1898, 469, 2458, 393, 1900, 2423,
	1942, 893, 455, 76, 1905, 891, 2220, 2112, 889, 1218,
	2110, 1885, 684, 883, 2090, 393, 1954, 393, 173, 393,
	2227, 700, 2228, 1226, 1926, 1652, 683, 1963, 1921, 1645,
	626, 1924, 480, 1118, 1939, 1257, 1933, 756, 1240, 474,
	941, 942, 789, 1947, 787, 454, 75, 739, 451, 21,
	452, 22, 2230, 1922, 450, 27, 1241, 449, 19, 734,
	1956, 2233, 1239, 944, 907, 508, 170, 1237, 173, 2001,
	2002, 2003, 1965, 1966, 170, 734, 1967, 508, 1591, 1953,
	1948, 1949, 896, 1950, 1951, 1971, 747, 943, 1234, 1985,
	1973, 747, 1964, 1306, 1232, 786, 1257, 753, 1975, 894,
	1290, 447, 18, 902, 1289, 1109, 468, 508, 1928, 448,
	17, 33, 508, 1103, 32, 442, 14, 170, 508, 1098,
	508, 1992, 508, 1996, 508, 1069, 508, 892, 29, 443,
	15, 890, 1257, 1257, 888, 2359, 1995, 1354, 76, 882,
	2229, 1257, 1257, 508, 508, 705, 707, 2019, 724, 173,
	2017, 819, 2022, 949, 2491, 173, 2024, 1386, 2020, 931,
	2052, 471, 819, 1725, 173, 173, 1386, 2025, 725, 508,
	2008, 2010, 2011, 2282, 1257, 441, 13, 2281, 1335, 2079,
	2152, 75, 2086, 1073, 21, 2053, 22, 446, 11, 2361,
	27, 460, 1612, 19, 440, 9, 445, 7, 115, 2056,
	1290, 1290, 444, 6, 1289, 1289, 1076, 2072, 173, 2069,
	173, 2071, 2066, 1665, 2121, 439, 5, 173, 2144, 2395,
	818, 785, 1071, 2087, 753, 753, 1726, 2239, 2132, 881,
	2084, 1074, 1596, 932, 2373, 173, 173, 18, 1611, 2146,
	2094, 2129, 726, 2205, 1463, 17, 1072, 935, 1003, 2115,
	1620, 14, 1467, 173, 1614, 2103, 1475, 2149, 2102, 2422,
	482, 2101, 820, 173, 2127, 15, 2267, 2137, 1117, 1507,
	1507, 1520, 2140, 1532, 941, 942, 2141, 2138, 2075, 1544,
	1545, 1547, 2142, 2165, 1659, 489, 2147, 716, 2510, 1596,
	758, 2148, 1647, 2153, 2139, 1609, 1644, 944, 941, 942,
	1557, 393, 1307, 1249, 2497, 2111, 173, 2113, 1075, 2310,
	2166, 13, 2210, 1588, 1790, 1791, 2154, 393, 941, 942,
	393, 943, 2065, 11, 1601, 1583, 2012, 2170, 393, 1069,
	9, 1704, 7, 393, 1257, 1704, 1703, 1960, 6, 393,
	1866, 1836, 1705, 1628, 1554, 943, 1551, 1550, 1712, 753,
	1714, 5, 747, 1481, 820, 1005, 2178, 2004, 1923, 1015,
	1013, 173, 915, 2190, 173, 1849, 906, 901, 898, 884,
	846, 1728, 1310, 560, 1117, 173, 173, 2324, 463, 173,
	173, 173, 2208, 1343, 885, 1862, 1576, 1073, 945, 946,
	947, 948, 950, 951, 2215, 1375, 173, 2416, 2184, 2214,
	819, 173, 1776, 173, 2209, 173, 173, 173, 2207, 173,
	1076, 173, 2378, 818, 2244, 2211, 2212, 2240, 2294, 1490,
	2219, 173, 173, 1016, 52, 2099, 1071, 603, 818, 2243,
	2221, 2093, 1639, 1638, 1120, 1074, 1319, 1635, 625, 2265,
	1506, 1387, 699, 1242, 758, 2260, 627, 1254, 1118, 628,
	1072, 1255, 1046, 2263, 615, 393, 1252, 1667, 2268, 508,
	813, 1663, 508, 2266, 508, 1857, 393, 393, 2274, 1673,
	758, 2103, 1323, 2288, 2102, 2272, 1453, 2101, 1601, 1471,
	1759, 1009, 2293, 595, 607, 2273, 2279, 606, 1468, 840,
	2206, 1867, 1936, 2275, 1523, 2103, 1371, 1716, 2102, 1368,
	2103, 2101, 1932, 2102, 2109, 403, 2101, 1787, 811, 1529,
	1521, 173, 1075, 173, 1517, 1117, 173, 920, 1067, 995,
	1664, 867, 1943, 1685, 173, 1059, 1379, 723, 2307, 2278,
	1117, 722, 1313, 1698, 988, 987, 709, 2387, 2300, 858,
	857, 1210, 1883, 2505, 2328, 1257, 2394, 2330, 2106, 734,
	2312, 2432, 131, 128, 1118, 734, 734, 2314, 130, 734,
	173, 129, 2327, 818, 585, 1206, 1909, 173, 2309, 79,
	31, 30, 2329, 98, 1709, 173, 173, 818, 818, 820,
	2345, 1877, 1856, 97, 96, 2360, 1119, 95, 94, 2350,
	393, 393, 393, 819, 393, 173, 2362, 2372, 2358, 93,
	173, 1257, 2368, 2103, 2367, 1902, 2102, 173, 819, 2101,
	2356, 92, 91, 393, 90, 2389, 89, 88, 87, 1914,
	2357, 86, 2369, 2370, 2381, 85, 2338, 2383, 2346, 84,
	83, 2103, 173, 173, 2102, 2392, 1925, 2101, 2384, 173,
	82, 81, 504, 2375, 2404, 1205, 501, 818, 2402, 2391,
	1257, 2353, 173, 2405, 1205, 78, 818, 818, 77, 28,
	24, 102, 2339, 2340, 23, 74, 73, 820, 26, 16,
	10, 2408, 20, 57, 58, 1068, 572, 56, 55, 173,
	54, 173, 12, 50, 173, 49, 1117, 47, 2413, 2414,
	46, 45, 44, 1119, 2439, 1118, 1748, 2441, 2429, 2428,
	8, 101, 2440, 1751, 2407, 41, 40, 2445, 100, 113,
	1118, 110, 173, 112, 109, 1976, 111, 114, 2443, 106,
	107, 1767, 1768, 108, 2457, 2456, 2455, 105, 2434, 173,
	104, 2442, 2474, 37, 36, 173, 35, 2468, 34, 2,
	2472, 1, 0, 819, 2479, 2476, 0, 2473, 0, 173,
	0, 2477, 2478, 0, 0, 0, 0, 819, 819, 2488,
	2486, 0, 0, 2492, 0, 0, 0, 0, 1119, 1256,
	0, 1816, 2496, 2103, 2495, 0, 2102, 1790, 1791, 2101,
	1808, 1809, 1810, 1829, 0, 0, 2504, 2508, 2503, 0,
	2509, 393, 0, 2167, 0, 0, 0, 393, 393, 0,
	0, 393, 0, 0, 0, 0, 1588, 0, 0, 1588,
	0, 0, 0, 0, 0, 0, 0, 1872, 0, 0,
	0, 0, 0, 393, 1878, 1879, 0, 819, 0, 1601,
	1805, 0, 1886, 0, 762, 764, 819, 819, 1891, 1892,
	1894, 1896, 1897, 0, 0, 0, 734, 393, 0, 1904,
	0, 0, 0, 1907, 1292, 0, 0, 0, 0, 0,
	1290, 393, 0, 0, 1289, 0, 1118, 0, 1291, 1256,
	1256, 1218, 1253, 1218, 0, 508, 0, 0, 393, 0,
	0, 0, 1931, 0, 0, 0, 0, 393, 0, 1941,
	1796, 0, 461, 0, 1290, 0, 393, 0, 1289, 0,
	0, 0, 0, 1790, 1791, 1119, 1808, 1809, 1810, 1709,
	0, 0, 462, 1523, 1523, 0, 0, 0, 839, 1987,
	0, 0, 1709, 2231, 843, 0, 2224, 0, 0, 0,
	0, 1811, 1665, 734, 2222, 1119, 1746, 1747, 0, 2226,
	0, 0, 0, 1290, 0, 0, 0, 1289, 0, 0,
	0, 585, 1806, 0, 1292, 1292, 1805, 393, 0, 2232,
	465, 0, 0, 0, 0, 0, 0, 0, 1291, 1291,
	0, 0, 1253, 1253, 0, 0, 0, 0, 0, 0,
	0, 2225, 0, 470, 0, 0, 0, 0, 0, 466,
	1523, 1523, 1523, 0, 1989, 0, 0, 0, 0, 0,
	0, 604, 71, 0, 1290, 0, 0, 2014, 1289, 0,
	0, 0, 0, 1813, 1814, 1815, 1796, 0, 0, 0,
	467, 0, 0, 0, 0, 0, 1807, 0, 0, 0,
	0, 0, 989, 990, 991, 992, 993, 0, 0, 0,
	1290, 1290, 1002, 469, 1289, 1289, 0, 0, 0, 1290,
	1290, 0, 1010, 1289, 1289, 0, 0, 1811, 734, 0,
	0, 2050, 0, 71, 0, 0, 2227, 0, 2228, 820,
	0, 0, 2060, 0, 0, 0, 0, 0, 1806, 0,
	0, 0, 1290, 0, 0, 0, 1289, 0, 393, 0,
	0, 0, 0, 0, 1588, 0, 0, 0, 2230, 0,
	0, 0, 2253, 758, 1588, 0, 2257, 2233, 0, 0,
	0, 0, 0, 1802, 1803, 1804, 0, 565, 2098, 0,
	573, 0, 1801, 1799, 1800, 1792, 1793, 1794, 1795, 1797,
	1798, 0, 0, 0, 0, 0, 735, 71, 0, 0,
	0, 0, 0, 0, 0, 2117, 0, 1601, 0, 1218,
	2119, 0, 1807, 0, 468, 0, 2134, 0, 0, 0,
	0, 1119, 578, 0, 552, 0, 1064, 1064, 0, 0,
	0, 0, 0, 585, 393, 393, 0, 0, 0, 0,
	0, 0, 580, 0, 0, 0, 2229, 0, 0, 0,
	0, 0, 2160, 0, 0, 0, 0, 0, 0, 1523,
	1523, 0, 2162, 0, 0, 0, 0, 0, 0, 471,
	0, 0, 0, 0, 0, 579, 0, 0, 0, 0,
	0, 2322, 1980, 1981, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1802,
	1803, 1804, 1290, 0, 553, 2185, 1289, 0, 1801, 1799,
	1800, 1792, 1793, 1794, 1795, 1797, 1798, 2355, 1523, 1523,
	1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
	1523, 1523, 1523, 1523, 1523, 1523, 1523, 0, 1523, 0,
	0, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
	2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
	393, 2048, 0, 758, 0, 0, 0, 585, 585, 0,
	0, 0, 0, 0, 1588, 758, 0, 0, 2217, 2218,
	1601, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	39, 0, 0, 0, 2098, 758, 2401, 0, 0, 0,
	2251, 0, 2252, 42, 393, 2254, 2255, 0, 393, 0,
	2259, 554, 0, 0, 0, 0, 0, 0, 2098, 0,
	758, 1635, 0, 2098, 0, 0, 0, 0, 0, 0,
	0, 1369, 0, 1374, 0, 0, 0, 0, 0, 1381,
	0, 2431, 0, 0, 0, 0, 0, 1119, 0, 1396,
	1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 0, 1433, 0, 1435, 1436, 1437, 1438, 577, 0,
	555, 0, 1665, 0, 0, 0, 0, 63, 0, 573,
	0, 1461, 0, 0, 0, 0, 0, 0, 1002, 2306,
	1601, 0, 2313, 1290, 0, 2315, 0, 1289, 0, 0,
	0, 0, 556, 393, 0, 0, 2098, 1502, 1503, 0,
	0, 1519, 0, 1531, 1533, 1538, 1541, 1542, 1543, 0,
	0, 0, 0, 0, 0, 0, 2332, 0, 0, 0,
	0, 2347, 0, 0, 2098, 0, 0, 0, 0, 393,
	0, 0, 0, 0, 0, 820, 758, 0, 0, 1290,
	0, 0, 0, 1289, 2160, 2160, 820, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1256,
	0, 0, 0, 0, 2380, 0, 0, 0, 0, 1588,
	0, 0, 0, 0, 119, 66, 1218, 67, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1290, 0,
	132, 0, 1289, 1256, 0, 0, 0, 459, 0, 0,
	99, 2396, 2397, 0, 0, 0, 0, 565, 393, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 2412, 0, 0, 0, 0, 0, 0, 998, 0,
	1001, 0, 0, 0, 0, 0, 0, 1006, 0, 0,
	0, 0, 1256, 0, 1292, 0, 0, 2419, 2427, 0,
	758, 0, 0, 393, 0, 133, 0, 0, 1291, 0,
	0, 0, 1253, 126, 0, 0, 2098, 0, 0, 0,
	127, 0, 2435, 2436, 2437, 1077, 0, 0, 1292, 0,
	0, 2380, 0, 0, 0, 0, 0, 1523, 0, 0,
	0, 38, 1291, 118, 0, 0, 1253, 0, 758, 0,
	0, 0, 39, 1256, 393, 0, 0, 0, 0, 0,
	2297, 0, 0, 0, 0, 42, 0, 0, 2485, 0,
	0, 0, 0, 0, 941, 942, 0, 1292, 1523, 0,
	981, 982, 983, 0, 0, 0, 0, 0, 48, 1256,
	1256, 1291, 0, 0, 0, 1253, 0, 944, 1256, 1256,
	985, 2321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 0, 59, 0, 1085,
	0, 943, 0, 0, 60, 0, 61, 963, 0, 0,
	0, 1256, 0, 0, 820, 0, 0, 0, 1292, 0,
	0, 0, 0, 0, 1523, 0, 0, 0, 0, 0,
	0, 0, 1291, 0, 0, 0, 1253, 0, 0, 63,
	0, 0, 0, 0, 0, 0, 0, 2374, 0, 0,
	0, 0, 0, 0, 1292, 1292, 0, 0, 966, 967,
	968, 969, 1119, 1292, 1292, 0, 0, 949, 1291, 1291,
	0, 0, 1253, 1253, 0, 0, 0, 1291, 1291, 0,
	0, 1253, 1253, 0, 0, 0, 0, 0, 0, 978,
	986, 0, 0, 0, 0, 0, 1292, 0, 0, 0,
	0, 0, 0, 0, 0, 436, 0, 0, 0, 0,
	1291, 0, 0, 0, 1253, 0, 0, 0, 0, 0,
	64, 0, 0, 976, 0, 0, 38, 0, 0, 964,
	0, 0, 1730, 1731, 0, 0, 0, 39, 1736, 0,
	0, 0, 0, 0, 0, 0, 119, 66, 0, 67,
	42, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 71, 0, 0, 0, 1119, 459,
	1755, 1256, 99, 48, 0, 0, 0, 1762, 0, 0,
	1766, 0, 0, 0, 0, 0, 0, 0, 970, 0,
	0, 134, 565, 0, 0, 565, 565, 1780, 0, 0,
	0, 0, 59, 965, 0, 0, 0, 820, 0, 60,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 979,
	0, 0, 820, 0, 0, 0, 0, 133, 0, 1790,
	1791, 1002, 1808, 1809, 1810, 126, 0, 0, 1538, 1538,
	1538, 0, 127, 0, 63, 1986, 0, 0, 1451, 0,
	0, 0, 0, 0, 0, 0, 1292, 0, 0, 0,
	0, 573, 0, 0, 1064, 118, 1001, 0, 0, 585,
	1291, 0, 0, 0, 1253, 0, 0, 0, 0, 0,
	0, 0, 1805, 0, 0, 0, 0, 977, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 980, 0, 954,
	952, 953, 945, 946, 947, 948, 950, 951, 0, 1119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1119, 64, 0, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 0, 0, 0, 0,
	0, 0, 1796, 0, 0, 0, 0, 0, 0, 1085,
	0, 119, 66, 0, 67, 0, 0, 820, 1934, 0,
	0, 0, 71, 0, 0, 0, 0, 132, 71, 0,
	0, 820, 820, 0, 459, 0, 0, 99, 0, 0,
	1952, 0, 1256, 1811, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 585, 585, 0,
	0, 0, 0, 0, 1806, 0, 0, 0, 0, 0,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1974, 0, 0, 0, 0, 1381, 0, 0,
	0, 0, 133, 1978, 0, 0, 1979, 0, 1256, 0,
	126, 820, 0, 0, 0, 0, 0, 127, 1984, 0,
	820, 820, 0, 0, 0, 0, 0, 1993, 0, 0,
	0, 0, 0, 0, 0, 1997, 0, 1292, 1952, 0,
	437, 0, 0, 0, 0, 0, 0, 0, 1807, 0,
	1119, 1291, 0, 0, 71, 1253, 71, 1256, 2021, 0,
	0, 0, 2023, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1292, 0, 2054, 2055, 0, 0, 0,
	0, 0, 0, 0, 2061, 2062, 2063, 1291, 0, 0,
	0, 1253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2074, 0, 0, 0, 1802, 1803, 1804, 0, 0,
	0, 0, 1292, 0, 1801, 1799, 1800, 1792, 1793, 1794,
	1795, 1797, 1798, 0, 0, 0, 1291, 0, 0, 0,
	1253, 2095, 1790, 1791, 0, 1808, 1809, 1810, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 941, 942, 0, 971, 972, 973, 981, 982, 983,
	0, 0, 0, 0, 0, 0, 0, 974, 0, 0,
	0, 1064, 0, 0, 944, 1805, 0, 985, 0, 0,
	585, 0, 0, 0, 0, 0, 941, 942, 0, 971,
	972, 973, 981, 982, 983, 0, 0, 0, 943, 0,
	0, 0, 974, 0, 963, 0, 0, 0, 960, 944,
	0, 0, 985, 0, 1790, 1791, 2169, 1808, 1809, 1810,
	2172, 2173, 0, 0, 1451, 2175, 0, 0, 0, 0,
	0, 0, 2177, 943, 2179, 1796, 0, 0, 0, 963,
	0, 0, 0, 960, 1001, 0, 0, 0, 0, 0,
	2186, 0, 0, 0, 0, 966, 967, 968, 969, 0,
	0, 0, 0, 0, 949, 0, 0, 1805, 0, 0,
	0, 0, 0, 0, 0, 0, 1811, 0, 0, 0,
	0, 0, 0, 2195, 0, 0, 978, 986, 0, 0,
	966, 967, 968, 969, 0, 0, 0, 1806, 0, 949,
	0, 0, 0, 0, 0, 984, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1001,
	976, 978, 986, 0, 0, 0, 964, 1796, 0, 0,
	0, 0, 0, 0, 2241, 0, 0, 0, 0, 0,
	984, 941, 942, 0, 971, 972, 973, 981, 982, 983,
	1812, 975, 0, 735, 0, 976, 0, 974, 0, 735,
	735, 964, 0, 735, 944, 0, 0, 985, 1811, 0,
	0, 1807, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 975, 0, 943, 1806,
	0, 0, 0, 0, 963, 0, 0, 0, 960, 0,
	965, 2289, 2290, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 979, 0, 0, 0,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2302, 0, 0, 965, 71, 0, 2305, 71,
	0, 0, 0, 0, 0, 966, 967, 968, 969, 573,
	0, 979, 0, 0, 949, 0, 0, 0, 1802, 1803,
	1804, 0, 0, 1807, 0, 0, 0, 1801, 1799, 1800,
	1792, 1793, 1794, 1795, 1797, 1798, 978, 986, 0, 0,
	0, 0, 2337, 0, 977, 0, 0, 955, 956, 962,
	961, 957, 958, 959, 980, 984, 954, 952, 953, 945,
	946, 947, 948, 950, 951, 0, 0, 0, 0, 0,
	976, 0, 0, 1832, 0, 0, 964, 0, 0, 977,
	0, 0, 955, 956, 962, 961, 957, 958, 959, 980,
	0, 954, 952, 953, 945, 946, 947, 948, 950, 951,
	0, 975, 0, 0, 0, 0, 0, 0, 1831, 0,
	1802, 1803, 1804, 0, 2386, 0, 0, 0, 0, 1801,
	1799, 1800, 1792, 1793, 1794, 1795, 1797, 1798, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 0, 0, 585, 0,
	0, 0, 0, 0, 0, 0, 979, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	735, 2454, 2454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2469, 0, 0,
	0, 0, 0, 0, 977, 0, 0, 955, 956, 962,
	961, 957, 958, 959, 980, 2454, 954, 952, 953, 945,
	946, 947, 948, 950, 951, 0, 0, 0, 0, 0,
	0, 0, 0, 1830, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 2454, 0, 0, 0, 0, 0, 735, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 1604, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 1602, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 1643, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	1607, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 735, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 1641, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 71, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 1606, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	1642, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 0, 324, 1116, 0, 71,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 2363, 175, 176, 1121, 177, 1122, 1123, 1124,
	1125, 330, 1126, 1127, 1128, 1129, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 1130, 182, 337, 338,
	183, 184, 1131, 1132, 339, 340, 341, 1133, 185, 342,
	1134, 822, 1135, 186, 187, 188, 0, 189, 1136, 190,
	0, 191, 192, 1137, 685, 193, 194, 195, 1138, 1139,
	1141, 1140, 1142, 1143, 1144, 196, 197, 394, 198, 343,
	199, 344, 345, 1145, 200, 1146, 201, 1147, 202, 1148,
	1149, 203, 204, 1150, 205, 1151, 1001, 1152, 346, 206,
	207, 208, 347, 348, 1153, 686, 1154, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 1155, 212,
	1156, 1157, 687, 1158, 213, 352, 1159, 353, 1160, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 689, 1161,
	356, 221, 1162, 218, 1163, 688, 219, 357, 220, 358,
	359, 360, 361, 362, 1164, 363, 1165, 690, 222, 223,
	224, 691, 225, 226, 227, 1166, 229, 228, 1167, 364,
	692, 230, 693, 1168, 231, 1169, 1170, 232, 0, 233,
	234, 235, 237, 365, 236, 694, 238, 239, 241, 240,
	1171, 1172, 1173, 366, 242, 367, 243, 244, 1174, 245,
	1175, 1176, 246, 1177, 1178, 247, 368, 695, 248, 696,
	369, 249, 250, 251, 252, 253, 1179, 254, 370, 255,
	371, 256, 1180, 257, 258, 259, 260, 261, 372, 262,
	263, 1181, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 1182, 276, 697, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 1183, 288, 374,
	287, 289, 290, 1184, 291, 280, 281, 292, 698, 293,
	375, 376, 294, 1185, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 1186, 302, 1187, 303, 304, 305,
	306, 307, 308, 309, 1188, 379, 380, 381, 1189, 1190,
	310, 311, 382, 383, 1191, 312, 313, 314, 315, 1192,
	1193, 316, 317, 318, 319, 1194, 320, 1195, 384, 321,
	322, 323, 385, 386, 1196, 1197, 324, 1198, 1199, 1200,
	1201, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1116, 0, 0, 0, 0, 0, 1581, 0,
	0, 0, 0, 0, 0, 0, 0, 1582, 175, 176,
	1121, 177, 1122, 1123, 1124, 1125, 330, 1126, 1127, 1128,
	1129, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 1130, 182, 337, 338, 183, 184, 1131, 1132, 339,
	340, 341, 1133, 185, 342, 1134, 822, 1135, 186, 187,
	188, 0, 189, 1136, 190, 0, 191, 192, 1137, 685,
	193, 194, 195, 1138, 1139, 1141, 1140, 1142, 1143, 1144,
	196, 197, 394, 198, 343, 199, 344, 345, 1145, 200,
	1146, 201, 1147, 202, 1148, 1149, 203, 204, 1150, 205,
	1151, 0, 1152, 346, 206, 207, 208, 347, 348, 1153,
	686, 1154, 0, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 1155, 212, 1156, 1157, 687, 1158, 213,
	352, 1159, 353, 1160, 0, 214, 215, 0, 0, 216,
	217, 354, 355, 689, 1161, 356, 221, 1162, 218, 1163,
	688, 219, 357, 220, 358, 359, 360, 361, 362, 1164,
	363, 1165, 690, 222, 223, 224, 691, 225, 226, 227,
	1166, 229, 228, 1167, 364, 692, 230, 693, 1168, 231,
	1169, 1170, 232, 0, 233, 234, 235, 237, 365, 236,
	694, 238, 239, 241, 240, 1171, 1172, 1173, 366, 242,
	367, 243, 244, 1174, 245, 1175, 1176, 246, 1177, 1178,
	247, 368, 695, 248, 696, 369, 249, 250, 251, 252,
	253, 1179, 254, 370, 255, 371, 256, 1180, 257, 258,
	259, 260, 261, 372, 262, 263, 1181, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	1182, 276, 697, 277, 278, 373, 279, 0, 283, 284,
	285, 286, 1183, 288, 374, 287, 289, 290, 1184, 291,
	280, 281, 292, 698, 293, 375, 376, 294, 1185, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 1186,
	302, 1187, 303, 304, 305, 306, 307, 308, 309, 1188,
	379, 380, 381, 1189, 1190, 310, 311, 382, 383, 1191,
	312, 313, 314, 315, 1192, 1193, 316, 317, 318, 319,
	1194, 320, 1195, 384, 321, 322, 323, 385, 386, 1196,
	1197, 324, 1198, 1199, 1200, 1201, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 1116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2213, 175, 176, 1121, 177, 1122, 1123,
	1124, 1125, 330, 1126, 1127, 1128, 1129, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 1130, 182, 337,
	338, 183, 184, 1131, 1132, 339, 340, 341, 1133, 185,
	342, 1134, 822, 1135, 186, 187, 188, 0, 189, 1136,
	190, 0, 191, 192, 1137, 685, 193, 194, 195, 1138,
	1139, 1141, 1140, 1142, 1143, 1144, 196, 197, 394, 198,
	343, 199, 344, 345, 1145, 200, 1146, 201, 1147, 202,
	1148, 1149, 203, 204, 1150, 205, 1151, 0, 1152, 346,
	206, 207, 208, 347, 348, 1153, 686, 1154, 0, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 1155,
	212, 1156, 1157, 687, 1158, 213, 352, 1159, 353, 1160,
	0, 214, 215, 0, 0, 216, 217, 354, 355, 689,
	1161, 356, 221, 1162, 218, 1163, 688, 219, 357, 220,
	358, 359, 360, 361, 362, 1164, 363, 1165, 690, 222,
	223, 224, 691, 225, 226, 227, 1166, 229, 228, 1167,
	364, 692, 230, 693, 1168, 231, 1169, 1170, 232, 0,
	233, 234, 235, 237, 365, 236, 694, 238, 239, 241,
	240, 1171, 1172, 1173, 366, 242, 367, 243, 244, 1174,
	245, 1175, 1176, 246, 1177, 1178, 247, 368, 695, 248,
	696, 369, 249, 250, 251, 252, 253, 1179, 254, 370,
	255, 371, 256, 1180, 257, 258, 259, 260, 261, 372,
	262, 263, 1181, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 1182, 276, 697, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 1183, 288,
	374, 287, 289, 290, 1184, 291, 280, 281, 292, 698,
	293, 375, 376, 294, 1185, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 1186, 302, 1187, 303, 304,
	305, 306, 307, 308, 309, 1188, 379, 380, 381, 1189,
	1190, 310, 311, 382, 383, 1191, 312, 313, 314, 315,
	1192, 1193, 316, 317, 318, 319, 1194, 320, 1195, 384,
	321, 322, 323, 385, 386, 1196, 1197, 324, 1198, 1199,
	1200, 1201, 325, 326, 327, 328, 329, 0, 0, 1116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1115, 175, 176, 1121, 177, 1122,
	1123, 1124, 1125, 330, 1126, 1127, 1128, 1129, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 1130, 182,
	337, 338, 183, 184, 1131, 1132, 339, 340, 341, 1133,
	185, 342, 1134, 822, 1135, 186, 187, 188, 0, 189,
	1136, 190, 0, 191, 192, 1137, 685, 193, 194, 195,
	1138, 1139, 1141, 1140, 1142, 1143, 1144, 196, 197, 394,
	198, 343, 199, 344, 345, 1145, 200, 1146, 201, 1147,
	202, 1148, 1149, 203, 204, 1150, 205, 1151, 0, 1152,
	346, 206, 207, 208, 347, 348, 1153, 686, 1154, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	1155, 212, 1156, 1157, 687, 1158, 213, 352, 1159, 353,
	1160, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	689, 1161, 356, 221, 1162, 218, 1163, 688, 219, 357,
	220, 358, 359, 360, 361, 362, 1164, 363, 1165, 690,
	222, 223, 224, 691, 225, 226, 227, 1166, 229, 228,
	1167, 364, 692, 230, 693, 1168, 231, 1169, 1170, 232,
	0, 233, 234, 235, 237, 365, 236, 694, 238, 239,
	241, 240, 1171, 1172, 1173, 366, 242, 367, 243, 244,
	1174, 245, 1175, 1176, 246, 1177, 1178, 247, 368, 695,
	248, 696, 369, 249, 250, 251, 252, 253, 1179, 254,
	370, 255, 371, 256, 1180, 257, 258, 259, 260, 261,
	372, 262, 263, 1181, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 1182, 276, 697,
	277, 278, 373, 279, 0, 283, 284, 285, 286, 1183,
	288, 374, 287, 289, 290, 1184, 291, 280, 281, 292,
	698, 293, 375, 376, 294, 1185, 301, 295, 296, 282,
	297, 300, 377, 298, 299, 378, 1186, 302, 1187, 303,
	304, 305, 306, 307, 308, 309, 1188, 379, 380, 381,
	1189, 1190, 310, 311, 382, 383, 1191, 312, 313, 314,
	315, 1192, 1193, 316, 317, 318, 319, 1194, 320, 1195,
	384, 321, 322, 323, 385, 386, 1196, 1197, 324, 1198,
	1199, 1200, 1201, 325, 326, 327, 328, 329, 1480, 0,
	623, 612, 613, 610, 611, 602, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 1477, 177,
	0, 0, 0, 0, 640, 605, 0, 0, 0, 178,
	179, 180, 331, 655, 333, 656, 181, 657, 658, 0,
	182, 337, 338, 183, 184, 608, 639, 659, 660, 341,
	0, 185, 651, 0, 631, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 199, 662, 663, 0, 200, 0, 201,
	0, 202, 1478, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 686, 0,
	0, 0, 0, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 687, 0, 213, 652, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 648,
	650, 689, 0, 356, 221, 0, 218, 0, 688, 219,
	667, 220, 668, 669, 670, 671, 672, 0, 630, 0,
	690, 222, 223, 224, 691, 225, 226, 227, 0, 229,
	228, 0, 653, 692, 230, 693, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 694, 238,
	239, 241, 240, 591, 0, 620, 649, 242, 673, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	695, 248, 696, 643, 249, 250, 251, 252, 253, 0,
	254, 644, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 674, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	697, 277, 278, 597, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 637, 291, 280, 281,
	292, 698, 293, 675, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 676, 298, 299, 645, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 677,
	678, 0, 0, 310, 311, 646, 647, 618, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 638, 320,
	0, 384, 321, 322, 323, 385, 679, 1476, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 592,
	0, 623, 612, 613, 610, 611, 602, 0, 0, 590,
	0, 0, 0, 0, 588, 589, 1479, 175, 176, 0,
	177, 0, 0, 598, 1474, 640, 605, 0, 0, 601,
	178, 179, 180, 331, 655, 333, 656, 181, 657, 658,
	0, 182, 337, 338, 183, 184, 608, 639, 659, 660,
	341, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 685, 193,
	194, 195, 0, 632, 633, 635, 0, 634, 636, 196,
	197, 394, 198, 661, 199, 662, 663, 586, 200, 0,
	201, 0, 202, 0, 0, 654, 204, 0, 205, 0,
	0, 0, 596, 206, 207, 208, 641, 642, 619, 686,
	0, 0, 0, 0, 0, 209, 210, 664, 665, 666,
	0, 211, 0, 212, 0, 0, 687, 0, 213, 652,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	648, 650, 689, 0, 356, 221, 0, 218, 0, 688,
	219, 667, 220, 668, 669, 670, 671, 672, 0, 630,
	0, 690, 222, 223, 224, 691, 225, 226, 227, 0,
	229, 228, 0, 653, 692, 230, 693, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 694,
	238, 239, 241, 240, 591, 0, 620, 649, 242, 673,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 695, 248, 696, 643, 249, 250, 251, 252, 253,
	0, 254, 644, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 674, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 597, 279, 0, 283, 284, 285,
	286, 132, 288, 374, 287, 289, 290, 637, 291, 280,
	281, 292, 698, 293, 675, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 676, 298, 299, 645, 0, 302,
	134, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	677, 678, 0, 0, 310, 311, 646, 647, 618, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 638,
	320, 0, 384, 321, 322, 323, 821, 679, 0, 0,
	324, 0, 0, 0, 126, 325, 326, 327, 328, 329,
	592, 127, 574, 0, 623, 612, 613, 610, 611, 602,
	590, 0, 0, 0, 0, 588, 589, 0, 0, 0,
	175, 176, 0, 177, 1004, 0, 0, 0, 640, 605,
	601, 0, 0, 178, 179, 180, 331, 655, 333, 656,
	181, 657, 658, 0, 182, 337, 338, 183, 184, 608,
	639, 659, 660, 341, 0, 185, 651, 0, 631, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 686, 0, 0, 0, 0, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 687,
	0, 213, 652, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 648, 650, 689, 0, 356, 221, 0,
	218, 0, 688, 219, 667, 220, 668, 669, 670, 671,
	672, 0, 630, 0, 690, 222, 223, 224, 691, 225,
	226, 227, 0, 229, 228, 0, 653, 692, 230, 693,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 694, 238, 239, 241, 240, 591, 0, 620,
	649, 242, 673, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 695, 248, 696, 643, 249, 250,
	251, 252, 253, 0, 254, 644, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 674, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 597, 279, 0,
	283, 284, 285, 286, 132, 288, 374, 287, 289, 290,
	637, 291, 280, 281, 292, 698, 293, 675, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 676, 298, 299,
	645, 0, 302, 134, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 677, 678, 0, 0, 310, 311, 646,
	647, 618, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 638, 320, 0, 384, 321, 322, 323, 821,
	679, 0, 0, 324, 0, 0, 0, 126, 325, 326,
	327, 328, 329, 592, 127, 623, 612, 613, 610, 611,
	602, 0, 0, 590, 0, 0, 0, 0, 588, 589,
	0, 175, 176, 0, 177, 0, 0, 1004, 0, 640,
	605, 0, 0, 601, 178, 179, 180, 331, 655, 333,
	656, 181, 657, 658, 0, 182, 337, 338, 183, 184,
	608, 639, 659, 660, 341, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 685, 193, 194, 195, 0, 632, 633, 635,
	0, 634, 636, 196, 197, 394, 198, 661, 199, 662,
	663, 0, 200, 0, 201, 0, 202, 0, 0, 654,
	204, 0, 205, 0, 0, 0, 596, 206, 207, 208,
	641, 642, 619, 686, 0, 0, 0, 0, 0, 209,
	210, 664, 665, 666, 0, 211, 0, 212, 0, 0,
	687, 0, 213, 652, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 648, 650, 689, 0, 356, 221,
	0, 218, 0, 688, 219, 667, 220, 668, 669, 670,
	671, 672, 0, 630, 0, 690, 222, 223, 224, 691,
	225, 226, 227, 0, 229, 228, 0, 653, 692, 230,
	693, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 694, 238, 239, 241, 240, 591, 0,
	620, 649, 242, 673, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 695, 248, 696, 643, 249,
	250, 251, 252, 253, 0, 254, 644, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 674, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 697, 277, 278, 597, 279,
	0, 283, 284, 285, 286, 132, 288, 374, 287, 289,
	290, 637, 291, 280, 281, 292, 698, 293, 675, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 676, 298,
	299, 645, 0, 302, 134, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 677, 678, 0, 0, 310, 311,
	646, 647, 618, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 638, 320, 0, 384, 321, 322, 323,
	821, 679, 0, 0, 324, 0, 0, 0, 126, 325,
	326, 327, 328, 329, 592, 127, 623, 612, 613, 610,
	611, 602, 0, 0, 590, 0, 0, 0, 0, 588,
	589, 0, 175, 176, 0, 177, 0, 0, 1004, 0,
	640, 605, 0, 0, 601, 178, 179, 180, 331, 655,
	333, 656, 181, 657, 658, 1534, 182, 337, 338, 183,
	184, 608, 639, 659, 660, 341, 0, 185, 651, 0,
	631, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 685, 193, 194, 195, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 0, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 686, 0, 0, 0, 0, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	1539, 687, 0, 213, 652, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 648, 650, 689, 0, 356,
	221, 0, 218, 0, 688, 219, 667, 220, 668, 669,
	670, 671, 672, 0, 630, 0, 690, 222, 223, 224,
	691, 225, 226, 227, 0, 229, 228, 1535, 653, 692,
	230, 693, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 694, 238, 239, 241, 240, 591,
	0, 620, 649, 242, 673, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 695, 248, 696, 643,
	249, 250, 251, 252, 253, 0, 254, 644, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 674, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 697, 277, 278, 597,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 637, 291, 280, 281, 292, 698, 293, 675,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 676,
	298, 299, 645, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 677, 678, 0, 1536, 310,
	311, 646, 647, 618, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 638, 320, 0, 384, 321, 322,
	323, 385, 679, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 592, 582, 0, 623, 612,
	613, 610, 611, 602, 0, 590, 0, 0, 0, 0,
	588, 589, 0, 0, 175, 176, 0, 177, 0, 598,
	0, 0, 640, 605, 0, 601, 0, 178, 179, 180,
	331, 655, 333, 656, 181, 657, 658, 0, 182, 337,
	338, 183, 184, 608, 639, 659, 660, 341, 0, 185,
	651, 0, 631, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 685, 193, 194, 195, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 199, 662, 663, 586, 200, 0, 201, 0, 202,
	0, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 686, 0, 0, 0,
	0, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 652, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 648, 650, 689,
	0, 356, 221, 0, 218, 0, 688, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 0,
	653, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 694, 238, 239, 241,
	240, 591, 0, 620, 649, 242, 673, 243, 244, 0,
	245, 584, 0, 246, 0, 0, 247, 368, 695, 248,
	696, 643, 249, 250, 251, 252, 253, 0, 254, 644,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 674,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 697, 277,
	278, 597, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 637, 291, 280, 281, 292, 698,
	293, 675, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 676, 298, 299, 645, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 677, 678, 0,
	0, 310, 311, 646, 647, 618, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 638, 320, 0, 384,
	321, 322, 323, 385, 679, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 592, 0, 623,
	612, 613, 610, 611, 602, 0, 0, 590, 0, 0,
	0, 0, 588, 589, 0, 175, 176, 0, 177, 0,
	0, 598, 0, 640, 605, 0, 0, 601, 178, 179,
	180, 331, 655, 333, 656, 181, 657, 658, 0, 182,
	337, 338, 183, 184, 608, 639, 659, 660, 341, 0,
	185, 651, 0, 631, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 685, 193, 194, 195,
	0, 632, 633, 635, 0, 634, 636, 196, 197, 394,
	198, 661, 199, 662, 663, 0, 200, 0, 201, 0,
	202, 0, 0, 654, 204, 0, 205, 0, 0, 0,
	596, 206, 207, 208, 641, 642, 619, 686, 0, 0,
	0, 0, 0, 209, 210, 664, 665, 666, 0, 211,
	0, 212, 0, 0, 687, 0, 213, 652, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 648, 650,
	689, 0, 356, 221, 0, 218, 0, 688, 219, 667,
	220, 668, 669, 670, 671, 672, 0, 630, 0, 690,
	222, 223, 224, 691, 225, 226, 227, 0, 229, 228,
	0, 653, 692, 230, 693, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 694, 238, 239,
	241, 240, 591, 2143, 620, 649, 242, 673, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 695,
	248, 696, 643, 249, 250, 251, 252, 253, 0, 254,
	644, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	674, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 697,
	277, 278, 597, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 637, 291, 280, 281, 292,
	698, 293, 675, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 676, 298, 299, 645, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 677, 678,
	0, 0, 310, 311, 646, 647, 618, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 638, 320, 0,
	384, 321, 322, 323, 385, 679, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 592, 0,
	623, 612, 613, 610, 611, 602, 0, 0, 590, 0,
	0, 0, 0, 588, 589, 1065, 175, 176, 0, 177,
	0, 0, 598, 0, 640, 605, 0, 0, 601, 178,
	179, 180, 331, 655, 333, 656, 181, 657, 658, 0,
	182, 337, 338, 183, 184, 608, 639, 659, 660, 341,
	0, 185, 651, 0, 631, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 199, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 686, 0,
	0, 0, 0, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 687, 0, 213, 652, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 648,
	650, 689, 0, 356, 221, 1383, 218, 0, 688, 219,
	667, 220, 668, 669, 670, 671, 672, 0, 630, 0,
	690, 222, 223, 224, 691, 225, 226, 227, 0, 229,
	228, 0, 653, 692, 230, 693, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 694, 238,
	239, 241, 240, 591, 0, 620, 649, 242, 673, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	695, 248, 696, 643, 249, 250, 251, 252, 253, 0,
	254, 644, 255, 371, 256, 1382, 257, 258, 259, 260,
	261, 674, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	697, 277, 278, 597, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 637, 291, 280, 281,
	292, 698, 293, 675, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 676, 298, 299, 645, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 677,
	678, 0, 0, 310, 311, 646, 647, 618, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 638, 320,
	0, 384, 321, 322, 323, 385, 679, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 592,
	0, 623, 612, 613, 610, 611, 602, 0, 0, 590,
	0, 0, 0, 0, 588, 589, 0, 175, 176, 0,
	177, 0, 0, 598, 0, 640, 605, 0, 0, 601,
	178, 179, 180, 331, 655, 333, 656, 181, 657, 658,
	0, 182, 337, 338, 183, 184, 608, 639, 659, 660,
	341, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 685, 193,
	194, 195, 0, 632, 633, 635, 0, 634, 636, 196,
	197, 394, 198, 661, 199, 662, 663, 586, 200, 0,
	201, 0, 202, 0, 0, 654, 204, 0, 205, 0,
	0, 0, 596, 206, 207, 208, 641, 642, 619, 686,
	0, 0, 0, 0, 0, 209, 210, 664, 665, 666,
	0, 211, 0, 212, 0, 0, 687, 0, 213, 652,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	648, 650, 689, 0, 356, 221, 0, 218, 0, 688,
	219, 667, 220, 668, 669, 670, 671, 672, 0, 630,
	0, 690, 222, 223, 224, 691, 225, 226, 227, 0,
	229, 228, 0, 653, 692, 230, 693, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 694,
	238, 239, 241, 240, 591, 0, 620, 649, 242, 673,
	243, 244, 0, 245, 584, 0, 246, 0, 0, 247,
	368, 695, 248, 696, 643, 249, 250, 251, 252, 253,
	0, 254, 644, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 674, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 597, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 637, 291, 280,
	281, 292, 698, 293, 675, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 676, 298, 299, 645, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	677, 678, 0, 0, 310, 311, 646, 647, 618, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 638,
	320, 0, 384, 321, 322, 323, 385, 679, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	592, 0, 623, 612, 613, 610, 611, 602, 0, 0,
	590, 0, 0, 0, 0, 588, 589, 0, 175, 176,
	0, 177, 0, 0, 598, 0, 640, 605, 0, 0,
	601, 178, 179, 180, 331, 655, 333, 656, 181, 657,
	658, 0, 182, 337, 338, 183, 184, 608, 639, 659,
	660, 341, 0, 185, 651, 0, 631, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 199, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	686, 0, 0, 0, 0, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 0, 687, 0, 213,
	652, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 648, 650, 689, 0, 356, 221, 0, 218, 0,
	688, 219, 667, 220, 668, 669, 670, 671, 672, 0,
	630, 0, 690, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 653, 692, 230, 693, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	694, 238, 239, 241, 240, 591, 0, 620, 649, 242,
	673, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 695, 248, 696, 643, 249, 250, 251, 252,
	253, 0, 254, 644, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 674, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 697, 277, 278, 597, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 637, 291,
	280, 281, 292, 698, 293, 675, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 676, 298, 299, 645, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 677, 678, 0, 0, 310, 311, 646, 647, 618,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	638, 320, 0, 384, 321, 322, 323, 385, 679, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 592, 0, 623, 612, 613, 610, 611, 602, 0,
	0, 590, 0, 0, 0, 0, 588, 589, 0, 175,
	176, 0, 177, 1008, 1469, 598, 0, 640, 605, 0,
	0, 601, 178, 179, 180, 331, 655, 333, 656, 181,
	657, 658, 0, 182, 337, 338, 183, 184, 608, 639,
	659, 660, 341, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	685, 193, 194, 195, 0, 632, 633, 635, 0, 634,
	636, 196, 197, 394, 198, 661, 199, 662, 663, 586,
	200, 0, 201, 0, 202, 0, 0, 654, 204, 0,
	205, 0, 0, 0, 596, 206, 207, 208, 641, 642,
	619, 686, 0, 0, 0, 0, 0, 209, 210, 664,
	665, 666, 0, 211, 0, 212, 0, 0, 687, 0,
	213, 652, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 648, 650, 689, 0, 356, 221, 0, 218,
	0, 688, 219, 667, 220, 668, 669, 670, 671, 672,
	0, 630, 0, 690, 222, 223, 224, 691, 225, 226,
	227, 0, 229, 228, 0, 653, 692, 230, 693, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 694, 238, 239, 241, 240, 591, 0, 620, 649,
	242, 673, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 695, 248, 696, 643, 249, 250, 251,
	252, 253, 0, 254, 644, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 674, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 697, 277, 278, 597, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 637,
	291, 280, 281, 292, 698, 293, 675, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 676, 298, 299, 645,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 677, 678, 0, 0, 310, 311, 646, 647,
	618, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 638, 320, 0, 384, 321, 322, 323, 385, 679,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 592, 0, 623, 612, 613, 610, 611, 602,
	0, 0, 590, 0, 0, 0, 0, 588, 589, 0,
	175, 176, 0, 177, 0, 0, 598, 0, 640, 605,
	0, 0, 601, 178, 179, 180, 331, 655, 333, 656,
	181, 657, 658, 0, 182, 337, 338, 183, 184, 608,
	639, 659, 660, 341, 0, 185, 651, 0, 631, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 686, 0, 0, 0, 0, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 687,
	0, 213, 652, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 648, 650, 689, 0, 356, 221, 0,
	218, 0, 688, 219, 667, 220, 668, 669, 670, 671,
	672, 0, 630, 0, 690, 222, 223, 224, 691, 225,
	226, 227, 0, 229, 228, 0, 653, 692, 230, 693,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 694, 238, 239, 241, 240, 591, 0, 620,
	649, 242, 673, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 695, 248, 696, 643, 249, 250,
	251, 252, 253, 0, 254, 644, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 674, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 597, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	637, 291, 280, 281, 292, 698, 293, 675, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 676, 298, 299,
	645, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 677, 678, 0, 0, 310, 311, 646,
	647, 618, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 638, 320, 0, 384, 321, 322, 323, 385,
	679, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 592, 0, 623, 612, 613, 610, 611,
	602, 0, 0, 590, 0, 0, 0, 0, 588, 589,
	0, 175, 176, 0, 177, 0, 0, 598, 2051, 640,
	605, 0, 0, 601, 178, 179, 180, 331, 655, 333,
	656, 181, 657, 658, 0, 182, 337, 338, 183, 184,
	608, 639, 659, 660, 341, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 685, 193, 194, 195, 0, 632, 633, 635,
	0, 634, 636, 196, 197, 394, 198, 661, 199, 662,
	663, 0, 200, 0, 201, 0, 202, 0, 0, 654,
	204, 0, 205, 0, 0, 0, 596, 206, 207, 208,
	641, 642, 619, 686, 0, 0, 0, 0, 0, 209,
	210, 664, 665, 666, 0, 211, 0, 212, 0, 0,
	687, 0, 213, 652, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 648, 650, 689, 0, 356, 221,
	0, 218, 0, 688, 219, 667, 220, 668, 669, 670,
	671, 672, 0, 630, 0, 690, 222, 223, 224, 691,
	225, 226, 227, 0, 229, 228, 0, 653, 692, 230,
	693, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 694, 238, 239, 241, 240, 591, 0,
	620, 649, 242, 673, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 695, 248, 696, 643, 249,
	250, 251, 252, 253, 0, 254, 644, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 674, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 697, 277, 278, 597, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 637, 291, 280, 281, 292, 698, 293, 675, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 676, 298,
	299, 645, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 677, 678, 0, 0, 310, 311,
	646, 647, 618, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 638, 320, 0, 384, 321, 322, 323,
	385, 679, 2000, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 592, 0, 623, 612, 613, 610,
	611, 602, 0, 0, 590, 0, 0, 0, 0, 588,
	589, 0, 175, 176, 0, 177, 0, 0, 598, 0,
	640, 605, 0, 0, 601, 178, 179, 180, 331, 655,
	333, 656, 181, 657, 658, 0, 182, 337, 338, 183,
	184, 608, 639, 659, 660, 341, 0, 185, 651, 0,
	631, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 685, 193, 194, 195, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 0, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 686, 0, 0, 0, 0, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	0, 687, 0, 213, 652, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 648, 650, 689, 0, 356,
	221, 0, 218, 0, 688, 219, 667, 220, 668, 669,
	670, 671, 672, 0, 630, 0, 690, 222, 223, 224,
	691, 225, 226, 227, 0, 229, 228, 0, 653, 692,
	230, 693, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 694, 238, 239, 241, 240, 591,
	0, 620, 649, 242, 673, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 695, 248, 696, 643,
	249, 250, 251, 252, 253, 0, 254, 644, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 674, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 697, 277, 278, 597,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 637, 291, 280, 281, 292, 698, 293, 675,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 676,
	298, 299, 645, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 677, 678, 0, 0, 310,
	311, 646, 647, 618, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 638, 320, 0, 384, 321, 322,
	323, 385, 679, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 592, 0, 623, 612, 613,
	610, 611, 602, 0, 0, 590, 0, 0, 0, 0,
	588, 589, 0, 175, 176, 0, 177, 0, 0, 598,
	1990, 640, 605, 0, 0, 601, 178, 179, 180, 331,
	655, 333, 656, 181, 657, 658, 0, 182, 337, 338,
	183, 184, 608, 639, 659, 660, 341, 0, 185, 651,
	0, 631, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 685, 193, 194, 195, 0, 632,
	633, 635, 0, 634, 636, 196, 197, 394, 198, 661,
	199, 662, 663, 0, 200, 0, 201, 0, 202, 0,
	0, 654, 204, 0, 205, 0, 0, 0, 596, 206,
	207, 208, 641, 642, 619, 686, 0, 0, 0, 0,
	0, 209, 210, 664, 665, 666, 0, 211, 0, 212,
	0, 0, 687, 0, 213, 652, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 648, 650, 689, 0,
	356, 221, 0, 218, 0, 688, 219, 667, 220, 668,
	669, 670, 671, 672, 0, 630, 0, 690, 222, 223,
	224, 691, 225, 226, 227, 0, 229, 228, 0, 653,
	692, 230, 693, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 694, 238, 239, 241, 240,
	591, 0, 620, 649, 242, 673, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 695, 248, 696,
	643, 249, 250, 251, 252, 253, 0, 254, 644, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 674, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 697, 277, 278,
	597, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 637, 291, 280, 281, 292, 698, 293,
	675, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	676, 298, 299, 645, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 677, 678, 0, 0,
	310, 311, 646, 647, 618, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 638, 320, 0, 384, 321,
	322, 323, 385, 679, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 592, 0, 623, 612,
	613, 610, 611, 602, 0, 0, 590, 0, 0, 0,
	0, 588, 589, 1065, 175, 176, 0, 177, 0, 0,
	598, 0, 640, 605, 0, 0, 601, 178, 179, 180,
	331, 655, 333, 656, 181, 657, 658, 0, 182, 337,
	338, 183, 184, 608, 639, 659, 660, 341, 0, 185,
	651, 0, 631, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 685, 193, 194, 195, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 199, 662, 663, 0, 200, 0, 201, 0, 202,
	0, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 686, 0, 0, 0,
	0, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 1539, 687, 0, 213, 652, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 648, 650, 689,
	0, 356, 221, 0, 218, 0, 688, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 0,
	653, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 694, 238, 239, 241,
	240, 591, 0, 620, 649, 242, 673, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 695, 248,
	696, 643, 249, 250, 251, 252, 253, 0, 254, 644,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 674,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 697, 277,
	278, 597, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 637, 291, 280, 281, 292, 698,
	293, 675, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 676, 298, 299, 645, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 677, 678, 0,
	0, 310, 311, 646, 647, 618, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 638, 320, 0, 384,
	321, 322, 323, 385, 679, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 592, 1584, 0,
	623, 612, 613, 610, 611, 602, 0, 590, 0, 0,
	0, 0, 588, 589, 0, 0, 175, 176, 0, 177,
	0, 598, 0, 0, 640, 605, 0, 601, 0, 178,
	179, 180, 331, 655, 333, 656, 181, 657, 658, 0,
	182, 337, 338, 183, 184, 608, 639, 659, 660, 341,
	0, 185, 651, 0, 631, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 199, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 686, 0,
	0, 0, 0, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 687, 0, 213, 652, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 648,
	650, 689, 0, 356, 221, 0, 218, 0, 688, 219,
	667, 220, 668, 669, 670, 671, 672, 0, 630, 0,
	690, 222, 223, 224, 691, 225, 226, 227, 0, 229,
	228, 0, 653, 692, 230, 693, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 694, 238,
	239, 241, 240, 591, 0, 620, 649, 242, 673, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	695, 248, 696, 643, 249, 250, 251, 252, 253, 0,
	254, 644, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 674, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	697, 277, 278, 597, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 637, 291, 280, 281,
	292, 698, 293, 675, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 676, 298, 299, 645, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 677,
	678, 0, 0, 310, 311, 646, 647, 618, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 638, 320,
	0, 384, 321, 322, 323, 385, 679, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 592,
	1548, 0, 623, 612, 613, 610, 611, 602, 0, 590,
	0, 0, 0, 0, 588, 589, 0, 0, 175, 176,
	0, 177, 0, 598, 0, 0, 640, 605, 0, 601,
	0, 178, 179, 180, 331, 655, 333, 656, 181, 657,
	658, 0, 182, 337, 338, 183, 184, 608, 639, 659,
	660, 341, 0, 185, 651, 0, 631, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 199, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	686, 0, 0, 0, 0, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 0, 687, 0, 213,
	652, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 648, 650, 689, 0, 356, 221, 0, 218, 0,
	688, 219, 667, 220, 668, 669, 670, 671, 672, 0,
	630, 0, 690, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 653, 692, 230, 693, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	694, 238, 239, 241, 240, 591, 0, 620, 649, 242,
	673, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 695, 248, 696, 643, 249, 250, 251, 252,
	253, 0, 254, 644, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 674, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 697, 277, 278, 597, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 637, 291,
	280, 281, 292, 698, 293, 675, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 676, 298, 299, 645, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 677, 678, 0, 0, 310, 311, 646, 647, 618,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	638, 320, 0, 384, 321, 322, 323, 385, 679, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 592, 1546, 0, 623, 612, 613, 610, 611, 602,
	0, 590, 0, 0, 0, 0, 588, 589, 0, 0,
	175, 176, 0, 177, 0, 598, 0, 0, 640, 605,
	0, 601, 0, 178, 179, 180, 331, 655, 333, 656,
	181, 657, 658, 0, 182, 337, 338, 183, 184, 608,
	639, 659, 660, 341, 0, 185, 651, 0, 631, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 686, 0, 0, 0, 0, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 687,
	0, 213, 652, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 648, 650, 689, 0, 356, 221, 0,
	218, 0, 688, 219, 667, 220, 668, 669, 670, 671,
	672, 0, 630, 0, 690, 222, 223, 224, 691, 225,
	226, 227, 0, 229, 228, 0, 653, 692, 230, 693,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 694, 238, 239, 241, 240, 591, 0, 620,
	649, 242, 673, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 695, 248, 696, 643, 249, 250,
	251, 252, 253, 0, 254, 644, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 674, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 597, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	637, 291, 280, 281, 292, 698, 293, 675, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 676, 298, 299,
	645, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 677, 678, 0, 0, 310, 311, 646,
	647, 618, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 638, 320, 0, 384, 321, 322, 323, 385,
	679, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 592, 1530, 0, 623, 612, 613, 610,
	611, 602, 0, 590, 0, 0, 0, 0, 588, 589,
	0, 0, 175, 176, 0, 177, 0, 598, 0, 0,
	640, 605, 0, 601, 0, 178, 179, 180, 331, 655,
	333, 656, 181, 657, 658, 0, 182, 337, 338, 183,
	184, 608, 639, 659, 660, 341, 0, 185, 651, 0,
	631, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 685, 193, 194, 195, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 0, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 686, 0, 0, 0, 0, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	0, 687, 0, 213, 652, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 648, 650, 689, 0, 356,
	221, 0, 218, 0, 688, 219, 667, 220, 668, 669,
	670, 671, 672, 0, 630, 0, 690, 222, 223, 224,
	691, 225, 226, 227, 0, 229, 228, 0, 653, 692,
	230, 693, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 694, 238, 239, 241, 240, 591,
	0, 620, 649, 242, 673, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 695, 248, 696, 643,
	249, 250, 251, 252, 253, 0, 254, 644, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 674, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 697, 277, 278, 597,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 637, 291, 280, 281, 292, 698, 293, 675,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 676,
	298, 299, 645, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 677, 678, 0, 0, 310,
	311, 646, 647, 618, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 638, 320, 0, 384, 321, 322,
	323, 385, 679, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 592, 1518, 0, 623, 612,
	613, 610, 611, 602, 0, 590, 0, 0, 0, 0,
	588, 589, 0, 0, 175, 176, 0, 177, 0, 598,
	0, 0, 640, 605, 0, 601, 0, 178, 179, 180,
	331, 655, 333, 656, 181, 657, 658, 0, 182, 337,
	338, 183, 184, 608, 639, 659, 660, 341, 0, 185,
	651, 0, 631, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 685, 193, 194, 195, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 199, 662, 663, 0, 200, 0, 201, 0, 202,
	0, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 686, 0, 0, 0,
	0, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 652, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 648, 650, 689,
	0, 356, 221, 0, 218, 0, 688, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 0,
	653, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 694, 238, 239, 241,
	240, 591, 0, 620, 649, 242, 673, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 695, 248,
	696, 643, 249, 250, 251, 252, 253, 0, 254, 644,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 674,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 697, 277,
	278, 597, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 637, 291, 280, 281, 292, 698,
	293, 675, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 676, 298, 299, 645, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 677, 678, 0,
	0, 310, 311, 646, 647, 618, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 638, 320, 0, 384,
	321, 322, 323, 385, 679, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 592, 1516, 0,
	1508, 612, 613, 610, 611, 602, 0, 590, 0, 0,
	0, 0, 588, 589, 0, 0, 175, 176, 0, 177,
	0, 598, 0, 0, 640, 605, 0, 601, 0, 178,
	179, 180, 331, 655, 333, 656, 181, 657, 658, 0,
	182, 337, 338, 183, 184, 608, 639, 659, 660, 341,
	0, 185, 651, 0, 631, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 1511, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 686, 0,
	0, 0, 0, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 687, 0, 213, 652, 0,
	353, 0, 0, 214, 1512, 0, 0, 216, 217, 648,
	650, 689, 0, 356, 221, 0, 218, 0, 688, 219,
	667, 220, 668, 669, 670, 671, 672, 0, 630, 0,
	690, 222, 223, 224, 691, 225, 226, 227, 0, 229,
	228, 0, 653, 692, 230, 693, 0, 231, 0, 0,
	232, 0, 233, 1513, 1510, 237, 365, 236, 694, 238,
	239, 241, 240, 591, 0, 620, 649, 242, 673, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	695, 248, 696, 643, 249, 250, 251, 252, 253, 0,
	254, 644, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 674, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	697, 277, 278, 597, 279, 0, 283, 284, 285, 1514,
	0, 288, 374, 287, 289, 290, 637, 291, 280, 281,
	292, 698, 293, 675, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 676, 298, 299, 645, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 677,
	678, 0, 0, 310, 311, 646, 647, 618, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 638, 320,
	0, 384, 321, 322, 323, 385, 679, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 1509, 329, 592,
	1505, 0, 1508, 612, 613, 610, 611, 602, 0, 590,
	0, 0, 0, 0, 588, 589, 0, 0, 175, 176,
	0, 177, 0, 598, 0, 0, 640, 605, 0, 601,
	0, 178, 179, 180, 331, 655, 333, 656, 181, 657,
	658, 0, 182, 337, 338, 183, 184, 608, 639, 659,
	660, 341, 0, 185, 651, 0, 631, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 1511, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	686, 0, 0, 0, 0, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 0, 687, 0, 213,
	652, 0, 353, 0, 0, 214, 1512, 0, 0, 216,
	217, 648, 650, 689, 0, 356, 221, 0, 218, 0,
	688, 219, 667, 220, 668, 669, 670, 671, 672, 0,
	630, 0, 690, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 653, 692, 230, 693, 0, 231,
	0, 0, 232, 0, 233, 1513, 1510, 237, 365, 236,
	694, 238, 239, 241, 240, 591, 0, 620, 649, 242,
	673, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 695, 248, 696, 643, 249, 250, 251, 252,
	253, 0, 254, 644, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 674, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 697, 277, 278, 597, 279, 0, 283, 284,
	285, 1514, 0, 288, 374, 287, 289, 290, 637, 291,
	280, 281, 292, 698, 293, 675, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 676, 298, 299, 645, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 677, 678, 0, 0, 310, 311, 646, 647, 618,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	638, 320, 0, 384, 321, 322, 323, 385, 679, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 1509,
	329, 592, 0, 623, 612, 613, 610, 611, 602, 0,
	0, 590, 0, 0, 0, 0, 588, 589, 0, 175,
	176, 0, 177, 0, 0, 598, 0, 640, 605, 0,
	0, 601, 178, 179, 180, 331, 655, 333, 656, 181,
	657, 658, 0, 182, 337, 338, 183, 184, 608, 639,
	659, 660, 341, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	685, 193, 194, 195, 0, 632, 633, 635, 0, 634,
	636, 196, 197, 394, 198, 661, 199, 662, 663, 0,
	200, 0, 201, 0, 202, 0, 0, 654, 204, 0,
	205, 0, 0, 0, 596, 206, 207, 208, 641, 642,
	619, 686, 0, 0, 0, 0, 0, 209, 210, 664,
	665, 666, 0, 211, 0, 212, 0, 0, 687, 0,
	213, 652, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 648, 650, 689, 0, 356, 221, 0, 218,
	0, 688, 219, 667, 220, 668, 669, 670, 671, 672,
	0, 630, 0, 690, 222, 223, 224, 691, 225, 226,
	227, 0, 229, 228, 0, 653, 692, 230, 693, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 694, 238, 239, 241, 240, 591, 0, 620, 649,
	242, 673, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 695, 248, 696, 643, 249, 250, 251,
	252, 253, 0, 254, 644, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 674, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 697, 277, 278, 597, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 637,
	291, 280, 281, 292, 698, 293, 675, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 676, 298, 299, 645,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 677, 678, 0, 0, 310, 311, 646, 647,
	618, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 638, 320, 0, 384, 321, 322, 323, 385, 679,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 592, 0, 623, 612, 613, 610, 611, 602,
	0, 0, 590, 0, 0, 0, 0, 588, 589, 0,
	175, 176, 1370, 177, 0, 0, 598, 1464, 640, 605,
	0, 0, 601, 178, 179, 180, 331, 655, 333, 656,
	181, 657, 658, 0, 182, 337, 338, 183, 184, 608,
	639, 659, 660, 341, 0, 185, 651, 0, 631, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 685, 193, 194, 195, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 686, 0, 0, 0, 0, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 687,
	0, 213, 652, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 648, 650, 689, 0, 356, 221, 0,
	218, 0, 688, 219, 667, 220, 668, 669, 670, 671,
	672, 0, 630, 0, 690, 222, 223, 224, 691, 225,
	226, 227, 0, 229, 228, 0, 653, 692, 230, 693,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 694, 238, 239, 241, 240, 591, 0, 620,
	649, 242, 673, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 695, 248, 696, 643, 249, 250,
	251, 252, 253, 0, 254, 644, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 674, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 597, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	637, 291, 280, 281, 292, 698, 293, 675, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 676, 298, 299,
	645, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 677, 678, 0, 0, 310, 311, 646,
	647, 618, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 638, 320, 0, 384, 321, 322, 323, 385,
	679, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 592, 765, 0, 623, 612, 613, 610,
	611, 602, 0, 590, 0, 0, 0, 0, 588, 589,
	0, 0, 175, 176, 0, 177, 0, 598, 0, 0,
	640, 605, 0, 601, 0, 178, 179, 180, 331, 655,
	333, 656, 181, 657, 658, 0, 182, 337, 338, 183,
	184, 608, 639, 659, 660, 341, 0, 185, 651, 0,
	631, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 685, 193, 194, 195, 0, 632, 633,
	635, 0, 634, 636, 196, 197, 394, 198, 661, 199,
	662, 663, 0, 200, 0, 201, 0, 202, 0, 0,
	654, 204, 0, 205, 0, 0, 0, 596, 206, 207,
	208, 641, 642, 619, 686, 0, 0, 0, 0, 0,
	209, 210, 664, 665, 666, 0, 211, 0, 212, 0,
	0, 687, 0, 213, 652, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 648, 650, 689, 0, 356,
	221, 0, 218, 0, 688, 219, 667, 220, 668, 669,
	670, 671, 672, 0, 630, 0, 690, 222, 223, 224,
	691, 225, 226, 227, 0, 229, 228, 0, 653, 692,
	230, 693, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 694, 238, 239, 241, 240, 591,
	0, 620, 649, 242, 673, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 695, 248, 696, 643,
	249, 250, 251, 252, 253, 0, 254, 644, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 674, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 697, 277, 278, 597,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 637, 291, 280, 281, 292, 698, 293, 675,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 676,
	298, 299, 645, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 677, 678, 0, 0, 310,
	311, 646, 647, 618, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 638, 320, 0, 384, 321, 322,
	323, 385, 679, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 592, 763, 0, 623, 612,
	613, 610, 611, 602, 0, 590, 0, 0, 0, 0,
	588, 589, 0, 0, 175, 176, 0, 177, 0, 598,
	0, 0, 640, 605, 0, 601, 0, 178, 179, 180,
	331, 655, 333, 656, 181, 657, 658, 0, 182, 337,
	338, 183, 184, 608, 639, 659, 660, 341, 0, 185,
	651, 0, 631, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 685, 193, 194, 195, 0,
	632, 633, 635, 0, 634, 636, 196, 197, 394, 198,
	661, 199, 662, 663, 0, 200, 0, 201, 0, 202,
	0, 0, 654, 204, 0, 205, 0, 0, 0, 596,
	206, 207, 208, 641, 642, 619, 686, 0, 0, 0,
	0, 0, 209, 210, 664, 665, 666, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 652, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 648, 650, 689,
	0, 356, 221, 0, 218, 0, 688, 219, 667, 220,
	668, 669, 670, 671, 672, 0, 630, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 0,
	653, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 694, 238, 239, 241,
	240, 591, 0, 620, 649, 242, 673, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 695, 248,
	696, 643, 249, 250, 251, 252, 253, 0, 254, 644,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 674,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 697, 277,
	278, 597, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 637, 291, 280, 281, 292, 698,
	293, 675, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 676, 298, 299, 645, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 677, 678, 0,
	0, 310, 311, 646, 647, 618, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 638, 320, 0, 384,
	321, 322, 323, 385, 679, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 592, 0, 623,
	612, 613, 610, 611, 602, 0, 0, 590, 0, 0,
	0, 0, 588, 589, 0, 175, 176, 0, 177, 0,
	0, 598, 0, 640, 605, 0, 0, 601, 178, 179,
	180, 331, 655, 333, 656, 181, 657, 658, 0, 182,
	337, 338, 183, 184, 608, 639, 659, 660, 341, 0,
	185, 651, 0, 631, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 685, 193, 194, 2453,
	0, 632, 633, 635, 0, 634, 636, 196, 197, 394,
	198, 661, 199, 662, 663, 0, 200, 0, 201, 0,
	202, 0, 0, 654, 204, 0, 205, 0, 0, 0,
	596, 206, 207, 208, 641, 642, 619, 686, 0, 0,
	0, 0, 0, 209, 210, 664, 665, 666, 0, 211,
	0, 212, 0, 0, 687, 0, 213, 652, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 648, 650,
	689, 0, 356, 221, 0, 218, 0, 688, 219, 667,
	220, 668, 669, 670, 671, 672, 0, 630, 0, 690,
	222, 223, 224, 691, 225, 226, 227, 0, 229, 228,
	0, 653, 692, 230, 693, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 694, 238, 239,
	241, 240, 591, 0, 620, 649, 242, 673, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 695,
	248, 696, 643, 249, 250, 251, 252, 253, 0, 254,
	644, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	674, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 697,
	277, 278, 597, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 637, 291, 280, 281, 292,
	698, 293, 675, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 676, 298, 299, 645, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 677, 678,
	0, 0, 310, 311, 646, 647, 618, 312, 313, 2452,
	315, 0, 0, 316, 317, 318, 319, 638, 320, 0,
	384, 321, 322, 323, 385, 679, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 592, 0,
	623, 612, 613, 610, 611, 602, 0, 0, 590, 0,
	0, 0, 0, 588, 589, 0, 175, 176, 0, 177,
	0, 0, 598, 0, 640, 605, 0, 0, 601, 178,
	179, 180, 331, 655, 333, 656, 181, 657, 658, 0,
	182, 337, 338, 183, 184, 608, 639, 659, 660, 341,
	0, 185, 651, 0, 631, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 685, 193, 194,
	195, 0, 632, 633, 635, 0, 634, 636, 196, 197,
	394, 198, 661, 199, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 596, 206, 207, 208, 641, 642, 619, 686, 0,
	0, 0, 0, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 687, 0, 213, 652, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 648,
	650, 689, 0, 356, 221, 0, 218, 0, 688, 219,
	667, 220, 668, 669, 670, 671, 672, 0, 630, 0,
	690, 222, 223, 224, 691, 225, 226, 227, 0, 229,
	228, 0, 653, 692, 230, 693, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 694, 238,
	239, 241, 240, 591, 0, 620, 649, 242, 673, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	695, 248, 696, 643, 249, 250, 251, 252, 253, 0,
	254, 644, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 674, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	697, 277, 278, 597, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 637, 291, 280, 281,
	292, 698, 293, 675, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 676, 298, 299, 645, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 677,
	678, 0, 0, 310, 311, 646, 647, 618, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 638, 320,
	0, 384, 321, 322, 323, 385, 679, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 592,
	0, 623, 612, 613, 610, 611, 602, 0, 0, 590,
	0, 0, 0, 0, 588, 589, 0, 175, 176, 0,
	177, 0, 0, 598, 0, 640, 605, 0, 0, 601,
	178, 179, 180, 2451, 655, 333, 656, 181, 657, 658,
	0, 182, 337, 338, 183, 184, 608, 639, 659, 660,
	341, 0, 185, 651, 0, 631, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 685, 193,
	194, 2453, 0, 632, 633, 635, 0, 634, 636, 196,
	197, 394, 198, 661, 199, 662, 663, 0, 200, 0,
	201, 0, 202, 0, 0, 654, 204, 0, 205, 0,
	0, 0, 596, 206, 207, 208, 641, 642, 619, 686,
	0, 0, 0, 0, 0, 209, 210, 664, 665, 666,
	0, 211, 0, 212, 0, 0, 687, 0, 213, 652,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	648, 650, 689, 0, 356, 221, 0, 218, 0, 688,
	219, 667, 220, 668, 669, 670, 671, 672, 0, 630,
	0, 690, 222, 223, 224, 691, 225, 226, 227, 0,
	229, 228, 0, 653, 692, 230, 693, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 694,
	238, 239, 241, 240, 591, 0, 620, 649, 242, 673,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 695, 248, 696, 643, 249, 250, 251, 252, 253,
	0, 254, 644, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 674, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 597, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 637, 291, 280,
	281, 292, 698, 293, 675, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 676, 298, 299, 645, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	677, 678, 0, 0, 310, 311, 646, 647, 618, 312,
	313, 2452, 315, 0, 0, 316, 317, 318, 319, 638,
	320, 0, 384, 321, 322, 323, 385, 679, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	592, 0, 623, 612, 613, 610, 611, 602, 0, 0,
	590, 0, 0, 0, 0, 588, 589, 0, 175, 176,
	0, 177, 0, 0, 598, 0, 640, 605, 0, 0,
	601, 178, 179, 180, 331, 655, 333, 656, 181, 657,
	658, 0, 182, 337, 338, 183, 184, 608, 639, 659,
	660, 341, 0, 185, 651, 0, 631, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 685,
	193, 194, 195, 0, 632, 633, 635, 0, 634, 636,
	196, 197, 394, 198, 661, 199, 662, 663, 0, 200,
	0, 201, 0, 202, 0, 0, 654, 204, 0, 205,
	0, 0, 0, 596, 206, 207, 208, 641, 642, 619,
	686, 0, 0, 0, 0, 0, 209, 210, 664, 665,
	666, 0, 211, 0, 212, 0, 0, 687, 0, 213,
	652, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 648, 650, 689, 0, 356, 221, 0, 218, 0,
	688, 219, 667, 220, 668, 669, 670, 671, 672, 0,
	630, 0, 690, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 653, 692, 230, 693, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	694, 238, 239, 241, 240, 0, 0, 620, 649, 242,
	673, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 695, 248, 696, 643, 249, 250, 251, 252,
	253, 0, 254, 644, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 674, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 697, 277, 278, 1528, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 637, 291,
	280, 281, 292, 698, 293, 675, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 676, 298, 299, 645, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 677, 678, 0, 0, 310, 311, 646, 647, 618,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	638, 320, 0, 384, 321, 322, 323, 385, 679, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 623, 612, 613, 610, 611, 602, 0,
	0, 1526, 0, 0, 0, 0, 1524, 1525, 0, 175,
	176, 0, 177, 0, 0, 1527, 0, 640, 605, 0,
	0, 601, 178, 179, 180, 331, 655, 333, 656, 181,
	657, 658, 0, 182, 337, 338, 183, 184, 0, 639,
	659, 660, 341, 0, 185, 651, 0, 631, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	685, 193, 194, 195, 0, 632, 633, 635, 0, 634,
	636, 196, 197, 394, 198, 661, 199, 662, 663, 0,
	200, 0, 201, 0, 202, 0, 0, 654, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 641, 642,
	619, 686, 0, 0, 0, 0, 0, 209, 210, 664,
	665, 666, 0, 211, 0, 212, 0, 0, 687, 0,
	213, 652, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 648, 650, 689, 0, 356, 221, 0, 218,
	0, 688, 219, 667, 220, 668, 669, 670, 671, 672,
	0, 630, 0, 690, 222, 223, 224, 691, 225, 226,
	227, 0, 229, 228, 0, 653, 692, 230, 693, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 694, 238, 239, 241, 240, 0, 0, 620, 649,
	242, 673, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 695, 248, 696, 643, 249, 250, 251,
	252, 253, 0, 254, 644, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 674, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 697, 277, 278, 1528, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 637,
	291, 280, 281, 292, 698, 293, 675, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 676, 298, 299, 645,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 677, 678, 0, 0, 310, 311, 646, 647,
	618, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 638, 320, 0, 384, 321, 322, 323, 385, 679,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 623, 612, 613, 610, 611, 602,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 1527, 0, 640, 605,
	0, 0, 601, 178, 179, 180, 0, 655, 333, 656,
	181, 657, 658, 0, 182, 337, 338, 183, 184, 608,
	639, 659, 660, 341, 0, 185, 651, 0, 631, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 685, 193, 194, 2453, 0, 632, 633, 635, 0,
	634, 636, 196, 197, 394, 198, 661, 199, 662, 663,
	0, 200, 0, 201, 0, 202, 0, 0, 654, 204,
	0, 205, 0, 0, 0, 596, 206, 207, 208, 641,
	642, 619, 686, 0, 0, 0, 0, 0, 209, 210,
	664, 665, 666, 0, 211, 0, 212, 0, 0, 687,
	0, 213, 652, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 648, 650, 0, 0, 356, 221, 0,
	218, 0, 688, 219, 667, 220, 668, 669, 670, 671,
	672, 0, 630, 0, 0, 222, 223, 224, 691, 225,
	226, 227, 0, 229, 228, 0, 653, 692, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 694, 238, 239, 241, 240, 591, 0, 620,
	649, 242, 673, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 695, 248, 696, 643, 249, 250,
	251, 252, 253, 0, 254, 644, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 674, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 597, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	637, 291, 280, 281, 292, 0, 293, 675, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 676, 298, 299,
	645, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 677, 678, 0, 0, 310, 311, 646,
	647, 618, 312, 313, 2452, 315, 0, 0, 316, 317,
	318, 319, 638, 320, 0, 384, 321, 322, 323, 385,
	679, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 623, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 588, 589,
	0, 175, 176, 0, 177, 0, 0, 598, 0, 640,
	0, 0, 0, 601, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 639, 339, 340, 341, 0, 185, 651, 0, 631,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 685, 193, 194, 195, 0, 632, 633, 635,
	0, 634, 636, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	641, 642, 0, 686, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	687, 0, 213, 652, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 648, 650, 689, 0, 356, 221,
	0, 218, 0, 688, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 690, 222, 223, 224, 691,
	225, 226, 227, 0, 229, 228, 0, 653, 692, 230,
	693, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 694, 238, 239, 241, 240, 0, 0,
	0, 649, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 695, 248, 696, 643, 249,
	250, 251, 252, 253, 0, 254, 644, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 697, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 637, 291, 280, 281, 292, 698, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 645, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	646, 647, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 638, 320, 0, 384, 321, 322, 323,
	385, 386, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 814, 0, 817, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 2100, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	822, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 685, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 686, 0, 0, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 687, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 354, 355, 689, 0, 356,
	221, 0, 218, 0, 688, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 690, 222, 223, 224,
	691, 225, 226, 227, 0, 229, 228, 0, 364, 692,
	230, 693, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 694, 238, 239, 241, 240, 0,
	0, 0, 366, 242, 367, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 695, 248, 696, 369,
	249, 250, 251, 252, 253, 0, 254, 370, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 372, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 697, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 132, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 698, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 134, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 821, 386, 0, 0, 324, 0, 0, 0, 126,
	325, 326, 327, 328, 329, 574, 127, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 118,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 738, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 132, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 134, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 821, 386, 0, 0, 324, 0, 0, 0,
	126, 325, 326, 327, 328, 329, 0, 127, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 732, 0,
	1087, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 366, 242, 367, 243, 244, 0,
	245, 0, 738, 246, 0, 0, 247, 368, 0, 248,
	0, 369, 249, 250, 251, 252, 253, 0, 254, 370,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 372,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 132, 288,
	374, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 375, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 0, 302, 134, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 380, 381, 0,
	0, 310, 311, 382, 383, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 384,
	321, 322, 323, 821, 386, 0, 0, 324, 0, 0,
	0, 126, 325, 326, 327, 328, 329, 574, 127, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 732,
	0, 1087, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 366, 242, 367, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 0,
	248, 0, 369, 249, 250, 251, 252, 253, 0, 254,
	370, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	372, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 373, 279, 0, 283, 284, 285, 286, 132,
	288, 374, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 375, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 377, 298, 299, 378, 0, 302, 134, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 380, 381,
	0, 0, 310, 311, 382, 383, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	384, 321, 322, 323, 821, 386, 0, 0, 324, 0,
	0, 0, 126, 325, 326, 327, 328, 329, 1848, 127,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 118, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 738, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 731,
	0, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 732, 0, 737, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 364, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 366, 242, 367,
	243, 244, 0, 245, 0, 738, 246, 0, 0, 247,
	368, 0, 248, 0, 369, 249, 250, 251, 252, 253,
	0, 254, 370, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 372, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 375, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	380, 381, 0, 0, 310, 311, 382, 383, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 384, 321, 322, 323, 385, 386, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 732, 0, 737, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 364, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 366, 242, 367,
	243, 244, 0, 245, 0, 738, 246, 0, 0, 247,
	368, 0, 248, 0, 369, 249, 250, 251, 252, 253,
	0, 254, 370, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 372, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 375, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	380, 381, 0, 0, 310, 311, 382, 383, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 384, 321, 322, 323, 385, 386, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 732, 0, 737, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	354, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 364, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 366, 242, 367,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 0, 248, 0, 369, 249, 250, 251, 252, 253,
	0, 254, 370, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 372, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 375, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	380, 381, 0, 0, 310, 311, 382, 383, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 384, 321, 322, 323, 385, 386, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 1203, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 1666, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 2015, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	623, 612, 613, 610, 611, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 1090, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 655, 333, 656, 181, 657, 658, 0,
	182, 337, 338, 183, 184, 0, 0, 659, 660, 341,
	0, 185, 342, 0, 822, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 685, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 661, 199, 662, 663, 0, 200, 0, 201,
	0, 202, 0, 0, 654, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 619, 686, 0,
	0, 0, 0, 0, 209, 210, 664, 665, 666, 0,
	211, 0, 212, 0, 0, 687, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 689, 0, 356, 221, 0, 218, 0, 688, 219,
	667, 220, 668, 669, 670, 671, 672, 0, 630, 0,
	690, 222, 223, 224, 691, 225, 226, 227, 0, 229,
	228, 0, 364, 692, 230, 693, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 694, 238,
	239, 241, 240, 0, 0, 620, 366, 242, 673, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	695, 248, 696, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 674, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	697, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 698, 293, 675, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 676, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 677,
	678, 0, 0, 310, 311, 382, 383, 618, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 679, 0, 479, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	168, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 167,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 165, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 171, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	168, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 167,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 172, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 171, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 168, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 354, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 366, 242, 367, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 0, 248,
	0, 369, 249, 250, 251, 252, 253, 0, 254, 370,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 372,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 375, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 0, 302, 167, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 380, 381, 0,
	0, 310, 311, 382, 383, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 384,
	321, 322, 323, 385, 386, 0, 172, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 171, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 364, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 366, 242, 367, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 0, 248, 0, 369,
	249, 250, 251, 252, 253, 0, 254, 370, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 372, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 385, 386, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 872, 0, 817, 876, 0,
	0, 0, 874, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 822, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 685, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 686, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 687, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 689, 0,
	356, 221, 0, 218, 0, 688, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 690, 222, 223,
	224, 691, 225, 226, 227, 0, 229, 228, 0, 364,
	692, 230, 693, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 694, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 695, 248, 696,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 697, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 698, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 817, 876, 324, 0, 0, 874,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 822, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 685, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 686, 0, 0, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 687,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 354, 355, 689, 0, 356, 221, 0,
	218, 0, 688, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 690, 222, 223, 224, 691, 225,
	226, 227, 0, 229, 228, 0, 364, 692, 230, 693,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 694, 238, 239, 241, 240, 0, 0, 0,
	366, 242, 367, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 695, 248, 696, 369, 249, 250,
	251, 252, 253, 0, 254, 370, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 372, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 698, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 817, 876, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 822, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 685, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 686,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 687, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	354, 355, 689, 0, 356, 221, 0, 218, 0, 688,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 690, 222, 223, 224, 691, 225, 226, 227, 0,
	229, 228, 0, 364, 692, 230, 693, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 694,
	238, 239, 241, 240, 0, 0, 0, 366, 242, 367,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 695, 248, 696, 369, 249, 250, 251, 252, 253,
	0, 254, 370, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 372, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 0, 291, 280,
	281, 292, 698, 293, 375, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	380, 381, 0, 0, 310, 311, 382, 383, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 384, 321, 322, 323, 385, 386, 817, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 822, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 685, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 686, 0, 0, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 354, 355, 689,
	0, 356, 221, 0, 218, 0, 688, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 0,
	364, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 694, 238, 239, 241,
	240, 0, 0, 0, 366, 242, 367, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 695, 248,
	696, 369, 249, 250, 251, 252, 253, 0, 254, 370,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 372,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 697, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 0, 291, 280, 281, 292, 698,
	293, 375, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 380, 381, 0,
	0, 310, 311, 382, 383, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 384,
	321, 322, 323, 385, 386, 172, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 1604, 185, 342, 0, 0,
	1599, 186, 187, 188, 0, 189, 1602, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 1607, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 1598, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	1606, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	382, 383, 0, 312, 313, 314, 315, 0, 1605, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 0, 792, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 738,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	382, 383, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 0, 744, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 746, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 738,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	382, 383, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 0, 740, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 742, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 738,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	382, 383, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 0, 411, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 410, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 354, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 409,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	382, 383, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 172, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 1587, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 354, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 366, 242,
	367, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 0, 248, 0, 369, 249, 250, 251, 252,
	253, 0, 254, 370, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 372, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 373, 279, 0, 283, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 375, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 380, 381, 0, 0, 310, 311, 382, 383, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 384, 321, 322, 323, 385, 386, 172,
	2161, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 366, 242, 367, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 0,
	248, 0, 369, 249, 250, 251, 252, 253, 0, 254,
	370, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	372, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 373, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 375, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 377, 298, 299, 378, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 380, 381,
	0, 0, 310, 311, 382, 383, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	384, 321, 322, 323, 385, 386, 172, 2161, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 364, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 366, 242, 367, 243, 244, 0, 245, 0,
	0, 2158, 0, 0, 247, 368, 0, 248, 0, 369,
	249, 250, 251, 252, 253, 0, 254, 370, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 372, 262, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 385, 386, 172, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 738, 246, 0,
	0, 247, 368, 0, 248, 0, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 373, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 375, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 377, 298, 299, 378,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 380, 381, 0, 0, 310, 311, 382, 383,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 384, 321, 322, 323, 385, 386,
	0, 1359, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 0, 248, 0, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 373, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 375, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 377, 298, 299, 378,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 380, 381, 0, 0, 310, 311, 382, 383,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 384, 321, 322, 323, 385, 386,
	0, 1357, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 0, 248, 0, 369, 249, 250, 251,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 260, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 373, 279, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 375, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 377, 298, 299, 378,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 380, 381, 0, 0, 310, 311, 382, 383,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 384, 321, 322, 323, 385, 386,
	172, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 175, 176, 1339, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 505, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 851,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 507, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 502, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 1217, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 1216,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 505, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 851,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 507, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 502, 380,
	381, 0, 0, 310, 852, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 505, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 496, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 354,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 507, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 835, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 502, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 810, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 809,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 807, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 806,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 803, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 802,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 800, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 799,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 0, 796, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 0, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	394, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 0, 0, 216, 217, 795,
	355, 0, 0, 356, 221, 0, 218, 0, 0, 219,
	357, 220, 358, 359, 360, 361, 362, 0, 363, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 364, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 365, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 366, 242, 367, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 368,
	0, 248, 0, 369, 249, 250, 251, 252, 253, 0,
	254, 370, 255, 371, 256, 0, 257, 258, 259, 260,
	261, 372, 262, 263, 0, 264, 265, 266, 267, 268,
	0, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 373, 279, 0, 283, 284, 285, 286,
	0, 288, 374, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 375, 376, 294, 0, 301, 295, 296,
	282, 297, 300, 377, 298, 299, 378, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 379, 380,
	381, 0, 0, 310, 311, 382, 383, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 384, 321, 322, 323, 385, 386, 172, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 175, 176, 784, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 782, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 781, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 778, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 776, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 772, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 774, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 750, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 752, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 748, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 505, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 496, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 495, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 507, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	497, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 498, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 502, 380, 381, 0, 0,
	310, 500, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 487, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 488, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 485, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 477, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 0, 434, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	0, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 394, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 0, 0, 216, 217, 354, 355, 0, 0,
	356, 221, 0, 218, 0, 0, 219, 357, 220, 358,
	359, 360, 361, 362, 0, 363, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 364,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 365, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 366, 242, 367, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 368, 0, 248, 0,
	369, 249, 250, 251, 252, 253, 0, 254, 370, 255,
	371, 256, 0, 257, 258, 259, 260, 261, 372, 262,
	263, 0, 264, 265, 266, 267, 268, 0, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	373, 279, 0, 283, 284, 285, 286, 0, 288, 374,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	375, 376, 294, 0, 301, 295, 296, 282, 297, 300,
	377, 298, 299, 378, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 379, 380, 381, 0, 0,
	310, 311, 382, 383, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 384, 321,
	322, 323, 385, 386, 172, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 0, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 394, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 0,
	0, 216, 217, 354, 355, 0, 0, 356, 221, 0,
	218, 0, 0, 219, 357, 220, 358, 359, 360, 361,
	362, 0, 363, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 364, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	365, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	366, 242, 367, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 368, 0, 248, 0, 369, 249, 250,
	251, 252, 253, 0, 254, 370, 255, 371, 256, 0,
	257, 258, 259, 260, 261, 372, 262, 263, 0, 264,
	265, 266, 267, 268, 0, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 373, 279, 0,
	283, 284, 285, 286, 0, 288, 374, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 375, 376, 294,
	0, 301, 295, 296, 282, 297, 300, 377, 298, 299,
	378, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 379, 380, 381, 0, 0, 310, 311, 382,
	383, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 384, 321, 322, 323, 385,
	386, 172, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 0, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 394, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 0, 0, 216, 217,
	1895, 355, 0, 0, 356, 221, 0, 218, 0, 0,
	219, 357, 220, 358, 359, 360, 361, 362, 0, 363,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 364, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 365, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 366, 242, 367,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	368, 0, 248, 0, 369, 249, 250, 251, 252, 253,
	0, 254, 370, 255, 371, 256, 0, 257, 258, 259,
	260, 261, 372, 262, 263, 0, 264, 265, 266, 267,
	268, 0, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 373, 279, 0, 283, 284, 285,
	286, 0, 288, 374, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 375, 376, 294, 0, 301, 295,
	296, 282, 297, 300, 377, 298, 299, 378, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 379,
	380, 381, 0, 0, 310, 311, 382, 383, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 384, 321, 322, 323, 385, 386, 172, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 0, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 394, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 0, 0, 216, 217, 1893, 355, 0,
	0, 356, 221, 0, 218, 0, 0, 219, 357, 220,
	358, 359, 360, 361, 362, 0, 363, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	364, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 365, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 366, 242, 367, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 368, 0, 248,
	0, 369, 249, 250, 251, 252, 253, 0, 254, 370,
	255, 371, 256, 0, 257, 258, 259, 260, 261, 372,
	262, 263, 0, 264, 265, 266, 267, 268, 0, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 373, 279, 0, 283, 284, 285, 286, 0, 288,
	374, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 375, 376, 294, 0, 301, 295, 296, 282, 297,
	300, 377, 298, 299, 378, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 379, 380, 381, 0,
	0, 310, 311, 382, 383, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 384,
	321, 322, 323, 385, 386, 172, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 0, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 394, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	0, 0, 216, 217, 1882, 355, 0, 0, 356, 221,
	0, 218, 0, 0, 219, 357, 220, 358, 359, 360,
	361, 362, 0, 363, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 364, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 365, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 366, 242, 367, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 368, 0, 248, 0, 369, 249,
	250, 251, 252, 253, 0, 254, 370, 255, 371, 256,
	0, 257, 258, 259, 260, 261, 372, 262, 263, 0,
	264, 265, 266, 267, 268, 0, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 373, 279,
	0, 283, 284, 285, 286, 0, 288, 374, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 375, 376,
	294, 0, 301, 295, 296, 282, 297, 300, 377, 298,
	299, 378, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 379, 380, 381, 0, 0, 310, 311,
	382, 383, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 384, 321, 322, 323,
	385, 386, 172, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 0, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 394, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 0, 0, 216,
	217, 354, 355, 0, 0, 356, 221, 0, 218, 0,
	0, 219, 357, 220, 358, 359, 360, 361, 362, 0,
	363, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 364, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 365, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 366, 242,
	367, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 368, 0, 248, 0, 369, 249, 250, 251, 252,
	253, 0, 254, 370, 255, 371, 256, 0, 257, 258,
	259, 260, 261, 372, 262, 263, 0, 264, 265, 266,
	267, 268, 0, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 373, 279, 0, 488, 284,
	285, 286, 0, 288, 374, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 375, 376, 294, 0, 301,
	295, 296, 282, 297, 300, 377, 298, 299, 378, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	379, 380, 381, 0, 0, 310, 311, 382, 383, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 384, 321, 322, 323, 385, 386, 172,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 1227, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 0, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 394,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 0, 0, 216, 217, 354, 355,
	0, 0, 356, 221, 0, 218, 0, 0, 219, 357,
	220, 358, 359, 360, 361, 362, 0, 363, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 364, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 365, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 366, 242, 367, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 368, 0,
	248, 0, 369, 249, 250, 251, 252, 253, 0, 254,
	370, 255, 371, 256, 0, 257, 258, 259, 260, 261,
	372, 262, 263, 0, 264, 265, 266, 267, 268, 0,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 373, 279, 0, 283, 284, 285, 286, 0,
	288, 374, 287, 289, 290, 0, 0, 280, 281, 292,
	0, 293, 375, 376, 294, 0, 301, 295, 296, 282,
	297, 300, 377, 298, 299, 378, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 379, 380, 381,
	0, 0, 310, 311, 382, 383, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	384, 321, 322, 323, 385, 386, 172, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 0,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 394, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 0, 0, 216, 217, 354, 355, 0, 0, 356,
	221, 0, 218, 0, 0, 219, 357, 220, 358, 359,
	360, 361, 362, 0, 363, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 364, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 365, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 366, 242, 367, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 368, 0, 248, 0, 369,
	249, 250, 251, 252, 253, 0, 254, 370, 255, 371,
	256, 0, 257, 258, 259, 260, 261, 372, 714, 263,
	0, 264, 265, 266, 267, 268, 0, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 373,
	279, 0, 283, 284, 285, 286, 0, 288, 374, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 375,
	376, 294, 0, 301, 295, 296, 282, 297, 300, 377,
	298, 299, 378, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 379, 380, 381, 0, 0, 310,
	311, 382, 383, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 384, 321, 322,
	323, 385, 386, 172, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 0, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 394, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 0, 0,
	216, 217, 354, 355, 0, 0, 356, 221, 0, 218,
	0, 0, 219, 357, 220, 358, 359, 360, 361, 362,
	0, 363, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 364, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 365,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 366,
	242, 367, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 368, 0, 248, 0, 369, 249, 250, 0,
	252, 253, 0, 254, 370, 255, 371, 256, 0, 257,
	258, 259, 0, 261, 372, 262, 263, 0, 264, 265,
	266, 267, 268, 0, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 373, 0, 0, 283,
	284, 285, 286, 0, 288, 374, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 375, 376, 294, 0,
	301, 295, 296, 282, 297, 300, 377, 298, 299, 378,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 379, 380, 381, 0, 0, 310, 311, 382, 383,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 384, 321, 322, 323, 385, 386,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 941, 942, 0, 971, 972, 973, 981, 982,
	983, 0, 0, 0, 0, 0, 0, 0, 974, 0,
	0, 0, 0, 0, 0, 944, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 941, 942, 0,
	971, 972, 973, 981, 982, 983, 0, 0, 0, 943,
	0, 0, 0, 974, 0, 963, 0, 0, 0, 960,
	944, 0, 0, 985, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 943, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 967, 968, 969,
	0, 0, 0, 0, 0, 949, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 978, 986, 0,
	0, 966, 967, 968, 969, 0, 0, 0, 0, 0,
	949, 0, 0, 0, 0, 0, 984, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 976, 978, 986, 0, 0, 0, 964, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 984, 941, 942, 0, 971, 972, 973, 981, 982,
	983, 0, 975, 0, 0, 0, 976, 0, 974, 0,
	0, 0, 964, 0, 0, 944, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 975, 0, 943,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 960,
	0, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 979, 0, 0,
	0, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 967, 968, 969,
	0, 0, 979, 0, 0, 949, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 978, 986, 0,
	0, 0, 0, 0, 0, 977, 0, 0, 955, 956,
	962, 961, 957, 958, 959, 980, 984, 954, 952, 953,
	945, 946, 947, 948, 950, 951, 0, 0, 0, 0,
	0, 976, 0, 0, 1782, 0, 0, 964, 0, 0,
	977, 0, 0, 955, 956, 962, 961, 957, 958, 959,
	980, 0, 954, 952, 953, 945, 946, 947, 948, 950,
	951, 0, 975, 0, 0, 2424, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 942, 0, 971, 972, 973, 981, 982, 983,
	0, 0, 0, 0, 0, 0, 970, 974, 0, 0,
	0, 0, 0, 0, 944, 0, 0, 985, 0, 0,
	0, 965, 0, 0, 0, 0, 0, 941, 942, 0,
	971, 972, 973, 981, 982, 983, 0, 979, 943, 0,
	0, 0, 0, 974, 963, 0, 0, 0, 960, 0,
	944, 0, 0, 985, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 943, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 966, 967, 968, 969, 0,
	0, 0, 0, 0, 949, 977, 0, 0, 955, 956,
	962, 961, 957, 958, 959, 980, 0, 954, 952, 953,
	945, 946, 947, 948, 950, 951, 978, 986, 0, 0,
	2377, 966, 967, 968, 969, 0, 0, 0, 0, 0,
	949, 0, 0, 0, 0, 984, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	976, 0, 978, 986, 0, 0, 964, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 984, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 975, 0, 0, 0, 0, 976, 0, 0, 0,
	0, 0, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 941, 942, 0, 971,
	972, 973, 981, 982, 983, 0, 979, 0, 0, 0,
	0, 970, 974, 0, 0, 0, 0, 0, 0, 944,
	0, 0, 985, 0, 0, 0, 965, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 979, 943, 0, 0, 0, 0, 0, 963,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 977, 0, 0, 955, 956, 962,
	961, 957, 958, 959, 980, 0, 954, 952, 953, 945,
	946, 947, 948, 950, 951, 0, 0, 0, 0, 2331,
	966, 967, 968, 969, 0, 0, 0, 0, 0, 949,
	977, 0, 0, 955, 956, 962, 961, 957, 958, 959,
	980, 0, 954, 952, 953, 945, 946, 947, 948, 950,
	951, 978, 986, 0, 0, 2301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	984, 941, 942, 0, 971, 972, 973, 981, 982, 983,
	0, 0, 0, 0, 0, 976, 0, 974, 0, 0,
	0, 964, 0, 0, 944, 0, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 941, 942, 0, 971,
	972, 973, 981, 982, 983, 0, 975, 0, 943, 0,
	0, 0, 974, 0, 963, 0, 0, 0, 960, 944,
	0, 0, 985, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 943, 0, 0, 0, 0, 0, 963,
	0, 0, 0, 960, 0, 965, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 966, 967, 968, 969, 0,
	0, 979, 0, 0, 949, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 978, 986, 0, 0,
	966, 967, 968, 969, 0, 0, 0, 0, 0, 949,
	0, 0, 0, 0, 0, 984, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	976, 978, 986, 0, 0, 0, 964, 0, 0, 977,
	0, 0, 955, 956, 962, 961, 957, 958, 959, 980,
	984, 954, 952, 953, 945, 946, 947, 948, 950, 951,
	0, 975, 0, 0, 2296, 976, 0, 0, 0, 0,
	0, 964, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 0, 941, 942, 0,
	971, 972, 973, 981, 982, 983, 979, 0, 0, 0,
	970, 0, 0, 974, 0, 0, 0, 0, 0, 0,
	944, 0, 0, 985, 0, 965, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 979, 0, 0, 943, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 977, 0, 0, 955, 956, 962,
	961, 957, 958, 959, 980, 0, 954, 952, 953, 945,
	946, 947, 948, 950, 951, 0, 0, 0, 0, 2292,
	0, 966, 967, 968, 969, 0, 0, 0, 0, 977,
	949, 0, 955, 956, 962, 961, 957, 958, 959, 980,
	0, 954, 952, 953, 945, 946, 947, 948, 950, 951,
	0, 0, 978, 986, 2234, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 984, 941, 942, 0, 971, 972, 973, 981, 982,
	983, 0, 0, 0, 0, 0, 976, 0, 974, 0,
	0, 0, 964, 0, 0, 944, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 941, 942, 0,
	971, 972, 973, 981, 982, 983, 0, 975, 0, 943,
	0, 0, 0, 974, 0, 963, 0, 0, 0, 960,
	944, 0, 0, 985, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 943, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 960, 0, 965, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 967, 968, 969,
	0, 0, 979, 0, 0, 949, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 978, 986, 0,
	0, 966, 967, 968, 969, 0, 0, 0, 0, 0,
	949, 0, 0, 0, 0, 0, 984, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 976, 978, 986, 0, 0, 0, 964, 0, 0,
	977, 0, 0, 955, 956, 962, 961, 957, 958, 959,
	980, 984, 954, 952, 953, 945, 946, 947, 948, 950,
	951, 0, 975, 0, 0, 2200, 976, 0, 0, 0,
	0, 0, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 0, 0, 0, 0, 0, 0, 941, 942,
	0, 971, 972, 973, 981, 982, 983, 979, 0, 0,
	0, 970, 0, 0, 974, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 985, 0, 965, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 979, 0, 0, 943, 0, 0, 0, 0,
	0, 963, 0, 0, 0, 960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 977, 0, 0, 955, 956,
	962, 961, 957, 958, 959, 980, 0, 954, 952, 953,
	945, 946, 947, 948, 950, 951, 0, 0, 0, 0,
	2199, 0, 966, 967, 968, 969, 0, 0, 0, 0,
	977, 949, 0, 955, 956, 962, 961, 957, 958, 959,
	980, 0, 954, 952, 953, 945, 946, 947, 948, 950,
	951, 0, 0, 978, 986, 2164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 984, 941, 942, 0, 971, 972, 973, 981,
	982, 983, 0, 0, 0, 0, 0, 976, 0, 974,
	0, 0, 0, 964, 0, 0, 944, 0, 0, 985,
	0, 0, 0, 0, 0, 0, 0, 0, 941, 942,
	0, 971, 972, 973, 981, 982, 983, 0, 975, 0,
	943, 0, 0, 0, 974, 0, 963, 0, 0, 0,
	960, 944, 0, 0, 985, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 0, 0, 943, 0, 0, 0, 0,
	0, 963, 0, 0, 0, 960, 0, 965, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 966, 967, 968,
	969, 0, 0, 979, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 978, 986,
	0, 0, 966, 967, 968, 969, 0, 0, 0, 0,
	0, 949, 0, 0, 0, 0, 0, 984, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 978, 986, 0, 0, 0, 964, 0,
	0, 977, 0, 0, 955, 956, 962, 961, 957, 958,
	959, 980, 984, 954, 952, 953, 945, 946, 947, 948,
	950, 951, 0, 975, 0, 0, 2018, 976, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 975, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 0, 941,
	942, 0, 971, 972, 973, 981, 982, 983, 979, 0,
	0, 0, 970, 0, 0, 974, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 985, 0, 965, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 979, 0, 0, 943, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 960, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 0, 0, 955,
	956, 962, 961, 957, 958, 959, 980, 0, 954, 952,
	953, 945, 946, 947, 948, 950, 951, 0, 0, 0,
	0, 1994, 0, 966, 967, 968, 969, 0, 0, 0,
	0, 977, 949, 0, 955, 956, 962, 961, 957, 958,
	959, 980, 0, 954, 952, 953, 945, 946, 947, 948,
	950, 951, 0, 0, 978, 986, 1465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 984, 941, 942, 0, 971, 972, 973,
	981, 982, 983, 0, 0, 0, 0, 0, 976, 0,
	974, 0, 0, 0, 964, 0, 0, 944, 0, 0,
	985, 0, 0, 0, 0, 0, 0, 0, 0, 941,
	942, 0, 971, 972, 973, 981, 982, 983, 0, 975,
	0, 943, 0, 0, 0, 974, 0, 963, 0, 0,
	0, 960, 944, 0, 0, 985, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 0, 0, 943, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 960, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 966, 967,
	968, 969, 0, 0, 979, 0, 0, 949, 2484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 978,
	986, 0, 0, 966, 967, 968, 969, 0, 0, 0,
	0, 0, 949, 0, 1822, 0, 0, 1821, 984, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 978, 986, 0, 0, 0, 964,
	0, 0, 977, 0, 0, 955, 956, 962, 961, 957,
	958, 959, 980, 984, 954, 952, 953, 945, 946, 947,
	948, 950, 951, 0, 975, 1752, 0, 0, 976, 0,
	0, 0, 0, 0, 964, 0, 0, 0, 0, 0,
	2483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 970, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 979,
	0, 0, 0, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 979, 0, 0, 0, 0, 0,
	0, 0, 941, 942, 0, 971, 972, 973, 981, 982,
	983, 0, 0, 0, 0, 0, 0, 0, 974, 0,
	0, 0, 0, 1725, 0, 944, 0, 977, 985, 0,
	955, 956, 962, 961, 957, 958, 959, 980, 0, 954,
	952, 953, 945, 946, 947, 948, 950, 951, 0, 943,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 960,
	0, 0, 977, 0, 0, 955, 956, 962, 961, 957,
	958, 959, 980, 0, 954, 952, 953, 945, 946, 947,
	948, 950, 951, 0, 0, 0, 1726, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 967, 968, 969,
	0, 0, 0, 0, 0, 949, 0, 0, 0, 1563,
	0, 0, 0, 0, 0, 941, 942, 0, 971, 972,
	973, 981, 982, 983, 0, 0, 0, 978, 986, 0,
	0, 974, 0, 0, 0, 1562, 0, 0, 944, 0,
	0, 985, 0, 0, 0, 0, 984, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 976, 943, 0, 0, 0, 0, 964, 963, 0,
	0, 0, 960, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 941, 942, 0, 971, 972, 973, 981, 982,
	983, 0, 975, 0, 0, 0, 0, 0, 974, 0,
	0, 0, 0, 0, 0, 944, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 966,
	967, 968, 969, 0, 0, 0, 970, 0, 949, 943,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 960,
	0, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	978, 986, 0, 0, 0, 0, 0, 979, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 984,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 976, 0, 966, 967, 968, 969,
	964, 0, 0, 0, 0, 949, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 0, 978, 986, 0,
	0, 0, 0, 0, 0, 977, 0, 0, 955, 956,
	962, 961, 957, 958, 959, 980, 984, 954, 952, 953,
	945, 946, 947, 948, 950, 951, 0, 0, 0, 970,
	0, 976, 0, 0, 0, 0, 0, 964, 0, 0,
	0, 0, 0, 0, 965, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	979, 0, 975, 571, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 39, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 0, 42, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 0, 0, 0, 0, 0, 979, 977, 0,
	0, 955, 956, 962, 961, 957, 958, 959, 980, 0,
	954, 952, 953, 945, 946, 947, 948, 950, 951, 0,
	59, 0, 0, 0, 0, 0, 0, 60, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	941, 942, 0, 971, 972, 973, 981, 982, 983, 0,
	0, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 63, 944, 0, 977, 985, 0, 955, 956,
	962, 961, 957, 958, 959, 980, 0, 954, 952, 953,
	945, 946, 947, 948, 950, 951, 0, 943, 0, 0,
	0, 0, 0, 963, 0, 941, 942, 960, 971, 972,
	973, 981, 982, 983, 0, 0, 0, 0, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 944, 0,
	0, 985, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 943, 64, 966, 967, 968, 969, 963, 0,
	0, 0, 960, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	66, 0, 67, 0, 0, 978, 986, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 459, 0, 984, 99, 0, 0, 0, 966,
	967, 968, 969, 0, 0, 0, 0, 0, 949, 976,
	0, 0, 0, 1828, 134, 964, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	978, 986, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 984,
	133, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 976, 127, 0, 0, 0, 0,
	964, 0, 0, 0, 970, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 965,
	0, 0, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 979, 0, 0, 0, 0,
	0, 0, 0, 0, 941, 942, 0, 971, 972, 973,
	981, 982, 983, 0, 0, 0, 0, 0, 0, 970,
	974, 1998, 0, 0, 1823, 0, 0, 944, 0, 0,
	985, 0, 0, 0, 965, 0, 0, 0, 0, 941,
	942, 0, 971, 972, 973, 981, 982, 983, 0, 0,
	979, 943, 0, 0, 0, 974, 0, 963, 0, 0,
	0, 960, 944, 977, 0, 985, 955, 956, 962, 961,
	957, 958, 959, 980, 0, 954, 952, 953, 945, 946,
	947, 948, 950, 951, 0, 0, 943, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 960, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 966, 967,
	968, 969, 0, 0, 0, 0, 0, 949, 977, 0,
	0, 955, 956, 962, 961, 957, 958, 959, 980, 0,
	954, 952, 953, 945, 946, 947, 948, 950, 951, 978,
	986, 0, 0, 966, 967, 968, 969, 0, 0, 0,
	0, 0, 949, 0, 0, 0, 0, 0, 984, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 978, 986, 0, 0, 0, 964,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 984, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 975, 0, 0, 0, 976, 0,
	0, 0, 0, 0, 964, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 970, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1788, 965, 0, 0, 0, 0, 941, 942,
	0, 971, 972, 973, 981, 982, 983, 0, 0, 979,
	0, 0, 0, 970, 974, 0, 0, 0, 1781, 0,
	0, 944, 0, 0, 985, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 979, 943, 0, 0, 0, 0,
	0, 963, 0, 941, 942, 960, 971, 972, 973, 981,
	982, 983, 0, 0, 0, 0, 0, 0, 0, 974,
	0, 0, 0, 0, 0, 0, 944, 977, 0, 985,
	955, 956, 962, 961, 957, 958, 959, 980, 0, 954,
	952, 953, 945, 946, 947, 948, 950, 951, 0, 0,
	943, 0, 966, 967, 968, 969, 963, 0, 0, 0,
	960, 949, 977, 0, 0, 955, 956, 962, 961, 957,
	958, 959, 980, 0, 954, 952, 953, 945, 946, 947,
	948, 950, 951, 978, 986, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 984, 0, 0, 0, 0, 966, 967, 968,
	969, 0, 0, 0, 0, 0, 949, 976, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 978, 986,
	0, 0, 0, 0, 0, 0, 0, 0, 975, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 0, 0, 0, 0, 0, 964, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 965, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 979, 0, 0, 0, 0, 0, 0,
	0, 0, 941, 942, 0, 971, 972, 973, 981, 982,
	983, 0, 0, 0, 0, 0, 0, 970, 974, 0,
	0, 0, 0, 0, 0, 944, 0, 0, 985, 0,
	0, 0, 965, 0, 0, 0, 0, 941, 942, 0,
	971, 972, 973, 981, 982, 983, 0, 0, 979, 943,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 960,
	944, 977, 0, 985, 955, 956, 962, 961, 957, 958,
	959, 980, 0, 954, 952, 953, 945, 946, 947, 948,
	950, 951, 0, 0, 943, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 967, 968, 969,
	0, 0, 0, 0, 0, 949, 977, 0, 0, 955,
	956, 962, 961, 957, 958, 959, 980, 0, 954, 952,
	953, 945, 946, 947, 948, 950, 951, 978, 986, 0,
	0, 966, 967, 968, 969, 0, 0, 0, 0, 0,
	949, 0, 0, 0, 0, 0, 984, 941, 942, 0,
	971, 972, 973, 981, 982, 983, 0, 0, 0, 0,
	0, 976, 978, 986, 0, 0, 0, 964, 0, 0,
	944, 0, 0, 985, 0, 0, 0, 0, 0, 0,
	0, 984, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 943, 0, 976, 0, 0, 0,
	963, 0, 964, 0, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 966, 967, 968, 969, 0, 0, 979, 0, 0,
	949, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 0, 0, 0,
	0, 0, 978, 986, 0, 0, 0, 0, 0, 0,
	0, 0, 979, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 976, 0, 0, 0,
	0, 0, 964, 0, 0, 977, 0, 0, 955, 956,
	962, 961, 957, 958, 959, 980, 0, 954, 952, 953,
	945, 946, 947, 948, 950, 951, 0, 38, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 39, 121,
	977, 0, 0, 955, 956, 962, 961, 957, 958, 959,
	980, 42, 954, 952, 953, 945, 946, 947, 948, 950,
	951, 970, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 0, 43, 0, 48, 0, 965, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 979, 0, 0, 51, 0, 0, 0, 53,
	0, 0, 0, 59, 0, 0, 124, 0, 0, 0,
	60, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 0, 0, 1270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	977, 0, 0, 955, 956, 962, 961, 957, 958, 959,
	980, 0, 954, 952, 953, 945, 946, 947, 948, 950,
	951, 0, 1278, 1267, 1297, 1258, 1288, 1287, 0, 0,
	1260, 1259, 0, 0, 0, 0, 1299, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 1293, 65, 1285, 1284, 0, 0, 0, 0, 0,
	0, 0, 0, 1283, 0, 0, 0, 0, 0, 0,
	0, 72, 119, 66, 0, 67, 0, 68, 0, 125,
	0, 0, 0, 0, 69, 1282, 1280, 1281, 132, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 1266, 0, 0, 0, 0, 134, 0, 1271,
	1269, 1272, 1273, 1274, 1275, 1276, 0, 1296, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 1262, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 1286, 127, 0,
	0, 1268, 0, 0, 0, 0, 1270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 4, 0, 0, 0, 0, 0,
	1279, 0, 0, 0, 1390, 1388, 1389, 1392, 1391, 1278,
	1267, 1297, 1258, 1288, 1287, 0, 0, 1260, 1259, 526,
	0, 552, 0, 1299, 1298, 0, 0, 0, 0, 0,
	0, 1263, 0, 0, 0, 0, 0, 0, 0, 531,
	0, 0, 1277, 1264, 0, 0, 0, 0, 0, 0,
	0, 529, 1301, 0, 0, 0, 0, 0, 1293, 0,
	1285, 1284, 0, 0, 0, 1261, 0, 0, 1294, 1295,
	1283, 0, 530, 0, 0, 0, 0, 532, 0, 0,
	0, 0, 538, 539, 0, 0, 0, 548, 0, 0,
	1265, 0, 1282, 1280, 1281, 1300, 0, 0, 0, 0,
	0, 553, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1266,
	0, 0, 0, 0, 551, 0, 1271, 1269, 1272, 1273,
	1274, 1275, 1276, 0, 1296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1262, 0, 0, 0, 535, 536, 0, 0,
	0, 0, 0, 0, 1286, 0, 0, 0, 1268, 0,
	0, 0, 0, 0, 542, 0, 0, 537, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 0,
	0, 0, 0, 0, 0, 0, 0, 1279, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 1277,
	1264, 0, 0, 0, 0, 0, 0, 0, 0, 1301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1261, 0, 0, 1294, 1295, 0, 0, 0,
	0, 0, 0, 0, 0, 528, 545, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1265, 0, 0,
	0, 0, 1300, 0, 0, 0, 0, 0, 0, 0,
	0, 546, 0, 0, 0, 550, 0, 0, 0, 556,
	0, 0, 0, 0, 543, 547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	549,
}
var sqlPact = [...]int{

	42164, -1000, -26, -1000, -1000, -1000, 130, -1000, -1000, -1000,
	128, 127, 126, -1000, 116, 115, 113, 106, 105, 104,
	100, 96, 95, 88, 87, -1000, 86, -1000, -1000, -1000,
	-1000, 85, 84, 78, 77, 76, 75, 74, 969, 22366,
	69, 67, 1283, 35540, 66, 64, 58, 54, 892, 53,
	52, 25991, 812, 1251, 51, 50, 49, 48, 47, 1267,
	35213, 3553, 2600, 1050, 1583, 34883, 22036, 1576, 1552, 34553,
	-1000, -1000, 34223, 45, 44, 43, 37, 36, -1000, -1000,
	33893, 34, 31, 29, 28, 27, 26, 25, 24, 22,
	21, 16, 14, 12, 11, -1000, 10, 7, 5, 42557,
	4, 1, -1, 1034, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 83, -1000, 874, 377, 2870,
	8064, 980, 978, 928, 923, 962, 37502, 35540, -2, -116,
	-3, -1000, 1856, 585, 19667, 42164, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	25661, 25331, 33563, 33233, 712, -1000, -39, 23022, 35540, -1000,
	40, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15234, 14892, 467, 40, -1000, -1000, -1000, -1000, -1000, 32903,
	-1000, 32573, 32243, 1434, 31913, -1000, -1000, -1000, -1000, 31583,
	-1000, -1000, 1803, 1591, 1589, 25001, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31256, 30926,
	30596, 30266, 29936, 415, -1000, -1000, -1000, 17962, -1000, -1000,
	-1000, -1000, -5, -1000, -6, -1000, -7, -9, -12, -13,
	-1000, -15, -17, -1000, -19, -20, -1000, -22, -24, 29606,
	1203, -1000, -1000, -37, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35540, -1000, 15916, -1000, 410, -1000, 1536, -1000,
	15916, -1000, 1200, -1000, -1000, -1000, -1000, -1000, 35540, -1000,
	-1000, -1000, -1000, -1000, -1000, 2078, 1134, 409, 29276, -1000,
	1396, -1000, 510, 682, -1000, -1000, -1000, 9087, 134, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1145, 23363,
	1266, 1884, 1721, 2077, 1319, 1716, 1713, 1709, 1681, 1664,
	2076, 866, 2075, 1688, 932, 2074, 1646, 1218, 606, 2070,
	1535, 1529, -1000, -1000, -1000, -1000, 836, -1000, -1000, -1000,
	27299, -1000, -1000, 874, -1000, -1000, -1000, 1348, 1847, 1847,
	1847, 1913, 214, 210, -1000, 83, -1000, 1141, -1000, 1124,
	-1000, -1000, -1000, -1000, -1000, 41603, -1000, -1000, 15916, 15916,
	15916, 15916, 15916, 1040, 437, -1000, 408, 407, 7381, -1000,
	-1000, 2058, -1000, -1000, -1000, 227, -1000, -1000, 15916, 40,
	-1000, -1000, -1000, -1000, 404, 2065, -1000, 595, -1000, -1000,
	-1000, 503, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1574, 403, 400, 399, -1000, 398, -1000, -1000, 394,
	391, 390, 387, 386, 385, 384, 382, 380, 378, 376,
	375, 373, 370, 369, 943, -1000, 563, -1000, -1000, 563,
	563, -1000, 349, 349, 353, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 349, -1000, -1000, -1000, 496, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 367,
	1239, -1000, -1000, 1239, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 710, 36848, -41, 35540, -1000, 366, -41, -1000, -1000,
	365, -1000, 11133, 11133, -1000, -1000, -1000, -1000, -1000, 9769,
	1764, -1000, 3348, -216, 219, 462, -1000, 18644, 21366, -1000,
	-1000, 1288, 1724, 561, -1000, 921, 1718, 333, -1000, 912,
	-1000, 1026, 1710, -72, 23690, 23022, -39, -50, -1000, -1000,
	-1000, 5674, 41603, -1000, 41603, -1000, 772, 20347, 40, -1000,
	-1000, -1000, -1000, 364, 1237, 520, -1000, 221, -1000, 28946,
	520, 1236, -1000, -1000, -1000, 27299, -1000, 35540, -1000, 35540,
	-1000, 809, -1000, 37175, 122, 1699, -1000, -1000, 122, 1693,
	-1000, 110, 1672, -1000, -1000, 1212, 1667, -1000, -50, 1643,
	-1000, -1000, 15916, -68, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 585, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 28616, 22694, 1153, 498, 41603,
	1983, 42512, 23690, 41603, 22694, -1000, -1000, 35540, -1000, 15916,
	-1000, 1982, 1211, -44, -1000, -1000, -1000, -1000, -1000, 1290,
	1444, 659, 1243, 9087, 9087, 1814, -1000, 124, 6015, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 28286, -1000, -1000,
	-1000, 1113, 35540, -1000, -1000, 1569, -1000, 22694, 35540, -1000,
	35540, -1000, 35540, -1000, 35540, -1000, 35540, -1000, -1000, -1000,
	-1000, -1000, 890, -1000, 1551, -1000, -1000, 35540, -1000, 1286,
	-1000, -1000, -1000, 27959, 27629, -1000, 888, 750, -1000, -1000,
	123, -1000, -1000, 1348, -1000, 1180, 1412, 14550, 1365, 15916,
	83, -1000, -1000, 83, 83, 8746, -1000, -1000, -1000, 35540,
	-1000, 42305, 42512, 6015, 727, 15916, 15916, 15916, 15916, 15916,
	15916, 15916, 15916, 15916, 15916, 15916, 15916, 15916, 15916, 15916,
	15916, 15916, 15916, 15916, 15916, 15916, 15916, 15916, 15916, 15916,
	15916, 15916, 15916, 15916, 15916, 15916, 15916, 1185, 15916, 706,
	15916, 15916, 15916, 15916, 1178, 1038, 345, 1100, -1000, 2018,
	2018, 2018, 41857, 41857, 327, 437, -1000, 15916, -1000, 41,
	14209, 210, 39838, -40, 7040, -1000, -1000, -1000, 9428, 556,
	41603, 40, 6356, -1000, 2056, 981, 1582, 1481, 363, 512,
	511, 500, 423, 15916, 15916, 13868, 13526, 13184, 16598, 12842,
	15916, 7722, 15916, 15916, 15916, 15916, 12500, 12158, -1000, 361,
	-1000, -1000, -1000, -1000, 2050, -1000, -1000, 2049, -1000, 723,
	720, 2047, -1000, -44, -1000, 36848, -1000, 35540, -41, 1980,
	35540, -1000, 55, -1000, 40645, -1000, 55, -74, -1000, 1399,
	1388, 20007, 1407, 1063, 1063, 1063, -1000, 357, 430, 462,
	4973, 11816, -1000, 26318, 1066, 148, 209, 18303, 1764, -1000,
	35540, -61, 1010, -1000, 24671, 1940, 1883, 1837, 27299, 1931,
	41, 1527, 705, 27299, 703, 1927, 41, 1515, 696, 35540,
	6015, 488, -1000, 35540, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1513, -75, -1000, -1000, 4643, 1976, 1634,
	-1000, 956, -1000, 1972, 35540, 1193, 1234, -1000, -1000, 738,
	1630, 531, 216, 1964, 216, 20686, -1000, 35540, -1000, 35540,
	-1000, -1000, 35540, -1000, 35540, -1000, 35540, 35540, -1000, 35540,
	35540, -76, 41603, 40911, 24344, 687, -1000, 580, 4643, 3006,
	-77, -1000, 605, -1000, -1000, -1000, -1000, 200, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 353, 943, 349, 349, 349, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 496, -1000, -1000, 563, 563, 563,
	-1000, -1000, -73, -1000, 1508, 499, -82, 612, -44, -1000,
	1239, -1000, 1056, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2064, -1000, 2038, -1000,
	-1000, 2045, -47, -1000, -47, -1000, 6015, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35540, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 213, -1000, -1000, -1000, -1000, -1000, -1000,
	35540, 35540, 35540, -1000, 27299, -1000, -1000, -1000, -1000, 41603,
	-1000, 342, -1000, -1000, 41603, 945, 1421, -1000, 1421, -48,
	-1000, 40522, 1370, 35540, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 509, 588, 588, 715, 715,
	715, 715, 1974, 1119, 1132, 936, 3394, 3394, 3394, 3394,
	3394, 3394, 3394, 3394, 458, 1740, 1740, 458, 458, 458,
	458, 458, 3394, 3394, 3394, 41857, 41822, 1149, 15916, 15916,
	685, 1022, 345, 1149, 15916, 1149, 1149, 1149, 1149, -1000,
	1121, -1000, -1000, -1000, -1000, 1506, 341, 16598, 16598, -1000,
	-1000, -1000, 7381, 16939, -1000, -1000, -1000, -1000, 340, 15916,
	-1000, 40059, -222, -83, -1000, -1000, 15916, -93, -167, -1000,
	-1000, 782, -1000, 15916, -1000, -45, 15916, 15916, 15916, 206,
	-1000, 205, -1000, 679, -1000, 669, 661, 658, -1000, 338,
	1039, 337, 336, 15916, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 41548, 38162, 204, -1000, 1505, -176, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 203, -1000, 201, -1000, 41329,
	-176, 198, 4124, -1000, 16598, 16598, 16598, 7381, 335, 197,
	-1000, 40249, -176, 41294, 11474, 11474, 11474, 196, 41075, 15916,
	-176, 4251, 4096, 4061, -84, -98, -1000, -106, -1000, 2044,
	-109, 195, 507, 497, 191, -1000, -1000, 329, -111, 531,
	11133, 19326, 6015, -1000, 531, 9769, -1000, 20007, 20007, 1968,
	1387, 20007, -1000, -1000, -1000, -1000, 26318, 494, 462, 26318,
	-1000, 2043, 1318, -117, -1000, -1000, -1000, 35540, 328, -1000,
	462, 190, 889, 35540, 35540, 35540, -1000, -1000, 1232, 36521,
	1229, 42512, 35540, -1000, 324, 323, 1360, 1358, 35540, 35540,
	36194, 35867, 35540, 895, 41, -1000, 290, 35540, 901, 35540,
	41, -1000, 289, 35540, 899, -1000, 1456, 1186, -1000, 766,
	1503, 35540, 188, -119, -49, 42512, -1000, -1000, -1000, -1000,
	-1000, 35540, 304, 35540, 41, 35540, 2063, 41, 35540, 1629,
	1717, 455, 35540, 1412, 15916, 1074, -1000, 18985, 569, 35540,
	835, 39, -1000, -1000, -1000, 464, 35540, -1000, -1000, 122,
	122, -1000, 110, 1212, -50, -1000, 15916, -1000, -1000, 35540,
	23690, -120, -1000, -1000, 42512, -1000, 436, 648, -1000, 2040,
	519, 23690, 35540, 9087, 9087, -1000, 1411, -1000, -1000, 847,
	-1000, 903, -1000, -1000, -1000, -1000, 9087, -1000, -62, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 945, -1000, 15916, 2034,
	-1000, -1000, -1000, 8746, -1000, -1000, -1000, 35540, -213, 15916,
	1149, 1149, 15916, 16598, 16598, -1000, 1149, -1000, -1000, -1000,
	-1000, -1000, 1499, 287, 15916, 42512, 3669, 2603, -122, -1000,
	10792, -52, -1000, 15916, -1000, 39803, -1000, -1000, 424, 1731,
	-1000, 15916, 41020, 186, 10451, -1000, 40712, -46, -46, -1000,
	2062, 1249, 1235, 911, 819, 2029, -1000, 21026, 546, 1071,
	39648, 42305, 42512, -1000, 15916, -1000, -1000, 1497, 15916, -1000,
	42305, 42512, 16598, 16598, 16598, 16598, 16598, 16598, 16598, 16598,
	16598, 16598, 16598, 16598, 16598, 16598, 16598, 16598, 16598, 16598,
	16598, 1334, 16598, 2014, 2014, 2014, -57, 10110, -1000, 1540,
	1497, 15916, 15916, 42512, 184, 183, 180, -1000, 15916, -176,
	15916, 15916, 15916, -1000, -1000, -1000, 175, -1000, 2025, -1000,
	-1000, -1000, -1000, 3006, -1000, 1475, -1000, -103, -1000, 1764,
	-1000, 1475, -1000, -1000, 1968, -1000, 285, 15916, 20007, -1000,
	429, -1000, -127, -1000, 26318, -1000, 426, -219, -1000, 463,
	-1000, 462, 281, 35540, 26318, -1000, -1000, -1000, 656, 640,
	1619, -1000, 1226, -1000, 574, -1000, 959, 15916, 17621, 279,
	275, 972, -1000, 1615, 1212, 1612, 1212, -1000, -61, 974,
	-1000, 15916, -1000, 638, -1000, -1000, 15916, -1000, 636, 519,
	1491, 753, -1000, 762, -1000, 1442, -1000, 4643, 272, 35540,
	271, -1000, 269, -1000, -1000, 268, 35540, 1312, 455, 24017,
	-1000, 520, 835, -1000, 41603, -1000, 835, 8405, 1864, -128,
	-1000, -1000, -1000, 531, 20686, 20007, 9769, -129, -1000, -1000,
	-1000, -1000, 41603, -62, 1818, 1818, -1000, 2019, -1000, 421,
	172, -1000, 26972, -1000, -62, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35540, 1092, 39427, -1000, 1842, 6015, 1998, 1149,
	2477, 303, 15916, 42512, 41977, -134, 15916, 15916, -1000, -135,
	-1000, 15916, 419, 41603, -1000, -1000, -1000, 41603, 15916, 2061,
	15916, 171, 170, 169, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 165, -1000, -1000, 37829, 15916, 161, -1000, 160,
	159, 41603, 1540, 41603, -1000, -1000, 524, 524, 788, 788,
	788, 788, 2014, 1161, 596, 514, 468, 468, 468, 1095,
	1182, 1182, 468, 468, 468, 1489, 1344, 265, 4032, 15916,
	-137, -1000, -1000, -1000, 41603, 41603, 155, -1000, -1000, -1000,
	-176, 326, 39392, 39237, -1000, 153, 151, 1471, 1909, -1000,
	20007, 1471, -1000, 35540, 41603, -1000, -216, -1000, 2015, -1000,
	-1000, 1318, -1000, 5328, 26318, 35540, -140, -1000, 35540, 35540,
	35540, 1611, -1000, 2579, -1000, 39016, -142, -1000, 299, 1880,
	15916, -1000, -1000, 264, 17621, 35540, -1000, 1369, 1474, 604,
	35540, -1000, 35540, -1000, 35540, 35540, 35540, -145, 35540, -147,
	35540, -1000, 23690, 716, -1000, -1000, 1451, -1000, 17621, 252,
	35540, 4643, 1946, 17621, 1187, 1326, 455, 24017, -1000, 738,
	-1000, -1000, -63, -1000, 325, 41, 835, -1000, -64, -1000,
	461, 1804, -1000, 1800, 418, -1000, -1000, -65, 250, -1000,
	460, 459, -1000, -1000, -1000, -1000, 1842, 15916, 15916, 41977,
	-148, -1000, 1149, 1149, -1000, 38981, -1000, 41603, -1000, 40712,
	-1000, -1000, -1000, -1000, 964, -1000, 38826, -1000, -1000, -1000,
	-1000, 16598, 1488, 249, 42512, 38607, -1000, -1000, 15916, -1000,
	-1000, -1000, -1000, 528, 15916, 15916, 1764, 528, -150, 462,
	-1000, -1000, -1000, 2012, -1000, -153, -1000, -1000, -1000, -1000,
	35540, -1000, 35540, -1000, 6015, 35540, 1495, 1220, -1000, -1000,
	1345, 245, 16598, 35540, -1000, 986, 17621, 1842, 40, 6015,
	1842, 38571, 6356, -155, -156, 1198, -1000, 1196, 15916, -1000,
	42512, 1212, 1212, -1000, 631, 627, 623, -1000, 622, -1000,
	-69, 21706, 961, -158, 17621, -161, 150, 41, -164, 35540,
	-1000, 455, 24017, -1000, 1717, 1748, 35540, 1834, -1000, -1000,
	244, 243, 242, -1000, 26645, 26645, 23690, 23690, -1000, 1149,
	1149, -1000, -1000, 144, 1071, 1900, -1000, 267, 16598, 42512,
	-166, -1000, 38352, -1000, 35540, 41603, -176, -1000, -1000, 26318,
	417, -1000, -1000, 1533, -1000, -1000, 35540, 1224, -1000, -1000,
	15916, 4032, 241, 1442, 238, -1000, -1000, -1000, -1000, -1000,
	-1000, 1880, -45, -1000, 935, -1000, -1000, 41603, 1872, -1000,
	-1000, 35540, 35540, 237, 236, -1000, 235, 40, 35540, 986,
	-171, -1000, 1442, -1000, 986, 230, 24017, -1000, 1312, 731,
	-177, 35540, -1000, -1000, 6697, 23690, 23690, -1000, -178, -1000,
	-1000, -1000, 859, 15916, 267, -179, -1000, -1000, -70, -1000,
	1939, -1000, -1000, -1000, -1000, 1604, 38197, 1260, 35540, -1000,
	35540, 1842, 142, 35540, 577, 6015, -1000, -1000, 15916, 15916,
	15916, 226, 1442, 986, -1000, 1442, 17621, -1000, 1326, 794,
	-1000, 531, -1000, -184, -186, -1000, 140, 16257, 16257, -176,
	-1000, 35540, 222, 1594, -1000, 1096, 1190, 139, -187, -1000,
	-1000, 221, -1000, 15916, -1000, -193, -194, -46, 35540, -1000,
	1442, -1000, -195, -1000, 20686, -1000, 519, 519, -1000, -1000,
	-1000, 17280, 1188, 826, 40214, -1000, -1000, -1000, 35540, -1000,
	1181, 1175, 814, -1000, -1000, -1000, -1000, -1000, 1260, 41603,
	-1000, -1000, 136, -196, -1000, 986, -180, -1000, -1000, 1988,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1771, -1000, 587,
	1379, 1379, 1096, 2061, 1151, 1442, -1000, 15575, -1000, 1978,
	-1000, -1000, 1352, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2451, 2449, 1621, 1925, 2448, 2446, 2444, 2443, 2440,
	2437, 2433, 2430, 2429, 2427, 2426, 2424, 2423, 2421, 2419,
	1912, 2418, 1906, 2416, 2415, 2411, 2410, 1904, 2402, 2401,
	2400, 2397, 2395, 2393, 1897, 2392, 1885, 2390, 2388, 2387,
	2384, 2383, 1839, 2382, 78, 113, 1825, 2380, 2379, 1819,
	1811, 1767, 2378, 1764, 2376, 2375, 1760, 1758, 2374, 93,
	2371, 2370, 2369, 1755, 1712, 2368, 2365, 2356, 141, 2352,
	1702, 2351, 2350, 2340, 2339, 2335, 2331, 2328, 2327, 2326,
	2324, 2322, 2321, 2309, 2298, 2297, 2294, 2293, 2283, 151,
	2281, 2280, 1688, 1685, 2279, 2276, 29, 26, 14, 47,
	21, 159, 2711, 142, 2271, 2268, 2263, 2262, 2261, 2258,
	16, 91, 90, 2256, 120, 2253, 2252, 38, 33, 22,
	19, 2251, 89, 2250, 2249, 939, 31, 2247, 2246, 131,
	2245, 76, 27, 697, 147, 143, 101, 110, 2244, 2243,
	2242, 41, 104, 1, 2241, 2237, 15, 80, 12, 2236,
	34, 18, 2235, 2233, 119, 2232, 55, 86, 1579, 117,
	125, 953, 2231, 54, 10, 51, 2230, 2229, 150, 36,
	2228, 25, 69, 138, 2227, 49, 152, 121, 62, 118,
	123, 2224, 2220, 2219, 133, 2218, 108, 107, 2217, 2215,
	59, 2214, 92, 134, 2212, 2209, 2207, 83, 2206, 115,
	2203, 2202, 146, 132, 102, 8, 39, 56, 5, 1503,
	1501, 124, 77, 37, 43, 2201, 2153, 1198, 1175, 28,
	96, 74, 50, 97, 46, 87, 144, 53, 2199, 2198,
	130, 2197, 2194, 2193, 2191, 2190, 99, 2189, 2186, 20,
	2182, 58, 24, 68, 84, 35, 129, 116, 106, 145,
	95, 2171, 71, 114, 2170, 85, 2166, 2164, 1740, 105,
	2162, 2161, 2159, 1736, 1722, 1637, 60, 2157, 2156, 972,
	968, 2152, 2151, 75, 2150, 103, 98, 88, 139, 149,
	42, 2148, 111, 57, 2146, 45, 32, 0, 1534, 180,
	2144, 112, 63, 2143, 2142, 2141, 2140, 23, 3, 9,
	4, 7, 6, 82, 79, 2137, 2135, 122, 64, 72,
	2134, 148, 2133, 2129, 2128, 30, 2122, 13, 2112, 11,
	2108, 2107, 17, 2, 2096, 2095, 136, 2094, 109, 2093,
	1901, 2088, 137, 2087, 2083, 1731, 2082, 48, 100,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 112, 112,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 109, 109, 114, 114, 114,
	116, 116, 113, 113, 108, 108, 20, 20, 57, 57,
	99, 50, 50, 50, 285, 285, 286, 286, 95, 95,
	96, 96, 96, 96, 97, 97, 98, 98, 98, 26,
	26, 26, 22, 22, 22, 22, 22, 23, 23, 24,
	24, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 34, 34, 35, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 41, 41, 41, 39, 39, 39,
	38, 38, 38, 37, 37, 37, 40, 40, 40, 160,
	160, 159, 159, 162, 162, 42, 42, 42, 42, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 45, 45, 45, 45, 45,
	45, 45, 254, 254, 253, 43, 43, 228, 228, 46,
	46, 185, 185, 47, 47, 47, 47, 47, 48, 48,
	58, 58, 326, 326, 326, 330, 330, 331, 331, 332,
	332, 332, 332, 332, 332, 332, 328, 328, 53, 53,
	53, 53, 54, 54, 54, 55, 55, 94, 94, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 64, 64,
	64, 66, 63, 63, 63, 65, 65, 65, 65, 67,
	67, 68, 68, 68, 68, 68, 69, 69, 279, 277,
	277, 278, 278, 139, 139, 139, 139, 139, 140, 140,
	140, 284, 284, 284, 284, 284, 284, 283, 283, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 82, 82, 82, 89, 89,
	89, 89, 89, 89, 89, 71, 71, 76, 76, 76,
	76, 76, 72, 72, 77, 77, 78, 78, 79, 79,
	79, 79, 79, 79, 73, 73, 73, 73, 81, 81,
	81, 81, 80, 80, 86, 86, 86, 86, 86, 86,
	83, 83, 83, 83, 84, 84, 84, 87, 87, 87,
	87, 74, 74, 75, 75, 88, 88, 85, 85, 85,
	327, 327, 329, 329, 51, 51, 30, 30, 31, 31,
	141, 141, 142, 142, 207, 207, 207, 207, 143, 143,
	115, 115, 115, 206, 295, 295, 296, 296, 296, 296,
	296, 296, 297, 297, 297, 297, 297, 297, 297, 293,
	293, 294, 291, 291, 292, 292, 292, 292, 333, 333,
	205, 205, 146, 146, 300, 300, 300, 300, 298, 298,
	298, 298, 298, 301, 299, 302, 302, 302, 302, 302,
	240, 240, 240, 91, 91, 32, 32, 121, 121, 33,
	33, 29, 29, 29, 189, 189, 150, 150, 245, 245,
	245, 132, 132, 110, 110, 110, 14, 11, 11, 11,
	11, 11, 11, 19, 19, 17, 17, 190, 190, 191,
	191, 52, 52, 56, 56, 61, 61, 90, 90, 90,
	90, 90, 90, 21, 21, 21, 21, 25, 25, 25,
	25, 60, 60, 335, 335, 128, 128, 128, 128, 129,
	129, 202, 202, 203, 203, 336, 336, 204, 204, 204,
	123, 122, 124, 124, 28, 28, 28, 117, 117, 118,
	118, 119, 119, 120, 120, 337, 337, 49, 49, 49,
	93, 93, 135, 135, 199, 199, 199, 201, 201, 200,
	200, 200, 175, 175, 175, 92, 92, 155, 155, 164,
	164, 165, 165, 251, 166, 166, 59, 59, 102, 102,
	100, 100, 100, 100, 100, 100, 101, 101, 101, 103,
	103, 103, 103, 103, 103, 103, 106, 106, 106, 107,
	107, 107, 105, 105, 308, 308, 308, 311, 311, 307,
	309, 309, 310, 310, 334, 334, 176, 176, 176, 145,
	144, 144, 148, 148, 147, 149, 149, 244, 244, 244,
	173, 173, 173, 173, 194, 194, 192, 192, 193, 193,
	195, 195, 196, 196, 196, 197, 197, 198, 198, 172,
	172, 224, 224, 104, 104, 104, 154, 154, 154, 156,
	156, 214, 214, 214, 215, 215, 213, 213, 213, 213,
	246, 246, 246, 246, 246, 246, 246, 246, 324, 324,
	324, 325, 325, 243, 243, 247, 247, 247, 247, 247,
	247, 241, 241, 241, 241, 242, 242, 252, 252, 179,
	179, 179, 179, 177, 177, 178, 178, 248, 248, 248,
	248, 174, 174, 249, 249, 249, 208, 208, 255, 255,
	255, 273, 273, 153, 153, 153, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 257, 257, 257, 257, 259,
	259, 259, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	272, 272, 272, 272, 272, 260, 260, 267, 267, 268,
	268, 269, 270, 261, 261, 262, 262, 263, 264, 271,
	271, 271, 271, 275, 275, 265, 265, 265, 265, 265,
	266, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 187, 187, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 218,
	218, 218, 218, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 303, 303, 303, 303, 303, 303,
	303, 303, 305, 305, 306, 306, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 312, 312, 313, 313,
	315, 315, 316, 316, 317, 318, 318, 318, 319, 320,
	320, 314, 314, 321, 321, 321, 322, 322, 323, 323,
	323, 323, 323, 230, 230, 230, 231, 231, 232, 238,
	238, 238, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 130, 130,
	130, 130, 130, 161, 161, 227, 227, 225, 225, 225,
	229, 229, 180, 180, 274, 274, 274, 274, 274, 274,
	274, 181, 181, 181, 188, 182, 182, 183, 183, 183,
	183, 183, 183, 221, 222, 184, 184, 184, 223, 223,
	233, 237, 237, 236, 235, 235, 234, 234, 211, 211,
	212, 212, 210, 209, 169, 169, 168, 168, 167, 167,
	338, 338, 239, 239, 170, 170, 171, 163, 163, 250,
	250, 250, 250, 157, 157, 137, 137, 158, 158, 133,
	133, 136, 136, 134, 134, 134, 134, 151, 151, 152,
	152, 131, 131, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 276, 276, 276, 226, 125, 125,
	125, 126, 126, 127, 127, 281, 281, 281, 282, 282,
	282, 282, 280, 280, 280, 280, 280, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 3,
	1, 2, 1, 2, 2, 7, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 3,
	4, 4, 4, 3, 2, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 2, 3,
	3, 3, 2, 3, 4, 3, 5, 3, 4, 5,
	2, 3, 3, 3, 4, 2, 3, 4, 3, 3,
	3, 4, 4, 4, 4, 2, 3, 5, 5, 5,
	2, 0, 2, 0, 3, 2, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 2, 4, 3, 3, 0, 6,
	3, 11, 14, 4, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 3, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	2, 2, 1, 1, 1, 0, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 2, 3, 3, 2, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	8, 4, 6, 3, 3, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 3, 1, 1,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 3, 4, 1, 1, 1, 5, 1, 3, 3,
	1, 3, 3, 1, 3, 3, 1, 1, 3, 3,
	1, 1, 6, 6, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 3, 4, 3, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 0, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 2, 2, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 1, 1, 2, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 370, -4, -20, -22, -26, -27,
	-47, -34, -35, -36, -46, -42, -48, -49, -50, -51,
	-43, -57, -56, -58, -61, -59, -52, -53, -62, -70,
	-90, -91, -92, -93, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 68, -28, -29, -30, -31, 70, -32,
	-33, 91, -310, 95, -37, -38, -39, -41, -40, 99,
	106, 108, 130, 141, 222, 228, 249, 251, 253, 260,
	-100, -102, 247, -54, -55, -63, -64, -65, -66, -94,
	271, -71, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, 274,
	-21, -25, -60, 312, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, -308, -103, -101, 367, 248,
	321, 35, 283, 61, 102, 255, 337, 344, -106, -104,
	-105, -107, 264, 329, 293, 371, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 2,
	293, 332, 84, 149, -326, 2, -158, 293, 84, -134,
	-125, 360, 4, -287, -289, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 64,
	66, 68, 69, 72, 73, 74, 82, 83, 85, 87,
	91, 93, 95, 98, 99, 101, 106, 107, 108, 118,
	119, 124, 126, 131, 137, 138, 141, 142, 150, 153,
	155, 148, 165, 166, 167, 169, 170, 171, 174, 173,
	178, 181, 184, 186, 187, 188, 191, 189, 193, 194,
	196, 195, 201, 203, 204, 206, 209, 212, 215, 218,
	219, 220, 221, 222, 224, 226, 228, 230, 231, 232,
	233, 234, 236, 237, 239, 240, 241, 242, 243, 247,
	245, 246, 248, 249, 250, 251, 253, 255, 256, 258,
	272, 273, 284, 260, 261, 262, 263, 267, 265, 268,
	269, 271, 274, 276, 279, 282, 283, 285, 288, 289,
	286, 281, 292, 294, 295, 296, 297, 298, 299, 300,
	307, 308, 312, 313, 314, 315, 318, 319, 320, 321,
	323, 326, 327, 328, 333, 338, 339, 340, 341, 342,
	28, 36, 37, 38, 39, 41, 42, 45, 46, 51,
	52, 53, 56, 86, 88, 89, 105, 109, 110, 120,
	121, 122, 132, 134, 143, 144, 147, 154, 156, 157,
	158, 159, 160, 162, 176, 190, 200, 202, 213, 217,
	225, 227, 235, 257, 266, 277, 278, 287, 290, 302,
	303, 304, 309, 310, 325, 329, 330, 370, 370, 2,
	166, 232, -133, -125, 84, 370, 370, 370, 370, 293,
	2, 322, 332, -189, 84, 317, 370, 370, -125, 228,
	22, 2, 93, 153, 320, 319, 22, 224, 265, 295,
	297, 2, 370, 370, 370, 370, 370, 2, 332, 293,
	149, 84, 322, -125, 2, -45, 2, 367, -44, -4,
	-27, -36, -46, -42, -20, -22, -34, -50, -49, -51,
	-53, -57, -56, -59, -63, -64, -70, -92, -93, 271,
	-330, 2, 22, -331, -332, 70, 99, 130, 264, 153,
	93, 319, 293, 2, 166, 2, -125, 2, -326, 2,
	166, 2, -330, 2, -125, 2, -129, 2, 260, -125,
	370, 370, 370, 370, 370, 181, 55, 257, 268, -68,
	308, -67, 302, -279, -69, 2, -159, 191, -125, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 2, -89, 268, 34,
	55, 22, 60, 85, 131, 149, 150, 170, 65, 66,
	231, 181, 167, 307, 171, 269, 294, 308, 70, 323,
	298, 107, 4, 84, 191, 270, 302, 370, 370, 370,
	-334, 2, 293, -101, -103, -102, -147, -148, 316, 161,
	104, 211, -100, -102, 2, -308, -89, 268, 2, 55,
	22, -277, 2, -239, 207, -216, 90, -218, 358, 359,
	353, 197, 343, -230, -220, -233, 105, 257, 367, -133,
	-219, 373, 9, -305, -102, 29, -231, -232, 49, -125,
	7, 8, 5, 6, -131, -257, -226, -266, 311, 111,
	199, -303, -304, 4, -287, -281, -258, -268, -262, -265,
	162, 58, 76, 77, 80, 78, 81, 270, 322, 50,
	28, 109, 110, 217, 225, 290, 309, 310, 143, 200,
	144, 56, 132, 176, 98, 37, 39, 41, 42, 51,
	52, 86, 88, 89, 120, 121, 122, 154, 156, 157,
	158, 159, 160, 202, 235, 277, 287, 303, 304, 330,
	-288, -269, -270, -263, -264, 71, 112, 129, 152, 145,
	164, 168, 177, 179, 192, 214, 216, 254, 275, -271,
	-335, 2, 308, 308, 2, -335, 2, -335, 2, -128,
	2, 308, 305, -311, 236, -307, -125, -311, 370, 370,
	372, 370, -144, -145, 2, 22, 96, -171, 2, 367,
	-246, 2, 365, -248, -133, -102, -247, 367, 208, -3,
	2, -248, 143, -133, 2, -248, 143, -133, 2, -125,
	2, -136, 143, -133, 305, 372, -158, -151, -125, -210,
	-209, 369, -216, 2, -216, 2, 128, 367, -168, -169,
	-209, -210, 2, -159, 143, -125, 2, -159, 2, 149,
	-125, 143, 2, -125, 22, 128, 2, 163, 2, 163,
	2, -249, 2, -248, -160, 143, 2, -159, -160, 143,
	2, -137, 143, 2, -136, -125, 143, 2, -151, 143,
	2, -185, 367, -254, 2, -253, -282, 4, -287, -289,
	-288, 329, 58, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 268, 207, 372, -159, -216,
	-228, 367, 128, -216, 207, -125, 2, 272, 2, 367,
	-68, 53, 308, -203, 2, -204, -122, -123, -124, 165,
	230, 234, 342, 305, 348, 128, -277, -162, 369, -89,
	2, -285, 2, -283, 9, -282, 5, 272, 2, 231,
	269, 55, 128, 2, 2, -327, 2, 207, 128, 2,
	128, 2, 128, 2, 128, 2, 128, 2, 2, 231,
	269, 2, 125, 2, 307, 2, 2, 128, 2, 165,
	230, 284, 2, 293, 332, 2, 128, 128, 342, 2,
	-174, -248, -147, -148, -173, -192, -193, 180, 113, 205,
	-176, 22, 96, -176, -176, 44, 368, 368, -89, 272,
	2, 10, 11, 57, 33, 358, 359, 360, 361, 123,
	362, 363, 356, 357, 355, 346, 347, 350, 351, 352,
	67, 349, 348, 63, 185, 259, 114, 115, 116, 117,
	244, 13, 14, 15, 26, 210, 179, 343, 145, 275,
	353, 16, 17, 18, 164, 36, 146, -130, -138, -216,
	-216, -216, -216, -216, 216, -167, -211, 365, -102, 367,
	367, -102, -216, -161, 367, 7, -102, -225, 365, -234,
	-216, -168, 367, 5, 367, 5, -312, 338, 125, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 227, -275,
	333, -275, -275, -259, 367, -259, -260, 367, -259, 339,
	344, 367, -202, -203, -202, 305, -129, 372, -311, -152,
	367, -171, -163, -250, -216, 360, -163, -170, -239, 71,
	-179, 168, 192, 129, 177, 254, 152, 7, -45, -213,
	373, 367, 360, -243, 344, -102, -247, 367, -246, -133,
	367, -112, 245, -111, 21, 23, 99, 327, 105, 281,
	299, 261, 245, 105, 245, 281, 299, 261, 245, 105,
	373, -285, -134, 372, -280, 360, 4, -287, -289, -288,
	-290, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 49, 50, 54, 57, 59, 65, 70, 75, 76,
	78, 77, 79, 80, 81, 90, 92, 94, 96, 97,
	100, 102, 104, 111, 113, 125, 127, 128, 130, 133,
	135, 146, 149, 151, 161, 163, 172, 175, 180, 182,
	183, 197, 198, 199, 205, 207, 208, 210, 211, 223,
	229, 238, 252, 264, 270, 280, 291, 293, 301, 305,
	306, 311, 316, 317, 322, 324, 331, 332, 334, 335,
	336, 337, 285, 368, -157, -133, -169, 367, -146, 197,
	-121, -309, 337, -146, 367, -126, 143, 2, -125, -309,
	197, -249, -135, -133, -135, 271, -125, 30, -114, 372,
	48, 250, 105, -114, 105, -114, 372, 105, -114, 105,
	105, -161, -216, 368, 372, -326, -332, 70, 367, 30,
	-227, -255, -256, -258, -267, -261, -265, -266, 40, 46,
	45, 300, 190, 266, 278, 325, 147, 38, 206, 155,
	4, 154, 156, 157, 158, 159, 160, 277, 37, 235,
	121, 122, 120, 98, 89, 88, 202, 42, 41, -269,
	-270, -263, -264, 86, 303, 304, 162, 39, 52, 51,
	330, 287, -286, -285, -326, -279, -161, 30, -203, 2,
	-336, 372, 178, -140, 184, 196, 137, 208, 340, -284,
	5, 4, -226, -240, 90, 181, -266, 8, 359, -276,
	7, 358, -278, -277, -278, 74, 369, -280, -159, 22,
	273, 2, -279, -329, 125, -326, -279, -279, -279, -279,
	-279, 268, -45, 125, -125, 178, -279, 2, -279, 2,
	293, 149, 293, -114, 372, -173, -193, -192, -195, -216,
	22, -198, 119, 193, -216, -218, -101, -101, -101, -149,
	-244, -216, 229, 149, -279, -273, -255, -272, 240, 241,
	239, 243, 242, -255, -280, 302, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, 179, 145,
	275, 36, 146, -216, 305, -216, -216, -216, -216, 189,
	197, 199, 311, 111, 318, 96, 203, -338, 291, 32,
	-223, -102, 367, -238, 27, 280, 22, -230, 257, 367,
	-211, -216, -212, -161, 368, 368, 372, -161, -229, 366,
	-225, -237, -236, 334, 368, -161, 331, 22, 96, 360,
	2, 7, -186, 341, 188, 87, 138, 187, -187, 263,
	-313, 118, 133, 367, 368, 2, 368, 2, 368, 2,
	368, 2, -216, -216, -180, 2, -274, -161, 4, 341,
	188, 87, 138, 187, 263, -180, 2, -181, 2, -216,
	-161, -182, -217, -218, 358, 359, 353, 367, 257, -183,
	2, -216, -161, -216, 43, 175, 306, -184, -216, 128,
	-161, -216, -216, -216, -161, -161, 2, -161, 2, 367,
	7, 7, 302, 302, 7, -129, -307, 30, -151, -154,
	372, 128, 30, 4, -154, 372, 368, 168, 168, -246,
	-179, 168, -177, 214, -177, -177, -324, 367, 366, -243,
	-280, 365, 374, -161, 2, -242, -241, 30, -125, 212,
	368, -133, 372, 305, -190, 65, 59, -206, 143, 59,
	-291, -125, 65, -292, 54, 317, 229, 127, -190, 65,
	-190, 65, 65, -248, 33, -59, 128, 305, -248, 305,
	33, -59, 128, 305, -136, -280, -252, 345, -125, 128,
	368, 372, -141, -151, -142, -125, -207, -206, -293, -294,
	-291, 149, 317, 112, 30, 105, 221, 30, 207, 197,
	-117, 296, 105, -208, 335, -199, -59, 367, 90, 30,
	-199, -164, -165, -251, -166, -133, 367, -125, -159, -160,
	-160, -136, -137, -125, -151, 368, 372, -45, -253, 305,
	324, -142, -44, 368, 372, -153, 29, 365, -186, 367,
	-252, 372, 128, 348, 305, 368, 308, -204, -139, 234,
	279, 246, 267, 8, 7, 7, 372, -280, -328, -125,
	268, -45, -133, -136, -133, -248, -196, -276, 367, 359,
	-197, 257, 258, 372, -110, 31, 94, 169, -133, 342,
	-216, -216, 305, -338, 291, -223, -216, 189, 199, 311,
	111, 318, 96, 203, 128, 367, -217, -217, -161, -220,
	367, -161, 366, 376, 368, -216, 366, 366, 372, -235,
	-236, 100, -216, -148, 372, -147, -216, -161, -161, 368,
	368, 305, 305, 305, 305, 367, -318, 215, 367, 367,
	-216, 30, 372, 368, 128, 368, 368, -188, 223, 368,
	10, 11, 358, 359, 360, 361, 123, 362, 363, 356,
	357, 355, 346, 347, 348, 63, 185, 259, 13, 14,
	15, 164, 146, -217, -217, -217, -161, 367, 368, -221,
	-222, 128, 125, 30, -184, -184, -184, 368, 128, -161,
	372, 372, 372, 368, 368, 368, 7, 368, 372, 368,
	342, 342, 368, 367, 368, -208, -250, -156, 2, -246,
	-280, -208, -239, -246, -246, -178, 324, 207, 168, -246,
	-241, 368, -325, 7, -243, -242, 7, -215, -214, 126,
	195, 368, -125, 367, -243, 368, -111, -133, -125, -125,
	197, -206, 143, -116, 197, -255, -125, 367, 367, 169,
	169, -125, -125, 143, -125, 143, -125, -125, -112, 245,
	-59, 367, -133, 245, -125, -59, 367, -125, 245, -95,
	142, 203, 285, 128, -133, 368, 368, 372, -126, 149,
	-126, -59, -159, 5, -59, -133, 105, -118, 101, -337,
	348, -125, -194, -192, -216, -175, -201, 252, 207, -157,
	329, -125, -175, -155, 372, 128, 348, -157, -114, -114,
	-114, -114, -216, -328, -285, 368, -255, 365, 366, 7,
	7, -98, 337, -285, -328, -277, -277, -122, 315, 62,
	234, -277, 372, -197, -216, -244, -133, 373, -216, -216,
	-217, -217, 128, 367, -216, -227, 26, 26, 368, -161,
	368, 372, -212, -216, 368, -225, 102, -216, 301, 368,
	331, -148, -148, -148, 5, 188, 138, 187, -187, 187,
	-187, -187, 7, -319, -125, 367, 335, -147, 368, -273,
	-255, -216, -221, -216, -273, -255, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, 96, 197, 203, -217, 372,
	-161, 368, -222, -221, -216, -216, -255, 368, 368, 368,
	-161, -216, -216, -216, 368, 7, -44, -172, 133, -252,
	372, -172, -178, 367, -216, -246, 366, 368, 372, -242,
	366, 372, 375, 348, -243, 367, -151, -241, 305, 305,
	105, 197, 326, -295, -292, -216, -150, -245, -125, -306,
	367, -303, -304, -131, 367, 367, -109, 99, 271, -191,
	105, -114, 105, -114, 305, -190, 65, -161, 305, -161,
	305, -98, 128, 292, 285, -143, 148, -207, 367, -126,
	367, 367, -146, 367, -125, -119, 174, -337, -283, -309,
	-175, -175, -163, 198, 64, 368, -208, -165, -156, -239,
	368, -99, 72, -99, 7, 366, 368, -97, 209, -96,
	-125, 5, -125, 208, 368, -110, -280, 26, 26, -216,
	-227, 368, -216, -216, 368, -216, 366, -216, 5, -216,
	368, 368, 368, 368, -320, -125, -216, 368, 368, 368,
	-222, 128, 96, 203, 367, -216, 368, 368, 372, 368,
	368, 368, 368, -224, 135, 44, -246, -224, -151, -213,
	7, -214, -280, 365, -242, -151, 368, -125, -125, -206,
	105, -296, 65, -297, 57, 112, 70, 197, 199, 317,
	229, 54, 90, 238, 368, 368, 372, -132, -168, 57,
	-132, -216, 367, -150, -151, 197, 90, 197, 90, 83,
	313, -125, -125, -133, -125, -125, 368, -133, 368, -125,
	-286, 302, 146, -150, 367, -151, -141, 30, -150, 207,
	-120, 173, -337, -283, -117, -200, 367, 207, -59, -175,
	348, 83, 83, 366, 372, 367, 348, 348, -110, -216,
	-216, 368, 368, -148, -314, 220, 368, -217, 128, 367,
	-227, 368, -216, -315, 336, -216, -161, -315, 368, -243,
	7, 368, -206, -125, -280, -125, 112, 143, 199, 169,
	367, -217, -133, -205, -333, 69, 289, -245, -110, -280,
	-110, 368, -161, 368, 368, 199, 199, -216, -255, -114,
	-114, 305, 305, 305, 305, -219, -131, -125, 218, 368,
	-150, 368, 368, -59, 368, -133, -337, -283, -118, 97,
	-151, 65, -171, -102, 367, 367, 367, -96, -97, -285,
	-285, 368, -148, 44, -217, -227, 368, 368, -316, -317,
	-125, -242, 366, -297, -126, 197, -216, -127, 367, -143,
	367, -132, -148, 238, -113, 57, -125, -125, 367, 367,
	367, -133, -205, 368, -143, -205, 367, -283, -119, 319,
	198, 368, -125, -286, -286, 368, -321, 233, 258, -161,
	368, 372, 30, 105, 368, -300, 186, -125, -151, -110,
	368, -133, -108, 324, -280, -161, -161, -161, 367, -143,
	-205, -143, -150, -120, 271, -208, 368, 368, 368, -322,
	-323, 36, 314, 74, -216, -322, -317, -319, 112, -298,
	-301, -299, 207, 129, 219, 276, 368, 368, -146, -216,
	368, 368, -148, -151, -143, 368, -164, -98, -98, -323,
	226, 124, 257, 226, 124, -125, -299, 207, -301, 207,
	319, 93, -300, 368, 368, -205, -208, 26, -302, 194,
	250, 48, 271, -302, -298, -115, 48, 250, -143, -323,
	20, 199, 90,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 0, 0, 151, 153, 155, 157, -2, 160,
	162, 0, 0, 0, 173, 175, 177, 179, 181, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	636, -2, 0, 278, 280, 289, 291, 293, 295, 296,
	0, 339, 341, 343, 345, 347, 349, 351, 353, 355,
	357, 359, 361, 363, 365, 367, 368, 370, 372, 0,
	557, 559, 561, -2, 63, 64, 65, 66, 67, 73,
	74, 75, 76, 69, 71, 672, -2, 683, 0, 0,
	0, -2, 0, -2, -2, -2, 0, 0, 649, 651,
	653, 655, -2, 0, 0, -2, 7, 12, 14, 16,
	19, 21, 23, 25, 27, 29, 31, 33, 35, 37,
	39, 42, 48, 50, 52, 55, 57, 59, 61, 62,
	0, 0, 0, 0, 0, 117, 262, 0, 1250, 1177,
	1183, 1184, 1208, 1209, 1210, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
	1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
	1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
	1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372,
	1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
	1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
	1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
	1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
	1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
	1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432,
	1433, 1434, 1435, 1436, 1437, 1438, 1439, 143, 145, 146,
	0, 0, 0, 1179, 1250, 152, 154, 156, 158, 0,
	164, 0, 0, 0, 0, 524, 161, 163, 253, 1309,
	255, 257, 0, 0, 0, 0, 167, 168, 169, 170,
	171, 172, 174, 176, 178, 180, 182, 183, 0, 0,
	0, 0, 0, 252, 250, 205, 206, 0, 235, 236,
	237, 238, 239, 241, 209, 211, 212, 214, 216, 218,
	220, 221, 223, 225, 226, 228, 230, 231, 233, 0,
	0, 259, 265, 266, 267, 269, 270, 271, 272, 273,
	274, 275, 0, 123, 0, 445, 248, 246, 0, 119,
	0, 554, 0, 261, 555, 556, 551, 552, 1336, 580,
	279, 281, 290, 292, 294, -2, -2, 1426, -2, 303,
	-2, 311, 1432, 0, 314, 315, 318, -2, 201, 340,
	342, 344, 346, 348, 350, 352, 354, 356, 358, 360,
	362, 364, 366, 369, 371, 373, 374, 375, 0, 0,
	0, 379, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, 0, 0, -2,
	0, 0, 378, 380, 381, 382, 0, 558, 560, 562,
	0, 514, 674, -2, 647, 648, -2, 0, 678, 678,
	678, 0, 0, 648, 646, 0, 282, 0, 284, 0,
	379, 287, 288, 319, 320, 1162, 1163, 877, 0, 0,
	0, 0, 0, 0, 979, 981, 1399, 1426, 0, 983,
	984, 0, 986, 988, 989, 0, 992, 993, 1147, 1179,
	1193, 1194, 1195, 1196, 0, 0, 1199, 0, 1201, 1202,
	1203, 1047, 1003, -2, -2, 1191, 805, 806, 807, 808,
	-2, 1440, 1007, 1010, 1013, 1016, 1017, 1020, 1021, 0,
	1383, 1400, 1401, 1422, 1423, 1431, 1435, 1436, 1407, 1419,
	1408, 1395, 1405, 1417, 1256, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1217, 839, 840, 845, 846, 1441, 1442, 1443, 1444, 1445,
	1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 848,
	582, 564, 573, 582, 566, 567, 568, 569, 570, 571,
	572, 575, 0, 664, 1315, 667, 1190, 665, 650, 652,
	0, 654, 0, 0, 658, 680, 679, 713, 714, 0,
	662, 663, 673, 729, 767, 744, 735, 0, 0, 2,
	68, 0, 1407, 767, 70, 0, 1407, 767, 72, 0,
	77, 0, 1407, 1182, 0, 0, 263, 264, 1187, 1185,
	1186, 0, 147, 148, 149, 150, 0, 0, 1180, 1156,
	1154, 1155, 159, 493, 1407, -2, 516, 493, 520, -2,
	671, 1407, 596, 254, 256, 0, 166, 0, 609, 0,
	611, 0, 626, 773, 109, 1407, 186, 199, 109, 1407,
	189, 109, 1407, 192, 1175, 109, 1407, 195, 196, 1407,
	198, 249, 0, 0, -2, 242, 244, 1218, 1219, 1220,
	1221, -2, 1440, 240, 210, 213, 215, 217, 219, 222,
	224, 227, 229, 232, 234, -2, 0, 0, 0, 444,
	0, 0, 0, 553, 0, 579, 297, 0, 300, 0,
	302, 1394, -2, -2, 306, 583, 587, 588, 589, 0,
	0, 0, 0, 0, 0, 0, 316, 202, 0, 376,
	377, 385, 386, 124, 125, 337, 338, 0, 389, 410,
	422, 0, 0, 393, 395, 443, 397, 0, 0, 399,
	0, 401, 0, 403, 0, 405, 0, 407, 409, 411,
	423, 413, 673, 415, 0, 417, 421, 0, 426, 0,
	428, 429, 430, 0, 0, 436, 0, 0, 383, 384,
	109, 771, -2, 0, 642, 692, 693, 0, 0, 0,
	0, 676, 677, 0, 0, 0, 638, 639, 283, 0,
	286, 0, 0, 0, 0, 1082, 1083, 1084, 1085, 1086,
	1087, 1090, 1091, 1088, 1089, 1092, 1093, 0, 0, 0,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 0,
	0, 1095, 1096, 1097, 0, 0, 1099, 0, 1101, 0,
	0, 0, 0, 0, 0, 1161, 0, 0, 1098, 882,
	883, 884, 916, 917, 0, 980, 1158, 1151, 982, 0,
	0, -2, 1103, 0, 0, 985, 990, 991, 0, 0,
	1146, -2, 0, 1198, 0, 874, 1049, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1126, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 824, 842,
	853, 850, 849, 826, 0, 825, 823, 0, 827, 0,
	0, 0, 563, -2, 565, 0, 577, 0, 666, 0,
	0, 715, 718, 1167, 1171, 1172, 718, 0, 1164, 0,
	0, 0, 0, 764, 764, 764, 762, 738, 0, 744,
	0, 0, 768, 756, 0, -2, 735, 0, 0, 769,
	0, 78, 548, 88, 0, 548, 548, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 758, 1178, 0, 1152, 1153, 1222, 1223, 1224, 1225,
	1226, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493,
	1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
	1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523,
	1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
	1534, 1535, 139, 0, 0, 1173, 1157, 451, 0, 0,
	515, 0, 670, 0, 0, 0, 1407, 523, 1211, 598,
	0, 777, 0, 612, 0, 0, 774, 0, 184, 0,
	107, 108, 0, 187, 0, 190, 0, 0, 193, 0,
	0, 0, 1103, 673, 0, 0, 268, 0, 0, 673,
	0, 1105, 785, 786, 787, 788, 789, 874, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 836, 0, 811, 811, 811, 828, 829, 837,
	838, 843, 844, 855, 856, 858, 860, 854, 854, 854,
	851, 852, 758, 126, 0, 0, 0, 0, -2, 308,
	0, 585, 0, 590, 328, 329, 330, 592, 593, 312,
	331, 332, 333, 334, 335, 336, 0, 510, 0, 512,
	1204, 0, 309, 321, 310, 313, 0, 203, 387, 388,
	390, 391, 392, 396, 0, 440, 398, 400, 402, 404,
	406, 414, 418, 673, 424, 427, 431, 432, 433, 434,
	0, 0, 0, 513, 0, 645, 690, 691, 696, 700,
	701, 704, 707, 708, 698, 877, 659, 660, 661, 684,
	685, 535, 0, 0, 285, 878, 781, 782, 830, 831,
	832, 833, 834, 879, 880, 0, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, -2, -2, -2, -2,
	-2, -2, -2, -2, 903, 904, 905, 906, 907, 908,
	909, 910, -2, -2, -2, 914, 915, -2, 1100, 1102,
	0, 1161, 0, -2, 0, -2, -2, -2, -2, 928,
	0, 930, 933, 935, 937, 0, 0, 0, 0, 1160,
	947, 1138, 0, 0, 1079, 1080, 1081, 932, 0, 0,
	1159, 1150, 0, 0, -2, 987, 0, 0, 0, 1109,
	1110, 1145, 1141, 0, 994, 683, 0, 0, 0, 0,
	1001, 0, 1207, 861, 862, 863, 864, 865, 866, 875,
	1057, 0, 0, 0, 1008, 1009, 1011, 1012, 1014, 1015,
	1018, 1019, 0, 0, 0, 1025, 0, 1113, -2, -2,
	-2, -2, -2, -2, -2, 0, 1027, 0, 1029, 1103,
	1123, 0, 0, 950, 0, 0, 0, 0, 1426, 0,
	1032, 1103, 1131, 0, 0, 0, 0, 0, 1103, 0,
	1137, 0, 0, 0, 0, 0, 1043, 0, 1045, 0,
	0, 0, 0, 0, 0, 576, 668, 0, 0, 777,
	0, 0, 0, 1170, 777, 0, 1166, 0, 0, 0,
	0, 0, 759, 763, 760, 761, 0, 0, 744, 756,
	726, 0, 0, 0, 733, 734, 755, 0, 754, 743,
	-2, 0, 0, 0, 0, 0, 547, 90, 1407, 0,
	111, 0, 0, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 83, 0, 0, 0, 1181, 129, 0, 1188, 0,
	0, 0, 0, 0, 450, 1187, 452, 454, 455, 456,
	457, 1212, 0, 1212, 0, 0, 0, 0, 0, 0,
	600, 606, 0, 695, 0, 624, 614, 0, 0, 0,
	624, 628, 629, 631, 632, 0, 0, 775, 200, 109,
	109, 1176, 109, 109, 197, 251, 0, 207, 243, 0,
	0, 0, 245, 247, 0, 778, 780, 0, 790, 0,
	138, 0, 0, 0, 0, 301, 0, 584, 591, 0,
	325, 0, 327, 511, 1206, 1205, 0, 204, 442, 276,
	416, 419, 437, 438, 439, 772, 0, 702, 0, 0,
	699, 705, 706, 0, 687, 533, 534, 0, 0, 0,
	-2, -2, 0, 0, 0, 948, -2, 929, 931, 934,
	936, 938, 0, 0, 0, 0, 0, 0, 0, 949,
	0, 0, 1148, 1151, -2, 1104, 1107, 1108, 0, 0,
	1142, 0, 0, 0, 0, 682, 683, 683, 683, 1000,
	0, 0, 0, 0, 0, 0, 1002, 0, 0, 0,
	0, 0, 0, 1024, 0, 1026, 1028, 0, 0, 1030,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 954, 955, 0, 0, 1031, 1129,
	1130, 0, 0, 0, 0, 0, 0, 1037, 0, 1136,
	0, 0, 0, 1041, 1042, 1044, 0, 809, 0, 835,
	857, 859, 847, 673, 1189, 710, 1168, 758, 717, 719,
	1169, 710, 1165, 746, 0, 748, 0, 0, 0, 750,
	0, 739, 0, 741, 756, 731, 0, 0, 724, 0,
	723, 744, 752, 0, 0, 770, 89, 537, 0, 0,
	0, 92, 1407, 100, 0, 465, 0, 0, 0, 0,
	0, 550, 101, 1407, 109, 1407, 109, 102, 79, 548,
	80, 0, 543, 0, 536, 81, 0, 545, 0, 138,
	0, 0, 140, 0, 1174, 459, 492, 0, 0, 1212,
	0, 448, 493, 517, 519, 0, 0, 602, 606, 0,
	605, 671, 624, 694, 776, 607, 624, 0, 0, 0,
	616, 613, 610, 777, 0, 0, 0, 0, 185, 188,
	191, 194, 1104, 258, 0, 0, 1106, 0, 783, 0,
	0, 118, 0, 127, 260, 298, 299, 304, 323, 324,
	326, 322, 0, 0, 0, 686, 535, 0, 881, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 1139, 0,
	1074, 0, 0, 1150, -2, 1111, 1140, 1144, 0, 995,
	0, 0, 0, 0, 1200, 867, 868, 869, 870, 871,
	872, 873, 0, 1055, 1056, 1060, 0, 0, 1006, 0,
	0, 1112, 1122, 1124, 951, 952, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, -2, -2, -2, 969,
	970, 971, -2, -2, -2, 0, 0, 0, 1125, 0,
	0, 1077, 1127, 1128, 1133, 1134, 0, 1034, 1035, 1036,
	1135, 0, 0, 0, 841, 0, 0, 712, 0, 716,
	0, 712, 747, 0, 766, 749, 729, 740, 0, 737,
	727, 0, 728, 0, 756, 0, 0, 736, 0, 0,
	0, 0, 110, 463, 482, 0, 0, 526, 532, 532,
	0, 1004, 1005, 0, 0, 0, 94, 0, 0, 0,
	0, 98, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 141, 446, 0, 453, 0, 0,
	0, 451, 0, 0, 0, 604, 606, 0, 597, 598,
	165, 608, 622, 623, 621, 0, 624, 630, 627, 633,
	0, 0, 120, 0, 0, 784, 791, 136, 1299, 134,
	131, 133, 277, 697, 703, 688, 535, 0, 0, -2,
	0, 941, -2, -2, 1073, 1104, 1149, 1143, 1197, 683,
	996, 998, 999, 876, 1062, 1059, 0, 1046, 1022, 1023,
	1121, 0, 0, 0, 0, 1104, 1076, 1033, 0, 1039,
	1040, 810, 669, 1051, 0, 0, 720, 1051, 0, 744,
	742, 725, 721, 0, 732, 0, 753, 539, 541, 91,
	0, 464, 0, 467, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 484, 491, 0, 535, 1192, 0,
	535, 0, 0, 0, 0, 0, 106, 0, 0, 549,
	0, 109, 109, 538, 0, 0, 0, 544, 0, 546,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	594, 606, 0, 599, 600, 0, 0, 0, 615, 625,
	0, 0, 0, 779, 0, 0, 0, 0, 689, -2,
	-2, 942, 1075, 0, 683, 0, 1048, -2, 0, 0,
	0, 1078, 0, 656, 0, 711, 709, 657, 765, 756,
	0, 751, 93, 0, 468, 469, 1212, 0, 472, 475,
	0, 477, 1214, 459, 0, 488, 489, 527, 528, 531,
	529, 532, 683, 486, 0, 95, 96, 105, 113, 97,
	103, 0, 0, 0, 0, 757, 0, 0, 0, 491,
	0, 481, 459, 449, 491, 0, 0, 601, 602, 0,
	0, 0, 634, 635, 0, 0, 0, 135, 0, 130,
	132, 997, 1065, 0, -2, 0, 977, 1038, 1050, 1052,
	0, 730, 722, 466, 470, 0, 0, 497, 0, 485,
	0, 535, 0, 0, 115, 0, 540, 542, 0, 0,
	0, 0, 459, 491, 447, 459, 0, 603, 604, 0,
	618, 777, 620, 0, 0, 137, 0, 0, 0, 1061,
	978, 0, 0, 0, 476, 502, 0, 0, 0, 530,
	995, 493, 99, 0, 112, 0, 0, 683, 0, 479,
	459, 521, 0, 595, 0, 619, 138, 138, 1058, 1063,
	1066, -2, 1367, 1247, 0, 1064, 1053, 1054, 0, 478,
	498, 499, 0, 494, 495, 496, 1213, 490, 497, 114,
	85, 87, 0, 0, 480, 491, 777, 121, 122, 0,
	1068, 1069, 1070, 1071, 1072, 471, 500, 0, 501, 0,
	0, 0, 502, 0, 462, 459, 617, 0, 503, 0,
	506, 507, 0, 504, 487, 458, 460, 461, 522, 1067,
	505, 508, 509,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 356, 3, 362, 357, 3,
	367, 368, 360, 358, 372, 359, 369, 361, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 376, 371,
	346, 348, 347, 350, 373, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 365, 3, 366, 363, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 374, 355, 375, 353,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 349, 57689, 351,
	57690, 352, 57691, 354, 57692, 364, 57693, 370, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:859
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:865
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:871
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:880
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:882
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:983
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1003
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1029
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1035
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1101
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1124
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1196
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1197
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1200
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1201
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1228
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1254
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1361
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1394
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1405
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			return helpWith(sqllex, "DELETE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "DROP")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1555
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			return helpWith(sqllex, "INSERT")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1643
		{ /* SKIP DOC */
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "GRANT")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return helpWith(sqllex, "RESET")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1864
		{
			return helpWith(sqllex, "RESET")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1875
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1887
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1888
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{ /* SKIP DOC */
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1891
		{ /* SKIP DOC */
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1892
		{
			return unimplemented(sqllex, "set local")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			return unimplemented(sqllex, "set from current")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1985
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = Low
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = Normal
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = High
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.str = "client_encoding"
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2164
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2169
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2223
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2336
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2358
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2369
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2384
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2388
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2392
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2398
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2426
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2529
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = DropDefault
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2744
		{
			return unimplemented(sqllex, "match full")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			return unimplemented(sqllex, "match partial")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			return unimplemented(sqllex, "match simple")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2747
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2754
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2755
		{
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2757
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			return unimplemented(sqllex, "no action")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2769
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			return unimplemented(sqllex, "action set null")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			return unimplemented(sqllex, "action set default")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2797
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2812
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2833
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2873
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = true
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = false
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2903
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2904
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2907
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2908
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = Ascending
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = Descending
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2948
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2950
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = true
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = false
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2983
		{
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2984
		{
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3006
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3017
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3021
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3046
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3082
		{
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3083
		{
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.str = ""
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.str = ""
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3129
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3144
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = ReadOnly
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = ReadWrite
		}
	case 594:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.str = ""
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.str = ""
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.str = ""
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.str = ""
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3251
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3252
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			return helpWith(sqllex, "INSERT")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3293
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3335
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3347
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 625:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3370
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3374
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3375
		{
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3504
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3539
		{
			return helpWith(sqllex, "SELECT")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3540
		{
			return helpWith(sqllex, "VALUES")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3541
		{
			return helpWith(sqllex, "TABLE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3587
		{
			return helpWith(sqllex, "SELECT")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3631
		{
			return helpWith(sqllex, "TABLE")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3642
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3643
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3644
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3648
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3651
		{
			return unimplemented(sqllex, "cte")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3655
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3658
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3659
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3663
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = true
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = false
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = false
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = true
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3686
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3687
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3734
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3758
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3810
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			return helpWith(sqllex, "VALUES")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3875
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &From{}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3912
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3930
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3957
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3994
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = nil
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4060
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = true
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = false
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.str = astFullJoin
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.str = astLeftJoin
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.str = astRightJoin
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.str = astInnerJoin
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4177
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4178
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4264
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4278
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4286
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4310
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4321
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4371
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4402
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4411
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = nil
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4476
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4572
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4604
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4644
		{
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = year
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = month
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = day
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = hour
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = minute
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = month
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = hour
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = minute
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = minute
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = nil
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = second
		}
	case 876:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4739
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4774
		{
			return unimplemented(sqllex, "at tz")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4982
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5048
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5221
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5274
		{
			return unimplemented(sqllex, "variadic")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5275
		{
			return unimplemented(sqllex, "variadic")
		}
	case 998:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5288
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5299
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5315
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5316
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5320
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5329
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5338
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5347
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5348
		{
			return unimplemented(sqllex, "current role")
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5357
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5378
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5383
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5388
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5397
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5398
		{
			return unimplemented(sqllex, "treat")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5435
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5437
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5440
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5444
		{
			return unimplemented(sqllex, "within group")
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5445
		{
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5453
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5480
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5522
		{
			sqlVAL.str = ""
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5542
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5543
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5544
		{
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5548
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5554
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5555
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5556
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5557
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5558
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5569
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5573
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5593
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = Any
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = Some
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = All
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = Plus
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5613
		{
			sqlVAL.union.val = Minus
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = Mult
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = Div
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5617
		{
			sqlVAL.union.val = Mod
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = Bitand
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = Bitor
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = Pow
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = Bitxor
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = LT
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = GT
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = EQ
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = LE
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = GE
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = NE
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5631
		{
			sqlVAL.union.val = Like
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5632
		{
			sqlVAL.union.val = NotLike
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = ILike
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = NotILike
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5645
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5665
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5736
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5740
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5757
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5761
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5777
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5783
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5789
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5795
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5803
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5831
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5835
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5841
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5847
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5851
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5875
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5893
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5897
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5903
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5922
		{
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5923
		{
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5967
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5976
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5980
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5984
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6041
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6076
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6085
		{
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6095
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6099
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6110
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6114
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6121
		{
			return unimplemented(sqllex, "func const")
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6123
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6127
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6130
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6132
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6136
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6140
		{
			sqlVAL.union.val = DNull
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6147
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6151
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6157
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6192
		{
			sqlVAL.str = ""
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6198
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6202
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
