// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT2VECTOR = 57480
const INT8 = 57481
const INT64 = 57482
const INTEGER = 57483
const INTERSECT = 57484
const INTERVAL = 57485
const INTO = 57486
const IS = 57487
const ISOLATION = 57488
const JOIN = 57489
const KEY = 57490
const KEYS = 57491
const LATERAL = 57492
const LC_CTYPE = 57493
const LC_COLLATE = 57494
const LEADING = 57495
const LEAST = 57496
const LEFT = 57497
const LEVEL = 57498
const LIKE = 57499
const LIMIT = 57500
const LOCAL = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const LOW = 57504
const LSHIFT = 57505
const MATCH = 57506
const MINUTE = 57507
const MONTH = 57508
const NAN = 57509
const NAME = 57510
const NAMES = 57511
const NATURAL = 57512
const NEXT = 57513
const NO = 57514
const NO_INDEX_JOIN = 57515
const NORMAL = 57516
const NOT = 57517
const NOTHING = 57518
const NULL = 57519
const NULLIF = 57520
const NULLS = 57521
const NUMERIC = 57522
const OF = 57523
const OFF = 57524
const OFFSET = 57525
const OID = 57526
const ON = 57527
const ONLY = 57528
const OPTIONS = 57529
const OR = 57530
const ORDER = 57531
const ORDINALITY = 57532
const OUT = 57533
const OUTER = 57534
const OVER = 57535
const OVERLAPS = 57536
const OVERLAY = 57537
const PARENT = 57538
const PARTIAL = 57539
const PARTITION = 57540
const PASSWORD = 57541
const PLACING = 57542
const POSITION = 57543
const PRECEDING = 57544
const PRECISION = 57545
const PREPARE = 57546
const PRIMARY = 57547
const PRIORITY = 57548
const RANGE = 57549
const READ = 57550
const REAL = 57551
const RECURSIVE = 57552
const REF = 57553
const REFERENCES = 57554
const REGCLASS = 57555
const REGPROC = 57556
const REGPROCEDURE = 57557
const REGNAMESPACE = 57558
const REGTYPE = 57559
const RENAME = 57560
const REPEATABLE = 57561
const RELEASE = 57562
const RESTORE = 57563
const RESTRICT = 57564
const RETURNING = 57565
const REVOKE = 57566
const RIGHT = 57567
const ROLLBACK = 57568
const ROLLUP = 57569
const ROW = 57570
const ROWS = 57571
const RSHIFT = 57572
const STATUS = 57573
const SAVEPOINT = 57574
const SEARCH = 57575
const SECOND = 57576
const SELECT = 57577
const SERIAL = 57578
const SERIALIZABLE = 57579
const SESSION = 57580
const SESSION_USER = 57581
const SET = 57582
const SHOW = 57583
const SIMILAR = 57584
const SIMPLE = 57585
const SMALLINT = 57586
const SMALLSERIAL = 57587
const SNAPSHOT = 57588
const SOME = 57589
const SPLIT = 57590
const SQL = 57591
const START = 57592
const STDIN = 57593
const STRICT = 57594
const STRING = 57595
const STORING = 57596
const SUBSTRING = 57597
const SYMMETRIC = 57598
const SYSTEM = 57599
const TABLE = 57600
const TABLES = 57601
const TEMPLATE = 57602
const TESTING_RANGES = 57603
const TESTING_RELOCATE = 57604
const TEXT = 57605
const THEN = 57606
const TIME = 57607
const TIMESTAMP = 57608
const TIMESTAMPTZ = 57609
const TO = 57610
const TRAILING = 57611
const TRANSACTION = 57612
const TREAT = 57613
const TRIM = 57614
const TRUE = 57615
const TRUNCATE = 57616
const TYPE = 57617
const UNBOUNDED = 57618
const UNCOMMITTED = 57619
const UNION = 57620
const UNIQUE = 57621
const UNKNOWN = 57622
const UPDATE = 57623
const UPSERT = 57624
const USER = 57625
const USERS = 57626
const USING = 57627
const VALID = 57628
const VALIDATE = 57629
const VALUE = 57630
const VALUES = 57631
const VARCHAR = 57632
const VARIADIC = 57633
const VIEW = 57634
const VARYING = 57635
const WHEN = 57636
const WHERE = 57637
const WINDOW = 57638
const WITH = 57639
const WITHIN = 57640
const WITHOUT = 57641
const YEAR = 57642
const ZONE = 57643
const NOT_LA = 57644
const WITH_LA = 57645
const AS_LA = 57646
const POSTFIXOP = 57647
const UMINUS = 57648

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5420

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 29,
	325, 29,
	-2, 417,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 50,
	98, 400,
	142, 400,
	158, 400,
	183, 400,
	189, 400,
	278, 400,
	-2, 390,
	-1, 63,
	98, 399,
	142, 399,
	158, 399,
	183, 399,
	189, 399,
	278, 399,
	-2, 393,
	-1, 72,
	1, 29,
	325, 29,
	-2, 417,
	-1, 425,
	1, 195,
	325, 195,
	-2, 982,
	-1, 462,
	158, 427,
	183, 427,
	-2, 396,
	-1, 465,
	158, 426,
	183, 426,
	-2, 394,
	-1, 598,
	158, 426,
	183, 426,
	-2, 397,
	-1, 657,
	322, 916,
	-2, 909,
	-1, 658,
	322, 917,
	-2, 910,
	-1, 664,
	5, 585,
	322, 585,
	-2, 1087,
	-1, 688,
	5, 546,
	-2, 1061,
	-1, 689,
	5, 579,
	322, 579,
	-2, 1063,
	-1, 690,
	5, 554,
	-2, 1064,
	-1, 691,
	5, 553,
	-2, 1065,
	-1, 692,
	5, 579,
	322, 579,
	-2, 1068,
	-1, 693,
	5, 579,
	322, 579,
	-2, 1069,
	-1, 694,
	5, 580,
	-2, 1072,
	-1, 695,
	5, 540,
	-2, 1073,
	-1, 696,
	5, 540,
	-2, 1074,
	-1, 697,
	5, 561,
	-2, 1078,
	-1, 698,
	5, 541,
	-2, 1083,
	-1, 699,
	5, 542,
	-2, 1084,
	-1, 700,
	5, 543,
	-2, 1085,
	-1, 701,
	5, 544,
	-2, 1086,
	-1, 702,
	5, 540,
	-2, 1091,
	-1, 703,
	5, 547,
	-2, 1096,
	-1, 704,
	5, 545,
	-2, 1099,
	-1, 705,
	5, 577,
	322, 577,
	-2, 1101,
	-1, 706,
	5, 581,
	-2, 1104,
	-1, 707,
	5, 583,
	-2, 1105,
	-1, 708,
	5, 576,
	322, 576,
	-2, 1109,
	-1, 972,
	98, 400,
	142, 400,
	158, 400,
	183, 400,
	189, 400,
	278, 400,
	-2, 704,
	-1, 981,
	322, 893,
	-2, 881,
	-1, 1193,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 620,
	-1, 1194,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 621,
	-1, 1195,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 622,
	-1, 1199,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 626,
	-1, 1200,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 627,
	-1, 1201,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 628,
	-1, 1204,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	302, 0,
	-2, 633,
	-1, 1210,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	302, 0,
	-2, 635,
	-1, 1213,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	302, 0,
	-2, 640,
	-1, 1214,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	302, 0,
	-2, 641,
	-1, 1215,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	302, 0,
	-2, 642,
	-1, 1242,
	194, 775,
	-2, 778,
	-1, 1271,
	115, 815,
	322, 916,
	-2, 909,
	-1, 1272,
	115, 816,
	-2, 1057,
	-1, 1273,
	115, 817,
	-2, 981,
	-1, 1274,
	115, 818,
	-2, 950,
	-1, 1275,
	115, 819,
	-2, 965,
	-1, 1276,
	115, 820,
	-2, 980,
	-1, 1277,
	115, 821,
	-2, 1023,
	-1, 1431,
	98, 400,
	142, 400,
	158, 400,
	183, 400,
	189, 400,
	278, 400,
	-2, 476,
	-1, 1435,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	302, 0,
	-2, 634,
	-1, 1436,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	302, 0,
	-2, 636,
	-1, 1441,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	302, 0,
	-2, 637,
	-1, 1459,
	194, 774,
	-2, 777,
	-1, 1646,
	1, 477,
	68, 477,
	98, 477,
	116, 477,
	120, 477,
	122, 477,
	135, 477,
	142, 477,
	147, 477,
	155, 477,
	158, 477,
	170, 477,
	183, 477,
	185, 477,
	189, 477,
	223, 477,
	225, 477,
	278, 477,
	285, 477,
	295, 477,
	296, 477,
	304, 477,
	321, 477,
	323, 477,
	325, 477,
	326, 477,
	-2, 476,
	-1, 1648,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	302, 0,
	-2, 638,
	-1, 1653,
	145, 0,
	-2, 654,
	-1, 1663,
	194, 776,
	-2, 779,
	-1, 1697,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 681,
	-1, 1698,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 682,
	-1, 1699,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 683,
	-1, 1703,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 687,
	-1, 1704,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 688,
	-1, 1705,
	13, 0,
	14, 0,
	15, 0,
	305, 0,
	306, 0,
	307, 0,
	-2, 689,
	-1, 1823,
	145, 0,
	-2, 655,
	-1, 1826,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	302, 0,
	-2, 658,
	-1, 1827,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	302, 0,
	-2, 660,
	-1, 1930,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	302, 0,
	-2, 659,
	-1, 1931,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	302, 0,
	-2, 661,
	-1, 1938,
	145, 0,
	-2, 690,
	-1, 1992,
	145, 0,
	-2, 691,
	-1, 2053,
	36, 0,
	129, 0,
	157, 0,
	242, 0,
	302, 0,
	-2, 1060,
}

const sqlPrivate = 57344

const sqlLast = 27562

var sqlAct = [...]int{

	85, 2052, 2032, 1603, 2077, 1998, 2033, 2051, 1641, 2034,
	1867, 890, 1072, 1642, 466, 1157, 1891, 648, 782, 1674,
	473, 62, 1911, 1814, 1789, 1429, 1748, 656, 655, 280,
	1734, 1064, 295, 1426, 1613, 1552, 896, 1800, 282, 20,
	1407, 1553, 1405, 297, 634, 511, 487, 1520, 1136, 529,
	49, 1794, 783, 1131, 1619, 1165, 1132, 426, 1519, 1470,
	745, 751, 62, 1150, 766, 1240, 977, 1172, 1628, 1135,
	724, 892, 1356, 721, 1073, 743, 1350, 1035, 1412, 1164,
	1250, 1104, 1026, 617, 628, 1297, 1170, 1088, 1227, 651,
	1224, 843, 913, 62, 1417, 755, 1056, 752, 1268, 1124,
	968, 618, 1097, 726, 287, 28, 286, 16, 627, 288,
	8, 20, 1066, 1139, 530, 1749, 471, 476, 918, 601,
	600, 413, 602, 585, 465, 523, 63, 524, 521, 584,
	423, 1300, 845, 64, 650, 841, 759, 502, 404, 81,
	77, 517, 1007, 474, 605, 583, 1923, 416, 1458, 1924,
	768, 768, 1011, 1490, 1491, 1167, 1508, 1509, 1510, 1101,
	1065, 2068, 2047, 768, 748, 1747, 470, 921, 922, 1822,
	2040, 2030, 268, 748, 1094, 2025, 470, 28, 748, 16,
	2021, 453, 8, 748, 1994, 1988, 1427, 1094, 748, 463,
	924, 1367, 1970, 1368, 1966, 1747, 462, 748, 1069, 738,
	493, 1057, 1102, 1961, 1505, 1932, 1960, 1921, 1094, 920,
	777, 478, 923, 1107, 921, 922, 29, 1918, 1905, 1902,
	1919, 1747, 748, 1415, 1976, 1060, 484, 30, 54, 490,
	1900, 1878, 497, 1747, 748, 1877, 1849, 924, 1747, 1107,
	1415, 1828, 1103, 1100, 1107, 1825, 1817, 68, 1094, 1107,
	1462, 1746, 56, 1496, 1747, 1463, 919, 1710, 32, 923,
	61, 1657, 1589, 1584, 1107, 1063, 1063, 929, 1537, 1535,
	70, 1538, 1107, 1534, 921, 922, 1107, 1533, 1461, 45,
	1107, 1459, 533, 1107, 1107, 1660, 40, 1394, 1511, 57,
	748, 1392, 1161, 44, 41, 748, 1111, 924, 1024, 1107,
	1057, 71, 1106, 1107, 1093, 1107, 1506, 1094, 643, 66,
	46, 1105, 1395, 1469, 929, 67, 42, 1244, 1062, 923,
	939, 1063, 1060, 1156, 1023, 769, 769, 1022, 776, 1119,
	613, 777, 471, 885, 65, 884, 526, 526, 769, 82,
	82, 270, 531, 835, 834, 748, 500, 546, 68, 483,
	72, 1750, 396, 397, 398, 506, 1808, 415, 1430, 867,
	427, 566, 2066, 2050, 2039, 2003, 1989, 1903, 415, 1854,
	1850, 70, 1842, 1507, 929, 477, 477, 1099, 612, 270,
	1841, 1840, 270, 270, 496, 270, 510, 940, 82, 503,
	1836, 1835, 1834, 1780, 1774, 1725, 1720, 43, 1719, 1098,
	1397, 1236, 71, 1718, 1367, 1668, 1646, 527, 1618, 1593,
	66, 1542, 1539, 59, 31, 1527, 67, 47, 1518, 58,
	919, 1489, 1486, 1485, 68, 48, 1591, 939, 68, 772,
	767, 518, 1483, 51, 53, 1068, 985, 1475, 1474, 508,
	1393, 1314, 888, 55, 1265, 1490, 1491, 70, 1502, 1503,
	1504, 70, 1501, 1498, 1499, 1500, 1492, 1493, 1494, 1495,
	1497, 921, 922, 1264, 612, 611, 895, 60, 717, 933,
	925, 926, 927, 928, 930, 1428, 950, 599, 71, 2049,
	658, 658, 71, 978, 924, 65, 1676, 2013, 1973, 658,
	66, 1959, 1951, 1949, 940, 1237, 67, 1940, 1927, 1914,
	533, 1898, 1864, 1847, 921, 922, 923, 297, 533, 1490,
	1491, 65, 1819, 1783, 591, 65, 594, 925, 926, 927,
	928, 930, 598, 950, 1771, 1753, 560, 1652, 1633, 1611,
	716, 1773, 1609, 1608, 1606, 1561, 1560, 1517, 1479, 749,
	1478, 1455, 1450, 658, 555, 1496, 1229, 1383, 1328, 923,
	554, 1327, 1307, 658, 1263, 1160, 757, 1012, 1015, 533,
	533, 1019, 1005, 1004, 715, 549, 551, 297, 1003, 1002,
	1001, 1000, 999, 998, 588, 997, 996, 925, 926, 927,
	928, 930, 995, 950, 270, 519, 270, 427, 427, 771,
	1328, 994, 774, 586, 993, 992, 991, 742, 1506, 868,
	463, 990, 989, 982, 658, 658, 894, 462, 971, 1496,
	590, 658, 65, 608, 609, 889, 488, 616, 2023, 614,
	506, 552, 542, 658, 658, 658, 658, 658, 540, 1922,
	789, 1830, 1809, 658, 850, 850, 1805, 1779, 1778, 978,
	747, 1377, 1376, 658, 717, 969, 509, 921, 922, 732,
	1963, 866, 1925, 761, 887, 1408, 758, 1777, 1369, 1057,
	1430, 1541, 1017, 733, 780, 1507, 1018, 1540, 899, 1434,
	518, 576, 1806, 917, 827, 561, 987, 893, 1351, 558,
	1795, 1065, 711, 471, 833, 830, 829, 1677, 831, 1251,
	1008, 580, 1363, 778, 863, 856, 862, 2006, 869, 1548,
	1965, 873, 874, 875, 876, 877, 1466, 2063, 543, 886,
	872, 880, 881, 1761, 2064, 452, 717, 451, 559, 727,
	901, 728, 903, 548, 902, 581, 427, 427, 1490, 1491,
	1110, 915, 463, 446, 447, 463, 463, 1886, 469, 909,
	1590, 1885, 910, 911, 1501, 1498, 1499, 1500, 1492, 1493,
	1494, 1495, 1497, 984, 1389, 1574, 1036, 1573, 1545, 981,
	727, 415, 728, 270, 974, 427, 593, 427, 1544, 596,
	950, 727, 1047, 728, 1049, 1437, 1029, 1382, 533, 1381,
	1380, 1379, 468, 1211, 477, 1108, 1054, 1053, 1050, 587,
	499, 729, 710, 1770, 272, 270, 1311, 62, 1067, 1310,
	1067, 1182, 62, 1151, 455, 1964, 1085, 276, 1577, 82,
	1579, 1040, 1042, 950, 1494, 1495, 1497, 1039, 270, 1869,
	1089, 1353, 736, 270, 270, 270, 734, 763, 1496, 470,
	1082, 526, 729, 526, 1020, 1009, 1010, 883, 531, 1226,
	735, 1032, 273, 729, 1028, 1028, 270, 270, 1059, 1013,
	1572, 1027, 734, 753, 82, 1016, 82, 2011, 538, 762,
	277, 1105, 2074, 1051, 2085, 1226, 735, 1361, 297, 1357,
	75, 1595, 1233, 1346, 1071, 1343, 427, 1231, 82, 427,
	427, 427, 427, 427, 878, 768, 1091, 1045, 1090, 427,
	427, 1092, 1086, 1080, 1563, 2036, 415, 1055, 460, 1081,
	1123, 1083, 2027, 1084, 898, 1357, 1251, 2063, 1038, 861,
	860, 1596, 854, 851, 1154, 1155, 1339, 740, 467, 739,
	658, 1954, 477, 74, 2028, 503, 658, 658, 658, 658,
	658, 658, 658, 658, 658, 658, 658, 658, 658, 658,
	658, 658, 658, 658, 658, 658, 658, 658, 1390, 658,
	1162, 658, 658, 658, 658, 1598, 950, 725, 1112, 297,
	557, 1006, 1013, 882, 1016, 1113, 1010, 1009, 1146, 577,
	658, 1388, 658, 1936, 1173, 1180, 2037, 1899, 556, 658,
	1105, 1181, 1037, 658, 537, 730, 278, 275, 274, 966,
	864, 1234, 658, 658, 658, 658, 658, 658, 658, 658,
	658, 658, 658, 658, 658, 658, 658, 1870, 1128, 1127,
	1742, 789, 789, 1477, 621, 1129, 1101, 1490, 1491, 1629,
	279, 1163, 2038, 658, 1105, 1645, 730, 757, 270, 578,
	2073, 1492, 1493, 1494, 1495, 1497, 1033, 730, 557, 2086,
	270, 1564, 1743, 470, 1130, 1248, 270, 1052, 821, 73,
	270, 1578, 1313, 2080, 579, 1570, 1025, 1058, 2035, 1102,
	769, 533, 2062, 1439, 865, 2060, 658, 1208, 1238, 1788,
	1148, 270, 569, 1078, 1079, 1235, 270, 456, 547, 270,
	1321, 427, 427, 76, 427, 1340, 1325, 1341, 1259, 1225,
	663, 545, 1283, 1278, 604, 1349, 1315, 1232, 461, 1103,
	1100, 1880, 457, 1241, 1115, 603, 1879, 1862, 658, 1706,
	1245, 458, 1420, 2091, 1253, 1117, 1338, 1496, 1946, 471,
	533, 2072, 1845, 789, 405, 1270, 1270, 1281, 1316, 1292,
	604, 1423, 1738, 1118, 1739, 1304, 1305, 1306, 1547, 1359,
	1324, 1320, 1116, 1627, 1365, 410, 1371, 1375, 1372, 1373,
	406, 1421, 1757, 1149, 900, 891, 1760, 658, 1352, 1594,
	1206, 1209, 1741, 1759, 1362, 1999, 603, 879, 1105, 1744,
	1506, 836, 1614, 1370, 407, 1815, 1790, 1396, 2078, 1398,
	1125, 62, 1399, 1863, 789, 1330, 1402, 1325, 1205, 1329,
	1803, 270, 270, 409, 1707, 850, 1624, 270, 1134, 1089,
	1708, 840, 1400, 1623, 503, 2090, 658, 658, 1385, 1386,
	556, 1391, 658, 1846, 1416, 713, 516, 712, 855, 852,
	660, 1422, 471, 815, 789, 658, 658, 1433, 2079, 270,
	658, 658, 427, 515, 1099, 1816, 1740, 1507, 658, 838,
	1387, 468, 1756, 1374, 595, 658, 2081, 1604, 1411, 1410,
	1781, 839, 658, 1758, 1860, 658, 658, 658, 1432, 1348,
	402, 1414, 1420, 1620, 658, 1091, 2031, 1090, 1468, 1939,
	1092, 1413, 1262, 1207, 1844, 1521, 1861, 1651, 1576, 1484,
	471, 1423, 1449, 1354, 1109, 1061, 658, 658, 658, 658,
	582, 575, 408, 1418, 574, 658, 658, 658, 1440, 1438,
	658, 1421, 573, 572, 571, 405, 570, 567, 514, 507,
	1522, 988, 871, 1261, 1996, 1454, 1419, 1498, 1499, 1500,
	1492, 1493, 1494, 1495, 1497, 1424, 410, 1731, 658, 658,
	1465, 406, 1568, 814, 270, 1318, 1319, 1665, 411, 471,
	1033, 1566, 1546, 1326, 1404, 1152, 1559, 1144, 1087, 1331,
	1332, 1334, 1336, 1337, 775, 407, 1558, 1557, 658, 1342,
	773, 1453, 1344, 270, 770, 765, 741, 737, 731, 1456,
	658, 1422, 270, 1406, 409, 1893, 606, 270, 1158, 1364,
	1524, 1525, 1526, 2064, 858, 513, 270, 1472, 1473, 512,
	481, 1895, 1543, 292, 24, 563, 270, 78, 1585, 1567,
	1044, 1569, 1583, 1956, 1550, 291, 23, 1028, 533, 289,
	22, 3, 1610, 1043, 1750, 1028, 1991, 1125, 1125, 1425,
	1516, 1041, 1571, 1621, 1575, 610, 1048, 1046, 297, 658,
	1977, 1529, 1786, 1582, 1607, 658, 1159, 1147, 658, 658,
	658, 1580, 1586, 1588, 607, 1338, 62, 1615, 1587, 898,
	658, 898, 1636, 427, 1143, 1634, 658, 270, 482, 658,
	1637, 1409, 1597, 1599, 1600, 1605, 24, 658, 504, 1654,
	658, 1622, 505, 408, 1625, 564, 828, 501, 23, 633,
	270, 1617, 22, 1616, 489, 658, 1670, 1671, 1672, 658,
	1630, 1631, 1070, 658, 658, 658, 658, 658, 658, 658,
	658, 658, 658, 658, 658, 658, 658, 658, 658, 658,
	658, 658, 269, 658, 1626, 401, 445, 916, 658, 411,
	290, 11, 658, 658, 1661, 832, 293, 10, 781, 658,
	1664, 658, 658, 658, 1173, 1681, 284, 9, 1096, 1678,
	789, 283, 7, 1173, 1686, 2088, 1683, 285, 4, 1680,
	485, 2089, 2024, 492, 495, 1980, 485, 658, 1685, 1812,
	1640, 658, 1726, 412, 1490, 1491, 1601, 1713, 921, 922,
	1592, 789, 789, 448, 449, 1536, 1717, 533, 1559, 1714,
	789, 789, 1751, 1121, 1120, 1378, 1312, 1658, 1558, 1557,
	1309, 1308, 1258, 11, 1122, 1730, 1754, 975, 1727, 10,
	1832, 2010, 1892, 1673, 815, 815, 1401, 658, 985, 9,
	983, 454, 658, 789, 7, 1868, 533, 403, 1755, 908,
	4, 658, 658, 1775, 1559, 870, 568, 1807, 1632, 1559,
	2026, 788, 1837, 1476, 1558, 1557, 533, 1554, 1769, 1558,
	1557, 1910, 1782, 1935, 1260, 1811, 986, 1787, 39, 1711,
	1555, 637, 658, 1732, 1549, 1791, 658, 658, 1776, 1138,
	1721, 658, 1137, 1785, 300, 1784, 859, 659, 658, 844,
	658, 1824, 1820, 853, 1269, 1174, 270, 270, 658, 1798,
	1799, 1793, 714, 1804, 661, 1810, 471, 786, 662, 787,
	1014, 1792, 649, 784, 1074, 1230, 531, 1249, 1464, 979,
	629, 1602, 641, 640, 1033, 1246, 898, 539, 1813, 52,
	553, 658, 421, 1612, 814, 814, 815, 422, 1360, 1772,
	1153, 904, 1222, 1565, 270, 459, 1487, 270, 541, 1290,
	1282, 1843, 1279, 589, 720, 967, 1220, 1075, 1644, 565,
	1366, 1095, 789, 615, 658, 912, 480, 479, 658, 1133,
	562, 837, 1114, 1797, 658, 485, 817, 495, 816, 960,
	658, 785, 957, 450, 1872, 1559, 1948, 1874, 1145, 1323,
	2084, 658, 1955, 1562, 2005, 1558, 1557, 815, 69, 1855,
	1856, 1962, 1890, 1347, 658, 27, 1675, 25, 1888, 1871,
	21, 19, 533, 1858, 18, 757, 17, 26, 15, 1216,
	14, 1559, 13, 658, 12, 38, 37, 1217, 1873, 1218,
	36, 1558, 1557, 1223, 1882, 1887, 35, 815, 34, 1901,
	33, 6, 658, 658, 1896, 1904, 814, 1883, 1884, 5,
	1894, 1907, 1447, 2, 1929, 1920, 1909, 1913, 1, 1917,
	0, 921, 922, 1926, 0, 658, 1445, 0, 1934, 0,
	0, 789, 658, 1728, 1729, 1033, 0, 0, 0, 1916,
	0, 0, 0, 0, 924, 658, 1941, 1908, 0, 1554,
	503, 1950, 0, 0, 0, 1762, 1928, 1763, 0, 270,
	1765, 1766, 1767, 270, 0, 1876, 923, 814, 1944, 0,
	0, 1953, 0, 0, 0, 0, 0, 1945, 0, 658,
	0, 0, 1952, 0, 0, 1219, 0, 1971, 533, 1442,
	0, 1969, 1221, 0, 0, 1554, 1972, 503, 1134, 1443,
	1554, 0, 0, 1448, 0, 0, 297, 814, 0, 1981,
	0, 0, 270, 270, 485, 1986, 270, 789, 0, 0,
	658, 929, 62, 1979, 1975, 1644, 0, 1983, 0, 471,
	1990, 1982, 1818, 0, 0, 0, 619, 619, 1984, 1993,
	658, 0, 0, 1490, 1491, 722, 718, 0, 2002, 0,
	0, 1978, 0, 2014, 658, 0, 2016, 2009, 0, 0,
	0, 2015, 0, 1974, 1987, 1838, 0, 0, 0, 756,
	0, 1559, 658, 2022, 485, 760, 760, 2020, 2012, 2019,
	2018, 1558, 1557, 0, 0, 0, 0, 658, 2001, 2017,
	0, 1284, 788, 788, 2007, 1444, 2041, 492, 495, 2046,
	0, 0, 1446, 2043, 2044, 1490, 1491, 0, 658, 658,
	789, 0, 638, 50, 0, 0, 2057, 0, 0, 0,
	1033, 2061, 1857, 2059, 427, 1859, 0, 2065, 0, 2048,
	0, 86, 0, 270, 658, 2071, 1554, 2070, 2069, 427,
	0, 0, 0, 1496, 0, 0, 0, 0, 2083, 2082,
	2045, 0, 0, 2087, 50, 0, 2067, 0, 0, 1889,
	905, 907, 503, 0, 0, 0, 0, 914, 0, 658,
	2092, 2008, 1554, 0, 298, 464, 0, 270, 472, 961,
	962, 963, 964, 965, 1912, 50, 0, 0, 0, 973,
	0, 0, 270, 0, 0, 0, 1506, 0, 0, 980,
	0, 0, 0, 2029, 788, 1496, 0, 0, 503, 1644,
	0, 0, 0, 815, 0, 0, 0, 817, 817, 816,
	816, 0, 785, 785, 0, 0, 927, 928, 930, 0,
	950, 0, 0, 0, 0, 0, 921, 922, 0, 0,
	0, 0, 0, 0, 815, 815, 0, 0, 0, 898,
	709, 0, 0, 815, 815, 0, 0, 0, 1506, 924,
	0, 1490, 1491, 1507, 0, 788, 0, 0, 0, 0,
	0, 0, 0, 0, 1957, 1958, 0, 0, 0, 1021,
	0, 923, 0, 0, 1967, 0, 815, 938, 1968, 0,
	0, 485, 0, 299, 0, 0, 0, 495, 0, 0,
	0, 485, 0, 503, 1416, 788, 0, 0, 0, 1644,
	0, 0, 1505, 0, 0, 1644, 503, 0, 0, 1284,
	1284, 0, 1076, 814, 0, 1507, 0, 495, 0, 817,
	495, 816, 0, 0, 785, 0, 929, 0, 2000, 0,
	503, 0, 0, 270, 0, 427, 1492, 1493, 1494, 1495,
	1497, 0, 1420, 0, 814, 814, 0, 0, 0, 0,
	0, 1496, 1554, 814, 814, 1912, 0, 0, 1644, 0,
	0, 1423, 0, 0, 0, 0, 0, 0, 0, 0,
	1284, 1284, 1284, 1418, 0, 0, 0, 0, 0, 939,
	817, 1421, 816, 0, 472, 785, 814, 1451, 1452, 0,
	270, 0, 503, 0, 0, 0, 1419, 1500, 1492, 1493,
	1494, 1495, 1497, 534, 1506, 815, 0, 0, 0, 0,
	2058, 1802, 0, 921, 922, 0, 0, 0, 0, 0,
	817, 0, 816, 0, 0, 785, 0, 1644, 0, 0,
	0, 0, 1126, 495, 0, 0, 924, 0, 485, 0,
	0, 0, 0, 0, 0, 0, 940, 0, 1513, 1514,
	1515, 1422, 0, 0, 0, 0, 0, 0, 923, 0,
	0, 0, 0, 0, 0, 0, 619, 0, 0, 0,
	1168, 1507, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 0, 1210, 0, 1212, 1213, 1214,
	1215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1801, 0, 929, 815, 814, 1239, 0, 0, 0,
	0, 0, 535, 1284, 1284, 934, 931, 932, 933, 925,
	926, 927, 928, 930, 0, 950, 0, 0, 1266, 1267,
	0, 0, 1280, 0, 1291, 1293, 1298, 1301, 1302, 1303,
	1501, 1498, 1499, 1500, 1492, 1493, 1494, 1495, 1497, 0,
	0, 0, 0, 0, 0, 0, 939, 0, 0, 722,
	0, 0, 0, 0, 0, 1317, 464, 1284, 1284, 1284,
	1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
	1284, 1284, 1284, 1284, 1284, 1284, 0, 1284, 0, 0,
	815, 1649, 1650, 0, 1345, 0, 0, 0, 0, 0,
	0, 788, 1358, 1355, 0, 0, 0, 0, 756, 0,
	0, 534, 0, 0, 814, 0, 0, 756, 298, 534,
	0, 0, 0, 940, 0, 0, 0, 485, 0, 0,
	0, 0, 788, 788, 0, 0, 0, 0, 0, 0,
	0, 788, 788, 0, 1384, 1687, 1688, 1689, 1690, 1691,
	1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701,
	1702, 1703, 1704, 1705, 0, 1709, 0, 0, 0, 0,
	534, 534, 0, 0, 788, 0, 0, 0, 298, 0,
	0, 0, 0, 815, 0, 0, 0, 0, 1403, 0,
	0, 0, 0, 914, 0, 0, 0, 0, 464, 0,
	814, 464, 464, 931, 932, 933, 925, 926, 927, 928,
	930, 1168, 950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 0, 972, 817, 0, 816, 0,
	535, 785, 976, 0, 0, 0, 0, 299, 535, 0,
	0, 0, 1435, 1436, 0, 0, 0, 0, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 817, 817, 816,
	816, 0, 785, 785, 0, 0, 817, 817, 816, 816,
	0, 785, 785, 0, 0, 0, 0, 0, 0, 921,
	922, 1460, 941, 942, 943, 951, 952, 953, 1467, 535,
	535, 1471, 0, 814, 0, 944, 0, 299, 0, 817,
	1480, 816, 924, 788, 785, 955, 0, 1742, 0, 1735,
	0, 0, 0, 0, 0, 0, 0, 1733, 1284, 0,
	0, 1737, 0, 0, 923, 973, 50, 0, 50, 0,
	938, 1298, 1298, 1298, 0, 0, 0, 0, 0, 1743,
	0, 0, 0, 921, 922, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 50, 0, 0, 0, 0, 1736,
	0, 0, 0, 0, 1551, 0, 924, 0, 0, 50,
	0, 0, 0, 0, 50, 0, 0, 0, 0, 929,
	0, 0, 0, 0, 0, 0, 0, 0, 923, 534,
	0, 0, 0, 0, 619, 0, 1865, 0, 948, 956,
	0, 0, 0, 0, 0, 0, 722, 1076, 1168, 0,
	0, 0, 788, 0, 954, 0, 0, 0, 0, 1284,
	0, 0, 0, 0, 0, 0, 946, 0, 817, 1738,
	816, 1739, 939, 785, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 929, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1168, 0, 945, 1168, 1741,
	0, 0, 0, 0, 0, 0, 1744, 0, 0, 0,
	0, 1647, 0, 0, 1648, 0, 0, 0, 0, 298,
	0, 0, 0, 0, 0, 0, 1653, 0, 0, 0,
	0, 0, 0, 0, 0, 1662, 939, 1938, 788, 940,
	0, 0, 0, 1666, 0, 0, 1384, 0, 535, 0,
	0, 949, 0, 1169, 1284, 0, 0, 0, 0, 0,
	0, 1682, 0, 0, 0, 1684, 0, 0, 0, 0,
	0, 0, 0, 1740, 0, 0, 0, 817, 0, 816,
	0, 0, 785, 0, 0, 0, 0, 0, 0, 1228,
	0, 0, 0, 0, 0, 0, 0, 0, 1715, 1716,
	0, 0, 0, 940, 0, 0, 0, 1722, 1723, 1724,
	298, 947, 0, 0, 935, 936, 937, 0, 934, 931,
	932, 933, 925, 926, 927, 928, 930, 0, 950, 0,
	0, 788, 1992, 1752, 0, 1851, 0, 0, 299, 428,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1764, 0, 0, 0, 1768, 0, 0, 429, 0, 0,
	0, 0, 0, 817, 0, 816, 0, 0, 785, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 50, 934, 931, 932, 933, 925, 926, 927, 928,
	930, 0, 950, 431, 0, 0, 294, 1796, 436, 437,
	0, 472, 442, 1168, 1168, 294, 0, 1168, 0, 0,
	0, 0, 534, 0, 430, 432, 0, 0, 0, 921,
	922, 0, 941, 942, 943, 951, 952, 953, 1823, 299,
	0, 0, 1826, 1827, 0, 944, 0, 1829, 0, 0,
	61, 0, 924, 0, 1831, 955, 1833, 0, 0, 61,
	0, 0, 0, 433, 1839, 0, 817, 0, 816, 0,
	0, 785, 0, 0, 923, 0, 40, 434, 435, 0,
	938, 534, 0, 0, 41, 40, 50, 0, 0, 0,
	50, 0, 0, 41, 438, 0, 0, 1848, 0, 0,
	0, 0, 0, 50, 0, 0, 42, 0, 0, 0,
	0, 0, 0, 0, 1431, 42, 0, 921, 922, 0,
	0, 0, 0, 951, 952, 953, 0, 0, 0, 929,
	0, 0, 0, 0, 1866, 0, 0, 0, 0, 0,
	924, 535, 0, 955, 0, 0, 1881, 0, 948, 956,
	0, 0, 1228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 923, 0, 954, 0, 0, 0, 938, 0,
	0, 0, 972, 0, 0, 0, 946, 0, 1906, 0,
	0, 0, 939, 0, 0, 0, 0, 0, 0, 1915,
	0, 0, 0, 1168, 0, 0, 0, 0, 0, 0,
	535, 0, 0, 0, 439, 0, 444, 945, 1930, 1931,
	440, 0, 0, 0, 0, 441, 0, 929, 68, 0,
	0, 0, 0, 0, 53, 0, 0, 68, 0, 443,
	0, 972, 0, 53, 0, 0, 948, 956, 1943, 0,
	0, 70, 0, 0, 0, 0, 0, 0, 0, 940,
	70, 1947, 921, 922, 0, 941, 942, 943, 951, 952,
	953, 949, 0, 0, 946, 0, 0, 0, 944, 0,
	939, 0, 71, 0, 0, 924, 0, 0, 955, 0,
	66, 71, 0, 0, 0, 722, 67, 0, 0, 66,
	0, 0, 0, 0, 0, 67, 0, 923, 0, 0,
	0, 0, 0, 938, 0, 65, 0, 0, 0, 0,
	0, 1169, 0, 0, 1635, 0, 0, 0, 0, 0,
	0, 947, 0, 0, 935, 936, 937, 0, 934, 931,
	932, 933, 925, 926, 927, 928, 930, 940, 950, 0,
	0, 0, 0, 0, 2004, 1532, 0, 0, 0, 949,
	0, 0, 929, 0, 0, 0, 0, 0, 1169, 921,
	922, 1169, 941, 942, 943, 951, 952, 953, 50, 534,
	0, 948, 956, 0, 0, 944, 0, 0, 0, 0,
	0, 0, 924, 0, 0, 955, 0, 954, 0, 298,
	0, 0, 0, 2042, 0, 0, 0, 0, 0, 946,
	0, 1076, 0, 0, 923, 939, 0, 0, 0, 947,
	938, 0, 0, 0, 2056, 2056, 934, 931, 932, 933,
	925, 926, 927, 928, 930, 0, 950, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2056, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 929,
	0, 0, 0, 0, 1490, 1491, 0, 1508, 1509, 1510,
	0, 0, 940, 0, 0, 2056, 0, 0, 948, 956,
	1821, 0, 0, 0, 949, 0, 0, 0, 535, 0,
	0, 0, 0, 0, 954, 921, 922, 0, 941, 942,
	943, 951, 952, 953, 0, 0, 946, 0, 299, 0,
	0, 944, 939, 0, 0, 1505, 0, 0, 924, 0,
	0, 955, 0, 0, 0, 0, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 534, 0,
	923, 0, 0, 0, 947, 0, 938, 935, 936, 937,
	0, 934, 931, 932, 933, 925, 926, 927, 928, 930,
	0, 950, 0, 0, 1496, 0, 1169, 1169, 1531, 0,
	1169, 0, 0, 0, 0, 0, 0, 534, 472, 940,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 949, 0, 0, 0, 929, 0, 534, 0, 1511,
	0, 0, 921, 922, 0, 941, 942, 943, 951, 952,
	953, 0, 0, 0, 948, 956, 0, 1506, 944, 0,
	0, 0, 0, 0, 0, 924, 0, 0, 955, 0,
	954, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1490, 1491, 946, 1508, 1509, 1510, 0, 923, 939, 0,
	0, 947, 0, 938, 935, 936, 937, 535, 934, 931,
	932, 933, 925, 926, 927, 928, 930, 0, 950, 0,
	0, 0, 0, 945, 0, 1530, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 535, 0, 0, 0,
	0, 0, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 535, 0, 0, 0,
	1897, 948, 956, 0, 0, 0, 0, 949, 0, 50,
	0, 0, 0, 0, 0, 0, 0, 954, 0, 0,
	1496, 0, 0, 0, 0, 0, 1169, 0, 0, 946,
	0, 0, 0, 534, 0, 939, 0, 0, 0, 1502,
	1503, 1504, 0, 1501, 1498, 1499, 1500, 1492, 1493, 1494,
	1495, 1497, 0, 0, 0, 1511, 0, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 0, 947, 0, 0,
	935, 936, 937, 1506, 934, 931, 932, 933, 925, 926,
	927, 928, 930, 0, 950, 0, 0, 0, 0, 0,
	0, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 949, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1507, 0, 0, 0, 50, 0, 0, 0, 0, 534,
	0, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 947, 0, 0, 935, 936, 937,
	0, 934, 931, 932, 933, 925, 926, 927, 928, 930,
	0, 950, 0, 0, 0, 1997, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 1503, 1504, 0, 1501,
	1498, 1499, 1500, 1492, 1493, 1494, 1495, 1497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 535, 0,
	0, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 87, 88, 315,
	89, 316, 317, 318, 319, 217, 320, 321, 322, 323,
	90, 91, 92, 218, 219, 220, 221, 93, 222, 223,
	324, 94, 224, 225, 95, 325, 326, 226, 227, 228,
	327, 229, 328, 301, 329, 96, 97, 98, 0, 99,
	330, 100, 101, 102, 331, 302, 103, 104, 332, 333,
	334, 335, 336, 337, 105, 106, 271, 107, 230, 108,
	231, 232, 338, 109, 339, 110, 340, 341, 342, 111,
	112, 343, 113, 344, 0, 345, 233, 114, 115, 234,
	235, 346, 347, 348, 116, 117, 236, 0, 118, 349,
	119, 350, 351, 303, 352, 120, 237, 353, 238, 354,
	121, 122, 123, 124, 239, 240, 305, 355, 128, 356,
	125, 357, 304, 126, 241, 127, 242, 243, 244, 358,
	245, 359, 306, 129, 307, 130, 131, 360, 133, 132,
	361, 246, 308, 134, 309, 362, 135, 363, 364, 136,
	0, 137, 138, 139, 141, 247, 140, 310, 142, 143,
	145, 144, 365, 366, 367, 248, 146, 249, 147, 148,
	368, 149, 369, 370, 150, 371, 372, 151, 250, 311,
	152, 312, 251, 153, 154, 155, 156, 373, 252, 157,
	253, 158, 374, 159, 160, 161, 254, 162, 163, 375,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	376, 174, 313, 175, 176, 255, 177, 0, 178, 179,
	180, 181, 377, 256, 182, 183, 378, 184, 185, 314,
	186, 257, 258, 187, 379, 193, 188, 189, 190, 192,
	259, 191, 260, 380, 194, 381, 195, 196, 197, 198,
	199, 382, 261, 262, 263, 383, 384, 200, 264, 265,
	385, 201, 202, 203, 204, 386, 387, 205, 206, 207,
	388, 208, 389, 209, 210, 211, 266, 267, 390, 391,
	212, 392, 393, 394, 395, 213, 214, 215, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 0, 0, 0, 0, 0, 1638, 0, 0,
	0, 0, 0, 0, 0, 1639, 87, 88, 315, 89,
	316, 317, 318, 319, 217, 320, 321, 322, 323, 90,
	91, 92, 218, 219, 220, 221, 93, 222, 223, 324,
	94, 224, 225, 95, 325, 326, 226, 227, 228, 327,
	229, 328, 301, 329, 96, 97, 98, 0, 99, 330,
	100, 101, 102, 331, 302, 103, 104, 332, 333, 334,
	335, 336, 337, 105, 106, 271, 107, 230, 108, 231,
	232, 338, 109, 339, 110, 340, 341, 342, 111, 112,
	343, 113, 344, 0, 345, 233, 114, 115, 234, 235,
	346, 347, 348, 116, 117, 236, 0, 118, 349, 119,
	350, 351, 303, 352, 120, 237, 353, 238, 354, 121,
	122, 123, 124, 239, 240, 305, 355, 128, 356, 125,
	357, 304, 126, 241, 127, 242, 243, 244, 358, 245,
	359, 306, 129, 307, 130, 131, 360, 133, 132, 361,
	246, 308, 134, 309, 362, 135, 363, 364, 136, 0,
	137, 138, 139, 141, 247, 140, 310, 142, 143, 145,
	144, 365, 366, 367, 248, 146, 249, 147, 148, 368,
	149, 369, 370, 150, 371, 372, 151, 250, 311, 152,
	312, 251, 153, 154, 155, 156, 373, 252, 157, 253,
	158, 374, 159, 160, 161, 254, 162, 163, 375, 164,
	165, 166, 167, 168, 170, 171, 169, 172, 173, 376,
	174, 313, 175, 176, 255, 177, 0, 178, 179, 180,
	181, 377, 256, 182, 183, 378, 184, 185, 314, 186,
	257, 258, 187, 379, 193, 188, 189, 190, 192, 259,
	191, 260, 380, 194, 381, 195, 196, 197, 198, 199,
	382, 261, 262, 263, 383, 384, 200, 264, 265, 385,
	201, 202, 203, 204, 386, 387, 205, 206, 207, 388,
	208, 389, 209, 210, 211, 266, 267, 390, 391, 212,
	392, 393, 394, 395, 213, 214, 215, 216, 0, 0,
	0, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1985, 87, 88, 315,
	89, 316, 317, 318, 319, 217, 320, 321, 322, 323,
	90, 91, 92, 218, 219, 220, 221, 93, 222, 223,
	324, 94, 224, 225, 95, 325, 326, 226, 227, 228,
	327, 229, 328, 301, 329, 96, 97, 98, 0, 99,
	330, 100, 101, 102, 331, 302, 103, 104, 332, 333,
	334, 335, 336, 337, 105, 106, 271, 107, 230, 108,
	231, 232, 338, 109, 339, 110, 340, 341, 342, 111,
	112, 343, 113, 344, 0, 345, 233, 114, 115, 234,
	235, 346, 347, 348, 116, 117, 236, 0, 118, 349,
	119, 350, 351, 303, 352, 120, 237, 353, 238, 354,
	121, 122, 123, 124, 239, 240, 305, 355, 128, 356,
	125, 357, 304, 126, 241, 127, 242, 243, 244, 358,
	245, 359, 306, 129, 307, 130, 131, 360, 133, 132,
	361, 246, 308, 134, 309, 362, 135, 363, 364, 136,
	0, 137, 138, 139, 141, 247, 140, 310, 142, 143,
	145, 144, 365, 366, 367, 248, 146, 249, 147, 148,
	368, 149, 369, 370, 150, 371, 372, 151, 250, 311,
	152, 312, 251, 153, 154, 155, 156, 373, 252, 157,
	253, 158, 374, 159, 160, 161, 254, 162, 163, 375,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	376, 174, 313, 175, 176, 255, 177, 0, 178, 179,
	180, 181, 377, 256, 182, 183, 378, 184, 185, 314,
	186, 257, 258, 187, 379, 193, 188, 189, 190, 192,
	259, 191, 260, 380, 194, 381, 195, 196, 197, 198,
	199, 382, 261, 262, 263, 383, 384, 200, 264, 265,
	385, 201, 202, 203, 204, 386, 387, 205, 206, 207,
	388, 208, 389, 209, 210, 211, 266, 267, 390, 391,
	212, 392, 393, 394, 395, 213, 214, 215, 216, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 750, 0, 0, 87, 88, 315, 89, 316,
	317, 318, 319, 217, 320, 321, 322, 323, 90, 91,
	92, 218, 219, 220, 221, 93, 222, 223, 324, 94,
	224, 225, 95, 325, 326, 226, 227, 228, 327, 229,
	328, 301, 329, 96, 97, 98, 0, 99, 330, 100,
	101, 102, 331, 302, 103, 104, 332, 333, 334, 335,
	336, 337, 105, 106, 271, 107, 230, 108, 231, 232,
	338, 109, 339, 110, 340, 341, 342, 111, 112, 343,
	113, 344, 0, 345, 233, 114, 115, 234, 235, 346,
	347, 348, 116, 117, 236, 0, 118, 349, 119, 350,
	351, 303, 352, 120, 237, 353, 238, 354, 121, 122,
	123, 124, 239, 240, 305, 355, 128, 356, 125, 357,
	304, 126, 241, 127, 242, 243, 244, 358, 245, 359,
	306, 129, 307, 130, 131, 360, 133, 132, 361, 246,
	308, 134, 309, 362, 135, 363, 364, 136, 0, 137,
	138, 139, 141, 247, 140, 310, 142, 143, 145, 144,
	365, 366, 367, 248, 146, 249, 147, 148, 368, 149,
	369, 370, 150, 371, 372, 151, 250, 311, 152, 312,
	251, 153, 154, 155, 156, 373, 252, 157, 253, 158,
	374, 159, 160, 161, 254, 162, 163, 375, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 376, 174,
	313, 175, 176, 255, 177, 0, 178, 179, 180, 181,
	377, 256, 182, 183, 378, 184, 185, 314, 186, 257,
	258, 187, 379, 193, 188, 189, 190, 192, 259, 191,
	260, 380, 194, 381, 195, 196, 197, 198, 199, 382,
	261, 262, 263, 383, 384, 200, 264, 265, 385, 201,
	202, 203, 204, 386, 387, 205, 206, 207, 388, 208,
	389, 209, 210, 211, 266, 267, 390, 391, 212, 392,
	393, 394, 395, 213, 214, 215, 216, 657, 646, 647,
	644, 645, 636, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	0, 673, 639, 0, 0, 0, 90, 91, 92, 218,
	688, 220, 689, 93, 690, 691, 0, 94, 224, 225,
	95, 642, 672, 692, 693, 228, 0, 684, 0, 665,
	0, 96, 97, 98, 0, 99, 0, 100, 101, 102,
	0, 302, 103, 104, 0, 666, 668, 0, 667, 669,
	105, 106, 271, 107, 694, 108, 695, 696, 723, 109,
	0, 110, 0, 0, 0, 687, 112, 0, 113, 0,
	0, 0, 630, 114, 115, 674, 675, 653, 0, 0,
	116, 117, 697, 0, 118, 0, 119, 0, 0, 303,
	0, 120, 685, 0, 238, 0, 121, 122, 123, 124,
	681, 683, 305, 0, 128, 0, 125, 0, 304, 126,
	698, 127, 699, 700, 701, 0, 664, 0, 306, 129,
	307, 130, 131, 0, 133, 132, 0, 686, 308, 134,
	309, 0, 135, 0, 0, 136, 0, 137, 138, 139,
	141, 247, 140, 310, 142, 143, 145, 144, 625, 0,
	654, 682, 146, 702, 147, 148, 0, 149, 0, 0,
	150, 0, 0, 151, 250, 311, 152, 312, 676, 153,
	154, 155, 156, 0, 677, 157, 253, 158, 0, 159,
	160, 161, 703, 162, 163, 0, 164, 165, 166, 167,
	168, 170, 171, 169, 172, 173, 0, 174, 313, 175,
	176, 631, 177, 0, 178, 179, 180, 181, 68, 256,
	182, 183, 670, 184, 185, 314, 186, 704, 258, 187,
	0, 193, 188, 189, 190, 192, 705, 191, 678, 0,
	194, 70, 195, 196, 197, 198, 199, 0, 261, 706,
	707, 0, 0, 200, 679, 680, 652, 201, 202, 203,
	204, 0, 0, 205, 206, 207, 671, 208, 0, 209,
	210, 211, 536, 708, 0, 0, 212, 0, 0, 0,
	66, 213, 214, 215, 216, 626, 67, 0, 0, 0,
	657, 646, 647, 644, 645, 636, 622, 623, 0, 0,
	0, 0, 624, 0, 0, 632, 87, 88, 1255, 89,
	635, 0, 0, 0, 673, 639, 0, 0, 0, 90,
	91, 92, 218, 688, 220, 689, 93, 690, 691, 0,
	94, 224, 225, 95, 642, 672, 692, 693, 228, 0,
	684, 0, 665, 0, 96, 97, 98, 0, 99, 0,
	100, 101, 102, 0, 302, 103, 104, 0, 666, 668,
	0, 667, 669, 105, 106, 271, 107, 694, 108, 695,
	696, 0, 109, 0, 110, 0, 1256, 0, 687, 112,
	0, 113, 0, 0, 0, 630, 114, 115, 674, 675,
	653, 0, 0, 116, 117, 697, 0, 118, 0, 119,
	0, 0, 303, 0, 120, 685, 0, 238, 0, 121,
	122, 123, 124, 681, 683, 305, 0, 128, 0, 125,
	0, 304, 126, 698, 127, 699, 700, 701, 0, 664,
	0, 306, 129, 307, 130, 131, 0, 133, 132, 0,
	686, 308, 134, 309, 0, 135, 0, 0, 136, 0,
	137, 138, 139, 141, 247, 140, 310, 142, 143, 145,
	144, 625, 0, 654, 682, 146, 702, 147, 148, 0,
	149, 0, 0, 150, 0, 0, 151, 250, 311, 152,
	312, 676, 153, 154, 155, 156, 0, 677, 157, 253,
	158, 0, 159, 160, 161, 703, 162, 163, 0, 164,
	165, 166, 167, 168, 170, 171, 169, 172, 173, 0,
	174, 313, 175, 176, 631, 177, 0, 178, 179, 180,
	181, 0, 256, 182, 183, 670, 184, 185, 314, 186,
	704, 258, 187, 0, 193, 188, 189, 190, 192, 705,
	191, 678, 0, 194, 0, 195, 196, 197, 198, 199,
	0, 261, 706, 707, 0, 0, 200, 679, 680, 652,
	201, 202, 203, 204, 0, 0, 205, 206, 207, 671,
	208, 0, 209, 210, 211, 266, 708, 1254, 0, 212,
	0, 0, 0, 0, 213, 214, 215, 216, 626, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	623, 1257, 0, 0, 0, 624, 0, 0, 632, 1252,
	0, 0, 0, 635, 657, 646, 647, 644, 645, 636,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 0, 89, 0, 0, 0, 0, 673, 639,
	0, 0, 0, 90, 91, 92, 218, 688, 220, 689,
	93, 690, 691, 0, 94, 224, 225, 95, 642, 672,
	692, 693, 228, 0, 684, 0, 665, 0, 96, 97,
	98, 0, 99, 0, 100, 101, 102, 0, 302, 103,
	104, 0, 666, 668, 0, 667, 669, 105, 106, 271,
	107, 694, 108, 695, 696, 0, 109, 0, 110, 0,
	0, 0, 687, 112, 0, 113, 0, 0, 0, 630,
	114, 115, 674, 675, 653, 0, 0, 116, 117, 697,
	0, 118, 0, 119, 0, 0, 303, 0, 120, 685,
	0, 238, 0, 121, 122, 123, 124, 681, 683, 305,
	0, 128, 0, 125, 0, 304, 126, 698, 127, 699,
	700, 701, 0, 664, 0, 306, 129, 307, 130, 131,
	0, 133, 132, 0, 686, 308, 134, 309, 0, 135,
	0, 0, 136, 0, 137, 138, 139, 141, 247, 140,
	310, 142, 143, 145, 144, 625, 0, 654, 682, 146,
	702, 147, 148, 0, 149, 0, 0, 150, 0, 0,
	151, 250, 311, 152, 312, 676, 153, 154, 155, 156,
	0, 677, 157, 253, 158, 0, 159, 160, 161, 703,
	162, 163, 0, 164, 165, 166, 167, 168, 170, 171,
	169, 172, 173, 0, 174, 313, 175, 176, 631, 177,
	0, 178, 179, 180, 181, 68, 256, 182, 183, 670,
	184, 185, 314, 186, 704, 258, 187, 0, 193, 188,
	189, 190, 192, 705, 191, 678, 0, 194, 70, 195,
	196, 197, 198, 199, 0, 261, 706, 707, 0, 0,
	200, 679, 680, 652, 201, 202, 203, 204, 0, 0,
	205, 206, 207, 671, 208, 0, 209, 210, 211, 536,
	708, 0, 0, 212, 0, 0, 0, 66, 213, 214,
	215, 216, 626, 67, 657, 646, 647, 644, 645, 636,
	0, 0, 0, 622, 623, 0, 0, 0, 0, 624,
	87, 88, 632, 89, 0, 0, 0, 635, 673, 639,
	0, 0, 0, 90, 91, 92, 218, 688, 220, 689,
	93, 690, 691, 1294, 94, 224, 225, 95, 642, 672,
	692, 693, 228, 0, 684, 0, 665, 0, 96, 97,
	98, 0, 99, 0, 100, 101, 102, 0, 302, 103,
	104, 0, 666, 668, 0, 667, 669, 105, 106, 271,
	107, 694, 108, 695, 696, 0, 109, 0, 110, 0,
	0, 0, 687, 112, 0, 113, 0, 0, 0, 630,
	114, 115, 674, 675, 653, 0, 0, 116, 117, 697,
	0, 118, 0, 119, 0, 1299, 303, 0, 120, 685,
	0, 238, 0, 121, 122, 123, 124, 681, 683, 305,
	0, 128, 0, 125, 0, 304, 126, 698, 127, 699,
	700, 701, 0, 664, 0, 306, 129, 307, 130, 131,
	0, 133, 132, 1295, 686, 308, 134, 309, 0, 135,
	0, 0, 136, 0, 137, 138, 139, 141, 247, 140,
	310, 142, 143, 145, 144, 625, 0, 654, 682, 146,
	702, 147, 148, 0, 149, 0, 0, 150, 0, 0,
	151, 250, 311, 152, 312, 676, 153, 154, 155, 156,
	0, 677, 157, 253, 158, 0, 159, 160, 161, 703,
	162, 163, 0, 164, 165, 166, 167, 168, 170, 171,
	169, 172, 173, 0, 174, 313, 175, 176, 631, 177,
	0, 178, 179, 180, 181, 0, 256, 182, 183, 670,
	184, 185, 314, 186, 704, 258, 187, 0, 193, 188,
	189, 190, 192, 705, 191, 678, 0, 194, 0, 195,
	196, 197, 198, 199, 0, 261, 706, 707, 0, 1296,
	200, 679, 680, 652, 201, 202, 203, 204, 0, 0,
	205, 206, 207, 671, 208, 0, 209, 210, 211, 266,
	708, 0, 0, 212, 0, 0, 0, 0, 213, 214,
	215, 216, 626, 0, 657, 646, 647, 644, 645, 636,
	0, 0, 0, 622, 623, 0, 0, 0, 0, 624,
	87, 88, 632, 89, 0, 0, 0, 635, 673, 639,
	0, 0, 0, 90, 91, 92, 218, 688, 220, 689,
	93, 690, 691, 0, 94, 224, 225, 95, 642, 672,
	692, 693, 228, 0, 684, 0, 665, 0, 96, 97,
	98, 0, 99, 0, 100, 101, 102, 0, 302, 103,
	104, 0, 666, 668, 0, 667, 669, 105, 106, 271,
	107, 694, 108, 695, 696, 0, 109, 0, 110, 0,
	0, 0, 687, 112, 0, 113, 0, 0, 0, 630,
	114, 115, 674, 675, 653, 0, 0, 116, 117, 697,
	0, 118, 0, 119, 0, 0, 303, 0, 120, 685,
	0, 238, 0, 121, 122, 123, 124, 681, 683, 305,
	0, 128, 0, 125, 0, 304, 126, 698, 127, 699,
	700, 701, 0, 664, 0, 306, 129, 307, 130, 131,
	0, 133, 132, 0, 686, 308, 134, 309, 0, 135,
	0, 0, 136, 0, 137, 138, 139, 141, 247, 140,
	310, 142, 143, 145, 144, 625, 1581, 654, 682, 146,
	702, 147, 148, 0, 149, 0, 0, 150, 0, 0,
	151, 250, 311, 152, 312, 676, 153, 154, 155, 156,
	0, 677, 157, 253, 158, 0, 159, 160, 161, 703,
	162, 163, 0, 164, 165, 166, 167, 168, 170, 171,
	169, 172, 173, 0, 174, 313, 175, 176, 631, 177,
	0, 178, 179, 180, 181, 0, 256, 182, 183, 670,
	184, 185, 314, 186, 704, 258, 187, 0, 193, 188,
	189, 190, 192, 705, 191, 678, 0, 194, 0, 195,
	196, 197, 198, 199, 0, 261, 706, 707, 0, 0,
	200, 679, 680, 652, 201, 202, 203, 204, 0, 0,
	205, 206, 207, 671, 208, 0, 209, 210, 211, 266,
	708, 0, 0, 212, 0, 0, 0, 0, 213, 214,
	215, 216, 626, 0, 657, 646, 647, 644, 645, 636,
	0, 0, 0, 622, 623, 620, 0, 0, 0, 624,
	87, 88, 632, 89, 0, 0, 0, 635, 673, 639,
	0, 0, 0, 90, 91, 92, 218, 688, 220, 689,
	93, 690, 691, 0, 94, 224, 225, 95, 642, 672,
	692, 693, 228, 0, 684, 0, 665, 0, 96, 97,
	98, 0, 99, 0, 100, 101, 102, 0, 302, 103,
	104, 0, 666, 668, 0, 667, 669, 105, 106, 271,
	107, 694, 108, 695, 696, 0, 109, 0, 110, 0,
	0, 0, 687, 112, 0, 113, 0, 0, 0, 630,
	114, 115, 674, 675, 653, 0, 0, 116, 117, 697,
	0, 118, 0, 119, 0, 0, 303, 0, 120, 685,
	0, 238, 0, 121, 122, 123, 124, 681, 683, 305,
	0, 128, 0, 125, 0, 304, 126, 698, 127, 699,
	700, 701, 0, 664, 0, 306, 129, 307, 130, 131,
	0, 133, 132, 0, 686, 308, 134, 309, 0, 135,
	0, 0, 136, 0, 137, 138, 139, 141, 247, 140,
	310, 142, 143, 145, 144, 625, 0, 654, 682, 146,
	702, 147, 148, 0, 149, 0, 0, 150, 0, 0,
	151, 250, 311, 152, 312, 676, 153, 154, 155, 156,
	0, 677, 157, 253, 158, 0, 159, 160, 161, 703,
	162, 163, 0, 164, 165, 166, 167, 168, 170, 171,
	169, 172, 173, 0, 174, 313, 175, 176, 631, 177,
	0, 178, 179, 180, 181, 0, 256, 182, 183, 670,
	184, 185, 314, 186, 704, 258, 187, 0, 193, 188,
	189, 190, 192, 705, 191, 678, 0, 194, 0, 195,
	196, 197, 198, 199, 0, 261, 706, 707, 0, 0,
	200, 679, 680, 652, 201, 202, 203, 204, 0, 0,
	205, 206, 207, 671, 208, 0, 209, 210, 211, 266,
	708, 0, 0, 212, 0, 0, 0, 0, 213, 214,
	215, 216, 626, 0, 0, 0, 0, 657, 646, 647,
	644, 645, 636, 622, 623, 0, 0, 0, 0, 624,
	978, 1247, 632, 87, 88, 0, 89, 635, 0, 0,
	0, 673, 639, 0, 0, 0, 90, 91, 92, 218,
	688, 220, 689, 93, 690, 691, 0, 94, 224, 225,
	95, 642, 672, 692, 693, 228, 0, 684, 0, 665,
	0, 96, 97, 98, 0, 99, 0, 100, 101, 102,
	0, 302, 103, 104, 0, 666, 668, 0, 667, 669,
	105, 106, 271, 107, 694, 108, 695, 696, 0, 109,
	0, 110, 0, 0, 0, 687, 112, 0, 113, 0,
	0, 0, 630, 114, 115, 674, 675, 653, 0, 0,
	116, 117, 697, 0, 118, 0, 119, 0, 0, 303,
	0, 120, 685, 0, 238, 0, 121, 122, 123, 124,
	681, 683, 305, 0, 128, 0, 125, 0, 304, 126,
	698, 127, 699, 700, 701, 0, 664, 0, 306, 129,
	307, 130, 131, 0, 133, 132, 0, 686, 308, 134,
	309, 0, 135, 0, 0, 136, 0, 137, 138, 139,
	141, 247, 140, 310, 142, 143, 145, 144, 625, 0,
	654, 682, 146, 702, 147, 148, 0, 149, 0, 0,
	150, 0, 0, 151, 250, 311, 152, 312, 676, 153,
	154, 155, 156, 0, 677, 157, 253, 158, 0, 159,
	160, 161, 703, 162, 163, 0, 164, 165, 166, 167,
	168, 170, 171, 169, 172, 173, 0, 174, 313, 175,
	176, 631, 177, 0, 178, 179, 180, 181, 0, 256,
	182, 183, 670, 184, 185, 314, 186, 704, 258, 187,
	0, 193, 188, 189, 190, 192, 705, 191, 678, 0,
	194, 0, 195, 196, 197, 198, 199, 0, 261, 706,
	707, 0, 0, 200, 679, 680, 652, 201, 202, 203,
	204, 0, 0, 205, 206, 207, 671, 208, 0, 209,
	210, 211, 266, 708, 0, 0, 212, 0, 0, 0,
	0, 213, 214, 215, 216, 626, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 623, 0, 0,
	0, 0, 624, 0, 0, 632, 1712, 0, 0, 0,
	635, 657, 646, 647, 644, 645, 636, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 0, 0, 0, 673, 639, 0, 0, 0,
	90, 91, 92, 218, 688, 220, 689, 93, 690, 691,
	0, 94, 224, 225, 95, 642, 672, 692, 693, 228,
	0, 684, 0, 665, 0, 96, 97, 98, 0, 99,
	0, 100, 101, 102, 0, 302, 103, 104, 0, 666,
	668, 0, 667, 669, 105, 106, 271, 107, 694, 108,
	695, 696, 0, 109, 0, 110, 0, 0, 0, 687,
	112, 0, 113, 0, 0, 0, 630, 114, 115, 674,
	675, 653, 0, 0, 116, 117, 697, 0, 118, 0,
	119, 0, 0, 303, 0, 120, 685, 0, 238, 0,
	121, 122, 123, 124, 681, 683, 305, 0, 128, 0,
	125, 0, 304, 126, 698, 127, 699, 700, 701, 0,
	664, 0, 306, 129, 307, 130, 131, 0, 133, 132,
	0, 686, 308, 134, 309, 0, 135, 0, 0, 136,
	0, 137, 138, 139, 141, 247, 140, 310, 142, 143,
	145, 144, 625, 0, 654, 682, 146, 702, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 250, 311,
	152, 312, 676, 153, 154, 155, 156, 0, 677, 157,
	253, 158, 0, 159, 160, 161, 703, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	0, 174, 313, 175, 176, 631, 177, 0, 178, 179,
	180, 181, 0, 256, 182, 183, 670, 184, 185, 314,
	186, 704, 258, 187, 0, 193, 188, 189, 190, 192,
	705, 191, 678, 0, 194, 0, 195, 196, 197, 198,
	199, 0, 261, 706, 707, 0, 0, 200, 679, 680,
	652, 201, 202, 203, 204, 0, 0, 205, 206, 207,
	671, 208, 0, 209, 210, 211, 266, 708, 1669, 0,
	212, 0, 0, 0, 0, 213, 214, 215, 216, 626,
	0, 657, 646, 647, 644, 645, 636, 0, 0, 0,
	622, 623, 0, 0, 0, 0, 624, 87, 88, 632,
	89, 0, 0, 0, 635, 673, 639, 0, 0, 0,
	90, 91, 92, 218, 688, 220, 689, 93, 690, 691,
	0, 94, 224, 225, 95, 642, 672, 692, 693, 228,
	0, 684, 0, 665, 0, 96, 97, 98, 0, 99,
	0, 100, 101, 102, 0, 302, 103, 104, 0, 666,
	668, 0, 667, 669, 105, 106, 271, 107, 694, 108,
	695, 696, 0, 109, 0, 110, 0, 0, 0, 687,
	112, 0, 113, 0, 0, 0, 630, 114, 115, 674,
	675, 653, 0, 0, 116, 117, 697, 0, 118, 0,
	119, 0, 0, 303, 0, 120, 685, 0, 238, 0,
	121, 122, 123, 124, 681, 683, 305, 0, 128, 0,
	125, 0, 304, 126, 698, 127, 699, 700, 701, 0,
	664, 0, 306, 129, 307, 130, 131, 0, 133, 132,
	0, 686, 308, 134, 309, 0, 135, 0, 0, 136,
	0, 137, 138, 139, 141, 247, 140, 310, 142, 143,
	145, 144, 625, 0, 654, 682, 146, 702, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 250, 311,
	152, 312, 676, 153, 154, 155, 156, 0, 677, 157,
	253, 158, 0, 159, 160, 161, 703, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	0, 174, 313, 175, 176, 631, 177, 0, 178, 179,
	180, 181, 0, 256, 182, 183, 670, 184, 185, 314,
	186, 704, 258, 187, 0, 193, 188, 189, 190, 192,
	705, 191, 678, 0, 194, 0, 195, 196, 197, 198,
	199, 0, 261, 706, 707, 0, 0, 200, 679, 680,
	652, 201, 202, 203, 204, 0, 0, 205, 206, 207,
	671, 208, 0, 209, 210, 211, 266, 708, 0, 0,
	212, 0, 0, 0, 0, 213, 214, 215, 216, 626,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 623, 0, 0, 0, 0, 624, 0, 0, 632,
	1659, 0, 0, 0, 635, 657, 646, 647, 644, 645,
	636, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 89, 0, 0, 0, 0, 673,
	639, 0, 0, 0, 90, 91, 92, 218, 688, 220,
	689, 93, 690, 691, 0, 94, 224, 225, 95, 642,
	672, 692, 693, 228, 0, 684, 0, 665, 0, 96,
	97, 98, 0, 99, 0, 100, 101, 102, 0, 302,
	103, 104, 0, 666, 668, 0, 667, 669, 105, 106,
	271, 107, 694, 108, 695, 696, 723, 109, 0, 110,
	0, 0, 0, 687, 112, 0, 113, 0, 0, 0,
	630, 114, 115, 674, 675, 653, 0, 0, 116, 117,
	697, 0, 118, 0, 119, 0, 0, 303, 0, 120,
	685, 0, 238, 0, 121, 122, 123, 124, 681, 683,
	305, 0, 128, 0, 125, 0, 304, 126, 698, 127,
	699, 700, 701, 0, 664, 0, 306, 129, 307, 130,
	131, 0, 133, 132, 0, 686, 308, 134, 309, 0,
	135, 0, 0, 136, 0, 137, 138, 139, 141, 247,
	140, 310, 142, 143, 145, 144, 625, 0, 654, 682,
	146, 702, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 250, 311, 152, 312, 676, 153, 154, 155,
	156, 0, 677, 157, 253, 158, 0, 159, 160, 161,
	703, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 0, 174, 313, 175, 176, 631,
	177, 0, 178, 179, 180, 181, 0, 256, 182, 183,
	670, 184, 185, 314, 186, 704, 258, 187, 0, 193,
	188, 189, 190, 192, 705, 191, 678, 0, 194, 0,
	195, 196, 197, 198, 199, 0, 261, 706, 707, 0,
	0, 200, 679, 680, 652, 201, 202, 203, 204, 0,
	0, 205, 206, 207, 671, 208, 0, 209, 210, 211,
	266, 708, 0, 0, 212, 0, 0, 0, 0, 213,
	214, 215, 216, 626, 0, 657, 646, 647, 644, 645,
	636, 0, 0, 0, 622, 623, 0, 0, 0, 0,
	624, 87, 88, 632, 89, 0, 0, 0, 635, 673,
	639, 0, 0, 0, 90, 91, 92, 218, 688, 220,
	689, 93, 690, 691, 0, 94, 224, 225, 95, 642,
	672, 692, 693, 228, 0, 684, 0, 665, 0, 96,
	97, 98, 0, 99, 0, 100, 101, 102, 0, 302,
	103, 104, 0, 666, 668, 0, 667, 669, 105, 106,
	271, 107, 694, 108, 695, 696, 0, 109, 0, 110,
	0, 0, 0, 687, 112, 0, 113, 0, 0, 0,
	630, 114, 115, 674, 675, 653, 0, 0, 116, 117,
	697, 0, 118, 0, 119, 0, 1299, 303, 0, 120,
	685, 0, 238, 0, 121, 122, 123, 124, 681, 683,
	305, 0, 128, 0, 125, 0, 304, 126, 698, 127,
	699, 700, 701, 0, 664, 0, 306, 129, 307, 130,
	131, 0, 133, 132, 0, 686, 308, 134, 309, 0,
	135, 0, 0, 136, 0, 137, 138, 139, 141, 247,
	140, 310, 142, 143, 145, 144, 625, 0, 654, 682,
	146, 702, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 250, 311, 152, 312, 676, 153, 154, 155,
	156, 0, 677, 157, 253, 158, 0, 159, 160, 161,
	703, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 0, 174, 313, 175, 176, 631,
	177, 0, 178, 179, 180, 181, 0, 256, 182, 183,
	670, 184, 185, 314, 186, 704, 258, 187, 0, 193,
	188, 189, 190, 192, 705, 191, 678, 0, 194, 0,
	195, 196, 197, 198, 199, 0, 261, 706, 707, 0,
	0, 200, 679, 680, 652, 201, 202, 203, 204, 0,
	0, 205, 206, 207, 671, 208, 0, 209, 210, 211,
	266, 708, 0, 0, 212, 0, 0, 0, 0, 213,
	214, 215, 216, 626, 0, 657, 646, 647, 644, 645,
	636, 0, 0, 0, 622, 623, 0, 0, 0, 0,
	624, 87, 88, 632, 89, 0, 0, 0, 635, 673,
	639, 0, 0, 0, 90, 91, 92, 218, 688, 220,
	689, 93, 690, 691, 0, 94, 224, 225, 95, 642,
	672, 692, 693, 228, 0, 684, 0, 665, 0, 96,
	97, 98, 0, 99, 0, 100, 101, 102, 0, 302,
	103, 104, 0, 666, 668, 0, 667, 669, 105, 106,
	271, 107, 694, 108, 695, 696, 0, 109, 0, 110,
	0, 0, 0, 687, 112, 0, 113, 0, 0, 0,
	630, 114, 115, 674, 675, 653, 0, 0, 116, 117,
	697, 0, 118, 0, 119, 0, 0, 303, 0, 120,
	685, 0, 238, 0, 121, 122, 123, 124, 681, 683,
	305, 0, 128, 0, 125, 0, 304, 126, 698, 127,
	699, 700, 701, 0, 664, 0, 306, 129, 307, 130,
	131, 0, 133, 132, 0, 686, 308, 134, 309, 0,
	135, 0, 0, 136, 0, 137, 138, 139, 141, 247,
	140, 310, 142, 143, 145, 144, 625, 0, 654, 682,
	146, 702, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 250, 311, 152, 312, 676, 153, 154, 155,
	156, 0, 677, 157, 253, 158, 0, 159, 160, 161,
	703, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 0, 174, 313, 175, 176, 631,
	177, 0, 178, 179, 180, 181, 0, 256, 182, 183,
	670, 184, 185, 314, 186, 704, 258, 187, 0, 193,
	188, 189, 190, 192, 705, 191, 678, 0, 194, 0,
	195, 196, 197, 198, 199, 0, 261, 706, 707, 0,
	0, 200, 679, 680, 652, 201, 202, 203, 204, 0,
	0, 205, 206, 207, 671, 208, 0, 209, 210, 211,
	266, 708, 0, 0, 212, 0, 0, 0, 0, 213,
	214, 215, 216, 626, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 623, 0, 0, 0, 0,
	624, 0, 0, 632, 1242, 0, 0, 0, 635, 657,
	646, 647, 644, 645, 636, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 673, 639, 0, 0, 0, 90, 91,
	92, 218, 688, 220, 689, 93, 690, 691, 0, 94,
	224, 225, 95, 642, 672, 692, 693, 228, 0, 684,
	0, 665, 0, 96, 97, 98, 0, 99, 0, 100,
	101, 102, 0, 302, 103, 104, 0, 666, 668, 0,
	667, 669, 105, 106, 271, 107, 694, 108, 695, 696,
	0, 109, 0, 110, 0, 0, 0, 687, 112, 0,
	113, 0, 0, 0, 630, 114, 115, 674, 675, 653,
	0, 0, 116, 117, 697, 0, 118, 0, 119, 0,
	0, 303, 0, 120, 685, 0, 238, 0, 121, 122,
	123, 124, 681, 683, 305, 0, 128, 0, 125, 0,
	304, 126, 698, 127, 699, 700, 701, 0, 664, 0,
	306, 129, 307, 130, 131, 0, 133, 132, 0, 686,
	308, 134, 309, 0, 135, 0, 0, 136, 0, 137,
	138, 139, 141, 247, 140, 310, 142, 143, 145, 144,
	625, 0, 654, 682, 146, 702, 147, 148, 0, 149,
	0, 0, 150, 0, 0, 151, 250, 311, 152, 312,
	676, 153, 154, 155, 156, 0, 677, 157, 253, 158,
	0, 159, 160, 161, 703, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 0, 174,
	313, 175, 176, 631, 177, 0, 178, 179, 180, 181,
	0, 256, 182, 183, 670, 184, 185, 314, 186, 704,
	258, 187, 0, 193, 188, 189, 190, 192, 705, 191,
	678, 0, 194, 0, 195, 196, 197, 198, 199, 0,
	261, 706, 707, 0, 0, 200, 679, 680, 652, 201,
	202, 203, 204, 0, 0, 205, 206, 207, 671, 208,
	0, 209, 210, 211, 266, 708, 0, 0, 212, 0,
	0, 0, 0, 213, 214, 215, 216, 626, 0, 0,
	0, 0, 657, 646, 647, 644, 645, 636, 622, 623,
	620, 0, 0, 0, 624, 0, 0, 632, 87, 88,
	906, 89, 635, 0, 0, 0, 673, 639, 0, 0,
	0, 90, 91, 92, 218, 688, 220, 689, 93, 690,
	691, 0, 94, 224, 225, 95, 642, 672, 692, 693,
	228, 0, 684, 0, 665, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 102, 0, 302, 103, 104, 0,
	666, 668, 0, 667, 669, 105, 106, 271, 107, 694,
	108, 695, 696, 0, 109, 0, 110, 0, 0, 0,
	687, 112, 0, 113, 0, 0, 0, 630, 114, 115,
	674, 675, 653, 0, 0, 116, 117, 697, 0, 118,
	0, 119, 0, 0, 303, 0, 120, 685, 0, 238,
	0, 121, 122, 123, 124, 681, 683, 305, 0, 128,
	0, 125, 0, 304, 126, 698, 127, 699, 700, 701,
	0, 664, 0, 306, 129, 307, 130, 131, 0, 133,
	132, 0, 686, 308, 134, 309, 0, 135, 0, 0,
	136, 0, 137, 138, 139, 141, 247, 140, 310, 142,
	143, 145, 144, 625, 0, 654, 682, 146, 702, 147,
	148, 0, 149, 0, 0, 150, 0, 0, 151, 250,
	311, 152, 312, 676, 153, 154, 155, 156, 0, 677,
	157, 253, 158, 0, 159, 160, 161, 703, 162, 163,
	0, 164, 165, 166, 167, 168, 170, 171, 169, 172,
	173, 0, 174, 313, 175, 176, 631, 177, 0, 178,
	179, 180, 181, 0, 256, 182, 183, 670, 184, 185,
	314, 186, 704, 258, 187, 0, 193, 188, 189, 190,
	192, 705, 191, 678, 0, 194, 0, 195, 196, 197,
	198, 199, 0, 261, 706, 707, 0, 0, 200, 679,
	680, 652, 201, 202, 203, 204, 0, 0, 205, 206,
	207, 671, 208, 0, 209, 210, 211, 266, 708, 0,
	0, 212, 0, 0, 0, 0, 213, 214, 215, 216,
	626, 0, 657, 646, 647, 644, 645, 636, 0, 0,
	0, 622, 623, 0, 0, 0, 0, 624, 87, 88,
	632, 89, 0, 0, 0, 635, 673, 639, 0, 0,
	0, 90, 91, 92, 218, 688, 220, 689, 93, 690,
	691, 0, 94, 224, 225, 95, 642, 672, 692, 693,
	228, 0, 684, 0, 665, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 102, 0, 302, 103, 2055, 0,
	666, 668, 0, 667, 669, 105, 106, 271, 107, 694,
	108, 695, 696, 0, 109, 0, 110, 0, 0, 0,
	687, 112, 0, 113, 0, 0, 0, 630, 114, 115,
	674, 675, 653, 0, 0, 116, 117, 697, 0, 118,
	0, 119, 0, 0, 303, 0, 120, 685, 0, 238,
	0, 121, 122, 123, 124, 681, 683, 305, 0, 128,
	0, 125, 0, 304, 126, 698, 127, 699, 700, 701,
	0, 664, 0, 306, 129, 307, 130, 131, 0, 133,
	132, 0, 686, 308, 134, 309, 0, 135, 0, 0,
	136, 0, 137, 138, 139, 141, 247, 140, 310, 142,
	143, 145, 144, 625, 0, 654, 682, 146, 702, 147,
	148, 0, 149, 0, 0, 150, 0, 0, 151, 250,
	311, 152, 312, 676, 153, 154, 155, 156, 0, 677,
	157, 253, 158, 0, 159, 160, 161, 703, 162, 163,
	0, 164, 165, 166, 167, 168, 170, 171, 169, 172,
	173, 0, 174, 313, 175, 176, 631, 177, 0, 178,
	179, 180, 181, 0, 256, 182, 183, 670, 184, 185,
	314, 186, 704, 258, 187, 0, 193, 188, 189, 190,
	192, 705, 191, 678, 0, 194, 0, 195, 196, 197,
	198, 199, 0, 261, 706, 707, 0, 0, 200, 679,
	680, 652, 201, 202, 2054, 204, 0, 0, 205, 206,
	207, 671, 208, 0, 209, 210, 211, 266, 708, 0,
	0, 212, 0, 0, 0, 0, 213, 214, 215, 216,
	626, 0, 657, 646, 647, 644, 645, 636, 0, 0,
	0, 622, 623, 0, 0, 0, 0, 624, 87, 88,
	632, 89, 0, 0, 0, 635, 673, 639, 0, 0,
	0, 90, 91, 92, 2053, 688, 220, 689, 93, 690,
	691, 0, 94, 224, 225, 95, 642, 672, 692, 693,
	228, 0, 684, 0, 665, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 102, 0, 302, 103, 2055, 0,
	666, 668, 0, 667, 669, 105, 106, 271, 107, 694,
	108, 695, 696, 0, 109, 0, 110, 0, 0, 0,
	687, 112, 0, 113, 0, 0, 0, 630, 114, 115,
	674, 675, 653, 0, 0, 116, 117, 697, 0, 118,
	0, 119, 0, 0, 303, 0, 120, 685, 0, 238,
	0, 121, 122, 123, 124, 681, 683, 305, 0, 128,
	0, 125, 0, 304, 126, 698, 127, 699, 700, 701,
	0, 664, 0, 306, 129, 307, 130, 131, 0, 133,
	132, 0, 686, 308, 134, 309, 0, 135, 0, 0,
	136, 0, 137, 138, 139, 141, 247, 140, 310, 142,
	143, 145, 144, 625, 0, 654, 682, 146, 702, 147,
	148, 0, 149, 0, 0, 150, 0, 0, 151, 250,
	311, 152, 312, 676, 153, 154, 155, 156, 0, 677,
	157, 253, 158, 0, 159, 160, 161, 703, 162, 163,
	0, 164, 165, 166, 167, 168, 170, 171, 169, 172,
	173, 0, 174, 313, 175, 176, 631, 177, 0, 178,
	179, 180, 181, 0, 256, 182, 183, 670, 184, 185,
	314, 186, 704, 258, 187, 0, 193, 188, 189, 190,
	192, 705, 191, 678, 0, 194, 0, 195, 196, 197,
	198, 199, 0, 261, 706, 707, 0, 0, 200, 679,
	680, 652, 201, 202, 2054, 204, 0, 0, 205, 206,
	207, 671, 208, 0, 209, 210, 211, 266, 708, 0,
	0, 212, 0, 0, 0, 0, 213, 214, 215, 216,
	626, 0, 657, 646, 647, 644, 645, 636, 0, 0,
	0, 622, 623, 0, 0, 0, 0, 624, 87, 88,
	632, 89, 0, 0, 0, 635, 673, 639, 0, 0,
	0, 90, 91, 92, 218, 688, 220, 689, 93, 690,
	691, 0, 94, 224, 225, 95, 642, 672, 692, 693,
	228, 0, 684, 0, 665, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 102, 0, 302, 103, 104, 0,
	666, 668, 0, 667, 669, 105, 106, 271, 107, 694,
	108, 695, 696, 0, 109, 0, 110, 0, 0, 0,
	687, 112, 0, 113, 0, 0, 0, 630, 114, 115,
	674, 675, 653, 0, 0, 116, 117, 697, 0, 118,
	0, 119, 0, 0, 303, 0, 120, 685, 0, 238,
	0, 121, 122, 123, 124, 681, 683, 305, 0, 128,
	0, 125, 0, 304, 126, 698, 127, 699, 700, 701,
	0, 664, 0, 306, 129, 307, 130, 131, 0, 133,
	132, 0, 686, 308, 134, 309, 0, 135, 0, 0,
	136, 0, 137, 138, 139, 141, 247, 140, 310, 142,
	143, 145, 144, 625, 0, 654, 682, 146, 702, 147,
	148, 0, 149, 0, 0, 150, 0, 0, 151, 250,
	311, 152, 312, 676, 153, 154, 155, 156, 0, 677,
	157, 253, 158, 0, 159, 160, 161, 703, 162, 163,
	0, 164, 165, 166, 167, 168, 170, 171, 169, 172,
	173, 0, 174, 313, 175, 176, 631, 177, 0, 178,
	179, 180, 181, 0, 256, 182, 183, 670, 184, 185,
	314, 186, 704, 258, 187, 0, 193, 188, 189, 190,
	192, 705, 191, 678, 0, 194, 0, 195, 196, 197,
	198, 199, 0, 261, 706, 707, 0, 0, 200, 679,
	680, 652, 201, 202, 203, 204, 0, 0, 205, 206,
	207, 671, 208, 0, 209, 210, 211, 266, 708, 0,
	0, 212, 0, 0, 0, 0, 213, 214, 215, 216,
	626, 0, 1271, 646, 647, 644, 645, 636, 0, 0,
	0, 622, 623, 0, 0, 0, 0, 624, 87, 88,
	632, 89, 0, 0, 0, 635, 673, 639, 0, 0,
	0, 90, 91, 92, 218, 688, 220, 689, 93, 690,
	691, 0, 94, 224, 225, 95, 642, 672, 692, 693,
	228, 0, 684, 0, 665, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 102, 0, 302, 103, 104, 0,
	666, 668, 0, 667, 669, 105, 106, 271, 107, 694,
	1274, 695, 696, 0, 109, 0, 110, 0, 0, 0,
	687, 112, 0, 113, 0, 0, 0, 630, 114, 115,
	674, 675, 653, 0, 0, 116, 117, 697, 0, 118,
	0, 119, 0, 0, 303, 0, 120, 685, 0, 238,
	0, 121, 122, 1275, 124, 681, 683, 305, 0, 128,
	0, 125, 0, 304, 126, 698, 127, 699, 700, 701,
	0, 664, 0, 306, 129, 307, 130, 131, 0, 133,
	132, 0, 686, 308, 134, 309, 0, 135, 0, 0,
	136, 0, 137, 1276, 1273, 141, 247, 140, 310, 142,
	143, 145, 144, 625, 0, 654, 682, 146, 702, 147,
	148, 0, 149, 0, 0, 150, 0, 0, 151, 250,
	311, 152, 312, 676, 153, 154, 155, 156, 0, 677,
	157, 253, 158, 0, 159, 160, 161, 703, 162, 163,
	0, 164, 165, 166, 167, 168, 170, 171, 169, 172,
	173, 0, 174, 313, 175, 176, 631, 177, 0, 178,
	179, 180, 1277, 0, 256, 182, 183, 670, 184, 185,
	314, 186, 704, 258, 187, 0, 193, 188, 189, 190,
	192, 705, 191, 678, 0, 194, 0, 195, 196, 197,
	198, 199, 0, 261, 706, 707, 0, 0, 200, 679,
	680, 652, 201, 202, 203, 204, 0, 0, 205, 206,
	207, 671, 208, 0, 209, 210, 211, 266, 708, 0,
	0, 212, 0, 0, 0, 0, 213, 214, 1272, 216,
	626, 0, 657, 646, 647, 644, 645, 636, 0, 0,
	0, 622, 623, 0, 0, 0, 0, 624, 87, 88,
	632, 89, 0, 0, 0, 635, 673, 639, 0, 0,
	0, 90, 91, 92, 218, 688, 220, 689, 93, 690,
	691, 0, 94, 224, 225, 95, 642, 672, 692, 693,
	228, 0, 684, 0, 665, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 102, 0, 302, 103, 104, 0,
	666, 668, 0, 667, 669, 105, 106, 271, 107, 694,
	108, 695, 696, 0, 109, 0, 110, 0, 0, 0,
	687, 112, 0, 113, 0, 0, 0, 630, 114, 115,
	674, 675, 653, 0, 0, 116, 117, 697, 0, 118,
	0, 119, 0, 0, 303, 0, 120, 685, 0, 238,
	0, 121, 122, 123, 124, 681, 683, 305, 0, 128,
	0, 125, 0, 304, 126, 698, 127, 699, 700, 701,
	0, 664, 0, 306, 129, 307, 130, 131, 0, 133,
	132, 0, 686, 308, 134, 309, 0, 135, 0, 0,
	136, 0, 137, 138, 139, 141, 247, 140, 310, 142,
	143, 145, 144, 0, 0, 654, 682, 146, 702, 147,
	148, 0, 149, 0, 0, 150, 0, 0, 151, 250,
	311, 152, 312, 676, 153, 154, 155, 156, 0, 677,
	157, 253, 158, 0, 159, 160, 161, 703, 162, 163,
	0, 164, 165, 166, 167, 168, 170, 171, 169, 172,
	173, 0, 174, 313, 175, 176, 1289, 177, 0, 178,
	179, 180, 181, 0, 256, 182, 183, 670, 184, 185,
	314, 186, 704, 258, 187, 0, 193, 188, 189, 190,
	192, 705, 191, 678, 0, 194, 0, 195, 196, 197,
	198, 199, 0, 261, 706, 707, 0, 0, 200, 679,
	680, 652, 201, 202, 203, 204, 0, 0, 205, 206,
	207, 671, 208, 0, 209, 210, 211, 266, 708, 0,
	0, 212, 0, 0, 0, 0, 213, 214, 215, 216,
	0, 0, 657, 646, 647, 644, 645, 636, 0, 0,
	0, 1285, 1286, 0, 0, 0, 0, 1287, 87, 88,
	1288, 89, 0, 0, 0, 635, 673, 639, 0, 0,
	0, 90, 91, 92, 0, 688, 220, 689, 93, 690,
	691, 0, 94, 224, 225, 95, 642, 672, 692, 693,
	228, 0, 684, 0, 665, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 102, 0, 302, 103, 2055, 0,
	666, 668, 0, 667, 669, 105, 106, 271, 107, 694,
	108, 695, 696, 0, 109, 0, 110, 0, 0, 0,
	687, 112, 0, 113, 0, 0, 0, 630, 114, 115,
	674, 675, 653, 0, 0, 116, 117, 697, 0, 118,
	0, 119, 0, 0, 303, 0, 120, 685, 0, 238,
	0, 121, 122, 123, 124, 681, 683, 0, 0, 128,
	0, 125, 0, 304, 126, 698, 127, 699, 700, 701,
	0, 664, 0, 0, 129, 307, 130, 131, 0, 133,
	132, 0, 686, 308, 134, 0, 0, 135, 0, 0,
	136, 0, 137, 138, 139, 141, 247, 140, 310, 142,
	143, 145, 144, 625, 0, 654, 682, 146, 702, 147,
	148, 0, 149, 0, 0, 150, 0, 0, 151, 250,
	311, 152, 312, 676, 153, 154, 155, 156, 0, 677,
	157, 253, 158, 0, 159, 160, 161, 703, 162, 163,
	0, 164, 165, 166, 167, 168, 170, 171, 169, 172,
	173, 0, 174, 313, 175, 176, 631, 177, 0, 178,
	179, 180, 181, 0, 256, 182, 183, 670, 184, 185,
	0, 186, 704, 258, 187, 0, 193, 188, 189, 190,
	192, 705, 191, 678, 0, 194, 0, 195, 196, 197,
	198, 199, 0, 261, 706, 707, 0, 0, 200, 679,
	680, 652, 201, 202, 2054, 204, 0, 0, 205, 206,
	207, 671, 208, 0, 209, 210, 211, 266, 708, 0,
	0, 212, 0, 0, 0, 0, 213, 214, 215, 216,
	0, 0, 657, 646, 647, 644, 645, 636, 0, 0,
	0, 622, 623, 0, 0, 0, 0, 624, 87, 88,
	632, 89, 0, 0, 0, 635, 673, 639, 0, 0,
	0, 90, 91, 92, 218, 688, 220, 689, 93, 690,
	691, 0, 94, 224, 225, 95, 0, 672, 692, 693,
	228, 0, 684, 0, 665, 0, 96, 97, 98, 0,
	99, 0, 100, 101, 102, 0, 302, 103, 104, 0,
	666, 668, 0, 667, 669, 105, 106, 271, 107, 694,
	108, 695, 696, 0, 109, 0, 110, 0, 0, 0,
	687, 112, 0, 113, 0, 0, 0, 233, 114, 115,
	674, 675, 653, 0, 0, 116, 117, 697, 0, 118,
	0, 119, 0, 0, 303, 0, 120, 685, 0, 238,
	0, 121, 122, 123, 124, 681, 683, 305, 0, 128,
	0, 125, 0, 304, 126, 698, 127, 699, 700, 701,
	0, 664, 0, 306, 129, 307, 130, 131, 0, 133,
	132, 0, 686, 308, 134, 309, 0, 135, 0, 0,
	136, 0, 137, 138, 139, 141, 247, 140, 310, 142,
	143, 145, 144, 0, 0, 654, 682, 146, 702, 147,
	148, 0, 149, 0, 0, 150, 0, 0, 151, 250,
	311, 152, 312, 676, 153, 154, 155, 156, 0, 677,
	157, 253, 158, 0, 159, 160, 161, 703, 162, 163,
	0, 164, 165, 166, 167, 168, 170, 171, 169, 172,
	173, 0, 174, 313, 175, 176, 1289, 177, 0, 178,
	179, 180, 181, 0, 256, 182, 183, 670, 184, 185,
	314, 186, 704, 258, 187, 0, 193, 188, 189, 190,
	192, 705, 191, 678, 0, 194, 0, 195, 196, 197,
	198, 199, 0, 261, 706, 707, 0, 0, 200, 679,
	680, 652, 201, 202, 203, 204, 657, 0, 205, 206,
	207, 671, 208, 0, 209, 210, 211, 266, 708, 0,
	0, 212, 87, 88, 0, 89, 213, 214, 215, 216,
	673, 0, 0, 0, 0, 90, 91, 92, 218, 219,
	220, 221, 93, 222, 223, 0, 94, 224, 225, 95,
	1288, 672, 226, 227, 228, 635, 684, 0, 665, 0,
	96, 97, 98, 0, 99, 0, 100, 101, 102, 0,
	302, 103, 104, 0, 666, 668, 0, 667, 669, 105,
	106, 271, 107, 230, 108, 231, 232, 0, 109, 0,
	110, 0, 0, 0, 111, 112, 0, 113, 0, 0,
	0, 233, 114, 115, 674, 675, 0, 0, 0, 116,
	117, 236, 0, 118, 0, 119, 0, 0, 303, 0,
	120, 685, 0, 238, 0, 121, 122, 123, 124, 681,
	683, 305, 0, 128, 0, 125, 0, 304, 126, 241,
	127, 242, 243, 244, 0, 245, 0, 306, 129, 307,
	130, 131, 0, 133, 132, 0, 686, 308, 134, 309,
	0, 135, 0, 0, 136, 0, 137, 138, 139, 141,
	247, 140, 310, 142, 143, 145, 144, 0, 0, 0,
	682, 146, 249, 147, 148, 0, 149, 0, 0, 150,
	0, 0, 151, 250, 311, 152, 312, 676, 153, 154,
	155, 156, 0, 677, 157, 253, 158, 0, 159, 160,
	161, 254, 162, 163, 0, 164, 165, 166, 167, 168,
	170, 171, 169, 172, 173, 0, 174, 313, 175, 176,
	255, 177, 0, 178, 179, 180, 181, 0, 256, 182,
	183, 670, 184, 185, 314, 186, 257, 258, 187, 0,
	193, 188, 189, 190, 192, 259, 191, 678, 0, 194,
	0, 195, 196, 197, 198, 199, 0, 261, 262, 263,
	0, 0, 200, 679, 680, 0, 201, 202, 203, 204,
	532, 0, 205, 206, 207, 671, 208, 0, 209, 210,
	211, 266, 267, 0, 0, 212, 87, 88, 0, 89,
	213, 214, 215, 216, 217, 0, 0, 0, 0, 90,
	91, 92, 218, 219, 220, 221, 93, 222, 223, 0,
	94, 224, 225, 95, 1556, 0, 226, 227, 228, 0,
	229, 0, 301, 0, 96, 97, 98, 0, 99, 0,
	100, 101, 102, 0, 302, 103, 104, 0, 0, 0,
	0, 0, 0, 105, 106, 271, 107, 230, 108, 231,
	232, 0, 109, 0, 110, 0, 0, 0, 111, 112,
	0, 113, 0, 0, 0, 233, 114, 115, 234, 235,
	0, 0, 0, 116, 117, 236, 0, 118, 0, 119,
	0, 0, 303, 0, 120, 237, 0, 238, 0, 121,
	122, 123, 124, 239, 240, 305, 0, 128, 0, 125,
	0, 304, 126, 241, 127, 242, 243, 244, 0, 245,
	0, 306, 129, 307, 130, 131, 0, 133, 132, 0,
	246, 308, 134, 309, 0, 135, 0, 0, 136, 0,
	137, 138, 139, 141, 247, 140, 310, 142, 143, 145,
	144, 0, 0, 0, 248, 146, 249, 147, 148, 0,
	149, 0, 0, 150, 0, 0, 151, 250, 311, 152,
	312, 251, 153, 154, 155, 156, 0, 252, 157, 253,
	158, 0, 159, 160, 161, 254, 162, 163, 0, 164,
	165, 166, 167, 168, 170, 171, 169, 172, 173, 0,
	174, 313, 175, 176, 255, 177, 0, 178, 179, 180,
	181, 68, 256, 182, 183, 0, 184, 185, 314, 186,
	257, 258, 187, 0, 193, 188, 189, 190, 192, 259,
	191, 260, 0, 194, 70, 195, 196, 197, 198, 199,
	0, 261, 262, 263, 0, 0, 200, 264, 265, 0,
	201, 202, 203, 204, 0, 0, 205, 206, 207, 0,
	208, 0, 209, 210, 211, 536, 267, 0, 0, 212,
	0, 0, 0, 66, 213, 214, 215, 216, 0, 67,
	532, 746, 0, 854, 851, 846, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 65, 89,
	0, 0, 0, 0, 217, 0, 0, 0, 0, 90,
	91, 92, 218, 219, 220, 221, 93, 222, 223, 0,
	94, 224, 225, 95, 0, 0, 226, 227, 228, 0,
	229, 0, 301, 0, 96, 97, 98, 0, 99, 0,
	100, 101, 102, 0, 302, 103, 104, 0, 0, 0,
	0, 0, 0, 105, 106, 271, 107, 230, 108, 231,
	232, 857, 109, 0, 110, 0, 0, 0, 111, 112,
	0, 113, 0, 0, 0, 233, 114, 115, 234, 235,
	848, 0, 0, 116, 117, 236, 0, 118, 0, 119,
	0, 0, 303, 0, 120, 237, 0, 238, 0, 121,
	122, 123, 124, 239, 240, 305, 0, 128, 0, 125,
	0, 304, 126, 241, 127, 242, 243, 244, 0, 245,
	0, 306, 129, 307, 130, 131, 0, 133, 132, 0,
	246, 308, 134, 309, 0, 135, 0, 0, 136, 0,
	137, 138, 139, 141, 247, 140, 310, 142, 143, 145,
	144, 0, 0, 0, 248, 146, 249, 147, 148, 0,
	149, 849, 0, 150, 0, 0, 151, 250, 311, 152,
	312, 251, 153, 154, 155, 156, 0, 252, 157, 253,
	158, 0, 159, 160, 161, 254, 162, 163, 0, 164,
	165, 166, 167, 168, 170, 171, 169, 172, 173, 0,
	174, 313, 175, 176, 255, 177, 0, 178, 179, 180,
	181, 0, 256, 182, 183, 0, 184, 185, 314, 186,
	257, 258, 187, 0, 193, 188, 189, 190, 192, 259,
	191, 260, 0, 194, 0, 195, 196, 197, 198, 199,
	0, 261, 262, 263, 0, 0, 200, 264, 265, 847,
	201, 202, 203, 204, 0, 0, 205, 206, 207, 0,
	208, 0, 209, 210, 211, 266, 267, 532, 746, 212,
	854, 851, 846, 0, 213, 214, 215, 216, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 0, 855,
	852, 217, 0, 0, 0, 0, 90, 91, 92, 218,
	219, 220, 221, 93, 222, 223, 0, 94, 224, 225,
	95, 0, 0, 226, 227, 228, 0, 229, 0, 301,
	0, 96, 97, 98, 0, 99, 0, 100, 101, 102,
	0, 302, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 271, 107, 230, 108, 231, 232, 842, 109,
	0, 110, 0, 0, 0, 111, 112, 0, 113, 0,
	0, 0, 233, 114, 115, 234, 235, 848, 0, 0,
	116, 117, 236, 0, 118, 0, 119, 0, 0, 303,
	0, 120, 237, 0, 238, 0, 121, 122, 123, 124,
	239, 240, 305, 0, 128, 0, 125, 0, 304, 126,
	241, 127, 242, 243, 244, 0, 245, 0, 306, 129,
	307, 130, 131, 0, 133, 132, 0, 246, 308, 134,
	309, 0, 135, 0, 0, 136, 0, 137, 138, 139,
	141, 247, 140, 310, 142, 143, 145, 144, 0, 0,
	0, 248, 146, 249, 147, 148, 0, 149, 849, 0,
	150, 0, 0, 151, 250, 311, 152, 312, 251, 153,
	154, 155, 156, 0, 252, 157, 253, 158, 0, 159,
	160, 161, 254, 162, 163, 0, 164, 165, 166, 167,
	168, 170, 171, 169, 172, 173, 0, 174, 313, 175,
	176, 255, 177, 0, 178, 179, 180, 181, 0, 256,
	182, 183, 0, 184, 185, 314, 186, 257, 258, 187,
	0, 193, 188, 189, 190, 192, 259, 191, 260, 0,
	194, 0, 195, 196, 197, 198, 199, 0, 261, 262,
	263, 0, 0, 200, 264, 265, 847, 201, 202, 203,
	204, 0, 0, 205, 206, 207, 0, 208, 0, 209,
	210, 211, 266, 267, 532, 746, 212, 854, 851, 846,
	0, 213, 214, 215, 216, 0, 0, 0, 0, 0,
	87, 88, 0, 89, 0, 0, 855, 852, 217, 0,
	0, 0, 0, 90, 91, 92, 218, 219, 220, 221,
	93, 222, 223, 0, 94, 224, 225, 95, 0, 0,
	226, 227, 228, 0, 229, 0, 301, 0, 96, 97,
	98, 0, 99, 0, 100, 101, 102, 0, 302, 103,
	104, 0, 0, 0, 0, 0, 0, 105, 106, 271,
	107, 230, 108, 231, 232, 0, 109, 0, 110, 0,
	0, 0, 111, 112, 0, 113, 0, 0, 0, 233,
	114, 115, 234, 235, 848, 0, 0, 116, 117, 236,
	0, 118, 0, 119, 0, 0, 303, 0, 120, 237,
	0, 238, 0, 121, 122, 123, 124, 239, 240, 305,
	0, 128, 0, 125, 0, 304, 126, 241, 127, 242,
	243, 244, 0, 245, 0, 306, 129, 307, 130, 131,
	0, 133, 132, 0, 246, 308, 134, 309, 0, 135,
	0, 0, 136, 0, 137, 138, 139, 141, 247, 140,
	310, 142, 143, 145, 144, 0, 0, 0, 248, 146,
	249, 147, 148, 0, 149, 849, 0, 150, 0, 0,
	151, 250, 311, 152, 312, 251, 153, 154, 155, 156,
	0, 252, 157, 253, 158, 0, 159, 160, 161, 254,
	162, 163, 0, 164, 165, 166, 167, 168, 170, 171,
	169, 172, 173, 0, 174, 313, 175, 176, 255, 177,
	0, 178, 179, 180, 181, 0, 256, 182, 183, 0,
	184, 185, 314, 186, 257, 258, 187, 0, 193, 188,
	189, 190, 192, 259, 191, 260, 0, 194, 0, 195,
	196, 197, 198, 199, 0, 261, 262, 263, 0, 0,
	200, 264, 265, 847, 201, 202, 203, 204, 0, 0,
	205, 206, 207, 0, 208, 0, 209, 210, 211, 266,
	267, 84, 0, 212, 0, 0, 0, 0, 213, 214,
	215, 216, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 0, 855, 852, 217, 0, 0, 0, 0,
	90, 91, 92, 218, 219, 220, 221, 93, 222, 223,
	0, 94, 224, 225, 95, 0, 0, 226, 227, 228,
	0, 229, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 101, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 271, 107, 230, 108,
	231, 232, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 233, 114, 115, 234,
	235, 0, 0, 0, 116, 117, 236, 0, 118, 0,
	119, 0, 0, 0, 0, 120, 237, 0, 238, 0,
	121, 122, 123, 124, 239, 240, 0, 0, 128, 0,
	125, 0, 0, 126, 241, 127, 242, 243, 244, 0,
	245, 0, 0, 129, 0, 130, 131, 0, 133, 132,
	0, 246, 0, 134, 0, 0, 135, 0, 0, 136,
	0, 137, 138, 139, 141, 247, 140, 0, 142, 143,
	145, 144, 0, 0, 0, 248, 146, 249, 147, 148,
	0, 149, 0, 486, 150, 0, 0, 151, 250, 0,
	152, 0, 251, 153, 154, 155, 156, 0, 252, 157,
	253, 158, 0, 159, 160, 161, 254, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	0, 174, 0, 175, 176, 255, 177, 0, 178, 179,
	180, 181, 68, 256, 182, 183, 0, 184, 185, 0,
	186, 257, 258, 187, 0, 193, 188, 189, 190, 192,
	259, 191, 260, 0, 194, 70, 195, 196, 197, 198,
	199, 0, 261, 262, 263, 0, 0, 200, 264, 265,
	0, 201, 202, 203, 204, 0, 0, 205, 206, 207,
	0, 208, 0, 209, 210, 211, 536, 267, 0, 0,
	212, 84, 0, 0, 66, 213, 214, 215, 216, 0,
	67, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 0, 0, 0, 217, 0, 1166, 0, 1171,
	90, 91, 92, 218, 219, 220, 221, 93, 222, 223,
	0, 94, 224, 225, 95, 0, 0, 226, 227, 228,
	0, 229, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 101, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 271, 107, 230, 108,
	231, 232, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 233, 114, 115, 234,
	235, 0, 0, 0, 116, 117, 236, 0, 118, 0,
	119, 0, 0, 0, 0, 120, 237, 0, 238, 0,
	121, 122, 123, 124, 239, 240, 0, 0, 128, 0,
	125, 0, 0, 126, 241, 127, 242, 243, 244, 0,
	245, 0, 0, 129, 0, 130, 131, 0, 133, 132,
	0, 246, 0, 134, 0, 0, 135, 0, 0, 136,
	0, 137, 138, 139, 141, 247, 140, 0, 142, 143,
	145, 144, 0, 0, 0, 248, 146, 249, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 250, 0,
	152, 0, 251, 153, 154, 155, 156, 0, 252, 157,
	253, 158, 0, 159, 160, 161, 254, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	0, 174, 0, 175, 176, 255, 177, 0, 178, 179,
	180, 181, 68, 256, 182, 183, 0, 184, 185, 0,
	186, 257, 258, 187, 0, 193, 188, 189, 190, 192,
	259, 191, 260, 0, 194, 70, 195, 196, 197, 198,
	199, 0, 261, 262, 263, 0, 0, 200, 264, 265,
	0, 201, 202, 203, 204, 0, 0, 205, 206, 207,
	0, 208, 0, 209, 210, 211, 536, 267, 0, 0,
	212, 84, 0, 0, 66, 213, 214, 215, 216, 0,
	67, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 0, 0, 0, 217, 0, 0, 0, 65,
	90, 91, 92, 218, 219, 220, 221, 93, 222, 223,
	0, 94, 224, 225, 95, 0, 0, 226, 227, 228,
	0, 229, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 101, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 271, 107, 230, 108,
	231, 232, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 233, 114, 115, 234,
	235, 0, 0, 0, 116, 117, 236, 0, 118, 0,
	119, 0, 0, 0, 0, 120, 237, 0, 238, 0,
	121, 122, 123, 124, 239, 240, 0, 0, 128, 0,
	125, 0, 0, 126, 241, 127, 242, 243, 244, 0,
	245, 0, 0, 129, 0, 130, 131, 0, 133, 132,
	0, 246, 0, 134, 0, 0, 135, 0, 0, 136,
	0, 137, 138, 139, 141, 247, 140, 0, 142, 143,
	145, 144, 0, 0, 0, 248, 146, 249, 147, 148,
	0, 149, 0, 486, 150, 0, 0, 151, 250, 0,
	152, 0, 251, 153, 154, 155, 156, 0, 252, 157,
	253, 158, 0, 159, 160, 161, 254, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	0, 174, 0, 175, 176, 255, 177, 0, 178, 179,
	180, 181, 0, 256, 182, 183, 0, 184, 185, 0,
	186, 257, 258, 187, 0, 193, 188, 189, 190, 192,
	259, 191, 260, 0, 194, 0, 195, 196, 197, 198,
	199, 0, 261, 262, 263, 0, 0, 200, 264, 265,
	0, 201, 202, 203, 204, 0, 0, 205, 206, 207,
	0, 208, 0, 209, 210, 211, 266, 267, 0, 0,
	212, 84, 0, 0, 0, 213, 214, 215, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 0, 0, 0, 217, 0, 1166, 0, 1171,
	90, 91, 92, 218, 219, 220, 221, 93, 222, 223,
	0, 94, 224, 225, 95, 0, 0, 226, 227, 228,
	0, 229, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 101, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 271, 107, 230, 108,
	231, 232, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 233, 114, 115, 234,
	235, 0, 0, 0, 116, 117, 236, 0, 118, 0,
	119, 0, 0, 0, 0, 120, 237, 0, 238, 0,
	121, 122, 123, 124, 239, 240, 0, 0, 128, 0,
	125, 0, 0, 126, 241, 127, 242, 243, 244, 0,
	245, 0, 0, 129, 0, 130, 131, 0, 133, 132,
	0, 246, 0, 134, 0, 0, 135, 0, 0, 136,
	0, 137, 138, 139, 141, 247, 140, 0, 142, 143,
	145, 144, 0, 0, 0, 248, 146, 249, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 250, 0,
	152, 0, 251, 153, 154, 155, 156, 0, 252, 157,
	253, 158, 0, 159, 160, 161, 254, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	0, 174, 0, 175, 176, 255, 177, 0, 178, 179,
	180, 181, 0, 256, 182, 183, 0, 184, 185, 0,
	186, 257, 258, 187, 0, 193, 188, 189, 190, 192,
	259, 191, 260, 0, 194, 0, 195, 196, 197, 198,
	199, 0, 261, 262, 263, 0, 0, 200, 264, 265,
	0, 201, 202, 203, 204, 84, 0, 205, 206, 207,
	0, 208, 0, 209, 210, 211, 266, 267, 0, 0,
	212, 87, 88, 0, 89, 213, 214, 215, 216, 217,
	0, 0, 0, 0, 90, 91, 92, 218, 219, 220,
	221, 93, 222, 223, 0, 94, 224, 225, 95, 0,
	754, 226, 227, 228, 0, 229, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 101, 102, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	271, 107, 230, 108, 231, 232, 0, 109, 0, 110,
	0, 0, 0, 111, 112, 0, 113, 0, 0, 0,
	233, 114, 115, 234, 235, 0, 0, 0, 116, 117,
	236, 0, 118, 0, 119, 0, 0, 0, 0, 120,
	237, 0, 238, 0, 121, 122, 123, 124, 239, 240,
	0, 0, 128, 0, 125, 0, 0, 126, 241, 127,
	242, 243, 244, 0, 245, 0, 0, 129, 0, 130,
	131, 0, 133, 132, 0, 246, 0, 134, 0, 0,
	135, 0, 0, 136, 0, 137, 138, 139, 141, 247,
	140, 0, 142, 143, 145, 144, 0, 0, 0, 248,
	146, 249, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 250, 0, 152, 0, 251, 153, 154, 155,
	156, 0, 252, 157, 253, 158, 0, 159, 160, 161,
	254, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 0, 174, 0, 175, 176, 255,
	177, 0, 178, 179, 180, 181, 0, 256, 182, 183,
	0, 184, 185, 0, 186, 257, 258, 187, 0, 193,
	188, 189, 190, 192, 259, 191, 260, 0, 194, 0,
	195, 196, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 84,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 0, 212, 87, 88, 0, 89, 213,
	214, 215, 216, 217, 0, 0, 0, 0, 90, 91,
	92, 218, 219, 220, 221, 93, 222, 223, 0, 94,
	224, 225, 95, 1077, 0, 226, 227, 228, 0, 229,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	101, 102, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 271, 107, 230, 108, 231, 232,
	0, 109, 0, 110, 0, 0, 0, 111, 112, 0,
	113, 0, 0, 0, 233, 114, 115, 234, 235, 0,
	0, 0, 116, 117, 236, 0, 118, 0, 119, 0,
	0, 0, 0, 120, 237, 0, 238, 0, 121, 122,
	123, 124, 239, 240, 0, 0, 128, 0, 125, 0,
	0, 126, 241, 127, 242, 243, 244, 0, 245, 0,
	0, 129, 0, 130, 131, 0, 133, 132, 0, 246,
	0, 134, 0, 0, 135, 0, 0, 136, 0, 137,
	138, 139, 141, 247, 140, 0, 142, 143, 145, 144,
	0, 0, 0, 248, 146, 249, 147, 148, 0, 149,
	0, 0, 150, 0, 0, 151, 250, 0, 152, 0,
	251, 153, 154, 155, 156, 0, 252, 157, 253, 158,
	0, 159, 160, 161, 254, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 0, 174,
	0, 175, 176, 255, 177, 0, 178, 179, 180, 181,
	0, 256, 182, 183, 0, 184, 185, 0, 186, 257,
	258, 187, 0, 193, 188, 189, 190, 192, 259, 191,
	260, 0, 194, 0, 195, 196, 197, 198, 199, 0,
	261, 262, 263, 0, 0, 200, 264, 265, 0, 201,
	202, 203, 204, 84, 0, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 266, 267, 0, 0, 212, 87,
	88, 0, 89, 213, 214, 215, 216, 217, 0, 0,
	0, 0, 90, 91, 92, 218, 219, 220, 221, 93,
	222, 223, 0, 94, 224, 225, 95, 1676, 0, 226,
	227, 228, 0, 229, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 101, 102, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 105, 106, 271, 107,
	230, 108, 231, 232, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 233, 114,
	115, 234, 235, 0, 0, 0, 116, 117, 236, 0,
	118, 0, 119, 0, 0, 0, 0, 120, 237, 0,
	238, 0, 121, 122, 123, 124, 239, 240, 0, 0,
	128, 0, 125, 0, 0, 126, 241, 127, 242, 243,
	244, 0, 245, 0, 0, 129, 0, 130, 131, 0,
	133, 132, 0, 246, 0, 134, 0, 0, 135, 0,
	0, 136, 0, 137, 138, 139, 141, 247, 140, 0,
	142, 143, 145, 144, 0, 0, 0, 248, 146, 249,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	250, 0, 152, 0, 251, 153, 154, 155, 156, 0,
	252, 157, 253, 158, 0, 159, 160, 161, 254, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 0, 174, 0, 175, 176, 255, 177, 0,
	178, 179, 180, 181, 0, 256, 182, 183, 0, 184,
	185, 0, 186, 257, 258, 187, 0, 193, 188, 189,
	190, 192, 259, 191, 260, 0, 194, 0, 195, 196,
	197, 198, 199, 0, 261, 262, 263, 0, 0, 200,
	264, 265, 0, 201, 202, 203, 204, 0, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 0, 212, 0, 0, 0, 0, 213, 214, 215,
	216, 657, 646, 647, 644, 645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 719, 0, 0, 0, 217, 0, 0, 0, 0,
	90, 91, 92, 218, 688, 220, 689, 93, 690, 691,
	0, 94, 224, 225, 95, 0, 0, 692, 693, 228,
	0, 229, 0, 301, 0, 96, 97, 98, 0, 99,
	0, 100, 101, 102, 0, 302, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 271, 107, 694, 108,
	695, 696, 0, 109, 0, 110, 0, 0, 0, 687,
	112, 0, 113, 0, 0, 0, 233, 114, 115, 234,
	235, 653, 0, 0, 116, 117, 697, 0, 118, 0,
	119, 0, 0, 303, 0, 120, 237, 0, 238, 0,
	121, 122, 123, 124, 239, 240, 305, 0, 128, 0,
	125, 0, 304, 126, 698, 127, 699, 700, 701, 0,
	664, 0, 306, 129, 307, 130, 131, 0, 133, 132,
	0, 246, 308, 134, 309, 0, 135, 0, 0, 136,
	0, 137, 138, 139, 141, 247, 140, 310, 142, 143,
	145, 144, 0, 0, 654, 248, 146, 702, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 250, 311,
	152, 312, 251, 153, 154, 155, 156, 0, 252, 157,
	253, 158, 0, 159, 160, 161, 703, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	0, 174, 313, 175, 176, 255, 177, 0, 178, 179,
	180, 181, 0, 256, 182, 183, 0, 184, 185, 314,
	186, 704, 258, 187, 0, 193, 188, 189, 190, 192,
	705, 191, 260, 0, 194, 0, 195, 196, 197, 198,
	199, 0, 261, 706, 707, 0, 0, 200, 264, 265,
	652, 201, 202, 203, 204, 532, 746, 205, 206, 207,
	744, 208, 0, 209, 210, 211, 266, 708, 0, 0,
	212, 87, 88, 0, 89, 213, 214, 215, 216, 217,
	0, 0, 0, 0, 90, 91, 92, 218, 219, 220,
	221, 93, 222, 223, 0, 94, 224, 225, 95, 0,
	0, 226, 227, 228, 0, 229, 0, 301, 0, 96,
	97, 98, 0, 99, 0, 100, 101, 102, 0, 302,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	271, 107, 230, 108, 231, 232, 0, 109, 0, 110,
	0, 0, 0, 111, 112, 0, 113, 0, 0, 0,
	233, 114, 115, 234, 235, 0, 0, 0, 116, 117,
	236, 0, 118, 0, 119, 0, 0, 303, 0, 120,
	237, 0, 238, 0, 121, 122, 123, 124, 239, 240,
	305, 0, 128, 0, 125, 0, 304, 126, 241, 127,
	242, 243, 244, 0, 245, 0, 306, 129, 307, 130,
	131, 0, 133, 132, 0, 246, 308, 134, 309, 0,
	135, 0, 0, 136, 0, 137, 138, 139, 141, 247,
	140, 310, 142, 143, 145, 144, 0, 0, 0, 248,
	146, 249, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 250, 311, 152, 312, 251, 153, 154, 155,
	156, 0, 252, 157, 253, 158, 0, 159, 160, 161,
	254, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 0, 174, 313, 175, 176, 255,
	177, 0, 178, 179, 180, 181, 0, 256, 182, 183,
	0, 184, 185, 314, 186, 257, 258, 187, 0, 193,
	188, 189, 190, 192, 259, 191, 260, 0, 194, 0,
	195, 196, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 84,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 0, 212, 87, 88, 0, 89, 213,
	214, 215, 216, 217, 0, 0, 0, 0, 90, 91,
	92, 218, 219, 220, 221, 93, 222, 223, 0, 94,
	224, 225, 95, 0, 0, 226, 227, 228, 0, 229,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	101, 102, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 80, 107, 230, 108, 231, 232,
	0, 109, 0, 110, 0, 0, 0, 111, 112, 0,
	113, 0, 0, 0, 233, 114, 115, 234, 235, 0,
	0, 0, 116, 117, 236, 0, 118, 0, 119, 0,
	0, 0, 0, 120, 237, 0, 238, 0, 121, 122,
	123, 124, 239, 240, 0, 0, 128, 0, 125, 0,
	0, 126, 241, 127, 242, 243, 244, 0, 245, 0,
	0, 129, 0, 130, 131, 0, 133, 132, 0, 246,
	0, 134, 0, 0, 135, 0, 0, 136, 0, 137,
	138, 139, 141, 247, 140, 0, 142, 143, 145, 144,
	0, 0, 0, 248, 146, 249, 147, 148, 0, 149,
	0, 0, 150, 0, 0, 151, 250, 0, 152, 0,
	251, 153, 154, 155, 156, 0, 252, 157, 253, 158,
	0, 159, 160, 161, 254, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 0, 174,
	0, 175, 176, 255, 177, 0, 178, 179, 180, 181,
	0, 256, 182, 183, 0, 184, 185, 0, 186, 257,
	258, 187, 0, 193, 188, 189, 190, 192, 259, 191,
	260, 0, 194, 79, 195, 196, 197, 198, 199, 0,
	261, 262, 263, 0, 0, 200, 264, 265, 0, 201,
	202, 203, 204, 0, 0, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 266, 267, 0, 0, 212, 532,
	746, 0, 0, 213, 214, 215, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	83, 0, 0, 217, 0, 0, 0, 0, 90, 91,
	92, 218, 219, 220, 221, 93, 222, 223, 0, 94,
	224, 225, 95, 0, 0, 226, 227, 228, 0, 229,
	0, 301, 0, 96, 97, 98, 0, 99, 0, 100,
	101, 102, 0, 302, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 271, 107, 230, 108, 231, 232,
	0, 109, 0, 110, 0, 0, 0, 111, 112, 0,
	113, 0, 0, 0, 233, 114, 115, 234, 235, 0,
	0, 0, 116, 117, 236, 0, 118, 0, 119, 0,
	0, 303, 0, 120, 237, 0, 238, 0, 121, 122,
	123, 124, 239, 240, 305, 0, 128, 0, 125, 0,
	304, 126, 241, 127, 242, 243, 244, 0, 245, 0,
	306, 129, 307, 130, 131, 0, 133, 132, 0, 246,
	308, 134, 309, 0, 135, 0, 0, 136, 0, 137,
	138, 139, 141, 247, 140, 310, 142, 143, 145, 144,
	0, 0, 0, 248, 146, 249, 147, 148, 0, 149,
	0, 0, 150, 0, 0, 151, 250, 311, 152, 312,
	251, 153, 154, 155, 156, 0, 252, 157, 253, 158,
	0, 159, 160, 161, 254, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 0, 174,
	313, 175, 176, 255, 177, 0, 178, 179, 180, 181,
	0, 256, 182, 183, 0, 184, 185, 314, 186, 257,
	258, 187, 0, 193, 188, 189, 190, 192, 259, 191,
	260, 0, 194, 0, 195, 196, 197, 198, 199, 0,
	261, 262, 263, 0, 0, 200, 264, 265, 0, 201,
	202, 203, 204, 84, 0, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 266, 267, 0, 0, 212, 87,
	88, 0, 89, 213, 214, 215, 216, 217, 0, 0,
	0, 0, 90, 91, 92, 218, 219, 220, 221, 93,
	222, 223, 0, 94, 224, 225, 95, 0, 0, 226,
	227, 228, 0, 229, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 101, 102, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 105, 106, 271, 107,
	230, 108, 231, 232, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 233, 114,
	115, 234, 235, 0, 0, 0, 116, 117, 236, 0,
	118, 0, 119, 0, 0, 0, 0, 120, 237, 0,
	238, 0, 121, 122, 123, 124, 239, 240, 0, 0,
	128, 0, 125, 0, 0, 126, 241, 127, 242, 243,
	244, 0, 245, 0, 0, 129, 0, 130, 131, 0,
	133, 132, 0, 246, 0, 134, 0, 0, 135, 0,
	0, 136, 0, 137, 138, 139, 141, 247, 140, 0,
	142, 143, 145, 144, 0, 0, 0, 248, 146, 249,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	250, 0, 152, 0, 251, 153, 154, 155, 156, 0,
	252, 157, 253, 158, 0, 159, 160, 161, 254, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 0, 174, 0, 175, 176, 255, 177, 0,
	178, 179, 180, 181, 0, 256, 182, 183, 0, 184,
	185, 0, 186, 257, 258, 187, 0, 193, 188, 189,
	190, 192, 259, 191, 260, 0, 194, 0, 195, 196,
	197, 198, 199, 0, 261, 262, 263, 0, 0, 200,
	264, 265, 0, 201, 202, 203, 204, 0, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 532, 212, 0, 0, 0, 0, 213, 214, 215,
	216, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 0, 0, 83, 217, 0, 0, 0, 0,
	90, 91, 92, 218, 219, 220, 221, 93, 222, 223,
	0, 94, 224, 225, 95, 0, 0, 226, 227, 228,
	0, 229, 0, 301, 0, 96, 97, 98, 0, 99,
	0, 100, 101, 102, 0, 302, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 271, 107, 230, 108,
	231, 232, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 233, 114, 115, 234,
	235, 0, 0, 0, 116, 117, 236, 0, 118, 0,
	119, 0, 0, 303, 0, 120, 237, 0, 238, 0,
	121, 122, 123, 124, 239, 240, 305, 0, 128, 0,
	125, 0, 304, 126, 241, 127, 242, 243, 244, 0,
	245, 0, 306, 129, 307, 130, 131, 0, 133, 132,
	0, 246, 308, 134, 309, 0, 135, 0, 0, 136,
	0, 137, 138, 139, 141, 247, 140, 310, 142, 143,
	145, 144, 0, 0, 0, 248, 146, 249, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 250, 311,
	152, 312, 251, 153, 154, 155, 156, 0, 252, 157,
	253, 158, 0, 159, 160, 161, 254, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	0, 174, 313, 175, 176, 255, 177, 0, 178, 179,
	180, 181, 0, 256, 182, 183, 0, 184, 185, 314,
	186, 257, 258, 187, 0, 193, 188, 189, 190, 192,
	259, 191, 260, 0, 194, 0, 195, 196, 197, 198,
	199, 0, 261, 262, 263, 0, 0, 200, 264, 265,
	0, 201, 202, 203, 204, 84, 0, 205, 206, 207,
	0, 208, 0, 209, 210, 211, 266, 267, 0, 0,
	212, 87, 88, 0, 89, 213, 214, 215, 216, 217,
	0, 0, 0, 0, 90, 91, 92, 218, 219, 220,
	221, 93, 222, 223, 0, 94, 224, 225, 95, 0,
	0, 226, 227, 228, 1036, 229, 0, 0, 0, 96,
	97, 98, 0, 99, 1034, 100, 101, 102, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	271, 107, 230, 108, 231, 232, 0, 109, 0, 110,
	0, 0, 0, 111, 112, 0, 113, 0, 0, 0,
	233, 114, 115, 234, 235, 0, 1142, 0, 116, 117,
	236, 0, 118, 0, 119, 1039, 0, 0, 0, 120,
	237, 0, 238, 0, 121, 122, 123, 124, 239, 240,
	0, 0, 128, 1140, 125, 0, 0, 126, 241, 127,
	242, 243, 244, 0, 245, 0, 0, 129, 0, 130,
	131, 0, 133, 132, 0, 246, 0, 134, 0, 0,
	135, 0, 0, 136, 0, 137, 138, 139, 141, 247,
	140, 0, 142, 143, 145, 144, 0, 0, 0, 248,
	146, 249, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 250, 0, 152, 0, 251, 153, 154, 155,
	156, 0, 252, 157, 253, 158, 1038, 159, 160, 161,
	254, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 0, 174, 0, 175, 176, 255,
	177, 0, 178, 179, 180, 181, 0, 256, 182, 183,
	0, 184, 185, 0, 186, 257, 258, 187, 0, 193,
	188, 189, 190, 192, 259, 191, 260, 0, 194, 0,
	195, 196, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 84,
	1141, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 0, 212, 87, 88, 0, 89, 213,
	214, 215, 216, 217, 0, 0, 0, 0, 90, 91,
	92, 218, 219, 220, 221, 93, 222, 223, 0, 94,
	224, 225, 95, 0, 0, 226, 227, 228, 1036, 229,
	0, 0, 1031, 96, 97, 98, 0, 99, 1034, 100,
	101, 102, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 271, 107, 230, 108, 231, 232,
	0, 109, 0, 110, 0, 0, 0, 111, 112, 0,
	113, 0, 0, 0, 233, 114, 115, 234, 235, 0,
	0, 0, 116, 117, 236, 0, 118, 0, 119, 1039,
	0, 0, 0, 120, 237, 0, 238, 0, 121, 122,
	123, 124, 1030, 240, 0, 0, 128, 0, 125, 0,
	0, 126, 241, 127, 242, 243, 244, 0, 245, 0,
	0, 129, 0, 130, 131, 0, 133, 132, 0, 246,
	0, 134, 0, 0, 135, 0, 0, 136, 0, 137,
	138, 139, 141, 247, 140, 0, 142, 143, 145, 144,
	0, 0, 0, 248, 146, 249, 147, 148, 0, 149,
	0, 0, 150, 0, 0, 151, 250, 0, 152, 0,
	251, 153, 154, 155, 156, 0, 252, 157, 253, 158,
	1038, 159, 160, 161, 254, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 0, 174,
	0, 175, 176, 255, 177, 0, 178, 179, 180, 181,
	0, 256, 182, 183, 0, 184, 185, 0, 186, 257,
	258, 187, 0, 193, 188, 189, 190, 192, 259, 191,
	260, 0, 194, 0, 195, 196, 197, 198, 199, 0,
	261, 262, 263, 0, 0, 200, 264, 265, 0, 201,
	202, 203, 204, 84, 1037, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 266, 267, 0, 0, 212, 87,
	88, 0, 89, 213, 214, 215, 216, 217, 0, 1643,
	0, 0, 90, 91, 92, 218, 219, 220, 221, 93,
	222, 223, 0, 94, 224, 225, 95, 0, 0, 226,
	227, 228, 0, 229, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 101, 102, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 105, 106, 271, 107,
	230, 108, 231, 232, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 233, 114,
	115, 234, 235, 0, 0, 0, 116, 117, 236, 0,
	118, 0, 119, 0, 0, 0, 0, 120, 237, 0,
	238, 0, 121, 122, 123, 124, 239, 240, 0, 0,
	128, 0, 125, 0, 0, 126, 241, 127, 242, 243,
	244, 0, 245, 0, 0, 129, 0, 130, 131, 0,
	133, 132, 0, 246, 0, 134, 0, 0, 135, 0,
	0, 136, 0, 137, 138, 139, 141, 247, 140, 0,
	142, 143, 145, 144, 0, 0, 0, 248, 146, 249,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	250, 0, 152, 0, 251, 153, 154, 155, 156, 0,
	252, 157, 253, 158, 0, 159, 160, 161, 254, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 0, 174, 0, 175, 176, 255, 177, 0,
	178, 179, 180, 181, 0, 256, 182, 183, 0, 184,
	185, 0, 186, 257, 258, 187, 0, 193, 188, 189,
	190, 192, 259, 191, 260, 0, 194, 0, 195, 196,
	197, 198, 199, 0, 261, 262, 263, 0, 0, 200,
	264, 265, 0, 201, 202, 203, 204, 84, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 0, 212, 87, 88, 0, 89, 213, 214, 215,
	216, 217, 0, 0, 0, 0, 90, 91, 92, 218,
	219, 220, 221, 93, 222, 223, 0, 94, 224, 225,
	95, 0, 0, 226, 227, 228, 0, 229, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 101, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 271, 107, 230, 108, 231, 232, 0, 109,
	0, 110, 0, 0, 0, 111, 112, 0, 113, 0,
	0, 0, 233, 114, 115, 234, 235, 0, 0, 0,
	116, 117, 236, 0, 118, 0, 119, 0, 0, 0,
	0, 120, 237, 0, 238, 0, 121, 122, 123, 124,
	239, 240, 0, 0, 128, 0, 125, 0, 0, 126,
	241, 127, 242, 243, 244, 0, 245, 0, 0, 129,
	0, 130, 131, 0, 133, 132, 0, 246, 0, 134,
	0, 0, 135, 0, 0, 136, 0, 137, 138, 139,
	141, 247, 140, 0, 142, 143, 145, 144, 0, 0,
	0, 248, 146, 249, 147, 148, 0, 149, 0, 486,
	150, 0, 0, 151, 250, 0, 152, 0, 251, 153,
	154, 155, 156, 0, 252, 157, 253, 158, 0, 159,
	160, 161, 254, 162, 163, 0, 164, 165, 166, 167,
	168, 170, 171, 169, 172, 173, 0, 174, 0, 175,
	176, 255, 177, 0, 178, 179, 180, 181, 0, 256,
	182, 183, 0, 184, 185, 0, 186, 257, 258, 187,
	0, 193, 188, 189, 190, 192, 259, 191, 260, 0,
	194, 0, 195, 196, 197, 198, 199, 0, 261, 262,
	263, 0, 0, 200, 264, 265, 0, 201, 202, 203,
	204, 84, 0, 205, 206, 207, 0, 208, 0, 209,
	210, 211, 266, 267, 0, 0, 212, 87, 88, 0,
	89, 213, 214, 215, 216, 217, 0, 0, 0, 0,
	90, 91, 92, 218, 219, 220, 221, 93, 222, 223,
	0, 94, 224, 225, 95, 0, 0, 226, 227, 228,
	0, 229, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 101, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 271, 107, 230, 108,
	231, 232, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 233, 114, 115, 234,
	235, 0, 0, 0, 116, 117, 236, 0, 118, 0,
	119, 0, 0, 0, 0, 120, 237, 0, 238, 0,
	121, 122, 123, 124, 779, 240, 0, 0, 128, 0,
	125, 0, 0, 126, 241, 127, 242, 243, 244, 0,
	245, 0, 0, 129, 0, 130, 131, 0, 133, 132,
	0, 246, 0, 134, 0, 0, 135, 0, 0, 136,
	0, 137, 138, 139, 141, 247, 140, 0, 142, 143,
	145, 144, 0, 0, 0, 248, 146, 249, 147, 148,
	0, 149, 0, 486, 150, 0, 0, 151, 250, 0,
	152, 0, 251, 153, 154, 155, 156, 0, 252, 157,
	253, 158, 0, 159, 160, 161, 254, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	0, 174, 0, 175, 176, 255, 177, 0, 178, 179,
	180, 181, 0, 256, 182, 183, 0, 184, 185, 0,
	186, 257, 258, 187, 0, 193, 188, 189, 190, 192,
	259, 191, 260, 0, 194, 0, 195, 196, 197, 198,
	199, 0, 261, 262, 263, 0, 0, 200, 264, 265,
	0, 201, 202, 203, 204, 84, 0, 205, 206, 207,
	0, 208, 0, 209, 210, 211, 266, 267, 0, 0,
	212, 87, 88, 544, 89, 213, 214, 215, 216, 217,
	0, 0, 0, 0, 90, 91, 92, 218, 219, 220,
	221, 93, 222, 223, 0, 94, 224, 225, 95, 0,
	0, 226, 227, 228, 0, 229, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 101, 102, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	271, 107, 230, 108, 231, 232, 0, 109, 0, 110,
	0, 0, 0, 111, 112, 0, 113, 0, 0, 0,
	233, 114, 115, 234, 235, 0, 0, 0, 116, 117,
	236, 0, 118, 0, 119, 0, 0, 0, 0, 120,
	237, 0, 238, 0, 121, 122, 123, 124, 239, 240,
	0, 0, 128, 0, 125, 0, 0, 126, 241, 127,
	242, 243, 244, 0, 245, 0, 0, 129, 0, 130,
	131, 0, 133, 132, 0, 246, 0, 134, 0, 0,
	135, 0, 0, 136, 0, 137, 138, 139, 141, 247,
	140, 0, 142, 143, 145, 144, 0, 0, 0, 248,
	146, 249, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 250, 0, 152, 0, 251, 153, 154, 155,
	156, 0, 252, 157, 253, 158, 0, 159, 160, 161,
	254, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 0, 174, 0, 175, 176, 255,
	177, 0, 178, 179, 180, 181, 0, 256, 182, 183,
	0, 184, 185, 0, 186, 257, 258, 187, 0, 193,
	188, 189, 190, 192, 259, 191, 260, 0, 194, 0,
	195, 196, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 84,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 0, 212, 87, 88, 0, 89, 213,
	214, 215, 216, 217, 0, 0, 0, 0, 90, 91,
	92, 218, 219, 220, 221, 93, 222, 223, 0, 94,
	224, 225, 95, 0, 0, 226, 227, 228, 0, 229,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	101, 102, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 271, 107, 230, 108, 231, 232,
	0, 109, 0, 110, 0, 0, 0, 111, 112, 0,
	113, 0, 0, 0, 233, 114, 115, 234, 235, 0,
	0, 0, 116, 117, 236, 0, 118, 0, 119, 0,
	0, 0, 0, 120, 237, 0, 238, 0, 121, 122,
	123, 124, 498, 240, 0, 0, 128, 0, 125, 0,
	0, 126, 241, 127, 242, 243, 244, 0, 245, 0,
	0, 129, 0, 130, 131, 0, 133, 132, 0, 246,
	0, 134, 0, 0, 135, 0, 0, 136, 0, 137,
	138, 139, 141, 247, 140, 0, 142, 143, 145, 144,
	0, 0, 0, 248, 146, 249, 147, 148, 0, 149,
	0, 486, 150, 0, 0, 151, 250, 0, 152, 0,
	251, 153, 154, 155, 156, 0, 252, 157, 253, 158,
	0, 159, 160, 161, 254, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 0, 174,
	0, 175, 176, 255, 177, 0, 178, 179, 180, 181,
	0, 256, 182, 183, 0, 184, 185, 0, 186, 257,
	258, 187, 0, 193, 188, 189, 190, 192, 259, 191,
	260, 0, 194, 0, 195, 196, 197, 198, 199, 0,
	261, 262, 263, 0, 0, 200, 264, 265, 0, 201,
	202, 203, 204, 84, 0, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 266, 267, 0, 0, 212, 87,
	88, 0, 89, 213, 214, 215, 216, 217, 0, 0,
	0, 0, 90, 91, 92, 218, 219, 220, 221, 93,
	222, 223, 0, 94, 224, 225, 95, 0, 0, 226,
	227, 228, 0, 229, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 101, 102, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 105, 106, 271, 107,
	230, 108, 231, 232, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 233, 114,
	115, 234, 235, 0, 0, 0, 116, 117, 236, 0,
	118, 0, 119, 0, 0, 0, 0, 120, 237, 0,
	238, 0, 121, 122, 123, 124, 491, 240, 0, 0,
	128, 0, 125, 0, 0, 126, 241, 127, 242, 243,
	244, 0, 245, 0, 0, 129, 0, 130, 131, 0,
	133, 132, 0, 246, 0, 134, 0, 0, 135, 0,
	0, 136, 0, 137, 138, 139, 141, 247, 140, 0,
	142, 143, 145, 144, 0, 0, 0, 248, 146, 249,
	147, 148, 0, 149, 0, 486, 150, 0, 0, 151,
	250, 0, 152, 0, 251, 153, 154, 155, 156, 0,
	252, 157, 253, 158, 0, 159, 160, 161, 254, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 0, 174, 0, 175, 176, 255, 177, 0,
	178, 179, 180, 181, 0, 256, 182, 183, 0, 184,
	185, 0, 186, 257, 258, 187, 0, 193, 188, 189,
	190, 192, 259, 191, 260, 0, 194, 0, 195, 196,
	197, 198, 199, 0, 261, 262, 263, 0, 0, 200,
	264, 265, 0, 201, 202, 203, 204, 84, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 0, 212, 87, 88, 400, 89, 213, 214, 215,
	216, 217, 0, 0, 0, 0, 90, 91, 92, 218,
	219, 220, 221, 93, 222, 223, 0, 94, 224, 225,
	95, 0, 0, 226, 227, 228, 0, 229, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 101, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 271, 107, 230, 108, 231, 232, 0, 109,
	0, 110, 0, 0, 0, 111, 112, 0, 113, 0,
	0, 0, 233, 114, 115, 234, 235, 0, 0, 0,
	116, 117, 236, 0, 118, 0, 119, 0, 0, 0,
	0, 120, 237, 0, 238, 0, 121, 122, 123, 124,
	239, 240, 0, 0, 128, 0, 125, 0, 0, 126,
	241, 127, 242, 243, 244, 0, 245, 0, 0, 129,
	0, 130, 131, 0, 133, 132, 0, 246, 0, 134,
	0, 0, 135, 0, 0, 136, 0, 137, 138, 139,
	141, 247, 140, 0, 142, 143, 145, 144, 0, 0,
	0, 248, 146, 249, 147, 148, 0, 149, 0, 0,
	150, 0, 0, 151, 250, 0, 152, 0, 251, 153,
	154, 155, 156, 0, 252, 157, 253, 399, 0, 159,
	160, 161, 254, 162, 163, 0, 164, 165, 166, 167,
	168, 170, 171, 169, 172, 173, 0, 174, 0, 175,
	176, 255, 177, 0, 178, 179, 180, 181, 0, 256,
	182, 183, 0, 184, 185, 0, 186, 257, 258, 187,
	0, 193, 188, 189, 190, 192, 259, 191, 260, 0,
	194, 0, 195, 196, 197, 198, 199, 0, 261, 262,
	263, 0, 0, 200, 264, 265, 0, 201, 202, 203,
	204, 84, 0, 205, 206, 207, 0, 208, 0, 209,
	210, 211, 266, 267, 0, 0, 212, 87, 88, 0,
	89, 213, 214, 215, 216, 217, 0, 0, 0, 0,
	90, 91, 92, 218, 219, 220, 221, 93, 222, 223,
	0, 94, 224, 225, 95, 0, 0, 226, 227, 228,
	0, 229, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 101, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 271, 107, 230, 108,
	231, 232, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 233, 114, 115, 234,
	235, 0, 0, 0, 116, 117, 236, 0, 118, 0,
	119, 0, 0, 0, 0, 120, 237, 0, 238, 0,
	121, 122, 123, 124, 239, 240, 0, 0, 128, 0,
	125, 0, 0, 126, 241, 127, 242, 243, 244, 0,
	245, 0, 0, 129, 0, 130, 131, 0, 133, 132,
	0, 246, 0, 134, 0, 0, 135, 0, 0, 136,
	0, 137, 138, 139, 141, 247, 140, 0, 142, 143,
	145, 144, 0, 0, 0, 248, 146, 249, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 250, 0,
	152, 0, 251, 153, 154, 155, 156, 0, 252, 157,
	253, 158, 0, 159, 160, 161, 254, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	0, 174, 0, 175, 176, 255, 177, 0, 178, 179,
	180, 181, 0, 256, 182, 183, 0, 184, 185, 0,
	186, 257, 258, 187, 0, 193, 188, 189, 190, 192,
	259, 191, 260, 0, 194, 0, 195, 196, 197, 198,
	199, 0, 261, 262, 263, 0, 0, 200, 264, 265,
	0, 201, 202, 203, 204, 84, 0, 205, 206, 207,
	0, 208, 0, 209, 210, 211, 266, 267, 0, 0,
	212, 87, 88, 0, 89, 213, 214, 215, 216, 217,
	0, 0, 0, 0, 90, 91, 92, 218, 219, 220,
	221, 93, 222, 223, 0, 94, 224, 225, 95, 0,
	0, 226, 227, 228, 0, 229, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 101, 102, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	271, 107, 230, 108, 231, 232, 0, 109, 0, 110,
	0, 0, 0, 111, 112, 0, 113, 0, 0, 0,
	233, 114, 115, 234, 235, 0, 0, 0, 116, 117,
	236, 0, 118, 0, 119, 0, 0, 0, 0, 120,
	237, 0, 238, 0, 121, 122, 123, 124, 1335, 240,
	0, 0, 128, 0, 125, 0, 0, 126, 241, 127,
	242, 243, 244, 0, 245, 0, 0, 129, 0, 130,
	131, 0, 133, 132, 0, 246, 0, 134, 0, 0,
	135, 0, 0, 136, 0, 137, 138, 139, 141, 247,
	140, 0, 142, 143, 145, 144, 0, 0, 0, 248,
	146, 249, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 250, 0, 152, 0, 251, 153, 154, 155,
	156, 0, 252, 157, 253, 158, 0, 159, 160, 161,
	254, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 0, 174, 0, 175, 176, 255,
	177, 0, 178, 179, 180, 181, 0, 256, 182, 183,
	0, 184, 185, 0, 186, 257, 258, 187, 0, 193,
	188, 189, 190, 192, 259, 191, 260, 0, 194, 0,
	195, 196, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 84,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 0, 212, 87, 88, 0, 89, 213,
	214, 215, 216, 217, 0, 0, 0, 0, 90, 91,
	92, 218, 219, 220, 221, 93, 222, 223, 0, 94,
	224, 225, 95, 0, 0, 226, 227, 228, 0, 229,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	101, 102, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 271, 107, 230, 108, 231, 232,
	0, 109, 0, 110, 0, 0, 0, 111, 112, 0,
	113, 0, 0, 0, 233, 114, 115, 234, 235, 0,
	0, 0, 116, 117, 236, 0, 118, 0, 119, 0,
	0, 0, 0, 120, 237, 0, 238, 0, 121, 122,
	123, 124, 1333, 240, 0, 0, 128, 0, 125, 0,
	0, 126, 241, 127, 242, 243, 244, 0, 245, 0,
	0, 129, 0, 130, 131, 0, 133, 132, 0, 246,
	0, 134, 0, 0, 135, 0, 0, 136, 0, 137,
	138, 139, 141, 247, 140, 0, 142, 143, 145, 144,
	0, 0, 0, 248, 146, 249, 147, 148, 0, 149,
	0, 0, 150, 0, 0, 151, 250, 0, 152, 0,
	251, 153, 154, 155, 156, 0, 252, 157, 253, 158,
	0, 159, 160, 161, 254, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 0, 174,
	0, 175, 176, 255, 177, 0, 178, 179, 180, 181,
	0, 256, 182, 183, 0, 184, 185, 0, 186, 257,
	258, 187, 0, 193, 188, 189, 190, 192, 259, 191,
	260, 0, 194, 0, 195, 196, 197, 198, 199, 0,
	261, 262, 263, 0, 0, 200, 264, 265, 0, 201,
	202, 203, 204, 84, 0, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 266, 267, 0, 0, 212, 87,
	88, 0, 89, 213, 214, 215, 216, 217, 0, 0,
	0, 0, 90, 91, 92, 218, 219, 220, 221, 93,
	222, 223, 0, 94, 224, 225, 95, 0, 0, 226,
	227, 228, 0, 229, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 101, 102, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 105, 106, 271, 107,
	230, 108, 231, 232, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 233, 114,
	115, 234, 235, 0, 0, 0, 116, 117, 236, 0,
	118, 0, 119, 0, 0, 0, 0, 120, 237, 0,
	238, 0, 121, 122, 123, 124, 1322, 240, 0, 0,
	128, 0, 125, 0, 0, 126, 241, 127, 242, 243,
	244, 0, 245, 0, 0, 129, 0, 130, 131, 0,
	133, 132, 0, 246, 0, 134, 0, 0, 135, 0,
	0, 136, 0, 137, 138, 139, 141, 247, 140, 0,
	142, 143, 145, 144, 0, 0, 0, 248, 146, 249,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	250, 0, 152, 0, 251, 153, 154, 155, 156, 0,
	252, 157, 253, 158, 0, 159, 160, 161, 254, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 0, 174, 0, 175, 176, 255, 177, 0,
	178, 179, 180, 181, 0, 256, 182, 183, 0, 184,
	185, 0, 186, 257, 258, 187, 0, 193, 188, 189,
	190, 192, 259, 191, 260, 0, 194, 0, 195, 196,
	197, 198, 199, 0, 261, 262, 263, 0, 0, 200,
	264, 265, 0, 201, 202, 203, 204, 84, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 0, 212, 87, 88, 0, 89, 213, 214, 215,
	216, 217, 0, 0, 0, 0, 90, 91, 92, 218,
	219, 220, 221, 93, 222, 223, 0, 94, 224, 225,
	95, 0, 0, 226, 227, 228, 0, 229, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 101, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 271, 107, 230, 108, 231, 232, 0, 109,
	0, 110, 0, 0, 0, 111, 112, 0, 113, 0,
	0, 0, 233, 114, 115, 234, 235, 0, 0, 0,
	116, 117, 236, 0, 118, 0, 119, 0, 0, 0,
	0, 120, 237, 0, 238, 0, 121, 122, 123, 124,
	897, 240, 0, 0, 128, 0, 125, 0, 0, 126,
	241, 127, 242, 243, 244, 0, 245, 0, 0, 129,
	0, 130, 131, 0, 133, 132, 0, 246, 0, 134,
	0, 0, 135, 0, 0, 136, 0, 137, 138, 139,
	141, 247, 140, 0, 142, 143, 145, 144, 0, 0,
	0, 248, 146, 249, 147, 148, 0, 149, 0, 0,
	150, 0, 0, 151, 250, 0, 152, 0, 251, 153,
	154, 155, 156, 0, 252, 157, 253, 158, 0, 159,
	160, 161, 254, 162, 163, 0, 164, 165, 166, 167,
	168, 170, 171, 169, 172, 173, 0, 174, 0, 175,
	176, 255, 177, 0, 178, 179, 180, 181, 0, 256,
	182, 183, 0, 184, 185, 0, 186, 257, 258, 187,
	0, 193, 188, 189, 190, 192, 259, 191, 260, 0,
	194, 0, 195, 196, 197, 198, 199, 0, 261, 262,
	263, 0, 0, 200, 264, 265, 0, 201, 202, 203,
	204, 84, 0, 205, 206, 207, 0, 208, 0, 209,
	210, 211, 266, 267, 0, 0, 212, 87, 88, 0,
	89, 213, 214, 215, 216, 217, 0, 0, 0, 0,
	90, 91, 92, 218, 219, 220, 221, 93, 222, 223,
	0, 94, 224, 225, 95, 0, 0, 226, 227, 228,
	0, 229, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 101, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 271, 107, 230, 108,
	231, 232, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 233, 114, 115, 234,
	235, 0, 0, 0, 116, 117, 236, 0, 118, 0,
	119, 0, 0, 0, 0, 120, 237, 0, 238, 0,
	121, 122, 123, 124, 239, 240, 0, 0, 128, 0,
	125, 0, 0, 126, 241, 127, 242, 243, 244, 0,
	245, 0, 0, 129, 0, 130, 131, 0, 133, 132,
	0, 246, 0, 134, 0, 0, 135, 0, 0, 136,
	0, 137, 138, 139, 141, 247, 140, 0, 142, 143,
	145, 144, 0, 0, 0, 248, 146, 249, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 250, 0,
	152, 0, 251, 153, 154, 155, 156, 0, 252, 157,
	253, 158, 0, 159, 160, 161, 254, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	0, 174, 0, 175, 176, 255, 177, 0, 178, 414,
	180, 181, 0, 256, 182, 183, 0, 184, 185, 0,
	186, 257, 258, 187, 0, 193, 188, 189, 190, 192,
	259, 191, 260, 0, 194, 0, 195, 196, 197, 198,
	199, 0, 261, 262, 263, 0, 0, 200, 264, 265,
	0, 201, 202, 203, 204, 84, 0, 205, 206, 207,
	0, 208, 0, 209, 210, 211, 266, 267, 0, 0,
	212, 87, 88, 0, 89, 213, 214, 215, 216, 217,
	0, 764, 0, 0, 90, 91, 92, 218, 219, 220,
	221, 93, 222, 223, 0, 94, 224, 225, 95, 0,
	0, 226, 227, 228, 0, 229, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 101, 102, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	271, 107, 230, 108, 231, 232, 0, 109, 0, 110,
	0, 0, 0, 111, 112, 0, 113, 0, 0, 0,
	233, 114, 115, 234, 235, 0, 0, 0, 116, 117,
	236, 0, 118, 0, 119, 0, 0, 0, 0, 120,
	237, 0, 238, 0, 121, 122, 123, 124, 239, 240,
	0, 0, 128, 0, 125, 0, 0, 126, 241, 127,
	242, 243, 244, 0, 245, 0, 0, 129, 0, 130,
	131, 0, 133, 132, 0, 246, 0, 134, 0, 0,
	135, 0, 0, 136, 0, 137, 138, 139, 141, 247,
	140, 0, 142, 143, 145, 144, 0, 0, 0, 248,
	146, 249, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 250, 0, 152, 0, 251, 153, 154, 155,
	156, 0, 252, 157, 253, 158, 0, 159, 160, 161,
	254, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 0, 174, 0, 175, 176, 255,
	177, 0, 178, 179, 180, 181, 0, 256, 182, 183,
	0, 0, 185, 0, 186, 257, 258, 187, 0, 193,
	188, 189, 190, 192, 259, 191, 260, 0, 194, 0,
	195, 196, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 84,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 0, 212, 87, 88, 0, 89, 213,
	214, 215, 216, 217, 0, 0, 0, 0, 90, 91,
	92, 218, 219, 220, 221, 93, 222, 223, 0, 94,
	224, 225, 95, 0, 0, 226, 227, 228, 0, 229,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	101, 102, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 271, 107, 230, 108, 231, 232,
	0, 109, 0, 110, 0, 0, 0, 111, 112, 0,
	113, 0, 0, 0, 233, 114, 115, 234, 235, 0,
	0, 0, 116, 117, 236, 0, 118, 0, 119, 0,
	0, 0, 0, 120, 237, 0, 238, 0, 121, 122,
	123, 124, 597, 240, 0, 0, 128, 0, 125, 0,
	0, 126, 241, 127, 242, 243, 244, 0, 245, 0,
	0, 129, 0, 130, 131, 0, 133, 132, 0, 246,
	0, 134, 0, 0, 135, 0, 0, 136, 0, 137,
	138, 139, 141, 247, 140, 0, 142, 143, 145, 144,
	0, 0, 0, 248, 146, 249, 147, 148, 0, 149,
	0, 0, 150, 0, 0, 151, 250, 0, 152, 0,
	251, 153, 154, 155, 156, 0, 252, 157, 253, 158,
	0, 159, 160, 161, 254, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 0, 174,
	0, 175, 176, 255, 177, 0, 178, 179, 180, 181,
	0, 256, 182, 183, 0, 184, 185, 0, 186, 257,
	258, 187, 0, 193, 188, 189, 190, 192, 259, 191,
	260, 0, 194, 0, 195, 196, 197, 198, 199, 0,
	261, 262, 263, 0, 0, 200, 264, 265, 0, 201,
	202, 203, 204, 84, 0, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 266, 267, 0, 0, 212, 87,
	88, 0, 89, 213, 214, 215, 216, 217, 0, 0,
	0, 0, 90, 91, 92, 218, 219, 220, 221, 93,
	222, 223, 0, 94, 224, 225, 95, 0, 0, 226,
	227, 228, 0, 229, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 101, 102, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 105, 106, 271, 107,
	230, 108, 231, 232, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 233, 114,
	115, 234, 235, 0, 0, 0, 116, 117, 236, 0,
	118, 0, 119, 0, 0, 0, 0, 120, 237, 0,
	238, 0, 121, 122, 123, 124, 592, 240, 0, 0,
	128, 0, 125, 0, 0, 126, 241, 127, 242, 243,
	244, 0, 245, 0, 0, 129, 0, 130, 131, 0,
	133, 132, 0, 246, 0, 134, 0, 0, 135, 0,
	0, 136, 0, 137, 138, 139, 141, 247, 140, 0,
	142, 143, 145, 144, 0, 0, 0, 248, 146, 249,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	250, 0, 152, 0, 251, 153, 154, 155, 156, 0,
	252, 157, 253, 158, 0, 159, 160, 161, 254, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 0, 174, 0, 175, 176, 255, 177, 0,
	178, 179, 180, 181, 0, 256, 182, 183, 0, 184,
	185, 0, 186, 257, 258, 187, 0, 193, 188, 189,
	190, 192, 259, 191, 260, 0, 194, 0, 195, 196,
	197, 198, 199, 0, 261, 262, 263, 0, 0, 200,
	264, 265, 0, 201, 202, 203, 204, 84, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 0, 212, 87, 88, 0, 89, 213, 214, 215,
	216, 217, 0, 0, 0, 0, 90, 91, 92, 218,
	219, 220, 221, 93, 222, 223, 0, 94, 224, 225,
	95, 0, 0, 226, 227, 550, 0, 229, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 101, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 271, 107, 230, 108, 231, 232, 0, 109,
	0, 110, 0, 0, 0, 111, 112, 0, 113, 0,
	0, 0, 233, 114, 115, 234, 235, 0, 0, 0,
	116, 117, 236, 0, 118, 0, 119, 0, 0, 0,
	0, 120, 237, 0, 238, 0, 121, 122, 123, 124,
	239, 240, 0, 0, 128, 0, 125, 0, 0, 126,
	241, 127, 242, 243, 244, 0, 245, 0, 0, 129,
	0, 130, 131, 0, 133, 132, 0, 246, 0, 134,
	0, 0, 135, 0, 0, 136, 0, 137, 138, 139,
	141, 247, 425, 0, 142, 143, 145, 144, 0, 0,
	0, 248, 146, 249, 147, 148, 0, 149, 0, 0,
	150, 0, 0, 151, 250, 0, 152, 0, 251, 153,
	154, 155, 156, 0, 252, 157, 253, 158, 0, 159,
	160, 161, 254, 162, 163, 0, 164, 165, 166, 167,
	168, 170, 171, 169, 172, 173, 0, 174, 0, 175,
	176, 255, 177, 0, 178, 179, 180, 181, 0, 256,
	182, 183, 0, 184, 185, 0, 186, 257, 258, 187,
	0, 193, 188, 189, 190, 192, 259, 191, 260, 0,
	194, 0, 195, 196, 197, 198, 199, 0, 424, 262,
	263, 0, 0, 420, 264, 265, 0, 201, 202, 203,
	204, 84, 0, 205, 206, 207, 0, 208, 0, 209,
	210, 211, 266, 267, 0, 0, 212, 87, 88, 0,
	89, 213, 214, 215, 216, 217, 0, 0, 0, 0,
	90, 91, 92, 218, 219, 220, 221, 93, 222, 223,
	0, 94, 224, 225, 95, 0, 0, 226, 227, 228,
	0, 229, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 101, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 271, 107, 230, 108,
	231, 232, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 233, 114, 115, 234,
	235, 0, 0, 0, 116, 117, 236, 0, 118, 0,
	119, 0, 0, 0, 0, 120, 237, 0, 238, 0,
	121, 122, 123, 124, 239, 240, 0, 0, 128, 0,
	125, 0, 0, 126, 241, 127, 242, 243, 244, 0,
	245, 0, 0, 129, 0, 130, 131, 0, 133, 132,
	0, 246, 0, 134, 0, 0, 135, 0, 0, 136,
	0, 137, 138, 139, 141, 247, 425, 0, 142, 143,
	145, 144, 0, 0, 0, 248, 146, 249, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 250, 0,
	152, 0, 251, 153, 154, 155, 156, 0, 252, 157,
	253, 158, 0, 159, 160, 161, 254, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	0, 174, 0, 175, 176, 255, 177, 0, 178, 179,
	180, 181, 0, 256, 182, 183, 0, 184, 185, 0,
	186, 257, 258, 187, 0, 193, 188, 189, 190, 192,
	259, 191, 260, 0, 194, 0, 195, 196, 197, 198,
	199, 0, 424, 262, 263, 0, 0, 420, 264, 265,
	0, 201, 202, 203, 204, 84, 0, 205, 206, 207,
	0, 208, 0, 209, 210, 211, 266, 267, 0, 0,
	212, 87, 88, 0, 89, 213, 214, 215, 216, 217,
	0, 0, 0, 0, 90, 91, 92, 218, 219, 220,
	221, 93, 222, 223, 0, 94, 224, 225, 95, 0,
	0, 226, 227, 228, 0, 229, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 101, 102, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	271, 107, 230, 108, 231, 232, 0, 109, 0, 110,
	0, 0, 0, 111, 112, 0, 113, 0, 0, 0,
	233, 114, 115, 234, 235, 0, 0, 0, 116, 117,
	236, 0, 118, 0, 119, 0, 0, 0, 0, 120,
	237, 0, 238, 0, 121, 122, 123, 124, 528, 240,
	0, 0, 128, 0, 125, 0, 0, 126, 241, 127,
	242, 243, 244, 0, 245, 0, 0, 129, 0, 130,
	131, 0, 133, 132, 0, 246, 0, 134, 0, 0,
	135, 0, 0, 136, 0, 137, 138, 139, 141, 247,
	140, 0, 142, 143, 145, 144, 0, 0, 0, 248,
	146, 249, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 250, 0, 152, 0, 251, 153, 154, 155,
	156, 0, 252, 157, 253, 158, 0, 159, 160, 161,
	254, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 0, 174, 0, 175, 176, 255,
	177, 0, 178, 179, 180, 181, 0, 256, 182, 183,
	0, 184, 185, 0, 186, 257, 258, 187, 0, 193,
	188, 189, 190, 192, 259, 191, 260, 0, 194, 0,
	195, 196, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 84,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 0, 212, 87, 88, 0, 89, 213,
	214, 215, 216, 217, 0, 0, 0, 0, 90, 91,
	92, 218, 219, 220, 221, 93, 222, 223, 0, 94,
	224, 225, 95, 0, 0, 226, 227, 228, 0, 229,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	101, 102, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 271, 107, 230, 108, 231, 232,
	0, 109, 0, 110, 0, 0, 0, 111, 112, 0,
	113, 0, 0, 0, 233, 114, 115, 234, 235, 0,
	0, 0, 116, 117, 236, 0, 118, 0, 119, 0,
	0, 0, 0, 120, 237, 0, 238, 0, 121, 122,
	123, 124, 525, 240, 0, 0, 128, 0, 125, 0,
	0, 126, 241, 127, 242, 243, 244, 0, 245, 0,
	0, 129, 0, 130, 131, 0, 133, 132, 0, 246,
	0, 134, 0, 0, 135, 0, 0, 136, 0, 137,
	138, 139, 141, 247, 140, 0, 142, 143, 145, 144,
	0, 0, 0, 248, 146, 249, 147, 148, 0, 149,
	0, 0, 150, 0, 0, 151, 250, 0, 152, 0,
	251, 153, 154, 155, 156, 0, 252, 157, 253, 158,
	0, 159, 160, 161, 254, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 0, 174,
	0, 175, 176, 255, 177, 0, 178, 179, 180, 181,
	0, 256, 182, 183, 0, 184, 185, 0, 186, 257,
	258, 187, 0, 193, 188, 189, 190, 192, 259, 191,
	260, 0, 194, 0, 195, 196, 197, 198, 199, 0,
	261, 262, 263, 0, 0, 200, 264, 265, 0, 201,
	202, 203, 204, 84, 0, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 266, 267, 0, 0, 212, 87,
	88, 0, 89, 213, 214, 215, 216, 217, 0, 0,
	0, 0, 90, 91, 92, 218, 219, 220, 221, 93,
	222, 223, 0, 94, 224, 225, 95, 0, 0, 226,
	227, 228, 0, 229, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 101, 102, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 105, 106, 271, 107,
	230, 108, 231, 232, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 233, 114,
	115, 234, 235, 0, 0, 0, 116, 117, 236, 0,
	118, 0, 119, 0, 0, 0, 0, 120, 237, 0,
	238, 0, 121, 122, 123, 124, 522, 240, 0, 0,
	128, 0, 125, 0, 0, 126, 241, 127, 242, 243,
	244, 0, 245, 0, 0, 129, 0, 130, 131, 0,
	133, 132, 0, 246, 0, 134, 0, 0, 135, 0,
	0, 136, 0, 137, 138, 139, 141, 247, 140, 0,
	142, 143, 145, 144, 0, 0, 0, 248, 146, 249,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	250, 0, 152, 0, 251, 153, 154, 155, 156, 0,
	252, 157, 253, 158, 0, 159, 160, 161, 254, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 0, 174, 0, 175, 176, 255, 177, 0,
	178, 179, 180, 181, 0, 256, 182, 183, 0, 184,
	185, 0, 186, 257, 258, 187, 0, 193, 188, 189,
	190, 192, 259, 191, 260, 0, 194, 0, 195, 196,
	197, 198, 199, 0, 261, 262, 263, 0, 0, 200,
	264, 265, 0, 201, 202, 203, 204, 84, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 0, 212, 87, 88, 0, 89, 213, 214, 215,
	216, 217, 0, 0, 0, 0, 90, 91, 92, 218,
	219, 220, 221, 93, 222, 223, 0, 94, 224, 225,
	95, 0, 0, 226, 227, 228, 0, 229, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 101, 102,
	0, 0, 103, 104, 0, 0, 0, 0, 0, 0,
	105, 106, 271, 107, 230, 108, 231, 232, 0, 109,
	0, 110, 0, 0, 0, 111, 112, 0, 113, 0,
	0, 0, 233, 114, 115, 234, 235, 0, 0, 0,
	116, 117, 236, 0, 118, 0, 119, 0, 0, 0,
	0, 120, 237, 0, 238, 0, 121, 122, 123, 124,
	520, 240, 0, 0, 128, 0, 125, 0, 0, 126,
	241, 127, 242, 243, 244, 0, 245, 0, 0, 129,
	0, 130, 131, 0, 133, 132, 0, 246, 0, 134,
	0, 0, 135, 0, 0, 136, 0, 137, 138, 139,
	141, 247, 140, 0, 142, 143, 145, 144, 0, 0,
	0, 248, 146, 249, 147, 148, 0, 149, 0, 0,
	150, 0, 0, 151, 250, 0, 152, 0, 251, 153,
	154, 155, 156, 0, 252, 157, 253, 158, 0, 159,
	160, 161, 254, 162, 163, 0, 164, 165, 166, 167,
	168, 170, 171, 169, 172, 173, 0, 174, 0, 175,
	176, 255, 177, 0, 178, 179, 180, 181, 0, 256,
	182, 183, 0, 184, 185, 0, 186, 257, 258, 187,
	0, 193, 188, 189, 190, 192, 259, 191, 260, 0,
	194, 0, 195, 196, 197, 198, 199, 0, 261, 262,
	263, 0, 0, 200, 264, 265, 0, 201, 202, 203,
	204, 84, 0, 205, 206, 207, 0, 208, 0, 209,
	210, 211, 266, 267, 0, 0, 212, 87, 88, 0,
	89, 213, 214, 215, 216, 217, 0, 0, 0, 0,
	90, 91, 92, 218, 219, 220, 221, 93, 222, 223,
	0, 94, 224, 225, 95, 0, 0, 226, 227, 228,
	0, 229, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 101, 102, 0, 0, 103, 104, 0, 0,
	0, 0, 0, 0, 105, 106, 271, 107, 230, 108,
	231, 232, 0, 109, 0, 110, 0, 0, 0, 111,
	112, 0, 113, 0, 0, 0, 233, 114, 115, 234,
	235, 0, 0, 0, 116, 117, 236, 0, 118, 0,
	119, 0, 0, 0, 0, 120, 237, 0, 238, 0,
	121, 122, 123, 124, 494, 240, 0, 0, 128, 0,
	125, 0, 0, 126, 241, 127, 242, 243, 244, 0,
	245, 0, 0, 129, 0, 130, 131, 0, 133, 132,
	0, 246, 0, 134, 0, 0, 135, 0, 0, 136,
	0, 137, 138, 139, 141, 247, 140, 0, 142, 143,
	145, 144, 0, 0, 0, 248, 146, 249, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 250, 0,
	152, 0, 251, 153, 154, 155, 156, 0, 252, 157,
	253, 158, 0, 159, 160, 161, 254, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	0, 174, 0, 175, 176, 255, 177, 0, 178, 179,
	180, 181, 0, 256, 182, 183, 0, 184, 185, 0,
	186, 257, 258, 187, 0, 193, 188, 189, 190, 192,
	259, 191, 260, 0, 194, 0, 195, 196, 197, 198,
	199, 0, 261, 262, 263, 0, 0, 200, 264, 265,
	0, 201, 202, 203, 204, 84, 0, 205, 206, 207,
	0, 208, 0, 209, 210, 211, 266, 267, 0, 0,
	212, 87, 88, 0, 89, 213, 214, 215, 216, 217,
	0, 0, 0, 0, 90, 91, 92, 218, 219, 220,
	221, 93, 222, 223, 0, 94, 224, 225, 95, 0,
	0, 226, 227, 228, 0, 229, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 101, 102, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 105, 106,
	271, 107, 230, 108, 231, 232, 0, 109, 0, 110,
	0, 0, 0, 111, 112, 0, 113, 0, 0, 0,
	233, 114, 115, 234, 235, 0, 0, 0, 116, 117,
	236, 0, 118, 0, 119, 0, 0, 0, 0, 120,
	237, 0, 238, 0, 121, 122, 123, 124, 239, 240,
	0, 0, 128, 0, 125, 0, 0, 126, 241, 127,
	242, 243, 244, 0, 245, 0, 0, 129, 0, 130,
	131, 0, 133, 132, 0, 246, 0, 134, 0, 0,
	135, 0, 0, 136, 0, 137, 138, 139, 141, 247,
	140, 0, 142, 143, 145, 144, 0, 0, 0, 248,
	146, 249, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 250, 0, 152, 0, 251, 153, 154, 155,
	156, 0, 252, 157, 253, 158, 0, 159, 160, 161,
	254, 475, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 0, 174, 0, 175, 176, 255,
	177, 0, 178, 179, 180, 181, 0, 256, 182, 183,
	0, 184, 185, 0, 186, 257, 258, 187, 0, 193,
	188, 189, 190, 192, 259, 191, 260, 0, 194, 0,
	195, 196, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 84,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 0, 212, 87, 88, 0, 89, 213,
	214, 215, 216, 217, 0, 0, 0, 0, 90, 91,
	92, 218, 219, 220, 221, 93, 222, 223, 0, 94,
	224, 225, 95, 0, 0, 226, 227, 228, 0, 229,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	101, 102, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 105, 106, 271, 107, 230, 108, 231, 232,
	0, 109, 0, 110, 0, 0, 0, 111, 112, 0,
	113, 0, 0, 0, 233, 114, 115, 234, 235, 0,
	0, 0, 116, 117, 236, 0, 118, 0, 119, 0,
	0, 0, 0, 120, 237, 0, 238, 0, 121, 122,
	123, 124, 239, 240, 0, 0, 128, 0, 125, 0,
	0, 126, 241, 127, 242, 243, 244, 0, 245, 0,
	0, 129, 0, 130, 131, 0, 133, 132, 0, 246,
	0, 134, 0, 0, 417, 0, 0, 136, 0, 137,
	138, 139, 141, 247, 425, 0, 142, 143, 145, 144,
	0, 0, 0, 248, 146, 249, 147, 148, 0, 149,
	0, 0, 150, 0, 0, 151, 250, 0, 152, 0,
	251, 153, 154, 155, 156, 0, 252, 157, 253, 158,
	0, 159, 160, 161, 254, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 0, 174,
	0, 175, 176, 419, 177, 0, 178, 179, 180, 181,
	0, 256, 182, 418, 0, 184, 185, 0, 186, 257,
	258, 187, 0, 193, 188, 189, 190, 192, 259, 191,
	260, 0, 194, 0, 195, 196, 197, 198, 199, 0,
	424, 262, 263, 0, 0, 420, 264, 265, 0, 201,
	202, 203, 204, 84, 0, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 266, 267, 0, 0, 212, 87,
	88, 0, 89, 213, 214, 215, 216, 217, 0, 0,
	0, 0, 90, 91, 92, 218, 219, 220, 221, 93,
	222, 223, 0, 94, 224, 225, 95, 0, 0, 226,
	227, 228, 0, 229, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 101, 102, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 105, 106, 271, 107,
	230, 108, 231, 232, 0, 109, 0, 110, 0, 0,
	0, 111, 112, 0, 113, 0, 0, 0, 233, 114,
	115, 234, 235, 0, 0, 0, 116, 117, 236, 0,
	118, 0, 119, 0, 0, 0, 0, 120, 237, 0,
	238, 0, 121, 122, 123, 124, 239, 240, 0, 0,
	128, 0, 125, 0, 0, 126, 241, 127, 242, 243,
	244, 0, 245, 0, 0, 129, 0, 130, 131, 0,
	133, 132, 0, 246, 0, 134, 0, 0, 135, 0,
	0, 136, 0, 137, 138, 139, 141, 247, 140, 0,
	142, 143, 145, 144, 0, 0, 0, 248, 146, 249,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	250, 0, 152, 0, 251, 153, 154, 0, 156, 0,
	252, 157, 253, 158, 0, 159, 0, 161, 254, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 0, 174, 0, 175, 176, 255, 0, 0,
	178, 179, 180, 181, 0, 256, 182, 183, 0, 184,
	185, 0, 186, 257, 258, 187, 0, 193, 188, 189,
	190, 192, 259, 191, 260, 0, 194, 0, 195, 196,
	197, 198, 199, 0, 261, 262, 263, 0, 0, 200,
	264, 265, 0, 201, 202, 203, 204, 0, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 0, 212, 0, 0, 0, 0, 213, 214, 215,
	216, 921, 922, 0, 941, 942, 943, 951, 952, 953,
	0, 0, 0, 0, 0, 0, 0, 944, 0, 0,
	0, 0, 0, 0, 924, 921, 922, 955, 941, 942,
	943, 951, 952, 953, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 923, 0, 924, 0,
	0, 955, 938, 0, 0, 0, 0, 921, 922, 0,
	941, 942, 943, 951, 952, 953, 0, 0, 0, 0,
	923, 0, 0, 944, 0, 0, 938, 0, 0, 0,
	924, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 929, 923, 0, 0, 0, 0, 0, 938, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	948, 956, 0, 0, 0, 929, 0, 0, 0, 0,
	1490, 1491, 0, 1508, 1509, 1510, 954, 0, 0, 0,
	0, 0, 0, 0, 948, 956, 1656, 0, 946, 0,
	0, 0, 0, 0, 939, 0, 0, 929, 0, 0,
	954, 0, 921, 922, 0, 941, 942, 943, 951, 952,
	953, 0, 946, 0, 0, 0, 948, 956, 939, 945,
	0, 1505, 0, 0, 0, 924, 0, 0, 955, 0,
	0, 0, 954, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 945, 946, 0, 0, 923, 0, 0,
	939, 0, 0, 938, 0, 0, 0, 0, 0, 0,
	0, 940, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 949, 0, 945, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 949, 0, 0,
	0, 0, 929, 0, 0, 1511, 0, 0, 921, 922,
	0, 941, 942, 943, 951, 952, 953, 940, 0, 0,
	0, 948, 956, 1506, 944, 0, 0, 0, 0, 949,
	0, 924, 0, 947, 955, 0, 935, 936, 937, 0,
	934, 931, 932, 933, 925, 926, 927, 928, 930, 946,
	950, 0, 0, 923, 1995, 939, 0, 947, 0, 938,
	935, 936, 937, 0, 934, 931, 932, 933, 925, 926,
	927, 928, 930, 0, 950, 0, 0, 0, 1942, 0,
	0, 294, 1490, 1491, 0, 1508, 1509, 1510, 0, 947,
	1507, 0, 935, 936, 937, 0, 934, 931, 932, 933,
	925, 926, 927, 928, 930, 0, 950, 0, 929, 0,
	1937, 0, 0, 921, 922, 0, 941, 942, 943, 951,
	952, 953, 940, 0, 0, 61, 0, 948, 956, 944,
	0, 0, 0, 1505, 949, 0, 924, 0, 0, 955,
	0, 0, 0, 954, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 0, 946, 0, 0, 923, 41,
	0, 939, 0, 0, 938, 1502, 1503, 1504, 0, 1501,
	1498, 1499, 1500, 1492, 1493, 1494, 1495, 1497, 0, 0,
	0, 42, 1496, 0, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 947, 0, 0, 935, 936, 937,
	0, 934, 931, 932, 933, 925, 926, 927, 928, 930,
	0, 950, 0, 929, 0, 0, 0, 0, 921, 922,
	0, 941, 942, 943, 951, 952, 953, 0, 940, 0,
	0, 0, 948, 956, 944, 1506, 0, 0, 0, 0,
	949, 924, 0, 0, 955, 0, 0, 0, 954, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 923, 0, 0, 939, 0, 0, 938,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 945, 0, 68, 0, 0, 0, 0, 0, 53,
	947, 0, 1507, 935, 936, 937, 0, 934, 931, 932,
	933, 925, 926, 927, 928, 930, 70, 950, 929, 0,
	0, 1933, 0, 921, 922, 0, 941, 942, 943, 951,
	952, 953, 0, 940, 0, 0, 0, 948, 956, 944,
	0, 0, 0, 0, 0, 949, 924, 71, 0, 955,
	0, 0, 0, 954, 0, 66, 0, 0, 0, 0,
	0, 67, 0, 0, 0, 946, 0, 0, 923, 0,
	0, 939, 0, 0, 938, 0, 0, 1502, 1503, 1504,
	281, 1501, 1498, 1499, 1500, 1492, 1493, 1494, 1495, 1497,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 947, 0, 0, 935, 936,
	937, 0, 934, 931, 932, 933, 925, 926, 927, 928,
	930, 0, 950, 929, 0, 0, 1875, 0, 921, 922,
	0, 941, 942, 943, 951, 952, 953, 0, 940, 0,
	0, 0, 948, 956, 944, 0, 0, 0, 0, 0,
	949, 924, 0, 0, 955, 0, 0, 0, 954, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 923, 0, 0, 939, 0, 0, 938,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 0, 0, 0, 0, 0, 0,
	947, 0, 0, 935, 936, 937, 0, 934, 931, 932,
	933, 925, 926, 927, 928, 930, 0, 950, 929, 0,
	0, 1853, 0, 921, 922, 0, 941, 942, 943, 951,
	952, 953, 0, 940, 0, 0, 0, 948, 956, 944,
	0, 0, 0, 0, 0, 949, 924, 0, 0, 955,
	0, 0, 0, 954, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 946, 0, 0, 923, 0,
	0, 939, 0, 0, 938, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 947, 0, 0, 935, 936,
	937, 0, 934, 931, 932, 933, 925, 926, 927, 928,
	930, 0, 950, 929, 0, 0, 1852, 0, 921, 922,
	0, 941, 942, 943, 951, 952, 953, 0, 940, 0,
	0, 0, 948, 956, 944, 0, 0, 0, 0, 0,
	949, 924, 0, 0, 955, 0, 0, 0, 954, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 923, 0, 0, 939, 0, 0, 938,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 0, 0, 0, 0, 0, 0,
	947, 0, 0, 935, 936, 937, 0, 934, 931, 932,
	933, 925, 926, 927, 928, 930, 0, 950, 929, 0,
	0, 1745, 0, 921, 922, 0, 941, 942, 943, 951,
	952, 953, 0, 940, 0, 0, 0, 948, 956, 944,
	0, 0, 0, 0, 0, 949, 924, 0, 0, 955,
	0, 0, 0, 954, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 946, 0, 0, 923, 0,
	0, 939, 0, 0, 938, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 947, 0, 0, 935, 936,
	937, 0, 934, 931, 932, 933, 925, 926, 927, 928,
	930, 0, 950, 929, 0, 0, 1679, 0, 921, 922,
	0, 941, 942, 943, 951, 952, 953, 0, 940, 0,
	0, 0, 948, 956, 944, 0, 0, 0, 0, 0,
	949, 924, 0, 0, 955, 0, 1490, 1491, 954, 1508,
	1509, 1510, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 1655, 923, 0, 0, 939, 0, 0, 938,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 0, 0, 0, 1505, 0, 0,
	947, 0, 0, 935, 936, 937, 0, 934, 931, 932,
	933, 925, 926, 927, 928, 930, 0, 950, 929, 0,
	0, 1663, 0, 0, 921, 922, 0, 941, 942, 943,
	951, 952, 953, 940, 0, 0, 0, 948, 956, 0,
	944, 0, 0, 0, 0, 949, 1496, 924, 0, 0,
	955, 0, 0, 954, 0, 0, 921, 922, 0, 941,
	942, 943, 951, 952, 953, 946, 0, 0, 0, 923,
	0, 939, 944, 0, 0, 938, 0, 0, 0, 924,
	0, 1511, 955, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 1506,
	0, 923, 0, 0, 0, 947, 0, 938, 935, 936,
	937, 0, 934, 931, 932, 933, 925, 926, 927, 928,
	930, 0, 950, 0, 929, 2076, 1243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 940, 0,
	0, 0, 0, 948, 956, 0, 0, 0, 0, 0,
	949, 0, 0, 0, 0, 0, 929, 0, 1522, 954,
	0, 1521, 0, 0, 0, 0, 1507, 0, 0, 0,
	0, 946, 0, 0, 0, 948, 956, 939, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 954, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 945, 946, 0, 0, 0, 0, 0, 939,
	947, 0, 0, 935, 936, 937, 2075, 934, 931, 932,
	933, 925, 926, 927, 928, 930, 0, 950, 0, 1457,
	0, 0, 0, 0, 945, 0, 0, 0, 0, 0,
	0, 1502, 1503, 1504, 940, 1501, 1498, 1499, 1500, 1492,
	1493, 1494, 1495, 1497, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 0, 921, 922, 0, 941, 942, 943,
	951, 952, 953, 0, 0, 0, 940, 0, 0, 0,
	944, 0, 0, 0, 0, 1158, 0, 924, 949, 0,
	955, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 923,
	0, 0, 0, 0, 0, 938, 947, 0, 0, 935,
	936, 937, 0, 934, 931, 932, 933, 925, 926, 927,
	928, 930, 0, 950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1159, 0, 0, 0, 0, 947, 0,
	0, 935, 936, 937, 0, 934, 931, 932, 933, 925,
	926, 927, 928, 930, 929, 950, 0, 0, 959, 0,
	0, 0, 0, 0, 921, 922, 0, 941, 942, 943,
	951, 952, 953, 948, 956, 0, 0, 0, 0, 0,
	944, 0, 0, 0, 958, 0, 0, 924, 0, 954,
	955, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 946, 0, 0, 0, 0, 0, 939, 0, 923,
	0, 0, 0, 0, 0, 938, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 945, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 922, 0, 941, 942, 943, 951, 952,
	953, 0, 0, 0, 929, 0, 0, 0, 944, 0,
	0, 0, 0, 0, 940, 924, 0, 0, 955, 0,
	0, 0, 0, 948, 956, 0, 949, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 923, 0, 954,
	0, 0, 0, 938, 0, 0, 0, 0, 0, 0,
	0, 946, 0, 0, 0, 0, 0, 939, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 945, 0, 0, 0, 947, 0, 0, 935,
	936, 937, 929, 934, 931, 932, 933, 925, 926, 927,
	928, 930, 0, 950, 0, 0, 0, 0, 0, 0,
	0, 948, 956, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 954, 0, 0,
	0, 0, 0, 0, 0, 0, 949, 0, 0, 946,
	0, 0, 0, 0, 0, 939, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	945, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 947, 0, 0, 935,
	936, 937, 0, 934, 931, 932, 933, 925, 926, 927,
	928, 930, 940, 950, 921, 922, 0, 941, 942, 943,
	951, 952, 953, 0, 949, 0, 0, 0, 0, 0,
	944, 0, 0, 0, 0, 0, 0, 924, 0, 0,
	955, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 923,
	0, 0, 0, 0, 0, 938, 0, 0, 0, 0,
	0, 1490, 1491, 0, 1508, 1509, 1510, 0, 0, 0,
	0, 0, 0, 0, 947, 0, 0, 935, 936, 937,
	0, 934, 931, 932, 933, 925, 926, 927, 928, 930,
	0, 950, 921, 922, 0, 941, 942, 943, 951, 952,
	953, 0, 0, 0, 929, 0, 0, 0, 944, 0,
	0, 0, 1505, 0, 0, 924, 0, 0, 955, 0,
	0, 0, 0, 948, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 923, 0, 954,
	0, 0, 0, 938, 0, 0, 0, 0, 0, 0,
	0, 946, 0, 0, 0, 0, 0, 939, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1512, 945, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 929, 0, 0, 0, 1511, 1528, 0, 0,
	0, 0, 921, 922, 0, 941, 942, 943, 951, 952,
	953, 948, 956, 0, 1506, 0, 0, 0, 944, 0,
	0, 0, 1523, 0, 940, 924, 0, 954, 955, 0,
	0, 0, 0, 0, 0, 0, 949, 0, 0, 946,
	0, 0, 0, 0, 0, 939, 0, 923, 0, 0,
	0, 0, 0, 938, 0, 0, 0, 0, 1667, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 947, 0, 0, 935,
	936, 937, 929, 934, 931, 932, 933, 925, 926, 927,
	928, 930, 940, 950, 0, 0, 0, 0, 0, 0,
	0, 948, 956, 0, 949, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 954, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 946,
	0, 0, 0, 0, 0, 939, 1502, 1503, 1504, 0,
	1501, 1498, 1499, 1500, 1492, 1493, 1494, 1495, 1497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	945, 0, 0, 0, 947, 0, 0, 935, 936, 937,
	0, 934, 931, 932, 933, 925, 926, 927, 928, 930,
	0, 950, 0, 0, 0, 0, 0, 0, 0, 0,
	921, 922, 0, 941, 942, 943, 951, 952, 953, 0,
	0, 0, 940, 0, 0, 0, 944, 0, 0, 0,
	0, 0, 0, 924, 949, 0, 955, 0, 0, 0,
	921, 922, 0, 941, 942, 943, 951, 952, 953, 0,
	0, 0, 0, 0, 0, 923, 944, 0, 0, 0,
	1481, 938, 0, 924, 0, 0, 955, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 923, 0, 0, 0, 0,
	0, 938, 0, 0, 947, 0, 0, 935, 936, 937,
	0, 934, 931, 932, 933, 925, 926, 927, 928, 930,
	929, 950, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 948,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	929, 0, 0, 0, 0, 954, 921, 922, 0, 941,
	942, 943, 951, 952, 953, 0, 0, 946, 0, 948,
	956, 0, 944, 939, 0, 0, 0, 0, 0, 924,
	0, 0, 955, 0, 0, 954, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 946, 945, 0,
	0, 923, 0, 939, 0, 0, 0, 938, 0, 0,
	1488, 0, 0, 921, 922, 0, 941, 942, 943, 951,
	952, 953, 0, 0, 0, 0, 0, 0, 945, 944,
	0, 0, 0, 0, 0, 0, 924, 0, 0, 955,
	940, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 949, 0, 0, 0, 929, 0, 923, 0,
	0, 0, 0, 0, 938, 0, 0, 0, 0, 0,
	940, 0, 0, 0, 0, 948, 956, 0, 0, 0,
	0, 0, 949, 0, 0, 0, 0, 0, 0, 0,
	0, 954, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 0, 0, 0, 939,
	0, 0, 947, 929, 0, 935, 936, 937, 0, 934,
	931, 932, 933, 925, 926, 927, 928, 930, 0, 950,
	0, 0, 948, 956, 945, 0, 0, 0, 0, 0,
	0, 0, 947, 0, 0, 935, 936, 937, 954, 934,
	931, 932, 933, 925, 926, 927, 928, 930, 0, 950,
	946, 0, 0, 0, 0, 0, 939, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 949, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 921, 922, 0, 941, 942, 943, 951, 952, 953,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 924, 949, 0, 955, 947, 0,
	0, 935, 936, 937, 0, 934, 931, 932, 933, 925,
	926, 927, 928, 930, 0, 950, 923, 0, 0, 0,
	0, 0, 938, 0, 0, 0, 0, 0, 0, 805,
	797, 822, 790, 813, 812, 0, 0, 792, 791, 0,
	0, 0, 824, 823, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 947, 0, 0, 935, 936,
	937, 0, 934, 931, 932, 933, 925, 926, 927, 928,
	930, 929, 950, 818, 0, 810, 809, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 0, 0, 0, 0,
	948, 956, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 954, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 946, 0,
	0, 0, 0, 0, 939, 0, 0, 0, 0, 800,
	799, 801, 802, 803, 0, 821, 0, 0, 805, 797,
	822, 790, 813, 812, 0, 0, 792, 791, 0, 0,
	0, 824, 823, 0, 0, 0, 0, 0, 0, 0,
	794, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 811, 0, 0, 0, 798, 0, 0, 0,
	0, 0, 818, 0, 810, 809, 0, 0, 0, 0,
	0, 940, 0, 808, 0, 0, 0, 0, 0, 0,
	0, 806, 0, 949, 0, 1177, 1175, 1176, 1179, 1178,
	807, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 795, 0,
	0, 0, 0, 0, 0, 0, 804, 796, 800, 799,
	801, 802, 803, 0, 821, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 793, 0, 0, 819, 820,
	0, 0, 0, 947, 0, 0, 935, 936, 937, 794,
	934, 931, 932, 933, 925, 926, 927, 928, 930, 0,
	950, 811, 825, 0, 0, 798, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 795, 0, 0,
	0, 0, 0, 0, 0, 804, 796, 0, 0, 0,
	0, 0, 0, 0, 826, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 793, 0, 0, 819, 820, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 825,
}
var sqlPact = [...]int{

	193, -1000, 25, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 791,
	15635, 15635, 19227, -1000, -1000, -1000, -1000, -1000, -1000, 706,
	728, 24778, 4985, 19227, 19227, 18953, 1238, 1238, 20597, -1000,
	-1000, 23885, -1000, 3035, 463, 464, 463, 463, 447, 20597,
	546, 819, 189, -1000, 640, 12, 23611, 19227, 1368, 23,
	17583, 294, 193, 18679, 23337, 19227, 18405, 522, 20, 16199,
	19227, -1000, 31, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1194, 324,
	31, -1000, 1193, 1089, 1072, 17583, 23063, 22789, 22515, 22241,
	-1000, 11936, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 726, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 306, 300, -1000, 18131,
	-1000, 906, -1000, 21, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 893, -1000, 19227, -1000, -1000, 21967, 21693, 299,
	832, -1000, -1000, 411, 374, 1390, -1000, 37, -1000, -1000,
	-1000, 1192, -1000, 887, 1191, 1189, 1188, 1187, 1179, 1176,
	370, 823, 433, -1000, 1175, 832, -1000, 832, -1000, -1000,
	-1000, 521, 20597, -1000, 17583, -1000, 21419, 19227, 19227, 1112,
	21145, -1000, 640, -1000, -1000, -1000, 947, 1354, 1354, 1354,
	1381, 142, 141, 189, 4, 19227, -1000, 295, 4, 8985,
	8985, -1000, -1000, 294, -1000, 329, 14789, -1000, 8061, -1000,
	739, 1269, 401, 604, 1268, -128, 701, 699, 1267, 15361,
	16199, 20, 19, -1000, -1000, -1000, 4687, 15361, 602, 13967,
	31, -1000, -1000, -1000, 17583, 19227, 19227, 619, 20871, -1000,
	1266, 104, 1265, -1000, 103, 1261, -1000, 103, 1255, 5,
	-1000, -1000, -1000, -1000, -1000, -1000, 294, 17857, 19227, 1498,
	27271, -1000, 10188, -1000, -1000, 15635, 1057, 15635, -1000, -1000,
	1495, -1000, 10188, -1000, 18, 17, 1015, 1077, 12523, 12236,
	1314, 905, -1000, -1000, -1000, 35, 4985, 19227, 1200, 15635,
	19227, 19227, 19227, 19227, 19227, 19227, -1000, 1011, -1000, -1000,
	19227, 19227, 705, -1000, 9, 7, -1000, 20597, -1000, 116,
	-1000, 293, 980, 380, 144, 20323, 380, 979, -1000, 947,
	-1000, 911, 1008, 9288, 10188, 189, -1000, -1000, 189, 189,
	10188, -1000, -1000, 19227, 4, 1487, 19227, 94, -1000, 26014,
	-1000, -1000, 10188, 10188, 10188, 10188, 10188, 795, 325, -1000,
	290, 286, 5910, -1000, -1000, 1590, -1000, -1000, -1000, 163,
	-1000, -1000, 10188, 31, -1000, -1000, -1000, -1000, 281, 1605,
	-1000, 431, -1000, -1000, -1000, 378, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1199, 280, 279, -1000, -1000,
	-1000, -1000, 274, 273, 272, 269, 260, 254, 253, 251,
	250, 249, 248, 247, 246, 241, 240, 758, -1000, 397,
	-1000, -1000, 397, 397, -1000, 235, 235, 236, -1000, -1000,
	-1000, -1000, 235, -1000, -1000, -1000, 363, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 239, 94, -1000, -1000, -1000, 19227,
	1, -1000, 26866, -1000, -28, 788, -1000, 17035, 1358, 1350,
	1337, 17583, 1394, 12, 1393, 12, 520, 19227, 19227, 519,
	518, 17583, 355, -1000, -1000, -1000, -1000, -1000, 19227, -1000,
	-1000, -4, -1000, -1000, 1170, -5, -1000, -1000, 386, 113,
	1462, 113, 14241, -1000, 19227, 19227, -1000, 19227, -1000, -1000,
	19227, -1000, 19227, 19227, -1000, 19227, 3073, 16487, 750, 1249,
	578, 12, -19, -1000, 1509, -1000, -1000, -1000, -1000, 77,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 236, 758, 235,
	235, 235, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 363,
	-1000, -1000, 397, 397, 397, -1000, -1000, -21, 26866, 517,
	-1000, 1169, 460, -27, 754, 1064, 896, -1000, -1000, -1000,
	-1000, 3, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1576, -1000, -1000, 1587, 3, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1603, 4985, -1000, -1000,
	-1000, 19227, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 19227, 19227, 754, 1064, -1000, -1000, 17583, 16761,
	1424, 1248, 769, -1000, 1407, 19227, 885, 978, -1000, 543,
	1246, -1000, -1000, -1000, -1000, 26866, -1000, 26866, 686, 1099,
	-1000, 1099, -3, -1000, 25904, -1000, 233, -31, 386, 8985,
	13677, 27162, 27271, 19227, 536, 10188, 10188, 10188, 10188, 10188,
	10188, 10188, 10188, 10188, 10188, 10188, 10188, 10188, 10188, 10188,
	10188, 10188, 10188, 10188, 10188, 10188, 10188, 1031, 10188, 515,
	10188, 10188, 10188, 10188, 1632, 833, 224, 850, 4985, -1000,
	-1000, 637, 637, 637, 27131, 27131, 173, 325, -1000, 10188,
	-1000, 8661, 141, 25453, -9, -1000, -1000, -1000, 6810, 395,
	26866, 31, 5586, -1000, 1585, 934, 1206, 1152, 232, 140,
	121, 10188, 10188, 10488, 10488, 10188, 10788, 10188, 10188, 6210,
	10188, 10188, 10188, 10188, 10188, 10188, -1000, 230, -1000, -1000,
	-1000, -1000, 1584, -1000, -1000, 1583, -1000, 534, 531, 1579,
	386, 118, 8061, -1000, 750, 19227, 19227, 19227, -1000, -1000,
	966, 20049, 965, 27271, 19227, -1000, 229, 226, 1041, 1037,
	19227, 19227, 19775, 19501, 19227, 698, 12, -1000, 12, -1000,
	19227, 657, -1000, 19227, 19227, 655, 1133, 914, -1000, 381,
	15361, 570, 1168, 19227, 646, 10188, 682, -1000, 13387, 403,
	19227, 646, 78, -1000, -1000, -1000, 351, 19227, -1000, -1000,
	-1000, 104, -1000, 103, 103, -1000, -1000, 17583, -1000, -1000,
	-1000, -1000, -1000, -1000, 27271, 322, 321, -1000, 1578, 513,
	-1000, 512, 511, 509, -1000, 225, -1000, 10188, 19227, 19227,
	1064, -1000, -1000, -1000, -1000, 694, -1000, 740, -1000, 12810,
	-1000, -1000, -1000, -1000, -35, -1000, -1000, -1000, -1000, -1000,
	-1000, 117, -36, -14, 27271, -1000, -1000, -1000, -1000, -1000,
	19227, 268, 19227, 12, 19227, -1000, 1601, 12, 19227, 1245,
	1278, 348, 19227, -1000, -1000, -1000, 10188, -1000, -1000, -1000,
	12, -1000, 1151, -1000, -103, 1146, 1318, -141, 153, 357,
	-1000, 13097, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 368, 1831, 1831, 451, 451, 451, 451, 157,
	157, 264, 2333, 3197, 3197, 3197, 2773, 204, 204, 3197,
	3197, 3197, 27131, 26923, 2146, 10188, 10188, 507, 807, 224,
	2146, 10188, 1558, 2146, 2146, 2146, -1000, 1742, -1000, -1000,
	-1000, -1000, 1167, 220, 10788, 10788, -1000, -1000, -1000, 5910,
	11388, -1000, -1000, -1000, -1000, -1000, 219, 10188, -1000, 25558,
	-182, -42, -1000, -1000, 10188, -43, -71, -1000, -1000, 612,
	-1000, 10188, -1000, -13, 10188, 10188, 10188, 115, 114, -1000,
	820, 218, 216, 10188, -1000, -1000, 26760, 3575, 109, 1164,
	-113, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 100, 99,
	26730, -113, 98, 26381, -1000, 10788, 10788, 10788, 5910, 215,
	95, 25696, -113, 26522, 8361, 8361, 8361, 92, 26412, 10188,
	-113, 3439, 3332, 3109, -46, -50, -54, 1568, -55, 89,
	366, 360, 88, 1151, -1000, -1000, -1000, -1000, 500, 490,
	1243, -1000, 963, -1000, 413, -1000, 703, 10188, 11662, 214,
	213, 801, -1000, 1242, 838, 1233, 838, -1000, -28, 787,
	-1000, -1000, -1000, 489, -1000, -1000, 487, 381, 1163, 551,
	-1000, 864, -1000, -1000, 559, -1000, -1000, 6510, 26866, -1000,
	646, 1340, -60, -1000, -1000, -1000, 386, 14241, 13677, 8061,
	-61, -1000, -1000, -1000, 750, -1000, 419, 1563, 86, 993,
	746, 790, 627, 1559, 26866, -35, -35, -1000, -1000, -1000,
	-1000, -1000, 19227, 1116, -1000, 16761, 212, 19227, 211, -1000,
	210, -1000, -1000, 207, 19227, 1020, 348, 15925, -1000, 380,
	-1000, 85, 1141, 1379, -1000, 13677, 1056, 1049, 13677, 996,
	827, 827, 827, -1000, 206, 3082, 357, 4077, 10188, 17309,
	835, 55, 83, 1146, 10188, 2146, 2146, 10188, 10788, 10788,
	-1000, 2146, -1000, -1000, -1000, -1000, -1000, 1162, 205, 10188,
	27271, 25586, 24580, -62, -1000, 7737, -41, -1000, 10188, -1000,
	25348, -1000, -1000, 319, 1241, -1000, 10188, 26324, 82, 7437,
	-1000, 26102, -23, -23, -1000, 1598, -1000, 14515, 392, 854,
	25243, 27162, 27271, -1000, 10188, -1000, -1000, 1160, 10188, -1000,
	27162, 27271, 10788, 10788, 10788, 10788, 10788, 10788, 10788, 10788,
	10788, 10788, 10788, 10788, 10788, 10788, 10788, 10788, 10788, 10788,
	10788, 1019, 10788, 1554, 1554, 1554, -69, 7113, -1000, 1198,
	1160, 10188, 10188, 27271, 80, 75, 73, -1000, 10188, -113,
	10188, 10188, 10188, -1000, -1000, -1000, 72, -1000, 1555, -1000,
	-1000, -1000, -1000, 1141, 19227, 19227, 19227, 1228, -1000, 2694,
	-1000, 25138, -72, -1000, 296, 1359, 10188, -1000, -1000, 203,
	11662, 19227, -1000, 1067, 1078, 438, 19227, -1000, 19227, -1000,
	19227, 19227, 19227, 19227, 19227, -1000, 15361, 528, 202, -1000,
	-70, -1000, -1000, 209, 12, 646, -1000, -86, -1000, 350,
	-1000, 317, 316, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 70, -1000, -1000, 1120, -1000, 11662, 191, 19227, 16761,
	1402, 11662, 884, 1025, 348, 15925, -1000, 543, -1000, 384,
	10188, 10188, 1146, 13677, 13677, 2156, 1043, 13677, -1000, -1000,
	-1000, -1000, 315, 349, 311, 11936, 17309, -1000, 1552, 1062,
	-77, -1000, -1000, 19227, 190, -1000, 357, 494, 2146, 3544,
	143, 10188, 27271, 24612, -78, 10188, 10188, -1000, -82, -1000,
	10188, 310, 26866, -1000, -1000, -1000, 26866, 10188, 1595, 10188,
	69, 68, 67, -1000, -1000, -1000, 24159, 10188, 58, -1000,
	57, 49, 26866, 1198, 26866, -1000, -1000, 499, 499, 1554,
	1554, 1554, 1554, 2015, 2015, 1953, 1007, 2171, 2171, 2171,
	435, 718, 718, 2171, 2171, 2171, 1159, 1032, 181, 3720,
	10188, -87, -1000, -1000, -1000, 26866, 26866, 47, -1000, -1000,
	-1000, -113, 2709, 25033, 24928, -1000, 46, 384, -1000, -1000,
	-1000, 19227, -1000, 19227, -1000, 19227, 19227, 1149, 930, -1000,
	-1000, 1035, 180, 10788, 19227, -1000, 753, 11662, 1347, 31,
	19227, 1347, 24823, 5586, -88, -92, 929, -1000, 924, 10188,
	-1000, 27271, 838, 838, -1000, 473, 469, -1000, -1000, -101,
	15087, 1597, 1284, 19227, 1328, -1000, -1000, 179, -1000, -1000,
	-1000, 781, -93, 11662, -104, 44, 12, -105, 19227, -1000,
	348, 15925, -1000, 1278, -1000, 19227, 26866, -113, -1000, 2156,
	-1000, 177, 10188, 13677, -1000, -141, -1000, -106, -1000, 357,
	-116, -1000, 308, -180, -1000, 345, -1000, 357, 176, 19227,
	17309, 10188, 10188, 24612, -118, -1000, 2146, 2146, -1000, 24718,
	-1000, 26866, -1000, 26102, -1000, -1000, -1000, 775, -1000, 24507,
	-1000, -1000, -1000, -1000, 10788, 1154, 175, 27271, 24475, -1000,
	-1000, 10188, -1000, -1000, -1000, -1000, -1000, 957, -1000, -1000,
	19227, 943, -1000, -1000, 10188, 3720, 171, 1116, 170, -1000,
	-1000, -1000, -1000, -1000, -1000, 1359, -13, -1000, 709, -1000,
	-1000, 26866, 1348, -1000, -1000, 19227, 19227, -1000, 169, 31,
	-120, -1000, 343, 524, -129, 19227, -1000, -1000, 5283, 19227,
	753, -131, -1000, 1116, -1000, 753, 166, 15925, -1000, 1020,
	-102, -1000, 1400, -1000, 19227, 26866, -1000, 357, -1000, 1548,
	17309, 3073, -1000, 1062, -1000, 4386, 17309, 19227, -138, -1000,
	2146, 2146, -1000, -1000, 43, 854, 1372, -1000, 24792, 10788,
	27271, -139, -1000, 24451, -1000, -1000, 1215, 3682, 1001, 19227,
	-1000, 19227, 1347, 42, 19227, 412, 19227, -1000, -1000, 10188,
	1597, -1000, -1000, 1596, 617, -1000, 386, -1000, 165, 1116,
	753, -1000, 1116, 11662, -1000, 1025, 19227, 164, -143, 17309,
	-1000, -1000, 297, -1000, -1000, 1545, -1000, -148, -1000, -1000,
	695, 10188, 24792, -152, -1000, -1000, 1161, -1000, 873, 779,
	41, -153, -1000, -1000, 144, -1000, 10188, -1000, -23, -1000,
	-1000, 14241, -1000, 19227, -1000, 1116, -1000, -161, -1000, -1000,
	-1000, -1000, -1000, 357, 158, -1000, 40, 9888, 9888, -113,
	-1000, 19227, -1000, 880, 877, 626, -1000, -1000, -1000, -1000,
	-1000, 1001, 26866, 39, -135, -162, -1000, 753, 17309, -1000,
	-1000, -1000, -1000, 11088, 919, 634, 25664, -1000, -1000, -1000,
	1295, -1000, 426, 1006, 1006, 873, 1595, -1000, 817, 1116,
	-1000, 1519, -1000, -1000, -1000, -1000, -1000, -1000, 1531, -1000,
	-1000, 1028, -1000, -1000, -1000, -1000, -1000, -1000, 9588, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1838, 1833, 1411, 1547, 1829, 1821, 1541, 1820, 1818,
	1816, 1810, 1806, 1805, 109, 1536, 1526, 29, 1520, 1804,
	87, 1802, 1800, 1798, 106, 1797, 1796, 1794, 38, 1791,
	1790, 1409, 1405, 1393, 1787, 1785, 104, 1783, 16, 1782,
	76, 1781, 50, 133, 2032, 126, 1778, 1774, 1773, 15,
	103, 70, 1772, 64, 1770, 1769, 63, 42, 34, 24,
	1768, 129, 123, 308, 36, 1766, 1763, 121, 1762, 17,
	26, 1479, 139, 136, 125, 128, 1759, 1752, 1751, 1750,
	53, 1749, 3, 1747, 1746, 11, 59, 14, 1745, 35,
	56, 1743, 1741, 118, 1740, 79, 95, 1397, 57, 127,
	131, 1739, 83, 12, 74, 1737, 1735, 115, 45, 1734,
	46, 78, 120, 1733, 72, 144, 68, 37, 94, 98,
	1732, 1730, 1729, 85, 1728, 102, 81, 1726, 1725, 82,
	1723, 119, 122, 1721, 1720, 112, 1719, 1718, 1717, 147,
	1712, 1710, 145, 1709, 10, 48, 69, 31, 1389, 1385,
	100, 65, 33, 23, 1708, 1476, 1092, 1014, 44, 84,
	58, 47, 88, 54, 66, 134, 18, 1707, 1705, 108,
	1703, 1702, 1700, 1699, 1698, 80, 1697, 1695, 73, 132,
	13, 8, 25, 92, 41, 55, 86, 155, 141, 101,
	1694, 96, 114, 49, 52, 1693, 1692, 1220, 152, 1690,
	1689, 1688, 1217, 1215, 1090, 89, 1687, 1684, 792, 682,
	1682, 1675, 67, 1674, 142, 1673, 1669, 135, 130, 32,
	1667, 60, 75, 91, 1666, 97, 61, 0, 2170, 2051,
	1664, 113, 77, 1662, 1659, 1654, 1653, 30, 2, 9,
	5, 6, 4, 28, 27, 1651, 1650, 117, 20, 71,
	1648, 143, 1646, 1644, 1643, 51, 1641, 22, 1633, 19,
	1632, 1630, 7, 1, 1628, 1627, 140, 1626, 99, 1625,
	1515, 1617, 138, 1615, 1611, 1516, 40, 90,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 51, 51, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 48,
	48, 53, 53, 53, 55, 55, 52, 52, 47, 47,
	5, 5, 225, 225, 226, 226, 37, 37, 41, 41,
	38, 39, 39, 40, 40, 6, 6, 6, 7, 7,
	7, 7, 7, 7, 14, 15, 15, 15, 15, 15,
	15, 15, 15, 99, 99, 98, 98, 101, 101, 16,
	16, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 193, 193, 192, 19, 167, 167, 20,
	20, 20, 20, 21, 124, 124, 22, 22, 22, 22,
	23, 27, 266, 266, 266, 270, 270, 271, 271, 272,
	272, 272, 272, 272, 272, 272, 268, 268, 30, 30,
	30, 30, 30, 143, 139, 139, 141, 141, 141, 141,
	62, 138, 138, 138, 138, 140, 140, 140, 140, 218,
	217, 217, 223, 223, 223, 77, 77, 77, 77, 77,
	78, 78, 78, 216, 216, 216, 216, 224, 224, 224,
	224, 224, 224, 79, 79, 79, 222, 222, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	18, 267, 267, 269, 269, 32, 32, 33, 33, 10,
	10, 11, 11, 80, 80, 81, 81, 146, 146, 146,
	146, 82, 82, 54, 54, 54, 145, 235, 235, 236,
	236, 236, 236, 236, 236, 237, 237, 237, 237, 237,
	237, 237, 233, 233, 234, 231, 231, 232, 232, 232,
	232, 273, 273, 144, 144, 85, 85, 240, 240, 240,
	240, 238, 238, 238, 238, 238, 241, 239, 242, 242,
	242, 242, 242, 179, 179, 179, 35, 12, 60, 60,
	13, 9, 9, 128, 128, 89, 89, 184, 184, 184,
	70, 70, 49, 49, 49, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 129, 129, 130, 130,
	25, 29, 34, 34, 34, 34, 34, 275, 275, 66,
	66, 66, 66, 67, 67, 142, 142, 142, 142, 142,
	61, 8, 8, 56, 56, 57, 57, 58, 58, 59,
	59, 276, 276, 24, 24, 24, 73, 73, 135, 135,
	135, 137, 137, 136, 136, 136, 114, 114, 114, 36,
	94, 94, 103, 103, 104, 104, 190, 105, 105, 28,
	28, 44, 44, 42, 42, 42, 42, 42, 42, 43,
	43, 45, 45, 45, 45, 45, 45, 45, 248, 248,
	248, 251, 251, 247, 249, 249, 250, 250, 274, 274,
	115, 115, 115, 84, 83, 83, 87, 87, 86, 88,
	88, 183, 112, 112, 112, 112, 131, 132, 132, 133,
	133, 134, 134, 111, 111, 163, 163, 46, 46, 93,
	93, 95, 95, 153, 153, 153, 154, 154, 152, 152,
	152, 152, 185, 185, 185, 185, 185, 185, 185, 185,
	264, 264, 264, 265, 265, 182, 182, 186, 186, 186,
	186, 186, 186, 180, 180, 180, 180, 181, 181, 191,
	191, 118, 118, 118, 118, 116, 116, 117, 117, 187,
	187, 187, 187, 113, 113, 188, 188, 188, 147, 147,
	194, 194, 194, 212, 212, 92, 92, 92, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 196, 196, 196, 196, 198, 198,
	198, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 211, 211, 211, 211, 211,
	199, 199, 206, 206, 207, 207, 208, 209, 200, 200,
	201, 201, 202, 203, 210, 210, 210, 210, 214, 214,
	204, 204, 204, 204, 204, 205, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	126, 126, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 157, 157, 157, 157, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 243,
	243, 243, 243, 243, 243, 243, 245, 245, 246, 246,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 252, 252, 253,
	253, 255, 255, 256, 256, 257, 258, 258, 258, 259,
	260, 260, 254, 254, 261, 261, 261, 262, 262, 263,
	263, 263, 263, 263, 169, 169, 169, 170, 170, 171,
	177, 177, 177, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 68,
	68, 68, 68, 68, 100, 100, 166, 166, 164, 164,
	164, 168, 168, 119, 119, 213, 213, 213, 213, 213,
	213, 213, 120, 120, 120, 127, 121, 121, 122, 122,
	122, 122, 122, 122, 160, 161, 123, 123, 123, 162,
	162, 172, 176, 176, 175, 174, 174, 173, 173, 150,
	150, 151, 151, 149, 148, 108, 108, 107, 107, 106,
	106, 277, 277, 178, 178, 109, 109, 110, 102, 102,
	189, 189, 189, 189, 96, 96, 75, 75, 97, 97,
	71, 71, 74, 74, 72, 72, 72, 72, 90, 90,
	91, 91, 69, 69, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 215, 215, 215, 165, 63,
	63, 63, 64, 64, 65, 65, 220, 220, 220, 221,
	221, 221, 221, 219, 219, 219, 219, 219, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 3, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 2, 0,
	7, 6, 1, 1, 1, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 4, 6, 7, 1, 1,
	1, 1, 1, 1, 6, 3, 5, 4, 6, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 5, 3, 0, 1,
	1, 1, 1, 3, 3, 0, 2, 3, 2, 3,
	6, 6, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 3,
	6, 3, 1, 5, 2, 1, 1, 1, 3, 3,
	2, 3, 3, 3, 3, 1, 3, 3, 2, 1,
	1, 3, 1, 1, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 2, 2,
	2, 4, 2, 4, 4, 4, 4, 4, 4, 4,
	2, 3, 4, 3, 3, 4, 4, 2, 5, 5,
	2, 2, 0, 2, 0, 6, 6, 5, 5, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 5, 2, 0,
	6, 11, 14, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 8, 11, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 6, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 2, 4, 4, 4, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 2, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 3, 3,
	0, 1, 3, 3, 5, 1, 1, 3, 2, 4,
	4, 0, 7, 4, 6, 3, 1, 5, 6, 9,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 1, 1, 3, 4, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	6, 4, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -27, -29,
	-28, -30, -31, -32, -33, -34, -25, -35, -36, 23,
	34, 221, 65, -8, -9, -10, -11, -12, -13, -250,
	93, 101, 123, 204, 100, 86, 117, 224, 232, -42,
	-44, 240, -143, 241, 35, 250, 59, 96, 226, 220,
	274, 67, -248, -45, -43, 322, 297, 303, 235, -46,
	258, 289, 325, 258, 132, 79, 292, -266, -97, 258,
	79, -72, -63, 315, 4, -227, -229, 20, 21, 23,
	33, 34, 35, 40, 44, 47, 58, 59, 60, 62,
	64, 65, 66, 69, 70, 77, 78, 80, 82, 86,
	88, 92, 93, 95, 100, 101, 107, 108, 111, 113,
	118, 123, 124, 125, 126, 133, 136, 138, 131, 146,
	148, 149, 152, 151, 156, 159, 162, 164, 165, 166,
	169, 167, 171, 172, 174, 173, 179, 181, 182, 184,
	187, 190, 193, 196, 197, 198, 199, 202, 204, 206,
	207, 208, 210, 211, 213, 214, 215, 216, 217, 220,
	218, 219, 221, 222, 224, 226, 227, 229, 231, 232,
	233, 234, 237, 238, 240, 241, 243, 246, 249, 250,
	251, 254, 252, 248, 257, 259, 260, 261, 262, 263,
	270, 274, 275, 276, 277, 280, 281, 282, 284, 286,
	287, 288, 293, 298, 299, 300, 301, 28, 36, 37,
	38, 39, 41, 42, 45, 46, 50, 51, 52, 54,
	81, 83, 84, 99, 102, 103, 109, 119, 121, 127,
	128, 137, 139, 140, 141, 143, 154, 168, 178, 180,
	191, 195, 201, 203, 209, 228, 236, 244, 245, 253,
	255, 265, 266, 267, 271, 272, 289, 290, -266, -71,
	-63, 79, 88, 136, 282, 281, 79, 132, 258, 292,
	-17, 322, -28, -7, -15, -4, -24, -36, -14, -31,
	-18, -32, -33, -16, 23, -219, 4, -227, -229, -228,
	-230, 56, 68, 116, 135, 129, 145, 147, 155, 157,
	170, 192, 194, 225, 242, 22, 24, 25, 26, 27,
	29, 30, 31, 32, 43, 48, 49, 53, 55, 57,
	63, 67, 71, 72, 73, 74, 75, 76, 85, 87,
	89, 90, 91, 94, 96, 98, 104, 105, 106, 112,
	114, 115, 117, 120, 122, 130, 132, 134, 142, 144,
	150, 153, 158, 160, 161, 175, 176, 177, 183, 185,
	186, 188, 189, 200, 205, 212, 223, 235, 239, 247,
	256, 258, 264, 268, 269, 273, 278, 279, 283, 285,
	291, 292, 294, 295, 296, 297, -63, -63, -63, 204,
	22, -270, 22, -271, -272, 67, 93, 117, 235, 136,
	88, 281, -270, -67, 232, -63, -139, 159, 238, 228,
	270, -140, -138, -218, 265, 169, -98, -63, 4, 22,
	79, 58, 80, 118, 132, 133, 63, 64, 149, 259,
	265, 270, 67, 284, 261, -275, 270, 270, -275, -275,
	-66, 270, 268, -67, -274, 258, 258, 283, 292, -128,
	79, 279, -43, -45, -44, -86, -87, 278, 142, 98,
	189, -42, -44, -248, -251, 210, -247, -63, -251, -83,
	-84, 22, 90, 326, -187, -71, 186, -110, 322, -3,
	-187, 127, -71, -74, 127, -71, -63, -187, 127, 268,
	326, -97, -90, -63, -149, -148, 324, 115, 115, 322,
	-107, -108, -148, -149, 115, 144, 144, -188, -187, -63,
	127, -75, 127, -74, -99, 127, -98, -99, 127, -193,
	-192, -221, 4, -227, -229, -228, 289, 258, 132, -167,
	322, -124, 322, -63, 22, 185, 326, 185, -63, -139,
	52, -139, 322, -141, -61, -62, 146, 206, 268, 307,
	115, 301, -79, 5, 85, -101, 324, 115, -267, 185,
	115, 115, 115, 115, 115, 115, 301, 146, 206, 231,
	258, 292, 115, -142, -61, -62, -142, 268, -67, -113,
	-187, -98, 127, -63, -98, 132, -63, 127, -86, -87,
	-112, -131, -132, 158, 183, -115, 22, 90, -115, -115,
	44, 323, 323, 326, -251, -91, 322, -102, -189, -155,
	315, -157, 313, 314, 319, 175, 302, -169, -159, -172,
	99, 228, 322, -71, -158, 327, 9, -245, -44, 29,
	-170, -171, 48, -63, 7, 8, 5, 6, -69, -196,
	-165, -205, 273, 104, 177, -243, -244, 4, -227, -220,
	-197, -207, -201, -204, 143, 56, 72, 75, 73, 76,
	239, 283, 49, 28, 102, 103, 195, 201, 255, 271,
	272, 127, 178, 128, 54, 119, 154, 92, 37, 39,
	41, 42, 50, 51, 81, 83, 84, 109, 137, 139,
	140, 141, 180, 209, 244, 253, 266, 267, 290, -228,
	-208, -209, -202, -203, -210, -102, -110, 315, -71, 322,
	-109, -178, -155, 85, -51, 218, -50, 21, 23, 93,
	287, 99, 248, 262, 248, 262, 218, 99, 327, 218,
	218, 99, -225, -222, 9, -221, 5, -72, 326, -219,
	315, -226, -225, 251, 323, -96, -71, -108, -188, -73,
	-71, -73, 240, -63, 30, 99, -53, 326, 47, 222,
	99, -53, 326, 99, -53, 99, 323, 326, -187, 127,
	-74, 30, -166, -194, -195, -197, -206, -200, -204, -205,
	40, 46, 45, 263, 168, 236, 245, 38, 184, 138,
	137, 139, 140, 141, 244, 37, 209, 109, 92, 84,
	83, 180, 42, 41, -208, -209, -202, -203, 81, 266,
	267, 143, 39, 51, 50, 290, 253, -100, -155, -266,
	-272, -266, 30, -100, 326, 326, 156, -78, 162, 174,
	124, -217, 85, -223, -216, -179, 9, 273, 104, 185,
	-222, 8, 314, -215, 7, 313, -217, 85, 70, -224,
	5, 4, -165, -179, 85, 159, -205, 324, -219, -218,
	-269, 112, -266, -218, -218, -218, -218, -218, -63, 156,
	-218, -218, 258, 132, 326, 326, -67, -53, 326, 322,
	-85, 175, -249, 297, -85, 322, -64, 127, -63, -249,
	175, -112, -132, -131, -133, -155, 22, -155, -157, -43,
	-43, -43, -88, -183, -155, -247, 30, -90, -93, 326,
	115, 10, 11, 55, 33, 313, 314, 315, 316, 110,
	317, 310, 311, 312, 309, 305, 306, 307, 61, 163,
	230, 13, 14, 15, 26, 188, 157, 302, 129, 242,
	319, 16, 17, 18, 145, 36, 130, -68, 30, 4,
	-76, -155, -155, -155, -155, -155, 194, -106, -150, 320,
	-44, 322, -44, -155, -100, 7, -44, -164, 320, -173,
	-155, -107, 322, 5, 322, 5, -252, 298, 112, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 203, -214, 293, -214,
	-214, -198, 322, -198, -199, 322, -198, 299, 303, 322,
	-93, -71, 326, 323, 326, 268, -129, 63, 57, -145,
	127, 57, -231, -63, 63, -232, 53, 279, 205, 114,
	-129, 63, -129, 63, 63, -187, 33, -28, 33, -28,
	268, -74, -63, 268, 268, -187, -191, 304, -63, -191,
	326, 115, 323, 326, -147, 295, -135, -28, 322, 85,
	30, -135, -103, -104, -190, -105, -71, 322, -63, -63,
	-74, -75, -98, -99, -99, -17, -192, 99, -20, -28,
	-24, -36, -14, 323, 326, -92, 29, -125, 322, 300,
	166, 82, 125, 165, -126, 234, 323, 326, 268, 115,
	270, 323, -62, -61, -77, 208, 246, 219, 237, 326,
	8, 7, 7, -219, -268, -63, -71, -74, -62, -61,
	-187, -80, -90, -81, -63, -146, -145, -233, -234, -231,
	132, 279, 105, 30, 99, -60, 199, 30, 185, 175,
	-56, 260, 99, -134, 228, 229, 326, -49, 31, 89,
	322, 323, -147, -189, -95, -185, 320, -187, -71, -44,
	-186, 322, -212, -194, -211, 214, 215, 213, 217, 216,
	-194, -98, 265, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, 157, 129, 242, 36, 130,
	-155, 268, -155, -155, -155, -155, 167, 175, 177, 273,
	104, 280, 90, 181, -277, 256, 32, -162, -44, 322,
	-177, 27, 247, 22, -219, -169, 228, 322, -150, -155,
	-151, -100, 323, 323, 326, -100, -168, 321, -164, -176,
	-175, 294, 323, -100, 291, 22, 90, 315, 7, -125,
	-253, 107, 120, 322, 323, 323, -155, -155, -119, -213,
	-100, 4, 300, 166, 82, 125, 165, 234, -119, -120,
	-155, -100, -121, -156, -157, 313, 314, 319, 322, 228,
	-122, -155, -100, -155, 43, 153, 269, -123, -155, 115,
	-100, -155, -155, -155, -100, -100, -100, 322, 7, 7,
	265, 265, 7, -147, 323, -178, -50, -71, -63, -63,
	175, -145, 127, -55, 175, -194, -63, 322, 322, 148,
	148, -63, -63, 127, -63, 127, -63, -63, -51, 218,
	-28, -28, -63, 218, -63, -71, 218, -37, 126, 181,
	-40, 297, -225, 251, 115, -71, -114, 223, -155, -114,
	-137, 185, -96, 289, -63, -114, -94, 326, 115, 307,
	-96, -53, -53, -53, -187, -194, 320, 320, 7, 268,
	268, 268, 268, 322, -155, -268, -268, -61, 277, 60,
	208, -223, 326, 323, 323, 326, -64, 132, -64, -28,
	-98, 5, -28, -71, 99, -57, 95, -276, 307, -63,
	-183, -20, -111, 120, -191, 326, 68, -118, 147, 170,
	116, 155, 225, 135, 7, 101, -152, 327, 322, -182,
	303, -44, -186, -185, 301, -155, -155, 268, -277, 256,
	-162, -155, 167, 177, 273, 104, 280, 90, 181, 115,
	322, -156, -156, -100, -159, 322, -100, 321, 330, 323,
	-155, 321, 321, 326, -174, -175, 94, -155, -87, 326,
	-86, -155, -100, -100, 323, 323, -258, 193, 322, 322,
	-155, 30, 326, 323, 115, 323, 323, -127, 200, 323,
	10, 11, 313, 314, 315, 316, 110, 317, 310, 311,
	312, 309, 305, 306, 307, 61, 163, 230, 13, 14,
	15, 145, 130, -156, -156, -156, -100, 322, 323, -160,
	-161, 115, 112, 30, -123, -123, -123, 323, 115, -100,
	326, 326, 326, 323, 323, 323, 7, 323, 326, 323,
	301, 301, 323, -111, 268, 268, 99, 175, 286, -235,
	-232, -155, -89, -184, -63, -246, 322, -243, -244, -69,
	322, 322, -48, 93, 240, -130, 99, -53, 99, -53,
	268, -129, 63, 268, 268, -40, 115, 257, 187, 251,
	-102, 176, -114, 62, 323, -147, -104, -95, -178, 323,
	321, 7, 7, 323, 166, 125, 165, -126, 165, -126,
	-126, 7, -63, -82, 131, -146, 322, -64, 322, 322,
	-85, 322, -63, -58, 152, -276, -222, -249, 323, -163,
	122, 44, -185, 147, 147, -185, -118, 147, -116, 192,
	-116, -116, -264, 322, -17, 322, -182, -219, 320, 328,
	-100, -181, -180, 30, -63, 190, 323, -155, -155, -156,
	-156, 115, 322, -155, -166, 26, 26, 323, -100, 323,
	326, -151, -155, 323, -164, 96, -155, 264, 323, 291,
	-87, -87, -87, 5, -259, -63, 322, 295, -86, 323,
	-212, -194, -155, -160, -155, -212, -194, -156, -156, -156,
	-156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
	-156, -156, -156, -156, -156, -156, 90, 175, 181, -156,
	326, -100, 323, -161, -160, -155, -155, -194, 323, 323,
	323, -100, -155, -155, -155, 323, 7, -163, -63, -63,
	-145, 99, -236, 63, -237, 55, 105, 67, 175, 177,
	279, 205, 53, 85, 212, 323, 323, 326, -70, -107,
	55, -70, -155, 322, -89, -90, 175, 85, 175, 85,
	78, 275, -63, -63, -71, -63, -63, -63, -71, -226,
	265, 322, -136, 322, 185, -28, -114, 307, 321, 321,
	323, 130, -89, 322, -90, -80, 30, -89, 185, -59,
	151, -276, -222, -56, -255, 296, -155, -100, -185, -185,
	-117, 285, 185, 147, -185, 321, 323, -265, 7, 321,
	-193, -181, 7, -154, -153, 113, 173, 323, -63, 322,
	-182, 26, 26, -155, -166, 323, -155, -155, 323, -155,
	321, -155, 5, -155, 323, 323, 323, -260, -63, -155,
	323, 323, 323, -161, 115, 90, 181, 322, -155, 323,
	323, 326, 323, 323, 323, -255, -145, -63, -98, -63,
	105, 127, 177, 148, 322, -156, -71, -144, -273, 66,
	254, -184, -49, -98, -49, 323, -100, 323, 323, 177,
	177, -155, -194, -53, -53, 268, 268, -158, -69, -63,
	-39, -38, 5, 91, -90, 63, -110, -44, 322, 196,
	323, -89, 323, 323, -28, 323, -71, -276, -222, -57,
	-256, -257, -63, -117, 322, -155, -185, -152, 323, 326,
	-182, 323, 321, 326, 329, 307, -182, 322, -90, -180,
	-155, -155, 323, 323, -87, -254, 198, 323, -156, 115,
	322, -166, 323, -155, -237, -64, 175, -155, -65, 322,
	-82, 322, -70, -87, 212, -52, 55, -63, -63, 322,
	326, 323, -41, 307, 281, 176, 323, -63, -63, -144,
	323, -82, -144, 322, -222, -58, 326, 30, -90, -182,
	7, -181, -17, -153, -219, 320, -181, -90, 323, 323,
	-87, 44, -156, -166, 323, 323, 99, 323, -240, 164,
	-63, -90, -49, 323, -71, -47, 285, -98, -100, -38,
	5, 240, -147, 322, -82, -144, -82, -89, -59, -257,
	-259, 323, -180, 321, 7, 323, -261, 207, 229, -100,
	323, 105, -238, -241, -239, 185, 116, 197, 243, 323,
	323, -85, -155, -87, -103, -90, -82, 323, -182, 321,
	323, -262, -263, 36, 276, 70, -155, -262, -63, -239,
	185, -241, 185, 281, 88, -240, 323, -147, 323, -144,
	-181, -263, 202, 111, 228, 202, 111, -242, 172, 222,
	47, 240, -242, -238, -54, 47, 222, -82, 26, 20,
	177, 85, -263,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 0,
	0, 0, 0, 78, 79, 80, 81, 82, 83, 0,
	0, 417, 0, 0, 0, 0, 0, 0, 0, 389,
	-2, 0, 152, 0, 338, 0, 338, 338, 342, 0,
	419, 304, 416, -2, 427, 0, 0, 0, 425, 403,
	0, 0, -2, 0, 0, 0, 0, 0, 132, 0,
	948, 878, 884, 885, 909, 910, 911, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 0, 0,
	880, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 0, 220, 923, 924, 925, 926,
	927, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
	1199, 1200, 1201, 1202, 1203, 1204, 118, 125, 126, 1000,
	128, 0, 135, 136, 137, 139, 140, 141, 142, 143,
	144, 145, 0, 331, 1021, 344, 148, 977, 1025, 1097,
	1042, 155, 165, 0, 1103, -2, 169, 95, 198, 199,
	200, 0, 202, 222, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 217, 0, 349, 337, 349, 334, 335,
	336, 339, 0, 330, 0, 418, 0, 0, 0, 0,
	0, 303, -2, 399, 400, -2, 0, 422, 422, 422,
	0, 0, 400, 0, 408, 1004, 411, 891, 409, 0,
	0, 424, 423, 0, 404, 499, 0, 447, 0, 2,
	0, 1081, 499, 0, 1081, 883, 0, 0, 1081, 0,
	0, 133, 134, 888, 886, 887, 0, 0, 0, 0,
	881, 857, 855, 856, 0, 0, 0, 0, 505, 85,
	1081, 53, 1081, 876, 53, 1081, 93, 53, 1081, 0,
	113, 115, 919, 920, 921, 922, 1108, 0, 0, 0,
	0, 123, 0, 127, 129, 0, 0, 0, 343, 149,
	1070, 151, 0, 154, 156, 157, 0, 0, 0, 0,
	0, 0, 168, 193, 194, 96, 0, 0, 224, 0,
	0, 0, 0, 0, 0, 0, 211, 0, 213, 214,
	0, 0, 0, 332, 345, 346, 333, 0, 341, 53,
	503, 276, 1081, 415, 276, 913, 415, 1081, -2, 0,
	395, 434, 435, 0, 0, 0, 420, 421, 0, 0,
	0, 391, 392, 0, 410, 0, 0, 450, 868, 872,
	873, 602, 0, 0, 0, 0, 0, 0, 694, 696,
	1075, 1097, 0, 698, 699, 0, 701, 703, 704, 0,
	707, 708, 848, 880, 894, 895, 896, 897, 0, 0,
	900, 0, 902, 903, 904, 748, 717, -2, -2, 892,
	534, 535, 536, 537, -2, 1110, 721, 723, 725, 726,
	727, 728, 0, 1059, 1076, 1077, 1093, 1094, 1102, 1106,
	1107, 1081, 1090, 1082, 1071, 1079, 1088, 953, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 918,
	564, 565, 570, 571, 573, 450, 448, 500, 501, 0,
	0, 865, 863, 864, 30, 327, 32, 0, 327, 327,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 490, 62, 63, 196, 197, 879, 0, 853,
	854, 490, 64, 75, 0, 0, 874, 858, 509, 0,
	366, 0, 0, 506, 0, 0, 87, 0, 51, 52,
	0, 89, 0, 0, 91, 0, 417, 0, 0, 1081,
	0, 417, 0, 806, 517, 518, 519, 520, 521, 599,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	541, 542, 543, 544, 545, 546, 547, 561, 0, 540,
	540, 540, 553, 554, 562, 563, 568, 569, 580, 581,
	583, 585, 579, 579, 579, 576, 577, 0, 804, 0,
	138, 0, 0, 0, 0, 0, 0, 160, 180, 181,
	182, 161, 163, 170, 172, 173, 174, 183, 184, 185,
	186, 293, 0, 295, 905, 0, 162, 164, 166, 167,
	187, 188, 189, 190, 191, 192, 0, 0, 97, 201,
	203, 0, 221, 204, 205, 206, 207, 208, 209, 212,
	215, 216, 0, 0, 0, 0, 340, 296, 0, 234,
	0, 0, 299, 414, 0, 0, 0, 1081, 912, 354,
	0, 398, 432, 433, 436, 439, 440, 437, 602, 405,
	406, 407, 428, 429, 314, 412, 0, 0, 509, 0,
	0, 0, 0, 0, 0, 783, 784, 785, 786, 787,
	788, 791, 792, 789, 790, 793, 794, 795, 0, 0,
	0, 796, 797, 798, 0, 0, 800, 0, 802, 0,
	0, 0, 0, 0, 0, 862, 0, 0, 0, 871,
	799, 607, 608, 609, 631, 632, 0, 695, 859, 852,
	697, 0, -2, 804, 0, 700, 705, 706, 0, 0,
	847, -2, 0, 899, 0, 599, 750, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 827, 833, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 567, 578, 575,
	574, 551, 0, 550, 548, 0, 552, 0, 0, 0,
	509, 0, 0, 867, 0, 0, 0, 0, 326, 34,
	1081, 0, 55, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 228,
	0, 0, 882, 0, 0, 0, 67, 0, 889, 74,
	0, 0, 0, 0, 378, 0, 378, 368, 0, 0,
	0, 378, 381, 382, 384, 385, 0, 0, 507, 86,
	877, 53, 94, 53, 53, 100, 114, 0, 116, 119,
	120, 121, 122, 117, 0, 510, 512, 522, 0, 586,
	587, 588, 589, 590, 591, 600, 124, 0, 0, 0,
	0, 153, 158, 159, 350, 0, 177, 0, 179, 0,
	294, 907, 906, 98, 223, 146, 218, 219, 347, 348,
	504, 0, 0, 233, 888, 235, 237, 238, 239, 240,
	913, 0, 913, 0, 0, 297, 0, 0, 0, 0,
	356, 362, 0, 438, 441, 442, 0, 431, 312, 313,
	417, 890, 444, 869, 490, 451, 0, 461, 499, 476,
	466, 0, 603, 513, 514, 555, 556, 557, 558, 559,
	604, 605, 0, 610, 611, 612, 613, 614, 615, 616,
	617, 618, 619, -2, -2, -2, 623, 624, 625, -2,
	-2, -2, 629, 630, -2, 801, 803, 0, 862, 0,
	-2, 0, 639, -2, -2, -2, 643, 0, 645, 648,
	650, 652, 0, 0, 0, 0, 861, 662, 839, 0,
	0, 780, 781, 782, 870, 647, 0, 0, 860, 851,
	0, 0, -2, 702, 0, 0, 0, 810, 811, 846,
	842, 0, 709, 427, 0, 0, 0, 0, 0, 908,
	758, 0, 0, 0, 722, 724, 0, 0, 0, 0,
	814, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	804, 824, 0, 0, 665, 0, 0, 0, 0, 1097,
	0, 804, 832, 0, 0, 0, 0, 0, 804, 0,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 444, 502, 866, 33, 316, 0, 0,
	0, 36, 1081, 44, 0, 248, 0, 0, 0, 0,
	0, 329, 45, 1081, 53, 1081, 53, 46, 31, 327,
	225, 226, 320, 0, 315, 318, 0, 74, 0, 0,
	61, 0, 65, 76, 0, 875, 84, 0, 508, 363,
	378, 0, 0, 370, 367, 365, 509, 0, 0, 0,
	0, 88, 90, 92, 0, 807, 0, 0, 0, 0,
	0, 0, 0, 0, 805, 130, 131, 150, 175, 176,
	178, 171, 0, 242, 275, 0, 0, 913, 0, 231,
	276, 298, 300, 0, 0, 358, 362, 0, 361, 415,
	430, 0, 446, 0, 449, 0, 0, 0, 0, 0,
	496, 496, 496, 494, 470, 417, 476, 0, 0, 488,
	0, -2, 466, 0, 0, -2, -2, 0, 0, 0,
	663, -2, 644, 646, 649, 651, 653, 0, 0, 0,
	0, 0, 0, 0, 664, 0, 0, 849, 852, -2,
	805, 808, 809, 0, 0, 843, 0, 0, 0, 0,
	426, 427, 427, 427, 715, 0, 716, 0, 0, 0,
	0, 0, 0, 731, 0, 732, 733, 0, 0, 734,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 668, 669, 670, 0, 0, 735, 830,
	831, 0, 0, 0, 0, 0, 0, 740, 0, 837,
	0, 0, 0, 744, 745, 746, 0, 538, 0, 560,
	582, 584, 572, 446, 0, 0, 0, 0, 54, 246,
	265, 0, 0, 305, 311, 311, 0, 718, 719, 0,
	0, 0, 38, 0, 0, 0, 0, 42, 0, 48,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 77,
	376, 377, 364, 375, 0, 378, 383, 380, 386, 0,
	515, 0, 0, 523, 592, 593, 594, 595, 596, 597,
	598, 0, 147, 229, 0, 236, 0, 0, 0, 234,
	0, 0, 0, 360, 362, 0, 353, 354, 413, 752,
	0, 0, 452, 0, 0, 0, 0, 0, 491, 495,
	492, 493, 0, 0, 0, 0, 488, 458, 0, 0,
	0, 465, 487, 0, 486, 475, -2, 606, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 840, 0, 775,
	0, 0, 851, -2, 812, 841, 845, 0, 710, 0,
	0, 0, 0, 901, 756, 757, 761, 0, 0, 720,
	0, 0, 813, 823, 825, 666, 667, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, -2, -2, -2,
	684, 685, 686, -2, -2, -2, 0, 0, 0, 826,
	0, 0, 778, 828, 829, 834, 835, 0, 737, 738,
	739, 836, 0, 0, 0, 566, 0, 752, 322, 324,
	35, 0, 247, 0, 250, 0, 0, 0, 0, 256,
	257, 0, 0, 0, 0, 267, 274, 0, 314, 893,
	0, 314, 0, 0, 0, 0, 0, 50, 0, 0,
	328, 0, 53, 53, 317, 0, 0, 321, 319, 66,
	0, 0, 0, 0, 0, 369, 379, 0, 516, 511,
	601, 0, 0, 0, 0, 0, 0, 0, 0, 351,
	362, 0, 355, 356, 401, 0, 445, 443, 478, 0,
	480, 0, 0, 0, 482, 461, 471, 0, 473, 476,
	0, 463, 0, 0, 456, 0, 455, 476, 484, 0,
	0, 0, 0, -2, 0, 656, -2, -2, 774, 805,
	850, 844, 898, 427, 711, 713, 714, 763, 760, 0,
	747, 729, 730, 822, 0, 0, 0, 0, 805, 777,
	736, 0, 742, 743, 539, 402, 37, 0, 251, 252,
	913, 0, 255, 258, 0, 260, 915, 242, 0, 271,
	272, 306, 307, 310, 308, 311, 427, 269, 0, 39,
	40, 49, 57, 41, 47, 0, 0, 489, 0, 0,
	0, 71, 69, 0, 0, 0, 387, 388, 0, 0,
	274, 0, 264, 242, 232, 274, 0, 0, 357, 358,
	751, 753, 0, 479, 0, 498, 481, 476, 472, 0,
	488, 417, 459, 0, 460, 0, 488, 0, 0, 467,
	-2, -2, 657, 776, 0, 427, 0, 749, -2, 0,
	0, 0, 779, 0, 249, 253, 0, 0, 280, 0,
	268, 0, 314, 0, 0, 59, 0, 323, 325, 0,
	0, 73, 70, 0, 0, 372, 509, 374, 0, 242,
	274, 230, 242, 0, 359, 360, 0, 0, 0, 0,
	474, 468, 0, 457, 453, 0, 464, 0, 485, 712,
	766, 0, -2, 0, 692, 741, 0, 259, 285, 0,
	0, 0, 309, 710, 276, 43, 0, 56, 427, 72,
	68, 0, 373, 0, 262, 242, 301, 0, 352, 754,
	755, 497, 462, 476, 0, 483, 0, 0, 0, 762,
	693, 0, 261, 281, 282, 0, 277, 278, 279, 914,
	273, 280, 58, 0, 509, 0, 263, 274, 488, 454,
	759, 764, 767, -2, 1045, 945, 0, 765, 254, 283,
	0, 284, 0, 0, 0, 285, 0, 371, 245, 242,
	469, 0, 769, 770, 771, 772, 773, 286, 0, 289,
	290, 0, 287, 270, 241, 243, 244, 302, 0, 288,
	291, 292, 768,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 311, 3, 317, 312, 3,
	322, 323, 315, 313, 326, 314, 324, 316, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 330, 325,
	305, 307, 306, 3, 327, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 320, 3, 321, 310, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 328, 309, 329, 319,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 308, 57648, 318, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:783
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:789
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:795
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:860
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:889
		{
			return unimplemented(sqllex)
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:912
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:922
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = nil
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = DropCascade
		}
	case 52:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = DropRestrict
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = DropDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:984
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:985
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return unimplemented(sqllex)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:989
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:993
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:997
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 67:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 68:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.str = ""
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 73:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 74:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1062
		{
		}
	case 75:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1193
		{ /* SKIP DOC */
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 125:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1318
		{
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1380
		{
			return unimplemented(sqllex)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{ /* SKIP DOC */
		}
	case 153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			return unimplemented(sqllex)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			return unimplemented(sqllex)
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = Low
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = Normal
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = High
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			return unimplemented(sqllex)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			return unimplemented(sqllex)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1569
		{
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1657
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1661
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1704
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1708
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1779
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1783
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = DropDefault
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1793
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1936
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			return unimplemented(sqllex)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			return unimplemented(sqllex)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2000
		{
			return unimplemented(sqllex)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2001
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2008
		{
			return unimplemented(sqllex)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2009
		{
			return unimplemented(sqllex)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2010
		{
			return unimplemented(sqllex)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2011
		{
			return unimplemented(sqllex)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2012
		{
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2015
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2018
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			return unimplemented(sqllex)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2022
		{
			return unimplemented(sqllex)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2023
		{
			return unimplemented(sqllex)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2024
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			return unimplemented(sqllex)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = true
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = false
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2132
		{
			return unimplemented(sqllex)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2133
		{
			return unimplemented(sqllex)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			return unimplemented(sqllex)
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2137
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = Ascending
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = Descending
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2191
		{
			return unimplemented(sqllex)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2192
		{
			return unimplemented(sqllex)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = true
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = false
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2205
		{
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2206
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2248
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2249
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.str = ""
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.str = ""
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.str = ""
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.str = ""
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.str = ""
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.str = ""
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2371
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2372
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2436
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2440
		{
			return unimplemented(sqllex)
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2448
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 379:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2470
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2471
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2698
		{
			return unimplemented(sqllex)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2699
		{
			return unimplemented(sqllex)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2700
		{
			return unimplemented(sqllex)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2703
		{
			return unimplemented(sqllex)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2704
		{
			return unimplemented(sqllex)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2707
		{
			return unimplemented(sqllex)
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2710
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2711
		{
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2714
		{
			return unimplemented(sqllex)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2715
		{
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2718
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2719
		{
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = true
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = false
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = false
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = true
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2742
		{
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2743
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2781
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2801
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2842
		{
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2843
		{
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2901
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2913
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = &From{}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2937
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2955
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2982
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 462:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2999
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = nil
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3060
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3066
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = true
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = false
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.str = astFullJoin
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.str = astLeftJoin
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.str = astRightJoin
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.str = astInnerJoin
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3177
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3178
		{
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3264
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3277
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3278
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3292
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3301
		{
			return unimplemented(sqllex)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3369
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = nil
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3418
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3514
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3546
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3585
		{
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3586
		{
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = year
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = month
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = day
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = hour
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = minute
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = month
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = hour
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = minute
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = minute
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = nil
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = second
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3681
		{
			return unimplemented(sqllex)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3716
		{
			return unimplemented(sqllex)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3884
		{
			return unimplemented(sqllex)
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3950
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4123
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4176
		{
			return unimplemented(sqllex)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4177
		{
			return unimplemented(sqllex)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4200
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4216
		{
			return unimplemented(sqllex)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			return unimplemented(sqllex)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4221
		{
			return unimplemented(sqllex)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4238
		{
			return unimplemented(sqllex)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4239
		{
			return unimplemented(sqllex)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4240
		{
			return unimplemented(sqllex)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4241
		{
			return unimplemented(sqllex)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4270
		{
			return unimplemented(sqllex)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4314
		{
			return unimplemented(sqllex)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4315
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = Window(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4350
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.str = ""
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4412
		{
			return unimplemented(sqllex)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4413
		{
			return unimplemented(sqllex)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4414
		{
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4417
		{
			return unimplemented(sqllex)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4418
		{
			return unimplemented(sqllex)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4424
		{
			return unimplemented(sqllex)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4425
		{
			return unimplemented(sqllex)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4426
		{
			return unimplemented(sqllex)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4427
		{
			return unimplemented(sqllex)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4428
		{
			return unimplemented(sqllex)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = Any
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = Some
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = All
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = Plus
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = Minus
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = Mult
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = Div
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = FloorDiv
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = Mod
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = Bitand
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = Bitor
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = Bitxor
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = Bitxor
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = LT
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = GT
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = EQ
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = LE
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = GE
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = NE
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = Like
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = NotLike
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = ILike
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = NotILike
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 844:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4792
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4793
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4911
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4955
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4991
		{
			return unimplemented(sqllex)
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = DNull
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5030
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.str = ""
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 915:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
