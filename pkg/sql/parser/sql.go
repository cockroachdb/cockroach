// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPLAIN = 57444
const EXTRACT = 57445
const EXTRACT_DURATION = 57446
const FALSE = 57447
const FAMILY = 57448
const FETCH = 57449
const FILTER = 57450
const FIRST = 57451
const FLOAT = 57452
const FLOORDIV = 57453
const FOLLOWING = 57454
const FOR = 57455
const FORCE_INDEX = 57456
const FOREIGN = 57457
const FROM = 57458
const FULL = 57459
const GRANT = 57460
const GRANTS = 57461
const GREATEST = 57462
const GROUP = 57463
const GROUPING = 57464
const HAVING = 57465
const HELP = 57466
const HIGH = 57467
const HOUR = 57468
const INCREMENTAL = 57469
const IF = 57470
const IFNULL = 57471
const ILIKE = 57472
const IN = 57473
const INTERLEAVE = 57474
const INDEX = 57475
const INDEXES = 57476
const INITIALLY = 57477
const INNER = 57478
const INSERT = 57479
const INT = 57480
const INT2VECTOR = 57481
const INT8 = 57482
const INT64 = 57483
const INTEGER = 57484
const INTERSECT = 57485
const INTERVAL = 57486
const INTO = 57487
const IS = 57488
const ISOLATION = 57489
const JOIN = 57490
const KEY = 57491
const KEYS = 57492
const LATERAL = 57493
const LC_CTYPE = 57494
const LC_COLLATE = 57495
const LEADING = 57496
const LEAST = 57497
const LEFT = 57498
const LEVEL = 57499
const LIKE = 57500
const LIMIT = 57501
const LOCAL = 57502
const LOCALTIME = 57503
const LOCALTIMESTAMP = 57504
const LOW = 57505
const LSHIFT = 57506
const MATCH = 57507
const MINUTE = 57508
const MONTH = 57509
const NAN = 57510
const NAME = 57511
const NAMES = 57512
const NATURAL = 57513
const NEXT = 57514
const NO = 57515
const NO_INDEX_JOIN = 57516
const NORMAL = 57517
const NOT = 57518
const NOTHING = 57519
const NULL = 57520
const NULLIF = 57521
const NULLS = 57522
const NUMERIC = 57523
const OF = 57524
const OFF = 57525
const OFFSET = 57526
const OID = 57527
const ON = 57528
const ONLY = 57529
const OPTIONS = 57530
const OR = 57531
const ORDER = 57532
const ORDINALITY = 57533
const OUT = 57534
const OUTER = 57535
const OVER = 57536
const OVERLAPS = 57537
const OVERLAY = 57538
const PARENT = 57539
const PARTIAL = 57540
const PARTITION = 57541
const PASSWORD = 57542
const PLACING = 57543
const POSITION = 57544
const PRECEDING = 57545
const PRECISION = 57546
const PREPARE = 57547
const PRIMARY = 57548
const PRIORITY = 57549
const RANGE = 57550
const READ = 57551
const REAL = 57552
const RECURSIVE = 57553
const REF = 57554
const REFERENCES = 57555
const REGCLASS = 57556
const REGPROC = 57557
const REGPROCEDURE = 57558
const REGNAMESPACE = 57559
const REGTYPE = 57560
const RENAME = 57561
const REPEATABLE = 57562
const RELEASE = 57563
const RESET = 57564
const RESTORE = 57565
const RESTRICT = 57566
const RETURNING = 57567
const REVOKE = 57568
const RIGHT = 57569
const ROLLBACK = 57570
const ROLLUP = 57571
const ROW = 57572
const ROWS = 57573
const RSHIFT = 57574
const SAVEPOINT = 57575
const SCATTER = 57576
const SEARCH = 57577
const SECOND = 57578
const SELECT = 57579
const SERIAL = 57580
const SERIALIZABLE = 57581
const SESSION = 57582
const SESSION_USER = 57583
const SET = 57584
const SETTING = 57585
const SETTINGS = 57586
const SHOW = 57587
const SIMILAR = 57588
const SIMPLE = 57589
const SMALLINT = 57590
const SMALLSERIAL = 57591
const SNAPSHOT = 57592
const SOME = 57593
const SPLIT = 57594
const SQL = 57595
const START = 57596
const STATUS = 57597
const STDIN = 57598
const STRICT = 57599
const STRING = 57600
const STORING = 57601
const SUBSTRING = 57602
const SYMMETRIC = 57603
const SYSTEM = 57604
const TABLE = 57605
const TABLES = 57606
const TEMPLATE = 57607
const TESTING_RANGES = 57608
const TESTING_RELOCATE = 57609
const TEXT = 57610
const THEN = 57611
const TIME = 57612
const TIMESTAMP = 57613
const TIMESTAMPTZ = 57614
const TO = 57615
const TRAILING = 57616
const TRANSACTION = 57617
const TREAT = 57618
const TRIM = 57619
const TRUE = 57620
const TRUNCATE = 57621
const TYPE = 57622
const UNBOUNDED = 57623
const UNCOMMITTED = 57624
const UNION = 57625
const UNIQUE = 57626
const UNKNOWN = 57627
const UPDATE = 57628
const UPSERT = 57629
const USER = 57630
const USERS = 57631
const USING = 57632
const VALID = 57633
const VALIDATE = 57634
const VALUE = 57635
const VALUES = 57636
const VARCHAR = 57637
const VARIADIC = 57638
const VIEW = 57639
const VARYING = 57640
const WHEN = 57641
const WHERE = 57642
const WINDOW = 57643
const WITH = 57644
const WITHIN = 57645
const WITHOUT = 57646
const YEAR = 57647
const ZONE = 57648
const NOT_LA = 57649
const WITH_LA = 57650
const AS_LA = 57651
const POSTFIXOP = 57652
const UMINUS = 57653

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5470

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 31,
	330, 31,
	-2, 430,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	99, 413,
	143, 413,
	159, 413,
	184, 413,
	190, 413,
	283, 413,
	-2, 403,
	-1, 66,
	99, 412,
	143, 412,
	159, 412,
	184, 412,
	190, 412,
	283, 412,
	-2, 406,
	-1, 75,
	1, 31,
	330, 31,
	-2, 430,
	-1, 435,
	1, 200,
	330, 200,
	-2, 996,
	-1, 475,
	159, 440,
	184, 440,
	-2, 409,
	-1, 478,
	159, 439,
	184, 439,
	-2, 407,
	-1, 614,
	159, 439,
	184, 439,
	-2, 410,
	-1, 673,
	327, 929,
	-2, 922,
	-1, 674,
	327, 930,
	-2, 923,
	-1, 680,
	5, 598,
	327, 598,
	-2, 1105,
	-1, 704,
	5, 559,
	-2, 1079,
	-1, 705,
	5, 592,
	327, 592,
	-2, 1081,
	-1, 706,
	5, 567,
	-2, 1082,
	-1, 707,
	5, 566,
	-2, 1083,
	-1, 708,
	5, 592,
	327, 592,
	-2, 1086,
	-1, 709,
	5, 592,
	327, 592,
	-2, 1087,
	-1, 710,
	5, 593,
	-2, 1090,
	-1, 711,
	5, 553,
	-2, 1091,
	-1, 712,
	5, 553,
	-2, 1092,
	-1, 713,
	5, 574,
	-2, 1096,
	-1, 714,
	5, 554,
	-2, 1101,
	-1, 715,
	5, 555,
	-2, 1102,
	-1, 716,
	5, 556,
	-2, 1103,
	-1, 717,
	5, 557,
	-2, 1104,
	-1, 718,
	5, 553,
	-2, 1109,
	-1, 719,
	5, 560,
	-2, 1114,
	-1, 720,
	5, 558,
	-2, 1117,
	-1, 721,
	5, 590,
	327, 590,
	-2, 1119,
	-1, 722,
	5, 594,
	-2, 1122,
	-1, 723,
	5, 596,
	-2, 1123,
	-1, 724,
	5, 589,
	327, 589,
	-2, 1127,
	-1, 995,
	99, 413,
	143, 413,
	159, 413,
	184, 413,
	190, 413,
	283, 413,
	-2, 717,
	-1, 1004,
	327, 906,
	-2, 894,
	-1, 1218,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 633,
	-1, 1219,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 634,
	-1, 1220,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 635,
	-1, 1224,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 639,
	-1, 1225,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 640,
	-1, 1226,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 641,
	-1, 1229,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 646,
	-1, 1235,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 648,
	-1, 1237,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 652,
	-1, 1238,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 653,
	-1, 1239,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 654,
	-1, 1240,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 655,
	-1, 1267,
	195, 788,
	-2, 791,
	-1, 1296,
	116, 828,
	327, 929,
	-2, 922,
	-1, 1297,
	116, 829,
	-2, 1075,
	-1, 1298,
	116, 830,
	-2, 995,
	-1, 1299,
	116, 831,
	-2, 964,
	-1, 1300,
	116, 832,
	-2, 979,
	-1, 1301,
	116, 833,
	-2, 994,
	-1, 1302,
	116, 834,
	-2, 1041,
	-1, 1458,
	99, 413,
	143, 413,
	159, 413,
	184, 413,
	190, 413,
	283, 413,
	-2, 489,
	-1, 1462,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 647,
	-1, 1463,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 649,
	-1, 1468,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 650,
	-1, 1486,
	195, 787,
	-2, 790,
	-1, 1675,
	1, 490,
	69, 490,
	99, 490,
	117, 490,
	121, 490,
	123, 490,
	136, 490,
	143, 490,
	148, 490,
	156, 490,
	159, 490,
	171, 490,
	184, 490,
	186, 490,
	190, 490,
	225, 490,
	227, 490,
	283, 490,
	290, 490,
	300, 490,
	301, 490,
	309, 490,
	326, 490,
	328, 490,
	330, 490,
	331, 490,
	-2, 489,
	-1, 1677,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 651,
	-1, 1682,
	146, 0,
	-2, 667,
	-1, 1692,
	195, 789,
	-2, 792,
	-1, 1726,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 694,
	-1, 1727,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 695,
	-1, 1728,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 696,
	-1, 1732,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 700,
	-1, 1733,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 701,
	-1, 1734,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 702,
	-1, 1854,
	146, 0,
	-2, 668,
	-1, 1857,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 671,
	-1, 1858,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 673,
	-1, 1963,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 672,
	-1, 1964,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 674,
	-1, 1971,
	146, 0,
	-2, 703,
	-1, 2027,
	146, 0,
	-2, 704,
	-1, 2092,
	36, 0,
	130, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 1078,
}

const sqlPrivate = 57344

const sqlLast = 29167

var sqlAct = [...]int{

	88, 2069, 1632, 2091, 2116, 2033, 1089, 2070, 2090, 1670,
	2071, 1898, 1097, 913, 479, 1671, 1456, 1944, 1703, 1924,
	1157, 1820, 1845, 304, 1763, 1182, 1453, 1642, 664, 800,
	672, 436, 671, 1831, 486, 65, 1579, 1432, 919, 1777,
	500, 1825, 288, 51, 650, 306, 1547, 524, 1156, 761,
	1580, 1161, 1648, 769, 763, 1383, 1546, 542, 1175, 1434,
	1197, 1000, 1265, 1190, 801, 1497, 915, 1160, 1657, 1098,
	1377, 740, 1444, 1189, 633, 1049, 1058, 1439, 65, 644,
	1252, 1322, 1249, 737, 1275, 1081, 1195, 295, 30, 936,
	1129, 863, 290, 20, 773, 770, 742, 1293, 1113, 294,
	16, 1122, 296, 8, 515, 991, 634, 1325, 1149, 643,
	65, 1034, 484, 1091, 543, 534, 1164, 941, 1778, 784,
	489, 537, 66, 600, 617, 616, 601, 618, 536, 67,
	422, 865, 80, 478, 666, 861, 432, 413, 777, 433,
	84, 530, 1030, 487, 1956, 599, 1485, 1957, 621, 425,
	2107, 1090, 483, 766, 786, 1517, 1518, 483, 1535, 1536,
	1537, 1192, 786, 30, 786, 1454, 276, 2086, 20, 2081,
	1776, 1853, 1132, 1094, 2080, 16, 2077, 1132, 8, 766,
	2067, 1126, 1394, 1119, 2062, 1395, 2058, 766, 476, 766,
	2029, 2023, 465, 1119, 766, 475, 943, 756, 1489, 1517,
	1518, 303, 466, 1490, 1132, 2005, 506, 1532, 1776, 2001,
	303, 1082, 766, 303, 491, 1996, 1965, 1954, 1995, 1119,
	795, 2011, 944, 945, 1127, 964, 965, 966, 974, 975,
	976, 1951, 1085, 1442, 1952, 497, 944, 945, 503, 1938,
	1935, 510, 1776, 766, 1933, 947, 64, 1776, 978, 1082,
	1442, 942, 649, 944, 945, 64, 1523, 1909, 64, 947,
	766, 1739, 1689, 1908, 1128, 1125, 1776, 1880, 946, 1419,
	1132, 1085, 42, 1047, 961, 1422, 947, 1517, 1518, 1269,
	43, 42, 946, 1859, 42, 1856, 1132, 277, 1119, 43,
	546, 1538, 43, 1132, 1848, 71, 1181, 1132, 1496, 946,
	1523, 1797, 44, 1796, 1132, 961, 1132, 1775, 1144, 1533,
	1776, 44, 1686, 1618, 44, 1132, 1088, 1613, 539, 539,
	1088, 73, 667, 952, 71, 1564, 498, 89, 1565, 505,
	508, 787, 498, 484, 1130, 1562, 629, 952, 1132, 787,
	908, 787, 971, 979, 544, 1561, 1560, 907, 1132, 1132,
	73, 727, 74, 1533, 952, 855, 1488, 854, 977, 1486,
	69, 1132, 1132, 766, 1421, 1186, 70, 766, 766, 513,
	969, 1136, 307, 559, 1132, 496, 962, 1534, 1523, 1131,
	1118, 74, 1132, 1119, 1087, 68, 71, 1088, 1046, 69,
	794, 1045, 1779, 795, 75, 70, 519, 523, 1839, 1457,
	1394, 887, 580, 1124, 2105, 2089, 2076, 962, 1424, 540,
	2038, 942, 73, 2024, 1093, 71, 1936, 1885, 1881, 628,
	1873, 1534, 1872, 55, 71, 1123, 521, 71, 1871, 1867,
	1866, 1533, 55, 1865, 1811, 55, 1754, 1749, 790, 1805,
	1748, 73, 1747, 74, 963, 531, 785, 726, 911, 1697,
	73, 1517, 1518, 73, 1675, 1529, 1530, 1531, 972, 1647,
	1528, 1526, 1527, 1519, 1520, 1521, 1522, 1524, 1525, 1622,
	1569, 1566, 74, 1620, 1554, 963, 68, 1517, 1518, 1545,
	69, 74, 1516, 1513, 74, 1512, 70, 1510, 1502, 69,
	615, 1501, 69, 674, 674, 70, 1420, 733, 70, 1534,
	1339, 607, 674, 610, 1455, 68, 1527, 1519, 1520, 1521,
	1522, 1524, 1525, 546, 1664, 1261, 1290, 289, 918, 970,
	306, 546, 958, 959, 960, 973, 1289, 957, 955, 956,
	948, 949, 950, 951, 953, 954, 498, 732, 508, 628,
	1008, 614, 627, 767, 948, 949, 950, 951, 953, 954,
	1705, 2050, 1523, 1001, 568, 68, 674, 569, 957, 955,
	956, 948, 949, 950, 951, 953, 954, 674, 731, 944,
	945, 775, 2008, 546, 546, 1994, 562, 564, 1523, 1993,
	1804, 306, 1528, 1526, 1527, 1519, 1520, 1521, 1522, 1524,
	1525, 1992, 947, 1984, 2088, 604, 1982, 1973, 1960, 1947,
	1931, 1895, 1353, 1878, 888, 602, 1850, 1814, 760, 476,
	1802, 1782, 1262, 1681, 890, 946, 475, 547, 1662, 1640,
	674, 674, 870, 870, 917, 1638, 1637, 674, 1635, 606,
	624, 625, 630, 1588, 1587, 1544, 1506, 522, 1505, 674,
	674, 674, 674, 674, 1482, 1477, 1254, 1410, 1368, 674,
	1366, 1353, 1352, 940, 765, 1332, 1288, 789, 1185, 674,
	792, 1035, 1038, 845, 1042, 519, 1028, 1027, 779, 776,
	952, 1026, 1025, 1024, 853, 1023, 944, 945, 1022, 922,
	798, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1014, 531,
	1013, 847, 484, 849, 1012, 1005, 994, 848, 679, 947,
	68, 912, 851, 501, 632, 852, 566, 883, 555, 876,
	882, 553, 796, 2060, 1955, 1861, 1840, 1001, 895, 1837,
	498, 1836, 946, 892, 1810, 910, 896, 897, 898, 899,
	900, 1809, 1517, 1518, 909, 1404, 903, 904, 1403, 992,
	750, 924, 733, 926, 476, 925, 574, 476, 476, 1998,
	938, 932, 734, 1082, 933, 934, 997, 1958, 748, 1519,
	1520, 1521, 1522, 1524, 1525, 1435, 572, 1808, 944, 945,
	1396, 1457, 1040, 749, 1126, 774, 1041, 1568, 1004, 1567,
	498, 778, 778, 1461, 592, 575, 1010, 1521, 1522, 1524,
	1525, 947, 1619, 916, 1378, 1052, 546, 1826, 1090, 1706,
	1493, 1276, 1031, 505, 508, 573, 1390, 596, 637, 1575,
	2041, 2000, 2102, 743, 946, 744, 1416, 1127, 1790, 1919,
	1063, 1065, 1107, 539, 1036, 539, 733, 1059, 1135, 65,
	1039, 458, 1308, 743, 65, 744, 464, 1110, 463, 459,
	547, 597, 1070, 1918, 1917, 1073, 280, 307, 547, 1043,
	544, 1032, 1033, 473, 2103, 1084, 1916, 1128, 1125, 1603,
	1055, 1602, 1007, 1572, 1571, 284, 1464, 1409, 1051, 952,
	1092, 1408, 1092, 78, 1599, 1407, 807, 1051, 1406, 950,
	951, 953, 954, 1050, 1076, 1236, 745, 1116, 306, 1062,
	1133, 1079, 1114, 1096, 281, 1078, 1075, 603, 886, 1115,
	547, 547, 1117, 572, 1106, 833, 745, 1801, 307, 1068,
	1111, 1148, 512, 1108, 1105, 1109, 1336, 1335, 285, 1207,
	1999, 1080, 962, 1176, 906, 468, 77, 1130, 1608, 551,
	1606, 881, 880, 1380, 874, 871, 771, 889, 582, 1036,
	565, 1039, 573, 674, 1251, 1251, 1590, 1130, 1187, 674,
	674, 674, 674, 674, 674, 674, 674, 674, 674, 674,
	674, 674, 674, 674, 674, 674, 674, 674, 674, 674,
	674, 1900, 674, 2048, 674, 674, 674, 674, 1206, 1138,
	1061, 1137, 306, 780, 1033, 1032, 2113, 2073, 1044, 954,
	963, 2064, 729, 674, 1258, 674, 1124, 1179, 1180, 1256,
	498, 832, 674, 1388, 1276, 1259, 674, 1771, 508, 1198,
	1205, 1364, 498, 884, 2065, 674, 674, 674, 674, 674,
	674, 674, 674, 674, 674, 674, 674, 674, 674, 674,
	2124, 728, 1154, 1101, 1153, 1152, 469, 1415, 508, 786,
	1772, 508, 1384, 283, 282, 1525, 674, 593, 286, 1188,
	1338, 2102, 775, 1384, 905, 1373, 76, 474, 1060, 550,
	1370, 470, 758, 1273, 757, 944, 945, 753, 2074, 1987,
	471, 839, 1627, 1155, 955, 956, 948, 949, 950, 951,
	953, 954, 287, 1597, 746, 751, 546, 885, 947, 1417,
	79, 674, 1048, 1029, 1591, 482, 1263, 571, 2112, 1260,
	752, 1624, 1266, 1171, 746, 754, 1346, 594, 1443, 1270,
	1284, 946, 743, 1278, 744, 1303, 1771, 2075, 570, 1764,
	753, 1350, 676, 547, 1295, 1295, 1306, 1762, 1317, 1340,
	1767, 1766, 1768, 674, 1329, 1330, 1331, 484, 751, 481,
	1363, 1625, 1130, 1969, 1341, 546, 1932, 1386, 989, 1772,
	1140, 1504, 1392, 752, 1658, 595, 1447, 1474, 1151, 508,
	1770, 1142, 1365, 1901, 498, 1367, 952, 1773, 2119, 1765,
	1674, 1472, 483, 1466, 1250, 1450, 1607, 2072, 571, 2101,
	1143, 1379, 674, 2099, 1402, 745, 483, 1445, 1389, 2111,
	1819, 1141, 1173, 585, 870, 1448, 1193, 1397, 560, 558,
	620, 1427, 619, 1376, 1423, 1233, 1425, 2125, 1911, 1910,
	1446, 1130, 1893, 1876, 2130, 307, 787, 1735, 1979, 962,
	65, 1574, 1349, 1257, 1350, 1833, 1398, 620, 1399, 1400,
	1345, 674, 674, 1174, 1469, 923, 1418, 674, 1769, 1767,
	484, 1768, 1412, 1413, 1470, 875, 872, 1786, 1475, 914,
	674, 674, 806, 1623, 2034, 674, 674, 860, 1846, 1414,
	1460, 1426, 619, 674, 902, 1429, 1449, 807, 807, 1770,
	674, 1437, 856, 1116, 1401, 1441, 1773, 674, 1114, 480,
	674, 674, 674, 1459, 1438, 1115, 1643, 963, 1117, 674,
	1821, 1894, 1355, 1495, 2117, 858, 833, 833, 484, 1231,
	1234, 1342, 1736, 1354, 1877, 1834, 2129, 859, 1737, 307,
	741, 674, 674, 674, 674, 1467, 1465, 1447, 1847, 1653,
	674, 674, 674, 1789, 1652, 674, 570, 1230, 529, 1832,
	1788, 528, 1372, 481, 611, 1481, 1450, 1785, 1633, 1812,
	1375, 1382, 1891, 1649, 1471, 2118, 774, 1769, 1656, 1440,
	1287, 1473, 1549, 674, 674, 774, 1448, 484, 1972, 1492,
	1011, 1875, 1480, 2120, 1892, 498, 1548, 674, 1680, 674,
	1483, 1605, 956, 948, 949, 950, 951, 953, 954, 807,
	1511, 1476, 1586, 746, 1585, 674, 1584, 1381, 1499, 1500,
	1134, 1086, 832, 832, 1074, 1071, 598, 674, 591, 590,
	1614, 1551, 1552, 1553, 589, 588, 587, 586, 833, 583,
	527, 520, 894, 547, 1286, 1232, 1570, 2068, 2031, 1760,
	1787, 1543, 1595, 1593, 1573, 1431, 1430, 1449, 1577, 931,
	1177, 1169, 1556, 1112, 793, 546, 791, 788, 783, 759,
	1598, 1639, 807, 1611, 1451, 1604, 755, 747, 1694, 1193,
	1433, 1926, 2103, 878, 1928, 306, 674, 526, 1067, 1609,
	577, 1612, 674, 1636, 1615, 674, 674, 674, 81, 1616,
	1665, 833, 547, 1363, 1600, 622, 1601, 674, 1666, 1594,
	1617, 1596, 807, 674, 1645, 494, 674, 65, 1183, 525,
	1634, 1989, 3, 1644, 674, 1663, 1779, 674, 1626, 1628,
	1629, 301, 25, 1646, 832, 581, 1651, 1683, 2026, 1654,
	1650, 833, 674, 1699, 1700, 1701, 674, 1659, 1660, 1655,
	674, 674, 674, 674, 674, 674, 674, 674, 674, 674,
	674, 674, 674, 674, 674, 674, 674, 674, 674, 1452,
	674, 578, 410, 517, 623, 674, 835, 1184, 1690, 674,
	674, 514, 1693, 626, 495, 1072, 674, 1069, 674, 674,
	674, 300, 24, 1669, 299, 23, 2012, 832, 502, 1709,
	1051, 1712, 1707, 1198, 1710, 518, 1066, 25, 1714, 297,
	22, 1817, 1198, 1715, 674, 834, 298, 11, 674, 1051,
	1687, 1172, 421, 1742, 457, 1064, 1168, 1247, 1095, 939,
	944, 945, 302, 10, 1743, 850, 546, 832, 799, 1784,
	1121, 1245, 2127, 292, 9, 1746, 1586, 2128, 1585, 2061,
	1584, 2015, 1780, 1756, 1783, 1759, 1517, 1518, 291, 7,
	944, 945, 1843, 293, 4, 1755, 674, 24, 1146, 1145,
	23, 674, 1630, 806, 806, 546, 946, 1101, 1193, 1621,
	674, 674, 1740, 460, 461, 22, 1563, 1405, 1815, 1800,
	1337, 1334, 11, 1750, 1586, 546, 1585, 659, 1584, 1586,
	1807, 1585, 1813, 1584, 1241, 1842, 803, 1818, 10, 1333,
	1283, 674, 1242, 1147, 1243, 674, 674, 1816, 1248, 9,
	674, 998, 1851, 1863, 1823, 1193, 2047, 674, 1193, 674,
	85, 85, 278, 1822, 7, 1824, 1806, 674, 484, 4,
	1925, 1855, 1702, 405, 406, 407, 1829, 1830, 424, 544,
	1835, 437, 1841, 1428, 1008, 944, 945, 1006, 467, 424,
	437, 1899, 412, 893, 584, 1838, 1661, 490, 490, 2063,
	674, 278, 1868, 1503, 278, 278, 509, 278, 947, 1943,
	85, 516, 1968, 1285, 1009, 806, 41, 1582, 1828, 1874,
	653, 1761, 547, 1576, 1163, 1162, 309, 879, 675, 864,
	411, 946, 873, 674, 1294, 1199, 730, 674, 677, 804,
	678, 805, 307, 674, 1244, 1037, 665, 802, 1099, 674,
	1255, 1246, 1274, 1491, 1002, 645, 1889, 657, 1886, 656,
	807, 1271, 674, 1903, 552, 1586, 1905, 1585, 1844, 1584,
	54, 1904, 1887, 567, 431, 674, 414, 1387, 806, 1803,
	1178, 927, 1592, 546, 472, 1927, 775, 1902, 1309, 833,
	1921, 807, 807, 1514, 674, 554, 1315, 419, 1307, 1304,
	807, 807, 415, 1586, 605, 1585, 1920, 1584, 736, 1929,
	1793, 1934, 990, 674, 674, 1913, 1799, 1953, 806, 1100,
	833, 833, 1942, 1950, 1946, 1959, 416, 1962, 579, 833,
	833, 1961, 1941, 807, 414, 1393, 674, 1120, 631, 1967,
	935, 1940, 493, 674, 492, 418, 1158, 576, 857, 1139,
	1907, 983, 980, 462, 1981, 419, 674, 1170, 1949, 1348,
	415, 1983, 833, 2123, 1988, 1193, 1193, 1589, 1974, 1193,
	1937, 1914, 1915, 1977, 2040, 72, 1997, 1923, 1374, 29,
	26, 21, 1986, 19, 416, 832, 18, 28, 17, 27,
	1978, 15, 674, 547, 14, 13, 12, 835, 835, 2006,
	40, 546, 39, 418, 38, 2004, 1985, 37, 36, 35,
	2007, 278, 532, 278, 437, 437, 832, 832, 6, 306,
	5, 2, 1, 2016, 0, 832, 832, 2014, 2013, 2021,
	2010, 0, 547, 674, 0, 484, 834, 834, 0, 2018,
	0, 2022, 2019, 2025, 0, 417, 0, 0, 0, 65,
	2009, 0, 547, 674, 674, 674, 0, 2017, 832, 0,
	0, 0, 0, 2028, 807, 2036, 0, 2051, 2049, 674,
	2053, 2037, 0, 0, 0, 2046, 0, 2052, 0, 0,
	0, 2042, 0, 0, 0, 0, 1897, 674, 0, 2056,
	2059, 2057, 2055, 833, 420, 0, 0, 1586, 0, 1585,
	0, 1584, 674, 417, 0, 2054, 0, 0, 0, 835,
	0, 0, 0, 2078, 0, 2085, 0, 0, 1309, 1309,
	2082, 2083, 0, 0, 0, 674, 674, 803, 803, 0,
	0, 2084, 1939, 0, 2096, 0, 556, 2087, 0, 2100,
	0, 2098, 1478, 1479, 2104, 1517, 1518, 1193, 834, 0,
	2106, 561, 420, 674, 437, 437, 2110, 2109, 2108, 0,
	2043, 2044, 2045, 0, 0, 0, 2122, 0, 2121, 0,
	0, 2126, 835, 807, 0, 0, 0, 0, 0, 1309,
	1309, 1309, 0, 725, 0, 0, 0, 1443, 674, 832,
	0, 2131, 424, 0, 2066, 278, 0, 437, 609, 437,
	0, 612, 833, 1540, 1541, 1542, 0, 0, 0, 0,
	547, 834, 835, 0, 0, 0, 490, 0, 0, 0,
	0, 0, 0, 0, 0, 654, 52, 278, 308, 944,
	945, 0, 0, 0, 0, 1447, 806, 0, 0, 803,
	0, 85, 0, 0, 0, 0, 1523, 0, 0, 0,
	278, 834, 947, 0, 1450, 278, 278, 278, 0, 781,
	0, 807, 0, 0, 0, 0, 1445, 806, 806, 52,
	0, 0, 0, 0, 1448, 946, 806, 806, 278, 278,
	1517, 1518, 0, 0, 0, 0, 85, 846, 85, 1446,
	833, 477, 0, 437, 485, 0, 0, 0, 832, 1533,
	2039, 52, 803, 0, 0, 0, 1517, 1518, 0, 806,
	437, 437, 0, 85, 437, 437, 437, 437, 437, 901,
	0, 0, 0, 0, 437, 437, 0, 0, 547, 0,
	952, 424, 1532, 0, 1309, 1309, 0, 0, 0, 921,
	0, 0, 803, 0, 0, 1449, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 807, 490, 1678, 1679,
	516, 1101, 0, 0, 0, 0, 0, 1534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1523, 0, 962, 0, 833, 832, 0, 1309, 1309,
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1523, 1309, 0,
	0, 0, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723,
	1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
	1734, 0, 1738, 0, 1533, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 963, 0, 1519, 1520, 1521, 1522, 1524, 1525, 0,
	1533, 0, 0, 278, 0, 0, 0, 0, 0, 0,
	0, 1056, 0, 548, 0, 278, 0, 0, 0, 0,
	31, 832, 0, 278, 1077, 0, 0, 278, 0, 0,
	0, 32, 56, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 1534, 0, 0, 0, 0, 0, 278, 0,
	1103, 1104, 0, 278, 0, 485, 278, 58, 437, 437,
	0, 437, 0, 34, 0, 64, 0, 0, 1534, 0,
	835, 0, 0, 0, 957, 955, 956, 948, 949, 950,
	951, 953, 954, 0, 47, 0, 0, 0, 0, 806,
	0, 42, 0, 0, 59, 0, 0, 0, 46, 43,
	0, 835, 835, 0, 0, 0, 0, 0, 0, 834,
	835, 835, 0, 0, 0, 48, 0, 0, 0, 0,
	0, 44, 0, 0, 0, 1528, 1526, 1527, 1519, 1520,
	1521, 1522, 1524, 1525, 0, 0, 0, 0, 0, 0,
	834, 834, 0, 835, 0, 0, 0, 944, 945, 834,
	834, 0, 1526, 1527, 1519, 1520, 1521, 1522, 1524, 1525,
	0, 0, 1150, 0, 0, 0, 0, 0, 0, 0,
	947, 0, 0, 278, 278, 0, 0, 806, 0, 278,
	1159, 1309, 834, 0, 0, 0, 516, 0, 0, 0,
	0, 0, 0, 946, 1517, 1518, 0, 1535, 1536, 1537,
	803, 0, 45, 0, 0, 1896, 0, 0, 0, 0,
	1852, 278, 0, 0, 437, 0, 0, 0, 61, 62,
	33, 0, 0, 49, 0, 60, 0, 0, 0, 0,
	50, 803, 803, 0, 71, 0, 548, 0, 0, 53,
	803, 803, 55, 308, 548, 0, 1532, 0, 952, 0,
	0, 57, 477, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 806, 803, 835, 0, 63, 0, 0, 0,
	0, 0, 0, 0, 1309, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 1523, 548, 548, 0, 69,
	0, 962, 0, 0, 308, 70, 0, 0, 1971, 0,
	0, 0, 0, 834, 0, 0, 278, 1343, 1344, 0,
	635, 635, 1056, 0, 68, 1351, 0, 0, 0, 738,
	1538, 1356, 1357, 1359, 1361, 1362, 0, 0, 0, 0,
	0, 0, 0, 1369, 0, 0, 1371, 278, 1533, 0,
	0, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	0, 278, 0, 1391, 0, 0, 0, 0, 0, 963,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 1309, 0, 835, 0, 0, 0, 477, 0, 0,
	477, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1150, 1150, 0, 803, 2027, 0, 0, 0, 0,
	0, 0, 993, 0, 995, 0, 1534, 0, 0, 0,
	0, 999, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 0, 921, 0, 437, 0, 0,
	0, 278, 0, 0, 0, 1436, 0, 928, 930, 0,
	0, 0, 0, 0, 937, 948, 949, 950, 951, 953,
	954, 0, 0, 0, 278, 0, 984, 985, 986, 987,
	988, 835, 0, 0, 0, 0, 996, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1003, 0, 0, 0,
	0, 0, 0, 0, 1529, 1530, 1531, 0, 0, 1528,
	1526, 1527, 1519, 1520, 1521, 1522, 1524, 1525, 0, 0,
	834, 0, 0, 803, 0, 52, 0, 0, 52, 548,
	0, 944, 945, 0, 964, 965, 966, 974, 975, 976,
	0, 0, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 52, 947, 52, 0, 978, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 0, 0, 52, 835, 946, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 945, 0, 964, 965, 966, 974,
	975, 976, 0, 0, 0, 0, 0, 0, 0, 967,
	0, 803, 0, 0, 0, 834, 947, 0, 0, 978,
	0, 308, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1581, 952, 0, 0, 0, 0, 0, 0, 946,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 971, 979, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 977, 0, 0,
	0, 0, 278, 278, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 0, 0, 0, 952, 0, 0, 1631, 0, 0,
	1056, 0, 921, 0, 0, 0, 803, 0, 0, 1641,
	968, 0, 0, 971, 979, 308, 0, 0, 0, 1194,
	278, 0, 0, 278, 0, 0, 0, 0, 0, 977,
	0, 0, 0, 0, 1673, 0, 0, 0, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 962, 0, 0,
	0, 0, 0, 963, 0, 1253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 968, 0, 0, 0, 0, 0, 0, 0,
	635, 0, 1704, 0, 0, 0, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 0, 1235,
	0, 1237, 1238, 1239, 1240, 963, 0, 0, 0, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 970, 972,
	1264, 958, 959, 960, 973, 0, 957, 955, 956, 948,
	949, 950, 951, 953, 954, 52, 0, 1484, 52, 1757,
	1758, 1056, 1291, 1292, 0, 0, 1305, 0, 1316, 1318,
	1323, 1326, 1327, 1328, 0, 1581, 516, 0, 0, 485,
	0, 1791, 0, 1792, 0, 278, 1794, 1795, 548, 0,
	1798, 278, 0, 738, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 958, 959, 960, 973, 0, 957, 955,
	956, 948, 949, 950, 951, 953, 954, 0, 0, 0,
	0, 0, 0, 1581, 1882, 516, 1159, 0, 1581, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1385, 0,
	278, 278, 0, 0, 278, 0, 0, 0, 0, 0,
	0, 0, 0, 1673, 52, 944, 945, 0, 52, 0,
	1849, 974, 975, 976, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 0, 0, 0, 0, 947, 0,
	1411, 978, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1869, 0, 0, 0, 0, 0, 0,
	0, 946, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1253, 0, 0, 0, 0, 0, 0, 0, 0, 937,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	995, 0, 0, 0, 0, 0, 0, 0, 1056, 0,
	1888, 0, 437, 1890, 0, 438, 952, 0, 0, 0,
	0, 278, 0, 0, 1581, 0, 0, 437, 0, 0,
	0, 0, 0, 439, 0, 971, 979, 0, 1462, 1463,
	0, 0, 0, 0, 1468, 0, 0, 0, 0, 1922,
	0, 0, 516, 0, 0, 0, 0, 0, 0, 995,
	0, 0, 1581, 969, 0, 440, 0, 278, 0, 962,
	443, 0, 0, 0, 1945, 448, 449, 1487, 0, 454,
	0, 0, 278, 0, 1494, 0, 0, 1498, 0, 0,
	0, 442, 444, 0, 0, 0, 1507, 0, 516, 1673,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 996, 0, 0, 0, 0, 0, 1323, 1323, 1323,
	445, 0, 0, 0, 0, 0, 0, 963, 548, 921,
	0, 1194, 0, 0, 446, 447, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 308, 0,
	1578, 450, 0, 0, 1990, 1991, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2002, 0, 0, 0,
	2003, 0, 0, 0, 0, 0, 0, 0, 1194, 0,
	0, 1194, 635, 0, 0, 516, 0, 0, 52, 0,
	0, 1673, 0, 0, 738, 0, 0, 1673, 516, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 973, 0,
	957, 955, 956, 948, 949, 950, 951, 953, 954, 0,
	2035, 0, 516, 0, 0, 278, 0, 437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 0, 1581, 0, 0, 1945,
	0, 0, 1673, 0, 0, 0, 0, 0, 0, 1676,
	0, 0, 1677, 0, 0, 451, 0, 456, 0, 0,
	0, 452, 0, 0, 1682, 0, 453, 0, 0, 0,
	0, 0, 0, 1691, 0, 0, 278, 0, 516, 0,
	455, 1695, 1517, 1518, 1411, 1535, 1536, 1537, 0, 548,
	0, 0, 0, 0, 0, 0, 2097, 0, 1685, 1711,
	0, 0, 0, 1713, 944, 945, 0, 964, 965, 966,
	974, 975, 976, 0, 0, 1673, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 947, 548, 0,
	978, 0, 0, 0, 1532, 0, 1744, 1745, 0, 52,
	0, 0, 0, 0, 0, 1751, 1752, 1753, 548, 0,
	946, 0, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1781, 0, 0, 0, 0, 0, 0, 1194, 1194,
	0, 0, 1194, 1523, 0, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 0, 944, 945, 0, 964,
	965, 966, 974, 975, 976, 952, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 1538, 947,
	0, 0, 978, 0, 971, 979, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1533, 1827, 0, 0,
	977, 0, 946, 0, 0, 0, 1517, 1518, 961, 1535,
	1536, 1537, 969, 0, 0, 0, 0, 0, 962, 0,
	0, 0, 0, 0, 0, 0, 1517, 1518, 1854, 1535,
	1536, 1537, 1857, 1858, 0, 0, 0, 1860, 0, 0,
	0, 0, 1684, 968, 1862, 0, 1864, 0, 0, 0,
	0, 0, 0, 0, 1870, 0, 0, 952, 1532, 0,
	0, 0, 0, 0, 1534, 0, 548, 944, 945, 0,
	964, 965, 966, 974, 975, 976, 971, 979, 1532, 0,
	0, 0, 0, 967, 0, 0, 963, 1879, 0, 0,
	947, 0, 977, 978, 1930, 0, 0, 0, 0, 0,
	972, 0, 0, 52, 969, 0, 0, 1523, 0, 0,
	962, 0, 0, 946, 0, 0, 0, 0, 0, 961,
	1194, 0, 0, 0, 0, 0, 0, 1523, 0, 0,
	0, 0, 0, 0, 0, 968, 1912, 0, 0, 0,
	0, 0, 1529, 1530, 1531, 0, 0, 1528, 1526, 1527,
	1519, 1520, 1521, 1522, 1524, 1525, 0, 0, 0, 0,
	1533, 970, 1538, 0, 958, 959, 960, 973, 952, 957,
	955, 956, 948, 949, 950, 951, 953, 954, 963, 0,
	1533, 1948, 0, 0, 548, 1559, 0, 971, 979, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	1963, 1964, 308, 977, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 969, 0, 995, 0, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 1534, 0,
	1976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 1980, 0, 0, 968, 0, 1534, 0,
	0, 0, 0, 970, 0, 0, 958, 959, 960, 973,
	0, 957, 955, 956, 948, 949, 950, 951, 953, 954,
	0, 0, 0, 0, 0, 0, 0, 1558, 0, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 1529, 1530, 1531, 0,
	0, 1528, 1526, 1527, 1519, 1520, 1521, 1522, 1524, 1525,
	0, 0, 0, 0, 0, 0, 1529, 1530, 1531, 0,
	0, 1528, 1526, 1527, 1519, 1520, 1521, 1522, 1524, 1525,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 0, 0, 958, 959, 960,
	973, 0, 957, 955, 956, 948, 949, 950, 951, 953,
	954, 0, 0, 0, 0, 0, 0, 0, 1557, 2079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2095, 2095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2095, 90, 91, 324, 92,
	325, 326, 327, 328, 225, 329, 330, 331, 332, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 333,
	97, 232, 233, 98, 334, 335, 234, 235, 236, 336,
	99, 237, 337, 310, 338, 100, 101, 102, 0, 103,
	339, 104, 105, 106, 340, 311, 107, 108, 341, 342,
	343, 344, 345, 346, 109, 110, 279, 111, 238, 112,
	239, 240, 347, 113, 348, 114, 349, 350, 351, 115,
	116, 352, 117, 353, 0, 354, 241, 118, 119, 242,
	243, 355, 356, 357, 120, 121, 244, 0, 122, 358,
	123, 359, 360, 312, 361, 124, 245, 362, 246, 363,
	125, 126, 127, 128, 247, 248, 314, 364, 132, 365,
	129, 366, 313, 130, 249, 131, 250, 251, 252, 367,
	253, 368, 315, 133, 316, 134, 135, 369, 137, 136,
	370, 254, 317, 138, 318, 371, 139, 372, 373, 140,
	0, 141, 142, 143, 145, 255, 144, 319, 146, 147,
	149, 148, 374, 375, 376, 256, 150, 257, 151, 152,
	377, 153, 378, 379, 154, 380, 381, 155, 258, 320,
	156, 321, 259, 157, 158, 159, 160, 382, 260, 161,
	261, 162, 383, 163, 164, 165, 262, 166, 167, 384,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 385, 179, 322, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 386, 264, 190, 191, 387, 192, 183,
	184, 193, 323, 194, 265, 266, 195, 388, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 389, 202, 390,
	203, 204, 205, 206, 207, 391, 269, 270, 271, 392,
	393, 208, 272, 273, 394, 209, 210, 211, 212, 395,
	396, 213, 214, 215, 397, 216, 398, 217, 218, 219,
	274, 275, 399, 400, 220, 401, 402, 403, 404, 221,
	222, 223, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 1667, 0, 0, 0, 0, 0, 0, 0, 1668,
	90, 91, 324, 92, 325, 326, 327, 328, 225, 329,
	330, 331, 332, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 333, 97, 232, 233, 98, 334, 335,
	234, 235, 236, 336, 99, 237, 337, 310, 338, 100,
	101, 102, 0, 103, 339, 104, 105, 106, 340, 311,
	107, 108, 341, 342, 343, 344, 345, 346, 109, 110,
	279, 111, 238, 112, 239, 240, 347, 113, 348, 114,
	349, 350, 351, 115, 116, 352, 117, 353, 0, 354,
	241, 118, 119, 242, 243, 355, 356, 357, 120, 121,
	244, 0, 122, 358, 123, 359, 360, 312, 361, 124,
	245, 362, 246, 363, 125, 126, 127, 128, 247, 248,
	314, 364, 132, 365, 129, 366, 313, 130, 249, 131,
	250, 251, 252, 367, 253, 368, 315, 133, 316, 134,
	135, 369, 137, 136, 370, 254, 317, 138, 318, 371,
	139, 372, 373, 140, 0, 141, 142, 143, 145, 255,
	144, 319, 146, 147, 149, 148, 374, 375, 376, 256,
	150, 257, 151, 152, 377, 153, 378, 379, 154, 380,
	381, 155, 258, 320, 156, 321, 259, 157, 158, 159,
	160, 382, 260, 161, 261, 162, 383, 163, 164, 165,
	262, 166, 167, 384, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 385, 179, 322, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 386, 264, 190,
	191, 387, 192, 183, 184, 193, 323, 194, 265, 266,
	195, 388, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 389, 202, 390, 203, 204, 205, 206, 207, 391,
	269, 270, 271, 392, 393, 208, 272, 273, 394, 209,
	210, 211, 212, 395, 396, 213, 214, 215, 397, 216,
	398, 217, 218, 219, 274, 275, 399, 400, 220, 401,
	402, 403, 404, 221, 222, 223, 224, 0, 0, 0,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2020, 90, 91, 324, 92,
	325, 326, 327, 328, 225, 329, 330, 331, 332, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 333,
	97, 232, 233, 98, 334, 335, 234, 235, 236, 336,
	99, 237, 337, 310, 338, 100, 101, 102, 0, 103,
	339, 104, 105, 106, 340, 311, 107, 108, 341, 342,
	343, 344, 345, 346, 109, 110, 279, 111, 238, 112,
	239, 240, 347, 113, 348, 114, 349, 350, 351, 115,
	116, 352, 117, 353, 0, 354, 241, 118, 119, 242,
	243, 355, 356, 357, 120, 121, 244, 0, 122, 358,
	123, 359, 360, 312, 361, 124, 245, 362, 246, 363,
	125, 126, 127, 128, 247, 248, 314, 364, 132, 365,
	129, 366, 313, 130, 249, 131, 250, 251, 252, 367,
	253, 368, 315, 133, 316, 134, 135, 369, 137, 136,
	370, 254, 317, 138, 318, 371, 139, 372, 373, 140,
	0, 141, 142, 143, 145, 255, 144, 319, 146, 147,
	149, 148, 374, 375, 376, 256, 150, 257, 151, 152,
	377, 153, 378, 379, 154, 380, 381, 155, 258, 320,
	156, 321, 259, 157, 158, 159, 160, 382, 260, 161,
	261, 162, 383, 163, 164, 165, 262, 166, 167, 384,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 385, 179, 322, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 386, 264, 190, 191, 387, 192, 183,
	184, 193, 323, 194, 265, 266, 195, 388, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 389, 202, 390,
	203, 204, 205, 206, 207, 391, 269, 270, 271, 392,
	393, 208, 272, 273, 394, 209, 210, 211, 212, 395,
	396, 213, 214, 215, 397, 216, 398, 217, 218, 219,
	274, 275, 399, 400, 220, 401, 402, 403, 404, 221,
	222, 223, 224, 305, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 768, 0, 0, 90,
	91, 324, 92, 325, 326, 327, 328, 225, 329, 330,
	331, 332, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 333, 97, 232, 233, 98, 334, 335, 234,
	235, 236, 336, 99, 237, 337, 310, 338, 100, 101,
	102, 0, 103, 339, 104, 105, 106, 340, 311, 107,
	108, 341, 342, 343, 344, 345, 346, 109, 110, 279,
	111, 238, 112, 239, 240, 347, 113, 348, 114, 349,
	350, 351, 115, 116, 352, 117, 353, 0, 354, 241,
	118, 119, 242, 243, 355, 356, 357, 120, 121, 244,
	0, 122, 358, 123, 359, 360, 312, 361, 124, 245,
	362, 246, 363, 125, 126, 127, 128, 247, 248, 314,
	364, 132, 365, 129, 366, 313, 130, 249, 131, 250,
	251, 252, 367, 253, 368, 315, 133, 316, 134, 135,
	369, 137, 136, 370, 254, 317, 138, 318, 371, 139,
	372, 373, 140, 0, 141, 142, 143, 145, 255, 144,
	319, 146, 147, 149, 148, 374, 375, 376, 256, 150,
	257, 151, 152, 377, 153, 378, 379, 154, 380, 381,
	155, 258, 320, 156, 321, 259, 157, 158, 159, 160,
	382, 260, 161, 261, 162, 383, 163, 164, 165, 262,
	166, 167, 384, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 385, 179, 322, 180, 181, 263,
	182, 0, 186, 187, 188, 189, 386, 264, 190, 191,
	387, 192, 183, 184, 193, 323, 194, 265, 266, 195,
	388, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	389, 202, 390, 203, 204, 205, 206, 207, 391, 269,
	270, 271, 392, 393, 208, 272, 273, 394, 209, 210,
	211, 212, 395, 396, 213, 214, 215, 397, 216, 398,
	217, 218, 219, 274, 275, 399, 400, 220, 401, 402,
	403, 404, 221, 222, 223, 224, 673, 662, 663, 660,
	661, 652, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	689, 655, 0, 0, 0, 93, 94, 95, 226, 704,
	228, 705, 96, 706, 707, 0, 97, 232, 233, 98,
	658, 688, 708, 709, 236, 0, 99, 700, 0, 681,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 311, 107, 108, 0, 682, 684, 0, 683, 685,
	109, 110, 279, 111, 710, 112, 711, 712, 739, 113,
	0, 114, 0, 0, 0, 703, 116, 0, 117, 0,
	0, 0, 646, 118, 119, 690, 691, 669, 0, 0,
	120, 121, 713, 0, 122, 0, 123, 0, 0, 312,
	0, 124, 701, 0, 246, 0, 125, 126, 127, 128,
	697, 699, 314, 0, 132, 0, 129, 0, 313, 130,
	714, 131, 715, 716, 717, 0, 680, 0, 315, 133,
	316, 134, 135, 0, 137, 136, 0, 702, 317, 138,
	318, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 319, 146, 147, 149, 148, 641, 0,
	670, 698, 150, 718, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 320, 156, 321, 692, 157,
	158, 159, 160, 0, 693, 161, 261, 162, 0, 163,
	164, 165, 719, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 322,
	180, 181, 647, 182, 0, 186, 187, 188, 189, 71,
	264, 190, 191, 686, 192, 183, 184, 193, 323, 194,
	720, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	721, 199, 694, 0, 202, 73, 203, 204, 205, 206,
	207, 0, 269, 722, 723, 0, 0, 208, 695, 696,
	668, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	687, 216, 0, 217, 218, 219, 549, 724, 0, 0,
	220, 0, 0, 0, 69, 221, 222, 223, 224, 642,
	70, 0, 0, 0, 0, 640, 0, 0, 0, 0,
	638, 639, 673, 662, 663, 660, 661, 652, 0, 648,
	0, 0, 0, 0, 651, 0, 0, 0, 90, 91,
	1280, 92, 0, 0, 0, 0, 689, 655, 0, 0,
	0, 93, 94, 95, 226, 704, 228, 705, 96, 706,
	707, 0, 97, 232, 233, 98, 658, 688, 708, 709,
	236, 0, 99, 700, 0, 681, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 311, 107, 108,
	0, 682, 684, 0, 683, 685, 109, 110, 279, 111,
	710, 112, 711, 712, 0, 113, 0, 114, 0, 1281,
	0, 703, 116, 0, 117, 0, 0, 0, 646, 118,
	119, 690, 691, 669, 0, 0, 120, 121, 713, 0,
	122, 0, 123, 0, 0, 312, 0, 124, 701, 0,
	246, 0, 125, 126, 127, 128, 697, 699, 314, 0,
	132, 0, 129, 0, 313, 130, 714, 131, 715, 716,
	717, 0, 680, 0, 315, 133, 316, 134, 135, 0,
	137, 136, 0, 702, 317, 138, 318, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 641, 0, 670, 698, 150, 718,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 320, 156, 321, 692, 157, 158, 159, 160, 0,
	693, 161, 261, 162, 0, 163, 164, 165, 719, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 322, 180, 181, 647, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 686,
	192, 183, 184, 193, 323, 194, 720, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 721, 199, 694, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 722,
	723, 0, 0, 208, 695, 696, 668, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 687, 216, 0, 217,
	218, 219, 274, 724, 1279, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 642, 0, 0, 0, 0,
	0, 640, 0, 0, 0, 0, 638, 639, 1282, 673,
	662, 663, 660, 661, 652, 648, 1277, 0, 0, 0,
	651, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 689, 655, 0, 0, 0, 93, 94,
	95, 226, 704, 228, 705, 96, 706, 707, 0, 97,
	232, 233, 98, 658, 688, 708, 709, 236, 0, 99,
	700, 0, 681, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 311, 107, 108, 0, 682, 684,
	0, 683, 685, 109, 110, 279, 111, 710, 112, 711,
	712, 0, 113, 0, 114, 0, 0, 0, 703, 116,
	0, 117, 0, 0, 0, 646, 118, 119, 690, 691,
	669, 0, 0, 120, 121, 713, 0, 122, 0, 123,
	0, 0, 312, 0, 124, 701, 0, 246, 0, 125,
	126, 127, 128, 697, 699, 314, 0, 132, 0, 129,
	0, 313, 130, 714, 131, 715, 716, 717, 0, 680,
	0, 315, 133, 316, 134, 135, 0, 137, 136, 0,
	702, 317, 138, 318, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 319, 146, 147, 149,
	148, 641, 0, 670, 698, 150, 718, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 320, 156,
	321, 692, 157, 158, 159, 160, 0, 693, 161, 261,
	162, 0, 163, 164, 165, 719, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 322, 180, 181, 647, 182, 0, 186, 187,
	188, 189, 71, 264, 190, 191, 686, 192, 183, 184,
	193, 323, 194, 720, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 721, 199, 694, 0, 202, 73, 203,
	204, 205, 206, 207, 0, 269, 722, 723, 0, 0,
	208, 695, 696, 668, 209, 210, 211, 212, 0, 0,
	213, 214, 215, 687, 216, 0, 217, 218, 219, 549,
	724, 0, 0, 220, 0, 0, 0, 69, 221, 222,
	223, 224, 642, 70, 0, 0, 0, 0, 640, 0,
	0, 0, 0, 638, 639, 673, 662, 663, 660, 661,
	652, 0, 648, 0, 0, 0, 0, 651, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 689,
	655, 0, 0, 0, 93, 94, 95, 226, 704, 228,
	705, 96, 706, 707, 1319, 97, 232, 233, 98, 658,
	688, 708, 709, 236, 0, 99, 700, 0, 681, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	311, 107, 108, 0, 682, 684, 0, 683, 685, 109,
	110, 279, 111, 710, 112, 711, 712, 0, 113, 0,
	114, 0, 0, 0, 703, 116, 0, 117, 0, 0,
	0, 646, 118, 119, 690, 691, 669, 0, 0, 120,
	121, 713, 0, 122, 0, 123, 0, 1324, 312, 0,
	124, 701, 0, 246, 0, 125, 126, 127, 128, 697,
	699, 314, 0, 132, 0, 129, 0, 313, 130, 714,
	131, 715, 716, 717, 0, 680, 0, 315, 133, 316,
	134, 135, 0, 137, 136, 1320, 702, 317, 138, 318,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 319, 146, 147, 149, 148, 641, 0, 670,
	698, 150, 718, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 320, 156, 321, 692, 157, 158,
	159, 160, 0, 693, 161, 261, 162, 0, 163, 164,
	165, 719, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 322, 180,
	181, 647, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 686, 192, 183, 184, 193, 323, 194, 720,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 721,
	199, 694, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 722, 723, 0, 1321, 208, 695, 696, 668,
	209, 210, 211, 212, 0, 0, 213, 214, 215, 687,
	216, 0, 217, 218, 219, 274, 724, 0, 0, 220,
	0, 0, 0, 0, 221, 222, 223, 224, 642, 0,
	0, 0, 0, 0, 640, 0, 0, 0, 0, 638,
	639, 673, 662, 663, 660, 661, 652, 0, 648, 0,
	0, 0, 0, 651, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 689, 655, 0, 0, 0,
	93, 94, 95, 226, 704, 228, 705, 96, 706, 707,
	0, 97, 232, 233, 98, 658, 688, 708, 709, 236,
	0, 99, 700, 0, 681, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 311, 107, 108, 0,
	682, 684, 0, 683, 685, 109, 110, 279, 111, 710,
	112, 711, 712, 0, 113, 0, 114, 0, 0, 0,
	703, 116, 0, 117, 0, 0, 0, 646, 118, 119,
	690, 691, 669, 0, 0, 120, 121, 713, 0, 122,
	0, 123, 0, 0, 312, 0, 124, 701, 0, 246,
	0, 125, 126, 127, 128, 697, 699, 314, 0, 132,
	0, 129, 0, 313, 130, 714, 131, 715, 716, 717,
	0, 680, 0, 315, 133, 316, 134, 135, 0, 137,
	136, 0, 702, 317, 138, 318, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 319, 146,
	147, 149, 148, 641, 1610, 670, 698, 150, 718, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	320, 156, 321, 692, 157, 158, 159, 160, 0, 693,
	161, 261, 162, 0, 163, 164, 165, 719, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 322, 180, 181, 647, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 686, 192,
	183, 184, 193, 323, 194, 720, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 721, 199, 694, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 722, 723,
	0, 0, 208, 695, 696, 668, 209, 210, 211, 212,
	0, 0, 213, 214, 215, 687, 216, 0, 217, 218,
	219, 274, 724, 0, 0, 220, 0, 0, 0, 0,
	221, 222, 223, 224, 642, 0, 0, 0, 0, 0,
	640, 0, 0, 0, 0, 638, 639, 636, 673, 662,
	663, 660, 661, 652, 648, 0, 0, 0, 0, 651,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 689, 655, 0, 0, 0, 93, 94, 95,
	226, 704, 228, 705, 96, 706, 707, 0, 97, 232,
	233, 98, 658, 688, 708, 709, 236, 0, 99, 700,
	0, 681, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 311, 107, 108, 0, 682, 684, 0,
	683, 685, 109, 110, 279, 111, 710, 112, 711, 712,
	0, 113, 0, 114, 0, 0, 0, 703, 116, 0,
	117, 0, 0, 0, 646, 118, 119, 690, 691, 669,
	0, 0, 120, 121, 713, 0, 122, 0, 123, 0,
	0, 312, 0, 124, 701, 0, 246, 0, 125, 126,
	127, 128, 697, 699, 314, 0, 132, 0, 129, 0,
	313, 130, 714, 131, 715, 716, 717, 0, 680, 0,
	315, 133, 316, 134, 135, 0, 137, 136, 0, 702,
	317, 138, 318, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 319, 146, 147, 149, 148,
	641, 0, 670, 698, 150, 718, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 320, 156, 321,
	692, 157, 158, 159, 160, 0, 693, 161, 261, 162,
	0, 163, 164, 165, 719, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 322, 180, 181, 647, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 686, 192, 183, 184, 193,
	323, 194, 720, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 721, 199, 694, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 722, 723, 0, 0, 208,
	695, 696, 668, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 687, 216, 0, 217, 218, 219, 274, 724,
	0, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 642, 0, 0, 0, 0, 0, 640, 0, 0,
	0, 0, 638, 639, 0, 0, 0, 0, 0, 1001,
	1272, 648, 0, 0, 0, 0, 651, 673, 662, 663,
	660, 661, 652, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 689, 655, 0, 0, 0, 93, 94, 95, 226,
	704, 228, 705, 96, 706, 707, 0, 97, 232, 233,
	98, 658, 688, 708, 709, 236, 0, 99, 700, 0,
	681, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 311, 107, 108, 0, 682, 684, 0, 683,
	685, 109, 110, 279, 111, 710, 112, 711, 712, 0,
	113, 0, 114, 0, 0, 0, 703, 116, 0, 117,
	0, 0, 0, 646, 118, 119, 690, 691, 669, 0,
	0, 120, 121, 713, 0, 122, 0, 123, 0, 0,
	312, 0, 124, 701, 0, 246, 0, 125, 126, 127,
	128, 697, 699, 314, 0, 132, 0, 129, 0, 313,
	130, 714, 131, 715, 716, 717, 0, 680, 0, 315,
	133, 316, 134, 135, 0, 137, 136, 0, 702, 317,
	138, 318, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 319, 146, 147, 149, 148, 641,
	0, 670, 698, 150, 718, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 320, 156, 321, 692,
	157, 158, 159, 160, 0, 693, 161, 261, 162, 0,
	163, 164, 165, 719, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	322, 180, 181, 647, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 686, 192, 183, 184, 193, 323,
	194, 720, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 721, 199, 694, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 722, 723, 0, 0, 208, 695,
	696, 668, 209, 210, 211, 212, 0, 0, 213, 214,
	215, 687, 216, 0, 217, 218, 219, 274, 724, 0,
	0, 220, 0, 0, 0, 0, 221, 222, 223, 224,
	642, 0, 0, 0, 0, 0, 640, 0, 0, 0,
	0, 638, 639, 673, 662, 663, 660, 661, 652, 0,
	648, 1741, 0, 0, 0, 651, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 689, 655, 0,
	0, 0, 93, 94, 95, 226, 704, 228, 705, 96,
	706, 707, 0, 97, 232, 233, 98, 658, 688, 708,
	709, 236, 0, 99, 700, 0, 681, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 311, 107,
	108, 0, 682, 684, 0, 683, 685, 109, 110, 279,
	111, 710, 112, 711, 712, 0, 113, 0, 114, 0,
	0, 0, 703, 116, 0, 117, 0, 0, 0, 646,
	118, 119, 690, 691, 669, 0, 0, 120, 121, 713,
	0, 122, 0, 123, 0, 0, 312, 0, 124, 701,
	0, 246, 0, 125, 126, 127, 128, 697, 699, 314,
	0, 132, 0, 129, 0, 313, 130, 714, 131, 715,
	716, 717, 0, 680, 0, 315, 133, 316, 134, 135,
	0, 137, 136, 0, 702, 317, 138, 318, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	319, 146, 147, 149, 148, 641, 0, 670, 698, 150,
	718, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 320, 156, 321, 692, 157, 158, 159, 160,
	0, 693, 161, 261, 162, 0, 163, 164, 165, 719,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 322, 180, 181, 647,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	686, 192, 183, 184, 193, 323, 194, 720, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 721, 199, 694,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	722, 723, 0, 0, 208, 695, 696, 668, 209, 210,
	211, 212, 0, 0, 213, 214, 215, 687, 216, 0,
	217, 218, 219, 274, 724, 1698, 0, 220, 0, 0,
	0, 0, 221, 222, 223, 224, 642, 0, 0, 0,
	0, 0, 640, 0, 0, 0, 0, 638, 639, 673,
	662, 663, 660, 661, 652, 0, 648, 0, 0, 0,
	0, 651, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 689, 655, 0, 0, 0, 93, 94,
	95, 226, 704, 228, 705, 96, 706, 707, 0, 97,
	232, 233, 98, 658, 688, 708, 709, 236, 0, 99,
	700, 0, 681, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 311, 107, 108, 0, 682, 684,
	0, 683, 685, 109, 110, 279, 111, 710, 112, 711,
	712, 0, 113, 0, 114, 0, 0, 0, 703, 116,
	0, 117, 0, 0, 0, 646, 118, 119, 690, 691,
	669, 0, 0, 120, 121, 713, 0, 122, 0, 123,
	0, 0, 312, 0, 124, 701, 0, 246, 0, 125,
	126, 127, 128, 697, 699, 314, 0, 132, 0, 129,
	0, 313, 130, 714, 131, 715, 716, 717, 0, 680,
	0, 315, 133, 316, 134, 135, 0, 137, 136, 0,
	702, 317, 138, 318, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 319, 146, 147, 149,
	148, 641, 0, 670, 698, 150, 718, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 320, 156,
	321, 692, 157, 158, 159, 160, 0, 693, 161, 261,
	162, 0, 163, 164, 165, 719, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 322, 180, 181, 647, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 686, 192, 183, 184,
	193, 323, 194, 720, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 721, 199, 694, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 722, 723, 0, 0,
	208, 695, 696, 668, 209, 210, 211, 212, 0, 0,
	213, 214, 215, 687, 216, 0, 217, 218, 219, 274,
	724, 0, 0, 220, 0, 0, 0, 0, 221, 222,
	223, 224, 642, 0, 0, 0, 0, 0, 640, 0,
	0, 0, 0, 638, 639, 673, 662, 663, 660, 661,
	652, 0, 648, 1688, 0, 0, 0, 651, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 689,
	655, 0, 0, 0, 93, 94, 95, 226, 704, 228,
	705, 96, 706, 707, 0, 97, 232, 233, 98, 658,
	688, 708, 709, 236, 0, 99, 700, 0, 681, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	311, 107, 108, 0, 682, 684, 0, 683, 685, 109,
	110, 279, 111, 710, 112, 711, 712, 739, 113, 0,
	114, 0, 0, 0, 703, 116, 0, 117, 0, 0,
	0, 646, 118, 119, 690, 691, 669, 0, 0, 120,
	121, 713, 0, 122, 0, 123, 0, 0, 312, 0,
	124, 701, 0, 246, 0, 125, 126, 127, 128, 697,
	699, 314, 0, 132, 0, 129, 0, 313, 130, 714,
	131, 715, 716, 717, 0, 680, 0, 315, 133, 316,
	134, 135, 0, 137, 136, 0, 702, 317, 138, 318,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 319, 146, 147, 149, 148, 641, 0, 670,
	698, 150, 718, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 320, 156, 321, 692, 157, 158,
	159, 160, 0, 693, 161, 261, 162, 0, 163, 164,
	165, 719, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 322, 180,
	181, 647, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 686, 192, 183, 184, 193, 323, 194, 720,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 721,
	199, 694, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 722, 723, 0, 0, 208, 695, 696, 668,
	209, 210, 211, 212, 0, 0, 213, 214, 215, 687,
	216, 0, 217, 218, 219, 274, 724, 0, 0, 220,
	0, 0, 0, 0, 221, 222, 223, 224, 642, 0,
	0, 0, 0, 0, 640, 0, 0, 0, 0, 638,
	639, 673, 662, 663, 660, 661, 652, 0, 648, 0,
	0, 0, 0, 651, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 689, 655, 0, 0, 0,
	93, 94, 95, 226, 704, 228, 705, 96, 706, 707,
	0, 97, 232, 233, 98, 658, 688, 708, 709, 236,
	0, 99, 700, 0, 681, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 311, 107, 108, 0,
	682, 684, 0, 683, 685, 109, 110, 279, 111, 710,
	112, 711, 712, 0, 113, 0, 114, 0, 0, 0,
	703, 116, 0, 117, 0, 0, 0, 646, 118, 119,
	690, 691, 669, 0, 0, 120, 121, 713, 0, 122,
	0, 123, 0, 1324, 312, 0, 124, 701, 0, 246,
	0, 125, 126, 127, 128, 697, 699, 314, 0, 132,
	0, 129, 0, 313, 130, 714, 131, 715, 716, 717,
	0, 680, 0, 315, 133, 316, 134, 135, 0, 137,
	136, 0, 702, 317, 138, 318, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 319, 146,
	147, 149, 148, 641, 0, 670, 698, 150, 718, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	320, 156, 321, 692, 157, 158, 159, 160, 0, 693,
	161, 261, 162, 0, 163, 164, 165, 719, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 322, 180, 181, 647, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 686, 192,
	183, 184, 193, 323, 194, 720, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 721, 199, 694, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 722, 723,
	0, 0, 208, 695, 696, 668, 209, 210, 211, 212,
	0, 0, 213, 214, 215, 687, 216, 0, 217, 218,
	219, 274, 724, 0, 0, 220, 0, 0, 0, 0,
	221, 222, 223, 224, 642, 0, 0, 0, 0, 0,
	640, 0, 0, 0, 0, 638, 639, 673, 662, 663,
	660, 661, 652, 0, 648, 0, 0, 0, 0, 651,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 689, 655, 0, 0, 0, 93, 94, 95, 226,
	704, 228, 705, 96, 706, 707, 0, 97, 232, 233,
	98, 658, 688, 708, 709, 236, 0, 99, 700, 0,
	681, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 311, 107, 108, 0, 682, 684, 0, 683,
	685, 109, 110, 279, 111, 710, 112, 711, 712, 0,
	113, 0, 114, 0, 0, 0, 703, 116, 0, 117,
	0, 0, 0, 646, 118, 119, 690, 691, 669, 0,
	0, 120, 121, 713, 0, 122, 0, 123, 0, 0,
	312, 0, 124, 701, 0, 246, 0, 125, 126, 127,
	128, 697, 699, 314, 0, 132, 0, 129, 0, 313,
	130, 714, 131, 715, 716, 717, 0, 680, 0, 315,
	133, 316, 134, 135, 0, 137, 136, 0, 702, 317,
	138, 318, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 319, 146, 147, 149, 148, 641,
	0, 670, 698, 150, 718, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 320, 156, 321, 692,
	157, 158, 159, 160, 0, 693, 161, 261, 162, 0,
	163, 164, 165, 719, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	322, 180, 181, 647, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 686, 192, 183, 184, 193, 323,
	194, 720, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 721, 199, 694, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 722, 723, 0, 0, 208, 695,
	696, 668, 209, 210, 211, 212, 0, 0, 213, 214,
	215, 687, 216, 0, 217, 218, 219, 274, 724, 0,
	0, 220, 0, 0, 0, 0, 221, 222, 223, 224,
	642, 0, 0, 0, 0, 0, 640, 0, 0, 0,
	0, 638, 639, 673, 662, 663, 660, 661, 652, 0,
	648, 1267, 0, 0, 0, 651, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 689, 655, 0,
	0, 0, 93, 94, 95, 226, 704, 228, 705, 96,
	706, 707, 0, 97, 232, 233, 98, 658, 688, 708,
	709, 236, 0, 99, 700, 0, 681, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 311, 107,
	108, 0, 682, 684, 0, 683, 685, 109, 110, 279,
	111, 710, 112, 711, 712, 0, 113, 0, 114, 0,
	0, 0, 703, 116, 0, 117, 0, 0, 0, 646,
	118, 119, 690, 691, 669, 0, 0, 120, 121, 713,
	0, 122, 0, 123, 0, 0, 312, 0, 124, 701,
	0, 246, 0, 125, 126, 127, 128, 697, 699, 314,
	0, 132, 0, 129, 0, 313, 130, 714, 131, 715,
	716, 717, 0, 680, 0, 315, 133, 316, 134, 135,
	0, 137, 136, 0, 702, 317, 138, 318, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	319, 146, 147, 149, 148, 641, 0, 670, 698, 150,
	718, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 320, 156, 321, 692, 157, 158, 159, 160,
	0, 693, 161, 261, 162, 0, 163, 164, 165, 719,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 322, 180, 181, 647,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	686, 192, 183, 184, 193, 323, 194, 720, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 721, 199, 694,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	722, 723, 0, 0, 208, 695, 696, 668, 209, 210,
	211, 212, 0, 0, 213, 214, 215, 687, 216, 0,
	217, 218, 219, 274, 724, 0, 0, 220, 0, 0,
	0, 0, 221, 222, 223, 224, 642, 0, 0, 0,
	0, 0, 640, 0, 0, 0, 0, 638, 639, 636,
	673, 662, 663, 660, 661, 652, 648, 0, 0, 0,
	0, 651, 0, 0, 0, 0, 90, 91, 929, 92,
	0, 0, 0, 0, 689, 655, 0, 0, 0, 93,
	94, 95, 226, 704, 228, 705, 96, 706, 707, 0,
	97, 232, 233, 98, 658, 688, 708, 709, 236, 0,
	99, 700, 0, 681, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 311, 107, 108, 0, 682,
	684, 0, 683, 685, 109, 110, 279, 111, 710, 112,
	711, 712, 0, 113, 0, 114, 0, 0, 0, 703,
	116, 0, 117, 0, 0, 0, 646, 118, 119, 690,
	691, 669, 0, 0, 120, 121, 713, 0, 122, 0,
	123, 0, 0, 312, 0, 124, 701, 0, 246, 0,
	125, 126, 127, 128, 697, 699, 314, 0, 132, 0,
	129, 0, 313, 130, 714, 131, 715, 716, 717, 0,
	680, 0, 315, 133, 316, 134, 135, 0, 137, 136,
	0, 702, 317, 138, 318, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 319, 146, 147,
	149, 148, 641, 0, 670, 698, 150, 718, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 320,
	156, 321, 692, 157, 158, 159, 160, 0, 693, 161,
	261, 162, 0, 163, 164, 165, 719, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 322, 180, 181, 647, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 686, 192, 183,
	184, 193, 323, 194, 720, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 721, 199, 694, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 722, 723, 0,
	0, 208, 695, 696, 668, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 687, 216, 0, 217, 218, 219,
	274, 724, 0, 0, 220, 0, 0, 0, 0, 221,
	222, 223, 224, 642, 0, 0, 0, 0, 0, 640,
	0, 0, 0, 0, 638, 639, 673, 662, 663, 660,
	661, 652, 0, 648, 0, 0, 0, 0, 651, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	689, 655, 0, 0, 0, 93, 94, 95, 226, 704,
	228, 705, 96, 706, 707, 0, 97, 232, 233, 98,
	658, 688, 708, 709, 236, 0, 99, 700, 0, 681,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 311, 107, 2094, 0, 682, 684, 0, 683, 685,
	109, 110, 279, 111, 710, 112, 711, 712, 0, 113,
	0, 114, 0, 0, 0, 703, 116, 0, 117, 0,
	0, 0, 646, 118, 119, 690, 691, 669, 0, 0,
	120, 121, 713, 0, 122, 0, 123, 0, 0, 312,
	0, 124, 701, 0, 246, 0, 125, 126, 127, 128,
	697, 699, 314, 0, 132, 0, 129, 0, 313, 130,
	714, 131, 715, 716, 717, 0, 680, 0, 315, 133,
	316, 134, 135, 0, 137, 136, 0, 702, 317, 138,
	318, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 319, 146, 147, 149, 148, 641, 0,
	670, 698, 150, 718, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 320, 156, 321, 692, 157,
	158, 159, 160, 0, 693, 161, 261, 162, 0, 163,
	164, 165, 719, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 322,
	180, 181, 647, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 686, 192, 183, 184, 193, 323, 194,
	720, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	721, 199, 694, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 722, 723, 0, 0, 208, 695, 696,
	668, 209, 210, 2093, 212, 0, 0, 213, 214, 215,
	687, 216, 0, 217, 218, 219, 274, 724, 0, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 642,
	0, 0, 0, 0, 0, 640, 0, 0, 0, 0,
	638, 639, 673, 662, 663, 660, 661, 652, 0, 648,
	0, 0, 0, 0, 651, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 689, 655, 0, 0,
	0, 93, 94, 95, 2092, 704, 228, 705, 96, 706,
	707, 0, 97, 232, 233, 98, 658, 688, 708, 709,
	236, 0, 99, 700, 0, 681, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 311, 107, 2094,
	0, 682, 684, 0, 683, 685, 109, 110, 279, 111,
	710, 112, 711, 712, 0, 113, 0, 114, 0, 0,
	0, 703, 116, 0, 117, 0, 0, 0, 646, 118,
	119, 690, 691, 669, 0, 0, 120, 121, 713, 0,
	122, 0, 123, 0, 0, 312, 0, 124, 701, 0,
	246, 0, 125, 126, 127, 128, 697, 699, 314, 0,
	132, 0, 129, 0, 313, 130, 714, 131, 715, 716,
	717, 0, 680, 0, 315, 133, 316, 134, 135, 0,
	137, 136, 0, 702, 317, 138, 318, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 641, 0, 670, 698, 150, 718,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 320, 156, 321, 692, 157, 158, 159, 160, 0,
	693, 161, 261, 162, 0, 163, 164, 165, 719, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 322, 180, 181, 647, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 686,
	192, 183, 184, 193, 323, 194, 720, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 721, 199, 694, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 722,
	723, 0, 0, 208, 695, 696, 668, 209, 210, 2093,
	212, 0, 0, 213, 214, 215, 687, 216, 0, 217,
	218, 219, 274, 724, 0, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 642, 0, 0, 0, 0,
	0, 640, 0, 0, 0, 0, 638, 639, 673, 662,
	663, 660, 661, 652, 0, 648, 0, 0, 0, 0,
	651, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 689, 655, 0, 0, 0, 93, 94, 95,
	226, 704, 228, 705, 96, 706, 707, 0, 97, 232,
	233, 98, 658, 688, 708, 709, 236, 0, 99, 700,
	0, 681, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 311, 107, 108, 0, 682, 684, 0,
	683, 685, 109, 110, 279, 111, 710, 112, 711, 712,
	0, 113, 0, 114, 0, 0, 0, 703, 116, 0,
	117, 0, 0, 0, 646, 118, 119, 690, 691, 669,
	0, 0, 120, 121, 713, 0, 122, 0, 123, 0,
	0, 312, 0, 124, 701, 0, 246, 0, 125, 126,
	127, 128, 697, 699, 314, 0, 132, 0, 129, 0,
	313, 130, 714, 131, 715, 716, 717, 0, 680, 0,
	315, 133, 316, 134, 135, 0, 137, 136, 0, 702,
	317, 138, 318, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 319, 146, 147, 149, 148,
	641, 0, 670, 698, 150, 718, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 320, 156, 321,
	692, 157, 158, 159, 160, 0, 693, 161, 261, 162,
	0, 163, 164, 165, 719, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 322, 180, 181, 647, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 686, 192, 183, 184, 193,
	323, 194, 720, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 721, 199, 694, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 722, 723, 0, 0, 208,
	695, 696, 668, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 687, 216, 0, 217, 218, 219, 274, 724,
	0, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 642, 0, 0, 0, 0, 0, 640, 0, 0,
	0, 0, 638, 639, 1296, 662, 663, 660, 661, 652,
	0, 648, 0, 0, 0, 0, 651, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 689, 655,
	0, 0, 0, 93, 94, 95, 226, 704, 228, 705,
	96, 706, 707, 0, 97, 232, 233, 98, 658, 688,
	708, 709, 236, 0, 99, 700, 0, 681, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 311,
	107, 108, 0, 682, 684, 0, 683, 685, 109, 110,
	279, 111, 710, 1299, 711, 712, 0, 113, 0, 114,
	0, 0, 0, 703, 116, 0, 117, 0, 0, 0,
	646, 118, 119, 690, 691, 669, 0, 0, 120, 121,
	713, 0, 122, 0, 123, 0, 0, 312, 0, 124,
	701, 0, 246, 0, 125, 126, 1300, 128, 697, 699,
	314, 0, 132, 0, 129, 0, 313, 130, 714, 131,
	715, 716, 717, 0, 680, 0, 315, 133, 316, 134,
	135, 0, 137, 136, 0, 702, 317, 138, 318, 0,
	139, 0, 0, 140, 0, 141, 1301, 1298, 145, 255,
	144, 319, 146, 147, 149, 148, 641, 0, 670, 698,
	150, 718, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 320, 156, 321, 692, 157, 158, 159,
	160, 0, 693, 161, 261, 162, 0, 163, 164, 165,
	719, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 322, 180, 181,
	647, 182, 0, 186, 187, 188, 1302, 0, 264, 190,
	191, 686, 192, 183, 184, 193, 323, 194, 720, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 721, 199,
	694, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 722, 723, 0, 0, 208, 695, 696, 668, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 687, 216,
	0, 217, 218, 219, 274, 724, 0, 0, 220, 0,
	0, 0, 0, 221, 222, 1297, 224, 642, 0, 0,
	0, 0, 0, 640, 0, 0, 0, 0, 638, 639,
	673, 662, 663, 660, 661, 652, 0, 648, 0, 0,
	0, 0, 651, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 689, 655, 0, 0, 0, 93,
	94, 95, 226, 704, 228, 705, 96, 706, 707, 0,
	97, 232, 233, 98, 658, 688, 708, 709, 236, 0,
	99, 700, 0, 681, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 311, 107, 108, 0, 682,
	684, 0, 683, 685, 109, 110, 279, 111, 710, 112,
	711, 712, 0, 113, 0, 114, 0, 0, 0, 703,
	116, 0, 117, 0, 0, 0, 646, 118, 119, 690,
	691, 669, 0, 0, 120, 121, 713, 0, 122, 0,
	123, 0, 0, 312, 0, 124, 701, 0, 246, 0,
	125, 126, 127, 128, 697, 699, 314, 0, 132, 0,
	129, 0, 313, 130, 714, 131, 715, 716, 717, 0,
	680, 0, 315, 133, 316, 134, 135, 0, 137, 136,
	0, 702, 317, 138, 318, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 319, 146, 147,
	149, 148, 0, 0, 670, 698, 150, 718, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 320,
	156, 321, 692, 157, 158, 159, 160, 0, 693, 161,
	261, 162, 0, 163, 164, 165, 719, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 322, 180, 181, 1314, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 686, 192, 183,
	184, 193, 323, 194, 720, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 721, 199, 694, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 722, 723, 0,
	0, 208, 695, 696, 668, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 687, 216, 0, 217, 218, 219,
	274, 724, 0, 0, 220, 0, 0, 0, 0, 221,
	222, 223, 224, 0, 0, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 1310, 1311, 673, 662, 663, 660,
	661, 652, 0, 1313, 0, 0, 0, 0, 651, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	689, 655, 0, 0, 0, 93, 94, 95, 226, 704,
	228, 705, 96, 706, 707, 0, 97, 232, 233, 98,
	0, 688, 708, 709, 236, 0, 99, 700, 0, 681,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 311, 107, 108, 0, 682, 684, 0, 683, 685,
	109, 110, 279, 111, 710, 112, 711, 712, 0, 113,
	0, 114, 0, 0, 0, 703, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 690, 691, 669, 0, 0,
	120, 121, 713, 0, 122, 0, 123, 0, 0, 312,
	0, 124, 701, 0, 246, 0, 125, 126, 127, 128,
	697, 699, 314, 0, 132, 0, 129, 0, 313, 130,
	714, 131, 715, 716, 717, 0, 680, 0, 315, 133,
	316, 134, 135, 0, 137, 136, 0, 702, 317, 138,
	318, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 319, 146, 147, 149, 148, 0, 0,
	670, 698, 150, 718, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 320, 156, 321, 692, 157,
	158, 159, 160, 0, 693, 161, 261, 162, 0, 163,
	164, 165, 719, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 322,
	180, 181, 1314, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 686, 192, 183, 184, 193, 323, 194,
	720, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	721, 199, 694, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 722, 723, 0, 0, 208, 695, 696,
	668, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	687, 216, 0, 217, 218, 219, 274, 724, 0, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 0,
	0, 673, 662, 663, 660, 661, 652, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 1313,
	92, 0, 0, 0, 651, 689, 655, 0, 0, 0,
	93, 94, 95, 0, 704, 228, 705, 96, 706, 707,
	0, 97, 232, 233, 98, 658, 688, 708, 709, 236,
	0, 99, 700, 0, 681, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 311, 107, 2094, 0,
	682, 684, 0, 683, 685, 109, 110, 279, 111, 710,
	112, 711, 712, 0, 113, 0, 114, 0, 0, 0,
	703, 116, 0, 117, 0, 0, 0, 646, 118, 119,
	690, 691, 669, 0, 0, 120, 121, 713, 0, 122,
	0, 123, 0, 0, 312, 0, 124, 701, 0, 246,
	0, 125, 126, 127, 128, 697, 699, 0, 0, 132,
	0, 129, 0, 313, 130, 714, 131, 715, 716, 717,
	0, 680, 0, 0, 133, 316, 134, 135, 0, 137,
	136, 0, 702, 317, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 319, 146,
	147, 149, 148, 641, 0, 670, 698, 150, 718, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	320, 156, 321, 692, 157, 158, 159, 160, 0, 693,
	161, 261, 162, 0, 163, 164, 165, 719, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 322, 180, 181, 647, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 686, 192,
	183, 184, 193, 0, 194, 720, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 721, 199, 694, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 722, 723,
	0, 0, 208, 695, 696, 668, 209, 210, 2093, 212,
	0, 0, 213, 214, 215, 687, 216, 0, 217, 218,
	219, 274, 724, 0, 0, 220, 0, 0, 0, 0,
	221, 222, 223, 224, 673, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 638, 639, 0, 0, 0,
	90, 91, 0, 92, 648, 0, 0, 0, 689, 651,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 688,
	234, 235, 236, 0, 99, 700, 0, 681, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 311,
	107, 108, 0, 682, 684, 0, 683, 685, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 690, 691, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 312, 0, 124,
	701, 0, 246, 0, 125, 126, 127, 128, 697, 699,
	314, 0, 132, 0, 129, 0, 313, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 315, 133, 316, 134,
	135, 0, 137, 136, 0, 702, 317, 138, 318, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 319, 146, 147, 149, 148, 0, 0, 0, 698,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 320, 156, 321, 692, 157, 158, 159,
	160, 0, 693, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 322, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 686, 192, 183, 184, 193, 323, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	694, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 695, 696, 0, 209,
	210, 211, 212, 545, 0, 213, 214, 215, 687, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 90,
	91, 0, 92, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 0, 97, 232, 233, 98, 1583, 0, 234,
	235, 236, 0, 99, 237, 0, 310, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 311, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 279,
	111, 238, 112, 239, 240, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 241,
	118, 119, 242, 243, 0, 0, 0, 120, 121, 244,
	0, 122, 0, 123, 0, 0, 312, 0, 124, 245,
	0, 246, 0, 125, 126, 127, 128, 247, 248, 314,
	0, 132, 0, 129, 0, 313, 130, 249, 131, 250,
	251, 252, 0, 253, 0, 315, 133, 316, 134, 135,
	0, 137, 136, 0, 254, 317, 138, 318, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	319, 146, 147, 149, 148, 0, 0, 0, 256, 150,
	257, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 320, 156, 321, 259, 157, 158, 159, 160,
	0, 260, 161, 261, 162, 0, 163, 164, 165, 262,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 322, 180, 181, 263,
	182, 0, 186, 187, 188, 189, 71, 264, 190, 191,
	0, 192, 183, 184, 193, 323, 194, 265, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	0, 202, 73, 203, 204, 205, 206, 207, 0, 269,
	270, 271, 0, 0, 208, 272, 273, 0, 209, 210,
	211, 212, 0, 0, 213, 214, 215, 0, 216, 0,
	217, 218, 219, 549, 275, 0, 0, 220, 0, 0,
	0, 69, 221, 222, 223, 224, 0, 70, 545, 764,
	0, 874, 871, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 68, 92, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 0, 0, 234, 235, 236, 0, 99, 237,
	0, 310, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 311, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	877, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 868,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 312, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 247, 248, 314, 0, 132, 0, 129, 0,
	313, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	315, 133, 316, 134, 135, 0, 137, 136, 0, 254,
	317, 138, 318, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 319, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	869, 0, 154, 0, 0, 155, 258, 320, 156, 321,
	259, 157, 158, 159, 160, 0, 260, 161, 261, 162,
	0, 163, 164, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 322, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 0, 192, 183, 184, 193,
	323, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 270, 271, 0, 0, 208,
	272, 273, 867, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	545, 764, 220, 874, 871, 866, 0, 221, 222, 223,
	224, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 875, 872, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 0,
	99, 237, 0, 310, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 311, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 862, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 868, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 312, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 247, 248, 314, 0, 132, 0,
	129, 0, 313, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 315, 133, 316, 134, 135, 0, 137, 136,
	0, 254, 317, 138, 318, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 319, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 869, 0, 154, 0, 0, 155, 258, 320,
	156, 321, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 322, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 323, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 867, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 545, 764, 220, 874, 871, 866, 0, 221,
	222, 223, 224, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 875, 872, 225, 0, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	236, 0, 99, 237, 0, 310, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 311, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 868, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 312, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 247, 248, 314, 0,
	132, 0, 129, 0, 313, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 315, 133, 316, 134, 135, 0,
	137, 136, 0, 254, 317, 138, 318, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 869, 0, 154, 0, 0, 155,
	258, 320, 156, 321, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 162, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 322, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 0,
	192, 183, 184, 193, 323, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 272, 273, 867, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 274, 275, 87, 0, 220, 0, 0, 0,
	0, 221, 222, 223, 224, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 875, 872, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 0, 99, 237, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 247, 248,
	0, 0, 132, 0, 129, 0, 0, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 254, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 499, 154, 0,
	0, 155, 258, 0, 156, 0, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 71, 264, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 73, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 549, 275, 0, 0, 220, 87,
	0, 0, 69, 221, 222, 223, 224, 0, 70, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 225, 0, 1191, 0, 1196, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 99,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 247, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 71, 264, 190, 191, 0, 192, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 73, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 0, 209, 210, 211, 212, 0, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 549,
	275, 0, 0, 220, 87, 0, 0, 69, 221, 222,
	223, 224, 0, 70, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 225, 0,
	0, 0, 68, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 0, 99, 237, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 247, 248,
	0, 0, 132, 0, 129, 0, 0, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 254, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 499, 154, 0,
	0, 155, 258, 0, 156, 0, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 87,
	0, 0, 0, 221, 222, 223, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 225, 0, 1191, 0, 1196, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 99,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 247, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 192, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 0, 209, 210, 211, 212, 87, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 0, 0, 220, 90, 91, 0, 92, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 0, 772, 234, 235, 236, 0, 99, 237,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 0,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 247, 248, 0, 0, 132, 0, 129, 0,
	0, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 254,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 0, 156, 0,
	259, 157, 158, 159, 160, 0, 260, 161, 261, 162,
	0, 163, 164, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 270, 271, 0, 0, 208,
	272, 273, 0, 209, 210, 211, 212, 87, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	0, 0, 220, 90, 91, 0, 92, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 0, 97, 232, 233,
	98, 1102, 0, 234, 235, 236, 0, 99, 237, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 279, 111, 238, 112, 239, 240, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 0, 0,
	0, 120, 121, 244, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 247, 248, 0, 0, 132, 0, 129, 0, 0,
	130, 249, 131, 250, 251, 252, 0, 253, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 254, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 0, 146, 147, 149, 148, 0,
	0, 0, 256, 150, 257, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 0, 156, 0, 259,
	157, 158, 159, 160, 0, 260, 161, 261, 162, 0,
	163, 164, 165, 262, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 0, 192, 183, 184, 193, 0,
	194, 265, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 270, 271, 0, 0, 208, 272,
	273, 0, 209, 210, 211, 212, 87, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 274, 275, 0,
	0, 220, 90, 91, 0, 92, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	1705, 0, 234, 235, 236, 0, 99, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 0, 0, 132, 0, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	0, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 673,
	662, 663, 660, 661, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 735,
	0, 0, 0, 225, 0, 0, 0, 0, 93, 94,
	95, 226, 704, 228, 705, 96, 706, 707, 0, 97,
	232, 233, 98, 0, 0, 708, 709, 236, 0, 99,
	237, 0, 310, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 311, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 710, 112, 711,
	712, 0, 113, 0, 114, 0, 0, 0, 703, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	669, 0, 0, 120, 121, 713, 0, 122, 0, 123,
	0, 0, 312, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 247, 248, 314, 0, 132, 0, 129,
	0, 313, 130, 714, 131, 715, 716, 717, 0, 680,
	0, 315, 133, 316, 134, 135, 0, 137, 136, 0,
	254, 317, 138, 318, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 319, 146, 147, 149,
	148, 0, 0, 670, 256, 150, 718, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 320, 156,
	321, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 719, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 322, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 192, 183, 184,
	193, 323, 194, 720, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 721, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 722, 723, 0, 0,
	208, 272, 273, 668, 209, 210, 211, 212, 545, 764,
	213, 214, 215, 762, 216, 0, 217, 218, 219, 274,
	724, 0, 0, 220, 90, 91, 0, 92, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 0, 0, 234, 235, 236, 0, 99, 237,
	0, 310, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 311, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 0,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 312, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 247, 248, 314, 0, 132, 0, 129, 0,
	313, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	315, 133, 316, 134, 135, 0, 137, 136, 0, 254,
	317, 138, 318, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 319, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 320, 156, 321,
	259, 157, 158, 159, 160, 0, 260, 161, 261, 162,
	0, 163, 164, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 322, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 0, 192, 183, 184, 193,
	323, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 270, 271, 0, 0, 208,
	272, 273, 0, 209, 210, 211, 212, 87, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	0, 0, 220, 90, 91, 0, 92, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 0, 97, 232, 233,
	98, 0, 0, 234, 235, 236, 0, 99, 237, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 83, 111, 238, 112, 239, 240, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 0, 0,
	0, 120, 121, 244, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 247, 248, 0, 0, 132, 0, 129, 0, 0,
	130, 249, 131, 250, 251, 252, 0, 253, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 254, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 0, 146, 147, 149, 148, 0,
	0, 0, 256, 150, 257, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 0, 156, 0, 259,
	157, 158, 159, 160, 0, 260, 161, 261, 162, 0,
	163, 164, 165, 262, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 0, 192, 183, 184, 193, 0,
	194, 265, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 0, 202, 82, 203, 204, 205,
	206, 207, 0, 269, 270, 271, 0, 0, 208, 272,
	273, 0, 209, 210, 211, 212, 0, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 274, 275, 0,
	0, 220, 545, 764, 0, 0, 221, 222, 223, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 86, 0, 0, 225, 0, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	236, 0, 99, 237, 0, 310, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 311, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 0, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 312, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 247, 248, 314, 0,
	132, 0, 129, 0, 313, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 315, 133, 316, 134, 135, 0,
	137, 136, 0, 254, 317, 138, 318, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 320, 156, 321, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 162, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 322, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 0,
	192, 183, 184, 193, 323, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 272, 273, 0, 209, 210, 211,
	212, 87, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 274, 275, 0, 0, 220, 90, 91, 0,
	92, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	0, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 247, 248, 0, 0, 132,
	0, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	0, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 274, 275, 0, 545, 220, 0, 0, 0, 0,
	221, 222, 223, 224, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 86, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 0, 99, 237, 0, 310, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 311,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 312, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 247, 248,
	314, 0, 132, 0, 129, 0, 313, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 315, 133, 316, 134,
	135, 0, 137, 136, 0, 254, 317, 138, 318, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 319, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 320, 156, 321, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 322, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 323, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 87, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 90,
	91, 0, 92, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 0, 97, 232, 233, 98, 0, 0, 234,
	235, 236, 1059, 99, 237, 0, 0, 0, 100, 101,
	102, 0, 103, 1057, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 279,
	111, 238, 112, 239, 240, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 241,
	118, 119, 242, 243, 0, 1167, 0, 120, 121, 244,
	0, 122, 0, 123, 1062, 0, 0, 0, 124, 245,
	0, 246, 0, 125, 126, 127, 128, 247, 248, 0,
	0, 132, 1165, 129, 0, 0, 130, 249, 131, 250,
	251, 252, 0, 253, 0, 0, 133, 0, 134, 135,
	0, 137, 136, 0, 254, 0, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	0, 146, 147, 149, 148, 0, 0, 0, 256, 150,
	257, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 0, 156, 0, 259, 157, 158, 159, 160,
	0, 260, 161, 261, 162, 1061, 163, 164, 165, 262,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 0, 180, 181, 263,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	0, 192, 183, 184, 193, 0, 194, 265, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	270, 271, 0, 0, 208, 272, 273, 0, 209, 210,
	211, 212, 87, 1166, 213, 214, 215, 0, 216, 0,
	217, 218, 219, 274, 275, 0, 0, 220, 90, 91,
	0, 92, 221, 222, 223, 224, 225, 0, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	236, 1059, 99, 237, 0, 0, 1054, 100, 101, 102,
	0, 103, 1057, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 0, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 1062, 0, 0, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 1053, 248, 0, 0,
	132, 0, 129, 0, 0, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 254, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 0, 156, 0, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 162, 1061, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 272, 273, 0, 209, 210, 211,
	212, 87, 1060, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 274, 275, 0, 0, 220, 90, 91, 0,
	92, 221, 222, 223, 224, 225, 0, 1672, 0, 0,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	0, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 247, 248, 0, 0, 132,
	0, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	87, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 274, 275, 0, 0, 220, 90, 91, 0, 92,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 0,
	99, 237, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 0, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 247, 248, 0, 0, 132, 0,
	129, 0, 0, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 254, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 0, 499, 154, 0, 0, 155, 258, 0,
	156, 0, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 0, 209, 210, 211, 212, 87,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 0, 0, 220, 90, 91, 891, 92, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 99,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 247, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 192, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 0, 209, 210, 211, 212, 87, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 0, 0, 220, 90, 91, 0, 92, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 0, 0, 234, 235, 236, 0, 99, 237,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 0,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 797, 248, 0, 0, 132, 0, 129, 0,
	0, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 254,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	0, 499, 154, 0, 0, 155, 258, 0, 156, 0,
	259, 157, 158, 159, 160, 0, 260, 161, 261, 162,
	0, 163, 164, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 270, 271, 0, 0, 208,
	272, 273, 0, 209, 210, 211, 212, 87, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	0, 0, 220, 90, 91, 557, 92, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 0, 97, 232, 233,
	98, 0, 0, 234, 235, 236, 0, 99, 237, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 279, 111, 238, 112, 239, 240, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 0, 0,
	0, 120, 121, 244, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 247, 248, 0, 0, 132, 0, 129, 0, 0,
	130, 249, 131, 250, 251, 252, 0, 253, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 254, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 0, 146, 147, 149, 148, 0,
	0, 0, 256, 150, 257, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 0, 156, 0, 259,
	157, 158, 159, 160, 0, 260, 161, 261, 162, 0,
	163, 164, 165, 262, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 0, 192, 183, 184, 193, 0,
	194, 265, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 270, 271, 0, 0, 208, 272,
	273, 0, 209, 210, 211, 212, 87, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 274, 275, 0,
	0, 220, 90, 91, 0, 92, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 0, 99, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	511, 248, 0, 0, 132, 0, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 499,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	0, 209, 210, 211, 212, 87, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 90, 91, 0, 92, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	0, 234, 235, 236, 0, 99, 237, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 0, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 504,
	248, 0, 0, 132, 0, 129, 0, 0, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 0, 133, 0,
	134, 135, 0, 137, 136, 0, 254, 0, 138, 0,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 0, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 499, 154,
	0, 0, 155, 258, 0, 156, 0, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 0, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 0, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 0, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 87, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	90, 91, 409, 92, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 0, 99, 237, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 247, 248,
	0, 0, 132, 0, 129, 0, 0, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 254, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 0, 156, 0, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 408, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 87, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 90,
	91, 0, 92, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 0, 97, 232, 233, 98, 0, 0, 234,
	235, 236, 0, 99, 237, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 279,
	111, 238, 112, 239, 240, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 241,
	118, 119, 242, 243, 0, 0, 0, 120, 121, 244,
	0, 122, 0, 123, 0, 0, 0, 0, 124, 245,
	0, 246, 0, 125, 126, 127, 128, 247, 248, 0,
	0, 132, 0, 129, 0, 0, 130, 249, 131, 250,
	251, 252, 0, 253, 0, 0, 133, 0, 134, 135,
	0, 137, 136, 0, 254, 0, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	0, 146, 147, 149, 148, 0, 0, 0, 256, 150,
	257, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 0, 156, 0, 259, 157, 158, 159, 160,
	0, 260, 161, 261, 162, 0, 163, 164, 165, 262,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 0, 180, 181, 263,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	0, 192, 183, 184, 193, 0, 194, 265, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	270, 271, 0, 0, 208, 272, 273, 0, 209, 210,
	211, 212, 87, 0, 213, 214, 215, 0, 216, 0,
	217, 218, 219, 274, 275, 0, 0, 220, 90, 91,
	0, 92, 221, 222, 223, 224, 225, 0, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	236, 0, 99, 237, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 0, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 1360, 248, 0, 0,
	132, 0, 129, 0, 0, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 254, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 0, 156, 0, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 162, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 272, 273, 0, 209, 210, 211,
	212, 87, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 274, 275, 0, 0, 220, 90, 91, 0,
	92, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	0, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 1358, 248, 0, 0, 132,
	0, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	87, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 274, 275, 0, 0, 220, 90, 91, 0, 92,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 0,
	99, 237, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 0, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 1347, 248, 0, 0, 132, 0,
	129, 0, 0, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 254, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 0,
	156, 0, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 0, 209, 210, 211, 212, 87,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 0, 0, 220, 90, 91, 0, 92, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 99,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 920, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 192, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 0, 209, 210, 211, 212, 87, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 0, 0, 220, 90, 91, 0, 92, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 0, 0, 234, 235, 236, 0, 99, 237,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 0,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 247, 248, 0, 0, 132, 0, 129, 0,
	0, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 254,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 0, 156, 0,
	259, 157, 158, 159, 160, 0, 260, 161, 261, 162,
	0, 163, 164, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 263, 182, 0, 423, 187, 188,
	189, 0, 264, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 270, 271, 0, 0, 208,
	272, 273, 0, 209, 210, 211, 212, 87, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	0, 0, 220, 90, 91, 0, 92, 221, 222, 223,
	224, 225, 0, 782, 0, 0, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 0, 97, 232, 233,
	98, 0, 0, 234, 235, 236, 0, 99, 237, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 279, 111, 238, 112, 239, 240, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 0, 0,
	0, 120, 121, 244, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 247, 248, 0, 0, 132, 0, 129, 0, 0,
	130, 249, 131, 250, 251, 252, 0, 253, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 254, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 0, 146, 147, 149, 148, 0,
	0, 0, 256, 150, 257, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 0, 156, 0, 259,
	157, 158, 159, 160, 0, 260, 161, 261, 162, 0,
	163, 164, 165, 262, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 0, 0, 183, 184, 193, 0,
	194, 265, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 270, 271, 0, 0, 208, 272,
	273, 0, 209, 210, 211, 212, 87, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 274, 275, 0,
	0, 220, 90, 91, 0, 92, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 0, 99, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	613, 248, 0, 0, 132, 0, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	0, 209, 210, 211, 212, 87, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 90, 91, 0, 92, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	0, 234, 235, 236, 0, 99, 237, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 0, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 608,
	248, 0, 0, 132, 0, 129, 0, 0, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 0, 133, 0,
	134, 135, 0, 137, 136, 0, 254, 0, 138, 0,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 0, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 0, 156, 0, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 0, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 0, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 0, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 87, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	90, 91, 0, 92, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 563, 0, 99, 237, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 247, 248,
	0, 0, 132, 0, 129, 0, 0, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 254, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	435, 0, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 0, 156, 0, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	434, 270, 271, 0, 0, 430, 272, 273, 0, 209,
	210, 211, 212, 87, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 90,
	91, 0, 92, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 0, 97, 232, 233, 98, 0, 0, 234,
	235, 236, 0, 99, 237, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 279,
	111, 238, 112, 239, 240, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 241,
	118, 119, 242, 243, 0, 0, 0, 120, 121, 244,
	0, 122, 0, 123, 0, 0, 0, 0, 124, 245,
	0, 246, 0, 125, 126, 127, 128, 247, 248, 0,
	0, 132, 0, 129, 0, 0, 130, 249, 131, 250,
	251, 252, 0, 253, 0, 0, 133, 0, 134, 135,
	0, 137, 136, 0, 254, 0, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 435,
	0, 146, 147, 149, 148, 0, 0, 0, 256, 150,
	257, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 0, 156, 0, 259, 157, 158, 159, 160,
	0, 260, 161, 261, 162, 0, 163, 164, 165, 262,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 0, 180, 181, 263,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	0, 192, 183, 184, 193, 0, 194, 265, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 434,
	270, 271, 0, 0, 430, 272, 273, 0, 209, 210,
	211, 212, 87, 0, 213, 214, 215, 0, 216, 0,
	217, 218, 219, 274, 275, 0, 0, 220, 90, 91,
	0, 92, 221, 222, 223, 224, 225, 0, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	236, 0, 99, 237, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 0, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 541, 248, 0, 0,
	132, 0, 129, 0, 0, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 254, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 0, 156, 0, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 162, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 272, 273, 0, 209, 210, 211,
	212, 87, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 274, 275, 0, 0, 220, 90, 91, 0,
	92, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	0, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 538, 248, 0, 0, 132,
	0, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	87, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 274, 275, 0, 0, 220, 90, 91, 0, 92,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 0,
	99, 237, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 0, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 535, 248, 0, 0, 132, 0,
	129, 0, 0, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 254, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 0,
	156, 0, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 0, 209, 210, 211, 212, 87,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 0, 0, 220, 90, 91, 0, 92, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 99,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 533, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 192, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 0, 209, 210, 211, 212, 87, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 0, 0, 220, 90, 91, 0, 92, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 0, 0, 234, 235, 236, 0, 99, 237,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 0,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 507, 248, 0, 0, 132, 0, 129, 0,
	0, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 254,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 0, 156, 0,
	259, 157, 158, 159, 160, 0, 260, 161, 261, 162,
	0, 163, 164, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 270, 271, 0, 0, 208,
	272, 273, 0, 209, 210, 211, 212, 87, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	0, 0, 220, 90, 91, 0, 92, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 0, 97, 232, 233,
	98, 0, 0, 234, 235, 236, 0, 99, 237, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 279, 111, 238, 112, 239, 240, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 0, 0,
	0, 120, 121, 244, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 247, 248, 0, 0, 132, 0, 129, 0, 0,
	130, 249, 131, 250, 251, 252, 0, 253, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 254, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 0, 146, 147, 149, 148, 0,
	0, 0, 256, 150, 257, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 0, 156, 0, 259,
	157, 158, 159, 160, 0, 260, 161, 261, 162, 0,
	163, 164, 165, 262, 488, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 0, 192, 183, 184, 193, 0,
	194, 265, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 270, 271, 0, 0, 208, 272,
	273, 0, 209, 210, 211, 212, 87, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 274, 275, 0,
	0, 220, 90, 91, 0, 92, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 0, 428, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 0, 0, 132, 0, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 426, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 435, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 429, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 427, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 434, 270, 271, 0, 0, 430, 272, 273,
	0, 209, 210, 211, 212, 87, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 90, 91, 0, 92, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	0, 234, 235, 236, 0, 99, 237, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 0, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 247,
	248, 0, 0, 132, 0, 129, 0, 0, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 0, 133, 0,
	134, 135, 0, 137, 136, 0, 254, 0, 138, 0,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 0, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 0, 156, 0, 259, 157, 158,
	0, 160, 0, 260, 161, 261, 162, 0, 163, 0,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 0, 180,
	181, 263, 0, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 0, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 0, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	0, 0, 0, 0, 221, 222, 223, 224, 944, 945,
	0, 964, 965, 966, 974, 975, 976, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 947, 0, 0, 978, 0, 0, 0, 0, 0,
	944, 945, 0, 964, 965, 966, 974, 975, 976, 0,
	0, 0, 0, 0, 946, 0, 967, 0, 0, 0,
	961, 0, 0, 947, 944, 945, 978, 964, 965, 966,
	974, 975, 976, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 946, 947, 0, 0,
	978, 0, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 952,
	946, 0, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 971, 979,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 952, 0, 0, 977, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 0, 0, 0,
	971, 979, 962, 0, 0, 952, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 0, 971, 979, 0, 968, 969, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	977, 0, 1517, 1518, 0, 1535, 1536, 1537, 0, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 962, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1532, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 1523, 0, 970, 0, 0, 958, 959,
	960, 973, 0, 957, 955, 956, 948, 949, 950, 951,
	953, 954, 0, 1539, 0, 0, 0, 0, 0, 1509,
	0, 0, 0, 0, 0, 0, 0, 970, 1538, 0,
	958, 959, 960, 973, 0, 957, 955, 956, 948, 949,
	950, 951, 953, 954, 0, 0, 1533, 0, 2032, 0,
	0, 970, 0, 0, 958, 959, 960, 973, 0, 957,
	955, 956, 948, 949, 950, 951, 953, 954, 0, 0,
	944, 945, 2030, 964, 965, 966, 974, 975, 976, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 947, 944, 945, 978, 964, 965, 966,
	974, 975, 976, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 1534, 0, 946, 947, 0, 0,
	978, 0, 961, 0, 0, 0, 944, 945, 0, 964,
	965, 966, 974, 975, 976, 0, 0, 0, 0, 0,
	946, 0, 967, 0, 0, 0, 961, 0, 0, 947,
	0, 0, 978, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 952, 946, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 979, 1529, 1530, 1531, 952, 0, 1528, 1526, 1527,
	1519, 1520, 1521, 1522, 1524, 1525, 977, 0, 0, 0,
	0, 0, 0, 0, 971, 979, 0, 0, 969, 0,
	0, 0, 0, 0, 962, 0, 0, 952, 0, 0,
	977, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 0, 971, 979, 962, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 969, 0, 0, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 970, 0, 0,
	958, 959, 960, 973, 0, 957, 955, 956, 948, 949,
	950, 951, 953, 954, 0, 0, 0, 0, 1975, 0,
	0, 970, 0, 0, 958, 959, 960, 973, 0, 957,
	955, 956, 948, 949, 950, 951, 953, 954, 0, 0,
	0, 0, 1970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 0, 0, 958, 959, 960, 973,
	0, 957, 955, 956, 948, 949, 950, 951, 953, 954,
	0, 0, 944, 945, 1966, 964, 965, 966, 974, 975,
	976, 0, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 947, 944, 945, 978, 964,
	965, 966, 974, 975, 976, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 946, 947,
	0, 0, 978, 0, 961, 0, 0, 0, 944, 945,
	0, 964, 965, 966, 974, 975, 976, 0, 0, 0,
	0, 0, 946, 0, 967, 0, 0, 0, 961, 0,
	0, 947, 0, 0, 978, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 952, 946, 0, 0, 0, 0, 0,
	961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 979, 0, 0, 0, 952, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 977, 0,
	0, 0, 0, 0, 0, 0, 971, 979, 0, 0,
	969, 0, 0, 0, 0, 0, 962, 0, 0, 952,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 0, 971, 979,
	962, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 977, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 969, 0, 0, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 970,
	0, 0, 958, 959, 960, 973, 0, 957, 955, 956,
	948, 949, 950, 951, 953, 954, 0, 0, 0, 0,
	1906, 0, 0, 970, 0, 0, 958, 959, 960, 973,
	0, 957, 955, 956, 948, 949, 950, 951, 953, 954,
	0, 0, 0, 0, 1884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 958, 959,
	960, 973, 0, 957, 955, 956, 948, 949, 950, 951,
	953, 954, 0, 0, 944, 945, 1883, 964, 965, 966,
	974, 975, 976, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 947, 944, 945,
	978, 964, 965, 966, 974, 975, 976, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	946, 947, 0, 0, 978, 0, 961, 0, 0, 0,
	944, 945, 0, 964, 965, 966, 974, 975, 976, 0,
	0, 0, 0, 0, 946, 0, 967, 0, 0, 0,
	961, 0, 0, 947, 0, 0, 978, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 952, 946, 0, 0, 0,
	0, 0, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 979, 0, 0, 0, 952,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	977, 0, 0, 0, 0, 0, 0, 0, 971, 979,
	0, 0, 969, 0, 0, 0, 0, 0, 962, 0,
	0, 952, 0, 0, 977, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 0, 0, 0,
	971, 979, 962, 968, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 969, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 970, 0, 0, 958, 959, 960, 973, 0, 957,
	955, 956, 948, 949, 950, 951, 953, 954, 0, 0,
	0, 0, 1774, 0, 0, 970, 0, 0, 958, 959,
	960, 973, 0, 957, 955, 956, 948, 949, 950, 951,
	953, 954, 0, 0, 0, 0, 1708, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	958, 959, 960, 973, 0, 957, 955, 956, 948, 949,
	950, 951, 953, 954, 0, 0, 944, 945, 1692, 964,
	965, 966, 974, 975, 976, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 947,
	944, 945, 978, 964, 965, 966, 974, 975, 976, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 946, 947, 0, 0, 978, 0, 961, 0,
	0, 0, 944, 945, 0, 964, 965, 966, 974, 975,
	976, 0, 0, 0, 0, 0, 946, 0, 967, 0,
	0, 0, 961, 0, 0, 947, 0, 0, 978, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 952, 946, 0,
	0, 0, 0, 0, 961, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 979, 0, 0,
	0, 952, 2115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	971, 979, 0, 0, 969, 0, 0, 0, 0, 0,
	962, 0, 0, 952, 0, 1549, 977, 0, 1548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 971, 979, 962, 968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 977, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	969, 0, 0, 0, 0, 0, 962, 0, 0, 0,
	0, 0, 0, 2114, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 963, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 970, 0, 0, 958, 959, 960, 973,
	0, 957, 955, 956, 948, 949, 950, 951, 953, 954,
	0, 0, 0, 0, 1268, 0, 0, 970, 0, 0,
	958, 959, 960, 973, 0, 957, 955, 956, 948, 949,
	950, 951, 953, 954, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 958, 959, 960, 973, 0, 957, 955, 956,
	948, 949, 950, 951, 953, 954, 944, 945, 0, 964,
	965, 966, 974, 975, 976, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 982, 0, 0, 1183, 0, 947,
	944, 945, 978, 964, 965, 966, 974, 975, 976, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	981, 0, 946, 947, 0, 0, 978, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 946, 0, 0, 0,
	0, 0, 961, 0, 0, 0, 1184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 952, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 979, 0, 0,
	0, 952, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	971, 979, 0, 0, 969, 0, 0, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 962, 968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 944, 945, 0, 964, 965, 966, 974,
	975, 976, 972, 0, 0, 0, 0, 0, 0, 967,
	0, 0, 963, 0, 0, 0, 947, 0, 0, 978,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 946,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 0, 0, 958, 959, 960, 973,
	0, 957, 955, 956, 948, 949, 950, 951, 953, 954,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	958, 959, 960, 973, 952, 957, 955, 956, 948, 949,
	950, 951, 953, 954, 944, 945, 0, 964, 965, 966,
	974, 975, 976, 971, 979, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 947, 0, 977,
	978, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 962, 0, 0,
	946, 0, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 968, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 952, 0, 0, 1517, 1518,
	0, 1535, 1536, 1537, 0, 963, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 979, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	977, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 962, 0,
	1532, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 958, 959, 960, 973, 0, 957, 955,
	956, 948, 949, 950, 951, 953, 954, 0, 0, 1523,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 944, 945, 0,
	964, 965, 966, 974, 975, 976, 0, 0, 0, 0,
	972, 0, 0, 967, 1538, 0, 0, 0, 0, 0,
	947, 944, 945, 978, 964, 965, 966, 974, 975, 976,
	0, 0, 1533, 1696, 0, 0, 0, 967, 0, 0,
	0, 1550, 0, 946, 947, 0, 0, 978, 0, 961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	0, 970, 0, 961, 958, 959, 960, 973, 0, 957,
	955, 956, 948, 949, 950, 951, 953, 954, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 952, 0,
	1534, 0, 0, 1555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 979, 0,
	0, 0, 952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 977, 0, 0, 0, 0, 0, 0,
	0, 971, 979, 0, 0, 969, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 0, 977, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 962, 968, 0, 1529, 1530,
	1531, 0, 0, 1528, 1526, 1527, 1519, 1520, 1521, 1522,
	1524, 1525, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 963,
	0, 0, 0, 0, 944, 945, 0, 964, 965, 966,
	974, 975, 976, 972, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 963, 0, 0, 0, 947, 0, 0,
	978, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 0, 0, 958, 959, 960,
	973, 0, 957, 955, 956, 948, 949, 950, 951, 953,
	954, 0, 0, 0, 0, 0, 0, 0, 970, 0,
	0, 958, 959, 960, 973, 952, 957, 955, 956, 948,
	949, 950, 951, 953, 954, 944, 945, 0, 964, 965,
	966, 974, 975, 976, 971, 979, 0, 0, 0, 0,
	0, 967, 0, 0, 0, 1508, 0, 0, 947, 0,
	977, 978, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 962, 0,
	0, 946, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 944, 945, 0,
	964, 965, 966, 974, 975, 976, 952, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 963, 0, 0, 0,
	947, 0, 0, 978, 0, 971, 979, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 977, 0, 946, 0, 0, 0, 0, 0, 961,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 958, 959, 960, 973, 952, 957,
	955, 956, 948, 949, 950, 951, 953, 954, 944, 945,
	0, 964, 965, 966, 974, 975, 976, 971, 979, 0,
	0, 0, 0, 0, 967, 0, 0, 963, 0, 0,
	0, 947, 0, 977, 978, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 962, 0, 0, 946, 0, 0, 0, 0, 0,
	961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 0, 0, 958, 959, 960, 973, 952,
	957, 955, 956, 948, 949, 950, 951, 953, 954, 963,
	0, 0, 0, 0, 0, 0, 0, 0, 971, 979,
	0, 944, 945, 972, 964, 965, 966, 974, 975, 976,
	0, 0, 0, 0, 977, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 947, 0, 969, 978, 0, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 0, 0, 958, 959, 960,
	973, 0, 957, 955, 956, 948, 949, 950, 951, 953,
	954, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 971, 979, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 958, 959,
	960, 973, 0, 957, 955, 956, 948, 949, 950, 951,
	953, 954, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 823, 815, 840, 808,
	831, 830, 0, 963, 810, 809, 0, 0, 0, 842,
	841, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 828, 827, 0, 0, 0, 0, 0,
	0, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 825,
	0, 0, 0, 0, 0, 0, 0, 0, 970, 0,
	0, 958, 959, 960, 973, 0, 957, 955, 956, 948,
	949, 950, 951, 953, 954, 0, 0, 818, 817, 819,
	820, 821, 0, 839, 0, 0, 0, 0, 823, 815,
	840, 808, 831, 830, 0, 0, 810, 809, 0, 0,
	0, 842, 841, 0, 0, 0, 0, 0, 812, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	829, 0, 0, 0, 816, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 828, 827, 0, 0, 0,
	0, 0, 0, 0, 826, 0, 0, 0, 0, 824,
	0, 0, 0, 1202, 1200, 1201, 1204, 1203, 0, 0,
	0, 825, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 813, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 822, 814, 818,
	817, 819, 820, 821, 0, 839, 0, 844, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 811, 0, 0,
	837, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	812, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 829, 0, 843, 0, 816, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 824, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 813,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 822,
	814, 0, 0, 0, 0, 0, 0, 0, 0, 844,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 811,
	0, 0, 837, 838, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 843,
}
var sqlPact = [...]int{

	2397, -1000, 64, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 793, 16233, 16233, 20169, -1000, -1000, -1000, -1000, -1000,
	-1000, 757, 785, 190, 5259, 20169, 20169, 19890, 1748, 1748,
	21564, -1000, -1000, 24912, -1000, 3431, 556, 564, 556, 556,
	563, 21564, 20169, 662, 773, 149, -1000, 996, 58, 24633,
	20169, 1463, 44, 18216, 376, 2397, 19611, 24354, 20169, 19332,
	639, 38, 16807, 20169, -1000, 67, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1295, 310, 67, -1000,
	1294, 1186, 1183, 18216, 24075, 23796, 23517, 23238, -1000, 12469,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 796, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 384, 381, -1000, 19053, -1000,
	1013, -1000, 42, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1012, -1000, 20169, -1000, -1000, 22959, 22680, 697, 379,
	971, -1000, -1000, 630, 479, 1455, -1000, 73, -1000, 1451,
	695, -1000, -1000, 1293, -1000, 1007, 1291, 1290, 1289, 1288,
	1283, 1282, 478, 900, 544, -1000, 1280, 971, -1000, 971,
	-1000, -1000, -1000, 624, 21564, -1000, -1000, 18216, -1000, 22401,
	20169, 20169, 1201, 22122, -1000, 996, -1000, -1000, -1000, 1043,
	1453, 1453, 1453, 1509, 214, 211, 149, 5, 20169, -1000,
	377, 5, 9369, 9369, -1000, -1000, 376, -1000, 422, 15372,
	-1000, 8421, -1000, 1091, 1347, 506, 886, 1346, -135, 845,
	843, 1339, 15954, 16807, 38, 32, -1000, -1000, -1000, 4956,
	15954, 680, 14535, 67, -1000, -1000, -1000, 18216, 20169, 20169,
	741, 21843, -1000, 1338, 115, 1337, -1000, 107, 1336, -1000,
	107, 1334, 62, -1000, -1000, -1000, -1000, -1000, -1000, 376,
	18774, 20169, 1578, 28871, -1000, 10634, -1000, -1000, 16233, 1806,
	16233, -1000, -1000, 1575, -1000, 20169, 10634, -1000, 26, 24,
	1115, 1132, 13066, 12774, 1382, 927, -1000, -1000, -1000, 72,
	5259, 693, 18495, 20169, 1299, 16233, 20169, 20169, 20169, 20169,
	20169, 20169, -1000, 1107, -1000, -1000, 20169, 20169, 791, -1000,
	16, 9, -1000, 21564, -1000, 117, -1000, 374, 1073, 491,
	191, 21285, 491, 1059, -1000, 1043, -1000, 1016, 1103, 9686,
	10634, 149, -1000, -1000, 149, 149, 10634, -1000, -1000, 20169,
	5, 1569, 20169, 80, -1000, 27370, -1000, -1000, 10634, 10634,
	10634, 10634, 10634, 953, 414, -1000, 373, 369, 6195, -1000,
	-1000, 1684, -1000, -1000, -1000, 228, -1000, -1000, 10634, 67,
	-1000, -1000, -1000, -1000, 368, 1722, -1000, 535, -1000, -1000,
	-1000, 483, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1247, 367, 363, -1000, -1000, -1000, -1000, 361, 360,
	359, 358, 357, 356, 355, 354, 351, 348, 346, 345,
	344, 340, 339, 889, -1000, 504, -1000, -1000, 504, 504,
	-1000, 334, 334, 335, -1000, -1000, -1000, -1000, 334, -1000,
	-1000, -1000, 468, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	337, 80, -1000, -1000, -1000, 20169, 60, -1000, 28337, -1000,
	-58, 819, -1000, 17658, 1531, 1512, 1394, 18216, 1524, 58,
	1279, 1522, 58, 1278, 623, 20169, 20169, 622, 618, 18216,
	444, -1000, -1000, -1000, -1000, -1000, 20169, -1000, -1000, -60,
	-1000, -1000, 1275, 56, -1000, -1000, 498, 87, 1568, 87,
	14814, -1000, 20169, 20169, -1000, 20169, -1000, -1000, 20169, -1000,
	20169, 20169, -1000, 20169, 178, 17100, 812, 1333, 833, 58,
	52, -1000, 1581, -1000, -1000, -1000, -1000, 98, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 335, 889, 334, 334, 334,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 468, -1000, -1000,
	504, 504, 504, -1000, -1000, 51, 28337, 617, -1000, 1274,
	553, -1000, 493, 43, 890, 1179, 941, -1000, -1000, -1000,
	-1000, -23, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1631, -1000, -1000, 1676, -23, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1719, 5259, -1000, -1000,
	-1000, -1000, -1000, -1000, 20169, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 20169, 20169, 890, 1179, -1000,
	-1000, 18216, 17379, 1566, 1331, 903, -1000, 1561, 20169, 1006,
	1057, -1000, 658, 1330, -1000, -1000, -1000, -1000, 28337, -1000,
	28337, 767, 1190, -1000, 1190, -35, -1000, 27346, -1000, 331,
	37, 498, 9369, 14240, 28759, 28871, 20169, 649, 10634, 10634,
	10634, 10634, 10634, 10634, 10634, 10634, 10634, 10634, 10634, 10634,
	10634, 10634, 10634, 10634, 10634, 10634, 10634, 10634, 10634, 10634,
	1169, 10634, 612, 10634, 10634, 10634, 10634, 1506, 913, 319,
	972, 5259, -1000, -1000, 1620, 1620, 1620, 212, 212, 285,
	414, -1000, 10634, -1000, 9053, 211, 26976, -52, -1000, -1000,
	-1000, 7144, 502, 28337, 67, 5878, -1000, 1673, 691, 1306,
	1229, 329, 198, 188, 10634, 10634, 10950, 10950, 10634, 11266,
	10634, 10634, 6511, 10634, 10634, 10634, 10634, 10634, 10634, -1000,
	328, -1000, -1000, -1000, -1000, 1672, -1000, -1000, 1654, -1000,
	647, 646, 1653, 498, 172, 8421, -1000, 812, 20169, 20169,
	20169, -1000, -1000, 1054, 21006, 1046, 28871, 20169, -1000, 325,
	324, 1154, 1143, 20169, 20169, 20727, 20448, 20169, 792, 58,
	-1000, 323, 58, -1000, 321, 20169, 841, -1000, 20169, 20169,
	836, 1213, 1021, -1000, 492, 15954, 677, 1271, 20169, 828,
	10634, 817, -1000, 13945, 512, 20169, 828, 69, -1000, -1000,
	-1000, 458, 20169, -1000, -1000, -1000, 115, -1000, 107, 107,
	-1000, -1000, 18216, -1000, -1000, -1000, -1000, -1000, -1000, 28871,
	413, 410, -1000, 1650, 605, -1000, 602, 598, 594, -1000,
	320, -1000, 10634, 20169, 20169, 1179, -1000, -1000, -1000, -1000,
	755, -1000, 880, -1000, 13358, -1000, -1000, -1000, -1000, -62,
	-1000, -1000, -1000, -1000, -1000, -1000, 168, 36, -56, 28871,
	-1000, -1000, -1000, -1000, -1000, 20169, 275, 20169, 58, 20169,
	-1000, 1718, 58, 20169, 1325, 1354, 453, 20169, -1000, -1000,
	-1000, 10634, -1000, -1000, -1000, 58, -1000, 1228, -1000, -98,
	2058, 1437, -167, 177, 463, -1000, 13650, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 477, 559, 559,
	666, 666, 666, 666, 1715, 1055, 2537, 758, 3325, 3325,
	3325, 2159, 226, 226, 3325, 3325, 3325, 212, 28448, 243,
	10634, 10634, 593, 912, 319, 243, 10634, 243, 243, 243,
	243, -1000, 1066, -1000, -1000, -1000, -1000, 1265, 318, 11266,
	11266, -1000, -1000, -1000, 6195, 11582, -1000, -1000, -1000, -1000,
	-1000, 317, 10634, -1000, 2911, -189, 31, -1000, -1000, 10634,
	30, -128, -1000, -1000, 705, -1000, 10634, -1000, -33, 10634,
	10634, 10634, 163, 160, -1000, 957, 311, 309, 10634, -1000,
	-1000, 28245, 25488, 159, 1264, -127, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 157, 155, 28134, -127, 154, 25682, -1000,
	11266, 11266, 11266, 6195, 308, 151, 27032, -127, 27931, 8737,
	8737, 8737, 146, 27907, 10634, -127, 3937, 3826, 3734, 18,
	17, 7, 1649, -3, 143, 473, 471, 142, 1228, -1000,
	-1000, -1000, -1000, 591, 590, 1324, -1000, 1045, -1000, 518,
	-1000, 774, 10634, 12190, 307, 306, 852, -1000, 1323, 992,
	1322, 992, -1000, -58, 810, -1000, 10634, -1000, 10634, -1000,
	588, -1000, -1000, 586, 492, 1255, 668, -1000, 988, -1000,
	-1000, 672, -1000, -1000, 6827, 28337, -1000, 828, 1398, -11,
	-1000, -1000, -1000, 498, 14814, 14240, 8421, -15, -1000, -1000,
	-1000, 812, -1000, 466, 1642, 141, 1086, 975, 906, 711,
	1635, 28337, -62, -62, -1000, -1000, -1000, -1000, -1000, 20169,
	1206, -1000, 17379, 301, 20169, 299, -1000, 298, -1000, -1000,
	292, 20169, 1133, 453, 16528, -1000, 491, -1000, 131, 1220,
	1466, -1000, 14240, 1176, 1171, 14240, 1200, 961, 961, 961,
	-1000, 291, 187, 463, 4336, 10634, 17937, 979, 91, 126,
	2058, 10634, 243, 243, 10634, 11266, 11266, -1000, 243, -1000,
	-1000, -1000, -1000, -1000, 1252, 286, 10634, 28871, 3896, 3712,
	-16, -1000, 8105, -69, -1000, 10634, -1000, 26660, -1000, -1000,
	392, 1351, -1000, 10634, 27684, 121, 7789, -1000, 27573, -38,
	-38, -1000, 1707, -1000, 15093, 499, 982, 26628, 28759, 28871,
	-1000, 10634, -1000, -1000, 1250, 10634, -1000, 28759, 28871, 11266,
	11266, 11266, 11266, 11266, 11266, 11266, 11266, 11266, 11266, 11266,
	11266, 11266, 11266, 11266, 11266, 11266, 11266, 11266, 1126, 11266,
	1616, 1616, 1616, -70, 7473, -1000, 1239, 1250, 10634, 10634,
	28871, 114, 112, 109, -1000, 10634, -127, 10634, 10634, 10634,
	-1000, -1000, -1000, 108, -1000, 1628, -1000, -1000, -1000, -1000,
	1220, 20169, 20169, 20169, 1319, -1000, 1063, -1000, 26604, -21,
	-1000, 336, 1440, 10634, -1000, -1000, 284, 12190, 20169, -1000,
	1161, 1244, 538, 20169, -1000, 20169, -1000, 20169, 20169, 20169,
	-25, -27, 20169, 20169, -1000, 15954, 637, 283, -1000, -80,
	-1000, -1000, 253, 58, 828, -1000, -81, -1000, 455, -1000,
	405, 398, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	106, -1000, -1000, 1208, -1000, 12190, 280, 20169, 17379, 1551,
	12190, 1004, 1138, 453, 16528, -1000, 658, -1000, 496, 10634,
	10634, 2058, 14240, 14240, 1039, 1157, 14240, -1000, -1000, -1000,
	-1000, 395, 391, 390, 12469, 17937, -1000, 1625, 1144, -34,
	-1000, -1000, 20169, 279, -1000, 463, 1590, 243, 2584, 145,
	10634, 28871, 28571, -43, 10634, 10634, -1000, -45, -1000, 10634,
	389, 28337, -1000, -1000, -1000, 28337, 10634, 1688, 10634, 105,
	102, 101, -1000, -1000, -1000, 25191, 10634, 100, -1000, 94,
	92, 28337, 1239, 28337, -1000, -1000, 467, 467, 722, 722,
	722, 722, 1616, 189, 2075, 2236, 2210, 2210, 2210, 267,
	441, 441, 2210, 2210, 2210, 1245, 1122, 276, 27788, 10634,
	-61, -1000, -1000, -1000, 28337, 28337, 90, -1000, -1000, -1000,
	-127, 2973, 26288, 26256, -1000, 89, 496, -1000, -1000, -1000,
	20169, -1000, 20169, -1000, 20169, 20169, 1236, 1034, -1000, -1000,
	1142, 274, 11266, 20169, -1000, 904, 12190, 1457, 67, 20169,
	1457, 26232, 5878, -65, -71, 1031, -1000, 1030, 10634, -1000,
	28871, 992, 992, -1000, 583, 571, 570, 546, -1000, -1000,
	-99, 15675, 1705, 1359, 20169, 1390, -1000, -1000, 273, -1000,
	-1000, -1000, 949, -84, 12190, -88, 88, 58, -89, 20169,
	-1000, 453, 16528, -1000, 1354, -1000, 20169, 28337, -127, -1000,
	1039, -1000, 272, 10634, 14240, -1000, -167, -1000, -97, -1000,
	463, -111, -1000, 388, -187, -1000, 445, -1000, 463, 271,
	20169, 17937, 10634, 10634, 28571, -112, -1000, 243, 243, -1000,
	25916, -1000, 28337, -1000, 27573, -1000, -1000, -1000, 944, -1000,
	25884, -1000, -1000, -1000, -1000, 11266, 1242, 270, 28871, 25860,
	-1000, -1000, 10634, -1000, -1000, -1000, -1000, -1000, 954, -1000,
	-1000, 20169, 1042, -1000, -1000, 10634, 27788, 269, 1206, 266,
	-1000, -1000, -1000, -1000, -1000, -1000, 1440, -33, -1000, 856,
	-1000, -1000, 28337, 1435, -1000, -1000, 20169, 20169, 264, 252,
	-1000, 248, 67, -113, -1000, 437, 634, -119, 20169, -1000,
	-1000, 5562, 20169, 904, -123, -1000, 1206, -1000, 904, 245,
	16528, -1000, 1133, -110, -1000, 1536, -1000, 20169, 28337, -1000,
	463, -1000, 1614, 17937, 178, -1000, 1144, -1000, 4650, 17937,
	20169, -137, -1000, 243, 243, -1000, -1000, 85, 982, 1464,
	-1000, 3876, 11266, 28871, -138, -1000, 25544, -1000, -1000, 1318,
	25520, 1089, 20169, -1000, 20169, 1457, 82, 20169, 520, 20169,
	-1000, -1000, 10634, 10634, 10634, 1705, -1000, -1000, 1691, 731,
	-1000, 498, -1000, 224, 1206, 904, -1000, 1206, 12190, -1000,
	1138, 20169, 223, -142, 17937, -1000, -1000, 387, -1000, -1000,
	1612, -1000, -144, -1000, -1000, 783, 10634, 3876, -148, -1000,
	-1000, 1311, -1000, 991, 870, 78, -152, -1000, -1000, 191,
	-1000, 10634, -1000, -154, -159, -38, -1000, -1000, 14814, -1000,
	20169, -1000, 1206, -1000, -161, -1000, -1000, -1000, -1000, -1000,
	463, 268, -1000, 77, 10318, 10318, -127, -1000, 20169, -1000,
	997, 993, 765, -1000, -1000, -1000, -1000, -1000, 1089, 28337,
	-1000, -1000, 76, -149, -178, -1000, 904, 17937, -1000, -1000,
	-1000, -1000, 11887, 986, 756, 27000, -1000, -1000, -1000, 1363,
	-1000, 526, 1121, 1121, 991, 1688, -1000, 983, 1206, -1000,
	1586, -1000, -1000, -1000, -1000, -1000, -1000, 1597, -1000, -1000,
	1128, -1000, -1000, -1000, -1000, -1000, -1000, 10002, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1962, 1961, 1492, 1633, 1960, 1958, 1628, 1949, 1948,
	1947, 1944, 1942, 1940, 102, 1613, 1602, 42, 1586, 1936,
	98, 1935, 1934, 1931, 99, 1929, 1928, 1927, 1926, 92,
	1923, 1921, 1579, 1564, 1561, 1501, 1920, 1919, 87, 1918,
	19, 1917, 70, 1916, 43, 129, 2165, 122, 1915, 1914,
	1907, 25, 96, 71, 1904, 119, 1903, 1899, 58, 37,
	27, 21, 1897, 123, 126, 1667, 38, 1894, 1893, 130,
	1892, 28, 39, 252, 140, 138, 128, 115, 1891, 1889,
	1888, 1887, 48, 1886, 2, 1884, 1882, 13, 65, 14,
	1880, 36, 20, 1878, 1877, 117, 1875, 73, 94, 1468,
	31, 121, 107, 1868, 74, 12, 69, 1859, 1852, 118,
	47, 1848, 40, 77, 125, 1844, 55, 148, 68, 33,
	72, 97, 1839, 1838, 1836, 81, 1835, 101, 90, 1833,
	1824, 75, 1822, 124, 127, 1821, 1820, 113, 1819, 1817,
	136, 149, 1814, 1813, 145, 1810, 11, 51, 67, 6,
	1489, 1457, 105, 62, 26, 22, 1808, 2227, 832, 808,
	44, 79, 56, 46, 80, 52, 61, 134, 29, 1804,
	1801, 109, 1799, 1797, 1795, 1794, 1793, 84, 1792, 1790,
	83, 131, 15, 9, 16, 89, 50, 63, 86, 161,
	141, 106, 1788, 85, 114, 57, 64, 1787, 1786, 1122,
	111, 1785, 1781, 1780, 1031, 992, 698, 322, 1779, 1778,
	447, 351, 1776, 1775, 60, 1774, 142, 1772, 1769, 135,
	139, 23, 1768, 54, 49, 91, 1767, 95, 53, 0,
	2123, 327, 1766, 116, 76, 1765, 1764, 1763, 1761, 24,
	1, 10, 5, 7, 4, 32, 30, 1760, 1757, 120,
	34, 66, 1756, 143, 1754, 1753, 1752, 41, 1749, 17,
	1743, 18, 1742, 1739, 8, 3, 1736, 1735, 132, 1734,
	108, 1733, 1542, 1732, 137, 1731, 1728, 1594, 59, 82,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 53, 53, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 50, 50, 55, 55, 55, 57, 57, 54, 54,
	49, 49, 5, 5, 227, 227, 228, 228, 39, 39,
	43, 43, 40, 41, 41, 42, 42, 6, 6, 6,
	7, 7, 7, 7, 7, 7, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 101, 101, 100, 100, 103,
	103, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 195, 195, 194, 19,
	169, 169, 20, 20, 20, 20, 21, 126, 126, 22,
	22, 22, 22, 23, 28, 268, 268, 268, 272, 272,
	273, 273, 274, 274, 274, 274, 274, 274, 274, 270,
	270, 27, 31, 31, 31, 31, 31, 31, 145, 141,
	141, 143, 143, 143, 143, 64, 140, 140, 140, 140,
	142, 142, 142, 142, 220, 219, 219, 225, 225, 225,
	79, 79, 79, 79, 79, 80, 80, 80, 218, 218,
	218, 218, 226, 226, 226, 226, 226, 226, 81, 81,
	81, 224, 224, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 18,
	269, 269, 271, 271, 33, 33, 34, 34, 35, 35,
	35, 35, 10, 10, 11, 11, 82, 82, 83, 83,
	148, 148, 148, 148, 84, 84, 56, 56, 56, 147,
	237, 237, 238, 238, 238, 238, 238, 238, 239, 239,
	239, 239, 239, 239, 239, 235, 235, 236, 233, 233,
	234, 234, 234, 234, 275, 275, 146, 146, 87, 87,
	242, 242, 242, 242, 240, 240, 240, 240, 240, 243,
	241, 244, 244, 244, 244, 244, 181, 181, 181, 37,
	12, 62, 62, 13, 9, 9, 130, 130, 91, 91,
	186, 186, 186, 72, 72, 51, 51, 51, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 131,
	131, 132, 132, 25, 30, 36, 36, 36, 36, 36,
	277, 277, 68, 68, 68, 68, 69, 69, 144, 144,
	144, 144, 144, 63, 8, 8, 58, 58, 59, 59,
	60, 60, 61, 61, 278, 278, 24, 24, 24, 75,
	75, 137, 137, 137, 139, 139, 138, 138, 138, 116,
	116, 116, 38, 96, 96, 105, 105, 106, 106, 192,
	107, 107, 29, 29, 46, 46, 44, 44, 44, 44,
	44, 44, 45, 45, 47, 47, 47, 47, 47, 47,
	47, 250, 250, 250, 253, 253, 249, 251, 251, 252,
	252, 276, 276, 117, 117, 117, 86, 85, 85, 89,
	89, 88, 90, 90, 185, 114, 114, 114, 114, 133,
	134, 134, 135, 135, 136, 136, 113, 113, 165, 165,
	48, 48, 95, 95, 97, 97, 155, 155, 155, 156,
	156, 154, 154, 154, 154, 187, 187, 187, 187, 187,
	187, 187, 187, 266, 266, 266, 267, 267, 184, 184,
	188, 188, 188, 188, 188, 188, 182, 182, 182, 182,
	183, 183, 193, 193, 120, 120, 120, 120, 118, 118,
	119, 119, 189, 189, 189, 189, 115, 115, 190, 190,
	190, 149, 149, 196, 196, 196, 214, 214, 94, 94,
	94, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 198, 198, 198,
	198, 200, 200, 200, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 213, 213,
	213, 213, 213, 201, 201, 208, 208, 209, 209, 210,
	211, 202, 202, 203, 203, 204, 205, 212, 212, 212,
	212, 216, 216, 206, 206, 206, 206, 206, 207, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 128, 128, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 159, 159, 159,
	159, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 245, 245, 245, 245, 245, 245, 245, 247,
	247, 248, 248, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	254, 254, 255, 255, 257, 257, 258, 258, 259, 260,
	260, 260, 261, 262, 262, 256, 256, 263, 263, 263,
	264, 264, 265, 265, 265, 265, 265, 171, 171, 171,
	172, 172, 173, 179, 179, 179, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 70, 70, 70, 70, 70, 102, 102, 168,
	168, 166, 166, 166, 170, 170, 121, 121, 215, 215,
	215, 215, 215, 215, 215, 122, 122, 122, 129, 123,
	123, 124, 124, 124, 124, 124, 124, 162, 163, 125,
	125, 125, 164, 164, 174, 178, 178, 177, 176, 176,
	175, 175, 152, 152, 153, 153, 151, 150, 110, 110,
	109, 109, 108, 108, 279, 279, 180, 180, 111, 111,
	112, 104, 104, 191, 191, 191, 191, 98, 98, 77,
	77, 99, 99, 73, 73, 76, 76, 74, 74, 74,
	74, 92, 92, 93, 93, 71, 71, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 217, 217,
	217, 167, 65, 65, 65, 66, 66, 67, 67, 222,
	222, 222, 223, 223, 223, 223, 221, 221, 221, 221,
	221, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 6, 1, 1, 1, 3, 3, 0,
	2, 0, 2, 1, 3, 5, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 3, 6, 3, 4, 1, 5, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 4, 4, 4, 2, 2,
	4, 2, 4, 4, 4, 4, 4, 4, 4, 2,
	3, 4, 3, 3, 4, 4, 2, 5, 5, 2,
	2, 0, 2, 0, 6, 6, 5, 5, 4, 12,
	4, 12, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	5, 2, 0, 6, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 8, 11, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 6, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	2, 0, 8, 2, 0, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 1, 1, 8, 8, 1, 2, 4, 4,
	4, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 3, 3, 5, 1, 1,
	3, 2, 4, 4, 0, 7, 4, 6, 3, 1,
	5, 6, 9, 0, 2, 3, 1, 3, 2, 0,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 3, 4,
	0, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 6, 4, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, 23, 34, 223, 66, -8, -9, -10, -11, -12,
	-13, -252, 94, 102, 124, 205, 101, 87, 118, 226,
	233, -44, -46, 242, -145, 245, 35, 254, 60, 97,
	228, 221, 222, 279, 68, -250, -47, -45, 327, 302,
	308, 237, -48, 263, 294, 330, 263, 133, 80, 297,
	-268, -99, 263, 80, -74, -65, 320, 4, -229, -231,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 54,
	59, 60, 61, 63, 65, 66, 67, 70, 71, 78,
	79, 81, 83, 87, 89, 93, 94, 96, 101, 102,
	108, 109, 112, 114, 119, 124, 125, 126, 127, 134,
	137, 139, 132, 147, 149, 150, 153, 152, 157, 160,
	163, 165, 166, 167, 170, 168, 172, 173, 175, 174,
	180, 182, 183, 185, 188, 191, 194, 197, 198, 199,
	200, 203, 205, 207, 208, 209, 211, 212, 214, 215,
	216, 217, 218, 221, 219, 220, 222, 223, 224, 226,
	228, 229, 231, 243, 244, 255, 233, 234, 235, 236,
	239, 240, 242, 245, 247, 250, 253, 254, 256, 259,
	257, 252, 262, 264, 265, 266, 267, 268, 275, 279,
	280, 281, 282, 285, 286, 287, 289, 291, 292, 293,
	298, 303, 304, 305, 306, 28, 36, 37, 38, 39,
	41, 42, 45, 46, 50, 51, 52, 55, 82, 84,
	85, 100, 103, 104, 110, 120, 122, 128, 129, 138,
	140, 141, 142, 144, 155, 169, 179, 181, 192, 196,
	202, 204, 210, 230, 238, 248, 249, 258, 260, 270,
	271, 272, 276, 277, 294, 295, -268, -73, -65, 80,
	89, 137, 287, 286, 80, 133, 263, 297, -17, 327,
	-29, -7, -15, -4, -24, -38, -14, -32, -18, -33,
	-34, -35, -16, 23, -221, 4, -229, -231, -230, -232,
	57, 69, 117, 136, 130, 146, 148, 156, 158, 171,
	193, 195, 227, 246, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 43, 48, 49, 53, 56, 58, 64,
	68, 72, 73, 74, 75, 76, 77, 86, 88, 90,
	91, 92, 95, 97, 99, 105, 106, 107, 113, 115,
	116, 118, 121, 123, 131, 133, 135, 143, 145, 151,
	154, 159, 161, 162, 176, 177, 178, 184, 186, 187,
	189, 190, 201, 206, 213, 225, 237, 241, 251, 261,
	263, 269, 273, 274, 278, 283, 284, 288, 290, 296,
	297, 299, 300, 301, 302, -65, -65, -65, 205, 22,
	-272, 22, -273, -274, 68, 94, 118, 237, 137, 89,
	286, -272, -69, 233, -65, -141, 160, 240, 54, 230,
	275, -142, -140, -220, 270, 170, -100, -65, 4, 22,
	54, 241, 80, 59, 81, 119, 133, 134, 64, 65,
	150, 264, 270, 275, 68, 289, 266, -277, 275, 275,
	-277, -277, -68, 275, 273, -69, -220, -276, 263, 263,
	288, 297, -130, 80, 284, -45, -47, -46, -88, -89,
	283, 143, 99, 190, -44, -46, -250, -253, 211, -249,
	-65, -253, -85, -86, 22, 91, 331, -189, -73, 187,
	-112, 327, -3, -189, 128, -73, -76, 128, -73, -65,
	-189, 128, 273, 331, -99, -92, -65, -151, -150, 329,
	116, 116, 327, -109, -110, -150, -151, 116, 145, 145,
	-190, -189, -65, 128, -77, 128, -76, -101, 128, -100,
	-101, 128, -195, -194, -223, 4, -229, -231, -230, 294,
	263, 133, -169, 327, -126, 327, -65, 22, 186, 331,
	186, -65, -141, 52, -141, 243, 327, -143, -63, -64,
	147, 207, 273, 312, 116, 306, -81, 5, 86, -103,
	329, 54, 243, 116, -269, 186, 116, 116, 116, 116,
	116, 116, 306, 147, 207, 255, 263, 297, 116, -144,
	-63, -64, -144, 273, -69, -115, -189, -100, 128, -65,
	-100, 133, -65, 128, -88, -89, -114, -133, -134, 159,
	184, -117, 22, 91, -117, -117, 44, 328, 328, 331,
	-253, -93, 327, -104, -191, -157, 320, -159, 318, 319,
	313, 176, 307, -171, -161, -174, 100, 230, 327, -73,
	-160, 332, 9, -247, -46, 29, -172, -173, 48, -65,
	7, 8, 5, 6, -71, -198, -167, -207, 278, 105,
	178, -245, -246, 4, -229, -222, -199, -209, -203, -206,
	144, 57, 73, 76, 74, 77, 241, 288, 49, 28,
	103, 104, 196, 202, 260, 276, 277, 128, 179, 129,
	55, 120, 155, 93, 37, 39, 41, 42, 50, 51,
	82, 84, 85, 110, 138, 140, 141, 142, 181, 210,
	248, 258, 271, 272, 295, -230, -210, -211, -204, -205,
	-212, -104, -112, 320, -73, 327, -111, -180, -157, 86,
	-53, 219, -52, 21, 23, 94, 292, 100, 252, 267,
	234, 252, 267, 234, 219, 100, 332, 219, 219, 100,
	-227, -224, 9, -223, 5, -74, 331, -221, 320, -228,
	-227, 256, 328, -98, -73, -110, -190, -75, -73, -75,
	242, -65, 30, 100, -55, 331, 47, 224, 100, -55,
	331, 100, -55, 100, 328, 331, -189, 128, -76, 30,
	-168, -196, -197, -199, -208, -202, -206, -207, 40, 46,
	45, 268, 169, 238, 249, 38, 185, 139, 138, 140,
	141, 142, 248, 37, 210, 110, 93, 85, 84, 181,
	42, 41, -210, -211, -204, -205, 82, 271, 272, 144,
	39, 51, 50, 295, 258, -102, -157, -268, -274, -268,
	30, -140, -220, -102, 331, 331, 157, -80, 163, 175,
	125, -219, 86, -225, -218, -181, 9, 278, 105, 186,
	-224, 8, 319, -217, 7, 318, -219, 86, 71, -226,
	5, 4, -167, -181, 86, 160, -207, 329, -221, 244,
	-100, 22, -220, -271, 113, -268, -220, -220, -220, -220,
	-220, -65, 157, -220, -220, 263, 133, 331, 331, -69,
	-55, 331, 327, -87, 176, -251, 302, -87, 327, -66,
	128, -65, -251, 176, -114, -134, -133, -135, -157, 22,
	-157, -159, -45, -45, -45, -90, -185, -157, -249, 30,
	-92, -95, 331, 116, 10, 11, 56, 33, 318, 319,
	320, 321, 111, 322, 323, 316, 317, 315, 310, 311,
	312, 62, 164, 232, 13, 14, 15, 26, 189, 158,
	307, 130, 246, 313, 16, 17, 18, 146, 36, 131,
	-70, 30, 4, -78, -157, -157, -157, -157, -157, 195,
	-108, -152, 325, -46, 327, -46, -157, -102, 7, -46,
	-166, 325, -175, -157, -109, 327, 5, 327, 5, -254,
	303, 113, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 204,
	-216, 298, -216, -216, -200, 327, -200, -201, 327, -200,
	304, 308, 327, -95, -73, 331, 328, 331, 273, -131,
	64, 58, -147, 128, 58, -233, -65, 64, -234, 53,
	284, 206, 115, -131, 64, -131, 64, 64, -189, 33,
	-29, 116, 33, -29, 116, 273, -76, -65, 273, 273,
	-189, -193, 309, -65, -193, 331, 116, 328, 331, -149,
	300, -137, -29, 327, 86, 30, -137, -105, -106, -192,
	-107, -73, 327, -65, -65, -76, -77, -100, -101, -101,
	-17, -194, 100, -20, -29, -24, -38, -14, 328, 331,
	-94, 29, -127, 327, 305, 167, 83, 126, 166, -128,
	236, 328, 331, 273, 116, 275, 328, -64, -63, -79,
	209, 250, 220, 239, 331, 8, 7, 7, -221, -270,
	-65, -73, -76, -64, -63, -189, -82, -92, -83, -65,
	-148, -147, -235, -236, -233, 133, 284, 106, 30, 100,
	-62, 200, 30, 186, 176, -58, 265, 100, -136, 230,
	231, 331, -51, 31, 90, 327, 328, -149, -191, -97,
	-187, 325, -189, -73, -46, -188, 327, -214, -196, -213,
	215, 216, 214, 218, 217, -196, -100, 270, -157, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	158, 130, 246, 36, 131, -157, 273, -157, -157, -157,
	-157, 168, 176, 178, 278, 105, 285, 91, 182, -279,
	261, 32, -164, -46, 327, -179, 27, 251, 22, -221,
	-171, 230, 327, -152, -157, -153, -102, 328, 328, 331,
	-102, -170, 326, -166, -178, -177, 299, 328, -102, 296,
	22, 91, 320, 7, -127, -255, 108, 121, 327, 328,
	328, -157, -157, -121, -215, -102, 4, 305, 167, 83,
	126, 166, 236, -121, -122, -157, -102, -123, -158, -159,
	318, 319, 313, 327, 230, -124, -157, -102, -157, 43,
	154, 274, -125, -157, 116, -102, -157, -157, -157, -102,
	-102, -102, 327, 7, 7, 270, 270, 7, -149, 328,
	-180, -52, -73, -65, -65, 176, -147, 128, -57, 176,
	-196, -65, 327, 327, 149, 149, -65, -65, 128, -65,
	128, -65, -65, -53, 219, -29, 327, -29, 327, -65,
	219, -65, -73, 219, -39, 127, 182, -42, 302, -227,
	256, 116, -73, -116, 225, -157, -116, -139, 186, -98,
	294, -65, -116, -96, 331, 116, 312, -98, -55, -55,
	-55, -189, -196, 325, 325, 7, 273, 273, 273, 273,
	327, -157, -270, -270, -63, 282, 61, 209, -225, 331,
	328, 328, 331, -66, 133, -66, -29, -100, 5, -29,
	-73, 100, -59, 96, -278, 312, -65, -185, -20, -113,
	121, -193, 331, 69, -120, 148, 171, 117, 156, 227,
	136, 7, 102, -154, 332, 327, -184, 308, -46, -188,
	-187, 306, -157, -157, 273, -279, 261, -164, -157, 168,
	178, 278, 105, 285, 91, 182, 116, 327, -158, -158,
	-102, -161, 327, -102, 326, 335, 328, -157, 326, 326,
	331, -176, -177, 95, -157, -89, 331, -88, -157, -102,
	-102, 328, 328, -260, 194, 327, 327, -157, 30, 331,
	328, 116, 328, 328, -129, 201, 328, 10, 11, 318,
	319, 320, 321, 111, 322, 323, 316, 317, 315, 310,
	311, 312, 62, 164, 232, 13, 14, 15, 146, 131,
	-158, -158, -158, -102, 327, 328, -162, -163, 116, 113,
	30, -125, -125, -125, 328, 116, -102, 331, 331, 331,
	328, 328, 328, 7, 328, 331, 328, 306, 306, 328,
	-113, 273, 273, 100, 176, 291, -237, -234, -157, -91,
	-186, -65, -248, 327, -245, -246, -71, 327, 327, -50,
	94, 242, -132, 100, -55, 100, -55, 273, -131, 64,
	-102, -102, 273, 273, -42, 116, 262, 188, 256, -104,
	177, -116, 63, 328, -149, -106, -97, -180, 328, 326,
	7, 7, 328, 167, 126, 166, -128, 166, -128, -128,
	7, -65, -84, 132, -148, 327, -66, 327, 327, -87,
	327, -65, -60, 153, -278, -224, -251, 328, -165, 123,
	44, -187, 148, 148, -187, -120, 148, -118, 193, -118,
	-118, -266, 327, -17, 327, -184, -221, 325, 333, -102,
	-183, -182, 30, -65, 191, 328, -157, -157, -158, -158,
	116, 327, -157, -168, 26, 26, 328, -102, 328, 331,
	-153, -157, 328, -166, 97, -157, 269, 328, 296, -89,
	-89, -89, 5, -261, -65, 327, 300, -88, 328, -214,
	-196, -157, -162, -157, -214, -196, -158, -158, -158, -158,
	-158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
	-158, -158, -158, -158, -158, 91, 176, 182, -158, 331,
	-102, 328, -163, -162, -157, -157, -196, 328, 328, 328,
	-102, -157, -157, -157, 328, 7, -165, -65, -65, -147,
	100, -238, 64, -239, 56, 106, 68, 176, 178, 284,
	206, 53, 86, 213, 328, 328, 331, -72, -109, 56,
	-72, -157, 327, -91, -92, 176, 86, 176, 86, 79,
	280, -65, -65, -73, -65, -65, 328, 328, -65, -73,
	-228, 270, 327, -138, 327, 186, -29, -116, 312, 326,
	326, 328, 131, -91, 327, -92, -82, 30, -91, 186,
	-61, 152, -278, -224, -58, -257, 301, -157, -102, -187,
	-187, -119, 290, 186, 148, -187, 326, 328, -267, 7,
	326, -195, -183, 7, -156, -155, 114, 174, 328, -65,
	327, -184, 26, 26, -157, -168, 328, -157, -157, 328,
	-157, 326, -157, 5, -157, 328, 328, 328, -262, -65,
	-157, 328, 328, 328, -163, 116, 91, 182, 327, -157,
	328, 328, 331, 328, 328, 328, -257, -147, -65, -100,
	-65, 106, 128, 178, 149, 327, -158, -73, -146, -275,
	67, 259, -186, -51, -100, -51, 328, -102, 328, 328,
	178, 178, -157, -196, -55, -55, 273, 273, 273, 273,
	-160, -71, -65, -41, -40, 5, 92, -92, 64, -112,
	-46, 327, 197, 328, -91, 328, 328, -29, 328, -73,
	-278, -224, -59, -258, -259, -65, -119, 327, -157, -187,
	-154, 328, 331, -184, 328, 326, 331, 334, 312, -184,
	327, -92, -182, -157, -157, 328, 328, -89, -256, 199,
	328, -158, 116, 327, -168, 328, -157, -239, -66, 176,
	-157, -67, 327, -84, 327, -72, -89, 213, -54, 56,
	-65, -65, 327, 327, 327, 331, 328, -43, 312, 286,
	177, 328, -65, -65, -146, 328, -84, -146, 327, -224,
	-60, 331, 30, -92, -184, 7, -183, -17, -155, -221,
	325, -183, -92, 328, 328, -89, 44, -158, -168, 328,
	328, 100, 328, -242, 165, -65, -92, -51, 328, -73,
	-49, 290, -100, -102, -102, -102, -40, 5, 242, -149,
	327, -84, -146, -84, -91, -61, -259, -261, 328, -182,
	326, 7, 328, -263, 208, 231, -102, 328, 106, -240,
	-243, -241, 186, 117, 198, 247, 328, 328, -87, -157,
	328, 328, -89, -105, -92, -84, 328, -184, 326, 328,
	-264, -265, 36, 281, 71, -157, -264, -65, -241, 186,
	-243, 186, 286, 89, -242, 328, -149, 328, -146, -183,
	-265, 203, 112, 230, 203, 112, -244, 173, 224, 47,
	242, -244, -240, -56, 47, 224, -84, 26, 20, 178,
	86, -265,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 0, 0, 0, 0, 80, 81, 82, 83, 84,
	85, 0, 0, 430, 0, 0, 0, 0, 0, 0,
	0, 402, -2, 0, 157, 0, 351, 0, 351, 351,
	355, 0, 0, 432, 317, 429, -2, 440, 0, 0,
	0, 438, 416, 0, 0, -2, 0, 0, 0, 0,
	0, 135, 0, 962, 891, 897, 898, 922, 923, 924,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
	1122, 1123, 1124, 1125, 1126, 1127, 0, 0, 893, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 0, 229, 936, 937, 938, 939, 940,
	1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
	1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
	1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1219, 1220, 1221, 1222, 121, 128, 129, 1014, 131,
	0, 138, 139, 140, 142, 143, 144, 145, 146, 147,
	148, 0, 344, 1038, 357, 152, 991, 1043, 950, 1115,
	1060, 160, 170, 0, 1121, -2, 174, 97, 203, 204,
	0, 208, 209, 0, 211, 231, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 226, 0, 362, 350, 362,
	347, 348, 349, 352, 0, 343, 151, 0, 431, 0,
	0, 0, 0, 0, 316, -2, 412, 413, -2, 0,
	435, 435, 435, 0, 0, 413, 0, 421, 1018, 424,
	904, 422, 0, 0, 437, 436, 0, 417, 512, 0,
	460, 0, 2, 0, 1099, 512, 0, 1099, 896, 0,
	0, 1099, 0, 0, 136, 137, 901, 899, 900, 0,
	0, 0, 0, 894, 870, 868, 869, 0, 0, 0,
	0, 518, 87, 1099, 55, 1099, 889, 55, 1099, 95,
	55, 1099, 0, 116, 118, 932, 933, 934, 935, 1126,
	0, 0, 0, 0, 126, 0, 130, 132, 0, 0,
	0, 356, 153, 1088, 155, 0, 0, 159, 161, 162,
	0, 0, 0, 0, 0, 0, 173, 198, 199, 98,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 222, 223, 0, 0, 0, 345,
	358, 359, 346, 0, 354, 55, 516, 289, 1099, 428,
	289, 926, 428, 1099, -2, 0, 408, 447, 448, 0,
	0, 0, 433, 434, 0, 0, 0, 404, 405, 0,
	423, 0, 0, 463, 881, 885, 886, 615, 0, 0,
	0, 0, 0, 0, 707, 709, 1093, 1115, 0, 711,
	712, 0, 714, 716, 717, 0, 720, 721, 861, 893,
	907, 908, 909, 910, 0, 0, 913, 0, 915, 916,
	917, 761, 730, -2, -2, 905, 547, 548, 549, 550,
	-2, 1128, 734, 736, 738, 739, 740, 741, 0, 1077,
	1094, 1095, 1111, 1112, 1120, 1124, 1125, 1099, 1108, 1100,
	1089, 1097, 1106, 967, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 931, 577, 578, 583, 584,
	586, 463, 461, 513, 514, 0, 0, 878, 876, 877,
	32, 340, 34, 0, 340, 340, 0, 0, 0, 0,
	238, 0, 0, 240, 0, 0, 0, 0, 0, 0,
	503, 64, 65, 201, 202, 892, 0, 866, 867, 503,
	66, 77, 0, 0, 887, 871, 522, 0, 379, 0,
	0, 519, 0, 0, 89, 0, 53, 54, 0, 91,
	0, 0, 93, 0, 430, 0, 0, 1099, 0, 430,
	0, 819, 530, 531, 532, 533, 534, 612, 537, 538,
	539, 540, 541, 542, 543, 544, 545, 546, 554, 555,
	556, 557, 558, 559, 560, 574, 0, 553, 553, 553,
	566, 567, 575, 576, 581, 582, 593, 594, 596, 598,
	592, 592, 592, 589, 590, 0, 817, 0, 141, 0,
	0, 156, 0, 0, 0, 0, 0, 165, 185, 186,
	187, 166, 168, 175, 177, 178, 179, 188, 189, 190,
	191, 306, 0, 308, 918, 0, 167, 169, 171, 172,
	192, 193, 194, 195, 196, 197, 0, 0, 99, 207,
	205, 206, 210, 212, 0, 230, 213, 214, 215, 216,
	217, 218, 221, 224, 225, 0, 0, 0, 0, 353,
	309, 0, 247, 0, 0, 312, 427, 0, 0, 0,
	1099, 925, 367, 0, 411, 445, 446, 449, 452, 453,
	450, 615, 418, 419, 420, 441, 442, 327, 425, 0,
	0, 522, 0, 0, 0, 0, 0, 0, 796, 797,
	798, 799, 800, 801, 804, 805, 802, 803, 806, 807,
	808, 0, 0, 0, 809, 810, 811, 0, 0, 813,
	0, 815, 0, 0, 0, 0, 0, 0, 875, 0,
	0, 0, 884, 812, 620, 621, 622, 644, 645, 0,
	708, 872, 865, 710, 0, -2, 817, 0, 713, 718,
	719, 0, 0, 860, -2, 0, 912, 0, 612, 763,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 840,
	846, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	580, 591, 588, 587, 564, 0, 563, 561, 0, 565,
	0, 0, 0, 522, 0, 0, 880, 0, 0, 0,
	0, 339, 36, 1099, 0, 57, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	236, 0, 0, 237, 0, 0, 0, 895, 0, 0,
	0, 69, 0, 902, 76, 0, 0, 0, 0, 391,
	0, 391, 381, 0, 0, 0, 391, 394, 395, 397,
	398, 0, 0, 520, 88, 890, 55, 96, 55, 55,
	102, 117, 0, 119, 122, 123, 124, 125, 120, 0,
	523, 525, 535, 0, 599, 600, 601, 602, 603, 604,
	613, 127, 0, 0, 0, 0, 158, 163, 164, 363,
	0, 182, 0, 184, 0, 307, 920, 919, 100, 232,
	149, 227, 228, 360, 361, 517, 0, 0, 246, 901,
	248, 250, 251, 252, 253, 926, 0, 926, 0, 0,
	310, 0, 0, 0, 0, 369, 375, 0, 451, 454,
	455, 0, 444, 325, 326, 430, 903, 457, 882, 503,
	464, 0, 474, 512, 489, 479, 0, 616, 526, 527,
	568, 569, 570, 571, 572, 617, 618, 0, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, -2, -2,
	-2, 636, 637, 638, -2, -2, -2, 642, 643, -2,
	814, 816, 0, 875, 0, -2, 0, -2, -2, -2,
	-2, 656, 0, 658, 661, 663, 665, 0, 0, 0,
	0, 874, 675, 852, 0, 0, 793, 794, 795, 883,
	660, 0, 0, 873, 864, 0, 0, -2, 715, 0,
	0, 0, 823, 824, 859, 855, 0, 722, 440, 0,
	0, 0, 0, 0, 921, 771, 0, 0, 0, 735,
	737, 0, 0, 0, 0, 827, -2, -2, -2, -2,
	-2, -2, -2, 0, 0, 817, 837, 0, 0, 678,
	0, 0, 0, 0, 1115, 0, 817, 845, 0, 0,
	0, 0, 0, 817, 0, 851, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 457, 515,
	879, 35, 329, 0, 0, 0, 38, 1099, 46, 0,
	261, 0, 0, 0, 0, 0, 342, 47, 1099, 55,
	1099, 55, 48, 33, 340, 234, 0, 235, 0, 333,
	0, 328, 331, 0, 76, 0, 0, 63, 0, 67,
	78, 0, 888, 86, 0, 521, 376, 391, 0, 0,
	383, 380, 378, 522, 0, 0, 0, 0, 90, 92,
	94, 0, 820, 0, 0, 0, 0, 0, 0, 0,
	0, 818, 133, 134, 154, 180, 181, 183, 176, 0,
	255, 288, 0, 0, 926, 0, 244, 289, 311, 313,
	0, 0, 371, 375, 0, 374, 428, 443, 0, 459,
	0, 462, 0, 0, 0, 0, 0, 509, 509, 509,
	507, 483, 430, 489, 0, 0, 501, 0, -2, 479,
	0, 0, -2, -2, 0, 0, 0, 676, -2, 657,
	659, 662, 664, 666, 0, 0, 0, 0, 0, 0,
	0, 677, 0, 0, 862, 865, -2, 818, 821, 822,
	0, 0, 856, 0, 0, 0, 0, 439, 440, 440,
	440, 728, 0, 729, 0, 0, 0, 0, 0, 0,
	744, 0, 745, 746, 0, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	681, 682, 683, 0, 0, 748, 843, 844, 0, 0,
	0, 0, 0, 0, 753, 0, 850, 0, 0, 0,
	757, 758, 759, 0, 551, 0, 573, 595, 597, 585,
	459, 0, 0, 0, 0, 56, 259, 278, 0, 0,
	318, 324, 324, 0, 731, 732, 0, 0, 0, 40,
	0, 0, 0, 0, 44, 0, 50, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 79, 389,
	390, 377, 388, 0, 391, 396, 393, 399, 0, 528,
	0, 0, 536, 605, 606, 607, 608, 609, 610, 611,
	0, 150, 242, 0, 249, 0, 0, 0, 247, 0,
	0, 0, 373, 375, 0, 366, 367, 426, 765, 0,
	0, 465, 0, 0, 0, 0, 0, 504, 508, 505,
	506, 0, 0, 0, 0, 501, 471, 0, 0, 0,
	478, 500, 0, 499, 488, -2, 619, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 853, 0, 788, 0,
	0, 864, -2, 825, 854, 858, 0, 723, 0, 0,
	0, 0, 914, 769, 770, 774, 0, 0, 733, 0,
	0, 826, 836, 838, 679, 680, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, -2, -2, -2, 697,
	698, 699, -2, -2, -2, 0, 0, 0, 839, 0,
	0, 791, 841, 842, 847, 848, 0, 750, 751, 752,
	849, 0, 0, 0, 579, 0, 765, 335, 337, 37,
	0, 260, 0, 263, 0, 0, 0, 0, 269, 270,
	0, 0, 0, 0, 280, 287, 0, 327, 906, 0,
	327, 0, 0, 0, 0, 0, 52, 0, 0, 341,
	0, 55, 55, 330, 0, 0, 0, 0, 334, 332,
	68, 0, 0, 0, 0, 0, 382, 392, 0, 529,
	524, 614, 0, 0, 0, 0, 0, 0, 0, 0,
	364, 375, 0, 368, 369, 414, 0, 458, 456, 491,
	0, 493, 0, 0, 0, 495, 474, 484, 0, 486,
	489, 0, 476, 0, 0, 469, 0, 468, 489, 497,
	0, 0, 0, 0, -2, 0, 669, -2, -2, 787,
	818, 863, 857, 911, 440, 724, 726, 727, 776, 773,
	0, 760, 742, 743, 835, 0, 0, 0, 0, 818,
	790, 749, 0, 755, 756, 552, 415, 39, 0, 264,
	265, 926, 0, 268, 271, 0, 273, 928, 255, 0,
	284, 285, 319, 320, 323, 321, 324, 440, 282, 0,
	41, 42, 51, 59, 43, 49, 0, 0, 0, 0,
	502, 0, 0, 0, 73, 71, 0, 0, 0, 400,
	401, 0, 0, 287, 0, 277, 255, 245, 287, 0,
	0, 370, 371, 764, 766, 0, 492, 0, 511, 494,
	489, 485, 0, 501, 430, 472, 0, 473, 0, 501,
	0, 0, 480, -2, -2, 670, 789, 0, 440, 0,
	762, -2, 0, 0, 0, 792, 0, 262, 266, 0,
	0, 293, 0, 281, 0, 327, 0, 0, 61, 0,
	336, 338, 0, 0, 0, 0, 75, 72, 0, 0,
	385, 522, 387, 0, 255, 287, 243, 255, 0, 372,
	373, 0, 0, 0, 0, 487, 481, 0, 470, 466,
	0, 477, 0, 498, 725, 779, 0, -2, 0, 705,
	754, 0, 272, 298, 0, 0, 0, 322, 723, 289,
	45, 0, 58, 0, 0, 440, 74, 70, 0, 386,
	0, 275, 255, 314, 0, 365, 767, 768, 510, 475,
	489, 0, 496, 0, 0, 0, 775, 706, 0, 274,
	294, 295, 0, 290, 291, 292, 927, 286, 293, 60,
	239, 241, 0, 522, 0, 276, 287, 501, 467, 772,
	777, 780, -2, 1063, 959, 0, 778, 267, 296, 0,
	297, 0, 0, 0, 298, 0, 384, 258, 255, 482,
	0, 782, 783, 784, 785, 786, 299, 0, 302, 303,
	0, 300, 283, 254, 256, 257, 315, 0, 301, 304,
	305, 781,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 316, 3, 322, 317, 3,
	327, 328, 320, 318, 331, 319, 329, 321, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 335, 330,
	310, 312, 311, 3, 332, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 325, 3, 326, 323, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 333, 315, 334, 313,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 314, 57653, 324, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:779
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:785
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:791
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:910
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:920
		{
			return unimplemented(sqllex)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = nil
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = DropCascade
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = DropRestrict
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = DropDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:982
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:983
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return unimplemented(sqllex)
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:987
		{
		}
	case 62:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.str = ""
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1060
		{
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{ /* SKIP DOC */
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1386
		{
			return unimplemented(sqllex)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1400
		{ /* SKIP DOC */
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			return unimplemented(sqllex)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			return unimplemented(sqllex)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = Low
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = Normal
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = High
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			return unimplemented(sqllex)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			return unimplemented(sqllex)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1580
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1608
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1656
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1660
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1684
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1688
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1731
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1735
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1741
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1745
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1749
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1753
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1828
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = DropDefault
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1838
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2043
		{
			return unimplemented(sqllex)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2044
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			return unimplemented(sqllex)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2046
		{
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2053
		{
			return unimplemented(sqllex)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2054
		{
			return unimplemented(sqllex)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2055
		{
			return unimplemented(sqllex)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2056
		{
			return unimplemented(sqllex)
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2057
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2060
		{
			return unimplemented(sqllex)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2063
		{
			return unimplemented(sqllex)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2066
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2067
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			return unimplemented(sqllex)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2069
		{
			return unimplemented(sqllex)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2070
		{
			return unimplemented(sqllex)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = true
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = false
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2177
		{
			return unimplemented(sqllex)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2178
		{
			return unimplemented(sqllex)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			return unimplemented(sqllex)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2182
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = Ascending
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = Descending
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2236
		{
			return unimplemented(sqllex)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2237
		{
			return unimplemented(sqllex)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = true
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = false
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2250
		{
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2251
		{
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2293
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2294
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.str = ""
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.str = ""
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.str = ""
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.str = ""
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.str = ""
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.str = ""
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2416
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2417
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2481
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2485
		{
			return unimplemented(sqllex)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2493
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 392:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2515
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2516
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2743
		{
			return unimplemented(sqllex)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2744
		{
			return unimplemented(sqllex)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2745
		{
			return unimplemented(sqllex)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2748
		{
			return unimplemented(sqllex)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2749
		{
			return unimplemented(sqllex)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2752
		{
			return unimplemented(sqllex)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2755
		{
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2756
		{
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2759
		{
			return unimplemented(sqllex)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2760
		{
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2763
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2764
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = true
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = false
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = false
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = true
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2787
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2788
		{
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2846
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2888
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &From{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2982
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3000
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3027
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3044
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = nil
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3105
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3111
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = true
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = false
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.str = astFullJoin
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.str = astLeftJoin
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.str = astRightJoin
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.str = astInnerJoin
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3222
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3223
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3309
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3322
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3323
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3337
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3346
		{
			return unimplemented(sqllex)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3414
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = nil
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3463
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3559
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3591
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3631
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = year
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = month
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = day
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = hour
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = minute
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = month
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = hour
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = minute
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = minute
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = nil
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = second
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3726
		{
			return unimplemented(sqllex)
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3761
		{
			return unimplemented(sqllex)
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3929
		{
			return unimplemented(sqllex)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3995
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4168
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4221
		{
			return unimplemented(sqllex)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4222
		{
			return unimplemented(sqllex)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4245
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4261
		{
			return unimplemented(sqllex)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4262
		{
			return unimplemented(sqllex)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4266
		{
			return unimplemented(sqllex)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4283
		{
			return unimplemented(sqllex)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4284
		{
			return unimplemented(sqllex)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4285
		{
			return unimplemented(sqllex)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4286
		{
			return unimplemented(sqllex)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4315
		{
			return unimplemented(sqllex)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4359
		{
			return unimplemented(sqllex)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4360
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = Window(nil)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4395
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.str = ""
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4457
		{
			return unimplemented(sqllex)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4458
		{
			return unimplemented(sqllex)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4459
		{
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4462
		{
			return unimplemented(sqllex)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4463
		{
			return unimplemented(sqllex)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4469
		{
			return unimplemented(sqllex)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4470
		{
			return unimplemented(sqllex)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4471
		{
			return unimplemented(sqllex)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4472
		{
			return unimplemented(sqllex)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4473
		{
			return unimplemented(sqllex)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = Any
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = Some
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = All
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = Plus
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = Minus
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = Mult
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = Div
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = FloorDiv
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = Mod
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = Bitand
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = Bitor
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = Pow
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = Bitxor
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = LT
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = GT
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = EQ
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = LE
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = GE
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = NE
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = Like
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = NotLike
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = ILike
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = NotILike
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4584
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4837
		{
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4838
		{
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4956
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5000
		{
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5036
		{
			return unimplemented(sqllex)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 914:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = DNull
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5075
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.str = ""
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 928:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
