// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:308
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LC_CTYPE = 57490
const LC_COLLATE = 57491
const LEADING = 57492
const LEAST = 57493
const LEFT = 57494
const LEVEL = 57495
const LIKE = 57496
const LIMIT = 57497
const LOCAL = 57498
const LOCALTIME = 57499
const LOCALTIMESTAMP = 57500
const LOW = 57501
const LSHIFT = 57502
const MATCH = 57503
const MINUTE = 57504
const MONTH = 57505
const NAME = 57506
const NAMES = 57507
const NATURAL = 57508
const NEXT = 57509
const NO = 57510
const NO_INDEX_JOIN = 57511
const NORMAL = 57512
const NOT = 57513
const NOTHING = 57514
const NULL = 57515
const NULLIF = 57516
const NULLS = 57517
const NUMERIC = 57518
const OF = 57519
const OFF = 57520
const OFFSET = 57521
const ON = 57522
const ONLY = 57523
const OR = 57524
const ORDER = 57525
const ORDINALITY = 57526
const OUT = 57527
const OUTER = 57528
const OVER = 57529
const OVERLAPS = 57530
const OVERLAY = 57531
const PARENT = 57532
const PARTIAL = 57533
const PARTITION = 57534
const PASSWORD = 57535
const PLACING = 57536
const POSITION = 57537
const PRECEDING = 57538
const PRECISION = 57539
const PREPARE = 57540
const PRIMARY = 57541
const PRIORITY = 57542
const RANGE = 57543
const READ = 57544
const REAL = 57545
const RECURSIVE = 57546
const REF = 57547
const REFERENCES = 57548
const RENAME = 57549
const REPEATABLE = 57550
const RELEASE = 57551
const RESTRICT = 57552
const RETURNING = 57553
const REVOKE = 57554
const RIGHT = 57555
const ROLLBACK = 57556
const ROLLUP = 57557
const ROW = 57558
const ROWS = 57559
const RSHIFT = 57560
const SAVEPOINT = 57561
const SEARCH = 57562
const SECOND = 57563
const SELECT = 57564
const SERIAL = 57565
const SERIALIZABLE = 57566
const SESSION = 57567
const SESSION_USER = 57568
const SET = 57569
const SHOW = 57570
const SIMILAR = 57571
const SIMPLE = 57572
const SMALLINT = 57573
const SMALLSERIAL = 57574
const SNAPSHOT = 57575
const SOME = 57576
const SPLIT = 57577
const SQL = 57578
const START = 57579
const STDIN = 57580
const STRICT = 57581
const STRING = 57582
const STORING = 57583
const SUBSTRING = 57584
const SYMMETRIC = 57585
const SYSTEM = 57586
const TABLE = 57587
const TABLES = 57588
const TEMPLATE = 57589
const TEXT = 57590
const THEN = 57591
const TIME = 57592
const TIMESTAMP = 57593
const TIMESTAMPTZ = 57594
const TO = 57595
const TRAILING = 57596
const TRANSACTION = 57597
const TREAT = 57598
const TRIM = 57599
const TRUE = 57600
const TRUNCATE = 57601
const TYPE = 57602
const UNBOUNDED = 57603
const UNCOMMITTED = 57604
const UNION = 57605
const UNIQUE = 57606
const UNKNOWN = 57607
const UPDATE = 57608
const UPSERT = 57609
const USER = 57610
const USERS = 57611
const USING = 57612
const VALID = 57613
const VALIDATE = 57614
const VALUE = 57615
const VALUES = 57616
const VARCHAR = 57617
const VARIADIC = 57618
const VIEW = 57619
const VARYING = 57620
const WHEN = 57621
const WHERE = 57622
const WINDOW = 57623
const WITH = 57624
const WITHIN = 57625
const WITHOUT = 57626
const YEAR = 57627
const ZONE = 57628
const NOT_LA = 57629
const WITH_LA = 57630
const AS_LA = 57631
const POSTFIXOP = 57632
const UMINUS = 57633

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5013

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	310, 27,
	-2, 395,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 368,
	180, 368,
	211, 368,
	308, 368,
	310, 368,
	-2, 378,
	-1, 59,
	1, 371,
	180, 371,
	211, 371,
	308, 371,
	310, 371,
	-2, 377,
	-1, 68,
	1, 27,
	310, 27,
	-2, 395,
	-1, 397,
	1, 177,
	310, 177,
	-2, 907,
	-1, 433,
	155, 405,
	179, 405,
	-2, 374,
	-1, 436,
	155, 404,
	179, 404,
	-2, 372,
	-1, 560,
	155, 404,
	179, 404,
	-2, 375,
	-1, 617,
	307, 843,
	-2, 836,
	-1, 618,
	307, 844,
	-2, 837,
	-1, 624,
	5, 542,
	307, 542,
	-2, 1001,
	-1, 648,
	5, 508,
	-2, 975,
	-1, 649,
	5, 536,
	307, 536,
	-2, 977,
	-1, 650,
	5, 516,
	-2, 978,
	-1, 651,
	5, 515,
	-2, 979,
	-1, 652,
	5, 536,
	307, 536,
	-2, 982,
	-1, 653,
	5, 536,
	307, 536,
	-2, 983,
	-1, 654,
	5, 537,
	-2, 986,
	-1, 655,
	5, 502,
	-2, 987,
	-1, 656,
	5, 502,
	-2, 988,
	-1, 657,
	5, 518,
	-2, 992,
	-1, 658,
	5, 503,
	-2, 997,
	-1, 659,
	5, 504,
	-2, 998,
	-1, 660,
	5, 505,
	-2, 999,
	-1, 661,
	5, 506,
	-2, 1000,
	-1, 662,
	5, 502,
	-2, 1004,
	-1, 663,
	5, 509,
	-2, 1009,
	-1, 664,
	5, 507,
	-2, 1012,
	-1, 665,
	5, 534,
	307, 534,
	-2, 1014,
	-1, 666,
	5, 538,
	-2, 1017,
	-1, 667,
	5, 540,
	-2, 1018,
	-1, 668,
	5, 533,
	307, 533,
	-2, 1022,
	-1, 921,
	97, 378,
	139, 378,
	155, 378,
	179, 378,
	183, 378,
	263, 378,
	-2, 655,
	-1, 929,
	307, 821,
	-2, 809,
	-1, 1134,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 577,
	-1, 1135,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 578,
	-1, 1136,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 579,
	-1, 1140,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 583,
	-1, 1141,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 584,
	-1, 1142,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 585,
	-1, 1145,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 590,
	-1, 1151,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 592,
	-1, 1154,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 597,
	-1, 1155,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 598,
	-1, 1156,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 599,
	-1, 1182,
	188, 727,
	-2, 730,
	-1, 1205,
	114, 743,
	307, 843,
	-2, 836,
	-1, 1206,
	114, 744,
	-2, 971,
	-1, 1207,
	114, 745,
	-2, 905,
	-1, 1208,
	114, 746,
	-2, 876,
	-1, 1209,
	114, 747,
	-2, 891,
	-1, 1210,
	114, 748,
	-2, 904,
	-1, 1211,
	114, 749,
	-2, 939,
	-1, 1362,
	97, 378,
	139, 378,
	155, 378,
	179, 378,
	183, 378,
	263, 378,
	-2, 443,
	-1, 1366,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 591,
	-1, 1367,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 593,
	-1, 1372,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 594,
	-1, 1391,
	188, 726,
	-2, 729,
	-1, 1561,
	1, 444,
	67, 444,
	97, 444,
	115, 444,
	119, 444,
	121, 444,
	133, 444,
	139, 444,
	144, 444,
	152, 444,
	155, 444,
	166, 444,
	179, 444,
	180, 444,
	183, 444,
	211, 444,
	213, 444,
	263, 444,
	270, 444,
	280, 444,
	281, 444,
	289, 444,
	308, 444,
	310, 444,
	311, 444,
	-2, 443,
	-1, 1563,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 595,
	-1, 1568,
	142, 0,
	-2, 609,
	-1, 1576,
	188, 728,
	-2, 731,
	-1, 1610,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 635,
	-1, 1611,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 636,
	-1, 1612,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 637,
	-1, 1616,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 641,
	-1, 1617,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 642,
	-1, 1618,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 643,
	-1, 1729,
	142, 0,
	-2, 610,
	-1, 1732,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 613,
	-1, 1733,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 615,
	-1, 1824,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 614,
	-1, 1825,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 616,
	-1, 1832,
	142, 0,
	-2, 644,
	-1, 1882,
	142, 0,
	-2, 645,
	-1, 1938,
	35, 0,
	127, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 974,
}

const sqlNprod = 1117
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25040

var sqlAct = [...]int{

	618, 1523, 1917, 1937, 1961, 1772, 1888, 1918, 1936, 1919,
	1106, 1017, 437, 843, 1702, 1587, 924, 1533, 77, 591,
	608, 45, 1811, 1689, 616, 849, 733, 1115, 615, 76,
	1009, 1721, 1795, 398, 1647, 1557, 1688, 1714, 19, 270,
	76, 76, 76, 1085, 1339, 76, 458, 1556, 76, 1337,
	1707, 1099, 1360, 1539, 473, 1080, 76, 271, 1448, 1394,
	926, 1351, 1447, 76, 76, 1286, 1084, 76, 579, 684,
	76, 76, 76, 76, 1049, 669, 256, 268, 976, 681,
	985, 1345, 1549, 442, 1018, 610, 845, 1192, 920, 734,
	1231, 472, 1114, 1164, 1167, 1118, 444, 58, 26, 1033,
	15, 866, 7, 781, 1042, 797, 546, 706, 686, 702,
	1081, 1075, 1202, 589, 272, 778, 580, 22, 474, 475,
	436, 1116, 808, 494, 1011, 961, 485, 1088, 488, 547,
	21, 10, 957, 717, 58, 9, 261, 8, 260, 6,
	262, 4, 254, 487, 872, 447, 563, 562, 564, 385,
	777, 799, 795, 376, 590, 265, 710, 481, 445, 545,
	1818, 567, 1008, 1819, 59, 58, 388, 441, 263, 264,
	60, 719, 719, 266, 441, 258, 719, 257, 1952, 259,
	1010, 1110, 1933, 73, 1925, 1794, 1349, 1110, 455, 267,
	1915, 461, 1359, 1039, 468, 1014, 696, 875, 876, 1046,
	1910, 1909, 1052, 1110, 1110, 424, 1884, 1878, 1348, 1039,
	1110, 1297, 1863, 1853, 464, 1794, 1110, 1298, 874, 1869,
	878, 456, 449, 434, 463, 466, 873, 456, 1826, 433,
	1805, 1039, 57, 1794, 1802, 1793, 1348, 1110, 1794, 64,
	1777, 877, 1047, 1110, 1776, 1754, 267, 1110, 1052, 1797,
	76, 76, 76, 76, 76, 395, 497, 1734, 36, 1623,
	1052, 1731, 66, 1575, 1039, 1674, 37, 671, 1052, 1673,
	1659, 1324, 1052, 1110, 498, 1572, 1509, 442, 1052, 1006,
	1048, 1045, 1503, 974, 1327, 1006, 490, 490, 38, 57,
	1110, 67, 1054, 875, 876, 1052, 883, 1465, 1463, 62,
	1466, 1052, 1393, 1462, 1461, 63, 1052, 1052, 1391, 1389,
	1326, 1052, 1388, 1110, 1390, 36, 878, 1052, 1111, 1061,
	1176, 1110, 1052, 37, 61, 1105, 1051, 1038, 1972, 1052,
	1039, 499, 1069, 64, 575, 720, 720, 877, 1005, 1050,
	720, 1006, 838, 973, 837, 38, 972, 893, 727, 476,
	789, 728, 574, 477, 788, 476, 66, 510, 454, 477,
	1361, 68, 477, 1418, 1419, 822, 530, 1935, 1931, 1924,
	1879, 482, 76, 1803, 1759, 1755, 1747, 1746, 495, 64,
	574, 1745, 491, 1418, 1419, 67, 1740, 76, 64, 1739,
	76, 76, 883, 62, 49, 1738, 1686, 1638, 1680, 63,
	1633, 1632, 66, 1044, 456, 894, 466, 1631, 1578, 1561,
	1538, 66, 1329, 1433, 1297, 873, 875, 876, 1013, 1511,
	1513, 1470, 1467, 1455, 76, 1043, 76, 1446, 76, 76,
	76, 67, 76, 927, 470, 1417, 723, 718, 932, 878,
	67, 841, 1414, 1413, 1411, 64, 561, 76, 62, 1399,
	1398, 49, 1325, 1248, 63, 1199, 1198, 1172, 76, 574,
	877, 553, 1424, 556, 61, 1685, 573, 848, 66, 1908,
	1589, 1898, 76, 61, 1866, 1845, 1843, 1834, 270, 76,
	76, 76, 1424, 76, 887, 879, 880, 881, 882, 884,
	1821, 904, 1815, 560, 1307, 1800, 271, 67, 1791, 518,
	476, 676, 76, 76, 477, 62, 1769, 1752, 875, 876,
	76, 63, 76, 1434, 1725, 883, 1696, 1567, 1418, 1419,
	675, 1531, 519, 497, 497, 1679, 1529, 704, 875, 876,
	255, 270, 76, 1434, 76, 76, 76, 76, 76, 76,
	76, 498, 498, 1528, 76, 76, 1526, 552, 1173, 271,
	76, 878, 877, 272, 1482, 707, 513, 515, 76, 1481,
	1445, 1407, 1406, 1384, 1380, 1169, 893, 1313, 1275, 1274,
	847, 1435, 877, 550, 1262, 1261, 76, 1241, 548, 76,
	456, 879, 880, 881, 882, 884, 1197, 904, 1109, 1262,
	740, 1435, 962, 965, 969, 955, 954, 953, 499, 499,
	482, 570, 571, 952, 951, 576, 272, 950, 823, 434,
	949, 818, 678, 948, 947, 433, 442, 1424, 946, 945,
	929, 944, 722, 729, 894, 725, 703, 471, 943, 1418,
	1419, 942, 941, 456, 711, 711, 709, 712, 940, 939,
	930, 928, 61, 842, 459, 852, 731, 1429, 1426, 1427,
	1428, 1420, 1421, 1422, 1423, 1425, 463, 466, 578, 516,
	1306, 506, 785, 504, 784, 1684, 1499, 1429, 1426, 1427,
	1428, 1420, 1421, 1422, 1423, 1425, 812, 819, 875, 876,
	76, 692, 677, 1820, 827, 840, 524, 1340, 76, 870,
	1683, 1299, 76, 1361, 967, 1469, 76, 76, 968, 839,
	76, 885, 886, 887, 879, 880, 881, 882, 884, 854,
	904, 856, 855, 1468, 76, 1365, 76, 76, 1510, 76,
	540, 868, 76, 525, 76, 76, 937, 76, 1424, 497,
	846, 979, 434, 1708, 1010, 434, 434, 1590, 862, 431,
	933, 863, 864, 1193, 958, 543, 677, 498, 1293, 1012,
	1402, 1012, 1476, 1894, 1949, 1948, 670, 1027, 490, 1667,
	490, 687, 1852, 688, 1060, 583, 256, 990, 992, 417,
	418, 1034, 763, 423, 440, 422, 687, 544, 688, 1785,
	76, 76, 963, 1320, 250, 959, 960, 824, 966, 1784,
	828, 829, 830, 831, 832, 1497, 1496, 1473, 1472, 835,
	836, 1368, 904, 1312, 499, 1311, 1420, 1421, 1422, 1423,
	1425, 1310, 1309, 995, 71, 982, 439, 1152, 1418, 1419,
	970, 1003, 904, 270, 58, 522, 261, 76, 260, 58,
	262, 1036, 689, 1035, 971, 1037, 251, 1016, 687, 999,
	688, 271, 76, 76, 1053, 265, 456, 689, 1026, 76,
	466, 495, 1031, 1028, 456, 1029, 1851, 1002, 263, 264,
	441, 1001, 1025, 266, 523, 258, 70, 257, 1021, 259,
	1030, 998, 1813, 466, 978, 76, 466, 549, 76, 1245,
	1493, 1244, 1123, 963, 978, 966, 603, 377, 246, 1100,
	977, 1056, 426, 502, 1711, 1055, 1063, 1498, 272, 1774,
	1074, 1057, 1058, 1112, 960, 959, 427, 1166, 382, 689,
	1281, 1122, 270, 378, 700, 74, 693, 1424, 1062, 1422,
	1423, 1425, 1166, 1896, 694, 432, 368, 369, 370, 428,
	271, 387, 713, 1948, 399, 247, 1193, 379, 429, 1484,
	438, 1921, 387, 1418, 1419, 1078, 1518, 1273, 1050, 448,
	448, 252, 693, 74, 1912, 381, 74, 74, 467, 74,
	1958, 740, 740, 1079, 1969, 1120, 1121, 1077, 1434, 1287,
	1913, 1501, 904, 1350, 1280, 1174, 76, 76, 76, 704,
	1291, 69, 76, 253, 704, 76, 1319, 272, 1180, 1170,
	1113, 76, 76, 76, 76, 76, 456, 875, 876, 76,
	1065, 1247, 76, 76, 1277, 1050, 1067, 76, 501, 1103,
	1104, 1287, 690, 72, 76, 1515, 76, 1922, 1295, 1046,
	878, 1354, 1068, 76, 685, 1255, 1435, 690, 1846, 456,
	1964, 1066, 1171, 76, 986, 442, 719, 1189, 698, 1357,
	697, 877, 1424, 380, 817, 816, 1321, 810, 805, 521,
	1352, 956, 1249, 1516, 76, 76, 1923, 1212, 1355, 1095,
	76, 1830, 1047, 1149, 1957, 1272, 1217, 249, 248, 740,
	497, 1491, 1353, 1259, 1485, 1775, 1792, 1289, 1560, 1550,
	918, 975, 1655, 1250, 1405, 520, 1716, 383, 498, 690,
	76, 441, 76, 1434, 76, 989, 883, 1920, 76, 1947,
	1048, 1045, 76, 1426, 1427, 1428, 1420, 1421, 1422, 1423,
	1425, 76, 1050, 541, 1656, 1328, 1284, 1330, 1370, 1356,
	76, 1234, 566, 1292, 820, 740, 1945, 1332, 1970, 1305,
	1251, 1331, 1300, 1165, 1750, 1334, 74, 483, 74, 399,
	399, 442, 521, 763, 763, 499, 1701, 1364, 1034, 1097,
	1956, 1435, 1962, 533, 1304, 1147, 1150, 1279, 1316, 1050,
	1301, 1283, 1302, 1303, 565, 1315, 511, 1318, 703, 740,
	542, 1317, 374, 1259, 509, 1322, 1715, 703, 1323, 1543,
	769, 988, 1146, 1619, 1354, 1779, 1976, 456, 566, 1778,
	1767, 442, 1666, 1663, 1963, 1840, 821, 1392, 1475, 1665,
	720, 1651, 1357, 1652, 1258, 1254, 58, 1342, 1036, 1343,
	1035, 1965, 1037, 1548, 1098, 1363, 377, 853, 844, 1514,
	794, 1355, 1751, 1044, 1350, 875, 876, 1889, 1722, 1654,
	1428, 1420, 1421, 1422, 1423, 1425, 1657, 382, 565, 834,
	790, 1534, 378, 1369, 442, 1371, 987, 1703, 878, 623,
	1768, 763, 1335, 1264, 520, 1263, 792, 1148, 507, 439,
	480, 762, 1717, 76, 1386, 1620, 379, 793, 1545, 877,
	1544, 1621, 1354, 512, 456, 1975, 399, 399, 479, 1401,
	1662, 557, 1356, 1524, 381, 1723, 1664, 881, 882, 884,
	1357, 904, 1687, 1540, 1653, 1346, 1765, 1196, 76, 76,
	1833, 1352, 1749, 1449, 1566, 1412, 1450, 763, 1379, 1355,
	387, 1282, 74, 1059, 399, 555, 399, 1766, 558, 1452,
	1453, 1454, 1004, 1353, 883, 76, 539, 1505, 76, 1471,
	76, 538, 861, 448, 537, 1418, 1419, 76, 811, 806,
	536, 1478, 535, 534, 74, 531, 1530, 478, 938, 76,
	826, 763, 1492, 76, 1195, 1527, 1500, 1916, 74, 1886,
	270, 76, 1644, 1489, 1504, 74, 74, 74, 673, 714,
	1356, 1487, 380, 1480, 1272, 893, 1542, 776, 271, 1508,
	1546, 1474, 1506, 1535, 1336, 1517, 1519, 1520, 74, 74,
	1101, 1507, 1093, 1032, 1525, 726, 782, 724, 782, 721,
	716, 699, 1488, 695, 1490, 691, 76, 1569, 1580, 1581,
	1582, 1553, 1584, 1338, 1786, 1547, 383, 568, 399, 452,
	782, 399, 399, 399, 399, 399, 833, 1949, 1537, 814,
	399, 399, 1107, 894, 1424, 272, 387, 1554, 1551, 1552,
	1162, 1174, 527, 1377, 851, 1788, 994, 1502, 416, 978,
	978, 1577, 1021, 456, 1160, 993, 991, 1375, 1797, 1848,
	1881, 1541, 448, 3, 572, 871, 740, 1591, 373, 997,
	1870, 996, 1699, 76, 76, 76, 1096, 672, 1596, 1092,
	1015, 869, 76, 76, 569, 1434, 453, 786, 76, 1108,
	76, 732, 76, 76, 76, 740, 740, 76, 76, 1593,
	1594, 419, 420, 456, 740, 740, 1626, 456, 1598, 1599,
	1041, 1627, 384, 879, 880, 881, 882, 884, 1643, 904,
	1973, 528, 1158, 1974, 1157, 1640, 1639, 1373, 1163, 76,
	76, 1378, 460, 1418, 1419, 875, 876, 740, 1071, 1070,
	1521, 1630, 1681, 1435, 1512, 76, 76, 1695, 1464, 76,
	1308, 1694, 1695, 1246, 76, 1693, 1694, 1243, 1242, 76,
	1693, 1190, 1072, 919, 1736, 620, 74, 1867, 1700, 1808,
	1677, 1682, 1712, 1713, 983, 1705, 1718, 1583, 74, 1704,
	1333, 1073, 74, 1000, 931, 1698, 74, 1536, 425, 1706,
	76, 1773, 1660, 1661, 1730, 375, 825, 532, 1911, 1742,
	74, 1719, 1023, 1024, 1404, 74, 1810, 1829, 74, 1159,
	399, 399, 1374, 399, 1726, 1194, 1161, 936, 35, 1376,
	1691, 596, 1645, 1420, 1421, 1422, 1423, 1425, 775, 1477,
	1087, 1086, 762, 762, 273, 815, 804, 619, 787, 1697,
	798, 807, 1203, 674, 621, 76, 1670, 76, 763, 76,
	76, 737, 1676, 740, 622, 1748, 738, 964, 76, 609,
	735, 493, 1347, 1019, 1191, 1400, 782, 871, 934, 595,
	601, 600, 1178, 503, 1720, 1358, 48, 763, 763, 517,
	76, 393, 1763, 394, 1290, 1678, 763, 763, 1761, 1102,
	857, 1760, 1486, 430, 1415, 505, 1224, 1216, 1213, 456,
	456, 551, 76, 456, 680, 1020, 529, 1796, 1296, 76,
	1040, 577, 1218, 1076, 865, 451, 923, 1695, 76, 763,
	450, 1694, 1082, 526, 1798, 1693, 76, 76, 74, 1083,
	1789, 791, 1064, 1801, 421, 871, 1842, 1094, 1804, 1257,
	762, 1968, 1847, 1483, 1893, 1817, 65, 25, 1807, 23,
	1828, 1814, 20, 740, 739, 18, 1809, 1781, 17, 16,
	24, 74, 1823, 14, 399, 13, 76, 12, 11, 34,
	33, 32, 31, 30, 1844, 29, 5, 2, 1, 1835,
	0, 0, 0, 0, 0, 76, 76, 0, 0, 76,
	1787, 1839, 0, 76, 0, 0, 762, 1838, 76, 1856,
	0, 0, 1782, 1783, 0, 1864, 1858, 0, 0, 1860,
	0, 1865, 1771, 442, 0, 1695, 76, 0, 1857, 1694,
	0, 270, 76, 1693, 0, 0, 0, 1868, 581, 581,
	0, 1859, 0, 1871, 1872, 763, 1822, 682, 740, 271,
	762, 0, 1880, 0, 76, 0, 76, 76, 0, 76,
	1875, 704, 0, 0, 705, 0, 1806, 0, 1899, 0,
	0, 1883, 74, 1252, 1253, 0, 0, 1903, 983, 1902,
	76, 1260, 456, 765, 0, 1901, 0, 1265, 1266, 1268,
	1270, 1271, 1895, 1905, 1897, 1276, 1907, 1695, 1278, 74,
	1796, 1694, 1906, 74, 1900, 1693, 272, 76, 1876, 76,
	74, 0, 1294, 1904, 1932, 0, 1926, 0, 1928, 74,
	0, 1930, 0, 0, 0, 0, 0, 76, 0, 74,
	740, 0, 1942, 0, 0, 0, 1874, 1946, 1944, 0,
	1218, 1218, 1877, 1950, 0, 763, 0, 0, 0, 1953,
	1076, 782, 1955, 858, 860, 0, 1076, 1954, 0, 0,
	867, 0, 0, 1967, 1966, 1971, 1891, 0, 0, 1951,
	0, 0, 913, 914, 915, 916, 917, 0, 0, 0,
	0, 400, 922, 0, 0, 0, 851, 1977, 851, 0,
	399, 0, 764, 0, 74, 1218, 1218, 1218, 1341, 401,
	0, 0, 935, 0, 0, 0, 0, 1344, 0, 0,
	0, 1892, 0, 0, 0, 0, 74, 0, 0, 1929,
	0, 0, 875, 876, 0, 0, 0, 0, 0, 0,
	763, 0, 0, 0, 403, 0, 1655, 0, 1648, 408,
	409, 0, 0, 414, 0, 878, 1646, 0, 0, 0,
	1650, 0, 0, 0, 0, 402, 404, 0, 0, 1177,
	1181, 1021, 1184, 0, 0, 0, 877, 0, 1656, 0,
	0, 0, 892, 0, 0, 1204, 1204, 1215, 0, 1226,
	736, 0, 0, 0, 0, 1238, 1239, 1240, 1649, 0,
	0, 0, 0, 0, 405, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 406, 407, 0,
	0, 0, 763, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 410, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 739, 739, 0, 0, 0,
	0, 0, 0, 0, 0, 1218, 1218, 762, 0, 0,
	0, 0, 0, 0, 0, 1651, 0, 1652, 0, 871,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 893, 0, 0, 0, 762, 762, 0, 0,
	0, 0, 0, 1654, 0, 762, 762, 0, 0, 0,
	1657, 0, 0, 0, 74, 74, 1218, 1218, 1218, 1218,
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
	1218, 1218, 1218, 1218, 1218, 0, 1218, 0, 762, 0,
	0, 1522, 0, 411, 983, 0, 851, 412, 0, 0,
	894, 0, 413, 1532, 0, 0, 0, 0, 0, 0,
	0, 1381, 1382, 739, 0, 74, 415, 0, 1653, 74,
	0, 0, 0, 0, 765, 765, 0, 1559, 0, 0,
	0, 581, 0, 0, 0, 0, 0, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 0,
	1151, 0, 1153, 1154, 1155, 1156, 1441, 1442, 1443, 739,
	0, 1383, 1588, 0, 0, 1385, 888, 885, 886, 887,
	879, 880, 881, 882, 884, 0, 904, 0, 1396, 1397,
	0, 0, 0, 597, 46, 0, 0, 0, 0, 1200,
	1201, 0, 0, 1214, 762, 1225, 1227, 1232, 1235, 1236,
	1237, 0, 0, 739, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	682, 46, 765, 764, 764, 1457, 0, 0, 0, 1641,
	1642, 983, 0, 0, 0, 0, 0, 0, 871, 871,
	0, 0, 435, 0, 1668, 443, 1669, 0, 74, 1671,
	1672, 0, 46, 1675, 74, 0, 1285, 0, 1288, 0,
	0, 0, 0, 0, 0, 0, 1494, 1495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 765, 0,
	0, 0, 0, 1690, 0, 871, 1083, 0, 1690, 0,
	0, 0, 1218, 0, 762, 0, 0, 0, 0, 0,
	1314, 74, 74, 0, 0, 74, 1564, 1565, 0, 0,
	1559, 736, 736, 0, 0, 1724, 0, 0, 0, 0,
	0, 0, 765, 0, 0, 0, 0, 0, 0, 0,
	0, 764, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1743, 0, 0, 0,
	0, 0, 0, 867, 0, 0, 0, 1600, 1601, 1602,
	1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
	1613, 1614, 1615, 1616, 1617, 1618, 1573, 1622, 0, 762,
	0, 0, 0, 0, 0, 1218, 0, 764, 0, 0,
	875, 876, 0, 0, 1366, 1367, 905, 906, 907, 0,
	1372, 983, 0, 1762, 0, 399, 1764, 0, 0, 0,
	0, 0, 0, 878, 74, 909, 0, 0, 0, 736,
	0, 0, 0, 0, 1387, 0, 0, 875, 876, 0,
	0, 764, 0, 1395, 877, 0, 871, 1624, 0, 443,
	892, 1403, 0, 0, 0, 1408, 0, 0, 1634, 0,
	878, 1418, 1419, 1690, 1436, 1437, 1438, 0, 74, 0,
	0, 762, 0, 0, 0, 1812, 0, 1728, 0, 1218,
	922, 877, 0, 0, 74, 736, 1232, 1232, 1232, 0,
	0, 0, 871, 1559, 0, 0, 0, 0, 0, 883,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	739, 1433, 0, 0, 0, 0, 0, 902, 910, 1479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 736,
	0, 0, 851, 0, 0, 0, 883, 0, 0, 739,
	739, 0, 0, 1710, 900, 581, 0, 0, 739, 739,
	893, 1849, 1850, 581, 0, 1854, 0, 682, 0, 1855,
	1424, 1690, 0, 0, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1873, 739, 871, 0, 0, 0, 0, 893, 871, 0,
	0, 0, 0, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1770, 0, 0, 0, 0, 894, 0,
	1890, 1434, 871, 74, 0, 399, 0, 0, 0, 903,
	0, 0, 0, 1562, 0, 0, 1563, 0, 0, 765,
	0, 0, 0, 1690, 0, 0, 1812, 1568, 435, 0,
	0, 0, 0, 0, 0, 894, 0, 0, 0, 0,
	0, 1314, 0, 0, 0, 0, 0, 0, 765, 765,
	1585, 0, 0, 74, 0, 871, 0, 765, 765, 1435,
	1595, 0, 0, 0, 1597, 0, 0, 901, 0, 0,
	0, 0, 0, 1943, 888, 885, 886, 887, 879, 880,
	881, 882, 884, 0, 904, 0, 1832, 739, 0, 0,
	765, 0, 0, 0, 0, 0, 0, 1628, 1629, 0,
	0, 0, 0, 0, 0, 0, 1635, 1636, 1637, 0,
	0, 888, 885, 886, 887, 879, 880, 881, 882, 884,
	0, 904, 0, 0, 0, 0, 0, 0, 764, 0,
	0, 1430, 1431, 1432, 0, 1429, 1426, 1427, 1428, 1420,
	1421, 1422, 1423, 1425, 0, 0, 0, 0, 0, 581,
	0, 435, 0, 0, 435, 435, 0, 764, 764, 0,
	0, 0, 0, 0, 0, 0, 764, 764, 0, 0,
	1882, 0, 0, 0, 0, 0, 0, 0, 921, 0,
	0, 0, 925, 0, 0, 0, 0, 739, 1709, 0,
	0, 0, 1862, 0, 0, 0, 0, 0, 0, 764,
	0, 0, 0, 0, 0, 0, 765, 0, 0, 0,
	0, 0, 0, 0, 1729, 0, 736, 0, 1732, 1733,
	0, 0, 0, 1735, 0, 0, 0, 1737, 0, 0,
	0, 0, 1418, 1419, 1741, 1436, 1437, 1438, 1744, 0,
	0, 0, 0, 0, 0, 736, 736, 0, 0, 0,
	0, 0, 0, 0, 736, 736, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1753, 739, 1914, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 736, 0, 0,
	0, 0, 0, 0, 46, 0, 46, 0, 0, 0,
	1934, 0, 0, 0, 0, 0, 765, 0, 0, 0,
	0, 46, 0, 1780, 0, 764, 46, 0, 0, 875,
	876, 0, 895, 896, 897, 905, 906, 907, 0, 0,
	0, 1424, 0, 0, 0, 898, 0, 0, 0, 0,
	1799, 0, 878, 0, 909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 739, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 1816, 0, 0, 0, 0, 892,
	0, 0, 0, 0, 0, 1824, 1825, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 0,
	0, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 736, 1837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 764, 0, 1841, 883, 0,
	0, 0, 0, 0, 0, 0, 0, 1418, 1419, 0,
	1436, 1437, 1438, 0, 0, 0, 902, 910, 0, 682,
	1435, 0, 0, 1727, 0, 0, 0, 0, 0, 0,
	0, 908, 0, 0, 0, 0, 0, 0, 1117, 0,
	0, 0, 0, 900, 0, 0, 0, 0, 0, 893,
	0, 0, 0, 765, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 0, 0, 1168, 0, 0, 0, 0, 0,
	764, 0, 0, 736, 0, 0, 0, 0, 0, 0,
	0, 0, 1430, 1431, 1432, 0, 1429, 1426, 1427, 1428,
	1420, 1421, 1422, 1423, 1425, 0, 1424, 894, 875, 876,
	0, 895, 896, 897, 905, 906, 907, 0, 903, 0,
	0, 0, 1927, 0, 898, 0, 0, 0, 0, 0,
	0, 878, 0, 909, 0, 0, 0, 0, 0, 1439,
	1941, 1941, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 877, 0, 0, 0, 0, 1434, 892, 0,
	0, 0, 764, 0, 0, 0, 1941, 0, 736, 0,
	0, 0, 0, 0, 0, 0, 901, 443, 0, 889,
	890, 891, 0, 888, 885, 886, 887, 879, 880, 881,
	882, 884, 0, 904, 0, 0, 0, 0, 0, 0,
	1756, 1941, 0, 0, 0, 875, 876, 883, 895, 896,
	897, 905, 906, 907, 0, 1435, 0, 0, 0, 0,
	0, 898, 0, 0, 0, 902, 910, 0, 878, 0,
	909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	908, 0, 0, 0, 0, 0, 0, 0, 0, 877,
	736, 0, 900, 0, 0, 892, 46, 0, 893, 0,
	46, 875, 876, 0, 895, 896, 897, 905, 906, 907,
	0, 0, 0, 46, 0, 0, 0, 0, 0, 0,
	899, 0, 0, 1362, 878, 0, 909, 1430, 1431, 1432,
	0, 1429, 1426, 1427, 1428, 1420, 1421, 1422, 1423, 1425,
	0, 0, 0, 0, 883, 877, 0, 0, 0, 0,
	0, 892, 0, 0, 1168, 0, 894, 0, 0, 0,
	0, 0, 902, 910, 0, 0, 0, 903, 0, 0,
	0, 0, 0, 921, 0, 0, 0, 908, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 900,
	0, 0, 0, 0, 0, 893, 0, 0, 0, 0,
	883, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 899, 902, 910,
	0, 0, 0, 0, 0, 901, 921, 0, 889, 890,
	891, 0, 888, 885, 886, 887, 879, 880, 881, 882,
	884, 0, 904, 0, 0, 900, 0, 0, 0, 1460,
	0, 893, 0, 894, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 903, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1117, 0, 0, 0, 0, 0, 0, 894,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	903, 0, 901, 0, 0, 889, 890, 891, 0, 888,
	885, 886, 887, 879, 880, 881, 882, 884, 0, 904,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 1117, 0, 0, 0, 1117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	0, 889, 890, 891, 0, 888, 885, 886, 887, 879,
	880, 881, 882, 884, 0, 904, 0, 0, 617, 606,
	607, 604, 605, 593, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 633, 599, 0, 0, 0, 81, 82, 0,
	648, 199, 649, 83, 650, 651, 0, 84, 203, 204,
	85, 614, 632, 652, 653, 207, 0, 644, 0, 625,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 275, 93, 1940, 0, 626, 628, 0, 627, 629,
	95, 96, 97, 98, 654, 99, 655, 656, 0, 100,
	0, 101, 0, 0, 0, 647, 103, 0, 104, 0,
	0, 0, 598, 105, 106, 634, 635, 612, 0, 0,
	107, 108, 657, 0, 109, 0, 110, 46, 0, 276,
	0, 111, 645, 0, 217, 0, 112, 113, 114, 641,
	643, 0, 0, 117, 0, 115, 0, 277, 116, 658,
	659, 660, 661, 0, 624, 0, 0, 118, 280, 119,
	120, 0, 122, 121, 0, 646, 281, 123, 1117, 1117,
	124, 0, 1117, 125, 0, 126, 127, 128, 129, 130,
	283, 131, 132, 135, 133, 587, 134, 613, 642, 136,
	662, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	284, 140, 285, 636, 141, 142, 143, 144, 0, 637,
	145, 231, 146, 0, 147, 148, 149, 663, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 286, 157, 158,
	602, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	630, 165, 166, 0, 167, 664, 236, 168, 0, 174,
	169, 170, 171, 173, 665, 172, 638, 0, 175, 0,
	176, 177, 178, 0, 239, 666, 667, 0, 0, 179,
	639, 640, 611, 180, 181, 1939, 183, 0, 0, 184,
	185, 186, 631, 187, 0, 188, 189, 190, 244, 668,
	0, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 1790, 0, 0,
	0, 0, 584, 585, 0, 0, 0, 0, 586, 0,
	0, 594, 0, 46, 0, 0, 592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 288, 80, 289,
	290, 291, 292, 196, 293, 294, 295, 296, 81, 82,
	197, 198, 199, 200, 83, 201, 202, 297, 84, 203,
	204, 85, 298, 299, 205, 206, 207, 300, 208, 301,
	274, 302, 86, 87, 88, 921, 89, 303, 90, 91,
	92, 304, 275, 93, 94, 305, 306, 307, 308, 309,
	310, 95, 96, 97, 98, 209, 99, 210, 211, 311,
	100, 312, 101, 313, 314, 315, 102, 103, 316, 104,
	317, 0, 318, 212, 105, 106, 213, 214, 319, 320,
	321, 107, 108, 215, 0, 109, 322, 110, 323, 324,
	276, 325, 111, 216, 326, 217, 327, 112, 113, 114,
	218, 219, 278, 328, 117, 329, 115, 330, 277, 116,
	220, 221, 222, 223, 331, 224, 332, 279, 118, 280,
	119, 120, 333, 122, 121, 334, 225, 281, 123, 282,
	335, 124, 336, 337, 125, 0, 126, 127, 128, 129,
	130, 283, 131, 132, 135, 133, 338, 134, 339, 226,
	136, 227, 137, 138, 340, 341, 342, 343, 344, 139,
	228, 284, 140, 285, 229, 141, 142, 143, 144, 345,
	230, 145, 231, 146, 346, 147, 148, 149, 232, 150,
	151, 347, 153, 154, 152, 155, 348, 156, 286, 157,
	158, 233, 159, 0, 160, 161, 162, 349, 234, 163,
	164, 350, 165, 166, 287, 167, 235, 236, 168, 351,
	174, 169, 170, 171, 173, 237, 172, 238, 352, 175,
	353, 176, 177, 178, 354, 239, 240, 241, 355, 356,
	179, 242, 243, 357, 180, 181, 182, 183, 358, 359,
	184, 185, 186, 360, 187, 361, 188, 189, 190, 244,
	245, 362, 363, 191, 364, 365, 366, 367, 192, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1555, 78,
	79, 288, 80, 289, 290, 291, 292, 196, 293, 294,
	295, 296, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 297, 84, 203, 204, 85, 298, 299, 205, 206,
	207, 300, 208, 301, 274, 302, 86, 87, 88, 0,
	89, 303, 90, 91, 92, 304, 275, 93, 94, 305,
	306, 307, 308, 309, 310, 95, 96, 97, 98, 209,
	99, 210, 211, 311, 100, 312, 101, 313, 314, 315,
	102, 103, 316, 104, 317, 0, 318, 212, 105, 106,
	213, 214, 319, 320, 321, 107, 108, 215, 0, 109,
	322, 110, 323, 324, 276, 325, 111, 216, 326, 217,
	327, 112, 113, 114, 218, 219, 278, 328, 117, 329,
	115, 330, 277, 116, 220, 221, 222, 223, 331, 224,
	332, 279, 118, 280, 119, 120, 333, 122, 121, 334,
	225, 281, 123, 282, 335, 124, 336, 337, 125, 0,
	126, 127, 128, 129, 130, 283, 131, 132, 135, 133,
	338, 134, 339, 226, 136, 227, 137, 138, 340, 341,
	342, 343, 344, 139, 228, 284, 140, 285, 229, 141,
	142, 143, 144, 345, 230, 145, 231, 146, 346, 147,
	148, 149, 232, 150, 151, 347, 153, 154, 152, 155,
	348, 156, 286, 157, 158, 233, 159, 0, 160, 161,
	162, 349, 234, 163, 164, 350, 165, 166, 287, 167,
	235, 236, 168, 351, 174, 169, 170, 171, 173, 237,
	172, 238, 352, 175, 353, 176, 177, 178, 354, 239,
	240, 241, 355, 356, 179, 242, 243, 357, 180, 181,
	182, 183, 358, 359, 184, 185, 186, 360, 187, 361,
	188, 189, 190, 244, 245, 362, 363, 191, 364, 365,
	366, 367, 192, 193, 194, 195, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 708,
	0, 0, 78, 79, 288, 80, 289, 290, 291, 292,
	196, 293, 294, 295, 296, 81, 82, 197, 198, 199,
	200, 83, 201, 202, 297, 84, 203, 204, 85, 298,
	299, 205, 206, 207, 300, 208, 301, 274, 302, 86,
	87, 88, 0, 89, 303, 90, 91, 92, 304, 275,
	93, 94, 305, 306, 307, 308, 309, 310, 95, 96,
	97, 98, 209, 99, 210, 211, 311, 100, 312, 101,
	313, 314, 315, 102, 103, 316, 104, 317, 0, 318,
	212, 105, 106, 213, 214, 319, 320, 321, 107, 108,
	215, 0, 109, 322, 110, 323, 324, 276, 325, 111,
	216, 326, 217, 327, 112, 113, 114, 218, 219, 278,
	328, 117, 329, 115, 330, 277, 116, 220, 221, 222,
	223, 331, 224, 332, 279, 118, 280, 119, 120, 333,
	122, 121, 334, 225, 281, 123, 282, 335, 124, 336,
	337, 125, 0, 126, 127, 128, 129, 130, 283, 131,
	132, 135, 133, 338, 134, 339, 226, 136, 227, 137,
	138, 340, 341, 342, 343, 344, 139, 228, 284, 140,
	285, 229, 141, 142, 143, 144, 345, 230, 145, 231,
	146, 346, 147, 148, 149, 232, 150, 151, 347, 153,
	154, 152, 155, 348, 156, 286, 157, 158, 233, 159,
	0, 160, 161, 162, 349, 234, 163, 164, 350, 165,
	166, 287, 167, 235, 236, 168, 351, 174, 169, 170,
	171, 173, 237, 172, 238, 352, 175, 353, 176, 177,
	178, 354, 239, 240, 241, 355, 356, 179, 242, 243,
	357, 180, 181, 182, 183, 358, 359, 184, 185, 186,
	360, 187, 361, 188, 189, 190, 244, 245, 362, 363,
	191, 364, 365, 366, 367, 192, 193, 194, 195, 617,
	606, 607, 604, 605, 593, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 1186, 80, 0,
	0, 0, 0, 633, 599, 0, 0, 0, 81, 82,
	197, 648, 199, 649, 83, 650, 651, 0, 84, 203,
	204, 85, 614, 632, 652, 653, 207, 0, 644, 0,
	625, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 275, 93, 94, 0, 626, 628, 0, 627,
	629, 95, 96, 97, 98, 654, 99, 655, 656, 0,
	100, 0, 101, 0, 1187, 0, 647, 103, 0, 104,
	0, 0, 0, 598, 105, 106, 634, 635, 612, 0,
	0, 107, 108, 657, 0, 109, 0, 110, 0, 0,
	276, 0, 111, 645, 0, 217, 0, 112, 113, 114,
	641, 643, 278, 0, 117, 0, 115, 0, 277, 116,
	658, 659, 660, 661, 0, 624, 0, 279, 118, 280,
	119, 120, 0, 122, 121, 0, 646, 281, 123, 282,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 283, 131, 132, 135, 133, 587, 134, 613, 642,
	136, 662, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 284, 140, 285, 636, 141, 142, 143, 144, 0,
	637, 145, 231, 146, 0, 147, 148, 149, 663, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 286, 157,
	158, 602, 159, 0, 160, 161, 162, 0, 234, 163,
	164, 630, 165, 166, 287, 167, 664, 236, 168, 0,
	174, 169, 170, 171, 173, 665, 172, 638, 0, 175,
	0, 176, 177, 178, 0, 239, 666, 667, 0, 0,
	179, 639, 640, 611, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 631, 187, 0, 188, 189, 190, 244,
	668, 1185, 0, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 588, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 585, 1188, 0, 0, 0, 586,
	0, 0, 594, 1183, 0, 0, 0, 592, 617, 606,
	607, 604, 605, 593, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 633, 599, 0, 0, 0, 81, 82, 197,
	648, 199, 649, 83, 650, 651, 0, 84, 203, 204,
	85, 614, 632, 652, 653, 207, 0, 644, 0, 625,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 275, 93, 94, 0, 626, 628, 0, 627, 629,
	95, 96, 97, 98, 654, 99, 655, 656, 683, 100,
	0, 101, 0, 0, 0, 647, 103, 0, 104, 0,
	0, 0, 598, 105, 106, 634, 635, 612, 0, 0,
	107, 108, 657, 0, 109, 0, 110, 0, 0, 276,
	0, 111, 645, 0, 217, 0, 112, 113, 114, 641,
	643, 278, 0, 117, 0, 115, 0, 277, 116, 658,
	659, 660, 661, 0, 624, 0, 279, 118, 280, 119,
	120, 0, 122, 121, 0, 646, 281, 123, 282, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	283, 131, 132, 135, 133, 587, 134, 613, 642, 136,
	662, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	284, 140, 285, 636, 141, 142, 143, 144, 0, 637,
	145, 231, 146, 0, 147, 148, 149, 663, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 286, 157, 158,
	602, 159, 0, 160, 161, 162, 64, 234, 163, 164,
	630, 165, 166, 287, 167, 664, 236, 168, 0, 174,
	169, 170, 171, 173, 665, 172, 638, 0, 175, 66,
	176, 177, 178, 0, 239, 666, 667, 0, 0, 179,
	639, 640, 611, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 631, 187, 0, 188, 189, 190, 500, 668,
	0, 0, 191, 0, 0, 0, 62, 192, 193, 194,
	195, 588, 63, 617, 606, 607, 604, 605, 593, 0,
	0, 0, 584, 585, 0, 0, 0, 0, 586, 78,
	79, 594, 80, 0, 0, 0, 592, 633, 599, 0,
	0, 0, 81, 82, 197, 648, 199, 649, 83, 650,
	651, 0, 84, 203, 204, 85, 614, 632, 652, 653,
	207, 0, 644, 0, 625, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 275, 93, 94, 0,
	626, 628, 0, 627, 629, 95, 96, 97, 98, 654,
	99, 655, 656, 0, 100, 0, 101, 0, 0, 0,
	647, 103, 0, 104, 0, 0, 0, 598, 105, 106,
	634, 635, 612, 0, 0, 107, 108, 657, 0, 109,
	0, 110, 0, 0, 276, 0, 111, 645, 0, 217,
	0, 112, 113, 114, 641, 643, 278, 0, 117, 0,
	115, 0, 277, 116, 658, 659, 660, 661, 0, 624,
	0, 279, 118, 280, 119, 120, 0, 122, 121, 0,
	646, 281, 123, 282, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 283, 131, 132, 135, 133,
	587, 134, 613, 642, 136, 662, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 284, 140, 285, 636, 141,
	142, 143, 144, 0, 637, 145, 231, 146, 0, 147,
	148, 149, 663, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 286, 157, 158, 602, 159, 0, 160, 161,
	162, 64, 234, 163, 164, 630, 165, 166, 287, 167,
	664, 236, 168, 0, 174, 169, 170, 171, 173, 665,
	172, 638, 0, 175, 66, 176, 177, 178, 0, 239,
	666, 667, 0, 0, 179, 639, 640, 611, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 631, 187, 0,
	188, 189, 190, 500, 668, 0, 0, 191, 0, 0,
	0, 62, 192, 193, 194, 195, 588, 63, 617, 606,
	607, 604, 605, 593, 0, 0, 0, 584, 585, 0,
	0, 0, 0, 586, 78, 79, 594, 80, 0, 0,
	0, 592, 633, 599, 0, 0, 0, 81, 82, 197,
	648, 199, 649, 83, 650, 651, 1228, 84, 203, 204,
	85, 614, 632, 652, 653, 207, 0, 644, 0, 625,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 275, 93, 94, 0, 626, 628, 0, 627, 629,
	95, 96, 97, 98, 654, 99, 655, 656, 0, 100,
	0, 101, 0, 0, 0, 647, 103, 0, 104, 0,
	0, 0, 598, 105, 106, 634, 635, 612, 0, 0,
	107, 108, 657, 0, 109, 0, 110, 0, 1233, 276,
	0, 111, 645, 0, 217, 0, 112, 113, 114, 641,
	643, 278, 0, 117, 0, 115, 0, 277, 116, 658,
	659, 660, 661, 0, 624, 0, 279, 118, 280, 119,
	120, 0, 122, 121, 1229, 646, 281, 123, 282, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	283, 131, 132, 135, 133, 587, 134, 613, 642, 136,
	662, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	284, 140, 285, 636, 141, 142, 143, 144, 0, 637,
	145, 231, 146, 0, 147, 148, 149, 663, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 286, 157, 158,
	602, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	630, 165, 166, 287, 167, 664, 236, 168, 0, 174,
	169, 170, 171, 173, 665, 172, 638, 0, 175, 0,
	176, 177, 178, 0, 239, 666, 667, 0, 1230, 179,
	639, 640, 611, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 631, 187, 0, 188, 189, 190, 244, 668,
	0, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 588, 0, 617, 606, 607, 604, 605, 593, 0,
	0, 0, 584, 585, 0, 0, 0, 0, 586, 78,
	79, 594, 80, 0, 0, 0, 592, 633, 599, 0,
	0, 0, 81, 82, 197, 648, 199, 649, 83, 650,
	651, 0, 84, 203, 204, 85, 614, 632, 652, 653,
	207, 0, 644, 0, 625, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 275, 93, 94, 0,
	626, 628, 0, 627, 629, 95, 96, 97, 98, 654,
	99, 655, 656, 0, 100, 0, 101, 0, 0, 0,
	647, 103, 0, 104, 0, 0, 0, 598, 105, 106,
	634, 635, 612, 0, 0, 107, 108, 657, 0, 109,
	0, 110, 0, 0, 276, 0, 111, 645, 0, 217,
	0, 112, 113, 114, 641, 643, 278, 0, 117, 0,
	115, 0, 277, 116, 658, 659, 660, 661, 0, 624,
	0, 279, 118, 280, 119, 120, 0, 122, 121, 0,
	646, 281, 123, 282, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 283, 131, 132, 135, 133,
	587, 134, 613, 642, 136, 662, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 284, 140, 285, 636, 141,
	142, 143, 144, 0, 637, 145, 231, 146, 0, 147,
	148, 149, 663, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 286, 157, 158, 602, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 630, 165, 166, 287, 167,
	664, 236, 168, 0, 174, 169, 170, 171, 173, 665,
	172, 638, 0, 175, 0, 176, 177, 178, 0, 239,
	666, 667, 0, 0, 179, 639, 640, 611, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 631, 187, 0,
	188, 189, 190, 244, 668, 0, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 588, 0, 0, 0,
	0, 617, 606, 607, 604, 605, 593, 584, 585, 0,
	0, 0, 0, 586, 927, 1179, 594, 78, 79, 0,
	80, 592, 0, 0, 0, 633, 599, 0, 0, 0,
	81, 82, 197, 648, 199, 649, 83, 650, 651, 0,
	84, 203, 204, 85, 614, 632, 652, 653, 207, 0,
	644, 0, 625, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 275, 93, 94, 0, 626, 628,
	0, 627, 629, 95, 96, 97, 98, 654, 99, 655,
	656, 0, 100, 0, 101, 0, 0, 0, 647, 103,
	0, 104, 0, 0, 0, 598, 105, 106, 634, 635,
	612, 0, 0, 107, 108, 657, 0, 109, 0, 110,
	0, 0, 276, 0, 111, 645, 0, 217, 0, 112,
	113, 114, 641, 643, 278, 0, 117, 0, 115, 0,
	277, 116, 658, 659, 660, 661, 0, 624, 0, 279,
	118, 280, 119, 120, 0, 122, 121, 0, 646, 281,
	123, 282, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 283, 131, 132, 135, 133, 587, 134,
	613, 642, 136, 662, 137, 138, 0, 0, 0, 0,
	0, 139, 228, 284, 140, 285, 636, 141, 142, 143,
	144, 0, 637, 145, 231, 146, 0, 147, 148, 149,
	663, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	286, 157, 158, 602, 159, 0, 160, 161, 162, 0,
	234, 163, 164, 630, 165, 166, 287, 167, 664, 236,
	168, 0, 174, 169, 170, 171, 173, 665, 172, 638,
	0, 175, 0, 176, 177, 178, 0, 239, 666, 667,
	0, 0, 179, 639, 640, 611, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 631, 187, 0, 188, 189,
	190, 244, 668, 0, 0, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 588, 0, 617, 606, 607, 604,
	605, 593, 0, 0, 0, 584, 585, 582, 0, 0,
	0, 586, 78, 79, 594, 80, 0, 0, 0, 592,
	633, 599, 0, 0, 0, 81, 82, 197, 648, 199,
	649, 83, 650, 651, 0, 84, 203, 204, 85, 614,
	632, 652, 653, 207, 0, 644, 0, 625, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 275,
	93, 94, 0, 626, 628, 0, 627, 629, 95, 96,
	97, 98, 654, 99, 655, 656, 0, 100, 0, 101,
	0, 0, 0, 647, 103, 0, 104, 0, 0, 0,
	598, 105, 106, 634, 635, 612, 0, 0, 107, 108,
	657, 0, 109, 0, 110, 0, 0, 276, 0, 111,
	645, 0, 217, 0, 112, 113, 114, 641, 643, 278,
	0, 117, 0, 115, 0, 277, 116, 658, 659, 660,
	661, 0, 624, 0, 279, 118, 280, 119, 120, 0,
	122, 121, 0, 646, 281, 123, 282, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 283, 131,
	132, 135, 133, 587, 134, 613, 642, 136, 662, 137,
	138, 0, 0, 0, 0, 0, 139, 228, 284, 140,
	285, 636, 141, 142, 143, 144, 0, 637, 145, 231,
	146, 0, 147, 148, 149, 663, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 286, 157, 158, 602, 159,
	0, 160, 161, 162, 0, 234, 163, 164, 630, 165,
	166, 287, 167, 664, 236, 168, 0, 174, 169, 170,
	171, 173, 665, 172, 638, 0, 175, 0, 176, 177,
	178, 0, 239, 666, 667, 0, 0, 179, 639, 640,
	611, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	631, 187, 0, 188, 189, 190, 244, 668, 0, 0,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 585, 0, 0, 0, 0, 586, 0, 0, 594,
	1625, 0, 0, 0, 592, 617, 606, 607, 604, 605,
	593, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 633,
	599, 0, 0, 0, 81, 82, 197, 648, 199, 649,
	83, 650, 651, 0, 84, 203, 204, 85, 614, 632,
	652, 653, 207, 0, 644, 0, 625, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 275, 93,
	94, 0, 626, 628, 0, 627, 629, 95, 96, 97,
	98, 654, 99, 655, 656, 0, 100, 0, 101, 0,
	0, 0, 647, 103, 0, 104, 0, 0, 0, 598,
	105, 106, 634, 635, 612, 0, 0, 107, 108, 657,
	0, 109, 0, 110, 0, 0, 276, 0, 111, 645,
	0, 217, 0, 112, 113, 114, 641, 643, 278, 0,
	117, 0, 115, 0, 277, 116, 658, 659, 660, 661,
	0, 624, 0, 279, 118, 280, 119, 120, 0, 122,
	121, 0, 646, 281, 123, 282, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 283, 131, 132,
	135, 133, 587, 134, 613, 642, 136, 662, 137, 138,
	0, 0, 0, 0, 0, 139, 228, 284, 140, 285,
	636, 141, 142, 143, 144, 0, 637, 145, 231, 146,
	0, 147, 148, 149, 663, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 286, 157, 158, 602, 159, 0,
	160, 161, 162, 0, 234, 163, 164, 630, 165, 166,
	287, 167, 664, 236, 168, 0, 174, 169, 170, 171,
	173, 665, 172, 638, 0, 175, 0, 176, 177, 178,
	0, 239, 666, 667, 0, 0, 179, 639, 640, 611,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 631,
	187, 0, 188, 189, 190, 244, 668, 1579, 0, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 588, 0,
	617, 606, 607, 604, 605, 593, 0, 0, 0, 584,
	585, 0, 0, 0, 0, 586, 78, 79, 594, 80,
	0, 0, 0, 592, 633, 599, 0, 0, 0, 81,
	82, 197, 648, 199, 649, 83, 650, 651, 0, 84,
	203, 204, 85, 614, 632, 652, 653, 207, 0, 644,
	0, 625, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 275, 93, 94, 0, 626, 628, 0,
	627, 629, 95, 96, 97, 98, 654, 99, 655, 656,
	0, 100, 0, 101, 0, 0, 0, 647, 103, 0,
	104, 0, 0, 0, 598, 105, 106, 634, 635, 612,
	0, 0, 107, 108, 657, 0, 109, 0, 110, 0,
	0, 276, 0, 111, 645, 0, 217, 0, 112, 113,
	114, 641, 643, 278, 0, 117, 0, 115, 0, 277,
	116, 658, 659, 660, 661, 0, 624, 0, 279, 118,
	280, 119, 120, 0, 122, 121, 0, 646, 281, 123,
	282, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 283, 131, 132, 135, 133, 587, 134, 613,
	642, 136, 662, 137, 138, 0, 0, 0, 0, 0,
	139, 228, 284, 140, 285, 636, 141, 142, 143, 144,
	0, 637, 145, 231, 146, 0, 147, 148, 149, 663,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 286,
	157, 158, 602, 159, 0, 160, 161, 162, 0, 234,
	163, 164, 630, 165, 166, 287, 167, 664, 236, 168,
	0, 174, 169, 170, 171, 173, 665, 172, 638, 0,
	175, 0, 176, 177, 178, 0, 239, 666, 667, 0,
	0, 179, 639, 640, 611, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 631, 187, 0, 188, 189, 190,
	244, 668, 0, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 588, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 585, 0, 0, 0, 0,
	586, 0, 0, 594, 1574, 0, 0, 0, 592, 617,
	606, 607, 604, 605, 593, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 0, 80, 0,
	0, 0, 0, 633, 599, 0, 0, 0, 81, 82,
	197, 648, 199, 649, 83, 650, 651, 0, 84, 203,
	204, 85, 614, 632, 652, 653, 207, 0, 644, 0,
	625, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 275, 93, 94, 0, 626, 628, 0, 627,
	629, 95, 96, 97, 98, 654, 99, 655, 656, 683,
	100, 0, 101, 0, 0, 0, 647, 103, 0, 104,
	0, 0, 0, 598, 105, 106, 634, 635, 612, 0,
	0, 107, 108, 657, 0, 109, 0, 110, 0, 0,
	276, 0, 111, 645, 0, 217, 0, 112, 113, 114,
	641, 643, 278, 0, 117, 0, 115, 0, 277, 116,
	658, 659, 660, 661, 0, 624, 0, 279, 118, 280,
	119, 120, 0, 122, 121, 0, 646, 281, 123, 282,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 283, 131, 132, 135, 133, 587, 134, 613, 642,
	136, 662, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 284, 140, 285, 636, 141, 142, 143, 144, 0,
	637, 145, 231, 146, 0, 147, 148, 149, 663, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 286, 157,
	158, 602, 159, 0, 160, 161, 162, 0, 234, 163,
	164, 630, 165, 166, 287, 167, 664, 236, 168, 0,
	174, 169, 170, 171, 173, 665, 172, 638, 0, 175,
	0, 176, 177, 178, 0, 239, 666, 667, 0, 0,
	179, 639, 640, 611, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 631, 187, 0, 188, 189, 190, 244,
	668, 0, 0, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 588, 0, 617, 606, 607, 604, 605, 593,
	0, 0, 0, 584, 585, 0, 0, 0, 0, 586,
	78, 79, 594, 80, 0, 0, 0, 592, 633, 599,
	0, 0, 0, 81, 82, 197, 648, 199, 649, 83,
	650, 651, 0, 84, 203, 204, 85, 614, 632, 652,
	653, 207, 0, 644, 0, 625, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 275, 93, 94,
	0, 626, 628, 0, 627, 629, 95, 96, 97, 98,
	654, 99, 655, 656, 0, 100, 0, 101, 0, 0,
	0, 647, 103, 0, 104, 0, 0, 0, 598, 105,
	106, 634, 635, 612, 0, 0, 107, 108, 657, 0,
	109, 0, 110, 0, 1233, 276, 0, 111, 645, 0,
	217, 0, 112, 113, 114, 641, 643, 278, 0, 117,
	0, 115, 0, 277, 116, 658, 659, 660, 661, 0,
	624, 0, 279, 118, 280, 119, 120, 0, 122, 121,
	0, 646, 281, 123, 282, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 283, 131, 132, 135,
	133, 587, 134, 613, 642, 136, 662, 137, 138, 0,
	0, 0, 0, 0, 139, 228, 284, 140, 285, 636,
	141, 142, 143, 144, 0, 637, 145, 231, 146, 0,
	147, 148, 149, 663, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 286, 157, 158, 602, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 630, 165, 166, 287,
	167, 664, 236, 168, 0, 174, 169, 170, 171, 173,
	665, 172, 638, 0, 175, 0, 176, 177, 178, 0,
	239, 666, 667, 0, 0, 179, 639, 640, 611, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 631, 187,
	0, 188, 189, 190, 244, 668, 0, 0, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 588, 0, 617,
	606, 607, 604, 605, 593, 0, 0, 0, 584, 585,
	0, 0, 0, 0, 586, 78, 79, 594, 80, 0,
	0, 0, 592, 633, 599, 0, 0, 0, 81, 82,
	197, 648, 199, 649, 83, 650, 651, 0, 84, 203,
	204, 85, 614, 632, 652, 653, 207, 0, 644, 0,
	625, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 275, 93, 94, 0, 626, 628, 0, 627,
	629, 95, 96, 97, 98, 654, 99, 655, 656, 0,
	100, 0, 101, 0, 0, 0, 647, 103, 0, 104,
	0, 0, 0, 598, 105, 106, 634, 635, 612, 0,
	0, 107, 108, 657, 0, 109, 0, 110, 0, 0,
	276, 0, 111, 645, 0, 217, 0, 112, 113, 114,
	641, 643, 278, 0, 117, 0, 115, 0, 277, 116,
	658, 659, 660, 661, 0, 624, 0, 279, 118, 280,
	119, 120, 0, 122, 121, 0, 646, 281, 123, 282,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 283, 131, 132, 135, 133, 587, 134, 613, 642,
	136, 662, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 284, 140, 285, 636, 141, 142, 143, 144, 0,
	637, 145, 231, 146, 0, 147, 148, 149, 663, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 286, 157,
	158, 602, 159, 0, 160, 161, 162, 0, 234, 163,
	164, 630, 165, 166, 287, 167, 664, 236, 168, 0,
	174, 169, 170, 171, 173, 665, 172, 638, 0, 175,
	0, 176, 177, 178, 0, 239, 666, 667, 0, 0,
	179, 639, 640, 611, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 631, 187, 0, 188, 189, 190, 244,
	668, 0, 0, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 588, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 585, 0, 0, 0, 0, 586,
	0, 0, 594, 1182, 0, 0, 0, 592, 617, 606,
	607, 604, 605, 593, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 859, 80, 0, 0,
	0, 0, 633, 599, 0, 0, 0, 81, 82, 197,
	648, 199, 649, 83, 650, 651, 0, 84, 203, 204,
	85, 614, 632, 652, 653, 207, 0, 644, 0, 625,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 275, 93, 94, 0, 626, 628, 0, 627, 629,
	95, 96, 97, 98, 654, 99, 655, 656, 0, 100,
	0, 101, 0, 0, 0, 647, 103, 0, 104, 0,
	0, 0, 598, 105, 106, 634, 635, 612, 0, 0,
	107, 108, 657, 0, 109, 0, 110, 0, 0, 276,
	0, 111, 645, 0, 217, 0, 112, 113, 114, 641,
	643, 278, 0, 117, 0, 115, 0, 277, 116, 658,
	659, 660, 661, 0, 624, 0, 279, 118, 280, 119,
	120, 0, 122, 121, 0, 646, 281, 123, 282, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	283, 131, 132, 135, 133, 587, 134, 613, 642, 136,
	662, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	284, 140, 285, 636, 141, 142, 143, 144, 0, 637,
	145, 231, 146, 0, 147, 148, 149, 663, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 286, 157, 158,
	602, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	630, 165, 166, 287, 167, 664, 236, 168, 0, 174,
	169, 170, 171, 173, 665, 172, 638, 0, 175, 0,
	176, 177, 178, 0, 239, 666, 667, 0, 0, 179,
	639, 640, 611, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 631, 187, 0, 188, 189, 190, 244, 668,
	0, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 588, 0, 617, 606, 607, 604, 605, 593, 0,
	0, 0, 584, 585, 0, 0, 0, 0, 586, 78,
	79, 594, 80, 0, 0, 0, 592, 633, 599, 0,
	0, 0, 81, 82, 197, 648, 199, 649, 83, 650,
	651, 0, 84, 203, 204, 85, 614, 632, 652, 653,
	207, 0, 644, 0, 625, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 275, 93, 1940, 0,
	626, 628, 0, 627, 629, 95, 96, 97, 98, 654,
	99, 655, 656, 0, 100, 0, 101, 0, 0, 0,
	647, 103, 0, 104, 0, 0, 0, 598, 105, 106,
	634, 635, 612, 0, 0, 107, 108, 657, 0, 109,
	0, 110, 0, 0, 276, 0, 111, 645, 0, 217,
	0, 112, 113, 114, 641, 643, 278, 0, 117, 0,
	115, 0, 277, 116, 658, 659, 660, 661, 0, 624,
	0, 279, 118, 280, 119, 120, 0, 122, 121, 0,
	646, 281, 123, 282, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 283, 131, 132, 135, 133,
	587, 134, 613, 642, 136, 662, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 284, 140, 285, 636, 141,
	142, 143, 144, 0, 637, 145, 231, 146, 0, 147,
	148, 149, 663, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 286, 157, 158, 602, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 630, 165, 166, 287, 167,
	664, 236, 168, 0, 174, 169, 170, 171, 173, 665,
	172, 638, 0, 175, 0, 176, 177, 178, 0, 239,
	666, 667, 0, 0, 179, 639, 640, 611, 180, 181,
	1939, 183, 0, 0, 184, 185, 186, 631, 187, 0,
	188, 189, 190, 244, 668, 0, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 588, 0, 617, 606,
	607, 604, 605, 593, 0, 0, 0, 584, 585, 0,
	0, 0, 0, 586, 78, 79, 594, 80, 0, 0,
	0, 592, 633, 599, 0, 0, 0, 81, 82, 1938,
	648, 199, 649, 83, 650, 651, 0, 84, 203, 204,
	85, 614, 632, 652, 653, 207, 0, 644, 0, 625,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 275, 93, 1940, 0, 626, 628, 0, 627, 629,
	95, 96, 97, 98, 654, 99, 655, 656, 0, 100,
	0, 101, 0, 0, 0, 647, 103, 0, 104, 0,
	0, 0, 598, 105, 106, 634, 635, 612, 0, 0,
	107, 108, 657, 0, 109, 0, 110, 0, 0, 276,
	0, 111, 645, 0, 217, 0, 112, 113, 114, 641,
	643, 278, 0, 117, 0, 115, 0, 277, 116, 658,
	659, 660, 661, 0, 624, 0, 279, 118, 280, 119,
	120, 0, 122, 121, 0, 646, 281, 123, 282, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	283, 131, 132, 135, 133, 587, 134, 613, 642, 136,
	662, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	284, 140, 285, 636, 141, 142, 143, 144, 0, 637,
	145, 231, 146, 0, 147, 148, 149, 663, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 286, 157, 158,
	602, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	630, 165, 166, 287, 167, 664, 236, 168, 0, 174,
	169, 170, 171, 173, 665, 172, 638, 0, 175, 0,
	176, 177, 178, 0, 239, 666, 667, 0, 0, 179,
	639, 640, 611, 180, 181, 1939, 183, 0, 0, 184,
	185, 186, 631, 187, 0, 188, 189, 190, 244, 668,
	0, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 588, 0, 617, 606, 607, 604, 605, 593, 0,
	0, 0, 584, 585, 0, 0, 0, 0, 586, 78,
	79, 594, 80, 0, 0, 0, 592, 633, 599, 0,
	0, 0, 81, 82, 197, 648, 199, 649, 83, 650,
	651, 0, 84, 203, 204, 85, 614, 632, 652, 653,
	207, 0, 644, 0, 625, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 275, 93, 94, 0,
	626, 628, 0, 627, 629, 95, 96, 97, 98, 654,
	99, 655, 656, 0, 100, 0, 101, 0, 0, 0,
	647, 103, 0, 104, 0, 0, 0, 598, 105, 106,
	634, 635, 612, 0, 0, 107, 108, 657, 0, 109,
	0, 110, 0, 0, 276, 0, 111, 645, 0, 217,
	0, 112, 113, 114, 641, 643, 278, 0, 117, 0,
	115, 0, 277, 116, 658, 659, 660, 661, 0, 624,
	0, 279, 118, 280, 119, 120, 0, 122, 121, 0,
	646, 281, 123, 282, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 283, 131, 132, 135, 133,
	587, 134, 613, 642, 136, 662, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 284, 140, 285, 636, 141,
	142, 143, 144, 0, 637, 145, 231, 146, 0, 147,
	148, 149, 663, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 286, 157, 158, 602, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 630, 165, 166, 287, 167,
	664, 236, 168, 0, 174, 169, 170, 171, 173, 665,
	172, 638, 0, 175, 0, 176, 177, 178, 0, 239,
	666, 667, 0, 0, 179, 639, 640, 611, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 631, 187, 0,
	188, 189, 190, 244, 668, 0, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 588, 0, 1205, 606,
	607, 604, 605, 593, 0, 0, 0, 584, 585, 0,
	0, 0, 0, 586, 78, 79, 594, 80, 0, 0,
	0, 592, 633, 599, 0, 0, 0, 81, 82, 197,
	648, 199, 649, 83, 650, 651, 0, 84, 203, 204,
	85, 614, 632, 652, 653, 207, 0, 644, 0, 625,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 275, 93, 94, 0, 626, 628, 0, 627, 629,
	95, 96, 97, 98, 654, 1208, 655, 656, 0, 100,
	0, 101, 0, 0, 0, 647, 103, 0, 104, 0,
	0, 0, 598, 105, 106, 634, 635, 612, 0, 0,
	107, 108, 657, 0, 109, 0, 110, 0, 0, 276,
	0, 111, 645, 0, 217, 0, 112, 113, 1209, 641,
	643, 278, 0, 117, 0, 115, 0, 277, 116, 658,
	659, 660, 661, 0, 624, 0, 279, 118, 280, 119,
	120, 0, 122, 121, 0, 646, 281, 123, 282, 0,
	124, 0, 0, 125, 0, 126, 1210, 1207, 129, 130,
	283, 131, 132, 135, 133, 587, 134, 613, 642, 136,
	662, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	284, 140, 285, 636, 141, 142, 143, 144, 0, 637,
	145, 231, 146, 0, 147, 148, 149, 663, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 286, 157, 158,
	602, 159, 0, 160, 161, 1211, 0, 234, 163, 164,
	630, 165, 166, 287, 167, 664, 236, 168, 0, 174,
	169, 170, 171, 173, 665, 172, 638, 0, 175, 0,
	176, 177, 178, 0, 239, 666, 667, 0, 0, 179,
	639, 640, 611, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 631, 187, 0, 188, 189, 190, 244, 668,
	0, 0, 191, 0, 0, 0, 0, 192, 193, 1206,
	195, 588, 0, 617, 606, 607, 604, 605, 593, 0,
	0, 0, 584, 585, 0, 0, 0, 0, 586, 78,
	79, 594, 80, 0, 0, 0, 592, 633, 599, 0,
	0, 0, 81, 82, 197, 648, 199, 649, 83, 650,
	651, 0, 84, 203, 204, 85, 614, 632, 652, 653,
	207, 0, 644, 0, 625, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 275, 93, 94, 0,
	626, 628, 0, 627, 629, 95, 96, 97, 98, 654,
	99, 655, 656, 0, 100, 0, 101, 0, 0, 0,
	647, 103, 0, 104, 0, 0, 0, 598, 105, 106,
	634, 635, 612, 0, 0, 107, 108, 657, 0, 109,
	0, 110, 0, 0, 276, 0, 111, 645, 0, 217,
	0, 112, 113, 114, 641, 643, 278, 0, 117, 0,
	115, 0, 277, 116, 658, 659, 660, 661, 0, 624,
	0, 279, 118, 280, 119, 120, 0, 122, 121, 0,
	646, 281, 123, 282, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 283, 131, 132, 135, 133,
	0, 134, 613, 642, 136, 662, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 284, 140, 285, 636, 141,
	142, 143, 144, 0, 637, 145, 231, 146, 0, 147,
	148, 149, 663, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 286, 157, 158, 1223, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 630, 165, 166, 287, 167,
	664, 236, 168, 0, 174, 169, 170, 171, 173, 665,
	172, 638, 0, 175, 0, 176, 177, 178, 0, 239,
	666, 667, 0, 0, 179, 639, 640, 611, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 631, 187, 0,
	188, 189, 190, 244, 668, 0, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 0, 0, 617, 0,
	0, 0, 0, 0, 0, 0, 0, 1219, 1220, 0,
	0, 0, 0, 1221, 78, 79, 1222, 80, 0, 0,
	0, 592, 633, 0, 0, 0, 0, 81, 82, 197,
	198, 199, 200, 83, 201, 202, 0, 84, 203, 204,
	85, 0, 632, 205, 206, 207, 0, 644, 0, 625,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 275, 93, 94, 0, 626, 628, 0, 627, 629,
	95, 96, 97, 98, 209, 99, 210, 211, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 212, 105, 106, 634, 635, 0, 0, 0,
	107, 108, 215, 0, 109, 0, 110, 0, 0, 276,
	0, 111, 645, 0, 217, 0, 112, 113, 114, 641,
	643, 278, 0, 117, 0, 115, 0, 277, 116, 220,
	221, 222, 223, 0, 224, 0, 279, 118, 280, 119,
	120, 0, 122, 121, 0, 646, 281, 123, 282, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	283, 131, 132, 135, 133, 0, 134, 0, 642, 136,
	227, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	284, 140, 285, 636, 141, 142, 143, 144, 0, 637,
	145, 231, 146, 0, 147, 148, 149, 232, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 286, 157, 158,
	233, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	630, 165, 166, 287, 167, 235, 236, 168, 0, 174,
	169, 170, 171, 173, 237, 172, 638, 0, 175, 0,
	176, 177, 178, 0, 239, 240, 241, 0, 0, 179,
	639, 640, 0, 180, 181, 182, 183, 496, 0, 184,
	185, 186, 631, 187, 0, 188, 189, 190, 244, 245,
	0, 0, 191, 78, 79, 0, 80, 192, 193, 194,
	195, 196, 0, 0, 0, 0, 81, 82, 197, 198,
	199, 200, 83, 201, 202, 0, 84, 203, 204, 85,
	0, 1692, 205, 206, 207, 0, 208, 0, 274, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	275, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 209, 99, 210, 211, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 212, 105, 106, 213, 214, 0, 0, 0, 107,
	108, 215, 0, 109, 0, 110, 0, 0, 276, 0,
	111, 216, 0, 217, 0, 112, 113, 114, 218, 219,
	278, 0, 117, 0, 115, 0, 277, 116, 220, 221,
	222, 223, 0, 224, 0, 279, 118, 280, 119, 120,
	0, 122, 121, 0, 225, 281, 123, 282, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 283,
	131, 132, 135, 133, 0, 134, 0, 226, 136, 227,
	137, 138, 0, 0, 0, 0, 0, 139, 228, 284,
	140, 285, 229, 141, 142, 143, 144, 0, 230, 145,
	231, 146, 0, 147, 148, 149, 232, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 286, 157, 158, 233,
	159, 0, 160, 161, 162, 64, 234, 163, 164, 0,
	165, 166, 287, 167, 235, 236, 168, 0, 174, 169,
	170, 171, 173, 237, 172, 238, 0, 175, 66, 176,
	177, 178, 0, 239, 240, 241, 0, 0, 179, 242,
	243, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 500, 245, 0,
	0, 191, 0, 0, 0, 62, 192, 193, 194, 195,
	0, 63, 496, 809, 0, 810, 805, 800, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 79,
	61, 80, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 81, 82, 197, 198, 199, 200, 83, 201, 202,
	0, 84, 203, 204, 85, 0, 0, 205, 206, 207,
	0, 208, 0, 274, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 275, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 209, 99,
	210, 211, 813, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 212, 105, 106, 213,
	214, 802, 0, 0, 107, 108, 215, 0, 109, 0,
	110, 0, 0, 276, 0, 111, 216, 0, 217, 0,
	112, 113, 114, 218, 219, 278, 0, 117, 0, 115,
	0, 277, 116, 220, 221, 222, 223, 0, 224, 0,
	279, 118, 280, 119, 120, 0, 122, 121, 0, 225,
	281, 123, 282, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 283, 131, 132, 135, 133, 0,
	134, 0, 226, 136, 227, 137, 138, 0, 803, 0,
	0, 0, 139, 228, 284, 140, 285, 229, 141, 142,
	143, 144, 0, 230, 145, 231, 146, 0, 147, 148,
	149, 232, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 286, 157, 158, 233, 159, 0, 160, 161, 162,
	0, 234, 163, 164, 0, 165, 166, 287, 167, 235,
	236, 168, 0, 174, 169, 170, 171, 173, 237, 172,
	238, 0, 175, 0, 176, 177, 178, 0, 239, 240,
	241, 0, 0, 179, 242, 243, 801, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 244, 245, 496, 809, 191, 810, 805, 800,
	0, 192, 193, 194, 195, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 811, 806, 196, 0,
	0, 0, 0, 81, 82, 197, 198, 199, 200, 83,
	201, 202, 0, 84, 203, 204, 85, 0, 0, 205,
	206, 207, 0, 208, 0, 274, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 275, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	209, 99, 210, 211, 796, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 212, 105,
	106, 213, 214, 802, 0, 0, 107, 108, 215, 0,
	109, 0, 110, 0, 0, 276, 0, 111, 216, 0,
	217, 0, 112, 113, 114, 218, 219, 278, 0, 117,
	0, 115, 0, 277, 116, 220, 221, 222, 223, 0,
	224, 0, 279, 118, 280, 119, 120, 0, 122, 121,
	0, 225, 281, 123, 282, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 283, 131, 132, 135,
	133, 0, 134, 0, 226, 136, 227, 137, 138, 0,
	803, 0, 0, 0, 139, 228, 284, 140, 285, 229,
	141, 142, 143, 144, 0, 230, 145, 231, 146, 0,
	147, 148, 149, 232, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 286, 157, 158, 233, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 0, 165, 166, 287,
	167, 235, 236, 168, 0, 174, 169, 170, 171, 173,
	237, 172, 238, 0, 175, 0, 176, 177, 178, 0,
	239, 240, 241, 0, 0, 179, 242, 243, 801, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 244, 245, 496, 809, 191, 810,
	805, 800, 0, 192, 193, 194, 195, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 811, 806,
	196, 0, 0, 0, 0, 81, 82, 197, 198, 199,
	200, 83, 201, 202, 0, 84, 203, 204, 85, 0,
	0, 205, 206, 207, 0, 208, 0, 274, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 275,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 209, 99, 210, 211, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	212, 105, 106, 213, 214, 802, 0, 0, 107, 108,
	215, 0, 109, 0, 110, 0, 0, 276, 0, 111,
	216, 0, 217, 0, 112, 113, 114, 218, 219, 278,
	0, 117, 0, 115, 0, 277, 116, 220, 221, 222,
	223, 0, 224, 0, 279, 118, 280, 119, 120, 0,
	122, 121, 0, 225, 281, 123, 282, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 283, 131,
	132, 135, 133, 0, 134, 0, 226, 136, 227, 137,
	138, 0, 803, 0, 0, 0, 139, 228, 284, 140,
	285, 229, 141, 142, 143, 144, 0, 230, 145, 231,
	146, 0, 147, 148, 149, 232, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 286, 157, 158, 233, 159,
	0, 160, 161, 162, 0, 234, 163, 164, 0, 165,
	166, 287, 167, 235, 236, 168, 0, 174, 169, 170,
	171, 173, 237, 172, 238, 0, 175, 0, 176, 177,
	178, 0, 239, 240, 241, 0, 0, 179, 242, 243,
	801, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 244, 245, 75, 0,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	811, 806, 196, 0, 0, 0, 0, 81, 82, 197,
	198, 199, 200, 83, 201, 202, 0, 84, 203, 204,
	85, 0, 0, 205, 206, 207, 0, 208, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 209, 99, 210, 211, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 212, 105, 106, 213, 214, 0, 0, 0,
	107, 108, 215, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 216, 0, 217, 0, 112, 113, 114, 218,
	219, 0, 0, 117, 0, 115, 0, 0, 116, 220,
	221, 222, 223, 0, 224, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 225, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 226, 136,
	227, 137, 138, 0, 0, 457, 0, 0, 139, 228,
	0, 140, 0, 229, 141, 142, 143, 144, 0, 230,
	145, 231, 146, 0, 147, 148, 149, 232, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	233, 159, 0, 160, 161, 162, 64, 234, 163, 164,
	0, 165, 166, 0, 167, 235, 236, 168, 0, 174,
	169, 170, 171, 173, 237, 172, 238, 0, 175, 66,
	176, 177, 178, 0, 239, 240, 241, 0, 0, 179,
	242, 243, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 500, 245,
	0, 0, 191, 75, 0, 0, 62, 192, 193, 194,
	195, 0, 63, 0, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 0, 0, 196, 0, 0,
	0, 1119, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 0, 84, 203, 204, 85, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 209,
	99, 210, 211, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 212, 105, 106,
	213, 214, 0, 0, 0, 107, 108, 215, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 216, 0, 217,
	0, 112, 113, 114, 218, 219, 0, 0, 117, 0,
	115, 0, 0, 116, 220, 221, 222, 223, 0, 224,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	225, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 226, 136, 227, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 0, 140, 0, 229, 141,
	142, 143, 144, 0, 230, 145, 231, 146, 0, 147,
	148, 149, 232, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 233, 159, 0, 160, 161,
	162, 64, 234, 163, 164, 0, 165, 166, 0, 167,
	235, 236, 168, 0, 174, 169, 170, 171, 173, 237,
	172, 238, 0, 175, 66, 176, 177, 178, 0, 239,
	240, 241, 0, 0, 179, 242, 243, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 500, 245, 0, 0, 191, 75, 0,
	0, 62, 192, 193, 194, 195, 0, 63, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 196, 0, 0, 0, 61, 81, 82, 197,
	198, 199, 200, 83, 201, 202, 0, 84, 203, 204,
	85, 0, 0, 205, 206, 207, 0, 208, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 209, 99, 210, 211, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 212, 105, 106, 213, 214, 0, 0, 0,
	107, 108, 215, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 216, 0, 217, 0, 112, 113, 114, 218,
	219, 0, 0, 117, 0, 115, 0, 0, 116, 220,
	221, 222, 223, 0, 224, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 225, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 226, 136,
	227, 137, 138, 0, 0, 457, 0, 0, 139, 228,
	0, 140, 0, 229, 141, 142, 143, 144, 0, 230,
	145, 231, 146, 0, 147, 148, 149, 232, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	233, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	0, 165, 166, 0, 167, 235, 236, 168, 0, 174,
	169, 170, 171, 173, 237, 172, 238, 0, 175, 0,
	176, 177, 178, 0, 239, 240, 241, 0, 0, 179,
	242, 243, 0, 180, 181, 182, 183, 75, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 244, 245,
	0, 0, 191, 78, 79, 0, 80, 192, 193, 194,
	195, 196, 0, 0, 0, 0, 81, 82, 197, 198,
	199, 200, 83, 201, 202, 0, 84, 203, 204, 85,
	0, 1119, 205, 206, 207, 0, 208, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 209, 99, 210, 211, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 212, 105, 106, 213, 214, 0, 0, 0, 107,
	108, 215, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 216, 0, 217, 0, 112, 113, 114, 218, 219,
	0, 0, 117, 0, 115, 0, 0, 116, 220, 221,
	222, 223, 0, 224, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 225, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 226, 136, 227,
	137, 138, 0, 0, 0, 0, 0, 139, 228, 0,
	140, 0, 229, 141, 142, 143, 144, 0, 230, 145,
	231, 146, 0, 147, 148, 149, 232, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 233,
	159, 0, 160, 161, 162, 0, 234, 163, 164, 0,
	165, 166, 0, 167, 235, 236, 168, 0, 174, 169,
	170, 171, 173, 237, 172, 238, 0, 175, 0, 176,
	177, 178, 0, 239, 240, 241, 0, 0, 179, 242,
	243, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 244, 245, 0,
	0, 191, 0, 75, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 0, 0, 196, 0, 0,
	0, 701, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 0, 84, 203, 204, 85, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 209,
	99, 210, 211, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 212, 105, 106,
	213, 214, 0, 0, 0, 107, 108, 215, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 216, 0, 217,
	0, 112, 113, 114, 218, 219, 0, 0, 117, 0,
	115, 0, 0, 116, 220, 221, 222, 223, 0, 224,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	225, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 226, 136, 227, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 0, 140, 0, 229, 141,
	142, 143, 144, 0, 230, 145, 231, 146, 0, 147,
	148, 149, 232, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 233, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 0, 165, 166, 0, 167,
	235, 236, 168, 0, 174, 169, 170, 171, 173, 237,
	172, 238, 0, 175, 0, 176, 177, 178, 0, 239,
	240, 241, 0, 0, 179, 242, 243, 0, 180, 181,
	182, 183, 75, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 244, 245, 0, 0, 191, 78, 79,
	0, 80, 192, 193, 194, 195, 196, 0, 0, 0,
	0, 81, 82, 197, 198, 199, 200, 83, 201, 202,
	0, 84, 203, 204, 85, 0, 1022, 205, 206, 207,
	0, 208, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 209, 99,
	210, 211, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 212, 105, 106, 213,
	214, 0, 0, 0, 107, 108, 215, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 216, 0, 217, 0,
	112, 113, 114, 218, 219, 0, 0, 117, 0, 115,
	0, 0, 116, 220, 221, 222, 223, 0, 224, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 225,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 226, 136, 227, 137, 138, 0, 0, 0,
	0, 0, 139, 228, 0, 140, 0, 229, 141, 142,
	143, 144, 0, 230, 145, 231, 146, 0, 147, 148,
	149, 232, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 233, 159, 0, 160, 161, 162,
	0, 234, 163, 164, 0, 165, 166, 0, 167, 235,
	236, 168, 0, 174, 169, 170, 171, 173, 237, 172,
	238, 0, 175, 0, 176, 177, 178, 0, 239, 240,
	241, 0, 0, 179, 242, 243, 0, 180, 181, 182,
	183, 75, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 244, 245, 0, 0, 191, 78, 79, 0,
	80, 192, 193, 194, 195, 196, 0, 0, 0, 0,
	81, 82, 197, 198, 199, 200, 83, 201, 202, 0,
	84, 203, 204, 85, 0, 1589, 205, 206, 207, 0,
	208, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 209, 99, 210,
	211, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 212, 105, 106, 213, 214,
	0, 0, 0, 107, 108, 215, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 216, 0, 217, 0, 112,
	113, 114, 218, 219, 0, 0, 117, 0, 115, 0,
	0, 116, 220, 221, 222, 223, 0, 224, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 225, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 226, 136, 227, 137, 138, 0, 0, 0, 0,
	0, 139, 228, 0, 140, 0, 229, 141, 142, 143,
	144, 0, 230, 145, 231, 146, 0, 147, 148, 149,
	232, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 233, 159, 0, 160, 161, 162, 0,
	234, 163, 164, 0, 165, 166, 0, 167, 235, 236,
	168, 0, 174, 169, 170, 171, 173, 237, 172, 238,
	0, 175, 0, 176, 177, 178, 0, 239, 240, 241,
	0, 0, 179, 242, 243, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 244, 245, 0, 0, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 617, 606, 607, 604, 605, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 679, 0, 0, 0, 196, 0,
	0, 0, 0, 81, 82, 197, 648, 199, 649, 83,
	650, 651, 0, 84, 203, 204, 85, 0, 0, 652,
	653, 207, 0, 208, 0, 274, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 275, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	654, 99, 655, 656, 0, 100, 0, 101, 0, 0,
	0, 647, 103, 0, 104, 0, 0, 0, 212, 105,
	106, 213, 214, 612, 0, 0, 107, 108, 657, 0,
	109, 0, 110, 0, 0, 276, 0, 111, 216, 0,
	217, 0, 112, 113, 114, 218, 219, 278, 0, 117,
	0, 115, 0, 277, 116, 658, 659, 660, 661, 0,
	624, 0, 279, 118, 280, 119, 120, 0, 122, 121,
	0, 225, 281, 123, 282, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 283, 131, 132, 135,
	133, 0, 134, 613, 226, 136, 662, 137, 138, 0,
	0, 0, 0, 0, 139, 228, 284, 140, 285, 229,
	141, 142, 143, 144, 0, 230, 145, 231, 146, 0,
	147, 148, 149, 663, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 286, 157, 158, 233, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 0, 165, 166, 287,
	167, 664, 236, 168, 0, 174, 169, 170, 171, 173,
	665, 172, 238, 0, 175, 0, 176, 177, 178, 0,
	239, 666, 667, 0, 0, 179, 242, 243, 611, 180,
	181, 182, 183, 75, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 244, 668, 0, 0, 191, 78,
	79, 0, 80, 192, 193, 194, 195, 196, 0, 0,
	0, 0, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 0, 84, 203, 204, 85, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 780, 98, 209,
	99, 210, 211, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 212, 105, 106,
	213, 214, 0, 0, 0, 107, 108, 215, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 216, 0, 217,
	0, 112, 113, 114, 218, 219, 0, 0, 117, 0,
	115, 0, 0, 116, 220, 221, 222, 223, 0, 224,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	225, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 226, 136, 227, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 0, 140, 0, 229, 141,
	142, 143, 144, 0, 230, 145, 231, 146, 0, 147,
	148, 149, 232, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 233, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 0, 165, 166, 0, 167,
	235, 236, 168, 0, 174, 169, 170, 171, 173, 237,
	172, 238, 0, 175, 779, 176, 177, 178, 0, 239,
	240, 241, 0, 0, 179, 242, 243, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 244, 245, 0, 75, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 0, 783,
	196, 0, 0, 0, 0, 81, 82, 197, 198, 199,
	200, 83, 201, 202, 0, 84, 203, 204, 85, 0,
	0, 205, 206, 207, 0, 208, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 209, 99, 210, 211, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	212, 105, 106, 213, 214, 0, 0, 0, 107, 108,
	215, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	216, 0, 217, 0, 112, 113, 114, 218, 219, 0,
	0, 117, 0, 115, 0, 0, 116, 220, 221, 222,
	223, 0, 224, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 225, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 226, 136, 227, 137,
	138, 0, 0, 0, 0, 0, 139, 228, 0, 140,
	0, 229, 141, 142, 143, 144, 0, 230, 145, 231,
	146, 0, 147, 148, 149, 232, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 233, 159,
	0, 160, 161, 162, 0, 234, 163, 164, 0, 165,
	166, 0, 167, 235, 236, 168, 0, 174, 169, 170,
	171, 173, 237, 172, 238, 0, 175, 0, 176, 177,
	178, 0, 239, 240, 241, 0, 0, 179, 242, 243,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 244, 245, 0, 496,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 78, 79, 0, 80, 0,
	0, 0, 783, 196, 0, 0, 0, 0, 81, 82,
	197, 198, 199, 200, 83, 201, 202, 0, 84, 203,
	204, 85, 0, 0, 205, 206, 207, 0, 208, 0,
	274, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 275, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 209, 99, 210, 211, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 212, 105, 106, 213, 214, 0, 0,
	0, 107, 108, 215, 0, 109, 0, 110, 0, 0,
	276, 0, 111, 216, 0, 217, 0, 112, 113, 114,
	218, 219, 278, 0, 117, 0, 115, 0, 277, 116,
	220, 221, 222, 223, 0, 224, 0, 279, 118, 280,
	119, 120, 0, 122, 121, 0, 225, 281, 123, 282,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 283, 131, 132, 135, 133, 0, 134, 0, 226,
	136, 227, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 284, 140, 285, 229, 141, 142, 143, 144, 0,
	230, 145, 231, 146, 0, 147, 148, 149, 232, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 286, 157,
	158, 233, 159, 0, 160, 161, 162, 0, 234, 163,
	164, 0, 165, 166, 287, 167, 235, 236, 168, 0,
	174, 169, 170, 171, 173, 237, 172, 238, 0, 175,
	0, 176, 177, 178, 0, 239, 240, 241, 0, 0,
	179, 242, 243, 0, 180, 181, 182, 183, 75, 0,
	184, 185, 186, 0, 187, 0, 188, 189, 190, 244,
	245, 0, 0, 191, 78, 79, 0, 80, 192, 193,
	194, 195, 196, 0, 0, 0, 0, 81, 82, 197,
	198, 199, 200, 83, 201, 202, 0, 84, 203, 204,
	85, 0, 0, 205, 206, 207, 986, 208, 0, 0,
	0, 86, 87, 88, 0, 89, 984, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 209, 99, 210, 211, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 212, 105, 106, 213, 214, 0, 1091, 0,
	107, 108, 215, 0, 109, 0, 110, 989, 0, 0,
	0, 111, 216, 0, 217, 0, 112, 113, 114, 218,
	219, 0, 0, 117, 1089, 115, 0, 0, 116, 220,
	221, 222, 223, 0, 224, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 225, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 226, 136,
	227, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	0, 140, 0, 229, 141, 142, 143, 144, 0, 230,
	145, 231, 146, 988, 147, 148, 149, 232, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	233, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	0, 165, 166, 0, 167, 235, 236, 168, 0, 174,
	169, 170, 171, 173, 237, 172, 238, 0, 175, 0,
	176, 177, 178, 0, 239, 240, 241, 0, 0, 179,
	242, 243, 0, 180, 181, 182, 183, 75, 1090, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 244, 245,
	0, 0, 191, 78, 79, 0, 80, 192, 193, 194,
	195, 196, 0, 0, 0, 0, 81, 82, 197, 198,
	199, 200, 83, 201, 202, 0, 84, 203, 204, 85,
	0, 0, 205, 206, 207, 986, 208, 0, 0, 981,
	86, 87, 88, 0, 89, 984, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 209, 99, 210, 211, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 212, 105, 106, 213, 214, 0, 0, 0, 107,
	108, 215, 0, 109, 0, 110, 989, 0, 0, 0,
	111, 216, 0, 217, 0, 112, 113, 114, 980, 219,
	0, 0, 117, 0, 115, 0, 0, 116, 220, 221,
	222, 223, 0, 224, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 225, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 226, 136, 227,
	137, 138, 0, 0, 0, 0, 0, 139, 228, 0,
	140, 0, 229, 141, 142, 143, 144, 0, 230, 145,
	231, 146, 988, 147, 148, 149, 232, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 233,
	159, 0, 160, 161, 162, 0, 234, 163, 164, 0,
	165, 166, 0, 167, 235, 236, 168, 0, 174, 169,
	170, 171, 173, 237, 172, 238, 0, 175, 0, 176,
	177, 178, 0, 239, 240, 241, 0, 0, 179, 242,
	243, 0, 180, 181, 182, 183, 75, 987, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 244, 245, 0,
	0, 191, 78, 79, 0, 80, 192, 193, 194, 195,
	196, 0, 1558, 0, 0, 81, 82, 197, 198, 199,
	200, 83, 201, 202, 0, 84, 203, 204, 85, 0,
	0, 205, 206, 207, 0, 208, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 209, 99, 210, 211, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	212, 105, 106, 213, 214, 0, 0, 0, 107, 108,
	215, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	216, 0, 217, 0, 112, 113, 114, 218, 219, 0,
	0, 117, 0, 115, 0, 0, 116, 220, 221, 222,
	223, 0, 224, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 225, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 226, 136, 227, 137,
	138, 0, 0, 0, 0, 0, 139, 228, 0, 140,
	0, 229, 141, 142, 143, 144, 0, 230, 145, 231,
	146, 0, 147, 148, 149, 232, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 233, 159,
	0, 160, 161, 162, 0, 234, 163, 164, 0, 165,
	166, 0, 167, 235, 236, 168, 0, 174, 169, 170,
	171, 173, 237, 172, 238, 0, 175, 0, 176, 177,
	178, 0, 239, 240, 241, 0, 0, 179, 242, 243,
	0, 180, 181, 182, 183, 75, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 244, 245, 0, 0,
	191, 78, 79, 0, 80, 192, 193, 194, 195, 196,
	0, 0, 0, 0, 81, 82, 197, 198, 199, 200,
	83, 201, 202, 0, 84, 203, 204, 85, 0, 0,
	205, 206, 207, 0, 208, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 209, 99, 210, 211, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 212,
	105, 106, 213, 214, 0, 0, 0, 107, 108, 215,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 216,
	0, 217, 0, 112, 113, 114, 218, 219, 0, 0,
	117, 0, 115, 0, 0, 116, 220, 221, 222, 223,
	0, 224, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 225, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 226, 136, 227, 137, 138,
	0, 0, 457, 0, 0, 139, 228, 0, 140, 0,
	229, 141, 142, 143, 144, 0, 230, 145, 231, 146,
	0, 147, 148, 149, 232, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 233, 159, 0,
	160, 161, 162, 0, 234, 163, 164, 0, 165, 166,
	0, 167, 235, 236, 168, 0, 174, 169, 170, 171,
	173, 237, 172, 238, 0, 175, 0, 176, 177, 178,
	0, 239, 240, 241, 0, 0, 179, 242, 243, 0,
	180, 181, 182, 183, 75, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 244, 245, 0, 0, 191,
	78, 79, 0, 80, 192, 193, 194, 195, 196, 0,
	0, 0, 0, 81, 82, 197, 198, 199, 200, 83,
	201, 202, 0, 84, 203, 204, 85, 0, 0, 205,
	206, 207, 0, 208, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	209, 99, 210, 211, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 212, 105,
	106, 213, 214, 0, 0, 0, 107, 108, 215, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 216, 0,
	217, 0, 112, 113, 114, 730, 219, 0, 0, 117,
	0, 115, 0, 0, 116, 220, 221, 222, 223, 0,
	224, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 225, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 226, 136, 227, 137, 138, 0,
	0, 457, 0, 0, 139, 228, 0, 140, 0, 229,
	141, 142, 143, 144, 0, 230, 145, 231, 146, 0,
	147, 148, 149, 232, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 233, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 0, 165, 166, 0,
	167, 235, 236, 168, 0, 174, 169, 170, 171, 173,
	237, 172, 238, 0, 175, 0, 176, 177, 178, 0,
	239, 240, 241, 0, 0, 179, 242, 243, 0, 180,
	181, 182, 183, 75, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 244, 245, 0, 0, 191, 78,
	79, 508, 80, 192, 193, 194, 195, 196, 0, 0,
	0, 0, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 0, 84, 203, 204, 85, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 209,
	99, 210, 211, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 212, 105, 106,
	213, 214, 0, 0, 0, 107, 108, 215, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 216, 0, 217,
	0, 112, 113, 114, 218, 219, 0, 0, 117, 0,
	115, 0, 0, 116, 220, 221, 222, 223, 0, 224,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	225, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 226, 136, 227, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 0, 140, 0, 229, 141,
	142, 143, 144, 0, 230, 145, 231, 146, 0, 147,
	148, 149, 232, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 233, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 0, 165, 166, 0, 167,
	235, 236, 168, 0, 174, 169, 170, 171, 173, 237,
	172, 238, 0, 175, 0, 176, 177, 178, 0, 239,
	240, 241, 0, 0, 179, 242, 243, 0, 180, 181,
	182, 183, 75, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 244, 245, 0, 0, 191, 78, 79,
	0, 80, 192, 193, 194, 195, 196, 0, 0, 0,
	0, 81, 82, 197, 198, 199, 200, 83, 201, 202,
	0, 84, 203, 204, 85, 0, 0, 205, 206, 207,
	0, 208, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 209, 99,
	210, 211, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 212, 105, 106, 213,
	214, 0, 0, 0, 107, 108, 215, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 216, 0, 217, 0,
	112, 113, 114, 469, 219, 0, 0, 117, 0, 115,
	0, 0, 116, 220, 221, 222, 223, 0, 224, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 225,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 226, 136, 227, 137, 138, 0, 0, 457,
	0, 0, 139, 228, 0, 140, 0, 229, 141, 142,
	143, 144, 0, 230, 145, 231, 146, 0, 147, 148,
	149, 232, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 233, 159, 0, 160, 161, 162,
	0, 234, 163, 164, 0, 165, 166, 0, 167, 235,
	236, 168, 0, 174, 169, 170, 171, 173, 237, 172,
	238, 0, 175, 0, 176, 177, 178, 0, 239, 240,
	241, 0, 0, 179, 242, 243, 0, 180, 181, 182,
	183, 75, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 244, 245, 0, 0, 191, 78, 79, 0,
	80, 192, 193, 194, 195, 196, 0, 0, 0, 0,
	81, 82, 197, 198, 199, 200, 83, 201, 202, 0,
	84, 203, 204, 85, 0, 0, 205, 206, 207, 0,
	208, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 209, 99, 210,
	211, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 212, 105, 106, 213, 214,
	0, 0, 0, 107, 108, 215, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 216, 0, 217, 0, 112,
	113, 114, 462, 219, 0, 0, 117, 0, 115, 0,
	0, 116, 220, 221, 222, 223, 0, 224, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 225, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 226, 136, 227, 137, 138, 0, 0, 457, 0,
	0, 139, 228, 0, 140, 0, 229, 141, 142, 143,
	144, 0, 230, 145, 231, 146, 0, 147, 148, 149,
	232, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 233, 159, 0, 160, 161, 162, 0,
	234, 163, 164, 0, 165, 166, 0, 167, 235, 236,
	168, 0, 174, 169, 170, 171, 173, 237, 172, 238,
	0, 175, 0, 176, 177, 178, 0, 239, 240, 241,
	0, 0, 179, 242, 243, 0, 180, 181, 182, 183,
	75, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 244, 245, 0, 0, 191, 78, 79, 372, 80,
	192, 193, 194, 195, 196, 0, 0, 0, 0, 81,
	82, 197, 198, 199, 200, 83, 201, 202, 0, 84,
	203, 204, 85, 0, 0, 205, 206, 207, 0, 208,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 209, 99, 210, 211,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 212, 105, 106, 213, 214, 0,
	0, 0, 107, 108, 215, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 216, 0, 217, 0, 112, 113,
	114, 218, 219, 0, 0, 117, 0, 115, 0, 0,
	116, 220, 221, 222, 223, 0, 224, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 225, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	226, 136, 227, 137, 138, 0, 0, 0, 0, 0,
	139, 228, 0, 140, 0, 229, 141, 142, 143, 144,
	0, 230, 145, 231, 371, 0, 147, 148, 149, 232,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 233, 159, 0, 160, 161, 162, 0, 234,
	163, 164, 0, 165, 166, 0, 167, 235, 236, 168,
	0, 174, 169, 170, 171, 173, 237, 172, 238, 0,
	175, 0, 176, 177, 178, 0, 239, 240, 241, 0,
	0, 179, 242, 243, 0, 180, 181, 182, 183, 75,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	244, 245, 0, 0, 191, 78, 79, 0, 80, 192,
	193, 194, 195, 196, 0, 0, 0, 0, 81, 82,
	197, 198, 199, 200, 83, 201, 202, 0, 84, 203,
	204, 85, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 209, 99, 210, 211, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 212, 105, 106, 213, 214, 0, 0,
	0, 107, 108, 215, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 216, 0, 217, 0, 112, 113, 114,
	218, 219, 0, 0, 117, 0, 115, 0, 0, 116,
	220, 221, 222, 223, 0, 224, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 225, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 226,
	136, 227, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 0, 140, 0, 229, 141, 142, 143, 144, 0,
	230, 145, 231, 146, 0, 147, 148, 149, 232, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 233, 159, 0, 160, 161, 162, 0, 234, 163,
	164, 0, 165, 166, 0, 167, 235, 236, 168, 0,
	174, 169, 170, 171, 173, 237, 172, 238, 0, 175,
	0, 176, 177, 178, 0, 239, 240, 241, 0, 0,
	179, 242, 243, 0, 180, 181, 182, 183, 75, 0,
	184, 185, 186, 0, 187, 0, 188, 189, 190, 244,
	245, 0, 0, 191, 78, 79, 0, 80, 192, 193,
	194, 195, 196, 0, 0, 0, 0, 81, 82, 197,
	198, 199, 200, 83, 201, 202, 0, 84, 203, 204,
	85, 0, 0, 205, 206, 207, 0, 208, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 209, 99, 210, 211, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 212, 105, 106, 213, 214, 0, 0, 0,
	107, 108, 215, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 216, 0, 217, 0, 112, 113, 114, 1269,
	219, 0, 0, 117, 0, 115, 0, 0, 116, 220,
	221, 222, 223, 0, 224, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 225, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 226, 136,
	227, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	0, 140, 0, 229, 141, 142, 143, 144, 0, 230,
	145, 231, 146, 0, 147, 148, 149, 232, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	233, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	0, 165, 166, 0, 167, 235, 236, 168, 0, 174,
	169, 170, 171, 173, 237, 172, 238, 0, 175, 0,
	176, 177, 178, 0, 239, 240, 241, 0, 0, 179,
	242, 243, 0, 180, 181, 182, 183, 75, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 244, 245,
	0, 0, 191, 78, 79, 0, 80, 192, 193, 194,
	195, 196, 0, 0, 0, 0, 81, 82, 197, 198,
	199, 200, 83, 201, 202, 0, 84, 203, 204, 85,
	0, 0, 205, 206, 207, 0, 208, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 209, 99, 210, 211, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 212, 105, 106, 213, 214, 0, 0, 0, 107,
	108, 215, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 216, 0, 217, 0, 112, 113, 114, 1267, 219,
	0, 0, 117, 0, 115, 0, 0, 116, 220, 221,
	222, 223, 0, 224, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 225, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 226, 136, 227,
	137, 138, 0, 0, 0, 0, 0, 139, 228, 0,
	140, 0, 229, 141, 142, 143, 144, 0, 230, 145,
	231, 146, 0, 147, 148, 149, 232, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 233,
	159, 0, 160, 161, 162, 0, 234, 163, 164, 0,
	165, 166, 0, 167, 235, 236, 168, 0, 174, 169,
	170, 171, 173, 237, 172, 238, 0, 175, 0, 176,
	177, 178, 0, 239, 240, 241, 0, 0, 179, 242,
	243, 0, 180, 181, 182, 183, 75, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 244, 245, 0,
	0, 191, 78, 79, 0, 80, 192, 193, 194, 195,
	196, 0, 0, 0, 0, 81, 82, 197, 198, 199,
	200, 83, 201, 202, 0, 84, 203, 204, 85, 0,
	0, 205, 206, 207, 0, 208, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 209, 99, 210, 211, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	212, 105, 106, 213, 214, 0, 0, 0, 107, 108,
	215, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	216, 0, 217, 0, 112, 113, 114, 1256, 219, 0,
	0, 117, 0, 115, 0, 0, 116, 220, 221, 222,
	223, 0, 224, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 225, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 226, 136, 227, 137,
	138, 0, 0, 0, 0, 0, 139, 228, 0, 140,
	0, 229, 141, 142, 143, 144, 0, 230, 145, 231,
	146, 0, 147, 148, 149, 232, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 233, 159,
	0, 160, 161, 162, 0, 234, 163, 164, 0, 165,
	166, 0, 167, 235, 236, 168, 0, 174, 169, 170,
	171, 173, 237, 172, 238, 0, 175, 0, 176, 177,
	178, 0, 239, 240, 241, 0, 0, 179, 242, 243,
	0, 180, 181, 182, 183, 75, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 244, 245, 0, 0,
	191, 78, 79, 0, 80, 192, 193, 194, 195, 196,
	0, 0, 0, 0, 81, 82, 197, 198, 199, 200,
	83, 201, 202, 0, 84, 203, 204, 85, 0, 0,
	205, 206, 207, 0, 208, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 209, 99, 210, 211, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 212,
	105, 106, 213, 214, 0, 0, 0, 107, 108, 215,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 216,
	0, 217, 0, 112, 113, 114, 850, 219, 0, 0,
	117, 0, 115, 0, 0, 116, 220, 221, 222, 223,
	0, 224, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 225, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 226, 136, 227, 137, 138,
	0, 0, 0, 0, 0, 139, 228, 0, 140, 0,
	229, 141, 142, 143, 144, 0, 230, 145, 231, 146,
	0, 147, 148, 149, 232, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 233, 159, 0,
	160, 161, 162, 0, 234, 163, 164, 0, 165, 166,
	0, 167, 235, 236, 168, 0, 174, 169, 170, 171,
	173, 237, 172, 238, 0, 175, 0, 176, 177, 178,
	0, 239, 240, 241, 0, 0, 179, 242, 243, 0,
	180, 181, 182, 183, 75, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 244, 245, 0, 0, 191,
	78, 79, 0, 80, 192, 193, 194, 195, 196, 0,
	0, 0, 0, 81, 82, 197, 198, 199, 200, 83,
	201, 202, 0, 84, 203, 204, 85, 0, 0, 205,
	206, 207, 0, 208, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	209, 99, 210, 211, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 212, 105,
	106, 213, 214, 0, 0, 0, 107, 108, 215, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 216, 0,
	217, 0, 112, 113, 114, 218, 219, 0, 0, 117,
	0, 115, 0, 0, 116, 220, 221, 222, 223, 0,
	224, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 225, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 226, 136, 227, 137, 138, 0,
	0, 0, 0, 0, 139, 228, 0, 140, 0, 229,
	141, 142, 143, 144, 0, 230, 145, 231, 146, 0,
	147, 148, 149, 232, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 233, 159, 0, 386,
	161, 162, 0, 234, 163, 164, 0, 165, 166, 0,
	167, 235, 236, 168, 0, 174, 169, 170, 171, 173,
	237, 172, 238, 0, 175, 0, 176, 177, 178, 0,
	239, 240, 241, 0, 0, 179, 242, 243, 0, 180,
	181, 182, 183, 75, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 244, 245, 0, 0, 191, 78,
	79, 0, 80, 192, 193, 194, 195, 196, 0, 715,
	0, 0, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 0, 84, 203, 204, 85, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 209,
	99, 210, 211, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 212, 105, 106,
	213, 214, 0, 0, 0, 107, 108, 215, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 216, 0, 217,
	0, 112, 113, 114, 218, 219, 0, 0, 117, 0,
	115, 0, 0, 116, 220, 221, 222, 223, 0, 224,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	225, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 226, 136, 227, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 0, 140, 0, 229, 141,
	142, 143, 144, 0, 230, 145, 231, 146, 0, 147,
	148, 149, 232, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 233, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 0, 0, 166, 0, 167,
	235, 236, 168, 0, 174, 169, 170, 171, 173, 237,
	172, 238, 0, 175, 0, 176, 177, 178, 0, 239,
	240, 241, 0, 0, 179, 242, 243, 0, 180, 181,
	182, 183, 75, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 244, 245, 0, 0, 191, 78, 79,
	0, 80, 192, 193, 194, 195, 196, 0, 0, 0,
	0, 81, 82, 197, 198, 199, 200, 83, 201, 202,
	0, 84, 203, 204, 85, 0, 0, 205, 206, 207,
	0, 208, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 209, 99,
	210, 211, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 212, 105, 106, 213,
	214, 0, 0, 0, 107, 108, 215, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 216, 0, 217, 0,
	112, 113, 114, 559, 219, 0, 0, 117, 0, 115,
	0, 0, 116, 220, 221, 222, 223, 0, 224, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 225,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 226, 136, 227, 137, 138, 0, 0, 0,
	0, 0, 139, 228, 0, 140, 0, 229, 141, 142,
	143, 144, 0, 230, 145, 231, 146, 0, 147, 148,
	149, 232, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 233, 159, 0, 160, 161, 162,
	0, 234, 163, 164, 0, 165, 166, 0, 167, 235,
	236, 168, 0, 174, 169, 170, 171, 173, 237, 172,
	238, 0, 175, 0, 176, 177, 178, 0, 239, 240,
	241, 0, 0, 179, 242, 243, 0, 180, 181, 182,
	183, 75, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 244, 245, 0, 0, 191, 78, 79, 0,
	80, 192, 193, 194, 195, 196, 0, 0, 0, 0,
	81, 82, 197, 198, 199, 200, 83, 201, 202, 0,
	84, 203, 204, 85, 0, 0, 205, 206, 207, 0,
	208, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 209, 99, 210,
	211, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 212, 105, 106, 213, 214,
	0, 0, 0, 107, 108, 215, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 216, 0, 217, 0, 112,
	113, 114, 554, 219, 0, 0, 117, 0, 115, 0,
	0, 116, 220, 221, 222, 223, 0, 224, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 225, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 226, 136, 227, 137, 138, 0, 0, 0, 0,
	0, 139, 228, 0, 140, 0, 229, 141, 142, 143,
	144, 0, 230, 145, 231, 146, 0, 147, 148, 149,
	232, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 233, 159, 0, 160, 161, 162, 0,
	234, 163, 164, 0, 165, 166, 0, 167, 235, 236,
	168, 0, 174, 169, 170, 171, 173, 237, 172, 238,
	0, 175, 0, 176, 177, 178, 0, 239, 240, 241,
	0, 0, 179, 242, 243, 0, 180, 181, 182, 183,
	75, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 244, 245, 0, 0, 191, 78, 79, 0, 80,
	192, 193, 194, 195, 196, 0, 0, 0, 0, 81,
	82, 197, 198, 199, 200, 83, 201, 202, 0, 84,
	203, 204, 85, 0, 0, 205, 206, 514, 0, 208,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 209, 99, 210, 211,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 212, 105, 106, 213, 214, 0,
	0, 0, 107, 108, 215, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 216, 0, 217, 0, 112, 113,
	114, 218, 219, 0, 0, 117, 0, 115, 0, 0,
	116, 220, 221, 222, 223, 0, 224, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 225, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 397, 0, 131, 132, 135, 133, 0, 134, 0,
	226, 136, 227, 137, 138, 0, 0, 0, 0, 0,
	139, 228, 0, 140, 0, 229, 141, 142, 143, 144,
	0, 230, 145, 231, 146, 0, 147, 148, 149, 232,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 233, 159, 0, 160, 161, 162, 0, 234,
	163, 164, 0, 165, 166, 0, 167, 235, 236, 168,
	0, 174, 169, 170, 171, 173, 237, 172, 238, 0,
	175, 0, 176, 177, 178, 0, 396, 240, 241, 0,
	0, 392, 242, 243, 0, 180, 181, 182, 183, 75,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	244, 245, 0, 0, 191, 78, 79, 0, 80, 192,
	193, 194, 195, 196, 0, 0, 0, 0, 81, 82,
	197, 198, 199, 200, 83, 201, 202, 0, 84, 203,
	204, 85, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 209, 99, 210, 211, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 212, 105, 106, 213, 214, 0, 0,
	0, 107, 108, 215, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 216, 0, 217, 0, 112, 113, 114,
	218, 219, 0, 0, 117, 0, 115, 0, 0, 116,
	220, 221, 222, 223, 0, 224, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 225, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	397, 0, 131, 132, 135, 133, 0, 134, 0, 226,
	136, 227, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 0, 140, 0, 229, 141, 142, 143, 144, 0,
	230, 145, 231, 146, 0, 147, 148, 149, 232, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 233, 159, 0, 160, 161, 162, 0, 234, 163,
	164, 0, 165, 166, 0, 167, 235, 236, 168, 0,
	174, 169, 170, 171, 173, 237, 172, 238, 0, 175,
	0, 176, 177, 178, 0, 396, 240, 241, 0, 0,
	392, 242, 243, 0, 180, 181, 182, 183, 75, 0,
	184, 185, 186, 0, 187, 0, 188, 189, 190, 244,
	245, 0, 0, 191, 78, 79, 0, 80, 192, 193,
	194, 195, 196, 0, 0, 0, 0, 81, 82, 197,
	198, 199, 200, 83, 201, 202, 0, 84, 203, 204,
	85, 0, 0, 205, 206, 207, 0, 208, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 209, 99, 210, 211, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 212, 105, 106, 213, 214, 0, 0, 0,
	107, 108, 215, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 216, 0, 217, 0, 112, 113, 114, 492,
	219, 0, 0, 117, 0, 115, 0, 0, 116, 220,
	221, 222, 223, 0, 224, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 225, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 226, 136,
	227, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	0, 140, 0, 229, 141, 142, 143, 144, 0, 230,
	145, 231, 146, 0, 147, 148, 149, 232, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	233, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	0, 165, 166, 0, 167, 235, 236, 168, 0, 174,
	169, 170, 171, 173, 237, 172, 238, 0, 175, 0,
	176, 177, 178, 0, 239, 240, 241, 0, 0, 179,
	242, 243, 0, 180, 181, 182, 183, 75, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 244, 245,
	0, 0, 191, 78, 79, 0, 80, 192, 193, 194,
	195, 196, 0, 0, 0, 0, 81, 82, 197, 198,
	199, 200, 83, 201, 202, 0, 84, 203, 204, 85,
	0, 0, 205, 206, 207, 0, 208, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 209, 99, 210, 211, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 212, 105, 106, 213, 214, 0, 0, 0, 107,
	108, 215, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 216, 0, 217, 0, 112, 113, 114, 489, 219,
	0, 0, 117, 0, 115, 0, 0, 116, 220, 221,
	222, 223, 0, 224, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 225, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 226, 136, 227,
	137, 138, 0, 0, 0, 0, 0, 139, 228, 0,
	140, 0, 229, 141, 142, 143, 144, 0, 230, 145,
	231, 146, 0, 147, 148, 149, 232, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 233,
	159, 0, 160, 161, 162, 0, 234, 163, 164, 0,
	165, 166, 0, 167, 235, 236, 168, 0, 174, 169,
	170, 171, 173, 237, 172, 238, 0, 175, 0, 176,
	177, 178, 0, 239, 240, 241, 0, 0, 179, 242,
	243, 0, 180, 181, 182, 183, 75, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 244, 245, 0,
	0, 191, 78, 79, 0, 80, 192, 193, 194, 195,
	196, 0, 0, 0, 0, 81, 82, 197, 198, 199,
	200, 83, 201, 202, 0, 84, 203, 204, 85, 0,
	0, 205, 206, 207, 0, 208, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 209, 99, 210, 211, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	212, 105, 106, 213, 214, 0, 0, 0, 107, 108,
	215, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	216, 0, 217, 0, 112, 113, 114, 486, 219, 0,
	0, 117, 0, 115, 0, 0, 116, 220, 221, 222,
	223, 0, 224, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 225, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 226, 136, 227, 137,
	138, 0, 0, 0, 0, 0, 139, 228, 0, 140,
	0, 229, 141, 142, 143, 144, 0, 230, 145, 231,
	146, 0, 147, 148, 149, 232, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 233, 159,
	0, 160, 161, 162, 0, 234, 163, 164, 0, 165,
	166, 0, 167, 235, 236, 168, 0, 174, 169, 170,
	171, 173, 237, 172, 238, 0, 175, 0, 176, 177,
	178, 0, 239, 240, 241, 0, 0, 179, 242, 243,
	0, 180, 181, 182, 183, 75, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 244, 245, 0, 0,
	191, 78, 79, 0, 80, 192, 193, 194, 195, 196,
	0, 0, 0, 0, 81, 82, 197, 198, 199, 200,
	83, 201, 202, 0, 84, 203, 204, 85, 0, 0,
	205, 206, 207, 0, 208, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 209, 99, 210, 211, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 212,
	105, 106, 213, 214, 0, 0, 0, 107, 108, 215,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 216,
	0, 217, 0, 112, 113, 114, 484, 219, 0, 0,
	117, 0, 115, 0, 0, 116, 220, 221, 222, 223,
	0, 224, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 225, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 226, 136, 227, 137, 138,
	0, 0, 0, 0, 0, 139, 228, 0, 140, 0,
	229, 141, 142, 143, 144, 0, 230, 145, 231, 146,
	0, 147, 148, 149, 232, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 233, 159, 0,
	160, 161, 162, 0, 234, 163, 164, 0, 165, 166,
	0, 167, 235, 236, 168, 0, 174, 169, 170, 171,
	173, 237, 172, 238, 0, 175, 0, 176, 177, 178,
	0, 239, 240, 241, 0, 0, 179, 242, 243, 0,
	180, 181, 182, 183, 75, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 244, 245, 0, 0, 191,
	78, 79, 0, 80, 192, 193, 194, 195, 196, 0,
	0, 0, 0, 81, 82, 197, 198, 199, 200, 83,
	201, 202, 0, 84, 203, 204, 85, 0, 0, 205,
	206, 207, 0, 208, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	209, 99, 210, 211, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 212, 105,
	106, 213, 214, 0, 0, 0, 107, 108, 215, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 216, 0,
	217, 0, 112, 113, 114, 465, 219, 0, 0, 117,
	0, 115, 0, 0, 116, 220, 221, 222, 223, 0,
	224, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 225, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 226, 136, 227, 137, 138, 0,
	0, 0, 0, 0, 139, 228, 0, 140, 0, 229,
	141, 142, 143, 144, 0, 230, 145, 231, 146, 0,
	147, 148, 149, 232, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 233, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 0, 165, 166, 0,
	167, 235, 236, 168, 0, 174, 169, 170, 171, 173,
	237, 172, 238, 0, 175, 0, 176, 177, 178, 0,
	239, 240, 241, 0, 0, 179, 242, 243, 0, 180,
	181, 182, 183, 75, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 244, 245, 0, 0, 191, 78,
	79, 0, 80, 192, 193, 194, 195, 196, 0, 0,
	0, 0, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 0, 84, 203, 204, 85, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 209,
	99, 210, 211, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 212, 105, 106,
	213, 214, 0, 0, 0, 107, 108, 215, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 216, 0, 217,
	0, 112, 113, 114, 218, 219, 0, 0, 117, 0,
	115, 0, 0, 116, 220, 221, 222, 223, 0, 224,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	225, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 226, 136, 227, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 0, 140, 0, 229, 141,
	142, 143, 144, 0, 230, 145, 231, 146, 0, 147,
	148, 149, 232, 446, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 233, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 0, 165, 166, 0, 167,
	235, 236, 168, 0, 174, 169, 170, 171, 173, 237,
	172, 238, 0, 175, 0, 176, 177, 178, 0, 239,
	240, 241, 0, 0, 179, 242, 243, 0, 180, 181,
	182, 183, 75, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 244, 245, 0, 0, 191, 78, 79,
	0, 80, 192, 193, 194, 195, 196, 0, 0, 0,
	0, 81, 82, 197, 198, 199, 200, 83, 201, 202,
	0, 84, 203, 204, 85, 0, 0, 205, 206, 207,
	0, 208, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 209, 99,
	210, 211, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 212, 105, 106, 213,
	214, 0, 0, 0, 107, 108, 215, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 216, 0, 217, 0,
	112, 113, 114, 218, 219, 0, 0, 117, 0, 115,
	0, 0, 116, 220, 221, 222, 223, 0, 224, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 225,
	0, 123, 0, 0, 389, 0, 0, 125, 0, 126,
	127, 128, 129, 397, 0, 131, 132, 135, 133, 0,
	134, 0, 226, 136, 227, 137, 138, 0, 0, 0,
	0, 0, 139, 228, 0, 140, 0, 229, 141, 142,
	143, 144, 0, 230, 145, 231, 146, 0, 147, 148,
	149, 232, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 391, 159, 0, 160, 161, 162,
	0, 234, 163, 390, 0, 165, 166, 0, 167, 235,
	236, 168, 0, 174, 169, 170, 171, 173, 237, 172,
	238, 0, 175, 0, 176, 177, 178, 0, 396, 240,
	241, 0, 0, 392, 242, 243, 0, 180, 181, 182,
	183, 75, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 244, 245, 0, 0, 191, 78, 79, 0,
	80, 192, 193, 194, 195, 196, 0, 0, 0, 0,
	81, 82, 197, 198, 199, 200, 83, 201, 202, 0,
	84, 203, 204, 85, 0, 0, 205, 206, 207, 0,
	208, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 209, 99, 210,
	211, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 212, 105, 106, 213, 214,
	0, 0, 0, 107, 108, 215, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 216, 0, 217, 0, 112,
	113, 114, 218, 219, 0, 0, 117, 0, 115, 0,
	0, 116, 220, 221, 222, 223, 0, 224, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 225, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 226, 136, 227, 137, 138, 0, 0, 0, 0,
	0, 139, 228, 0, 140, 0, 229, 141, 142, 0,
	144, 0, 230, 145, 231, 146, 0, 147, 0, 149,
	232, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 233, 0, 0, 160, 161, 162, 0,
	234, 163, 164, 0, 165, 166, 0, 167, 235, 236,
	168, 0, 174, 169, 170, 171, 173, 237, 172, 238,
	0, 175, 0, 176, 177, 178, 0, 239, 240, 241,
	0, 0, 179, 242, 243, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 244, 245, 0, 0, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 875, 876, 0, 895, 896, 897,
	905, 906, 907, 0, 0, 0, 0, 0, 0, 0,
	898, 0, 0, 0, 0, 0, 0, 878, 0, 909,
	0, 0, 0, 875, 876, 0, 895, 896, 897, 905,
	906, 907, 0, 0, 0, 0, 0, 0, 877, 898,
	0, 0, 0, 0, 892, 0, 878, 0, 909, 0,
	0, 0, 0, 875, 876, 0, 895, 896, 897, 905,
	906, 907, 0, 0, 0, 0, 0, 877, 0, 898,
	0, 0, 0, 892, 0, 0, 878, 0, 909, 0,
	0, 0, 0, 875, 876, 0, 895, 896, 897, 905,
	906, 907, 0, 883, 0, 0, 0, 877, 0, 898,
	0, 0, 0, 892, 0, 0, 878, 0, 909, 0,
	0, 902, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 0, 0, 0, 908, 877, 0, 0,
	0, 0, 0, 892, 0, 0, 0, 0, 900, 0,
	902, 910, 0, 0, 893, 0, 0, 0, 0, 0,
	0, 0, 883, 0, 0, 908, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 899, 900, 0, 0,
	902, 910, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 0, 0, 908, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 900, 0, 0,
	902, 910, 894, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 903, 0, 908, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 900, 0, 0,
	0, 894, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 0, 0, 0,
	0, 894, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 901, 903, 0, 889, 890, 891, 0, 888, 885,
	886, 887, 879, 880, 881, 882, 884, 0, 904, 0,
	0, 894, 0, 0, 0, 1458, 0, 0, 0, 0,
	901, 0, 903, 889, 890, 891, 0, 888, 885, 886,
	887, 879, 880, 881, 882, 884, 0, 904, 0, 0,
	0, 0, 0, 0, 1410, 0, 0, 0, 0, 0,
	901, 0, 0, 889, 890, 891, 0, 888, 885, 886,
	887, 879, 880, 881, 882, 884, 0, 904, 0, 0,
	0, 1887, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 889, 890, 891, 0, 888, 885, 886,
	887, 879, 880, 881, 882, 884, 0, 904, 0, 875,
	876, 1885, 895, 896, 897, 905, 906, 907, 0, 0,
	0, 0, 0, 0, 0, 898, 0, 0, 0, 0,
	0, 0, 878, 0, 909, 0, 0, 0, 875, 876,
	0, 895, 896, 897, 905, 906, 907, 0, 0, 0,
	0, 0, 0, 877, 898, 0, 0, 0, 0, 892,
	0, 878, 0, 909, 0, 0, 0, 0, 875, 876,
	0, 895, 896, 897, 905, 906, 907, 0, 0, 0,
	0, 0, 877, 0, 898, 0, 0, 0, 892, 0,
	0, 878, 0, 909, 0, 0, 0, 0, 875, 876,
	0, 895, 896, 897, 905, 906, 907, 0, 883, 0,
	0, 0, 877, 0, 898, 0, 0, 0, 892, 0,
	0, 878, 0, 909, 0, 0, 902, 910, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 883, 0, 0,
	0, 908, 877, 0, 0, 0, 0, 0, 892, 0,
	0, 0, 0, 900, 0, 902, 910, 0, 0, 893,
	0, 0, 0, 0, 0, 0, 0, 883, 0, 0,
	908, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 900, 0, 0, 902, 910, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 883, 0, 0,
	908, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	899, 0, 900, 0, 0, 902, 910, 894, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 903, 0,
	908, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	899, 0, 900, 0, 0, 0, 894, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 903, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	899, 0, 0, 0, 0, 0, 894, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 903, 0, 889,
	890, 891, 0, 888, 885, 886, 887, 879, 880, 881,
	882, 884, 0, 904, 0, 0, 894, 1861, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 903, 889, 890,
	891, 0, 888, 885, 886, 887, 879, 880, 881, 882,
	884, 0, 904, 0, 0, 0, 1836, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 0, 889, 890,
	891, 0, 888, 885, 886, 887, 879, 880, 881, 882,
	884, 0, 904, 0, 0, 0, 1831, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 0, 889, 890,
	891, 0, 888, 885, 886, 887, 879, 880, 881, 882,
	884, 0, 904, 0, 875, 876, 1827, 895, 896, 897,
	905, 906, 907, 0, 0, 0, 0, 0, 0, 0,
	898, 0, 0, 0, 0, 0, 0, 878, 0, 909,
	0, 0, 0, 875, 876, 0, 895, 896, 897, 905,
	906, 907, 0, 0, 0, 0, 0, 0, 877, 898,
	0, 0, 0, 0, 892, 0, 878, 0, 909, 0,
	0, 0, 0, 875, 876, 0, 895, 896, 897, 905,
	906, 907, 0, 0, 0, 0, 0, 877, 0, 898,
	0, 0, 0, 892, 0, 0, 878, 0, 909, 0,
	0, 0, 0, 875, 876, 0, 895, 896, 897, 905,
	906, 907, 0, 883, 0, 0, 0, 877, 0, 898,
	0, 0, 0, 892, 0, 0, 878, 0, 909, 0,
	0, 902, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 0, 0, 0, 908, 877, 0, 0,
	0, 0, 0, 892, 0, 0, 0, 0, 900, 0,
	902, 910, 0, 0, 893, 0, 0, 0, 0, 0,
	0, 0, 883, 0, 0, 908, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 899, 900, 0, 0,
	902, 910, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 0, 0, 908, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 900, 0, 0,
	902, 910, 894, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 903, 0, 908, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 900, 0, 0,
	0, 894, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 0, 0, 0,
	0, 894, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 901, 903, 0, 889, 890, 891, 0, 888, 885,
	886, 887, 879, 880, 881, 882, 884, 0, 904, 0,
	0, 894, 1758, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 903, 889, 890, 891, 0, 888, 885, 886,
	887, 879, 880, 881, 882, 884, 0, 904, 0, 0,
	0, 1757, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 889, 890, 891, 0, 888, 885, 886,
	887, 879, 880, 881, 882, 884, 0, 904, 0, 0,
	0, 1658, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 889, 890, 891, 0, 888, 885, 886,
	887, 879, 880, 881, 882, 884, 0, 904, 0, 875,
	876, 1592, 895, 896, 897, 905, 906, 907, 0, 0,
	0, 0, 0, 0, 0, 898, 0, 0, 0, 0,
	0, 0, 878, 0, 909, 0, 0, 0, 875, 876,
	0, 895, 896, 897, 905, 906, 907, 0, 0, 0,
	0, 0, 0, 877, 898, 0, 0, 0, 0, 892,
	0, 878, 0, 909, 0, 0, 0, 0, 875, 876,
	0, 895, 896, 897, 905, 906, 907, 0, 0, 0,
	0, 0, 877, 0, 898, 0, 0, 0, 892, 0,
	0, 878, 0, 909, 0, 0, 0, 0, 875, 876,
	0, 895, 896, 897, 905, 906, 907, 0, 883, 0,
	0, 0, 877, 0, 898, 0, 0, 0, 892, 0,
	0, 878, 0, 909, 0, 0, 902, 910, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 883, 0, 0,
	0, 908, 877, 0, 0, 0, 0, 0, 892, 0,
	0, 0, 0, 900, 0, 902, 910, 0, 0, 893,
	0, 0, 0, 0, 0, 0, 0, 883, 0, 0,
	908, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 900, 0, 0, 902, 910, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 883, 1960, 0,
	908, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	899, 0, 900, 0, 0, 902, 910, 894, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 903, 0,
	908, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	899, 0, 900, 0, 0, 0, 894, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 903, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	899, 0, 0, 0, 0, 0, 894, 0, 0, 0,
	0, 0, 0, 0, 1959, 0, 901, 903, 0, 889,
	890, 891, 0, 888, 885, 886, 887, 879, 880, 881,
	882, 884, 0, 904, 0, 0, 894, 1576, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 903, 889, 890,
	891, 0, 888, 885, 886, 887, 879, 880, 881, 882,
	884, 0, 904, 0, 0, 0, 1175, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 0, 889, 890,
	891, 0, 888, 885, 886, 887, 879, 880, 881, 882,
	884, 0, 904, 0, 1007, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 0, 889, 890,
	891, 0, 888, 885, 886, 887, 879, 880, 881, 882,
	884, 0, 904, 875, 876, 0, 895, 896, 897, 905,
	906, 907, 0, 0, 0, 0, 0, 0, 0, 898,
	0, 0, 0, 0, 0, 0, 878, 0, 909, 0,
	0, 0, 0, 875, 876, 0, 895, 896, 897, 905,
	906, 907, 0, 0, 0, 0, 0, 877, 0, 898,
	0, 0, 0, 892, 1107, 0, 878, 0, 909, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 877, 0, 0,
	0, 0, 0, 892, 0, 0, 912, 0, 0, 0,
	0, 0, 875, 876, 0, 895, 896, 897, 905, 906,
	907, 0, 883, 0, 1450, 0, 0, 1449, 898, 0,
	0, 1108, 911, 0, 0, 878, 0, 909, 0, 0,
	902, 910, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 0, 0, 908, 877, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 900, 0, 0,
	902, 910, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 908, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 900, 0, 0,
	0, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 0, 0, 902,
	910, 894, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 900, 0, 0, 0,
	0, 894, 893, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 889, 890, 891, 0, 888, 885, 886,
	887, 879, 880, 881, 882, 884, 0, 904, 0, 0,
	894, 1418, 1419, 0, 1436, 1437, 1438, 0, 0, 0,
	901, 903, 0, 889, 890, 891, 0, 888, 885, 886,
	887, 879, 880, 881, 882, 884, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 876, 0, 895, 896, 897, 905, 906, 907,
	0, 1433, 0, 0, 0, 0, 0, 898, 0, 0,
	0, 0, 0, 0, 878, 0, 909, 0, 0, 901,
	0, 0, 889, 890, 891, 0, 888, 885, 886, 887,
	879, 880, 881, 882, 884, 877, 904, 0, 0, 0,
	0, 892, 0, 0, 0, 0, 0, 0, 875, 876,
	1424, 895, 896, 897, 905, 906, 907, 0, 0, 0,
	0, 0, 0, 0, 898, 0, 0, 0, 0, 1440,
	0, 878, 0, 909, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1439, 0, 0, 0, 0, 0, 0,
	883, 0, 877, 0, 0, 0, 0, 0, 892, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 902, 910,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 908, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 900, 0, 0, 0, 0,
	0, 893, 0, 0, 0, 0, 0, 883, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 899, 441, 902, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	908, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 0, 0, 0, 0, 893, 894,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	903, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	899, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1430, 1431, 1432, 0, 1429, 1426, 1427, 1428, 1420,
	1421, 1422, 1423, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 894, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 903, 901, 0,
	0, 889, 890, 891, 0, 888, 885, 886, 887, 879,
	880, 881, 882, 884, 0, 904, 0, 1586, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 876, 0,
	895, 896, 897, 905, 906, 907, 0, 0, 0, 0,
	0, 0, 0, 898, 0, 0, 0, 0, 0, 0,
	878, 0, 909, 0, 0, 901, 0, 0, 889, 890,
	891, 0, 888, 885, 886, 887, 879, 880, 881, 882,
	884, 877, 904, 0, 0, 875, 876, 892, 895, 896,
	897, 905, 906, 907, 0, 0, 0, 0, 0, 0,
	0, 898, 0, 0, 0, 1451, 0, 0, 878, 0,
	909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 0, 0, 0, 892, 883, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 902, 910, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 908,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 900, 0, 0, 883, 0, 0, 893, 875, 876,
	0, 895, 896, 897, 905, 906, 907, 0, 0, 0,
	0, 0, 902, 910, 898, 0, 0, 0, 1409, 899,
	0, 878, 0, 909, 0, 0, 0, 908, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 900,
	0, 0, 877, 0, 0, 893, 875, 876, 892, 895,
	896, 897, 905, 906, 907, 894, 0, 0, 0, 0,
	0, 0, 898, 0, 0, 0, 903, 899, 0, 878,
	0, 909, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 0, 0, 0, 892, 883, 0, 0,
	0, 0, 0, 894, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 903, 902, 910, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 889, 890, 891,
	908, 888, 885, 886, 887, 879, 880, 881, 882, 884,
	0, 904, 900, 0, 0, 883, 0, 0, 893, 1418,
	1419, 0, 1436, 1437, 1438, 0, 0, 0, 0, 0,
	0, 0, 0, 902, 910, 1571, 0, 0, 0, 0,
	899, 0, 901, 0, 0, 889, 890, 891, 908, 888,
	885, 886, 887, 879, 880, 881, 882, 884, 0, 904,
	900, 0, 0, 0, 0, 0, 893, 875, 876, 1433,
	895, 896, 897, 905, 906, 907, 894, 0, 0, 0,
	0, 0, 0, 898, 0, 0, 0, 903, 899, 0,
	878, 0, 909, 0, 0, 0, 0, 0, 0, 0,
	1416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 892, 1424, 0,
	0, 0, 0, 0, 894, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 0, 889, 890,
	891, 1439, 888, 885, 886, 887, 879, 880, 881, 882,
	884, 0, 904, 0, 0, 0, 883, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 902, 910, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 889, 890, 891, 908,
	888, 885, 886, 887, 879, 880, 881, 882, 884, 0,
	904, 900, 0, 0, 0, 0, 0, 893, 875, 876,
	0, 895, 896, 897, 905, 906, 907, 1435, 0, 0,
	0, 0, 0, 0, 898, 0, 0, 0, 0, 899,
	0, 878, 0, 909, 0, 0, 875, 876, 0, 895,
	896, 897, 905, 906, 907, 0, 0, 0, 0, 0,
	0, 0, 877, 0, 0, 0, 0, 0, 892, 878,
	0, 909, 0, 0, 0, 894, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 903, 0, 0, 0,
	877, 0, 0, 0, 0, 0, 892, 0, 0, 1430,
	1431, 1432, 0, 1429, 1426, 1427, 1428, 1420, 1421, 1422,
	1423, 1425, 0, 0, 0, 0, 0, 883, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 902, 910, 0, 0, 0,
	0, 0, 0, 0, 901, 883, 0, 889, 890, 891,
	908, 888, 885, 886, 887, 879, 880, 881, 882, 884,
	0, 904, 900, 902, 910, 0, 0, 0, 893, 27,
	0, 0, 0, 0, 0, 0, 0, 0, 908, 0,
	50, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	900, 0, 0, 0, 0, 0, 893, 0, 0, 0,
	0, 0, 0, 0, 52, 0, 0, 0, 0, 0,
	28, 0, 57, 0, 1418, 1419, 0, 1436, 1437, 1438,
	0, 0, 0, 0, 0, 0, 894, 0, 0, 0,
	1570, 41, 0, 0, 0, 0, 0, 903, 36, 0,
	0, 53, 0, 0, 0, 40, 37, 0, 0, 0,
	0, 0, 0, 0, 894, 0, 0, 0, 0, 0,
	0, 0, 42, 0, 1433, 903, 0, 0, 38, 0,
	0, 1418, 1419, 0, 1436, 1437, 1438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 0, 889, 890,
	891, 0, 888, 885, 886, 887, 879, 880, 881, 882,
	884, 0, 904, 1424, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 901, 0, 0, 889, 890, 891, 0,
	888, 885, 886, 887, 879, 880, 881, 882, 884, 0,
	904, 0, 0, 0, 39, 0, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 43, 0,
	54, 0, 0, 0, 1434, 44, 0, 0, 64, 0,
	1424, 0, 0, 47, 49, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 0, 0, 0, 0,
	0, 66, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1439, 0, 56, 0, 0, 0, 0,
	753, 747, 770, 741, 761, 760, 0, 0, 743, 742,
	67, 1434, 1435, 772, 771, 0, 0, 0, 62, 0,
	0, 0, 0, 0, 63, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 766, 0, 758, 757, 0, 0,
	0, 0, 0, 0, 0, 756, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 755, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1430, 1431, 1432, 0, 1429, 1426,
	1427, 1428, 1420, 1421, 1422, 1423, 1425, 0, 0, 748,
	749, 750, 751, 0, 769, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	759, 1430, 1431, 1432, 0, 1429, 1426, 1427, 1428, 1420,
	1421, 1422, 1423, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 0, 0, 0, 0, 752, 746, 0, 0, 0,
	0, 0, 0, 0, 774, 0, 0, 0, 0, 0,
	0, 0, 744, 0, 0, 767, 768, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 773,
}
var sqlPact = [...]int{

	24536, -1000, 51, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 736, 16775, -1000,
	-1000, -1000, -1000, -1000, -1000, 801, 706, 223, 4622, 16775,
	16775, 16516, 1150, 1150, 18070, -1000, -1000, 21178, -1000, 1967,
	514, 515, 514, 514, 520, 18070, 647, 661, 157, -1000,
	677, 17, 20919, 16775, 1397, 47, 15221, 337, 24536, 16257,
	20660, 16775, 15998, 320, 50, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1233, 1137, 1119, 15221,
	20401, 20142, 19883, 19624, -1000, 10393, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 763, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 356, 354,
	-1000, 15739, -1000, 994, -1000, 46, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 986, -1000, 16775, -1000, -1000, 19365,
	19106, 352, 942, -1000, -1000, 572, 437, 1437, -1000, 57,
	-1000, -1000, -1000, 1231, -1000, 973, 1229, 1228, 1226, 1220,
	1217, 1212, 434, 970, 500, -1000, 942, -1000, 942, -1000,
	-1000, -1000, 624, 18070, -1000, 15221, -1000, 18847, 16775, 16775,
	1151, 18588, -1000, 677, -1000, -1000, -1000, 1009, 1395, 1395,
	1395, 1421, 158, 151, 157, 23, 16775, -1000, 351, 23,
	6357, 6357, -1000, -1000, 337, -1000, 382, 13097, -1000, 7545,
	-1000, 817, 1307, 446, 717, 1305, -116, 833, 831, 1303,
	676, 12303, 50, -1000, -1000, -1000, 9279, 4339, 15221, 16775,
	16775, 705, 18329, -1000, 1302, 126, 1301, -1000, 125, 1299,
	-1000, 125, 1297, 40, -1000, -1000, -1000, -1000, -1000, -1000,
	337, 15480, 16775, 1461, 24764, -1000, 9279, -1000, -1000, 13639,
	821, 13639, -1000, -1000, 1457, -1000, 9279, -1000, 43, 39,
	1087, 1097, 10950, 10678, 1360, 1040, -1000, -1000, -1000, 56,
	4622, 16775, 1239, 13639, 16775, 16775, 16775, 16775, 16775, 16775,
	-1000, 1086, -1000, 16775, 16775, -1000, 33, 31, -1000, 18070,
	-1000, 130, -1000, 336, 1047, 448, 160, 17811, 448, 1046,
	-1000, 1009, -1000, 943, 1083, 8424, 9279, 157, -1000, -1000,
	157, 157, 9279, -1000, -1000, 16775, 23, 1451, 16775, 104,
	-1000, 23342, -1000, -1000, 9279, 9279, 9279, 9279, 9279, 892,
	-1000, -1000, 1556, -1000, 5499, -1000, -1000, 50, 335, 128,
	-1000, -1000, 334, 50, -1000, -1000, -1000, -1000, 333, 1579,
	433, -1000, -1000, -1000, 9279, 443, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1237, 332, 331, -1000, -1000,
	-1000, -1000, 325, 324, 321, 314, 312, 311, 307, 306,
	303, 300, 297, 296, 290, 289, 288, 854, -1000, 466,
	-1000, -1000, 466, 466, -1000, 285, 285, 286, -1000, -1000,
	-1000, -1000, 285, -1000, -1000, -1000, 410, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 287, 104, -1000, -1000, -1000, 16775,
	35, -1000, 24247, -1000, -28, 828, -1000, 14703, 1394, 1393,
	1384, 15221, 1438, 1436, 618, 16775, 16775, 608, 604, 15221,
	-1000, 1208, 30, -1000, -1000, 22928, -153, -1000, -1000, 454,
	111, 1450, 111, 12579, -1000, 16775, 16775, -1000, 16775, -1000,
	-1000, 16775, -1000, 16775, 16775, -1000, 16775, 166, 14185, 755,
	1295, 681, 17, 19, -1000, 1481, -1000, -1000, -1000, -1000,
	118, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 286, 854, 285, 285, 285,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 410, -1000, -1000,
	466, 466, 466, -1000, -1000, 18, 24247, 591, -19, 13912,
	16775, -1000, 53, -1000, -1000, 1199, 509, 11, 849, 1111,
	798, -1000, -1000, -1000, -1000, 21, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1531, -1000, -1000, -1000,
	-1000, 1555, 21, -1000, -1000, -1000, -1000, -1000, 1576, -1000,
	-1000, -1000, 4622, -1000, -1000, -1000, 16775, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 849, 1111, -1000,
	-1000, 15221, 14444, 1449, 1294, 866, -1000, 1446, 16775, 969,
	1043, -1000, 642, 1292, -1000, -1000, -1000, -1000, 24247, -1000,
	24247, 793, 1120, -1000, 1120, 14, -1000, 23283, -1000, 281,
	10, -1000, 454, 6357, 12044, 24764, 24764, 16775, 632, 9279,
	9279, 9279, 9279, 9279, 9279, 9279, 9279, 9279, 9279, 9279,
	9279, 9279, 9279, 9279, 9279, 9279, 9279, 9279, 9279, 9279,
	9279, 1028, 9279, 564, 9279, 9279, 9279, 9279, 1351, 890,
	258, 4622, -1000, 668, 668, 668, 24426, 24426, 241, -1000,
	50, 44, 22898, 9, 50, -1000, -1000, 6069, 8115, 50,
	4905, -1000, 938, 1554, 464, 24247, 1248, 1178, 279, 148,
	147, 9279, 9279, 9564, 9564, 9279, 9849, 9279, 9279, 5784,
	9279, 9279, 9279, 9279, 9279, 9279, -1000, 270, -1000, -1000,
	-1000, -1000, 1551, -1000, -1000, 1550, -1000, 631, 629, 1546,
	454, 145, 7545, -1000, 755, 16775, 16775, 16775, -1000, -1000,
	1034, 17552, 1033, 24764, 16775, -1000, 268, 267, 1110, 1108,
	16775, 16775, 17293, 17034, 16775, 740, 262, 261, 16775, 797,
	-1000, 16775, 16775, 767, 672, 1197, 16775, -1000, 9279, 758,
	9279, 800, -1000, 11769, 474, 16775, 807, 103, -1000, -1000,
	-1000, 399, 16775, -1000, -1000, -1000, 126, -1000, 125, 125,
	-1000, -1000, 15221, -1000, -1000, -1000, -1000, -1000, -1000, 24764,
	355, 189, -1000, 1543, 559, -1000, 558, 552, 550, -1000,
	260, -1000, 9279, 16775, 13912, -19, -21, -1000, -1000, 16775,
	1111, -1000, -1000, -1000, -1000, 724, -1000, 844, -1000, 11222,
	-1000, -1000, -1000, 938, -1000, -40, -1000, -1000, -1000, -1000,
	144, 2, -27, 24764, -1000, -1000, -1000, -1000, -1000, 16775,
	282, 16775, 17, 16775, -1000, 1575, 17, 16775, 1286, 1319,
	395, 16775, -1000, -1000, -1000, 9279, -1000, -1000, -1000, 17,
	16775, -1000, 1176, -1000, -103, 1157, -120, 405, -1000, 11494,
	-1000, -1000, -1000, 429, 987, 987, 518, 518, 518, 518,
	187, 187, 1215, 406, 2510, 2510, 2510, 2547, 283, 283,
	2510, 2510, 2510, 24426, 24398, 2002, 9279, 9279, 548, 875,
	258, 2002, 9279, 1525, 2002, 2002, 2002, -1000, 1354, -1000,
	-1000, -1000, 1194, 257, 9849, 9849, -1000, -1000, -1000, 5499,
	-1000, -1000, 256, 9279, -1000, -1000, 9279, 6, 3, -1000,
	-1000, 0, -1000, -1000, -9, 9279, 9279, 9279, 142, -1000,
	141, 657, -1000, 9279, 897, 255, 254, 9279, -1000, -1000,
	24048, 21743, 136, 1191, -109, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 135, 134, 24096, -109, 127, 23551, -1000, 9849,
	9849, 9849, 5499, 253, 119, 23253, -109, 23945, 7830, 7830,
	7830, 115, 23897, 9279, -109, 21714, 3345, 3248, -4, -5,
	-10, 1541, -11, 114, 427, 409, 113, 1176, -1000, -1000,
	-1000, -1000, 545, 544, 1283, -1000, 1027, -1000, 481, -1000,
	982, 9279, 16775, 252, 247, 847, -1000, 1273, 990, 1265,
	990, -1000, -28, 818, 9279, 9279, -1000, 543, -1000, -1000,
	542, -1000, 659, -1000, 360, 24247, -1000, 6357, 24247, -1000,
	760, 1386, -26, -1000, -1000, 6357, 454, 12579, 12044, 7545,
	-32, -1000, -1000, -1000, 755, -1000, 412, 1537, 112, 1056,
	891, 784, 727, 1533, 24247, -40, -1000, -40, -1000, -1000,
	-1000, -1000, -1000, -1000, 16775, 1154, -1000, 14444, 239, 16775,
	236, -1000, 219, -1000, -1000, 214, 16775, 1092, 395, 1583,
	-1000, 448, -1000, 102, -1000, 1172, 1418, -1000, 12044, 1002,
	1126, 1124, 12044, 1069, 893, 893, 893, -1000, 405, 4045,
	14962, 894, 72, 101, 1157, 9279, 2002, 2002, 9279, 9849,
	9849, -1000, 2002, -1000, -1000, -1000, -1000, 1190, 210, 9279,
	24764, 24594, 24199, -33, 7236, -48, 50, 22869, -1000, -1000,
	128, -1000, 100, 6951, -1000, 23591, -16, -16, -1000, 1572,
	1317, -1000, 9279, 23648, -1000, 12838, 457, 908, 22573, 24764,
	24764, -1000, 9279, -1000, -1000, 1189, 9279, -1000, 24764, 24764,
	9849, 9849, 9849, 9849, 9849, 9849, 9849, 9849, 9849, 9849,
	9849, 9849, 9849, 9849, 9849, 9849, 9849, 9849, 9849, 1094,
	9849, 1523, 1523, 1523, -52, 6642, -1000, 1195, 1189, 9279,
	9279, 24764, 99, 93, 92, -1000, 9279, -109, 9279, 9279,
	9279, -1000, -1000, -1000, 89, -1000, 1519, -1000, -1000, -1000,
	-1000, 1172, 16775, 16775, 16775, 1264, -1000, 1974, -1000, 22543,
	-38, 16775, 16775, -1000, 1109, 1115, 499, 16775, -1000, 16775,
	-1000, 16775, 16775, 16775, -39, -43, 16775, 16775, -1000, -1000,
	-85, 6357, 218, 17, -85, 758, -1000, -75, -1000, 398,
	-1000, 359, 159, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 88, -1000, -1000, 1164, -1000, 10134, 209, 16775, 14444,
	1442, 10134, 966, 1099, 395, 1570, -1000, 642, -1000, 452,
	9279, 9279, 1157, 650, 12044, 12044, 906, 1118, 12044, -1000,
	-1000, -1000, -1000, 14962, -1000, 1116, -1000, -1000, 16775, 207,
	-1000, 405, 498, 2002, 3147, 2571, 9279, 24764, 3401, -47,
	9279, 9279, -1000, -51, -1000, 9279, -1000, -1000, 1559, 9279,
	87, 81, 78, -1000, -1000, 24247, 9279, -1000, -1000, 21437,
	9279, 73, -1000, 69, 68, 24247, 1195, 24247, -1000, -1000,
	619, 619, 1523, 1523, 1523, 1523, 933, 933, 1325, 808,
	353, 353, 353, 373, 508, 508, 353, 353, 353, 1188,
	1045, 200, 24651, 9279, -63, -1000, -1000, -1000, 24247, 24247,
	67, -1000, -1000, -1000, -109, 3039, 22513, 22484, -1000, 66,
	452, -1000, -1000, -1000, 16775, -1000, 16775, -1000, 16775, 16775,
	1192, 1017, -1000, -1000, 1105, 199, 9849, 16775, -1000, 834,
	-64, -68, 1016, -1000, 1012, 9279, -1000, 24764, 990, 990,
	-1000, 536, 526, -1000, -1000, -1000, -1000, -85, 1324, 16775,
	1383, -1000, -1000, 191, -1000, -1000, -1000, 886, -73, -1000,
	195, 1404, 9279, -1000, -1000, 188, 10134, -74, 65, 17,
	-78, 16775, -1000, 395, 1564, -1000, 1319, -1000, 16775, 24247,
	-109, 622, -1000, 906, -1000, 185, 9279, 12044, -1000, -1000,
	-151, -1000, 391, -1000, 183, 16775, 14962, 9279, 9279, 3401,
	-80, -1000, 2002, 2002, -1000, 22188, -1000, 23591, -1000, -1000,
	-1000, 24247, 869, -1000, 22158, -1000, -1000, -1000, -1000, 9849,
	1186, 170, 24764, 22128, -1000, -1000, 9279, -1000, -1000, -1000,
	-1000, -1000, 1030, -1000, -1000, 16775, 1024, -1000, -1000, 9279,
	24651, 169, 1154, 168, -1000, -1000, -1000, 822, -1000, -1000,
	24247, 1405, -1000, -1000, 16775, 16775, 590, -95, 16775, -1000,
	-1000, 5214, 16775, 834, 10134, 1401, 50, 16775, 1401, 22099,
	4905, -96, -1000, 1154, -1000, 834, 167, 1562, -1000, 1092,
	-92, -1000, 1440, 13380, -1000, 16775, 24247, -1000, 1116, -1000,
	4622, 16775, -101, -1000, 2002, 2002, -1000, -1000, 62, 908,
	1417, -1000, 2952, 9849, 24764, -102, -1000, 21803, -1000, -1000,
	1261, 21773, 1066, 16775, -1000, 16775, 16775, 483, 16775, -1000,
	-1000, 696, -1000, 454, -1000, 164, 1154, -1000, -1000, -1000,
	-1000, 1404, -9, 834, -1000, 1154, 10134, -1000, 1099, 16775,
	163, -1000, 162, 50, -107, -1000, -1000, -108, -1000, -1000,
	753, 9279, 2952, -118, -1000, -1000, 1253, -1000, 917, 826,
	61, -124, 160, -1000, 9279, -1000, 12579, -1000, 16775, -1000,
	1401, 60, 1154, -1000, -126, -1000, -1000, -1000, 9279, -1000,
	-1000, 59, 8994, 8994, -109, -1000, 16775, -1000, 946, 919,
	667, -1000, -1000, -1000, -1000, -1000, 1066, 24247, -100, -130,
	-1000, -1000, -1000, 834, -16, -1000, -1000, -1000, 3704, 954,
	744, 22958, -1000, -1000, -1000, 1340, -1000, 489, 984, 984,
	917, -1000, 918, 1154, 20, 1494, -1000, -1000, -1000, -1000,
	-1000, -1000, 1503, -1000, -1000, 1102, -1000, -1000, -1000, -1000,
	-1000, -1000, 1559, 8709, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1778, 1777, 1463, 141, 1776, 139, 1775, 1773, 1772,
	1771, 1770, 1769, 102, 137, 135, 142, 131, 1768, 99,
	1767, 1765, 1763, 100, 1760, 1759, 1758, 38, 1755, 1752,
	130, 117, 1749, 1747, 98, 21, 170, 2313, 164, 1746,
	1744, 1743, 10, 108, 69, 1742, 133, 1741, 1739, 51,
	49, 17, 14, 1737, 106, 129, 886, 25, 1736, 1734,
	149, 20, 32, 154, 103, 156, 143, 126, 1732, 1731,
	1723, 55, 1722, 1, 1720, 1715, 13, 59, 12, 1714,
	36, 110, 1711, 1710, 144, 1708, 92, 109, 115, 33,
	128, 1121, 1706, 68, 11, 84, 1705, 16, 88, 1704,
	46, 81, 147, 1701, 65, 161, 82, 37, 61, 112,
	1698, 1697, 1696, 90, 1695, 104, 74, 1694, 1693, 78,
	1692, 146, 148, 1690, 1689, 124, 1685, 1684, 1683, 166,
	1681, 1679, 159, 1676, 5, 43, 66, 30, 119, 118,
	54, 107, 1675, 31, 1674, 1377, 1066, 765, 19, 62,
	58, 94, 53, 60, 26, 1673, 1672, 113, 1671, 1670,
	1669, 1668, 1665, 87, 1664, 79, 151, 35, 47, 52,
	101, 23, 27, 95, 121, 157, 116, 1663, 1662, 123,
	1661, 89, 1660, 1659, 1565, 125, 1657, 1656, 1654, 1477,
	1368, 1249, 85, 1651, 1644, 756, 267, 1643, 1642, 132,
	1641, 1640, 152, 255, 77, 1637, 122, 1636, 105, 1635,
	0, 75, 18, 1634, 127, 80, 1631, 1630, 1629, 1622,
	34, 2, 9, 6, 7, 4, 28, 24, 1621, 1620,
	145, 96, 86, 1618, 158, 1617, 1615, 1607, 50, 1606,
	22, 1604, 15, 1599, 1598, 8, 3, 150, 1597, 111,
	1596, 1468, 1595, 153, 1591, 1588, 1448, 44, 93,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	44, 44, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 41, 41, 46,
	46, 46, 48, 48, 45, 45, 40, 40, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 13, 14, 14,
	14, 14, 14, 14, 14, 14, 90, 90, 89, 89,
	92, 92, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 180, 180, 179, 18, 155,
	155, 19, 19, 19, 19, 20, 114, 114, 21, 21,
	21, 21, 22, 26, 247, 247, 247, 251, 251, 252,
	252, 253, 253, 253, 253, 253, 253, 253, 249, 249,
	29, 29, 29, 29, 29, 133, 129, 129, 131, 131,
	131, 131, 55, 128, 128, 128, 128, 130, 130, 130,
	130, 203, 202, 202, 208, 208, 208, 68, 68, 68,
	68, 68, 69, 69, 69, 201, 201, 201, 201, 209,
	209, 209, 209, 209, 209, 70, 70, 70, 207, 207,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 17,
	248, 248, 250, 250, 31, 31, 9, 9, 10, 10,
	71, 71, 72, 72, 136, 136, 136, 136, 73, 73,
	47, 47, 47, 135, 218, 218, 219, 219, 219, 219,
	219, 219, 220, 220, 220, 220, 220, 220, 220, 216,
	216, 217, 214, 214, 215, 215, 215, 215, 254, 254,
	134, 134, 76, 76, 223, 223, 223, 223, 221, 221,
	221, 221, 221, 224, 222, 225, 225, 225, 225, 225,
	166, 166, 166, 33, 11, 53, 53, 12, 8, 8,
	118, 118, 80, 80, 171, 171, 171, 62, 62, 42,
	42, 42, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 119, 119, 120, 120, 24, 28, 32,
	32, 32, 32, 32, 256, 256, 59, 59, 59, 59,
	60, 60, 132, 132, 132, 132, 132, 54, 7, 7,
	49, 49, 50, 50, 51, 51, 52, 52, 257, 257,
	23, 23, 23, 23, 23, 65, 65, 125, 125, 125,
	127, 127, 126, 126, 126, 104, 104, 34, 85, 85,
	94, 94, 95, 95, 177, 96, 96, 27, 27, 37,
	37, 35, 35, 35, 35, 35, 35, 36, 36, 38,
	38, 38, 38, 38, 38, 38, 231, 231, 231, 234,
	234, 230, 232, 232, 233, 233, 255, 255, 105, 105,
	105, 75, 74, 74, 78, 78, 77, 79, 79, 170,
	102, 102, 102, 102, 121, 122, 122, 123, 123, 124,
	124, 101, 101, 152, 152, 39, 39, 84, 84, 86,
	86, 143, 143, 144, 144, 142, 142, 142, 172, 172,
	172, 172, 169, 169, 173, 173, 173, 173, 173, 173,
	167, 167, 167, 167, 168, 168, 178, 178, 108, 108,
	108, 108, 106, 106, 107, 107, 174, 174, 174, 174,
	103, 103, 175, 175, 175, 137, 137, 181, 181, 181,
	83, 83, 83, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 183, 183, 183, 183,
	185, 185, 185, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 186, 186, 193,
	193, 194, 194, 195, 196, 187, 187, 188, 188, 189,
	190, 197, 197, 197, 197, 199, 199, 191, 191, 191,
	191, 191, 192, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 116, 116, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 226, 226, 226, 226, 226, 226, 226, 228, 228,
	229, 229, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 235,
	235, 236, 236, 238, 238, 239, 239, 240, 241, 241,
	241, 242, 243, 243, 237, 237, 244, 244, 244, 245,
	245, 246, 246, 246, 246, 246, 157, 157, 157, 158,
	158, 159, 91, 91, 154, 154, 153, 153, 153, 156,
	156, 109, 109, 198, 198, 198, 198, 198, 198, 198,
	110, 110, 110, 117, 111, 111, 112, 112, 112, 112,
	112, 112, 149, 150, 113, 113, 113, 151, 151, 160,
	164, 164, 163, 162, 162, 161, 161, 140, 140, 140,
	140, 141, 141, 139, 138, 97, 97, 98, 98, 258,
	258, 165, 165, 99, 99, 100, 93, 93, 176, 176,
	176, 176, 87, 87, 67, 67, 88, 88, 63, 63,
	66, 66, 64, 64, 64, 64, 81, 81, 82, 82,
	61, 61, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 200, 200, 200, 56, 56, 56, 57,
	57, 58, 58, 205, 205, 205, 206, 206, 206, 206,
	204, 204, 204, 204, 204, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 4, 4, 2, 2,
	2, 0, 2, 0, 8, 8, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 5, 2, 0, 6, 11, 14,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 6, 8, 8,
	10, 8, 10, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 1, 3, 3, 0, 3, 8, 11,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 6, 8, 5, 7, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 3, 0, 1,
	3, 3, 1, 1, 3, 2, 4, 0, 4, 3,
	1, 5, 2, 0, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	2, 2, 4, 1, 1, 1, 2, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 6, 4, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 1, 1, 3,
	5, 1, 0, 2, 2, 1, 2, 0, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 3, 5,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -18, -20, -21, -22, -23, -25, -26, -28, -27,
	-29, -30, -31, -32, -24, -33, -34, 23, 64, -7,
	-8, -9, -10, -11, -12, -233, 92, 100, 122, 198,
	99, 85, 116, 212, 219, -35, -37, 227, -133, 228,
	34, 237, 58, 95, 214, 209, 259, 66, -231, -38,
	-36, 307, 282, 288, 222, -39, 245, 274, 310, 245,
	130, 78, 277, -63, -56, 4, -210, -212, 20, 21,
	23, 33, 34, 39, 43, 46, 57, 58, 59, 61,
	63, 64, 65, 68, 69, 76, 77, 78, 79, 81,
	85, 87, 91, 92, 94, 99, 100, 106, 107, 110,
	112, 117, 122, 123, 124, 131, 134, 129, 143, 145,
	146, 149, 148, 153, 156, 159, 161, 162, 163, 164,
	165, 167, 168, 170, 172, 169, 175, 177, 178, 184,
	187, 190, 191, 192, 193, 196, 198, 200, 201, 202,
	204, 205, 209, 207, 208, 210, 212, 214, 215, 217,
	219, 220, 221, 224, 225, 227, 228, 230, 233, 236,
	237, 238, 241, 239, 235, 244, 246, 247, 248, 255,
	259, 260, 261, 262, 265, 266, 267, 269, 271, 272,
	273, 278, 283, 284, 285, 286, 28, 35, 36, 37,
	38, 40, 41, 44, 45, 49, 50, 51, 53, 80,
	82, 83, 98, 101, 102, 108, 118, 120, 125, 126,
	135, 136, 137, 138, 140, 151, 174, 176, 185, 189,
	195, 197, 203, 216, 223, 231, 232, 240, 242, 250,
	251, 252, 256, 257, 274, 275, 87, 134, 267, 266,
	78, 130, 245, 277, -16, 307, -27, -6, -14, -4,
	-23, -34, -13, -30, -17, -31, -15, 23, -204, 4,
	-210, -212, -211, -213, 55, 67, 115, 133, 127, 142,
	144, 152, 154, 166, 186, 188, 213, 229, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 42, 47, 48,
	52, 54, 56, 62, 66, 70, 71, 72, 73, 74,
	75, 84, 86, 88, 89, 90, 93, 95, 97, 103,
	104, 105, 111, 113, 114, 116, 119, 121, 128, 130,
	132, 139, 141, 147, 150, 155, 157, 158, 171, 173,
	179, 180, 181, 182, 183, 194, 199, 206, 211, 222,
	226, 234, 243, 245, 249, 253, 254, 258, 263, 264,
	268, 270, 276, 277, 279, 280, 281, 282, -56, -56,
	-56, 198, 22, -251, 22, -252, -253, 66, 92, 116,
	222, 134, 87, 266, -251, -60, 219, -56, -129, 156,
	225, 216, 255, -130, -128, -203, 250, 165, -89, -56,
	4, 22, 78, 57, 79, 117, 130, 131, 62, 63,
	146, 246, 250, 255, 66, 269, -256, 255, 255, -256,
	-256, -59, 255, 253, -60, -255, 245, 245, 268, 277,
	-118, 78, 264, -36, -38, -37, -77, -78, 263, 139,
	97, 183, -35, -37, -231, -234, 204, -230, -56, -234,
	-74, -75, 22, 89, 311, -174, -63, 181, -100, 307,
	-3, -174, 125, -63, -66, 125, -63, -56, -174, 125,
	114, 307, -97, -140, -139, -138, 305, 309, 114, 141,
	141, -175, -174, -56, 125, -67, 125, -66, -90, 125,
	-89, -90, 125, -180, -179, -206, 4, -210, -212, -211,
	274, 245, 130, -155, 307, -114, 307, -56, 22, 180,
	311, 180, -56, -129, 51, -129, 307, -131, -54, -55,
	143, 200, 253, 292, 114, 286, -70, 5, 84, -92,
	309, 114, -248, 180, 114, 114, 114, 114, 114, 114,
	286, 143, 200, 245, 277, -132, -54, -55, -132, 253,
	-60, -103, -174, -89, 125, -56, -89, 130, -56, 125,
	-77, -78, -102, -121, -122, 155, 179, -105, 22, 89,
	-105, -105, 43, 308, 308, 311, -234, -82, 307, -93,
	-176, -145, 300, -147, 298, 299, 304, 171, 287, -157,
	-63, -148, 312, 9, 307, -160, -228, -37, 98, 29,
	-158, -159, 216, -56, 7, 8, 5, 6, -61, -183,
	-192, 258, 103, 173, 47, -226, -227, 4, -210, -205,
	-184, -194, -188, -191, 140, 55, 71, 74, 72, 75,
	226, 268, 48, 28, 101, 102, 189, 195, 242, 256,
	257, 125, 174, 126, 53, 118, 151, 91, 36, 38,
	40, 41, 49, 50, 80, 82, 83, 108, 135, 136,
	137, 138, 176, 203, 231, 240, 251, 252, 275, -211,
	-195, -196, -189, -190, -197, -93, -100, 300, -63, 307,
	-99, -165, -145, 84, -44, 207, -43, 21, 23, 92,
	272, 98, 235, 235, 207, 98, 312, 207, 207, 98,
	238, 308, -87, -63, -140, -145, -141, -204, 300, -175,
	-65, -63, -65, 227, -56, 30, 98, -46, 311, 46,
	210, 98, -46, 311, 98, -46, 98, 308, 311, -174,
	125, -66, 30, -154, -181, -182, -184, -193, -187, -191,
	-192, 39, 45, 44, 248, 223, 232, 37, 135, 136,
	137, 138, 231, 36, 203, 108, 91, 83, 82, 176,
	41, 40, -195, -196, -189, -190, 80, 251, 252, 140,
	38, 50, 49, 275, 240, -91, -145, -247, -88, 245,
	78, -64, -56, 300, -253, -247, 30, -91, 311, 311,
	153, -69, 159, 170, 123, -202, 84, -208, -201, -166,
	9, 258, 103, 180, -207, 8, 299, -200, -206, 5,
	7, 298, -202, 84, 69, -209, 5, 4, -192, -166,
	84, 156, 309, -204, -203, -250, 111, -247, -203, -203,
	-203, -203, -203, -56, 153, -203, -203, 311, 311, -60,
	-46, 311, 307, -76, 171, -232, 282, -76, 307, -57,
	125, -56, -232, 171, -102, -122, -121, -123, -145, 22,
	-145, -147, -36, -36, -36, -79, -170, -145, -230, 30,
	-81, -56, -84, 311, 114, 10, 11, 54, 33, 298,
	299, 300, 301, 109, 302, 295, 296, 297, 294, 290,
	291, 292, 60, 160, 218, 13, 14, 15, 26, 182,
	154, 287, 127, 229, 304, 16, 17, 18, 142, 35,
	128, 30, 4, -145, -145, -145, -145, -145, 188, 7,
	-98, -37, -145, -91, -97, -37, -153, 305, 307, -97,
	307, 5, 5, 307, -161, -145, -235, 283, 111, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 197, -199, 278, -199,
	-199, -185, 307, -185, -186, 307, -185, 284, 288, 307,
	-84, -63, 311, 308, 311, 253, -119, 62, 56, -135,
	125, 56, -214, -56, 62, -215, 52, 264, 199, 113,
	-119, 62, -119, 62, 62, -174, 33, 33, 253, -66,
	-56, 253, 253, -174, 114, 308, 311, 306, 315, -137,
	280, -125, -27, 307, 84, 30, -125, -94, -95, -177,
	-96, -63, 307, -56, -56, -66, -67, -89, -90, -90,
	-16, -179, 98, -19, -27, -23, -34, -13, 308, 311,
	-83, 29, -115, 307, 285, 163, 81, 124, 162, -116,
	221, 308, 311, 253, 311, -88, -81, -139, -138, 114,
	255, 308, -55, -54, -68, 202, 233, 208, 224, 311,
	8, 7, 7, 5, -204, -249, -56, -55, -54, -174,
	-71, -81, -72, -56, -136, -135, -216, -217, -214, 130,
	264, 104, 30, 98, -53, 193, 30, 180, 171, -49,
	247, 98, -124, 216, 217, 311, -42, 31, 88, 307,
	311, 308, -137, -176, -86, -172, -174, -37, -173, 307,
	-181, -181, -89, 250, -145, -145, -145, -145, -145, -145,
	-145, -145, -145, -145, -145, -145, -145, -145, -145, -145,
	-145, -145, -145, -145, -145, -145, 154, 127, 229, 35,
	128, -145, 253, -145, -145, -145, -145, 173, 171, 258,
	103, 265, 89, 177, -258, 243, 32, -151, -37, 307,
	-204, -157, 216, 307, -140, 308, 311, -91, -156, 306,
	-153, -91, 308, 308, -91, 276, 22, 89, 300, -115,
	7, -164, -163, 279, -236, 106, 119, 307, 308, 308,
	-145, -145, -109, -198, -91, 4, 285, 163, 81, 124,
	162, 221, -109, -110, -145, -91, -111, -146, -147, 298,
	299, 304, 307, 216, -112, -145, -91, -145, 42, 150,
	254, -113, -145, 114, -91, -145, -145, -145, -91, -91,
	-91, 307, 7, 7, 250, 250, 7, -137, 308, -165,
	-43, -63, -56, -56, 171, -135, 125, -48, 171, -181,
	-56, 307, 307, 145, 145, -56, -56, 125, -56, 125,
	-56, -56, -44, 207, 307, 307, -56, 207, -56, -63,
	207, 238, 114, -63, -141, -145, -104, 211, -145, -104,
	-127, 180, -87, 274, -56, 211, -85, 311, 114, 292,
	-87, -46, -46, -46, -174, -181, 305, 305, 7, 253,
	253, 253, 253, 307, -145, -249, -64, -249, -54, 262,
	59, 202, -208, -115, 311, 308, 308, 311, -57, 130,
	-57, -27, -89, 5, -27, -63, 98, -50, 94, -257,
	292, -56, -170, -19, -56, -101, 119, -178, 311, 289,
	67, -108, 144, 166, 115, 152, 213, 133, -142, 312,
	-169, 288, -37, -173, -172, 286, -145, -145, 253, -258,
	243, -151, -145, 173, 258, 103, 265, 89, 177, 114,
	307, -146, -146, -91, 307, -91, -98, -145, 306, 306,
	311, 308, -78, 311, -77, -145, -91, -91, 308, 308,
	-162, -163, 93, -145, -241, 187, 307, 307, -145, 30,
	311, 308, 114, 308, 308, -117, 194, 308, 10, 11,
	298, 299, 300, 301, 109, 302, 295, 296, 297, 294,
	290, 291, 292, 60, 160, 218, 13, 14, 15, 142,
	128, -146, -146, -146, -91, 307, 308, -149, -150, 114,
	111, 30, -113, -113, -113, 308, 114, -91, 311, 311,
	311, 308, 308, 308, 7, 308, 311, 308, 286, 286,
	308, -101, 253, 253, 98, 171, 271, -218, -215, -145,
	-81, 307, 307, -41, 92, 227, -120, 98, -46, 98,
	-46, 253, -119, 62, -91, -91, 253, 253, 238, 306,
	-93, 211, 61, 308, -93, -137, -95, -86, -165, 308,
	306, 7, 7, 308, 163, 124, 162, -116, 162, -116,
	-116, 7, -56, -73, 129, -136, 307, -57, 307, 307,
	-76, 307, -56, -51, 149, -257, 4, -232, 308, -152,
	121, 43, -172, 177, 144, 144, -172, -108, 144, -106,
	186, -106, -106, -169, -204, 313, -168, -167, 30, -56,
	184, 308, -145, -145, -146, -146, 114, 307, -145, -154,
	26, 26, 308, -91, 308, 311, 308, -153, 308, 276,
	-78, -78, -78, 5, 95, -145, 249, -242, -56, 307,
	280, -77, 308, -181, -181, -145, -149, -145, -181, -181,
	-146, -146, -146, -146, -146, -146, -146, -146, -146, -146,
	-146, -146, -146, -146, -146, -146, -146, -146, -146, 89,
	171, 177, -146, 311, -91, 308, -150, -149, -145, -145,
	-181, 308, 308, 308, -91, -145, -145, -145, 308, 7,
	-152, -56, -56, -135, 98, -219, 62, -220, 54, 104,
	66, 171, 173, 264, 199, 52, 84, 206, 308, 308,
	-81, -81, 171, 84, 171, 84, 77, 260, -56, -56,
	-63, -56, -56, 308, 308, -56, -63, -93, -126, 307,
	180, -27, -104, 292, 306, 306, 308, 128, -80, -171,
	-56, -229, 307, -226, -227, -61, 307, -81, -71, 30,
	-80, 180, -52, 148, -257, 5, -49, -238, 281, -145,
	-91, 244, -172, -172, -107, 270, 180, 144, -172, -168,
	-144, -143, 112, 169, -56, 307, -169, 26, 26, -145,
	-154, 308, -145, -145, 308, -145, 5, -145, 308, 308,
	308, -145, -243, -56, -145, 308, 308, 308, -150, 114,
	89, 177, 307, -145, 308, 308, 311, 308, 308, 308,
	-238, -135, -56, -89, -56, 104, 125, 173, 145, 307,
	-146, -63, -134, -254, 65, 241, 308, 308, 173, 173,
	-145, -181, -46, -46, 253, 253, 90, -81, 62, -100,
	-37, 307, 190, 308, 311, -62, -97, 54, -62, -145,
	307, -80, 308, 308, -27, 308, -63, -257, 5, -50,
	-239, -240, -56, 250, -107, 307, -145, -172, 311, 314,
	292, 307, -81, -167, -145, -145, 308, 308, -78, -237,
	192, 308, -146, 114, 307, -154, 308, -145, -220, -57,
	171, -145, -58, 307, -73, 307, 206, -45, 54, -56,
	-56, 266, 172, 308, -56, -56, -134, -171, -42, -89,
	-42, 308, -91, 308, -73, -134, 307, 5, -51, 311,
	30, -148, -61, -56, -81, -143, -204, -81, 308, 308,
	-78, 43, -146, -154, 308, 308, 98, 308, -223, 161,
	-56, -81, -63, -40, 270, -89, 227, -137, 307, -73,
	-62, -78, -134, -73, -80, -52, -240, -242, 307, 308,
	308, -244, 201, 217, -91, 308, 104, -221, -224, -222,
	180, 115, 191, 230, 308, 308, -76, -145, -94, -81,
	-42, 308, -73, 308, -91, 308, -245, -246, 35, 261,
	69, -145, -245, -56, -222, 180, -224, 180, 266, 87,
	-223, -137, 308, -134, -78, -246, 196, 110, 216, 196,
	110, -225, 168, 210, 46, 227, -225, -221, -47, 46,
	210, -73, 308, 26, 20, 173, 84, -246,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 66, 0, 0, 395, 0, 0,
	0, 0, 0, 0, 0, 367, -2, 0, 134, 0,
	315, 0, 315, 315, 319, 0, 397, 281, 394, -2,
	405, 0, 0, 0, 403, 381, 0, 0, -2, 0,
	0, 0, 0, 0, 808, 836, 837, 838, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 0, 199, 850,
	851, 852, 853, 854, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 100, 107,
	108, 923, 110, 0, 117, 118, 119, 121, 122, 123,
	124, 125, 126, 127, 0, 308, 937, 321, 130, 901,
	941, 1010, 956, 137, 147, 0, 1016, -2, 151, 78,
	180, 181, 182, 0, 184, 201, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 198, 326, 314, 326, 311,
	312, 313, 316, 0, 307, 0, 396, 0, 0, 0,
	0, 0, 280, -2, 377, 378, -2, 0, 400, 400,
	400, 0, 0, 378, 0, 386, 927, 389, 819, 387,
	0, 0, 402, 401, 0, 382, 466, 0, 425, 0,
	2, 0, 995, 466, 0, 995, 811, 0, 0, 995,
	0, 0, 809, 785, 777, 778, 782, 0, 0, 0,
	0, 0, 472, 68, 995, 51, 995, 804, 51, 995,
	76, 51, 995, 0, 95, 97, 846, 847, 848, 849,
	1021, 0, 0, 0, 0, 105, 0, 109, 111, 0,
	0, 0, 320, 131, 984, 133, 0, 136, 138, 139,
	0, 0, 0, 0, 0, 0, 150, 175, 176, 79,
	0, 0, 203, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 195, 0, 0, 309, 322, 323, 310, 0,
	318, 51, 470, 253, 995, 393, 253, 840, 393, 995,
	-2, 0, 373, 412, 413, 0, 0, 0, 398, 399,
	0, 0, 0, 369, 370, 0, 388, 0, 0, 428,
	796, 800, 801, 559, 0, 0, 0, 0, 0, 0,
	648, 649, 0, 787, 0, 653, 654, 655, 989, 0,
	659, 660, 1010, 808, 822, 823, 824, 825, 0, 0,
	0, 830, 831, 832, 776, 700, 669, -2, -2, 820,
	496, 497, 498, 499, -2, 1023, 673, 675, 677, 678,
	679, 680, 0, 973, 990, 991, 1006, 1007, 1015, 1019,
	1020, 995, 1003, 996, 985, 993, 1002, 879, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 845,
	521, 522, 527, 528, 530, 428, 426, 467, 468, 0,
	0, 793, 791, 792, 28, 304, 30, 0, 304, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 802, 786, 781, 0, 783, 784, 476,
	0, 345, 0, 0, 473, 0, 0, 70, 0, 49,
	50, 0, 72, 0, 0, 74, 0, 395, 0, 0,
	995, 0, 395, 0, 734, 482, 483, 484, 485, 486,
	556, 489, 490, 491, 492, 493, 494, 495, 503, 504,
	505, 506, 507, 508, 509, 518, 0, 502, 502, 502,
	515, 516, 519, 520, 525, 526, 537, 538, 540, 542,
	536, 536, 536, 533, 534, 0, 732, 0, 114, 0,
	874, 806, 812, 813, 120, 0, 0, 0, 0, 0,
	0, 142, 162, 163, 164, 143, 145, 152, 154, 155,
	156, 165, 166, 167, 168, 270, 0, 272, 178, 179,
	833, 0, 144, 146, 148, 149, 169, 170, 0, 172,
	173, 174, 0, 80, 183, 185, 0, 200, 186, 187,
	188, 189, 190, 191, 194, 196, 197, 0, 0, 317,
	273, 0, 211, 0, 0, 276, 392, 0, 0, 0,
	995, 839, 331, 0, 376, 410, 411, 414, 417, 418,
	415, 559, 383, 384, 385, 406, 407, 291, 390, 0,
	0, 816, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 790,
	0, 0, 799, 564, 565, 566, 588, 589, 0, 650,
	651, -2, 732, 0, 656, 657, 658, 0, 0, -2,
	0, 827, 556, 0, 0, 775, 702, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 755, 761, 0, 0,
	0, 0, 0, 0, 0, 0, 511, 524, 535, 532,
	531, 513, 0, 512, 510, 0, 514, 0, 0, 0,
	476, 0, 0, 795, 0, 0, 0, 0, 303, 32,
	995, 0, 53, 0, 0, 243, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	810, 0, 0, 0, 0, 0, 0, 779, 782, 356,
	0, 356, 347, 0, 0, 0, 343, 359, 360, 362,
	363, 0, 0, 474, 69, 805, 51, 77, 51, 51,
	83, 96, 0, 98, 101, 102, 103, 104, 99, 0,
	477, 479, 487, 0, 543, 544, 545, 546, 547, 548,
	557, 106, 0, 0, 0, 115, 116, 814, 815, 0,
	0, 135, 140, 141, 327, 0, 159, 0, 161, 0,
	271, 835, 834, 556, 81, 202, 128, 324, 325, 471,
	0, 0, 210, 816, 212, 214, 215, 216, 217, 840,
	0, 840, 0, 0, 274, 0, 0, 0, 0, 333,
	339, 0, 416, 419, 420, 0, 409, 289, 290, 395,
	0, 818, 422, 797, 457, 429, 437, 443, 440, 0,
	560, 561, 562, 0, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, -2, -2, -2, 580, 581, 582,
	-2, -2, -2, 586, 587, -2, 0, 0, 0, 790,
	0, -2, 0, 596, -2, -2, -2, 600, 0, 603,
	605, 607, 0, 0, 0, 0, 789, 617, 767, 0,
	798, 602, 0, 0, 788, 787, 0, 0, 0, 738,
	739, 0, -2, 661, 405, 0, 0, 0, 0, 828,
	0, 774, 770, 0, 710, 0, 0, 0, 674, 676,
	0, 0, 0, 0, 742, -2, -2, -2, -2, -2,
	-2, -2, 0, 0, 732, 752, 0, 0, 619, 0,
	0, 0, 0, 1010, 0, 732, 760, 0, 0, 0,
	0, 0, 732, 0, 766, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 422, 469, 794,
	31, 293, 0, 0, 0, 34, 995, 42, 0, 225,
	0, 0, 0, 0, 0, 306, 43, 995, 51, 995,
	51, 44, 29, 304, 0, 0, 297, 0, 292, 295,
	0, 59, 0, 803, 0, 781, 67, 0, 475, 340,
	341, 0, 0, 349, 346, 0, 476, 0, 0, 0,
	0, 71, 73, 75, 0, 735, 0, 0, 0, 0,
	0, 0, 0, 0, 733, 112, 807, 113, 132, 157,
	158, 160, 153, 171, 0, 219, 252, 0, 0, 840,
	0, 208, 253, 275, 277, 0, 0, 335, 339, 0,
	338, 393, 408, 0, 817, 424, 0, 427, 0, 0,
	0, 0, 0, 0, 463, 463, 463, 461, 443, 0,
	455, 0, -2, 440, 0, 0, -2, -2, 0, 0,
	0, 618, -2, 601, 604, 606, 608, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 652, 733, 736, 737,
	0, -2, 0, 0, 404, 405, 405, 405, 667, 0,
	0, 771, 0, 0, 668, 0, 0, 0, 0, 0,
	0, 683, 0, 684, 685, 0, 0, 686, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 623, 624, 0, 0, 687, 758, 759, 0,
	0, 0, 0, 0, 0, 692, 0, 765, 0, 0,
	0, 696, 697, 698, 0, 500, 0, 517, 539, 541,
	529, 424, 0, 0, 0, 0, 52, 223, 242, 0,
	0, 0, 0, 36, 0, 0, 0, 0, 40, 0,
	46, 0, 0, 0, 0, 0, 0, 0, 60, 780,
	355, 0, 354, 0, 344, 356, 361, 358, 364, 0,
	480, 0, 0, 488, 549, 550, 551, 552, 553, 554,
	555, 0, 129, 206, 0, 213, 0, 0, 0, 211,
	0, 0, 0, 337, 339, 0, 330, 331, 391, 704,
	0, 0, 430, 0, 0, 0, 0, 0, 0, 458,
	462, 459, 460, 455, 435, 0, 439, 454, 0, 453,
	442, -2, 563, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 768, 0, 727, 0, -2, 740, 662, 0,
	0, 0, 0, 829, 769, 773, 0, 708, 709, 713,
	0, 0, 672, 0, 0, 741, 751, 753, 620, 621,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	-2, -2, -2, 638, 639, 640, -2, -2, -2, 0,
	0, 0, 754, 0, 0, 730, 756, 757, 762, 763,
	0, 689, 690, 691, 764, 0, 0, 0, 523, 0,
	704, 299, 301, 33, 0, 224, 0, 227, 0, 0,
	0, 0, 233, 234, 0, 0, 0, 0, 244, 251,
	0, 0, 0, 48, 0, 0, 305, 0, 51, 51,
	294, 0, 0, 204, 205, 298, 296, 342, 0, 0,
	0, 348, 357, 0, 481, 478, 558, 0, 0, 282,
	288, 288, 0, 670, 671, 0, 0, 0, 0, 0,
	0, 0, 328, 339, 0, 332, 333, 379, 0, 423,
	421, 0, 445, 0, 447, 0, 0, 0, 449, 438,
	0, 433, 0, 432, 451, 0, 0, 0, 0, -2,
	0, 611, -2, -2, 726, 733, 826, 405, 663, 665,
	666, 772, 715, 712, 0, 699, 681, 682, 750, 0,
	0, 0, 0, 733, 729, 688, 0, 694, 695, 501,
	380, 35, 0, 228, 229, 840, 0, 232, 235, 0,
	237, 842, 219, 0, 248, 249, 246, 0, 37, 38,
	47, 55, 39, 45, 0, 0, 0, 0, 0, 365,
	366, 0, 0, 251, 0, 291, 821, 0, 291, 0,
	0, 0, 241, 219, 209, 251, 0, 0, 334, 335,
	703, 705, 0, 0, 446, 0, 465, 448, 0, 436,
	0, 0, 0, 441, -2, -2, 612, 728, 0, 405,
	0, 701, -2, 0, 0, 0, 731, 0, 226, 230,
	0, 0, 257, 0, 245, 0, 0, 57, 0, 300,
	302, 0, 351, 476, 353, 0, 219, 283, 284, 287,
	285, 288, 405, 251, 207, 219, 0, 336, 337, 0,
	0, 456, 0, 0, 0, 434, 431, 0, 452, 664,
	718, 0, -2, 0, 646, 693, 0, 236, 262, 0,
	0, 0, 253, 41, 0, 54, 0, 352, 0, 239,
	291, 0, 219, 278, 0, 329, 706, 707, 0, 464,
	450, 0, 0, 0, 714, 647, 0, 238, 258, 259,
	0, 254, 255, 256, 841, 250, 257, 56, 476, 0,
	286, 662, 240, 251, 405, 711, 716, 719, -2, 959,
	871, 0, 717, 231, 260, 0, 261, 0, 0, 0,
	262, 350, 222, 219, 0, 0, 721, 722, 723, 724,
	725, 263, 0, 266, 267, 0, 264, 247, 218, 220,
	221, 279, 0, 0, 265, 268, 269, 720,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 296, 3, 302, 297, 3,
	307, 308, 300, 298, 311, 299, 309, 301, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 315, 310,
	290, 292, 291, 3, 312, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 305, 3, 306, 295, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 313, 294, 314, 304,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 293, 57633, 303, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:724
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:730
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:736
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:761
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:778
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:782
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:788
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:828
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:851
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:861
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:924
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:928
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1058
		{ /* SKIP DOC */
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1245
		{
			return unimplemented(sqllex)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1254
		{ /* SKIP DOC */
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			return unimplemented(sqllex)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1323
		{
			return unimplemented(sqllex)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = Low
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = Normal
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = High
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1415
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			return unimplemented(sqllex)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1435
		{
			return unimplemented(sqllex)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1436
		{
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1630
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1634
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = DropDefault
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1644
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1672
		{
			return unimplemented(sqllex)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1846
		{
			return unimplemented(sqllex)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1847
		{
			return unimplemented(sqllex)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return unimplemented(sqllex)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1849
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			return unimplemented(sqllex)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1857
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1858
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1860
		{
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1863
		{
			return unimplemented(sqllex)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1866
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1872
		{
			return unimplemented(sqllex)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1873
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = true
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = false
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1979
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1980
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1983
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1984
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = Ascending
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = Descending
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2038
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2039
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = true
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = false
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2052
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2053
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2086
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2095
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2096
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.str = ""
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.str = ""
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].union.strVal(),
				Encoding: sqlDollar[6].union.strVal(),
				Collate:  sqlDollar[7].union.strVal(),
				CType:    sqlDollar[8].union.strVal(),
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].union.strVal(),
				Encoding:    sqlDollar[9].union.strVal(),
				Collate:     sqlDollar[10].union.strVal(),
				CType:       sqlDollar[11].union.strVal(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2218
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2219
		{
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2238
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2245
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2287
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2291
		{
			return unimplemented(sqllex)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 357:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2316
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2317
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2544
		{
			return unimplemented(sqllex)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			return unimplemented(sqllex)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2546
		{
			return unimplemented(sqllex)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2549
		{
			return unimplemented(sqllex)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2550
		{
			return unimplemented(sqllex)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2553
		{
			return unimplemented(sqllex)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2556
		{
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2557
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2560
		{
			return unimplemented(sqllex)
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2561
		{
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2564
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2565
		{
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = true
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = false
		}
	case 400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = false
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = true
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2588
		{
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2589
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2627
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2647
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2688
		{
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2689
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = &From{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2787
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = true
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = false
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.str = astFullJoin
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.str = astLeftJoin
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.str = astRightJoin
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.str = astInnerJoin
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2944
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3034
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3035
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3039
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3040
		{
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3048
		{
			return unimplemented(sqllex)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3095
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3104
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = nil
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3153
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3225
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3257
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3296
		{
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3297
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3328
		{
			return unimplemented(sqllex)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3329
		{
			return unimplemented(sqllex)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3330
		{
			return unimplemented(sqllex)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3331
		{
			return unimplemented(sqllex)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3332
		{
			return unimplemented(sqllex)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3333
		{
			return unimplemented(sqllex)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3334
		{
			return unimplemented(sqllex)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3335
		{
			return unimplemented(sqllex)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			return unimplemented(sqllex)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3337
		{
			return unimplemented(sqllex)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3338
		{
			return unimplemented(sqllex)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			return unimplemented(sqllex)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			return unimplemented(sqllex)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3341
		{
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3344
		{
			return unimplemented(sqllex)
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3345
		{
			return unimplemented(sqllex)
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3380
		{
			return unimplemented(sqllex)
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3540
		{
			return unimplemented(sqllex)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3744
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3757
		{
			placeholder := NewPlaceholder(sqlDollar[1].str)
			if indirection := sqlDollar[2].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        placeholder,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = placeholder
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3769
		{
			paren := &ParenExpr{Expr: sqlDollar[2].union.expr()}
			if indirection := sqlDollar[4].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        paren,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = paren
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        &Subquery{Select: sqlDollar[1].union.selectStmt()},
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3823
		{
			return unimplemented(sqllex)
		}
	case 664:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3824
		{
			return unimplemented(sqllex)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3847
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3862
		{
			return unimplemented(sqllex)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3863
		{
			return unimplemented(sqllex)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3867
		{
			return unimplemented(sqllex)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3884
		{
			return unimplemented(sqllex)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3885
		{
			return unimplemented(sqllex)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3886
		{
			return unimplemented(sqllex)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3887
		{
			return unimplemented(sqllex)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3916
		{
			return unimplemented(sqllex)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3960
		{
			return unimplemented(sqllex)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3961
		{
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3964
		{
			return unimplemented(sqllex)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3965
		{
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = Window(nil)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3990
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.str = ""
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4052
		{
			return unimplemented(sqllex)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4053
		{
			return unimplemented(sqllex)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4054
		{
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4057
		{
			return unimplemented(sqllex)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4058
		{
			return unimplemented(sqllex)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4064
		{
			return unimplemented(sqllex)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4065
		{
			return unimplemented(sqllex)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4066
		{
			return unimplemented(sqllex)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4067
		{
			return unimplemented(sqllex)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4068
		{
			return unimplemented(sqllex)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4421
		{
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4422
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4582
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4618
		{
			return unimplemented(sqllex)
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = DNull
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.str = ""
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
