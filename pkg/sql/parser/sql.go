// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const INCREMENTAL = 57476
const IF = 57477
const IFNULL = 57478
const ILIKE = 57479
const IN = 57480
const INTERLEAVE = 57481
const INDEX = 57482
const INDEXES = 57483
const INITIALLY = 57484
const INNER = 57485
const INSERT = 57486
const INT = 57487
const INT2VECTOR = 57488
const INT2 = 57489
const INT4 = 57490
const INT8 = 57491
const INT64 = 57492
const INTEGER = 57493
const INTERSECT = 57494
const INTERVAL = 57495
const INTO = 57496
const IS = 57497
const ISOLATION = 57498
const JOB = 57499
const JOBS = 57500
const JOIN = 57501
const KEY = 57502
const KEYS = 57503
const KV = 57504
const LATERAL = 57505
const LC_CTYPE = 57506
const LC_COLLATE = 57507
const LEADING = 57508
const LEAST = 57509
const LEFT = 57510
const LEVEL = 57511
const LIKE = 57512
const LIMIT = 57513
const LOAD = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORING = 57621
const SUBSTRING = 57622
const SYMMETRIC = 57623
const SYSTEM = 57624
const TABLE = 57625
const TABLES = 57626
const TEMP = 57627
const TEMPLATE = 57628
const TEMPORARY = 57629
const TESTING_RANGES = 57630
const TESTING_RELOCATE = 57631
const TEXT = 57632
const THEN = 57633
const TIME = 57634
const TIMESTAMP = 57635
const TIMESTAMPTZ = 57636
const TO = 57637
const TRAILING = 57638
const TRACE = 57639
const TRANSACTION = 57640
const TREAT = 57641
const TRIM = 57642
const TRUE = 57643
const TRUNCATE = 57644
const TYPE = 57645
const UNBOUNDED = 57646
const UNCOMMITTED = 57647
const UNION = 57648
const UNIQUE = 57649
const UNKNOWN = 57650
const UPDATE = 57651
const UPSERT = 57652
const USE = 57653
const USER = 57654
const USERS = 57655
const USING = 57656
const UUID = 57657
const VALID = 57658
const VALIDATE = 57659
const VALUE = 57660
const VALUES = 57661
const VARCHAR = 57662
const VARIADIC = 57663
const VIEW = 57664
const VARYING = 57665
const WHEN = 57666
const WHERE = 57667
const WINDOW = 57668
const WITH = 57669
const WITHIN = 57670
const WITHOUT = 57671
const WRITE = 57672
const YEAR = 57673
const ZONE = 57674
const NOT_LA = 57675
const WITH_LA = 57676
const AS_LA = 57677
const POSTFIXOP = 57678
const UMINUS = 57679

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOAD",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5892

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 34,
	356, 34,
	-2, 508,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	1, 480,
	199, 480,
	243, 480,
	352, 480,
	354, 480,
	356, 480,
	-2, 490,
	-1, 114,
	1, 483,
	199, 483,
	243, 483,
	352, 483,
	354, 483,
	356, 483,
	-2, 489,
	-1, 132,
	1, 34,
	356, 34,
	-2, 508,
	-1, 516,
	123, 1091,
	295, 1091,
	338, 1091,
	355, 1091,
	-2, 0,
	-1, 527,
	1, 217,
	356, 217,
	-2, 1096,
	-1, 539,
	112, 518,
	171, 518,
	197, 518,
	-2, 486,
	-1, 547,
	112, 517,
	171, 517,
	197, 517,
	-2, 484,
	-1, 701,
	353, 1021,
	-2, 1014,
	-1, 702,
	353, 1022,
	-2, 1015,
	-1, 708,
	5, 688,
	353, 688,
	-2, 1221,
	-1, 733,
	5, 647,
	-2, 1191,
	-1, 734,
	5, 682,
	353, 682,
	-2, 1193,
	-1, 735,
	5, 657,
	-2, 1194,
	-1, 736,
	5, 656,
	-2, 1195,
	-1, 737,
	5, 682,
	353, 682,
	-2, 1198,
	-1, 738,
	5, 682,
	353, 682,
	-2, 1199,
	-1, 739,
	5, 683,
	-2, 1202,
	-1, 740,
	5, 639,
	-2, 1203,
	-1, 741,
	5, 639,
	-2, 1204,
	-1, 742,
	5, 664,
	-2, 1208,
	-1, 743,
	5, 649,
	-2, 1209,
	-1, 744,
	5, 650,
	-2, 1210,
	-1, 745,
	5, 640,
	-2, 1215,
	-1, 746,
	5, 641,
	-2, 1216,
	-1, 747,
	5, 642,
	-2, 1217,
	-1, 748,
	5, 643,
	-2, 1218,
	-1, 749,
	5, 644,
	-2, 1219,
	-1, 750,
	5, 645,
	-2, 1220,
	-1, 751,
	5, 639,
	-2, 1225,
	-1, 752,
	5, 648,
	-2, 1230,
	-1, 753,
	5, 646,
	-2, 1233,
	-1, 754,
	5, 680,
	353, 680,
	-2, 1235,
	-1, 755,
	5, 684,
	-2, 1238,
	-1, 756,
	5, 686,
	-2, 1239,
	-1, 757,
	5, 679,
	353, 679,
	-2, 1244,
	-1, 801,
	213, 506,
	-2, 380,
	-1, 806,
	112, 517,
	171, 517,
	197, 517,
	-2, 487,
	-1, 909,
	103, 490,
	112, 490,
	152, 490,
	171, 490,
	197, 490,
	203, 490,
	306, 490,
	-2, 574,
	-1, 987,
	103, 490,
	112, 490,
	152, 490,
	171, 490,
	197, 490,
	203, 490,
	306, 490,
	-2, 807,
	-1, 996,
	353, 998,
	-2, 986,
	-1, 1241,
	1, 575,
	70, 575,
	103, 575,
	112, 575,
	124, 575,
	128, 575,
	130, 575,
	143, 575,
	152, 575,
	159, 575,
	168, 575,
	171, 575,
	184, 575,
	197, 575,
	199, 575,
	203, 575,
	243, 575,
	245, 575,
	306, 575,
	314, 575,
	325, 575,
	326, 575,
	335, 575,
	352, 575,
	354, 575,
	356, 575,
	357, 575,
	-2, 574,
	-1, 1291,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 723,
	-1, 1292,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 724,
	-1, 1293,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 725,
	-1, 1297,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 729,
	-1, 1298,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 730,
	-1, 1299,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 731,
	-1, 1302,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 736,
	-1, 1308,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 738,
	-1, 1310,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 742,
	-1, 1311,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 743,
	-1, 1312,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 744,
	-1, 1313,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 745,
	-1, 1339,
	208, 880,
	-2, 883,
	-1, 1376,
	123, 920,
	353, 1021,
	-2, 1014,
	-1, 1377,
	123, 921,
	-2, 1187,
	-1, 1378,
	123, 922,
	-2, 1095,
	-1, 1379,
	123, 923,
	-2, 1058,
	-1, 1380,
	123, 924,
	-2, 1075,
	-1, 1381,
	123, 925,
	-2, 1094,
	-1, 1382,
	123, 926,
	-2, 1146,
	-1, 1579,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 737,
	-1, 1580,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 739,
	-1, 1585,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 740,
	-1, 1603,
	208, 879,
	-2, 882,
	-1, 1804,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 741,
	-1, 1809,
	155, 0,
	-2, 757,
	-1, 1819,
	208, 881,
	-2, 884,
	-1, 1861,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 784,
	-1, 1862,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 785,
	-1, 1863,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 786,
	-1, 1867,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 790,
	-1, 1868,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 791,
	-1, 1869,
	13, 0,
	14, 0,
	15, 0,
	336, 0,
	337, 0,
	338, 0,
	-2, 792,
	-1, 1974,
	155, 0,
	-2, 758,
	-1, 1977,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 761,
	-1, 1978,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 763,
	-1, 2084,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 762,
	-1, 2085,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	137, 0,
	138, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 764,
	-1, 2092,
	155, 0,
	-2, 793,
	-1, 2158,
	155, 0,
	-2, 794,
	-1, 2230,
	36, 0,
	137, 0,
	170, 0,
	266, 0,
	333, 0,
	339, 0,
	-2, 1190,
}

const sqlPrivate = 57344

const sqlLast = 32069

var sqlAct = [...]int{

	702, 1895, 2229, 2237, 2206, 2238, 2274, 2239, 1124, 2114,
	2228, 1249, 1257, 2041, 1918, 1838, 1236, 2027, 2146, 1724,
	695, 1119, 2099, 548, 1482, 1388, 67, 2012, 1405, 1902,
	678, 840, 692, 1901, 644, 1131, 622, 2066, 1440, 141,
	1445, 1726, 141, 1546, 907, 1669, 903, 1463, 1088, 141,
	1037, 1453, 1560, 1127, 1087, 1949, 1496, 141, 1270, 1441,
	398, 1527, 1337, 141, 141, 700, 1668, 141, 699, 890,
	141, 1526, 883, 1237, 1444, 1614, 1258, 141, 992, 1038,
	1533, 1697, 1767, 1243, 1191, 1189, 1162, 1478, 1113, 1347,
	1487, 780, 672, 1362, 1325, 884, 555, 112, 372, 921,
	1322, 815, 1448, 566, 526, 779, 1023, 1356, 813, 370,
	983, 1402, 1373, 1027, 671, 894, 567, 658, 572, 808,
	396, 1224, 1211, 614, 504, 1251, 141, 141, 524, 823,
	114, 626, 141, 1111, 133, 522, 141, 141, 821, 822,
	558, 694, 115, 553, 2028, 867, 388, 925, 652, 563,
	137, 629, 612, 866, 112, 827, 508, 520, 1781, 1602,
	1359, 1782, 1121, 1121, 1121, 2260, 2251, 1250, 916, 1265,
	2250, 2248, 2246, 1265, 2026, 916, 142, 1254, 552, 2200,
	2174, 2163, 1420, 2026, 2162, 552, 2160, 2153, 904, 1420,
	916, 547, 2129, 624, 507, 2026, 636, 2126, 501, 1571,
	916, 2125, 2124, 1736, 2026, 916, 556, 1360, 2112, 2086,
	2074, 2026, 1420, 916, 2071, 1802, 1572, 916, 127, 938,
	939, 124, 2063, 2062, 2025, 1265, 1265, 2026, 2001, 112,
	1979, 1265, 1213, 1265, 1639, 1640, 399, 1657, 1658, 1659,
	1145, 1976, 941, 540, 1420, 1962, 131, 1265, 916, 1813,
	1973, 2191, 1265, 1361, 1358, 539, 1801, 938, 939, 1248,
	958, 959, 960, 968, 969, 970, 940, 111, 1796, 1777,
	1244, 1248, 1778, 961, 1427, 575, 1770, 1427, 1707, 616,
	941, 916, 130, 972, 938, 939, 1686, 1654, 1684, 1687,
	125, 1265, 1770, 1212, 573, 1683, 113, 126, 1265, 1682,
	1494, 1606, 1265, 56, 940, 57, 1607, 941, 1605, 1603,
	955, 1549, 1265, 1265, 1265, 1523, 116, 1737, 916, 1429,
	132, 1419, 1265, 1244, 1420, 1874, 1816, 946, 1363, 59,
	1264, 940, 1265, 1265, 380, 25, 916, 1639, 1640, 1613,
	1708, 1247, 1645, 127, 1248, 1427, 1218, 933, 1481, 1217,
	934, 1437, 1095, 1341, 879, 1122, 1122, 1122, 634, 141,
	662, 621, 640, 1541, 141, 946, 127, 908, 1117, 794,
	2252, 131, 572, 2244, 2227, 2213, 2155, 569, 2127, 1660,
	2006, 2029, 2002, 1994, 965, 973, 956, 834, 1993, 1992,
	1654, 1988, 946, 1987, 131, 1986, 1985, 1948, 553, 1893,
	1889, 1655, 971, 1884, 1883, 1357, 1882, 130, 1824, 1706,
	1967, 938, 939, 1691, 1688, 125, 1711, 963, 1676, 1667,
	1638, 1635, 126, 124, 956, 1634, 1632, 1425, 1333, 1619,
	130, 1618, 1553, 1370, 941, 1369, 1368, 834, 1241, 1000,
	993, 1253, 116, 2149, 833, 1645, 1695, 906, 1130, 962,
	1571, 956, 1840, 127, 905, 2203, 2190, 1489, 940, 957,
	641, 2189, 2007, 118, 116, 2182, 1212, 25, 2067, 111,
	2176, 1143, 1138, 1120, 1656, 2172, 2150, 2109, 2094, 2083,
	2032, 131, 2024, 2008, 1999, 1916, 1914, 1913, 659, 1912,
	1909, 1899, 1808, 1785, 1773, 653, 1760, 957, 113, 1758,
	643, 1712, 1715, 1666, 1655, 56, 141, 57, 1628, 1627,
	1624, 1599, 1594, 966, 1327, 1551, 1522, 130, 1028, 946,
	141, 1031, 1412, 1367, 957, 125, 1229, 1123, 572, 1035,
	141, 59, 126, 1334, 141, 141, 141, 1021, 141, 1020,
	1019, 1018, 1017, 141, 141, 141, 141, 141, 573, 1016,
	1015, 116, 950, 942, 943, 944, 945, 947, 948, 563,
	1651, 1652, 1653, 807, 1966, 1650, 1648, 1649, 1641, 1642,
	1643, 1644, 1646, 1647, 1014, 1013, 1012, 1656, 572, 1011,
	964, 1010, 1009, 952, 953, 954, 967, 1008, 951, 949,
	950, 942, 943, 944, 945, 947, 948, 1007, 1006, 1005,
	758, 1004, 997, 986, 2003, 116, 819, 623, 141, 141,
	141, 141, 141, 882, 141, 806, 790, 774, 942, 943,
	944, 945, 947, 948, 765, 656, 839, 1981, 1422, 1712,
	1892, 141, 141, 1780, 572, 141, 1776, 1230, 799, 993,
	802, 398, 1693, 141, 984, 1639, 1640, 810, 810, 906,
	141, 141, 141, 789, 141, 127, 787, 553, 888, 1178,
	400, 796, 141, 811, 572, 118, 770, 778, 1650, 1648,
	1649, 1641, 1642, 1643, 1644, 1646, 1647, 775, 923, 640,
	2165, 1727, 914, 131, 1970, 931, 540, 1783, 1573, 1244,
	642, 887, 911, 908, 1690, 1033, 1689, 1578, 539, 788,
	1034, 786, 1002, 553, 573, 989, 830, 831, 938, 939,
	1539, 874, 937, 771, 570, 1477, 1101, 1128, 574, 130,
	1639, 1640, 112, 1476, 1698, 1024, 1610, 125, 1639, 1640,
	1250, 941, 870, 838, 126, 902, 938, 939, 1841, 1348,
	871, 862, 1567, 877, 1932, 942, 943, 944, 945, 947,
	948, 2219, 2267, 116, 573, 940, 868, 2152, 2266, 941,
	2056, 917, 607, 1703, 1430, 606, 880, 572, 1359, 141,
	1454, 938, 939, 601, 141, 1105, 1104, 1199, 569, 564,
	863, 653, 910, 940, 602, 915, 1044, 999, 572, 572,
	1192, 1694, 1193, 551, 941, 398, 935, 1197, 924, 927,
	1498, 857, 2144, 1092, 141, 2143, 1943, 1110, 2142, 936,
	573, 1129, 2141, 1947, 1198, 1360, 946, 399, 940, 563,
	563, 1946, 1639, 1640, 955, 787, 1929, 1928, 1645, 610,
	1137, 1623, 996, 1140, 545, 1142, 1645, 1622, 1456, 1621,
	573, 1620, 550, 141, 1025, 1026, 1102, 141, 1581, 141,
	141, 141, 141, 141, 141, 1029, 1520, 1519, 1134, 141,
	1108, 1361, 1358, 141, 141, 1032, 360, 1194, 788, 1517,
	141, 906, 1192, 1309, 1193, 1268, 2151, 869, 1498, 946,
	141, 633, 1964, 141, 1497, 1416, 609, 1415, 1280, 1464,
	1187, 544, 663, 552, 1186, 530, 141, 1790, 537, 1192,
	1324, 1193, 1091, 1089, 1791, 398, 1557, 919, 141, 1090,
	1168, 773, 1934, 1324, 141, 1118, 1331, 141, 361, 2194,
	928, 1329, 1114, 1094, 1081, 760, 1834, 1107, 1106, 141,
	1645, 141, 2116, 1363, 1235, 572, 1363, 1455, 956, 2257,
	854, 398, 1210, 573, 1109, 2241, 1136, 1166, 1231, 1194,
	1423, 1348, 1148, 112, 1479, 1480, 1565, 1221, 540, 1044,
	1044, 540, 540, 1149, 573, 573, 1179, 1561, 759, 2266,
	1158, 399, 574, 1159, 1160, 1169, 1194, 855, 1173, 1174,
	1175, 1176, 1177, 1172, 1647, 2197, 1765, 2272, 1203, 1655,
	510, 1183, 1184, 2179, 1188, 1762, 549, 1459, 1206, 1121,
	1561, 1363, 364, 1208, 1202, 1756, 1702, 1704, 511, 2198,
	1216, 957, 1222, 1357, 1205, 1338, 1022, 2090, 1271, 1278,
	1226, 1227, 1342, 1504, 1200, 1232, 1350, 531, 2101, 608,
	112, 923, 2242, 665, 543, 2256, 1941, 1185, 1375, 1375,
	1386, 1201, 1397, 1266, 944, 945, 947, 948, 1409, 1410,
	1411, 659, 1267, 1256, 1641, 1642, 1643, 1644, 1646, 1647,
	843, 1279, 1656, 546, 1643, 1644, 1646, 1647, 611, 512,
	859, 981, 1345, 542, 1626, 948, 1935, 1225, 2277, 1831,
	1240, 399, 552, 363, 362, 1894, 1195, 1190, 2243, 1923,
	677, 2240, 826, 1335, 532, 2265, 1332, 844, 533, 2263,
	842, 2040, 951, 949, 950, 942, 943, 944, 945, 947,
	948, 573, 1461, 1997, 1495, 570, 565, 399, 398, 1433,
	510, 141, 538, 1383, 141, 1832, 848, 534, 574, 768,
	1435, 141, 354, 112, 2255, 1418, 860, 535, 511, 141,
	141, 661, 141, 2117, 141, 141, 398, 141, 141, 1583,
	389, 1436, 1424, 1650, 1648, 1649, 1641, 1642, 1643, 1644,
	1646, 1647, 1323, 1434, 1556, 1330, 141, 2136, 1195, 513,
	2135, 1426, 141, 394, 2285, 897, 2107, 2055, 574, 390,
	2273, 2169, 1931, 1029, 2054, 1032, 141, 141, 141, 861,
	1026, 1025, 1122, 141, 900, 1195, 365, 141, 1747, 512,
	1363, 1431, 783, 1870, 1743, 141, 391, 1473, 141, 1306,
	1223, 1639, 1640, 1998, 141, 398, 2275, 2052, 1462, 898,
	141, 141, 627, 1524, 141, 393, 1135, 1125, 1529, 141,
	1830, 2207, 141, 1499, 574, 1100, 366, 1182, 1438, 141,
	1096, 400, 386, 1466, 810, 1469, 810, 514, 1543, 141,
	1505, 1507, 1439, 1470, 141, 825, 141, 1475, 1154, 1467,
	1252, 1468, 1252, 141, 574, 367, 1471, 368, 784, 141,
	572, 2276, 785, 825, 687, 1542, 2284, 112, 515, 1098,
	553, 1531, 1532, 1919, 2053, 1537, 1552, 1530, 1492, 389,
	1490, 1099, 2278, 2042, 399, 1502, 899, 1871, 893, 513,
	1547, 2108, 1538, 1872, 1563, 1717, 1518, 2020, 1525, 1569,
	1304, 1307, 394, 138, 824, 1716, 355, 2051, 390, 1645,
	1485, 1536, 399, 357, 1577, 1220, 893, 1219, 1510, 1155,
	783, 369, 824, 502, 499, 1528, 392, 500, 138, 1521,
	826, 506, 2021, 1303, 506, 391, 651, 650, 1595, 1596,
	550, 528, 897, 1566, 553, 803, 1597, 1896, 134, 1576,
	646, 1591, 1574, 1600, 393, 645, 1548, 574, 2009, 2105,
	1555, 900, 1950, 1768, 1612, 509, 1589, 514, 1655, 1366,
	897, 1616, 1617, 384, 33, 2093, 1996, 895, 574, 574,
	395, 399, 1670, 2106, 3, 400, 898, 383, 32, 900,
	615, 615, 1584, 1807, 1789, 1633, 355, 1582, 515, 1593,
	138, 637, 896, 1558, 1516, 895, 1662, 1663, 1664, 1513,
	553, 1598, 1665, 1428, 898, 379, 29, 1269, 572, 141,
	1246, 382, 17, 1678, 865, 864, 1609, 858, 572, 1305,
	896, 1044, 2016, 600, 2017, 853, 573, 1586, 376, 13,
	141, 1656, 141, 141, 654, 1535, 852, 1587, 851, 141,
	850, 1592, 141, 849, 1044, 846, 141, 378, 16, 563,
	377, 14, 766, 899, 2019, 392, 1699, 649, 1671, 1180,
	1171, 1003, 856, 2022, 1365, 1710, 141, 1713, 2236, 1729,
	1730, 2204, 1731, 2050, 635, 1939, 141, 141, 141, 638,
	1692, 899, 141, 707, 639, 400, 141, 141, 141, 141,
	141, 1673, 1674, 1675, 375, 12, 33, 1937, 141, 1700,
	141, 141, 1701, 1709, 1044, 762, 1705, 632, 1930, 395,
	32, 381, 10, 1512, 1723, 574, 1515, 141, 1465, 1458,
	1207, 400, 1744, 141, 1649, 1641, 1642, 1643, 1644, 1646,
	1647, 1204, 141, 141, 1196, 374, 8, 1147, 29, 1779,
	2018, 1146, 1732, 1719, 17, 603, 604, 1588, 1734, 761,
	1534, 1144, 141, 141, 1590, 373, 4, 1738, 1141, 1739,
	1139, 13, 1797, 1709, 1821, 1725, 2078, 1483, 2267, 828,
	619, 1116, 498, 1498, 1784, 704, 1755, 2080, 1775, 1508,
	16, 1498, 1509, 14, 573, 1795, 2186, 1506, 1805, 1806,
	1769, 1786, 1771, 1772, 573, 1044, 2029, 1794, 845, 112,
	654, 1766, 2157, 1951, 385, 832, 1787, 141, 1814, 1514,
	1511, 2192, 2038, 647, 1792, 816, 1788, 1460, 355, 1826,
	1827, 1828, 1457, 1800, 1799, 1810, 1255, 12, 1798, 1484,
	1209, 1044, 1044, 1093, 938, 939, 1036, 2270, 2283, 2073,
	1044, 1044, 829, 620, 10, 1817, 1956, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1866, 1867, 1868, 1869, 1820, 1873, 8, 1844,
	503, 1075, 1891, 1044, 1890, 1875, 1639, 1640, 1849, 873,
	816, 940, 654, 1847, 1842, 1837, 1885, 836, 4, 141,
	1271, 1845, 141, 1696, 1877, 1833, 1835, 1836, 400, 1271,
	1850, 627, 912, 1685, 141, 938, 939, 572, 1915, 938,
	939, 836, 835, 922, 1074, 1544, 1878, 398, 141, 1417,
	654, 926, 926, 1414, 1413, 1908, 400, 1900, 941, 1355,
	990, 837, 1881, 1983, 2202, 2100, 1829, 1720, 1921, 1000,
	1925, 998, 772, 529, 2115, 387, 1910, 1920, 1170, 847,
	1540, 141, 940, 1938, 141, 1940, 1228, 2196, 1907, 1989,
	769, 1906, 1922, 1897, 398, 141, 141, 1944, 1625, 1945,
	572, 2145, 1718, 2089, 528, 1721, 1364, 1001, 49, 1904,
	681, 1960, 2010, 572, 355, 1898, 1447, 1446, 528, 801,
	528, 401, 804, 1942, 1103, 400, 703, 528, 528, 355,
	817, 637, 557, 1955, 1374, 1957, 1272, 1953, 763, 1044,
	705, 1041, 1952, 1954, 706, 1042, 1030, 693, 1039, 657,
	1259, 141, 1328, 1346, 1963, 1961, 1757, 1608, 994, 1759,
	1969, 1971, 673, 685, 684, 1343, 764, 1926, 1545, 1975,
	1157, 1564, 1965, 1153, 1075, 1075, 1474, 1150, 1936, 536,
	574, 1636, 655, 1395, 1387, 1384, 795, 889, 982, 1260,
	793, 1570, 506, 355, 355, 876, 355, 1421, 615, 881,
	1161, 618, 617, 1995, 1442, 791, 1097, 1432, 975, 974,
	605, 2171, 782, 573, 1958, 355, 355, 1074, 1074, 138,
	141, 781, 1126, 399, 141, 141, 1746, 355, 2271, 2185,
	932, 572, 2030, 1933, 355, 355, 355, 2218, 929, 141,
	141, 141, 1908, 2023, 129, 128, 138, 2164, 141, 2098,
	141, 1554, 141, 141, 141, 1908, 2035, 141, 141, 1908,
	2039, 2046, 2044, 2037, 75, 31, 30, 94, 93, 92,
	399, 2043, 91, 90, 89, 1907, 573, 141, 1906, 2033,
	2045, 2049, 88, 2036, 87, 86, 85, 84, 1907, 573,
	2069, 1906, 1907, 83, 82, 1906, 627, 81, 80, 79,
	78, 2070, 77, 525, 74, 2075, 73, 2076, 72, 71,
	2072, 28, 24, 97, 1242, 23, 21, 2081, 2088, 22,
	27, 26, 141, 19, 398, 141, 18, 15, 1320, 1261,
	1044, 9, 2092, 141, 20, 54, 2079, 55, 574, 53,
	398, 52, 51, 1318, 11, 47, 46, 45, 574, 44,
	43, 141, 42, 138, 572, 7, 1389, 2110, 528, 96,
	2095, 141, 2119, 40, 39, 2121, 2118, 1908, 2113, 1908,
	6, 2123, 95, 923, 5, 2133, 108, 105, 141, 107,
	104, 106, 109, 141, 101, 2132, 102, 1044, 1133, 2139,
	2140, 141, 103, 100, 2131, 99, 37, 36, 35, 2148,
	1907, 2134, 1907, 1906, 34, 1906, 2, 573, 1, 0,
	0, 0, 141, 0, 1314, 0, 141, 0, 0, 0,
	553, 0, 1315, 2156, 1316, 1044, 2175, 528, 1321, 2158,
	0, 528, 2173, 138, 528, 528, 528, 528, 528, 2180,
	2167, 1968, 572, 1181, 2103, 0, 2138, 528, 528, 2181,
	2177, 2168, 141, 141, 506, 2159, 0, 2178, 2184, 0,
	2120, 0, 0, 0, 615, 0, 0, 637, 0, 0,
	0, 0, 0, 2183, 0, 2195, 0, 0, 0, 0,
	355, 0, 0, 141, 0, 2209, 0, 141, 0, 2193,
	141, 0, 1239, 2215, 2210, 2201, 2199, 398, 355, 0,
	399, 1245, 141, 0, 0, 141, 0, 0, 2217, 0,
	0, 0, 2212, 355, 141, 1263, 399, 2226, 2224, 2234,
	2223, 654, 2245, 0, 0, 1908, 2216, 2225, 2221, 2222,
	573, 0, 0, 2247, 1317, 0, 0, 0, 0, 0,
	0, 1319, 0, 2254, 816, 816, 2211, 141, 2253, 0,
	0, 0, 0, 0, 0, 2264, 2262, 0, 1907, 0,
	0, 1906, 2268, 0, 0, 0, 1486, 0, 2269, 0,
	0, 0, 0, 2235, 0, 0, 0, 1639, 1640, 1043,
	0, 2281, 2280, 2282, 2279, 0, 1491, 816, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 654, 0, 0,
	0, 1077, 0, 0, 0, 816, 0, 0, 654, 0,
	0, 0, 0, 0, 627, 0, 0, 2220, 573, 0,
	627, 627, 0, 0, 627, 0, 0, 0, 0, 1639,
	1640, 0, 1657, 1658, 1659, 0, 0, 574, 0, 0,
	0, 0, 0, 0, 0, 1076, 0, 400, 0, 1559,
	0, 0, 0, 0, 922, 0, 1075, 0, 0, 0,
	0, 0, 0, 922, 0, 0, 1389, 1389, 0, 0,
	0, 1040, 0, 399, 0, 0, 0, 0, 0, 1075,
	0, 0, 1654, 2128, 0, 1645, 0, 0, 0, 0,
	0, 0, 2020, 0, 400, 2013, 0, 0, 0, 1074,
	574, 0, 0, 2011, 0, 355, 0, 2015, 1443, 0,
	0, 0, 0, 574, 0, 637, 0, 0, 0, 0,
	0, 0, 1074, 528, 528, 0, 528, 2021, 355, 355,
	664, 1472, 637, 767, 1389, 1389, 1389, 1645, 0, 1075,
	0, 0, 0, 0, 1655, 0, 0, 0, 0, 2014,
	355, 0, 1043, 1043, 0, 0, 1488, 0, 0, 0,
	0, 0, 797, 798, 0, 0, 0, 0, 0, 0,
	355, 355, 355, 0, 1077, 1077, 0, 1503, 0, 938,
	939, 355, 1074, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 355, 0, 0, 0, 1655, 0, 355, 0,
	0, 0, 941, 0, 355, 355, 0, 0, 355, 0,
	0, 0, 0, 1239, 938, 939, 1239, 1656, 1076, 1076,
	0, 0, 0, 1550, 0, 0, 940, 2016, 0, 2017,
	1075, 574, 0, 355, 0, 0, 0, 941, 355, 0,
	1568, 0, 0, 0, 1040, 1040, 0, 355, 885, 885,
	0, 0, 0, 1488, 891, 0, 0, 0, 0, 2019,
	0, 940, 1722, 0, 0, 0, 1075, 1075, 2022, 1656,
	0, 0, 0, 1074, 0, 1075, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1735, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 1740, 976, 977, 978,
	979, 980, 0, 0, 0, 0, 0, 988, 1075, 1074,
	1074, 1641, 1642, 1643, 1644, 1646, 1647, 995, 1074, 1074,
	0, 1764, 946, 0, 400, 0, 1389, 1389, 0, 0,
	0, 0, 1639, 1640, 0, 0, 0, 627, 0, 0,
	400, 0, 0, 0, 0, 2018, 956, 0, 0, 0,
	0, 1074, 0, 0, 574, 1651, 1652, 1653, 0, 0,
	1650, 1648, 1649, 1641, 1642, 1643, 1644, 1646, 1647, 0,
	0, 0, 1261, 627, 0, 0, 124, 0, 0, 0,
	0, 956, 0, 0, 0, 1389, 1389, 1389, 1389, 1389,
	1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
	1389, 1389, 1389, 1389, 0, 1389, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 0, 0, 957,
	0, 0, 111, 0, 0, 0, 0, 682, 68, 0,
	0, 0, 0, 0, 1133, 0, 1133, 1714, 0, 0,
	1645, 0, 574, 528, 1075, 0, 355, 0, 0, 0,
	1728, 113, 0, 0, 957, 1151, 0, 1156, 56, 0,
	57, 0, 0, 1163, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	355, 1741, 1742, 0, 59, 68, 1503, 1074, 0, 0,
	1748, 1749, 1751, 1753, 1754, 0, 0, 400, 0, 1655,
	0, 0, 1761, 0, 1763, 355, 901, 0, 0, 0,
	951, 949, 950, 942, 943, 944, 945, 947, 948, 0,
	0, 355, 124, 0, 0, 0, 0, 1239, 0, 0,
	0, 0, 0, 0, 0, 0, 637, 1239, 0, 0,
	541, 0, 0, 0, 554, 0, 949, 950, 942, 943,
	944, 945, 947, 948, 0, 0, 355, 355, 0, 628,
	68, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 627, 1656, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1300, 1301, 1302, 0, 1308, 113, 1310, 1311,
	1312, 1313, 0, 0, 56, 0, 57, 0, 127, 0,
	0, 1839, 0, 0, 0, 1336, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 1043, 1075, 131, 0, 1371, 1372,
	0, 0, 1385, 0, 1396, 1398, 1403, 1406, 1407, 1408,
	0, 0, 0, 0, 0, 0, 1077, 1043, 0, 0,
	0, 0, 0, 0, 1648, 1649, 1641, 1642, 1643, 1644,
	1646, 1647, 130, 0, 0, 0, 0, 0, 1074, 1077,
	125, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 1075, 1503, 0, 0, 1133, 1903, 0, 0,
	1076, 0, 0, 0, 0, 0, 116, 0, 1917, 0,
	0, 0, 0, 0, 0, 0, 0, 1043, 0, 0,
	0, 0, 1927, 1076, 0, 0, 1040, 0, 0, 0,
	1075, 0, 0, 0, 0, 1074, 0, 0, 0, 1077,
	1389, 0, 2059, 0, 0, 0, 0, 0, 2065, 1040,
	0, 0, 0, 0, 127, 355, 0, 0, 637, 0,
	0, 0, 0, 0, 118, 1389, 0, 0, 0, 1239,
	637, 0, 0, 1074, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 1076, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1639, 1640, 554,
	1657, 1658, 1659, 0, 0, 0, 0, 0, 1043, 1040,
	0, 0, 0, 1972, 0, 0, 0, 0, 130, 0,
	0, 0, 0, 2111, 0, 1990, 125, 0, 0, 0,
	1077, 0, 0, 126, 0, 0, 0, 1389, 0, 0,
	0, 2130, 0, 885, 1043, 1043, 0, 0, 891, 0,
	1654, 0, 116, 1043, 1043, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1077, 1077, 0, 0,
	0, 0, 0, 0, 1076, 1077, 1077, 0, 0, 0,
	0, 1562, 0, 0, 1903, 0, 1043, 0, 0, 0,
	0, 0, 0, 0, 637, 0, 1575, 1903, 637, 1443,
	1040, 1903, 2166, 0, 0, 1645, 0, 0, 1077, 0,
	1076, 1076, 0, 2047, 2048, 1503, 0, 0, 0, 1076,
	1076, 0, 2057, 0, 2058, 0, 355, 2060, 2061, 0,
	0, 2064, 355, 0, 1579, 1580, 1040, 1040, 0, 0,
	1585, 0, 1660, 0, 0, 1040, 1040, 0, 0, 2077,
	0, 637, 1076, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1655, 0, 0, 0, 0, 0,
	0, 0, 1604, 0, 0, 0, 0, 0, 1040, 1611,
	2214, 0, 1615, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1261, 2102, 0, 1629, 2104,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 1903,
	0, 1903, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1043, 0, 988, 355, 0, 0, 0, 0,
	1403, 1403, 1403, 124, 0, 1503, 0, 1656, 0, 0,
	0, 0, 0, 0, 1077, 0, 0, 0, 0, 0,
	0, 0, 2147, 68, 0, 0, 0, 1239, 909, 0,
	0, 0, 0, 0, 0, 2154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 355, 0, 1076, 0,
	1133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 985, 0, 987, 0, 0, 1733, 113, 0,
	0, 991, 1163, 0, 1040, 56, 0, 57, 0, 0,
	0, 0, 0, 1651, 1652, 1653, 2187, 2188, 1650, 1648,
	1649, 1641, 1642, 1643, 1644, 1646, 1647, 0, 0, 0,
	0, 59, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2208, 0, 0,
	0, 637, 0, 0, 355, 0, 1774, 1903, 0, 0,
	0, 0, 0, 0, 0, 0, 2147, 0, 0, 355,
	0, 0, 0, 0, 0, 0, 0, 0, 637, 0,
	0, 0, 885, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 891, 0, 0, 124, 0, 1803,
	0, 0, 1804, 1043, 0, 0, 0, 0, 38, 119,
	0, 2261, 0, 0, 1809, 0, 0, 0, 0, 0,
	0, 110, 0, 1818, 0, 1077, 0, 0, 0, 0,
	0, 1822, 0, 0, 1575, 121, 0, 0, 0, 0,
	0, 41, 0, 111, 0, 541, 0, 0, 541, 541,
	0, 0, 0, 0, 1846, 127, 0, 0, 1848, 0,
	1043, 0, 0, 0, 48, 118, 0, 0, 50, 1076,
	0, 0, 113, 0, 68, 122, 0, 0, 0, 56,
	0, 57, 1077, 131, 0, 0, 0, 0, 0, 0,
	0, 1879, 1880, 0, 0, 1040, 0, 0, 1043, 58,
	1886, 1887, 1888, 0, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 628, 0, 0, 0, 0, 0, 130,
	1077, 0, 0, 0, 0, 0, 1076, 125, 0, 0,
	0, 0, 0, 0, 126, 0, 1911, 0, 0, 0,
	0, 0, 0, 68, 0, 68, 60, 0, 0, 0,
	0, 68, 1040, 371, 0, 938, 939, 0, 958, 959,
	960, 968, 969, 970, 1076, 0, 0, 0, 0, 0,
	0, 961, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 61, 0,
	1040, 1326, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 955, 0,
	0, 0, 69, 70, 63, 0, 64, 0, 65, 0,
	123, 0, 0, 0, 0, 66, 0, 0, 1974, 127,
	0, 0, 1977, 1978, 0, 0, 76, 1980, 0, 118,
	0, 0, 0, 0, 1982, 0, 1984, 0, 120, 0,
	0, 0, 0, 0, 68, 0, 0, 131, 0, 0,
	0, 0, 1991, 946, 0, 1639, 1640, 0, 1657, 1658,
	1659, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 1812, 965, 973, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 130, 0, 2000, 0, 0, 0, 0,
	971, 125, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 1654, 0,
	0, 0, 956, 0, 0, 0, 2031, 116, 0, 0,
	0, 0, 1639, 1640, 0, 1657, 1658, 1659, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 962, 1811, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2068, 0, 1645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1654, 0, 0, 0, 0,
	0, 0, 0, 2084, 2085, 957, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1660, 966, 0, 0, 0, 0, 68, 0, 0, 68,
	0, 0, 0, 0, 2097, 0, 0, 0, 0, 0,
	0, 628, 1655, 0, 0, 0, 0, 628, 628, 0,
	1645, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	938, 939, 0, 958, 959, 960, 968, 969, 970, 0,
	0, 0, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 554, 0, 941, 0, 2137, 972, 1660, 964, 0,
	0, 952, 953, 954, 967, 0, 951, 949, 950, 942,
	943, 944, 945, 947, 948, 0, 0, 940, 0, 1655,
	0, 0, 1681, 955, 891, 1656, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1326, 0, 0, 0, 0,
	2170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 987, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 946, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1656, 0, 0, 0, 0, 965, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1651, 1652, 1653, 0, 971, 1650, 1648, 1649, 1641,
	1642, 1643, 1644, 1646, 1647, 0, 0, 0, 0, 0,
	963, 987, 0, 0, 0, 0, 0, 956, 2233, 2233,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2249, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 2233, 0, 0, 0, 0, 0, 0, 1651, 1652,
	1653, 0, 0, 1650, 1648, 1649, 1641, 1642, 1643, 1644,
	1646, 1647, 0, 0, 0, 68, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 2233, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 964, 0, 0, 952, 953, 954, 967,
	0, 951, 949, 950, 942, 943, 944, 945, 947, 948,
	628, 0, 0, 0, 0, 0, 0, 1680, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 701, 690, 691, 688, 689,
	680, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 718,
	683, 0, 0, 0, 146, 147, 148, 299, 733, 301,
	734, 149, 735, 736, 0, 150, 305, 306, 151, 152,
	686, 717, 737, 738, 309, 0, 153, 729, 0, 709,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 403, 163, 161, 162, 0, 710, 711, 713, 0,
	712, 714, 164, 165, 356, 166, 739, 167, 740, 741,
	892, 168, 0, 169, 0, 170, 0, 0, 732, 172,
	0, 173, 0, 0, 0, 674, 174, 175, 176, 719,
	720, 697, 0, 0, 177, 178, 742, 743, 744, 0,
	179, 0, 180, 0, 0, 404, 0, 181, 730, 0,
	321, 0, 182, 183, 184, 185, 726, 728, 406, 0,
	189, 0, 186, 0, 405, 187, 745, 188, 746, 747,
	748, 749, 750, 0, 708, 0, 407, 190, 191, 192,
	408, 193, 194, 195, 0, 197, 196, 0, 731, 409,
	198, 410, 0, 199, 200, 0, 0, 201, 628, 202,
	203, 204, 206, 332, 205, 411, 207, 208, 210, 209,
	669, 0, 698, 727, 211, 751, 212, 213, 0, 214,
	0, 0, 215, 0, 68, 216, 335, 412, 217, 413,
	721, 218, 219, 220, 221, 222, 0, 223, 722, 224,
	338, 225, 0, 226, 227, 228, 229, 230, 752, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 414, 246, 247, 675,
	248, 0, 252, 253, 254, 255, 127, 257, 341, 256,
	258, 259, 715, 260, 249, 250, 261, 415, 262, 753,
	343, 263, 0, 269, 264, 265, 251, 266, 268, 754,
	267, 723, 0, 270, 131, 271, 272, 273, 274, 275,
	276, 277, 0, 346, 755, 756, 0, 0, 278, 279,
	724, 725, 696, 280, 281, 282, 283, 0, 0, 284,
	285, 286, 287, 716, 288, 0, 351, 289, 290, 291,
	660, 757, 0, 0, 292, 0, 0, 0, 125, 293,
	294, 295, 296, 297, 670, 126, 0, 0, 0, 0,
	668, 0, 0, 0, 0, 666, 667, 0, 0, 0,
	0, 0, 0, 0, 676, 0, 0, 0, 0, 679,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2082, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 397, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 143, 144,
	416, 145, 417, 418, 419, 420, 298, 421, 422, 423,
	424, 146, 147, 148, 299, 300, 301, 302, 149, 303,
	304, 425, 150, 305, 306, 151, 152, 426, 427, 307,
	308, 309, 428, 153, 310, 429, 402, 430, 154, 155,
	156, 987, 157, 431, 158, 159, 160, 432, 403, 163,
	161, 162, 433, 434, 436, 435, 437, 438, 439, 164,
	165, 356, 166, 311, 167, 312, 313, 440, 168, 441,
	169, 442, 170, 443, 444, 171, 172, 445, 173, 446,
	0, 447, 314, 174, 175, 176, 315, 316, 448, 449,
	450, 177, 178, 317, 318, 319, 0, 179, 451, 180,
	452, 453, 404, 454, 181, 320, 455, 321, 456, 182,
	183, 184, 185, 322, 323, 406, 457, 189, 458, 186,
	459, 405, 187, 324, 188, 325, 326, 327, 328, 329,
	460, 330, 461, 407, 190, 191, 192, 408, 193, 194,
	195, 462, 197, 196, 463, 331, 409, 198, 410, 464,
	199, 200, 465, 466, 201, 0, 202, 203, 204, 206,
	332, 205, 411, 207, 208, 210, 209, 467, 468, 469,
	333, 211, 334, 212, 213, 470, 214, 471, 472, 215,
	473, 474, 216, 335, 412, 217, 413, 336, 218, 219,
	220, 221, 222, 475, 223, 337, 224, 338, 225, 476,
	226, 227, 228, 229, 230, 339, 231, 232, 477, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 478, 245, 414, 246, 247, 340, 248, 0, 252,
	253, 254, 255, 479, 257, 341, 256, 258, 259, 480,
	260, 249, 250, 261, 415, 262, 342, 343, 263, 481,
	269, 264, 265, 251, 266, 268, 344, 267, 345, 482,
	270, 483, 271, 272, 273, 274, 275, 276, 277, 484,
	346, 347, 348, 485, 486, 278, 279, 349, 350, 487,
	280, 281, 282, 283, 488, 489, 284, 285, 286, 287,
	490, 288, 491, 351, 289, 290, 291, 352, 353, 492,
	493, 292, 494, 495, 496, 497, 293, 294, 295, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 397, 0, 0, 0, 0, 0, 0, 1233,
	0, 0, 0, 0, 0, 0, 0, 1234, 143, 144,
	416, 145, 417, 418, 419, 420, 298, 421, 422, 423,
	424, 146, 147, 148, 299, 300, 301, 302, 149, 303,
	304, 425, 150, 305, 306, 151, 152, 426, 427, 307,
	308, 309, 428, 153, 310, 429, 402, 430, 154, 155,
	156, 0, 157, 431, 158, 159, 160, 432, 403, 163,
	161, 162, 433, 434, 436, 435, 437, 438, 439, 164,
	165, 356, 166, 311, 167, 312, 313, 440, 168, 441,
	169, 442, 170, 443, 444, 171, 172, 445, 173, 446,
	0, 447, 314, 174, 175, 176, 315, 316, 448, 449,
	450, 177, 178, 317, 318, 319, 0, 179, 451, 180,
	452, 453, 404, 454, 181, 320, 455, 321, 456, 182,
	183, 184, 185, 322, 323, 406, 457, 189, 458, 186,
	459, 405, 187, 324, 188, 325, 326, 327, 328, 329,
	460, 330, 461, 407, 190, 191, 192, 408, 193, 194,
	195, 462, 197, 196, 463, 331, 409, 198, 410, 464,
	199, 200, 465, 466, 201, 0, 202, 203, 204, 206,
	332, 205, 411, 207, 208, 210, 209, 467, 468, 469,
	333, 211, 334, 212, 213, 470, 214, 471, 472, 215,
	473, 474, 216, 335, 412, 217, 413, 336, 218, 219,
	220, 221, 222, 475, 223, 337, 224, 338, 225, 476,
	226, 227, 228, 229, 230, 339, 231, 232, 477, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 478, 245, 414, 246, 247, 340, 248, 0, 252,
	253, 254, 255, 479, 257, 341, 256, 258, 259, 480,
	260, 249, 250, 261, 415, 262, 342, 343, 263, 481,
	269, 264, 265, 251, 266, 268, 344, 267, 345, 482,
	270, 483, 271, 272, 273, 274, 275, 276, 277, 484,
	346, 347, 348, 485, 486, 278, 279, 349, 350, 487,
	280, 281, 282, 283, 488, 489, 284, 285, 286, 287,
	490, 288, 491, 351, 289, 290, 291, 352, 353, 492,
	493, 292, 494, 495, 496, 497, 293, 294, 295, 296,
	297, 0, 0, 0, 397, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1959,
	143, 144, 416, 145, 417, 418, 419, 420, 298, 421,
	422, 423, 424, 146, 147, 148, 299, 300, 301, 302,
	149, 303, 304, 425, 150, 305, 306, 151, 152, 426,
	427, 307, 308, 309, 428, 153, 310, 429, 402, 430,
	154, 155, 156, 0, 157, 431, 158, 159, 160, 432,
	403, 163, 161, 162, 433, 434, 436, 435, 437, 438,
	439, 164, 165, 356, 166, 311, 167, 312, 313, 440,
	168, 441, 169, 442, 170, 443, 444, 171, 172, 445,
	173, 446, 0, 447, 314, 174, 175, 176, 315, 316,
	448, 449, 450, 177, 178, 317, 318, 319, 0, 179,
	451, 180, 452, 453, 404, 454, 181, 320, 455, 321,
	456, 182, 183, 184, 185, 322, 323, 406, 457, 189,
	458, 186, 459, 405, 187, 324, 188, 325, 326, 327,
	328, 329, 460, 330, 461, 407, 190, 191, 192, 408,
	193, 194, 195, 462, 197, 196, 463, 331, 409, 198,
	410, 464, 199, 200, 465, 466, 201, 0, 202, 203,
	204, 206, 332, 205, 411, 207, 208, 210, 209, 467,
	468, 469, 333, 211, 334, 212, 213, 470, 214, 471,
	472, 215, 473, 474, 216, 335, 412, 217, 413, 336,
	218, 219, 220, 221, 222, 475, 223, 337, 224, 338,
	225, 476, 226, 227, 228, 229, 230, 339, 231, 232,
	477, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 478, 245, 414, 246, 247, 340, 248,
	0, 252, 253, 254, 255, 479, 257, 341, 256, 258,
	259, 480, 260, 249, 250, 261, 415, 262, 342, 343,
	263, 481, 269, 264, 265, 251, 266, 268, 344, 267,
	345, 482, 270, 483, 271, 272, 273, 274, 275, 276,
	277, 484, 346, 347, 348, 485, 486, 278, 279, 349,
	350, 487, 280, 281, 282, 283, 488, 489, 284, 285,
	286, 287, 490, 288, 491, 351, 289, 290, 291, 352,
	353, 492, 493, 292, 494, 495, 496, 497, 293, 294,
	295, 296, 297, 397, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 918, 0, 0, 143,
	144, 416, 145, 417, 418, 419, 420, 298, 421, 422,
	423, 424, 146, 147, 148, 299, 300, 301, 302, 149,
	303, 304, 425, 150, 305, 306, 151, 152, 426, 427,
	307, 308, 309, 428, 153, 310, 429, 402, 430, 154,
	155, 156, 0, 157, 431, 158, 159, 160, 432, 403,
	163, 161, 162, 433, 434, 436, 435, 437, 438, 439,
	164, 165, 356, 166, 311, 167, 312, 313, 440, 168,
	441, 169, 442, 170, 443, 444, 171, 172, 445, 173,
	446, 0, 447, 314, 174, 175, 176, 315, 316, 448,
	449, 450, 177, 178, 317, 318, 319, 0, 179, 451,
	180, 452, 453, 404, 454, 181, 320, 455, 321, 456,
	182, 183, 184, 185, 322, 323, 406, 457, 189, 458,
	186, 459, 405, 187, 324, 188, 325, 326, 327, 328,
	329, 460, 330, 461, 407, 190, 191, 192, 408, 193,
	194, 195, 462, 197, 196, 463, 331, 409, 198, 410,
	464, 199, 200, 465, 466, 201, 0, 202, 203, 204,
	206, 332, 205, 411, 207, 208, 210, 209, 467, 468,
	469, 333, 211, 334, 212, 213, 470, 214, 471, 472,
	215, 473, 474, 216, 335, 412, 217, 413, 336, 218,
	219, 220, 221, 222, 475, 223, 337, 224, 338, 225,
	476, 226, 227, 228, 229, 230, 339, 231, 232, 477,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 478, 245, 414, 246, 247, 340, 248, 0,
	252, 253, 254, 255, 479, 257, 341, 256, 258, 259,
	480, 260, 249, 250, 261, 415, 262, 342, 343, 263,
	481, 269, 264, 265, 251, 266, 268, 344, 267, 345,
	482, 270, 483, 271, 272, 273, 274, 275, 276, 277,
	484, 346, 347, 348, 485, 486, 278, 279, 349, 350,
	487, 280, 281, 282, 283, 488, 489, 284, 285, 286,
	287, 490, 288, 491, 351, 289, 290, 291, 352, 353,
	492, 493, 292, 494, 495, 496, 497, 293, 294, 295,
	296, 297, 701, 690, 691, 688, 689, 680, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 144,
	1352, 145, 0, 0, 0, 0, 718, 683, 0, 0,
	0, 146, 147, 148, 299, 733, 301, 734, 149, 735,
	736, 0, 150, 305, 306, 151, 152, 686, 717, 737,
	738, 309, 0, 153, 729, 0, 709, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 403, 163,
	161, 162, 0, 710, 711, 713, 0, 712, 714, 164,
	165, 356, 166, 739, 167, 740, 741, 0, 168, 0,
	169, 0, 170, 1353, 0, 732, 172, 0, 173, 0,
	0, 0, 674, 174, 175, 176, 719, 720, 697, 0,
	0, 177, 178, 742, 743, 744, 0, 179, 0, 180,
	0, 0, 404, 0, 181, 730, 0, 321, 0, 182,
	183, 184, 185, 726, 728, 406, 0, 189, 0, 186,
	0, 405, 187, 745, 188, 746, 747, 748, 749, 750,
	0, 708, 0, 407, 190, 191, 192, 408, 193, 194,
	195, 0, 197, 196, 0, 731, 409, 198, 410, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 411, 207, 208, 210, 209, 669, 0, 698,
	727, 211, 751, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 412, 217, 413, 721, 218, 219,
	220, 221, 222, 0, 223, 722, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 752, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 414, 246, 247, 675, 248, 0, 252,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 715,
	260, 249, 250, 261, 415, 262, 753, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 754, 267, 723, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 755, 756, 0, 0, 278, 279, 724, 725, 696,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	716, 288, 0, 351, 289, 290, 291, 352, 757, 1351,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 296,
	297, 670, 0, 0, 0, 0, 0, 668, 0, 0,
	0, 0, 666, 667, 1354, 701, 690, 691, 688, 689,
	680, 676, 1349, 0, 0, 0, 679, 0, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 718,
	683, 0, 0, 0, 146, 147, 148, 299, 733, 301,
	734, 149, 735, 736, 0, 150, 305, 306, 151, 152,
	686, 717, 737, 738, 309, 0, 153, 729, 0, 709,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 403, 163, 161, 162, 0, 710, 711, 713, 0,
	712, 714, 164, 165, 356, 166, 739, 167, 740, 741,
	0, 168, 0, 169, 0, 170, 0, 0, 732, 172,
	0, 173, 0, 0, 0, 674, 174, 175, 176, 719,
	720, 697, 0, 0, 177, 178, 742, 743, 744, 0,
	179, 0, 180, 0, 0, 404, 0, 181, 730, 0,
	321, 0, 182, 183, 184, 185, 726, 728, 406, 0,
	189, 0, 186, 0, 405, 187, 745, 188, 746, 747,
	748, 749, 750, 0, 708, 0, 407, 190, 191, 192,
	408, 193, 194, 195, 0, 197, 196, 0, 731, 409,
	198, 410, 0, 199, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 332, 205, 411, 207, 208, 210, 209,
	669, 0, 698, 727, 211, 751, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 335, 412, 217, 413,
	721, 218, 219, 220, 221, 222, 0, 223, 722, 224,
	338, 225, 0, 226, 227, 228, 229, 230, 752, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 414, 246, 247, 675,
	248, 0, 252, 253, 254, 255, 127, 257, 341, 256,
	258, 259, 715, 260, 249, 250, 261, 415, 262, 753,
	343, 263, 0, 269, 264, 265, 251, 266, 268, 754,
	267, 723, 0, 270, 131, 271, 272, 273, 274, 275,
	276, 277, 0, 346, 755, 756, 0, 0, 278, 279,
	724, 725, 696, 280, 281, 282, 283, 0, 0, 284,
	285, 286, 287, 716, 288, 0, 351, 289, 290, 291,
	660, 757, 0, 0, 292, 0, 0, 0, 125, 293,
	294, 295, 296, 297, 670, 126, 0, 0, 0, 0,
	668, 0, 0, 0, 0, 666, 667, 701, 690, 691,
	688, 689, 680, 0, 676, 0, 0, 0, 0, 679,
	0, 0, 0, 143, 144, 0, 145, 0, 0, 0,
	0, 718, 683, 0, 0, 0, 146, 147, 148, 299,
	733, 301, 734, 149, 735, 736, 1399, 150, 305, 306,
	151, 152, 686, 717, 737, 738, 309, 0, 153, 729,
	0, 709, 0, 154, 155, 156, 0, 157, 0, 158,
	159, 160, 0, 403, 163, 161, 162, 0, 710, 711,
	713, 0, 712, 714, 164, 165, 356, 166, 739, 167,
	740, 741, 0, 168, 0, 169, 0, 170, 0, 0,
	732, 172, 0, 173, 0, 0, 0, 674, 174, 175,
	176, 719, 720, 697, 0, 0, 177, 178, 742, 743,
	744, 0, 179, 0, 180, 0, 1404, 404, 0, 181,
	730, 0, 321, 0, 182, 183, 184, 185, 726, 728,
	406, 0, 189, 0, 186, 0, 405, 187, 745, 188,
	746, 747, 748, 749, 750, 0, 708, 0, 407, 190,
	191, 192, 408, 193, 194, 195, 0, 197, 196, 1400,
	731, 409, 198, 410, 0, 199, 200, 0, 0, 201,
	0, 202, 203, 204, 206, 332, 205, 411, 207, 208,
	210, 209, 669, 0, 698, 727, 211, 751, 212, 213,
	0, 214, 0, 0, 215, 0, 0, 216, 335, 412,
	217, 413, 721, 218, 219, 220, 221, 222, 0, 223,
	722, 224, 338, 225, 0, 226, 227, 228, 229, 230,
	752, 231, 232, 0, 233, 234, 235, 236, 237, 239,
	240, 238, 241, 242, 243, 244, 0, 245, 414, 246,
	247, 675, 248, 0, 252, 253, 254, 255, 0, 257,
	341, 256, 258, 259, 715, 260, 249, 250, 261, 415,
	262, 753, 343, 263, 0, 269, 264, 265, 251, 266,
	268, 754, 267, 723, 0, 270, 0, 271, 272, 273,
	274, 275, 276, 277, 0, 346, 755, 756, 0, 1401,
	278, 279, 724, 725, 696, 280, 281, 282, 283, 0,
	0, 284, 285, 286, 287, 716, 288, 0, 351, 289,
	290, 291, 352, 757, 0, 0, 292, 0, 0, 0,
	0, 293, 294, 295, 296, 297, 670, 0, 0, 0,
	0, 0, 668, 0, 0, 0, 0, 666, 667, 701,
	690, 691, 688, 689, 680, 0, 676, 0, 0, 0,
	0, 679, 0, 0, 0, 143, 144, 0, 145, 0,
	0, 0, 0, 718, 683, 0, 0, 0, 146, 147,
	148, 299, 733, 301, 734, 149, 735, 736, 0, 150,
	305, 306, 151, 152, 686, 717, 737, 738, 309, 0,
	153, 729, 0, 709, 0, 154, 155, 156, 0, 157,
	0, 158, 159, 160, 0, 403, 163, 161, 162, 0,
	710, 711, 713, 0, 712, 714, 164, 165, 356, 166,
	739, 167, 740, 741, 0, 168, 0, 169, 0, 170,
	0, 0, 732, 172, 0, 173, 0, 0, 0, 674,
	174, 175, 176, 719, 720, 697, 0, 0, 177, 178,
	742, 743, 744, 0, 179, 0, 180, 0, 0, 404,
	0, 181, 730, 0, 321, 0, 182, 183, 184, 185,
	726, 728, 406, 0, 189, 0, 186, 0, 405, 187,
	745, 188, 746, 747, 748, 749, 750, 0, 708, 0,
	407, 190, 191, 192, 408, 193, 194, 195, 0, 197,
	196, 0, 731, 409, 198, 410, 0, 199, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 332, 205, 411,
	207, 208, 210, 209, 669, 1793, 698, 727, 211, 751,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	335, 412, 217, 413, 721, 218, 219, 220, 221, 222,
	0, 223, 722, 224, 338, 225, 0, 226, 227, 228,
	229, 230, 752, 231, 232, 0, 233, 234, 235, 236,
	237, 239, 240, 238, 241, 242, 243, 244, 0, 245,
	414, 246, 247, 675, 248, 0, 252, 253, 254, 255,
	0, 257, 341, 256, 258, 259, 715, 260, 249, 250,
	261, 415, 262, 753, 343, 263, 0, 269, 264, 265,
	251, 266, 268, 754, 267, 723, 0, 270, 0, 271,
	272, 273, 274, 275, 276, 277, 0, 346, 755, 756,
	0, 0, 278, 279, 724, 725, 696, 280, 281, 282,
	283, 0, 0, 284, 285, 286, 287, 716, 288, 0,
	351, 289, 290, 291, 352, 757, 0, 0, 292, 0,
	0, 0, 0, 293, 294, 295, 296, 297, 670, 0,
	0, 0, 0, 0, 668, 0, 0, 0, 0, 666,
	667, 886, 701, 690, 691, 688, 689, 680, 676, 0,
	0, 0, 0, 679, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 718, 683, 0, 0,
	0, 146, 147, 148, 299, 733, 301, 734, 149, 735,
	736, 0, 150, 305, 306, 151, 152, 686, 717, 737,
	738, 309, 0, 153, 729, 0, 709, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 403, 163,
	161, 162, 0, 710, 711, 713, 0, 712, 714, 164,
	165, 356, 166, 739, 167, 740, 741, 0, 168, 0,
	169, 0, 170, 0, 0, 732, 172, 0, 173, 0,
	0, 0, 674, 174, 175, 176, 719, 720, 697, 0,
	0, 177, 178, 742, 743, 744, 0, 179, 0, 180,
	0, 0, 404, 0, 181, 730, 0, 321, 0, 182,
	183, 184, 185, 726, 728, 406, 0, 189, 1165, 186,
	0, 405, 187, 745, 188, 746, 747, 748, 749, 750,
	0, 708, 0, 407, 190, 191, 192, 408, 193, 194,
	195, 0, 197, 196, 0, 731, 409, 198, 410, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 411, 207, 208, 210, 209, 669, 0, 698,
	727, 211, 751, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 412, 217, 413, 721, 218, 219,
	220, 221, 222, 0, 223, 722, 224, 338, 225, 1164,
	226, 227, 228, 229, 230, 752, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 414, 246, 247, 675, 248, 0, 252,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 715,
	260, 249, 250, 261, 415, 262, 753, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 754, 267, 723, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 755, 756, 0, 0, 278, 279, 724, 725, 696,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	716, 288, 0, 351, 289, 290, 291, 352, 757, 0,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 296,
	297, 670, 0, 0, 0, 0, 0, 668, 0, 0,
	0, 0, 666, 667, 701, 690, 691, 688, 689, 680,
	0, 676, 0, 0, 0, 0, 679, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 718, 683,
	0, 0, 0, 146, 147, 148, 299, 733, 301, 734,
	149, 735, 736, 0, 150, 305, 306, 151, 152, 686,
	717, 737, 738, 309, 0, 153, 729, 0, 709, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	403, 163, 161, 162, 0, 710, 711, 713, 0, 712,
	714, 164, 165, 356, 166, 739, 167, 740, 741, 0,
	168, 0, 169, 0, 170, 0, 0, 732, 172, 0,
	173, 0, 0, 0, 674, 174, 175, 176, 719, 720,
	697, 0, 0, 177, 178, 742, 743, 744, 0, 179,
	0, 180, 0, 0, 404, 0, 181, 730, 0, 321,
	0, 182, 183, 184, 185, 726, 728, 406, 0, 189,
	0, 186, 0, 405, 187, 745, 188, 746, 747, 748,
	749, 750, 0, 708, 0, 407, 190, 191, 192, 408,
	193, 194, 195, 0, 197, 196, 0, 731, 409, 198,
	410, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 411, 207, 208, 210, 209, 669,
	0, 698, 727, 211, 751, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 412, 217, 413, 721,
	218, 219, 220, 221, 222, 0, 223, 722, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 752, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 414, 246, 247, 675, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 715, 260, 249, 250, 261, 415, 262, 753, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 754, 267,
	723, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 755, 756, 0, 0, 278, 279, 724,
	725, 696, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 716, 288, 0, 351, 289, 290, 291, 352,
	757, 0, 0, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 670, 0, 0, 0, 0, 0, 668,
	0, 0, 0, 0, 666, 667, 0, 0, 0, 0,
	0, 993, 1344, 676, 0, 0, 0, 0, 679, 701,
	690, 691, 688, 689, 680, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 144, 0, 145, 0,
	0, 0, 0, 718, 683, 0, 0, 0, 146, 147,
	148, 299, 733, 301, 734, 149, 735, 736, 0, 150,
	305, 306, 151, 152, 686, 717, 737, 738, 309, 0,
	153, 729, 0, 709, 0, 154, 155, 156, 0, 157,
	0, 158, 159, 160, 0, 403, 163, 161, 162, 0,
	710, 711, 713, 0, 712, 714, 164, 165, 356, 166,
	739, 167, 740, 741, 0, 168, 0, 169, 0, 170,
	0, 0, 732, 172, 0, 173, 0, 0, 0, 674,
	174, 175, 176, 719, 720, 697, 0, 0, 177, 178,
	742, 743, 744, 0, 179, 0, 180, 0, 0, 404,
	0, 181, 730, 0, 321, 0, 182, 183, 184, 185,
	726, 728, 406, 0, 189, 0, 186, 0, 405, 187,
	745, 188, 746, 747, 748, 749, 750, 0, 708, 0,
	407, 190, 191, 192, 408, 193, 194, 195, 0, 197,
	196, 0, 731, 409, 198, 410, 0, 199, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 332, 205, 411,
	207, 208, 210, 209, 669, 0, 698, 727, 211, 751,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	335, 412, 217, 413, 721, 218, 219, 220, 221, 222,
	0, 223, 722, 224, 338, 225, 0, 226, 227, 228,
	229, 230, 752, 231, 232, 0, 233, 234, 235, 236,
	237, 239, 240, 238, 241, 242, 243, 244, 0, 245,
	414, 246, 247, 675, 248, 0, 252, 253, 254, 255,
	0, 257, 341, 256, 258, 259, 715, 260, 249, 250,
	261, 415, 262, 753, 343, 263, 0, 269, 264, 265,
	251, 266, 268, 754, 267, 723, 0, 270, 0, 271,
	272, 273, 274, 275, 276, 277, 0, 346, 755, 756,
	0, 0, 278, 279, 724, 725, 696, 280, 281, 282,
	283, 0, 0, 284, 285, 286, 287, 716, 288, 0,
	351, 289, 290, 291, 352, 757, 0, 0, 292, 0,
	0, 0, 0, 293, 294, 295, 296, 297, 670, 0,
	0, 0, 0, 0, 668, 0, 0, 0, 0, 666,
	667, 701, 690, 691, 688, 689, 680, 0, 676, 1876,
	0, 0, 0, 679, 0, 0, 0, 143, 144, 0,
	145, 0, 0, 0, 0, 718, 683, 0, 0, 0,
	146, 147, 148, 299, 733, 301, 734, 149, 735, 736,
	0, 150, 305, 306, 151, 152, 686, 717, 737, 738,
	309, 0, 153, 729, 0, 709, 0, 154, 155, 156,
	0, 157, 0, 158, 159, 160, 0, 403, 163, 161,
	162, 0, 710, 711, 713, 0, 712, 714, 164, 165,
	356, 166, 739, 167, 740, 741, 0, 168, 0, 169,
	0, 170, 0, 0, 732, 172, 0, 173, 0, 0,
	0, 674, 174, 175, 176, 719, 720, 697, 0, 0,
	177, 178, 742, 743, 744, 0, 179, 0, 180, 0,
	0, 404, 0, 181, 730, 0, 321, 0, 182, 183,
	184, 185, 726, 728, 406, 0, 189, 0, 186, 0,
	405, 187, 745, 188, 746, 747, 748, 749, 750, 0,
	708, 0, 407, 190, 191, 192, 408, 193, 194, 195,
	0, 197, 196, 0, 731, 409, 198, 410, 0, 199,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 332,
	205, 411, 207, 208, 210, 209, 669, 0, 698, 727,
	211, 751, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 335, 412, 217, 413, 721, 218, 219, 220,
	221, 222, 0, 223, 722, 224, 338, 225, 0, 226,
	227, 228, 229, 230, 752, 231, 232, 0, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	0, 245, 414, 246, 247, 675, 248, 0, 252, 253,
	254, 255, 0, 257, 341, 256, 258, 259, 715, 260,
	249, 250, 261, 415, 262, 753, 343, 263, 0, 269,
	264, 265, 251, 266, 268, 754, 267, 723, 0, 270,
	0, 271, 272, 273, 274, 275, 276, 277, 0, 346,
	755, 756, 0, 0, 278, 279, 724, 725, 696, 280,
	281, 282, 283, 0, 0, 284, 285, 286, 287, 716,
	288, 0, 351, 289, 290, 291, 352, 757, 1825, 0,
	292, 0, 0, 0, 0, 293, 294, 295, 296, 297,
	670, 0, 0, 0, 0, 0, 668, 0, 0, 0,
	0, 666, 667, 701, 690, 691, 688, 689, 680, 0,
	676, 0, 0, 0, 0, 679, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 718, 683, 0,
	0, 0, 146, 147, 148, 299, 733, 301, 734, 149,
	735, 736, 0, 150, 305, 306, 151, 152, 686, 717,
	737, 738, 309, 0, 153, 729, 0, 709, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 403,
	163, 161, 162, 0, 710, 711, 713, 0, 712, 714,
	164, 165, 356, 166, 739, 167, 740, 741, 0, 168,
	0, 169, 0, 170, 0, 0, 732, 172, 0, 173,
	0, 0, 0, 674, 174, 175, 176, 719, 720, 697,
	0, 0, 177, 178, 742, 743, 744, 0, 179, 0,
	180, 0, 0, 404, 0, 181, 730, 0, 321, 0,
	182, 183, 184, 185, 726, 728, 406, 0, 189, 0,
	186, 0, 405, 187, 745, 188, 746, 747, 748, 749,
	750, 0, 708, 0, 407, 190, 191, 192, 408, 193,
	194, 195, 0, 197, 196, 0, 731, 409, 198, 410,
	0, 199, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 332, 205, 411, 207, 208, 210, 209, 669, 0,
	698, 727, 211, 751, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 335, 412, 217, 413, 721, 218,
	219, 220, 221, 222, 0, 223, 722, 224, 338, 225,
	0, 226, 227, 228, 229, 230, 752, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 414, 246, 247, 675, 248, 0,
	252, 253, 254, 255, 0, 257, 341, 256, 258, 259,
	715, 260, 249, 250, 261, 415, 262, 753, 343, 263,
	0, 269, 264, 265, 251, 266, 268, 754, 267, 723,
	0, 270, 0, 271, 272, 273, 274, 275, 276, 277,
	0, 346, 755, 756, 0, 0, 278, 279, 724, 725,
	696, 280, 281, 282, 283, 0, 0, 284, 285, 286,
	287, 716, 288, 0, 351, 289, 290, 291, 352, 757,
	0, 0, 292, 0, 0, 0, 0, 293, 294, 295,
	296, 297, 670, 0, 0, 0, 0, 0, 668, 0,
	0, 0, 0, 666, 667, 701, 690, 691, 688, 689,
	680, 0, 676, 1815, 0, 0, 0, 679, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 718,
	683, 0, 0, 0, 146, 147, 148, 299, 733, 301,
	734, 149, 735, 736, 0, 150, 305, 306, 151, 152,
	686, 717, 737, 738, 309, 0, 153, 729, 0, 709,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 403, 163, 161, 162, 0, 710, 711, 713, 0,
	712, 714, 164, 165, 356, 166, 739, 167, 740, 741,
	892, 168, 0, 169, 0, 170, 0, 0, 732, 172,
	0, 173, 0, 0, 0, 674, 174, 175, 176, 719,
	720, 697, 0, 0, 177, 178, 742, 743, 744, 0,
	179, 0, 180, 0, 0, 404, 0, 181, 730, 0,
	321, 0, 182, 183, 184, 185, 726, 728, 406, 0,
	189, 0, 186, 0, 405, 187, 745, 188, 746, 747,
	748, 749, 750, 0, 708, 0, 407, 190, 191, 192,
	408, 193, 194, 195, 0, 197, 196, 0, 731, 409,
	198, 410, 0, 199, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 332, 205, 411, 207, 208, 210, 209,
	669, 0, 698, 727, 211, 751, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 335, 412, 217, 413,
	721, 218, 219, 220, 221, 222, 0, 223, 722, 224,
	338, 225, 0, 226, 227, 228, 229, 230, 752, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 414, 246, 247, 675,
	248, 0, 252, 253, 254, 255, 0, 257, 341, 256,
	258, 259, 715, 260, 249, 250, 261, 415, 262, 753,
	343, 263, 0, 269, 264, 265, 251, 266, 268, 754,
	267, 723, 0, 270, 0, 271, 272, 273, 274, 275,
	276, 277, 0, 346, 755, 756, 0, 0, 278, 279,
	724, 725, 696, 280, 281, 282, 283, 0, 0, 284,
	285, 286, 287, 716, 288, 0, 351, 289, 290, 291,
	352, 757, 0, 0, 292, 0, 0, 0, 0, 293,
	294, 295, 296, 297, 670, 0, 0, 0, 0, 0,
	668, 0, 0, 0, 0, 666, 667, 701, 690, 691,
	688, 689, 680, 0, 676, 0, 0, 0, 0, 679,
	0, 0, 0, 143, 144, 0, 145, 0, 0, 0,
	0, 718, 683, 0, 0, 0, 146, 147, 148, 299,
	733, 301, 734, 149, 735, 736, 0, 150, 305, 306,
	151, 152, 686, 717, 737, 738, 309, 0, 153, 729,
	0, 709, 0, 154, 155, 156, 0, 157, 0, 158,
	159, 160, 0, 403, 163, 161, 162, 0, 710, 711,
	713, 0, 712, 714, 164, 165, 356, 166, 739, 167,
	740, 741, 0, 168, 0, 169, 0, 170, 0, 0,
	732, 172, 0, 173, 0, 0, 0, 674, 174, 175,
	176, 719, 720, 697, 0, 0, 177, 178, 742, 743,
	744, 0, 179, 0, 180, 0, 1404, 404, 0, 181,
	730, 0, 321, 0, 182, 183, 184, 185, 726, 728,
	406, 0, 189, 0, 186, 0, 405, 187, 745, 188,
	746, 747, 748, 749, 750, 0, 708, 0, 407, 190,
	191, 192, 408, 193, 194, 195, 0, 197, 196, 0,
	731, 409, 198, 410, 0, 199, 200, 0, 0, 201,
	0, 202, 203, 204, 206, 332, 205, 411, 207, 208,
	210, 209, 669, 0, 698, 727, 211, 751, 212, 213,
	0, 214, 0, 0, 215, 0, 0, 216, 335, 412,
	217, 413, 721, 218, 219, 220, 221, 222, 0, 223,
	722, 224, 338, 225, 0, 226, 227, 228, 229, 230,
	752, 231, 232, 0, 233, 234, 235, 236, 237, 239,
	240, 238, 241, 242, 243, 244, 0, 245, 414, 246,
	247, 675, 248, 0, 252, 253, 254, 255, 0, 257,
	341, 256, 258, 259, 715, 260, 249, 250, 261, 415,
	262, 753, 343, 263, 0, 269, 264, 265, 251, 266,
	268, 754, 267, 723, 0, 270, 0, 271, 272, 273,
	274, 275, 276, 277, 0, 346, 755, 756, 0, 0,
	278, 279, 724, 725, 696, 280, 281, 282, 283, 0,
	0, 284, 285, 286, 287, 716, 288, 0, 351, 289,
	290, 291, 352, 757, 0, 0, 292, 0, 0, 0,
	0, 293, 294, 295, 296, 297, 670, 0, 0, 0,
	0, 0, 668, 0, 0, 0, 0, 666, 667, 701,
	690, 691, 688, 689, 680, 0, 676, 0, 0, 0,
	0, 679, 0, 0, 0, 143, 144, 0, 145, 0,
	0, 0, 0, 718, 683, 0, 0, 0, 146, 147,
	148, 299, 733, 301, 734, 149, 735, 736, 0, 150,
	305, 306, 151, 152, 686, 717, 737, 738, 309, 0,
	153, 729, 0, 709, 0, 154, 155, 156, 0, 157,
	0, 158, 159, 160, 0, 403, 163, 161, 162, 0,
	710, 711, 713, 0, 712, 714, 164, 165, 356, 166,
	739, 167, 740, 741, 0, 168, 0, 169, 0, 170,
	0, 0, 732, 172, 0, 173, 0, 0, 0, 674,
	174, 175, 176, 719, 720, 697, 0, 0, 177, 178,
	742, 743, 744, 0, 179, 0, 180, 0, 0, 404,
	0, 181, 730, 0, 321, 0, 182, 183, 184, 185,
	726, 728, 406, 0, 189, 0, 186, 0, 405, 187,
	745, 188, 746, 747, 748, 749, 750, 0, 708, 0,
	407, 190, 191, 192, 408, 193, 194, 195, 0, 197,
	196, 0, 731, 409, 198, 410, 0, 199, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 332, 205, 411,
	207, 208, 210, 209, 669, 0, 698, 727, 211, 751,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	335, 412, 217, 413, 721, 218, 219, 220, 221, 222,
	0, 223, 722, 224, 338, 225, 0, 226, 227, 228,
	229, 230, 752, 231, 232, 0, 233, 234, 235, 236,
	237, 239, 240, 238, 241, 242, 243, 244, 0, 245,
	414, 246, 247, 675, 248, 0, 252, 253, 254, 255,
	0, 257, 341, 256, 258, 259, 715, 260, 249, 250,
	261, 415, 262, 753, 343, 263, 0, 269, 264, 265,
	251, 266, 268, 754, 267, 723, 0, 270, 0, 271,
	272, 273, 274, 275, 276, 277, 0, 346, 755, 756,
	0, 0, 278, 279, 724, 725, 696, 280, 281, 282,
	283, 0, 0, 284, 285, 286, 287, 716, 288, 0,
	351, 289, 290, 291, 352, 757, 0, 0, 292, 0,
	0, 0, 0, 293, 294, 295, 296, 297, 670, 0,
	0, 0, 0, 0, 668, 0, 0, 0, 0, 666,
	667, 886, 701, 690, 691, 688, 689, 680, 676, 0,
	0, 0, 0, 679, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 718, 683, 0, 0,
	0, 146, 147, 148, 299, 733, 301, 734, 149, 735,
	736, 0, 150, 305, 306, 151, 152, 686, 717, 737,
	738, 309, 0, 153, 729, 0, 709, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 403, 163,
	161, 162, 0, 710, 711, 713, 0, 712, 714, 164,
	165, 356, 166, 739, 167, 740, 741, 0, 168, 0,
	169, 0, 170, 0, 0, 732, 172, 0, 173, 0,
	0, 0, 674, 174, 175, 176, 719, 720, 697, 0,
	0, 177, 178, 742, 743, 744, 0, 179, 0, 180,
	0, 0, 404, 0, 181, 730, 0, 321, 0, 182,
	183, 184, 185, 726, 728, 406, 0, 189, 0, 186,
	0, 405, 187, 745, 188, 746, 747, 748, 749, 750,
	0, 708, 0, 407, 190, 191, 192, 408, 193, 194,
	195, 0, 197, 196, 0, 731, 409, 198, 410, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 411, 207, 208, 210, 209, 669, 0, 698,
	727, 211, 751, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 412, 217, 413, 721, 218, 219,
	220, 221, 222, 0, 223, 722, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 752, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 414, 246, 247, 675, 248, 0, 252,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 715,
	260, 249, 250, 261, 415, 262, 753, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 754, 267, 723, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 755, 756, 0, 0, 278, 279, 724, 725, 696,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	716, 288, 0, 351, 289, 290, 291, 352, 757, 0,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 296,
	297, 670, 0, 0, 0, 0, 0, 668, 0, 0,
	0, 0, 666, 667, 701, 690, 691, 688, 689, 680,
	0, 676, 1339, 0, 0, 0, 679, 0, 0, 0,
	143, 144, 1152, 145, 0, 0, 0, 0, 718, 683,
	0, 0, 0, 146, 147, 148, 299, 733, 301, 734,
	149, 735, 736, 0, 150, 305, 306, 151, 152, 686,
	717, 737, 738, 309, 0, 153, 729, 0, 709, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	403, 163, 161, 162, 0, 710, 711, 713, 0, 712,
	714, 164, 165, 356, 166, 739, 167, 740, 741, 0,
	168, 0, 169, 0, 170, 0, 0, 732, 172, 0,
	173, 0, 0, 0, 674, 174, 175, 176, 719, 720,
	697, 0, 0, 177, 178, 742, 743, 744, 0, 179,
	0, 180, 0, 0, 404, 0, 181, 730, 0, 321,
	0, 182, 183, 184, 185, 726, 728, 406, 0, 189,
	0, 186, 0, 405, 187, 745, 188, 746, 747, 748,
	749, 750, 0, 708, 0, 407, 190, 191, 192, 408,
	193, 194, 195, 0, 197, 196, 0, 731, 409, 198,
	410, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 411, 207, 208, 210, 209, 669,
	0, 698, 727, 211, 751, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 412, 217, 413, 721,
	218, 219, 220, 221, 222, 0, 223, 722, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 752, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 414, 246, 247, 675, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 715, 260, 249, 250, 261, 415, 262, 753, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 754, 267,
	723, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 755, 756, 0, 0, 278, 279, 724,
	725, 696, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 716, 288, 0, 351, 289, 290, 291, 352,
	757, 0, 0, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 670, 0, 0, 0, 0, 0, 668,
	0, 0, 0, 0, 666, 667, 701, 690, 691, 688,
	689, 680, 0, 676, 0, 0, 0, 0, 679, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	718, 683, 0, 0, 0, 146, 147, 148, 299, 733,
	301, 734, 149, 735, 736, 0, 150, 305, 306, 151,
	152, 686, 717, 737, 738, 309, 0, 153, 729, 0,
	709, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 403, 163, 161, 2232, 0, 710, 711, 713,
	0, 712, 714, 164, 165, 356, 166, 739, 167, 740,
	741, 0, 168, 0, 169, 0, 170, 0, 0, 732,
	172, 0, 173, 0, 0, 0, 674, 174, 175, 176,
	719, 720, 697, 0, 0, 177, 178, 742, 743, 744,
	0, 179, 0, 180, 0, 0, 404, 0, 181, 730,
	0, 321, 0, 182, 183, 184, 185, 726, 728, 406,
	0, 189, 0, 186, 0, 405, 187, 745, 188, 746,
	747, 748, 749, 750, 0, 708, 0, 407, 190, 191,
	192, 408, 193, 194, 195, 0, 197, 196, 0, 731,
	409, 198, 410, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 411, 207, 208, 210,
	209, 669, 0, 698, 727, 211, 751, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 335, 412, 217,
	413, 721, 218, 219, 220, 221, 222, 0, 223, 722,
	224, 338, 225, 0, 226, 227, 228, 229, 230, 752,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 414, 246, 247,
	675, 248, 0, 252, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 715, 260, 249, 250, 261, 415, 262,
	753, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	754, 267, 723, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 755, 756, 0, 0, 278,
	279, 724, 725, 696, 280, 281, 2231, 283, 0, 0,
	284, 285, 286, 287, 716, 288, 0, 351, 289, 290,
	291, 352, 757, 0, 0, 292, 0, 0, 0, 0,
	293, 294, 295, 296, 297, 670, 0, 0, 0, 0,
	0, 668, 0, 0, 0, 0, 666, 667, 701, 690,
	691, 688, 689, 680, 0, 676, 0, 0, 0, 0,
	679, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 718, 683, 0, 0, 0, 146, 147, 148,
	299, 733, 301, 734, 149, 735, 736, 0, 150, 305,
	306, 151, 152, 686, 717, 737, 738, 309, 0, 153,
	729, 0, 709, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 403, 163, 161, 162, 0, 710,
	711, 713, 0, 712, 714, 164, 165, 356, 166, 739,
	167, 740, 741, 0, 168, 0, 169, 0, 170, 0,
	0, 732, 172, 0, 173, 0, 0, 0, 674, 174,
	175, 176, 719, 720, 697, 0, 0, 177, 178, 742,
	743, 744, 0, 179, 0, 180, 0, 0, 404, 0,
	181, 730, 0, 321, 0, 182, 183, 184, 185, 726,
	728, 406, 0, 189, 0, 186, 0, 405, 187, 745,
	188, 746, 747, 748, 749, 750, 0, 708, 0, 407,
	190, 191, 192, 408, 193, 194, 195, 0, 197, 196,
	0, 731, 409, 198, 410, 0, 199, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 332, 205, 411, 207,
	208, 210, 209, 669, 0, 698, 727, 211, 751, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 335,
	412, 217, 413, 721, 218, 219, 220, 221, 222, 0,
	223, 722, 224, 338, 225, 0, 226, 227, 228, 229,
	230, 752, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 414,
	246, 247, 675, 248, 0, 252, 253, 254, 255, 0,
	257, 341, 256, 258, 259, 715, 260, 249, 250, 261,
	415, 262, 753, 343, 263, 0, 269, 264, 265, 251,
	266, 268, 754, 267, 723, 0, 270, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 346, 755, 756, 0,
	0, 278, 279, 724, 725, 696, 280, 281, 282, 283,
	0, 0, 284, 285, 286, 287, 716, 288, 0, 351,
	289, 290, 291, 352, 757, 0, 0, 292, 0, 0,
	0, 0, 293, 294, 295, 296, 297, 670, 0, 0,
	0, 0, 0, 668, 0, 0, 0, 0, 666, 667,
	701, 690, 691, 688, 689, 680, 0, 676, 0, 0,
	0, 0, 679, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 718, 683, 0, 0, 0, 146,
	147, 148, 2230, 733, 301, 734, 149, 735, 736, 0,
	150, 305, 306, 151, 152, 686, 717, 737, 738, 309,
	0, 153, 729, 0, 709, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 403, 163, 161, 2232,
	0, 710, 711, 713, 0, 712, 714, 164, 165, 356,
	166, 739, 167, 740, 741, 0, 168, 0, 169, 0,
	170, 0, 0, 732, 172, 0, 173, 0, 0, 0,
	674, 174, 175, 176, 719, 720, 697, 0, 0, 177,
	178, 742, 743, 744, 0, 179, 0, 180, 0, 0,
	404, 0, 181, 730, 0, 321, 0, 182, 183, 184,
	185, 726, 728, 406, 0, 189, 0, 186, 0, 405,
	187, 745, 188, 746, 747, 748, 749, 750, 0, 708,
	0, 407, 190, 191, 192, 408, 193, 194, 195, 0,
	197, 196, 0, 731, 409, 198, 410, 0, 199, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 332, 205,
	411, 207, 208, 210, 209, 669, 0, 698, 727, 211,
	751, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 335, 412, 217, 413, 721, 218, 219, 220, 221,
	222, 0, 223, 722, 224, 338, 225, 0, 226, 227,
	228, 229, 230, 752, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 414, 246, 247, 675, 248, 0, 252, 253, 254,
	255, 0, 257, 341, 256, 258, 259, 715, 260, 249,
	250, 261, 415, 262, 753, 343, 263, 0, 269, 264,
	265, 251, 266, 268, 754, 267, 723, 0, 270, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 346, 755,
	756, 0, 0, 278, 279, 724, 725, 696, 280, 281,
	2231, 283, 0, 0, 284, 285, 286, 287, 716, 288,
	0, 351, 289, 290, 291, 352, 757, 0, 0, 292,
	0, 0, 0, 0, 293, 294, 295, 296, 297, 670,
	0, 0, 0, 0, 0, 668, 0, 0, 0, 0,
	666, 667, 1376, 690, 691, 688, 689, 680, 0, 676,
	0, 0, 0, 0, 679, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 718, 683, 0, 0,
	0, 146, 147, 148, 299, 733, 301, 734, 149, 735,
	736, 0, 150, 305, 306, 151, 152, 686, 717, 737,
	738, 309, 0, 153, 729, 0, 709, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 403, 163,
	161, 162, 0, 710, 711, 713, 0, 712, 714, 164,
	165, 356, 166, 739, 1379, 740, 741, 0, 168, 0,
	169, 0, 170, 0, 0, 732, 172, 0, 173, 0,
	0, 0, 674, 174, 175, 176, 719, 720, 697, 0,
	0, 177, 178, 742, 743, 744, 0, 179, 0, 180,
	0, 0, 404, 0, 181, 730, 0, 321, 0, 182,
	183, 1380, 185, 726, 728, 406, 0, 189, 0, 186,
	0, 405, 187, 745, 188, 746, 747, 748, 749, 750,
	0, 708, 0, 407, 190, 191, 192, 408, 193, 194,
	195, 0, 197, 196, 0, 731, 409, 198, 410, 0,
	199, 200, 0, 0, 201, 0, 202, 1381, 1378, 206,
	332, 205, 411, 207, 208, 210, 209, 669, 0, 698,
	727, 211, 751, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 412, 217, 413, 721, 218, 219,
	220, 221, 222, 0, 223, 722, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 752, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 414, 246, 247, 675, 248, 0, 252,
	253, 254, 1382, 0, 257, 341, 256, 258, 259, 715,
	260, 249, 250, 261, 415, 262, 753, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 754, 267, 723, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 755, 756, 0, 0, 278, 279, 724, 725, 696,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	716, 288, 0, 351, 289, 290, 291, 352, 757, 0,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 1377,
	297, 670, 0, 0, 0, 0, 0, 668, 0, 0,
	0, 0, 666, 667, 701, 690, 691, 688, 689, 680,
	0, 676, 0, 0, 0, 0, 679, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 718, 683,
	0, 0, 0, 146, 147, 148, 299, 733, 301, 734,
	149, 735, 736, 0, 150, 305, 306, 151, 152, 686,
	717, 737, 738, 309, 0, 153, 729, 0, 709, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	403, 163, 161, 162, 0, 710, 711, 713, 0, 712,
	714, 164, 165, 356, 166, 739, 167, 740, 741, 0,
	168, 0, 169, 0, 170, 0, 0, 732, 172, 0,
	173, 0, 0, 0, 674, 174, 175, 176, 719, 720,
	697, 0, 0, 177, 178, 742, 743, 744, 0, 179,
	0, 180, 0, 0, 404, 0, 181, 730, 0, 321,
	0, 182, 183, 184, 185, 726, 728, 406, 0, 189,
	0, 186, 0, 405, 187, 745, 188, 746, 747, 748,
	749, 750, 0, 708, 0, 407, 190, 191, 192, 408,
	193, 194, 195, 0, 197, 196, 0, 731, 409, 198,
	410, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 411, 207, 208, 210, 209, 0,
	0, 698, 727, 211, 751, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 412, 217, 413, 721,
	218, 219, 220, 221, 222, 0, 223, 722, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 752, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 414, 246, 247, 1394, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 715, 260, 249, 250, 261, 415, 262, 753, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 754, 267,
	723, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 755, 756, 0, 0, 278, 279, 724,
	725, 696, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 716, 288, 0, 351, 289, 290, 291, 352,
	757, 0, 0, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 0, 0, 0, 0, 0, 0, 1392,
	0, 0, 0, 0, 1390, 1391, 701, 690, 691, 688,
	689, 680, 0, 1393, 0, 0, 0, 0, 679, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	718, 683, 0, 0, 0, 146, 147, 148, 299, 733,
	301, 734, 149, 735, 736, 0, 150, 305, 306, 151,
	152, 0, 717, 737, 738, 309, 0, 153, 729, 0,
	709, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 403, 163, 161, 162, 0, 710, 711, 713,
	0, 712, 714, 164, 165, 356, 166, 739, 167, 740,
	741, 0, 168, 0, 169, 0, 170, 0, 0, 732,
	172, 0, 173, 0, 0, 0, 314, 174, 175, 176,
	719, 720, 697, 0, 0, 177, 178, 742, 743, 744,
	0, 179, 0, 180, 0, 0, 404, 0, 181, 730,
	0, 321, 0, 182, 183, 184, 185, 726, 728, 406,
	0, 189, 0, 186, 0, 405, 187, 745, 188, 746,
	747, 748, 749, 750, 0, 708, 0, 407, 190, 191,
	192, 408, 193, 194, 195, 0, 197, 196, 0, 731,
	409, 198, 410, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 411, 207, 208, 210,
	209, 0, 0, 698, 727, 211, 751, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 335, 412, 217,
	413, 721, 218, 219, 220, 221, 222, 0, 223, 722,
	224, 338, 225, 0, 226, 227, 228, 229, 230, 752,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 414, 246, 247,
	1394, 248, 0, 252, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 715, 260, 249, 250, 261, 415, 262,
	753, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	754, 267, 723, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 755, 756, 0, 0, 278,
	279, 724, 725, 696, 280, 281, 282, 283, 0, 0,
	284, 285, 286, 287, 716, 288, 0, 351, 289, 290,
	291, 352, 757, 0, 0, 292, 0, 0, 0, 0,
	293, 294, 295, 296, 297, 0, 0, 701, 690, 691,
	688, 689, 680, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 144, 1393, 145, 0, 0, 0,
	679, 718, 683, 0, 0, 0, 146, 147, 148, 0,
	733, 301, 734, 149, 735, 736, 0, 150, 305, 306,
	151, 152, 686, 717, 737, 738, 309, 0, 153, 729,
	0, 709, 0, 154, 155, 156, 0, 157, 0, 158,
	159, 160, 0, 403, 163, 161, 2232, 0, 710, 711,
	713, 0, 712, 714, 164, 165, 356, 166, 739, 167,
	740, 741, 0, 168, 0, 169, 0, 170, 0, 0,
	732, 172, 0, 173, 0, 0, 0, 674, 174, 175,
	176, 719, 720, 697, 0, 0, 177, 178, 742, 743,
	744, 0, 179, 0, 180, 0, 0, 404, 0, 181,
	730, 0, 321, 0, 182, 183, 184, 185, 726, 728,
	0, 0, 189, 0, 186, 0, 405, 187, 745, 188,
	746, 747, 748, 749, 750, 0, 708, 0, 0, 190,
	191, 192, 408, 193, 194, 195, 0, 197, 196, 0,
	731, 409, 198, 0, 0, 199, 200, 0, 0, 201,
	0, 202, 203, 204, 206, 332, 205, 411, 207, 208,
	210, 209, 669, 0, 698, 727, 211, 751, 212, 213,
	0, 214, 0, 0, 215, 0, 0, 216, 335, 412,
	217, 413, 721, 218, 219, 220, 221, 222, 0, 223,
	722, 224, 338, 225, 0, 226, 227, 228, 229, 230,
	752, 231, 232, 0, 233, 234, 235, 236, 237, 239,
	240, 238, 241, 242, 243, 244, 0, 245, 414, 246,
	247, 675, 248, 0, 252, 253, 254, 255, 0, 257,
	341, 256, 258, 259, 715, 260, 249, 250, 261, 0,
	262, 753, 343, 263, 0, 269, 264, 265, 251, 266,
	268, 754, 267, 723, 0, 270, 0, 271, 272, 273,
	274, 275, 276, 277, 0, 346, 755, 756, 0, 0,
	278, 279, 724, 725, 696, 280, 281, 2231, 283, 0,
	0, 284, 285, 286, 287, 716, 288, 0, 351, 289,
	290, 291, 352, 757, 0, 0, 292, 0, 0, 0,
	0, 293, 294, 295, 296, 297, 701, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 666, 667, 0,
	0, 0, 143, 144, 0, 145, 676, 0, 0, 0,
	718, 679, 0, 0, 0, 146, 147, 148, 299, 300,
	301, 302, 149, 303, 304, 0, 150, 305, 306, 151,
	152, 0, 717, 307, 308, 309, 0, 153, 729, 0,
	709, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 403, 163, 161, 162, 0, 710, 711, 713,
	0, 712, 714, 164, 165, 356, 166, 311, 167, 312,
	313, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 314, 174, 175, 176,
	719, 720, 0, 0, 0, 177, 178, 317, 318, 319,
	0, 179, 0, 180, 0, 0, 404, 0, 181, 730,
	0, 321, 0, 182, 183, 184, 185, 726, 728, 406,
	0, 189, 0, 186, 0, 405, 187, 324, 188, 325,
	326, 327, 328, 329, 0, 330, 0, 407, 190, 191,
	192, 408, 193, 194, 195, 0, 197, 196, 0, 731,
	409, 198, 410, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 411, 207, 208, 210,
	209, 0, 0, 0, 727, 211, 334, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 335, 412, 217,
	413, 721, 218, 219, 220, 221, 222, 0, 223, 722,
	224, 338, 225, 0, 226, 227, 228, 229, 230, 339,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 414, 246, 247,
	340, 248, 0, 252, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 715, 260, 249, 250, 261, 415, 262,
	342, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	344, 267, 723, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 347, 348, 0, 0, 278,
	279, 724, 725, 0, 280, 281, 282, 283, 0, 0,
	284, 285, 286, 287, 716, 288, 0, 351, 289, 290,
	291, 352, 353, 0, 0, 292, 0, 571, 0, 0,
	293, 294, 295, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 144, 0, 145, 0, 0, 0,
	0, 298, 0, 0, 0, 1905, 146, 147, 148, 299,
	300, 301, 302, 149, 303, 304, 0, 150, 305, 306,
	151, 152, 0, 0, 307, 308, 309, 0, 153, 310,
	0, 402, 0, 154, 155, 156, 0, 157, 0, 158,
	159, 160, 0, 403, 163, 161, 162, 0, 0, 0,
	0, 0, 0, 0, 164, 165, 356, 166, 311, 167,
	312, 313, 0, 168, 0, 169, 0, 170, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 314, 174, 175,
	176, 315, 316, 0, 0, 0, 177, 178, 317, 318,
	319, 0, 179, 0, 180, 0, 0, 404, 0, 181,
	320, 0, 321, 0, 182, 183, 184, 185, 322, 323,
	406, 0, 189, 0, 186, 0, 405, 187, 324, 188,
	325, 326, 327, 328, 329, 0, 330, 0, 407, 190,
	191, 192, 408, 193, 194, 195, 0, 197, 196, 0,
	331, 409, 198, 410, 0, 199, 200, 0, 0, 201,
	0, 202, 203, 204, 206, 332, 205, 411, 207, 208,
	210, 209, 0, 0, 0, 333, 211, 334, 212, 213,
	0, 214, 0, 0, 215, 0, 0, 216, 335, 412,
	217, 413, 336, 218, 219, 220, 221, 222, 0, 223,
	337, 224, 338, 225, 0, 226, 227, 228, 229, 230,
	339, 231, 232, 0, 233, 234, 235, 236, 237, 239,
	240, 238, 241, 242, 243, 244, 0, 245, 414, 246,
	247, 340, 248, 0, 252, 253, 254, 255, 127, 257,
	341, 256, 258, 259, 0, 260, 249, 250, 261, 415,
	262, 342, 343, 263, 0, 269, 264, 265, 251, 266,
	268, 344, 267, 345, 0, 270, 131, 271, 272, 273,
	274, 275, 276, 277, 0, 346, 347, 348, 0, 0,
	278, 279, 349, 350, 0, 280, 281, 282, 283, 0,
	0, 284, 285, 286, 287, 0, 288, 0, 351, 289,
	290, 291, 660, 353, 0, 0, 292, 0, 0, 0,
	125, 293, 294, 295, 296, 297, 0, 126, 571, 568,
	0, 569, 564, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 144, 116, 145, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 146, 147, 148,
	299, 300, 301, 302, 149, 303, 304, 0, 150, 305,
	306, 151, 152, 0, 0, 307, 308, 309, 0, 153,
	310, 0, 402, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 403, 163, 161, 162, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 356, 166, 311,
	167, 312, 313, 1115, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 314, 174,
	175, 176, 315, 316, 561, 0, 0, 177, 178, 317,
	318, 319, 0, 179, 0, 180, 0, 0, 404, 0,
	181, 320, 0, 321, 0, 182, 183, 184, 185, 322,
	323, 406, 0, 189, 0, 186, 0, 405, 187, 324,
	188, 325, 326, 327, 328, 329, 0, 330, 0, 407,
	190, 191, 192, 408, 193, 194, 195, 0, 197, 196,
	0, 331, 409, 198, 410, 0, 199, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 332, 205, 411, 207,
	208, 210, 209, 0, 0, 0, 333, 211, 334, 212,
	213, 0, 214, 562, 0, 215, 0, 0, 216, 335,
	412, 217, 413, 336, 218, 219, 220, 221, 222, 0,
	223, 337, 224, 338, 225, 0, 226, 227, 228, 229,
	230, 339, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 414,
	246, 247, 340, 248, 0, 252, 253, 254, 255, 0,
	257, 341, 256, 258, 259, 0, 260, 249, 250, 261,
	415, 262, 342, 343, 263, 0, 269, 264, 265, 251,
	266, 268, 344, 267, 345, 0, 270, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 346, 347, 348, 0,
	0, 278, 279, 349, 350, 560, 280, 281, 282, 283,
	0, 0, 284, 285, 286, 287, 0, 288, 0, 351,
	289, 290, 291, 352, 353, 0, 0, 292, 0, 0,
	0, 0, 293, 294, 295, 296, 297, 571, 568, 0,
	569, 564, 559, 0, 0, 0, 0, 0, 570, 565,
	0, 0, 0, 143, 144, 0, 145, 0, 0, 0,
	0, 298, 0, 0, 0, 0, 146, 147, 148, 299,
	300, 301, 302, 149, 303, 304, 0, 150, 305, 306,
	151, 152, 0, 0, 307, 308, 309, 0, 153, 310,
	0, 402, 0, 154, 155, 156, 0, 157, 0, 158,
	159, 160, 0, 403, 163, 161, 162, 0, 0, 0,
	0, 0, 0, 0, 164, 165, 356, 166, 311, 167,
	312, 313, 1112, 168, 0, 169, 0, 170, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 314, 174, 175,
	176, 315, 316, 561, 0, 0, 177, 178, 317, 318,
	319, 0, 179, 0, 180, 0, 0, 404, 0, 181,
	320, 0, 321, 0, 182, 183, 184, 185, 322, 323,
	406, 0, 189, 0, 186, 0, 405, 187, 324, 188,
	325, 326, 327, 328, 329, 0, 330, 0, 407, 190,
	191, 192, 408, 193, 194, 195, 0, 197, 196, 0,
	331, 409, 198, 410, 0, 199, 200, 0, 0, 201,
	0, 202, 203, 204, 206, 332, 205, 411, 207, 208,
	210, 209, 0, 0, 0, 333, 211, 334, 212, 213,
	0, 214, 562, 0, 215, 0, 0, 216, 335, 412,
	217, 413, 336, 218, 219, 220, 221, 222, 0, 223,
	337, 224, 338, 225, 0, 226, 227, 228, 229, 230,
	339, 231, 232, 0, 233, 234, 235, 236, 237, 239,
	240, 238, 241, 242, 243, 244, 0, 245, 414, 246,
	247, 340, 248, 0, 252, 253, 254, 255, 0, 257,
	341, 256, 258, 259, 0, 260, 249, 250, 261, 415,
	262, 342, 343, 263, 0, 269, 264, 265, 251, 266,
	268, 344, 267, 345, 0, 270, 0, 271, 272, 273,
	274, 275, 276, 277, 0, 346, 347, 348, 0, 0,
	278, 279, 349, 350, 560, 280, 281, 282, 283, 0,
	0, 284, 285, 286, 287, 0, 288, 0, 351, 289,
	290, 291, 352, 353, 0, 0, 292, 0, 0, 0,
	0, 293, 294, 295, 296, 297, 571, 568, 0, 569,
	564, 559, 0, 0, 0, 0, 0, 570, 565, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	298, 0, 0, 0, 0, 146, 147, 148, 299, 300,
	301, 302, 149, 303, 304, 0, 150, 305, 306, 151,
	152, 0, 0, 307, 308, 309, 0, 153, 310, 0,
	402, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 403, 163, 161, 162, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 356, 166, 311, 167, 312,
	313, 792, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 314, 174, 175, 176,
	315, 316, 561, 0, 0, 177, 178, 317, 318, 319,
	0, 179, 0, 180, 0, 0, 404, 0, 181, 320,
	0, 321, 0, 182, 183, 184, 185, 322, 323, 406,
	0, 189, 0, 186, 0, 405, 187, 324, 188, 325,
	326, 327, 328, 329, 0, 330, 0, 407, 190, 191,
	192, 408, 193, 194, 195, 0, 197, 196, 0, 331,
	409, 198, 410, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 411, 207, 208, 210,
	209, 0, 0, 0, 333, 211, 334, 212, 213, 0,
	214, 562, 0, 215, 0, 0, 216, 335, 412, 217,
	413, 336, 218, 219, 220, 221, 222, 0, 223, 337,
	224, 338, 225, 0, 226, 227, 228, 229, 230, 339,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 414, 246, 247,
	340, 248, 0, 252, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 0, 260, 249, 250, 261, 415, 262,
	342, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	344, 267, 345, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 347, 348, 0, 0, 278,
	279, 349, 350, 560, 280, 281, 282, 283, 0, 0,
	284, 285, 286, 287, 0, 288, 0, 351, 289, 290,
	291, 352, 353, 0, 0, 292, 0, 0, 0, 0,
	293, 294, 295, 296, 297, 571, 568, 0, 569, 564,
	559, 0, 0, 0, 0, 0, 570, 565, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 298,
	0, 0, 0, 0, 146, 147, 148, 299, 300, 301,
	302, 149, 303, 304, 0, 150, 305, 306, 151, 152,
	0, 0, 307, 308, 309, 0, 153, 310, 0, 402,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 403, 163, 161, 162, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 356, 166, 311, 167, 312, 313,
	0, 168, 0, 169, 0, 170, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 314, 174, 175, 176, 315,
	316, 561, 0, 0, 177, 178, 317, 318, 319, 0,
	179, 0, 180, 0, 0, 404, 0, 181, 320, 0,
	321, 0, 182, 183, 184, 185, 322, 323, 406, 0,
	189, 0, 186, 0, 405, 187, 324, 188, 325, 326,
	327, 328, 329, 0, 330, 0, 407, 190, 191, 192,
	408, 193, 194, 195, 0, 197, 196, 0, 331, 409,
	198, 410, 0, 199, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 332, 205, 411, 207, 208, 210, 209,
	0, 0, 0, 333, 211, 334, 212, 213, 0, 214,
	562, 0, 215, 0, 0, 216, 335, 412, 217, 413,
	336, 218, 219, 220, 221, 222, 0, 223, 337, 224,
	338, 225, 0, 226, 227, 228, 229, 230, 339, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 414, 246, 247, 340,
	248, 0, 252, 253, 254, 255, 0, 257, 341, 256,
	258, 259, 0, 260, 249, 250, 261, 415, 262, 342,
	343, 263, 0, 269, 264, 265, 251, 266, 268, 344,
	267, 345, 0, 270, 0, 271, 272, 273, 274, 275,
	276, 277, 0, 346, 347, 348, 0, 0, 278, 279,
	349, 350, 560, 280, 281, 282, 283, 0, 0, 284,
	285, 286, 287, 0, 288, 0, 351, 289, 290, 291,
	352, 353, 0, 140, 292, 0, 0, 0, 0, 293,
	294, 295, 296, 297, 0, 0, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 570, 565, 298, 0, 0,
	0, 0, 146, 147, 148, 299, 300, 301, 302, 149,
	303, 304, 0, 150, 305, 306, 151, 152, 0, 0,
	307, 308, 309, 0, 153, 310, 0, 0, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 0,
	163, 161, 162, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 356, 166, 311, 167, 312, 313, 0, 168,
	0, 169, 0, 170, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 314, 174, 175, 176, 315, 316, 0,
	0, 0, 177, 178, 317, 318, 319, 0, 179, 0,
	180, 0, 0, 0, 0, 181, 320, 0, 321, 0,
	182, 183, 184, 185, 322, 323, 0, 0, 189, 0,
	186, 0, 0, 187, 324, 188, 325, 326, 327, 328,
	329, 0, 330, 0, 0, 190, 191, 192, 0, 193,
	194, 195, 0, 197, 196, 0, 331, 0, 198, 0,
	0, 199, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 332, 205, 0, 207, 208, 210, 209, 0, 0,
	0, 333, 211, 334, 212, 213, 0, 214, 0, 631,
	215, 0, 0, 216, 335, 0, 217, 0, 336, 218,
	219, 220, 221, 222, 0, 223, 337, 224, 338, 225,
	0, 226, 227, 228, 229, 230, 339, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 0, 246, 247, 340, 248, 0,
	252, 253, 254, 255, 127, 257, 341, 256, 258, 259,
	0, 260, 249, 250, 261, 0, 262, 342, 343, 263,
	0, 269, 264, 265, 251, 266, 268, 344, 267, 345,
	0, 270, 131, 271, 272, 273, 274, 275, 276, 277,
	0, 346, 347, 348, 0, 0, 278, 279, 349, 350,
	0, 280, 281, 282, 283, 0, 0, 284, 285, 286,
	287, 0, 288, 0, 351, 289, 290, 291, 660, 353,
	0, 0, 292, 0, 140, 0, 125, 293, 294, 295,
	296, 297, 0, 126, 0, 0, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 298, 0,
	625, 0, 630, 146, 147, 148, 299, 300, 301, 302,
	149, 303, 304, 0, 150, 305, 306, 151, 152, 0,
	0, 307, 308, 309, 0, 153, 310, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 163, 161, 162, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 356, 166, 311, 167, 312, 313, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 314, 174, 175, 176, 315, 316,
	0, 0, 0, 177, 178, 317, 318, 319, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 320, 0, 321,
	0, 182, 183, 184, 185, 322, 323, 0, 0, 189,
	0, 186, 0, 0, 187, 324, 188, 325, 326, 327,
	328, 329, 0, 330, 0, 0, 190, 191, 192, 0,
	193, 194, 195, 0, 197, 196, 0, 331, 0, 198,
	0, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 333, 211, 334, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 0, 217, 0, 336,
	218, 219, 220, 221, 222, 0, 223, 337, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 339, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 340, 248,
	0, 252, 253, 254, 255, 127, 257, 341, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 342, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 344, 267,
	345, 0, 270, 131, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 347, 348, 0, 0, 278, 279, 349,
	350, 0, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 0, 288, 0, 351, 289, 290, 291, 660,
	353, 0, 0, 292, 0, 140, 0, 125, 293, 294,
	295, 296, 297, 0, 126, 0, 0, 0, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 298,
	0, 0, 0, 116, 146, 147, 148, 299, 300, 301,
	302, 149, 303, 304, 0, 150, 305, 306, 151, 152,
	0, 0, 307, 308, 309, 0, 153, 310, 0, 0,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 0, 163, 161, 162, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 356, 166, 311, 167, 312, 313,
	0, 168, 0, 169, 0, 170, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 314, 174, 175, 176, 315,
	316, 0, 0, 0, 177, 178, 317, 318, 319, 0,
	179, 0, 180, 0, 0, 0, 0, 181, 320, 0,
	321, 0, 182, 183, 184, 185, 322, 323, 0, 0,
	189, 0, 186, 0, 0, 187, 324, 188, 325, 326,
	327, 328, 329, 0, 330, 0, 0, 190, 191, 192,
	0, 193, 194, 195, 0, 197, 196, 0, 331, 0,
	198, 0, 0, 199, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 332, 205, 0, 207, 208, 210, 209,
	0, 0, 0, 333, 211, 334, 212, 213, 0, 214,
	0, 631, 215, 0, 0, 216, 335, 0, 217, 0,
	336, 218, 219, 220, 221, 222, 0, 223, 337, 224,
	338, 225, 0, 226, 227, 228, 229, 230, 339, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 0, 246, 247, 340,
	248, 0, 252, 253, 254, 255, 0, 257, 341, 256,
	258, 259, 0, 260, 249, 250, 261, 0, 262, 342,
	343, 263, 0, 269, 264, 265, 251, 266, 268, 344,
	267, 345, 0, 270, 0, 271, 272, 273, 274, 275,
	276, 277, 0, 346, 347, 348, 0, 0, 278, 279,
	349, 350, 0, 280, 281, 282, 283, 0, 0, 284,
	285, 286, 287, 0, 288, 0, 351, 289, 290, 291,
	352, 353, 0, 0, 292, 0, 140, 0, 0, 293,
	294, 295, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	298, 0, 625, 0, 630, 146, 147, 148, 299, 300,
	301, 302, 149, 303, 304, 0, 150, 305, 306, 151,
	152, 0, 0, 307, 308, 309, 0, 153, 310, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 163, 161, 162, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 356, 166, 311, 167, 312,
	313, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 314, 174, 175, 176,
	315, 316, 0, 0, 0, 177, 178, 317, 318, 319,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 320,
	0, 321, 0, 182, 183, 184, 185, 322, 323, 0,
	0, 189, 0, 186, 0, 0, 187, 324, 188, 325,
	326, 327, 328, 329, 0, 330, 0, 0, 190, 191,
	192, 0, 193, 194, 195, 0, 197, 196, 0, 331,
	0, 198, 0, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 333, 211, 334, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 335, 0, 217,
	0, 336, 218, 219, 220, 221, 222, 0, 223, 337,
	224, 338, 225, 0, 226, 227, 228, 229, 230, 339,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	340, 248, 0, 252, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	342, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	344, 267, 345, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 347, 348, 0, 0, 278,
	279, 349, 350, 0, 280, 281, 282, 283, 0, 0,
	284, 285, 286, 287, 0, 288, 0, 351, 289, 290,
	291, 352, 353, 0, 0, 292, 0, 0, 140, 0,
	293, 294, 295, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 298, 0, 0, 0, 920, 146, 147, 148,
	299, 300, 301, 302, 149, 303, 304, 0, 150, 305,
	306, 151, 152, 0, 0, 307, 308, 309, 0, 153,
	310, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 163, 161, 162, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 356, 166, 311,
	167, 312, 313, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 314, 174,
	175, 176, 315, 316, 0, 0, 0, 177, 178, 317,
	318, 319, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 320, 0, 321, 0, 182, 183, 184, 185, 322,
	323, 0, 0, 189, 0, 186, 0, 0, 187, 324,
	188, 325, 326, 327, 328, 329, 0, 330, 0, 0,
	190, 191, 192, 0, 193, 194, 195, 0, 197, 196,
	0, 331, 0, 198, 0, 0, 199, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 332, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 333, 211, 334, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 335,
	0, 217, 0, 336, 218, 219, 220, 221, 222, 0,
	223, 337, 224, 338, 225, 0, 226, 227, 228, 229,
	230, 339, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 340, 248, 0, 252, 253, 254, 255, 0,
	257, 341, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 342, 343, 263, 0, 269, 264, 265, 251,
	266, 268, 344, 267, 345, 0, 270, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 346, 347, 348, 0,
	0, 278, 279, 349, 350, 0, 280, 281, 282, 283,
	0, 0, 284, 285, 286, 287, 0, 288, 0, 351,
	289, 290, 291, 352, 353, 0, 0, 292, 0, 140,
	0, 0, 293, 294, 295, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 144, 0, 145, 0,
	0, 0, 0, 298, 0, 0, 0, 1262, 146, 147,
	148, 299, 300, 301, 302, 149, 303, 304, 0, 150,
	305, 306, 151, 152, 0, 0, 307, 308, 309, 0,
	153, 310, 0, 0, 0, 154, 155, 156, 0, 157,
	0, 158, 159, 160, 0, 0, 163, 161, 162, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 356, 166,
	311, 167, 312, 313, 0, 168, 0, 169, 0, 170,
	0, 0, 171, 172, 0, 173, 0, 0, 0, 314,
	174, 175, 176, 315, 316, 0, 0, 0, 177, 178,
	317, 318, 319, 0, 179, 0, 180, 0, 0, 0,
	0, 181, 320, 0, 321, 0, 182, 183, 184, 185,
	322, 323, 0, 0, 189, 0, 186, 0, 0, 187,
	324, 188, 325, 326, 327, 328, 329, 0, 330, 0,
	0, 190, 191, 192, 0, 193, 194, 195, 0, 197,
	196, 0, 331, 0, 198, 0, 0, 199, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 332, 205, 0,
	207, 208, 210, 209, 0, 0, 0, 333, 211, 334,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	335, 0, 217, 0, 336, 218, 219, 220, 221, 222,
	0, 223, 337, 224, 338, 225, 0, 226, 227, 228,
	229, 230, 339, 231, 232, 0, 233, 234, 235, 236,
	237, 239, 240, 238, 241, 242, 243, 244, 0, 245,
	0, 246, 247, 340, 248, 0, 252, 253, 254, 255,
	0, 257, 341, 256, 258, 259, 0, 260, 249, 250,
	261, 0, 262, 342, 343, 263, 0, 269, 264, 265,
	251, 266, 268, 344, 267, 345, 0, 270, 0, 271,
	272, 273, 274, 275, 276, 277, 0, 346, 347, 348,
	0, 0, 278, 279, 349, 350, 0, 280, 281, 282,
	283, 0, 0, 284, 285, 286, 287, 0, 288, 0,
	351, 289, 290, 291, 352, 353, 0, 0, 292, 0,
	140, 0, 0, 293, 294, 295, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 298, 0, 0, 0, 1840, 146,
	147, 148, 299, 300, 301, 302, 149, 303, 304, 0,
	150, 305, 306, 151, 152, 0, 0, 307, 308, 309,
	0, 153, 310, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 163, 161, 162,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 356,
	166, 311, 167, 312, 313, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	314, 174, 175, 176, 315, 316, 0, 0, 0, 177,
	178, 317, 318, 319, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 320, 0, 321, 0, 182, 183, 184,
	185, 322, 323, 0, 0, 189, 0, 186, 0, 0,
	187, 324, 188, 325, 326, 327, 328, 329, 0, 330,
	0, 0, 190, 191, 192, 0, 193, 194, 195, 0,
	197, 196, 0, 331, 0, 198, 0, 0, 199, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 332, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 333, 211,
	334, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 335, 0, 217, 0, 336, 218, 219, 220, 221,
	222, 0, 223, 337, 224, 338, 225, 0, 226, 227,
	228, 229, 230, 339, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 340, 248, 0, 252, 253, 254,
	255, 0, 257, 341, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 342, 343, 263, 0, 269, 264,
	265, 251, 266, 268, 344, 267, 345, 0, 270, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 346, 347,
	348, 0, 0, 278, 279, 349, 350, 0, 280, 281,
	282, 283, 0, 0, 284, 285, 286, 287, 0, 288,
	0, 351, 289, 290, 291, 352, 353, 0, 0, 292,
	0, 0, 0, 0, 293, 294, 295, 296, 297, 701,
	690, 691, 688, 689, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 144, 0, 145, 913,
	0, 0, 0, 298, 0, 0, 0, 0, 146, 147,
	148, 299, 733, 301, 734, 149, 735, 736, 0, 150,
	305, 306, 151, 152, 0, 0, 737, 738, 309, 0,
	153, 310, 0, 402, 0, 154, 155, 156, 0, 157,
	0, 158, 159, 160, 0, 403, 163, 161, 162, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 356, 166,
	739, 167, 740, 741, 0, 168, 0, 169, 0, 170,
	0, 0, 732, 172, 0, 173, 0, 0, 0, 314,
	174, 175, 176, 315, 316, 697, 0, 0, 177, 178,
	742, 743, 744, 0, 179, 0, 180, 0, 0, 404,
	0, 181, 320, 0, 321, 0, 182, 183, 184, 185,
	322, 323, 406, 0, 189, 0, 186, 0, 405, 187,
	745, 188, 746, 747, 748, 749, 750, 0, 708, 0,
	407, 190, 191, 192, 408, 193, 194, 195, 0, 197,
	196, 0, 331, 409, 198, 410, 0, 199, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 332, 205, 411,
	207, 208, 210, 209, 0, 0, 698, 333, 211, 751,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	335, 412, 217, 413, 336, 218, 219, 220, 221, 222,
	0, 223, 337, 224, 338, 225, 0, 226, 227, 228,
	229, 230, 752, 231, 232, 0, 233, 234, 235, 236,
	237, 239, 240, 238, 241, 242, 243, 244, 0, 245,
	414, 246, 247, 340, 248, 0, 252, 253, 254, 255,
	0, 257, 341, 256, 258, 259, 0, 260, 249, 250,
	261, 415, 262, 753, 343, 263, 0, 269, 264, 265,
	251, 266, 268, 754, 267, 345, 0, 270, 0, 271,
	272, 273, 274, 275, 276, 277, 0, 346, 755, 756,
	0, 0, 278, 279, 349, 350, 696, 280, 281, 282,
	283, 0, 0, 284, 285, 286, 287, 0, 288, 0,
	351, 289, 290, 291, 352, 757, 571, 568, 292, 0,
	0, 841, 0, 293, 294, 295, 296, 297, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	298, 0, 0, 0, 0, 146, 147, 148, 299, 300,
	301, 302, 149, 303, 304, 0, 150, 305, 306, 151,
	152, 0, 0, 307, 308, 309, 0, 153, 310, 0,
	402, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 403, 163, 161, 162, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 356, 166, 311, 167, 312,
	313, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 314, 174, 175, 176,
	315, 316, 0, 0, 0, 177, 178, 317, 318, 319,
	0, 179, 0, 180, 0, 0, 404, 0, 181, 320,
	0, 321, 0, 182, 183, 184, 185, 322, 323, 406,
	0, 189, 0, 186, 0, 405, 187, 324, 188, 325,
	326, 327, 328, 329, 0, 330, 0, 407, 190, 191,
	192, 408, 193, 194, 195, 0, 197, 196, 0, 331,
	409, 198, 410, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 411, 207, 208, 210,
	209, 0, 0, 0, 333, 211, 334, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 335, 412, 217,
	413, 336, 218, 219, 220, 221, 222, 0, 223, 337,
	224, 338, 225, 0, 226, 227, 228, 229, 230, 339,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 414, 246, 247,
	340, 248, 0, 252, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 0, 260, 249, 250, 261, 415, 262,
	342, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	344, 267, 345, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 347, 348, 0, 0, 278,
	279, 349, 350, 0, 280, 281, 282, 283, 0, 0,
	284, 285, 286, 287, 0, 288, 0, 351, 289, 290,
	291, 352, 353, 140, 0, 292, 0, 0, 0, 0,
	293, 294, 295, 296, 297, 0, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 146, 147, 148, 299, 300, 301, 302, 149,
	303, 304, 0, 150, 305, 306, 151, 152, 0, 0,
	307, 308, 309, 0, 153, 310, 0, 0, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 0,
	163, 161, 162, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 136, 166, 311, 167, 312, 313, 0, 168,
	0, 169, 0, 170, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 314, 174, 175, 176, 315, 316, 0,
	0, 0, 177, 178, 317, 318, 319, 0, 179, 0,
	180, 0, 0, 0, 0, 181, 320, 0, 321, 0,
	182, 183, 184, 185, 322, 323, 0, 0, 189, 0,
	186, 0, 0, 187, 324, 188, 325, 326, 327, 328,
	329, 0, 330, 0, 0, 190, 191, 192, 0, 193,
	194, 195, 0, 197, 196, 0, 331, 0, 198, 0,
	0, 199, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 332, 205, 0, 207, 208, 210, 209, 0, 0,
	0, 333, 211, 334, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 335, 0, 217, 0, 336, 218,
	219, 220, 221, 222, 0, 223, 337, 224, 338, 225,
	0, 226, 227, 228, 229, 230, 339, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 0, 246, 247, 340, 248, 0,
	252, 253, 254, 255, 0, 257, 341, 256, 258, 259,
	0, 260, 249, 250, 261, 0, 262, 342, 343, 263,
	0, 269, 264, 265, 251, 266, 268, 344, 267, 345,
	0, 270, 135, 271, 272, 273, 274, 275, 276, 277,
	0, 346, 347, 348, 0, 0, 278, 279, 349, 350,
	0, 280, 281, 282, 283, 0, 0, 284, 285, 286,
	287, 0, 288, 0, 351, 289, 290, 291, 352, 353,
	571, 568, 292, 0, 0, 0, 0, 293, 294, 295,
	296, 297, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 298, 139, 0, 0, 0, 146,
	147, 148, 299, 300, 301, 302, 149, 303, 304, 0,
	150, 305, 306, 151, 152, 0, 0, 307, 308, 309,
	0, 153, 310, 0, 402, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 403, 163, 161, 162,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 356,
	166, 311, 167, 312, 313, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	314, 174, 175, 176, 315, 316, 0, 0, 0, 177,
	178, 317, 318, 319, 0, 179, 0, 180, 0, 0,
	404, 0, 181, 320, 0, 321, 0, 182, 183, 184,
	185, 322, 323, 406, 0, 189, 0, 186, 0, 405,
	187, 324, 188, 325, 326, 327, 328, 329, 0, 330,
	0, 407, 190, 191, 192, 408, 193, 194, 195, 0,
	197, 196, 0, 331, 409, 198, 410, 0, 199, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 332, 205,
	411, 207, 208, 210, 209, 0, 0, 0, 333, 211,
	334, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 335, 412, 217, 413, 336, 218, 219, 220, 221,
	222, 0, 223, 337, 224, 338, 225, 0, 226, 227,
	228, 229, 230, 339, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 414, 246, 247, 340, 248, 0, 252, 253, 254,
	255, 0, 257, 341, 256, 258, 259, 0, 260, 249,
	250, 261, 415, 262, 342, 343, 263, 0, 269, 264,
	265, 251, 266, 268, 344, 267, 345, 0, 270, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 346, 347,
	348, 0, 0, 278, 279, 349, 350, 0, 280, 281,
	282, 283, 0, 0, 284, 285, 286, 287, 0, 288,
	0, 351, 289, 290, 291, 352, 353, 140, 0, 292,
	0, 0, 0, 0, 293, 294, 295, 296, 297, 0,
	0, 0, 0, 143, 144, 0, 145, 0, 0, 0,
	0, 298, 0, 0, 0, 0, 146, 147, 148, 299,
	300, 301, 302, 149, 303, 304, 0, 150, 305, 306,
	151, 152, 0, 0, 307, 308, 309, 0, 153, 310,
	0, 0, 0, 154, 155, 156, 0, 157, 0, 158,
	159, 160, 0, 0, 163, 161, 162, 0, 0, 0,
	0, 0, 0, 0, 164, 165, 356, 166, 311, 167,
	312, 313, 0, 168, 0, 169, 0, 170, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 314, 174, 175,
	176, 315, 316, 0, 0, 0, 177, 178, 317, 318,
	319, 0, 179, 0, 180, 0, 0, 0, 0, 181,
	320, 0, 321, 0, 182, 183, 184, 185, 322, 323,
	0, 0, 189, 0, 186, 0, 0, 187, 324, 188,
	325, 326, 327, 328, 329, 0, 330, 0, 0, 190,
	191, 192, 0, 193, 194, 195, 0, 197, 196, 0,
	331, 0, 198, 0, 0, 199, 200, 0, 0, 201,
	0, 202, 203, 204, 206, 332, 205, 0, 207, 208,
	210, 209, 0, 0, 0, 333, 211, 334, 212, 213,
	0, 214, 0, 0, 215, 0, 0, 216, 335, 0,
	217, 0, 336, 218, 219, 220, 221, 222, 0, 223,
	337, 224, 338, 225, 0, 226, 227, 228, 229, 230,
	339, 231, 232, 0, 233, 234, 235, 236, 237, 239,
	240, 238, 241, 242, 243, 244, 0, 245, 0, 246,
	247, 340, 248, 0, 252, 253, 254, 255, 0, 257,
	341, 256, 258, 259, 0, 260, 249, 250, 261, 0,
	262, 342, 343, 263, 0, 269, 264, 265, 251, 266,
	268, 344, 267, 345, 0, 270, 0, 271, 272, 273,
	274, 275, 276, 277, 0, 346, 347, 348, 0, 0,
	278, 279, 349, 350, 0, 280, 281, 282, 283, 0,
	0, 284, 285, 286, 287, 0, 288, 0, 351, 289,
	290, 291, 352, 353, 571, 0, 292, 0, 0, 0,
	0, 293, 294, 295, 296, 297, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 298, 139,
	0, 0, 0, 146, 147, 148, 299, 300, 301, 302,
	149, 303, 304, 0, 150, 305, 306, 151, 152, 0,
	0, 307, 308, 309, 0, 153, 310, 0, 402, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	403, 163, 161, 162, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 356, 166, 311, 167, 312, 313, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 314, 174, 175, 176, 315, 316,
	0, 0, 0, 177, 178, 317, 318, 319, 0, 179,
	0, 180, 0, 0, 404, 0, 181, 320, 0, 321,
	0, 182, 183, 184, 185, 322, 323, 406, 0, 189,
	0, 186, 0, 405, 187, 324, 188, 325, 326, 327,
	328, 329, 0, 330, 0, 407, 190, 191, 192, 408,
	193, 194, 195, 0, 197, 196, 0, 331, 409, 198,
	410, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 411, 207, 208, 210, 209, 0,
	0, 0, 333, 211, 334, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 412, 217, 413, 336,
	218, 219, 220, 221, 222, 0, 223, 337, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 339, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 414, 246, 247, 340, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 0, 260, 249, 250, 261, 415, 262, 342, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 344, 267,
	345, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 347, 348, 0, 0, 278, 279, 349,
	350, 0, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 0, 288, 0, 351, 289, 290, 291, 352,
	353, 140, 0, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 0, 0, 0, 0, 143, 144, 0,
	145, 0, 0, 0, 0, 298, 0, 0, 0, 0,
	146, 147, 148, 299, 300, 301, 302, 149, 303, 304,
	0, 150, 305, 306, 151, 152, 0, 0, 307, 308,
	309, 1454, 153, 310, 0, 0, 0, 154, 155, 156,
	0, 157, 1452, 158, 159, 160, 0, 0, 163, 161,
	162, 0, 0, 0, 0, 0, 0, 0, 164, 165,
	356, 166, 311, 167, 312, 313, 0, 168, 0, 169,
	0, 170, 0, 0, 171, 172, 0, 173, 0, 0,
	0, 314, 174, 175, 176, 315, 316, 0, 1451, 0,
	177, 178, 317, 318, 319, 0, 179, 0, 180, 1456,
	0, 0, 0, 181, 320, 0, 321, 0, 182, 183,
	184, 185, 322, 323, 0, 0, 189, 1449, 186, 0,
	0, 187, 324, 188, 325, 326, 327, 328, 329, 0,
	330, 0, 0, 190, 191, 192, 0, 193, 194, 195,
	0, 197, 196, 0, 331, 0, 198, 0, 0, 199,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 332,
	205, 0, 207, 208, 210, 209, 0, 0, 0, 333,
	211, 334, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 335, 0, 217, 0, 336, 218, 219, 220,
	221, 222, 0, 223, 337, 224, 338, 225, 1455, 226,
	227, 228, 229, 230, 339, 231, 232, 0, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	0, 245, 0, 246, 247, 340, 248, 0, 252, 253,
	254, 255, 0, 257, 341, 256, 258, 259, 0, 260,
	249, 250, 261, 0, 262, 342, 343, 263, 0, 269,
	264, 265, 251, 266, 268, 344, 267, 345, 0, 270,
	0, 271, 272, 273, 274, 275, 276, 277, 0, 346,
	347, 348, 0, 0, 278, 279, 349, 350, 0, 280,
	281, 282, 283, 0, 1450, 284, 285, 286, 287, 0,
	288, 0, 351, 289, 290, 291, 352, 353, 140, 0,
	292, 0, 0, 0, 0, 293, 294, 295, 296, 297,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 146, 147, 148,
	299, 300, 301, 302, 149, 303, 304, 0, 150, 305,
	306, 151, 152, 0, 0, 307, 308, 309, 1454, 153,
	310, 0, 0, 1501, 154, 155, 156, 0, 157, 1452,
	158, 159, 160, 0, 0, 163, 161, 162, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 356, 166, 311,
	167, 312, 313, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 314, 174,
	175, 176, 315, 316, 0, 0, 0, 177, 178, 317,
	318, 319, 0, 179, 0, 180, 1456, 0, 0, 0,
	181, 320, 0, 321, 0, 182, 183, 184, 185, 1500,
	323, 0, 0, 189, 0, 186, 0, 0, 187, 324,
	188, 325, 326, 327, 328, 329, 0, 330, 0, 0,
	190, 191, 192, 0, 193, 194, 195, 0, 197, 196,
	0, 331, 0, 198, 0, 0, 199, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 332, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 333, 211, 334, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 335,
	0, 217, 0, 336, 218, 219, 220, 221, 222, 0,
	223, 337, 224, 338, 225, 1455, 226, 227, 228, 229,
	230, 339, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 340, 248, 0, 252, 253, 254, 255, 0,
	257, 341, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 342, 343, 263, 0, 269, 264, 265, 251,
	266, 268, 344, 267, 345, 0, 270, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 346, 347, 348, 0,
	0, 278, 279, 349, 350, 0, 280, 281, 282, 283,
	0, 1504, 284, 285, 286, 287, 0, 288, 0, 351,
	289, 290, 291, 352, 353, 140, 0, 292, 0, 0,
	0, 0, 293, 294, 295, 296, 297, 0, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 298,
	0, 1238, 0, 0, 146, 147, 148, 299, 300, 301,
	302, 149, 303, 304, 0, 150, 305, 306, 151, 152,
	0, 0, 307, 308, 309, 0, 153, 310, 0, 0,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 0, 163, 161, 162, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 356, 166, 311, 167, 312, 313,
	0, 168, 0, 169, 0, 170, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 314, 174, 175, 176, 315,
	316, 0, 0, 0, 177, 178, 317, 318, 319, 0,
	179, 0, 180, 0, 0, 0, 0, 181, 320, 0,
	321, 0, 182, 183, 184, 185, 322, 323, 0, 0,
	189, 0, 186, 0, 0, 187, 324, 188, 325, 326,
	327, 328, 329, 0, 330, 0, 0, 190, 191, 192,
	0, 193, 194, 195, 0, 197, 196, 0, 331, 0,
	198, 0, 0, 199, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 332, 205, 0, 207, 208, 210, 209,
	0, 0, 0, 333, 211, 334, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 335, 0, 217, 0,
	336, 218, 219, 220, 221, 222, 0, 223, 337, 224,
	338, 225, 0, 226, 227, 228, 229, 230, 339, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 0, 246, 247, 340,
	248, 0, 252, 253, 254, 255, 0, 257, 341, 256,
	258, 259, 0, 260, 249, 250, 261, 0, 262, 342,
	343, 263, 0, 269, 264, 265, 251, 266, 268, 344,
	267, 345, 0, 270, 0, 271, 272, 273, 274, 275,
	276, 277, 0, 346, 347, 348, 0, 0, 278, 279,
	349, 350, 0, 280, 281, 282, 283, 0, 0, 284,
	285, 286, 287, 0, 288, 0, 351, 289, 290, 291,
	352, 353, 140, 0, 292, 0, 0, 0, 0, 293,
	294, 295, 296, 297, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 298, 0, 0, 0,
	0, 146, 147, 148, 299, 300, 301, 302, 149, 303,
	304, 0, 150, 305, 306, 151, 152, 0, 0, 307,
	308, 309, 0, 153, 310, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 163,
	161, 162, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 356, 166, 311, 167, 312, 313, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 314, 174, 175, 176, 315, 316, 0, 0,
	0, 177, 178, 317, 318, 319, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 320, 0, 321, 0, 182,
	183, 184, 185, 322, 323, 0, 0, 189, 0, 186,
	0, 0, 187, 324, 188, 325, 326, 327, 328, 329,
	0, 330, 0, 0, 190, 191, 192, 0, 193, 194,
	195, 0, 197, 196, 0, 331, 0, 198, 0, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	333, 211, 334, 212, 213, 0, 214, 0, 631, 215,
	0, 0, 216, 335, 0, 217, 0, 336, 218, 219,
	220, 221, 222, 0, 223, 337, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 339, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 340, 248, 0, 252,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 342, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 344, 267, 345, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 347, 348, 0, 0, 278, 279, 349, 350, 0,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	0, 288, 0, 351, 289, 290, 291, 352, 353, 140,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 296,
	297, 0, 0, 0, 0, 143, 144, 1167, 145, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 146, 147,
	148, 299, 300, 301, 302, 149, 303, 304, 0, 150,
	305, 306, 151, 152, 0, 0, 307, 308, 309, 0,
	153, 310, 0, 0, 0, 154, 155, 156, 0, 157,
	0, 158, 159, 160, 0, 0, 163, 161, 162, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 356, 166,
	311, 167, 312, 313, 0, 168, 0, 169, 0, 170,
	0, 0, 171, 172, 0, 173, 0, 0, 0, 314,
	174, 175, 176, 315, 316, 0, 0, 0, 177, 178,
	317, 318, 319, 0, 179, 0, 180, 0, 0, 0,
	0, 181, 320, 0, 321, 0, 182, 183, 184, 185,
	322, 323, 0, 0, 189, 0, 186, 0, 0, 187,
	324, 188, 325, 326, 327, 328, 329, 0, 330, 0,
	0, 190, 191, 192, 0, 193, 194, 195, 0, 197,
	196, 0, 331, 0, 198, 0, 0, 199, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 332, 205, 0,
	207, 208, 210, 209, 0, 0, 0, 333, 211, 334,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	335, 0, 217, 0, 336, 218, 219, 220, 221, 222,
	0, 223, 337, 224, 338, 225, 0, 226, 227, 228,
	229, 230, 339, 231, 232, 0, 233, 234, 235, 236,
	237, 239, 240, 238, 241, 242, 243, 244, 0, 245,
	0, 246, 247, 340, 248, 0, 252, 253, 254, 255,
	0, 257, 341, 256, 258, 259, 0, 260, 249, 250,
	261, 0, 262, 342, 343, 263, 0, 269, 264, 265,
	251, 266, 268, 344, 267, 345, 0, 270, 0, 271,
	272, 273, 274, 275, 276, 277, 0, 346, 347, 348,
	0, 0, 278, 279, 349, 350, 0, 280, 281, 282,
	283, 0, 0, 284, 285, 286, 287, 0, 288, 0,
	351, 289, 290, 291, 352, 353, 140, 0, 292, 0,
	0, 0, 0, 293, 294, 295, 296, 297, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	298, 0, 0, 0, 0, 146, 147, 148, 299, 300,
	301, 302, 149, 303, 304, 0, 150, 305, 306, 151,
	152, 0, 0, 307, 308, 309, 0, 153, 310, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 163, 161, 162, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 356, 166, 311, 167, 312,
	313, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 314, 174, 175, 176,
	315, 316, 0, 0, 0, 177, 178, 317, 318, 319,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 320,
	0, 321, 0, 182, 183, 184, 185, 878, 323, 0,
	0, 189, 0, 186, 0, 0, 187, 324, 188, 325,
	326, 327, 328, 329, 0, 330, 0, 0, 190, 191,
	192, 0, 193, 194, 195, 0, 197, 196, 0, 331,
	0, 198, 0, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 333, 211, 334, 212, 213, 0,
	214, 0, 631, 215, 0, 0, 216, 335, 0, 217,
	0, 336, 218, 219, 220, 221, 222, 0, 223, 337,
	224, 338, 225, 0, 226, 227, 228, 229, 230, 339,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	340, 248, 0, 252, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	342, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	344, 267, 345, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 347, 348, 0, 0, 278,
	279, 349, 350, 0, 280, 281, 282, 283, 0, 0,
	284, 285, 286, 287, 0, 288, 0, 351, 289, 290,
	291, 352, 353, 140, 0, 292, 0, 0, 0, 0,
	293, 294, 295, 296, 297, 0, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 146, 147, 148, 299, 300, 301, 302, 149,
	303, 304, 0, 150, 305, 306, 151, 152, 0, 0,
	307, 308, 309, 0, 153, 310, 0, 0, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 0,
	163, 161, 162, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 356, 166, 311, 167, 312, 313, 0, 168,
	0, 169, 0, 170, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 314, 174, 175, 176, 315, 316, 0,
	0, 0, 177, 178, 317, 318, 319, 0, 179, 0,
	180, 0, 0, 0, 0, 181, 320, 0, 321, 0,
	182, 183, 184, 185, 872, 323, 0, 0, 189, 0,
	186, 0, 0, 187, 324, 188, 325, 326, 327, 328,
	329, 0, 330, 0, 0, 190, 191, 192, 0, 193,
	194, 195, 0, 197, 196, 0, 331, 0, 198, 0,
	0, 199, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 332, 205, 0, 207, 208, 210, 209, 0, 0,
	0, 333, 211, 334, 212, 213, 0, 214, 0, 631,
	215, 0, 0, 216, 335, 0, 217, 0, 336, 218,
	219, 220, 221, 222, 0, 223, 337, 224, 338, 225,
	0, 226, 227, 228, 229, 230, 339, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 0, 246, 247, 340, 248, 0,
	252, 253, 254, 255, 0, 257, 341, 256, 258, 259,
	0, 260, 249, 250, 261, 0, 262, 342, 343, 263,
	0, 269, 264, 265, 251, 266, 268, 344, 267, 345,
	0, 270, 0, 271, 272, 273, 274, 275, 276, 277,
	0, 346, 347, 348, 0, 0, 278, 279, 349, 350,
	0, 280, 281, 282, 283, 0, 0, 284, 285, 286,
	287, 0, 288, 0, 351, 289, 290, 291, 352, 353,
	140, 0, 292, 0, 0, 0, 0, 293, 294, 295,
	296, 297, 0, 0, 0, 0, 143, 144, 648, 145,
	0, 0, 0, 0, 298, 0, 0, 0, 0, 146,
	147, 148, 299, 300, 301, 302, 149, 303, 304, 0,
	150, 305, 306, 151, 152, 0, 0, 307, 308, 309,
	0, 153, 310, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 163, 161, 162,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 356,
	166, 311, 167, 312, 313, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	314, 174, 175, 176, 315, 316, 0, 0, 0, 177,
	178, 317, 318, 319, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 320, 0, 321, 0, 182, 183, 184,
	185, 322, 323, 0, 0, 189, 0, 186, 0, 0,
	187, 324, 188, 325, 326, 327, 328, 329, 0, 330,
	0, 0, 190, 191, 192, 0, 193, 194, 195, 0,
	197, 196, 0, 331, 0, 198, 0, 0, 199, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 332, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 333, 211,
	334, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 335, 0, 217, 0, 336, 218, 219, 220, 221,
	222, 0, 223, 337, 224, 338, 225, 0, 226, 227,
	228, 229, 230, 339, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 340, 248, 0, 252, 253, 254,
	255, 0, 257, 341, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 342, 343, 263, 0, 269, 264,
	265, 251, 266, 268, 344, 267, 345, 0, 270, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 346, 347,
	348, 0, 0, 278, 279, 349, 350, 0, 280, 281,
	282, 283, 0, 0, 284, 285, 286, 287, 0, 288,
	0, 351, 289, 290, 291, 352, 353, 140, 0, 292,
	0, 0, 0, 0, 293, 294, 295, 296, 297, 0,
	0, 0, 0, 143, 144, 359, 145, 0, 0, 0,
	0, 298, 0, 0, 0, 0, 146, 147, 148, 299,
	300, 301, 302, 149, 303, 304, 0, 150, 305, 306,
	151, 152, 0, 0, 307, 308, 309, 0, 153, 310,
	0, 0, 0, 154, 155, 156, 0, 157, 0, 158,
	159, 160, 0, 0, 163, 161, 162, 0, 0, 0,
	0, 0, 0, 0, 164, 165, 356, 166, 311, 167,
	312, 313, 0, 168, 0, 169, 0, 170, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 314, 174, 175,
	176, 315, 316, 0, 0, 0, 177, 178, 317, 318,
	319, 0, 179, 0, 180, 0, 0, 0, 0, 181,
	320, 0, 321, 0, 182, 183, 184, 185, 322, 323,
	0, 0, 189, 0, 186, 0, 0, 187, 324, 188,
	325, 326, 327, 328, 329, 0, 330, 0, 0, 190,
	191, 192, 0, 193, 194, 195, 0, 197, 196, 0,
	331, 0, 198, 0, 0, 199, 200, 0, 0, 201,
	0, 202, 203, 204, 206, 332, 205, 0, 207, 208,
	210, 209, 0, 0, 0, 333, 211, 334, 212, 213,
	0, 214, 0, 0, 215, 0, 0, 216, 335, 0,
	217, 0, 336, 218, 219, 220, 221, 222, 0, 223,
	337, 224, 338, 358, 0, 226, 227, 228, 229, 230,
	339, 231, 232, 0, 233, 234, 235, 236, 237, 239,
	240, 238, 241, 242, 243, 244, 0, 245, 0, 246,
	247, 340, 248, 0, 252, 253, 254, 255, 0, 257,
	341, 256, 258, 259, 0, 260, 249, 250, 261, 0,
	262, 342, 343, 263, 0, 269, 264, 265, 251, 266,
	268, 344, 267, 345, 0, 270, 0, 271, 272, 273,
	274, 275, 276, 277, 0, 346, 347, 348, 0, 0,
	278, 279, 349, 350, 0, 280, 281, 282, 283, 0,
	0, 284, 285, 286, 287, 0, 288, 0, 351, 289,
	290, 291, 352, 353, 140, 0, 292, 0, 0, 0,
	0, 293, 294, 295, 296, 297, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 146, 147, 148, 299, 300, 301, 302,
	149, 303, 304, 0, 150, 305, 306, 151, 152, 0,
	0, 307, 308, 309, 0, 153, 310, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 163, 161, 162, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 356, 166, 311, 167, 312, 313, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 314, 174, 175, 176, 315, 316,
	0, 0, 0, 177, 178, 317, 318, 319, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 320, 0, 321,
	0, 182, 183, 184, 185, 322, 323, 0, 0, 189,
	0, 186, 0, 0, 187, 324, 188, 325, 326, 327,
	328, 329, 0, 330, 0, 0, 190, 191, 192, 0,
	193, 194, 195, 0, 197, 196, 0, 331, 0, 198,
	0, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 333, 211, 334, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 0, 217, 0, 336,
	218, 219, 220, 221, 222, 0, 223, 337, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 339, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 340, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 342, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 344, 267,
	345, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 347, 348, 0, 0, 278, 279, 349,
	350, 0, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 0, 288, 0, 351, 289, 290, 291, 352,
	353, 140, 0, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 0, 0, 0, 0, 143, 144, 0,
	145, 0, 0, 0, 0, 298, 0, 0, 0, 0,
	146, 147, 148, 299, 300, 301, 302, 149, 303, 304,
	0, 150, 305, 306, 151, 152, 0, 0, 307, 308,
	309, 0, 153, 310, 0, 0, 0, 154, 155, 156,
	0, 157, 0, 158, 159, 160, 0, 0, 163, 161,
	162, 0, 0, 0, 0, 0, 0, 0, 164, 165,
	356, 166, 311, 167, 312, 313, 0, 168, 0, 169,
	0, 170, 0, 0, 171, 172, 0, 173, 0, 0,
	0, 314, 174, 175, 176, 315, 316, 0, 0, 0,
	177, 178, 317, 318, 319, 0, 179, 0, 180, 0,
	0, 0, 0, 181, 320, 0, 321, 0, 182, 183,
	184, 185, 1752, 323, 0, 0, 189, 0, 186, 0,
	0, 187, 324, 188, 325, 326, 327, 328, 329, 0,
	330, 0, 0, 190, 191, 192, 0, 193, 194, 195,
	0, 197, 196, 0, 331, 0, 198, 0, 0, 199,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 332,
	205, 0, 207, 208, 210, 209, 0, 0, 0, 333,
	211, 334, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 335, 0, 217, 0, 336, 218, 219, 220,
	221, 222, 0, 223, 337, 224, 338, 225, 0, 226,
	227, 228, 229, 230, 339, 231, 232, 0, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	0, 245, 0, 246, 247, 340, 248, 0, 252, 253,
	254, 255, 0, 257, 341, 256, 258, 259, 0, 260,
	249, 250, 261, 0, 262, 342, 343, 263, 0, 269,
	264, 265, 251, 266, 268, 344, 267, 345, 0, 270,
	0, 271, 272, 273, 274, 275, 276, 277, 0, 346,
	347, 348, 0, 0, 278, 279, 349, 350, 0, 280,
	281, 282, 283, 0, 0, 284, 285, 286, 287, 0,
	288, 0, 351, 289, 290, 291, 352, 353, 140, 0,
	292, 0, 0, 0, 0, 293, 294, 295, 296, 297,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 146, 147, 148,
	299, 300, 301, 302, 149, 303, 304, 0, 150, 305,
	306, 151, 152, 0, 0, 307, 308, 309, 0, 153,
	310, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 163, 161, 162, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 356, 166, 311,
	167, 312, 313, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 314, 174,
	175, 176, 315, 316, 0, 0, 0, 177, 178, 317,
	318, 319, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 320, 0, 321, 0, 182, 183, 184, 185, 1750,
	323, 0, 0, 189, 0, 186, 0, 0, 187, 324,
	188, 325, 326, 327, 328, 329, 0, 330, 0, 0,
	190, 191, 192, 0, 193, 194, 195, 0, 197, 196,
	0, 331, 0, 198, 0, 0, 199, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 332, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 333, 211, 334, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 335,
	0, 217, 0, 336, 218, 219, 220, 221, 222, 0,
	223, 337, 224, 338, 225, 0, 226, 227, 228, 229,
	230, 339, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 340, 248, 0, 252, 253, 254, 255, 0,
	257, 341, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 342, 343, 263, 0, 269, 264, 265, 251,
	266, 268, 344, 267, 345, 0, 270, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 346, 347, 348, 0,
	0, 278, 279, 349, 350, 0, 280, 281, 282, 283,
	0, 0, 284, 285, 286, 287, 0, 288, 0, 351,
	289, 290, 291, 352, 353, 140, 0, 292, 0, 0,
	0, 0, 293, 294, 295, 296, 297, 0, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 298,
	0, 0, 0, 0, 146, 147, 148, 299, 300, 301,
	302, 149, 303, 304, 0, 150, 305, 306, 151, 152,
	0, 0, 307, 308, 309, 0, 153, 310, 0, 0,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 0, 163, 161, 162, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 356, 166, 311, 167, 312, 313,
	0, 168, 0, 169, 0, 170, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 314, 174, 175, 176, 315,
	316, 0, 0, 0, 177, 178, 317, 318, 319, 0,
	179, 0, 180, 0, 0, 0, 0, 181, 320, 0,
	321, 0, 182, 183, 184, 185, 1745, 323, 0, 0,
	189, 0, 186, 0, 0, 187, 324, 188, 325, 326,
	327, 328, 329, 0, 330, 0, 0, 190, 191, 192,
	0, 193, 194, 195, 0, 197, 196, 0, 331, 0,
	198, 0, 0, 199, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 332, 205, 0, 207, 208, 210, 209,
	0, 0, 0, 333, 211, 334, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 335, 0, 217, 0,
	336, 218, 219, 220, 221, 222, 0, 223, 337, 224,
	338, 225, 0, 226, 227, 228, 229, 230, 339, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 0, 246, 247, 340,
	248, 0, 252, 253, 254, 255, 0, 257, 341, 256,
	258, 259, 0, 260, 249, 250, 261, 0, 262, 342,
	343, 263, 0, 269, 264, 265, 251, 266, 268, 344,
	267, 345, 0, 270, 0, 271, 272, 273, 274, 275,
	276, 277, 0, 346, 347, 348, 0, 0, 278, 279,
	349, 350, 0, 280, 281, 282, 283, 0, 0, 284,
	285, 286, 287, 0, 288, 0, 351, 289, 290, 291,
	352, 353, 140, 0, 292, 0, 0, 0, 0, 293,
	294, 295, 296, 297, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 298, 0, 0, 0,
	0, 146, 147, 148, 299, 300, 301, 302, 149, 303,
	304, 0, 150, 305, 306, 151, 152, 0, 0, 307,
	308, 309, 0, 153, 310, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 163,
	161, 162, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 356, 166, 311, 167, 312, 313, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 314, 174, 175, 176, 315, 316, 0, 0,
	0, 177, 178, 317, 318, 319, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 320, 0, 321, 0, 182,
	183, 184, 185, 322, 323, 0, 0, 189, 0, 186,
	0, 0, 187, 324, 188, 325, 326, 327, 328, 329,
	0, 330, 0, 0, 190, 191, 192, 0, 193, 194,
	195, 0, 197, 196, 0, 331, 0, 198, 0, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	333, 211, 334, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 0, 217, 0, 336, 218, 219,
	220, 221, 222, 0, 223, 337, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 339, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 340, 248, 0, 505,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 342, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 344, 267, 345, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 347, 348, 0, 0, 278, 279, 349, 350, 0,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	0, 288, 0, 351, 289, 290, 291, 352, 353, 140,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 296,
	297, 0, 0, 0, 0, 143, 144, 0, 145, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 146, 147,
	148, 299, 300, 301, 302, 149, 303, 304, 0, 150,
	305, 306, 151, 152, 0, 0, 307, 308, 309, 0,
	153, 310, 0, 0, 0, 154, 155, 156, 0, 157,
	0, 158, 159, 160, 0, 0, 163, 161, 162, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 356, 166,
	311, 167, 312, 313, 0, 168, 0, 169, 0, 170,
	0, 0, 171, 172, 0, 173, 0, 0, 0, 314,
	174, 175, 176, 315, 316, 0, 0, 0, 177, 178,
	317, 318, 319, 0, 179, 0, 180, 0, 0, 0,
	0, 181, 320, 0, 321, 0, 182, 183, 184, 185,
	1132, 323, 0, 0, 189, 0, 186, 0, 0, 187,
	324, 188, 325, 326, 327, 328, 329, 0, 330, 0,
	0, 190, 191, 192, 0, 193, 194, 195, 0, 197,
	196, 0, 331, 0, 198, 0, 0, 199, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 332, 205, 0,
	207, 208, 210, 209, 0, 0, 0, 333, 211, 334,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	335, 0, 217, 0, 336, 218, 219, 220, 221, 222,
	0, 223, 337, 224, 338, 225, 0, 226, 227, 228,
	229, 230, 339, 231, 232, 0, 233, 234, 235, 236,
	237, 239, 240, 238, 241, 242, 243, 244, 0, 245,
	0, 246, 247, 340, 248, 0, 252, 253, 254, 255,
	0, 257, 341, 256, 258, 259, 0, 260, 249, 250,
	261, 0, 262, 342, 343, 263, 0, 269, 264, 265,
	251, 266, 268, 344, 267, 345, 0, 270, 0, 271,
	272, 273, 274, 275, 276, 277, 0, 346, 347, 348,
	0, 0, 278, 279, 349, 350, 0, 280, 281, 282,
	283, 0, 0, 284, 285, 286, 287, 0, 288, 0,
	351, 289, 290, 291, 352, 353, 140, 0, 292, 0,
	0, 0, 0, 293, 294, 295, 296, 297, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	298, 0, 930, 0, 0, 146, 147, 148, 299, 300,
	301, 302, 149, 303, 304, 0, 150, 305, 306, 151,
	152, 0, 0, 307, 308, 309, 0, 153, 310, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 163, 161, 162, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 356, 166, 311, 167, 312,
	313, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 314, 174, 175, 176,
	315, 316, 0, 0, 0, 177, 178, 317, 318, 319,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 320,
	0, 321, 0, 182, 183, 184, 185, 322, 323, 0,
	0, 189, 0, 186, 0, 0, 187, 324, 188, 325,
	326, 327, 328, 329, 0, 330, 0, 0, 190, 191,
	192, 0, 193, 194, 195, 0, 197, 196, 0, 331,
	0, 198, 0, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 333, 211, 334, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 335, 0, 217,
	0, 336, 218, 219, 220, 221, 222, 0, 223, 337,
	224, 338, 225, 0, 226, 227, 228, 229, 230, 339,
	231, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	340, 248, 0, 252, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 0, 0, 249, 250, 261, 0, 262,
	342, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	344, 267, 345, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 347, 348, 0, 0, 278,
	279, 349, 350, 0, 280, 281, 282, 283, 0, 0,
	284, 285, 286, 287, 0, 288, 0, 351, 289, 290,
	291, 352, 353, 140, 0, 292, 0, 0, 0, 0,
	293, 294, 295, 296, 297, 0, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 146, 147, 148, 299, 300, 301, 302, 149,
	303, 304, 0, 150, 305, 306, 151, 152, 0, 0,
	307, 308, 309, 0, 153, 310, 0, 0, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 0,
	163, 161, 162, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 356, 166, 311, 167, 312, 313, 0, 168,
	0, 169, 0, 170, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 314, 174, 175, 176, 315, 316, 0,
	0, 0, 177, 178, 317, 318, 319, 0, 179, 0,
	180, 0, 0, 0, 0, 181, 320, 0, 321, 0,
	182, 183, 184, 185, 875, 323, 0, 0, 189, 0,
	186, 0, 0, 187, 324, 188, 325, 326, 327, 328,
	329, 0, 330, 0, 0, 190, 191, 192, 0, 193,
	194, 195, 0, 197, 196, 0, 331, 0, 198, 0,
	0, 199, 200, 0, 0, 201, 0, 202, 203, 204,
	206, 332, 205, 0, 207, 208, 210, 209, 0, 0,
	0, 333, 211, 334, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 335, 0, 217, 0, 336, 218,
	219, 220, 221, 222, 0, 223, 337, 224, 338, 225,
	0, 226, 227, 228, 229, 230, 339, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 0, 246, 247, 340, 248, 0,
	252, 253, 254, 255, 0, 257, 341, 256, 258, 259,
	0, 260, 249, 250, 261, 0, 262, 342, 343, 263,
	0, 269, 264, 265, 251, 266, 268, 344, 267, 345,
	0, 270, 0, 271, 272, 273, 274, 275, 276, 277,
	0, 346, 347, 348, 0, 0, 278, 279, 349, 350,
	0, 280, 281, 282, 283, 0, 0, 284, 285, 286,
	287, 0, 288, 0, 351, 289, 290, 291, 352, 353,
	140, 0, 292, 0, 0, 0, 0, 293, 294, 295,
	296, 297, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 298, 0, 0, 0, 0, 146,
	147, 148, 299, 300, 301, 302, 149, 303, 304, 0,
	150, 305, 306, 151, 152, 0, 0, 307, 308, 309,
	0, 153, 310, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 163, 161, 162,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 356,
	166, 311, 167, 312, 313, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	314, 174, 175, 176, 315, 316, 0, 0, 0, 177,
	178, 317, 318, 319, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 320, 0, 321, 0, 182, 183, 184,
	185, 820, 323, 0, 0, 189, 0, 186, 0, 0,
	187, 324, 188, 325, 326, 327, 328, 329, 0, 330,
	0, 0, 190, 191, 192, 0, 193, 194, 195, 0,
	197, 196, 0, 331, 0, 198, 0, 0, 199, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 332, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 333, 211,
	334, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 335, 0, 217, 0, 336, 218, 219, 220, 221,
	222, 0, 223, 337, 224, 338, 225, 0, 226, 227,
	228, 229, 230, 339, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 340, 248, 0, 252, 253, 254,
	255, 0, 257, 341, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 342, 343, 263, 0, 269, 264,
	265, 251, 266, 268, 344, 267, 345, 0, 270, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 346, 347,
	348, 0, 0, 278, 279, 349, 350, 0, 280, 281,
	282, 283, 0, 0, 284, 285, 286, 287, 0, 288,
	0, 351, 289, 290, 291, 352, 353, 140, 0, 292,
	0, 0, 0, 0, 293, 294, 295, 296, 297, 0,
	0, 0, 0, 143, 144, 0, 145, 0, 0, 0,
	0, 298, 0, 0, 0, 0, 146, 147, 148, 299,
	300, 301, 302, 149, 303, 304, 0, 150, 305, 306,
	151, 152, 0, 0, 307, 308, 309, 0, 153, 310,
	0, 0, 0, 154, 155, 156, 0, 157, 0, 158,
	159, 160, 0, 0, 163, 161, 162, 0, 0, 0,
	0, 0, 0, 0, 164, 165, 356, 166, 311, 167,
	312, 313, 0, 168, 0, 169, 0, 170, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 314, 174, 175,
	176, 315, 316, 0, 0, 0, 177, 178, 317, 318,
	319, 0, 179, 0, 180, 0, 0, 0, 0, 181,
	320, 0, 321, 0, 182, 183, 184, 185, 818, 323,
	0, 0, 189, 0, 186, 0, 0, 187, 324, 188,
	325, 326, 327, 328, 329, 0, 330, 0, 0, 190,
	191, 192, 0, 193, 194, 195, 0, 197, 196, 0,
	331, 0, 198, 0, 0, 199, 200, 0, 0, 201,
	0, 202, 203, 204, 206, 332, 205, 0, 207, 208,
	210, 209, 0, 0, 0, 333, 211, 334, 212, 213,
	0, 214, 0, 0, 215, 0, 0, 216, 335, 0,
	217, 0, 336, 218, 219, 220, 221, 222, 0, 223,
	337, 224, 338, 225, 0, 226, 227, 228, 229, 230,
	339, 231, 232, 0, 233, 234, 235, 236, 237, 239,
	240, 238, 241, 242, 243, 244, 0, 245, 0, 246,
	247, 340, 248, 0, 252, 253, 254, 255, 0, 257,
	341, 256, 258, 259, 0, 260, 249, 250, 261, 0,
	262, 342, 343, 263, 0, 269, 264, 265, 251, 266,
	268, 344, 267, 345, 0, 270, 0, 271, 272, 273,
	274, 275, 276, 277, 0, 346, 347, 348, 0, 0,
	278, 279, 349, 350, 0, 280, 281, 282, 283, 0,
	0, 284, 285, 286, 287, 0, 288, 0, 351, 289,
	290, 291, 352, 353, 140, 0, 292, 0, 0, 0,
	0, 293, 294, 295, 296, 297, 0, 0, 0, 0,
	143, 144, 0, 145, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 146, 147, 148, 299, 300, 301, 302,
	149, 303, 304, 0, 150, 305, 306, 151, 152, 0,
	0, 307, 308, 309, 0, 153, 310, 0, 0, 0,
	154, 155, 156, 0, 157, 0, 158, 159, 160, 0,
	0, 163, 161, 162, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 356, 166, 311, 167, 312, 313, 0,
	168, 0, 169, 0, 170, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 314, 174, 175, 176, 315, 316,
	0, 0, 0, 177, 178, 317, 318, 319, 0, 179,
	0, 180, 0, 0, 0, 0, 181, 320, 0, 321,
	0, 182, 183, 184, 185, 814, 323, 0, 0, 189,
	0, 186, 0, 0, 187, 324, 188, 325, 326, 327,
	328, 329, 0, 330, 0, 0, 190, 191, 192, 0,
	193, 194, 195, 0, 197, 196, 0, 331, 0, 198,
	0, 0, 199, 200, 0, 0, 201, 0, 202, 203,
	204, 206, 332, 205, 0, 207, 208, 210, 209, 0,
	0, 0, 333, 211, 334, 212, 213, 0, 214, 0,
	0, 215, 0, 0, 216, 335, 0, 217, 0, 336,
	218, 219, 220, 221, 222, 0, 223, 337, 224, 338,
	225, 0, 226, 227, 228, 229, 230, 339, 231, 232,
	0, 233, 234, 235, 236, 237, 239, 240, 238, 241,
	242, 243, 244, 0, 245, 0, 246, 247, 340, 248,
	0, 252, 253, 254, 255, 0, 257, 341, 256, 258,
	259, 0, 260, 249, 250, 261, 0, 262, 342, 343,
	263, 0, 269, 264, 265, 251, 266, 268, 344, 267,
	345, 0, 270, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 346, 347, 348, 0, 0, 278, 279, 349,
	350, 0, 280, 281, 282, 283, 0, 0, 284, 285,
	286, 287, 0, 288, 0, 351, 289, 290, 291, 352,
	353, 140, 0, 292, 0, 0, 0, 0, 293, 294,
	295, 296, 297, 0, 0, 0, 0, 143, 144, 0,
	145, 0, 0, 0, 0, 298, 0, 0, 0, 0,
	146, 147, 148, 299, 300, 301, 302, 149, 303, 304,
	0, 150, 305, 306, 151, 152, 0, 0, 307, 308,
	309, 0, 153, 310, 0, 0, 0, 154, 155, 156,
	0, 157, 0, 158, 159, 160, 0, 0, 163, 161,
	162, 0, 0, 0, 0, 0, 0, 0, 164, 165,
	356, 166, 311, 167, 312, 313, 0, 168, 0, 169,
	0, 170, 0, 0, 171, 172, 0, 173, 0, 0,
	0, 314, 174, 175, 176, 315, 316, 0, 0, 0,
	177, 178, 317, 318, 319, 0, 179, 0, 180, 0,
	0, 0, 0, 181, 320, 0, 321, 0, 182, 183,
	184, 185, 812, 323, 0, 0, 189, 0, 186, 0,
	0, 187, 324, 188, 325, 326, 327, 328, 329, 0,
	330, 0, 0, 190, 191, 192, 0, 193, 194, 195,
	0, 197, 196, 0, 331, 0, 198, 0, 0, 199,
	200, 0, 0, 201, 0, 202, 203, 204, 206, 332,
	205, 0, 207, 208, 210, 209, 0, 0, 0, 333,
	211, 334, 212, 213, 0, 214, 0, 0, 215, 0,
	0, 216, 335, 0, 217, 0, 336, 218, 219, 220,
	221, 222, 0, 223, 337, 224, 338, 225, 0, 226,
	227, 228, 229, 230, 339, 231, 232, 0, 233, 234,
	235, 236, 237, 239, 240, 238, 241, 242, 243, 244,
	0, 245, 0, 246, 247, 340, 248, 0, 252, 253,
	254, 255, 0, 257, 341, 256, 258, 259, 0, 260,
	249, 250, 261, 0, 262, 342, 343, 263, 0, 269,
	264, 265, 251, 266, 268, 344, 267, 345, 0, 270,
	0, 271, 272, 273, 274, 275, 276, 277, 0, 346,
	347, 348, 0, 0, 278, 279, 349, 350, 0, 280,
	281, 282, 283, 0, 0, 284, 285, 286, 287, 0,
	288, 0, 351, 289, 290, 291, 352, 353, 140, 0,
	292, 0, 0, 0, 0, 293, 294, 295, 296, 297,
	0, 0, 0, 0, 143, 144, 0, 145, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 146, 147, 148,
	299, 300, 301, 302, 149, 303, 304, 0, 150, 305,
	306, 151, 152, 0, 0, 307, 308, 309, 0, 153,
	310, 0, 0, 0, 154, 155, 156, 0, 157, 0,
	158, 159, 160, 0, 0, 163, 161, 162, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 356, 166, 311,
	167, 312, 313, 0, 168, 0, 169, 0, 170, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 314, 174,
	175, 176, 315, 316, 0, 0, 0, 177, 178, 317,
	318, 319, 0, 179, 0, 180, 0, 0, 0, 0,
	181, 320, 0, 321, 0, 182, 183, 184, 185, 809,
	323, 0, 0, 189, 0, 186, 0, 0, 187, 324,
	188, 325, 326, 327, 328, 329, 0, 330, 0, 0,
	190, 191, 192, 0, 193, 194, 195, 0, 197, 196,
	0, 331, 0, 198, 0, 0, 199, 200, 0, 0,
	201, 0, 202, 203, 204, 206, 332, 205, 0, 207,
	208, 210, 209, 0, 0, 0, 333, 211, 334, 212,
	213, 0, 214, 0, 0, 215, 0, 0, 216, 335,
	0, 217, 0, 336, 218, 219, 220, 221, 222, 0,
	223, 337, 224, 338, 225, 0, 226, 227, 228, 229,
	230, 339, 231, 232, 0, 233, 234, 235, 236, 237,
	239, 240, 238, 241, 242, 243, 244, 0, 245, 0,
	246, 247, 340, 248, 0, 252, 253, 254, 255, 0,
	257, 341, 256, 258, 259, 0, 260, 249, 250, 261,
	0, 262, 342, 343, 263, 0, 269, 264, 265, 251,
	266, 268, 344, 267, 345, 0, 270, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 346, 347, 348, 0,
	0, 278, 279, 349, 350, 0, 280, 281, 282, 283,
	0, 0, 284, 285, 286, 287, 0, 288, 0, 351,
	289, 290, 291, 352, 353, 140, 0, 292, 0, 0,
	0, 0, 293, 294, 295, 296, 297, 0, 0, 0,
	0, 143, 144, 0, 145, 0, 0, 0, 0, 298,
	0, 0, 0, 0, 146, 147, 148, 299, 300, 301,
	302, 149, 303, 304, 0, 150, 305, 306, 151, 152,
	0, 0, 307, 308, 309, 0, 153, 310, 0, 0,
	0, 154, 155, 156, 0, 157, 0, 158, 159, 160,
	0, 0, 163, 161, 162, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 356, 166, 311, 167, 312, 313,
	0, 168, 0, 169, 0, 170, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 314, 174, 175, 176, 315,
	316, 0, 0, 0, 177, 178, 317, 318, 319, 0,
	179, 0, 180, 0, 0, 0, 0, 181, 320, 0,
	321, 0, 182, 183, 184, 185, 805, 323, 0, 0,
	189, 0, 186, 0, 0, 187, 324, 188, 325, 326,
	327, 328, 329, 0, 330, 0, 0, 190, 191, 192,
	0, 193, 194, 195, 0, 197, 196, 0, 331, 0,
	198, 0, 0, 199, 200, 0, 0, 201, 0, 202,
	203, 204, 206, 332, 205, 0, 207, 208, 210, 209,
	0, 0, 0, 333, 211, 334, 212, 213, 0, 214,
	0, 0, 215, 0, 0, 216, 335, 0, 217, 0,
	336, 218, 219, 220, 221, 222, 0, 223, 337, 224,
	338, 225, 0, 226, 227, 228, 229, 230, 339, 231,
	232, 0, 233, 234, 235, 236, 237, 239, 240, 238,
	241, 242, 243, 244, 0, 245, 0, 246, 247, 340,
	248, 0, 252, 253, 254, 255, 0, 257, 341, 256,
	258, 259, 0, 260, 249, 250, 261, 0, 262, 342,
	343, 263, 0, 269, 264, 265, 251, 266, 268, 344,
	267, 345, 0, 270, 0, 271, 272, 273, 274, 275,
	276, 277, 0, 346, 347, 348, 0, 0, 278, 279,
	349, 350, 0, 280, 281, 282, 283, 0, 0, 284,
	285, 286, 287, 0, 288, 0, 351, 289, 290, 291,
	352, 353, 140, 0, 292, 0, 0, 0, 0, 293,
	294, 295, 296, 297, 0, 0, 0, 0, 143, 144,
	0, 145, 0, 0, 0, 0, 298, 0, 0, 0,
	0, 146, 147, 148, 299, 300, 301, 302, 149, 303,
	304, 0, 150, 305, 306, 151, 152, 0, 0, 307,
	308, 309, 0, 153, 310, 0, 0, 0, 154, 155,
	156, 0, 157, 0, 158, 159, 160, 0, 0, 163,
	161, 162, 0, 0, 0, 0, 0, 0, 0, 164,
	165, 356, 166, 311, 167, 312, 313, 0, 168, 0,
	169, 0, 170, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 314, 174, 175, 176, 315, 316, 0, 0,
	0, 177, 178, 317, 318, 319, 0, 179, 0, 180,
	0, 0, 0, 0, 181, 320, 0, 321, 0, 182,
	183, 184, 185, 800, 323, 0, 0, 189, 0, 186,
	0, 0, 187, 324, 188, 325, 326, 327, 328, 329,
	0, 330, 0, 0, 190, 191, 192, 0, 193, 194,
	195, 0, 197, 196, 0, 331, 0, 198, 0, 0,
	199, 200, 0, 0, 201, 0, 202, 203, 204, 206,
	332, 205, 0, 207, 208, 210, 209, 0, 0, 0,
	333, 211, 334, 212, 213, 0, 214, 0, 0, 215,
	0, 0, 216, 335, 0, 217, 0, 336, 218, 219,
	220, 221, 222, 0, 223, 337, 224, 338, 225, 0,
	226, 227, 228, 229, 230, 339, 231, 232, 0, 233,
	234, 235, 236, 237, 239, 240, 238, 241, 242, 243,
	244, 0, 245, 0, 246, 247, 340, 248, 0, 252,
	253, 254, 255, 0, 257, 341, 256, 258, 259, 0,
	260, 249, 250, 261, 0, 262, 342, 343, 263, 0,
	269, 264, 265, 251, 266, 268, 344, 267, 345, 0,
	270, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	346, 347, 348, 0, 0, 278, 279, 349, 350, 0,
	280, 281, 282, 283, 0, 0, 284, 285, 286, 287,
	0, 288, 0, 351, 289, 290, 291, 352, 353, 140,
	0, 292, 0, 0, 0, 0, 293, 294, 295, 296,
	297, 0, 0, 0, 0, 143, 144, 0, 145, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 146, 147,
	148, 299, 300, 301, 302, 149, 303, 304, 0, 150,
	305, 306, 151, 152, 0, 0, 307, 308, 776, 0,
	153, 310, 0, 0, 0, 154, 155, 156, 0, 157,
	0, 158, 159, 160, 0, 0, 163, 161, 162, 0,
	0, 0, 0, 0, 0, 0, 164, 165, 356, 166,
	311, 167, 312, 313, 0, 168, 0, 169, 0, 170,
	0, 0, 171, 172, 0, 173, 0, 0, 0, 314,
	174, 175, 176, 315, 316, 0, 0, 0, 177, 178,
	317, 318, 319, 0, 179, 0, 180, 0, 0, 0,
	0, 181, 320, 0, 321, 0, 182, 183, 184, 185,
	322, 323, 0, 0, 189, 0, 186, 0, 0, 187,
	324, 188, 325, 326, 327, 328, 329, 0, 330, 0,
	0, 190, 191, 192, 0, 193, 194, 195, 0, 197,
	196, 0, 331, 0, 198, 0, 0, 199, 200, 0,
	0, 201, 0, 202, 203, 204, 206, 332, 527, 0,
	207, 208, 210, 209, 0, 0, 0, 333, 211, 334,
	212, 213, 0, 214, 0, 0, 215, 0, 0, 216,
	335, 0, 217, 0, 336, 218, 219, 220, 221, 222,
	0, 223, 337, 224, 338, 225, 0, 226, 227, 228,
	229, 230, 339, 231, 232, 0, 233, 234, 235, 236,
	237, 239, 240, 238, 241, 242, 243, 244, 0, 245,
	0, 246, 247, 340, 248, 0, 252, 253, 254, 255,
	0, 257, 341, 256, 258, 259, 0, 260, 249, 250,
	261, 0, 262, 342, 343, 263, 0, 269, 264, 265,
	251, 266, 268, 344, 267, 345, 0, 270, 0, 271,
	272, 273, 274, 275, 276, 277, 0, 523, 347, 348,
	0, 0, 278, 777, 349, 350, 0, 280, 281, 282,
	283, 0, 0, 284, 285, 286, 287, 0, 288, 0,
	351, 289, 290, 291, 352, 353, 140, 0, 292, 0,
	0, 0, 0, 293, 294, 295, 296, 297, 0, 0,
	0, 0, 143, 144, 0, 145, 0, 0, 0, 0,
	298, 0, 0, 0, 0, 146, 147, 148, 299, 300,
	301, 302, 149, 303, 304, 0, 150, 305, 306, 151,
	152, 0, 0, 307, 308, 309, 0, 153, 310, 0,
	0, 0, 154, 155, 156, 0, 157, 0, 158, 159,
	160, 0, 0, 163, 161, 162, 0, 0, 0, 0,
	0, 0, 0, 164, 165, 356, 166, 311, 167, 312,
	313, 0, 168, 0, 169, 0, 170, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 314, 174, 175, 176,
	315, 316, 0, 0, 0, 177, 178, 317, 318, 319,
	0, 179, 0, 180, 0, 0, 0, 0, 181, 320,
	0, 321, 0, 182, 183, 184, 185, 322, 323, 0,
	0, 189, 0, 186, 0, 0, 187, 324, 188, 325,
	326, 327, 328, 329, 0, 330, 0, 0, 190, 191,
	192, 0, 193, 194, 195, 0, 197, 196, 0, 331,
	0, 198, 0, 0, 199, 200, 0, 0, 201, 0,
	202, 203, 204, 206, 332, 205, 0, 207, 208, 210,
	209, 0, 0, 0, 333, 211, 334, 212, 213, 0,
	214, 0, 0, 215, 0, 0, 216, 335, 0, 217,
	0, 336, 218, 219, 220, 221, 222, 0, 223, 337,
	224, 338, 225, 0, 226, 227, 228, 229, 230, 339,
	613, 232, 0, 233, 234, 235, 236, 237, 239, 240,
	238, 241, 242, 243, 244, 0, 245, 0, 246, 247,
	340, 248, 0, 252, 253, 254, 255, 0, 257, 341,
	256, 258, 259, 0, 260, 249, 250, 261, 0, 262,
	342, 343, 263, 0, 269, 264, 265, 251, 266, 268,
	344, 267, 345, 0, 270, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 346, 347, 348, 0, 0, 278,
	279, 349, 350, 0, 280, 281, 282, 283, 0, 0,
	284, 285, 286, 287, 0, 288, 0, 351, 289, 290,
	291, 352, 353, 140, 0, 292, 0, 0, 0, 0,
	293, 294, 295, 296, 297, 0, 0, 0, 0, 143,
	144, 0, 145, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 146, 147, 148, 299, 300, 301, 302, 149,
	303, 304, 0, 150, 305, 306, 151, 152, 0, 0,
	307, 308, 309, 0, 517, 310, 0, 0, 0, 154,
	155, 156, 0, 157, 0, 158, 159, 160, 0, 0,
	163, 161, 162, 0, 0, 0, 0, 0, 0, 0,
	164, 165, 356, 166, 311, 167, 312, 313, 0, 168,
	0, 169, 0, 170, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 314, 174, 175, 176, 315, 316, 0,
	0, 0, 177, 178, 317, 318, 319, 0, 179, 0,
	180, 0, 0, 0, 0, 181, 320, 0, 321, 0,
	182, 183, 184, 185, 322, 323, 0, 0, 189, 0,
	186, 0, 0, 187, 324, 188, 325, 326, 327, 328,
	329, 0, 330, 0, 0, 190, 191, 192, 0, 193,
	194, 195, 0, 197, 196, 0, 331, 0, 198, 0,
	0, 199, 516, 0, 0, 201, 0, 202, 203, 204,
	206, 332, 527, 0, 207, 208, 210, 209, 0, 0,
	0, 333, 211, 334, 212, 213, 0, 214, 0, 0,
	215, 0, 0, 216, 335, 0, 217, 0, 336, 218,
	219, 220, 221, 222, 0, 223, 337, 224, 338, 225,
	0, 226, 227, 228, 229, 230, 339, 231, 232, 0,
	233, 234, 235, 236, 237, 239, 240, 238, 241, 242,
	243, 244, 0, 245, 0, 246, 247, 518, 248, 0,
	252, 253, 254, 255, 0, 257, 341, 256, 519, 259,
	0, 260, 249, 250, 261, 0, 262, 342, 343, 263,
	0, 269, 264, 265, 251, 266, 268, 344, 267, 345,
	0, 270, 0, 271, 272, 273, 274, 275, 276, 277,
	0, 523, 347, 348, 0, 0, 278, 521, 349, 350,
	0, 280, 281, 282, 283, 0, 0, 284, 285, 286,
	287, 0, 288, 0, 351, 289, 290, 291, 352, 353,
	140, 0, 292, 0, 0, 0, 0, 293, 294, 295,
	296, 297, 0, 0, 0, 0, 143, 144, 0, 145,
	0, 0, 0, 0, 298, 0, 0, 0, 0, 146,
	147, 148, 299, 300, 301, 302, 149, 303, 304, 0,
	150, 305, 306, 151, 152, 0, 0, 307, 308, 309,
	0, 153, 310, 0, 0, 0, 154, 155, 156, 0,
	157, 0, 158, 159, 160, 0, 0, 163, 161, 162,
	0, 0, 0, 0, 0, 0, 0, 164, 165, 356,
	166, 311, 167, 312, 313, 0, 168, 0, 169, 0,
	170, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	314, 174, 175, 176, 315, 316, 0, 0, 0, 177,
	178, 317, 318, 319, 0, 179, 0, 180, 0, 0,
	0, 0, 181, 320, 0, 321, 0, 182, 183, 184,
	185, 322, 323, 0, 0, 189, 0, 186, 0, 0,
	187, 324, 188, 325, 326, 327, 328, 329, 0, 330,
	0, 0, 190, 191, 192, 0, 193, 194, 195, 0,
	197, 196, 0, 331, 0, 198, 0, 0, 199, 200,
	0, 0, 201, 0, 202, 203, 204, 206, 332, 205,
	0, 207, 208, 210, 209, 0, 0, 0, 333, 211,
	334, 212, 213, 0, 214, 0, 0, 215, 0, 0,
	216, 335, 0, 217, 0, 336, 218, 219, 0, 221,
	222, 0, 223, 337, 224, 338, 225, 0, 226, 227,
	228, 0, 230, 339, 231, 232, 0, 233, 234, 235,
	236, 237, 239, 240, 238, 241, 242, 243, 244, 0,
	245, 0, 246, 247, 340, 0, 0, 252, 253, 254,
	255, 0, 257, 341, 256, 258, 259, 0, 260, 249,
	250, 261, 0, 262, 342, 343, 263, 0, 269, 264,
	265, 251, 266, 268, 344, 267, 345, 0, 270, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 346, 347,
	348, 0, 0, 278, 279, 349, 350, 0, 280, 281,
	282, 283, 0, 0, 284, 285, 286, 287, 0, 288,
	0, 351, 289, 290, 291, 352, 353, 0, 0, 292,
	0, 0, 0, 0, 293, 294, 295, 296, 297, 938,
	939, 0, 958, 959, 960, 968, 969, 970, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 972, 0, 938, 939, 0,
	958, 959, 960, 968, 969, 970, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 940, 0, 0, 0,
	941, 0, 955, 972, 0, 938, 939, 0, 958, 959,
	960, 968, 969, 970, 0, 0, 0, 0, 0, 0,
	0, 961, 0, 0, 940, 0, 0, 0, 941, 0,
	955, 972, 0, 0, 0, 0, 0, 0, 0, 938,
	939, 0, 958, 959, 960, 968, 969, 970, 0, 0,
	0, 0, 940, 0, 0, 961, 0, 946, 955, 0,
	0, 0, 941, 0, 0, 972, 0, 938, 939, 0,
	958, 959, 960, 968, 969, 970, 965, 973, 0, 0,
	0, 0, 0, 961, 0, 946, 940, 0, 0, 0,
	941, 0, 955, 972, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 965, 973, 0, 0, 0, 963,
	0, 0, 0, 946, 940, 0, 956, 0, 0, 0,
	955, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 973, 0, 0, 0, 963, 0, 0,
	0, 962, 0, 0, 956, 0, 0, 946, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 965, 973, 0, 962,
	0, 0, 956, 0, 0, 946, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 957,
	0, 0, 0, 0, 965, 973, 0, 962, 0, 963,
	0, 0, 0, 0, 0, 966, 956, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 957, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 962, 0, 966, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 962,
	0, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 0, 0, 952, 953, 954, 967, 957,
	951, 949, 950, 942, 943, 944, 945, 947, 948, 0,
	0, 0, 0, 0, 0, 966, 1679, 0, 0, 0,
	964, 0, 0, 952, 953, 954, 967, 957, 951, 949,
	950, 942, 943, 944, 945, 947, 948, 0, 0, 0,
	0, 0, 0, 966, 1631, 0, 0, 0, 964, 0,
	0, 952, 953, 954, 967, 0, 951, 949, 950, 942,
	943, 944, 945, 947, 948, 0, 0, 0, 0, 2205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 0, 0, 952, 953, 954, 967, 0,
	951, 949, 950, 942, 943, 944, 945, 947, 948, 0,
	0, 0, 0, 2161, 0, 0, 0, 0, 0, 0,
	964, 0, 0, 952, 953, 954, 967, 0, 951, 949,
	950, 942, 943, 944, 945, 947, 948, 0, 0, 938,
	939, 2122, 958, 959, 960, 968, 969, 970, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 972, 0, 938, 939, 0,
	958, 959, 960, 968, 969, 970, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 940, 0, 0, 0,
	941, 0, 955, 972, 0, 938, 939, 0, 958, 959,
	960, 968, 969, 970, 0, 0, 0, 0, 0, 0,
	0, 961, 0, 0, 940, 0, 0, 0, 941, 0,
	955, 972, 0, 0, 0, 0, 0, 0, 0, 938,
	939, 0, 958, 959, 960, 968, 969, 970, 0, 0,
	0, 0, 940, 0, 0, 961, 0, 946, 955, 0,
	0, 0, 941, 0, 0, 972, 0, 938, 939, 0,
	958, 959, 960, 968, 969, 970, 965, 973, 0, 0,
	0, 0, 0, 961, 0, 946, 940, 0, 0, 0,
	941, 0, 955, 972, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 965, 973, 0, 0, 0, 963,
	0, 0, 0, 946, 940, 0, 956, 0, 0, 0,
	955, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 973, 0, 0, 0, 963, 0, 0,
	0, 962, 0, 0, 956, 0, 0, 946, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 965, 973, 0, 962,
	0, 0, 956, 0, 0, 946, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 957,
	0, 0, 0, 0, 965, 973, 0, 962, 0, 963,
	0, 0, 0, 0, 0, 966, 956, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 957, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 962, 0, 966, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 962,
	0, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 0, 0, 952, 953, 954, 967, 957,
	951, 949, 950, 942, 943, 944, 945, 947, 948, 0,
	0, 0, 0, 2096, 0, 966, 0, 0, 0, 0,
	964, 0, 0, 952, 953, 954, 967, 957, 951, 949,
	950, 942, 943, 944, 945, 947, 948, 0, 0, 0,
	0, 2091, 0, 966, 0, 0, 0, 0, 964, 0,
	0, 952, 953, 954, 967, 0, 951, 949, 950, 942,
	943, 944, 945, 947, 948, 0, 0, 0, 0, 2087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 0, 0, 952, 953, 954, 967, 0,
	951, 949, 950, 942, 943, 944, 945, 947, 948, 0,
	0, 0, 0, 2034, 0, 0, 0, 0, 0, 0,
	964, 0, 0, 952, 953, 954, 967, 0, 951, 949,
	950, 942, 943, 944, 945, 947, 948, 0, 0, 938,
	939, 2005, 958, 959, 960, 968, 969, 970, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 972, 0, 938, 939, 0,
	958, 959, 960, 968, 969, 970, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 940, 0, 0, 0,
	941, 0, 955, 972, 0, 938, 939, 0, 958, 959,
	960, 968, 969, 970, 0, 0, 0, 0, 0, 0,
	0, 961, 0, 0, 940, 0, 0, 0, 941, 0,
	955, 972, 0, 0, 0, 0, 0, 0, 0, 938,
	939, 0, 958, 959, 960, 968, 969, 970, 0, 0,
	0, 0, 940, 0, 0, 961, 0, 946, 955, 0,
	0, 0, 941, 0, 0, 972, 0, 938, 939, 0,
	958, 959, 960, 968, 969, 970, 965, 973, 0, 0,
	0, 0, 0, 961, 0, 946, 940, 0, 0, 0,
	941, 0, 955, 972, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 965, 973, 0, 0, 0, 963,
	0, 0, 0, 946, 940, 0, 956, 0, 0, 0,
	955, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 973, 0, 0, 0, 963, 0, 0,
	0, 962, 0, 0, 956, 0, 0, 946, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 965, 973, 0, 962,
	0, 0, 956, 0, 0, 946, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 957,
	0, 0, 0, 0, 965, 973, 0, 962, 0, 963,
	0, 0, 0, 0, 0, 966, 956, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 957, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 962, 0, 966, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 962,
	0, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 0, 0, 952, 953, 954, 967, 957,
	951, 949, 950, 942, 943, 944, 945, 947, 948, 0,
	0, 0, 0, 2004, 0, 966, 0, 0, 0, 0,
	964, 0, 0, 952, 953, 954, 967, 957, 951, 949,
	950, 942, 943, 944, 945, 947, 948, 0, 0, 0,
	0, 1924, 0, 966, 0, 0, 0, 0, 964, 0,
	0, 952, 953, 954, 967, 0, 951, 949, 950, 942,
	943, 944, 945, 947, 948, 0, 0, 0, 0, 1843,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 0, 0, 952, 953, 954, 967, 0,
	951, 949, 950, 942, 943, 944, 945, 947, 948, 0,
	0, 1639, 1640, 1819, 1657, 1658, 1659, 0, 0, 0,
	964, 0, 0, 952, 953, 954, 967, 0, 951, 949,
	950, 942, 943, 944, 945, 947, 948, 0, 0, 938,
	939, 1340, 958, 959, 960, 968, 969, 970, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 941, 0, 1654, 972, 0, 938, 939, 0,
	958, 959, 960, 968, 969, 970, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 940, 0, 0, 0,
	941, 0, 955, 972, 0, 938, 939, 0, 958, 959,
	960, 968, 969, 970, 0, 0, 0, 0, 0, 0,
	0, 961, 0, 0, 940, 0, 0, 0, 941, 1645,
	955, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1661,
	0, 0, 940, 0, 0, 0, 0, 946, 955, 0,
	0, 0, 0, 0, 0, 0, 1660, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 973, 0, 0,
	0, 0, 0, 0, 0, 946, 2259, 0, 1655, 0,
	0, 0, 0, 0, 971, 1639, 1640, 0, 1657, 1658,
	1659, 0, 0, 0, 965, 973, 0, 0, 0, 963,
	0, 0, 0, 946, 0, 1671, 956, 0, 1670, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 973, 0, 0, 0, 963, 0, 0,
	0, 962, 0, 0, 956, 0, 0, 0, 1654, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1656, 0, 0, 0, 963, 0, 0, 0, 962,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2258, 0, 0, 0, 957,
	0, 0, 0, 0, 0, 0, 0, 962, 0, 0,
	0, 0, 0, 1645, 0, 966, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 957, 938, 939,
	0, 958, 959, 960, 968, 969, 970, 0, 0, 0,
	0, 0, 0, 966, 961, 0, 0, 0, 0, 1483,
	1660, 941, 0, 0, 972, 957, 0, 1651, 1652, 1653,
	0, 0, 1650, 1648, 1649, 1641, 1642, 1643, 1644, 1646,
	1647, 966, 1655, 0, 0, 940, 0, 0, 0, 0,
	0, 955, 964, 0, 0, 952, 953, 954, 967, 0,
	951, 949, 950, 942, 943, 944, 945, 947, 948, 0,
	0, 1601, 0, 0, 0, 0, 0, 0, 0, 0,
	964, 1484, 0, 952, 953, 954, 967, 0, 951, 949,
	950, 942, 943, 944, 945, 947, 948, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 946, 0, 964, 0,
	0, 952, 953, 954, 967, 1656, 951, 949, 950, 942,
	943, 944, 945, 947, 948, 965, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1215, 0, 971, 0, 0, 0, 938, 939, 0,
	958, 959, 960, 968, 969, 970, 0, 0, 963, 0,
	0, 0, 0, 961, 0, 956, 0, 1214, 0, 0,
	941, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	962, 0, 0, 0, 940, 0, 0, 0, 0, 0,
	955, 1651, 1652, 1653, 0, 0, 1650, 1648, 1649, 1641,
	1642, 1643, 1644, 1646, 1647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 957, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 966, 946, 938, 939, 0, 958,
	959, 960, 968, 969, 970, 0, 0, 0, 0, 0,
	0, 0, 961, 0, 965, 973, 0, 0, 0, 941,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 0, 0, 0, 963, 0, 955,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 952, 953, 954, 967, 0, 951,
	949, 950, 942, 943, 944, 945, 947, 948, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 946, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 973, 0, 0, 957, 0, 938,
	939, 0, 958, 959, 960, 968, 969, 970, 0, 0,
	0, 971, 0, 966, 0, 961, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 972, 963, 0, 0, 0,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 0, 955, 0, 0, 0, 0, 0, 962, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	964, 0, 0, 952, 953, 954, 967, 0, 951, 949,
	950, 942, 943, 944, 945, 947, 948, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 957, 946, 938, 939,
	0, 958, 959, 960, 968, 969, 970, 0, 0, 0,
	0, 0, 966, 0, 961, 0, 965, 973, 0, 0,
	0, 941, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 0, 0, 0, 963,
	0, 955, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 964,
	0, 962, 952, 953, 954, 967, 0, 951, 949, 950,
	942, 943, 944, 945, 947, 948, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 946, 0, 0, 0,
	0, 1677, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 965, 973, 0, 0, 957,
	0, 938, 939, 0, 958, 959, 960, 968, 969, 970,
	0, 0, 0, 971, 0, 966, 0, 961, 0, 0,
	0, 1672, 0, 0, 941, 0, 0, 972, 963, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	1823, 0, 0, 0, 0, 0, 0, 0, 940, 0,
	0, 0, 0, 0, 955, 0, 0, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 0, 0, 952, 953, 954, 967, 0,
	951, 949, 950, 942, 943, 944, 945, 947, 948, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 957, 946,
	938, 939, 0, 958, 959, 960, 968, 969, 970, 0,
	0, 0, 0, 0, 966, 0, 961, 0, 965, 973,
	0, 0, 0, 941, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 940, 0, 0,
	0, 963, 0, 955, 0, 0, 0, 0, 956, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 962, 952, 953, 954, 967, 0, 951,
	949, 950, 942, 943, 944, 945, 947, 948, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 946, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 965, 973, 0,
	0, 957, 0, 938, 939, 0, 958, 959, 960, 968,
	969, 970, 0, 0, 0, 971, 0, 966, 0, 961,
	0, 0, 0, 1630, 0, 0, 941, 0, 0, 972,
	963, 0, 0, 0, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	940, 0, 0, 0, 0, 0, 955, 0, 0, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1637, 0, 0, 0, 0,
	0, 0, 0, 0, 964, 0, 0, 952, 953, 954,
	967, 0, 951, 949, 950, 942, 943, 944, 945, 947,
	948, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 946, 938, 939, 0, 958, 959, 960, 968, 969,
	970, 0, 0, 0, 0, 0, 966, 0, 961, 0,
	965, 973, 0, 0, 0, 941, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	0, 0, 0, 963, 0, 955, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 964, 0, 962, 952, 953, 954, 967,
	0, 951, 949, 950, 942, 943, 944, 945, 947, 948,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 965,
	973, 0, 0, 957, 0, 938, 939, 0, 958, 959,
	960, 968, 969, 970, 0, 0, 0, 971, 0, 966,
	0, 961, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 972, 963, 0, 0, 0, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 955, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 964, 0, 0, 952,
	953, 954, 967, 0, 951, 949, 950, 942, 943, 944,
	945, 947, 948, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 957, 946, 938, 939, 0, 958, 959, 960,
	968, 969, 970, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 965, 973, 0, 0, 0, 941, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 0, 0, 0, 963, 0, 955, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 964, 0, 0, 952, 953,
	954, 967, 0, 951, 949, 950, 942, 943, 944, 945,
	947, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 973, 0, 0, 957, 0, 938, 939, 0,
	958, 959, 960, 968, 969, 970, 0, 0, 0, 971,
	0, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	941, 0, 0, 972, 963, 0, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 0, 938, 939,
	955, 0, 0, 0, 968, 969, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 972, 0, 0, 0, 964, 0,
	0, 952, 953, 954, 967, 0, 951, 949, 950, 942,
	943, 944, 945, 947, 948, 940, 0, 0, 0, 0,
	0, 955, 0, 0, 957, 946, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	966, 0, 0, 0, 965, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 946, 963, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 965, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 964, 0, 0,
	952, 953, 954, 967, 0, 951, 949, 950, 942, 943,
	944, 945, 947, 948, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 1053, 1082, 1045, 1073, 1072, 957, 0, 1047,
	1046, 0, 0, 0, 0, 1084, 1083, 0, 0, 0,
	0, 0, 0, 966, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	0, 1070, 1069, 0, 0, 0, 0, 0, 957, 0,
	0, 1068, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 0, 0, 1067,
	1065, 1066, 0, 0, 0, 0, 0, 0, 0, 0,
	964, 0, 0, 952, 953, 954, 967, 0, 951, 949,
	950, 942, 943, 944, 945, 947, 948, 0, 0, 1056,
	1055, 1057, 1058, 1059, 1060, 1061, 0, 1081, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 0, 0, 1049, 967, 0, 951,
	949, 950, 942, 943, 944, 945, 947, 948, 1071, 0,
	0, 0, 1054, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 1275, 1273, 1274, 1277, 1276,
	0, 0, 1063, 1053, 1082, 1045, 1073, 1072, 0, 0,
	1047, 1046, 0, 0, 0, 0, 1084, 1083, 0, 0,
	0, 1050, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1062, 1051, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 1070, 1069, 1048, 0, 0, 1079, 1080, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1052,
	1067, 1065, 1066, 0, 1085, 0, 0, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1056, 1055, 1057, 1058, 1059, 1060, 1061, 0, 1081, 0,
	578, 0, 0, 0, 0, 580, 0, 0, 0, 0,
	586, 587, 0, 0, 596, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1049, 512, 581,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1071,
	0, 0, 0, 1054, 0, 0, 0, 0, 0, 0,
	0, 599, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 1064, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 584, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1050, 590, 0, 0, 585, 592, 0, 0,
	0, 0, 0, 1062, 1051, 0, 0, 0, 589, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 513, 0,
	0, 0, 0, 0, 0, 1048, 0, 0, 1079, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1052, 0, 0, 0, 0, 1085, 0, 0, 588, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 576, 593, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 594,
	0, 0, 0, 598, 0, 0, 0, 515, 0, 0,
	0, 0, 591, 595, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 597,
}
var sqlPact = [...]int{

	3474, -1000, -36, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18089, -1000,
	-1000, 22210, -1000, -1000, -1000, -1000, -1000, -1000, 21893, 774,
	980, -1000, -1000, -1000, -1000, -1000, 22210, 3300, 1220, 5739,
	1521, 1177, 22210, 18089, 1176, 1220, 23478, -1000, -1000, 23478,
	1116, -1000, -1000, -1000, -1000, -1000, 27599, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 612, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	870, 815, 111, 751, -1000, 690, -37, 14881, 31755, 475,
	486, 475, 475, 467, 746, 27282, 22210, 1568, 4, -1000,
	254, 15841, 3474, 586, 1, 18723, 22210, -1000, 7, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 337, 7, -1000, -1000, 21576, -1000,
	1354, 1193, 1192, 20308, -1000, -1000, -1000, -1000, -1000, 272,
	-1000, 13563, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 942, -1000, 3, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 609, 11214,
	271, 1349, 11214, 930, -1000, 22210, -1000, -1000, -1000, 986,
	-1000, -1000, -1000, -1000, -1000, 381, 1760, 648, 264, 26965,
	-1000, 1046, -1000, 369, 530, -1000, -1000, 14552, 14, 20308,
	-1000, 11214, 11214, 26648, 22210, 22210, 1215, 26331, -1000, 690,
	-1000, -1000, 26014, 25697, 25380, 25063, 24746, -1000, 1143, 1567,
	1567, 1567, 1581, 90, 83, 111, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1724, -1000, -1000, -1000, -1000,
	1744, -1000, -1000, -1000, -1000, -1000, 986, 17772, 837, 1563,
	1342, -1000, 927, 1340, 1337, 1335, 1333, 1322, -1000, 717,
	-1000, 1362, 504, -1000, 1314, 914, 458, -1000, 1312, 1311,
	1046, -1000, 1046, -1000, -1000, -1000, 582, 23478, 21259, 24429,
	22210, 20942, -3, 22210, -1000, 260, -3, 9845, 9845, -1000,
	-1000, 254, -1000, 9161, 1228, 2789, -170, 101, 359, -1000,
	15199, 17126, -1000, 17772, 18723, 1, -21, -1000, -1000, -1000,
	5410, 631, 16162, 7, -1000, -1000, -1000, -1000, -1000, 20308,
	22210, 22210, 658, 24112, 303, -1000, 11214, -7, -1000, -1000,
	254, 18089, 1081, 17772, 30872, -1000, 11214, 11214, 11214, 11214,
	11214, 863, 293, -1000, 252, 250, 6411, -1000, -1000, 1743,
	-1000, -1000, -1000, 89, -1000, -1000, 11214, 7, -1000, -1000,
	-1000, -1000, 249, 1756, -1000, 434, -1000, -1000, -1000, 374,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1361,
	248, 246, 245, -1000, -1000, -1000, -1000, 244, 234, 229,
	228, 226, 223, 222, 221, 197, 196, 189, 188, 187,
	186, 184, 797, -1000, 402, -1000, -1000, 402, 402, -1000,
	165, 165, 168, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 165, -1000, -1000, -1000, 366, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 176, 1626, 31655, 17772, 30872, 18089, -1000,
	-1000, -1000, -1000, 22210, 11214, -1000, 1623, 1046, -5, -1000,
	-1000, -1000, -1000, 1071, 1103, 516, 771, 14223, 13894, 1518,
	-1000, -1000, -1000, 13, 5739, 116, -1000, 30872, 30872, 174,
	1038, 390, 95, 23795, 390, 1037, -1000, 1143, 115, 1476,
	-1000, 115, 1474, 114, 1467, -1000, -118, -1000, 1457, -21,
	1453, -1000, 895, 1161, 10530, 1144, 11214, 111, -1000, -1000,
	111, 111, 7438, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 20625, -1000, -1000, 646, 22210, 1360, 18089, 22210,
	22210, 22210, 22210, 22210, -1000, -1000, 400, 1359, 22210, 1068,
	-1000, -1000, 22210, 22210, 754, 607, -1000, -5, -1000, 23478,
	-1000, 851, 1450, 525, 752, 1447, 778, 762, 1436, 22210,
	-3, 1620, 22210, 109, -1000, 30037, -1000, 109, -1000, -8,
	-1000, 30872, -1000, 1168, 1166, 15841, 1051, 871, 871, 871,
	-1000, 173, 285, 359, 4738, 11214, -1000, 19991, 876, 33,
	84, 1228, -1000, 22210, 354, -1000, 22210, -1000, -1000, -1000,
	1307, -13, -1000, -1000, 405, 88, 1616, 88, 16484, -1000,
	22210, -24, 30872, 2643, 19040, 580, -1000, 1304, 31454, 31655,
	5739, 596, 11214, 11214, 11214, 11214, 11214, 11214, 11214, 11214,
	11214, 11214, 11214, 11214, 11214, 11214, 11214, 11214, 11214, 11214,
	11214, 11214, 11214, 11214, 1173, 11214, 578, 11214, 11214, 11214,
	11214, 1923, 881, 161, 894, -1000, 1719, 1719, 1719, 31114,
	31114, 180, 293, -1000, 11214, -1000, 10188, 83, 29277, -4,
	-1000, -1000, -1000, 7780, 415, 30872, 7, 6068, -1000, 1742,
	682, 1371, 1251, 170, 82, 81, 79, 11214, 11214, 11898,
	11898, 11214, 12240, 11214, 11214, 6753, 11214, 11214, 11214, 11214,
	11214, 11214, -1000, 169, -1000, -1000, -1000, -1000, 1737, -1000,
	-1000, 1736, -1000, 595, 593, 1732, -37, -33, -1000, 599,
	-1000, -1000, -1000, -1000, 74, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 168, 797, 165,
	165, 165, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 366,
	-1000, -1000, 402, 402, 402, -1000, -1000, -12, -1000, 1300,
	-1000, 361, -35, 466, -5, 1046, 893, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1754, -6, -1000, -1000, -6, -1000, -1000, 5739, -1000, -1000,
	20308, -1000, -1000, 19357, 1612, 1435, -1000, 784, -1000, 1607,
	22210, 913, 1029, -1000, 603, 1434, -1000, -1000, 22210, 22210,
	-1000, 22210, -1000, 22210, 22210, 5739, 22210, 22210, -1000, -1000,
	-1000, 30872, -1000, 370, -1000, -1000, 30872, 706, 1198, -1000,
	1198, -9, -1000, 29888, 1160, 22210, -1000, -1000, -1000, -1000,
	-1000, 22210, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	198, -1000, -1000, -1000, -1000, 22210, 22210, 22210, -1000, -57,
	819, -1000, 19674, 1542, 1534, 1537, 20308, 1597, -37, 1296,
	1596, -37, 1291, 574, 22210, 562, 561, 20308, -1000, 163,
	-39, 405, 9845, 15841, 5739, -1000, 405, 9161, -1000, 15841,
	15841, 1256, 1162, 15841, -1000, -1000, -1000, -1000, 19991, 356,
	359, 19991, -1000, 1728, 1179, -43, -1000, -1000, 22210, 162,
	-1000, 359, 78, 1236, 969, -1000, 630, 1290, 22210, 724,
	11214, 757, -1000, 15520, 423, 22210, 724, 93, -1000, -1000,
	-1000, 350, 22210, -1000, -1000, 11214, -1000, -1000, 22210, 17772,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	365, 698, 698, 726, 726, 726, 726, 1715, 209, 274,
	2494, 31298, 31298, 31298, 2459, 401, 401, 31298, 31298, 31298,
	31114, 31005, 761, 11214, 11214, 553, 868, 161, 761, 11214,
	761, 761, 761, 761, -1000, 1266, -1000, -1000, -1000, -1000,
	1286, 159, 12240, 12240, -1000, -1000, -1000, 6411, 12582, -1000,
	-1000, -1000, -1000, 158, 11214, -1000, 29619, -202, -45, -1000,
	-1000, 11214, -44, -51, -1000, -1000, 627, -1000, 11214, -1000,
	-18, 11214, 11214, 11214, 77, 75, -1000, 546, -1000, 544,
	542, 536, -1000, 157, 867, 156, 155, 11214, -1000, -1000,
	-1000, 30763, 28267, 72, 1282, -110, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 71, 67, 30630, -110, 66, 29591, -1000,
	12240, 12240, 12240, 6411, 150, 65, 29675, -110, 30521, 9503,
	9503, 9503, 64, 30388, 11214, -110, 28239, 3940, 3645, -55,
	-59, -66, 1716, -68, 60, 364, 362, 59, -1000, -1000,
	31655, -1000, 291, 439, -1000, 1706, 397, 17772, 22210, -1000,
	1174, -1000, -1000, 701, -1000, 781, -1000, 14881, -1000, -1000,
	55, -76, -17, 31655, -1000, -1000, -1000, -1000, -1000, 22210,
	276, 22210, 22210, -1000, 149, 1155, 1145, -37, 22210, 1752,
	-37, 22210, 1430, 1485, 343, 22210, -1000, 115, 115, -1000,
	114, -1000, -1000, -21, 706, -1000, 11214, 1700, -1000, -1000,
	-1000, 7438, -1000, -1000, -1000, 22210, -155, -40, -1000, -1000,
	-1000, -1000, -1000, 354, 878, 22210, 22210, 22210, -1000, -1000,
	1015, 23161, 1009, 31655, 148, 22210, 22210, 22844, 22527, 22210,
	769, -37, -1000, 146, -37, -1000, 143, 22210, 759, 22210,
	22210, 750, -37, -1000, 1245, -1000, -65, 1228, -1000, 1245,
	-1000, -1000, 1256, -1000, 141, 11214, 15841, -1000, 284, -1000,
	-85, -1000, 19991, -1000, 281, -199, -1000, 349, -1000, 359,
	140, 22210, 19991, -1000, 397, 1281, 615, -1000, 628, -1000,
	-1000, 7095, 30872, -1000, 724, 1541, -86, -1000, -1000, -1000,
	405, 16484, 15841, 9161, -98, 30872, -40, -80, 11214, 761,
	761, 11214, 12240, 12240, -1000, 761, -1000, -1000, -1000, -1000,
	-1000, 1280, 139, 11214, 31655, 3822, 3755, -105, -1000, 8819,
	-31, -1000, 11214, -1000, 29249, -1000, -1000, 288, 1483, -1000,
	11214, 30279, 54, 8477, -1000, 30146, -25, -25, -1000, 1751,
	1050, 946, 747, 679, 1698, -1000, 16805, 413, 879, 29215,
	31454, 31655, -1000, 11214, -1000, -1000, 1269, 11214, -1000, 31454,
	31655, 12240, 12240, 12240, 12240, 12240, 12240, 12240, 12240, 12240,
	12240, 12240, 12240, 12240, 12240, 12240, 12240, 12240, 12240, 12240,
	1108, 12240, 1686, 1686, 1686, -32, 8135, -1000, 1358, 1269,
	11214, 11214, 31655, 52, 50, 49, -1000, 11214, -110, 11214,
	11214, 11214, -1000, -1000, -1000, 46, -1000, 1687, -1000, -1000,
	-1000, -1000, -1000, 1685, -1000, 278, 45, -1000, 884, -1000,
	-40, -1000, -1000, -1000, -1000, -1000, 1218, -1000, 19357, -1000,
	138, 22210, 13242, 137, 716, 11214, 136, 134, -1000, 133,
	-1000, -1000, 132, 22210, 1118, 343, 18406, -1000, 390, -1000,
	-1000, -1000, 889, 29187, -1000, 1556, 5739, 22210, -1000, -1000,
	-1000, 532, 531, 1424, -1000, 993, -1000, 428, 814, -1000,
	1413, 951, 1391, 951, -1000, -57, 741, -1000, 11214, -1000,
	11214, -1000, 526, -1000, -1000, 518, 43, 1242, 1579, -1000,
	15841, 1242, -1000, 22210, 30872, -1000, -170, -1000, 1659, -1000,
	-1000, 1179, -1000, 5078, 19991, 22210, -109, -1000, -1000, 17772,
	590, -1000, -64, -1000, -1000, 211, -37, 724, -1000, -81,
	-1000, 346, 17772, 1644, 761, 3077, 224, 11214, 31655, 31247,
	-113, 11214, 11214, -1000, -124, -1000, 11214, 275, 30872, -1000,
	-1000, -1000, 30872, 11214, 1748, 11214, 42, 41, 39, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 37, -1000, -1000,
	27916, 11214, 35, -1000, 34, 29, 30872, 1358, 30872, -1000,
	-1000, 718, 718, 635, 635, 635, 635, 1686, 1201, 2257,
	2612, 327, 327, 327, 812, 710, 710, 327, 327, 327,
	1263, 1018, 131, 29765, 11214, -126, -1000, -1000, -1000, 30872,
	30872, 28, -1000, -1000, -1000, -110, 247, 29159, 28817, -1000,
	26, 110, -1000, -1000, 130, -1000, 1230, -1000, 2328, 13242,
	129, -130, -1000, 324, 1559, 11214, -1000, -1000, 127, 22210,
	-1000, 28789, 13242, 22210, 19357, 1602, 13242, 902, 1129, 343,
	18406, -1000, 603, -1000, -1000, -1000, 1556, -1000, 22210, 22210,
	22210, 1389, -1000, -1000, 1128, 1095, 457, 22210, -1000, 22210,
	-1000, 22210, 22210, 22210, -131, -132, 22210, 22210, -1000, 142,
	11214, 11214, 1228, 142, -140, 359, -1000, -1000, -1000, 1652,
	-1000, -144, -1000, -83, 17455, 1490, 22210, 1532, -1000, -1000,
	126, -1000, 11214, 11214, 31247, -145, -1000, 761, 761, -1000,
	28755, -1000, 30872, -1000, 30146, -1000, -1000, -1000, -1000, 805,
	-1000, 28727, -1000, -1000, -1000, -1000, 12240, 1262, 125, 31655,
	28699, -1000, -1000, 11214, -1000, -1000, -1000, -1000, 1750, 818,
	-1000, 22210, -1000, 5739, 22210, 1258, 985, -1000, -1000, 1141,
	124, 12240, 22210, -146, 13242, 864, 13242, 1556, 7, 5739,
	1556, 28357, 6068, -152, -1000, -153, -157, 24, -37, -162,
	22210, -1000, 343, 18406, -1000, 1485, -1000, -1000, -1000, -1000,
	22210, 979, -1000, 976, 11214, -1000, 31655, 951, 951, -1000,
	517, 513, 510, 507, -1000, -1000, -1000, 22210, 30872, -110,
	-1000, -1000, 19991, 91, -1000, -1000, 123, 7, 567, -167,
	22210, -1000, -1000, 4311, 761, 761, -1000, -1000, 22, 879,
	1578, -1000, 2309, 12240, 31655, -168, -1000, 28329, -173, -1000,
	342, 22210, 1253, -1000, -1000, 22210, 992, -1000, -1000, 11214,
	29765, 122, 864, -174, 1218, 117, -1000, -1000, -1000, -1000,
	-1000, -1000, 1559, -18, -1000, -1000, 763, 1218, -1000, 864,
	112, 18406, -1000, 1118, -1000, -1000, -1000, 30872, 1549, -1000,
	-1000, 22210, 22210, 108, 103, -106, -1000, 1601, -1000, -1000,
	11214, 657, -1000, 405, -1000, -1000, 760, 11214, 2309, -175,
	-1000, -1000, 1750, -1000, -1000, 1749, 102, -1000, -1000, 1387,
	28295, 1053, 22210, 1218, 864, -1000, 22210, 1556, 21, 22210,
	-1000, 1218, 13242, -1000, 1129, 437, 5739, -1000, -1000, 11214,
	11214, 22210, 99, -25, 16484, -1000, 20, 11556, 11556, -110,
	-1000, -1000, -1000, 22210, 1377, -1000, 892, 821, 19, -1000,
	1218, -182, -1000, -1000, 95, -1000, -183, -1000, -1000, 11214,
	-1000, -184, -188, -1000, -1000, 16, -158, -1000, -1000, -1000,
	12913, 916, 691, 29647, -1000, -189, 22210, -1000, 900, 896,
	660, -1000, -1000, -1000, -1000, -1000, -1000, 1053, 864, 30872,
	-1000, -1000, 1748, -1000, 1631, -1000, -1000, -1000, -1000, -1000,
	939, -1000, -1000, 1496, -1000, 449, 1030, 1030, 892, 1218,
	10872, -1000, -1000, -1000, -1000, 1638, -1000, -1000, 1085, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2098, 2096, 1394, 1575, 2094, 2088, 2087, 2086, 2085,
	2083, 2082, 2076, 2074, 2072, 2071, 2070, 2069, 2067, 2066,
	2064, 2062, 2060, 2054, 2053, 2049, 2045, 1555, 2042, 2040,
	2039, 2037, 2036, 2035, 1531, 2034, 1514, 2032, 2031, 2029,
	2027, 2025, 1470, 1467, 2024, 98, 109, 1448, 2021, 2017,
	1431, 2016, 2013, 2011, 2010, 2009, 2006, 2005, 334, 2003,
	2002, 2001, 1999, 1998, 1996, 1994, 135, 157, 1993, 1425,
	1992, 1990, 1989, 1988, 1987, 1984, 1983, 1977, 1976, 1975,
	1974, 1972, 1964, 1963, 1962, 1959, 1958, 1957, 156, 1956,
	1955, 1397, 1383, 1954, 1941, 22, 1939, 81, 1937, 26,
	142, 2717, 130, 1935, 1934, 1927, 1923, 24, 84, 85,
	1919, 21, 1918, 1916, 47, 19, 14, 13, 1912, 91,
	1911, 1902, 1274, 35, 1901, 1900, 124, 1899, 32, 17,
	1090, 150, 147, 101, 108, 1898, 1897, 1896, 1895, 38,
	1894, 1, 1892, 1891, 8, 75, 23, 1890, 33, 59,
	1889, 1887, 122, 1881, 71, 99, 1358, 104, 119, 28,
	1880, 72, 12, 76, 1879, 1878, 144, 34, 1877, 36,
	82, 138, 1876, 52, 155, 121, 80, 115, 112, 1875,
	1874, 1873, 111, 1872, 107, 93, 1871, 1869, 56, 1868,
	139, 129, 1867, 1866, 87, 1863, 125, 1862, 1861, 153,
	145, 105, 9, 40, 74, 11, 1365, 1360, 110, 62,
	46, 43, 1858, 1920, 25, 1033, 30, 92, 66, 45,
	94, 55, 78, 141, 50, 1856, 1855, 114, 1854, 1853,
	1852, 1848, 1847, 89, 1843, 1842, 69, 140, 73, 16,
	44, 86, 29, 61, 151, 131, 148, 95, 1840, 83,
	117, 1839, 79, 1838, 1837, 1595, 113, 1836, 1835, 1834,
	1569, 1525, 1503, 20, 1831, 1830, 968, 925, 1828, 1826,
	58, 1824, 106, 103, 1822, 133, 128, 120, 1816, 116,
	31, 88, 1814, 48, 54, 0, 600, 176, 1811, 102,
	51, 1807, 1806, 1805, 1802, 27, 3, 7, 4, 5,
	6, 68, 65, 1800, 1799, 123, 96, 53, 1798, 152,
	1797, 1796, 1793, 37, 1791, 18, 1788, 15, 1779, 1777,
	10, 2, 1776, 1770, 134, 1769, 90, 1768, 1624, 1765,
	146, 1764, 1763, 1443, 41, 100,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 7, 8, 6, 6, 6, 6,
	9, 9, 10, 16, 13, 18, 12, 12, 15, 15,
	109, 109, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 106, 106, 111,
	111, 111, 113, 113, 110, 110, 105, 105, 20, 56,
	51, 283, 283, 284, 284, 94, 94, 98, 98, 95,
	96, 96, 97, 97, 26, 26, 26, 22, 22, 23,
	24, 27, 27, 27, 27, 27, 27, 34, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 41, 41,
	39, 39, 38, 38, 37, 37, 40, 40, 158, 158,
	157, 157, 160, 160, 42, 42, 45, 45, 45, 45,
	45, 46, 46, 46, 46, 46, 46, 46, 46, 251,
	251, 250, 44, 225, 225, 47, 183, 183, 48, 48,
	48, 48, 49, 57, 324, 324, 324, 328, 328, 329,
	329, 330, 330, 330, 330, 330, 330, 330, 326, 326,
	54, 54, 93, 61, 61, 61, 61, 61, 61, 63,
	65, 62, 62, 62, 64, 64, 66, 66, 66, 66,
	67, 67, 67, 67, 68, 68, 138, 138, 276, 275,
	275, 281, 281, 281, 136, 136, 136, 136, 136, 137,
	137, 137, 274, 274, 274, 274, 282, 282, 282, 282,
	282, 282, 280, 280, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 81, 81, 88, 88, 88, 88, 88, 88,
	70, 75, 75, 75, 71, 76, 77, 78, 78, 78,
	72, 72, 80, 80, 80, 79, 85, 85, 85, 85,
	82, 82, 82, 83, 83, 86, 86, 86, 73, 74,
	87, 84, 84, 84, 43, 325, 325, 327, 327, 52,
	30, 30, 31, 31, 139, 139, 140, 140, 204, 204,
	204, 204, 141, 141, 112, 112, 112, 203, 293, 293,
	294, 294, 294, 294, 294, 294, 295, 295, 295, 295,
	295, 295, 295, 291, 291, 292, 289, 289, 290, 290,
	290, 290, 331, 331, 202, 202, 144, 144, 298, 298,
	298, 298, 296, 296, 296, 296, 296, 299, 297, 300,
	300, 300, 300, 300, 237, 237, 237, 90, 32, 118,
	118, 33, 29, 29, 187, 187, 148, 148, 242, 242,
	242, 129, 129, 107, 107, 107, 14, 11, 11, 11,
	11, 11, 11, 19, 19, 17, 17, 188, 188, 189,
	189, 53, 55, 60, 89, 89, 89, 21, 21, 25,
	25, 59, 333, 333, 125, 125, 125, 125, 126, 126,
	199, 199, 200, 200, 201, 201, 201, 120, 119, 121,
	121, 28, 28, 114, 114, 115, 115, 116, 116, 117,
	117, 334, 334, 50, 50, 92, 132, 132, 196, 196,
	196, 198, 198, 197, 197, 197, 173, 173, 173, 91,
	153, 153, 162, 162, 163, 163, 248, 164, 164, 58,
	58, 101, 101, 99, 99, 99, 99, 99, 99, 100,
	100, 102, 102, 102, 102, 102, 102, 102, 104, 306,
	306, 306, 309, 309, 305, 307, 307, 308, 308, 332,
	332, 174, 174, 174, 143, 142, 142, 146, 146, 145,
	147, 147, 241, 241, 241, 171, 171, 171, 171, 190,
	190, 191, 191, 192, 192, 193, 193, 193, 194, 194,
	195, 195, 170, 170, 221, 221, 103, 103, 152, 152,
	154, 154, 211, 211, 211, 212, 212, 210, 210, 210,
	210, 243, 243, 243, 243, 243, 243, 243, 322, 322,
	322, 323, 323, 240, 240, 244, 244, 244, 244, 244,
	244, 238, 238, 238, 238, 239, 239, 249, 249, 177,
	177, 177, 177, 175, 175, 176, 176, 245, 245, 245,
	245, 172, 172, 246, 246, 246, 205, 205, 252, 252,
	252, 270, 270, 151, 151, 151, 253, 253, 253, 253,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 253, 254, 254, 254, 254, 256, 256, 256,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 269, 269,
	269, 269, 269, 257, 257, 264, 264, 265, 265, 266,
	267, 258, 258, 259, 259, 260, 261, 268, 268, 268,
	268, 272, 272, 262, 262, 262, 262, 262, 263, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 185, 185, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 215, 215, 215,
	215, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 301, 301, 301, 301, 301, 301, 301, 303,
	303, 304, 304, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 310, 310, 311, 311, 313, 313, 314, 314,
	315, 316, 316, 316, 317, 318, 318, 312, 312, 319,
	319, 319, 320, 320, 321, 321, 321, 321, 321, 227,
	227, 227, 228, 228, 229, 235, 235, 235, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 127, 127, 127, 127, 127, 159,
	159, 224, 224, 222, 222, 222, 226, 226, 178, 178,
	271, 271, 271, 271, 271, 271, 271, 179, 179, 179,
	186, 180, 180, 181, 181, 181, 181, 181, 181, 218,
	219, 182, 182, 182, 220, 220, 230, 234, 234, 233,
	232, 232, 231, 231, 208, 208, 209, 209, 207, 206,
	167, 167, 166, 166, 165, 165, 335, 335, 236, 236,
	168, 168, 169, 161, 161, 247, 247, 247, 247, 155,
	155, 134, 134, 156, 156, 130, 130, 133, 133, 131,
	131, 131, 131, 149, 149, 150, 150, 128, 128, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	273, 273, 273, 223, 122, 122, 122, 123, 123, 124,
	124, 278, 278, 278, 279, 279, 279, 279, 277, 277,
	277, 277, 277, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 6, 6, 6, 5, 5, 4, 12, 4, 12,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 7, 6,
	8, 1, 1, 1, 3, 3, 0, 2, 0, 2,
	1, 3, 5, 0, 4, 6, 7, 1, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 6, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 4, 6,
	4, 6, 4, 6, 3, 5, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 2, 1, 1, 1, 1, 1, 3, 4,
	5, 3, 2, 6, 3, 4, 3, 3, 3, 3,
	1, 3, 3, 1, 2, 2, 1, 0, 1, 1,
	3, 1, 1, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 1, 1, 1, 1, 1, 2,
	3, 4, 4, 4, 4, 2, 4, 4, 4, 4,
	4, 4, 2, 3, 3, 2, 4, 5, 4, 5,
	2, 3, 3, 4, 2, 4, 3, 3, 4, 4,
	2, 5, 5, 6, 2, 2, 0, 2, 0, 3,
	7, 10, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 4, 3,
	0, 6, 11, 14, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 3, 2, 1, 1, 1, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 6, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 1, 4, 4, 4, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 2, 2, 1, 1, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 6, 3, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 3,
	1, 1, 1, 1, 6, 6, 4, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -52,
	-44, -56, -55, -57, -60, -58, -53, -54, -61, -69,
	-89, -90, -91, -92, -5, -6, -7, -8, 34, -23,
	-24, 67, -28, -29, -30, -31, -32, -33, 90, -308,
	94, -37, -38, -39, -41, -40, 105, 107, 125, 131,
	172, 214, 220, 240, 242, 244, 251, -99, -101, 238,
	239, -62, -63, -64, -65, -93, 262, -70, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -21, -25, -59, 302, -9,
	-10, -13, -12, -11, -16, -18, -15, -17, -19, -14,
	47, 69, -306, 98, -102, -100, 353, 311, 265, 35,
	274, 61, 101, 246, 23, 327, 334, 255, -103, -104,
	319, 283, 356, -324, -156, 283, 83, -131, -122, 346,
	4, -285, -287, 20, 21, 23, 33, 34, 35, 40,
	44, 47, 48, 55, 60, 61, 62, 64, 66, 67,
	68, 72, 73, 71, 81, 82, 84, 86, 90, 92,
	94, 97, 98, 100, 105, 106, 107, 113, 114, 119,
	121, 126, 131, 132, 133, 134, 141, 144, 146, 139,
	156, 157, 158, 160, 161, 162, 165, 164, 169, 172,
	173, 176, 178, 179, 180, 183, 181, 185, 186, 188,
	187, 193, 195, 196, 198, 201, 204, 207, 210, 211,
	212, 213, 214, 216, 218, 220, 222, 223, 224, 225,
	226, 228, 229, 231, 232, 233, 234, 235, 238, 236,
	237, 239, 240, 241, 242, 244, 246, 247, 249, 263,
	264, 275, 251, 252, 253, 254, 258, 256, 259, 260,
	262, 265, 267, 270, 273, 274, 276, 279, 277, 272,
	282, 284, 285, 286, 287, 288, 289, 290, 297, 298,
	302, 303, 304, 305, 308, 309, 310, 311, 313, 316,
	317, 318, 323, 328, 329, 330, 331, 332, 28, 36,
	37, 38, 39, 41, 42, 45, 46, 51, 52, 53,
	56, 85, 87, 88, 104, 108, 109, 115, 116, 117,
	127, 129, 135, 136, 145, 147, 148, 149, 150, 151,
	153, 167, 182, 192, 194, 205, 209, 217, 219, 227,
	248, 257, 268, 269, 278, 280, 292, 293, 294, 299,
	300, 315, 319, 320, -130, -122, 83, -122, 220, 22,
	92, 144, 310, 309, 22, 216, 256, 285, 287, -122,
	-46, 353, -45, -4, -27, -36, -47, -42, -43, -69,
	-58, -34, -50, -91, -92, -328, 22, -329, -330, 69,
	98, 125, 255, 144, 92, 309, -277, 4, -285, -287,
	-286, -288, 58, 70, 124, 143, 137, 155, 159, 168,
	170, 184, 206, 208, 245, 266, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 43, 49, 50, 54, 57,
	59, 65, 69, 74, 75, 77, 76, 78, 79, 80,
	89, 91, 93, 95, 96, 99, 101, 103, 110, 111,
	112, 120, 122, 123, 125, 128, 130, 138, 140, 142,
	152, 154, 163, 166, 171, 174, 175, 189, 190, 191,
	197, 199, 200, 202, 203, 215, 221, 230, 243, 255,
	261, 271, 281, 283, 291, 295, 296, 301, 306, 307,
	312, 314, 321, 322, 324, 325, 326, 327, 71, 157,
	-122, -324, 157, -328, -126, 251, -122, -126, -88, 259,
	4, 22, 83, 183, 261, 292, 173, 55, 248, 259,
	-67, 298, -66, 292, -276, -68, -157, 183, -122, -332,
	283, 157, 224, 283, 312, 322, -187, 83, 307, -100,
	-102, -101, 322, 283, 140, 83, 312, -145, -146, 306,
	152, 103, 203, -99, -101, -306, -281, -274, -237, 9,
	301, 110, 199, -280, 8, 345, -273, -279, 5, 7,
	344, 4, -285, -287, -286, -88, 259, 34, 55, 22,
	60, 84, 126, 140, 141, 161, 65, 66, 223, 173,
	158, 297, 162, 260, 284, 298, 69, 313, 288, 106,
	-333, 298, 298, -333, -333, -125, 298, 295, 283, 140,
	83, 322, -309, 228, -305, -122, -309, -142, -143, 22,
	95, 357, -169, 353, -243, 351, -245, -130, -101, -244,
	353, 200, -3, 295, 357, -156, -149, -122, -207, -206,
	355, 123, 353, -166, -167, -206, -207, -122, 22, 123,
	154, 154, -246, -245, -130, -183, 353, -251, -250, -279,
	319, 199, 357, 283, -213, -215, 344, 345, 339, 189,
	333, -227, -217, -230, 104, 248, 353, -130, -216, 358,
	9, -303, -101, 29, -228, -229, 49, -122, 7, 8,
	5, 6, -128, -254, -223, -263, 301, 110, 191, -301,
	-302, 4, -285, -278, -255, -265, -259, -262, 153, 58,
	75, 76, 79, 77, 80, 261, 312, 50, 28, 108,
	109, 209, 217, 280, 299, 300, 135, 192, 136, 56,
	127, 167, 97, 37, 39, 41, 42, 51, 52, 85,
	87, 88, 115, 116, 117, 145, 147, 148, 149, 150,
	151, 194, 227, 268, 278, 293, 294, 320, -286, -266,
	-267, -260, -261, -268, -225, 353, 123, -213, 199, -122,
	-88, 332, 2, 263, 353, -67, 53, 298, -200, -201,
	-119, -120, -121, 156, 222, 226, 332, 295, 338, 123,
	-281, -138, 89, -160, 355, -172, -245, -213, -213, -157,
	135, -122, -157, 140, -122, 135, -145, -146, -158, 135,
	-157, -158, 135, -134, 135, -133, -130, -122, 135, -149,
	135, -171, -190, -191, 171, 112, 197, -174, 22, 95,
	-174, -174, 44, 354, 354, 8, 7, 7, -88, -283,
	-280, 9, 263, 223, 260, 55, 123, -325, 199, 123,
	123, 123, 123, 123, 223, 260, 120, 297, 123, 156,
	222, 275, 283, 322, 123, 123, -199, -200, -199, 295,
	-126, -245, 135, -130, -133, 135, -122, -245, 135, 357,
	-309, -150, 353, -161, -247, -213, 346, -161, -169, -168,
	-236, -213, 89, 70, -177, 159, 184, 124, 168, 245,
	143, 7, -46, -210, 358, 353, 346, -240, 334, -101,
	-244, -243, -130, 353, -283, -131, 357, -277, 346, 276,
	354, -155, -130, -167, -246, -132, -130, -132, 262, -122,
	30, -159, -213, 354, 357, -324, -330, -283, 10, 11,
	57, 33, 344, 345, 346, 347, 118, 348, 349, 342,
	343, 341, 336, 337, 338, 63, 177, 250, 13, 14,
	15, 26, 202, 170, 333, 137, 266, 339, 16, 17,
	18, 155, 36, 138, -127, -135, -213, -213, -213, -213,
	-213, 208, -165, -208, 351, -101, 353, -101, -213, -159,
	7, -101, -222, 351, -231, -213, -166, 353, 5, 353,
	5, -310, 328, 120, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 219, -272, 323, -272, -272, -256, 353, -256,
	-257, 353, -256, 329, 334, 353, 30, -224, -252, -253,
	-255, -264, -258, -262, -263, 40, 46, 45, 290, 182,
	257, 269, 315, 38, 198, 146, 145, 147, 148, 149,
	150, 151, 268, 37, 227, 116, 117, 115, 97, 88,
	87, 194, 42, 41, -266, -267, -260, -261, 85, 293,
	294, 153, 39, 52, 51, 320, 278, -284, -283, -324,
	-66, -276, -159, 30, -200, 357, 169, -137, 176, 188,
	132, 200, 330, -282, 5, 4, -223, -237, 89, 173,
	-263, -275, 89, -281, -275, 89, 73, 355, -277, -111,
	357, 48, 241, 353, -144, 189, -118, -307, 327, -144,
	353, -123, 135, -122, -307, 189, -171, -111, 357, 104,
	-111, 104, -111, 357, 104, 358, 104, 104, -191, -190,
	-192, -213, 22, -195, 114, 185, -213, -215, -100, -100,
	-100, -147, -241, -213, 221, 140, -157, 22, 264, -276,
	-327, 120, -324, -276, -276, -276, -276, -276, 259, -46,
	120, -122, 169, -276, -276, 283, 140, 283, -126, -109,
	236, -108, 21, 23, 98, 317, 104, 272, 289, 252,
	272, 289, 252, 236, 104, 236, 236, 104, -305, 30,
	-149, -152, 357, 123, 30, 4, -152, 357, 354, 159,
	159, -243, -177, 159, -175, 206, -175, -175, -322, 353,
	352, -240, -277, 351, 359, -159, -239, -238, 30, -122,
	204, 354, -130, -249, 335, -122, 123, 354, 357, -205,
	325, -196, -58, 353, 89, 30, -196, -162, -163, -248,
	-164, -130, 353, -122, 354, 357, -46, -250, 295, 123,
	-270, -252, -269, 232, 233, 231, 235, 234, -252, -277,
	292, -213, -213, -213, -213, -213, -213, -213, -213, -213,
	-213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
	-213, -213, -213, 170, 137, 266, 36, 138, -213, 295,
	-213, -213, -213, -213, 181, 189, 191, 301, 110, 308,
	95, 195, -335, 281, 32, -220, -101, 353, -235, 27,
	271, 22, -227, 248, 353, -208, -213, -209, -159, 354,
	354, 357, -159, -226, 352, -222, -234, -233, 324, 354,
	-159, 321, 22, 95, 346, 7, -184, 331, 180, 86,
	133, 179, -185, 254, -311, 113, 128, 353, 354, 354,
	354, -213, -213, -178, -271, -159, 4, 331, 180, 86,
	133, 179, 254, -178, -179, -213, -159, -180, -214, -215,
	344, 345, 339, 353, 248, -181, -213, -159, -213, 43,
	166, 296, -182, -213, 123, -159, -213, -213, -213, -159,
	-159, -159, 353, 7, 7, 292, 292, 7, -45, 354,
	357, -151, 29, 351, -184, 353, -249, 357, 123, 354,
	298, -201, -136, 226, 270, 237, 258, 357, -277, -245,
	-139, -149, -140, -122, -204, -203, -291, -292, -289, 140,
	307, 111, 65, -290, 54, 221, 122, 30, 104, 213,
	30, 199, 189, -114, 286, 104, -157, -158, -158, -133,
	-134, -277, -122, -149, -193, -273, 353, 345, -194, 248,
	249, 357, -107, 31, 93, 160, -130, -326, -122, 259,
	-46, -130, -133, -130, 357, 295, -188, 65, 59, -203,
	135, 59, -289, -122, 307, -188, 65, -188, 65, 65,
	-245, 33, -58, 123, 33, -58, 123, 295, -133, 295,
	295, -245, 353, 354, -205, -247, -154, -243, -277, -205,
	-236, -243, -243, -176, 314, 199, 159, -243, -238, 354,
	-323, 7, -240, -239, 7, -212, -211, 121, 187, 354,
	-122, 353, -240, 354, -94, 134, 195, 276, 123, -130,
	-173, 243, -213, -173, -198, 199, -155, 319, -122, -173,
	-153, 357, 123, 338, -155, -213, -326, -284, 332, -213,
	-213, 295, -335, 281, -220, -213, 181, 191, 301, 110,
	308, 95, 195, 123, 353, -214, -214, -159, -217, 353,
	-159, 352, 361, 354, -213, 352, 352, 357, -232, -233,
	99, -213, -146, 357, -145, -213, -159, -159, 354, 354,
	295, 295, 295, 295, 353, -316, 207, 353, 353, -213,
	30, 357, 354, 123, 354, 354, -186, 215, 354, 10,
	11, 344, 345, 346, 347, 118, 348, 349, 342, 343,
	341, 336, 337, 338, 63, 177, 250, 13, 14, 15,
	155, 138, -214, -214, -214, -159, 353, 354, -218, -219,
	123, 120, 30, -182, -182, -182, 354, 123, -159, 357,
	357, 357, 354, 354, 354, 7, 354, 357, 354, 332,
	332, 354, -252, 351, 352, 7, 7, -97, 327, -283,
	-326, -119, 305, 62, 226, -281, 354, 354, 357, -252,
	-123, 140, 353, -123, -122, 353, 160, 160, -58, -157,
	5, -58, -130, 104, -115, 100, -334, 338, -122, -111,
	-111, -111, -194, -213, -241, -130, 358, 357, -249, -108,
	-130, -122, -122, 189, -203, 135, -113, 189, -122, -122,
	135, -122, 135, -122, -122, -109, 236, -58, 353, -58,
	353, -122, 236, -122, -130, 236, -45, -170, 128, -249,
	357, -170, -176, 353, -213, -243, 352, 354, 357, -239,
	352, 357, 360, 338, -240, 353, -149, -238, -97, 123,
	282, 276, -161, 190, -173, 64, 354, -205, -163, -154,
	-236, 354, 295, -213, -213, -214, -214, 123, 353, -213,
	-224, 26, 26, 354, -159, 354, 357, -209, -213, 354,
	-222, 101, -213, 291, 354, 321, -146, -146, -146, 5,
	180, 133, 179, -185, 179, -185, -185, 7, -317, -122,
	353, 325, -145, 354, -270, -252, -213, -218, -213, -270,
	-252, -214, -214, -214, -214, -214, -214, -214, -214, -214,
	-214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
	95, 189, 195, -214, 357, -159, 354, -219, -218, -213,
	-213, -252, 354, 354, 354, -159, -213, -213, -213, 354,
	7, 7, 352, 354, 201, -141, 139, -204, -293, 353,
	-123, -148, -242, -122, -304, 353, -301, -302, -128, 353,
	-290, -213, 353, 353, 353, -144, 353, -122, -116, 165,
	-334, -280, -307, 200, 354, -107, -277, -122, 295, 295,
	104, 189, 316, -106, 98, 262, -189, 104, -111, 104,
	-111, 295, -188, 65, -159, -159, 295, 295, 354, -221,
	130, 44, -243, -221, -149, -210, 7, -211, -277, 351,
	-239, -149, 354, -284, 292, -197, 353, 199, -58, -173,
	338, -283, 26, 26, -213, -224, 354, -213, -213, 354,
	-213, 352, -213, 5, -213, 354, 354, 354, 354, -318,
	-122, -213, 354, 354, 354, -219, 123, 95, 195, 353,
	-213, 354, 354, 357, 354, 354, 354, 352, 353, 138,
	-294, 65, -295, 57, 111, 69, 189, 191, 307, 221,
	54, 89, 230, -148, 353, 354, 357, -129, -166, 57,
	-129, -213, 353, -149, 354, -148, -149, -139, 30, -148,
	199, -117, 164, -334, -280, -114, -107, -122, -122, -203,
	104, 189, 89, 189, 89, 82, 303, -122, -122, -130,
	-122, -122, 354, 354, -122, -130, -313, 326, -213, -159,
	-313, 354, -240, 7, 354, -216, -128, -122, 96, -149,
	65, -169, -101, 353, -213, -213, 354, 354, -146, -312,
	212, 354, -214, 123, 353, -224, 354, -213, -96, -95,
	5, 210, -122, -277, -122, 111, 135, 191, 160, 353,
	-214, -130, 354, -148, -202, -331, 68, 279, -242, -107,
	-277, -107, 354, -159, 354, 354, 354, 354, -58, 354,
	-130, -334, -280, -115, -203, 191, 191, -213, -252, -111,
	-111, 295, 295, 295, 295, -314, -315, -122, -239, 352,
	353, 309, 190, 354, -122, 354, -146, 44, -214, -224,
	354, 354, 357, 354, -98, 338, -130, -295, -123, 189,
	-213, -124, 353, -202, 354, -141, 353, -129, -146, 230,
	-141, -202, 353, -280, -116, -110, 57, -122, -122, 353,
	353, 357, 30, -159, 262, -205, -319, 225, 249, -159,
	354, -95, 5, 353, 104, 354, -298, 178, -122, -141,
	-202, -149, -107, 354, -130, -141, -148, -117, -105, 314,
	-277, -159, -159, -315, -317, -146, -162, 354, -320, -321,
	36, 304, 73, -213, -320, -149, 111, -296, -299, -297,
	199, 124, 211, 267, 354, -141, 354, -144, 354, -213,
	354, 354, 354, -205, -321, 218, 119, 248, 218, 119,
	354, -122, -297, 199, -299, 199, 309, 92, -298, -202,
	26, -112, 48, 241, -300, 186, 241, 48, 262, -300,
	-296, -141, -321, 20, 191, 89,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 35, 36, 37, 38, 0, 107,
	108, 0, 111, 112, 113, 114, 115, 116, 0, 0,
	0, 123, 124, 125, 126, 127, 0, 508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 479, -2, 0,
	0, 193, 194, 195, 196, 197, 0, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 414, 415, 416, 510, 39,
	40, 41, 42, 43, 46, 47, 48, 49, 44, 45,
	0, 385, 507, 0, -2, 518, 0, 0, 0, 423,
	0, 423, 423, 427, 0, 0, 0, 516, 493, 494,
	0, 0, -2, 0, 174, 0, 1056, 983, 989, 990,
	1014, 1015, 1016, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
	1241, 1242, 1243, 1244, 0, 985, 1056, 168, 1116, 170,
	0, 0, 0, 0, 118, 119, 120, 121, 122, 167,
	144, 0, 151, 152, 153, 154, 155, 156, 157, 158,
	146, 147, 148, 149, 150, 0, 177, 178, 179, 181,
	182, 183, 184, 185, 186, 187, 304, 1028, 1029, 1030,
	1031, 1032, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 0, 0,
	164, 0, 0, 0, 413, 1143, 429, 411, 190, 0,
	264, 265, 266, 267, 268, 0, -2, 1043, 1231, 1149,
	202, 1170, 210, 1237, 0, 213, 218, -2, 140, 0,
	509, 0, 0, 0, 0, 0, 0, 0, 384, -2,
	489, 490, 0, 0, 0, 0, 0, -2, 0, 513,
	513, 513, 0, 0, 490, 0, 192, 221, 222, 223,
	232, 233, 234, 235, 374, 0, 376, 242, 243, 1010,
	0, 1024, 1025, 1026, 1027, 262, 0, 0, 0, 265,
	0, 275, 306, 0, 0, 0, 0, 0, 282, 0,
	285, 0, 0, 290, 294, 0, 0, 300, 0, 0,
	431, 422, 431, 419, 420, 421, 424, 0, 0, 0,
	0, 0, 499, 1122, 502, 996, 500, 0, 0, 515,
	514, 0, 546, 0, 498, 508, 560, 597, 574, 565,
	0, 0, 2, 0, 0, 175, 176, 993, 991, 992,
	0, 0, 0, 986, 962, 960, 961, 169, 171, 0,
	0, 0, 0, 603, 597, 165, 0, 0, 159, 161,
	1243, 0, 0, 0, 309, 705, 0, 0, 0, 0,
	0, 0, 797, 799, 1205, 1231, 0, 801, 802, 0,
	804, 806, 807, 0, 810, 811, 953, 985, 999, 1000,
	1001, 1002, 0, 0, 1005, 0, 1007, 1008, 1009, 853,
	820, -2, -2, 997, 633, 634, 635, 636, -2, 1245,
	824, 826, 828, 830, 831, 832, 833, 0, 1189, 1206,
	1207, 1227, 1228, 1236, 1240, 1241, 1213, 1224, 1214, 1201,
	1211, 1222, 1062, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1023, 667,
	668, 673, 674, 676, 0, 0, 0, 412, 0, 428,
	191, 269, 198, 0, 0, 201, 1200, 1170, 204, 432,
	434, 435, 436, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 141, 0, 81, 601, 109, 110, 357,
	1213, -2, 357, 1018, 506, 1213, -2, 0, 81, 1213,
	138, 81, 1213, 81, 1213, 981, 988, 134, 1213, 136,
	1213, 485, 527, 528, 0, 0, 0, 0, 511, 512,
	0, 0, 0, 481, 482, 375, 1012, 1011, 263, 270,
	91, 92, 0, 283, 291, 0, 0, 308, 0, 0,
	0, 0, 0, 0, 284, 292, 508, 0, 0, 0,
	296, 297, 0, 0, 0, 0, 417, 430, 418, 0,
	426, 0, 1213, 597, 0, 1213, 0, 0, 1213, 0,
	501, 0, 0, 549, 973, 977, 978, 549, 547, 0,
	970, 968, 969, 0, 0, 0, 0, 594, 594, 594,
	592, 568, 0, 574, 0, 0, 598, 586, 0, -2,
	565, 0, 599, 0, 588, 984, 0, 958, 959, 104,
	0, 0, 979, 963, 607, 0, 456, 0, 0, 604,
	0, 0, 909, 508, 0, 0, 180, 0, 0, 0,
	0, 0, 888, 889, 890, 891, 892, 893, 896, 897,
	894, 895, 898, 899, 900, 0, 0, 0, 901, 902,
	903, 0, 0, 905, 0, 907, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 904, 710, 711, 712, 734,
	735, 0, 798, 964, 957, 800, 0, -2, 909, 0,
	803, 808, 809, 0, 0, 952, -2, 0, 1004, 0,
	702, 855, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 938, 0, 0, 0, 0, 0, 0,
	0, 0, 652, 670, 681, 678, 677, 654, 0, 653,
	651, 0, 655, 0, 0, 0, 508, 0, 911, 615,
	616, 617, 618, 619, 702, 622, 623, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 664, 0, 639,
	639, 639, 656, 657, 665, 666, 671, 672, 683, 684,
	686, 688, 682, 682, 682, 679, 680, 588, 93, 0,
	199, 0, 0, 0, 205, 0, 0, 437, 229, 230,
	231, 439, 440, 211, 236, 237, 238, 239, 240, 241,
	0, 206, 208, 219, 207, 209, 212, 0, 142, 377,
	0, 79, 80, 315, 0, 0, 378, 0, 505, 0,
	0, 0, 1213, 1017, 444, 0, 488, 128, 0, 0,
	130, 0, 132, 0, 0, 0, 0, 0, 525, 526,
	529, 533, 534, 537, 540, 541, 531, 705, 495, 496,
	497, 519, 520, 395, 0, 0, 271, 272, 273, 274,
	276, 0, 305, 277, 278, 279, 280, 281, 286, 288,
	508, 293, 295, 298, 299, 0, 0, 0, 425, 50,
	408, 60, 0, 408, 408, 0, 0, 0, 0, 56,
	0, 0, 58, 0, 0, 0, 0, 0, 503, 0,
	0, 607, 0, 0, 0, 976, 607, 0, 972, 0,
	0, 0, 0, 0, 589, 593, 590, 591, 0, 0,
	574, 586, 557, 0, 0, 0, 564, 585, 0, 584,
	573, -2, 0, 96, 0, 994, 0, 0, 0, 468,
	0, 468, 458, 0, 0, 0, 468, 471, 472, 474,
	475, 0, 0, 605, 166, 0, 145, 160, 0, 0,
	706, 611, 612, 658, 659, 660, 661, 662, 707, 708,
	0, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, -2, -2, -2, 726, 727, 728, -2, -2, -2,
	732, 733, -2, 906, 908, 0, 967, 0, -2, 0,
	-2, -2, -2, -2, 746, 0, 748, 751, 753, 755,
	0, 0, 0, 0, 966, 765, 944, 0, 0, 885,
	886, 887, 750, 0, 0, 965, 956, 0, 0, -2,
	805, 0, 0, 0, 915, 916, 951, 947, 0, 812,
	518, 0, 0, 0, 0, 0, 1013, 689, 690, 691,
	692, 693, 694, 703, 863, 0, 0, 0, 825, 827,
	829, 0, 0, 0, 0, 919, -2, -2, -2, -2,
	-2, -2, -2, 0, 0, 909, 929, 0, 0, 768,
	0, 0, 0, 0, 1231, 0, 909, 937, 0, 0,
	0, 0, 0, 909, 0, 943, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 163,
	0, 608, 610, 0, 620, 0, 103, 0, 0, 200,
	0, 433, 438, 0, 226, 0, 228, 0, 143, 602,
	0, 0, 314, 993, 316, 318, 319, 320, 321, 1018,
	0, 1018, 0, 347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 446, 452, 0, 139, 81, 81, 982,
	81, 987, 135, 137, 0, 535, 0, 0, 532, 538,
	539, 0, 522, 393, 394, 0, 0, 307, 188, 287,
	289, 301, 302, 588, 0, 0, 0, 0, 407, 62,
	1213, 0, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 55, 0, 0, 0, 0,
	0, 0, 508, 995, 543, 974, 588, 550, 975, 543,
	971, 576, 0, 578, 0, 0, 0, 580, 0, 569,
	0, 571, 586, 562, 0, 0, 555, 0, 554, 574,
	582, 0, 0, 600, 103, 0, 0, 105, 0, 980,
	117, 0, 606, 453, 468, 0, 0, 460, 457, 455,
	607, 0, 0, 0, 0, 910, 172, 0, 0, -2,
	-2, 0, 0, 0, 766, -2, 747, 749, 752, 754,
	756, 0, 0, 0, 0, 0, 0, 0, 767, 0,
	0, 954, 957, -2, 910, 913, 914, 0, 0, 948,
	0, 0, 0, 0, 517, 518, 518, 518, 818, 0,
	0, 0, 0, 0, 0, 819, 0, 0, 0, 0,
	0, 0, 836, 0, 837, 838, 0, 0, 839, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 771, 772, 773, 0, 0, 840, 935, 936,
	0, 0, 0, 0, 0, 0, 845, 0, 942, 0,
	0, 0, 849, 850, 851, 0, 637, 0, 663, 685,
	687, 675, 912, 0, 613, 0, 0, 89, 0, 94,
	173, 203, 224, 225, 227, 220, 323, 356, 0, 329,
	0, 1018, 0, 0, 0, 0, 0, 0, 312, 357,
	379, 381, 0, 0, 448, 452, 0, 451, 506, 129,
	131, 133, 0, 0, 521, 395, 0, 0, 303, 61,
	397, 0, 0, 0, 64, 1213, 72, 0, 410, 73,
	1213, 81, 1213, 81, 74, 51, 408, 52, 0, 53,
	0, 405, 0, 396, 403, 0, 0, 545, 0, 548,
	0, 545, 577, 0, 596, 579, 560, 570, 0, 567,
	558, 0, 559, 0, 586, 0, 0, 566, 88, 0,
	0, 106, 466, 467, 454, 465, 0, 468, 473, 470,
	476, 0, 0, 709, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 945, 0, 880, 0, 0, 956, -2,
	917, 946, 950, 0, 813, 0, 0, 0, 0, 1006,
	695, 696, 697, 698, 699, 700, 701, 0, 861, 862,
	866, 0, 0, 823, 0, 0, 918, 928, 930, 769,
	770, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, -2, -2, -2, 787, 788, 789, -2, -2, -2,
	0, 0, 0, 931, 0, 0, 883, 933, 934, 939,
	940, 0, 842, 843, 844, 941, 0, 0, 0, 669,
	0, 0, 614, 621, 0, 310, 0, 317, 327, 0,
	0, 0, 386, 392, 392, 0, 821, 822, 0, 0,
	346, 0, 0, 0, 315, 0, 0, 0, 450, 452,
	0, 443, 444, 530, 536, 523, 395, 189, 0, 0,
	0, 0, 82, 66, 0, 0, 0, 0, 70, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 504, 857,
	0, 0, 551, 857, 0, 574, 572, 556, 552, 0,
	563, 0, 583, 95, 0, 0, 0, 0, 459, 469,
	0, 90, 0, 0, -2, 0, 759, -2, -2, 879,
	910, 955, 949, 1003, 518, 814, 816, 817, 704, 868,
	865, 0, 852, 834, 835, 927, 0, 0, 0, 0,
	910, 882, 841, 0, 847, 848, 638, 609, 0, 0,
	328, 0, 331, 0, 0, 0, 0, 337, 338, 0,
	0, 0, 0, 0, 0, 355, 0, 395, 998, 0,
	395, 0, 0, 0, 348, 0, 0, 0, 0, 0,
	0, 441, 452, 0, 445, 446, 524, 399, 401, 63,
	0, 0, 78, 0, 0, 409, 0, 81, 81, 398,
	0, 0, 0, 0, 406, 404, 491, 0, 544, 542,
	492, 595, 586, 0, 581, 587, 0, 0, 0, 0,
	0, 477, 478, 0, -2, -2, 760, 881, 0, 518,
	0, 854, -2, 0, 0, 0, 884, 0, 0, 100,
	98, 0, 0, 332, 333, 1018, 0, 336, 339, 0,
	341, 1020, 355, 0, 323, 0, 352, 353, 387, 388,
	391, 389, 392, 518, 345, 350, 0, 323, 313, 355,
	0, 0, 447, 448, 65, 67, 68, 77, 85, 69,
	75, 0, 0, 0, 0, 856, 858, 0, 561, 553,
	0, 0, 462, 607, 464, 815, 871, 0, -2, 0,
	795, 846, 0, 102, 99, 0, 0, 330, 334, 0,
	0, 361, 0, 323, 355, 349, 0, 395, 0, 0,
	311, 323, 0, 449, 450, 87, 0, 400, 402, 0,
	0, 0, 0, 518, 0, 463, 0, 0, 0, 867,
	796, 101, 97, 0, 0, 340, 366, 0, 0, 343,
	323, 0, 390, 813, 357, 382, 0, 442, 71, 0,
	84, 0, 0, 859, 860, 0, 607, 864, 869, 872,
	-2, 1173, 1052, 0, 870, 0, 0, 342, 362, 363,
	0, 358, 359, 360, 1019, 344, 354, 361, 355, 86,
	57, 59, 0, 461, 0, 874, 875, 876, 877, 878,
	326, 335, 364, 0, 365, 0, 0, 0, 366, 323,
	0, 322, 324, 325, 367, 0, 370, 371, 0, 368,
	351, 383, 873, 369, 372, 373,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 342, 3, 348, 343, 3,
	353, 354, 346, 344, 357, 345, 355, 347, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 361, 356,
	336, 338, 337, 3, 358, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 351, 3, 352, 349, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 359, 341, 360, 339,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 340, 57679, 350,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:860
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:866
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:872
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 34:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:956
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:962
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:968
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:974
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:984
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:990
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:994
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1040
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1063
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = nil
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = DropCascade
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = DropRestrict
		}
	case 81:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = DropDefault
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 83:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 84:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1135
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1136
		{
		}
	case 86:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1139
		{
			return unimplemented(sqllex, "alter using")
		}
	case 87:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1140
		{
		}
	case 88:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1156
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Load{Table: sqlDollar[4].union.expr(), From: sqlDollar[6].union.exprs(), To: sqlDollar[8].union.expr()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 98:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.str = ""
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1221
		{
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1244
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1250
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1277
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1278
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1279
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1404
		{ /* SKIP DOC */
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1602
		{ /* SKIP DOC */
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1603
		{ /* SKIP DOC */
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1604
		{
			return unimplemented(sqllex, "set local")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1669
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1672
		{
			return unimplemented(sqllex, "set from current")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1679
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1689
		{
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1691
		{
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = Low
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = Normal
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = High
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.str = "client_encoding"
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1967
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1971
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1999
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2003
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2007
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2019
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2041
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2112
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2116
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = DropDefault
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2126
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2185
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2331
		{
			return unimplemented(sqllex, "match full")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2332
		{
			return unimplemented(sqllex, "match partial")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2333
		{
			return unimplemented(sqllex, "match simple")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2334
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2340
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2341
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2342
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2343
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2344
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2353
		{
			return unimplemented(sqllex, "no action")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2356
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2357
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2358
		{
			return unimplemented(sqllex, "action set null")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2359
		{
			return unimplemented(sqllex, "action set default")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = true
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = false
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2467
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2470
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2471
		{
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = Ascending
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = Descending
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 396:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2511
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2513
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = true
		}
	case 408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = false
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2546
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2547
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2558
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2596
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2605
		{
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2606
		{
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.str = ""
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.str = ""
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2652
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = ReadOnly
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = ReadWrite
		}
	case 441:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.str = ""
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.str = ""
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.str = ""
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.str = ""
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2760
		{
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2761
		{
		}
	case 453:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2827
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 469:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2861
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2862
		{
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3092
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3093
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3094
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3097
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3098
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3101
		{
			return unimplemented(sqllex, "cte")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3104
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3105
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3108
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3109
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3112
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3113
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = true
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = false
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = false
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = true
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3136
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3137
		{
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3184
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3204
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3256
		{
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3257
		{
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3260
		{
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3261
		{
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &From{}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3351
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3396
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3413
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = nil
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3478
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3484
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = true
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = false
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.str = astFullJoin
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.str = astLeftJoin
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.str = astRightJoin
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.str = astInnerJoin
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3595
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3596
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3682
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3695
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3696
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			return unimplementedWithIssue(sqllex, 17156)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3721
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3784
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3793
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = nil
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3858
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3954
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3986
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4025
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4026
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = year
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = month
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = day
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = hour
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = minute
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = month
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = hour
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = minute
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = minute
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = nil
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = second
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4121
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4156
		{
			return unimplemented(sqllex, "at tz")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4324
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4390
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4563
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4616
		{
			return unimplemented(sqllex, "variadic")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4617
		{
			return unimplemented(sqllex, "variadic")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4640
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			return unimplemented(sqllex, "func_application")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4661
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			return unimplemented(sqllex, "current role")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			return unimplemented(sqllex, "current user")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			return unimplemented(sqllex, "session user")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4689
		{
			return unimplemented(sqllex, "user")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4718
		{
			return unimplemented(sqllex, "treat")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4762
		{
			return unimplemented(sqllex, "within group")
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4763
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = Window(nil)
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4798
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 864:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.str = ""
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4860
		{
			return unimplemented(sqllex, "frame range")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4861
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4862
		{
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4865
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4866
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4872
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4873
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4874
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4875
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4876
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = Any
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = Some
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = All
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = Plus
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = Minus
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = Mult
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = Div
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = FloorDiv
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = Mod
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = Bitand
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = Bitor
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = Pow
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = Bitxor
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = LT
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = GT
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = EQ
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = LE
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = GE
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = NE
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = Like
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = NotLike
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = ILike
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = NotILike
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5240
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5241
		{
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5324
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5359
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5372
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5376
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5403
		{
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5439
		{
			return unimplemented(sqllex, "func const")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5441
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5445
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5448
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = DNull
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5475
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.str = ""
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
