// Copyright 2016 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// APIs for distributed SQL; see docs/RFCS/distributed_sql.md

syntax = "proto2";
package cockroach.sql.distsqlrun;
option go_package = "distsqlrun";

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

import "roachpb/data.proto";
import "sql/distsqlrun/data.proto";
import "sql/distsqlrun/processors.proto";

message SetupFlowRequest {
  reserved 2;

  optional roachpb.Transaction txn = 1 [(gogoproto.nullable) = false];

  // Version of distsqlrun protocol; a server accepts a certain range of
  // versions, up to its own version. See server.go for more details.
  optional uint32 version = 5 [(gogoproto.nullable) = false,
                               (gogoproto.casttype) = "DistSQLVersion"];

  optional FlowSpec flow = 3 [(gogoproto.nullable) = false];

  optional EvalContext evalContext = 6 [(gogoproto.nullable) = false];
}

// EvalContext is used to marshall some planner.EvalContext members.
message EvalContext {
  optional int64 stmtTimestampNanos = 1 [(gogoproto.nullable) = false];
  optional int64 txnTimestampNanos = 2 [(gogoproto.nullable) = false];
  reserved 3;
  // The name of the location according to whose current timezone we're going to
  // parse timestamps. Used to init EvalContext.Location.
  optional string location = 4 [(gogoproto.nullable) = false];
  optional string database = 5 [(gogoproto.nullable) = false];
  repeated string searchPath = 6;
  optional string user = 7 [(gogoproto.nullable) = false];
}

message SimpleResponse {
  optional Error error = 1;
}

// ConsumerSignal are messages flowing from consumer to producer (so, from RPC
// server to client) for the FlowStream RPC.
message ConsumerSignal {
  option (gogoproto.onlyone) = true;

  // The consumer is done (doesn't need to consume any more rows) and is asking
  // the producer to push whatever trailing metadata it has and close its
  // stream.
  optional DrainRequest drain_request = 1;

  // Used in the RunSyncFlow case; the first message on the client stream must
  // contain this message.
  optional SetupFlowRequest setup_flow_request = 2;

  // Consumer->Producer handshake messages. See message definition.
  optional ConsumerHandshake handshake = 3;
}

message DrainRequest {
}

// ConsumerHandshake is the first one or two message sent in the
// consumer->producer direction on a stream. It informs the producer about the
// status of the consumer flow.
// Introduced in version 1.1 for future use by producers.
message ConsumerHandshake {
  // consumer_scheduled is true if the flow that's consuming this stream has
  // already been scheduled and so it is ready to consume data. If this is
  // false, then the consumer has not yet been scheduled. In this case, the
  // server (i.e. the consumer node) will send another ConsumerHandshake with
  // consumer_scheduled = true when the consumer is finally scheduled (unless
  // the scheduling timeout fires first, in which case the stream will be
  // closed server-side).
  optional bool consumer_scheduled = 1 [(gogoproto.nullable) = false];

  // If consumer_scheduled is false, then this indicates the deadline for the
  // scheduling of the consumer flow. If the flow is not scheduled within that
  // dealine, this stream will be disconnected by the server-side.
  optional google.protobuf.Timestamp consumer_schedule_deadline = 2 [(gogoproto.stdtime) = true];

  // The server's DistSQL version range.
  optional uint32 version = 3 [(gogoproto.nullable) = false,
                               (gogoproto.casttype) = "DistSQLVersion"];
  optional uint32 min_accepted_version = 4 [(gogoproto.nullable) = false,
                                            (gogoproto.casttype) = "DistSQLVersion"];
}

service DistSQL {
  // RunSyncFlow instantiates a flow and streams back results of that flow.
  // The request must contain one flow, and that flow must have a single mailbox
  // of the special sync response type.
  rpc RunSyncFlow(stream ConsumerSignal) returns (stream ProducerMessage) {}

  // SetupFlow instantiates a flow (subgraphs of a distributed SQL
  // computation) on the receiving node.
  rpc SetupFlow(SetupFlowRequest) returns (SimpleResponse) {}

  // FlowStream is used to push a stream of messages that is part of a flow. The
  // first message will have a StreamHeader which identifies the flow and the
  // stream (mailbox).
  //
  // The response is a stream that the consumer uses to perform a handshake and
  // to signal the producer when it wants it to start draining. The client (i.e.
  // the producer) will read from this consumer->producer stream until it has
  // sent everything it needs to send and it performs CloseSend() on the
  // producer->consumer stream; after that point the producer isn't listening
  // for consumer signals any more.
  rpc FlowStream(stream ProducerMessage) returns (stream ConsumerSignal) {}
}
