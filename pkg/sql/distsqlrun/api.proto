// Copyright 2016 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Author: Radu Berinde (radu@cockroachlabs.com)
//
// APIs for distributed SQL; see docs/RFCS/distributed_sql.md

syntax = "proto2";
package cockroach.sql.distsql;
option go_package = "distsql";

import "cockroach/pkg/roachpb/data.proto";
import "cockroach/pkg/roachpb/errors.proto";
import "cockroach/pkg/sql/distsql/data.proto";
import "cockroach/pkg/sql/distsql/processors.proto";
import "cockroach/pkg/util/tracing/span_context_carrier.proto";
import "gogoproto/gogo.proto";

message SetupFlowRequest {
  optional roachpb.Transaction txn = 1 [(gogoproto.nullable) = false];
  // If set, the context of an active tracing span.
  optional util.tracing.SpanContextCarrier trace_context = 2;
  optional FlowSpec flow = 3 [(gogoproto.nullable) = false];
}

message SimpleResponse {
  // TODO(radu): we should be using our own error instead of roachpb.Error.
  // One important error field for distsql is whether the error is
  // "authoritative": if a query is distributed on multiple nodes and one node
  // hits an error, the other nodes may hit errors as well as a consequence
  // (e.g. streams can't connect to the failed flow). The node that started the
  // flow needs to distinguish which errors are caused by non-availability of
  // other nodes so they don't obscure the real error.
  optional roachpb.Error error = 1;
}

service DistSQL {
  // RunSyncFlow instantiates a flow and streams back results of that flow.
  // The request must contain one flow, and that flow must have a single mailbox
  // of the special sync response type.
  rpc RunSyncFlow(SetupFlowRequest) returns (stream StreamMessage) {}

  // SetupFlow instantiates a flow (subgraps of a distributed SQL
  // computation) on the receiving node.
  rpc SetupFlow(SetupFlowRequest) returns (SimpleResponse) {}

  // FlowStream is used to push a stream of messages that is part of a flow. The
  // first message will have a StreamHeader which identifies the flow and the
  // stream (mailbox).
  rpc FlowStream(stream StreamMessage) returns (SimpleResponse) {}
}
