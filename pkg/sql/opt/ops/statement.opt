# statement.opt contains Optgen language definitions for non-DML statements with
# specific optimizer support, such as CreateTable.
#
# Although though many of them have no return result, they are still treated as
# if they were expressions with a zero row, zero column result.

# CreateTable represents a CREATE TABLE statement.
[Relational, DDL, Mutation]
define CreateTable {
    # Input is only used if the AS clause was used in the CREATE TABLE
    # statement. If it was not used, then the Input is a dummy zero row, zero
    # column Values expression (and nil inputs are not allowed).
    Input RelExpr
    _ CreateTablePrivate
}

[Private]
define CreateTablePrivate {
    # Schema is the ID of the catalog schema into which the new table goes.
    Schema SchemaID

    # InputCols gives the ordering and naming of input columns. It is only
    # defined when the AS clause was used in the CREATE TABLE statement.
    InputCols Presentation

    # Syntax is the CREATE TABLE AST node. All data sources inside AsSource are
    # fully qualified.
    Syntax CreateTable
}

[Relational, DDL, Mutation]
define CreateView {
    _ CreateViewPrivate
}

[Private]
define CreateViewPrivate {
    # Schema is the ID of the catalog schema into which the new table goes.
    Schema SchemaID
    ViewName string
    Temporary bool
    IfNotExists bool
    Replace bool

    # ViewQuery contains the query for the view; data sources are always fully
    # qualified.
    ViewQuery string

    # Columns that correspond to the output of the view query, with the names
    # they will have as part of the view.
    Columns Presentation

    # Deps contains the data source dependencies of the view.
    Deps ViewDeps
}

# Explain returns information about the execution plan of the "input"
# expression.
[Relational]
define Explain {
    Input RelExpr
    _ ExplainPrivate
}

[Private]
define ExplainPrivate {
    # Options contains settings that control the output of the explain statement.
    Options ExplainOptions

    # ColList stores the column IDs for the explain columns.
    ColList ColList

    # Props stores the required physical properties for the enclosed expression.
    Props PhysProps

    # StmtType stores the type of the statement we are explaining.
    StmtType StatementType
}

# ShowTraceForSession returns the current session traces.
[Relational]
define ShowTraceForSession {
    _ ShowTracePrivate
}

[Private]
define ShowTracePrivate {
    TraceType ShowTraceType

    # Compact indicates that we output a smaller set of columns; set
    # when SHOW COMPACT [KV] TRACE is used.
    Compact bool

    # ColList stores the column IDs for the SHOW TRACE columns.
    ColList ColList
}

# OpaqueRel is an opaque relational operator which is planned outside of the
# optimizer. The operator contains an opaque metadata which is passed to the
# exec factory.
#
# This is used for statements that are not directly supported by the optimizer,
# and which don't use the result of other relational expressions (in other
# words, they are a "leaf" operator).
#
# OpaqueRel can produce data and can be used as a data source as part of a
# larger enclosing query.
[Relational]
define OpaqueRel {
    _ OpaqueRelPrivate
}

# OpaqueMutation is a variant of OpaqueRel for operators that can mutate data as
# part of the transaction.
[Relational, Mutation]
define OpaqueMutation {
    _ OpaqueRelPrivate
}

# OpaqueMutation is a variant of OpaqueRel for operators that cause a schema
# change and cannot be executed following a mutation in the same transaction.
[Relational, Mutation, DDL]
define OpaqueDDL {
    _ OpaqueRelPrivate
}

[Private]
define OpaqueRelPrivate {
    Columns ColList
    Metadata OpaqueMetadata
}

# AlterTableSplit represents an `ALTER TABLE/INDEX .. SPLIT AT ..` statement.
[Relational, Mutation]
define AlterTableSplit {
    # The input expression provides values for the index columns (or a prefix of
    # them).
    Input RelExpr

    # Expiration is a string scalar that indicates a timestamp after which the
    # ranges are eligible for automatic merging (or Null if there is no
    # expiration).
    Expiration ScalarExpr
    _ AlterTableSplitPrivate
}

[Private]
define AlterTableSplitPrivate {
    # Table identifies the table to alter. It is an id that can be passed to
    # the Metadata.Table method in order to fetch cat.Table metadata.
    Table TableID

    # Index identifies the index to scan (whether primary or secondary). It
    # can be passed to the cat.Table.Index() method in order to fetch the
    # cat.Index metadata.
    Index IndexOrdinal

    # Props stores the required physical properties for the input expression.
    Props PhysProps

    # Columns stores the column IDs for the statement result columns.
    Columns ColList
}

# AlterTableUnsplit represents an `ALTER TABLE/INDEX .. UNSPLIT AT ..`
# statement.
[Relational, Mutation]
define AlterTableUnsplit {
    Input RelExpr
    _ AlterTableSplitPrivate
}

# AlterTableUnsplit represents an `ALTER TABLE/INDEX .. UNSPLIT ALL` statement.
[Relational, Mutation]
define AlterTableUnsplitAll {
    _ AlterTableSplitPrivate
}

# AlterTableRelocate represents an `ALTER TABLE/INDEX .. SPLIT AT ..` statement.
[Relational, Mutation]
define AlterTableRelocate {
    # The input expression provides values for the index columns (or a prefix of
    # them).
    Input RelExpr
    _ AlterTableRelocatePrivate
}

[Private]
define AlterTableRelocatePrivate {
    RelocateLease bool
    _ AlterTableSplitPrivate
}

# ControlJobs represents a `PAUSE/CANCEL/RESUME JOBS` statement.
[Relational]
define ControlJobs {
    # The input expression returns job IDs (as integers).
    Input RelExpr
    _ ControlJobsPrivate
}

[Private]
define ControlJobsPrivate {
    # Props stores the required physical properties for the input
    # expression.
    Props PhysProps
    Command JobCommand
}

# CancelQueries represents a `CANCEL QUERIES` statement.
[Relational]
define CancelQueries {
    # The input expression returns query IDs (as strings).
    Input RelExpr
    _ CancelPrivate
}

[Private]
define CancelPrivate {
    # Props stores the required physical properties for the input
    # expression.
    Props PhysProps

    # IfExists is set if we should tolerate IDs that don't exist.
    IfExists bool
}

# CancelSessions represents a `CANCEL SESSIONS` statement.
[Relational]
define CancelSessions {
    # The input expression returns session IDs (as strings).
    Input RelExpr
    _ CancelPrivate
}

# Export represents an `EXPORT` statement.
[Relational]
define Export {
    # Input is the relational expression for the data we are exporting.
    Input RelExpr

    # FileName is the string URI for the output file.
    FileName ScalarExpr
    Options KVOptionsExpr
    _ ExportPrivate
}

[Private]
define ExportPrivate {
    # FileFormat describes the requested format, e.g. "CSV".
    FileFormat string

    # Props stores the required physical properties for the input expression.
    Props PhysProps

    # Columns stores the column IDs for the statement result columns.
    Columns ColList
}
