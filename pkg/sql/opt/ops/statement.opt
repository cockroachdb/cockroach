# statement.opt contains Optgen language definitions for non-DML statements with
# specific optimizer support, such as CreateTable.
#
# Although though many of them have no return result, they are still treated as
# if they were expressions with a zero row, zero column result.

# CreateTable represents a CREATE TABLE statement.
[Relational, DDL, Mutation]
define CreateTable {
    # Input is only used if the AS clause was used in the CREATE TABLE
    # statement. If it was not used, then the Input is a dummy zero row, zero
    # column Values expression (and nil inputs are not allowed).
    Input RelExpr

    _ CreateTablePrivate
}

[Private]
define CreateTablePrivate {
    # Schema is the ID of the catalog schema into which the new table goes.
    Schema SchemaID

    # InputCols gives the ordering and naming of input columns. It is only
    # defined when the AS clause was used in the CREATE TABLE statement.
    InputCols Presentation

    # Syntax is the CREATE TABLE AST node.
    Syntax CreateTable
}

# Explain returns information about the execution plan of the "input"
# expression.
[Relational]
define Explain {
    Input RelExpr

    _ ExplainPrivate
}

[Private]
define ExplainPrivate {
    # Options contains settings that control the output of the explain statement.
    Options ExplainOptions

    # ColList stores the column IDs for the explain columns.
    ColList ColList

    # Props stores the required physical properties for the enclosed expression.
    Props PhysProps

    # StmtType stores the type of the statement we are explaining.
    StmtType StatementType
}

# ShowTraceForSession returns the current session traces.
[Relational]
define ShowTraceForSession {
    _ ShowTracePrivate
}

[Private]
define ShowTracePrivate {
    TraceType ShowTraceType

    # Compact indicates that we output a smaller set of columns; set
    # when SHOW COMPACT [KV] TRACE is used.
    Compact bool

    # ColList stores the column IDs for the SHOW TRACE columns.
    ColList ColList
}

# OpaqueRel is an opaque relational operator which is planned outside of the
# optimizer. The operator contains an opaque metadata which is passed to the
# exec factory.
#
# This is used for statements that are not directly supported by the optimizer,
# and which don't use the result of other relational expressions (in other
# words, they are a "leaf" operator).
#
# OpaqueRel can produce data and can be used as a data source as part of a
# larger enclosing query.
[Relational, DDL, Mutation]
define OpaqueRel {
    _ OpaqueRelPrivate
}

[Private]
define OpaqueRelPrivate {
    Columns ColList
    Metadata OpaqueMetadata 
}
