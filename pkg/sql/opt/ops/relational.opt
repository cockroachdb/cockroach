# relational.opt contains Optgen language definitions for all of Cockroach's
# physical and logical operators that return a table-valued result having rows
# and columns (i.e. relational). Many of them correspond to operators in the
# relational algebra, but there are also variants that are useful for concisely
# and incrementally expressing transformations.
#
# Tags
#
# Relational - All operators in this file are marked with the Relational tag,
#              so they can be easily distinguished from Scalar and Enforcer
#              operators.
#
# Join - All join operators (inner, left, right, full, semi, anti), as well as
#        their JoinApply variants, are marked with the Join tag, which allows
#        any of them to fulfill a Join pattern match.
#
# JoinApply - All join apply operators are marked with the JoinApply tag.
#             Unlike standard Join operators, JoinApply operators allow the
#             right input to refer to columns projected by the left input.
#             Allowing this is useful as an intermediate (or sometimes final)
#             step in some important transformations (like eliminating
#             subqueries).

# Scan returns a result set containing every row in the specified table, by
# scanning one of the table's indexes according to its ordering. The private
# Def field is an *opt.ScanOpDef that identifies the table and index to scan,
# as well as the subset of columns to project from it.
[Relational]
define Scan {
    Def ScanOpDef
}

# Values returns a manufactured result set containing a constant number of rows.
# specified by the Rows list field. Each row must contain the same set of
# columns in the same order.
#
# The Rows field contains a list of Tuples, one for each row. Each tuple has
# the same length (same with that of Cols).
#
# The Cols field contains the set of column indices returned by each row
# as an opt.ColList. It is legal for Cols to be empty.
[Relational]
define Values {
    Rows ExprList
    Cols ColList
}

# Select filters rows from its input result set, based on the boolean filter
# predicate expression. Rows which do not match the filter are discarded. While
# the Filter operand can be any boolean expression, normalization rules will
# typically convert it to a Filters operator in order to make conjunction list
# matching easier.
[Relational]
define Select {
    Input  Expr
    Filter Expr
}

# Project modifies the set of columns returned by the input result set. Columns
# can be removed, reordered, or renamed. In addition, new columns can be
# synthesized.
# Projections is a scalar Projections list operator that contains information
# about the projected columns and any expressions that describe newly
# synthesized output columns.
[Relational]
define Project {
    Input           Expr
    Projections     Expr
}

# InnerJoin creates a result set that combines columns from its left and right
# inputs, based upon its "on" join predicate. Rows which do not match the
# predicate are filtered. While expressions in the predicate can refer to
# columns projected by either the left or right inputs, the inputs are not
# allowed to refer to the other's projected columns.
[Relational, Join]
define InnerJoin {
    Left  Expr
    Right Expr
    On    Expr
}

[Relational, Join]
define LeftJoin {
    Left  Expr
    Right Expr
    On    Expr
}

[Relational, Join]
define RightJoin {
    Left  Expr
    Right Expr
    On    Expr
}

[Relational, Join]
define FullJoin {
    Left  Expr
    Right Expr
    On    Expr
}

[Relational, Join]
define SemiJoin {
    Left  Expr
    Right Expr
    On    Expr
}

[Relational, Join]
define AntiJoin {
    Left  Expr
    Right Expr
    On    Expr
}

# LookupJoin represents a join between an input expression and an index.
[Relational]
define LookupJoin {
    Input Expr
    Def LookupJoinDef
}

# InnerJoinApply has the same join semantics as InnerJoin. However, unlike
# InnerJoin, it allows the right input to refer to columns projected by the
# left input.
[Relational, Join, JoinApply]
define InnerJoinApply {
    Left  Expr
    Right Expr
    On    Expr
}

[Relational, Join, JoinApply]
define LeftJoinApply {
    Left  Expr
    Right Expr
    On    Expr
}

[Relational, Join, JoinApply]
define RightJoinApply {
    Left  Expr
    Right Expr
    On    Expr
}

[Relational, Join, JoinApply]
define FullJoinApply {
    Left  Expr
    Right Expr
    On    Expr
}

[Relational, Join, JoinApply]
define SemiJoinApply {
    Left  Expr
    Right Expr
    On    Expr
}

[Relational, Join, JoinApply]
define AntiJoinApply {
    Left  Expr
    Right Expr
    On    Expr
}

# GroupBy is an operator that is used for performing aggregations (for queries
# with aggregate functions, HAVING clauses and/or group by expressions). It
# groups results that are equal on the grouping columns and computes
# aggregations as described by Aggregations (which is always an Aggregations
# operator). The arguments of the aggregations are columns from the input.
[Relational]
define GroupBy {
    Input        Expr
    Aggregations Expr
    Def          GroupByDef
}

# Union is an operator used to combine the Left and Right input relations into
# a single set containing rows from both inputs. Duplicate rows are discarded.
# The private field, ColMap, matches columns from the Left and Right inputs
# of the Union with the output columns. See the comment above opt.SetOpColMap
# for more details.
[Relational]
define Union {
    Left   Expr
    Right  Expr
    ColMap SetOpColMap
}

# Intersect is an operator used to perform an intersection between the Left
# and Right input relations. The result consists only of rows in the Left
# relation that are also present in the Right relation. Duplicate rows are
# discarded.
# The private field, ColMap, matches columns from the Left and Right inputs
# of the Intersect with the output columns. See the comment above
# opt.SetOpColMap for more details.
[Relational]
define Intersect {
    Left   Expr
    Right  Expr
    ColMap SetOpColMap
}

# Except is an operator used to perform a set difference between the Left and
# Right input relations. The result consists only of rows in the Left relation
# that are not present in the Right relation. Duplicate rows are discarded.
# The private field, ColMap, matches columns from the Left and Right inputs
# of the Except with the output columns. See the comment above opt.SetOpColMap
# for more details.
[Relational]
define Except {
    Left   Expr
    Right  Expr
    ColMap SetOpColMap
}

# UnionAll is an operator used to combine the Left and Right input relations
# into a single set containing rows from both inputs. Duplicate rows are
# not discarded. For example:
#   SELECT x FROM xx UNION ALL SELECT y FROM yy
#     x       y         out
#   -----   -----      -----
#     1       1          1
#     1       2    ->    1
#     2       3          1
#                        2
#                        2
#                        3
#
# The private field, ColMap, matches columns from the Left and Right inputs
# of the UnionAll with the output columns. See the comment above
# opt.SetOpColMap for more details.
[Relational]
define UnionAll {
    Left   Expr
    Right  Expr
    ColMap SetOpColMap
}

# IntersectAll is an operator used to perform an intersection between the Left
# and Right input relations. The result consists only of rows in the Left
# relation that have a corresponding row in the Right relation. Duplicate rows
# are not discarded. This effectively creates a one-to-one mapping between the
# Left and Right rows. For example:
#   SELECT x FROM xx INTERSECT ALL SELECT y FROM yy
#     x       y         out
#   -----   -----      -----
#     1       1          1
#     1       1    ->    1
#     1       2          2
#     2       2          2
#     2       3
#     4
#
# The private field, ColMap, matches columns from the Left and Right inputs
# of the IntersectAll with the output columns. See the comment above
# opt.SetOpColMap for more details.
[Relational]
define IntersectAll {
    Left   Expr
    Right  Expr
    ColMap SetOpColMap
}

# ExceptAll is an operator used to perform a set difference between the Left
# and Right input relations. The result consists only of rows in the Left
# relation that do not have a corresponding row in the Right relation.
# Duplicate rows are not discarded. This effectively creates a one-to-one
# mapping between the Left and Right rows. For example:
#   SELECT x FROM xx EXCEPT ALL SELECT y FROM yy
#     x       y         out
#   -----   -----      -----
#     1       1    ->    1
#     1       1          4
#     1       2
#     2       2
#     2       3
#     4
#
# The private field, ColMap, matches columns from the Left and Right inputs
# of the ExceptAll with the output columns. See the comment above
# opt.SetOpColMap for more details.
[Relational]
define ExceptAll {
    Left   Expr
    Right  Expr
    ColMap SetOpColMap
}

# Limit returns a limited subset of the results in the input relation.
# The limit expression is a scalar value; the operator returns at most this many
# rows. The private field is an opt.Ordering which indicates the desired
# row ordering (the first rows with respect to this ordering are returned).
[Relational]
define Limit {
    Input    Expr
    Limit    Expr
    Ordering Ordering
}

# Offset filters out the first Offset rows of the input relation; used in
# conjunction with Limit.
[Relational]
define Offset {
    Input    Expr
    Offset   Expr
    Ordering Ordering
}

# Max1Row enforces that its input must return at most one row. It is used as
# input to the Subquery operator. See the comment above Subquery for more
# details.
[Relational]
define Max1Row {
    Input Expr
}

# Explain returns information about the execution plan of the "input"
# expression.
[Relational]
define Explain {
    Input Expr
    Def   ExplainOpDef
}

# ShowTrace runs the "input" expressions in a special tracing mode and returns
# trace results.
[Relational]
define ShowTrace {
    Input Expr
    Def   ShowTraceOpDef
}

# ShowTraceForSession returns the current session traces.
[Relational]
define ShowTraceForSession {
    Def   ShowTraceOpDef
}

# RowNumber adds a column to each row in its input containing a unique,
# increasing number.
[Relational]
define RowNumber {
    Input    Expr
    Def      RowNumberDef
}
