#
# Generate code for op that has Expr, ExprList, and private fields.
#
optgen exprs test.opt
define FuncCall {
    Name Expr
    Args ExprList
    Def  FuncDef
}
----
----
// Code generated by optgen; [omitted]

package xform

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt"
)

var opLayoutTable = [...]opLayout{
	opt.UnknownOp:  0xFF, // will cause a crash if used
	opt.FuncCallOp: makeOpLayout(1 /*base*/, 2 /*list*/, 4 /*priv*/, 0 /*enforcer*/),
}

type funcCallExpr memoExpr

func makeFuncCallExpr(name opt.GroupID, args opt.ListID, def opt.PrivateID) funcCallExpr {
	return funcCallExpr{op: opt.FuncCallOp, state: exprState{uint32(name), args.Offset, args.Length, uint32(def)}}
}

func (e *funcCallExpr) name() opt.GroupID {
	return opt.GroupID(e.state[0])
}

func (e *funcCallExpr) args() opt.ListID {
	return opt.ListID{Offset: e.state[1], Length: e.state[2]}
}

func (e *funcCallExpr) def() opt.PrivateID {
	return opt.PrivateID(e.state[3])
}

func (e *funcCallExpr) fingerprint() fingerprint {
	return fingerprint(*e)
}

func (m *memoExpr) asFuncCall() *funcCallExpr {
	if m.op != opt.FuncCallOp {
		return nil
	}
	return (*funcCallExpr)(m)
}
----
----

#
# Generate code for enforcer op.
#
optgen exprs test.opt
[Enforcer]
define Sort {
    Input Expr
}
----
----
// Code generated by optgen; [omitted]

package xform

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt"
)

var opLayoutTable = [...]opLayout{
	opt.UnknownOp: 0xFF, // will cause a crash if used
	opt.SortOp:    makeOpLayout(1 /*base*/, 0 /*list*/, 0 /*priv*/, 1 /*enforcer*/),
}

var isEnforcerLookup = [...]bool{
	false, // UnknownOp

	true, // SortOp
}

func (ev ExprView) IsEnforcer() bool {
	return isEnforcerLookup[ev.op]
}
----
----
