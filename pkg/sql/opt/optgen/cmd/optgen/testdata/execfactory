optgen execfactory test.opt
# Scan returns a node that represents a scan of the given index on
# the given table.
define Scan {
    Table cat.Table
    # Index is a field that has a comment.
    Index cat.Index
    Params exec.ScanParams
    ReqOrdering exec.OutputOrdering
}

define Values {
    Rows [][]tree.TypedExpr
    # Columns is a field that has a multi-line
    # comment.
    Columns sqlbase.ResultColumns
}
----
----
// Code generated by optgen; [omitted]

package exec

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt/cat"
)

// Factory defines the interface for building an execution plan, which consists
// of a tree of execution nodes (currently a sql.planNode tree).
//
// The tree is always built bottom-up. The Construct methods either construct
// leaf nodes, or they take other nodes previously constructed by this same
// factory as children.
//
// The TypedExprs passed to these functions refer to columns of the input node
// via IndexedVars.
type Factory interface {
	// ConstructPlan creates a plan enclosing the given plan and (optionally)
	// subqueries, cascades, and checks.
	//
	// Subqueries are executed before the root tree, which can refer to subquery
	// results using tree.Subquery nodes.
	//
	// Cascades are executed after the root tree. They can return more cascades
	// and checks which should also be executed.
	//
	// Checks are executed after all cascades have been executed. They don't
	// return results but can generate errors (e.g. foreign key check failures).
	ConstructPlan(
		root Node, subqueries []Subquery, cascades []Cascade, checks []Node,
	) (Plan, error)

	// ConstructScan returns a node that represents a scan of the given index on
	// the given table.
	ConstructScan(
		table cat.Table,
		// index is a field that has a comment.
		index cat.Index,
		params ScanParams,
		reqOrdering OutputOrdering,
	) (Node, error)

	ConstructValues(
		rows [][]tree.TypedExpr,
		// columns is a field that has a multi-line
		// comment.
		columns sqlbase.ResultColumns,
	) (Node, error)
}

// StubFactory is a do-nothing implementation of Factory, used for testing.
type StubFactory struct{}

var _ Factory = StubFactory{}

func (StubFactory) ConstructPlan(
	root Node, subqueries []Subquery, cascades []Cascade, checks []Node,
) (Plan, error) {
	return struct{}{}, nil
}

func (StubFactory) ConstructScan(
	table cat.Table,
	index cat.Index,
	params ScanParams,
	reqOrdering OutputOrdering,
) (Node, error) {
	return struct{}{}, nil
}

func (StubFactory) ConstructValues(
	rows [][]tree.TypedExpr,
	columns sqlbase.ResultColumns,
) (Node, error) {
	return struct{}{}, nil
}
----
----
