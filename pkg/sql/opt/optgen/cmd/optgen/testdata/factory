#
# Generate construct methods for factory that have GroupID, ListID, and
# PrivateID args.
#
optgen factory test.opt
# Not is a negate operator.
define Not {
    Input Expr
}

define FuncCall {
    Name Expr
    Args ExprList
    Def  FuncDef
}

# This shouldn't be added to the factory.
[Enforcer]
define Sort {
    Input Expr
}
----
----
// Code generated by optgen; [omitted]

package xform

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt"
)

// ConstructNot constructs an expression for the Not operator.
// Not is a negate operator.
func (_f *Factory) ConstructNot(
	input opt.GroupID,
) opt.GroupID {
	_notExpr := makeNotExpr(input)
	_group := _f.mem.lookupGroupByFingerprint(_notExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_notExpr))
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_notExpr)))
}

// ConstructFuncCall constructs an expression for the FuncCall operator.
func (_f *Factory) ConstructFuncCall(
	name opt.GroupID,
	args opt.ListID,
	def opt.PrivateID,
) opt.GroupID {
	_funcCallExpr := makeFuncCallExpr(name, args, def)
	_group := _f.mem.lookupGroupByFingerprint(_funcCallExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_funcCallExpr))
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_funcCallExpr)))
}

type dynConstructLookupFunc func(f *Factory, operands opt.DynamicOperands) opt.GroupID

var dynConstructLookup [opt.NumOperators]dynConstructLookupFunc

func init() {
	// UnknownOp
	dynConstructLookup[opt.UnknownOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		panic("op type not initialized")
	}

	// NotOp
	dynConstructLookup[opt.NotOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructNot(opt.GroupID(operands[0]))
	}

	// FuncCallOp
	dynConstructLookup[opt.FuncCallOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructFuncCall(opt.GroupID(operands[0]), operands[1].ListID(), opt.PrivateID(operands[2]))
	}

}

func (f *Factory) DynamicConstruct(op opt.Operator, operands opt.DynamicOperands) opt.GroupID {
	return dynConstructLookup[op](f, operands)
}
----
----

#
# Generate static matching and replacement code.
#
optgen factory test.opt
define InnerJoin {
    Left  Expr
    Right Expr
}

[CommuteJoin, Normalize]
(InnerJoin $r:* $s:*) => (InnerJoin $s $r)
----
----
// Code generated by optgen; [omitted]

package xform

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt"
)

// ConstructInnerJoin constructs an expression for the InnerJoin operator.
func (_f *Factory) ConstructInnerJoin(
	left opt.GroupID,
	right opt.GroupID,
) opt.GroupID {
	_innerJoinExpr := makeInnerJoinExpr(left, right)
	_group := _f.mem.lookupGroupByFingerprint(_innerJoinExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_innerJoinExpr))
	}

	// [CommuteJoin]
	{
		r := left
		s := right
		_f.o.reportOptimization(CommuteJoin)
		_group = _f.ConstructInnerJoin(s, r)
		_f.mem.addAltFingerprint(_innerJoinExpr.fingerprint(), _group)
		return _group
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_innerJoinExpr)))
}

type dynConstructLookupFunc func(f *Factory, operands opt.DynamicOperands) opt.GroupID

var dynConstructLookup [opt.NumOperators]dynConstructLookupFunc

func init() {
	// UnknownOp
	dynConstructLookup[opt.UnknownOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		panic("op type not initialized")
	}

	// InnerJoinOp
	dynConstructLookup[opt.InnerJoinOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructInnerJoin(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

}

func (f *Factory) DynamicConstruct(op opt.Operator, operands opt.DynamicOperands) opt.GroupID {
	return dynConstructLookup[op](f, operands)
}
----
----

#
# Generate multiple match names, not expr, custom function, literal names in
# match and replace patterns, and use OpName builtin to construct replacement
# expression with name known at compile-time.
#
optgen factory test.opt
define Eq {
    Left  Expr
    Right Expr
}

define Lt {
    Left  Expr
    Right Expr
}

define Plus {
    Left  Expr
    Right Expr
}

define Minus {
    Left  Expr
    Right Expr
}

define Const {
}

[NormalizeVarPlus, Normalize]
(Eq | Lt
    (Plus
        $leftLeft:^(Const)
        $leftRight:(Const)
    )
    $right:(Const) & ^(IsInvalidBinary Minus $right $leftRight)
) =>
((OpName)
    $leftLeft
    (ConstructBinary Minus $right $leftRight)
)
----
----
// Code generated by optgen; [omitted]

package xform

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt"
)

// ConstructEq constructs an expression for the Eq operator.
func (_f *Factory) ConstructEq(
	left opt.GroupID,
	right opt.GroupID,
) opt.GroupID {
	_eqExpr := makeEqExpr(left, right)
	_group := _f.mem.lookupGroupByFingerprint(_eqExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_eqExpr))
	}

	// [NormalizeVarPlus]
	{
		_plus := _f.mem.lookupNormExpr(left).asPlus()
		if _plus != nil {
			leftLeft := _plus.left()
			_const := _f.mem.lookupNormExpr(_plus.left()).asConst()
			if _const == nil {
				leftRight := _plus.right()
				_const2 := _f.mem.lookupNormExpr(_plus.right()).asConst()
				if _const2 != nil {
					_const3 := _f.mem.lookupNormExpr(right).asConst()
					if _const3 != nil {
						if !_f.isInvalidBinary(opt.MinusOp, right, leftRight) {
							_f.o.reportOptimization(NormalizeVarPlus)
							_group = _f.ConstructEq(leftLeft, _f.constructBinary(opt.MinusOp, right, leftRight))
							_f.mem.addAltFingerprint(_eqExpr.fingerprint(), _group)
							return _group
						}
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_eqExpr)))
}

// ConstructLt constructs an expression for the Lt operator.
func (_f *Factory) ConstructLt(
	left opt.GroupID,
	right opt.GroupID,
) opt.GroupID {
	_ltExpr := makeLtExpr(left, right)
	_group := _f.mem.lookupGroupByFingerprint(_ltExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_ltExpr))
	}

	// [NormalizeVarPlus]
	{
		_plus := _f.mem.lookupNormExpr(left).asPlus()
		if _plus != nil {
			leftLeft := _plus.left()
			_const := _f.mem.lookupNormExpr(_plus.left()).asConst()
			if _const == nil {
				leftRight := _plus.right()
				_const2 := _f.mem.lookupNormExpr(_plus.right()).asConst()
				if _const2 != nil {
					_const3 := _f.mem.lookupNormExpr(right).asConst()
					if _const3 != nil {
						if !_f.isInvalidBinary(opt.MinusOp, right, leftRight) {
							_f.o.reportOptimization(NormalizeVarPlus)
							_group = _f.ConstructLt(leftLeft, _f.constructBinary(opt.MinusOp, right, leftRight))
							_f.mem.addAltFingerprint(_ltExpr.fingerprint(), _group)
							return _group
						}
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_ltExpr)))
}

// ConstructPlus constructs an expression for the Plus operator.
func (_f *Factory) ConstructPlus(
	left opt.GroupID,
	right opt.GroupID,
) opt.GroupID {
	_plusExpr := makePlusExpr(left, right)
	_group := _f.mem.lookupGroupByFingerprint(_plusExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_plusExpr))
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_plusExpr)))
}

// ConstructMinus constructs an expression for the Minus operator.
func (_f *Factory) ConstructMinus(
	left opt.GroupID,
	right opt.GroupID,
) opt.GroupID {
	_minusExpr := makeMinusExpr(left, right)
	_group := _f.mem.lookupGroupByFingerprint(_minusExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_minusExpr))
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_minusExpr)))
}

// ConstructConst constructs an expression for the Const operator.
func (_f *Factory) ConstructConst() opt.GroupID {
	_constExpr := makeConstExpr()
	_group := _f.mem.lookupGroupByFingerprint(_constExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_constExpr))
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_constExpr)))
}

type dynConstructLookupFunc func(f *Factory, operands opt.DynamicOperands) opt.GroupID

var dynConstructLookup [opt.NumOperators]dynConstructLookupFunc

func init() {
	// UnknownOp
	dynConstructLookup[opt.UnknownOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		panic("op type not initialized")
	}

	// EqOp
	dynConstructLookup[opt.EqOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructEq(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

	// LtOp
	dynConstructLookup[opt.LtOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructLt(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

	// PlusOp
	dynConstructLookup[opt.PlusOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructPlus(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

	// MinusOp
	dynConstructLookup[opt.MinusOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructMinus(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

	// ConstOp
	dynConstructLookup[opt.ConstOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructConst()
	}

}

func (f *Factory) DynamicConstruct(op opt.Operator, operands opt.DynamicOperands) opt.GroupID {
	return dynConstructLookup[op](f, operands)
}
----
----

#
# Generate not match of op with no args, string match, list match, string
# construction, custom replace function.
#
optgen factory test.opt
define Func {
    Name Expr
    Args ExprList
}

define Variable {
    Col ColumnIndex
}

[Concat, Normalize]
(Func "concat" $args:[ ... $item:^(Variable) & (IsEmpty $item) ... ])
=>
(Func "concat" (RemoveListItem $args $item))
----
----
// Code generated by optgen; [omitted]

package xform

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt"
)

// ConstructFunc constructs an expression for the Func operator.
func (_f *Factory) ConstructFunc(
	name opt.GroupID,
	args opt.ListID,
) opt.GroupID {
	_funcExpr := makeFuncExpr(name, args)
	_group := _f.mem.lookupGroupByFingerprint(_funcExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_funcExpr))
	}

	// [Concat]
	{
		if name == m.mem.internPrivate("concat") {
			for _, _item := range _f.mem.lookupList(args) {
				item := _item
				_variable := _f.mem.lookupNormExpr(_item).asVariable()
				if _variable == nil {
					if _f.isEmpty(item) {
						_f.o.reportOptimization(Concat)
						_group = _f.ConstructFunc(m.mem.internPrivate(tree.NewDString("concat")), _f.removeListItem(args, item))
						_f.mem.addAltFingerprint(_funcExpr.fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_funcExpr)))
}

// ConstructVariable constructs an expression for the Variable operator.
func (_f *Factory) ConstructVariable(
	col opt.PrivateID,
) opt.GroupID {
	_variableExpr := makeVariableExpr(col)
	_group := _f.mem.lookupGroupByFingerprint(_variableExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_variableExpr))
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_variableExpr)))
}

type dynConstructLookupFunc func(f *Factory, operands opt.DynamicOperands) opt.GroupID

var dynConstructLookup [opt.NumOperators]dynConstructLookupFunc

func init() {
	// UnknownOp
	dynConstructLookup[opt.UnknownOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		panic("op type not initialized")
	}

	// FuncOp
	dynConstructLookup[opt.FuncOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructFunc(opt.GroupID(operands[0]), operands[1].ListID())
	}

	// VariableOp
	dynConstructLookup[opt.VariableOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructVariable(opt.PrivateID(operands[0]))
	}

}

func (f *Factory) DynamicConstruct(op opt.Operator, operands opt.DynamicOperands) opt.GroupID {
	return dynConstructLookup[op](f, operands)
}
----
----

#
# Generate not match of op with args and not match of list. Nest matches within
# one another and use match of tag name. Match both tag and define name.
# Construct dynamic replacement and use opname literal.
#
optgen factory test.opt
define Select {
    Input Expr
    Filter Expr
}

[Join]
define InnerJoin {
    Left  Expr
    Right Expr
}

[Join]
define FullJoin {
    Left  Expr
    Right Expr
}

define Union {
    Left  Expr
    Right Expr
}

define And {
    Left  Expr
    Right Expr
}

[Test, Normalize]
(Select
    $input:^(Join|Union $r:* $s:*)
    $args:[ ... $item:(Join $t:* $u:*) ... ]
)
=>
((OpName $item) (Select $t $u) (Custom $item (OpName)))
----
----
// Code generated by optgen; [omitted]

package xform

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt"
)

// ConstructSelect constructs an expression for the Select operator.
func (_f *Factory) ConstructSelect(
	input opt.GroupID,
	filter opt.GroupID,
) opt.GroupID {
	_selectExpr := makeSelectExpr(input, filter)
	_group := _f.mem.lookupGroupByFingerprint(_selectExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_selectExpr))
	}

	// [Test]
	{
		_match := false
		_norm := _f.mem.lookupNormExpr(input)
		if _norm.isJoin() || _norm.op == opt.UnionOp {
			r := _norm.childGroup(_f.mem, 0)
			s := _norm.childGroup(_f.mem, 1)
			_match = true
		}

		if !_match {
			args := filter
			for _, _item := range _f.mem.lookupList(filter) {
				item := _item
				_norm2 := _f.mem.lookupNormExpr(_item)
				if _norm2.isJoin() {
					t := _norm2.childGroup(_f.mem, 0)
					u := _norm2.childGroup(_f.mem, 1)
					_f.o.reportOptimization(Test)
					_group = _f.DynamicConstruct(_f.mem.lookupNormExpr(item).op, opt.DynamicOperands{opt.DynamicID(_f.ConstructSelect(t, u)), opt.DynamicID(_f.custom(item, opt.SelectOp))})
					_f.mem.addAltFingerprint(_selectExpr.fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_selectExpr)))
}

// ConstructInnerJoin constructs an expression for the InnerJoin operator.
func (_f *Factory) ConstructInnerJoin(
	left opt.GroupID,
	right opt.GroupID,
) opt.GroupID {
	_innerJoinExpr := makeInnerJoinExpr(left, right)
	_group := _f.mem.lookupGroupByFingerprint(_innerJoinExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_innerJoinExpr))
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_innerJoinExpr)))
}

// ConstructFullJoin constructs an expression for the FullJoin operator.
func (_f *Factory) ConstructFullJoin(
	left opt.GroupID,
	right opt.GroupID,
) opt.GroupID {
	_fullJoinExpr := makeFullJoinExpr(left, right)
	_group := _f.mem.lookupGroupByFingerprint(_fullJoinExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_fullJoinExpr))
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_fullJoinExpr)))
}

// ConstructUnion constructs an expression for the Union operator.
func (_f *Factory) ConstructUnion(
	left opt.GroupID,
	right opt.GroupID,
) opt.GroupID {
	_unionExpr := makeUnionExpr(left, right)
	_group := _f.mem.lookupGroupByFingerprint(_unionExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_unionExpr))
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_unionExpr)))
}

// ConstructAnd constructs an expression for the And operator.
func (_f *Factory) ConstructAnd(
	left opt.GroupID,
	right opt.GroupID,
) opt.GroupID {
	_andExpr := makeAndExpr(left, right)
	_group := _f.mem.lookupGroupByFingerprint(_andExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_andExpr))
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_andExpr)))
}

type dynConstructLookupFunc func(f *Factory, operands opt.DynamicOperands) opt.GroupID

var dynConstructLookup [opt.NumOperators]dynConstructLookupFunc

func init() {
	// UnknownOp
	dynConstructLookup[opt.UnknownOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		panic("op type not initialized")
	}

	// SelectOp
	dynConstructLookup[opt.SelectOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructSelect(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

	// InnerJoinOp
	dynConstructLookup[opt.InnerJoinOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructInnerJoin(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

	// FullJoinOp
	dynConstructLookup[opt.FullJoinOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructFullJoin(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

	// UnionOp
	dynConstructLookup[opt.UnionOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructUnion(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

	// AndOp
	dynConstructLookup[opt.AndOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructAnd(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

}

func (f *Factory) DynamicConstruct(op opt.Operator, operands opt.DynamicOperands) opt.GroupID {
	return dynConstructLookup[op](f, operands)
}
----
----

#
# Generate match for all list match operators.
#
optgen factory test.opt
define List {
    Items ExprList
}

[List, Normalize]
(List $any:[
    ...
    (List $first:[
        (List $last:[
            ...
            (List $single:[
                (List $empty:[])
            ])
        ])
        ...
    ])
    ...
])
=>
(Construct $any $first $last $single $empty)
----
----
// Code generated by optgen; [omitted]

package xform

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt"
)

// ConstructList constructs an expression for the List operator.
func (_f *Factory) ConstructList(
	items opt.ListID,
) opt.GroupID {
	_listExpr := makeListExpr(items)
	_group := _f.mem.lookupGroupByFingerprint(_listExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_listExpr))
	}

	// [List]
	{
		any := items
		for _, _item := range _f.mem.lookupList(items) {
			_list := _f.mem.lookupNormExpr(_item).asList()
			if _list != nil {
				first := _list.items()
				if _list.items().Length > 0 {
					_item := _f.mem.lookupList(_list.items())[0]
					_list2 := _f.mem.lookupNormExpr(_item).asList()
					if _list2 != nil {
						last := _list2.items()
						if _list2.items().Length > 0 {
							_item := _f.mem.lookupList(_list2.items())[_list2.items().Length-1]
							_list3 := _f.mem.lookupNormExpr(_item).asList()
							if _list3 != nil {
								single := _list3.items()
								if _list3.items().Length == 1 {
									_item := _f.mem.lookupList(_list3.items())[0]
									_list4 := _f.mem.lookupNormExpr(_item).asList()
									if _list4 != nil {
										empty := _list4.items()
										if _list4.items().Length == 0 {
											_f.o.reportOptimization(List)
											_group = _f.construct(any, first, last, single, empty)
											_f.mem.addAltFingerprint(_listExpr.fingerprint(), _group)
											return _group
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_listExpr)))
}

type dynConstructLookupFunc func(f *Factory, operands opt.DynamicOperands) opt.GroupID

var dynConstructLookup [opt.NumOperators]dynConstructLookupFunc

func init() {
	// UnknownOp
	dynConstructLookup[opt.UnknownOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		panic("op type not initialized")
	}

	// ListOp
	dynConstructLookup[opt.ListOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructList(operands[0].ListID())
	}

}

func (f *Factory) DynamicConstruct(op opt.Operator, operands opt.DynamicOperands) opt.GroupID {
	return dynConstructLookup[op](f, operands)
}
----
----

#
# Generate list construction operators.
#
optgen factory test.opt
define Join {
    Left  Expr
    Right Expr
    On    Expr
}

[ConstructList, Normalize]
(Join $left:* $right:* $on:*)
=>
(Construct [] [ $left ] [ $left $right] [ [$on] ])
----
----
// Code generated by optgen; [omitted]

package xform

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt"
)

// ConstructJoin constructs an expression for the Join operator.
func (_f *Factory) ConstructJoin(
	left opt.GroupID,
	right opt.GroupID,
	on opt.GroupID,
) opt.GroupID {
	_joinExpr := makeJoinExpr(left, right, on)
	_group := _f.mem.lookupGroupByFingerprint(_joinExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_joinExpr))
	}

	// [ConstructList]
	{
		_f.o.reportOptimization(ConstructList)
		_group = _f.construct(_f.mem.internList([]opt.GroupID{}), _f.mem.internList([]opt.GroupID{left}), _f.mem.internList([]opt.GroupID{left, right}), _f.mem.internList([]opt.GroupID{_f.mem.internList([]opt.GroupID{on})}))
		_f.mem.addAltFingerprint(_joinExpr.fingerprint(), _group)
		return _group
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_joinExpr)))
}

type dynConstructLookupFunc func(f *Factory, operands opt.DynamicOperands) opt.GroupID

var dynConstructLookup [opt.NumOperators]dynConstructLookupFunc

func init() {
	// UnknownOp
	dynConstructLookup[opt.UnknownOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		panic("op type not initialized")
	}

	// JoinOp
	dynConstructLookup[opt.JoinOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructJoin(opt.GroupID(operands[0]), opt.GroupID(operands[1]), opt.GroupID(operands[2]))
	}

}

func (f *Factory) DynamicConstruct(op opt.Operator, operands opt.DynamicOperands) opt.GroupID {
	return dynConstructLookup[op](f, operands)
}
----
----
#
# Generate no match for all list match operators that support it.
#
optgen factory test.opt
define List {
    Items ExprList
}

define Op {
    Empty  Expr
    Single Expr
}

[ListNot, Normalize]
(Op
    $empty:(List ^[])
    $single:(List ^[ * ])
)
=>
(Op $empty $single)
----
----
// Code generated by optgen; [omitted]

package xform

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt"
)

// ConstructList constructs an expression for the List operator.
func (_f *Factory) ConstructList(
	items opt.ListID,
) opt.GroupID {
	_listExpr := makeListExpr(items)
	_group := _f.mem.lookupGroupByFingerprint(_listExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_listExpr))
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_listExpr)))
}

// ConstructOp constructs an expression for the Op operator.
func (_f *Factory) ConstructOp(
	empty opt.GroupID,
	single opt.GroupID,
) opt.GroupID {
	_opExpr := makeOpExpr(empty, single)
	_group := _f.mem.lookupGroupByFingerprint(_opExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_opExpr))
	}

	// [ListNot]
	{
		_list := _f.mem.lookupNormExpr(empty).asList()
		if _list != nil {
			if _list.items().Length != 0 {
				_list2 := _f.mem.lookupNormExpr(single).asList()
				if _list2 != nil {
					if _list2.items().Length != 1 {
						_f.o.reportOptimization(ListNot)
						_group = _f.ConstructOp(empty, single)
						_f.mem.addAltFingerprint(_opExpr.fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_opExpr)))
}

type dynConstructLookupFunc func(f *Factory, operands opt.DynamicOperands) opt.GroupID

var dynConstructLookup [opt.NumOperators]dynConstructLookupFunc

func init() {
	// UnknownOp
	dynConstructLookup[opt.UnknownOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		panic("op type not initialized")
	}

	// ListOp
	dynConstructLookup[opt.ListOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructList(operands[0].ListID())
	}

	// OpOp
	dynConstructLookup[opt.OpOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructOp(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

}

func (f *Factory) DynamicConstruct(op opt.Operator, operands opt.DynamicOperands) opt.GroupID {
	return dynConstructLookup[op](f, operands)
}
----
----

#
# Generate match and nomatch for both constant and dynamic match cases, with
# and without child matchers.
#
optgen factory test.opt
define Eq {
    Left  Expr
    Right Expr
}

define Ne {
    Left  Expr
    Right Expr
}

[Constant, Normalize]
(Eq
    (Eq (Eq) ^(Eq))
    ^(Eq (Eq) ^(Eq))
)
=>
"foo"

[Dynamic, Normalize]
(Ne
    (Eq|Ne (Eq|Ne) ^(Eq|Ne))
    ^(Eq|Ne (Eq|Ne) ^(Eq|Ne))
)
=>
"foo"
----
----
// Code generated by optgen; [omitted]

package xform

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt"
)

// ConstructEq constructs an expression for the Eq operator.
func (_f *Factory) ConstructEq(
	left opt.GroupID,
	right opt.GroupID,
) opt.GroupID {
	_eqExpr := makeEqExpr(left, right)
	_group := _f.mem.lookupGroupByFingerprint(_eqExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_eqExpr))
	}

	// [Constant]
	{
		_eq := _f.mem.lookupNormExpr(left).asEq()
		if _eq != nil {
			_eq2 := _f.mem.lookupNormExpr(_eq.left()).asEq()
			if _eq2 != nil {
				_eq3 := _f.mem.lookupNormExpr(_eq.right()).asEq()
				if _eq3 == nil {
					_match := false
					_eq4 := _f.mem.lookupNormExpr(right).asEq()
					if _eq4 != nil {
						_eq5 := _f.mem.lookupNormExpr(_eq4.left()).asEq()
						if _eq5 != nil {
							_eq6 := _f.mem.lookupNormExpr(_eq4.right()).asEq()
							if _eq6 == nil {
								_match = true
							}
						}
					}

					if !_match {
						_f.o.reportOptimization(Constant)
						_group = m.mem.internPrivate(tree.NewDString("foo"))
						_f.mem.addAltFingerprint(_eqExpr.fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_eqExpr)))
}

// ConstructNe constructs an expression for the Ne operator.
func (_f *Factory) ConstructNe(
	left opt.GroupID,
	right opt.GroupID,
) opt.GroupID {
	_neExpr := makeNeExpr(left, right)
	_group := _f.mem.lookupGroupByFingerprint(_neExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_neExpr))
	}

	// [Dynamic]
	{
		_norm := _f.mem.lookupNormExpr(left)
		if _norm.op == opt.EqOp || _norm.op == opt.NeOp {
			_norm2 := _f.mem.lookupNormExpr(_norm.childGroup(_f.mem, 0))
			if _norm2.op == opt.EqOp || _norm2.op == opt.NeOp {
				_norm3 := _f.mem.lookupNormExpr(_norm.childGroup(_f.mem, 1))
				if !(_norm3.op == opt.EqOp || _norm3.op == opt.NeOp) {
					_match := false
					_norm4 := _f.mem.lookupNormExpr(right)
					if _norm4.op == opt.EqOp || _norm4.op == opt.NeOp {
						_norm5 := _f.mem.lookupNormExpr(_norm4.childGroup(_f.mem, 0))
						if _norm5.op == opt.EqOp || _norm5.op == opt.NeOp {
							_norm6 := _f.mem.lookupNormExpr(_norm4.childGroup(_f.mem, 1))
							if !(_norm6.op == opt.EqOp || _norm6.op == opt.NeOp) {
								_match = true
							}
						}
					}

					if !_match {
						_f.o.reportOptimization(Dynamic)
						_group = m.mem.internPrivate(tree.NewDString("foo"))
						_f.mem.addAltFingerprint(_neExpr.fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_neExpr)))
}

type dynConstructLookupFunc func(f *Factory, operands opt.DynamicOperands) opt.GroupID

var dynConstructLookup [opt.NumOperators]dynConstructLookupFunc

func init() {
	// UnknownOp
	dynConstructLookup[opt.UnknownOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		panic("op type not initialized")
	}

	// EqOp
	dynConstructLookup[opt.EqOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructEq(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

	// NeOp
	dynConstructLookup[opt.NeOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructNe(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

}

func (f *Factory) DynamicConstruct(op opt.Operator, operands opt.DynamicOperands) opt.GroupID {
	return dynConstructLookup[op](f, operands)
}
----
----

#
# Generate nested custom matching functions, including OpName.
#
optgen factory test.opt
[Binary]
define Plus {
    Left  Expr
    Right Expr
}

[Binary]
define Minus {
    Left  Expr
    Right Expr
}

define Null {}

[Fold, Normalize]
(Binary
    $left:*
    (Null) & ^(HasNullableArgs (OpName) (AnotherFunc (OpName $left)))
)
=>
(Null)
----
----
// Code generated by optgen; [omitted]

package xform

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt"
)

// ConstructPlus constructs an expression for the Plus operator.
func (_f *Factory) ConstructPlus(
	left opt.GroupID,
	right opt.GroupID,
) opt.GroupID {
	_plusExpr := makePlusExpr(left, right)
	_group := _f.mem.lookupGroupByFingerprint(_plusExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_plusExpr))
	}

	// [Fold]
	{
		_null := _f.mem.lookupNormExpr(right).asNull()
		if _null != nil {
			if !_f.hasNullableArgs(opt.PlusOp, _f.anotherFunc(_f.mem.lookupNormExpr(left).op)) {
				_f.o.reportOptimization(Fold)
				_group = _f.ConstructNull()
				_f.mem.addAltFingerprint(_plusExpr.fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_plusExpr)))
}

// ConstructMinus constructs an expression for the Minus operator.
func (_f *Factory) ConstructMinus(
	left opt.GroupID,
	right opt.GroupID,
) opt.GroupID {
	_minusExpr := makeMinusExpr(left, right)
	_group := _f.mem.lookupGroupByFingerprint(_minusExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_minusExpr))
	}

	// [Fold]
	{
		_null := _f.mem.lookupNormExpr(right).asNull()
		if _null != nil {
			if !_f.hasNullableArgs(opt.MinusOp, _f.anotherFunc(_f.mem.lookupNormExpr(left).op)) {
				_f.o.reportOptimization(Fold)
				_group = _f.ConstructNull()
				_f.mem.addAltFingerprint(_minusExpr.fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_minusExpr)))
}

// ConstructNull constructs an expression for the Null operator.
func (_f *Factory) ConstructNull() opt.GroupID {
	_nullExpr := makeNullExpr()
	_group := _f.mem.lookupGroupByFingerprint(_nullExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_nullExpr))
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_nullExpr)))
}

type dynConstructLookupFunc func(f *Factory, operands opt.DynamicOperands) opt.GroupID

var dynConstructLookup [opt.NumOperators]dynConstructLookupFunc

func init() {
	// UnknownOp
	dynConstructLookup[opt.UnknownOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		panic("op type not initialized")
	}

	// PlusOp
	dynConstructLookup[opt.PlusOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructPlus(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

	// MinusOp
	dynConstructLookup[opt.MinusOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructMinus(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

	// NullOp
	dynConstructLookup[opt.NullOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructNull()
	}

}

func (f *Factory) DynamicConstruct(op opt.Operator, operands opt.DynamicOperands) opt.GroupID {
	return dynConstructLookup[op](f, operands)
}
----
----

#
# Generate multiple op matchers combined into a boolean expression.
#
optgen factory test.opt
[Comparison]
define Lt {
    Left  Expr
    Right Expr
}

[Comparison]
define Gt {
    Left  Expr
    Right Expr
}

[Comparison]
define Contains {
    Left  Expr
    Right Expr
}

define Not {
    Input Expr
}

[Invert, Normalize]
(Not $input:(Comparison $left:* $right:*) & ^(Contains) & (SomeOtherCondition $input))
=>
(Invert (OpName $input) $left $right)
----
----
// Code generated by optgen; [omitted]

package xform

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt"
)

// ConstructLt constructs an expression for the Lt operator.
func (_f *Factory) ConstructLt(
	left opt.GroupID,
	right opt.GroupID,
) opt.GroupID {
	_ltExpr := makeLtExpr(left, right)
	_group := _f.mem.lookupGroupByFingerprint(_ltExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_ltExpr))
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_ltExpr)))
}

// ConstructGt constructs an expression for the Gt operator.
func (_f *Factory) ConstructGt(
	left opt.GroupID,
	right opt.GroupID,
) opt.GroupID {
	_gtExpr := makeGtExpr(left, right)
	_group := _f.mem.lookupGroupByFingerprint(_gtExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_gtExpr))
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_gtExpr)))
}

// ConstructContains constructs an expression for the Contains operator.
func (_f *Factory) ConstructContains(
	left opt.GroupID,
	right opt.GroupID,
) opt.GroupID {
	_containsExpr := makeContainsExpr(left, right)
	_group := _f.mem.lookupGroupByFingerprint(_containsExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_containsExpr))
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_containsExpr)))
}

// ConstructNot constructs an expression for the Not operator.
func (_f *Factory) ConstructNot(
	input opt.GroupID,
) opt.GroupID {
	_notExpr := makeNotExpr(input)
	_group := _f.mem.lookupGroupByFingerprint(_notExpr.fingerprint())
	if _group != 0 {
		return _group
	}

	if !_f.o.allowOptimizations() {
		return _f.mem.memoizeNormExpr(memoExpr(_notExpr))
	}

	// [Invert]
	{
		_norm := _f.mem.lookupNormExpr(input)
		if _norm.isComparison() {
			left := _norm.childGroup(_f.mem, 0)
			right := _norm.childGroup(_f.mem, 1)
			_contains := _f.mem.lookupNormExpr(input).asContains()
			if _contains == nil {
				if _f.someOtherCondition(input) {
					_f.o.reportOptimization(Invert)
					_group = _f.invert(_f.mem.lookupNormExpr(input).op, left, right)
					_f.mem.addAltFingerprint(_notExpr.fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.memoizeNormExpr(memoExpr(_notExpr)))
}

type dynConstructLookupFunc func(f *Factory, operands opt.DynamicOperands) opt.GroupID

var dynConstructLookup [opt.NumOperators]dynConstructLookupFunc

func init() {
	// UnknownOp
	dynConstructLookup[opt.UnknownOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		panic("op type not initialized")
	}

	// LtOp
	dynConstructLookup[opt.LtOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructLt(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

	// GtOp
	dynConstructLookup[opt.GtOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructGt(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

	// ContainsOp
	dynConstructLookup[opt.ContainsOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructContains(opt.GroupID(operands[0]), opt.GroupID(operands[1]))
	}

	// NotOp
	dynConstructLookup[opt.NotOp] = func(f *Factory, operands opt.DynamicOperands) opt.GroupID {
		return f.ConstructNot(opt.GroupID(operands[0]))
	}

}

func (f *Factory) DynamicConstruct(op opt.Operator, operands opt.DynamicOperands) opt.GroupID {
	return dynConstructLookup[op](f, operands)
}
----
----
