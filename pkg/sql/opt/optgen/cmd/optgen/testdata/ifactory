optgen ifactory test.opt
[Relational]
define Select {
    Input   RelExpr
    Filters FiltersExpr
}

[Relational, Join, JoinNonApply]
define InnerJoin {
    Left  RelExpr
    Right RelExpr
    On    FiltersExpr
}

[Relational, Join, JoinApply]
define InnerJoinApply {
    Left  RelExpr
    Right RelExpr
    On    FiltersExpr
}

[Scalar, Boolean, List]
define Filters {
}

[Scalar, Boolean, ListItem]
define FiltersItem {
    Condition ScalarExpr

    scalar ScalarProps
}

[Scalar]
define And {
    Left  Expr
    Right Expr
}
----
----
// Code generated by optgen; [omitted]

package optbuilder

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt"
	"github.com/cockroachdb/cockroach/pkg/sql/opt/memo"
	"github.com/cockroachdb/cockroach/pkg/sql/opt/props/physical"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

type Factory interface {
	// Memo returns the memo structure that the factory is operating upon.
	Memo() *memo.Memo

	// Metadata returns the query-specific metadata, which includes information
	// about the columns and tables used in this particular query.
	Metadata() *opt.Metadata

	// ConstructConstVal is a helper function that constructs one of the constant
	// value operators from the given datum value. While most constants are
	// represented with Const, there are special-case operators for True, False, and
	// Null, to make matching easier. Null operators require the static type to be
	// specified, so that rewrites do not change it.
	ConstructConstVal(d tree.Datum, t *types.T) opt.ScalarExpr

	// ConstructSelect constructs an expression for the Select operator.
	ConstructSelect(
		input memo.RelExpr,
		filters memo.FiltersExpr,
	) memo.RelExpr

	// ConstructInnerJoin constructs an expression for the InnerJoin operator.
	ConstructInnerJoin(
		left memo.RelExpr,
		right memo.RelExpr,
		on memo.FiltersExpr,
	) memo.RelExpr

	// ConstructInnerJoinApply constructs an expression for the InnerJoinApply operator.
	ConstructInnerJoinApply(
		left memo.RelExpr,
		right memo.RelExpr,
		on memo.FiltersExpr,
	) memo.RelExpr

	// ConstructAnd constructs an expression for the And operator.
	ConstructAnd(
		left opt.Expr,
		right opt.Expr,
	) opt.ScalarExpr
}
----
----
