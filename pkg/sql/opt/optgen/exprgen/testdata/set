exec-ddl
CREATE TABLE abc (a INT, b INT, c INT, INDEX abc_idx(a, b, c))
----

exec-ddl
CREATE TABLE def (d INT, e INT, f INT)
----

expr
(Intersect
  (Scan [ (Table "abc") (Index "abc@abc_idx") (Cols "a,b,c") ])
  (Sort (Scan [ (Table "def") (Cols "d,e,f") ]))
  [
    (LeftCols "a,b,c")
    (RightCols "d,e,f")
    (OutCols "a,b,c")
    (Ordering "+a,+b,+c")
  ]
)
----
intersect
 ├── columns: t.public.abc.a:1(int) t.public.abc.b:2(int) t.public.abc.c:3(int)
 ├── left columns: t.public.abc.a:1(int) t.public.abc.b:2(int) t.public.abc.c:3(int)
 ├── right columns: t.public.def.d:7(int) t.public.def.e:8(int) t.public.def.f:9(int)
 ├── internal-ordering: +1,+2,+3
 ├── stats: [rows=1000, distinct(1-3)=1000, null(1-3)=0.001, avgsize(1-3)=12]
 ├── cost: 2461.0043
 ├── key: (1-3)
 ├── interesting orderings: (+1,+2,+3)
 ├── scan t.public.abc@abc_idx
 │    ├── columns: t.public.abc.a:1(int) t.public.abc.b:2(int) t.public.abc.c:3(int)
 │    ├── stats: [rows=1000, distinct(1)=100, null(1)=10, avgsize(1)=4, distinct(2)=100, null(2)=10, avgsize(2)=4, distinct(3)=100, null(3)=10, avgsize(3)=4, distinct(4)=1000, null(4)=0, avgsize(4)=4, distinct(1-3)=1000, null(1-3)=0.001, avgsize(1-3)=12]
 │    ├── cost: 1094.72
 │    ├── ordering: +1,+2,+3
 │    ├── prune: (1-3)
 │    └── interesting orderings: (+1,+2,+3)
 └── sort
      ├── columns: t.public.def.d:7(int) t.public.def.e:8(int) t.public.def.f:9(int)
      ├── stats: [rows=1000, distinct(7)=100, null(7)=10, avgsize(7)=4, distinct(8)=100, null(8)=10, avgsize(8)=4, distinct(9)=100, null(9)=10, avgsize(9)=4, distinct(10)=1000, null(10)=0, avgsize(10)=4, distinct(7-9)=1000, null(7-9)=0.001, avgsize(7-9)=12]
      ├── cost: 1356.2643
      ├── ordering: +7,+8,+9
      ├── prune: (7-9)
      └── scan t.public.def
           ├── columns: t.public.def.d:7(int) t.public.def.e:8(int) t.public.def.f:9(int)
           ├── stats: [rows=1000, distinct(7)=100, null(7)=10, avgsize(7)=4, distinct(8)=100, null(8)=10, avgsize(8)=4, distinct(9)=100, null(9)=10, avgsize(9)=4, distinct(10)=1000, null(10)=0, avgsize(10)=4, distinct(7-9)=1000, null(7-9)=0.001, avgsize(7-9)=12]
           ├── cost: 1094.72
           └── prune: (7-9)

expr
(Intersect
  (Scan [ (Table "abc") (Index "abc@abc_idx") (Cols "a,b,c") ])
  (Scan [ (Table "def") (Cols "d,e,f") ])
  [
    (LeftCols "a,b,c")
    (RightCols "d,e,f")
    (OutCols "a,b,c")
  ]
)
----
intersect
 ├── columns: t.public.abc.a:1(int) t.public.abc.b:2(int) t.public.abc.c:3(int)
 ├── left columns: t.public.abc.a:1(int) t.public.abc.b:2(int) t.public.abc.c:3(int)
 ├── right columns: t.public.def.d:7(int) t.public.def.e:8(int) t.public.def.f:9(int)
 ├── stats: [rows=1000, distinct(1-3)=1000, null(1-3)=0.001, avgsize(1-3)=12]
 ├── cost: 2219.89875
 ├── key: (1-3)
 ├── interesting orderings: (+1,+2,+3)
 ├── scan t.public.abc@abc_idx
 │    ├── columns: t.public.abc.a:1(int) t.public.abc.b:2(int) t.public.abc.c:3(int)
 │    ├── stats: [rows=1000, distinct(1)=100, null(1)=10, avgsize(1)=4, distinct(2)=100, null(2)=10, avgsize(2)=4, distinct(3)=100, null(3)=10, avgsize(3)=4, distinct(4)=1000, null(4)=0, avgsize(4)=4, distinct(1-3)=1000, null(1-3)=0.001, avgsize(1-3)=12]
 │    ├── cost: 1094.72
 │    ├── prune: (1-3)
 │    └── interesting orderings: (+1,+2,+3)
 └── scan t.public.def
      ├── columns: t.public.def.d:7(int) t.public.def.e:8(int) t.public.def.f:9(int)
      ├── stats: [rows=1000, distinct(7)=100, null(7)=10, avgsize(7)=4, distinct(8)=100, null(8)=10, avgsize(8)=4, distinct(9)=100, null(9)=10, avgsize(9)=4, distinct(10)=1000, null(10)=0, avgsize(10)=4, distinct(7-9)=1000, null(7-9)=0.001, avgsize(7-9)=12]
      ├── cost: 1094.72
      └── prune: (7-9)
