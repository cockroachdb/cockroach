load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
load("//build:STRINGER.bzl", "stringer")

go_library(
    name = "lang",
    srcs = [
        "compiler.go",
        "data_type.go",
        "doc.go",
        "expr.go",
        "parser.go",
        "scanner.go",
        ":gen-expr",  # keep
        ":gen-operator",  # keep
        ":gen-operator-stringer",  # keep
        ":gen-token-stringer",  # keep
    ],
    importpath = "github.com/cockroachdb/cockroach/pkg/sql/opt/optgen/lang",
    visibility = ["//visibility:public"],
    deps = ["@com_github_cockroachdb_errors//:errors"],
)

# Langgen is a bootstrapping compiler. We need to partition the dependencies
# here to avoid cyclical structures. See the BUILD.bazel file for langgen for
# more details.
#
# keep
go_library(
    name = "bootstrap",
    srcs = [
        "compiler.go",
        "data_type.go",
        "doc.go",
        "expr.go",
        "expr.og.go",
        "operator.og.go",
        "operator_string.go",
        "parser.go",
        "scanner.go",
        "token_string.go",
    ],
    importpath = "github.com/cockroachdb/cockroach/pkg/sql/opt/optgen/lang",
    visibility = ["//visibility:public"],
    deps = ["@com_github_cockroachdb_errors//:errors"],
)

go_test(
    name = "lang_test",
    size = "small",
    srcs = [
        "compiler_test.go",
        "parser_test.go",
        "scanner_test.go",
    ],
    data = glob(["testdata/**"]),
    embed = [":lang"],
    deps = [
        "@com_github_cockroachdb_datadriven//:datadriven",
        "@com_github_cockroachdb_errors//:errors",
    ],
)

# Define the generator for the expression definitions and functions.
genrule(
    name = "gen-expr",
    srcs = ["lang.opt"],
    outs = ["expr-gen.og.go"],
    cmd = """
      $(location //pkg/sql/opt/optgen/cmd/langgen) -out $@ exprs $(location lang.opt)
    """,
    exec_tools = ["//pkg/sql/opt/optgen/cmd/langgen"],
)

genrule(
    name = "gen-operator",
    srcs = ["lang.opt"],
    outs = ["operator-gen.og.go"],
    cmd = """
      $(location //pkg/sql/opt/optgen/cmd/langgen) -out $@ ops $(location lang.opt)
    """,
    exec_tools = ["//pkg/sql/opt/optgen/cmd/langgen"],
)

stringer(
    name = "gen-token-stringer",
    src = "scanner.go",
    typ = "Token",
)

stringer(
    name = "gen-operator-stringer",
    src = "operator.og.go",
    typ = "Operator",
)
