exec-ddl
CREATE TABLE abc (
    a INT PRIMARY KEY,
    b INT,
    c STRING,
    UNIQUE INDEX bc1 (b, c),
    UNIQUE INDEX bc2 (b, c)
)
----

exec-ddl
CREATE TABLE xy (
    x INT PRIMARY KEY,
    y INT,
    INDEX y1 (y),
    INDEX y2 (y)
)
----

# --------------------------------------------------
# Single constraints.
# --------------------------------------------------

exec-ddl
ALTER TABLE abc CONFIGURE ZONE USING constraints='[+region=central]'
----

exec-ddl
ALTER INDEX abc@bc1 CONFIGURE ZONE USING constraints='[+region=east]'
----

exec-ddl
ALTER INDEX abc@bc2 CONFIGURE ZONE USING constraints='[+region=west]'
----

# With locality in central, use primary index.
opt format=show-all locality=(region=central)
SELECT * FROM abc
----
scan t.public.abc
 ├── columns: a:1(int!null) b:2(int) c:3(string)
 ├── stats: [rows=1000]
 ├── cost: 1074.61
 ├── key: (1)
 ├── fd: (1)-->(2,3), (2,3)~~>(1)
 ├── prune: (1-3)
 └── interesting orderings: (+1) (+2,+3,+1)

# With locality in central, still use bc1 index when the filter is selective.
opt format=show-all locality=(region=central)
SELECT * FROM abc WHERE b=10
----
scan t.public.abc@bc1
 ├── columns: a:1(int!null) b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 15.21
 ├── key: (1)
 ├── fd: ()-->(2), (1)-->(3), (2,3)~~>(1)
 ├── prune: (1,3)
 └── interesting orderings: (+1) (+2,+3,+1)

# With locality in east, use bc1 index.
opt format=show-all locality=(region=east)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc1
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.51
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# With locality in west, use bc2 index.
opt format=show-all locality=(region=west)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc2
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.51
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# No locality, so use bc1, since it's first.
opt format=show-all
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc1
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.51
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# Locality doesn't match any constraints, so use bc1, since it's first.
opt format=show-all locality=(region=central)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc1
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 15.01
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# --------------------------------------------------
# Multiple constraints.
# --------------------------------------------------

exec-ddl
ALTER TABLE abc CONFIGURE ZONE USING constraints='[+region=us,+dc=central,+rack=1]'
----

exec-ddl
ALTER INDEX abc@bc1 CONFIGURE ZONE USING constraints='[+region=us,+dc=east,+rack=1]'
----

# Do not specify region constraint.
exec-ddl
ALTER INDEX abc@bc2 CONFIGURE ZONE USING constraints='[+dc=west]'
----

# With locality in us + central, use primary index.
opt format=show-all locality=(region=us,dc=central)
SELECT * FROM abc
----
scan t.public.abc
 ├── columns: a:1(int!null) b:2(int) c:3(string)
 ├── stats: [rows=1000]
 ├── cost: 1074.61
 ├── key: (1)
 ├── fd: (1)-->(2,3), (2,3)~~>(1)
 ├── prune: (1-3)
 └── interesting orderings: (+1) (+2,+3,+1)

# With locality in us + central, still use bc1 index if filter is selective.
opt format=show-all locality=(region=us,dc=central)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc1
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.76
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# With locality in us + east, use bc1 index.
opt format=show-all locality=(region=us,dc=east)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc1
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.51
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# With locality in us + west, use bc2 index, even though region does not match
# any constraint on the index.
opt format=show-all locality=(region=us,dc=west)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc2
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.51
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# --------------------------------------------------
# Multiple replica constraints.
# --------------------------------------------------

exec-ddl
ALTER INDEX abc@bc1 CONFIGURE ZONE USING constraints='{"+region=us,+dc=east":2, "+region=us,+dc=west":1}'
----

exec-ddl
ALTER INDEX abc@bc2 CONFIGURE ZONE USING constraints='[+dc=east]'
----

# With locality in us, use bc1 index, since only one tier matches in case of
# both indexes.
opt format=show-all locality=(region=us)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc1
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.51
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# With locality in us + east, use bc2 index (use lowest match count when
# replicas have different numbers of matches).
opt format=show-all locality=(region=us,dc=east)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc2
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.51
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# --------------------------------------------------
# Complex constraints.
# --------------------------------------------------

exec-ddl
ALTER INDEX abc@bc1 CONFIGURE ZONE USING constraints='[+region=us,-region=eu,+region=ap]'
----

exec-ddl
ALTER INDEX abc@bc2 CONFIGURE ZONE USING constraints='[+region=eu,+region=us,+dc=east]'
----

# With locality in us, use bc1, since it's first in order.
opt format=show-all locality=(region=us)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc1
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.51
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# With locality in eu, use bc2, since it's prohibited with bc1.
opt format=show-all locality=(region=eu)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc2
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.51
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# With locality in us + east, use bc2, since it matches both tiers, even though
# "us" match is after "eu" in list.
opt format=show-all locality=(region=us,dc=east)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc2
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.51
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# With locality in ap + east, use bc1, since ap is not in list of regions for
# bc2, even though dc=east matches.
opt format=show-all locality=(region=ap,dc=east)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc1
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.76
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

exec-ddl
ALTER INDEX abc@bc1 CONFIGURE ZONE USING constraints='[-region=eu,+dc=east]'
----

exec-ddl
ALTER INDEX abc@bc2 CONFIGURE ZONE USING constraints='[+dc=east]'
----

# With locality in us + east, use bc1, since it's first in order.
opt format=show-all locality=(region=us,dc=east)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc1
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.51
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# With locality in eu + east, use bc2, since eu is prohibited for bc1.
opt format=show-all locality=(region=eu,dc=east)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc2
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.51
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# --------------------------------------------------
# Lookup join.
# --------------------------------------------------

exec-ddl
ALTER INDEX abc@bc1 CONFIGURE ZONE USING constraints='[+region=us,+dc=east]'
----

exec-ddl
ALTER INDEX abc@bc2 CONFIGURE ZONE USING constraints='[+region=us,+dc=west]'
----

exec-ddl
ALTER INDEX xy@y1 CONFIGURE ZONE USING constraints='[+region=us,+dc=east]'
----

exec-ddl
ALTER INDEX xy@y2 CONFIGURE ZONE USING constraints='[+region=us,+dc=west]'
----

# Ensure that both indexes involved in the lookup join are selected from the
# "west" data center.
opt format=show-all locality=(region=us,dc=west)
SELECT * FROM abc INNER LOOKUP JOIN xy ON b=y WHERE b=1
----
inner-join (lookup t.public.xy@y2)
 ├── columns: a:1(int!null) b:2(int!null) c:3(string) x:5(int!null) y:6(int!null)
 ├── flags: force lookup join (into right side)
 ├── key columns: [2] = [6]
 ├── stats: [rows=100, distinct(2)=1, null(2)=0, distinct(6)=1, null(6)=0]
 ├── cost: 417.58
 ├── key: (1,5)
 ├── fd: ()-->(2,6), (1)-->(3), (2,3)~~>(1), (2)==(6), (6)==(2)
 ├── prune: (1,3,5)
 ├── interesting orderings: (+1) (+2,+3,+1) (+5) (+6,+5)
 ├── scan t.public.abc@bc2
 │    ├── columns: t.public.abc.a:1(int!null) t.public.abc.b:2(int!null) t.public.abc.c:3(string)
 │    ├── constraint: /2/3: [/1 - /1]
 │    ├── stats: [rows=10, distinct(1)=10, null(1)=0, distinct(2)=1, null(2)=0]
 │    ├── cost: 14.61
 │    ├── key: (1)
 │    ├── fd: ()-->(2), (1)-->(3), (2,3)~~>(1)
 │    ├── prune: (1,3)
 │    └── interesting orderings: (+1) (+2,+3,+1)
 └── filters
      └── eq [type=bool, outer=(6), constraints=(/6: [/1 - /1]; tight), fd=()-->(6)]
           ├── variable: t.public.xy.y:6 [type=int]
           └── const: 1 [type=int]

# Switch the data center for the target lookup join index.

exec-ddl
ALTER INDEX xy@y1 CONFIGURE ZONE USING constraints='[+region=us,+dc=west]'
----

exec-ddl
ALTER INDEX xy@y2 CONFIGURE ZONE USING constraints='[+region=us,+dc=east]'
----

# Should use other index now.
opt format=show-all locality=(region=us,dc=west)
SELECT * FROM abc INNER LOOKUP JOIN xy ON b=y WHERE b=1
----
inner-join (lookup t.public.xy@y1)
 ├── columns: a:1(int!null) b:2(int!null) c:3(string) x:5(int!null) y:6(int!null)
 ├── flags: force lookup join (into right side)
 ├── key columns: [2] = [6]
 ├── stats: [rows=100, distinct(2)=1, null(2)=0, distinct(6)=1, null(6)=0]
 ├── cost: 417.58
 ├── key: (1,5)
 ├── fd: ()-->(2,6), (1)-->(3), (2,3)~~>(1), (2)==(6), (6)==(2)
 ├── prune: (1,3,5)
 ├── interesting orderings: (+1) (+2,+3,+1) (+5) (+6,+5)
 ├── scan t.public.abc@bc2
 │    ├── columns: t.public.abc.a:1(int!null) t.public.abc.b:2(int!null) t.public.abc.c:3(string)
 │    ├── constraint: /2/3: [/1 - /1]
 │    ├── stats: [rows=10, distinct(1)=10, null(1)=0, distinct(2)=1, null(2)=0]
 │    ├── cost: 14.61
 │    ├── key: (1)
 │    ├── fd: ()-->(2), (1)-->(3), (2,3)~~>(1)
 │    ├── prune: (1,3)
 │    └── interesting orderings: (+1) (+2,+3,+1)
 └── filters
      └── eq [type=bool, outer=(6), constraints=(/6: [/1 - /1]; tight), fd=()-->(6)]
           ├── variable: t.public.xy.y:6 [type=int]
           └── const: 1 [type=int]

# --------------------------------------------------
# Lease preferences - single constraint.
# --------------------------------------------------

exec-ddl
ALTER TABLE abc CONFIGURE ZONE USING lease_preferences='[[+region=central]]'
----

exec-ddl
ALTER INDEX abc@bc1 CONFIGURE ZONE USING lease_preferences='[[+region=east]]'
----

exec-ddl
ALTER INDEX abc@bc2 CONFIGURE ZONE USING lease_preferences='[[+region=west]]'
----

# With locality in us + central, use primary index.
opt format=show-all locality=(region=central)
SELECT * FROM abc
----
scan t.public.abc
 ├── columns: a:1(int!null) b:2(int) c:3(string)
 ├── stats: [rows=1000]
 ├── cost: 1115.01
 ├── key: (1)
 ├── fd: (1)-->(2,3), (2,3)~~>(1)
 ├── prune: (1-3)
 └── interesting orderings: (+1) (+2,+3,+1)

# With locality in us + central, still use bc1 index if filter is selective.
opt format=show-all locality=(region=central)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc1
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 15.01
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# With locality in east, use bc1 index.
opt format=show-all locality=(region=east)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc1
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.8433333
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# With locality in west, use bc2 index.
opt format=show-all locality=(region=west)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc2
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.8433333
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# --------------------------------------------------
# Lease preferences - multiple constraints.
# --------------------------------------------------

exec-ddl
ALTER TABLE abc CONFIGURE ZONE USING lease_preferences='[[+region=us,+dc=central,+rack=1]]'
----

exec-ddl
ALTER INDEX abc@bc1 CONFIGURE ZONE USING lease_preferences='[[+region=us,+dc=east,+rack=1]]'
----

exec-ddl
ALTER INDEX abc@bc2 CONFIGURE ZONE USING lease_preferences='[[+region=us,+dc=west,+rack=1]]'
----

# With locality in us + central, use primary index.
opt format=show-all locality=(region=us,dc=central)
SELECT * FROM abc
----
scan t.public.abc
 ├── columns: a:1(int!null) b:2(int) c:3(string)
 ├── stats: [rows=1000]
 ├── cost: 1115.01
 ├── key: (1)
 ├── fd: (1)-->(2,3), (2,3)~~>(1)
 ├── prune: (1-3)
 └── interesting orderings: (+1) (+2,+3,+1)

# With locality in us + central, still use bc1 index if filter is selective.
opt format=show-all locality=(region=us,dc=central)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc1
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.9266667
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# With locality in us + east, use bc1 index.
opt format=show-all locality=(region=us,dc=east)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc1
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.8433333
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# With locality in us + west, use bc2 index.
opt format=show-all locality=(region=us,dc=west)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc2
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.8433333
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# --------------------------------------------------
# Zone constraint + leaseholder preference.
# --------------------------------------------------

exec-ddl
ALTER TABLE abc CONFIGURE ZONE
USING constraints='[+region=us]', lease_preferences='[[+region=us,+dc=central]]'
----

exec-ddl
ALTER INDEX abc@bc1 CONFIGURE ZONE
USING constraints='[+region=us]', lease_preferences='[[+region=us,+dc=east]]'
----

exec-ddl
ALTER INDEX abc@bc2 CONFIGURE ZONE
USING constraints='[+region=us]', lease_preferences='[[+region=us,+dc=west]]'
----

# With locality in us + central, use primary index.
opt format=show-all locality=(region=us,dc=central)
SELECT * FROM abc
----
scan t.public.abc
 ├── columns: a:1(int!null) b:2(int) c:3(string)
 ├── stats: [rows=1000]
 ├── cost: 1094.81
 ├── key: (1)
 ├── fd: (1)-->(2,3), (2,3)~~>(1)
 ├── prune: (1-3)
 └── interesting orderings: (+1) (+2,+3,+1)

# With locality in us + central, still use bc1 index if filter is selective.
opt format=show-all locality=(region=us,dc=central)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc1
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.76
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# With locality in us + east, use bc1 index.
opt format=show-all locality=(region=us,dc=east)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc1
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.6766667
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# With locality in us + west, use bc2 index.
opt format=show-all locality=(region=us,dc=west)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc2
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.6766667
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

exec-ddl
ALTER TABLE abc CONFIGURE ZONE USING constraints='[+region=us]'
----

exec-ddl
ALTER INDEX abc@bc1 CONFIGURE ZONE
USING constraints='[+region=us]', lease_preferences='[[+region=us,+dc=east]]'
----

exec-ddl
ALTER INDEX abc@bc2 CONFIGURE ZONE
USING constraints='[+region=us,+dc=east]'
----

# With locality in the east, prefer the index with the constraints over the
# index with just the lease preferences.
opt format=show-all locality=(region=us,dc=east)
SELECT b, c FROM abc WHERE b=10
----
scan t.public.abc@bc2
 ├── columns: b:2(int!null) c:3(string)
 ├── constraint: /2/3: [/10 - /10]
 ├── stats: [rows=10, distinct(2)=1, null(2)=0]
 ├── cost: 14.51
 ├── lax-key: (3)
 ├── fd: ()-->(2)
 ├── prune: (3)
 └── interesting orderings: (+2,+3)

# --------------------------------------------------
# Partition zones.
# --------------------------------------------------

exec-ddl
CREATE TABLE abc_part (
    r STRING NOT NULL CHECK (r IN ('east', 'west')),
    a INT PRIMARY KEY,
    b INT,
    c STRING,
    UNIQUE WITHOUT INDEX (b, c),
    UNIQUE INDEX bc_idx (r, b, c) PARTITION BY LIST (r) (
      PARTITION east VALUES IN (('east')),
      PARTITION west VALUES IN (('west'))
    ),
    INDEX b_idx (r, b) PARTITION BY LIST (r) (
      PARTITION east VALUES IN (('east')),
      PARTITION west VALUES IN (('west'))
    )
)
----

exec-ddl
ALTER PARTITION "east" OF INDEX abc_part@bc_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=east: 2}',
  lease_preferences = '[[+region=east]]'
----

exec-ddl
ALTER PARTITION "west" OF INDEX abc_part@bc_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=west: 2}',
  lease_preferences = '[[+region=west]]';
----

# We should prefer the locality optimized search here.
opt format=show-all locality=(region=east,dc=a)
SELECT * FROM abc_part WHERE b = 1 AND c = 'foo'
----
locality-optimized-search
 ├── columns: r:1(string!null) a:2(int!null) b:3(int!null) c:4(string!null)
 ├── left columns: t.public.abc_part.r:6(string) t.public.abc_part.a:7(int) t.public.abc_part.b:8(int) t.public.abc_part.c:9(string)
 ├── right columns: t.public.abc_part.r:11(string) t.public.abc_part.a:12(int) t.public.abc_part.b:13(int) t.public.abc_part.c:14(string)
 ├── cardinality: [0 - 1]
 ├── stats: [rows=0.910000001, distinct(3)=0.910000001, null(3)=0, distinct(4)=0.910000001, null(4)=0, distinct(3,4)=0.910000001, null(3,4)=0]
 ├── cost: 5.083216
 ├── key: ()
 ├── fd: ()-->(1-4)
 ├── prune: (1,2)
 ├── interesting orderings: (+2) (+1,+3,+4,+2) (+1,+3,+2)
 ├── scan t.public.abc_part@bc_idx
 │    ├── columns: t.public.abc_part.r:6(string!null) t.public.abc_part.a:7(int!null) t.public.abc_part.b:8(int!null) t.public.abc_part.c:9(string!null)
 │    ├── constraint: /6/8/9: [/'east'/1/'foo' - /'east'/1/'foo']
 │    ├── cardinality: [0 - 1]
 │    ├── stats: [rows=0.9001, distinct(6)=0.9001, null(6)=0, distinct(8)=0.9001, null(8)=0, distinct(9)=0.9001, null(9)=0, distinct(6,8,9)=0.9001, null(6,8,9)=0]
 │    ├── cost: 2.532058
 │    ├── key: ()
 │    ├── fd: ()-->(6-9)
 │    ├── prune: (6-9)
 │    └── interesting orderings: (+7) (+6,+8,+9,+7) (+6,+8,+7)
 └── scan t.public.abc_part@bc_idx
      ├── columns: t.public.abc_part.r:11(string!null) t.public.abc_part.a:12(int!null) t.public.abc_part.b:13(int!null) t.public.abc_part.c:14(string!null)
      ├── constraint: /11/13/14: [/'west'/1/'foo' - /'west'/1/'foo']
      ├── cardinality: [0 - 1]
      ├── stats: [rows=0.9001, distinct(11)=0.9001, null(11)=0, distinct(13)=0.9001, null(13)=0, distinct(14)=0.9001, null(14)=0, distinct(11,13,14)=0.9001, null(11,13,14)=0]
      ├── cost: 2.532058
      ├── key: ()
      ├── fd: ()-->(11-14)
      ├── prune: (11-14)
      └── interesting orderings: (+12) (+11,+13,+14,+12) (+11,+13,+12)

# We should prefer locality optimized anti join (a pair of nested anti joins).
opt locality=(region=east,dc=a)
SELECT * FROM abc_part AS a1 WHERE NOT EXISTS (
  SELECT * FROM abc_part AS a2 WHERE a1.a = a2.b
) AND b = 1 AND c = 'foo'
----
anti-join (lookup abc_part@bc_idx [as=a2])
 ├── columns: r:1!null a:2!null b:3!null c:4!null
 ├── lookup expression
 │    └── filters
 │         ├── a1.a:2 = a2.b:8 [outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ]), fd=(2)==(8), (8)==(2)]
 │         └── a2.r:6 = 'west' [outer=(6), constraints=(/6: [/'west' - /'west']; tight), fd=()-->(6)]
 ├── cardinality: [0 - 1]
 ├── stats: [rows=1e-10]
 ├── cost: 23.4031483
 ├── key: ()
 ├── fd: ()-->(1-4)
 ├── anti-join (lookup abc_part@bc_idx [as=a2])
 │    ├── columns: a1.r:1!null a1.a:2!null a1.b:3!null a1.c:4!null
 │    ├── lookup expression
 │    │    └── filters
 │    │         ├── a1.a:2 = a2.b:8 [outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ]), fd=(2)==(8), (8)==(2)]
 │    │         └── a2.r:6 = 'east' [outer=(6), constraints=(/6: [/'east' - /'east']; tight), fd=()-->(6)]
 │    ├── cardinality: [0 - 1]
 │    ├── stats: [rows=0.900900001, distinct(1)=0.89738934, null(1)=0, distinct(2)=0.900900001, null(2)=0, distinct(3)=0.900900001, null(3)=0, distinct(4)=0.900900001, null(4)=0]
 │    ├── cost: 14.2891619
 │    ├── key: ()
 │    ├── fd: ()-->(1-4)
 │    ├── locality-optimized-search
 │    │    ├── columns: a1.r:1!null a1.a:2!null a1.b:3!null a1.c:4!null
 │    │    ├── left columns: a1.r:11 a1.a:12 a1.b:13 a1.c:14
 │    │    ├── right columns: a1.r:16 a1.a:17 a1.b:18 a1.c:19
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── stats: [rows=0.910000001, distinct(1)=0.906282579, null(1)=0, distinct(2)=0.910000001, null(2)=0, distinct(3)=0.910000001, null(3)=0, distinct(4)=0.910000001, null(4)=0, distinct(3,4)=0.910000001, null(3,4)=0]
 │    │    ├── cost: 5.083216
 │    │    ├── key: ()
 │    │    ├── fd: ()-->(1-4)
 │    │    ├── scan abc_part@bc_idx [as=a1]
 │    │    │    ├── columns: a1.r:11!null a1.a:12!null a1.b:13!null a1.c:14!null
 │    │    │    ├── constraint: /11/13/14: [/'east'/1/'foo' - /'east'/1/'foo']
 │    │    │    ├── cardinality: [0 - 1]
 │    │    │    ├── stats: [rows=0.9001, distinct(11)=0.9001, null(11)=0, distinct(13)=0.9001, null(13)=0, distinct(14)=0.9001, null(14)=0, distinct(11,13,14)=0.9001, null(11,13,14)=0]
 │    │    │    ├── cost: 2.532058
 │    │    │    ├── key: ()
 │    │    │    └── fd: ()-->(11-14)
 │    │    └── scan abc_part@bc_idx [as=a1]
 │    │         ├── columns: a1.r:16!null a1.a:17!null a1.b:18!null a1.c:19!null
 │    │         ├── constraint: /16/18/19: [/'west'/1/'foo' - /'west'/1/'foo']
 │    │         ├── cardinality: [0 - 1]
 │    │         ├── stats: [rows=0.9001, distinct(16)=0.9001, null(16)=0, distinct(18)=0.9001, null(18)=0, distinct(19)=0.9001, null(19)=0, distinct(16,18,19)=0.9001, null(16,18,19)=0]
 │    │         ├── cost: 2.532058
 │    │         ├── key: ()
 │    │         └── fd: ()-->(16-19)
 │    └── filters (true)
 └── filters (true)
