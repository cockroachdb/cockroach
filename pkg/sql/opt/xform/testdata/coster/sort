exec-ddl
CREATE TABLE t.a
(
    k INT,
    f FLOAT,
    z DECIMAL,
    s STRING NOT NULL,
    PRIMARY KEY (k, f DESC)
)
----

opt
SELECT f FROM a ORDER BY f DESC
----
sort
 ├── columns: f:2(float!null)
 ├── stats: [rows=1000]
 ├── cost: 1269.34569
 ├── ordering: -2
 └── scan a
      ├── columns: f:2(float!null)
      ├── stats: [rows=1000]
      └── cost: 1050.02

# Test sort on 0 rows.
opt
SELECT f FROM a WHERE k IN () ORDER BY f DESC
----
values
 ├── columns: f:2(float!null)
 ├── cardinality: [0 - 0]
 ├── stats: [rows=0]
 ├── cost: 0.01
 ├── key: ()
 └── fd: ()-->(2)

# Testing costing for segmented sort.
exec-ddl
CREATE TABLE abc (
  a INT,
  b INT,
  c INT,
  INDEX cb (c, b) STORING (a),
  INDEX ab (a, b) STORING (c)
)
----

# The ordering cannot take advantage of any interesting orderings
# the scan can provide.
opt
SELECT * FROM abc ORDER BY b, c, a
----
sort
 ├── columns: a:1(int) b:2(int) c:3(int)
 ├── stats: [rows=1000]
 ├── cost: 1301.40805
 ├── ordering: +2,+3,+1
 └── scan abc
      ├── columns: a:1(int) b:2(int) c:3(int)
      ├── stats: [rows=1000]
      └── cost: 1070.02

# The sort ordering has a common prefix with the ordering provided with index ab
opt
SELECT * FROM abc ORDER BY a, b, c
----
sort
 ├── columns: a:1(int) b:2(int) c:3(int)
 ├── stats: [rows=1000, distinct(1,2)=1000, null(1,2)=19.9]
 ├── cost: 1101.03
 ├── ordering: +1,+2,+3
 └── scan abc@ab
      ├── columns: a:1(int) b:2(int) c:3(int)
      ├── stats: [rows=1000, distinct(1,2)=1000, null(1,2)=19.9]
      ├── cost: 1070.02
      └── ordering: +1,+2

# The sort ordering has a common prefix with the ordering provided with index cb
opt
SELECT * FROM abc ORDER BY c, b, a
----
sort
 ├── columns: a:1(int) b:2(int) c:3(int)
 ├── stats: [rows=1000, distinct(2,3)=1000, null(2,3)=19.9]
 ├── cost: 1101.03
 ├── ordering: +3,+2,+1
 └── scan abc@cb
      ├── columns: a:1(int) b:2(int) c:3(int)
      ├── stats: [rows=1000, distinct(2,3)=1000, null(2,3)=19.9]
      ├── cost: 1070.02
      └── ordering: +3,+2

# Testing segmented sort cost with only one common prefix column (c).
opt
SELECT * FROM abc ORDER BY c, a, b
----
sort
 ├── columns: a:1(int) b:2(int) c:3(int)
 ├── stats: [rows=1000, distinct(3)=100, null(3)=10]
 ├── cost: 1161.22268
 ├── ordering: +3,+1,+2
 └── scan abc@cb
      ├── columns: a:1(int) b:2(int) c:3(int)
      ├── stats: [rows=1000, distinct(3)=100, null(3)=10]
      ├── cost: 1070.02
      └── ordering: +3

# Reduce the number of segments/chunks.
exec-ddl
ALTER TABLE abc INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 1
  },
  {
    "columns": ["b"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 10
  }
]'
----

# Per-row cost is higher with segmented sort and it may not always be worth it.
opt
SELECT * FROM abc ORDER BY a, b, c
----
sort
 ├── columns: a:1(int) b:2(int) c:3(int)
 ├── stats: [rows=10000, distinct(1,2)=10, null(1,2)=0]
 ├── cost: 13714.7373
 ├── ordering: +1,+2,+3
 └── scan abc
      ├── columns: a:1(int) b:2(int) c:3(int)
      ├── stats: [rows=10000, distinct(1,2)=10, null(1,2)=0]
      └── cost: 10700.02

# Increase the number of segments/chunks.
exec-ddl
ALTER TABLE abc INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 10
  },
  {
    "columns": ["b"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 100
  }
]'
----

# The distinct count for the colset (a, b) (which is the common prefix)
# is 1000 (10 * 100), and so the benefit the sort gets from having approximately
# 1000 segments in the right place is greater than having to sort all 10000
# rows with no pre-ordering.
opt
SELECT * FROM abc ORDER BY a, b, c
----
sort
 ├── columns: a:1(int) b:2(int) c:3(int)
 ├── stats: [rows=10000, distinct(1,2)=1000, null(1,2)=0]
 ├── cost: 12039.8277
 ├── ordering: +1,+2,+3
 └── scan abc@ab
      ├── columns: a:1(int) b:2(int) c:3(int)
      ├── stats: [rows=10000, distinct(1,2)=1000, null(1,2)=0]
      ├── cost: 10700.02
      └── ordering: +1,+2
