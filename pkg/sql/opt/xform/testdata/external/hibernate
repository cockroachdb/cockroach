# These are queries that test correlated subqueries, and are taken from the
# Hibernate test suite. See this issue:
#   https://github.com/cockroachdb/cockroach/issues/26658

# ------------------------------------------------------------------------------
# Query #1
#   org.hibernate.userguide.collections.UnidirectionalMapTest testLifecycle
# ------------------------------------------------------------------------------
exec-ddl
create table Person (
  id int8 not null,
  primary key (id)
)
----

exec-ddl
create table Phone (
  id int8 not null,
  "number" varchar(255),
  since timestamp,
  type int4,
  primary key (id)
)
----

exec-ddl
create table phone_register (
  phone_id int8 not null,
  person_id int8 not null,
  primary key (phone_id, person_id),
  foreign key (person_id) references Phone (id),
  foreign key (phone_id) references Person (id),
  unique (person_id)
)
----

opt
select
  phoneregis0_.phone_id as phone_id1_2_0_,
  phoneregis0_.person_id as person_i2_2_0_,
  (
    select a10.since
    from Phone a10
    where a10.id=phoneregis0_.person_id
  ) as formula159_0_,
  unidirecti1_.id as id1_1_1_,
  unidirecti1_."number" as number2_1_1_,
  unidirecti1_.since as since3_1_1_,
  unidirecti1_.type as type4_1_1_
from
  phone_register phoneregis0_
inner join Phone unidirecti1_
  on phoneregis0_.person_id=unidirecti1_.id
where phoneregis0_.phone_id=1;
----
project
 ├── columns: phone_id1_2_0_:1!null person_i2_2_0_:2!null formula159_0_:11 id1_1_1_:3!null number2_1_1_:4 since3_1_1_:5 type4_1_1_:6
 ├── key: (3)
 ├── fd: ()-->(1), (3)-->(4-6), (2)==(3), (3)==(2), (2)-->(11)
 ├── inner-join (lookup phone)
 │    ├── columns: phone_id:1!null person_id:2!null unidirecti1_.id:3!null unidirecti1_.number:4 unidirecti1_.since:5 unidirecti1_.type:6 a10.id:7!null a10.since:9
 │    ├── key columns: [2] = [7]
 │    ├── lookup columns are key
 │    ├── key: (7)
 │    ├── fd: ()-->(1), (3)-->(4-6), (2)==(3,7), (3)==(2,7), (7)-->(9), (7)==(2,3)
 │    ├── inner-join (lookup phone)
 │    │    ├── columns: phone_id:1!null person_id:2!null unidirecti1_.id:3!null unidirecti1_.number:4 unidirecti1_.since:5 unidirecti1_.type:6
 │    │    ├── key columns: [2] = [3]
 │    │    ├── lookup columns are key
 │    │    ├── key: (3)
 │    │    ├── fd: ()-->(1), (3)-->(4-6), (2)==(3), (3)==(2)
 │    │    ├── scan phoneregis0_
 │    │    │    ├── columns: phone_id:1!null person_id:2!null
 │    │    │    ├── constraint: /1/2: [/1 - /1]
 │    │    │    ├── key: (2)
 │    │    │    └── fd: ()-->(1)
 │    │    └── filters (true)
 │    └── filters (true)
 └── projections
      └── a10.since:9 [as=formula159_0_:11, outer=(9)]

exec-ddl
drop table phone_register, Person, Phone;
----

# ------------------------------------------------------------------------------
# Query #2
#   org.hibernate.userguide.criteria.CriteriaTest:
#
#   test_criteria_from_fetch_example
#   test_criteria_from_join_example
#   test_criteria_from_multiple_root_example
# ------------------------------------------------------------------------------
exec-ddl
create table Person (
   id int8 not null,
    address varchar(255),
    createdOn timestamp,
    name varchar(255),
    nickName varchar(255),
    version int4 not null,
    primary key (id)
)
----

exec-ddl
create table Person_addresses (
   Person_id int8 not null,
    addresses varchar(255),
    addresses_KEY varchar(255) not null,
    primary key (Person_id, addresses_KEY)
)
----

exec-ddl
create table Phone (
   id int8 not null,
    phone_number varchar(255),
    phone_type varchar(255),
    person_id int8,
    order_id int4,
    primary key (id)
)
----

exec-ddl
create table phone_call (
   id int8 not null,
    duration int4 not null,
    call_timestamp timestamp,
    phone_id int8,
    primary key (id)
)
----

exec-ddl
create table Partner (
   id int8 not null,
    name varchar(255),
    version int4 not null,
    primary key (id)
)
----

opt
select
    phone0_.id as id1_6_0_,
    person1_.id as id1_4_1_,
    phone0_.phone_number as phone_nu2_6_0_,
    phone0_.person_id as person_i4_6_0_,
    phone0_.phone_type as phone_ty3_6_0_,
    addresses2_.Person_id as Person_i1_5_0__,
    addresses2_.addresses as addresse2_5_0__,
    addresses2_.addresses_KEY as addresse3_0__,
    person1_.address as address2_4_1_,
    person1_.createdOn as createdO3_4_1_,
    person1_.name as name4_4_1_,
    person1_.nickName as nickName5_4_1_,
    person1_.version as version6_4_1_,
    addresses2_.Person_id as Person_i1_5_0__,
    addresses2_.addresses as addresse2_5_0__,
    addresses2_.addresses_KEY as addresse3_0__
from
    Phone phone0_
inner join
    Person person1_
        on phone0_.person_id=person1_.id
inner join
    Person_addresses addresses2_
        on person1_.id=addresses2_.Person_id
where
    exists (
        select
            calls3_.id
        from
            phone_call calls3_
        where
            phone0_.id=calls3_.phone_id
    )
----
inner-join (hash)
 ├── columns: id1_6_0_:1!null id1_4_1_:6!null phone_nu2_6_0_:2 person_i4_6_0_:4!null phone_ty3_6_0_:3 person_i1_5_0__:12!null addresse2_5_0__:13 addresse3_0__:14!null address2_4_1_:7 createdo3_4_1_:8 name4_4_1_:9 nickname5_4_1_:10 version6_4_1_:11!null person_i1_5_0__:12!null addresse2_5_0__:13 addresse3_0__:14!null
 ├── key: (1,14)
 ├── fd: (1)-->(2-4), (6)-->(7-11), (4)==(6,12), (6)==(4,12), (12,14)-->(13), (12)==(4,6)
 ├── scan addresses2_
 │    ├── columns: addresses2_.person_id:12!null addresses:13 addresses_key:14!null
 │    ├── key: (12,14)
 │    └── fd: (12,14)-->(13)
 ├── inner-join (lookup person)
 │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 phone0_.person_id:4!null person1_.id:6!null address:7 createdon:8 name:9 nickname:10 version:11!null
 │    ├── key columns: [4] = [6]
 │    ├── lookup columns are key
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4), (6)-->(7-11), (4)==(6), (6)==(4)
 │    ├── project
 │    │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 phone0_.person_id:4
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2-4)
 │    │    └── inner-join (lookup phone)
 │    │         ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 phone0_.person_id:4 phone_id:18!null
 │    │         ├── key columns: [18] = [1]
 │    │         ├── lookup columns are key
 │    │         ├── key: (18)
 │    │         ├── fd: (1)-->(2-4), (1)==(18), (18)==(1)
 │    │         ├── distinct-on
 │    │         │    ├── columns: phone_id:18
 │    │         │    ├── grouping columns: phone_id:18
 │    │         │    ├── key: (18)
 │    │         │    └── scan calls3_
 │    │         │         └── columns: phone_id:18
 │    │         └── filters (true)
 │    └── filters (true)
 └── filters
      └── person1_.id:6 = addresses2_.person_id:12 [outer=(6,12), constraints=(/6: (/NULL - ]; /12: (/NULL - ]), fd=(6)==(12), (12)==(6)]

opt
select
    phone0_.id as id1_6_,
    phone0_.phone_number as phone_nu2_6_,
    phone0_.person_id as person_i4_6_,
    phone0_.phone_type as phone_ty3_6_
from
    Phone phone0_
inner join
    Person person1_
        on phone0_.person_id=person1_.id
inner join
    Person_addresses addresses2_
        on person1_.id=addresses2_.Person_id
where
    exists (
        select
            calls3_.id
        from
            phone_call calls3_
        where
            phone0_.id=calls3_.phone_id
    )
----
project
 ├── columns: id1_6_:1!null phone_nu2_6_:2 person_i4_6_:4!null phone_ty3_6_:3
 ├── fd: (1)-->(2-4)
 └── inner-join (hash)
      ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 phone0_.person_id:4!null person1_.id:6!null addresses2_.person_id:12!null
      ├── fd: (1)-->(2-4), (4)==(6,12), (6)==(4,12), (12)==(4,6)
      ├── scan addresses2_
      │    └── columns: addresses2_.person_id:12!null
      ├── inner-join (lookup person)
      │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 phone0_.person_id:4!null person1_.id:6!null
      │    ├── key columns: [4] = [6]
      │    ├── lookup columns are key
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-4), (4)==(6), (6)==(4)
      │    ├── project
      │    │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 phone0_.person_id:4
      │    │    ├── key: (1)
      │    │    ├── fd: (1)-->(2-4)
      │    │    └── inner-join (lookup phone)
      │    │         ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 phone0_.person_id:4 phone_id:18!null
      │    │         ├── key columns: [18] = [1]
      │    │         ├── lookup columns are key
      │    │         ├── key: (18)
      │    │         ├── fd: (1)-->(2-4), (1)==(18), (18)==(1)
      │    │         ├── distinct-on
      │    │         │    ├── columns: phone_id:18
      │    │         │    ├── grouping columns: phone_id:18
      │    │         │    ├── key: (18)
      │    │         │    └── scan calls3_
      │    │         │         └── columns: phone_id:18
      │    │         └── filters (true)
      │    └── filters (true)
      └── filters
           └── person1_.id:6 = addresses2_.person_id:12 [outer=(6,12), constraints=(/6: (/NULL - ]; /12: (/NULL - ]), fd=(6)==(12), (12)==(6)]

opt
select
    person0_.id as id1_4_0_,
    partner1_.id as id1_2_1_,
    person0_.address as address2_4_0_,
    person0_.createdOn as createdO3_4_0_,
    person0_.name as name4_4_0_,
    person0_.nickName as nickName5_4_0_,
    person0_.version as version6_4_0_,
    partner1_.name as name2_2_1_,
    partner1_.version as version3_2_1_
from
    Person person0_ cross
join
    Partner partner1_
where
    person0_.address=$1
    and (
        exists (
            select
                phones2_.id
            from
                Phone phones2_
            where
                person0_.id=phones2_.person_id
        )
    )
    and (
        partner1_.name like $2
    )
    and partner1_.version=0
----
inner-join (cross)
 ├── columns: id1_4_0_:1!null id1_2_1_:7!null address2_4_0_:2!null createdo3_4_0_:3 name4_4_0_:4 nickname5_4_0_:5 version6_4_0_:6!null name2_2_1_:8!null version3_2_1_:9!null
 ├── has-placeholder
 ├── key: (1,7)
 ├── fd: ()-->(9), (1)-->(2-6), (7)-->(8)
 ├── project
 │    ├── columns: person0_.id:1!null address:2!null createdon:3 person0_.name:4 nickname:5 person0_.version:6!null
 │    ├── has-placeholder
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-6)
 │    └── inner-join (lookup person)
 │         ├── columns: person0_.id:1!null address:2!null createdon:3 person0_.name:4 nickname:5 person0_.version:6!null person_id:13!null
 │         ├── key columns: [13] = [1]
 │         ├── lookup columns are key
 │         ├── has-placeholder
 │         ├── key: (13)
 │         ├── fd: (1)-->(2-6), (1)==(13), (13)==(1)
 │         ├── distinct-on
 │         │    ├── columns: person_id:13
 │         │    ├── grouping columns: person_id:13
 │         │    ├── key: (13)
 │         │    └── scan phones2_
 │         │         └── columns: person_id:13
 │         └── filters
 │              └── address:2 = $1 [outer=(2), constraints=(/2: (/NULL - ])]
 ├── select
 │    ├── columns: partner1_.id:7!null partner1_.name:8!null partner1_.version:9!null
 │    ├── has-placeholder
 │    ├── key: (7)
 │    ├── fd: ()-->(9), (7)-->(8)
 │    ├── scan partner1_
 │    │    ├── columns: partner1_.id:7!null partner1_.name:8 partner1_.version:9!null
 │    │    ├── key: (7)
 │    │    └── fd: (7)-->(8,9)
 │    └── filters
 │         ├── partner1_.name:8 LIKE $2 [outer=(8), constraints=(/8: (/NULL - ])]
 │         └── partner1_.version:9 = 0 [outer=(9), constraints=(/9: [/0 - /0]; tight), fd=()-->(9)]
 └── filters (true)

exec-ddl
drop table Person, Person_addresses, Phone, phone_call, Partner;
----

# ------------------------------------------------------------------------------
# Query #3
#   org.hibernate.userguide.envers.DefaultAuditTest test
# ------------------------------------------------------------------------------
exec-ddl
create table Customer_AUD (
   id int8 not null,
    REV int4 not null,
    REVTYPE int2,
    created_on timestamp,
    firstName varchar(255),
    lastName varchar(255),
    primary key (id, REV)
)
----

opt
select
    defaultaud0_.id as id1_1_,
    defaultaud0_.REV as REV2_1_,
    defaultaud0_.REVTYPE as REVTYPE3_1_,
    defaultaud0_.created_on as created_4_1_,
    defaultaud0_.firstName as firstNam5_1_,
    defaultaud0_.lastName as lastName6_1_
from
    Customer_AUD defaultaud0_
where
    defaultaud0_.REV=(
        select
            max(defaultaud1_.REV)
        from
            Customer_AUD defaultaud1_
        where
            defaultaud1_.REV<=$1
            and defaultaud0_.id=defaultaud1_.id
    )
    and defaultaud0_.REVTYPE<>$2
----
project
 ├── columns: id1_1_:1!null rev2_1_:2!null revtype3_1_:3!null created_4_1_:4 firstnam5_1_:5 lastname6_1_:6
 ├── has-placeholder
 ├── key: (1,2)
 ├── fd: (1,2)-->(3-6)
 └── select
      ├── columns: defaultaud0_.id:1!null defaultaud0_.rev:2!null defaultaud0_.revtype:3!null defaultaud0_.created_on:4 defaultaud0_.firstname:5 defaultaud0_.lastname:6 max:13!null
      ├── has-placeholder
      ├── key: (1,2)
      ├── fd: (1,2)-->(3-6,13), (2)==(13), (13)==(2)
      ├── group-by
      │    ├── columns: defaultaud0_.id:1!null defaultaud0_.rev:2!null defaultaud0_.revtype:3!null defaultaud0_.created_on:4 defaultaud0_.firstname:5 defaultaud0_.lastname:6 max:13!null
      │    ├── grouping columns: defaultaud0_.id:1!null defaultaud0_.rev:2!null
      │    ├── has-placeholder
      │    ├── key: (1,2)
      │    ├── fd: (1,2)-->(3-6,13)
      │    ├── inner-join (merge)
      │    │    ├── columns: defaultaud0_.id:1!null defaultaud0_.rev:2!null defaultaud0_.revtype:3!null defaultaud0_.created_on:4 defaultaud0_.firstname:5 defaultaud0_.lastname:6 defaultaud1_.id:7!null defaultaud1_.rev:8!null
      │    │    ├── left ordering: +1
      │    │    ├── right ordering: +7
      │    │    ├── has-placeholder
      │    │    ├── key: (2,7,8)
      │    │    ├── fd: (1,2)-->(3-6), (1)==(7), (7)==(1)
      │    │    ├── select
      │    │    │    ├── columns: defaultaud0_.id:1!null defaultaud0_.rev:2!null defaultaud0_.revtype:3!null defaultaud0_.created_on:4 defaultaud0_.firstname:5 defaultaud0_.lastname:6
      │    │    │    ├── has-placeholder
      │    │    │    ├── key: (1,2)
      │    │    │    ├── fd: (1,2)-->(3-6)
      │    │    │    ├── ordering: +1
      │    │    │    ├── scan defaultaud0_
      │    │    │    │    ├── columns: defaultaud0_.id:1!null defaultaud0_.rev:2!null defaultaud0_.revtype:3 defaultaud0_.created_on:4 defaultaud0_.firstname:5 defaultaud0_.lastname:6
      │    │    │    │    ├── key: (1,2)
      │    │    │    │    ├── fd: (1,2)-->(3-6)
      │    │    │    │    └── ordering: +1
      │    │    │    └── filters
      │    │    │         └── defaultaud0_.revtype:3 != $2 [outer=(3), constraints=(/3: (/NULL - ])]
      │    │    ├── select
      │    │    │    ├── columns: defaultaud1_.id:7!null defaultaud1_.rev:8!null
      │    │    │    ├── has-placeholder
      │    │    │    ├── key: (7,8)
      │    │    │    ├── ordering: +7
      │    │    │    ├── scan defaultaud1_
      │    │    │    │    ├── columns: defaultaud1_.id:7!null defaultaud1_.rev:8!null
      │    │    │    │    ├── key: (7,8)
      │    │    │    │    └── ordering: +7
      │    │    │    └── filters
      │    │    │         └── defaultaud1_.rev:8 <= $1 [outer=(8), constraints=(/8: (/NULL - ])]
      │    │    └── filters (true)
      │    └── aggregations
      │         ├── max [as=max:13, outer=(8)]
      │         │    └── defaultaud1_.rev:8
      │         ├── const-agg [as=defaultaud0_.revtype:3, outer=(3)]
      │         │    └── defaultaud0_.revtype:3
      │         ├── const-agg [as=defaultaud0_.created_on:4, outer=(4)]
      │         │    └── defaultaud0_.created_on:4
      │         ├── const-agg [as=defaultaud0_.firstname:5, outer=(5)]
      │         │    └── defaultaud0_.firstname:5
      │         └── const-agg [as=defaultaud0_.lastname:6, outer=(6)]
      │              └── defaultaud0_.lastname:6
      └── filters
           └── defaultaud0_.rev:2 = max:13 [outer=(2,13), constraints=(/2: (/NULL - ]; /13: (/NULL - ]), fd=(2)==(13), (13)==(2)]

exec-ddl
drop table Customer_AUD;
----

# ------------------------------------------------------------------------------
# Query #4
#   org.hibernate.userguide.envers.QueryAuditTest test
# ------------------------------------------------------------------------------
exec-ddl
create table Customer_AUD (
   id int8 not null,
    REV int4 not null,
    REVTYPE int2,
    REVEND int4,
    created_on timestamp,
    firstName varchar(255),
    lastName varchar(255),
    address_id int8,
    primary key (id, REV)
)
----

opt
select
    queryaudit0_.id as id1_3_,
    queryaudit0_.REV as REV2_3_,
    queryaudit0_.REVTYPE as REVTYPE3_3_,
    queryaudit0_.REVEND as REVEND4_3_,
    queryaudit0_.created_on as created_5_3_,
    queryaudit0_.firstName as firstNam6_3_,
    queryaudit0_.lastName as lastName7_3_,
    queryaudit0_.address_id as address_8_3_
from
    Customer_AUD queryaudit0_
where
    queryaudit0_.REVTYPE<>$1
    and queryaudit0_.REV=(
        select
            max(queryaudit1_.REV)
        from
            Customer_AUD queryaudit1_
        where
            queryaudit1_.id=queryaudit0_.id
    )
order by
    queryaudit0_.REV asc
----
sort
 ├── columns: id1_3_:1!null rev2_3_:2!null revtype3_3_:3!null revend4_3_:4 created_5_3_:5 firstnam6_3_:6 lastname7_3_:7 address_8_3_:8
 ├── has-placeholder
 ├── key: (1,2)
 ├── fd: (1,2)-->(3-8)
 ├── ordering: +2
 └── project
      ├── columns: queryaudit0_.id:1!null queryaudit0_.rev:2!null queryaudit0_.revtype:3!null queryaudit0_.revend:4 queryaudit0_.created_on:5 queryaudit0_.firstname:6 queryaudit0_.lastname:7 queryaudit0_.address_id:8
      ├── has-placeholder
      ├── key: (1,2)
      ├── fd: (1,2)-->(3-8)
      └── select
           ├── columns: queryaudit0_.id:1!null queryaudit0_.rev:2!null queryaudit0_.revtype:3!null queryaudit0_.revend:4 queryaudit0_.created_on:5 queryaudit0_.firstname:6 queryaudit0_.lastname:7 queryaudit0_.address_id:8 max:17!null
           ├── has-placeholder
           ├── key: (1,2)
           ├── fd: (1,2)-->(3-8,17), (2)==(17), (17)==(2)
           ├── group-by
           │    ├── columns: queryaudit0_.id:1!null queryaudit0_.rev:2!null queryaudit0_.revtype:3!null queryaudit0_.revend:4 queryaudit0_.created_on:5 queryaudit0_.firstname:6 queryaudit0_.lastname:7 queryaudit0_.address_id:8 max:17!null
           │    ├── grouping columns: queryaudit0_.id:1!null queryaudit0_.rev:2!null
           │    ├── has-placeholder
           │    ├── key: (1,2)
           │    ├── fd: (1,2)-->(3-8,17)
           │    ├── inner-join (merge)
           │    │    ├── columns: queryaudit0_.id:1!null queryaudit0_.rev:2!null queryaudit0_.revtype:3!null queryaudit0_.revend:4 queryaudit0_.created_on:5 queryaudit0_.firstname:6 queryaudit0_.lastname:7 queryaudit0_.address_id:8 queryaudit1_.id:9!null queryaudit1_.rev:10!null
           │    │    ├── left ordering: +1
           │    │    ├── right ordering: +9
           │    │    ├── has-placeholder
           │    │    ├── key: (2,9,10)
           │    │    ├── fd: (1,2)-->(3-8), (1)==(9), (9)==(1)
           │    │    ├── select
           │    │    │    ├── columns: queryaudit0_.id:1!null queryaudit0_.rev:2!null queryaudit0_.revtype:3!null queryaudit0_.revend:4 queryaudit0_.created_on:5 queryaudit0_.firstname:6 queryaudit0_.lastname:7 queryaudit0_.address_id:8
           │    │    │    ├── has-placeholder
           │    │    │    ├── key: (1,2)
           │    │    │    ├── fd: (1,2)-->(3-8)
           │    │    │    ├── ordering: +1
           │    │    │    ├── scan queryaudit0_
           │    │    │    │    ├── columns: queryaudit0_.id:1!null queryaudit0_.rev:2!null queryaudit0_.revtype:3 queryaudit0_.revend:4 queryaudit0_.created_on:5 queryaudit0_.firstname:6 queryaudit0_.lastname:7 queryaudit0_.address_id:8
           │    │    │    │    ├── key: (1,2)
           │    │    │    │    ├── fd: (1,2)-->(3-8)
           │    │    │    │    └── ordering: +1
           │    │    │    └── filters
           │    │    │         └── queryaudit0_.revtype:3 != $1 [outer=(3), constraints=(/3: (/NULL - ])]
           │    │    ├── scan queryaudit1_
           │    │    │    ├── columns: queryaudit1_.id:9!null queryaudit1_.rev:10!null
           │    │    │    ├── key: (9,10)
           │    │    │    └── ordering: +9
           │    │    └── filters (true)
           │    └── aggregations
           │         ├── max [as=max:17, outer=(10)]
           │         │    └── queryaudit1_.rev:10
           │         ├── const-agg [as=queryaudit0_.revtype:3, outer=(3)]
           │         │    └── queryaudit0_.revtype:3
           │         ├── const-agg [as=queryaudit0_.revend:4, outer=(4)]
           │         │    └── queryaudit0_.revend:4
           │         ├── const-agg [as=queryaudit0_.created_on:5, outer=(5)]
           │         │    └── queryaudit0_.created_on:5
           │         ├── const-agg [as=queryaudit0_.firstname:6, outer=(6)]
           │         │    └── queryaudit0_.firstname:6
           │         ├── const-agg [as=queryaudit0_.lastname:7, outer=(7)]
           │         │    └── queryaudit0_.lastname:7
           │         └── const-agg [as=queryaudit0_.address_id:8, outer=(8)]
           │              └── queryaudit0_.address_id:8
           └── filters
                └── queryaudit0_.rev:2 = max:17 [outer=(2,17), constraints=(/2: (/NULL - ]; /17: (/NULL - ]), fd=(2)==(17), (17)==(2)]

exec-ddl
drop table Customer_AUD;
----

# ------------------------------------------------------------------------------
# Query #5
#   org.hibernate.userguide.hql.HQLTest
#     test_hql_all_subquery_comparison_qualifier_example
#     test_hql_collection_expressions_example_1
#     test_hql_collection_expressions_example_10
#     test_hql_collection_expressions_example_2
#     test_hql_collection_expressions_example_3
#     test_hql_collection_expressions_example_4
#     test_hql_collection_expressions_example_5
#     test_hql_collection_expressions_example_6
#     test_hql_collection_expressions_example_8
#     test_hql_collection_expressions_example_9
#     test_hql_collection_index_operator_example_3
#     test_hql_empty_collection_predicate_example_1
#     test_hql_empty_collection_predicate_example_2
#     test_hql_group_by_example_4
#     test_hql_member_of_collection_predicate_example_1
#     test_hql_member_of_collection_predicate_example_2
#   org.hibernate.jpa.test.criteria.enumcollection.EnumIsMemberTest
#     testQueryEnumCollection
# ------------------------------------------------------------------------------
exec-ddl
create table Phone (
   id int8 not null,
    phone_number varchar(255),
    phone_type varchar(255),
    person_id int8,
    order_id int4,
    primary key (id)
)
----

exec-ddl
create table phone_call (
   id int8 not null,
    duration int4 not null,
    call_timestamp timestamp,
    phone_id int8,
    primary key (id)
)
----

exec-ddl
create table Person (
   id int8 not null,
    address varchar(255),
    createdOn timestamp,
    name varchar(255),
    nickName varchar(255),
    version int4 not null,
    primary key (id)
)
----

exec-ddl
create table Phone_repairTimestamps (
   Phone_id int8 not null,
   repairTimestamps timestamp
)
----

exec-ddl
create table Person_addresses (
    Person_id int8 not null,
    addresses varchar(255),
    addresses_KEY varchar(255) not null,
    primary key (Person_id, addresses_KEY)
)
----

opt
select
    distinct person2_.id as id1_2_,
    person2_.address as address2_2_,
    person2_.createdOn as createdO3_2_,
    person2_.name as name4_2_,
    person2_.nickName as nickName5_2_,
    person2_.version as version6_2_
from
    Phone phone0_
inner join
    phone_call calls1_
        on phone0_.id=calls1_.phone_id
inner join
    Person person2_
        on phone0_.person_id=person2_.id
where
    50>all (
        select
            call3_.duration
        from
            phone_call call3_
        where
            call3_.phone_id=phone0_.id
    )
----
distinct-on
 ├── columns: id1_2_:10!null address2_2_:11 createdo3_2_:12 name4_2_:13 nickname5_2_:14 version6_2_:15!null
 ├── grouping columns: person2_.id:10!null
 ├── key: (10)
 ├── fd: (10)-->(11-15)
 ├── inner-join (hash)
 │    ├── columns: phone0_.id:1!null person_id:4!null calls1_.phone_id:9!null person2_.id:10!null address:11 createdon:12 name:13 nickname:14 version:15!null
 │    ├── fd: (1)-->(4), (1)==(9), (9)==(1), (10)-->(11-15), (4)==(10), (10)==(4)
 │    ├── scan calls1_
 │    │    └── columns: calls1_.phone_id:9
 │    ├── inner-join (hash)
 │    │    ├── columns: phone0_.id:1!null person_id:4!null person2_.id:10!null address:11 createdon:12 name:13 nickname:14 version:15!null
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(4), (10)-->(11-15), (4)==(10), (10)==(4)
 │    │    ├── scan person2_
 │    │    │    ├── columns: person2_.id:10!null address:11 createdon:12 name:13 nickname:14 version:15!null
 │    │    │    ├── key: (10)
 │    │    │    └── fd: (10)-->(11-15)
 │    │    ├── anti-join (hash)
 │    │    │    ├── columns: phone0_.id:1!null person_id:4
 │    │    │    ├── key: (1)
 │    │    │    ├── fd: (1)-->(4)
 │    │    │    ├── scan phone0_
 │    │    │    │    ├── columns: phone0_.id:1!null person_id:4
 │    │    │    │    ├── key: (1)
 │    │    │    │    └── fd: (1)-->(4)
 │    │    │    ├── select
 │    │    │    │    ├── columns: call3_.duration:17!null call3_.phone_id:19
 │    │    │    │    ├── scan call3_
 │    │    │    │    │    └── columns: call3_.duration:17!null call3_.phone_id:19
 │    │    │    │    └── filters
 │    │    │    │         └── (call3_.duration:17 >= 50) IS NOT false [outer=(17)]
 │    │    │    └── filters
 │    │    │         └── call3_.phone_id:19 = phone0_.id:1 [outer=(1,19), constraints=(/1: (/NULL - ]; /19: (/NULL - ]), fd=(1)==(19), (19)==(1)]
 │    │    └── filters
 │    │         └── person_id:4 = person2_.id:10 [outer=(4,10), constraints=(/4: (/NULL - ]; /10: (/NULL - ]), fd=(4)==(10), (10)==(4)]
 │    └── filters
 │         └── phone0_.id:1 = calls1_.phone_id:9 [outer=(1,9), constraints=(/1: (/NULL - ]; /9: (/NULL - ]), fd=(1)==(9), (9)==(1)]
 └── aggregations
      ├── const-agg [as=address:11, outer=(11)]
      │    └── address:11
      ├── const-agg [as=createdon:12, outer=(12)]
      │    └── createdon:12
      ├── const-agg [as=name:13, outer=(13)]
      │    └── name:13
      ├── const-agg [as=nickname:14, outer=(14)]
      │    └── nickname:14
      └── const-agg [as=version:15, outer=(15)]
           └── version:15

opt
select
    phone0_.id as id1_4_,
    phone0_.phone_number as phone_nu2_4_,
    phone0_.person_id as person_i4_4_,
    phone0_.phone_type as phone_ty3_4_
from
    Phone phone0_
where
    (
        select
            max(calls1_.id)
        from
            phone_call calls1_
        where
            phone0_.id=calls1_.phone_id
    )=$1
----
project
 ├── columns: id1_4_:1!null phone_nu2_4_:2 person_i4_4_:4 phone_ty3_4_:3
 ├── has-placeholder
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 └── select
      ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4 max:10!null
      ├── has-placeholder
      ├── key: (1)
      ├── fd: (1)-->(2-4,10)
      ├── group-by
      │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4 max:10!null
      │    ├── grouping columns: phone0_.id:1!null
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-4,10)
      │    ├── inner-join (hash)
      │    │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4 calls1_.id:6!null phone_id:9!null
      │    │    ├── key: (6)
      │    │    ├── fd: (1)-->(2-4), (6)-->(9), (1)==(9), (9)==(1)
      │    │    ├── scan phone0_
      │    │    │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4
      │    │    │    ├── key: (1)
      │    │    │    └── fd: (1)-->(2-4)
      │    │    ├── scan calls1_
      │    │    │    ├── columns: calls1_.id:6!null phone_id:9
      │    │    │    ├── key: (6)
      │    │    │    └── fd: (6)-->(9)
      │    │    └── filters
      │    │         └── phone0_.id:1 = phone_id:9 [outer=(1,9), constraints=(/1: (/NULL - ]; /9: (/NULL - ]), fd=(1)==(9), (9)==(1)]
      │    └── aggregations
      │         ├── max [as=max:10, outer=(6)]
      │         │    └── calls1_.id:6
      │         ├── const-agg [as=phone_number:2, outer=(2)]
      │         │    └── phone_number:2
      │         ├── const-agg [as=phone_type:3, outer=(3)]
      │         │    └── phone_type:3
      │         └── const-agg [as=person_id:4, outer=(4)]
      │              └── person_id:4
      └── filters
           └── max:10 = $1 [outer=(10), constraints=(/10: (/NULL - ])]

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    (
        select
            count(phones1_.person_id)
        from
            Phone phones1_
        where
            person0_.id=phones1_.person_id
    )=2
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 └── select
      ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null count:12!null
      ├── key: (1)
      ├── fd: ()-->(12), (1)-->(2-6)
      ├── group-by
      │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null count:12!null
      │    ├── grouping columns: person0_.id:1!null
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-6,12)
      │    ├── left-join (hash)
      │    │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null person_id:10
      │    │    ├── fd: (1)-->(2-6)
      │    │    ├── scan person0_
      │    │    │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null
      │    │    │    ├── key: (1)
      │    │    │    └── fd: (1)-->(2-6)
      │    │    ├── scan phones1_
      │    │    │    └── columns: person_id:10
      │    │    └── filters
      │    │         └── person0_.id:1 = person_id:10 [outer=(1,10), constraints=(/1: (/NULL - ]; /10: (/NULL - ]), fd=(1)==(10), (10)==(1)]
      │    └── aggregations
      │         ├── count [as=count:12, outer=(10)]
      │         │    └── person_id:10
      │         ├── const-agg [as=address:2, outer=(2)]
      │         │    └── address:2
      │         ├── const-agg [as=createdon:3, outer=(3)]
      │         │    └── createdon:3
      │         ├── const-agg [as=name:4, outer=(4)]
      │         │    └── name:4
      │         ├── const-agg [as=nickname:5, outer=(5)]
      │         │    └── nickname:5
      │         └── const-agg [as=version:6, outer=(6)]
      │              └── version:6
      └── filters
           └── count:12 = 2 [outer=(12), constraints=(/12: [/2 - /2]; tight), fd=()-->(12)]

opt
select
    phone0_.id as id1_4_,
    phone0_.phone_number as phone_nu2_4_,
    phone0_.person_id as person_i4_4_,
    phone0_.phone_type as phone_ty3_4_
from
    Phone phone0_
where
    (
        select
            min(calls1_.id)
        from
            phone_call calls1_
        where
            phone0_.id=calls1_.phone_id
    )=$1
----
project
 ├── columns: id1_4_:1!null phone_nu2_4_:2 person_i4_4_:4 phone_ty3_4_:3
 ├── has-placeholder
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 └── select
      ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4 min:10!null
      ├── has-placeholder
      ├── key: (1)
      ├── fd: (1)-->(2-4,10)
      ├── group-by
      │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4 min:10!null
      │    ├── grouping columns: phone0_.id:1!null
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-4,10)
      │    ├── inner-join (hash)
      │    │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4 calls1_.id:6!null phone_id:9!null
      │    │    ├── key: (6)
      │    │    ├── fd: (1)-->(2-4), (6)-->(9), (1)==(9), (9)==(1)
      │    │    ├── scan phone0_
      │    │    │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4
      │    │    │    ├── key: (1)
      │    │    │    └── fd: (1)-->(2-4)
      │    │    ├── scan calls1_
      │    │    │    ├── columns: calls1_.id:6!null phone_id:9
      │    │    │    ├── key: (6)
      │    │    │    └── fd: (6)-->(9)
      │    │    └── filters
      │    │         └── phone0_.id:1 = phone_id:9 [outer=(1,9), constraints=(/1: (/NULL - ]; /9: (/NULL - ]), fd=(1)==(9), (9)==(1)]
      │    └── aggregations
      │         ├── min [as=min:10, outer=(6)]
      │         │    └── calls1_.id:6
      │         ├── const-agg [as=phone_number:2, outer=(2)]
      │         │    └── phone_number:2
      │         ├── const-agg [as=phone_type:3, outer=(3)]
      │         │    └── phone_type:3
      │         └── const-agg [as=person_id:4, outer=(4)]
      │              └── person_id:4
      └── filters
           └── min:10 = $1 [outer=(10), constraints=(/10: (/NULL - ])]

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    (
        select
            max(phones1_.order_id)
        from
            Phone phones1_
        where
            person0_.id=phones1_.person_id
    )=0
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 └── select
      ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null max:12!null
      ├── key: (1)
      ├── fd: ()-->(12), (1)-->(2-6)
      ├── group-by
      │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null max:12!null
      │    ├── grouping columns: person0_.id:1!null
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-6,12)
      │    ├── inner-join (hash)
      │    │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null person_id:10!null order_id:11!null
      │    │    ├── fd: (1)-->(2-6), (1)==(10), (10)==(1)
      │    │    ├── scan person0_
      │    │    │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null
      │    │    │    ├── key: (1)
      │    │    │    └── fd: (1)-->(2-6)
      │    │    ├── select
      │    │    │    ├── columns: person_id:10 order_id:11!null
      │    │    │    ├── scan phones1_
      │    │    │    │    └── columns: person_id:10 order_id:11
      │    │    │    └── filters
      │    │    │         └── order_id:11 IS NOT NULL [outer=(11), constraints=(/11: (/NULL - ]; tight)]
      │    │    └── filters
      │    │         └── person0_.id:1 = person_id:10 [outer=(1,10), constraints=(/1: (/NULL - ]; /10: (/NULL - ]), fd=(1)==(10), (10)==(1)]
      │    └── aggregations
      │         ├── max [as=max:12, outer=(11)]
      │         │    └── order_id:11
      │         ├── const-agg [as=address:2, outer=(2)]
      │         │    └── address:2
      │         ├── const-agg [as=createdon:3, outer=(3)]
      │         │    └── createdon:3
      │         ├── const-agg [as=name:4, outer=(4)]
      │         │    └── name:4
      │         ├── const-agg [as=nickname:5, outer=(5)]
      │         │    └── nickname:5
      │         └── const-agg [as=version:6, outer=(6)]
      │              └── version:6
      └── filters
           └── max:12 = 0 [outer=(12), constraints=(/12: [/0 - /0]; tight), fd=()-->(12)]

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    $1::int in (
        select
            phones1_.id
        from
            Phone phones1_
        where
            person0_.id=phones1_.person_id
    )
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── has-placeholder
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 └── inner-join (lookup person)
      ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null person_id:10!null
      ├── key columns: [10] = [1]
      ├── lookup columns are key
      ├── has-placeholder
      ├── key: (10)
      ├── fd: (1)-->(2-6), (1)==(10), (10)==(1)
      ├── distinct-on
      │    ├── columns: person_id:10
      │    ├── grouping columns: person_id:10
      │    ├── has-placeholder
      │    ├── key: (10)
      │    └── select
      │         ├── columns: phones1_.id:7!null person_id:10
      │         ├── has-placeholder
      │         ├── key: (7)
      │         ├── fd: (7)-->(10)
      │         ├── scan phones1_
      │         │    ├── columns: phones1_.id:7!null person_id:10
      │         │    ├── key: (7)
      │         │    └── fd: (7)-->(10)
      │         └── filters
      │              └── phones1_.id:7 = $1::INT8 [outer=(7), constraints=(/7: (/NULL - ])]
      └── filters (true)

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    $1::int=some (
        select
            phones1_.id
        from
            Phone phones1_
        where
            person0_.id=phones1_.person_id
    )
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── has-placeholder
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 └── inner-join (lookup person)
      ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null person_id:10!null
      ├── key columns: [10] = [1]
      ├── lookup columns are key
      ├── has-placeholder
      ├── key: (10)
      ├── fd: (1)-->(2-6), (1)==(10), (10)==(1)
      ├── distinct-on
      │    ├── columns: person_id:10
      │    ├── grouping columns: person_id:10
      │    ├── has-placeholder
      │    ├── key: (10)
      │    └── select
      │         ├── columns: phones1_.id:7!null person_id:10
      │         ├── has-placeholder
      │         ├── key: (7)
      │         ├── fd: (7)-->(10)
      │         ├── scan phones1_
      │         │    ├── columns: phones1_.id:7!null person_id:10
      │         │    ├── key: (7)
      │         │    └── fd: (7)-->(10)
      │         └── filters
      │              └── phones1_.id:7 = $1::INT8 [outer=(7), constraints=(/7: (/NULL - ])]
      └── filters (true)

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    exists (
        select
            phones1_.id
        from
            Phone phones1_
        where
            person0_.id=phones1_.person_id
    )
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 └── inner-join (lookup person)
      ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null person_id:10!null
      ├── key columns: [10] = [1]
      ├── lookup columns are key
      ├── key: (10)
      ├── fd: (1)-->(2-6), (1)==(10), (10)==(1)
      ├── distinct-on
      │    ├── columns: person_id:10
      │    ├── grouping columns: person_id:10
      │    ├── key: (10)
      │    └── scan phones1_
      │         └── columns: person_id:10
      └── filters (true)

opt
select
    phone0_.id as id1_4_,
    phone0_.phone_number as phone_nu2_4_,
    phone0_.person_id as person_i4_4_,
    phone0_.phone_type as phone_ty3_4_
from
    Phone phone0_
where
    $1::date>all (
        select
            repairtime1_.repairTimestamps
        from
            Phone_repairTimestamps repairtime1_
        where
            phone0_.id=repairtime1_.Phone_id
    )
----
anti-join (hash)
 ├── columns: id1_4_:1!null phone_nu2_4_:2 person_i4_4_:4 phone_ty3_4_:3
 ├── has-placeholder
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 ├── scan phone0_
 │    ├── columns: id:1!null phone_number:2 phone_type:3 person_id:4
 │    ├── key: (1)
 │    └── fd: (1)-->(2-4)
 ├── select
 │    ├── columns: phone_id:6!null repairtimestamps:7
 │    ├── has-placeholder
 │    ├── scan repairtime1_
 │    │    └── columns: phone_id:6!null repairtimestamps:7
 │    └── filters
 │         └── (repairtimestamps:7 >= $1::DATE) IS NOT false [outer=(7)]
 └── filters
      └── id:1 = phone_id:6 [outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    1 in (
        select
            phones1_.order_id
        from
            Phone phones1_
        where
            person0_.id=phones1_.person_id
    )
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 └── inner-join (lookup person)
      ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null person_id:10!null
      ├── key columns: [10] = [1]
      ├── lookup columns are key
      ├── key: (10)
      ├── fd: (1)-->(2-6), (1)==(10), (10)==(1)
      ├── distinct-on
      │    ├── columns: person_id:10
      │    ├── grouping columns: person_id:10
      │    ├── key: (10)
      │    └── select
      │         ├── columns: person_id:10 order_id:11!null
      │         ├── fd: ()-->(11)
      │         ├── scan phones1_
      │         │    └── columns: person_id:10 order_id:11
      │         └── filters
      │              └── order_id:11 = 1 [outer=(11), constraints=(/11: [/1 - /1]; tight), fd=()-->(11)]
      └── filters (true)

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_ cross
join
    Phone phones2_
where
    person0_.id=phones2_.person_id
    and phones2_.order_id = (
        select
            max(phones1_.order_id)
        from
            Phone phones1_
        where
            person0_.id=phones1_.person_id
    )
    and phones2_.phone_type='LAND_LINE'
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── fd: (1)-->(2-6)
 └── select
      ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null phones2_.id:7!null phones2_.order_id:11!null max:17!null
      ├── key: (7)
      ├── fd: (1)-->(2-6), (7)-->(1-6,11,17), (11)==(17), (17)==(11)
      ├── group-by
      │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null phones2_.id:7!null phones2_.order_id:11 max:17!null
      │    ├── grouping columns: phones2_.id:7!null
      │    ├── key: (7)
      │    ├── fd: (1)-->(2-6), (7)-->(1-6,11,17)
      │    ├── inner-join (hash)
      │    │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null phones2_.id:7!null phones2_.phone_type:9!null phones2_.person_id:10!null phones2_.order_id:11 phones1_.person_id:15!null phones1_.order_id:16!null
      │    │    ├── fd: ()-->(9), (1)-->(2-6), (7)-->(10,11), (1)==(10,15), (10)==(1,15), (15)==(1,10)
      │    │    ├── select
      │    │    │    ├── columns: phones1_.person_id:15 phones1_.order_id:16!null
      │    │    │    ├── scan phones1_
      │    │    │    │    └── columns: phones1_.person_id:15 phones1_.order_id:16
      │    │    │    └── filters
      │    │    │         └── phones1_.order_id:16 IS NOT NULL [outer=(16), constraints=(/16: (/NULL - ]; tight)]
      │    │    ├── inner-join (lookup person)
      │    │    │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null phones2_.id:7!null phones2_.phone_type:9!null phones2_.person_id:10!null phones2_.order_id:11
      │    │    │    ├── key columns: [10] = [1]
      │    │    │    ├── lookup columns are key
      │    │    │    ├── key: (7)
      │    │    │    ├── fd: ()-->(9), (1)-->(2-6), (7)-->(10,11), (1)==(10), (10)==(1)
      │    │    │    ├── select
      │    │    │    │    ├── columns: phones2_.id:7!null phones2_.phone_type:9!null phones2_.person_id:10 phones2_.order_id:11
      │    │    │    │    ├── key: (7)
      │    │    │    │    ├── fd: ()-->(9), (7)-->(10,11)
      │    │    │    │    ├── scan phones2_
      │    │    │    │    │    ├── columns: phones2_.id:7!null phones2_.phone_type:9 phones2_.person_id:10 phones2_.order_id:11
      │    │    │    │    │    ├── key: (7)
      │    │    │    │    │    └── fd: (7)-->(9-11)
      │    │    │    │    └── filters
      │    │    │    │         └── phones2_.phone_type:9 = 'LAND_LINE' [outer=(9), constraints=(/9: [/'LAND_LINE' - /'LAND_LINE']; tight), fd=()-->(9)]
      │    │    │    └── filters (true)
      │    │    └── filters
      │    │         └── person0_.id:1 = phones1_.person_id:15 [outer=(1,15), constraints=(/1: (/NULL - ]; /15: (/NULL - ]), fd=(1)==(15), (15)==(1)]
      │    └── aggregations
      │         ├── max [as=max:17, outer=(16)]
      │         │    └── phones1_.order_id:16
      │         ├── const-agg [as=phones2_.order_id:11, outer=(11)]
      │         │    └── phones2_.order_id:11
      │         ├── const-agg [as=address:2, outer=(2)]
      │         │    └── address:2
      │         ├── const-agg [as=createdon:3, outer=(3)]
      │         │    └── createdon:3
      │         ├── const-agg [as=name:4, outer=(4)]
      │         │    └── name:4
      │         ├── const-agg [as=nickname:5, outer=(5)]
      │         │    └── nickname:5
      │         ├── const-agg [as=version:6, outer=(6)]
      │         │    └── version:6
      │         └── const-agg [as=person0_.id:1, outer=(1)]
      │              └── person0_.id:1
      └── filters
           └── phones2_.order_id:11 = max:17 [outer=(11,17), constraints=(/11: (/NULL - ]; /17: (/NULL - ]), fd=(11)==(17), (17)==(11)]

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    not (exists (select
        phones1_.id
    from
        Phone phones1_
    where
        person0_.id=phones1_.person_id))
----
anti-join (hash)
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan person0_
 │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 ├── scan phones1_
 │    └── columns: person_id:10
 └── filters
      └── person0_.id:1 = person_id:10 [outer=(1,10), constraints=(/1: (/NULL - ]; /10: (/NULL - ]), fd=(1)==(10), (10)==(1)]

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    exists (
        select
            phones1_.id
        from
            Phone phones1_
        where
            person0_.id=phones1_.person_id
    )
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 └── inner-join (lookup person)
      ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null person_id:10!null
      ├── key columns: [10] = [1]
      ├── lookup columns are key
      ├── key: (10)
      ├── fd: (1)-->(2-6), (1)==(10), (10)==(1)
      ├── distinct-on
      │    ├── columns: person_id:10
      │    ├── grouping columns: person_id:10
      │    ├── key: (10)
      │    └── scan phones1_
      │         └── columns: person_id:10
      └── filters (true)

opt
select
    phone0_.id as id1_4_,
    phone0_.phone_number as phone_nu2_4_,
    phone0_.person_id as person_i4_4_,
    phone0_.phone_type as phone_ty3_4_
from
    Phone phone0_
where
    not (exists (select
        calls1_.id
    from
        phone_call calls1_
    where
        phone0_.id=calls1_.phone_id))
----
anti-join (hash)
 ├── columns: id1_4_:1!null phone_nu2_4_:2 person_i4_4_:4 phone_ty3_4_:3
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 ├── scan phone0_
 │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4
 │    ├── key: (1)
 │    └── fd: (1)-->(2-4)
 ├── scan calls1_
 │    └── columns: phone_id:9
 └── filters
      └── phone0_.id:1 = phone_id:9 [outer=(1,9), constraints=(/1: (/NULL - ]; /9: (/NULL - ]), fd=(1)==(9), (9)==(1)]

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    'Home address' in (
        select
            addresses1_.addresses
        from
            Person_addresses addresses1_
        where
            person0_.id=addresses1_.Person_id
    )
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 └── inner-join (lookup person)
      ├── columns: id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null person_id:7!null
      ├── key columns: [7] = [1]
      ├── lookup columns are key
      ├── key: (7)
      ├── fd: (1)-->(2-6), (1)==(7), (7)==(1)
      ├── distinct-on
      │    ├── columns: person_id:7!null
      │    ├── grouping columns: person_id:7!null
      │    ├── internal-ordering: +7 opt(8)
      │    ├── key: (7)
      │    └── select
      │         ├── columns: person_id:7!null addresses:8!null
      │         ├── fd: ()-->(8)
      │         ├── ordering: +7 opt(8) [actual: +7]
      │         ├── scan addresses1_
      │         │    ├── columns: person_id:7!null addresses:8
      │         │    └── ordering: +7 opt(8) [actual: +7]
      │         └── filters
      │              └── addresses:8 = 'Home address' [outer=(8), constraints=(/8: [/'Home address' - /'Home address']; tight), fd=()-->(8)]
      └── filters (true)

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    'Home address' not in  (
        select
            addresses1_.addresses
        from
            Person_addresses addresses1_
        where
            person0_.id=addresses1_.Person_id
    )
----
anti-join (merge)
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── left ordering: +1
 ├── right ordering: +7
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan person0_
 │    ├── columns: id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-6)
 │    └── ordering: +1
 ├── select
 │    ├── columns: person_id:7!null addresses:8
 │    ├── ordering: +7
 │    ├── scan addresses1_
 │    │    ├── columns: person_id:7!null addresses:8
 │    │    └── ordering: +7
 │    └── filters
 │         └── (addresses:8 = 'Home address') IS NOT false [outer=(8)]
 └── filters (true)

exec-ddl
drop table Phone, phone_call, Person, Phone_repairTimestamps, Person_addresses;
----

# ------------------------------------------------------------------------------
# Query #6
# ------------------------------------------------------------------------------
exec-ddl
create table EMPLOYEE (
   id int8 not null,
    email varchar(255),
    currentProject_id int8,
    primary key (id)
)
----

exec-ddl
create table Employee_phones (
   Employee_id int8 not null,
    phone_number varchar(255)
)
----

opt
select
    componenti0_.id as id1_0_,
    componenti0_.email as email2_0_,
    componenti0_.currentProject_id as currentP3_0_
from
    EMPLOYEE componenti0_
where
    (
        select
            count(phones1_.Employee_id)
        from
            Employee_phones phones1_
        where
            componenti0_.id=phones1_.Employee_id
    )=1
----
project
 ├── columns: id1_0_:1!null email2_0_:2 currentp3_0_:3
 ├── key: (1)
 ├── fd: (1)-->(2,3)
 └── select
      ├── columns: id:1!null email:2 currentproject_id:3 count:7!null
      ├── key: (1)
      ├── fd: ()-->(7), (1)-->(2,3)
      ├── group-by
      │    ├── columns: id:1!null email:2 currentproject_id:3 count:7!null
      │    ├── grouping columns: id:1!null
      │    ├── key: (1)
      │    ├── fd: (1)-->(2,3,7)
      │    ├── left-join (hash)
      │    │    ├── columns: id:1!null email:2 currentproject_id:3 employee_id:4
      │    │    ├── fd: (1)-->(2,3)
      │    │    ├── scan componenti0_
      │    │    │    ├── columns: id:1!null email:2 currentproject_id:3
      │    │    │    ├── key: (1)
      │    │    │    └── fd: (1)-->(2,3)
      │    │    ├── scan phones1_
      │    │    │    └── columns: employee_id:4!null
      │    │    └── filters
      │    │         └── id:1 = employee_id:4 [outer=(1,4), constraints=(/1: (/NULL - ]; /4: (/NULL - ]), fd=(1)==(4), (4)==(1)]
      │    └── aggregations
      │         ├── count [as=count:7, outer=(4)]
      │         │    └── employee_id:4
      │         ├── const-agg [as=email:2, outer=(2)]
      │         │    └── email:2
      │         └── const-agg [as=currentproject_id:3, outer=(3)]
      │              └── currentproject_id:3
      └── filters
           └── count:7 = 1 [outer=(7), constraints=(/7: [/1 - /1]; tight), fd=()-->(7)]

exec-ddl
drop table EMPLOYEE, Employee_phones;
----

# ------------------------------------------------------------------------------
# Query #7
# ------------------------------------------------------------------------------
exec-ddl
create table Company (
   id int8 not null,
    location_id int8,
    primary key (id)
)
----

exec-ddl
create table Company_Employee (
   Company_id int8 not null,
    employees_id int8 not null,
    primary key (Company_id, employees_id)
)
----

exec-ddl
create table Employee (
   id int8 not null,
    primary key (id)
)
----

exec-ddl
create table Manager (
   id int8 not null,
    primary key (id)
)
----

exec-ddl
create table Location (
   id int8 not null,
    address varchar(255),
    zip int4 not null,
    primary key (id)
)
----

opt
select
    company0_.id as id1_0_0_,
    location3_.id as id1_8_1_,
    company0_.location_id as location2_0_0_,
    location3_.address as address2_8_1_,
    location3_.zip as zip3_8_1_
from
    Company company0_
left outer join
    Location location3_
        on company0_.location_id=location3_.id
where
    not (exists (select
        employee2_.id
    from
        Company_Employee employees1_,
        ( select
            id,
            0 as clazz_
        from
            Employee
        union
        all select
            id,
            1 as clazz_
        from
            Manager ) employee2_
    where
        company0_.id=employees1_.Company_id
        and employees1_.employees_id=employee2_.id))
----
right-join (hash)
 ├── columns: id1_0_0_:1!null id1_8_1_:3 location2_0_0_:2 address2_8_1_:4 zip3_8_1_:5
 ├── key: (1)
 ├── fd: (1)-->(2-5), (3)-->(4,5)
 ├── scan location3_
 │    ├── columns: location3_.id:3!null address:4 zip:5!null
 │    ├── key: (3)
 │    └── fd: (3)-->(4,5)
 ├── anti-join (hash)
 │    ├── columns: company0_.id:1!null location_id:2
 │    ├── key: (1)
 │    ├── fd: (1)-->(2)
 │    ├── scan company0_
 │    │    ├── columns: company0_.id:1!null location_id:2
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2)
 │    ├── inner-join (hash)
 │    │    ├── columns: company_id:6!null employees_id:7!null id:12!null
 │    │    ├── fd: (7)==(12), (12)==(7)
 │    │    ├── union-all
 │    │    │    ├── columns: id:12!null
 │    │    │    ├── left columns: employee.id:8
 │    │    │    ├── right columns: manager.id:10
 │    │    │    ├── scan employee
 │    │    │    │    ├── columns: employee.id:8!null
 │    │    │    │    └── key: (8)
 │    │    │    └── scan manager
 │    │    │         ├── columns: manager.id:10!null
 │    │    │         └── key: (10)
 │    │    ├── scan employees1_
 │    │    │    ├── columns: company_id:6!null employees_id:7!null
 │    │    │    └── key: (6,7)
 │    │    └── filters
 │    │         └── employees_id:7 = id:12 [outer=(7,12), constraints=(/7: (/NULL - ]; /12: (/NULL - ]), fd=(7)==(12), (12)==(7)]
 │    └── filters
 │         └── company0_.id:1 = company_id:6 [outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
 └── filters
      └── location_id:2 = location3_.id:3 [outer=(2,3), constraints=(/2: (/NULL - ]; /3: (/NULL - ]), fd=(2)==(3), (3)==(2)]

exec-ddl
drop table Company, Company_Employee, Employee, Manager, Location;
----

# ------------------------------------------------------------------------------
# Query #8
#   org.hibernate.test.annotations.indexcoll.IndexedCollectionTest
#   testMapKeyOnManyToMany
# ------------------------------------------------------------------------------
exec-ddl
create table News (
   news_id int4 not null,
    detail varchar(255),
    title varchar(255),
    primary key (news_id)
)
----

exec-ddl
create table Newspaper (
   id int4 not null,
    name varchar(255),
    primary key (id)
)
----

exec-ddl
create table Newspaper_News (
   Newspaper_id int4 not null,
    news_news_id int4 not null,
    primary key (Newspaper_id, news_news_id)
)
----

opt
select
    news0_.Newspaper_id as Newspape1_23_0_,
    news0_.news_news_id as news_new2_23_0_,
    (select
        a0.title
    from
        News a0
    where
        a0.news_id=news0_.news_news_id) as formula140_0_,
    news1_.news_id as news_id1_21_1_,
    news1_.detail as detail2_21_1_,
    news1_.title as title3_21_1_
from
    Newspaper_News news0_
inner join
    News news1_
        on news0_.news_news_id=news1_.news_id
where
    news0_.Newspaper_id=1
----
project
 ├── columns: newspape1_23_0_:1!null news_new2_23_0_:2!null formula140_0_:9 news_id1_21_1_:3!null detail2_21_1_:4 title3_21_1_:5
 ├── key: (3)
 ├── fd: ()-->(1), (3)-->(4,5,9), (2)==(3), (3)==(2)
 ├── left-join (lookup news)
 │    ├── columns: newspaper_id:1!null news_news_id:2!null news1_.news_id:3!null news1_.detail:4 news1_.title:5 a0.news_id:6 a0.title:8
 │    ├── key columns: [2] = [6]
 │    ├── lookup columns are key
 │    ├── key: (3)
 │    ├── fd: ()-->(1), (3)-->(4-6,8), (2)==(3), (3)==(2), (6)-->(8)
 │    ├── inner-join (lookup news)
 │    │    ├── columns: newspaper_id:1!null news_news_id:2!null news1_.news_id:3!null news1_.detail:4 news1_.title:5
 │    │    ├── key columns: [2] = [3]
 │    │    ├── lookup columns are key
 │    │    ├── key: (3)
 │    │    ├── fd: ()-->(1), (3)-->(4,5), (2)==(3), (3)==(2)
 │    │    ├── scan news0_
 │    │    │    ├── columns: newspaper_id:1!null news_news_id:2!null
 │    │    │    ├── constraint: /1/2: [/1 - /1]
 │    │    │    ├── key: (2)
 │    │    │    └── fd: ()-->(1)
 │    │    └── filters (true)
 │    └── filters (true)
 └── projections
      └── a0.title:8 [as=formula140_0_:9, outer=(8)]

exec-ddl
drop table News, Newspaper, Newspaper_News;
----

# ------------------------------------------------------------------------------
# Query #9
#   org.hibernate.test.annotations.indexcoll.MapKeyTest testMapKeyOnEmbeddedId
# ------------------------------------------------------------------------------
exec-ddl
create table GenerationGroup (
   id int4 not null,
    age varchar(255),
    culture varchar(255),
    description varchar(255),
    primary key (id)
)
----

exec-ddl
create table GenerationUser (
   id int4 not null,
    primary key (id)
)
----

exec-ddl
create table GenerationUser_GenerationGroup (
   GenerationUser_id int4 not null,
    ref_id int4 not null,
    primary key (GenerationUser_id, ref_id)
)
----

opt
SELECT ref0_.generationuser_id AS generati1_2_0_
      ,ref0_.ref_id AS ref_id2_2_0_
      ,(SELECT a13.age
        FROM generationgroup AS a13
        WHERE a13.id = ref0_.ref_id) AS formula131_0_
      ,(SELECT a15.culture
        FROM generationgroup AS a15
        WHERE a15.id = ref0_.ref_id) AS formula132_0_
      ,(SELECT a13.description
        FROM generationgroup AS a13
        WHERE a13.id = ref0_.ref_id) AS formula133_0_
      ,generation1_.id AS id1_0_1_
      ,generation1_.age AS age2_0_1_
      ,generation1_.culture AS culture3_0_1_
      ,generation1_.description AS descript4_0_1_
FROM generationuser_generationgroup AS ref0_
INNER JOIN generationgroup AS generation1_
  ON ref0_.ref_id = generation1_.id
WHERE ref0_.generationuser_id = 1;
----
project
 ├── columns: generati1_2_0_:1!null ref_id2_2_0_:2!null formula131_0_:19 formula132_0_:20 formula133_0_:21 id1_0_1_:3!null age2_0_1_:4 culture3_0_1_:5 descript4_0_1_:6
 ├── key: (3)
 ├── fd: ()-->(1), (3)-->(4-6,19-21), (2)==(3), (3)==(2)
 ├── left-join (lookup generationgroup)
 │    ├── columns: generationuser_id:1!null ref_id:2!null generation1_.id:3!null generation1_.age:4 generation1_.culture:5 generation1_.description:6 a13.id:7 a13.age:8 a15.id:11 a15.culture:13 a13.id:15 a13.description:18
 │    ├── key columns: [2] = [15]
 │    ├── lookup columns are key
 │    ├── key: (3)
 │    ├── fd: ()-->(1), (3)-->(4-8,11,13,15,18), (2)==(3), (3)==(2), (7)-->(8), (11)-->(13), (15)-->(18)
 │    ├── left-join (lookup generationgroup)
 │    │    ├── columns: generationuser_id:1!null ref_id:2!null generation1_.id:3!null generation1_.age:4 generation1_.culture:5 generation1_.description:6 a13.id:7 a13.age:8 a15.id:11 a15.culture:13
 │    │    ├── key columns: [2] = [11]
 │    │    ├── lookup columns are key
 │    │    ├── key: (3)
 │    │    ├── fd: ()-->(1), (3)-->(4-8,11,13), (2)==(3), (3)==(2), (7)-->(8), (11)-->(13)
 │    │    ├── left-join (lookup generationgroup)
 │    │    │    ├── columns: generationuser_id:1!null ref_id:2!null generation1_.id:3!null generation1_.age:4 generation1_.culture:5 generation1_.description:6 a13.id:7 a13.age:8
 │    │    │    ├── key columns: [2] = [7]
 │    │    │    ├── lookup columns are key
 │    │    │    ├── key: (3)
 │    │    │    ├── fd: ()-->(1), (3)-->(4-8), (2)==(3), (3)==(2), (7)-->(8)
 │    │    │    ├── inner-join (lookup generationgroup)
 │    │    │    │    ├── columns: generationuser_id:1!null ref_id:2!null generation1_.id:3!null generation1_.age:4 generation1_.culture:5 generation1_.description:6
 │    │    │    │    ├── key columns: [2] = [3]
 │    │    │    │    ├── lookup columns are key
 │    │    │    │    ├── key: (3)
 │    │    │    │    ├── fd: ()-->(1), (3)-->(4-6), (2)==(3), (3)==(2)
 │    │    │    │    ├── scan ref0_
 │    │    │    │    │    ├── columns: generationuser_id:1!null ref_id:2!null
 │    │    │    │    │    ├── constraint: /1/2: [/1 - /1]
 │    │    │    │    │    ├── key: (2)
 │    │    │    │    │    └── fd: ()-->(1)
 │    │    │    │    └── filters (true)
 │    │    │    └── filters (true)
 │    │    └── filters (true)
 │    └── filters (true)
 └── projections
      ├── a13.age:8 [as=formula131_0_:19, outer=(8)]
      ├── a15.culture:13 [as=formula132_0_:20, outer=(13)]
      └── a13.description:18 [as=formula133_0_:21, outer=(18)]

exec-ddl
drop table GenerationGroup, GenerationUser, GenerationUser_GenerationGroup;
----

# ------------------------------------------------------------------------------
# Query #10
#   org.hibernate.test.bidi.AuctionTest2 testLazy
# ------------------------------------------------------------------------------
exec-ddl
create table TAuction2 (
   id int8 not null,
    description varchar(255),
    endDatetime timestamp,
    successfulBid int8,
    primary key (id)
)
----

exec-ddl
create table TBid2 (
   id int8 not null,
    amount numeric(31, 19),
    createdDatetime timestamp,
    auctionId int8,
    primary key (id)
)
----

opt
select
    bids0_.auctionId as auctionI4_1_0_,
    bids0_.id as id1_1_0_,
    bids0_.id as id1_1_1_,
    bids0_.amount as amount2_1_1_,
    bids0_.createdDatetime as createdD3_1_1_,
    bids0_.auctionId as auctionI4_1_1_,
    exists(select
        a.id
    from
        TAuction2 a
    where
        a.successfulBid=bids0_.id) as formula41_1_
from
    TBid2 bids0_
where
    bids0_.auctionId=$1
----
project
 ├── columns: auctioni4_1_0_:4!null id1_1_0_:1!null id1_1_1_:1!null amount2_1_1_:2 createdd3_1_1_:3 auctioni4_1_1_:4!null formula41_1_:9!null
 ├── has-placeholder
 ├── key: (1)
 ├── fd: (1)-->(2-4,9)
 ├── group-by
 │    ├── columns: bids0_.id:1!null amount:2 createddatetime:3 auctionid:4!null true_agg:11
 │    ├── grouping columns: bids0_.id:1!null
 │    ├── has-placeholder
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4,11)
 │    ├── right-join (hash)
 │    │    ├── columns: bids0_.id:1!null amount:2 createddatetime:3 auctionid:4!null successfulbid:8 true:10
 │    │    ├── has-placeholder
 │    │    ├── fd: (1)-->(2-4)
 │    │    ├── project
 │    │    │    ├── columns: true:10!null successfulbid:8
 │    │    │    ├── fd: ()-->(10)
 │    │    │    ├── scan a
 │    │    │    │    └── columns: successfulbid:8
 │    │    │    └── projections
 │    │    │         └── true [as=true:10]
 │    │    ├── select
 │    │    │    ├── columns: bids0_.id:1!null amount:2 createddatetime:3 auctionid:4!null
 │    │    │    ├── has-placeholder
 │    │    │    ├── key: (1)
 │    │    │    ├── fd: (1)-->(2-4)
 │    │    │    ├── scan bids0_
 │    │    │    │    ├── columns: bids0_.id:1!null amount:2 createddatetime:3 auctionid:4
 │    │    │    │    ├── key: (1)
 │    │    │    │    └── fd: (1)-->(2-4)
 │    │    │    └── filters
 │    │    │         └── auctionid:4 = $1 [outer=(4), constraints=(/4: (/NULL - ])]
 │    │    └── filters
 │    │         └── successfulbid:8 = bids0_.id:1 [outer=(1,8), constraints=(/1: (/NULL - ]; /8: (/NULL - ]), fd=(1)==(8), (8)==(1)]
 │    └── aggregations
 │         ├── const-not-null-agg [as=true_agg:11, outer=(10)]
 │         │    └── true:10
 │         ├── const-agg [as=amount:2, outer=(2)]
 │         │    └── amount:2
 │         ├── const-agg [as=createddatetime:3, outer=(3)]
 │         │    └── createddatetime:3
 │         └── const-agg [as=auctionid:4, outer=(4)]
 │              └── auctionid:4
 └── projections
      └── true_agg:11 IS NOT NULL [as=formula41_1_:9, outer=(11)]

exec-ddl
drop table TAuction2, TBid2;
----

# ------------------------------------------------------------------------------
# Query #11
#   org.hibernate.test.cid.CompositeIdTest
# ------------------------------------------------------------------------------
exec-ddl
CREATE TABLE customer (
  customerid VARCHAR(10) NOT NULL,
  name VARCHAR(100) NOT NULL,
  address VARCHAR(200) NOT NULL,
  PRIMARY KEY (customerid)
);
----

exec-ddl
CREATE TABLE customerorder (
  customerid VARCHAR(10) NOT NULL,
  ordernumber INT4 NOT NULL,
  orderdate DATE NOT NULL,
  PRIMARY KEY (customerid, ordernumber)
);
----

exec-ddl
CREATE TABLE lineitem (
  customerid VARCHAR(10) NOT NULL,
  ordernumber INT4 NOT NULL,
  productid VARCHAR(10) NOT NULL,
  quantity INT4,
  PRIMARY KEY (customerid, ordernumber, productid)
);
----

exec-ddl
CREATE TABLE product (
  productid VARCHAR(10) NOT NULL,
  description VARCHAR(200) NOT NULL,
  cost NUMERIC(19,2),
  numberavailable INT4,
  PRIMARY KEY (productid)
);
----

opt
SELECT
  order0_.customerid AS customer1_1_0_,
  order0_.ordernumber AS ordernum2_1_0_,
  order0_.orderdate AS orderdat3_1_0_,
  (
    SELECT
      sum(li.quantity * p.cost)
    FROM
      lineitem AS li, product AS p
    WHERE
      li.productid = p.productid
      AND li.customerid = order0_.customerid
      AND li.ordernumber = order0_.ordernumber
  )
    AS formula101_0_,
  lineitems1_.customerid AS customer1_2_1_,
  lineitems1_.ordernumber AS ordernum2_2_1_,
  lineitems1_.productid AS producti3_2_1_,
  lineitems1_.customerid AS customer1_2_2_,
  lineitems1_.ordernumber AS ordernum2_2_2_,
  lineitems1_.productid AS producti3_2_2_,
  lineitems1_.quantity AS quantity4_2_2_
FROM
  customerorder AS order0_
  LEFT JOIN lineitem AS lineitems1_
  ON
    order0_.customerid = lineitems1_.customerid
    AND order0_.ordernumber = lineitems1_.ordernumber
WHERE
  order0_.customerid = 'c111' AND order0_.ordernumber = 0;
----
project
 ├── columns: customer1_1_0_:1!null ordernum2_1_0_:2!null orderdat3_1_0_:3!null formula101_0_:18 customer1_2_1_:4 ordernum2_2_1_:5 producti3_2_1_:6 customer1_2_2_:4 ordernum2_2_2_:5 producti3_2_2_:6 quantity4_2_2_:7
 ├── key: (6)
 ├── fd: ()-->(1-3), (6)-->(4,5,7,18)
 ├── group-by
 │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null lineitems1_.customerid:4 lineitems1_.ordernumber:5 lineitems1_.productid:6 lineitems1_.quantity:7 sum:17
 │    ├── grouping columns: lineitems1_.productid:6
 │    ├── key: (6)
 │    ├── fd: ()-->(1-3), (6)-->(1-5,7,17)
 │    ├── right-join (hash)
 │    │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null lineitems1_.customerid:4 lineitems1_.ordernumber:5 lineitems1_.productid:6 lineitems1_.quantity:7 li.customerid:8 li.ordernumber:9 column16:16
 │    │    ├── fd: ()-->(1-3), (6)-->(4,5,7)
 │    │    ├── project
 │    │    │    ├── columns: column16:16 li.customerid:8!null li.ordernumber:9!null
 │    │    │    ├── inner-join (hash)
 │    │    │    │    ├── columns: li.customerid:8!null li.ordernumber:9!null li.productid:10!null li.quantity:11 p.productid:12!null cost:14
 │    │    │    │    ├── key: (8,9,12)
 │    │    │    │    ├── fd: (8-10)-->(11), (12)-->(14), (10)==(12), (12)==(10)
 │    │    │    │    ├── scan li
 │    │    │    │    │    ├── columns: li.customerid:8!null li.ordernumber:9!null li.productid:10!null li.quantity:11
 │    │    │    │    │    ├── key: (8-10)
 │    │    │    │    │    └── fd: (8-10)-->(11)
 │    │    │    │    ├── scan p
 │    │    │    │    │    ├── columns: p.productid:12!null cost:14
 │    │    │    │    │    ├── key: (12)
 │    │    │    │    │    └── fd: (12)-->(14)
 │    │    │    │    └── filters
 │    │    │    │         └── li.productid:10 = p.productid:12 [outer=(10,12), constraints=(/10: (/NULL - ]; /12: (/NULL - ]), fd=(10)==(12), (12)==(10)]
 │    │    │    └── projections
 │    │    │         └── li.quantity:11 * cost:14 [as=column16:16, outer=(11,14)]
 │    │    ├── left-join (merge)
 │    │    │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null lineitems1_.customerid:4 lineitems1_.ordernumber:5 lineitems1_.productid:6 lineitems1_.quantity:7
 │    │    │    ├── left ordering: +1,+2
 │    │    │    ├── right ordering: +4,+5
 │    │    │    ├── key: (6)
 │    │    │    ├── fd: ()-->(1-3), (6)-->(4,5,7)
 │    │    │    ├── scan order0_
 │    │    │    │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null
 │    │    │    │    ├── constraint: /1/2: [/'c111'/0 - /'c111'/0]
 │    │    │    │    ├── cardinality: [0 - 1]
 │    │    │    │    ├── key: ()
 │    │    │    │    └── fd: ()-->(1-3)
 │    │    │    ├── scan lineitems1_
 │    │    │    │    ├── columns: lineitems1_.customerid:4!null lineitems1_.ordernumber:5!null lineitems1_.productid:6!null lineitems1_.quantity:7
 │    │    │    │    ├── constraint: /4/5/6: [/'c111'/0 - /'c111'/0]
 │    │    │    │    ├── key: (6)
 │    │    │    │    └── fd: ()-->(4,5), (6)-->(7)
 │    │    │    └── filters (true)
 │    │    └── filters
 │    │         ├── li.customerid:8 = order0_.customerid:1 [outer=(1,8), constraints=(/1: (/NULL - ]; /8: (/NULL - ]), fd=(1)==(8), (8)==(1)]
 │    │         └── li.ordernumber:9 = order0_.ordernumber:2 [outer=(2,9), constraints=(/2: (/NULL - ]; /9: (/NULL - ]), fd=(2)==(9), (9)==(2)]
 │    └── aggregations
 │         ├── sum [as=sum:17, outer=(16)]
 │         │    └── column16:16
 │         ├── const-agg [as=order0_.customerid:1, outer=(1)]
 │         │    └── order0_.customerid:1
 │         ├── const-agg [as=order0_.ordernumber:2, outer=(2)]
 │         │    └── order0_.ordernumber:2
 │         ├── const-agg [as=orderdate:3, outer=(3)]
 │         │    └── orderdate:3
 │         ├── const-agg [as=lineitems1_.customerid:4, outer=(4)]
 │         │    └── lineitems1_.customerid:4
 │         ├── const-agg [as=lineitems1_.ordernumber:5, outer=(5)]
 │         │    └── lineitems1_.ordernumber:5
 │         └── const-agg [as=lineitems1_.quantity:7, outer=(7)]
 │              └── lineitems1_.quantity:7
 └── projections
      └── sum:17 [as=formula101_0_:18, outer=(17)]

opt
SELECT
  customer0_.customerid AS customer1_0_0_,
  orders1_.customerid AS customer1_1_1_,
  orders1_.ordernumber AS ordernum2_1_1_,
  lineitems2_.customerid AS customer1_2_2_,
  lineitems2_.ordernumber AS ordernum2_2_2_,
  lineitems2_.productid AS producti3_2_2_,
  product3_.productid AS producti1_3_3_,
  customer0_.name AS name2_0_0_,
  customer0_.address AS address3_0_0_,
  orders1_.orderdate AS orderdat3_1_1_,
  (
    SELECT
      sum(li.quantity * p.cost)
    FROM
      lineitem AS li, product AS p
    WHERE
      li.productid = p.productid
      AND li.customerid = orders1_.customerid
      AND li.ordernumber = orders1_.ordernumber
  )
    AS formula103_1_,
  orders1_.customerid AS customer1_1_0__,
  orders1_.ordernumber AS ordernum2_1_0__,
  orders1_.ordernumber AS ordernum2_0__,
  lineitems2_.quantity AS quantity4_2_2_,
  lineitems2_.customerid AS customer1_2_1__,
  lineitems2_.ordernumber AS ordernum2_2_1__,
  lineitems2_.productid AS producti3_2_1__,
  product3_.description AS descript2_3_3_,
  product3_.cost AS cost3_3_3_,
  product3_.numberavailable AS numberav4_3_3_,
  (
    SELECT
      sum(li.quantity)
    FROM
      lineitem AS li
    WHERE
      li.productid = product3_.productid
  )
    AS formula104_3_
FROM
  customer AS customer0_
  LEFT JOIN customerorder AS orders1_
  ON customer0_.customerid = orders1_.customerid
  LEFT JOIN lineitem AS lineitems2_
  ON
    orders1_.customerid = lineitems2_.customerid
    AND orders1_.ordernumber = lineitems2_.ordernumber
  LEFT JOIN product AS product3_ ON lineitems2_.productid = product3_.productid;
----
project
 ├── columns: customer1_0_0_:1!null customer1_1_1_:4 ordernum2_1_1_:5 customer1_2_2_:7 ordernum2_2_2_:8 producti3_2_2_:9 producti1_3_3_:11 name2_0_0_:2!null address3_0_0_:3!null orderdat3_1_1_:6 formula103_1_:30 customer1_1_0__:4 ordernum2_1_0__:5 ordernum2_0__:5 quantity4_2_2_:10 customer1_2_1__:7 ordernum2_2_1__:8 producti3_2_1__:9 descript2_3_3_:12 cost3_3_3_:13 numberav4_3_3_:14 formula104_3_:31
 ├── key: (1,4,5,7-9)
 ├── fd: (1)-->(2,3), (4,5)-->(6), (7-9)-->(10), (11)-->(12-14), (1,4,5,7-9)-->(2,3,6,10-14,30,31)
 ├── group-by
 │    ├── columns: customer0_.customerid:1!null name:2!null address:3!null orders1_.customerid:4 orders1_.ordernumber:5 orderdate:6 lineitems2_.customerid:7 lineitems2_.ordernumber:8 lineitems2_.productid:9 lineitems2_.quantity:10 product3_.productid:11 product3_.description:12 product3_.cost:13 product3_.numberavailable:14 sum:24 sum:29
 │    ├── grouping columns: customer0_.customerid:1!null orders1_.customerid:4 orders1_.ordernumber:5 lineitems2_.customerid:7 lineitems2_.ordernumber:8 lineitems2_.productid:9
 │    ├── key: (1,4,5,7-9)
 │    ├── fd: (1)-->(2,3), (4,5)-->(6), (7-9)-->(10), (11)-->(12-14), (1,4,5,7-9)-->(2,3,6,10-14,24,29)
 │    ├── left-join (hash)
 │    │    ├── columns: customer0_.customerid:1!null name:2!null address:3!null orders1_.customerid:4 orders1_.ordernumber:5 orderdate:6 lineitems2_.customerid:7 lineitems2_.ordernumber:8 lineitems2_.productid:9 lineitems2_.quantity:10 product3_.productid:11 product3_.description:12 product3_.cost:13 product3_.numberavailable:14 sum:24 li.productid:27 li.quantity:28
 │    │    ├── fd: (1)-->(2,3), (4,5)-->(6), (7-9)-->(10), (11)-->(12-14), (1,4,5,7-9)-->(2,3,6,10-14,24)
 │    │    ├── group-by
 │    │    │    ├── columns: customer0_.customerid:1!null name:2!null address:3!null orders1_.customerid:4 orders1_.ordernumber:5 orderdate:6 lineitems2_.customerid:7 lineitems2_.ordernumber:8 lineitems2_.productid:9 lineitems2_.quantity:10 product3_.productid:11 product3_.description:12 product3_.cost:13 product3_.numberavailable:14 sum:24
 │    │    │    ├── grouping columns: customer0_.customerid:1!null orders1_.customerid:4 orders1_.ordernumber:5 lineitems2_.customerid:7 lineitems2_.ordernumber:8 lineitems2_.productid:9
 │    │    │    ├── key: (1,4,5,7-9)
 │    │    │    ├── fd: (1)-->(2,3), (4,5)-->(6), (7-9)-->(10), (11)-->(12-14), (1,4,5,7-9)-->(2,3,6,10-14,24)
 │    │    │    ├── left-join (hash)
 │    │    │    │    ├── columns: customer0_.customerid:1!null name:2!null address:3!null orders1_.customerid:4 orders1_.ordernumber:5 orderdate:6 lineitems2_.customerid:7 lineitems2_.ordernumber:8 lineitems2_.productid:9 lineitems2_.quantity:10 product3_.productid:11 product3_.description:12 product3_.cost:13 product3_.numberavailable:14 li.customerid:15 li.ordernumber:16 column23:23
 │    │    │    │    ├── fd: (1)-->(2,3), (4,5)-->(6), (7-9)-->(10), (11)-->(12-14), (1,4,5,7-9)-->(11-14)
 │    │    │    │    ├── left-join (hash)
 │    │    │    │    │    ├── columns: customer0_.customerid:1!null name:2!null address:3!null orders1_.customerid:4 orders1_.ordernumber:5 orderdate:6 lineitems2_.customerid:7 lineitems2_.ordernumber:8 lineitems2_.productid:9 lineitems2_.quantity:10 product3_.productid:11 product3_.description:12 product3_.cost:13 product3_.numberavailable:14
 │    │    │    │    │    ├── key: (1,4,5,7-9)
 │    │    │    │    │    ├── fd: (1)-->(2,3), (4,5)-->(6), (7-9)-->(10), (11)-->(12-14), (1,4,5,7-9)-->(11-14)
 │    │    │    │    │    ├── left-join (hash)
 │    │    │    │    │    │    ├── columns: customer0_.customerid:1!null name:2!null address:3!null orders1_.customerid:4 orders1_.ordernumber:5 orderdate:6 lineitems2_.customerid:7 lineitems2_.ordernumber:8 lineitems2_.productid:9 lineitems2_.quantity:10
 │    │    │    │    │    │    ├── key: (1,4,5,7-9)
 │    │    │    │    │    │    ├── fd: (1)-->(2,3), (4,5)-->(6), (7-9)-->(10)
 │    │    │    │    │    │    ├── left-join (merge)
 │    │    │    │    │    │    │    ├── columns: customer0_.customerid:1!null name:2!null address:3!null orders1_.customerid:4 orders1_.ordernumber:5 orderdate:6
 │    │    │    │    │    │    │    ├── left ordering: +1
 │    │    │    │    │    │    │    ├── right ordering: +4
 │    │    │    │    │    │    │    ├── key: (1,4,5)
 │    │    │    │    │    │    │    ├── fd: (1)-->(2,3), (4,5)-->(6)
 │    │    │    │    │    │    │    ├── scan customer0_
 │    │    │    │    │    │    │    │    ├── columns: customer0_.customerid:1!null name:2!null address:3!null
 │    │    │    │    │    │    │    │    ├── key: (1)
 │    │    │    │    │    │    │    │    ├── fd: (1)-->(2,3)
 │    │    │    │    │    │    │    │    └── ordering: +1
 │    │    │    │    │    │    │    ├── scan orders1_
 │    │    │    │    │    │    │    │    ├── columns: orders1_.customerid:4!null orders1_.ordernumber:5!null orderdate:6!null
 │    │    │    │    │    │    │    │    ├── key: (4,5)
 │    │    │    │    │    │    │    │    ├── fd: (4,5)-->(6)
 │    │    │    │    │    │    │    │    └── ordering: +4
 │    │    │    │    │    │    │    └── filters (true)
 │    │    │    │    │    │    ├── scan lineitems2_
 │    │    │    │    │    │    │    ├── columns: lineitems2_.customerid:7!null lineitems2_.ordernumber:8!null lineitems2_.productid:9!null lineitems2_.quantity:10
 │    │    │    │    │    │    │    ├── key: (7-9)
 │    │    │    │    │    │    │    └── fd: (7-9)-->(10)
 │    │    │    │    │    │    └── filters
 │    │    │    │    │    │         ├── orders1_.customerid:4 = lineitems2_.customerid:7 [outer=(4,7), constraints=(/4: (/NULL - ]; /7: (/NULL - ]), fd=(4)==(7), (7)==(4)]
 │    │    │    │    │    │         └── orders1_.ordernumber:5 = lineitems2_.ordernumber:8 [outer=(5,8), constraints=(/5: (/NULL - ]; /8: (/NULL - ]), fd=(5)==(8), (8)==(5)]
 │    │    │    │    │    ├── scan product3_
 │    │    │    │    │    │    ├── columns: product3_.productid:11!null product3_.description:12!null product3_.cost:13 product3_.numberavailable:14
 │    │    │    │    │    │    ├── key: (11)
 │    │    │    │    │    │    └── fd: (11)-->(12-14)
 │    │    │    │    │    └── filters
 │    │    │    │    │         └── lineitems2_.productid:9 = product3_.productid:11 [outer=(9,11), constraints=(/9: (/NULL - ]; /11: (/NULL - ]), fd=(9)==(11), (11)==(9)]
 │    │    │    │    ├── project
 │    │    │    │    │    ├── columns: column23:23 li.customerid:15!null li.ordernumber:16!null
 │    │    │    │    │    ├── inner-join (hash)
 │    │    │    │    │    │    ├── columns: li.customerid:15!null li.ordernumber:16!null li.productid:17!null li.quantity:18 p.productid:19!null p.cost:21
 │    │    │    │    │    │    ├── key: (15,16,19)
 │    │    │    │    │    │    ├── fd: (15-17)-->(18), (19)-->(21), (17)==(19), (19)==(17)
 │    │    │    │    │    │    ├── scan li
 │    │    │    │    │    │    │    ├── columns: li.customerid:15!null li.ordernumber:16!null li.productid:17!null li.quantity:18
 │    │    │    │    │    │    │    ├── key: (15-17)
 │    │    │    │    │    │    │    └── fd: (15-17)-->(18)
 │    │    │    │    │    │    ├── scan p
 │    │    │    │    │    │    │    ├── columns: p.productid:19!null p.cost:21
 │    │    │    │    │    │    │    ├── key: (19)
 │    │    │    │    │    │    │    └── fd: (19)-->(21)
 │    │    │    │    │    │    └── filters
 │    │    │    │    │    │         └── li.productid:17 = p.productid:19 [outer=(17,19), constraints=(/17: (/NULL - ]; /19: (/NULL - ]), fd=(17)==(19), (19)==(17)]
 │    │    │    │    │    └── projections
 │    │    │    │    │         └── li.quantity:18 * p.cost:21 [as=column23:23, outer=(18,21)]
 │    │    │    │    └── filters
 │    │    │    │         ├── li.customerid:15 = orders1_.customerid:4 [outer=(4,15), constraints=(/4: (/NULL - ]; /15: (/NULL - ]), fd=(4)==(15), (15)==(4)]
 │    │    │    │         └── li.ordernumber:16 = orders1_.ordernumber:5 [outer=(5,16), constraints=(/5: (/NULL - ]; /16: (/NULL - ]), fd=(5)==(16), (16)==(5)]
 │    │    │    └── aggregations
 │    │    │         ├── sum [as=sum:24, outer=(23)]
 │    │    │         │    └── column23:23
 │    │    │         ├── const-agg [as=name:2, outer=(2)]
 │    │    │         │    └── name:2
 │    │    │         ├── const-agg [as=address:3, outer=(3)]
 │    │    │         │    └── address:3
 │    │    │         ├── const-agg [as=orderdate:6, outer=(6)]
 │    │    │         │    └── orderdate:6
 │    │    │         ├── const-agg [as=lineitems2_.quantity:10, outer=(10)]
 │    │    │         │    └── lineitems2_.quantity:10
 │    │    │         ├── const-agg [as=product3_.productid:11, outer=(11)]
 │    │    │         │    └── product3_.productid:11
 │    │    │         ├── const-agg [as=product3_.description:12, outer=(12)]
 │    │    │         │    └── product3_.description:12
 │    │    │         ├── const-agg [as=product3_.cost:13, outer=(13)]
 │    │    │         │    └── product3_.cost:13
 │    │    │         └── const-agg [as=product3_.numberavailable:14, outer=(14)]
 │    │    │              └── product3_.numberavailable:14
 │    │    ├── scan li
 │    │    │    └── columns: li.productid:27!null li.quantity:28
 │    │    └── filters
 │    │         └── li.productid:27 = product3_.productid:11 [outer=(11,27), constraints=(/11: (/NULL - ]; /27: (/NULL - ]), fd=(11)==(27), (27)==(11)]
 │    └── aggregations
 │         ├── sum [as=sum:29, outer=(28)]
 │         │    └── li.quantity:28
 │         ├── const-agg [as=name:2, outer=(2)]
 │         │    └── name:2
 │         ├── const-agg [as=address:3, outer=(3)]
 │         │    └── address:3
 │         ├── const-agg [as=orderdate:6, outer=(6)]
 │         │    └── orderdate:6
 │         ├── const-agg [as=lineitems2_.quantity:10, outer=(10)]
 │         │    └── lineitems2_.quantity:10
 │         ├── const-agg [as=product3_.productid:11, outer=(11)]
 │         │    └── product3_.productid:11
 │         ├── const-agg [as=product3_.description:12, outer=(12)]
 │         │    └── product3_.description:12
 │         ├── const-agg [as=product3_.cost:13, outer=(13)]
 │         │    └── product3_.cost:13
 │         ├── const-agg [as=product3_.numberavailable:14, outer=(14)]
 │         │    └── product3_.numberavailable:14
 │         └── const-agg [as=sum:24, outer=(24)]
 │              └── sum:24
 └── projections
      ├── sum:24 [as=formula103_1_:30, outer=(24)]
      └── sum:29 [as=formula104_3_:31, outer=(29)]

opt
SELECT
  order0_.customerid AS customer1_1_0_,
  order0_.ordernumber AS ordernum2_1_0_,
  order0_.orderdate AS orderdat3_1_0_,
  (
    SELECT
      sum(li.quantity * p.cost)
    FROM
      lineitem AS li, product AS p
    WHERE
      li.productid = p.productid
      AND li.customerid = order0_.customerid
      AND li.ordernumber = order0_.ordernumber
  )
    AS formula105_0_,
  lineitems1_.customerid AS customer1_2_1_,
  lineitems1_.ordernumber AS ordernum2_2_1_,
  lineitems1_.productid AS producti3_2_1_,
  lineitems1_.customerid AS customer1_2_2_,
  lineitems1_.ordernumber AS ordernum2_2_2_,
  lineitems1_.productid AS producti3_2_2_,
  lineitems1_.quantity AS quantity4_2_2_
FROM
  customerorder AS order0_
  LEFT JOIN lineitem AS lineitems1_
  ON
    order0_.customerid = lineitems1_.customerid
    AND order0_.ordernumber = lineitems1_.ordernumber
WHERE
  order0_.customerid = 'c111' AND order0_.ordernumber = 0;
----
project
 ├── columns: customer1_1_0_:1!null ordernum2_1_0_:2!null orderdat3_1_0_:3!null formula105_0_:18 customer1_2_1_:4 ordernum2_2_1_:5 producti3_2_1_:6 customer1_2_2_:4 ordernum2_2_2_:5 producti3_2_2_:6 quantity4_2_2_:7
 ├── key: (6)
 ├── fd: ()-->(1-3), (6)-->(4,5,7,18)
 ├── group-by
 │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null lineitems1_.customerid:4 lineitems1_.ordernumber:5 lineitems1_.productid:6 lineitems1_.quantity:7 sum:17
 │    ├── grouping columns: lineitems1_.productid:6
 │    ├── key: (6)
 │    ├── fd: ()-->(1-3), (6)-->(1-5,7,17)
 │    ├── right-join (hash)
 │    │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null lineitems1_.customerid:4 lineitems1_.ordernumber:5 lineitems1_.productid:6 lineitems1_.quantity:7 li.customerid:8 li.ordernumber:9 column16:16
 │    │    ├── fd: ()-->(1-3), (6)-->(4,5,7)
 │    │    ├── project
 │    │    │    ├── columns: column16:16 li.customerid:8!null li.ordernumber:9!null
 │    │    │    ├── inner-join (hash)
 │    │    │    │    ├── columns: li.customerid:8!null li.ordernumber:9!null li.productid:10!null li.quantity:11 p.productid:12!null cost:14
 │    │    │    │    ├── key: (8,9,12)
 │    │    │    │    ├── fd: (8-10)-->(11), (12)-->(14), (10)==(12), (12)==(10)
 │    │    │    │    ├── scan li
 │    │    │    │    │    ├── columns: li.customerid:8!null li.ordernumber:9!null li.productid:10!null li.quantity:11
 │    │    │    │    │    ├── key: (8-10)
 │    │    │    │    │    └── fd: (8-10)-->(11)
 │    │    │    │    ├── scan p
 │    │    │    │    │    ├── columns: p.productid:12!null cost:14
 │    │    │    │    │    ├── key: (12)
 │    │    │    │    │    └── fd: (12)-->(14)
 │    │    │    │    └── filters
 │    │    │    │         └── li.productid:10 = p.productid:12 [outer=(10,12), constraints=(/10: (/NULL - ]; /12: (/NULL - ]), fd=(10)==(12), (12)==(10)]
 │    │    │    └── projections
 │    │    │         └── li.quantity:11 * cost:14 [as=column16:16, outer=(11,14)]
 │    │    ├── left-join (merge)
 │    │    │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null lineitems1_.customerid:4 lineitems1_.ordernumber:5 lineitems1_.productid:6 lineitems1_.quantity:7
 │    │    │    ├── left ordering: +1,+2
 │    │    │    ├── right ordering: +4,+5
 │    │    │    ├── key: (6)
 │    │    │    ├── fd: ()-->(1-3), (6)-->(4,5,7)
 │    │    │    ├── scan order0_
 │    │    │    │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null
 │    │    │    │    ├── constraint: /1/2: [/'c111'/0 - /'c111'/0]
 │    │    │    │    ├── cardinality: [0 - 1]
 │    │    │    │    ├── key: ()
 │    │    │    │    └── fd: ()-->(1-3)
 │    │    │    ├── scan lineitems1_
 │    │    │    │    ├── columns: lineitems1_.customerid:4!null lineitems1_.ordernumber:5!null lineitems1_.productid:6!null lineitems1_.quantity:7
 │    │    │    │    ├── constraint: /4/5/6: [/'c111'/0 - /'c111'/0]
 │    │    │    │    ├── key: (6)
 │    │    │    │    └── fd: ()-->(4,5), (6)-->(7)
 │    │    │    └── filters (true)
 │    │    └── filters
 │    │         ├── li.customerid:8 = order0_.customerid:1 [outer=(1,8), constraints=(/1: (/NULL - ]; /8: (/NULL - ]), fd=(1)==(8), (8)==(1)]
 │    │         └── li.ordernumber:9 = order0_.ordernumber:2 [outer=(2,9), constraints=(/2: (/NULL - ]; /9: (/NULL - ]), fd=(2)==(9), (9)==(2)]
 │    └── aggregations
 │         ├── sum [as=sum:17, outer=(16)]
 │         │    └── column16:16
 │         ├── const-agg [as=order0_.customerid:1, outer=(1)]
 │         │    └── order0_.customerid:1
 │         ├── const-agg [as=order0_.ordernumber:2, outer=(2)]
 │         │    └── order0_.ordernumber:2
 │         ├── const-agg [as=orderdate:3, outer=(3)]
 │         │    └── orderdate:3
 │         ├── const-agg [as=lineitems1_.customerid:4, outer=(4)]
 │         │    └── lineitems1_.customerid:4
 │         ├── const-agg [as=lineitems1_.ordernumber:5, outer=(5)]
 │         │    └── lineitems1_.ordernumber:5
 │         └── const-agg [as=lineitems1_.quantity:7, outer=(7)]
 │              └── lineitems1_.quantity:7
 └── projections
      └── sum:17 [as=formula105_0_:18, outer=(17)]

opt
SELECT
  order0_.customerid AS customer1_10_,
  order0_.ordernumber AS ordernum2_10_,
  order0_.orderdate AS orderdat3_10_,
  (
    SELECT
      sum(li.quantity * p.cost)
    FROM
      lineitem AS li, product AS p
    WHERE
      li.productid = p.productid
      AND li.customerid = order0_.customerid
      AND li.ordernumber = order0_.ordernumber
  )
    AS formula273_
FROM
  customerorder AS order0_;
----
project
 ├── columns: customer1_10_:1!null ordernum2_10_:2!null orderdat3_10_:3!null formula273_:14
 ├── key: (1,2)
 ├── fd: (1,2)-->(3,14)
 ├── group-by
 │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null sum:13
 │    ├── grouping columns: order0_.customerid:1!null order0_.ordernumber:2!null
 │    ├── key: (1,2)
 │    ├── fd: (1,2)-->(3,13)
 │    ├── left-join (hash)
 │    │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null li.customerid:4 li.ordernumber:5 column12:12
 │    │    ├── fd: (1,2)-->(3)
 │    │    ├── scan order0_
 │    │    │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null
 │    │    │    ├── key: (1,2)
 │    │    │    └── fd: (1,2)-->(3)
 │    │    ├── project
 │    │    │    ├── columns: column12:12 li.customerid:4!null li.ordernumber:5!null
 │    │    │    ├── inner-join (hash)
 │    │    │    │    ├── columns: li.customerid:4!null li.ordernumber:5!null li.productid:6!null quantity:7 p.productid:8!null cost:10
 │    │    │    │    ├── key: (4,5,8)
 │    │    │    │    ├── fd: (4-6)-->(7), (8)-->(10), (6)==(8), (8)==(6)
 │    │    │    │    ├── scan li
 │    │    │    │    │    ├── columns: li.customerid:4!null li.ordernumber:5!null li.productid:6!null quantity:7
 │    │    │    │    │    ├── key: (4-6)
 │    │    │    │    │    └── fd: (4-6)-->(7)
 │    │    │    │    ├── scan p
 │    │    │    │    │    ├── columns: p.productid:8!null cost:10
 │    │    │    │    │    ├── key: (8)
 │    │    │    │    │    └── fd: (8)-->(10)
 │    │    │    │    └── filters
 │    │    │    │         └── li.productid:6 = p.productid:8 [outer=(6,8), constraints=(/6: (/NULL - ]; /8: (/NULL - ]), fd=(6)==(8), (8)==(6)]
 │    │    │    └── projections
 │    │    │         └── quantity:7 * cost:10 [as=column12:12, outer=(7,10)]
 │    │    └── filters
 │    │         ├── li.customerid:4 = order0_.customerid:1 [outer=(1,4), constraints=(/1: (/NULL - ]; /4: (/NULL - ]), fd=(1)==(4), (4)==(1)]
 │    │         └── li.ordernumber:5 = order0_.ordernumber:2 [outer=(2,5), constraints=(/2: (/NULL - ]; /5: (/NULL - ]), fd=(2)==(5), (5)==(2)]
 │    └── aggregations
 │         ├── sum [as=sum:13, outer=(12)]
 │         │    └── column12:12
 │         └── const-agg [as=orderdate:3, outer=(3)]
 │              └── orderdate:3
 └── projections
      └── sum:13 [as=formula273_:14, outer=(13)]

exec-ddl
drop table customer, customerorder, lineitem, product
----

# ------------------------------------------------------------------------------
# Query #12
#   org.hibernate.test.criteria.CriteriaQueryTest
# ------------------------------------------------------------------------------
exec-ddl
CREATE TABLE student (
  studentid INT8 NOT NULL,
  name VARCHAR(255) NOT NULL,
  address_city VARCHAR(255),
  address_state VARCHAR(255),
  preferredcoursecode VARCHAR(255),
  PRIMARY KEY (studentid)
);
----

exec-ddl
CREATE TABLE enrolment (
  studentid INT8 NOT NULL,
  coursecode VARCHAR(255) NOT NULL,
  semester INT2 NOT NULL,
  year INT2 NOT NULL,
  PRIMARY KEY (studentid, coursecode)
);
----

opt
SELECT
  this_.studentid AS studenti1_26_0_,
  this_.name AS name2_26_0_,
  this_.address_city AS address_3_26_0_,
  this_.address_state AS address_4_26_0_,
  this_.preferredcoursecode AS preferre5_26_0_
FROM
  student AS this_
WHERE
  EXISTS(
    SELECT
      enrolment_.studentid AS y0_
    FROM
      enrolment AS enrolment_
    WHERE
      enrolment_.year
      = (
          SELECT
            max(maxstudentenrolment_.year) AS y0_
          FROM
            enrolment AS maxstudentenrolment_
          WHERE
            this_.preferredcoursecode = maxstudentenrolment_.coursecode
        )
  );
----
group-by
 ├── columns: studenti1_26_0_:1!null name2_26_0_:2!null address_3_26_0_:3 address_4_26_0_:4 preferre5_26_0_:5!null
 ├── grouping columns: this_.studentid:1!null
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── select
 │    ├── columns: this_.studentid:1!null name:2!null address_city:3 address_state:4 preferredcoursecode:5!null enrolment_.studentid:6!null enrolment_.coursecode:7!null enrolment_.year:9!null max:14!null
 │    ├── key: (1,6,7)
 │    ├── fd: (1)-->(2-5), (6,7)-->(9), (1,6,7)-->(2-5,9,14), (9)==(14), (14)==(9)
 │    ├── group-by
 │    │    ├── columns: this_.studentid:1!null name:2!null address_city:3 address_state:4 preferredcoursecode:5!null enrolment_.studentid:6!null enrolment_.coursecode:7!null enrolment_.year:9!null max:14!null
 │    │    ├── grouping columns: this_.studentid:1!null enrolment_.studentid:6!null enrolment_.coursecode:7!null
 │    │    ├── key: (1,6,7)
 │    │    ├── fd: (1)-->(2-5), (6,7)-->(9), (1,6,7)-->(2-5,9,14)
 │    │    ├── inner-join (cross)
 │    │    │    ├── columns: this_.studentid:1!null name:2!null address_city:3 address_state:4 preferredcoursecode:5!null enrolment_.studentid:6!null enrolment_.coursecode:7!null enrolment_.year:9!null maxstudentenrolment_.coursecode:11!null maxstudentenrolment_.year:13!null
 │    │    │    ├── fd: (1)-->(2-5), (6,7)-->(9), (5)==(11), (11)==(5)
 │    │    │    ├── inner-join (hash)
 │    │    │    │    ├── columns: this_.studentid:1!null name:2!null address_city:3 address_state:4 preferredcoursecode:5!null maxstudentenrolment_.coursecode:11!null maxstudentenrolment_.year:13!null
 │    │    │    │    ├── fd: (1)-->(2-5), (5)==(11), (11)==(5)
 │    │    │    │    ├── scan maxstudentenrolment_
 │    │    │    │    │    └── columns: maxstudentenrolment_.coursecode:11!null maxstudentenrolment_.year:13!null
 │    │    │    │    ├── scan this_
 │    │    │    │    │    ├── columns: this_.studentid:1!null name:2!null address_city:3 address_state:4 preferredcoursecode:5
 │    │    │    │    │    ├── key: (1)
 │    │    │    │    │    └── fd: (1)-->(2-5)
 │    │    │    │    └── filters
 │    │    │    │         └── preferredcoursecode:5 = maxstudentenrolment_.coursecode:11 [outer=(5,11), constraints=(/5: (/NULL - ]; /11: (/NULL - ]), fd=(5)==(11), (11)==(5)]
 │    │    │    ├── scan enrolment_
 │    │    │    │    ├── columns: enrolment_.studentid:6!null enrolment_.coursecode:7!null enrolment_.year:9!null
 │    │    │    │    ├── key: (6,7)
 │    │    │    │    └── fd: (6,7)-->(9)
 │    │    │    └── filters (true)
 │    │    └── aggregations
 │    │         ├── max [as=max:14, outer=(13)]
 │    │         │    └── maxstudentenrolment_.year:13
 │    │         ├── const-agg [as=enrolment_.year:9, outer=(9)]
 │    │         │    └── enrolment_.year:9
 │    │         ├── const-agg [as=name:2, outer=(2)]
 │    │         │    └── name:2
 │    │         ├── const-agg [as=address_city:3, outer=(3)]
 │    │         │    └── address_city:3
 │    │         ├── const-agg [as=address_state:4, outer=(4)]
 │    │         │    └── address_state:4
 │    │         └── const-agg [as=preferredcoursecode:5, outer=(5)]
 │    │              └── preferredcoursecode:5
 │    └── filters
 │         └── enrolment_.year:9 = max:14 [outer=(9,14), constraints=(/9: (/NULL - ]; /14: (/NULL - ]), fd=(9)==(14), (14)==(9)]
 └── aggregations
      ├── const-agg [as=name:2, outer=(2)]
      │    └── name:2
      ├── const-agg [as=address_city:3, outer=(3)]
      │    └── address_city:3
      ├── const-agg [as=address_state:4, outer=(4)]
      │    └── address_state:4
      └── const-agg [as=preferredcoursecode:5, outer=(5)]
           └── preferredcoursecode:5

exec-ddl
drop table student, enrolment
----

# ------------------------------------------------------------------------------
# Query #13
#   org.hibernate.test.subselectfetch.SubselectFetchWithFormulaTest
#   TODO(andyk): Need to decorrelate LeftJoin -> Project complex.
# ------------------------------------------------------------------------------
exec-ddl
CREATE TABLE t_name (id INT4 NOT NULL, c_name VARCHAR(255), PRIMARY KEY (id));
----

opt
SELECT
  this_.id AS id1_0_0_,
  this_.c_name AS c_name2_0_0_,
  (SELECT length(this_.c_name) FROM t_name WHERE this_.id = t_name.id)
    AS formula0_0_
FROM
  t_name AS this_;
----
project
 ├── columns: id1_0_0_:1!null c_name2_0_0_:2 formula0_0_:6
 ├── key: (1)
 ├── fd: (1)-->(2), (2)-->(6)
 ├── inner-join (merge)
 │    ├── columns: this_.id:1!null this_.c_name:2 t_name.id:3!null
 │    ├── left ordering: +1
 │    ├── right ordering: +3
 │    ├── key: (3)
 │    ├── fd: (1)-->(2), (1)==(3), (3)==(1)
 │    ├── scan this_
 │    │    ├── columns: this_.id:1!null this_.c_name:2
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2)
 │    │    └── ordering: +1
 │    ├── scan t_name
 │    │    ├── columns: t_name.id:3!null
 │    │    ├── key: (3)
 │    │    └── ordering: +3
 │    └── filters (true)
 └── projections
      └── length(this_.c_name:2) [as=formula0_0_:6, outer=(2)]

exec-ddl
drop table t_name
----
