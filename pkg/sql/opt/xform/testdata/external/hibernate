# These are queries that test correlated subqueries, and are taken from the
# Hibernate test suite. See this issue:
#   https://github.com/cockroachdb/cockroach/issues/26658

# ------------------------------------------------------------------------------
# Query #1
#   org.hibernate.userguide.collections.UnidirectionalMapTest testLifecycle
# ------------------------------------------------------------------------------
exec-ddl
create table Person (
  id int8 not null,
  primary key (id)
)
----

exec-ddl
create table Phone (
  id int8 not null,
  "number" varchar(255),
  since timestamp,
  type int4,
  primary key (id)
)
----

exec-ddl
create table phone_register (
  phone_id int8 not null,
  person_id int8 not null,
  primary key (phone_id, person_id),
  foreign key (person_id) references Phone (id),
  foreign key (phone_id) references Person (id),
  unique (person_id)
)
----

opt
select
  phoneregis0_.phone_id as phone_id1_2_0_,
  phoneregis0_.person_id as person_i2_2_0_,
  (
    select a10.since
    from Phone a10
    where a10.id=phoneregis0_.person_id
  ) as formula159_0_,
  unidirecti1_.id as id1_1_1_,
  unidirecti1_."number" as number2_1_1_,
  unidirecti1_.since as since3_1_1_,
  unidirecti1_.type as type4_1_1_
from
  phone_register phoneregis0_
inner join Phone unidirecti1_
  on phoneregis0_.person_id=unidirecti1_.id
where phoneregis0_.phone_id=1;
----
project
 ├── columns: phone_id1_2_0_:1!null person_i2_2_0_:2!null formula159_0_:14 id1_1_1_:4!null number2_1_1_:5 since3_1_1_:6 type4_1_1_:7
 ├── key: (4)
 ├── fd: ()-->(1), (4)-->(5-7), (2)==(4), (4)==(2), (2)-->(14)
 ├── inner-join (lookup phone [as=a10])
 │    ├── columns: phone_id:1!null person_id:2!null unidirecti1_.id:4!null unidirecti1_.number:5 unidirecti1_.since:6 unidirecti1_.type:7 a10.id:9!null a10.since:11
 │    ├── key columns: [2] = [9]
 │    ├── lookup columns are key
 │    ├── key: (9)
 │    ├── fd: ()-->(1), (4)-->(5-7), (2)==(4,9), (4)==(2,9), (9)-->(11), (9)==(2,4)
 │    ├── inner-join (lookup phone [as=unidirecti1_])
 │    │    ├── columns: phone_id:1!null person_id:2!null unidirecti1_.id:4!null unidirecti1_.number:5 unidirecti1_.since:6 unidirecti1_.type:7
 │    │    ├── key columns: [2] = [4]
 │    │    ├── lookup columns are key
 │    │    ├── key: (4)
 │    │    ├── fd: ()-->(1), (4)-->(5-7), (2)==(4), (4)==(2)
 │    │    ├── scan phone_register [as=phoneregis0_]
 │    │    │    ├── columns: phone_id:1!null person_id:2!null
 │    │    │    ├── constraint: /1/2: [/1 - /1]
 │    │    │    ├── key: (2)
 │    │    │    └── fd: ()-->(1)
 │    │    └── filters (true)
 │    └── filters (true)
 └── projections
      └── a10.since:11 [as=formula159_0_:14, outer=(11)]

exec-ddl
drop table phone_register, Person, Phone;
----

# ------------------------------------------------------------------------------
# Query #2
#   org.hibernate.userguide.criteria.CriteriaTest:
#
#   test_criteria_from_fetch_example
#   test_criteria_from_join_example
#   test_criteria_from_multiple_root_example
# ------------------------------------------------------------------------------
exec-ddl
create table Person (
   id int8 not null,
    address varchar(255),
    createdOn timestamp,
    name varchar(255),
    nickName varchar(255),
    version int4 not null,
    primary key (id)
)
----

exec-ddl
create table Person_addresses (
   Person_id int8 not null,
    addresses varchar(255),
    addresses_KEY varchar(255) not null,
    primary key (Person_id, addresses_KEY)
)
----

exec-ddl
create table Phone (
   id int8 not null,
    phone_number varchar(255),
    phone_type varchar(255),
    person_id int8,
    order_id int4,
    primary key (id)
)
----

exec-ddl
create table phone_call (
   id int8 not null,
    duration int4 not null,
    call_timestamp timestamp,
    phone_id int8,
    primary key (id)
)
----

exec-ddl
create table Partner (
   id int8 not null,
    name varchar(255),
    version int4 not null,
    primary key (id)
)
----

opt
select
    phone0_.id as id1_6_0_,
    person1_.id as id1_4_1_,
    phone0_.phone_number as phone_nu2_6_0_,
    phone0_.person_id as person_i4_6_0_,
    phone0_.phone_type as phone_ty3_6_0_,
    addresses2_.Person_id as Person_i1_5_0__,
    addresses2_.addresses as addresse2_5_0__,
    addresses2_.addresses_KEY as addresse3_0__,
    person1_.address as address2_4_1_,
    person1_.createdOn as createdO3_4_1_,
    person1_.name as name4_4_1_,
    person1_.nickName as nickName5_4_1_,
    person1_.version as version6_4_1_,
    addresses2_.Person_id as Person_i1_5_0__,
    addresses2_.addresses as addresse2_5_0__,
    addresses2_.addresses_KEY as addresse3_0__
from
    Phone phone0_
inner join
    Person person1_
        on phone0_.person_id=person1_.id
inner join
    Person_addresses addresses2_
        on person1_.id=addresses2_.Person_id
where
    exists (
        select
            calls3_.id
        from
            phone_call calls3_
        where
            phone0_.id=calls3_.phone_id
    )
----
inner-join (hash)
 ├── columns: id1_6_0_:1!null id1_4_1_:7!null phone_nu2_6_0_:2 person_i4_6_0_:4!null phone_ty3_6_0_:3 person_i1_5_0__:14!null addresse2_5_0__:15 addresse3_0__:16!null address2_4_1_:8 createdo3_4_1_:9 name4_4_1_:10 nickname5_4_1_:11 version6_4_1_:12!null person_i1_5_0__:14!null addresse2_5_0__:15 addresse3_0__:16!null
 ├── key: (1,16)
 ├── fd: (1)-->(2-4), (7)-->(8-12), (4)==(7,14), (7)==(4,14), (14,16)-->(15), (14)==(4,7)
 ├── scan person_addresses [as=addresses2_]
 │    ├── columns: addresses2_.person_id:14!null addresses:15 addresses_key:16!null
 │    ├── key: (14,16)
 │    └── fd: (14,16)-->(15)
 ├── inner-join (lookup person [as=person1_])
 │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 phone0_.person_id:4!null person1_.id:7!null address:8 createdon:9 name:10 nickname:11 version:12!null
 │    ├── key columns: [4] = [7]
 │    ├── lookup columns are key
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4), (7)-->(8-12), (4)==(7), (7)==(4)
 │    ├── project
 │    │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 phone0_.person_id:4
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2-4)
 │    │    └── inner-join (lookup phone [as=phone0_])
 │    │         ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 phone0_.person_id:4 phone_id:21!null
 │    │         ├── key columns: [21] = [1]
 │    │         ├── lookup columns are key
 │    │         ├── key: (21)
 │    │         ├── fd: (1)-->(2-4), (1)==(21), (21)==(1)
 │    │         ├── distinct-on
 │    │         │    ├── columns: phone_id:21
 │    │         │    ├── grouping columns: phone_id:21
 │    │         │    ├── key: (21)
 │    │         │    └── scan phone_call [as=calls3_]
 │    │         │         └── columns: phone_id:21
 │    │         └── filters (true)
 │    └── filters (true)
 └── filters
      └── person1_.id:7 = addresses2_.person_id:14 [outer=(7,14), constraints=(/7: (/NULL - ]; /14: (/NULL - ]), fd=(7)==(14), (14)==(7)]

opt
select
    phone0_.id as id1_6_,
    phone0_.phone_number as phone_nu2_6_,
    phone0_.person_id as person_i4_6_,
    phone0_.phone_type as phone_ty3_6_
from
    Phone phone0_
inner join
    Person person1_
        on phone0_.person_id=person1_.id
inner join
    Person_addresses addresses2_
        on person1_.id=addresses2_.Person_id
where
    exists (
        select
            calls3_.id
        from
            phone_call calls3_
        where
            phone0_.id=calls3_.phone_id
    )
----
project
 ├── columns: id1_6_:1!null phone_nu2_6_:2 person_i4_6_:4!null phone_ty3_6_:3
 ├── fd: (1)-->(2-4)
 └── inner-join (hash)
      ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 phone0_.person_id:4!null person1_.id:7!null addresses2_.person_id:14!null
      ├── fd: (1)-->(2-4), (4)==(7,14), (7)==(4,14), (14)==(4,7)
      ├── scan person_addresses [as=addresses2_]
      │    └── columns: addresses2_.person_id:14!null
      ├── inner-join (lookup person [as=person1_])
      │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 phone0_.person_id:4!null person1_.id:7!null
      │    ├── key columns: [4] = [7]
      │    ├── lookup columns are key
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-4), (4)==(7), (7)==(4)
      │    ├── project
      │    │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 phone0_.person_id:4
      │    │    ├── key: (1)
      │    │    ├── fd: (1)-->(2-4)
      │    │    └── inner-join (lookup phone [as=phone0_])
      │    │         ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 phone0_.person_id:4 phone_id:21!null
      │    │         ├── key columns: [21] = [1]
      │    │         ├── lookup columns are key
      │    │         ├── key: (21)
      │    │         ├── fd: (1)-->(2-4), (1)==(21), (21)==(1)
      │    │         ├── distinct-on
      │    │         │    ├── columns: phone_id:21
      │    │         │    ├── grouping columns: phone_id:21
      │    │         │    ├── key: (21)
      │    │         │    └── scan phone_call [as=calls3_]
      │    │         │         └── columns: phone_id:21
      │    │         └── filters (true)
      │    └── filters (true)
      └── filters
           └── person1_.id:7 = addresses2_.person_id:14 [outer=(7,14), constraints=(/7: (/NULL - ]; /14: (/NULL - ]), fd=(7)==(14), (14)==(7)]

opt
select
    person0_.id as id1_4_0_,
    partner1_.id as id1_2_1_,
    person0_.address as address2_4_0_,
    person0_.createdOn as createdO3_4_0_,
    person0_.name as name4_4_0_,
    person0_.nickName as nickName5_4_0_,
    person0_.version as version6_4_0_,
    partner1_.name as name2_2_1_,
    partner1_.version as version3_2_1_
from
    Person person0_ cross
join
    Partner partner1_
where
    person0_.address=$1
    and (
        exists (
            select
                phones2_.id
            from
                Phone phones2_
            where
                person0_.id=phones2_.person_id
        )
    )
    and (
        partner1_.name like $2
    )
    and partner1_.version=0
----
inner-join (cross)
 ├── columns: id1_4_0_:1!null id1_2_1_:8!null address2_4_0_:2!null createdo3_4_0_:3 name4_4_0_:4 nickname5_4_0_:5 version6_4_0_:6!null name2_2_1_:9!null version3_2_1_:10!null
 ├── has-placeholder
 ├── key: (1,8)
 ├── fd: ()-->(10), (1)-->(2-6), (8)-->(9)
 ├── project
 │    ├── columns: person0_.id:1!null address:2!null createdon:3 person0_.name:4 nickname:5 person0_.version:6!null
 │    ├── has-placeholder
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-6)
 │    └── inner-join (lookup person [as=person0_])
 │         ├── columns: person0_.id:1!null address:2!null createdon:3 person0_.name:4 nickname:5 person0_.version:6!null person_id:15!null
 │         ├── key columns: [15] = [1]
 │         ├── lookup columns are key
 │         ├── has-placeholder
 │         ├── key: (15)
 │         ├── fd: (1)-->(2-6), (1)==(15), (15)==(1)
 │         ├── distinct-on
 │         │    ├── columns: person_id:15
 │         │    ├── grouping columns: person_id:15
 │         │    ├── key: (15)
 │         │    └── scan phone [as=phones2_]
 │         │         └── columns: person_id:15
 │         └── filters
 │              └── address:2 = $1 [outer=(2), constraints=(/2: (/NULL - ])]
 ├── select
 │    ├── columns: partner1_.id:8!null partner1_.name:9!null partner1_.version:10!null
 │    ├── has-placeholder
 │    ├── key: (8)
 │    ├── fd: ()-->(10), (8)-->(9)
 │    ├── scan partner [as=partner1_]
 │    │    ├── columns: partner1_.id:8!null partner1_.name:9 partner1_.version:10!null
 │    │    ├── key: (8)
 │    │    └── fd: (8)-->(9,10)
 │    └── filters
 │         ├── partner1_.name:9 LIKE $2 [outer=(9), constraints=(/9: (/NULL - ])]
 │         └── partner1_.version:10 = 0 [outer=(10), constraints=(/10: [/0 - /0]; tight), fd=()-->(10)]
 └── filters (true)

exec-ddl
drop table Person, Person_addresses, Phone, phone_call, Partner;
----

# ------------------------------------------------------------------------------
# Query #3
#   org.hibernate.userguide.envers.DefaultAuditTest test
# ------------------------------------------------------------------------------
exec-ddl
create table Customer_AUD (
   id int8 not null,
    REV int4 not null,
    REVTYPE int2,
    created_on timestamp,
    firstName varchar(255),
    lastName varchar(255),
    primary key (id, REV)
)
----

opt
select
    defaultaud0_.id as id1_1_,
    defaultaud0_.REV as REV2_1_,
    defaultaud0_.REVTYPE as REVTYPE3_1_,
    defaultaud0_.created_on as created_4_1_,
    defaultaud0_.firstName as firstNam5_1_,
    defaultaud0_.lastName as lastName6_1_
from
    Customer_AUD defaultaud0_
where
    defaultaud0_.REV=(
        select
            max(defaultaud1_.REV)
        from
            Customer_AUD defaultaud1_
        where
            defaultaud1_.REV<=$1
            and defaultaud0_.id=defaultaud1_.id
    )
    and defaultaud0_.REVTYPE<>$2
----
project
 ├── columns: id1_1_:1!null rev2_1_:2!null revtype3_1_:3!null created_4_1_:4 firstnam5_1_:5 lastname6_1_:6
 ├── has-placeholder
 ├── key: (1,2)
 ├── fd: (1,2)-->(3-6)
 └── select
      ├── columns: defaultaud0_.id:1!null defaultaud0_.rev:2!null defaultaud0_.revtype:3!null defaultaud0_.created_on:4 defaultaud0_.firstname:5 defaultaud0_.lastname:6 max:15!null
      ├── has-placeholder
      ├── key: (1,2)
      ├── fd: (1,2)-->(3-6,15), (2)==(15), (15)==(2)
      ├── group-by
      │    ├── columns: defaultaud0_.id:1!null defaultaud0_.rev:2!null defaultaud0_.revtype:3!null defaultaud0_.created_on:4 defaultaud0_.firstname:5 defaultaud0_.lastname:6 max:15!null
      │    ├── grouping columns: defaultaud0_.id:1!null defaultaud0_.rev:2!null
      │    ├── has-placeholder
      │    ├── key: (1,2)
      │    ├── fd: (1,2)-->(3-6,15)
      │    ├── inner-join (merge)
      │    │    ├── columns: defaultaud0_.id:1!null defaultaud0_.rev:2!null defaultaud0_.revtype:3!null defaultaud0_.created_on:4 defaultaud0_.firstname:5 defaultaud0_.lastname:6 defaultaud1_.id:8!null defaultaud1_.rev:9!null
      │    │    ├── left ordering: +1
      │    │    ├── right ordering: +8
      │    │    ├── has-placeholder
      │    │    ├── key: (2,8,9)
      │    │    ├── fd: (1,2)-->(3-6), (1)==(8), (8)==(1)
      │    │    ├── select
      │    │    │    ├── columns: defaultaud0_.id:1!null defaultaud0_.rev:2!null defaultaud0_.revtype:3!null defaultaud0_.created_on:4 defaultaud0_.firstname:5 defaultaud0_.lastname:6
      │    │    │    ├── has-placeholder
      │    │    │    ├── key: (1,2)
      │    │    │    ├── fd: (1,2)-->(3-6)
      │    │    │    ├── ordering: +1
      │    │    │    ├── scan customer_aud [as=defaultaud0_]
      │    │    │    │    ├── columns: defaultaud0_.id:1!null defaultaud0_.rev:2!null defaultaud0_.revtype:3 defaultaud0_.created_on:4 defaultaud0_.firstname:5 defaultaud0_.lastname:6
      │    │    │    │    ├── key: (1,2)
      │    │    │    │    ├── fd: (1,2)-->(3-6)
      │    │    │    │    └── ordering: +1
      │    │    │    └── filters
      │    │    │         └── defaultaud0_.revtype:3 != $2 [outer=(3), constraints=(/3: (/NULL - ])]
      │    │    ├── select
      │    │    │    ├── columns: defaultaud1_.id:8!null defaultaud1_.rev:9!null
      │    │    │    ├── has-placeholder
      │    │    │    ├── key: (8,9)
      │    │    │    ├── ordering: +8
      │    │    │    ├── scan customer_aud [as=defaultaud1_]
      │    │    │    │    ├── columns: defaultaud1_.id:8!null defaultaud1_.rev:9!null
      │    │    │    │    ├── key: (8,9)
      │    │    │    │    └── ordering: +8
      │    │    │    └── filters
      │    │    │         └── defaultaud1_.rev:9 <= $1 [outer=(9), constraints=(/9: (/NULL - ])]
      │    │    └── filters (true)
      │    └── aggregations
      │         ├── max [as=max:15, outer=(9)]
      │         │    └── defaultaud1_.rev:9
      │         ├── const-agg [as=defaultaud0_.revtype:3, outer=(3)]
      │         │    └── defaultaud0_.revtype:3
      │         ├── const-agg [as=defaultaud0_.created_on:4, outer=(4)]
      │         │    └── defaultaud0_.created_on:4
      │         ├── const-agg [as=defaultaud0_.firstname:5, outer=(5)]
      │         │    └── defaultaud0_.firstname:5
      │         └── const-agg [as=defaultaud0_.lastname:6, outer=(6)]
      │              └── defaultaud0_.lastname:6
      └── filters
           └── defaultaud0_.rev:2 = max:15 [outer=(2,15), constraints=(/2: (/NULL - ]; /15: (/NULL - ]), fd=(2)==(15), (15)==(2)]

exec-ddl
drop table Customer_AUD;
----

# ------------------------------------------------------------------------------
# Query #4
#   org.hibernate.userguide.envers.QueryAuditTest test
# ------------------------------------------------------------------------------
exec-ddl
create table Customer_AUD (
   id int8 not null,
    REV int4 not null,
    REVTYPE int2,
    REVEND int4,
    created_on timestamp,
    firstName varchar(255),
    lastName varchar(255),
    address_id int8,
    primary key (id, REV)
)
----

opt
select
    queryaudit0_.id as id1_3_,
    queryaudit0_.REV as REV2_3_,
    queryaudit0_.REVTYPE as REVTYPE3_3_,
    queryaudit0_.REVEND as REVEND4_3_,
    queryaudit0_.created_on as created_5_3_,
    queryaudit0_.firstName as firstNam6_3_,
    queryaudit0_.lastName as lastName7_3_,
    queryaudit0_.address_id as address_8_3_
from
    Customer_AUD queryaudit0_
where
    queryaudit0_.REVTYPE<>$1
    and queryaudit0_.REV=(
        select
            max(queryaudit1_.REV)
        from
            Customer_AUD queryaudit1_
        where
            queryaudit1_.id=queryaudit0_.id
    )
order by
    queryaudit0_.REV asc
----
sort
 ├── columns: id1_3_:1!null rev2_3_:2!null revtype3_3_:3!null revend4_3_:4 created_5_3_:5 firstnam6_3_:6 lastname7_3_:7 address_8_3_:8
 ├── has-placeholder
 ├── key: (1,2)
 ├── fd: (1,2)-->(3-8)
 ├── ordering: +2
 └── project
      ├── columns: queryaudit0_.id:1!null queryaudit0_.rev:2!null queryaudit0_.revtype:3!null queryaudit0_.revend:4 queryaudit0_.created_on:5 queryaudit0_.firstname:6 queryaudit0_.lastname:7 queryaudit0_.address_id:8
      ├── has-placeholder
      ├── key: (1,2)
      ├── fd: (1,2)-->(3-8)
      └── select
           ├── columns: queryaudit0_.id:1!null queryaudit0_.rev:2!null queryaudit0_.revtype:3!null queryaudit0_.revend:4 queryaudit0_.created_on:5 queryaudit0_.firstname:6 queryaudit0_.lastname:7 queryaudit0_.address_id:8 max:19!null
           ├── has-placeholder
           ├── key: (1,2)
           ├── fd: (1,2)-->(3-8,19), (2)==(19), (19)==(2)
           ├── group-by
           │    ├── columns: queryaudit0_.id:1!null queryaudit0_.rev:2!null queryaudit0_.revtype:3!null queryaudit0_.revend:4 queryaudit0_.created_on:5 queryaudit0_.firstname:6 queryaudit0_.lastname:7 queryaudit0_.address_id:8 max:19!null
           │    ├── grouping columns: queryaudit0_.id:1!null queryaudit0_.rev:2!null
           │    ├── has-placeholder
           │    ├── key: (1,2)
           │    ├── fd: (1,2)-->(3-8,19)
           │    ├── inner-join (merge)
           │    │    ├── columns: queryaudit0_.id:1!null queryaudit0_.rev:2!null queryaudit0_.revtype:3!null queryaudit0_.revend:4 queryaudit0_.created_on:5 queryaudit0_.firstname:6 queryaudit0_.lastname:7 queryaudit0_.address_id:8 queryaudit1_.id:10!null queryaudit1_.rev:11!null
           │    │    ├── left ordering: +1
           │    │    ├── right ordering: +10
           │    │    ├── has-placeholder
           │    │    ├── key: (2,10,11)
           │    │    ├── fd: (1,2)-->(3-8), (1)==(10), (10)==(1)
           │    │    ├── select
           │    │    │    ├── columns: queryaudit0_.id:1!null queryaudit0_.rev:2!null queryaudit0_.revtype:3!null queryaudit0_.revend:4 queryaudit0_.created_on:5 queryaudit0_.firstname:6 queryaudit0_.lastname:7 queryaudit0_.address_id:8
           │    │    │    ├── has-placeholder
           │    │    │    ├── key: (1,2)
           │    │    │    ├── fd: (1,2)-->(3-8)
           │    │    │    ├── ordering: +1
           │    │    │    ├── scan customer_aud [as=queryaudit0_]
           │    │    │    │    ├── columns: queryaudit0_.id:1!null queryaudit0_.rev:2!null queryaudit0_.revtype:3 queryaudit0_.revend:4 queryaudit0_.created_on:5 queryaudit0_.firstname:6 queryaudit0_.lastname:7 queryaudit0_.address_id:8
           │    │    │    │    ├── key: (1,2)
           │    │    │    │    ├── fd: (1,2)-->(3-8)
           │    │    │    │    └── ordering: +1
           │    │    │    └── filters
           │    │    │         └── queryaudit0_.revtype:3 != $1 [outer=(3), constraints=(/3: (/NULL - ])]
           │    │    ├── scan customer_aud [as=queryaudit1_]
           │    │    │    ├── columns: queryaudit1_.id:10!null queryaudit1_.rev:11!null
           │    │    │    ├── key: (10,11)
           │    │    │    └── ordering: +10
           │    │    └── filters (true)
           │    └── aggregations
           │         ├── max [as=max:19, outer=(11)]
           │         │    └── queryaudit1_.rev:11
           │         ├── const-agg [as=queryaudit0_.revtype:3, outer=(3)]
           │         │    └── queryaudit0_.revtype:3
           │         ├── const-agg [as=queryaudit0_.revend:4, outer=(4)]
           │         │    └── queryaudit0_.revend:4
           │         ├── const-agg [as=queryaudit0_.created_on:5, outer=(5)]
           │         │    └── queryaudit0_.created_on:5
           │         ├── const-agg [as=queryaudit0_.firstname:6, outer=(6)]
           │         │    └── queryaudit0_.firstname:6
           │         ├── const-agg [as=queryaudit0_.lastname:7, outer=(7)]
           │         │    └── queryaudit0_.lastname:7
           │         └── const-agg [as=queryaudit0_.address_id:8, outer=(8)]
           │              └── queryaudit0_.address_id:8
           └── filters
                └── queryaudit0_.rev:2 = max:19 [outer=(2,19), constraints=(/2: (/NULL - ]; /19: (/NULL - ]), fd=(2)==(19), (19)==(2)]

exec-ddl
drop table Customer_AUD;
----

# ------------------------------------------------------------------------------
# Query #5
#   org.hibernate.userguide.hql.HQLTest
#     test_hql_all_subquery_comparison_qualifier_example
#     test_hql_collection_expressions_example_1
#     test_hql_collection_expressions_example_10
#     test_hql_collection_expressions_example_2
#     test_hql_collection_expressions_example_3
#     test_hql_collection_expressions_example_4
#     test_hql_collection_expressions_example_5
#     test_hql_collection_expressions_example_6
#     test_hql_collection_expressions_example_8
#     test_hql_collection_expressions_example_9
#     test_hql_collection_index_operator_example_3
#     test_hql_empty_collection_predicate_example_1
#     test_hql_empty_collection_predicate_example_2
#     test_hql_group_by_example_4
#     test_hql_member_of_collection_predicate_example_1
#     test_hql_member_of_collection_predicate_example_2
#   org.hibernate.jpa.test.criteria.enumcollection.EnumIsMemberTest
#     testQueryEnumCollection
# ------------------------------------------------------------------------------
exec-ddl
create table Phone (
   id int8 not null,
    phone_number varchar(255),
    phone_type varchar(255),
    person_id int8,
    order_id int4,
    primary key (id)
)
----

exec-ddl
create table phone_call (
   id int8 not null,
    duration int4 not null,
    call_timestamp timestamp,
    phone_id int8,
    primary key (id)
)
----

exec-ddl
create table Person (
   id int8 not null,
    address varchar(255),
    createdOn timestamp,
    name varchar(255),
    nickName varchar(255),
    version int4 not null,
    primary key (id)
)
----

exec-ddl
create table Phone_repairTimestamps (
   Phone_id int8 not null,
   repairTimestamps timestamp
)
----

exec-ddl
create table Person_addresses (
    Person_id int8 not null,
    addresses varchar(255),
    addresses_KEY varchar(255) not null,
    primary key (Person_id, addresses_KEY)
)
----

opt
select
    distinct person2_.id as id1_2_,
    person2_.address as address2_2_,
    person2_.createdOn as createdO3_2_,
    person2_.name as name4_2_,
    person2_.nickName as nickName5_2_,
    person2_.version as version6_2_
from
    Phone phone0_
inner join
    phone_call calls1_
        on phone0_.id=calls1_.phone_id
inner join
    Person person2_
        on phone0_.person_id=person2_.id
where
    50>all (
        select
            call3_.duration
        from
            phone_call call3_
        where
            call3_.phone_id=phone0_.id
    )
----
distinct-on
 ├── columns: id1_2_:12!null address2_2_:13 createdo3_2_:14 name4_2_:15 nickname5_2_:16 version6_2_:17!null
 ├── grouping columns: person2_.id:12!null
 ├── key: (12)
 ├── fd: (12)-->(13-17)
 ├── inner-join (hash)
 │    ├── columns: phone0_.id:1!null person_id:4!null calls1_.phone_id:10!null person2_.id:12!null address:13 createdon:14 name:15 nickname:16 version:17!null
 │    ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │    ├── fd: (1)-->(4), (1)==(10), (10)==(1), (12)-->(13-17), (4)==(12), (12)==(4)
 │    ├── scan phone_call [as=calls1_]
 │    │    └── columns: calls1_.phone_id:10
 │    ├── inner-join (hash)
 │    │    ├── columns: phone0_.id:1!null person_id:4!null person2_.id:12!null address:13 createdon:14 name:15 nickname:16 version:17!null
 │    │    ├── multiplicity: left-rows(zero-or-more), right-rows(zero-or-one)
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(4), (12)-->(13-17), (4)==(12), (12)==(4)
 │    │    ├── scan person [as=person2_]
 │    │    │    ├── columns: person2_.id:12!null address:13 createdon:14 name:15 nickname:16 version:17!null
 │    │    │    ├── key: (12)
 │    │    │    └── fd: (12)-->(13-17)
 │    │    ├── anti-join (hash)
 │    │    │    ├── columns: phone0_.id:1!null person_id:4
 │    │    │    ├── key: (1)
 │    │    │    ├── fd: (1)-->(4)
 │    │    │    ├── scan phone [as=phone0_]
 │    │    │    │    ├── columns: phone0_.id:1!null person_id:4
 │    │    │    │    ├── key: (1)
 │    │    │    │    └── fd: (1)-->(4)
 │    │    │    ├── select
 │    │    │    │    ├── columns: call3_.duration:20!null call3_.phone_id:22
 │    │    │    │    ├── scan phone_call [as=call3_]
 │    │    │    │    │    └── columns: call3_.duration:20!null call3_.phone_id:22
 │    │    │    │    └── filters
 │    │    │    │         └── (call3_.duration:20 >= 50) IS NOT false [outer=(20)]
 │    │    │    └── filters
 │    │    │         └── call3_.phone_id:22 = phone0_.id:1 [outer=(1,22), constraints=(/1: (/NULL - ]; /22: (/NULL - ]), fd=(1)==(22), (22)==(1)]
 │    │    └── filters
 │    │         └── person_id:4 = person2_.id:12 [outer=(4,12), constraints=(/4: (/NULL - ]; /12: (/NULL - ]), fd=(4)==(12), (12)==(4)]
 │    └── filters
 │         └── phone0_.id:1 = calls1_.phone_id:10 [outer=(1,10), constraints=(/1: (/NULL - ]; /10: (/NULL - ]), fd=(1)==(10), (10)==(1)]
 └── aggregations
      ├── const-agg [as=address:13, outer=(13)]
      │    └── address:13
      ├── const-agg [as=createdon:14, outer=(14)]
      │    └── createdon:14
      ├── const-agg [as=name:15, outer=(15)]
      │    └── name:15
      ├── const-agg [as=nickname:16, outer=(16)]
      │    └── nickname:16
      └── const-agg [as=version:17, outer=(17)]
           └── version:17

opt
select
    phone0_.id as id1_4_,
    phone0_.phone_number as phone_nu2_4_,
    phone0_.person_id as person_i4_4_,
    phone0_.phone_type as phone_ty3_4_
from
    Phone phone0_
where
    (
        select
            max(calls1_.id)
        from
            phone_call calls1_
        where
            phone0_.id=calls1_.phone_id
    )=$1
----
project
 ├── columns: id1_4_:1!null phone_nu2_4_:2 person_i4_4_:4 phone_ty3_4_:3
 ├── has-placeholder
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 └── select
      ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4 max:12!null
      ├── has-placeholder
      ├── key: (1)
      ├── fd: (1)-->(2-4,12)
      ├── group-by
      │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4 max:12!null
      │    ├── grouping columns: phone0_.id:1!null
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-4,12)
      │    ├── inner-join (hash)
      │    │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4 calls1_.id:7!null phone_id:10!null
      │    │    ├── multiplicity: left-rows(zero-or-more), right-rows(zero-or-one)
      │    │    ├── key: (7)
      │    │    ├── fd: (1)-->(2-4), (7)-->(10), (1)==(10), (10)==(1)
      │    │    ├── scan phone [as=phone0_]
      │    │    │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4
      │    │    │    ├── key: (1)
      │    │    │    └── fd: (1)-->(2-4)
      │    │    ├── scan phone_call [as=calls1_]
      │    │    │    ├── columns: calls1_.id:7!null phone_id:10
      │    │    │    ├── key: (7)
      │    │    │    └── fd: (7)-->(10)
      │    │    └── filters
      │    │         └── phone0_.id:1 = phone_id:10 [outer=(1,10), constraints=(/1: (/NULL - ]; /10: (/NULL - ]), fd=(1)==(10), (10)==(1)]
      │    └── aggregations
      │         ├── max [as=max:12, outer=(7)]
      │         │    └── calls1_.id:7
      │         ├── const-agg [as=phone_number:2, outer=(2)]
      │         │    └── phone_number:2
      │         ├── const-agg [as=phone_type:3, outer=(3)]
      │         │    └── phone_type:3
      │         └── const-agg [as=person_id:4, outer=(4)]
      │              └── person_id:4
      └── filters
           └── max:12 = $1 [outer=(12), constraints=(/12: (/NULL - ])]

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    (
        select
            count(phones1_.person_id)
        from
            Phone phones1_
        where
            person0_.id=phones1_.person_id
    )=2
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 └── select
      ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null count:14!null
      ├── key: (1)
      ├── fd: ()-->(14), (1)-->(2-6)
      ├── group-by
      │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null count:14!null
      │    ├── grouping columns: person0_.id:1!null
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-6,14)
      │    ├── left-join (hash)
      │    │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null person_id:11
      │    │    ├── multiplicity: left-rows(one-or-more), right-rows(zero-or-one)
      │    │    ├── fd: (1)-->(2-6)
      │    │    ├── scan person [as=person0_]
      │    │    │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null
      │    │    │    ├── key: (1)
      │    │    │    └── fd: (1)-->(2-6)
      │    │    ├── scan phone [as=phones1_]
      │    │    │    └── columns: person_id:11
      │    │    └── filters
      │    │         └── person0_.id:1 = person_id:11 [outer=(1,11), constraints=(/1: (/NULL - ]; /11: (/NULL - ]), fd=(1)==(11), (11)==(1)]
      │    └── aggregations
      │         ├── count [as=count:14, outer=(11)]
      │         │    └── person_id:11
      │         ├── const-agg [as=address:2, outer=(2)]
      │         │    └── address:2
      │         ├── const-agg [as=createdon:3, outer=(3)]
      │         │    └── createdon:3
      │         ├── const-agg [as=name:4, outer=(4)]
      │         │    └── name:4
      │         ├── const-agg [as=nickname:5, outer=(5)]
      │         │    └── nickname:5
      │         └── const-agg [as=version:6, outer=(6)]
      │              └── version:6
      └── filters
           └── count:14 = 2 [outer=(14), constraints=(/14: [/2 - /2]; tight), fd=()-->(14)]

opt
select
    phone0_.id as id1_4_,
    phone0_.phone_number as phone_nu2_4_,
    phone0_.person_id as person_i4_4_,
    phone0_.phone_type as phone_ty3_4_
from
    Phone phone0_
where
    (
        select
            min(calls1_.id)
        from
            phone_call calls1_
        where
            phone0_.id=calls1_.phone_id
    )=$1
----
project
 ├── columns: id1_4_:1!null phone_nu2_4_:2 person_i4_4_:4 phone_ty3_4_:3
 ├── has-placeholder
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 └── select
      ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4 min:12!null
      ├── has-placeholder
      ├── key: (1)
      ├── fd: (1)-->(2-4,12)
      ├── group-by
      │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4 min:12!null
      │    ├── grouping columns: phone0_.id:1!null
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-4,12)
      │    ├── inner-join (hash)
      │    │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4 calls1_.id:7!null phone_id:10!null
      │    │    ├── multiplicity: left-rows(zero-or-more), right-rows(zero-or-one)
      │    │    ├── key: (7)
      │    │    ├── fd: (1)-->(2-4), (7)-->(10), (1)==(10), (10)==(1)
      │    │    ├── scan phone [as=phone0_]
      │    │    │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4
      │    │    │    ├── key: (1)
      │    │    │    └── fd: (1)-->(2-4)
      │    │    ├── scan phone_call [as=calls1_]
      │    │    │    ├── columns: calls1_.id:7!null phone_id:10
      │    │    │    ├── key: (7)
      │    │    │    └── fd: (7)-->(10)
      │    │    └── filters
      │    │         └── phone0_.id:1 = phone_id:10 [outer=(1,10), constraints=(/1: (/NULL - ]; /10: (/NULL - ]), fd=(1)==(10), (10)==(1)]
      │    └── aggregations
      │         ├── min [as=min:12, outer=(7)]
      │         │    └── calls1_.id:7
      │         ├── const-agg [as=phone_number:2, outer=(2)]
      │         │    └── phone_number:2
      │         ├── const-agg [as=phone_type:3, outer=(3)]
      │         │    └── phone_type:3
      │         └── const-agg [as=person_id:4, outer=(4)]
      │              └── person_id:4
      └── filters
           └── min:12 = $1 [outer=(12), constraints=(/12: (/NULL - ])]

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    (
        select
            max(phones1_.order_id)
        from
            Phone phones1_
        where
            person0_.id=phones1_.person_id
    )=0
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 └── select
      ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null max:14!null
      ├── key: (1)
      ├── fd: ()-->(14), (1)-->(2-6)
      ├── group-by
      │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null max:14!null
      │    ├── grouping columns: person0_.id:1!null
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-6,14)
      │    ├── inner-join (hash)
      │    │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null person_id:11!null order_id:12!null
      │    │    ├── multiplicity: left-rows(zero-or-more), right-rows(zero-or-one)
      │    │    ├── fd: (1)-->(2-6), (1)==(11), (11)==(1)
      │    │    ├── scan person [as=person0_]
      │    │    │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null
      │    │    │    ├── key: (1)
      │    │    │    └── fd: (1)-->(2-6)
      │    │    ├── select
      │    │    │    ├── columns: person_id:11 order_id:12!null
      │    │    │    ├── scan phone [as=phones1_]
      │    │    │    │    └── columns: person_id:11 order_id:12
      │    │    │    └── filters
      │    │    │         └── order_id:12 IS NOT NULL [outer=(12), constraints=(/12: (/NULL - ]; tight)]
      │    │    └── filters
      │    │         └── person0_.id:1 = person_id:11 [outer=(1,11), constraints=(/1: (/NULL - ]; /11: (/NULL - ]), fd=(1)==(11), (11)==(1)]
      │    └── aggregations
      │         ├── max [as=max:14, outer=(12)]
      │         │    └── order_id:12
      │         ├── const-agg [as=address:2, outer=(2)]
      │         │    └── address:2
      │         ├── const-agg [as=createdon:3, outer=(3)]
      │         │    └── createdon:3
      │         ├── const-agg [as=name:4, outer=(4)]
      │         │    └── name:4
      │         ├── const-agg [as=nickname:5, outer=(5)]
      │         │    └── nickname:5
      │         └── const-agg [as=version:6, outer=(6)]
      │              └── version:6
      └── filters
           └── max:14 = 0 [outer=(14), constraints=(/14: [/0 - /0]; tight), fd=()-->(14)]

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    $1::int in (
        select
            phones1_.id
        from
            Phone phones1_
        where
            person0_.id=phones1_.person_id
    )
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── immutable, has-placeholder
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 └── inner-join (lookup person [as=person0_])
      ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null person_id:11!null
      ├── key columns: [11] = [1]
      ├── lookup columns are key
      ├── immutable, has-placeholder
      ├── key: (11)
      ├── fd: (1)-->(2-6), (1)==(11), (11)==(1)
      ├── distinct-on
      │    ├── columns: person_id:11
      │    ├── grouping columns: person_id:11
      │    ├── immutable, has-placeholder
      │    ├── key: (11)
      │    └── select
      │         ├── columns: phones1_.id:8!null person_id:11
      │         ├── immutable, has-placeholder
      │         ├── key: (8)
      │         ├── fd: (8)-->(11)
      │         ├── scan phone [as=phones1_]
      │         │    ├── columns: phones1_.id:8!null person_id:11
      │         │    ├── key: (8)
      │         │    └── fd: (8)-->(11)
      │         └── filters
      │              └── phones1_.id:8 = $1::INT8 [outer=(8), immutable, constraints=(/8: (/NULL - ])]
      └── filters (true)

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    $1::int=some (
        select
            phones1_.id
        from
            Phone phones1_
        where
            person0_.id=phones1_.person_id
    )
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── immutable, has-placeholder
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 └── inner-join (lookup person [as=person0_])
      ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null person_id:11!null
      ├── key columns: [11] = [1]
      ├── lookup columns are key
      ├── immutable, has-placeholder
      ├── key: (11)
      ├── fd: (1)-->(2-6), (1)==(11), (11)==(1)
      ├── distinct-on
      │    ├── columns: person_id:11
      │    ├── grouping columns: person_id:11
      │    ├── immutable, has-placeholder
      │    ├── key: (11)
      │    └── select
      │         ├── columns: phones1_.id:8!null person_id:11
      │         ├── immutable, has-placeholder
      │         ├── key: (8)
      │         ├── fd: (8)-->(11)
      │         ├── scan phone [as=phones1_]
      │         │    ├── columns: phones1_.id:8!null person_id:11
      │         │    ├── key: (8)
      │         │    └── fd: (8)-->(11)
      │         └── filters
      │              └── phones1_.id:8 = $1::INT8 [outer=(8), immutable, constraints=(/8: (/NULL - ])]
      └── filters (true)

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    exists (
        select
            phones1_.id
        from
            Phone phones1_
        where
            person0_.id=phones1_.person_id
    )
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 └── inner-join (lookup person [as=person0_])
      ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null person_id:11!null
      ├── key columns: [11] = [1]
      ├── lookup columns are key
      ├── key: (11)
      ├── fd: (1)-->(2-6), (1)==(11), (11)==(1)
      ├── distinct-on
      │    ├── columns: person_id:11
      │    ├── grouping columns: person_id:11
      │    ├── key: (11)
      │    └── scan phone [as=phones1_]
      │         └── columns: person_id:11
      └── filters (true)

opt
select
    phone0_.id as id1_4_,
    phone0_.phone_number as phone_nu2_4_,
    phone0_.person_id as person_i4_4_,
    phone0_.phone_type as phone_ty3_4_
from
    Phone phone0_
where
    $1::date>all (
        select
            repairtime1_.repairTimestamps
        from
            Phone_repairTimestamps repairtime1_
        where
            phone0_.id=repairtime1_.Phone_id
    )
----
anti-join (hash)
 ├── columns: id1_4_:1!null phone_nu2_4_:2 person_i4_4_:4 phone_ty3_4_:3
 ├── stable, has-placeholder
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 ├── scan phone [as=phone0_]
 │    ├── columns: id:1!null phone_number:2 phone_type:3 person_id:4
 │    ├── key: (1)
 │    └── fd: (1)-->(2-4)
 ├── select
 │    ├── columns: phone_id:7!null repairtimestamps:8
 │    ├── stable, has-placeholder
 │    ├── scan phone_repairtimestamps [as=repairtime1_]
 │    │    └── columns: phone_id:7!null repairtimestamps:8
 │    └── filters
 │         └── (repairtimestamps:8 >= $1::DATE) IS NOT false [outer=(8), stable]
 └── filters
      └── id:1 = phone_id:7 [outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    1 in (
        select
            phones1_.order_id
        from
            Phone phones1_
        where
            person0_.id=phones1_.person_id
    )
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 └── inner-join (lookup person [as=person0_])
      ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null person_id:11!null
      ├── key columns: [11] = [1]
      ├── lookup columns are key
      ├── key: (11)
      ├── fd: (1)-->(2-6), (1)==(11), (11)==(1)
      ├── distinct-on
      │    ├── columns: person_id:11
      │    ├── grouping columns: person_id:11
      │    ├── key: (11)
      │    └── select
      │         ├── columns: person_id:11 order_id:12!null
      │         ├── fd: ()-->(12)
      │         ├── scan phone [as=phones1_]
      │         │    └── columns: person_id:11 order_id:12
      │         └── filters
      │              └── order_id:12 = 1 [outer=(12), constraints=(/12: [/1 - /1]; tight), fd=()-->(12)]
      └── filters (true)

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_ cross
join
    Phone phones2_
where
    person0_.id=phones2_.person_id
    and phones2_.order_id = (
        select
            max(phones1_.order_id)
        from
            Phone phones1_
        where
            person0_.id=phones1_.person_id
    )
    and phones2_.phone_type='LAND_LINE'
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── fd: (1)-->(2-6)
 └── select
      ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null phones2_.id:8!null phones2_.order_id:12!null max:20!null
      ├── key: (8)
      ├── fd: (1)-->(2-6), (8)-->(1-6,12,20), (12)==(20), (20)==(12)
      ├── group-by
      │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null phones2_.id:8!null phones2_.order_id:12 max:20!null
      │    ├── grouping columns: phones2_.id:8!null
      │    ├── key: (8)
      │    ├── fd: (1)-->(2-6), (8)-->(1-6,12,20)
      │    ├── inner-join (hash)
      │    │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null phones2_.id:8!null phones2_.phone_type:10!null phones2_.person_id:11!null phones2_.order_id:12 phones1_.person_id:17!null phones1_.order_id:18!null
      │    │    ├── fd: ()-->(10), (1)-->(2-6), (8)-->(11,12), (1)==(11,17), (11)==(1,17), (17)==(1,11)
      │    │    ├── select
      │    │    │    ├── columns: phones1_.person_id:17 phones1_.order_id:18!null
      │    │    │    ├── scan phone [as=phones1_]
      │    │    │    │    └── columns: phones1_.person_id:17 phones1_.order_id:18
      │    │    │    └── filters
      │    │    │         └── phones1_.order_id:18 IS NOT NULL [outer=(18), constraints=(/18: (/NULL - ]; tight)]
      │    │    ├── inner-join (lookup person [as=person0_])
      │    │    │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null phones2_.id:8!null phones2_.phone_type:10!null phones2_.person_id:11!null phones2_.order_id:12
      │    │    │    ├── key columns: [11] = [1]
      │    │    │    ├── lookup columns are key
      │    │    │    ├── key: (8)
      │    │    │    ├── fd: ()-->(10), (1)-->(2-6), (8)-->(11,12), (1)==(11), (11)==(1)
      │    │    │    ├── select
      │    │    │    │    ├── columns: phones2_.id:8!null phones2_.phone_type:10!null phones2_.person_id:11 phones2_.order_id:12
      │    │    │    │    ├── key: (8)
      │    │    │    │    ├── fd: ()-->(10), (8)-->(11,12)
      │    │    │    │    ├── scan phone [as=phones2_]
      │    │    │    │    │    ├── columns: phones2_.id:8!null phones2_.phone_type:10 phones2_.person_id:11 phones2_.order_id:12
      │    │    │    │    │    ├── key: (8)
      │    │    │    │    │    └── fd: (8)-->(10-12)
      │    │    │    │    └── filters
      │    │    │    │         └── phones2_.phone_type:10 = 'LAND_LINE' [outer=(10), constraints=(/10: [/'LAND_LINE' - /'LAND_LINE']; tight), fd=()-->(10)]
      │    │    │    └── filters (true)
      │    │    └── filters
      │    │         └── person0_.id:1 = phones1_.person_id:17 [outer=(1,17), constraints=(/1: (/NULL - ]; /17: (/NULL - ]), fd=(1)==(17), (17)==(1)]
      │    └── aggregations
      │         ├── max [as=max:20, outer=(18)]
      │         │    └── phones1_.order_id:18
      │         ├── const-agg [as=phones2_.order_id:12, outer=(12)]
      │         │    └── phones2_.order_id:12
      │         ├── const-agg [as=address:2, outer=(2)]
      │         │    └── address:2
      │         ├── const-agg [as=createdon:3, outer=(3)]
      │         │    └── createdon:3
      │         ├── const-agg [as=name:4, outer=(4)]
      │         │    └── name:4
      │         ├── const-agg [as=nickname:5, outer=(5)]
      │         │    └── nickname:5
      │         ├── const-agg [as=version:6, outer=(6)]
      │         │    └── version:6
      │         └── const-agg [as=person0_.id:1, outer=(1)]
      │              └── person0_.id:1
      └── filters
           └── phones2_.order_id:12 = max:20 [outer=(12,20), constraints=(/12: (/NULL - ]; /20: (/NULL - ]), fd=(12)==(20), (20)==(12)]

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    not (exists (select
        phones1_.id
    from
        Phone phones1_
    where
        person0_.id=phones1_.person_id))
----
anti-join (hash)
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan person [as=person0_]
 │    ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 ├── scan phone [as=phones1_]
 │    └── columns: person_id:11
 └── filters
      └── person0_.id:1 = person_id:11 [outer=(1,11), constraints=(/1: (/NULL - ]; /11: (/NULL - ]), fd=(1)==(11), (11)==(1)]

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    exists (
        select
            phones1_.id
        from
            Phone phones1_
        where
            person0_.id=phones1_.person_id
    )
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 └── inner-join (lookup person [as=person0_])
      ├── columns: person0_.id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null person_id:11!null
      ├── key columns: [11] = [1]
      ├── lookup columns are key
      ├── key: (11)
      ├── fd: (1)-->(2-6), (1)==(11), (11)==(1)
      ├── distinct-on
      │    ├── columns: person_id:11
      │    ├── grouping columns: person_id:11
      │    ├── key: (11)
      │    └── scan phone [as=phones1_]
      │         └── columns: person_id:11
      └── filters (true)

opt
select
    phone0_.id as id1_4_,
    phone0_.phone_number as phone_nu2_4_,
    phone0_.person_id as person_i4_4_,
    phone0_.phone_type as phone_ty3_4_
from
    Phone phone0_
where
    not (exists (select
        calls1_.id
    from
        phone_call calls1_
    where
        phone0_.id=calls1_.phone_id))
----
anti-join (hash)
 ├── columns: id1_4_:1!null phone_nu2_4_:2 person_i4_4_:4 phone_ty3_4_:3
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 ├── scan phone [as=phone0_]
 │    ├── columns: phone0_.id:1!null phone_number:2 phone_type:3 person_id:4
 │    ├── key: (1)
 │    └── fd: (1)-->(2-4)
 ├── scan phone_call [as=calls1_]
 │    └── columns: phone_id:10
 └── filters
      └── phone0_.id:1 = phone_id:10 [outer=(1,10), constraints=(/1: (/NULL - ]; /10: (/NULL - ]), fd=(1)==(10), (10)==(1)]

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    'Home address' in (
        select
            addresses1_.addresses
        from
            Person_addresses addresses1_
        where
            person0_.id=addresses1_.Person_id
    )
----
project
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 └── inner-join (lookup person [as=person0_])
      ├── columns: id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null person_id:8!null
      ├── key columns: [8] = [1]
      ├── lookup columns are key
      ├── key: (8)
      ├── fd: (1)-->(2-6), (1)==(8), (8)==(1)
      ├── distinct-on
      │    ├── columns: person_id:8!null
      │    ├── grouping columns: person_id:8!null
      │    ├── internal-ordering: +8 opt(9)
      │    ├── key: (8)
      │    └── select
      │         ├── columns: person_id:8!null addresses:9!null
      │         ├── fd: ()-->(9)
      │         ├── ordering: +8 opt(9) [actual: +8]
      │         ├── scan person_addresses [as=addresses1_]
      │         │    ├── columns: person_id:8!null addresses:9
      │         │    └── ordering: +8 opt(9) [actual: +8]
      │         └── filters
      │              └── addresses:9 = 'Home address' [outer=(9), constraints=(/9: [/'Home address' - /'Home address']; tight), fd=()-->(9)]
      └── filters (true)

opt
select
    person0_.id as id1_2_,
    person0_.address as address2_2_,
    person0_.createdOn as createdO3_2_,
    person0_.name as name4_2_,
    person0_.nickName as nickName5_2_,
    person0_.version as version6_2_
from
    Person person0_
where
    'Home address' not in  (
        select
            addresses1_.addresses
        from
            Person_addresses addresses1_
        where
            person0_.id=addresses1_.Person_id
    )
----
anti-join (merge)
 ├── columns: id1_2_:1!null address2_2_:2 createdo3_2_:3 name4_2_:4 nickname5_2_:5 version6_2_:6!null
 ├── left ordering: +1
 ├── right ordering: +8
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan person [as=person0_]
 │    ├── columns: id:1!null address:2 createdon:3 name:4 nickname:5 version:6!null
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-6)
 │    └── ordering: +1
 ├── select
 │    ├── columns: person_id:8!null addresses:9
 │    ├── ordering: +8
 │    ├── scan person_addresses [as=addresses1_]
 │    │    ├── columns: person_id:8!null addresses:9
 │    │    └── ordering: +8
 │    └── filters
 │         └── (addresses:9 = 'Home address') IS NOT false [outer=(9)]
 └── filters (true)

exec-ddl
drop table Phone, phone_call, Person, Phone_repairTimestamps, Person_addresses;
----

# ------------------------------------------------------------------------------
# Query #6
# ------------------------------------------------------------------------------
exec-ddl
create table EMPLOYEE (
   id int8 not null,
    email varchar(255),
    currentProject_id int8,
    primary key (id)
)
----

exec-ddl
create table Employee_phones (
   Employee_id int8 not null,
    phone_number varchar(255)
)
----

opt
select
    componenti0_.id as id1_0_,
    componenti0_.email as email2_0_,
    componenti0_.currentProject_id as currentP3_0_
from
    EMPLOYEE componenti0_
where
    (
        select
            count(phones1_.Employee_id)
        from
            Employee_phones phones1_
        where
            componenti0_.id=phones1_.Employee_id
    )=1
----
project
 ├── columns: id1_0_:1!null email2_0_:2 currentp3_0_:3
 ├── key: (1)
 ├── fd: (1)-->(2,3)
 └── select
      ├── columns: id:1!null email:2 currentproject_id:3 count:9!null
      ├── key: (1)
      ├── fd: ()-->(9), (1)-->(2,3)
      ├── group-by
      │    ├── columns: id:1!null email:2 currentproject_id:3 count:9!null
      │    ├── grouping columns: id:1!null
      │    ├── key: (1)
      │    ├── fd: (1)-->(2,3,9)
      │    ├── left-join (hash)
      │    │    ├── columns: id:1!null email:2 currentproject_id:3 employee_id:5
      │    │    ├── multiplicity: left-rows(one-or-more), right-rows(zero-or-one)
      │    │    ├── fd: (1)-->(2,3)
      │    │    ├── scan employee [as=componenti0_]
      │    │    │    ├── columns: id:1!null email:2 currentproject_id:3
      │    │    │    ├── key: (1)
      │    │    │    └── fd: (1)-->(2,3)
      │    │    ├── scan employee_phones [as=phones1_]
      │    │    │    └── columns: employee_id:5!null
      │    │    └── filters
      │    │         └── id:1 = employee_id:5 [outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ]), fd=(1)==(5), (5)==(1)]
      │    └── aggregations
      │         ├── count [as=count:9, outer=(5)]
      │         │    └── employee_id:5
      │         ├── const-agg [as=email:2, outer=(2)]
      │         │    └── email:2
      │         └── const-agg [as=currentproject_id:3, outer=(3)]
      │              └── currentproject_id:3
      └── filters
           └── count:9 = 1 [outer=(9), constraints=(/9: [/1 - /1]; tight), fd=()-->(9)]

exec-ddl
drop table EMPLOYEE, Employee_phones;
----

# ------------------------------------------------------------------------------
# Query #7
# ------------------------------------------------------------------------------
exec-ddl
create table Company (
   id int8 not null,
    location_id int8,
    primary key (id)
)
----

exec-ddl
create table Company_Employee (
   Company_id int8 not null,
    employees_id int8 not null,
    primary key (Company_id, employees_id)
)
----

exec-ddl
create table Employee (
   id int8 not null,
    primary key (id)
)
----

exec-ddl
create table Manager (
   id int8 not null,
    primary key (id)
)
----

exec-ddl
create table Location (
   id int8 not null,
    address varchar(255),
    zip int4 not null,
    primary key (id)
)
----

opt
select
    company0_.id as id1_0_0_,
    location3_.id as id1_8_1_,
    company0_.location_id as location2_0_0_,
    location3_.address as address2_8_1_,
    location3_.zip as zip3_8_1_
from
    Company company0_
left outer join
    Location location3_
        on company0_.location_id=location3_.id
where
    not (exists (select
        employee2_.id
    from
        Company_Employee employees1_,
        ( select
            id,
            0 as clazz_
        from
            Employee
        union
        all select
            id,
            1 as clazz_
        from
            Manager ) employee2_
    where
        company0_.id=employees1_.Company_id
        and employees1_.employees_id=employee2_.id))
----
right-join (hash)
 ├── columns: id1_0_0_:1!null id1_8_1_:4 location2_0_0_:2 address2_8_1_:5 zip3_8_1_:6
 ├── key: (1)
 ├── fd: (1)-->(2,4-6), (4)-->(5,6)
 ├── scan location [as=location3_]
 │    ├── columns: location3_.id:4!null address:5 zip:6!null
 │    ├── key: (4)
 │    └── fd: (4)-->(5,6)
 ├── anti-join (hash)
 │    ├── columns: company0_.id:1!null location_id:2
 │    ├── key: (1)
 │    ├── fd: (1)-->(2)
 │    ├── scan company [as=company0_]
 │    │    ├── columns: company0_.id:1!null location_id:2
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2)
 │    ├── inner-join (hash)
 │    │    ├── columns: company_id:8!null employees_id:9!null id:17!null
 │    │    ├── fd: (9)==(17), (17)==(9)
 │    │    ├── union-all
 │    │    │    ├── columns: id:17!null
 │    │    │    ├── left columns: employee.id:11
 │    │    │    ├── right columns: manager.id:14
 │    │    │    ├── scan employee
 │    │    │    │    ├── columns: employee.id:11!null
 │    │    │    │    └── key: (11)
 │    │    │    └── scan manager
 │    │    │         ├── columns: manager.id:14!null
 │    │    │         └── key: (14)
 │    │    ├── scan company_employee [as=employees1_]
 │    │    │    ├── columns: company_id:8!null employees_id:9!null
 │    │    │    └── key: (8,9)
 │    │    └── filters
 │    │         └── employees_id:9 = id:17 [outer=(9,17), constraints=(/9: (/NULL - ]; /17: (/NULL - ]), fd=(9)==(17), (17)==(9)]
 │    └── filters
 │         └── company0_.id:1 = company_id:8 [outer=(1,8), constraints=(/1: (/NULL - ]; /8: (/NULL - ]), fd=(1)==(8), (8)==(1)]
 └── filters
      └── location_id:2 = location3_.id:4 [outer=(2,4), constraints=(/2: (/NULL - ]; /4: (/NULL - ]), fd=(2)==(4), (4)==(2)]

exec-ddl
drop table Company, Company_Employee, Employee, Manager, Location;
----

# ------------------------------------------------------------------------------
# Query #8
#   org.hibernate.test.annotations.indexcoll.IndexedCollectionTest
#   testMapKeyOnManyToMany
# ------------------------------------------------------------------------------
exec-ddl
create table News (
   news_id int4 not null,
    detail varchar(255),
    title varchar(255),
    primary key (news_id)
)
----

exec-ddl
create table Newspaper (
   id int4 not null,
    name varchar(255),
    primary key (id)
)
----

exec-ddl
create table Newspaper_News (
   Newspaper_id int4 not null,
    news_news_id int4 not null,
    primary key (Newspaper_id, news_news_id)
)
----

opt
select
    news0_.Newspaper_id as Newspape1_23_0_,
    news0_.news_news_id as news_new2_23_0_,
    (select
        a0.title
    from
        News a0
    where
        a0.news_id=news0_.news_news_id) as formula140_0_,
    news1_.news_id as news_id1_21_1_,
    news1_.detail as detail2_21_1_,
    news1_.title as title3_21_1_
from
    Newspaper_News news0_
inner join
    News news1_
        on news0_.news_news_id=news1_.news_id
where
    news0_.Newspaper_id=1
----
project
 ├── columns: newspape1_23_0_:1!null news_new2_23_0_:2!null formula140_0_:12 news_id1_21_1_:4!null detail2_21_1_:5 title3_21_1_:6
 ├── key: (4)
 ├── fd: ()-->(1), (4)-->(5,6,12), (2)==(4), (4)==(2)
 ├── left-join (lookup news [as=a0])
 │    ├── columns: newspaper_id:1!null news_news_id:2!null news1_.news_id:4!null news1_.detail:5 news1_.title:6 a0.news_id:8 a0.title:10
 │    ├── key columns: [2] = [8]
 │    ├── lookup columns are key
 │    ├── key: (4)
 │    ├── fd: ()-->(1), (4)-->(5,6,8,10), (2)==(4), (4)==(2), (8)-->(10)
 │    ├── inner-join (lookup news [as=news1_])
 │    │    ├── columns: newspaper_id:1!null news_news_id:2!null news1_.news_id:4!null news1_.detail:5 news1_.title:6
 │    │    ├── key columns: [2] = [4]
 │    │    ├── lookup columns are key
 │    │    ├── key: (4)
 │    │    ├── fd: ()-->(1), (4)-->(5,6), (2)==(4), (4)==(2)
 │    │    ├── scan newspaper_news [as=news0_]
 │    │    │    ├── columns: newspaper_id:1!null news_news_id:2!null
 │    │    │    ├── constraint: /1/2: [/1 - /1]
 │    │    │    ├── key: (2)
 │    │    │    └── fd: ()-->(1)
 │    │    └── filters (true)
 │    └── filters (true)
 └── projections
      └── a0.title:10 [as=formula140_0_:12, outer=(10)]

exec-ddl
drop table News, Newspaper, Newspaper_News;
----

# ------------------------------------------------------------------------------
# Query #9
#   org.hibernate.test.annotations.indexcoll.MapKeyTest testMapKeyOnEmbeddedId
# ------------------------------------------------------------------------------
exec-ddl
create table GenerationGroup (
   id int4 not null,
    age varchar(255),
    culture varchar(255),
    description varchar(255),
    primary key (id)
)
----

exec-ddl
create table GenerationUser (
   id int4 not null,
    primary key (id)
)
----

exec-ddl
create table GenerationUser_GenerationGroup (
   GenerationUser_id int4 not null,
    ref_id int4 not null,
    primary key (GenerationUser_id, ref_id)
)
----

opt
SELECT ref0_.generationuser_id AS generati1_2_0_
      ,ref0_.ref_id AS ref_id2_2_0_
      ,(SELECT a13.age
        FROM generationgroup AS a13
        WHERE a13.id = ref0_.ref_id) AS formula131_0_
      ,(SELECT a15.culture
        FROM generationgroup AS a15
        WHERE a15.id = ref0_.ref_id) AS formula132_0_
      ,(SELECT a13.description
        FROM generationgroup AS a13
        WHERE a13.id = ref0_.ref_id) AS formula133_0_
      ,generation1_.id AS id1_0_1_
      ,generation1_.age AS age2_0_1_
      ,generation1_.culture AS culture3_0_1_
      ,generation1_.description AS descript4_0_1_
FROM generationuser_generationgroup AS ref0_
INNER JOIN generationgroup AS generation1_
  ON ref0_.ref_id = generation1_.id
WHERE ref0_.generationuser_id = 1;
----
project
 ├── columns: generati1_2_0_:1!null ref_id2_2_0_:2!null formula131_0_:24 formula132_0_:25 formula133_0_:26 id1_0_1_:4!null age2_0_1_:5 culture3_0_1_:6 descript4_0_1_:7
 ├── key: (4)
 ├── fd: ()-->(1), (4)-->(5-7,24-26), (2)==(4), (4)==(2)
 ├── left-join (lookup generationgroup [as=a13])
 │    ├── columns: generationuser_id:1!null ref_id:2!null generation1_.id:4!null generation1_.age:5 generation1_.culture:6 generation1_.description:7 a13.id:9 a13.age:10 a15.id:14 a15.culture:16 a13.id:19 a13.description:22
 │    ├── key columns: [2] = [19]
 │    ├── lookup columns are key
 │    ├── key: (4)
 │    ├── fd: ()-->(1), (4)-->(5-7,9,10,14,16,19,22), (2)==(4), (4)==(2), (9)-->(10), (14)-->(16), (19)-->(22)
 │    ├── left-join (lookup generationgroup [as=a15])
 │    │    ├── columns: generationuser_id:1!null ref_id:2!null generation1_.id:4!null generation1_.age:5 generation1_.culture:6 generation1_.description:7 a13.id:9 a13.age:10 a15.id:14 a15.culture:16
 │    │    ├── key columns: [2] = [14]
 │    │    ├── lookup columns are key
 │    │    ├── key: (4)
 │    │    ├── fd: ()-->(1), (4)-->(5-7,9,10,14,16), (2)==(4), (4)==(2), (9)-->(10), (14)-->(16)
 │    │    ├── left-join (lookup generationgroup [as=a13])
 │    │    │    ├── columns: generationuser_id:1!null ref_id:2!null generation1_.id:4!null generation1_.age:5 generation1_.culture:6 generation1_.description:7 a13.id:9 a13.age:10
 │    │    │    ├── key columns: [2] = [9]
 │    │    │    ├── lookup columns are key
 │    │    │    ├── key: (4)
 │    │    │    ├── fd: ()-->(1), (4)-->(5-7,9,10), (2)==(4), (4)==(2), (9)-->(10)
 │    │    │    ├── inner-join (lookup generationgroup [as=generation1_])
 │    │    │    │    ├── columns: generationuser_id:1!null ref_id:2!null generation1_.id:4!null generation1_.age:5 generation1_.culture:6 generation1_.description:7
 │    │    │    │    ├── key columns: [2] = [4]
 │    │    │    │    ├── lookup columns are key
 │    │    │    │    ├── key: (4)
 │    │    │    │    ├── fd: ()-->(1), (4)-->(5-7), (2)==(4), (4)==(2)
 │    │    │    │    ├── scan generationuser_generationgroup [as=ref0_]
 │    │    │    │    │    ├── columns: generationuser_id:1!null ref_id:2!null
 │    │    │    │    │    ├── constraint: /1/2: [/1 - /1]
 │    │    │    │    │    ├── key: (2)
 │    │    │    │    │    └── fd: ()-->(1)
 │    │    │    │    └── filters (true)
 │    │    │    └── filters (true)
 │    │    └── filters (true)
 │    └── filters (true)
 └── projections
      ├── a13.age:10 [as=formula131_0_:24, outer=(10)]
      ├── a15.culture:16 [as=formula132_0_:25, outer=(16)]
      └── a13.description:22 [as=formula133_0_:26, outer=(22)]

exec-ddl
drop table GenerationGroup, GenerationUser, GenerationUser_GenerationGroup;
----

# ------------------------------------------------------------------------------
# Query #10
#   org.hibernate.test.bidi.AuctionTest2 testLazy
# ------------------------------------------------------------------------------
exec-ddl
create table TAuction2 (
   id int8 not null,
    description varchar(255),
    endDatetime timestamp,
    successfulBid int8,
    primary key (id)
)
----

exec-ddl
create table TBid2 (
   id int8 not null,
    amount numeric(31, 19),
    createdDatetime timestamp,
    auctionId int8,
    primary key (id)
)
----

opt
select
    bids0_.auctionId as auctionI4_1_0_,
    bids0_.id as id1_1_0_,
    bids0_.id as id1_1_1_,
    bids0_.amount as amount2_1_1_,
    bids0_.createdDatetime as createdD3_1_1_,
    bids0_.auctionId as auctionI4_1_1_,
    exists(select
        a.id
    from
        TAuction2 a
    where
        a.successfulBid=bids0_.id) as formula41_1_
from
    TBid2 bids0_
where
    bids0_.auctionId=$1
----
project
 ├── columns: auctioni4_1_0_:4!null id1_1_0_:1!null id1_1_1_:1!null amount2_1_1_:2 createdd3_1_1_:3 auctioni4_1_1_:4!null formula41_1_:11!null
 ├── has-placeholder
 ├── key: (1)
 ├── fd: (1)-->(2-4,11)
 ├── group-by
 │    ├── columns: bids0_.id:1!null amount:2 createddatetime:3 auctionid:4!null true_agg:13
 │    ├── grouping columns: bids0_.id:1!null
 │    ├── has-placeholder
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4,13)
 │    ├── right-join (hash)
 │    │    ├── columns: bids0_.id:1!null amount:2 createddatetime:3 auctionid:4!null successfulbid:9 true:12
 │    │    ├── has-placeholder
 │    │    ├── fd: (1)-->(2-4)
 │    │    ├── project
 │    │    │    ├── columns: true:12!null successfulbid:9
 │    │    │    ├── fd: ()-->(12)
 │    │    │    ├── scan tauction2 [as=a]
 │    │    │    │    └── columns: successfulbid:9
 │    │    │    └── projections
 │    │    │         └── true [as=true:12]
 │    │    ├── select
 │    │    │    ├── columns: bids0_.id:1!null amount:2 createddatetime:3 auctionid:4!null
 │    │    │    ├── has-placeholder
 │    │    │    ├── key: (1)
 │    │    │    ├── fd: (1)-->(2-4)
 │    │    │    ├── scan tbid2 [as=bids0_]
 │    │    │    │    ├── columns: bids0_.id:1!null amount:2 createddatetime:3 auctionid:4
 │    │    │    │    ├── key: (1)
 │    │    │    │    └── fd: (1)-->(2-4)
 │    │    │    └── filters
 │    │    │         └── auctionid:4 = $1 [outer=(4), constraints=(/4: (/NULL - ])]
 │    │    └── filters
 │    │         └── successfulbid:9 = bids0_.id:1 [outer=(1,9), constraints=(/1: (/NULL - ]; /9: (/NULL - ]), fd=(1)==(9), (9)==(1)]
 │    └── aggregations
 │         ├── const-not-null-agg [as=true_agg:13, outer=(12)]
 │         │    └── true:12
 │         ├── const-agg [as=amount:2, outer=(2)]
 │         │    └── amount:2
 │         ├── const-agg [as=createddatetime:3, outer=(3)]
 │         │    └── createddatetime:3
 │         └── const-agg [as=auctionid:4, outer=(4)]
 │              └── auctionid:4
 └── projections
      └── true_agg:13 IS NOT NULL [as=formula41_1_:11, outer=(13)]

exec-ddl
drop table TAuction2, TBid2;
----

# ------------------------------------------------------------------------------
# Query #11
#   org.hibernate.test.cid.CompositeIdTest
# ------------------------------------------------------------------------------
exec-ddl
CREATE TABLE customer (
  customerid VARCHAR(10) NOT NULL,
  name VARCHAR(100) NOT NULL,
  address VARCHAR(200) NOT NULL,
  PRIMARY KEY (customerid)
);
----

exec-ddl
CREATE TABLE customerorder (
  customerid VARCHAR(10) NOT NULL,
  ordernumber INT4 NOT NULL,
  orderdate DATE NOT NULL,
  PRIMARY KEY (customerid, ordernumber)
);
----

exec-ddl
CREATE TABLE lineitem (
  customerid VARCHAR(10) NOT NULL,
  ordernumber INT4 NOT NULL,
  productid VARCHAR(10) NOT NULL,
  quantity INT4,
  PRIMARY KEY (customerid, ordernumber, productid)
);
----

exec-ddl
CREATE TABLE product (
  productid VARCHAR(10) NOT NULL,
  description VARCHAR(200) NOT NULL,
  cost NUMERIC(19,2),
  numberavailable INT4,
  PRIMARY KEY (productid)
);
----

opt
SELECT
  order0_.customerid AS customer1_1_0_,
  order0_.ordernumber AS ordernum2_1_0_,
  order0_.orderdate AS orderdat3_1_0_,
  (
    SELECT
      sum(li.quantity * p.cost)
    FROM
      lineitem AS li, product AS p
    WHERE
      li.productid = p.productid
      AND li.customerid = order0_.customerid
      AND li.ordernumber = order0_.ordernumber
  )
    AS formula101_0_,
  lineitems1_.customerid AS customer1_2_1_,
  lineitems1_.ordernumber AS ordernum2_2_1_,
  lineitems1_.productid AS producti3_2_1_,
  lineitems1_.customerid AS customer1_2_2_,
  lineitems1_.ordernumber AS ordernum2_2_2_,
  lineitems1_.productid AS producti3_2_2_,
  lineitems1_.quantity AS quantity4_2_2_
FROM
  customerorder AS order0_
  LEFT JOIN lineitem AS lineitems1_
  ON
    order0_.customerid = lineitems1_.customerid
    AND order0_.ordernumber = lineitems1_.ordernumber
WHERE
  order0_.customerid = 'c111' AND order0_.ordernumber = 0;
----
project
 ├── columns: customer1_1_0_:1!null ordernum2_1_0_:2!null orderdat3_1_0_:3!null formula101_0_:22 customer1_2_1_:5 ordernum2_2_1_:6 producti3_2_1_:7 customer1_2_2_:5 ordernum2_2_2_:6 producti3_2_2_:7 quantity4_2_2_:8
 ├── immutable
 ├── key: (7)
 ├── fd: ()-->(1-3), (7)-->(5,6,8,22)
 ├── group-by
 │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null lineitems1_.customerid:5 lineitems1_.ordernumber:6 lineitems1_.productid:7 lineitems1_.quantity:8 sum:21
 │    ├── grouping columns: lineitems1_.productid:7
 │    ├── immutable
 │    ├── key: (7)
 │    ├── fd: ()-->(1-3), (7)-->(1-3,5,6,8,21)
 │    ├── right-join (hash)
 │    │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null lineitems1_.customerid:5 lineitems1_.ordernumber:6 lineitems1_.productid:7 lineitems1_.quantity:8 li.customerid:10 li.ordernumber:11 column20:20
 │    │    ├── immutable
 │    │    ├── fd: ()-->(1-3), (7)-->(5,6,8)
 │    │    ├── project
 │    │    │    ├── columns: column20:20 li.customerid:10!null li.ordernumber:11!null
 │    │    │    ├── immutable
 │    │    │    ├── inner-join (hash)
 │    │    │    │    ├── columns: li.customerid:10!null li.ordernumber:11!null li.productid:12!null li.quantity:13 p.productid:15!null cost:17
 │    │    │    │    ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │    │    │    │    ├── key: (10,11,15)
 │    │    │    │    ├── fd: (10-12)-->(13), (15)-->(17), (12)==(15), (15)==(12)
 │    │    │    │    ├── scan lineitem [as=li]
 │    │    │    │    │    ├── columns: li.customerid:10!null li.ordernumber:11!null li.productid:12!null li.quantity:13
 │    │    │    │    │    ├── key: (10-12)
 │    │    │    │    │    └── fd: (10-12)-->(13)
 │    │    │    │    ├── scan product [as=p]
 │    │    │    │    │    ├── columns: p.productid:15!null cost:17
 │    │    │    │    │    ├── key: (15)
 │    │    │    │    │    └── fd: (15)-->(17)
 │    │    │    │    └── filters
 │    │    │    │         └── li.productid:12 = p.productid:15 [outer=(12,15), constraints=(/12: (/NULL - ]; /15: (/NULL - ]), fd=(12)==(15), (15)==(12)]
 │    │    │    └── projections
 │    │    │         └── li.quantity:13::INT8 * cost:17::DECIMAL [as=column20:20, outer=(13,17), immutable]
 │    │    ├── left-join (merge)
 │    │    │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null lineitems1_.customerid:5 lineitems1_.ordernumber:6 lineitems1_.productid:7 lineitems1_.quantity:8
 │    │    │    ├── left ordering: +1,+2
 │    │    │    ├── right ordering: +5,+6
 │    │    │    ├── key: (7)
 │    │    │    ├── fd: ()-->(1-3), (7)-->(5,6,8)
 │    │    │    ├── scan customerorder [as=order0_]
 │    │    │    │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null
 │    │    │    │    ├── constraint: /1/2: [/'c111'/0 - /'c111'/0]
 │    │    │    │    ├── cardinality: [0 - 1]
 │    │    │    │    ├── key: ()
 │    │    │    │    └── fd: ()-->(1-3)
 │    │    │    ├── scan lineitem [as=lineitems1_]
 │    │    │    │    ├── columns: lineitems1_.customerid:5!null lineitems1_.ordernumber:6!null lineitems1_.productid:7!null lineitems1_.quantity:8
 │    │    │    │    ├── constraint: /5/6/7: [/'c111'/0 - /'c111'/0]
 │    │    │    │    ├── key: (7)
 │    │    │    │    └── fd: ()-->(5,6), (7)-->(8)
 │    │    │    └── filters (true)
 │    │    └── filters
 │    │         ├── li.customerid:10 = order0_.customerid:1 [outer=(1,10), constraints=(/1: (/NULL - ]; /10: (/NULL - ]), fd=(1)==(10), (10)==(1)]
 │    │         └── li.ordernumber:11 = order0_.ordernumber:2 [outer=(2,11), constraints=(/2: (/NULL - ]; /11: (/NULL - ]), fd=(2)==(11), (11)==(2)]
 │    └── aggregations
 │         ├── sum [as=sum:21, outer=(20)]
 │         │    └── column20:20
 │         ├── const-agg [as=order0_.customerid:1, outer=(1)]
 │         │    └── order0_.customerid:1
 │         ├── const-agg [as=order0_.ordernumber:2, outer=(2)]
 │         │    └── order0_.ordernumber:2
 │         ├── const-agg [as=orderdate:3, outer=(3)]
 │         │    └── orderdate:3
 │         ├── const-agg [as=lineitems1_.customerid:5, outer=(5)]
 │         │    └── lineitems1_.customerid:5
 │         ├── const-agg [as=lineitems1_.ordernumber:6, outer=(6)]
 │         │    └── lineitems1_.ordernumber:6
 │         └── const-agg [as=lineitems1_.quantity:8, outer=(8)]
 │              └── lineitems1_.quantity:8
 └── projections
      └── sum:21 [as=formula101_0_:22, outer=(21)]

opt
SELECT
  customer0_.customerid AS customer1_0_0_,
  orders1_.customerid AS customer1_1_1_,
  orders1_.ordernumber AS ordernum2_1_1_,
  lineitems2_.customerid AS customer1_2_2_,
  lineitems2_.ordernumber AS ordernum2_2_2_,
  lineitems2_.productid AS producti3_2_2_,
  product3_.productid AS producti1_3_3_,
  customer0_.name AS name2_0_0_,
  customer0_.address AS address3_0_0_,
  orders1_.orderdate AS orderdat3_1_1_,
  (
    SELECT
      sum(li.quantity * p.cost)
    FROM
      lineitem AS li, product AS p
    WHERE
      li.productid = p.productid
      AND li.customerid = orders1_.customerid
      AND li.ordernumber = orders1_.ordernumber
  )
    AS formula103_1_,
  orders1_.customerid AS customer1_1_0__,
  orders1_.ordernumber AS ordernum2_1_0__,
  orders1_.ordernumber AS ordernum2_0__,
  lineitems2_.quantity AS quantity4_2_2_,
  lineitems2_.customerid AS customer1_2_1__,
  lineitems2_.ordernumber AS ordernum2_2_1__,
  lineitems2_.productid AS producti3_2_1__,
  product3_.description AS descript2_3_3_,
  product3_.cost AS cost3_3_3_,
  product3_.numberavailable AS numberav4_3_3_,
  (
    SELECT
      sum(li.quantity)
    FROM
      lineitem AS li
    WHERE
      li.productid = product3_.productid
  )
    AS formula104_3_
FROM
  customer AS customer0_
  LEFT JOIN customerorder AS orders1_
  ON customer0_.customerid = orders1_.customerid
  LEFT JOIN lineitem AS lineitems2_
  ON
    orders1_.customerid = lineitems2_.customerid
    AND orders1_.ordernumber = lineitems2_.ordernumber
  LEFT JOIN product AS product3_ ON lineitems2_.productid = product3_.productid;
----
project
 ├── columns: customer1_0_0_:1!null customer1_1_1_:5 ordernum2_1_1_:6 customer1_2_2_:9 ordernum2_2_2_:10 producti3_2_2_:11 producti1_3_3_:14 name2_0_0_:2!null address3_0_0_:3!null orderdat3_1_1_:7 formula103_1_:37 customer1_1_0__:5 ordernum2_1_0__:6 ordernum2_0__:6 quantity4_2_2_:12 customer1_2_1__:9 ordernum2_2_1__:10 producti3_2_1__:11 descript2_3_3_:15 cost3_3_3_:16 numberav4_3_3_:17 formula104_3_:38
 ├── immutable
 ├── key: (1,5,6,9-11)
 ├── fd: (1)-->(2,3), (5,6)-->(7), (9-11)-->(12), (14)-->(15-17), (1,5,6,9-11)-->(2,3,7,12,14-17,37,38)
 ├── group-by
 │    ├── columns: customer0_.customerid:1!null name:2!null address:3!null orders1_.customerid:5 orders1_.ordernumber:6 orderdate:7 lineitems2_.customerid:9 lineitems2_.ordernumber:10 lineitems2_.productid:11 lineitems2_.quantity:12 product3_.productid:14 product3_.description:15 product3_.cost:16 product3_.numberavailable:17 sum:30 sum:36
 │    ├── grouping columns: customer0_.customerid:1!null orders1_.customerid:5 orders1_.ordernumber:6 lineitems2_.customerid:9 lineitems2_.ordernumber:10 lineitems2_.productid:11
 │    ├── immutable
 │    ├── key: (1,5,6,9-11)
 │    ├── fd: (1)-->(2,3), (5,6)-->(7), (9-11)-->(12), (14)-->(15-17), (1,5,6,9-11)-->(2,3,7,12,14-17,30,36)
 │    ├── left-join (hash)
 │    │    ├── columns: customer0_.customerid:1!null name:2!null address:3!null orders1_.customerid:5 orders1_.ordernumber:6 orderdate:7 lineitems2_.customerid:9 lineitems2_.ordernumber:10 lineitems2_.productid:11 lineitems2_.quantity:12 product3_.productid:14 product3_.description:15 product3_.cost:16 product3_.numberavailable:17 sum:30 li.productid:33 li.quantity:34
 │    │    ├── immutable
 │    │    ├── fd: (1)-->(2,3), (5,6)-->(7), (9-11)-->(12), (14)-->(15-17), (1,5,6,9-11)-->(2,3,7,12,14-17,30)
 │    │    ├── group-by
 │    │    │    ├── columns: customer0_.customerid:1!null name:2!null address:3!null orders1_.customerid:5 orders1_.ordernumber:6 orderdate:7 lineitems2_.customerid:9 lineitems2_.ordernumber:10 lineitems2_.productid:11 lineitems2_.quantity:12 product3_.productid:14 product3_.description:15 product3_.cost:16 product3_.numberavailable:17 sum:30
 │    │    │    ├── grouping columns: customer0_.customerid:1!null orders1_.customerid:5 orders1_.ordernumber:6 lineitems2_.customerid:9 lineitems2_.ordernumber:10 lineitems2_.productid:11
 │    │    │    ├── immutable
 │    │    │    ├── key: (1,5,6,9-11)
 │    │    │    ├── fd: (1)-->(2,3), (5,6)-->(7), (9-11)-->(12), (14)-->(15-17), (1,5,6,9-11)-->(2,3,7,12,14-17,30)
 │    │    │    ├── left-join (hash)
 │    │    │    │    ├── columns: customer0_.customerid:1!null name:2!null address:3!null orders1_.customerid:5 orders1_.ordernumber:6 orderdate:7 lineitems2_.customerid:9 lineitems2_.ordernumber:10 lineitems2_.productid:11 lineitems2_.quantity:12 product3_.productid:14 product3_.description:15 product3_.cost:16 product3_.numberavailable:17 li.customerid:19 li.ordernumber:20 column29:29
 │    │    │    │    ├── immutable
 │    │    │    │    ├── fd: (1)-->(2,3), (5,6)-->(7), (9-11)-->(12), (14)-->(15-17), (1,5,6,9-11)-->(14-17)
 │    │    │    │    ├── left-join (hash)
 │    │    │    │    │    ├── columns: customer0_.customerid:1!null name:2!null address:3!null orders1_.customerid:5 orders1_.ordernumber:6 orderdate:7 lineitems2_.customerid:9 lineitems2_.ordernumber:10 lineitems2_.productid:11 lineitems2_.quantity:12 product3_.productid:14 product3_.description:15 product3_.cost:16 product3_.numberavailable:17
 │    │    │    │    │    ├── multiplicity: left-rows(exactly-one), right-rows(zero-or-more)
 │    │    │    │    │    ├── key: (1,5,6,9-11)
 │    │    │    │    │    ├── fd: (1)-->(2,3), (5,6)-->(7), (9-11)-->(12), (14)-->(15-17), (1,5,6,9-11)-->(14-17)
 │    │    │    │    │    ├── left-join (merge)
 │    │    │    │    │    │    ├── columns: customer0_.customerid:1!null name:2!null address:3!null orders1_.customerid:5 orders1_.ordernumber:6 orderdate:7 lineitems2_.customerid:9 lineitems2_.ordernumber:10 lineitems2_.productid:11 lineitems2_.quantity:12
 │    │    │    │    │    │    ├── left ordering: +1
 │    │    │    │    │    │    ├── right ordering: +5
 │    │    │    │    │    │    ├── key: (1,5,6,9-11)
 │    │    │    │    │    │    ├── fd: (1)-->(2,3), (5,6)-->(7), (9-11)-->(12)
 │    │    │    │    │    │    ├── scan customer [as=customer0_]
 │    │    │    │    │    │    │    ├── columns: customer0_.customerid:1!null name:2!null address:3!null
 │    │    │    │    │    │    │    ├── key: (1)
 │    │    │    │    │    │    │    ├── fd: (1)-->(2,3)
 │    │    │    │    │    │    │    └── ordering: +1
 │    │    │    │    │    │    ├── left-join (merge)
 │    │    │    │    │    │    │    ├── columns: orders1_.customerid:5!null orders1_.ordernumber:6!null orderdate:7!null lineitems2_.customerid:9 lineitems2_.ordernumber:10 lineitems2_.productid:11 lineitems2_.quantity:12
 │    │    │    │    │    │    │    ├── left ordering: +5,+6
 │    │    │    │    │    │    │    ├── right ordering: +9,+10
 │    │    │    │    │    │    │    ├── key: (5,6,9-11)
 │    │    │    │    │    │    │    ├── fd: (5,6)-->(7), (9-11)-->(12)
 │    │    │    │    │    │    │    ├── ordering: +5
 │    │    │    │    │    │    │    ├── scan customerorder [as=orders1_]
 │    │    │    │    │    │    │    │    ├── columns: orders1_.customerid:5!null orders1_.ordernumber:6!null orderdate:7!null
 │    │    │    │    │    │    │    │    ├── key: (5,6)
 │    │    │    │    │    │    │    │    ├── fd: (5,6)-->(7)
 │    │    │    │    │    │    │    │    └── ordering: +5,+6
 │    │    │    │    │    │    │    ├── scan lineitem [as=lineitems2_]
 │    │    │    │    │    │    │    │    ├── columns: lineitems2_.customerid:9!null lineitems2_.ordernumber:10!null lineitems2_.productid:11!null lineitems2_.quantity:12
 │    │    │    │    │    │    │    │    ├── key: (9-11)
 │    │    │    │    │    │    │    │    ├── fd: (9-11)-->(12)
 │    │    │    │    │    │    │    │    └── ordering: +9,+10
 │    │    │    │    │    │    │    └── filters (true)
 │    │    │    │    │    │    └── filters (true)
 │    │    │    │    │    ├── scan product [as=product3_]
 │    │    │    │    │    │    ├── columns: product3_.productid:14!null product3_.description:15!null product3_.cost:16 product3_.numberavailable:17
 │    │    │    │    │    │    ├── key: (14)
 │    │    │    │    │    │    └── fd: (14)-->(15-17)
 │    │    │    │    │    └── filters
 │    │    │    │    │         └── lineitems2_.productid:11 = product3_.productid:14 [outer=(11,14), constraints=(/11: (/NULL - ]; /14: (/NULL - ]), fd=(11)==(14), (14)==(11)]
 │    │    │    │    ├── project
 │    │    │    │    │    ├── columns: column29:29 li.customerid:19!null li.ordernumber:20!null
 │    │    │    │    │    ├── immutable
 │    │    │    │    │    ├── inner-join (hash)
 │    │    │    │    │    │    ├── columns: li.customerid:19!null li.ordernumber:20!null li.productid:21!null li.quantity:22 p.productid:24!null p.cost:26
 │    │    │    │    │    │    ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │    │    │    │    │    │    ├── key: (19,20,24)
 │    │    │    │    │    │    ├── fd: (19-21)-->(22), (24)-->(26), (21)==(24), (24)==(21)
 │    │    │    │    │    │    ├── scan lineitem [as=li]
 │    │    │    │    │    │    │    ├── columns: li.customerid:19!null li.ordernumber:20!null li.productid:21!null li.quantity:22
 │    │    │    │    │    │    │    ├── key: (19-21)
 │    │    │    │    │    │    │    └── fd: (19-21)-->(22)
 │    │    │    │    │    │    ├── scan product [as=p]
 │    │    │    │    │    │    │    ├── columns: p.productid:24!null p.cost:26
 │    │    │    │    │    │    │    ├── key: (24)
 │    │    │    │    │    │    │    └── fd: (24)-->(26)
 │    │    │    │    │    │    └── filters
 │    │    │    │    │    │         └── li.productid:21 = p.productid:24 [outer=(21,24), constraints=(/21: (/NULL - ]; /24: (/NULL - ]), fd=(21)==(24), (24)==(21)]
 │    │    │    │    │    └── projections
 │    │    │    │    │         └── li.quantity:22::INT8 * p.cost:26::DECIMAL [as=column29:29, outer=(22,26), immutable]
 │    │    │    │    └── filters
 │    │    │    │         ├── li.customerid:19 = orders1_.customerid:5 [outer=(5,19), constraints=(/5: (/NULL - ]; /19: (/NULL - ]), fd=(5)==(19), (19)==(5)]
 │    │    │    │         └── li.ordernumber:20 = orders1_.ordernumber:6 [outer=(6,20), constraints=(/6: (/NULL - ]; /20: (/NULL - ]), fd=(6)==(20), (20)==(6)]
 │    │    │    └── aggregations
 │    │    │         ├── sum [as=sum:30, outer=(29)]
 │    │    │         │    └── column29:29
 │    │    │         ├── const-agg [as=name:2, outer=(2)]
 │    │    │         │    └── name:2
 │    │    │         ├── const-agg [as=address:3, outer=(3)]
 │    │    │         │    └── address:3
 │    │    │         ├── const-agg [as=orderdate:7, outer=(7)]
 │    │    │         │    └── orderdate:7
 │    │    │         ├── const-agg [as=lineitems2_.quantity:12, outer=(12)]
 │    │    │         │    └── lineitems2_.quantity:12
 │    │    │         ├── const-agg [as=product3_.productid:14, outer=(14)]
 │    │    │         │    └── product3_.productid:14
 │    │    │         ├── const-agg [as=product3_.description:15, outer=(15)]
 │    │    │         │    └── product3_.description:15
 │    │    │         ├── const-agg [as=product3_.cost:16, outer=(16)]
 │    │    │         │    └── product3_.cost:16
 │    │    │         └── const-agg [as=product3_.numberavailable:17, outer=(17)]
 │    │    │              └── product3_.numberavailable:17
 │    │    ├── scan lineitem [as=li]
 │    │    │    └── columns: li.productid:33!null li.quantity:34
 │    │    └── filters
 │    │         └── li.productid:33 = product3_.productid:14 [outer=(14,33), constraints=(/14: (/NULL - ]; /33: (/NULL - ]), fd=(14)==(33), (33)==(14)]
 │    └── aggregations
 │         ├── sum [as=sum:36, outer=(34)]
 │         │    └── li.quantity:34
 │         ├── const-agg [as=name:2, outer=(2)]
 │         │    └── name:2
 │         ├── const-agg [as=address:3, outer=(3)]
 │         │    └── address:3
 │         ├── const-agg [as=orderdate:7, outer=(7)]
 │         │    └── orderdate:7
 │         ├── const-agg [as=lineitems2_.quantity:12, outer=(12)]
 │         │    └── lineitems2_.quantity:12
 │         ├── const-agg [as=product3_.productid:14, outer=(14)]
 │         │    └── product3_.productid:14
 │         ├── const-agg [as=product3_.description:15, outer=(15)]
 │         │    └── product3_.description:15
 │         ├── const-agg [as=product3_.cost:16, outer=(16)]
 │         │    └── product3_.cost:16
 │         ├── const-agg [as=product3_.numberavailable:17, outer=(17)]
 │         │    └── product3_.numberavailable:17
 │         └── const-agg [as=sum:30, outer=(30)]
 │              └── sum:30
 └── projections
      ├── sum:30 [as=formula103_1_:37, outer=(30)]
      └── sum:36 [as=formula104_3_:38, outer=(36)]

opt
SELECT
  order0_.customerid AS customer1_1_0_,
  order0_.ordernumber AS ordernum2_1_0_,
  order0_.orderdate AS orderdat3_1_0_,
  (
    SELECT
      sum(li.quantity * p.cost)
    FROM
      lineitem AS li, product AS p
    WHERE
      li.productid = p.productid
      AND li.customerid = order0_.customerid
      AND li.ordernumber = order0_.ordernumber
  )
    AS formula105_0_,
  lineitems1_.customerid AS customer1_2_1_,
  lineitems1_.ordernumber AS ordernum2_2_1_,
  lineitems1_.productid AS producti3_2_1_,
  lineitems1_.customerid AS customer1_2_2_,
  lineitems1_.ordernumber AS ordernum2_2_2_,
  lineitems1_.productid AS producti3_2_2_,
  lineitems1_.quantity AS quantity4_2_2_
FROM
  customerorder AS order0_
  LEFT JOIN lineitem AS lineitems1_
  ON
    order0_.customerid = lineitems1_.customerid
    AND order0_.ordernumber = lineitems1_.ordernumber
WHERE
  order0_.customerid = 'c111' AND order0_.ordernumber = 0;
----
project
 ├── columns: customer1_1_0_:1!null ordernum2_1_0_:2!null orderdat3_1_0_:3!null formula105_0_:22 customer1_2_1_:5 ordernum2_2_1_:6 producti3_2_1_:7 customer1_2_2_:5 ordernum2_2_2_:6 producti3_2_2_:7 quantity4_2_2_:8
 ├── immutable
 ├── key: (7)
 ├── fd: ()-->(1-3), (7)-->(5,6,8,22)
 ├── group-by
 │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null lineitems1_.customerid:5 lineitems1_.ordernumber:6 lineitems1_.productid:7 lineitems1_.quantity:8 sum:21
 │    ├── grouping columns: lineitems1_.productid:7
 │    ├── immutable
 │    ├── key: (7)
 │    ├── fd: ()-->(1-3), (7)-->(1-3,5,6,8,21)
 │    ├── right-join (hash)
 │    │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null lineitems1_.customerid:5 lineitems1_.ordernumber:6 lineitems1_.productid:7 lineitems1_.quantity:8 li.customerid:10 li.ordernumber:11 column20:20
 │    │    ├── immutable
 │    │    ├── fd: ()-->(1-3), (7)-->(5,6,8)
 │    │    ├── project
 │    │    │    ├── columns: column20:20 li.customerid:10!null li.ordernumber:11!null
 │    │    │    ├── immutable
 │    │    │    ├── inner-join (hash)
 │    │    │    │    ├── columns: li.customerid:10!null li.ordernumber:11!null li.productid:12!null li.quantity:13 p.productid:15!null cost:17
 │    │    │    │    ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │    │    │    │    ├── key: (10,11,15)
 │    │    │    │    ├── fd: (10-12)-->(13), (15)-->(17), (12)==(15), (15)==(12)
 │    │    │    │    ├── scan lineitem [as=li]
 │    │    │    │    │    ├── columns: li.customerid:10!null li.ordernumber:11!null li.productid:12!null li.quantity:13
 │    │    │    │    │    ├── key: (10-12)
 │    │    │    │    │    └── fd: (10-12)-->(13)
 │    │    │    │    ├── scan product [as=p]
 │    │    │    │    │    ├── columns: p.productid:15!null cost:17
 │    │    │    │    │    ├── key: (15)
 │    │    │    │    │    └── fd: (15)-->(17)
 │    │    │    │    └── filters
 │    │    │    │         └── li.productid:12 = p.productid:15 [outer=(12,15), constraints=(/12: (/NULL - ]; /15: (/NULL - ]), fd=(12)==(15), (15)==(12)]
 │    │    │    └── projections
 │    │    │         └── li.quantity:13::INT8 * cost:17::DECIMAL [as=column20:20, outer=(13,17), immutable]
 │    │    ├── left-join (merge)
 │    │    │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null lineitems1_.customerid:5 lineitems1_.ordernumber:6 lineitems1_.productid:7 lineitems1_.quantity:8
 │    │    │    ├── left ordering: +1,+2
 │    │    │    ├── right ordering: +5,+6
 │    │    │    ├── key: (7)
 │    │    │    ├── fd: ()-->(1-3), (7)-->(5,6,8)
 │    │    │    ├── scan customerorder [as=order0_]
 │    │    │    │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null
 │    │    │    │    ├── constraint: /1/2: [/'c111'/0 - /'c111'/0]
 │    │    │    │    ├── cardinality: [0 - 1]
 │    │    │    │    ├── key: ()
 │    │    │    │    └── fd: ()-->(1-3)
 │    │    │    ├── scan lineitem [as=lineitems1_]
 │    │    │    │    ├── columns: lineitems1_.customerid:5!null lineitems1_.ordernumber:6!null lineitems1_.productid:7!null lineitems1_.quantity:8
 │    │    │    │    ├── constraint: /5/6/7: [/'c111'/0 - /'c111'/0]
 │    │    │    │    ├── key: (7)
 │    │    │    │    └── fd: ()-->(5,6), (7)-->(8)
 │    │    │    └── filters (true)
 │    │    └── filters
 │    │         ├── li.customerid:10 = order0_.customerid:1 [outer=(1,10), constraints=(/1: (/NULL - ]; /10: (/NULL - ]), fd=(1)==(10), (10)==(1)]
 │    │         └── li.ordernumber:11 = order0_.ordernumber:2 [outer=(2,11), constraints=(/2: (/NULL - ]; /11: (/NULL - ]), fd=(2)==(11), (11)==(2)]
 │    └── aggregations
 │         ├── sum [as=sum:21, outer=(20)]
 │         │    └── column20:20
 │         ├── const-agg [as=order0_.customerid:1, outer=(1)]
 │         │    └── order0_.customerid:1
 │         ├── const-agg [as=order0_.ordernumber:2, outer=(2)]
 │         │    └── order0_.ordernumber:2
 │         ├── const-agg [as=orderdate:3, outer=(3)]
 │         │    └── orderdate:3
 │         ├── const-agg [as=lineitems1_.customerid:5, outer=(5)]
 │         │    └── lineitems1_.customerid:5
 │         ├── const-agg [as=lineitems1_.ordernumber:6, outer=(6)]
 │         │    └── lineitems1_.ordernumber:6
 │         └── const-agg [as=lineitems1_.quantity:8, outer=(8)]
 │              └── lineitems1_.quantity:8
 └── projections
      └── sum:21 [as=formula105_0_:22, outer=(21)]

opt
SELECT
  order0_.customerid AS customer1_10_,
  order0_.ordernumber AS ordernum2_10_,
  order0_.orderdate AS orderdat3_10_,
  (
    SELECT
      sum(li.quantity * p.cost)
    FROM
      lineitem AS li, product AS p
    WHERE
      li.productid = p.productid
      AND li.customerid = order0_.customerid
      AND li.ordernumber = order0_.ordernumber
  )
    AS formula273_
FROM
  customerorder AS order0_;
----
project
 ├── columns: customer1_10_:1!null ordernum2_10_:2!null orderdat3_10_:3!null formula273_:17
 ├── immutable
 ├── key: (1,2)
 ├── fd: (1,2)-->(3,17)
 ├── group-by
 │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null sum:16
 │    ├── grouping columns: order0_.customerid:1!null order0_.ordernumber:2!null
 │    ├── immutable
 │    ├── key: (1,2)
 │    ├── fd: (1,2)-->(3,16)
 │    ├── left-join (hash)
 │    │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null li.customerid:5 li.ordernumber:6 column15:15
 │    │    ├── multiplicity: left-rows(one-or-more), right-rows(zero-or-one)
 │    │    ├── immutable
 │    │    ├── fd: (1,2)-->(3)
 │    │    ├── scan customerorder [as=order0_]
 │    │    │    ├── columns: order0_.customerid:1!null order0_.ordernumber:2!null orderdate:3!null
 │    │    │    ├── key: (1,2)
 │    │    │    └── fd: (1,2)-->(3)
 │    │    ├── project
 │    │    │    ├── columns: column15:15 li.customerid:5!null li.ordernumber:6!null
 │    │    │    ├── immutable
 │    │    │    ├── inner-join (hash)
 │    │    │    │    ├── columns: li.customerid:5!null li.ordernumber:6!null li.productid:7!null quantity:8 p.productid:10!null cost:12
 │    │    │    │    ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │    │    │    │    ├── key: (5,6,10)
 │    │    │    │    ├── fd: (5-7)-->(8), (10)-->(12), (7)==(10), (10)==(7)
 │    │    │    │    ├── scan lineitem [as=li]
 │    │    │    │    │    ├── columns: li.customerid:5!null li.ordernumber:6!null li.productid:7!null quantity:8
 │    │    │    │    │    ├── key: (5-7)
 │    │    │    │    │    └── fd: (5-7)-->(8)
 │    │    │    │    ├── scan product [as=p]
 │    │    │    │    │    ├── columns: p.productid:10!null cost:12
 │    │    │    │    │    ├── key: (10)
 │    │    │    │    │    └── fd: (10)-->(12)
 │    │    │    │    └── filters
 │    │    │    │         └── li.productid:7 = p.productid:10 [outer=(7,10), constraints=(/7: (/NULL - ]; /10: (/NULL - ]), fd=(7)==(10), (10)==(7)]
 │    │    │    └── projections
 │    │    │         └── quantity:8::INT8 * cost:12::DECIMAL [as=column15:15, outer=(8,12), immutable]
 │    │    └── filters
 │    │         ├── li.customerid:5 = order0_.customerid:1 [outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ]), fd=(1)==(5), (5)==(1)]
 │    │         └── li.ordernumber:6 = order0_.ordernumber:2 [outer=(2,6), constraints=(/2: (/NULL - ]; /6: (/NULL - ]), fd=(2)==(6), (6)==(2)]
 │    └── aggregations
 │         ├── sum [as=sum:16, outer=(15)]
 │         │    └── column15:15
 │         └── const-agg [as=orderdate:3, outer=(3)]
 │              └── orderdate:3
 └── projections
      └── sum:16 [as=formula273_:17, outer=(16)]

exec-ddl
drop table customer, customerorder, lineitem, product
----

# ------------------------------------------------------------------------------
# Query #12
#   org.hibernate.test.criteria.CriteriaQueryTest
# ------------------------------------------------------------------------------
exec-ddl
CREATE TABLE student (
  studentid INT8 NOT NULL,
  name VARCHAR(255) NOT NULL,
  address_city VARCHAR(255),
  address_state VARCHAR(255),
  preferredcoursecode VARCHAR(255),
  PRIMARY KEY (studentid)
);
----

exec-ddl
CREATE TABLE enrolment (
  studentid INT8 NOT NULL,
  coursecode VARCHAR(255) NOT NULL,
  semester INT2 NOT NULL,
  year INT2 NOT NULL,
  PRIMARY KEY (studentid, coursecode)
);
----

opt
SELECT
  this_.studentid AS studenti1_26_0_,
  this_.name AS name2_26_0_,
  this_.address_city AS address_3_26_0_,
  this_.address_state AS address_4_26_0_,
  this_.preferredcoursecode AS preferre5_26_0_
FROM
  student AS this_
WHERE
  EXISTS(
    SELECT
      enrolment_.studentid AS y0_
    FROM
      enrolment AS enrolment_
    WHERE
      enrolment_.year
      = (
          SELECT
            max(maxstudentenrolment_.year) AS y0_
          FROM
            enrolment AS maxstudentenrolment_
          WHERE
            this_.preferredcoursecode = maxstudentenrolment_.coursecode
        )
  );
----
group-by
 ├── columns: studenti1_26_0_:1!null name2_26_0_:2!null address_3_26_0_:3 address_4_26_0_:4 preferre5_26_0_:5!null
 ├── grouping columns: this_.studentid:1!null
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── select
 │    ├── columns: this_.studentid:1!null name:2!null address_city:3 address_state:4 preferredcoursecode:5!null enrolment_.studentid:7!null enrolment_.coursecode:8!null enrolment_.year:10!null max:17!null
 │    ├── key: (1,7,8)
 │    ├── fd: (1)-->(2-5), (7,8)-->(10), (1,7,8)-->(2-5,10,17), (10)==(17), (17)==(10)
 │    ├── group-by
 │    │    ├── columns: this_.studentid:1!null name:2!null address_city:3 address_state:4 preferredcoursecode:5!null enrolment_.studentid:7!null enrolment_.coursecode:8!null enrolment_.year:10!null max:17!null
 │    │    ├── grouping columns: this_.studentid:1!null enrolment_.studentid:7!null enrolment_.coursecode:8!null
 │    │    ├── key: (1,7,8)
 │    │    ├── fd: (1)-->(2-5), (7,8)-->(10), (1,7,8)-->(2-5,10,17)
 │    │    ├── inner-join (cross)
 │    │    │    ├── columns: this_.studentid:1!null name:2!null address_city:3 address_state:4 preferredcoursecode:5!null enrolment_.studentid:7!null enrolment_.coursecode:8!null enrolment_.year:10!null maxstudentenrolment_.coursecode:13!null maxstudentenrolment_.year:15!null
 │    │    │    ├── fd: (1)-->(2-5), (5)==(13), (13)==(5), (7,8)-->(10)
 │    │    │    ├── inner-join (hash)
 │    │    │    │    ├── columns: this_.studentid:1!null name:2!null address_city:3 address_state:4 preferredcoursecode:5!null maxstudentenrolment_.coursecode:13!null maxstudentenrolment_.year:15!null
 │    │    │    │    ├── fd: (1)-->(2-5), (5)==(13), (13)==(5)
 │    │    │    │    ├── scan student [as=this_]
 │    │    │    │    │    ├── columns: this_.studentid:1!null name:2!null address_city:3 address_state:4 preferredcoursecode:5
 │    │    │    │    │    ├── key: (1)
 │    │    │    │    │    └── fd: (1)-->(2-5)
 │    │    │    │    ├── scan enrolment [as=maxstudentenrolment_]
 │    │    │    │    │    └── columns: maxstudentenrolment_.coursecode:13!null maxstudentenrolment_.year:15!null
 │    │    │    │    └── filters
 │    │    │    │         └── preferredcoursecode:5 = maxstudentenrolment_.coursecode:13 [outer=(5,13), constraints=(/5: (/NULL - ]; /13: (/NULL - ]), fd=(5)==(13), (13)==(5)]
 │    │    │    ├── scan enrolment [as=enrolment_]
 │    │    │    │    ├── columns: enrolment_.studentid:7!null enrolment_.coursecode:8!null enrolment_.year:10!null
 │    │    │    │    ├── key: (7,8)
 │    │    │    │    └── fd: (7,8)-->(10)
 │    │    │    └── filters (true)
 │    │    └── aggregations
 │    │         ├── max [as=max:17, outer=(15)]
 │    │         │    └── maxstudentenrolment_.year:15
 │    │         ├── const-agg [as=enrolment_.year:10, outer=(10)]
 │    │         │    └── enrolment_.year:10
 │    │         ├── const-agg [as=name:2, outer=(2)]
 │    │         │    └── name:2
 │    │         ├── const-agg [as=address_city:3, outer=(3)]
 │    │         │    └── address_city:3
 │    │         ├── const-agg [as=address_state:4, outer=(4)]
 │    │         │    └── address_state:4
 │    │         └── const-agg [as=preferredcoursecode:5, outer=(5)]
 │    │              └── preferredcoursecode:5
 │    └── filters
 │         └── enrolment_.year:10 = max:17 [outer=(10,17), constraints=(/10: (/NULL - ]; /17: (/NULL - ]), fd=(10)==(17), (17)==(10)]
 └── aggregations
      ├── const-agg [as=name:2, outer=(2)]
      │    └── name:2
      ├── const-agg [as=address_city:3, outer=(3)]
      │    └── address_city:3
      ├── const-agg [as=address_state:4, outer=(4)]
      │    └── address_state:4
      └── const-agg [as=preferredcoursecode:5, outer=(5)]
           └── preferredcoursecode:5

exec-ddl
drop table student, enrolment
----

# ------------------------------------------------------------------------------
# Query #13
#   org.hibernate.test.subselectfetch.SubselectFetchWithFormulaTest
#   TODO(andyk): Need to decorrelate LeftJoin -> Project complex.
# ------------------------------------------------------------------------------
exec-ddl
CREATE TABLE t_name (id INT4 NOT NULL, c_name VARCHAR(255), PRIMARY KEY (id));
----

opt
SELECT
  this_.id AS id1_0_0_,
  this_.c_name AS c_name2_0_0_,
  (SELECT length(this_.c_name) FROM t_name WHERE this_.id = t_name.id)
    AS formula0_0_
FROM
  t_name AS this_;
----
project
 ├── columns: id1_0_0_:1!null c_name2_0_0_:2 formula0_0_:8
 ├── immutable
 ├── key: (1)
 ├── fd: (1)-->(2), (2)-->(8)
 ├── scan t_name [as=this_]
 │    ├── columns: this_.id:1!null this_.c_name:2
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── projections
      └── length(this_.c_name:2) [as=formula0_0_:8, outer=(2), immutable]

exec-ddl
drop table t_name
----
