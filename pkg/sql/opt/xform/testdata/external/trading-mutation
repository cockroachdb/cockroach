# =============================================================================
# This schema is based on a business buying/selling online trading cards. This
# file simulates queries taking place while schema changes *are* taking place.
# Compare with the trading file to see differences.
# =============================================================================

# --------------------------------------------------
# Schema Definitions
# --------------------------------------------------

# Cards is the catalog of all cards that can be traded.
exec-ddl
CREATE TABLE Cards
(
  id INT NOT NULL,
  name VARCHAR(128) NOT NULL,
  rarity VARCHAR(1) NULL,
  setname VARCHAR(5) NULL,
  number INT NOT NULL,
  isfoil BIT NOT NULL,
  CONSTRAINT CardsPrimaryKey PRIMARY KEY
  (
    id ASC
  ),
  CONSTRAINT CardsNameSetNumber UNIQUE
  (
    name ASC,
    setname ASC,
    number ASC
  )
)
----

exec-ddl
ALTER TABLE Cards INJECT STATISTICS '[
  {
    "columns": ["id"],
    "distinct_count": 57000,
    "null_count": 0,
    "row_count": 57000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["name"],
    "distinct_count": 39000,
    "null_count": 0,
    "row_count": 57000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["setname"],
    "distinct_count": 162,
    "null_count": 0,
    "row_count": 57000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["number"],
    "distinct_count": 829,
    "null_count": 0,
    "row_count": 57000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["name", "setname"],
    "distinct_count": 56700,
    "null_count": 0,
    "row_count": 57000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["name", "setname", "number"],
    "distinct_count": 57000,
    "null_count": 0,
    "row_count": 57000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  }
]'
----

# CardsInfo tracks current inventory of each card, as well as current buy/sell
# price. It is partitioned on dealerid, which represents multiple licensees
# (dealers) using the trading software.
exec-ddl
CREATE TABLE CardsInfo
(
  dealerid OID NOT NULL,
  cardid INT NOT NULL,
  buyprice DECIMAL(10,4) NOT NULL,
  sellprice DECIMAL(10,4) NOT NULL,
  discount DECIMAL(10,4) NOT NULL,
  desiredinventory INT NOT NULL,
  actualinventory INT NOT NULL,
  maxinventory INT NOT NULL,
  version DECIMAL NOT NULL DEFAULT (cluster_logical_timestamp()),
  "discountbuyprice:write-only" DECIMAL(10,4) AS (buyprice - discount) STORED,
  "notes:write-only" TEXT,
  "oldinventory:write-only" INT NOT NULL,
  "extra:delete-only" TEXT NOT NULL,
  CONSTRAINT CardsInfoPrimaryKey PRIMARY KEY
  (
    dealerid ASC,
    cardid ASC
  ),
  CONSTRAINT CardsInfoCardIdKey FOREIGN KEY (cardid)
  REFERENCES Cards (id),
  UNIQUE INDEX CardsInfoVersionIndex (dealerid ASC, version ASC)
)
----

exec-ddl
ALTER TABLE CardsInfo INJECT STATISTICS '[
  {
    "columns": ["dealerid"],
    "distinct_count": 12,
    "null_count": 0,
    "row_count": 700000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["cardid"],
    "distinct_count": 57000,
    "null_count": 0,
    "row_count": 700000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["version"],
    "distinct_count": 700000,
    "null_count": 0,
    "row_count": 700000,
    "created_at": "2020-01-01 0:00:00.00000+00:00",
    "histo_col_type": "decimal",
    "histo_buckets": [
      {"num_eq": 0, "num_range": 0, "distinct_range": 0, "upper_bound": "1426741777604892000"},
      {"num_eq": 0, "num_range": 350000, "distinct_range": 350000, "upper_bound": "1584421693935036000"}
    ]
  },
  {
    "columns": ["dealerid", "cardid"],
    "distinct_count": 700000,
    "null_count": 0,
    "row_count": 700000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["dealerid", "version"],
    "distinct_count": 700000,
    "null_count": 0,
    "row_count": 700000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  }
]'
----

# InventoryDetails stores the quantity and location of all the cards.
exec-ddl
CREATE TABLE InventoryDetails
(
  dealerid OID NOT NULL,
  cardid INT NOT NULL,
  accountname VARCHAR(128) NOT NULL,
  quantity INT NOT NULL,
  version DECIMAL NOT NULL DEFAULT (cluster_logical_timestamp()),
  "lastchange:write-only" INT,
  "extra:delete-only" DECIMAL(10,0) NOT NULL,
  CONSTRAINT InventoryDetailsPrimaryKey PRIMARY KEY
  (
    dealerid ASC,
    cardid ASC,
    accountname ASC
  ),
  CONSTRAINT InventoryDetailsCardIdKey FOREIGN KEY (cardid)
  REFERENCES Cards (id)
)
----

exec-ddl
ALTER TABLE InventoryDetails INJECT STATISTICS '[
  {
    "columns": ["dealerid"],
    "distinct_count": 12,
    "null_count": 0,
    "row_count": 1700000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["cardid"],
    "distinct_count": 50000,
    "null_count": 0,
    "row_count": 1700000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["accountname"],
    "distinct_count": 150,
    "null_count": 0,
    "row_count": 1700000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["dealerid", "cardid"],
    "distinct_count": 250000,
    "null_count": 0,
    "row_count": 1700000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["dealerid", "cardid", "accountname"],
    "distinct_count": 170000,
    "null_count": 0,
    "row_count": 1700000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  }
]'
----

# Transactions records all buy/sell trading activity.
#
# NOTE: The TransactionsOpIndex is meant to be a partial index, only containing
#       non-NULL values. The operationid column is for idempotency, and
#       older values get set to NULL after X hours to save space. 99%+ of values
#       are NULL.
exec-ddl
CREATE TABLE Transactions
(
  dealerid OID NOT NULL,
  isbuy BOOL NOT NULL,
  date TIMESTAMPTZ NOT NULL,
  accountname VARCHAR(128) NOT NULL,
  customername VARCHAR(128) NOT NULL,
  operationid UUID,
  version DECIMAL NOT NULL DEFAULT (cluster_logical_timestamp()),
  "olddate:write-only" TIMESTAMP NOT NULL,
  "extra:delete-only" TEXT AS ('a:' || accountname) STORED,
  CONSTRAINT TransactionsPrimaryKey PRIMARY KEY
  (
    dealerid ASC,
    isbuy ASC,
    date ASC
  ),
  UNIQUE INDEX TransactionsOpIndex (dealerid ASC, operationid ASC)
  --WHERE operationid IS NOT NULL
)
----

exec-ddl
ALTER TABLE Transactions INJECT STATISTICS '[
  {
    "columns": ["dealerid"],
    "distinct_count": 10,
    "null_count": 0,
    "row_count": 20000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["isbuy"],
    "distinct_count": 2,
    "null_count": 0,
    "row_count": 20000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["date"],
    "distinct_count": 20000000,
    "null_count": 0,
    "row_count": 20000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["operationid"],
    "distinct_count": 4000,
    "null_count": 19996000,
    "row_count": 20000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["dealerid", "isbuy"],
    "distinct_count": 15,
    "null_count": 0,
    "row_count": 20000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["dealerid", "isbuy", "date"],
    "distinct_count": 20000000,
    "null_count": 0,
    "row_count": 20000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  }
]'
----

# TransactionDetails records line items of each Transaction.
exec-ddl
CREATE TABLE TransactionDetails
(
  dealerid OID NOT NULL,
  isbuy BOOL NOT NULL,
  transactiondate TIMESTAMPTZ NOT NULL,
  cardid INT NOT NULL,
  quantity INT NOT NULL,
  sellprice DECIMAL(10,4) NOT NULL,
  buyprice DECIMAL(10,4) NOT NULL,
  version DECIMAL NOT NULL DEFAULT (cluster_logical_timestamp()),
  "discount:write-only" DECIMAL(10,4) DEFAULT(0.00001),
  "extra:delete-only" TEXT NOT NULL,
  CONSTRAINT DetailsPrimaryKey PRIMARY KEY
  (
    dealerid ASC,
    isbuy ASC,
    transactiondate ASC,
    cardid ASC,
    quantity ASC
  ),
  CONSTRAINT DetailsDealerDateKey FOREIGN KEY (dealerid, isbuy, transactiondate)
  REFERENCES Transactions (dealerid, isbuy, date),
  CONSTRAINT DetailsCardIdKey FOREIGN KEY (cardid)
  REFERENCES Cards (id),
  INDEX DetailsCardIdIndex (dealerid ASC, isbuy ASC, cardid ASC)
)
----

exec-ddl
ALTER TABLE TransactionDetails INJECT STATISTICS '[
  {
    "columns": ["dealerid"],
    "distinct_count": 10,
    "null_count": 0,
    "row_count": 180000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["isbuy"],
    "distinct_count": 2,
    "null_count": 0,
    "row_count": 180000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["transactiondate"],
    "distinct_count": 180000000,
    "null_count": 0,
    "row_count": 180000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["cardid"],
    "distinct_count": 57000,
    "null_count": 0,
    "row_count": 180000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["dealerid", "isbuy"],
    "distinct_count": 15,
    "null_count": 0,
    "row_count": 180000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["dealerid", "isbuy", "transactiondate"],
    "distinct_count": 20000000,
    "null_count": 0,
    "row_count": 180000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["dealerid", "isbuy", "transactiondate", "cardid"],
    "distinct_count": 180000000,
    "null_count": 0,
    "row_count": 180000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["dealerid", "isbuy", "transactiondate", "cardid", "quantity"],
    "distinct_count": 180000000,
    "null_count": 0,
    "row_count": 180000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["dealerid", "isbuy", "cardid"],
    "distinct_count": 350000,
    "null_count": 0,
    "row_count": 180000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  }
]'
----

# PriceDetails records price history for each card.
exec-ddl
CREATE TABLE PriceDetails
(
    dealerid OID NOT NULL,
    cardid INT NOT NULL,
    pricedate TIMESTAMPTZ NOT NULL,
    pricedby VARCHAR(128) NOT NULL,
    buyprice DECIMAL(10,4) NOT NULL,
    sellprice DECIMAL(10,4) NOT NULL,
    discount DECIMAL(10,4) NOT NULL,
    version DECIMAL NOT NULL,
    CONSTRAINT PriceDetailsPrimaryKey PRIMARY KEY
    (
        dealerid ASC,
        cardid ASC,
        pricedate ASC
    ),
    CONSTRAINT PriceDetailsCardIdKey FOREIGN KEY (cardid)
    REFERENCES Cards (id)
)
----

exec-ddl
ALTER TABLE PriceDetails INJECT STATISTICS '[
  {
    "columns": ["dealerid"],
    "distinct_count": 2,
    "null_count": 0,
    "row_count": 40000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["cardid"],
    "distinct_count": 57000,
    "null_count": 0,
    "row_count": 40000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["pricedate"],
    "distinct_count": 40000000,
    "null_count": 0,
    "row_count": 40000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["dealerid", "cardid"],
    "distinct_count": 90000,
    "null_count": 0,
    "row_count": 40000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  },
  {
    "columns": ["dealerid", "cardid", "pricedate"],
    "distinct_count": 40000000,
    "null_count": 0,
    "row_count": 40000000,
    "created_at": "2020-01-01 0:00:00.00000+00:00"
  }
]'
----

# NOTE: These views should not be checking for the constant dealerid = 1.
# Instead, the dealerid should be derived from the current user, like this:
#
#   dealerid = (SELECT oid FROM pg_roles WHERE rolname = current_user);
#
# However, the optimizer and execution engine are not smart enough to do a good
# job with this. The following needs to be done:
#
#   1. Optimizer needs access to key information about pg_roles so that it can
#      infer that there will be at most one row that matches the predicate.
#   2. Optimizer needs to replace "current_user" with constant after the query
#      is prepared, as if it were a parameter.
#   3. Execution engine should allow "push down" into virtual tables, or else
#      this query will need to enumerate every user and role in order to find
#      the requested rolname.
#

exec-ddl
CREATE VIEW CardsView AS
    SELECT  id AS Id, name AS Name, rarity AS Rarity, setname AS SetName, number AS Number, isfoil AS IsFoil,
            buyprice AS BuyPrice, sellprice AS SellPrice, discount AS Discount,
            desiredinventory AS DesiredInventory, actualinventory AS ActualInventory,
            maxinventory AS MaxInventory, version AS Version
    FROM Cards
    JOIN CardsInfo
    ON id = cardid
    WHERE dealerid = 1
----

exec-ddl
CREATE VIEW TransactionsView AS
    SELECT
      date AS Date, accountname AS AccountName, customername AS CustomerName,
      isbuy AS IsBuy, operationid AS OperationId
    FROM Transactions
    WHERE dealerid = 1
----

exec-ddl
CREATE VIEW TransactionDetailsView AS
    SELECT  isbuy AS IsBuy, transactiondate AS TransactionDate, cardid AS CardId, quantity AS Quantity,
            sellprice AS SellPrice, buyprice AS BuyPrice
    FROM TransactionDetails
    WHERE dealerid = 1
----

exec-ddl
CREATE VIEW PriceDetailsView AS
    SELECT  cardid AS CardId, pricedate AS PriceDate, pricedby AS PricedBy, buyprice AS BuyPrice,
            sellprice AS SellPrice,
            (
                CASE
                    WHEN dealerid <> 1
                    THEN 0::DECIMAL(10,4)
                    ELSE discount
                END
            ) AS Discount
    FROM PriceDetails
    WHERE dealerid = 1
----

exec-ddl
CREATE VIEW GlobalInventoryView AS
    SELECT cardid, min(buyprice) AS BuyPrice, max(sellprice) AS SellPrice, max(discount) AS Discount,
        sum(desiredinventory) AS DesiredInventory,
        sum
        (
            CASE
                WHEN dealerid = 2 AND actualinventory > 24 THEN 24
                WHEN dealerid <> 1 AND actualinventory > maxinventory THEN maxinventory
                ELSE actualinventory
            END
        ) AS ActualInventory,
        sum(maxinventory) AS MaxInventory,
        max(version) AS Version
    FROM CardsInfo
    INNER JOIN Cards
    ON cardid = id
    WHERE (dealerid = 1 OR dealerid = 2 OR dealerid = 3 OR dealerid = 4)
    GROUP BY cardid
----

exec-ddl
CREATE VIEW GlobalCardsView AS
    SELECT c.id AS Id, c.name AS Name, c.rarity AS Rarity, c.setname AS SetName, c.number AS Number, c.isfoil AS IsFoil,
            inv.BuyPrice, inv.SellPrice, inv.Discount, inv.DesiredInventory, inv.ActualInventory,
            inv.MaxInventory, inv.Version
    FROM Cards c
    INNER JOIN GlobalInventoryView inv
    ON c.id = inv.cardid
----

# --------------------------------------------------
# SELECT Queries
# --------------------------------------------------

# Find all cards that have been modified in the last 5 seconds.
opt format=show-stats
SELECT
  Id, Name, Rarity, SetName, Number, IsFoil, BuyPrice, SellPrice,
  DesiredInventory, ActualInventory, Version, Discount, MaxInventory
FROM CardsView WHERE Version > 1584421773604892000.0000000000
----
project
 ├── columns: id:1!null name:2!null rarity:3 setname:4 number:5!null isfoil:6!null buyprice:9!null sellprice:10!null desiredinventory:12!null actualinventory:13!null version:15!null discount:11!null maxinventory:14!null
 ├── immutable
 ├── stats: [rows=1]
 ├── key: (15)
 ├── fd: (1)-->(2-6,9-15), (2,4,5)~~>(1,3,6), (15)-->(1-6,9-14)
 └── inner-join (lookup cards)
      ├── columns: id:1!null name:2!null rarity:3 setname:4 number:5!null isfoil:6!null dealerid:7!null cardid:8!null buyprice:9!null sellprice:10!null discount:11!null desiredinventory:12!null actualinventory:13!null maxinventory:14!null version:15!null
      ├── key columns: [8] = [1]
      ├── lookup columns are key
      ├── immutable
      ├── stats: [rows=1, distinct(1)=6.35833333e-05, null(1)=0, distinct(8)=6.35833333e-05, null(8)=0]
      ├── key: (8)
      ├── fd: ()-->(7), (1)-->(2-6), (2,4,5)~~>(1,3,6), (8)-->(9-15), (15)-->(8-14), (1)==(8), (8)==(1)
      ├── index-join cardsinfo
      │    ├── columns: dealerid:7!null cardid:8!null buyprice:9!null sellprice:10!null discount:11!null desiredinventory:12!null actualinventory:13!null maxinventory:14!null version:15!null
      │    ├── immutable
      │    ├── stats: [rows=6.35833333e-05, distinct(7)=6.35833333e-05, null(7)=0, distinct(8)=6.35833333e-05, null(8)=0, distinct(9)=6.35833333e-05, null(9)=0, distinct(10)=6.35833333e-05, null(10)=0, distinct(11)=6.35833333e-05, null(11)=0, distinct(12)=6.35833333e-05, null(12)=0, distinct(13)=6.35833333e-05, null(13)=0, distinct(14)=6.35833333e-05, null(14)=0, distinct(15)=6.35833333e-05, null(15)=0, distinct(7,15)=6.35833333e-05, null(7,15)=0]
      │    │   histogram(15)=
      │    ├── key: (8)
      │    ├── fd: ()-->(7), (8)-->(9-15), (15)-->(8-14)
      │    └── scan cardsinfo@cardsinfoversionindex
      │         ├── columns: dealerid:7!null cardid:8!null version:15!null
      │         ├── constraint: /7/15: (/1/1584421773604892000.0000000000 - /1]
      │         ├── stats: [rows=6.35833333e-05, distinct(7)=6.35833333e-05, null(7)=0, distinct(15)=6.35833333e-05, null(15)=0, distinct(7,15)=6.35833333e-05, null(7,15)=0]
      │         │   histogram(15)=
      │         ├── key: (8)
      │         └── fd: ()-->(7), (8)-->(15), (15)-->(8)
      └── filters (true)

# Get version of last card that was changed.
#
opt format=show-stats
SELECT coalesce(max(Version), 0) FROM GlobalCardsView
----
project
 ├── columns: coalesce:35
 ├── cardinality: [1 - 1]
 ├── stats: [rows=1]
 ├── key: ()
 ├── fd: ()-->(35)
 ├── scalar-group-by
 │    ├── columns: max:34
 │    ├── cardinality: [1 - 1]
 │    ├── stats: [rows=1]
 │    ├── key: ()
 │    ├── fd: ()-->(34)
 │    ├── limit
 │    │    ├── columns: dealerid:7!null version:15!null
 │    │    ├── internal-ordering: -15
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── stats: [rows=1]
 │    │    ├── key: ()
 │    │    ├── fd: ()-->(7,15)
 │    │    ├── sort
 │    │    │    ├── columns: dealerid:7!null version:15!null
 │    │    │    ├── cardinality: [0 - 4]
 │    │    │    ├── stats: [rows=4, distinct(7,15)=4, null(7,15)=0]
 │    │    │    ├── key: (7,15)
 │    │    │    ├── ordering: -15
 │    │    │    ├── limit hint: 1.00
 │    │    │    └── union
 │    │    │         ├── columns: dealerid:7!null version:15!null
 │    │    │         ├── left columns: dealerid:7!null version:15!null
 │    │    │         ├── right columns: dealerid:75 version:83
 │    │    │         ├── cardinality: [0 - 4]
 │    │    │         ├── stats: [rows=4, distinct(7,15)=4, null(7,15)=0]
 │    │    │         ├── key: (7,15)
 │    │    │         ├── union
 │    │    │         │    ├── columns: dealerid:7!null version:15!null
 │    │    │         │    ├── left columns: dealerid:7!null version:15!null
 │    │    │         │    ├── right columns: dealerid:62 version:70
 │    │    │         │    ├── cardinality: [0 - 3]
 │    │    │         │    ├── stats: [rows=3, distinct(7,15)=3, null(7,15)=0]
 │    │    │         │    ├── key: (7,15)
 │    │    │         │    ├── union
 │    │    │         │    │    ├── columns: dealerid:7!null version:15!null
 │    │    │         │    │    ├── left columns: dealerid:36 version:44
 │    │    │         │    │    ├── right columns: dealerid:49 version:57
 │    │    │         │    │    ├── cardinality: [0 - 2]
 │    │    │         │    │    ├── stats: [rows=2, distinct(7,15)=2, null(7,15)=0]
 │    │    │         │    │    ├── key: (7,15)
 │    │    │         │    │    ├── scan cardsinfo@cardsinfoversionindex,rev
 │    │    │         │    │    │    ├── columns: dealerid:36!null version:44!null
 │    │    │         │    │    │    ├── constraint: /36/44: [/1 - /1]
 │    │    │         │    │    │    ├── limit: 1(rev)
 │    │    │         │    │    │    ├── stats: [rows=1, distinct(36)=1, null(36)=0, distinct(36,44)=1, null(36,44)=0]
 │    │    │         │    │    │    ├── key: ()
 │    │    │         │    │    │    └── fd: ()-->(36,44)
 │    │    │         │    │    └── scan cardsinfo@cardsinfoversionindex,rev
 │    │    │         │    │         ├── columns: dealerid:49!null version:57!null
 │    │    │         │    │         ├── constraint: /49/57: [/2 - /2]
 │    │    │         │    │         ├── limit: 1(rev)
 │    │    │         │    │         ├── stats: [rows=1, distinct(49)=1, null(49)=0, distinct(49,57)=1, null(49,57)=0]
 │    │    │         │    │         ├── key: ()
 │    │    │         │    │         └── fd: ()-->(49,57)
 │    │    │         │    └── scan cardsinfo@cardsinfoversionindex,rev
 │    │    │         │         ├── columns: dealerid:62!null version:70!null
 │    │    │         │         ├── constraint: /62/70: [/3 - /3]
 │    │    │         │         ├── limit: 1(rev)
 │    │    │         │         ├── stats: [rows=1, distinct(62)=1, null(62)=0, distinct(62,70)=1, null(62,70)=0]
 │    │    │         │         ├── key: ()
 │    │    │         │         └── fd: ()-->(62,70)
 │    │    │         └── scan cardsinfo@cardsinfoversionindex,rev
 │    │    │              ├── columns: dealerid:75!null version:83!null
 │    │    │              ├── constraint: /75/83: [/4 - /4]
 │    │    │              ├── limit: 1(rev)
 │    │    │              ├── stats: [rows=1, distinct(75)=1, null(75)=0, distinct(75,83)=1, null(75,83)=0]
 │    │    │              ├── key: ()
 │    │    │              └── fd: ()-->(75,83)
 │    │    └── 1
 │    └── aggregations
 │         └── const-agg [as=max:34, outer=(15)]
 │              └── version:15
 └── projections
      └── COALESCE(max:34, 0) [as=coalesce:35, outer=(34)]

# Show last 20 transactions for a particular card.
#
# Problems:
#   1. Index join should be applied after the join between TransactionsView and
#      TransactionDetailsView.
#
opt format=show-stats
SELECT
  d.IsBuy, TransactionDate, CardId, Quantity, SellPrice, BuyPrice,
  t.IsBuy AS IsBuy2, Date, AccountName, CustomerName
FROM TransactionDetailsView d
INNER JOIN TransactionsView t
ON t.Date = d.TransactionDate
WHERE (d.CardId = 21953) AND NOT d.IsBuy AND NOT t.IsBuy
ORDER BY TransactionDate DESC
LIMIT 20
----
project
 ├── columns: isbuy:2!null transactiondate:3!null cardid:4!null quantity:5!null sellprice:6!null buyprice:7!null isbuy2:12!null date:13!null accountname:14!null customername:15!null
 ├── cardinality: [0 - 20]
 ├── stats: [rows=20]
 ├── key: (5,13)
 ├── fd: ()-->(2,4,12), (3,5)-->(6,7), (13)-->(14,15), (3)==(13), (13)==(3)
 ├── ordering: -(3|13) opt(2,4,12) [actual: -3]
 └── limit
      ├── columns: transactiondetails.dealerid:1!null transactiondetails.isbuy:2!null transactiondate:3!null cardid:4!null quantity:5!null sellprice:6!null buyprice:7!null transactions.dealerid:11!null transactions.isbuy:12!null date:13!null accountname:14!null customername:15!null
      ├── internal-ordering: -(3|13) opt(1,2,4,11,12)
      ├── cardinality: [0 - 20]
      ├── stats: [rows=20]
      ├── key: (5,13)
      ├── fd: ()-->(1,2,4,11,12), (3,5)-->(6,7), (13)-->(14,15), (3)==(13), (13)==(3)
      ├── ordering: -(3|13) opt(1,2,4,11,12) [actual: -3]
      ├── inner-join (lookup transactions)
      │    ├── columns: transactiondetails.dealerid:1!null transactiondetails.isbuy:2!null transactiondate:3!null cardid:4!null quantity:5!null sellprice:6!null buyprice:7!null transactions.dealerid:11!null transactions.isbuy:12!null date:13!null accountname:14!null customername:15!null
      │    ├── key columns: [20 21 3] = [11 12 13]
      │    ├── lookup columns are key
      │    ├── stats: [rows=478.646617, distinct(3)=478.646617, null(3)=0, distinct(13)=478.646617, null(13)=0]
      │    ├── key: (5,13)
      │    ├── fd: ()-->(1,2,4,11,12), (3,5)-->(6,7), (13)-->(14,15), (3)==(13), (13)==(3)
      │    ├── ordering: -(3|13) opt(1,2,4,11,12) [actual: -3]
      │    ├── limit hint: 20.00
      │    ├── project
      │    │    ├── columns: "project_const_col_@11":20!null "project_const_col_@12":21!null transactiondetails.dealerid:1!null transactiondetails.isbuy:2!null transactiondate:3!null cardid:4!null quantity:5!null sellprice:6!null buyprice:7!null
      │    │    ├── stats: [rows=478.646617]
      │    │    ├── key: (3,5)
      │    │    ├── fd: ()-->(1,2,4,20,21), (3,5)-->(6,7)
      │    │    ├── ordering: -3 opt(1,2,4) [actual: -3]
      │    │    ├── limit hint: 100.00
      │    │    ├── index-join transactiondetails
      │    │    │    ├── columns: transactiondetails.dealerid:1!null transactiondetails.isbuy:2!null transactiondate:3!null cardid:4!null quantity:5!null sellprice:6!null buyprice:7!null
      │    │    │    ├── stats: [rows=478.646617, distinct(1)=1, null(1)=0, distinct(2)=1, null(2)=0, distinct(3)=478.646617, null(3)=0, distinct(4)=1, null(4)=0, distinct(5)=478.640889, null(5)=0, distinct(6)=478.640889, null(6)=0, distinct(7)=478.640889, null(7)=0, distinct(1,2,4)=1, null(1,2,4)=0]
      │    │    │    ├── key: (3,5)
      │    │    │    ├── fd: ()-->(1,2,4), (3,5)-->(6,7)
      │    │    │    ├── ordering: -3 opt(1,2,4) [actual: -3]
      │    │    │    ├── limit hint: 100.00
      │    │    │    └── scan transactiondetails@detailscardidindex,rev
      │    │    │         ├── columns: transactiondetails.dealerid:1!null transactiondetails.isbuy:2!null transactiondate:3!null cardid:4!null quantity:5!null
      │    │    │         ├── constraint: /1/2/4/3/5: [/1/false/21953 - /1/false/21953]
      │    │    │         ├── stats: [rows=478.646617, distinct(1)=1, null(1)=0, distinct(2)=1, null(2)=0, distinct(4)=1, null(4)=0, distinct(1,2,4)=1, null(1,2,4)=0]
      │    │    │         ├── key: (3,5)
      │    │    │         ├── fd: ()-->(1,2,4)
      │    │    │         ├── ordering: -3 opt(1,2,4) [actual: -3]
      │    │    │         └── limit hint: 100.00
      │    │    └── projections
      │    │         ├── 1 [as="project_const_col_@11":20]
      │    │         └── false [as="project_const_col_@12":21]
      │    └── filters (true)
      └── 20

# Show last 20 prices for a card.
opt format=show-stats
SELECT CardId, PriceDate, PricedBy, BuyPrice, SellPrice
FROM PriceDetailsView
WHERE CardId = 12345
ORDER BY PriceDate DESC
LIMIT 10
----
project
 ├── columns: cardid:2!null pricedate:3!null pricedby:4!null buyprice:5!null sellprice:6!null
 ├── cardinality: [0 - 10]
 ├── stats: [rows=10]
 ├── key: (3)
 ├── fd: ()-->(2), (3)-->(4-6)
 ├── ordering: -3 opt(2) [actual: -3]
 └── scan pricedetails,rev
      ├── columns: dealerid:1!null cardid:2!null pricedate:3!null pricedby:4!null buyprice:5!null sellprice:6!null
      ├── constraint: /1/2/3: [/1/12345 - /1/12345]
      ├── limit: 10(rev)
      ├── stats: [rows=10]
      ├── key: (3)
      ├── fd: ()-->(1,2), (3)-->(4-6)
      └── ordering: -3 opt(1,2) [actual: -3]

# Show next page of 50 cards.
#
# Problems:
#   1. The TransactionDate comparisons should be the last 2 days from the
#      current timestamp. However, the current timestamp is not treated as a
#      constant as it should be.
#   2. Missing rule to push "LIMIT 50" into GroupBy->RightJoin complex. This
#      would need to be an exploration rule since it involves an ordering.
#      Or we could push down the "limit hint" into GroupBy->RightJoin (and
#      further into the InnerJoin).
#   3. Wrong join-type (probably due to #3 above). Should be LookupJoin.
#
opt format=show-stats
SELECT
  Id, Name, Rarity, SetName, Number, IsFoil, BuyPrice, SellPrice,
  DesiredInventory, ActualInventory, Version, Discount, MaxInventory, Value AS TwoDaySales
FROM
(
  SELECT *,
    coalesce((
      SELECT sum(Quantity)
      FROM TransactionDetailsView d
      WHERE
        d.CardId = c.Id AND
        d.IsBuy = FALSE AND
        d.TransactionDate BETWEEN '2020-03-01'::TIMESTAMPTZ - INTERVAL '2 days' AND '2020-03-01'::TIMESTAMPTZ
      ), 0) AS Value
  FROM CardsView c
) AS c
WHERE (Name, SetName, Number) > ('Shock', '7E', 248)
ORDER BY Name, SetName, Number
LIMIT 50
----
project
 ├── columns: id:1!null name:2!null rarity:3 setname:4 number:5!null isfoil:6!null buyprice:9!null sellprice:10!null desiredinventory:12!null actualinventory:13!null version:15!null discount:11!null maxinventory:14!null twodaysales:31
 ├── cardinality: [0 - 50]
 ├── immutable
 ├── stats: [rows=50]
 ├── key: (15,31)
 ├── fd: (1)-->(2-6,9-15), (2,4,5)~~>(1,3,6), (15)-->(1-6,9-14)
 ├── ordering: +2,+4,+5
 ├── limit
 │    ├── columns: id:1!null name:2!null rarity:3 setname:4 number:5!null isfoil:6!null cardsinfo.cardid:8!null cardsinfo.buyprice:9!null cardsinfo.sellprice:10!null cardsinfo.discount:11!null desiredinventory:12!null actualinventory:13!null maxinventory:14!null cardsinfo.version:15!null sum:30
 │    ├── internal-ordering: +2,+4,+5
 │    ├── cardinality: [0 - 50]
 │    ├── immutable
 │    ├── stats: [rows=50]
 │    ├── key: (8)
 │    ├── fd: (1)-->(2-6), (2,4,5)~~>(1,3,6), (8)-->(1-6,9-15,30), (15)-->(8-14), (1)==(8), (8)==(1)
 │    ├── ordering: +2,+4,+5
 │    ├── sort
 │    │    ├── columns: id:1!null name:2!null rarity:3 setname:4 number:5!null isfoil:6!null cardsinfo.cardid:8!null cardsinfo.buyprice:9!null cardsinfo.sellprice:10!null cardsinfo.discount:11!null desiredinventory:12!null actualinventory:13!null maxinventory:14!null cardsinfo.version:15!null sum:30
 │    │    ├── immutable
 │    │    ├── stats: [rows=19000, distinct(8)=19000, null(8)=0]
 │    │    ├── key: (8)
 │    │    ├── fd: (1)-->(2-6), (2,4,5)~~>(1,3,6), (8)-->(1-6,9-15,30), (15)-->(8-14), (1)==(8), (8)==(1)
 │    │    ├── ordering: +2,+4,+5
 │    │    ├── limit hint: 50.00
 │    │    └── group-by
 │    │         ├── columns: id:1!null name:2!null rarity:3 setname:4 number:5!null isfoil:6!null cardsinfo.cardid:8!null cardsinfo.buyprice:9!null cardsinfo.sellprice:10!null cardsinfo.discount:11!null desiredinventory:12!null actualinventory:13!null maxinventory:14!null cardsinfo.version:15!null sum:30
 │    │         ├── grouping columns: cardsinfo.cardid:8!null
 │    │         ├── immutable
 │    │         ├── stats: [rows=19000, distinct(8)=19000, null(8)=0]
 │    │         ├── key: (8)
 │    │         ├── fd: (1)-->(2-6), (2,4,5)~~>(1,3,6), (8)-->(1-6,9-15,30), (15)-->(8-14), (1)==(8), (8)==(1)
 │    │         ├── right-join (hash)
 │    │         │    ├── columns: id:1!null name:2!null rarity:3 setname:4 number:5!null isfoil:6!null cardsinfo.dealerid:7!null cardsinfo.cardid:8!null cardsinfo.buyprice:9!null cardsinfo.sellprice:10!null cardsinfo.discount:11!null desiredinventory:12!null actualinventory:13!null maxinventory:14!null cardsinfo.version:15!null transactiondetails.dealerid:20 isbuy:21 transactiondate:22 transactiondetails.cardid:23 quantity:24
 │    │         │    ├── immutable
 │    │         │    ├── stats: [rows=5523583.18, distinct(8)=19000, null(8)=0, distinct(23)=19000, null(23)=0]
 │    │         │    ├── key: (8,22-24)
 │    │         │    ├── fd: ()-->(7), (1)-->(2-6), (2,4,5)~~>(1,3,6), (8)-->(9-15), (15)-->(8-14), (1)==(8), (8)==(1), (8,22-24)-->(20,21)
 │    │         │    ├── scan transactiondetails
 │    │         │    │    ├── columns: transactiondetails.dealerid:20!null isbuy:21!null transactiondate:22!null transactiondetails.cardid:23!null quantity:24!null
 │    │         │    │    ├── constraint: /20/21/22/23/24: [/1/false/'2020-02-28 00:00:00+00:00' - /1/false/'2020-03-01 00:00:00+00:00']
 │    │         │    │    ├── stats: [rows=10630000, distinct(20)=1, null(20)=0, distinct(21)=1, null(21)=0, distinct(22)=10630000, null(22)=0, distinct(23)=57000, null(23)=0, distinct(20,21)=1, null(20,21)=0, distinct(20-22)=10630000, null(20-22)=0]
 │    │         │    │    ├── key: (22-24)
 │    │         │    │    └── fd: ()-->(20,21)
 │    │         │    ├── inner-join (merge)
 │    │         │    │    ├── columns: id:1!null name:2!null rarity:3 setname:4 number:5!null isfoil:6!null cardsinfo.dealerid:7!null cardsinfo.cardid:8!null cardsinfo.buyprice:9!null cardsinfo.sellprice:10!null cardsinfo.discount:11!null desiredinventory:12!null actualinventory:13!null maxinventory:14!null cardsinfo.version:15!null
 │    │         │    │    ├── left ordering: +1
 │    │         │    │    ├── right ordering: +8
 │    │         │    │    ├── immutable
 │    │         │    │    ├── stats: [rows=29618.4611, distinct(1)=19000, null(1)=0, distinct(2)=11668.1409, null(2)=0, distinct(5)=829, null(5)=0, distinct(6)=5572.85686, null(6)=0, distinct(7)=1, null(7)=0, distinct(8)=19000, null(8)=0, distinct(9)=21037.9959, null(9)=0, distinct(10)=21037.9959, null(10)=0, distinct(11)=21037.9959, null(11)=0, distinct(12)=21037.9959, null(12)=0, distinct(13)=21037.9959, null(13)=0, distinct(14)=21037.9959, null(14)=0, distinct(15)=23225.5851, null(15)=0]
 │    │         │    │    ├── key: (8)
 │    │         │    │    ├── fd: ()-->(7), (1)-->(2-6), (2,4,5)~~>(1,3,6), (8)-->(9-15), (15)-->(8-14), (1)==(8), (8)==(1)
 │    │         │    │    ├── select
 │    │         │    │    │    ├── columns: id:1!null name:2!null rarity:3 setname:4 number:5!null isfoil:6!null
 │    │         │    │    │    ├── immutable
 │    │         │    │    │    ├── stats: [rows=19000, distinct(1)=19000, null(1)=0, distinct(2)=13000, null(2)=0, distinct(5)=829, null(5)=0, distinct(6)=5601.15328, null(6)=0]
 │    │         │    │    │    ├── key: (1)
 │    │         │    │    │    ├── fd: (1)-->(2-6), (2,4,5)~~>(1,3,6)
 │    │         │    │    │    ├── ordering: +1
 │    │         │    │    │    ├── scan cards
 │    │         │    │    │    │    ├── columns: id:1!null name:2!null rarity:3 setname:4 number:5!null isfoil:6!null
 │    │         │    │    │    │    ├── stats: [rows=57000, distinct(1)=57000, null(1)=0, distinct(2)=39000, null(2)=0, distinct(5)=829, null(5)=0, distinct(6)=5700, null(6)=0]
 │    │         │    │    │    │    ├── key: (1)
 │    │         │    │    │    │    ├── fd: (1)-->(2-6), (2,4,5)~~>(1,3,6)
 │    │         │    │    │    │    └── ordering: +1
 │    │         │    │    │    └── filters
 │    │         │    │    │         └── (name:2, setname:4, number:5) > ('Shock', '7E', 248) [outer=(2,4,5), immutable, constraints=(/2/4/5: [/'Shock'/'7E'/249 - ]; tight)]
 │    │         │    │    ├── scan cardsinfo
 │    │         │    │    │    ├── columns: cardsinfo.dealerid:7!null cardsinfo.cardid:8!null cardsinfo.buyprice:9!null cardsinfo.sellprice:10!null cardsinfo.discount:11!null desiredinventory:12!null actualinventory:13!null maxinventory:14!null cardsinfo.version:15!null
 │    │         │    │    │    ├── constraint: /7/8: [/1 - /1]
 │    │         │    │    │    ├── stats: [rows=58333.3333, distinct(7)=1, null(7)=0, distinct(8)=37420.3552, null(8)=0, distinct(9)=40676.7278, null(9)=0, distinct(10)=40676.7278, null(10)=0, distinct(11)=40676.7278, null(11)=0, distinct(12)=40676.7278, null(12)=0, distinct(13)=40676.7278, null(13)=0, distinct(14)=40676.7278, null(14)=0, distinct(15)=58333.3333, null(15)=0]
 │    │         │    │    │    ├── key: (8)
 │    │         │    │    │    ├── fd: ()-->(7), (8)-->(9-15), (15)-->(8-14)
 │    │         │    │    │    └── ordering: +8 opt(7) [actual: +8]
 │    │         │    │    └── filters (true)
 │    │         │    └── filters
 │    │         │         └── transactiondetails.cardid:23 = id:1 [outer=(1,23), constraints=(/1: (/NULL - ]; /23: (/NULL - ]), fd=(1)==(23), (23)==(1)]
 │    │         └── aggregations
 │    │              ├── sum [as=sum:30, outer=(24)]
 │    │              │    └── quantity:24
 │    │              ├── const-agg [as=id:1, outer=(1)]
 │    │              │    └── id:1
 │    │              ├── const-agg [as=name:2, outer=(2)]
 │    │              │    └── name:2
 │    │              ├── const-agg [as=rarity:3, outer=(3)]
 │    │              │    └── rarity:3
 │    │              ├── const-agg [as=setname:4, outer=(4)]
 │    │              │    └── setname:4
 │    │              ├── const-agg [as=number:5, outer=(5)]
 │    │              │    └── number:5
 │    │              ├── const-agg [as=isfoil:6, outer=(6)]
 │    │              │    └── isfoil:6
 │    │              ├── const-agg [as=cardsinfo.buyprice:9, outer=(9)]
 │    │              │    └── cardsinfo.buyprice:9
 │    │              ├── const-agg [as=cardsinfo.sellprice:10, outer=(10)]
 │    │              │    └── cardsinfo.sellprice:10
 │    │              ├── const-agg [as=cardsinfo.discount:11, outer=(11)]
 │    │              │    └── cardsinfo.discount:11
 │    │              ├── const-agg [as=desiredinventory:12, outer=(12)]
 │    │              │    └── desiredinventory:12
 │    │              ├── const-agg [as=actualinventory:13, outer=(13)]
 │    │              │    └── actualinventory:13
 │    │              ├── const-agg [as=maxinventory:14, outer=(14)]
 │    │              │    └── maxinventory:14
 │    │              └── const-agg [as=cardsinfo.version:15, outer=(15)]
 │    │                   └── cardsinfo.version:15
 │    └── 50
 └── projections
      └── COALESCE(sum:30, 0) [as=value:31, outer=(30)]

# Daily transaction query.
#
# Problems:
#   1. CardsView is actually a join between Cards and CardsInfo tables. But the
#      optimizer is missing join elimination rules. If those were available, we
#      could eliminate the join to Cards (because of FK).
#   2. Inequality predicate terms (accountname / customername) are too
#      selective.
#   3. The Date comparisons should be the last 7 days from the current
#      timestamp. However, the current timestamp is not treated as a constant as
#      it should be.
#   4. The row count estimate for the constrained scan of transactions is too
#      large, causing us to choose the incorrect join algorithm (we should
#      choose a lookup join). Collecting small histograms on all columns would
#      fix the issue.
#
opt format=show-stats
SELECT
  extract(day from d.TransactionDate),
  sum(d.SellPrice * d.Quantity) AS TotalSell,
  sum(d.BuyPrice * d.Quantity) AS TotalBuy,
  sum((d.SellPrice - d.BuyPrice) * d.Quantity) AS TotalProfit
FROM TransactionDetailsView d, TransactionsView t, CardsView c
WHERE
  d.TransactionDate = t.Date AND
  c.Id = d.CardId AND
  NOT d.IsBuy AND
  NOT t.IsBuy AND
  t.Date BETWEEN '2020-03-01'::TIMESTAMPTZ - INTERVAL '7 days' AND '2020-03-01'::TIMESTAMPTZ AND
  t.AccountName <> 'someaccount' AND
  t.customername <> 'somecustomer'
GROUP BY extract(day from d.TransactionDate)
ORDER BY extract(day from d.TransactionDate)
----
sort
 ├── columns: extract:45 totalsell:40!null totalbuy:42!null totalprofit:44!null
 ├── stable
 ├── stats: [rows=750327.164, distinct(45)=750327.164, null(45)=0]
 ├── key: (45)
 ├── fd: (45)-->(40,42,44)
 ├── ordering: +45
 └── group-by
      ├── columns: sum:40!null sum:42!null sum:44!null column45:45
      ├── grouping columns: column45:45
      ├── stable
      ├── stats: [rows=750327.164, distinct(45)=750327.164, null(45)=0]
      ├── key: (45)
      ├── fd: (45)-->(40,42,44)
      ├── project
      │    ├── columns: column39:39!null column41:41!null column43:43!null column45:45
      │    ├── stable
      │    ├── stats: [rows=1198631.87, distinct(45)=750327.164, null(45)=0]
      │    ├── inner-join (hash)
      │    │    ├── columns: transactiondetails.dealerid:1!null transactiondetails.isbuy:2!null transactiondate:3!null transactiondetails.cardid:4!null quantity:5!null transactiondetails.sellprice:6!null transactiondetails.buyprice:7!null transactions.dealerid:11!null transactions.isbuy:12!null date:13!null accountname:14!null customername:15!null id:20!null cardsinfo.dealerid:26!null cardsinfo.cardid:27!null
      │    │    ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
      │    │    ├── stats: [rows=1198631.87, distinct(3)=750327.164, null(3)=0, distinct(4)=37420.3552, null(4)=0, distinct(20)=37420.3552, null(20)=0]
      │    │    ├── key: (5,13,27)
      │    │    ├── fd: ()-->(1,2,11,12,26), (3-5)-->(6,7), (13)-->(14,15), (3)==(13), (13)==(3), (20)==(4,27), (27)==(4,20), (4)==(20,27)
      │    │    ├── inner-join (hash)
      │    │    │    ├── columns: transactiondetails.dealerid:1!null transactiondetails.isbuy:2!null transactiondate:3!null transactiondetails.cardid:4!null quantity:5!null transactiondetails.sellprice:6!null transactiondetails.buyprice:7!null transactions.dealerid:11!null transactions.isbuy:12!null date:13!null accountname:14!null customername:15!null
      │    │    │    ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
      │    │    │    ├── stats: [rows=1171234.57, distinct(1)=1, null(1)=0, distinct(2)=1, null(2)=0, distinct(3)=1171234.57, null(3)=0, distinct(4)=56999.9999, null(4)=0, distinct(5)=1091498.71, null(5)=0, distinct(6)=1091498.71, null(6)=0, distinct(7)=1091498.71, null(7)=0, distinct(11)=1, null(11)=0, distinct(12)=1, null(12)=0, distinct(13)=1171234.57, null(13)=0, distinct(14)=551608.449, null(14)=0, distinct(15)=551608.449, null(15)=0]
      │    │    │    ├── key: (4,5,13)
      │    │    │    ├── fd: ()-->(1,2,11,12), (3-5)-->(6,7), (13)-->(14,15), (3)==(13), (13)==(3)
      │    │    │    ├── scan transactiondetails
      │    │    │    │    ├── columns: transactiondetails.dealerid:1!null transactiondetails.isbuy:2!null transactiondate:3!null transactiondetails.cardid:4!null quantity:5!null transactiondetails.sellprice:6!null transactiondetails.buyprice:7!null
      │    │    │    │    ├── constraint: /1/2/3/4/5: [/1/false/'2020-02-23 00:00:00+00:00' - /1/false/'2020-03-01 00:00:00+00:00']
      │    │    │    │    ├── stats: [rows=10630000, distinct(1)=1, null(1)=0, distinct(2)=1, null(2)=0, distinct(3)=10630000, null(3)=0, distinct(4)=57000, null(4)=0, distinct(5)=8207077.23, null(5)=0, distinct(6)=8207077.23, null(6)=0, distinct(7)=8207077.23, null(7)=0, distinct(1,2)=1, null(1,2)=0, distinct(1-3)=10630000, null(1-3)=0]
      │    │    │    │    ├── key: (3-5)
      │    │    │    │    └── fd: ()-->(1,2), (3-5)-->(6,7)
      │    │    │    ├── select
      │    │    │    │    ├── columns: transactions.dealerid:11!null transactions.isbuy:12!null date:13!null accountname:14!null customername:15!null
      │    │    │    │    ├── stats: [rows=1171234.57, distinct(11)=1, null(11)=0, distinct(12)=1, null(12)=0, distinct(13)=1171234.57, null(13)=0, distinct(14)=666666.667, null(14)=0, distinct(15)=666666.667, null(15)=0, distinct(11,12)=1, null(11,12)=0, distinct(11-15)=1171234.57, null(11-15)=0]
      │    │    │    │    ├── key: (13)
      │    │    │    │    ├── fd: ()-->(11,12), (13)-->(14,15)
      │    │    │    │    ├── scan transactions
      │    │    │    │    │    ├── columns: transactions.dealerid:11!null transactions.isbuy:12!null date:13!null accountname:14!null customername:15!null
      │    │    │    │    │    ├── constraint: /11/12/13: [/1/false/'2020-02-23 00:00:00+00:00' - /1/false/'2020-03-01 00:00:00+00:00']
      │    │    │    │    │    ├── stats: [rows=1181111.11, distinct(11)=1, null(11)=0, distinct(12)=1, null(12)=0, distinct(13)=1181111.11, null(13)=0, distinct(11,12)=1, null(11,12)=0, distinct(11-13)=1181111.11, null(11-13)=0]
      │    │    │    │    │    ├── key: (13)
      │    │    │    │    │    └── fd: ()-->(11,12), (13)-->(14,15)
      │    │    │    │    └── filters
      │    │    │    │         ├── accountname:14 != 'someaccount' [outer=(14), constraints=(/14: (/NULL - /'someaccount') [/e'someaccount\x00' - ]; tight)]
      │    │    │    │         └── customername:15 != 'somecustomer' [outer=(15), constraints=(/15: (/NULL - /'somecustomer') [/e'somecustomer\x00' - ]; tight)]
      │    │    │    └── filters
      │    │    │         └── transactiondate:3 = date:13 [outer=(3,13), constraints=(/3: (/NULL - ]; /13: (/NULL - ]), fd=(3)==(13), (13)==(3)]
      │    │    ├── inner-join (hash)
      │    │    │    ├── columns: id:20!null cardsinfo.dealerid:26!null cardsinfo.cardid:27!null
      │    │    │    ├── multiplicity: left-rows(exactly-one), right-rows(zero-or-one)
      │    │    │    ├── stats: [rows=58333.3333, distinct(20)=37420.3552, null(20)=0, distinct(26)=1, null(26)=0, distinct(27)=37420.3552, null(27)=0]
      │    │    │    ├── key: (27)
      │    │    │    ├── fd: ()-->(26), (20)==(27), (27)==(20)
      │    │    │    ├── scan cardsinfo@cardsinfoversionindex
      │    │    │    │    ├── columns: cardsinfo.dealerid:26!null cardsinfo.cardid:27!null
      │    │    │    │    ├── constraint: /26/34: [/1 - /1]
      │    │    │    │    ├── stats: [rows=58333.3333, distinct(26)=1, null(26)=0, distinct(27)=37420.3552, null(27)=0]
      │    │    │    │    ├── key: (27)
      │    │    │    │    └── fd: ()-->(26)
      │    │    │    ├── scan cards@cardsnamesetnumber
      │    │    │    │    ├── columns: id:20!null
      │    │    │    │    ├── stats: [rows=57000, distinct(20)=57000, null(20)=0]
      │    │    │    │    └── key: (20)
      │    │    │    └── filters
      │    │    │         └── id:20 = cardsinfo.cardid:27 [outer=(20,27), constraints=(/20: (/NULL - ]; /27: (/NULL - ]), fd=(20)==(27), (27)==(20)]
      │    │    └── filters
      │    │         └── id:20 = transactiondetails.cardid:4 [outer=(4,20), constraints=(/4: (/NULL - ]; /20: (/NULL - ]), fd=(4)==(20), (20)==(4)]
      │    └── projections
      │         ├── transactiondetails.sellprice:6 * quantity:5 [as=column39:39, outer=(5,6), immutable]
      │         ├── transactiondetails.buyprice:7 * quantity:5 [as=column41:41, outer=(5,7), immutable]
      │         ├── quantity:5 * (transactiondetails.sellprice:6 - transactiondetails.buyprice:7) [as=column43:43, outer=(5-7), immutable]
      │         └── extract('day', transactiondate:3) [as=column45:45, outer=(3), stable]
      └── aggregations
           ├── sum [as=sum:40, outer=(39)]
           │    └── column39:39
           ├── sum [as=sum:42, outer=(41)]
           │    └── column41:41
           └── sum [as=sum:44, outer=(43)]
                └── column43:43

# Check if transaction was already inserted, for idempotency.
#
# Problems:
#   1. Missing rule to transform AnyOp into ExistsOp when both the scalar
#      inclusion value and subquery column are non-NULL.
#
# NOTE: This looks awkward, but it's adapted from stored procedure code.
opt
SELECT
(
  '70F03EB1-4F58-4C26-B72D-C524A9D537DD'::UUID IN
  (
    SELECT coalesce(OperationId, '00000000-0000-0000-0000-000000000000'::UUID)
    FROM TransactionsView
    WHERE IsBuy = FALSE
  )
) AS AlreadyInserted
----
values
 ├── columns: alreadyinserted:11
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(11)
 └── tuple
      └── any: eq
           ├── project
           │    ├── columns: coalesce:10
           │    ├── scan transactions
           │    │    ├── columns: dealerid:1!null isbuy:2!null operationid:6
           │    │    ├── constraint: /1/2/3: [/1/false - /1/false]
           │    │    ├── lax-key: (6)
           │    │    └── fd: ()-->(1,2)
           │    └── projections
           │         └── COALESCE(operationid:6, '00000000-0000-0000-0000-000000000000') [as=coalesce:10, outer=(6)]
           └── '70f03eb1-4f58-4c26-b72d-c524a9d537dd'

# Get account locations of a list of cards.
opt
WITH CardsToFind AS
(
  SELECT (IdAndQuantity).@1 AS Id, (IdAndQuantity).@2 AS Quantity
  FROM unnest(ARRAY[(42948, 3), (24924, 4)]) AS IdAndQuantity
)
SELECT AccountName, sum(Quantity) AS Quantity
FROM
(
    SELECT Id, AccountName, (CASE WHEN needed.Quantity < have.Quantity THEN needed.Quantity ELSE have.Quantity END) Quantity
    FROM CardsToFind AS needed
    INNER JOIN LATERAL
    (
        SELECT AccountName, Quantity
        FROM InventoryDetails
        WHERE (dealerid = 1 OR dealerid = 2 OR dealerid = 3 OR dealerid = 4 OR dealerid = 5) AND
            CardId = Id AND AccountName = ANY ARRAY['account-1', 'account-2', 'account-3']
    ) AS have
    ON TRUE
) AS allData
GROUP BY AccountName
ORDER BY sum(Quantity) DESC
LIMIT 1000
----
limit
 ├── columns: accountname:10!null quantity:16!null
 ├── internal-ordering: -16
 ├── cardinality: [0 - 1000]
 ├── key: (10)
 ├── fd: (10)-->(16)
 ├── ordering: -16
 ├── sort
 │    ├── columns: accountname:10!null sum:16!null
 │    ├── key: (10)
 │    ├── fd: (10)-->(16)
 │    ├── ordering: -16
 │    ├── limit hint: 1000.00
 │    └── group-by
 │         ├── columns: accountname:10!null sum:16!null
 │         ├── grouping columns: accountname:10!null
 │         ├── key: (10)
 │         ├── fd: (10)-->(16)
 │         ├── project
 │         │    ├── columns: quantity:15!null accountname:10!null
 │         │    ├── inner-join (lookup inventorydetails)
 │         │    │    ├── columns: id:6!null quantity:7!null dealerid:8!null cardid:9!null accountname:10!null inventorydetails.quantity:11!null
 │         │    │    ├── key columns: [8 9 10] = [8 9 10]
 │         │    │    ├── lookup columns are key
 │         │    │    ├── fd: (8-10)-->(11), (6)==(9), (9)==(6)
 │         │    │    ├── inner-join (lookup inventorydetails@inventorydetails_auto_index_inventorydetailscardidkey)
 │         │    │    │    ├── columns: id:6!null quantity:7!null dealerid:8!null cardid:9!null accountname:10!null
 │         │    │    │    ├── key columns: [6] = [9]
 │         │    │    │    ├── fd: (6)==(9), (9)==(6)
 │         │    │    │    ├── values
 │         │    │    │    │    ├── columns: id:6!null quantity:7!null
 │         │    │    │    │    ├── cardinality: [2 - 2]
 │         │    │    │    │    ├── (42948, 3)
 │         │    │    │    │    └── (24924, 4)
 │         │    │    │    └── filters
 │         │    │    │         ├── ((((dealerid:8 = 1) OR (dealerid:8 = 2)) OR (dealerid:8 = 3)) OR (dealerid:8 = 4)) OR (dealerid:8 = 5) [outer=(8), constraints=(/8: [/1 - /1] [/2 - /2] [/3 - /3] [/4 - /4] [/5 - /5]; tight)]
 │         │    │    │         └── accountname:10 IN ('account-1', 'account-2', 'account-3') [outer=(10), constraints=(/10: [/'account-1' - /'account-1'] [/'account-2' - /'account-2'] [/'account-3' - /'account-3']; tight)]
 │         │    │    └── filters (true)
 │         │    └── projections
 │         │         └── CASE WHEN quantity:7 < inventorydetails.quantity:11 THEN quantity:7 ELSE inventorydetails.quantity:11 END [as=quantity:15, outer=(7,11)]
 │         └── aggregations
 │              └── sum [as=sum:16, outer=(15)]
 │                   └── quantity:15
 └── 1000

# Get buy/sell volume of a particular card in the last 2 days.
#
# Problems:
#   1. Multiple duplicate predicates. Scan is already constraining CardId,
#      IsBuy, and TransactionDate. But filters still contain those checks.
#
opt
SELECT coalesce((
    SELECT sum(Quantity) AS Volume
    FROM
    (
        SELECT d.Quantity
        FROM TransactionDetails d
        INNER JOIN Transactions t
        ON d.dealerid = t.dealerid AND d.isbuy = t.isbuy AND d.transactiondate = t.date
        WHERE
          (d.dealerid = 1 OR d.dealerid = 2 OR d.dealerid = 3 OR d.dealerid = 4 OR d.dealerid = 5) AND
          d.isbuy IN (TRUE, FALSE) AND
          d.cardid = 19483 AND
          d.transactiondate BETWEEN '2020-03-01'::TIMESTAMPTZ - INTERVAL '2 days' AND '2020-03-01'::TIMESTAMPTZ
        ORDER BY TransactionDate DESC
        LIMIT 100
    ) t
), 0)
----
values
 ├── columns: coalesce:21
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(21)
 └── tuple
      └── coalesce
           ├── subquery
           │    └── scalar-group-by
           │         ├── columns: sum:20
           │         ├── cardinality: [1 - 1]
           │         ├── key: ()
           │         ├── fd: ()-->(20)
           │         ├── limit
           │         │    ├── columns: d.dealerid:1!null d.isbuy:2!null transactiondate:3!null cardid:4!null quantity:5!null t.dealerid:11!null t.isbuy:12!null date:13!null
           │         │    ├── internal-ordering: -(3|13) opt(4)
           │         │    ├── cardinality: [0 - 100]
           │         │    ├── key: (5,11-13)
           │         │    ├── fd: ()-->(4), (1)==(11), (11)==(1), (2)==(12), (12)==(2), (3)==(13), (13)==(3)
           │         │    ├── inner-join (lookup transactions)
           │         │    │    ├── columns: d.dealerid:1!null d.isbuy:2!null transactiondate:3!null cardid:4!null quantity:5!null t.dealerid:11!null t.isbuy:12!null date:13!null
           │         │    │    ├── key columns: [1 2 3] = [11 12 13]
           │         │    │    ├── lookup columns are key
           │         │    │    ├── key: (5,11-13)
           │         │    │    ├── fd: ()-->(4), (1)==(11), (11)==(1), (2)==(12), (12)==(2), (3)==(13), (13)==(3)
           │         │    │    ├── ordering: -(3|13) opt(4) [actual: -3]
           │         │    │    ├── limit hint: 100.00
           │         │    │    ├── sort
           │         │    │    │    ├── columns: d.dealerid:1!null d.isbuy:2!null transactiondate:3!null cardid:4!null quantity:5!null
           │         │    │    │    ├── key: (1-3,5)
           │         │    │    │    ├── fd: ()-->(4)
           │         │    │    │    ├── ordering: -3 opt(4) [actual: -3]
           │         │    │    │    ├── limit hint: 1100.00
           │         │    │    │    └── scan d@detailscardidindex
           │         │    │    │         ├── columns: d.dealerid:1!null d.isbuy:2!null transactiondate:3!null cardid:4!null quantity:5!null
           │         │    │    │         ├── constraint: /1/2/4/3/5
           │         │    │    │         │    ├── [/1/false/19483/'2020-02-28 00:00:00+00:00' - /1/false/19483/'2020-03-01 00:00:00+00:00']
           │         │    │    │         │    ├── [/1/true/19483/'2020-02-28 00:00:00+00:00' - /1/true/19483/'2020-03-01 00:00:00+00:00']
           │         │    │    │         │    ├── [/2/false/19483/'2020-02-28 00:00:00+00:00' - /2/false/19483/'2020-03-01 00:00:00+00:00']
           │         │    │    │         │    ├── [/2/true/19483/'2020-02-28 00:00:00+00:00' - /2/true/19483/'2020-03-01 00:00:00+00:00']
           │         │    │    │         │    ├── [/3/false/19483/'2020-02-28 00:00:00+00:00' - /3/false/19483/'2020-03-01 00:00:00+00:00']
           │         │    │    │         │    ├── [/3/true/19483/'2020-02-28 00:00:00+00:00' - /3/true/19483/'2020-03-01 00:00:00+00:00']
           │         │    │    │         │    ├── [/4/false/19483/'2020-02-28 00:00:00+00:00' - /4/false/19483/'2020-03-01 00:00:00+00:00']
           │         │    │    │         │    ├── [/4/true/19483/'2020-02-28 00:00:00+00:00' - /4/true/19483/'2020-03-01 00:00:00+00:00']
           │         │    │    │         │    ├── [/5/false/19483/'2020-02-28 00:00:00+00:00' - /5/false/19483/'2020-03-01 00:00:00+00:00']
           │         │    │    │         │    └── [/5/true/19483/'2020-02-28 00:00:00+00:00' - /5/true/19483/'2020-03-01 00:00:00+00:00']
           │         │    │    │         ├── key: (1-3,5)
           │         │    │    │         └── fd: ()-->(4)
           │         │    │    └── filters
           │         │    │         ├── (date:13 >= '2020-02-28 00:00:00+00:00') AND (date:13 <= '2020-03-01 00:00:00+00:00') [outer=(13), constraints=(/13: [/'2020-02-28 00:00:00+00:00' - /'2020-03-01 00:00:00+00:00']; tight)]
           │         │    │         ├── ((((t.dealerid:11 = 1) OR (t.dealerid:11 = 2)) OR (t.dealerid:11 = 3)) OR (t.dealerid:11 = 4)) OR (t.dealerid:11 = 5) [outer=(11), constraints=(/11: [/1 - /1] [/2 - /2] [/3 - /3] [/4 - /4] [/5 - /5]; tight)]
           │         │    │         └── t.isbuy:12 IN (false, true) [outer=(12), constraints=(/12: [/false - /false] [/true - /true]; tight)]
           │         │    └── 100
           │         └── aggregations
           │              └── sum [as=sum:20, outer=(5)]
           │                   └── quantity:5
           └── 0

# --------------------------------------------------
# INSERT/UPDATE/DELETE/UPSERT Queries
# --------------------------------------------------

# Insert buy or sell transaction.
opt
INSERT INTO Transactions (dealerid, isbuy, date, accountname, customername, operationid)
VALUES (1, FALSE, '2020-03-01', 'the-account', 'the-customer', '70F03EB1-4F58-4C26-B72D-C524A9D537DD')
----
insert transactions
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:10 => dealerid:1
 │    ├── column2:11 => isbuy:2
 │    ├── column3:12 => date:3
 │    ├── column4:13 => accountname:4
 │    ├── column5:14 => customername:5
 │    ├── column6:15 => operationid:6
 │    ├── column16:16 => version:7
 │    └── column17:17 => olddate:8
 ├── cardinality: [0 - 0]
 ├── volatile, side-effects, mutations
 └── values
      ├── columns: column1:10!null column2:11!null column3:12!null column4:13!null column5:14!null column6:15!null column16:16 column17:17!null
      ├── cardinality: [1 - 1]
      ├── volatile, side-effects
      ├── key: ()
      ├── fd: ()-->(10-17)
      └── (1, false, '2020-03-01 00:00:00+00:00', 'the-account', 'the-customer', '70f03eb1-4f58-4c26-b72d-c524a9d537dd', cluster_logical_timestamp(), '0001-01-01 00:00:00+00:00')

# Upsert buy or sell transaction.
opt
UPSERT INTO Transactions (dealerid, isbuy, date, accountname, customername, operationid)
VALUES (1, FALSE, '2020-03-01', 'the-account', 'the-customer', '70F03EB1-4F58-4C26-B72D-C524A9D537DD')
----
upsert transactions
 ├── columns: <none>
 ├── canary column: 18
 ├── fetch columns: dealerid:18 isbuy:19 date:20 accountname:21 customername:22 operationid:23 version:24 olddate:25 extra:26
 ├── insert-mapping:
 │    ├── column1:10 => dealerid:1
 │    ├── column2:11 => isbuy:2
 │    ├── column3:12 => date:3
 │    ├── column4:13 => accountname:4
 │    ├── column5:14 => customername:5
 │    ├── column6:15 => operationid:6
 │    ├── column16:16 => version:7
 │    └── column17:17 => olddate:8
 ├── update-mapping:
 │    ├── column4:13 => accountname:4
 │    ├── column5:14 => customername:5
 │    ├── column6:15 => operationid:6
 │    └── column17:17 => olddate:8
 ├── cardinality: [0 - 0]
 ├── volatile, side-effects, mutations
 └── left-join (cross)
      ├── columns: column1:10!null column2:11!null column3:12!null column4:13!null column5:14!null column6:15!null column16:16 column17:17!null dealerid:18 isbuy:19 date:20 accountname:21 customername:22 operationid:23 version:24 olddate:25 extra:26
      ├── cardinality: [1 - 1]
      ├── multiplicity: left-rows(exactly-one), right-rows(exactly-one)
      ├── volatile, side-effects
      ├── key: ()
      ├── fd: ()-->(10-26)
      ├── values
      │    ├── columns: column1:10!null column2:11!null column3:12!null column4:13!null column5:14!null column6:15!null column16:16 column17:17!null
      │    ├── cardinality: [1 - 1]
      │    ├── volatile, side-effects
      │    ├── key: ()
      │    ├── fd: ()-->(10-17)
      │    └── (1, false, '2020-03-01 00:00:00+00:00', 'the-account', 'the-customer', '70f03eb1-4f58-4c26-b72d-c524a9d537dd', cluster_logical_timestamp(), '0001-01-01 00:00:00+00:00')
      ├── scan transactions
      │    ├── columns: dealerid:18!null isbuy:19!null date:20!null accountname:21!null customername:22!null operationid:23 version:24!null olddate:25 extra:26
      │    ├── constraint: /18/19/20: [/1/false/'2020-03-01 00:00:00+00:00' - /1/false/'2020-03-01 00:00:00+00:00']
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    └── fd: ()-->(18-26)
      └── filters (true)

# Insert structured data (c=CardId, q=Quantity, s=SellPrice, b=BuyPrice)
# represented as JSON into TransactionDetails table.
opt
WITH updates AS (SELECT jsonb_array_elements('[
    {"c": 49833, "q": 4, "s": 2.89, "b": 2.29},
    {"c": 29483, "q": 2, "s": 18.93, "b": 17.59}
  ]'::JSONB
) AS Detail)
UPSERT INTO TransactionDetails
(dealerid, isbuy, transactiondate, cardid, quantity, sellprice, buyprice)
SELECT
  1, FALSE, current_timestamp(), (Detail->'c')::TEXT::INT, (Detail->'q')::TEXT::INT,
  (Detail->'s')::TEXT::DECIMAL(10,4), (Detail->'b')::TEXT::DECIMAL(10,4)
FROM updates
----
upsert transactiondetails
 ├── columns: <none>
 ├── canary column: 25
 ├── fetch columns: transactiondetails.dealerid:25 transactiondetails.isbuy:26 transactiondate:27 cardid:28 quantity:29 transactiondetails.sellprice:30 transactiondetails.buyprice:31 transactiondetails.version:32 transactiondetails.discount:33 transactiondetails.extra:34
 ├── insert-mapping:
 │    ├── "?column?":13 => transactiondetails.dealerid:2
 │    ├── bool:14 => transactiondetails.isbuy:3
 │    ├── current_timestamp:15 => transactiondate:4
 │    ├── int8:16 => cardid:5
 │    ├── int8:17 => quantity:6
 │    ├── sellprice:35 => transactiondetails.sellprice:7
 │    ├── buyprice:36 => transactiondetails.buyprice:8
 │    ├── column20:20 => transactiondetails.version:9
 │    └── discount:24 => transactiondetails.discount:10
 ├── update-mapping:
 │    ├── sellprice:35 => transactiondetails.sellprice:7
 │    ├── buyprice:36 => transactiondetails.buyprice:8
 │    └── upsert_discount:44 => transactiondetails.discount:10
 ├── input binding: &2
 ├── cardinality: [0 - 0]
 ├── volatile, side-effects, mutations
 ├── project
 │    ├── columns: upsert_dealerid:38 upsert_isbuy:39 upsert_transactiondate:40 upsert_cardid:41 upsert_discount:44 sellprice:35 buyprice:36 "?column?":13!null bool:14!null current_timestamp:15!null int8:16!null int8:17!null column20:20 discount:24!null transactiondetails.dealerid:25 transactiondetails.isbuy:26 transactiondate:27 cardid:28 quantity:29 transactiondetails.sellprice:30 transactiondetails.buyprice:31 transactiondetails.version:32 transactiondetails.discount:33 transactiondetails.extra:34
 │    ├── cardinality: [1 - 2]
 │    ├── volatile, side-effects
 │    ├── key: (16,17)
 │    ├── fd: ()-->(13-15,24), (16,17)-->(20,25-36,38-40,44), (25-29)-->(30-34), (25)-->(38), (25,26)-->(39), (25,27)-->(40), (16,25,28)-->(41)
 │    ├── left-join (lookup transactiondetails)
 │    │    ├── columns: "?column?":13!null bool:14!null current_timestamp:15!null int8:16!null int8:17!null column20:20 sellprice:22 buyprice:23 discount:24!null transactiondetails.dealerid:25 transactiondetails.isbuy:26 transactiondate:27 cardid:28 quantity:29 transactiondetails.sellprice:30 transactiondetails.buyprice:31 transactiondetails.version:32 transactiondetails.discount:33 transactiondetails.extra:34
 │    │    ├── key columns: [13 14 15 16 17] = [25 26 27 28 29]
 │    │    ├── lookup columns are key
 │    │    ├── cardinality: [1 - 2]
 │    │    ├── volatile, side-effects
 │    │    ├── key: (16,17)
 │    │    ├── fd: ()-->(13-15,24), (16,17)-->(20,22,23,25-34), (25-29)-->(30-34)
 │    │    ├── ensure-upsert-distinct-on
 │    │    │    ├── columns: "?column?":13!null bool:14!null current_timestamp:15!null int8:16!null int8:17!null column20:20 sellprice:22 buyprice:23 discount:24!null
 │    │    │    ├── grouping columns: int8:16!null int8:17!null
 │    │    │    ├── error: "UPSERT or INSERT...ON CONFLICT command cannot affect row a second time"
 │    │    │    ├── cardinality: [1 - 2]
 │    │    │    ├── volatile, side-effects
 │    │    │    ├── key: (16,17)
 │    │    │    ├── fd: ()-->(13-15,24), (16,17)-->(13-15,20,22-24)
 │    │    │    ├── project
 │    │    │    │    ├── columns: sellprice:22 buyprice:23 discount:24!null column20:20 "?column?":13!null bool:14!null current_timestamp:15!null int8:16!null int8:17!null
 │    │    │    │    ├── cardinality: [2 - 2]
 │    │    │    │    ├── volatile, side-effects
 │    │    │    │    ├── fd: ()-->(13-15,24)
 │    │    │    │    ├── values
 │    │    │    │    │    ├── columns: detail_b:64!null detail_c:65!null detail_q:66!null detail_s:67!null
 │    │    │    │    │    ├── cardinality: [2 - 2]
 │    │    │    │    │    ├── ('2.29', '49833', '4', '2.89')
 │    │    │    │    │    └── ('17.59', '29483', '2', '18.93')
 │    │    │    │    └── projections
 │    │    │    │         ├── crdb_internal.round_decimal_values(detail_s:67::STRING::DECIMAL(10,4), 4) [as=sellprice:22, outer=(67), immutable]
 │    │    │    │         ├── crdb_internal.round_decimal_values(detail_b:64::STRING::DECIMAL(10,4), 4) [as=buyprice:23, outer=(64), immutable]
 │    │    │    │         ├── 0.0000 [as=discount:24]
 │    │    │    │         ├── cluster_logical_timestamp() [as=column20:20, volatile, side-effects]
 │    │    │    │         ├── 1 [as="?column?":13]
 │    │    │    │         ├── false [as=bool:14]
 │    │    │    │         ├── '2017-05-10 13:00:00+00:00' [as=current_timestamp:15]
 │    │    │    │         ├── detail_c:65::STRING::INT8 [as=int8:16, outer=(65), immutable]
 │    │    │    │         └── detail_q:66::STRING::INT8 [as=int8:17, outer=(66), immutable]
 │    │    │    └── aggregations
 │    │    │         ├── first-agg [as=sellprice:22, outer=(22)]
 │    │    │         │    └── sellprice:22
 │    │    │         ├── first-agg [as=buyprice:23, outer=(23)]
 │    │    │         │    └── buyprice:23
 │    │    │         ├── first-agg [as=column20:20, outer=(20)]
 │    │    │         │    └── column20:20
 │    │    │         ├── first-agg [as=discount:24, outer=(24)]
 │    │    │         │    └── discount:24
 │    │    │         ├── const-agg [as="?column?":13, outer=(13)]
 │    │    │         │    └── "?column?":13
 │    │    │         ├── const-agg [as=bool:14, outer=(14)]
 │    │    │         │    └── bool:14
 │    │    │         └── const-agg [as=current_timestamp:15, outer=(15)]
 │    │    │              └── current_timestamp:15
 │    │    └── filters (true)
 │    └── projections
 │         ├── CASE WHEN transactiondetails.dealerid:25 IS NULL THEN "?column?":13 ELSE transactiondetails.dealerid:25 END [as=upsert_dealerid:38, outer=(13,25)]
 │         ├── CASE WHEN transactiondetails.dealerid:25 IS NULL THEN bool:14 ELSE transactiondetails.isbuy:26 END [as=upsert_isbuy:39, outer=(14,25,26)]
 │         ├── CASE WHEN transactiondetails.dealerid:25 IS NULL THEN current_timestamp:15 ELSE transactiondate:27 END [as=upsert_transactiondate:40, outer=(15,25,27)]
 │         ├── CASE WHEN transactiondetails.dealerid:25 IS NULL THEN int8:16 ELSE cardid:28 END [as=upsert_cardid:41, outer=(16,25,28)]
 │         ├── CASE WHEN transactiondetails.dealerid:25 IS NULL THEN discount:24 ELSE crdb_internal.round_decimal_values(discount:24, 4) END [as=upsert_discount:44, outer=(24,25), immutable]
 │         ├── crdb_internal.round_decimal_values(sellprice:22, 4) [as=sellprice:35, outer=(22), immutable]
 │         └── crdb_internal.round_decimal_values(buyprice:23, 4) [as=buyprice:36, outer=(23), immutable]
 └── f-k-checks
      ├── f-k-checks-item: transactiondetails(dealerid,isbuy,transactiondate) -> transactions(dealerid,isbuy,date)
      │    └── anti-join (lookup transactions)
      │         ├── columns: upsert_dealerid:45 upsert_isbuy:46 upsert_transactiondate:47
      │         ├── key columns: [45 46 47] = [48 49 50]
      │         ├── lookup columns are key
      │         ├── cardinality: [0 - 2]
      │         ├── with-scan &2
      │         │    ├── columns: upsert_dealerid:45 upsert_isbuy:46 upsert_transactiondate:47
      │         │    ├── mapping:
      │         │    │    ├──  upsert_dealerid:38 => upsert_dealerid:45
      │         │    │    ├──  upsert_isbuy:39 => upsert_isbuy:46
      │         │    │    └──  upsert_transactiondate:40 => upsert_transactiondate:47
      │         │    └── cardinality: [1 - 2]
      │         └── filters (true)
      └── f-k-checks-item: transactiondetails(cardid) -> cards(id)
           └── anti-join (lookup cards)
                ├── columns: upsert_cardid:57
                ├── key columns: [57] = [58]
                ├── lookup columns are key
                ├── cardinality: [0 - 2]
                ├── with-scan &2
                │    ├── columns: upsert_cardid:57
                │    ├── mapping:
                │    │    └──  upsert_cardid:41 => upsert_cardid:57
                │    └── cardinality: [1 - 2]
                └── filters (true)

# Delete inventory detail rows to reflect card transfers.
opt
DELETE FROM InventoryDetails
WHERE dealerid = 1 AND accountname = 'some-account' AND cardid = ANY ARRAY[29483, 1793, 294]
----
delete inventorydetails
 ├── columns: <none>
 ├── fetch columns: dealerid:8 cardid:9 accountname:10
 ├── cardinality: [0 - 0]
 ├── volatile, side-effects, mutations
 └── scan inventorydetails@inventorydetails_auto_index_inventorydetailscardidkey
      ├── columns: dealerid:8!null cardid:9!null accountname:10!null
      ├── constraint: /9/8/10
      │    ├── [/294/1/'some-account' - /294/1/'some-account']
      │    ├── [/1793/1/'some-account' - /1793/1/'some-account']
      │    └── [/29483/1/'some-account' - /29483/1/'some-account']
      ├── cardinality: [0 - 3]
      ├── key: (9)
      └── fd: ()-->(8,10)

# Update CardsInfo inventory numbers (by CardId, Quantity) to reflect card
# transfers.
opt
WITH Updates AS
(
  SELECT (Detail).@1 AS c, (Detail).@2 AS q
  FROM unnest(ARRAY[(42948, 3), (24924, 4)]) AS Detail
)
UPDATE CardsInfo ci
SET actualinventory = (SELECT coalesce(sum_INT(quantity), 0)
                       FROM InventoryDetails id
                       WHERE dealerid = 1 AND id.cardid = ci.cardid)
FROM Updates
WHERE ci.cardid = Updates.c AND ci.dealerid = 1
----
update ci
 ├── columns: <none>
 ├── fetch columns: ci.dealerid:19 ci.cardid:20 buyprice:21 sellprice:22 discount:23 desiredinventory:24 actualinventory:25 maxinventory:26 ci.version:27 ci.discountbuyprice:28 notes:29 oldinventory:30 ci.extra:31
 ├── update-mapping:
 │    ├── actualinventory_new:43 => actualinventory:12
 │    ├── discountbuyprice:47 => ci.discountbuyprice:15
 │    ├── column44:44 => notes:16
 │    └── column45:45 => oldinventory:17
 ├── cardinality: [0 - 0]
 ├── volatile, side-effects, mutations
 └── project
      ├── columns: discountbuyprice:47 column44:44 column45:45!null actualinventory_new:43 ci.dealerid:19!null ci.cardid:20!null buyprice:21!null sellprice:22!null discount:23!null desiredinventory:24!null actualinventory:25!null maxinventory:26!null ci.version:27!null ci.discountbuyprice:28 notes:29 oldinventory:30 ci.extra:31 c:32!null q:33!null
      ├── immutable
      ├── key: (20)
      ├── fd: ()-->(19,44,45), (20)-->(21-33,43,47), (27)-->(20-26,28-31), (20)==(32), (32)==(20)
      ├── group-by
      │    ├── columns: ci.dealerid:19!null ci.cardid:20!null buyprice:21!null sellprice:22!null discount:23!null desiredinventory:24!null actualinventory:25!null maxinventory:26!null ci.version:27!null ci.discountbuyprice:28 notes:29 oldinventory:30 ci.extra:31 c:32!null q:33!null sum_int:41
      │    ├── grouping columns: ci.cardid:20!null
      │    ├── key: (20)
      │    ├── fd: ()-->(19), (20)-->(19,21-33,41), (27)-->(20-26,28-31), (20)==(32), (32)==(20)
      │    ├── left-join (lookup inventorydetails)
      │    │    ├── columns: ci.dealerid:19!null ci.cardid:20!null buyprice:21!null sellprice:22!null discount:23!null desiredinventory:24!null actualinventory:25!null maxinventory:26!null ci.version:27!null ci.discountbuyprice:28 notes:29 oldinventory:30 ci.extra:31 c:32!null q:33!null id.dealerid:34 id.cardid:35 quantity:37
      │    │    ├── key columns: [51 20] = [34 35]
      │    │    ├── fd: ()-->(19), (20)-->(21-33), (27)-->(20-26,28-31), (20)==(32), (32)==(20)
      │    │    ├── project
      │    │    │    ├── columns: "project_const_col_@34":51!null ci.dealerid:19!null ci.cardid:20!null buyprice:21!null sellprice:22!null discount:23!null desiredinventory:24!null actualinventory:25!null maxinventory:26!null ci.version:27!null ci.discountbuyprice:28 notes:29 oldinventory:30 ci.extra:31 c:32!null q:33!null
      │    │    │    ├── cardinality: [0 - 2]
      │    │    │    ├── key: (20)
      │    │    │    ├── fd: ()-->(19,51), (20)-->(21-33), (27)-->(20-26,28-31), (20)==(32), (32)==(20)
      │    │    │    ├── distinct-on
      │    │    │    │    ├── columns: ci.dealerid:19!null ci.cardid:20!null buyprice:21!null sellprice:22!null discount:23!null desiredinventory:24!null actualinventory:25!null maxinventory:26!null ci.version:27!null ci.discountbuyprice:28 notes:29 oldinventory:30 ci.extra:31 c:32!null q:33!null
      │    │    │    │    ├── grouping columns: ci.cardid:20!null
      │    │    │    │    ├── cardinality: [0 - 2]
      │    │    │    │    ├── key: (20)
      │    │    │    │    ├── fd: ()-->(19), (20)-->(19,21-33), (27)-->(20-26,28-31), (20)==(32), (32)==(20)
      │    │    │    │    ├── inner-join (lookup cardsinfo)
      │    │    │    │    │    ├── columns: ci.dealerid:19!null ci.cardid:20!null buyprice:21!null sellprice:22!null discount:23!null desiredinventory:24!null actualinventory:25!null maxinventory:26!null ci.version:27!null ci.discountbuyprice:28 notes:29 oldinventory:30 ci.extra:31 c:32!null q:33!null
      │    │    │    │    │    ├── key columns: [48 32] = [19 20]
      │    │    │    │    │    ├── lookup columns are key
      │    │    │    │    │    ├── cardinality: [0 - 2]
      │    │    │    │    │    ├── fd: ()-->(19), (20)-->(21-31), (27)-->(20-26,28-31), (20)==(32), (32)==(20)
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: "project_const_col_@19":48!null c:32!null q:33!null
      │    │    │    │    │    │    ├── cardinality: [2 - 2]
      │    │    │    │    │    │    ├── fd: ()-->(48)
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: c:32!null q:33!null
      │    │    │    │    │    │    │    ├── cardinality: [2 - 2]
      │    │    │    │    │    │    │    ├── (42948, 3)
      │    │    │    │    │    │    │    └── (24924, 4)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── 1 [as="project_const_col_@19":48]
      │    │    │    │    │    └── filters (true)
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=buyprice:21, outer=(21)]
      │    │    │    │         │    └── buyprice:21
      │    │    │    │         ├── first-agg [as=sellprice:22, outer=(22)]
      │    │    │    │         │    └── sellprice:22
      │    │    │    │         ├── first-agg [as=discount:23, outer=(23)]
      │    │    │    │         │    └── discount:23
      │    │    │    │         ├── first-agg [as=desiredinventory:24, outer=(24)]
      │    │    │    │         │    └── desiredinventory:24
      │    │    │    │         ├── first-agg [as=actualinventory:25, outer=(25)]
      │    │    │    │         │    └── actualinventory:25
      │    │    │    │         ├── first-agg [as=maxinventory:26, outer=(26)]
      │    │    │    │         │    └── maxinventory:26
      │    │    │    │         ├── first-agg [as=ci.version:27, outer=(27)]
      │    │    │    │         │    └── ci.version:27
      │    │    │    │         ├── first-agg [as=ci.discountbuyprice:28, outer=(28)]
      │    │    │    │         │    └── ci.discountbuyprice:28
      │    │    │    │         ├── first-agg [as=notes:29, outer=(29)]
      │    │    │    │         │    └── notes:29
      │    │    │    │         ├── first-agg [as=oldinventory:30, outer=(30)]
      │    │    │    │         │    └── oldinventory:30
      │    │    │    │         ├── first-agg [as=ci.extra:31, outer=(31)]
      │    │    │    │         │    └── ci.extra:31
      │    │    │    │         ├── first-agg [as=c:32, outer=(32)]
      │    │    │    │         │    └── c:32
      │    │    │    │         ├── first-agg [as=q:33, outer=(33)]
      │    │    │    │         │    └── q:33
      │    │    │    │         └── const-agg [as=ci.dealerid:19, outer=(19)]
      │    │    │    │              └── ci.dealerid:19
      │    │    │    └── projections
      │    │    │         └── 1 [as="project_const_col_@34":51]
      │    │    └── filters (true)
      │    └── aggregations
      │         ├── sum-int [as=sum_int:41, outer=(37)]
      │         │    └── quantity:37
      │         ├── const-agg [as=ci.dealerid:19, outer=(19)]
      │         │    └── ci.dealerid:19
      │         ├── const-agg [as=buyprice:21, outer=(21)]
      │         │    └── buyprice:21
      │         ├── const-agg [as=sellprice:22, outer=(22)]
      │         │    └── sellprice:22
      │         ├── const-agg [as=discount:23, outer=(23)]
      │         │    └── discount:23
      │         ├── const-agg [as=desiredinventory:24, outer=(24)]
      │         │    └── desiredinventory:24
      │         ├── const-agg [as=actualinventory:25, outer=(25)]
      │         │    └── actualinventory:25
      │         ├── const-agg [as=maxinventory:26, outer=(26)]
      │         │    └── maxinventory:26
      │         ├── const-agg [as=ci.version:27, outer=(27)]
      │         │    └── ci.version:27
      │         ├── const-agg [as=ci.discountbuyprice:28, outer=(28)]
      │         │    └── ci.discountbuyprice:28
      │         ├── const-agg [as=notes:29, outer=(29)]
      │         │    └── notes:29
      │         ├── const-agg [as=oldinventory:30, outer=(30)]
      │         │    └── oldinventory:30
      │         ├── const-agg [as=ci.extra:31, outer=(31)]
      │         │    └── ci.extra:31
      │         ├── const-agg [as=c:32, outer=(32)]
      │         │    └── c:32
      │         └── const-agg [as=q:33, outer=(33)]
      │              └── q:33
      └── projections
           ├── crdb_internal.round_decimal_values(buyprice:21 - discount:23, 4) [as=discountbuyprice:47, outer=(21,23), immutable]
           ├── CAST(NULL AS STRING) [as=column44:44]
           ├── 0 [as=column45:45]
           └── COALESCE(sum_int:41, 0) [as=actualinventory_new:43, outer=(41)]
