# Tests for InterestingOrderings property.

exec-ddl
CREATE TABLE abc (a INT, b INT, c INT, INDEX (a, b), UNIQUE INDEX (c))
----
TABLE abc
 ├── a int
 ├── b int
 ├── c int
 ├── rowid int not null (hidden)
 ├── INDEX primary
 │    └── rowid int not null (hidden)
 ├── INDEX secondary
 │    ├── a int
 │    ├── b int
 │    └── rowid int not null (hidden)
 └── INDEX secondary
      ├── c int
      └── rowid int not null (hidden) (storing)

# Scan operator.
opt
SELECT * FROM abc
----
scan abc
 ├── columns: a:1(int) b:2(int) c:3(int)
 ├── keys: weak(3)
 ├── prune: (1-3)
 └── interesting orderings: (+1,+2) (+3)

opt
SELECT a, c FROM abc
----
scan abc
 ├── columns: a:1(int) c:3(int)
 ├── keys: weak(3)
 ├── prune: (1,3)
 └── interesting orderings: (+1) (+3)

opt
SELECT b, c FROM abc
----
scan abc
 ├── columns: b:2(int) c:3(int)
 ├── keys: weak(3)
 ├── prune: (2,3)
 └── interesting orderings: (+3)


# Project operator (we use build instead of opt).
build
SELECT a, c FROM abc
----
project
 ├── columns: a:1(int) c:3(int)
 ├── keys: weak(3)
 ├── prune: (1,3)
 ├── interesting orderings: (+1) (+3)
 └── scan abc
      ├── columns: a:1(int) b:2(int) c:3(int) rowid:4(int!null)
      ├── keys: (4) weak(3)
      ├── prune: (1-4)
      └── interesting orderings: (+4) (+1,+2,+4) (+3)

build
SELECT b, c FROM abc
----
project
 ├── columns: b:2(int) c:3(int)
 ├── keys: weak(3)
 ├── prune: (2,3)
 ├── interesting orderings: (+3)
 └── scan abc
      ├── columns: a:1(int) b:2(int) c:3(int) rowid:4(int!null)
      ├── keys: (4) weak(3)
      ├── prune: (1-4)
      └── interesting orderings: (+4) (+1,+2,+4) (+3)

# GroupBy operator.
opt
SELECT min(b), a FROM abc GROUP BY a
----
group-by
 ├── columns: min:5(int) a:1(int)
 ├── grouping columns: a:1(int)
 ├── keys: weak(1)
 ├── prune: (5)
 ├── interesting orderings: (+1)
 ├── scan abc@secondary
 │    ├── columns: a:1(int) b:2(int)
 │    ├── prune: (1,2)
 │    └── interesting orderings: (+1,+2)
 └── aggregations [outer=(2)]
      └── min [type=int, outer=(2)]
           └── variable: abc.b [type=int, outer=(2)]

opt
SELECT min(b), c FROM abc GROUP BY c
----
group-by
 ├── columns: min:5(int) c:3(int)
 ├── grouping columns: c:3(int)
 ├── keys: weak(3)
 ├── prune: (5)
 ├── interesting orderings: (+3)
 ├── scan abc
 │    ├── columns: b:2(int) c:3(int)
 │    ├── keys: weak(3)
 │    ├── prune: (2,3)
 │    └── interesting orderings: (+3)
 └── aggregations [outer=(2)]
      └── min [type=int, outer=(2)]
           └── variable: abc.b [type=int, outer=(2)]

# GroupBy with required ordering.
opt
SELECT array_agg(a), b, c FROM (SELECT * FROM abc ORDER BY b, a) GROUP BY b, c
----
group-by
 ├── columns: array_agg:5(int[]) b:2(int) c:3(int)
 ├── grouping columns: b:2(int) c:3(int)
 ├── ordering: +2,+1
 ├── keys: weak(3)
 ├── prune: (5)
 ├── interesting orderings: (+2)
 ├── sort
 │    ├── columns: a:1(int) b:2(int) c:3(int)
 │    ├── keys: weak(3)
 │    ├── ordering: +2,+1
 │    ├── prune: (1-3)
 │    └── scan abc
 │         ├── columns: a:1(int) b:2(int) c:3(int)
 │         ├── keys: weak(3)
 │         └── prune: (1-3)
 └── aggregations [outer=(1)]
      └── array-agg [type=int[], outer=(1)]
           └── variable: abc.a [type=int, outer=(1)]

# LookupJoin operator.
opt
SELECT * FROM abc WHERE a = 1
----
lookup-join abc
 ├── columns: a:1(int!null) b:2(int) c:3(int)
 ├── key columns: [4]
 ├── keys: weak(3)
 ├── prune: (2,3)
 ├── interesting orderings: (+4) (+1,+2,+4)
 └── scan abc@secondary
      ├── columns: a:1(int!null) b:2(int) rowid:4(int!null)
      ├── constraint: /1/2/4: [/1 - /1]
      ├── keys: (4)
      ├── prune: (2,4)
      └── interesting orderings: (+4) (+1,+2,+4)

# Limit operator.
opt
SELECT * FROM abc ORDER BY a LIMIT 10
----
lookup-join abc
 ├── columns: a:1(int) b:2(int) c:3(int)
 ├── key columns: [4]
 ├── cardinality: [0 - 10]
 ├── keys: weak(3)
 ├── ordering: +1
 ├── prune: (2,3)
 ├── interesting orderings: (+4) (+1,+2,+4)
 └── scan abc@secondary
      ├── columns: a:1(int) b:2(int) rowid:4(int!null)
      ├── limit: 10
      ├── keys: (4)
      ├── ordering: +1
      ├── prune: (2,4)
      └── interesting orderings: (+4) (+1,+2,+4)

opt
SELECT * FROM abc ORDER BY b LIMIT 10
----
limit
 ├── columns: a:1(int) b:2(int) c:3(int)
 ├── cardinality: [0 - 10]
 ├── keys: weak(3)
 ├── ordering: +2
 ├── prune: (1,3)
 ├── interesting orderings: (+2)
 ├── sort
 │    ├── columns: a:1(int) b:2(int) c:3(int)
 │    ├── keys: weak(3)
 │    ├── ordering: +2
 │    ├── prune: (1-3)
 │    └── scan abc
 │         ├── columns: a:1(int) b:2(int) c:3(int)
 │         ├── keys: weak(3)
 │         └── prune: (1-3)
 └── const: 10 [type=int]

opt
SELECT * FROM abc ORDER BY a OFFSET 10
----
offset
 ├── columns: a:1(int) b:2(int) c:3(int)
 ├── keys: weak(3)
 ├── ordering: +1
 ├── prune: (2,3)
 ├── interesting orderings: (+1)
 ├── sort
 │    ├── columns: a:1(int) b:2(int) c:3(int)
 │    ├── keys: weak(3)
 │    ├── ordering: +1
 │    ├── prune: (1-3)
 │    └── scan abc
 │         ├── columns: a:1(int) b:2(int) c:3(int)
 │         ├── keys: weak(3)
 │         └── prune: (1-3)
 └── const: 10 [type=int]

exec-ddl
CREATE TABLE xyz (x INT, y INT, z INT, INDEX(z), UNIQUE INDEX(x,y))
----
TABLE xyz
 ├── x int
 ├── y int
 ├── z int
 ├── rowid int not null (hidden)
 ├── INDEX primary
 │    └── rowid int not null (hidden)
 ├── INDEX secondary
 │    ├── z int
 │    └── rowid int not null (hidden)
 └── INDEX secondary
      ├── x int
      ├── y int
      └── rowid int not null (hidden) (storing)

# Join operator.
opt
SELECT * FROM abc JOIN xyz ON a=x 
----
inner-join
 ├── columns: a:1(int) b:2(int) c:3(int) x:5(int) y:6(int) z:7(int)
 ├── prune: (2,3,6,7)
 ├── interesting orderings: (+1,+2) (+3) (+7) (+5,+6)
 ├── scan abc
 │    ├── columns: a:1(int) b:2(int) c:3(int)
 │    ├── keys: weak(3)
 │    ├── prune: (1-3)
 │    └── interesting orderings: (+1,+2) (+3)
 ├── scan xyz
 │    ├── columns: x:5(int) y:6(int) z:7(int)
 │    ├── keys: weak(5,6)
 │    ├── prune: (5-7)
 │    └── interesting orderings: (+7) (+5,+6)
 └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      └── abc.a = xyz.x [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
