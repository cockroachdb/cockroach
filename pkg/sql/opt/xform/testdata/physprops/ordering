exec-ddl
CREATE TABLE t.a
(
    x INT,
    y FLOAT,
    z DECIMAL,
    s STRING NOT NULL,
    PRIMARY KEY (x, y DESC)
)
----
TABLE a
 ├── x int not null
 ├── y float not null
 ├── z decimal
 ├── s string not null
 └── INDEX primary
      ├── x int not null
      └── y float not null desc

# --------------------------------------------------
# Scan operator.
# --------------------------------------------------

# Order by entire key, in same order as key.
opt
SELECT * FROM a ORDER BY x, y DESC
----
scan a
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 └── ordering: +1,-2

# Order by prefix.
opt
SELECT * FROM a ORDER BY x
----
scan a
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 └── ordering: +1

# Order by additional column.
opt
SELECT * FROM a ORDER BY x, y DESC, z
----
scan a
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 └── ordering: +1,-2,+3

# Order by suffix (scan shouldn't be able to provide).
opt
SELECT * FROM a ORDER BY y DESC
----
sort
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 ├── ordering: -2
 └── scan a
      └── columns: a.x:1(int!null) a.y:2(float!null) a.z:3(decimal) a.s:4(string!null)

# Order by suffix, don't project prefix (scan shouldn't be able to provide).
opt
SELECT y FROM a ORDER BY y DESC
----
sort
 ├── columns: y:2(float!null)
 ├── ordering: -2
 └── scan a
      └── columns: a.y:2(float!null)

# --------------------------------------------------
# Select operator (pass through).
# --------------------------------------------------

# Pass through ordering to scan operator that can support it.
opt
SELECT * FROM a WHERE x>y ORDER BY x, y DESC
----
select
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 ├── ordering: +1,-2
 ├── scan a
 │    ├── columns: a.x:1(int!null) a.y:2(float!null) a.z:3(decimal) a.s:4(string!null)
 │    └── ordering: +1,-2
 └── filters [type=bool]
      └── gt [type=bool]
           ├── variable: a.x [type=int]
           └── variable: a.y [type=float]

# Pass through ordering to scan operator that can't support it.
opt
SELECT * FROM a WHERE x>y ORDER BY z DESC
----
sort
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 ├── ordering: -3
 └── select
      ├── columns: a.x:1(int!null) a.y:2(float!null) a.z:3(decimal) a.s:4(string!null)
      ├── scan a
      │    └── columns: a.x:1(int!null) a.y:2(float!null) a.z:3(decimal) a.s:4(string!null)
      └── filters [type=bool]
           └── gt [type=bool]
                ├── variable: a.x [type=int]
                └── variable: a.y [type=float]

# --------------------------------------------------
# Project operator (pass through).
# --------------------------------------------------

# Pass through ordering to scan operator that can support it.
opt
SELECT x+1, y FROM a ORDER BY x, y DESC
----
project
 ├── columns: column5:5(int) y:2(float!null)
 ├── ordering: +1,-2
 ├── scan a
 │    ├── columns: a.x:1(int!null) a.y:2(float!null)
 │    └── ordering: +1,-2
 └── projections
      ├── plus [type=int]
      │    ├── variable: a.x [type=int]
      │    └── const: 1 [type=int]
      ├── variable: a.y [type=float]
      └── variable: a.x [type=int]

# Pass through ordering to scan operator that can't support it.
opt
SELECT y, x, z+1 FROM a ORDER BY x, y
----
sort
 ├── columns: y:2(float!null) x:1(int!null) column5:5(decimal)
 ├── ordering: +1,+2
 └── project
      ├── columns: a.y:2(float!null) a.x:1(int!null) column5:5(decimal)
      ├── scan a
      │    └── columns: a.x:1(int!null) a.y:2(float!null) a.z:3(decimal)
      └── projections
           ├── variable: a.y [type=float]
           ├── variable: a.x [type=int]
           └── plus [type=decimal]
                ├── variable: a.z [type=decimal]
                └── const: 1 [type=decimal]

# Ordering cannot be passed through because it includes computed column.
opt
SELECT x, 1 one, y FROM a ORDER BY x, one
----
sort
 ├── columns: x:1(int!null) one:5(int) y:2(float!null)
 ├── ordering: +1,+5
 └── project
      ├── columns: a.x:1(int!null) one:5(int) a.y:2(float!null)
      ├── scan a
      │    └── columns: a.x:1(int!null) a.y:2(float!null)
      └── projections
           ├── variable: a.x [type=int]
           ├── const: 1 [type=int]
           └── variable: a.y [type=float]

# --------------------------------------------------
# Select + Project operators (pass through both).
# --------------------------------------------------

# Pass through ordering to scan operator that can support it.
opt
SELECT y, x-1 FROM a WHERE x>y ORDER BY x, y DESC
----
project
 ├── columns: y:2(float!null) column5:5(int)
 ├── ordering: +1,-2
 ├── select
 │    ├── columns: a.x:1(int!null) a.y:2(float!null)
 │    ├── ordering: +1,-2
 │    ├── scan a
 │    │    ├── columns: a.x:1(int!null) a.y:2(float!null)
 │    │    └── ordering: +1,-2
 │    └── filters [type=bool]
 │         └── gt [type=bool]
 │              ├── variable: a.x [type=int]
 │              └── variable: a.y [type=float]
 └── projections
      ├── variable: a.y [type=float]
      ├── minus [type=int]
      │    ├── variable: a.x [type=int]
      │    └── const: 1 [type=int]
      └── variable: a.x [type=int]

memo
SELECT y, x-1 FROM a WHERE x>y ORDER BY x, y DESC
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    ├── "[presentation: y:2,column5:5] [ordering: +1,-2]"
 │    │    ├── best: (project G2="[ordering: +1,-2]" G3)
 │    │    └── cost: 1100.00
 │    └── ""
 │         ├── best: (project G2 G3)
 │         └── cost: 1100.00
 ├── G2: (select G4 G5)
 │    ├── ""
 │    │    ├── best: (select G4 G5)
 │    │    └── cost: 1100.00
 │    └── "[ordering: +1,-2]"
 │         ├── best: (select G4="[ordering: +1,-2]" G5)
 │         └── cost: 1100.00
 ├── G3: (projections G10 G6 G9)
 ├── G4: (scan a)
 │    ├── ""
 │    │    ├── best: (scan a)
 │    │    └── cost: 1000.00
 │    └── "[ordering: +1,-2]"
 │         ├── best: (scan a)
 │         └── cost: 1000.00
 ├── G5: (filters G7)
 ├── G6: (minus G9 G8)
 ├── G7: (gt G9 G10)
 ├── G8: (const 1)
 ├── G9: (variable a.x)
 └── G10: (variable a.y)

# Pass through ordering to scan operator that can't support it.
opt
SELECT y, z FROM a WHERE x>y ORDER BY y
----
sort
 ├── columns: y:2(float!null) z:3(decimal)
 ├── ordering: +2
 └── project
      ├── columns: a.y:2(float!null) a.z:3(decimal)
      ├── select
      │    ├── columns: a.x:1(int!null) a.y:2(float!null) a.z:3(decimal)
      │    ├── scan a
      │    │    └── columns: a.x:1(int!null) a.y:2(float!null) a.z:3(decimal)
      │    └── filters [type=bool]
      │         └── gt [type=bool]
      │              ├── variable: a.x [type=int]
      │              └── variable: a.y [type=float]
      └── projections
           ├── variable: a.y [type=float]
           └── variable: a.z [type=decimal]

memo
SELECT y, z FROM a WHERE x>y ORDER BY y
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    ├── "[presentation: y:2,z:3] [ordering: +2]"
 │    │    ├── best: (sort G1)
 │    │    └── cost: 1125.00
 │    └── ""
 │         ├── best: (project G2 G3)
 │         └── cost: 1100.00
 ├── G2: (select G4 G5)
 │    ├── ""
 │    │    ├── best: (select G4 G5)
 │    │    └── cost: 1100.00
 │    └── "[ordering: +2]"
 │         ├── best: (sort G2)
 │         └── cost: 1125.00
 ├── G3: (projections G9 G6)
 ├── G4: (scan a)
 │    ├── ""
 │    │    ├── best: (scan a)
 │    │    └── cost: 1000.00
 │    └── "[ordering: +2]"
 │         ├── best: (sort G4)
 │         └── cost: 1250.00
 ├── G5: (filters G7)
 ├── G6: (variable a.z)
 ├── G7: (gt G8 G9)
 ├── G8: (variable a.x)
 └── G9: (variable a.y)
