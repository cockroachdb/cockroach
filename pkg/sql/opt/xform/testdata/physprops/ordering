exec-ddl
CREATE TABLE t.a
(
    x INT,
    y FLOAT,
    z DECIMAL,
    s STRING NOT NULL,
    PRIMARY KEY (x, y DESC)
)
----
TABLE a
 ├── x int not null
 ├── y float not null
 ├── z decimal
 ├── s string not null
 └── INDEX primary
      ├── x int not null
      └── y float not null desc

# --------------------------------------------------
# Scan operator.
# --------------------------------------------------

# Order by entire key, in same order as key.
opt
SELECT * FROM a ORDER BY x, y DESC
----
scan a
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 └── ordering: +1,-2

# Order by prefix.
opt
SELECT * FROM a ORDER BY x
----
scan a
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 └── ordering: +1

# Order by additional column (should be dropped by optimizer).
opt
SELECT * FROM a ORDER BY x, y DESC, z
----
scan a
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 └── ordering: +1,-2

# Order by suffix (scan shouldn't be able to provide).
opt
SELECT * FROM a ORDER BY y DESC
----
sort
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 ├── ordering: -2
 └── scan a
      └── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)

# Order by suffix, don't project prefix (scan shouldn't be able to provide).
opt
SELECT y FROM a ORDER BY y DESC
----
sort
 ├── columns: y:2(float!null)
 ├── ordering: -2
 └── scan a
      └── columns: y:2(float!null)

# --------------------------------------------------
# Select operator (pass through).
# --------------------------------------------------

# Pass through ordering to scan operator that can support it.
opt
SELECT * FROM a WHERE x>y ORDER BY x, y DESC
----
select
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 ├── ordering: +1,-2
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 │    └── ordering: +1,-2
 └── filters [type=bool]
      └── a.x > a.y [type=bool]

# Pass through ordering to scan operator that can't support it.
opt
SELECT * FROM a WHERE x>y ORDER BY z DESC
----
sort
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 ├── ordering: -3
 └── select
      ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
      ├── scan a
      │    └── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
      └── filters [type=bool]
           └── a.x > a.y [type=bool]

# --------------------------------------------------
# Project operator (pass through).
# --------------------------------------------------

# Pass through ordering to scan operator that can support it.
opt
SELECT x+1 AS r, y FROM a ORDER BY x, y DESC
----
project
 ├── columns: r:5(int) y:2(float!null)
 ├── ordering: +1,-2
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(float!null)
 │    └── ordering: +1,-2
 └── projections
      └── a.x + 1 [type=int]

# Pass through ordering to scan operator that can't support it.
opt
SELECT y, x, z+1 AS r FROM a ORDER BY x, y
----
sort
 ├── columns: y:2(float!null) x:1(int!null) r:5(decimal)
 ├── ordering: +1,+2
 └── project
      ├── columns: r:5(decimal) x:1(int!null) y:2(float!null)
      ├── scan a
      │    └── columns: x:1(int!null) y:2(float!null) z:3(decimal)
      └── projections
           └── a.z + 1 [type=decimal]

# Ordering cannot be passed through because it includes computed column.
opt
SELECT x, y+1 AS computed, y FROM a ORDER BY x, computed
----
sort
 ├── columns: x:1(int!null) computed:5(float) y:2(float!null)
 ├── ordering: +1,+5
 └── project
      ├── columns: computed:5(float) x:1(int!null) y:2(float!null)
      ├── scan a
      │    └── columns: x:1(int!null) y:2(float!null)
      └── projections
           └── a.y + 1.0 [type=float]

# --------------------------------------------------
# Select + Project operators (pass through both).
# --------------------------------------------------

# Pass through ordering to scan operator that can support it.
opt
SELECT y, x-1 AS z FROM a WHERE x>y ORDER BY x, y DESC
----
project
 ├── columns: y:2(float!null) z:5(int)
 ├── ordering: +1,-2
 ├── select
 │    ├── columns: x:1(int!null) y:2(float!null)
 │    ├── ordering: +1,-2
 │    ├── scan a
 │    │    ├── columns: x:1(int!null) y:2(float!null)
 │    │    └── ordering: +1,-2
 │    └── filters [type=bool]
 │         └── a.x > a.y [type=bool]
 └── projections
      └── a.x - 1 [type=int]

memo
SELECT y, x-1 AS z FROM a WHERE x>y ORDER BY x, y DESC
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    ├── "[presentation: y:2,z:5] [ordering: +1,-2]"
 │    │    ├── best: (project G2="[ordering: +1,-2]" G3)
 │    │    └── cost: 1070.00
 │    └── ""
 │         ├── best: (project G2 G3)
 │         └── cost: 1070.00
 ├── G2: (select G4 G5)
 │    ├── ""
 │    │    ├── best: (select G4 G5)
 │    │    └── cost: 1070.00
 │    └── "[ordering: +1,-2]"
 │         ├── best: (select G4="[ordering: +1,-2]" G5)
 │         └── cost: 1070.00
 ├── G3: (projections G6 a.x a.y)
 ├── G4: (scan a,cols=(1,2)) (scan a,rev,cols=(1,2))
 │    ├── ""
 │    │    ├── best: (scan a,cols=(1,2))
 │    │    └── cost: 1060.00
 │    └── "[ordering: +1,-2]"
 │         ├── best: (scan a,cols=(1,2))
 │         └── cost: 1060.00
 ├── G5: (filters G7)
 ├── G6: (minus G9 G8)
 ├── G7: (gt G9 G10)
 ├── G8: (const 1)
 ├── G9: (variable a.x)
 └── G10: (variable a.y)

# Pass through ordering to scan operator that can't support it.
opt
SELECT y, z FROM a WHERE x>y ORDER BY y
----
sort
 ├── columns: y:2(float!null) z:3(decimal)
 ├── ordering: +2
 └── project
      ├── columns: y:2(float!null) z:3(decimal)
      └── select
           ├── columns: x:1(int!null) y:2(float!null) z:3(decimal)
           ├── scan a
           │    └── columns: x:1(int!null) y:2(float!null) z:3(decimal)
           └── filters [type=bool]
                └── a.x > a.y [type=bool]

memo
SELECT y, z FROM a WHERE x>y ORDER BY y
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    ├── "[presentation: y:2,z:3] [ordering: +2]"
 │    │    ├── best: (sort G1)
 │    │    └── cost: 1087.55
 │    └── ""
 │         ├── best: (project G2 G3)
 │         └── cost: 1080.00
 ├── G2: (select G4 G5)
 │    ├── ""
 │    │    ├── best: (select G4 G5)
 │    │    └── cost: 1080.00
 │    └── "[ordering: +2]"
 │         ├── best: (sort G2)
 │         └── cost: 1087.55
 ├── G3: (projections a.y a.z)
 ├── G4: (scan a,cols=(1-3)) (scan a,rev,cols=(1-3))
 │    ├── ""
 │    │    ├── best: (scan a,cols=(1-3))
 │    │    └── cost: 1070.00
 │    └── "[ordering: +2]"
 │         ├── best: (sort G4)
 │         └── cost: 1169.66
 ├── G5: (filters G6)
 ├── G6: (gt G7 G8)
 ├── G7: (variable a.x)
 └── G8: (variable a.y)

# --------------------------------------------------
# GroupBy operator.
# --------------------------------------------------
opt
SELECT array_agg(z) FROM (SELECT * FROM a ORDER BY y)
----
scalar-group-by
 ├── columns: array_agg:5(decimal[])
 ├── ordering: +2
 ├── sort
 │    ├── columns: y:2(float!null) z:3(decimal)
 │    ├── ordering: +2
 │    └── scan a
 │         └── columns: y:2(float!null) z:3(decimal)
 └── aggregations
      └── array-agg [type=decimal[]]
           └── variable: a.z [type=decimal]

opt
SELECT array_agg(x) FROM (SELECT * FROM a ORDER BY x, y DESC)
----
scalar-group-by
 ├── columns: array_agg:5(int[])
 ├── ordering: +1,-2
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(float!null)
 │    └── ordering: +1,-2
 └── aggregations
      └── array-agg [type=int[]]
           └── variable: a.x [type=int]

# --------------------------------------------------
# Explain operator.
# --------------------------------------------------
opt
EXPLAIN (VERBOSE) SELECT * FROM a ORDER BY y
----
explain
 ├── columns: tree:5(string) field:8(string) description:9(string) columns:10(string) ordering:11(string)
 └── sort
      ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
      ├── ordering: +2
      └── scan a
           └── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)

memo
EXPLAIN (VERBOSE) SELECT * FROM a ORDER BY y
----
memo (optimized)
 ├── G1: (explain G2 [presentation: x:1,y:2,z:3,s:4] [ordering: +2])
 │    └── "[presentation: tree:5,field:8,description:9,columns:10,ordering:11]"
 │         ├── best: (explain G2="[presentation: x:1,y:2,z:3,s:4] [ordering: +2]" [presentation: x:1,y:2,z:3,s:4] [ordering: +2])
 │         └── cost: 1179.66
 └── G2: (scan a) (scan a,rev)
      ├── ""
      │    ├── best: (scan a)
      │    └── cost: 1080.00
      └── "[presentation: x:1,y:2,z:3,s:4] [ordering: +2]"
           ├── best: (sort G2)
           └── cost: 1179.66

# --------------------------------------------------
# With Ordinality
# --------------------------------------------------

memo
SELECT y FROM a WITH ORDINALITY ORDER BY ordinality
----
memo (optimized)
 ├── G1: (row-number G2)
 │    ├── "[presentation: y:2] [ordering: +5]"
 │    │    ├── best: (row-number G2)
 │    │    └── cost: 1050.00
 │    └── ""
 │         ├── best: (row-number G2)
 │         └── cost: 1050.00
 └── G2: (scan a,cols=(2)) (scan a,rev,cols=(2))
      └── ""
           ├── best: (scan a,cols=(2))
           └── cost: 1050.00

memo
SELECT y FROM a WITH ORDINALITY ORDER BY -ordinality
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    ├── "[presentation: y:2] [ordering: +6]"
 │    │    ├── best: (sort G1)
 │    │    └── cost: 1149.66
 │    └── ""
 │         ├── best: (project G2 G3)
 │         └── cost: 1050.00
 ├── G2: (row-number G4)
 │    └── ""
 │         ├── best: (row-number G4)
 │         └── cost: 1050.00
 ├── G3: (projections G5 a.y)
 ├── G4: (scan a,cols=(2)) (scan a,rev,cols=(2))
 │    └── ""
 │         ├── best: (scan a,cols=(2))
 │         └── cost: 1050.00
 ├── G5: (unary-minus G6)
 └── G6: (variable ordinality)

memo
SELECT y FROM a WITH ORDINALITY ORDER BY ordinality, x
----
memo (optimized)
 ├── G1: (row-number G2)
 │    ├── "[presentation: y:2] [ordering: +5]"
 │    │    ├── best: (row-number G2)
 │    │    └── cost: 1050.00
 │    └── ""
 │         ├── best: (row-number G2)
 │         └── cost: 1050.00
 └── G2: (scan a,cols=(2)) (scan a,rev,cols=(2))
      └── ""
           ├── best: (scan a,cols=(2))
           └── cost: 1050.00

memo
SELECT y FROM (SELECT * FROM a ORDER BY y) WITH ORDINALITY ORDER BY y, ordinality
----
memo (optimized)
 ├── G1: (row-number G2 ordering=+2)
 │    ├── "[presentation: y:2] [ordering: +2,+5]"
 │    │    ├── best: (row-number G2="[ordering: +2]" ordering=+2)
 │    │    └── cost: 1149.66
 │    └── ""
 │         ├── best: (row-number G2="[ordering: +2]" ordering=+2)
 │         └── cost: 1149.66
 └── G2: (scan a,cols=(2)) (scan a,rev,cols=(2))
      ├── ""
      │    ├── best: (scan a,cols=(2))
      │    └── cost: 1050.00
      └── "[ordering: +2]"
           ├── best: (sort G2)
           └── cost: 1149.66

memo
SELECT y FROM (SELECT * FROM a ORDER BY y) WITH ORDINALITY ORDER BY ordinality, y
----
memo (optimized)
 ├── G1: (row-number G2 ordering=+2)
 │    ├── "[presentation: y:2] [ordering: +5]"
 │    │    ├── best: (row-number G2="[ordering: +2]" ordering=+2)
 │    │    └── cost: 1149.66
 │    └── ""
 │         ├── best: (row-number G2="[ordering: +2]" ordering=+2)
 │         └── cost: 1149.66
 └── G2: (scan a,cols=(2)) (scan a,rev,cols=(2))
      ├── ""
      │    ├── best: (scan a,cols=(2))
      │    └── cost: 1050.00
      └── "[ordering: +2]"
           ├── best: (sort G2)
           └── cost: 1149.66

memo
SELECT y FROM a WITH ORDINALITY ORDER BY ordinality DESC
----
memo (optimized)
 ├── G1: (row-number G2)
 │    ├── "[presentation: y:2] [ordering: -5]"
 │    │    ├── best: (sort G1)
 │    │    └── cost: 1149.66
 │    └── ""
 │         ├── best: (row-number G2)
 │         └── cost: 1050.00
 └── G2: (scan a,cols=(2)) (scan a,rev,cols=(2))
      └── ""
           ├── best: (scan a,cols=(2))
           └── cost: 1050.00
