exec-ddl
CREATE TABLE t.a
(
    x INT,
    y FLOAT,
    z DECIMAL,
    s STRING NOT NULL,
    PRIMARY KEY (x, y DESC)
)
----
TABLE a
 ├── x int not null
 ├── y float not null
 ├── z decimal
 ├── s string not null
 └── INDEX primary
      ├── x int not null
      └── y float not null desc

# --------------------------------------------------
# Scan operator.
# --------------------------------------------------

# Order by entire key, in same order as key.
opt
SELECT * FROM a ORDER BY x, y DESC
----
scan a
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 └── ordering: +1,-2

# Order by prefix.
opt
SELECT * FROM a ORDER BY x
----
scan a
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 └── ordering: +1

# Order by additional column (should be dropped by optimizer).
opt
SELECT * FROM a ORDER BY x, y DESC, z
----
scan a
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 └── ordering: +1,-2

# Order by suffix (scan shouldn't be able to provide).
opt
SELECT * FROM a ORDER BY y DESC
----
sort
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 ├── ordering: -2
 └── scan a
      └── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)

# Order by suffix, don't project prefix (scan shouldn't be able to provide).
opt
SELECT y FROM a ORDER BY y DESC
----
sort
 ├── columns: y:2(float!null)
 ├── ordering: -2
 └── scan a
      └── columns: y:2(float!null)

# --------------------------------------------------
# Select operator (pass through).
# --------------------------------------------------

# Pass through ordering to scan operator that can support it.
opt
SELECT * FROM a WHERE x>y ORDER BY x, y DESC
----
select
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 ├── ordering: +1,-2
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 │    └── ordering: +1,-2
 └── filters [type=bool]
      └── a.x > a.y [type=bool]

# Pass through ordering to scan operator that can't support it.
opt
SELECT * FROM a WHERE x>y ORDER BY z DESC
----
sort
 ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
 ├── ordering: -3
 └── select
      ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
      ├── scan a
      │    └── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
      └── filters [type=bool]
           └── a.x > a.y [type=bool]

# --------------------------------------------------
# Project operator (pass through).
# --------------------------------------------------

# Pass through ordering to scan operator that can support it.
opt
SELECT x+1 AS r, y FROM a ORDER BY x, y DESC
----
project
 ├── columns: r:5(int) y:2(float!null)
 ├── ordering: +1,-2
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(float!null)
 │    └── ordering: +1,-2
 └── projections
      └── a.x + 1 [type=int]

# Pass through ordering to scan operator that can't support it.
opt
SELECT y, x, z+1 AS r FROM a ORDER BY x, y
----
sort
 ├── columns: y:2(float!null) x:1(int!null) r:5(decimal)
 ├── ordering: +1,+2
 └── project
      ├── columns: r:5(decimal) x:1(int!null) y:2(float!null)
      ├── scan a
      │    └── columns: x:1(int!null) y:2(float!null) z:3(decimal)
      └── projections
           └── a.z + 1 [type=decimal]

# Ordering cannot be passed through because it includes computed column.
opt
SELECT x, y+1 AS computed, y FROM a ORDER BY x, computed
----
sort
 ├── columns: x:1(int!null) computed:5(float) y:2(float!null)
 ├── ordering: +1,+5
 └── project
      ├── columns: computed:5(float) x:1(int!null) y:2(float!null)
      ├── scan a
      │    └── columns: x:1(int!null) y:2(float!null)
      └── projections
           └── a.y + 1.0 [type=float]

# --------------------------------------------------
# Select + Project operators (pass through both).
# --------------------------------------------------

# Pass through ordering to scan operator that can support it.
opt
SELECT y, x-1 AS z FROM a WHERE x>y ORDER BY x, y DESC
----
project
 ├── columns: y:2(float!null) z:5(int)
 ├── ordering: +1,-2
 ├── select
 │    ├── columns: x:1(int!null) y:2(float!null)
 │    ├── ordering: +1,-2
 │    ├── scan a
 │    │    ├── columns: x:1(int!null) y:2(float!null)
 │    │    └── ordering: +1,-2
 │    └── filters [type=bool]
 │         └── a.x > a.y [type=bool]
 └── projections
      └── a.x - 1 [type=int]

memo
SELECT y, x-1 AS z FROM a WHERE x>y ORDER BY x, y DESC
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    ├── "[presentation: y:2,z:5] [ordering: +1,-2]"
 │    │    ├── best: (project G2="[ordering: +1,-2]" G3)
 │    │    └── cost: 1072.22
 │    └── ""
 │         ├── best: (project G2 G3)
 │         └── cost: 1072.22
 ├── G2: (select G4 G5)
 │    ├── ""
 │    │    ├── best: (select G4 G5)
 │    │    └── cost: 1070.00
 │    └── "[ordering: +1,-2]"
 │         ├── best: (select G4="[ordering: +1,-2]" G5)
 │         └── cost: 1070.00
 ├── G3: (projections G6 a.x a.y)
 ├── G4: (scan a,cols=(1,2)) (scan a,rev,cols=(1,2))
 │    ├── ""
 │    │    ├── best: (scan a,cols=(1,2))
 │    │    └── cost: 1060.00
 │    └── "[ordering: +1,-2]"
 │         ├── best: (scan a,cols=(1,2))
 │         └── cost: 1060.00
 ├── G5: (filters G7)
 ├── G6: (minus G9 G8)
 ├── G7: (gt G9 G10)
 ├── G8: (const 1)
 ├── G9: (variable a.x)
 └── G10: (variable a.y)

# Pass through ordering to scan operator that can't support it.
opt
SELECT y, z FROM a WHERE x>y ORDER BY y
----
sort
 ├── columns: y:2(float!null) z:3(decimal)
 ├── ordering: +2
 └── project
      ├── columns: y:2(float!null) z:3(decimal)
      └── select
           ├── columns: x:1(int!null) y:2(float!null) z:3(decimal)
           ├── scan a
           │    └── columns: x:1(int!null) y:2(float!null) z:3(decimal)
           └── filters [type=bool]
                └── a.x > a.y [type=bool]

memo
SELECT y, z FROM a WHERE x>y ORDER BY y
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    ├── "[presentation: y:2,z:3] [ordering: +2]"
 │    │    ├── best: (sort G1)
 │    │    └── cost: 1097.32
 │    └── ""
 │         ├── best: (project G2 G3)
 │         └── cost: 1081.11
 ├── G2: (select G4 G5)
 │    ├── ""
 │    │    ├── best: (select G4 G5)
 │    │    └── cost: 1080.00
 │    └── "[ordering: +2]"
 │         ├── best: (sort G2)
 │         └── cost: 1096.21
 ├── G3: (projections a.y a.z)
 ├── G4: (scan a,cols=(1-3)) (scan a,rev,cols=(1-3))
 │    ├── ""
 │    │    ├── best: (scan a,cols=(1-3))
 │    │    └── cost: 1070.00
 │    └── "[ordering: +2]"
 │         ├── best: (sort G4)
 │         └── cost: 1279.32
 ├── G5: (filters G6)
 ├── G6: (gt G7 G8)
 ├── G7: (variable a.x)
 └── G8: (variable a.y)

# --------------------------------------------------
# GroupBy operator.
# --------------------------------------------------
opt
SELECT array_agg(z) FROM (SELECT * FROM a ORDER BY y)
----
scalar-group-by
 ├── columns: array_agg:5(decimal[])
 ├── sort
 │    ├── columns: y:2(float!null) z:3(decimal)
 │    ├── ordering: +2
 │    └── scan a
 │         └── columns: y:2(float!null) z:3(decimal)
 └── aggregations
      └── array-agg [type=decimal[]]
           └── variable: a.z [type=decimal]

opt
SELECT array_agg(x) FROM (SELECT * FROM a ORDER BY x, y DESC)
----
scalar-group-by
 ├── columns: array_agg:5(int[])
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(float!null)
 │    └── ordering: +1,-2
 └── aggregations
      └── array-agg [type=int[]]
           └── variable: a.x [type=int]

# --------------------------------------------------
# Explain operator.
# --------------------------------------------------
opt
EXPLAIN (VERBOSE) SELECT * FROM a ORDER BY y
----
explain
 ├── columns: tree:5(string) field:8(string) description:9(string) columns:10(string) ordering:11(string)
 └── sort
      ├── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)
      ├── ordering: +2
      └── scan a
           └── columns: x:1(int!null) y:2(float!null) z:3(decimal) s:4(string!null)

memo
EXPLAIN (VERBOSE) SELECT * FROM a ORDER BY y
----
memo (optimized)
 ├── G1: (explain G2 [presentation: x:1,y:2,z:3,s:4] [ordering: +2])
 │    └── "[presentation: tree:5,field:8,description:9,columns:10,ordering:11]"
 │         ├── best: (explain G2="[presentation: x:1,y:2,z:3,s:4] [ordering: +2]" [presentation: x:1,y:2,z:3,s:4] [ordering: +2])
 │         └── cost: 1289.32
 └── G2: (scan a) (scan a,rev)
      ├── ""
      │    ├── best: (scan a)
      │    └── cost: 1080.00
      └── "[presentation: x:1,y:2,z:3,s:4] [ordering: +2]"
           ├── best: (sort G2)
           └── cost: 1289.32

# --------------------------------------------------
# With Ordinality
# --------------------------------------------------

memo
SELECT y FROM a WITH ORDINALITY ORDER BY ordinality
----
memo (optimized)
 ├── G1: (row-number G2)
 │    ├── "[presentation: y:2] [ordering: +5]"
 │    │    ├── best: (row-number G2)
 │    │    └── cost: 1060.00
 │    └── ""
 │         ├── best: (row-number G2)
 │         └── cost: 1060.00
 └── G2: (scan a,cols=(2)) (scan a,rev,cols=(2))
      └── ""
           ├── best: (scan a,cols=(2))
           └── cost: 1050.00

memo
SELECT y FROM a WITH ORDINALITY ORDER BY -ordinality
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    ├── "[presentation: y:2] [ordering: +6]"
 │    │    ├── best: (sort G1)
 │    │    └── cost: 1289.32
 │    └── ""
 │         ├── best: (project G2 G3)
 │         └── cost: 1080.00
 ├── G2: (row-number G4)
 │    └── ""
 │         ├── best: (row-number G4)
 │         └── cost: 1060.00
 ├── G3: (projections G5 a.y)
 ├── G4: (scan a,cols=(2)) (scan a,rev,cols=(2))
 │    └── ""
 │         ├── best: (scan a,cols=(2))
 │         └── cost: 1050.00
 ├── G5: (unary-minus G6)
 └── G6: (variable ordinality)

memo
SELECT y FROM a WITH ORDINALITY ORDER BY ordinality, x
----
memo (optimized)
 ├── G1: (row-number G2)
 │    ├── "[presentation: y:2] [ordering: +5]"
 │    │    ├── best: (row-number G2)
 │    │    └── cost: 1060.00
 │    └── ""
 │         ├── best: (row-number G2)
 │         └── cost: 1060.00
 └── G2: (scan a,cols=(2)) (scan a,rev,cols=(2))
      └── ""
           ├── best: (scan a,cols=(2))
           └── cost: 1050.00

memo
SELECT y FROM (SELECT * FROM a ORDER BY y) WITH ORDINALITY ORDER BY y, ordinality
----
memo (optimized)
 ├── G1: (row-number G2 ordering=+2)
 │    ├── "[presentation: y:2] [ordering: +2,+5]"
 │    │    ├── best: (row-number G2="[ordering: +2]" ordering=+2)
 │    │    └── cost: 1269.32
 │    └── ""
 │         ├── best: (row-number G2="[ordering: +2]" ordering=+2)
 │         └── cost: 1269.32
 └── G2: (scan a,cols=(2)) (scan a,rev,cols=(2))
      ├── ""
      │    ├── best: (scan a,cols=(2))
      │    └── cost: 1050.00
      └── "[ordering: +2]"
           ├── best: (sort G2)
           └── cost: 1259.32

memo
SELECT y FROM (SELECT * FROM a ORDER BY y) WITH ORDINALITY ORDER BY ordinality, y
----
memo (optimized)
 ├── G1: (row-number G2 ordering=+2)
 │    ├── "[presentation: y:2] [ordering: +5]"
 │    │    ├── best: (row-number G2="[ordering: +2]" ordering=+2)
 │    │    └── cost: 1269.32
 │    └── ""
 │         ├── best: (row-number G2="[ordering: +2]" ordering=+2)
 │         └── cost: 1269.32
 └── G2: (scan a,cols=(2)) (scan a,rev,cols=(2))
      ├── ""
      │    ├── best: (scan a,cols=(2))
      │    └── cost: 1050.00
      └── "[ordering: +2]"
           ├── best: (sort G2)
           └── cost: 1259.32

memo
SELECT y FROM a WITH ORDINALITY ORDER BY ordinality DESC
----
memo (optimized)
 ├── G1: (row-number G2)
 │    ├── "[presentation: y:2] [ordering: -5]"
 │    │    ├── best: (sort G1)
 │    │    └── cost: 1269.32
 │    └── ""
 │         ├── best: (row-number G2)
 │         └── cost: 1060.00
 └── G2: (scan a,cols=(2)) (scan a,rev,cols=(2))
      └── ""
           ├── best: (scan a,cols=(2))
           └── cost: 1050.00

# --------------------------------------------------
# Merge Join
# --------------------------------------------------

exec-ddl
CREATE TABLE abc (a INT, b INT, c INT, PRIMARY KEY (a, b, c))
----
TABLE abc
 ├── a int not null
 ├── b int not null
 ├── c int not null
 └── INDEX primary
      ├── a int not null
      ├── b int not null
      └── c int not null

exec-ddl
CREATE TABLE xyz (x INT, y INT, z INT, PRIMARY KEY (x, y, z))
----
TABLE xyz
 ├── x int not null
 ├── y int not null
 ├── z int not null
 └── INDEX primary
      ├── x int not null
      ├── y int not null
      └── z int not null

opt
SELECT * FROM abc JOIN xyz ON a=x ORDER BY a
----
inner-join (merge)
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) x:4(int!null) y:5(int!null) z:6(int!null)
 ├── ordering: +(1|4)
 ├── scan abc
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    └── ordering: +1
 ├── scan xyz
 │    ├── columns: x:4(int!null) y:5(int!null) z:6(int!null)
 │    └── ordering: +4
 └── merge-on
      ├── left ordering: +1
      ├── right ordering: +4
      └── filters [type=bool]
           └── abc.a = xyz.x [type=bool]

opt
SELECT * FROM abc JOIN xyz ON a=x ORDER BY x
----
inner-join (merge)
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) x:4(int!null) y:5(int!null) z:6(int!null)
 ├── ordering: +(1|4)
 ├── scan abc
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    └── ordering: +1
 ├── scan xyz
 │    ├── columns: x:4(int!null) y:5(int!null) z:6(int!null)
 │    └── ordering: +4
 └── merge-on
      ├── left ordering: +1
      ├── right ordering: +4
      └── filters [type=bool]
           └── abc.a = xyz.x [type=bool]

# A left join guarantees an ordering on the left side.
opt
SELECT * FROM abc LEFT JOIN xyz ON a=x ORDER BY a
----
left-join (merge)
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) x:4(int) y:5(int) z:6(int)
 ├── ordering: +1
 ├── scan abc
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    └── ordering: +1
 ├── scan xyz
 │    ├── columns: x:4(int!null) y:5(int!null) z:6(int!null)
 │    └── ordering: +4
 └── merge-on
      ├── left ordering: +1
      ├── right ordering: +4
      └── filters [type=bool]
           └── abc.a = xyz.x [type=bool]

# A left join doesn't guarantee an ordering on x (some rows will have NULLs).
opt
SELECT * FROM abc LEFT JOIN xyz ON a=x ORDER BY x
----
sort
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) x:4(int) y:5(int) z:6(int)
 ├── ordering: +4
 └── left-join (merge)
      ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) x:4(int) y:5(int) z:6(int)
      ├── scan abc
      │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      │    └── ordering: +1
      ├── scan xyz
      │    ├── columns: x:4(int!null) y:5(int!null) z:6(int!null)
      │    └── ordering: +4
      └── merge-on
           ├── left ordering: +1
           ├── right ordering: +4
           └── filters [type=bool]
                └── abc.a = xyz.x [type=bool]

# A right join doesn't guarantee an ordering on a (some rows will have NULLs).
opt
SELECT * FROM abc RIGHT JOIN xyz ON a=x ORDER BY a
----
sort
 ├── columns: a:1(int) b:2(int) c:3(int) x:4(int!null) y:5(int!null) z:6(int!null)
 ├── ordering: +1
 └── right-join (merge)
      ├── columns: a:1(int) b:2(int) c:3(int) x:4(int!null) y:5(int!null) z:6(int!null)
      ├── scan abc
      │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      │    └── ordering: +1
      ├── scan xyz
      │    ├── columns: x:4(int!null) y:5(int!null) z:6(int!null)
      │    └── ordering: +4
      └── merge-on
           ├── left ordering: +1
           ├── right ordering: +4
           └── filters [type=bool]
                └── abc.a = xyz.x [type=bool]

opt
SELECT * FROM abc RIGHT JOIN xyz ON a=x ORDER BY x
----
right-join (merge)
 ├── columns: a:1(int) b:2(int) c:3(int) x:4(int!null) y:5(int!null) z:6(int!null)
 ├── ordering: +4
 ├── scan abc
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    └── ordering: +1
 ├── scan xyz
 │    ├── columns: x:4(int!null) y:5(int!null) z:6(int!null)
 │    └── ordering: +4
 └── merge-on
      ├── left ordering: +1
      ├── right ordering: +4
      └── filters [type=bool]
           └── abc.a = xyz.x [type=bool]

opt
SELECT * FROM abc FULL OUTER JOIN xyz ON a=x ORDER BY a
----
sort
 ├── columns: a:1(int) b:2(int) c:3(int) x:4(int) y:5(int) z:6(int)
 ├── ordering: +1
 └── full-join (merge)
      ├── columns: a:1(int) b:2(int) c:3(int) x:4(int) y:5(int) z:6(int)
      ├── scan abc
      │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      │    └── ordering: +1
      ├── scan xyz
      │    ├── columns: x:4(int!null) y:5(int!null) z:6(int!null)
      │    └── ordering: +4
      └── merge-on
           ├── left ordering: +1
           ├── right ordering: +4
           └── filters [type=bool]
                └── abc.a = xyz.x [type=bool]

opt
SELECT * FROM abc JOIN xyz ON a=x AND b=y ORDER BY a
----
inner-join (merge)
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) x:4(int!null) y:5(int!null) z:6(int!null)
 ├── ordering: +(1|4)
 ├── scan abc
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    └── ordering: +1,+2
 ├── scan xyz
 │    ├── columns: x:4(int!null) y:5(int!null) z:6(int!null)
 │    └── ordering: +4,+5
 └── merge-on
      ├── left ordering: +1,+2
      ├── right ordering: +4,+5
      └── filters [type=bool]
           ├── abc.a = xyz.x [type=bool]
           └── abc.b = xyz.y [type=bool]

opt
SELECT * FROM abc JOIN xyz ON a=x AND b=y ORDER BY a, b
----
inner-join (merge)
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) x:4(int!null) y:5(int!null) z:6(int!null)
 ├── ordering: +(1|4),+(2|5)
 ├── scan abc
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    └── ordering: +1,+2
 ├── scan xyz
 │    ├── columns: x:4(int!null) y:5(int!null) z:6(int!null)
 │    └── ordering: +4,+5
 └── merge-on
      ├── left ordering: +1,+2
      ├── right ordering: +4,+5
      └── filters [type=bool]
           ├── abc.a = xyz.x [type=bool]
           └── abc.b = xyz.y [type=bool]

opt
SELECT * FROM abc JOIN xyz ON a=x AND b=y ORDER BY a, y
----
inner-join (merge)
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) x:4(int!null) y:5(int!null) z:6(int!null)
 ├── ordering: +(1|4),+(2|5)
 ├── scan abc
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    └── ordering: +1,+2
 ├── scan xyz
 │    ├── columns: x:4(int!null) y:5(int!null) z:6(int!null)
 │    └── ordering: +4,+5
 └── merge-on
      ├── left ordering: +1,+2
      ├── right ordering: +4,+5
      └── filters [type=bool]
           ├── abc.a = xyz.x [type=bool]
           └── abc.b = xyz.y [type=bool]

# --------------------------------------------------
# Limit / Offset
# --------------------------------------------------

# Basic cases.

opt
SELECT * FROM abc ORDER BY a, b LIMIT 10
----
scan abc
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 ├── limit: 10
 └── ordering: +1,+2

# The filter prevents pushing of the limit into the scan.
opt
SELECT * FROM abc WHERE a+b>c ORDER BY a, b LIMIT 10
----
limit
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 ├── ordering: +1,+2
 ├── select
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    ├── ordering: +1,+2
 │    ├── scan abc
 │    │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    │    └── ordering: +1,+2
 │    └── filters [type=bool]
 │         └── abc.c < (abc.a + abc.b) [type=bool]
 └── const: 10 [type=int]

opt
SELECT * FROM abc ORDER BY a, b OFFSET 10 
----
offset
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 ├── ordering: +1,+2
 ├── scan abc
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    └── ordering: +1,+2
 └── const: 10 [type=int]


# Cases where the requirement on Limit/Offset is incompatible with the
# internal requirement.

opt
SELECT * FROM (SELECT * FROM abc ORDER BY a, b LIMIT 10) ORDER BY b
----
sort
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 ├── ordering: +2
 └── scan abc
      ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      └── limit: 10

opt
SELECT * FROM (SELECT * FROM abc WHERE a+b>c ORDER BY a, b LIMIT 10) ORDER BY b
----
sort
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 ├── ordering: +2
 └── limit
      ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      ├── select
      │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      │    ├── ordering: +1,+2
      │    ├── scan abc
      │    │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      │    │    └── ordering: +1,+2
      │    └── filters [type=bool]
      │         └── abc.c < (abc.a + abc.b) [type=bool]
      └── const: 10 [type=int]

opt
SELECT * FROM (SELECT * FROM abc ORDER BY a, b OFFSET 10) ORDER BY b
----
sort
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 ├── ordering: +2
 └── offset
      ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      ├── scan abc
      │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      │    └── ordering: +1,+2
      └── const: 10 [type=int]


# Cases where the requirement on Limit/Offset is weaker than the
# internal requirement.

opt
SELECT * FROM (SELECT * FROM abc ORDER BY a, b LIMIT 10) ORDER BY a
----
scan abc
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 ├── limit: 10
 └── ordering: +1

opt
SELECT * FROM (SELECT * FROM abc WHERE a+b>c ORDER BY a, b LIMIT 10) ORDER BY a
----
limit
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 ├── ordering: +1
 ├── select
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    ├── ordering: +1,+2
 │    ├── scan abc
 │    │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    │    └── ordering: +1,+2
 │    └── filters [type=bool]
 │         └── abc.c < (abc.a + abc.b) [type=bool]
 └── const: 10 [type=int]

opt
SELECT * FROM (SELECT * FROM abc ORDER BY a, b OFFSET 10) ORDER BY a
----
offset
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 ├── ordering: +1
 ├── scan abc
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    └── ordering: +1,+2
 └── const: 10 [type=int]

# Cases where the requirement on Limit/Offset is stronger than the
# internal requirement.

opt
SELECT * FROM (SELECT * FROM abc ORDER BY a, b LIMIT 10) ORDER BY a, b, c
----
scan abc
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 ├── limit: 10
 └── ordering: +1,+2,+3

opt
SELECT * FROM (SELECT * FROM abc WHERE a+b>c ORDER BY a, b LIMIT 10) ORDER BY a, b, c
----
limit
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 ├── ordering: +1,+2,+3
 ├── select
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    ├── ordering: +1,+2,+3
 │    ├── scan abc
 │    │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    │    └── ordering: +1,+2,+3
 │    └── filters [type=bool]
 │         └── abc.c < (abc.a + abc.b) [type=bool]
 └── const: 10 [type=int]

opt
SELECT * FROM (SELECT * FROM abc ORDER BY a, b OFFSET 10) ORDER BY a, b, c
----
offset
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 ├── ordering: +1,+2,+3
 ├── scan abc
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    └── ordering: +1,+2,+3
 └── const: 10 [type=int]

# --------------------------------------------------
# DistinctOn
# --------------------------------------------------

# DISTINCT doesn't require any particular ordering of its input. It could pass
# through the requirement, but that doesn't improve the estimated cost in this
# case.
opt
SELECT DISTINCT b, c FROM abc ORDER BY b
----
sort
 ├── columns: b:2(int!null) c:3(int!null)
 ├── ordering: +2
 └── distinct-on
      ├── columns: b:2(int!null) c:3(int!null)
      ├── grouping columns: b:2(int!null) c:3(int!null)
      └── scan abc
           └── columns: b:2(int!null) c:3(int!null)

# In this case the ordering is passed through.
opt
SELECT DISTINCT a, b, c FROM abc ORDER BY a, b
----
scan abc
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 └── ordering: +1,+2

# DISTINCT ON requires the ordering of its input, as it affects the results
# (values of a in this case).
opt
SELECT DISTINCT ON (b, c) a, b, c FROM abc ORDER BY b
----
sort
 ├── columns: a:1(int) b:2(int!null) c:3(int!null)
 ├── ordering: +2
 └── distinct-on
      ├── columns: a:1(int) b:2(int!null) c:3(int!null)
      ├── grouping columns: b:2(int!null) c:3(int!null)
      ├── scan abc
      │    └── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      └── aggregations
           └── first-agg [type=int]
                └── variable: abc.a [type=int]

opt
SELECT DISTINCT ON (b, c) a, b, c FROM abc ORDER BY b, c, a
----
sort
 ├── columns: a:1(int) b:2(int!null) c:3(int!null)
 ├── ordering: +2,+3
 └── distinct-on
      ├── columns: a:1(int) b:2(int!null) c:3(int!null)
      ├── grouping columns: b:2(int!null) c:3(int!null)
      ├── scan abc
      │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      │    └── ordering: +1 opt(2,3)
      └── aggregations
           └── first-agg [type=int]
                └── variable: abc.a [type=int]

opt
SELECT DISTINCT ON (a) a, c FROM abc ORDER BY a, c DESC, b
----
distinct-on
 ├── columns: a:1(int!null) c:3(int)
 ├── grouping columns: a:1(int!null)
 ├── ordering: +1
 ├── sort
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    ├── ordering: +1,-3,+2
 │    └── scan abc
 │         └── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 └── aggregations
      └── first-agg [type=int]
           └── variable: abc.c [type=int]

# Pass through the ordering from above.
opt
SELECT * FROM (SELECT DISTINCT ON (a, b) a, b, c FROM abc) ORDER BY a
----
distinct-on
 ├── columns: a:1(int!null) b:2(int!null) c:3(int)
 ├── grouping columns: a:1(int!null) b:2(int!null)
 ├── ordering: +1
 ├── scan abc
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    └── ordering: +1
 └── aggregations
      └── first-agg [type=int]
           └── variable: abc.c [type=int]

# Internal orderings that refer just to ON columns can be ignored.
opt
SELECT * FROM (SELECT DISTINCT ON (a, b) a, b, c FROM abc ORDER BY a) ORDER BY a, b
----
distinct-on
 ├── columns: a:1(int!null) b:2(int!null) c:3(int)
 ├── grouping columns: a:1(int!null) b:2(int!null)
 ├── ordering: +1,+2
 ├── scan abc
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    └── ordering: +1,+2
 └── aggregations
      └── first-agg [type=int]
           └── variable: abc.c [type=int]

opt
SELECT * FROM (SELECT DISTINCT ON (a, b) a, b, c FROM abc ORDER BY a, b) ORDER BY a
----
distinct-on
 ├── columns: a:1(int!null) b:2(int!null) c:3(int)
 ├── grouping columns: a:1(int!null) b:2(int!null)
 ├── ordering: +1
 ├── scan abc
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    └── ordering: +1
 └── aggregations
      └── first-agg [type=int]
           └── variable: abc.c [type=int]

# The c,b part of the inner ordering can be ignored.
opt
SELECT * FROM (SELECT DISTINCT ON (b, c) a, b, c FROM abc ORDER BY c, b, a) ORDER BY a
----
distinct-on
 ├── columns: a:1(int) b:2(int!null) c:3(int!null)
 ├── grouping columns: b:2(int!null) c:3(int!null)
 ├── ordering: +1
 ├── scan abc
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
 │    └── ordering: +1
 └── aggregations
      └── first-agg [type=int]
           └── variable: abc.a [type=int]

# There is no ordering that satisfies both the intra-group ordering of c+ and the
# inter-group ordering of a+; we have to sort twice.
opt
SELECT * FROM (SELECT DISTINCT ON (b) a, b, c FROM abc ORDER BY b, c) ORDER BY a
----
sort
 ├── columns: a:1(int) b:2(int!null) c:3(int)
 ├── ordering: +1
 └── distinct-on
      ├── columns: a:1(int) b:2(int!null) c:3(int)
      ├── grouping columns: b:2(int!null)
      ├── sort
      │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      │    ├── ordering: +3 opt(2)
      │    └── scan abc
      │         └── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      └── aggregations
           ├── first-agg [type=int]
           │    └── variable: abc.a [type=int]
           └── first-agg [type=int]
                └── variable: abc.c [type=int]

# Same as above, except we can use the index ordering for the distinct input.
opt
SELECT * FROM (SELECT DISTINCT ON (a) a, b, c FROM abc ORDER BY a, b) ORDER BY c
----
sort
 ├── columns: a:1(int!null) b:2(int) c:3(int)
 ├── ordering: +3
 └── distinct-on
      ├── columns: a:1(int!null) b:2(int) c:3(int)
      ├── grouping columns: a:1(int!null)
      ├── scan abc
      │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      │    └── ordering: +2 opt(1)
      └── aggregations
           ├── first-agg [type=int]
           │    └── variable: abc.b [type=int]
           └── first-agg [type=int]
                └── variable: abc.c [type=int]
