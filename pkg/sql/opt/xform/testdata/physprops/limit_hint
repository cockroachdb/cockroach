exec-ddl
CREATE TABLE t (x INT PRIMARY KEY, y INT, z INT, index y_idx (y))
----

# t has 200 rows where z=0, 200 where z=1, and 600 where z=2.
exec-ddl
ALTER TABLE t INJECT STATISTICS ' [
   {
      "columns":[
         "z"
      ],
      "created_at":"2019-11-11 22:16:04.314619+00:00",
      "distinct_count":3,
      "histo_buckets":[
         {
            "distinct_range":0,
            "num_eq":200,
            "num_range":0,
            "upper_bound":"0"
         },
         {
            "distinct_range":0,
            "num_eq":200,
            "num_range":0,
            "upper_bound":"1"
         },
         {
            "distinct_range":0,
            "num_eq":600,
            "num_range":0,
            "upper_bound":"2"
         }
      ],
      "histo_col_type":"INT8",
      "name":"statistics",
      "null_count":0,
      "row_count":1000
   }
]'
----

# In order to test how limit hints are propagated through a particular operator,
# a limit operator must exist higher in the tree, and all operators between the
# limit and the operator targeted by the test must pass a limit hint to their
# children. An easy way to construct a plan like this is to set the limit's
# child to be an ordinality operator (which passes through limit hints
# unchanged), and order the limit by the ordinality column (to prevent
# normalization rules from pushing the limit down the tree).

# --------------------------------------------------
# Offset operator.
# --------------------------------------------------

opt
SELECT * FROM (SELECT * FROM t OFFSET 5) WITH ORDINALITY ORDER BY ordinality LIMIT 10
----
limit
 ├── columns: x:1!null y:2 z:3 ordinality:4!null
 ├── internal-ordering: +4
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(2-4), (4)-->(1-3)
 ├── ordering: +4
 ├── ordinality
 │    ├── columns: x:1!null y:2 z:3 ordinality:4!null
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4), (4)-->(1-3)
 │    ├── ordering: +4
 │    ├── limit hint: 10.00
 │    └── offset
 │         ├── columns: x:1!null y:2 z:3
 │         ├── key: (1)
 │         ├── fd: (1)-->(2,3)
 │         ├── limit hint: 10.00
 │         ├── scan t
 │         │    ├── columns: x:1!null y:2 z:3
 │         │    ├── key: (1)
 │         │    ├── fd: (1)-->(2,3)
 │         │    └── limit hint: 15.00
 │         └── 5
 └── 10


# --------------------------------------------------
# Set operators.
# --------------------------------------------------

opt
SELECT * FROM (SELECT * FROM t UNION SELECT * from t) LIMIT 10
----
limit
 ├── columns: x:7!null y:8 z:9
 ├── cardinality: [0 - 10]
 ├── key: (7-9)
 ├── union
 │    ├── columns: x:7!null y:8 z:9
 │    ├── left columns: t.x:1 t.y:2 t.z:3
 │    ├── right columns: t.x:4 t.y:5 t.z:6
 │    ├── key: (7-9)
 │    ├── limit hint: 10.00
 │    ├── scan t
 │    │    ├── columns: t.x:1!null t.y:2 t.z:3
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2,3)
 │    │    └── limit hint: 10.00
 │    └── scan t
 │         ├── columns: t.x:4!null t.y:5 t.z:6
 │         ├── key: (4)
 │         ├── fd: (4)-->(5,6)
 │         └── limit hint: 10.00
 └── 10

opt
SELECT * FROM (SELECT * FROM t UNION ALL SELECT * from t) LIMIT 10
----
limit
 ├── columns: x:7!null y:8 z:9
 ├── cardinality: [0 - 10]
 ├── union-all
 │    ├── columns: x:7!null y:8 z:9
 │    ├── left columns: t.x:1 t.y:2 t.z:3
 │    ├── right columns: t.x:4 t.y:5 t.z:6
 │    ├── limit hint: 10.00
 │    ├── scan t
 │    │    ├── columns: t.x:1!null t.y:2 t.z:3
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2,3)
 │    │    └── limit hint: 10.00
 │    └── scan t
 │         ├── columns: t.x:4!null t.y:5 t.z:6
 │         ├── key: (4)
 │         ├── fd: (4)-->(5,6)
 │         └── limit hint: 10.00
 └── 10

opt
SELECT * FROM (SELECT z FROM t INTERSECT SELECT y from t) LIMIT 10
----
limit
 ├── columns: z:3
 ├── cardinality: [0 - 10]
 ├── key: (3)
 ├── intersect
 │    ├── columns: z:3
 │    ├── left columns: z:3
 │    ├── right columns: y:5
 │    ├── key: (3)
 │    ├── limit hint: 10.00
 │    ├── scan t
 │    │    ├── columns: z:3
 │    │    └── limit hint: 10.00
 │    └── scan t@y_idx
 │         ├── columns: y:5
 │         └── limit hint: 10.00
 └── 10

opt
SELECT * FROM (SELECT z FROM t INTERSECT ALL SELECT y from t) LIMIT 10
----
limit
 ├── columns: z:3
 ├── cardinality: [0 - 10]
 ├── intersect-all
 │    ├── columns: z:3
 │    ├── left columns: z:3
 │    ├── right columns: y:5
 │    ├── limit hint: 10.00
 │    ├── scan t
 │    │    ├── columns: z:3
 │    │    └── limit hint: 10.00
 │    └── scan t@y_idx
 │         ├── columns: y:5
 │         └── limit hint: 10.00
 └── 10

opt
SELECT * FROM (SELECT z FROM t EXCEPT SELECT y from t) LIMIT 10
----
limit
 ├── columns: z:3
 ├── cardinality: [0 - 10]
 ├── key: (3)
 ├── except
 │    ├── columns: z:3
 │    ├── left columns: z:3
 │    ├── right columns: y:5
 │    ├── key: (3)
 │    ├── limit hint: 10.00
 │    ├── scan t
 │    │    ├── columns: z:3
 │    │    └── limit hint: 10.00
 │    └── scan t@y_idx
 │         ├── columns: y:5
 │         └── limit hint: 10.00
 └── 10

opt
SELECT * FROM (SELECT z FROM t EXCEPT ALL SELECT y from t) LIMIT 10
----
limit
 ├── columns: z:3
 ├── cardinality: [0 - 10]
 ├── except-all
 │    ├── columns: z:3
 │    ├── left columns: z:3
 │    ├── right columns: y:5
 │    ├── limit hint: 10.00
 │    ├── scan t
 │    │    ├── columns: z:3
 │    │    └── limit hint: 10.00
 │    └── scan t@y_idx
 │         ├── columns: y:5
 │         └── limit hint: 10.00
 └── 10

# --------------------------------------------------
# Limit hint depends on statistics.
# --------------------------------------------------

# Select operator.
opt
SELECT * FROM t WHERE z=1 LIMIT 10
----
limit
 ├── columns: x:1!null y:2 z:3!null
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: ()-->(3), (1)-->(2)
 ├── select
 │    ├── columns: x:1!null y:2 z:3!null
 │    ├── key: (1)
 │    ├── fd: ()-->(3), (1)-->(2)
 │    ├── limit hint: 10.00
 │    ├── scan t
 │    │    ├── columns: x:1!null y:2 z:3
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2,3)
 │    │    └── limit hint: 50.00
 │    └── filters
 │         └── z:3 = 1 [outer=(3), fd=()-->(3)]
 └── 10

# DistinctOn operator.
opt
SELECT DISTINCT z FROM t LIMIT 1
----
limit
 ├── columns: z:3
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(3)
 ├── distinct-on
 │    ├── columns: z:3
 │    ├── grouping columns: z:3
 │    ├── key: (3)
 │    ├── limit hint: 1.00
 │    └── scan t
 │         ├── columns: z:3
 │         └── limit hint: 1.23
 └── 1

# No limit hint propagation if number of distinct rows < required number of rows.
opt
SELECT DISTINCT z FROM t LIMIT 10
----
limit
 ├── columns: z:3
 ├── cardinality: [0 - 10]
 ├── key: (3)
 ├── distinct-on
 │    ├── columns: z:3
 │    ├── grouping columns: z:3
 │    ├── key: (3)
 │    ├── limit hint: 10.00
 │    └── scan t
 │         └── columns: z:3
 └── 10

opt
SELECT * FROM t WHERE z=4 LIMIT 10
----
limit
 ├── columns: x:1!null y:2 z:3!null
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: ()-->(3), (1)-->(2)
 ├── select
 │    ├── columns: x:1!null y:2 z:3!null
 │    ├── key: (1)
 │    ├── fd: ()-->(3), (1)-->(2)
 │    ├── limit hint: 10.00
 │    ├── scan t
 │    │    ├── columns: x:1!null y:2 z:3
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2,3)
 │    └── filters
 │         └── z:3 = 4 [outer=(3), fd=()-->(3)]
 └── 10


# --------------------------------------------------
# Passing limit hint through unchanged.
# --------------------------------------------------

# IndexJoin operator.
opt
SELECT z FROM t@y_idx WITH ORDINALITY ORDER BY ordinality LIMIT 10
----
limit
 ├── columns: z:3  [hidden: ordinality:4!null]
 ├── internal-ordering: +4
 ├── cardinality: [0 - 10]
 ├── key: (4)
 ├── fd: (4)-->(3)
 ├── ordering: +4
 ├── ordinality
 │    ├── columns: z:3 ordinality:4!null
 │    ├── key: (4)
 │    ├── fd: (4)-->(3)
 │    ├── ordering: +4
 │    ├── limit hint: 10.00
 │    └── index-join t
 │         ├── columns: z:3
 │         ├── limit hint: 10.00
 │         └── scan t@y_idx
 │              ├── columns: x:1!null
 │              ├── flags: force-index=y_idx
 │              ├── key: (1)
 │              └── limit hint: 10.00
 └── 10

# Ordinality operator.
opt
SELECT * FROM t WITH ORDINALITY ORDER BY ordinality LIMIT 10
----
limit
 ├── columns: x:1!null y:2 z:3 ordinality:4!null
 ├── internal-ordering: +4
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(2-4), (4)-->(1-3)
 ├── ordering: +4
 ├── ordinality
 │    ├── columns: x:1!null y:2 z:3 ordinality:4!null
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4), (4)-->(1-3)
 │    ├── ordering: +4
 │    ├── limit hint: 10.00
 │    └── scan t
 │         ├── columns: x:1!null y:2 z:3
 │         ├── key: (1)
 │         ├── fd: (1)-->(2,3)
 │         └── limit hint: 10.00
 └── 10

# Project operator.
opt
SELECT * FROM (SELECT 1 FROM t) WITH ORDINALITY ORDER BY ordinality LIMIT 10
----
limit
 ├── columns: "?column?":4!null ordinality:5!null
 ├── internal-ordering: +5 opt(4)
 ├── cardinality: [0 - 10]
 ├── key: (5)
 ├── fd: ()-->(4)
 ├── ordering: +5 opt(4) [actual: +5]
 ├── ordinality
 │    ├── columns: "?column?":4!null ordinality:5!null
 │    ├── key: (5)
 │    ├── fd: ()-->(4)
 │    ├── ordering: +5 opt(4) [actual: +5]
 │    ├── limit hint: 10.00
 │    └── project
 │         ├── columns: "?column?":4!null
 │         ├── fd: ()-->(4)
 │         ├── limit hint: 10.00
 │         ├── scan t@y_idx
 │         │    └── limit hint: 10.00
 │         └── projections
 │              └── 1 [as="?column?":4]
 └── 10

# ProjectSet operator.
opt
SELECT *, generate_series(1, t.x) FROM t LIMIT 10
----
limit
 ├── columns: x:1!null y:2 z:3 generate_series:4
 ├── cardinality: [0 - 10]
 ├── side-effects
 ├── fd: (1)-->(2,3)
 ├── project-set
 │    ├── columns: x:1!null y:2 z:3 generate_series:4
 │    ├── side-effects
 │    ├── fd: (1)-->(2,3)
 │    ├── limit hint: 10.00
 │    ├── scan t
 │    │    ├── columns: x:1!null y:2 z:3
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2,3)
 │    │    └── limit hint: 10.00
 │    └── zip
 │         └── generate_series(1, x:1) [outer=(1), side-effects]
 └── 10

# --------------------------------------------------
# Lookup join.
# --------------------------------------------------

exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, s STRING, d DECIMAL NOT NULL)
----

exec-ddl
CREATE TABLE b (x INT, z INT NOT NULL)
----

exec-ddl
ALTER TABLE a INJECT STATISTICS '[
  {
    "columns": ["k"],
    "created_at": "2019-02-08 04:10:40.001179+00:00",
    "row_count": 100000,
    "distinct_count": 100000
  }
]'
----

exec-ddl
ALTER TABLE b INJECT STATISTICS '[
  {
    "columns": ["x"],
    "created_at": "2019-02-08 04:10:40.001179+00:00",
    "row_count": 10000,
    "distinct_count": 1000
  }
]'
----

# Ensure the limit hint is propagated to the lookup join input as a multiple
# of the batch size.
opt
SELECT * FROM a JOIN b ON k=z WHERE x > 0 AND x <= 5000 LIMIT 6003
----
limit
 ├── columns: k:1!null i:2 s:3 d:4!null x:5!null z:6!null
 ├── cardinality: [0 - 6003]
 ├── fd: (1)-->(2-4), (1)==(6), (6)==(1)
 ├── inner-join (lookup a)
 │    ├── columns: k:1!null i:2 s:3 d:4!null x:5!null z:6!null
 │    ├── key columns: [6] = [1]
 │    ├── lookup columns are key
 │    ├── fd: (1)-->(2-4), (1)==(6), (6)==(1)
 │    ├── limit hint: 6003.00
 │    ├── select
 │    │    ├── columns: x:5!null z:6!null
 │    │    ├── limit hint: 6100.00
 │    │    ├── scan b
 │    │    │    ├── columns: x:5 z:6!null
 │    │    │    └── limit hint: 6100.00
 │    │    └── filters
 │    │         └── (x:5 > 0) AND (x:5 <= 5000) [outer=(5)]
 │    └── filters (true)
 └── 6003

# The limit hint for the lookup join input must be at least the batch size.
opt
SELECT * FROM a JOIN b ON k=z WHERE x > 0 AND x <= 5000 LIMIT 3
----
limit
 ├── columns: k:1!null i:2 s:3 d:4!null x:5!null z:6!null
 ├── cardinality: [0 - 3]
 ├── fd: (1)-->(2-4), (1)==(6), (6)==(1)
 ├── inner-join (lookup a)
 │    ├── columns: k:1!null i:2 s:3 d:4!null x:5!null z:6!null
 │    ├── key columns: [6] = [1]
 │    ├── lookup columns are key
 │    ├── fd: (1)-->(2-4), (1)==(6), (6)==(1)
 │    ├── limit hint: 3.00
 │    ├── select
 │    │    ├── columns: x:5!null z:6!null
 │    │    ├── limit hint: 100.00
 │    │    ├── scan b
 │    │    │    ├── columns: x:5 z:6!null
 │    │    │    └── limit hint: 100.00
 │    │    └── filters
 │    │         └── (x:5 > 0) AND (x:5 <= 5000) [outer=(5)]
 │    └── filters (true)
 └── 3

# --------------------------------------------------
# Negative limits.
# --------------------------------------------------

# Regression test for #44683.
exec-ddl
CREATE TABLE t44683(c0 INT)
----

exec-ddl
CREATE VIEW v44683(c0) AS SELECT 1 FROM t44683 LIMIT -1
----

opt
SELECT DISTINCT t44683.c0 FROM t44683, v44683 LIMIT -1;
----
limit
 ├── columns: c0:1
 ├── cardinality: [0 - 0]
 ├── side-effects
 ├── key: ()
 ├── fd: ()-->(1)
 ├── distinct-on
 │    ├── columns: c0:1
 │    ├── grouping columns: c0:1
 │    ├── cardinality: [0 - 0]
 │    ├── side-effects
 │    ├── key: (1)
 │    ├── limit hint: 1.00
 │    └── inner-join (cross)
 │         ├── columns: c0:1
 │         ├── cardinality: [0 - 0]
 │         ├── side-effects
 │         ├── scan t44683
 │         │    └── columns: c0:1
 │         ├── limit
 │         │    ├── cardinality: [0 - 0]
 │         │    ├── side-effects
 │         │    ├── key: ()
 │         │    ├── scan t44683
 │         │    │    └── limit hint: 1.00
 │         │    └── -1
 │         └── filters (true)
 └── -1
