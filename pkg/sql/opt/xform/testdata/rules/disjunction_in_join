# Test ORed ON clause predicates which may be split into unions or 
# intersections. The rewrite is cost-based, so may not always show up in the
# query plan.
# Use tables both with and without a primary key, to test when PK columns are
# not included and also to allow null values.


exec-ddl
CREATE TABLE a(a1 INT, a2 INT, a3 INT, a4 INT, PRIMARY KEY(a1, a2, a3, a4))
----

exec-ddl
CREATE TABLE b(b1 INT, b2 INT, b3 INT, b4 INT,
               INDEX (b1, b2) STORING (b3, b4),
               INDEX (b2) STORING (b1, b3, b4),
               INDEX (b3) STORING (b1, b2, b4))
----

exec-ddl
CREATE TABLE c(c1 INT, c2 INT, c3 INT, c4 INT)
----

exec-ddl
CREATE TABLE d(d1 INT, d2 INT, d3 INT, d4 INT,
               INDEX d (d1) STORING (d2, d3, d4))
----

# --------------------------------------------------
# InnerJoin
# --------------------------------------------------

# The left AND right sides of the join already produce key columns
memo expect=SplitDisjunctionOfJoinTerms
SELECT t1.*, t2.* FROM a t1, a t2 WHERE t1.a1 = t2.a3 OR t1.a2 = t2.a4 OR t1.a1 = t2.a4
----
memo (optimized, ~83KB, required=[presentation: a1:1,a2:2,a3:3,a4:4,a1:7,a2:8,a3:9,a4:10])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4) (project G5 G6 a1 a2 a3 a4 a1 a2 a3 a4) (project G7 G6 a1 a2 a3 a4 a1 a2 a3 a4)
 │    └── [presentation: a1:1,a2:2,a3:3,a4:4,a1:7,a2:8,a3:9,a4:10]
 │         ├── best: (inner-join G2 G3 G4)
 │         └── cost: 12239.82
 ├── G2: (scan a [as=t1],cols=(1-4))
 │    └── []
 │         ├── best: (scan a [as=t1],cols=(1-4))
 │         └── cost: 1104.82
 ├── G3: (scan a [as=t2],cols=(7-10))
 │    └── []
 │         ├── best: (scan a [as=t2],cols=(7-10))
 │         └── cost: 1104.82
 ├── G4: (filters G8)
 ├── G5: (distinct-on G9 G10 cols=(1-4,7-10)) (distinct-on G9 G10 cols=(1-4,7-10),ordering=+1,+2,+3,+4) (distinct-on G9 G10 cols=(1-4,7-10),ordering=+7,+8,+9,+10)
 │    └── []
 │         ├── best: (distinct-on G9 G10 cols=(1-4,7-10))
 │         └── cost: 12909.23
 ├── G6: (projections)
 ├── G7: (distinct-on G11 G10 cols=(1-4,7-10)) (distinct-on G11 G10 cols=(1-4,7-10),ordering=+7,+8,+9,+10) (distinct-on G11 G10 cols=(1-4,7-10),ordering=+1,+2,+3,+4)
 │    └── []
 │         ├── best: (distinct-on G11 G10 cols=(1-4,7-10))
 │         └── cost: 12909.23
 ├── G8: (or G12 G13)
 ├── G9: (union-all G14 G15)
 │    ├── [ordering: +1,+2,+3,+4]
 │    │    ├── best: (union-all G14="[ordering: +(13|21),+14,+15,+16]" G15="[ordering: +25,+26,+27,+28]")
 │    │    └── cost: 21274.85
 │    ├── [ordering: +7,+8,+9,+10]
 │    │    ├── best: (union-all G14="[ordering: +19,+20,+(13|21),+22]" G15="[ordering: +31,+32,+33,+34]")
 │    │    └── cost: 21274.85
 │    └── []
 │         ├── best: (union-all G14 G15)
 │         └── cost: 9779.81
 ├── G10: (aggregations)
 ├── G11: (union-all G16 G17)
 │    ├── [ordering: +1,+2,+3,+4]
 │    │    ├── best: (union-all G16="[ordering: +(85|93),+86,+87,+88]" G17="[ordering: +97,+98,+99,+100]")
 │    │    └── cost: 21274.85
 │    ├── [ordering: +7,+8,+9,+10]
 │    │    ├── best: (union-all G16="[ordering: +91,+92,+(85|93),+94]" G17="[ordering: +103,+104,+105,+106]")
 │    │    └── cost: 21274.85
 │    └── []
 │         ├── best: (union-all G16 G17)
 │         └── cost: 9779.81
 ├── G12: (or G18 G19)
 ├── G13: (eq G20 G21)
 ├── G14: (inner-join G22 G23 G24) (inner-join G23 G22 G24) (merge-join G22 G23 G25 inner-join,+13,+21) (lookup-join G23 G25 a [as=t1],keyCols=[21],outCols=(13-16,19-22))
 │    ├── [ordering: +(13|21),+14,+15,+16]
 │    │    ├── best: (sort G14)
 │    │    └── cost: 6171.49
 │    ├── [ordering: +19,+20,+(13|21),+22]
 │    │    ├── best: (sort G14)
 │    │    └── cost: 6171.49
 │    └── []
 │         ├── best: (inner-join G22 G23 G24)
 │         └── cost: 2339.81
 ├── G15: (inner-join G26 G27 G28) (inner-join G27 G26 G28) (project G29 G6 a1 a2 a3 a4 a1 a2 a3 a4) (project G30 G6 a1 a2 a3 a4 a1 a2 a3 a4)
 │    ├── [ordering: +25,+26,+27,+28]
 │    │    ├── best: (project G29="[ordering: +25,+26,+27,+28]" G6 a1 a2 a3 a4 a1 a2 a3 a4)
 │    │    └── cost: 14804.35
 │    ├── [ordering: +31,+32,+33,+34]
 │    │    ├── best: (project G29="[ordering: +31,+32,+33,+34]" G6 a1 a2 a3 a4 a1 a2 a3 a4)
 │    │    └── cost: 14804.35
 │    └── []
 │         ├── best: (project G29 G6 a1 a2 a3 a4 a1 a2 a3 a4)
 │         └── cost: 7140.98
 ├── G16: (inner-join G31 G32 G33) (lookup-join G31 G25 a [as=t1],keyCols=[93],outCols=(85-88,91-94))
 │    ├── [ordering: +(85|93),+86,+87,+88]
 │    │    ├── best: (sort G16)
 │    │    └── cost: 6171.49
 │    ├── [ordering: +91,+92,+(85|93),+94]
 │    │    ├── best: (sort G16)
 │    │    └── cost: 6171.49
 │    └── []
 │         ├── best: (inner-join G31 G32 G33)
 │         └── cost: 2339.81
 ├── G17: (inner-join G34 G35 G36) (project G37 G6 a1 a2 a3 a4 a1 a2 a3 a4)
 │    ├── [ordering: +103,+104,+105,+106]
 │    │    ├── best: (project G37="[ordering: +103,+104,+105,+106]" G6 a1 a2 a3 a4 a1 a2 a3 a4)
 │    │    └── cost: 14804.35
 │    ├── [ordering: +97,+98,+99,+100]
 │    │    ├── best: (project G37="[ordering: +97,+98,+99,+100]" G6 a1 a2 a3 a4 a1 a2 a3 a4)
 │    │    └── cost: 14804.35
 │    └── []
 │         ├── best: (project G37 G6 a1 a2 a3 a4 a1 a2 a3 a4)
 │         └── cost: 7140.98
 ├── G18: (eq G20 G38)
 ├── G19: (eq G39 G21)
 ├── G20: (variable t1.a1)
 ├── G21: (variable t2.a4)
 ├── G22: (scan a [as=t1],cols=(13-16))
 │    ├── [ordering: +13]
 │    │    ├── best: (scan a [as=t1],cols=(13-16))
 │    │    └── cost: 1104.82
 │    └── []
 │         ├── best: (scan a [as=t1],cols=(13-16))
 │         └── cost: 1104.82
 ├── G23: (scan a [as=t2],cols=(19-22))
 │    ├── [ordering: +19,+20,+21,+22]
 │    │    ├── best: (scan a [as=t2],cols=(19-22))
 │    │    └── cost: 1104.82
 │    ├── [ordering: +21]
 │    │    ├── best: (sort G23)
 │    │    └── cost: 1364.30
 │    └── []
 │         ├── best: (scan a [as=t2],cols=(19-22))
 │         └── cost: 1104.82
 ├── G24: (filters G40)
 ├── G25: (filters)
 ├── G26: (scan a [as=t1],cols=(25-28))
 │    └── []
 │         ├── best: (scan a [as=t1],cols=(25-28))
 │         └── cost: 1104.82
 ├── G27: (scan a [as=t2],cols=(31-34))
 │    └── []
 │         ├── best: (scan a [as=t2],cols=(31-34))
 │         └── cost: 1104.82
 ├── G28: (filters G41)
 ├── G29: (distinct-on G42 G10 cols=(25-28,31-34)) (distinct-on G42 G10 cols=(25-28,31-34),ordering=+25,+26,+27,+28) (distinct-on G42 G10 cols=(25-28,31-34),ordering=+31,+32,+33,+34)
 │    ├── [ordering: +25,+26,+27,+28]
 │    │    ├── best: (distinct-on G42="[ordering: +25,+26,+27,+28]" G10 cols=(25-28,31-34))
 │    │    └── cost: 14605.33
 │    ├── [ordering: +31,+32,+33,+34]
 │    │    ├── best: (distinct-on G42="[ordering: +31,+32,+33,+34]" G10 cols=(25-28,31-34))
 │    │    └── cost: 14605.33
 │    └── []
 │         ├── best: (distinct-on G42 G10 cols=(25-28,31-34))
 │         └── cost: 6941.96
 ├── G30: (distinct-on G43 G10 cols=(25-28,31-34)) (distinct-on G43 G10 cols=(25-28,31-34),ordering=+31,+32,+33,+34) (distinct-on G43 G10 cols=(25-28,31-34),ordering=+25,+26,+27,+28)
 │    ├── [ordering: +25,+26,+27,+28]
 │    │    ├── best: (distinct-on G43="[ordering: +25,+26,+27,+28]" G10 cols=(25-28,31-34))
 │    │    └── cost: 14605.33
 │    ├── [ordering: +31,+32,+33,+34]
 │    │    ├── best: (distinct-on G43="[ordering: +31,+32,+33,+34]" G10 cols=(25-28,31-34))
 │    │    └── cost: 14605.33
 │    └── []
 │         ├── best: (distinct-on G43 G10 cols=(25-28,31-34))
 │         └── cost: 6941.96
 ├── G31: (scan a [as=t2],cols=(91-94))
 │    ├── [ordering: +91,+92,+93,+94]
 │    │    ├── best: (scan a [as=t2],cols=(91-94))
 │    │    └── cost: 1104.82
 │    └── []
 │         ├── best: (scan a [as=t2],cols=(91-94))
 │         └── cost: 1104.82
 ├── G32: (scan a [as=t1],cols=(85-88))
 │    └── []
 │         ├── best: (scan a [as=t1],cols=(85-88))
 │         └── cost: 1104.82
 ├── G33: (filters G44)
 ├── G34: (scan a [as=t2],cols=(103-106))
 │    └── []
 │         ├── best: (scan a [as=t2],cols=(103-106))
 │         └── cost: 1104.82
 ├── G35: (scan a [as=t1],cols=(97-100))
 │    └── []
 │         ├── best: (scan a [as=t1],cols=(97-100))
 │         └── cost: 1104.82
 ├── G36: (filters G45)
 ├── G37: (distinct-on G46 G10 cols=(97-100,103-106)) (distinct-on G46 G10 cols=(97-100,103-106),ordering=+103,+104,+105,+106) (distinct-on G46 G10 cols=(97-100,103-106),ordering=+97,+98,+99,+100)
 │    ├── [ordering: +103,+104,+105,+106]
 │    │    ├── best: (distinct-on G46="[ordering: +103,+104,+105,+106]" G10 cols=(97-100,103-106))
 │    │    └── cost: 14605.33
 │    ├── [ordering: +97,+98,+99,+100]
 │    │    ├── best: (distinct-on G46="[ordering: +97,+98,+99,+100]" G10 cols=(97-100,103-106))
 │    │    └── cost: 14605.33
 │    └── []
 │         ├── best: (distinct-on G46 G10 cols=(97-100,103-106))
 │         └── cost: 6941.96
 ├── G38: (variable t2.a3)
 ├── G39: (variable t1.a2)
 ├── G40: (eq G47 G48)
 ├── G41: (or G49 G50)
 ├── G42: (union-all G51 G52)
 │    ├── [ordering: +25,+26,+27,+28]
 │    │    ├── best: (union-all G51="[ordering: +(37|46),+38,+39,+40]" G52="[ordering: +49,+(50|58),+51,+52]")
 │    │    └── cost: 12542.99
 │    ├── [ordering: +31,+32,+33,+34]
 │    │    ├── best: (union-all G51="[ordering: +43,+44,+45,+(37|46)]" G52="[ordering: +55,+56,+57,+(50|58)]")
 │    │    └── cost: 12542.99
 │    └── []
 │         ├── best: (union-all G51 G52)
 │         └── cost: 4879.63
 ├── G43: (union-all G53 G54)
 │    ├── [ordering: +25,+26,+27,+28]
 │    │    ├── best: (union-all G53="[ordering: +(61|70),+62,+63,+64]" G54="[ordering: +73,+(74|82),+75,+76]")
 │    │    └── cost: 12542.99
 │    ├── [ordering: +31,+32,+33,+34]
 │    │    ├── best: (union-all G53="[ordering: +67,+68,+69,+(61|70)]" G54="[ordering: +79,+80,+81,+(74|82)]")
 │    │    └── cost: 12542.99
 │    └── []
 │         ├── best: (union-all G53 G54)
 │         └── cost: 4879.63
 ├── G44: (eq G55 G56)
 ├── G45: (or G57 G58)
 ├── G46: (union-all G59 G60)
 │    ├── [ordering: +103,+104,+105,+106]
 │    │    ├── best: (union-all G59="[ordering: +115,+116,+117,+(109|118)]" G60="[ordering: +127,+128,+129,+(122|130)]")
 │    │    └── cost: 12542.99
 │    ├── [ordering: +97,+98,+99,+100]
 │    │    ├── best: (union-all G59="[ordering: +(109|118),+110,+111,+112]" G60="[ordering: +121,+(122|130),+123,+124]")
 │    │    └── cost: 12542.99
 │    └── []
 │         ├── best: (union-all G59 G60)
 │         └── cost: 4879.63
 ├── G47: (variable t1.a1)
 ├── G48: (variable t2.a3)
 ├── G49: (eq G61 G62)
 ├── G50: (eq G63 G62)
 ├── G51: (inner-join G64 G65 G66) (inner-join G65 G64 G66) (merge-join G64 G65 G25 inner-join,+37,+46) (lookup-join G65 G25 a [as=t1],keyCols=[46],outCols=(37-40,43-46))
 │    ├── [ordering: +(37|46),+38,+39,+40]
 │    │    ├── best: (sort G51)
 │    │    └── cost: 6171.49
 │    ├── [ordering: +43,+44,+45,+(37|46)]
 │    │    ├── best: (sort G51)
 │    │    └── cost: 6171.49
 │    └── []
 │         ├── best: (inner-join G64 G65 G66)
 │         └── cost: 2339.81
 ├── G52: (inner-join G67 G68 G69) (inner-join G68 G67 G69)
 │    ├── [ordering: +49,+(50|58),+51,+52]
 │    │    ├── best: (sort G52)
 │    │    └── cost: 6171.49
 │    ├── [ordering: +55,+56,+57,+(50|58)]
 │    │    ├── best: (sort G52)
 │    │    └── cost: 6171.49
 │    └── []
 │         ├── best: (inner-join G67 G68 G69)
 │         └── cost: 2339.81
 ├── G53: (inner-join G70 G71 G72) (lookup-join G70 G25 a [as=t1],keyCols=[70],outCols=(61-64,67-70))
 │    ├── [ordering: +(61|70),+62,+63,+64]
 │    │    ├── best: (sort G53)
 │    │    └── cost: 6171.49
 │    ├── [ordering: +67,+68,+69,+(61|70)]
 │    │    ├── best: (sort G53)
 │    │    └── cost: 6171.49
 │    └── []
 │         ├── best: (inner-join G70 G71 G72)
 │         └── cost: 2339.81
 ├── G54: (inner-join G73 G74 G75)
 │    ├── [ordering: +73,+(74|82),+75,+76]
 │    │    ├── best: (sort G54)
 │    │    └── cost: 6171.49
 │    ├── [ordering: +79,+80,+81,+(74|82)]
 │    │    ├── best: (sort G54)
 │    │    └── cost: 6171.49
 │    └── []
 │         ├── best: (inner-join G73 G74 G75)
 │         └── cost: 2339.81
 ├── G55: (variable t1.a1)
 ├── G56: (variable t2.a3)
 ├── G57: (eq G76 G77)
 ├── G58: (eq G78 G77)
 ├── G59: (inner-join G79 G80 G81) (lookup-join G79 G25 a [as=t1],keyCols=[118],outCols=(109-112,115-118))
 │    ├── [ordering: +(109|118),+110,+111,+112]
 │    │    ├── best: (sort G59)
 │    │    └── cost: 6171.49
 │    ├── [ordering: +115,+116,+117,+(109|118)]
 │    │    ├── best: (sort G59)
 │    │    └── cost: 6171.49
 │    └── []
 │         ├── best: (inner-join G79 G80 G81)
 │         └── cost: 2339.81
 ├── G60: (inner-join G82 G83 G84)
 │    ├── [ordering: +121,+(122|130),+123,+124]
 │    │    ├── best: (sort G60)
 │    │    └── cost: 6171.49
 │    ├── [ordering: +127,+128,+129,+(122|130)]
 │    │    ├── best: (sort G60)
 │    │    └── cost: 6171.49
 │    └── []
 │         ├── best: (inner-join G82 G83 G84)
 │         └── cost: 2339.81
 ├── G61: (variable t1.a1)
 ├── G62: (variable t2.a4)
 ├── G63: (variable t1.a2)
 ├── G64: (scan a [as=t1],cols=(37-40))
 │    ├── [ordering: +37]
 │    │    ├── best: (scan a [as=t1],cols=(37-40))
 │    │    └── cost: 1104.82
 │    └── []
 │         ├── best: (scan a [as=t1],cols=(37-40))
 │         └── cost: 1104.82
 ├── G65: (scan a [as=t2],cols=(43-46))
 │    ├── [ordering: +43,+44,+45,+46]
 │    │    ├── best: (scan a [as=t2],cols=(43-46))
 │    │    └── cost: 1104.82
 │    ├── [ordering: +46]
 │    │    ├── best: (sort G65)
 │    │    └── cost: 1364.30
 │    └── []
 │         ├── best: (scan a [as=t2],cols=(43-46))
 │         └── cost: 1104.82
 ├── G66: (filters G85)
 ├── G67: (scan a [as=t1],cols=(49-52))
 │    └── []
 │         ├── best: (scan a [as=t1],cols=(49-52))
 │         └── cost: 1104.82
 ├── G68: (scan a [as=t2],cols=(55-58))
 │    └── []
 │         ├── best: (scan a [as=t2],cols=(55-58))
 │         └── cost: 1104.82
 ├── G69: (filters G86)
 ├── G70: (scan a [as=t2],cols=(67-70))
 │    ├── [ordering: +67,+68,+69,+70]
 │    │    ├── best: (scan a [as=t2],cols=(67-70))
 │    │    └── cost: 1104.82
 │    └── []
 │         ├── best: (scan a [as=t2],cols=(67-70))
 │         └── cost: 1104.82
 ├── G71: (scan a [as=t1],cols=(61-64))
 │    └── []
 │         ├── best: (scan a [as=t1],cols=(61-64))
 │         └── cost: 1104.82
 ├── G72: (filters G87)
 ├── G73: (scan a [as=t2],cols=(79-82))
 │    └── []
 │         ├── best: (scan a [as=t2],cols=(79-82))
 │         └── cost: 1104.82
 ├── G74: (scan a [as=t1],cols=(73-76))
 │    └── []
 │         ├── best: (scan a [as=t1],cols=(73-76))
 │         └── cost: 1104.82
 ├── G75: (filters G88)
 ├── G76: (variable t1.a1)
 ├── G77: (variable t2.a4)
 ├── G78: (variable t1.a2)
 ├── G79: (scan a [as=t2],cols=(115-118))
 │    ├── [ordering: +115,+116,+117,+118]
 │    │    ├── best: (scan a [as=t2],cols=(115-118))
 │    │    └── cost: 1104.82
 │    └── []
 │         ├── best: (scan a [as=t2],cols=(115-118))
 │         └── cost: 1104.82
 ├── G80: (scan a [as=t1],cols=(109-112))
 │    └── []
 │         ├── best: (scan a [as=t1],cols=(109-112))
 │         └── cost: 1104.82
 ├── G81: (filters G89)
 ├── G82: (scan a [as=t2],cols=(127-130))
 │    └── []
 │         ├── best: (scan a [as=t2],cols=(127-130))
 │         └── cost: 1104.82
 ├── G83: (scan a [as=t1],cols=(121-124))
 │    └── []
 │         ├── best: (scan a [as=t1],cols=(121-124))
 │         └── cost: 1104.82
 ├── G84: (filters G90)
 ├── G85: (eq G91 G92)
 ├── G86: (eq G93 G94)
 ├── G87: (eq G95 G96)
 ├── G88: (eq G97 G98)
 ├── G89: (eq G99 G100)
 ├── G90: (eq G101 G102)
 ├── G91: (variable t1.a1)
 ├── G92: (variable t2.a4)
 ├── G93: (variable t1.a2)
 ├── G94: (variable t2.a4)
 ├── G95: (variable t1.a1)
 ├── G96: (variable t2.a4)
 ├── G97: (variable t1.a2)
 ├── G98: (variable t2.a4)
 ├── G99: (variable t1.a1)
 ├── G100: (variable t2.a4)
 ├── G101: (variable t1.a2)
 └── G102: (variable t2.a4)

# Join of tables with compound primary keys
opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a t1, a t2 WHERE (t1.a2 = t2.a2 OR t1.a3 = t2.a3) AND (t1.a1 = t2.a1 OR t1.a4 = t2.a4)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null a1:7!null a2:8!null a3:9!null a4:10!null
 ├── key: (1-4,7-10)
 └── distinct-on
      ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null t2.a1:7!null t2.a2:8!null t2.a3:9!null t2.a4:10!null
      ├── grouping columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null t2.a1:7!null t2.a2:8!null t2.a3:9!null t2.a4:10!null
      ├── key: (1-4,7-10)
      └── union-all
           ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null t2.a1:7!null t2.a2:8!null t2.a3:9!null t2.a4:10!null
           ├── left columns: t1.a1:13 t1.a2:14 t1.a3:15 t1.a4:16 t2.a1:19 t2.a2:20 t2.a3:21 t2.a4:22
           ├── right columns: t1.a1:25 t1.a2:26 t1.a3:27 t1.a4:28 t2.a1:31 t2.a2:32 t2.a3:33 t2.a4:34
           ├── inner-join (hash)
           │    ├── columns: t1.a1:13!null t1.a2:14!null t1.a3:15!null t1.a4:16!null t2.a1:19!null t2.a2:20!null t2.a3:21!null t2.a4:22!null
           │    ├── key: (13,15,16,19-22)
           │    ├── fd: (14)==(20), (20)==(14)
           │    ├── scan a [as=t1]
           │    │    ├── columns: t1.a1:13!null t1.a2:14!null t1.a3:15!null t1.a4:16!null
           │    │    └── key: (13-16)
           │    ├── scan a [as=t2]
           │    │    ├── columns: t2.a1:19!null t2.a2:20!null t2.a3:21!null t2.a4:22!null
           │    │    └── key: (19-22)
           │    └── filters
           │         ├── t1.a2:14 = t2.a2:20 [outer=(14,20), constraints=(/14: (/NULL - ]; /20: (/NULL - ]), fd=(14)==(20), (20)==(14)]
           │         └── (t1.a1:13 = t2.a1:19) OR (t1.a4:16 = t2.a4:22) [outer=(13,16,19,22)]
           └── inner-join (hash)
                ├── columns: t1.a1:25!null t1.a2:26!null t1.a3:27!null t1.a4:28!null t2.a1:31!null t2.a2:32!null t2.a3:33!null t2.a4:34!null
                ├── key: (25,26,28,31-34)
                ├── fd: (27)==(33), (33)==(27)
                ├── scan a [as=t1]
                │    ├── columns: t1.a1:25!null t1.a2:26!null t1.a3:27!null t1.a4:28!null
                │    └── key: (25-28)
                ├── scan a [as=t2]
                │    ├── columns: t2.a1:31!null t2.a2:32!null t2.a3:33!null t2.a4:34!null
                │    └── key: (31-34)
                └── filters
                     ├── t1.a3:27 = t2.a3:33 [outer=(27,33), constraints=(/27: (/NULL - ]; /33: (/NULL - ]), fd=(27)==(33), (33)==(27)]
                     └── (t1.a1:25 = t2.a1:31) OR (t1.a4:28 = t2.a4:34) [outer=(25,28,31,34)]

# Join of tables with compound primary keys
opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a, B WHERE (a2 = b2 OR a3 = b3) AND (a1 = b1 OR a4 = b4)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b1:7 b2:8 b3:9 b4:10
 └── distinct-on
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b1:7 b2:8 b3:9 b4:10 rowid:11!null
      ├── grouping columns: a1:1!null a2:2!null a3:3!null a4:4!null rowid:11!null
      ├── key: (1-4,11)
      ├── fd: (1-4,11)-->(7-10)
      ├── union-all
      │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b1:7 b2:8 b3:9 b4:10 rowid:11!null
      │    ├── left columns: a1:14 a2:15 a3:16 a4:17 b1:20 b2:21 b3:22 b4:23 rowid:24
      │    ├── right columns: a1:27 a2:28 a3:29 a4:30 b1:33 b2:34 b3:35 b4:36 rowid:37
      │    ├── inner-join (hash)
      │    │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null b1:20 b2:21!null b3:22 b4:23 rowid:24!null
      │    │    ├── key: (14,16,17,24)
      │    │    ├── fd: (24)-->(20-23), (15)==(21), (21)==(15)
      │    │    ├── scan a
      │    │    │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
      │    │    │    └── key: (14-17)
      │    │    ├── scan b
      │    │    │    ├── columns: b1:20 b2:21 b3:22 b4:23 rowid:24!null
      │    │    │    ├── key: (24)
      │    │    │    └── fd: (24)-->(20-23)
      │    │    └── filters
      │    │         ├── a2:15 = b2:21 [outer=(15,21), constraints=(/15: (/NULL - ]; /21: (/NULL - ]), fd=(15)==(21), (21)==(15)]
      │    │         └── (a1:14 = b1:20) OR (a4:17 = b4:23) [outer=(14,17,20,23)]
      │    └── inner-join (hash)
      │         ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null b1:33 b2:34 b3:35!null b4:36 rowid:37!null
      │         ├── key: (27,28,30,37)
      │         ├── fd: (37)-->(33-36), (29)==(35), (35)==(29)
      │         ├── scan a
      │         │    ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
      │         │    └── key: (27-30)
      │         ├── scan b
      │         │    ├── columns: b1:33 b2:34 b3:35 b4:36 rowid:37!null
      │         │    ├── key: (37)
      │         │    └── fd: (37)-->(33-36)
      │         └── filters
      │              ├── a3:29 = b3:35 [outer=(29,35), constraints=(/29: (/NULL - ]; /35: (/NULL - ]), fd=(29)==(35), (35)==(29)]
      │              └── (a1:27 = b1:33) OR (a4:30 = b4:36) [outer=(27,30,33,36)]
      └── aggregations
           ├── const-agg [as=b1:7, outer=(7)]
           │    └── b1:7
           ├── const-agg [as=b2:8, outer=(8)]
           │    └── b2:8
           ├── const-agg [as=b3:9, outer=(9)]
           │    └── b3:9
           └── const-agg [as=b4:10, outer=(10)]
                └── b4:10

opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a t1, a t2 WHERE (t1.a2 = t2.a2 OR t1.a3 = t2.a3) AND (t1.a1 = t2.a1 OR t1.a4 = t2.a4)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null a1:7!null a2:8!null a3:9!null a4:10!null
 ├── key: (1-4,7-10)
 └── distinct-on
      ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null t2.a1:7!null t2.a2:8!null t2.a3:9!null t2.a4:10!null
      ├── grouping columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null t2.a1:7!null t2.a2:8!null t2.a3:9!null t2.a4:10!null
      ├── key: (1-4,7-10)
      └── union-all
           ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null t2.a1:7!null t2.a2:8!null t2.a3:9!null t2.a4:10!null
           ├── left columns: t1.a1:13 t1.a2:14 t1.a3:15 t1.a4:16 t2.a1:19 t2.a2:20 t2.a3:21 t2.a4:22
           ├── right columns: t1.a1:25 t1.a2:26 t1.a3:27 t1.a4:28 t2.a1:31 t2.a2:32 t2.a3:33 t2.a4:34
           ├── inner-join (hash)
           │    ├── columns: t1.a1:13!null t1.a2:14!null t1.a3:15!null t1.a4:16!null t2.a1:19!null t2.a2:20!null t2.a3:21!null t2.a4:22!null
           │    ├── key: (13,15,16,19-22)
           │    ├── fd: (14)==(20), (20)==(14)
           │    ├── scan a [as=t1]
           │    │    ├── columns: t1.a1:13!null t1.a2:14!null t1.a3:15!null t1.a4:16!null
           │    │    └── key: (13-16)
           │    ├── scan a [as=t2]
           │    │    ├── columns: t2.a1:19!null t2.a2:20!null t2.a3:21!null t2.a4:22!null
           │    │    └── key: (19-22)
           │    └── filters
           │         ├── t1.a2:14 = t2.a2:20 [outer=(14,20), constraints=(/14: (/NULL - ]; /20: (/NULL - ]), fd=(14)==(20), (20)==(14)]
           │         └── (t1.a1:13 = t2.a1:19) OR (t1.a4:16 = t2.a4:22) [outer=(13,16,19,22)]
           └── inner-join (hash)
                ├── columns: t1.a1:25!null t1.a2:26!null t1.a3:27!null t1.a4:28!null t2.a1:31!null t2.a2:32!null t2.a3:33!null t2.a4:34!null
                ├── key: (25,26,28,31-34)
                ├── fd: (27)==(33), (33)==(27)
                ├── scan a [as=t1]
                │    ├── columns: t1.a1:25!null t1.a2:26!null t1.a3:27!null t1.a4:28!null
                │    └── key: (25-28)
                ├── scan a [as=t2]
                │    ├── columns: t2.a1:31!null t2.a2:32!null t2.a3:33!null t2.a4:34!null
                │    └── key: (31-34)
                └── filters
                     ├── t1.a3:27 = t2.a3:33 [outer=(27,33), constraints=(/27: (/NULL - ]; /33: (/NULL - ]), fd=(27)==(33), (33)==(27)]
                     └── (t1.a1:25 = t2.a1:31) OR (t1.a4:28 = t2.a4:34) [outer=(25,28,31,34)]

opt expect=SplitDisjunctionOfJoinTerms
SELECT a1,a2,a3 FROM a,b WHERE (a1=b1 AND a2=b2 AND (a1=1 OR b1=1)) OR (a3=b3 AND a4=b4)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null
 └── project
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b1:7 b2:8 b3:9 b4:10
      └── distinct-on
           ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b1:7 b2:8 b3:9 b4:10 rowid:11!null
           ├── grouping columns: a1:1!null a2:2!null a3:3!null a4:4!null rowid:11!null
           ├── key: (1-4,11)
           ├── fd: (1-4,11)-->(7-10)
           ├── union-all
           │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b1:7 b2:8 b3:9 b4:10 rowid:11!null
           │    ├── left columns: a1:14 a2:15 a3:16 a4:17 b1:20 b2:21 b3:22 b4:23 rowid:24
           │    ├── right columns: a1:27 a2:28 a3:29 a4:30 b1:33 b2:34 b3:35 b4:36 rowid:37
           │    ├── inner-join (merge)
           │    │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null b1:20!null b2:21!null b3:22 b4:23 rowid:24!null
           │    │    ├── left ordering: +15,+14
           │    │    ├── right ordering: +21,+20
           │    │    ├── key: (16,17,24)
           │    │    ├── fd: ()-->(14,20), (24)-->(21-23), (14)==(20), (20)==(14), (15)==(21), (21)==(15)
           │    │    ├── scan a
           │    │    │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
           │    │    │    ├── constraint: /14/15/16/17: [/1 - /1]
           │    │    │    ├── key: (15-17)
           │    │    │    ├── fd: ()-->(14)
           │    │    │    └── ordering: +15 opt(14) [actual: +15]
           │    │    ├── scan b@b_b1_b2_idx
           │    │    │    ├── columns: b1:20!null b2:21 b3:22 b4:23 rowid:24!null
           │    │    │    ├── constraint: /20/21/24: [/1 - /1]
           │    │    │    ├── key: (24)
           │    │    │    ├── fd: ()-->(20), (24)-->(21-23)
           │    │    │    └── ordering: +21 opt(20) [actual: +21]
           │    │    └── filters (true)
           │    └── inner-join (hash)
           │         ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null b1:33 b2:34 b3:35!null b4:36!null rowid:37!null
           │         ├── key: (27,28,37)
           │         ├── fd: (37)-->(33-36), (29)==(35), (35)==(29), (30)==(36), (36)==(30)
           │         ├── scan a
           │         │    ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
           │         │    └── key: (27-30)
           │         ├── scan b
           │         │    ├── columns: b1:33 b2:34 b3:35 b4:36 rowid:37!null
           │         │    ├── key: (37)
           │         │    └── fd: (37)-->(33-36)
           │         └── filters
           │              ├── a3:29 = b3:35 [outer=(29,35), constraints=(/29: (/NULL - ]; /35: (/NULL - ]), fd=(29)==(35), (35)==(29)]
           │              └── a4:30 = b4:36 [outer=(30,36), constraints=(/30: (/NULL - ]; /36: (/NULL - ]), fd=(30)==(36), (36)==(30)]
           └── aggregations
                ├── const-agg [as=b1:7, outer=(7)]
                │    └── b1:7
                ├── const-agg [as=b2:8, outer=(8)]
                │    └── b2:8
                ├── const-agg [as=b3:9, outer=(9)]
                │    └── b3:9
                └── const-agg [as=b4:10, outer=(10)]
                     └── b4:10

opt expect=SplitDisjunctionOfJoinTerms
SELECT a1,a2,a3 FROM a,b WHERE a1=1 AND (a2=b2 OR a3=b3)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null
 ├── fd: ()-->(1)
 └── project
      ├── columns: a1:1!null a2:2!null a3:3!null b2:8 b3:9
      ├── fd: ()-->(1)
      └── distinct-on
           ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b2:8 b3:9 rowid:11!null
           ├── grouping columns: a1:1!null a2:2!null a3:3!null a4:4!null rowid:11!null
           ├── key: (1-4,11)
           ├── fd: (1-4,11)-->(8,9)
           ├── union-all
           │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b2:8 b3:9 rowid:11!null
           │    ├── left columns: a1:14 a2:15 a3:16 a4:17 b2:21 b3:22 rowid:24
           │    ├── right columns: a1:27 a2:28 a3:29 a4:30 b2:34 b3:35 rowid:37
           │    ├── inner-join (lookup b@b_b2_idx)
           │    │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null b2:21!null b3:22 rowid:24!null
           │    │    ├── key columns: [15] = [21]
           │    │    ├── key: (16,17,24)
           │    │    ├── fd: ()-->(14), (24)-->(21,22), (15)==(21), (21)==(15)
           │    │    ├── scan a
           │    │    │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
           │    │    │    ├── constraint: /14/15/16/17: [/1 - /1]
           │    │    │    ├── key: (15-17)
           │    │    │    └── fd: ()-->(14)
           │    │    └── filters (true)
           │    └── inner-join (lookup b@b_b3_idx)
           │         ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null b2:34 b3:35!null rowid:37!null
           │         ├── key columns: [29] = [35]
           │         ├── key: (28,30,37)
           │         ├── fd: ()-->(27), (37)-->(34,35), (29)==(35), (35)==(29)
           │         ├── scan a
           │         │    ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
           │         │    ├── constraint: /27/28/29/30: [/1 - /1]
           │         │    ├── key: (28-30)
           │         │    └── fd: ()-->(27)
           │         └── filters (true)
           └── aggregations
                ├── const-agg [as=b2:8, outer=(8)]
                │    └── b2:8
                └── const-agg [as=b3:9, outer=(9)]
                     └── b3:9

# More than one disjunction in the filter
memo expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a, c WHERE (a1 = c1 OR a2 = c2 OR a3 = c3 OR a4 = c4)
----
memo (optimized, ~134KB, required=[presentation: a1:1,a2:2,a3:3,a4:4,c1:7,c2:8,c3:9,c4:10])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4) (project G5 G6 a1 a2 a3 a4 c1 c2 c3 c4) (project G7 G6 a1 a2 a3 a4 c1 c2 c3 c4)
 │    └── [presentation: a1:1,a2:2,a3:3,a4:4,c1:7,c2:8,c3:9,c4:10]
 │         ├── best: (inner-join G2 G3 G4)
 │         └── cost: 12249.92
 ├── G2: (scan a,cols=(1-4))
 │    └── []
 │         ├── best: (scan a,cols=(1-4))
 │         └── cost: 1104.82
 ├── G3: (scan c,cols=(7-10))
 │    └── []
 │         ├── best: (scan c,cols=(7-10))
 │         └── cost: 1114.92
 ├── G4: (filters G8)
 ├── G5: (distinct-on G9 G10 cols=(1-4,11)) (distinct-on G9 G10 cols=(1-4,11),ordering=+1,+2,+3,+4) (distinct-on G9 G10 cols=(1-4,11),ordering=+11)
 │    └── []
 │         ├── best: (distinct-on G9 G10 cols=(1-4,11))
 │         └── cost: 19615.84
 ├── G6: (projections)
 ├── G7: (distinct-on G11 G10 cols=(1-4,11)) (distinct-on G11 G10 cols=(1-4,11),ordering=+11) (distinct-on G11 G10 cols=(1-4,11),ordering=+1,+2,+3,+4)
 │    └── []
 │         ├── best: (distinct-on G11 G10 cols=(1-4,11))
 │         └── cost: 19615.84
 ├── G8: (or G12 G13)
 ├── G9: (union-all G14 G15)
 │    ├── [ordering: +1,+2,+3,+4]
 │    │    ├── best: (union-all G14="[ordering: +(14|20),+15,+16,+17]" G15="[ordering: +27,+28,+29,+30]")
 │    │    └── cost: 31657.80
 │    ├── [ordering: +11]
 │    │    ├── best: (union-all G14="[ordering: +24]" G15="[ordering: +37]")
 │    │    └── cost: 30978.14
 │    └── []
 │         ├── best: (union-all G14 G15)
 │         └── cost: 15015.05
 ├── G10: (aggregations G16 G17 G18 G19)
 ├── G11: (union-all G20 G21)
 │    ├── [ordering: +1,+2,+3,+4]
 │    │    ├── best: (union-all G20="[ordering: +(170|176),+171,+172,+173]" G21="[ordering: +183,+184,+185,+186]")
 │    │    └── cost: 31657.80
 │    ├── [ordering: +11]
 │    │    ├── best: (union-all G20="[ordering: +180]" G21="[ordering: +193]")
 │    │    └── cost: 30978.14
 │    └── []
 │         ├── best: (union-all G20 G21)
 │         └── cost: 15015.05
 ├── G12: (or G22 G23)
 ├── G13: (eq G24 G25)
 ├── G14: (inner-join G26 G27 G28) (inner-join G27 G26 G28) (merge-join G26 G27 G29 inner-join,+14,+20) (lookup-join G27 G29 a,keyCols=[20],outCols=(14-17,20-24))
 │    ├── [ordering: +(14|20),+15,+16,+17]
 │    │    ├── best: (sort G14)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +24]
 │    │    ├── best: (sort G14)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G26 G27 G28)
 │         └── cost: 2359.01
 ├── G15: (inner-join G30 G31 G32) (inner-join G31 G30 G32) (project G33 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid) (project G34 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    ├── [ordering: +27,+28,+29,+30]
 │    │    ├── best: (sort G15)
 │    │    └── cost: 25013.58
 │    ├── [ordering: +37]
 │    │    ├── best: (sort G15)
 │    │    └── cost: 24490.77
 │    └── []
 │         ├── best: (inner-join G30 G31 G32)
 │         └── cost: 12260.02
 ├── G16: (const-agg G35)
 ├── G17: (const-agg G36)
 ├── G18: (const-agg G37)
 ├── G19: (const-agg G25)
 ├── G20: (inner-join G38 G39 G40) (lookup-join G38 G29 a,keyCols=[176],outCols=(170-173,176-180))
 │    ├── [ordering: +(170|176),+171,+172,+173]
 │    │    ├── best: (sort G20)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +180]
 │    │    ├── best: (sort G20)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G38 G39 G40)
 │         └── cost: 2359.01
 ├── G21: (inner-join G41 G42 G43) (project G44 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    ├── [ordering: +183,+184,+185,+186]
 │    │    ├── best: (sort G21)
 │    │    └── cost: 25013.58
 │    ├── [ordering: +193]
 │    │    ├── best: (sort G21)
 │    │    └── cost: 24490.77
 │    └── []
 │         ├── best: (inner-join G41 G42 G43)
 │         └── cost: 12260.02
 ├── G22: (or G45 G46)
 ├── G23: (eq G47 G37)
 ├── G24: (variable a4)
 ├── G25: (variable c4)
 ├── G26: (scan a,cols=(14-17))
 │    ├── [ordering: +14]
 │    │    ├── best: (scan a,cols=(14-17))
 │    │    └── cost: 1104.82
 │    └── []
 │         ├── best: (scan a,cols=(14-17))
 │         └── cost: 1104.82
 ├── G27: (scan c,cols=(20-24))
 │    ├── [ordering: +20]
 │    │    ├── best: (sort G27)
 │    │    └── cost: 1394.50
 │    ├── [ordering: +24]
 │    │    ├── best: (scan c,cols=(20-24))
 │    │    └── cost: 1125.02
 │    └── []
 │         ├── best: (scan c,cols=(20-24))
 │         └── cost: 1125.02
 ├── G28: (filters G48)
 ├── G29: (filters)
 ├── G30: (scan a,cols=(27-30))
 │    └── []
 │         ├── best: (scan a,cols=(27-30))
 │         └── cost: 1104.82
 ├── G31: (scan c,cols=(33-37))
 │    └── []
 │         ├── best: (scan c,cols=(33-37))
 │         └── cost: 1125.02
 ├── G32: (filters G49)
 ├── G33: (distinct-on G50 G51 cols=(27-30,37)) (distinct-on G50 G51 cols=(27-30,37),ordering=+27,+28,+29,+30) (distinct-on G50 G51 cols=(27-30,37),ordering=+37)
 │    ├── [ordering: +27,+28,+29,+30]
 │    │    ├── best: (distinct-on G50="[ordering: +27,+28,+29,+30]" G51 cols=(27-30,37))
 │    │    └── cost: 25095.20
 │    ├── [ordering: +37]
 │    │    ├── best: (distinct-on G50="[ordering: +37]" G51 cols=(27-30,37))
 │    │    └── cost: 24624.65
 │    └── []
 │         ├── best: (distinct-on G50 G51 cols=(27-30,37))
 │         └── cost: 13427.66
 ├── G34: (distinct-on G52 G51 cols=(27-30,37)) (distinct-on G52 G51 cols=(27-30,37),ordering=+37) (distinct-on G52 G51 cols=(27-30,37),ordering=+27,+28,+29,+30)
 │    ├── [ordering: +27,+28,+29,+30]
 │    │    ├── best: (distinct-on G52="[ordering: +27,+28,+29,+30]" G51 cols=(27-30,37))
 │    │    └── cost: 25095.20
 │    ├── [ordering: +37]
 │    │    ├── best: (distinct-on G52="[ordering: +37]" G51 cols=(27-30,37))
 │    │    └── cost: 24624.65
 │    └── []
 │         ├── best: (distinct-on G52 G51 cols=(27-30,37))
 │         └── cost: 13427.66
 ├── G35: (variable c1)
 ├── G36: (variable c2)
 ├── G37: (variable c3)
 ├── G38: (scan c,cols=(176-180))
 │    ├── [ordering: +180]
 │    │    ├── best: (scan c,cols=(176-180))
 │    │    └── cost: 1125.02
 │    └── []
 │         ├── best: (scan c,cols=(176-180))
 │         └── cost: 1125.02
 ├── G39: (scan a,cols=(170-173))
 │    └── []
 │         ├── best: (scan a,cols=(170-173))
 │         └── cost: 1104.82
 ├── G40: (filters G53)
 ├── G41: (scan c,cols=(189-193))
 │    └── []
 │         ├── best: (scan c,cols=(189-193))
 │         └── cost: 1125.02
 ├── G42: (scan a,cols=(183-186))
 │    └── []
 │         ├── best: (scan a,cols=(183-186))
 │         └── cost: 1104.82
 ├── G43: (filters G54)
 ├── G44: (distinct-on G55 G56 cols=(183-186,193)) (distinct-on G55 G56 cols=(183-186,193),ordering=+193) (distinct-on G55 G56 cols=(183-186,193),ordering=+183,+184,+185,+186)
 │    ├── [ordering: +183,+184,+185,+186]
 │    │    ├── best: (distinct-on G55="[ordering: +183,+184,+185,+186]" G56 cols=(183-186,193))
 │    │    └── cost: 25095.20
 │    ├── [ordering: +193]
 │    │    ├── best: (distinct-on G55="[ordering: +193]" G56 cols=(183-186,193))
 │    │    └── cost: 24624.65
 │    └── []
 │         ├── best: (distinct-on G55 G56 cols=(183-186,193))
 │         └── cost: 13427.66
 ├── G45: (eq G57 G35)
 ├── G46: (eq G58 G36)
 ├── G47: (variable a3)
 ├── G48: (eq G59 G60)
 ├── G49: (or G61 G62)
 ├── G50: (union-all G63 G64)
 │    ├── [ordering: +27,+28,+29,+30]
 │    │    ├── best: (union-all G63="[ordering: +40,+41,+42,+(43|49)]" G64="[ordering: +53,+54,+55,+56]")
 │    │    └── cost: 21678.71
 │    ├── [ordering: +37]
 │    │    ├── best: (union-all G63="[ordering: +50]" G64="[ordering: +63]")
 │    │    └── cost: 21208.16
 │    └── []
 │         ├── best: (union-all G63 G64)
 │         └── cost: 10011.17
 ├── G51: (aggregations G65 G66 G67 G68)
 ├── G52: (union-all G69 G70)
 │    ├── [ordering: +27,+28,+29,+30]
 │    │    ├── best: (union-all G69="[ordering: +118,+119,+120,+(121|127)]" G70="[ordering: +131,+132,+133,+134]")
 │    │    └── cost: 21678.71
 │    ├── [ordering: +37]
 │    │    ├── best: (union-all G69="[ordering: +128]" G70="[ordering: +141]")
 │    │    └── cost: 21208.16
 │    └── []
 │         ├── best: (union-all G69 G70)
 │         └── cost: 10011.17
 ├── G53: (eq G71 G72)
 ├── G54: (or G73 G74)
 ├── G55: (union-all G75 G76)
 │    ├── [ordering: +183,+184,+185,+186]
 │    │    ├── best: (union-all G75="[ordering: +196,+197,+198,+(199|205)]" G76="[ordering: +209,+210,+211,+212]")
 │    │    └── cost: 21678.71
 │    ├── [ordering: +193]
 │    │    ├── best: (union-all G75="[ordering: +206]" G76="[ordering: +219]")
 │    │    └── cost: 21208.16
 │    └── []
 │         ├── best: (union-all G75 G76)
 │         └── cost: 10011.17
 ├── G56: (aggregations G77 G78 G79 G80)
 ├── G57: (variable a1)
 ├── G58: (variable a2)
 ├── G59: (variable a1)
 ├── G60: (variable c1)
 ├── G61: (eq G81 G82)
 ├── G62: (or G83 G84)
 ├── G63: (inner-join G85 G86 G87) (inner-join G86 G85 G87)
 │    ├── [ordering: +40,+41,+42,+(43|49)]
 │    │    ├── best: (sort G63)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +50]
 │    │    ├── best: (sort G63)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G85 G86 G87)
 │         └── cost: 2359.01
 ├── G64: (inner-join G88 G89 G90) (inner-join G89 G88 G90) (project G91 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid) (project G92 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    ├── [ordering: +53,+54,+55,+56]
 │    │    ├── best: (project G91="[ordering: +53,+54,+55,+56]" G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    │    └── cost: 15132.50
 │    ├── [ordering: +63]
 │    │    ├── best: (project G91="[ordering: +63]" G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    │    └── cost: 14818.80
 │    └── []
 │         ├── best: (project G91 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │         └── cost: 7354.14
 ├── G65: (const-agg G93)
 ├── G66: (const-agg G94)
 ├── G67: (const-agg G95)
 ├── G68: (const-agg G82)
 ├── G69: (inner-join G96 G97 G98)
 │    ├── [ordering: +118,+119,+120,+(121|127)]
 │    │    ├── best: (sort G69)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +128]
 │    │    ├── best: (sort G69)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G96 G97 G98)
 │         └── cost: 2359.01
 ├── G70: (inner-join G99 G100 G101) (project G102 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    ├── [ordering: +131,+132,+133,+134]
 │    │    ├── best: (project G102="[ordering: +131,+132,+133,+134]" G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    │    └── cost: 15132.50
 │    ├── [ordering: +141]
 │    │    ├── best: (project G102="[ordering: +141]" G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    │    └── cost: 14818.80
 │    └── []
 │         ├── best: (project G102 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │         └── cost: 7354.14
 ├── G71: (variable a1)
 ├── G72: (variable c1)
 ├── G73: (eq G103 G104)
 ├── G74: (or G105 G106)
 ├── G75: (inner-join G107 G108 G109)
 │    ├── [ordering: +196,+197,+198,+(199|205)]
 │    │    ├── best: (sort G75)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +206]
 │    │    ├── best: (sort G75)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G107 G108 G109)
 │         └── cost: 2359.01
 ├── G76: (inner-join G110 G111 G112) (project G113 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    ├── [ordering: +209,+210,+211,+212]
 │    │    ├── best: (project G113="[ordering: +209,+210,+211,+212]" G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    │    └── cost: 15132.50
 │    ├── [ordering: +219]
 │    │    ├── best: (project G113="[ordering: +219]" G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    │    └── cost: 14818.80
 │    └── []
 │         ├── best: (project G113 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │         └── cost: 7354.14
 ├── G77: (const-agg G114)
 ├── G78: (const-agg G115)
 ├── G79: (const-agg G116)
 ├── G80: (const-agg G104)
 ├── G81: (variable a4)
 ├── G82: (variable c4)
 ├── G83: (eq G117 G95)
 ├── G84: (eq G118 G94)
 ├── G85: (scan a,cols=(40-43))
 │    └── []
 │         ├── best: (scan a,cols=(40-43))
 │         └── cost: 1104.82
 ├── G86: (scan c,cols=(46-50))
 │    └── []
 │         ├── best: (scan c,cols=(46-50))
 │         └── cost: 1125.02
 ├── G87: (filters G119)
 ├── G88: (scan a,cols=(53-56))
 │    └── []
 │         ├── best: (scan a,cols=(53-56))
 │         └── cost: 1104.82
 ├── G89: (scan c,cols=(59-63))
 │    └── []
 │         ├── best: (scan c,cols=(59-63))
 │         └── cost: 1125.02
 ├── G90: (filters G120)
 ├── G91: (distinct-on G121 G122 cols=(53-56,63)) (distinct-on G121 G122 cols=(53-56,63),ordering=+53,+54,+55,+56) (distinct-on G121 G122 cols=(53-56,63),ordering=+63)
 │    ├── [ordering: +53,+54,+55,+56]
 │    │    ├── best: (distinct-on G121="[ordering: +53,+54,+55,+56]" G122 cols=(53-56,63))
 │    │    └── cost: 14933.48
 │    ├── [ordering: +63]
 │    │    ├── best: (distinct-on G121="[ordering: +63]" G122 cols=(53-56,63))
 │    │    └── cost: 14619.78
 │    └── []
 │         ├── best: (distinct-on G121 G122 cols=(53-56,63))
 │         └── cost: 7155.12
 ├── G92: (distinct-on G123 G122 cols=(53-56,63)) (distinct-on G123 G122 cols=(53-56,63),ordering=+63) (distinct-on G123 G122 cols=(53-56,63),ordering=+53,+54,+55,+56)
 │    ├── [ordering: +53,+54,+55,+56]
 │    │    ├── best: (distinct-on G123="[ordering: +53,+54,+55,+56]" G122 cols=(53-56,63))
 │    │    └── cost: 14933.48
 │    ├── [ordering: +63]
 │    │    ├── best: (distinct-on G123="[ordering: +63]" G122 cols=(53-56,63))
 │    │    └── cost: 14619.78
 │    └── []
 │         ├── best: (distinct-on G123 G122 cols=(53-56,63))
 │         └── cost: 7155.12
 ├── G93: (variable c1)
 ├── G94: (variable c2)
 ├── G95: (variable c3)
 ├── G96: (scan c,cols=(124-128))
 │    └── []
 │         ├── best: (scan c,cols=(124-128))
 │         └── cost: 1125.02
 ├── G97: (scan a,cols=(118-121))
 │    └── []
 │         ├── best: (scan a,cols=(118-121))
 │         └── cost: 1104.82
 ├── G98: (filters G124)
 ├── G99: (scan c,cols=(137-141))
 │    └── []
 │         ├── best: (scan c,cols=(137-141))
 │         └── cost: 1125.02
 ├── G100: (scan a,cols=(131-134))
 │    └── []
 │         ├── best: (scan a,cols=(131-134))
 │         └── cost: 1104.82
 ├── G101: (filters G125)
 ├── G102: (distinct-on G126 G127 cols=(131-134,141)) (distinct-on G126 G127 cols=(131-134,141),ordering=+141) (distinct-on G126 G127 cols=(131-134,141),ordering=+131,+132,+133,+134)
 │    ├── [ordering: +131,+132,+133,+134]
 │    │    ├── best: (distinct-on G126="[ordering: +131,+132,+133,+134]" G127 cols=(131-134,141))
 │    │    └── cost: 14933.48
 │    ├── [ordering: +141]
 │    │    ├── best: (distinct-on G126="[ordering: +141]" G127 cols=(131-134,141))
 │    │    └── cost: 14619.78
 │    └── []
 │         ├── best: (distinct-on G126 G127 cols=(131-134,141))
 │         └── cost: 7155.12
 ├── G103: (variable a4)
 ├── G104: (variable c4)
 ├── G105: (eq G128 G116)
 ├── G106: (eq G129 G115)
 ├── G107: (scan c,cols=(202-206))
 │    └── []
 │         ├── best: (scan c,cols=(202-206))
 │         └── cost: 1125.02
 ├── G108: (scan a,cols=(196-199))
 │    └── []
 │         ├── best: (scan a,cols=(196-199))
 │         └── cost: 1104.82
 ├── G109: (filters G130)
 ├── G110: (scan c,cols=(215-219))
 │    └── []
 │         ├── best: (scan c,cols=(215-219))
 │         └── cost: 1125.02
 ├── G111: (scan a,cols=(209-212))
 │    └── []
 │         ├── best: (scan a,cols=(209-212))
 │         └── cost: 1104.82
 ├── G112: (filters G131)
 ├── G113: (distinct-on G132 G133 cols=(209-212,219)) (distinct-on G132 G133 cols=(209-212,219),ordering=+219) (distinct-on G132 G133 cols=(209-212,219),ordering=+209,+210,+211,+212)
 │    ├── [ordering: +209,+210,+211,+212]
 │    │    ├── best: (distinct-on G132="[ordering: +209,+210,+211,+212]" G133 cols=(209-212,219))
 │    │    └── cost: 14933.48
 │    ├── [ordering: +219]
 │    │    ├── best: (distinct-on G132="[ordering: +219]" G133 cols=(209-212,219))
 │    │    └── cost: 14619.78
 │    └── []
 │         ├── best: (distinct-on G132 G133 cols=(209-212,219))
 │         └── cost: 7155.12
 ├── G114: (variable c1)
 ├── G115: (variable c2)
 ├── G116: (variable c3)
 ├── G117: (variable a3)
 ├── G118: (variable a2)
 ├── G119: (eq G134 G135)
 ├── G120: (or G136 G137)
 ├── G121: (union-all G138 G139)
 │    ├── [ordering: +53,+54,+55,+56]
 │    │    ├── best: (union-all G138="[ordering: +66,+(67|73),+68,+69]" G139="[ordering: +79,+80,+(81|87),+82]")
 │    │    └── cost: 12694.39
 │    ├── [ordering: +63]
 │    │    ├── best: (union-all G138="[ordering: +76]" G139="[ordering: +89]")
 │    │    └── cost: 12380.70
 │    └── []
 │         ├── best: (union-all G138 G139)
 │         └── cost: 4916.03
 ├── G122: (aggregations G140 G141 G142 G143)
 ├── G123: (union-all G144 G145)
 │    ├── [ordering: +53,+54,+55,+56]
 │    │    ├── best: (union-all G144="[ordering: +92,+(93|99),+94,+95]" G145="[ordering: +105,+106,+(107|113),+108]")
 │    │    └── cost: 12694.39
 │    ├── [ordering: +63]
 │    │    ├── best: (union-all G144="[ordering: +102]" G145="[ordering: +115]")
 │    │    └── cost: 12380.70
 │    └── []
 │         ├── best: (union-all G144 G145)
 │         └── cost: 4916.03
 ├── G124: (eq G146 G147)
 ├── G125: (or G148 G149)
 ├── G126: (union-all G150 G151)
 │    ├── [ordering: +131,+132,+133,+134]
 │    │    ├── best: (union-all G150="[ordering: +144,+(145|151),+146,+147]" G151="[ordering: +157,+158,+(159|165),+160]")
 │    │    └── cost: 12694.39
 │    ├── [ordering: +141]
 │    │    ├── best: (union-all G150="[ordering: +154]" G151="[ordering: +167]")
 │    │    └── cost: 12380.70
 │    └── []
 │         ├── best: (union-all G150 G151)
 │         └── cost: 4916.03
 ├── G127: (aggregations G152 G153 G154 G155)
 ├── G128: (variable a3)
 ├── G129: (variable a2)
 ├── G130: (eq G156 G157)
 ├── G131: (or G158 G159)
 ├── G132: (union-all G160 G161)
 │    ├── [ordering: +209,+210,+211,+212]
 │    │    ├── best: (union-all G160="[ordering: +222,+(223|229),+224,+225]" G161="[ordering: +235,+236,+(237|243),+238]")
 │    │    └── cost: 12694.39
 │    ├── [ordering: +219]
 │    │    ├── best: (union-all G160="[ordering: +232]" G161="[ordering: +245]")
 │    │    └── cost: 12380.70
 │    └── []
 │         ├── best: (union-all G160 G161)
 │         └── cost: 4916.03
 ├── G133: (aggregations G162 G163 G164 G165)
 ├── G134: (variable a4)
 ├── G135: (variable c4)
 ├── G136: (eq G166 G167)
 ├── G137: (eq G168 G169)
 ├── G138: (inner-join G170 G171 G172) (inner-join G171 G170 G172)
 │    ├── [ordering: +66,+(67|73),+68,+69]
 │    │    ├── best: (sort G138)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +76]
 │    │    ├── best: (sort G138)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G170 G171 G172)
 │         └── cost: 2359.01
 ├── G139: (inner-join G173 G174 G175) (inner-join G174 G173 G175)
 │    ├── [ordering: +79,+80,+(81|87),+82]
 │    │    ├── best: (sort G139)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +89]
 │    │    ├── best: (sort G139)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G173 G174 G175)
 │         └── cost: 2359.01
 ├── G140: (const-agg G176)
 ├── G141: (const-agg G167)
 ├── G142: (const-agg G169)
 ├── G143: (const-agg G177)
 ├── G144: (inner-join G178 G179 G180)
 │    ├── [ordering: +102]
 │    │    ├── best: (sort G144)
 │    │    └── cost: 6091.34
 │    ├── [ordering: +92,+(93|99),+94,+95]
 │    │    ├── best: (sort G144)
 │    │    └── cost: 6248.19
 │    └── []
 │         ├── best: (inner-join G178 G179 G180)
 │         └── cost: 2359.01
 ├── G145: (inner-join G181 G182 G183)
 │    ├── [ordering: +105,+106,+(107|113),+108]
 │    │    ├── best: (sort G145)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +115]
 │    │    ├── best: (sort G145)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G181 G182 G183)
 │         └── cost: 2359.01
 ├── G146: (variable a4)
 ├── G147: (variable c4)
 ├── G148: (eq G184 G185)
 ├── G149: (eq G186 G187)
 ├── G150: (inner-join G188 G189 G190)
 │    ├── [ordering: +144,+(145|151),+146,+147]
 │    │    ├── best: (sort G150)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +154]
 │    │    ├── best: (sort G150)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G188 G189 G190)
 │         └── cost: 2359.01
 ├── G151: (inner-join G191 G192 G193)
 │    ├── [ordering: +157,+158,+(159|165),+160]
 │    │    ├── best: (sort G151)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +167]
 │    │    ├── best: (sort G151)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G191 G192 G193)
 │         └── cost: 2359.01
 ├── G152: (const-agg G194)
 ├── G153: (const-agg G185)
 ├── G154: (const-agg G187)
 ├── G155: (const-agg G195)
 ├── G156: (variable a4)
 ├── G157: (variable c4)
 ├── G158: (eq G196 G197)
 ├── G159: (eq G198 G199)
 ├── G160: (inner-join G200 G201 G202)
 │    ├── [ordering: +222,+(223|229),+224,+225]
 │    │    ├── best: (sort G160)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +232]
 │    │    ├── best: (sort G160)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G200 G201 G202)
 │         └── cost: 2359.01
 ├── G161: (inner-join G203 G204 G205)
 │    ├── [ordering: +235,+236,+(237|243),+238]
 │    │    ├── best: (sort G161)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +245]
 │    │    ├── best: (sort G161)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G203 G204 G205)
 │         └── cost: 2359.01
 ├── G162: (const-agg G206)
 ├── G163: (const-agg G197)
 ├── G164: (const-agg G199)
 ├── G165: (const-agg G207)
 ├── G166: (variable a2)
 ├── G167: (variable c2)
 ├── G168: (variable a3)
 ├── G169: (variable c3)
 ├── G170: (scan a,cols=(66-69))
 │    └── []
 │         ├── best: (scan a,cols=(66-69))
 │         └── cost: 1104.82
 ├── G171: (scan c,cols=(72-76))
 │    └── []
 │         ├── best: (scan c,cols=(72-76))
 │         └── cost: 1125.02
 ├── G172: (filters G208)
 ├── G173: (scan a,cols=(79-82))
 │    └── []
 │         ├── best: (scan a,cols=(79-82))
 │         └── cost: 1104.82
 ├── G174: (scan c,cols=(85-89))
 │    └── []
 │         ├── best: (scan c,cols=(85-89))
 │         └── cost: 1125.02
 ├── G175: (filters G209)
 ├── G176: (variable c1)
 ├── G177: (variable c4)
 ├── G178: (scan c,cols=(98-102))
 │    └── []
 │         ├── best: (scan c,cols=(98-102))
 │         └── cost: 1125.02
 ├── G179: (scan a,cols=(92-95))
 │    └── []
 │         ├── best: (scan a,cols=(92-95))
 │         └── cost: 1104.82
 ├── G180: (filters G210)
 ├── G181: (scan c,cols=(111-115))
 │    └── []
 │         ├── best: (scan c,cols=(111-115))
 │         └── cost: 1125.02
 ├── G182: (scan a,cols=(105-108))
 │    └── []
 │         ├── best: (scan a,cols=(105-108))
 │         └── cost: 1104.82
 ├── G183: (filters G211)
 ├── G184: (variable a2)
 ├── G185: (variable c2)
 ├── G186: (variable a3)
 ├── G187: (variable c3)
 ├── G188: (scan c,cols=(150-154))
 │    └── []
 │         ├── best: (scan c,cols=(150-154))
 │         └── cost: 1125.02
 ├── G189: (scan a,cols=(144-147))
 │    └── []
 │         ├── best: (scan a,cols=(144-147))
 │         └── cost: 1104.82
 ├── G190: (filters G212)
 ├── G191: (scan c,cols=(163-167))
 │    └── []
 │         ├── best: (scan c,cols=(163-167))
 │         └── cost: 1125.02
 ├── G192: (scan a,cols=(157-160))
 │    └── []
 │         ├── best: (scan a,cols=(157-160))
 │         └── cost: 1104.82
 ├── G193: (filters G213)
 ├── G194: (variable c1)
 ├── G195: (variable c4)
 ├── G196: (variable a2)
 ├── G197: (variable c2)
 ├── G198: (variable a3)
 ├── G199: (variable c3)
 ├── G200: (scan c,cols=(228-232))
 │    └── []
 │         ├── best: (scan c,cols=(228-232))
 │         └── cost: 1125.02
 ├── G201: (scan a,cols=(222-225))
 │    └── []
 │         ├── best: (scan a,cols=(222-225))
 │         └── cost: 1104.82
 ├── G202: (filters G214)
 ├── G203: (scan c,cols=(241-245))
 │    └── []
 │         ├── best: (scan c,cols=(241-245))
 │         └── cost: 1125.02
 ├── G204: (scan a,cols=(235-238))
 │    └── []
 │         ├── best: (scan a,cols=(235-238))
 │         └── cost: 1104.82
 ├── G205: (filters G215)
 ├── G206: (variable c1)
 ├── G207: (variable c4)
 ├── G208: (eq G216 G217)
 ├── G209: (eq G218 G219)
 ├── G210: (eq G220 G221)
 ├── G211: (eq G222 G223)
 ├── G212: (eq G224 G225)
 ├── G213: (eq G226 G227)
 ├── G214: (eq G228 G229)
 ├── G215: (eq G230 G231)
 ├── G216: (variable a2)
 ├── G217: (variable c2)
 ├── G218: (variable a3)
 ├── G219: (variable c3)
 ├── G220: (variable a2)
 ├── G221: (variable c2)
 ├── G222: (variable a3)
 ├── G223: (variable c3)
 ├── G224: (variable a2)
 ├── G225: (variable c2)
 ├── G226: (variable a3)
 ├── G227: (variable c3)
 ├── G228: (variable a2)
 ├── G229: (variable c2)
 ├── G230: (variable a3)
 └── G231: (variable c3)

memo expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a, c WHERE (a1 = c2 OR a2 = c1 OR a3 = c4 OR a3 = c4)
----
memo (optimized, ~134KB, required=[presentation: a1:1,a2:2,a3:3,a4:4,c1:7,c2:8,c3:9,c4:10])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4) (project G5 G6 a1 a2 a3 a4 c1 c2 c3 c4) (project G7 G6 a1 a2 a3 a4 c1 c2 c3 c4)
 │    └── [presentation: a1:1,a2:2,a3:3,a4:4,c1:7,c2:8,c3:9,c4:10]
 │         ├── best: (inner-join G2 G3 G4)
 │         └── cost: 12249.92
 ├── G2: (scan a,cols=(1-4))
 │    └── []
 │         ├── best: (scan a,cols=(1-4))
 │         └── cost: 1104.82
 ├── G3: (scan c,cols=(7-10))
 │    └── []
 │         ├── best: (scan c,cols=(7-10))
 │         └── cost: 1114.92
 ├── G4: (filters G8)
 ├── G5: (distinct-on G9 G10 cols=(1-4,11)) (distinct-on G9 G10 cols=(1-4,11),ordering=+1,+2,+3,+4) (distinct-on G9 G10 cols=(1-4,11),ordering=+11)
 │    └── []
 │         ├── best: (distinct-on G9 G10 cols=(1-4,11))
 │         └── cost: 19615.84
 ├── G6: (projections)
 ├── G7: (distinct-on G11 G10 cols=(1-4,11)) (distinct-on G11 G10 cols=(1-4,11),ordering=+11) (distinct-on G11 G10 cols=(1-4,11),ordering=+1,+2,+3,+4)
 │    └── []
 │         ├── best: (distinct-on G11 G10 cols=(1-4,11))
 │         └── cost: 19615.84
 ├── G8: (or G12 G13)
 ├── G9: (union-all G14 G15)
 │    ├── [ordering: +1,+2,+3,+4]
 │    │    ├── best: (union-all G14="[ordering: +(14|21),+15,+16,+17]" G15="[ordering: +27,+28,+29,+30]")
 │    │    └── cost: 31657.80
 │    ├── [ordering: +11]
 │    │    ├── best: (union-all G14="[ordering: +24]" G15="[ordering: +37]")
 │    │    └── cost: 30978.14
 │    └── []
 │         ├── best: (union-all G14 G15)
 │         └── cost: 15015.05
 ├── G10: (aggregations G16 G17 G18 G19)
 ├── G11: (union-all G20 G21)
 │    ├── [ordering: +1,+2,+3,+4]
 │    │    ├── best: (union-all G20="[ordering: +(170|177),+171,+172,+173]" G21="[ordering: +183,+184,+185,+186]")
 │    │    └── cost: 31657.80
 │    ├── [ordering: +11]
 │    │    ├── best: (union-all G20="[ordering: +180]" G21="[ordering: +193]")
 │    │    └── cost: 30978.14
 │    └── []
 │         ├── best: (union-all G20 G21)
 │         └── cost: 15015.05
 ├── G12: (or G22 G13)
 ├── G13: (eq G23 G24)
 ├── G14: (inner-join G25 G26 G27) (inner-join G26 G25 G27) (merge-join G25 G26 G28 inner-join,+14,+21) (lookup-join G26 G28 a,keyCols=[21],outCols=(14-17,20-24))
 │    ├── [ordering: +(14|21),+15,+16,+17]
 │    │    ├── best: (sort G14)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +24]
 │    │    ├── best: (sort G14)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G25 G26 G27)
 │         └── cost: 2359.01
 ├── G15: (inner-join G29 G30 G31) (inner-join G30 G29 G31) (project G32 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid) (project G33 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    ├── [ordering: +27,+28,+29,+30]
 │    │    ├── best: (sort G15)
 │    │    └── cost: 25013.58
 │    ├── [ordering: +37]
 │    │    ├── best: (sort G15)
 │    │    └── cost: 24490.77
 │    └── []
 │         ├── best: (inner-join G29 G30 G31)
 │         └── cost: 12260.02
 ├── G16: (const-agg G34)
 ├── G17: (const-agg G35)
 ├── G18: (const-agg G36)
 ├── G19: (const-agg G24)
 ├── G20: (inner-join G37 G38 G39) (lookup-join G37 G28 a,keyCols=[177],outCols=(170-173,176-180))
 │    ├── [ordering: +(170|177),+171,+172,+173]
 │    │    ├── best: (sort G20)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +180]
 │    │    ├── best: (sort G20)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G37 G38 G39)
 │         └── cost: 2359.01
 ├── G21: (inner-join G40 G41 G42) (project G43 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    ├── [ordering: +183,+184,+185,+186]
 │    │    ├── best: (sort G21)
 │    │    └── cost: 25013.58
 │    ├── [ordering: +193]
 │    │    ├── best: (sort G21)
 │    │    └── cost: 24490.77
 │    └── []
 │         ├── best: (inner-join G40 G41 G42)
 │         └── cost: 12260.02
 ├── G22: (or G44 G45)
 ├── G23: (variable a3)
 ├── G24: (variable c4)
 ├── G25: (scan a,cols=(14-17))
 │    ├── [ordering: +14]
 │    │    ├── best: (scan a,cols=(14-17))
 │    │    └── cost: 1104.82
 │    └── []
 │         ├── best: (scan a,cols=(14-17))
 │         └── cost: 1104.82
 ├── G26: (scan c,cols=(20-24))
 │    ├── [ordering: +21]
 │    │    ├── best: (sort G26)
 │    │    └── cost: 1394.50
 │    ├── [ordering: +24]
 │    │    ├── best: (scan c,cols=(20-24))
 │    │    └── cost: 1125.02
 │    └── []
 │         ├── best: (scan c,cols=(20-24))
 │         └── cost: 1125.02
 ├── G27: (filters G46)
 ├── G28: (filters)
 ├── G29: (scan a,cols=(27-30))
 │    └── []
 │         ├── best: (scan a,cols=(27-30))
 │         └── cost: 1104.82
 ├── G30: (scan c,cols=(33-37))
 │    └── []
 │         ├── best: (scan c,cols=(33-37))
 │         └── cost: 1125.02
 ├── G31: (filters G47)
 ├── G32: (distinct-on G48 G49 cols=(27-30,37)) (distinct-on G48 G49 cols=(27-30,37),ordering=+27,+28,+29,+30) (distinct-on G48 G49 cols=(27-30,37),ordering=+37)
 │    ├── [ordering: +27,+28,+29,+30]
 │    │    ├── best: (distinct-on G48="[ordering: +27,+28,+29,+30]" G49 cols=(27-30,37))
 │    │    └── cost: 25095.20
 │    ├── [ordering: +37]
 │    │    ├── best: (distinct-on G48="[ordering: +37]" G49 cols=(27-30,37))
 │    │    └── cost: 24624.65
 │    └── []
 │         ├── best: (distinct-on G48 G49 cols=(27-30,37))
 │         └── cost: 13427.66
 ├── G33: (distinct-on G50 G49 cols=(27-30,37)) (distinct-on G50 G49 cols=(27-30,37),ordering=+37) (distinct-on G50 G49 cols=(27-30,37),ordering=+27,+28,+29,+30)
 │    ├── [ordering: +27,+28,+29,+30]
 │    │    ├── best: (distinct-on G50="[ordering: +27,+28,+29,+30]" G49 cols=(27-30,37))
 │    │    └── cost: 25095.20
 │    ├── [ordering: +37]
 │    │    ├── best: (distinct-on G50="[ordering: +37]" G49 cols=(27-30,37))
 │    │    └── cost: 24624.65
 │    └── []
 │         ├── best: (distinct-on G50 G49 cols=(27-30,37))
 │         └── cost: 13427.66
 ├── G34: (variable c1)
 ├── G35: (variable c2)
 ├── G36: (variable c3)
 ├── G37: (scan c,cols=(176-180))
 │    ├── [ordering: +180]
 │    │    ├── best: (scan c,cols=(176-180))
 │    │    └── cost: 1125.02
 │    └── []
 │         ├── best: (scan c,cols=(176-180))
 │         └── cost: 1125.02
 ├── G38: (scan a,cols=(170-173))
 │    └── []
 │         ├── best: (scan a,cols=(170-173))
 │         └── cost: 1104.82
 ├── G39: (filters G51)
 ├── G40: (scan c,cols=(189-193))
 │    └── []
 │         ├── best: (scan c,cols=(189-193))
 │         └── cost: 1125.02
 ├── G41: (scan a,cols=(183-186))
 │    └── []
 │         ├── best: (scan a,cols=(183-186))
 │         └── cost: 1104.82
 ├── G42: (filters G52)
 ├── G43: (distinct-on G53 G54 cols=(183-186,193)) (distinct-on G53 G54 cols=(183-186,193),ordering=+193) (distinct-on G53 G54 cols=(183-186,193),ordering=+183,+184,+185,+186)
 │    ├── [ordering: +183,+184,+185,+186]
 │    │    ├── best: (distinct-on G53="[ordering: +183,+184,+185,+186]" G54 cols=(183-186,193))
 │    │    └── cost: 25095.20
 │    ├── [ordering: +193]
 │    │    ├── best: (distinct-on G53="[ordering: +193]" G54 cols=(183-186,193))
 │    │    └── cost: 24624.65
 │    └── []
 │         ├── best: (distinct-on G53 G54 cols=(183-186,193))
 │         └── cost: 13427.66
 ├── G44: (eq G55 G35)
 ├── G45: (eq G56 G34)
 ├── G46: (eq G57 G58)
 ├── G47: (or G59 G60)
 ├── G48: (union-all G61 G62)
 │    ├── [ordering: +27,+28,+29,+30]
 │    │    ├── best: (union-all G61="[ordering: +40,+41,+(42|49),+43]" G62="[ordering: +53,+54,+55,+56]")
 │    │    └── cost: 21678.71
 │    ├── [ordering: +37]
 │    │    ├── best: (union-all G61="[ordering: +50]" G62="[ordering: +63]")
 │    │    └── cost: 21208.16
 │    └── []
 │         ├── best: (union-all G61 G62)
 │         └── cost: 10011.17
 ├── G49: (aggregations G63 G64 G65 G66)
 ├── G50: (union-all G67 G68)
 │    ├── [ordering: +27,+28,+29,+30]
 │    │    ├── best: (union-all G67="[ordering: +118,+119,+(120|127),+121]" G68="[ordering: +131,+132,+133,+134]")
 │    │    └── cost: 21678.71
 │    ├── [ordering: +37]
 │    │    ├── best: (union-all G67="[ordering: +128]" G68="[ordering: +141]")
 │    │    └── cost: 21208.16
 │    └── []
 │         ├── best: (union-all G67 G68)
 │         └── cost: 10011.17
 ├── G51: (eq G69 G70)
 ├── G52: (or G71 G72)
 ├── G53: (union-all G73 G74)
 │    ├── [ordering: +183,+184,+185,+186]
 │    │    ├── best: (union-all G73="[ordering: +196,+197,+(198|205),+199]" G74="[ordering: +209,+210,+211,+212]")
 │    │    └── cost: 21678.71
 │    ├── [ordering: +193]
 │    │    ├── best: (union-all G73="[ordering: +206]" G74="[ordering: +219]")
 │    │    └── cost: 21208.16
 │    └── []
 │         ├── best: (union-all G73 G74)
 │         └── cost: 10011.17
 ├── G54: (aggregations G75 G76 G77 G78)
 ├── G55: (variable a1)
 ├── G56: (variable a2)
 ├── G57: (variable a1)
 ├── G58: (variable c2)
 ├── G59: (eq G79 G80)
 ├── G60: (or G59 G81)
 ├── G61: (inner-join G82 G83 G84) (inner-join G83 G82 G84)
 │    ├── [ordering: +40,+41,+(42|49),+43]
 │    │    ├── best: (sort G61)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +50]
 │    │    ├── best: (sort G61)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G82 G83 G84)
 │         └── cost: 2359.01
 ├── G62: (inner-join G85 G86 G87) (inner-join G86 G85 G87) (project G88 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid) (project G89 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    ├── [ordering: +53,+54,+55,+56]
 │    │    ├── best: (project G88="[ordering: +53,+54,+55,+56]" G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    │    └── cost: 15132.50
 │    ├── [ordering: +63]
 │    │    ├── best: (project G88="[ordering: +63]" G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    │    └── cost: 14818.80
 │    └── []
 │         ├── best: (project G88 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │         └── cost: 7354.14
 ├── G63: (const-agg G90)
 ├── G64: (const-agg G91)
 ├── G65: (const-agg G92)
 ├── G66: (const-agg G80)
 ├── G67: (inner-join G93 G94 G95)
 │    ├── [ordering: +118,+119,+(120|127),+121]
 │    │    ├── best: (sort G67)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +128]
 │    │    ├── best: (sort G67)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G93 G94 G95)
 │         └── cost: 2359.01
 ├── G68: (inner-join G96 G97 G98) (project G99 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    ├── [ordering: +131,+132,+133,+134]
 │    │    ├── best: (project G99="[ordering: +131,+132,+133,+134]" G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    │    └── cost: 15132.50
 │    ├── [ordering: +141]
 │    │    ├── best: (project G99="[ordering: +141]" G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    │    └── cost: 14818.80
 │    └── []
 │         ├── best: (project G99 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │         └── cost: 7354.14
 ├── G69: (variable a1)
 ├── G70: (variable c2)
 ├── G71: (eq G100 G101)
 ├── G72: (or G71 G102)
 ├── G73: (inner-join G103 G104 G105)
 │    ├── [ordering: +196,+197,+(198|205),+199]
 │    │    ├── best: (sort G73)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +206]
 │    │    ├── best: (sort G73)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G103 G104 G105)
 │         └── cost: 2359.01
 ├── G74: (inner-join G106 G107 G108) (project G109 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    ├── [ordering: +209,+210,+211,+212]
 │    │    ├── best: (project G109="[ordering: +209,+210,+211,+212]" G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    │    └── cost: 15132.50
 │    ├── [ordering: +219]
 │    │    ├── best: (project G109="[ordering: +219]" G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │    │    └── cost: 14818.80
 │    └── []
 │         ├── best: (project G109 G6 a1 a2 a3 a4 c1 c2 c3 c4 rowid)
 │         └── cost: 7354.14
 ├── G75: (const-agg G110)
 ├── G76: (const-agg G111)
 ├── G77: (const-agg G112)
 ├── G78: (const-agg G101)
 ├── G79: (variable a3)
 ├── G80: (variable c4)
 ├── G81: (eq G113 G90)
 ├── G82: (scan a,cols=(40-43))
 │    └── []
 │         ├── best: (scan a,cols=(40-43))
 │         └── cost: 1104.82
 ├── G83: (scan c,cols=(46-50))
 │    └── []
 │         ├── best: (scan c,cols=(46-50))
 │         └── cost: 1125.02
 ├── G84: (filters G114)
 ├── G85: (scan a,cols=(53-56))
 │    └── []
 │         ├── best: (scan a,cols=(53-56))
 │         └── cost: 1104.82
 ├── G86: (scan c,cols=(59-63))
 │    └── []
 │         ├── best: (scan c,cols=(59-63))
 │         └── cost: 1125.02
 ├── G87: (filters G115)
 ├── G88: (distinct-on G116 G117 cols=(53-56,63)) (distinct-on G116 G117 cols=(53-56,63),ordering=+53,+54,+55,+56) (distinct-on G116 G117 cols=(53-56,63),ordering=+63)
 │    ├── [ordering: +53,+54,+55,+56]
 │    │    ├── best: (distinct-on G116="[ordering: +53,+54,+55,+56]" G117 cols=(53-56,63))
 │    │    └── cost: 14933.48
 │    ├── [ordering: +63]
 │    │    ├── best: (distinct-on G116="[ordering: +63]" G117 cols=(53-56,63))
 │    │    └── cost: 14619.78
 │    └── []
 │         ├── best: (distinct-on G116 G117 cols=(53-56,63))
 │         └── cost: 7155.12
 ├── G89: (distinct-on G118 G117 cols=(53-56,63)) (distinct-on G118 G117 cols=(53-56,63),ordering=+63) (distinct-on G118 G117 cols=(53-56,63),ordering=+53,+54,+55,+56)
 │    ├── [ordering: +53,+54,+55,+56]
 │    │    ├── best: (distinct-on G118="[ordering: +53,+54,+55,+56]" G117 cols=(53-56,63))
 │    │    └── cost: 14933.48
 │    ├── [ordering: +63]
 │    │    ├── best: (distinct-on G118="[ordering: +63]" G117 cols=(53-56,63))
 │    │    └── cost: 14619.78
 │    └── []
 │         ├── best: (distinct-on G118 G117 cols=(53-56,63))
 │         └── cost: 7155.12
 ├── G90: (variable c1)
 ├── G91: (variable c2)
 ├── G92: (variable c3)
 ├── G93: (scan c,cols=(124-128))
 │    └── []
 │         ├── best: (scan c,cols=(124-128))
 │         └── cost: 1125.02
 ├── G94: (scan a,cols=(118-121))
 │    └── []
 │         ├── best: (scan a,cols=(118-121))
 │         └── cost: 1104.82
 ├── G95: (filters G119)
 ├── G96: (scan c,cols=(137-141))
 │    └── []
 │         ├── best: (scan c,cols=(137-141))
 │         └── cost: 1125.02
 ├── G97: (scan a,cols=(131-134))
 │    └── []
 │         ├── best: (scan a,cols=(131-134))
 │         └── cost: 1104.82
 ├── G98: (filters G120)
 ├── G99: (distinct-on G121 G122 cols=(131-134,141)) (distinct-on G121 G122 cols=(131-134,141),ordering=+141) (distinct-on G121 G122 cols=(131-134,141),ordering=+131,+132,+133,+134)
 │    ├── [ordering: +131,+132,+133,+134]
 │    │    ├── best: (distinct-on G121="[ordering: +131,+132,+133,+134]" G122 cols=(131-134,141))
 │    │    └── cost: 14933.48
 │    ├── [ordering: +141]
 │    │    ├── best: (distinct-on G121="[ordering: +141]" G122 cols=(131-134,141))
 │    │    └── cost: 14619.78
 │    └── []
 │         ├── best: (distinct-on G121 G122 cols=(131-134,141))
 │         └── cost: 7155.12
 ├── G100: (variable a3)
 ├── G101: (variable c4)
 ├── G102: (eq G123 G110)
 ├── G103: (scan c,cols=(202-206))
 │    └── []
 │         ├── best: (scan c,cols=(202-206))
 │         └── cost: 1125.02
 ├── G104: (scan a,cols=(196-199))
 │    └── []
 │         ├── best: (scan a,cols=(196-199))
 │         └── cost: 1104.82
 ├── G105: (filters G124)
 ├── G106: (scan c,cols=(215-219))
 │    └── []
 │         ├── best: (scan c,cols=(215-219))
 │         └── cost: 1125.02
 ├── G107: (scan a,cols=(209-212))
 │    └── []
 │         ├── best: (scan a,cols=(209-212))
 │         └── cost: 1104.82
 ├── G108: (filters G125)
 ├── G109: (distinct-on G126 G127 cols=(209-212,219)) (distinct-on G126 G127 cols=(209-212,219),ordering=+219) (distinct-on G126 G127 cols=(209-212,219),ordering=+209,+210,+211,+212)
 │    ├── [ordering: +209,+210,+211,+212]
 │    │    ├── best: (distinct-on G126="[ordering: +209,+210,+211,+212]" G127 cols=(209-212,219))
 │    │    └── cost: 14933.48
 │    ├── [ordering: +219]
 │    │    ├── best: (distinct-on G126="[ordering: +219]" G127 cols=(209-212,219))
 │    │    └── cost: 14619.78
 │    └── []
 │         ├── best: (distinct-on G126 G127 cols=(209-212,219))
 │         └── cost: 7155.12
 ├── G110: (variable c1)
 ├── G111: (variable c2)
 ├── G112: (variable c3)
 ├── G113: (variable a2)
 ├── G114: (eq G128 G129)
 ├── G115: (or G130 G131)
 ├── G116: (union-all G132 G133)
 │    ├── [ordering: +53,+54,+55,+56]
 │    │    ├── best: (union-all G132="[ordering: +66,+(67|72),+68,+69]" G133="[ordering: +79,+80,+(81|88),+82]")
 │    │    └── cost: 12694.39
 │    ├── [ordering: +63]
 │    │    ├── best: (union-all G132="[ordering: +76]" G133="[ordering: +89]")
 │    │    └── cost: 12380.70
 │    └── []
 │         ├── best: (union-all G132 G133)
 │         └── cost: 4916.03
 ├── G117: (aggregations G134 G135 G136 G137)
 ├── G118: (union-all G138 G139)
 │    ├── [ordering: +53,+54,+55,+56]
 │    │    ├── best: (union-all G138="[ordering: +92,+(93|98),+94,+95]" G139="[ordering: +105,+106,+(107|114),+108]")
 │    │    └── cost: 12694.39
 │    ├── [ordering: +63]
 │    │    ├── best: (union-all G138="[ordering: +102]" G139="[ordering: +115]")
 │    │    └── cost: 12380.70
 │    └── []
 │         ├── best: (union-all G138 G139)
 │         └── cost: 4916.03
 ├── G119: (eq G140 G141)
 ├── G120: (or G142 G143)
 ├── G121: (union-all G144 G145)
 │    ├── [ordering: +131,+132,+133,+134]
 │    │    ├── best: (union-all G144="[ordering: +144,+(145|150),+146,+147]" G145="[ordering: +157,+158,+(159|166),+160]")
 │    │    └── cost: 12694.39
 │    ├── [ordering: +141]
 │    │    ├── best: (union-all G144="[ordering: +154]" G145="[ordering: +167]")
 │    │    └── cost: 12380.70
 │    └── []
 │         ├── best: (union-all G144 G145)
 │         └── cost: 4916.03
 ├── G122: (aggregations G146 G147 G148 G149)
 ├── G123: (variable a2)
 ├── G124: (eq G150 G151)
 ├── G125: (or G152 G153)
 ├── G126: (union-all G154 G155)
 │    ├── [ordering: +209,+210,+211,+212]
 │    │    ├── best: (union-all G154="[ordering: +222,+(223|228),+224,+225]" G155="[ordering: +235,+236,+(237|244),+238]")
 │    │    └── cost: 12694.39
 │    ├── [ordering: +219]
 │    │    ├── best: (union-all G154="[ordering: +232]" G155="[ordering: +245]")
 │    │    └── cost: 12380.70
 │    └── []
 │         ├── best: (union-all G154 G155)
 │         └── cost: 4916.03
 ├── G127: (aggregations G156 G157 G158 G159)
 ├── G128: (variable a3)
 ├── G129: (variable c4)
 ├── G130: (eq G160 G161)
 ├── G131: (eq G162 G163)
 ├── G132: (inner-join G164 G165 G166) (inner-join G165 G164 G166)
 │    ├── [ordering: +66,+(67|72),+68,+69]
 │    │    ├── best: (sort G132)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +76]
 │    │    ├── best: (sort G132)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G164 G165 G166)
 │         └── cost: 2359.01
 ├── G133: (inner-join G167 G168 G169) (inner-join G168 G167 G169)
 │    ├── [ordering: +79,+80,+(81|88),+82]
 │    │    ├── best: (sort G133)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +89]
 │    │    ├── best: (sort G133)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G167 G168 G169)
 │         └── cost: 2359.01
 ├── G134: (const-agg G161)
 ├── G135: (const-agg G170)
 ├── G136: (const-agg G171)
 ├── G137: (const-agg G163)
 ├── G138: (inner-join G172 G173 G174)
 │    ├── [ordering: +102]
 │    │    ├── best: (sort G138)
 │    │    └── cost: 6091.34
 │    ├── [ordering: +92,+(93|98),+94,+95]
 │    │    ├── best: (sort G138)
 │    │    └── cost: 6248.19
 │    └── []
 │         ├── best: (inner-join G172 G173 G174)
 │         └── cost: 2359.01
 ├── G139: (inner-join G175 G176 G177)
 │    ├── [ordering: +105,+106,+(107|114),+108]
 │    │    ├── best: (sort G139)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +115]
 │    │    ├── best: (sort G139)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G175 G176 G177)
 │         └── cost: 2359.01
 ├── G140: (variable a3)
 ├── G141: (variable c4)
 ├── G142: (eq G178 G179)
 ├── G143: (eq G180 G181)
 ├── G144: (inner-join G182 G183 G184)
 │    ├── [ordering: +144,+(145|150),+146,+147]
 │    │    ├── best: (sort G144)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +154]
 │    │    ├── best: (sort G144)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G182 G183 G184)
 │         └── cost: 2359.01
 ├── G145: (inner-join G185 G186 G187)
 │    ├── [ordering: +157,+158,+(159|166),+160]
 │    │    ├── best: (sort G145)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +167]
 │    │    ├── best: (sort G145)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G185 G186 G187)
 │         └── cost: 2359.01
 ├── G146: (const-agg G179)
 ├── G147: (const-agg G188)
 ├── G148: (const-agg G189)
 ├── G149: (const-agg G181)
 ├── G150: (variable a3)
 ├── G151: (variable c4)
 ├── G152: (eq G190 G191)
 ├── G153: (eq G192 G193)
 ├── G154: (inner-join G194 G195 G196)
 │    ├── [ordering: +222,+(223|228),+224,+225]
 │    │    ├── best: (sort G154)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +232]
 │    │    ├── best: (sort G154)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G194 G195 G196)
 │         └── cost: 2359.01
 ├── G155: (inner-join G197 G198 G199)
 │    ├── [ordering: +235,+236,+(237|244),+238]
 │    │    ├── best: (sort G155)
 │    │    └── cost: 6248.19
 │    ├── [ordering: +245]
 │    │    ├── best: (sort G155)
 │    │    └── cost: 6091.34
 │    └── []
 │         ├── best: (inner-join G197 G198 G199)
 │         └── cost: 2359.01
 ├── G156: (const-agg G191)
 ├── G157: (const-agg G200)
 ├── G158: (const-agg G201)
 ├── G159: (const-agg G193)
 ├── G160: (variable a2)
 ├── G161: (variable c1)
 ├── G162: (variable a3)
 ├── G163: (variable c4)
 ├── G164: (scan a,cols=(66-69))
 │    └── []
 │         ├── best: (scan a,cols=(66-69))
 │         └── cost: 1104.82
 ├── G165: (scan c,cols=(72-76))
 │    └── []
 │         ├── best: (scan c,cols=(72-76))
 │         └── cost: 1125.02
 ├── G166: (filters G202)
 ├── G167: (scan a,cols=(79-82))
 │    └── []
 │         ├── best: (scan a,cols=(79-82))
 │         └── cost: 1104.82
 ├── G168: (scan c,cols=(85-89))
 │    └── []
 │         ├── best: (scan c,cols=(85-89))
 │         └── cost: 1125.02
 ├── G169: (filters G203)
 ├── G170: (variable c2)
 ├── G171: (variable c3)
 ├── G172: (scan c,cols=(98-102))
 │    └── []
 │         ├── best: (scan c,cols=(98-102))
 │         └── cost: 1125.02
 ├── G173: (scan a,cols=(92-95))
 │    └── []
 │         ├── best: (scan a,cols=(92-95))
 │         └── cost: 1104.82
 ├── G174: (filters G204)
 ├── G175: (scan c,cols=(111-115))
 │    └── []
 │         ├── best: (scan c,cols=(111-115))
 │         └── cost: 1125.02
 ├── G176: (scan a,cols=(105-108))
 │    └── []
 │         ├── best: (scan a,cols=(105-108))
 │         └── cost: 1104.82
 ├── G177: (filters G205)
 ├── G178: (variable a2)
 ├── G179: (variable c1)
 ├── G180: (variable a3)
 ├── G181: (variable c4)
 ├── G182: (scan c,cols=(150-154))
 │    └── []
 │         ├── best: (scan c,cols=(150-154))
 │         └── cost: 1125.02
 ├── G183: (scan a,cols=(144-147))
 │    └── []
 │         ├── best: (scan a,cols=(144-147))
 │         └── cost: 1104.82
 ├── G184: (filters G206)
 ├── G185: (scan c,cols=(163-167))
 │    └── []
 │         ├── best: (scan c,cols=(163-167))
 │         └── cost: 1125.02
 ├── G186: (scan a,cols=(157-160))
 │    └── []
 │         ├── best: (scan a,cols=(157-160))
 │         └── cost: 1104.82
 ├── G187: (filters G207)
 ├── G188: (variable c2)
 ├── G189: (variable c3)
 ├── G190: (variable a2)
 ├── G191: (variable c1)
 ├── G192: (variable a3)
 ├── G193: (variable c4)
 ├── G194: (scan c,cols=(228-232))
 │    └── []
 │         ├── best: (scan c,cols=(228-232))
 │         └── cost: 1125.02
 ├── G195: (scan a,cols=(222-225))
 │    └── []
 │         ├── best: (scan a,cols=(222-225))
 │         └── cost: 1104.82
 ├── G196: (filters G208)
 ├── G197: (scan c,cols=(241-245))
 │    └── []
 │         ├── best: (scan c,cols=(241-245))
 │         └── cost: 1125.02
 ├── G198: (scan a,cols=(235-238))
 │    └── []
 │         ├── best: (scan a,cols=(235-238))
 │         └── cost: 1104.82
 ├── G199: (filters G209)
 ├── G200: (variable c2)
 ├── G201: (variable c3)
 ├── G202: (eq G210 G211)
 ├── G203: (eq G212 G213)
 ├── G204: (eq G214 G215)
 ├── G205: (eq G216 G217)
 ├── G206: (eq G218 G219)
 ├── G207: (eq G220 G221)
 ├── G208: (eq G222 G223)
 ├── G209: (eq G224 G225)
 ├── G210: (variable a2)
 ├── G211: (variable c1)
 ├── G212: (variable a3)
 ├── G213: (variable c4)
 ├── G214: (variable a2)
 ├── G215: (variable c1)
 ├── G216: (variable a3)
 ├── G217: (variable c4)
 ├── G218: (variable a2)
 ├── G219: (variable c1)
 ├── G220: (variable a3)
 ├── G221: (variable c4)
 ├── G222: (variable a2)
 ├── G223: (variable c1)
 ├── G224: (variable a3)
 └── G225: (variable c4)

# Equality filters that do not reference a column on each side of the join
opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM b, d WHERE (b1 = b2 OR b3 = d3)
----
project
 ├── columns: b1:1 b2:2 b3:3 b4:4 d1:8 d2:9 d3:10 d4:11
 └── distinct-on
      ├── columns: b1:1 b2:2 b3:3 b4:4 b.rowid:5!null d1:8 d2:9 d3:10 d4:11 d.rowid:12!null
      ├── grouping columns: b.rowid:5!null d.rowid:12!null
      ├── key: (5,12)
      ├── fd: (5,12)-->(1-4,8-11)
      ├── union-all
      │    ├── columns: b1:1 b2:2 b3:3 b4:4 b.rowid:5!null d1:8 d2:9 d3:10 d4:11 d.rowid:12!null
      │    ├── left columns: b1:15 b2:16 b3:17 b4:18 b.rowid:19 d1:22 d2:23 d3:24 d4:25 d.rowid:26
      │    ├── right columns: b1:29 b2:30 b3:31 b4:32 b.rowid:33 d1:36 d2:37 d3:38 d4:39 d.rowid:40
      │    ├── inner-join (hash)
      │    │    ├── columns: b1:15 b2:16 b3:17!null b4:18 b.rowid:19!null d1:22 d2:23 d3:24!null d4:25 d.rowid:26!null
      │    │    ├── key: (19,26)
      │    │    ├── fd: (19)-->(15-18), (26)-->(22-25), (17)==(24), (24)==(17)
      │    │    ├── scan b
      │    │    │    ├── columns: b1:15 b2:16 b3:17 b4:18 b.rowid:19!null
      │    │    │    ├── key: (19)
      │    │    │    └── fd: (19)-->(15-18)
      │    │    ├── scan d
      │    │    │    ├── columns: d1:22 d2:23 d3:24 d4:25 d.rowid:26!null
      │    │    │    ├── key: (26)
      │    │    │    └── fd: (26)-->(22-25)
      │    │    └── filters
      │    │         └── b3:17 = d3:24 [outer=(17,24), constraints=(/17: (/NULL - ]; /24: (/NULL - ]), fd=(17)==(24), (24)==(17)]
      │    └── inner-join (cross)
      │         ├── columns: b1:29!null b2:30!null b3:31 b4:32 b.rowid:33!null d1:36 d2:37 d3:38 d4:39 d.rowid:40!null
      │         ├── key: (33,40)
      │         ├── fd: (33)-->(29-32), (29)==(30), (30)==(29), (40)-->(36-39)
      │         ├── scan d
      │         │    ├── columns: d1:36 d2:37 d3:38 d4:39 d.rowid:40!null
      │         │    ├── key: (40)
      │         │    └── fd: (40)-->(36-39)
      │         ├── select
      │         │    ├── columns: b1:29!null b2:30!null b3:31 b4:32 b.rowid:33!null
      │         │    ├── key: (33)
      │         │    ├── fd: (33)-->(29-32), (29)==(30), (30)==(29)
      │         │    ├── scan b@b_b1_b2_idx
      │         │    │    ├── columns: b1:29!null b2:30 b3:31 b4:32 b.rowid:33!null
      │         │    │    ├── constraint: /29/30/33: (/NULL - ]
      │         │    │    ├── key: (33)
      │         │    │    └── fd: (33)-->(29-32)
      │         │    └── filters
      │         │         └── b1:29 = b2:30 [outer=(29,30), constraints=(/29: (/NULL - ]; /30: (/NULL - ]), fd=(29)==(30), (30)==(29)]
      │         └── filters (true)
      └── aggregations
           ├── const-agg [as=b1:1, outer=(1)]
           │    └── b1:1
           ├── const-agg [as=b2:2, outer=(2)]
           │    └── b2:2
           ├── const-agg [as=b3:3, outer=(3)]
           │    └── b3:3
           ├── const-agg [as=b4:4, outer=(4)]
           │    └── b4:4
           ├── const-agg [as=d1:8, outer=(8)]
           │    └── d1:8
           ├── const-agg [as=d2:9, outer=(9)]
           │    └── d2:9
           ├── const-agg [as=d3:10, outer=(10)]
           │    └── d3:10
           └── const-agg [as=d4:11, outer=(11)]
                └── d4:11

memo expect=SplitDisjunctionOfJoinTerms
SELECT * FROM b, d WHERE (b1 = b2 OR b3 = d3 OR b4 = d4 OR d1 = d2)
----
memo (optimized, ~102KB, required=[presentation: b1:1,b2:2,b3:3,b4:4,d1:8,d2:9,d3:10,d4:11])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4) (project G5 G6 b1 b2 b3 b4 d1 d2 d3 d4) (project G7 G6 b1 b2 b3 b4 d1 d2 d3 d4)
 │    └── [presentation: b1:1,b2:2,b3:3,b4:4,d1:8,d2:9,d3:10,d4:11]
 │         ├── best: (inner-join G2 G3 G4)
 │         └── cost: 12260.02
 ├── G2: (scan b,cols=(1-4)) (scan b@b_b1_b2_idx,cols=(1-4)) (scan b@b_b2_idx,cols=(1-4)) (scan b@b_b3_idx,cols=(1-4))
 │    └── []
 │         ├── best: (scan b,cols=(1-4))
 │         └── cost: 1114.92
 ├── G3: (scan d,cols=(8-11)) (scan d@d,cols=(8-11))
 │    └── []
 │         ├── best: (scan d,cols=(8-11))
 │         └── cost: 1114.92
 ├── G4: (filters G8)
 ├── G5: (distinct-on G9 G10 cols=(5,12)) (distinct-on G9 G10 cols=(5,12),ordering=+5) (distinct-on G9 G10 cols=(5,12),ordering=+12)
 │    └── []
 │         ├── best: (distinct-on G9 G10 cols=(5,12))
 │         └── cost: 20037.16
 ├── G6: (projections)
 ├── G7: (distinct-on G11 G10 cols=(5,12)) (distinct-on G11 G10 cols=(5,12),ordering=+12) (distinct-on G11 G10 cols=(5,12),ordering=+5)
 │    └── []
 │         ├── best: (distinct-on G11 G10 cols=(5,12))
 │         └── cost: 20037.16
 ├── G8: (or G12 G13)
 ├── G9: (union-all G14 G15)
 │    ├── [ordering: +12]
 │    │    ├── best: (union-all G14="[ordering: +26]" G15="[ordering: +40]")
 │    │    └── cost: 31371.26
 │    ├── [ordering: +5]
 │    │    ├── best: (union-all G14="[ordering: +19]" G15="[ordering: +33]")
 │    │    └── cost: 31371.26
 │    └── []
 │         ├── best: (union-all G14 G15)
 │         └── cost: 15053.47
 ├── G10: (aggregations G16 G17 G18 G19 G20 G21 G22 G23)
 ├── G11: (union-all G24 G25)
 │    ├── [ordering: +12]
 │    │    ├── best: (union-all G24="[ordering: +110]" G25="[ordering: +124]")
 │    │    └── cost: 31371.26
 │    ├── [ordering: +5]
 │    │    ├── best: (union-all G24="[ordering: +103]" G25="[ordering: +117]")
 │    │    └── cost: 31371.26
 │    └── []
 │         ├── best: (union-all G24 G25)
 │         └── cost: 15053.47
 ├── G12: (or G26 G27)
 ├── G13: (eq G28 G29)
 ├── G14: (inner-join G30 G31 G32) (inner-join G31 G30 G32) (merge-join G30 G31 G33 inner-join,+17,+24) (lookup-join G31 G33 b@b_b3_idx,keyCols=[24],outCols=(15-19,22-26))
 │    ├── [ordering: +19]
 │    │    ├── best: (sort G14)
 │    │    └── cost: 6168.24
 │    ├── [ordering: +26]
 │    │    ├── best: (sort G14)
 │    │    └── cost: 6168.24
 │    └── []
 │         ├── best: (inner-join G30 G31 G32)
 │         └── cost: 2378.22
 ├── G15: (inner-join G34 G35 G36) (inner-join G35 G34 G36) (project G37 G6 b1 b2 b3 b4 rowid d1 d2 d3 d4 rowid) (project G38 G6 b1 b2 b3 b4 rowid d1 d2 d3 d4 rowid)
 │    ├── [ordering: +33]
 │    │    ├── best: (sort G15)
 │    │    └── cost: 24807.98
 │    ├── [ordering: +40]
 │    │    ├── best: (sort G15)
 │    │    └── cost: 24807.98
 │    └── []
 │         ├── best: (inner-join G34 G35 G36)
 │         └── cost: 12280.22
 ├── G16: (const-agg G39)
 ├── G17: (const-agg G40)
 ├── G18: (const-agg G41)
 ├── G19: (const-agg G42)
 ├── G20: (const-agg G28)
 ├── G21: (const-agg G29)
 ├── G22: (const-agg G43)
 ├── G23: (const-agg G44)
 ├── G24: (inner-join G45 G46 G47) (lookup-join G45 G33 b@b_b3_idx,keyCols=[108],outCols=(99-103,106-110))
 │    ├── [ordering: +103]
 │    │    ├── best: (sort G24)
 │    │    └── cost: 6168.24
 │    ├── [ordering: +110]
 │    │    ├── best: (sort G24)
 │    │    └── cost: 6168.24
 │    └── []
 │         ├── best: (inner-join G45 G46 G47)
 │         └── cost: 2378.22
 ├── G25: (inner-join G48 G49 G50) (project G51 G6 b1 b2 b3 b4 rowid d1 d2 d3 d4 rowid)
 │    ├── [ordering: +117]
 │    │    ├── best: (sort G25)
 │    │    └── cost: 24807.98
 │    ├── [ordering: +124]
 │    │    ├── best: (sort G25)
 │    │    └── cost: 24807.98
 │    └── []
 │         ├── best: (inner-join G48 G49 G50)
 │         └── cost: 12280.22
 ├── G26: (or G52 G53)
 ├── G27: (eq G42 G44)
 ├── G28: (variable d1)
 ├── G29: (variable d2)
 ├── G30: (scan b,cols=(15-19)) (scan b@b_b1_b2_idx,cols=(15-19)) (scan b@b_b2_idx,cols=(15-19)) (scan b@b_b3_idx,cols=(15-19))
 │    ├── [ordering: +17]
 │    │    ├── best: (scan b@b_b3_idx,cols=(15-19))
 │    │    └── cost: 1125.02
 │    └── []
 │         ├── best: (scan b,cols=(15-19))
 │         └── cost: 1125.02
 ├── G31: (scan d,cols=(22-26)) (scan d@d,cols=(22-26))
 │    ├── [ordering: +24]
 │    │    ├── best: (sort G31)
 │    │    └── cost: 1394.50
 │    ├── [ordering: +26]
 │    │    ├── best: (scan d,cols=(22-26))
 │    │    └── cost: 1125.02
 │    └── []
 │         ├── best: (scan d,cols=(22-26))
 │         └── cost: 1125.02
 ├── G32: (filters G54)
 ├── G33: (filters)
 ├── G34: (scan b,cols=(29-33)) (scan b@b_b1_b2_idx,cols=(29-33)) (scan b@b_b2_idx,cols=(29-33)) (scan b@b_b3_idx,cols=(29-33))
 │    └── []
 │         ├── best: (scan b,cols=(29-33))
 │         └── cost: 1125.02
 ├── G35: (scan d,cols=(36-40)) (scan d@d,cols=(36-40))
 │    └── []
 │         ├── best: (scan d,cols=(36-40))
 │         └── cost: 1125.02
 ├── G36: (filters G55)
 ├── G37: (distinct-on G56 G57 cols=(33,40)) (distinct-on G56 G57 cols=(33,40),ordering=+33) (distinct-on G56 G57 cols=(33,40),ordering=+40)
 │    ├── [ordering: +33]
 │    │    ├── best: (distinct-on G56="[ordering: +33]" G57 cols=(33,40))
 │    │    └── cost: 30580.51
 │    ├── [ordering: +40]
 │    │    ├── best: (distinct-on G56="[ordering: +40]" G57 cols=(33,40))
 │    │    └── cost: 30580.51
 │    └── []
 │         ├── best: (distinct-on G56 G57 cols=(33,40))
 │         └── cost: 18657.15
 ├── G38: (distinct-on G58 G57 cols=(33,40)) (distinct-on G58 G57 cols=(33,40),ordering=+40) (distinct-on G58 G57 cols=(33,40),ordering=+33)
 │    ├── [ordering: +33]
 │    │    ├── best: (distinct-on G58="[ordering: +33]" G57 cols=(33,40))
 │    │    └── cost: 30580.51
 │    ├── [ordering: +40]
 │    │    ├── best: (distinct-on G58="[ordering: +40]" G57 cols=(33,40))
 │    │    └── cost: 30580.51
 │    └── []
 │         ├── best: (distinct-on G58 G57 cols=(33,40))
 │         └── cost: 18657.15
 ├── G39: (variable b1)
 ├── G40: (variable b2)
 ├── G41: (variable b3)
 ├── G42: (variable b4)
 ├── G43: (variable d3)
 ├── G44: (variable d4)
 ├── G45: (scan d,cols=(106-110)) (scan d@d,cols=(106-110))
 │    ├── [ordering: +110]
 │    │    ├── best: (scan d,cols=(106-110))
 │    │    └── cost: 1125.02
 │    └── []
 │         ├── best: (scan d,cols=(106-110))
 │         └── cost: 1125.02
 ├── G46: (scan b,cols=(99-103)) (scan b@b_b1_b2_idx,cols=(99-103)) (scan b@b_b2_idx,cols=(99-103)) (scan b@b_b3_idx,cols=(99-103))
 │    └── []
 │         ├── best: (scan b,cols=(99-103))
 │         └── cost: 1125.02
 ├── G47: (filters G59)
 ├── G48: (scan d,cols=(120-124)) (scan d@d,cols=(120-124))
 │    └── []
 │         ├── best: (scan d,cols=(120-124))
 │         └── cost: 1125.02
 ├── G49: (scan b,cols=(113-117)) (scan b@b_b1_b2_idx,cols=(113-117)) (scan b@b_b2_idx,cols=(113-117)) (scan b@b_b3_idx,cols=(113-117))
 │    └── []
 │         ├── best: (scan b,cols=(113-117))
 │         └── cost: 1125.02
 ├── G50: (filters G60)
 ├── G51: (distinct-on G61 G62 cols=(117,124)) (distinct-on G61 G62 cols=(117,124),ordering=+124) (distinct-on G61 G62 cols=(117,124),ordering=+117)
 │    ├── [ordering: +117]
 │    │    ├── best: (distinct-on G61="[ordering: +117]" G62 cols=(117,124))
 │    │    └── cost: 30580.51
 │    ├── [ordering: +124]
 │    │    ├── best: (distinct-on G61="[ordering: +124]" G62 cols=(117,124))
 │    │    └── cost: 30580.51
 │    └── []
 │         ├── best: (distinct-on G61 G62 cols=(117,124))
 │         └── cost: 18657.15
 ├── G52: (eq G39 G40)
 ├── G53: (eq G41 G43)
 ├── G54: (eq G63 G64)
 ├── G55: (or G65 G66)
 ├── G56: (union-all G67 G68)
 │    ├── [ordering: +33]
 │    │    ├── best: (union-all G67="[ordering: +47]" G68="[ordering: +61]")
 │    │    └── cost: 26878.82
 │    ├── [ordering: +40]
 │    │    ├── best: (union-all G67="[ordering: +54]" G68="[ordering: +68]")
 │    │    └── cost: 26878.82
 │    └── []
 │         ├── best: (union-all G67 G68)
 │         └── cost: 14955.46
 ├── G57: (aggregations G69 G70 G71 G72 G73 G74 G75 G76)
 ├── G58: (union-all G77 G78)
 │    ├── [ordering: +33]
 │    │    ├── best: (union-all G77="[ordering: +75]" G78="[ordering: +89]")
 │    │    └── cost: 26878.82
 │    ├── [ordering: +40]
 │    │    ├── best: (union-all G77="[ordering: +82]" G78="[ordering: +96]")
 │    │    └── cost: 26878.82
 │    └── []
 │         ├── best: (union-all G77 G78)
 │         └── cost: 14955.46
 ├── G59: (eq G79 G80)
 ├── G60: (or G81 G82)
 ├── G61: (union-all G83 G84)
 │    ├── [ordering: +117]
 │    │    ├── best: (union-all G83="[ordering: +131]" G84="[ordering: +145]")
 │    │    └── cost: 26878.82
 │    ├── [ordering: +124]
 │    │    ├── best: (union-all G83="[ordering: +138]" G84="[ordering: +152]")
 │    │    └── cost: 26878.82
 │    └── []
 │         ├── best: (union-all G83 G84)
 │         └── cost: 14955.46
 ├── G62: (aggregations G85 G86 G87 G88 G89 G90 G91 G92)
 ├── G63: (variable b3)
 ├── G64: (variable d3)
 ├── G65: (eq G93 G94)
 ├── G66: (or G95 G96)
 ├── G67: (inner-join G97 G98 G99) (inner-join G98 G97 G99)
 │    ├── [ordering: +47]
 │    │    ├── best: (sort G67)
 │    │    └── cost: 6168.24
 │    ├── [ordering: +54]
 │    │    ├── best: (sort G67)
 │    │    └── cost: 6168.24
 │    └── []
 │         ├── best: (inner-join G97 G98 G99)
 │         └── cost: 2378.22
 ├── G68: (inner-join G100 G101 G102) (inner-join G101 G100 G102)
 │    ├── [ordering: +61]
 │    │    ├── best: (sort G68)
 │    │    └── cost: 20413.55
 │    ├── [ordering: +68]
 │    │    ├── best: (sort G68)
 │    │    └── cost: 20413.55
 │    └── []
 │         ├── best: (inner-join G100 G101 G102)
 │         └── cost: 12280.22
 ├── G69: (const-agg G103)
 ├── G70: (const-agg G104)
 ├── G71: (const-agg G105)
 ├── G72: (const-agg G106)
 ├── G73: (const-agg G93)
 ├── G74: (const-agg G94)
 ├── G75: (const-agg G107)
 ├── G76: (const-agg G108)
 ├── G77: (inner-join G109 G110 G111)
 │    ├── [ordering: +75]
 │    │    ├── best: (sort G77)
 │    │    └── cost: 6168.24
 │    ├── [ordering: +82]
 │    │    ├── best: (sort G77)
 │    │    └── cost: 6168.24
 │    └── []
 │         ├── best: (inner-join G109 G110 G111)
 │         └── cost: 2378.22
 ├── G78: (inner-join G112 G113 G114)
 │    ├── [ordering: +89]
 │    │    ├── best: (sort G78)
 │    │    └── cost: 20413.55
 │    ├── [ordering: +96]
 │    │    ├── best: (sort G78)
 │    │    └── cost: 20413.55
 │    └── []
 │         ├── best: (inner-join G112 G113 G114)
 │         └── cost: 12280.22
 ├── G79: (variable b3)
 ├── G80: (variable d3)
 ├── G81: (eq G115 G116)
 ├── G82: (or G117 G118)
 ├── G83: (inner-join G119 G120 G121)
 │    ├── [ordering: +131]
 │    │    ├── best: (sort G83)
 │    │    └── cost: 6168.24
 │    ├── [ordering: +138]
 │    │    ├── best: (sort G83)
 │    │    └── cost: 6168.24
 │    └── []
 │         ├── best: (inner-join G119 G120 G121)
 │         └── cost: 2378.22
 ├── G84: (inner-join G122 G123 G124)
 │    ├── [ordering: +145]
 │    │    ├── best: (sort G84)
 │    │    └── cost: 20413.55
 │    ├── [ordering: +152]
 │    │    ├── best: (sort G84)
 │    │    └── cost: 20413.55
 │    └── []
 │         ├── best: (inner-join G122 G123 G124)
 │         └── cost: 12280.22
 ├── G85: (const-agg G125)
 ├── G86: (const-agg G126)
 ├── G87: (const-agg G127)
 ├── G88: (const-agg G128)
 ├── G89: (const-agg G115)
 ├── G90: (const-agg G116)
 ├── G91: (const-agg G129)
 ├── G92: (const-agg G130)
 ├── G93: (variable d1)
 ├── G94: (variable d2)
 ├── G95: (eq G106 G108)
 ├── G96: (eq G103 G104)
 ├── G97: (scan b,cols=(43-47)) (scan b@b_b1_b2_idx,cols=(43-47)) (scan b@b_b2_idx,cols=(43-47)) (scan b@b_b3_idx,cols=(43-47))
 │    └── []
 │         ├── best: (scan b,cols=(43-47))
 │         └── cost: 1125.02
 ├── G98: (scan d,cols=(50-54)) (scan d@d,cols=(50-54))
 │    └── []
 │         ├── best: (scan d,cols=(50-54))
 │         └── cost: 1125.02
 ├── G99: (filters G131)
 ├── G100: (scan b,cols=(57-61)) (scan b@b_b1_b2_idx,cols=(57-61)) (scan b@b_b2_idx,cols=(57-61)) (scan b@b_b3_idx,cols=(57-61))
 │    └── []
 │         ├── best: (scan b,cols=(57-61))
 │         └── cost: 1125.02
 ├── G101: (scan d,cols=(64-68)) (scan d@d,cols=(64-68))
 │    └── []
 │         ├── best: (scan d,cols=(64-68))
 │         └── cost: 1125.02
 ├── G102: (filters G132)
 ├── G103: (variable b1)
 ├── G104: (variable b2)
 ├── G105: (variable b3)
 ├── G106: (variable b4)
 ├── G107: (variable d3)
 ├── G108: (variable d4)
 ├── G109: (scan d,cols=(78-82)) (scan d@d,cols=(78-82))
 │    └── []
 │         ├── best: (scan d,cols=(78-82))
 │         └── cost: 1125.02
 ├── G110: (scan b,cols=(71-75)) (scan b@b_b1_b2_idx,cols=(71-75)) (scan b@b_b2_idx,cols=(71-75)) (scan b@b_b3_idx,cols=(71-75))
 │    └── []
 │         ├── best: (scan b,cols=(71-75))
 │         └── cost: 1125.02
 ├── G111: (filters G133)
 ├── G112: (scan d,cols=(92-96)) (scan d@d,cols=(92-96))
 │    └── []
 │         ├── best: (scan d,cols=(92-96))
 │         └── cost: 1125.02
 ├── G113: (scan b,cols=(85-89)) (scan b@b_b1_b2_idx,cols=(85-89)) (scan b@b_b2_idx,cols=(85-89)) (scan b@b_b3_idx,cols=(85-89))
 │    └── []
 │         ├── best: (scan b,cols=(85-89))
 │         └── cost: 1125.02
 ├── G114: (filters G134)
 ├── G115: (variable d1)
 ├── G116: (variable d2)
 ├── G117: (eq G128 G130)
 ├── G118: (eq G125 G126)
 ├── G119: (scan d,cols=(134-138)) (scan d@d,cols=(134-138))
 │    └── []
 │         ├── best: (scan d,cols=(134-138))
 │         └── cost: 1125.02
 ├── G120: (scan b,cols=(127-131)) (scan b@b_b1_b2_idx,cols=(127-131)) (scan b@b_b2_idx,cols=(127-131)) (scan b@b_b3_idx,cols=(127-131))
 │    └── []
 │         ├── best: (scan b,cols=(127-131))
 │         └── cost: 1125.02
 ├── G121: (filters G135)
 ├── G122: (scan d,cols=(148-152)) (scan d@d,cols=(148-152))
 │    └── []
 │         ├── best: (scan d,cols=(148-152))
 │         └── cost: 1125.02
 ├── G123: (scan b,cols=(141-145)) (scan b@b_b1_b2_idx,cols=(141-145)) (scan b@b_b2_idx,cols=(141-145)) (scan b@b_b3_idx,cols=(141-145))
 │    └── []
 │         ├── best: (scan b,cols=(141-145))
 │         └── cost: 1125.02
 ├── G124: (filters G136)
 ├── G125: (variable b1)
 ├── G126: (variable b2)
 ├── G127: (variable b3)
 ├── G128: (variable b4)
 ├── G129: (variable d3)
 ├── G130: (variable d4)
 ├── G131: (eq G137 G138)
 ├── G132: (or G139 G140)
 ├── G133: (eq G141 G142)
 ├── G134: (or G143 G144)
 ├── G135: (eq G145 G146)
 ├── G136: (or G147 G148)
 ├── G137: (variable b4)
 ├── G138: (variable d4)
 ├── G139: (eq G149 G150)
 ├── G140: (eq G151 G152)
 ├── G141: (variable b4)
 ├── G142: (variable d4)
 ├── G143: (eq G153 G154)
 ├── G144: (eq G155 G156)
 ├── G145: (variable b4)
 ├── G146: (variable d4)
 ├── G147: (eq G157 G158)
 ├── G148: (eq G159 G160)
 ├── G149: (variable b1)
 ├── G150: (variable b2)
 ├── G151: (variable d1)
 ├── G152: (variable d2)
 ├── G153: (variable b1)
 ├── G154: (variable b2)
 ├── G155: (variable d1)
 ├── G156: (variable d2)
 ├── G157: (variable b1)
 ├── G158: (variable b2)
 ├── G159: (variable d1)
 └── G160: (variable d2)

opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM b, d WHERE (b1 = 0 OR b1 = d1)   AND
                         (b1 = 0 OR b2 = 5)    AND
                         (b2 = d1 OR b1 = d1)  AND
                         (b2 = d1 OR b2 = 5)
----
project
 ├── columns: b1:1!null b2:2!null b3:3 b4:4 d1:8!null d2:9 d3:10 d4:11
 └── distinct-on
      ├── columns: b1:1!null b2:2!null b3:3 b4:4 b.rowid:5!null d1:8!null d2:9 d3:10 d4:11 d.rowid:12!null
      ├── grouping columns: b.rowid:5!null d.rowid:12!null
      ├── key: (5,12)
      ├── fd: (5,12)-->(1-4,8-11)
      ├── union-all
      │    ├── columns: b1:1!null b2:2!null b3:3 b4:4 b.rowid:5!null d1:8!null d2:9 d3:10 d4:11 d.rowid:12!null
      │    ├── left columns: b1:29 b2:30 b3:31 b4:32 b.rowid:33 d1:36 d2:37 d3:38 d4:39 d.rowid:40
      │    ├── right columns: b1:43 b2:44 b3:45 b4:46 b.rowid:47 d1:50 d2:51 d3:52 d4:53 d.rowid:54
      │    ├── inner-join (lookup d@d)
      │    │    ├── columns: b1:29!null b2:30!null b3:31 b4:32 b.rowid:33!null d1:36!null d2:37 d3:38 d4:39 d.rowid:40!null
      │    │    ├── key columns: [29] = [36]
      │    │    ├── key: (33,40)
      │    │    ├── fd: (33)-->(29-32), (40)-->(36-39), (29)==(36), (36)==(29)
      │    │    ├── distinct-on
      │    │    │    ├── columns: b1:29!null b2:30!null b3:31 b4:32 b.rowid:33!null
      │    │    │    ├── grouping columns: b.rowid:33!null
      │    │    │    ├── key: (33)
      │    │    │    ├── fd: (33)-->(29-32)
      │    │    │    ├── union-all
      │    │    │    │    ├── columns: b1:29!null b2:30!null b3:31 b4:32 b.rowid:33!null
      │    │    │    │    ├── left columns: b1:57 b2:58 b3:59 b4:60 b.rowid:61
      │    │    │    │    ├── right columns: b1:64 b2:65 b3:66 b4:67 b.rowid:68
      │    │    │    │    ├── scan b@b_b1_b2_idx
      │    │    │    │    │    ├── columns: b1:57!null b2:58!null b3:59 b4:60 b.rowid:61!null
      │    │    │    │    │    ├── constraint: /57/58/61
      │    │    │    │    │    │    ├── [/0/0 - /0/0]
      │    │    │    │    │    │    └── [/0/5 - /0/5]
      │    │    │    │    │    ├── key: (61)
      │    │    │    │    │    └── fd: ()-->(57), (61)-->(58-60)
      │    │    │    │    └── select
      │    │    │    │         ├── columns: b1:64!null b2:65!null b3:66 b4:67 b.rowid:68!null
      │    │    │    │         ├── key: (68)
      │    │    │    │         ├── fd: ()-->(65), (68)-->(64,66,67)
      │    │    │    │         ├── scan b@b_b2_idx
      │    │    │    │         │    ├── columns: b1:64 b2:65!null b3:66 b4:67 b.rowid:68!null
      │    │    │    │         │    ├── constraint: /65/68: [/5 - /5]
      │    │    │    │         │    ├── key: (68)
      │    │    │    │         │    └── fd: ()-->(65), (68)-->(64,66,67)
      │    │    │    │         └── filters
      │    │    │    │              └── (b1:64 = 5) OR ((b1:64 IS DISTINCT FROM CAST(NULL AS INT8)) OR CAST(NULL AS BOOL)) [outer=(64), constraints=(/64: (/NULL - ]; tight)]
      │    │    │    └── aggregations
      │    │    │         ├── const-agg [as=b1:29, outer=(29)]
      │    │    │         │    └── b1:29
      │    │    │         ├── const-agg [as=b2:30, outer=(30)]
      │    │    │         │    └── b2:30
      │    │    │         ├── const-agg [as=b3:31, outer=(31)]
      │    │    │         │    └── b3:31
      │    │    │         └── const-agg [as=b4:32, outer=(32)]
      │    │    │              └── b4:32
      │    │    └── filters (true)
      │    └── project
      │         ├── columns: b1:43!null b2:44!null b3:45 b4:46 b.rowid:47!null d1:50!null d2:51 d3:52 d4:53 d.rowid:54!null
      │         ├── key: (47,54)
      │         ├── fd: ()-->(43), (47)-->(44-46), (54)-->(50-53)
      │         └── distinct-on
      │              ├── columns: b1:43!null b2:44!null b3:45 b4:46 b.rowid:47!null d1:50!null d2:51 d3:52 d4:53 d.rowid:54!null
      │              ├── grouping columns: b.rowid:47!null d.rowid:54!null
      │              ├── key: (47,54)
      │              ├── fd: (47,54)-->(43-46,50-53)
      │              ├── union-all
      │              │    ├── columns: b1:43!null b2:44!null b3:45 b4:46 b.rowid:47!null d1:50!null d2:51 d3:52 d4:53 d.rowid:54!null
      │              │    ├── left columns: b1:71 b2:72 b3:73 b4:74 b.rowid:75 d1:78 d2:79 d3:80 d4:81 d.rowid:82
      │              │    ├── right columns: b1:85 b2:86 b3:87 b4:88 b.rowid:89 d1:92 d2:93 d3:94 d4:95 d.rowid:96
      │              │    ├── inner-join (lookup d@d)
      │              │    │    ├── columns: b1:71!null b2:72!null b3:73 b4:74 b.rowid:75!null d1:78!null d2:79 d3:80 d4:81 d.rowid:82!null
      │              │    │    ├── key columns: [72] = [78]
      │              │    │    ├── key: (75,82)
      │              │    │    ├── fd: ()-->(71), (75)-->(72-74), (82)-->(78-81), (72)==(78), (78)==(72)
      │              │    │    ├── scan b@b_b1_b2_idx
      │              │    │    │    ├── columns: b1:71!null b2:72!null b3:73 b4:74 b.rowid:75!null
      │              │    │    │    ├── constraint: /71/72/75: (/0/NULL - /0]
      │              │    │    │    ├── key: (75)
      │              │    │    │    └── fd: ()-->(71), (75)-->(72-74)
      │              │    │    └── filters
      │              │    │         └── ((d1:78 IS DISTINCT FROM CAST(NULL AS INT8)) OR CAST(NULL AS BOOL)) OR (d1:78 = 5) [outer=(78), constraints=(/78: (/NULL - ]; tight)]
      │              │    └── inner-join (lookup d@d)
      │              │         ├── columns: b1:85!null b2:86!null b3:87 b4:88 b.rowid:89!null d1:92!null d2:93 d3:94 d4:95 d.rowid:96!null
      │              │         ├── key columns: [85] = [92]
      │              │         ├── key: (89,96)
      │              │         ├── fd: ()-->(85,92), (89)-->(86-88), (96)-->(93-95), (85)==(92), (92)==(85)
      │              │         ├── scan b@b_b1_b2_idx
      │              │         │    ├── columns: b1:85!null b2:86!null b3:87 b4:88 b.rowid:89!null
      │              │         │    ├── constraint: /85/86/89
      │              │         │    │    ├── [/0/0 - /0/0]
      │              │         │    │    └── [/0/5 - /0/5]
      │              │         │    ├── key: (89)
      │              │         │    └── fd: ()-->(85), (89)-->(86-88)
      │              │         └── filters (true)
      │              └── aggregations
      │                   ├── const-agg [as=b1:43, outer=(43)]
      │                   │    └── b1:43
      │                   ├── const-agg [as=b2:44, outer=(44)]
      │                   │    └── b2:44
      │                   ├── const-agg [as=b3:45, outer=(45)]
      │                   │    └── b3:45
      │                   ├── const-agg [as=b4:46, outer=(46)]
      │                   │    └── b4:46
      │                   ├── const-agg [as=d1:50, outer=(50)]
      │                   │    └── d1:50
      │                   ├── const-agg [as=d2:51, outer=(51)]
      │                   │    └── d2:51
      │                   ├── const-agg [as=d3:52, outer=(52)]
      │                   │    └── d3:52
      │                   └── const-agg [as=d4:53, outer=(53)]
      │                        └── d4:53
      └── aggregations
           ├── const-agg [as=b1:1, outer=(1)]
           │    └── b1:1
           ├── const-agg [as=b2:2, outer=(2)]
           │    └── b2:2
           ├── const-agg [as=b3:3, outer=(3)]
           │    └── b3:3
           ├── const-agg [as=b4:4, outer=(4)]
           │    └── b4:4
           ├── const-agg [as=d1:8, outer=(8)]
           │    └── d1:8
           ├── const-agg [as=d2:9, outer=(9)]
           │    └── d2:9
           ├── const-agg [as=d3:10, outer=(10)]
           │    └── d3:10
           └── const-agg [as=d4:11, outer=(11)]
                └── d4:11

# ON filters that are a disjunction of equality filters AND And expressions
opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM c, d WHERE (c1 = d1 AND c2 = d2) OR c3 = d3
----
project
 ├── columns: c1:1 c2:2 c3:3 c4:4 d1:8 d2:9 d3:10 d4:11
 └── distinct-on
      ├── columns: c1:1 c2:2 c3:3 c4:4 c.rowid:5!null d1:8 d2:9 d3:10 d4:11 d.rowid:12!null
      ├── grouping columns: c.rowid:5!null d.rowid:12!null
      ├── key: (5,12)
      ├── fd: (5,12)-->(1-4,8-11)
      ├── union-all
      │    ├── columns: c1:1 c2:2 c3:3 c4:4 c.rowid:5!null d1:8 d2:9 d3:10 d4:11 d.rowid:12!null
      │    ├── left columns: c1:15 c2:16 c3:17 c4:18 c.rowid:19 d1:22 d2:23 d3:24 d4:25 d.rowid:26
      │    ├── right columns: c1:29 c2:30 c3:31 c4:32 c.rowid:33 d1:36 d2:37 d3:38 d4:39 d.rowid:40
      │    ├── inner-join (hash)
      │    │    ├── columns: c1:15!null c2:16!null c3:17 c4:18 c.rowid:19!null d1:22!null d2:23!null d3:24 d4:25 d.rowid:26!null
      │    │    ├── key: (19,26)
      │    │    ├── fd: (19)-->(15-18), (26)-->(22-25), (15)==(22), (22)==(15), (16)==(23), (23)==(16)
      │    │    ├── scan c
      │    │    │    ├── columns: c1:15 c2:16 c3:17 c4:18 c.rowid:19!null
      │    │    │    ├── key: (19)
      │    │    │    └── fd: (19)-->(15-18)
      │    │    ├── scan d
      │    │    │    ├── columns: d1:22 d2:23 d3:24 d4:25 d.rowid:26!null
      │    │    │    ├── key: (26)
      │    │    │    └── fd: (26)-->(22-25)
      │    │    └── filters
      │    │         ├── c1:15 = d1:22 [outer=(15,22), constraints=(/15: (/NULL - ]; /22: (/NULL - ]), fd=(15)==(22), (22)==(15)]
      │    │         └── c2:16 = d2:23 [outer=(16,23), constraints=(/16: (/NULL - ]; /23: (/NULL - ]), fd=(16)==(23), (23)==(16)]
      │    └── inner-join (hash)
      │         ├── columns: c1:29 c2:30 c3:31!null c4:32 c.rowid:33!null d1:36 d2:37 d3:38!null d4:39 d.rowid:40!null
      │         ├── key: (33,40)
      │         ├── fd: (33)-->(29-32), (40)-->(36-39), (31)==(38), (38)==(31)
      │         ├── scan c
      │         │    ├── columns: c1:29 c2:30 c3:31 c4:32 c.rowid:33!null
      │         │    ├── key: (33)
      │         │    └── fd: (33)-->(29-32)
      │         ├── scan d
      │         │    ├── columns: d1:36 d2:37 d3:38 d4:39 d.rowid:40!null
      │         │    ├── key: (40)
      │         │    └── fd: (40)-->(36-39)
      │         └── filters
      │              └── c3:31 = d3:38 [outer=(31,38), constraints=(/31: (/NULL - ]; /38: (/NULL - ]), fd=(31)==(38), (38)==(31)]
      └── aggregations
           ├── const-agg [as=c1:1, outer=(1)]
           │    └── c1:1
           ├── const-agg [as=c2:2, outer=(2)]
           │    └── c2:2
           ├── const-agg [as=c3:3, outer=(3)]
           │    └── c3:3
           ├── const-agg [as=c4:4, outer=(4)]
           │    └── c4:4
           ├── const-agg [as=d1:8, outer=(8)]
           │    └── d1:8
           ├── const-agg [as=d2:9, outer=(9)]
           │    └── d2:9
           ├── const-agg [as=d3:10, outer=(10)]
           │    └── d3:10
           └── const-agg [as=d4:11, outer=(11)]
                └── d4:11

opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a, d WHERE (a1 = d2 AND a2 = d1) OR (a3 = d4 AND a4 = d3)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null d1:7 d2:8 d3:9 d4:10
 └── distinct-on
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null d1:7 d2:8 d3:9 d4:10 rowid:11!null
      ├── grouping columns: a1:1!null a2:2!null a3:3!null a4:4!null rowid:11!null
      ├── key: (1-4,11)
      ├── fd: (1-4,11)-->(7-10)
      ├── union-all
      │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null d1:7 d2:8 d3:9 d4:10 rowid:11!null
      │    ├── left columns: a1:14 a2:15 a3:16 a4:17 d1:20 d2:21 d3:22 d4:23 rowid:24
      │    ├── right columns: a1:27 a2:28 a3:29 a4:30 d1:33 d2:34 d3:35 d4:36 rowid:37
      │    ├── inner-join (hash)
      │    │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null d1:20!null d2:21!null d3:22 d4:23 rowid:24!null
      │    │    ├── key: (16,17,24)
      │    │    ├── fd: (24)-->(20-23), (14)==(21), (21)==(14), (15)==(20), (20)==(15)
      │    │    ├── scan a
      │    │    │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
      │    │    │    └── key: (14-17)
      │    │    ├── scan d
      │    │    │    ├── columns: d1:20 d2:21 d3:22 d4:23 rowid:24!null
      │    │    │    ├── key: (24)
      │    │    │    └── fd: (24)-->(20-23)
      │    │    └── filters
      │    │         ├── a1:14 = d2:21 [outer=(14,21), constraints=(/14: (/NULL - ]; /21: (/NULL - ]), fd=(14)==(21), (21)==(14)]
      │    │         └── a2:15 = d1:20 [outer=(15,20), constraints=(/15: (/NULL - ]; /20: (/NULL - ]), fd=(15)==(20), (20)==(15)]
      │    └── inner-join (hash)
      │         ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null d1:33 d2:34 d3:35!null d4:36!null rowid:37!null
      │         ├── key: (27,28,37)
      │         ├── fd: (37)-->(33-36), (29)==(36), (36)==(29), (30)==(35), (35)==(30)
      │         ├── scan a
      │         │    ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
      │         │    └── key: (27-30)
      │         ├── scan d
      │         │    ├── columns: d1:33 d2:34 d3:35 d4:36 rowid:37!null
      │         │    ├── key: (37)
      │         │    └── fd: (37)-->(33-36)
      │         └── filters
      │              ├── a3:29 = d4:36 [outer=(29,36), constraints=(/29: (/NULL - ]; /36: (/NULL - ]), fd=(29)==(36), (36)==(29)]
      │              └── a4:30 = d3:35 [outer=(30,35), constraints=(/30: (/NULL - ]; /35: (/NULL - ]), fd=(30)==(35), (35)==(30)]
      └── aggregations
           ├── const-agg [as=d1:7, outer=(7)]
           │    └── d1:7
           ├── const-agg [as=d2:8, outer=(8)]
           │    └── d2:8
           ├── const-agg [as=d3:9, outer=(9)]
           │    └── d3:9
           └── const-agg [as=d4:10, outer=(10)]
                └── d4:10

#########################
# Uncorrelated semijoin #
#########################

# Join of tables with compound primary keys
opt expect-not=SplitDisjunctionOfJoinTerms
SELECT * FROM a WHERE EXISTS (SELECT 1 FROM d WHERE d1 = 4 OR d2 = 50)
----
select
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── key: (1-4)
 ├── scan a
 │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 │    └── key: (1-4)
 └── filters
      └── exists [subquery]
           └── limit
                ├── columns: d1:7 d2:8
                ├── cardinality: [0 - 1]
                ├── key: ()
                ├── fd: ()-->(7,8)
                ├── select
                │    ├── columns: d1:7 d2:8
                │    ├── limit hint: 1.00
                │    ├── scan d
                │    │    ├── columns: d1:7 d2:8
                │    │    └── limit hint: 50.00
                │    └── filters
                │         └── (d1:7 = 4) OR (d2:8 = 50) [outer=(7,8)]
                └── 1

opt expect-not=SplitDisjunctionOfJoinTerms
SELECT * FROM a WHERE EXISTS (SELECT 1 FROM c, d WHERE d1 = 4 OR c2 = 50 HAVING sum(d4) > 40)
----
select
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── immutable
 ├── key: (1-4)
 ├── scan a
 │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 │    └── key: (1-4)
 └── filters
      └── exists [immutable, subquery]
           └── select
                ├── columns: sum:21!null
                ├── cardinality: [0 - 1]
                ├── immutable
                ├── key: ()
                ├── fd: ()-->(21)
                ├── scalar-group-by
                │    ├── columns: sum:21
                │    ├── cardinality: [1 - 1]
                │    ├── key: ()
                │    ├── fd: ()-->(21)
                │    ├── inner-join (cross)
                │    │    ├── columns: c2:8 d1:14 d4:17
                │    │    ├── scan c
                │    │    │    └── columns: c2:8
                │    │    ├── scan d
                │    │    │    └── columns: d1:14 d4:17
                │    │    └── filters
                │    │         └── (d1:14 = 4) OR (c2:8 = 50) [outer=(8,14)]
                │    └── aggregations
                │         └── sum [as=sum:21, outer=(17)]
                │              └── d4:17
                └── filters
                     └── sum:21 > 40 [outer=(21), immutable, constraints=(/21: (/40 - ]; tight)]

opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a WHERE EXISTS (SELECT 1 FROM c, d WHERE c1 = d2 or c2 = d1)
----
select
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── key: (1-4)
 ├── scan a
 │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 │    └── key: (1-4)
 └── filters
      └── exists [subquery]
           └── limit
                ├── columns: c1:7 c2:8 d1:14 d2:15
                ├── cardinality: [0 - 1]
                ├── key: ()
                ├── fd: ()-->(7,8,14,15)
                ├── project
                │    ├── columns: c1:7 c2:8 d1:14 d2:15
                │    ├── limit hint: 1.00
                │    └── distinct-on
                │         ├── columns: c1:7 c2:8 c.rowid:11!null d1:14 d2:15 d.rowid:18!null
                │         ├── grouping columns: c.rowid:11!null d.rowid:18!null
                │         ├── key: (11,18)
                │         ├── fd: (11,18)-->(7,8,14,15)
                │         ├── limit hint: 1.00
                │         ├── union-all
                │         │    ├── columns: c1:7 c2:8 c.rowid:11!null d1:14 d2:15 d.rowid:18!null
                │         │    ├── left columns: c1:22 c2:23 c.rowid:26 d1:29 d2:30 d.rowid:33
                │         │    ├── right columns: c1:36 c2:37 c.rowid:40 d1:43 d2:44 d.rowid:47
                │         │    ├── limit hint: 1.20
                │         │    ├── inner-join (hash)
                │         │    │    ├── columns: c1:22!null c2:23 c.rowid:26!null d1:29 d2:30!null d.rowid:33!null
                │         │    │    ├── key: (26,33)
                │         │    │    ├── fd: (26)-->(22,23), (33)-->(29,30), (22)==(30), (30)==(22)
                │         │    │    ├── limit hint: 1.20
                │         │    │    ├── scan c
                │         │    │    │    ├── columns: c1:22 c2:23 c.rowid:26!null
                │         │    │    │    ├── key: (26)
                │         │    │    │    └── fd: (26)-->(22,23)
                │         │    │    ├── scan d
                │         │    │    │    ├── columns: d1:29 d2:30 d.rowid:33!null
                │         │    │    │    ├── key: (33)
                │         │    │    │    └── fd: (33)-->(29,30)
                │         │    │    └── filters
                │         │    │         └── c1:22 = d2:30 [outer=(22,30), constraints=(/22: (/NULL - ]; /30: (/NULL - ]), fd=(22)==(30), (30)==(22)]
                │         │    └── inner-join (hash)
                │         │         ├── columns: c1:36 c2:37!null c.rowid:40!null d1:43!null d2:44 d.rowid:47!null
                │         │         ├── key: (40,47)
                │         │         ├── fd: (40)-->(36,37), (47)-->(43,44), (37)==(43), (43)==(37)
                │         │         ├── limit hint: 1.20
                │         │         ├── scan c
                │         │         │    ├── columns: c1:36 c2:37 c.rowid:40!null
                │         │         │    ├── key: (40)
                │         │         │    └── fd: (40)-->(36,37)
                │         │         ├── scan d
                │         │         │    ├── columns: d1:43 d2:44 d.rowid:47!null
                │         │         │    ├── key: (47)
                │         │         │    └── fd: (47)-->(43,44)
                │         │         └── filters
                │         │              └── c2:37 = d1:43 [outer=(37,43), constraints=(/37: (/NULL - ]; /43: (/NULL - ]), fd=(37)==(43), (43)==(37)]
                │         └── aggregations
                │              ├── const-agg [as=c1:7, outer=(7)]
                │              │    └── c1:7
                │              ├── const-agg [as=c2:8, outer=(8)]
                │              │    └── c2:8
                │              ├── const-agg [as=d1:14, outer=(14)]
                │              │    └── d1:14
                │              └── const-agg [as=d2:15, outer=(15)]
                │                   └── d2:15
                └── 1

opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a WHERE (a1, a2) IN (SELECT c1, d1 FROM c, d WHERE c3 = d3 or c3 = d4)
----
semi-join (hash)
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── key: (1-4)
 ├── scan a
 │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 │    └── key: (1-4)
 ├── project
 │    ├── columns: c1:7 c3:9!null d1:14 d3:16 d4:17
 │    └── distinct-on
 │         ├── columns: c1:7 c3:9!null c.rowid:11!null d1:14 d3:16 d4:17 d.rowid:18!null
 │         ├── grouping columns: c.rowid:11!null d.rowid:18!null
 │         ├── key: (11,18)
 │         ├── fd: (11,18)-->(7,9,14,16,17)
 │         ├── union-all
 │         │    ├── columns: c1:7 c3:9!null c.rowid:11!null d1:14 d3:16 d4:17 d.rowid:18!null
 │         │    ├── left columns: c1:22 c3:24 c.rowid:26 d1:29 d3:31 d4:32 d.rowid:33
 │         │    ├── right columns: c1:36 c3:38 c.rowid:40 d1:43 d3:45 d4:46 d.rowid:47
 │         │    ├── inner-join (hash)
 │         │    │    ├── columns: c1:22 c3:24!null c.rowid:26!null d1:29 d3:31!null d4:32 d.rowid:33!null
 │         │    │    ├── key: (26,33)
 │         │    │    ├── fd: (26)-->(22,24), (33)-->(29,31,32), (24)==(31), (31)==(24)
 │         │    │    ├── scan c
 │         │    │    │    ├── columns: c1:22 c3:24 c.rowid:26!null
 │         │    │    │    ├── key: (26)
 │         │    │    │    └── fd: (26)-->(22,24)
 │         │    │    ├── scan d
 │         │    │    │    ├── columns: d1:29 d3:31 d4:32 d.rowid:33!null
 │         │    │    │    ├── key: (33)
 │         │    │    │    └── fd: (33)-->(29,31,32)
 │         │    │    └── filters
 │         │    │         └── c3:24 = d3:31 [outer=(24,31), constraints=(/24: (/NULL - ]; /31: (/NULL - ]), fd=(24)==(31), (31)==(24)]
 │         │    └── inner-join (hash)
 │         │         ├── columns: c1:36 c3:38!null c.rowid:40!null d1:43 d3:45 d4:46!null d.rowid:47!null
 │         │         ├── key: (40,47)
 │         │         ├── fd: (40)-->(36,38), (47)-->(43,45,46), (38)==(46), (46)==(38)
 │         │         ├── scan c
 │         │         │    ├── columns: c1:36 c3:38 c.rowid:40!null
 │         │         │    ├── key: (40)
 │         │         │    └── fd: (40)-->(36,38)
 │         │         ├── scan d
 │         │         │    ├── columns: d1:43 d3:45 d4:46 d.rowid:47!null
 │         │         │    ├── key: (47)
 │         │         │    └── fd: (47)-->(43,45,46)
 │         │         └── filters
 │         │              └── c3:38 = d4:46 [outer=(38,46), constraints=(/38: (/NULL - ]; /46: (/NULL - ]), fd=(38)==(46), (46)==(38)]
 │         └── aggregations
 │              ├── const-agg [as=c1:7, outer=(7)]
 │              │    └── c1:7
 │              ├── const-agg [as=c3:9, outer=(9)]
 │              │    └── c3:9
 │              ├── const-agg [as=d1:14, outer=(14)]
 │              │    └── d1:14
 │              ├── const-agg [as=d3:16, outer=(16)]
 │              │    └── d3:16
 │              └── const-agg [as=d4:17, outer=(17)]
 │                   └── d4:17
 └── filters
      ├── c1:7 = a1:1 [outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
      └── d1:14 = a2:2 [outer=(2,14), constraints=(/2: (/NULL - ]; /14: (/NULL - ]), fd=(2)==(14), (14)==(2)]

opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a WHERE (a1, a2) IN (SELECT c1, d1 FROM c, d WHERE c3 = d3 or c2 = d2 EXCEPT ALL
                                   SELECT c1, d1 FROM c, d WHERE c3 = d3 or c2 = d2)
----
semi-join (hash)
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── key: (1-4)
 ├── scan a
 │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 │    └── key: (1-4)
 ├── except-all
 │    ├── columns: c1:7 d1:14
 │    ├── left columns: c1:7 d1:14
 │    ├── right columns: c1:21 d1:28
 │    ├── project
 │    │    ├── columns: c1:7 d1:14
 │    │    └── project
 │    │         ├── columns: c1:7 c2:8 c3:9 d1:14 d2:15 d3:16
 │    │         └── distinct-on
 │    │              ├── columns: c1:7 c2:8 c3:9 c.rowid:11!null d1:14 d2:15 d3:16 d.rowid:18!null
 │    │              ├── grouping columns: c.rowid:11!null d.rowid:18!null
 │    │              ├── key: (11,18)
 │    │              ├── fd: (11,18)-->(7-9,14-16)
 │    │              ├── union-all
 │    │              │    ├── columns: c1:7 c2:8 c3:9 c.rowid:11!null d1:14 d2:15 d3:16 d.rowid:18!null
 │    │              │    ├── left columns: c1:36 c2:37 c3:38 c.rowid:40 d1:43 d2:44 d3:45 d.rowid:47
 │    │              │    ├── right columns: c1:50 c2:51 c3:52 c.rowid:54 d1:57 d2:58 d3:59 d.rowid:61
 │    │              │    ├── inner-join (hash)
 │    │              │    │    ├── columns: c1:36 c2:37 c3:38!null c.rowid:40!null d1:43 d2:44 d3:45!null d.rowid:47!null
 │    │              │    │    ├── key: (40,47)
 │    │              │    │    ├── fd: (40)-->(36-38), (47)-->(43-45), (38)==(45), (45)==(38)
 │    │              │    │    ├── scan c
 │    │              │    │    │    ├── columns: c1:36 c2:37 c3:38 c.rowid:40!null
 │    │              │    │    │    ├── key: (40)
 │    │              │    │    │    └── fd: (40)-->(36-38)
 │    │              │    │    ├── scan d
 │    │              │    │    │    ├── columns: d1:43 d2:44 d3:45 d.rowid:47!null
 │    │              │    │    │    ├── key: (47)
 │    │              │    │    │    └── fd: (47)-->(43-45)
 │    │              │    │    └── filters
 │    │              │    │         └── c3:38 = d3:45 [outer=(38,45), constraints=(/38: (/NULL - ]; /45: (/NULL - ]), fd=(38)==(45), (45)==(38)]
 │    │              │    └── inner-join (hash)
 │    │              │         ├── columns: c1:50 c2:51!null c3:52 c.rowid:54!null d1:57 d2:58!null d3:59 d.rowid:61!null
 │    │              │         ├── key: (54,61)
 │    │              │         ├── fd: (54)-->(50-52), (61)-->(57-59), (51)==(58), (58)==(51)
 │    │              │         ├── scan c
 │    │              │         │    ├── columns: c1:50 c2:51 c3:52 c.rowid:54!null
 │    │              │         │    ├── key: (54)
 │    │              │         │    └── fd: (54)-->(50-52)
 │    │              │         ├── scan d
 │    │              │         │    ├── columns: d1:57 d2:58 d3:59 d.rowid:61!null
 │    │              │         │    ├── key: (61)
 │    │              │         │    └── fd: (61)-->(57-59)
 │    │              │         └── filters
 │    │              │              └── c2:51 = d2:58 [outer=(51,58), constraints=(/51: (/NULL - ]; /58: (/NULL - ]), fd=(51)==(58), (58)==(51)]
 │    │              └── aggregations
 │    │                   ├── const-agg [as=c1:7, outer=(7)]
 │    │                   │    └── c1:7
 │    │                   ├── const-agg [as=c2:8, outer=(8)]
 │    │                   │    └── c2:8
 │    │                   ├── const-agg [as=c3:9, outer=(9)]
 │    │                   │    └── c3:9
 │    │                   ├── const-agg [as=d1:14, outer=(14)]
 │    │                   │    └── d1:14
 │    │                   ├── const-agg [as=d2:15, outer=(15)]
 │    │                   │    └── d2:15
 │    │                   └── const-agg [as=d3:16, outer=(16)]
 │    │                        └── d3:16
 │    └── project
 │         ├── columns: c1:21 d1:28
 │         └── project
 │              ├── columns: c1:21 c2:22 c3:23 d1:28 d2:29 d3:30
 │              └── distinct-on
 │                   ├── columns: c1:21 c2:22 c3:23 c.rowid:25!null d1:28 d2:29 d3:30 d.rowid:32!null
 │                   ├── grouping columns: c.rowid:25!null d.rowid:32!null
 │                   ├── key: (25,32)
 │                   ├── fd: (25,32)-->(21-23,28-30)
 │                   ├── union-all
 │                   │    ├── columns: c1:21 c2:22 c3:23 c.rowid:25!null d1:28 d2:29 d3:30 d.rowid:32!null
 │                   │    ├── left columns: c1:92 c2:93 c3:94 c.rowid:96 d1:99 d2:100 d3:101 d.rowid:103
 │                   │    ├── right columns: c1:106 c2:107 c3:108 c.rowid:110 d1:113 d2:114 d3:115 d.rowid:117
 │                   │    ├── inner-join (hash)
 │                   │    │    ├── columns: c1:92 c2:93 c3:94!null c.rowid:96!null d1:99 d2:100 d3:101!null d.rowid:103!null
 │                   │    │    ├── key: (96,103)
 │                   │    │    ├── fd: (96)-->(92-94), (103)-->(99-101), (94)==(101), (101)==(94)
 │                   │    │    ├── scan c
 │                   │    │    │    ├── columns: c1:92 c2:93 c3:94 c.rowid:96!null
 │                   │    │    │    ├── key: (96)
 │                   │    │    │    └── fd: (96)-->(92-94)
 │                   │    │    ├── scan d
 │                   │    │    │    ├── columns: d1:99 d2:100 d3:101 d.rowid:103!null
 │                   │    │    │    ├── key: (103)
 │                   │    │    │    └── fd: (103)-->(99-101)
 │                   │    │    └── filters
 │                   │    │         └── c3:94 = d3:101 [outer=(94,101), constraints=(/94: (/NULL - ]; /101: (/NULL - ]), fd=(94)==(101), (101)==(94)]
 │                   │    └── inner-join (hash)
 │                   │         ├── columns: c1:106 c2:107!null c3:108 c.rowid:110!null d1:113 d2:114!null d3:115 d.rowid:117!null
 │                   │         ├── key: (110,117)
 │                   │         ├── fd: (110)-->(106-108), (117)-->(113-115), (107)==(114), (114)==(107)
 │                   │         ├── scan c
 │                   │         │    ├── columns: c1:106 c2:107 c3:108 c.rowid:110!null
 │                   │         │    ├── key: (110)
 │                   │         │    └── fd: (110)-->(106-108)
 │                   │         ├── scan d
 │                   │         │    ├── columns: d1:113 d2:114 d3:115 d.rowid:117!null
 │                   │         │    ├── key: (117)
 │                   │         │    └── fd: (117)-->(113-115)
 │                   │         └── filters
 │                   │              └── c2:107 = d2:114 [outer=(107,114), constraints=(/107: (/NULL - ]; /114: (/NULL - ]), fd=(107)==(114), (114)==(107)]
 │                   └── aggregations
 │                        ├── const-agg [as=c1:21, outer=(21)]
 │                        │    └── c1:21
 │                        ├── const-agg [as=c2:22, outer=(22)]
 │                        │    └── c2:22
 │                        ├── const-agg [as=c3:23, outer=(23)]
 │                        │    └── c3:23
 │                        ├── const-agg [as=d1:28, outer=(28)]
 │                        │    └── d1:28
 │                        ├── const-agg [as=d2:29, outer=(29)]
 │                        │    └── d2:29
 │                        └── const-agg [as=d3:30, outer=(30)]
 │                             └── d3:30
 └── filters
      ├── c1:7 = a1:1 [outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
      └── d1:14 = a2:2 [outer=(2,14), constraints=(/2: (/NULL - ]; /14: (/NULL - ]), fd=(2)==(14), (14)==(2)]

opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a WHERE (a1, a2) IN (SELECT c1, d1 FROM c, d WHERE c1 IS NULL OR c1 = d1)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── key: (1-4)
 └── inner-join (hash)
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null c1:7!null d1:14!null
      ├── multiplicity: left-rows(zero-or-more), right-rows(zero-or-one)
      ├── key: (3,4,7,14)
      ├── fd: (1)==(7), (7)==(1), (2)==(14), (14)==(2)
      ├── distinct-on
      │    ├── columns: c1:7 d1:14
      │    ├── grouping columns: c1:7 d1:14
      │    ├── key: (7,14)
      │    └── distinct-on
      │         ├── columns: c1:7 c.rowid:11!null d1:14 d.rowid:18!null
      │         ├── grouping columns: c.rowid:11!null d.rowid:18!null
      │         ├── key: (11,18)
      │         ├── fd: (11,18)-->(7,14)
      │         ├── union-all
      │         │    ├── columns: c1:7 c.rowid:11!null d1:14 d.rowid:18!null
      │         │    ├── left columns: c1:34 c.rowid:38 d1:41 d.rowid:45
      │         │    ├── right columns: c1:48 c.rowid:52 d1:55 d.rowid:59
      │         │    ├── inner-join (hash)
      │         │    │    ├── columns: c1:34!null c.rowid:38!null d1:41!null d.rowid:45!null
      │         │    │    ├── key: (38,45)
      │         │    │    ├── fd: (38)-->(34), (45)-->(41), (34)==(41), (41)==(34)
      │         │    │    ├── scan c
      │         │    │    │    ├── columns: c1:34 c.rowid:38!null
      │         │    │    │    ├── key: (38)
      │         │    │    │    └── fd: (38)-->(34)
      │         │    │    ├── scan d
      │         │    │    │    ├── columns: d1:41 d.rowid:45!null
      │         │    │    │    ├── key: (45)
      │         │    │    │    └── fd: (45)-->(41)
      │         │    │    └── filters
      │         │    │         └── c1:34 = d1:41 [outer=(34,41), constraints=(/34: (/NULL - ]; /41: (/NULL - ]), fd=(34)==(41), (41)==(34)]
      │         │    └── inner-join (cross)
      │         │         ├── columns: c1:48 c.rowid:52!null d1:55 d.rowid:59!null
      │         │         ├── key: (52,59)
      │         │         ├── fd: ()-->(48), (59)-->(55)
      │         │         ├── scan d
      │         │         │    ├── columns: d1:55 d.rowid:59!null
      │         │         │    ├── key: (59)
      │         │         │    └── fd: (59)-->(55)
      │         │         ├── select
      │         │         │    ├── columns: c1:48 c.rowid:52!null
      │         │         │    ├── key: (52)
      │         │         │    ├── fd: ()-->(48)
      │         │         │    ├── scan c
      │         │         │    │    ├── columns: c1:48 c.rowid:52!null
      │         │         │    │    ├── key: (52)
      │         │         │    │    └── fd: (52)-->(48)
      │         │         │    └── filters
      │         │         │         └── c1:48 IS NULL [outer=(48), constraints=(/48: [/NULL - /NULL]; tight), fd=()-->(48)]
      │         │         └── filters (true)
      │         └── aggregations
      │              ├── const-agg [as=c1:7, outer=(7)]
      │              │    └── c1:7
      │              └── const-agg [as=d1:14, outer=(14)]
      │                   └── d1:14
      ├── select
      │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      │    ├── key: (1-4)
      │    ├── scan a
      │    │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      │    │    └── key: (1-4)
      │    └── filters
      │         └── (a1:1 IS NULL) OR (a1:1 = a2:2) [outer=(1,2)]
      └── filters
           ├── c1:7 = a1:1 [outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
           └── d1:14 = a2:2 [outer=(2,14), constraints=(/2: (/NULL - ]; /14: (/NULL - ]), fd=(2)==(14), (14)==(2)]

opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM b WHERE b1 NOT IN (SELECT c1 FROM c, d WHERE c1 IS NULL OR c1 = d1)
----
anti-join (cross)
 ├── columns: b1:1 b2:2 b3:3 b4:4
 ├── scan b
 │    └── columns: b1:1 b2:2 b3:3 b4:4
 ├── project
 │    ├── columns: c1:8 d1:15
 │    └── distinct-on
 │         ├── columns: c1:8 c.rowid:12!null d1:15 d.rowid:19!null
 │         ├── grouping columns: c.rowid:12!null d.rowid:19!null
 │         ├── key: (12,19)
 │         ├── fd: (12,19)-->(8,15)
 │         ├── union-all
 │         │    ├── columns: c1:8 c.rowid:12!null d1:15 d.rowid:19!null
 │         │    ├── left columns: c1:22 c.rowid:26 d1:29 d.rowid:33
 │         │    ├── right columns: c1:36 c.rowid:40 d1:43 d.rowid:47
 │         │    ├── inner-join (hash)
 │         │    │    ├── columns: c1:22!null c.rowid:26!null d1:29!null d.rowid:33!null
 │         │    │    ├── key: (26,33)
 │         │    │    ├── fd: (26)-->(22), (33)-->(29), (22)==(29), (29)==(22)
 │         │    │    ├── scan c
 │         │    │    │    ├── columns: c1:22 c.rowid:26!null
 │         │    │    │    ├── key: (26)
 │         │    │    │    └── fd: (26)-->(22)
 │         │    │    ├── scan d
 │         │    │    │    ├── columns: d1:29 d.rowid:33!null
 │         │    │    │    ├── key: (33)
 │         │    │    │    └── fd: (33)-->(29)
 │         │    │    └── filters
 │         │    │         └── c1:22 = d1:29 [outer=(22,29), constraints=(/22: (/NULL - ]; /29: (/NULL - ]), fd=(22)==(29), (29)==(22)]
 │         │    └── inner-join (cross)
 │         │         ├── columns: c1:36 c.rowid:40!null d1:43 d.rowid:47!null
 │         │         ├── key: (40,47)
 │         │         ├── fd: ()-->(36), (47)-->(43)
 │         │         ├── scan d
 │         │         │    ├── columns: d1:43 d.rowid:47!null
 │         │         │    ├── key: (47)
 │         │         │    └── fd: (47)-->(43)
 │         │         ├── select
 │         │         │    ├── columns: c1:36 c.rowid:40!null
 │         │         │    ├── key: (40)
 │         │         │    ├── fd: ()-->(36)
 │         │         │    ├── scan c
 │         │         │    │    ├── columns: c1:36 c.rowid:40!null
 │         │         │    │    ├── key: (40)
 │         │         │    │    └── fd: (40)-->(36)
 │         │         │    └── filters
 │         │         │         └── c1:36 IS NULL [outer=(36), constraints=(/36: [/NULL - /NULL]; tight), fd=()-->(36)]
 │         │         └── filters (true)
 │         └── aggregations
 │              ├── const-agg [as=c1:8, outer=(8)]
 │              │    └── c1:8
 │              └── const-agg [as=d1:15, outer=(15)]
 │                   └── d1:15
 └── filters
      └── (b1:1 = c1:8) IS NOT false [outer=(1,8)]

opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM b WHERE (b1, b2) NOT IN (SELECT c1, c2 FROM c, d WHERE c1 IS NULL OR c1 = d1)
----
anti-join (cross)
 ├── columns: b1:1 b2:2 b3:3 b4:4
 ├── immutable
 ├── scan b
 │    └── columns: b1:1 b2:2 b3:3 b4:4
 ├── project
 │    ├── columns: column22:22
 │    ├── project
 │    │    ├── columns: c1:8 c2:9 d1:15
 │    │    └── distinct-on
 │    │         ├── columns: c1:8 c2:9 c.rowid:12!null d1:15 d.rowid:19!null
 │    │         ├── grouping columns: c.rowid:12!null d.rowid:19!null
 │    │         ├── key: (12,19)
 │    │         ├── fd: (12,19)-->(8,9,15)
 │    │         ├── union-all
 │    │         │    ├── columns: c1:8 c2:9 c.rowid:12!null d1:15 d.rowid:19!null
 │    │         │    ├── left columns: c1:23 c2:24 c.rowid:27 d1:30 d.rowid:34
 │    │         │    ├── right columns: c1:37 c2:38 c.rowid:41 d1:44 d.rowid:48
 │    │         │    ├── inner-join (hash)
 │    │         │    │    ├── columns: c1:23!null c2:24 c.rowid:27!null d1:30!null d.rowid:34!null
 │    │         │    │    ├── key: (27,34)
 │    │         │    │    ├── fd: (27)-->(23,24), (34)-->(30), (23)==(30), (30)==(23)
 │    │         │    │    ├── scan c
 │    │         │    │    │    ├── columns: c1:23 c2:24 c.rowid:27!null
 │    │         │    │    │    ├── key: (27)
 │    │         │    │    │    └── fd: (27)-->(23,24)
 │    │         │    │    ├── scan d
 │    │         │    │    │    ├── columns: d1:30 d.rowid:34!null
 │    │         │    │    │    ├── key: (34)
 │    │         │    │    │    └── fd: (34)-->(30)
 │    │         │    │    └── filters
 │    │         │    │         └── c1:23 = d1:30 [outer=(23,30), constraints=(/23: (/NULL - ]; /30: (/NULL - ]), fd=(23)==(30), (30)==(23)]
 │    │         │    └── inner-join (cross)
 │    │         │         ├── columns: c1:37 c2:38 c.rowid:41!null d1:44 d.rowid:48!null
 │    │         │         ├── key: (41,48)
 │    │         │         ├── fd: ()-->(37), (41)-->(38), (48)-->(44)
 │    │         │         ├── scan d
 │    │         │         │    ├── columns: d1:44 d.rowid:48!null
 │    │         │         │    ├── key: (48)
 │    │         │         │    └── fd: (48)-->(44)
 │    │         │         ├── select
 │    │         │         │    ├── columns: c1:37 c2:38 c.rowid:41!null
 │    │         │         │    ├── key: (41)
 │    │         │         │    ├── fd: ()-->(37), (41)-->(38)
 │    │         │         │    ├── scan c
 │    │         │         │    │    ├── columns: c1:37 c2:38 c.rowid:41!null
 │    │         │         │    │    ├── key: (41)
 │    │         │         │    │    └── fd: (41)-->(37,38)
 │    │         │         │    └── filters
 │    │         │         │         └── c1:37 IS NULL [outer=(37), constraints=(/37: [/NULL - /NULL]; tight), fd=()-->(37)]
 │    │         │         └── filters (true)
 │    │         └── aggregations
 │    │              ├── const-agg [as=c1:8, outer=(8)]
 │    │              │    └── c1:8
 │    │              ├── const-agg [as=c2:9, outer=(9)]
 │    │              │    └── c2:9
 │    │              └── const-agg [as=d1:15, outer=(15)]
 │    │                   └── d1:15
 │    └── projections
 │         └── (c1:8, c2:9) [as=column22:22, outer=(8,9)]
 └── filters
      └── (column22:22 = (b1:1, b2:2)) IS NOT false [outer=(1,2,22), immutable]

#########################
# Uncorrelated antijoin #
#########################

opt expect-not=SplitDisjunctionOfJoinTerms
SELECT * FROM a WHERE NOT EXISTS (SELECT 1 FROM b WHERE b1 = 4 OR b2 = 50)
----
select
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── key: (1-4)
 ├── scan a
 │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 │    └── key: (1-4)
 └── filters
      └── not [subquery]
           └── exists
                └── limit
                     ├── columns: b1:7 b2:8
                     ├── cardinality: [0 - 1]
                     ├── key: ()
                     ├── fd: ()-->(7,8)
                     ├── project
                     │    ├── columns: b1:7 b2:8
                     │    ├── limit hint: 1.00
                     │    └── distinct-on
                     │         ├── columns: b1:7 b2:8 rowid:11!null
                     │         ├── grouping columns: rowid:11!null
                     │         ├── key: (11)
                     │         ├── fd: (11)-->(7,8)
                     │         ├── limit hint: 1.00
                     │         ├── union-all
                     │         │    ├── columns: b1:7 b2:8 rowid:11!null
                     │         │    ├── left columns: b1:15 b2:16 rowid:19
                     │         │    ├── right columns: b1:22 b2:23 rowid:26
                     │         │    ├── limit hint: 1.21
                     │         │    ├── scan b@b_b1_b2_idx
                     │         │    │    ├── columns: b1:15!null b2:16 rowid:19!null
                     │         │    │    ├── constraint: /15/16/19: [/4 - /4]
                     │         │    │    ├── key: (19)
                     │         │    │    ├── fd: ()-->(15), (19)-->(16)
                     │         │    │    └── limit hint: 1.21
                     │         │    └── scan b@b_b2_idx
                     │         │         ├── columns: b1:22 b2:23!null rowid:26!null
                     │         │         ├── constraint: /23/26: [/50 - /50]
                     │         │         ├── key: (26)
                     │         │         ├── fd: ()-->(23), (26)-->(22)
                     │         │         └── limit hint: 1.21
                     │         └── aggregations
                     │              ├── const-agg [as=b1:7, outer=(7)]
                     │              │    └── b1:7
                     │              └── const-agg [as=b2:8, outer=(8)]
                     │                   └── b2:8
                     └── 1

opt expect-not=SplitDisjunctionOfJoinTerms
SELECT * FROM a WHERE NOT EXISTS (SELECT 1 FROM c, d WHERE d1 = 4 OR c2 = 50 or d2+c3 > 5)
----
select
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── immutable
 ├── key: (1-4)
 ├── scan a
 │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 │    └── key: (1-4)
 └── filters
      └── not [immutable, subquery]
           └── exists
                └── limit
                     ├── columns: c2:8 c3:9 d1:14 d2:15
                     ├── cardinality: [0 - 1]
                     ├── immutable
                     ├── key: ()
                     ├── fd: ()-->(8,9,14,15)
                     ├── inner-join (cross)
                     │    ├── columns: c2:8 c3:9 d1:14 d2:15
                     │    ├── immutable
                     │    ├── limit hint: 1.00
                     │    ├── scan c
                     │    │    └── columns: c2:8 c3:9
                     │    ├── scan d
                     │    │    └── columns: d1:14 d2:15
                     │    └── filters
                     │         └── ((d1:14 = 4) OR (c2:8 = 50)) OR ((d2:15 + c3:9) > 5) [outer=(8,9,14,15), immutable]
                     └── 1

opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a WHERE NOT EXISTS (SELECT 1 FROM c, d WHERE c3 = d4 or c4 = d3)
----
select
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── key: (1-4)
 ├── scan a
 │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 │    └── key: (1-4)
 └── filters
      └── not [subquery]
           └── exists
                └── limit
                     ├── columns: c3:9 c4:10 d3:16 d4:17
                     ├── cardinality: [0 - 1]
                     ├── key: ()
                     ├── fd: ()-->(9,10,16,17)
                     ├── project
                     │    ├── columns: c3:9 c4:10 d3:16 d4:17
                     │    ├── limit hint: 1.00
                     │    └── distinct-on
                     │         ├── columns: c3:9 c4:10 c.rowid:11!null d3:16 d4:17 d.rowid:18!null
                     │         ├── grouping columns: c.rowid:11!null d.rowid:18!null
                     │         ├── key: (11,18)
                     │         ├── fd: (11,18)-->(9,10,16,17)
                     │         ├── limit hint: 1.00
                     │         ├── union-all
                     │         │    ├── columns: c3:9 c4:10 c.rowid:11!null d3:16 d4:17 d.rowid:18!null
                     │         │    ├── left columns: c3:24 c4:25 c.rowid:26 d3:31 d4:32 d.rowid:33
                     │         │    ├── right columns: c3:38 c4:39 c.rowid:40 d3:45 d4:46 d.rowid:47
                     │         │    ├── limit hint: 1.20
                     │         │    ├── inner-join (hash)
                     │         │    │    ├── columns: c3:24!null c4:25 c.rowid:26!null d3:31 d4:32!null d.rowid:33!null
                     │         │    │    ├── key: (26,33)
                     │         │    │    ├── fd: (26)-->(24,25), (33)-->(31,32), (24)==(32), (32)==(24)
                     │         │    │    ├── limit hint: 1.20
                     │         │    │    ├── scan c
                     │         │    │    │    ├── columns: c3:24 c4:25 c.rowid:26!null
                     │         │    │    │    ├── key: (26)
                     │         │    │    │    └── fd: (26)-->(24,25)
                     │         │    │    ├── scan d
                     │         │    │    │    ├── columns: d3:31 d4:32 d.rowid:33!null
                     │         │    │    │    ├── key: (33)
                     │         │    │    │    └── fd: (33)-->(31,32)
                     │         │    │    └── filters
                     │         │    │         └── c3:24 = d4:32 [outer=(24,32), constraints=(/24: (/NULL - ]; /32: (/NULL - ]), fd=(24)==(32), (32)==(24)]
                     │         │    └── inner-join (hash)
                     │         │         ├── columns: c3:38 c4:39!null c.rowid:40!null d3:45!null d4:46 d.rowid:47!null
                     │         │         ├── key: (40,47)
                     │         │         ├── fd: (40)-->(38,39), (47)-->(45,46), (39)==(45), (45)==(39)
                     │         │         ├── limit hint: 1.20
                     │         │         ├── scan c
                     │         │         │    ├── columns: c3:38 c4:39 c.rowid:40!null
                     │         │         │    ├── key: (40)
                     │         │         │    └── fd: (40)-->(38,39)
                     │         │         ├── scan d
                     │         │         │    ├── columns: d3:45 d4:46 d.rowid:47!null
                     │         │         │    ├── key: (47)
                     │         │         │    └── fd: (47)-->(45,46)
                     │         │         └── filters
                     │         │              └── c4:39 = d3:45 [outer=(39,45), constraints=(/39: (/NULL - ]; /45: (/NULL - ]), fd=(39)==(45), (45)==(39)]
                     │         └── aggregations
                     │              ├── const-agg [as=c3:9, outer=(9)]
                     │              │    └── c3:9
                     │              ├── const-agg [as=c4:10, outer=(10)]
                     │              │    └── c4:10
                     │              ├── const-agg [as=d3:16, outer=(16)]
                     │              │    └── d3:16
                     │              └── const-agg [as=d4:17, outer=(17)]
                     │                   └── d4:17
                     └── 1

opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a WHERE (a1, a2) NOT IN (SELECT c1, d1 FROM c, d WHERE c3 = d3 or c3 = d4)
----
anti-join (cross)
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── immutable
 ├── key: (1-4)
 ├── scan a
 │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 │    └── key: (1-4)
 ├── project
 │    ├── columns: column21:21
 │    ├── project
 │    │    ├── columns: c1:7 c3:9!null d1:14 d3:16 d4:17
 │    │    └── distinct-on
 │    │         ├── columns: c1:7 c3:9!null c.rowid:11!null d1:14 d3:16 d4:17 d.rowid:18!null
 │    │         ├── grouping columns: c.rowid:11!null d.rowid:18!null
 │    │         ├── key: (11,18)
 │    │         ├── fd: (11,18)-->(7,9,14,16,17)
 │    │         ├── union-all
 │    │         │    ├── columns: c1:7 c3:9!null c.rowid:11!null d1:14 d3:16 d4:17 d.rowid:18!null
 │    │         │    ├── left columns: c1:22 c3:24 c.rowid:26 d1:29 d3:31 d4:32 d.rowid:33
 │    │         │    ├── right columns: c1:36 c3:38 c.rowid:40 d1:43 d3:45 d4:46 d.rowid:47
 │    │         │    ├── inner-join (hash)
 │    │         │    │    ├── columns: c1:22 c3:24!null c.rowid:26!null d1:29 d3:31!null d4:32 d.rowid:33!null
 │    │         │    │    ├── key: (26,33)
 │    │         │    │    ├── fd: (26)-->(22,24), (33)-->(29,31,32), (24)==(31), (31)==(24)
 │    │         │    │    ├── scan c
 │    │         │    │    │    ├── columns: c1:22 c3:24 c.rowid:26!null
 │    │         │    │    │    ├── key: (26)
 │    │         │    │    │    └── fd: (26)-->(22,24)
 │    │         │    │    ├── scan d
 │    │         │    │    │    ├── columns: d1:29 d3:31 d4:32 d.rowid:33!null
 │    │         │    │    │    ├── key: (33)
 │    │         │    │    │    └── fd: (33)-->(29,31,32)
 │    │         │    │    └── filters
 │    │         │    │         └── c3:24 = d3:31 [outer=(24,31), constraints=(/24: (/NULL - ]; /31: (/NULL - ]), fd=(24)==(31), (31)==(24)]
 │    │         │    └── inner-join (hash)
 │    │         │         ├── columns: c1:36 c3:38!null c.rowid:40!null d1:43 d3:45 d4:46!null d.rowid:47!null
 │    │         │         ├── key: (40,47)
 │    │         │         ├── fd: (40)-->(36,38), (47)-->(43,45,46), (38)==(46), (46)==(38)
 │    │         │         ├── scan c
 │    │         │         │    ├── columns: c1:36 c3:38 c.rowid:40!null
 │    │         │         │    ├── key: (40)
 │    │         │         │    └── fd: (40)-->(36,38)
 │    │         │         ├── scan d
 │    │         │         │    ├── columns: d1:43 d3:45 d4:46 d.rowid:47!null
 │    │         │         │    ├── key: (47)
 │    │         │         │    └── fd: (47)-->(43,45,46)
 │    │         │         └── filters
 │    │         │              └── c3:38 = d4:46 [outer=(38,46), constraints=(/38: (/NULL - ]; /46: (/NULL - ]), fd=(38)==(46), (46)==(38)]
 │    │         └── aggregations
 │    │              ├── const-agg [as=c1:7, outer=(7)]
 │    │              │    └── c1:7
 │    │              ├── const-agg [as=c3:9, outer=(9)]
 │    │              │    └── c3:9
 │    │              ├── const-agg [as=d1:14, outer=(14)]
 │    │              │    └── d1:14
 │    │              ├── const-agg [as=d3:16, outer=(16)]
 │    │              │    └── d3:16
 │    │              └── const-agg [as=d4:17, outer=(17)]
 │    │                   └── d4:17
 │    └── projections
 │         └── (c1:7, d1:14) [as=column21:21, outer=(7,14)]
 └── filters
      └── (column21:21 = (a1:1, a2:2)) IS NOT false [outer=(1,2,21), immutable]

opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a WHERE (a1, a2) NOT IN (SELECT c1, d1 FROM c, d WHERE c3 = d3 or c2 = d2 EXCEPT ALL
                                       SELECT c1, d1 FROM c, d WHERE c3 = d3 or c2 = d2)
----
anti-join (cross)
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── immutable
 ├── key: (1-4)
 ├── scan a
 │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 │    └── key: (1-4)
 ├── project
 │    ├── columns: column35:35
 │    ├── except-all
 │    │    ├── columns: c1:7 d1:14
 │    │    ├── left columns: c1:7 d1:14
 │    │    ├── right columns: c1:21 d1:28
 │    │    ├── project
 │    │    │    ├── columns: c1:7 d1:14
 │    │    │    └── project
 │    │    │         ├── columns: c1:7 c2:8 c3:9 d1:14 d2:15 d3:16
 │    │    │         └── distinct-on
 │    │    │              ├── columns: c1:7 c2:8 c3:9 c.rowid:11!null d1:14 d2:15 d3:16 d.rowid:18!null
 │    │    │              ├── grouping columns: c.rowid:11!null d.rowid:18!null
 │    │    │              ├── key: (11,18)
 │    │    │              ├── fd: (11,18)-->(7-9,14-16)
 │    │    │              ├── union-all
 │    │    │              │    ├── columns: c1:7 c2:8 c3:9 c.rowid:11!null d1:14 d2:15 d3:16 d.rowid:18!null
 │    │    │              │    ├── left columns: c1:36 c2:37 c3:38 c.rowid:40 d1:43 d2:44 d3:45 d.rowid:47
 │    │    │              │    ├── right columns: c1:50 c2:51 c3:52 c.rowid:54 d1:57 d2:58 d3:59 d.rowid:61
 │    │    │              │    ├── inner-join (hash)
 │    │    │              │    │    ├── columns: c1:36 c2:37 c3:38!null c.rowid:40!null d1:43 d2:44 d3:45!null d.rowid:47!null
 │    │    │              │    │    ├── key: (40,47)
 │    │    │              │    │    ├── fd: (40)-->(36-38), (47)-->(43-45), (38)==(45), (45)==(38)
 │    │    │              │    │    ├── scan c
 │    │    │              │    │    │    ├── columns: c1:36 c2:37 c3:38 c.rowid:40!null
 │    │    │              │    │    │    ├── key: (40)
 │    │    │              │    │    │    └── fd: (40)-->(36-38)
 │    │    │              │    │    ├── scan d
 │    │    │              │    │    │    ├── columns: d1:43 d2:44 d3:45 d.rowid:47!null
 │    │    │              │    │    │    ├── key: (47)
 │    │    │              │    │    │    └── fd: (47)-->(43-45)
 │    │    │              │    │    └── filters
 │    │    │              │    │         └── c3:38 = d3:45 [outer=(38,45), constraints=(/38: (/NULL - ]; /45: (/NULL - ]), fd=(38)==(45), (45)==(38)]
 │    │    │              │    └── inner-join (hash)
 │    │    │              │         ├── columns: c1:50 c2:51!null c3:52 c.rowid:54!null d1:57 d2:58!null d3:59 d.rowid:61!null
 │    │    │              │         ├── key: (54,61)
 │    │    │              │         ├── fd: (54)-->(50-52), (61)-->(57-59), (51)==(58), (58)==(51)
 │    │    │              │         ├── scan c
 │    │    │              │         │    ├── columns: c1:50 c2:51 c3:52 c.rowid:54!null
 │    │    │              │         │    ├── key: (54)
 │    │    │              │         │    └── fd: (54)-->(50-52)
 │    │    │              │         ├── scan d
 │    │    │              │         │    ├── columns: d1:57 d2:58 d3:59 d.rowid:61!null
 │    │    │              │         │    ├── key: (61)
 │    │    │              │         │    └── fd: (61)-->(57-59)
 │    │    │              │         └── filters
 │    │    │              │              └── c2:51 = d2:58 [outer=(51,58), constraints=(/51: (/NULL - ]; /58: (/NULL - ]), fd=(51)==(58), (58)==(51)]
 │    │    │              └── aggregations
 │    │    │                   ├── const-agg [as=c1:7, outer=(7)]
 │    │    │                   │    └── c1:7
 │    │    │                   ├── const-agg [as=c2:8, outer=(8)]
 │    │    │                   │    └── c2:8
 │    │    │                   ├── const-agg [as=c3:9, outer=(9)]
 │    │    │                   │    └── c3:9
 │    │    │                   ├── const-agg [as=d1:14, outer=(14)]
 │    │    │                   │    └── d1:14
 │    │    │                   ├── const-agg [as=d2:15, outer=(15)]
 │    │    │                   │    └── d2:15
 │    │    │                   └── const-agg [as=d3:16, outer=(16)]
 │    │    │                        └── d3:16
 │    │    └── project
 │    │         ├── columns: c1:21 d1:28
 │    │         └── project
 │    │              ├── columns: c1:21 c2:22 c3:23 d1:28 d2:29 d3:30
 │    │              └── distinct-on
 │    │                   ├── columns: c1:21 c2:22 c3:23 c.rowid:25!null d1:28 d2:29 d3:30 d.rowid:32!null
 │    │                   ├── grouping columns: c.rowid:25!null d.rowid:32!null
 │    │                   ├── key: (25,32)
 │    │                   ├── fd: (25,32)-->(21-23,28-30)
 │    │                   ├── union-all
 │    │                   │    ├── columns: c1:21 c2:22 c3:23 c.rowid:25!null d1:28 d2:29 d3:30 d.rowid:32!null
 │    │                   │    ├── left columns: c1:92 c2:93 c3:94 c.rowid:96 d1:99 d2:100 d3:101 d.rowid:103
 │    │                   │    ├── right columns: c1:106 c2:107 c3:108 c.rowid:110 d1:113 d2:114 d3:115 d.rowid:117
 │    │                   │    ├── inner-join (hash)
 │    │                   │    │    ├── columns: c1:92 c2:93 c3:94!null c.rowid:96!null d1:99 d2:100 d3:101!null d.rowid:103!null
 │    │                   │    │    ├── key: (96,103)
 │    │                   │    │    ├── fd: (96)-->(92-94), (103)-->(99-101), (94)==(101), (101)==(94)
 │    │                   │    │    ├── scan c
 │    │                   │    │    │    ├── columns: c1:92 c2:93 c3:94 c.rowid:96!null
 │    │                   │    │    │    ├── key: (96)
 │    │                   │    │    │    └── fd: (96)-->(92-94)
 │    │                   │    │    ├── scan d
 │    │                   │    │    │    ├── columns: d1:99 d2:100 d3:101 d.rowid:103!null
 │    │                   │    │    │    ├── key: (103)
 │    │                   │    │    │    └── fd: (103)-->(99-101)
 │    │                   │    │    └── filters
 │    │                   │    │         └── c3:94 = d3:101 [outer=(94,101), constraints=(/94: (/NULL - ]; /101: (/NULL - ]), fd=(94)==(101), (101)==(94)]
 │    │                   │    └── inner-join (hash)
 │    │                   │         ├── columns: c1:106 c2:107!null c3:108 c.rowid:110!null d1:113 d2:114!null d3:115 d.rowid:117!null
 │    │                   │         ├── key: (110,117)
 │    │                   │         ├── fd: (110)-->(106-108), (117)-->(113-115), (107)==(114), (114)==(107)
 │    │                   │         ├── scan c
 │    │                   │         │    ├── columns: c1:106 c2:107 c3:108 c.rowid:110!null
 │    │                   │         │    ├── key: (110)
 │    │                   │         │    └── fd: (110)-->(106-108)
 │    │                   │         ├── scan d
 │    │                   │         │    ├── columns: d1:113 d2:114 d3:115 d.rowid:117!null
 │    │                   │         │    ├── key: (117)
 │    │                   │         │    └── fd: (117)-->(113-115)
 │    │                   │         └── filters
 │    │                   │              └── c2:107 = d2:114 [outer=(107,114), constraints=(/107: (/NULL - ]; /114: (/NULL - ]), fd=(107)==(114), (114)==(107)]
 │    │                   └── aggregations
 │    │                        ├── const-agg [as=c1:21, outer=(21)]
 │    │                        │    └── c1:21
 │    │                        ├── const-agg [as=c2:22, outer=(22)]
 │    │                        │    └── c2:22
 │    │                        ├── const-agg [as=c3:23, outer=(23)]
 │    │                        │    └── c3:23
 │    │                        ├── const-agg [as=d1:28, outer=(28)]
 │    │                        │    └── d1:28
 │    │                        ├── const-agg [as=d2:29, outer=(29)]
 │    │                        │    └── d2:29
 │    │                        └── const-agg [as=d3:30, outer=(30)]
 │    │                             └── d3:30
 │    └── projections
 │         └── (c1:7, d1:14) [as=column35:35, outer=(7,14)]
 └── filters
      └── (column35:35 = (a1:1, a2:2)) IS NOT false [outer=(1,2,35), immutable]

opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a WHERE (a1, a2) NOT IN (SELECT c1, d1 FROM c, d WHERE c1 IS NULL OR c1 = d1)
----
anti-join (cross)
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── immutable
 ├── key: (1-4)
 ├── scan a
 │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 │    └── key: (1-4)
 ├── project
 │    ├── columns: column21:21
 │    ├── project
 │    │    ├── columns: c1:7 d1:14
 │    │    └── distinct-on
 │    │         ├── columns: c1:7 c.rowid:11!null d1:14 d.rowid:18!null
 │    │         ├── grouping columns: c.rowid:11!null d.rowid:18!null
 │    │         ├── key: (11,18)
 │    │         ├── fd: (11,18)-->(7,14)
 │    │         ├── union-all
 │    │         │    ├── columns: c1:7 c.rowid:11!null d1:14 d.rowid:18!null
 │    │         │    ├── left columns: c1:22 c.rowid:26 d1:29 d.rowid:33
 │    │         │    ├── right columns: c1:36 c.rowid:40 d1:43 d.rowid:47
 │    │         │    ├── inner-join (hash)
 │    │         │    │    ├── columns: c1:22!null c.rowid:26!null d1:29!null d.rowid:33!null
 │    │         │    │    ├── key: (26,33)
 │    │         │    │    ├── fd: (26)-->(22), (33)-->(29), (22)==(29), (29)==(22)
 │    │         │    │    ├── scan c
 │    │         │    │    │    ├── columns: c1:22 c.rowid:26!null
 │    │         │    │    │    ├── key: (26)
 │    │         │    │    │    └── fd: (26)-->(22)
 │    │         │    │    ├── scan d
 │    │         │    │    │    ├── columns: d1:29 d.rowid:33!null
 │    │         │    │    │    ├── key: (33)
 │    │         │    │    │    └── fd: (33)-->(29)
 │    │         │    │    └── filters
 │    │         │    │         └── c1:22 = d1:29 [outer=(22,29), constraints=(/22: (/NULL - ]; /29: (/NULL - ]), fd=(22)==(29), (29)==(22)]
 │    │         │    └── inner-join (cross)
 │    │         │         ├── columns: c1:36 c.rowid:40!null d1:43 d.rowid:47!null
 │    │         │         ├── key: (40,47)
 │    │         │         ├── fd: ()-->(36), (47)-->(43)
 │    │         │         ├── scan d
 │    │         │         │    ├── columns: d1:43 d.rowid:47!null
 │    │         │         │    ├── key: (47)
 │    │         │         │    └── fd: (47)-->(43)
 │    │         │         ├── select
 │    │         │         │    ├── columns: c1:36 c.rowid:40!null
 │    │         │         │    ├── key: (40)
 │    │         │         │    ├── fd: ()-->(36)
 │    │         │         │    ├── scan c
 │    │         │         │    │    ├── columns: c1:36 c.rowid:40!null
 │    │         │         │    │    ├── key: (40)
 │    │         │         │    │    └── fd: (40)-->(36)
 │    │         │         │    └── filters
 │    │         │         │         └── c1:36 IS NULL [outer=(36), constraints=(/36: [/NULL - /NULL]; tight), fd=()-->(36)]
 │    │         │         └── filters (true)
 │    │         └── aggregations
 │    │              ├── const-agg [as=c1:7, outer=(7)]
 │    │              │    └── c1:7
 │    │              └── const-agg [as=d1:14, outer=(14)]
 │    │                   └── d1:14
 │    └── projections
 │         └── (c1:7, d1:14) [as=column21:21, outer=(7,14)]
 └── filters
      └── (column21:21 = (a1:1, a2:2)) IS NOT false [outer=(1,2,21), immutable]

#######################
# Correlated semijoin #
#######################

opt expect=SplitDisjunctionOfJoinTerms
SELECT a1,a2,a3 FROM a WHERE EXISTS (SELECT * FROM b WHERE a2 = b2 OR a3 = b3)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null
 └── distinct-on
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      ├── grouping columns: a1:1!null a2:2!null a3:3!null a4:4!null
      ├── key: (1-4)
      └── union-all
           ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
           ├── left columns: a1:14 a2:15 a3:16 a4:17
           ├── right columns: a1:27 a2:28 a3:29 a4:30
           ├── project
           │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
           │    ├── key: (14-17)
           │    └── inner-join (hash)
           │         ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null b2:21!null
           │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
           │         ├── key: (14,16,17,21)
           │         ├── fd: (15)==(21), (21)==(15)
           │         ├── scan a
           │         │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
           │         │    └── key: (14-17)
           │         ├── distinct-on
           │         │    ├── columns: b2:21
           │         │    ├── grouping columns: b2:21
           │         │    ├── internal-ordering: +21
           │         │    ├── key: (21)
           │         │    └── scan b@b_b2_idx
           │         │         ├── columns: b2:21
           │         │         └── ordering: +21
           │         └── filters
           │              └── a2:15 = b2:21 [outer=(15,21), constraints=(/15: (/NULL - ]; /21: (/NULL - ]), fd=(15)==(21), (21)==(15)]
           └── project
                ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
                ├── key: (27-30)
                └── inner-join (hash)
                     ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null b3:35!null
                     ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
                     ├── key: (27,28,30,35)
                     ├── fd: (29)==(35), (35)==(29)
                     ├── scan a
                     │    ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
                     │    └── key: (27-30)
                     ├── distinct-on
                     │    ├── columns: b3:35
                     │    ├── grouping columns: b3:35
                     │    ├── internal-ordering: +35
                     │    ├── key: (35)
                     │    └── scan b@b_b3_idx
                     │         ├── columns: b3:35
                     │         └── ordering: +35
                     └── filters
                          └── a3:29 = b3:35 [outer=(29,35), constraints=(/29: (/NULL - ]; /35: (/NULL - ]), fd=(29)==(35), (35)==(29)]

opt expect=SplitDisjunctionOfJoinTerms
SELECT a1,a2,a3 FROM a WHERE EXISTS (SELECT * FROM b WHERE a1 = b1 OR a1 = b2)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null
 └── distinct-on
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      ├── grouping columns: a1:1!null a2:2!null a3:3!null a4:4!null
      ├── key: (1-4)
      └── union-all
           ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
           ├── left columns: a1:14 a2:15 a3:16 a4:17
           ├── right columns: a1:27 a2:28 a3:29 a4:30
           ├── project
           │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
           │    ├── key: (14-17)
           │    └── inner-join (merge)
           │         ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null b1:20!null
           │         ├── left ordering: +14
           │         ├── right ordering: +20
           │         ├── key: (15-17,20)
           │         ├── fd: (14)==(20), (20)==(14)
           │         ├── scan a
           │         │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
           │         │    ├── key: (14-17)
           │         │    └── ordering: +14
           │         ├── distinct-on
           │         │    ├── columns: b1:20
           │         │    ├── grouping columns: b1:20
           │         │    ├── key: (20)
           │         │    ├── ordering: +20
           │         │    └── scan b@b_b1_b2_idx
           │         │         ├── columns: b1:20
           │         │         └── ordering: +20
           │         └── filters (true)
           └── project
                ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
                ├── key: (27-30)
                └── inner-join (merge)
                     ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null b2:34!null
                     ├── left ordering: +27
                     ├── right ordering: +34
                     ├── key: (28-30,34)
                     ├── fd: (27)==(34), (34)==(27)
                     ├── scan a
                     │    ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
                     │    ├── key: (27-30)
                     │    └── ordering: +27
                     ├── distinct-on
                     │    ├── columns: b2:34
                     │    ├── grouping columns: b2:34
                     │    ├── key: (34)
                     │    ├── ordering: +34
                     │    └── scan b@b_b2_idx
                     │         ├── columns: b2:34
                     │         └── ordering: +34
                     └── filters (true)

# The left side of the join already produces key columns
opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a WHERE EXISTS (SELECT * FROM b WHERE a1 = b1 OR a2 = b2 OR a3 = b3 OR a4 = b4)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── key: (1-4)
 └── distinct-on
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      ├── grouping columns: a1:1!null a2:2!null a3:3!null a4:4!null
      ├── key: (1-4)
      └── union-all
           ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
           ├── left columns: a1:14 a2:15 a3:16 a4:17
           ├── right columns: a1:27 a2:28 a3:29 a4:30
           ├── project
           │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
           │    ├── key: (14-17)
           │    └── inner-join (merge)
           │         ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null b1:20!null
           │         ├── left ordering: +14
           │         ├── right ordering: +20
           │         ├── key: (15-17,20)
           │         ├── fd: (14)==(20), (20)==(14)
           │         ├── scan a
           │         │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
           │         │    ├── key: (14-17)
           │         │    └── ordering: +14
           │         ├── distinct-on
           │         │    ├── columns: b1:20
           │         │    ├── grouping columns: b1:20
           │         │    ├── key: (20)
           │         │    ├── ordering: +20
           │         │    └── scan b@b_b1_b2_idx
           │         │         ├── columns: b1:20
           │         │         └── ordering: +20
           │         └── filters (true)
           └── project
                ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
                ├── key: (27-30)
                └── distinct-on
                     ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
                     ├── grouping columns: a1:27!null a2:28!null a3:29!null a4:30!null
                     ├── key: (27-30)
                     └── union-all
                          ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
                          ├── left columns: a1:274 a2:275 a3:276 a4:277
                          ├── right columns: a1:287 a2:288 a3:289 a4:290
                          ├── project
                          │    ├── columns: a1:274!null a2:275!null a3:276!null a4:277!null
                          │    ├── key: (274-277)
                          │    └── inner-join (hash)
                          │         ├── columns: a1:274!null a2:275!null a3:276!null a4:277!null b4:283!null
                          │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
                          │         ├── key: (274-276,283)
                          │         ├── fd: (277)==(283), (283)==(277)
                          │         ├── scan a
                          │         │    ├── columns: a1:274!null a2:275!null a3:276!null a4:277!null
                          │         │    └── key: (274-277)
                          │         ├── distinct-on
                          │         │    ├── columns: b4:283
                          │         │    ├── grouping columns: b4:283
                          │         │    ├── key: (283)
                          │         │    └── scan b
                          │         │         └── columns: b4:283
                          │         └── filters
                          │              └── a4:277 = b4:283 [outer=(277,283), constraints=(/277: (/NULL - ]; /283: (/NULL - ]), fd=(277)==(283), (283)==(277)]
                          └── project
                               ├── columns: a1:287!null a2:288!null a3:289!null a4:290!null
                               ├── key: (287-290)
                               └── distinct-on
                                    ├── columns: a1:287!null a2:288!null a3:289!null a4:290!null
                                    ├── grouping columns: a1:287!null a2:288!null a3:289!null a4:290!null
                                    ├── key: (287-290)
                                    └── union-all
                                         ├── columns: a1:287!null a2:288!null a3:289!null a4:290!null
                                         ├── left columns: a1:430 a2:431 a3:432 a4:433
                                         ├── right columns: a1:443 a2:444 a3:445 a4:446
                                         ├── project
                                         │    ├── columns: a1:430!null a2:431!null a3:432!null a4:433!null
                                         │    ├── key: (430-433)
                                         │    └── inner-join (hash)
                                         │         ├── columns: a1:430!null a2:431!null a3:432!null a4:433!null b2:437!null
                                         │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
                                         │         ├── key: (430,432,433,437)
                                         │         ├── fd: (431)==(437), (437)==(431)
                                         │         ├── scan a
                                         │         │    ├── columns: a1:430!null a2:431!null a3:432!null a4:433!null
                                         │         │    └── key: (430-433)
                                         │         ├── distinct-on
                                         │         │    ├── columns: b2:437
                                         │         │    ├── grouping columns: b2:437
                                         │         │    ├── internal-ordering: +437
                                         │         │    ├── key: (437)
                                         │         │    └── scan b@b_b2_idx
                                         │         │         ├── columns: b2:437
                                         │         │         └── ordering: +437
                                         │         └── filters
                                         │              └── a2:431 = b2:437 [outer=(431,437), constraints=(/431: (/NULL - ]; /437: (/NULL - ]), fd=(431)==(437), (437)==(431)]
                                         └── project
                                              ├── columns: a1:443!null a2:444!null a3:445!null a4:446!null
                                              ├── key: (443-446)
                                              └── inner-join (hash)
                                                   ├── columns: a1:443!null a2:444!null a3:445!null a4:446!null b3:451!null
                                                   ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
                                                   ├── key: (443,444,446,451)
                                                   ├── fd: (445)==(451), (451)==(445)
                                                   ├── scan a
                                                   │    ├── columns: a1:443!null a2:444!null a3:445!null a4:446!null
                                                   │    └── key: (443-446)
                                                   ├── distinct-on
                                                   │    ├── columns: b3:451
                                                   │    ├── grouping columns: b3:451
                                                   │    ├── internal-ordering: +451
                                                   │    ├── key: (451)
                                                   │    └── scan b@b_b3_idx
                                                   │         ├── columns: b3:451
                                                   │         └── ordering: +451
                                                   └── filters
                                                        └── a3:445 = b3:451 [outer=(445,451), constraints=(/445: (/NULL - ]; /451: (/NULL - ]), fd=(445)==(451), (451)==(445)]

# More than one disjunction in the filter
opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a WHERE EXISTS (SELECT * FROM c WHERE a1 = c1 OR a2 = c2 OR a3 = c3 OR a4 = c4)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── key: (1-4)
 └── distinct-on
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      ├── grouping columns: a1:1!null a2:2!null a3:3!null a4:4!null
      ├── key: (1-4)
      └── union-all
           ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
           ├── left columns: a1:14 a2:15 a3:16 a4:17
           ├── right columns: a1:27 a2:28 a3:29 a4:30
           ├── project
           │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
           │    ├── key: (14-17)
           │    └── inner-join (hash)
           │         ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null c1:20!null
           │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
           │         ├── key: (15-17,20)
           │         ├── fd: (14)==(20), (20)==(14)
           │         ├── scan a
           │         │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
           │         │    └── key: (14-17)
           │         ├── distinct-on
           │         │    ├── columns: c1:20
           │         │    ├── grouping columns: c1:20
           │         │    ├── key: (20)
           │         │    └── scan c
           │         │         └── columns: c1:20
           │         └── filters
           │              └── a1:14 = c1:20 [outer=(14,20), constraints=(/14: (/NULL - ]; /20: (/NULL - ]), fd=(14)==(20), (20)==(14)]
           └── project
                ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
                ├── key: (27-30)
                └── distinct-on
                     ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
                     ├── grouping columns: a1:27!null a2:28!null a3:29!null a4:30!null
                     ├── key: (27-30)
                     └── union-all
                          ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
                          ├── left columns: a1:274 a2:275 a3:276 a4:277
                          ├── right columns: a1:287 a2:288 a3:289 a4:290
                          ├── project
                          │    ├── columns: a1:274!null a2:275!null a3:276!null a4:277!null
                          │    ├── key: (274-277)
                          │    └── inner-join (hash)
                          │         ├── columns: a1:274!null a2:275!null a3:276!null a4:277!null c4:283!null
                          │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
                          │         ├── key: (274-276,283)
                          │         ├── fd: (277)==(283), (283)==(277)
                          │         ├── scan a
                          │         │    ├── columns: a1:274!null a2:275!null a3:276!null a4:277!null
                          │         │    └── key: (274-277)
                          │         ├── distinct-on
                          │         │    ├── columns: c4:283
                          │         │    ├── grouping columns: c4:283
                          │         │    ├── key: (283)
                          │         │    └── scan c
                          │         │         └── columns: c4:283
                          │         └── filters
                          │              └── a4:277 = c4:283 [outer=(277,283), constraints=(/277: (/NULL - ]; /283: (/NULL - ]), fd=(277)==(283), (283)==(277)]
                          └── project
                               ├── columns: a1:287!null a2:288!null a3:289!null a4:290!null
                               ├── key: (287-290)
                               └── distinct-on
                                    ├── columns: a1:287!null a2:288!null a3:289!null a4:290!null
                                    ├── grouping columns: a1:287!null a2:288!null a3:289!null a4:290!null
                                    ├── key: (287-290)
                                    └── union-all
                                         ├── columns: a1:287!null a2:288!null a3:289!null a4:290!null
                                         ├── left columns: a1:430 a2:431 a3:432 a4:433
                                         ├── right columns: a1:443 a2:444 a3:445 a4:446
                                         ├── project
                                         │    ├── columns: a1:430!null a2:431!null a3:432!null a4:433!null
                                         │    ├── key: (430-433)
                                         │    └── inner-join (hash)
                                         │         ├── columns: a1:430!null a2:431!null a3:432!null a4:433!null c2:437!null
                                         │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
                                         │         ├── key: (430,432,433,437)
                                         │         ├── fd: (431)==(437), (437)==(431)
                                         │         ├── scan a
                                         │         │    ├── columns: a1:430!null a2:431!null a3:432!null a4:433!null
                                         │         │    └── key: (430-433)
                                         │         ├── distinct-on
                                         │         │    ├── columns: c2:437
                                         │         │    ├── grouping columns: c2:437
                                         │         │    ├── key: (437)
                                         │         │    └── scan c
                                         │         │         └── columns: c2:437
                                         │         └── filters
                                         │              └── a2:431 = c2:437 [outer=(431,437), constraints=(/431: (/NULL - ]; /437: (/NULL - ]), fd=(431)==(437), (437)==(431)]
                                         └── project
                                              ├── columns: a1:443!null a2:444!null a3:445!null a4:446!null
                                              ├── key: (443-446)
                                              └── inner-join (hash)
                                                   ├── columns: a1:443!null a2:444!null a3:445!null a4:446!null c3:451!null
                                                   ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
                                                   ├── key: (443,444,446,451)
                                                   ├── fd: (445)==(451), (451)==(445)
                                                   ├── scan a
                                                   │    ├── columns: a1:443!null a2:444!null a3:445!null a4:446!null
                                                   │    └── key: (443-446)
                                                   ├── distinct-on
                                                   │    ├── columns: c3:451
                                                   │    ├── grouping columns: c3:451
                                                   │    ├── key: (451)
                                                   │    └── scan c
                                                   │         └── columns: c3:451
                                                   └── filters
                                                        └── a3:445 = c3:451 [outer=(445,451), constraints=(/445: (/NULL - ]; /451: (/NULL - ]), fd=(445)==(451), (451)==(445)]

# More than one disjunction in the filter
opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a WHERE EXISTS (SELECT * FROM c WHERE a1 = c2 OR a2 = c1 OR a3 = c4 OR a3 = c4)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── key: (1-4)
 └── distinct-on
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      ├── grouping columns: a1:1!null a2:2!null a3:3!null a4:4!null
      ├── key: (1-4)
      └── union-all
           ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
           ├── left columns: a1:14 a2:15 a3:16 a4:17
           ├── right columns: a1:27 a2:28 a3:29 a4:30
           ├── project
           │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
           │    ├── key: (14-17)
           │    └── inner-join (hash)
           │         ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null c2:21!null
           │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
           │         ├── key: (15-17,21)
           │         ├── fd: (14)==(21), (21)==(14)
           │         ├── scan a
           │         │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
           │         │    └── key: (14-17)
           │         ├── distinct-on
           │         │    ├── columns: c2:21
           │         │    ├── grouping columns: c2:21
           │         │    ├── key: (21)
           │         │    └── scan c
           │         │         └── columns: c2:21
           │         └── filters
           │              └── a1:14 = c2:21 [outer=(14,21), constraints=(/14: (/NULL - ]; /21: (/NULL - ]), fd=(14)==(21), (21)==(14)]
           └── project
                ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
                ├── key: (27-30)
                └── distinct-on
                     ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
                     ├── grouping columns: a1:27!null a2:28!null a3:29!null a4:30!null
                     ├── key: (27-30)
                     └── union-all
                          ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
                          ├── left columns: a1:274 a2:275 a3:276 a4:277
                          ├── right columns: a1:287 a2:288 a3:289 a4:290
                          ├── project
                          │    ├── columns: a1:274!null a2:275!null a3:276!null a4:277!null
                          │    ├── key: (274-277)
                          │    └── inner-join (hash)
                          │         ├── columns: a1:274!null a2:275!null a3:276!null a4:277!null c4:283!null
                          │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
                          │         ├── key: (274,275,277,283)
                          │         ├── fd: (276)==(283), (283)==(276)
                          │         ├── scan a
                          │         │    ├── columns: a1:274!null a2:275!null a3:276!null a4:277!null
                          │         │    └── key: (274-277)
                          │         ├── distinct-on
                          │         │    ├── columns: c4:283
                          │         │    ├── grouping columns: c4:283
                          │         │    ├── key: (283)
                          │         │    └── scan c
                          │         │         └── columns: c4:283
                          │         └── filters
                          │              └── a3:276 = c4:283 [outer=(276,283), constraints=(/276: (/NULL - ]; /283: (/NULL - ]), fd=(276)==(283), (283)==(276)]
                          └── project
                               ├── columns: a1:287!null a2:288!null a3:289!null a4:290!null
                               ├── key: (287-290)
                               └── distinct-on
                                    ├── columns: a1:287!null a2:288!null a3:289!null a4:290!null
                                    ├── grouping columns: a1:287!null a2:288!null a3:289!null a4:290!null
                                    ├── key: (287-290)
                                    └── union-all
                                         ├── columns: a1:287!null a2:288!null a3:289!null a4:290!null
                                         ├── left columns: a1:430 a2:431 a3:432 a4:433
                                         ├── right columns: a1:443 a2:444 a3:445 a4:446
                                         ├── project
                                         │    ├── columns: a1:430!null a2:431!null a3:432!null a4:433!null
                                         │    ├── key: (430-433)
                                         │    └── inner-join (hash)
                                         │         ├── columns: a1:430!null a2:431!null a3:432!null a4:433!null c1:436!null
                                         │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
                                         │         ├── key: (430,432,433,436)
                                         │         ├── fd: (431)==(436), (436)==(431)
                                         │         ├── scan a
                                         │         │    ├── columns: a1:430!null a2:431!null a3:432!null a4:433!null
                                         │         │    └── key: (430-433)
                                         │         ├── distinct-on
                                         │         │    ├── columns: c1:436
                                         │         │    ├── grouping columns: c1:436
                                         │         │    ├── key: (436)
                                         │         │    └── scan c
                                         │         │         └── columns: c1:436
                                         │         └── filters
                                         │              └── a2:431 = c1:436 [outer=(431,436), constraints=(/431: (/NULL - ]; /436: (/NULL - ]), fd=(431)==(436), (436)==(431)]
                                         └── project
                                              ├── columns: a1:443!null a2:444!null a3:445!null a4:446!null
                                              ├── key: (443-446)
                                              └── inner-join (hash)
                                                   ├── columns: a1:443!null a2:444!null a3:445!null a4:446!null c4:452!null
                                                   ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
                                                   ├── key: (443,444,446,452)
                                                   ├── fd: (445)==(452), (452)==(445)
                                                   ├── scan a
                                                   │    ├── columns: a1:443!null a2:444!null a3:445!null a4:446!null
                                                   │    └── key: (443-446)
                                                   ├── distinct-on
                                                   │    ├── columns: c4:452
                                                   │    ├── grouping columns: c4:452
                                                   │    ├── key: (452)
                                                   │    └── scan c
                                                   │         └── columns: c4:452
                                                   └── filters
                                                        └── a3:445 = c4:452 [outer=(445,452), constraints=(/445: (/NULL - ]; /452: (/NULL - ]), fd=(445)==(452), (452)==(445)]

# IN subquery
opt expect=SplitDisjunctionOfJoinTerms
SELECT a1+a3-a2 FROM a WHERE a1 IN (SELECT b1 FROM b WHERE EXISTS (SELECT 1 FROM c WHERE c2 IS NULL OR c2=b2 OR c2=b3))
----
project
 ├── columns: "?column?":22!null
 ├── immutable
 ├── project
 │    ├── columns: a1:1!null a2:2!null a3:3!null
 │    └── inner-join (hash)
 │         ├── columns: a1:1!null a2:2!null a3:3!null b1:7!null
 │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │         ├── fd: (1)==(7), (7)==(1)
 │         ├── scan a
 │         │    └── columns: a1:1!null a2:2!null a3:3!null
 │         ├── distinct-on
 │         │    ├── columns: b1:7
 │         │    ├── grouping columns: b1:7
 │         │    ├── key: (7)
 │         │    └── project
 │         │         ├── columns: b1:7 b2:8 b3:9
 │         │         └── distinct-on
 │         │              ├── columns: b1:7 b2:8 b3:9 b.rowid:11!null
 │         │              ├── grouping columns: b.rowid:11!null
 │         │              ├── key: (11)
 │         │              ├── fd: (11)-->(7-9)
 │         │              ├── union-all
 │         │              │    ├── columns: b1:7 b2:8 b3:9 b.rowid:11!null
 │         │              │    ├── left columns: b1:23 b2:24 b3:25 b.rowid:27
 │         │              │    ├── right columns: b1:37 b2:38 b3:39 b.rowid:41
 │         │              │    ├── project
 │         │              │    │    ├── columns: b1:23 b2:24 b3:25 b.rowid:27!null
 │         │              │    │    ├── key: (27)
 │         │              │    │    ├── fd: (27)-->(23-25)
 │         │              │    │    └── inner-join (hash)
 │         │              │    │         ├── columns: b1:23 b2:24!null b3:25 b.rowid:27!null c2:31!null
 │         │              │    │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │         │              │    │         ├── key: (27)
 │         │              │    │         ├── fd: (27)-->(23-25), (24)==(31), (31)==(24)
 │         │              │    │         ├── scan b
 │         │              │    │         │    ├── columns: b1:23 b2:24 b3:25 b.rowid:27!null
 │         │              │    │         │    ├── key: (27)
 │         │              │    │         │    └── fd: (27)-->(23-25)
 │         │              │    │         ├── distinct-on
 │         │              │    │         │    ├── columns: c2:31
 │         │              │    │         │    ├── grouping columns: c2:31
 │         │              │    │         │    ├── key: (31)
 │         │              │    │         │    └── scan c
 │         │              │    │         │         └── columns: c2:31
 │         │              │    │         └── filters
 │         │              │    │              └── c2:31 = b2:24 [outer=(24,31), constraints=(/24: (/NULL - ]; /31: (/NULL - ]), fd=(24)==(31), (31)==(24)]
 │         │              │    └── project
 │         │              │         ├── columns: b1:37 b2:38 b3:39 b.rowid:41!null
 │         │              │         ├── key: (41)
 │         │              │         ├── fd: (41)-->(37-39)
 │         │              │         └── distinct-on
 │         │              │              ├── columns: b1:37 b2:38 b3:39 b.rowid:41!null
 │         │              │              ├── grouping columns: b.rowid:41!null
 │         │              │              ├── key: (41)
 │         │              │              ├── fd: (41)-->(37-39)
 │         │              │              ├── union-all
 │         │              │              │    ├── columns: b1:37 b2:38 b3:39 b.rowid:41!null
 │         │              │              │    ├── left columns: b1:191 b2:192 b3:193 b.rowid:195
 │         │              │              │    ├── right columns: b1:205 b2:206 b3:207 b.rowid:209
 │         │              │              │    ├── project
 │         │              │              │    │    ├── columns: b1:191 b2:192 b3:193 b.rowid:195!null
 │         │              │              │    │    ├── key: (195)
 │         │              │              │    │    ├── fd: (195)-->(191-193)
 │         │              │              │    │    └── inner-join (hash)
 │         │              │              │    │         ├── columns: b1:191 b2:192 b3:193!null b.rowid:195!null c2:199!null
 │         │              │              │    │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │         │              │              │    │         ├── key: (195)
 │         │              │              │    │         ├── fd: (195)-->(191-193), (193)==(199), (199)==(193)
 │         │              │              │    │         ├── scan b
 │         │              │              │    │         │    ├── columns: b1:191 b2:192 b3:193 b.rowid:195!null
 │         │              │              │    │         │    ├── key: (195)
 │         │              │              │    │         │    └── fd: (195)-->(191-193)
 │         │              │              │    │         ├── distinct-on
 │         │              │              │    │         │    ├── columns: c2:199
 │         │              │              │    │         │    ├── grouping columns: c2:199
 │         │              │              │    │         │    ├── key: (199)
 │         │              │              │    │         │    └── scan c
 │         │              │              │    │         │         └── columns: c2:199
 │         │              │              │    │         └── filters
 │         │              │              │    │              └── c2:199 = b3:193 [outer=(193,199), constraints=(/193: (/NULL - ]; /199: (/NULL - ]), fd=(193)==(199), (199)==(193)]
 │         │              │              │    └── project
 │         │              │              │         ├── columns: b1:205 b2:206 b3:207 b.rowid:209!null
 │         │              │              │         ├── key: (209)
 │         │              │              │         ├── fd: (209)-->(205-207)
 │         │              │              │         └── project
 │         │              │              │              ├── columns: b1:205 b2:206 b3:207 b.rowid:209!null
 │         │              │              │              ├── key: (209)
 │         │              │              │              ├── fd: (209)-->(205-207)
 │         │              │              │              └── inner-join (cross)
 │         │              │              │                   ├── columns: b1:205 b2:206 b3:207 b.rowid:209!null c2:213
 │         │              │              │                   ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │         │              │              │                   ├── key: (209)
 │         │              │              │                   ├── fd: ()-->(213), (209)-->(205-207)
 │         │              │              │                   ├── scan b
 │         │              │              │                   │    ├── columns: b1:205 b2:206 b3:207 b.rowid:209!null
 │         │              │              │                   │    ├── key: (209)
 │         │              │              │                   │    └── fd: (209)-->(205-207)
 │         │              │              │                   ├── limit
 │         │              │              │                   │    ├── columns: c2:213
 │         │              │              │                   │    ├── cardinality: [0 - 1]
 │         │              │              │                   │    ├── key: ()
 │         │              │              │                   │    ├── fd: ()-->(213)
 │         │              │              │                   │    ├── select
 │         │              │              │                   │    │    ├── columns: c2:213
 │         │              │              │                   │    │    ├── fd: ()-->(213)
 │         │              │              │                   │    │    ├── limit hint: 1.00
 │         │              │              │                   │    │    ├── scan c
 │         │              │              │                   │    │    │    ├── columns: c2:213
 │         │              │              │                   │    │    │    └── limit hint: 100.00
 │         │              │              │                   │    │    └── filters
 │         │              │              │                   │    │         └── c2:213 IS NULL [outer=(213), constraints=(/213: [/NULL - /NULL]; tight), fd=()-->(213)]
 │         │              │              │                   │    └── 1
 │         │              │              │                   └── filters (true)
 │         │              │              └── aggregations
 │         │              │                   ├── const-agg [as=b1:37, outer=(37)]
 │         │              │                   │    └── b1:37
 │         │              │                   ├── const-agg [as=b2:38, outer=(38)]
 │         │              │                   │    └── b2:38
 │         │              │                   └── const-agg [as=b3:39, outer=(39)]
 │         │              │                        └── b3:39
 │         │              └── aggregations
 │         │                   ├── const-agg [as=b1:7, outer=(7)]
 │         │                   │    └── b1:7
 │         │                   ├── const-agg [as=b2:8, outer=(8)]
 │         │                   │    └── b2:8
 │         │                   └── const-agg [as=b3:9, outer=(9)]
 │         │                        └── b3:9
 │         └── filters
 │              └── a1:1 = b1:7 [outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
 └── projections
      └── (a1:1 + a3:3) - a2:2 [as="?column?":22, outer=(1-3), immutable]

# IN subquery, 2 columns
opt expect=SplitDisjunctionOfJoinTerms
SELECT a1+a3-a2 FROM a WHERE (a1,a2) IN (SELECT b1,b2 FROM b WHERE
                                            EXISTS (SELECT 1 FROM c WHERE c2 IS NULL OR c2=b2 OR c2=b3))
----
project
 ├── columns: "?column?":23!null
 ├── immutable
 ├── semi-join (hash)
 │    ├── columns: a1:1!null a2:2!null a3:3!null
 │    ├── scan a
 │    │    └── columns: a1:1!null a2:2!null a3:3!null
 │    ├── project
 │    │    ├── columns: b1:7 b2:8 b3:9
 │    │    └── distinct-on
 │    │         ├── columns: b1:7 b2:8 b3:9 b.rowid:11!null
 │    │         ├── grouping columns: b.rowid:11!null
 │    │         ├── key: (11)
 │    │         ├── fd: (11)-->(7-9)
 │    │         ├── union-all
 │    │         │    ├── columns: b1:7 b2:8 b3:9 b.rowid:11!null
 │    │         │    ├── left columns: b1:24 b2:25 b3:26 b.rowid:28
 │    │         │    ├── right columns: b1:38 b2:39 b3:40 b.rowid:42
 │    │         │    ├── project
 │    │         │    │    ├── columns: b1:24 b2:25 b3:26 b.rowid:28!null
 │    │         │    │    ├── key: (28)
 │    │         │    │    ├── fd: (28)-->(24-26)
 │    │         │    │    └── inner-join (hash)
 │    │         │    │         ├── columns: b1:24 b2:25!null b3:26 b.rowid:28!null c2:32!null
 │    │         │    │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │    │         │    │         ├── key: (28)
 │    │         │    │         ├── fd: (28)-->(24-26), (25)==(32), (32)==(25)
 │    │         │    │         ├── scan b
 │    │         │    │         │    ├── columns: b1:24 b2:25 b3:26 b.rowid:28!null
 │    │         │    │         │    ├── key: (28)
 │    │         │    │         │    └── fd: (28)-->(24-26)
 │    │         │    │         ├── distinct-on
 │    │         │    │         │    ├── columns: c2:32
 │    │         │    │         │    ├── grouping columns: c2:32
 │    │         │    │         │    ├── key: (32)
 │    │         │    │         │    └── scan c
 │    │         │    │         │         └── columns: c2:32
 │    │         │    │         └── filters
 │    │         │    │              └── c2:32 = b2:25 [outer=(25,32), constraints=(/25: (/NULL - ]; /32: (/NULL - ]), fd=(25)==(32), (32)==(25)]
 │    │         │    └── project
 │    │         │         ├── columns: b1:38 b2:39 b3:40 b.rowid:42!null
 │    │         │         ├── key: (42)
 │    │         │         ├── fd: (42)-->(38-40)
 │    │         │         └── distinct-on
 │    │         │              ├── columns: b1:38 b2:39 b3:40 b.rowid:42!null
 │    │         │              ├── grouping columns: b.rowid:42!null
 │    │         │              ├── key: (42)
 │    │         │              ├── fd: (42)-->(38-40)
 │    │         │              ├── union-all
 │    │         │              │    ├── columns: b1:38 b2:39 b3:40 b.rowid:42!null
 │    │         │              │    ├── left columns: b1:192 b2:193 b3:194 b.rowid:196
 │    │         │              │    ├── right columns: b1:206 b2:207 b3:208 b.rowid:210
 │    │         │              │    ├── project
 │    │         │              │    │    ├── columns: b1:192 b2:193 b3:194 b.rowid:196!null
 │    │         │              │    │    ├── key: (196)
 │    │         │              │    │    ├── fd: (196)-->(192-194)
 │    │         │              │    │    └── inner-join (hash)
 │    │         │              │    │         ├── columns: b1:192 b2:193 b3:194!null b.rowid:196!null c2:200!null
 │    │         │              │    │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │    │         │              │    │         ├── key: (196)
 │    │         │              │    │         ├── fd: (196)-->(192-194), (194)==(200), (200)==(194)
 │    │         │              │    │         ├── scan b
 │    │         │              │    │         │    ├── columns: b1:192 b2:193 b3:194 b.rowid:196!null
 │    │         │              │    │         │    ├── key: (196)
 │    │         │              │    │         │    └── fd: (196)-->(192-194)
 │    │         │              │    │         ├── distinct-on
 │    │         │              │    │         │    ├── columns: c2:200
 │    │         │              │    │         │    ├── grouping columns: c2:200
 │    │         │              │    │         │    ├── key: (200)
 │    │         │              │    │         │    └── scan c
 │    │         │              │    │         │         └── columns: c2:200
 │    │         │              │    │         └── filters
 │    │         │              │    │              └── c2:200 = b3:194 [outer=(194,200), constraints=(/194: (/NULL - ]; /200: (/NULL - ]), fd=(194)==(200), (200)==(194)]
 │    │         │              │    └── project
 │    │         │              │         ├── columns: b1:206 b2:207 b3:208 b.rowid:210!null
 │    │         │              │         ├── key: (210)
 │    │         │              │         ├── fd: (210)-->(206-208)
 │    │         │              │         └── project
 │    │         │              │              ├── columns: b1:206 b2:207 b3:208 b.rowid:210!null
 │    │         │              │              ├── key: (210)
 │    │         │              │              ├── fd: (210)-->(206-208)
 │    │         │              │              └── inner-join (cross)
 │    │         │              │                   ├── columns: b1:206 b2:207 b3:208 b.rowid:210!null c2:214
 │    │         │              │                   ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │    │         │              │                   ├── key: (210)
 │    │         │              │                   ├── fd: ()-->(214), (210)-->(206-208)
 │    │         │              │                   ├── scan b
 │    │         │              │                   │    ├── columns: b1:206 b2:207 b3:208 b.rowid:210!null
 │    │         │              │                   │    ├── key: (210)
 │    │         │              │                   │    └── fd: (210)-->(206-208)
 │    │         │              │                   ├── limit
 │    │         │              │                   │    ├── columns: c2:214
 │    │         │              │                   │    ├── cardinality: [0 - 1]
 │    │         │              │                   │    ├── key: ()
 │    │         │              │                   │    ├── fd: ()-->(214)
 │    │         │              │                   │    ├── select
 │    │         │              │                   │    │    ├── columns: c2:214
 │    │         │              │                   │    │    ├── fd: ()-->(214)
 │    │         │              │                   │    │    ├── limit hint: 1.00
 │    │         │              │                   │    │    ├── scan c
 │    │         │              │                   │    │    │    ├── columns: c2:214
 │    │         │              │                   │    │    │    └── limit hint: 100.00
 │    │         │              │                   │    │    └── filters
 │    │         │              │                   │    │         └── c2:214 IS NULL [outer=(214), constraints=(/214: [/NULL - /NULL]; tight), fd=()-->(214)]
 │    │         │              │                   │    └── 1
 │    │         │              │                   └── filters (true)
 │    │         │              └── aggregations
 │    │         │                   ├── const-agg [as=b1:38, outer=(38)]
 │    │         │                   │    └── b1:38
 │    │         │                   ├── const-agg [as=b2:39, outer=(39)]
 │    │         │                   │    └── b2:39
 │    │         │                   └── const-agg [as=b3:40, outer=(40)]
 │    │         │                        └── b3:40
 │    │         └── aggregations
 │    │              ├── const-agg [as=b1:7, outer=(7)]
 │    │              │    └── b1:7
 │    │              ├── const-agg [as=b2:8, outer=(8)]
 │    │              │    └── b2:8
 │    │              └── const-agg [as=b3:9, outer=(9)]
 │    │                   └── b3:9
 │    └── filters
 │         ├── b1:7 = a1:1 [outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
 │         └── b2:8 = a2:2 [outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ]), fd=(2)==(8), (8)==(2)]
 └── projections
      └── (a1:1 + a3:3) - a2:2 [as="?column?":23, outer=(1-3), immutable]

# ANDed disjuncts
opt expect=SplitDisjunctionOfJoinTerms
SELECT a1,a2,a3,c.* FROM a,c
       WHERE a2 = c2 AND EXISTS (SELECT * FROM b WHERE (a1 = b1 OR a1 = a2) AND (a1 = c1 OR c1 = c2))
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null c1:7!null c2:8!null c3:9 c4:10
 ├── fd: (2)==(8), (8)==(2)
 └── group-by (hash)
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null c1:7!null c2:8!null c3:9 c4:10 c.rowid:11!null
      ├── grouping columns: a1:1!null a3:3!null a4:4!null c.rowid:11!null
      ├── key: (1,3,4,11)
      ├── fd: (11)-->(7-10), (2)==(8), (8)==(2), (1,3,4,11)-->(2,7-10)
      ├── inner-join (cross)
      │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null c1:7!null c2:8!null c3:9 c4:10 c.rowid:11!null b1:14
      │    ├── fd: (11)-->(7-10), (2)==(8), (8)==(2)
      │    ├── scan b
      │    │    └── columns: b1:14
      │    ├── inner-join (hash)
      │    │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null c1:7!null c2:8!null c3:9 c4:10 c.rowid:11!null
      │    │    ├── key: (1,3,4,11)
      │    │    ├── fd: (11)-->(7-10), (2)==(8), (8)==(2)
      │    │    ├── scan a
      │    │    │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      │    │    │    └── key: (1-4)
      │    │    ├── scan c
      │    │    │    ├── columns: c1:7 c2:8 c3:9 c4:10 c.rowid:11!null
      │    │    │    ├── key: (11)
      │    │    │    └── fd: (11)-->(7-10)
      │    │    └── filters
      │    │         ├── (a1:1 = c1:7) OR (c1:7 = c2:8) [outer=(1,7,8), constraints=(/7: (/NULL - ])]
      │    │         └── a2:2 = c2:8 [outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ]), fd=(2)==(8), (8)==(2)]
      │    └── filters
      │         └── (a1:1 = b1:14) OR (a1:1 = a2:2) [outer=(1,2,14), constraints=(/1: (/NULL - ])]
      └── aggregations
           ├── const-agg [as=c1:7, outer=(7)]
           │    └── c1:7
           ├── const-agg [as=c2:8, outer=(8)]
           │    └── c2:8
           ├── const-agg [as=c3:9, outer=(9)]
           │    └── c3:9
           ├── const-agg [as=c4:10, outer=(10)]
           │    └── c4:10
           └── const-agg [as=a2:2, outer=(2)]
                └── a2:2

opt expect=SplitDisjunctionOfJoinTerms
SELECT a1,a2,a3,c.* FROM a,c
       WHERE a2 = c2 AND EXISTS (SELECT * FROM b WHERE (a1 = b1 OR a1 = b2) AND (c1 = b1 OR c1 = b2))
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null c1:7!null c2:8!null c3:9 c4:10
 ├── fd: (2)==(8), (8)==(2)
 └── group-by (hash)
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null c1:7!null c2:8!null c3:9 c4:10 c.rowid:11!null
      ├── grouping columns: a1:1!null a3:3!null a4:4!null c.rowid:11!null
      ├── key: (1,3,4,11)
      ├── fd: (11)-->(7-10), (2)==(8), (8)==(2), (1,3,4,11)-->(2,7-10)
      ├── inner-join (hash)
      │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null c1:7!null c2:8!null c3:9 c4:10 c.rowid:11!null b1:14 b2:15 b.rowid:18!null
      │    ├── key: (1,3,4,11,18)
      │    ├── fd: (11,18)-->(7-10,14,15), (2)==(8), (8)==(2)
      │    ├── scan a
      │    │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      │    │    └── key: (1-4)
      │    ├── distinct-on
      │    │    ├── columns: c1:7!null c2:8 c3:9 c4:10 c.rowid:11!null b1:14 b2:15 b.rowid:18!null
      │    │    ├── grouping columns: c.rowid:11!null b.rowid:18!null
      │    │    ├── key: (11,18)
      │    │    ├── fd: (11,18)-->(7-10,14,15)
      │    │    ├── union-all
      │    │    │    ├── columns: c1:7!null c2:8 c3:9 c4:10 c.rowid:11!null b1:14 b2:15 b.rowid:18!null
      │    │    │    ├── left columns: c1:24 c2:25 c3:26 c4:27 c.rowid:28 b1:31 b2:32 b.rowid:35
      │    │    │    ├── right columns: c1:38 c2:39 c3:40 c4:41 c.rowid:42 b1:45 b2:46 b.rowid:49
      │    │    │    ├── inner-join (hash)
      │    │    │    │    ├── columns: c1:24!null c2:25 c3:26 c4:27 c.rowid:28!null b1:31!null b2:32 b.rowid:35!null
      │    │    │    │    ├── key: (28,35)
      │    │    │    │    ├── fd: (28)-->(24-27), (35)-->(31,32), (24)==(31), (31)==(24)
      │    │    │    │    ├── scan c
      │    │    │    │    │    ├── columns: c1:24 c2:25 c3:26 c4:27 c.rowid:28!null
      │    │    │    │    │    ├── key: (28)
      │    │    │    │    │    └── fd: (28)-->(24-27)
      │    │    │    │    ├── scan b
      │    │    │    │    │    ├── columns: b1:31 b2:32 b.rowid:35!null
      │    │    │    │    │    ├── key: (35)
      │    │    │    │    │    └── fd: (35)-->(31,32)
      │    │    │    │    └── filters
      │    │    │    │         └── c1:24 = b1:31 [outer=(24,31), constraints=(/24: (/NULL - ]; /31: (/NULL - ]), fd=(24)==(31), (31)==(24)]
      │    │    │    └── inner-join (hash)
      │    │    │         ├── columns: c1:38!null c2:39 c3:40 c4:41 c.rowid:42!null b1:45 b2:46!null b.rowid:49!null
      │    │    │         ├── key: (42,49)
      │    │    │         ├── fd: (42)-->(38-41), (49)-->(45,46), (38)==(46), (46)==(38)
      │    │    │         ├── scan c
      │    │    │         │    ├── columns: c1:38 c2:39 c3:40 c4:41 c.rowid:42!null
      │    │    │         │    ├── key: (42)
      │    │    │         │    └── fd: (42)-->(38-41)
      │    │    │         ├── scan b
      │    │    │         │    ├── columns: b1:45 b2:46 b.rowid:49!null
      │    │    │         │    ├── key: (49)
      │    │    │         │    └── fd: (49)-->(45,46)
      │    │    │         └── filters
      │    │    │              └── c1:38 = b2:46 [outer=(38,46), constraints=(/38: (/NULL - ]; /46: (/NULL - ]), fd=(38)==(46), (46)==(38)]
      │    │    └── aggregations
      │    │         ├── const-agg [as=c1:7, outer=(7)]
      │    │         │    └── c1:7
      │    │         ├── const-agg [as=c2:8, outer=(8)]
      │    │         │    └── c2:8
      │    │         ├── const-agg [as=c3:9, outer=(9)]
      │    │         │    └── c3:9
      │    │         ├── const-agg [as=c4:10, outer=(10)]
      │    │         │    └── c4:10
      │    │         ├── const-agg [as=b1:14, outer=(14)]
      │    │         │    └── b1:14
      │    │         └── const-agg [as=b2:15, outer=(15)]
      │    │              └── b2:15
      │    └── filters
      │         ├── (a1:1 = b1:14) OR (a1:1 = b2:15) [outer=(1,14,15), constraints=(/1: (/NULL - ])]
      │         └── a2:2 = c2:8 [outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ]), fd=(2)==(8), (8)==(2)]
      └── aggregations
           ├── const-agg [as=c1:7, outer=(7)]
           │    └── c1:7
           ├── const-agg [as=c2:8, outer=(8)]
           │    └── c2:8
           ├── const-agg [as=c3:9, outer=(9)]
           │    └── c3:9
           ├── const-agg [as=c4:10, outer=(10)]
           │    └── c4:10
           └── const-agg [as=a2:2, outer=(2)]
                └── a2:2

opt expect=SplitDisjunctionOfJoinTerms
SELECT a1,a2,a3,c.* FROM a,c
       WHERE a2 = c2 AND EXISTS (SELECT * FROM b WHERE (a1 = b1 OR a1 = b3) AND (a1 = c1 OR a1 = c3))
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null c1:7 c2:8!null c3:9 c4:10
 ├── fd: (2)==(8), (8)==(2)
 └── group-by (hash)
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null c1:7 c2:8!null c3:9 c4:10 c.rowid:11!null
      ├── grouping columns: a1:1!null a3:3!null a4:4!null c.rowid:11!null
      ├── key: (1,3,4,11)
      ├── fd: (11)-->(7-10), (2)==(8), (8)==(2), (1,3,4,11)-->(2,7-10)
      ├── inner-join (cross)
      │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null c1:7 c2:8!null c3:9 c4:10 c.rowid:11!null b1:14 b3:16
      │    ├── fd: (11)-->(7-10), (2)==(8), (8)==(2)
      │    ├── scan b
      │    │    └── columns: b1:14 b3:16
      │    ├── inner-join (hash)
      │    │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null c1:7 c2:8!null c3:9 c4:10 c.rowid:11!null
      │    │    ├── key: (1,3,4,11)
      │    │    ├── fd: (11)-->(7-10), (2)==(8), (8)==(2)
      │    │    ├── scan a
      │    │    │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      │    │    │    └── key: (1-4)
      │    │    ├── scan c
      │    │    │    ├── columns: c1:7 c2:8 c3:9 c4:10 c.rowid:11!null
      │    │    │    ├── key: (11)
      │    │    │    └── fd: (11)-->(7-10)
      │    │    └── filters
      │    │         ├── (a1:1 = c1:7) OR (a1:1 = c3:9) [outer=(1,7,9), constraints=(/1: (/NULL - ])]
      │    │         └── a2:2 = c2:8 [outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ]), fd=(2)==(8), (8)==(2)]
      │    └── filters
      │         └── (a1:1 = b1:14) OR (a1:1 = b3:16) [outer=(1,14,16), constraints=(/1: (/NULL - ])]
      └── aggregations
           ├── const-agg [as=c1:7, outer=(7)]
           │    └── c1:7
           ├── const-agg [as=c2:8, outer=(8)]
           │    └── c2:8
           ├── const-agg [as=c3:9, outer=(9)]
           │    └── c3:9
           ├── const-agg [as=c4:10, outer=(10)]
           │    └── c4:10
           └── const-agg [as=a2:2, outer=(2)]
                └── a2:2

# Nested EXISTS
opt expect=SplitDisjunctionOfJoinTerms
SELECT a2,a4 FROM a WHERE EXISTS(SELECT * FROM b WHERE (a1=b1 OR a1=b2) AND EXISTS(SELECT 1 FROM c WHERE b1=c1))
----
project
 ├── columns: a2:2!null a4:4!null
 └── project
      ├── columns: a1:1!null a2:2!null a4:4!null
      └── distinct-on
           ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
           ├── grouping columns: a1:1!null a2:2!null a3:3!null a4:4!null
           ├── key: (1-4)
           └── inner-join (hash)
                ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b1:7!null b2:8 b.rowid:11!null c1:14!null
                ├── multiplicity: left-rows(zero-or-more), right-rows(zero-or-one)
                ├── key: (1-4,11)
                ├── fd: (1-4,11)-->(7,8), (7)==(14), (14)==(7)
                ├── distinct-on
                │    ├── columns: c1:14
                │    ├── grouping columns: c1:14
                │    ├── key: (14)
                │    └── scan c
                │         └── columns: c1:14
                ├── distinct-on
                │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b1:7 b2:8 b.rowid:11!null
                │    ├── grouping columns: a1:1!null a2:2!null a3:3!null a4:4!null b.rowid:11!null
                │    ├── key: (1-4,11)
                │    ├── fd: (1-4,11)-->(7,8)
                │    ├── union-all
                │    │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b1:7 b2:8 b.rowid:11!null
                │    │    ├── left columns: a1:22 a2:23 a3:24 a4:25 b1:28 b2:29 b.rowid:32
                │    │    ├── right columns: a1:35 a2:36 a3:37 a4:38 b1:41 b2:42 b.rowid:45
                │    │    ├── inner-join (merge)
                │    │    │    ├── columns: a1:22!null a2:23!null a3:24!null a4:25!null b1:28!null b2:29 b.rowid:32!null
                │    │    │    ├── left ordering: +22
                │    │    │    ├── right ordering: +28
                │    │    │    ├── key: (23-25,32)
                │    │    │    ├── fd: (32)-->(28,29), (22)==(28), (28)==(22)
                │    │    │    ├── scan a
                │    │    │    │    ├── columns: a1:22!null a2:23!null a3:24!null a4:25!null
                │    │    │    │    ├── key: (22-25)
                │    │    │    │    └── ordering: +22
                │    │    │    ├── scan b@b_b1_b2_idx
                │    │    │    │    ├── columns: b1:28 b2:29 b.rowid:32!null
                │    │    │    │    ├── key: (32)
                │    │    │    │    ├── fd: (32)-->(28,29)
                │    │    │    │    └── ordering: +28
                │    │    │    └── filters (true)
                │    │    └── inner-join (merge)
                │    │         ├── columns: a1:35!null a2:36!null a3:37!null a4:38!null b1:41 b2:42!null b.rowid:45!null
                │    │         ├── left ordering: +35
                │    │         ├── right ordering: +42
                │    │         ├── key: (36-38,45)
                │    │         ├── fd: (45)-->(41,42), (35)==(42), (42)==(35)
                │    │         ├── scan a
                │    │         │    ├── columns: a1:35!null a2:36!null a3:37!null a4:38!null
                │    │         │    ├── key: (35-38)
                │    │         │    └── ordering: +35
                │    │         ├── scan b@b_b2_idx
                │    │         │    ├── columns: b1:41 b2:42 b.rowid:45!null
                │    │         │    ├── key: (45)
                │    │         │    ├── fd: (45)-->(41,42)
                │    │         │    └── ordering: +42
                │    │         └── filters (true)
                │    └── aggregations
                │         ├── const-agg [as=b1:7, outer=(7)]
                │         │    └── b1:7
                │         └── const-agg [as=b2:8, outer=(8)]
                │              └── b2:8
                └── filters
                     └── b1:7 = c1:14 [outer=(7,14), constraints=(/7: (/NULL - ]; /14: (/NULL - ]), fd=(7)==(14), (14)==(7)]

# Two EXISTS at same nesting level; only one disjuction pair can be optimized
opt expect=SplitDisjunctionOfJoinTerms
SELECT a2,a4 FROM a WHERE EXISTS(SELECT * FROM b WHERE a1=b1 OR a1=b2) AND
                          EXISTS(SELECT * FROM c WHERE a1=c1 OR a1=c2)
----
project
 ├── columns: a2:2!null a4:4!null
 └── semi-join (cross)
      ├── columns: a1:1!null a2:2!null a4:4!null
      ├── project
      │    ├── columns: a1:1!null a2:2!null a4:4!null
      │    └── distinct-on
      │         ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      │         ├── grouping columns: a1:1!null a2:2!null a3:3!null a4:4!null
      │         ├── key: (1-4)
      │         └── union-all
      │              ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      │              ├── left columns: a1:100 a2:101 a3:102 a4:103
      │              ├── right columns: a1:113 a2:114 a3:115 a4:116
      │              ├── project
      │              │    ├── columns: a1:100!null a2:101!null a3:102!null a4:103!null
      │              │    ├── key: (100-103)
      │              │    └── inner-join (merge)
      │              │         ├── columns: a1:100!null a2:101!null a3:102!null a4:103!null b1:106!null
      │              │         ├── left ordering: +100
      │              │         ├── right ordering: +106
      │              │         ├── key: (101-103,106)
      │              │         ├── fd: (100)==(106), (106)==(100)
      │              │         ├── scan a
      │              │         │    ├── columns: a1:100!null a2:101!null a3:102!null a4:103!null
      │              │         │    ├── key: (100-103)
      │              │         │    └── ordering: +100
      │              │         ├── distinct-on
      │              │         │    ├── columns: b1:106
      │              │         │    ├── grouping columns: b1:106
      │              │         │    ├── key: (106)
      │              │         │    ├── ordering: +106
      │              │         │    └── scan b@b_b1_b2_idx
      │              │         │         ├── columns: b1:106
      │              │         │         └── ordering: +106
      │              │         └── filters (true)
      │              └── project
      │                   ├── columns: a1:113!null a2:114!null a3:115!null a4:116!null
      │                   ├── key: (113-116)
      │                   └── inner-join (merge)
      │                        ├── columns: a1:113!null a2:114!null a3:115!null a4:116!null b2:120!null
      │                        ├── left ordering: +113
      │                        ├── right ordering: +120
      │                        ├── key: (114-116,120)
      │                        ├── fd: (113)==(120), (120)==(113)
      │                        ├── scan a
      │                        │    ├── columns: a1:113!null a2:114!null a3:115!null a4:116!null
      │                        │    ├── key: (113-116)
      │                        │    └── ordering: +113
      │                        ├── distinct-on
      │                        │    ├── columns: b2:120
      │                        │    ├── grouping columns: b2:120
      │                        │    ├── key: (120)
      │                        │    ├── ordering: +120
      │                        │    └── scan b@b_b2_idx
      │                        │         ├── columns: b2:120
      │                        │         └── ordering: +120
      │                        └── filters (true)
      ├── scan c
      │    └── columns: c1:14 c2:15
      └── filters
           └── (a1:1 = c1:14) OR (a1:1 = c2:15) [outer=(1,14,15), constraints=(/1: (/NULL - ])]

# Two EXISTS at same nesting level; only one disjuction chain can be optimized
opt expect=SplitDisjunctionOfJoinTerms
SELECT a2,a4 FROM a WHERE EXISTS(SELECT * FROM b WHERE a1=b1 OR a1=b2 OR a1=b3 OR a1=b4) AND
                          EXISTS(SELECT * FROM c WHERE a1=c1 OR a1=c2 OR a1=c3 OR a1=c4)
----
project
 ├── columns: a2:2!null a4:4!null
 └── semi-join (cross)
      ├── columns: a1:1!null a2:2!null a4:4!null
      ├── project
      │    ├── columns: a1:1!null a2:2!null a4:4!null
      │    └── distinct-on
      │         ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      │         ├── grouping columns: a1:1!null a2:2!null a3:3!null a4:4!null
      │         ├── key: (1-4)
      │         └── union-all
      │              ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      │              ├── left columns: a1:516 a2:517 a3:518 a4:519
      │              ├── right columns: a1:529 a2:530 a3:531 a4:532
      │              ├── project
      │              │    ├── columns: a1:516!null a2:517!null a3:518!null a4:519!null
      │              │    ├── key: (516-519)
      │              │    └── inner-join (merge)
      │              │         ├── columns: a1:516!null a2:517!null a3:518!null a4:519!null b1:522!null
      │              │         ├── left ordering: +516
      │              │         ├── right ordering: +522
      │              │         ├── key: (517-519,522)
      │              │         ├── fd: (516)==(522), (522)==(516)
      │              │         ├── scan a
      │              │         │    ├── columns: a1:516!null a2:517!null a3:518!null a4:519!null
      │              │         │    ├── key: (516-519)
      │              │         │    └── ordering: +516
      │              │         ├── distinct-on
      │              │         │    ├── columns: b1:522
      │              │         │    ├── grouping columns: b1:522
      │              │         │    ├── key: (522)
      │              │         │    ├── ordering: +522
      │              │         │    └── scan b@b_b1_b2_idx
      │              │         │         ├── columns: b1:522
      │              │         │         └── ordering: +522
      │              │         └── filters (true)
      │              └── project
      │                   ├── columns: a1:529!null a2:530!null a3:531!null a4:532!null
      │                   ├── key: (529-532)
      │                   └── distinct-on
      │                        ├── columns: a1:529!null a2:530!null a3:531!null a4:532!null
      │                        ├── grouping columns: a1:529!null a2:530!null a3:531!null a4:532!null
      │                        ├── key: (529-532)
      │                        └── union-all
      │                             ├── columns: a1:529!null a2:530!null a3:531!null a4:532!null
      │                             ├── left columns: a1:620 a2:621 a3:622 a4:623
      │                             ├── right columns: a1:633 a2:634 a3:635 a4:636
      │                             ├── project
      │                             │    ├── columns: a1:620!null a2:621!null a3:622!null a4:623!null
      │                             │    ├── key: (620-623)
      │                             │    └── inner-join (hash)
      │                             │         ├── columns: a1:620!null a2:621!null a3:622!null a4:623!null b4:629!null
      │                             │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
      │                             │         ├── key: (621-623,629)
      │                             │         ├── fd: (620)==(629), (629)==(620)
      │                             │         ├── scan a
      │                             │         │    ├── columns: a1:620!null a2:621!null a3:622!null a4:623!null
      │                             │         │    └── key: (620-623)
      │                             │         ├── distinct-on
      │                             │         │    ├── columns: b4:629
      │                             │         │    ├── grouping columns: b4:629
      │                             │         │    ├── key: (629)
      │                             │         │    └── scan b
      │                             │         │         └── columns: b4:629
      │                             │         └── filters
      │                             │              └── a1:620 = b4:629 [outer=(620,629), constraints=(/620: (/NULL - ]; /629: (/NULL - ]), fd=(620)==(629), (629)==(620)]
      │                             └── project
      │                                  ├── columns: a1:633!null a2:634!null a3:635!null a4:636!null
      │                                  ├── key: (633-636)
      │                                  └── distinct-on
      │                                       ├── columns: a1:633!null a2:634!null a3:635!null a4:636!null
      │                                       ├── grouping columns: a1:633!null a2:634!null a3:635!null a4:636!null
      │                                       ├── key: (633-636)
      │                                       └── union-all
      │                                            ├── columns: a1:633!null a2:634!null a3:635!null a4:636!null
      │                                            ├── left columns: a1:698 a2:699 a3:700 a4:701
      │                                            ├── right columns: a1:711 a2:712 a3:713 a4:714
      │                                            ├── project
      │                                            │    ├── columns: a1:698!null a2:699!null a3:700!null a4:701!null
      │                                            │    ├── key: (698-701)
      │                                            │    └── inner-join (merge)
      │                                            │         ├── columns: a1:698!null a2:699!null a3:700!null a4:701!null b2:705!null
      │                                            │         ├── left ordering: +698
      │                                            │         ├── right ordering: +705
      │                                            │         ├── key: (699-701,705)
      │                                            │         ├── fd: (698)==(705), (705)==(698)
      │                                            │         ├── scan a
      │                                            │         │    ├── columns: a1:698!null a2:699!null a3:700!null a4:701!null
      │                                            │         │    ├── key: (698-701)
      │                                            │         │    └── ordering: +698
      │                                            │         ├── distinct-on
      │                                            │         │    ├── columns: b2:705
      │                                            │         │    ├── grouping columns: b2:705
      │                                            │         │    ├── key: (705)
      │                                            │         │    ├── ordering: +705
      │                                            │         │    └── scan b@b_b2_idx
      │                                            │         │         ├── columns: b2:705
      │                                            │         │         └── ordering: +705
      │                                            │         └── filters (true)
      │                                            └── project
      │                                                 ├── columns: a1:711!null a2:712!null a3:713!null a4:714!null
      │                                                 ├── key: (711-714)
      │                                                 └── inner-join (merge)
      │                                                      ├── columns: a1:711!null a2:712!null a3:713!null a4:714!null b3:719!null
      │                                                      ├── left ordering: +711
      │                                                      ├── right ordering: +719
      │                                                      ├── key: (712-714,719)
      │                                                      ├── fd: (711)==(719), (719)==(711)
      │                                                      ├── scan a
      │                                                      │    ├── columns: a1:711!null a2:712!null a3:713!null a4:714!null
      │                                                      │    ├── key: (711-714)
      │                                                      │    └── ordering: +711
      │                                                      ├── distinct-on
      │                                                      │    ├── columns: b3:719
      │                                                      │    ├── grouping columns: b3:719
      │                                                      │    ├── key: (719)
      │                                                      │    ├── ordering: +719
      │                                                      │    └── scan b@b_b3_idx
      │                                                      │         ├── columns: b3:719
      │                                                      │         └── ordering: +719
      │                                                      └── filters (true)
      ├── scan c
      │    └── columns: c1:14 c2:15 c3:16 c4:17
      └── filters
           └── (((a1:1 = c1:14) OR (a1:1 = c2:15)) OR (a1:1 = c3:16)) OR (a1:1 = c4:17) [outer=(1,14-17), constraints=(/1: (/NULL - ])]

# Outer Select is Join
opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a JOIN (SELECT * FROM b WHERE b1 > 0 AND EXISTS (SELECT 1 FROM c WHERE c1=b1))
                       AS foo on a1=foo.b1 OR a2=foo.b2
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b1:7!null b2:8 b3:9 b4:10
 └── project
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b1:7!null b2:8 b3:9 b4:10 c1:14!null
      ├── fd: (7)==(14), (14)==(7)
      └── inner-join (hash)
           ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b1:7!null b2:8 b3:9 b4:10 b.rowid:11!null c1:14!null
           ├── multiplicity: left-rows(zero-or-more), right-rows(zero-or-one)
           ├── key: (1-4,11)
           ├── fd: (1-4,11)-->(7-10), (7)==(14), (14)==(7)
           ├── distinct-on
           │    ├── columns: c1:14!null
           │    ├── grouping columns: c1:14!null
           │    ├── key: (14)
           │    └── select
           │         ├── columns: c1:14!null
           │         ├── scan c
           │         │    └── columns: c1:14
           │         └── filters
           │              └── c1:14 > 0 [outer=(14), constraints=(/14: [/1 - ]; tight)]
           ├── distinct-on
           │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b1:7!null b2:8 b3:9 b4:10 b.rowid:11!null
           │    ├── grouping columns: a1:1!null a2:2!null a3:3!null a4:4!null b.rowid:11!null
           │    ├── key: (1-4,11)
           │    ├── fd: (1-4,11)-->(7-10)
           │    ├── union-all
           │    │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b1:7!null b2:8 b3:9 b4:10 b.rowid:11!null
           │    │    ├── left columns: a1:22 a2:23 a3:24 a4:25 b1:28 b2:29 b3:30 b4:31 b.rowid:32
           │    │    ├── right columns: a1:35 a2:36 a3:37 a4:38 b1:41 b2:42 b3:43 b4:44 b.rowid:45
           │    │    ├── inner-join (merge)
           │    │    │    ├── columns: a1:22!null a2:23!null a3:24!null a4:25!null b1:28!null b2:29 b3:30 b4:31 b.rowid:32!null
           │    │    │    ├── left ordering: +22
           │    │    │    ├── right ordering: +28
           │    │    │    ├── key: (23-25,32)
           │    │    │    ├── fd: (32)-->(28-31), (22)==(28), (28)==(22)
           │    │    │    ├── scan a
           │    │    │    │    ├── columns: a1:22!null a2:23!null a3:24!null a4:25!null
           │    │    │    │    ├── key: (22-25)
           │    │    │    │    └── ordering: +22
           │    │    │    ├── scan b@b_b1_b2_idx
           │    │    │    │    ├── columns: b1:28!null b2:29 b3:30 b4:31 b.rowid:32!null
           │    │    │    │    ├── constraint: /28/29/32: [/1 - ]
           │    │    │    │    ├── key: (32)
           │    │    │    │    ├── fd: (32)-->(28-31)
           │    │    │    │    └── ordering: +28
           │    │    │    └── filters (true)
           │    │    └── inner-join (hash)
           │    │         ├── columns: a1:35!null a2:36!null a3:37!null a4:38!null b1:41!null b2:42!null b3:43 b4:44 b.rowid:45!null
           │    │         ├── key: (35,37,38,45)
           │    │         ├── fd: (45)-->(41-44), (36)==(42), (42)==(36)
           │    │         ├── scan a
           │    │         │    ├── columns: a1:35!null a2:36!null a3:37!null a4:38!null
           │    │         │    └── key: (35-38)
           │    │         ├── scan b@b_b1_b2_idx
           │    │         │    ├── columns: b1:41!null b2:42 b3:43 b4:44 b.rowid:45!null
           │    │         │    ├── constraint: /41/42/45: [/1 - ]
           │    │         │    ├── key: (45)
           │    │         │    └── fd: (45)-->(41-44)
           │    │         └── filters
           │    │              └── a2:36 = b2:42 [outer=(36,42), constraints=(/36: (/NULL - ]; /42: (/NULL - ]), fd=(36)==(42), (42)==(36)]
           │    └── aggregations
           │         ├── const-agg [as=b1:7, outer=(7)]
           │         │    └── b1:7
           │         ├── const-agg [as=b2:8, outer=(8)]
           │         │    └── b2:8
           │         ├── const-agg [as=b3:9, outer=(9)]
           │         │    └── b3:9
           │         └── const-agg [as=b4:10, outer=(10)]
           │              └── b4:10
           └── filters
                └── c1:14 = b1:7 [outer=(7,14), constraints=(/7: (/NULL - ]; /14: (/NULL - ]), fd=(7)==(14), (14)==(7)]

opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a JOIN (SELECT * FROM b WHERE b1 > 0 AND EXISTS (SELECT 1 FROM c WHERE c1=b1 or c2=b2))
                       AS foo on a1=foo.b1
----
inner-join (hash)
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b1:7!null b2:8 b3:9 b4:10
 ├── fd: (1)==(7), (7)==(1)
 ├── scan a
 │    ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 │    └── key: (1-4)
 ├── project
 │    ├── columns: b1:7!null b2:8 b3:9 b4:10
 │    └── distinct-on
 │         ├── columns: b1:7!null b2:8 b3:9 b4:10 b.rowid:11!null
 │         ├── grouping columns: b.rowid:11!null
 │         ├── key: (11)
 │         ├── fd: (11)-->(7-10)
 │         ├── union-all
 │         │    ├── columns: b1:7!null b2:8 b3:9 b4:10 b.rowid:11!null
 │         │    ├── left columns: b1:22 b2:23 b3:24 b4:25 b.rowid:26
 │         │    ├── right columns: b1:36 b2:37 b3:38 b4:39 b.rowid:40
 │         │    ├── project
 │         │    │    ├── columns: b1:22!null b2:23 b3:24 b4:25 b.rowid:26!null
 │         │    │    ├── key: (26)
 │         │    │    ├── fd: (26)-->(22-25)
 │         │    │    └── inner-join (hash)
 │         │    │         ├── columns: b1:22!null b2:23 b3:24 b4:25 b.rowid:26!null c1:29!null
 │         │    │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │         │    │         ├── key: (26)
 │         │    │         ├── fd: (26)-->(22-25), (22)==(29), (29)==(22)
 │         │    │         ├── scan b@b_b1_b2_idx
 │         │    │         │    ├── columns: b1:22!null b2:23 b3:24 b4:25 b.rowid:26!null
 │         │    │         │    ├── constraint: /22/23/26: [/1 - ]
 │         │    │         │    ├── key: (26)
 │         │    │         │    └── fd: (26)-->(22-25)
 │         │    │         ├── distinct-on
 │         │    │         │    ├── columns: c1:29
 │         │    │         │    ├── grouping columns: c1:29
 │         │    │         │    ├── key: (29)
 │         │    │         │    └── scan c
 │         │    │         │         └── columns: c1:29
 │         │    │         └── filters
 │         │    │              └── c1:29 = b1:22 [outer=(22,29), constraints=(/22: (/NULL - ]; /29: (/NULL - ]), fd=(22)==(29), (29)==(22)]
 │         │    └── project
 │         │         ├── columns: b1:36!null b2:37 b3:38 b4:39 b.rowid:40!null
 │         │         ├── key: (40)
 │         │         ├── fd: (40)-->(36-39)
 │         │         └── inner-join (hash)
 │         │              ├── columns: b1:36!null b2:37!null b3:38 b4:39 b.rowid:40!null c2:44!null
 │         │              ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │         │              ├── key: (40)
 │         │              ├── fd: (40)-->(36-39), (37)==(44), (44)==(37)
 │         │              ├── scan b@b_b1_b2_idx
 │         │              │    ├── columns: b1:36!null b2:37 b3:38 b4:39 b.rowid:40!null
 │         │              │    ├── constraint: /36/37/40: [/1 - ]
 │         │              │    ├── key: (40)
 │         │              │    └── fd: (40)-->(36-39)
 │         │              ├── distinct-on
 │         │              │    ├── columns: c2:44
 │         │              │    ├── grouping columns: c2:44
 │         │              │    ├── key: (44)
 │         │              │    └── scan c
 │         │              │         └── columns: c2:44
 │         │              └── filters
 │         │                   └── c2:44 = b2:37 [outer=(37,44), constraints=(/37: (/NULL - ]; /44: (/NULL - ]), fd=(37)==(44), (44)==(37)]
 │         └── aggregations
 │              ├── const-agg [as=b1:7, outer=(7)]
 │              │    └── b1:7
 │              ├── const-agg [as=b2:8, outer=(8)]
 │              │    └── b2:8
 │              ├── const-agg [as=b3:9, outer=(9)]
 │              │    └── b3:9
 │              └── const-agg [as=b4:10, outer=(10)]
 │                   └── b4:10
 └── filters
      └── a1:1 = b1:7 [outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]

#######################
# Correlated antijoin #
#######################

opt expect=SplitDisjunctionOfAntiJoinTerms
SELECT a1,a2,a3 FROM a WHERE NOT EXISTS (SELECT * FROM b WHERE a2 = b2 OR a3 = b3)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null
 └── intersect-all
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      ├── left columns: a1:14 a2:15 a3:16 a4:17
      ├── right columns: a1:27 a2:28 a3:29 a4:30
      ├── key: (1-4)
      ├── anti-join (hash)
      │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
      │    ├── key: (14-17)
      │    ├── scan a
      │    │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
      │    │    └── key: (14-17)
      │    ├── scan b
      │    │    └── columns: b2:21
      │    └── filters
      │         └── a2:15 = b2:21 [outer=(15,21), constraints=(/15: (/NULL - ]; /21: (/NULL - ]), fd=(15)==(21), (21)==(15)]
      └── anti-join (hash)
           ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
           ├── key: (27-30)
           ├── scan a
           │    ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
           │    └── key: (27-30)
           ├── scan b
           │    └── columns: b3:35
           └── filters
                └── a3:29 = b3:35 [outer=(29,35), constraints=(/29: (/NULL - ]; /35: (/NULL - ]), fd=(29)==(35), (35)==(29)]

opt expect=SplitDisjunctionOfAntiJoinTerms
SELECT a1,a2,a3 FROM a WHERE NOT EXISTS (SELECT * FROM b WHERE a1 = b1 OR a1 = b2)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null
 └── intersect-all
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      ├── left columns: a1:14 a2:15 a3:16 a4:17
      ├── right columns: a1:27 a2:28 a3:29 a4:30
      ├── key: (1-4)
      ├── anti-join (merge)
      │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
      │    ├── left ordering: +14
      │    ├── right ordering: +20
      │    ├── key: (14-17)
      │    ├── scan a
      │    │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
      │    │    ├── key: (14-17)
      │    │    └── ordering: +14
      │    ├── scan b@b_b1_b2_idx
      │    │    ├── columns: b1:20
      │    │    └── ordering: +20
      │    └── filters (true)
      └── anti-join (merge)
           ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
           ├── left ordering: +27
           ├── right ordering: +34
           ├── key: (27-30)
           ├── scan a
           │    ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
           │    ├── key: (27-30)
           │    └── ordering: +27
           ├── scan b@b_b2_idx
           │    ├── columns: b2:34
           │    └── ordering: +34
           └── filters (true)

# The left side of the join already produces key columns
opt expect=SplitDisjunctionOfAntiJoinTerms
SELECT * FROM a WHERE NOT EXISTS (SELECT * FROM b WHERE a1 = b1 OR a2 = b2 OR a3 = b3 OR a4 = b4)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── key: (1-4)
 └── intersect-all
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      ├── left columns: a1:14 a2:15 a3:16 a4:17
      ├── right columns: a1:27 a2:28 a3:29 a4:30
      ├── key: (1-4)
      ├── anti-join (merge)
      │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
      │    ├── left ordering: +14
      │    ├── right ordering: +20
      │    ├── key: (14-17)
      │    ├── scan a
      │    │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
      │    │    ├── key: (14-17)
      │    │    └── ordering: +14
      │    ├── scan b@b_b1_b2_idx
      │    │    ├── columns: b1:20
      │    │    └── ordering: +20
      │    └── filters (true)
      └── project
           ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
           ├── key: (27-30)
           └── intersect-all
                ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
                ├── left columns: a1:40 a2:41 a3:42 a4:43
                ├── right columns: a1:53 a2:54 a3:55 a4:56
                ├── key: (27-30)
                ├── anti-join (hash)
                │    ├── columns: a1:40!null a2:41!null a3:42!null a4:43!null
                │    ├── key: (40-43)
                │    ├── scan a
                │    │    ├── columns: a1:40!null a2:41!null a3:42!null a4:43!null
                │    │    └── key: (40-43)
                │    ├── scan b
                │    │    └── columns: b4:49
                │    └── filters
                │         └── a4:43 = b4:49 [outer=(43,49), constraints=(/43: (/NULL - ]; /49: (/NULL - ]), fd=(43)==(49), (49)==(43)]
                └── project
                     ├── columns: a1:53!null a2:54!null a3:55!null a4:56!null
                     ├── key: (53-56)
                     └── intersect-all
                          ├── columns: a1:53!null a2:54!null a3:55!null a4:56!null
                          ├── left columns: a1:66 a2:67 a3:68 a4:69
                          ├── right columns: a1:79 a2:80 a3:81 a4:82
                          ├── key: (53-56)
                          ├── anti-join (hash)
                          │    ├── columns: a1:66!null a2:67!null a3:68!null a4:69!null
                          │    ├── key: (66-69)
                          │    ├── scan a
                          │    │    ├── columns: a1:66!null a2:67!null a3:68!null a4:69!null
                          │    │    └── key: (66-69)
                          │    ├── scan b
                          │    │    └── columns: b2:73
                          │    └── filters
                          │         └── a2:67 = b2:73 [outer=(67,73), constraints=(/67: (/NULL - ]; /73: (/NULL - ]), fd=(67)==(73), (73)==(67)]
                          └── anti-join (hash)
                               ├── columns: a1:79!null a2:80!null a3:81!null a4:82!null
                               ├── key: (79-82)
                               ├── scan a
                               │    ├── columns: a1:79!null a2:80!null a3:81!null a4:82!null
                               │    └── key: (79-82)
                               ├── scan b
                               │    └── columns: b3:87
                               └── filters
                                    └── a3:81 = b3:87 [outer=(81,87), constraints=(/81: (/NULL - ]; /87: (/NULL - ]), fd=(81)==(87), (87)==(81)]

# More than one disjunction in the filter
opt expect=SplitDisjunctionOfAntiJoinTerms
SELECT * FROM a WHERE NOT EXISTS (SELECT * FROM c WHERE a1 = c1 OR a2 = c2 OR a3 = c3 OR a4 = c4)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── key: (1-4)
 └── intersect-all
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      ├── left columns: a1:14 a2:15 a3:16 a4:17
      ├── right columns: a1:27 a2:28 a3:29 a4:30
      ├── key: (1-4)
      ├── anti-join (hash)
      │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
      │    ├── key: (14-17)
      │    ├── scan a
      │    │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
      │    │    └── key: (14-17)
      │    ├── scan c
      │    │    └── columns: c1:20
      │    └── filters
      │         └── a1:14 = c1:20 [outer=(14,20), constraints=(/14: (/NULL - ]; /20: (/NULL - ]), fd=(14)==(20), (20)==(14)]
      └── project
           ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
           ├── key: (27-30)
           └── intersect-all
                ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
                ├── left columns: a1:40 a2:41 a3:42 a4:43
                ├── right columns: a1:53 a2:54 a3:55 a4:56
                ├── key: (27-30)
                ├── anti-join (hash)
                │    ├── columns: a1:40!null a2:41!null a3:42!null a4:43!null
                │    ├── key: (40-43)
                │    ├── scan a
                │    │    ├── columns: a1:40!null a2:41!null a3:42!null a4:43!null
                │    │    └── key: (40-43)
                │    ├── scan c
                │    │    └── columns: c4:49
                │    └── filters
                │         └── a4:43 = c4:49 [outer=(43,49), constraints=(/43: (/NULL - ]; /49: (/NULL - ]), fd=(43)==(49), (49)==(43)]
                └── project
                     ├── columns: a1:53!null a2:54!null a3:55!null a4:56!null
                     ├── key: (53-56)
                     └── intersect-all
                          ├── columns: a1:53!null a2:54!null a3:55!null a4:56!null
                          ├── left columns: a1:66 a2:67 a3:68 a4:69
                          ├── right columns: a1:79 a2:80 a3:81 a4:82
                          ├── key: (53-56)
                          ├── anti-join (hash)
                          │    ├── columns: a1:66!null a2:67!null a3:68!null a4:69!null
                          │    ├── key: (66-69)
                          │    ├── scan a
                          │    │    ├── columns: a1:66!null a2:67!null a3:68!null a4:69!null
                          │    │    └── key: (66-69)
                          │    ├── scan c
                          │    │    └── columns: c2:73
                          │    └── filters
                          │         └── a2:67 = c2:73 [outer=(67,73), constraints=(/67: (/NULL - ]; /73: (/NULL - ]), fd=(67)==(73), (73)==(67)]
                          └── anti-join (hash)
                               ├── columns: a1:79!null a2:80!null a3:81!null a4:82!null
                               ├── key: (79-82)
                               ├── scan a
                               │    ├── columns: a1:79!null a2:80!null a3:81!null a4:82!null
                               │    └── key: (79-82)
                               ├── scan c
                               │    └── columns: c3:87
                               └── filters
                                    └── a3:81 = c3:87 [outer=(81,87), constraints=(/81: (/NULL - ]; /87: (/NULL - ]), fd=(81)==(87), (87)==(81)]

opt expect=SplitDisjunctionOfAntiJoinTerms
SELECT * FROM a WHERE NOT EXISTS (SELECT * FROM c WHERE a1 = c2 OR a2 = c1 OR a3 = c4 OR a3 = c4)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── key: (1-4)
 └── intersect-all
      ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      ├── left columns: a1:14 a2:15 a3:16 a4:17
      ├── right columns: a1:27 a2:28 a3:29 a4:30
      ├── key: (1-4)
      ├── anti-join (hash)
      │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
      │    ├── key: (14-17)
      │    ├── scan a
      │    │    ├── columns: a1:14!null a2:15!null a3:16!null a4:17!null
      │    │    └── key: (14-17)
      │    ├── scan c
      │    │    └── columns: c2:21
      │    └── filters
      │         └── a1:14 = c2:21 [outer=(14,21), constraints=(/14: (/NULL - ]; /21: (/NULL - ]), fd=(14)==(21), (21)==(14)]
      └── project
           ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
           ├── key: (27-30)
           └── intersect-all
                ├── columns: a1:27!null a2:28!null a3:29!null a4:30!null
                ├── left columns: a1:40 a2:41 a3:42 a4:43
                ├── right columns: a1:53 a2:54 a3:55 a4:56
                ├── key: (27-30)
                ├── anti-join (hash)
                │    ├── columns: a1:40!null a2:41!null a3:42!null a4:43!null
                │    ├── key: (40-43)
                │    ├── scan a
                │    │    ├── columns: a1:40!null a2:41!null a3:42!null a4:43!null
                │    │    └── key: (40-43)
                │    ├── scan c
                │    │    └── columns: c4:49
                │    └── filters
                │         └── a3:42 = c4:49 [outer=(42,49), constraints=(/42: (/NULL - ]; /49: (/NULL - ]), fd=(42)==(49), (49)==(42)]
                └── project
                     ├── columns: a1:53!null a2:54!null a3:55!null a4:56!null
                     ├── key: (53-56)
                     └── intersect-all
                          ├── columns: a1:53!null a2:54!null a3:55!null a4:56!null
                          ├── left columns: a1:66 a2:67 a3:68 a4:69
                          ├── right columns: a1:79 a2:80 a3:81 a4:82
                          ├── key: (53-56)
                          ├── anti-join (hash)
                          │    ├── columns: a1:66!null a2:67!null a3:68!null a4:69!null
                          │    ├── key: (66-69)
                          │    ├── scan a
                          │    │    ├── columns: a1:66!null a2:67!null a3:68!null a4:69!null
                          │    │    └── key: (66-69)
                          │    ├── scan c
                          │    │    └── columns: c1:72
                          │    └── filters
                          │         └── a2:67 = c1:72 [outer=(67,72), constraints=(/67: (/NULL - ]; /72: (/NULL - ]), fd=(67)==(72), (72)==(67)]
                          └── anti-join (hash)
                               ├── columns: a1:79!null a2:80!null a3:81!null a4:82!null
                               ├── key: (79-82)
                               ├── scan a
                               │    ├── columns: a1:79!null a2:80!null a3:81!null a4:82!null
                               │    └── key: (79-82)
                               ├── scan c
                               │    └── columns: c4:88
                               └── filters
                                    └── a3:81 = c4:88 [outer=(81,88), constraints=(/81: (/NULL - ]; /88: (/NULL - ]), fd=(81)==(88), (88)==(81)]

# Nested NOT EXISTS
# Not currently supported. Maybe needs better subquery decorrelation?
opt expect-not=SplitDisjunctionOfAntiJoinTerms
SELECT a2,a4 FROM a WHERE NOT EXISTS(SELECT * FROM b WHERE (a1=b1 OR a1=b2) AND NOT EXISTS(SELECT 1 FROM c WHERE b1=c1))
----
project
 ├── columns: a2:2!null a4:4!null
 └── anti-join (cross)
      ├── columns: a1:1!null a2:2!null a4:4!null
      ├── scan a
      │    └── columns: a1:1!null a2:2!null a4:4!null
      ├── anti-join (hash)
      │    ├── columns: b1:7 b2:8
      │    ├── scan b
      │    │    └── columns: b1:7 b2:8
      │    ├── scan c
      │    │    └── columns: c1:14
      │    └── filters
      │         └── b1:7 = c1:14 [outer=(7,14), constraints=(/7: (/NULL - ]; /14: (/NULL - ]), fd=(7)==(14), (14)==(7)]
      └── filters
           └── (a1:1 = b1:7) OR (a1:1 = b2:8) [outer=(1,7,8), constraints=(/1: (/NULL - ])]

# Two NOT EXISTS at same nesting level; only one disjuction pair can be optimized
opt expect=SplitDisjunctionOfAntiJoinTerms
SELECT a2,a4 FROM a WHERE NOT EXISTS(SELECT * FROM b WHERE a1=b1 OR a1=b2) AND
                          NOT EXISTS(SELECT * FROM c WHERE a1=c1 OR a1=c2)
----
project
 ├── columns: a2:2!null a4:4!null
 └── anti-join (cross)
      ├── columns: a1:1!null a2:2!null a4:4!null
      ├── project
      │    ├── columns: a1:1!null a2:2!null a4:4!null
      │    └── intersect-all
      │         ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
      │         ├── left columns: a1:47 a2:48 a3:49 a4:50
      │         ├── right columns: a1:60 a2:61 a3:62 a4:63
      │         ├── key: (1-4)
      │         ├── anti-join (merge)
      │         │    ├── columns: a1:47!null a2:48!null a3:49!null a4:50!null
      │         │    ├── left ordering: +47
      │         │    ├── right ordering: +53
      │         │    ├── key: (47-50)
      │         │    ├── scan a
      │         │    │    ├── columns: a1:47!null a2:48!null a3:49!null a4:50!null
      │         │    │    ├── key: (47-50)
      │         │    │    └── ordering: +47
      │         │    ├── scan b@b_b1_b2_idx
      │         │    │    ├── columns: b1:53
      │         │    │    └── ordering: +53
      │         │    └── filters (true)
      │         └── anti-join (merge)
      │              ├── columns: a1:60!null a2:61!null a3:62!null a4:63!null
      │              ├── left ordering: +60
      │              ├── right ordering: +67
      │              ├── key: (60-63)
      │              ├── scan a
      │              │    ├── columns: a1:60!null a2:61!null a3:62!null a4:63!null
      │              │    ├── key: (60-63)
      │              │    └── ordering: +60
      │              ├── scan b@b_b2_idx
      │              │    ├── columns: b2:67
      │              │    └── ordering: +67
      │              └── filters (true)
      ├── scan c
      │    └── columns: c1:14 c2:15
      └── filters
           └── (a1:1 = c1:14) OR (a1:1 = c2:15) [outer=(1,14,15), constraints=(/1: (/NULL - ])]

# Outer Select is Join
memo expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a JOIN (SELECT * FROM b WHERE b1 > 0 AND NOT EXISTS (SELECT 1 FROM c WHERE c1=b1))
                       AS foo on a1=foo.b1 OR a2=foo.b2
----
memo (optimized, ~80KB, required=[presentation: a1:1,a2:2,a3:3,a4:4,b1:7,b2:8,b3:9,b4:10])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4) (anti-join G5 G6 G7) (merge-join G5 G6 G8 anti-join,+7,+14)
 │    └── [presentation: a1:1,a2:2,a3:3,a4:4,b1:7,b2:8,b3:9,b4:10]
 │         ├── best: (inner-join G2 G3 G4)
 │         └── cost: 2632.72
 ├── G2: (scan a,cols=(1-4))
 │    └── []
 │         ├── best: (scan a,cols=(1-4))
 │         └── cost: 1104.82
 ├── G3: (anti-join G9 G6 G7) (merge-join G9 G6 G8 anti-join,+7,+14)
 │    └── []
 │         ├── best: (anti-join G9 G6 G7)
 │         └── cost: 1515.37
 ├── G4: (filters G10)
 ├── G5: (inner-join G2 G9 G4) (inner-join G9 G2 G4) (project G11 G12 a1 a2 a3 a4 b1 b2 b3 b4) (project G13 G12 a1 a2 a3 a4 b1 b2 b3 b4)
 │    ├── [ordering: +7]
 │    │    ├── best: (project G11="[ordering: +7]" G12 a1 a2 a3 a4 b1 b2 b3 b4)
 │    │    └── cost: 5073.73
 │    └── []
 │         ├── best: (project G11 G12 a1 a2 a3 a4 b1 b2 b3 b4)
 │         └── cost: 3937.61
 ├── G6: (select G14 G15)
 │    ├── [ordering: +14]
 │    │    ├── best: (sort G6)
 │    │    └── cost: 1160.56
 │    └── []
 │         ├── best: (select G14 G15)
 │         └── cost: 1094.65
 ├── G7: (filters G16)
 ├── G8: (filters)
 ├── G9: (select G17 G18) (scan b@b_b1_b2_idx,cols=(7-10),constrained)
 │    ├── [ordering: +7]
 │    │    ├── best: (scan b@b_b1_b2_idx,cols=(7-10),constrained)
 │    │    └── cost: 377.35
 │    └── []
 │         ├── best: (scan b@b_b1_b2_idx,cols=(7-10),constrained)
 │         └── cost: 377.35
 ├── G10: (or G19 G20)
 ├── G11: (distinct-on G21 G22 cols=(1-4,11)) (distinct-on G21 G22 cols=(1-4,11),ordering=+1,+2,+3,+4) (distinct-on G21 G22 cols=(1-4,11),ordering=+11)
 │    ├── [ordering: +7]
 │    │    ├── best: (distinct-on G21="[ordering: +7]" G22 cols=(1-4,11))
 │    │    └── cost: 5007.37
 │    └── []
 │         ├── best: (distinct-on G21 G22 cols=(1-4,11))
 │         └── cost: 3871.26
 ├── G12: (projections)
 ├── G13: (distinct-on G23 G22 cols=(1-4,11)) (distinct-on G23 G22 cols=(1-4,11),ordering=+11) (distinct-on G23 G22 cols=(1-4,11),ordering=+1,+2,+3,+4)
 │    ├── [ordering: +7]
 │    │    ├── best: (distinct-on G23="[ordering: +7]" G22 cols=(1-4,11))
 │    │    └── cost: 5012.17
 │    └── []
 │         ├── best: (distinct-on G23 G22 cols=(1-4,11))
 │         └── cost: 3876.06
 ├── G14: (scan c,cols=(14))
 │    ├── [ordering: +14]
 │    │    ├── best: (sort G14)
 │    │    └── cost: 1314.10
 │    └── []
 │         ├── best: (scan c,cols=(14))
 │         └── cost: 1084.62
 ├── G15: (filters G24)
 ├── G16: (eq G25 G26)
 ├── G17: (scan b,cols=(7-10)) (scan b@b_b1_b2_idx,cols=(7-10)) (scan b@b_b2_idx,cols=(7-10)) (scan b@b_b3_idx,cols=(7-10))
 │    ├── [ordering: +7]
 │    │    ├── best: (scan b@b_b1_b2_idx,cols=(7-10))
 │    │    └── cost: 1114.92
 │    └── []
 │         ├── best: (scan b,cols=(7-10))
 │         └── cost: 1114.92
 ├── G18: (filters G27)
 ├── G19: (eq G28 G26)
 ├── G20: (eq G29 G30)
 ├── G21: (union-all G31 G32)
 │    ├── [ordering: +1,+2,+3,+4]
 │    │    ├── best: (union-all G31="[ordering: +(22|28),+23,+24,+25]" G32="[ordering: +35,+(36|42),+37,+38]")
 │    │    └── cost: 5512.92
 │    ├── [ordering: +11]
 │    │    ├── best: (union-all G31="[ordering: +32]" G32="[ordering: +45]")
 │    │    └── cost: 5419.44
 │    ├── [ordering: +7]
 │    │    ├── best: (union-all G31="[ordering: +(22|28)]" G32="[ordering: +41]")
 │    │    └── cost: 4270.87
 │    └── []
 │         ├── best: (union-all G31 G32)
 │         └── cost: 3134.75
 ├── G22: (aggregations G33 G34 G35 G36)
 ├── G23: (union-all G37 G38)
 │    ├── [ordering: +1,+2,+3,+4]
 │    │    ├── best: (union-all G37="[ordering: +(48|54),+49,+50,+51]" G38="[ordering: +61,+(62|68),+63,+64]")
 │    │    └── cost: 5517.72
 │    ├── [ordering: +11]
 │    │    ├── best: (union-all G37="[ordering: +58]" G38="[ordering: +71]")
 │    │    └── cost: 5424.24
 │    ├── [ordering: +7]
 │    │    ├── best: (union-all G37="[ordering: +(48|54)]" G38="[ordering: +67]")
 │    │    └── cost: 4275.67
 │    └── []
 │         ├── best: (union-all G37 G38)
 │         └── cost: 3139.55
 ├── G24: (gt G25 G39)
 ├── G25: (variable c1)
 ├── G26: (variable b1)
 ├── G27: (gt G26 G39)
 ├── G28: (variable a1)
 ├── G29: (variable a2)
 ├── G30: (variable b2)
 ├── G31: (inner-join G40 G41 G42) (merge-join G40 G41 G8 inner-join,+22,+28) (lookup-join G40 G43 b@b_b1_b2_idx,keyCols=[22],outCols=(22-25,28-32))
 │    ├── [ordering: +(22|28),+23,+24,+25]
 │    │    ├── best: (sort G31)
 │    │    └── cost: 2727.10
 │    ├── [ordering: +(22|28)]
 │    │    ├── best: (merge-join G40="[ordering: +22]" G41="[ordering: +28]" G8 inner-join,+22,+28)
 │    │    └── cost: 1531.53
 │    ├── [ordering: +32]
 │    │    ├── best: (sort G31)
 │    │    └── cost: 2680.10
 │    └── []
 │         ├── best: (merge-join G40="[ordering: +22]" G41="[ordering: +28]" G8 inner-join,+22,+28)
 │         └── cost: 1531.53
 ├── G32: (inner-join G44 G45 G46) (lookup-join G44 G47 b@b_b2_idx,keyCols=[36],outCols=(35-38,41-45))
 │    ├── [ordering: +35,+(36|42),+37,+38]
 │    │    ├── best: (sort G32)
 │    │    └── cost: 2719.46
 │    ├── [ordering: +41]
 │    │    ├── best: (sort G32)
 │    │    └── cost: 2672.99
 │    ├── [ordering: +45]
 │    │    ├── best: (sort G32)
 │    │    └── cost: 2672.99
 │    └── []
 │         ├── best: (inner-join G44 G45 G46)
 │         └── cost: 1536.87
 ├── G33: (const-agg G26)
 ├── G34: (const-agg G30)
 ├── G35: (const-agg G48)
 ├── G36: (const-agg G49)
 ├── G37: (inner-join G50 G51 G52) (merge-join G50 G51 G8 inner-join,+54,+48) (lookup-join G50 G8 a,keyCols=[54],outCols=(48-51,54-58))
 │    ├── [ordering: +(48|54),+49,+50,+51]
 │    │    ├── best: (sort G37)
 │    │    └── cost: 2728.43
 │    ├── [ordering: +(48|54)]
 │    │    ├── best: (merge-join G50="[ordering: +54]" G51="[ordering: +48]" G8 inner-join,+54,+48)
 │    │    └── cost: 1532.86
 │    ├── [ordering: +58]
 │    │    ├── best: (sort G37)
 │    │    └── cost: 2681.43
 │    └── []
 │         ├── best: (merge-join G50="[ordering: +54]" G51="[ordering: +48]" G8 inner-join,+54,+48)
 │         └── cost: 1532.86
 ├── G38: (inner-join G53 G54 G55) (merge-join G53 G54 G8 inner-join,+68,+62)
 │    ├── [ordering: +61,+(62|68),+63,+64]
 │    │    ├── best: (sort G38)
 │    │    └── cost: 2722.93
 │    ├── [ordering: +67]
 │    │    ├── best: (sort G38)
 │    │    └── cost: 2676.45
 │    ├── [ordering: +71]
 │    │    ├── best: (sort G38)
 │    │    └── cost: 2676.45
 │    └── []
 │         ├── best: (inner-join G53 G54 G55)
 │         └── cost: 1540.34
 ├── G39: (const 0)
 ├── G40: (scan a,cols=(22-25))
 │    ├── [ordering: +22,+23,+24,+25]
 │    │    ├── best: (scan a,cols=(22-25))
 │    │    └── cost: 1104.82
 │    ├── [ordering: +22]
 │    │    ├── best: (scan a,cols=(22-25))
 │    │    └── cost: 1104.82
 │    └── []
 │         ├── best: (scan a,cols=(22-25))
 │         └── cost: 1104.82
 ├── G41: (select G56 G43) (scan b@b_b1_b2_idx,cols=(28-32),constrained)
 │    ├── [ordering: +28]
 │    │    ├── best: (scan b@b_b1_b2_idx,cols=(28-32),constrained)
 │    │    └── cost: 380.69
 │    └── []
 │         ├── best: (scan b@b_b1_b2_idx,cols=(28-32),constrained)
 │         └── cost: 380.69
 ├── G42: (filters G57)
 ├── G43: (filters G58)
 ├── G44: (scan a,cols=(35-38))
 │    ├── [ordering: +35,+36,+37,+38]
 │    │    ├── best: (scan a,cols=(35-38))
 │    │    └── cost: 1104.82
 │    └── []
 │         ├── best: (scan a,cols=(35-38))
 │         └── cost: 1104.82
 ├── G45: (select G59 G47) (scan b@b_b1_b2_idx,cols=(41-45),constrained)
 │    └── []
 │         ├── best: (scan b@b_b1_b2_idx,cols=(41-45),constrained)
 │         └── cost: 380.69
 ├── G46: (filters G60)
 ├── G47: (filters G61)
 ├── G48: (variable b3)
 ├── G49: (variable b4)
 ├── G50: (select G62 G63) (scan b@b_b1_b2_idx,cols=(54-58),constrained)
 │    ├── [ordering: +54]
 │    │    ├── best: (scan b@b_b1_b2_idx,cols=(54-58),constrained)
 │    │    └── cost: 380.69
 │    ├── [ordering: +58]
 │    │    ├── best: (sort G50)
 │    │    └── cost: 459.93
 │    └── []
 │         ├── best: (scan b@b_b1_b2_idx,cols=(54-58),constrained)
 │         └── cost: 380.69
 ├── G51: (scan a,cols=(48-51))
 │    ├── [ordering: +48]
 │    │    ├── best: (scan a,cols=(48-51))
 │    │    └── cost: 1104.82
 │    └── []
 │         ├── best: (scan a,cols=(48-51))
 │         └── cost: 1104.82
 ├── G52: (filters G64)
 ├── G53: (select G65 G66) (scan b@b_b1_b2_idx,cols=(67-71),constrained)
 │    ├── [ordering: +68]
 │    │    ├── best: (sort G53)
 │    │    └── cost: 459.93
 │    └── []
 │         ├── best: (scan b@b_b1_b2_idx,cols=(67-71),constrained)
 │         └── cost: 380.69
 ├── G54: (scan a,cols=(61-64))
 │    ├── [ordering: +62]
 │    │    ├── best: (sort G54)
 │    │    └── cost: 1364.30
 │    └── []
 │         ├── best: (scan a,cols=(61-64))
 │         └── cost: 1104.82
 ├── G55: (filters G67)
 ├── G56: (scan b,cols=(28-32)) (scan b@b_b1_b2_idx,cols=(28-32)) (scan b@b_b2_idx,cols=(28-32)) (scan b@b_b3_idx,cols=(28-32))
 │    ├── [ordering: +28]
 │    │    ├── best: (scan b@b_b1_b2_idx,cols=(28-32))
 │    │    └── cost: 1125.02
 │    └── []
 │         ├── best: (scan b,cols=(28-32))
 │         └── cost: 1125.02
 ├── G57: (eq G68 G69)
 ├── G58: (gt G69 G39)
 ├── G59: (scan b,cols=(41-45)) (scan b@b_b1_b2_idx,cols=(41-45)) (scan b@b_b2_idx,cols=(41-45)) (scan b@b_b3_idx,cols=(41-45))
 │    └── []
 │         ├── best: (scan b,cols=(41-45))
 │         └── cost: 1125.02
 ├── G60: (eq G70 G71)
 ├── G61: (gt G72 G39)
 ├── G62: (scan b,cols=(54-58)) (scan b@b_b1_b2_idx,cols=(54-58)) (scan b@b_b2_idx,cols=(54-58)) (scan b@b_b3_idx,cols=(54-58))
 │    ├── [ordering: +54]
 │    │    ├── best: (scan b@b_b1_b2_idx,cols=(54-58))
 │    │    └── cost: 1125.02
 │    ├── [ordering: +58]
 │    │    ├── best: (scan b,cols=(54-58))
 │    │    └── cost: 1125.02
 │    └── []
 │         ├── best: (scan b,cols=(54-58))
 │         └── cost: 1125.02
 ├── G63: (filters G73)
 ├── G64: (eq G74 G75)
 ├── G65: (scan b,cols=(67-71)) (scan b@b_b1_b2_idx,cols=(67-71)) (scan b@b_b2_idx,cols=(67-71)) (scan b@b_b3_idx,cols=(67-71))
 │    ├── [ordering: +68]
 │    │    ├── best: (scan b@b_b2_idx,cols=(67-71))
 │    │    └── cost: 1125.02
 │    └── []
 │         ├── best: (scan b,cols=(67-71))
 │         └── cost: 1125.02
 ├── G66: (filters G76)
 ├── G67: (eq G77 G78)
 ├── G68: (variable a1)
 ├── G69: (variable b1)
 ├── G70: (variable a2)
 ├── G71: (variable b2)
 ├── G72: (variable b1)
 ├── G73: (gt G75 G39)
 ├── G74: (variable a1)
 ├── G75: (variable b1)
 ├── G76: (gt G79 G39)
 ├── G77: (variable a2)
 ├── G78: (variable b2)
 └── G79: (variable b1)

opt expect=SplitDisjunctionOfAntiJoinTerms
SELECT * FROM a JOIN (SELECT * FROM b WHERE b1 > 0 AND NOT EXISTS (SELECT 1 FROM c WHERE c1=b1 or c2=b2))
                       AS foo on a1=foo.b1
----
inner-join (lookup a)
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null b1:7!null b2:8 b3:9 b4:10
 ├── key columns: [7] = [1]
 ├── fd: (1)==(7), (7)==(1)
 ├── project
 │    ├── columns: b1:7!null b2:8 b3:9 b4:10
 │    └── intersect-all
 │         ├── columns: b1:7!null b2:8 b3:9 b4:10 b.rowid:11!null
 │         ├── left columns: b1:22 b2:23 b3:24 b4:25 b.rowid:26
 │         ├── right columns: b1:36 b2:37 b3:38 b4:39 b.rowid:40
 │         ├── key: (11)
 │         ├── fd: (11)-->(7-10)
 │         ├── anti-join (hash)
 │         │    ├── columns: b1:22!null b2:23 b3:24 b4:25 b.rowid:26!null
 │         │    ├── key: (26)
 │         │    ├── fd: (26)-->(22-25)
 │         │    ├── scan b@b_b1_b2_idx
 │         │    │    ├── columns: b1:22!null b2:23 b3:24 b4:25 b.rowid:26!null
 │         │    │    ├── constraint: /22/23/26: [/1 - ]
 │         │    │    ├── key: (26)
 │         │    │    └── fd: (26)-->(22-25)
 │         │    ├── scan c
 │         │    │    └── columns: c1:29
 │         │    └── filters
 │         │         └── c1:29 = b1:22 [outer=(22,29), constraints=(/22: (/NULL - ]; /29: (/NULL - ]), fd=(22)==(29), (29)==(22)]
 │         └── anti-join (hash)
 │              ├── columns: b1:36!null b2:37 b3:38 b4:39 b.rowid:40!null
 │              ├── key: (40)
 │              ├── fd: (40)-->(36-39)
 │              ├── scan b@b_b1_b2_idx
 │              │    ├── columns: b1:36!null b2:37 b3:38 b4:39 b.rowid:40!null
 │              │    ├── constraint: /36/37/40: [/1 - ]
 │              │    ├── key: (40)
 │              │    └── fd: (40)-->(36-39)
 │              ├── scan c
 │              │    └── columns: c2:44
 │              └── filters
 │                   └── c2:44 = b2:37 [outer=(37,44), constraints=(/37: (/NULL - ]; /44: (/NULL - ]), fd=(37)==(44), (44)==(37)]
 └── filters (true)

# NOT IN subquery
opt expect=SplitDisjunctionOfJoinTerms
SELECT d3,d1,d2 FROM d WHERE d1 NOT IN (SELECT b1 FROM b WHERE EXISTS (SELECT 1 FROM c WHERE c2=b2 OR c2=b3))
----
anti-join (cross)
 ├── columns: d3:3 d1:1 d2:2
 ├── scan d
 │    └── columns: d1:1 d2:2 d3:3
 ├── project
 │    ├── columns: b1:8 b2:9 b3:10
 │    └── distinct-on
 │         ├── columns: b1:8 b2:9 b3:10 b.rowid:12!null
 │         ├── grouping columns: b.rowid:12!null
 │         ├── key: (12)
 │         ├── fd: (12)-->(8-10)
 │         ├── union-all
 │         │    ├── columns: b1:8 b2:9 b3:10 b.rowid:12!null
 │         │    ├── left columns: b1:23 b2:24 b3:25 b.rowid:27
 │         │    ├── right columns: b1:37 b2:38 b3:39 b.rowid:41
 │         │    ├── project
 │         │    │    ├── columns: b1:23 b2:24 b3:25 b.rowid:27!null
 │         │    │    ├── key: (27)
 │         │    │    ├── fd: (27)-->(23-25)
 │         │    │    └── inner-join (hash)
 │         │    │         ├── columns: b1:23 b2:24!null b3:25 b.rowid:27!null c2:31!null
 │         │    │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │         │    │         ├── key: (27)
 │         │    │         ├── fd: (27)-->(23-25), (24)==(31), (31)==(24)
 │         │    │         ├── scan b
 │         │    │         │    ├── columns: b1:23 b2:24 b3:25 b.rowid:27!null
 │         │    │         │    ├── key: (27)
 │         │    │         │    └── fd: (27)-->(23-25)
 │         │    │         ├── distinct-on
 │         │    │         │    ├── columns: c2:31
 │         │    │         │    ├── grouping columns: c2:31
 │         │    │         │    ├── key: (31)
 │         │    │         │    └── scan c
 │         │    │         │         └── columns: c2:31
 │         │    │         └── filters
 │         │    │              └── c2:31 = b2:24 [outer=(24,31), constraints=(/24: (/NULL - ]; /31: (/NULL - ]), fd=(24)==(31), (31)==(24)]
 │         │    └── project
 │         │         ├── columns: b1:37 b2:38 b3:39 b.rowid:41!null
 │         │         ├── key: (41)
 │         │         ├── fd: (41)-->(37-39)
 │         │         └── inner-join (hash)
 │         │              ├── columns: b1:37 b2:38 b3:39!null b.rowid:41!null c2:45!null
 │         │              ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │         │              ├── key: (41)
 │         │              ├── fd: (41)-->(37-39), (39)==(45), (45)==(39)
 │         │              ├── scan b
 │         │              │    ├── columns: b1:37 b2:38 b3:39 b.rowid:41!null
 │         │              │    ├── key: (41)
 │         │              │    └── fd: (41)-->(37-39)
 │         │              ├── distinct-on
 │         │              │    ├── columns: c2:45
 │         │              │    ├── grouping columns: c2:45
 │         │              │    ├── key: (45)
 │         │              │    └── scan c
 │         │              │         └── columns: c2:45
 │         │              └── filters
 │         │                   └── c2:45 = b3:39 [outer=(39,45), constraints=(/39: (/NULL - ]; /45: (/NULL - ]), fd=(39)==(45), (45)==(39)]
 │         └── aggregations
 │              ├── const-agg [as=b1:8, outer=(8)]
 │              │    └── b1:8
 │              ├── const-agg [as=b2:9, outer=(9)]
 │              │    └── b2:9
 │              └── const-agg [as=b3:10, outer=(10)]
 │                   └── b3:10
 └── filters
      └── (d1:1 = b1:8) IS NOT false [outer=(1,8)]

# NOT IN subquery, 2 columns
opt expect=SplitDisjunctionOfJoinTerms
SELECT d3,d1,d2 FROM d WHERE (d1,d3) NOT IN (SELECT b1,b2 FROM b WHERE EXISTS (SELECT 1 FROM c WHERE c2=b2 OR c2=b3))
----
anti-join (cross)
 ├── columns: d3:3 d1:1 d2:2
 ├── immutable
 ├── scan d
 │    └── columns: d1:1 d2:2 d3:3
 ├── project
 │    ├── columns: column23:23
 │    ├── project
 │    │    ├── columns: b1:8 b2:9 b3:10
 │    │    └── distinct-on
 │    │         ├── columns: b1:8 b2:9 b3:10 b.rowid:12!null
 │    │         ├── grouping columns: b.rowid:12!null
 │    │         ├── key: (12)
 │    │         ├── fd: (12)-->(8-10)
 │    │         ├── union-all
 │    │         │    ├── columns: b1:8 b2:9 b3:10 b.rowid:12!null
 │    │         │    ├── left columns: b1:24 b2:25 b3:26 b.rowid:28
 │    │         │    ├── right columns: b1:38 b2:39 b3:40 b.rowid:42
 │    │         │    ├── project
 │    │         │    │    ├── columns: b1:24 b2:25 b3:26 b.rowid:28!null
 │    │         │    │    ├── key: (28)
 │    │         │    │    ├── fd: (28)-->(24-26)
 │    │         │    │    └── inner-join (hash)
 │    │         │    │         ├── columns: b1:24 b2:25!null b3:26 b.rowid:28!null c2:32!null
 │    │         │    │         ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │    │         │    │         ├── key: (28)
 │    │         │    │         ├── fd: (28)-->(24-26), (25)==(32), (32)==(25)
 │    │         │    │         ├── scan b
 │    │         │    │         │    ├── columns: b1:24 b2:25 b3:26 b.rowid:28!null
 │    │         │    │         │    ├── key: (28)
 │    │         │    │         │    └── fd: (28)-->(24-26)
 │    │         │    │         ├── distinct-on
 │    │         │    │         │    ├── columns: c2:32
 │    │         │    │         │    ├── grouping columns: c2:32
 │    │         │    │         │    ├── key: (32)
 │    │         │    │         │    └── scan c
 │    │         │    │         │         └── columns: c2:32
 │    │         │    │         └── filters
 │    │         │    │              └── c2:32 = b2:25 [outer=(25,32), constraints=(/25: (/NULL - ]; /32: (/NULL - ]), fd=(25)==(32), (32)==(25)]
 │    │         │    └── project
 │    │         │         ├── columns: b1:38 b2:39 b3:40 b.rowid:42!null
 │    │         │         ├── key: (42)
 │    │         │         ├── fd: (42)-->(38-40)
 │    │         │         └── inner-join (hash)
 │    │         │              ├── columns: b1:38 b2:39 b3:40!null b.rowid:42!null c2:46!null
 │    │         │              ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │    │         │              ├── key: (42)
 │    │         │              ├── fd: (42)-->(38-40), (40)==(46), (46)==(40)
 │    │         │              ├── scan b
 │    │         │              │    ├── columns: b1:38 b2:39 b3:40 b.rowid:42!null
 │    │         │              │    ├── key: (42)
 │    │         │              │    └── fd: (42)-->(38-40)
 │    │         │              ├── distinct-on
 │    │         │              │    ├── columns: c2:46
 │    │         │              │    ├── grouping columns: c2:46
 │    │         │              │    ├── key: (46)
 │    │         │              │    └── scan c
 │    │         │              │         └── columns: c2:46
 │    │         │              └── filters
 │    │         │                   └── c2:46 = b3:40 [outer=(40,46), constraints=(/40: (/NULL - ]; /46: (/NULL - ]), fd=(40)==(46), (46)==(40)]
 │    │         └── aggregations
 │    │              ├── const-agg [as=b1:8, outer=(8)]
 │    │              │    └── b1:8
 │    │              ├── const-agg [as=b2:9, outer=(9)]
 │    │              │    └── b2:9
 │    │              └── const-agg [as=b3:10, outer=(10)]
 │    │                   └── b3:10
 │    └── projections
 │         └── (b1:8, b2:9) [as=column23:23, outer=(8,9)]
 └── filters
      └── (column23:23 = (d1:1, d3:3)) IS NOT false [outer=(1,3,23), immutable]

# The conjuncts under the top-level disjunct contain no join terms directly,
# but are nested in another OR. Join terms should still be detected.
opt expect=SplitDisjunctionOfJoinTerms
SELECT * FROM a t1, a t2 WHERE (((t1.a1 = t2.a1 OR t1.a1 = t2.a2) AND (t1.a2 = t2.a2 OR t1.a2 = t2.a2)) OR
                                ((t1.a1+1 = t2.a1 OR t1.a1+4 = t2.a2) AND (t1.a2+8 = t2.a2 OR t1.a2+9 = t2.a2)))
----
inner-join (cross)
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null a1:7!null a2:8!null a3:9!null a4:10!null
 ├── immutable
 ├── key: (1-4,7-10)
 ├── scan a [as=t1]
 │    ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null
 │    └── key: (1-4)
 ├── scan a [as=t2]
 │    ├── columns: t2.a1:7!null t2.a2:8!null t2.a3:9!null t2.a4:10!null
 │    └── key: (7-10)
 └── filters
      └── (((t1.a1:1 = t2.a1:7) OR (t1.a1:1 = t2.a2:8)) AND (t1.a2:2 = t2.a2:8)) OR (((t2.a1:7 = (t1.a1:1 + 1)) OR (t2.a2:8 = (t1.a1:1 + 4))) AND ((t2.a2:8 = (t1.a2:2 + 8)) OR (t2.a2:8 = (t1.a2:2 + 9)))) [outer=(1,2,7,8), immutable, constraints=(/8: (/NULL - ])]

# Negative Tests
# No equijoin terms. Must be at least one equality predicate referencing
# columns from both tables.
opt expect-not=SplitDisjunctionOfJoinTerms
SELECT * FROM a t1, a t2 WHERE (t1.a2 = 1 OR t2.a2 = 1)
----
inner-join (cross)
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null a1:7!null a2:8!null a3:9!null a4:10!null
 ├── key: (1-4,7-10)
 ├── scan a [as=t1]
 │    ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null
 │    └── key: (1-4)
 ├── scan a [as=t2]
 │    ├── columns: t2.a1:7!null t2.a2:8!null t2.a3:9!null t2.a4:10!null
 │    └── key: (7-10)
 └── filters
      └── (t1.a2:2 = 1) OR (t2.a2:8 = 1) [outer=(2,8)]

# No equijoin terms. Must be at least one equality predicate referencing
# columns from both tables.
opt expect-not=SplitDisjunctionOfJoinTerms
SELECT * FROM a t1, a t2 WHERE (t1.a2 > t2.a2 AND t1.a3 > t2.a3 OR t2.a2 = 1)
----
inner-join (cross)
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null a1:7!null a2:8!null a3:9!null a4:10!null
 ├── key: (1-4,7-10)
 ├── scan a [as=t1]
 │    ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null
 │    └── key: (1-4)
 ├── scan a [as=t2]
 │    ├── columns: t2.a1:7!null t2.a2:8!null t2.a3:9!null t2.a4:10!null
 │    └── key: (7-10)
 └── filters
      └── ((t1.a2:2 > t2.a2:8) AND (t1.a3:3 > t2.a3:9)) OR (t2.a2:8 = 1) [outer=(2,3,8,9), constraints=(/8: (/NULL - ])]

# Outer join not supported with this optimization
opt expect-not=SplitDisjunctionOfJoinTerms
SELECT * FROM a t1 LEFT OUTER JOIN a t2 ON (t1.a2 = t2.a2 OR t1.a3 = t2.a3)
----
left-join (cross)
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null a1:7 a2:8 a3:9 a4:10
 ├── key: (1-4,7-10)
 ├── scan a [as=t1]
 │    ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null
 │    └── key: (1-4)
 ├── scan a [as=t2]
 │    ├── columns: t2.a1:7!null t2.a2:8!null t2.a3:9!null t2.a4:10!null
 │    └── key: (7-10)
 └── filters
      └── (t1.a2:2 = t2.a2:8) OR (t1.a3:3 = t2.a3:9) [outer=(2,3,8,9)]

# Outer join not supported with this optimization
opt expect-not=SplitDisjunctionOfJoinTerms
SELECT * FROM a t1 FULL OUTER JOIN a t2 ON (t1.a2 = t2.a2 OR t1.a3 = t2.a3)
----
full-join (cross)
 ├── columns: a1:1 a2:2 a3:3 a4:4 a1:7 a2:8 a3:9 a4:10
 ├── key: (1-4,7-10)
 ├── scan a [as=t1]
 │    ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null
 │    └── key: (1-4)
 ├── scan a [as=t2]
 │    ├── columns: t2.a1:7!null t2.a2:8!null t2.a3:9!null t2.a4:10!null
 │    └── key: (7-10)
 └── filters
      └── (t1.a2:2 = t2.a2:8) OR (t1.a3:3 = t2.a3:9) [outer=(2,3,8,9)]

# Complex join condition where we can't decorrelate, so the join terms aren't
# between 2 scans.
opt expect-not=SplitDisjunctionOfJoinTerms
SELECT * FROM a t1 WHERE a2 IN (SELECT a2 from a t2 WHERE t1.a3 = t2.a3 OR t1.a1 = t2.a1)
                   OR    a2 IN (SELECT a2 from a t3 WHERE t3.a3 = t3.a3 OR t3.a1 = t3.a1)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── key: (1-4)
 └── select
      ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null case:21
      ├── key: (1-4)
      ├── fd: (1-4)-->(21)
      ├── project
      │    ├── columns: case:21 t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null
      │    ├── key: (1-4)
      │    ├── fd: (1-4)-->(21)
      │    ├── group-by (hash)
      │    │    ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null bool_or:20
      │    │    ├── grouping columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null
      │    │    ├── key: (1-4)
      │    │    ├── fd: (1-4)-->(20)
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null t2.a1:7 t2.a2:8 t2.a3:9 notnull:19
      │    │    │    ├── fd: (8)-->(19)
      │    │    │    ├── scan a [as=t1]
      │    │    │    │    ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null
      │    │    │    │    └── key: (1-4)
      │    │    │    ├── project
      │    │    │    │    ├── columns: notnull:19!null t2.a1:7!null t2.a2:8!null t2.a3:9!null
      │    │    │    │    ├── fd: (8)-->(19)
      │    │    │    │    ├── scan a [as=t2]
      │    │    │    │    │    └── columns: t2.a1:7!null t2.a2:8!null t2.a3:9!null
      │    │    │    │    └── projections
      │    │    │    │         └── t2.a2:8 IS NOT NULL [as=notnull:19, outer=(8)]
      │    │    │    └── filters
      │    │    │         ├── (t1.a3:3 = t2.a3:9) OR (t1.a1:1 = t2.a1:7) [outer=(1,3,7,9)]
      │    │    │         └── t1.a2:2 = t2.a2:8 [outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ]), fd=(2)==(8), (8)==(2)]
      │    │    └── aggregations
      │    │         └── bool-or [as=bool_or:20, outer=(19)]
      │    │              └── notnull:19
      │    └── projections
      │         └── CASE WHEN bool_or:20 AND (t1.a2:2 IS NOT NULL) THEN true WHEN bool_or:20 IS NULL THEN false ELSE CAST(NULL AS BOOL) END [as=case:21, outer=(2,20)]
      └── filters
           └── or [outer=(2,21), correlated-subquery]
                ├── case:21
                └── any: eq
                     ├── project
                     │    ├── columns: t3.a2:14!null
                     │    └── select
                     │         ├── columns: t3.a1:13!null t3.a2:14!null t3.a3:15!null
                     │         ├── scan a [as=t3]
                     │         │    └── columns: t3.a1:13!null t3.a2:14!null t3.a3:15!null
                     │         └── filters
                     │              └── ((t3.a3:15 IS DISTINCT FROM CAST(NULL AS INT8)) OR CAST(NULL AS BOOL)) OR ((t3.a1:13 IS DISTINCT FROM CAST(NULL AS INT8)) OR CAST(NULL AS BOOL)) [outer=(13,15)]
                     └── t1.a2:2

# Complex join condition where we can't decorrelate, so the join terms aren't
# between 2 scans.
opt expect-not=SplitDisjunctionOfJoinTerms
SELECT * FROM a t1 WHERE a2 NOT IN (SELECT a2 from a t2 WHERE t1.a3 = t2.a3 OR t1.a1 = t2.a1)
                   OR    a2 NOT IN (SELECT a2 from a t3 WHERE t3.a3 = t3.a3 OR t3.a1 = t3.a1)
----
project
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null
 ├── key: (1-4)
 └── select
      ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null case:21
      ├── key: (1-4)
      ├── fd: (1-4)-->(21)
      ├── project
      │    ├── columns: case:21 t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null
      │    ├── key: (1-4)
      │    ├── fd: (1-4)-->(21)
      │    ├── group-by (hash)
      │    │    ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null bool_or:20
      │    │    ├── grouping columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null
      │    │    ├── key: (1-4)
      │    │    ├── fd: (1-4)-->(20)
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null t2.a1:7 t2.a2:8 t2.a3:9 notnull:19
      │    │    │    ├── fd: (8)-->(19)
      │    │    │    ├── scan a [as=t1]
      │    │    │    │    ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null
      │    │    │    │    └── key: (1-4)
      │    │    │    ├── project
      │    │    │    │    ├── columns: notnull:19!null t2.a1:7!null t2.a2:8!null t2.a3:9!null
      │    │    │    │    ├── fd: (8)-->(19)
      │    │    │    │    ├── scan a [as=t2]
      │    │    │    │    │    └── columns: t2.a1:7!null t2.a2:8!null t2.a3:9!null
      │    │    │    │    └── projections
      │    │    │    │         └── t2.a2:8 IS NOT NULL [as=notnull:19, outer=(8)]
      │    │    │    └── filters
      │    │    │         ├── (t1.a3:3 = t2.a3:9) OR (t1.a1:1 = t2.a1:7) [outer=(1,3,7,9)]
      │    │    │         └── t1.a2:2 = t2.a2:8 [outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ]), fd=(2)==(8), (8)==(2)]
      │    │    └── aggregations
      │    │         └── bool-or [as=bool_or:20, outer=(19)]
      │    │              └── notnull:19
      │    └── projections
      │         └── CASE WHEN bool_or:20 AND (t1.a2:2 IS NOT NULL) THEN true WHEN bool_or:20 IS NULL THEN false ELSE CAST(NULL AS BOOL) END [as=case:21, outer=(2,20)]
      └── filters
           └── or [outer=(2,21), correlated-subquery]
                ├── NOT case:21
                └── not
                     └── any: eq
                          ├── project
                          │    ├── columns: t3.a2:14!null
                          │    └── select
                          │         ├── columns: t3.a1:13!null t3.a2:14!null t3.a3:15!null
                          │         ├── scan a [as=t3]
                          │         │    └── columns: t3.a1:13!null t3.a2:14!null t3.a3:15!null
                          │         └── filters
                          │              └── ((t3.a3:15 IS DISTINCT FROM CAST(NULL AS INT8)) OR CAST(NULL AS BOOL)) OR ((t3.a1:13 IS DISTINCT FROM CAST(NULL AS INT8)) OR CAST(NULL AS BOOL)) [outer=(13,15)]
                          └── t1.a2:2

# The conjuncts under the top-level disjunct contain no equijoin terms, and
# neither do the nested simple predicates.
opt expect-not=SplitDisjunctionOfJoinTerms
SELECT * FROM a t1, a t2 WHERE (((t1.a1 > t1.a1 OR t1.a1 <= t1.a2) AND (t1.a2 > t2.a2+1 OR t1.a1 <= t1.a2-1)) OR
                                ((t1.a1 > t1.a1+5 OR t1.a1 <= t1.a2+5) AND (t1.a2 > t2.a2+7 OR t1.a1 <= t1.a2-9)))
----
inner-join (cross)
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null a1:7!null a2:8!null a3:9!null a4:10!null
 ├── immutable
 ├── key: (1-4,7-10)
 ├── scan a [as=t1]
 │    ├── columns: t1.a1:1!null t1.a2:2!null t1.a3:3!null t1.a4:4!null
 │    └── key: (1-4)
 ├── scan a [as=t2]
 │    ├── columns: t2.a1:7!null t2.a2:8!null t2.a3:9!null t2.a4:10!null
 │    └── key: (7-10)
 └── filters
      └── ((((t1.a1:1 IS NOT DISTINCT FROM CAST(NULL AS INT8)) AND CAST(NULL AS BOOL)) OR (t1.a1:1 <= t1.a2:2)) AND ((t1.a2:2 > (t2.a2:8 + 1)) OR (t1.a1:1 <= (t1.a2:2 - 1)))) OR (((t1.a1:1 > (t1.a1:1 + 5)) OR (t1.a1:1 <= (t1.a2:2 + 5))) AND ((t1.a2:2 > (t2.a2:8 + 7)) OR (t1.a1:1 <= (t1.a2:2 - 9)))) [outer=(1,2,8), immutable, constraints=(/1: (/NULL - ])]

# Can't consume both OR terms with a join to a single Scan relation. Both sides
# of each equijoin predicate must be applied on a simple Scan or Select.
opt expect-not=SplitDisjunctionOfJoinTerms
SELECT * FROM a t2 INNER JOIN a t1 ON TRUE LEFT OUTER JOIN a t3 ON (t1.a1 = t3.a1 OR t2.a2 = t3.a2)
----
left-join (cross)
 ├── columns: a1:1!null a2:2!null a3:3!null a4:4!null a1:7!null a2:8!null a3:9!null a4:10!null a1:13 a2:14 a3:15 a4:16
 ├── key: (1-4,7-10,13-16)
 ├── inner-join (cross)
 │    ├── columns: t2.a1:1!null t2.a2:2!null t2.a3:3!null t2.a4:4!null t1.a1:7!null t1.a2:8!null t1.a3:9!null t1.a4:10!null
 │    ├── key: (1-4,7-10)
 │    ├── scan a [as=t2]
 │    │    ├── columns: t2.a1:1!null t2.a2:2!null t2.a3:3!null t2.a4:4!null
 │    │    └── key: (1-4)
 │    ├── scan a [as=t1]
 │    │    ├── columns: t1.a1:7!null t1.a2:8!null t1.a3:9!null t1.a4:10!null
 │    │    └── key: (7-10)
 │    └── filters (true)
 ├── scan a [as=t3]
 │    ├── columns: t3.a1:13!null t3.a2:14!null t3.a3:15!null t3.a4:16!null
 │    └── key: (13-16)
 └── filters
      └── (t1.a1:7 = t3.a1:13) OR (t2.a2:2 = t3.a2:14) [outer=(2,7,13,14)]
