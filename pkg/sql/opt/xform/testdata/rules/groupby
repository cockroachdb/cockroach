exec-ddl
CREATE TABLE abc (
  a CHAR PRIMARY KEY,
  b FLOAT,
  c BOOLEAN,
  d DECIMAL
)
----
TABLE abc
 ├── a string not null
 ├── b float
 ├── c bool
 ├── d decimal
 └── INDEX primary
      └── a string not null

# --------------------------------------------------
# ReplaceMinWithLimit
# --------------------------------------------------

opt
SELECT min(a) FROM abc
----
scalar-group-by
 ├── columns: min:5(string)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(5)
 ├── scan abc
 │    ├── columns: a:1(string!null)
 │    ├── limit: 1
 │    ├── key: ()
 │    └── fd: ()-->(1)
 └── aggregations
      └── const-agg [type=string, outer=(1)]
           └── variable: a [type=string]

# Verify the rule still fires even if DISTINCT is used.
opt
SELECT min(DISTINCT a) FROM abc
----
scalar-group-by
 ├── columns: min:5(string)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(5)
 ├── scan abc
 │    ├── columns: a:1(string!null)
 │    ├── limit: 1
 │    ├── key: ()
 │    └── fd: ()-->(1)
 └── aggregations
      └── const-agg [type=string, outer=(1)]
           └── variable: a [type=string]

opt
SELECT min(b) FROM abc
----
scalar-group-by
 ├── columns: min:5(float)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(5)
 ├── scan abc
 │    └── columns: b:2(float)
 └── aggregations
      └── min [type=float, outer=(2)]
           └── variable: b [type=float]

exec-ddl
CREATE TABLE xyz (
  x INT PRIMARY KEY,
  y INT,
  z FLOAT,
  INDEX xy (x, y),
  INDEX zyx (z, y, x),
  INDEX yy (y),
  FAMILY (x),
  FAMILY (y),
  FAMILY (z)
)
----
TABLE xyz
 ├── x int not null
 ├── y int
 ├── z float
 ├── INDEX primary
 │    └── x int not null
 ├── INDEX xy
 │    ├── x int not null
 │    └── y int
 ├── INDEX zyx
 │    ├── z float
 │    ├── y int
 │    └── x int not null
 └── INDEX yy
      ├── y int
      └── x int not null

opt
SELECT min(y) FROM xyz where z=7
----
scalar-group-by
 ├── columns: min:4(int)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(4)
 ├── scan xyz@zyx
 │    ├── columns: y:2(int!null) z:3(float!null)
 │    ├── constraint: /3/2/1: (/7.0/NULL - /7.0]
 │    ├── limit: 1
 │    ├── key: ()
 │    └── fd: ()-->(2,3)
 └── aggregations
      └── const-agg [type=int, outer=(2)]
           └── variable: y [type=int]

# ReplaceMaxWithLimit has the same behavior with max() as
# the previous min() query because z is the prefix of a unique key
opt
SELECT max(y) FROM xyz where z=7
----
scalar-group-by
 ├── columns: max:4(int)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(4)
 ├── scan xyz@zyx,rev
 │    ├── columns: y:2(int!null) z:3(float!null)
 │    ├── constraint: /3/2/1: (/7.0/NULL - /7.0]
 │    ├── limit: 1(rev)
 │    ├── key: ()
 │    └── fd: ()-->(2,3)
 └── aggregations
      └── const-agg [type=int, outer=(2)]
           └── variable: y [type=int]

# We expect ReplaceMinWithLimit not to be preferred here.
# This is because we know nothing about the ordering of y
# on the index xy after a scan on xy with x>7.
opt
SELECT min(y) FROM xyz WHERE x>7
----
scalar-group-by
 ├── columns: min:4(int)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(4)
 ├── scan xyz@xy
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── constraint: /1/2: [/8 - ]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── aggregations
      └── min [type=int, outer=(2)]
           └── variable: y [type=int]

# We expect ReplaceMaxWithLimit not to be preferred here.
# This is because we know nothing about the ordering of y
# on the index xy after a scan on xy with x>7
opt
SELECT max(y) FROM xyz WHERE x>7
----
scalar-group-by
 ├── columns: max:4(int)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(4)
 ├── scan xyz@xy
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── constraint: /1/2: [/8 - ]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── aggregations
      └── max [type=int, outer=(2)]
           └── variable: y [type=int]

opt
SELECT max(x) FROM xyz
----
scalar-group-by
 ├── columns: max:4(int)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(4)
 ├── scan xyz@xy,rev
 │    ├── columns: x:1(int!null)
 │    ├── limit: 1(rev)
 │    ├── key: ()
 │    └── fd: ()-->(1)
 └── aggregations
      └── const-agg [type=int, outer=(1)]
           └── variable: x [type=int]

opt
SELECT min(x) FROM xyz
----
scalar-group-by
 ├── columns: min:4(int)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(4)
 ├── scan xyz@xy
 │    ├── columns: x:1(int!null)
 │    ├── limit: 1
 │    ├── key: ()
 │    └── fd: ()-->(1)
 └── aggregations
      └── const-agg [type=int, outer=(1)]
           └── variable: x [type=int]

opt
SELECT min(x) FROM xyz WHERE x in (0, 4, 7)
----
scalar-group-by
 ├── columns: min:4(int)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(4)
 ├── scan xyz@xy
 │    ├── columns: x:1(int!null)
 │    ├── constraint: /1/2: [/0 - /0] [/4 - /4] [/7 - /7]
 │    ├── limit: 1
 │    ├── key: ()
 │    └── fd: ()-->(1)
 └── aggregations
      └── const-agg [type=int, outer=(1)]
           └── variable: x [type=int]

opt
SELECT max(x) FROM xyz WHERE x in (0, 4, 7)
----
scalar-group-by
 ├── columns: max:4(int)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(4)
 ├── scan xyz@xy,rev
 │    ├── columns: x:1(int!null)
 │    ├── constraint: /1/2: [/0 - /0] [/4 - /4] [/7 - /7]
 │    ├── limit: 1(rev)
 │    ├── key: ()
 │    └── fd: ()-->(1)
 └── aggregations
      └── const-agg [type=int, outer=(1)]
           └── variable: x [type=int]

opt
SELECT min(y) FROM xyz
----
scalar-group-by
 ├── columns: min:4(int)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(4)
 ├── scan xyz@yy
 │    ├── columns: y:2(int!null)
 │    ├── constraint: /2/1: (/NULL - ]
 │    ├── limit: 1
 │    ├── key: ()
 │    └── fd: ()-->(2)
 └── aggregations
      └── const-agg [type=int, outer=(2)]
           └── variable: y [type=int]

opt
SELECT min(y), min(y) FROM xyz
----
scalar-group-by
 ├── columns: min:4(int) min:4(int)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(4)
 ├── scan xyz@yy
 │    ├── columns: y:2(int!null)
 │    ├── constraint: /2/1: (/NULL - ]
 │    ├── limit: 1
 │    ├── key: ()
 │    └── fd: ()-->(2)
 └── aggregations
      └── const-agg [type=int, outer=(2)]
           └── variable: y [type=int]

# ReplaceMinWithLimit does not apply when there is
# a grouping column
opt
SELECT min(y) FROM xyz GROUP BY y
----
project
 ├── columns: min:4(int)
 └── group-by
      ├── columns: y:2(int) min:4(int)
      ├── grouping columns: y:2(int)
      ├── key: (2)
      ├── fd: (2)-->(4)
      ├── scan xyz@xy
      │    └── columns: y:2(int)
      └── aggregations
           └── min [type=int, outer=(2)]
                └── variable: y [type=int]

# ReplaceMaxWithLimit does not apply when there is
# a grouping column
opt
SELECT max(y) FROM xyz GROUP BY y
----
project
 ├── columns: max:4(int)
 └── group-by
      ├── columns: y:2(int) max:4(int)
      ├── grouping columns: y:2(int)
      ├── key: (2)
      ├── fd: (2)-->(4)
      ├── scan xyz@xy
      │    └── columns: y:2(int)
      └── aggregations
           └── max [type=int, outer=(2)]
                └── variable: y [type=int]

# ReplaceMinWithLimit does not apply when there is
# a grouping column
opt
SELECT min(y) FROM xyz GROUP BY x
----
project
 ├── columns: min:4(int)
 └── group-by
      ├── columns: x:1(int!null) min:4(int)
      ├── grouping columns: x:1(int!null)
      ├── key: (1)
      ├── fd: (1)-->(4)
      ├── scan xyz@xy
      │    ├── columns: x:1(int!null) y:2(int)
      │    ├── key: (1)
      │    └── fd: (1)-->(2)
      └── aggregations
           └── min [type=int, outer=(2)]
                └── variable: y [type=int]

# ReplaceMinWithLimit does not apply on multiple aggregations
# on different columns
opt
SELECT min(y), min(x) FROM xyz
----
scalar-group-by
 ├── columns: min:4(int) min:5(int)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(4,5)
 ├── scan xyz@xy
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── aggregations
      ├── min [type=int, outer=(2)]
      │    └── variable: y [type=int]
      └── min [type=int, outer=(1)]
           └── variable: x [type=int]


# ReplaceMaxWithLimit does not apply on multiple aggregations
# on different columns
opt
SELECT max(y), max(x) FROM xyz
----
scalar-group-by
 ├── columns: max:4(int) max:5(int)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(4,5)
 ├── scan xyz@xy
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── aggregations
      ├── max [type=int, outer=(2)]
      │    └── variable: y [type=int]
      └── max [type=int, outer=(1)]
           └── variable: x [type=int]

# ReplaceMinWithLimit does not apply with
# multiple grouping columns
opt
SELECT x,min(y) FROM xyz GROUP BY x,y
----
group-by
 ├── columns: x:1(int!null) min:4(int)
 ├── grouping columns: x:1(int!null)
 ├── key: (1)
 ├── fd: (1)-->(4)
 ├── scan xyz@xy
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── aggregations
      └── min [type=int, outer=(2)]
           └── variable: y [type=int]

# ReplaceMaxWithLimit does not apply with
# multiple grouping columns
opt
SELECT x,max(y) FROM xyz GROUP BY x,y
----
group-by
 ├── columns: x:1(int!null) max:4(int)
 ├── grouping columns: x:1(int!null)
 ├── key: (1)
 ├── fd: (1)-->(4)
 ├── scan xyz@xy
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── aggregations
      └── max [type=int, outer=(2)]
           └── variable: y [type=int]

# ReplaceMinWithLimit does not apply to non-scalar
# aggregates
opt
SELECT min(x), count(y) FROM xyz GROUP BY x,y
----
project
 ├── columns: min:4(int) count:5(int)
 └── group-by
      ├── columns: x:1(int!null) min:4(int) count:5(int)
      ├── grouping columns: x:1(int!null)
      ├── key: (1)
      ├── fd: (1)-->(4,5)
      ├── scan xyz@xy
      │    ├── columns: x:1(int!null) y:2(int)
      │    ├── key: (1)
      │    └── fd: (1)-->(2)
      └── aggregations
           ├── min [type=int, outer=(1)]
           │    └── variable: x [type=int]
           └── count [type=int, outer=(2)]
                └── variable: y [type=int]

# ReplaceMaxWithLimit does not apply to non-scalar
# aggregates
opt
SELECT max(x), count(y) FROM xyz GROUP BY x,y
----
project
 ├── columns: max:4(int) count:5(int)
 └── group-by
      ├── columns: x:1(int!null) max:4(int) count:5(int)
      ├── grouping columns: x:1(int!null)
      ├── key: (1)
      ├── fd: (1)-->(4,5)
      ├── scan xyz@xy
      │    ├── columns: x:1(int!null) y:2(int)
      │    ├── key: (1)
      │    └── fd: (1)-->(2)
      └── aggregations
           ├── max [type=int, outer=(1)]
           │    └── variable: x [type=int]
           └── count [type=int, outer=(2)]
                └── variable: y [type=int]

memo
SELECT min(a) FROM abc
----
memo (optimized, ~4KB, required=[presentation: min:5])
 ├── G1: (scalar-group-by G2 G3 cols=()) (scalar-group-by G4 G5 cols=())
 │    └── [presentation: min:5]
 │         ├── best: (scalar-group-by G4 G5 cols=())
 │         └── cost: 1.07
 ├── G2: (scan abc,cols=(1))
 │    ├── [ordering: +1]
 │    │    ├── best: (scan abc,cols=(1))
 │    │    └── cost: 1050.00
 │    └── []
 │         ├── best: (scan abc,cols=(1))
 │         └── cost: 1050.00
 ├── G3: (aggregations G6)
 ├── G4: (limit G2 G7 ordering=+1) (scan abc,cols=(1),lim=1)
 │    └── []
 │         ├── best: (scan abc,cols=(1),lim=1)
 │         └── cost: 1.05
 ├── G5: (aggregations G8)
 ├── G6: (min G9)
 ├── G7: (const 1)
 ├── G8: (const-agg G9)
 └── G9: (variable a)

memo
SELECT min(b) FROM abc
----
memo (optimized, ~5KB, required=[presentation: min:5])
 ├── G1: (scalar-group-by G2 G3 cols=()) (scalar-group-by G4 G5 cols=())
 │    └── [presentation: min:5]
 │         ├── best: (scalar-group-by G2 G3 cols=())
 │         └── cost: 1060.01
 ├── G2: (scan abc,cols=(2))
 │    ├── [ordering: +2]
 │    │    ├── best: (sort G2)
 │    │    └── cost: 1259.32
 │    └── []
 │         ├── best: (scan abc,cols=(2))
 │         └── cost: 1050.00
 ├── G3: (aggregations G6)
 ├── G4: (limit G7 G8 ordering=+2)
 │    └── []
 │         ├── best: (limit G7="[ordering: +2]" G8 ordering=+2)
 │         └── cost: 1266.95
 ├── G5: (aggregations G9)
 ├── G6: (min G10)
 ├── G7: (select G2 G11)
 │    ├── [ordering: +2]
 │    │    ├── best: (sort G7)
 │    │    └── cost: 1266.94
 │    └── []
 │         ├── best: (select G2 G11)
 │         └── cost: 1060.00
 ├── G8: (const 1)
 ├── G9: (const-agg G10)
 ├── G10: (variable b)
 ├── G11: (filters G12)
 ├── G12: (is-not G10 G13)
 └── G13: (null)

memo
SELECT max(a) FROM abc
----
memo (optimized, ~4KB, required=[presentation: max:5])
 ├── G1: (scalar-group-by G2 G3 cols=()) (scalar-group-by G4 G5 cols=())
 │    └── [presentation: max:5]
 │         ├── best: (scalar-group-by G4 G5 cols=())
 │         └── cost: 1.07
 ├── G2: (scan abc,cols=(1))
 │    ├── [ordering: -1]
 │    │    ├── best: (scan abc,rev,cols=(1))
 │    │    └── cost: 1149.66
 │    └── []
 │         ├── best: (scan abc,cols=(1))
 │         └── cost: 1050.00
 ├── G3: (aggregations G6)
 ├── G4: (limit G2 G7 ordering=-1) (scan abc,rev,cols=(1),lim=1(rev))
 │    └── []
 │         ├── best: (scan abc,rev,cols=(1),lim=1(rev))
 │         └── cost: 1.05
 ├── G5: (aggregations G8)
 ├── G6: (max G9)
 ├── G7: (const 1)
 ├── G8: (const-agg G9)
 └── G9: (variable a)

memo
SELECT max(b) FROM abc
----
memo (optimized, ~5KB, required=[presentation: max:5])
 ├── G1: (scalar-group-by G2 G3 cols=()) (scalar-group-by G4 G5 cols=())
 │    └── [presentation: max:5]
 │         ├── best: (scalar-group-by G2 G3 cols=())
 │         └── cost: 1060.01
 ├── G2: (scan abc,cols=(2))
 │    ├── [ordering: -2]
 │    │    ├── best: (sort G2)
 │    │    └── cost: 1259.32
 │    └── []
 │         ├── best: (scan abc,cols=(2))
 │         └── cost: 1050.00
 ├── G3: (aggregations G6)
 ├── G4: (limit G7 G8 ordering=-2)
 │    └── []
 │         ├── best: (limit G7="[ordering: -2]" G8 ordering=-2)
 │         └── cost: 1266.95
 ├── G5: (aggregations G9)
 ├── G6: (max G10)
 ├── G7: (select G2 G11)
 │    ├── [ordering: -2]
 │    │    ├── best: (sort G7)
 │    │    └── cost: 1266.94
 │    └── []
 │         ├── best: (select G2 G11)
 │         └── cost: 1060.00
 ├── G8: (const 1)
 ├── G9: (const-agg G10)
 ├── G10: (variable b)
 ├── G11: (filters G12)
 ├── G12: (is-not G10 G13)
 └── G13: (null)

# --------------------------------------------------
# ReplaceMaxWithLimit
# --------------------------------------------------

opt
select max(a) FROM abc
----
scalar-group-by
 ├── columns: max:5(string)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(5)
 ├── scan abc,rev
 │    ├── columns: a:1(string!null)
 │    ├── limit: 1(rev)
 │    ├── key: ()
 │    └── fd: ()-->(1)
 └── aggregations
      └── const-agg [type=string, outer=(1)]
           └── variable: a [type=string]

# Verify the rule still fires even if DISTINCT is used.
opt
select max(DISTINCT a) FROM abc
----
scalar-group-by
 ├── columns: max:5(string)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(5)
 ├── scan abc,rev
 │    ├── columns: a:1(string!null)
 │    ├── limit: 1(rev)
 │    ├── key: ()
 │    └── fd: ()-->(1)
 └── aggregations
      └── const-agg [type=string, outer=(1)]
           └── variable: a [type=string]

opt
select max(b) FROM abc
----
scalar-group-by
 ├── columns: max:5(float)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(5)
 ├── scan abc
 │    └── columns: b:2(float)
 └── aggregations
      └── max [type=float, outer=(2)]
           └── variable: b [type=float]

memo
select max(b) from abc
----
memo (optimized, ~5KB, required=[presentation: max:5])
 ├── G1: (scalar-group-by G2 G3 cols=()) (scalar-group-by G4 G5 cols=())
 │    └── [presentation: max:5]
 │         ├── best: (scalar-group-by G2 G3 cols=())
 │         └── cost: 1060.01
 ├── G2: (scan abc,cols=(2))
 │    ├── [ordering: -2]
 │    │    ├── best: (sort G2)
 │    │    └── cost: 1259.32
 │    └── []
 │         ├── best: (scan abc,cols=(2))
 │         └── cost: 1050.00
 ├── G3: (aggregations G6)
 ├── G4: (limit G7 G8 ordering=-2)
 │    └── []
 │         ├── best: (limit G7="[ordering: -2]" G8 ordering=-2)
 │         └── cost: 1266.95
 ├── G5: (aggregations G9)
 ├── G6: (max G10)
 ├── G7: (select G2 G11)
 │    ├── [ordering: -2]
 │    │    ├── best: (sort G7)
 │    │    └── cost: 1266.94
 │    └── []
 │         ├── best: (select G2 G11)
 │         └── cost: 1060.00
 ├── G8: (const 1)
 ├── G9: (const-agg G10)
 ├── G10: (variable b)
 ├── G11: (filters G12)
 ├── G12: (is-not G10 G13)
 └── G13: (null)
