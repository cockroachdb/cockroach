exec-ddl
CREATE TABLE a
(
    k INT PRIMARY KEY,
    i INT,
    f FLOAT,
    s STRING,
    j JSON,
    INDEX s_idx (s) STORING (i, f),
    INDEX si_idx (s DESC, i) STORING (j)
)
----

# ---------------------------------------------------
# GenerateLimitedScans / PushLimitIntoConstrainedScan
# ---------------------------------------------------

opt
SELECT * FROM a LIMIT 1
----
scan a
 ├── columns: k:1!null i:2 f:3 s:4 j:5
 ├── limit: 1
 ├── key: ()
 └── fd: ()-->(1-5)

# Combine limit with needed columns.
opt
SELECT s FROM a LIMIT 1
----
scan a@s_idx
 ├── columns: s:4
 ├── limit: 1
 ├── key: ()
 └── fd: ()-->(4)

# Combine limit with constraint.
opt
SELECT s FROM a WHERE s='foo' LIMIT 1
----
scan a@s_idx
 ├── columns: s:4!null
 ├── constraint: /4/1: [/'foo' - /'foo']
 ├── limit: 1
 ├── key: ()
 └── fd: ()-->(4)

# Limit of a limit.
opt
SELECT s FROM (SELECT s, i FROM a ORDER BY s LIMIT 10) a ORDER BY s, i LIMIT 1
----
limit
 ├── columns: s:4  [hidden: i:2]
 ├── internal-ordering: +4,+2
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(2,4)
 ├── sort (segmented)
 │    ├── columns: i:2 s:4
 │    ├── cardinality: [0 - 10]
 │    ├── ordering: +4,+2
 │    ├── limit hint: 1.00
 │    └── scan a@s_idx
 │         ├── columns: i:2 s:4
 │         ├── limit: 10
 │         └── ordering: +4
 └── 1

# Don't push when scan doesn't satisfy limit's ordering.
opt
SELECT s FROM a ORDER BY f LIMIT 1
----
limit
 ├── columns: s:4  [hidden: f:3]
 ├── internal-ordering: +3
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(3,4)
 ├── sort
 │    ├── columns: f:3 s:4
 │    ├── ordering: +3
 │    ├── limit hint: 1.00
 │    └── scan a@s_idx
 │         └── columns: f:3 s:4
 └── 1

# Don't push when limit is not a constant.
opt
SELECT s FROM a LIMIT (SELECT k FROM a LIMIT 1)
----
limit
 ├── columns: s:4
 ├── side-effects
 ├── scan a@s_idx
 │    └── columns: s:4
 └── subquery
      └── scan a@s_idx
           ├── columns: k:6!null
           ├── limit: 1
           ├── key: ()
           └── fd: ()-->(6)

memo
SELECT s FROM a WHERE s='foo' LIMIT 1
----
memo (optimized, ~6KB, required=[presentation: s:4])
 ├── G1: (limit G2 G3) (scan a@s_idx,cols=(4),constrained,lim=1) (scan a@si_idx,cols=(4),constrained,lim=1)
 │    └── [presentation: s:4]
 │         ├── best: (scan a@s_idx,cols=(4),constrained,lim=1)
 │         └── cost: 1.06
 ├── G2: (select G4 G5) (scan a@s_idx,cols=(4),constrained) (scan a@si_idx,cols=(4),constrained)
 │    └── [limit hint: 1.00]
 │         ├── best: (scan a@s_idx,cols=(4),constrained)
 │         └── cost: 2.11
 ├── G3: (const 1)
 ├── G4: (scan a,cols=(4)) (scan a@s_idx,cols=(4)) (scan a@si_idx,cols=(4))
 │    └── [limit hint: 100.00]
 │         ├── best: (scan a@s_idx,cols=(4))
 │         └── cost: 210.02
 ├── G5: (filters G6)
 ├── G6: (eq G7 G8)
 ├── G7: (variable s)
 └── G8: (const 'foo')

# GenerateLimitedScans propagates row-level locking information.
opt
SELECT * FROM a LIMIT 1 FOR UPDATE
----
scan a
 ├── columns: k:1!null i:2 f:3 s:4 j:5
 ├── limit: 1
 ├── locking: for-update
 ├── key: ()
 └── fd: ()-->(1-5)

# PushLimitIntoConstrainedScan propagates row-level locking information.
opt
SELECT s FROM a WHERE s='foo' LIMIT 1 FOR UPDATE
----
scan a@s_idx
 ├── columns: s:4!null
 ├── constraint: /4/1: [/'foo' - /'foo']
 ├── limit: 1
 ├── locking: for-update
 ├── key: ()
 └── fd: ()-->(4)

# --------------------------------------------------
# PushLimitIntoIndexJoin
# --------------------------------------------------

exec-ddl
CREATE TABLE kuv (k INT PRIMARY KEY, u INT, v INT, INDEX (u))
----

opt
SELECT * FROM kuv ORDER BY u LIMIT 5
----
index-join kuv
 ├── columns: k:1!null u:2 v:3
 ├── cardinality: [0 - 5]
 ├── key: (1)
 ├── fd: (1)-->(2,3)
 ├── ordering: +2
 └── scan kuv@secondary
      ├── columns: k:1!null u:2
      ├── limit: 5
      ├── key: (1)
      ├── fd: (1)-->(2)
      └── ordering: +2

# Verify we don't push the limit if the ordering depends on a column not in the
# input index.
opt
SELECT * FROM kuv WHERE u > 1 AND u < 10 ORDER BY u, v LIMIT 5
----
limit
 ├── columns: k:1!null u:2!null v:3
 ├── internal-ordering: +2,+3
 ├── cardinality: [0 - 5]
 ├── key: (1)
 ├── fd: (1)-->(2,3)
 ├── ordering: +2,+3
 ├── sort (segmented)
 │    ├── columns: k:1!null u:2!null v:3
 │    ├── key: (1)
 │    ├── fd: (1)-->(2,3)
 │    ├── ordering: +2,+3
 │    ├── limit hint: 5.00
 │    └── index-join kuv
 │         ├── columns: k:1!null u:2!null v:3
 │         ├── key: (1)
 │         ├── fd: (1)-->(2,3)
 │         ├── ordering: +2
 │         └── scan kuv@secondary
 │              ├── columns: k:1!null u:2!null
 │              ├── constraint: /2/1: [/2 - /9]
 │              ├── key: (1)
 │              ├── fd: (1)-->(2)
 │              └── ordering: +2
 └── 5

exec-ddl
CREATE TABLE abcd (
  a INT PRIMARY KEY,
  b INT,
  c INT,
  d INT,
  INDEX b (b),
  INDEX cd (c,d),
  UNIQUE INDEX bcd (b,c,d)
)
----

opt
EXPLAIN SELECT * FROM abcd@b WHERE a >= 20 AND a <= 30 ORDER BY b DESC LIMIT 5
----
explain
 ├── columns: tree:5 field:6 description:7
 └── limit
      ├── columns: a:1!null b:2 c:3 d:4
      ├── internal-ordering: -2
      ├── cardinality: [0 - 5]
      ├── key: (1)
      ├── fd: (1)-->(2-4), (2-4)~~>(1)
      ├── ordering: -2
      ├── select
      │    ├── columns: a:1!null b:2 c:3 d:4
      │    ├── cardinality: [0 - 11]
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-4), (2-4)~~>(1)
      │    ├── ordering: -2
      │    ├── limit hint: 5.00
      │    ├── index-join abcd
      │    │    ├── columns: a:1!null b:2 c:3 d:4
      │    │    ├── key: (1)
      │    │    ├── fd: (1)-->(2-4), (2-4)~~>(1)
      │    │    ├── ordering: -2
      │    │    ├── limit hint: 454.55
      │    │    └── scan abcd@b,rev
      │    │         ├── columns: a:1!null b:2
      │    │         ├── flags: force-index=b
      │    │         ├── key: (1)
      │    │         ├── fd: (1)-->(2)
      │    │         ├── ordering: -2
      │    │         └── limit hint: 454.55
      │    └── filters
      │         └── (a:1 >= 20) AND (a:1 <= 30) [outer=(1), constraints=(/1: [/20 - /30]; tight)]
      └── 5

optsteps
EXPLAIN SELECT * FROM abcd@b WHERE a >= 20 AND a <= 30 ORDER BY b DESC LIMIT 5
----
================================================================================
Initial expression
  Cost: 10000000000000000159028911097599180468360808563945281389781327557747838772170381060813469985856815104.00
================================================================================
  explain
   ├── columns: tree:5 field:6 description:7
   └── sort
        ├── columns: a:1!null b:2 c:3 d:4
        ├── cardinality: [0 - 5]
        ├── key: (1)
        ├── fd: (1)-->(2-4), (2-4)~~>(1)
        ├── ordering: -2
        └── limit
             ├── columns: a:1!null b:2 c:3 d:4
             ├── internal-ordering: -2
             ├── cardinality: [0 - 5]
             ├── key: (1)
             ├── fd: (1)-->(2-4), (2-4)~~>(1)
             ├── sort
             │    ├── columns: a:1!null b:2 c:3 d:4
             │    ├── cardinality: [0 - 11]
             │    ├── key: (1)
             │    ├── fd: (1)-->(2-4), (2-4)~~>(1)
             │    ├── ordering: -2
             │    ├── limit hint: 5.00
             │    └── select
             │         ├── columns: a:1!null b:2 c:3 d:4
             │         ├── cardinality: [0 - 11]
             │         ├── key: (1)
             │         ├── fd: (1)-->(2-4), (2-4)~~>(1)
             │         ├── scan abcd
             │         │    ├── columns: a:1!null b:2 c:3 d:4
             │         │    ├── flags: force-index=b
             │         │    ├── key: (1)
             │         │    └── fd: (1)-->(2-4), (2-4)~~>(1)
             │         └── filters
             │              └── (a:1 >= 20) AND (a:1 <= 30) [outer=(1), constraints=(/1: [/20 - /30]; tight)]
             └── 5
================================================================================
SimplifySelectFilters
  Cost: 10000000000000000159028911097599180468360808563945281389781327557747838772170381060813469985856815104.00
================================================================================
   explain
    ├── columns: tree:5 field:6 description:7
    └── sort
         ├── columns: a:1!null b:2 c:3 d:4
         ├── cardinality: [0 - 5]
         ├── key: (1)
         ├── fd: (1)-->(2-4), (2-4)~~>(1)
         ├── ordering: -2
         └── limit
              ├── columns: a:1!null b:2 c:3 d:4
              ├── internal-ordering: -2
              ├── cardinality: [0 - 5]
              ├── key: (1)
              ├── fd: (1)-->(2-4), (2-4)~~>(1)
              ├── sort
              │    ├── columns: a:1!null b:2 c:3 d:4
  -           │    ├── cardinality: [0 - 11]
              │    ├── key: (1)
              │    ├── fd: (1)-->(2-4), (2-4)~~>(1)
              │    ├── ordering: -2
              │    ├── limit hint: 5.00
              │    └── select
              │         ├── columns: a:1!null b:2 c:3 d:4
  -           │         ├── cardinality: [0 - 11]
              │         ├── key: (1)
              │         ├── fd: (1)-->(2-4), (2-4)~~>(1)
              │         ├── scan abcd
              │         │    ├── columns: a:1!null b:2 c:3 d:4
              │         │    ├── flags: force-index=b
              │         │    ├── key: (1)
              │         │    └── fd: (1)-->(2-4), (2-4)~~>(1)
              │         └── filters
  -           │              └── (a:1 >= 20) AND (a:1 <= 30) [outer=(1), constraints=(/1: [/20 - /30]; tight)]
  +           │              ├── a:1 >= 20 [outer=(1), constraints=(/1: [/20 - ]; tight)]
  +           │              └── a:1 <= 30 [outer=(1), constraints=(/1: (/NULL - /30]; tight)]
              └── 5
================================================================================
ConsolidateSelectFilters
  Cost: 10000000000000000159028911097599180468360808563945281389781327557747838772170381060813469985856815104.00
================================================================================
   explain
    ├── columns: tree:5 field:6 description:7
    └── sort
         ├── columns: a:1!null b:2 c:3 d:4
         ├── cardinality: [0 - 5]
         ├── key: (1)
         ├── fd: (1)-->(2-4), (2-4)~~>(1)
         ├── ordering: -2
         └── limit
              ├── columns: a:1!null b:2 c:3 d:4
              ├── internal-ordering: -2
              ├── cardinality: [0 - 5]
              ├── key: (1)
              ├── fd: (1)-->(2-4), (2-4)~~>(1)
              ├── sort
              │    ├── columns: a:1!null b:2 c:3 d:4
  +           │    ├── cardinality: [0 - 11]
              │    ├── key: (1)
              │    ├── fd: (1)-->(2-4), (2-4)~~>(1)
              │    ├── ordering: -2
              │    ├── limit hint: 5.00
              │    └── select
              │         ├── columns: a:1!null b:2 c:3 d:4
  +           │         ├── cardinality: [0 - 11]
              │         ├── key: (1)
              │         ├── fd: (1)-->(2-4), (2-4)~~>(1)
              │         ├── scan abcd
              │         │    ├── columns: a:1!null b:2 c:3 d:4
              │         │    ├── flags: force-index=b
              │         │    ├── key: (1)
              │         │    └── fd: (1)-->(2-4), (2-4)~~>(1)
              │         └── filters
  -           │              ├── a:1 >= 20 [outer=(1), constraints=(/1: [/20 - ]; tight)]
  -           │              └── a:1 <= 30 [outer=(1), constraints=(/1: (/NULL - /30]; tight)]
  +           │              └── (a:1 >= 20) AND (a:1 <= 30) [outer=(1), constraints=(/1: [/20 - /30]; tight)]
              └── 5
================================================================================
GenerateIndexScans
  Cost: 5134.91
================================================================================
   explain
    ├── columns: tree:5 field:6 description:7
  - └── sort
  + └── limit
         ├── columns: a:1!null b:2 c:3 d:4
  +      ├── internal-ordering: -2
         ├── cardinality: [0 - 5]
         ├── key: (1)
         ├── fd: (1)-->(2-4), (2-4)~~>(1)
         ├── ordering: -2
  -      └── limit
  -           ├── columns: a:1!null b:2 c:3 d:4
  -           ├── internal-ordering: -2
  -           ├── cardinality: [0 - 5]
  -           ├── key: (1)
  -           ├── fd: (1)-->(2-4), (2-4)~~>(1)
  -           ├── sort
  -           │    ├── columns: a:1!null b:2 c:3 d:4
  -           │    ├── cardinality: [0 - 11]
  -           │    ├── key: (1)
  -           │    ├── fd: (1)-->(2-4), (2-4)~~>(1)
  -           │    ├── ordering: -2
  -           │    ├── limit hint: 5.00
  -           │    └── select
  -           │         ├── columns: a:1!null b:2 c:3 d:4
  -           │         ├── cardinality: [0 - 11]
  -           │         ├── key: (1)
  -           │         ├── fd: (1)-->(2-4), (2-4)~~>(1)
  -           │         ├── scan abcd
  -           │         │    ├── columns: a:1!null b:2 c:3 d:4
  -           │         │    ├── flags: force-index=b
  -           │         │    ├── key: (1)
  -           │         │    └── fd: (1)-->(2-4), (2-4)~~>(1)
  -           │         └── filters
  -           │              └── (a:1 >= 20) AND (a:1 <= 30) [outer=(1), constraints=(/1: [/20 - /30]; tight)]
  -           └── 5
  +      ├── select
  +      │    ├── columns: a:1!null b:2 c:3 d:4
  +      │    ├── cardinality: [0 - 11]
  +      │    ├── key: (1)
  +      │    ├── fd: (1)-->(2-4), (2-4)~~>(1)
  +      │    ├── ordering: -2
  +      │    ├── limit hint: 5.00
  +      │    ├── index-join abcd
  +      │    │    ├── columns: a:1!null b:2 c:3 d:4
  +      │    │    ├── key: (1)
  +      │    │    ├── fd: (1)-->(2-4), (2-4)~~>(1)
  +      │    │    ├── ordering: -2
  +      │    │    ├── limit hint: 454.55
  +      │    │    └── scan abcd@b,rev
  +      │    │         ├── columns: a:1!null b:2
  +      │    │         ├── flags: force-index=b
  +      │    │         ├── key: (1)
  +      │    │         ├── fd: (1)-->(2)
  +      │    │         ├── ordering: -2
  +      │    │         └── limit hint: 454.55
  +      │    └── filters
  +      │         └── (a:1 >= 20) AND (a:1 <= 30) [outer=(1), constraints=(/1: [/20 - /30]; tight)]
  +      └── 5
--------------------------------------------------------------------------------
GenerateZigzagJoins (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
GenerateConstrainedScans (no changes)
--------------------------------------------------------------------------------
================================================================================
Final best expression
  Cost: 5134.91
================================================================================
  explain
   ├── columns: tree:5 field:6 description:7
   └── limit
        ├── columns: a:1!null b:2 c:3 d:4
        ├── internal-ordering: -2
        ├── cardinality: [0 - 5]
        ├── key: (1)
        ├── fd: (1)-->(2-4), (2-4)~~>(1)
        ├── ordering: -2
        ├── select
        │    ├── columns: a:1!null b:2 c:3 d:4
        │    ├── cardinality: [0 - 11]
        │    ├── key: (1)
        │    ├── fd: (1)-->(2-4), (2-4)~~>(1)
        │    ├── ordering: -2
        │    ├── limit hint: 5.00
        │    ├── index-join abcd
        │    │    ├── columns: a:1!null b:2 c:3 d:4
        │    │    ├── key: (1)
        │    │    ├── fd: (1)-->(2-4), (2-4)~~>(1)
        │    │    ├── ordering: -2
        │    │    ├── limit hint: 454.55
        │    │    └── scan abcd@b,rev
        │    │         ├── columns: a:1!null b:2
        │    │         ├── flags: force-index=b
        │    │         ├── key: (1)
        │    │         ├── fd: (1)-->(2)
        │    │         ├── ordering: -2
        │    │         └── limit hint: 454.55
        │    └── filters
        │         └── (a:1 >= 20) AND (a:1 <= 30) [outer=(1), constraints=(/1: [/20 - /30]; tight)]
        └── 5

# --------------------------------------------------
# PushLimitIntoOffset + GenerateLimitedScans
# --------------------------------------------------

# Regression testing for #30416.
# The limit is pushed down the offset and so an appropriate index scan is used
# over a primary key scan.
opt
SELECT * from a ORDER BY s LIMIT 10 OFFSET 10
----
offset
 ├── columns: k:1!null i:2 f:3 s:4 j:5
 ├── internal-ordering: +4
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── ordering: +4
 ├── index-join a
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5
 │    ├── cardinality: [0 - 20]
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    ├── ordering: +4
 │    └── scan a@s_idx
 │         ├── columns: k:1!null i:2 f:3 s:4
 │         ├── limit: 20
 │         ├── key: (1)
 │         ├── fd: (1)-->(2-4)
 │         └── ordering: +4
 └── 10

# The right index is used for the limited scan based on the order.
opt
SELECT * from a ORDER BY s DESC LIMIT 10 OFFSET 10
----
offset
 ├── columns: k:1!null i:2 f:3 s:4 j:5
 ├── internal-ordering: -4
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── ordering: -4
 ├── index-join a
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5
 │    ├── cardinality: [0 - 20]
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    ├── ordering: -4
 │    └── scan a@si_idx
 │         ├── columns: k:1!null i:2 s:4 j:5
 │         ├── limit: 20
 │         ├── key: (1)
 │         ├── fd: (1)-->(2,4,5)
 │         └── ordering: -4
 └── 10

# PushLimitIntoIndexJoin propagates row-level locking information.
opt
SELECT * FROM kuv ORDER BY u LIMIT 5 FOR UPDATE
----
index-join kuv
 ├── columns: k:1!null u:2 v:3
 ├── cardinality: [0 - 5]
 ├── key: (1)
 ├── fd: (1)-->(2,3)
 ├── ordering: +2
 └── scan kuv@secondary
      ├── columns: k:1!null u:2
      ├── limit: 5
      ├── locking: for-update
      ├── key: (1)
      ├── fd: (1)-->(2)
      └── ordering: +2
