exec-ddl
CREATE TABLE a
(
    k INT PRIMARY KEY,
    u INT,
    v INT,
    INDEX u(u) STORING (v),
    UNIQUE INDEX v(v) STORING (u)
)
----
TABLE a
 ├── k int not null
 ├── u int
 ├── v int
 ├── INDEX primary
 │    └── k int not null
 ├── INDEX u
 │    ├── u int
 │    ├── k int not null
 │    └── v int (storing)
 └── INDEX v
      ├── v int
      ├── k int not null (storing)
      └── u int (storing)

exec-ddl
CREATE TABLE b
(
    k INT PRIMARY KEY,
    u INT,
    v INT,
    INDEX u(u),
    UNIQUE INDEX v(v)
)
----
TABLE b
 ├── k int not null
 ├── u int
 ├── v int
 ├── INDEX primary
 │    └── k int not null
 ├── INDEX u
 │    ├── u int
 │    └── k int not null
 └── INDEX v
      ├── v int
      └── k int not null (storing)


# --------------------------------------------------
# ConstrainScan
# --------------------------------------------------

opt
SELECT k FROM a WHERE k = 1
----
scan a
 ├── columns: k:1(int!null)
 ├── constraint: /1: [/1 - /1]
 └── keys: (1)

memo
SELECT k FROM a WHERE k = 1
----
memo (optimized)
 ├── G1: (select G2 G3) (scan a,cols=(1),constrained)
 │    └── "[presentation: k:1]"
 │         ├── best: (scan a,cols=(1),constrained)
 │         └── cost: 1.00
 ├── G2: (scan a,cols=(1)) (scan a@u,cols=(1)) (scan a@v,cols=(1))
 │    └── ""
 │         ├── best: (scan a,cols=(1))
 │         └── cost: 1000.00
 ├── G3: (filters G4)
 ├── G4: (eq G5 G6)
 ├── G5: (variable a.k)
 └── G6: (const 1)

opt
SELECT k FROM a WHERE v > 1
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 └── scan a@v
      ├── columns: k:1(int!null) v:3(int!null)
      ├── constraint: /3: [/2 - ]
      └── keys: (1) (3)

memo
SELECT k FROM a WHERE v > 1
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 333.00
 ├── G2: (select G4 G5) (scan a@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan a@v,cols=(1,3),constrained)
 │         └── cost: 333.00
 ├── G3: (projections a.k)
 ├── G4: (scan a,cols=(1,3)) (scan a@u,cols=(1,3)) (scan a@v,cols=(1,3))
 │    └── ""
 │         ├── best: (scan a,cols=(1,3))
 │         └── cost: 1000.00
 ├── G5: (filters G6)
 ├── G6: (gt G7 G8)
 ├── G7: (variable a.v)
 └── G8: (const 1)

opt
SELECT k FROM a WHERE u = 1 AND k = 5
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 └── scan a@u
      ├── columns: k:1(int!null) u:2(int!null)
      ├── constraint: /2/1: [/1/5 - /1/5]
      └── keys: (1)

memo
SELECT k FROM a WHERE u = 1 AND k = 5
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 1.00
 ├── G2: (select G4 G5) (select G6 G7) (scan a@u,cols=(1,2),constrained)
 │    └── ""
 │         ├── best: (scan a@u,cols=(1,2),constrained)
 │         └── cost: 1.00
 ├── G3: (projections a.k)
 ├── G4: (scan a,cols=(1,2)) (scan a@u,cols=(1,2)) (scan a@v,cols=(1,2))
 │    └── ""
 │         ├── best: (scan a,cols=(1,2))
 │         └── cost: 1000.00
 ├── G5: (filters G9 G8)
 ├── G6: (scan a,cols=(1,2),constrained)
 │    └── ""
 │         ├── best: (scan a,cols=(1,2),constrained)
 │         └── cost: 1.00
 ├── G7: (filters G9)
 ├── G8: (eq G10 G11)
 ├── G9: (eq G12 G13)
 ├── G10: (variable a.k)
 ├── G11: (const 5)
 ├── G12: (variable a.u)
 └── G13: (const 1)

# Constraint + remaining filter.
opt
SELECT k FROM a WHERE u = 1 AND k+u = 1
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 └── select
      ├── columns: k:1(int!null) u:2(int!null)
      ├── keys: (1)
      ├── scan a@u
      │    ├── columns: k:1(int!null) u:2(int)
      │    ├── constraint: /2/1: [/1 - /1]
      │    └── keys: (1)
      └── filters [type=bool, outer=(1,2)]
           └── (a.k + a.u) = 1 [type=bool, outer=(1,2)]

memo
SELECT k FROM a WHERE u = 1 AND k+u = 1
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 1.01
 ├── G2: (select G4 G5) (select G6 G7)
 │    └── ""
 │         ├── best: (select G6 G7)
 │         └── cost: 1.01
 ├── G3: (projections a.k)
 ├── G4: (scan a,cols=(1,2)) (scan a@u,cols=(1,2)) (scan a@v,cols=(1,2))
 │    └── ""
 │         ├── best: (scan a,cols=(1,2))
 │         └── cost: 1000.00
 ├── G5: (filters G8 G9)
 ├── G6: (scan a@u,cols=(1,2),constrained)
 │    └── ""
 │         ├── best: (scan a@u,cols=(1,2),constrained)
 │         └── cost: 1.00
 ├── G7: (filters G9)
 ├── G8: (eq G13 G11)
 ├── G9: (eq G10 G11)
 ├── G10: (plus G12 G13)
 ├── G11: (const 1)
 ├── G12: (variable a.k)
 └── G13: (variable a.u)

opt
SELECT k FROM a WHERE u = 1 AND v = 5
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 └── select
      ├── columns: k:1(int!null) u:2(int!null) v:3(int!null)
      ├── keys: (1) (3)
      ├── scan a@u
      │    ├── columns: k:1(int!null) u:2(int) v:3(int)
      │    ├── constraint: /2/1: [/1 - /1]
      │    └── keys: (1) weak(3)
      └── filters [type=bool, outer=(3), constraints=(/3: [/5 - /5]; tight)]
           └── a.v = 5 [type=bool, outer=(3), constraints=(/3: [/5 - /5]; tight)]

memo
SELECT k FROM a WHERE u = 1 AND v = 5
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 1.01
 ├── G2: (select G4 G5) (select G6 G7) (select G8 G9)
 │    └── ""
 │         ├── best: (select G6 G7)
 │         └── cost: 1.01
 ├── G3: (projections a.k)
 ├── G4: (scan a) (scan a@u) (scan a@v)
 │    └── ""
 │         ├── best: (scan a)
 │         └── cost: 1000.00
 ├── G5: (filters G11 G10)
 ├── G6: (scan a@u,constrained)
 │    └── ""
 │         ├── best: (scan a@u,constrained)
 │         └── cost: 1.00
 ├── G7: (filters G10)
 ├── G8: (scan a@v,constrained)
 │    └── ""
 │         ├── best: (scan a@v,constrained)
 │         └── cost: 1.00
 ├── G9: (filters G11)
 ├── G10: (eq G12 G13)
 ├── G11: (eq G14 G15)
 ├── G12: (variable a.v)
 ├── G13: (const 5)
 ├── G14: (variable a.u)
 └── G15: (const 1)

# Only not-null constraint is pushed down.
opt
SELECT k FROM a WHERE u=v
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 └── select
      ├── columns: k:1(int!null) u:2(int!null) v:3(int!null)
      ├── keys: (1) (3)
      ├── scan a@u
      │    ├── columns: k:1(int!null) u:2(int) v:3(int)
      │    ├── constraint: /2/1: (/NULL - ]
      │    └── keys: (1) weak(3)
      └── filters [type=bool, outer=(2,3), constraints=(/2: (/NULL - ]; /3: (/NULL - ])]
           └── a.u = a.v [type=bool, outer=(2,3), constraints=(/2: (/NULL - ]; /3: (/NULL - ])]

# Don't push constraint into already limited scan.
opt
SELECT k FROM (SELECT k FROM a ORDER BY u LIMIT 1) a WHERE k = 1
----
select
 ├── columns: k:1(int!null)
 ├── cardinality: [0 - 1]
 ├── keys: (1)
 ├── scan a@u
 │    ├── columns: k:1(int!null) u:2(int)
 │    ├── limit: 1
 │    └── keys: (1)
 └── filters [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
      └── a.k = 1 [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]

# --------------------------------------------------
# ConstrainLookupJoinIndexScan
# --------------------------------------------------

opt
SELECT * FROM b WHERE v = 1
----
lookup-join
 ├── columns: k:1(int!null) u:2(int) v:3(int!null)
 ├── table: b
 ├── keys: (1) (3)
 └── scan b@v
      ├── columns: k:1(int!null) v:3(int)
      ├── constraint: /3: [/1 - /1]
      └── keys: (1) weak(3)

memo
SELECT * FROM b WHERE v = 1
----
memo (optimized)
 ├── G1: (select G2 G3) (lookup-join G4 b,cols=(1-3))
 │    └── "[presentation: k:1,u:2,v:3]"
 │         ├── best: (lookup-join G4 b,cols=(1-3))
 │         └── cost: 5.01
 ├── G2: (scan b) (lookup-join G5 b,cols=(1-3)) (lookup-join G6 b,cols=(1-3))
 │    └── ""
 │         ├── best: (scan b)
 │         └── cost: 1000.00
 ├── G3: (filters G7)
 ├── G4: (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 1.00
 ├── G5: (scan b@u,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,cols=(1,2))
 │         └── cost: 1000.00
 ├── G6: (scan b@v,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3))
 │         └── cost: 1000.00
 ├── G7: (eq G8 G9)
 ├── G8: (variable b.v)
 └── G9: (const 1)

# Don't choose lookup join if it's not beneficial.
opt
SELECT * FROM b WHERE v > 1
----
select
 ├── columns: k:1(int!null) u:2(int) v:3(int!null)
 ├── keys: (1) (3)
 ├── scan b
 │    ├── columns: k:1(int!null) u:2(int) v:3(int)
 │    └── keys: (1) weak(3)
 └── filters [type=bool, outer=(3), constraints=(/3: [/2 - ]; tight)]
      └── b.v > 1 [type=bool, outer=(3), constraints=(/3: [/2 - ]; tight)]

# Constraint + remaining filter.
opt
SELECT * FROM b WHERE v = 1 AND k+u = 1
----
select
 ├── columns: k:1(int!null) u:2(int) v:3(int!null)
 ├── keys: (1) (3)
 ├── lookup-join
 │    ├── columns: k:1(int!null) u:2(int) v:3(int)
 │    ├── table: b
 │    ├── keys: (1) weak(3)
 │    └── scan b@v
 │         ├── columns: k:1(int!null) v:3(int)
 │         ├── constraint: /3: [/1 - /1]
 │         └── keys: (1) weak(3)
 └── filters [type=bool, outer=(1,2)]
      └── (b.k + b.u) = 1 [type=bool, outer=(1,2)]

memo
SELECT * FROM b WHERE v = 1 AND k+u = 1
----
memo (optimized)
 ├── G1: (select G2 G3) (select G4 G5)
 │    └── "[presentation: k:1,u:2,v:3]"
 │         ├── best: (select G4 G5)
 │         └── cost: 5.02
 ├── G2: (scan b) (lookup-join G6 b,cols=(1-3)) (lookup-join G7 b,cols=(1-3))
 │    └── ""
 │         ├── best: (scan b)
 │         └── cost: 1000.00
 ├── G3: (filters G8 G10)
 ├── G4: (lookup-join G9 b,cols=(1-3))
 │    └── ""
 │         ├── best: (lookup-join G9 b,cols=(1-3))
 │         └── cost: 5.01
 ├── G5: (filters G10)
 ├── G6: (scan b@u,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,cols=(1,2))
 │         └── cost: 1000.00
 ├── G7: (scan b@v,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3))
 │         └── cost: 1000.00
 ├── G8: (eq G11 G13)
 ├── G9: (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 1.00
 ├── G10: (eq G12 G13)
 ├── G11: (variable b.v)
 ├── G12: (plus G14 G15)
 ├── G13: (const 1)
 ├── G14: (variable b.k)
 └── G15: (variable b.u)
