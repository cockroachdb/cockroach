exec-ddl
CREATE TABLE a
(
    k INT PRIMARY KEY,
    u INT,
    v INT,
    INDEX u(u) STORING (v),
    UNIQUE INDEX v(v) STORING (u)
)
----
TABLE a
 ├── k int not null
 ├── u int
 ├── v int
 ├── INDEX primary
 │    └── k int not null
 ├── INDEX u
 │    ├── u int
 │    ├── k int not null
 │    └── v int (storing)
 └── INDEX v
      ├── v int
      ├── k int not null (storing)
      └── u int (storing)

exec-ddl
CREATE TABLE b
(
    k INT PRIMARY KEY,
    u INT,
    v INT,
    INDEX u(u),
    UNIQUE INDEX v(v)
)
----
TABLE b
 ├── k int not null
 ├── u int
 ├── v int
 ├── INDEX primary
 │    └── k int not null
 ├── INDEX u
 │    ├── u int
 │    └── k int not null
 └── INDEX v
      ├── v int
      └── k int not null (storing)

# --------------------------------------------------
# ConstrainScan
# --------------------------------------------------

opt
SELECT k FROM a WHERE k = 1
----
scan a
 ├── columns: k:1(int!null)
 ├── constraint: /1: [/1 - /1]
 ├── key: ()
 └── fd: ()-->(1)

memo
SELECT k FROM a WHERE k = 1
----
memo (optimized)
 ├── G1: (select G2 G3) (scan a,cols=(1),constrained)
 │    └── "[presentation: k:1]"
 │         ├── best: (scan a,cols=(1),constrained)
 │         └── cost: 1.04
 ├── G2: (scan a,cols=(1)) (scan a@u,cols=(1)) (scan a@v,cols=(1))
 │    └── ""
 │         ├── best: (scan a,cols=(1))
 │         └── cost: 1040.00
 ├── G3: (filters G4)
 ├── G4: (eq G5 G6)
 ├── G5: (variable a.k)
 └── G6: (const 1)

opt
SELECT k FROM a WHERE v > 1
----
project
 ├── columns: k:1(int!null)
 ├── key: (1)
 ├── fd: (1)-->(3), (3)-->(1) [removed: (3)]
 └── scan a@v
      ├── columns: k:1(int!null) v:3(int!null)
      ├── constraint: /3: [/2 - ]
      ├── key: (1)
      └── fd: (1)-->(3), (3)-->(1)

memo
SELECT k FROM a WHERE v > 1
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 350.00
 ├── G2: (select G4 G5) (scan a@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan a@v,cols=(1,3),constrained)
 │         └── cost: 350.00
 ├── G3: (projections a.k)
 ├── G4: (scan a,cols=(1,3)) (scan a@u,cols=(1,3)) (scan a@v,cols=(1,3))
 │    └── ""
 │         ├── best: (scan a,cols=(1,3))
 │         └── cost: 1050.00
 ├── G5: (filters G6)
 ├── G6: (gt G7 G8)
 ├── G7: (variable a.v)
 └── G8: (const 1)

opt
SELECT k FROM a WHERE u = 1 AND k = 5
----
project
 ├── columns: k:1(int!null)
 ├── key: ()
 ├── fd: ()-->(1)
 └── scan a@u
      ├── columns: k:1(int!null) u:2(int!null)
      ├── constraint: /2/1: [/1/5 - /1/5]
      ├── key: ()
      └── fd: ()-->(1,2)

memo
SELECT k FROM a WHERE u = 1 AND k = 5
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 0.00
 ├── G2: (select G4 G5) (select G6 G7) (scan a@u,cols=(1,2),constrained)
 │    └── ""
 │         ├── best: (scan a@u,cols=(1,2),constrained)
 │         └── cost: 0.00
 ├── G3: (projections a.k)
 ├── G4: (scan a,cols=(1,2)) (scan a@u,cols=(1,2)) (scan a@v,cols=(1,2))
 │    └── ""
 │         ├── best: (scan a,cols=(1,2))
 │         └── cost: 1050.00
 ├── G5: (filters G9 G8)
 ├── G6: (scan a,cols=(1,2),constrained)
 │    └── ""
 │         ├── best: (scan a,cols=(1,2),constrained)
 │         └── cost: 1.05
 ├── G7: (filters G9)
 ├── G8: (eq G10 G11)
 ├── G9: (eq G12 G13)
 ├── G10: (variable a.k)
 ├── G11: (const 5)
 ├── G12: (variable a.u)
 └── G13: (const 1)

# Constraint + remaining filter.
opt
SELECT k FROM a WHERE u = 1 AND k+u = 1
----
project
 ├── columns: k:1(int!null)
 ├── key: (1)
 └── select
      ├── columns: k:1(int!null) u:2(int!null)
      ├── key: (1)
      ├── fd: ()-->(2), (1)-->(2)
      ├── scan a@u
      │    ├── columns: k:1(int!null) u:2(int!null)
      │    ├── constraint: /2/1: [/1 - /1]
      │    ├── key: (1)
      │    └── fd: ()-->(2), (1)-->(2)
      └── filters [type=bool, outer=(1,2)]
           └── (a.k + a.u) = 1 [type=bool, outer=(1,2)]

memo
SELECT k FROM a WHERE u = 1 AND k+u = 1
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 1.51
 ├── G2: (select G4 G5) (select G6 G7)
 │    └── ""
 │         ├── best: (select G6 G7)
 │         └── cost: 1.51
 ├── G3: (projections a.k)
 ├── G4: (scan a,cols=(1,2)) (scan a@u,cols=(1,2)) (scan a@v,cols=(1,2))
 │    └── ""
 │         ├── best: (scan a,cols=(1,2))
 │         └── cost: 1050.00
 ├── G5: (filters G8 G9)
 ├── G6: (scan a@u,cols=(1,2),constrained)
 │    └── ""
 │         ├── best: (scan a@u,cols=(1,2),constrained)
 │         └── cost: 1.50
 ├── G7: (filters G9)
 ├── G8: (eq G13 G11)
 ├── G9: (eq G10 G11)
 ├── G10: (plus G12 G13)
 ├── G11: (const 1)
 ├── G12: (variable a.k)
 └── G13: (variable a.u)

opt
SELECT k FROM a WHERE u = 1 AND v = 5
----
project
 ├── columns: k:1(int!null)
 ├── key: ()
 ├── fd: ()-->(1)
 └── select
      ├── columns: k:1(int!null) u:2(int!null) v:3(int!null)
      ├── key: ()
      ├── fd: ()-->(1-3)
      ├── scan a@v
      │    ├── columns: k:1(int!null) u:2(int) v:3(int!null)
      │    ├── constraint: /3: [/5 - /5]
      │    ├── key: ()
      │    └── fd: ()-->(1-3)
      └── filters [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
           └── a.u = 1 [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]

memo
SELECT k FROM a WHERE u = 1 AND v = 5
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 1.07
 ├── G2: (select G4 G5) (select G6 G7) (select G8 G9)
 │    └── ""
 │         ├── best: (select G8 G9)
 │         └── cost: 1.07
 ├── G3: (projections a.k)
 ├── G4: (scan a) (scan a@u) (scan a@v)
 │    └── ""
 │         ├── best: (scan a)
 │         └── cost: 1060.00
 ├── G5: (filters G11 G10)
 ├── G6: (scan a@u,constrained)
 │    └── ""
 │         ├── best: (scan a@u,constrained)
 │         └── cost: 1.51
 ├── G7: (filters G10)
 ├── G8: (scan a@v,constrained)
 │    └── ""
 │         ├── best: (scan a@v,constrained)
 │         └── cost: 1.06
 ├── G9: (filters G11)
 ├── G10: (eq G12 G13)
 ├── G11: (eq G14 G15)
 ├── G12: (variable a.v)
 ├── G13: (const 5)
 ├── G14: (variable a.u)
 └── G15: (const 1)

# Only not-null constraint is pushed down.
opt
SELECT k FROM a WHERE u=v
----
project
 ├── columns: k:1(int!null)
 ├── key: (1)
 ├── fd: (1)-->(3), (3)-->(1) [removed: (3)]
 └── select
      ├── columns: k:1(int!null) u:2(int!null) v:3(int!null)
      ├── key: (1)
      ├── fd: (1)-->(2,3), (3)-->(1,2)
      ├── scan a@u
      │    ├── columns: k:1(int!null) u:2(int!null) v:3(int)
      │    ├── constraint: /2/1: (/NULL - ]
      │    ├── key: (1)
      │    └── fd: (1)-->(2,3), (3)~~>(1,2)
      └── filters [type=bool, outer=(2,3), constraints=(/2: (/NULL - ]; /3: (/NULL - ])]
           └── a.u = a.v [type=bool, outer=(2,3), constraints=(/2: (/NULL - ]; /3: (/NULL - ])]

# Don't push constraint into already limited scan.
opt
SELECT k FROM (SELECT k FROM a ORDER BY u LIMIT 1) a WHERE k = 1
----
select
 ├── columns: k:1(int!null)
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1,2)
 ├── scan a@u
 │    ├── columns: k:1(int!null) u:2(int)
 │    ├── limit: 1
 │    ├── key: ()
 │    └── fd: ()-->(1,2)
 └── filters [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
      └── a.k = 1 [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]

# --------------------------------------------------
# PushFilterIntoLookupJoinNoRemainder
# --------------------------------------------------

opt
SELECT * FROM b WHERE v >= 1 AND v <= 10
----
index-join b
 ├── columns: k:1(int!null) u:2(int) v:3(int!null)
 ├── key: (1)
 ├── fd: (1)-->(2,3), (3)-->(1,2)
 └── scan b@v
      ├── columns: k:1(int!null) v:3(int!null)
      ├── constraint: /3: [/1 - /10]
      ├── key: (1)
      └── fd: (1)-->(3), (3)-->(1)

memo
SELECT * FROM b WHERE v >= 1 AND v <= 10
----
memo (optimized)
 ├── G1: (select G2 G7) (index-join G3 b,cols=(1-3)) (index-join G4 b,cols=(1-3))
 │    └── "[presentation: k:1,u:2,v:3]"
 │         ├── best: (index-join G3 b,cols=(1-3))
 │         └── cost: 51.10
 ├── G2: (scan b) (index-join G5 b,cols=(1-3)) (index-join G6 b,cols=(1-3))
 │    └── ""
 │         ├── best: (scan b)
 │         └── cost: 1060.00
 ├── G3: (select G6 G7) (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 10.40
 ├── G4: (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 10.40
 ├── G5: (scan b@u,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,cols=(1,2))
 │         └── cost: 1040.00
 ├── G6: (scan b@v,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3))
 │         └── cost: 1040.00
 ├── G7: (filters G8 G9)
 ├── G8: (ge G11 G10)
 ├── G9: (le G11 G12)
 ├── G10: (const 1)
 ├── G11: (variable b.v)
 └── G12: (const 10)

# Don't choose lookup join if it's not beneficial.
opt
SELECT * FROM b WHERE v > 1
----
select
 ├── columns: k:1(int!null) u:2(int) v:3(int!null)
 ├── key: (1)
 ├── fd: (1)-->(2,3), (3)-->(1,2)
 ├── scan b
 │    ├── columns: k:1(int!null) u:2(int) v:3(int)
 │    ├── key: (1)
 │    └── fd: (1)-->(2,3), (3)~~>(1,2)
 └── filters [type=bool, outer=(3), constraints=(/3: [/2 - ]; tight)]
      └── b.v > 1 [type=bool, outer=(3), constraints=(/3: [/2 - ]; tight)]

opt
SELECT * FROM b WHERE v >= 1 AND v <= 10 AND k > 5
----
index-join b
 ├── columns: k:1(int!null) u:2(int) v:3(int!null)
 ├── key: (1)
 ├── fd: (1)-->(2,3), (3)-->(1,2)
 └── select
      ├── columns: k:1(int!null) v:3(int!null)
      ├── key: (1)
      ├── fd: (1)-->(3), (3)-->(1)
      ├── scan b@v
      │    ├── columns: k:1(int!null) v:3(int!null)
      │    ├── constraint: /3: [/1 - /10]
      │    ├── key: (1)
      │    └── fd: (1)-->(3), (3)-->(1)
      └── filters [type=bool, outer=(1), constraints=(/1: [/6 - ]; tight)]
           └── b.k > 5 [type=bool, outer=(1), constraints=(/1: [/6 - ]; tight)]

memo
SELECT * FROM b WHERE v >= 1 AND v <= 10 AND k > 5
----
memo (optimized)
 ├── G1: (select G2 G10) (select G3 G6) (index-join G4 b,cols=(1-3)) (select G5 G6) (select G7 G17) (index-join G8 b,cols=(1-3))
 │    └── "[presentation: k:1,u:2,v:3]"
 │         ├── best: (index-join G4 b,cols=(1-3))
 │         └── cost: 24.07
 ├── G2: (scan b) (index-join G16 b,cols=(1-3)) (index-join G9 b,cols=(1-3))
 │    └── ""
 │         ├── best: (scan b)
 │         └── cost: 1060.00
 ├── G3: (scan b,constrained)
 │    └── ""
 │         ├── best: (scan b,constrained)
 │         └── cost: 353.33
 ├── G4: (select G9 G10) (select G11 G17)
 │    └── ""
 │         ├── best: (select G11 G17)
 │         └── cost: 10.50
 ├── G5: (index-join G12 b,cols=(1-3))
 │    └── ""
 │         ├── best: (index-join G12 b,cols=(1-3))
 │         └── cost: 2406.67
 ├── G6: (filters G14 G15)
 ├── G7: (index-join G13 b,cols=(1-3))
 │    └── ""
 │         ├── best: (index-join G13 b,cols=(1-3))
 │         └── cost: 51.10
 ├── G8: (select G13 G17)
 │    └── ""
 │         ├── best: (select G13 G17)
 │         └── cost: 10.50
 ├── G9: (scan b@v,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3))
 │         └── cost: 1040.00
 ├── G10: (filters G14 G15 G21)
 ├── G11: (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 10.40
 ├── G12: (select G16 G17)
 │    └── ""
 │         ├── best: (select G16 G17)
 │         └── cost: 1050.00
 ├── G13: (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 10.40
 ├── G14: (ge G19 G18)
 ├── G15: (le G19 G20)
 ├── G16: (scan b@u,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,cols=(1,2))
 │         └── cost: 1040.00
 ├── G17: (filters G21)
 ├── G18: (const 1)
 ├── G19: (variable b.v)
 ├── G20: (const 10)
 ├── G21: (gt G22 G23)
 ├── G22: (variable b.k)
 └── G23: (const 5)


# --------------------------------------------------
# PushFilterIntoLookupJoin
# --------------------------------------------------

# Constraint + remaining filter.
opt
SELECT * FROM b WHERE v >= 1 AND v <= 10 AND k+u = 1
----
select
 ├── columns: k:1(int!null) u:2(int) v:3(int!null)
 ├── key: (1)
 ├── fd: (1)-->(2,3), (3)-->(1,2)
 ├── index-join b
 │    ├── columns: k:1(int!null) u:2(int) v:3(int)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2,3), (3)-->(1), (3)~~>(1,2)
 │    └── scan b@v
 │         ├── columns: k:1(int!null) v:3(int!null)
 │         ├── constraint: /3: [/1 - /10]
 │         ├── key: (1)
 │         └── fd: (1)-->(3), (3)-->(1)
 └── filters [type=bool, outer=(1,2)]
      └── (b.k + b.u) = 1 [type=bool, outer=(1,2)]

memo
SELECT * FROM b WHERE v >= 1 AND v <= 10 AND k+u = 1
----
memo (optimized)
 ├── G1: (select G2 G3) (select G4 G13) (select G5 G11) (select G6 G11)
 │    └── "[presentation: k:1,u:2,v:3]"
 │         ├── best: (select G5 G11)
 │         └── cost: 51.20
 ├── G2: (scan b) (index-join G10 b,cols=(1-3)) (index-join G12 b,cols=(1-3))
 │    └── ""
 │         ├── best: (scan b)
 │         └── cost: 1060.00
 ├── G3: (filters G15 G16 G14)
 ├── G4: (index-join G7 b,cols=(1-3))
 │    └── ""
 │         ├── best: (index-join G7 b,cols=(1-3))
 │         └── cost: 2406.67
 ├── G5: (index-join G8 b,cols=(1-3))
 │    └── ""
 │         ├── best: (index-join G8 b,cols=(1-3))
 │         └── cost: 51.10
 ├── G6: (index-join G9 b,cols=(1-3))
 │    └── ""
 │         ├── best: (index-join G9 b,cols=(1-3))
 │         └── cost: 51.10
 ├── G7: (select G10 G11)
 │    └── ""
 │         ├── best: (select G10 G11)
 │         └── cost: 1050.00
 ├── G8: (select G12 G13) (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 10.40
 ├── G9: (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 10.40
 ├── G10: (scan b@u,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,cols=(1,2))
 │         └── cost: 1040.00
 ├── G11: (filters G14)
 ├── G12: (scan b@v,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3))
 │         └── cost: 1040.00
 ├── G13: (filters G15 G16)
 ├── G14: (eq G17 G18)
 ├── G15: (ge G19 G18)
 ├── G16: (le G19 G20)
 ├── G17: (plus G21 G22)
 ├── G18: (const 1)
 ├── G19: (variable b.v)
 ├── G20: (const 10)
 ├── G21: (variable b.k)
 └── G22: (variable b.u)

opt
SELECT * FROM b WHERE v >= 1 AND v <= 10 AND k+u = 1 AND k > 5
----
select
 ├── columns: k:1(int!null) u:2(int) v:3(int!null)
 ├── key: (1)
 ├── fd: (1)-->(2,3), (3)-->(1,2)
 ├── index-join b
 │    ├── columns: k:1(int!null) u:2(int) v:3(int)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2,3), (3)-->(1), (3)~~>(1,2)
 │    └── select
 │         ├── columns: k:1(int!null) v:3(int!null)
 │         ├── key: (1)
 │         ├── fd: (1)-->(3), (3)-->(1)
 │         ├── scan b@v
 │         │    ├── columns: k:1(int!null) v:3(int!null)
 │         │    ├── constraint: /3: [/1 - /10]
 │         │    ├── key: (1)
 │         │    └── fd: (1)-->(3), (3)-->(1)
 │         └── filters [type=bool, outer=(1), constraints=(/1: [/6 - ]; tight)]
 │              └── b.k > 5 [type=bool, outer=(1), constraints=(/1: [/6 - ]; tight)]
 └── filters [type=bool, outer=(1,2)]
      └── (b.k + b.u) = 1 [type=bool, outer=(1,2)]

memo
SELECT * FROM b WHERE v >= 1 AND v <= 10 AND k+u = 1 AND k > 5
----
memo (optimized)
 ├── G1: (select G2 G3) (select G4 G5) (select G6 G7) (select G8 G11) (select G9 G16) (select G10 G11)
 │    └── "[presentation: k:1,u:2,v:3]"
 │         ├── best: (select G8 G11)
 │         └── cost: 24.10
 ├── G2: (scan b) (index-join G15 b,cols=(1-3)) (index-join G17 b,cols=(1-3))
 │    └── ""
 │         ├── best: (scan b)
 │         └── cost: 1060.00
 ├── G3: (filters G23 G24 G22 G25)
 ├── G4: (scan b,constrained)
 │    └── ""
 │         ├── best: (scan b,constrained)
 │         └── cost: 353.33
 ├── G5: (filters G23 G24 G22)
 ├── G6: (index-join G12 b,cols=(1-3))
 │    └── ""
 │         ├── best: (index-join G12 b,cols=(1-3))
 │         └── cost: 1502.22
 ├── G7: (filters G23 G24)
 ├── G8: (index-join G13 b,cols=(1-3))
 │    └── ""
 │         ├── best: (index-join G13 b,cols=(1-3))
 │         └── cost: 24.07
 ├── G9: (index-join G20 b,cols=(1-3))
 │    └── ""
 │         ├── best: (index-join G20 b,cols=(1-3))
 │         └── cost: 51.10
 ├── G10: (index-join G14 b,cols=(1-3))
 │    └── ""
 │         ├── best: (index-join G14 b,cols=(1-3))
 │         └── cost: 24.07
 ├── G11: (filters G22)
 ├── G12: (select G15 G16)
 │    └── ""
 │         ├── best: (select G15 G16)
 │         └── cost: 1050.00
 ├── G13: (select G17 G18) (select G19 G21)
 │    └── ""
 │         ├── best: (select G19 G21)
 │         └── cost: 10.50
 ├── G14: (select G20 G21)
 │    └── ""
 │         ├── best: (select G20 G21)
 │         └── cost: 10.50
 ├── G15: (scan b@u,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,cols=(1,2))
 │         └── cost: 1040.00
 ├── G16: (filters G22 G25)
 ├── G17: (scan b@v,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3))
 │         └── cost: 1040.00
 ├── G18: (filters G23 G24 G25)
 ├── G19: (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 10.40
 ├── G20: (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 10.40
 ├── G21: (filters G25)
 ├── G22: (eq G26 G27)
 ├── G23: (ge G28 G27)
 ├── G24: (le G28 G29)
 ├── G25: (gt G31 G30)
 ├── G26: (plus G31 G32)
 ├── G27: (const 1)
 ├── G28: (variable b.v)
 ├── G29: (const 10)
 ├── G30: (const 5)
 ├── G31: (variable b.k)
 └── G32: (variable b.u)

# --------------------------------------------------
# ConstrainLookupJoinIndexScan
# --------------------------------------------------

opt
SELECT * FROM b WHERE (u, k, v) > (1, 2, 3) AND (u, k, v) < (8, 9, 10)
----
select
 ├── columns: k:1(int!null) u:2(int!null) v:3(int)
 ├── key: (1)
 ├── fd: (1)-->(2,3), (3)~~>(1,2)
 ├── index-join b
 │    ├── columns: k:1(int!null) u:2(int) v:3(int)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2,3), (3)~~>(1,2)
 │    └── scan b@u
 │         ├── columns: k:1(int!null) u:2(int!null)
 │         ├── constraint: /2/1: [/1/2 - /8/9]
 │         ├── key: (1)
 │         └── fd: (1)-->(2)
 └── filters [type=bool, outer=(1-3), constraints=(/2/1/3: [/1/2/4 - /8/9/9]; tight)]
      ├── (b.u, b.k, b.v) > (1, 2, 3) [type=bool, outer=(1-3), constraints=(/2/1/3: [/1/2/4 - ]; tight)]
      └── (b.u, b.k, b.v) < (8, 9, 10) [type=bool, outer=(1-3), constraints=(/2/1/3: (/NULL - /8/9/9]; tight)]

memo
SELECT * FROM b WHERE (u, k, v) > (1, 2, 3) AND (u, k, v) < (8, 9, 10)
----
memo (optimized)
 ├── G1: (select G2 G4) (select G3 G4)
 │    └── "[presentation: k:1,u:2,v:3]"
 │         ├── best: (select G3 G4)
 │         └── cost: 58.51
 ├── G2: (scan b) (index-join G5 b,cols=(1-3)) (index-join G6 b,cols=(1-3))
 │    └── ""
 │         ├── best: (scan b)
 │         └── cost: 1060.00
 ├── G3: (index-join G7 b,cols=(1-3))
 │    └── ""
 │         ├── best: (index-join G7 b,cols=(1-3))
 │         └── cost: 58.40
 ├── G4: (filters G8 G9)
 ├── G5: (scan b@u,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,cols=(1,2))
 │         └── cost: 1040.00
 ├── G6: (scan b@v,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3))
 │         └── cost: 1040.00
 ├── G7: (scan b@u,cols=(1,2),constrained)
 │    └── ""
 │         ├── best: (scan b@u,cols=(1,2),constrained)
 │         └── cost: 11.89
 ├── G8: (gt G11 G10)
 ├── G9: (lt G11 G12)
 ├── G10: (tuple G13 G14 G15)
 ├── G11: (tuple G16 G17 G18)
 ├── G12: (tuple G19 G20 G21)
 ├── G13: (const 1)
 ├── G14: (const 2)
 ├── G15: (const 3)
 ├── G16: (variable b.u)
 ├── G17: (variable b.k)
 ├── G18: (variable b.v)
 ├── G19: (const 8)
 ├── G20: (const 9)
 └── G21: (const 10)
