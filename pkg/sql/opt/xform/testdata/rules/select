exec-ddl
CREATE TABLE a
(
    k INT PRIMARY KEY,
    u INT,
    v INT,
    INDEX u(u) STORING (v),
    UNIQUE INDEX v(v) STORING (u)
)
----
TABLE a
 ├── k int not null
 ├── u int
 ├── v int
 ├── INDEX primary
 │    └── k int not null
 ├── INDEX u
 │    ├── u int
 │    ├── k int not null
 │    └── v int (storing)
 └── INDEX v
      ├── v int
      ├── k int not null (storing)
      └── u int (storing)

# --------------------------------------------------
# ConstrainScan
# --------------------------------------------------

opt
SELECT k FROM a WHERE k = 1
----
scan a
 ├── columns: k:1(int!null)
 ├── constraint: /1: [/1 - /1]
 └── keys: (1)

memo
SELECT k FROM a WHERE k = 1
----
[9: "p:k:1"]
memo
 ├── 10: (true)
 ├── 9: (select 8 5) (scan a,constrained)
 │    └── "p:k:1" [cost=100.00]
 │         └── best: (scan a,constrained)
 ├── 8: (scan a) (scan a@u) (scan a@v)
 │    └── "" [cost=1000.00]
 │         └── best: (scan a)
 ├── 7: (projections 2)
 ├── 6: (select 1 5)
 ├── 5: (filters 4)
 ├── 4: (eq 2 3)
 ├── 3: (const 1)
 ├── 2: (variable a.k)
 └── 1: (scan a)

opt
SELECT k FROM a WHERE v > 1
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 ├── scan a@v
 │    ├── columns: a.k:1(int!null) a.v:3(int)
 │    ├── constraint: /3: [/2 - ]
 │    └── keys: (1) weak(3)
 └── projections [outer=(1)]
      └── variable: a.k [type=int, outer=(1)]

memo
SELECT k FROM a WHERE v > 1
----
[11: "p:k:1"]
memo
 ├── 12: (true)
 ├── 11: (project 10 8)
 │    └── "p:k:1" [cost=100.00]
 │         └── best: (project 10 8)
 ├── 10: (select 9 5) (scan a@v,constrained)
 │    └── "" [cost=100.00]
 │         └── best: (scan a@v,constrained)
 ├── 9: (scan a) (scan a@u) (scan a@v)
 │    └── "" [cost=1000.00]
 │         └── best: (scan a)
 ├── 8: (projections 7)
 ├── 7: (variable a.k)
 ├── 6: (select 1 5)
 ├── 5: (filters 4)
 ├── 4: (gt 2 3)
 ├── 3: (const 1)
 ├── 2: (variable a.v)
 └── 1: (scan a)

opt
SELECT k FROM a WHERE u = 1 AND k = 5
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 ├── scan a@u
 │    ├── columns: a.k:1(int!null) a.u:2(int)
 │    ├── constraint: /2/1: [/1/5 - /1/5]
 │    └── keys: (1)
 └── projections [outer=(1)]
      └── variable: a.k [type=int, outer=(1)]

memo
SELECT k FROM a WHERE u = 1 AND k = 5
----
[14: "p:k:1"]
memo
 ├── 17: (scan a,constrained)
 │    └── "" [cost=100.00]
 │         └── best: (scan a,constrained)
 ├── 16: (filters 4)
 ├── 15: (true)
 ├── 14: (project 13 11)
 │    └── "p:k:1" [cost=100.00]
 │         └── best: (project 13 11)
 ├── 13: (select 12 9) (select 17 16) (scan a@u,constrained)
 │    └── "" [cost=100.00]
 │         └── best: (scan a@u,constrained)
 ├── 12: (scan a) (scan a@u) (scan a@v)
 │    └── "" [cost=1000.00]
 │         └── best: (scan a)
 ├── 11: (projections 5)
 ├── 10: (select 1 9)
 ├── 9: (filters 4 7)
 ├── 8: (and 4 7)
 ├── 7: (eq 5 6)
 ├── 6: (const 5)
 ├── 5: (variable a.k)
 ├── 4: (eq 2 3)
 ├── 3: (const 1)
 ├── 2: (variable a.u)
 └── 1: (scan a)

# Constraint + remaining filter.
opt
SELECT k FROM a WHERE u = 1 AND k+u = 1
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 ├── select
 │    ├── columns: a.k:1(int!null) a.u:2(int)
 │    ├── keys: (1)
 │    ├── scan a@u
 │    │    ├── columns: a.k:1(int!null) a.u:2(int)
 │    │    ├── constraint: /2/1: [/1 - /1]
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(1,2)]
 │         └── eq [type=bool, outer=(1,2)]
 │              ├── plus [type=int, outer=(1,2)]
 │              │    ├── variable: a.k [type=int, outer=(1)]
 │              │    └── variable: a.u [type=int, outer=(2)]
 │              └── const: 1 [type=int]
 └── projections [outer=(1)]
      └── variable: a.k [type=int, outer=(1)]

memo
SELECT k FROM a WHERE u = 1 AND k+u = 1
----
[14: "p:k:1"]
memo
 ├── 17: (scan a@u,constrained)
 │    └── "" [cost=100.00]
 │         └── best: (scan a@u,constrained)
 ├── 16: (filters 7)
 ├── 15: (true)
 ├── 14: (project 13 11)
 │    └── "p:k:1" [cost=110.00]
 │         └── best: (project 13 11)
 ├── 13: (select 12 9) (select 17 16)
 │    └── "" [cost=110.00]
 │         └── best: (select 17 16)
 ├── 12: (scan a) (scan a@u) (scan a@v)
 │    └── "" [cost=1000.00]
 │         └── best: (scan a)
 ├── 11: (projections 5)
 ├── 10: (select 1 9)
 ├── 9: (filters 4 7)
 ├── 8: (and 4 7)
 ├── 7: (eq 6 3)
 ├── 6: (plus 5 2)
 ├── 5: (variable a.k)
 ├── 4: (eq 2 3)
 ├── 3: (const 1)
 ├── 2: (variable a.u)
 └── 1: (scan a)

opt
SELECT k FROM a WHERE u = 1 AND v = 5
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 ├── select
 │    ├── columns: a.k:1(int!null) a.u:2(int) a.v:3(int)
 │    ├── keys: (1) weak(3)
 │    ├── scan a@u
 │    │    ├── columns: a.k:1(int!null) a.u:2(int) a.v:3(int)
 │    │    ├── constraint: /2/1: [/1 - /1]
 │    │    └── keys: (1) weak(3)
 │    └── filters [type=bool, outer=(3), constraints=(/3: [/5 - /5]; tight)]
 │         └── eq [type=bool, outer=(3), constraints=(/3: [/5 - /5]; tight)]
 │              ├── variable: a.v [type=int, outer=(3)]
 │              └── const: 5 [type=int]
 └── projections [outer=(1)]
      └── variable: a.k [type=int, outer=(1)]

memo
SELECT k FROM a WHERE u = 1 AND v = 5
----
[13: "p:k:1"]
memo
 ├── 18: (scan a@v,constrained)
 │    └── "" [cost=100.00]
 │         └── best: (scan a@v,constrained)
 ├── 17: (filters 4)
 ├── 16: (scan a@u,constrained)
 │    └── "" [cost=100.00]
 │         └── best: (scan a@u,constrained)
 ├── 15: (filters 7)
 ├── 14: (true)
 ├── 13: (project 10 12)
 │    └── "p:k:1" [cost=110.00]
 │         └── best: (project 10 12)
 ├── 12: (projections 11)
 ├── 11: (variable a.k)
 ├── 10: (select 1 9) (select 16 15) (select 18 17)
 │    └── "" [cost=110.00]
 │         └── best: (select 16 15)
 ├── 9: (filters 4 7)
 ├── 8: (and 4 7)
 ├── 7: (eq 5 6)
 ├── 6: (const 5)
 ├── 5: (variable a.v)
 ├── 4: (eq 2 3)
 ├── 3: (const 1)
 ├── 2: (variable a.u)
 └── 1: (scan a) (scan a@u) (scan a@v)
      └── "" [cost=1000.00]
           └── best: (scan a)

# No constraint can be derived from filter (nothing should be pushed down).
opt
SELECT k FROM a WHERE u=v
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 ├── select
 │    ├── columns: a.k:1(int!null) a.u:2(int) a.v:3(int)
 │    ├── keys: (1) weak(3)
 │    ├── scan a@u
 │    │    ├── columns: a.k:1(int!null) a.u:2(int) a.v:3(int)
 │    │    ├── constraint: /2/1: (/NULL - ]
 │    │    └── keys: (1) weak(3)
 │    └── filters [type=bool, outer=(2,3)]
 │         └── eq [type=bool, outer=(2,3)]
 │              ├── variable: a.u [type=int, outer=(2)]
 │              └── variable: a.v [type=int, outer=(3)]
 └── projections [outer=(1)]
      └── variable: a.k [type=int, outer=(1)]

# Don't push constraint into already limited scan.
opt
SELECT k FROM (SELECT k FROM a ORDER BY u LIMIT 1) a WHERE k = 1
----
select
 ├── columns: k:1(int!null)
 ├── keys: (1)
 ├── scan a@u
 │    ├── columns: a.k:1(int!null) a.u:2(int)
 │    ├── limit: 1
 │    └── keys: (1)
 └── filters [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
      └── eq [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
           ├── variable: a.k [type=int, outer=(1)]
           └── const: 1 [type=int]
