exec-ddl
CREATE TABLE a
(
    k INT PRIMARY KEY,
    u INT,
    v INT,
    INDEX u(u) STORING (v),
    UNIQUE INDEX v(v) STORING (u)
)
----
TABLE a
 ├── k int not null
 ├── u int
 ├── v int
 ├── INDEX primary
 │    └── k int not null
 ├── INDEX u
 │    ├── u int
 │    ├── k int not null
 │    └── v int (storing)
 └── INDEX v
      ├── v int
      ├── k int not null (storing)
      └── u int (storing)

exec-ddl
CREATE TABLE b
(
    k INT PRIMARY KEY,
    u INT,
    v INT,
    j JSONB,
    INDEX u(u),
    UNIQUE INDEX v(v),
    INVERTED INDEX inv_idx(j)
)
----
TABLE b
 ├── k int not null
 ├── u int
 ├── v int
 ├── j jsonb
 ├── INDEX primary
 │    └── k int not null
 ├── INDEX u
 │    ├── u int
 │    └── k int not null
 ├── INDEX v
 │    ├── v int
 │    └── k int not null (storing)
 └── INVERTED INDEX inv_idx
      ├── j jsonb
      └── k int not null

# --------------------------------------------------
# ConstrainScan
# --------------------------------------------------

opt
SELECT k FROM a WHERE k = 1
----
scan a
 ├── columns: k:1(int!null)
 ├── constraint: /1: [/1 - /1]
 ├── cardinality: [0 - 1]
 ├── key: ()
 └── fd: ()-->(1)

memo
SELECT k FROM a WHERE k = 1
----
memo (optimized)
 ├── G1: (select G2 G3) (scan a,cols=(1),constrained) (scan a,rev,cols=(1),constrained)
 │    └── "[presentation: k:1]"
 │         ├── best: (scan a,cols=(1),constrained)
 │         └── cost: 1.04
 ├── G2: (scan a,cols=(1)) (scan a,rev,cols=(1)) (scan a@u,cols=(1)) (scan a@u,rev,cols=(1)) (scan a@v,cols=(1)) (scan a@v,rev,cols=(1))
 │    └── ""
 │         ├── best: (scan a,cols=(1))
 │         └── cost: 1040.00
 ├── G3: (filters G4)
 ├── G4: (eq G5 G6)
 ├── G5: (variable a.k)
 └── G6: (const 1)

opt
SELECT k FROM a WHERE v > 1
----
project
 ├── columns: k:1(int!null)
 ├── key: (1)
 └── scan a@v
      ├── columns: k:1(int!null) v:3(int!null)
      ├── constraint: /3: [/2 - ]
      ├── key: (1)
      └── fd: (1)-->(3), (3)-->(1)

memo
SELECT k FROM a WHERE v > 1
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 350.00
 ├── G2: (select G4 G5) (scan a@v,cols=(1,3),constrained) (scan a@v,rev,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan a@v,cols=(1,3),constrained)
 │         └── cost: 350.00
 ├── G3: (projections a.k)
 ├── G4: (scan a,cols=(1,3)) (scan a,rev,cols=(1,3)) (scan a@u,cols=(1,3)) (scan a@u,rev,cols=(1,3)) (scan a@v,cols=(1,3)) (scan a@v,rev,cols=(1,3))
 │    └── ""
 │         ├── best: (scan a,cols=(1,3))
 │         └── cost: 1050.00
 ├── G5: (filters G6)
 ├── G6: (gt G7 G8)
 ├── G7: (variable a.v)
 └── G8: (const 1)

opt
SELECT k FROM a WHERE u = 1 AND k = 5
----
project
 ├── columns: k:1(int!null)
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── scan a@u
      ├── columns: k:1(int!null) u:2(int!null)
      ├── constraint: /2/1: [/1/5 - /1/5]
      ├── cardinality: [0 - 1]
      ├── key: ()
      └── fd: ()-->(1,2)

memo
SELECT k FROM a WHERE u = 1 AND k = 5
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 1.05
 ├── G2: (select G4 G5) (select G6 G8) (select G7 G8) (scan a@u,cols=(1,2),constrained) (scan a@u,rev,cols=(1,2),constrained)
 │    └── ""
 │         ├── best: (scan a@u,cols=(1,2),constrained)
 │         └── cost: 1.05
 ├── G3: (projections a.k)
 ├── G4: (scan a,cols=(1,2)) (scan a,rev,cols=(1,2)) (scan a@u,cols=(1,2)) (scan a@u,rev,cols=(1,2)) (scan a@v,cols=(1,2)) (scan a@v,rev,cols=(1,2))
 │    └── ""
 │         ├── best: (scan a,cols=(1,2))
 │         └── cost: 1050.00
 ├── G5: (filters G10 G9)
 ├── G6: (scan a,cols=(1,2),constrained)
 │    └── ""
 │         ├── best: (scan a,cols=(1,2),constrained)
 │         └── cost: 1.05
 ├── G7: (scan a,rev,cols=(1,2),constrained)
 │    └── ""
 │         ├── best: (scan a,rev,cols=(1,2),constrained)
 │         └── cost: 1.10
 ├── G8: (filters G10)
 ├── G9: (eq G11 G12)
 ├── G10: (eq G13 G14)
 ├── G11: (variable a.k)
 ├── G12: (const 5)
 ├── G13: (variable a.u)
 └── G14: (const 1)

# Constraint + remaining filter.
opt
SELECT k FROM a WHERE u = 1 AND k+u = 1
----
project
 ├── columns: k:1(int!null)
 ├── key: (1)
 └── select
      ├── columns: k:1(int!null) u:2(int!null)
      ├── key: (1)
      ├── fd: ()-->(2)
      ├── scan a@u
      │    ├── columns: k:1(int!null) u:2(int!null)
      │    ├── constraint: /2/1: [/1 - /1]
      │    ├── key: (1)
      │    └── fd: ()-->(2)
      └── filters [type=bool, outer=(1,2)]
           └── (a.k + a.u) = 1 [type=bool, outer=(1,2)]

memo
SELECT k FROM a WHERE u = 1 AND k+u = 1
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 1.51
 ├── G2: (select G4 G5) (select G6 G8) (select G7 G8)
 │    └── ""
 │         ├── best: (select G6 G8)
 │         └── cost: 1.51
 ├── G3: (projections a.k)
 ├── G4: (scan a,cols=(1,2)) (scan a,rev,cols=(1,2)) (scan a@u,cols=(1,2)) (scan a@u,rev,cols=(1,2)) (scan a@v,cols=(1,2)) (scan a@v,rev,cols=(1,2))
 │    └── ""
 │         ├── best: (scan a,cols=(1,2))
 │         └── cost: 1050.00
 ├── G5: (filters G9 G10)
 ├── G6: (scan a@u,cols=(1,2),constrained)
 │    └── ""
 │         ├── best: (scan a@u,cols=(1,2),constrained)
 │         └── cost: 1.50
 ├── G7: (scan a@u,rev,cols=(1,2),constrained)
 │    └── ""
 │         ├── best: (scan a@u,rev,cols=(1,2),constrained)
 │         └── cost: 1.57
 ├── G8: (filters G10)
 ├── G9: (eq G14 G12)
 ├── G10: (eq G11 G12)
 ├── G11: (plus G13 G14)
 ├── G12: (const 1)
 ├── G13: (variable a.k)
 └── G14: (variable a.u)

opt
SELECT k FROM a WHERE u = 1 AND v = 5
----
project
 ├── columns: k:1(int!null)
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── select
      ├── columns: k:1(int!null) u:2(int!null) v:3(int!null)
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1-3)
      ├── scan a@v
      │    ├── columns: k:1(int!null) u:2(int) v:3(int!null)
      │    ├── constraint: /3: [/5 - /5]
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    └── fd: ()-->(1-3)
      └── filters [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
           └── a.u = 1 [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]

memo
SELECT k FROM a WHERE u = 1 AND v = 5
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 1.07
 ├── G2: (select G4 G5) (select G6 G8) (select G7 G8) (select G9 G11) (select G10 G11)
 │    └── ""
 │         ├── best: (select G9 G11)
 │         └── cost: 1.07
 ├── G3: (projections a.k)
 ├── G4: (scan a) (scan a,rev) (scan a@u) (scan a@u,rev) (scan a@v) (scan a@v,rev)
 │    └── ""
 │         ├── best: (scan a)
 │         └── cost: 1060.00
 ├── G5: (filters G13 G12)
 ├── G6: (scan a@u,constrained)
 │    └── ""
 │         ├── best: (scan a@u,constrained)
 │         └── cost: 1.51
 ├── G7: (scan a@u,rev,constrained)
 │    └── ""
 │         ├── best: (scan a@u,rev,constrained)
 │         └── cost: 1.60
 ├── G8: (filters G12)
 ├── G9: (scan a@v,constrained)
 │    └── ""
 │         ├── best: (scan a@v,constrained)
 │         └── cost: 1.06
 ├── G10: (scan a@v,rev,constrained)
 │    └── ""
 │         ├── best: (scan a@v,rev,constrained)
 │         └── cost: 1.12
 ├── G11: (filters G13)
 ├── G12: (eq G14 G15)
 ├── G13: (eq G16 G17)
 ├── G14: (variable a.v)
 ├── G15: (const 5)
 ├── G16: (variable a.u)
 └── G17: (const 1)

# Only not-null constraint is pushed down.
opt
SELECT k FROM a WHERE u=v
----
project
 ├── columns: k:1(int!null)
 ├── key: (1)
 └── select
      ├── columns: k:1(int!null) u:2(int!null) v:3(int!null)
      ├── key: (1)
      ├── fd: (1)-->(2,3), (3)-->(1), (2)==(3), (3)==(2)
      ├── scan a@u
      │    ├── columns: k:1(int!null) u:2(int!null) v:3(int)
      │    ├── constraint: /2/1: (/NULL - ]
      │    ├── key: (1)
      │    └── fd: (1)-->(2,3), (3)~~>(1,2)
      └── filters [type=bool, outer=(2,3), constraints=(/2: (/NULL - ]; /3: (/NULL - ]), fd=(2)==(3), (3)==(2)]
           └── a.u = a.v [type=bool, outer=(2,3), constraints=(/2: (/NULL - ]; /3: (/NULL - ])]

# Don't push constraint into already limited scan.
opt
SELECT k FROM (SELECT k FROM a ORDER BY u LIMIT 1) a WHERE k = 1
----
project
 ├── columns: k:1(int!null)
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── select
      ├── columns: k:1(int!null) u:2(int)
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1,2)
      ├── scan a@u
      │    ├── columns: k:1(int!null) u:2(int)
      │    ├── limit: 1
      │    ├── key: ()
      │    └── fd: ()-->(1,2)
      └── filters [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight), fd=()-->(1)]
           └── a.k = 1 [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]

# --------------------------------------------------
# PushFilterIntoLookupJoinNoRemainder
# --------------------------------------------------

opt
SELECT * FROM b WHERE v >= 1 AND v <= 10
----
index-join b
 ├── columns: k:1(int!null) u:2(int) v:3(int!null) j:4(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-4), (3)-->(1,2,4)
 └── scan b@v
      ├── columns: k:1(int!null) v:3(int!null)
      ├── constraint: /3: [/1 - /10]
      ├── key: (1)
      └── fd: (1)-->(3), (3)-->(1)

memo
SELECT * FROM b WHERE v >= 1 AND v <= 10
----
memo (optimized)
 ├── G1: (select G2 G11) (index-join G3 b,cols=(1-4)) (index-join G4 b,cols=(1-4)) (index-join G5 b,cols=(1-4)) (index-join G6 b,cols=(1-4))
 │    └── "[presentation: k:1,u:2,v:3,j:4]"
 │         ├── best: (index-join G3 b,cols=(1-4))
 │         └── cost: 51.30
 ├── G2: (scan b) (scan b,rev) (index-join G7 b,cols=(1-4)) (index-join G8 b,cols=(1-4)) (index-join G9 b,cols=(1-4)) (index-join G10 b,cols=(1-4))
 │    └── ""
 │         ├── best: (scan b)
 │         └── cost: 1080.00
 ├── G3: (select G9 G11) (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 10.40
 ├── G4: (select G10 G11) (scan b@v,rev,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,rev,cols=(1,3),constrained)
 │         └── cost: 10.80
 ├── G5: (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 10.40
 ├── G6: (scan b@v,rev,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,rev,cols=(1,3),constrained)
 │         └── cost: 10.80
 ├── G7: (scan b@u,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,cols=(1,2))
 │         └── cost: 1040.00
 ├── G8: (scan b@u,rev,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,rev,cols=(1,2))
 │         └── cost: 1080.00
 ├── G9: (scan b@v,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3))
 │         └── cost: 1040.00
 ├── G10: (scan b@v,rev,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,rev,cols=(1,3))
 │         └── cost: 1080.00
 ├── G11: (filters G12 G13)
 ├── G12: (ge G15 G14)
 ├── G13: (le G15 G16)
 ├── G14: (const 1)
 ├── G15: (variable b.v)
 └── G16: (const 10)

# Don't choose lookup join if it's not beneficial.
opt
SELECT * FROM b WHERE v > 1
----
select
 ├── columns: k:1(int!null) u:2(int) v:3(int!null) j:4(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-4), (3)-->(1,2,4)
 ├── scan b
 │    ├── columns: k:1(int!null) u:2(int) v:3(int) j:4(jsonb)
 │    ├── key: (1)
 │    └── fd: (1)-->(2-4), (3)~~>(1,2,4)
 └── filters [type=bool, outer=(3), constraints=(/3: [/2 - ]; tight)]
      └── b.v > 1 [type=bool, outer=(3), constraints=(/3: [/2 - ]; tight)]

opt
SELECT * FROM b WHERE v >= 1 AND v <= 10 AND k > 5
----
index-join b
 ├── columns: k:1(int!null) u:2(int) v:3(int!null) j:4(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-4), (3)-->(1,2,4)
 └── select
      ├── columns: k:1(int!null) v:3(int!null)
      ├── key: (1)
      ├── fd: (1)-->(3), (3)-->(1)
      ├── scan b@v
      │    ├── columns: k:1(int!null) v:3(int!null)
      │    ├── constraint: /3: [/1 - /10]
      │    ├── key: (1)
      │    └── fd: (1)-->(3), (3)-->(1)
      └── filters [type=bool, outer=(1), constraints=(/1: [/6 - ]; tight)]
           └── b.k > 5 [type=bool, outer=(1), constraints=(/1: [/6 - ]; tight)]

memo
SELECT * FROM b WHERE v >= 1 AND v <= 10 AND k > 5
----
memo (optimized)
 ├── G1: (select G2 G17) (select G3 G9) (select G4 G9) (index-join G5 b,cols=(1-4)) (index-join G6 b,cols=(1-4)) (select G7 G9) (select G8 G9) (select G10 G27) (select G11 G27) (index-join G12 b,cols=(1-4)) (index-join G13 b,cols=(1-4))
 │    └── "[presentation: k:1,u:2,v:3,j:4]"
 │         ├── best: (index-join G5 b,cols=(1-4))
 │         └── cost: 24.13
 ├── G2: (scan b) (scan b,rev) (index-join G25 b,cols=(1-4)) (index-join G26 b,cols=(1-4)) (index-join G14 b,cols=(1-4)) (index-join G16 b,cols=(1-4))
 │    └── ""
 │         ├── best: (scan b)
 │         └── cost: 1080.00
 ├── G3: (scan b,constrained)
 │    └── ""
 │         ├── best: (scan b,constrained)
 │         └── cost: 360.00
 ├── G4: (scan b,rev,constrained)
 │    └── ""
 │         ├── best: (scan b,rev,constrained)
 │         └── cost: 386.67
 ├── G5: (select G14 G17) (select G15 G27)
 │    └── ""
 │         ├── best: (select G15 G27)
 │         └── cost: 10.50
 ├── G6: (select G16 G17) (select G18 G27)
 │    └── ""
 │         ├── best: (select G18 G27)
 │         └── cost: 10.90
 ├── G7: (index-join G19 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G19 b,cols=(1-4))
 │         └── cost: 2413.33
 ├── G8: (index-join G20 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G20 b,cols=(1-4))
 │         └── cost: 2453.33
 ├── G9: (filters G23 G24)
 ├── G10: (index-join G21 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G21 b,cols=(1-4))
 │         └── cost: 51.30
 ├── G11: (index-join G22 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G22 b,cols=(1-4))
 │         └── cost: 51.70
 ├── G12: (select G21 G27)
 │    └── ""
 │         ├── best: (select G21 G27)
 │         └── cost: 10.50
 ├── G13: (select G22 G27)
 │    └── ""
 │         ├── best: (select G22 G27)
 │         └── cost: 10.90
 ├── G14: (scan b@v,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3))
 │         └── cost: 1040.00
 ├── G15: (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 10.40
 ├── G16: (scan b@v,rev,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,rev,cols=(1,3))
 │         └── cost: 1080.00
 ├── G17: (filters G23 G24 G31)
 ├── G18: (scan b@v,rev,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,rev,cols=(1,3),constrained)
 │         └── cost: 10.80
 ├── G19: (select G25 G27)
 │    └── ""
 │         ├── best: (select G25 G27)
 │         └── cost: 1050.00
 ├── G20: (select G26 G27)
 │    └── ""
 │         ├── best: (select G26 G27)
 │         └── cost: 1090.00
 ├── G21: (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 10.40
 ├── G22: (scan b@v,rev,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,rev,cols=(1,3),constrained)
 │         └── cost: 10.80
 ├── G23: (ge G29 G28)
 ├── G24: (le G29 G30)
 ├── G25: (scan b@u,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,cols=(1,2))
 │         └── cost: 1040.00
 ├── G26: (scan b@u,rev,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,rev,cols=(1,2))
 │         └── cost: 1080.00
 ├── G27: (filters G31)
 ├── G28: (const 1)
 ├── G29: (variable b.v)
 ├── G30: (const 10)
 ├── G31: (gt G32 G33)
 ├── G32: (variable b.k)
 └── G33: (const 5)


# --------------------------------------------------
# PushFilterIntoLookupJoin
# --------------------------------------------------

# Constraint + remaining filter.
opt
SELECT * FROM b WHERE v >= 1 AND v <= 10 AND k+u = 1
----
select
 ├── columns: k:1(int!null) u:2(int) v:3(int!null) j:4(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-4), (3)-->(1,2,4)
 ├── index-join b
 │    ├── columns: k:1(int!null) u:2(int) v:3(int) j:4(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4), (3)-->(1), (3)~~>(1,2,4)
 │    └── scan b@v
 │         ├── columns: k:1(int!null) v:3(int!null)
 │         ├── constraint: /3: [/1 - /10]
 │         ├── key: (1)
 │         └── fd: (1)-->(3), (3)-->(1)
 └── filters [type=bool, outer=(1,2)]
      └── (b.k + b.u) = 1 [type=bool, outer=(1,2)]

memo
SELECT * FROM b WHERE v >= 1 AND v <= 10 AND k+u = 1
----
memo (optimized)
 ├── G1: (select G2 G3) (select G4 G21) (select G5 G21) (select G6 G18) (select G7 G18) (select G8 G18) (select G9 G18)
 │    └── "[presentation: k:1,u:2,v:3,j:4]"
 │         ├── best: (select G6 G18)
 │         └── cost: 51.40
 ├── G2: (scan b) (scan b,rev) (index-join G16 b,cols=(1-4)) (index-join G17 b,cols=(1-4)) (index-join G19 b,cols=(1-4)) (index-join G20 b,cols=(1-4))
 │    └── ""
 │         ├── best: (scan b)
 │         └── cost: 1080.00
 ├── G3: (filters G23 G24 G22)
 ├── G4: (index-join G10 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G10 b,cols=(1-4))
 │         └── cost: 2413.33
 ├── G5: (index-join G11 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G11 b,cols=(1-4))
 │         └── cost: 2453.33
 ├── G6: (index-join G12 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G12 b,cols=(1-4))
 │         └── cost: 51.30
 ├── G7: (index-join G13 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G13 b,cols=(1-4))
 │         └── cost: 51.70
 ├── G8: (index-join G14 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G14 b,cols=(1-4))
 │         └── cost: 51.30
 ├── G9: (index-join G15 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G15 b,cols=(1-4))
 │         └── cost: 51.70
 ├── G10: (select G16 G18)
 │    └── ""
 │         ├── best: (select G16 G18)
 │         └── cost: 1050.00
 ├── G11: (select G17 G18)
 │    └── ""
 │         ├── best: (select G17 G18)
 │         └── cost: 1090.00
 ├── G12: (select G19 G21) (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 10.40
 ├── G13: (select G20 G21) (scan b@v,rev,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,rev,cols=(1,3),constrained)
 │         └── cost: 10.80
 ├── G14: (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 10.40
 ├── G15: (scan b@v,rev,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,rev,cols=(1,3),constrained)
 │         └── cost: 10.80
 ├── G16: (scan b@u,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,cols=(1,2))
 │         └── cost: 1040.00
 ├── G17: (scan b@u,rev,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,rev,cols=(1,2))
 │         └── cost: 1080.00
 ├── G18: (filters G22)
 ├── G19: (scan b@v,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3))
 │         └── cost: 1040.00
 ├── G20: (scan b@v,rev,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,rev,cols=(1,3))
 │         └── cost: 1080.00
 ├── G21: (filters G23 G24)
 ├── G22: (eq G25 G26)
 ├── G23: (ge G27 G26)
 ├── G24: (le G27 G28)
 ├── G25: (plus G29 G30)
 ├── G26: (const 1)
 ├── G27: (variable b.v)
 ├── G28: (const 10)
 ├── G29: (variable b.k)
 └── G30: (variable b.u)

opt
SELECT * FROM b WHERE v >= 1 AND v <= 10 AND k+u = 1 AND k > 5
----
select
 ├── columns: k:1(int!null) u:2(int) v:3(int!null) j:4(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-4), (3)-->(1,2,4)
 ├── index-join b
 │    ├── columns: k:1(int!null) u:2(int) v:3(int) j:4(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4), (3)-->(1), (3)~~>(1,2,4)
 │    └── select
 │         ├── columns: k:1(int!null) v:3(int!null)
 │         ├── key: (1)
 │         ├── fd: (1)-->(3), (3)-->(1)
 │         ├── scan b@v
 │         │    ├── columns: k:1(int!null) v:3(int!null)
 │         │    ├── constraint: /3: [/1 - /10]
 │         │    ├── key: (1)
 │         │    └── fd: (1)-->(3), (3)-->(1)
 │         └── filters [type=bool, outer=(1), constraints=(/1: [/6 - ]; tight)]
 │              └── b.k > 5 [type=bool, outer=(1), constraints=(/1: [/6 - ]; tight)]
 └── filters [type=bool, outer=(1,2)]
      └── (b.k + b.u) = 1 [type=bool, outer=(1,2)]

memo
SELECT * FROM b WHERE v >= 1 AND v <= 10 AND k+u = 1 AND k > 5
----
memo (optimized)
 ├── G1: (select G2 G3) (select G4 G6) (select G5 G6) (select G7 G9) (select G8 G9) (select G10 G16) (select G11 G16) (select G12 G25) (select G13 G25) (select G14 G16) (select G15 G16)
 │    └── "[presentation: k:1,u:2,v:3,j:4]"
 │         ├── best: (select G10 G16)
 │         └── cost: 24.17
 ├── G2: (scan b) (scan b,rev) (index-join G23 b,cols=(1-4)) (index-join G24 b,cols=(1-4)) (index-join G26 b,cols=(1-4)) (index-join G28 b,cols=(1-4))
 │    └── ""
 │         ├── best: (scan b)
 │         └── cost: 1080.00
 ├── G3: (filters G35 G36 G34 G37)
 ├── G4: (scan b,constrained)
 │    └── ""
 │         ├── best: (scan b,constrained)
 │         └── cost: 360.00
 ├── G5: (scan b,rev,constrained)
 │    └── ""
 │         ├── best: (scan b,rev,constrained)
 │         └── cost: 386.67
 ├── G6: (filters G35 G36 G34)
 ├── G7: (index-join G17 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G17 b,cols=(1-4))
 │         └── cost: 1504.44
 ├── G8: (index-join G18 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G18 b,cols=(1-4))
 │         └── cost: 1544.44
 ├── G9: (filters G35 G36)
 ├── G10: (index-join G19 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G19 b,cols=(1-4))
 │         └── cost: 24.13
 ├── G11: (index-join G20 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G20 b,cols=(1-4))
 │         └── cost: 24.53
 ├── G12: (index-join G31 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G31 b,cols=(1-4))
 │         └── cost: 51.30
 ├── G13: (index-join G32 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G32 b,cols=(1-4))
 │         └── cost: 51.70
 ├── G14: (index-join G21 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G21 b,cols=(1-4))
 │         └── cost: 24.13
 ├── G15: (index-join G22 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G22 b,cols=(1-4))
 │         └── cost: 24.53
 ├── G16: (filters G34)
 ├── G17: (select G23 G25)
 │    └── ""
 │         ├── best: (select G23 G25)
 │         └── cost: 1050.00
 ├── G18: (select G24 G25)
 │    └── ""
 │         ├── best: (select G24 G25)
 │         └── cost: 1090.00
 ├── G19: (select G26 G29) (select G27 G33)
 │    └── ""
 │         ├── best: (select G27 G33)
 │         └── cost: 10.50
 ├── G20: (select G28 G29) (select G30 G33)
 │    └── ""
 │         ├── best: (select G30 G33)
 │         └── cost: 10.90
 ├── G21: (select G31 G33)
 │    └── ""
 │         ├── best: (select G31 G33)
 │         └── cost: 10.50
 ├── G22: (select G32 G33)
 │    └── ""
 │         ├── best: (select G32 G33)
 │         └── cost: 10.90
 ├── G23: (scan b@u,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,cols=(1,2))
 │         └── cost: 1040.00
 ├── G24: (scan b@u,rev,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,rev,cols=(1,2))
 │         └── cost: 1080.00
 ├── G25: (filters G34 G37)
 ├── G26: (scan b@v,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3))
 │         └── cost: 1040.00
 ├── G27: (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 10.40
 ├── G28: (scan b@v,rev,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,rev,cols=(1,3))
 │         └── cost: 1080.00
 ├── G29: (filters G35 G36 G37)
 ├── G30: (scan b@v,rev,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,rev,cols=(1,3),constrained)
 │         └── cost: 10.80
 ├── G31: (scan b@v,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3),constrained)
 │         └── cost: 10.40
 ├── G32: (scan b@v,rev,cols=(1,3),constrained)
 │    └── ""
 │         ├── best: (scan b@v,rev,cols=(1,3),constrained)
 │         └── cost: 10.80
 ├── G33: (filters G37)
 ├── G34: (eq G38 G39)
 ├── G35: (ge G40 G39)
 ├── G36: (le G40 G41)
 ├── G37: (gt G43 G42)
 ├── G38: (plus G43 G44)
 ├── G39: (const 1)
 ├── G40: (variable b.v)
 ├── G41: (const 10)
 ├── G42: (const 5)
 ├── G43: (variable b.k)
 └── G44: (variable b.u)

# --------------------------------------------------
# ConstrainLookupJoinIndexScan
# --------------------------------------------------

opt
SELECT * FROM b WHERE (u, k, v) > (1, 2, 3) AND (u, k, v) < (8, 9, 10)
----
select
 ├── columns: k:1(int!null) u:2(int!null) v:3(int) j:4(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-4), (3)~~>(1,2,4)
 ├── index-join b
 │    ├── columns: k:1(int!null) u:2(int) v:3(int) j:4(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4), (3)~~>(1,2,4)
 │    └── scan b@u
 │         ├── columns: k:1(int!null) u:2(int!null)
 │         ├── constraint: /2/1: [/1/2 - /8/9]
 │         ├── key: (1)
 │         └── fd: (1)-->(2)
 └── filters [type=bool, outer=(1-3), constraints=(/2/1/3: [/1/2/4 - /8/9/9]; tight)]
      ├── (b.u, b.k, b.v) > (1, 2, 3) [type=bool, outer=(1-3), constraints=(/2/1/3: [/1/2/4 - ]; tight)]
      └── (b.u, b.k, b.v) < (8, 9, 10) [type=bool, outer=(1-3), constraints=(/2/1/3: (/NULL - /8/9/9]; tight)]

memo
SELECT * FROM b WHERE (u, k, v) > (1, 2, 3) AND (u, k, v) < (8, 9, 10)
----
memo (optimized)
 ├── G1: (select G2 G5) (select G3 G5) (select G4 G5)
 │    └── "[presentation: k:1,u:2,v:3,j:4]"
 │         ├── best: (select G3 G5)
 │         └── cost: 58.74
 ├── G2: (scan b) (scan b,rev) (index-join G6 b,cols=(1-4)) (index-join G7 b,cols=(1-4)) (index-join G8 b,cols=(1-4)) (index-join G9 b,cols=(1-4))
 │    └── ""
 │         ├── best: (scan b)
 │         └── cost: 1080.00
 ├── G3: (index-join G10 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G10 b,cols=(1-4))
 │         └── cost: 58.63
 ├── G4: (index-join G11 b,cols=(1-4))
 │    └── ""
 │         ├── best: (index-join G11 b,cols=(1-4))
 │         └── cost: 59.09
 ├── G5: (filters G12 G13)
 ├── G6: (scan b@u,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,cols=(1,2))
 │         └── cost: 1040.00
 ├── G7: (scan b@u,rev,cols=(1,2))
 │    └── ""
 │         ├── best: (scan b@u,rev,cols=(1,2))
 │         └── cost: 1080.00
 ├── G8: (scan b@v,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,cols=(1,3))
 │         └── cost: 1040.00
 ├── G9: (scan b@v,rev,cols=(1,3))
 │    └── ""
 │         ├── best: (scan b@v,rev,cols=(1,3))
 │         └── cost: 1080.00
 ├── G10: (scan b@u,cols=(1,2),constrained)
 │    └── ""
 │         ├── best: (scan b@u,cols=(1,2),constrained)
 │         └── cost: 11.89
 ├── G11: (scan b@u,rev,cols=(1,2),constrained)
 │    └── ""
 │         ├── best: (scan b@u,rev,cols=(1,2),constrained)
 │         └── cost: 12.34
 ├── G12: (gt G15 G14)
 ├── G13: (lt G15 G16)
 ├── G14: (tuple G17 G18 G19)
 ├── G15: (tuple G20 G21 G22)
 ├── G16: (tuple G23 G24 G25)
 ├── G17: (const 1)
 ├── G18: (const 2)
 ├── G19: (const 3)
 ├── G20: (variable b.u)
 ├── G21: (variable b.k)
 ├── G22: (variable b.v)
 ├── G23: (const 8)
 ├── G24: (const 9)
 └── G25: (const 10)

# --------------------------------------------------
# GenerateInvertedIndexScans
# --------------------------------------------------
# TODO(justin): these can be serviced without an index join.
# Query only the primary key with no remaining filter.
opt
SELECT k FROM b WHERE j @> '{"a": "b"}'
----
project
 ├── columns: k:1(int!null)
 ├── key: (1)
 └── index-join b
      ├── columns: k:1(int!null) j:4(jsonb)
      ├── key: (1)
      ├── fd: (1)-->(4)
      └── scan b@inv_idx
           ├── columns: k:1(int!null)
           ├── constraint: /4/1: [/'{"a": "b"}' - /'{"a": "b"}']
           └── key: (1)

# Query only the primary key with a remaining filter.
opt
SELECT k FROM b WHERE j @> '{"a": "b", "c": "d"}'
----
project
 ├── columns: k:1(int!null)
 ├── key: (1)
 └── select
      ├── columns: k:1(int!null) j:4(jsonb)
      ├── key: (1)
      ├── fd: (1)-->(4)
      ├── index-join b
      │    ├── columns: k:1(int!null) j:4(jsonb)
      │    ├── key: (1)
      │    ├── fd: (1)-->(4)
      │    └── scan b@inv_idx
      │         ├── columns: k:1(int!null)
      │         ├── constraint: /4/1: [/'{"a": "b"}' - /'{"a": "b"}']
      │         └── key: (1)
      └── filters [type=bool, outer=(4)]
           └── b.j @> '{"a": "b", "c": "d"}' [type=bool, outer=(4)]

# Query requiring an index join with no remaining filter.
opt
SELECT u, k FROM b WHERE j @> '{"a": "b"}'
----
project
 ├── columns: u:2(int) k:1(int!null)
 ├── key: (1)
 ├── fd: (1)-->(2)
 └── index-join b
      ├── columns: k:1(int!null) u:2(int) j:4(jsonb)
      ├── key: (1)
      ├── fd: (1)-->(2,4)
      └── scan b@inv_idx
           ├── columns: k:1(int!null)
           ├── constraint: /4/1: [/'{"a": "b"}' - /'{"a": "b"}']
           └── key: (1)

opt
SELECT j, k FROM b WHERE j @> '{"a": "b"}'
----
index-join b
 ├── columns: j:4(jsonb) k:1(int!null)
 ├── key: (1)
 ├── fd: (1)-->(4)
 └── scan b@inv_idx
      ├── columns: k:1(int!null)
      ├── constraint: /4/1: [/'{"a": "b"}' - /'{"a": "b"}']
      └── key: (1)

opt
SELECT * FROM b WHERE j @> '{"a": "b"}'
----
index-join b
 ├── columns: k:1(int!null) u:2(int) v:3(int) j:4(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-4), (3)~~>(1,2,4)
 └── scan b@inv_idx
      ├── columns: k:1(int!null)
      ├── constraint: /4/1: [/'{"a": "b"}' - /'{"a": "b"}']
      └── key: (1)

# Query requiring an index join with a remaining filter.
# TODO(justin): push this filter into the index join.
opt
SELECT j, k FROM b WHERE j @> '{"a": "b", "c": "d"}'
----
select
 ├── columns: j:4(jsonb) k:1(int!null)
 ├── key: (1)
 ├── fd: (1)-->(4)
 ├── index-join b
 │    ├── columns: k:1(int!null) j:4(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(4)
 │    └── scan b@inv_idx
 │         ├── columns: k:1(int!null)
 │         ├── constraint: /4/1: [/'{"a": "b"}' - /'{"a": "b"}']
 │         └── key: (1)
 └── filters [type=bool, outer=(4)]
      └── b.j @> '{"a": "b", "c": "d"}' [type=bool, outer=(4)]

opt
SELECT * FROM b WHERE j @> '{"a": {"b": "c", "d": "e"}, "f": "g"}'
----
select
 ├── columns: k:1(int!null) u:2(int) v:3(int) j:4(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-4), (3)~~>(1,2,4)
 ├── index-join b
 │    ├── columns: k:1(int!null) u:2(int) v:3(int) j:4(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4), (3)~~>(1,2,4)
 │    └── scan b@inv_idx
 │         ├── columns: k:1(int!null)
 │         ├── constraint: /4/1: [/'{"a": {"b": "c"}}' - /'{"a": {"b": "c"}}']
 │         └── key: (1)
 └── filters [type=bool, outer=(4)]
      └── b.j @> '{"a": {"b": "c", "d": "e"}, "f": "g"}' [type=bool, outer=(4)]
