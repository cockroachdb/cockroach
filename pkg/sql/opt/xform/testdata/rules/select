exec-ddl
CREATE TABLE a
(
    k INT PRIMARY KEY,
    u INT,
    v INT,
    INDEX u(u) STORING (v),
    UNIQUE INDEX v(v) STORING (u)
)
----
TABLE a
 ├── k int not null
 ├── u int
 ├── v int
 ├── INDEX primary
 │    └── k int not null
 ├── INDEX u
 │    ├── u int
 │    ├── k int not null
 │    └── v int (storing)
 └── INDEX v
      ├── v int
      ├── k int not null (storing)
      └── u int (storing)

# --------------------------------------------------
# ConstrainScan
# --------------------------------------------------

opt
SELECT k FROM a WHERE k = 1
----
scan a
 ├── columns: k:1(int!null)
 ├── constraint: /1: [/1 - /1]
 └── keys: (1)

memo
SELECT k FROM a WHERE k = 1
----
memo (optimized)
 ├── G1: (select G2 G3) (scan a,constrained)
 │    └── "[presentation: k:1]"
 │         ├── best: (scan a,constrained)
 │         └── cost: 100.00
 ├── G2: (scan a) (scan a@u) (scan a@v)
 │    └── ""
 │         ├── best: (scan a)
 │         └── cost: 1000.00
 ├── G3: (filters G4)
 ├── G4: (eq G5 G6)
 ├── G5: (variable a.k)
 └── G6: (const 1)

opt
SELECT k FROM a WHERE v > 1
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 ├── scan a@v
 │    ├── columns: a.k:1(int!null) a.v:3(int)
 │    ├── constraint: /3: [/2 - ]
 │    └── keys: (1) weak(3)
 └── projections [outer=(1)]
      └── variable: a.k [type=int, outer=(1)]

memo
SELECT k FROM a WHERE v > 1
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 100.00
 ├── G2: (select G4 G5) (scan a@v,constrained)
 │    └── ""
 │         ├── best: (scan a@v,constrained)
 │         └── cost: 100.00
 ├── G3: (projections G6)
 ├── G4: (scan a) (scan a@u) (scan a@v)
 │    └── ""
 │         ├── best: (scan a)
 │         └── cost: 1000.00
 ├── G5: (filters G7)
 ├── G6: (variable a.k)
 ├── G7: (gt G8 G9)
 ├── G8: (variable a.v)
 └── G9: (const 1)

opt
SELECT k FROM a WHERE u = 1 AND k = 5
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 ├── scan a@u
 │    ├── columns: a.k:1(int!null) a.u:2(int)
 │    ├── constraint: /2/1: [/1/5 - /1/5]
 │    └── keys: (1)
 └── projections [outer=(1)]
      └── variable: a.k [type=int, outer=(1)]

memo
SELECT k FROM a WHERE u = 1 AND k = 5
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 100.00
 ├── G2: (select G4 G5) (select G6 G7) (scan a@u,constrained)
 │    └── ""
 │         ├── best: (scan a@u,constrained)
 │         └── cost: 100.00
 ├── G3: (projections G10)
 ├── G4: (scan a) (scan a@u) (scan a@v)
 │    └── ""
 │         ├── best: (scan a)
 │         └── cost: 1000.00
 ├── G5: (filters G9 G8)
 ├── G6: (scan a,constrained)
 │    └── ""
 │         ├── best: (scan a,constrained)
 │         └── cost: 100.00
 ├── G7: (filters G9)
 ├── G8: (eq G10 G11)
 ├── G9: (eq G12 G13)
 ├── G10: (variable a.k)
 ├── G11: (const 5)
 ├── G12: (variable a.u)
 └── G13: (const 1)

# Constraint + remaining filter.
opt
SELECT k FROM a WHERE u = 1 AND k+u = 1
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 ├── select
 │    ├── columns: a.k:1(int!null) a.u:2(int)
 │    ├── keys: (1)
 │    ├── scan a@u
 │    │    ├── columns: a.k:1(int!null) a.u:2(int)
 │    │    ├── constraint: /2/1: [/1 - /1]
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(1,2)]
 │         └── eq [type=bool, outer=(1,2)]
 │              ├── plus [type=int, outer=(1,2)]
 │              │    ├── variable: a.k [type=int, outer=(1)]
 │              │    └── variable: a.u [type=int, outer=(2)]
 │              └── const: 1 [type=int]
 └── projections [outer=(1)]
      └── variable: a.k [type=int, outer=(1)]

memo
SELECT k FROM a WHERE u = 1 AND k+u = 1
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 110.00
 ├── G2: (select G4 G5) (select G6 G7)
 │    └── ""
 │         ├── best: (select G6 G7)
 │         └── cost: 110.00
 ├── G3: (projections G12)
 ├── G4: (scan a) (scan a@u) (scan a@v)
 │    └── ""
 │         ├── best: (scan a)
 │         └── cost: 1000.00
 ├── G5: (filters G8 G9)
 ├── G6: (scan a@u,constrained)
 │    └── ""
 │         ├── best: (scan a@u,constrained)
 │         └── cost: 100.00
 ├── G7: (filters G9)
 ├── G8: (eq G13 G11)
 ├── G9: (eq G10 G11)
 ├── G10: (plus G12 G13)
 ├── G11: (const 1)
 ├── G12: (variable a.k)
 └── G13: (variable a.u)

opt
SELECT k FROM a WHERE u = 1 AND v = 5
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 ├── select
 │    ├── columns: a.k:1(int!null) a.u:2(int) a.v:3(int)
 │    ├── keys: (1) weak(3)
 │    ├── scan a@u
 │    │    ├── columns: a.k:1(int!null) a.u:2(int) a.v:3(int)
 │    │    ├── constraint: /2/1: [/1 - /1]
 │    │    └── keys: (1) weak(3)
 │    └── filters [type=bool, outer=(3), constraints=(/3: [/5 - /5]; tight)]
 │         └── eq [type=bool, outer=(3), constraints=(/3: [/5 - /5]; tight)]
 │              ├── variable: a.v [type=int, outer=(3)]
 │              └── const: 5 [type=int]
 └── projections [outer=(1)]
      └── variable: a.k [type=int, outer=(1)]

memo
SELECT k FROM a WHERE u = 1 AND v = 5
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 110.00
 ├── G2: (select G4 G5) (select G6 G7) (select G8 G9)
 │    └── ""
 │         ├── best: (select G6 G7)
 │         └── cost: 110.00
 ├── G3: (projections G10)
 ├── G4: (scan a) (scan a@u) (scan a@v)
 │    └── ""
 │         ├── best: (scan a)
 │         └── cost: 1000.00
 ├── G5: (filters G12 G11)
 ├── G6: (scan a@u,constrained)
 │    └── ""
 │         ├── best: (scan a@u,constrained)
 │         └── cost: 100.00
 ├── G7: (filters G11)
 ├── G8: (scan a@v,constrained)
 │    └── ""
 │         ├── best: (scan a@v,constrained)
 │         └── cost: 100.00
 ├── G9: (filters G12)
 ├── G10: (variable a.k)
 ├── G11: (eq G13 G14)
 ├── G12: (eq G15 G16)
 ├── G13: (variable a.v)
 ├── G14: (const 5)
 ├── G15: (variable a.u)
 └── G16: (const 1)

# No constraint can be derived from filter (nothing should be pushed down).
opt
SELECT k FROM a WHERE u=v
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 ├── select
 │    ├── columns: a.k:1(int!null) a.u:2(int) a.v:3(int)
 │    ├── keys: (1) weak(3)
 │    ├── scan a@u
 │    │    ├── columns: a.k:1(int!null) a.u:2(int) a.v:3(int)
 │    │    ├── constraint: /2/1: (/NULL - ]
 │    │    └── keys: (1) weak(3)
 │    └── filters [type=bool, outer=(2,3)]
 │         └── eq [type=bool, outer=(2,3)]
 │              ├── variable: a.u [type=int, outer=(2)]
 │              └── variable: a.v [type=int, outer=(3)]
 └── projections [outer=(1)]
      └── variable: a.k [type=int, outer=(1)]

# Don't push constraint into already limited scan.
opt
SELECT k FROM (SELECT k FROM a ORDER BY u LIMIT 1) a WHERE k = 1
----
select
 ├── columns: k:1(int!null)
 ├── keys: (1)
 ├── scan a@u
 │    ├── columns: a.k:1(int!null) a.u:2(int)
 │    ├── limit: 1
 │    └── keys: (1)
 └── filters [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
      └── eq [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
           ├── variable: a.k [type=int, outer=(1)]
           └── const: 1 [type=int]
