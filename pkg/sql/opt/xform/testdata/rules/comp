exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 └── INDEX primary
      └── k int not null

# --------------------------------------------------
# NormalizeVar
# --------------------------------------------------
opt
SELECT * FROM a WHERE 1=k AND 2<>i
----
select
 ├── columns: k:int:1 i:int:null:2 f:float:null:3 s:string:null:4 j:jsonb:null:5
 ├── scan
 │    └── columns: a.k:int:1 a.i:int:null:2 a.f:float:null:3 a.s:string:null:4 a.j:jsonb:null:5
 └── and [type=bool, outer=(1,2)]
      ├── eq [type=bool, outer=(1)]
      │    ├── variable: a.k [type=int, outer=(1)]
      │    └── const: 1 [type=int]
      └── ne [type=bool, outer=(2)]
           ├── variable: a.i [type=int, outer=(2)]
           └── const: 2 [type=int]

# --------------------------------------------------
# NormalizeTupleEquality
# --------------------------------------------------
opt
SELECT * FROM a WHERE (i, f, s) = (1, 3.5, 'foo')
----
select
 ├── columns: k:int:1 i:int:null:2 f:float:null:3 s:string:null:4 j:jsonb:null:5
 ├── scan
 │    └── columns: a.k:int:1 a.i:int:null:2 a.f:float:null:3 a.s:string:null:4 a.j:jsonb:null:5
 └── and [type=bool, outer=(2-4)]
      ├── eq [type=bool, outer=(2)]
      │    ├── variable: a.i [type=int, outer=(2)]
      │    └── const: 1 [type=int]
      ├── eq [type=bool, outer=(3)]
      │    ├── variable: a.f [type=float, outer=(3)]
      │    └── const: 3.5 [type=float]
      └── eq [type=bool, outer=(4)]
           ├── variable: a.s [type=string, outer=(4)]
           └── const: 'foo' [type=string]

# --------------------------------------------------
# NormalizeTupleEquality, FlattenAnd
# --------------------------------------------------

# Nested tuples.
opt
SELECT * FROM a WHERE (1, (2, 'foo')) = (k, (i, s))
----
select
 ├── columns: k:int:1 i:int:null:2 f:float:null:3 s:string:null:4 j:jsonb:null:5
 ├── scan
 │    └── columns: a.k:int:1 a.i:int:null:2 a.f:float:null:3 a.s:string:null:4 a.j:jsonb:null:5
 └── and [type=bool, outer=(1,2,4)]
      ├── eq [type=bool, outer=(1)]
      │    ├── variable: a.k [type=int, outer=(1)]
      │    └── const: 1 [type=int]
      ├── eq [type=bool, outer=(2)]
      │    ├── variable: a.i [type=int, outer=(2)]
      │    └── const: 2 [type=int]
      └── eq [type=bool, outer=(4)]
           ├── variable: a.s [type=string, outer=(4)]
           └── const: 'foo' [type=string]

# --------------------------------------------------
# FoldNullComparisonLeft, FoldNullComparisonRight
# --------------------------------------------------

# Use null::type to circumvent type checker constant folding.
opt
SELECT *
FROM a
WHERE
    null::int = 1 AND 1 = null::int AND
    null::int <> 1 AND 1 <> null::int AND
    null::int > 1 AND 1 > null::int AND
    null::int >= 1 AND 1 >= null::int AND
    null::int < 1 AND 1 < null::int AND
    null::int <= 1 AND 1 <= null::int AND
    null::string LIKE 'foo' AND 'foo' LIKE null::string AND
    null::string NOT LIKE 'foo' AND 'foo' NOT LIKE null::string AND
    null::string ILIKE 'foo' AND 'foo' ILIKE null::string AND
    null::string NOT ILIKE 'foo' AND 'foo' NOT ILIKE null::string AND
    null::string SIMILAR TO 'foo' AND 'foo' SIMILAR TO null::string AND
    null::string NOT SIMILAR TO 'foo' AND 'foo' NOT SIMILAR TO null::string AND
    null::string ~ 'foo' AND 'foo' ~ null::string AND
    null::string !~ 'foo' AND 'foo' !~ null::string AND
    null::string ~* 'foo' AND 'foo' ~* null::string AND
    null::string !~* 'foo' AND 'foo' !~* null::string
----
select
 ├── columns: k:int:1 i:int:null:2 f:float:null:3 s:string:null:4 j:jsonb:null:5
 ├── scan
 │    └── columns: a.k:int:1 a.i:int:null:2 a.f:float:null:3 a.s:string:null:4 a.j:jsonb:null:5
 └── null [type=bool]
