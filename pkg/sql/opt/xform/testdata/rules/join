exec-ddl
CREATE TABLE a (x INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON)
----
TABLE a
 ├── x int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE t.b (x INT PRIMARY KEY, z INT)
----
TABLE b
 ├── x int not null
 ├── z int
 └── INDEX primary
      └── x int not null

# --------------------------------------------------
# EnsureJoinFiltersAnd
# --------------------------------------------------
opt
SELECT * FROM a INNER JOIN b ON a.x=b.x AND b.z<10
----
inner-join
 ├── columns: x:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) z:7(int)
 ├── scan
 │    └── columns: a.x:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 ├── scan
 │    └── columns: b.x:6(int!null) b.z:7(int)
 └── filters [type=bool, outer=(1,6,7)]
      ├── eq [type=bool, outer=(1,6)]
      │    ├── variable: a.x [type=int, outer=(1)]
      │    └── variable: b.x [type=int, outer=(6)]
      └── lt [type=bool, outer=(7)]
           ├── variable: b.z [type=int, outer=(7)]
           └── const: 10 [type=int]

# --------------------------------------------------
# EnsureJoinFilters
# --------------------------------------------------
opt
SELECT * FROM a INNER JOIN b ON a.x=b.x
----
inner-join
 ├── columns: x:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) z:7(int)
 ├── scan
 │    └── columns: a.x:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 ├── scan
 │    └── columns: b.x:6(int!null) b.z:7(int)
 └── filters [type=bool, outer=(1,6)]
      └── eq [type=bool, outer=(1,6)]
           ├── variable: a.x [type=int, outer=(1)]
           └── variable: b.x [type=int, outer=(6)]

opt
SELECT * FROM a INNER JOIN b ON a.s='foo' OR b.z<10
----
inner-join
 ├── columns: x:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) z:7(int)
 ├── scan
 │    └── columns: a.x:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 ├── scan
 │    └── columns: b.x:6(int!null) b.z:7(int)
 └── filters [type=bool, outer=(4,7)]
      └── or [type=bool, outer=(4,7)]
           ├── eq [type=bool, outer=(4)]
           │    ├── variable: a.s [type=string, outer=(4)]
           │    └── const: 'foo' [type=string]
           └── lt [type=bool, outer=(7)]
                ├── variable: b.z [type=int, outer=(7)]
                └── const: 10 [type=int]
