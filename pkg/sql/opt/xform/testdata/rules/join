exec-ddl
CREATE TABLE abc
(
    a INT,
    b INT,
    c INT,
    INDEX ab (a,b) STORING (c),
    INDEX bc (b,c) STORING (a)
)
----

exec-ddl
CREATE TABLE stu
(
    s INT,
    t INT,
    u INT,
    PRIMARY KEY (s,t,u),
    INDEX uts (u,t,s)
)
----

exec-ddl
CREATE TABLE xyz
(
    x INT,
    y INT,
    z INT,
    INDEX xy (x,y) STORING (z),
    INDEX yz (y,z) STORING (x)
)
----

exec-ddl
CREATE TABLE pqr
(
    p INT PRIMARY KEY,
    q INT,
    r INT,
    s STRING,
    t STRING,
    INDEX q (q),
    INDEX r (r),
    INDEX s (s) STORING (r),
    INDEX rs (r,s),
    INDEX ts (t,s)
)
----

exec-ddl
CREATE TABLE zz (
    a INT8 PRIMARY KEY,
    b INT8 NULL,
    c INT8 NULL,
    INDEX idx_b (b ASC),
    CONSTRAINT idx_c UNIQUE (c)
)
----

exec-ddl
CREATE TABLE zz_redundant (
    a INT8 PRIMARY KEY,
    b INT8 NULL,
    c INT8 NULL,
    INDEX idx_u (b ASC, c ASC),
    INDEX idx_v (b ASC, c ASC)
)
----

# --------------------------------------------------
# CommuteJoin
# --------------------------------------------------

# Verify that the reversed join expressions get added to the memo, and there
# are no duplicates.
memo
SELECT * FROM abc JOIN xyz ON a=z
----
memo (optimized, ~10KB, required=[presentation: a:1,b:2,c:3,x:5,y:6,z:7])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4) (merge-join G2 G3 G5 inner-join,+1,+7) (lookup-join G3 G5 abc@ab,keyCols=[7],outCols=(1-3,5-7))
 │    └── [presentation: a:1,b:2,c:3,x:5,y:6,z:7]
 │         ├── best: (inner-join G2 G3 G4)
 │         └── cost: 2268.06
 ├── G2: (scan abc,cols=(1-3)) (scan abc@ab,cols=(1-3)) (scan abc@bc,cols=(1-3))
 │    ├── [ordering: +1]
 │    │    ├── best: (scan abc@ab,cols=(1-3))
 │    │    └── cost: 1070.02
 │    └── []
 │         ├── best: (scan abc,cols=(1-3))
 │         └── cost: 1070.02
 ├── G3: (scan xyz,cols=(5-7)) (scan xyz@xy,cols=(5-7)) (scan xyz@yz,cols=(5-7))
 │    ├── [ordering: +7]
 │    │    ├── best: (sort G3)
 │    │    └── cost: 1289.35
 │    └── []
 │         ├── best: (scan xyz,cols=(5-7))
 │         └── cost: 1070.02
 ├── G4: (filters G6)
 ├── G5: (filters)
 ├── G6: (eq G7 G8)
 ├── G7: (variable a)
 └── G8: (variable z)

memo
SELECT * FROM abc FULL OUTER JOIN xyz ON a=z
----
memo (optimized, ~9KB, required=[presentation: a:1,b:2,c:3,x:5,y:6,z:7])
 ├── G1: (full-join G2 G3 G4) (full-join G3 G2 G4) (merge-join G2 G3 G5 full-join,+1,+7)
 │    └── [presentation: a:1,b:2,c:3,x:5,y:6,z:7]
 │         ├── best: (full-join G2 G3 G4)
 │         └── cost: 2270.05
 ├── G2: (scan abc,cols=(1-3)) (scan abc@ab,cols=(1-3)) (scan abc@bc,cols=(1-3))
 │    ├── [ordering: +1]
 │    │    ├── best: (scan abc@ab,cols=(1-3))
 │    │    └── cost: 1070.02
 │    └── []
 │         ├── best: (scan abc,cols=(1-3))
 │         └── cost: 1070.02
 ├── G3: (scan xyz,cols=(5-7)) (scan xyz@xy,cols=(5-7)) (scan xyz@yz,cols=(5-7))
 │    ├── [ordering: +7]
 │    │    ├── best: (sort G3)
 │    │    └── cost: 1289.35
 │    └── []
 │         ├── best: (scan xyz,cols=(5-7))
 │         └── cost: 1070.02
 ├── G4: (filters G6)
 ├── G5: (filters)
 ├── G6: (eq G7 G8)
 ├── G7: (variable a)
 └── G8: (variable z)

# Verify that we swap to get the smaller side on the right.
opt
SELECT * FROM abc INNER JOIN xyz ON a=c WHERE b=1
----
inner-join (cross)
 ├── columns: a:1!null b:2!null c:3!null x:5 y:6 z:7
 ├── fd: ()-->(2), (1)==(3), (3)==(1)
 ├── scan xyz
 │    └── columns: x:5 y:6 z:7
 ├── select
 │    ├── columns: a:1!null b:2!null c:3!null
 │    ├── fd: ()-->(2), (1)==(3), (3)==(1)
 │    ├── scan abc@bc
 │    │    ├── columns: a:1 b:2!null c:3!null
 │    │    ├── constraint: /2/3/4: (/1/NULL - /1]
 │    │    └── fd: ()-->(2)
 │    └── filters
 │         └── a:1 = c:3 [outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 └── filters (true)

# Verify that the hash join hint prevents swapping the sides.
opt
SELECT * FROM abc INNER HASH JOIN xyz ON a=c WHERE b=1
----
inner-join (cross)
 ├── columns: a:1!null b:2!null c:3!null x:5 y:6 z:7
 ├── flags: force hash join (store right side)
 ├── fd: ()-->(2), (1)==(3), (3)==(1)
 ├── select
 │    ├── columns: a:1!null b:2!null c:3!null
 │    ├── fd: ()-->(2), (1)==(3), (3)==(1)
 │    ├── scan abc@bc
 │    │    ├── columns: a:1 b:2!null c:3!null
 │    │    ├── constraint: /2/3/4: (/1/NULL - /1]
 │    │    └── fd: ()-->(2)
 │    └── filters
 │         └── a:1 = c:3 [outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 ├── scan xyz
 │    └── columns: x:5 y:6 z:7
 └── filters (true)

opt
SELECT * FROM (SELECT * FROM abc WHERE b=1) FULL OUTER JOIN xyz ON a=z
----
full-join (hash)
 ├── columns: a:1 b:2 c:3 x:5 y:6 z:7
 ├── scan xyz
 │    └── columns: x:5 y:6 z:7
 ├── scan abc@bc
 │    ├── columns: a:1 b:2!null c:3
 │    ├── constraint: /2/3/4: [/1 - /1]
 │    └── fd: ()-->(2)
 └── filters
      └── a:1 = z:7 [outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]

# Verify that commuting works correctly when there is a lookup join hint
# (specifically that it returns the original expression and flags when applied
# twice; if it didn't, we'd see more inner-join expressions).
memo
SELECT * FROM abc INNER LOOKUP JOIN xyz ON a=x
----
memo (optimized, ~10KB, required=[presentation: a:1,b:2,c:3,x:5,y:6,z:7])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4) (lookup-join G2 G5 xyz@xy,keyCols=[1],outCols=(1-3,5-7))
 │    └── [presentation: a:1,b:2,c:3,x:5,y:6,z:7]
 │         ├── best: (lookup-join G2 G5 xyz@xy,keyCols=[1],outCols=(1-3,5-7))
 │         └── cost: 41358.10
 ├── G2: (scan abc,cols=(1-3)) (scan abc@ab,cols=(1-3)) (scan abc@bc,cols=(1-3))
 │    └── []
 │         ├── best: (scan abc,cols=(1-3))
 │         └── cost: 1070.02
 ├── G3: (scan xyz,cols=(5-7)) (scan xyz@xy,cols=(5-7)) (scan xyz@yz,cols=(5-7))
 │    └── []
 │         ├── best: (scan xyz,cols=(5-7))
 │         └── cost: 1070.02
 ├── G4: (filters G6)
 ├── G5: (filters)
 ├── G6: (eq G7 G8)
 ├── G7: (variable a)
 └── G8: (variable x)

# --------------------------------------------------
# CommuteLeftJoin
# --------------------------------------------------

memo
SELECT * FROM abc LEFT OUTER JOIN xyz ON a=z
----
memo (optimized, ~9KB, required=[presentation: a:1,b:2,c:3,x:5,y:6,z:7])
 ├── G1: (left-join G2 G3 G4) (right-join G3 G2 G4) (merge-join G2 G3 G5 left-join,+1,+7)
 │    └── [presentation: a:1,b:2,c:3,x:5,y:6,z:7]
 │         ├── best: (left-join G2 G3 G4)
 │         └── cost: 2270.05
 ├── G2: (scan abc,cols=(1-3)) (scan abc@ab,cols=(1-3)) (scan abc@bc,cols=(1-3))
 │    ├── [ordering: +1]
 │    │    ├── best: (scan abc@ab,cols=(1-3))
 │    │    └── cost: 1070.02
 │    └── []
 │         ├── best: (scan abc,cols=(1-3))
 │         └── cost: 1070.02
 ├── G3: (scan xyz,cols=(5-7)) (scan xyz@xy,cols=(5-7)) (scan xyz@yz,cols=(5-7))
 │    ├── [ordering: +7]
 │    │    ├── best: (sort G3)
 │    │    └── cost: 1289.35
 │    └── []
 │         ├── best: (scan xyz,cols=(5-7))
 │         └── cost: 1070.02
 ├── G4: (filters G6)
 ├── G5: (filters)
 ├── G6: (eq G7 G8)
 ├── G7: (variable a)
 └── G8: (variable z)

opt
SELECT * FROM abc LEFT OUTER JOIN xyz ON a=z WHERE b=1
----
right-join (hash)
 ├── columns: a:1 b:2!null c:3 x:5 y:6 z:7
 ├── fd: ()-->(2)
 ├── scan xyz
 │    └── columns: x:5 y:6 z:7
 ├── scan abc@bc
 │    ├── columns: a:1 b:2!null c:3
 │    ├── constraint: /2/3/4: [/1 - /1]
 │    └── fd: ()-->(2)
 └── filters
      └── a:1 = z:7 [outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]

# --------------------------------------------------
# CommuteRightJoin
# --------------------------------------------------

memo
SELECT * FROM abc RIGHT OUTER JOIN xyz ON a=z
----
memo (optimized, ~10KB, required=[presentation: a:1,b:2,c:3,x:5,y:6,z:7])
 ├── G1: (left-join G2 G3 G4) (right-join G3 G2 G4) (lookup-join G2 G5 abc@ab,keyCols=[7],outCols=(1-3,5-7)) (merge-join G3 G2 G5 right-join,+1,+7)
 │    └── [presentation: a:1,b:2,c:3,x:5,y:6,z:7]
 │         ├── best: (left-join G2 G3 G4)
 │         └── cost: 2270.05
 ├── G2: (scan xyz,cols=(5-7)) (scan xyz@xy,cols=(5-7)) (scan xyz@yz,cols=(5-7))
 │    ├── [ordering: +7]
 │    │    ├── best: (sort G2)
 │    │    └── cost: 1289.35
 │    └── []
 │         ├── best: (scan xyz,cols=(5-7))
 │         └── cost: 1070.02
 ├── G3: (scan abc,cols=(1-3)) (scan abc@ab,cols=(1-3)) (scan abc@bc,cols=(1-3))
 │    ├── [ordering: +1]
 │    │    ├── best: (scan abc@ab,cols=(1-3))
 │    │    └── cost: 1070.02
 │    └── []
 │         ├── best: (scan abc,cols=(1-3))
 │         └── cost: 1070.02
 ├── G4: (filters G6)
 ├── G5: (filters)
 ├── G6: (eq G7 G8)
 ├── G7: (variable a)
 └── G8: (variable z)

opt
SELECT * FROM (SELECT * FROM abc WHERE b=1) RIGHT OUTER JOIN xyz ON a=z
----
left-join (hash)
 ├── columns: a:1 b:2 c:3 x:5 y:6 z:7
 ├── scan xyz
 │    └── columns: x:5 y:6 z:7
 ├── scan abc@bc
 │    ├── columns: a:1 b:2!null c:3
 │    ├── constraint: /2/3/4: [/1 - /1]
 │    └── fd: ()-->(2)
 └── filters
      └── a:1 = z:7 [outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]

# --------------------------------------------------
# GenerateMergeJoins
# --------------------------------------------------

opt
SELECT * FROM abc JOIN xyz ON a=x
----
inner-join (merge)
 ├── columns: a:1!null b:2 c:3 x:5!null y:6 z:7
 ├── left ordering: +1
 ├── right ordering: +5
 ├── fd: (1)==(5), (5)==(1)
 ├── scan abc@ab
 │    ├── columns: a:1 b:2 c:3
 │    └── ordering: +1
 ├── scan xyz@xy
 │    ├── columns: x:5 y:6 z:7
 │    └── ordering: +5
 └── filters (true)

memo
SELECT * FROM abc JOIN xyz ON a=x
----
memo (optimized, ~12KB, required=[presentation: a:1,b:2,c:3,x:5,y:6,z:7])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4) (merge-join G2 G3 G5 inner-join,+1,+5) (lookup-join G2 G5 xyz@xy,keyCols=[1],outCols=(1-3,5-7)) (merge-join G3 G2 G5 inner-join,+5,+1) (lookup-join G3 G5 abc@ab,keyCols=[5],outCols=(1-3,5-7))
 │    └── [presentation: a:1,b:2,c:3,x:5,y:6,z:7]
 │         ├── best: (merge-join G2="[ordering: +1]" G3="[ordering: +5]" G5 inner-join,+1,+5)
 │         └── cost: 2258.06
 ├── G2: (scan abc,cols=(1-3)) (scan abc@ab,cols=(1-3)) (scan abc@bc,cols=(1-3))
 │    ├── [ordering: +1]
 │    │    ├── best: (scan abc@ab,cols=(1-3))
 │    │    └── cost: 1070.02
 │    └── []
 │         ├── best: (scan abc,cols=(1-3))
 │         └── cost: 1070.02
 ├── G3: (scan xyz,cols=(5-7)) (scan xyz@xy,cols=(5-7)) (scan xyz@yz,cols=(5-7))
 │    ├── [ordering: +5]
 │    │    ├── best: (scan xyz@xy,cols=(5-7))
 │    │    └── cost: 1070.02
 │    └── []
 │         ├── best: (scan xyz,cols=(5-7))
 │         └── cost: 1070.02
 ├── G4: (filters G6)
 ├── G5: (filters)
 ├── G6: (eq G7 G8)
 ├── G7: (variable a)
 └── G8: (variable x)

# Verify that we don't generate merge joins if there's a hint that says otherwise.
memo
SELECT * FROM abc INNER HASH JOIN xyz ON a=x
----
memo (optimized, ~8KB, required=[presentation: a:1,b:2,c:3,x:5,y:6,z:7])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4)
 │    └── [presentation: a:1,b:2,c:3,x:5,y:6,z:7]
 │         ├── best: (inner-join G2 G3 G4)
 │         └── cost: 2268.06
 ├── G2: (scan abc,cols=(1-3)) (scan abc@ab,cols=(1-3)) (scan abc@bc,cols=(1-3))
 │    └── []
 │         ├── best: (scan abc,cols=(1-3))
 │         └── cost: 1070.02
 ├── G3: (scan xyz,cols=(5-7)) (scan xyz@xy,cols=(5-7)) (scan xyz@yz,cols=(5-7))
 │    └── []
 │         ├── best: (scan xyz,cols=(5-7))
 │         └── cost: 1070.02
 ├── G4: (filters G5)
 ├── G5: (eq G6 G7)
 ├── G6: (variable a)
 └── G7: (variable x)

opt
SELECT * FROM abc JOIN xyz ON x=a
----
inner-join (merge)
 ├── columns: a:1!null b:2 c:3 x:5!null y:6 z:7
 ├── left ordering: +1
 ├── right ordering: +5
 ├── fd: (1)==(5), (5)==(1)
 ├── scan abc@ab
 │    ├── columns: a:1 b:2 c:3
 │    └── ordering: +1
 ├── scan xyz@xy
 │    ├── columns: x:5 y:6 z:7
 │    └── ordering: +5
 └── filters (true)

opt
SELECT * FROM abc JOIN xyz ON a=x AND a=x AND x=a
----
inner-join (merge)
 ├── columns: a:1!null b:2 c:3 x:5!null y:6 z:7
 ├── left ordering: +1
 ├── right ordering: +5
 ├── fd: (1)==(5), (5)==(1)
 ├── scan abc@ab
 │    ├── columns: a:1 b:2 c:3
 │    └── ordering: +1
 ├── scan xyz@xy
 │    ├── columns: x:5 y:6 z:7
 │    └── ordering: +5
 └── filters (true)

# Use constraints to force the choice of an index which doesn't help, and
# verify that we don't prefer a merge-join that has to sort both of its inputs.
opt
SELECT * FROM abc JOIN xyz ON a=x AND b=y WHERE b=1 AND y=1
----
inner-join (hash)
 ├── columns: a:1!null b:2!null c:3 x:5!null y:6!null z:7
 ├── fd: ()-->(2,6), (1)==(5), (5)==(1), (2)==(6), (6)==(2)
 ├── scan abc@bc
 │    ├── columns: a:1 b:2!null c:3
 │    ├── constraint: /2/3/4: [/1 - /1]
 │    └── fd: ()-->(2)
 ├── scan xyz@yz
 │    ├── columns: x:5 y:6!null z:7
 │    ├── constraint: /6/7/8: [/1 - /1]
 │    └── fd: ()-->(6)
 └── filters
      ├── a:1 = x:5 [outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ]), fd=(1)==(5), (5)==(1)]
      └── b:2 = y:6 [outer=(2,6), constraints=(/2: (/NULL - ]; /6: (/NULL - ]), fd=(2)==(6), (6)==(2)]

# Verify case where we generate multiple merge-joins.
memo
SELECT * FROM stu AS l JOIN stu AS r ON (l.s, l.t, l.u) = (r.s, r.t, r.u)
----
memo (optimized, ~11KB, required=[presentation: s:1,t:2,u:3,s:4,t:5,u:6])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4) (merge-join G2 G3 G5 inner-join,+1,+2,+3,+4,+5,+6) (merge-join G2 G3 G5 inner-join,+3,+2,+1,+6,+5,+4) (lookup-join G2 G5 stu,keyCols=[1 2 3],outCols=(1-6)) (lookup-join G2 G5 stu@uts,keyCols=[3 2 1],outCols=(1-6)) (merge-join G3 G2 G5 inner-join,+4,+5,+6,+1,+2,+3) (merge-join G3 G2 G5 inner-join,+6,+5,+4,+3,+2,+1) (lookup-join G3 G5 stu,keyCols=[4 5 6],outCols=(1-6)) (lookup-join G3 G5 stu@uts,keyCols=[6 5 4],outCols=(1-6))
 │    └── [presentation: s:1,t:2,u:3,s:4,t:5,u:6]
 │         ├── best: (merge-join G2="[ordering: +1,+2,+3]" G3="[ordering: +4,+5,+6]" G5 inner-join,+1,+2,+3,+4,+5,+6)
 │         └── cost: 2140.06
 ├── G2: (scan l) (scan l@uts)
 │    ├── [ordering: +1,+2,+3]
 │    │    ├── best: (scan l)
 │    │    └── cost: 1060.02
 │    ├── [ordering: +3,+2,+1]
 │    │    ├── best: (scan l@uts)
 │    │    └── cost: 1060.02
 │    └── []
 │         ├── best: (scan l)
 │         └── cost: 1060.02
 ├── G3: (scan r) (scan r@uts)
 │    ├── [ordering: +4,+5,+6]
 │    │    ├── best: (scan r)
 │    │    └── cost: 1060.02
 │    ├── [ordering: +6,+5,+4]
 │    │    ├── best: (scan r@uts)
 │    │    └── cost: 1060.02
 │    └── []
 │         ├── best: (scan r)
 │         └── cost: 1060.02
 ├── G4: (filters G6 G7 G8)
 ├── G5: (filters)
 ├── G6: (eq G9 G10)
 ├── G7: (eq G11 G12)
 ├── G8: (eq G13 G14)
 ├── G9: (variable l.s)
 ├── G10: (variable r.s)
 ├── G11: (variable l.t)
 ├── G12: (variable r.t)
 ├── G13: (variable l.u)
 └── G14: (variable r.u)

exploretrace rule=GenerateMergeJoins
SELECT * FROM stu AS l JOIN stu AS r ON (l.s, l.t, l.u) = (r.s, r.t, r.u)
----
----
================================================================================
GenerateMergeJoins
================================================================================
Source expression:
  inner-join (hash)
   ├── columns: s:1!null t:2!null u:3!null s:4!null t:5!null u:6!null
   ├── key: (4-6)
   ├── fd: (1)==(4), (4)==(1), (2)==(5), (5)==(2), (3)==(6), (6)==(3)
   ├── scan l
   │    ├── columns: l.s:1!null l.t:2!null l.u:3!null
   │    └── key: (1-3)
   ├── scan r
   │    ├── columns: r.s:4!null r.t:5!null r.u:6!null
   │    └── key: (4-6)
   └── filters
        ├── l.s:1 = r.s:4 [outer=(1,4), constraints=(/1: (/NULL - ]; /4: (/NULL - ]), fd=(1)==(4), (4)==(1)]
        ├── l.t:2 = r.t:5 [outer=(2,5), constraints=(/2: (/NULL - ]; /5: (/NULL - ]), fd=(2)==(5), (5)==(2)]
        └── l.u:3 = r.u:6 [outer=(3,6), constraints=(/3: (/NULL - ]; /6: (/NULL - ]), fd=(3)==(6), (6)==(3)]

New expression 1 of 2:
  inner-join (merge)
   ├── columns: s:1!null t:2!null u:3!null s:4!null t:5!null u:6!null
   ├── left ordering: +1,+2,+3
   ├── right ordering: +4,+5,+6
   ├── key: (4-6)
   ├── fd: (1)==(4), (4)==(1), (2)==(5), (5)==(2), (3)==(6), (6)==(3)
   ├── scan l
   │    ├── columns: l.s:1!null l.t:2!null l.u:3!null
   │    ├── key: (1-3)
   │    └── ordering: +1,+2,+3
   ├── scan r
   │    ├── columns: r.s:4!null r.t:5!null r.u:6!null
   │    ├── key: (4-6)
   │    └── ordering: +4,+5,+6
   └── filters (true)

New expression 2 of 2:
  inner-join (merge)
   ├── columns: s:1!null t:2!null u:3!null s:4!null t:5!null u:6!null
   ├── left ordering: +3,+2,+1
   ├── right ordering: +6,+5,+4
   ├── key: (4-6)
   ├── fd: (1)==(4), (4)==(1), (2)==(5), (5)==(2), (3)==(6), (6)==(3)
   ├── scan l@uts
   │    ├── columns: l.s:1!null l.t:2!null l.u:3!null
   │    ├── key: (1-3)
   │    └── ordering: +3,+2,+1
   ├── scan r@uts
   │    ├── columns: r.s:4!null r.t:5!null r.u:6!null
   │    ├── key: (4-6)
   │    └── ordering: +6,+5,+4
   └── filters (true)

================================================================================
GenerateMergeJoins
================================================================================
Source expression:
  inner-join (hash)
   ├── columns: s:1!null t:2!null u:3!null s:4!null t:5!null u:6!null
   ├── key: (4-6)
   ├── fd: (1)==(4), (4)==(1), (2)==(5), (5)==(2), (3)==(6), (6)==(3)
   ├── scan r
   │    ├── columns: r.s:4!null r.t:5!null r.u:6!null
   │    └── key: (4-6)
   ├── scan l
   │    ├── columns: l.s:1!null l.t:2!null l.u:3!null
   │    └── key: (1-3)
   └── filters
        ├── l.s:1 = r.s:4 [outer=(1,4), constraints=(/1: (/NULL - ]; /4: (/NULL - ]), fd=(1)==(4), (4)==(1)]
        ├── l.t:2 = r.t:5 [outer=(2,5), constraints=(/2: (/NULL - ]; /5: (/NULL - ]), fd=(2)==(5), (5)==(2)]
        └── l.u:3 = r.u:6 [outer=(3,6), constraints=(/3: (/NULL - ]; /6: (/NULL - ]), fd=(3)==(6), (6)==(3)]

New expression 1 of 2:
  inner-join (merge)
   ├── columns: s:1!null t:2!null u:3!null s:4!null t:5!null u:6!null
   ├── left ordering: +4,+5,+6
   ├── right ordering: +1,+2,+3
   ├── key: (4-6)
   ├── fd: (1)==(4), (4)==(1), (2)==(5), (5)==(2), (3)==(6), (6)==(3)
   ├── scan r
   │    ├── columns: r.s:4!null r.t:5!null r.u:6!null
   │    ├── key: (4-6)
   │    └── ordering: +4,+5,+6
   ├── scan l
   │    ├── columns: l.s:1!null l.t:2!null l.u:3!null
   │    ├── key: (1-3)
   │    └── ordering: +1,+2,+3
   └── filters (true)

New expression 2 of 2:
  inner-join (merge)
   ├── columns: s:1!null t:2!null u:3!null s:4!null t:5!null u:6!null
   ├── left ordering: +6,+5,+4
   ├── right ordering: +3,+2,+1
   ├── key: (4-6)
   ├── fd: (1)==(4), (4)==(1), (2)==(5), (5)==(2), (3)==(6), (6)==(3)
   ├── scan r@uts
   │    ├── columns: r.s:4!null r.t:5!null r.u:6!null
   │    ├── key: (4-6)
   │    └── ordering: +6,+5,+4
   ├── scan l@uts
   │    ├── columns: l.s:1!null l.t:2!null l.u:3!null
   │    ├── key: (1-3)
   │    └── ordering: +3,+2,+1
   └── filters (true)
----
----

# Add statistics to make table stu large (so that sorting abc is relatively cheap).
exec-ddl
ALTER TABLE stu INJECT STATISTICS '[
  {
    "columns": ["s"],
    "created_at": "2018-05-01 1:00:00.00000+00:00",
    "row_count": 1000000,
    "distinct_count": 1000000
  }
]'
----

# The ordering is coming from the left side.
opt
SELECT * FROM stu LEFT OUTER JOIN abc ON (c,b,a) = (s,t,u)
----
left-join (merge)
 ├── columns: s:1!null t:2!null u:3!null a:4 b:5 c:6
 ├── left ordering: +3,+2,+1
 ├── right ordering: +4,+5,+6
 ├── scan stu@uts
 │    ├── columns: s:1!null t:2!null u:3!null
 │    ├── key: (1-3)
 │    └── ordering: +3,+2,+1
 ├── sort (segmented)
 │    ├── columns: a:4 b:5 c:6
 │    ├── ordering: +4,+5,+6
 │    └── scan abc@ab
 │         ├── columns: a:4 b:5 c:6
 │         └── ordering: +4,+5
 └── filters (true)

# The ordering is coming from the right side.
opt
SELECT * FROM abc RIGHT OUTER JOIN stu ON (c,b,a) = (s,t,u)
----
left-join (merge)
 ├── columns: a:1 b:2 c:3 s:5!null t:6!null u:7!null
 ├── left ordering: +7,+6,+5
 ├── right ordering: +1,+2,+3
 ├── scan stu@uts
 │    ├── columns: s:5!null t:6!null u:7!null
 │    ├── key: (5-7)
 │    └── ordering: +7,+6,+5
 ├── sort (segmented)
 │    ├── columns: a:1 b:2 c:3
 │    ├── ordering: +1,+2,+3
 │    └── scan abc@ab
 │         ├── columns: a:1 b:2 c:3
 │         └── ordering: +1,+2
 └── filters (true)

# In these cases, we shouldn't pick up equivalencies.
memo
SELECT * FROM abc JOIN xyz ON a=b
----
memo (optimized, ~13KB, required=[presentation: a:1,b:2,c:3,x:5,y:6,z:7])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4)
 │    └── [presentation: a:1,b:2,c:3,x:5,y:6,z:7]
 │         ├── best: (inner-join G3 G2 G4)
 │         └── cost: 2249.93
 ├── G2: (select G5 G6) (select G7 G6) (select G8 G6)
 │    └── []
 │         ├── best: (select G7 G6)
 │         └── cost: 1069.22
 ├── G3: (scan xyz,cols=(5-7)) (scan xyz@xy,cols=(5-7)) (scan xyz@yz,cols=(5-7))
 │    └── []
 │         ├── best: (scan xyz,cols=(5-7))
 │         └── cost: 1070.02
 ├── G4: (filters)
 ├── G5: (scan abc,cols=(1-3)) (scan abc@ab,cols=(1-3)) (scan abc@bc,cols=(1-3))
 │    └── []
 │         ├── best: (scan abc,cols=(1-3))
 │         └── cost: 1070.02
 ├── G6: (filters G9)
 ├── G7: (scan abc@ab,cols=(1-3),constrained)
 │    └── []
 │         ├── best: (scan abc@ab,cols=(1-3),constrained)
 │         └── cost: 1059.31
 ├── G8: (scan abc@bc,cols=(1-3),constrained)
 │    └── []
 │         ├── best: (scan abc@bc,cols=(1-3),constrained)
 │         └── cost: 1059.31
 ├── G9: (eq G10 G11)
 ├── G10: (variable a)
 └── G11: (variable b)

exec-ddl
CREATE TABLE kfloat (k FLOAT PRIMARY KEY)
----

memo
SELECT * FROM abc JOIN kfloat ON a=k
----
memo (optimized, ~8KB, required=[presentation: a:1,b:2,c:3,k:5])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4)
 │    └── [presentation: a:1,b:2,c:3,k:5]
 │         ├── best: (inner-join G2 G3 G4)
 │         └── cost: 12120.06
 ├── G2: (scan abc,cols=(1-3)) (scan abc@ab,cols=(1-3)) (scan abc@bc,cols=(1-3))
 │    └── []
 │         ├── best: (scan abc,cols=(1-3))
 │         └── cost: 1070.02
 ├── G3: (scan kfloat)
 │    └── []
 │         ├── best: (scan kfloat)
 │         └── cost: 1020.02
 ├── G4: (filters G5)
 ├── G5: (eq G6 G7)
 ├── G6: (variable a)
 └── G7: (variable k)

# We should only pick up one equivalency.
opt
SELECT * FROM abc JOIN xyz ON a=x AND a=y
----
inner-join (lookup abc@ab)
 ├── columns: a:1!null b:2 c:3 x:5!null y:6!null z:7
 ├── key columns: [5] = [1]
 ├── fd: (5)==(1,6), (6)==(1,5), (1)==(5,6)
 ├── select
 │    ├── columns: x:5!null y:6!null z:7
 │    ├── fd: (5)==(6), (6)==(5)
 │    ├── scan xyz@xy
 │    │    ├── columns: x:5!null y:6 z:7
 │    │    └── constraint: /5/6/8: (/NULL - ]
 │    └── filters
 │         └── x:5 = y:6 [outer=(5,6), constraints=(/5: (/NULL - ]; /6: (/NULL - ]), fd=(5)==(6), (6)==(5)]
 └── filters (true)

# Verify multiple merge-joins can be chained.
opt
SELECT * FROM abc JOIN xyz ON a=x AND b=y RIGHT OUTER JOIN stu ON a=s
----
left-join (merge)
 ├── columns: a:1 b:2 c:3 x:5 y:6 z:7 s:9!null t:10!null u:11!null
 ├── left ordering: +9
 ├── right ordering: +1
 ├── fd: (1)==(5), (5)==(1), (2)==(6), (6)==(2)
 ├── scan stu
 │    ├── columns: s:9!null t:10!null u:11!null
 │    ├── key: (9-11)
 │    └── ordering: +9
 ├── inner-join (merge)
 │    ├── columns: a:1!null b:2!null c:3 x:5!null y:6!null z:7
 │    ├── left ordering: +1,+2
 │    ├── right ordering: +5,+6
 │    ├── fd: (1)==(5), (5)==(1), (2)==(6), (6)==(2)
 │    ├── ordering: +(1|5) [actual: +1]
 │    ├── scan abc@ab
 │    │    ├── columns: a:1 b:2 c:3
 │    │    └── ordering: +1,+2
 │    ├── scan xyz@xy
 │    │    ├── columns: x:5 y:6 z:7
 │    │    └── ordering: +5,+6
 │    └── filters (true)
 └── filters (true)

opt
SELECT * FROM abc JOIN xyz ON a=x AND b=y RIGHT OUTER JOIN stu ON a=u AND y=t
----
left-join (merge)
 ├── columns: a:1 b:2 c:3 x:5 y:6 z:7 s:9!null t:10!null u:11!null
 ├── left ordering: +11,+10
 ├── right ordering: +1,+6
 ├── fd: (1)==(5), (5)==(1), (2)==(6), (6)==(2)
 ├── scan stu@uts
 │    ├── columns: s:9!null t:10!null u:11!null
 │    ├── key: (9-11)
 │    └── ordering: +11,+10
 ├── inner-join (merge)
 │    ├── columns: a:1!null b:2!null c:3 x:5!null y:6!null z:7
 │    ├── left ordering: +1,+2
 │    ├── right ordering: +5,+6
 │    ├── fd: (1)==(5), (5)==(1), (2)==(6), (6)==(2)
 │    ├── ordering: +(1|5),+(2|6) [actual: +1,+2]
 │    ├── scan abc@ab
 │    │    ├── columns: a:1 b:2 c:3
 │    │    └── ordering: +1,+2
 │    ├── scan xyz@xy
 │    │    ├── columns: x:5 y:6 z:7
 │    │    └── ordering: +5,+6
 │    └── filters (true)
 └── filters (true)

# --------------------------------------------------
# GenerateLookupJoins
# --------------------------------------------------

exec-ddl
CREATE TABLE abcd (a INT, b INT, c INT, INDEX (a,b))
----

exec-ddl
CREATE TABLE abcde (a INT, b INT, c INT, d INT, e INT, INDEX (a,b,c))
----

exec-ddl
CREATE TABLE small (m INT, n INT)
----

exec-ddl
ALTER TABLE small INJECT STATISTICS '[
  {
    "columns": ["m"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 10,
    "distinct_count": 10
  }
]'
----

# Covering case.
opt
SELECT a,b,n,m FROM small JOIN abcd ON a=m
----
inner-join (lookup abcd@secondary)
 ├── columns: a:4!null b:5 n:2 m:1!null
 ├── key columns: [1] = [4]
 ├── fd: (1)==(4), (4)==(1)
 ├── scan small
 │    └── columns: m:1 n:2
 └── filters (true)

# Covering case, left-join.
opt
SELECT a,b,n,m FROM small LEFT JOIN abcd ON a=m
----
left-join (lookup abcd@secondary)
 ├── columns: a:4 b:5 n:2 m:1
 ├── key columns: [1] = [4]
 ├── scan small
 │    └── columns: m:1 n:2
 └── filters (true)

# Non-covering case.
opt
SELECT * FROM small JOIN abcd ON a=m
----
inner-join (lookup abcd)
 ├── columns: m:1!null n:2 a:4!null b:5 c:6
 ├── key columns: [7] = [7]
 ├── lookup columns are key
 ├── fd: (1)==(4), (4)==(1)
 ├── inner-join (lookup abcd@secondary)
 │    ├── columns: m:1!null n:2 a:4!null b:5 abcd.rowid:7!null
 │    ├── key columns: [1] = [4]
 │    ├── fd: (7)-->(4,5), (1)==(4), (4)==(1)
 │    ├── scan small
 │    │    └── columns: m:1 n:2
 │    └── filters (true)
 └── filters (true)

# Non-covering case, left join.
opt
SELECT * FROM small LEFT JOIN abcd ON a=m
----
left-join (lookup abcd)
 ├── columns: m:1 n:2 a:4 b:5 c:6
 ├── key columns: [7] = [7]
 ├── lookup columns are key
 ├── left-join (lookup abcd@secondary)
 │    ├── columns: m:1 n:2 a:4 b:5 abcd.rowid:7
 │    ├── key columns: [1] = [4]
 │    ├── fd: (7)-->(4,5)
 │    ├── scan small
 │    │    └── columns: m:1 n:2
 │    └── filters (true)
 └── filters (true)

# Non-covering case, extra filter bound by index.
opt
SELECT * FROM small JOIN abcd ON a=m AND b>n
----
inner-join (lookup abcd)
 ├── columns: m:1!null n:2!null a:4!null b:5!null c:6
 ├── key columns: [7] = [7]
 ├── lookup columns are key
 ├── fd: (1)==(4), (4)==(1)
 ├── inner-join (lookup abcd@secondary)
 │    ├── columns: m:1!null n:2!null a:4!null b:5!null abcd.rowid:7!null
 │    ├── key columns: [1] = [4]
 │    ├── fd: (7)-->(4,5), (1)==(4), (4)==(1)
 │    ├── scan small
 │    │    └── columns: m:1 n:2
 │    └── filters
 │         └── b:5 > n:2 [outer=(2,5), constraints=(/2: (/NULL - ]; /5: (/NULL - ])]
 └── filters (true)

# Non-covering case, extra filter bound by index, left join.
opt
SELECT * FROM small LEFT JOIN abcd ON a=m AND b>n
----
left-join (lookup abcd)
 ├── columns: m:1 n:2 a:4 b:5 c:6
 ├── key columns: [7] = [7]
 ├── lookup columns are key
 ├── left-join (lookup abcd@secondary)
 │    ├── columns: m:1 n:2 a:4 b:5 abcd.rowid:7
 │    ├── key columns: [1] = [4]
 │    ├── fd: (7)-->(4,5)
 │    ├── scan small
 │    │    └── columns: m:1 n:2
 │    └── filters
 │         └── b:5 > n:2 [outer=(2,5), constraints=(/2: (/NULL - ]; /5: (/NULL - ])]
 └── filters (true)

# Non-covering case, extra filter not bound by index.
opt
SELECT * FROM small JOIN abcd ON a=m AND c>n
----
inner-join (lookup abcd)
 ├── columns: m:1!null n:2!null a:4!null b:5 c:6!null
 ├── key columns: [7] = [7]
 ├── lookup columns are key
 ├── fd: (1)==(4), (4)==(1)
 ├── inner-join (lookup abcd@secondary)
 │    ├── columns: m:1!null n:2 a:4!null b:5 abcd.rowid:7!null
 │    ├── key columns: [1] = [4]
 │    ├── fd: (7)-->(4,5), (1)==(4), (4)==(1)
 │    ├── scan small
 │    │    └── columns: m:1 n:2
 │    └── filters (true)
 └── filters
      └── c:6 > n:2 [outer=(2,6), constraints=(/2: (/NULL - ]; /6: (/NULL - ])]

# Non-covering case, extra filter not bound by index, left join.
# In this case, we can't yet convert to a lookup join (see
# the GenerateLookupJoins custom func).
opt
SELECT * FROM small LEFT JOIN abcd ON a=m AND c>n
----
right-join (hash)
 ├── columns: m:1 n:2 a:4 b:5 c:6
 ├── scan abcd
 │    └── columns: a:4 b:5 c:6
 ├── scan small
 │    └── columns: m:1 n:2
 └── filters
      ├── a:4 = m:1 [outer=(1,4), constraints=(/1: (/NULL - ]; /4: (/NULL - ]), fd=(1)==(4), (4)==(1)]
      └── c:6 > n:2 [outer=(2,6), constraints=(/2: (/NULL - ]; /6: (/NULL - ])]


# Verify rule application when we can do a lookup join on both sides.
exploretrace rule=GenerateLookupJoins
SELECT * FROM abc JOIN xyz ON a=x AND a=y
----
----
================================================================================
GenerateLookupJoins
================================================================================
Source expression:
  inner-join (hash)
   ├── columns: a:1!null b:2 c:3 x:5!null y:6!null z:7
   ├── fd: (5)==(1,6), (6)==(1,5), (1)==(5,6)
   ├── select
   │    ├── columns: x:5!null y:6!null z:7
   │    ├── fd: (5)==(6), (6)==(5)
   │    ├── scan xyz@xy
   │    │    ├── columns: x:5!null y:6 z:7
   │    │    └── constraint: /5/6/8: (/NULL - ]
   │    └── filters
   │         └── x:5 = y:6 [outer=(5,6), constraints=(/5: (/NULL - ]; /6: (/NULL - ]), fd=(5)==(6), (6)==(5)]
   ├── scan abc
   │    └── columns: a:1 b:2 c:3
   └── filters
        └── a:1 = x:5 [outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ]), fd=(1)==(5), (5)==(1)]

New expression 1 of 1:
  inner-join (lookup abc@ab)
   ├── columns: a:1!null b:2 c:3 x:5!null y:6!null z:7
   ├── key columns: [5] = [1]
   ├── fd: (5)==(1,6), (6)==(1,5), (1)==(5,6)
   ├── select
   │    ├── columns: x:5!null y:6!null z:7
   │    ├── fd: (5)==(6), (6)==(5)
   │    ├── scan xyz@xy
   │    │    ├── columns: x:5!null y:6 z:7
   │    │    └── constraint: /5/6/8: (/NULL - ]
   │    └── filters
   │         └── x:5 = y:6 [outer=(5,6), constraints=(/5: (/NULL - ]; /6: (/NULL - ]), fd=(5)==(6), (6)==(5)]
   └── filters (true)
----
----

# Verify rule application when we can do a lookup join on the left side.
exploretrace rule=GenerateLookupJoins
SELECT * FROM abc JOIN xyz ON a=z
----
----
================================================================================
GenerateLookupJoins
================================================================================
Source expression:
  inner-join (hash)
   ├── columns: a:1!null b:2 c:3 x:5 y:6 z:7!null
   ├── fd: (1)==(7), (7)==(1)
   ├── scan abc
   │    └── columns: a:1 b:2 c:3
   ├── scan xyz
   │    └── columns: x:5 y:6 z:7
   └── filters
        └── a:1 = z:7 [outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]

No new expressions.

================================================================================
GenerateLookupJoins
================================================================================
Source expression:
  inner-join (hash)
   ├── columns: a:1!null b:2 c:3 x:5 y:6 z:7!null
   ├── fd: (1)==(7), (7)==(1)
   ├── scan xyz
   │    └── columns: x:5 y:6 z:7
   ├── scan abc
   │    └── columns: a:1 b:2 c:3
   └── filters
        └── a:1 = z:7 [outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]

New expression 1 of 1:
  inner-join (lookup abc@ab)
   ├── columns: a:1!null b:2 c:3 x:5 y:6 z:7!null
   ├── key columns: [7] = [1]
   ├── fd: (1)==(7), (7)==(1)
   ├── scan xyz
   │    └── columns: x:5 y:6 z:7
   └── filters (true)
----
----

exploretrace rule=GenerateLookupJoins
SELECT * FROM abc RIGHT JOIN xyz ON a=z
----
----
================================================================================
GenerateLookupJoins
================================================================================
Source expression:
  left-join (hash)
   ├── columns: a:1 b:2 c:3 x:5 y:6 z:7
   ├── scan xyz
   │    └── columns: x:5 y:6 z:7
   ├── scan abc
   │    └── columns: a:1 b:2 c:3
   └── filters
        └── a:1 = z:7 [outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]

New expression 1 of 1:
  left-join (lookup abc@ab)
   ├── columns: a:1 b:2 c:3 x:5 y:6 z:7
   ├── key columns: [7] = [1]
   ├── scan xyz
   │    └── columns: x:5 y:6 z:7
   └── filters (true)
----
----

# Verify rule application when we can do a lookup join on the right side.
exploretrace rule=GenerateLookupJoins
SELECT * FROM abc JOIN xyz ON c=x
----
----
================================================================================
GenerateLookupJoins
================================================================================
Source expression:
  inner-join (hash)
   ├── columns: a:1 b:2 c:3!null x:5!null y:6 z:7
   ├── fd: (3)==(5), (5)==(3)
   ├── scan abc
   │    └── columns: a:1 b:2 c:3
   ├── scan xyz
   │    └── columns: x:5 y:6 z:7
   └── filters
        └── c:3 = x:5 [outer=(3,5), constraints=(/3: (/NULL - ]; /5: (/NULL - ]), fd=(3)==(5), (5)==(3)]

New expression 1 of 1:
  inner-join (lookup xyz@xy)
   ├── columns: a:1 b:2 c:3!null x:5!null y:6 z:7
   ├── key columns: [3] = [5]
   ├── fd: (3)==(5), (5)==(3)
   ├── scan abc
   │    └── columns: a:1 b:2 c:3
   └── filters (true)

================================================================================
GenerateLookupJoins
================================================================================
Source expression:
  inner-join (hash)
   ├── columns: a:1 b:2 c:3!null x:5!null y:6 z:7
   ├── fd: (3)==(5), (5)==(3)
   ├── scan xyz
   │    └── columns: x:5 y:6 z:7
   ├── scan abc
   │    └── columns: a:1 b:2 c:3
   └── filters
        └── c:3 = x:5 [outer=(3,5), constraints=(/3: (/NULL - ]; /5: (/NULL - ]), fd=(3)==(5), (5)==(3)]

No new expressions.
----
----

exploretrace rule=GenerateLookupJoins
SELECT * FROM abc LEFT JOIN xyz ON c=x
----
----
================================================================================
GenerateLookupJoins
================================================================================
Source expression:
  left-join (hash)
   ├── columns: a:1 b:2 c:3 x:5 y:6 z:7
   ├── scan abc
   │    └── columns: a:1 b:2 c:3
   ├── scan xyz
   │    └── columns: x:5 y:6 z:7
   └── filters
        └── c:3 = x:5 [outer=(3,5), constraints=(/3: (/NULL - ]; /5: (/NULL - ]), fd=(3)==(5), (5)==(3)]

New expression 1 of 1:
  left-join (lookup xyz@xy)
   ├── columns: a:1 b:2 c:3 x:5 y:6 z:7
   ├── key columns: [3] = [5]
   ├── scan abc
   │    └── columns: a:1 b:2 c:3
   └── filters (true)
----
----

# Verify we don't generate a lookup join.
exploretrace rule=GenerateLookupJoins
SELECT * FROM abc RIGHT JOIN xyz ON c=x
----
----
================================================================================
GenerateLookupJoins
================================================================================
Source expression:
  left-join (hash)
   ├── columns: a:1 b:2 c:3 x:5 y:6 z:7
   ├── scan xyz
   │    └── columns: x:5 y:6 z:7
   ├── scan abc
   │    └── columns: a:1 b:2 c:3
   └── filters
        └── c:3 = x:5 [outer=(3,5), constraints=(/3: (/NULL - ]; /5: (/NULL - ]), fd=(3)==(5), (5)==(3)]

No new expressions.
----
----

# Verify we don't generate lookup joins if there is a hint that says otherwise.
memo
SELECT a,b,n,m FROM small INNER HASH JOIN abcd ON a=m
----
memo (optimized, ~8KB, required=[presentation: a:4,b:5,n:2,m:1])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4)
 │    └── [presentation: a:4,b:5,n:2,m:1]
 │         ├── best: (inner-join G2 G3 G4)
 │         └── cost: 1079.16
 ├── G2: (scan small,cols=(1,2))
 │    └── []
 │         ├── best: (scan small,cols=(1,2))
 │         └── cost: 10.52
 ├── G3: (scan abcd,cols=(4,5)) (scan abcd@secondary,cols=(4,5))
 │    └── []
 │         ├── best: (scan abcd@secondary,cols=(4,5))
 │         └── cost: 1050.02
 ├── G4: (filters G5)
 ├── G5: (eq G6 G7)
 ├── G6: (variable a)
 └── G7: (variable m)

# --------------------------------------------------
# GenerateLookupJoinsWithFilter
# --------------------------------------------------
#
# The rule and cases are similar to GenerateLookupJoins, except that we have a
# filter that was pushed down to the lookup side (which needs to be pulled back
# into the ON condition).

# Covering case.
opt
SELECT a,b,n,m FROM small JOIN abcd ON a=m AND b>1
----
inner-join (lookup abcd@secondary)
 ├── columns: a:4!null b:5!null n:2 m:1!null
 ├── key columns: [1] = [4]
 ├── fd: (1)==(4), (4)==(1)
 ├── scan small
 │    └── columns: m:1 n:2
 └── filters
      └── b:5 > 1 [outer=(5), constraints=(/5: [/2 - ]; tight)]

# Covering case, left-join.
opt
SELECT a,b,n,m FROM small LEFT JOIN abcd ON a=m AND b>1
----
left-join (lookup abcd@secondary)
 ├── columns: a:4 b:5 n:2 m:1
 ├── key columns: [1] = [4]
 ├── scan small
 │    └── columns: m:1 n:2
 └── filters
      └── b:5 > 1 [outer=(5), constraints=(/5: [/2 - ]; tight)]

# Non-covering case.
opt
SELECT * FROM small JOIN abcd ON a=m AND b>1
----
inner-join (lookup abcd)
 ├── columns: m:1!null n:2 a:4!null b:5!null c:6
 ├── key columns: [7] = [7]
 ├── lookup columns are key
 ├── fd: (1)==(4), (4)==(1)
 ├── inner-join (lookup abcd@secondary)
 │    ├── columns: m:1!null n:2 a:4!null b:5!null abcd.rowid:7!null
 │    ├── key columns: [1] = [4]
 │    ├── fd: (7)-->(4,5), (1)==(4), (4)==(1)
 │    ├── scan small
 │    │    └── columns: m:1 n:2
 │    └── filters
 │         └── b:5 > 1 [outer=(5), constraints=(/5: [/2 - ]; tight)]
 └── filters (true)

# Non-covering case, left join.
opt
SELECT * FROM small LEFT JOIN abcd ON a=m AND b>1
----
left-join (lookup abcd)
 ├── columns: m:1 n:2 a:4 b:5 c:6
 ├── key columns: [7] = [7]
 ├── lookup columns are key
 ├── left-join (lookup abcd@secondary)
 │    ├── columns: m:1 n:2 a:4 b:5 abcd.rowid:7
 │    ├── key columns: [1] = [4]
 │    ├── fd: (7)-->(4,5)
 │    ├── scan small
 │    │    └── columns: m:1 n:2
 │    └── filters
 │         └── b:5 > 1 [outer=(5), constraints=(/5: [/2 - ]; tight)]
 └── filters (true)

# Non-covering case, extra filter bound by index.
opt
SELECT * FROM small JOIN abcd ON a=m AND b>n AND b>1
----
inner-join (lookup abcd)
 ├── columns: m:1!null n:2!null a:4!null b:5!null c:6
 ├── key columns: [7] = [7]
 ├── lookup columns are key
 ├── fd: (1)==(4), (4)==(1)
 ├── inner-join (lookup abcd@secondary)
 │    ├── columns: m:1!null n:2!null a:4!null b:5!null abcd.rowid:7!null
 │    ├── key columns: [1] = [4]
 │    ├── fd: (7)-->(4,5), (1)==(4), (4)==(1)
 │    ├── scan small
 │    │    └── columns: m:1 n:2
 │    └── filters
 │         ├── b:5 > n:2 [outer=(2,5), constraints=(/2: (/NULL - ]; /5: (/NULL - ])]
 │         └── b:5 > 1 [outer=(5), constraints=(/5: [/2 - ]; tight)]
 └── filters (true)

# Non-covering case, extra filter bound by index, left join.
opt
SELECT * FROM small LEFT JOIN abcd ON a=m AND b>n AND b>1
----
left-join (lookup abcd)
 ├── columns: m:1 n:2 a:4 b:5 c:6
 ├── key columns: [7] = [7]
 ├── lookup columns are key
 ├── left-join (lookup abcd@secondary)
 │    ├── columns: m:1 n:2 a:4 b:5 abcd.rowid:7
 │    ├── key columns: [1] = [4]
 │    ├── fd: (7)-->(4,5)
 │    ├── scan small
 │    │    └── columns: m:1 n:2
 │    └── filters
 │         ├── b:5 > n:2 [outer=(2,5), constraints=(/2: (/NULL - ]; /5: (/NULL - ])]
 │         └── b:5 > 1 [outer=(5), constraints=(/5: [/2 - ]; tight)]
 └── filters (true)

# Non-covering case, extra filter not bound by index.
opt
SELECT * FROM small JOIN abcd ON a=m AND c>n AND b>1
----
inner-join (lookup abcd)
 ├── columns: m:1!null n:2!null a:4!null b:5!null c:6!null
 ├── key columns: [7] = [7]
 ├── lookup columns are key
 ├── fd: (1)==(4), (4)==(1)
 ├── inner-join (lookup abcd@secondary)
 │    ├── columns: m:1!null n:2 a:4!null b:5!null abcd.rowid:7!null
 │    ├── key columns: [1] = [4]
 │    ├── fd: (7)-->(4,5), (1)==(4), (4)==(1)
 │    ├── scan small
 │    │    └── columns: m:1 n:2
 │    └── filters
 │         └── b:5 > 1 [outer=(5), constraints=(/5: [/2 - ]; tight)]
 └── filters
      └── c:6 > n:2 [outer=(2,6), constraints=(/2: (/NULL - ]; /6: (/NULL - ])]

# Non-covering case, extra filter not bound by index, left join.
# In this case, we can't yet convert to a lookup join (see
# the GenerateLookupJoins custom func).
opt
SELECT * FROM small LEFT JOIN abcd ON a=m AND c>n AND b>1
----
right-join (hash)
 ├── columns: m:1 n:2 a:4 b:5 c:6
 ├── select
 │    ├── columns: a:4 b:5!null c:6
 │    ├── scan abcd
 │    │    └── columns: a:4 b:5 c:6
 │    └── filters
 │         └── b:5 > 1 [outer=(5), constraints=(/5: [/2 - ]; tight)]
 ├── scan small
 │    └── columns: m:1 n:2
 └── filters
      ├── a:4 = m:1 [outer=(1,4), constraints=(/1: (/NULL - ]; /4: (/NULL - ]), fd=(1)==(4), (4)==(1)]
      └── c:6 > n:2 [outer=(2,6), constraints=(/2: (/NULL - ]; /6: (/NULL - ])]

# Constant columns are projected and used by lookup joiner.
opt
SELECT * FROM small INNER JOIN abcde ON a=m AND b=10
----
inner-join (lookup abcde)
 ├── columns: m:1!null n:2 a:4!null b:5!null c:6 d:7 e:8
 ├── key columns: [9] = [9]
 ├── lookup columns are key
 ├── fd: ()-->(5), (1)==(4), (4)==(1)
 ├── inner-join (lookup abcde@secondary)
 │    ├── columns: m:1!null n:2 a:4!null b:5!null c:6 abcde.rowid:9!null
 │    ├── key columns: [1 10] = [4 5]
 │    ├── fd: ()-->(5), (9)-->(4,6), (1)==(4), (4)==(1)
 │    ├── project
 │    │    ├── columns: "project_const_col_@5":10!null m:1 n:2
 │    │    ├── fd: ()-->(10)
 │    │    ├── scan small
 │    │    │    └── columns: m:1 n:2
 │    │    └── projections
 │    │         └── 10 [as="project_const_col_@5":10]
 │    └── filters (true)
 └── filters (true)

# Constant columns not projected if not prefix of an index.
opt
SELECT * FROM small INNER JOIN abcde ON a=m AND c=10
----
inner-join (lookup abcde)
 ├── columns: m:1!null n:2 a:4!null b:5 c:6!null d:7 e:8
 ├── key columns: [9] = [9]
 ├── lookup columns are key
 ├── fd: ()-->(6), (1)==(4), (4)==(1)
 ├── inner-join (lookup abcde@secondary)
 │    ├── columns: m:1!null n:2 a:4!null b:5 c:6!null abcde.rowid:9!null
 │    ├── key columns: [1] = [4]
 │    ├── fd: ()-->(6), (9)-->(4,5), (1)==(4), (4)==(1)
 │    ├── scan small
 │    │    └── columns: m:1 n:2
 │    └── filters
 │         └── c:6 = 10 [outer=(6), constraints=(/6: [/10 - /10]; tight), fd=()-->(6)]
 └── filters (true)

# Multiple constant columns projected and used by lookup joiner.
opt
SELECT * FROM small INNER JOIN abcde ON a=m AND b=10 AND c=10
----
inner-join (lookup abcde)
 ├── columns: m:1!null n:2 a:4!null b:5!null c:6!null d:7 e:8
 ├── key columns: [9] = [9]
 ├── lookup columns are key
 ├── fd: ()-->(5,6), (1)==(4), (4)==(1)
 ├── inner-join (lookup abcde@secondary)
 │    ├── columns: m:1!null n:2 a:4!null b:5!null c:6!null abcde.rowid:9!null
 │    ├── key columns: [1 10 11] = [4 5 6]
 │    ├── fd: ()-->(5,6), (9)-->(4), (1)==(4), (4)==(1)
 │    ├── project
 │    │    ├── columns: "project_const_col_@5":10!null "project_const_col_@6":11!null m:1 n:2
 │    │    ├── fd: ()-->(10,11)
 │    │    ├── scan small
 │    │    │    └── columns: m:1 n:2
 │    │    └── projections
 │    │         ├── 10 [as="project_const_col_@5":10]
 │    │         └── 10 [as="project_const_col_@6":11]
 │    └── filters (true)
 └── filters (true)

# Filters are reduced properly as constant filters are extracted.
opt
SELECT * FROM small INNER JOIN abcde ON a=m AND b=10 AND c=10 AND d=10
----
inner-join (lookup abcde)
 ├── columns: m:1!null n:2 a:4!null b:5!null c:6!null d:7!null e:8
 ├── key columns: [9] = [9]
 ├── lookup columns are key
 ├── fd: ()-->(5-7), (1)==(4), (4)==(1)
 ├── inner-join (lookup abcde@secondary)
 │    ├── columns: m:1!null n:2 a:4!null b:5!null c:6!null abcde.rowid:9!null
 │    ├── key columns: [1 10 11] = [4 5 6]
 │    ├── fd: ()-->(5,6), (9)-->(4), (1)==(4), (4)==(1)
 │    ├── project
 │    │    ├── columns: "project_const_col_@5":10!null "project_const_col_@6":11!null m:1 n:2
 │    │    ├── fd: ()-->(10,11)
 │    │    ├── scan small
 │    │    │    └── columns: m:1 n:2
 │    │    └── projections
 │    │         ├── 10 [as="project_const_col_@5":10]
 │    │         └── 10 [as="project_const_col_@6":11]
 │    └── filters (true)
 └── filters
      └── d:7 = 10 [outer=(7), constraints=(/7: [/10 - /10]; tight), fd=()-->(7)]

# Non equality filters don't trigger constant projection.
opt
SELECT * FROM small INNER JOIN abcde ON a=m AND b<10
----
inner-join (lookup abcde)
 ├── columns: m:1!null n:2 a:4!null b:5!null c:6 d:7 e:8
 ├── key columns: [9] = [9]
 ├── lookup columns are key
 ├── fd: (1)==(4), (4)==(1)
 ├── inner-join (lookup abcde@secondary)
 │    ├── columns: m:1!null n:2 a:4!null b:5!null c:6 abcde.rowid:9!null
 │    ├── key columns: [1] = [4]
 │    ├── fd: (9)-->(4-6), (1)==(4), (4)==(1)
 │    ├── scan small
 │    │    └── columns: m:1 n:2
 │    └── filters
 │         └── b:5 < 10 [outer=(5), constraints=(/5: (/NULL - /9]; tight)]
 └── filters (true)

# Lookup Joiner uses the constant equality columns at the same time as the explicit
# column equalities.
opt
SELECT a, b, c FROM small INNER LOOKUP JOIN abcde ON m=b AND a=10 AND c=10
----
project
 ├── columns: a:4!null b:5!null c:6!null
 ├── fd: ()-->(4,6)
 └── inner-join (lookup abcde@secondary)
      ├── columns: m:1!null a:4!null b:5!null c:6!null
      ├── flags: force lookup join (into right side)
      ├── key columns: [10 1 11] = [4 5 6]
      ├── fd: ()-->(4,6), (1)==(5), (5)==(1)
      ├── project
      │    ├── columns: "project_const_col_@4":10!null "project_const_col_@6":11!null m:1
      │    ├── fd: ()-->(10,11)
      │    ├── scan small
      │    │    └── columns: m:1
      │    └── projections
      │         ├── 10 [as="project_const_col_@4":10]
      │         └── 10 [as="project_const_col_@6":11]
      └── filters (true)

# Projection of constant columns work with non const expressions as well.
exec-ddl
CREATE TABLE bool_col (a INT, b INT, c bool, d bool, e bool, INDEX (a,b,c))
----

# Projection of constant columns work on boolean expressions.
opt
SELECT * FROM small INNER JOIN bool_col ON a=m AND b=10 AND c=true
----
inner-join (lookup bool_col)
 ├── columns: m:1!null n:2 a:4!null b:5!null c:6!null d:7 e:8
 ├── key columns: [9] = [9]
 ├── lookup columns are key
 ├── fd: ()-->(5,6), (1)==(4), (4)==(1)
 ├── inner-join (lookup bool_col@secondary)
 │    ├── columns: m:1!null n:2 a:4!null b:5!null c:6!null bool_col.rowid:9!null
 │    ├── key columns: [1 10 11] = [4 5 6]
 │    ├── fd: ()-->(5,6), (9)-->(4), (1)==(4), (4)==(1)
 │    ├── project
 │    │    ├── columns: "project_const_col_@5":10!null "project_const_col_@6":11!null m:1 n:2
 │    │    ├── fd: ()-->(10,11)
 │    │    ├── scan small
 │    │    │    └── columns: m:1 n:2
 │    │    └── projections
 │    │         ├── 10 [as="project_const_col_@5":10]
 │    │         └── true [as="project_const_col_@6":11]
 │    └── filters (true)
 └── filters (true)

opt
SELECT * FROM small INNER JOIN bool_col ON a=m AND b=10 AND c
----
inner-join (lookup bool_col)
 ├── columns: m:1!null n:2 a:4!null b:5!null c:6!null d:7 e:8
 ├── key columns: [9] = [9]
 ├── lookup columns are key
 ├── fd: ()-->(5,6), (1)==(4), (4)==(1)
 ├── inner-join (lookup bool_col@secondary)
 │    ├── columns: m:1!null n:2 a:4!null b:5!null c:6!null bool_col.rowid:9!null
 │    ├── key columns: [1 10 11] = [4 5 6]
 │    ├── fd: ()-->(5,6), (9)-->(4), (1)==(4), (4)==(1)
 │    ├── project
 │    │    ├── columns: "project_const_col_@5":10!null "project_const_col_@6":11!null m:1 n:2
 │    │    ├── fd: ()-->(10,11)
 │    │    ├── scan small
 │    │    │    └── columns: m:1 n:2
 │    │    └── projections
 │    │         ├── 10 [as="project_const_col_@5":10]
 │    │         └── true [as="project_const_col_@6":11]
 │    └── filters (true)
 └── filters (true)

opt
SELECT * FROM small INNER JOIN bool_col ON a=m AND b=10 AND NOT c
----
inner-join (lookup bool_col)
 ├── columns: m:1!null n:2 a:4!null b:5!null c:6!null d:7 e:8
 ├── key columns: [9] = [9]
 ├── lookup columns are key
 ├── fd: ()-->(5,6), (1)==(4), (4)==(1)
 ├── inner-join (lookup bool_col@secondary)
 │    ├── columns: m:1!null n:2 a:4!null b:5!null c:6!null bool_col.rowid:9!null
 │    ├── key columns: [1 10 11] = [4 5 6]
 │    ├── fd: ()-->(5,6), (9)-->(4), (1)==(4), (4)==(1)
 │    ├── project
 │    │    ├── columns: "project_const_col_@5":10!null "project_const_col_@6":11!null m:1 n:2
 │    │    ├── fd: ()-->(10,11)
 │    │    ├── scan small
 │    │    │    └── columns: m:1 n:2
 │    │    └── projections
 │    │         ├── 10 [as="project_const_col_@5":10]
 │    │         └── false [as="project_const_col_@6":11]
 │    └── filters (true)
 └── filters (true)

exec-ddl
CREATE TABLE t(pk INT PRIMARY KEY, col0 INT, col1 INT, col2 INT, col4 INT, UNIQUE INDEX (col2))
----

# Make sure we don't generate a lookup join with no key columns (#41676).
opt
SELECT pk FROM t WHERE col4 = 1 AND col0 = 1 AND col2 IN (SELECT col0 FROM t WHERE col0 = 1 AND col2 IS NULL);
----
project
 ├── columns: pk:1!null
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── semi-join (cross)
      ├── columns: pk:1!null col0:2!null col2:4!null col4:5!null
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1,2,4,5)
      ├── select
      │    ├── columns: pk:1!null col0:2!null col2:4!null col4:5!null
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    ├── fd: ()-->(1,2,4,5)
      │    ├── index-join t
      │    │    ├── columns: pk:1!null col0:2 col2:4 col4:5
      │    │    ├── cardinality: [0 - 1]
      │    │    ├── key: ()
      │    │    ├── fd: ()-->(1,2,4,5)
      │    │    └── scan t@secondary
      │    │         ├── columns: pk:1!null col2:4!null
      │    │         ├── constraint: /4: [/1 - /1]
      │    │         ├── cardinality: [0 - 1]
      │    │         ├── key: ()
      │    │         └── fd: ()-->(1,4)
      │    └── filters
      │         ├── col4:5 = 1 [outer=(5), constraints=(/5: [/1 - /1]; tight), fd=()-->(5)]
      │         └── col0:2 = 1 [outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
      ├── select
      │    ├── columns: col0:7!null col2:9
      │    ├── lax-key: (9)
      │    ├── fd: ()-->(7,9)
      │    ├── index-join t
      │    │    ├── columns: col0:7 col2:9
      │    │    ├── lax-key: (7,9)
      │    │    ├── fd: ()-->(9), (9)~~>(7)
      │    │    └── scan t@secondary
      │    │         ├── columns: pk:6!null col2:9
      │    │         ├── constraint: /9: [/NULL - /NULL]
      │    │         ├── key: (6)
      │    │         └── fd: ()-->(9), (9)~~>(6)
      │    └── filters
      │         └── col0:7 = 1 [outer=(7), constraints=(/7: [/1 - /1]; tight), fd=()-->(7)]
      └── filters (true)

# --------------------------------------------------
# GenerateGeospatialLookupJoins
# --------------------------------------------------

exec-ddl
CREATE TABLE nyc_census_blocks (
  gid serial PRIMARY KEY,
  blkid varchar(15),
  popn_total float8,
  popn_white float8,
  popn_black float8,
  popn_nativ float8,
  popn_asian float8,
  popn_other float8,
  boroname varchar(32),
  geom GEOMETRY(MULTIPOLYGON,4326),
  INVERTED INDEX nyc_census_blocks_geo_idx (geom)
)
----

exec-ddl
CREATE TABLE nyc_neighborhoods (
  gid serial PRIMARY KEY,
  boroname varchar(43),
  name varchar(64),
  geom GEOMETRY(MULTIPOLYGON,4326),
  INVERTED INDEX nyc_neighborhoods_geo_idx (geom)
)
----

exec-ddl
ALTER TABLE nyc_census_blocks INJECT STATISTICS '[
  {
    "columns": ["gid"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 38794,
    "distinct_count": 38794
  },
  {
    "columns": ["boroname"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 38794,
    "distinct_count": 5
  }
]'
----

exec-ddl
ALTER TABLE nyc_neighborhoods INJECT STATISTICS '[
  {
    "columns": ["gid"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 129,
    "distinct_count": 129
  },
  {
    "columns": ["boroname"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 129,
    "distinct_count": 5
  },
  {
    "columns": ["name"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 129,
    "distinct_count": 129
  }
]'
----

# This query calculates the population density of two different neighborhoods
# in New York City.
opt expect=GenerateGeoLookupJoins
SELECT
  n.name,
  Sum(c.popn_total) / (ST_Area(n.geom) / 1000000.0) AS popn_per_sqkm
FROM nyc_census_blocks AS c
JOIN nyc_neighborhoods AS n
ON ST_Intersects(c.geom, n.geom) AND c.boroname = n.boroname
WHERE n.name = 'Upper West Side'
OR n.name = 'Upper East Side'
GROUP BY n.name, n.geom
----
project
 ├── columns: name:13!null popn_per_sqkm:16
 ├── side-effects
 ├── group-by
 │    ├── columns: name:13!null n.geom:14 sum:15
 │    ├── grouping columns: name:13!null n.geom:14
 │    ├── key: (13,14)
 │    ├── fd: (13,14)-->(15)
 │    ├── inner-join (lookup nyc_census_blocks)
 │    │    ├── columns: popn_total:3 c.boroname:9!null c.geom:10 n.boroname:12!null name:13!null n.geom:14
 │    │    ├── key columns: [1] = [1]
 │    │    ├── lookup columns are key
 │    │    ├── fd: (9)==(12), (12)==(9)
 │    │    ├── inner-join (geo-lookup nyc_census_blocks@nyc_census_blocks_geo_idx)
 │    │    │    ├── columns: c.gid:1!null n.boroname:12 name:13!null n.geom:14
 │    │    │    ├── geo-relationship: intersects
 │    │    │    ├── select
 │    │    │    │    ├── columns: n.boroname:12 name:13!null n.geom:14
 │    │    │    │    ├── scan n
 │    │    │    │    │    └── columns: n.boroname:12 name:13 n.geom:14
 │    │    │    │    └── filters
 │    │    │    │         └── (name:13 = 'Upper West Side') OR (name:13 = 'Upper East Side') [outer=(13), constraints=(/13: [/'Upper East Side' - /'Upper East Side'] [/'Upper West Side' - /'Upper West Side']; tight)]
 │    │    │    └── filters (true)
 │    │    └── filters
 │    │         ├── st_intersects(c.geom:10, n.geom:14) [outer=(10,14)]
 │    │         └── c.boroname:9 = n.boroname:12 [outer=(9,12), constraints=(/9: (/NULL - ]; /12: (/NULL - ]), fd=(9)==(12), (12)==(9)]
 │    └── aggregations
 │         └── sum [as=sum:15, outer=(3)]
 │              └── popn_total:3
 └── projections
      └── sum:15 / (st_area(n.geom:14) / 1e+06) [as=popn_per_sqkm:16, outer=(14,15), side-effects]

memo expect=GenerateGeoLookupJoins
SELECT
  n.name,
  Sum(c.popn_total) / (ST_Area(n.geom) / 1000000.0) AS popn_per_sqkm
FROM nyc_census_blocks AS c
JOIN nyc_neighborhoods AS n
ON ST_Intersects(c.geom, n.geom) AND c.boroname = n.boroname
WHERE n.name = 'Upper West Side'
OR n.name = 'Upper East Side'
GROUP BY n.name, n.geom
----
memo (optimized, ~23KB, required=[presentation: name:13,popn_per_sqkm:16])
 ├── G1: (project G2 G3 name)
 │    └── [presentation: name:13,popn_per_sqkm:16]
 │         ├── best: (project G2 G3 name)
 │         └── cost: 6717.66
 ├── G2: (group-by G4 G5 cols=(13,14))
 │    └── []
 │         ├── best: (group-by G4 G5 cols=(13,14))
 │         └── cost: 6717.61
 ├── G3: (projections G6)
 ├── G4: (inner-join G7 G8 G9) (inner-join G8 G7 G9) (lookup-join G10 G9 nyc_census_blocks,keyCols=[1],outCols=(3,9,10,12-14))
 │    └── []
 │         ├── best: (lookup-join G10 G9 nyc_census_blocks,keyCols=[1],outCols=(3,9,10,12-14))
 │         └── cost: 6510.67
 ├── G5: (aggregations G11)
 ├── G6: (div G12 G13)
 ├── G7: (scan c,cols=(3,9,10))
 │    └── []
 │         ├── best: (scan c,cols=(3,9,10))
 │         └── cost: 43837.24
 ├── G8: (select G14 G15)
 │    └── []
 │         ├── best: (select G14 G15)
 │         └── cost: 139.35
 ├── G9: (filters G16 G17)
 ├── G10: (geo-lookup-join G8 G18 nyc_census_blocks@nyc_census_blocks_geo_idx)
 │    └── []
 │         ├── best: (geo-lookup-join G8 G18 nyc_census_blocks@nyc_census_blocks_geo_idx)
 │         └── cost: 1754.40
 ├── G11: (sum G19)
 ├── G12: (variable sum)
 ├── G13: (div G20 G21)
 ├── G14: (scan n,cols=(12-14))
 │    └── []
 │         ├── best: (scan n,cols=(12-14))
 │         └── cost: 138.05
 ├── G15: (filters G22)
 ├── G16: (function G23 st_intersects)
 ├── G17: (eq G24 G25)
 ├── G18: (filters)
 ├── G19: (variable popn_total)
 ├── G20: (function G26 st_area)
 ├── G21: (const 1e+06)
 ├── G22: (or G27 G28)
 ├── G23: (scalar-list G29 G30)
 ├── G24: (variable c.boroname)
 ├── G25: (variable n.boroname)
 ├── G26: (scalar-list G30)
 ├── G27: (eq G31 G32)
 ├── G28: (eq G31 G33)
 ├── G29: (variable c.geom)
 ├── G30: (variable n.geom)
 ├── G31: (variable name)
 ├── G32: (const 'Upper West Side')
 └── G33: (const 'Upper East Side')

# --------------------------------------------------
# GenerateZigZagJoins
# --------------------------------------------------

# Simple zigzag case - where all requested columns are in the indexes being
# joined.
opt
SELECT q,r FROM pqr WHERE q = 1 AND r = 2
----
inner-join (zigzag pqr@q pqr@r)
 ├── columns: q:2!null r:3!null
 ├── eq columns: [1] = [1]
 ├── left fixed columns: [2] = [1]
 ├── right fixed columns: [3] = [2]
 ├── fd: ()-->(2,3)
 └── filters
      ├── q:2 = 1 [outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
      └── r:3 = 2 [outer=(3), constraints=(/3: [/2 - /2]; tight), fd=()-->(3)]

opt
SELECT q,r FROM pqr WHERE q = 1 AND r IS NULL
----
inner-join (zigzag pqr@q pqr@r)
 ├── columns: q:2!null r:3
 ├── eq columns: [1] = [1]
 ├── left fixed columns: [2] = [1]
 ├── right fixed columns: [3] = [NULL]
 ├── fd: ()-->(2,3)
 └── filters
      ├── q:2 = 1 [outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
      └── r:3 IS NULL [outer=(3), constraints=(/3: [/NULL - /NULL]; tight), fd=()-->(3)]

memo
SELECT q,r FROM pqr WHERE q = 1 AND r = 2
----
memo (optimized, ~13KB, required=[presentation: q:2,r:3])
 ├── G1: (select G2 G3) (zigzag-join G3 pqr@q pqr@r) (select G4 G5) (select G6 G7) (select G8 G7)
 │    └── [presentation: q:2,r:3]
 │         ├── best: (zigzag-join G3 pqr@q pqr@r)
 │         └── cost: 0.24
 ├── G2: (scan pqr,cols=(2,3))
 │    └── []
 │         ├── best: (scan pqr,cols=(2,3))
 │         └── cost: 1070.02
 ├── G3: (filters G9 G10)
 ├── G4: (index-join G11 pqr,cols=(2,3))
 │    └── []
 │         ├── best: (index-join G11 pqr,cols=(2,3))
 │         └── cost: 51.22
 ├── G5: (filters G10)
 ├── G6: (index-join G12 pqr,cols=(2,3))
 │    └── []
 │         ├── best: (index-join G12 pqr,cols=(2,3))
 │         └── cost: 51.22
 ├── G7: (filters G9)
 ├── G8: (index-join G13 pqr,cols=(2,3))
 │    └── []
 │         ├── best: (index-join G13 pqr,cols=(2,3))
 │         └── cost: 51.32
 ├── G9: (eq G14 G15)
 ├── G10: (eq G16 G17)
 ├── G11: (scan pqr@q,cols=(1,2),constrained)
 │    └── []
 │         ├── best: (scan pqr@q,cols=(1,2),constrained)
 │         └── cost: 10.41
 ├── G12: (scan pqr@r,cols=(1,3),constrained)
 │    └── []
 │         ├── best: (scan pqr@r,cols=(1,3),constrained)
 │         └── cost: 10.41
 ├── G13: (scan pqr@rs,cols=(1,3),constrained)
 │    └── []
 │         ├── best: (scan pqr@rs,cols=(1,3),constrained)
 │         └── cost: 10.51
 ├── G14: (variable q)
 ├── G15: (const 1)
 ├── G16: (variable r)
 └── G17: (const 2)

# Case where the fixed columns are extracted from a complicated expression.
opt
SELECT q,r FROM pqr WHERE q = 1 AND ((r < 1 AND r > 1) OR (r >= 2 AND r <= 2))
----
inner-join (zigzag pqr@q pqr@r)
 ├── columns: q:2!null r:3!null
 ├── eq columns: [1] = [1]
 ├── left fixed columns: [2] = [1]
 ├── right fixed columns: [3] = [2]
 ├── fd: ()-->(2,3)
 └── filters
      ├── q:2 = 1 [outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
      └── ((r:3 < 1) AND (r:3 > 1)) OR ((r:3 >= 2) AND (r:3 <= 2)) [outer=(3), constraints=(/3: [/2 - /2]), fd=()-->(3)]

# Nested zigzag case - zigzag join needs to be wrapped in a lookup join to
# satisfy required columns.
opt
SELECT q,r,s FROM pqr WHERE q = 1 AND r = 2
----
inner-join (lookup pqr)
 ├── columns: q:2!null r:3!null s:4
 ├── key columns: [1] = [1]
 ├── lookup columns are key
 ├── fd: ()-->(2,3)
 ├── inner-join (zigzag pqr@q pqr@r)
 │    ├── columns: p:1!null q:2!null r:3!null
 │    ├── eq columns: [1] = [1]
 │    ├── left fixed columns: [2] = [1]
 │    ├── right fixed columns: [3] = [2]
 │    ├── fd: ()-->(2,3)
 │    └── filters
 │         ├── q:2 = 1 [outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
 │         └── r:3 = 2 [outer=(3), constraints=(/3: [/2 - /2]; tight), fd=()-->(3)]
 └── filters (true)

memo
SELECT q,r,s FROM pqr WHERE q = 1 AND r = 2
----
memo (optimized, ~15KB, required=[presentation: q:2,r:3,s:4])
 ├── G1: (select G2 G3) (lookup-join G4 G5 pqr,keyCols=[1],outCols=(2-4)) (select G6 G7) (select G8 G9) (select G10 G9)
 │    └── [presentation: q:2,r:3,s:4]
 │         ├── best: (lookup-join G4 G5 pqr,keyCols=[1],outCols=(2-4))
 │         └── cost: 0.86
 ├── G2: (scan pqr,cols=(2-4))
 │    └── []
 │         ├── best: (scan pqr,cols=(2-4))
 │         └── cost: 1080.02
 ├── G3: (filters G11 G12)
 ├── G4: (zigzag-join G3 pqr@q pqr@r)
 │    └── []
 │         ├── best: (zigzag-join G3 pqr@q pqr@r)
 │         └── cost: 0.24
 ├── G5: (filters)
 ├── G6: (index-join G13 pqr,cols=(2-4))
 │    └── []
 │         ├── best: (index-join G13 pqr,cols=(2-4))
 │         └── cost: 51.32
 ├── G7: (filters G12)
 ├── G8: (index-join G14 pqr,cols=(2-4))
 │    └── []
 │         ├── best: (index-join G14 pqr,cols=(2-4))
 │         └── cost: 51.32
 ├── G9: (filters G11)
 ├── G10: (index-join G15 pqr,cols=(2-4))
 │    └── []
 │         ├── best: (index-join G15 pqr,cols=(2-4))
 │         └── cost: 51.52
 ├── G11: (eq G16 G17)
 ├── G12: (eq G18 G19)
 ├── G13: (scan pqr@q,cols=(1,2),constrained)
 │    └── []
 │         ├── best: (scan pqr@q,cols=(1,2),constrained)
 │         └── cost: 10.41
 ├── G14: (scan pqr@r,cols=(1,3),constrained)
 │    └── []
 │         ├── best: (scan pqr@r,cols=(1,3),constrained)
 │         └── cost: 10.41
 ├── G15: (scan pqr@rs,cols=(1,3,4),constrained)
 │    └── []
 │         ├── best: (scan pqr@rs,cols=(1,3,4),constrained)
 │         └── cost: 10.61
 ├── G16: (variable q)
 ├── G17: (const 1)
 ├── G18: (variable r)
 └── G19: (const 2)

# Zigzag with fixed columns of different types.
opt
SELECT q,s FROM pqr WHERE q = 1 AND s = 'foo'
----
inner-join (zigzag pqr@q pqr@s)
 ├── columns: q:2!null s:4!null
 ├── eq columns: [1] = [1]
 ├── left fixed columns: [2] = [1]
 ├── right fixed columns: [4] = ['foo']
 ├── fd: ()-->(2,4)
 └── filters
      ├── q:2 = 1 [outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
      └── s:4 = 'foo' [outer=(4), constraints=(/4: [/'foo' - /'foo']; tight), fd=()-->(4)]

memo
SELECT q,s FROM pqr WHERE q = 1 AND s = 'foo'
----
memo (optimized, ~11KB, required=[presentation: q:2,s:4])
 ├── G1: (select G2 G3) (zigzag-join G3 pqr@q pqr@s) (select G4 G5) (select G6 G7)
 │    └── [presentation: q:2,s:4]
 │         ├── best: (zigzag-join G3 pqr@q pqr@s)
 │         └── cost: 0.24
 ├── G2: (scan pqr,cols=(2,4))
 │    └── []
 │         ├── best: (scan pqr,cols=(2,4))
 │         └── cost: 1070.02
 ├── G3: (filters G8 G9)
 ├── G4: (index-join G10 pqr,cols=(2,4))
 │    └── []
 │         ├── best: (index-join G10 pqr,cols=(2,4))
 │         └── cost: 51.22
 ├── G5: (filters G9)
 ├── G6: (index-join G11 pqr,cols=(2,4))
 │    └── []
 │         ├── best: (index-join G11 pqr,cols=(2,4))
 │         └── cost: 51.32
 ├── G7: (filters G8)
 ├── G8: (eq G12 G13)
 ├── G9: (eq G14 G15)
 ├── G10: (scan pqr@q,cols=(1,2),constrained)
 │    └── []
 │         ├── best: (scan pqr@q,cols=(1,2),constrained)
 │         └── cost: 10.41
 ├── G11: (scan pqr@s,cols=(1,4),constrained)
 │    └── []
 │         ├── best: (scan pqr@s,cols=(1,4),constrained)
 │         └── cost: 10.51
 ├── G12: (variable q)
 ├── G13: (const 1)
 ├── G14: (variable s)
 └── G15: (const 'foo')

# Zigzag with implicit equality column in addition to primary key:
# indexes on (r,s) and (t,s) should be chosen even though s is not being fixed
# in the ON clause.
opt
SELECT r,t FROM pqr WHERE r = 1 AND t = 'foo'
----
inner-join (zigzag pqr@rs pqr@ts)
 ├── columns: r:3!null t:5!null
 ├── eq columns: [4 1] = [4 1]
 ├── left fixed columns: [3] = [1]
 ├── right fixed columns: [5] = ['foo']
 ├── fd: ()-->(3,5)
 └── filters
      ├── r:3 = 1 [outer=(3), constraints=(/3: [/1 - /1]; tight), fd=()-->(3)]
      └── t:5 = 'foo' [outer=(5), constraints=(/5: [/'foo' - /'foo']; tight), fd=()-->(5)]

memo
SELECT r,t FROM pqr WHERE r = 1 AND t = 'foo'
----
memo (optimized, ~13KB, required=[presentation: r:3,t:5])
 ├── G1: (select G2 G3) (zigzag-join G3 pqr@rs pqr@ts) (select G4 G5) (select G6 G5) (select G7 G8)
 │    └── [presentation: r:3,t:5]
 │         ├── best: (zigzag-join G3 pqr@rs pqr@ts)
 │         └── cost: 0.24
 ├── G2: (scan pqr,cols=(3,5))
 │    └── []
 │         ├── best: (scan pqr,cols=(3,5))
 │         └── cost: 1070.02
 ├── G3: (filters G9 G10)
 ├── G4: (index-join G11 pqr,cols=(3,5))
 │    └── []
 │         ├── best: (index-join G11 pqr,cols=(3,5))
 │         └── cost: 51.22
 ├── G5: (filters G10)
 ├── G6: (index-join G12 pqr,cols=(3,5))
 │    └── []
 │         ├── best: (index-join G12 pqr,cols=(3,5))
 │         └── cost: 51.32
 ├── G7: (index-join G13 pqr,cols=(3,5))
 │    └── []
 │         ├── best: (index-join G13 pqr,cols=(3,5))
 │         └── cost: 51.32
 ├── G8: (filters G9)
 ├── G9: (eq G14 G15)
 ├── G10: (eq G16 G17)
 ├── G11: (scan pqr@r,cols=(1,3),constrained)
 │    └── []
 │         ├── best: (scan pqr@r,cols=(1,3),constrained)
 │         └── cost: 10.41
 ├── G12: (scan pqr@rs,cols=(1,3),constrained)
 │    └── []
 │         ├── best: (scan pqr@rs,cols=(1,3),constrained)
 │         └── cost: 10.51
 ├── G13: (scan pqr@ts,cols=(1,5),constrained)
 │    └── []
 │         ├── best: (scan pqr@ts,cols=(1,5),constrained)
 │         └── cost: 10.51
 ├── G14: (variable r)
 ├── G15: (const 1)
 ├── G16: (variable t)
 └── G17: (const 'foo')

# Zigzag with choice between indexes for multiple equality predicates.
opt
SELECT p,q,r,s FROM pqr WHERE q = 1 AND r = 1 AND s = 'foo'
----
inner-join (zigzag pqr@q pqr@s)
 ├── columns: p:1!null q:2!null r:3!null s:4!null
 ├── eq columns: [1] = [1]
 ├── left fixed columns: [2] = [1]
 ├── right fixed columns: [4] = ['foo']
 ├── key: (1)
 ├── fd: ()-->(2-4)
 └── filters
      ├── q:2 = 1 [outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
      ├── r:3 = 1 [outer=(3), constraints=(/3: [/1 - /1]; tight), fd=()-->(3)]
      └── s:4 = 'foo' [outer=(4), constraints=(/4: [/'foo' - /'foo']; tight), fd=()-->(4)]

# Don't generate a zigzag which has the PK as its equality columns against
# nullable unique indexes where the primary key is not part of the indexed
# columns.

# Regression test for #36051: prior to fixing this, we would try to use the PK
# as the equality column here, but it's not actually part of the key so we
# can't zigzag on it.
opt
SELECT * FROM zz WHERE b IS NULL AND c = 2
----
select
 ├── columns: a:1!null b:2 c:3!null
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-3)
 ├── index-join zz
 │    ├── columns: a:1!null b:2 c:3
 │    ├── cardinality: [0 - 1]
 │    ├── key: ()
 │    ├── fd: ()-->(1-3)
 │    └── scan zz@idx_c
 │         ├── columns: a:1!null c:3!null
 │         ├── constraint: /3: [/2 - /2]
 │         ├── cardinality: [0 - 1]
 │         ├── key: ()
 │         └── fd: ()-->(1,3)
 └── filters
      └── b:2 IS NULL [outer=(2), constraints=(/2: [/NULL - /NULL]; tight), fd=()-->(2)]

memo
SELECT p,q,r,s FROM pqr WHERE q = 1 AND r = 1 AND s = 'foo'
----
memo (optimized, ~31KB, required=[presentation: p:1,q:2,r:3,s:4])
 ├── G1: (select G2 G3) (lookup-join G4 G5 pqr,keyCols=[1],outCols=(1-4)) (zigzag-join G3 pqr@q pqr@s) (zigzag-join G3 pqr@q pqr@rs) (lookup-join G6 G7 pqr,keyCols=[1],outCols=(1-4)) (select G8 G9) (select G10 G11) (select G12 G7) (select G13 G7)
 │    └── [presentation: p:1,q:2,r:3,s:4]
 │         ├── best: (zigzag-join G3 pqr@q pqr@s)
 │         └── cost: 0.04
 ├── G2: (scan pqr,cols=(1-4))
 │    └── []
 │         ├── best: (scan pqr,cols=(1-4))
 │         └── cost: 1090.02
 ├── G3: (filters G14 G15 G16)
 ├── G4: (zigzag-join G17 pqr@q pqr@r)
 │    └── []
 │         ├── best: (zigzag-join G17 pqr@q pqr@r)
 │         └── cost: 0.24
 ├── G5: (filters G16)
 ├── G6: (zigzag-join G9 pqr@r pqr@s)
 │    └── []
 │         ├── best: (zigzag-join G9 pqr@r pqr@s)
 │         └── cost: 0.24
 ├── G7: (filters G14)
 ├── G8: (index-join G18 pqr,cols=(1-4))
 │    └── []
 │         ├── best: (index-join G18 pqr,cols=(1-4))
 │         └── cost: 51.42
 ├── G9: (filters G15 G16)
 ├── G10: (index-join G19 pqr,cols=(1-4))
 │    └── []
 │         ├── best: (index-join G19 pqr,cols=(1-4))
 │         └── cost: 51.42
 ├── G11: (filters G14 G16)
 ├── G12: (index-join G20 pqr,cols=(1-4))
 │    └── []
 │         ├── best: (index-join G20 pqr,cols=(1-4))
 │         └── cost: 15.47
 ├── G13: (index-join G21 pqr,cols=(1-4))
 │    └── []
 │         ├── best: (index-join G21 pqr,cols=(1-4))
 │         └── cost: 0.54
 ├── G14: (eq G22 G23)
 ├── G15: (eq G24 G23)
 ├── G16: (eq G25 G26)
 ├── G17: (filters G14 G15)
 ├── G18: (scan pqr@q,cols=(1,2),constrained)
 │    └── []
 │         ├── best: (scan pqr@q,cols=(1,2),constrained)
 │         └── cost: 10.41
 ├── G19: (scan pqr@r,cols=(1,3),constrained)
 │    └── []
 │         ├── best: (scan pqr@r,cols=(1,3),constrained)
 │         └── cost: 10.41
 ├── G20: (select G27 G28)
 │    └── []
 │         ├── best: (select G27 G28)
 │         └── cost: 10.72
 ├── G21: (scan pqr@rs,cols=(1,3,4),constrained)
 │    └── []
 │         ├── best: (scan pqr@rs,cols=(1,3,4),constrained)
 │         └── cost: 0.12
 ├── G22: (variable q)
 ├── G23: (const 1)
 ├── G24: (variable r)
 ├── G25: (variable s)
 ├── G26: (const 'foo')
 ├── G27: (scan pqr@s,cols=(1,3,4),constrained)
 │    └── []
 │         ├── best: (scan pqr@s,cols=(1,3,4),constrained)
 │         └── cost: 10.61
 └── G28: (filters G15)

# Zigzag joins cannot be planned for indexes where equality columns do not
# immediately follow fixed columns. Here, the only index on t is (t,s,p) and
# s is not a fixed or equal column, so a zigzag join shouldn't be planned.
opt
SELECT q,t FROM pqr WHERE q = 1 AND t = 'foo'
----
select
 ├── columns: q:2!null t:5!null
 ├── fd: ()-->(2,5)
 ├── index-join pqr
 │    ├── columns: q:2 t:5
 │    ├── fd: ()-->(2)
 │    └── scan pqr@q
 │         ├── columns: p:1!null q:2!null
 │         ├── constraint: /2/1: [/1 - /1]
 │         ├── key: (1)
 │         └── fd: ()-->(2)
 └── filters
      └── t:5 = 'foo' [outer=(5), constraints=(/5: [/'foo' - /'foo']; tight), fd=()-->(5)]

memo
SELECT q,t FROM pqr WHERE q = 1 AND t = 'foo'
----
memo (optimized, ~9KB, required=[presentation: q:2,t:5])
 ├── G1: (select G2 G3) (select G4 G5) (select G6 G7)
 │    └── [presentation: q:2,t:5]
 │         ├── best: (select G4 G5)
 │         └── cost: 51.33
 ├── G2: (scan pqr,cols=(2,5))
 │    └── []
 │         ├── best: (scan pqr,cols=(2,5))
 │         └── cost: 1070.02
 ├── G3: (filters G8 G9)
 ├── G4: (index-join G10 pqr,cols=(2,5))
 │    └── []
 │         ├── best: (index-join G10 pqr,cols=(2,5))
 │         └── cost: 51.22
 ├── G5: (filters G9)
 ├── G6: (index-join G11 pqr,cols=(2,5))
 │    └── []
 │         ├── best: (index-join G11 pqr,cols=(2,5))
 │         └── cost: 51.32
 ├── G7: (filters G8)
 ├── G8: (eq G12 G13)
 ├── G9: (eq G14 G15)
 ├── G10: (scan pqr@q,cols=(1,2),constrained)
 │    └── []
 │         ├── best: (scan pqr@q,cols=(1,2),constrained)
 │         └── cost: 10.41
 ├── G11: (scan pqr@ts,cols=(1,5),constrained)
 │    └── []
 │         ├── best: (scan pqr@ts,cols=(1,5),constrained)
 │         └── cost: 10.51
 ├── G12: (variable q)
 ├── G13: (const 1)
 ├── G14: (variable t)
 └── G15: (const 'foo')

# Don't zigzag on two identical indexes.
memo
SELECT c FROM zz_redundant WHERE b = 1
----
memo (optimized, ~6KB, required=[presentation: c:3])
 ├── G1: (project G2 G3 c)
 │    └── [presentation: c:3]
 │         ├── best: (project G2 G3 c)
 │         └── cost: 10.62
 ├── G2: (select G4 G5) (scan zz_redundant@idx_u,cols=(2,3),constrained) (scan zz_redundant@idx_v,cols=(2,3),constrained)
 │    └── []
 │         ├── best: (scan zz_redundant@idx_u,cols=(2,3),constrained)
 │         └── cost: 10.51
 ├── G3: (projections)
 ├── G4: (scan zz_redundant,cols=(2,3)) (scan zz_redundant@idx_u,cols=(2,3)) (scan zz_redundant@idx_v,cols=(2,3))
 │    └── []
 │         ├── best: (scan zz_redundant,cols=(2,3))
 │         └── cost: 1050.02
 ├── G5: (filters G6)
 ├── G6: (eq G7 G8)
 ├── G7: (variable b)
 └── G8: (const 1)

# GenerateZigzagJoins is disabled in the presence of a row-level locking clause.
opt
SELECT q,r FROM pqr WHERE q = 1 AND r = 2 FOR UPDATE
----
select
 ├── columns: q:2!null r:3!null
 ├── side-effects
 ├── fd: ()-->(2,3)
 ├── index-join pqr
 │    ├── columns: q:2 r:3
 │    ├── side-effects
 │    ├── fd: ()-->(2)
 │    └── scan pqr@q
 │         ├── columns: p:1!null q:2!null
 │         ├── constraint: /2/1: [/1 - /1]
 │         ├── locking: for-update
 │         ├── side-effects
 │         ├── key: (1)
 │         └── fd: ()-->(2)
 └── filters
      └── r:3 = 2 [outer=(3), constraints=(/3: [/2 - /2]; tight), fd=()-->(3)]

# --------------------------------------------------
# GenerateInvertedIndexZigzagJoins
# --------------------------------------------------

exec-ddl
CREATE TABLE t5 (
    a INT PRIMARY KEY,
    b JSONB,
    c INT,
    INVERTED INDEX b_idx(b)
)
----

# One path. Should generate a scan constrained on the inverted index.
opt
SELECT b,a FROM t5 WHERE b @> '{"a":1}'
----
index-join t5
 ├── columns: b:2 a:1!null
 ├── key: (1)
 ├── fd: (1)-->(2)
 └── scan t5@b_idx
      ├── columns: a:1!null
      ├── constraint: /2/1: [/'{"a": 1}' - /'{"a": 1}']
      └── key: (1)

opt
SELECT b,a FROM t5 WHERE b @> '{"a":[[{"b":{"c":[{"d":"e"}]}}]]}'
----
index-join t5
 ├── columns: b:2 a:1!null
 ├── key: (1)
 ├── fd: (1)-->(2)
 └── scan t5@b_idx
      ├── columns: a:1!null
      ├── constraint: /2/1: [/'{"a": [[{"b": {"c": [{"d": "e"}]}}]]}' - /'{"a": [[{"b": {"c": [{"d": "e"}]}}]]}']
      └── key: (1)

# Two paths. Should generate a zigzag join.
opt
SELECT b,a FROM t5 WHERE b @> '{"a":1, "c":2}'
----
inner-join (lookup t5)
 ├── columns: b:2 a:1!null
 ├── key columns: [1] = [1]
 ├── lookup columns are key
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── inner-join (zigzag t5@b_idx t5@b_idx)
 │    ├── columns: a:1!null
 │    ├── eq columns: [1] = [1]
 │    ├── left fixed columns: [2] = ['{"a": 1}']
 │    ├── right fixed columns: [2] = ['{"c": 2}']
 │    └── filters (true)
 └── filters
      └── b:2 @> '{"a": 1, "c": 2}' [outer=(2)]

memo
SELECT a FROM t5 WHERE b @> '{"a":1, "c":2}'
----
memo (optimized, ~14KB, required=[presentation: a:1])
 ├── G1: (project G2 G3 a)
 │    └── [presentation: a:1]
 │         ├── best: (project G2 G3 a)
 │         └── cost: 100.29
 ├── G2: (select G4 G5) (lookup-join G6 G5 t5,keyCols=[1],outCols=(1,2)) (select G7 G5)
 │    └── []
 │         ├── best: (lookup-join G6 G5 t5,keyCols=[1],outCols=(1,2))
 │         └── cost: 100.15
 ├── G3: (projections)
 ├── G4: (scan t5,cols=(1,2))
 │    └── []
 │         ├── best: (scan t5,cols=(1,2))
 │         └── cost: 1050.02
 ├── G5: (filters G8)
 ├── G6: (zigzag-join G9 t5@b_idx t5@b_idx)
 │    └── []
 │         ├── best: (zigzag-join G9 t5@b_idx t5@b_idx)
 │         └── cost: 25.57
 ├── G7: (index-join G10 t5,cols=(1,2))
 │    └── []
 │         ├── best: (index-join G10 t5,cols=(1,2))
 │         └── cost: 565.58
 ├── G8: (contains G11 G12)
 ├── G9: (filters)
 ├── G10: (scan t5@b_idx,cols=(1),constrained)
 │    └── []
 │         ├── best: (scan t5@b_idx,cols=(1),constrained)
 │         └── cost: 114.45
 ├── G11: (variable b)
 └── G12: (const '{"a": 1, "c": 2}')

# Three or more paths. Should generate zigzag joins.
opt
SELECT b,a FROM t5 WHERE b @> '{"a":[{"b":"c", "d":3}, 5]}'
----
inner-join (lookup t5)
 ├── columns: b:2 a:1!null
 ├── key columns: [1] = [1]
 ├── lookup columns are key
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── inner-join (zigzag t5@b_idx t5@b_idx)
 │    ├── columns: a:1!null
 │    ├── eq columns: [1] = [1]
 │    ├── left fixed columns: [2] = ['{"a": [{"b": "c"}]}']
 │    ├── right fixed columns: [2] = ['{"a": [{"d": 3}]}']
 │    └── filters (true)
 └── filters
      └── b:2 @> '{"a": [{"b": "c", "d": 3}, 5]}' [outer=(2)]

# Regression test for issue where zero-column expressions could exist multiple
# times in the tree, causing collisions.
opt
SELECT 1 FROM (VALUES (1), (1)) JOIN (VALUES (1), (1), (1)) ON true
UNION ALL
SELECT 1 FROM (VALUES (1), (1), (1)) JOIN (VALUES (1), (1)) ON true
----
union-all
 ├── columns: "?column?":7!null
 ├── left columns: "?column?":3
 ├── right columns: "?column?":6
 ├── cardinality: [12 - 12]
 ├── project
 │    ├── columns: "?column?":3!null
 │    ├── cardinality: [6 - 6]
 │    ├── fd: ()-->(3)
 │    ├── inner-join (cross)
 │    │    ├── cardinality: [6 - 6]
 │    │    ├── values
 │    │    │    ├── cardinality: [3 - 3]
 │    │    │    ├── ()
 │    │    │    ├── ()
 │    │    │    └── ()
 │    │    ├── values
 │    │    │    ├── cardinality: [2 - 2]
 │    │    │    ├── ()
 │    │    │    └── ()
 │    │    └── filters (true)
 │    └── projections
 │         └── 1 [as="?column?":3]
 └── project
      ├── columns: "?column?":6!null
      ├── cardinality: [6 - 6]
      ├── fd: ()-->(6)
      ├── inner-join (cross)
      │    ├── cardinality: [6 - 6]
      │    ├── values
      │    │    ├── cardinality: [3 - 3]
      │    │    ├── ()
      │    │    ├── ()
      │    │    └── ()
      │    ├── values
      │    │    ├── cardinality: [2 - 2]
      │    │    ├── ()
      │    │    └── ()
      │    └── filters (true)
      └── projections
           └── 1 [as="?column?":6]

memo
SELECT 1 FROM (VALUES (1), (1)) JOIN (VALUES (1), (1), (1)) ON true
UNION ALL
SELECT 1 FROM (VALUES (1), (1), (1)) JOIN (VALUES (1), (1)) ON true
----
memo (optimized, ~19KB, required=[presentation: ?column?:7])
 ├── G1: (union-all G2 G3)
 │    └── [presentation: ?column?:7]
 │         ├── best: (union-all G2 G3)
 │         └── cost: 0.82
 ├── G2: (project G4 G5)
 │    └── []
 │         ├── best: (project G4 G5)
 │         └── cost: 0.34
 ├── G3: (project G6 G5)
 │    └── []
 │         ├── best: (project G6 G5)
 │         └── cost: 0.34
 ├── G4: (inner-join G7 G8 G9) (inner-join G8 G7 G9)
 │    └── []
 │         ├── best: (inner-join G8 G7 G9)
 │         └── cost: 0.21
 ├── G5: (projections G10)
 ├── G6: (inner-join G11 G12 G9) (inner-join G12 G11 G9)
 │    └── []
 │         ├── best: (inner-join G11 G12 G9)
 │         └── cost: 0.21
 ├── G7: (values G13 id=v1)
 │    └── []
 │         ├── best: (values G13 id=v1)
 │         └── cost: 0.03
 ├── G8: (values G14 id=v2)
 │    └── []
 │         ├── best: (values G14 id=v2)
 │         └── cost: 0.04
 ├── G9: (filters)
 ├── G10: (const 1)
 ├── G11: (values G14 id=v3)
 │    └── []
 │         ├── best: (values G14 id=v3)
 │         └── cost: 0.04
 ├── G12: (values G13 id=v4)
 │    └── []
 │         ├── best: (values G13 id=v4)
 │         └── cost: 0.03
 ├── G13: (scalar-list G15 G15)
 ├── G14: (scalar-list G15 G15 G15)
 ├── G15: (tuple G16)
 └── G16: (scalar-list)

opt join-limit=3
SELECT
    false
FROM
    abc AS x JOIN [INSERT INTO abc (a) SELECT 1 FROM abc RETURNING 1] JOIN abc AS y ON true ON false
----
with &1
 ├── columns: bool:22!null
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 ├── key: ()
 ├── fd: ()-->(22)
 ├── project
 │    ├── columns: "?column?":16!null
 │    ├── side-effects, mutations
 │    ├── fd: ()-->(16)
 │    ├── insert abc
 │    │    ├── columns: abc.rowid:8!null
 │    │    ├── insert-mapping:
 │    │    │    ├── "?column?":13 => abc.a:5
 │    │    │    ├── column14:14 => abc.b:6
 │    │    │    ├── column14:14 => abc.c:7
 │    │    │    └── column15:15 => abc.rowid:8
 │    │    ├── side-effects, mutations
 │    │    └── project
 │    │         ├── columns: column14:14 column15:15 "?column?":13!null
 │    │         ├── side-effects
 │    │         ├── fd: ()-->(13,14)
 │    │         ├── scan abc
 │    │         └── projections
 │    │              ├── CAST(NULL AS INT8) [as=column14:14]
 │    │              ├── unique_rowid() [as=column15:15, side-effects]
 │    │              └── 1 [as="?column?":13]
 │    └── projections
 │         └── 1 [as="?column?":16]
 └── values
      ├── columns: bool:22!null
      ├── cardinality: [0 - 0]
      ├── key: ()
      └── fd: ()-->(22)

opt join-limit=3
SELECT 1 FROM ((VALUES (1), (1)) JOIN ((VALUES (1), (1), (1)) JOIN (VALUES (1), (1), (1), (1)) ON true) ON true)
UNION ALL
SELECT 1 FROM ((VALUES (1), (1)) JOIN (VALUES (1), (1), (1)) ON true) JOIN (VALUES (1), (1), (1), (1)) ON true
----
union-all
 ├── columns: "?column?":9!null
 ├── left columns: "?column?":4
 ├── right columns: "?column?":8
 ├── cardinality: [48 - 48]
 ├── project
 │    ├── columns: "?column?":4!null
 │    ├── cardinality: [24 - 24]
 │    ├── fd: ()-->(4)
 │    ├── inner-join (cross)
 │    │    ├── cardinality: [24 - 24]
 │    │    ├── inner-join (cross)
 │    │    │    ├── cardinality: [6 - 6]
 │    │    │    ├── values
 │    │    │    │    ├── cardinality: [3 - 3]
 │    │    │    │    ├── ()
 │    │    │    │    ├── ()
 │    │    │    │    └── ()
 │    │    │    ├── values
 │    │    │    │    ├── cardinality: [2 - 2]
 │    │    │    │    ├── ()
 │    │    │    │    └── ()
 │    │    │    └── filters (true)
 │    │    ├── values
 │    │    │    ├── cardinality: [4 - 4]
 │    │    │    ├── ()
 │    │    │    ├── ()
 │    │    │    ├── ()
 │    │    │    └── ()
 │    │    └── filters (true)
 │    └── projections
 │         └── 1 [as="?column?":4]
 └── project
      ├── columns: "?column?":8!null
      ├── cardinality: [24 - 24]
      ├── fd: ()-->(8)
      ├── inner-join (cross)
      │    ├── cardinality: [24 - 24]
      │    ├── inner-join (cross)
      │    │    ├── cardinality: [6 - 6]
      │    │    ├── values
      │    │    │    ├── cardinality: [3 - 3]
      │    │    │    ├── ()
      │    │    │    ├── ()
      │    │    │    └── ()
      │    │    ├── values
      │    │    │    ├── cardinality: [2 - 2]
      │    │    │    ├── ()
      │    │    │    └── ()
      │    │    └── filters (true)
      │    ├── values
      │    │    ├── cardinality: [4 - 4]
      │    │    ├── ()
      │    │    ├── ()
      │    │    ├── ()
      │    │    └── ()
      │    └── filters (true)
      └── projections
           └── 1 [as="?column?":8]

opt
SELECT 1 FROM (VALUES (1), (1)) LEFT JOIN (VALUES (1), (1), (1)) ON random() = 0
UNION ALL
SELECT 1 FROM (VALUES (1), (1), (1)) RIGHT JOIN (VALUES (1), (1)) ON random() = 0
----
union-all
 ├── columns: "?column?":7!null
 ├── left columns: "?column?":3
 ├── right columns: "?column?":6
 ├── cardinality: [4 - 12]
 ├── side-effects
 ├── project
 │    ├── columns: "?column?":3!null
 │    ├── cardinality: [2 - 6]
 │    ├── side-effects
 │    ├── fd: ()-->(3)
 │    ├── left-join (cross)
 │    │    ├── cardinality: [2 - 6]
 │    │    ├── side-effects
 │    │    ├── values
 │    │    │    ├── cardinality: [2 - 2]
 │    │    │    ├── ()
 │    │    │    └── ()
 │    │    ├── select
 │    │    │    ├── cardinality: [0 - 3]
 │    │    │    ├── side-effects
 │    │    │    ├── values
 │    │    │    │    ├── cardinality: [3 - 3]
 │    │    │    │    ├── ()
 │    │    │    │    ├── ()
 │    │    │    │    └── ()
 │    │    │    └── filters
 │    │    │         └── random() = 0.0 [side-effects]
 │    │    └── filters (true)
 │    └── projections
 │         └── 1 [as="?column?":3]
 └── project
      ├── columns: "?column?":6!null
      ├── cardinality: [2 - 6]
      ├── side-effects
      ├── fd: ()-->(6)
      ├── left-join (cross)
      │    ├── cardinality: [2 - 6]
      │    ├── side-effects
      │    ├── values
      │    │    ├── cardinality: [2 - 2]
      │    │    ├── ()
      │    │    └── ()
      │    ├── select
      │    │    ├── cardinality: [0 - 3]
      │    │    ├── side-effects
      │    │    ├── values
      │    │    │    ├── cardinality: [3 - 3]
      │    │    │    ├── ()
      │    │    │    ├── ()
      │    │    │    └── ()
      │    │    └── filters
      │    │         └── random() = 0.0 [side-effects]
      │    └── filters (true)
      └── projections
           └── 1 [as="?column?":6]

exec-ddl
CREATE TABLE def (d INT, e INT, f INT, PRIMARY KEY (d, e));
----

exec-ddl
ALTER TABLE abc INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 100,
    "distinct_count": 100
  },
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 100,
    "distinct_count": 100
  }
]'
----

exec-ddl
ALTER TABLE def INJECT STATISTICS '[
  {
    "columns": ["d"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 10000
  },
  {
    "columns": ["e"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 10000
  }
]'
----

# Test the CommuteSemiJoinRule creates an appropriate inner join.
opt
SELECT * from abc WHERE EXISTS (SELECT * FROM def WHERE a=f)
----
semi-join (hash)
 ├── columns: a:1 b:2 c:3
 ├── scan abc
 │    └── columns: a:1 b:2 c:3
 ├── scan def
 │    └── columns: f:7
 └── filters
      └── a:1 = f:7 [outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]

# Test that we don't commute a SemiJoin when the On conditions are not
# equalities. For example, in this test we have a Lt condition.
opt expect-not=CommuteSemiJoin
SELECT * from abc WHERE EXISTS (SELECT * FROM def WHERE a < e)
----
semi-join (cross)
 ├── columns: a:1 b:2 c:3
 ├── scan abc
 │    └── columns: a:1 b:2 c:3
 ├── scan def
 │    └── columns: e:6!null
 └── filters
      └── a:1 < e:6 [outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# Test that we don't commute a SemiJoin when the On conditions are not
# equalities. For example, in this test we have an Or condition.
opt expect-not=CommuteSemiJoin
SELECT * from abc WHERE EXISTS (SELECT * FROM def WHERE a=d OR c=e)
----
semi-join (cross)
 ├── columns: a:1 b:2 c:3
 ├── scan abc
 │    └── columns: a:1 b:2 c:3
 ├── scan def
 │    ├── columns: d:5!null e:6!null
 │    └── key: (5,6)
 └── filters
      └── (a:1 = d:5) OR (c:3 = e:6) [outer=(1,3,5,6)]

opt disable=CommuteSemiJoin format=show-all
SELECT * from abc WHERE EXISTS (SELECT * FROM def WHERE a=d AND c=e)
----
semi-join (lookup def)
 ├── columns: a:1(int) b:2(int) c:3(int)
 ├── key columns: [1 3] = [5 6]
 ├── lookup columns are key
 ├── stats: [rows=100, distinct(1)=100, null(1)=0, distinct(3)=10, null(3)=0]
 ├── cost: 507.050295
 ├── prune: (2)
 ├── interesting orderings: (+1,+2) (+2,+3)
 ├── scan t.public.abc
 │    ├── columns: t.public.abc.a:1(int) t.public.abc.b:2(int) t.public.abc.c:3(int)
 │    ├── stats: [rows=100, distinct(1)=100, null(1)=0, distinct(3)=10, null(3)=1]
 │    ├── cost: 107.02
 │    ├── prune: (1-3)
 │    └── interesting orderings: (+1,+2) (+2,+3)
 └── filters (true)

# TODO(rytaft): See stats/join tests. Since we don't collect the stats properly
# for SemiJoins, we prefer the InnerJoin plan over the SemiJoin one more times
# than necessary.
opt format=show-all
SELECT * from abc WHERE EXISTS (SELECT * FROM def WHERE a=d AND c=e)
----
semi-join (lookup def)
 ├── columns: a:1(int) b:2(int) c:3(int)
 ├── key columns: [1 3] = [5 6]
 ├── lookup columns are key
 ├── stats: [rows=100, distinct(1)=100, null(1)=0, distinct(3)=10, null(3)=0]
 ├── cost: 507.050295
 ├── prune: (2)
 ├── interesting orderings: (+1,+2) (+2,+3)
 ├── scan t.public.abc
 │    ├── columns: t.public.abc.a:1(int) t.public.abc.b:2(int) t.public.abc.c:3(int)
 │    ├── stats: [rows=100, distinct(1)=100, null(1)=0, distinct(3)=10, null(3)=1]
 │    ├── cost: 107.02
 │    ├── prune: (1-3)
 │    └── interesting orderings: (+1,+2) (+2,+3)
 └── filters (true)

exec-ddl
CREATE TABLE customers (id INT PRIMARY KEY, name STRING)
----

exec-ddl
CREATE TABLE orders (id INT PRIMARY KEY, cust_id INT REFERENCES customers (id), order_date DATE, INDEX (order_date) STORING (cust_id))
----

exec-ddl
ALTER TABLE customers INJECT STATISTICS '[
  {
    "columns": ["id"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 100000,
    "distinct_count": 100000
  }
]'
----

exec-ddl
ALTER TABLE orders INJECT STATISTICS '[
  {
    "columns": ["id"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 1000000,
    "distinct_count": 1000000
  },
  {
    "columns": ["cust_id"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 1000000,
    "distinct_count": 10000000
  },
  {
    "columns": ["order_date"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 1000000,
    "distinct_count": 1000000
  }
]'
----

opt disable=CommuteSemiJoin
SELECT *
FROM customers c
WHERE EXISTS(SELECT * FROM orders o WHERE o.cust_id=c.id AND o.order_date='2019-01-01')
----
semi-join (merge)
 ├── columns: id:1!null name:2
 ├── left ordering: +1
 ├── right ordering: +4
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── scan c
 │    ├── columns: c.id:1!null name:2
 │    ├── key: (1)
 │    ├── fd: (1)-->(2)
 │    └── ordering: +1
 ├── sort
 │    ├── columns: cust_id:4 order_date:5!null
 │    ├── fd: ()-->(5)
 │    ├── ordering: +4 opt(5) [actual: +4]
 │    └── scan o@secondary
 │         ├── columns: cust_id:4 order_date:5!null
 │         ├── constraint: /5/3: [/'2019-01-01' - /'2019-01-01']
 │         └── fd: ()-->(5)
 └── filters (true)

# The CommuteSemiJoin rule allows a much better plan because we can use
# a lookup join.
opt
SELECT *
FROM customers c
WHERE EXISTS(SELECT * FROM orders o WHERE o.cust_id=c.id AND o.order_date='2019-01-01')
----
project
 ├── columns: id:1!null name:2
 ├── key: (1)
 ├── fd: (1)-->(2)
 └── inner-join (lookup customers)
      ├── columns: c.id:1!null name:2 cust_id:4!null
      ├── key columns: [4] = [1]
      ├── lookup columns are key
      ├── key: (4)
      ├── fd: (1)-->(2), (1)==(4), (4)==(1)
      ├── distinct-on
      │    ├── columns: cust_id:4
      │    ├── grouping columns: cust_id:4
      │    ├── key: (4)
      │    └── scan o@secondary
      │         ├── columns: cust_id:4 order_date:5!null
      │         ├── constraint: /5/3: [/'2019-01-01' - /'2019-01-01']
      │         └── fd: ()-->(5)
      └── filters (true)

# GenerateInvertedIndexZigzagJoins is disabled in the presence of a row-level
# locking clause.
opt
SELECT b,a FROM t5 WHERE b @> '{"a":1, "c":2}' FOR UPDATE
----
select
 ├── columns: b:2 a:1!null
 ├── side-effects
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── index-join t5
 │    ├── columns: a:1!null b:2
 │    ├── side-effects
 │    ├── key: (1)
 │    ├── fd: (1)-->(2)
 │    └── scan t5@b_idx
 │         ├── columns: a:1!null
 │         ├── constraint: /2/1: [/'{"a": 1}' - /'{"a": 1}']
 │         ├── locking: for-update
 │         ├── side-effects
 │         └── key: (1)
 └── filters
      └── b:2 @> '{"a": 1, "c": 2}' [outer=(2)]

# --------------------------------------------------
# AssociateJoin
# --------------------------------------------------

exec-ddl
ALTER TABLE abc INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-05-01 1:00:00.00000+00:00",
    "row_count": 1000,
    "distinct_count": 1000
  }
]'
----

exec-ddl
ALTER TABLE stu INJECT STATISTICS '[
  {
    "columns": ["s"],
    "created_at": "2018-05-01 1:00:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 1000
  }
]'
----

exec-ddl
ALTER TABLE xyz INJECT STATISTICS '[
  {
    "columns": ["x"],
    "created_at": "2018-05-01 1:00:00.00000+00:00",
    "row_count": 1000,
    "distinct_count": 1000
  }
]'
----

# Check that the equality condition abc.a = xyz.x is synthesized.
opt expect=AssociateJoin
SELECT * FROM abc, stu, xyz WHERE abc.a=stu.s AND stu.s=xyz.x
----
inner-join (merge)
 ├── columns: a:1!null b:2 c:3 s:5!null t:6!null u:7!null x:8!null y:9 z:10
 ├── left ordering: +5
 ├── right ordering: +1
 ├── fd: (5)==(1,8), (8)==(1,5), (1)==(5,8)
 ├── scan stu
 │    ├── columns: s:5!null t:6!null u:7!null
 │    ├── key: (5-7)
 │    └── ordering: +5
 ├── inner-join (merge)
 │    ├── columns: a:1!null b:2 c:3 x:8!null y:9 z:10
 │    ├── left ordering: +8
 │    ├── right ordering: +1
 │    ├── fd: (1)==(8), (8)==(1)
 │    ├── ordering: +(1|8) [actual: +8]
 │    ├── scan xyz@xy
 │    │    ├── columns: x:8 y:9 z:10
 │    │    └── ordering: +8
 │    ├── scan abc@ab
 │    │    ├── columns: a:1 b:2 c:3
 │    │    └── ordering: +1
 │    └── filters (true)
 └── filters (true)

memo expect=AssociateJoin
SELECT * FROM abc, stu, xyz WHERE abc.a=stu.s AND stu.s=xyz.x
----
memo (optimized, ~37KB, required=[presentation: a:1,b:2,c:3,s:5,t:6,u:7,x:8,y:9,z:10])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4) (merge-join G2 G3 G5 inner-join,+1,+5) (merge-join G3 G2 G5 inner-join,+5,+1) (lookup-join G3 G5 abc@ab,keyCols=[5],outCols=(1-3,5-10)) (inner-join G6 G7 G8) (inner-join G9 G10 G11) (inner-join G7 G6 G8) (merge-join G6 G7 G5 inner-join,+5,+1) (inner-join G10 G9 G11) (merge-join G9 G10 G5 inner-join,+8,+5) (merge-join G7 G6 G5 inner-join,+1,+5) (lookup-join G7 G5 stu,keyCols=[1],outCols=(1-3,5-10)) (inner-join G9 G12 G13) (merge-join G10 G9 G5 inner-join,+5,+8) (lookup-join G10 G5 xyz@xy,keyCols=[5],outCols=(1-3,5-10)) (inner-join G12 G9 G13) (merge-join G9 G12 G5 inner-join,+8,+1) (merge-join G12 G9 G5 inner-join,+1,+8) (lookup-join G12 G5 xyz@xy,keyCols=[1],outCols=(1-3,5-10))
 │    └── [presentation: a:1,b:2,c:3,s:5,t:6,u:7,x:8,y:9,z:10]
 │         ├── best: (merge-join G6="[ordering: +5]" G7="[ordering: +(1|8)]" G5 inner-join,+5,+1)
 │         └── cost: 12980.08
 ├── G2: (scan abc,cols=(1-3)) (scan abc@ab,cols=(1-3)) (scan abc@bc,cols=(1-3))
 │    ├── [ordering: +1]
 │    │    ├── best: (scan abc@ab,cols=(1-3))
 │    │    └── cost: 1070.02
 │    └── []
 │         ├── best: (scan abc,cols=(1-3))
 │         └── cost: 1070.02
 ├── G3: (inner-join G6 G9 G11) (inner-join G9 G6 G11) (merge-join G6 G9 G5 inner-join,+5,+8) (lookup-join G6 G5 xyz@xy,keyCols=[5],outCols=(5-10)) (merge-join G9 G6 G5 inner-join,+8,+5) (lookup-join G9 G5 stu,keyCols=[8],outCols=(5-10))
 │    ├── [ordering: +(5|8)]
 │    │    ├── best: (merge-join G6="[ordering: +5]" G9="[ordering: +8]" G5 inner-join,+5,+8)
 │    │    └── cost: 11880.05
 │    └── []
 │         ├── best: (merge-join G6="[ordering: +5]" G9="[ordering: +8]" G5 inner-join,+5,+8)
 │         └── cost: 11880.05
 ├── G4: (filters G14)
 ├── G5: (filters)
 ├── G6: (scan stu) (scan stu@uts)
 │    ├── [ordering: +5]
 │    │    ├── best: (scan stu)
 │    │    └── cost: 10600.02
 │    └── []
 │         ├── best: (scan stu)
 │         └── cost: 10600.02
 ├── G7: (inner-join G9 G2 G13) (inner-join G2 G9 G13) (merge-join G9 G2 G5 inner-join,+8,+1) (lookup-join G9 G5 abc@ab,keyCols=[8],outCols=(1-3,8-10)) (merge-join G2 G9 G5 inner-join,+1,+8) (lookup-join G2 G5 xyz@xy,keyCols=[1],outCols=(1-3,8-10))
 │    ├── [ordering: +(1|8)]
 │    │    ├── best: (merge-join G9="[ordering: +8]" G2="[ordering: +1]" G5 inner-join,+8,+1)
 │    │    └── cost: 2170.05
 │    └── []
 │         ├── best: (merge-join G9="[ordering: +8]" G2="[ordering: +1]" G5 inner-join,+8,+1)
 │         └── cost: 2170.05
 ├── G8: (filters G15)
 ├── G9: (scan xyz,cols=(8-10)) (scan xyz@xy,cols=(8-10)) (scan xyz@yz,cols=(8-10))
 │    ├── [ordering: +8]
 │    │    ├── best: (scan xyz@xy,cols=(8-10))
 │    │    └── cost: 1070.02
 │    └── []
 │         ├── best: (scan xyz,cols=(8-10))
 │         └── cost: 1070.02
 ├── G10: (inner-join G6 G2 G4) (inner-join G2 G6 G4) (merge-join G6 G2 G5 inner-join,+5,+1) (lookup-join G6 G5 abc@ab,keyCols=[5],outCols=(1-3,5-7)) (merge-join G2 G6 G5 inner-join,+1,+5) (lookup-join G2 G5 stu,keyCols=[1],outCols=(1-3,5-7))
 │    ├── [ordering: +(1|5)]
 │    │    ├── best: (merge-join G6="[ordering: +5]" G2="[ordering: +1]" G5 inner-join,+5,+1)
 │    │    └── cost: 11880.05
 │    └── []
 │         ├── best: (merge-join G6="[ordering: +5]" G2="[ordering: +1]" G5 inner-join,+5,+1)
 │         └── cost: 11880.05
 ├── G11: (filters G16)
 ├── G12: (inner-join G2 G6 G8) (inner-join G6 G2 G8)
 │    ├── [ordering: +(1|5)]
 │    │    ├── best: (sort G12)
 │    │    └── cost: 14770.10
 │    └── []
 │         ├── best: (inner-join G6 G2 G8)
 │         └── cost: 11912.55
 ├── G13: (filters G17)
 ├── G14: (eq G18 G19)
 ├── G15: (eq G19 G18)
 ├── G16: (eq G19 G20)
 ├── G17: (eq G18 G20)
 ├── G18: (variable a)
 ├── G19: (variable s)
 └── G20: (variable x)

# Regression test for #36226.
exec-ddl
CREATE TABLE parent1 (pid1 INT PRIMARY KEY, pa1 INT)
----

exec-ddl
CREATE TABLE child1 (
  pid1 INT,
  cid1 INT,
  ca1 INT,
  PRIMARY KEY(pid1, cid1)
)
INTERLEAVE IN PARENT parent1 (pid1)
----

exec-ddl
CREATE TABLE grandchild1 (
  pid1 INT,
  cid1 INT,
  gcid1 INT,
  gca1 INT,
  PRIMARY KEY(pid1, cid1, gcid1)
)
INTERLEAVE IN PARENT child1 (pid1, cid1)
----

opt expect=AssociateJoin join-limit=4
SELECT * FROM grandchild1
JOIN child1 USING (pid1, cid1)
JOIN parent1 USING (pid1)
ORDER BY pid1
----
project
 ├── columns: pid1:1!null cid1:2!null gcid1:3!null gca1:4 ca1:7 pa1:9
 ├── key: (1-3)
 ├── fd: (1-3)-->(4), (1,2)-->(7), (1)-->(9)
 ├── ordering: +1
 └── inner-join (lookup parent1)
      ├── columns: grandchild1.pid1:1!null grandchild1.cid1:2!null gcid1:3!null gca1:4 child1.pid1:5!null child1.cid1:6!null ca1:7 parent1.pid1:8!null pa1:9
      ├── key columns: [1] = [8]
      ├── lookup columns are key
      ├── key: (3,6,8)
      ├── fd: (1-3)-->(4), (5,6)-->(7), (1)==(5,8), (5)==(1,8), (2)==(6), (6)==(2), (8)-->(9), (8)==(1,5)
      ├── ordering: +(1|5|8) [actual: +1]
      ├── inner-join (merge)
      │    ├── columns: grandchild1.pid1:1!null grandchild1.cid1:2!null gcid1:3!null gca1:4 child1.pid1:5!null child1.cid1:6!null ca1:7
      │    ├── left ordering: +1,+2
      │    ├── right ordering: +5,+6
      │    ├── key: (3,5,6)
      │    ├── fd: (1-3)-->(4), (5,6)-->(7), (1)==(5), (5)==(1), (2)==(6), (6)==(2)
      │    ├── ordering: +(1|5) [actual: +1]
      │    ├── scan grandchild1
      │    │    ├── columns: grandchild1.pid1:1!null grandchild1.cid1:2!null gcid1:3!null gca1:4
      │    │    ├── key: (1-3)
      │    │    ├── fd: (1-3)-->(4)
      │    │    └── ordering: +1,+2
      │    ├── scan child1
      │    │    ├── columns: child1.pid1:5!null child1.cid1:6!null ca1:7
      │    │    ├── key: (5,6)
      │    │    ├── fd: (5,6)-->(7)
      │    │    └── ordering: +5,+6
      │    └── filters (true)
      └── filters (true)

memo expect=AssociateJoin join-limit=4
SELECT * FROM grandchild1
JOIN child1 USING (pid1, cid1)
JOIN parent1 USING (pid1)
ORDER BY pid1
----
memo (optimized, ~33KB, required=[presentation: pid1:1,cid1:2,gcid1:3,gca1:4,ca1:7,pa1:9] [ordering: +1])
 ├── G1: (project G2 G3 pid1 cid1 gcid1 gca1 ca1 pa1)
 │    ├── [presentation: pid1:1,cid1:2,gcid1:3,gca1:4,ca1:7,pa1:9] [ordering: +1]
 │    │    ├── best: (project G2="[ordering: +(1|5|8)]" G3 pid1 cid1 gcid1 gca1 ca1 pa1)
 │    │    └── cost: 2766.07
 │    └── []
 │         ├── best: (project G2 G3 pid1 cid1 gcid1 gca1 ca1 pa1)
 │         └── cost: 2766.07
 ├── G2: (inner-join G4 G5 G6) (inner-join G5 G4 G6) (merge-join G4 G5 G7 inner-join,+1,+8) (lookup-join G4 G7 parent1,keyCols=[1],outCols=(1-9)) (inner-join G8 G9 G10) (inner-join G11 G12 G10) (merge-join G5 G4 G7 inner-join,+8,+1) (inner-join G9 G8 G10) (merge-join G8 G9 G7 inner-join,+1,+2,+5,+6) (inner-join G12 G11 G10) (merge-join G11 G12 G7 inner-join,+5,+6,+1,+2) (merge-join G9 G8 G7 inner-join,+5,+6,+1,+2) (lookup-join G9 G7 grandchild1,keyCols=[5 6],outCols=(1-9)) (inner-join G11 G12 G13) (inner-join G5 G4 G14) (merge-join G12 G11 G7 inner-join,+1,+2,+5,+6) (lookup-join G12 G7 child1,keyCols=[1 2],outCols=(1-9)) (inner-join G12 G11 G13) (inner-join G4 G5 G14) (merge-join G5 G4 G7 inner-join,+8,+5) (inner-join G5 G15 G6) (merge-join G4 G5 G7 inner-join,+5,+8) (lookup-join G4 G7 parent1,keyCols=[5],outCols=(1-9)) (inner-join G15 G5 G6) (merge-join G5 G15 G7 inner-join,+8,+1) (merge-join G15 G5 G7 inner-join,+1,+8) (lookup-join G15 G7 parent1,keyCols=[1],outCols=(1-9))
 │    ├── [ordering: +(1|5|8)]
 │    │    ├── best: (lookup-join G4="[ordering: +(1|5)]" G7 parent1,keyCols=[1],outCols=(1-9))
 │    │    └── cost: 2765.06
 │    └── []
 │         ├── best: (lookup-join G4 G7 parent1,keyCols=[1],outCols=(1-9))
 │         └── cost: 2765.06
 ├── G3: (projections)
 ├── G4: (inner-join G8 G11 G10) (inner-join G11 G8 G10) (merge-join G8 G11 G7 inner-join,+1,+2,+5,+6) (lookup-join G8 G7 child1,keyCols=[1 2],outCols=(1-7)) (merge-join G11 G8 G7 inner-join,+5,+6,+1,+2) (lookup-join G11 G7 grandchild1,keyCols=[5 6],outCols=(1-7))
 │    ├── [ordering: +(1|5)]
 │    │    ├── best: (merge-join G8="[ordering: +1,+2]" G11="[ordering: +5,+6]" G7 inner-join,+1,+2,+5,+6)
 │    │    └── cost: 2161.05
 │    └── []
 │         ├── best: (merge-join G8="[ordering: +1,+2]" G11="[ordering: +5,+6]" G7 inner-join,+1,+2,+5,+6)
 │         └── cost: 2161.05
 ├── G5: (scan parent1)
 │    ├── [ordering: +8]
 │    │    ├── best: (scan parent1)
 │    │    └── cost: 1040.02
 │    └── []
 │         ├── best: (scan parent1)
 │         └── cost: 1040.02
 ├── G6: (filters G16)
 ├── G7: (filters)
 ├── G8: (scan grandchild1)
 │    ├── [ordering: +1,+2]
 │    │    ├── best: (scan grandchild1)
 │    │    └── cost: 1080.02
 │    ├── [ordering: +1]
 │    │    ├── best: (scan grandchild1)
 │    │    └── cost: 1080.02
 │    └── []
 │         ├── best: (scan grandchild1)
 │         └── cost: 1080.02
 ├── G9: (inner-join G11 G5 G14) (inner-join G5 G11 G14) (merge-join G11 G5 G7 inner-join,+5,+8) (lookup-join G11 G7 parent1,keyCols=[5],outCols=(5-9)) (merge-join G5 G11 G7 inner-join,+8,+5) (lookup-join G5 G7 child1,keyCols=[8],outCols=(5-9))
 │    ├── [ordering: +(5|8),+6]
 │    │    ├── best: (sort G9)
 │    │    └── cost: 2360.34
 │    ├── [ordering: +(5|8)]
 │    │    ├── best: (merge-join G11="[ordering: +5]" G5="[ordering: +8]" G7 inner-join,+5,+8)
 │    │    └── cost: 2130.05
 │    └── []
 │         ├── best: (merge-join G11="[ordering: +5]" G5="[ordering: +8]" G7 inner-join,+5,+8)
 │         └── cost: 2130.05
 ├── G10: (filters G17 G18)
 ├── G11: (scan child1)
 │    ├── [ordering: +5,+6]
 │    │    ├── best: (scan child1)
 │    │    └── cost: 1060.02
 │    ├── [ordering: +5]
 │    │    ├── best: (scan child1)
 │    │    └── cost: 1060.02
 │    └── []
 │         ├── best: (scan child1)
 │         └── cost: 1060.02
 ├── G12: (inner-join G8 G5 G6) (inner-join G5 G8 G6) (merge-join G8 G5 G7 inner-join,+1,+8) (lookup-join G8 G7 parent1,keyCols=[1],outCols=(1-4,8,9)) (merge-join G5 G8 G7 inner-join,+8,+1) (lookup-join G5 G7 grandchild1,keyCols=[8],outCols=(1-4,8,9))
 │    ├── [ordering: +(1|8),+2]
 │    │    ├── best: (sort G12)
 │    │    └── cost: 2380.34
 │    ├── [ordering: +(1|8)]
 │    │    ├── best: (merge-join G8="[ordering: +1]" G5="[ordering: +8]" G7 inner-join,+1,+8)
 │    │    └── cost: 2150.05
 │    └── []
 │         ├── best: (merge-join G8="[ordering: +1]" G5="[ordering: +8]" G7 inner-join,+1,+8)
 │         └── cost: 2150.05
 ├── G13: (filters G18 G19)
 ├── G14: (filters G20)
 ├── G15: (inner-join G8 G11 G13) (inner-join G11 G8 G13)
 │    ├── [ordering: +(1|5)]
 │    │    ├── best: (sort G15)
 │    │    └── cost: 2186.35
 │    └── []
 │         ├── best: (inner-join G8 G11 G13)
 │         └── cost: 2171.05
 ├── G16: (eq G21 G22)
 ├── G17: (eq G21 G23)
 ├── G18: (eq G24 G25)
 ├── G19: (eq G23 G21)
 ├── G20: (eq G23 G22)
 ├── G21: (variable grandchild1.pid1)
 ├── G22: (variable parent1.pid1)
 ├── G23: (variable child1.pid1)
 ├── G24: (variable grandchild1.cid1)
 └── G25: (variable child1.cid1)
