exec-ddl
CREATE TABLE abc
(
    a INT,
    b INT,
    c INT,
    INDEX ab (a,b) STORING (c),
    INDEX bc (b,c) STORING (a)
)
----
TABLE abc
 ├── a int
 ├── b int
 ├── c int
 ├── rowid int not null (hidden)
 ├── INDEX primary
 │    └── rowid int not null (hidden)
 ├── INDEX ab
 │    ├── a int
 │    ├── b int
 │    ├── rowid int not null (hidden)
 │    └── c int (storing)
 └── INDEX bc
      ├── b int
      ├── c int
      ├── rowid int not null (hidden)
      └── a int (storing)

exec-ddl
CREATE TABLE stu
(
    s INT,
    t INT,
    u INT,
    PRIMARY KEY (s,t,u),
    INDEX uts (u,t,s)
)
----
TABLE stu
 ├── s int not null
 ├── t int not null
 ├── u int not null
 ├── INDEX primary
 │    ├── s int not null
 │    ├── t int not null
 │    └── u int not null
 └── INDEX uts
      ├── u int not null
      ├── t int not null
      └── s int not null

exec-ddl
CREATE TABLE xyz
(
    x INT,
    y INT,
    z INT,
    INDEX xy (x,y) STORING (z),
    INDEX yz (y,z) STORING (x)
)
----
TABLE xyz
 ├── x int
 ├── y int
 ├── z int
 ├── rowid int not null (hidden)
 ├── INDEX primary
 │    └── rowid int not null (hidden)
 ├── INDEX xy
 │    ├── x int
 │    ├── y int
 │    ├── rowid int not null (hidden)
 │    └── z int (storing)
 └── INDEX yz
      ├── y int
      ├── z int
      ├── rowid int not null (hidden)
      └── x int (storing)


# --------------------------------------------------
# GenerateMergeJoins
# --------------------------------------------------

opt
SELECT * FROM abc JOIN xyz ON a=x
----
inner-join (merge)
 ├── columns: a:1(int!null) b:2(int) c:3(int) x:5(int!null) y:6(int) z:7(int)
 ├── fd: (1)==(5), (5)==(1)
 ├── scan abc@ab
 │    ├── columns: a:1(int) b:2(int) c:3(int)
 │    └── ordering: +1
 ├── scan xyz@xy
 │    ├── columns: x:5(int) y:6(int) z:7(int)
 │    └── ordering: +5
 └── merge-on
      ├── left ordering: +1
      ├── right ordering: +5
      └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ]), fd=(1)==(5), (5)==(1)]
           └── abc.a = xyz.x [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]

memo
SELECT * FROM abc JOIN xyz ON a=x
----
memo (optimized)
 ├── G1: (inner-join G2 G3 G5) (merge-join G2 G3 G4)
 │    └── "[presentation: a:1,b:2,c:3,x:5,y:6,z:7]"
 │         ├── best: (merge-join G2="[ordering: +1]" G3="[ordering: +5]" G4)
 │         └── cost: 3160.00
 ├── G2: (scan abc,cols=(1-3)) (scan abc@ab,cols=(1-3)) (scan abc@bc,cols=(1-3))
 │    ├── ""
 │    │    ├── best: (scan abc,cols=(1-3))
 │    │    └── cost: 1070.00
 │    └── "[ordering: +1]"
 │         ├── best: (scan abc@ab,cols=(1-3))
 │         └── cost: 1070.00
 ├── G3: (scan xyz,cols=(5-7)) (scan xyz@xy,cols=(5-7)) (scan xyz@yz,cols=(5-7))
 │    ├── ""
 │    │    ├── best: (scan xyz,cols=(5-7))
 │    │    └── cost: 1070.00
 │    └── "[ordering: +5]"
 │         ├── best: (scan xyz@xy,cols=(5-7))
 │         └── cost: 1070.00
 ├── G4: (merge-on G5 inner-join,+1,+5)
 ├── G5: (filters G6)
 ├── G6: (eq G7 G8)
 ├── G7: (variable abc.a)
 └── G8: (variable xyz.x)

opt
SELECT * FROM abc JOIN xyz ON x=a
----
inner-join (merge)
 ├── columns: a:1(int!null) b:2(int) c:3(int) x:5(int!null) y:6(int) z:7(int)
 ├── fd: (5)==(1), (1)==(5)
 ├── scan abc@ab
 │    ├── columns: a:1(int) b:2(int) c:3(int)
 │    └── ordering: +1
 ├── scan xyz@xy
 │    ├── columns: x:5(int) y:6(int) z:7(int)
 │    └── ordering: +5
 └── merge-on
      ├── left ordering: +1
      ├── right ordering: +5
      └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ]), fd=(5)==(1), (1)==(5)]
           └── xyz.x = abc.a [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]

opt
SELECT * FROM abc JOIN xyz ON a=x AND a=x AND x=a
----
inner-join (merge)
 ├── columns: a:1(int!null) b:2(int) c:3(int) x:5(int!null) y:6(int) z:7(int)
 ├── fd: (1)==(5), (5)==(1)
 ├── scan abc@ab
 │    ├── columns: a:1(int) b:2(int) c:3(int)
 │    └── ordering: +1
 ├── scan xyz@xy
 │    ├── columns: x:5(int) y:6(int) z:7(int)
 │    └── ordering: +5
 └── merge-on
      ├── left ordering: +1
      ├── right ordering: +5
      └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ]), fd=(1)==(5), (5)==(1)]
           ├── abc.a = xyz.x [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
           ├── abc.a = xyz.x [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
           └── xyz.x = abc.a [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]

# Use constraints to force the choice of an index which doesn't help, and
# verify that we don't prefer a merge-join that has to sort both of its inputs.
opt
SELECT * FROM abc JOIN xyz ON a=x AND b=y WHERE b=1 AND y=1
----
inner-join
 ├── columns: a:1(int!null) b:2(int!null) c:3(int) x:5(int!null) y:6(int!null) z:7(int)
 ├── fd: ()-->(2), ()-->(6), (1)==(5), (5)==(1), (2)==(6), (6)==(2)
 ├── scan abc@bc
 │    ├── columns: a:1(int) b:2(int!null) c:3(int)
 │    ├── constraint: /2/3/4: [/1 - /1]
 │    └── fd: ()-->(2)
 ├── scan xyz@yz
 │    ├── columns: x:5(int) y:6(int!null) z:7(int)
 │    ├── constraint: /6/7/8: [/1 - /1]
 │    └── fd: ()-->(6)
 └── filters [type=bool, outer=(1,2,5,6), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /5: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(5), (5)==(1), (2)==(6), (6)==(2)]
      ├── abc.a = xyz.x [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      └── abc.b = xyz.y [type=bool, outer=(2,6), constraints=(/2: (/NULL - ]; /6: (/NULL - ])]

# Verify case where we generate multiple merge-joins.
memo
SELECT * FROM stu AS l JOIN stu AS r ON (l.s, l.t, l.u) = (r.s, r.t, r.u)
----
memo (optimized)
 ├── G1: (inner-join G3 G4 G6) (merge-join G3 G4 G2) (merge-join G3 G4 G5)
 │    └── "[presentation: s:1,t:2,u:3,s:4,t:5,u:6]"
 │         ├── best: (merge-join G3="[ordering: +1,+2,+3]" G4="[ordering: +4,+5,+6]" G2)
 │         └── cost: 3140.00
 ├── G2: (merge-on G6 inner-join,+1,+2,+3,+4,+5,+6)
 ├── G3: (scan stu) (scan stu@uts)
 │    ├── ""
 │    │    ├── best: (scan stu)
 │    │    └── cost: 1060.00
 │    ├── "[ordering: +1,+2,+3]"
 │    │    ├── best: (scan stu)
 │    │    └── cost: 1060.00
 │    └── "[ordering: +3,+2,+1]"
 │         ├── best: (scan stu@uts)
 │         └── cost: 1060.00
 ├── G4: (scan stu) (scan stu@uts)
 │    ├── ""
 │    │    ├── best: (scan stu)
 │    │    └── cost: 1060.00
 │    ├── "[ordering: +4,+5,+6]"
 │    │    ├── best: (scan stu)
 │    │    └── cost: 1060.00
 │    └── "[ordering: +6,+5,+4]"
 │         ├── best: (scan stu@uts)
 │         └── cost: 1060.00
 ├── G5: (merge-on G6 inner-join,+3,+2,+1,+6,+5,+4)
 ├── G6: (filters G7 G8 G9)
 ├── G7: (eq G10 G11)
 ├── G8: (eq G12 G13)
 ├── G9: (eq G14 G15)
 ├── G10: (variable stu.s)
 ├── G11: (variable stu.s)
 ├── G12: (variable stu.t)
 ├── G13: (variable stu.t)
 ├── G14: (variable stu.u)
 └── G15: (variable stu.u)

# Add statistics to make table stu large (so that sorting abc is relatively cheap).
exec-ddl
ALTER TABLE stu INJECT STATISTICS '[
  {
    "columns": ["s"],
    "created_at": "2018-05-01 1:00:00.00000+00:00",
    "row_count": 1000000,
    "distinct_count": 1000000
  }
]'
----

# The ordering is coming from the left side.
opt
SELECT * FROM stu, abc WHERE (c,b,a) = (s,t,u)
----
inner-join (merge)
 ├── columns: s:1(int!null) t:2(int!null) u:3(int!null) a:4(int!null) b:5(int!null) c:6(int!null)
 ├── fd: (6)==(1), (1)==(6), (5)==(2), (2)==(5), (4)==(3), (3)==(4)
 ├── scan stu
 │    ├── columns: s:1(int!null) t:2(int!null) u:3(int!null)
 │    ├── key: (1-3)
 │    └── ordering: +1,+2,+3
 ├── sort
 │    ├── columns: a:4(int) b:5(int) c:6(int)
 │    ├── ordering: +6,+5,+4
 │    └── scan abc
 │         └── columns: a:4(int) b:5(int) c:6(int)
 └── merge-on
      ├── left ordering: +1,+2,+3
      ├── right ordering: +6,+5,+4
      └── filters [type=bool, outer=(1-6), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /3: (/NULL - ]; /4: (/NULL - ]; /5: (/NULL - ]; /6: (/NULL - ]), fd=(6)==(1), (1)==(6), (5)==(2), (2)==(5), (4)==(3), (3)==(4)]
           ├── abc.c = stu.s [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
           ├── abc.b = stu.t [type=bool, outer=(2,5), constraints=(/2: (/NULL - ]; /5: (/NULL - ])]
           └── abc.a = stu.u [type=bool, outer=(3,4), constraints=(/3: (/NULL - ]; /4: (/NULL - ])]

# The ordering is coming from the right side.
opt
SELECT * FROM abc, stu WHERE (c,b,a) = (s,t,u)
----
inner-join (merge)
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) s:5(int!null) t:6(int!null) u:7(int!null)
 ├── fd: (3)==(5), (5)==(3), (2)==(6), (6)==(2), (1)==(7), (7)==(1)
 ├── sort
 │    ├── columns: a:1(int) b:2(int) c:3(int)
 │    ├── ordering: +3,+2,+1
 │    └── scan abc
 │         └── columns: a:1(int) b:2(int) c:3(int)
 ├── scan stu
 │    ├── columns: s:5(int!null) t:6(int!null) u:7(int!null)
 │    ├── key: (5-7)
 │    └── ordering: +5,+6,+7
 └── merge-on
      ├── left ordering: +3,+2,+1
      ├── right ordering: +5,+6,+7
      └── filters [type=bool, outer=(1-3,5-7), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /3: (/NULL - ]; /5: (/NULL - ]; /6: (/NULL - ]; /7: (/NULL - ]), fd=(3)==(5), (5)==(3), (2)==(6), (6)==(2), (1)==(7), (7)==(1)]
           ├── abc.c = stu.s [type=bool, outer=(3,5), constraints=(/3: (/NULL - ]; /5: (/NULL - ])]
           ├── abc.b = stu.t [type=bool, outer=(2,6), constraints=(/2: (/NULL - ]; /6: (/NULL - ])]
           └── abc.a = stu.u [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]

# In these cases, we shouldn't pick up equivalencies.
memo
SELECT * FROM abc JOIN xyz ON a=b
----
memo (optimized)
 ├── G1: (inner-join G2 G3 G4)
 │    └── "[presentation: a:1,b:2,c:3,x:5,y:6,z:7]"
 │         ├── best: (inner-join G2 G3 G4)
 │         └── cost: 2557.78
 ├── G2: (select G5 G8) (select G6 G8) (select G7 G8)
 │    └── ""
 │         ├── best: (select G6 G8)
 │         └── cost: 360.00
 ├── G3: (scan xyz,cols=(5-7)) (scan xyz@xy,cols=(5-7)) (scan xyz@yz,cols=(5-7))
 │    └── ""
 │         ├── best: (scan xyz,cols=(5-7))
 │         └── cost: 1070.00
 ├── G4: (true)
 ├── G5: (scan abc,cols=(1-3)) (scan abc@ab,cols=(1-3)) (scan abc@bc,cols=(1-3))
 │    └── ""
 │         ├── best: (scan abc,cols=(1-3))
 │         └── cost: 1070.00
 ├── G6: (scan abc@ab,cols=(1-3),constrained)
 │    └── ""
 │         ├── best: (scan abc@ab,cols=(1-3),constrained)
 │         └── cost: 356.67
 ├── G7: (scan abc@bc,cols=(1-3),constrained)
 │    └── ""
 │         ├── best: (scan abc@bc,cols=(1-3),constrained)
 │         └── cost: 356.67
 ├── G8: (filters G9)
 ├── G9: (eq G10 G11)
 ├── G10: (variable abc.a)
 └── G11: (variable abc.b)

exec-ddl
CREATE TABLE kfloat (k FLOAT PRIMARY KEY)
----
TABLE kfloat
 ├── k float not null
 └── INDEX primary
      └── k float not null

memo
SELECT * FROM abc JOIN kfloat ON a=k
----
memo (optimized)
 ├── G1: (inner-join G2 G3 G4)
 │    └── "[presentation: a:1,b:2,c:3,k:5]"
 │         ├── best: (inner-join G2 G3 G4)
 │         └── cost: 3120.00
 ├── G2: (scan abc,cols=(1-3)) (scan abc@ab,cols=(1-3)) (scan abc@bc,cols=(1-3))
 │    └── ""
 │         ├── best: (scan abc,cols=(1-3))
 │         └── cost: 1070.00
 ├── G3: (scan kfloat)
 │    └── ""
 │         ├── best: (scan kfloat)
 │         └── cost: 1020.00
 ├── G4: (filters G5)
 ├── G5: (eq G6 G7)
 ├── G6: (variable abc.a)
 └── G7: (variable kfloat.k)

# We should only pick up one equivalency
opt
SELECT * FROM abc JOIN xyz ON a=x AND a=y
----
inner-join (merge)
 ├── columns: a:1(int!null) b:2(int) c:3(int) x:5(int!null) y:6(int!null) z:7(int)
 ├── fd: (1)==(5,6), (5)==(1), (6)==(1)
 ├── scan abc@ab
 │    ├── columns: a:1(int) b:2(int) c:3(int)
 │    └── ordering: +1
 ├── scan xyz@xy
 │    ├── columns: x:5(int) y:6(int) z:7(int)
 │    └── ordering: +5
 └── merge-on
      ├── left ordering: +1
      ├── right ordering: +5
      └── filters [type=bool, outer=(1,5,6), constraints=(/1: (/NULL - ]; /5: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(5,6), (5)==(1), (6)==(1)]
           ├── abc.a = xyz.x [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
           └── abc.a = xyz.y [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
