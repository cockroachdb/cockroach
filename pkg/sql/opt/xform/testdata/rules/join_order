exec-ddl
CREATE TABLE bx (
  b INT PRIMARY KEY,
  x INT
)
----

exec-ddl
CREATE TABLE cy (
  c INT PRIMARY KEY,
  y INT
)
----

exec-ddl
CREATE TABLE dz (
  d INT PRIMARY KEY,
  z INT
)
----

exec-ddl
CREATE TABLE abc (
  a INT PRIMARY KEY,
  b INT,
  c INT,
  d INT
)
----

opt join-limit=3
SELECT * FROM abc, bx, cy WHERE a = 1 AND abc.b = bx.b AND abc.c = cy.c
----
inner-join (lookup cy)
 ├── columns: a:1!null b:2!null c:3!null d:4 b:5!null x:6 c:7!null y:8
 ├── key columns: [3] = [7]
 ├── lookup columns are key
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-8)
 ├── inner-join (lookup bx)
 │    ├── columns: a:1!null abc.b:2!null abc.c:3 d:4 bx.b:5!null x:6
 │    ├── key columns: [2] = [5]
 │    ├── lookup columns are key
 │    ├── cardinality: [0 - 1]
 │    ├── key: ()
 │    ├── fd: ()-->(1-6)
 │    ├── scan abc
 │    │    ├── columns: a:1!null abc.b:2 abc.c:3 d:4
 │    │    ├── constraint: /1: [/1 - /1]
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── key: ()
 │    │    └── fd: ()-->(1-4)
 │    └── filters (true)
 └── filters (true)

opt join-limit=3
SELECT * FROM bx, abc, cy WHERE a = 1 AND abc.b = bx.b AND abc.c = cy.c
----
inner-join (lookup bx)
 ├── columns: b:1!null x:2 a:3!null b:4!null c:5!null d:6 c:7!null y:8
 ├── key columns: [4] = [1]
 ├── lookup columns are key
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-8)
 ├── inner-join (lookup cy)
 │    ├── columns: a:3!null abc.b:4 abc.c:5!null d:6 cy.c:7!null y:8
 │    ├── key columns: [5] = [7]
 │    ├── lookup columns are key
 │    ├── cardinality: [0 - 1]
 │    ├── key: ()
 │    ├── fd: ()-->(3-8)
 │    ├── scan abc
 │    │    ├── columns: a:3!null abc.b:4 abc.c:5 d:6
 │    │    ├── constraint: /3: [/1 - /1]
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── key: ()
 │    │    └── fd: ()-->(3-6)
 │    └── filters (true)
 └── filters (true)

opt join-limit=3
SELECT * FROM bx, cy, abc WHERE a = 1 AND abc.b = bx.b AND abc.c = cy.c
----
inner-join (lookup bx)
 ├── columns: b:1!null x:2 c:3!null y:4 a:5!null b:6!null c:7!null d:8
 ├── key columns: [6] = [1]
 ├── lookup columns are key
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-8)
 ├── inner-join (lookup cy)
 │    ├── columns: cy.c:3!null y:4 a:5!null abc.b:6 abc.c:7!null d:8
 │    ├── key columns: [7] = [3]
 │    ├── lookup columns are key
 │    ├── cardinality: [0 - 1]
 │    ├── key: ()
 │    ├── fd: ()-->(3-8)
 │    ├── scan abc
 │    │    ├── columns: a:5!null abc.b:6 abc.c:7 d:8
 │    │    ├── constraint: /5: [/1 - /1]
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── key: ()
 │    │    └── fd: ()-->(5-8)
 │    └── filters (true)
 └── filters (true)

opt join-limit=2 expect-not=AssociateJoin
SELECT * FROM bx, cy, abc WHERE a = 1 AND abc.b = bx.b AND abc.c = cy.c
----
inner-join (lookup bx)
 ├── columns: b:1!null x:2 c:3!null y:4 a:5!null b:6!null c:7!null d:8
 ├── key columns: [6] = [1]
 ├── lookup columns are key
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-8)
 ├── inner-join (lookup cy)
 │    ├── columns: cy.c:3!null y:4 a:5!null abc.b:6 abc.c:7!null d:8
 │    ├── key columns: [7] = [3]
 │    ├── lookup columns are key
 │    ├── cardinality: [0 - 1]
 │    ├── key: ()
 │    ├── fd: ()-->(3-8)
 │    ├── scan abc
 │    │    ├── columns: a:5!null abc.b:6 abc.c:7 d:8
 │    │    ├── constraint: /5: [/1 - /1]
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── key: ()
 │    │    └── fd: ()-->(5-8)
 │    └── filters (true)
 └── filters (true)

memo join-limit=3
SELECT * FROM bx, cy, abc WHERE a = 1 AND abc.b = bx.b AND abc.c = cy.c
----
memo (optimized, ~32KB, required=[presentation: b:1,x:2,c:3,y:4,a:5,b:6,c:7,d:8])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4) (merge-join G2 G3 G5 inner-join,+1,+6) (lookup-join G3 G5 bx,keyCols=[6],outCols=(1-8)) (inner-join G6 G7 G8) (inner-join G9 G10 G11) (inner-join G7 G6 G8) (merge-join G6 G7 G5 inner-join,+3,+7) (inner-join G10 G9 G11) (lookup-join G7 G5 cy,keyCols=[7],outCols=(1-8)) (lookup-join G12 G11 abc,keyCols=[11],outCols=(1-8))
 │    └── [presentation: b:1,x:2,c:3,y:4,a:5,b:6,c:7,d:8]
 │         ├── best: (lookup-join G3 G5 bx,keyCols=[6],outCols=(1-8))
 │         └── cost: 13.11
 ├── G2: (scan bx)
 │    ├── [ordering: +1]
 │    │    ├── best: (scan bx)
 │    │    └── cost: 1040.02
 │    └── []
 │         ├── best: (scan bx)
 │         └── cost: 1040.02
 ├── G3: (inner-join G6 G9 G8) (inner-join G9 G6 G8) (merge-join G6 G9 G5 inner-join,+3,+7) (lookup-join G13 G8 abc,keyCols=[9],outCols=(3-8)) (lookup-join G9 G5 cy,keyCols=[7],outCols=(3-8))
 │    └── []
 │         ├── best: (lookup-join G9 G5 cy,keyCols=[7],outCols=(3-8))
 │         └── cost: 7.12
 ├── G4: (filters G14)
 ├── G5: (filters)
 ├── G6: (scan cy)
 │    ├── [ordering: +3]
 │    │    ├── best: (scan cy)
 │    │    └── cost: 1040.02
 │    └── []
 │         ├── best: (scan cy)
 │         └── cost: 1040.02
 ├── G7: (inner-join G9 G2 G4) (inner-join G2 G9 G4) (lookup-join G9 G5 bx,keyCols=[6],outCols=(1,2,5-8)) (merge-join G2 G9 G5 inner-join,+1,+6) (lookup-join G15 G4 abc,keyCols=[10],outCols=(1,2,5-8))
 │    └── []
 │         ├── best: (lookup-join G9 G5 bx,keyCols=[6],outCols=(1,2,5-8))
 │         └── cost: 7.12
 ├── G8: (filters G16)
 ├── G9: (select G17 G18) (scan abc,constrained)
 │    └── []
 │         ├── best: (scan abc,constrained)
 │         └── cost: 1.09
 ├── G10: (inner-join G6 G2 G5) (inner-join G2 G6 G5)
 │    └── []
 │         ├── best: (inner-join G6 G2 G5)
 │         └── cost: 12110.05
 ├── G11: (filters G14 G16)
 ├── G12: (project G10 G19 b x c y)
 │    └── []
 │         ├── best: (project G10 G19 b x c y)
 │         └── cost: 32110.06
 ├── G13: (project G6 G19 c y)
 │    └── []
 │         ├── best: (project G6 G19 c y)
 │         └── cost: 1060.03
 ├── G14: (eq G20 G21)
 ├── G15: (project G2 G19 b x)
 │    └── []
 │         ├── best: (project G2 G19 b x)
 │         └── cost: 1060.03
 ├── G16: (eq G22 G23)
 ├── G17: (scan abc)
 │    └── []
 │         ├── best: (scan abc)
 │         └── cost: 1080.02
 ├── G18: (filters G24)
 ├── G19: (projections G25)
 ├── G20: (variable abc.b)
 ├── G21: (variable bx.b)
 ├── G22: (variable abc.c)
 ├── G23: (variable cy.c)
 ├── G24: (eq G26 G25)
 ├── G25: (const 1)
 └── G26: (variable a)

opt join-limit=4
SELECT * FROM bx, cy, dz, abc WHERE a = 1
----
inner-join (cross)
 ├── columns: b:1!null x:2 c:3!null y:4 d:5!null z:6 a:7!null b:8 c:9 d:10
 ├── key: (1,3,5)
 ├── fd: ()-->(7-10), (1)-->(2), (3)-->(4), (5)-->(6)
 ├── inner-join (cross)
 │    ├── columns: cy.c:3!null y:4 dz.d:5!null z:6 a:7!null abc.b:8 abc.c:9 abc.d:10
 │    ├── key: (3,5)
 │    ├── fd: ()-->(7-10), (3)-->(4), (5)-->(6)
 │    ├── scan cy
 │    │    ├── columns: cy.c:3!null y:4
 │    │    ├── key: (3)
 │    │    └── fd: (3)-->(4)
 │    ├── inner-join (cross)
 │    │    ├── columns: dz.d:5!null z:6 a:7!null abc.b:8 abc.c:9 abc.d:10
 │    │    ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │    │    ├── key: (5)
 │    │    ├── fd: ()-->(7-10), (5)-->(6)
 │    │    ├── scan dz
 │    │    │    ├── columns: dz.d:5!null z:6
 │    │    │    ├── key: (5)
 │    │    │    └── fd: (5)-->(6)
 │    │    ├── scan abc
 │    │    │    ├── columns: a:7!null abc.b:8 abc.c:9 abc.d:10
 │    │    │    ├── constraint: /7: [/1 - /1]
 │    │    │    ├── cardinality: [0 - 1]
 │    │    │    ├── key: ()
 │    │    │    └── fd: ()-->(7-10)
 │    │    └── filters (true)
 │    └── filters (true)
 ├── scan bx
 │    ├── columns: bx.b:1!null x:2
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── filters (true)

opt join-limit=3 format=show-all
SELECT * FROM abc, bx, cy, dz WHERE a = 1
----
inner-join (cross)
 ├── columns: a:1(int!null) b:2(int) c:3(int) d:4(int) b:5(int!null) x:6(int) c:7(int!null) y:8(int) d:9(int!null) z:10(int)
 ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 ├── stats: [rows=1e+09]
 ├── cost: 32525668.7
 ├── key: (5,7,9)
 ├── fd: ()-->(1-4), (5)-->(6), (7)-->(8), (9)-->(10)
 ├── prune: (2-10)
 ├── interesting orderings: (+7) (+9) (+5) (+1)
 ├── inner-join (cross)
 │    ├── columns: t.public.bx.b:5(int!null) t.public.bx.x:6(int) t.public.cy.c:7(int!null) t.public.cy.y:8(int) t.public.dz.d:9(int!null) t.public.dz.z:10(int)
 │    ├── stats: [rows=1e+09]
 │    ├── cost: 10025667.6
 │    ├── key: (5,7,9)
 │    ├── fd: (5)-->(6), (7)-->(8), (9)-->(10)
 │    ├── prune: (5-10)
 │    ├── interesting orderings: (+7) (+9) (+5)
 │    ├── join-size: 3
 │    ├── inner-join (cross)
 │    │    ├── columns: t.public.cy.c:7(int!null) t.public.cy.y:8(int) t.public.dz.d:9(int!null) t.public.dz.z:10(int)
 │    │    ├── stats: [rows=1000000]
 │    │    ├── cost: 12110.05
 │    │    ├── key: (7,9)
 │    │    ├── fd: (7)-->(8), (9)-->(10)
 │    │    ├── prune: (7-10)
 │    │    ├── interesting orderings: (+7) (+9)
 │    │    ├── join-size: 2
 │    │    ├── scan t.public.cy
 │    │    │    ├── columns: t.public.cy.c:7(int!null) t.public.cy.y:8(int)
 │    │    │    ├── stats: [rows=1000]
 │    │    │    ├── cost: 1040.02
 │    │    │    ├── key: (7)
 │    │    │    ├── fd: (7)-->(8)
 │    │    │    ├── prune: (7,8)
 │    │    │    ├── interesting orderings: (+7)
 │    │    │    └── unfiltered-cols: (7,8)
 │    │    ├── scan t.public.dz
 │    │    │    ├── columns: t.public.dz.d:9(int!null) t.public.dz.z:10(int)
 │    │    │    ├── stats: [rows=1000]
 │    │    │    ├── cost: 1040.02
 │    │    │    ├── key: (9)
 │    │    │    ├── fd: (9)-->(10)
 │    │    │    ├── prune: (9,10)
 │    │    │    ├── interesting orderings: (+9)
 │    │    │    └── unfiltered-cols: (9,10)
 │    │    └── filters (true)
 │    ├── scan t.public.bx
 │    │    ├── columns: t.public.bx.b:5(int!null) t.public.bx.x:6(int)
 │    │    ├── stats: [rows=1000]
 │    │    ├── cost: 1040.02
 │    │    ├── key: (5)
 │    │    ├── fd: (5)-->(6)
 │    │    ├── prune: (5,6)
 │    │    ├── interesting orderings: (+5)
 │    │    └── unfiltered-cols: (5,6)
 │    └── filters (true)
 ├── scan t.public.abc
 │    ├── columns: t.public.abc.a:1(int!null) t.public.abc.b:2(int) t.public.abc.c:3(int) t.public.abc.d:4(int)
 │    ├── constraint: /1: [/1 - /1]
 │    ├── cardinality: [0 - 1]
 │    ├── stats: [rows=1, distinct(1)=1, null(1)=0]
 │    ├── cost: 1.09
 │    ├── key: ()
 │    ├── fd: ()-->(1-4)
 │    ├── prune: (2-4)
 │    └── interesting orderings: (+1)
 └── filters (true)

# Note the difference in memo size for with and without reorder-joins, for only four tables.
# TODO(justin): Find a way to reduce this.

memo join-limit=1
SELECT * FROM bx, cy, dz, abc WHERE a = 1
----
memo (optimized, ~12KB, required=[presentation: b:1,x:2,c:3,y:4,d:5,z:6,a:7,b:8,c:9,d:10])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4)
 │    └── [presentation: b:1,x:2,c:3,y:4,d:5,z:6,a:7,b:8,c:9,d:10]
 │         ├── best: (inner-join G3 G2 G4)
 │         └── cost: 10025691.20
 ├── G2: (scan bx)
 │    └── []
 │         ├── best: (scan bx)
 │         └── cost: 1040.02
 ├── G3: (inner-join G5 G6 G4) (inner-join G6 G5 G4)
 │    └── []
 │         ├── best: (inner-join G5 G6 G4)
 │         └── cost: 12133.67
 ├── G4: (filters)
 ├── G5: (scan cy)
 │    └── []
 │         ├── best: (scan cy)
 │         └── cost: 1040.02
 ├── G6: (inner-join G7 G8 G4) (inner-join G8 G7 G4)
 │    └── []
 │         ├── best: (inner-join G7 G8 G4)
 │         └── cost: 1063.64
 ├── G7: (scan dz)
 │    └── []
 │         ├── best: (scan dz)
 │         └── cost: 1040.02
 ├── G8: (select G9 G10) (scan abc,constrained)
 │    └── []
 │         ├── best: (scan abc,constrained)
 │         └── cost: 1.09
 ├── G9: (scan abc)
 │    └── []
 │         ├── best: (scan abc)
 │         └── cost: 1080.02
 ├── G10: (filters G11)
 ├── G11: (eq G12 G13)
 ├── G12: (variable a)
 └── G13: (const 1)

memo join-limit=4
SELECT * FROM bx, cy, dz, abc WHERE a = 1
----
memo (optimized, ~28KB, required=[presentation: b:1,x:2,c:3,y:4,d:5,z:6,a:7,b:8,c:9,d:10])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4) (inner-join G5 G6 G4) (inner-join G7 G8 G4) (inner-join G9 G10 G4) (inner-join G11 G12 G4) (inner-join G13 G14 G4) (inner-join G15 G16 G4) (inner-join G6 G5 G4) (inner-join G8 G7 G4) (inner-join G10 G9 G4) (inner-join G12 G11 G4) (inner-join G14 G13 G4) (inner-join G16 G15 G4)
 │    └── [presentation: b:1,x:2,c:3,y:4,d:5,z:6,a:7,b:8,c:9,d:10]
 │         ├── best: (inner-join G3 G2 G4)
 │         └── cost: 10025691.20
 ├── G2: (scan bx)
 │    └── []
 │         ├── best: (scan bx)
 │         └── cost: 1040.02
 ├── G3: (inner-join G5 G7 G4) (inner-join G7 G5 G4) (inner-join G9 G13 G4) (inner-join G11 G15 G4) (inner-join G13 G9 G4) (inner-join G15 G11 G4)
 │    └── []
 │         ├── best: (inner-join G5 G7 G4)
 │         └── cost: 12133.67
 ├── G4: (filters)
 ├── G5: (scan cy)
 │    └── []
 │         ├── best: (scan cy)
 │         └── cost: 1040.02
 ├── G6: (inner-join G7 G2 G4) (inner-join G2 G7 G4) (inner-join G9 G16 G4) (inner-join G11 G14 G4) (inner-join G16 G9 G4) (inner-join G14 G11 G4)
 │    └── []
 │         ├── best: (inner-join G7 G2 G4)
 │         └── cost: 12133.67
 ├── G7: (inner-join G9 G11 G4) (inner-join G11 G9 G4)
 │    └── []
 │         ├── best: (inner-join G9 G11 G4)
 │         └── cost: 1063.64
 ├── G8: (inner-join G5 G2 G4) (inner-join G2 G5 G4)
 │    └── []
 │         ├── best: (inner-join G5 G2 G4)
 │         └── cost: 12110.05
 ├── G9: (scan dz)
 │    └── []
 │         ├── best: (scan dz)
 │         └── cost: 1040.02
 ├── G10: (inner-join G13 G2 G4) (inner-join G2 G13 G4) (inner-join G11 G8 G4) (inner-join G5 G16 G4) (inner-join G8 G11 G4) (inner-join G16 G5 G4)
 │    └── []
 │         ├── best: (inner-join G13 G2 G4)
 │         └── cost: 12133.67
 ├── G11: (select G17 G18) (scan abc,constrained)
 │    └── []
 │         ├── best: (scan abc,constrained)
 │         └── cost: 1.09
 ├── G12: (inner-join G15 G2 G4) (inner-join G2 G15 G4) (inner-join G9 G8 G4) (inner-join G5 G14 G4) (inner-join G8 G9 G4) (inner-join G14 G5 G4)
 │    └── []
 │         ├── best: (inner-join G15 G2 G4)
 │         └── cost: 10025667.58
 ├── G13: (inner-join G11 G5 G4) (inner-join G5 G11 G4)
 │    └── []
 │         ├── best: (inner-join G5 G11 G4)
 │         └── cost: 1063.64
 ├── G14: (inner-join G9 G2 G4) (inner-join G2 G9 G4)
 │    └── []
 │         ├── best: (inner-join G9 G2 G4)
 │         └── cost: 12110.05
 ├── G15: (inner-join G9 G5 G4) (inner-join G5 G9 G4)
 │    └── []
 │         ├── best: (inner-join G9 G5 G4)
 │         └── cost: 12110.05
 ├── G16: (inner-join G11 G2 G4) (inner-join G2 G11 G4)
 │    └── []
 │         ├── best: (inner-join G2 G11 G4)
 │         └── cost: 1063.64
 ├── G17: (scan abc)
 │    └── []
 │         ├── best: (scan abc)
 │         └── cost: 1080.02
 ├── G18: (filters G19)
 ├── G19: (eq G20 G21)
 ├── G20: (variable a)
 └── G21: (const 1)

# Regression test for #34795.
exec-ddl
CREATE TABLE a (id INT8 PRIMARY KEY)
----

opt join-limit=4
SELECT
    1
FROM
    a as a1
    INNER JOIN a as a2 ON 1 = a2.id
    INNER JOIN a AS a3 ON a1.id = a3.id
    CROSS JOIN a as a4
WHERE
    a4.id = 1 AND (SELECT true FROM a WHERE a1.id = 1)
----
project
 ├── columns: "?column?":7!null
 ├── fd: ()-->(7)
 ├── inner-join (cross)
 │    ├── columns: a1.id:1!null a2.id:2!null a3.id:3!null a4.id:4!null bool:6!null
 │    ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │    ├── key: (3)
 │    ├── fd: ()-->(2,4,6), (1)==(3), (3)==(1)
 │    ├── inner-join (cross)
 │    │    ├── columns: a1.id:1!null a2.id:2!null a3.id:3!null bool:6!null
 │    │    ├── multiplicity: left-rows(zero-or-more), right-rows(zero-or-one)
 │    │    ├── key: (3)
 │    │    ├── fd: ()-->(2,6), (1)==(3), (3)==(1)
 │    │    ├── scan a2
 │    │    │    ├── columns: a2.id:2!null
 │    │    │    ├── constraint: /2: [/1 - /1]
 │    │    │    ├── cardinality: [0 - 1]
 │    │    │    ├── key: ()
 │    │    │    └── fd: ()-->(2)
 │    │    ├── inner-join (lookup a)
 │    │    │    ├── columns: a1.id:1!null a3.id:3!null bool:6!null
 │    │    │    ├── key columns: [1] = [3]
 │    │    │    ├── lookup columns are key
 │    │    │    ├── key: (3)
 │    │    │    ├── fd: ()-->(6), (1)==(3), (3)==(1)
 │    │    │    ├── select
 │    │    │    │    ├── columns: a1.id:1!null bool:6!null
 │    │    │    │    ├── key: (1)
 │    │    │    │    ├── fd: ()-->(6)
 │    │    │    │    ├── ensure-distinct-on
 │    │    │    │    │    ├── columns: a1.id:1!null bool:6
 │    │    │    │    │    ├── grouping columns: a1.id:1!null
 │    │    │    │    │    ├── error: "more than one row returned by a subquery used as an expression"
 │    │    │    │    │    ├── key: (1)
 │    │    │    │    │    ├── fd: (1)-->(6)
 │    │    │    │    │    ├── left-join (cross)
 │    │    │    │    │    │    ├── columns: a1.id:1!null bool:6
 │    │    │    │    │    │    ├── multiplicity: left-rows(one-or-more), right-rows(zero-or-more)
 │    │    │    │    │    │    ├── scan a1
 │    │    │    │    │    │    │    ├── columns: a1.id:1!null
 │    │    │    │    │    │    │    └── key: (1)
 │    │    │    │    │    │    ├── project
 │    │    │    │    │    │    │    ├── columns: bool:6!null
 │    │    │    │    │    │    │    ├── fd: ()-->(6)
 │    │    │    │    │    │    │    ├── scan a
 │    │    │    │    │    │    │    └── projections
 │    │    │    │    │    │    │         └── true [as=bool:6]
 │    │    │    │    │    │    └── filters
 │    │    │    │    │    │         └── a1.id:1 = 1 [outer=(1), constraints=(/1: [/1 - /1]; tight), fd=()-->(1)]
 │    │    │    │    │    └── aggregations
 │    │    │    │    │         └── const-agg [as=bool:6, outer=(6)]
 │    │    │    │    │              └── bool:6
 │    │    │    │    └── filters
 │    │    │    │         └── bool:6 [outer=(6), constraints=(/6: [/true - /true]; tight), fd=()-->(6)]
 │    │    │    └── filters (true)
 │    │    └── filters (true)
 │    ├── scan a4
 │    │    ├── columns: a4.id:4!null
 │    │    ├── constraint: /4: [/1 - /1]
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── key: ()
 │    │    └── fd: ()-->(4)
 │    └── filters (true)
 └── projections
      └── 1 [as="?column?":7]
