exec-ddl
CREATE TABLE a
(
    k INT PRIMARY KEY,
    i INT,
    f FLOAT,
    s STRING,
    j JSON,
    INDEX s_idx (s) STORING (i, f),
    INDEX si_idx (s DESC, i DESC) STORING (j),
    INVERTED INDEX inv_idx_j (j)
)
----

# --------------------------------------------------
# GenerateIndexScans
# --------------------------------------------------

# Revscan won't be used here because there is no index with f
# sorted by ASC, k DESC
opt
SELECT k,f FROM a ORDER BY f DESC, k ASC LIMIT 10
----
top-k
 ├── columns: k:1!null f:3
 ├── internal-ordering: -3,+1
 ├── k: 10
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(3)
 ├── ordering: -3,+1
 └── scan a@s_idx
      ├── columns: k:1!null f:3
      ├── key: (1)
      └── fd: (1)-->(3)

opt
SELECT k,f from a ORDER BY k DESC LIMIT 10
----
scan a,rev
 ├── columns: k:1!null f:3
 ├── limit: 10(rev)
 ├── key: (1)
 ├── fd: (1)-->(3)
 └── ordering: -1

memo
SELECT k,f FROM a ORDER BY k DESC LIMIT 10
----
memo (optimized, ~5KB, required=[presentation: k:1,f:3] [ordering: -1])
 ├── G1: (limit G2 G3 ordering=-1) (scan a,rev,cols=(1,3),lim=10(rev)) (top-k G2 &{10 -1 })
 │    ├── [presentation: k:1,f:3] [ordering: -1]
 │    │    ├── best: (scan a,rev,cols=(1,3),lim=10(rev))
 │    │    └── cost: 19.04
 │    └── []
 │         ├── best: (scan a,rev,cols=(1,3),lim=10(rev))
 │         └── cost: 19.04
 ├── G2: (scan a,cols=(1,3)) (scan a@s_idx,cols=(1,3))
 │    ├── [ordering: -1] [limit hint: 10.00]
 │    │    ├── best: (scan a,rev,cols=(1,3))
 │    │    └── cost: 29.72
 │    └── []
 │         ├── best: (scan a@s_idx,cols=(1,3))
 │         └── cost: 1088.62
 └── G3: (const 10)


opt
SELECT s FROM a ORDER BY k DESC
----
scan a,rev
 ├── columns: s:4  [hidden: k:1!null]
 ├── key: (1)
 ├── fd: (1)-->(4)
 └── ordering: -1

opt
SELECT k FROM a ORDER BY k ASC
----
scan a
 ├── columns: k:1!null
 ├── key: (1)
 └── ordering: +1

opt
SELECT k FROM a ORDER BY k DESC
----
scan a,rev
 ├── columns: k:1!null
 ├── key: (1)
 └── ordering: -1

opt
SELECT s,i,k,j FROM a ORDER BY s DESC, i DESC, k ASC
----
scan a@si_idx
 ├── columns: s:4 i:2 k:1!null j:5
 ├── key: (1)
 ├── fd: (1)-->(2,4,5)
 └── ordering: -4,-2,+1

# Revscan node won't be used because ordering is
# only partial (reverse) match with existing indices
opt
SELECT s,i,k,j FROM a ORDER BY s DESC, i DESC, k DESC
----
sort (segmented)
 ├── columns: s:4 i:2 k:1!null j:5
 ├── key: (1)
 ├── fd: (1)-->(2,4,5)
 ├── ordering: -4,-2,-1
 └── scan a@si_idx
      ├── columns: k:1!null i:2 s:4 j:5
      ├── key: (1)
      ├── fd: (1)-->(2,4,5)
      └── ordering: -4,-2

# Revscan node won't be used because ordering is
# only partial (reverse) match with existing indices
opt
SELECT s,i,k,j FROM a ORDER BY s DESC, i ASC, k DESC
----
sort (segmented)
 ├── columns: s:4 i:2 k:1!null j:5
 ├── key: (1)
 ├── fd: (1)-->(2,4,5)
 ├── ordering: -4,+2,-1
 └── scan a@si_idx
      ├── columns: k:1!null i:2 s:4 j:5
      ├── key: (1)
      ├── fd: (1)-->(2,4,5)
      └── ordering: -4

opt
SELECT s,i,k,j FROM a ORDER BY s ASC, i ASC, k DESC
----
scan a@si_idx,rev
 ├── columns: s:4 i:2 k:1!null j:5
 ├── key: (1)
 ├── fd: (1)-->(2,4,5)
 └── ordering: +4,+2,-1

memo
SELECT k FROM a ORDER BY k ASC
----
memo (optimized, ~3KB, required=[presentation: k:1] [ordering: +1])
 └── G1: (scan a,cols=(1)) (scan a@s_idx,cols=(1)) (scan a@si_idx,cols=(1))
      ├── [presentation: k:1] [ordering: +1]
      │    ├── best: (scan a,cols=(1))
      │    └── cost: 1088.62
      └── []
           ├── best: (scan a@s_idx,cols=(1))
           └── cost: 1078.52

# Scan of secondary index is lowest cost.
opt
SELECT s, i, f FROM a ORDER BY s, k, i
----
scan a@s_idx
 ├── columns: s:4 i:2 f:3  [hidden: k:1!null]
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 └── ordering: +4,+1

memo
SELECT s, i, f FROM a ORDER BY s, k, i
----
memo (optimized, ~3KB, required=[presentation: s:4,i:2,f:3] [ordering: +4,+1])
 └── G1: (scan a,cols=(1-4)) (scan a@s_idx,cols=(1-4))
      ├── [presentation: s:4,i:2,f:3] [ordering: +4,+1]
      │    ├── best: (scan a@s_idx,cols=(1-4))
      │    └── cost: 1108.82
      └── []
           ├── best: (scan a@s_idx,cols=(1-4))
           └── cost: 1108.82

# No index-join should be generated for a@si_idx, since it is not constrained.
exploretrace rule=GenerateIndexScans
SELECT s, i, f FROM a ORDER BY s, k, i
----
----
================================================================================
GenerateIndexScans
================================================================================
Source expression:
  sort
   ├── columns: s:4 i:2 f:3  [hidden: k:1!null]
   ├── key: (1)
   ├── fd: (1)-->(2-4)
   ├── ordering: +4,+1
   └── scan a
        ├── columns: k:1!null i:2 f:3 s:4
        ├── key: (1)
        └── fd: (1)-->(2-4)

New expression 1 of 1:
  scan a@s_idx
   ├── columns: s:4 i:2 f:3  [hidden: k:1!null]
   ├── key: (1)
   ├── fd: (1)-->(2-4)
   └── ordering: +4,+1
----
----

# Scans over partial indexes should be generated when the partial index
# predicates always evaluate to true.

exec-ddl
CREATE TABLE p (i INT, INDEX (i) WHERE 1 = 1)
----

opt
SELECT i FROM p ORDER BY i
----
scan p@p_i_idx,partial
 ├── columns: i:1
 └── ordering: +1

memo
SELECT s, i, f FROM a ORDER BY f
----
memo (optimized, ~3KB, required=[presentation: s:4,i:2,f:3] [ordering: +3])
 └── G1: (scan a,cols=(2-4)) (scan a@s_idx,cols=(2-4))
      ├── [presentation: s:4,i:2,f:3] [ordering: +3]
      │    ├── best: (sort G1)
      │    └── cost: 1348.20
      └── []
           ├── best: (scan a@s_idx,cols=(2-4))
           └── cost: 1098.72

memo
SELECT s, i, f FROM a ORDER BY s DESC, i
----
memo (optimized, ~3KB, required=[presentation: s:4,i:2,f:3] [ordering: -4,+2])
 └── G1: (scan a,cols=(2-4)) (scan a@s_idx,cols=(2-4))
      ├── [presentation: s:4,i:2,f:3] [ordering: -4,+2]
      │    ├── best: (sort G1="[ordering: -4]")
      │    └── cost: 1325.83
      ├── [ordering: -4]
      │    ├── best: (scan a@s_idx,rev,cols=(2-4))
      │    └── cost: 1199.37
      └── []
           ├── best: (scan a@s_idx,cols=(2-4))
           └── cost: 1098.72

# Force an index in order to ensure that an index join is created.
opt
SELECT * FROM a@si_idx
----
index-join a
 ├── columns: k:1!null i:2 f:3 s:4 j:5
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 └── scan a@si_idx
      ├── columns: k:1!null i:2 s:4 j:5
      ├── flags: force-index=si_idx
      ├── key: (1)
      └── fd: (1)-->(2,4,5)

exec-ddl
CREATE TABLE abc (
  a INT,
  b INT,
  c INT,
  d CHAR,
  PRIMARY KEY (a, b, c),
  UNIQUE INDEX bc (b, c),
  INDEX ba (b, a),
  FAMILY (a, b, c),
  FAMILY (d)
)
----

memo
SELECT d FROM abc ORDER BY lower(d)
----
memo (optimized, ~4KB, required=[presentation: d:4] [ordering: +7])
 ├── G1: (project G2 G3 d)
 │    ├── [presentation: d:4] [ordering: +7]
 │    │    ├── best: (sort G1)
 │    │    └── cost: 1338.02
 │    └── []
 │         ├── best: (project G2 G3 d)
 │         └── cost: 1098.54
 ├── G2: (scan abc,cols=(4))
 │    └── []
 │         ├── best: (scan abc,cols=(4))
 │         └── cost: 1078.52
 ├── G3: (projections G4)
 ├── G4: (function G5 lower)
 ├── G5: (scalar-list G6)
 └── G6: (variable d)

# Scan of primary index is lowest cost.
opt
SELECT s, i, f FROM a ORDER BY k, i, s
----
scan a
 ├── columns: s:4 i:2 f:3  [hidden: k:1!null]
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 └── ordering: +1

memo
SELECT s, i, f FROM a ORDER BY k, i, s
----
memo (optimized, ~3KB, required=[presentation: s:4,i:2,f:3] [ordering: +1])
 └── G1: (scan a,cols=(1-4)) (scan a@s_idx,cols=(1-4))
      ├── [presentation: s:4,i:2,f:3] [ordering: +1]
      │    ├── best: (scan a,cols=(1-4))
      │    └── cost: 1118.92
      └── []
           ├── best: (scan a@s_idx,cols=(1-4))
           └── cost: 1108.82

# Secondary index has right order
opt
SELECT s, j FROM a ORDER BY s
----
scan a@si_idx,rev
 ├── columns: s:4 j:5
 └── ordering: +4

memo
SELECT s, j FROM a ORDER BY s
----
memo (optimized, ~3KB, required=[presentation: s:4,j:5] [ordering: +4])
 └── G1: (scan a,cols=(4,5)) (scan a@si_idx,cols=(4,5))
      ├── [presentation: s:4,j:5] [ordering: +4]
      │    ├── best: (scan a@si_idx,rev,cols=(4,5))
      │    └── cost: 1189.27
      └── []
           ├── best: (scan a@si_idx,cols=(4,5))
           └── cost: 1088.62

# Consider three different indexes, and pick index with multiple keys.
opt
SELECT i, k FROM a ORDER BY s DESC, i, k
----
sort (segmented)
 ├── columns: i:2 k:1!null  [hidden: s:4]
 ├── key: (1)
 ├── fd: (1)-->(2,4)
 ├── ordering: -4,+2,+1
 └── scan a@si_idx
      ├── columns: k:1!null i:2 s:4
      ├── key: (1)
      ├── fd: (1)-->(2,4)
      └── ordering: -4

memo
SELECT i, k FROM a ORDER BY s DESC, i, k
----
memo (optimized, ~3KB, required=[presentation: i:2,k:1] [ordering: -4,+2,+1])
 └── G1: (scan a,cols=(1,2,4)) (scan a@s_idx,cols=(1,2,4)) (scan a@si_idx,cols=(1,2,4))
      ├── [presentation: i:2,k:1] [ordering: -4,+2,+1]
      │    ├── best: (sort G1="[ordering: -4]")
      │    └── cost: 1229.50
      ├── [ordering: -4]
      │    ├── best: (scan a@si_idx,cols=(1,2,4))
      │    └── cost: 1098.72
      └── []
           ├── best: (scan a@s_idx,cols=(1,2,4))
           └── cost: 1098.72

# GenerateIndexScans propagates row-level locking information.
opt
SELECT s, i, f FROM a ORDER BY s FOR UPDATE
----
scan a@s_idx
 ├── columns: s:4 i:2 f:3
 ├── locking: for-update
 ├── volatile
 └── ordering: +4

exec-ddl
CREATE TABLE fk_a (
    a INT PRIMARY KEY,
    t TIMESTAMPTZ DEFAULT NULL,
    UNIQUE INDEX (a) WHERE t is NULL
)
----

exec-ddl
CREATE TABLE fk_b (
    b INT PRIMARY KEY,
    a INT NOT NULL REFERENCES fk_a (a)
)
----

# Do not use a non-implied partial index for FK check scans.
opt expect-not=(GenerateIndexScans, GeneratePartialIndexScans)
INSERT INTO fk_b (b,a) VALUES (1,1)
----
insert fk_b
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:5 => b:1
 │    └── column2:6 => fk_b.a:2
 ├── input binding: &1
 ├── cardinality: [0 - 0]
 ├── volatile, mutations
 ├── values
 │    ├── columns: column1:5!null column2:6!null
 │    ├── cardinality: [1 - 1]
 │    ├── key: ()
 │    ├── fd: ()-->(5,6)
 │    └── (1, 1)
 └── f-k-checks
      └── f-k-checks-item: fk_b(a) -> fk_a(a)
           └── anti-join (lookup fk_a)
                ├── columns: a:7!null
                ├── key columns: [7] = [8]
                ├── lookup columns are key
                ├── cardinality: [0 - 1]
                ├── key: ()
                ├── fd: ()-->(7)
                ├── with-scan &1
                │    ├── columns: a:7!null
                │    ├── mapping:
                │    │    └──  column2:6 => a:7
                │    ├── cardinality: [1 - 1]
                │    ├── key: ()
                │    └── fd: ()-->(7)
                └── filters (true)

# --------------------------------------------------
# GenerateLocalityOptimizedScan
# --------------------------------------------------

exec-ddl
CREATE TABLE abc_part (
    r STRING NOT NULL CHECK (r IN ('east', 'west', 'central')),
    t INT NOT NULL CHECK (t IN (1, 2, 3)),
    a INT PRIMARY KEY,
    b INT,
    c INT,
    d INT,
    UNIQUE WITHOUT INDEX (b),
    UNIQUE WITHOUT INDEX (c),
    UNIQUE INDEX b_idx (r, b) PARTITION BY LIST (r) (
      PARTITION east VALUES IN (('east')),
      PARTITION west VALUES IN (('west')),
      PARTITION central VALUES IN (('central'))
    ),
    UNIQUE INDEX c_idx (r, t, c) PARTITION BY LIST (r, t) (
      PARTITION east VALUES IN (('east', 1), ('east', 2)),
      PARTITION west VALUES IN (('west', DEFAULT)),
      PARTITION default VALUES IN (DEFAULT)
    ),
    INDEX d_idx (r, d) PARTITION BY LIST (r) (
      PARTITION east VALUES IN (('east')),
      PARTITION west VALUES IN (('west')),
      PARTITION central VALUES IN (('central'))
    )
)
----

exec-ddl
ALTER PARTITION "east" OF INDEX abc_part@b_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=east: 2}',
  lease_preferences = '[[+region=east]]'
----

exec-ddl
ALTER PARTITION "west" OF INDEX abc_part@b_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=west: 2}',
  lease_preferences = '[[+region=west]]';
----

exec-ddl
ALTER PARTITION "central" OF INDEX abc_part@b_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=central: 2}',
  lease_preferences = '[[+region=central]]';
----

exec-ddl
ALTER PARTITION "east" OF INDEX abc_part@c_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=east: 2}',
  lease_preferences = '[[+region=east]]'
----

exec-ddl
ALTER PARTITION "west" OF INDEX abc_part@c_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=west: 2}',
  lease_preferences = '[[+region=west]]'
----

exec-ddl
ALTER PARTITION "default" OF INDEX abc_part@c_idx CONFIGURE ZONE USING
  num_voters = 5,
  lease_preferences = '[[+region=central]]';
----

exec-ddl
ALTER PARTITION "east" OF INDEX abc_part@d_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=east: 2}',
  lease_preferences = '[[+region=east]]'
----

exec-ddl
ALTER PARTITION "west" OF INDEX abc_part@d_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=west: 2}',
  lease_preferences = '[[+region=west]]';
----

exec-ddl
ALTER PARTITION "central" OF INDEX abc_part@d_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=central: 2}',
  lease_preferences = '[[+region=central]]';
----

opt locality=(region=east) expect=GenerateLocalityOptimizedScan
SELECT a FROM abc_part WHERE b = 1
----
project
 ├── columns: a:3!null
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(3)
 ├── distribution: east
 └── locality-optimized-search
      ├── columns: a:3!null b:4!null
      ├── left columns: a:11 b:12
      ├── right columns: a:19 b:20
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(3,4)
      ├── distribution: east
      ├── scan abc_part@b_idx
      │    ├── columns: a:11!null b:12!null
      │    ├── constraint: /9/12: [/'east'/1 - /'east'/1]
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    └── fd: ()-->(11,12)
      └── scan abc_part@b_idx
           ├── columns: a:19!null b:20!null
           ├── constraint: /17/20
           │    ├── [/'central'/1 - /'central'/1]
           │    └── [/'west'/1 - /'west'/1]
           ├── cardinality: [0 - 1]
           ├── key: ()
           └── fd: ()-->(19,20)

opt locality=(region=west) expect=GenerateLocalityOptimizedScan
SELECT * FROM abc_part WHERE b = 1
----
index-join abc_part
 ├── columns: r:1!null t:2!null a:3!null b:4!null c:5 d:6
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-6)
 ├── distribution: west
 └── locality-optimized-search
      ├── columns: r:1!null a:3!null b:4!null
      ├── left columns: r:9 a:11 b:12
      ├── right columns: r:17 a:19 b:20
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1,3,4)
      ├── distribution: west
      ├── scan abc_part@b_idx
      │    ├── columns: r:9!null a:11!null b:12!null
      │    ├── constraint: /9/12: [/'west'/1 - /'west'/1]
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    └── fd: ()-->(9,11,12)
      └── scan abc_part@b_idx
           ├── columns: r:17!null a:19!null b:20!null
           ├── constraint: /17/20
           │    ├── [/'central'/1 - /'central'/1]
           │    └── [/'east'/1 - /'east'/1]
           ├── cardinality: [0 - 1]
           ├── key: ()
           └── fd: ()-->(17,19,20)

opt locality=(region=central) expect=GenerateLocalityOptimizedScan
SELECT * FROM abc_part WHERE b = 1
----
index-join abc_part
 ├── columns: r:1!null t:2!null a:3!null b:4!null c:5 d:6
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-6)
 ├── distribution: central
 └── locality-optimized-search
      ├── columns: r:1!null a:3!null b:4!null
      ├── left columns: r:9 a:11 b:12
      ├── right columns: r:17 a:19 b:20
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1,3,4)
      ├── distribution: central
      ├── scan abc_part@b_idx
      │    ├── columns: r:9!null a:11!null b:12!null
      │    ├── constraint: /9/12: [/'central'/1 - /'central'/1]
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    └── fd: ()-->(9,11,12)
      └── scan abc_part@b_idx
           ├── columns: r:17!null a:19!null b:20!null
           ├── constraint: /17/20
           │    ├── [/'east'/1 - /'east'/1]
           │    └── [/'west'/1 - /'west'/1]
           ├── cardinality: [0 - 1]
           ├── key: ()
           └── fd: ()-->(17,19,20)

opt locality=(region=east) expect=GenerateLocalityOptimizedScan
SELECT * FROM abc_part WHERE c = 1
----
index-join abc_part
 ├── columns: r:1!null t:2!null a:3!null b:4 c:5!null d:6
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-6)
 ├── distribution: east
 └── locality-optimized-search
      ├── columns: r:1!null t:2!null a:3!null c:5!null
      ├── left columns: r:9 t:10 a:11 c:13
      ├── right columns: r:17 t:18 a:19 c:21
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1-3,5)
      ├── distribution: east
      ├── scan abc_part@c_idx
      │    ├── columns: r:9!null t:10!null a:11!null c:13!null
      │    ├── constraint: /9/10/13
      │    │    ├── [/'east'/1/1 - /'east'/1/1]
      │    │    └── [/'east'/2/1 - /'east'/2/1]
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    └── fd: ()-->(9-11,13)
      └── scan abc_part@c_idx
           ├── columns: r:17!null t:18!null a:19!null c:21!null
           ├── constraint: /17/18/21
           │    ├── [/'central'/1/1 - /'central'/1/1]
           │    ├── [/'central'/2/1 - /'central'/2/1]
           │    ├── [/'central'/3/1 - /'central'/3/1]
           │    ├── [/'east'/3/1 - /'east'/3/1]
           │    ├── [/'west'/1/1 - /'west'/1/1]
           │    ├── [/'west'/2/1 - /'west'/2/1]
           │    └── [/'west'/3/1 - /'west'/3/1]
           ├── cardinality: [0 - 1]
           ├── key: ()
           └── fd: ()-->(17-19,21)

opt locality=(region=west) expect=GenerateLocalityOptimizedScan
SELECT * FROM abc_part WHERE c = 1
----
index-join abc_part
 ├── columns: r:1!null t:2!null a:3!null b:4 c:5!null d:6
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-6)
 ├── distribution: west
 └── locality-optimized-search
      ├── columns: r:1!null t:2!null a:3!null c:5!null
      ├── left columns: r:9 t:10 a:11 c:13
      ├── right columns: r:17 t:18 a:19 c:21
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1-3,5)
      ├── distribution: west
      ├── scan abc_part@c_idx
      │    ├── columns: r:9!null t:10!null a:11!null c:13!null
      │    ├── constraint: /9/10/13
      │    │    ├── [/'west'/1/1 - /'west'/1/1]
      │    │    ├── [/'west'/2/1 - /'west'/2/1]
      │    │    └── [/'west'/3/1 - /'west'/3/1]
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    └── fd: ()-->(9-11,13)
      └── scan abc_part@c_idx
           ├── columns: r:17!null t:18!null a:19!null c:21!null
           ├── constraint: /17/18/21
           │    ├── [/'central'/1/1 - /'central'/1/1]
           │    ├── [/'central'/2/1 - /'central'/2/1]
           │    ├── [/'central'/3/1 - /'central'/3/1]
           │    ├── [/'east'/1/1 - /'east'/1/1]
           │    ├── [/'east'/2/1 - /'east'/2/1]
           │    └── [/'east'/3/1 - /'east'/3/1]
           ├── cardinality: [0 - 1]
           ├── key: ()
           └── fd: ()-->(17-19,21)

opt locality=(region=central) expect=GenerateLocalityOptimizedScan
SELECT * FROM abc_part WHERE c = 1
----
index-join abc_part
 ├── columns: r:1!null t:2!null a:3!null b:4 c:5!null d:6
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-6)
 ├── distribution: central
 └── locality-optimized-search
      ├── columns: r:1!null t:2!null a:3!null c:5!null
      ├── left columns: r:9 t:10 a:11 c:13
      ├── right columns: r:17 t:18 a:19 c:21
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1-3,5)
      ├── distribution: central
      ├── scan abc_part@c_idx
      │    ├── columns: r:9!null t:10!null a:11!null c:13!null
      │    ├── constraint: /9/10/13
      │    │    ├── [/'central'/1/1 - /'central'/1/1]
      │    │    ├── [/'central'/2/1 - /'central'/2/1]
      │    │    ├── [/'central'/3/1 - /'central'/3/1]
      │    │    └── [/'east'/3/1 - /'east'/3/1]
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    └── fd: ()-->(9-11,13)
      └── scan abc_part@c_idx
           ├── columns: r:17!null t:18!null a:19!null c:21!null
           ├── constraint: /17/18/21
           │    ├── [/'east'/1/1 - /'east'/1/1]
           │    ├── [/'east'/2/1 - /'east'/2/1]
           │    ├── [/'west'/1/1 - /'west'/1/1]
           │    ├── [/'west'/2/1 - /'west'/2/1]
           │    └── [/'west'/3/1 - /'west'/3/1]
           ├── cardinality: [0 - 1]
           ├── key: ()
           └── fd: ()-->(17-19,21)

# b is constrained to multiple values.
opt locality=(region=east) expect=GenerateLocalityOptimizedScan
SELECT a FROM abc_part WHERE b IN (1, 2)
----
project
 ├── columns: a:3!null
 ├── cardinality: [0 - 2]
 ├── key: (3)
 ├── distribution: east
 └── locality-optimized-search
      ├── columns: a:3!null b:4!null
      ├── left columns: a:11 b:12
      ├── right columns: a:19 b:20
      ├── cardinality: [0 - 2]
      ├── key: (3)
      ├── fd: (3)-->(4), (4)-->(3)
      ├── distribution: east
      ├── scan abc_part@b_idx
      │    ├── columns: a:11!null b:12!null
      │    ├── constraint: /9/12: [/'east'/1 - /'east'/2]
      │    ├── cardinality: [0 - 2]
      │    ├── key: (11)
      │    └── fd: (11)-->(12), (12)-->(11)
      └── scan abc_part@b_idx
           ├── columns: a:19!null b:20!null
           ├── constraint: /17/20
           │    ├── [/'central'/1 - /'central'/2]
           │    └── [/'west'/1 - /'west'/2]
           ├── cardinality: [0 - 4]
           ├── key: (19)
           └── fd: (19)-->(20), (20)-->(19)

# b is constrained to more than 100000 values (the kv batch size).
opt locality=(region=east) expect-not=GenerateLocalityOptimizedScan
SELECT a FROM abc_part WHERE b >= 0 AND b < 100001
----
distribute
 ├── columns: a:3!null
 ├── cardinality: [0 - 100001]
 ├── key: (3)
 ├── distribution: east
 ├── input distribution: east,west
 └── project
      ├── columns: a:3!null
      ├── cardinality: [0 - 100001]
      ├── key: (3)
      └── select
           ├── columns: a:3!null b:4!null
           ├── cardinality: [0 - 100001]
           ├── key: (3)
           ├── fd: (3)-->(4), (4)-->(3)
           ├── index-join abc_part
           │    ├── columns: a:3!null b:4
           │    ├── key: (3)
           │    ├── fd: (3)-->(4), (4)~~>(3)
           │    └── scan abc_part@c_idx
           │         ├── columns: a:3!null
           │         ├── constraint: /1/2/5
           │         │    ├── [/'central'/1 - /'central'/3]
           │         │    ├── [/'east'/1 - /'east'/2]
           │         │    ├── [/'east'/3 - /'east'/3]
           │         │    └── [/'west'/1 - /'west'/3]
           │         └── key: (3)
           └── filters
                └── (b:4 >= 0) AND (b:4 < 100001) [outer=(4), constraints=(/4: [/0 - /100000]; tight)]

# The spans target all remote partitions.
opt locality=(region=east) expect-not=GenerateLocalityOptimizedScan
SELECT a FROM abc_part WHERE b = 1 AND r IN ('west', 'central')
----
distribute
 ├── columns: a:3!null
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(3)
 ├── distribution: east
 ├── input distribution: central,west
 └── project
      ├── columns: a:3!null
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(3)
      └── scan abc_part@b_idx
           ├── columns: r:1!null a:3!null b:4!null
           ├── constraint: /1/4
           │    ├── [/'central'/1 - /'central'/1]
           │    └── [/'west'/1 - /'west'/1]
           ├── cardinality: [0 - 1]
           ├── key: ()
           └── fd: ()-->(1,3,4)

# The scan is limited.
opt locality=(region=east) expect=GenerateLocalityOptimizedScan
SELECT a FROM abc_part WHERE d = 1 LIMIT 1
----
project
 ├── columns: a:3!null
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(3)
 ├── distribution: east
 └── locality-optimized-search
      ├── columns: a:3!null d:6!null
      ├── left columns: a:11 d:14
      ├── right columns: a:19 d:22
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(3,6)
      ├── distribution: east
      ├── scan abc_part@d_idx
      │    ├── columns: a:11!null d:14!null
      │    ├── constraint: /9/14/11: [/'east'/1 - /'east'/1]
      │    ├── limit: 1
      │    ├── key: ()
      │    └── fd: ()-->(11,14)
      └── scan abc_part@d_idx
           ├── columns: a:19!null d:22!null
           ├── constraint: /17/22/19
           │    ├── [/'central'/1 - /'central'/1]
           │    └── [/'west'/1 - /'west'/1]
           ├── limit: 1
           ├── key: ()
           └── fd: ()-->(19,22)

# The scan is limited, but b is known to be a key, so the limit is discarded.
opt locality=(region=east) expect=GenerateLocalityOptimizedScan
SELECT a FROM abc_part WHERE b = 1 LIMIT 1
----
project
 ├── columns: a:3!null
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(3)
 ├── distribution: east
 └── locality-optimized-search
      ├── columns: a:3!null b:4!null
      ├── left columns: a:11 b:12
      ├── right columns: a:19 b:20
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(3,4)
      ├── distribution: east
      ├── scan abc_part@b_idx
      │    ├── columns: a:11!null b:12!null
      │    ├── constraint: /9/12: [/'east'/1 - /'east'/1]
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    └── fd: ()-->(11,12)
      └── scan abc_part@b_idx
           ├── columns: a:19!null b:20!null
           ├── constraint: /17/20
           │    ├── [/'central'/1 - /'central'/1]
           │    └── [/'west'/1 - /'west'/1]
           ├── cardinality: [0 - 1]
           ├── key: ()
           └── fd: ()-->(19,20)

##############################################
# Locality optimized scans with LIMIT clause #
##############################################
# LIMIT clause enables locality optimized scan.
opt locality=(region=east) expect=GenerateLocalityOptimizedScan
SELECT a FROM abc_part LIMIT 1
----
locality-optimized-search
 ├── columns: a:3!null
 ├── left columns: a:11
 ├── right columns: a:19
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(3)
 ├── distribution: east
 ├── scan abc_part@b_idx
 │    ├── columns: a:11!null
 │    ├── constraint: /9/12: [/'east' - /'east']
 │    ├── limit: 1
 │    ├── key: ()
 │    └── fd: ()-->(11)
 └── scan abc_part@b_idx
      ├── columns: a:19!null
      ├── constraint: /17/20
      │    ├── [/'central' - /'central']
      │    └── [/'west' - /'west']
      ├── limit: 1
      ├── key: ()
      └── fd: ()-->(19)

# LIMIT and OFFSET clause enables locality optimized scan.
opt locality=(region=east) expect=GenerateLocalityOptimizedScan
SELECT a FROM abc_part LIMIT 1 OFFSET 2
----
offset
 ├── columns: a:3!null
 ├── cardinality: [0 - 1]
 ├── key: (3)
 ├── distribution: east
 ├── locality-optimized-search
 │    ├── columns: a:3!null
 │    ├── left columns: a:11
 │    ├── right columns: a:19
 │    ├── cardinality: [0 - 3]
 │    ├── key: (3)
 │    ├── distribution: east
 │    ├── scan abc_part@b_idx
 │    │    ├── columns: a:11!null
 │    │    ├── constraint: /9/12: [/'east' - /'east']
 │    │    ├── limit: 3
 │    │    └── key: (11)
 │    └── scan abc_part@b_idx
 │         ├── columns: a:19!null
 │         ├── constraint: /17/20
 │         │    ├── [/'central' - /'central']
 │         │    └── [/'west' - /'west']
 │         ├── limit: 3
 │         └── key: (19)
 └── 2

# LIMIT in IN subquery enables locality optimized scan.
opt locality=(region=east) expect=GenerateLocalityOptimizedScan
SELECT * FROM abc_part WHERE a IN (SELECT a FROM abc_part LIMIT 3)
----
project
 ├── columns: r:1!null t:2!null a:3!null b:4 c:5 d:6
 ├── cardinality: [0 - 3]
 ├── key: (3)
 ├── fd: (3)-->(1,2,4-6), (4)~~>(1-3,5,6), (5)~~>(1-4,6)
 ├── distribution: east
 └── inner-join (lookup abc_part)
      ├── columns: r:1!null t:2!null a:3!null b:4 c:5 d:6 a:11!null
      ├── key columns: [11] = [3]
      ├── lookup columns are key
      ├── cardinality: [0 - 3]
      ├── key: (11)
      ├── fd: (3)-->(1,2,4-6), (4)~~>(1-3,5,6), (5)~~>(1-4,6), (3)==(11), (11)==(3)
      ├── distribution: east
      ├── locality-optimized-search
      │    ├── columns: a:11!null
      │    ├── left columns: a:19
      │    ├── right columns: a:27
      │    ├── cardinality: [0 - 3]
      │    ├── key: (11)
      │    ├── distribution: east
      │    ├── scan abc_part@b_idx
      │    │    ├── columns: a:19!null
      │    │    ├── constraint: /17/20: [/'east' - /'east']
      │    │    ├── limit: 3
      │    │    └── key: (19)
      │    └── scan abc_part@b_idx
      │         ├── columns: a:27!null
      │         ├── constraint: /25/28
      │         │    ├── [/'central' - /'central']
      │         │    └── [/'west' - /'west']
      │         ├── limit: 3
      │         └── key: (27)
      └── filters (true)

# Correlated semijoin with LIMIT in outer query block should not enable
# locality optimized scan.
opt locality=(region=east) expect-not=GenerateLocalityOptimizedScan
SELECT * FROM abc_part a WHERE EXISTS (SELECT 1 FROM abc_part b WHERE a.a=b.a)
----
scan abc_part [as=a]
 ├── columns: r:1!null t:2!null a:3!null b:4 c:5 d:6
 ├── check constraint expressions
 │    ├── a.r:1 IN ('central', 'east', 'west') [outer=(1), constraints=(/1: [/'central' - /'central'] [/'east' - /'east'] [/'west' - /'west']; tight)]
 │    └── a.t:2 IN (1, 2, 3) [outer=(2), constraints=(/2: [/1 - /1] [/2 - /2] [/3 - /3]; tight)]
 ├── key: (3)
 ├── fd: (3)-->(1,2,4-6), (4)~~>(1-3,5,6), (5)~~>(1-4,6)
 └── distribution: east

# Uncorrelated semijoin with LIMIT can't enable locality optimized scan in the
# outer query block yet.
# TODO(msirek) Push the LIMIT into the outer table scan via issue #75301.
opt locality=(region=east) expect=GenerateLocalityOptimizedScan
SELECT * FROM abc_part a WHERE EXISTS (SELECT 1 FROM abc_part)
----
distribute
 ├── columns: r:1!null t:2!null a:3!null b:4 c:5 d:6
 ├── key: (3)
 ├── fd: (3)-->(1,2,4-6), (4)~~>(1-3,5,6), (5)~~>(1-4,6)
 ├── distribution: east
 ├── input distribution: east,west
 └── index-join abc_part
      ├── columns: a.r:1!null a.t:2!null a.a:3!null a.b:4 a.c:5 a.d:6
      ├── key: (3)
      ├── fd: (3)-->(1,2,4-6), (4)~~>(1-3,5,6), (5)~~>(1-4,6)
      └── select
           ├── columns: a.r:1!null a.t:2!null a.a:3!null a.c:5
           ├── key: (3)
           ├── fd: (3)-->(1,2,5), (5)~~>(1-3)
           ├── scan abc_part@c_idx [as=a]
           │    ├── columns: a.r:1!null a.t:2!null a.a:3!null a.c:5
           │    ├── constraint: /1/2/5
           │    │    ├── [/'central'/1 - /'central'/3]
           │    │    ├── [/'east'/1 - /'east'/2]
           │    │    ├── [/'east'/3 - /'east'/3]
           │    │    └── [/'west'/1 - /'west'/3]
           │    ├── key: (3)
           │    └── fd: (3)-->(1,2,5), (5)~~>(1-3)
           └── filters
                └── coalesce [subquery]
                     ├── subquery
                     │    └── project
                     │         ├── columns: column18:18!null
                     │         ├── cardinality: [0 - 1]
                     │         ├── key: ()
                     │         ├── fd: ()-->(18)
                     │         ├── distribution: east
                     │         ├── locality-optimized-search
                     │         │    ├── cardinality: [0 - 1]
                     │         │    ├── key: ()
                     │         │    ├── distribution: east
                     │         │    ├── scan abc_part@b_idx
                     │         │    │    ├── constraint: /19/22: [/'east' - /'east']
                     │         │    │    ├── limit: 1
                     │         │    │    └── key: ()
                     │         │    └── scan abc_part@b_idx
                     │         │         ├── constraint: /27/30
                     │         │         │    ├── [/'central' - /'central']
                     │         │         │    └── [/'west' - /'west']
                     │         │         ├── limit: 1
                     │         │         └── key: ()
                     │         └── projections
                     │              └── true [as=column18:18]
                     └── false

# Partitioning without CHECK constraints
exec-ddl
CREATE TABLE abc_part_no_check (
    r STRING NOT NULL,
    t INT NOT NULL,
    a INT PRIMARY KEY,
    b INT,
    c INT,
    d INT,
    UNIQUE WITHOUT INDEX (b),
    UNIQUE WITHOUT INDEX (c),
    UNIQUE INDEX c_idx (r, t, c) PARTITION BY LIST (r, t) (
      PARTITION east VALUES IN (('east', 1), ('east', 3)),
      PARTITION west VALUES IN (('west', DEFAULT)),
      PARTITION default VALUES IN (DEFAULT)
    )
)
----

exec-ddl
ALTER PARTITION "east" OF INDEX abc_part_no_check@c_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=east: 2}',
  lease_preferences = '[[+region=east]]'
----

exec-ddl
ALTER PARTITION "west" OF INDEX abc_part_no_check@c_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=west: 2}',
  lease_preferences = '[[+region=west]]'
----

exec-ddl
ALTER PARTITION "default" OF INDEX abc_part_no_check@c_idx CONFIGURE ZONE USING
  num_voters = 5,
  lease_preferences = '[[+region=central]]';
----

# Queries on most partitioned tables without CHECK constraints won't pick
# locality optimized search until issue #75887 is implemented.
opt locality=(region=east) expect-not=GenerateLocalityOptimizedScan
SELECT a FROM abc_part_no_check@c_idx LIMIT 3
----
distribute
 ├── columns: a:3!null
 ├── cardinality: [0 - 3]
 ├── key: (3)
 ├── distribution: east
 ├── input distribution: central,east,west
 └── scan abc_part_no_check@c_idx
      ├── columns: a:3!null
      ├── limit: 3
      ├── flags: force-index=c_idx
      └── key: (3)

# Simpler partitioned table without CHECK constraints
exec-ddl
CREATE TABLE abc_part_no_check2 (
    r STRING NOT NULL,
    t INT NOT NULL,
    a INT PRIMARY KEY,
    b INT,
    c INT,
    d INT,
    UNIQUE WITHOUT INDEX (b),
    UNIQUE WITHOUT INDEX (c),
    UNIQUE INDEX b_idx (r, b) PARTITION BY LIST (r) (
      PARTITION east VALUES IN (('east')),
      PARTITION west VALUES IN (('west')),
      PARTITION central VALUES IN (('central'))
    )
)
----

exec-ddl
ALTER PARTITION "east" OF INDEX abc_part@b_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=east: 2}',
  lease_preferences = '[[+region=east]]'
----

exec-ddl
ALTER PARTITION "west" OF INDEX abc_part@b_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=west: 2}',
  lease_preferences = '[[+region=west]]';
----

exec-ddl
ALTER PARTITION "central" OF INDEX abc_part@b_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=central: 2}',
  lease_preferences = '[[+region=central]]';
----

# Queries on most partitioned tables without CHECK constraints won't pick
# locality optimized search until issue #75887 is implemented.
opt locality=(region=east) expect-not=GenerateLocalityOptimizedScan
SELECT a FROM abc_part_no_check2@b_idx LIMIT 5
----
scan abc_part_no_check2@b_idx
 ├── columns: a:3!null
 ├── limit: 5
 ├── flags: force-index=b_idx
 ├── key: (3)
 └── distribution: east

# Mimic a REGIONAL BY ROW table
exec-ddl
CREATE TABLE def_part (
    r STRING NOT NULL CHECK (r IN ('east', 'west', 'central')),
    d INT NOT NULL,
    e INT,
    f INT,
    PRIMARY KEY (r, d),
    UNIQUE WITHOUT INDEX (d),
    UNIQUE WITHOUT INDEX (e),
    UNIQUE INDEX e_idx (r, e) PARTITION BY LIST (r) (
      PARTITION east VALUES IN (('east')),
      PARTITION west VALUES IN (('west')),
      PARTITION central VALUES IN (('central'))
    ),
    INDEX f_idx (r, f) PARTITION BY LIST (r) (
      PARTITION east VALUES IN (('east')),
      PARTITION west VALUES IN (('west')),
      PARTITION central VALUES IN (('central'))
    )
) PARTITION BY LIST (r) (
  PARTITION east VALUES IN (('east')),
  PARTITION west VALUES IN (('west')),
  PARTITION central VALUES IN (('central'))
)
----

exec-ddl
ALTER PARTITION "east" OF INDEX def_part@def_part_pkey CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=east: 2}',
  lease_preferences = '[[+region=east]]'
----

exec-ddl
ALTER PARTITION "west" OF INDEX def_part@def_part_pkey CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=west: 2}',
  lease_preferences = '[[+region=west]]';
----

exec-ddl
ALTER PARTITION "central" OF INDEX def_part@def_part_pkey CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=central: 2}',
  lease_preferences = '[[+region=central]]';
----

exec-ddl
ALTER PARTITION "east" OF INDEX def_part@e_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=east: 2}',
  lease_preferences = '[[+region=east]]'
----

exec-ddl
ALTER PARTITION "west" OF INDEX def_part@e_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=west: 2}',
  lease_preferences = '[[+region=west]]';
----

exec-ddl
ALTER PARTITION "central" OF INDEX def_part@e_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=central: 2}',
  lease_preferences = '[[+region=central]]';
----

exec-ddl
ALTER PARTITION "east" OF INDEX def_part@f_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=east: 2}',
  lease_preferences = '[[+region=east]]'
----

exec-ddl
ALTER PARTITION "west" OF INDEX def_part@f_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=west: 2}',
  lease_preferences = '[[+region=west]]';
----

exec-ddl
ALTER PARTITION "central" OF INDEX def_part@f_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=central: 2}',
  lease_preferences = '[[+region=central]]';
----

# Selecting from each of the indexes and the pkey should use locality optimized
# search
opt locality=(region=east) expect=GenerateLocalityOptimizedScan
SELECT e FROM def_part@e_idx LIMIT 3
----
locality-optimized-search
 ├── columns: e:3
 ├── left columns: e:9
 ├── right columns: e:15
 ├── cardinality: [0 - 3]
 ├── lax-key: (3)
 ├── distribution: east
 ├── scan def_part@e_idx
 │    ├── columns: e:9
 │    ├── constraint: /7/9: [/'east' - /'east']
 │    ├── limit: 3
 │    ├── flags: force-index=e_idx
 │    └── lax-key: (9)
 └── scan def_part@e_idx
      ├── columns: e:15
      ├── constraint: /13/15
      │    ├── [/'central' - /'central']
      │    └── [/'west' - /'west']
      ├── limit: 3
      ├── flags: force-index=e_idx
      └── lax-key: (15)

opt locality=(region=east) expect=GenerateLocalityOptimizedScan
SELECT f FROM def_part@f_idx LIMIT 3
----
locality-optimized-search
 ├── columns: f:4
 ├── left columns: f:10
 ├── right columns: f:16
 ├── cardinality: [0 - 3]
 ├── distribution: east
 ├── scan def_part@f_idx
 │    ├── columns: f:10
 │    ├── constraint: /7/10/8: [/'east' - /'east']
 │    ├── limit: 3
 │    └── flags: force-index=f_idx
 └── scan def_part@f_idx
      ├── columns: f:16
      ├── constraint: /13/16/14
      │    ├── [/'central' - /'central']
      │    └── [/'west' - /'west']
      ├── limit: 3
      └── flags: force-index=f_idx

opt locality=(region=east) expect=GenerateLocalityOptimizedScan
SELECT d FROM def_part@def_part_pkey LIMIT 3
----
locality-optimized-search
 ├── columns: d:2!null
 ├── left columns: d:8
 ├── right columns: d:14
 ├── cardinality: [0 - 3]
 ├── key: (2)
 ├── distribution: east
 ├── scan def_part
 │    ├── columns: d:8!null
 │    ├── constraint: /7/8: [/'east' - /'east']
 │    ├── limit: 3
 │    ├── flags: force-index=def_part_pkey
 │    └── key: (8)
 └── scan def_part
      ├── columns: d:14!null
      ├── constraint: /13/14
      │    ├── [/'central' - /'central']
      │    └── [/'west' - /'west']
      ├── limit: 3
      ├── flags: force-index=def_part_pkey
      └── key: (14)
