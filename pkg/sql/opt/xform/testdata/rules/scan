exec-ddl
CREATE TABLE a
(
    k INT PRIMARY KEY,
    i INT,
    f FLOAT,
    s STRING,
    j JSON,
    INDEX s_idx (s) STORING (i, f),
    INDEX si_idx (s DESC, i) STORING (j)
)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 ├── INDEX primary
 │    └── k int not null
 ├── INDEX s_idx
 │    ├── s string
 │    ├── k int not null
 │    ├── i int (storing)
 │    └── f float (storing)
 └── INDEX si_idx
      ├── s string desc
      ├── i int
      ├── k int not null
      └── j jsonb (storing)

# --------------------------------------------------
# GenerateIndexScans
# --------------------------------------------------

# Scan of secondary index is lowest cost.
opt
SELECT s, i, f FROM a ORDER BY s, k, i
----
scan a@s_idx
 ├── columns: s:4(string) i:2(int) f:3(float)
 └── ordering: +4,+1,+2

memo
SELECT s, i, f FROM a ORDER BY s, k, i
----
[7: "p:s:4,i:2,f:3 o:+4,+1,+2"]
memo
 ├── 7: (scan a) (scan a@s_idx)
 │    ├── "" [cost=1000.00]
 │    │    └── best: (scan a)
 │    └── "p:s:4,i:2,f:3 o:+4,+1,+2" [cost=1000.00]
 │         └── best: (scan a@s_idx)
 ├── 6: (projections 2 3 4 5)
 ├── 5: (variable a.k)
 ├── 4: (variable a.f)
 ├── 3: (variable a.i)
 ├── 2: (variable a.s)
 └── 1: (scan a)

# Scan of primary index is lowest cost.
opt
SELECT s, i, f FROM a ORDER BY k, i, s
----
scan a
 ├── columns: s:4(string) i:2(int) f:3(float)
 └── ordering: +1,+2,+4

memo
SELECT s, i, f FROM a ORDER BY k, i, s
----
[7: "p:s:4,i:2,f:3 o:+1,+2,+4"]
memo
 ├── 7: (scan a) (scan a@s_idx)
 │    ├── "" [cost=1000.00]
 │    │    └── best: (scan a)
 │    └── "p:s:4,i:2,f:3 o:+1,+2,+4" [cost=1000.00]
 │         └── best: (scan a)
 ├── 6: (projections 2 3 4 5)
 ├── 5: (variable a.k)
 ├── 4: (variable a.f)
 ├── 3: (variable a.i)
 ├── 2: (variable a.s)
 └── 1: (scan a)

# Secondary index has right order, but is not covering.
opt
SELECT s, j FROM a ORDER BY s
----
sort
 ├── columns: s:4(string) j:5(jsonb)
 ├── ordering: +4
 └── scan a
      └── columns: a.s:4(string) a.j:5(jsonb)

memo
SELECT s, j FROM a ORDER BY s
----
[5: "p:s:4,j:5 o:+4"]
memo
 ├── 5: (scan a) (scan a@si_idx)
 │    ├── "" [cost=1000.00]
 │    │    └── best: (scan a)
 │    └── "p:s:4,j:5 o:+4" [cost=1250.00]
 │         └── best: (sort 5)
 ├── 4: (projections 2 3)
 ├── 3: (variable a.j)
 ├── 2: (variable a.s)
 └── 1: (scan a)

# Consider three different indexes, and pick index with multiple keys.
opt
SELECT i, k FROM a ORDER BY s DESC, i, k
----
scan a@si_idx
 ├── columns: i:2(int) k:1(int!null)
 └── ordering: -4,+2,+1

memo
SELECT i, k FROM a ORDER BY s DESC, i, k
----
[6: "p:i:2,k:1 o:-4,+2,+1"]
memo
 ├── 6: (scan a) (scan a@s_idx) (scan a@si_idx)
 │    ├── "" [cost=1000.00]
 │    │    └── best: (scan a)
 │    └── "p:i:2,k:1 o:-4,+2,+1" [cost=1000.00]
 │         └── best: (scan a@si_idx)
 ├── 5: (projections 2 3 4)
 ├── 4: (variable a.s)
 ├── 3: (variable a.k)
 ├── 2: (variable a.i)
 └── 1: (scan a)

memo
SELECT i, k FROM a WHERE s >= 'foo'
----
[12: "p:i:2,k:1"]
memo
 ├── 13: (true)
 ├── 12: (project 11 9)
 │    └── "p:i:2,k:1" [cost=100.00]
 │         └── best: (project 11 9)
 ├── 11: (select 10 5) (scan a@s_idx,constrained) (scan a@si_idx,constrained)
 │    └── "" [cost=100.00]
 │         └── best: (scan a@s_idx,constrained)
 ├── 10: (scan a) (scan a@s_idx) (scan a@si_idx)
 │    └── "" [cost=1000.00]
 │         └── best: (scan a)
 ├── 9: (projections 7 8)
 ├── 8: (variable a.k)
 ├── 7: (variable a.i)
 ├── 6: (select 1 5)
 ├── 5: (filters 4)
 ├── 4: (ge 2 3)
 ├── 3: (const 'foo')
 ├── 2: (variable a.s)
 └── 1: (scan a)
