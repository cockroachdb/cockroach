exec-ddl
CREATE TABLE a
(
    k INT PRIMARY KEY,
    i INT,
    f FLOAT,
    s STRING,
    j JSON,
    INDEX s_idx (s) STORING (i, f),
    INDEX si_idx (s DESC, i DESC) STORING (j),
    INVERTED INDEX inv_idx_j (j)
)
----

# --------------------------------------------------
# GenerateIndexScans
# --------------------------------------------------

# Revscan won't be used here because there is no index with f
# sorted by ASC, k DESC
opt
SELECT k,f FROM a ORDER BY f DESC, k ASC LIMIT 10
----
limit
 ├── columns: k:1!null f:3
 ├── internal-ordering: -3,+1
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(3)
 ├── ordering: -3,+1
 ├── sort
 │    ├── columns: k:1!null f:3
 │    ├── key: (1)
 │    ├── fd: (1)-->(3)
 │    ├── ordering: -3,+1
 │    ├── limit hint: 10.00
 │    └── scan a@s_idx
 │         ├── columns: k:1!null f:3
 │         ├── key: (1)
 │         └── fd: (1)-->(3)
 └── 10

opt
SELECT k,f from a ORDER BY k DESC LIMIT 10
----
scan a,rev
 ├── columns: k:1!null f:3
 ├── limit: 10(rev)
 ├── key: (1)
 ├── fd: (1)-->(3)
 └── ordering: -1

memo
SELECT k,f FROM a ORDER BY k DESC LIMIT 10
----
memo (optimized, ~3KB, required=[presentation: k:1,f:3] [ordering: -1])
 ├── G1: (limit G2 G3 ordering=-1) (scan a,rev,cols=(1,3),lim=10(rev))
 │    ├── [presentation: k:1,f:3] [ordering: -1]
 │    │    ├── best: (scan a,rev,cols=(1,3),lim=10(rev))
 │    │    └── cost: 15.04
 │    └── []
 │         ├── best: (scan a,rev,cols=(1,3),lim=10(rev))
 │         └── cost: 15.04
 ├── G2: (scan a,cols=(1,3)) (scan a@s_idx,cols=(1,3))
 │    ├── [ordering: -1] [limit hint: 10.00]
 │    │    ├── best: (scan a,rev,cols=(1,3))
 │    │    └── cost: 25.71
 │    └── []
 │         ├── best: (scan a@s_idx,cols=(1,3))
 │         └── cost: 1084.61
 └── G3: (const 10)


opt
SELECT s FROM a ORDER BY k DESC
----
scan a,rev
 ├── columns: s:4  [hidden: k:1!null]
 ├── key: (1)
 ├── fd: (1)-->(4)
 └── ordering: -1

opt
SELECT k FROM a ORDER BY k ASC
----
scan a
 ├── columns: k:1!null
 ├── key: (1)
 └── ordering: +1

opt
SELECT k FROM a ORDER BY k DESC
----
scan a,rev
 ├── columns: k:1!null
 ├── key: (1)
 └── ordering: -1

opt
SELECT s,i,k,j FROM a ORDER BY s DESC, i DESC, k ASC
----
scan a@si_idx
 ├── columns: s:4 i:2 k:1!null j:5
 ├── key: (1)
 ├── fd: (1)-->(2,4,5)
 └── ordering: -4,-2,+1

# Revscan node won't be used because ordering is
# only partial (reverse) match with existing indices
opt
SELECT s,i,k,j FROM a ORDER BY s DESC, i DESC, k DESC
----
sort (segmented)
 ├── columns: s:4 i:2 k:1!null j:5
 ├── key: (1)
 ├── fd: (1)-->(2,4,5)
 ├── ordering: -4,-2,-1
 └── scan a@si_idx
      ├── columns: k:1!null i:2 s:4 j:5
      ├── key: (1)
      ├── fd: (1)-->(2,4,5)
      └── ordering: -4,-2

# Revscan node won't be used because ordering is
# only partial (reverse) match with existing indices
opt
SELECT s,i,k,j FROM a ORDER BY s DESC, i ASC, k DESC
----
sort (segmented)
 ├── columns: s:4 i:2 k:1!null j:5
 ├── key: (1)
 ├── fd: (1)-->(2,4,5)
 ├── ordering: -4,+2,-1
 └── scan a@si_idx
      ├── columns: k:1!null i:2 s:4 j:5
      ├── key: (1)
      ├── fd: (1)-->(2,4,5)
      └── ordering: -4

opt
SELECT s,i,k,j FROM a ORDER BY s ASC, i ASC, k DESC
----
scan a@si_idx,rev
 ├── columns: s:4 i:2 k:1!null j:5
 ├── key: (1)
 ├── fd: (1)-->(2,4,5)
 └── ordering: +4,+2,-1

memo
SELECT k FROM a ORDER BY k ASC
----
memo (optimized, ~2KB, required=[presentation: k:1] [ordering: +1])
 └── G1: (scan a,cols=(1)) (scan a@s_idx,cols=(1)) (scan a@si_idx,cols=(1))
      ├── [presentation: k:1] [ordering: +1]
      │    ├── best: (scan a,cols=(1))
      │    └── cost: 1084.61
      └── []
           ├── best: (scan a@s_idx,cols=(1))
           └── cost: 1074.51

# Scan of secondary index is lowest cost.
opt
SELECT s, i, f FROM a ORDER BY s, k, i
----
scan a@s_idx
 ├── columns: s:4 i:2 f:3  [hidden: k:1!null]
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 └── ordering: +4,+1

memo
SELECT s, i, f FROM a ORDER BY s, k, i
----
memo (optimized, ~2KB, required=[presentation: s:4,i:2,f:3] [ordering: +4,+1])
 └── G1: (scan a,cols=(1-4)) (scan a@s_idx,cols=(1-4))
      ├── [presentation: s:4,i:2,f:3] [ordering: +4,+1]
      │    ├── best: (scan a@s_idx,cols=(1-4))
      │    └── cost: 1104.81
      └── []
           ├── best: (scan a@s_idx,cols=(1-4))
           └── cost: 1104.81

# No index-join should be generated for a@si_idx, since it is not constrained.
exploretrace rule=GenerateIndexScans
SELECT s, i, f FROM a ORDER BY s, k, i
----
----
================================================================================
GenerateIndexScans
================================================================================
Source expression:
  sort
   ├── columns: s:4 i:2 f:3  [hidden: k:1!null]
   ├── key: (1)
   ├── fd: (1)-->(2-4)
   ├── ordering: +4,+1
   └── scan a
        ├── columns: k:1!null i:2 f:3 s:4
        ├── key: (1)
        └── fd: (1)-->(2-4)

New expression 1 of 1:
  scan a@s_idx
   ├── columns: s:4 i:2 f:3  [hidden: k:1!null]
   ├── key: (1)
   ├── fd: (1)-->(2-4)
   └── ordering: +4,+1
----
----

# Scans over partial indexes should be generated when the partial index
# predicates always evaluate to true.

exec-ddl
CREATE TABLE p (i INT, INDEX (i) WHERE 1 = 1)
----

opt
SELECT i FROM p ORDER BY i
----
scan p@secondary,partial
 ├── columns: i:1
 └── ordering: +1

memo
SELECT s, i, f FROM a ORDER BY f
----
memo (optimized, ~2KB, required=[presentation: s:4,i:2,f:3] [ordering: +3])
 └── G1: (scan a,cols=(2-4)) (scan a@s_idx,cols=(2-4))
      ├── [presentation: s:4,i:2,f:3] [ordering: +3]
      │    ├── best: (sort G1)
      │    └── cost: 1344.18
      └── []
           ├── best: (scan a@s_idx,cols=(2-4))
           └── cost: 1094.71

memo
SELECT s, i, f FROM a ORDER BY s DESC, i
----
memo (optimized, ~2KB, required=[presentation: s:4,i:2,f:3] [ordering: -4,+2])
 └── G1: (scan a,cols=(2-4)) (scan a@s_idx,cols=(2-4))
      ├── [presentation: s:4,i:2,f:3] [ordering: -4,+2]
      │    ├── best: (sort G1="[ordering: -4]")
      │    └── cost: 1321.81
      ├── [ordering: -4]
      │    ├── best: (scan a@s_idx,rev,cols=(2-4))
      │    └── cost: 1195.36
      └── []
           ├── best: (scan a@s_idx,cols=(2-4))
           └── cost: 1094.71

# Force an index in order to ensure that an index join is created.
opt
SELECT * FROM a@si_idx
----
index-join a
 ├── columns: k:1!null i:2 f:3 s:4 j:5
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 └── scan a@si_idx
      ├── columns: k:1!null i:2 s:4 j:5
      ├── flags: force-index=si_idx
      ├── key: (1)
      └── fd: (1)-->(2,4,5)

exec-ddl
CREATE TABLE abc (
  a INT,
  b INT,
  c INT,
  d CHAR,
  PRIMARY KEY (a, b, c),
  UNIQUE INDEX bc (b, c),
  INDEX ba (b, a),
  FAMILY (a, b, c),
  FAMILY (d)
)
----

memo
SELECT d FROM abc ORDER BY lower(d)
----
memo (optimized, ~3KB, required=[presentation: d:4] [ordering: +7])
 ├── G1: (project G2 G3 d)
 │    ├── [presentation: d:4] [ordering: +7]
 │    │    ├── best: (sort G1)
 │    │    └── cost: 1333.99
 │    └── []
 │         ├── best: (project G2 G3 d)
 │         └── cost: 1094.52
 ├── G2: (scan abc,cols=(4))
 │    └── []
 │         ├── best: (scan abc,cols=(4))
 │         └── cost: 1074.51
 ├── G3: (projections G4)
 ├── G4: (function G5 lower)
 ├── G5: (scalar-list G6)
 └── G6: (variable d)

# Scan of primary index is lowest cost.
opt
SELECT s, i, f FROM a ORDER BY k, i, s
----
scan a
 ├── columns: s:4 i:2 f:3  [hidden: k:1!null]
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 └── ordering: +1

memo
SELECT s, i, f FROM a ORDER BY k, i, s
----
memo (optimized, ~2KB, required=[presentation: s:4,i:2,f:3] [ordering: +1])
 └── G1: (scan a,cols=(1-4)) (scan a@s_idx,cols=(1-4))
      ├── [presentation: s:4,i:2,f:3] [ordering: +1]
      │    ├── best: (scan a,cols=(1-4))
      │    └── cost: 1114.91
      └── []
           ├── best: (scan a@s_idx,cols=(1-4))
           └── cost: 1104.81

# Secondary index has right order
opt
SELECT s, j FROM a ORDER BY s
----
scan a@si_idx,rev
 ├── columns: s:4 j:5
 └── ordering: +4

memo
SELECT s, j FROM a ORDER BY s
----
memo (optimized, ~2KB, required=[presentation: s:4,j:5] [ordering: +4])
 └── G1: (scan a,cols=(4,5)) (scan a@si_idx,cols=(4,5))
      ├── [presentation: s:4,j:5] [ordering: +4]
      │    ├── best: (scan a@si_idx,rev,cols=(4,5))
      │    └── cost: 1185.26
      └── []
           ├── best: (scan a@si_idx,cols=(4,5))
           └── cost: 1084.61

# Consider three different indexes, and pick index with multiple keys.
opt
SELECT i, k FROM a ORDER BY s DESC, i, k
----
sort (segmented)
 ├── columns: i:2 k:1!null  [hidden: s:4]
 ├── key: (1)
 ├── fd: (1)-->(2,4)
 ├── ordering: -4,+2,+1
 └── scan a@si_idx
      ├── columns: k:1!null i:2 s:4
      ├── key: (1)
      ├── fd: (1)-->(2,4)
      └── ordering: -4

memo
SELECT i, k FROM a ORDER BY s DESC, i, k
----
memo (optimized, ~2KB, required=[presentation: i:2,k:1] [ordering: -4,+2,+1])
 └── G1: (scan a,cols=(1,2,4)) (scan a@s_idx,cols=(1,2,4)) (scan a@si_idx,cols=(1,2,4))
      ├── [presentation: i:2,k:1] [ordering: -4,+2,+1]
      │    ├── best: (sort G1="[ordering: -4]")
      │    └── cost: 1225.48
      ├── [ordering: -4]
      │    ├── best: (scan a@si_idx,cols=(1,2,4))
      │    └── cost: 1094.71
      └── []
           ├── best: (scan a@s_idx,cols=(1,2,4))
           └── cost: 1094.71

# GenerateIndexScans propagates row-level locking information.
opt
SELECT s, i, f FROM a ORDER BY s FOR UPDATE
----
scan a@s_idx
 ├── columns: s:4 i:2 f:3
 ├── locking: for-update
 ├── volatile
 └── ordering: +4

exec-ddl
CREATE TABLE fk_a (
    a INT PRIMARY KEY,
    t TIMESTAMPTZ DEFAULT NULL,
    UNIQUE INDEX (a) WHERE t is NULL
)
----

exec-ddl
CREATE TABLE fk_b (
    b INT PRIMARY KEY,
    a INT NOT NULL REFERENCES fk_a (a)
)
----

# Do not use a non-implied partial index for FK check scans.
opt expect-not=(GenerateIndexScans, GeneratePartialIndexScans)
INSERT INTO fk_b (b,a) VALUES (1,1)
----
insert fk_b
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:5 => b:1
 │    └── column2:6 => fk_b.a:2
 ├── input binding: &1
 ├── cardinality: [0 - 0]
 ├── volatile, mutations
 ├── values
 │    ├── columns: column1:5!null column2:6!null
 │    ├── cardinality: [1 - 1]
 │    ├── key: ()
 │    ├── fd: ()-->(5,6)
 │    └── (1, 1)
 └── f-k-checks
      └── f-k-checks-item: fk_b(a) -> fk_a(a)
           └── anti-join (lookup fk_a)
                ├── columns: a:7!null
                ├── key columns: [7] = [8]
                ├── lookup columns are key
                ├── cardinality: [0 - 1]
                ├── key: ()
                ├── fd: ()-->(7)
                ├── with-scan &1
                │    ├── columns: a:7!null
                │    ├── mapping:
                │    │    └──  column2:6 => a:7
                │    ├── cardinality: [1 - 1]
                │    ├── key: ()
                │    └── fd: ()-->(7)
                └── filters (true)

# --------------------------------------------------
# GenerateLocalityOptimizedScan
# --------------------------------------------------

exec-ddl
CREATE TABLE abc_part (
    r STRING NOT NULL CHECK (r IN ('east', 'west', 'central')),
    t INT NOT NULL CHECK (t IN (1, 2, 3)),
    a INT PRIMARY KEY,
    b INT,
    c INT,
    d INT,
    UNIQUE WITHOUT INDEX (b),
    UNIQUE WITHOUT INDEX (c),
    UNIQUE INDEX b_idx (r, b) PARTITION BY LIST (r) (
      PARTITION east VALUES IN (('east')),
      PARTITION west VALUES IN (('west')),
      PARTITION central VALUES IN (('central'))
    ),
    UNIQUE INDEX c_idx (r, t, c) PARTITION BY LIST (r, t) (
      PARTITION east VALUES IN (('east', 1), ('east', 2)),
      PARTITION west VALUES IN (('west', DEFAULT)),
      PARTITION default VALUES IN (DEFAULT)
    ),
    INDEX d_idx (r, d) PARTITION BY LIST (r) (
      PARTITION east VALUES IN (('east')),
      PARTITION west VALUES IN (('west')),
      PARTITION central VALUES IN (('central'))
    )
)
----

exec-ddl
ALTER PARTITION "east" OF INDEX abc_part@b_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=east: 2}',
  lease_preferences = '[[+region=east]]'
----

exec-ddl
ALTER PARTITION "west" OF INDEX abc_part@b_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=west: 2}',
  lease_preferences = '[[+region=west]]';
----

exec-ddl
ALTER PARTITION "central" OF INDEX abc_part@b_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=central: 2}',
  lease_preferences = '[[+region=central]]';
----

exec-ddl
ALTER PARTITION "east" OF INDEX abc_part@c_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=east: 2}',
  lease_preferences = '[[+region=east]]'
----

exec-ddl
ALTER PARTITION "west" OF INDEX abc_part@c_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=west: 2}',
  lease_preferences = '[[+region=west]]'
----

exec-ddl
ALTER PARTITION "default" OF INDEX abc_part@c_idx CONFIGURE ZONE USING
  num_voters = 5,
  lease_preferences = '[[+region=central]]';
----

exec-ddl
ALTER PARTITION "east" OF INDEX abc_part@d_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=east: 2}',
  lease_preferences = '[[+region=east]]'
----

exec-ddl
ALTER PARTITION "west" OF INDEX abc_part@d_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=west: 2}',
  lease_preferences = '[[+region=west]]';
----

exec-ddl
ALTER PARTITION "central" OF INDEX abc_part@d_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=central: 2}',
  lease_preferences = '[[+region=central]]';
----

opt locality=(region=east) expect=GenerateLocalityOptimizedScan
SELECT a FROM abc_part WHERE b = 1
----
project
 ├── columns: a:3!null
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(3)
 └── locality-optimized-search
      ├── columns: a:3!null b:4!null
      ├── left columns: a:11 b:12
      ├── right columns: a:19 b:20
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(3,4)
      ├── scan abc_part@b_idx
      │    ├── columns: a:11!null b:12!null
      │    ├── constraint: /9/12: [/'east'/1 - /'east'/1]
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    └── fd: ()-->(11,12)
      └── scan abc_part@b_idx
           ├── columns: a:19!null b:20!null
           ├── constraint: /17/20
           │    ├── [/'central'/1 - /'central'/1]
           │    └── [/'west'/1 - /'west'/1]
           ├── cardinality: [0 - 1]
           ├── key: ()
           └── fd: ()-->(19,20)

opt locality=(region=west) expect=GenerateLocalityOptimizedScan
SELECT * FROM abc_part WHERE b = 1
----
index-join abc_part
 ├── columns: r:1!null t:2!null a:3!null b:4!null c:5 d:6
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-6)
 └── locality-optimized-search
      ├── columns: r:1!null a:3!null b:4!null
      ├── left columns: r:9 a:11 b:12
      ├── right columns: r:17 a:19 b:20
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1,3,4)
      ├── scan abc_part@b_idx
      │    ├── columns: r:9!null a:11!null b:12!null
      │    ├── constraint: /9/12: [/'west'/1 - /'west'/1]
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    └── fd: ()-->(9,11,12)
      └── scan abc_part@b_idx
           ├── columns: r:17!null a:19!null b:20!null
           ├── constraint: /17/20
           │    ├── [/'central'/1 - /'central'/1]
           │    └── [/'east'/1 - /'east'/1]
           ├── cardinality: [0 - 1]
           ├── key: ()
           └── fd: ()-->(17,19,20)

opt locality=(region=central) expect=GenerateLocalityOptimizedScan
SELECT * FROM abc_part WHERE b = 1
----
index-join abc_part
 ├── columns: r:1!null t:2!null a:3!null b:4!null c:5 d:6
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-6)
 └── locality-optimized-search
      ├── columns: r:1!null a:3!null b:4!null
      ├── left columns: r:9 a:11 b:12
      ├── right columns: r:17 a:19 b:20
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1,3,4)
      ├── scan abc_part@b_idx
      │    ├── columns: r:9!null a:11!null b:12!null
      │    ├── constraint: /9/12: [/'central'/1 - /'central'/1]
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    └── fd: ()-->(9,11,12)
      └── scan abc_part@b_idx
           ├── columns: r:17!null a:19!null b:20!null
           ├── constraint: /17/20
           │    ├── [/'east'/1 - /'east'/1]
           │    └── [/'west'/1 - /'west'/1]
           ├── cardinality: [0 - 1]
           ├── key: ()
           └── fd: ()-->(17,19,20)

opt locality=(region=east) expect=GenerateLocalityOptimizedScan
SELECT * FROM abc_part WHERE c = 1
----
index-join abc_part
 ├── columns: r:1!null t:2!null a:3!null b:4 c:5!null d:6
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-6)
 └── locality-optimized-search
      ├── columns: r:1!null t:2!null a:3!null c:5!null
      ├── left columns: r:9 t:10 a:11 c:13
      ├── right columns: r:17 t:18 a:19 c:21
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1-3,5)
      ├── scan abc_part@c_idx
      │    ├── columns: r:9!null t:10!null a:11!null c:13!null
      │    ├── constraint: /9/10/13
      │    │    ├── [/'east'/1/1 - /'east'/1/1]
      │    │    └── [/'east'/2/1 - /'east'/2/1]
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    └── fd: ()-->(9-11,13)
      └── scan abc_part@c_idx
           ├── columns: r:17!null t:18!null a:19!null c:21!null
           ├── constraint: /17/18/21
           │    ├── [/'central'/1/1 - /'central'/1/1]
           │    ├── [/'central'/2/1 - /'central'/2/1]
           │    ├── [/'central'/3/1 - /'central'/3/1]
           │    ├── [/'east'/3/1 - /'east'/3/1]
           │    ├── [/'west'/1/1 - /'west'/1/1]
           │    ├── [/'west'/2/1 - /'west'/2/1]
           │    └── [/'west'/3/1 - /'west'/3/1]
           ├── cardinality: [0 - 1]
           ├── key: ()
           └── fd: ()-->(17-19,21)

opt locality=(region=west) expect=GenerateLocalityOptimizedScan
SELECT * FROM abc_part WHERE c = 1
----
index-join abc_part
 ├── columns: r:1!null t:2!null a:3!null b:4 c:5!null d:6
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-6)
 └── locality-optimized-search
      ├── columns: r:1!null t:2!null a:3!null c:5!null
      ├── left columns: r:9 t:10 a:11 c:13
      ├── right columns: r:17 t:18 a:19 c:21
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1-3,5)
      ├── scan abc_part@c_idx
      │    ├── columns: r:9!null t:10!null a:11!null c:13!null
      │    ├── constraint: /9/10/13
      │    │    ├── [/'west'/1/1 - /'west'/1/1]
      │    │    ├── [/'west'/2/1 - /'west'/2/1]
      │    │    └── [/'west'/3/1 - /'west'/3/1]
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    └── fd: ()-->(9-11,13)
      └── scan abc_part@c_idx
           ├── columns: r:17!null t:18!null a:19!null c:21!null
           ├── constraint: /17/18/21
           │    ├── [/'central'/1/1 - /'central'/1/1]
           │    ├── [/'central'/2/1 - /'central'/2/1]
           │    ├── [/'central'/3/1 - /'central'/3/1]
           │    ├── [/'east'/1/1 - /'east'/1/1]
           │    ├── [/'east'/2/1 - /'east'/2/1]
           │    └── [/'east'/3/1 - /'east'/3/1]
           ├── cardinality: [0 - 1]
           ├── key: ()
           └── fd: ()-->(17-19,21)

opt locality=(region=central) expect=GenerateLocalityOptimizedScan
SELECT * FROM abc_part WHERE c = 1
----
index-join abc_part
 ├── columns: r:1!null t:2!null a:3!null b:4 c:5!null d:6
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-6)
 └── locality-optimized-search
      ├── columns: r:1!null t:2!null a:3!null c:5!null
      ├── left columns: r:9 t:10 a:11 c:13
      ├── right columns: r:17 t:18 a:19 c:21
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1-3,5)
      ├── scan abc_part@c_idx
      │    ├── columns: r:9!null t:10!null a:11!null c:13!null
      │    ├── constraint: /9/10/13
      │    │    ├── [/'central'/1/1 - /'central'/1/1]
      │    │    ├── [/'central'/2/1 - /'central'/2/1]
      │    │    ├── [/'central'/3/1 - /'central'/3/1]
      │    │    └── [/'east'/3/1 - /'east'/3/1]
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    └── fd: ()-->(9-11,13)
      └── scan abc_part@c_idx
           ├── columns: r:17!null t:18!null a:19!null c:21!null
           ├── constraint: /17/18/21
           │    ├── [/'east'/1/1 - /'east'/1/1]
           │    ├── [/'east'/2/1 - /'east'/2/1]
           │    ├── [/'west'/1/1 - /'west'/1/1]
           │    ├── [/'west'/2/1 - /'west'/2/1]
           │    └── [/'west'/3/1 - /'west'/3/1]
           ├── cardinality: [0 - 1]
           ├── key: ()
           └── fd: ()-->(17-19,21)

# b is constrained to multiple values.
opt locality=(region=east) expect=GenerateLocalityOptimizedScan
SELECT a FROM abc_part WHERE b IN (1, 2)
----
project
 ├── columns: a:3!null
 ├── cardinality: [0 - 2]
 ├── key: (3)
 └── locality-optimized-search
      ├── columns: a:3!null b:4!null
      ├── left columns: a:11 b:12
      ├── right columns: a:19 b:20
      ├── cardinality: [0 - 2]
      ├── key: (3)
      ├── fd: (3)-->(4), (4)-->(3)
      ├── scan abc_part@b_idx
      │    ├── columns: a:11!null b:12!null
      │    ├── constraint: /9/12: [/'east'/1 - /'east'/2]
      │    ├── cardinality: [0 - 2]
      │    ├── key: (11)
      │    └── fd: (11)-->(12), (12)-->(11)
      └── scan abc_part@b_idx
           ├── columns: a:19!null b:20!null
           ├── constraint: /17/20
           │    ├── [/'central'/1 - /'central'/2]
           │    └── [/'west'/1 - /'west'/2]
           ├── cardinality: [0 - 4]
           ├── key: (19)
           └── fd: (19)-->(20), (20)-->(19)

# b is constrained to more than 100000 values (the kv batch size).
opt locality=(region=east) expect-not=GenerateLocalityOptimizedScan
SELECT a FROM abc_part WHERE b >= 0 AND b < 100001
----
project
 ├── columns: a:3!null
 ├── cardinality: [0 - 100001]
 ├── key: (3)
 └── select
      ├── columns: a:3!null b:4!null
      ├── cardinality: [0 - 100001]
      ├── key: (3)
      ├── fd: (3)-->(4), (4)-->(3)
      ├── index-join abc_part
      │    ├── columns: a:3!null b:4
      │    ├── key: (3)
      │    ├── fd: (3)-->(4), (4)~~>(3)
      │    └── scan abc_part@c_idx
      │         ├── columns: a:3!null
      │         ├── constraint: /1/2/5
      │         │    ├── [/'central'/1 - /'central'/3]
      │         │    ├── [/'east'/1 - /'east'/3]
      │         │    └── [/'west'/1 - /'west'/3]
      │         └── key: (3)
      └── filters
           └── (b:4 >= 0) AND (b:4 < 100001) [outer=(4), constraints=(/4: [/0 - /100000]; tight)]

# The spans target all remote partitions.
opt locality=(region=east) expect-not=GenerateLocalityOptimizedScan
SELECT a FROM abc_part WHERE b = 1 AND r IN ('west', 'central')
----
project
 ├── columns: a:3!null
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(3)
 └── scan abc_part@b_idx
      ├── columns: r:1!null a:3!null b:4!null
      ├── constraint: /1/4
      │    ├── [/'central'/1 - /'central'/1]
      │    └── [/'west'/1 - /'west'/1]
      ├── cardinality: [0 - 1]
      ├── key: ()
      └── fd: ()-->(1,3,4)

# The scan is limited.
opt locality=(region=east) expect-not=GenerateLocalityOptimizedScan
SELECT a FROM abc_part WHERE d = 1 LIMIT 1
----
project
 ├── columns: a:3!null
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(3)
 └── scan abc_part@d_idx
      ├── columns: a:3!null d:6!null
      ├── constraint: /1/6/3
      │    ├── [/'central'/1 - /'central'/1]
      │    ├── [/'east'/1 - /'east'/1]
      │    └── [/'west'/1 - /'west'/1]
      ├── limit: 1
      ├── key: ()
      └── fd: ()-->(3,6)

# The scan is limited, but b is known to be a key, so the limit is discarded.
opt locality=(region=east) expect=GenerateLocalityOptimizedScan
SELECT a FROM abc_part WHERE b = 1 LIMIT 1
----
project
 ├── columns: a:3!null
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(3)
 └── locality-optimized-search
      ├── columns: a:3!null b:4!null
      ├── left columns: a:11 b:12
      ├── right columns: a:19 b:20
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(3,4)
      ├── scan abc_part@b_idx
      │    ├── columns: a:11!null b:12!null
      │    ├── constraint: /9/12: [/'east'/1 - /'east'/1]
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    └── fd: ()-->(11,12)
      └── scan abc_part@b_idx
           ├── columns: a:19!null b:20!null
           ├── constraint: /17/20
           │    ├── [/'central'/1 - /'central'/1]
           │    └── [/'west'/1 - /'west'/1]
           ├── cardinality: [0 - 1]
           ├── key: ()
           └── fd: ()-->(19,20)
