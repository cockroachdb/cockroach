exec-ddl
CREATE TABLE a
(
    k INT PRIMARY KEY,
    i INT,
    f FLOAT,
    s STRING,
    j JSON,
    INDEX s_idx (s) STORING (i, f),
    INDEX si_idx (s DESC, i) STORING (j)
)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 ├── INDEX primary
 │    └── k int not null
 ├── INDEX s_idx
 │    ├── s string
 │    ├── k int not null
 │    ├── i int (storing)
 │    └── f float (storing)
 └── INDEX si_idx
      ├── s string desc
      ├── i int
      ├── k int not null
      └── j jsonb (storing)

# --------------------------------------------------
# GenerateIndexScans
# --------------------------------------------------

# Scan of secondary index is lowest cost.
opt
SELECT s, i, f FROM a ORDER BY s, k, i
----
scan a@s_idx
 ├── columns: s:4(string) i:2(int) f:3(float)
 ├── keys: (1)
 └── ordering: +4,+1,+2

memo
SELECT s, i, f FROM a ORDER BY s, k, i
----
memo (optimized)
 ├── G1: (scan a,cols=(1-4)) (scan a@s_idx,cols=(1-4)) (lookup-join G2 a,cols=(1-4))
 │    ├── "[presentation: s:4,i:2,f:3] [ordering: +4,+1,+2]"
 │    │    ├── best: (scan a@s_idx,cols=(1-4))
 │    │    └── cost: 1000.00
 │    └── ""
 │         ├── best: (scan a,cols=(1-4))
 │         └── cost: 1000.00
 └── G2: (scan a@si_idx,cols=(1,2,4))
      ├── ""
      │    ├── best: (scan a@si_idx,cols=(1,2,4))
      │    └── cost: 1000.00
      └── "[ordering: +4,+1,+2]"
           ├── best: (sort G2)
           └── cost: 1099.66

memo
SELECT s, i, f FROM a ORDER BY f
----
memo (optimized)
 ├── G1: (scan a,cols=(2-4)) (scan a@s_idx,cols=(2-4)) (lookup-join G2 a,cols=(2-4))
 │    ├── "[presentation: s:4,i:2,f:3] [ordering: +3]"
 │    │    ├── best: (sort G1)
 │    │    └── cost: 1099.66
 │    └── ""
 │         ├── best: (scan a,cols=(2-4))
 │         └── cost: 1000.00
 └── G2: (scan a@si_idx,cols=(1,2,4))
      └── ""
           ├── best: (scan a@si_idx,cols=(1,2,4))
           └── cost: 1000.00

memo
SELECT s, i, f FROM a ORDER BY s DESC, i
----
memo (optimized)
 ├── G1: (scan a,cols=(2-4)) (scan a@s_idx,cols=(2-4)) (lookup-join G2 a,cols=(2-4))
 │    ├── "[presentation: s:4,i:2,f:3] [ordering: -4,+2]"
 │    │    ├── best: (sort G1)
 │    │    └── cost: 1099.66
 │    └── ""
 │         ├── best: (scan a,cols=(2-4))
 │         └── cost: 1000.00
 └── G2: (scan a@si_idx,cols=(1,2,4))
      ├── ""
      │    ├── best: (scan a@si_idx,cols=(1,2,4))
      │    └── cost: 1000.00
      └── "[ordering: -4,+2]"
           ├── best: (scan a@si_idx,cols=(1,2,4))
           └── cost: 1000.00

exec-ddl
CREATE TABLE abc (
  a INT,
  b INT,
  c INT,
  d CHAR,
  PRIMARY KEY (a, b, c),
  UNIQUE INDEX bc (b, c),
  INDEX ba (b, a),
  FAMILY (a, b, c),
  FAMILY (d)
)
----
TABLE abc
 ├── a int not null
 ├── b int not null
 ├── c int not null
 ├── d string
 ├── INDEX primary
 │    ├── a int not null
 │    ├── b int not null
 │    └── c int not null
 ├── INDEX bc
 │    ├── b int not null
 │    ├── c int not null
 │    └── a int not null (storing)
 └── INDEX ba
      ├── b int not null
      ├── a int not null
      └── c int not null

memo
SELECT d FROM abc ORDER BY LOWER(d)
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    ├── "[presentation: d:4] [ordering: +5]"
 │    │    ├── best: (sort G1)
 │    │    └── cost: 1099.66
 │    └── ""
 │         ├── best: (project G2 G3)
 │         └── cost: 1000.00
 ├── G2: (scan abc,cols=(4)) (lookup-join G4 abc,cols=(4)) (lookup-join G5 abc,cols=(4))
 │    └── ""
 │         ├── best: (scan abc,cols=(4))
 │         └── cost: 1000.00
 ├── G3: (projections G6 abc.d)
 ├── G4: (scan abc@bc,cols=(1-3))
 │    └── ""
 │         ├── best: (scan abc@bc,cols=(1-3))
 │         └── cost: 1000.00
 ├── G5: (scan abc@ba,cols=(1-3))
 │    └── ""
 │         ├── best: (scan abc@ba,cols=(1-3))
 │         └── cost: 1000.00
 ├── G6: (function G7 lower)
 └── G7: (variable abc.d)

memo
SELECT j FROM a WHERE s = 'foo'
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: j:5]"
 │         ├── best: (project G2 G3)
 │         └── cost: 1.00
 ├── G2: (select G4 G5) (scan a@si_idx,cols=(4,5),constrained) (lookup-join G6 a,cols=(4,5))
 │    └── ""
 │         ├── best: (scan a@si_idx,cols=(4,5),constrained)
 │         └── cost: 1.00
 ├── G3: (projections a.j)
 ├── G4: (scan a,cols=(4,5)) (lookup-join G7 a,cols=(4,5)) (scan a@si_idx,cols=(4,5))
 │    └── ""
 │         ├── best: (scan a,cols=(4,5))
 │         └── cost: 1000.00
 ├── G5: (filters G8)
 ├── G6: (scan a@s_idx,cols=(1,4),constrained)
 │    └── ""
 │         ├── best: (scan a@s_idx,cols=(1,4),constrained)
 │         └── cost: 1.00
 ├── G7: (scan a@s_idx,cols=(1,4))
 │    └── ""
 │         ├── best: (scan a@s_idx,cols=(1,4))
 │         └── cost: 1000.00
 ├── G8: (eq G9 G10)
 ├── G9: (variable a.s)
 └── G10: (const 'foo')

# Scan of primary index is lowest cost.
opt
SELECT s, i, f FROM a ORDER BY k, i, s
----
scan a
 ├── columns: s:4(string) i:2(int) f:3(float)
 ├── keys: (1)
 └── ordering: +1,+2,+4

memo
SELECT s, i, f FROM a ORDER BY k, i, s
----
memo (optimized)
 ├── G1: (scan a,cols=(1-4)) (scan a@s_idx,cols=(1-4)) (lookup-join G2 a,cols=(1-4))
 │    ├── "[presentation: s:4,i:2,f:3] [ordering: +1,+2,+4]"
 │    │    ├── best: (scan a,cols=(1-4))
 │    │    └── cost: 1000.00
 │    └── ""
 │         ├── best: (scan a,cols=(1-4))
 │         └── cost: 1000.00
 └── G2: (scan a@si_idx,cols=(1,2,4))
      ├── ""
      │    ├── best: (scan a@si_idx,cols=(1,2,4))
      │    └── cost: 1000.00
      └── "[ordering: +1,+2,+4]"
           ├── best: (sort G2)
           └── cost: 1099.66

# Secondary index has right order, but is not covering.
opt
SELECT s, j FROM a ORDER BY s
----
sort
 ├── columns: s:4(string) j:5(jsonb)
 ├── ordering: +4
 └── scan a
      └── columns: s:4(string) j:5(jsonb)

memo
SELECT s, j FROM a ORDER BY s
----
memo (optimized)
 ├── G1: (scan a,cols=(4,5)) (lookup-join G2 a,cols=(4,5)) (scan a@si_idx,cols=(4,5))
 │    ├── "[presentation: s:4,j:5] [ordering: +4]"
 │    │    ├── best: (sort G1)
 │    │    └── cost: 1099.66
 │    └── ""
 │         ├── best: (scan a,cols=(4,5))
 │         └── cost: 1000.00
 └── G2: (scan a@s_idx,cols=(1,4))
      ├── ""
      │    ├── best: (scan a@s_idx,cols=(1,4))
      │    └── cost: 1000.00
      └── "[ordering: +4]"
           ├── best: (scan a@s_idx,cols=(1,4))
           └── cost: 1000.00

# Consider three different indexes, and pick index with multiple keys.
opt
SELECT i, k FROM a ORDER BY s DESC, i, k
----
scan a@si_idx
 ├── columns: i:2(int) k:1(int!null)
 ├── keys: (1)
 └── ordering: -4,+2,+1

memo
SELECT i, k FROM a ORDER BY s DESC, i, k
----
memo (optimized)
 └── G1: (scan a,cols=(1,2,4)) (scan a@s_idx,cols=(1,2,4)) (scan a@si_idx,cols=(1,2,4))
      ├── "[presentation: i:2,k:1] [ordering: -4,+2,+1]"
      │    ├── best: (scan a@si_idx,cols=(1,2,4))
      │    └── cost: 1000.00
      └── ""
           ├── best: (scan a,cols=(1,2,4))
           └── cost: 1000.00

memo
SELECT i, k FROM a WHERE s >= 'foo'
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: i:2,k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 333.00
 ├── G2: (select G4 G5) (scan a@s_idx,cols=(1,2,4),constrained) (scan a@si_idx,cols=(1,2,4),constrained)
 │    └── ""
 │         ├── best: (scan a@s_idx,cols=(1,2,4),constrained)
 │         └── cost: 333.00
 ├── G3: (projections a.k a.i)
 ├── G4: (scan a,cols=(1,2,4)) (scan a@s_idx,cols=(1,2,4)) (scan a@si_idx,cols=(1,2,4))
 │    └── ""
 │         ├── best: (scan a,cols=(1,2,4))
 │         └── cost: 1000.00
 ├── G5: (filters G6)
 ├── G6: (ge G7 G8)
 ├── G7: (variable a.s)
 └── G8: (const 'foo')
