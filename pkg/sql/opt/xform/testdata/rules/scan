exec-ddl
CREATE TABLE a
(
    k INT PRIMARY KEY,
    i INT,
    f FLOAT,
    s STRING,
    j JSON,
    INDEX s_idx (s) STORING (i, f),
    INDEX si_idx (s DESC, i) STORING (j)
)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 ├── INDEX primary
 │    └── k int not null
 ├── INDEX s_idx
 │    ├── s string
 │    ├── k int not null
 │    ├── i int (storing)
 │    └── f float (storing)
 └── INDEX si_idx
      ├── s string desc
      ├── i int
      ├── k int not null
      └── j jsonb (storing)

# --------------------------------------------------
# GenerateIndexScans
# --------------------------------------------------

# Scan of secondary index is lowest cost.
opt
SELECT s, i, f FROM a ORDER BY s, k, i
----
scan a@s_idx
 ├── columns: s:4(string) i:2(int) f:3(float)
 ├── keys: (1)
 └── ordering: +4,+1,+2

memo
SELECT s, i, f FROM a ORDER BY s, k, i
----
memo (optimized)
 └── G1: (scan a) (scan a@s_idx)
      ├── "[presentation: s:4,i:2,f:3] [ordering: +4,+1,+2]"
      │    ├── best: (scan a@s_idx)
      │    └── cost: 1000.00
      └── ""
           ├── best: (scan a)
           └── cost: 1000.00

# Scan of primary index is lowest cost.
opt
SELECT s, i, f FROM a ORDER BY k, i, s
----
scan a
 ├── columns: s:4(string) i:2(int) f:3(float)
 ├── keys: (1)
 └── ordering: +1,+2,+4

memo
SELECT s, i, f FROM a ORDER BY k, i, s
----
memo (optimized)
 └── G1: (scan a) (scan a@s_idx)
      ├── "[presentation: s:4,i:2,f:3] [ordering: +1,+2,+4]"
      │    ├── best: (scan a)
      │    └── cost: 1000.00
      └── ""
           ├── best: (scan a)
           └── cost: 1000.00

# Secondary index has right order, but is not covering.
opt
SELECT s, j FROM a ORDER BY s
----
sort
 ├── columns: s:4(string) j:5(jsonb)
 ├── ordering: +4
 └── scan a
      └── columns: a.s:4(string) a.j:5(jsonb)

memo
SELECT s, j FROM a ORDER BY s
----
memo (optimized)
 └── G1: (scan a) (scan a@si_idx)
      ├── "[presentation: s:4,j:5] [ordering: +4]"
      │    ├── best: (sort G1)
      │    └── cost: 1250.00
      └── ""
           ├── best: (scan a)
           └── cost: 1000.00

# Consider three different indexes, and pick index with multiple keys.
opt
SELECT i, k FROM a ORDER BY s DESC, i, k
----
scan a@si_idx
 ├── columns: i:2(int) k:1(int!null)
 ├── keys: (1)
 └── ordering: -4,+2,+1

memo
SELECT i, k FROM a ORDER BY s DESC, i, k
----
memo (optimized)
 └── G1: (scan a) (scan a@s_idx) (scan a@si_idx)
      ├── "[presentation: i:2,k:1] [ordering: -4,+2,+1]"
      │    ├── best: (scan a@si_idx)
      │    └── cost: 1000.00
      └── ""
           ├── best: (scan a)
           └── cost: 1000.00

memo
SELECT i, k FROM a WHERE s >= 'foo'
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: i:2,k:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 100.00
 ├── G2: (select G4 G5) (scan a@s_idx,constrained) (scan a@si_idx,constrained)
 │    └── ""
 │         ├── best: (scan a@s_idx,constrained)
 │         └── cost: 100.00
 ├── G3: (projections G6 G7)
 ├── G4: (scan a) (scan a@s_idx) (scan a@si_idx)
 │    └── ""
 │         ├── best: (scan a)
 │         └── cost: 1000.00
 ├── G5: (filters G8)
 ├── G6: (variable a.i)
 ├── G7: (variable a.k)
 ├── G8: (ge G9 G10)
 ├── G9: (variable a.s)
 └── G10: (const 'foo')
