# =============================================================================
# comp.opt contains normalization rules for comparison operators.
# =============================================================================


# NormalizeVar ensures that variable references are on the left side of
# equality and inequality operators.
[NormalizeVar, Normalize]
(Eq | Ne
    $left:^(Variable)
    $right:(Variable)
)
=>
((OpName) $right $left)

# NormalizeTupleEquality breaks up expressions like:
#   (a, b, c) = (x, y, z)
# into
#   (a = x) AND (b = y) AND (c = z)
#
# This rule makes it easier to extract constraints from boolean expressions,
# so that recognition code doesn't have to handle the tuple case separately.
[NormalizeTupleEquality]
(Eq (Tuple $left:*) (Tuple $right:*))
=>
(NormalizeTupleEquality $left $right)

# FoldNullComparisonLeft replaces the comparison operator with null if its
# left input is null.
[FoldNullComparisonLeft, Normalize]
(Eq | Ne | Ge | Gt | Le | Lt | Like | NotLike | ILike | NotILike | SimilarTo |
    NotSimilarTo | RegMatch | NotRegMatch | RegIMatch | NotRegIMatch
    $left:(Null)
)
=>
(Null (BoolType))

# FoldNullComparisonRight replaces the comparison operator with null if its
# right input is null.
[FoldNullComparisonRight, Normalize]
(Eq | Ne | Ge | Gt | Le | Lt | Like | NotLike | ILike | NotILike | SimilarTo |
    NotSimilarTo | RegMatch | NotRegMatch | RegIMatch | NotRegIMatch
    *
    $right:(Null)
)
=>
(Null (BoolType))
