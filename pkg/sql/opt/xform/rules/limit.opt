# =============================================================================
# limit.opt contains exploration rules for the Limit and Offset operators.
# =============================================================================

# GenerateLimitedScans generates a set of limited Scan operators, one for each
# matching index on the scanned table. If the secondary index cannot provide all
# the output columns, an IndexJoin is introduced to supply them. Pushing a limit
# into Scan operators can substantially reduce the cost of execution, as rows
# are never fetched to begin with, rather than fetched only to be discarded by
# a Limit operator.
[GenerateLimitedScans, Explore]
(Limit
    (Scan $scanPrivate:* & (IsCanonicalScan $scanPrivate))
    (Const $limit:* & (IsPositiveInt $limit))
    $ordering:*
)
=>
(GenerateLimitedScans $scanPrivate $limit $ordering)

# PushLimitIntoConstrainedScan constructs a new Scan operator that adds a hard
# row limit to an existing Scan operator that already has a constraint
# associated with it (added by the ConstrainScans rule). The Scan operator
# always applies the limit after any constraint.
[PushLimitIntoConstrainedScan, Explore]
(Limit
    (Scan $scanPrivate:*)
    (Const $limit:* & (IsPositiveInt $limit))
    $ordering:* &
        (CanLimitConstrainedScan $scanPrivate $ordering)
)
=>
(Scan (LimitScanPrivate $scanPrivate $limit $ordering))

# PushLimitIntoIndexJoin pushes a limit through an index join and constructs a
# new Scan operator that incorporates it. Since index lookup can be expensive,
# it's always better to discard rows beforehand.
#
# TODO(radu): we can similarly push Offset too.
[PushLimitIntoIndexJoin, Explore]
(Limit
    (IndexJoin (Scan $scanPrivate:*) $indexJoinPrivate:*)
    (Const $limit:* & (IsPositiveInt $limit))
    $ordering:* &
        (CanLimitConstrainedScan $scanPrivate $ordering)
)
=>
(IndexJoin
    (Scan (LimitScanPrivate $scanPrivate $limit $ordering))
    $indexJoinPrivate
)

# SplitScanIntoUnionScans splits a scan under a limit into a union of limited
# scans. Example:
#
#    CREATE TABLE tab (region STRING, data INT NOT NULL, INDEX (region, data));
#
#    SELECT data
#    FROM tab
#    WHERE region='ASIA' OR region='EUROPE'
#    ORDER BY data DESC
#    LIMIT 1;
#
#    =>
#
#    SELECT data
#    FROM (SELECT * FROM tab WHERE region='ASIA' ORDER BY data LIMIT 1)
#    UNION ALL (SELECT * FROM tab WHERE region='EUROPE' ORDER BY data LIMIT 1)
#    ORDER BY data
#    LIMIT 1;
#
# See the SplitScanIntoUnionScans comment in xform/custom_funcs for details.
[SplitScanIntoUnionScans, Explore]
(Limit
    $scan:(Scan $scanPrivate:*) &
        (ScanIsConstrained $scanPrivate) &
        ^(ScanIsLimited $scanPrivate)
    $limitExpr:(Const $limit:*) & (IsPositiveInt $limit)
    $ordering:* &
        (Succeeded
            $unionScans:(SplitScanIntoUnionScans
                $ordering
                $scan
                $scanPrivate
                $limit
            )
        )
)
=>
(Limit $unionScans $limitExpr $ordering)
