# =============================================================================
# limit.opt contains exploration rules for the Limit and Offset operators.
# =============================================================================

# GenerateLimitedScans generates a set of limited Scan operators, one for each
# matching index on the scanned table. If the secondary index cannot provide all
# the output columns, an IndexJoin is introduced to supply them. Pushing a limit
# into Scan operators can substantially reduce the cost of execution, as rows
# are never fetched to begin with, rather than fetched only to be discarded by
# a Limit operator.
[GenerateLimitedScans, Explore]
(Limit
    (Scan $scanPrivate:* & (IsCanonicalScan $scanPrivate))
    (Const $limit:* & (IsPositiveInt $limit))
    $ordering:*
)
=>
(GenerateLimitedScans $scanPrivate $limit $ordering)

# PushLimitIntoFilteredScan constructs a new Scan operator that adds a hard row
# limit to an existing Scan operator that already has a constraint or scans a
# partial index. The scan operator always applies the limit after any
# constraint.
#
# Note that PushLimitIntoFilteredScan does not push limits into inverted index
# scans. Inverted index scans are not guaranteed to produce a specific number of
# result rows because they contain multiple entries for a single row indexed.
# Therefore, they cannot be considered for limited scans.
[PushLimitIntoFilteredScan, Explore]
(Limit
    (Scan $scanPrivate:*)
    (Const $limit:* & (IsPositiveInt $limit))
    $ordering:* & (CanLimitFilteredScan $scanPrivate $ordering)
)
=>
(Scan (LimitScanPrivate $scanPrivate $limit $ordering))

# PushLimitIntoIndexJoin pushes a limit through an index join. Since index
# lookup can be expensive, it's always better to discard rows beforehand.
#
# TODO(radu): we can similarly push Offset too.
[PushLimitIntoIndexJoin, Explore]
(Limit
    (IndexJoin $input:* $indexJoinPrivate:*) &
        (IndexJoinPreservesRows $indexJoinPrivate)
    $limitExpr:(Const $limit:* & (IsPositiveInt $limit))
    $ordering:* &
        (OrderingCanProjectCols
            $ordering
            $cols:(OutputCols $input)
        )
)
=>
(IndexJoin
    (Limit $input $limitExpr (PruneOrdering $ordering $cols))
    $indexJoinPrivate
)

# SplitLimitedScanIntoUnionScans splits a non-inverted scan under a limit into a
# union-all of limited scans over disjoint intervals. Example:
#
#    CREATE TABLE tab (region STRING, data INT NOT NULL, INDEX (region, data));
#
#    SELECT data
#    FROM tab
#    WHERE region='ASIA' OR region='EUROPE'
#    ORDER BY data DESC
#    LIMIT 1;
#
#    =>
#
#    SELECT data
#    FROM (SELECT * FROM tab WHERE region='ASIA' ORDER BY data LIMIT 1)
#    UNION ALL (SELECT * FROM tab WHERE region='EUROPE' ORDER BY data LIMIT 1)
#    ORDER BY data
#    LIMIT 1;
#
# See the SplitLimitedScanIntoUnionScans function in xform/custom_funcs for
# details.
[SplitLimitedScanIntoUnionScans, Explore]
(Limit
    $scan:(Scan $scanPrivate:*) &
        ^(ScanIsLimited $scanPrivate) &
        ^(ScanIsInverted $scanPrivate)
    $limitExpr:(Const $limit:*) & (IsPositiveInt $limit)
    $ordering:* &
        (Let
            ($unionScans $ok):(SplitLimitedScanIntoUnionScans
                $ordering
                $scan
                $scanPrivate
                $limit
            )
            $ok
        )
)
=>
(Limit $unionScans $limitExpr $ordering)

# SplitLimitedSelectIntoUnionSelects splits a Select from a non-inverted scan
# under a limit into a union-all of limited Selects over disjoint intervals.
[SplitLimitedSelectIntoUnionSelects, Explore]
(Limit
    (Select
        $scan:(Scan $scanPrivate:*) &
            ^(ScanIsLimited $scanPrivate) &
            ^(ScanIsInverted $scanPrivate)
        $filters:*
    )
    $limitExpr:(Const $limit:*) & (IsPositiveInt $limit)
    $ordering:* &
        (Let
            (
                $unionScans
                $ok
            ):(SplitLimitedSelectIntoUnionScansOrSelects
                $ordering
                $scan
                $scanPrivate
                $limit
                $filters
            )
            $ok
        )
)
=>
(Limit $unionScans $limitExpr $ordering)

# GenerateTopK generates an operator that returns the top K rows, where K is a
# positive constant integer, according to the ordering. It does not require its
# input to be ordered. This rule matches on a Limit expression that has an input
# ordering requirement that is also a positive constant integer and replaces it
# with a TopK expression.
#
# TopK has better performance over Limit when the input is not presorted and K
# is significantly smaller than the input row count.
# For example, take the following query:
#
#     CREATE TABLE tbl (INT a PRIMARY KEY, INT b)
#     SELECT * FROM tbl ORDER BY b LIMIT 10
#
# The output could be generated by scanning the input, sorting it by b
# ascending, then outputting the 10 highest rows. TopK, however, can scan
# the input, only tracking the top 10 rows according to column b, then sort the
# top 10 rows.
#
# If the input is already presorted, such as a primary key (e.g., if the example
# above used ORDER BY a), then Limit is more performant.
[GenerateTopK, Explore]
(Limit
    $input:*
    $limitExpr:(Const $limit:*) & (IsPositiveInt $limit)
    $ordering:* & ^(IsSameOrdering $ordering (EmptyOrdering))
)
=>
(TopK $input (MakeTopKPrivate $limit $ordering))

# GenerateLimitedTopKScans generates a set of Scan alternatives for
# each matching index on the scanned table, and an IndexJoin to supply columns
# missing from the index. This differs from GenerateIndexScans, which does not
# generate index joins for non-covering indexes.
#
# This rule is useful when there is an index that provides an ordering that
# partially satisfies TopK's ordering. This lets us explore expressions that
# allow TopK to process a potentially limited number of rows due to its input
# being already partially ordered, and allows TopK to pass on a limit hint to
# its input expressions so that they may not have to process all input rows,
# either.
[GenerateLimitedTopKScans, Explore]
(TopK
    (Scan $scanPrivate:* & (IsCanonicalScan $scanPrivate))
    $topKPrivate:*
)
=>
(GenerateLimitedTopKScans $scanPrivate $topKPrivate)

# GeneratePartialOrderTopK generates Top K expressions with a partial input
# ordering using the interesting ordering property. This is useful to explore
# expressions that allow TopK to potentially process fewer rows, which it can
# do if the input is already partially ordered. It also allows TopK to pass on
# a limit hint to its input expressions so that they may not have to process
# their entire input, either.
[GeneratePartialOrderTopK, Explore]
(TopK $input:* $private:*)
=>
(GeneratePartialOrderTopK $input $private)

# GenerateStreamingGroupByLimitOrderingHint generates streaming group-by and
# distinct-on aggregations with an ordering matching the ordering specified in
# the Limit Op. The goal is to eliminate the need for a TopK operation.
[GenerateStreamingGroupByLimitOrderingHint, Explore]
(Limit
    $aggregation:(GroupBy | DistinctOn
        $input:*
        $aggs:*
        $private:* & (IsCanonicalGroupBy $private)
    )
    (Const $limit:* & (IsPositiveInt $limit))
    $ordering:* &
        (Let
            (
                $groupingCols
                $newOrdering
                $ok
            ):(GroupingColsClosureOverlappingOrdering
                $input
                $private
                $ordering
            )
            $ok
        )
)
=>
(GenerateStreamingGroupByLimitOrderingHint
    (Root)
    $aggregation
    $input
    $aggs
    $private
    $groupingCols
    $newOrdering
)
