# =============================================================================
# limit.opt contains exploration rules for the Limit and Offset operators.
# =============================================================================


# PushLimitIntoScan constructs a new Scan operator that limits the number of
# returned rows. This can substantially reduce the cost of execution, as rows
# are never fetched to begin with, rather than fetched only to be discarded by
# a Limit operator.
[PushLimitIntoScan, Explore]
(Limit
    (Scan $def:*)
    (Const $limit:*)
    $ordering:* & (CanLimitScan $def $limit $ordering)
)
=>
(Scan
    (LimitScanDef $def $limit)
)

# PushLimitIntoLookupJoin pushes a limit through a lookup join, if we know that
# the lookup join produces exactly one row per input row (most importantly,
# index join).
# TODO(radu): we can similarly push Offset too.
[PushLimitIntoLookupJoin, Explore]
(Limit
    (LookupJoin
      $input:*
      $def:* & (OneResultPerInput $def)
    )
    $limit:*
    $ordering:* & (HasOrderingCols $input $ordering)
)
=>
(LookupJoin
  (Limit $input $limit $ordering)
  $def
)
