# =============================================================================
# join.opt contains exploration rules for the Join operator.
# =============================================================================

# CommuteJoin creates a Join with the left and right inputs swapped. This is
# useful for other rules that convert joins to other operators (like merge
# join).
# If any join hints are specified, we keep the order in the query.
[CommuteJoin, Explore]
(InnerJoin | FullJoin
    $left:*
    $right:*
    $on:*
    $private:* & (NoJoinHints $private)
)
=>
((OpName) $right $left $on $private)

# CommuteLeftJoin creates a Join with the left and right inputs swapped.
[CommuteLeftJoin, Explore]
(LeftJoin
    $left:*
    $right:*
    $on:*
    $private:* & (NoJoinHints $private)
)
=>
(RightJoin $right $left $on $private)

# CommuteRightJoin creates a Join with the left and right inputs swapped.
[CommuteRightJoin, Explore]
(RightJoin
    $left:*
    $right:*
    $on:*
    $private:* & (NoJoinHints $private)
)
=>
(LeftJoin $right $left $on $private)

# GenerateMergeJoins creates MergeJoin operators for the join, using the
# interesting orderings property.
[GenerateMergeJoins, Explore]
(JoinNonApply $left:* $right:* $on:* $private:*)
=>
(GenerateMergeJoins (OpName) $left $right $on $private)

# GenerateLookupJoins creates LookupJoin operators for all indexes (of the Scan
# table) which allow it (including non-covering indexes). See the
# GenerateLookupJoins custom function for more details.
[GenerateLookupJoins, Explore]
(InnerJoin | LeftJoin
    $left:*
    (Scan $scanPrivate:*) & (IsCanonicalScan $scanPrivate)
    $on:*
    $private:*
)
=>
(GenerateLookupJoins (OpName) $left $scanPrivate $on $private)

# GenerateZigzagJoins creates ZigzagJoin operators for all index pairs (of the
# Scan table) where the prefix column(s) of both indexes is/are fixed to
# constant values in the filters. See comments in GenerateZigzagJoin and
# distsqlrun/zigzagjoiner.go for more details on when a zigzag join can be
# planned.
[GenerateZigzagJoins, Explore]
(Select
    (Scan $scan:*) & (IsCanonicalScan $scan)
    $filters:*
)
=>
(GenerateZigzagJoins $scan $filters)

# GenerateInvertedIndexZigzagJoins creates ZigzagJoin operators for inverted
# indexes that can be constrained with two or more distinct constant values.
# Inverted indexes contain one row for each path-to-leaf in a JSON value, so one
# row in the primary index could generate multiple inverted index keys. This
# property can be exploited by zigzag joining on the same inverted index, fixed
# at any two of the JSON paths we are querying for.
[GenerateInvertedIndexZigzagJoins, Explore]
(Select
    (Scan $scan:*) & (IsCanonicalScan $scan) & (HasInvertedIndexes $scan)
    $filters:*
)
=>
(GenerateInvertedIndexZigzagJoins $scan $filters)

# GenerateLookupJoinWithFilter creates a LookupJoin alternative for a Join which
# has a Select->Scan combination as its right input. The filter can get merged
# with the ON condition (this is correct for both inner and left join).
[GenerateLookupJoinsWithFilter, Explore]
(InnerJoin | LeftJoin
    $left:*
    (Select
        (Scan $scanPrivate:*) & (IsCanonicalScan $scanPrivate)
        $filters:*
    )
    $on:*
    $private:*
)
=>
(GenerateLookupJoins (OpName) $left $scanPrivate (ConcatFilters $on $filters) $private)

# AssociateJoin applies the rule of join associativity. It converts an
# expression like:
#   (A JOIN B ON A.y = B.y) JOIN C ON B.x = C.x
# to the logically equivalent expression:
#   A JOIN (B JOIN C ON B.x = C.x) ON A.y = B.y
#
# If any of the joins contains a hint, we do not rearrange the joins.
[AssociateJoin, Explore]
(InnerJoin
    $left:(InnerJoin
        $innerLeft:*
        $innerRight:*
        $innerOn:*
        $innerPrivate:* & (NoJoinHints $innerPrivate)
    )
    $right:* & (ShouldReorderJoins $left $right)
    $on:*
    $private:* & (NoJoinHints $private)
)
=>
(InnerJoin
    $innerLeft
    (InnerJoin
        $innerRight
        $right
        (ExtractBoundConditions $on (OutputCols2 $innerRight $right))
        (EmptyJoinPrivate)
    )
    (SortFilters
        (ConcatFilters
            (ExtractUnboundConditions $on (OutputCols2 $innerRight $right))
            $innerOn
        )
    )
    (EmptyJoinPrivate)
)
