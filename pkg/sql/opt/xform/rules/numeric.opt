# =============================================================================
# numeric.opt contains normalization rules for numeric operators.
# =============================================================================

# FoldPlusZero folds $left + 0 for numeric types.
[FoldPlusZero, Normalize]
(Plus
    $left:*
    $right:(Const) & (IsZero $right)
)
=>
$left

# FoldZeroPlus folds 0 + $right for numeric types.
[FoldZeroPlus, Normalize]
(Plus
    $left:(Const) & (IsZero $left)
    $right:*
)
=>
$right

# FoldMinusZero folds $left - 0 for numeric types.
[FoldMinusZero, Normalize]
(Minus
    $left:*
    $right:(Const) & (IsZero $right)
)
=>
$left

# FoldMultOne folds $left * 1 for numeric types.
[FoldMultOne, Normalize]
(Mult
    $left:*
    $right:(Const) & (IsOne $right)
)
=>
$left

# FoldOneMult folds 1 * $right for numeric types.
[FoldOneMult, Normalize]
(Mult
    $left:(Const) & (IsOne $left)
    $right:*
)
=>
$right

# FoldDivOne folds $left / 1 for numeric types.
[FoldDivOne, Normalize]
(Div | FloorDiv
    $left:*
    $right:(Const) & (IsOne $right)
)
=>
$left

# FoldUnaryMinusZero folds -0 for numeric types (except for float which has
# negative zero).
[FoldUnaryMinusZero, Normalize]
(UnaryMinus
    $input:(Const) & (IsZero $input) & ^(HasFloatType $input)
)
=>
$input

# InvertMinus rewrites -(a - b) to (b - a) if the operand types allow it.
[InvertMinus, Normalize]
(UnaryMinus (Minus $left:* $right:*) & (CanConstructBinary Minus $right $left))
=>
(Minus $right $left)

# EliminateUnaryPlus discards the UnaryPlus operator.
[EliminateUnaryPlus, Normalize]
(UnaryPlus $input:*) => $input

# EliminateUnaryMinus discards a doubled UnaryMinus operator.
[EliminateUnaryMinus, Normalize]
(UnaryMinus (UnaryMinus $input:*)) => $input
