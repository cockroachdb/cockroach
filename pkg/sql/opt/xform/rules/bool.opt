# =============================================================================
# bool.opt contains normalization rules for boolean And, Or, Not, and Filters
# operators.
#
# In order to make filter matching easier, the Filters rules create a Filters
# operator to wrap the boolean conditions in Select and Join operators as a
# list of AND'd expressions. For example:
#   (InnerJoin
#     (Scan a)
#     (Scan b)
#     (Filters
#       (Eq (Variable a) (Variable b))
#       (Gt (Variable b) (Const 5))
#     )
#   )
#
# Now other rules can rely upon the presence of the Filters when matching:
#   (Select
#     $input:*
#     (Filters [ ... $conjunct:* ... ])
#   )
# =============================================================================


# EliminateEmptyAnd maps an empty And or Filters list to True.
[EliminateEmptyAnd, Normalize]
(And | Filters
    $conditions:[]
)
=>
(True)

# EliminateEmptyOr maps an empty Or list to False.
[EliminateEmptyOr, Normalize]
(Or
    $conditions:[]
)
=>
(False)

# EliminateSingletonAndOr discards an And or Or operator that has only one
# condition.
[EliminateSingletonAndOr, Normalize]
(And | Or
    $conditions:[ $item:* ]
)
=>
$item

# SimplifyAnd simplifies the And operator in several possible ways:
#   - Removes True operands
#   - Replaces the And operator with False if any operand is False
#   - Flattens nested And operands by merging their conditions into parent And
# This rule is especially important when we build a simplified filter.
[SimplifyAnd, Normalize]
(And
    $conditions:[ ... (And | True | False) ... ]
)
=>
(SimplifyAnd $conditions)

# SimplifyOr simplifies the Or operator in several possible ways:
#   - Removes False operands
#   - Replaces the Or operator with True if any operand is True
#   - Flattens nested Or operands by merging their conditions into parent Or
# This rule is especially important when we build a simplified filter.
[SimplifyOr, Normalize]
(Or
    $conditions:[ ... (Or | True | False) ... ]
)
=>
(SimplifyOr $conditions)

# FoldNullAndOr replaces the operator with Null if all of its operands are
# Null.
[FoldNullAndOr, Normalize]
(And | Or
    $conditions:[ (Null) ... ] & (ListOnlyHasNulls $conditions)
)
=>
(Null (BoolType))

# FoldNullFilters replaces a Filters operator with False if all of its operands
# are Null. Note that this is different behavior than the FoldNullAndOr rule,
# because Filters only appears as a Select or Join filter condition, both of
# which treat Null as if it were False.
[FoldNullFilters, Normalize]
(Filters
    $conditions:[ (Null) ... ] & (ListOnlyHasNulls $conditions)
)
=>
(False)

# NegateComparison inverts eligible comparison operators when they are negated
# by the Not operator. For example, Eq maps to Ne, and Gt maps to Le. All
# comparisons can be negated except for Contains.
[NegateComparison, Normalize]
(Not $input:(Comparison $left:* $right:*) & ^(Contains))
=>
(NegateComparison (OpName $input) $left $right)

# EliminateNot discards a doubled Not operator.
[EliminateNot, Normalize]
(Not (Not $input:*)) => $input

# NegateAnd converts the negation of a conjunction into a disjunction of
# negations.
[NegateAnd, Normalize]
(Not (And $conditions:*))
=>
(Or (NegateConditions $conditions))

# NegateOr converts the negation of a disjunction into a conjunction of
# negations.
[NegateOr, Normalize]
(Not (Or $conditions:*))
=>
(And (NegateConditions $conditions))
