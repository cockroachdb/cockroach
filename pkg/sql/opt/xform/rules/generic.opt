# =============================================================================
# generic.opt contains exploration rules for optimizing generic query plans.
# =============================================================================

# GenerateParameterizedJoin is an exploration rule that converts a Select
# expression with placeholders and stable expression in the filters into an
# InnerJoin that joins the Select's input with a Values expression that produces
# the placeholder values and stable expressions.
#
# This rule allows generic query plans, in which placeholder values are not
# known and stable expressions are not folded, to be optimized. By converting
# the Select into an InnerJoin, the optimizer can, in many cases, plan a lookup
# join which has similar performance characteristics to the constrained Scan
# that would be planned if the placeholder values were known.
#
# For example, consider a schema and query like:
#
#   CREATE TABLE t (i INT PRIMARY KEY)
#   SELECT * FROM t WHERE i = $1
#
# GenerateParameterizedJoin will perform the first transformation below, from a
# Select into a Join. GenerateLookupJoins will perform the second transformation
# from a (hash) Join into a LookupJoin.
#
#   Select (i=$1)              Join (i=col_$1)         LookupJoin (t@t_pkey)
# 	    |           ->            /   \           ->          |
# 	    |                        /     \                      |
# 	  Scan t             Values ($1)   Scan t              Values ($1)
#
[GenerateParameterizedJoin, Explore]
(Select
    $scan:(Scan $scanPrivate:*) &
        (GenericRulesEnabled) &
        (IsCanonicalScan $scanPrivate)
    $filters:* &
        (HasPlaceholdersOrStableExprs (Root)) &
        (Let
            (
                $values
                $newFilters
                $ok
            ):(GenerateParameterizedJoinValuesAndFilters
                $filters
            )
            $ok
        )
)
=>
(Project
    (InnerJoin
        $values
        $scan
        $newFilters
        (ParameterizedJoinPrivate)
    )
    []
    (OutputCols (Root))
)

# TODO: For the prototype:
# 1. Move constraint building to the distsql/exec factory constructors.
# 2. Build closures over immutable planning data in constructors and reuse them
#    for PlaceholderScans, Updates, Deletes, maybe others?
# 3. Benchmark the gains.
#
# TODO: For productions:
# 1. We need to actually cost these PlaceholderScans now. Maybe they can have
# the same cost as the lookup join, but like a little bit less?
# TODO: Check for empty on filters here?
[ConvertParameterizedJoinToPlaceholderScan, Explore]
(Project
    $lookup:(LookupJoin
        $values:(Values [ (Tuple $row:[ ... ]) ]) &
            (Let
                (
                    $span
                    $private
                    $ok
                ):(PlaceholderScanSpanAndPrivate
                    $lookup
                    $values
                    $row
                )
                $ok
            )
    )
    []
    *
)
=>
(PlaceholderScan $span $private)
