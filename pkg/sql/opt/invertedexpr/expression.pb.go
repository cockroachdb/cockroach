// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/opt/invertedexpr/expression.proto

package invertedexpr

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// SetOperator is an operator on sets.
type SetOperator int32

const (
	// None is used in an expression node with no children.
	None SetOperator = 0
	// SetUnion unions the children.
	SetUnion SetOperator = 1
	// SetIntersection intersects the children.
	SetIntersection SetOperator = 2
)

var SetOperator_name = map[int32]string{
	0: "None",
	1: "SetUnion",
	2: "SetIntersection",
}
var SetOperator_value = map[string]int32{
	"None":            0,
	"SetUnion":        1,
	"SetIntersection": 2,
}

func (x SetOperator) String() string {
	return proto.EnumName(SetOperator_name, int32(x))
}
func (SetOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_expression_ee34721732987e84, []int{0}
}

// SpanExpressionProto is a proto representation of an InvertedExpression
// tree consisting only of SpanExpressions. It is intended for use in
// expression execution.
type SpanExpressionProto struct {
	SpansToRead []SpanExpressionProto_Span `protobuf:"bytes,1,rep,name=spans_to_read,json=spansToRead,proto3" json:"spans_to_read"`
	Node        SpanExpressionProto_Node   `protobuf:"bytes,2,opt,name=node,proto3" json:"node"`
}

func (m *SpanExpressionProto) Reset()         { *m = SpanExpressionProto{} }
func (m *SpanExpressionProto) String() string { return proto.CompactTextString(m) }
func (*SpanExpressionProto) ProtoMessage()    {}
func (*SpanExpressionProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_expression_ee34721732987e84, []int{0}
}
func (m *SpanExpressionProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpanExpressionProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *SpanExpressionProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanExpressionProto.Merge(dst, src)
}
func (m *SpanExpressionProto) XXX_Size() int {
	return m.Size()
}
func (m *SpanExpressionProto) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanExpressionProto.DiscardUnknown(m)
}

var xxx_messageInfo_SpanExpressionProto proto.InternalMessageInfo

// Span is a span of the inverted index. Represents [start, end).
type SpanExpressionProto_Span struct {
	Start []byte `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   []byte `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *SpanExpressionProto_Span) Reset()         { *m = SpanExpressionProto_Span{} }
func (m *SpanExpressionProto_Span) String() string { return proto.CompactTextString(m) }
func (*SpanExpressionProto_Span) ProtoMessage()    {}
func (*SpanExpressionProto_Span) Descriptor() ([]byte, []int) {
	return fileDescriptor_expression_ee34721732987e84, []int{0, 0}
}
func (m *SpanExpressionProto_Span) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpanExpressionProto_Span) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *SpanExpressionProto_Span) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanExpressionProto_Span.Merge(dst, src)
}
func (m *SpanExpressionProto_Span) XXX_Size() int {
	return m.Size()
}
func (m *SpanExpressionProto_Span) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanExpressionProto_Span.DiscardUnknown(m)
}

var xxx_messageInfo_SpanExpressionProto_Span proto.InternalMessageInfo

type SpanExpressionProto_Node struct {
	FactoredUnionSpans []SpanExpressionProto_Span `protobuf:"bytes,1,rep,name=factored_union_spans,json=factoredUnionSpans,proto3" json:"factored_union_spans"`
	Operator           SetOperator                `protobuf:"varint,2,opt,name=operator,proto3,enum=cockroach.sql.opt.invertedexpr.SetOperator" json:"operator,omitempty"`
	Left               *SpanExpressionProto_Node  `protobuf:"bytes,3,opt,name=left,proto3" json:"left,omitempty"`
	Right              *SpanExpressionProto_Node  `protobuf:"bytes,4,opt,name=right,proto3" json:"right,omitempty"`
}

func (m *SpanExpressionProto_Node) Reset()         { *m = SpanExpressionProto_Node{} }
func (m *SpanExpressionProto_Node) String() string { return proto.CompactTextString(m) }
func (*SpanExpressionProto_Node) ProtoMessage()    {}
func (*SpanExpressionProto_Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_expression_ee34721732987e84, []int{0, 1}
}
func (m *SpanExpressionProto_Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpanExpressionProto_Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *SpanExpressionProto_Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanExpressionProto_Node.Merge(dst, src)
}
func (m *SpanExpressionProto_Node) XXX_Size() int {
	return m.Size()
}
func (m *SpanExpressionProto_Node) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanExpressionProto_Node.DiscardUnknown(m)
}

var xxx_messageInfo_SpanExpressionProto_Node proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SpanExpressionProto)(nil), "cockroach.sql.opt.invertedexpr.SpanExpressionProto")
	proto.RegisterType((*SpanExpressionProto_Span)(nil), "cockroach.sql.opt.invertedexpr.SpanExpressionProto.Span")
	proto.RegisterType((*SpanExpressionProto_Node)(nil), "cockroach.sql.opt.invertedexpr.SpanExpressionProto.Node")
	proto.RegisterEnum("cockroach.sql.opt.invertedexpr.SetOperator", SetOperator_name, SetOperator_value)
}
func (m *SpanExpressionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanExpressionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SpansToRead) > 0 {
		for _, msg := range m.SpansToRead {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExpression(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintExpression(dAtA, i, uint64(m.Node.Size()))
	n1, err := m.Node.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *SpanExpressionProto_Span) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanExpressionProto_Span) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Start) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExpression(dAtA, i, uint64(len(m.Start)))
		i += copy(dAtA[i:], m.Start)
	}
	if len(m.End) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExpression(dAtA, i, uint64(len(m.End)))
		i += copy(dAtA[i:], m.End)
	}
	return i, nil
}

func (m *SpanExpressionProto_Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanExpressionProto_Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FactoredUnionSpans) > 0 {
		for _, msg := range m.FactoredUnionSpans {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExpression(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Operator != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExpression(dAtA, i, uint64(m.Operator))
	}
	if m.Left != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExpression(dAtA, i, uint64(m.Left.Size()))
		n2, err := m.Left.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Right != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintExpression(dAtA, i, uint64(m.Right.Size()))
		n3, err := m.Right.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintExpression(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SpanExpressionProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpansToRead) > 0 {
		for _, e := range m.SpansToRead {
			l = e.Size()
			n += 1 + l + sovExpression(uint64(l))
		}
	}
	l = m.Node.Size()
	n += 1 + l + sovExpression(uint64(l))
	return n
}

func (m *SpanExpressionProto_Span) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovExpression(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovExpression(uint64(l))
	}
	return n
}

func (m *SpanExpressionProto_Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FactoredUnionSpans) > 0 {
		for _, e := range m.FactoredUnionSpans {
			l = e.Size()
			n += 1 + l + sovExpression(uint64(l))
		}
	}
	if m.Operator != 0 {
		n += 1 + sovExpression(uint64(m.Operator))
	}
	if m.Left != nil {
		l = m.Left.Size()
		n += 1 + l + sovExpression(uint64(l))
	}
	if m.Right != nil {
		l = m.Right.Size()
		n += 1 + l + sovExpression(uint64(l))
	}
	return n
}

func sovExpression(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExpression(x uint64) (n int) {
	return sovExpression(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SpanExpressionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpression
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanExpressionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanExpressionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpansToRead", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpression
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpansToRead = append(m.SpansToRead, SpanExpressionProto_Span{})
			if err := m.SpansToRead[len(m.SpansToRead)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpression
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpression(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpression
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpanExpressionProto_Span) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpression
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Span: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Span: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExpression
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = append(m.Start[:0], dAtA[iNdEx:postIndex]...)
			if m.Start == nil {
				m.Start = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExpression
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = append(m.End[:0], dAtA[iNdEx:postIndex]...)
			if m.End == nil {
				m.End = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpression(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpression
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpanExpressionProto_Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpression
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoredUnionSpans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpression
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FactoredUnionSpans = append(m.FactoredUnionSpans, SpanExpressionProto_Span{})
			if err := m.FactoredUnionSpans[len(m.FactoredUnionSpans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operator |= (SetOperator(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpression
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Left == nil {
				m.Left = &SpanExpressionProto_Node{}
			}
			if err := m.Left.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpression
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Right == nil {
				m.Right = &SpanExpressionProto_Node{}
			}
			if err := m.Right.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpression(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpression
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExpression(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExpression
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExpression
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExpression
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExpression(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExpression = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExpression   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("sql/opt/invertedexpr/expression.proto", fileDescriptor_expression_ee34721732987e84)
}

var fileDescriptor_expression_ee34721732987e84 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x41, 0x8b, 0x13, 0x31,
	0x14, 0xc7, 0x27, 0x6d, 0x56, 0x4a, 0x5a, 0xb5, 0x64, 0x7b, 0x18, 0x7a, 0x88, 0x45, 0x10, 0x16,
	0x85, 0x0c, 0xac, 0x17, 0x8f, 0xb2, 0x20, 0x22, 0xc8, 0x2a, 0x53, 0xbd, 0x78, 0x19, 0xb2, 0x33,
	0x6f, 0xbb, 0x83, 0x25, 0x2f, 0x9b, 0x3c, 0xc5, 0x8f, 0xe0, 0xd1, 0xef, 0xe0, 0x97, 0xe9, 0x71,
	0x8f, 0x7b, 0x72, 0x75, 0xfa, 0x45, 0x24, 0xe9, 0xba, 0xf4, 0x20, 0x0a, 0xd6, 0xcb, 0xf0, 0xe6,
	0xe5, 0xfd, 0x7f, 0xef, 0x9f, 0x3f, 0x11, 0x0f, 0xc2, 0xf9, 0xb2, 0x40, 0x47, 0x45, 0x6b, 0x3f,
	0x82, 0x27, 0x68, 0xe0, 0x93, 0xf3, 0x45, 0xfc, 0x40, 0x08, 0x2d, 0x5a, 0xed, 0x3c, 0x12, 0x4a,
	0x55, 0x63, 0xfd, 0xde, 0xa3, 0xa9, 0xcf, 0x74, 0x38, 0x5f, 0x6a, 0x74, 0xa4, 0xb7, 0x05, 0xd3,
	0xc9, 0x02, 0x17, 0x98, 0x46, 0x8b, 0x58, 0x6d, 0x54, 0xf7, 0xaf, 0xb8, 0xd8, 0x9f, 0x3b, 0x63,
	0x9f, 0xdd, 0xe0, 0x5e, 0x27, 0xda, 0x89, 0xb8, 0x1d, 0x9c, 0xb1, 0xa1, 0x22, 0xac, 0x3c, 0x98,
	0x26, 0x67, 0xb3, 0xfe, 0xc1, 0xf0, 0xf0, 0x89, 0xfe, 0xf3, 0x16, 0xfd, 0x1b, 0x56, 0xea, 0x1d,
	0xf1, 0xd5, 0xb7, 0x7b, 0x59, 0x39, 0x4c, 0xd0, 0x37, 0x58, 0x82, 0x69, 0x64, 0x29, 0xb8, 0xc5,
	0x06, 0xf2, 0xde, 0x8c, 0xfd, 0x2b, 0xfa, 0x18, 0x1b, 0xb8, 0x46, 0x27, 0xd6, 0x54, 0x0b, 0x1e,
	0xe7, 0xe4, 0x44, 0xec, 0x05, 0x32, 0x9e, 0x72, 0x36, 0x63, 0x07, 0xa3, 0x72, 0xf3, 0x23, 0xc7,
	0xa2, 0x0f, 0xb6, 0x49, 0x0b, 0x47, 0x65, 0x2c, 0xa7, 0x57, 0x3d, 0xc1, 0x23, 0x44, 0x3a, 0x31,
	0x39, 0x35, 0x35, 0xa1, 0x87, 0xa6, 0xfa, 0x60, 0x5b, 0xb4, 0x55, 0xb2, 0xfa, 0x9f, 0xee, 0x2d,
	0x7f, 0xb1, 0xdf, 0x46, 0x74, 0x3c, 0x08, 0xf2, 0xb9, 0x18, 0xa0, 0x03, 0x6f, 0x08, 0x7d, 0x72,
	0x74, 0xe7, 0xf0, 0xd1, 0x5f, 0xb7, 0x00, 0xbd, 0xba, 0x96, 0x94, 0x37, 0x62, 0xf9, 0x52, 0xf0,
	0x25, 0x9c, 0x52, 0xde, 0xdf, 0x2d, 0xc7, 0x32, 0x51, 0xe4, 0xb1, 0xd8, 0xf3, 0xed, 0xe2, 0x8c,
	0x72, 0xbe, 0x23, 0x6e, 0x83, 0x79, 0xf8, 0x54, 0x0c, 0xb7, 0x6c, 0xcb, 0x41, 0xcc, 0xdb, 0xc2,
	0x38, 0x93, 0x23, 0x31, 0x98, 0x03, 0xa5, 0x40, 0xc6, 0x4c, 0xee, 0x8b, 0xbb, 0x73, 0xa0, 0x17,
	0x96, 0xc0, 0x07, 0xa8, 0x29, 0x36, 0x7b, 0x53, 0xfe, 0xf9, 0xab, 0xca, 0x8e, 0xf4, 0xea, 0x87,
	0xca, 0x56, 0x9d, 0x62, 0x17, 0x9d, 0x62, 0x97, 0x9d, 0x62, 0xdf, 0x3b, 0xc5, 0xbe, 0xac, 0x55,
	0x76, 0xb1, 0x56, 0xd9, 0xe5, 0x5a, 0x65, 0xef, 0x46, 0xdb, 0x8e, 0x4e, 0x6e, 0xa5, 0xa7, 0xfd,
	0xf8, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x32, 0xa9, 0xb1, 0x9f, 0x39, 0x03, 0x00, 0x00,
}
