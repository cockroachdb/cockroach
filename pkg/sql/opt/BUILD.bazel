load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "opt",
    srcs = [
        "colset.go",
        "column_meta.go",
        "constants.go",
        "doc.go",
        "metadata.go",
        "operator.go",
        "ordering.go",
        "rule_name.go",
        "table_meta.go",
        "telemetry.go",
        "view_dependencies.go",
        ":gen_operator.og.go",  # keep
        ":gen_rule_name.og.go",  # keep
        ":gen_rule_name_string.go",  # keep
    ],
    importpath = "github.com/cockroachdb/cockroach/pkg/sql/opt",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/server/telemetry",
        "//pkg/sql/catalog/colinfo",
        "//pkg/sql/opt/cat",
        "//pkg/sql/pgwire/pgcode",
        "//pkg/sql/pgwire/pgerror",
        "//pkg/sql/privilege",
        "//pkg/sql/sem/tree",
        "//pkg/sql/sqltelemetry",
        "//pkg/sql/types",
        "//pkg/util",
        "//pkg/util/log",
        "//vendor/github.com/cockroachdb/errors",
        "//vendor/github.com/lib/pq/oid",
    ],
)

go_test(
    name = "opt_test",
    srcs = [
        "colset_test.go",
        "metadata_test.go",
        "operator_test.go",
        "ordering_test.go",
    ],
    embed = [":opt"],
    deps = [
        "//pkg/sql/opt/cat",
        "//pkg/sql/opt/memo",
        "//pkg/sql/opt/testutils/testcat",
        "//pkg/sql/privilege",
        "//pkg/sql/sem/tree",
        "//pkg/sql/types",
        "//pkg/util",
    ],
)

ops = filegroup(
    name = "ops",
    srcs = glob(["ops/*.opt"]),
    visibility = ["//visibility:public"],
)

genrule(
    name = "gen_operator.og.go",
    srcs = [":ops"],
    outs = ["operator.og.go"],
    cmd = """
      $(location //pkg/sql/opt/optgen/cmd/optgen) -out $@ ops $(locations :ops)
    """,
    tools = ["//pkg/sql/opt/optgen/cmd/optgen"],
)

genrule(
    name = "gen_rule_name.og.go",
    srcs = [
        ":ops",
        "//pkg/sql/opt/xform:rules",
        "//pkg/sql/opt/norm:rules",
    ],
    outs = ["rule_name.og.go"],
    cmd = """
      $(location //pkg/sql/opt/optgen/cmd/optgen) -out $@ rulenames \
          $(locations :ops) $(locations //pkg/sql/opt/norm:rules) $(locations //pkg/sql/opt/xform:rules)
    """,
    tools = ["//pkg/sql/opt/optgen/cmd/optgen"],
)

ops = filegroup(
    name = "test",
    srcs = ["rule_name.go"],
)

# https://github.com/bazelbuild/rules_go/issues/2604 for the gosdk stuff
# TODO(irfansharif): This doesn't work when the og.go file is specified, I
# don't think stringer works across files in multiple directories.
#
# We manually copy it into the gen directory and stringer there. Ew.
genrule(
    name = "gen_rule_name_string.go",
    srcs = [
        "rule_name.go",
        "rule_name.og.go",
    ],
    outs = ["rule_name_string.go"],
    cmd = """
      cp $(location rule_name.go) `dirname $(location rule_name.og.go)`/rule_name.go
      env PATH=`dirname $(location @go_sdk//:bin/go)` HOME=$(GENDIR) \
      $(location @org_golang_x_tools//cmd/stringer:stringer) -output=$@ \
          -type=RuleName `dirname $(location rule_name.og.go)`/rule_name.go $(location rule_name.og.go)
    """,
    tools = [
        "@go_sdk//:bin/go",
        "@org_golang_x_tools//cmd/stringer",
    ],
)
