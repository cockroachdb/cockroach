# LogicTest: 5node

# The following tables form the interleaved hierarchy:
#   name:             primary key:                # rows:   'a' = id mod X :
#   parent1           (pid1)                      40        8
#     child1          (pid1, cid1)                150       66
#       grandchild1   (pid1, cid1, gcid1)         410       201
#     child2          (pid1, cid2, cid3)          15        7
#       grandchild2   (pid1, cid2, cid3, gcid2)   51        13
#   parent2           (pid2)                      5         2
# Additional rows in child1, child2, and grandchild1 with no corresponding
# parent row are also inserted.
#
# All IDs belonging to a table (pid1 --> parent1, cid1 --> child1, cid2,cid3
# --> child2, etc.) start from 1 up to (# rows).
# Foreign keys are modded by their ancestor's (# rows). For example, for child1
# row with cid1=500, we take ((cid1-1) % 200 + 1) = 100 as pid1.
# One exception is cid3, which is taken as cid2 % 15.
# There's a column 'a' that's modded by a factor.
#
# This allows us to test the following edge cases (in order of tests):
#   - one-to-many (parent1 - child1)
#   - one-to-one and one-to-none (parent1 - child2)
#   - parent-grandchild (parent1 - grandchild1)
#   - multiple interleaved columns (child2 - grandchild2)
#   - additional ancestor above (child2 - grandchild2)
#   - no interleaved relationship (parent1 - parent2, parent2 - child1)
#   - TODO(richardwu): sibling-sibling (child1 - child2)

statement ok
SET enable_interleaved_joins = true

#################
# Create tables #
#################

statement ok
CREATE TABLE parent1 (pid1 INT PRIMARY KEY, pa1 INT, FAMILY (pid1,pa1))

statement ok
CREATE TABLE parent2 (pid2 INT PRIMARY KEY, pa2 INT, FAMILY (pid2, pa2))

statement ok
CREATE TABLE child1 (
  pid1 INT,
  cid1 INT,
  ca1 INT,
  PRIMARY KEY(pid1, cid1),
  FAMILY (pid1,cid1,ca1)
)
INTERLEAVE IN PARENT parent1 (pid1)

statement ok
CREATE TABLE child2 (
  pid1 INT,
  cid2 INT,
  cid3 INT,
  ca2 INT,
  PRIMARY KEY(pid1, cid2, cid3),
  FAMILY (pid1,cid2,cid3,ca2)
)
INTERLEAVE IN PARENT parent1 (pid1)

statement ok
CREATE TABLE grandchild1 (
  pid1 INT,
  cid1 INT,
  gcid1 INT,
  gca1 INT,
  PRIMARY KEY(pid1, cid1, gcid1),
  FAMILY (pid1,cid1,gcid1,gca1)
)
INTERLEAVE IN PARENT child1 (pid1, cid1)

# No foreign key since we are permitting the rows to overflow out of child2
# for pid1 > 15.
statement ok
CREATE TABLE grandchild2 (
  pid1 INT,
  cid2 INT,
  cid3 INT,
  gcid2 INT,
  gca2 INT,
  PRIMARY KEY(pid1, cid2, cid3, gcid2),
  FAMILY (pid1, cid2, cid3, gcid2, gca2)
)
INTERLEAVE IN PARENT child2 (pid1, cid2, cid3)

####################
# Split our ranges #
####################

# Split at parent1 key into five parts.
statement ok
ALTER TABLE parent1 SPLIT AT SELECT i FROM generate_series(8, 32, 8) AS g(i)

# Split at child1 keys in between parent1 parts (total 10 parts).
statement ok
ALTER TABLE child1 SPLIT AT SELECT pid1, pid1 + 40 FROM
generate_series(4, 36, 8) AS g(pid1)

# Split at grandchild2 keys in between the 10 parts (total 20 parts).
statement ok
ALTER TABLE grandchild2 SPLIT AT SELECT pid1, pid1 + 40, pid1, pid1 FROM
generate_series(2, 38, 4) AS g(pid1)

# Relocate the twenty parts to the five nodes.
statement ok
ALTER TABLE grandchild2 EXPERIMENTAL_RELOCATE
  SELECT ARRAY[((i-1)/2)::INT%5+1], i, i+20, i, i FROM generate_series(1, 39, 2) AS g(i)

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE parent1]
----
start_key                   end_key                     replicas  lease_holder
NULL                        /2/#/56/1/42/2/#/58/1/2     {1}       1
/2/#/56/1/42/2/#/58/1/2     /4/#/55/1/44                {2}       2
/4/#/55/1/44                /6/#/56/1/46/6/#/58/1/6     {3}       3
/6/#/56/1/46/6/#/58/1/6     /8                          {4}       4
/8                          /10/#/56/1/50/10/#/58/1/10  {5}       5
/10/#/56/1/50/10/#/58/1/10  /12/#/55/1/52               {1}       1
/12/#/55/1/52               /14/#/56/1/54/14/#/58/1/14  {2}       2
/14/#/56/1/54/14/#/58/1/14  /16                         {3}       3
/16                         /18/#/56/1/58/18/#/58/1/18  {4}       4
/18/#/56/1/58/18/#/58/1/18  /20/#/55/1/60               {5}       5
/20/#/55/1/60               /22/#/56/1/62/22/#/58/1/22  {1}       1
/22/#/56/1/62/22/#/58/1/22  /24                         {2}       2
/24                         /26/#/56/1/66/26/#/58/1/26  {3}       3
/26/#/56/1/66/26/#/58/1/26  /28/#/55/1/68               {4}       4
/28/#/55/1/68               /30/#/56/1/70/30/#/58/1/30  {5}       5
/30/#/56/1/70/30/#/58/1/30  /32                         {1}       1
/32                         /34/#/56/1/74/34/#/58/1/34  {2}       2
/34/#/56/1/74/34/#/58/1/34  /36/#/55/1/76               {3}       3
/36/#/55/1/76               /38/#/56/1/78/38/#/58/1/38  {4}       4
/38/#/56/1/78/38/#/58/1/38  NULL                        {5}       5

query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE child1]
----
start_key                   end_key                     replicas  lease_holder
NULL                        /2/#/56/1/42/2/#/58/1/2     {1}       1
/2/#/56/1/42/2/#/58/1/2     /4/#/55/1/44                {2}       2
/4/#/55/1/44                /6/#/56/1/46/6/#/58/1/6     {3}       3
/6/#/56/1/46/6/#/58/1/6     /8                          {4}       4
/8                          /10/#/56/1/50/10/#/58/1/10  {5}       5
/10/#/56/1/50/10/#/58/1/10  /12/#/55/1/52               {1}       1
/12/#/55/1/52               /14/#/56/1/54/14/#/58/1/14  {2}       2
/14/#/56/1/54/14/#/58/1/14  /16                         {3}       3
/16                         /18/#/56/1/58/18/#/58/1/18  {4}       4
/18/#/56/1/58/18/#/58/1/18  /20/#/55/1/60               {5}       5
/20/#/55/1/60               /22/#/56/1/62/22/#/58/1/22  {1}       1
/22/#/56/1/62/22/#/58/1/22  /24                         {2}       2
/24                         /26/#/56/1/66/26/#/58/1/26  {3}       3
/26/#/56/1/66/26/#/58/1/26  /28/#/55/1/68               {4}       4
/28/#/55/1/68               /30/#/56/1/70/30/#/58/1/30  {5}       5
/30/#/56/1/70/30/#/58/1/30  /32                         {1}       1
/32                         /34/#/56/1/74/34/#/58/1/34  {2}       2
/34/#/56/1/74/34/#/58/1/34  /36/#/55/1/76               {3}       3
/36/#/55/1/76               /38/#/56/1/78/38/#/58/1/38  {4}       4
/38/#/56/1/78/38/#/58/1/38  NULL                        {5}       5

query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE grandchild1]
----
start_key                   end_key                     replicas  lease_holder
NULL                        /2/#/56/1/42/2/#/58/1/2     {1}       1
/2/#/56/1/42/2/#/58/1/2     /4/#/55/1/44                {2}       2
/4/#/55/1/44                /6/#/56/1/46/6/#/58/1/6     {3}       3
/6/#/56/1/46/6/#/58/1/6     /8                          {4}       4
/8                          /10/#/56/1/50/10/#/58/1/10  {5}       5
/10/#/56/1/50/10/#/58/1/10  /12/#/55/1/52               {1}       1
/12/#/55/1/52               /14/#/56/1/54/14/#/58/1/14  {2}       2
/14/#/56/1/54/14/#/58/1/14  /16                         {3}       3
/16                         /18/#/56/1/58/18/#/58/1/18  {4}       4
/18/#/56/1/58/18/#/58/1/18  /20/#/55/1/60               {5}       5
/20/#/55/1/60               /22/#/56/1/62/22/#/58/1/22  {1}       1
/22/#/56/1/62/22/#/58/1/22  /24                         {2}       2
/24                         /26/#/56/1/66/26/#/58/1/26  {3}       3
/26/#/56/1/66/26/#/58/1/26  /28/#/55/1/68               {4}       4
/28/#/55/1/68               /30/#/56/1/70/30/#/58/1/30  {5}       5
/30/#/56/1/70/30/#/58/1/30  /32                         {1}       1
/32                         /34/#/56/1/74/34/#/58/1/34  {2}       2
/34/#/56/1/74/34/#/58/1/34  /36/#/55/1/76               {3}       3
/36/#/55/1/76               /38/#/56/1/78/38/#/58/1/38  {4}       4
/38/#/56/1/78/38/#/58/1/38  NULL                        {5}       5

#########################
# Check session setting #
#########################

statement ok
SET enable_interleaved_joins = false

query TTT
EXPLAIN SELECT * FROM parent1 JOIN child1 USING(pid1)
----
·           distribution       full
·           vectorized         true
merge join  ·                  ·
 │          equality           (pid1) = (pid1)
 │          left cols are key  ·
 ├── scan   ·                  ·
 │          missing stats      ·
 │          table              parent1@primary
 │          spans              FULL SCAN
 └── scan   ·                  ·
·           missing stats      ·
·           table              child1@primary
·           spans              FULL SCAN

statement ok
SET enable_interleaved_joins = true

query TTT
EXPLAIN SELECT * FROM parent1 JOIN child1 USING(pid1)
----
·                 distribution  full
·                 vectorized    true
interleaved join  ·             ·
·                 left table    parent1@primary
·                 left spans    FULL SCAN
·                 right table   child1@primary
·                 right spans   FULL SCAN
·                 ancestor      left

#####################
# Interleaved joins #
#####################

# Select over two ranges for parent/child with split at children key.
query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM parent1 JOIN child1 USING(pid1) WHERE pid1 >= 3 AND pid1 <= 5
----
·                              distribution         full                 ·                             ·
·                              vectorized           true                 ·                             ·
project                        ·                    ·                    (pid1, pa1, cid1, ca1)        ·
 │                             estimated row count  30 (missing stats)   ·                             ·
 └── interleaved join (inner)  ·                    ·                    (pid1, pa1, pid1, cid1, ca1)  ·
·                              estimated row count  30 (missing stats)   ·                             ·
·                              left table           parent1@primary      ·                             ·
·                              left spans           /3-/5/#              ·                             ·
·                              right table          child1@primary       ·                             ·
·                              right spans          /3/#/55/1-/5/#/55/2  ·                             ·
·                              ancestor             left                 ·                             ·

query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM parent1 JOIN child1 USING(pid1) WHERE pid1 >= 3 AND pid1 <= 5]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzMUsFu00AQvfMVq3eKYVC9Dr1YiuSKGnAVnOIUgVR8sLzT1JLrNbtrBKry78jeSDgVVMCpN8-89-b5zc497NcWMbbpOn19JQbTijfF5r24Tj9frs-yXCzOs-3V9sM6EAfKc0_oK8Odk-Jik-Wivm1aJcXHbZa_FYu-UTIQn96lReoL8WUIwyWvxDIQZ_n5vFmvxGlQgtBpxXl1xxbxNSQIEQhLlITe6Jqt1WaE7idipr4jDglN1w_Ot13jWkaModNGsWEFgmJXNe2Il_uSUGvDiH9Rc_1S9yfRAyJBD-4wtiRYV-0YcbSnmbWcWf9mcNY5Ni1X37jgSrG50E3H5iQ8csKabxwIh0UmvWnuKvMDhKLZ3Y6I3-oM8HNAaPnGLRL5IliZkTt9grAZXCwSSUlEyStKTvGnNPIoTfRfaeQTTRM-nqZg2-vO8l-9ejieDasd-xuzejA1XxpdTza-3Ey6qaHYOo8ufZF1Hhp_cC6Wj4rDI7F8KI7-SVzun_0MAAD__97bPX0=

# Swap parent1 and child1 tables.
query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM child1 JOIN parent1 USING(pid1) WHERE pid1 >= 3 AND pid1 <= 5
----
·                              distribution         full                 ·                             ·
·                              vectorized           true                 ·                             ·
project                        ·                    ·                    (pid1, cid1, ca1, pa1)        ·
 │                             estimated row count  30 (missing stats)   ·                             ·
 └── interleaved join (inner)  ·                    ·                    (pid1, cid1, ca1, pid1, pa1)  ·
·                              estimated row count  30 (missing stats)   ·                             ·
·                              left table           child1@primary       ·                             ·
·                              left spans           /3/#/55/1-/5/#/55/2  ·                             ·
·                              right table          parent1@primary      ·                             ·
·                              right spans          /3-/5/#              ·                             ·
·                              ancestor             right                ·                             ·

query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM child1 JOIN parent1 USING(pid1) WHERE pid1 >= 3 AND pid1 <= 5]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzMUtFulEAUffcrJuep6DVlIH0h2YTGotKsbGVrNKk8EOZ2S0IZnBmMptl_NzCbyDbaqE--ce855x7OnfsA-6VDgm22zl5di9F04nW5eSdusk9X6_O8ECcX-fZ6-34diAPluSc0d22npLjc5IUYasO9k-LDNi_eiJOhVTIQH99mZeYL8XkMw5hXIg7EeXGxbDYrcRZUIPRacVHfs0VyAwlCBEKMijAY3bC12kzQw0zM1TckIaHth9H5tmtdx0gw9tooNqxAUOzqtpvwal8RGm0YyU9qoV_q4TR6RCTo0R3GVgTr6h0jifa0sJYL618MznvHpuP6K5dcKzaXuu3ZnIZHTljzrQPBLzIdTHtfm-8glO3ubgIOW10gfg4IHd-6k1S-CFZmIs-fIGxGl4hUUhpRGlN6ht-lkUdpon9KI__TNOHTaUq2g-4t_9Grh9PZsNqxvzGrR9PwldHNbOPLzaybG4qt82jsi7z30PSDS7F8UhweieVjcfRX4mr_7EcAAAD__89yPXs=

# Select over two ranges for parent/child with split at grandchild key.
# Also, rows with pid1 <= 30 should have 4 rows whereas pid1 > 30 should
# have 3 rows.
query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM parent1 JOIN child1 ON parent1.pid1 = child1.pid1 WHERE parent1.pid1 >= 29 AND parent1.pid1 <= 31 ORDER BY parent1.pid1
----
·                         distribution         full                   ·                             ·
·                         vectorized           true                   ·                             ·
interleaved join (inner)  ·                    ·                      (pid1, pa1, pid1, cid1, ca1)  +pid1
·                         estimated row count  30 (missing stats)     ·                             ·
·                         left table           parent1@primary        ·                             ·
·                         left spans           /29-/31/#              ·                             ·
·                         right table          child1@primary         ·                             ·
·                         right spans          /29/#/55/1-/31/#/55/2  ·                             ·
·                         ancestor             left                   ·                             ·

query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM parent1 JOIN child1 ON parent1.pid1 = child1.pid1 WHERE parent1.pid1 >= 29 AND parent1.pid1 <= 31 ORDER BY parent1.pid1]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzUUdFu0zAUfecrru5TywyLU_ZApEoeNIhMJRnpJEAjD1F811nK4mA7CFT131Hsoi2oQ8Abb7n3nONzz8kO7ZcWE9yk6_T1FQymhTdl8Q6u04-X6_Msh9kq21xt3q_ncKA8DYS-NtQ5DhdFlkNzq1rJoch_rp_3SnJYHoAwfXiblinMJozPQxQtaAnxyzmc56tjaLOEBZ9DUa7SEl59mjhUyLDTkvL6jiwm18iR4RlWDHujG7JWm3G986RMfsMkYqi6fnDjumLYaEOY7NAp1xImmHWOTEv1VyqplmQutOrInI7PSnK1ar3Lmm4cMjxcInqj7mrzHRmWans7IiH2AyC8gwxbunEzwU_mSzNy_ScyLAaXgOBMxEwsmHjBxBlWe4Z6cPfHWldvCRO-Z48Eus-hjSRDcnq24CdY7Y-kzvUz3Z_GE_Zj7vHEnf9TndH_UeeRQCXZXneW_qiqaOya5JbCv7F6MA1dGt14mzAWXucXkqwLKA9D1nnIH_hQzH8rXkzE0a_i-K-cq_2THwEAAP__-_pRHA==

# Parent-child where pid1 <= 15 have one joined row and pid1 > 15 have no
# joined rows (since child2 only has 15 rows up to pid1 = 15).
# Note this spans all 5 nodes, which makes sense since we want to read all
# parent rows even if child rows are non-existent (so we can support OUTER
# joins).
# TODO(richardwu): we can remove nodes reading from just one table for INNER
# joins or LEFT/RIGHT joins.
query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM parent1 JOIN child2 USING(pid1) WHERE pid1 >= 12 ORDER BY pid1
----
·                              distribution         full                 ·                                   ·
·                              vectorized           true                 ·                                   ·
project                        ·                    ·                    (pid1, pa1, cid2, cid3, ca2)        +pid1
 │                             estimated row count  333 (missing stats)  ·                                   ·
 └── interleaved join (inner)  ·                    ·                    (pid1, pa1, pid1, cid2, cid3, ca2)  +pid1
·                              estimated row count  333 (missing stats)  ·                                   ·
·                              left table           parent1@primary      ·                                   ·
·                              left spans           /12-                 ·                                   ·
·                              right table          child2@primary       ·                                   ·
·                              right spans          /12/#/56/1-          ·                                   ·
·                              ancestor             left                 ·                                   ·

query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM parent1 JOIN child2 USING(pid1) WHERE pid1 >= 12 ORDER BY pid1]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzMlMFvlEAYxe_-FZN32rWfKcOyPZA0QS0qzQqVrVFTORDm65aEMjgMRrPZ_90ATdo1Vu3uZW_MvPd432-SmTXabxV8LMNF-PpSdKYSb9LkvbgKP18sXkaxmJxFy8vlh8VU3Fmej4YmN1xbKc6TKBbFTVkpV3xcRvFbMWlKJafi07swDUX_Lb52jjPjUyFdkaRnYSpefRmEDIRaK47zW27hX0GC4IIwA8EDYY6M0BhdcNtq01vWQyBSP-A7hLJuOttvZ4RCG4a_hi1txfAR1ZZNxfl3TjlXbM51WbM5dkBQbPOyGhoXfG1BuKMJGlPe5uYnCGm5uumVEe2BMP4HhIqv7SSQR9NT03uHTxCSzvoikBS4FHgUzCk4QbYh6M7eD9vafMXw5YYeAbrn0EaxYbU9diCPkG3-QB3rF7o5nm-5H2t3t9rlTscpD_c43Z2A3MMFmu0ENDtcIG8nIO9wgf7xJKXcNrpu-b9up9Nfb1YrHp-DVnem4Auji6FmXCZDbthQ3NpRleMiqgdpGPBhWP41fLIVdn4Pu_s0z_YJe_uE508KZ5tnvwIAAP__BklD8g==

# These rows are all on the same node 1 (gateway).
query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM parent1 JOIN child2 USING(pid1) WHERE pid1 IN (1, 11, 21, 31) ORDER BY pid1
----
·                              distribution         full                                                                                   ·                                   ·
·                              vectorized           true                                                                                   ·                                   ·
project                        ·                    ·                                                                                      (pid1, pa1, cid2, cid3, ca2)        +pid1
 │                             estimated row count  40 (missing stats)                                                                     ·                                   ·
 └── interleaved join (inner)  ·                    ·                                                                                      (pid1, pa1, pid1, cid2, cid3, ca2)  +pid1
·                              estimated row count  40 (missing stats)                                                                     ·                                   ·
·                              left table           parent1@primary                                                                        ·                                   ·
·                              left spans           /1-/1/# /11-/11/# /21-/21/# /31-/31/#                                                  ·                                   ·
·                              right table          child2@primary                                                                         ·                                   ·
·                              right spans          /1/#/56/1-/1/#/56/2 /11/#/56/1-/11/#/56/2 /21/#/56/1-/21/#/56/2 /31/#/56/1-/31/#/56/2  ·                                   ·
·                              ancestor             left                                                                                   ·                                   ·

query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM parent1 JOIN child2 USING(pid1) WHERE pid1 IN (1, 11, 21, 31) ORDER BY pid1]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkF-Lm0AUxd_7KS73KbYXmkn_PAgF28a2BqupprQl-CDOTTJgHDszLrsEv_uiE9jdh4V9u_ecn-d65oL2f4shlnEaf93BYFr4VuQ_YR__3aafkwwW66Tclb_SAK7Iaw_0teHOCdjkSQbNSbVyBb_LJPsOi15JEcCfH3ERwzTDFCMIhCBYCYJ3IoC8WMcFfPk3AxUSdlpyVp_ZYrhHgRVhb3TD1mozSZcZSOQthktC1fWDm-SKsNGGMbygU65lDDHpHJuW6xsuuJZsNlp1bN4ukVCyq1U7X0j54JDw2iLqjTrX5g4JC3U8TY6v9MjwOUjY8sEtIvEm-GQmdh6RMB9cCJGgaEXRe4o-UPQRq5FQD-7hZ62rj4yhGOnlhQq2ve4sPynwXPJyrAhZHtk_mtWDaXhrdDOf8Ws-fzcLkq3zrvBL0nlrrMZX9wEAAP__PsOoOQ==

# Parent-grandchild.
# We add the pa1 > 0 condition so a lookup join is not considered to be a better plan.
query TTTTT
EXPLAIN (VERBOSE)
  SELECT * FROM parent1 JOIN grandchild2 USING(pid1) WHERE
    pid1 >= 11 AND pid1 <= 13
    OR pid1 >= 19 AND pid1 <= 21
    OR pid1 >= 31 AND pid1 <= 33
    OR pa1 > 0
----
·                              distribution         full                                                                                                                    ·                                           ·
·                              vectorized           true                                                                                                                    ·                                           ·
project                        ·                    ·                                                                                                                       (pid1, pa1, cid2, cid3, gcid2, gca2)        ·
 │                             estimated row count  1000 (missing stats)                                                                                                    ·                                           ·
 └── interleaved join (inner)  ·                    ·                                                                                                                       (pid1, pa1, pid1, cid2, cid3, gcid2, gca2)  ·
·                              estimated row count  1000 (missing stats)                                                                                                    ·                                           ·
·                              left table           parent1@primary                                                                                                         ·                                           ·
·                              left spans           FULL SCAN                                                                                                               ·                                           ·
·                              left filter          ((((pid1 >= 11) AND (pid1 <= 13)) OR ((pid1 >= 19) AND (pid1 <= 21))) OR ((pid1 >= 31) AND (pid1 <= 33))) OR (pa1 > 0)  ·                                           ·
·                              right table          grandchild2@primary                                                                                                     ·                                           ·
·                              right spans          FULL SCAN                                                                                                               ·                                           ·
·                              ancestor             left                                                                                                                    ·                                           ·

query T
SELECT url FROM [EXPLAIN (DISTSQL)
  SELECT * FROM parent1 JOIN grandchild2 USING(pid1) WHERE
    pid1 >= 11 AND pid1 <= 13
    OR pid1 >= 19 AND pid1 <= 21
    OR pid1 >= 31 AND pid1 <= 33
    OR pa1 > 0
]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzsldFv0zAQxt_5K6x7SsBocdwOFqlSJtZBppKOtAikkYcovnWRsjg4DgJV_d9RnXZLqxRBK5WXvtW-78vV3--km0P1PQcPJsPR8N2U1Con19H4I7kbfr0dXQYhsa6CyXTyaWSTleRlIygThYVm5GYchGSmkkKkD1kuXPJ5EoTviVVmgtnky4dhNCSWZZkz-VY7DscBYcwml-EVad2mA8K4bZNxRLbFF11il9mdat75ac7X6jJZa4ljx0ChkALD5BEr8O6AAQUXKHCg0AMKfYgplEqmWFVSLSVzYwjET_AcCllR1np5HVNIpULw5qAznSN4EBQaVY7JD4wwEahuZFagOnOAgkCdZLnpOMJ7DRRWcfqlyh4T9QuoKZDrLNeoPJOg387P87wgnL5dvdVvh7gurdJp2y522tynL3b4-O52nG_5fPcp3nUFKETZ7GH5zNagtJ7aJAMUcrzXls9e2QO1NJifQGFca4_4jPou9XvU71P_nPpvIF5QkLV-JlDpZIbgsQXdQekZTl1IJVCh2KARLzo4hvK1LM_6W8Lu1u5Ga7bXgLDTgBx1QNy9KLknSkelxPeixE-Ujkqptxel3onSf1uJHZQirEpZVPhXG89ZrkwUM2z2ayVrleKtkqlp0xzHxmcuBFa6qbLmEBSmZP5g28z-aD7fMDvbZveQzvwQc-8Qc_-fzPHixe8AAAD__03jY48=

query TTTTT
EXPLAIN (VERBOSE)
  SELECT * FROM grandchild2 JOIN parent1 USING(pid1) WHERE
    pid1 >= 11 AND pid1 <= 13
    OR pid1 >= 19 AND pid1 <= 21
    OR pid1 >= 31 AND pid1 <= 33
    OR pa1 > 0
----
·                              distribution         full                                                                                                                    ·                                           ·
·                              vectorized           true                                                                                                                    ·                                           ·
project                        ·                    ·                                                                                                                       (pid1, cid2, cid3, gcid2, gca2, pa1)        ·
 │                             estimated row count  1000 (missing stats)                                                                                                    ·                                           ·
 └── interleaved join (inner)  ·                    ·                                                                                                                       (pid1, cid2, cid3, gcid2, gca2, pid1, pa1)  ·
·                              estimated row count  1000 (missing stats)                                                                                                    ·                                           ·
·                              left table           grandchild2@primary                                                                                                     ·                                           ·
·                              left spans           FULL SCAN                                                                                                               ·                                           ·
·                              right table          parent1@primary                                                                                                         ·                                           ·
·                              right spans          FULL SCAN                                                                                                               ·                                           ·
·                              right filter         ((((pid1 >= 11) AND (pid1 <= 13)) OR ((pid1 >= 19) AND (pid1 <= 21))) OR ((pid1 >= 31) AND (pid1 <= 33))) OR (pa1 > 0)  ·                                           ·
·                              ancestor             right                                                                                                                   ·                                           ·

query T
SELECT url FROM [EXPLAIN (DISTSQL)
  SELECT * FROM grandchild2 JOIN parent1 USING(pid1) WHERE
    pid1 >= 11 AND pid1 <= 13
    OR pid1 >= 19 AND pid1 <= 21
    OR pid1 >= 31 AND pid1 <= 33
    OR pa1 > 0
]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzsldFv0zAQxt_5K6x7SsBocdwCi1TJE-sgU0lHWgTSyEMU37pIWRwcB4Gq_u-oSbulVYqglbqXvtW-7_M13--km0P5IwMPJsPR8P2UVDojV-H4E7kdfrsZXfgBsS79yXTyeWSTleRlI5jpOJfJfZpJl1yP_YAUscbcMPJl4gcfiFWkktnk68dhOCSWZdVn8r1yHI4DwphNLoJL0rpNBoRx2ybjkGyLz7vELrM71bzzac7X6iJea4ljR0AhVxKD-AFL8G6BAQUXKHCg0AMKfYgoFFolWJZKLyXz2uDLX-A5FNK8qMzyOqKQKI3gzcGkJkPwwM8N6gzjnxhiLFFfqzRHfeYABYkmTrO64wjvDFBoxSkKnT7E-jdQCNPZ_bK6yna7Qq7SzKD26oBFO17P8_xg-m4VhWhnvC6twmvbznfa3McXO3x8dzvOt3zCfUx_XQEKTTRAIcM7Ywn2yh7o5QfWP4HCuDIeEYwKlwpORY-KPhVvIVpQUJV5QlCaeIbgsQXdgemJTpUrLVGj3MARLTpABuq1Ks76W8Lu1u5Ga7bXhLDThBx3Qty9MLknTMfFxPfCxE-Yjouptxem3gnT863FDkwhloXKS_ynrecs1ybKGTY7tlSVTvBGq6Ru0xzHta--kFiapsqag5_XpfoPts3sr-Y3G2Zn2-we0pkfYu4dYu7_lzlavPgTAAD__zsSZb8=

query TTT
EXPLAIN SELECT * FROM grandchild2 JOIN parent1 USING(pid1) WHERE
  pid1 >= 11 AND pid1 <= 13
  OR pid1 >= 19 AND pid1 <= 21
  OR pid1 >= 31 AND pid1 <= 33
  OR pa1 > 0
----
·                 distribution  full
·                 vectorized    true
interleaved join  ·             ·
·                 left table    grandchild2@primary
·                 left spans    FULL SCAN
·                 right table   parent1@primary
·                 right spans   FULL SCAN
·                 right filter  ((((pid1 >= 11) AND (pid1 <= 13)) OR ((pid1 >= 19) AND (pid1 <= 21))) OR ((pid1 >= 31) AND (pid1 <= 33))) OR (pa1 > 0)
·                 ancestor      right

# Join on multiple interleaved columns with an overarching ancestor (parent1).
# Note there are 5 nodes because the filter cid2 >= 12 AND cid2 <= 14
# creates a giant parent span which requires reading from all rows.
query T
SELECT url FROM [EXPLAIN (DISTSQL)
  SELECT * FROM child2 JOIN grandchild2 ON
    child2.pid1=grandchild2.pid1
    AND child2.cid2=grandchild2.cid2
    AND child2.cid3=grandchild2.cid3
  WHERE
    child2.pid1 >= 5 AND child2.pid1 <= 7
    OR child2.cid2 >= 12 AND child2.cid2 <= 14
    OR gcid2 >= 49 AND gcid2 <= 51
]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzslU9r20wQxu_vp1jmZL2ZNl5Jzh-BYUPjUAVXTp1AC6kPQjtxBIpWXa1KS_B3L5KsWFLc0jqQXnyzZp6fZ_d5FuYR8q8JeHA9mU7e3bBCJ-xiPvvAbiefr6ZnfsAG5_71zfXHqcXWkv9rQXQfJ9JmlzM_YEsdpnJdmAVsMKh_v81iydm43a5KFjsLzlkjimJp90RlyXqmcp6rHIt9ej-ZT9igO_NLMRw6NGaj7p9setGYHVsWm803h63O0YDc3nLIhuSu1bDLDuWerqllRz_ilrUAhFRJCsIHysG7BQ4INiA4gOACwggWCJlWEeW50qXksQJ8-R28IUKcZoUpywuESGkC7xFMbBICD_zUkE4o_EZzCiXpSxWnpA-HgCDJhHFSTZzSnQGE-kYi0_FDqH8Awjxe3peNlrf9LruIE0PaK30WLXs9z_ODm5P1rUXL3Kaz9km0re1RbWOfsIZzW-b2OLdl8BMHCPXtASGhOzMQ_ACFfYDCObDGurxMpwQIs8J4THAUNgoHhYtihOIIxTGKExSnsFghqMJs7M9NuCTw-Ap_EdEmmSJVWpIm2YlisdoSYqDeqOxw1BNuH213RvOdXgffv47Xex32ThHZ-4heLyJnp4icfUSvF5G7U0TuPqJ_swa3RDSnPFNpTn-05YblmiS5pHqn5qrQEV1pFVVj6s9ZxVUFSbmpu7z-8NOqVR2wDfPfwkcdeNiH7ZdMdl4Cuy-BR38FL1b__QwAAP__AI-Aqg==

query TTT
EXPLAIN
  SELECT * FROM child2 JOIN grandchild2 ON
    child2.pid1=grandchild2.pid1
    AND child2.cid2=grandchild2.cid2
    AND child2.cid3=grandchild2.cid3
  WHERE
    child2.pid1 >= 5 AND child2.pid1 <= 7
    OR child2.cid2 >= 12 AND child2.cid2 <= 14
    OR gcid2 >= 49 AND gcid2 <= 51
----
·                 distribution  full
·                 vectorized    true
interleaved join  ·             ·
·                 left table    child2@primary
·                 left spans    FULL SCAN
·                 right table   grandchild2@primary
·                 right spans   FULL SCAN
·                 right filter  (((pid1 >= 5) AND (pid1 <= 7)) OR ((cid2 >= 12) AND (cid2 <= 14))) OR ((gcid2 >= 49) AND (gcid2 <= 51))
·                 ancestor      left

# Aggregation over parent and child keys.
query T
SELECT url FROM [EXPLAIN (DISTSQL)
  SELECT sum(parent1.pid1), sum(child1.cid1) FROM parent1 JOIN child1 USING(pid1) WHERE
    pid1 >= 10 AND pid1 <= 39
]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzUlVFvmzAUhd_3K6z7FDSrxZC2CVKkRGu2UaVJl7TapI4HBLcUiWBmzLQpyn-fbLKVRK2ZkrzkDfvew3fPMcIrKH9k4MFiPBl_uCeVyMjH-eyWPI6_3U1G_pR0rv3F_eLLxCKblrJadopQYC7ZWZHGzKJ6K3pOs5idRWqnfsWmidzM_Cmpy-Rh4U8_kY7Wka-fx_NxvSDfK9t2cUCYbZHR9Lq5Gw2I27cCoJDzGKfhEkvwHoEBBQcouEChCxQuIKBQCB5hWXKhWlZa4Me_wLMppHlRSbUdUIi4QPBWIFOZIXjg5xJFhuFPnGMYo7jhaY7iXCFilGGaaeIEnyRQ2PgaFiJdhuI3UF0gs0p6ZKgk8zR5Vo2150afLvxtpEM1fU0CChk-yc6QvbcGQnXpR6Dwr9mFYE2BV_LFRSnDBMFja_r_TkdJIjAJJRfnl9vuFg-3nSFTTP3kWG8CnTeBL5wq5yJGgfEWJFibR2L2vjO5WzOxvY7bOcHjbnHayPbqOMft7BWte4LRtjhtRNs7TrTuXtF2TzDaFqeNaPvHiba7V7T2CUbb4rQR7cXx__-vAOdYFjwvceceeP3NtrofME6wvkxKXokI7wSPNKZezrROb8RYyrrK6oWf1yU1YFPMjGJnS8x2xY6Z3IJ2jequWdw9ZO4Lo_jSTL48hHxlFPfM5N4h5L75rOyWz8T8ke2yg_W7PwEAAP__ZJqUwA==

###############
# Outer joins #
###############

# The schema/values for each table are as follows:
# Table:        pkey:                     pkey values (same):   values:
# outer_p1      (pid1)                    {1, 2, 3, ... 20}     100 + pkey
# outer_c1      (pid1, cid1, cid2)        {2, 4, 6, ... 28}     200 + pkey
# outer_gc1     (pid1, cid1, cid2, gcid1) {4, 8, 12, ... 36}    300 + pkey

# Split between 4 nodes based on pkey value (p):
# node 1:       p - 1 mod 20 ∈ [1...5)
# node 2:       p - 1 mod 20 ∈ [5...10)
# node 3:       p - 1 mod 20 ∈ [10...15)
# node 4:       p - 1 mod 20 ∈ [15...20)

statement ok
CREATE TABLE outer_p1 (
  pid1 INT PRIMARY KEY,
  pa1 INT,
  FAMILY (pid1, pa1)
)

statement ok
CREATE TABLE outer_c1 (
  pid1 INT,
  cid1 INT,
  cid2 INT,
  ca1 INT,
  PRIMARY KEY (pid1, cid1, cid2),
  FAMILY (pid1, cid1, cid2)
) INTERLEAVE IN PARENT outer_p1 (pid1)

statement ok
CREATE TABLE outer_gc1 (
  pid1 INT,
  cid1 INT,
  cid2 INT,
  gcid1 INT,
  gca1 INT,
  PRIMARY KEY (pid1, cid1, cid2, gcid1),
  FAMILY (pid1, cid1, cid2)
) INTERLEAVE IN PARENT outer_c1 (pid1, cid1, cid2)

statement ok
ALTER TABLE outer_p1 SPLIT AT
  SELECT i FROM generate_series(0, 40, 5) AS g(i)

statement ok
ALTER TABLE outer_p1 EXPERIMENTAL_RELOCATE
  SELECT ARRAY[(((i-3)/5)%4)::INT + 1], i FROM generate_series(3, 40, 5) AS g(i)

query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE outer_p1]
----
start_key  end_key  replicas  lease_holder
NULL       /0       {5}       5
/0         /5       {1}       1
/5         /10      {2}       2
/10        /15      {3}       3
/15        /20      {4}       4
/20        /25      {1}       1
/25        /30      {2}       2
/30        /35      {3}       3
/35        /40      {4}       4
/40        NULL     {5}       5

### Begin OUTER queries

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM outer_p1 FULL OUTER JOIN outer_c1 USING (pid1)
----
·                                   distribution         full                  ·                                   ·
·                                   vectorized           true                  ·                                   ·
render                              ·                    ·                     (pid1, pa1, cid1, cid2, ca1)        ·
 │                                  estimated row count  1000 (missing stats)  ·                                   ·
 │                                  render 0             COALESCE(pid1, pid1)  ·                                   ·
 │                                  render 1             pa1                   ·                                   ·
 │                                  render 2             cid1                  ·                                   ·
 │                                  render 3             cid2                  ·                                   ·
 │                                  render 4             ca1                   ·                                   ·
 └── interleaved join (full outer)  ·                    ·                     (pid1, pa1, pid1, cid1, cid2, ca1)  ·
·                                   estimated row count  1000 (missing stats)  ·                                   ·
·                                   left table           outer_p1@primary      ·                                   ·
·                                   left spans           FULL SCAN             ·                                   ·
·                                   right table          outer_c1@primary      ·                                   ·
·                                   right spans          FULL SCAN             ·                                   ·
·                                   ancestor             left                  ·                                   ·

query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM outer_p1 FULL OUTER JOIN outer_c1 USING (pid1)]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzclM9q20AQxu99imVOdjslXknOQVBQcJWioEqpZEMhiCK0E1egaNXdVWkwfveiVYrj4P6zb77tzsw33_zmMBvQ3xrwIQ_jcLFkvWrYdZZ-ZHfh59v4KkrY5H2UL_NP8ZQ9lbweC2RvSH3pOLtexTG7SaPkKVRxtsqj5AObdLXg0wIQWikoKR9Ig38HHBAcQHABwQOEORQInZIVaS3VULKxgkj8AH-GULddb4ZwgVBJReBvwNSmIfAhag2phsrvlFEpSN3IuiV1MVgIMmXdWMeY7g0g_Jo46FT9UKpHQMjq9dddqnqeGlsBwvKxI3-kTFfLMLOsgNDQvZkE_M30nRq62OfQklpBymeL9CoO80U4CTgG7hRZ4CALPGTBHFlwCcXW2u7YtCnXBD7f4m_4d9h9K5UgRWKPs9ge2FAi38ruYv6i8LC1s2fNj1q9czard47id8-G3z2K3zsbfu8o_tnZ8P_l9GakO9lq-qfLMhtOE4k1jXdMy15VdKtkZW3Gb2p1NiBImzHLx0_U2pQd8LmY_1F8uSeevRQ7pzi7p4i9U8Tz_xIX21c_AwAA___-VX0a

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM outer_gc1 FULL OUTER JOIN outer_c1 USING (pid1, cid1, cid2)
----
·                                   distribution         full                  ·                                                       ·
·                                   vectorized           true                  ·                                                       ·
render                              ·                    ·                     (pid1, cid1, cid2, gcid1, gca1, ca1)                    ·
 │                                  estimated row count  1999 (missing stats)  ·                                                       ·
 │                                  render 0             COALESCE(pid1, pid1)  ·                                                       ·
 │                                  render 1             COALESCE(cid1, cid1)  ·                                                       ·
 │                                  render 2             COALESCE(cid2, cid2)  ·                                                       ·
 │                                  render 3             gcid1                 ·                                                       ·
 │                                  render 4             gca1                  ·                                                       ·
 │                                  render 5             ca1                   ·                                                       ·
 └── interleaved join (full outer)  ·                    ·                     (pid1, cid1, cid2, gcid1, gca1, pid1, cid1, cid2, ca1)  ·
·                                   estimated row count  1999 (missing stats)  ·                                                       ·
·                                   left table           outer_gc1@primary     ·                                                       ·
·                                   left spans           FULL SCAN             ·                                                       ·
·                                   right table          outer_c1@primary      ·                                                       ·
·                                   right spans          FULL SCAN             ·                                                       ·
·                                   ancestor             right                 ·                                                       ·

query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM outer_gc1 FULL OUTER JOIN outer_c1 USING (pid1, cid1, cid2)]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzklV-Lm0wUxu_fTzGcq-TNKZtRs22FwiypW1ysbjWBwiJFnLOp4Dp2HEuXkO9e1G2zLtt_yWVuhHnOeeaZ-Q0ct9B8KcGFxAu85Yq1umSXcfSe3Xgfr4MLP2STt36ySj4EU_bQ8v_QoFpD-tMm5-xyHQTsKvLDBy3nbJ344Ts2qQvJkeU_vtY0BYRKSQqzO2rAvQEOCBYg2IDgAMICUoRaq5yaRumuZdsbfPkN3DlCUdWt6eQUIVeawN2CKUxJ4IJfGdIlZV8ppkySvlJFRfqsi5BksqLsEwO6NYDw8_ii1sVdpu8BIS42n_e1UWnYCxBW9zW5w5Wj9cqL-4sDQkm3ZiL4DIU1Q2HPpm90t9tI6iKokqRdtowuAi9ZehPBUZxP8ZFgoXg5EmwUr6bIhINMLJCJ15Du-kPuUTQm2xC4fIe_wLWn1FZKS9IkR1jS3TNAQ_VC1WeLJ43PR1ujaH7QS1mn-lLWQbjsU8VlH4TLOVVczkG45qeK6w9_mZiaWlUN_dVUnHdjleSGhhncqFbndK1V3scMy6j39YKkxgxVPiz8qi_1B3xs5r81n4_M86dm65hk-xizc4x58U_mdPff9wAAAP___HO2Kw==

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM outer_c1 LEFT OUTER JOIN outer_p1 USING (pid1) WHERE pid1 >= 0 AND pid1 < 40
----
·                                   distribution         full                  ·                                   ·
·                                   vectorized           true                  ·                                   ·
project                             ·                    ·                     (pid1, cid1, cid2, ca1, pa1)        ·
 │                                  estimated row count  400 (missing stats)   ·                                   ·
 └── interleaved join (left outer)  ·                    ·                     (pid1, cid1, cid2, ca1, pid1, pa1)  ·
·                                   estimated row count  400 (missing stats)   ·                                   ·
·                                   left table           outer_c1@primary      ·                                   ·
·                                   left spans           /0/#/60/1-/39/#/60/2  ·                                   ·
·                                   right table          outer_p1@primary      ·                                   ·
·                                   right spans          /0-/39/#              ·                                   ·
·                                   ancestor             right                 ·                                   ·

query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM outer_c1 LEFT OUTER JOIN outer_p1 USING (pid1) WHERE pid1 >= 0 AND pid1 < 40]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzUVF1rnEAUfe-vGM7T2k6Jo7YPQsDQmNZgNXUNLaRSRG-2gnHsOJaGZf972TFld0P6tfu0b9577rnHc-DOEsO3Fj7mYRy-ydmoWnaRpe_ZTfjpKj6LEjY7j-b5_ENssYeR59OAHDWpL5VgcXiRs8s0Sh5avWDX8yh5y2Z9UwuLfXwXZuFUsM-jbbt0ymyLnSXn282KebZVgKOTNSXlHQ3wbyDA4YDDBYeHgqNXsqJhkGoNL81wVP-Ab3M0XT_qdbvgqKQi-EvoRrcEH1GnSbVUfqeMyprUpWw6Uic2OGrSZdMatZhuNTh-OQt61dyV6h4cWbP4uoH6bWhaBY78vid_SiO9zsPMZAKOlm71LBAvrFO13mI-wZGO2meB4IHDA5cHHg9eo1gZiY2PQZcLgi9W_DdeNxbHTqqaFNU7norVE2kk8qXsT7xHg09LOzvSYq-YxVHG7Ozl1TlKr-5eXt2j9PqXpyKjoZfdQP90Hfb6vKhe0HSLgxxVRVdKVkZmKlPDM42aBj2hYiqizkDmB7fJ4o_kVztk-zHZOUTZPYTs_Re5WD37GQAA__-aJRAe

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM outer_p1 RIGHT OUTER JOIN outer_gc1 USING (pid1) WHERE pid1 >= 1 AND pid1 <= 20
----
·                                   distribution         full                  ·                                           ·
·                                   vectorized           true                  ·                                           ·
project                             ·                    ·                     (pid1, pa1, cid1, cid2, gcid1, gca1)        ·
 │                                  estimated row count  200 (missing stats)   ·                                           ·
 └── interleaved join (left outer)  ·                    ·                     (pid1, cid1, cid2, gcid1, gca1, pid1, pa1)  ·
·                                   estimated row count  200 (missing stats)   ·                                           ·
·                                   left table           outer_gc1@primary     ·                                           ·
·                                   left spans           /1/#/60/1-/20/#/60/2  ·                                           ·
·                                   right table          outer_p1@primary      ·                                           ·
·                                   right spans          /1-/20/#              ·                                           ·
·                                   ancestor             right                 ·                                           ·

query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM outer_p1 RIGHT OUTER JOIN outer_gc1 USING (pid1) WHERE pid1 >= 1 AND pid1 <= 20]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzUlE9r20AQxe_9FMucrHZKtJJDQWBQaJREQZVSWaGFVBQhTVyBot3urkqD8XcvXoXaDumfOCffPPPm7fNvYLQE_b2DAOZREr0v2KA6dpZnH9hN9PkqOYlTNjmN58X8Y-Kwh5HX44AYDKmvkrM8Pr8o2GUWpw-9Rc3Z9TxOz9lEtg132KeLKI_Ggn0ZXNenGeMOO0lPt5v1jHmuUwJCLxpKqzvSENwABwQPEHxAmEKJIJWoSWuh1vLSDsfNTwhchLaXg1m3S4RaKIJgCaY1HUEAcW9IdVT9oJyqhtSlaHtSRy4gNGSqtrNpCd0aQPgNEkrV3lXqHhDydvFto8ltaXwLEIp7SQFLorOCZddFlNu1AEJHt2YS8jfOTK1fsT8BIRtMwEKO4TsMPQx9DKcYHkO5sikbFm2qBUHAV_gH3g3m0AvVkKJmh6tcPbGRVLwV8mj6aPDpaG8nmu-1an6wq_b24vUOltffi9c_WN5_fDpy0lL0mv7rUtz1qVGzoPEutRhUTVdK1DZmLDPrs42GtBlVPhZxbyX7B7fN_K_m4x2z-9jsvSTZf4l5-ixzuXr1KwAA__--wBU4

########################
# Non-interleaved joins #
########################

# Join on siblings uses merge joiner.
# TODO(richardwu): Update this once sibling joins are implemented.
query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM child1 JOIN child2 USING(pid1)]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzEll1r2zAUhu_3K8TZTbsqyJI_mhgGHls3UtqkazoYlFy4sZYYUjuTHVgp-e_Dcbe2-dCRJ-LdybYeH706z8V5hOLnHEIYnV2cfbwhSzUnn6-Hl-T27PvVxYf-gBx96o9uRl8vjsnTlnf1hsksnSecnA_7g3otyLdRf_CFHC3ShB-PgUKWJ3IQ38sCwlvgQEEABRcoeEDBhzGFhconsihyVW15XAP95BeEDoU0WyzL6vWYwiRXEsJHKNNyLiGEm_huLq9lnEjFHKCQyDJO5-sy9bGihUrvY_UAFEaLOCtC0mGCvWV-wDjzRL3uMs4EibOEuCQvZ1IVMF5RyJflU-XngncPZBYXs9elIg7j1ZhCUcZTCSFf0X9L4O9IIP5HArE3wfN_cpVIJZPN_5xUhY127biMS6mm8jxPM6kY3-jnXP4ojyJ-cvxepdNZvQQKw2UZkojTSNDIpZFPo4BGpxvpn5O5BsmW2a5T7zzwIO_kC8b9jZ27a3uvanNzL7iZ2Xu06DCvWvvVe-9QljdIE5hZ3m4asTdNi8bzwxsvzPskDK170Y8OC_42LajXVdOCQ1nXIM2poXWtphF707RonTi8da55n1xD63a3psO6h3KtQYauoWstZBB7M7RomHt4wzzz7niGhnU7jDt_OuQ7Tw9Vi7hzKMkaxOgZStZODLE3Roueee1OjDuOcy2LRZ4V0mgedKpAMpnK-pqKfKkm8krlk3WZ-nG45tYTSSKLsv4q6od-Vn-qDmgOBzZwzwbmVufmvp7mDa5MNIMDG7hnA3Orc29c2RYtNmnnJe3q79vVwvz1nTmbtGcjuB5GBNfDiOB6GBMcoRHBfRvB9TAiuB5GBNfDmOAIjQge2Ah-aqOoHkYU1cOIonoYUxShEUW7NorqYURRPYwoqocxRREaUbRnoyi3mhMQGpEUoRFLERrTFMOxWcFuWLCbFuzGBct5wW5g4FYTA98aGRrZqqcxW_U0ZqueRm1FcMzWJsPSds-aTEtNaczWRvNSYxyzdWt40No6Xr35HQAA__-ki7aF

# Join on non-interleaved tables (with key) uses merge joiner.
query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM parent1 JOIN parent2 ON pid1=pid2]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJy8lVFr2z4Uxd__n0Lc_0u7KsiSHdc1FDy2DlLapGv6MCh-cOO7xJBanuzASsl3H46zpQmJ5CCcp0i2fr4651xy36H8NYcQxjd3N1-eyELNybfH0T15vvnxcPd5MCRnXwfjp_H3u3OyPvKpOVAkCvOKk9vRYLjeCDIakiJLObmuf0QMFHKZ4jB5xRLCZ-BAQQAFFyh4QKEPMYVCyQmWpVT1kfcVMEh_Q-hQyPJiUdWPYwoTqRDCd6iyao4QwlPyMsdHTFJUzAEKKVZJNl-VWV8tKlT2mqg3oDAukrwMSY8J9j_r-4wzTzTrgHEmSJKnxCWymqEqIV5SkItqXXpT8eWNzJJytl0r4hAvYwpllUwRQr6kByRsviNVigrT3e9c1IU3pxb5vnOrWrtW3KOa4q3MclTM3_7sHH9WZxG_OL9W2XTWLIHCaFGFJOI0EjRyaeTtaN7ocVvoOeKmQ9mTBeN85-T-2t5Wbd6-HXjLdjjQDT3m1et-_dzrqjX46VvjssvWEO3jEW3j-RBDj_n_svKbdZ2V31U84vTxBF3G47aPx20bz_5EeizoKhT39KFcdRmK1z4Ur20oQY9x528wfWe9qZPhTle5HKGjv0-H2DOpra4nDl7vRG3DnVON4T0XecSykHmJrYasU0vBdIqNO6VcqAk-KDlZlWm2oxW3mlkpllXzdr0Z5M2r-oLtYc8G9m3gwAbmBtF8l3Y-0kIPCy3Mt2lnl3ZtwtLDhrD0sCEsPWwIy6DZINqzCatvY7ceNtithw1262GD3QbNBtG-jd2XNnbrYYPdethgtx422G3QbBAd2Nh9ZWO3HjbYrYcNduthg90GzaZ__mOGpTiS9qxo34oOrGhuEn7cxIyX__0JAAD__-2HEUg=

# Join on non-interleaved column uses hash joiner.
query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM parent1 JOIN child1 ON pa1 = ca1]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJy8ll1r2zAUhu_3K8TZTTsUZMkfTQwFj61jKV3SNb0YFF-4sdYEUtuTHVgp-e_DcbY2H9WRJ5w7O9Fj6dV5Lt5nKH8tIITJxdXFp1uyVAvy5Wb8jdxd_Li--jgckZPPw8nt5PvVKdks-dAsKBIls4qTy_FwRKaz-SLlZDwiRcLJOZkmPAYKWZ7KUfIoSwjvgAMFARRcoOABBR9iCoXKp7Isc1UveV4Dw_Q3hA6FeVYsq_rnmMI0VxLCZ6jm1UJCCLfJ_ULeyCSVijlAIZVVMl-st9mcKyrU_DFRT0BhUiRZGZIeE-w98wPGmSea5z7jTJAkS4lL8momVQnxikK-rDZbv-x4_0RmSTnb3isSEK9iCmWVPEgI-Yr-XwR_-7PNbR4ngbuVQLyZ4OU7yyxXqVQy3fpSXJPYkgPX8DUpZ5f5PJOK8Z1JLuTP6iQSp-dq_jCrTiL3FCiMl1VIIk4jQSOXRh6N_J3EL2lcizQHjjrKe3nBuL-b--De3tbe3NwFbqjzGy70mFc_-_XvXldqt4gTmKnddRqd5vzImvNONRfmsxGmqr0aQo8F_yYVNM_1pIKuVGsR58xQtY7T6FQTR1ZNdKqaaz4b11S1w_PosX5XgrUI0TcUrJMMOq3cI2vldqqVZz4Rz1Srfo9x5-9YfGfzUs-FO12Z1SLHwNCsrmLo5PKOLJd3tBZ44CA3sizyrJRGHc-po8j0QTZXU-ZLNZXXKp-ut2lex2tuXTJSWVbNv6J5GWbNX_UBzeHABh7YwNzq3NzX07zFlYl2cGADD2xgbnXunSvbo8Uu7bymXf19u1qYb9-Zs0t7NoLrYURwPYwIrocxwREaEdy3EVwPI4LrYURwPYwJjtCI4IGN4Gc2iuphRFE9jCiqhzFFERpRtG-jqB5GFNXDiKJ6GFMUoRFFBzaKcquegNCIpAiNWIrQmKYYjnUFu7Jg1xbs6oJlX7ArDNyqMfC9ytDKVj2N2aqnMVv1NGorgmO2tilL-zNr05ba0pitrfpSaxyzda88aG2NV-_-BAAA___aKbKo

# Prefix join on interleaved columns uses merge joiner.
query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM child2 JOIN grandchild2 USING(pid1, cid2)]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzEll1r2zwUx--fTyHOc9OuCrbklyaGgcfWjZQ26ZoOBiUXbqwlhtTOZAdWSr77cJwtzZuONRHnzi_6Wfqf8zOcV8h_TiGAwdXN1ccHMpdT8vm-f0ser77f3Xzo9sjZp-7gYfD15pyslryrFowmyTTm5Lrf7ZGxjNJ49eDboNv7Qs5mScwoGSUxPx8ChTSLRS96FjkEj8CAAgcKDlBwgYIHQwozmY1EnmeyXPK6BLrxLwhsCkk6mxfl4yGFUSYFBK9QJMVUQAAP0dNU3IsoFtKygUIsiiiZLrepDhTOZPIcyRegMJhFaR6QlsWt_y3Pt5jl8uq6bTGLkyiNiUOyYiJkDsMFhWxerHZeb_j0QiZRPtncKmQ05DBcDCnkRTQWELAF_bcQ3uaX35T2REn4wSTrT2UyFlLE25-6oCG_KPevvXJPcW6FHIvrLEmFtNhWi6fiR3G2os_fy2Q8Wd8Chf68CMgyEQ0dGro0vKRhm4adrZqswzo1ws7TfSH2nr2XtbKZxbytlfv3djf2ZvWVYfW8PyBLy3LLa6987h7xH9AI5Gv8A42n4gdTneB_YI3-D7x-C3lNJ990qWX5f1vpV9dlK_0jOqkR6FLHyaZT8YOpTuAkb9RJp34LnZpO7m9Yy2of0USNGG0dE5vJwg9mOYF_TqP-ufUb59b0r92ymP2nb569uikbx-wjKqiRpKOjYGNx-ME4J7DQPdmkuudk9yKfZWkuas2hdplNxGNRVS7P5nIk7mQ2Wm5T3faX3HL8iUVeVG95ddNNq1flAevDvgncMYGZ0bmZp6aZRsm4HuybwB0TmBmde6tkOzTfpu23tKOut6OE2WbN7G3aNRFcDSOCq2FEcDWMCY7QiOCeieBqGBFcDSOCq2FMcIRGBPdNBL80UVQNI4qqYURRNYwpitCIom0TRdUwoqgaRhRVw5iiCI0o2jFRlBnNCQiNSIrQiKUIjWmK4disYDYsmE0LZuOC4bxgNjAwo4mB7YwMWraqacxWNY3ZqqZRWxEcs1VnWNrtmc60pEtjtmrNS9o4ZuvO8KC0dbj473cAAAD__40N3Z8=

# Subset join on interleaved columns uses hash joiner.
query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM child2 JOIN grandchild2 USING(pid1, cid3)]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzEll1r2zAUhu_3K8TZTTsUbMkfTQwDj63bUrqkazoYFF-4sZYYUjuTHVgp-e_Dcbo2XzrWRNw7y9Zj6T3nuTiPUPyeQQCj88vzjzdkIWfk8_XwG7k9_3l1-aE_ICef-qOb0ffLU7Le8q7eMJ6ms4STi2F_QCYyzpL1ix-j_uALOZmnCaNknCbOaQQUsjwRg_heFBDcAgMKHCg4QMEFCh5EFOYyH4uiyGW15XEF9JM_ENgU0my-KKvXEYVxLgUEj1Cm5UxAADfx3UxcizgR0rKBQiLKOJ2tjqkvFM5leh_LB6AwmsdZEZCOxa23ludbzHJ5_dy1mMVJnCXEIXk5FbKAaEkhX5Trk58PvHsg07iYbh4VMho6EC0jCkUZTwQEbEn_L4S3-ecXpX2lJPxgkudfLbJcJkKKZONnUUViW_aU42tcTC_yNBPSYls9nYlf5cnqjqfvZTqZPi2AwnBRBmS1oiGnoUtDn4ZdGva2CvCczDFItufag7yTzy3mbddg79nuxtmsuR-smeQHzOhYbvXsVe_dIwqvEcjXEL71VPxgqjbkZ63Jz5v3izcU8EVLOpb_r29-_Vz1zT-igBqBznQEbDsVP5iqDQF5awI6zfvlNBRwf3c6VveI2mnE6Opo104WfjBLG7I5rcnmNu-S21C2bsdi9lOTPHu9qLrE7CP6ppGkp-Nba3H4wThtKOe-ynS551LXopjnWSEazY52FUskE1GXqcgXciyuZD5eHVMvhytuNbIkoijrr7xe9LP6U3XB5rBvAvdMYGZ0b-apaaZRMq4H-yZwzwRmRvfeKtkOzbdp-yXtqOvtKGG2WTN7m3ZNBFfDiOBqGBFcDWOCIzQiuGciuBpGBFfDiOBqGBMcoRHBfRPBz0wUVcOIomoYUVQNY4oiNKJo10RRNYwoqoYRRdUwpihCI4r2TBRlRnMCQiOSIjRiKUJjmmI4NiuYDQtm04LZuGA4L5gNDMxoYmA7I4OWrWoas1VNY7aqadRWBMds1RmWdnumMy3p0pitWvOSNo7ZujM8KG2Nlm_-BgAA__9mJ9B7

# Multi-table staggered join uses interleaved joiner on the bottom join
# and a lookup join on the higher join.
query T
SELECT url FROM[EXPLAIN (DISTSQL)
  SELECT * FROM grandchild1
  JOIN child1 USING (pid1, cid1)
  JOIN parent1 USING (pid1)
ORDER BY pid1
]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzUVc1u00AQvvMUqzk1dFCztpO0lpAWaECuQlKcIoEqHyzvNDW4XrNeI1CVd0eOK2qXxK4SKSi3jGe-fD-z0txD_iMBF-bjyfjdFSt0wt77s4_sevzlcvLGm7Kjc29-Nf806bGHkZfVwEKHqYxu40RydjHzpuzh9-e5N_3AjrJYcmRRLHmvamehptQ0-j0288_HPnv7lZVlAAipkjQN7ygH9xo4IFiAYAOCAwgDCBAyrSLKc6XLkfsVwJO_wO0jxGlWmPJzgBApTeDeg4lNQuCClxrSCYU_yadQkr5QcUr6pA8IkkwYJyvGCd0YQKh5E5mO70L9GxD8eHFbdv9pVP8FCAndmCPBj1FYx73Xupz_WwLCrDAuExyFhcJG4aAYoBiiGEGwRFCFeZSfm3BB4PIlPt9iKaMydzJo2nrIviZ5otT3ImPfVJwylZaq1uoboTjbKM7aKO5Rk9KSNMmmHMGPIViucTBVr1R2wptL2URvN-j5Vuvnh7T-Dou19Q_3v35rq_ytQ8q_w2It_9H-87e3yt8-pPw7LNbyP91__s5W-TuHlH-HxVr-Z__3_KwR51OeqTSnZ12WfnmbSC6oumW5KnREl1pFK5qqnK1wqw-SclN1eVV4adUqBdbBvBVsNcD8KdhqZ-6gtlvRTjvY2UX3oBU8bGce7sI8agWftjOf7sJ81r6rfsczaX9kT7mD5Ys_AQAA__-Hr70p

# Multi-table join with parent1 and child1 at the bottom uses interleaved
# joiner but induces a hash joiner on the higher join.
query T
SELECT url FROM [EXPLAIN (DISTSQL)
  SELECT * FROM parent1
  JOIN child1 USING (pid1)
  JOIN grandchild1 USING (pid1, cid1)
]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzUld9q20wQxe-_p1jmKv4yxV5J_icoqLRuUXDt1E6hEHQhpImjVtlVV6vSYvzuRVJIZNddBRtcfLmaOTq_ObOwa8i_p-DCcjKdvL1hhUrZ-8X8I7udfLmevvFn7OKdv7xZfpp22GPL_3VDFioSmrOruT9j0X2Sxpx9XvqzD-wiS2LeqQsrFYr4zyqyqOwJAEHImGbhA-Xg3gIHBAsQbEBwAKEPAUKmZER5LlXZsq4EfvwT3B5CIrJCl58DhEgqAncNOtEpgQu-0KRSCn_QgsKY1JVMBKluDxBi0mGSVo5TutOAUCN6mUoeQvULEBbJ6r4sNAZoVOt_AUJKd_rC45foWZed16oUPR0BYV5ol3kcPQs9Gz0HvT56A_SGEGwQZKGf8XMdrghcvsGXj1hi1MN1-9tjPW6ngTyV8luRsa8yEUyKkuqJb1TxjStEI5z1V7hnpkJIFZOieAso2OzBn8lXMuvy3k7nfm97y5sftHt-TrtvGbGx-8Hpd28dlL91Tvm3jNjIf3j6_O2D8rfPKf-WERv5j06fv3NQ_s455d8yYiP_8b99e_bALSjPpMjpRS9Lr3ybKF5R_ZDlslARXSsZVTb1cV7pqg8x5bqu8vrgi7pUAjbF3Ci2tsR8V2yZnVusbaPaMYudY7j7RvHA7Dw4xnloFI_MzqNjnMfmXfVaron5ku16B5v_fgcAAP__fnG5dA==

# If there are Limits, interleaved joins should not be used.
query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM (SELECT * FROM parent1 ORDER BY pid1 LIMIT 2) AS parent1 INNER MERGE JOIN child1 USING(pid1)
] WHERE node_type LIKE '%join'
----

query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM parent1 INNER MERGE JOIN (SELECT * FROM child1 ORDER BY pid1 LIMIT 10) AS child1 USING(pid1)
] WHERE node_type LIKE '%join'
----

statement ok
DROP TABLE grandchild2, grandchild1, child1, child2, parent1, parent2

# The following tests target the decision of whether to use interleaved join or
# not. We define the following hierarchy:
#   name:             primary key:
#   parent1           (pid1)
#     child1          (pid1, cid1, cid2)
#       grandchild1   (pid1, cid1, cid2, gcid1)
#     child2          (pid1, cid3, cid4)
#   parent2           (pid1)
statement ok
CREATE TABLE parent1 (pid1 INT PRIMARY KEY, v INT);
CREATE TABLE child1 (pid1 INT8, cid1 INT8, cid2 INT8, v INT8, PRIMARY KEY (pid1, cid1, cid2))
  INTERLEAVE IN PARENT parent1 (pid1);
CREATE TABLE grandchild1 (pid1 INT, cid1 INT, cid2 INT, gcid1 INT, v INT, PRIMARY KEY (pid1, cid1, cid2, gcid1))
  INTERLEAVE IN PARENT child1 (pid1, cid1, cid2);
CREATE TABLE child2 (pid1 INT, cid3 INT, cid4 INT, v INT, PRIMARY KEY (pid1, cid3, cid4))
  INTERLEAVE IN PARENT parent1 (pid1);
CREATE TABLE parent2 (pid1 INT PRIMARY KEY, v INT);

# Simple parent-child cases.
# parent1-child1 share interleave prefix (pid1).
query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM parent1 INNER MERGE JOIN child1 USING (pid1)
] WHERE node_type LIKE '%join'
----

query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM parent1 INNER MERGE JOIN child1 USING (pid1, v)
] WHERE node_type LIKE '%join'
----

query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM parent1 INNER MERGE JOIN child1 USING (v)
] WHERE node_type LIKE '%join'
----

# Parent-grandchild cases.
# parent1-grandchild1 share interleave prefix (pid1).
query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM parent1 INNER MERGE JOIN grandchild1 USING (pid1)
] WHERE node_type LIKE '%join'
----

query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM parent1 INNER MERGE JOIN grandchild1 USING (pid1, v)
] WHERE node_type LIKE '%join'
----

query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM parent1 INNER MERGE JOIN grandchild1 USING (v)
] WHERE node_type LIKE '%join'
----

# Multiple-column interleave prefix.
# child1-grandchild1 share interleave prefix (pid1, cid1, cid2).
query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM child1 INNER MERGE JOIN grandchild1 USING (pid1, cid1, cid2)
] WHERE node_type LIKE '%join'
----

query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM child1 INNER MERGE JOIN grandchild1 USING (pid1, cid1, cid2, v)
] WHERE node_type LIKE '%join'
----

query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM child1 INNER MERGE JOIN grandchild1 USING (v)
] WHERE node_type LIKE '%join'
----

# TODO(richardwu): update these once prefix/subset of
# interleave prefixes are permitted.
query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM child1 INNER MERGE JOIN grandchild1 USING (cid1)
] WHERE node_type LIKE '%join'
----

query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM child1 INNER MERGE JOIN grandchild1 USING (cid2)
] WHERE node_type LIKE '%join'
----

query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM child1 INNER MERGE JOIN grandchild1 USING (cid1, v)
] WHERE node_type LIKE '%join'
----

query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM child1 INNER MERGE JOIN grandchild1 USING (cid2, v)
] WHERE node_type LIKE '%join'
----

query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM child1 INNER MERGE JOIN grandchild1 USING (cid1, cid2)
] WHERE node_type LIKE '%join'
----

query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM child1 INNER MERGE JOIN grandchild1 USING (cid1, cid2, v)
] WHERE node_type LIKE '%join'
----

query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM child1 INNER MERGE JOIN grandchild1 USING (pid1, cid1)
] WHERE node_type LIKE '%join'
----

query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM child1 INNER MERGE JOIN grandchild1 USING (pid1, cid2)
] WHERE node_type LIKE '%join'
----

query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM child1 INNER MERGE JOIN grandchild1 USING (pid1, cid1, v)
] WHERE node_type LIKE '%join'
----

query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM child1 INNER MERGE JOIN grandchild1 USING (pid1, cid2, v)
] WHERE node_type LIKE '%join'
----

# Common ancestor example.
# TODO(richardwu): update this when common ancestor interleaved joins are possible.
query T
SELECT node_type FROM [ EXPLAIN (VERBOSE)
  SELECT * FROM child1 INNER MERGE JOIN child2 USING (pid1)
] WHERE node_type LIKE '%join'
----

# Case where the merge join ordering includes a non-interleaved column (this is
# possible if that column is constrained to a constant value). We shouldn't
# plan an interleaved table join in this case. See issue #25838 for a case
# where this could happen.
query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM parent1 INNER MERGE JOIN child1 ON parent1.pid1 = child1.pid1 AND parent1.v = child1.v WHERE parent1.v=1
----
·                   distribution         full                     ·                               ·
·                   vectorized           true                     ·                               ·
merge join (inner)  ·                    ·                        (pid1, v, pid1, cid1, cid2, v)  ·
 │                  estimated row count  10 (missing stats)       ·                               ·
 │                  equality             (pid1, v) = (pid1, v)    ·                               ·
 │                  left cols are key    ·                        ·                               ·
 │                  merge ordering       +"(pid1=pid1)",+"(v=v)"  ·                               ·
 ├── filter         ·                    ·                        (pid1, v)                       +pid1
 │    │             estimated row count  10 (missing stats)       ·                               ·
 │    │             filter               v = 1                    ·                               ·
 │    └── scan      ·                    ·                        (pid1, v)                       +pid1
 │                  estimated row count  1000 (missing stats)     ·                               ·
 │                  table                parent1@primary          ·                               ·
 │                  spans                FULL SCAN                ·                               ·
 └── filter         ·                    ·                        (pid1, cid1, cid2, v)           +pid1
      │             estimated row count  10 (missing stats)       ·                               ·
      │             filter               v = 1                    ·                               ·
      └── scan      ·                    ·                        (pid1, cid1, cid2, v)           +pid1
·                   estimated row count  1000 (missing stats)     ·                               ·
·                   table                child1@primary           ·                               ·
·                   spans                FULL SCAN                ·                               ·
