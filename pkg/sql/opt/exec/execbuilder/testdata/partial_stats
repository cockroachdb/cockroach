# LogicTest: local

# Tests that verify we can create and use partial table statistics
# USING EXTREMES correctly.

# Verify that we can use partial statistics for a simple
# table that has small amount of values added to the end
# of the latest full statistic.
# We store multiple full stats to ensure that merged stats
# work with forecasted statistics as well.

statement ok
CREATE TABLE g (b INT PRIMARY KEY) WITH (sql_stats_automatic_collection_enabled = false);

statement ok
ALTER TABLE g INJECT STATISTICS '[
  {
    "avg_size": 1,
    "columns": [
      "b"
    ],
    "created_at": "1988-08-05 00:00:00.000000",
    "distinct_count": 3,
    "histo_buckets": [
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "0"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "1"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "2"
      }
    ],
    "histo_col_type": "INT8",
    "histo_version": 2,
    "name": "full_0",
    "null_count": 0,
    "row_count": 3
  },
  {
    "avg_size": 1,
    "columns": [
      "b"
    ],
    "created_at": "1988-08-07 00:00:00.000000",
    "distinct_count": 9,
    "histo_buckets": [
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "0"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "1"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "2"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "3"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "4"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "5"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "6"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "7"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "8"
      }
    ],
    "histo_col_type": "INT8",
    "histo_version": 2,
    "name": "full_1",
    "null_count": 0,
    "row_count": 9
  },
  {
    "avg_size": 2,
    "columns": [
      "b"
    ],
    "created_at": "1988-08-08 00:00:00.000000",
    "distinct_count": 6,
    "histo_buckets": [
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "10"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "11"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "12"
      }
    ],
    "histo_col_type": "INT8",
    "histo_version": 2,
    "name": "partial",
    "null_count": 0,
    "partial_predicate": "(b < 0:::INT8) OR ((b > 8:::INT8) OR (b IS NULL))",
    "row_count": 6
  }
]'

query TTTIIII
SELECT statistics_name, column_names, created, row_count, distinct_count, null_count, avg_size
FROM [SHOW STATISTICS FOR TABLE g WITH MERGE]
ORDER BY created
----
full_0      {b}  1988-08-05 00:00:00 +0000 +0000  3   3   0  1
full_1      {b}  1988-08-07 00:00:00 +0000 +0000  9   9   0  1
partial     {b}  1988-08-08 00:00:00 +0000 +0000  6   6   0  2
__merged__  {b}  1988-08-08 00:00:00 +0000 +0000  12  12  0  1

query T
SELECT jsonb_pretty(stat)
FROM (
SELECT jsonb_array_elements(statistics) AS stat FROM [SHOW STATISTICS USING JSON FOR TABLE g WITH MERGE]
)
WHERE stat->>'name' = '__merged__';
----
{
    "avg_size": 1,
    "columns": [
        "b"
    ],
    "created_at": "1988-08-08 00:00:00",
    "distinct_count": 12,
    "histo_buckets": [
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "0"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "1"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "2"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "3"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "4"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "5"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "6"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "7"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "8"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "10"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "11"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "12"
        }
    ],
    "histo_col_type": "INT8",
    "histo_version": 2,
    "name": "__merged__",
    "null_count": 0,
    "row_count": 12
}

# The new merged statistic raises the number of full statistics to greater than
# the minimum threshold required to create forecasts, so the optimizer uses a
# forecasted statistic here of which the merged statistic is a part.
query T
EXPLAIN SELECT * FROM g WHERE b >= 10
----
distribution: local
vectorized: true
·
• scan
  estimated row count: 4 (30% of the table; stats collected <hidden> ago; using stats forecast)
  table: g@g_pkey
  spans: [/10 - ]

query T
EXPLAIN (OPT, VERBOSE) SELECT * FROM g WHERE b >= 10
----
scan g
 ├── columns: b:1
 ├── constraint: /1: [/10 - ]
 ├── stats: [rows=4.25, distinct(1)=3.72222, null(1)=0]
 │   histogram(1)=  0  0  1 1.0833 0 0.72222 0 1.4444
 │                <--- 9 ---- 11 ----- 12 ------ 13 -
 ├── cost: 18.3125
 ├── key: (1)
 └── distribution: test

# Since merged stats can be used for forecasting, verify
# that merging and forecasting can work together.

query TTTIIII
SELECT statistics_name, column_names, created, row_count, distinct_count, null_count, avg_size
FROM [SHOW STATISTICS FOR TABLE g WITH MERGE, FORECAST]
ORDER BY created
----
full_0        {b}  1988-08-05 00:00:00 +0000 +0000  3   3   0  1
full_1        {b}  1988-08-07 00:00:00 +0000 +0000  9   9   0  1
partial       {b}  1988-08-08 00:00:00 +0000 +0000  6   6   0  2
__merged__    {b}  1988-08-08 00:00:00 +0000 +0000  12  12  0  1
__forecast__  {b}  1988-08-08 12:00:00 +0000 +0000  14  14  0  1

query T
SELECT jsonb_pretty(stat)
FROM (
SELECT jsonb_array_elements(statistics) AS stat FROM [SHOW STATISTICS USING JSON FOR TABLE g WITH MERGE, FORECAST]
)
WHERE stat->>'name' = '__forecast__';
----
{
    "avg_size": 1,
    "columns": [
        "b"
    ],
    "created_at": "1988-08-08 12:00:00",
    "distinct_count": 14,
    "histo_buckets": [
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "0"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "1"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "2"
        },
        {
            "distinct_range": 0,
            "num_eq": 0,
            "num_range": 0,
            "upper_bound": "3"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "4"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "5"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "6"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "7"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "8"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "9"
        },
        {
            "distinct_range": 1,
            "num_eq": 1,
            "num_range": 1,
            "upper_bound": "11"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "12"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "13"
        }
    ],
    "histo_col_type": "INT8",
    "histo_version": 2,
    "name": "__forecast__",
    "null_count": 0,
    "row_count": 14
}

# Verify that when the partial histogram is empty
# the returned statistic is the latest full statistic
# renamed to __merged__ with the created_at time
# updated to that of the partial statistic.

statement ok
CREATE TABLE h (h INT PRIMARY KEY) WITH (sql_stats_automatic_collection_enabled = false);;

statement ok
ALTER TABLE h INJECT STATISTICS '
 [
      {
          "avg_size": 1,
          "columns": [
              "h"
          ],
          "created_at": "2022-12-07 17:43:58.649416",
          "distinct_count": 4,
          "histo_buckets": [
              {
                  "distinct_range": 0,
                  "num_eq": 1,
                  "num_range": 0,
                  "upper_bound": "10"
              },
              {
                  "distinct_range": 0,
                  "num_eq": 1,
                  "num_range": 0,
                  "upper_bound": "20"
              },
              {
                  "distinct_range": 0,
                  "num_eq": 1,
                  "num_range": 0,
                  "upper_bound": "30"
              },
              {
                  "distinct_range": 0,
                  "num_eq": 1,
                  "num_range": 0,
                  "upper_bound": "40"
              }
          ],
          "histo_col_type": "INT8",
          "histo_version": 2,
          "name": "full",
          "null_count": 0,
          "row_count": 4
      },
      {
           "avg_size": 0,
           "columns": [
               "h"
           ],
           "created_at": "2022-12-07 17:46:22.436487",
           "distinct_count": 0,
           "histo_col_type": "INT8",
           "histo_version": 2,
           "name": "partial",
           "null_count": 0,
           "partial_predicate": "(h < 10:::INT8) OR ((h > 40:::INT8) OR (h IS NULL))",
           "row_count": 0
       }
 ]'

query TTTIIII
SELECT statistics_name, column_names, created, row_count, distinct_count, null_count, avg_size
FROM [SHOW STATISTICS FOR TABLE h WITH MERGE]
ORDER BY created
----
full        {h}  2022-12-07 17:43:58.649416 +0000 +0000  4  4  0  1
partial     {h}  2022-12-07 17:46:22.436487 +0000 +0000  0  0  0  0
__merged__  {h}  2022-12-07 17:46:22.436487 +0000 +0000  4  4  0  1

query T
SELECT jsonb_pretty(stat)
FROM (
SELECT jsonb_array_elements(statistics) AS stat FROM [SHOW STATISTICS USING JSON FOR TABLE h WITH MERGE]
)
WHERE stat->>'name' = '__merged__';
----
{
    "avg_size": 1,
    "columns": [
        "h"
    ],
    "created_at": "2022-12-07 17:46:22.436487",
    "distinct_count": 4,
    "histo_buckets": [
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "10"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "20"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "30"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "40"
        }
    ],
    "histo_col_type": "INT8",
    "histo_version": 2,
    "name": "__merged__",
    "null_count": 0,
    "row_count": 4
}

# Verify partial statistics collection when we add
# values to the start and end of our column.

statement ok
CREATE TABLE i (i INT PRIMARY KEY) WITH (sql_stats_automatic_collection_enabled = false);

statement ok
ALTER TABLE i INJECT STATISTICS '[
  {
    "avg_size": 1,
    "columns": [
      "i"
    ],
    "created_at": "1988-08-05 00:00:00.000000",
    "distinct_count": 3,
    "histo_buckets": [
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "0"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "1"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "2"
      }
    ],
    "histo_col_type": "INT8",
    "histo_version": 2,
    "name": "full_0",
    "null_count": 0,
    "row_count": 3
  },
  {
    "avg_size": 2,
    "columns": [
      "i"
    ],
    "created_at": "2022-12-07 19:57:07.781368",
    "distinct_count": 6,
    "histo_buckets": [
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "-3"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "-2"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "-1"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "4"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "5"
      },
      {
        "distinct_range": 0,
        "num_eq": 1,
        "num_range": 0,
        "upper_bound": "6"
      }
    ],
    "histo_col_type": "INT8",
    "histo_version": 2,
    "name": "sp",
    "null_count": 0,
    "partial_predicate": "(i < 0:::INT8) OR ((i > 3:::INT8) OR (i IS NULL))",
    "row_count": 6
  }
]'

query TTTIIII
SELECT statistics_name, column_names, created, row_count, distinct_count, null_count, avg_size
FROM [SHOW STATISTICS FOR TABLE i WITH MERGE]
ORDER BY created
----
full_0      {i}  1988-08-05 00:00:00 +0000 +0000         3  3  0  1
sp          {i}  2022-12-07 19:57:07.781368 +0000 +0000  6  6  0  2
__merged__  {i}  2022-12-07 19:57:07.781368 +0000 +0000  9  9  0  1

query T
SELECT jsonb_pretty(stat)
FROM (
SELECT jsonb_array_elements(statistics) AS stat FROM [SHOW STATISTICS USING JSON FOR TABLE i WITH MERGE]
)
WHERE stat->>'name' = '__merged__';
----
{
    "avg_size": 1,
    "columns": [
        "i"
    ],
    "created_at": "2022-12-07 19:57:07.781368",
    "distinct_count": 9,
    "histo_buckets": [
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "-3"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "-2"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "-1"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "0"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "1"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "2"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "4"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "5"
        },
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "6"
        }
    ],
    "histo_col_type": "INT8",
    "histo_version": 2,
    "name": "__merged__",
    "null_count": 0,
    "row_count": 9
}

query T
EXPLAIN SELECT * FROM i WHERE i = 6 OR i <= -1
----
distribution: local
vectorized: true
·
• scan
  estimated row count: 4 (44% of the table; stats collected <hidden> ago)
  table: i@i_pkey
  spans: [ - /-1] [/6 - /6]

query T
EXPLAIN (OPT, VERBOSE) SELECT * FROM i WHERE i = 6 OR i <= -1
----
scan i
 ├── columns: i:1
 ├── constraint: /1
 │    ├── [ - /-1]
 │    └── [/6 - /6]
 ├── stats: [rows=4, distinct(1)=4, null(1)=0]
 │   histogram(1)=  0  1   0  1   0  1   0  1
 │                <--- -3 --- -2 --- -1 --- 6
 ├── cost: 22.06
 ├── key: (1)
 └── distribution: test

# Verify that we can merge and use partial statistics
# for columns with non-zero NumRange and DistinctRange
# buckets, and a non-zero null count, both when the
# bucket sizes of each side are the same and when
# they are different.

statement ok
CREATE TABLE ab (a INT, b INT, INDEX (a, b));

statement ok
ALTER TABLE ab INJECT STATISTICS
'[
    {
       "avg_size":3,
       "columns":[
          "b"
       ],
       "created_at":"2022-12-12 15:22:21.988179",
       "distinct_count":25,
       "histo_buckets":[
          {
             "distinct_range":4,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"15"
          },
          {
             "distinct_range":4,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"20"
          },
          {
             "distinct_range":4,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"25"
          },
          {
             "distinct_range":4,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"30"
          },
          {
             "distinct_range":4,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"35"
          }
       ],
       "histo_col_type":"INT8",
       "histo_version":2,
       "name":"full",
       "null_count":3,
       "row_count":25
    },
    {
       "avg_size":3,
       "columns":[
          "b"
       ],
       "created_at":"2022-12-13 15:22:21.988179",
       "distinct_count":31,
       "histo_buckets":[
          {
             "distinct_range":0,
             "num_eq":1,
             "num_range":0,
             "upper_bound":"0"
          },
          {
             "distinct_range":4,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"5"
          },
          {
             "distinct_range":4,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"10"
          },
          {
             "distinct_range":4,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"40"
          },
          {
             "distinct_range":4,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"45"
          },
          {
             "distinct_range":4,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"50"
          },
          {
             "distinct_range":4,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"55"
          }
       ],
       "histo_col_type":"INT8",
       "histo_version":2,
       "name":"partial",
       "null_count":5,
       "row_count":31,
       "partial_predicate": "(b < 15:::INT8) OR ((b > 35:::INT8) OR (b IS NULL))"
    },
    {
       "avg_size":3,
       "columns":[
          "a"
       ],
       "created_at":"2022-12-12 15:22:21.988179",
       "distinct_count":25,
       "histo_buckets":[
          {
             "distinct_range":4,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"15"
          },
          {
             "distinct_range":4,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"20"
          },
          {
             "distinct_range":4,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"25"
          },
          {
             "distinct_range":4,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"30"
          },
          {
             "distinct_range":4,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"35"
          }
       ],
       "histo_col_type":"INT8",
       "histo_version":2,
       "name":"full",
       "null_count":3,
       "row_count":25
    },
    {
       "avg_size":3,
       "columns":[
          "a"
       ],
       "created_at":"2022-12-14 15:22:21.988179",
       "distinct_count":31,
       "histo_buckets":[
          {
             "distinct_range":0,
             "num_eq":1,
             "num_range":0,
             "upper_bound":"0"
          },
          {
             "distinct_range":9,
             "num_eq":1,
             "num_range":9,
             "upper_bound":"10"
          },
          {
             "distinct_range":3,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"40"
          },
          {
             "distinct_range":3,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"44"
          },
          {
             "distinct_range":3,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"48"
          },
          {
             "distinct_range":3,
             "num_eq":1,
             "num_range":4,
             "upper_bound":"52"
          }
       ],
       "histo_col_type":"INT8",
       "histo_version":2,
       "name":"partial",
       "null_count":5,
       "row_count":31,
       "partial_predicate": "(b < 15:::INT8) OR ((b > 35:::INT8) OR (b IS NULL))"
    }
 ]'

query TTTIIII colnames
SELECT statistics_name, column_names, created, row_count, distinct_count, null_count, avg_size
FROM [SHOW STATISTICS FOR TABLE ab WITH MERGE]
ORDER BY created
----
statistics_name  column_names  created                                 row_count  distinct_count  null_count  avg_size
full             {a}           2022-12-12 15:22:21.988179 +0000 +0000  25         25              3           3
full             {b}           2022-12-12 15:22:21.988179 +0000 +0000  25         25              3           3
partial          {b}           2022-12-13 15:22:21.988179 +0000 +0000  31         31              5           3
__merged__       {b}           2022-12-13 15:22:21.988179 +0000 +0000  61         56              5           3
partial          {a}           2022-12-14 15:22:21.988179 +0000 +0000  31         31              5           3
__merged__       {a}           2022-12-14 15:22:21.988179 +0000 +0000  61         52              5           3

query T
SELECT jsonb_pretty(stat)
FROM (
SELECT jsonb_array_elements(statistics) AS stat FROM [SHOW STATISTICS USING JSON FOR TABLE ab WITH MERGE]
)
WHERE stat->>'name' = '__merged__' ORDER BY stat->>'created_at';
----
{
    "avg_size": 3,
    "columns": [
        "b"
    ],
    "created_at": "2022-12-13 15:22:21.988179",
    "distinct_count": 56,
    "histo_buckets": [
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "0"
        },
        {
            "distinct_range": 4,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "5"
        },
        {
            "distinct_range": 4,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "10"
        },
        {
            "distinct_range": 4,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "15"
        },
        {
            "distinct_range": 4,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "20"
        },
        {
            "distinct_range": 4,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "25"
        },
        {
            "distinct_range": 4,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "30"
        },
        {
            "distinct_range": 4,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "35"
        },
        {
            "distinct_range": 4,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "40"
        },
        {
            "distinct_range": 4,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "45"
        },
        {
            "distinct_range": 4,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "50"
        },
        {
            "distinct_range": 4,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "55"
        }
    ],
    "histo_col_type": "INT8",
    "histo_version": 2,
    "name": "__merged__",
    "null_count": 5,
    "row_count": 61
}
{
    "avg_size": 3,
    "columns": [
        "a"
    ],
    "created_at": "2022-12-14 15:22:21.988179",
    "distinct_count": 52,
    "histo_buckets": [
        {
            "distinct_range": 0,
            "num_eq": 1,
            "num_range": 0,
            "upper_bound": "0"
        },
        {
            "distinct_range": 9,
            "num_eq": 1,
            "num_range": 9,
            "upper_bound": "10"
        },
        {
            "distinct_range": 4,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "15"
        },
        {
            "distinct_range": 4,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "20"
        },
        {
            "distinct_range": 4,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "25"
        },
        {
            "distinct_range": 4,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "30"
        },
        {
            "distinct_range": 4,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "35"
        },
        {
            "distinct_range": 3,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "40"
        },
        {
            "distinct_range": 3,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "44"
        },
        {
            "distinct_range": 3,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "48"
        },
        {
            "distinct_range": 3,
            "num_eq": 1,
            "num_range": 4,
            "upper_bound": "52"
        }
    ],
    "histo_col_type": "INT8",
    "histo_version": 2,
    "name": "__merged__",
    "null_count": 5,
    "row_count": 61
}
