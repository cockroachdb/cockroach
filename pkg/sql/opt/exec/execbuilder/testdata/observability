# LogicTest: local

# Generates the explain plans the sql_activity_update_job uses to update
# transaction_activity and statement_activity tables

statement ok
set enable_zigzag_join = false

statement ok
INSERT INTO system.users VALUES ('node', NULL, true, 3)

statement ok
GRANT node TO root

statement ok
SELECT * FROM crdb_internal.transaction_activity

statement ok
SELECT * FROM crdb_internal.statement_activity

# Upsert all transaction_activity
query T retry
EXPLAIN (VERBOSE)
			UPSERT INTO system.public.transaction_activity
(aggregated_ts, fingerprint_id, app_name, agg_interval, metadata,
 statistics, query, execution_count, execution_total_seconds,
 execution_total_cluster_seconds, contention_time_avg_seconds,
 cpu_sql_avg_nanos, service_latency_avg_seconds, service_latency_p99_seconds)
    (SELECT max_aggregated_ts,
            fingerprint_id,
            app_name,
            max_agg_interval,
            metadata,
            statistics,
            '' AS query,
            (statistics->'statistics'->>'cnt')::int,
            ((statistics->'statistics'->>'cnt')::float)*((statistics->'statistics'->'svcLat'->>'mean')::float),
            100 AS execution_total_cluster_seconds,
            COALESCE((statistics->'execution_statistics'->'contentionTime'->>'mean')::float,0),
            COALESCE((statistics->'execution_statistics'->'cpuSQLNanos'->>'mean')::float,0),
            (statistics->'statistics'->'svcLat'->>'mean')::float,
						0
     FROM (SELECT
                  max(aggregated_ts) AS max_aggregated_ts,
                  app_name,
                  fingerprint_id,
                  max(agg_interval) as max_agg_interval,
                  max(metadata) as metadata,
                  merge_transaction_stats(statistics) AS statistics
           FROM system.public.transaction_statistics
           WHERE aggregated_ts = '2023-04-10 16:00:00.000000 +00:00'
             and app_name not like '$ internal%'
           GROUP BY app_name,
                    fingerprint_id));
----
distribution: local
vectorized: true
·
• upsert
│ columns: ()
│ estimated row count: 0 (missing stats)
│ into: transaction_activity(aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, statistics, query, execution_count, execution_total_seconds, execution_total_cluster_seconds, contention_time_avg_seconds, cpu_sql_avg_nanos, service_latency_avg_seconds, service_latency_p99_seconds)
│ auto commit
│ arbiter indexes: primary
│
└── • project
    │ columns: (max, fingerprint_id, app_name, max, max, merge_transaction_stats, query, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "?column?", aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, statistics, query, execution_count, execution_total_seconds, execution_total_cluster_seconds, contention_time_avg_seconds, cpu_sql_avg_nanos, service_latency_avg_seconds, service_latency_p99_seconds, max, max, merge_transaction_stats, query, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "?column?", aggregated_ts)
    │
    └── • lookup join (left outer)
        │ columns: (query, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "?column?", fingerprint_id, app_name, max, max, max, merge_transaction_stats, aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, statistics, query, execution_count, execution_total_seconds, execution_total_cluster_seconds, contention_time_avg_seconds, cpu_sql_avg_nanos, service_latency_avg_seconds, service_latency_p99_seconds)
        │ estimated row count: 3 (missing stats)
        │ table: transaction_activity@primary
        │ equality: (max, fingerprint_id, app_name) = (aggregated_ts,fingerprint_id,app_name)
        │ equality cols are key
        │
        └── • render
            │ columns: (query, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "?column?", fingerprint_id, app_name, max, max, max, merge_transaction_stats)
            │ render query: ''
            │ render int8: ((merge_transaction_stats->'statistics')->>'cnt')::INT8
            │ render ?column?: ((merge_transaction_stats->'statistics')->>'cnt')::FLOAT8 * (((merge_transaction_stats->'statistics')->'svcLat')->>'mean')::FLOAT8
            │ render execution_total_cluster_seconds: 100.0
            │ render coalesce: COALESCE((((merge_transaction_stats->'execution_statistics')->'contentionTime')->>'mean')::FLOAT8, 0.0)
            │ render coalesce: COALESCE((((merge_transaction_stats->'execution_statistics')->'cpuSQLNanos')->>'mean')::FLOAT8, 0.0)
            │ render float8: (((merge_transaction_stats->'statistics')->'svcLat')->>'mean')::FLOAT8
            │ render ?column?: 0.0
            │ render fingerprint_id: fingerprint_id
            │ render app_name: app_name
            │ render max: max
            │ render max: max
            │ render max: max
            │ render merge_transaction_stats: merge_transaction_stats
            │
            └── • group (hash)
                │ columns: (fingerprint_id, app_name, max, max, max, merge_transaction_stats)
                │ estimated row count: 3 (missing stats)
                │ aggregate 0: max(aggregated_ts)
                │ aggregate 1: max(agg_interval)
                │ aggregate 2: max(metadata)
                │ aggregate 3: merge_transaction_stats(statistics)
                │ group by: fingerprint_id, app_name
                │
                └── • index join
                    │ columns: (aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, statistics)
                    │ estimated row count: 3 (missing stats)
                    │ table: transaction_statistics@primary
                    │ key columns: crdb_internal_aggregated_ts_app_name_fingerprint_id_node_id_shard_8, aggregated_ts, fingerprint_id, app_name, node_id
                    │
                    └── • scan
                          columns: (aggregated_ts, fingerprint_id, app_name, node_id, crdb_internal_aggregated_ts_app_name_fingerprint_id_node_id_shard_8)
                          estimated row count: 3 (missing stats)
                          table: transaction_statistics@execution_count_idx (partial index)
                          spans: /2023-04-10T16:00:00Z-/2023-04-10T16:00:00.000000001Z

# Upsert all statement_activity
query T retry
EXPLAIN (VERBOSE)
			UPSERT
INTO system.public.statement_activity (aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name,
                                       agg_interval, metadata, statistics, plan, index_recommendations, execution_count,
                                       execution_total_seconds, execution_total_cluster_seconds,
                                       contention_time_avg_seconds,
                                       cpu_sql_avg_nanos,
                                       service_latency_avg_seconds, service_latency_p99_seconds)
    (SELECT aggregated_ts,
            fingerprint_id,
            '0x0000000000000000'::bytes,
            plan_hash,
            app_name,
            max_agg_interval,
            merged_metadata,
            merged_stats,
            max_plan,
             (select COALESCE(array_agg(o.rec::string), (array[]::string[])) FROM jsonb_array_elements_text(merged_stats -> 'index_recommendations') o(rec)) as idx_rec,
            (merged_stats -> 'statistics' ->> 'cnt')::int,
            ((merged_stats -> 'statistics' ->> 'cnt')::float) *
            ((merged_stats -> 'statistics' -> 'svcLat' ->> 'mean')::float),
            100 AS execution_total_cluster_seconds,
            COALESCE((merged_stats -> 'execution_statistics' -> 'contentionTime' ->> 'mean')::float, 0),
            COALESCE((merged_stats -> 'execution_statistics' -> 'cpuSQLNanos' ->> 'mean')::float, 0),
            (merged_stats -> 'statistics' -> 'svcLat' ->> 'mean')::float,
            COALESCE((merged_stats -> 'statistics' -> 'latencyInfo' ->> 'p99')::float, 0)
     FROM (SELECT max(aggregated_ts)                                           AS aggregated_ts,
                  fingerprint_id,
                  plan_hash,
                  app_name,
                  max(agg_interval) as max_agg_interval,
                  merge_stats_metadata(metadata)    AS merged_metadata,
                  merge_statement_stats(statistics) AS merged_stats,
                  max(plan) AS max_plan
           FROM system.public.statement_statistics
           WHERE aggregated_ts = '2023-04-10 16:00:00.000000 +00:00'
             and app_name not like '$ internal%'
           GROUP BY app_name,
                    fingerprint_id,
                    plan_hash));
----
distribution: local
vectorized: true
·
• upsert
│ columns: ()
│ estimated row count: 0 (missing stats)
│ into: statement_activity(aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name, agg_interval, metadata, statistics, plan, index_recommendations, execution_count, execution_total_seconds, execution_total_cluster_seconds, contention_time_avg_seconds, cpu_sql_avg_nanos, service_latency_avg_seconds, service_latency_p99_seconds)
│ auto commit
│ arbiter indexes: primary
│
└── • project
    │ columns: (max, fingerprint_id, bytea, plan_hash, app_name, max, merge_stats_metadata, merge_statement_stats, max, idx_rec, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "coalesce", aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name, agg_interval, metadata, statistics, plan, index_recommendations, execution_count, execution_total_seconds, execution_total_cluster_seconds, contention_time_avg_seconds, cpu_sql_avg_nanos, service_latency_avg_seconds, service_latency_p99_seconds, max, merge_stats_metadata, merge_statement_stats, max, idx_rec, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "coalesce", aggregated_ts)
    │
    └── • project
        │ columns: (fingerprint_id, plan_hash, app_name, max, max, merge_stats_metadata, merge_statement_stats, max, bytea, idx_rec, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "coalesce", aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name, agg_interval, metadata, statistics, plan, index_recommendations, execution_count, execution_total_seconds, execution_total_cluster_seconds, contention_time_avg_seconds, cpu_sql_avg_nanos, service_latency_avg_seconds, service_latency_p99_seconds)
        │
        └── • lookup join (left outer)
            │ columns: ("lookup_join_const_col_@63", bytea, idx_rec, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "coalesce", fingerprint_id, plan_hash, app_name, max, max, merge_stats_metadata, merge_statement_stats, max, aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name, agg_interval, metadata, statistics, plan, index_recommendations, execution_count, execution_total_seconds, execution_total_cluster_seconds, contention_time_avg_seconds, cpu_sql_avg_nanos, service_latency_avg_seconds, service_latency_p99_seconds)
            │ estimated row count: 3 (missing stats)
            │ table: statement_activity@primary
            │ equality: (max, fingerprint_id, lookup_join_const_col_@63, plan_hash, app_name) = (aggregated_ts,fingerprint_id,transaction_fingerprint_id,plan_hash,app_name)
            │ equality cols are key
            │
            └── • render
                │ columns: ("lookup_join_const_col_@63", bytea, idx_rec, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "coalesce", fingerprint_id, plan_hash, app_name, max, max, merge_stats_metadata, merge_statement_stats, max)
                │ render lookup_join_const_col_@63: '\x307830303030303030303030303030303030'
                │ render bytea: '\x307830303030303030303030303030303030'
                │ render idx_rec: COALESCE(CASE WHEN any_not_null IS NOT NULL THEN array_agg ELSE CAST(NULL AS STRING[]) END, ARRAY[])
                │ render int8: ((any_not_null->'statistics')->>'cnt')::INT8
                │ render ?column?: ((any_not_null->'statistics')->>'cnt')::FLOAT8 * (((any_not_null->'statistics')->'svcLat')->>'mean')::FLOAT8
                │ render execution_total_cluster_seconds: 100.0
                │ render coalesce: COALESCE((((any_not_null->'execution_statistics')->'contentionTime')->>'mean')::FLOAT8, 0.0)
                │ render coalesce: COALESCE((((any_not_null->'execution_statistics')->'cpuSQLNanos')->>'mean')::FLOAT8, 0.0)
                │ render float8: (((any_not_null->'statistics')->'svcLat')->>'mean')::FLOAT8
                │ render coalesce: COALESCE((((any_not_null->'statistics')->'latencyInfo')->>'p99')::FLOAT8, 0.0)
                │ render fingerprint_id: fingerprint_id
                │ render plan_hash: plan_hash
                │ render app_name: app_name
                │ render max: any_not_null
                │ render max: any_not_null
                │ render merge_stats_metadata: any_not_null
                │ render merge_statement_stats: any_not_null
                │ render max: any_not_null
                │
                └── • group (hash)
                    │ columns: (fingerprint_id, plan_hash, app_name, array_agg, any_not_null, any_not_null, any_not_null, any_not_null, any_not_null, any_not_null)
                    │ estimated row count: 3 (missing stats)
                    │ aggregate 0: array_agg(value)
                    │ aggregate 1: any_not_null(max)
                    │ aggregate 2: any_not_null(max)
                    │ aggregate 3: any_not_null(merge_stats_metadata)
                    │ aggregate 4: any_not_null(merge_statement_stats)
                    │ aggregate 5: any_not_null(max)
                    │ aggregate 6: any_not_null(canary)
                    │ group by: fingerprint_id, plan_hash, app_name
                    │
                    └── • apply join (left outer)
                        │ columns: (fingerprint_id, plan_hash, app_name, max, max, merge_stats_metadata, merge_statement_stats, max, value, canary)
                        │ estimated row count: 33 (missing stats)
                        │
                        └── • group (hash)
                            │ columns: (fingerprint_id, plan_hash, app_name, max, max, merge_stats_metadata, merge_statement_stats, max)
                            │ estimated row count: 3 (missing stats)
                            │ aggregate 0: max(aggregated_ts)
                            │ aggregate 1: max(agg_interval)
                            │ aggregate 2: merge_stats_metadata(metadata)
                            │ aggregate 3: merge_statement_stats(statistics)
                            │ aggregate 4: max(plan)
                            │ group by: fingerprint_id, plan_hash, app_name
                            │
                            └── • index join
                                │ columns: (aggregated_ts, fingerprint_id, plan_hash, app_name, agg_interval, metadata, statistics, plan)
                                │ estimated row count: 3 (missing stats)
                                │ table: statement_statistics@primary
                                │ key columns: crdb_internal_aggregated_ts_app_name_fingerprint_id_node_id_plan_hash_transaction_fingerprint_id_shard_8, aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name, node_id
                                │
                                └── • scan
                                      columns: (aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name, node_id, crdb_internal_aggregated_ts_app_name_fingerprint_id_node_id_plan_hash_transaction_fingerprint_id_shard_8)
                                      estimated row count: 3 (missing stats)
                                      table: statement_statistics@execution_count_idx (partial index)
                                      spans: /2023-04-10T16:00:00Z-/2023-04-10T16:00:00.000000001Z

# Upsert top 500 statement_activity including all statements in the top 500 transactions
query T retry
EXPLAIN (VERBOSE)
WITH agg_stmt_stats AS (SELECT aggregated_ts,
                               fingerprint_id,
                               app_name,
                               merge_statement_stats(statistics) AS merged_stats
                        FROM system.public.statement_statistics
                        WHERE aggregated_ts = '2023-04-10 16:00:00.000000 +00:00'
                          and app_name not like '$ internal%'
                        GROUP BY aggregated_ts,
                                 app_name,
                                 fingerprint_id),
     limit_stmt_stats AS (SELECT aggregated_ts,
                                 fingerprint_id,
                                 app_name
                          FROM (SELECT aggregated_ts,
                                       fingerprint_id,
                                       app_name,
                                       merged_stats,
                                       row_number() OVER (ORDER BY (merged_stats -> 'statistics' ->> 'cnt')::int desc)                AS ePos,
                                       row_number() OVER (ORDER BY (merged_stats -> 'statistics' -> 'svcLat' ->> 'mean')::float desc) AS sPos,
                                       row_number() OVER (ORDER BY
                                               ((merged_stats -> 'statistics' ->> 'cnt')::float) *
                                               ((merged_stats -> 'statistics' -> 'svcLat' ->> 'mean')::float) desc)      AS tPos,
                                       row_number() OVER (ORDER BY COALESCE((merged_stats -> 'execution_statistics' -> 'contentionTime' ->> 'mean')::float, 0) desc) AS cPos,
                                       row_number() OVER (ORDER BY COALESCE((merged_stats -> 'execution_statistics' -> 'cpuSQLNanos' ->> 'mean')::float, 0) desc) AS uPos,
                                       row_number() OVER (ORDER BY COALESCE((merged_stats -> 'statistics' -> 'latencyInfo' ->> 'p99')::float, 0) desc) AS lPos
                                FROM agg_stmt_stats)
                          WHERE ePos < 500
                             or sPos < 500
                             or tPos < 500
														 or (cPos < 500 AND ((merged_stats -> 'execution_statistics' -> 'contentionTime' ->> 'mean')::float > 0))
														 or (uPos < 500 AND  ((merged_stats -> 'execution_statistics' -> 'cpuSQLNanos' ->> 'mean')::float > 0))
														 or (lPos < 500 AND ((merged_stats -> 'statistics' -> 'latencyInfo' ->> 'p99')::float > 0)))
UPSERT INTO system.public.statement_activity
(aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name,
 agg_interval, metadata, statistics, plan, index_recommendations, execution_count,
 execution_total_seconds, execution_total_cluster_seconds,
 contention_time_avg_seconds,
 cpu_sql_avg_nanos,
 service_latency_avg_seconds, service_latency_p99_seconds)(
SELECT aggregated_ts,
       fingerprint_id,
       '0x0000000000000000'::bytes,
       plan_hash,
       app_name,
       max_agg_interval,
       metadata,
       merged_stats,
       max_plan,
			 (select COALESCE(array_agg(o.rec::string), (array[]::string[])) FROM jsonb_array_elements_text(merged_stats -> 'index_recommendations') o(rec)) as idx_rec,
       (merged_stats -> 'statistics' ->> 'cnt')::int,
       ((merged_stats -> 'statistics' ->> 'cnt')::float) *
       ((merged_stats -> 'statistics' -> 'svcLat' ->> 'mean')::float),
       100 AS execution_total_cluster_seconds,
       COALESCE((merged_stats -> 'execution_statistics' -> 'contentionTime' ->> 'mean')::float, 0),
       COALESCE((merged_stats -> 'execution_statistics' -> 'cpuSQLNanos' ->> 'mean')::float, 0),
       (merged_stats -> 'statistics' -> 'svcLat' ->> 'mean')::float,
       COALESCE((merged_stats -> 'statistics' -> 'latencyInfo' ->> 'p99')::float, 0)
FROM (SELECT ss.aggregated_ts AS aggregated_ts,
             ss.fingerprint_id,
             ss.plan_hash,
             ss.app_name,
             max(ss.agg_interval) AS max_agg_interval,
             max(ss.plan) AS max_plan,
						 merge_stats_metadata(ss.metadata) AS metadata,
    				 merge_statement_stats(ss.statistics) AS merged_stats
      FROM system.statement_statistics ss
		  inner join limit_stmt_stats using (aggregated_ts, fingerprint_id, app_name)
      group by aggregated_ts, fingerprint_id, plan_hash, app_name));
----
            distribution: local
            vectorized: true
            ·
            • upsert
            │ columns: ()
            │ estimated row count: 0 (missing stats)
            │ into: statement_activity(aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name, agg_interval, metadata, statistics, plan, index_recommendations, execution_count, execution_total_seconds, execution_total_cluster_seconds, contention_time_avg_seconds, cpu_sql_avg_nanos, service_latency_avg_seconds, service_latency_p99_seconds)
            │ auto commit
            │ arbiter indexes: primary
            │
            └── • project
                │ columns: (aggregated_ts, fingerprint_id, bytea, plan_hash, app_name, max, merge_stats_metadata, merge_statement_stats, max, idx_rec, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "coalesce", aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name, agg_interval, metadata, statistics, plan, index_recommendations, execution_count, execution_total_seconds, execution_total_cluster_seconds, contention_time_avg_seconds, cpu_sql_avg_nanos, service_latency_avg_seconds, service_latency_p99_seconds, max, merge_stats_metadata, merge_statement_stats, max, idx_rec, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "coalesce", aggregated_ts)
                │
                └── • project
                    │ columns: (aggregated_ts, fingerprint_id, plan_hash, app_name, max, max, merge_stats_metadata, merge_statement_stats, bytea, idx_rec, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "coalesce", aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name, agg_interval, metadata, statistics, plan, index_recommendations, execution_count, execution_total_seconds, execution_total_cluster_seconds, contention_time_avg_seconds, cpu_sql_avg_nanos, service_latency_avg_seconds, service_latency_p99_seconds)
                    │
                    └── • lookup join (left outer)
                        │ columns: ("lookup_join_const_col_@104", bytea, idx_rec, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "coalesce", aggregated_ts, fingerprint_id, plan_hash, app_name, max, max, merge_stats_metadata, merge_statement_stats, aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name, agg_interval, metadata, statistics, plan, index_recommendations, execution_count, execution_total_seconds, execution_total_cluster_seconds, contention_time_avg_seconds, cpu_sql_avg_nanos, service_latency_avg_seconds, service_latency_p99_seconds)
                        │ estimated row count: 0 (missing stats)
                        │ table: statement_activity@primary
                        │ equality: (aggregated_ts, fingerprint_id, lookup_join_const_col_@104, plan_hash, app_name) = (aggregated_ts,fingerprint_id,transaction_fingerprint_id,plan_hash,app_name)
                        │ equality cols are key
                        │
                        └── • render
                            │ columns: ("lookup_join_const_col_@104", bytea, idx_rec, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "coalesce", aggregated_ts, fingerprint_id, plan_hash, app_name, max, max, merge_stats_metadata, merge_statement_stats)
                            │ render lookup_join_const_col_@104: '\x307830303030303030303030303030303030'
                            │ render bytea: '\x307830303030303030303030303030303030'
                            │ render idx_rec: COALESCE(CASE WHEN any_not_null IS NOT NULL THEN array_agg ELSE CAST(NULL AS STRING[]) END, ARRAY[])
                            │ render int8: ((any_not_null->'statistics')->>'cnt')::INT8
                            │ render ?column?: ((any_not_null->'statistics')->>'cnt')::FLOAT8 * (((any_not_null->'statistics')->'svcLat')->>'mean')::FLOAT8
                            │ render execution_total_cluster_seconds: 100.0
                            │ render coalesce: COALESCE((((any_not_null->'execution_statistics')->'contentionTime')->>'mean')::FLOAT8, 0.0)
                            │ render coalesce: COALESCE((((any_not_null->'execution_statistics')->'cpuSQLNanos')->>'mean')::FLOAT8, 0.0)
                            │ render float8: (((any_not_null->'statistics')->'svcLat')->>'mean')::FLOAT8
                            │ render coalesce: COALESCE((((any_not_null->'statistics')->'latencyInfo')->>'p99')::FLOAT8, 0.0)
                            │ render aggregated_ts: any_not_null
                            │ render fingerprint_id: fingerprint_id
                            │ render plan_hash: plan_hash
                            │ render app_name: app_name
                            │ render max: any_not_null
                            │ render max: any_not_null
                            │ render merge_stats_metadata: any_not_null
                            │ render merge_statement_stats: any_not_null
                            │
                            └── • group (hash)
                                │ columns: (fingerprint_id, plan_hash, app_name, array_agg, any_not_null, any_not_null, any_not_null, any_not_null, any_not_null, any_not_null)
                                │ estimated row count: 0 (missing stats)
                                │ aggregate 0: array_agg(value)
                                │ aggregate 1: any_not_null(any_not_null)
                                │ aggregate 2: any_not_null(max)
                                │ aggregate 3: any_not_null(max)
                                │ aggregate 4: any_not_null(merge_stats_metadata)
                                │ aggregate 5: any_not_null(merge_statement_stats)
                                │ aggregate 6: any_not_null(canary)
                                │ group by: fingerprint_id, plan_hash, app_name
                                │
                                └── • apply join (left outer)
                                    │ columns: (fingerprint_id, plan_hash, app_name, max, max, merge_stats_metadata, merge_statement_stats, any_not_null, value, canary)
                                    │ estimated row count: 0 (missing stats)
                                    │
                                    └── • group (hash)
                                        │ columns: (fingerprint_id, plan_hash, app_name, max, max, merge_stats_metadata, merge_statement_stats, any_not_null)
                                        │ estimated row count: 0 (missing stats)
                                        │ aggregate 0: max(agg_interval)
                                        │ aggregate 1: max(plan)
                                        │ aggregate 2: merge_stats_metadata(metadata)
                                        │ aggregate 3: merge_statement_stats(statistics)
                                        │ aggregate 4: any_not_null(aggregated_ts)
                                        │ group by: fingerprint_id, plan_hash, app_name
                                        │
                                        └── • project
                                            │ columns: (aggregated_ts, fingerprint_id, plan_hash, app_name, agg_interval, metadata, statistics, plan)
                                            │
                                            └── • project
                                                │ columns: (aggregated_ts, fingerprint_id, plan_hash, app_name, agg_interval, metadata, statistics, plan, aggregated_ts, fingerprint_id, app_name)
                                                │
                                                └── • lookup join (inner)
                                                    │ columns: (aggregated_ts, fingerprint_id, app_name, aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name, node_id, crdb_internal_aggregated_ts_app_name_fingerprint_id_node_id_plan_hash_transaction_fingerprint_id_shard_8, agg_interval, metadata, statistics, plan)
                                                    │ estimated row count: 0 (missing stats)
                                                    │ table: statement_statistics@primary
                                                    │ equality: (crdb_internal_aggregated_ts_app_name_fingerprint_id_node_id_plan_hash_transaction_fingerprint_id_shard_8, aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name, node_id) = (crdb_internal_aggregated_ts_app_name_fingerprint_id_node_id_plan_hash_transaction_fingerprint_id_shard_8,aggregated_ts,fingerprint_id,transaction_fingerprint_id,plan_hash,app_name,node_id)
                                                    │ equality cols are key
                                                    │
                                                    └── • lookup join (inner)
                                                        │ columns: (aggregated_ts, fingerprint_id, app_name, aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name, node_id, crdb_internal_aggregated_ts_app_name_fingerprint_id_node_id_plan_hash_transaction_fingerprint_id_shard_8)
                                                        │ estimated row count: 0 (missing stats)
                                                        │ table: statement_statistics@fingerprint_stats_idx
                                                        │ equality: (fingerprint_id) = (fingerprint_id)
                                                        │ pred: (aggregated_ts = aggregated_ts) AND (app_name = app_name)
                                                        │
                                                        └── • render
                                                            │ columns: (aggregated_ts, fingerprint_id, app_name)
                                                            │ render aggregated_ts: aggregated_ts
                                                            │ render fingerprint_id: fingerprint_id
                                                            │ render app_name: app_name
                                                            │
                                                            └── • filter
                                                                │ columns: (aggregated_ts, fingerprint_id, app_name, merged_stats, row_number, row_number, row_number, row_number, row_number, row_number_1_orderby_1_1, row_number_2_orderby_1_1, row_number_3_orderby_1_1, row_number_4_orderby_1_1, row_number_5_orderby_1_1, row_number_6_orderby_1_1, row_number)
                                                                │ estimated row count: 3 (missing stats)
                                                                │ filter: (((((row_number < 500) OR (row_number < 500)) OR (row_number < 500)) OR ((row_number < 500) AND ((((merged_stats->'execution_statistics')->'contentionTime')->>'mean')::FLOAT8 > 0.0))) OR ((row_number < 500) AND ((((merged_stats->'execution_statistics')->'cpuSQLNanos')->>'mean')::FLOAT8 > 0.0))) OR ((row_number < 500) AND ((((merged_stats->'statistics')->'latencyInfo')->>'p99')::FLOAT8 > 0.0))
                                                                │
                                                                └── • window
                                                                    │ columns: (aggregated_ts, fingerprint_id, app_name, merged_stats, row_number, row_number, row_number, row_number, row_number, row_number_1_orderby_1_1, row_number_2_orderby_1_1, row_number_3_orderby_1_1, row_number_4_orderby_1_1, row_number_5_orderby_1_1, row_number_6_orderby_1_1, row_number)
                                                                    │ estimated row count: 3 (missing stats)
                                                                    │ window 0: row_number() OVER (ORDER BY row_number_6_orderby_1_1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
                                                                    │
                                                                    └── • window
                                                                        │ columns: (aggregated_ts, fingerprint_id, app_name, merged_stats, row_number, row_number, row_number, row_number, row_number, row_number_1_orderby_1_1, row_number_2_orderby_1_1, row_number_3_orderby_1_1, row_number_4_orderby_1_1, row_number_5_orderby_1_1, row_number_6_orderby_1_1)
                                                                        │ estimated row count: 3 (missing stats)
                                                                        │ window 0: row_number() OVER (ORDER BY row_number_5_orderby_1_1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
                                                                        │
                                                                        └── • window
                                                                            │ columns: (aggregated_ts, fingerprint_id, app_name, merged_stats, row_number, row_number, row_number, row_number, row_number_1_orderby_1_1, row_number_2_orderby_1_1, row_number_3_orderby_1_1, row_number_4_orderby_1_1, row_number_5_orderby_1_1, row_number_6_orderby_1_1)
                                                                            │ estimated row count: 3 (missing stats)
                                                                            │ window 0: row_number() OVER (ORDER BY row_number_4_orderby_1_1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
                                                                            │
                                                                            └── • window
                                                                                │ columns: (aggregated_ts, fingerprint_id, app_name, merged_stats, row_number, row_number, row_number, row_number_1_orderby_1_1, row_number_2_orderby_1_1, row_number_3_orderby_1_1, row_number_4_orderby_1_1, row_number_5_orderby_1_1, row_number_6_orderby_1_1)
                                                                                │ estimated row count: 3 (missing stats)
                                                                                │ window 0: row_number() OVER (ORDER BY row_number_3_orderby_1_1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
                                                                                │
                                                                                └── • window
                                                                                    │ columns: (aggregated_ts, fingerprint_id, app_name, merged_stats, row_number, row_number, row_number_1_orderby_1_1, row_number_2_orderby_1_1, row_number_3_orderby_1_1, row_number_4_orderby_1_1, row_number_5_orderby_1_1, row_number_6_orderby_1_1)
                                                                                    │ estimated row count: 3 (missing stats)
                                                                                    │ window 0: row_number() OVER (ORDER BY row_number_2_orderby_1_1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
                                                                                    │
                                                                                    └── • window
                                                                                        │ columns: (aggregated_ts, fingerprint_id, app_name, merged_stats, row_number, row_number_1_orderby_1_1, row_number_2_orderby_1_1, row_number_3_orderby_1_1, row_number_4_orderby_1_1, row_number_5_orderby_1_1, row_number_6_orderby_1_1)
                                                                                        │ estimated row count: 3 (missing stats)
                                                                                        │ window 0: row_number() OVER (ORDER BY row_number_1_orderby_1_1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
                                                                                        │
                                                                                        └── • render
                                                                                            │ columns: (aggregated_ts, fingerprint_id, app_name, merged_stats, row_number_1_orderby_1_1, row_number_2_orderby_1_1, row_number_3_orderby_1_1, row_number_4_orderby_1_1, row_number_5_orderby_1_1, row_number_6_orderby_1_1)
                                                                                            │ render row_number_1_orderby_1_1: ((merged_stats->'statistics')->>'cnt')::INT8
                                                                                            │ render row_number_2_orderby_1_1: (((merged_stats->'statistics')->'svcLat')->>'mean')::FLOAT8
                                                                                            │ render row_number_3_orderby_1_1: ((merged_stats->'statistics')->>'cnt')::FLOAT8 * (((merged_stats->'statistics')->'svcLat')->>'mean')::FLOAT8
                                                                                            │ render row_number_4_orderby_1_1: COALESCE((((merged_stats->'execution_statistics')->'contentionTime')->>'mean')::FLOAT8, 0.0)
                                                                                            │ render row_number_5_orderby_1_1: COALESCE((((merged_stats->'execution_statistics')->'cpuSQLNanos')->>'mean')::FLOAT8, 0.0)
                                                                                            │ render row_number_6_orderby_1_1: COALESCE((((merged_stats->'statistics')->'latencyInfo')->>'p99')::FLOAT8, 0.0)
                                                                                            │ render aggregated_ts: aggregated_ts
                                                                                            │ render fingerprint_id: fingerprint_id
                                                                                            │ render app_name: app_name
                                                                                            │ render merged_stats: merged_stats
                                                                                            │
                                                                                            └── • render
                                                                                                │ columns: (aggregated_ts, fingerprint_id, app_name, merged_stats)
                                                                                                │ render aggregated_ts: any_not_null
                                                                                                │ render fingerprint_id: fingerprint_id
                                                                                                │ render app_name: app_name
                                                                                                │ render merged_stats: merge_statement_stats
                                                                                                │
                                                                                                └── • group (hash)
                                                                                                    │ columns: (fingerprint_id, app_name, merge_statement_stats, any_not_null)
                                                                                                    │ estimated row count: 3 (missing stats)
                                                                                                    │ aggregate 0: merge_statement_stats(statistics)
                                                                                                    │ aggregate 1: any_not_null(aggregated_ts)
                                                                                                    │ group by: fingerprint_id, app_name
                                                                                                    │
                                                                                                    └── • index join
                                                                                                        │ columns: (aggregated_ts, fingerprint_id, app_name, statistics)
                                                                                                        │ estimated row count: 3 (missing stats)
                                                                                                        │ table: statement_statistics@primary
                                                                                                        │ key columns: crdb_internal_aggregated_ts_app_name_fingerprint_id_node_id_plan_hash_transaction_fingerprint_id_shard_8, aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name, node_id
                                                                                                        │
                                                                                                        └── • scan
                                                                                                              columns: (aggregated_ts, fingerprint_id, transaction_fingerprint_id, plan_hash, app_name, node_id, crdb_internal_aggregated_ts_app_name_fingerprint_id_node_id_plan_hash_transaction_fingerprint_id_shard_8)
                                                                                                              estimated row count: 3 (missing stats)
                                                                                                              table: statement_statistics@execution_count_idx (partial index)
                                                                                                              spans: /2023-04-10T16:00:00Z-/2023-04-10T16:00:00.000000001Z

# Upsert top 500 transactions
query T retry
EXPLAIN (VERBOSE)
WITH agg_txn_stats AS (SELECT aggregated_ts,
                              fingerprint_id,
                              app_name,
                              max(agg_interval) as agg_interval,
                              max(metadata)                                                as metadata,
                              merge_transaction_stats(statistics) AS merge_stats
                       FROM system.public.transaction_statistics
                       WHERE aggregated_ts = '2023-04-10 16:00:00.000000 +00:00'
                         and app_name not like '$ internal%'
                       GROUP BY aggregated_ts,
                                app_name,
                                fingerprint_id)
    UPSERT
INTO system.public.transaction_activity
(aggregated_ts, fingerprint_id, app_name, agg_interval, metadata,
 statistics, query, execution_count, execution_total_seconds,
 execution_total_cluster_seconds, contention_time_avg_seconds,
 cpu_sql_avg_nanos, service_latency_avg_seconds, service_latency_p99_seconds)
(SELECT aggregated_ts,
		 fingerprint_id,
		 app_name,
		 agg_interval,
		 metadata,
		 merge_stats,
		 '' AS query,
		(merge_stats -> 'statistics' ->> 'cnt')::int,
    ((merge_stats -> 'statistics' ->> 'cnt')::float) *
    ((merge_stats -> 'statistics' -> 'svcLat' ->> 'mean')::float),
    100 AS execution_total_cluster_seconds,
    COALESCE ((merge_stats -> 'execution_statistics' -> 'contentionTime' ->> 'mean')::float, 0),
    COALESCE ((merge_stats -> 'execution_statistics' -> 'cpuSQLNanos' ->> 'mean')::float, 0),
    (merge_stats -> 'statistics' -> 'svcLat' ->> 'mean')::float,
    0
    FROM (SELECT aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, merge_stats
          FROM (SELECT aggregated_ts,
						fingerprint_id,
						app_name,
						agg_interval,
						metadata,
						merge_stats,
						row_number() OVER (ORDER BY (merge_stats -> 'statistics' ->> 'cnt')::int desc) AS ePos,
						row_number() OVER (ORDER BY (merge_stats -> 'statistics' -> 'svcLat' ->> 'mean')::float desc) AS sPos,
						row_number() OVER (ORDER BY ((merge_stats -> 'statistics' ->> 'cnt')::float) *
							((merge_stats -> 'statistics' -> 'svcLat' ->> 'mean')::float) desc) AS tPos,
						row_number() OVER (ORDER BY COALESCE((merge_stats -> 'execution_statistics' -> 'contentionTime' ->> 'mean')::float, 0) desc) AS cPos,
						row_number() OVER (ORDER BY COALESCE((merge_stats -> 'execution_statistics' -> 'cpuSQLNanos' ->> 'mean')::float, 0) desc) AS uPos
						FROM agg_txn_stats)
					WHERE ePos < 500
					or sPos < 500
					or tPos < 500
					or (cPos < 500 AND ((merge_stats -> 'execution_statistics' -> 'contentionTime' ->> 'mean')::float > 0))
					or (uPos < 500 AND  ((merge_stats -> 'execution_statistics' -> 'cpuSQLNanos' ->> 'mean')::float > 0))));
----
distribution: local
vectorized: true
·
• upsert
│ columns: ()
│ estimated row count: 0 (missing stats)
│ into: transaction_activity(aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, statistics, query, execution_count, execution_total_seconds, execution_total_cluster_seconds, contention_time_avg_seconds, cpu_sql_avg_nanos, service_latency_avg_seconds, service_latency_p99_seconds)
│ auto commit
│ arbiter indexes: primary
│
└── • project
    │ columns: (aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, merge_stats, query, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "?column?", aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, statistics, query, execution_count, execution_total_seconds, execution_total_cluster_seconds, contention_time_avg_seconds, cpu_sql_avg_nanos, service_latency_avg_seconds, service_latency_p99_seconds, agg_interval, metadata, merge_stats, query, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "?column?", aggregated_ts)
    │
    └── • lookup join (left outer)
        │ columns: (query, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "?column?", aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, merge_stats, aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, statistics, query, execution_count, execution_total_seconds, execution_total_cluster_seconds, contention_time_avg_seconds, cpu_sql_avg_nanos, service_latency_avg_seconds, service_latency_p99_seconds)
        │ estimated row count: 3 (missing stats)
        │ table: transaction_activity@primary
        │ equality: (aggregated_ts, fingerprint_id, app_name) = (aggregated_ts,fingerprint_id,app_name)
        │ equality cols are key
        │
        └── • render
            │ columns: (query, int8, "?column?", execution_total_cluster_seconds, "coalesce", "coalesce", float8, "?column?", aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, merge_stats)
            │ render query: ''
            │ render int8: ((merge_stats->'statistics')->>'cnt')::INT8
            │ render ?column?: ((merge_stats->'statistics')->>'cnt')::FLOAT8 * (((merge_stats->'statistics')->'svcLat')->>'mean')::FLOAT8
            │ render execution_total_cluster_seconds: 100.0
            │ render coalesce: COALESCE((((merge_stats->'execution_statistics')->'contentionTime')->>'mean')::FLOAT8, 0.0)
            │ render coalesce: COALESCE((((merge_stats->'execution_statistics')->'cpuSQLNanos')->>'mean')::FLOAT8, 0.0)
            │ render float8: (((merge_stats->'statistics')->'svcLat')->>'mean')::FLOAT8
            │ render ?column?: 0.0
            │ render aggregated_ts: aggregated_ts
            │ render fingerprint_id: fingerprint_id
            │ render app_name: app_name
            │ render agg_interval: agg_interval
            │ render metadata: metadata
            │ render merge_stats: merge_stats
            │
            └── • filter
                │ columns: (aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, merge_stats, row_number, row_number, row_number, row_number, row_number_1_orderby_1_1, row_number_2_orderby_1_1, row_number_3_orderby_1_1, row_number_4_orderby_1_1, row_number_5_orderby_1_1, row_number)
                │ estimated row count: 3 (missing stats)
                │ filter: ((((row_number < 500) OR (row_number < 500)) OR (row_number < 500)) OR ((row_number < 500) AND ((((merge_stats->'execution_statistics')->'contentionTime')->>'mean')::FLOAT8 > 0.0))) OR ((row_number < 500) AND ((((merge_stats->'execution_statistics')->'cpuSQLNanos')->>'mean')::FLOAT8 > 0.0))
                │
                └── • window
                    │ columns: (aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, merge_stats, row_number, row_number, row_number, row_number, row_number_1_orderby_1_1, row_number_2_orderby_1_1, row_number_3_orderby_1_1, row_number_4_orderby_1_1, row_number_5_orderby_1_1, row_number)
                    │ estimated row count: 3 (missing stats)
                    │ window 0: row_number() OVER (ORDER BY row_number_5_orderby_1_1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
                    │
                    └── • window
                        │ columns: (aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, merge_stats, row_number, row_number, row_number, row_number, row_number_1_orderby_1_1, row_number_2_orderby_1_1, row_number_3_orderby_1_1, row_number_4_orderby_1_1, row_number_5_orderby_1_1)
                        │ estimated row count: 3 (missing stats)
                        │ window 0: row_number() OVER (ORDER BY row_number_4_orderby_1_1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
                        │
                        └── • window
                            │ columns: (aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, merge_stats, row_number, row_number, row_number, row_number_1_orderby_1_1, row_number_2_orderby_1_1, row_number_3_orderby_1_1, row_number_4_orderby_1_1, row_number_5_orderby_1_1)
                            │ estimated row count: 3 (missing stats)
                            │ window 0: row_number() OVER (ORDER BY row_number_3_orderby_1_1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
                            │
                            └── • window
                                │ columns: (aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, merge_stats, row_number, row_number, row_number_1_orderby_1_1, row_number_2_orderby_1_1, row_number_3_orderby_1_1, row_number_4_orderby_1_1, row_number_5_orderby_1_1)
                                │ estimated row count: 3 (missing stats)
                                │ window 0: row_number() OVER (ORDER BY row_number_2_orderby_1_1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
                                │
                                └── • window
                                    │ columns: (aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, merge_stats, row_number, row_number_1_orderby_1_1, row_number_2_orderby_1_1, row_number_3_orderby_1_1, row_number_4_orderby_1_1, row_number_5_orderby_1_1)
                                    │ estimated row count: 3 (missing stats)
                                    │ window 0: row_number() OVER (ORDER BY row_number_1_orderby_1_1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
                                    │
                                    └── • render
                                        │ columns: (aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, merge_stats, row_number_1_orderby_1_1, row_number_2_orderby_1_1, row_number_3_orderby_1_1, row_number_4_orderby_1_1, row_number_5_orderby_1_1)
                                        │ render row_number_1_orderby_1_1: ((merge_stats->'statistics')->>'cnt')::INT8
                                        │ render row_number_2_orderby_1_1: (((merge_stats->'statistics')->'svcLat')->>'mean')::FLOAT8
                                        │ render row_number_3_orderby_1_1: ((merge_stats->'statistics')->>'cnt')::FLOAT8 * (((merge_stats->'statistics')->'svcLat')->>'mean')::FLOAT8
                                        │ render row_number_4_orderby_1_1: COALESCE((((merge_stats->'execution_statistics')->'contentionTime')->>'mean')::FLOAT8, 0.0)
                                        │ render row_number_5_orderby_1_1: COALESCE((((merge_stats->'execution_statistics')->'cpuSQLNanos')->>'mean')::FLOAT8, 0.0)
                                        │ render aggregated_ts: aggregated_ts
                                        │ render fingerprint_id: fingerprint_id
                                        │ render app_name: app_name
                                        │ render agg_interval: agg_interval
                                        │ render metadata: metadata
                                        │ render merge_stats: merge_stats
                                        │
                                        └── • render
                                            │ columns: (aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, merge_stats)
                                            │ render aggregated_ts: any_not_null
                                            │ render fingerprint_id: fingerprint_id
                                            │ render app_name: app_name
                                            │ render agg_interval: max
                                            │ render metadata: max
                                            │ render merge_stats: merge_transaction_stats
                                            │
                                            └── • group (hash)
                                                │ columns: (fingerprint_id, app_name, max, max, merge_transaction_stats, any_not_null)
                                                │ estimated row count: 3 (missing stats)
                                                │ aggregate 0: max(agg_interval)
                                                │ aggregate 1: max(metadata)
                                                │ aggregate 2: merge_transaction_stats(statistics)
                                                │ aggregate 3: any_not_null(aggregated_ts)
                                                │ group by: fingerprint_id, app_name
                                                │
                                                └── • index join
                                                    │ columns: (aggregated_ts, fingerprint_id, app_name, agg_interval, metadata, statistics)
                                                    │ estimated row count: 3 (missing stats)
                                                    │ table: transaction_statistics@primary
                                                    │ key columns: crdb_internal_aggregated_ts_app_name_fingerprint_id_node_id_shard_8, aggregated_ts, fingerprint_id, app_name, node_id
                                                    │
                                                    └── • scan
                                                          columns: (aggregated_ts, fingerprint_id, app_name, node_id, crdb_internal_aggregated_ts_app_name_fingerprint_id_node_id_shard_8)
                                                          estimated row count: 3 (missing stats)
                                                          table: transaction_statistics@execution_count_idx (partial index)
                                                          spans: /2023-04-10T16:00:00Z-/2023-04-10T16:00:00.000000001Z
