# LogicTest: local

# This test file verifies that the lookup and index joins don't fetch too many
# rows eagerly in the presence of limit hints.

statement ok
CREATE TABLE a (x INT PRIMARY KEY, y INT, z INT, INDEX (y));
CREATE TABLE b (x INT PRIMARY KEY);
INSERT INTO a VALUES (1, 1, 1), (2, 1, 1), (3, 2, 2), (4, 2, 2);
INSERT INTO b VALUES (1), (2), (3), (4);

# Query with an index join and a limit hint.
query T
EXPLAIN (OPT, VERBOSE) SELECT * FROM (SELECT * FROM a WHERE y = 1 UNION ALL SELECT * FROM a WHERE y = 2) LIMIT 1
----
limit
 ├── columns: x:11 y:12 z:13
 ├── cardinality: [0 - 1]
 ├── stats: [rows=1]
 ├── cost: 152.280001
 ├── key: ()
 ├── fd: ()-->(11-13)
 ├── distribution: test
 ├── prune: (11,13)
 ├── union-all
 │    ├── columns: x:11 y:12 z:13
 │    ├── left columns: a.x:1 a.y:2 a.z:3
 │    ├── right columns: a.x:6 a.y:7 a.z:8
 │    ├── stats: [rows=20]
 │    ├── cost: 152.260001
 │    ├── limit hint: 1.00
 │    ├── distribution: test
 │    ├── prune: (11,13)
 │    ├── index-join a
 │    │    ├── columns: a.x:1 a.y:2 a.z:3
 │    │    ├── stats: [rows=10, distinct(2)=1, null(2)=0, avgsize(2)=4]
 │    │    ├── cost: 76.0200006
 │    │    ├── key: (1)
 │    │    ├── fd: ()-->(2), (1)-->(3)
 │    │    ├── limit hint: 1.00
 │    │    ├── distribution: test
 │    │    ├── prune: (1,3)
 │    │    └── scan a@a_y_idx
 │    │         ├── columns: a.x:1 a.y:2
 │    │         ├── constraint: /2/1: [/1 - /1]
 │    │         ├── stats: [rows=10, distinct(2)=1, null(2)=0, avgsize(2)=4]
 │    │         ├── cost: 15.1
 │    │         ├── key: (1)
 │    │         ├── fd: ()-->(2)
 │    │         ├── limit hint: 1.00
 │    │         └── distribution: test
 │    └── index-join a
 │         ├── columns: a.x:6 a.y:7 a.z:8
 │         ├── stats: [rows=10, distinct(7)=1, null(7)=0, avgsize(7)=4]
 │         ├── cost: 76.0200006
 │         ├── key: (6)
 │         ├── fd: ()-->(7), (6)-->(8)
 │         ├── limit hint: 1.00
 │         ├── distribution: test
 │         ├── prune: (6,8)
 │         └── scan a@a_y_idx
 │              ├── columns: a.x:6 a.y:7
 │              ├── constraint: /7/6: [/2 - /2]
 │              ├── stats: [rows=10, distinct(7)=1, null(7)=0, avgsize(7)=4]
 │              ├── cost: 15.1
 │              ├── key: (6)
 │              ├── fd: ()-->(7)
 │              ├── limit hint: 1.00
 │              └── distribution: test
 └── 1

# Run through the vectorized engine. Make sure that only a single row is scanned
# and then a single row is looked up by the index join.
query T
EXPLAIN ANALYZE SELECT * FROM (SELECT * FROM a WHERE y = 1 UNION ALL SELECT * FROM a WHERE y = 2) LIMIT 1
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 2 (16 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• limit
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 1
│ count: 1
│
└── • union all
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 1
    │
    ├── • index join
    │   │ nodes: <hidden>
    │   │ regions: <hidden>
    │   │ actual row count: 1
    │   │ KV time: 0µs
    │   │ KV contention time: 0µs
    │   │ KV rows read: 1
    │   │ KV bytes read: 8 B
    │   │ estimated max memory allocated: 0 B
    │   │ estimated max sql temp disk usage: 0 B
    │   │ table: a@a_pkey
    │   │
    │   └── • scan
    │         nodes: <hidden>
    │         regions: <hidden>
    │         actual row count: 1
    │         KV time: 0µs
    │         KV contention time: 0µs
    │         KV rows read: 1
    │         KV bytes read: 8 B
    │         estimated max memory allocated: 0 B
    │         missing stats
    │         table: a@a_y_idx
    │         spans: [/1 - /1]
    │
    └── • index join
        │ nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 0
        │ KV time: 0µs
        │ KV contention time: 0µs
        │ KV rows read: 0
        │ KV bytes read: 0 B
        │ estimated max memory allocated: 0 B
        │ estimated max sql temp disk usage: 0 B
        │ table: a@a_pkey
        │
        └── • scan
              nodes: <hidden>
              regions: <hidden>
              actual row count: 0
              KV time: 0µs
              KV contention time: 0µs
              KV rows read: 0
              KV bytes read: 0 B
              estimated max memory allocated: 0 B
              missing stats
              table: a@a_y_idx
              spans: [/2 - /2]

statement ok
SET vectorize = off

# Run through the row-by-row engine. Make sure that only a single row is scanned
# and then a single row is looked up by the index join.
query T
EXPLAIN ANALYZE SELECT * FROM (SELECT * FROM a WHERE y = 1 UNION ALL SELECT * FROM a WHERE y = 2) LIMIT 1
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 2 (16 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• limit
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 1
│ count: 1
│
└── • union all
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 1
    │
    ├── • index join
    │   │ nodes: <hidden>
    │   │ regions: <hidden>
    │   │ actual row count: 1
    │   │ KV time: 0µs
    │   │ KV contention time: 0µs
    │   │ KV rows read: 1
    │   │ KV bytes read: 8 B
    │   │ estimated max memory allocated: 0 B
    │   │ table: a@a_pkey
    │   │
    │   └── • scan
    │         nodes: <hidden>
    │         regions: <hidden>
    │         actual row count: 1
    │         KV time: 0µs
    │         KV contention time: 0µs
    │         KV rows read: 1
    │         KV bytes read: 8 B
    │         missing stats
    │         table: a@a_y_idx
    │         spans: [/1 - /1]
    │
    └── • index join
        │ nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 0
        │ KV time: 0µs
        │ KV contention time: 0µs
        │ KV rows read: 0
        │ KV bytes read: 0 B
        │ estimated max memory allocated: 0 B
        │ table: a@a_pkey
        │
        └── • scan
              nodes: <hidden>
              regions: <hidden>
              actual row count: 0
              KV time: 0µs
              KV contention time: 0µs
              KV rows read: 0
              KV bytes read: 0 B
              missing stats
              table: a@a_y_idx
              spans: [/2 - /2]

statement ok
RESET vectorize

# Inject such stats that the query below will have a limit hint of 1 for the
# scan.
statement ok
ALTER TABLE a INJECT STATISTICS '[
      {
          "avg_size": 1,
          "columns": ["x"],
          "created_at": "2022-03-22 00:00:00",
          "distinct_count": 1,
          "name": "__auto__",
          "null_count": 0,
          "row_count": 1
      },
       {
           "avg_size": 1,
           "columns": ["y"],
           "created_at": "2022-03-22 00:00:00",
           "distinct_count": 1,
           "name": "__auto__",
           "null_count": 0,
           "row_count": 1
       },
       {
           "avg_size": 1,
           "columns": ["z"],
           "created_at": "2022-03-22 00:00:00",
           "distinct_count": 1,
           "name": "__auto__",
           "null_count": 0,
           "row_count": 1
       }
  ]'

# Query with a lookup join and a limit hint.
query T
EXPLAIN (OPT, VERBOSE) SELECT b.x FROM a, b WHERE a.x = b.x LIMIT 1
----
project
 ├── columns: x:6
 ├── cardinality: [0 - 1]
 ├── stats: [rows=1]
 ├── cost: 21.145
 ├── key: ()
 ├── fd: ()-->(6)
 ├── distribution: test
 ├── prune: (6)
 └── limit
      ├── columns: a.x:1 b.x:6
      ├── cardinality: [0 - 1]
      ├── stats: [rows=1]
      ├── cost: 21.125
      ├── key: ()
      ├── fd: ()-->(1,6), (6)==(1), (1)==(6)
      ├── distribution: test
      ├── inner-join (lookup b)
      │    ├── columns: a.x:1 b.x:6
      │    ├── key columns: [1] = [6]
      │    ├── lookup columns are key
      │    ├── stats: [rows=1, distinct(1)=1, null(1)=0, avgsize(1)=1, distinct(6)=1, null(6)=0, avgsize(6)=4]
      │    ├── cost: 21.105
      │    ├── key: (6)
      │    ├── fd: (1)==(6), (6)==(1)
      │    ├── limit hint: 1.00
      │    ├── distribution: test
      │    ├── scan a@a_y_idx
      │    │    ├── columns: a.x:1
      │    │    ├── stats: [rows=1, distinct(1)=1, null(1)=0, avgsize(1)=1]
      │    │    ├── cost: 15.035
      │    │    ├── key: (1)
      │    │    ├── limit hint: 1.00
      │    │    ├── distribution: test
      │    │    ├── prune: (1)
      │    │    ├── interesting orderings: (+1)
      │    │    └── unfiltered-cols: (1-5)
      │    └── filters (true)
      └── 1

# Perform a lookup join. Make sure that a single row is scanned and then a
# single row is looked up.
query T
EXPLAIN ANALYZE SELECT b.x FROM a, b WHERE a.x = b.x LIMIT 1
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 2 (16 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• limit
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 1
│ KV time: 0µs
│ KV contention time: 0µs
│ KV rows read: 1
│ KV bytes read: 8 B
│ estimated max memory allocated: 0 B
│ count: 1
│
└── • lookup join
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 1
    │ KV time: 0µs
    │ KV contention time: 0µs
    │ KV rows read: 1
    │ KV bytes read: 8 B
    │ estimated max memory allocated: 0 B
    │ table: b@b_pkey
    │ equality: (x) = (x)
    │ equality cols are key
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 1
          KV time: 0µs
          KV contention time: 0µs
          KV rows read: 1
          KV bytes read: 8 B
          estimated max memory allocated: 0 B
          estimated row count: 1 (100% of the table; stats collected <hidden> ago)
          table: a@a_y_idx
          spans: FULL SCAN
