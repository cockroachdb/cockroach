# LogicTest: local-opt

statement ok
CREATE TABLE kv (
  k INT PRIMARY KEY,
  v INT
)

query TTT
SELECT tree, field, description FROM [
EXPLAIN (VERBOSE) UPSERT INTO kv TABLE kv ORDER BY v DESC LIMIT 2
]
----
count                                    ·         ·
 └── upsert                              ·         ·
      │                                  into      kv(k, v)
      │                                  strategy  opt upserter
      └── render                         ·         ·
           │                             render 0  upsert_k
           │                             render 1  upsert_v
           │                             render 2  k
           │                             render 3  v
           │                             render 4  upsert_v
           └── render                    ·         ·
                │                        render 0  CASE WHEN k IS NULL THEN k ELSE k END
                │                        render 1  CASE WHEN k IS NULL THEN v ELSE v END
                │                        render 2  k
                │                        render 3  v
                └── lookup-join          ·         ·
                     │                   type      inner
                     ├── limit           ·         ·
                     │    │              count     2
                     │    └── sort       ·         ·
                     │         │         order     -v
                     │         └── scan  ·         ·
                     │                   table     kv@primary
                     │                   spans     ALL
                     └── scan            ·         ·
·                                        table     kv@primary

# Regression test for #25726.
# UPSERT over tables with column families, on the fast path, use the
# INSERT logic. This has special casing for column families of 1
# column, and another special casing for column families of 2+
# columns. The special casing is only for families that do not include
# the primary key. So we need a table with 3 families: 1 for the PK, 1
# with just 1 col, and 1 with 2+ cols.
#
# TODO(andyk): Need to implement CBO fast path using PUT.
statement ok
CREATE TABLE tu (a INT PRIMARY KEY, b INT, c INT, d INT, FAMILY (a), FAMILY (b), FAMILY (c,d));
  INSERT INTO tu VALUES (1, 2, 3, 4)

statement ok
SET tracing = on,kv,results; UPSERT INTO tu VALUES (1, NULL, NULL, NULL); SET tracing = off

query T
SELECT message FROM [SHOW KV TRACE FOR SESSION]
----
Scan /Table/54/1/1{-/#}
querying next range at /Table/54/1/1
r19: sending batch 1 Scan to (n1,s1):1
fetched: /tu/primary/1 -> NULL
fetched: /tu/primary/1/b -> 2
fetched: /tu/primary/1/c/d -> /3/4
Del /Table/54/1/1/1/1
Del /Table/54/1/1/2/1
querying next range at /Table/54/1/1/1/1
r19: sending batch 2 Del, 1 BeginTxn, 1 EndTxn to (n1,s1):1
fast path completed
rows affected: 1
