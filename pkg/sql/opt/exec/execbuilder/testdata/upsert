# LogicTest: local-opt

statement ok
CREATE TABLE kv (
  k INT PRIMARY KEY,
  v INT
)

query TTT
SELECT tree, field, description FROM [
EXPLAIN (VERBOSE) UPSERT INTO kv TABLE kv ORDER BY v DESC LIMIT 2
]
----
count                                    ·         ·
 └── upsert                              ·         ·
      │                                  into      kv(k, v)
      │                                  strategy  opt upserter
      └── render                         ·         ·
           │                             render 0  k
           │                             render 1  v
           │                             render 2  k
           │                             render 3  v
           │                             render 4  upsert_v
           │                             render 5  k
           └── render                    ·         ·
                │                        render 0  CASE WHEN k IS NULL THEN k ELSE k END
                │                        render 1  CASE WHEN k IS NULL THEN v ELSE v END
                │                        render 2  k
                │                        render 3  v
                │                        render 4  k
                │                        render 5  v
                └── lookup-join          ·         ·
                     │                   table     kv@primary
                     │                   type      inner
                     └── limit           ·         ·
                          │              count     2
                          └── sort       ·         ·
                               │         order     -v
                               └── scan  ·         ·
·                                        table     kv@primary
·                                        spans     ALL

# Regression test for #25726.
# UPSERT over tables with column families, on the fast path, use the
# INSERT logic. This has special casing for column families of 1
# column, and another special casing for column families of 2+
# columns. The special casing is only for families that do not include
# the primary key. So we need a table with 3 families: 1 for the PK, 1
# with just 1 col, and 1 with 2+ cols.
#
# TODO(andyk): Need to implement CBO fast path using PUT.
statement ok
CREATE TABLE tu (a INT PRIMARY KEY, b INT, c INT, d INT, FAMILY (a), FAMILY (b), FAMILY (c,d));
  INSERT INTO tu VALUES (1, 2, 3, 4)

statement ok
SET tracing = on,kv,results; UPSERT INTO tu VALUES (1, NULL, NULL, NULL); SET tracing = off

query T
SELECT message FROM [SHOW KV TRACE FOR SESSION]
----
Scan /Table/54/1/1{-/#}
querying next range at /Table/54/1/1
r20: sending batch 1 Scan to (n1,s1):1
fetched: /tu/primary/1 -> NULL
fetched: /tu/primary/1/b -> 2
fetched: /tu/primary/1/c/d -> /3/4
Del /Table/54/1/1/1/1
Del /Table/54/1/1/2/1
querying next range at /Table/54/1/1/1/1
r20: sending batch 2 Del, 1 EndTxn to (n1,s1):1
fast path completed
rows affected: 1

# KV operations.
statement ok
CREATE DATABASE t; CREATE TABLE t.kv(k INT PRIMARY KEY, v INT)

statement ok
CREATE UNIQUE INDEX woo ON t.kv(v)

statement ok
SET tracing = on,kv,results; UPSERT INTO t.kv(k, v) VALUES (2,3); SET tracing = off

query TT
SELECT operation, message FROM [SHOW KV TRACE FOR SESSION]
----
table reader      Scan /Table/56/1/2{-/#}
dist sender send  querying next range at /Table/56/1/2
dist sender send  r20: sending batch 1 Scan to (n1,s1):1
flow              CPut /Table/56/1/2/0 -> /TUPLE/2:2:Int/3
flow              InitPut /Table/56/2/3/0 -> /BYTES/0x8a
dist sender send  querying next range at /Table/56/1/2/0
dist sender send  r20: sending batch 1 CPut, 1 EndTxn, 1 InitPut to (n1,s1):1
flow              fast path completed
sql txn           rows affected: 1

statement ok
SET tracing = on,kv,results; UPSERT INTO t.kv(k, v) VALUES (1,2); SET tracing = off

query TT
SELECT operation, message FROM [SHOW KV TRACE FOR SESSION]
----
table reader      Scan /Table/56/1/1{-/#}
dist sender send  querying next range at /Table/56/1/1
dist sender send  r20: sending batch 1 Scan to (n1,s1):1
flow              CPut /Table/56/1/1/0 -> /TUPLE/2:2:Int/2
flow              InitPut /Table/56/2/2/0 -> /BYTES/0x89
dist sender send  querying next range at /Table/56/1/1/0
dist sender send  r20: sending batch 1 CPut, 1 EndTxn, 1 InitPut to (n1,s1):1
flow              fast path completed
sql txn           rows affected: 1

statement error duplicate key value
SET tracing = on,kv,results; UPSERT INTO t.kv(k, v) VALUES (2,2); SET tracing = off

query TT
set tracing=off;
SELECT operation, message FROM [SHOW KV TRACE FOR SESSION]
----
table reader      Scan /Table/56/1/2{-/#}
dist sender send  querying next range at /Table/56/1/2
dist sender send  r20: sending batch 1 Scan to (n1,s1):1
table reader      fetched: /kv/primary/2/v -> /3
flow              Put /Table/56/1/2/0 -> /TUPLE/2:2:Int/2
flow              Del /Table/56/2/3/0
flow              CPut /Table/56/2/2/0 -> /BYTES/0x8a
dist sender send  querying next range at /Table/56/1/2/0
dist sender send  r20: sending batch 1 Put, 1 CPut, 1 Del, 1 EndTxn to (n1,s1):1
sql txn           execution failed after 0 rows: duplicate key value (v)=(2) violates unique constraint "woo"
dist sender send  querying next range at /Table/56/1/2/0
dist sender send  r20: sending batch 1 EndTxn to (n1,s1):1


subtest regression_32473

statement ok
CREATE TABLE customers (
  customer_id serial PRIMARY KEY,
  name VARCHAR UNIQUE,
  email VARCHAR NOT NULL
);

statement ok
INSERT INTO customers (name, email) VALUES ('bob', 'bob@email.com') ON CONFLICT (name)
  DO UPDATE SET (name, email) = (
    SELECT 'bob', 'otherbob@email.com'
  )

query TT
SELECT name, email FROM customers
----
bob  bob@email.com

# This statement only works with the optimizer enabled.
statement ok
INSERT INTO customers (name, email) VALUES ('bob', 'bob@email.com') ON CONFLICT (name)
  DO UPDATE SET (name, email) = (
    SELECT 'bob2', 'otherbob@email.com'
  )

query TT
SELECT name, email FROM customers
----
bob2  otherbob@email.com

statement ok
DROP TABLE customers

# The CBO behaves differently than the HP and PG in this case. It only checks
# constraints if an insert or update actually occurs. In this case, the DO
# NOTHING clause skips the update, so there is no need to check the constraint.
statement ok
CREATE TABLE t5 (k INT PRIMARY KEY, a INT, b int CHECK (a > b))

statement ok
INSERT INTO t5 VALUES (1, 10, 9) ON CONFLICT (k) DO NOTHING

statement ok
INSERT INTO t5 VALUES (1, 10, 20) ON CONFLICT (k) DO NOTHING
