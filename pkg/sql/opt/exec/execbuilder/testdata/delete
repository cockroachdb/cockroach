# LogicTest: local

statement ok
CREATE TABLE kv (
  k INT PRIMARY KEY,
  v INT,
  UNIQUE INDEX foo (v),
  INDEX bar (k, v)
)

statement ok
CREATE TABLE unindexed (
  k INT PRIMARY KEY,
  v INT
)

statement ok
CREATE TABLE indexed (id int primary key, value int, other int, index (value))

statement count 4
INSERT INTO kv VALUES (1, 2), (3, 4), (5, 6), (7, 8)

statement count 2
DELETE FROM kv WHERE k=3 OR v=6

query II
DELETE FROM kv RETURNING k, v
----
1 2
7 8

statement ok
SET tracing = on,kv,results; SELECT * FROM kv; SET tracing = off

query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 ORDER BY message LIKE 'fetched:%' DESC, ordinality ASC
----

statement ok
SET tracing = on,kv,results; SELECT * FROM kv@foo; SET tracing = off

query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 ORDER BY message LIKE 'fetched:%' DESC, ordinality ASC
----

statement ok
SET tracing = on,kv,results; SELECT * FROM kv@bar; SET tracing = off

query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 ORDER BY message LIKE 'fetched:%' DESC, ordinality ASC
----

# Check that EXPLAIN does not destroy data (#6613)
query T
EXPLAIN DELETE FROM unindexed
----
distribution: local
vectorized: true
·
• delete range
  from: unindexed
  spans: FULL SCAN

query T
EXPLAIN DELETE FROM unindexed WHERE v = 7 ORDER BY v LIMIT 10
----
distribution: local
vectorized: true
·
• delete
│ from: unindexed
│ auto commit
│
└── • limit
    │ count: 10
    │
    └── • filter
        │ filter: v = 7
        │
        └── • scan
              missing stats
              table: unindexed@primary
              spans: FULL SCAN

# Check DELETE with LIMIT clause (MySQL extension)
query T
EXPLAIN DELETE FROM unindexed WHERE v = 5 LIMIT 10
----
distribution: local
vectorized: true
·
• delete
│ from: unindexed
│ auto commit
│
└── • limit
    │ count: 10
    │
    └── • filter
        │ filter: v = 5
        │
        └── • scan
              missing stats
              table: unindexed@primary
              spans: FULL SCAN

# Check fast DELETE.
query T
EXPLAIN DELETE FROM unindexed WHERE k > 0
----
distribution: local
vectorized: true
·
• delete range
  from: unindexed
  spans: [/1 - ]

# Check fast DELETE with reverse scans (not supported by optimizer).
query error DELETE statement requires LIMIT when ORDER BY is used
EXPLAIN DELETE FROM unindexed WHERE true ORDER BY k DESC

# Check that limits don't permit fast deletes.
query T
EXPLAIN DELETE FROM unindexed WHERE k > 0 LIMIT 1
----
distribution: local
vectorized: true
·
• delete
│ from: unindexed
│ auto commit
│
└── • scan
      missing stats
      table: unindexed@primary
      spans: [/1 - ]
      limit: 1

query T
EXPLAIN DELETE FROM indexed WHERE value = 5 LIMIT 10
----
distribution: local
vectorized: true
·
• delete
│ from: indexed
│ auto commit
│
└── • scan
      missing stats
      table: indexed@indexed_value_idx
      spans: [/5 - /5]
      limit: 10

query T
EXPLAIN DELETE FROM indexed LIMIT 10
----
distribution: local
vectorized: true
·
• delete
│ from: indexed
│ auto commit
│
└── • scan
      missing stats
      table: indexed@indexed_value_idx
      spans: LIMITED SCAN
      limit: 10

# TODO(andyk): Prune columns so that index-join is not necessary.
query T
EXPLAIN DELETE FROM indexed WHERE value = 5 LIMIT 10 RETURNING id
----
distribution: local
vectorized: true
·
• delete
│ from: indexed
│ auto commit
│
└── • scan
      missing stats
      table: indexed@indexed_value_idx
      spans: [/5 - /5]
      limit: 10

# Ensure that index hints in DELETE statements force the choice of a specific index
# as described in #38799.
statement ok
CREATE TABLE t38799 (a INT PRIMARY KEY, b INT, c INT, INDEX foo(b))

query T
EXPLAIN (VERBOSE) DELETE FROM t38799@foo
----
distribution: local
vectorized: true
·
• delete
│ columns: ()
│ estimated row count: 0 (missing stats)
│ from: t38799
│ auto commit
│
└── • scan
      columns: (a, b)
      estimated row count: 1,000 (missing stats)
      table: t38799@foo
      spans: FULL SCAN

# Tracing tests for fast delete.
statement ok
CREATE TABLE a (a INT PRIMARY KEY)

# Delete range operates in chunks of 600 (defined by row.TableTruncateChunkSize).
statement ok
INSERT INTO a SELECT * FROM generate_series(1,1000)

statement ok
SET tracing = on,kv; DELETE FROM a; SET tracing = off

# Ensure that DelRange requests are chunked for DELETE FROM...
query TT
SELECT operation, message FROM [SHOW KV TRACE FOR SESSION]
WHERE message LIKE '%DelRange%' OR message LIKE '%DelRng%'
----
batch flow coordinator  DelRange /Table/57/1 - /Table/57/2
dist sender send        r43: sending batch 1 DelRng to (n1,s1):1
batch flow coordinator  DelRange /Table/57/1/601/0 - /Table/57/2
dist sender send        r43: sending batch 1 DelRng to (n1,s1):1

# Ensure that DelRange requests are autocommitted when DELETE FROM happens on a
# chunk of fewer than 600 keys.

statement ok
INSERT INTO a VALUES(5)

statement ok
SET tracing = on,kv; DELETE FROM a WHERE a = 5; SET tracing = off

query TT
SELECT operation, message FROM [SHOW KV TRACE FOR SESSION]
WHERE message LIKE '%DelRange%' OR message LIKE '%sending batch%'
----
batch flow coordinator  DelRange /Table/57/1/5 - /Table/57/1/5/#
dist sender send        r43: sending batch 1 DelRng, 1 EndTxn to (n1,s1):1
