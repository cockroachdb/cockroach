# LogicTest: local

statement ok
CREATE TABLE kv (
  k INT PRIMARY KEY,
  v INT,
  UNIQUE INDEX foo (v),
  INDEX bar (k, v)
)

statement ok
CREATE TABLE unindexed (
  k INT PRIMARY KEY,
  v INT
)

statement ok
CREATE TABLE indexed (id int primary key, value int, other int, index (value))

statement count 4
INSERT INTO kv VALUES (1, 2), (3, 4), (5, 6), (7, 8)

statement count 2
DELETE FROM kv WHERE k=3 OR v=6

query II
DELETE FROM kv RETURNING k, v
----
1 2
7 8

statement ok
SET tracing = on,kv,results; SELECT * FROM kv; SET tracing = off

query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 ORDER BY message LIKE 'fetched:%' DESC, ordinality ASC
----

statement ok
SET tracing = on,kv,results; SELECT * FROM kv@foo; SET tracing = off

query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 ORDER BY message LIKE 'fetched:%' DESC, ordinality ASC
----

statement ok
SET tracing = on,kv,results; SELECT * FROM kv@bar; SET tracing = off

query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 ORDER BY message LIKE 'fetched:%' DESC, ordinality ASC
----

# Check that EXPLAIN does not destroy data (#6613)
query TTT colnames
EXPLAIN DELETE FROM unindexed
----
tree          field         description
·             distribution  local
·             vectorized    false
delete range  ·             ·
·             from          unindexed
·             spans         FULL SCAN

query TTT
EXPLAIN DELETE FROM unindexed WHERE v = 7 ORDER BY v LIMIT 10
----
·                         distribution  local
·                         vectorized    false
count                     ·             ·
 └── delete               ·             ·
      │                   from          unindexed
      │                   strategy      deleter
      │                   auto commit   ·
      └── render          ·             ·
           └── limit      ·             ·
                │         count         10
                └── scan  ·             ·
·                         table         unindexed@primary
·                         spans         FULL SCAN
·                         filter        v = 7

# Check DELETE with LIMIT clause (MySQL extension)
query TTT
EXPLAIN DELETE FROM unindexed WHERE v = 5 LIMIT 10
----
·                         distribution  local
·                         vectorized    false
count                     ·             ·
 └── delete               ·             ·
      │                   from          unindexed
      │                   strategy      deleter
      │                   auto commit   ·
      └── render          ·             ·
           └── limit      ·             ·
                │         count         10
                └── scan  ·             ·
·                         table         unindexed@primary
·                         spans         FULL SCAN
·                         filter        v = 5

# Check fast DELETE.
query TTT
EXPLAIN DELETE FROM unindexed WHERE k > 0
----
·             distribution  local
·             vectorized    false
delete range  ·             ·
·             from          unindexed
·             spans         /1-

# Check fast DELETE with reverse scans (not supported by optimizer).
query error DELETE statement requires LIMIT when ORDER BY is used
EXPLAIN DELETE FROM unindexed WHERE true ORDER BY k DESC

# Check that limits don't permit fast deletes.
query TTT
EXPLAIN DELETE FROM unindexed WHERE k > 0 LIMIT 1
----
·               distribution  local
·               vectorized    false
count           ·             ·
 └── delete     ·             ·
      │         from          unindexed
      │         strategy      deleter
      │         auto commit   ·
      └── scan  ·             ·
·               table         unindexed@primary
·               spans         /1-
·               limit         1

query TTT
EXPLAIN DELETE FROM indexed WHERE value = 5 LIMIT 10
----
·               distribution  local
·               vectorized    false
count           ·             ·
 └── delete     ·             ·
      │         from          indexed
      │         strategy      deleter
      │         auto commit   ·
      └── scan  ·             ·
·               table         indexed@indexed_value_idx
·               spans         /5-/6
·               limit         10

query TTT
EXPLAIN DELETE FROM indexed LIMIT 10
----
·               distribution  local
·               vectorized    false
count           ·             ·
 └── delete     ·             ·
      │         from          indexed
      │         strategy      deleter
      │         auto commit   ·
      └── scan  ·             ·
·               table         indexed@indexed_value_idx
·               spans         LIMITED SCAN
·               limit         10

# TODO(andyk): Prune columns so that index-join is not necessary.
query TTT
EXPLAIN DELETE FROM indexed WHERE value = 5 LIMIT 10 RETURNING id
----
·               distribution  local
·               vectorized    false
run             ·             ·
 └── delete     ·             ·
      │         from          indexed
      │         strategy      deleter
      │         auto commit   ·
      └── scan  ·             ·
·               table         indexed@indexed_value_idx
·               spans         /5-/6
·               limit         10

# Ensure that index hints in DELETE statements force the choice of a specific index
# as described in #38799.
statement ok
CREATE TABLE t38799 (a INT PRIMARY KEY, b INT, c INT, INDEX foo(b))

query TTTTT
EXPLAIN (VERBOSE) DELETE FROM t38799@foo
----
·               distribution  local       ·       ·
·               vectorized    false       ·       ·
count           ·             ·           ()      ·
 └── delete     ·             ·           ()      ·
      │         from          t38799      ·       ·
      │         strategy      deleter     ·       ·
      │         auto commit   ·           ·       ·
      └── scan  ·             ·           (a, b)  ·
·               table         t38799@foo  ·       ·
·               spans         FULL SCAN   ·       ·

# Tracing tests for fast delete.
statement ok
CREATE TABLE a (a INT PRIMARY KEY)

# Delete range operates in chunks of 600 (defined by sql.TableTruncateChunkSize).
statement ok
INSERT INTO a SELECT * FROM generate_series(1,1000)

statement ok
SET tracing = on,kv; DELETE FROM a; SET tracing = off

# Ensure that DelRange requests are chunked for DELETE FROM...
query TT
SELECT operation, message FROM [SHOW KV TRACE FOR SESSION]
WHERE message LIKE '%DelRange%' OR message LIKE '%DelRng%'
----
flow              DelRange /Table/57/1 - /Table/57/2
dist sender send  r34: sending batch 1 DelRng to (n1,s1):1
flow              DelRange /Table/57/1/601/0 - /Table/57/2
dist sender send  r34: sending batch 1 DelRng to (n1,s1):1

# Ensure that DelRange requests are autocommitted when DELETE FROM happens on a
# chunk of fewer than 600 keys.

statement ok
INSERT INTO a VALUES(5)

statement ok
SET tracing = on,kv; DELETE FROM a WHERE a = 5; SET tracing = off

query TT
SELECT operation, message FROM [SHOW KV TRACE FOR SESSION]
WHERE message LIKE '%DelRange%' OR message LIKE '%sending batch%'
----
flow              DelRange /Table/57/1/5 - /Table/57/1/5/#
dist sender send  r34: sending batch 1 DelRng, 1 EndTxn to (n1,s1):1

# Test use of fast path when there are interleaved tables.

statement ok
CREATE TABLE parent (id INT PRIMARY KEY)

# Delete range should be used.
query TTT
EXPLAIN DELETE FROM parent WHERE id > 10
----
·             distribution  local
·             vectorized    false
delete range  ·             ·
·             from          parent
·             spans         /11-

statement ok
CREATE TABLE child (
  pid INT,
  id INT,
  PRIMARY KEY (pid, id),
  FOREIGN KEY (pid) REFERENCES parent(id) ON DELETE CASCADE
) INTERLEAVE IN PARENT parent(pid)

# Delete range should be used.
query TTT
EXPLAIN DELETE FROM parent WHERE id > 10
----
·             distribution  local
·             vectorized    false
delete range  ·             ·
·             from          parent
·             spans         /11-

# Delete range should not be used when deleting from the child.
query TTT
EXPLAIN DELETE FROM child WHERE id > 10
----
·               distribution  local
·               vectorized    false
count           ·             ·
 └── delete     ·             ·
      │         from          child
      │         strategy      deleter
      │         auto commit   ·
      └── scan  ·             ·
·               table         child@primary
·               spans         FULL SCAN
·               filter        id > 10

statement ok
CREATE TABLE sibling (
  pid INT,
  id INT,
  PRIMARY KEY (pid, id),
  FOREIGN KEY (pid) REFERENCES parent(id) ON DELETE CASCADE
) INTERLEAVE IN PARENT parent(pid)

# Delete range should be used.
query TTT
EXPLAIN DELETE FROM parent WHERE id > 10
----
·             distribution  local
·             vectorized    false
delete range  ·             ·
·             from          parent
·             spans         /11-

statement ok
CREATE TABLE grandchild (
  gid INT,
  pid INT,
  id INT,
  FOREIGN KEY (gid, pid) REFERENCES child(pid, id) ON DELETE CASCADE,
  PRIMARY KEY(gid, pid, id)
) INTERLEAVE IN PARENT child(gid, pid)

# Delete range should be used.
query TTT
EXPLAIN DELETE FROM parent WHERE id > 10
----
·             distribution  local
·             vectorized    false
delete range  ·             ·
·             from          parent
·             spans         /11-

statement ok
CREATE TABLE external_ref (
  id INT,
  parent_id INT,
  child_id INT,
  FOREIGN KEY (parent_id, child_id) REFERENCES child(pid, id) ON DELETE CASCADE
)

# Delete range should not be used (external ref).
query TTT
EXPLAIN DELETE FROM parent WHERE id > 10
----
·                           distribution  local
·                           vectorized    false
root                        ·             ·
 ├── count                  ·             ·
 │    └── delete            ·             ·
 │         │                from          parent
 │         │                strategy      deleter
 │         └── buffer node  ·             ·
 │              │           label         buffer 1
 │              └── scan    ·             ·
 │                          table         parent@primary
 │                          spans         /11-
 ├── fk-cascade             ·             ·
 │                          fk            fk_pid_ref_parent
 │                          input         buffer 1
 └── fk-cascade             ·             ·
·                           fk            fk_pid_ref_parent
·                           input         buffer 1

statement ok
DROP TABLE external_ref

statement ok
CREATE TABLE child_with_index (
  pid INT,
  child_id INT,
  other_field STRING,
  PRIMARY KEY (pid, child_id),
  FOREIGN KEY (pid) REFERENCES parent(id),
  UNIQUE (other_field)
) INTERLEAVE IN PARENT parent(pid)

# Delete range should not be used (child with secondary index).
query TTT
EXPLAIN DELETE FROM parent WHERE id > 10
----
·                                          distribution        local
·                                          vectorized          false
root                                       ·                   ·
 ├── count                                 ·                   ·
 │    └── delete                           ·                   ·
 │         │                               from                parent
 │         │                               strategy            deleter
 │         └── buffer node                 ·                   ·
 │              │                          label               buffer 1
 │              └── scan                   ·                   ·
 │                                         table               parent@primary
 │                                         spans               /11-
 ├── fk-cascade                            ·                   ·
 │                                         fk                  fk_pid_ref_parent
 │                                         input               buffer 1
 ├── fk-cascade                            ·                   ·
 │                                         fk                  fk_pid_ref_parent
 │                                         input               buffer 1
 └── fk-check                              ·                   ·
      └── error if rows                    ·                   ·
           └── render                      ·                   ·
                └── hash-join              ·                   ·
                     │                     type                inner
                     │                     equality            (id) = (pid)
                     │                     left cols are key   ·
                     │                     right cols are key  ·
                     ├── scan buffer node  ·                   ·
                     │                     label               buffer 1
                     └── distinct          ·                   ·
                          │                distinct on         pid
                          │                order key           pid
                          └── scan         ·                   ·
·                                          table               child_with_index@primary
·                                          spans               FULL SCAN

statement ok
DROP TABLE child_with_index

statement ok
CREATE TABLE child_without_cascade (
  pid INT,
  id INT,
  PRIMARY KEY (pid, id),
  FOREIGN KEY (pid) REFERENCES parent(id)
) INTERLEAVE IN PARENT parent(pid)

# Delete range should not be used (child without cascading FK).
query TTT
EXPLAIN DELETE FROM parent WHERE id > 10
----
·                                          distribution        local
·                                          vectorized          false
root                                       ·                   ·
 ├── count                                 ·                   ·
 │    └── delete                           ·                   ·
 │         │                               from                parent
 │         │                               strategy            deleter
 │         └── buffer node                 ·                   ·
 │              │                          label               buffer 1
 │              └── scan                   ·                   ·
 │                                         table               parent@primary
 │                                         spans               /11-
 ├── fk-cascade                            ·                   ·
 │                                         fk                  fk_pid_ref_parent
 │                                         input               buffer 1
 ├── fk-cascade                            ·                   ·
 │                                         fk                  fk_pid_ref_parent
 │                                         input               buffer 1
 └── fk-check                              ·                   ·
      └── error if rows                    ·                   ·
           └── render                      ·                   ·
                └── hash-join              ·                   ·
                     │                     type                inner
                     │                     equality            (id) = (pid)
                     │                     left cols are key   ·
                     │                     right cols are key  ·
                     ├── scan buffer node  ·                   ·
                     │                     label               buffer 1
                     └── distinct          ·                   ·
                          │                distinct on         pid
                          │                order key           pid
                          └── scan         ·                   ·
·                                          table               child_without_cascade@primary
·                                          spans               FULL SCAN

statement ok
DROP TABLE child_without_cascade

statement ok
CREATE TABLE child_without_fk (
  pid INT,
  id INT,
  PRIMARY KEY (pid, id)
) INTERLEAVE IN PARENT parent(pid)

# Delete range should not be used (child without cascading FK).
query TTT
EXPLAIN DELETE FROM parent WHERE id > 10
----
·                           distribution  local
·                           vectorized    false
root                        ·             ·
 ├── count                  ·             ·
 │    └── delete            ·             ·
 │         │                from          parent
 │         │                strategy      deleter
 │         └── buffer node  ·             ·
 │              │           label         buffer 1
 │              └── scan    ·             ·
 │                          table         parent@primary
 │                          spans         /11-
 ├── fk-cascade             ·             ·
 │                          fk            fk_pid_ref_parent
 │                          input         buffer 1
 └── fk-cascade             ·             ·
·                           fk            fk_pid_ref_parent
·                           input         buffer 1

statement ok
DROP TABLE child_without_fk

# Test case where we have a cascading FK but the columns are not in the right
# order.
statement ok
CREATE TABLE ab (a INT, b INT, PRIMARY KEY (a, b))

statement ok
CREATE TABLE abc (
  a INT, b INT, c INT,
  FOREIGN KEY (b, a) REFERENCES ab(a, b) ON DELETE CASCADE,
  PRIMARY KEY (a, b, c)
) INTERLEAVE IN PARENT ab(a, b)


# Delete range should not be used (FK columns are not in the right order).
query TTT
EXPLAIN DELETE FROM ab WHERE a = 1
----
·                           distribution  local
·                           vectorized    false
root                        ·             ·
 ├── count                  ·             ·
 │    └── delete            ·             ·
 │         │                from          ab
 │         │                strategy      deleter
 │         └── buffer node  ·             ·
 │              │           label         buffer 1
 │              └── scan    ·             ·
 │                          table         ab@primary
 │                          spans         /1-/2
 └── fk-cascade             ·             ·
·                           fk            fk_b_ref_ab
·                           input         buffer 1
