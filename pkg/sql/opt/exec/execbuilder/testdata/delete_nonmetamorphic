# LogicTest: local !metamorphic

# ---------------------------------------------------------
# Partial Index With Delete Preserving Encoding
# ---------------------------------------------------------
statement ok
CREATE TABLE tpi (
    a INT PRIMARY KEY,
    b INT,
    c STRING,
    FAMILY (a, b, c),
    CHECK (b > 0),
    INDEX partial (c) WHERE a > b AND c IN ('foo', 'foobar')
);

let $t_id
select id from system.namespace where name='tpi'

let $updated_t_jsonb
WITH
  descs
    AS (
      SELECT
        id,
        crdb_internal.pb_to_json(
          'cockroach.sql.sqlbase.Descriptor',
          descriptor
        )
          AS descriptor
      FROM
        system.descriptor
    )
SELECT
  CAST (json_set(descriptor, ARRAY['table', 'indexes', '0', 'useDeletePreservingEncoding'], 'true') AS STRING)
FROM
  descs WHERE id = $t_id;

statement ok
SELECT * FROM crdb_internal.unsafe_upsert_descriptor($t_id, crdb_internal.json_to_pb('cockroach.sql.sqlbase.Descriptor',$$ $updated_t_jsonb $$), true)

statement ok
INSERT INTO tpi VALUES (1, 2, 'bar'), (2, 3, 'bar'), (3, 2, 'foo')

# Delete a row that doesn't match the partial index.
query T kvtrace
DELETE FROM tpi WHERE a = 1
----
Scan /Table/53/1/1/0
Del /Table/53/1/1/0

# Delete a row that matches the partial index.
query T kvtrace
DELETE FROM tpi WHERE a = 3
----
Scan /Table/53/1/3/0
Put (delete) /Table/53/2/"foo"/3/0
Del /Table/53/1/3/0

# ---------------------------------------------------------
# Expression Index With Delete Preserving Encoding
# ---------------------------------------------------------
statement ok
CREATE TABLE tei (
  k INT PRIMARY KEY,
  a INT,
  b INT,
  FAMILY (k, a, b)
)

statement ok
CREATE INDEX t_a_plus_b_idx ON tei ((a + b))

let $t_id
select id from system.namespace where name='tei'

let $updated_t_jsonb
WITH
  descs
    AS (
      SELECT
        id,
        crdb_internal.pb_to_json(
          'cockroach.sql.sqlbase.Descriptor',
          descriptor
        )
          AS descriptor
      FROM
        system.descriptor
    )
SELECT
  CAST (
    json_set(
      json_set(descriptor, ARRAY['table', 'indexes', '0', 'useDeletePreservingEncoding'], 'true'),
      ARRAY['table', 'modificationTime'], json_build_object('wallTime', cluster_logical_timestamp()::INT8::STRING)
    ) AS STRING
  )
FROM
  descs WHERE id = $t_id;

statement ok
SELECT * FROM crdb_internal.unsafe_upsert_descriptor($t_id, crdb_internal.json_to_pb('cockroach.sql.sqlbase.Descriptor',$$ $updated_t_jsonb $$), true)

statement ok
INSERT INTO tei VALUES (1, 2, 100), (2, 3, 200), (3, 4, 300)

query T kvtrace
DELETE FROM tei WHERE a + b = 102
----
Scan /Table/54/2/10{2-3}
Scan /Table/54/1/1/0
Put (delete) /Table/54/2/102/1/0
Del /Table/54/1/1/0

# ---------------------------------------------------------
# Inverted Index With Delete Preserving Encoding
# ---------------------------------------------------------

statement ok
CREATE TABLE tii (
  a INT PRIMARY KEY,
  b INT[],
  FAMILY (a,b),
  INVERTED INDEX(b)
)

let $t_id
select id from system.namespace where name='tii'

let $updated_t_jsonb
WITH
  descs
    AS (
      SELECT
        id,
        crdb_internal.pb_to_json(
          'cockroach.sql.sqlbase.Descriptor',
          descriptor
        )
          AS descriptor
      FROM
        system.descriptor
    )
SELECT
  CAST (
    json_set(
      json_set(descriptor, ARRAY['table', 'indexes', '0', 'useDeletePreservingEncoding'], 'true'),
      ARRAY['table', 'modificationTime'], json_build_object('wallTime', cluster_logical_timestamp()::INT8::STRING)
    ) AS STRING
  )
FROM
  descs WHERE id = $t_id;

statement ok
SELECT * FROM crdb_internal.unsafe_upsert_descriptor($t_id, crdb_internal.json_to_pb('cockroach.sql.sqlbase.Descriptor',$$ $updated_t_jsonb $$), true)

statement ok
INSERT INTO tii VALUES (1, ARRAY[1, 2, 3, 2, 2, NULL, 3])

query T kvtrace
DELETE FROM tii WHERE a = 1
----
Scan /Table/55/1/1/0
Put (delete) /Table/55/2/NULL/1/0
Put (delete) /Table/55/2/1/1/0
Put (delete) /Table/55/2/2/1/0
Put (delete) /Table/55/2/3/1/0
Del /Table/55/1/1/0

# ---------------------------------------------------------
# Multicolumn Inverted Index With Delete Preserving Encoding
# ---------------------------------------------------------

statement ok
CREATE TABLE tmi (
  a INT PRIMARY KEY,
  b INT,
  c JSON,
  FAMILY (a, b, c),
  INVERTED INDEX(b, c)
)

let $t_id
select id from system.namespace where name='tmi'

let $updated_t_jsonb
WITH
  descs
    AS (
      SELECT
        id,
        crdb_internal.pb_to_json(
          'cockroach.sql.sqlbase.Descriptor',
          descriptor
        )
          AS descriptor
      FROM
        system.descriptor
    )
SELECT
  CAST (
    json_set(
      json_set(descriptor, ARRAY['table', 'indexes', '0', 'useDeletePreservingEncoding'], 'true'),
      ARRAY['table', 'modificationTime'], json_build_object('wallTime', cluster_logical_timestamp()::INT8::STRING)
    ) AS STRING
  )
FROM
  descs WHERE id = $t_id;

statement ok
SELECT * FROM crdb_internal.unsafe_upsert_descriptor($t_id, crdb_internal.json_to_pb('cockroach.sql.sqlbase.Descriptor',$$ $updated_t_jsonb $$), true)

statement ok
INSERT INTO tmi VALUES (1, 2, '{"a": "foo", "b": "bar"}'::json)

query T kvtrace
DELETE FROM tmi WHERE a = 1
----
Scan /Table/56/1/1/0
Put (delete) /Table/56/2/2/"a"/"foo"/1/0
Put (delete) /Table/56/2/2/"b"/"bar"/1/0
Del /Table/56/1/1/0
