# LogicTest: opt distsql-opt

statement ok
CREATE TABLE a (x INT PRIMARY KEY, y INT);
INSERT INTO a VALUES (1, 10), (2, 20), (3, 30)

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM a WHERE x > 1
----
scan  ·      ·          (x, y)  ·
·     table  a@primary  ·       ·
·     spans  /2-        ·       ·

query II rowsort
SELECT * FROM a WHERE x > 1
----
2  20
3  30

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM a WHERE y > 10
----
filter     ·       ·          (x, y)  ·
 │         filter  y > 10     ·       ·
 └── scan  ·       ·          (x, y)  ·
·          table   a@primary  ·       ·
·          spans   ALL        ·       ·

query II rowsort
SELECT * FROM a WHERE y > 10
----
2  20
3  30

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM a WHERE x > 1 AND x < 3
----
scan  ·      ·          (x, y)  ·
·     table  a@primary  ·       ·
·     spans  /2-/2/#    ·       ·

query II
SELECT * FROM a WHERE x > 1 AND x < 3
----
2  20

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM a WHERE x > 1 AND y < 30
----
filter     ·       ·          (x, y)  ·
 │         filter  y < 30     ·       ·
 └── scan  ·       ·          (x, y)  ·
·          table   a@primary  ·       ·
·          spans   /2-        ·       ·

query II
SELECT * FROM a WHERE x > 1 AND y < 30
----
2  20

statement ok
CREATE TABLE b (x INT, y INT);
INSERT INTO b VALUES (1, 10), (2, 20), (3, 30)

query TTTTT
EXPLAIN (VERBOSE) SELECT x, y, rowid FROM b WHERE rowid > 0
----
scan  ·      ·          (x, y, rowid[hidden])  ·
·     table  b@primary  ·                      ·
·     spans  /1-        ·                      ·

statement ok
CREATE TABLE c (n INT PRIMARY KEY, str STRING, INDEX str(str DESC));
INSERT INTO c SELECT i, to_english(i) FROM GENERATE_SERIES(1, 10) AS g(i)

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM c WHERE str >= 'moo'
----
scan  ·      ·                  (n, str)  ·
·     table  c@str              ·         ·
·     spans  -/"moo"/PrefixEnd  ·         ·

query IT rowsort
SELECT * FROM c WHERE str >= 'moo'
----
1   one
2   two
3   three
6   six
7   seven
9   nine
10  one-zero

# Ensure that index is used when indexed column has collation.
statement ok
CREATE TABLE coll (
  a STRING COLLATE da,
  b INT,
  c BOOL,
  PRIMARY KEY (a, b),
  INDEX (b, a) STORING (c)
)

query TTTTT
EXPLAIN (TYPES) SELECT a, b FROM coll ORDER BY a, b
----
scan  ·      ·             (a collatedstring{da}, b int)  +a,+b
·     table  coll@primary  ·                              ·
·     spans  ALL           ·                              ·

query TTTTT
EXPLAIN (TYPES) SELECT b, a FROM coll ORDER BY b, a
----
render     ·         ·                        (b int, a collatedstring{da})  ·
 │         render 0  (b)[int]                 ·                              ·
 │         render 1  (a)[collatedstring{da}]  ·                              ·
 └── scan  ·         ·                        (a collatedstring{da}, b int)  +b,+a
·          table     coll@coll_b_a_idx        ·                              ·
·          spans     ALL                      ·                              ·

# Ensure correct index is used when indexed column is computed.
statement ok
CREATE TABLE computed (
  k INT PRIMARY KEY,
  a JSON,
  b TEXT AS (a->>'q') STORED,
  INDEX (b) STORING (k)
)

query TTTTT
EXPLAIN (TYPES) SELECT b FROM computed ORDER BY b
----
scan  ·      ·                        (b string)  +b
·     table  computed@computed_b_idx  ·           ·
·     spans  ALL                      ·           ·

# Virtual tables are currently not supported.
statement ok
SET EXPERIMENTAL_OPT = ALWAYS;

statement error virtual tables are not supported
SELECT * FROM crdb_internal.jobs
