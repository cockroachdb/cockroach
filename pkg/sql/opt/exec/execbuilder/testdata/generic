# LogicTest: local

# Disable stats collection to prevent automatic stats collection from
# invalidating plans.
statement ok
SET CLUSTER SETTING sql.stats.automatic_collection.enabled = false;

statement ok
CREATE TABLE t (
  k INT PRIMARY KEY,
  a INT,
  b INT,
  c INT,
  t TIMESTAMPTZ,
  INDEX (a),
  INDEX (t)
)

statement ok
SET plan_cache_mode = force_generic_plan

statement ok
PREPARE p AS SELECT * FROM t WHERE a = 1 AND b = 2 AND c = 3

# A generic, reusable plan can be built during PREPARE for queries with no
# placeholders nor stable expressions.
query T
EXPLAIN ANALYZE EXECUTE p
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: generic, reused
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• filter
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 0
│ filter: (b = 2) AND (c = 3)
│
└── • index join (streamer)
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 0
    │ KV time: 0µs
    │ KV contention time: 0µs
    │ KV rows decoded: 0
    │ KV bytes read: 0 B
    │ KV gRPC calls: 0
    │ estimated max memory allocated: 0 B
    │ estimated max sql temp disk usage: 0 B
    │ table: t@t_pkey
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 0
          KV time: 0µs
          KV contention time: 0µs
          KV rows decoded: 0
          KV bytes read: 0 B
          KV gRPC calls: 0
          estimated max memory allocated: 0 B
          missing stats
          table: t@t_a_idx
          spans: [/1 - /1]

statement ok
SET plan_cache_mode = force_custom_plan

# The generic plan is reused even when forcing a custom plan because it will
# always be optimal.
query T
EXPLAIN ANALYZE EXECUTE p
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: generic, reused
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• filter
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 0
│ filter: (b = 2) AND (c = 3)
│
└── • index join (streamer)
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 0
    │ KV time: 0µs
    │ KV contention time: 0µs
    │ KV rows decoded: 0
    │ KV bytes read: 0 B
    │ KV gRPC calls: 0
    │ estimated max memory allocated: 0 B
    │ estimated max sql temp disk usage: 0 B
    │ table: t@t_pkey
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 0
          KV time: 0µs
          KV contention time: 0µs
          KV rows decoded: 0
          KV bytes read: 0 B
          KV gRPC calls: 0
          estimated max memory allocated: 0 B
          missing stats
          table: t@t_a_idx
          spans: [/1 - /1]

statement ok
DEALLOCATE p

# Prepare the same query with plan_cache_mode set to force_custom_plan.
statement ok
PREPARE p AS SELECT * FROM t WHERE a = 1 AND b = 2 AND c = 3

# Execute it once with plan_cache_mode set to force_custom_plan.
query T
EXPLAIN ANALYZE EXECUTE p
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: generic, reused
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• filter
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 0
│ filter: (b = 2) AND (c = 3)
│
└── • index join (streamer)
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 0
    │ KV time: 0µs
    │ KV contention time: 0µs
    │ KV rows decoded: 0
    │ KV bytes read: 0 B
    │ KV gRPC calls: 0
    │ estimated max memory allocated: 0 B
    │ estimated max sql temp disk usage: 0 B
    │ table: t@t_pkey
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 0
          KV time: 0µs
          KV contention time: 0µs
          KV rows decoded: 0
          KV bytes read: 0 B
          KV gRPC calls: 0
          estimated max memory allocated: 0 B
          missing stats
          table: t@t_a_idx
          spans: [/1 - /1]

statement ok
SET plan_cache_mode = force_generic_plan

# The plan is generic (it has no placeholders), so it can be reused with
# plan_cache_mode set to force_generic_plan.
query T
EXPLAIN ANALYZE EXECUTE p
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: generic, reused
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• filter
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 0
│ filter: (b = 2) AND (c = 3)
│
└── • index join (streamer)
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 0
    │ KV time: 0µs
    │ KV contention time: 0µs
    │ KV rows decoded: 0
    │ KV bytes read: 0 B
    │ KV gRPC calls: 0
    │ estimated max memory allocated: 0 B
    │ estimated max sql temp disk usage: 0 B
    │ table: t@t_pkey
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 0
          KV time: 0µs
          KV contention time: 0µs
          KV rows decoded: 0
          KV bytes read: 0 B
          KV gRPC calls: 0
          estimated max memory allocated: 0 B
          missing stats
          table: t@t_a_idx
          spans: [/1 - /1]

statement ok
DEALLOCATE p

statement ok
PREPARE p AS SELECT * FROM t WHERE k = $1

# A generic, reusable plan can be built during PREPARE when the placeholder
# fast-path can be used.
query T
EXPLAIN ANALYZE EXECUTE p(33)
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: generic, reused
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• scan
  nodes: <hidden>
  regions: <hidden>
  actual row count: 0
  KV time: 0µs
  KV contention time: 0µs
  KV rows decoded: 0
  KV bytes read: 0 B
  KV gRPC calls: 0
  estimated max memory allocated: 0 B
  missing stats
  table: t@t_pkey
  spans: [/33 - /33]

statement ok
SET plan_cache_mode = force_custom_plan

# The generic plan is reused even when forcing a custom plan because it will
# always be optimal.
query T
EXPLAIN ANALYZE EXECUTE p(33)
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: generic, reused
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• scan
  nodes: <hidden>
  regions: <hidden>
  actual row count: 0
  KV time: 0µs
  KV contention time: 0µs
  KV rows decoded: 0
  KV bytes read: 0 B
  KV gRPC calls: 0
  estimated max memory allocated: 0 B
  missing stats
  table: t@t_pkey
  spans: [/33 - /33]

statement ok
SET plan_cache_mode = force_generic_plan

statement ok
DEALLOCATE p

statement ok
PREPARE p AS SELECT * FROM t WHERE a = $1 AND c = $2

# A simple generic plan can be built during EXECUTE.
query T
EXPLAIN ANALYZE EXECUTE p(1, 2)
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: generic, re-optimized
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• lookup join
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 0
│ KV time: 0µs
│ KV contention time: 0µs
│ KV rows decoded: 0
│ KV bytes read: 0 B
│ KV gRPC calls: 0
│ estimated max memory allocated: 0 B
│ table: t@t_pkey
│ equality: (k) = (k)
│ equality cols are key
│ pred: c = "$2"
│
└── • lookup join
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 0
    │ KV time: 0µs
    │ KV contention time: 0µs
    │ KV rows decoded: 0
    │ KV bytes read: 0 B
    │ KV gRPC calls: 0
    │ estimated max memory allocated: 0 B
    │ table: t@t_a_idx
    │ equality: ($1) = (a)
    │
    └── • values
          nodes: <hidden>
          regions: <hidden>
          actual row count: 1
          size: 2 columns, 1 row

# The generic plan can be reused with different placeholder values.
query T
EXPLAIN ANALYZE EXECUTE p(11, 22)
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: generic, reused
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• lookup join
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 0
│ KV time: 0µs
│ KV contention time: 0µs
│ KV rows decoded: 0
│ KV bytes read: 0 B
│ KV gRPC calls: 0
│ estimated max memory allocated: 0 B
│ table: t@t_pkey
│ equality: (k) = (k)
│ equality cols are key
│ pred: c = "$2"
│
└── • lookup join
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 0
    │ KV time: 0µs
    │ KV contention time: 0µs
    │ KV rows decoded: 0
    │ KV bytes read: 0 B
    │ KV gRPC calls: 0
    │ estimated max memory allocated: 0 B
    │ table: t@t_a_idx
    │ equality: ($1) = (a)
    │
    └── • values
          nodes: <hidden>
          regions: <hidden>
          actual row count: 1
          size: 2 columns, 1 row

statement ok
SET plan_cache_mode = force_custom_plan

# The generic plan is not reused when forcing a custom plan.
query T
EXPLAIN ANALYZE EXECUTE p(1, 2)
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: custom
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• filter
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 0
│ filter: c = 2
│
└── • index join (streamer)
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 0
    │ KV time: 0µs
    │ KV contention time: 0µs
    │ KV rows decoded: 0
    │ KV bytes read: 0 B
    │ KV gRPC calls: 0
    │ estimated max memory allocated: 0 B
    │ estimated max sql temp disk usage: 0 B
    │ table: t@t_pkey
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 0
          KV time: 0µs
          KV contention time: 0µs
          KV rows decoded: 0
          KV bytes read: 0 B
          KV gRPC calls: 0
          estimated max memory allocated: 0 B
          missing stats
          table: t@t_a_idx
          spans: [/1 - /1]

statement ok
SET plan_cache_mode = force_generic_plan

statement ok
DEALLOCATE p

statement ok
PREPARE p AS SELECT * FROM t WHERE t = now()

# A generic plan with a stable expression.
query T
EXPLAIN ANALYZE EXECUTE p
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: generic, re-optimized
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• filter
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 0
│ filter: t = now()
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 0
      KV time: 0µs
      KV contention time: 0µs
      KV rows decoded: 0
      KV bytes read: 0 B
      KV gRPC calls: 0
      estimated max memory allocated: 0 B
      missing stats
      table: t@t_pkey
      spans: FULL SCAN

# The generic plan can be reused.
query T
EXPLAIN ANALYZE EXECUTE p
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: generic, reused
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• filter
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 0
│ filter: t = now()
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 0
      KV time: 0µs
      KV contention time: 0µs
      KV rows decoded: 0
      KV bytes read: 0 B
      KV gRPC calls: 0
      estimated max memory allocated: 0 B
      missing stats
      table: t@t_pkey
      spans: FULL SCAN

statement ok
DEALLOCATE p

statement ok
PREPARE p AS SELECT k FROM t WHERE c = $1

# A simple generic plan.
query T
EXPLAIN ANALYZE EXECUTE p(1)
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: generic, re-optimized
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• filter
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 0
│ filter: c = 1
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 0
      KV time: 0µs
      KV contention time: 0µs
      KV rows decoded: 0
      KV bytes read: 0 B
      KV gRPC calls: 0
      estimated max memory allocated: 0 B
      missing stats
      table: t@t_pkey
      spans: FULL SCAN

statement ok
ALTER TABLE t ADD COLUMN z INT

# A schema change invalidates the generic plan, and it must be re-optimized.
query T
EXPLAIN ANALYZE EXECUTE p(1)
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: generic, re-optimized
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• filter
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 0
│ filter: c = 1
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 0
      KV time: 0µs
      KV contention time: 0µs
      KV rows decoded: 0
      KV bytes read: 0 B
      KV gRPC calls: 0
      estimated max memory allocated: 0 B
      missing stats
      table: t@t_pkey
      spans: FULL SCAN

statement ok
DEALLOCATE p

statement ok
ALTER TABLE t DROP COLUMN z
