# LogicTest: local

statement ok
CREATE TABLE onecolumn (x INT); INSERT INTO onecolumn(x) VALUES (44), (NULL), (42)

statement ok
CREATE TABLE twocolumn (x INT, y INT); INSERT INTO twocolumn(x, y) VALUES (44,51), (NULL,52), (42,53), (45,45)

## Simple test cases for inner, left, right, and outer joins

query TTT
EXPLAIN SELECT * FROM onecolumn JOIN twocolumn USING(x)
----
·               distribution  local
·               vectorized    true
render          ·             ·
 └── hash-join  ·             ·
      │         type          inner
      │         equality      (x) = (x)
      ├── scan  ·             ·
      │         table         onecolumn@primary
      │         spans         FULL SCAN
      └── scan  ·             ·
·               table         twocolumn@primary
·               spans         FULL SCAN

query TTT
EXPLAIN SELECT * FROM twocolumn AS a JOIN twocolumn AS b ON a.x = b.y
----
·          distribution  local
·          vectorized    true
hash-join  ·             ·
 │         type          inner
 │         equality      (x) = (y)
 ├── scan  ·             ·
 │         table         twocolumn@primary
 │         spans         FULL SCAN
 └── scan  ·             ·
·          table         twocolumn@primary
·          spans         FULL SCAN

query TTT
EXPLAIN SELECT * FROM twocolumn AS a JOIN twocolumn AS b ON a.x = 44
----
·                distribution  local
·                vectorized    true
render           ·             ·
 └── cross-join  ·             ·
      │          type          cross
      ├── scan   ·             ·
      │          table         twocolumn@primary
      │          spans         FULL SCAN
      └── scan   ·             ·
·                table         twocolumn@primary
·                spans         FULL SCAN
·                filter        x = 44

query TTT
EXPLAIN SELECT * FROM onecolumn AS a JOIN twocolumn AS b ON ((a.x)) = ((b.y))
----
·          distribution  local
·          vectorized    true
hash-join  ·             ·
 │         type          inner
 │         equality      (x) = (y)
 ├── scan  ·             ·
 │         table         onecolumn@primary
 │         spans         FULL SCAN
 └── scan  ·             ·
·          table         twocolumn@primary
·          spans         FULL SCAN

query TTT
EXPLAIN SELECT * FROM onecolumn JOIN twocolumn ON onecolumn.x = twocolumn.y
----
·          distribution  local
·          vectorized    true
hash-join  ·             ·
 │         type          inner
 │         equality      (x) = (y)
 ├── scan  ·             ·
 │         table         onecolumn@primary
 │         spans         FULL SCAN
 └── scan  ·             ·
·          table         twocolumn@primary
·          spans         FULL SCAN

query TTT
EXPLAIN SELECT * FROM
  onecolumn
  CROSS JOIN twocolumn
  JOIN onecolumn AS a (b) ON a.b = twocolumn.x
  JOIN twocolumn AS c (d, e) ON a.b = c.d AND c.d = onecolumn.x
LIMIT 1
----
·                         distribution  local
·                         vectorized    true
render                    ·             ·
 └── limit                ·             ·
      │                   count         1
      └── hash-join       ·             ·
           │              type          inner
           │              equality      (x) = (x)
           ├── hash-join  ·             ·
           │    │         type          inner
           │    │         equality      (x) = (x)
           │    ├── scan  ·             ·
           │    │         table         twocolumn@primary
           │    │         spans         FULL SCAN
           │    └── scan  ·             ·
           │              table         onecolumn@primary
           │              spans         FULL SCAN
           └── hash-join  ·             ·
                │         type          inner
                │         equality      (x) = (x)
                ├── scan  ·             ·
                │         table         onecolumn@primary
                │         spans         FULL SCAN
                └── scan  ·             ·
·                         table         twocolumn@primary
·                         spans         FULL SCAN

# The following queries verify that only the necessary columns are scanned.
query TTTTT
EXPLAIN (VERBOSE) SELECT a.x, b.y FROM twocolumn AS a, twocolumn AS b
----
·           distribution  local              ·       ·
·           vectorized    true               ·       ·
cross-join  ·             ·                  (x, y)  ·
 │          type          cross              ·       ·
 ├── scan   ·             ·                  (x)     ·
 │          table         twocolumn@primary  ·       ·
 │          spans         FULL SCAN          ·       ·
 └── scan   ·             ·                  (y)     ·
·           table         twocolumn@primary  ·       ·
·           spans         FULL SCAN          ·       ·

query TTTTT
EXPLAIN (VERBOSE) SELECT b.y FROM (twocolumn AS a JOIN twocolumn AS b USING(x))
----
·               distribution  local              ·          ·
·               vectorized    true               ·          ·
render          ·             ·                  (y)        ·
 │              render 0      y                  ·          ·
 └── hash-join  ·             ·                  (x, x, y)  ·
      │         type          inner              ·          ·
      │         equality      (x) = (x)          ·          ·
      ├── scan  ·             ·                  (x)        ·
      │         table         twocolumn@primary  ·          ·
      │         spans         FULL SCAN          ·          ·
      └── scan  ·             ·                  (x, y)     ·
·               table         twocolumn@primary  ·          ·
·               spans         FULL SCAN          ·          ·

query TTTTT
EXPLAIN (VERBOSE) SELECT b.y FROM (twocolumn AS a JOIN twocolumn AS b ON a.x = b.x)
----
·               distribution  local              ·          ·
·               vectorized    true               ·          ·
render          ·             ·                  (y)        ·
 │              render 0      y                  ·          ·
 └── hash-join  ·             ·                  (x, x, y)  ·
      │         type          inner              ·          ·
      │         equality      (x) = (x)          ·          ·
      ├── scan  ·             ·                  (x)        ·
      │         table         twocolumn@primary  ·          ·
      │         spans         FULL SCAN          ·          ·
      └── scan  ·             ·                  (x, y)     ·
·               table         twocolumn@primary  ·          ·
·               spans         FULL SCAN          ·          ·

query TTTTT
EXPLAIN (VERBOSE) SELECT a.x FROM (twocolumn AS a JOIN twocolumn AS b ON a.x < b.y)
----
·                distribution  local              ·       ·
·                vectorized    true               ·       ·
render           ·             ·                  (x)     ·
 │               render 0      x                  ·       ·
 └── cross-join  ·             ·                  (x, y)  ·
      │          type          inner              ·       ·
      │          pred          x < y              ·       ·
      ├── scan   ·             ·                  (x)     ·
      │          table         twocolumn@primary  ·       ·
      │          spans         FULL SCAN          ·       ·
      └── scan   ·             ·                  (y)     ·
·                table         twocolumn@primary  ·       ·
·                spans         FULL SCAN          ·       ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM (SELECT x, 2 two FROM onecolumn) NATURAL FULL JOIN (SELECT x, y+1 plus1 FROM twocolumn)
----
·                    distribution  local              ·                   ·
·                    vectorized    true               ·                   ·
render               ·             ·                  (x, two, plus1)     ·
 │                   render 0      COALESCE(x, x)     ·                   ·
 │                   render 1      two                ·                   ·
 │                   render 2      plus1              ·                   ·
 └── hash-join       ·             ·                  (two, x, plus1, x)  ·
      │              type          full outer         ·                   ·
      │              equality      (x) = (x)          ·                   ·
      ├── render     ·             ·                  (two, x)            ·
      │    │         render 0      2                  ·                   ·
      │    │         render 1      x                  ·                   ·
      │    └── scan  ·             ·                  (x)                 ·
      │              table         onecolumn@primary  ·                   ·
      │              spans         FULL SCAN          ·                   ·
      └── render     ·             ·                  (plus1, x)          ·
           │         render 0      y + 1              ·                   ·
           │         render 1      x                  ·                   ·
           └── scan  ·             ·                  (x, y)              ·
·                    table         twocolumn@primary  ·                   ·
·                    spans         FULL SCAN          ·                   ·

# Ensure that the ordering information for the result of joins is sane. (#12037)
query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM (SELECT * FROM (VALUES (9, 1), (8, 2)) AS a (u, k) ORDER BY k)
                  INNER JOIN (VALUES (1, 1), (2, 2)) AS b (k, w) USING (k) ORDER BY u
----
·                           distribution   local                  ·                                     ·
·                           vectorized     false                  ·                                     ·
render                      ·              ·                      (k, u, w)                             ·
 │                          render 0       column2                ·                                     ·
 │                          render 1       column1                ·                                     ·
 │                          render 2       column2                ·                                     ·
 └── sort                   ·              ·                      (column1, column2, column2)           +column1
      │                     order          +column1               ·                                     ·
      └── render            ·              ·                      (column1, column2, column2)           ·
           │                render 0       column1                ·                                     ·
           │                render 1       column2                ·                                     ·
           │                render 2       column2                ·                                     ·
           └── hash-join    ·              ·                      (column1, column2, column1, column2)  ·
                │           type           inner                  ·                                     ·
                │           equality       (column2) = (column1)  ·                                     ·
                ├── values  ·              ·                      (column1, column2)                    ·
                │           size           2 columns, 2 rows      ·                                     ·
                │           row 0, expr 0  9                      ·                                     ·
                │           row 0, expr 1  1                      ·                                     ·
                │           row 1, expr 0  8                      ·                                     ·
                │           row 1, expr 1  2                      ·                                     ·
                └── values  ·              ·                      (column1, column2)                    ·
·                           size           2 columns, 2 rows      ·                                     ·
·                           row 0, expr 0  1                      ·                                     ·
·                           row 0, expr 1  1                      ·                                     ·
·                           row 1, expr 0  2                      ·                                     ·
·                           row 1, expr 1  2                      ·                                     ·

# Ensure that large cross-joins are optimized somehow (#10633)
statement ok
CREATE TABLE customers(id INT PRIMARY KEY NOT NULL); CREATE TABLE orders(id INT, cust INT REFERENCES customers(id))

query ITTT
SELECT level, node_type, field, description FROM [EXPLAIN (VERBOSE) SELECT
       NULL::text  AS pktable_cat,
       pkn.nspname AS pktable_schem,
       pkc.relname AS pktable_name,
       pka.attname AS pkcolumn_name,
       NULL::text  AS fktable_cat,
       fkn.nspname AS fktable_schem,
       fkc.relname AS fktable_name,
       fka.attname AS fkcolumn_name,
       pos.n       AS key_seq,
       CASE con.confupdtype
            WHEN 'c' THEN 0
            WHEN 'n' THEN 2
            WHEN 'd' THEN 4
            WHEN 'r' THEN 1
            WHEN 'a' THEN 3
            ELSE NULL
       END AS update_rule,
       CASE con.confdeltype
            WHEN 'c' THEN 0
            WHEN 'n' THEN 2
            WHEN 'd' THEN 4
            WHEN 'r' THEN 1
            WHEN 'a' THEN 3
            ELSE NULL
       END          AS delete_rule,
       con.conname  AS fk_name,
       pkic.relname AS pk_name,
       CASE
            WHEN con.condeferrable
            AND      con.condeferred THEN 5
            WHEN con.condeferrable THEN 6
            ELSE 7
       END AS deferrability
  FROM     pg_catalog.pg_namespace pkn,
       pg_catalog.pg_class pkc,
       pg_catalog.pg_attribute pka,
       pg_catalog.pg_namespace fkn,
       pg_catalog.pg_class fkc,
       pg_catalog.pg_attribute fka,
       pg_catalog.pg_constraint con,
       pg_catalog.generate_series(1, 32) pos(n),
       pg_catalog.pg_depend dep,
       pg_catalog.pg_class pkic
  WHERE    pkn.oid = pkc.relnamespace
  AND      pkc.oid = pka.attrelid
  AND      pka.attnum = con.confkey[pos.n]
  AND      con.confrelid = pkc.oid
  AND      fkn.oid = fkc.relnamespace
  AND      fkc.oid = fka.attrelid
  AND      fka.attnum = con.conkey[pos.n]
  AND      con.conrelid = fkc.oid
  AND      con.contype = 'f'
  AND      con.oid = dep.objid
  AND      pkic.oid = dep.refobjid
  AND      pkic.relkind = 'i'
  AND      fkn.nspname = 'public'
  AND      fkc.relname = 'orders'
  ORDER BY pkn.nspname,
           pkc.relname,
           con.conname,
           pos.n
  ] WHERE node_type <> 'values' AND field <> 'size'
----
0   ·                          distribution        local
0   ·                          vectorized          false
0   render                     ·                   ·
0   ·                          render 0            pktable_cat
0   ·                          render 1            nspname
0   ·                          render 2            relname
0   ·                          render 3            attname
0   ·                          render 4            pktable_cat
0   ·                          render 5            nspname
0   ·                          render 6            relname
0   ·                          render 7            attname
0   ·                          render 8            generate_series
0   ·                          render 9            update_rule
0   ·                          render 10           delete_rule
0   ·                          render 11           conname
0   ·                          render 12           relname
0   ·                          render 13           deferrability
1   sort                       ·                   ·
1   ·                          order               +nspname,+relname,+conname,+generate_series
2   render                     ·                   ·
2   ·                          render 0            CAST(NULL AS STRING)
2   ·                          render 1            CASE confupdtype WHEN 'c' THEN 0 WHEN 'n' THEN 2 WHEN 'd' THEN 4 WHEN 'r' THEN 1 WHEN 'a' THEN 3 END
2   ·                          render 2            CASE confdeltype WHEN 'c' THEN 0 WHEN 'n' THEN 2 WHEN 'd' THEN 4 WHEN 'r' THEN 1 WHEN 'a' THEN 3 END
2   ·                          render 3            CASE WHEN condeferrable AND condeferred THEN 5 WHEN condeferrable THEN 6 ELSE 7 END
2   ·                          render 4            nspname
2   ·                          render 5            relname
2   ·                          render 6            attname
2   ·                          render 7            nspname
2   ·                          render 8            relname
2   ·                          render 9            attname
2   ·                          render 10           conname
2   ·                          render 11           generate_series
2   ·                          render 12           relname
3   hash-join                  ·                   ·
3   ·                          type                inner
3   ·                          equality            (refobjid) = (oid)
3   ·                          right cols are key  ·
4   hash-join                  ·                   ·
4   ·                          type                inner
4   ·                          equality            (objid) = (oid)
5   render                     ·                   ·
5   ·                          render 0            objid
5   ·                          render 1            refobjid
6   virtual table              ·                   ·
6   ·                          source              pg_depend@primary
5   cross-join                 ·                   ·
5   ·                          type                inner
5   ·                          pred                (attnum = confkey[generate_series]) AND (attnum = conkey[generate_series])
6   hash-join                  ·                   ·
6   ·                          type                inner
6   ·                          equality            (conrelid) = (oid)
7   hash-join                  ·                   ·
7   ·                          type                inner
7   ·                          equality            (oid) = (relnamespace)
8   render                     ·                   ·
8   ·                          render 0            oid
8   ·                          render 1            nspname
9   virtual table              ·                   ·
9   ·                          source              pg_namespace@primary
8   virtual-table-lookup-join  ·                   ·
8   ·                          table               pg_class@pg_class_oid_idx
8   ·                          type                inner
8   ·                          equality            (attrelid) = (oid)
9   virtual-table-lookup-join  ·                   ·
9   ·                          table               pg_attribute@pg_attribute_attrelid_idx
9   ·                          type                inner
9   ·                          equality            (confrelid) = (attrelid)
10  filter                     ·                   ·
10  ·                          filter              contype = 'f'
11  render                     ·                   ·
11  ·                          render 0            oid
11  ·                          render 1            conname
11  ·                          render 2            contype
11  ·                          render 3            condeferrable
11  ·                          render 4            condeferred
11  ·                          render 5            conrelid
11  ·                          render 6            confrelid
11  ·                          render 7            confupdtype
11  ·                          render 8            confdeltype
11  ·                          render 9            conkey
11  ·                          render 10           confkey
12  virtual table              ·                   ·
12  ·                          source              pg_constraint@primary
7   hash-join                  ·                   ·
7   ·                          type                inner
7   ·                          equality            (oid) = (relnamespace)
8   filter                     ·                   ·
8   ·                          filter              nspname = 'public'
9   render                     ·                   ·
9   ·                          render 0            oid
9   ·                          render 1            nspname
10  virtual table              ·                   ·
10  ·                          source              pg_namespace@primary
8   virtual-table-lookup-join  ·                   ·
8   ·                          table               pg_attribute@pg_attribute_attrelid_idx
8   ·                          type                inner
8   ·                          equality            (oid) = (attrelid)
9   filter                     ·                   ·
9   ·                          filter              relname = 'orders'
10  render                     ·                   ·
10  ·                          render 0            oid
10  ·                          render 1            relname
10  ·                          render 2            relnamespace
11  virtual table              ·                   ·
11  ·                          source              pg_class@primary
6   project set                ·                   ·
6   ·                          render 0            generate_series(1, 32)
7   emptyrow                   ·                   ·
4   filter                     ·                   ·
4   ·                          filter              relkind = 'i'
5   render                     ·                   ·
5   ·                          render 0            oid
5   ·                          render 1            relname
5   ·                          render 2            relkind
6   virtual table              ·                   ·
6   ·                          source              pg_class@primary

# Ensure that left joins on non-null foreign keys turn into inner joins
statement ok
CREATE TABLE cards(id INT PRIMARY KEY, cust INT NOT NULL REFERENCES customers(id))

query TTT
EXPLAIN SELECT * FROM cards LEFT OUTER JOIN customers ON customers.id = cards.cust
----
·           distribution        local
·           vectorized          true
merge-join  ·                   ·
 │          type                inner
 │          equality            (cust) = (id)
 │          right cols are key  ·
 │          mergeJoinOrder      +"(cust=id)"
 ├── scan   ·                   ·
 │          table               cards@cards_auto_index_fk_cust_ref_customers
 │          spans               FULL SCAN
 └── scan   ·                   ·
·           table               customers@primary
·           spans               FULL SCAN

# Tests for filter propagation through joins.

statement ok
CREATE TABLE square (n INT PRIMARY KEY, sq INT)

statement ok
CREATE TABLE pairs (a INT, b INT)

# The filter expression becomes an equality constraint.
query TTT
EXPLAIN SELECT * FROM pairs, square WHERE pairs.b = square.n
----
·          distribution        local
·          vectorized          true
hash-join  ·                   ·
 │         type                inner
 │         equality            (b) = (n)
 │         right cols are key  ·
 ├── scan  ·                   ·
 │         table               pairs@primary
 │         spans               FULL SCAN
 └── scan  ·                   ·
·          table               square@primary
·          spans               FULL SCAN

# The filter expression becomes an ON predicate.
query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM pairs, square WHERE pairs.a + pairs.b = square.sq
----
·                    distribution  local             ·                       ·
·                    vectorized    true              ·                       ·
render               ·             ·                 (a, b, n, sq)           ·
 │                   render 0      a                 ·                       ·
 │                   render 1      b                 ·                       ·
 │                   render 2      n                 ·                       ·
 │                   render 3      sq                ·                       ·
 └── hash-join       ·             ·                 (column6, a, b, n, sq)  ·
      │              type          inner             ·                       ·
      │              equality      (column6) = (sq)  ·                       ·
      ├── render     ·             ·                 (column6, a, b)         ·
      │    │         render 0      a + b             ·                       ·
      │    │         render 1      a                 ·                       ·
      │    │         render 2      b                 ·                       ·
      │    └── scan  ·             ·                 (a, b)                  ·
      │              table         pairs@primary     ·                       ·
      │              spans         FULL SCAN         ·                       ·
      └── scan       ·             ·                 (n, sq)                 ·
·                    table         square@primary    ·                       ·
·                    spans         FULL SCAN         ·                       ·

# Query similar to the one above, but the filter refers to a rendered
# expression and can't "break through".
query TTTTT
EXPLAIN (VERBOSE) SELECT a, b, n, sq FROM (SELECT a, b, a * b / 2 AS div, n, sq FROM pairs, square) WHERE div = sq
----
·                          distribution  local           ·                   ·
·                          vectorized    true            ·                   ·
render                     ·             ·               (a, b, n, sq)       ·
 │                         render 0      a               ·                   ·
 │                         render 1      b               ·                   ·
 │                         render 2      n               ·                   ·
 │                         render 3      sq              ·                   ·
 └── filter                ·             ·               (div, a, b, n, sq)  ·
      │                    filter        div = sq        ·                   ·
      └── render           ·             ·               (div, a, b, n, sq)  ·
           │               render 0      (a * b) / 2     ·                   ·
           │               render 1      a               ·                   ·
           │               render 2      b               ·                   ·
           │               render 3      n               ·                   ·
           │               render 4      sq              ·                   ·
           └── cross-join  ·             ·               (a, b, n, sq)       ·
                │          type          cross           ·                   ·
                ├── scan   ·             ·               (a, b)              ·
                │          table         pairs@primary   ·                   ·
                │          spans         FULL SCAN       ·                   ·
                └── scan   ·             ·               (n, sq)             ·
·                          table         square@primary  ·                   ·
·                          spans         FULL SCAN       ·                   ·

# The filter expression must stay on top of the outer join.
query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM pairs FULL OUTER JOIN square ON pairs.a + pairs.b = square.sq
----
·                    distribution  local             ·                       ·
·                    vectorized    true              ·                       ·
render               ·             ·                 (a, b, n, sq)           ·
 │                   render 0      a                 ·                       ·
 │                   render 1      b                 ·                       ·
 │                   render 2      n                 ·                       ·
 │                   render 3      sq                ·                       ·
 └── hash-join       ·             ·                 (column6, a, b, n, sq)  ·
      │              type          full outer        ·                       ·
      │              equality      (column6) = (sq)  ·                       ·
      ├── render     ·             ·                 (column6, a, b)         ·
      │    │         render 0      a + b             ·                       ·
      │    │         render 1      a                 ·                       ·
      │    │         render 2      b                 ·                       ·
      │    └── scan  ·             ·                 (a, b)                  ·
      │              table         pairs@primary     ·                       ·
      │              spans         FULL SCAN         ·                       ·
      └── scan       ·             ·                 (n, sq)                 ·
·                    table         square@primary    ·                       ·
·                    spans         FULL SCAN         ·                       ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM pairs FULL OUTER JOIN square ON pairs.a + pairs.b = square.sq WHERE pairs.b%2 <> square.sq%2
----
·                         distribution  local                ·                       ·
·                         vectorized    true                 ·                       ·
render                    ·             ·                    (a, b, n, sq)           ·
 │                        render 0      a                    ·                       ·
 │                        render 1      b                    ·                       ·
 │                        render 2      n                    ·                       ·
 │                        render 3      sq                   ·                       ·
 └── filter               ·             ·                    (column6, a, b, n, sq)  ·
      │                   filter        (b % 2) != (sq % 2)  ·                       ·
      └── hash-join       ·             ·                    (column6, a, b, n, sq)  ·
           │              type          full outer           ·                       ·
           │              equality      (column6) = (sq)     ·                       ·
           ├── render     ·             ·                    (column6, a, b)         ·
           │    │         render 0      a + b                ·                       ·
           │    │         render 1      a                    ·                       ·
           │    │         render 2      b                    ·                       ·
           │    └── scan  ·             ·                    (a, b)                  ·
           │              table         pairs@primary        ·                       ·
           │              spans         FULL SCAN            ·                       ·
           └── scan       ·             ·                    (n, sq)                 ·
·                         table         square@primary       ·                       ·
·                         spans         FULL SCAN            ·                       ·

# Filter propagation through outer joins.

query TTT
SELECT tree, field, description FROM [
EXPLAIN (VERBOSE)
SELECT *
  FROM (SELECT * FROM pairs LEFT JOIN square ON b = sq AND a > 1 AND n < 6)
 WHERE b > 1 AND (n IS NULL OR n > 1) AND (n IS NULL OR a  < sq)
]
----
·               distribution  local
·               vectorized    true
filter          ·             ·
 │              filter        ((n IS NULL) OR (n > 1)) AND ((n IS NULL) OR (a < sq))
 └── hash-join  ·             ·
      │         type          left outer
      │         equality      (b) = (sq)
      │         pred          a > 1
      ├── scan  ·             ·
      │         table         pairs@primary
      │         spans         FULL SCAN
      │         filter        b > 1
      └── scan  ·             ·
·               table         square@primary
·               spans         -/5/#
·               filter        sq > 1

query TTT
SELECT tree, field, description FROM [
EXPLAIN (VERBOSE)
SELECT *
  FROM (SELECT * FROM pairs RIGHT JOIN square ON b = sq AND a > 1 AND n < 6)
 WHERE (a IS NULL OR a > 2) AND n > 1 AND (a IS NULL OR a < sq)
]
----
·                    distribution  local
·                    vectorized    true
render               ·             ·
 │                   render 0      a
 │                   render 1      b
 │                   render 2      n
 │                   render 3      sq
 └── filter          ·             ·
      │              filter        ((a IS NULL) OR (a > 2)) AND ((a IS NULL) OR (a < sq))
      └── hash-join  ·             ·
           │         type          left outer
           │         equality      (sq) = (b)
           │         pred          n < 6
           ├── scan  ·             ·
           │         table         square@primary
           │         spans         /2-
           └── scan  ·             ·
·                    table         pairs@primary
·                    spans         FULL SCAN
·                    filter        a > 1

# The simpler plan for an inner join, to compare.
query TTT
SELECT tree, field, description FROM [
EXPLAIN (VERBOSE)
SELECT *
  FROM (SELECT * FROM pairs JOIN square ON b = sq AND a > 1 AND n < 6)
 WHERE (a IS NULL OR a > 2) AND n > 1 AND (a IS NULL OR a < sq)
]
----
·          distribution  local
·          vectorized    true
hash-join  ·             ·
 │         type          inner
 │         equality      (b) = (sq)
 ├── scan  ·             ·
 │         table         pairs@primary
 │         spans         FULL SCAN
 │         filter        ((a > 1) AND ((a IS NULL) OR (a > 2))) AND ((a IS NULL) OR (a < b))
 └── scan  ·             ·
·          table         square@primary
·          spans         /2-/5/#
·          parallel      ·


statement ok
CREATE TABLE t1 (col1 INT, x INT, col2 INT, y INT)

statement ok
CREATE TABLE t2 (col3 INT, y INT, x INT, col4 INT)

query TTTTT
EXPLAIN (VERBOSE) SELECT x FROM t1 NATURAL JOIN (SELECT * FROM t2)
----
·               distribution  local            ·             ·
·               vectorized    true             ·             ·
render          ·             ·                (x)           ·
 │              render 0      x                ·             ·
 └── hash-join  ·             ·                (x, y, y, x)  ·
      │         type          inner            ·             ·
      │         equality      (x, y) = (x, y)  ·             ·
      ├── scan  ·             ·                (x, y)        ·
      │         table         t1@primary       ·             ·
      │         spans         FULL SCAN        ·             ·
      └── scan  ·             ·                (y, x)        ·
·               table         t2@primary       ·             ·
·               spans         FULL SCAN        ·             ·

# Tests for merge join ordering information.
statement ok
CREATE TABLE pkBA (a INT, b INT, c INT, d INT, PRIMARY KEY(b,a))

statement ok
CREATE TABLE pkBC (a INT, b INT, c INT, d INT, PRIMARY KEY(b,c))

statement ok
CREATE TABLE pkBAC (a INT, b INT, c INT, d INT, PRIMARY KEY(b,a,c))

statement ok
CREATE TABLE pkBAD (a INT, b INT, c INT, d INT, PRIMARY KEY(b,a,d))

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM pkBA AS l JOIN pkBC AS r ON l.a = r.a AND l.b = r.b AND l.c = r.c
----
·          distribution        local                  ·                         ·
·          vectorized          true                   ·                         ·
hash-join  ·                   ·                      (a, b, c, d, a, b, c, d)  ·
 │         type                inner                  ·                         ·
 │         equality            (a, b, c) = (a, b, c)  ·                         ·
 │         left cols are key   ·                      ·                         ·
 │         right cols are key  ·                      ·                         ·
 ├── scan  ·                   ·                      (a, b, c, d)              ·
 │         table               pkba@primary           ·                         ·
 │         spans               FULL SCAN              ·                         ·
 └── scan  ·                   ·                      (a, b, c, d)              ·
·          table               pkbc@primary           ·                         ·
·          spans               FULL SCAN              ·                         ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM pkBA NATURAL JOIN pkBAD
----
·               distribution        local                        ·                         ·
·               vectorized          true                         ·                         ·
render          ·                   ·                            (a, b, c, d)              ·
 │              render 0            a                            ·                         ·
 │              render 1            b                            ·                         ·
 │              render 2            c                            ·                         ·
 │              render 3            d                            ·                         ·
 └── hash-join  ·                   ·                            (a, b, c, d, a, b, c, d)  ·
      │         type                inner                        ·                         ·
      │         equality            (a, b, c, d) = (a, b, c, d)  ·                         ·
      │         left cols are key   ·                            ·                         ·
      │         right cols are key  ·                            ·                         ·
      ├── scan  ·                   ·                            (a, b, c, d)              ·
      │         table               pkba@primary                 ·                         ·
      │         spans               FULL SCAN                    ·                         ·
      └── scan  ·                   ·                            (a, b, c, d)              ·
·               table               pkbad@primary                ·                         ·
·               spans               FULL SCAN                    ·                         ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM pkBAC AS l JOIN pkBAC AS r USING(a, b, c)
----
·                distribution        local                       ·                         ·
·                vectorized          true                        ·                         ·
render           ·                   ·                           (a, b, c, d, d)           ·
 │               render 0            a                           ·                         ·
 │               render 1            b                           ·                         ·
 │               render 2            c                           ·                         ·
 │               render 3            d                           ·                         ·
 │               render 4            d                           ·                         ·
 └── merge-join  ·                   ·                           (a, b, c, d, a, b, c, d)  ·
      │          type                inner                       ·                         ·
      │          equality            (b, a, c) = (b, a, c)       ·                         ·
      │          left cols are key   ·                           ·                         ·
      │          right cols are key  ·                           ·                         ·
      │          mergeJoinOrder      +"(b=b)",+"(a=a)",+"(c=c)"  ·                         ·
      ├── scan   ·                   ·                           (a, b, c, d)              +b,+a,+c
      │          table               pkbac@primary               ·                         ·
      │          spans               FULL SCAN                   ·                         ·
      └── scan   ·                   ·                           (a, b, c, d)              +b,+a,+c
·                table               pkbac@primary               ·                         ·
·                spans               FULL SCAN                   ·                         ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM pkBAC AS l JOIN pkBAD AS r ON l.c = r.d AND l.a = r.a AND l.b = r.b
----
·           distribution        local                       ·                         ·
·           vectorized          true                        ·                         ·
merge-join  ·                   ·                           (a, b, c, d, a, b, c, d)  ·
 │          type                inner                       ·                         ·
 │          equality            (b, a, c) = (b, a, d)       ·                         ·
 │          left cols are key   ·                           ·                         ·
 │          right cols are key  ·                           ·                         ·
 │          mergeJoinOrder      +"(b=b)",+"(a=a)",+"(c=d)"  ·                         ·
 ├── scan   ·                   ·                           (a, b, c, d)              +b,+a,+c
 │          table               pkbac@primary               ·                         ·
 │          spans               FULL SCAN                   ·                         ·
 └── scan   ·                   ·                           (a, b, c, d)              +b,+a,+d
·           table               pkbad@primary               ·                         ·
·           spans               FULL SCAN                   ·                         ·

# Tests with joins with merged columns of collated string type.
statement ok
CREATE TABLE str1 (a INT PRIMARY KEY, s STRING COLLATE en_u_ks_level1)

statement ok
CREATE TABLE str2 (a INT PRIMARY KEY, s STRING COLLATE en_u_ks_level1)

query TTTTT
EXPLAIN (VERBOSE) SELECT s, str1.s, str2.s FROM str1 INNER JOIN str2 USING(s)
----
·               distribution  local         ·          ·
·               vectorized    true          ·          ·
render          ·             ·             (s, s, s)  ·
 │              render 0      s             ·          ·
 │              render 1      s             ·          ·
 │              render 2      s             ·          ·
 └── hash-join  ·             ·             (s, s)     ·
      │         type          inner         ·          ·
      │         equality      (s) = (s)     ·          ·
      ├── scan  ·             ·             (s)        ·
      │         table         str1@primary  ·          ·
      │         spans         FULL SCAN     ·          ·
      └── scan  ·             ·             (s)        ·
·               table         str2@primary  ·          ·
·               spans         FULL SCAN     ·          ·

query TTTTT
EXPLAIN (VERBOSE) SELECT s, str1.s, str2.s FROM str1 LEFT OUTER JOIN str2 USING(s)
----
·               distribution  local         ·          ·
·               vectorized    true          ·          ·
render          ·             ·             (s, s, s)  ·
 │              render 0      s             ·          ·
 │              render 1      s             ·          ·
 │              render 2      s             ·          ·
 └── hash-join  ·             ·             (s, s)     ·
      │         type          left outer    ·          ·
      │         equality      (s) = (s)     ·          ·
      ├── scan  ·             ·             (s)        ·
      │         table         str1@primary  ·          ·
      │         spans         FULL SCAN     ·          ·
      └── scan  ·             ·             (s)        ·
·               table         str2@primary  ·          ·
·               spans         FULL SCAN     ·          ·

query TTTTT
EXPLAIN (VERBOSE) SELECT s, str1.s, str2.s FROM str1 RIGHT OUTER JOIN str2 USING(s)
----
·               distribution  local           ·          ·
·               vectorized    true            ·          ·
render          ·             ·               (s, s, s)  ·
 │              render 0      COALESCE(s, s)  ·          ·
 │              render 1      s               ·          ·
 │              render 2      s               ·          ·
 └── hash-join  ·             ·               (s, s)     ·
      │         type          left outer      ·          ·
      │         equality      (s) = (s)       ·          ·
      ├── scan  ·             ·               (s)        ·
      │         table         str2@primary    ·          ·
      │         spans         FULL SCAN       ·          ·
      └── scan  ·             ·               (s)        ·
·               table         str1@primary    ·          ·
·               spans         FULL SCAN       ·          ·

query TTTTT
EXPLAIN (VERBOSE) SELECT s, str1.s, str2.s FROM str1 FULL OUTER JOIN str2 USING(s)
----
·               distribution  local           ·          ·
·               vectorized    true            ·          ·
render          ·             ·               (s, s, s)  ·
 │              render 0      COALESCE(s, s)  ·          ·
 │              render 1      s               ·          ·
 │              render 2      s               ·          ·
 └── hash-join  ·             ·               (s, s)     ·
      │         type          full outer      ·          ·
      │         equality      (s) = (s)       ·          ·
      ├── scan  ·             ·               (s)        ·
      │         table         str1@primary    ·          ·
      │         spans         FULL SCAN       ·          ·
      └── scan  ·             ·               (s)        ·
·               table         str2@primary    ·          ·
·               spans         FULL SCAN       ·          ·

# Verify that we resolve the merged column a to str2.a but use IFNULL for
# column s which is a collated string.
query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM str1 RIGHT OUTER JOIN str2 USING(a, s)
----
·               distribution        local            ·             ·
·               vectorized          true             ·             ·
render          ·                   ·                (a, s)        ·
 │              render 0            a                ·             ·
 │              render 1            COALESCE(s, s)   ·             ·
 └── hash-join  ·                   ·                (a, s, a, s)  ·
      │         type                left outer       ·             ·
      │         equality            (a, s) = (a, s)  ·             ·
      │         left cols are key   ·                ·             ·
      │         right cols are key  ·                ·             ·
      ├── scan  ·                   ·                (a, s)        ·
      │         table               str2@primary     ·             ·
      │         spans               FULL SCAN        ·             ·
      └── scan  ·                   ·                (a, s)        ·
·               table               str1@primary     ·             ·
·               spans               FULL SCAN        ·             ·


statement ok
CREATE TABLE xyu (x INT, y INT, u INT, PRIMARY KEY(x,y,u))

statement ok
CREATE TABLE xyv (x INT, y INT, v INT, PRIMARY KEY(x,y,v))

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM xyu INNER JOIN xyv USING(x, y) WHERE x > 2
----
·                distribution    local              ·                   ·
·                vectorized      true               ·                   ·
render           ·               ·                  (x, y, u, v)        ·
 │               render 0        x                  ·                   ·
 │               render 1        y                  ·                   ·
 │               render 2        u                  ·                   ·
 │               render 3        v                  ·                   ·
 └── merge-join  ·               ·                  (x, y, u, x, y, v)  ·
      │          type            inner              ·                   ·
      │          equality        (x, y) = (x, y)    ·                   ·
      │          mergeJoinOrder  +"(x=x)",+"(y=y)"  ·                   ·
      ├── scan   ·               ·                  (x, y, u)           +x,+y
      │          table           xyu@primary        ·                   ·
      │          spans           /3-                ·                   ·
      └── scan   ·               ·                  (x, y, v)           +x,+y
·                table           xyv@primary        ·                   ·
·                spans           /3-                ·                   ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM xyu LEFT OUTER JOIN xyv USING(x, y) WHERE x > 2
----
·                distribution    local              ·                   ·
·                vectorized      true               ·                   ·
render           ·               ·                  (x, y, u, v)        ·
 │               render 0        x                  ·                   ·
 │               render 1        y                  ·                   ·
 │               render 2        u                  ·                   ·
 │               render 3        v                  ·                   ·
 └── merge-join  ·               ·                  (x, y, u, x, y, v)  ·
      │          type            left outer         ·                   ·
      │          equality        (x, y) = (x, y)    ·                   ·
      │          mergeJoinOrder  +"(x=x)",+"(y=y)"  ·                   ·
      ├── scan   ·               ·                  (x, y, u)           +x,+y
      │          table           xyu@primary        ·                   ·
      │          spans           /3-                ·                   ·
      └── scan   ·               ·                  (x, y, v)           +x,+y
·                table           xyv@primary        ·                   ·
·                spans           /3-                ·                   ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM xyu RIGHT OUTER JOIN xyv USING(x, y) WHERE x > 2
----
·                distribution    local              ·                   ·
·                vectorized      true               ·                   ·
render           ·               ·                  (x, y, u, v)        ·
 │               render 0        x                  ·                   ·
 │               render 1        y                  ·                   ·
 │               render 2        u                  ·                   ·
 │               render 3        v                  ·                   ·
 └── merge-join  ·               ·                  (x, y, v, x, y, u)  ·
      │          type            left outer         ·                   ·
      │          equality        (x, y) = (x, y)    ·                   ·
      │          mergeJoinOrder  +"(x=x)",+"(y=y)"  ·                   ·
      ├── scan   ·               ·                  (x, y, v)           +x,+y
      │          table           xyv@primary        ·                   ·
      │          spans           /3-                ·                   ·
      └── scan   ·               ·                  (x, y, u)           +x,+y
·                table           xyu@primary        ·                   ·
·                spans           /3-                ·                   ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM xyu FULL OUTER JOIN xyv USING(x, y) WHERE x > 2
----
·                     distribution    local              ·                   ·
·                     vectorized      true               ·                   ·
filter                ·               ·                  (x, y, u, v)        ·
 │                    filter          x > 2              ·                   ·
 └── render           ·               ·                  (x, y, u, v)        ·
      │               render 0        COALESCE(x, x)     ·                   ·
      │               render 1        COALESCE(y, y)     ·                   ·
      │               render 2        u                  ·                   ·
      │               render 3        v                  ·                   ·
      └── merge-join  ·               ·                  (x, y, u, x, y, v)  ·
           │          type            full outer         ·                   ·
           │          equality        (x, y) = (x, y)    ·                   ·
           │          mergeJoinOrder  +"(x=x)",+"(y=y)"  ·                   ·
           ├── scan   ·               ·                  (x, y, u)           +x,+y
           │          table           xyu@primary        ·                   ·
           │          spans           FULL SCAN          ·                   ·
           └── scan   ·               ·                  (x, y, v)           +x,+y
·                     table           xyv@primary        ·                   ·
·                     spans           FULL SCAN          ·                   ·

# Verify that we transfer constraints between the two sides.
query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM xyu INNER JOIN xyv ON xyu.x = xyv.x AND xyu.y = xyv.y WHERE xyu.x = 1 AND xyu.y < 10
----
·           distribution    local              ·                   ·
·           vectorized      true               ·                   ·
merge-join  ·               ·                  (x, y, u, x, y, v)  ·
 │          type            inner              ·                   ·
 │          equality        (x, y) = (x, y)    ·                   ·
 │          mergeJoinOrder  +"(x=x)",+"(y=y)"  ·                   ·
 ├── scan   ·               ·                  (x, y, u)           +y
 │          table           xyu@primary        ·                   ·
 │          spans           /1-/1/10           ·                   ·
 └── scan   ·               ·                  (x, y, v)           +y
·           table           xyv@primary        ·                   ·
·           spans           /1-/1/10           ·                   ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM xyu INNER JOIN xyv ON xyu.x = xyv.x AND xyu.y = xyv.y AND xyu.x = 1 AND xyu.y < 10
----
·           distribution    local              ·                   ·
·           vectorized      true               ·                   ·
merge-join  ·               ·                  (x, y, u, x, y, v)  ·
 │          type            inner              ·                   ·
 │          equality        (x, y) = (x, y)    ·                   ·
 │          mergeJoinOrder  +"(x=x)",+"(y=y)"  ·                   ·
 ├── scan   ·               ·                  (x, y, u)           +y
 │          table           xyu@primary        ·                   ·
 │          spans           /1-/1/10           ·                   ·
 └── scan   ·               ·                  (x, y, v)           +y
·           table           xyv@primary        ·                   ·
·           spans           /1-/1/10           ·                   ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM xyu LEFT OUTER JOIN xyv ON xyu.x = xyv.x AND xyu.y = xyv.y AND xyu.x = 1 AND xyu.y < 10
----
·           distribution    local              ·                   ·
·           vectorized      true               ·                   ·
merge-join  ·               ·                  (x, y, u, x, y, v)  ·
 │          type            left outer         ·                   ·
 │          equality        (x, y) = (x, y)    ·                   ·
 │          mergeJoinOrder  +"(x=x)",+"(y=y)"  ·                   ·
 ├── scan   ·               ·                  (x, y, u)           +x,+y
 │          table           xyu@primary        ·                   ·
 │          spans           FULL SCAN          ·                   ·
 └── scan   ·               ·                  (x, y, v)           +y
·           table           xyv@primary        ·                   ·
·           spans           /1-/1/10           ·                   ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM xyu RIGHT OUTER JOIN xyv ON xyu.x = xyv.x AND xyu.y = xyv.y AND xyu.x = 1 AND xyu.y < 10
----
·                distribution    local              ·                   ·
·                vectorized      true               ·                   ·
render           ·               ·                  (x, y, u, x, y, v)  ·
 │               render 0        x                  ·                   ·
 │               render 1        y                  ·                   ·
 │               render 2        u                  ·                   ·
 │               render 3        x                  ·                   ·
 │               render 4        y                  ·                   ·
 │               render 5        v                  ·                   ·
 └── merge-join  ·               ·                  (x, y, v, x, y, u)  ·
      │          type            left outer         ·                   ·
      │          equality        (x, y) = (x, y)    ·                   ·
      │          mergeJoinOrder  +"(x=x)",+"(y=y)"  ·                   ·
      ├── scan   ·               ·                  (x, y, v)           +x,+y
      │          table           xyv@primary        ·                   ·
      │          spans           FULL SCAN          ·                   ·
      └── scan   ·               ·                  (x, y, u)           +y
·                table           xyu@primary        ·                   ·
·                spans           /1-/1/10           ·                   ·


# Test OUTER joins that are run in the distSQL merge joiner

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM (SELECT * FROM xyu ORDER BY x, y) AS xyu LEFT OUTER JOIN (SELECT * FROM xyv ORDER BY x, y) AS xyv USING(x, y) WHERE x > 2
----
·                distribution    local              ·                   ·
·                vectorized      true               ·                   ·
render           ·               ·                  (x, y, u, v)        ·
 │               render 0        x                  ·                   ·
 │               render 1        y                  ·                   ·
 │               render 2        u                  ·                   ·
 │               render 3        v                  ·                   ·
 └── merge-join  ·               ·                  (x, y, u, x, y, v)  ·
      │          type            left outer         ·                   ·
      │          equality        (x, y) = (x, y)    ·                   ·
      │          mergeJoinOrder  +"(x=x)",+"(y=y)"  ·                   ·
      ├── scan   ·               ·                  (x, y, u)           +x,+y
      │          table           xyu@primary        ·                   ·
      │          spans           /3-                ·                   ·
      └── scan   ·               ·                  (x, y, v)           +x,+y
·                table           xyv@primary        ·                   ·
·                spans           /3-                ·                   ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM (SELECT * FROM xyu ORDER BY x, y) AS xyu RIGHT OUTER JOIN (SELECT * FROM xyv ORDER BY x, y) AS xyv USING(x, y) WHERE x > 2
----
·                distribution    local              ·                   ·
·                vectorized      true               ·                   ·
render           ·               ·                  (x, y, u, v)        ·
 │               render 0        x                  ·                   ·
 │               render 1        y                  ·                   ·
 │               render 2        u                  ·                   ·
 │               render 3        v                  ·                   ·
 └── merge-join  ·               ·                  (x, y, v, x, y, u)  ·
      │          type            left outer         ·                   ·
      │          equality        (x, y) = (x, y)    ·                   ·
      │          mergeJoinOrder  +"(x=x)",+"(y=y)"  ·                   ·
      ├── scan   ·               ·                  (x, y, v)           +x,+y
      │          table           xyv@primary        ·                   ·
      │          spans           /3-                ·                   ·
      └── scan   ·               ·                  (x, y, u)           +x,+y
·                table           xyu@primary        ·                   ·
·                spans           /3-                ·                   ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM (SELECT * FROM xyu ORDER BY x, y) AS xyu FULL OUTER JOIN (SELECT * FROM xyv ORDER BY x, y) AS xyv USING(x, y) WHERE x > 2
----
·                     distribution    local              ·                   ·
·                     vectorized      true               ·                   ·
filter                ·               ·                  (x, y, u, v)        ·
 │                    filter          x > 2              ·                   ·
 └── render           ·               ·                  (x, y, u, v)        ·
      │               render 0        COALESCE(x, x)     ·                   ·
      │               render 1        COALESCE(y, y)     ·                   ·
      │               render 2        u                  ·                   ·
      │               render 3        v                  ·                   ·
      └── merge-join  ·               ·                  (x, y, u, x, y, v)  ·
           │          type            full outer         ·                   ·
           │          equality        (x, y) = (x, y)    ·                   ·
           │          mergeJoinOrder  +"(x=x)",+"(y=y)"  ·                   ·
           ├── scan   ·               ·                  (x, y, u)           +x,+y
           │          table           xyu@primary        ·                   ·
           │          spans           FULL SCAN          ·                   ·
           └── scan   ·               ·                  (x, y, v)           +x,+y
·                     table           xyv@primary        ·                   ·
·                     spans           FULL SCAN          ·                   ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM (SELECT * FROM xyu ORDER BY x, y) AS xyu LEFT OUTER JOIN (SELECT * FROM xyv ORDER BY x, y) AS xyv ON xyu.x = xyv.x AND xyu.y = xyv.y AND xyu.x = 1 AND xyu.y < 10
----
·           distribution    local              ·                   ·
·           vectorized      true               ·                   ·
merge-join  ·               ·                  (x, y, u, x, y, v)  ·
 │          type            left outer         ·                   ·
 │          equality        (x, y) = (x, y)    ·                   ·
 │          mergeJoinOrder  +"(x=x)",+"(y=y)"  ·                   ·
 ├── scan   ·               ·                  (x, y, u)           +x,+y
 │          table           xyu@primary        ·                   ·
 │          spans           FULL SCAN          ·                   ·
 └── scan   ·               ·                  (x, y, v)           +y
·           table           xyv@primary        ·                   ·
·           spans           /1-/1/10           ·                   ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM xyu RIGHT OUTER JOIN (SELECT * FROM xyv ORDER BY x, y) AS xyv ON xyu.x = xyv.x AND xyu.y = xyv.y AND xyu.x = 1 AND xyu.y < 10
----
·                distribution    local              ·                   ·
·                vectorized      true               ·                   ·
render           ·               ·                  (x, y, u, x, y, v)  ·
 │               render 0        x                  ·                   ·
 │               render 1        y                  ·                   ·
 │               render 2        u                  ·                   ·
 │               render 3        x                  ·                   ·
 │               render 4        y                  ·                   ·
 │               render 5        v                  ·                   ·
 └── merge-join  ·               ·                  (x, y, v, x, y, u)  ·
      │          type            left outer         ·                   ·
      │          equality        (x, y) = (x, y)    ·                   ·
      │          mergeJoinOrder  +"(x=x)",+"(y=y)"  ·                   ·
      ├── scan   ·               ·                  (x, y, v)           +x,+y
      │          table           xyv@primary        ·                   ·
      │          spans           FULL SCAN          ·                   ·
      └── scan   ·               ·                  (x, y, u)           +y
·                table           xyu@primary        ·                   ·
·                spans           /1-/1/10           ·                   ·

# Regression test for #20472: break up tuple inequalities.
query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM xyu JOIN xyv USING(x, y) WHERE (x, y, u) > (1, 2, 3)
----
·                distribution    local              ·                   ·
·                vectorized      true               ·                   ·
render           ·               ·                  (x, y, u, v)        ·
 │               render 0        x                  ·                   ·
 │               render 1        y                  ·                   ·
 │               render 2        u                  ·                   ·
 │               render 3        v                  ·                   ·
 └── merge-join  ·               ·                  (x, y, u, x, y, v)  ·
      │          type            inner              ·                   ·
      │          equality        (x, y) = (x, y)    ·                   ·
      │          mergeJoinOrder  +"(x=x)",+"(y=y)"  ·                   ·
      ├── scan   ·               ·                  (x, y, u)           +x,+y
      │          table           xyu@primary        ·                   ·
      │          spans           /1/2/4-            ·                   ·
      └── scan   ·               ·                  (x, y, v)           +x,+y
·                table           xyv@primary        ·                   ·
·                spans           FULL SCAN          ·                   ·


# Regression test for #20765/27431.
# We push a filter on an equality column to both sides of a left or right outer
# join.

statement ok
CREATE TABLE l (a INT PRIMARY KEY, b1 INT, FAMILY (a))

statement ok
CREATE TABLE r (a INT PRIMARY KEY, b2 INT, FAMILY (a))

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM l LEFT OUTER JOIN r USING(a) WHERE a = 3;
----
·                distribution        local       ·               ·
·                vectorized          true        ·               ·
render           ·                   ·           (a, b1, b2)     ·
 │               render 0            a           ·               ·
 │               render 1            b1          ·               ·
 │               render 2            b2          ·               ·
 └── merge-join  ·                   ·           (a, b1, a, b2)  ·
      │          type                left outer  ·               ·
      │          equality            (a) = (a)   ·               ·
      │          left cols are key   ·           ·               ·
      │          right cols are key  ·           ·               ·
      │          mergeJoinOrder      +"(a=a)"    ·               ·
      ├── scan   ·                   ·           (a, b1)         ·
      │          table               l@primary   ·               ·
      │          spans               /3-/3/#     ·               ·
      └── scan   ·                   ·           (a, b2)         ·
·                table               r@primary   ·               ·
·                spans               /3-/3/#     ·               ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM l LEFT OUTER JOIN r ON l.a = r.a WHERE l.a = 3;
----
·           distribution        local       ·               ·
·           vectorized          true        ·               ·
merge-join  ·                   ·           (a, b1, a, b2)  ·
 │          type                left outer  ·               ·
 │          equality            (a) = (a)   ·               ·
 │          left cols are key   ·           ·               ·
 │          right cols are key  ·           ·               ·
 │          mergeJoinOrder      +"(a=a)"    ·               ·
 ├── scan   ·                   ·           (a, b1)         ·
 │          table               l@primary   ·               ·
 │          spans               /3-/3/#     ·               ·
 └── scan   ·                   ·           (a, b2)         ·
·           table               r@primary   ·               ·
·           spans               /3-/3/#     ·               ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM l RIGHT OUTER JOIN r USING(a) WHERE a = 3;
----
·                distribution        local       ·               ·
·                vectorized          true        ·               ·
render           ·                   ·           (a, b1, b2)     ·
 │               render 0            a           ·               ·
 │               render 1            b1          ·               ·
 │               render 2            b2          ·               ·
 └── merge-join  ·                   ·           (a, b2, a, b1)  ·
      │          type                left outer  ·               ·
      │          equality            (a) = (a)   ·               ·
      │          left cols are key   ·           ·               ·
      │          right cols are key  ·           ·               ·
      │          mergeJoinOrder      +"(a=a)"    ·               ·
      ├── scan   ·                   ·           (a, b2)         ·
      │          table               r@primary   ·               ·
      │          spans               /3-/3/#     ·               ·
      └── scan   ·                   ·           (a, b1)         ·
·                table               l@primary   ·               ·
·                spans               /3-/3/#     ·               ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM l RIGHT OUTER JOIN r ON l.a = r.a WHERE r.a = 3;
----
·                distribution        local       ·               ·
·                vectorized          true        ·               ·
render           ·                   ·           (a, b1, a, b2)  ·
 │               render 0            a           ·               ·
 │               render 1            b1          ·               ·
 │               render 2            a           ·               ·
 │               render 3            b2          ·               ·
 └── merge-join  ·                   ·           (a, b2, a, b1)  ·
      │          type                left outer  ·               ·
      │          equality            (a) = (a)   ·               ·
      │          left cols are key   ·           ·               ·
      │          right cols are key  ·           ·               ·
      │          mergeJoinOrder      +"(a=a)"    ·               ·
      ├── scan   ·                   ·           (a, b2)         ·
      │          table               r@primary   ·               ·
      │          spans               /3-/3/#     ·               ·
      └── scan   ·                   ·           (a, b1)         ·
·                table               l@primary   ·               ·
·                spans               /3-/3/#     ·               ·

# Regression tests for #21243
statement ok
CREATE TABLE abcdef (
  a INT NOT NULL,
  b INT NOT NULL,
  c INT NOT NULL,
  d INT NOT NULL,
  e INT NULL,
  f INT NULL,
  PRIMARY KEY (a ASC, b ASC, c DESC, d ASC)
)

statement ok
CREATE TABLE abg (
  a INT NOT NULL,
  b INT NOT NULL,
  g INT NULL,
  PRIMARY KEY (a ASC, b ASC)
);

query TTT
EXPLAIN SELECT * FROM abcdef join (select * from abg) USING (a,b) WHERE ((a,b)>(1,2) OR ((a,b)=(1,2) AND c < 6) OR ((a,b,c)=(1,2,6) AND d > 8))
----
·                distribution        local
·                vectorized          true
render           ·                   ·
 └── merge-join  ·                   ·
      │          type                inner
      │          equality            (a, b) = (a, b)
      │          right cols are key  ·
      │          mergeJoinOrder      +"(a=a)",+"(b=b)"
      ├── scan   ·                   ·
      │          table               abcdef@primary
      │          spans               /1/2/6/9-
      └── scan   ·                   ·
·                table               abg@primary
·                spans               FULL SCAN

# Regression tests for mixed-type equality columns (#22514).
statement ok
CREATE TABLE foo (
  a INT,
  b INT,
  c FLOAT,
  d FLOAT
)

statement ok
CREATE TABLE bar (
  a INT,
  b FLOAT,
  c FLOAT,
  d INT
)

# Only a and c can be equality columns.
query TTT
SELECT tree, field, description FROM [
EXPLAIN (VERBOSE) SELECT * FROM foo NATURAL JOIN bar
]
----
·               distribution  local
·               vectorized    true
render          ·             ·
 │              render 0      a
 │              render 1      b
 │              render 2      c
 │              render 3      d
 └── hash-join  ·             ·
      │         type          inner
      │         equality      (a, c) = (a, c)
      │         pred          (b = b) AND (d = d)
      ├── scan  ·             ·
      │         table         foo@primary
      │         spans         FULL SCAN
      └── scan  ·             ·
·               table         bar@primary
·               spans         FULL SCAN

# b can't be an equality column.
query TTT
SELECT tree, field, description FROM [
EXPLAIN (VERBOSE) SELECT * FROM foo JOIN bar USING (b)
]
----
·                distribution  local
·                vectorized    true
render           ·             ·
 │               render 0      b
 │               render 1      a
 │               render 2      c
 │               render 3      d
 │               render 4      a
 │               render 5      c
 │               render 6      d
 └── cross-join  ·             ·
      │          type          inner
      │          pred          b = b
      ├── scan   ·             ·
      │          table         foo@primary
      │          spans         FULL SCAN
      └── scan   ·             ·
·                table         bar@primary
·                spans         FULL SCAN

# Only a can be an equality column.
query TTT
SELECT tree, field, description FROM [
EXPLAIN (VERBOSE) SELECT * FROM foo JOIN bar USING (a, b)
]
----
·               distribution  local
·               vectorized    true
render          ·             ·
 │              render 0      a
 │              render 1      b
 │              render 2      c
 │              render 3      d
 │              render 4      c
 │              render 5      d
 └── hash-join  ·             ·
      │         type          inner
      │         equality      (a) = (a)
      │         pred          b = b
      ├── scan  ·             ·
      │         table         foo@primary
      │         spans         FULL SCAN
      └── scan  ·             ·
·               table         bar@primary
·               spans         FULL SCAN

# Only a and c can be equality columns.
query TTT
SELECT tree, field, description FROM [
EXPLAIN (VERBOSE) SELECT * FROM foo JOIN bar USING (a, b, c)
]
----
·               distribution  local
·               vectorized    true
render          ·             ·
 │              render 0      a
 │              render 1      b
 │              render 2      c
 │              render 3      d
 │              render 4      d
 └── hash-join  ·             ·
      │         type          inner
      │         equality      (a, c) = (a, c)
      │         pred          b = b
      ├── scan  ·             ·
      │         table         foo@primary
      │         spans         FULL SCAN
      └── scan  ·             ·
·               table         bar@primary
·               spans         FULL SCAN

# b can't be an equality column.
query TTT
SELECT tree, field, description FROM [
EXPLAIN (VERBOSE) SELECT * FROM foo JOIN bar ON foo.b = bar.b
]
----
·           distribution  local
·           vectorized    true
cross-join  ·             ·
 │          type          inner
 │          pred          b = b
 ├── scan   ·             ·
 │          table         foo@primary
 │          spans         FULL SCAN
 └── scan   ·             ·
·           table         bar@primary
·           spans         FULL SCAN

# Only a can be an equality column.
query TTT
SELECT tree, field, description FROM [
EXPLAIN (VERBOSE) SELECT * FROM foo JOIN bar ON foo.a = bar.a AND foo.b = bar.b
]
----
·          distribution  local
·          vectorized    true
hash-join  ·             ·
 │         type          inner
 │         equality      (a) = (a)
 │         pred          b = b
 ├── scan  ·             ·
 │         table         foo@primary
 │         spans         FULL SCAN
 └── scan  ·             ·
·          table         bar@primary
·          spans         FULL SCAN

query TTT
SELECT tree, field, description FROM [
EXPLAIN (VERBOSE) SELECT * FROM foo, bar WHERE foo.b = bar.b
]
----
·           distribution  local
·           vectorized    true
cross-join  ·             ·
 │          type          inner
 │          pred          b = b
 ├── scan   ·             ·
 │          table         foo@primary
 │          spans         FULL SCAN
 └── scan   ·             ·
·           table         bar@primary
·           spans         FULL SCAN

# Only a can be an equality column.
query TTT
SELECT tree, field, description FROM [
EXPLAIN (VERBOSE) SELECT * FROM foo, bar WHERE foo.a = bar.a AND foo.b = bar.b
]
----
·          distribution  local
·          vectorized    true
hash-join  ·             ·
 │         type          inner
 │         equality      (a) = (a)
 │         pred          b = b
 ├── scan  ·             ·
 │         table         foo@primary
 │         spans         FULL SCAN
 └── scan  ·             ·
·          table         bar@primary
·          spans         FULL SCAN

# Only a and c can be equality columns.
query TTT
EXPLAIN SELECT * FROM foo JOIN bar USING (a,b) WHERE foo.c = bar.c AND foo.d = bar.d
----
·               distribution  local
·               vectorized    true
render          ·             ·
 └── hash-join  ·             ·
      │         type          inner
      │         equality      (a, c) = (a, c)
      │         pred          (b = b) AND (d = d)
      ├── scan  ·             ·
      │         table         foo@primary
      │         spans         FULL SCAN
      └── scan  ·             ·
·               table         bar@primary
·               spans         FULL SCAN

# Zigzag join tests.
statement ok
CREATE TABLE zigzag (
  a INT PRIMARY KEY,
  b INT,
  c FLOAT,
  d FLOAT,
  INDEX b_idx(b),
  INDEX c_idx(c)
)

# No zigzag join should be planned if enable_zigzag_join is false.
statement ok
SET enable_zigzag_join = false

query TTT
EXPLAIN SELECT a,b,c FROM zigzag WHERE b = 5 AND c = 6.0
----
·                distribution  local
·                vectorized    true
filter           ·             ·
 │               filter        c = 6.0
 └── index-join  ·             ·
      │          table         zigzag@primary
      │          key columns   a
      └── scan   ·             ·
·                table         zigzag@b_idx
·                spans         /5-/6

# Enable zigzag joins.
statement ok
SET enable_zigzag_join = true

# Simple zigzag case - fixed columns, output cols from indexes only.
query TTT
EXPLAIN SELECT a,b,c FROM zigzag WHERE b = 5 AND c = 6.0
----
·            distribution  local
·            vectorized    true
zigzag-join  ·             ·
 │           type          inner
 │           pred          (@2 = 5) AND (@3 = 6.0)
 ├── scan    ·             ·
 │           table         zigzag@b_idx
 │           fixedvals     1 column
 └── scan    ·             ·
·            table         zigzag@c_idx
·            fixedvals     1 column


# Zigzag join nested inside a lookup.
query TTT
EXPLAIN SELECT a,b,c,d FROM zigzag WHERE b = 5 AND c = 6.0
----
·                 distribution           local
·                 vectorized             true
lookup-join       ·                      ·
 │                table                  zigzag@primary
 │                type                   inner
 │                equality               (a) = (a)
 │                equality cols are key  ·
 │                parallel               ·
 └── zigzag-join  ·                      ·
      │           type                   inner
      │           pred                   (@2 = 5) AND (@3 = 6.0)
      ├── scan    ·                      ·
      │           table                  zigzag@b_idx
      │           fixedvals              1 column
      └── scan    ·                      ·
·                 table                  zigzag@c_idx
·                 fixedvals              1 column

# Zigzag join nested inside a lookup, with an on condition on lookup join.
query TTT
EXPLAIN SELECT a,b,c,d FROM zigzag WHERE b = 5 AND c = 6.0 AND d > 4
----
·                 distribution           local
·                 vectorized             true
lookup-join       ·                      ·
 │                table                  zigzag@primary
 │                type                   inner
 │                equality               (a) = (a)
 │                equality cols are key  ·
 │                parallel               ·
 │                pred                   d > 4.0
 └── zigzag-join  ·                      ·
      │           type                   inner
      │           pred                   (@2 = 5) AND (@3 = 6.0)
      ├── scan    ·                      ·
      │           table                  zigzag@b_idx
      │           fixedvals              1 column
      └── scan    ·                      ·
·                 table                  zigzag@c_idx
·                 fixedvals              1 column


# Regression test for part of #34695.
statement ok
CREATE TABLE zigzag2 (
  a INT,
  b INT,
  c INT,
  d INT,
  UNIQUE INDEX a_b_idx(a, b),
  INDEX c_idx(c)
)

# Check a value which is equated to NULL.

query TTT
EXPLAIN SELECT * FROM zigzag2 WHERE a = 1 AND b = 2 AND c IS NULL
----
·                distribution  local
·                vectorized    true
filter           ·             ·
 │               filter        c IS NULL
 └── index-join  ·             ·
      │          table         zigzag2@primary
      │          key columns   rowid
      └── scan   ·             ·
·                table         zigzag2@a_b_idx
·                spans         /1/2-/1/3

# Test that we can force a merge join.
query TTT
EXPLAIN SELECT * FROM onecolumn INNER MERGE JOIN twocolumn USING(x)
----
·                    distribution    local
·                    vectorized      true
render               ·               ·
 └── merge-join      ·               ·
      │              type            inner
      │              equality        (x) = (x)
      │              mergeJoinOrder  +"(x=x)"
      ├── sort       ·               ·
      │    │         order           +x
      │    └── scan  ·               ·
      │              table           onecolumn@primary
      │              spans           FULL SCAN
      └── sort       ·               ·
           │         order           +x
           └── scan  ·               ·
·                    table           twocolumn@primary
·                    spans           FULL SCAN

# Test that we can force a merge join using the NATURAL syntax.
query TTT
EXPLAIN SELECT * FROM onecolumn NATURAL INNER MERGE JOIN twocolumn
----
·                    distribution    local
·                    vectorized      true
render               ·               ·
 └── merge-join      ·               ·
      │              type            inner
      │              equality        (x) = (x)
      │              mergeJoinOrder  +"(x=x)"
      ├── sort       ·               ·
      │    │         order           +x
      │    └── scan  ·               ·
      │              table           onecolumn@primary
      │              spans           FULL SCAN
      └── sort       ·               ·
           │         order           +x
           └── scan  ·               ·
·                    table           twocolumn@primary
·                    spans           FULL SCAN

# Test that we can force a merge join using the CROSS syntax.
query TTT
EXPLAIN SELECT * FROM onecolumn CROSS MERGE JOIN twocolumn WHERE onecolumn.x = twocolumn.x
----
·               distribution    local
·               vectorized      true
merge-join      ·               ·
 │              type            inner
 │              equality        (x) = (x)
 │              mergeJoinOrder  +"(x=x)"
 ├── sort       ·               ·
 │    │         order           +x
 │    └── scan  ·               ·
 │              table           onecolumn@primary
 │              spans           FULL SCAN
 └── sort       ·               ·
      │         order           +x
      └── scan  ·               ·
·               table           twocolumn@primary
·               spans           FULL SCAN

statement error LOOKUP can only be used with INNER or LEFT joins
EXPLAIN SELECT * FROM onecolumn RIGHT LOOKUP JOIN twocolumn USING(x)

statement error could not produce a query plan conforming to the LOOKUP JOIN hint
EXPLAIN SELECT * FROM onecolumn INNER LOOKUP JOIN twocolumn USING(x)

statement error could not produce a query plan conforming to the MERGE JOIN hint
EXPLAIN SELECT * FROM onecolumn INNER MERGE JOIN twocolumn ON onecolumn.x > twocolumn.y

# Test that we can force a hash join (instead of merge join).
query TTT
EXPLAIN SELECT * FROM cards LEFT OUTER HASH JOIN customers ON customers.id = cards.cust
----
·          distribution        local
·          vectorized          true
hash-join  ·                   ·
 │         type                inner
 │         equality            (cust) = (id)
 │         right cols are key  ·
 ├── scan  ·                   ·
 │         table               cards@primary
 │         spans               FULL SCAN
 └── scan  ·                   ·
·          table               customers@primary
·          spans               FULL SCAN
