# LogicTest: local

query TTT colnames
EXPLAIN (PLAN) SELECT 1 FROM system.jobs WHERE FALSE
----
tree    field        description
·       distributed  false
·       vectorized   false
norows  ·            ·

query TTT colnames
EXPLAIN (PLAN) SELECT 1 FROM system.jobs WHERE NULL
----
tree    field        description
·       distributed  false
·       vectorized   false
norows  ·            ·

query TTT colnames
EXPLAIN (PLAN) SELECT 1 FROM system.jobs WHERE TRUE
----
tree       field        description
·          distributed  false
·          vectorized   false
render     ·            ·
 └── scan  ·            ·
·          table        jobs@jobs_status_created_idx
·          spans        ALL

query TTTTT colnames
EXPLAIN (PLAN, VERBOSE) SELECT 1 a
----
tree    field          description      columns  ordering
·       distributed    false            ·        ·
·       vectorized     false            ·        ·
values  ·              ·                (a)      ·
·       size           1 column, 1 row  ·        ·
·       row 0, expr 0  1                ·        ·

query TTTTT colnames
EXPLAIN (VERBOSE,PLAN) SELECT 1 a
----
tree    field          description      columns  ordering
·       distributed    false            ·        ·
·       vectorized     false            ·        ·
values  ·              ·                (a)      ·
·       size           1 column, 1 row  ·        ·
·       row 0, expr 0  1                ·        ·


query TTTTT colnames
EXPLAIN (TYPES) SELECT 1 a
----
tree    field          description      columns  ordering
·       distributed    false            ·        ·
·       vectorized     false            ·        ·
values  ·              ·                (a int)  ·
·       size           1 column, 1 row  ·        ·
·       row 0, expr 0  (1)[int]         ·        ·

statement error cannot set EXPLAIN mode more than once
EXPLAIN (PLAN,PLAN) SELECT 1

statement error cannot set EXPLAIN mode more than once
EXPLAIN (PLAN,DISTSQL) SELECT 1

statement error unsupported EXPLAIN option
EXPLAIN (PLAN,UNKNOWN) SELECT 1

statement error could not determine data type of placeholder \$1
EXPLAIN (TYPES) SELECT $1

# TODO(radu): we don't support placeholders with no values.
#query TTTTT colnames
#EXPLAIN (TYPES) SELECT $1::INT AS a
#----
#Tree           Field     Description               Columns          Ordering
#render         ·         ·                         (a int)          a=CONST
# │             render 0  (($1)[string]::INT)[int]  ·                ·
# └── emptyrow  ·         ·                         ()               ·


# Ensure that all relevant statement types can be explained
query TTT
EXPLAIN CREATE DATABASE foo
----
·                distributed  false
·                vectorized   false
create database  ·            ·

query TTT
EXPLAIN CREATE TABLE foo (x INT)
----
·             distributed  false
·             vectorized   false
create table  ·            ·

statement ok
CREATE TABLE foo (x INT)

query TTT
EXPLAIN CREATE INDEX a ON foo(x)
----
·             distributed  false
·             vectorized   false
create index  ·            ·

statement ok
CREATE DATABASE foo

query TTT
EXPLAIN DROP DATABASE foo
----
·              distributed  false
·              vectorized   false
drop database  ·            ·

# explain SHOW JOBS - beware to test this before the CREATE INDEX
# below, otherwise the result becomes non-deterministic.
# Migrations with backfill will affect the number of rows.
query TTT
SELECT * FROM [EXPLAIN SHOW JOBS] WHERE field != 'size'
----
·                                  distributed  false
·                                  vectorized   false
render                             ·            ·
 └── sort                          ·            ·
      │                            order        -column17,-started
      └── render                   ·            ·
           └── filter              ·            ·
                │                  filter       ((job_type IS NULL) OR (job_type != 'AUTO CREATE STATS')) AND ((finished IS NULL) OR (finished > (now() - '12:00:00')))
                └── virtual table  ·            ·
·                                  source       ·

statement ok
CREATE INDEX a ON foo(x)

query TTT
EXPLAIN DROP INDEX foo@a
----
·           distributed  false
·           vectorized   false
drop index  ·            ·

query TTT
EXPLAIN ALTER TABLE foo ADD COLUMN y INT
----
·            distributed  false
·            vectorized   false
alter table  ·            ·

query TTT
SELECT tree, field, description FROM [EXPLAIN (VERBOSE) ALTER TABLE foo SPLIT AT VALUES (42)]
----
·            distributed    false
·            vectorized     false
split        ·              ·
 └── values  ·              ·
·            size           1 column, 1 row
·            row 0, expr 0  42

query TTT
EXPLAIN DROP TABLE foo
----
·           distributed  false
·           vectorized   false
drop table  ·            ·

query TTT
EXPLAIN SHOW DATABASES
----
·                             distributed  false
·                             vectorized   false
sort                          ·            ·
 │                            order        +database_name
 └── distinct                 ·            ·
      │                       distinct on  database_name
      └── render              ·            ·
           └── virtual table  ·            ·
·                             source       ·

query TTT
SELECT * FROM [EXPLAIN SHOW TABLES] WHERE field != 'size'
----
·                             distributed  false
·                             vectorized   false
sort                          ·            ·
 │                            order        +table_name
 └── render                   ·            ·
      └── filter              ·            ·
           │                  filter       table_schema = 'public'
           └── virtual table  ·            ·
·                             source       ·

query TTT
SELECT * FROM [EXPLAIN SHOW TABLES WITH COMMENT] WHERE field != 'size'
----
·                                  distributed  false
·                                  vectorized   false
render                             ·            ·
 └── hash-join                     ·            ·
      │                            type         left outer
      │                            equality     (oid) = (objoid)
      ├── hash-join                ·            ·
      │    │                       type         inner
      │    │                       equality     (relnamespace) = (oid)
      │    ├── filter              ·            ·
      │    │    │                  filter       relkind IN ('r', 'v')
      │    │    └── virtual table  ·            ·
      │    │                       source       ·
      │    └── filter              ·            ·
      │         │                  filter       nspname = 'public'
      │         └── virtual table  ·            ·
      │                            source       ·
      └── filter                   ·            ·
           │                       filter       objsubid = 0
           └── virtual table       ·            ·
·                                  source       ·

query TTT
SELECT * FROM [EXPLAIN SHOW DATABASE] WHERE field != 'size'
----
·                        distributed  false
·                        vectorized   false
render                   ·            ·
 └── filter              ·            ·
      │                  filter       variable = 'database'
      └── virtual table  ·            ·
·                        source       ·

query TTT
SELECT * FROM [EXPLAIN SHOW TIME ZONE] WHERE field != 'size'
----
·                        distributed  false
·                        vectorized   false
render                   ·            ·
 └── filter              ·            ·
      │                  filter       variable = 'timezone'
      └── virtual table  ·            ·
·                        source       ·

query TTT
SELECT * FROM [EXPLAIN SHOW DEFAULT_TRANSACTION_ISOLATION] WHERE field != 'size'
----
·                        distributed  false
·                        vectorized   false
render                   ·            ·
 └── filter              ·            ·
      │                  filter       variable = 'default_transaction_isolation'
      └── virtual table  ·            ·
·                        source       ·

query TTT
SELECT * FROM [EXPLAIN SHOW TRANSACTION ISOLATION LEVEL] WHERE field != 'size'
----
·                        distributed  false
·                        vectorized   false
render                   ·            ·
 └── filter              ·            ·
      │                  filter       variable = 'transaction_isolation'
      └── virtual table  ·            ·
·                        source       ·

query TTT
SELECT * FROM [EXPLAIN SHOW TRANSACTION PRIORITY] WHERE field != 'size'
----
·                        distributed  false
·                        vectorized   false
render                   ·            ·
 └── filter              ·            ·
      │                  filter       variable = 'transaction_priority'
      └── virtual table  ·            ·
·                        source       ·

query TTT
EXPLAIN SHOW COLUMNS FROM foo
----
·                                            distributed  false
·                                            vectorized   false
render                                       ·            ·
 └── group                                   ·            ·
      │                                      aggregate 0  column_name
      │                                      aggregate 1  ordinal_position
      │                                      aggregate 2  column_default
      │                                      aggregate 3  is_nullable
      │                                      aggregate 4  generation_expression
      │                                      aggregate 5  is_hidden
      │                                      aggregate 6  crdb_sql_type
      │                                      aggregate 7  array_agg(index_name)
      │                                      group by     column_name, ordinal_position, column_default, is_nullable, generation_expression, is_hidden, crdb_sql_type
      │                                      ordered      +ordinal_position
      └── render                             ·            ·
           └── sort                          ·            ·
                │                            order        +ordinal_position
                └── hash-join                ·            ·
                     │                       type         left outer
                     │                       equality     (column_name) = (column_name)
                     ├── filter              ·            ·
                     │    │                  filter       ((table_catalog = 'test') AND (table_schema = 'public')) AND (table_name = 'foo')
                     │    └── virtual table  ·            ·
                     │                       source       ·
                     └── filter              ·            ·
                          │                  filter       ((table_catalog = 'test') AND (table_schema = 'public')) AND (table_name = 'foo')
                          └── virtual table  ·            ·
·                                            source       ·

query TTT
SELECT * FROM [EXPLAIN SHOW GRANTS ON foo] WHERE field != 'size'
----
·                                  distributed  false
·                                  vectorized   false
render                             ·            ·
 └── sort                          ·            ·
      │                            order        +grantee,+privilege_type
      └── render                   ·            ·
           └── filter              ·            ·
                │                  filter       (table_catalog, table_schema, table_name) IN (('test', 'public', 'foo'),)
                └── virtual table  ·            ·
·                                  source       ·

query TTT
EXPLAIN SHOW INDEX FROM foo
----
·                        distributed  false
·                        vectorized   false
render                   ·            ·
 └── filter              ·            ·
      │                  filter       ((table_catalog = 'test') AND (table_schema = 'public')) AND (table_name = 'foo')
      └── virtual table  ·            ·
·                        source       ·

query TTT
EXPLAIN SHOW CONSTRAINTS FROM foo
----
·                                            distributed  false
·                                            vectorized   false
render                                       ·            ·
 └── sort                                    ·            ·
      │                                      order        +conname
      └── render                             ·            ·
           └── hash-join                     ·            ·
                │                            type         inner
                │                            equality     (conrelid) = (oid)
                ├── virtual table            ·            ·
                │                            source       ·
                └── hash-join                ·            ·
                     │                       type         inner
                     │                       equality     (oid) = (relnamespace)
                     ├── filter              ·            ·
                     │    │                  filter       nspname = 'public'
                     │    └── virtual table  ·            ·
                     │                       source       ·
                     └── filter              ·            ·
                          │                  filter       relname = 'foo'
                          └── virtual table  ·            ·
·                                            source       ·

query TTT
EXPLAIN SHOW USERS
----
·          distributed  false
·          vectorized   true
render     ·            ·
 └── scan  ·            ·
·          table        users@primary
·          spans        ALL
·          filter       "isRole" = false

# EXPLAIN selecting from a sequence.
statement ok
CREATE SEQUENCE select_test

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT * FROM select_test
----
tree             field        description  columns                           ordering
·                distributed  false        ·                                 ·
·                vectorized   false        ·                                 ·
sequence select  ·            ·            (last_value, log_cnt, is_called)  ·

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT @1 FROM select_test
----
tree                  field        description  columns                           ordering
·                     distributed  false        ·                                 ·
·                     vectorized   false        ·                                 ·
render                ·            ·            ("?column?")                      ·
 │                    render 0     last_value   ·                                 ·
 └── sequence select  ·            ·            (last_value, log_cnt, is_called)  ·

statement ok
CREATE TABLE t (
  k INT PRIMARY KEY,
  v INT
)

query TTT
EXPLAIN INSERT INTO t VALUES (1, 2)
----
·                 distributed  false
·                 vectorized   false
count             ·            ·
 └── insert       ·            ·
      │           into         t(k, v)
      │           strategy     inserter
      └── values  ·            ·
·                 size         2 columns, 1 row

query I
SELECT max(level) FROM [EXPLAIN (VERBOSE) INSERT INTO t VALUES (1, 2)]
----
2

statement ok
INSERT INTO t VALUES (1, 2)

query TTT
EXPLAIN SELECT * FROM t
----
·     distributed  false
·     vectorized   true
scan  ·            ·
·     table        t@primary
·     spans        ALL

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM t
----
·     distributed  false      ·       ·
·     vectorized   true       ·       ·
scan  ·            ·          (k, v)  ·
·     table        t@primary  ·       ·
·     spans        ALL        ·       ·

query TTT
EXPLAIN SELECT * FROM t WHERE k = 1 OR k = 3
----
·     distributed  false
·     vectorized   true
scan  ·            ·
·     table        t@primary
·     spans        /1-/1/# /3-/3/#
·     parallel     ·

statement ok
CREATE TABLE t2 (x INT PRIMARY KEY)

query TTT
EXPLAIN (PLAN) SELECT * FROM t INNER LOOKUP JOIN t2 ON t.k = t2.x
----
·            distributed            false
·            vectorized             true
lookup-join  ·                      ·
 │           table                  t2@primary
 │           type                   inner
 │           equality               (k) = (x)
 │           equality cols are key  ·
 │           parallel               ·
 └── scan    ·                      ·
·            table                  t@primary
·            spans                  ALL

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM t WHERE k % 2 = 0
----
·     distributed  false        ·       ·
·     vectorized   false        ·       ·
scan  ·            ·            (k, v)  ·
·     table        t@primary    ·       ·
·     spans        ALL          ·       ·
·     filter       (k % 2) = 0  ·       ·

query TTT
EXPLAIN VALUES (1, 2, 3), (4, 5, 6)
----
·       distributed  false
·       vectorized   false
values  ·            ·
·       size         3 columns, 2 rows

query TTT
EXPLAIN VALUES (1)
----
·       distributed  false
·       vectorized   false
values  ·            ·
·       size         1 column, 1 row

query TTT
SELECT tree, field, description FROM [EXPLAIN (VERBOSE) SELECT * FROM t WITH ORDINALITY LIMIT 1 OFFSET 1]
----
·                     distributed  false
·                     vectorized   true
limit                 ·            ·
 │                    offset       1
 └── limit            ·            ·
      │               count        2
      └── ordinality  ·            ·
           └── scan   ·            ·
·                     table        t@primary
·                     spans        ALL
·                     limit        2

query TTT
EXPLAIN SELECT DISTINCT v FROM t
----
·          distributed  false
·          vectorized   false
distinct   ·            ·
 │         distinct on  v
 └── scan  ·            ·
·          table        t@primary
·          spans        ALL

query TTT
SELECT tree, field, description FROM [EXPLAIN (VERBOSE) SELECT DISTINCT v FROM t LIMIT 1 OFFSET 1]
----
·                    distributed  false
·                    vectorized   false
limit                ·            ·
 │                   offset       1
 └── limit           ·            ·
      │              count        2
      └── distinct   ·            ·
           │         distinct on  v
           └── scan  ·            ·
·                    table        t@primary
·                    spans        ALL

statement ok
CREATE TABLE tc (a INT, b INT, INDEX c(a), FAMILY "primary" (a, b, rowid))

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM tc WHERE a = 10 ORDER BY b
----
·                distributed  false       ·                   ·
·                vectorized   false       ·                   ·
sort             ·            ·           (a, b)              +b
 │               order        +b          ·                   ·
 └── index-join  ·            ·           (a, b)              ·
      │          table        tc@primary  ·                   ·
      │          key columns  rowid       ·                   ·
      └── scan   ·            ·           (a, rowid[hidden])  ·
·                table        tc@c        ·                   ·
·                spans        /10-/11     ·                   ·

query TTTTT colnames
EXPLAIN (TYPES) INSERT INTO t VALUES (1, 2)
----
tree              field          description       columns                     ordering
·                 distributed    false             ·                           ·
·                 vectorized     false             ·                           ·
count             ·              ·                 ()                          ·
 └── insert       ·              ·                 ()                          ·
      │           into           t(k, v)           ·                           ·
      │           strategy       inserter          ·                           ·
      └── values  ·              ·                 (column1 int, column2 int)  ·
·                 size           2 columns, 1 row  ·                           ·
·                 row 0, expr 0  (1)[int]          ·                           ·
·                 row 0, expr 1  (2)[int]          ·                           ·

query TTTTT
EXPLAIN (TYPES) SELECT 42 AS a
----
·       distributed    false            ·        ·
·       vectorized     false            ·        ·
values  ·              ·                (a int)  ·
·       size           1 column, 1 row  ·        ·
·       row 0, expr 0  (42)[int]        ·        ·

query TTTTT
EXPLAIN (TYPES) SELECT * FROM t
----
·     distributed  false      ·               ·
·     vectorized   true       ·               ·
scan  ·            ·          (k int, v int)  ·
·     table        t@primary  ·               ·
·     spans        ALL        ·               ·

query TTTTT
EXPLAIN (TYPES,SYMVARS) SELECT k FROM t
----
·     distributed  false      ·        ·
·     vectorized   true       ·        ·
scan  ·            ·          (k int)  ·
·     table        t@primary  ·        ·
·     spans        ALL        ·        ·

query TTTTT
EXPLAIN (TYPES,VERBOSE) SELECT k FROM t
----
·     distributed  false      ·        ·
·     vectorized   true       ·        ·
scan  ·            ·          (k int)  ·
·     table        t@primary  ·        ·
·     spans        ALL        ·        ·

query TTTTT
EXPLAIN (TYPES) SELECT * FROM t WHERE v > 123
----
·     distributed  false                          ·               ·
·     vectorized   true                           ·               ·
scan  ·            ·                              (k int, v int)  ·
·     table        t@primary                      ·               ·
·     spans        ALL                            ·               ·
·     filter       ((v)[int] > (123)[int])[bool]  ·               ·

query TTTTT
EXPLAIN (TYPES) VALUES (1, 2, 3), (4, 5, 6)
----
·       distributed    false              ·                                        ·
·       vectorized     false              ·                                        ·
values  ·              ·                  (column1 int, column2 int, column3 int)  ·
·       size           3 columns, 2 rows  ·                                        ·
·       row 0, expr 0  (1)[int]           ·                                        ·
·       row 0, expr 1  (2)[int]           ·                                        ·
·       row 0, expr 2  (3)[int]           ·                                        ·
·       row 1, expr 0  (4)[int]           ·                                        ·
·       row 1, expr 1  (5)[int]           ·                                        ·
·       row 1, expr 2  (6)[int]           ·                                        ·

query TTTTT
EXPLAIN (TYPES) SELECT 2*count(k) as z, v FROM t WHERE v>123 GROUP BY v HAVING v<2 AND count(k)>1
----
·            distributed  false     ·               ·
·            vectorized   false     ·               ·
render       ·            ·         (z int, v int)  ·
 │           render 0     (z)[int]  ·               ·
 │           render 1     (v)[int]  ·               ·
 └── norows  ·            ·         (v int, z int)  ·

query TTTTT
EXPLAIN (TYPES) DELETE FROM t WHERE v > 1
----
·                    distributed  false                        ·               ·
·                    vectorized   false                        ·               ·
count                ·            ·                            ()              ·
 └── delete          ·            ·                            ()              ·
      │              from         t                            ·               ·
      │              strategy     deleter                      ·               ·
      └── render     ·            ·                            (k int)         ·
           │         render 0     (k)[int]                     ·               ·
           └── scan  ·            ·                            (k int, v int)  ·
·                    table        t@primary                    ·               ·
·                    spans        ALL                          ·               ·
·                    filter       ((v)[int] > (1)[int])[bool]  ·               ·

query TTTTT
EXPLAIN (TYPES) UPDATE t SET v = k + 1 WHERE v > 123
----
·                    distributed  false                          ·                            ·
·                    vectorized   false                          ·                            ·
count                ·            ·                              ()                           ·
 └── update          ·            ·                              ()                           ·
      │              table        t                              ·                            ·
      │              set          v                              ·                            ·
      │              strategy     updater                        ·                            ·
      └── render     ·            ·                              (k int, v int, column5 int)  ·
           │         render 0     (k)[int]                       ·                            ·
           │         render 1     (v)[int]                       ·                            ·
           │         render 2     ((k)[int] + (1)[int])[int]     ·                            ·
           └── scan  ·            ·                              (k int, v int)               ·
·                    table        t@primary                      ·                            ·
·                    spans        ALL                            ·                            ·
·                    filter       ((v)[int] > (123)[int])[bool]  ·                            ·

query TTTTT
EXPLAIN (TYPES) VALUES (1) UNION VALUES (2)
----
·            distributed    false            ·              ·
·            vectorized     false            ·              ·
union        ·              ·                (column1 int)  ·
 ├── values  ·              ·                (column1 int)  ·
 │           size           1 column, 1 row  ·              ·
 │           row 0, expr 0  (2)[int]         ·              ·
 └── values  ·              ·                (column1 int)  ·
·            size           1 column, 1 row  ·              ·
·            row 0, expr 0  (1)[int]         ·              ·

query TTTTT
EXPLAIN (TYPES) SELECT DISTINCT k FROM t
----
·     distributed  false      ·        ·
·     vectorized   true       ·        ·
scan  ·            ·          (k int)  ·
·     table        t@primary  ·        ·
·     spans        ALL        ·        ·

query TTTTT
EXPLAIN (TYPES) SELECT v FROM t ORDER BY v
----
·          distributed  false      ·        ·
·          vectorized   false      ·        ·
sort       ·            ·          (v int)  +v
 │         order        +v         ·        ·
 └── scan  ·            ·          (v int)  ·
·          table        t@primary  ·        ·
·          spans        ALL        ·        ·

query TTTTT
EXPLAIN (TYPES) SELECT v FROM t LIMIT 1
----
·     distributed  false      ·        ·
·     vectorized   true       ·        ·
scan  ·            ·          (v int)  ·
·     table        t@primary  ·        ·
·     spans        ALL        ·        ·
·     limit        1          ·        ·

statement ok
CREATE TABLE tt (x INT, y INT, INDEX a(x), INDEX b(y))

query TTTTT
EXPLAIN (TYPES) SELECT * FROM tt WHERE x < 10 AND y > 10
----
·     distributed  false                                                                      ·               ·
·     vectorized   true                                                                       ·               ·
scan  ·            ·                                                                          (x int, y int)  ·
·     table        tt@primary                                                                 ·               ·
·     spans        ALL                                                                        ·               ·
·     filter       ((((x)[int] < (10)[int])[bool]) AND (((y)[int] > (10)[int])[bool]))[bool]  ·               ·

# TODO(radu): we don't support placeholders with no values.
#query TTTTT
#EXPLAIN (TYPES) SELECT $1 + 2 AS a
#----
#render         ·         ·                            (a int)  a=CONST
# │             render 0  (($1)[int] + (2)[int])[int]  ·        ·
# └── emptyrow  ·         ·                            ()       ·

query TTTTT
EXPLAIN (TYPES) SELECT abs(2-3) AS a
----
·       distributed    false            ·        ·
·       vectorized     false            ·        ·
values  ·              ·                (a int)  ·
·       size           1 column, 1 row  ·        ·
·       row 0, expr 0  (1)[int]         ·        ·

# Check array subscripts (#13811)
query TTTTT
EXPLAIN (TYPES) SELECT x[1] FROM (SELECT ARRAY[1,2,3] AS x)
----
·       distributed    false            ·        ·
·       vectorized     false            ·        ·
values  ·              ·                (x int)  ·
·       size           1 column, 1 row  ·        ·
·       row 0, expr 0  (1)[int]         ·        ·

query T
EXPLAIN (OPT) SELECT 1 AS r
----
values
 └── (1,)

query T
EXPLAIN (OPT,VERBOSE) SELECT 1 AS r
----
values
 ├── columns: r:1
 ├── cardinality: [1 - 1]
 ├── stats: [rows=1]
 ├── cost: 0.02
 ├── key: ()
 ├── fd: ()-->(1)
 ├── prune: (1)
 └── (1,)

query T
EXPLAIN (OPT,TYPES) SELECT 1 AS r
----
values
 ├── columns: r:1(int!null)
 ├── cardinality: [1 - 1]
 ├── stats: [rows=1]
 ├── cost: 0.02
 ├── key: ()
 ├── fd: ()-->(1)
 ├── prune: (1)
 └── tuple [type=tuple{int}]
      └── const: 1 [type=int]

query T
EXPLAIN (OPT) SELECT * FROM tc WHERE a = 10 ORDER BY b
----
sort
 └── index-join tc
      └── scan tc@c
           └── constraint: /1/3: [/10 - /10]

query T
EXPLAIN (OPT,VERBOSE) SELECT * FROM tc WHERE a = 10 ORDER BY b
----
sort
 ├── columns: a:1 b:2
 ├── stats: [rows=10, distinct(1)=1, null(1)=0]
 ├── cost: 52.7943856
 ├── fd: ()-->(1)
 ├── ordering: +2 opt(1) [actual: +2]
 ├── prune: (2)
 ├── interesting orderings: (+1)
 └── index-join tc
      ├── columns: a:1 b:2
      ├── stats: [rows=10, distinct(1)=1, null(1)=0]
      ├── cost: 51.92
      ├── fd: ()-->(1)
      ├── prune: (2)
      ├── interesting orderings: (+1)
      └── scan tc@c
           ├── columns: a:1 rowid:3
           ├── constraint: /1/3: [/10 - /10]
           ├── stats: [rows=10, distinct(1)=1, null(1)=0]
           ├── cost: 10.81
           ├── key: (3)
           └── fd: ()-->(1)

query T
EXPLAIN (OPT,TYPES) SELECT * FROM tc WHERE a = 10 ORDER BY b
----
sort
 ├── columns: a:1(int!null) b:2(int)
 ├── stats: [rows=10, distinct(1)=1, null(1)=0]
 ├── cost: 52.7943856
 ├── fd: ()-->(1)
 ├── ordering: +2 opt(1) [actual: +2]
 ├── prune: (2)
 ├── interesting orderings: (+1)
 └── index-join tc
      ├── columns: a:1(int!null) b:2(int)
      ├── stats: [rows=10, distinct(1)=1, null(1)=0]
      ├── cost: 51.92
      ├── fd: ()-->(1)
      ├── prune: (2)
      ├── interesting orderings: (+1)
      └── scan tc@c
           ├── columns: a:1(int!null) rowid:3(int!null)
           ├── constraint: /1/3: [/10 - /10]
           ├── stats: [rows=10, distinct(1)=1, null(1)=0]
           ├── cost: 10.81
           ├── key: (3)
           └── fd: ()-->(1)

query T
EXPLAIN (OPT,CATALOG) SELECT * FROM tc WHERE a = 10 ORDER BY b
----
TABLE tc
 ├── a int
 ├── b int
 ├── rowid int not null default (unique_rowid()) [hidden]
 ├── INDEX primary
 │    └── rowid int not null default (unique_rowid()) [hidden]
 └── INDEX c
      ├── a int
      └── rowid int not null default (unique_rowid()) [hidden]
sort
 └── index-join tc
      └── scan tc@c
           └── constraint: /1/3: [/10 - /10]

query T
EXPLAIN (OPT,VERBOSE,CATALOG) SELECT * FROM tc JOIN t ON k=a
----
TABLE tc
 ├── a int
 ├── b int
 ├── rowid int not null default (unique_rowid()) [hidden]
 ├── INDEX primary
 │    └── rowid int not null default (unique_rowid()) [hidden]
 └── INDEX c
      ├── a int
      └── rowid int not null default (unique_rowid()) [hidden]
TABLE t
 ├── k int not null
 ├── v int
 └── INDEX primary
      └── k int not null
inner-join (hash)
 ├── columns: a:1 b:2 k:4 v:5
 ├── stats: [rows=990, distinct(1)=99, null(1)=0, distinct(4)=99, null(4)=0]
 ├── cost: 2219.95
 ├── fd: (4)-->(5), (1)==(4), (4)==(1)
 ├── prune: (2,5)
 ├── scan tc
 │    ├── columns: a:1 b:2
 │    ├── stats: [rows=1000, distinct(1)=100, null(1)=10]
 │    ├── cost: 1100.02
 │    ├── prune: (1,2)
 │    └── interesting orderings: (+1)
 ├── scan t
 │    ├── columns: k:4 v:5
 │    ├── stats: [rows=1000, distinct(4)=1000, null(4)=0]
 │    ├── cost: 1080.02
 │    ├── key: (4)
 │    ├── fd: (4)-->(5)
 │    ├── prune: (4,5)
 │    └── interesting orderings: (+4)
 └── filters
      └── k = a [outer=(1,4), constraints=(/1: (/NULL - ]; /4: (/NULL - ]), fd=(1)==(4), (4)==(1)]

query T
EXPLAIN (OPT) SELECT * FROM tc WHERE a + 2 * b > 1 ORDER BY a*b
----
sort
 └── project
      ├── select
      │    ├── scan tc
      │    └── filters
      │         └── (a + (b * 2)) > 1
      └── projections
           └── a * b

query T
EXPLAIN (OPT, VERBOSE) SELECT * FROM tc WHERE a + 2 * b > 1 ORDER BY a*b
----
sort
 ├── columns: a:1 b:2  [hidden: column4:4]
 ├── stats: [rows=333.333333]
 ├── cost: 1179.25548
 ├── fd: (1,2)-->(4)
 ├── ordering: +4
 ├── prune: (1,2,4)
 ├── interesting orderings: (+1)
 └── project
      ├── columns: column4:4 a:1 b:2
      ├── stats: [rows=333.333333]
      ├── cost: 1116.70667
      ├── fd: (1,2)-->(4)
      ├── prune: (1,2,4)
      ├── interesting orderings: (+1)
      ├── select
      │    ├── columns: a:1 b:2
      │    ├── stats: [rows=333.333333]
      │    ├── cost: 1110.03
      │    ├── interesting orderings: (+1)
      │    ├── scan tc
      │    │    ├── columns: a:1 b:2
      │    │    ├── stats: [rows=1000]
      │    │    ├── cost: 1100.02
      │    │    ├── prune: (1,2)
      │    │    └── interesting orderings: (+1)
      │    └── filters
      │         └── (a + (b * 2)) > 1 [outer=(1,2)]
      └── projections
           └── a * b [outer=(1,2)]

query T
EXPLAIN (OPT, TYPES) SELECT * FROM tc WHERE a + 2 * b > 1 ORDER BY a*b
----
sort
 ├── columns: a:1(int) b:2(int)  [hidden: column4:4(int)]
 ├── stats: [rows=333.333333]
 ├── cost: 1179.25548
 ├── fd: (1,2)-->(4)
 ├── ordering: +4
 ├── prune: (1,2,4)
 ├── interesting orderings: (+1)
 └── project
      ├── columns: column4:4(int) a:1(int) b:2(int)
      ├── stats: [rows=333.333333]
      ├── cost: 1116.70667
      ├── fd: (1,2)-->(4)
      ├── prune: (1,2,4)
      ├── interesting orderings: (+1)
      ├── select
      │    ├── columns: a:1(int) b:2(int)
      │    ├── stats: [rows=333.333333]
      │    ├── cost: 1110.03
      │    ├── interesting orderings: (+1)
      │    ├── scan tc
      │    │    ├── columns: a:1(int) b:2(int)
      │    │    ├── stats: [rows=1000]
      │    │    ├── cost: 1100.02
      │    │    ├── prune: (1,2)
      │    │    └── interesting orderings: (+1)
      │    └── filters
      │         └── gt [type=bool, outer=(1,2)]
      │              ├── plus [type=int]
      │              │    ├── variable: a [type=int]
      │              │    └── mult [type=int]
      │              │         ├── variable: b [type=int]
      │              │         └── const: 2 [type=int]
      │              └── const: 1 [type=int]
      └── projections
           └── mult [type=int, outer=(1,2)]
                ├── variable: a [type=int]
                └── variable: b [type=int]
