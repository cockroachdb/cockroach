# LogicTest: local

query TTT colnames
EXPLAIN (PLAN) SELECT 1 FROM system.jobs WHERE FALSE
----
tree    field         description
·       distribution  local
·       vectorized    true
norows  ·             ·

query TTT colnames
EXPLAIN (PLAN) SELECT 1 FROM system.jobs WHERE NULL
----
tree    field         description
·       distribution  local
·       vectorized    true
norows  ·             ·

query TTT colnames
EXPLAIN (PLAN) SELECT 1 FROM system.jobs WHERE TRUE
----
tree       field         description
·          distribution  local
·          vectorized    true
render     ·             ·
 └── scan  ·             ·
·          table         jobs@jobs_status_created_idx
·          spans         FULL SCAN

query TTTTT colnames
EXPLAIN (PLAN, VERBOSE) SELECT 1 a
----
tree    field          description      columns  ordering
·       distribution   local            ·        ·
·       vectorized     false            ·        ·
values  ·              ·                (a)      ·
·       size           1 column, 1 row  ·        ·
·       row 0, expr 0  1                ·        ·

query TTTTT colnames
EXPLAIN (VERBOSE,PLAN) SELECT 1 a
----
tree    field          description      columns  ordering
·       distribution   local            ·        ·
·       vectorized     false            ·        ·
values  ·              ·                (a)      ·
·       size           1 column, 1 row  ·        ·
·       row 0, expr 0  1                ·        ·


query TTTTT colnames
EXPLAIN (TYPES) SELECT 1 a
----
tree    field          description      columns  ordering
·       distribution   local            ·        ·
·       vectorized     false            ·        ·
values  ·              ·                (a int)  ·
·       size           1 column, 1 row  ·        ·
·       row 0, expr 0  (1)[int]         ·        ·

statement error cannot set EXPLAIN mode more than once
EXPLAIN (PLAN,PLAN) SELECT 1

statement error cannot set EXPLAIN mode more than once
EXPLAIN (PLAN,DISTSQL) SELECT 1

statement error unsupported EXPLAIN option
EXPLAIN (PLAN,UNKNOWN) SELECT 1

statement error could not determine data type of placeholder \$1
EXPLAIN (TYPES) SELECT $1

# TODO(radu): we don't support placeholders with no values.
#query TTTTT colnames
#EXPLAIN (TYPES) SELECT $1::INT AS a
#----
#Tree           Field     Description               Columns          Ordering
#render         ·         ·                         (a int)          a=CONST
# │             render 0  (($1)[string]::INT)[int]  ·                ·
# └── emptyrow  ·         ·                         ()               ·


# Ensure that all relevant statement types can be explained
query TTT
EXPLAIN CREATE DATABASE foo
----
·                distribution  local
·                vectorized    false
create database  ·             ·

query TTT
EXPLAIN CREATE TABLE foo (x INT)
----
·             distribution  local
·             vectorized    false
create table  ·             ·

statement ok
CREATE TABLE foo (x INT)

query TTT
EXPLAIN CREATE INDEX a ON foo(x)
----
·             distribution  local
·             vectorized    false
create index  ·             ·

statement ok
CREATE DATABASE foo

query TTT
EXPLAIN DROP DATABASE foo
----
·              distribution  local
·              vectorized    false
drop database  ·             ·

# explain SHOW JOBS - beware to test this before the CREATE INDEX
# below, otherwise the result becomes non-deterministic.
# Migrations with backfill will affect the number of rows.
query TTT
SELECT * FROM [EXPLAIN SHOW JOBS] WHERE field != 'size' AND field != 'filter'
----
·                                       distribution  local
·                                       vectorized    false
render                                  ·             ·
 └── sort                               ·             ·
      │                                 order         -column18,-started
      └── render                        ·             ·
           └── filter                   ·             ·
                └── render              ·             ·
                     └── virtual table  ·             ·
·                                       source        jobs@primary

statement ok
CREATE INDEX a ON foo(x)

query TTT
EXPLAIN DROP INDEX foo@a
----
·           distribution  local
·           vectorized    false
drop index  ·             ·

query TTT
EXPLAIN ALTER TABLE foo ADD COLUMN y INT
----
·            distribution  local
·            vectorized    false
alter table  ·             ·

query TTT
SELECT tree, field, description FROM [EXPLAIN (VERBOSE) ALTER TABLE foo SPLIT AT VALUES (42)]
----
·            distribution   local
·            vectorized     false
split        ·              ·
 └── values  ·              ·
·            size           1 column, 1 row
·            row 0, expr 0  42

query TTT
EXPLAIN DROP TABLE foo
----
·           distribution  local
·           vectorized    false
drop table  ·             ·

query TTT
EXPLAIN SHOW DATABASES
----
·                        distribution  local
·                        vectorized    false
sort                     ·             ·
 │                       order         +database_name
 └── render              ·             ·
      └── virtual table  ·             ·
·                        source        databases@primary

query TTT
SELECT * FROM [EXPLAIN SHOW TABLES] WHERE field != 'size'
----
·                                            distribution  local
·                                            vectorized    false
render                                       ·             ·
 └── sort                                    ·             ·
      │                                      order         +nspname,+relname
      └── render                             ·             ·
           └── hash-join                     ·             ·
                │                            type          inner
                │                            equality      (oid) = (relnamespace)
                ├── filter                   ·             ·
                │    │                       filter        nspname NOT IN ('crdb_internal', 'information_schema', 'pg_catalog', 'pg_extension')
                │    └── render              ·             ·
                │         └── virtual table  ·             ·
                │                            source        pg_namespace@primary
                └── filter                   ·             ·
                     │                       filter        relkind IN ('S', 'r', 'v')
                     └── render              ·             ·
                          └── virtual table  ·             ·
·                                            source        pg_class@primary

query TTT
SELECT * FROM [EXPLAIN SHOW TABLES WITH COMMENT] WHERE field != 'size'
----
·                                                 distribution  local
·                                                 vectorized    false
render                                            ·             ·
 └── sort                                         ·             ·
      │                                           order         +nspname,+relname
      └── render                                  ·             ·
           └── hash-join                          ·             ·
                │                                 type          left outer
                │                                 equality      (oid) = (objoid)
                ├── hash-join                     ·             ·
                │    │                            type          inner
                │    │                            equality      (oid) = (relnamespace)
                │    ├── filter                   ·             ·
                │    │    │                       filter        nspname NOT IN ('crdb_internal', 'information_schema', 'pg_catalog', 'pg_extension')
                │    │    └── render              ·             ·
                │    │         └── virtual table  ·             ·
                │    │                            source        pg_namespace@primary
                │    └── filter                   ·             ·
                │         │                       filter        relkind IN ('S', 'r', 'v')
                │         └── render              ·             ·
                │              └── virtual table  ·             ·
                │                                 source        pg_class@primary
                └── filter                        ·             ·
                     │                            filter        objsubid = 0
                     └── render                   ·             ·
                          └── virtual table       ·             ·
·                                                 source        pg_description@primary

query TTT
SELECT * FROM [EXPLAIN SHOW DATABASE] WHERE field != 'size'
----
·                             distribution  local
·                             vectorized    false
render                        ·             ·
 └── filter                   ·             ·
      │                       filter        variable = 'database'
      └── render              ·             ·
           └── virtual table  ·             ·
·                             source        session_variables@primary

query TTT
SELECT * FROM [EXPLAIN SHOW TIME ZONE] WHERE field != 'size'
----
·                             distribution  local
·                             vectorized    false
render                        ·             ·
 └── filter                   ·             ·
      │                       filter        variable = 'timezone'
      └── render              ·             ·
           └── virtual table  ·             ·
·                             source        session_variables@primary

query TTT
SELECT * FROM [EXPLAIN SHOW DEFAULT_TRANSACTION_ISOLATION] WHERE field != 'size'
----
·                             distribution  local
·                             vectorized    false
render                        ·             ·
 └── filter                   ·             ·
      │                       filter        variable = 'default_transaction_isolation'
      └── render              ·             ·
           └── virtual table  ·             ·
·                             source        session_variables@primary

query TTT
SELECT * FROM [EXPLAIN SHOW DEFAULT_TRANSACTION_PRIORITY] WHERE field != 'size'
----
·                             distribution  local
·                             vectorized    false
render                        ·             ·
 └── filter                   ·             ·
      │                       filter        variable = 'default_transaction_priority'
      └── render              ·             ·
           └── virtual table  ·             ·
·                             source        session_variables@primary

query TTT
SELECT * FROM [EXPLAIN SHOW TRANSACTION ISOLATION LEVEL] WHERE field != 'size'
----
·                             distribution  local
·                             vectorized    false
render                        ·             ·
 └── filter                   ·             ·
      │                       filter        variable = 'transaction_isolation'
      └── render              ·             ·
           └── virtual table  ·             ·
·                             source        session_variables@primary

query TTT
SELECT * FROM [EXPLAIN SHOW TRANSACTION PRIORITY] WHERE field != 'size'
----
·                             distribution  local
·                             vectorized    false
render                        ·             ·
 └── filter                   ·             ·
      │                       filter        variable = 'transaction_priority'
      └── render              ·             ·
           └── virtual table  ·             ·
·                             source        session_variables@primary

query TTT
EXPLAIN SHOW COLUMNS FROM foo
----
·                                                 distribution  local
·                                                 vectorized    false
render                                            ·             ·
 └── group                                        ·             ·
      │                                           aggregate 0   column_name
      │                                           aggregate 1   ordinal_position
      │                                           aggregate 2   column_default
      │                                           aggregate 3   is_nullable
      │                                           aggregate 4   generation_expression
      │                                           aggregate 5   is_hidden
      │                                           aggregate 6   crdb_sql_type
      │                                           aggregate 7   array_agg(index_name)
      │                                           group by      column_name, ordinal_position, column_default, is_nullable, generation_expression, is_hidden, crdb_sql_type
      │                                           ordered       +ordinal_position
      └── render                                  ·             ·
           └── sort                               ·             ·
                │                                 order         +ordinal_position
                └── hash-join                     ·             ·
                     │                            type          left outer
                     │                            equality      (column_name) = (column_name)
                     ├── filter                   ·             ·
                     │    │                       filter        ((table_catalog = 'test') AND (table_schema = 'public')) AND (table_name = 'foo')
                     │    └── render              ·             ·
                     │         └── virtual table  ·             ·
                     │                            source        columns@primary
                     └── filter                   ·             ·
                          │                       filter        ((table_catalog = 'test') AND (table_schema = 'public')) AND (table_name = 'foo')
                          └── render              ·             ·
                               └── virtual table  ·             ·
·                                                 source        statistics@primary

query TTT
SELECT * FROM [EXPLAIN SHOW GRANTS ON foo] WHERE field != 'size'
----
·                                  distribution  local
·                                  vectorized    false
render                             ·             ·
 └── sort                          ·             ·
      │                            order         +grantee,+privilege_type
      └── filter                   ·             ·
           │                       filter        (table_catalog, table_schema, table_name) IN (('test', 'public', 'foo'),)
           └── render              ·             ·
                └── virtual table  ·             ·
·                                  source        table_privileges@primary

query TTT
EXPLAIN SHOW INDEX FROM foo
----
·                             distribution  local
·                             vectorized    false
render                        ·             ·
 └── filter                   ·             ·
      │                       filter        ((table_catalog = 'test') AND (table_schema = 'public')) AND (table_name = 'foo')
      └── render              ·             ·
           └── virtual table  ·             ·
·                             source        statistics@primary

query TTT
EXPLAIN SHOW CONSTRAINTS FROM foo
----
·                                                 distribution  local
·                                                 vectorized    false
render                                            ·             ·
 └── sort                                         ·             ·
      │                                           order         +conname
      └── render                                  ·             ·
           └── hash-join                          ·             ·
                │                                 type          inner
                │                                 equality      (oid) = (relnamespace)
                ├── filter                        ·             ·
                │    │                            filter        nspname = 'public'
                │    └── render                   ·             ·
                │         └── virtual table       ·             ·
                │                                 source        pg_namespace@primary
                └── virtual-table-lookup-join     ·             ·
                     │                            table         pg_constraint@pg_constraint_conrelid_idx
                     │                            type          inner
                     │                            equality      (oid) = (conrelid)
                     └── filter                   ·             ·
                          │                       filter        relname = 'foo'
                          └── render              ·             ·
                               └── virtual table  ·             ·
·                                                 source        pg_class@primary

query TTT
EXPLAIN SHOW USERS
----
·                                                                  distribution       local
·                                                                  vectorized         true
render                                                             ·                  ·
 └── sort                                                          ·                  ·
      │                                                            order              +username
      └── render                                                   ·                  ·
           └── group                                               ·                  ·
                │                                                  aggregate 0        username
                │                                                  aggregate 1        array_agg(role)
                │                                                  aggregate 2        any_not_null(any_not_null)
                │                                                  aggregate 3        any_not_null(role)
                │                                                  group by           username
                └── render                                         ·                  ·
                     └── sort                                      ·                  ·
                          │                                        order              +role
                          └── hash-join                            ·                  ·
                               │                                   type               left outer
                               │                                   equality           (username) = (member)
                               │                                   left cols are key  ·
                               ├── group                           ·                  ·
                               │    │                              aggregate 0        username
                               │    │                              aggregate 1        any_not_null(string_agg)
                               │    │                              group by           username
                               │    └── render                     ·                  ·
                               │         └── window                ·                  ·
                               │              └── render           ·                  ·
                               │                   └── merge-join  ·                  ·
                               │                        │          type               left outer
                               │                        │          equality           (username) = (username)
                               │                        │          left cols are key  ·
                               │                        │          mergeJoinOrder     +"(username=username)"
                               │                        ├── scan   ·                  ·
                               │                        │          table              users@primary
                               │                        │          spans              FULL SCAN
                               │                        └── scan   ·                  ·
                               │                                   table              role_options@primary
                               │                                   spans              FULL SCAN
                               └── scan                            ·                  ·
·                                                                  table              role_members@role_members_role_idx
·                                                                  spans              FULL SCAN

# EXPLAIN selecting from a sequence.
statement ok
CREATE SEQUENCE select_test

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT * FROM select_test
----
tree             field         description  columns                           ordering
·                distribution  local        ·                                 ·
·                vectorized    false        ·                                 ·
sequence select  ·             ·            (last_value, log_cnt, is_called)  ·

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT @1 FROM select_test
----
tree                  field         description  columns                           ordering
·                     distribution  local        ·                                 ·
·                     vectorized    false        ·                                 ·
render                ·             ·            ("?column?")                      ·
 │                    render 0      last_value   ·                                 ·
 └── sequence select  ·             ·            (last_value, log_cnt, is_called)  ·

statement ok
CREATE TABLE t (
  k INT PRIMARY KEY,
  v INT,
  FAMILY "primary" (k, v)
)

query TTT
EXPLAIN INSERT INTO t VALUES (1, 2)
----
·                      distribution  local
·                      vectorized    false
count                  ·             ·
 └── insert-fast-path  ·             ·
·                      into          t(k, v)
·                      strategy      inserter
·                      auto commit   ·
·                      size          2 columns, 1 row

query I
SELECT max(level) FROM [EXPLAIN (VERBOSE) INSERT INTO t VALUES (1, 2)]
----
1

statement ok
INSERT INTO t VALUES (1, 2)

query TTT
EXPLAIN SELECT * FROM t
----
·     distribution  local
·     vectorized    true
scan  ·             ·
·     table         t@primary
·     spans         FULL SCAN

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM t
----
·     distribution  local      ·       ·
·     vectorized    true       ·       ·
scan  ·             ·          (k, v)  ·
·     table         t@primary  ·       ·
·     spans         FULL SCAN  ·       ·

query TTT
EXPLAIN SELECT * FROM t WHERE k = 1 OR k = 3
----
·     distribution  local
·     vectorized    true
scan  ·             ·
·     table         t@primary
·     spans         /1-/1/# /3-/3/#
·     parallel      ·

statement ok
CREATE TABLE t2 (x INT PRIMARY KEY)

query TTT
EXPLAIN (PLAN) SELECT * FROM t INNER LOOKUP JOIN t2 ON t.k = t2.x
----
·            distribution           local
·            vectorized             true
lookup-join  ·                      ·
 │           table                  t2@primary
 │           type                   inner
 │           equality               (k) = (x)
 │           equality cols are key  ·
 │           parallel               ·
 └── scan    ·                      ·
·            table                  t@primary
·            spans                  FULL SCAN

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM t WHERE k % 2 = 0
----
·     distribution  local        ·       ·
·     vectorized    true         ·       ·
scan  ·             ·            (k, v)  ·
·     table         t@primary    ·       ·
·     spans         FULL SCAN    ·       ·
·     filter        (k % 2) = 0  ·       ·

query TTT
EXPLAIN VALUES (1, 2, 3), (4, 5, 6)
----
·       distribution  local
·       vectorized    false
values  ·             ·
·       size          3 columns, 2 rows

query TTT
EXPLAIN VALUES (1)
----
·       distribution  local
·       vectorized    false
values  ·             ·
·       size          1 column, 1 row

query TTT
SELECT tree, field, description FROM [EXPLAIN (VERBOSE) SELECT * FROM t WITH ORDINALITY LIMIT 1 OFFSET 1]
----
·                distribution  local
·                vectorized    true
limit            ·             ·
 │               offset        1
 └── ordinality  ·             ·
      └── scan   ·             ·
·                table         t@primary
·                spans         LIMITED SCAN
·                limit         2

query TTT
EXPLAIN SELECT DISTINCT v FROM t
----
·          distribution  local
·          vectorized    true
distinct   ·             ·
 │         distinct on   v
 └── scan  ·             ·
·          table         t@primary
·          spans         FULL SCAN

query TTT
SELECT tree, field, description FROM [EXPLAIN (VERBOSE) SELECT DISTINCT v FROM t LIMIT 1 OFFSET 1]
----
·                    distribution  local
·                    vectorized    true
limit                ·             ·
 │                   offset        1
 └── limit           ·             ·
      │              count         2
      └── distinct   ·             ·
           │         distinct on   v
           └── scan  ·             ·
·                    table         t@primary
·                    spans         FULL SCAN

statement ok
CREATE TABLE tc (a INT, b INT, INDEX c(a), FAMILY "primary" (a, b, rowid))

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM tc WHERE a = 10 ORDER BY b
----
·                distribution  local       ·                   ·
·                vectorized    true        ·                   ·
sort             ·             ·           (a, b)              +b
 │               order         +b          ·                   ·
 └── index-join  ·             ·           (a, b)              ·
      │          table         tc@primary  ·                   ·
      │          key columns   rowid       ·                   ·
      └── scan   ·             ·           (a, rowid[hidden])  ·
·                table         tc@c        ·                   ·
·                spans         /10-/11     ·                   ·

query TTTTT colnames
EXPLAIN (TYPES) INSERT INTO t VALUES (1, 2)
----
tree                   field          description       columns  ordering
·                      distribution   local             ·        ·
·                      vectorized     false             ·        ·
count                  ·              ·                 ()       ·
 └── insert-fast-path  ·              ·                 ()       ·
·                      into           t(k, v)           ·        ·
·                      strategy       inserter          ·        ·
·                      auto commit    ·                 ·        ·
·                      size           2 columns, 1 row  ·        ·
·                      row 0, expr 0  (1)[int]          ·        ·
·                      row 0, expr 1  (2)[int]          ·        ·

query TTTTT
EXPLAIN (TYPES) SELECT 42 AS a
----
·       distribution   local            ·        ·
·       vectorized     false            ·        ·
values  ·              ·                (a int)  ·
·       size           1 column, 1 row  ·        ·
·       row 0, expr 0  (42)[int]        ·        ·

query TTTTT
EXPLAIN (TYPES) SELECT * FROM t
----
·     distribution  local      ·               ·
·     vectorized    true       ·               ·
scan  ·             ·          (k int, v int)  ·
·     table         t@primary  ·               ·
·     spans         FULL SCAN  ·               ·

query TTTTT
EXPLAIN (TYPES,SYMVARS) SELECT k FROM t
----
·     distribution  local      ·        ·
·     vectorized    true       ·        ·
scan  ·             ·          (k int)  ·
·     table         t@primary  ·        ·
·     spans         FULL SCAN  ·        ·

query TTTTT
EXPLAIN (TYPES,VERBOSE) SELECT k FROM t
----
·     distribution  local      ·        ·
·     vectorized    true       ·        ·
scan  ·             ·          (k int)  ·
·     table         t@primary  ·        ·
·     spans         FULL SCAN  ·        ·

query TTTTT
EXPLAIN (TYPES) SELECT * FROM t WHERE v > 123
----
·     distribution  local                          ·               ·
·     vectorized    true                           ·               ·
scan  ·             ·                              (k int, v int)  ·
·     table         t@primary                      ·               ·
·     spans         FULL SCAN                      ·               ·
·     filter        ((v)[int] > (123)[int])[bool]  ·               ·

query TTTTT
EXPLAIN (TYPES) VALUES (1, 2, 3), (4, 5, 6)
----
·       distribution   local              ·                                        ·
·       vectorized     false              ·                                        ·
values  ·              ·                  (column1 int, column2 int, column3 int)  ·
·       size           3 columns, 2 rows  ·                                        ·
·       row 0, expr 0  (1)[int]           ·                                        ·
·       row 0, expr 1  (2)[int]           ·                                        ·
·       row 0, expr 2  (3)[int]           ·                                        ·
·       row 1, expr 0  (4)[int]           ·                                        ·
·       row 1, expr 1  (5)[int]           ·                                        ·
·       row 1, expr 2  (6)[int]           ·                                        ·

query TTTTT
EXPLAIN (TYPES) SELECT 2*count(k) as z, v FROM t WHERE v>123 GROUP BY v HAVING v<2 AND count(k)>1
----
·            distribution  local     ·               ·
·            vectorized    true      ·               ·
render       ·             ·         (z int, v int)  ·
 │           render 0      (z)[int]  ·               ·
 │           render 1      (v)[int]  ·               ·
 └── norows  ·             ·         (v int, z int)  ·

query TTTTT
EXPLAIN (TYPES) DELETE FROM t WHERE v > 1
----
·                    distribution  local                        ·               ·
·                    vectorized    false                        ·               ·
count                ·             ·                            ()              ·
 └── delete          ·             ·                            ()              ·
      │              from          t                            ·               ·
      │              strategy      deleter                      ·               ·
      │              auto commit   ·                            ·               ·
      └── render     ·             ·                            (k int)         ·
           │         render 0      (k)[int]                     ·               ·
           └── scan  ·             ·                            (k int, v int)  ·
·                    table         t@primary                    ·               ·
·                    spans         FULL SCAN                    ·               ·
·                    filter        ((v)[int] > (1)[int])[bool]  ·               ·

query TTTTT
EXPLAIN (TYPES) UPDATE t SET v = k + 1 WHERE v > 123
----
·                    distribution  local                          ·                          ·
·                    vectorized    false                          ·                          ·
count                ·             ·                              ()                         ·
 └── update          ·             ·                              ()                         ·
      │              table         t                              ·                          ·
      │              set           v                              ·                          ·
      │              strategy      updater                        ·                          ·
      │              auto commit   ·                              ·                          ·
      └── render     ·             ·                              (k int, v int, v_new int)  ·
           │         render 0      (k)[int]                       ·                          ·
           │         render 1      (v)[int]                       ·                          ·
           │         render 2      ((k)[int] + (1)[int])[int]     ·                          ·
           └── scan  ·             ·                              (k int, v int)             ·
·                    table         t@primary                      ·                          ·
·                    spans         FULL SCAN                      ·                          ·
·                    filter        ((v)[int] > (123)[int])[bool]  ·                          ·

query TTTTT
EXPLAIN (TYPES) VALUES (1) UNION VALUES (2)
----
·            distribution   local            ·              ·
·            vectorized     false            ·              ·
union        ·              ·                (column1 int)  ·
 ├── values  ·              ·                (column1 int)  ·
 │           size           1 column, 1 row  ·              ·
 │           row 0, expr 0  (2)[int]         ·              ·
 └── values  ·              ·                (column1 int)  ·
·            size           1 column, 1 row  ·              ·
·            row 0, expr 0  (1)[int]         ·              ·

query TTTTT
EXPLAIN (TYPES) SELECT DISTINCT k FROM t
----
·     distribution  local      ·        ·
·     vectorized    true       ·        ·
scan  ·             ·          (k int)  ·
·     table         t@primary  ·        ·
·     spans         FULL SCAN  ·        ·

query TTTTT
EXPLAIN (TYPES) SELECT v FROM t ORDER BY v
----
·          distribution  local      ·        ·
·          vectorized    true       ·        ·
sort       ·             ·          (v int)  +v
 │         order         +v         ·        ·
 └── scan  ·             ·          (v int)  ·
·          table         t@primary  ·        ·
·          spans         FULL SCAN  ·        ·

query TTTTT
EXPLAIN (TYPES) SELECT v FROM t LIMIT 1
----
·     distribution  local         ·        ·
·     vectorized    true          ·        ·
scan  ·             ·             (v int)  ·
·     table         t@primary     ·        ·
·     spans         LIMITED SCAN  ·        ·
·     limit         1             ·        ·

statement ok
CREATE TABLE tt (x INT, y INT, INDEX a(x), INDEX b(y))

query TTTTT
EXPLAIN (TYPES) SELECT * FROM tt WHERE x < 10 AND y > 10
----
·     distribution  local                                                                      ·               ·
·     vectorized    true                                                                       ·               ·
scan  ·             ·                                                                          (x int, y int)  ·
·     table         tt@primary                                                                 ·               ·
·     spans         FULL SCAN                                                                  ·               ·
·     filter        ((((x)[int] < (10)[int])[bool]) AND (((y)[int] > (10)[int])[bool]))[bool]  ·               ·

# TODO(radu): we don't support placeholders with no values.
#query TTTTT
#EXPLAIN (TYPES) SELECT $1 + 2 AS a
#----
#render         ·         ·                            (a int)  a=CONST
# │             render 0  (($1)[int] + (2)[int])[int]  ·        ·
# └── emptyrow  ·         ·                            ()       ·

query TTTTT
EXPLAIN (TYPES) SELECT abs(2-3) AS a
----
·       distribution   local            ·        ·
·       vectorized     false            ·        ·
values  ·              ·                (a int)  ·
·       size           1 column, 1 row  ·        ·
·       row 0, expr 0  (1)[int]         ·        ·

# Check array subscripts (#13811)
query TTTTT
EXPLAIN (TYPES) SELECT x[1] FROM (SELECT ARRAY[1,2,3] AS x)
----
·       distribution   local            ·        ·
·       vectorized     false            ·        ·
values  ·              ·                (x int)  ·
·       size           1 column, 1 row  ·        ·
·       row 0, expr 0  (1)[int]         ·        ·

query T
EXPLAIN (OPT) SELECT 1 AS r
----
values
 └── (1,)

query T
EXPLAIN (OPT,VERBOSE) SELECT 1 AS r
----
values
 ├── columns: r:1
 ├── cardinality: [1 - 1]
 ├── stats: [rows=1]
 ├── cost: 0.02
 ├── key: ()
 ├── fd: ()-->(1)
 ├── prune: (1)
 └── (1,)

query T
EXPLAIN (OPT,TYPES) SELECT 1 AS r
----
values
 ├── columns: r:1(int!null)
 ├── cardinality: [1 - 1]
 ├── stats: [rows=1]
 ├── cost: 0.02
 ├── key: ()
 ├── fd: ()-->(1)
 ├── prune: (1)
 └── tuple [type=tuple{int}]
      └── const: 1 [type=int]

query T
EXPLAIN (OPT) SELECT * FROM tc WHERE a = 10 ORDER BY b
----
sort
 └── index-join tc
      └── scan tc@c
           └── constraint: /1/3: [/10 - /10]

query T
EXPLAIN (OPT,VERBOSE) SELECT * FROM tc WHERE a = 10 ORDER BY b
----
sort
 ├── columns: a:1 b:2
 ├── stats: [rows=10, distinct(1)=1, null(1)=0]
 ├── cost: 52.7943856
 ├── fd: ()-->(1)
 ├── ordering: +2 opt(1) [actual: +2]
 ├── prune: (2)
 ├── interesting orderings: (+1)
 └── index-join tc
      ├── columns: a:1 b:2
      ├── stats: [rows=10, distinct(1)=1, null(1)=0]
      ├── cost: 51.92
      ├── fd: ()-->(1)
      ├── prune: (2)
      ├── interesting orderings: (+1)
      └── scan tc@c
           ├── columns: a:1 rowid:3
           ├── constraint: /1/3: [/10 - /10]
           ├── stats: [rows=10, distinct(1)=1, null(1)=0]
           ├── cost: 10.81
           ├── key: (3)
           └── fd: ()-->(1)

query T
EXPLAIN (OPT,TYPES) SELECT * FROM tc WHERE a = 10 ORDER BY b
----
sort
 ├── columns: a:1(int!null) b:2(int)
 ├── stats: [rows=10, distinct(1)=1, null(1)=0]
 ├── cost: 52.7943856
 ├── fd: ()-->(1)
 ├── ordering: +2 opt(1) [actual: +2]
 ├── prune: (2)
 ├── interesting orderings: (+1)
 └── index-join tc
      ├── columns: a:1(int!null) b:2(int)
      ├── stats: [rows=10, distinct(1)=1, null(1)=0]
      ├── cost: 51.92
      ├── fd: ()-->(1)
      ├── prune: (2)
      ├── interesting orderings: (+1)
      └── scan tc@c
           ├── columns: a:1(int!null) rowid:3(int!null)
           ├── constraint: /1/3: [/10 - /10]
           ├── stats: [rows=10, distinct(1)=1, null(1)=0]
           ├── cost: 10.81
           ├── key: (3)
           └── fd: ()-->(1)

query T
EXPLAIN (OPT,CATALOG) SELECT * FROM tc WHERE a = 10 ORDER BY b
----
TABLE tc
 ├── a int
 ├── b int
 ├── rowid int not null default (unique_rowid()) [hidden]
 ├── INDEX primary
 │    └── rowid int not null default (unique_rowid()) [hidden]
 └── INDEX c
      ├── a int
      └── rowid int not null default (unique_rowid()) [hidden]
sort
 └── index-join tc
      └── scan tc@c
           └── constraint: /1/3: [/10 - /10]

query T
EXPLAIN (OPT,VERBOSE,CATALOG) SELECT * FROM tc JOIN t ON k=a
----
TABLE tc
 ├── a int
 ├── b int
 ├── rowid int not null default (unique_rowid()) [hidden]
 ├── INDEX primary
 │    └── rowid int not null default (unique_rowid()) [hidden]
 └── INDEX c
      ├── a int
      └── rowid int not null default (unique_rowid()) [hidden]
TABLE t
 ├── k int not null
 ├── v int
 └── INDEX primary
      └── k int not null
inner-join (hash)
 ├── columns: a:1 b:2 k:4 v:5
 ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 ├── stats: [rows=990, distinct(1)=99, null(1)=0, distinct(4)=99, null(4)=0]
 ├── cost: 2219.95
 ├── fd: (4)-->(5), (1)==(4), (4)==(1)
 ├── prune: (2,5)
 ├── scan tc
 │    ├── columns: a:1 b:2
 │    ├── stats: [rows=1000, distinct(1)=100, null(1)=10]
 │    ├── cost: 1100.02
 │    ├── prune: (1,2)
 │    ├── interesting orderings: (+1)
 │    └── unfiltered-cols: (1-3)
 ├── scan t
 │    ├── columns: k:4 v:5
 │    ├── stats: [rows=1000, distinct(4)=1000, null(4)=0]
 │    ├── cost: 1080.02
 │    ├── key: (4)
 │    ├── fd: (4)-->(5)
 │    ├── prune: (4,5)
 │    ├── interesting orderings: (+4)
 │    └── unfiltered-cols: (4,5)
 └── filters
      └── k:4 = a:1 [outer=(1,4), constraints=(/1: (/NULL - ]; /4: (/NULL - ]), fd=(1)==(4), (4)==(1)]

query T
EXPLAIN (OPT) SELECT * FROM tc WHERE a + 2 * b > 1 ORDER BY a*b
----
sort
 └── project
      ├── select
      │    ├── scan tc
      │    └── filters
      │         └── (a + (b * 2)) > 1
      └── projections
           └── a * b

query T
EXPLAIN (OPT, VERBOSE) SELECT * FROM tc WHERE a + 2 * b > 1 ORDER BY a*b
----
sort
 ├── columns: a:1 b:2  [hidden: column4:4]
 ├── immutable
 ├── stats: [rows=333.333333]
 ├── cost: 1179.25548
 ├── fd: (1,2)-->(4)
 ├── ordering: +4
 ├── prune: (1,2,4)
 ├── interesting orderings: (+1)
 └── project
      ├── columns: column4:4 a:1 b:2
      ├── immutable
      ├── stats: [rows=333.333333]
      ├── cost: 1116.70667
      ├── fd: (1,2)-->(4)
      ├── prune: (1,2,4)
      ├── interesting orderings: (+1)
      ├── select
      │    ├── columns: a:1 b:2
      │    ├── immutable
      │    ├── stats: [rows=333.333333]
      │    ├── cost: 1110.03
      │    ├── interesting orderings: (+1)
      │    ├── scan tc
      │    │    ├── columns: a:1 b:2
      │    │    ├── stats: [rows=1000]
      │    │    ├── cost: 1100.02
      │    │    ├── prune: (1,2)
      │    │    └── interesting orderings: (+1)
      │    └── filters
      │         └── (a:1 + (b:2 * 2)) > 1 [outer=(1,2), immutable]
      └── projections
           └── a:1 * b:2 [as=column4:4, outer=(1,2), immutable]

query T
EXPLAIN (OPT, TYPES) SELECT * FROM tc WHERE a + 2 * b > 1 ORDER BY a*b
----
sort
 ├── columns: a:1(int) b:2(int)  [hidden: column4:4(int)]
 ├── immutable
 ├── stats: [rows=333.333333]
 ├── cost: 1179.25548
 ├── fd: (1,2)-->(4)
 ├── ordering: +4
 ├── prune: (1,2,4)
 ├── interesting orderings: (+1)
 └── project
      ├── columns: column4:4(int) a:1(int) b:2(int)
      ├── immutable
      ├── stats: [rows=333.333333]
      ├── cost: 1116.70667
      ├── fd: (1,2)-->(4)
      ├── prune: (1,2,4)
      ├── interesting orderings: (+1)
      ├── select
      │    ├── columns: a:1(int) b:2(int)
      │    ├── immutable
      │    ├── stats: [rows=333.333333]
      │    ├── cost: 1110.03
      │    ├── interesting orderings: (+1)
      │    ├── scan tc
      │    │    ├── columns: a:1(int) b:2(int)
      │    │    ├── stats: [rows=1000]
      │    │    ├── cost: 1100.02
      │    │    ├── prune: (1,2)
      │    │    └── interesting orderings: (+1)
      │    └── filters
      │         └── gt [type=bool, outer=(1,2), immutable]
      │              ├── plus [type=int]
      │              │    ├── variable: a:1 [type=int]
      │              │    └── mult [type=int]
      │              │         ├── variable: b:2 [type=int]
      │              │         └── const: 2 [type=int]
      │              └── const: 1 [type=int]
      └── projections
           └── mult [as=column4:4, type=int, outer=(1,2), immutable]
                ├── variable: a:1 [type=int]
                └── variable: b:2 [type=int]

query TTT colnames
EXPLAIN SELECT string_agg(x, y) FROM (VALUES ('foo', 'foo'), ('bar', 'bar')) t(x, y)
----
tree         field         description
·            distribution  local
·            vectorized    false
group        ·             ·
 │           aggregate 0   string_agg(column1, column2)
 │           scalar        ·
 └── values  ·             ·
·            size          2 columns, 2 rows

query TTT
EXPLAIN SELECT corr(a, b) FROM tc;
----
·          distribution  local
·          vectorized    true
group      ·             ·
 │         aggregate 0   corr(a, b)
 │         scalar        ·
 └── scan  ·             ·
·          table         tc@primary
·          spans         FULL SCAN
