# LogicTest: local

# SRID of the geometry column is unspecified, so default index bounds are used.
statement ok
CREATE TABLE geo_table(
  k int primary key,
  geom geometry,
  INVERTED INDEX geom_index(geom)
)

# Shapes with SRID 26918. We've taken small X, Y values and added 400,000 to the X coordinate
# and 4,000,000 to the Y coordinate to place them inside the bounds of SRID 26918.
statement ok
INSERT INTO geo_table VALUES
  (1, 'SRID=26918;POINT(400001 4000001)'),
  (2, 'SRID=26918;LINESTRING(400001 4000001, 400002 4000002)'),
  (3, 'SRID=26918;POINT(400003 4000003)'),
  (4, 'SRID=26918;LINESTRING(400004 4000004, 400005 4000005)'),
  (5, 'SRID=26918;LINESTRING(400040 4000040, 400041 4000041)'),
  (6, 'SRID=26918;POLYGON((400001 4000001, 400005 4000001, 400005 4000005, 400001 4000005, 400001 4000001))')

query T
EXPLAIN ANALYZE (DISTSQL) SELECT k FROM geo_table WHERE ST_Intersects('SRID=26918;POINT(400003 4000003)'::geometry, geom) ORDER BY k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 6 (48 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• sort
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 2
│ order: +k
│
└── • filter
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 2
    │ filter: st_intersects('010100002026690000000000000C6A18410000008081844E41', geom)
    │
    └── • index join
        │ nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 2
        │ KV time: 0µs
        │ KV contention time: 0µs
        │ KV rows read: 2
        │ KV bytes read: 16 B
        │ table: geo_table@primary
        │
        └── • inverted filter
            │ nodes: <hidden>
            │ regions: <hidden>
            │ actual row count: 2
            │ inverted column: geom_inverted_key
            │ num spans: 31
            │
            └── • scan
                  nodes: <hidden>
                  regions: <hidden>
                  actual row count: 4
                  KV time: 0µs
                  KV contention time: 0µs
                  KV rows read: 4
                  KV bytes read: 32 B
                  missing stats
                  table: geo_table@geom_index
                  spans: 31 spans
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzMVe9u2zYQ_76nONyXxJgGk5LiuRwGeHHVzdtSF7LRoZiMgJFurmCJVEl6UxD4sfYCe7JBUtLFNazWy5f4A4378zvf_X5H-g7thwIFLqJfo-kSNvAqnl_BmvS1kzcFwW8_RXEE1l3nypGxlDp7fraIZy-_90cv-Pi7N_PZ6-V5yBhjAbRfLBicCfFjNL-KlvE7r6lVDmAev4xiuHwHG_RQ6Yxey5Isit-R48rDyuiUrNWmcd21CbOsRsE8zFW1dY175WGqDaG4Q5e7glDgsukxJpmRGTL0MCMn86It-3GESdPAda4yqtHDRSWVFTBM8DJJ6j-yJKk5S5Kafe7Ab07F8ARBqgwCBtq9J2PRw1_egstLEsD--fveTrVypFyu1UHI6L8sGJKZgLDz3Nw6enAFPlyih1dvp1OwjipI9VY5OKfaDXPlBgJYS0qXQLQ5llDKGkoqtbkFWRQ6lY4yAaytfiNd-p4s6K2rtk5Ak9-29eAIcbXzsLPuVbJOrgkF33lfruRM_UnGUfYqLxwZMkO-L-dDPKorA1rBhAuwjZZgnTROtNoE314kCfNZkjD2uQOBVHYqrJH0QNN5Q8Ok6bcdsFWtE6yzrZNFsa8t1ZRuDyXvE6KJ2Q8FOCoryHK7ga2Va_pinfyjOvmn6PSzztX9hfOPXbjK5KU0t_9R4038p-y-f7j7fPQcdv84p8EpnH7c-WCf0c4vPn19GWe8eWd95o9GL9jjz3T0Ax-HvDPGbMzHYRiF_Ew8fpAn_uDo1vr_Y2ufQFN4Ck0LbRyZYbhP0oR__dwu1MUpU8VkK60s7U11rDLbrTykbE3d36TVW5PSG6PT9mc6c97iWkdG1nVR3hkz1YWaBh-DeS_Y7wf7veCgHxz0gsN-cNgLvvgEvNp99W8AAAD__wVq2is=

statement ok
DROP TABLE geo_table

# SRID of the geometry column is specified, so SRID specific bounds are used.
statement ok
CREATE TABLE geo_table(
  k int primary key,
  geom geometry(geometry, 26918),
  INVERTED INDEX geom_index(geom)
)

# Same shapes.
statement ok
INSERT INTO geo_table VALUES
  (1, 'SRID=26918;POINT(400001 4000001)'),
  (2, 'SRID=26918;LINESTRING(400001 4000001, 400002 4000002)'),
  (3, 'SRID=26918;POINT(400003 4000003)'),
  (4, 'SRID=26918;LINESTRING(400004 4000004, 400005 4000005)'),
  (5, 'SRID=26918;LINESTRING(400040 4000040, 400041 4000041)'),
  (6, 'SRID=26918;POLYGON((400001 4000001, 400005 4000001, 400005 4000005, 400001 4000005, 400001 4000001))')

# The InvertedFilterer stats show "rows read: 2" since all the above shapes are within the index
# bounds.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT k FROM geo_table WHERE ST_Intersects('SRID=26918;POINT(400003 4000003)'::geometry, geom) ORDER BY k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 4 (32 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• sort
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 2
│ order: +k
│
└── • filter
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 2
    │ filter: st_intersects('010100002026690000000000000C6A18410000008081844E41', geom)
    │
    └── • index join
        │ nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 2
        │ KV time: 0µs
        │ KV contention time: 0µs
        │ KV rows read: 2
        │ KV bytes read: 16 B
        │ table: geo_table@primary
        │
        └── • inverted filter
            │ nodes: <hidden>
            │ regions: <hidden>
            │ actual row count: 2
            │ inverted column: geom_inverted_key
            │ num spans: 31
            │
            └── • scan
                  nodes: <hidden>
                  regions: <hidden>
                  actual row count: 2
                  KV time: 0µs
                  KV contention time: 0µs
                  KV rows read: 2
                  KV bytes read: 16 B
                  missing stats
                  table: geo_table@geom_index
                  spans: 31 spans
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzkleFu2zYQx7_vKQ73JQmmwaSkeC6HAV5cdfO21IVsdCgmI2CkmytYIlWS3hQEfqy9wJ5soJR0cYNoM5YPA-YPNO6Of_r4_5H0LdoPFQpcJj8msxVs4VW6uIQN6SsnryuCn75L0gSsuyqVI2Mpd_b0ZJnOX34djl_wyVdvFvPXq9OYMcYi6L5YdHYixLfJ4jJZpe8Cv1Z9Bov0ZZLCxTvYYoBKF_Ra1mRR_Iwc1wE2RudkrTY-ddtNmBctChZgqZqd8-l1gLk2hOIWXekqQoEr32NKsiAzYhhgQU6WVbfsxy1MfQNXpSqoxQCXjVRWwCjDiyxrfymyrGWRH9jfDPjFsRqeIUhVQMRAu_dkLAb4w1twZU0C2B-_38W5Vo6UK7V6VDL6NwuGZCEg7DPXN47uU3wMFxjg5dvZDKyjBnK9Uw5OqXWjUrkzAawzpZ9AtH1qQi1bqKnW5gZkVelcOioEsG71a-ny92RB71yzcwL8_K6t-0SI632AfXRHyTq5IRR8H_xzknP1KxlHxauycmTIjPghzvt60jYGtIIpF2A9S7BOGic6NtGX51nGPBvmEQwOCKSKY2Ue6SOmC2_D1PfbbbCj1gPrY-tkVR2ypZby3WPkQyB8zX6owFHdQFHaLeys3NAzcAqP4fS9LtXdhQufunCNKWtpbv6yJpiG_7OzHx3j6cczHx062ufFp68v44z7dzZk4Xj8gj38zMbf8EnM-2DCJnwSx0nMT8TDB3kanj3rqf0XNsXH2LTUxpEZxYcmTfnn_7ULdX7MrlKyjVaWDnb11Mpsvw6Qig31f5NW70xOb4zOu5_pw0Wn6xIFWddXeR_MVV_yDT4U80FxOCwOB8XRsDgaFMfD4nhQfP6JeL3_7M8AAAD__xfz2i0=

# Also works when creating an index.
statement ok
DROP INDEX geo_table@geom_index

statement ok
CREATE INVERTED INDEX geom_index ON geo_table(geom)

query T
EXPLAIN ANALYZE (DISTSQL) SELECT k FROM geo_table WHERE ST_Intersects('SRID=26918;POINT(400003 4000003)'::geometry, geom) ORDER BY k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 4 (32 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• sort
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 2
│ order: +k
│
└── • filter
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 2
    │ filter: st_intersects('010100002026690000000000000C6A18410000008081844E41', geom)
    │
    └── • index join
        │ nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 2
        │ KV time: 0µs
        │ KV contention time: 0µs
        │ KV rows read: 2
        │ KV bytes read: 16 B
        │ table: geo_table@primary
        │
        └── • inverted filter
            │ nodes: <hidden>
            │ regions: <hidden>
            │ actual row count: 2
            │ inverted column: geom_inverted_key
            │ num spans: 31
            │
            └── • scan
                  nodes: <hidden>
                  regions: <hidden>
                  actual row count: 2
                  KV time: 0µs
                  KV contention time: 0µs
                  KV rows read: 2
                  KV bytes read: 16 B
                  missing stats
                  table: geo_table@geom_index
                  spans: 31 spans
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzkleFu2zYQx7_vKQ73JQmmwaSkeC6HAV5cdfO21IVsdCgmI2CkmytYIlWS3hQEfqy9wJ5soJR0cYNoM5YPA-YPNO6Of_r4_5H0LdoPFQpcJj8msxVs4VW6uIQN6SsnryuCn75L0gSsuyqVI2Mpd_b0ZJnOX34djl_wyVdvFvPXq9OYMcYi6L5YdHYixLfJ4jJZpe8Cv1Z9Bov0ZZLCxTvYYoBKF_Ra1mRR_Iwc1wE2RudkrTY-ddtNmBctChZgqZqd8-l1gLk2hOIWXekqQoEr32NKsiAzYhhgQU6WVbfsxy1MfQNXpSqoxQCXjVRWwCjDiyxrfymyrGWRH9jfDPjFsRqeIUhVQMRAu_dkLAb4w1twZU0C2B-_38W5Vo6UK7V6VDL6NwuGZCEg7DPXN47uU3wMFxjg5dvZDKyjBnK9Uw5OqXWjUrkzAawzpZ9AtH1qQi1bqKnW5gZkVelcOioEsG71a-ny92RB71yzcwL8_K6t-0SI632AfXRHyTq5IRR8H_xzknP1KxlHxauycmTIjPghzvt60jYGtIIpF2A9S7BOGic6NtGX51nGPBvmEQwOCKSKY2Ue6SOmC2_D1PfbbbCj1gPrY-tkVR2ypZby3WPkQyB8zX6owFHdQFHaLeys3NAzcAqP4fS9LtXdhQufunCNKWtpbv6yJpiG_7OzHx3j6cczHx062ufFp68v44z7dzZk4Xj8gj38zMbf8EnM-2DCJnwSx0nMT8TDB3kanj3rqf0XNsXH2LTUxpEZxYcmTfnn_7ULdX7MrlKyjVaWDnb11Mpsvw6Qig31f5NW70xOb4zOu5_pw0Wn6xIFWddXeR_MVV_yDT4U80FxOCwOB8XRsDgaFMfD4nhQfP6JeL3_7M8AAAD__xfz2i0=
