# LogicTest: 5node

statement ok
CREATE TABLE data (a INT, b INT, c INT, d INT, PRIMARY KEY (a, b, c, d))

# Split into ten parts.
statement ok
ALTER TABLE data SPLIT AT SELECT i FROM generate_series(1, 9) AS g(i)

# Relocate the ten parts to the five nodes.
statement ok
ALTER TABLE data EXPERIMENTAL_RELOCATE
  SELECT ARRAY[i%5+1], i FROM generate_series(0, 9) AS g(i)

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE data WITH DETAILS]
ORDER BY 1
----
start_key           end_key       replicas  lease_holder
<before:/Table/62>  …/1/1         {1}       1
…/1/1               …/1/2         {2}       2
…/1/2               …/1/3         {3}       3
…/1/3               …/1/4         {4}       4
…/1/4               …/1/5         {5}       5
…/1/5               …/1/6         {1}       1
…/1/6               …/1/7         {2}       2
…/1/7               …/1/8         {3}       3
…/1/8               …/1/9         {4}       4
…/1/9               <after:/Max>  {5}       5

statement ok
SET experimental_hash_group_join_enabled = true

# Verify the hash group-join planning (at the moment only the DistSQL diagram
# shows it).
query T
EXPLAIN (DISTSQL) SELECT data1.a, sum(data1.d) FROM data AS data1 INNER HASH JOIN data AS data2 ON data1.a = data2.c GROUP BY data1.a
----
distribution: full
vectorized: true
·
• group (hash)
│ group by: a
│
└── • hash join
    │ equality: (a) = (c)
    │
    ├── • scan
    │     missing stats
    │     table: data@data_pkey
    │     spans: FULL SCAN
    │
    └── • scan
          missing stats
          table: data@data_pkey
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzUmG1P20gXhr8_v2J0PoE0bjxjOy-WKoWnsCUVJCwBaatVhIZ48rINmaztqItQ_vsqCSzYg099HILEl6rBzuX7zPi-NPAAyd8zCOHkj4uzo06XHRx3-lf9388OWf_k7OTLFYtUqsQnxVmyvDvYfogO2W-XvfPNJXbU397COt3uySU7Peqfsm-9TjdzVbJe94nEPm9_9GnIvl72ri_Y_78_XQIOcxPprrrTCYR_ggAOEjh4wMEHDgEMOCxiM9RJYuL1LQ-bL3SifyB0OUzni2W6_vGAw9DEGsIHSKfpTEMIV-p2pi-1inRcc4FDpFM1nW0es356e_3PzeKHvgcOX8xseTdPQqY4i4BDf6HWn5yaYGoeMcFMOtExDFYczDJ9fObzo27v2UQlk-xD2gIGqwGHJFVjDaF4MUjnGEJ3xavNEpSdZbifQWRukKBwkGfucm7iSMc6ypAH62_-6pZXVuNUJZOvsVkuvpnpXMc1kdvemR6lB21x-Dmejieb_wGH9b3sIjZ_6WE6NfOQtQVvr9-1o-73m27v6qZ7fXb2eG__-vygLQ93WiYvt0yieMMrLcLReBzrsUpNXBOBlYQw1nNkPx95l619JXLXOGZRk27-JXg1TJALI7PrJ8oXRlQrf004Nbm3-ouq09Qr1P9tR8kLoF44yrsJQHwEARRv-c4CqO9JANmtleXfUlmxc9KpeXvrnKw6TaNK5950lHznGoWjvFvn5EfoXPGW79y5xp46l91ar_xb6lXsnOfU_L11zqs6TbNK5950lHznmoWjvFvnvI_QueIt37lzzT11Lru1fvm31K_YOd-pBXvrnF91mlaVzr3pKPnOtQpHebfO-R-hc8VbvnPnWnvqXIvyB5BLnSzMPNGlfnV0c49yxHpGHY31dkESs4yH-iI2w82924-9DWhTpkgn6faq3H7ozJ8uJWms1d1_f78pT2oUkwQRJUQxS1JZQTHLo7JaxSzfYgnCwsuXqIBGahSTBBGVW_gMS1JZQTHLo7JaxSzfYkmU5RXvYWDtIY5qIihiKoEUsU6MJeoIi5hLusWshpXLy7PclywfQVmxfBQlsy-qi3orqGpAQSNhBiSiUANSWZgBqSzMgBarXtWAdRoJMyARhRqQysIMSGVhBrRYjcoGtPYQR2EGJKZCDUiMhRqQmAs1oJWrWdmAVqxWVW1JGgnTFhGFaovKwrRFZWHasliCcmTONLFBRGHiorJQc5FhmLrIMMxdNgw_CmLysncSZ2H2ouZC9UUNhvqLmgwVmJ3MOg-WNpgdzDoPllWYR0RhDqOyUImRYZjFyDBMYzbMOkKX1ViTiMI0RmWhGiPDMI2RYZjGbBh-kMY0Zu8kzsI0Rs2FaowaDNUYNRmqMTuZdZwurTE72C8OiEgpiShMY1QWqjEyDNMYGYZpzIZZR-qyGmsRUZjGqCxUY2QYpjEyDNOYDcMP1pjG7J3EWZjGqLlQjVGDoRqjJkM1ZiWT1sm6tMZaqwGH0cz8vJlGEMJIuyNXNZQzatYDxxe3rtNyG3VH-W6kfS-oD6WC9RfUOIHwAfoT83PDvbpf6ATCkZolmsO5-qGPdarju-l8mqTT4eOV1ep__wYAAP__Ksciyw==

statement ok
RESET experimental_hash_group_join_enabled

# Same query as above, but with the hash group-join disabled.
query T
EXPLAIN (DISTSQL) SELECT data1.a, sum(data1.d) FROM data AS data1 INNER HASH JOIN data AS data2 ON data1.a = data2.c GROUP BY data1.a
----
distribution: full
vectorized: true
·
• group (hash)
│ group by: a
│
└── • hash join
    │ equality: (a) = (c)
    │
    ├── • scan
    │     missing stats
    │     table: data@data_pkey
    │     spans: FULL SCAN
    │
    └── • scan
          missing stats
          table: data@data_pkey
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzEmG9P4lgUxt_vp2jOK01uB-7tbYEmk-CO7spEwRVNdrIhptLLnwxSti2ZNYbvvgF0pL3TQ8_F6pvJYOHX5_Ty_HL0CZJ_Z-DD2d9XFyedrnV02unf9P-6OLb6ZxdnX26sMEgD_ilgVrJ8ONq-CI-tP657l5tL1kl_-xar0-2eXVvnJ_1z62uv081cFVav-0KyPm9_9Glo_Xndu72yfv_2cgkYzKNQdYMHlYD_D3BgIICBAwwkMHBhwGARR0OVJFG8fsvT5gOd8D_w6wym88UyXf94wGAYxQr8J0in6UyBDzfB_UxdqyBUca0ODEKVBtPZ5jbru7fX_9wtvqtHYPAlmi0f5olvBcwKgUF_Eaxf2TVuBfPQ4laUTlQMgxWDaJk-3_P1VveP1iRIJtmbtDkMVgMGSRqMFfh8Z5DOKfj1FTObxS07y7CaQURuELdwkFfuch7FoYpVmCEP1p_c95ZfPI3zIJl8jaZzFdd47mRnapQetfnx53g6nmz-Bwx6y9S32py1RW7w16Gc3FCcdDwn43GsxkEaxTXuag-PwUn32123d3PXvb24eM7Uv708aovjg05C5kMfchT4WKJ-yFivkd1cZFH8nI0idyM7WtSEm_-e_TKMlw-TfX68fCe5mV9q3K6JygzDTafxDAzztqPkHeMVjvIejuEVOYZ0QLuO8T7QMYccxR7H8Iock33OonwRhGGthV1zKqu1MJ2mYVLrNx0lX-tG4SjvUWtRUa1JB7Rb68YH1vqQo9hTa1FRrbPP2SlfBMew1o5dk5XV2jGdpmlS6zcdJV_rZuEo71Frp6Jakw5ot9bND6z1IUexp9ZORbXOPmdZvgjSsNbSrrmV1VqaTtMyqfWbjpKvdatwlPeotayo1qQD2q116wNrfchR7Km1rKjWkvIHlWuVLKJ5okr9Gl_P3crm6xlVOFbbB5JEy3ioruJouHnv9mVvA9r0NVRJur0qti8685dLSRqr4OHnn-vKk5rFJE5EcaeYJagsJJdDZAkkl9RYnPDgxS7KpZGaxSROROUefIYlqCwkl0NkCSSX1Fgiz6rvsrKoeubBa2fooLFk8dfB1VLhKF4vZnnEWNxFWMRcAsnVIOYSSK6Glkuip4igmlosF0UJr_gboaE8U5tyGgmzKRGF2pTKwmxKZKE21VgNU5t6NBJmUyIKtSmVhdmUyEJtqrGaaHlaiE21M2wZ21RLhaNQmxJjoTYl5kJtSsyF2lTLxbXNprROtVycstlkdUNEYRakslANkmGYB6kwVIQ6TFtvypqwQURhKqSyUBeSYZgMqTDUhjpMW3EyPeIS8aF-lNqOU1qIejCchRqRGgxVIjUZ6kRqMlSKejJ8McSkqAcz3gwdIgqTIpWFSpEMw6RIhaFS1GHG62GTiMKkSGWhUiTDMClSYagUdRi-I3JsSdSP0nxL1IMdsCZSg6FSpCZDpUhNhkpRSybMN0UtmDDeFCURhUmRykKlSIZhUqTCUCnqMONNsUVEYVKkslApkmGYFKkwVIo6DN8UBbYp6kdpvinqwQ7YFKnBUClSk6FSpCZDpagnM98U5WrAYDSLftxNQ_DhfjjypOs27ZZ779lyJEM7UI6w65Lfu8Oh8EZOAOsPBOME_CfoT6IfG-7N40Il4I-CWaIYXAbf1alKVfwwnU-TdDp8vrJa_fZ_AAAA__-c4zxY
