# LogicTest: 5node

# TODO(rytaft): When zigzag joins are supported with multicolumn inverted
# indexes, change this test to use a multicolumn inverted index and split
# the index.

subtest json

statement ok
CREATE TABLE json_tab (
  a INT PRIMARY KEY,
  b JSONB,
  FAMILY (a, b)
)

statement ok
CREATE INVERTED INDEX foo_inv ON json_tab(b)

statement ok
INSERT INTO json_tab VALUES
  (1, '{"a": "b"}'),
  (2, '[1,2,3,4, "foo"]'),
  (3, '{"a": {"b": "c"}}'),
  (4, '{"a": {"b": [1]}}'),
  (5, '{"a": {"b": [1, [2]]}}'),
  (6, '{"a": {"b": [[2]]}}'),
  (7, '{"a": "b", "c": "d"}'),
  (8, '{"a": {"b":true}}'),
  (9, '{"a": {"b":false}}'),
  (10, '"a"'),
  (11, 'null'),
  (12, 'true'),
  (13, 'false'),
  (14, '1'),
  (15, '1.23'),
  (16, '[{"a": {"b": [1, [2]]}}, "d"]'),
  (17, '{}'),
  (18, '[]'),
  (19, '["a", "a"]'),
  (20, '[{"a": "a"}, {"a": "a"}]'),
  (21, '[[[["a"]]], [[["a"]]]]'),
  (22, '[1,2,3,1]'),
  (23, '{"a": 123.123}'),
  (24, '{"a": 123.123000}'),
  (25, '{"a": [{}]}'),
  (26, '[[], {}]'),
  (27, '[true, false, null, 1.23, "a"]'),
  (28, '{"a": {}}'),
  (29, NULL),
  (30, '{"a": []}'),
  (31, '{"a": {"b": "c", "d": "e"}, "f": "g"}'),
  (32, '{"a": [1]}'),
  (33, '[1, "bar"]')

statement ok
ALTER TABLE json_tab SPLIT AT VALUES (10), (20)

statement ok
ALTER TABLE json_tab EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 10), (ARRAY[3], 20)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder
FROM [SHOW EXPERIMENTAL_RANGES FROM TABLE json_tab] ORDER BY lease_holder
----
start_key  end_key  replicas  lease_holder
NULL       /10      {1}       1
/10        /20      {2}       2
/20        NULL     {3}       3

# Filter with a fully-specified array. This should use a zigzag join.
query T
EXPLAIN (DISTSQL)
SELECT a FROM json_tab WHERE b @> '[1, 2]' ORDER BY a
----
distribution: local
vectorized: true
·
• sort
│ order: +a
│
└── • lookup join
    │ table: json_tab@json_tab_pkey
    │ equality: (a) = (a)
    │ equality cols are key
    │ pred: b @> '[1, 2]'
    │
    └── • zigzag join
          left table: json_tab@foo_inv
          left columns: (a)
          left fixed values: 1 column
          right table: json_tab@foo_inv
          right columns: ()
          right fixed values: 1 column
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkk9v1DAQxe98itFcCsLSxtmbT6FtEFstm5JU4k-JVt7NELlNPcF2ELDKd0dJRGGhXXVvnnl-b35jeYf-a4MK0w-Xy1eLFTw_XxRXxbvlCyjSZXp2BRpe59lbuPFs10Fv4P2bNE9hA8nnLormBCfXUkBcnkCWn6c5nH4EjQItV7TSd-RRXaPEUmDreEvesxtau_HCovqOKhJobNuFoV0K3LIjVDsMJjSECj-Z-qeuL9hYcrMIBVYUtGnG3MJUBJG6Z0u-MK-N_YZikuSDUtYFBYnEshfIXfgz2gddEyrZi6fjDWA56YrcTO7D3U_-fVi3t_QDBS6Zb7sWbthYYDuiCMxWkMT_valS6qLIVqco8Iyb7s56BZsnrBAfs0LBLpCbxfv4iXz5aPz8mPicfMvW0178Y8lRXwqkqqbpk3ju3JYuHW_HMVOZjb6xUZEPkyqnYmEnaQD82ywPmuPD5vigef6Pueyf_QoAAP__rQARbQ==

# Combine predicates with AND. Should have the same output as b @> '[1, 2]'.
# This should use a zigzag join.
query T
EXPLAIN (DISTSQL)
SELECT a FROM json_tab WHERE b @> '[1]' AND b @> '[2]' ORDER BY a
----
distribution: local
vectorized: true
·
• sort
│ order: +a
│
└── • lookup join
    │ table: json_tab@json_tab_pkey
    │ equality: (a) = (a)
    │ equality cols are key
    │ pred: (b @> '[1]') AND (b @> '[2]')
    │
    └── • zigzag join
          left table: json_tab@foo_inv
          left columns: (a)
          left fixed values: 1 column
          right table: json_tab@foo_inv
          right columns: ()
          right fixed values: 1 column
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUUl1vm0AQfO-vWO1LHPUkc_jtnkhiqjpyIYVI_UiRhc3WusS5pXdH1dbiv1dAm4YqseI3doaZnVndHt23HSqMP14tzxYJTOaL_Dp_vzyFPF7GF9dQwpssfQe3js3Kl2v48DbOYpisIfrSBMGM4ORGFiencJbMx2jYoWk2jzM4_wQlCjRcUVLek0N1gxILgbXlDTnHtoP2_Q-L6geqQKA2deM7uBC4YUuo9ui13xEq_Ky3v8rtJWtDdhqgwIp8qXe9b64rgkA9BI6-Mq-0-Y5ioOSTVNp4BZHEohXIjf-32vlyS6hkK14erwuWUVmRncpxuIfNfz9W9R39RIFL5rumhlvWBtj0UQSmCUyicHxopdRlnibnfw4-osNHNAq84F1zb5yC9QsKhscUzNl6stNwXC6Sr5-1nx1jn5Gr2Tga2T_nHLSFQKq2NDwhx43d0JXlTb9mGNNe1wMVOT-wchgWZqC6gI_F8qA4PCwOD4pn_4mL9tXvAAAA___isx3b

# Filter with a nested array. This index expression is not tight.
# This should use a zigzag join.
query T
EXPLAIN (DISTSQL)
SELECT a FROM json_tab WHERE b @> '[[1, 2]]' ORDER BY a
----
distribution: local
vectorized: true
·
• sort
│ order: +a
│
└── • lookup join
    │ table: json_tab@json_tab_pkey
    │ equality: (a) = (a)
    │ equality cols are key
    │ pred: b @> '[[1, 2]]'
    │
    └── • zigzag join
          left table: json_tab@foo_inv
          left columns: (a)
          left fixed values: 1 column
          right table: json_tab@foo_inv
          right columns: ()
          right fixed values: 1 column
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkk9v1DAQxe98itFcCsLSxtmbT6FtEFstm5JU4s8SrbybIXKbeoLtIGCV746SiMJW7aq9eeb5vfmN5T367w0qTD9dLt8sVvDyfFFcFR-Wr6BIl-nZFWh4m2fv4dqz3QS9hY_v0jyFLSRfuyiaE5ys11JAXJYnkOXnaQ6nn0GjQMsVrfQteVRrlFgKbB3vyHt2Q2s_XlhUP1FFAo1tuzC0S4E7doRqj8GEhlDhF1P_1vUFG0tuFqHAioI2zZhbmIogUnd0yTfmjbE_UEySfFDKuqAgkVj2ArkL_0b7oGtCJXvxdLwBLCddkZvJQ7i7yX8Pm_aGfqHAJfNN18I1GwtsRxSB2QqS-IFXVUpdFNnqFAWecdPdWq9g-4Ql4ucsUbAL5Gbx4QKJfP1o_Pw58Tn5lq2ng_jHkqO-FEhVTdM38dy5HV063o1jpjIbfWOjIh8mVU7Fwk7SAPi_WR41x8fN8VHz_J657F_8CQAA__9KGRLd

subtest array

statement ok
CREATE TABLE array_tab (
  a INT PRIMARY KEY,
  b INT[],
  FAMILY (a, b)
)

statement ok
CREATE INVERTED INDEX foo_inv ON array_tab(b)

statement ok
INSERT INTO array_tab VALUES
  (1, '{}'),
  (2, '{1}'),
  (3, '{1, 2}'),
  (4, '{1, 3}'),
  (5, '{1, 2, 3, 4}')

statement ok
ALTER TABLE array_tab SPLIT AT VALUES (3), (3)

statement ok
ALTER TABLE array_tab EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 3), (ARRAY[3], 5)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder
FROM [SHOW EXPERIMENTAL_RANGES FROM TABLE array_tab] ORDER BY lease_holder
----
start_key  end_key  replicas  lease_holder
NULL       /3       {1}       1
/3         NULL     {3}       3

# This should use a zigzag join.
query T
EXPLAIN (DISTSQL)
SELECT a FROM array_tab@foo_inv WHERE b @> '{1, 2}' ORDER BY a
----
distribution: local
vectorized: true
·
• sort
│ order: +a
│
└── • lookup join
    │ table: array_tab@array_tab_pkey
    │ equality: (a) = (a)
    │ equality cols are key
    │ pred: b @> ARRAY[1,2]
    │
    └── • zigzag join
          left table: array_tab@foo_inv
          left columns: (a)
          left fixed values: 1 column
          right table: array_tab@foo_inv
          right columns: ()
          right fixed values: 1 column
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkkFv00AQhe_8itFcCmKleJ0L2pNDa4RRiIsdCUqxok08REvTHbO7RpTI_x3ZRi2BNmpvM_P83nxj7R799x0qTD-dz2fZAp6fZeWy_DB_AWU6T0-XoOFNkb8H7Zy-WQW9Tr4yr4z9AR_fpkUKa0i-tFE0JTjZSwFxdwJ5cZYW8PoCNAq0XNNCX5NHdYkSK4GN4w15z64f7YcPsvonqkigsU0b-nElcMOOUO0xmLAjVPjZbH_p7Ts2ltwkQoE1BW12Q25paoJI_Q-JYtTk_VreBgWJxKoTyG24W-6D3hIq2YnHA_ZoBema3EQe4t2tvq1WzRXdoMA581XbwDc2FtgOMALzBSTx7X-dFcXs4lIqpbLF8pWI_xQVCjzlXXttvYL1I46Jn3JMyS6Qm8SHhyTy5YPx06fEF-Qbtp4O4h9KjrpKINVbGh-M59Zt6NzxZlgztvngGwY1-TCqcmwyO0o94N9medQcHzfHR83Tf8xV9-x3AAAA___ZeBlf
