# Tests for the disable_optimizer_rules session variable.
# This variable allows disabling specific optimizer rules by name.

statement ok
CREATE TABLE t (a INT, b INT, c INT, INDEX (b))

# Basic test with the variable unset (default).
query T
EXPLAIN SELECT * FROM t WHERE b = 1
----
distribution: local
vectorized: true
·
• index join
│ table: t@t_pkey
│
└── • scan
      missing stats
      table: t@t_b_idx
      spans: [/1 - /1]

# Set the variable with a rule that doesn't affect this query.
statement ok
SET disable_optimizer_rules = 'PushFilterIntoJoinLeft'

# Query should still use the index
query T
EXPLAIN SELECT * FROM t WHERE b = 1
----
distribution: local
vectorized: true
·
• index join
│ table: t@t_pkey
│
└── • scan
      missing stats
      table: t@t_b_idx
      spans: [/1 - /1]

# Set the variable to disable the rule to generate constrained scans.
statement ok
SET disable_optimizer_rules = 'GenerateConstrainedScans'

# Now the query should not use the index and instead use a full table scan.
query T
EXPLAIN SELECT * FROM t WHERE b = 1
----
distribution: local
vectorized: true
·
• filter
│ filter: b = 1
│
└── • scan
      missing stats
      table: t@t_pkey
      spans: FULL SCAN

# Test with multiple rules.
statement ok
SET disable_optimizer_rules = 'GenerateConstrainedScans,PushFilterIntoJoinLeft'

# The query should still not use the index.
query T
EXPLAIN SELECT * FROM t WHERE b = 1
----
distribution: local
vectorized: true
·
• filter
│ filter: b = 1
│
└── • scan
      missing stats
      table: t@t_pkey
      spans: FULL SCAN

# Test with non-existent rule (should generate a notice to the client).
# Spaces should be trimmed so the other rule should still take effect.
statement notice NOTICE: rule NonExistentRule does not exist and will be ignored
SET disable_optimizer_rules = 'NonExistentRule, GenerateConstrainedScans'

# The query should still not use the index.
query T
EXPLAIN SELECT * FROM t WHERE b = 1
----
distribution: local
vectorized: true
·
• filter
│ filter: b = 1
│
└── • scan
      missing stats
      table: t@t_pkey
      spans: FULL SCAN

# Reset the variable.
statement ok
RESET disable_optimizer_rules

# Query should use the index again.
query T
EXPLAIN SELECT * FROM t WHERE b = 1
----
distribution: local
vectorized: true
·
• index join
│ table: t@t_pkey
│
└── • scan
      missing stats
      table: t@t_b_idx
      spans: [/1 - /1]

# Cleanup.
statement ok
DROP TABLE t
