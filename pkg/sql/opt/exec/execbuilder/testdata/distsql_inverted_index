# LogicTest: 5node

# TODO(rytaft): When zigzag joins are supported with multicolumn inverted
# indexes, change this test to use a multicolumn inverted index and split
# the index.

subtest json

statement ok
CREATE TABLE json_tab (
  a INT PRIMARY KEY,
  b JSONB,
  FAMILY (a, b)
)

statement ok
CREATE INVERTED INDEX foo_inv ON json_tab(b)

statement ok
INSERT INTO json_tab VALUES
  (1, '{"a": "b"}'),
  (2, '[1,2,3,4, "foo"]'),
  (3, '{"a": {"b": "c"}}'),
  (4, '{"a": {"b": [1]}}'),
  (5, '{"a": {"b": [1, [2]]}}'),
  (6, '{"a": {"b": [[2]]}}'),
  (7, '{"a": "b", "c": "d"}'),
  (8, '{"a": {"b":true}}'),
  (9, '{"a": {"b":false}}'),
  (10, '"a"'),
  (11, 'null'),
  (12, 'true'),
  (13, 'false'),
  (14, '1'),
  (15, '1.23'),
  (16, '[{"a": {"b": [1, [2]]}}, "d"]'),
  (17, '{}'),
  (18, '[]'),
  (19, '["a", "a"]'),
  (20, '[{"a": "a"}, {"a": "a"}]'),
  (21, '[[[["a"]]], [[["a"]]]]'),
  (22, '[1,2,3,1]'),
  (23, '{"a": 123.123}'),
  (24, '{"a": 123.123000}'),
  (25, '{"a": [{}]}'),
  (26, '[[], {}]'),
  (27, '[true, false, null, 1.23, "a"]'),
  (28, '{"a": {}}'),
  (29, NULL),
  (30, '{"a": []}'),
  (31, '{"a": {"b": "c", "d": "e"}, "f": "g"}'),
  (32, '{"a": [1]}'),
  (33, '[1, "bar"]')

statement ok
ANALYZE json_tab

statement ok
ALTER TABLE json_tab SPLIT AT VALUES (10), (20)

statement ok
ALTER TABLE json_tab EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 10), (ARRAY[3], 20)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder
FROM [SHOW RANGES FROM INDEX json_tab@primary WITH DETAILS] ORDER BY lease_holder, start_key
----
start_key           end_key       replicas  lease_holder
<before:/Table/62>  …/10          {1}       1
…/10                …/20          {2}       2
…/20                …/<IndexMax>  {3}       3

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder
FROM [SHOW RANGES FROM TABLE json_tab WITH DETAILS] ORDER BY lease_holder, start_key
----
start_key           end_key       replicas  lease_holder
<before:/Table/62>  …/1/10        {1}       1
…/2                 <after:/Max>  {1}       1
…/1/10              …/1/20        {2}       2
…/1/20              …/2           {3}       3

# Filter with a fully-specified array. This should not use a zigzag join due
# to distribution costs.
query T
EXPLAIN (DISTSQL)
SELECT a FROM json_tab WHERE b @> '[1, 2]' ORDER BY a
----
distribution: full
vectorized: true
·
• filter
│ estimated row count: 0
│ filter: b @> '[1, 2]'
│
└── • scan
      estimated row count: 33 (100% of the table; stats collected <hidden> ago)
      table: json_tab@json_tab_pkey
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJy0lNFO2zAUhu_3FNa5YdMcNXbSgnzVQYvWCVrWVNomViEnOWUZaZzZjhhCffcp6YAmW6oWxF3sY33-8h_b92B-pSBg-PXi7MNoTN4ORsEs-Hz2jgTDs-HJjEhyOp2ck59GZVdWhuTLx-F0SELS_164rofk4JJRwucHZDIdDKfk-BuRQCFTMY7lEg2IS2BAgQMFD-YUcq0iNEbpsnRfLRzFv0G4FJIsL2w5PacQKY0g7sEmNkUQMJNhilOUMeqOCxRitDJJK_yDWv_h4yq_wTugcKLSYpkZQSQlIVAIclmOnA5zYb6ioAr7tKGx8hpBsA3D0QCEu6K7S54mqUWNuuPVDdfzgvT5P7EJIT4Fk_FxqxBvCHmtQk8eSseoMa5L9Nl7mK_-Yz1Wjso7vfrqSWEF6bNWLa-h1atpsd2byV7WzA5znQ7fvZ9sH8_Hfvqv10-_JsR3D46_MDjuOjunxveRfEyt-3qpdfe5llM0ucoM1nTadnIbOzmsvDMYX-P6jhlV6AgvtIqqtevhpAJVEzEau66y9WCUPZSM1SiXj6_KJoltJfEaiW2SvCaJbyUd7uHkbSX57STWJPnP_Tu_SepuJfXanXiT1HuuU7c8D4tU3V4lMQiIfYzYoccc9NFz_B47cmR4yB1cHIWL0A27Pbd8iBepvDbloQx-qNsKO7vLyyO1kKlBCufyBgdoUS-TLDE2if5WVqs3fwIAAP__3EZ0aQ==

# Combine predicates with AND. Should have the same output as b @> '[1, 2]'.
# This should not use a zigzag join due to distribution costs.
query T
EXPLAIN (DISTSQL)
SELECT a FROM json_tab WHERE b @> '[1]' AND b @> '[2]' ORDER BY a
----
distribution: full
vectorized: true
·
• filter
│ estimated row count: 0
│ filter: (b @> '[1]') AND (b @> '[2]')
│
└── • scan
      estimated row count: 33 (100% of the table; stats collected <hidden> ago)
      table: json_tab@json_tab_pkey
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzElFFP2zAQgN_3K6x7ATRHjZ00o34q0KJ1gpa1lbaJVchNriwjjTPbFUOo_31KCqWJlqqFB97iO-vzlzufH8H8SUBA9_vVxUmvTw47vdF49PXiiIy6F92zMZHkfDi4JL-NSm-snJJvn7vDLjmckvbPhet6SA6u2eTgiJz0O-Uoz6ODYac7JKc_iAQKqYqwL-doQFwDAwocKHgwoZBpFaIxSuepx2JjL_oLwqUQp9nC5uEJhVBpBPEINrYJgoCxnCY4RBmhbrhAIUIr46TAP_u2nz9usjt8AApnKlnMUyOIpGQKFEaZzFdOg7kwWVJQC_tyoLHyFkGwDcNeB4S7pLtLnseJRY264ZUNV3FBDtu8XEshxJfRoH_6VNNSmm-ka3V5Rder1X2xVDpCjVFZsc0-wmT5n3_qK0dljaC8e7CwgrRZrZZX0QpKWmz3VrO3tbrBXKfBd-8228dz3W3_vbrtl3T57mXlbywrd52da8r3kVzXtPleNW3uM_BDNJlKDZZk605yKyc5LJ83jG5xNZ9GLXSIV1qFxd7VclCAikCExq6ybLXopc8pYzXK-fq92iSxrSReIrFNklcl8a2kT3s4eVtJfj2JVUn-a__Or5KaW0lBvROvkoLXOjXz-zBL1P1NHIGAwA1aTT8MnZaczRyf8cCR0-DYCVjLbba8gAfH-SM-S-StyS_l6Je6L7Djhyy_UjOZGKRwKe-wgxb1PE5jY-PwKbNcfvgXAAD__-jDjng=

# Filter with a nested array. This index expression is not tight.
# This should not use a zigzag join due to distribution costs.
query T
EXPLAIN (DISTSQL)
SELECT a FROM json_tab WHERE b @> '[[1, 2]]' ORDER BY a
----
distribution: full
vectorized: true
·
• filter
│ estimated row count: 0
│ filter: b @> '[[1, 2]]'
│
└── • scan
      estimated row count: 33 (100% of the table; stats collected <hidden> ago)
      table: json_tab@json_tab_pkey
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJy0lVFv2jwUhu-_X2Gdm37THBE7CTBfsRaqMbXQAdI2dagyyaHLGuLMdtRVFf99SlhbEjUIWvUu9rEeP3mPndyD-Z2AgMG3i7OPwxH5vz-czqZfzt6R6eBscDIjkpxOxufkl1HplZUL8vXTYDIgC9L7kbuuh-To8pJRwufzIzKe9AcTcvydSKCQqghHcoUGxCUwoMCBggdzCplWIRqjdFG6LxcOoz8gXApxmuW2mJ5TCJVGEPdgY5sgCJjJRYITlBHqlgsUIrQyTkr8g1zv4eEqu8E7oHCiknyVGkEkJQugMM1kMXJazIX5moLK7dOGxsprBMG2DId9EO6a7i95GicWNeqWVzXczAvS488EJ4T4PB2PjhuVeE3Ja1R6MlE6Qo1RVaPH3sN8_Yz3SDkqa7Wrq8e5FaTHGrW8mla7osX2byd7XTtbzHVafP-OskM8Hzvqv2VH_YoS3z86_srouOvsnRs_RPIxt-AtcwsOuZwTNJlKDVaEmnZyazs5rLg3GF3j5p4ZlesQL7QKy7Wb4bgElRMRGrupss1gmD6UjNUoV4_flm0S20niFRLbJnl1Et9J6hzg5O0k-c0kVif5L307v04KdpLazU68Tmq_1CkozsMyUbdXcQQCeDd0kQeBE7TRd_zQ7zrdzofI8d1Op-11u4jL4re4TOS1KQ7l9Ke6LbGzu6w4UkuZGKRwLm-wjxb1Kk5jY-PwX2W9_u9vAAAA__-2xXZ8

subtest array

statement ok
CREATE TABLE array_tab (
  a INT PRIMARY KEY,
  b INT[],
  FAMILY (a, b)
)

statement ok
CREATE INVERTED INDEX foo_inv ON array_tab(b)

statement ok
INSERT INTO array_tab VALUES
  (1, '{}'),
  (2, '{1}'),
  (3, '{1, 2}'),
  (4, '{1, 3}'),
  (5, '{1, 2, 3, 4}')

statement ok
ANALYZE array_tab

statement ok
ALTER TABLE array_tab SPLIT AT VALUES (3), (3)

statement ok
ALTER TABLE array_tab EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 3), (ARRAY[3], 5)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder
FROM [SHOW RANGES FROM INDEX array_tab@primary WITH DETAILS] ORDER BY lease_holder, start_key
----
start_key              end_key       replicas  lease_holder
<before:/Table/106/2>  …/3           {1}       1
…/3                    …/<IndexMax>  {3}       3

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder
FROM [SHOW RANGES FROM TABLE array_tab WITH DETAILS] ORDER BY lease_holder
----
start_key              end_key       replicas  lease_holder
<before:/Table/106/2>  …/1/3         {1}       1
…/2                    <after:/Max>  {1}       1
…/1/3                  …/2           {3}       3

# This should use a zigzag join.
query T
EXPLAIN (DISTSQL)
SELECT a FROM array_tab@foo_inv WHERE b @> '{1, 2}' ORDER BY a
----
distribution: local
vectorized: true
·
• sort
│ estimated row count: 0
│ order: +a
│
└── • lookup join
    │ estimated row count: 0
    │ table: array_tab@array_tab_pkey
    │ equality: (a) = (a)
    │ equality cols are key
    │
    └── • zigzag join
          estimated row count: 0
          left table: array_tab@foo_inv
          left columns: (a, b_inverted_key)
          left fixed values: 1 column
          right table: array_tab@foo_inv
          right columns: (a, b_inverted_key)
          right fixed values: 1 column
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkl1vmzAUhu_3K6xz001zFAypFnyVrWFaprTpINI-o8jASeaFYGabdVnEf5-ArfmoErV3-JzD8z7HsAXzMwMOwafb8evRDXk-HEXT6MP4BYmCcXA1JYK8DSfXRGgtNnMr4sFCqbnMf5GP74IwIDEZfCsdx0NysWWUuNUFmYTDICRvPhMBFHKV4o1YowH-FRjMKBRaJWiM0nVp2wyM0t_AHQoyL0pbl2cUEqUR-BastBkChy9y-Ucs3yuZo-46QCFFK2TWcCOZInH4Q0mgcKWycp0bTgQlMdB2lj1udlJaTgYezCoKqrQ7OWPFEoGzvW1GQ-BORR-_UL1KiCJF3WWH6-zU7p_mxQo3QGGs1KosyA8lc6JyTgZsX3vnzE46u0fO7CnOkdIWddc99B2wlyfjvKM49ylxIZpC5QYP4k4lOUdJHVbNKGC6xPZHM6rUCd5qlTSz7XHSgJpCisa2XdYeRvn_lrEaxfr-C--T2FmSe5rEjknuWZJ3zmlGYZGpu7lMgUPP7ws_fdXr9IXf6_T8S6cT92O_4_qxd-l5TsLcFOoXxNLUlx19V3cNdrop6qtaiMwghWuxwiFa1GuZS2Nl8q9TVc_-BgAA__8joFvH
