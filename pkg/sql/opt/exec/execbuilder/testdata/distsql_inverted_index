# LogicTest: 5node

# TODO(rytaft): When zigzag joins are supported with multicolumn inverted
# indexes, change this test to use a multicolumn inverted index and split
# the index.

subtest json

statement ok
CREATE TABLE json_tab (
  a INT PRIMARY KEY,
  b JSONB,
  FAMILY (a, b)
)

statement ok
CREATE INVERTED INDEX foo_inv ON json_tab(b)

statement ok
INSERT INTO json_tab VALUES
  (1, '{"a": "b"}'),
  (2, '[1,2,3,4, "foo"]'),
  (3, '{"a": {"b": "c"}}'),
  (4, '{"a": {"b": [1]}}'),
  (5, '{"a": {"b": [1, [2]]}}'),
  (6, '{"a": {"b": [[2]]}}'),
  (7, '{"a": "b", "c": "d"}'),
  (8, '{"a": {"b":true}}'),
  (9, '{"a": {"b":false}}'),
  (10, '"a"'),
  (11, 'null'),
  (12, 'true'),
  (13, 'false'),
  (14, '1'),
  (15, '1.23'),
  (16, '[{"a": {"b": [1, [2]]}}, "d"]'),
  (17, '{}'),
  (18, '[]'),
  (19, '["a", "a"]'),
  (20, '[{"a": "a"}, {"a": "a"}]'),
  (21, '[[[["a"]]], [[["a"]]]]'),
  (22, '[1,2,3,1]'),
  (23, '{"a": 123.123}'),
  (24, '{"a": 123.123000}'),
  (25, '{"a": [{}]}'),
  (26, '[[], {}]'),
  (27, '[true, false, null, 1.23, "a"]'),
  (28, '{"a": {}}'),
  (29, NULL),
  (30, '{"a": []}'),
  (31, '{"a": {"b": "c", "d": "e"}, "f": "g"}'),
  (32, '{"a": [1]}'),
  (33, '[1, "bar"]')

statement ok
ANALYZE json_tab

statement ok
ALTER TABLE json_tab SPLIT AT VALUES (10), (20)

statement ok
ALTER TABLE json_tab EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 10), (ARRAY[3], 20)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder
FROM [SHOW EXPERIMENTAL_RANGES FROM TABLE json_tab] ORDER BY lease_holder
----
start_key  end_key  replicas  lease_holder
NULL       /10      {1}       1
/10        /20      {2}       2
/20        NULL     {3}       3

# Filter with a fully-specified array. This should use a zigzag join.
query T
EXPLAIN (DISTSQL)
SELECT a FROM json_tab WHERE b @> '[1, 2]' ORDER BY a
----
distribution: local
vectorized: true
·
• sort
│ estimated row count: 0
│ order: +a
│
└── • lookup join
    │ estimated row count: 0
    │ table: json_tab@json_tab_pkey
    │ equality: (a) = (a)
    │ equality cols are key
    │ pred: b @> '[1, 2]'
    │
    └── • zigzag join
          estimated row count: 0
          left table: json_tab@foo_inv
          left columns: (a, b_inverted_key)
          left fixed values: 1 column
          right table: json_tab@foo_inv
          right columns: (a, b_inverted_key)
          right fixed values: 1 column
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkl9v0zAUxd_5FFf3ZSAsNU7f_BS2BdGpNCOZxJ8RVW5zibxlvsF2EFDlu6MkYltBrbY33z_n-Hcs79B_b1Bh-uly-Waxgpfni-Kq-LB8BUW6TM-uQMPbPHsPN57tOugNfHyX5ilsIPnaRdGc4ORaCojLE8jy8zSH08-gUaDlilb6jjyqa5RYCmwdb8l7dkNrNy4sqp-oIoHGtl0Y2qXALTtCtcNgQkOo8Iupf-v6go0lN4tQYEVBm2b0LUxFEKl7tuQb89rYHyjwjJvuznoFWsAGxbQqn7SadUFBMseyF8hdeEDzQdeESvbi6fgDeE66IjeT-_D3JH8P6_aWfqHAJfNt18INGwtsFSSDMFtBEv_35kqpiyJbnT5O8RBBHowQPydCwS6Qm8X7-Il8fdB-_hz7nHzL1tOe_SHnqC8FUlXT9Ik8d25Ll4634zVTmY26sVGRD9NUTsXCTqMB8LFYHhXHx8XxUfH8H3HZv_gTAAD__zhLGuM=

# Combine predicates with AND. Should have the same output as b @> '[1, 2]'.
# This should use a zigzag join.
query T
EXPLAIN (DISTSQL)
SELECT a FROM json_tab WHERE b @> '[1]' AND b @> '[2]' ORDER BY a
----
distribution: local
vectorized: true
·
• sort
│ estimated row count: 0
│ order: +a
│
└── • lookup join
    │ estimated row count: 0
    │ table: json_tab@json_tab_pkey
    │ equality: (a) = (a)
    │ equality cols are key
    │ pred: (b @> '[1]') AND (b @> '[2]')
    │
    └── • zigzag join
          estimated row count: 0
          left table: json_tab@foo_inv
          left columns: (a, b_inverted_key)
          left fixed values: 1 column
          right table: json_tab@foo_inv
          right columns: (a, b_inverted_key)
          right fixed values: 1 column
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUUl1vm0AQfO-vWO1LHPUkc_jtnkhiqjpyIYVI_UiRdTZbi8S5pXdH1dbyf6-ANjGRbMVv7MzOMKO9LbofG1QYf76ZX8wSGE1n-W3-cX4OeTyPr25Bw7ss_QD3js3C6yV8eh9nMYyWEH1rgmBCcHYni7NzuEimQzRs0TSbxhlcfgGNAg2XlOhHcqjuUGIhsLa8IufYttC2W5iVv1AFAitTN76FC4ErtoRqi77yG0KFX6v1H72-5sqQHQcosCSvq03nm1clQaCeAkffmReV-YkCr3jTPBqnQAtYouhX5atW08YriCZY7ARy45-jOa_XhEruxOvjt8Ez0iXZsRyGf0ry_2NRP9BvFDhnfmhquOfKABsFUStMExhF4fAQSqnrPE0u_x1kQId79H7H54LyYMHwlII5W092HA7LRfLtQfvJKfYZuZqNo4H9IedgVwikck39E3Pc2BXdWF51v-nHtNN1QEnO96zsh5npqTbgvlgeFYfHxeFR8eSFuNi9-RsAAP__LTAnUQ==

# Filter with a nested array. This index expression is not tight.
# This should use a zigzag join.
query T
EXPLAIN (DISTSQL)
SELECT a FROM json_tab WHERE b @> '[[1, 2]]' ORDER BY a
----
distribution: local
vectorized: true
·
• sort
│ estimated row count: 0
│ order: +a
│
└── • lookup join
    │ estimated row count: 0
    │ table: json_tab@json_tab_pkey
    │ equality: (a) = (a)
    │ equality cols are key
    │ pred: b @> '[[1, 2]]'
    │
    └── • zigzag join
          estimated row count: 0
          left table: json_tab@foo_inv
          left columns: (a, b_inverted_key)
          left fixed values: 1 column
          right table: json_tab@foo_inv
          right columns: (a, b_inverted_key)
          right fixed values: 1 column
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkl9v0zAUxd_5FFf3ZSAsNU7f_BS2BdGpNCOZxJ8SVW5zqbxlvsF2EFDlu6MkYlsRrdY33z_n-Hcs79B_r1Fh-ul6_ma2gJeXs-Km-DB_BUU6Ty9uQMPbPHsPt57tKug1fHyX5imsIfnaRtGU4Gy5lALisjyDLL9Mczj_DBoFWq5ooe_Jo1qixFJg43hD3rPrW7thYVb9RBUJNLZpQ98uBW7YEaodBhNqQoVfzPa33l6xseQmEQqsKGhTD76FqQgi9UCXfGNeGfsDBV5w3d5br0ALWKMYV-WzVrM2KEimWHYCuQ2PaD7oLaGSnXg-fg-ek67ITeQ-_APJ38OquaNfKHDOfNc2cMvGAlsFSS_MFpDE_3l1pdRVkS3On-Z4DCEPhohPCVGwC-Qm8X6ARL4-aD89xT4n37D1tGd_yDnqSoFUbWn8Rp5bt6Frx5vhmrHMBt3QqMiHcSrHYmbHUQ_4VCyPiuPj4vioePqPuOxe_AkAAP___0EcUw==

subtest array

statement ok
CREATE TABLE array_tab (
  a INT PRIMARY KEY,
  b INT[],
  FAMILY (a, b)
)

statement ok
CREATE INVERTED INDEX foo_inv ON array_tab(b)

statement ok
INSERT INTO array_tab VALUES
  (1, '{}'),
  (2, '{1}'),
  (3, '{1, 2}'),
  (4, '{1, 3}'),
  (5, '{1, 2, 3, 4}')

statement ok
ANALYZE array_tab

statement ok
ALTER TABLE array_tab SPLIT AT VALUES (3), (3)

statement ok
ALTER TABLE array_tab EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 3), (ARRAY[3], 5)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder
FROM [SHOW EXPERIMENTAL_RANGES FROM TABLE array_tab] ORDER BY lease_holder
----
start_key  end_key  replicas  lease_holder
NULL       /3       {1}       1
/3         NULL     {3}       3

# This should use a zigzag join.
query T
EXPLAIN (DISTSQL)
SELECT a FROM array_tab@foo_inv WHERE b @> '{1, 2}' ORDER BY a
----
distribution: local
vectorized: true
·
• sort
│ estimated row count: 0
│ order: +a
│
└── • lookup join
    │ estimated row count: 0
    │ table: array_tab@array_tab_pkey
    │ equality: (a) = (a)
    │ equality cols are key
    │ pred: b @> ARRAY[1,2]
    │
    └── • zigzag join
          estimated row count: 0
          left table: array_tab@foo_inv
          left columns: (a, b_inverted_key)
          left fixed values: 1 column
          right table: array_tab@foo_inv
          right columns: (a, b_inverted_key)
          right fixed values: 1 column
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkk9v00AQxe98itFcCmKleJ0L2pNDa4RRiIsdCUqxok08RKbpjtldI4rl745so6ahStTe5t_v-T1rW3Q_d6gw_nI5nyULeHmR5Mv80_wV5PE8Pl-ChndZ-hG0tfpu5fU6-s68qswv-Pw-zmJYQ_StCYIpwVkrBYTdGaTZRZzB2yvQKNBwSQt9Sw7VNUosBNaWN-Qc237UDgdJ-RtVILAydeP7cSFww5ZQtegrvyNU-LXa_tHbD1wZspMABZbkdbUbdPOqJAjUY5Mo8Jx3za1xCrSANYrxVj7tNm28gmiKRSeQG78357zeEirZiacH6K1npEuyE3lof2_lvlrVN3SHAufMN00NP7gywEZB1KPpAqLw_r_Psmx2dS2VUsli-UaE_4riYZ59GHk0TPicMDlbT3YSHgaJ5Ouj8tPnyGfkajaODuSPKQddIZDKLY0PynFjN3RpeTN8ZmzTgRsGJTk_buXYJGZc9QYfwvIkHJ6Gw5Pw9D-46F78DQAA__9VuCLV
