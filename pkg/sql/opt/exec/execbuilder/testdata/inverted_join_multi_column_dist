# LogicTest: 5node

statement ok
CREATE TABLE j1 (
  k INT PRIMARY KEY,
  j JSON
)

# Insert many types of JSON values.
statement ok
INSERT INTO j1 VALUES
  (1, '{"a": "b"}'),
  (2, '[1,2,3,4, "foo"]'),
  (3, '{"a": {"b": "c"}}'),
  (4, '{"a": {"b": [1]}}'),
  (5, '{"a": {"b": [1, [2]]}}'),
  (6, '{"a": {"b": [[2]]}}'),
  (7, '{"a": "b", "c": "d"}'),
  (8, '{"a": {"b":true}}'),
  (9, '{"a": {"b":false}}'),
  (10, '"a"'),
  (11, 'null'),
  (12, 'true'),
  (13, 'false'),
  (14, '1'),
  (15, '1.23'),
  (16, '[{"a": {"b": [1, [2]]}}, "d"]'),
  (17, '{}'),
  (18, '[]'),
  (19, '["a", "a"]'),
  (20, '[{"a": "a"}, {"a": "a"}]'),
  (21, '[[[["a"]]], [[["a"]]]]'),
  (22, '[1,2,3,1]'),
  (23, '{"a": 123.123}'),
  (24, '{"a": 123.123000}'),
  (25, '{"a": [{}]}'),
  (26, '[[], {}]'),
  (27, '[true, false, null, 1.23, "a"]'),
  (28, '{"a": {}}'),
  (29, NULL),
  (30, '{"a": []}'),
  (31, '{"a": {"b": "c", "d": "e"}, "f": "g"}'),
  (32, '{"a": [1]}'),
  (33, '[1, "bar"]'),
  (34, '{"a": 1}'),
  (35, '[1]'),
  (36, '[2]'),
  (37, '[[1]]'),
  (38, '[[2]]'),
  (39, '["a"]'),
  (40, '{"a": [[]]}'),
  (41, '[[1, 2]]'),
  (42, '[[1], [2]]'),
  (43, '[{"a": "b", "c": "d"}]'),
  (44, '[{"a": "b"}, {"c": "d"}]')

statement ok
CREATE TABLE j2 (
  k INT PRIMARY KEY,
  i INT,
  j JSON,
  INVERTED INDEX ij_idx (i, j)
)

# Insert combinations of i and j. The first 3 primes after 44 are used to avoid
# primary key collisions.
statement ok
INSERT INTO j2 (
  SELECT k * i, i, j FROM j1
  CROSS JOIN (VALUES (47), (53), (59)) t1(i)
)

statement ok
ALTER TABLE j2 SPLIT AT VALUES (44), (88)

statement ok
ALTER TABLE j2 EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 44), (ARRAY[3], 88)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder
FROM [SHOW EXPERIMENTAL_RANGES FROM TABLE j2 WITH DETAILS] ORDER BY lease_holder
----
start_key           end_key       replicas  lease_holder
<before:/Table/62>  …/1/44        {1}       1
…/1/44              …/1/88        {2}       2
…/1/88              <after:/Max>  {3}       3

# This query performs an inverted join.
query T
EXPLAIN (DISTSQL)
SELECT * FROM j2@ij_idx, j1 WHERE i IN (2, 3) AND j2.j @> j1.j ORDER BY j1.k, j2.k
----
distribution: local
vectorized: true
·
• sort
│ order: +k,+k
│
└── • lookup join
    │ table: j2@j2_pkey
    │ equality: (k) = (k)
    │ equality cols are key
    │ pred: j @> j
    │
    └── • inverted join
        │ table: j2@ij_idx
        │
        └── • cross join
            │
            ├── • scan
            │     missing stats
            │     table: j1@j1_pkey
            │     spans: FULL SCAN
            │
            └── • values
                  size: 1 column, 2 rows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUlNty2jwUhe__p9DsK_gjgi3ZQHylJNAJHQIpMD1My2QcvElsjOVKdpNMhnfvyOQAbk3DpQ7-1lrsJZ5A_4zBg97Xq8Fpf0hq3f5kOvk0qJNJb9A7n5L_yYfx6JJETITRdRg8UBLZ5MtFb9wjtZCYLxglvF4np8MuqUXsOCLiR25ZHElkH0d1Mhp3e2Ny9s0sl5RE7HgJFBIZ4NBfoQbvO9gwo5AqOUetpTJbT8WFfvAAnkUhTNI8M9szCnOpELwnyMIsRvBg6t_EOEY_QNW0gEKAmR_GBTayRWRfp0t8BArnMs5XifaI8QAUJqlvVg2YrSnIPHtT0Jl_i-DZW5b6XfCsNX2_q89-nKNu2ruGHHJGaozM7_JkqeuVylZJ2a5UfhPME6kCVBjsKM7Ml_-68hf7F76--yjDBFWT7UYY5ZlHhE0Fo4JXJmClBOyQ366f_EKVYfBsgJeG-lJEoK83ew-pIqL1WjzBSgMPNzPfNu9Q4Vb65yX__BD_xvdzIZ0_vEfspZADKZd5SiIZJkQmHhEm6GhIRPudOVwqWlS0aRGoMopTiuIcEmUiVYaq6e7GEM4RFfZRpaRbknQPkRyjTmWisdzjd72Uhm3ajMEtbl6Hlrma45WS8-LuZjkqQMVGgDrbnLLNop8UR7ZRUOivXh_-Nsk-gMS2SXaZxPaS-A7J2iaxMonvJTnVJF4mOXtJbjXJKZPcvaRWNckyU1zE8v46DMCDNnc5n5-0Gm3X4Q2H3Zw0Olan3egwHrjtDvcXN-affxH7t9pUaXIn7wvs9DE1RVj4sUYKl_4Su5ihWoVJqLNw_nyyXv_3OwAA___Nfjqb

statement ok
CREATE TABLE a1 (
  k INT PRIMARY KEY,
  a INT[]
)

statement ok
INSERT INTO a1 VALUES
  (1, '{}'),
  (2, '{1}'),
  (3, '{2}'),
  (4, '{1, 2}'),
  (5, '{1, 3}'),
  (6, '{1, 2, 3, 4}'),
  (7, ARRAY[NULL]::INT[]),
  (8, NULL)

statement ok
CREATE TABLE a2 (
  k INT PRIMARY KEY,
  i INT,
  a INT[],
  INVERTED INDEX ia_idx (i, a)
)

# Insert combinations of i and a. The first 3 primes after 44 are used to avoid
# primary key collisions.
statement ok
INSERT INTO a2 (
  SELECT k*i, i, a FROM a1
  CROSS JOIN (VALUES (47), (53), (59)) t1(i)
)

statement ok
ALTER TABLE a2 SPLIT AT VALUES (8), (16)

statement ok
ALTER TABLE a2 EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 8), (ARRAY[3], 16)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder
FROM [SHOW EXPERIMENTAL_RANGES FROM TABLE a2 WITH DETAILS] ORDER BY lease_holder
----
start_key                 end_key       replicas  lease_holder
<before:/Table/107/1/88>  …/1/8         {1}       1
…/1/8                     …/1/16        {2}       2
…/1/16                    <after:/Max>  {3}       3

# This query performs an inverted join.
query T
EXPLAIN (DISTSQL)
SELECT * FROM a2@ia_idx, a1 WHERE i IN (2, 3) AND a2.a @> a1.a ORDER BY a1.k, a2.k
----
distribution: local
vectorized: true
·
• sort
│ order: +k,+k
│
└── • lookup join
    │ table: a2@a2_pkey
    │ equality: (k) = (k)
    │ equality cols are key
    │ pred: a @> a
    │
    └── • inverted join
        │ table: a2@ia_idx
        │
        └── • cross join
            │
            ├── • scan
            │     missing stats
            │     table: a1@a1_pkey
            │     spans: FULL SCAN
            │
            └── • values
                  size: 1 column, 2 rows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUk9tz2jgYxd_3r9B8T7ARwZIN2fhJSWAn7BDIAtPLtExG2J8TF2O5kt0kk-F_78jkAm5Nw6Mu_p1zrPM9gfmegA_9T9fDs8GINHqD6Wz6_7BJpv1h_2JG_ib_TsZXRHIRy5s4fKBEMvLxsj_pk0ZM7BecErfZJGejHmlIfiyJ-Fo4jotEsmPZJONJrz8h55_tckmJ5MdLoJCqEEdyhQb8L8BgTiHTKkBjlLZbT-WFQfgAvkMhTrMit9tzCoHSCP4T5HGeIPgwk4sEJyhD1G0HKISYyzgpsZIJyW6yJT4ChQuVFKvU-MR6AArTTNpVC-ZrCqrI3xRMLm8RfLZladAD31nT97v6IJMCTZvtGvLIOWlwEtwV6dI0a5WdijKrVX4TLFKlQ9QY7ijO7Zd_uvIb-5fS3P2n4hR1m-9GGBe5TwSjglPh1ibglQT8kH83SH-gzjF8NuBWHvWliEBfb_YfMk1E97V4glcePN68-bZ5j4pOrX-34t89xL_1_VxI7xfvkr8UcqjUssjINxWnRKU-ETboeETEyTtzdKjoUnFCy0C1UbxKFO-QKFOlc9Ttzm4M4R1RwY5qJTsVyc4hkhM0mUoNVnv8rklpMdtmDG9xMx1GFTrAa62C8u5mOS5B5UaIJt-c8s1ikJZHzCpolKvXwd8msQNIfJvEqiS-l-TukJxtEq-S3L0kr57kVkneXlKnnuRVSZ29pG49ybGvGCXq_iYOwQc38v5hKBetYBGFLY9zt3XKedSKuqfBgkUMXdcOWpTIW2OrNL1T9yV29pjZIkQyMUjhSi6xhznqVZzGJo-D55P1-q-fAQAA__-zCDti
