# LogicTest: 5node

statement ok
CREATE TABLE j1 (
  k INT PRIMARY KEY,
  j JSON
)

# Insert many types of JSON values.
statement ok
INSERT INTO j1 VALUES
  (1, '{"a": "b"}'),
  (2, '[1,2,3,4, "foo"]'),
  (3, '{"a": {"b": "c"}}'),
  (4, '{"a": {"b": [1]}}'),
  (5, '{"a": {"b": [1, [2]]}}'),
  (6, '{"a": {"b": [[2]]}}'),
  (7, '{"a": "b", "c": "d"}'),
  (8, '{"a": {"b":true}}'),
  (9, '{"a": {"b":false}}'),
  (10, '"a"'),
  (11, 'null'),
  (12, 'true'),
  (13, 'false'),
  (14, '1'),
  (15, '1.23'),
  (16, '[{"a": {"b": [1, [2]]}}, "d"]'),
  (17, '{}'),
  (18, '[]'),
  (19, '["a", "a"]'),
  (20, '[{"a": "a"}, {"a": "a"}]'),
  (21, '[[[["a"]]], [[["a"]]]]'),
  (22, '[1,2,3,1]'),
  (23, '{"a": 123.123}'),
  (24, '{"a": 123.123000}'),
  (25, '{"a": [{}]}'),
  (26, '[[], {}]'),
  (27, '[true, false, null, 1.23, "a"]'),
  (28, '{"a": {}}'),
  (29, NULL),
  (30, '{"a": []}'),
  (31, '{"a": {"b": "c", "d": "e"}, "f": "g"}'),
  (32, '{"a": [1]}'),
  (33, '[1, "bar"]'),
  (34, '{"a": 1}'),
  (35, '[1]'),
  (36, '[2]'),
  (37, '[[1]]'),
  (38, '[[2]]'),
  (39, '["a"]'),
  (40, '{"a": [[]]}'),
  (41, '[[1, 2]]'),
  (42, '[[1], [2]]'),
  (43, '[{"a": "b", "c": "d"}]'),
  (44, '[{"a": "b"}, {"c": "d"}]')

statement ok
CREATE TABLE j2 (
  k INT PRIMARY KEY,
  i INT,
  j JSON,
  INVERTED INDEX ij_idx (i, j)
)

# Insert combinations of i and j. The first 3 primes after 44 are used to avoid
# primary key collisions.
statement ok
INSERT INTO j2 (
  SELECT k * i, i, j FROM j1
  CROSS JOIN (VALUES (47), (53), (59)) t1(i)
)

statement ok
ALTER TABLE j2 SPLIT AT VALUES (44), (88)

statement ok
ALTER TABLE j2 EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 44), (ARRAY[3], 88)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder
FROM [SHOW EXPERIMENTAL_RANGES FROM TABLE j2] ORDER BY lease_holder
----
start_key  end_key  replicas  lease_holder
NULL       /44      {1}       1
/44        /88      {2}       2
/88        NULL     {3}       3

# This query performs an inverted join.
query T
EXPLAIN (DISTSQL)
SELECT * FROM j2@ij_idx, j1 WHERE i IN (2, 3) AND j2.j @> j1.j ORDER BY j1.k, j2.k
----
distribution: local
vectorized: true
·
• sort
│ order: +k,+k
│
└── • lookup join
    │ table: j2@j2_pkey
    │ equality: (k) = (k)
    │ equality cols are key
    │ pred: j @> j
    │
    └── • inverted join
        │ table: j2@ij_idx
        │
        └── • cross join
            │
            ├── • scan
            │     missing stats
            │     table: j1@j1_pkey
            │     spans: FULL SCAN
            │
            └── • values
                  size: 1 column, 2 rows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUk91um0wQhs-_qxjNkf1lG8MCjsTRJjFVXLl2iq3-qEURNaOENWHpLlSuLN97Bc6f3UDrw9mdx-9jeNmg-ZGhj8Hn68n5eAq90Xi-mH-Y9GEeTILLBfwPb8PZe5BcpPImTdYMpA2froIwgF4KNcEZOP0-nE9H0JP8VIL4VlmWQyDtU9mHWTgKQrj4Uo8rBpKfrpBhrhKaxvdk0P-KNkYMC62WZIzS9dGmWRgna_QthmleVGV9HDFcKk3ob7BMy4zQx0X8PaOQ4oT0wEKGCZVxmjU_K20h7ZtiRb-Q4aXKqvvc-FA7IMN5EdfTG4y2DFVVPieYMr4l9O0t-3eLj3FWkRnY-wIuXECPw_Kuylem35pktSY9B1S50glpSvYSopr828orulexuXun0pz0gO8rz6rSB2EzwZlwWo35Mc9mnP8kXVLyEOgcvKTHYiF72gzWhQYxfCqSqCVfmrlMeK1yzjFytdRDe9w_xCR_bM9EqVVVgFRpDir3QdT_YjYFcfaapMfEkIkz1ti2errHeM6VLkkPvH1H4Z4wYZ-0RnjHRIRkCpUbOmxYS2cjhpTc0q6mRlV6SddaLZuY3ThruOYgIVPubvluGOfNVfORvYTtI2B-CPNO2NmDrUPY6YTdbtjthL1u2OuEhwdwtP3vdwAAAP__5RvQ4g==

statement ok
CREATE TABLE a1 (
  k INT PRIMARY KEY,
  a INT[]
)

statement ok
INSERT INTO a1 VALUES
  (1, '{}'),
  (2, '{1}'),
  (3, '{2}'),
  (4, '{1, 2}'),
  (5, '{1, 3}'),
  (6, '{1, 2, 3, 4}'),
  (7, ARRAY[NULL]::INT[]),
  (8, NULL)

statement ok
CREATE TABLE a2 (
  k INT PRIMARY KEY,
  i INT,
  a INT[],
  INVERTED INDEX ia_idx (i, a)
)

# Insert combinations of i and a. The first 3 primes after 44 are used to avoid
# primary key collisions.
statement ok
INSERT INTO a2 (
  SELECT k*i, i, a FROM a1
  CROSS JOIN (VALUES (47), (53), (59)) t1(i)
)

statement ok
ALTER TABLE a2 SPLIT AT VALUES (8), (16)

statement ok
ALTER TABLE a2 EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 8), (ARRAY[3], 16)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder
FROM [SHOW EXPERIMENTAL_RANGES FROM TABLE a2] ORDER BY lease_holder
----
start_key  end_key  replicas  lease_holder
NULL       /8       {1}       1
/8         /16      {2}       2
/16        NULL     {3}       3

# This query performs an inverted join.
query T
EXPLAIN (DISTSQL)
SELECT * FROM a2@ia_idx, a1 WHERE i IN (2, 3) AND a2.a @> a1.a ORDER BY a1.k, a2.k
----
distribution: local
vectorized: true
·
• sort
│ order: +k,+k
│
└── • lookup join
    │ table: a2@a2_pkey
    │ equality: (k) = (k)
    │ equality cols are key
    │ pred: a @> a
    │
    └── • inverted join
        │ table: a2@ia_idx
        │
        └── • cross join
            │
            ├── • scan
            │     missing stats
            │     table: a1@a1_pkey
            │     spans: FULL SCAN
            │
            └── • values
                  size: 1 column, 2 rows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUk11vmzAUhu_3K47OVbJ6DRhoJa7cNkzNlCUdifahDVVeOGpZqM1smDJF-e8TpF_JClsuj32evE_gZY32Z44hRp-vxmejCfSGo9l89mHch1k0ji7m8BrextP3ILnI5HWWrhhIFz5dRnEEvQxqgjPw-n04mwyhJ_mxBPGtchyPQLrHsg_TeBjFcP6lHpcMJD9eIkOlU5rIO7IYfkUXE4aF0QuyVpv6aN0sjNIVhg7DTBVVWR8nDBfaEIZrLLMyJwxxLr_nFJNMyQwcZJhSKbO8-VnpCuleF0v6jQwvdF7dKRtC7YAMZ4WspzeYbBjqqnxKsKW8IQzdDft_i48yr8gO3F0BH86hx2FxW6ml7bcmOa1JTwGV0iYlQ-lOQlKT_1p5QfdS2tt3OlNkBnxXeVqVIQiXCc6E12rMD3k2I_WLTEnpfaC395IeioXscTNaFQbEyWORRC353MxnImiV8w6Rq6Xu2-P_JSb5Q3vGWi-rAn7oTIFWIYj6X0wnIE5fkgyYOGHilDW2rZ7-IZ4zbUoyg2DXUfhHTLhHrRHBIREx2UIrS_sNa-lswpDSG9rW1OrKLOjK6EUTsx2nDdccpGTL7S3fDiPVXDUf2XPYPQDm-zDvhL0d2NmHvU7Y74b9TjjohoNO-GQPTjav_gQAAP__RTnQUg==
