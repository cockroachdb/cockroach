# LogicTest: 5node

statement ok
CREATE TABLE j1 (
  k INT PRIMARY KEY,
  j JSON
)

# Insert many types of JSON values.
statement ok
INSERT INTO j1 VALUES
  (1, '{"a": "b"}'),
  (2, '[1,2,3,4, "foo"]'),
  (3, '{"a": {"b": "c"}}'),
  (4, '{"a": {"b": [1]}}'),
  (5, '{"a": {"b": [1, [2]]}}'),
  (6, '{"a": {"b": [[2]]}}'),
  (7, '{"a": "b", "c": "d"}'),
  (8, '{"a": {"b":true}}'),
  (9, '{"a": {"b":false}}'),
  (10, '"a"'),
  (11, 'null'),
  (12, 'true'),
  (13, 'false'),
  (14, '1'),
  (15, '1.23'),
  (16, '[{"a": {"b": [1, [2]]}}, "d"]'),
  (17, '{}'),
  (18, '[]'),
  (19, '["a", "a"]'),
  (20, '[{"a": "a"}, {"a": "a"}]'),
  (21, '[[[["a"]]], [[["a"]]]]'),
  (22, '[1,2,3,1]'),
  (23, '{"a": 123.123}'),
  (24, '{"a": 123.123000}'),
  (25, '{"a": [{}]}'),
  (26, '[[], {}]'),
  (27, '[true, false, null, 1.23, "a"]'),
  (28, '{"a": {}}'),
  (29, NULL),
  (30, '{"a": []}'),
  (31, '{"a": {"b": "c", "d": "e"}, "f": "g"}'),
  (32, '{"a": [1]}'),
  (33, '[1, "bar"]'),
  (34, '{"a": 1}'),
  (35, '[1]'),
  (36, '[2]'),
  (37, '[[1]]'),
  (38, '[[2]]'),
  (39, '["a"]'),
  (40, '{"a": [[]]}'),
  (41, '[[1, 2]]'),
  (42, '[[1], [2]]'),
  (43, '[{"a": "b", "c": "d"}]'),
  (44, '[{"a": "b"}, {"c": "d"}]')

statement ok
CREATE TABLE j2 (
  k INT PRIMARY KEY,
  i INT,
  j JSON,
  INVERTED INDEX ij_idx (i, j)
)

# Insert combinations of i and j. The first 3 primes after 44 are used to avoid
# primary key collisions.
statement ok
INSERT INTO j2 (
  SELECT k * i, i, j FROM j1
  CROSS JOIN (VALUES (47), (53), (59)) t1(i)
)

statement ok
ALTER TABLE j2 SPLIT AT VALUES (44), (88)

statement ok
ALTER TABLE j2 EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 44), (ARRAY[3], 88)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder
FROM [SHOW EXPERIMENTAL_RANGES FROM TABLE j2] ORDER BY lease_holder
----
start_key  end_key  replicas  lease_holder
NULL       /44      {1}       1
/44        /88      {2}       2
/88        NULL     {3}       3

# This query performs an inverted join.
query T
EXPLAIN (DISTSQL)
SELECT * FROM j2@ij_idx, j1 WHERE i IN (2, 3) AND j2.j @> j1.j ORDER BY j1.k, j2.k
----
distribution: local
vectorized: true
·
• sort
│ order: +k,+k
│
└── • lookup join
    │ table: j2@j2_pkey
    │ equality: (k) = (k)
    │ equality cols are key
    │ pred: j @> j
    │
    └── • inverted join
        │ table: j2@ij_idx
        │
        └── • cross join
            │
            ├── • scan
            │     missing stats
            │     table: j1@j1_pkey
            │     spans: FULL SCAN
            │
            └── • values
                  size: 1 column, 2 rows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUk11vmzAUhu_3K47OVbJ6DRhoJa7cD6ZmypKOVPvQhioWjlocipkNU6cq_30C-hGywZbLY_vhfQwvD2h-ZOhj8PlydjKdw-h8urxafpiNYRnMgrMreA1vw8V7kFyk8jpN7hlIGz5dBGEAoxRqgjNwxmM4mZ_DSPJDCeJbZVkOgbQP5RgW4XkQwumXelwzkPxwjQxzldA8viOD_le0MWJYaLUiY5Sulx6aA9PkHn2LYZoXVVkvRwxXShP6D1imZUbo41X8PaOQ4oT0xEKGCZVxmjWPlbaQ9nWxpl_I8Exl1V1ufKgdkOGyiOvpDUYbhqoqXxJMGd8Q-vaG_b_FxziryEzsroALpzDisLqt8rUZ9yZZvUkvAVWudEKakk5CVJP_OvIX3YvY3L5TaU56wrvKi6r0QdhMcCacXmO-z7uZ5j9Jl5Q8Bjo7H-mpWMieTwb3hQZx9FwkUUtum7lMeL1yzj5ytdRje9w_xCR_as9MqXVVgFRpDir3QdS3WMxBHHclt1uWtkVrvT0mjpg4Zs0FetXdfdSXSpekJ15XW7gHTNgHvRHePhEhmULlhnZL11PjiCElN9Q216hKr-hSq1UT046LhmsWEjJlu8vbYZo3W81_tw3be8B8F-aDsNOBrV3YGYTdYdgdhL1h2BuEj3bgaPPqdwAAAP__zTvWYw==

statement ok
CREATE TABLE a1 (
  k INT PRIMARY KEY,
  a INT[]
)

statement ok
INSERT INTO a1 VALUES
  (1, '{}'),
  (2, '{1}'),
  (3, '{2}'),
  (4, '{1, 2}'),
  (5, '{1, 3}'),
  (6, '{1, 2, 3, 4}'),
  (7, ARRAY[NULL]::INT[]),
  (8, NULL)

statement ok
CREATE TABLE a2 (
  k INT PRIMARY KEY,
  i INT,
  a INT[],
  INVERTED INDEX ia_idx (i, a)
)

# Insert combinations of i and a. The first 3 primes after 44 are used to avoid
# primary key collisions.
statement ok
INSERT INTO a2 (
  SELECT k*i, i, a FROM a1
  CROSS JOIN (VALUES (47), (53), (59)) t1(i)
)

statement ok
ALTER TABLE a2 SPLIT AT VALUES (8), (16)

statement ok
ALTER TABLE a2 EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 8), (ARRAY[3], 16)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder
FROM [SHOW EXPERIMENTAL_RANGES FROM TABLE a2] ORDER BY lease_holder
----
start_key  end_key  replicas  lease_holder
NULL       /8       {1}       1
/8         /16      {2}       2
/16        NULL     {3}       3

# This query performs an inverted join.
query T
EXPLAIN (DISTSQL)
SELECT * FROM a2@ia_idx, a1 WHERE i IN (2, 3) AND a2.a @> a1.a ORDER BY a1.k, a2.k
----
distribution: local
vectorized: true
·
• sort
│ order: +k,+k
│
└── • lookup join
    │ table: a2@a2_pkey
    │ equality: (k) = (k)
    │ equality cols are key
    │ pred: a @> a
    │
    └── • inverted join
        │ table: a2@ia_idx
        │
        └── • cross join
            │
            ├── • scan
            │     missing stats
            │     table: a1@a1_pkey
            │     spans: FULL SCAN
            │
            └── • values
                  size: 1 column, 2 rows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUk11vmzwUx--fT3F0rpKnXgMGWokrtw1TM2VJR6K9aEOVF45aFoqZDVOmKN99AvoSssGWy2P7x_9n-LNF8z1FH4OPN9OLyQwG48liuXg3HcIimAZXS_gfXofztyC5SORtEm8YSBs-XAdhAIMEKoIzcIZDuJiNYSD5qQTxpbQsh0Dap3II83AchHD5qRrXDCQ_XSPDTMU0kw9k0P-MNkYMc61WZIzS1dK2PjCJN-hbDJMsL4tqOWK4UprQ32KRFCmhj0v5NaWQZEx6ZCHDmAqZpPVjpS2kfZuv6ScyvFJp-ZAZHyoHZLjIZTW9wmjHUJXFS4Ip5B2hb-_Yv1u8l2lJZmS3BVy4hAGH1X2Zrc2wM8nqTHoJKDOlY9IUtxKiivzbkT_oXktz_0YlGekRbyvPy8IHYTPBmXA6jfkx72aS_SBdUPwY6Bx8pKdiIXs-GWxyDeLsuUiiktw3c5nwOuWcY-Qqqcf2uL-JSf7UnqlS6zKHbyrJQGU-iOoW8xmI87bkfsuSpmiNt8fEGRPnrL5Ap7p7jPpC6YL0yGtrC_eECfukM8I7JiIkk6vM0GHpOmocMaT4jprmGlXqFd1otapjmnFec_VCTKZodnkzTLJ6q_7v9mH7CJgfwrwXdlqwdQg7vbDbD7u9sNcPe73w2QEc7f77FQAA__8M79XK
