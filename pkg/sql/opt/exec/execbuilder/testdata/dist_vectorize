# LogicTest: 5node

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT)

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i)

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT)

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv WITH DETAILS]
ORDER BY 1
----
<before:/Table/61>  …/1/1                   {1}  1
…/1/1               …/1/2                   {1}  1
…/1/2               …/1/3                   {2}  2
…/1/3               …/1/4                   {3}  3
…/1/4               …/1/5                   {4}  4
…/1/5               <after:/Table/107/1/1>  {5}  5

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw WITH DETAILS]
----
<before:/Table/106/1/5>  …/1/1         {5}  5
…/1/1                    …/1/2         {1}  1
…/1/2                    …/1/3         {2}  2
…/1/3                    …/1/4         {3}  3
…/1/4                    …/1/5         {4}  4
…/1/5                    <after:/Max>  {5}  5

# Verify that EXPLAIN ANALYZE (DISTSQL) works in a distributed setting.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT count(*) FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 5 (40 B, 5 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• group (scalar)
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 1
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows read: 5
      KV bytes read: 40 B
      KV gRPC calls: 5
      estimated max memory allocated: 0 B
      missing stats
      table: kv@kv_pkey
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzslt1O2z4UwO__T2Gdq_KXq-arUHLFVjEJbVDUFnYxVcgkR1nUxM5sp7RDfay9wJ5saky2pkBINE1MWi99PuqTX3-2fA_qSwI-TE4_nA6nJBA5153_D8i78eiczBdAgYsQL1iKCvxPYAMFByi4QMEDCn2YUcikCFApITcl90XDWbgE36IQ8yzXm_CMQiAkgn8POtYJgg9TdpvgGFmIsmcBhRA1i5Nim_niZL64yea4AgpDkeQpVz5QmGSMK590e5sZ3l8THafoE-v7N2XWgeAauY4Ff5SS4k4RiSz0iW0ityuNZWhA3ppgNL4ckoAliTJ159fDIVEaM4OGdHCpezHXBz6xiqlNAeL8uYKULUmKqZArwpJEBExj6BOr2PCW6eAzKiJyneXaJ5v6YtAyYMNsTcGsHjAqzSIE317T5qjfRJHEiGkhe_0q6eHo6mJ6Mx59nHQOgAIuMcgf8_uNOZ1n5_w1Xs6FDFFiWJlttq7_EntHmsnV-c3ZxbRzYv-ZL3ErX2I3l9tuJXfP6fbcvd5tYG9JcfiqejvNpXDaSeF2e95eijawt6Q4elUp3OZSuO2k8LrFdb6XojHsLSkGryqF11wKr50U_e5eiTaot5Q4_mveRk_MOUaVCa5w54309C9bm7cThhGah5YSuQzwUoqg2MYsR0VfEQhRaZO1zeKMm9RmwO1mu7bZqTTbu81O_c4vbO3Wdnv1zV6buQuKBVDgqO-EnJOEaeTB6uefXsbvWKyrOoSoUMYsib-yx66UbQ8HLsB4gQ-HrkyVJ6_MmdNXZlNUikWVAquxg1Uk_Vokh_U8D_c8d5Ec1SIZ1PMc7HnuIjmuvy2sFy6q-mvu3yA6W__3IwAA__9TuuRF

query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv JOIN kw ON kv.k = kw.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• merge join
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│ equality: (k) = (k)
│ left cols are key
│ right cols are key
│
├── • scan
│     nodes: <hidden>
│     regions: <hidden>
│     actual row count: 5
│     KV time: 0µs
│     KV contention time: 0µs
│     KV rows read: 5
│     KV bytes read: 40 B
│     KV gRPC calls: 5
│     estimated max memory allocated: 0 B
│     missing stats
│     table: kv@kv_pkey
│     spans: FULL SCAN
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows read: 5
      KV bytes read: 40 B
      KV gRPC calls: 5
      estimated max memory allocated: 0 B
      missing stats
      table: kw@kw_pkey
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm91u2zYUx-_3FASv2pWuTMl2EwEFjBkdkG6Ji7TozWAMjHRmC5JFV6TteEEeay-wJxskzU0tWx8U2lCJdBfxwzr8naO__qaZOyy-BNjGH9_9_m7yCf2Mfr2eXiJ_g95PL66Qv0XTK-RvXvvoLfK3r31McMhduGJLENj-A1NMsIkJtjDBA0zwEM8IXkXcASF4FA-5SyZcuLfY7hPshau1jJtnBDs8AmzfYenJALCNP7GbAK6BuRAZfUywC5J5QXIbfzP2N3-ufNhhgic8WC9DYSOfoA0m-OOKxVc9Iw7kt89IekuwUf_ff0R67fBQQig9Hh51RXwrUATMtRFNW252EvZNZ-iXtHF-_WGCHBYEIh13-XkyQULCCjl8HUr0Am6l4YXypY36SejpAAA_b8CS3aIlLHm0QywIuMMkuDbqJze8YdJZgEB8LVdraaN4fBLovoHi2T3B6VWKeI_wZocWTCwO4Y3j8TOChWRzwDa9J_VyMsrkZDv2t6dysn3IiUG7rFTLipmblYfP4ZELEbjZz3kV37jSqBMJvoRoDu-5F0Jk0MxTF8Bf8sWYvnr5NvLmi_RPTPA0Xu2YkrFJxhYZx4893IKzPs5lEc-4T3wJkITlCrme8NFasDlUxt3P4H5AaVVAuQ5PYTpJ6Ir3-Mqgw0M2OSsuDXuYG_bgIGxa_bmk6lppmD3D6p5LZbVUyMqbGmrZZaWWWlI9akmfkFpmceeppVm9wM0asmP1jEFX4Mqyo5CVsxqy02WlluyYemTHfIayY1UvcKuG7Ax6xrArcGXZUcjKeQ3Z6bJSS3YsPbJjPSHZMSvKzqB6gQ9qyM6w15W3sugo5GSoLjo9gyIWuogiLhcQdflRlp-BHvkZPCH5qep6SvZer0GseCggs0V1-pP7MUFw55DmRfB15MCHiDvJbdLLaTIv-b7sgpBpr5leXIT7LiGZLNri-uGbeirRj3KjD0FueeSjgEkInd3X8PftW-bJw4W5ICDyWOD9zY5XvZ_2vwA44G2SZX_TtVeCr33Jmve9SxAxiuzk74_kvEOSRULzi_xxmNACJmffhQlVZjJsY51QBS00G6eFxdGPcqNvbULPOyQlWvj4TLRoYQmTYRvrxMwy6X_LxDp8PWQnW4WT6aEW9RunpIOanvgZl0Mxknyj_RQS2kpPXIxEuyduIhPdnljLu3FY0xM_4zIpRpJvtJuhhcXRt9ITFyPR7ombyES3J9aihSMVT9wOJG86q6yGpJV70sVI8v23rp9nVKJvp1UuYaLbKmthctZZZTUkrdyTLkaS77-boYXF0bfTKpcw0W2VtTA576zy0a8MdY9aPOMyKWGi2yw3sU5auVtdwqTAgzdj060s_lb6ZVr3vEV7meh2zHoEsTvGocqkwIg3RBC7MxcnoCgdunh0JmYBEzoqg0Ir_29GBsrRYZLONpcw0W2bm8iknba5mIn2rWs9dqIESr4Xb8irU-V4WlvenCrn0zom7bXNSsfe2vL9SuncWwO_SxydVWmUbX6cnM7uf_ovAAD__1q89a8=

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv
----
│
├ Node 1
│ └ *colflow.BatchFlowCoordinator
│   └ *colexec.invariantsChecker
│     └ *colexec.orderedAggregator
│       └ *colexecbase.distinctChainOps
│         └ *colexec.invariantsChecker
│           └ *colexec.ParallelUnorderedSynchronizer
│             ├ *colexec.invariantsChecker
│             │ └ *colexec.countOp
│             │   └ *colexec.invariantsChecker
│             │     └ *colexecutils.CancelChecker
│             │       └ *colexec.invariantsChecker
│             │         └ *colfetcher.ColBatchScan
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             └ *colexec.invariantsChecker
│               └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecutils.CancelChecker
│             └ *colexec.invariantsChecker
│               └ *colfetcher.ColBatchScan
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecutils.CancelChecker
│             └ *colexec.invariantsChecker
│               └ *colfetcher.ColBatchScan
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecutils.CancelChecker
│             └ *colexec.invariantsChecker
│               └ *colfetcher.ColBatchScan
└ Node 5
  └ *colrpc.Outbox
    └ *colexecutils.deselectorOp
      └ *colexec.invariantsChecker
        └ *colexec.countOp
          └ *colexec.invariantsChecker
            └ *colexecutils.CancelChecker
              └ *colexec.invariantsChecker
                └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv NATURAL INNER HASH JOIN kv kv2
----
│
├ Node 1
│ └ *colflow.BatchFlowCoordinator
│   └ *colexec.invariantsChecker
│     └ *colexec.orderedAggregator
│       └ *colexecbase.distinctChainOps
│         └ *colexec.invariantsChecker
│           └ *colexec.ParallelUnorderedSynchronizer
│             ├ *colexec.invariantsChecker
│             │ └ *colexec.countOp
│             │   └ *colexec.invariantsChecker
│             │     └ *colexecbase.simpleProjectOp
│             │       └ *colexecdisk.diskSpillerBase
│             │         ├ *colexecjoin.hashJoiner
│             │         │ ├ *colexec.invariantsChecker
│             │         │ │ └ *colexec.ParallelUnorderedSynchronizer
│             │         │ │   ├ *colexec.invariantsChecker
│             │         │ │   │ └ *colflow.routerOutputOp
│             │         │ │   │   └ *colflow.HashRouter
│             │         │ │   │     └ *colexec.invariantsChecker
│             │         │ │   │       └ *colexecutils.CancelChecker
│             │         │ │   │         └ *colexec.invariantsChecker
│             │         │ │   │           └ *colfetcher.ColBatchScan
│             │         │ │   ├ *colexec.invariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   ├ *colexec.invariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   ├ *colexec.invariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   └ *colexec.invariantsChecker
│             │         │ │     └ *colrpc.Inbox
│             │         │ └ *colexec.invariantsChecker
│             │         │   └ *colexec.ParallelUnorderedSynchronizer
│             │         │     ├ *colexec.invariantsChecker
│             │         │     │ └ *colflow.routerOutputOp
│             │         │     │   └ *colflow.HashRouter
│             │         │     │     └ *colexec.invariantsChecker
│             │         │     │       └ *colexecutils.CancelChecker
│             │         │     │         └ *colexec.invariantsChecker
│             │         │     │           └ *colfetcher.ColBatchScan
│             │         │     ├ *colexec.invariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     ├ *colexec.invariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     ├ *colexec.invariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     └ *colexec.invariantsChecker
│             │         │       └ *colrpc.Inbox
│             │         ├ *colexec.invariantsChecker
│             │         ├ *colexec.invariantsChecker
│             │         └ *colexecdisk.hashBasedPartitioner
│             │           ├ *colexecdisk.bufferExportingOperator
│             │           └ *colexecdisk.bufferExportingOperator
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             └ *colexec.invariantsChecker
│               └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecdisk.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.invariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.invariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.invariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   └ *colexec.invariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.invariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.invariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.invariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     └ *colexec.invariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.invariantsChecker
│               ├ *colexec.invariantsChecker
│               └ *colexecdisk.hashBasedPartitioner
│                 ├ *colexecdisk.bufferExportingOperator
│                 └ *colexecdisk.bufferExportingOperator
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecdisk.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.invariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.invariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.invariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   └ *colexec.invariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.invariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.invariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.invariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     └ *colexec.invariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.invariantsChecker
│               ├ *colexec.invariantsChecker
│               └ *colexecdisk.hashBasedPartitioner
│                 ├ *colexecdisk.bufferExportingOperator
│                 └ *colexecdisk.bufferExportingOperator
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecdisk.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.invariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.invariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.invariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   └ *colexec.invariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.invariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.invariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.invariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     └ *colexec.invariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.invariantsChecker
│               ├ *colexec.invariantsChecker
│               └ *colexecdisk.hashBasedPartitioner
│                 ├ *colexecdisk.bufferExportingOperator
│                 └ *colexecdisk.bufferExportingOperator
└ Node 5
  └ *colrpc.Outbox
    └ *colexecutils.deselectorOp
      └ *colexec.invariantsChecker
        └ *colexec.countOp
          └ *colexec.invariantsChecker
            └ *colexecbase.simpleProjectOp
              └ *colexecdisk.diskSpillerBase
                ├ *colexecjoin.hashJoiner
                │ ├ *colexec.invariantsChecker
                │ │ └ *colexec.ParallelUnorderedSynchronizer
                │ │   ├ *colexec.invariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.invariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.invariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.invariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   └ *colexec.invariantsChecker
                │ │     └ *colflow.routerOutputOp
                │ │       └ *colflow.HashRouter
                │ │         └ *colexec.invariantsChecker
                │ │           └ *colexecutils.CancelChecker
                │ │             └ *colexec.invariantsChecker
                │ │               └ *colfetcher.ColBatchScan
                │ └ *colexec.invariantsChecker
                │   └ *colexec.ParallelUnorderedSynchronizer
                │     ├ *colexec.invariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.invariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.invariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.invariantsChecker
                │     │ └ *colrpc.Inbox
                │     └ *colexec.invariantsChecker
                │       └ *colflow.routerOutputOp
                │         └ *colflow.HashRouter
                │           └ *colexec.invariantsChecker
                │             └ *colexecutils.CancelChecker
                │               └ *colexec.invariantsChecker
                │                 └ *colfetcher.ColBatchScan
                ├ *colexec.invariantsChecker
                ├ *colexec.invariantsChecker
                └ *colexecdisk.hashBasedPartitioner
                  ├ *colexecdisk.bufferExportingOperator
                  └ *colexecdisk.bufferExportingOperator
