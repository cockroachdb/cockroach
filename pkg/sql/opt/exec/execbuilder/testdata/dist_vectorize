# LogicTest: 5node

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT)

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i)

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT)

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv WITH DETAILS]
ORDER BY 1
----
<before:/Table/62>  …/1/1                   {1}  1
…/1/1               …/1/2                   {1}  1
…/1/2               …/1/3                   {2}  2
…/1/3               …/1/4                   {3}  3
…/1/4               …/1/5                   {4}  4
…/1/5               <after:/Table/107/1/1>  {5}  5

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw WITH DETAILS]
----
<before:/Table/106/1/5>  …/1/1         {5}  5
…/1/1                    …/1/2         {1}  1
…/1/2                    …/1/3         {2}  2
…/1/3                    …/1/4         {3}  3
…/1/4                    …/1/5         {4}  4
…/1/5                    <after:/Max>  {5}  5

# Verify that EXPLAIN ANALYZE (DISTSQL) works in a distributed setting.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT count(*) FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 5 (40 B, 10 KVs, 5 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• group (scalar)
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 1
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows read: 5
      KV pairs read: 10
      KV bytes read: 40 B
      KV gRPC calls: 5
      estimated max memory allocated: 0 B
      missing stats
      table: kv@kv_pkey
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzslt1O2zAUgO_3FNa5KpOr_BZKrtgqJqENitrCLqYKmeQoi5rYme2UdqiPtRfYk01JCGsKJK2miUnrZc5Pffz1s-V7UN9i8GB8-ul0MCG-yLjuvD0gH0bDczKbAwUuArxgCSrwvoAFFGyg4AAFFyj0YEohlcJHpYTMS-6LhrNgAZ5JIeJppvPwlIIvJIJ3DzrSMYIHE3Yb4whZgNIwgUKAmkVxscxsfjKb36QzXAKFgYizhCsPKIxTxpVHukY-w8droqMEPWL-_KHKb19wjVxHgj9JSXGniEQWeMQqI7dLjVWoT96XwXB0OSA-i2P1WJeySFZ1-brn14MBURrTkhbp4EIbEdcHHjGLjZQFiLOXChK2IAkmQi4Ji2PhM42BR8xihlum_a-oiMh0mmmP5PXF7FXAgumKQvn1QFZpFiJ41opuT_9dGEoMmRbS6NXhD4ZXF5Ob0fDzuHMAFHCBfvYU6R_Mab845-_xMi5kgBKD2mzTVfNOrA2PxlfnN2cXk86J9Xd24tR2Ym3vu7WT74bdNZy98W3Gt_Bf8-TwVY23t_fE3s0Tp2u4e0_aPGnhv-bJ0at64mzvibObJ263uPT3njR60sJ_zZP-q3ribu-Ju5snve7ekjZLWuivWXL8z7yznplzhCoVXOHGe-v5XzbzdxgGIZaPNiUy6eOlFH6xTPk5LPqKQIBKl1mr_DjjZSofcL3Zamy2a83WZrPdvHLL0k5jt9vc7O4yd0GxAAoc9Z2QMxIzjdxfPv7pVfyORbquQ4AKZcTi6Dt76krV9nAGfYzm-HAOq1R1GKtceSCrbIJKsbBWYG7tYB1JrxHJYTPPwz3PTSRHjUj6zTz7e56bSI6bbwuz5aJqvub-D6LT1ZtfAQAA__-pFABM

query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv JOIN kw ON kv.k = kw.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• merge join
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│ equality: (k) = (k)
│ left cols are key
│ right cols are key
│
├── • scan
│     nodes: <hidden>
│     regions: <hidden>
│     actual row count: 5
│     KV time: 0µs
│     KV contention time: 0µs
│     KV rows read: 5
│     KV pairs read: 10
│     KV bytes read: 40 B
│     KV gRPC calls: 5
│     estimated max memory allocated: 0 B
│     missing stats
│     table: kv@kv_pkey
│     spans: FULL SCAN
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows read: 5
      KV pairs read: 10
      KV bytes read: 40 B
      KV gRPC calls: 5
      estimated max memory allocated: 0 B
      missing stats
      table: kw@kw_pkey
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsmt1u2zYUx-_3FASv2pWuTMlOEwEFjBkdkG6Ji7TozWAMjHRmC5JFVaTteEEeay-wJxskTUn9IdkSNJCzdFfxwzr8ncO__mX4iMW3ANv484dfP4y_oB_Rz3eTG-Sv0MfJ9S3y12hyi_zVWx-9R_76rY8JDrkLt2wBAtu_YYoJNjHBFiZ4gAke4inBUcwdEILHyZDHdMK1-4DtPsFeGC1l0jwl2OExYPsRS08GgG38hd0HcAfMhdjoY4JdkMwL0tf4q5G_-j3yYYMJHvNguQiFjXyCVpjgzxFLnnpGEsgvX5H0FmCj_t9_iezZ4aGEUHo83OuK-VqgGJhrI5q13G8k5E2X6KescXb3aYwcFgTieVzEvDgfl7z35ut4jISECDl8GUr0Ch6k4YXytY366WqyAQB-0YAFe0ALWPB4g1gQcIdJcG3UT2O4Z9KZg0B8KaOltFEyPo09b6B4-kRw9pRRz6neb9Ccifk2z1EyfkqwkGwG2KZPpF6aLnbStB7560NpWr-kyaBdomonyixM1Mvv8NiFGNzd33mTvPikUQdyfgPxDD5yL4TYoDt7M4A_5KsRffP6fezN5tk_McGTZLUjSkYmGVlklIgDPICz3E9vGc-kT3wLkIRFhFxP-Ggp2Axq435BaZ2AchkewnSQ0C3v8cigw202BSs-GvawMOzBVtj09K1KqyuqYfYMq9uqTWhqhUS9q6GpXaKa0lSqRlPpGWqqeXrNmzXEyeoZg67mmxCnCom6rCFOXaKaEidTjTiZZyhO1uk1b9UQp0HPGHY134Q4VUjUVQ1x6hLVlDhZasTJOkNxGpxe84Ma4jTsdRXfhDRVSNOwujT1DIpY6CKKuJxD3KWsCZEaqBGpwRmK1JFj4jsQEQ8F7BydHf7lfkIQ3BlkeRF8GTvwKeZO-prscZLOS_-H7oKQWa-ZPVyHeZeQTJYdvf2X5PpZvZwe_UVh9CHINY99FDAJobN5Dj9vXzNPbi_MBQGxxwLvT7a_6nzav5rggLdKl_1dVy4Oz33pmvPeBYgExe7k5pFcKUZCS5BcNoKEVkVCi4u8tWVCh21kQitooamdFpZHf1EYfWsTeqUYiRItLEdCi4u8tWWyo4UtYWLuMul_z8Ta_jzsTrZKJ9NtLeprp6SDmp74jMuhHEmx0f4_JFS1J9Ywoe30xEeYqPbESvzCsKYnPuMyKUdSbLT10MLy6FV7Yg0T2k5PfISJak-sRAsvqnjidiB511nlakhaeSZdjqTYf-vxxSyPXrlV1nDfK7fKSqr8srPK1ZC08ky6HEmx_9ZDC8ujV26VlWjhESaqrbKSKr_qrPLeXxnqXrU44zI5wkS1WdaxTlp5Wn2ESYkH1-OzeSz-VvplWve-RXuZqHbMagRR72scOtZJiRHXRBC7OxcHoFS6dNGSzb93l0Qr16wjE9WuWc3eKWfSTtdczkT5ybWWUIqtuCZfziq309riEKtcT2uLmahy6a1josXxtZZQiq24JoK4d1Wlha55-vTDPwEAAP__RB4tjg==

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv
----
│
├ Node 1
│ └ *colflow.BatchFlowCoordinator
│   └ *colexec.invariantsChecker
│     └ *colexec.orderedAggregator
│       └ *colexecbase.distinctChainOps
│         └ *colexec.invariantsChecker
│           └ *colexec.ParallelUnorderedSynchronizer
│             ├ *colexec.invariantsChecker
│             │ └ *colexec.countOp
│             │   └ *colexec.invariantsChecker
│             │     └ *colexecutils.CancelChecker
│             │       └ *colexec.invariantsChecker
│             │         └ *colfetcher.ColBatchScan
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             └ *colexec.invariantsChecker
│               └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecutils.CancelChecker
│             └ *colexec.invariantsChecker
│               └ *colfetcher.ColBatchScan
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecutils.CancelChecker
│             └ *colexec.invariantsChecker
│               └ *colfetcher.ColBatchScan
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecutils.CancelChecker
│             └ *colexec.invariantsChecker
│               └ *colfetcher.ColBatchScan
└ Node 5
  └ *colrpc.Outbox
    └ *colexecutils.deselectorOp
      └ *colexec.invariantsChecker
        └ *colexec.countOp
          └ *colexec.invariantsChecker
            └ *colexecutils.CancelChecker
              └ *colexec.invariantsChecker
                └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv NATURAL INNER HASH JOIN kv kv2
----
│
├ Node 1
│ └ *colflow.BatchFlowCoordinator
│   └ *colexec.invariantsChecker
│     └ *colexec.orderedAggregator
│       └ *colexecbase.distinctChainOps
│         └ *colexec.invariantsChecker
│           └ *colexec.ParallelUnorderedSynchronizer
│             ├ *colexec.invariantsChecker
│             │ └ *colexec.countOp
│             │   └ *colexec.invariantsChecker
│             │     └ *colexecbase.simpleProjectOp
│             │       └ *colexecdisk.diskSpillerBase
│             │         ├ *colexecjoin.hashJoiner
│             │         │ ├ *colexec.invariantsChecker
│             │         │ │ └ *colexec.ParallelUnorderedSynchronizer
│             │         │ │   ├ *colexec.invariantsChecker
│             │         │ │   │ └ *colflow.routerOutputOp
│             │         │ │   │   └ *colflow.HashRouter
│             │         │ │   │     └ *colexec.invariantsChecker
│             │         │ │   │       └ *colexecutils.CancelChecker
│             │         │ │   │         └ *colexec.invariantsChecker
│             │         │ │   │           └ *colfetcher.ColBatchScan
│             │         │ │   ├ *colexec.invariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   ├ *colexec.invariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   ├ *colexec.invariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   └ *colexec.invariantsChecker
│             │         │ │     └ *colrpc.Inbox
│             │         │ └ *colexec.invariantsChecker
│             │         │   └ *colexec.ParallelUnorderedSynchronizer
│             │         │     ├ *colexec.invariantsChecker
│             │         │     │ └ *colflow.routerOutputOp
│             │         │     │   └ *colflow.HashRouter
│             │         │     │     └ *colexec.invariantsChecker
│             │         │     │       └ *colexecutils.CancelChecker
│             │         │     │         └ *colexec.invariantsChecker
│             │         │     │           └ *colfetcher.ColBatchScan
│             │         │     ├ *colexec.invariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     ├ *colexec.invariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     ├ *colexec.invariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     └ *colexec.invariantsChecker
│             │         │       └ *colrpc.Inbox
│             │         ├ *colexec.invariantsChecker
│             │         ├ *colexec.invariantsChecker
│             │         └ *colexecdisk.hashBasedPartitioner
│             │           ├ *colexecdisk.bufferExportingOperator
│             │           └ *colexecdisk.bufferExportingOperator
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             └ *colexec.invariantsChecker
│               └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecdisk.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.invariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.invariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.invariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   └ *colexec.invariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.invariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.invariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.invariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     └ *colexec.invariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.invariantsChecker
│               ├ *colexec.invariantsChecker
│               └ *colexecdisk.hashBasedPartitioner
│                 ├ *colexecdisk.bufferExportingOperator
│                 └ *colexecdisk.bufferExportingOperator
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecdisk.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.invariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.invariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.invariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   └ *colexec.invariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.invariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.invariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.invariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     └ *colexec.invariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.invariantsChecker
│               ├ *colexec.invariantsChecker
│               └ *colexecdisk.hashBasedPartitioner
│                 ├ *colexecdisk.bufferExportingOperator
│                 └ *colexecdisk.bufferExportingOperator
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecdisk.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.invariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.invariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.invariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   └ *colexec.invariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.invariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.invariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.invariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     └ *colexec.invariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.invariantsChecker
│               ├ *colexec.invariantsChecker
│               └ *colexecdisk.hashBasedPartitioner
│                 ├ *colexecdisk.bufferExportingOperator
│                 └ *colexecdisk.bufferExportingOperator
└ Node 5
  └ *colrpc.Outbox
    └ *colexecutils.deselectorOp
      └ *colexec.invariantsChecker
        └ *colexec.countOp
          └ *colexec.invariantsChecker
            └ *colexecbase.simpleProjectOp
              └ *colexecdisk.diskSpillerBase
                ├ *colexecjoin.hashJoiner
                │ ├ *colexec.invariantsChecker
                │ │ └ *colexec.ParallelUnorderedSynchronizer
                │ │   ├ *colexec.invariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.invariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.invariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.invariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   └ *colexec.invariantsChecker
                │ │     └ *colflow.routerOutputOp
                │ │       └ *colflow.HashRouter
                │ │         └ *colexec.invariantsChecker
                │ │           └ *colexecutils.CancelChecker
                │ │             └ *colexec.invariantsChecker
                │ │               └ *colfetcher.ColBatchScan
                │ └ *colexec.invariantsChecker
                │   └ *colexec.ParallelUnorderedSynchronizer
                │     ├ *colexec.invariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.invariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.invariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.invariantsChecker
                │     │ └ *colrpc.Inbox
                │     └ *colexec.invariantsChecker
                │       └ *colflow.routerOutputOp
                │         └ *colflow.HashRouter
                │           └ *colexec.invariantsChecker
                │             └ *colexecutils.CancelChecker
                │               └ *colexec.invariantsChecker
                │                 └ *colfetcher.ColBatchScan
                ├ *colexec.invariantsChecker
                ├ *colexec.invariantsChecker
                └ *colexecdisk.hashBasedPartitioner
                  ├ *colexecdisk.bufferExportingOperator
                  └ *colexecdisk.bufferExportingOperator
