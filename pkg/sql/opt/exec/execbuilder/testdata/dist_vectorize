# LogicTest: 5node

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT)

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i)

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT)

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv WITH DETAILS]
----
<before:/Table/57>  …/1/1                   {1}  1
…/1/1               …/1/2                   {1}  1
…/1/2               …/1/3                   {2}  2
…/1/3               …/1/4                   {3}  3
…/1/4               …/1/5                   {4}  4
…/1/5               <after:/Table/107/1/1>  {5}  5

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw WITH DETAILS]
----
<before:/Table/106/1/5>  …/1/1         {5}  5
…/1/1                    …/1/2         {1}  1
…/1/2                    …/1/3         {2}  2
…/1/3                    …/1/4         {3}  3
…/1/4                    …/1/5         {4}  4
…/1/5                    <after:/Max>  {5}  5

# Verify that EXPLAIN ANALYZE (DISTSQL) works in a distributed setting.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT count(*) FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 5 (40 B, 5 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• group (scalar)
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 1
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows read: 5
      KV bytes read: 40 B
      KV gRPC calls: 5
      estimated max memory allocated: 0 B
      missing stats
      table: kv@kv_pkey
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzslt1O2z4UwO__T2Gdq_KXq-arUHLFVjEJbVDUFnYxVcgkR1nUxM5sp7RDfay9wJ5saky2pkBINE1MWi99PuqTX3-2fA_qSwI-TE4_nA6nJBA5153_D8i78eiczBdAgYsQL1iKCvxPYAMFByi4QMEDCn2YUcikCFApITcl90XDWbgE36IQ8yzXm_CMQiAkgn8POtYJgg9TdpvgGFmIsmcBhRA1i5Nim_niZL64yea4AgpDkeQpVz5QmGSMK590e5sZ3l8THafoE-v7N2XWgeAauY4Ff5SS4k4RiSz0iW0ityuNZWhA3ppgNL4ckoAliTJ159fDIVEaM4OGdHCpezHXBz6xiqlNAeL8uYKULUmKqZArwpJEBExj6BOr2PCW6eAzKiJyneXaJ5v6YtAyYMNsTcGsHjAqzSIE317T5qjfRJHEiGkhe_0q6eHo6mJ6Mx59nHQOgAIuMcgf8_uNOZ1n5_w1Xs6FDFFiWJlttq7_EntHmsnV-c3ZxbRzYv-ZL3ErX2I3l9tuJXfP6fbcvd5tYG9JcfiqejvNpXDaSeF2e95eijawt6Q4elUp3OZSuO2k8LrFdb6XojHsLSkGryqF11wKr50U_e5eiTaot5Q4_mveRk_MOUaVCa5w54309C9bm7cThhGah5YSuQzwUoqg2MYsR0VfEQhRaZO1zeKMm9RmwO1mu7bZqTTbu81O_c4vbO3Wdnv1zV6buQuKBVDgqO-EnJOEaeTB6uefXsbvWKyrOoSoUMYsib-yx66UbQ8HLsB4gQ-HrkyVJ6_MmdNXZlNUikWVAquxg1Uk_Vokh_U8D_c8d5Ec1SIZ1PMc7HnuIjmuvy2sFy6q-mvu3yA6W__3IwAA__9TuuRF

query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv JOIN kw ON kv.k = kw.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• merge join
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│ equality: (k) = (k)
│ left cols are key
│ right cols are key
│
├── • scan
│     nodes: <hidden>
│     regions: <hidden>
│     actual row count: 5
│     KV time: 0µs
│     KV contention time: 0µs
│     KV rows read: 5
│     KV bytes read: 40 B
│     KV gRPC calls: 5
│     estimated max memory allocated: 0 B
│     missing stats
│     table: kv@kv_pkey
│     spans: FULL SCAN
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows read: 5
      KV bytes read: 40 B
      KV gRPC calls: 5
      estimated max memory allocated: 0 B
      missing stats
      table: kw@kw_pkey
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsmt1u2zYUx-_3FASv2pWuTMlOEwEFjBkdkG6Ji7TozWAMjHRmC5JFV6TteEEeay-wJxskzU39IdkUOpAzdVfxwzr8ncO__mX4iMWXBPv447tf3w0_oR_Rz3ejGxQv0fvR9S2KV2h0i-Ll6xi9RfHqdYwJTnkIt2wGAvu_YYoJdjHBHia4hwnu4zHB84wHIATP8iGPxYTr8AH7XYKjdL6QefOY4IBngP1HLCOZAPbxJ3afwB2wEDKniwkOQbIoKV4TLwfx8vd5DGtM8JAni1kqfBQTtMQEf5yz_Knj5IH88hnJaAY-6v79lyifA55KSGXE072ujK8EyoCFPqJly_1awqbpEv1UNk7uPgxRwJJElONuPg-HSEiYo4AvUolewIN0olS-9FG3CL0cABBXDZixBzSDGc_WiCUJD5iE0Efd4oX3TAZTEIgv5HwhfZSPLwLdNFA8fiK4fCoRbxDer9GUiek2vEE-fkywkGwC2KdPpFlOLnZyshrEq0M5WT3nxKFtVk7LiluZleff4VkIGYS7v_Mqf_FJow4k-AayCbznUQqZQ3d2XQJ_yBcD-url2yyaTMt_YoJH-WoHlAxcMvDIIN_28ADBYj-XdTzzPvElQRJmcxRGIkYLwSbQGPczSu8ElIv0EKaDhG55h88d2t9mU7Hio2H3K8PubYVNT9-XVF0rHbfjeO2-VFZLhay8aaCWbVYaqSXVo5b0DNXSPb3A3Qay43WcXlvgyrKjkJXLBrLTZqWR7Lh6ZMc9Q9nxTi9wr4Hs9DpOvy1wZdlRyMpVA9lps9JIdjw9suOdoez0Ti_wXgPZ6Xfa8lYWHYWc9NVFp-NQxNIQUcTlFLI2P8ry09MjP70zlJ8jZ693IOY8FbBzRHX4l7s5QQgnUOZF8EUWwIeMB8VrysdRMa_4_3IIQpa9bvlwnW66hGSy7ojrvyTXLevl9OgvKqNPQa54FqOESUiD9dfwN-0rFsnthYUgIItYEv3J9le9mfavAAQQLYtlf9O1UYKvfcWaN70zEDmK3cnfH8mVZiS0Bsnld0FCVZHQ6iK3tkxo30YmVEELXeO0sD76i8rorU3olWYkWrSwHgmtLnJry2RHCy1h4u4y6X7LxNv-POxO9mon020t6hqnpL2GnviMy6EeSbXR_j8kVLcnNjChdnriI0x0e2ItfqHf0BOfcZnUI6k22mZoYX30uj2xgQm10xMfYaLbE2vRwgsVT2wHkjetVVZDYuWZdD2Sav9txhezPnrtVtnAfa_dKmup8svWKqshsfJMuh5Jtf82Qwvro9dulbVo4REmuq2yliq_aq3y3l8Zml61OOMyOcJEt1k2sU6sPK0-wqTGg5vx2TwWv5V-mTa9b2EvE92OWY8gmn2Nw8Q6qTHihghie-fiABSlSxeWbP69uyRGuWYTmeh2zXr2Tj0TO11zPRPtJ9dGQqm24oZ8OVVup9niEFWup9liJlQuvbVMjDi-NhJKtRU3RBD3rqpY6JrHTz_8EwAA__9zlPWP

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv
----
│
├ Node 1
│ └ *colflow.BatchFlowCoordinator
│   └ *colexec.invariantsChecker
│     └ *colexec.orderedAggregator
│       └ *colexecbase.distinctChainOps
│         └ *colexec.invariantsChecker
│           └ *colexec.ParallelUnorderedSynchronizer
│             ├ *colexec.invariantsChecker
│             │ └ *colexec.countOp
│             │   └ *colexec.invariantsChecker
│             │     └ *colexecutils.CancelChecker
│             │       └ *colexec.invariantsChecker
│             │         └ *colfetcher.ColBatchScan
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             └ *colexec.invariantsChecker
│               └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecutils.CancelChecker
│             └ *colexec.invariantsChecker
│               └ *colfetcher.ColBatchScan
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecutils.CancelChecker
│             └ *colexec.invariantsChecker
│               └ *colfetcher.ColBatchScan
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecutils.CancelChecker
│             └ *colexec.invariantsChecker
│               └ *colfetcher.ColBatchScan
└ Node 5
  └ *colrpc.Outbox
    └ *colexecutils.deselectorOp
      └ *colexec.invariantsChecker
        └ *colexec.countOp
          └ *colexec.invariantsChecker
            └ *colexecutils.CancelChecker
              └ *colexec.invariantsChecker
                └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv NATURAL INNER HASH JOIN kv kv2
----
│
├ Node 1
│ └ *colflow.BatchFlowCoordinator
│   └ *colexec.invariantsChecker
│     └ *colexec.orderedAggregator
│       └ *colexecbase.distinctChainOps
│         └ *colexec.invariantsChecker
│           └ *colexec.ParallelUnorderedSynchronizer
│             ├ *colexec.invariantsChecker
│             │ └ *colexec.countOp
│             │   └ *colexec.invariantsChecker
│             │     └ *colexecbase.simpleProjectOp
│             │       └ *colexecdisk.diskSpillerBase
│             │         ├ *colexecjoin.hashJoiner
│             │         │ ├ *colexec.invariantsChecker
│             │         │ │ └ *colexec.ParallelUnorderedSynchronizer
│             │         │ │   ├ *colexec.invariantsChecker
│             │         │ │   │ └ *colflow.routerOutputOp
│             │         │ │   │   └ *colflow.HashRouter
│             │         │ │   │     └ *colexec.invariantsChecker
│             │         │ │   │       └ *colexecutils.CancelChecker
│             │         │ │   │         └ *colexec.invariantsChecker
│             │         │ │   │           └ *colfetcher.ColBatchScan
│             │         │ │   ├ *colexec.invariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   ├ *colexec.invariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   ├ *colexec.invariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   └ *colexec.invariantsChecker
│             │         │ │     └ *colrpc.Inbox
│             │         │ └ *colexec.invariantsChecker
│             │         │   └ *colexec.ParallelUnorderedSynchronizer
│             │         │     ├ *colexec.invariantsChecker
│             │         │     │ └ *colflow.routerOutputOp
│             │         │     │   └ *colflow.HashRouter
│             │         │     │     └ *colexec.invariantsChecker
│             │         │     │       └ *colexecutils.CancelChecker
│             │         │     │         └ *colexec.invariantsChecker
│             │         │     │           └ *colfetcher.ColBatchScan
│             │         │     ├ *colexec.invariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     ├ *colexec.invariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     ├ *colexec.invariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     └ *colexec.invariantsChecker
│             │         │       └ *colrpc.Inbox
│             │         ├ *colexec.invariantsChecker
│             │         ├ *colexec.invariantsChecker
│             │         └ *colexecdisk.hashBasedPartitioner
│             │           ├ *colexecdisk.bufferExportingOperator
│             │           └ *colexecdisk.bufferExportingOperator
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.invariantsChecker
│             │ └ *colrpc.Inbox
│             └ *colexec.invariantsChecker
│               └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecdisk.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.invariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.invariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.invariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   └ *colexec.invariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.invariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.invariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.invariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     └ *colexec.invariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.invariantsChecker
│               ├ *colexec.invariantsChecker
│               └ *colexecdisk.hashBasedPartitioner
│                 ├ *colexecdisk.bufferExportingOperator
│                 └ *colexecdisk.bufferExportingOperator
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecdisk.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.invariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.invariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.invariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   └ *colexec.invariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.invariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.invariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.invariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     └ *colexec.invariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.invariantsChecker
│               ├ *colexec.invariantsChecker
│               └ *colexecdisk.hashBasedPartitioner
│                 ├ *colexecdisk.bufferExportingOperator
│                 └ *colexecdisk.bufferExportingOperator
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.invariantsChecker
│       └ *colexec.countOp
│         └ *colexec.invariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecdisk.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.invariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.invariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.invariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.invariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   └ *colexec.invariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.invariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.invariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.invariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.invariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     └ *colexec.invariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.invariantsChecker
│               ├ *colexec.invariantsChecker
│               └ *colexecdisk.hashBasedPartitioner
│                 ├ *colexecdisk.bufferExportingOperator
│                 └ *colexecdisk.bufferExportingOperator
└ Node 5
  └ *colrpc.Outbox
    └ *colexecutils.deselectorOp
      └ *colexec.invariantsChecker
        └ *colexec.countOp
          └ *colexec.invariantsChecker
            └ *colexecbase.simpleProjectOp
              └ *colexecdisk.diskSpillerBase
                ├ *colexecjoin.hashJoiner
                │ ├ *colexec.invariantsChecker
                │ │ └ *colexec.ParallelUnorderedSynchronizer
                │ │   ├ *colexec.invariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.invariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.invariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.invariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   └ *colexec.invariantsChecker
                │ │     └ *colflow.routerOutputOp
                │ │       └ *colflow.HashRouter
                │ │         └ *colexec.invariantsChecker
                │ │           └ *colexecutils.CancelChecker
                │ │             └ *colexec.invariantsChecker
                │ │               └ *colfetcher.ColBatchScan
                │ └ *colexec.invariantsChecker
                │   └ *colexec.ParallelUnorderedSynchronizer
                │     ├ *colexec.invariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.invariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.invariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.invariantsChecker
                │     │ └ *colrpc.Inbox
                │     └ *colexec.invariantsChecker
                │       └ *colflow.routerOutputOp
                │         └ *colflow.HashRouter
                │           └ *colexec.invariantsChecker
                │             └ *colexecutils.CancelChecker
                │               └ *colexec.invariantsChecker
                │                 └ *colfetcher.ColBatchScan
                ├ *colexec.invariantsChecker
                ├ *colexec.invariantsChecker
                └ *colexecdisk.hashBasedPartitioner
                  ├ *colexecdisk.bufferExportingOperator
                  └ *colexecdisk.bufferExportingOperator
