# LogicTest: 5node

subtest scrub

# TODO(radu): rework or remove these tests (the inner ORDER BY is ignored by
# the optimizer).
#
# # Verify the index check execution plan uses a merge join.
#
# statement ok
# CREATE TABLE test (k INT PRIMARY KEY, v INT, data INT, INDEX secondary (v) STORING (data))
#
# query T
# EXPLAIN (DISTSQL)
#     SELECT leftside.v, leftside.k, leftside.data, rightside.v, rightside.k, rightside.data
#     FROM
#       (SELECT v,k,data FROM test@{FORCE_INDEX=[1]} ORDER BY v,k,data) AS leftside
#     FULL OUTER JOIN
#       (SELECT v,k,data FROM test@{FORCE_INDEX=[2]} ORDER BY v,k,data) AS rightside
#       ON leftside.v = rightside.v AND leftside.k = rightside.k AND leftside.data = rightside.data
#     WHERE (leftside.k IS NULL) OR
#           (rightside.k IS NULL)
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html#eJyckc2K2zAQgO99CjGnLBlIJDs9CAq6dCFLGpdscio-uNY0a3AkM5Khy5J3L45hNw5x2vQ4I33zzc8bOG9pXRwogP4BEnKEhn1JIXjuUv2Hpf0Neo5QuaaNXTpHKD0T6DeIVawJNGyLnzVtqLDEszkgWIpFVZ_KNlwdCn41kUIEhKyNWhiFRqJJID8i-DZ-FA6x2BNoecR_lz97jsQzOfQaOUWjpmiS6ahG3aM5n1ENXYFK7-zdUyb_MWUyPiXCoYjli6jJaaFGremo9UPWOs-WmOzAlnfk375caf0b8Z6efOWIZ-mw_-1rQ1o87lYrke22XzfiKVuuAaGmX3FyNtzDF672L8MUIDxWdSTWYmKUWD6L9W61ehDZRkzM4j1-P4fE7iIJmhTNAs3n0Q0t7rnLhkLjXaDLTV2tPO_WQ3ZP_bqDb7mk7-zLk6YPsxN3SlgKsX-VfbB0_VPX4Dksb8LpAJaXsLoJJ7fNyR1mdQmnN-HFhTk_fvoTAAD__3P7gDg=
#
# # Verify the foreign key check execution plan uses a merge join.
#
# statement ok
# CREATE TABLE parent (
#   id INT PRIMARY KEY,
#   id2 INT,
#   UNIQUE INDEX (id, id2)
# )
#
# statement ok
# CREATE TABLE child (
#   child_id INT PRIMARY KEY,
#   id INT,
#   id2 INT,
#   FOREIGN KEY (id, id2) REFERENCES parent (id, id2)
# )
#
# query T
# EXPLAIN (DISTSQL)
#     SELECT p.child_id, p.id, p.id2
#     FROM
#       (SELECT child_id, id, id2 FROM child@{NO_INDEX_JOIN} ORDER BY id, id2) AS p
#     FULL OUTER JOIN
#       (SELECT id, id2 FROM parent@{FORCE_INDEX=[2]} ORDER BY id, id2) AS c
#       ON p.id = c.id AND p.id2 = c.id2
#     WHERE (p.id IS NOT NULL OR p.id2 IS NOT NULL) AND
#           c.id IS NULL AND c.id2 IS NULL
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html#eJycklFrnTAUx9_3KcJ58nID1bi9BAYZbAWL0-G8T0PEmXNtqEskidBS_O7DCGstvRvdY345__wO5-QRtJFYdL_QAf8BCTQUJmt6dM7YFW0FmbwHHlNQepr9ihsKvbEI_BG88iMCh7r7OWKFnUR7FQMFib5TY3i2v1WjbLvZm1Zpifft-a5VsrV4bqfOovYiVECzUDCzf3I43w0IPFno__WR7PvYZKtaSdbe4YPYyEUxuyh-8s3aWIkW5c7VrMl_lbzS_Ve0A94YpdFesX339cOEnFyf8pyUp_pLRW7KrAAKI559JNiRivR4-GjVcOsjkRypYMcDULhWo0fLSRRFgpHsOynKmhSnPD-QsiKRSHfsQD4Vn0kk3gf6nHz4Q4BCOXtOREIFoyK9OL70LXur0E1GO3w5xldfjtfZoRxw24Uzs-3xmzV90GzHMuQCkOj8dsu2Q6bDVfhYz8PJG8LsZZj9NZzuwvHSLO9-BwAA__9_viDb

subtest stats

statement ok
CREATE TABLE data (a INT, b INT, c FLOAT, d DECIMAL, PRIMARY KEY (a, b, c, d))

# Split into ten parts.
statement ok
ALTER TABLE data SPLIT AT SELECT i FROM generate_series(1, 9) AS g(i)

# Relocate the ten parts to the five nodes.
statement ok
ALTER TABLE data EXPERIMENTAL_RELOCATE
  SELECT ARRAY[i%5+1], i FROM generate_series(0, 9) AS g(i)

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder FROM [SHOW RANGES FROM TABLE data]
----
start_key  end_key  replicas  lease_holder
NULL       /1       {1}       1
/1         /2       {2}       2
/2         /3       {3}       3
/3         /4       {4}       4
/4         /5       {5}       5
/5         /6       {1}       1
/6         /7       {2}       2
/7         /8       {3}       3
/8         /9       {4}       4
/9         NULL     {5}       5

query T
EXPLAIN (DISTSQL) CREATE STATISTICS s1 ON a FROM data
----
distribution: full
vectorized: false
·
• create statistics
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJy0lEFr2zAUx-_7FOKdWlCwZDtt6lNDl4GhS7rYh8HIQY0eWZhjeZIM20K--7BN6BIaWeDsaCn__P78nnh7MD8LSGD29eV5ms7Jzcc0y7Mvz7fkaTmb5jOS5dM8zfL0KSOGk8WcCPJpufhMpLACKJRK4lzs0EDyDThQCIFCBBRioDCGFYVKqzUao3Tzk30bSOUvSBiFbVnVtjleUVgrjZDswW5tgZBALl4LXKKQqAMGFCRasS1aTIN-rPR2J_RvoJBVojQJGQWciFISTpT9jhooLGqbkEcOqwMFVds3lrFig5DwA_Xvk4ldVaAOxqdduuNs-wcTwhljTdXMCjc4vAh-49Wl0hI1yhPe6nCx2nSz0bgRVumAM_-S5CZkjLzW6x9oze3FytFJZe4_O-4zu4CPgnDQ9HoaHad3d_Xphf4qQi8V4SiIBqnoaXRUcX91FZG_ishLRTQK4kEqehodVUyuriL2VxF7qYhHwXiQip5GRxUP_3W9vQNeoqlUafBszb3_z6xZfyg32O1Ko2q9xhet1i2m-1y0ufZAorHdLe8-0rK7agr-G-bOcHgS5ufh0E3uQUfOdOwOx0N6j53hOzf5bgj53hmeuMmTIeQH96xYzzNxP7Jz9urw4W8AAAD__5sIBUI=

statement ok
INSERT INTO data SELECT a, b, c::FLOAT, 1
FROM generate_series(1,10) AS a, generate_series(1,10) AS b, generate_series(1,10) AS c;

query T
EXPLAIN ANALYZE (DISTSQL) CREATE STATISTICS s1 ON a FROM data
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 1,000 (7.8 KiB)
maximum memory usage: <hidden>
network usage: <hidden>
·
• create statistics
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzUVd9q2zwUv_-eQpyrb6DUkuykqa_alQ5CWTPisJuRCzU-ZKaJ5EkKXVfyWHuBPdmwNZOlTWwVMmgvdY6Ofn_4ifMI9tsSUricXF1Mr0g2vZiOsunoMiOWk_ENkeTDZPyR5NJJoKB0jjdyhRbSL8CBggAKMVBIgEIfZhRKo-dorTbVlcd6YJR_h5RRKFS5dlV5RmGuDUL6CK5wS4QUpvJ2iROUOZqIAYUcnSyWNUwFfV6aYiXNA1DISqlsSnoRJ1LlhBPtvqIBCuO1S8l5Rer6M3HFClPCfv20_jzXyqFyhVbPWkbfW2JQ5inhjPna7YPDpjhkjLwHCvU9vXZlhVPdnG0o-PMfUdbJBULKNzRceCZX5RJN1N8V7ctZ8QNrrJpX5qRXeAhYHATe4q2VNjkazHfwZpuD1C4WC4ML6bSJOAsnSf4XjJHb9fwOnX13kHK8Q5mHh4SHhCTivUgcPyZiX0z4yYBcF8-CIoKD0iG-Ccrg6EER4a6LINdFL4rfiusd4hvXT4_uehzuehzketyLkrfieof4xvXh0V1Pwl1PglxPelH_-K7H-1wXJ_E-1-Ng1zvEN66f_dNVtAd4grbUyuKTlbT_ZVatKswX6Pea1Wszx09Gz2sYfxzXc3UhR-t8l_vDSPlWRfDvYd46LHaG-dNh0Y7cAR23Tiftw8lLeNcu1oaCQnevzZ1PnUVV_98qtE3DR893th--6a7QWrnYXvAh3KXWb6U2aNc1eL26TlupDdt1DV-vrrP2FLOOD9T-_V6kLD6oTJwkHcr6lbLZ5r_fAQAA__-xKCQz

query T retry
EXPLAIN (DISTSQL, TYPES) SELECT * FROM data
----
distribution: full
vectorized: true
·
• scan
  columns: (a int, b int, c float, d decimal)
  estimated row count: 1,000 (100% of the table; stats collected <hidden> ago)
  table: data@primary
  spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJykk1Gr0zAUx9_9FOH_pJKSpe186JOiEwZzd657UKQPsTleC11SkwyUse8uy4Rr5U5y15dCzumv_18PJ0f4Hz0qLD5tVm-Wa_b83bLe1R9XnO0-bxb1C1YvVou3O_aSvd_efWBaBQUOYzWt1Z48qi-Q4MjBUYCjBMccDcfgbEveW3d-5RiBpf6JasbRmeEQzuWGo7WOUB0RutATKuzU1562pDQ5MQOHpqC6Psaco18Prtsr9wsc9aCMr1gmJFNGM8ls-E4OzYnDHsJDgg_qnlDJE79i8RB-MNZpcqTHwZ0J4H-e33qrQmy33V71aE6P_MTaZnYQ89FXrnnlIy-ZPh2ZMh0hM5HfMJ883SNP8sgzUdzgUaR7FEkeRSbKGzzKdI8yyaPMxHzi3j7isSU_WOMpafNm59UlfU-XS-DtwbW0cbaNMZfjXeRiQZMPl668HJYmtqLg37D8L_xqBM_-hfMpycUUuJwCz58EN6dnvwMAAP__eCPGvQ==
