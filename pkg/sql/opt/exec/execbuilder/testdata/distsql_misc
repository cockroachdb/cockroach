# LogicTest: 5node

subtest scrub

# TODO(radu): rework or remove these tests (the inner ORDER BY is ignored by
# the optimizer).
#
# # Verify the index check execution plan uses a merge join.
#
# statement ok
# CREATE TABLE test (k INT PRIMARY KEY, v INT, data INT, INDEX secondary (v) STORING (data))
#
# query T
# EXPLAIN (DISTSQL)
#     SELECT leftside.v, leftside.k, leftside.data, rightside.v, rightside.k, rightside.data
#     FROM
#       (SELECT v,k,data FROM test@{FORCE_INDEX=[1]} ORDER BY v,k,data) AS leftside
#     FULL OUTER JOIN
#       (SELECT v,k,data FROM test@{FORCE_INDEX=[2]} ORDER BY v,k,data) AS rightside
#       ON leftside.v = rightside.v AND leftside.k = rightside.k AND leftside.data = rightside.data
#     WHERE (leftside.k IS NULL) OR
#           (rightside.k IS NULL)
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html#eJyckc2K2zAQgO99CjGnLBlIJDs9CAq6dCFLGpdscio-uNY0a3AkM5Khy5J3L45hNw5x2vQ4I33zzc8bOG9pXRwogP4BEnKEhn1JIXjuUv2Hpf0Neo5QuaaNXTpHKD0T6DeIVawJNGyLnzVtqLDEszkgWIpFVZ_KNlwdCn41kUIEhKyNWhiFRqJJID8i-DZ-FA6x2BNoecR_lz97jsQzOfQaOUWjpmiS6ahG3aM5n1ENXYFK7-zdUyb_MWUyPiXCoYjli6jJaaFGremo9UPWOs-WmOzAlnfk375caf0b8Z6efOWIZ-mw_-1rQ1o87lYrke22XzfiKVuuAaGmX3FyNtzDF672L8MUIDxWdSTWYmKUWD6L9W61ehDZRkzM4j1-P4fE7iIJmhTNAs3n0Q0t7rnLhkLjXaDLTV2tPO_WQ3ZP_bqDb7mk7-zLk6YPsxN3SlgKsX-VfbB0_VPX4Dksb8LpAJaXsLoJJ7fNyR1mdQmnN-HFhTk_fvoTAAD__3P7gDg=
#
# # Verify the foreign key check execution plan uses a merge join.
#
# statement ok
# CREATE TABLE parent (
#   id INT PRIMARY KEY,
#   id2 INT,
#   UNIQUE INDEX (id, id2)
# )
#
# statement ok
# CREATE TABLE child (
#   child_id INT PRIMARY KEY,
#   id INT,
#   id2 INT,
#   FOREIGN KEY (id, id2) REFERENCES parent (id, id2)
# )
#
# query T
# EXPLAIN (DISTSQL)
#     SELECT p.child_id, p.id, p.id2
#     FROM
#       (SELECT child_id, id, id2 FROM child@{NO_INDEX_JOIN} ORDER BY id, id2) AS p
#     FULL OUTER JOIN
#       (SELECT id, id2 FROM parent@{FORCE_INDEX=[2]} ORDER BY id, id2) AS c
#       ON p.id = c.id AND p.id2 = c.id2
#     WHERE (p.id IS NOT NULL OR p.id2 IS NOT NULL) AND
#           c.id IS NULL AND c.id2 IS NULL
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html#eJycklFrnTAUx9_3KcJ58nID1bi9BAYZbAWL0-G8T0PEmXNtqEskidBS_O7DCGstvRvdY345__wO5-QRtJFYdL_QAf8BCTQUJmt6dM7YFW0FmbwHHlNQepr9ihsKvbEI_BG88iMCh7r7OWKFnUR7FQMFib5TY3i2v1WjbLvZm1Zpifft-a5VsrV4bqfOovYiVECzUDCzf3I43w0IPFno__WR7PvYZKtaSdbe4YPYyEUxuyh-8s3aWIkW5c7VrMl_lbzS_Ve0A94YpdFesX339cOEnFyf8pyUp_pLRW7KrAAKI559JNiRivR4-GjVcOsjkRypYMcDULhWo0fLSRRFgpHsOynKmhSnPD-QsiKRSHfsQD4Vn0kk3gf6nHz4Q4BCOXtOREIFoyK9OL70LXur0E1GO3w5xldfjtfZoRxw24Uzs-3xmzV90GzHMuQCkOj8dsu2Q6bDVfhYz8PJG8LsZZj9NZzuwvHSLO9-BwAA__9_viDb

subtest stats

statement ok
CREATE TABLE data (a INT, b INT, c FLOAT, d DECIMAL, PRIMARY KEY (a, b, c, d))

# Split into ten parts.
statement ok
ALTER TABLE data SPLIT AT SELECT i FROM generate_series(1, 9) AS g(i)

# Relocate the ten parts to the five nodes.
statement ok
ALTER TABLE data EXPERIMENTAL_RELOCATE
  SELECT ARRAY[i%5+1], i FROM generate_series(0, 9) AS g(i)

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder FROM [SHOW RANGES FROM TABLE data]
----
start_key  end_key  replicas  lease_holder
NULL       /1       {1}       1
/1         /2       {2}       2
/2         /3       {3}       3
/3         /4       {4}       4
/4         /5       {5}       5
/5         /6       {1}       1
/6         /7       {2}       2
/7         /8       {3}       3
/8         /9       {4}       4
/9         NULL     {5}       5

query T
EXPLAIN (DISTSQL) CREATE STATISTICS s1 ON a FROM data
----
distribution: full
vectorized: false
·
• create statistics
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJy0lF2L2kAUhu_7K4ZztQsjmUmi6-ZqxVoIbHVrclEoXsw6ByuNmXRmAm3F_16SIFtlncSP3pmJb56X5wxnC-ZnBhFMvr48j-IpufsYJ2ny5fmejOeTUTohSTpK4ySNxwkxnMymRJBP89lnIoUVQCFXEqdigwaib8CBgg8UAqAQAoU-LCgUWi3RGKWrv2zrQCx_QcQorPOitNXxgsJSaYRoC3ZtM4QIUvGa4RyFRO0xoCDRinVWYyr0U6HXG6F_A4WxyspNbiJS9UkKUf3seZyIXBJOlP2OGhY7Cqq0bzhjxQoh4jvavVIiNkWG2usf1mmOk_UfjAhnjFVtEytsRJ74SbB_EvzGK3OlJWqUB7zF7mS10WqlcSWs0h5n3UuSO58x8louf6A19ycrBweVeffx8bPH5_Ge518wwJZS-wEObj5Av7sN_3wbfs8LLrDRUmpv4-HmNoLuNoLzbQQ9L7zARkupvY3hzW2E3W2E59sIe17_AhstpfY2Hv_rqnsHPEdTqNzg0cp7_8usWoUoV9jsTaNKvcQXrZY1pnmc1bn6QKKxzVvePMR586oq-G-YO8P-QZgfh303uQUdONOhOxxe07vvDA_c5ME15AdneOgmD68hP7pnxVquifuSHbMXuw9_AwAA__9S0Q0_

statement ok
INSERT INTO data SELECT a, b, c::FLOAT, 1
FROM generate_series(1,10) AS a, generate_series(1,10) AS b, generate_series(1,10) AS c;

query T
EXPLAIN ANALYZE (DISTSQL) CREATE STATISTICS s1 ON a FROM data
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 1,000 (7.8 KiB)
maximum memory usage: <hidden>
network usage: <hidden>
·
• create statistics
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzcVtFO2zAUfd9XWPcJJJfETlpKnmAVkyoETE3Fy9QHk1x1Ea2d2Y6AoX7WfmBfNiVexMraJJVaCfFW-_r2nHvOSZwXMD8WEMFocnkxvSTx9GI6jqfjUUwMI7c3RJAvk9trkgorgIJUKd6IJRqIvgEDChwoBEAhBAp9mFHItUrQGKXLIy9Vwzh9gsinkMm8sOX2jEKiNEL0AjazC4QIpuJ-gRMUKWrPBwopWpEtKpgS-jzX2VLoZ6AwUotiKU1ESj5xLsqfPY8RIVPCiLLfUQOFqztisyVGxP_9y7h1oqRFaTMl_ytp9WiIRpFGhPm-27t_tlhvDn2ffAYK13ejETEWc5KoQlpyhE_Wy6Q9johf0XYHEB-2HaiQVGHzwjqs2YqCW_9VxlgxR4jYinZXLxbLfIHa668r57bj7CdWWNVksRU2IudsKzDfCvyKV0ilU9SYruHNVlupXcznGufCKu0xvztJcsR9n9wXyQNac7yVcrBGmXVPGts5aR7reXxfWeObssZOBuQqO0DaeOe0tShYp22w97Tx7tbx3a3jPS_46Na1KFhbd7p364Lu1gW7Wxf0vPCjW9eiYG3dcO_Whd2tC3e3Lux5_X1ZF2yyjp8Eh7Eu6Gxdi4K1dWcHvZ43AE_Q5EoafHNNb_5nv7y-MZ2ju-uNKnSCX7VKKhi3vK36qo0UjXVV5hZj6UolwX-bWWMzX2tmb5t5M3ILdNDYHTY3h7vwrlSsBAWJ9lHpB5dbg7J6CZRfGnXBhddVXt87dXWJxoj56wEXwnVq_UZqg-a5Bu93rtNGasPmuYbvd66z5hT7LQ9Q8-O302TB1sn4SdgyWb-cbLb69CcAAP__DKOOqg==

query T retry
EXPLAIN (DISTSQL, TYPES) SELECT * FROM data
----
distribution: full
vectorized: true
·
• scan
  columns: (a int, b int, c float, d decimal)
  estimated row count: 1,000 (100% of the table; stats collected <hidden> ago)
  table: data@data_pkey
  spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJykk0GL00AUx-9-iuF_UnkhnST1kJOyVijUbm16UCSH2cxzDaSZODMBpfS7S6bCWtmVbHIJzHv55f_LY94J7keDHKvPu8279Va8fL8uDsWnDYnDl92qeCWK1WZ1cxCvxYf97UehlVcgtEbzVh3ZIf8KCUICQgpCBsISJaGzpmLnjB1eOQVgrX8iXxDqtuv9UC4JlbGM_ARf-4aR46DuGt6z0mzjBQiavaqbEDNEv-1sfVT2Fwg3pumPrcuFInFHoiKhQSg6NdSiWArVaiGF8d_ZojwTTO8fcp1X94xcnukJtwelvjVWs2V9rVO3HvTn-a0xyod2VR9Vg_L8yK9tTWS6eHn1lae8kisvOX5mcvrMYhnFyYSpJePtkhl2SRSnE-zS8XbpDLs0irMJdtl4u2yGXRbFy5n78Ijdnl1nWsejbvRiWAnW93xZLmd6W_HOmirEXI63gQsFzc5fuvJyWLehFQT_huV_4TdX8OJfOJmTnM6Bsznw8llweX7xOwAA__-ybuU6
