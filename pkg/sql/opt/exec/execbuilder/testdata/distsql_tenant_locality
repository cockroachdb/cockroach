# LogicTest: 3node-tenant-multiregion
# tenant-cluster-setting-override-opt: sql.split_at.allow_for_secondary_tenant.enabled=true sql.zone_configs.allow_for_secondary_tenant.enabled=true sql.multi_region.allow_abstractions_for_secondary_tenants.enabled=true

# Create a table on the secondary tenant.
statement ok
CREATE TABLE t (k INT PRIMARY KEY, v INT, FAMILY (k, v))

# Split the ranges in the table.
statement ok
ALTER TABLE t SPLIT AT SELECT generate_series(1, 6)

# Relocate ranges in the admin tenant so that
# - [1-2) and [2-3) are on node 2
# - [3-4) and [4-5) are on node 3
# - [5-6) and [6-7) are on node 1.
user host-cluster-root

statement ok
ALTER RANGE RELOCATE LEASE TO 2 FOR SELECT range_id FROM crdb_internal.ranges WHERE start_pretty LIKE '%Tenant%1';
ALTER RANGE RELOCATE LEASE TO 2 FOR SELECT range_id FROM crdb_internal.ranges WHERE start_pretty LIKE '%Tenant%2';
ALTER RANGE RELOCATE LEASE TO 3 FOR SELECT range_id FROM crdb_internal.ranges WHERE start_pretty LIKE '%Tenant%3';
ALTER RANGE RELOCATE LEASE TO 3 FOR SELECT range_id FROM crdb_internal.ranges WHERE start_pretty LIKE '%Tenant%4';
ALTER RANGE RELOCATE LEASE TO 1 FOR SELECT range_id FROM crdb_internal.ranges WHERE start_pretty LIKE '%Tenant%5';
ALTER RANGE RELOCATE LEASE TO 1 FOR SELECT range_id FROM crdb_internal.ranges WHERE start_pretty LIKE '%Tenant%6';

# Check range lease holders in the admin tenant.
query TI rowsort,retry
SELECT start_pretty, lease_holder FROM crdb_internal.ranges WHERE start_pretty LIKE '%Tenant%Table%/1/%'
----
/Tenant/10/Table/106/1/1  2
/Tenant/10/Table/106/1/2  2
/Tenant/10/Table/106/1/3  3
/Tenant/10/Table/106/1/4  3
/Tenant/10/Table/106/1/5  1
/Tenant/10/Table/106/1/6  1

user root

# Populate the range cache.
statement ok
SELECT * FROM t

# Check sql instance locality in the secondary tenant.
query IT
SELECT id, locality FROM system.sql_instances WHERE locality IS NOT NULL
----
1  {"Tiers": "region=test"}
2  {"Tiers": "region=test1"}
3  {"Tiers": "region=test2"}

# Ensure that we plan TableReaders in the regions according to the leaseholder
# of each range, namely we want
# - TableReader on SQL Instance 2 to scan Span /106/1/1/0
# - TableReader on SQL Instance 3 to scan Span /106/1/3/0
# - TableReader on SQL Instance 1 to scan Span /106/1/5/0.
query T
EXPLAIN (DISTSQL) SELECT * FROM t WHERE k IN (1, 3, 5)
----
distribution: full
vectorized: true
·
• scan
  missing stats
  table: t@t_pkey
  spans: [/1 - /1] [/3 - /3] [/5 - /5]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJycklFv0zAQx9_5FNY9MeQodtKGNU-gNYhIXTeaSiChajLxpURN42A7jKnKd0dOEWtLh9o-nu_0u5_u7w2YHxXEkHy5n7xPp-T1OM3m2afJFcmSSXIzJ2_Ih9ndLbHk88dklpAVcUOckpCS4RVQqJXEqVijgfgrcKAQAIUQFhQarXI0RmnX2vSDqfwFMaNQ1k1r3fOCQq40QrwBW9oKIYa5-FbhDIVE7TuWRCvKqsfbd_ahWeETULhRVbuuTUxWlPwEClkjXOVzFvncH_oMFh0F1drnRcaKJULMd8zSMcRBR1-Qe3Zqa6UlapR7PovuiP5Uearxw4PB4yrBgUq4p8JPvxO78E78jDuxPbngdDl-oVx4hhx_McQjcjM0jaoNnpQRO9jkcZc6yiVuv4hRrc7xXqu8n92Wdz2of5Bo7LbLt0Va9y3uNmgU679_cJfE_0sa7JHYLokdkoJLnf4hhZeS-osVlXp8KCXEcC2johjwwrtmb7k34BHzRpGUXlgUER_xYMhHLpqiEkvjYsu-q8ceO39q3NELURmkcCtWOEaLel3WpbFl_qfTda9-BwAA__8H-Ip8

# Ensure that a single scan that touches multiple ranges is represented by a
# single span after physical planning. We expect to only have a single
# TableReader on node 3.
query T
EXPLAIN (DISTSQL) SELECT * FROM t WHERE k >= 3 AND k < 5
----
distribution: full
vectorized: true
·
• scan
  missing stats
  table: t@t_pkey
  spans: [/3 - /4]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkV9r2zAUxd_3KcR5aoZMpPxrKhisNB4zpGkXBzbYQlHkm8zEsTxLXleCv_uw03VpYVnffM-993eOr_ZwPzIohF9up5fRjJ1NongRf5p2WBxOw6sFe8s-zG-umWefP4bzkJ1t2bdKiD69Y_0Ou5xNnhTDhh1w5Dahmd6Rg_oKCY4-lhxFaQ05Z8tG3rdDUfILSnCkeVH5Rl5yGFsS1B4-9RlBYWYDW3QbSkJep1k7VnPYyv9dcl5vCKp35BJNoGTNj4zkaaOFXmU0J51Q2RXP7ODf-7tiSw_guLJZtcudYlvOfoIjLnRTdaUYdWW3Hzx-DPGvjPJFRvEs43-OMSdX2NzRq64hXjgFsl5yULKhwws4W5WGbktr2tlDedOCWiEh5w_d3qGI8j8t50vSu6f4xyR5kiROkZYc68ze36UJFPRwOL64WI2C895gFAwG614wHq90ILRO1noljTHnaBb0xjUnir_b-xa7eCiaH1zrzBHHtd7ShDyVuzRPnU_NY6eu3_wOAAD__3_98Ds=

# Ensure that a query with a LIMIT is planned on the instance that is the
# "leaseholder" of the first range touched by the scan. We expect to only have a
# single TableReader on node 2.
query T
EXPLAIN (DISTSQL) SELECT * FROM t WHERE k >= 1 LIMIT 10
----
distribution: full
vectorized: true
·
• scan
  missing stats
  table: t@t_pkey
  spans: [/1 - ]
  limit: 10
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkV2L00AYhe_9FcO5UpmQmazbpQFB2UYMpN21CShoWcbMu3VokomZietS8t8lqR_dBat3eb-ec3JmD_e1Qozkw3X2Ol2xp4s0L_J32TOWJ1lyWbDn7M36ask8e_82WSdsxz71QpzRSyZZli7TgkkBjsZqWqmaHOKPkOCIsOFoO1uSc7Yb2_tpKdXfEQsO07S9H9sbjtJ2hHgPb3xFiLGygW3DkaLJK1NNawOH7f2fI-fVlhBHRyrpArEc-JGQPC1UqM8VrUlp6kLxQA7-lb9pd3QPjktb9XXjYrbj7Bs48laNVSjFLJShDKaPCByZqY0f8_ibWfnIrHhg9h-prMm1tnH0X7GIR0qBHDYcpLd0eApn-66k686W0-6hvJpAU0OT84dpdCjS5tfI-Y5U_dv-MUmeJIlTpA3HbWXvboxGjPIims3lxTygi_NZ8IJIBKqUs0BG50prPT-ba43xQG3dGFH-xd5N2OK-HX_wVlWOOJZqRwvy1NWmMc6b8udkGJ78CAAA__9sH_Ay


# Regression test for #93887 - don't panic when generating index recommendations
# with a mix of local and remote partitions.
statement ok
CREATE TABLE t93887 (x INT PRIMARY KEY, y INT) PARTITION BY LIST (x) (
    PARTITION p1 VALUES IN (1),
    PARTITION p2 VALUES IN (2),
    PARTITION p3 VALUES IN (3)
)

statement ok
ALTER PARTITION p1 OF TABLE t93887 CONFIGURE ZONE USING constraints='[+region=test]';
ALTER PARTITION p2 OF TABLE t93887 CONFIGURE ZONE USING constraints='[+region=test1]';
ALTER PARTITION p3 OF TABLE t93887 CONFIGURE ZONE USING constraints='[+region=test2]'

statement ok
SET index_recommendations_enabled = true;

query T retry
EXPLAIN SELECT * FROM t93887 WHERE y = 1
----
distribution: local
vectorized: true
·
• filter
│ filter: y = 1
│
└── • scan
      missing stats
      table: t93887@t93887_pkey
      spans: FULL SCAN
·
index recommendations: 1
1. type: index creation
   SQL command: CREATE INDEX ON test.public.t93887 (y);

statement ok
RESET index_recommendations_enabled;
