# LogicTest: 5node-dist

# TODO(radu): the experimental_force_lookup_join is disabled if the plan is
# generated by the optimizer. Revive these tests when we will plan lookup joins
# for real.
#
# ########################
# #  LOOKUP JOIN FORCED  #
# ########################
# statement ok
# SET experimental_force_lookup_join = true;
# 
# statement ok
# CREATE TABLE data (a INT, b INT, c INT, d INT, PRIMARY KEY (a, b, c, d))
# 
# # Split into ten parts.
# statement ok
# ALTER TABLE data SPLIT AT SELECT i FROM GENERATE_SERIES(1, 9) AS g(i)
# 
# # Relocate the ten parts to the five nodes.
# statement ok
# ALTER TABLE data TESTING_RELOCATE
#   SELECT ARRAY[i%5+1], i FROM GENERATE_SERIES(0, 9) AS g(i)
# 
# statement ok
# CREATE TABLE distsql_lookup_test_1 (a INT, b INT, c INT, PRIMARY KEY (a, c))
# 
# statement ok
# CREATE TABLE distsql_lookup_test_2 (d INT, e INT, f INT, PRIMARY KEY (f, e))
# 
# # Ensure lookup join is planned.
# query T rowsort
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM distsql_lookup_test_1 JOIN distsql_lookup_test_2 ON f = b]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJyUkcFq8zAQhO__U5g9708sp-lBJ11TSlJCb8UY1VqCWkerSjK0BL97sVVoUoibHne0386gOYJjQxt9oAjyCQQgrKBG8IFbipHDKOeltXkHWSJY5_s0yjVCy4FAHiHZ1BFI2PB_9osKEAwlbbtpbUDgPn1DMek9gVwOeHJYzB9-1M8d7UgbCovy7Dz4YA86fChjY4pvXdMxv_a-SRRTI-CSu_iL-x1b92Uurjcfv-F-mosXtq5gJws1its-yUIJVBWqJaobVCtUtxejVmdRf2lgR9Gzi3RVBeVQI5DZU245ch9aegjcTjZ53E7cJBiKKb8u87B2-WkMeAqLWbiah6tZuPwB18O_zwAAAP__2Q3qzg==
# 
# 
# query T rowsort
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM distsql_lookup_test_1 JOIN distsql_lookup_test_2 ON f = b WHERE a > 1 AND e > 1]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJyUkkFr4zAQhe_7K8ScdmGWWPZmDzrpVHApSQm5tSa41pCqdTSuJENC8H8vtgtNCnHT47yZ7z2PR0dwbGhR7iiAegAJCHMoEBrPFYXAvpfHodzsQSUI1jVt7OUCoWJPoI4QbawJFCz4LzezFBAMxdLWw1iHwG38hEIstwQq6_DEWE4br8unmlZUGvKz5MweGm93pT9oY0MMb_WmZn5tm02kEDcSLqXLn6TfsnUf4fL68P433A21eGHrBDsldC_mztD-xtaRfK-IxzZJMhJSKZUv1uK3t9vnKII1JNjVhz-AsGyjElqiTlFnqP-hnqP-f3G79Gy7b462otCwC3TV1ZKuQCCzpfFhBG59RfeeqyFmLJcDNwiGQhy72Vjkbmz1H3gKy0k4nYbTSTj5Ahfdr_cAAAD__8vq-nE=
# 
# 
# # Ensure lookup join is planned on a multi-node cluster.
# query T rowsort
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM data JOIN data AS data2 on data.b = data2.a]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJzElE-LnTAUxff9FHLXt4zx33NcZTulzJShu-IiNZfB9k2uJBFaBr97UQvje7yJgguXJjn-Ts4J9w0Ma3pUr-Sg-gECEBJASAEhA4QcaoTOckPOsR2PzIIH_QeqGKE1Xe_H5RqhYUtQvYFv_Zmggu_q55meSWmydzEgaPKqPU-Yzravyv6VWnkF9YDAvX__kfPqhaASA26HfeHW_GflARbCV-bffRf94tZEbKpIjtd96n0VSYEyQZmizFDmKAuUJ5Tlh_6SD_292-oNW02W9IWnerhxg0f-zN2diK9O3manF2yxvQixu4gV2KKI4pAiku1hJLvDWIEtwjgdEka6PYx0dxgrsEUY5SFhZNvDyHaHsQJbhHF_-Ly64e-ZXMfG0aZpFI_zjPQLzcPPcW8b-ma5mTDz59OkmxY0OT_vivnjwcxbo8GlWATFyYVYXIuTMHkFnQbVWVic7fGdB8VFmFzsIZ-C4jJMLveQ78NdxSvPJPzIrtn18OlfAAAA__8Afujr
# 
# 
# query T
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT COUNT(*) FROM data as d1 NATURAL JOIN data as d2]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJy8lV9r2zAUxd_3KcJ96kDQXNtJEz957CljS0aasodhihZdjLdUMpIMGyXffTgeVDGN5KGSR_85Oke_e-A-g1SC1vyJDOTfAYFBAgxSYJABgxmUDBqt9mSM0t0vvWAlfkM-ZVDLprXd65LBXmmC_BlsbQ8EOez4jwNtiQvSt1NgIMjy-nCyaXT9xPWfQnDLoTwyUK19OchYXhHkeGTjzT6pWv7zmnm8GHxW6lfbTH6qWk6UzCcFsiJhRcqK7r6b1uaTtZJ0MVXyP6k-VJWmilulb3GA4OPmYb173G6-3d-8v2iWXjR78Wil0oI0ibPzy2MgzoDS_cOXx9V6d1Pg5TTZWRocP32Mnn7AzJn-_IrTD6RycWP09JPxvJNo3gEzh_fdFXkHUrm8k2je6XjeaTTvgJnDe3FF3oFULu80mnc2nncWzTtg5vBeXpF3IJXLO3vTbfKK2ZZMo6ShwVZ5_eRpt21IVNSvJqNavaevWu1PNv3j5qQ7vRBkbP8V-4eV7D91AV0xesWJX5x4xemZGIfi1B977rfOvOqZXzzzigPO85hL33nFC7_zwite-sXLmNgY6FioZP6WYaBmGNUzDBQtC5j7m4aBqqG_a8Ps5fHd3wAAAP__1CT_Hg==
# 
# 
# statement ok
# CREATE TABLE foo (a int, b int)
# 
# statement ok
# CREATE TABLE bar (a int PRIMARY KEY, c int)
# 
# query T
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM foo NATURAL JOIN bar]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJyUkTFPwzAQhXd-RfXmQ01SWDxlLUItqthQBjc-KkPrs2xHAlX57ygxEi2iAUa_u--9p_MRTgyv9IEj1BNKEG7REHyQlmOUMMh5aWneoAqCdb5Lg9wQWgkMdUSyac9QWMm1-HkFguGk7X5c6wnSpS8oJr1jqEVPJ8bltPGj3u55w9pwmBdn9vDBHnR4r59FQFh3Sc3qkuoKl4LL_wTfiXWfueXPuVsdQLgXee387EWsm4kbKpyVofrmYp_qrM8vF95w9OIi_-nERd8Q2Ow4_2KULrT8EKQdY_JzPXKjYDimPF3kx9Ll0VDwFC4n4Woaribh4hvc9FcfAQAA__97bt0c
# 
# 
# # Ensure lookup join is not planned when no index is available.
# query T
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM bar NATURAL JOIN foo]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJyckjFrwzAQhff-inJTCyqx7HQRFDw2HZISupUMinVJBI7OnGRoCf7vxdaQ2MRO20063XfvPXEncGRwqY_oQX2CBAHPsBFQMRXoPXFbjk0L8wUqEWBdVYe2vBFQECOoEwQbSgQFS3qiapaBAINB27JrawRQHc6QD3qPoOaNuBgspwd_6G2Ja9QGeZb0xkPF9qj5O99qhjEt-V8teV1rRwQCVnVQ97kUeToqnI4Kn_VqR2yQ0Qy_7XbLFfev2h_eyDrkWdo3X-IuPOTy8YXt_tCdehlEPh-NkfVi3FiCNfqKnMdfbUHSZkCzx_gnnmou8J2p6GTiddVxXcGgD_F1Hi8LF59ag5ewnISzHiyHcPoHOB3C2SScDGxvmrufAAAA___gtCho
# 
# 
# statement ok
# CREATE TABLE books (title STRING, edition INT, shelf INT, PRIMARY KEY (title, edition))
# 
# statement ok
# CREATE TABLE authors (name STRING, book STRING)
# 
# query T rowsort
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT DISTINCT(authors.name) FROM authors, books AS b1, books AS b2 WHERE b1.title = b2.title AND authors.book = b1.title AND b1.shelf <> b2.shelf]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJyck8-K2zAQh-99CndOu6Biy3_2YFjwoYduKUkJvZUcFGuaqHE0RpKhJeTdi-xCYhMryR4tzTffb8boCJokLsQBLZQ_gQODAtYMWkM1WkvGHw9Fb_IPlAkDpdvO-eM1g5oMQnkEp1yDUMKCPlEbF8BAohOq6ctODKhzZ8g6sUUoX07sojEPN_4hNg2uUEg0cTJqD61RB2H-VqJzO5-XwbJzZVRxVqUwJ-fvlfPr8g3RfqTOZtXpI-qvpPR_cxo2fyPad230m5SOSPsQPs4iqtLo42tUFedws8my2WTnQJ0mI9GgnP7j2yVXxvsi7M6PiCbOxuM1-Ms9Venzq1HbnXuq-PMdA-SPrPazsk7p2sX52BzoX4z633gLK7QtaYt3PYbEbwflFodtW-pMjd8N1b1m-Fz2XH8g0brh9mX4eNPDlQ94CfMgnI9gPoXTIJyFzdkD5nQK50G4CJuLIJxM4PXpw78AAAD__xhmpWg=
# 
# query TTTTT colnames
# EXPLAIN (VERBOSE) SELECT DISTINCT(authors.name) FROM authors, books AS b1, books AS b2 WHERE b1.title = b2.title AND authors.book = b1.title AND b1.shelf <> b2.shelf
# ----
# Tree                      Field           Description               Columns                                                                                                                                           Ordering
# distinct                  ·               ·                         ("(authors.name)")                                                                                                                                weak-key("(authors.name)")
#  └── render               ·               ·                         ("(authors.name)")                                                                                                                                ·
#       │                   render 0        test.public.authors.name  ·                                                                                                                                                 ·
#       └── join            ·               ·                         (name, book[omitted], rowid[hidden,omitted], title[omitted], edition[omitted], shelf[omitted], title[omitted], edition[omitted], shelf[omitted])  ·
#            │              type            inner                     ·                                                                                                                                                 ·
#            │              equality        (book) = (title)          ·                                                                                                                                                 ·
#            ├── scan       ·               ·                         (name, book, rowid[hidden,omitted])                                                                                                               rowid!=NULL; key(rowid)
#            │              table           authors@primary           ·                                                                                                                                                 ·
#            │              spans           ALL                       ·                                                                                                                                                 ·
#            └── join       ·               ·                         (title, edition[omitted], shelf[omitted], title[omitted], edition[omitted], shelf[omitted])                                                       title=title; title!=NULL
#                 │         type            inner                     ·                                                                                                                                                 ·
#                 │         equality        (title) = (title)         ·                                                                                                                                                 ·
#                 │         mergeJoinOrder  +"(title=title)"          ·                                                                                                                                                 ·
#                 │         pred            b1.shelf != b2.shelf      ·                                                                                                                                                 ·
#                 ├── scan  ·               ·                         (title, edition[omitted], shelf)                                                                                                                  title!=NULL; edition!=NULL; key(title,edition); +title
#                 │         table           books@primary             ·                                                                                                                                                 ·
#                 │         spans           ALL                       ·                                                                                                                                                 ·
#                 └── scan  ·               ·                         (title, edition[omitted], shelf)                                                                                                                  title!=NULL; edition!=NULL; key(title,edition); +title
# ·                         table           books@primary             ·                                                                                                                                                 ·
# ·                         spans           ALL                       ·                                                                                                                                                 ·
# 
# 
# 
# # Cross joins should not be planned as lookup joins.
# query T
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM books as b1 CROSS JOIN books as b2]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJyckTFvszAQhvfvV3y6-apgIB08eWw6JFXUrWJw8ClFJT5kG6lVxH-vwEMCKqTN6PM99z66O4NlQ1t9Ig_yDQQgrKFAaByX5D27vhybNuYTZIJQ2aYNfblAKNkRyDOEKtQEErb8wM0qAwRDQVf10NYhcBsukA_6SCDzDq8Gi-XBr_pQ0560IbdKRuOhcdVJuy91YP7wMJcm7k0T96Sls2mXkNayM-TITLd1u-UH5Sft35-5suRW6dh41wb5XwlUKaoMVY5qjepxVj0bqd-49558w9bTrw6e9N5kjhT34Ll1Jb04LoeY-NwN3FAw5EP8zeNjY-NXL3gNi0U4G8FiCqd_gNMpnC3CyUS76P59BwAA__9upyMC
# 
# 
# query T rowsort
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM authors INNER JOIN books ON books.edition = 1 WHERE books.title = authors.book]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJyUkUFLAzEQhe_-ijAnhUg3W3sJCDkJK9JK6U32kG6GNnabWZIstJT975JdwVbsqse8mW_eTN4JHBmc6z0GkG8ggMMMSg6NpwpDIJ_koakwB5AZB-uaNia55FCRR5AniDbWCBLmdE_NJAcOBqO2dd_WcaA2fkEh6g2CnHb8bLAYH7zS6xqXqA36SXYxHhpv99oflW7jNu3LYdFGyZTgKodr5uI_5s9k3ae3-Nl7TbRLzi9Eu7Zh72QdIyeZSl9ROIOHJ1tH9Elhj0xIKYv5it16u9lGFqxBRq4-3l0sz9WUqweuZlevyC-u-CWbJYaGXMA_hZN1JQc0GxzyD9T6Cl89Vb3N8Fz0XC8YDHGoTodH4YZSWvAcFqNwPg7no3D2DS67m48AAAD__5V27x8=
# 
# 
# statement ok
# CREATE TABLE players (id DECIMAL PRIMARY KEY, name STRING, team INT)
# 
# 
# ##########################
# #  LOOKUP JOIN DISABLED  #
# ##########################
# 
# statement ok
# SET experimental_force_lookup_join = false;
# 
# 
# # Simple joins should no longer be planned as lookup joins.
# query T
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM foo JOIN bar USING(a)]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJycksFqwzAMhu97iqHTBh6Nk-5iGOS47tCOstvowY3V1pBaQXZgo-TdR-JDm9Ck2262pE__L6ETODK41Ef0oD5BgoBn2AiomAr0nrgNx6KF-QKVCLCuqkMb3ggoiBHUCYINJYKCJT1RNctAgMGgbdmVNQKoDmfIB71HUPNGXDSW040_9LbENWqDPEt67aFie9T8ne-IQMCqDuo-lyJPYUxY_ldYXhfeah7VSke1zhK1IzbIaIZru11yxfCr9oc3sg55lvb9lrgLD7l8fGG7P3Sv3r5EPh8dI-uNceMI1ugrch5_dQVJOwOaPcadeKq5wHemopOJ31XHdQGDPsTsPH4WLqZag5ewnISzHiyHcPoHOB3C2SScDGxvmrufAAAA__9feSho
# 
# 
# ####################################
# #  LOOKUP JOIN ON SECONDARY INDEX  #
# ####################################
# statement ok
# SET experimental_force_lookup_join = true
# 
# # Create a table with a secondary index which stores another column.
# statement ok
# CREATE TABLE multiples (a INT, b INT, c INT, d INT, PRIMARY KEY (a, b), INDEX bc (b) STORING (c))
# 
# # Split into ten parts.
# statement ok
# ALTER TABLE multiples SPLIT AT SELECT i FROM GENERATE_SERIES(1, 9) AS g(i)
# 
# # Relocate the ten parts to the five nodes.
# statement ok
# ALTER TABLE multiples TESTING_RELOCATE
#   SELECT ARRAY[i%5+1], i FROM GENERATE_SERIES(0, 9) AS g(i)
# 
# # Lookup join on covering secondary index
# query TTT colnames
# EXPLAIN SELECT t1.a, t2.c FROM multiples t1 JOIN multiples@bc t2 ON t1.a = t2.b
# ----
# Tree            Field           Description
# render          ·               ·
#  └── join       ·               ·
#       │         type            inner
#       │         equality        (a) = (b)
#       │         mergeJoinOrder  +"(a=b)"
#       ├── scan  ·               ·
#       │         table           multiples@primary
#       │         spans           ALL
#       └── scan  ·               ·
# ·               table           multiples@bc
# ·               spans           ALL
# 
# query T
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT t1.a, t2.c FROM multiples t1 JOIN multiples@bc t2 ON t1.a = t2.b]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJy8lM1qg0AUhfd9inDXU-Ko-XOVbUpJSuiuuDDOJdiauTIzQkvw3YtaGg3JKERczs-Z73DOcM8gSeA2OqGG4AM4MHCBgQcMfGAwg5BBpihGrUmVV2rBRnxD4DBIZJabcjtkEJNCCM5gEpMiBPAeHVLcYyRQTR1gINBESVphMpWcIvWzPuWpSbIUNTDY5SaYrDmEBQPKzeVdbaIjQsAL1p_9Qon8Q8_a6EPcor4SfeXZ5JMSOSFZGfi3wtb-XTfuXTcXE7kkJVChaDkIixt-t_RM2ZQ7Vzdvs70Wm_dvgQ_dQge70cJ8hBbc_km4QyfRwW4ksRghCa9_Et7QSXSwG0ksR0jC75-EP3QSHexGEquRZ9QNN3vUGUmNvSaQU84wFEesB56mXMX4piiuMPVyV-mqDYHa1Ke8XmxkfVQabIq5Vey2xPxa7NrJHWjPqvbtYv8R3zOreG4nzx8hL6zipZ28fIS8snfldHwT-ye7ZofF028AAAD__2gv7bk=
# 
# # Lookup join on non-covering secondary index
# # The index join should be subsumed by joinreader, which takes care of the
# # primary index lookups.
# query TTT colnames
# EXPLAIN SELECT t1.a, t2.d FROM multiples t1 JOIN multiples@bc t2 ON t1.a = t2.b
# ----
# Tree                  Field           Description
# render                ·               ·
#  └── join             ·               ·
#       │               type            inner
#       │               equality        (a) = (b)
#       │               mergeJoinOrder  +"(a=b)"
#       ├── scan        ·               ·
#       │               table           multiples@primary
#       │               spans           ALL
#       └── index-join  ·               ·
#            ├── scan   ·               ·
#            │          table           multiples@bc
#            │          spans           ALL
#            └── scan   ·               ·
# ·                     table           multiples@primary
# 
# query T
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT t1.a, t2.d FROM multiples t1 JOIN multiples@bc t2 ON t1.a = t2.b]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJy8lM2LqzAUxffvryh3nUeNH_1w1W0fj3YosxtcWHMpzthcSSLMUPzfB3WYammjUHGZj5Pf4ZxwLyBJ4C4-o4bwDTgwcIGBBwx8YBBAxCBXlKDWpKorjWArPiF0GKQyL0y1HTFISCGEFzCpyRBCeI2PGR4wFqjmDjAQaOI0qzG5Ss-x-tqci8ykeYYaGOwLE842HKKSARXm-q428Qkh5CUbzv5HqfxBB130MelQ_xN9FPnsnVI5I1kb-LXCNsFDN-5DN1cThSQlUKHoOIjKO3539JfyOXdubt5nex02H94CH7uFHnarhcUELbjDk3DHTqKH3UpiOUES3vAkvLGT6GG3klhNkIQ_PAl_7CR62K0k1hPPqDtuDqhzkhoHTSCnmmEoTtgMPE2FSvBFUVJjmuW-1tUbArVpTnmz2MrmqDLYFnOr2O2I-a3YtZN70J5V7dvF_jO-A6t4YScvniEvreKVnbx6hry2d-X0fBP7J7tlR-Wf7wAAAP__gsjtvg==
# 
# ############################
# #  LEFT OUTER LOOKUP JOIN  #
# ############################
# statement ok
# create table t (a int primary key, b int, c int, d int, index bc (b, c));
# 
# # Left join against primary index
# query T
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT x, a FROM (VALUES (1), (3)) AS v(x) LEFT JOIN t ON x = a]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJyUUE9LwzAUv_spwjspBNYWTzkVYULHWKVUL9JDaB4zrssL-QOO0e8uaQ46YaK3vN_L7987gyGFO3lED-IVShg4WEcjek8uQflDoz5AFBy0sTEkeOAwkkMQZwg6TAgCXuQU0a8K4KAwSD0tivfsgd1WbHyL5uDvYJg5UAxfKj7IPYIoZv53pw1p06FU6FblpVt_sijYdv3Ys_a5X3ds0zY7SJX0UbpTHYDDlugQLXsnbRgZweqk0caQXryurkYs_xOxQ2_JeLyId738wAHVHvPBPUU34pOjcbHJY7vwFkChD3lb5qExeZUCfieXv5KrH-RhvvkMAAD__w9jqsA=
# 
# # Left join against covering secondary index
# query T
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT x, c FROM (VALUES (1), (10)) AS v(x) LEFT JOIN t@bc ON x = b]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJyUkE9Lw0AUxO9-imVOCgttSk97CkKFlNJIiF4kh7j7qLFxX9g_oJR8d0n2oBUqets3b38zs3uCZUP79o081BMyNBKDY03es5ukdKEw71BLic4OMUxyI6HZEdQJoQs9QeGx7SP5xRIShkLb9bPjWtyK65XQL9Ee_Q2aUYJj-HLxoT0Q1HKUf0_acmcrag25RXaeVn8MpMRuc1eL8qHeVGJbFntIPOs8QGLHfIyDeOXOCrZK5BNexjCdZL6-2C77T7uK_MDW01mzy-9uJMgcKP215-g03TvWc0way5mbBUM-pG2WhsKm1VTwO5z9Cq9-wM149RkAAP__EYCogw==
# 
# # Left join against non-covering secondary index
# query T
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT x, d FROM (VALUES (1), (10)) AS v(x) LEFT JOIN t@bc ON x = b]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJyUkE9Lw0AUxO9-imVOCgttil72FIQKKaWREL1IDnH3UWPjvrB_QCn57pLsQStU9LZv3v5mZvcIy4Z27Rt5qCdkaCQGx5q8ZzdJ6UJh3qGWEp0dYpjkRkKzI6gjQhd6gsJj20fyiyUkDIW262fHa3ErLldCv0R78FdoRgmO4cvFh3ZPUMtR_j1pw52tqDXkFtlpWv0xkBLb9V0tyod6XYlNWewg8azzAIkt8yEO4pU7K9gqkU94GcN0kvnN2XbZf9pV5Ae2nk6anX93I0FmT-mvPUen6d6xnmPSWM7cLBjyIW2zNBQ2raaC3-HsV3j1A27Gi88AAAD__xJ9qIQ=
# 
# # Left join with ON filter on covering index
# query T
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT x, c FROM (VALUES (10), (20)) AS v(x) LEFT JOIN t@bc ON x = b AND c < 300]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJyUkU9r4zAQxe_7KYY5JSCInOSkk1lIwCHES_DuZeuDKw2JGldj9AcSQr57sX1oU0hpj_NGv_f0pCs6NrRrXimg-o8Z1gI7z5pCYN9L44HCnFFJgdZ1KfZyLVCzJ1RXjDa2hAr_NW2iMJMo0FBsbDs4LuE3TOagj8mdwhTrm0BO8d0lxOZAqORNfD9pw9btqTHkZ9l9WnXpSMF2ta6g_Fut9rApix0KfNZ5RIFb5lPq4IWtA3YK8h4vnKHz2raRvIJ8AU9JyoWGhZRKqWJXwcTbwzFCsIaAXXuZosAyxR4X-fJhpewnlfYUOnaB7uo8fqxaIJkDjR8UOHlNfzzrIWYcy4EbBEMhjttsHAo3rvoLfoSzL-H5J7i-_XoLAAD__xfiuIc=
# 
# # Left join with ON filter on non-covering index
# query T
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT x, d FROM (VALUES (10), (20)) AS v(x) LEFT JOIN t@bc ON x = b AND d < 3000]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJyUkU9rwkAQxe_9FMOcFBbcqL3sKRQUImKKpL20OaTZQbemO2H_gCJ-95Lk0FqwtMd5s7_39u2e0bKmTfVBHtULJlgKbB3X5D27ThoOZPqISgo0to2hk0uBNTtCdcZgQkOo8LlqIvmJRIGaQmWa3nEODzCaQr2P9uDHWF4EcgxfLj5UO0IlL-LvSSs2dkuVJjdJrtOKU0sK1otlAflTsdjCKs82KPCtTgMKXDMfYgvvbCywVZB2eGY1HZemCeQUpHN4jVLOaphJKZVS2aaAkTO7fQBvNAHb5jRGgXkMHS_S-5udkv902pJv2Xq66nP7tUqBpHc0_JDn6Gp6dFz3McOY91wvaPJh2CbDkNlh1V3wO5z8Ck9_wOXl7jMAAP__qcy4uQ==
# 
# # Left join with ON filter and WHERE clause
# query T
# SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT x, d FROM (VALUES (10), (20)) AS v(x) LEFT JOIN t@bc ON x = b WHERE d < 2000]
# ----
# https://cockroachdb.github.io/distsqlplan/decode.html?eJyUkU9Lw0AQxe9-iuWdFBa6qfaypyC0kFIaKdGL5hA3Q42NO2H_gFLy3SXJQStU9Dhv5vfeY_cIyzVtqzfy0I9IUEp0jg15z26QpoOsfodWEo3tYhjkUsKwI-gjQhNagsZD1UbyMwWJmkLVtKPjjbgVl3NhXqI9-CuUvQTH8OXiQ7UnaNXLvyetubE7qmpys-Q0rfjoSIvNclWI_L5Y7sQ6z7aQeDZpgMSG-RA78cqNFWy1SAd81bSBnBbpQjxFpa6NmCultNbZtoBEHsNwKNPF2fLJf8rvyHdsPZ0UP_8spQTVe5q-wnN0hu4cmzFmGvORG4WafJi2yTRkdloNBb_Dya_w_Adc9hefAQAA__-6pLCL
