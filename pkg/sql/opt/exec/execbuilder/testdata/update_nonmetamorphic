# LogicTest: local !metamorphic

# Check that updates on tables with multiple column families behave as
# they should.

statement ok
CREATE TABLE tu (a INT PRIMARY KEY, b INT, c INT, d INT, FAMILY (a), FAMILY (b), FAMILY (c,d));
  INSERT INTO tu VALUES (1, 2, 3, 4)

# Update single column family.
query T
EXPLAIN (VERBOSE) UPDATE tu SET c=c+1
----
distribution: local
vectorized: true
·
• update
│ columns: ()
│ estimated row count: 0 (missing stats)
│ table: tu
│ set: c
│ auto commit
│
└── • render
    │ columns: (a, c, d, c_new)
    │ estimated row count: 1,000 (missing stats)
    │ render c_new: c + 1
    │ render a: a
    │ render c: c
    │ render d: d
    │
    └── • scan
          columns: (a, c, d)
          estimated row count: 1,000 (missing stats)
          table: tu@tu_pkey
          spans: FULL SCAN
          locking strength: for update

statement ok
SET tracing = on,kv,results; UPDATE tu SET c=c+1; SET tracing = off

query T
SELECT message FROM [SHOW KV TRACE FOR SESSION]
 WHERE operation != 'dist sender send'
----
Scan /Table/53/{1-2}
fetched: /tu/tu_pkey/1 -> NULL
fetched: /tu/tu_pkey/1/b -> 2
fetched: /tu/tu_pkey/1/c/d -> /3/4
Put /Table/53/1/1/2/1 -> /TUPLE/3:3:Int/4/1:4:Int/4
fast path completed
rows affected: 1

statement ok
SET tracing = on,kv,results; UPDATE tu SET b = NULL, c = NULL, d = NULL; SET tracing = off

query T
SELECT message FROM [SHOW KV TRACE FOR SESSION]
 WHERE operation != 'dist sender send'
----
Scan /Table/53/{1-2}
fetched: /tu/tu_pkey/1 -> NULL
fetched: /tu/tu_pkey/1/b -> 2
fetched: /tu/tu_pkey/1/c/d -> /4/4
Del /Table/53/1/1/1/1
Del /Table/53/1/1/2/1
fast path completed
rows affected: 1

# ------------------------------------------------------------------------------
# Test without implicit SELECT FOR UPDATE.
# Some cases were all tested earlier in this file with implicit SFU enabled.
# ------------------------------------------------------------------------------

statement ok
SET enable_implicit_select_for_update = false

# Update single column family.
query T
EXPLAIN UPDATE tu SET c=c+1
----
distribution: local
vectorized: true
·
• update
│ table: tu
│ set: c
│ auto commit
│
└── • render
    │
    └── • scan
          missing stats
          table: tu@tu_pkey
          spans: FULL SCAN

# Reset for rest of test.
statement ok
SET enable_implicit_select_for_update = true

# ---------------------------------------------------------
# Partial Index With Delete Preserving Encoding
# ---------------------------------------------------------
statement ok
CREATE TABLE tpi (
    a INT PRIMARY KEY,
    b INT,
    c STRING,
    FAMILY (a, b, c),
    CHECK (b > 0),
    INDEX partial (c) WHERE a > b AND c IN ('foo', 'foobar')
);

let $t_id
select id from system.namespace where name='tpi'

let $updated_t_jsonb
WITH
  descs
    AS (
      SELECT
        id,
        crdb_internal.pb_to_json(
          'cockroach.sql.sqlbase.Descriptor',
          descriptor
        )
          AS descriptor
      FROM
        system.descriptor
    )
SELECT
  CAST (json_set(descriptor, ARRAY['table', 'indexes', '0', 'useDeletePreservingEncoding'], 'true') AS STRING)
FROM
  descs WHERE id = $t_id;

statement ok
SELECT * FROM crdb_internal.unsafe_upsert_descriptor($t_id, crdb_internal.json_to_pb('cockroach.sql.sqlbase.Descriptor',$$ $updated_t_jsonb $$), true)

statement ok
INSERT INTO tpi VALUES (3, 4, 'bar')

# Update a row that doesn't match the partial index.
query T kvtrace
UPDATE tpi SET b = b + 1
----
Scan /Table/54/{1-2}
Put /Table/54/1/3/0 -> /TUPLE/2:2:Int/5/1:3:Bytes/bar

# Update a row that didn't match the partial index before but matches after.
query T kvtrace
UPDATE tpi SET b = b - 3, c = 'foo'
----
Scan /Table/54/{1-2}
Put /Table/54/1/3/0 -> /TUPLE/2:2:Int/2/1:3:Bytes/foo
CPut /Table/54/2/"foo"/3/0 -> /BYTES/0x0a01031000 (expecting does not exist)

# Update a row that matches the partial index before and after, but the index
# entry doesn't change.
query T kvtrace
UPDATE tpi SET b = b - 1
----
Scan /Table/54/{1-2}
Put /Table/54/1/3/0 -> /TUPLE/2:2:Int/1/1:3:Bytes/foo

# Update a row that matches the partial index before and after, and the index
# entry changes.
query T kvtrace
UPDATE tpi SET b = b + 1, c = 'foobar'
----
Scan /Table/54/{1-2}
Put /Table/54/1/3/0 -> /TUPLE/2:2:Int/2/1:3:Bytes/foobar
Put (delete) /Table/54/2/"foo"/3/0
CPut /Table/54/2/"foobar"/3/0 -> /BYTES/0x0a01031000 (expecting does not exist)

# Update a row that matches the partial index before but not after.
query T kvtrace
UPDATE tpi SET c = 'baz'
----
Scan /Table/54/{1-2}
Put /Table/54/1/3/0 -> /TUPLE/2:2:Int/2/1:3:Bytes/baz
Put (delete) /Table/54/2/"foobar"/3/0

# ---------------------------------------------------------
# Expression Index With Delete Preserving Encoding
# ---------------------------------------------------------
statement ok
CREATE TABLE tei (
  k INT PRIMARY KEY,
  a INT,
  b INT,
  FAMILY (k, a, b)
)

statement ok
CREATE INDEX t_a_plus_b_idx ON tei ((a + b))

let $t_id
select id from system.namespace where name='tei'

let $updated_t_jsonb
WITH
  descs
    AS (
      SELECT
        id,
        crdb_internal.pb_to_json(
          'cockroach.sql.sqlbase.Descriptor',
          descriptor
        )
          AS descriptor
      FROM
        system.descriptor
    )
SELECT
  CAST (
    json_set(
      json_set(descriptor, ARRAY['table', 'indexes', '0', 'useDeletePreservingEncoding'], 'true'),
      ARRAY['table', 'modificationTime'], json_build_object('wallTime', cluster_logical_timestamp()::INT8::STRING)
    ) AS STRING
  )
FROM
  descs WHERE id = $t_id;

statement ok
SELECT * FROM crdb_internal.unsafe_upsert_descriptor($t_id, crdb_internal.json_to_pb('cockroach.sql.sqlbase.Descriptor',$$ $updated_t_jsonb $$), true)

statement ok
INSERT INTO tei VALUES (1, 2, 100)

# Update a row which changes the index entry.
query T kvtrace
UPDATE tei SET a = a + 1, b = b + 100
----
Scan /Table/55/{1-2}
Put /Table/55/1/1/0 -> /TUPLE/2:2:Int/3/1:3:Int/200
Put (delete) /Table/55/2/102/1/0
CPut /Table/55/2/203/1/0 -> /BYTES/0x0a01031000 (expecting does not exist)

# Update a row with different values without changing the index entry.
query T kvtrace
UPDATE tei SET a = a + 1, b = b - 1
----
Scan /Table/55/{1-2}
Put /Table/55/1/1/0 -> /TUPLE/2:2:Int/4/1:3:Int/199

# ---------------------------------------------------------
# Inverted Index With Delete Preserving Encoding
# ---------------------------------------------------------

statement ok
CREATE TABLE tii (
  a INT PRIMARY KEY,
  b INT[],
  FAMILY (a,b),
  INVERTED INDEX(b)
)

let $t_id
select id from system.namespace where name='tii'

let $updated_t_jsonb
WITH
  descs
    AS (
      SELECT
        id,
        crdb_internal.pb_to_json(
          'cockroach.sql.sqlbase.Descriptor',
          descriptor
        )
          AS descriptor
      FROM
        system.descriptor
    )
SELECT
  CAST (
    json_set(
      json_set(descriptor, ARRAY['table', 'indexes', '0', 'useDeletePreservingEncoding'], 'true'),
      ARRAY['table', 'modificationTime'], json_build_object('wallTime', cluster_logical_timestamp()::INT8::STRING)
    ) AS STRING
  )
FROM
  descs WHERE id = $t_id;

statement ok
SELECT * FROM crdb_internal.unsafe_upsert_descriptor($t_id, crdb_internal.json_to_pb('cockroach.sql.sqlbase.Descriptor',$$ $updated_t_jsonb $$), true)

statement ok
INSERT INTO tii VALUES (1, ARRAY[1, 2, 3, 2, 2, NULL, 3])

# Update a row that has 1 new entry and 1 removed entry in the index.
query T kvtrace
UPDATE tii SET b = ARRAY[1, 2, 2, NULL, 4, 4]
----
Scan /Table/56/{1-2}
Put /Table/56/1/1/0 -> /TUPLE/
Put (delete) /Table/56/2/3/1/0
InitPut /Table/56/2/4/1/0 -> /BYTES/0x0a01031000

# ---------------------------------------------------------
# Multicolumn Inverted Index With Delete Preserving Encoding
# ---------------------------------------------------------

statement ok
CREATE TABLE tmi (
  a INT PRIMARY KEY,
  b INT,
  c JSON,
  FAMILY (a, b, c),
  INVERTED INDEX(b, c)
)

let $t_id
select id from system.namespace where name='tmi'

let $updated_t_jsonb
WITH
  descs
    AS (
      SELECT
        id,
        crdb_internal.pb_to_json(
          'cockroach.sql.sqlbase.Descriptor',
          descriptor
        )
          AS descriptor
      FROM
        system.descriptor
    )
SELECT
  CAST (
    json_set(
      json_set(descriptor, ARRAY['table', 'indexes', '0', 'useDeletePreservingEncoding'], 'true'),
      ARRAY['table', 'modificationTime'], json_build_object('wallTime', cluster_logical_timestamp()::INT8::STRING)
    ) AS STRING
  )
FROM
  descs WHERE id = $t_id;

statement ok
SELECT * FROM crdb_internal.unsafe_upsert_descriptor($t_id, crdb_internal.json_to_pb('cockroach.sql.sqlbase.Descriptor',$$ $updated_t_jsonb $$), true)

statement ok
INSERT INTO tmi VALUES (1, 2, '{"a": "foo", "b": "bar"}'::json)

query T kvtrace
UPDATE tmi SET b = 3, c = '{"a": "foobar", "c": "baz"}'::json
----
Scan /Table/57/{1-2}
Put /Table/57/1/1/0 -> /TUPLE/2:2:Int/3/
Put (delete) /Table/57/2/2/"a"/"foo"/1/0
Put (delete) /Table/57/2/2/"b"/"bar"/1/0
InitPut /Table/57/2/3/"a"/"foobar"/1/0 -> /BYTES/0x0a01031000
InitPut /Table/57/2/3/"c"/"baz"/1/0 -> /BYTES/0x0a01031000
