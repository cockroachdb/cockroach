# LogicTest: opt

# ------------------------------------------------------------------------------
# Uncorrelated subqueries.
# ------------------------------------------------------------------------------
statement ok
CREATE TABLE abc (a INT PRIMARY KEY, b INT, c INT)

query TTT
EXPLAIN ALTER TABLE abc SPLIT AT VALUES ((SELECT 42))
----
root                          ·          ·
 ├── split                    ·          ·
 │    └── values              ·          ·
 │                            size       1 column, 1 row
 └── subquery                 ·          ·
      │                       id         @S1
      │                       sql        (SELECT 42)
      │                       exec mode  one row
      └── limit               ·          ·
           └── render         ·          ·
                └── emptyrow  ·          ·

statement ok
ALTER TABLE abc SPLIT AT VALUES ((SELECT 1))

query TTT
EXPLAIN SELECT EXISTS (SELECT a FROM abc)
----
root                ·          ·
 ├── render         ·          ·
 │    └── emptyrow  ·          ·
 └── subquery       ·          ·
      │             id         @S1
      │             sql        EXISTS <unknown>
      │             exec mode  exists
      └── scan      ·          ·
·                   table      abc@primary
·                   spans      ALL

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM abc WHERE a = (SELECT MAX(a) FROM abc WHERE EXISTS(SELECT * FROM abc WHERE c=a+3))
----
root                 ·            ·                 (a, b, c)  ·
 ├── scan            ·            ·                 (a, b, c)  ·
 │                   table        abc@primary       ·          ·
 │                   spans        ALL               ·          ·
 │                   filter       a = @S2           ·          ·
 ├── subquery        ·            ·                 (a, b, c)  ·
 │    │              id           @S1               ·          ·
 │    │              sql          EXISTS <unknown>  ·          ·
 │    │              exec mode    exists            ·          ·
 │    └── scan       ·            ·                 (a, b, c)  ·
 │                   table        abc@primary       ·          ·
 │                   spans        ALL               ·          ·
 │                   filter       c = (a + 3)       ·          ·
 └── subquery        ·            ·                 (a, b, c)  ·
      │              id           @S2               ·          ·
      │              sql          <unknown>         ·          ·
      │              exec mode    one row           ·          ·
      └── group      ·            ·                 (agg0)     ·
           │         aggregate 0  max(a)            ·          ·
           └── scan  ·            ·                 (a)        ·
·                    table        abc@primary       ·          ·
·                    spans        ALL               ·          ·
·                    filter       @S1               ·          ·

# IN expression transformed into semi-join.
query TTTTT
EXPLAIN (VERBOSE) SELECT a FROM abc WHERE a IN (SELECT a FROM abc)
----
join       ·         ·            (a)  ·
 │         type      semi         ·    ·
 │         equality  (a) = (a)    ·    ·
 ├── scan  ·         ·            (a)  ·
 │         table     abc@primary  ·    ·
 │         spans     ALL          ·    ·
 └── scan  ·         ·            (a)  ·
·          table     abc@primary  ·    ·
·          spans     ALL          ·    ·

query TTT
EXPLAIN SELECT * FROM (SELECT * FROM (VALUES (1, 8, 8), (3, 1, 1), (2, 4, 4)) AS moo (moo1, moo2, moo3) ORDER BY moo2) as foo (foo1) ORDER BY foo1
----
sort         ·      ·
 │           order  +foo1
 └── values  ·      ·
·            size   3 columns, 3 rows

# the subquery's plan must be visible in EXPLAIN
query TTT
EXPLAIN VALUES (1), ((SELECT 2))
----
root                     ·          ·
 ├── values              ·          ·
 │                       size       1 column, 2 rows
 └── subquery            ·          ·
      │                  id         @S1
      │                  sql        <unknown>
      │                  exec mode  one row
      └── render         ·          ·
           └── emptyrow  ·          ·

# This test checks that the double sub-query plan expansion caused by a
# sub-expression being shared by two or more plan nodes does not
# panic.
statement ok
CREATE TABLE tab4(col0 INTEGER, col1 FLOAT, col3 INTEGER, col4 FLOAT)

statement ok
CREATE INDEX idx_tab4_0 ON tab4 (col4,col0)

query TTTTT
EXPLAIN (VERBOSE)
SELECT col0
FROM tab4
WHERE
    (col0 <= 0 AND col4 <= 5.38)
    OR (col4 IN (SELECT col1 FROM tab4 WHERE col1 > 8.27))
    AND (col3 <= 5 AND (col3 BETWEEN 7 AND 9))
----
render                              ·            ·                                                                                                                                    (col0)                                                     ·
 │                                  render 0     "tab4.col0"                                                                                                                          ·                                                          ·
 └── filter                         ·            ·                                                                                                                                    ("case", "tab4.col0", "tab4.col3", "tab4.col4")            ·
      │                             filter       (("tab4.col0" <= 0) AND ("tab4.col4" <= 5.38)) OR ((("case" AND ("tab4.col3" <= 5)) AND ("tab4.col3" >= 7)) AND ("tab4.col3" <= 9))  ·                                                          ·
      └── render                    ·            ·                                                                                                                                    ("case", "tab4.col0", "tab4.col3", "tab4.col4")            ·
           │                        render 0     CASE WHEN agg0 AND (agg3 IS NOT NULL) THEN true WHEN agg0 IS NULL THEN false END                                                     ·                                                          ·
           │                        render 1     agg1                                                                                                                                 ·                                                          ·
           │                        render 2     agg2                                                                                                                                 ·                                                          ·
           │                        render 3     agg3                                                                                                                                 ·                                                          ·
           └── group                ·            ·                                                                                                                                    (rowid[hidden], agg0, agg1, agg2, agg3)                    ·
                │                   aggregate 0  rowid                                                                                                                                ·                                                          ·
                │                   aggregate 1  bool_or(notnull)                                                                                                                     ·                                                          ·
                │                   aggregate 2  any_not_null(col0)                                                                                                                   ·                                                          ·
                │                   aggregate 3  any_not_null(col3)                                                                                                                   ·                                                          ·
                │                   aggregate 4  any_not_null(col4)                                                                                                                   ·                                                          ·
                │                   group by     @4                                                                                                                                   ·                                                          ·
                └── join            ·            ·                                                                                                                                    (col0, col3, col4, rowid[hidden], "notnull", "tab4.col1")  ·
                     │              type         left outer                                                                                                                           ·                                                          ·
                     │              pred         (col4 = "tab4.col1") IS NOT false                                                                                                    ·                                                          ·
                     ├── scan       ·            ·                                                                                                                                    (col0, col3, col4, rowid[hidden])                          ·
                     │              table        tab4@primary                                                                                                                         ·                                                          ·
                     │              spans        ALL                                                                                                                                  ·                                                          ·
                     └── render     ·            ·                                                                                                                                    ("notnull", "tab4.col1")                                   ·
                          │         render 0     col1 IS NOT NULL                                                                                                                     ·                                                          ·
                          │         render 1     col1                                                                                                                                 ·                                                          ·
                          └── scan  ·            ·                                                                                                                                    (col1)                                                     ·
·                                   table        tab4@primary                                                                                                                         ·                                                          ·
·                                   spans        ALL                                                                                                                                  ·                                                          ·
·                                   filter       col1 > 8.27                                                                                                                          ·                                                          ·

# ------------------------------------------------------------------------------
# Correlated subqueries.
# ------------------------------------------------------------------------------
statement ok
CREATE TABLE a (x INT PRIMARY KEY, y INT);
CREATE TABLE b (x INT PRIMARY KEY, z INT);

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM a WHERE EXISTS(SELECT * FROM b WHERE a.x=b.x)
----
join       ·         ·          (x, y)  ·
 │         type      semi       ·       ·
 │         equality  (x) = (x)  ·       ·
 ├── scan  ·         ·          (x, y)  ·
 │         table     a@primary  ·       ·
 │         spans     ALL        ·       ·
 └── scan  ·         ·          (x, z)  ·
·          table     b@primary  ·       ·
·          spans     ALL        ·       ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM a WHERE EXISTS(SELECT * FROM b WHERE b.x-1 = a.x)
----
join       ·      ·            (x, y)  ·
 │         type   semi         ·       ·
 │         pred   x = (x - 1)  ·       ·
 ├── scan  ·      ·            (x, y)  ·
 │         table  a@primary    ·       ·
 │         spans  ALL          ·       ·
 └── scan  ·      ·            (x, z)  ·
·          table  b@primary    ·       ·
·          spans  ALL          ·       ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM b WHERE b.x = a.x)
----
join       ·         ·          (x, y)  ·
 │         type      anti       ·       ·
 │         equality  (x) = (x)  ·       ·
 ├── scan  ·         ·          (x, y)  ·
 │         table     a@primary  ·       ·
 │         spans     ALL        ·       ·
 └── scan  ·         ·          (x, z)  ·
·          table     b@primary  ·       ·
·          spans     ALL        ·       ·

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM b WHERE NOT EXISTS(SELECT * FROM a WHERE x-1 = b.x)
----
join       ·      ·            (x, z)  ·
 │         type   anti         ·       ·
 │         pred   x = (x - 1)  ·       ·
 ├── scan  ·      ·            (x, z)  ·
 │         table  b@primary    ·       ·
 │         spans  ALL          ·       ·
 └── scan  ·      ·            (x, y)  ·
·          table  a@primary    ·       ·
·          spans  ALL          ·       ·
