# LogicTest: 5node

# These tests are different from explain_analyze because they require manual
# data placement.

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT, FAMILY (k, v))

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i);

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT, FAMILY (k, w))

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify that EXPLAIN ANALYZE (DISTSQL) annotates plans with collected
# statistics.

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv WITH DETAILS]
ORDER BY 1
----
start_key           end_key                 replicas  lease_holder
<before:/Table/72>  …/1/1                   {1}       1
…/1/1               …/1/2                   {1}       1
…/1/2               …/1/3                   {2}       2
…/1/3               …/1/4                   {3}       3
…/1/4               …/1/5                   {4}       4
…/1/5               <after:/Table/107/1/1>  {5}       5

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw WITH DETAILS]
----
start_key                end_key       replicas  lease_holder
<before:/Table/106/1/5>  …/1/1         {5}       5
…/1/1                    …/1/2         {1}       1
…/1/2                    …/1/3         {2}       2
…/1/3                    …/1/4         {3}       3
…/1/4                    …/1/5         {4}       4
…/1/5                    <after:/Max>  {5}       5

# This query verifies stat collection for the tableReader, mergeJoiner, and
# aggregator.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT kv.k, avg(kw.k) FROM kv JOIN kw ON kv.k=kw.k GROUP BY kv.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: custom
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
DistSQL network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• group (streaming)
│ sql nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ execution time: 0µs
│ group by: k
│ ordered: +k
│
└── • merge join
    │ sql nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ execution time: 0µs
    │ estimated max memory allocated: 0 B
    │ estimated max sql temp disk usage: 0 B
    │ equality: (k) = (k)
    │ left cols are key
    │ right cols are key
    │
    ├── • scan
    │     sql nodes: <hidden>
    │     kv nodes: <hidden>
    │     regions: <hidden>
    │     actual row count: 5
    │     KV time: 0µs
    │     KV rows decoded: 5
    │     KV pairs read: 10
    │     KV bytes read: 40 B
    │     KV gRPC calls: 5
    │     estimated max memory allocated: 0 B
    │     missing stats
    │     table: kv@kv_pkey
    │     spans: FULL SCAN
    │
    └── • scan
          sql nodes: <hidden>
          kv nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV rows decoded: 5
          KV pairs read: 10
          KV bytes read: 40 B
          KV gRPC calls: 5
          estimated max memory allocated: 0 B
          missing stats
          table: kw@kw_pkey
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm-1um8wSx7-fq1jtp1TFtRfwS5AquU17jtLT2FVeKlVHUUTM1EHG4LLrODlRLuu5gefKHoHjxLAxzjgOWCz5UNmwxsxvhvmbP9M7yv941KInX79_PTglo-sPI43Y18O90ezD6B3593H_iIyuybf-YY-MZqTfi5eQjyTaT_5z3D_7QT7_ijdSjfqBAz17DJxa_6OMalSnGjWoRk2q0SY91-gkDAbAeRBGS-7iDxw6N9RqaNT1J1MRbT7X6CAIgVp3VLjCA2rRU_vSg2OwHQjrDapRB4TtevHXjK67o-uLyQhuqUYPAm869rlForM5mdjRy1o9Oov__iTRl3GL-Gz-NoShG0QLBHAx3yTcMVik8fdf_GFJMOPEgUHggGORh89d3grgJATbsUiHfJ5vHB7_OCAD2_P447qJ7YaLddEZHP08OCBcwIQMgqkvyB7ciLrri3cWacRBzRcAjFYtGNs3ZAzjILwltucFA1tEp9WIz-HSFoMr4CSYislUWCRaH5_-YgOj5_canb-bw1_AvbwlVza_SmLtRuvPNcqFPQRqsaXUHX6hVuNe2yx7rVT2Zt3RLCt7dVblbwv501P5a63M39Nxg9CBEJz0cd9HJ_KiVc-UwhGEQ_gWuD6EdZa6kj34Lfa67P27j6E7vJq_pBrtR9F3mdaNkgA3MJgKN_CTuc4iG-3jfzwiYDwhjstHZMrtIWwM_gmqkYLKUFfFp-EwhKEtgrDOmlLyNNqfg41ipxr91Pt10eufXvTOvn_f67IIzMnZ0V5Xj14d9M96pw-vVxB64_oy0yiaryuwbF5643W8Ts6OLg4jYkb07hh8B8K4xkhXr3eNLVJ8ItRMEdJXF8tTzFP_OUbP4ukFtWBS11OVtGkczZVxtNJxJDPNXi4FDCnkdb1WNyop2LaUs03z18ZKeZW_t5Dy9sr85SjlrGxSjroqlqW8VTopb72uwNZIOSuBlCeLRX95C9WxEmjU6mbVQrctgfqm-etgJbDK31tIYGdl_nKUQL1sEoi6KpYlsF06CWy_rsDWSKBeAglMFovx8hZqYCXQrNWbVQvdtgQam-ZvHyuBVf7eQgL3V-YvRwk0yiaBqKtiWQI7pZPAzusKbI0EGiWQwGSxmC9voSZWApu1qoFuWwDNTbPXRApgrc6I7TuEkUBcQVhlcttS2FyZyRyl0CybFKKuj2Up3C-dFO6_rsDWSKFZAik0MQ_Cj4FPAp9D6hnn81_VSH1VjUU8wRnCnD8PpuEAfoTBIF47f9uPDxT3fAe4mO_V528O_cUuLmyR9dD0LS_EBo1DDMEeP47XvDyUzspQfBCzIBwRzxbgD24fY1lsn9muSEbpAIfQtT33_7aMYPGx-NxDGIB7HTNY2rWQoMd9MYDF3jHwiEv6w1g-DAmIGQUTYhmEOlshxJKEdCwh5WrIQBLSi66h3AmZEiGG6Kj6TnXUFi6UzspQSpprhgSU6qj5E8q_o2IJKVdDBpKQXnQN5d9RJUJ6mlBjmVASUGP5UE2pORuZsM1d-rmburSaTVwsrKGaFLeQ2WZN5Qgha0hXrobayBrSlauhtlRDZmZ7fgbQ4lAdCXYz81B6S271O_PjWYqltaGzUtK6YTg-q2-1i081Q8ZSuLOSe7J1LCH1nBUkocKdldzvJU2JUHtDZ6WkJdTG8Vl9q70DHRUZS-HOSv4dFUtIPWcFSahwZyX_jioR6mT-3t7PcFak5ry_obNS0mpsSi5WNqAMu6Z476mFzLaCzgoy3Qo6K8gaUtBZkR8NSE9b11kr5RawjlRDDPO0VYEa0pGAlLvvZlhCGeZN8fdNOjqaohOee88wsIgKd1ryf-IqI5IeuapttXSQgJS7-WZYQhkOzg60VXQ0RSc8_7aKRVS43ZJ_W5URSQ-TE7_nmZlhuMg9WnruqrjjIrlbawgpOCGDLaIMI2cHXClswhU0XbAJV9B1kasoewqlaEL5uy5yEVWzLckfQ0hAyt2EMywhBUdm0Ih2eUTKwEajoOsiI6oGXBKE9pGAlLsJZ1hCCs7NoBHt8pyUgY1GQddFRpQ95cKyxlzkHl3NuSRdF9nk2njQpaSIWtgiUnB8BltFGVZO8cZUG5twBV0XKeF6NeuSdF2kItJ3e9Yl_3FWJKCiXZf8H8piCSnouqARKVdFBhZRhpVT_B2UKUez27MuubdV6f_3rgFUtOuSf1vFElLQdUEjUq6KDCyiDCtnB9qqHE32rIueNesi9-hq1iXZoyWTaw0hBV0XbBEp6Lpgq0jBARpsFWVYOTtgTMkJr2Zdkq6LeX-u0d9eMLtwHWrRxsNf7Zl_Fn80-oA95NS6oydXwSymdXo7AU6t37bHQaNH9gi-gIBw7PouF-6AWiKcwv39v_4JAAD__yoCtQA=

# This query verifies stats collection for the hashJoiner, distinct and sorter.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT DISTINCT(kw.w) FROM kv JOIN kw ON kv.k = kw.w ORDER BY kw.w
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: custom
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
DistSQL network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• sort
│ sql nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ execution time: 0µs
│ estimated max memory allocated: 0 B
│ order: +w
│
└── • distinct
    │ sql nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ execution time: 0µs
    │ estimated max memory allocated: 0 B
    │ distinct on: w
    │
    └── • hash join
        │ sql nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 5
        │ execution time: 0µs
        │ estimated max memory allocated: 0 B
        │ equality: (k) = (w)
        │ left cols are key
        │
        ├── • scan
        │     sql nodes: <hidden>
        │     kv nodes: <hidden>
        │     regions: <hidden>
        │     actual row count: 5
        │     KV time: 0µs
        │     KV rows decoded: 5
        │     KV pairs read: 10
        │     KV bytes read: 40 B
        │     KV gRPC calls: 5
        │     estimated max memory allocated: 0 B
        │     missing stats
        │     table: kv@kv_pkey
        │     spans: FULL SCAN
        │
        └── • scan
              sql nodes: <hidden>
              kv nodes: <hidden>
              regions: <hidden>
              actual row count: 5
              KV time: 0µs
              KV rows decoded: 5
              KV pairs read: 10
              KV bytes read: 40 B
              KV gRPC calls: 5
              estimated max memory allocated: 0 B
              missing stats
              table: kw@kw_pkey
              spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsW-1um0gX_v9exWh-tXpx7eHDH0iVoiZ99aa7TaokqrRaRRUx0wSBwWXGcbJRLmtvYK9sBa7jmBPGOY4LOOP-qGIzYM7zHM5zeA7cUfEjoi49_fj7x_0zcnB4enZ4tH9G3oTTd9O35H8nx59JeE0-HR8ekXBKjo9IeP0uJO9Jtp0cnxx8PCEf_sg_UYPGic-PvBEX1P2TMmpQkxrUoga1qUEdem7QcZoMuRBJmi25y3c49G-o2zFoEI8nMvv63KDDJOXUvaMykBGnLj3zLiJ-wj2fp-0ONajPpRdE-c-E13vh9bdxyG-pQfeTaDKKhUtCatDTsZf92WpnZ_HbV5L9mHBJzGYfU34ZJNkCyYWcfSWDEXdJ55-_xc8lyVQQnw8Tn_su-bnfxa3kgqTc813SJx9mX16efNknQy-KxMO6sRek83XZGXz-ur9PhORjMkwmsSRv-I1sB7F865JOHtRsAedh2YKRd0NGfJSkt8SLomToyey0Ovk5XHhyeMUFSSZyPJEuydbnpz__gtHze4POPs3An4N7cUuuPHG1DOtetv7coEJ6l5y67BF1hwfU7dwb67HXLbA33QungL3pgr022_G3Af7MAn_dUv4Wx53ESerzlPtLRz7P9ly15Ikk-L8nrj4lQczTNitcwhH_Lt_ssbfv0-DyKv-LGvQ4C3ovA57f8OFEBkm8zO9G0VwgZRWQYqhUPwiEDOKhbDMH8FFNJLi8sIvROi9IDBUeZqcmPBaxOoVYTRSzp0kqedo2Aa__rTyQbjGQ55D2FGX52T_J21HSSsZtq0BaSZgrQ3FKQ-kVQrGWOWHPFxaGbAvaZqtt7YRl040BW5e_HrYx2PH3KxqDXil_VTQGbJsaA1SqLxqD7nY2Bt0XJIayMWDNawxQzM4bA8BrAxqDZdLM51djE6umVqtt76rxptXUXJe_PlZNd_z9CjXtl_JXhZqa26SmqFRfqGlvO9W094LEUKqp2Tw1RTE7V1PAawPUdJk06_nV2MKqqd1qO7tqvGk1tdblb4BV0x1_v0JNB6X8VaGm1japKSrVF2ra30417b8gMZRqajVPTVHMztUU8NoANV0mzX5-Nbaxauq0drV401pqr8ueg9TSVpsRL_YJI4m84umOyU2rqlPKZBWqam-TqqKSfqGqg-1U1cELEkOpqnbzVBXF7FxVAa8NUNUBZqZ9wsU4iQUvXtVP_lSn8FMtlrHM_Us-SwmRTNIh_5Imw3zt7ONxfqBcPnwu5GyrOftwGM83CelJ1YBZBV62TfyIiOSjMfEDEZKJ8C75s7Ht0DzElHujhwebnh_KoDSUmMtpkoYk8iSPh7cPscy_n3qBXI7S54KngRcFf3kQgvlu-bmnfMiD6xyDR5vmavawLQdgvnXERYZLcWcsPgwJEHNqRogpEOpvBCG2jJCJRMhkuuWQhUWopxtCNkCIISqq2aiK2sWFMigN5ZVyzZAAFSpq9QhVX1GRCBUqqgY5ZGER6umGkA0QMosIdR4jZC0B1Hl8KAcUZ0sJtt2kdrdwaTkOLhamXbPSRbLNtGtWusgcMi3dEOohc8jU7rayB3LIVpZnp7w89wHYjvJQXYj1w6HAWXXVosHgaTWmDwew9NY0aV5pCjIcPuWXaP1UM2QstZs0lZNtIhHS0KTBIlR331P5bakNEOqvadK80hTq4fApd34aUFGRsdRu0lRfUZEIaWjSYBGq26SpvqIChAbKfpt1FC4NqM5MPWUot2leaT460DRcMcsrb4Lqd7K6WL41NGqwhGvo1GCzSEOrBmYRGDYsV2lTYdZAvNW-_BNuzevWxD6Ee4V5qFtCmkiAtLtiGRYhhR9U_62YiY2mdu-m8pphoSHSrheyIURg4qC3e9NHAqTfgztYhBSmUAPKKjaa2g2c6ssqGqK6HZzqyyqESD19ZV2FhQNrNJi_am7hAMNsBUIaPr-DTSKFL9QAlwtLuIYWDpZwDS0cmEVguLtcpfsKCwfiDeYamls4EG4w19DbwrGQANV9xVaeQgyLkIaP9GAhUvhC9d-OWeho9LNwAEQm5r1TDe7GBkiA6rZwqi-rWIQ0fK4HC5HCF2pAWUVHo5-FAyFSz3dNxXzXgTUazHc1t3CAY7YCIQ0tHGwSafhoDzaLFL5Q_S5XD0u4hhYOJByMeJertK2wcCDe6tev9LNwINxgrtEoC6f6Z3eRAGl3xTIsQhpaOFiIan-0p3qnFA1Ro8ZZxXsNGM2KWY1uDgV4A3kFQHVbONWXVSxCGlo4WIhqf7Sn-rKKhqjcF2pAWYXRqOe7pmK-68AarX5vTT8LBzpmK94O1a5t6WKTSEMLB5tFGj7ag80ihS_UAJcLEq5-3dVSvO7aB9BYYLChuYUzuD836PcomX4LfOrSzs9_rSf-m_-j2Q7epaDuHT29SqY5Wme3Yy6o-92LBDfoZy_kB1zydBTEgZDBkLoynfD7-__8GwAA__-cH_Il

# This query verifies stats collection for WITH ORDINALITY and the hashJoiner.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv WITH ORDINALITY AS a, kv WITH ORDINALITY AS b
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: custom
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
DistSQL network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• cross join
│ sql nodes: <hidden>
│ regions: <hidden>
│ actual row count: 25
│ execution time: 0µs
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│
├── • ordinality
│   │ sql nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 5
│   │ execution time: 0µs
│   │
│   └── • scan
│         sql nodes: <hidden>
│         kv nodes: <hidden>
│         regions: <hidden>
│         actual row count: 5
│         KV time: 0µs
│         KV rows decoded: 5
│         KV pairs read: 10
│         KV bytes read: 40 B
│         KV gRPC calls: 5
│         estimated max memory allocated: 0 B
│         missing stats
│         table: kv@kv_pkey
│         spans: FULL SCAN
│
└── • ordinality
    │ sql nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ execution time: 0µs
    │
    └── • scan
          sql nodes: <hidden>
          kv nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV rows decoded: 5
          KV pairs read: 10
          KV bytes read: 40 B
          KV gRPC calls: 5
          estimated max memory allocated: 0 B
          missing stats
          table: kv@kv_pkey
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsVN1uGj0Qvf-eYjRXXytH7C7QC1-RklShTUIEKFVVocisJ8TaH29sLwFFPFZfoE9WmQ0JrAJN-nPXvUCamePj43NG3KO9TZHj8Pj0uDuCt_Bh0D-DZAafe6MT6A-OeueHp73RFzgcgmA7BhNkmGtJ5yIji_wrhjhmWBgdk7Xa-Nb9CtCTc-QBQ5UXpfPtMcNYG0J-j065lJDjSExSGpCQZBoBMpTkhEpXtMmsk8yuioQWyLCr0zLLLYeEwQwZDgvhqwNk-OkS_G2WQx5WpaGp0n7syLqq5VRGHILv3-wDRN9ZkBRrSZJDu2pOFo4sGBKSQyuA91V3OrjoQizS1D4CC6HMGhh62WeX3S5YRwXEuswd_E9z11C5e8MhaDwBiJJdgEzMIaNMmwWINNWxcF5YJWIiXHxDFnTpitJx8PjVA9aNNo6XDKvqwWjrxJSQhxvJ9I6QB0v28nD6RqpcpMotGuF2NjSnuHRK59vG_obQqCY0fI3QzS2K_m3RH9-iZi2c6Be3qPm3t6hVE9rcKfRJX5lrI8mQ3BI39id_BnnmtSfC3nzUKifTaG2_tu-ld0LWiVinyTot1mmzzjtku2zYl6Wf2dsUHGUFSGUTKK2Y0oujjnZb2K5Z2HpN1gOyhc4t1a189qagdtNB6A0lOaUqIKtLE9OF0fEKW5X9FdGqIcm6ahpWRS9fj6wzJLLHP7xNpnAvU2uLKdxkiupM0V6m5m5NYZ2p-QpN0SZTs87U2svU3ufTmOF1qu-ulESOwcN38MzP-kN_QEytX4Dhjb5b0Y4WhY_vWqSWGJ6JhI7IkclUrqxTMXJnSlou__sRAAD__zlYvp4=

# Verify that EXPLAIN ANALYZE on an unsupported query doesn't return an error.
statement ok
EXPLAIN ANALYZE (DISTSQL) SHOW QUERIES;

statement ok
EXPLAIN ANALYZE (DISTSQL) EXPLAIN SELECT 1

# This query verifies support for zeroNode in DistSQL.
query T
EXPLAIN (DISTSQL) SELECT sum(k) FROM kv WHERE FALSE
----
distribution: local
vectorized: true
·
• group (scalar)
│ estimated row count: 1
│
└── • norows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkktrq0AUx_f3UwxnZWBCnCxndXNvLBXyakwfUKQMemLEx9iZsWkJfvfi2DRpaEJ7FsJ5-PvhH3egn3Pg4D0sJiN_RpyxH6yCm0mPBN7E-78iui6crEeulvMpyV7I_bW39Mha5BqBQiljnIkCNfBHYBBSqJSMUGup2tHOHvjxK3CXQlpWtWnHIYVIKgS-A5OaHIHDnchr1AMXKMRoRJpbokv-Eccl0aYuM92DsKEga3OgaCMSBM6OtP4YuNvQn5tHSaIwEUaqAftqD26nzl92Xjs80bLfaJeoK1naEA_Kcyb3xNRnTUgB4wS7lLWsVYQLJSN727VzC7KDGLXptqxr_HK_0kahKD5TOyaxi6ThJVJIYZ3L7VMaAwf3o_rfPPYF7Qsi0W1EwUZuLXb1VrUfaH82ClOR4RgNqiItU23SCLhRNTbNn_cAAAD__wCO4Ww=

# This query verifies stat collection for the tableReader and windower.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT avg(k) OVER () FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: custom
rows decoded from KV: 5 (40 B, 10 KVs, 5 gRPC calls)
maximum memory usage: <hidden>
DistSQL network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• window
│ sql nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ execution time: 0µs
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│
└── • scan
      sql nodes: <hidden>
      kv nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV rows decoded: 5
      KV pairs read: 10
      KV bytes read: 40 B
      KV gRPC calls: 5
      estimated max memory allocated: 0 B
      missing stats
      table: kv@kv_pkey
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsls1u4zYQx-99CmJONkDD-nJR8JTWSYugTR04gXsojIARJw6hDyok5Y8N_Fj7AvtkC0pW1vLagXW3DoY5MyRH_98fpN7BvKXA4OHmn5vxI-HLRS_pk8nsZkp6ffLndHJHkiVQyJXAf3mGBtj_4AOFACiEQCECCiOYUyi0itEYpV3JezXhVqyBeRRkXpTWhecUYqUR2DtYaVMEBo_8OcUpcoF66AEFgZbLtNomWV4ly6ciwQ1QGKu0zHLDSAIUHgru_g6Grou_Z8RtZhjJ_XqocSGVK7BobB2yMkNGvG9fza5ErQwRGCuBgpHdvOeNRUM0csHIb-SPOriY3o9JzNPUfNQVXOqmznVwNxuPibFYkFiVuSU9XNuhzG2fEa96qboAMTlVkPE1yTBTekN4mqqYW9eWV_XwzG38ioao0halZcTVV-03AR_mWwr1aKeysXyBwPw9LLfXwLwtPUHmB5AyV1qgRtGCMd8eYfefzIVaoR6O2uB-n_3Vu_L7QGHi-rtyGuEa49JKlbdRfPbiLmfeUmIxK4iQJiGl4Qs8W5fRSV2CA11GLV388x3rd3TsMBgMw4tnu3jWb7EJzmcTdGUTDobRhU0XNkGLTXg-m7Arm2hQHTIXNmezCVtsovPZRF3ZjAYXMl3IRCdv4SNkpmgKlRs8uI2P7-Qd7DTw3bWNYoH1HW9UqWO81yquauvhpFqoCgg0ts769eA2r1K-20Ejzz4-IvZX8j9d6dfWSt6nKwVde-KVAJCjXSmdkJRbzOPNh8Wa-IpL2zafQINa8lR-4T9_lDTTKr4aY5TLxp9NqjFpk6uN2mQzNO5LZb_AO9ND-_r4h_qEF3329QkO9Yku-uzrEx7qM7ros69P5E7Hl1StnqQABt7uGRz5aR5wE_jCuCP64VWtKrEeN4U7YF94apDCHU_wGi3qTObSWBkDs7rE7faX7wEAAP__t7IAOw==

# Very simple query to make it easier to spot regressions when rewriting results
# in test files.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT k FROM kv WHERE k = 0
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: custom
maximum memory usage: <hidden>
DistSQL network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• scan
  sql nodes: <hidden>
  kv nodes: <hidden>
  regions: <hidden>
  actual row count: 0
  KV time: 0µs
  KV rows decoded: 0
  KV bytes read: 0 B
  KV gRPC calls: 0
  estimated max memory allocated: 0 B
  missing stats
  table: kv@kv_pkey
  spans: [/0 - /0]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkt2K2zAQhe_7FMNctaAlzq2gUJpNaWjTXZKwvShhUazZrLBsuZpxfgh-rL5An6zIyqY_dGF1YTxHn84ce3RC_u5R43L6eTpZQQUfFjdzqHbw9eN0MYUK3kKBCptg6YupiVF_wzGuFbYxlMQcYpJOAzCzB9SFQte0nSR5rbAMkVCfUJx4Qo0rs_G0IGMpjpKxJTHOD7bV7l21u28rOqLCSfBd3bCGChUuW5NeR8Vw5NMdpG6soRnnMtLWhUQIsWRJXE0aip8_-IyEPYOlMliyGs42m6MQQySTJHifxe3idgKl8Z4vXGtcvHCocH43mQALtVCGrhF4TQcZuUbeaMgRM0BUPQfU5gA11SEewXgfSiN0ybAxUj4SQ-ik7SR3HOL_Fta9wlydfzOL2RLq8R9zmV2jLnr18tEsiNvQMP01lec6Ff90uhr3a4Vkt5TvA4culnQbQzmwubwZjAbBEkveHedi1jxtsUQydY6_Vvjgw_7eWdRYnNfVfx5PC9MBs-X0YcvHsB9sV8c2xXownknh3FR0TUKxdo1jcSVqiR31_atfAQAA__-NMPUE

# Test a query that has a subquery and a postquery.
statement ok
CREATE TABLE parent (p INT PRIMARY KEY);
INSERT INTO parent VALUES (1), (2);
CREATE TABLE child (c INT PRIMARY KEY, p INT REFERENCES parent(p))

query T
EXPLAIN ANALYZE (DISTSQL) INSERT INTO child VALUES (1, (SELECT min(p) FROM parent))
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: custom
rows decoded from KV: 2 (16 B, 4 KVs, 2 gRPC calls)
maximum memory usage: <hidden>
DistSQL network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• root
│
├── • insert
│   │ sql nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 1
│   │ execution time: 0µs
│   │ into: child(c, p)
│   │
│   └── • buffer
│       │ sql nodes: <hidden>
│       │ regions: <hidden>
│       │ actual row count: 1
│       │ execution time: 0µs
│       │ label: buffer 1
│       │
│       └── • values
│             sql nodes: <hidden>
│             regions: <hidden>
│             actual row count: 1
│             execution time: 0µs
│             size: 2 columns, 1 row
│
├── • subquery
│   │ id: @S1
│   │ original sql: (SELECT min(p) FROM parent)
│   │ exec mode: one row
│   │
│   └── • group (scalar)
│       │ sql nodes: <hidden>
│       │ regions: <hidden>
│       │ actual row count: 1
│       │ execution time: 0µs
│       │
│       └── • scan
│             sql nodes: <hidden>
│             kv nodes: <hidden>
│             regions: <hidden>
│             actual row count: 1
│             KV time: 0µs
│             KV rows decoded: 1
│             KV pairs read: 2
│             KV bytes read: 8 B
│             KV gRPC calls: 1
│             estimated max memory allocated: 0 B
│             missing stats
│             table: parent@parent_pkey
│             spans: LIMITED SCAN
│             limit: 1
│
└── • constraint-check
    │
    └── • error if rows
        │ sql nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 0
        │ execution time: 0µs
        │
        └── • lookup join (anti)
            │ sql nodes: <hidden>
            │ kv nodes: <hidden>
            │ regions: <hidden>
            │ actual row count: 0
            │ KV time: 0µs
            │ KV rows decoded: 1
            │ KV pairs read: 2
            │ KV bytes read: 8 B
            │ KV gRPC calls: 1
            │ execution time: 0µs
            │ estimated max memory allocated: 0 B
            │ table: parent@parent_pkey
            │ equality: (column2) = (p)
            │ equality cols are key
            │
            └── • filter
                │ sql nodes: <hidden>
                │ regions: <hidden>
                │ actual row count: 1
                │ execution time: 0µs
                │ estimated row count: 1
                │ filter: column2 IS NOT NULL
                │
                └── • scan buffer
                      sql nodes: <hidden>
                      regions: <hidden>
                      actual row count: 1
                      execution time: 0µs
                      estimated row count: 1
                      label: buffer 1
·
Diagram 1 (subquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJysU9Fu2koQfb9fsZonkBZhE13pap-SS6iESiACEqmqENrYE2fFetfdHRdoxGf1B_pl1dpxipMmbdT6Abwzx2fOzpm5B_9Jg4DxdDGaL9l4upyx5E7plF2fTa5GC9aJOessRpPRcMlyZTpFl72bzy5YIR0a6naBg7EpTmWOHsRHiIHDv7DiUDiboPfWhfB9BRqnOxARB2WKkkJ4xSGxDkHcAynSCAKmtmeL_gA4pEhS6YoUd5iUpKxhpHIULPr21QOHG0nJHXpmSypKEiwCDs5ufwRiWB041KeHep5khiBOjgSOz0EMDvxIY_y6xqW80ThHmaLrR22ldVtO6791scE9cBhaXebGC1YAh0Uhw2sPOExUroiFjr2_ZqG4F8w8HB1mygYgoac61Lp7gISrppjYFFPR0NzsCT1zKFPB_mP_18FsfjlkidTaP-IKqVyDC92-uB4OmScsWGJLQ6yDO-orQ13BouqSNQBx8xIglzuWY27dnkmtbSIpyIoqDX_gVPzEqegtTp1lmcNMknX9uG3U2fTDejpbrqdXk0nnNA5z_PenbPBEe9zS_otNmKMvrPHY0v1SpehJpV58WHHANMN6_bwtXYKXziYVtj7OKqIqkKKnOntSH8amSXlyKPPH1h8zxa8yDd7ANHiVKXrOJKsGgEHaWrdhWhKaZP9oWhPfSkVtO1P06JTU6ot87nXzWeWvwwTV52a3mlSzYE2uXrImm6P3MmsBot-coeP-VO7dartdqxQERA9P7yc_zQPhA5n5MEKLO7utmrXcF2EAbqX2yOFCbvAcCV2ujPKkEhDkSjwc_vkeAAD__3yY9XM=
Diagram 2 (main-query): https://cockroachdb.github.io/distsqlplan/decode.html#eJy0ksGK2zAQhu99CjGnBLTE8t50K90UDLtJSdJeiilaeZyIypIrjZotwY_VF-iTFdu77dZ0AzmsDoL5JX3zIeYE8ZsFCcVqu9zsWLHarZk-GFuxT29vPy63bCY4m22Xt8t3O9YYN2vn7P1mfcdaFdDRfA4cnK9wpRqMID-DgJJDG7zGGH3oo9NwoageQGYcjGsT9XHJQfuAIE9AhiyCBOu1suy7sgkjyxYZcKiQlLEDGR9QJzLeMTINSpb9-hmBw70ifcDIfKI2kWT9q-CPfwMBZcdhrB4bR1J7BCmemRY3ILOOXyp7n-oaAxML8dqy-URWXC6rfXLE8kX-2q7XE9f8EtcNxta7iP9IvtQpm3S6El3JAas9jqMXfQoaPwSvh7tjuR5AQ1BhpPFUjEXhno4iBVTNn7l4ThJnSfnLJDEl5WdJ1-ecSg619ccvpgIJ2eO6-s_2tKB_oPax_-ztwR8H7O5H239VrWxEDnfqK94gYWiMM5GMBkkhYde9-R0AAP__XNhbxw==
Diagram 3 (postquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJy0lM9uGj8Qx--_pxjNCSRH7EIOP_mUlBBpEwIREC4Vipzdgbjs2lvbq4AiHqsv0CervIY0oEKbSvUBNOPx15_5s35F-zVHjslg3BtNIBlMhpA-yzyD6WX_oTeGRsygMe71e90JFFI1yiZcj4Z3UApDyjWbyFDpjAaiIIv8M8Y4Y1ganZK12njXax2QZCvkEUOpysp594xhqg0hf0UnXU7IMdepyMGmQsFTNZ-TgagVIcOMnJB5LT-sHIeLNjKkFaWVk1qBkwVxiL5_s8jwSbj0mSzoypU-1p83-uWnI8bZhmGwthzWiQUhj9-BJ1fIow37c_ZrmTsyZFrxPnDwc7iIIRnDYDiBwUO__0_42wf88Uf4b7RUIxIZmVZ7P4PJuiQO_d71BC4HkwRuhskAGYYBuAh_j-WS1siwr_WyKuGLlgq08lkjw67Oq0JZDiVuGcBn5FPZ2daJPN8vxO0UPLvloOJgGlpI7XUcWRdchyfqSmWU6oyyoH87hae1IwuGRMbhf_gUnIvRfRdSkef2La4U0uzifA3upt0uWEclpLpSDhq0ci2pXJNv5zIEEC2PBRzpcSFWUFChzRpE7ofeedqoRvtt_6Oj_e8c9L_9kf6Hb4-M0QbkPBQybnX2R-FvZ_Y48_kBc-cjzCOypVaW9iCP3RQd3HQWb2YMKVtQeKSsrkxK90andWwwh7VQ7cjIurAbByNRuy3rDIni7cl4rxSfVGofV4oPldonlTrHldqHSp2TSuenspsxnOf65VFmyDHarrNf_OwW-gNiYX3bxs_6pZb1L4pFPhe5JYZ3YklX5MgUUknrZIrcmYo2m_9-BAAA__80RSQZ
