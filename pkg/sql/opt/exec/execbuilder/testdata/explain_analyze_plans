# LogicTest: 5node

# These tests are different from explain_analyze because they require manual
# data placement.

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT, FAMILY (k, v))

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i);

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT, FAMILY (k, w))

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify that EXPLAIN ANALYZE (DISTSQL) annotates plans with collected
# statistics.

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv WITH DETAILS]
ORDER BY 1
----
start_key           end_key                 replicas  lease_holder
<before:/Table/65>  …/1/1                   {1}       1
…/1/1               …/1/2                   {1}       1
…/1/2               …/1/3                   {2}       2
…/1/3               …/1/4                   {3}       3
…/1/4               …/1/5                   {4}       4
…/1/5               <after:/Table/107/1/1>  {5}       5

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw WITH DETAILS]
----
start_key                end_key       replicas  lease_holder
<before:/Table/106/1/5>  …/1/1         {5}       5
…/1/1                    …/1/2         {1}       1
…/1/2                    …/1/3         {2}       2
…/1/3                    …/1/4         {3}       3
…/1/4                    …/1/5         {4}       4
…/1/5                    <after:/Max>  {5}       5

# This query verifies stat collection for the tableReader, mergeJoiner, and
# aggregator.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT kv.k, avg(kw.k) FROM kv JOIN kw ON kv.k=kw.k GROUP BY kv.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• group (streaming)
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ estimated max memory allocated: 0 B
│ group by: k
│ ordered: +k
│
└── • merge join
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ estimated max memory allocated: 0 B
    │ equality: (k) = (k)
    │ left cols are key
    │ right cols are key
    │
    ├── • scan
    │     nodes: <hidden>
    │     regions: <hidden>
    │     actual row count: 5
    │     KV time: 0µs
    │     KV contention time: 0µs
    │     KV rows decoded: 5
    │     KV pairs read: 10
    │     KV bytes read: 40 B
    │     KV gRPC calls: 5
    │     missing stats
    │     table: kv@kv_pkey
    │     spans: FULL SCAN
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV rows decoded: 5
          KV pairs read: 10
          KV bytes read: 40 B
          KV gRPC calls: 5
          missing stats
          table: kw@kw_pkey
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsWu9um8gX_f57itF8SlVcMwP4D1Ilt2l_q3Qbu8qfStUqiqiZOggMXhjHjaI81r7APtkKqB3MAPYNDJFS50NlzPhy7rnXc85c9x5Hf3vYxOcfP388vkDu7RtXQdbt7MhdvXFfof-fTU6Re4s-TU7GyF2hyThZgt6i-D7642xy-QW9_5a8iRXsBzYbW3MWYfMvTLCCKVawhhWsYwUb-ErBizCYsigKwnjJffKBE_snNlUFO_5iyeO3rxQ8DUKGzXvMHe4xbOIL67vHzphls7CrYgXbjFuOlzzGvR25t9cLl91hBR8H3nLuRyaK0ZwvrPhlpxuj-PMr4s6cmUj9958ovZ4GPmc-dwJfuBUGqwjZbBrYzDYRSd_8fsdZhEJm2SYaoPfpm7OzL8doanletFm3sJxwvS5-9OnX42MUcbZA02Dpc3TEfvKu4_NXJlKTbNIFjLllCxI4wZIvljx-ytWDgtOrlMU1S9_v0I0V3WzzM4rXXyk44taMYZNkanDyAZvqg_K0MvRyZViN3FVVGbrkUIhsIWiuEL3SQjzGDUKbhczOx30dA9lrVUFNT1k4Y58Cx2dhl-S-Wx77wY9G5PWrt6Ezu0lfYgVP4uxHRBnFpMZrkjKltCeXEbc8b7uWSYDMuvS6YOHc-onmbB6Ed8jyvGBq8bjyalLmSvofqdVy1BJQk7-bzUI2s3gQdokhlFDBk5TemAGs4Hfjb9fjycX1-PLz56MRiek5vzw9GtH41fHkcnzx63XyyAwB6XWTBMD6T8-TZNRrwGomqVqPyfPL0-uTmEstvjpjvs3CpAfRiHZHWiv8PnJn5Lij5Q32yMbSL2KvkLhx0AkWXZrrvmyGRlWGW1kYpVn08llsdwDZXwsIUJK7tNPVDlpQKsrkqYXoQ0X5UIhKUe6XFqJFUSa1RFndU5TVRkRZ3V-UQU2eFeWeHFFWGxGNPAE1RblXrwF3iDJpU5Tl8FshytsNRvffRSlUzrROVz_soqVyRp9aiAFUzg6FqJSzQWkhWpQz-jLlDNTkWTnr_0Zy1q_XgDvkjL5oOdtuMG3_XVSDypne6RqHXbRUzrSnFmIIlbNDISrlbFhaiBblTKslZ_qecqY3Imf6_nIGavKsnA3kyJneyHabJ6CmnA3qNeAOOdPalDM5_FbI2XaD6fvvojpUzozOYQ8tFTP9qWUwgGLW6RJk-TYiKOA3LDyUpFTWjNKStChr-ss8pYHaPStrw9_olDas14A7ZE1_0ac0HfJT8xmLFoEfsdwvgsWPUnOP6pCYaWbPWFqZKFiGU_YlDKbJ2vRykgRKtn2bRTy9S9OLE399K-Ihs-ab_w6yf6SBGMlKYGOf8VUQur926Ij5fM3s-s6cRZE1e7yJr7JACBAJ0aRBoVAou1lJuit9GMngyCIcABBqQIRUHlm6AIUAepFmQ_VgkQZipKZ6EYgk14tNQqFQKLtZaboXgQipPLJ0AQrNQ1GzULaRqNlQhtDWWmVWevkWaxiwUESV9mXtAbMihjwoQFaoPFb6QFaoPFb6Ait6ZQcXIFmHGghZGZWhaK_82yCE6kH9RlM7MwxIgTBvIgFDyfQbUCjt-w0gQpl-Q4DSh_qNpr6rMCAFwrzpRWAomX4DCqV9vwFEKNNvCFAGlVvssMJvCG09hPqNhpIyBBNVjaTIrmxEHpiVTL8BTEum3wCyItNviOZdOEnuMhwNQRkIrBDISbJRQQYikTgVgUIpsimbtMDB2jcaUIgynYaIRThOtmQ1BkAkEkcjUChFXmXTkOBg7bsNKESZdkPEIhxUtzZrolcYDrG7haNmW45DsFE7oMickEBpKbIsm2DQxGSaDmhiMl2HyEv1bEKi6xBpea7ZhgZEItF1QKHIHI6AsVQMfTRoMJn2QsTyXJOMIRCJRHsBhSJzFALGUjHi0aDBZPoIEUv13IJUDS7ENn62yYXoj-Cji6Z8BJQWmaMPKC9FNmSj3dDEZPoIITFad3qROT7oJccHjVZBpDl_IdBF6041Gj7h6ECAEm0HFIpM2wHGIo8XDYqlyLVsyi0GqzvVaLghhZ9AdwCU6EagUGS6ETAWebxoUCxFZmbTkGKw6qkGrZpqiN39bFMNwWXtgCLTjUBpkelGoLzIHIpAeSkyM5tgYmLPNtXQH64U_MMLVteOjU2s_vrrFPyz_sPxB6xZhM17fH4TrBJYF3cLFmHzh-VFTMGnlss-MM7CueM7EXem2OThkj08_O-_AAAA__9IqW-U

# This query verifies stats collection for the hashJoiner, distinct and sorter.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT DISTINCT(kw.w) FROM kv JOIN kw ON kv.k = kw.w ORDER BY kw.w
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• sort
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│ order: +w
│
└── • distinct
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ estimated max memory allocated: 0 B
    │ distinct on: w
    │
    └── • hash join
        │ nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 5
        │ estimated max memory allocated: 0 B
        │ estimated max sql temp disk usage: 0 B
        │ equality: (k) = (w)
        │ left cols are key
        │
        ├── • scan
        │     nodes: <hidden>
        │     regions: <hidden>
        │     actual row count: 5
        │     KV time: 0µs
        │     KV contention time: 0µs
        │     KV rows decoded: 5
        │     KV pairs read: 10
        │     KV bytes read: 40 B
        │     KV gRPC calls: 5
        │     missing stats
        │     table: kv@kv_pkey
        │     spans: FULL SCAN
        │
        └── • scan
              nodes: <hidden>
              regions: <hidden>
              actual row count: 5
              KV time: 0µs
              KV contention time: 0µs
              KV rows decoded: 5
              KV pairs read: 10
              KV bytes read: 40 B
              KV gRPC calls: 5
              missing stats
              table: kw@kw_pkey
              spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsWu1um8oW_X-fYjS_Wl1c8-kPpEpRk17d9N4mVRJVOjqKKmqmCQKDy4zjRlEe67zAebIjoMY2G8beNmOnlfOjCmG8WXuv7VlrD32i_HtEXXr9_v_vT2_I2fn1zfnF6Q15Fc7ezF6T_1xdfiThA_lweX5Bwhm5vCDhw5uQvCXZfXJ5dfb-irz7I7-iGo0Tn114Y8ap-yc1qEZNqlGLatSmGnXorUYnaTJinCdptuQp_8C5_4O6ukaDeDIV2Z9vNTpKUkbdJyoCETHq0hvva8SumOeztKtTjfpMeEGUPyZ8OAkfvkxC9kg1eppE03HMXRJSjV5PvOzXTjdD8b_PRARj5hL97794cT1KYsFiESQxuJUmM058Nkp85rvEKP749VEwTlLm-S4ZkHfFH--uPp2SkRdFvFw38YJ0vi579MfPp6eECzYho2QaC_KK_RDdIBavXaLn2RQLGAubFuRwkqmYTEX2lNtnjRZXRRXnVfr6SO49fr9an5Ns_a1GufDuGHWNJQ7Oz6irP2vb0dCr0DA7CWeAhtmChq5xJGKZCLNCRK-RiEXcaZykPkuZvxL5NvvkuiU1bP7X4_cfkiBmadeofKki9k28OjFev02Du_v8N6rRyyzpk6yQ2e2cmqLU-SUXXhSt8pd_eGldcV2zcOz9IGM2TtJH4kVRMvJExraeU5vd498jIth4QvyAh2TKvTs2vy1lZFFtq1JtA9X3ZwEXQTwSXcMBnP785FKaxTUyzRY7y67m6uzQWrJqmPpBqrHI1KlkaqJYvU5SwdKuCTj9d1tptNO7vWqWm_BZx2aeWi2lF0knmXStCp_LNXBkNVhJxGlMpF9JxFqly9hcfAykB-iana51FJ9GF2BsS0Qf6wKOREhdQL-RiH24AGNbF6BX1F7fh9rrm6s9qr8Xat9bo296K_pWzWNHte_t0EJStTcOUg2J2qNYnas94LSq9lun0U7vArVf5dPcfG82sSJpdbr2cW9uFElzWyIGWJE8EiEVyUEjEfsQSfN3FUlUfy9Esv8rimR_hxaSiqT50kQSxepcJAGnL10kV_m0Nt-bLaxI2p2uc9ybG0XS2paIIVYkj0RIRXLYSMQ-RNLaViTtDc-T7X2Ip725eKL6fiGegzVyYbciF9U8dhTPwQ6tJRVP6yDVkIgnitW5eAJOq-K5dRrt9C4Qz1U-7c33bBsrnk7nuGM3Sqe9LQ0OUjo7XYN4sU8Mkoh7lh4paRRRp5GSfYio_btOmqhOX4jl8FecNIc7tJBULO2XNmmiWJ2LJeD0pU-aQ8wr5ivGJ0nMWXVrqH2UXnlUx8gagPl3rOgWnkzTEfuUJqN8bXF5mQfKxcRnXBR3zeLiPJ7f4iJl3rj8_z6bRxrCSF4Om8ZMzJI0_LnvcxaLeWXnd8aMZwUvb9LbZSAGEonhKINiIqGYxlooeXcVDzOWcCwjHCAQWliEfWXFsgEUA9GL5nKoHi7SEEZqqxeRSCq92CYUEwml0ot1UNruRSzCvrJi2QCKWYWiL0OxVpDoy6Ec0NaWNCu7eYt1HFwoY_12sm2BesisDHX7Rg9ZFdNSBqWPrIqpTgX7oCq2tIOd5g4egKwcaahecwcPAKqe_HtlNMMCqPpY69LWJo8DUsN5GQkZSqV1QUI5gHXBIlRoXQCUAda6tPW1xwGpcT5lLyJDqbQuSCgHsC5YhAqtC4AylG6xhi7xLqCvDfl4UGNeWkrLgeZwzVhXsyGVlgGbl0r7gk1MpX_B1kWlgYF1AePAaiObEgsDE5Mb-hoP01JeA5jXGpOoTuORSBSe2WCh1DmfMi1ssAN4FzREheYFYgGjwp7cywCJROHBDRZKnf0pGxIb7AAGBg1RoYOBWOQDp9GTWBjY3WDk3JeFAc5sDRSV5zfYstQ5oDIYNjGVFgabmEoLA-sCRtTVRh5ILAxMDMwY-7IwMC8wY-zJwlhIJAotDBaKysMbLJY6B1SWGB1MoVcBWEzMC8s2VWqIRKLQq2ChqDyqwWKpszpl56GDKTQlEIt8HDUl46gD2xiMo_syJcBsrYGi0pRgy6LyWAZblzpPUxoBbGIqTQlMDIyeq41sS0wJTEz-mmm9KVkabOyGwcYyZfmaFbMC8wXTBNKstDx72UiACj0MFopKD4PFssEpztYuE41FMi3ZMNiaCWXfhwHgJe0agAqtDRaKSmuDxbLBKc7WDYnGUuOMyoaEweRjqikZUx3Y3fJXYQqtDbRsa15hKrQ22LKotDbYuqg8rsHWpc4ZlcFgYvJ3n5bk3ecAILPA8LGv85bh861Gv0XJ7EvgU5fqP386Nf_Mf2j2Ae-OU_eJXt8nsxzWzeOEcep-8yLONPrRC9kZEywdB3HARTCirkin7Pn5X_8EAAD__9kPx1A=

# This query verifies stats collection for WITH ORDINALITY and the hashJoiner.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv WITH ORDINALITY AS a, kv WITH ORDINALITY AS b
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• cross join
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 25
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│
├── • ordinality
│   │ nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 5
│   │
│   └── • scan
│         nodes: <hidden>
│         regions: <hidden>
│         actual row count: 5
│         KV time: 0µs
│         KV contention time: 0µs
│         KV rows decoded: 5
│         KV pairs read: 10
│         KV bytes read: 40 B
│         KV gRPC calls: 5
│         missing stats
│         table: kv@kv_pkey
│         spans: FULL SCAN
│
└── • ordinality
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV rows decoded: 5
          KV pairs read: 10
          KV bytes read: 40 B
          KV gRPC calls: 5
          missing stats
          table: kv@kv_pkey
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsVMFu2zoQvL-vIPb03gMDS7LdA09KnRRxm8SBbaQoCiNgxI1DiCIVknJiBP6s_kC_rJAUJ7Jqu0mB3sqDgN0dDofDgR7B3SlgMDk-PR5Myf_kw3h0RtIF-TycnpDR-Gh4fng6nH4hhxPC6Y7BNVDQRuA5z9AB-wohzCjk1iTonLFl67ECDMUDsICC1Hnhy_aMQmIsAnsEL71CYDDl1wrHyAXaTgAUBHouVUWbLuJ0cZWnuAQKA6OKTDtGUkoWQGGS87I6AAqfLomXGTISfP_m6jox2qP20uifRtbcOyIwMQIFI_26eb306IhFLhjpBeR93Z2PLwYk4Uq5Z2DOpV0Dw1Lv2eVgQJzHnCSm0J78iw--I7X_j5Gg8wJATHcBKkGm8Hnhy2NmKwp19eSY83yOwMKGxcMjYMGKvt7lkRVScyX9shNumlztqkyp71jXznOlNq17pcyoJTN8i8xmGKK_YdjtcrflcvSbYej-2TD0WjK7O2W-qCu0sQItig1ps3LnryBb7nrC3e1HIzXaTm_zrqNSehzSOKJxl8Y9Gvdp_A4oKLxpelCV2yyQ89smrq63ADP-QDLMjF0SrpRJuC-zVueqnLk7RTxmORHSpaRwfI7r8YbN0W6f-y2fe2-JwxhdbrTDtt9bTwpaJx2Epeso5li_ojOFTfDCmqTC1uWoIqoaAp2vp2FdDPV65LxFnj3_2ppM4V6m3gZT2GSK2kzRXqbubk1hm6n7Bk1Rk6nbZurtZerv82lG4UaZ-yspgEHwtA62fNYLyg187soATG7NfUU7Xebl891w5ZDCGU_xCD3aTGrpvEyAeVvgavXPjwAAAP__mCCnrg==

# Verify that EXPLAIN ANALYZE on an unsupported query doesn't return an error.
statement ok
EXPLAIN ANALYZE (DISTSQL) SHOW QUERIES;

statement ok
EXPLAIN ANALYZE (DISTSQL) EXPLAIN SELECT 1

# This query verifies support for zeroNode in DistSQL.
query T
EXPLAIN (DISTSQL) SELECT sum(k) FROM kv WHERE FALSE
----
distribution: local
vectorized: false
·
• group (scalar)
│ estimated row count: 1
│
└── • norows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkltLwzAUx9_9FOE8dZCxxsc8OV3Fwm6u8wJSJLRnXeklNUmdMvrdpanbVHTMPBRyzunvx_mTLeiXHDh4j_Px0J8SZ-QHy-B23COBN_aulkTXhZP1yPViNiHZK3m48RYeWYlcI1AoZYxTUaAG_gQMQgqVkhFqLVVb2toBP34D7lJIy6o2bTmkEEmFwLdgUpMjcLgXeY164AKFGI1Ic0t0ySVxXBKt6zLTPQgbCrI2B4o2IkHL3mv9EXC3oaebh0miMBFGqgH7bg_uJs4F-1vLfmjZf7QL1JUsbYgH5akL9lkTUsA4wS5lLWsV4VzJyM5215kF2UKM2nRd1l38ctfSRqEo9ql9JbGjpPNjpJDCKpeb5zQGDu7n6f_y2R1ofxCJbiMK1nJjscv3ql3QPjYKE5HhCA2qIi1TbdIIuFE1Ns3ZRwAAAP___Pbhag==

# This query verifies stat collection for the tableReader and windower.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT avg(k) OVER () FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 5 (40 B, 10 KVs, 5 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• window
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows decoded: 5
      KV pairs read: 10
      KV bytes read: 40 B
      KV gRPC calls: 5
      missing stats
      table: kv@kv_pkey
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzkld1u2jAUx-_3FNa5AsmIfDFNvupGu6naOipasYsJVW58yqIkdmo7UFTxWHuBPdnkuHQNgwruKpELxPnIOf_8fKzzCOa-AAZXZ9_OhteEz2edvEtGk7Mx6XTJ5_HoguRzoCCVwO-8RAPsJ4RAIQIKMVBIgMIAphQqrVI0RmmX8ti8cC4egAUUMlnV1rmnFFKlEdgj2MwWCAyu-W2BY-QCdT8ACgItz4qmTT4_yec3VY5LoDBURV1Kw0gOFK4q7v72-k7F1wmxWYmMBH9-G2-nSlqUNlPyv5BWC0MEpkqgYCT0ztulRUM0csHIB_LJO2fjyyFJeVGY57yKZ3qd51pfTIZDYixWJFW1tKSDD7afSdtlJGi-xicg5rsSGjmqtlVtXZfpioK3nnAZy2cILHzB9_wUWLCiOxD_I1tLpQVqFC2q09WWQ_iRSaEWqPuD9gl8nHzpnIRdoDBy-k7cNzedGoyMDJ5tY3lRtGGX_IGUWCq9JLwoVMqtIx40eF3M3BfEYlkRkZmc1IbPcB1uURnspBJtUBm0qIT7D1544OD1o14_PtLRC1uQo_0hR4dCjnv95EghRy3I8f6Q40MhJ73m0h8j5LgFOdkfcnIo5EHvSBEnO_fUFsRjNJWSBjf21fZOwUanXugWG4oZ-i1oVK1TvNQqbXK9OWoKNQ6Bxvpo6I1z2YRC10EjL5_X7MtK4auV3rcqBa9Wig7VxBsAINEulM79fBiU1h_62u0nxPv9hKwjJRq3YtfBAKYv9YWb-uK3pS_a1Je8LX3xpr7B29KXuNtxV6jFTSaAQfD09Lb8rB9wL_CZcVf06pdaNGKvl5W7YHe8MEjhgud4ihZ1mcnM2CwFZnWNq9W7vwEAAP__q-PyfQ==

# Very simple query to make it easier to spot regressions when rewriting results
# in test files.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT k FROM kv WHERE k = 0
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• scan
  nodes: <hidden>
  regions: <hidden>
  actual row count: 0
  KV time: 0µs
  KV contention time: 0µs
  KV rows decoded: 0
  KV bytes read: 0 B
  KV gRPC calls: 0
  missing stats
  table: kv@kv_pkey
  spans: [/0 - /0]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyMUV1r20AQfO-vWPaphQuWXw8KpY5LTesmyCZ9KCJcdBv3kHSn3q7sGKOf1T_QX1ZO54R-BXoPQjM7OzcanZC_tahxs_y4XGyhgXfl1RqaPXx-vyyX0MBrKFChD5Y-mY4Y9RecY6Wwj6Em5hATdZoEK_uAulDofD9IoiuFdYiE-oTipCXUuDV3LZVkLMVZMrYkxrWTbbN_0-xv-4aOqHAR2qHzrKFBhZvepNdZMa18uAFxHWkofnznjOvghby44P8axXBgsFQHS1bDef_uKMQQySQK3mZyV14voDZty0-63rj4pEOF65vFAliohzoMXuAlPcjMeXmlIWfLAqLmOcEUJwzSD5Isq1FhRue-WMyOUM9_KXh1iboY1f93XBL3wTP9Vu9zNxV_3HQxHyuFZHeUfyyHIdZ0HUM9aTO8mowmwhJLns4zWPnHEUsk0-X4lcL7NhxunUWNxflc_OPxeDAtmB2nD9t8DYfJdnvsU6x70zIpXJuGLkkods47FlejljjQOL74GQAA__8W6ORr

# Test a query that has a subquery and a postquery.
statement ok
CREATE TABLE parent (p INT PRIMARY KEY);
INSERT INTO parent VALUES (1), (2);
CREATE TABLE child (c INT PRIMARY KEY, p INT REFERENCES parent(p))

query T
EXPLAIN ANALYZE (DISTSQL) INSERT INTO child VALUES (1, (SELECT min(p) FROM parent))
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 2 (16 B, 4 KVs, 2 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• root
│
├── • insert
│   │ into: child(c, p)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 2 columns, 1 row
│
├── • subquery
│   │ id: @S1
│   │ original sql: (SELECT min(p) FROM parent)
│   │ exec mode: one row
│   │
│   └── • group (scalar)
│       │ nodes: <hidden>
│       │ regions: <hidden>
│       │ actual row count: 1
│       │ estimated max memory allocated: 0 B
│       │
│       └── • scan
│             nodes: <hidden>
│             regions: <hidden>
│             actual row count: 1
│             KV time: 0µs
│             KV contention time: 0µs
│             KV rows decoded: 1
│             KV pairs read: 2
│             KV bytes read: 8 B
│             KV gRPC calls: 1
│             missing stats
│             table: parent@parent_pkey
│             spans: LIMITED SCAN
│             limit: 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (anti)
            │ nodes: <hidden>
            │ regions: <hidden>
            │ actual row count: 0
            │ KV time: 0µs
            │ KV contention time: 0µs
            │ KV rows decoded: 1
            │ KV pairs read: 2
            │ KV bytes read: 8 B
            │ KV gRPC calls: 1
            │ estimated max memory allocated: 0 B
            │ table: parent@parent_pkey
            │ equality: (column2) = (p)
            │ equality cols are key
            │
            └── • filter
                │ nodes: <hidden>
                │ regions: <hidden>
                │ actual row count: 1
                │ estimated row count: 1
                │ filter: column2 IS NOT NULL
                │
                └── • scan buffer
                      estimated row count: 1
                      label: buffer 1
·
Diagram 1 (subquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJyUU9Fu4joQfb9fYc0TSEYkVFda-aldykqoFCqgSKsVQm4yTS0cO2tPRFHFZ-0P7JetYhcE7bbb-iHJzBzPzDkzeQL_U4OA4Xg2mM7ZcDyfsOxB6ZwtLka3gxlrpZy1ZoPRoD9npTKtqs2-TSfXrJIODbXbwMHYHMeyRA_iB6TA4X9YcqiczdB76xr3UwAN80cQCQdlqpoa95JDZh2CeAJSpBEEjG3HVt0ecMiRpNIhabjAnN14wZoC0fYktWakShQs-f3LA4cGwmxNVU0NcrnjEK3nap5kgSDOjtobXoLo7fhRh-n7Hc7lncYpyhxdNzntM4pyHl-rao1b4NC3ui6NF6wCDrNKNp8d4DBSpaJA52pxyuJqwTJrCA0pa16FAsccM5tjLvb377aEnjmUuWBf2NfoLKY3fZZJrf0BV0nl9rhG5OtFv888YcUyWxtiLXykrjLUFiwJ7CIAcf0W4IOSpy8kTz4j-UVROCwkWddNTxW_GH9fjSfz1fh2NGqdp-3DcnxgWUr5yEosrdsyqbXNJDWCJkG9D7LqvWCVnrD6x6pP0VfWeDxh9Fal5EWlTrpbcsC8wPh_eVu7DG-czQI2mpOQKDhy9BSjZ9EYmn3Ik0NZHoZynCl9N1PvE5l672ZKXmeSQQAwSBvr1nHrPRqKQ927495Hf9z7faRE72VxCCawPO4vqHev7WalchCQPJ_OXx77A80FWfhmhLMHuwnNzrdVM4B7qT1yuJZrvERCVyqjPKkMBLkad7v__gQAAP__iGy9qw==
Diagram 2 (main-query): https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkcuq2zAQQPf9CjGrBBRiOTvtSuOCIY8Su90UU1R5nIjKkivJTUvwvxfbTW8w94ZEC8O8zjEzF_A_NXBId1lyyEm6y_dEnpQuyZf3m89JRmaMklmWbJIPOamVmTVz8vGw35JGODRhPgcKxpa4EzV64F-BQUGhcVai99b1qcvQkJa_gUcUlGna0KcLCtI6BH6BoIJG4KCtFJr8ErpFT6JlBBRKDELpob-jYNvwMu2DOCJwdqNL18Cjjj5r_N5WFTrCluwhYzwxsueN0rYmkHgZPyRcTYTxM8ID-sYajw-ZoolpwbqCApZHHC_pbeskfnJWDr1juB9AQ6JEH8YqG4PUXEs-OBT1_wvdkthdUvw2iU1J8V3S6t4_FRQqbc_fVAkcon9v8crn-qAfEEffLzs72fOAzf80_aoqoT1S2IofuMaArlZG-aAk8OBa7Lp3fwMAAP__pl4eAg==
Diagram 3 (postquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJyUk8Fu4jwQx-_fU4zmBJIrktDDJ5_apVRKS0MFKZcVqtxkoF4cO2s7alHFY-0L7JOtkrTdQhdUcgDN-J_ffybjeUH3UyHHOJkOJynESTqG7FGqHGbno7vhFDohg850OBoOUiik7pRduJyMb6AUlrTvdpGhNjkloiCH_DuGOGdYWpORc8bWqZdGEOfPyAOGUpeVr9NzhpmxhPwFvfSKkKMymVDgMqHhoVosyELQC5BhTl5I1eDHledwFuF8w9BU_i_LebEk5OEH8_gCebBhX_e_lMqTJdsLt03bPIezEOIpJOMUkrvRCF9hYM2T4xC-x84LpcDLgjgEv385ZFhLoK23Vu6rPtqpPjym-isj9YRETrYXbdefrkviMBpepnCepDFcjeMEGbYjPGv_7ssVrZHhyJhVVcIPIzUYXfeMDAdGVYV2HMpjmr6efYozoz1pL43-dNR8opwyk1Pegq9n8LD25MCSyDn8D9_a5HJyO4BMKOXedaWQ9k1XN38zGwzAeSohM5X20KFn35Pad_nrlWoFRKt9gkI8Q0GFsWsQqr6Yvi4raGrYmmawd5r9nWlGx0yz3QWy1liQi_brhL3-1mD3GZ_uGPePMZ6QK4129CWnYMfpJNzMGVK-pHbznalsRrfWZI22DccNqEnk5Hx7GrZBrN-OnLckivcd_kgKD5Ki_aRwlxQdJPX3k6JdUv8g6fRQd3OGC2We7mWOHIPX5-QfP28P1i-IpavHNn00Tw22XnKHfCGUI4Y3YkUX5MkWUkvnZYbc24o2m__-BAAA__-Y6-nC
