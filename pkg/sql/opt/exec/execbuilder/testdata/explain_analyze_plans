# LogicTest: 5node

# These tests are different from explain_analyze because they require manual
# data placement.

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT, FAMILY (k, v))

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i);

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT, FAMILY (k, w))

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify that EXPLAIN ANALYZE (DISTSQL) annotates plans with collected
# statistics.

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv WITH DETAILS]
ORDER BY 1
----
start_key           end_key                 replicas  lease_holder
<before:/Table/66>  …/1/1                   {1}       1
…/1/1               …/1/2                   {1}       1
…/1/2               …/1/3                   {2}       2
…/1/3               …/1/4                   {3}       3
…/1/4               …/1/5                   {4}       4
…/1/5               <after:/Table/107/1/1>  {5}       5

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw WITH DETAILS]
----
start_key                end_key       replicas  lease_holder
<before:/Table/106/1/5>  …/1/1         {5}       5
…/1/1                    …/1/2         {1}       1
…/1/2                    …/1/3         {2}       2
…/1/3                    …/1/4         {3}       3
…/1/4                    …/1/5         {4}       4
…/1/5                    <after:/Max>  {5}       5

# This query verifies stat collection for the tableReader, mergeJoiner, and
# aggregator.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT kv.k, avg(kw.k) FROM kv JOIN kw ON kv.k=kw.k GROUP BY kv.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• group (streaming)
│ sql nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ group by: k
│ ordered: +k
│
└── • merge join
    │ sql nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ estimated max memory allocated: 0 B
    │ estimated max sql temp disk usage: 0 B
    │ equality: (k) = (k)
    │ left cols are key
    │ right cols are key
    │
    ├── • scan
    │     sql nodes: <hidden>
    │     kv nodes: <hidden>
    │     regions: <hidden>
    │     actual row count: 5
    │     KV time: 0µs
    │     KV contention time: 0µs
    │     KV rows decoded: 5
    │     KV pairs read: 10
    │     KV bytes read: 40 B
    │     KV gRPC calls: 5
    │     estimated max memory allocated: 0 B
    │     missing stats
    │     table: kv@kv_pkey
    │     spans: FULL SCAN
    │
    └── • scan
          sql nodes: <hidden>
          kv nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV rows decoded: 5
          KV pairs read: 10
          KV bytes read: 40 B
          KV gRPC calls: 5
          estimated max memory allocated: 0 B
          missing stats
          table: kw@kw_pkey
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm-1u2swSx7-fq1jtp1Q1hfULEEuVaNOeo_Q0UOWlUnUURQ6eEgtjU-8SkhPlsp4beK7skU1JsDeYDGls5HU-VNhejOc345nd_07vKP_lU5uefP76-eCUjK_fjTXiXI_2xvN34zfk38eDIzK-Jl8Gh30ynpNBPxlC3pP4OvnP8eDsG_n4IzlJNRqELvSdCXBq_48yqlGdatSgGjWpRi16rtFpFA6B8zCKh9wlXzh0b6jd0qgXTGciPn2u0WEYAbXvqPCED9Smp86lD8fguBA1W1SjLgjH85OfGV_3xtcX0zHcUo0ehP5sEnCbxE9zMnXij41m_BT__U7iH-M2CdjiMIKRF8YDBHCxOCW8Cdik9fdffHE8DAMBgfDCQLoUhXNOXBiGLrg2-X3Ly1sBnETguDbpko-Lk6Pjbwdk6Pg-fxg3dbxoOS5-uKPvBweEC5iSYTgLBNmDG9H0AvHGJq3E3sUAgPG6ARPnhkxgEka3xPH9cOiI-LFayTNcOmJ4BZyEMzGdCZvE45PHX55g9Pxeo4ujhV-W3C9vyZXDr9LEe_H4c41y4YyA2mzFq4efqN2617ZzbDvj2HlvPM9zbJPVrn1d1-oZ17bXuvbxvmHkQgRu9r5v4wd51qgnouQIohF8Cb0AoibLvP8-_BR7Pfb2zfvIG10tPlKNDmLre0zrxU6AGxjOZF_nkY2v8V8-ETCZEtfjYzLjzgi2Bv8I1chAZagX5sNoFMHIEWHUZJbkPI0OFmBj26lGP_R_XPQHpxf9s69f93osBnNydrTX0-NPB4Oz_unvz2sIvXJ8mVkU1ssCLJ-X3noZr5Ozo4vDmJgRHx1D4EKUxBjp6c2e8QcpPhKyMoT09cHyaPMseIrRk3j6YSOcNvVMJG1rh7XWjnbWjrSn2fOrBEOW_6beaBrpKqHXVeI1JwBsW9d2sBOA2rUFTwA6a11b4ASAVW0CgHphVicA7cpNANovC7ANEwBWgQlAOlj052dXHVs4jUbTTGdXo86ur1k49W1d28UWztq1BRfO7lrXFlg49aoVTtQLs1o4O5UrnJ2XBdiGwqlXoHCmg8V4fnY1sIXTbDStdHY16-z6moXT2Na1-9jCWbu24MK5v9a1BRZOo2qFE_XCrBbObuUKZ_dlAbahcBoVKJzpYDGfn11NbOG0GuncatW59TXLprmtYy1k2Ww0GXEClzASiiuIaicXWECttU4usICaVSugqFdntYDuV66A7r8swDYUULMCBdTEbPAfA5-GAYfM3u3TP9XK_FSDxTzBHcGCPw9n0RC-ReEwGbs4HCQ3SsqBC1wsruqLg8NgeYkLR-RtBr_mi9iiiYkROJOHjqLnm9Jda0oAYh5GY-I7AoLh7YMty_NzxxNpK13gEHmO7_3fkREsv5Y8ewRD8K4TBiuXliXo4VoCYHl1Ajzmkv0ylg9DAmJGyYRYDqHuHyHE0oR0LCHlYshAEtLLjqHCCZkSIYbIqPpOZdQ2zpTuWlMq6muGBJTJqMUTKj6jYgkpF0MGkpBedgwVn1ElQnqWUGuVUBpQa_VWlpScjVzY5i5NdzOvlmXhbGEt1UpxG-ltZilHCBlDunIx1EHGkK5cDHWkGDJz0_MTgJa36kqwrdxb6W051e_M5Fmypb2lslLRuGE4PuuX2uW7miFtKV1ZKdzZOpaQesoKklDpykrha0lTItTZUlmpaAh1cHzWL7V3IKMibSldWSk-o2IJqaesIAmVrqwUn1ElQt3c-fZ-jrIiJef9LZWVikajJalY-YBy5Jrytac20tsKKitIdyuorCBjSEFlRd4akHZbN0kr1S5gXSmGGGa3VYEY0pGAlFt3MyyhHPGm_HWTjrambIcXnjMMLKLSlZbid1xlRNKWq9pSSxcJSLnFN8MSylFwdiCtoq0p2-HFp1UsotLlluLTqoxI2kxOzeeZmSO4yDla2ndVXHGR1K0NhBTskMEGUY6QswOqFNbhCoouWIcrqLrIUZTfhVI2oeJVFzmI6t6W9GQICUi5RTjDElKwZQaNaJdbpAysNQqqLjKiusElRWgfCUi5RTjDElKwbwaNaJf7pAysNQqqLjKi_C4XltfmIufous8lrbrIItfWjS4VRdTGBpGC7TPYKMqRcsoXpjpYhyuoukgO1-tel7TqIgWRvtu9LsW3syIBla26FL8piyWkoOqCRqRcFBlYRDlSTvkrKFO2Zrd7XQpPq9L_790AqGzVpfi0iiWkoOqCRqRcFBlYRDlSzg6kVdma_F4XPa_XRc7Rda9LOkdLItcGQgqqLtggUlB1wUaRgg002CjKkXJ2QJiSHV73uqRVF_P-XKM__XB-4bnUpq3ff40n_ln-0fgLzohT-46eXIXzhNbp7RQ4tX86PgeNHjlj-AQCookXeFx4Q2qLaAb39__6JwAA__87BhY1

# This query verifies stats collection for the hashJoiner, distinct and sorter.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT DISTINCT(kw.w) FROM kv JOIN kw ON kv.k = kw.w ORDER BY kw.w
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• sort
│ sql nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│ order: +w
│
└── • distinct
    │ sql nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ estimated max memory allocated: 0 B
    │ estimated max sql temp disk usage: 0 B
    │ distinct on: w
    │
    └── • hash join
        │ sql nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 5
        │ estimated max memory allocated: 0 B
        │ estimated max sql temp disk usage: 0 B
        │ equality: (k) = (w)
        │ left cols are key
        │
        ├── • scan
        │     sql nodes: <hidden>
        │     kv nodes: <hidden>
        │     regions: <hidden>
        │     actual row count: 5
        │     KV time: 0µs
        │     KV contention time: 0µs
        │     KV rows decoded: 5
        │     KV pairs read: 10
        │     KV bytes read: 40 B
        │     KV gRPC calls: 5
        │     estimated max memory allocated: 0 B
        │     missing stats
        │     table: kv@kv_pkey
        │     spans: FULL SCAN
        │
        └── • scan
              sql nodes: <hidden>
              kv nodes: <hidden>
              regions: <hidden>
              actual row count: 5
              KV time: 0µs
              KV contention time: 0µs
              KV rows decoded: 5
              KV pairs read: 10
              KV bytes read: 40 B
              KV gRPC calls: 5
              estimated max memory allocated: 0 B
              missing stats
              table: kw@kw_pkey
              spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm-1um0wWx7_vVYzmU6vFtYcXvyBVipp0telukyqJKq1WUUVgmiBjcJlxnGyUy9obeK7sEbiOAyeMc-wngDzuhyo2GHN-53D-x_-BByp-RdSl55___fnwghwdn18cnxxekHfj-Yf5e_KPs9OvZHxLvpwen5DxnJyekPHthzH5SLLt5PTs6PMZ-fSf_BU1aJwE_MSbcEHd_1JGDWpSg1rUoDY1qEMvDTpNE58LkaTZLg_5B46DO-r2DBrG05nM3r40qJ-knLoPVIYy4tSlF95VxM-4F_C026MGDbj0wij_mvHtwfj2x3TM76lBD5NoNomFS8bUoOdTL_uz083O4l_fSfZlwiUxW7xM-XWYZDtILuTiLRlOuEt6f_xfLF77SSx5LMMkBpvSZC5IwP0k4IFLfh_y6l5yQVLuBS4Zkk-LN6_Pvh0S34si8bTf1AvT5X7ZyX39fnhIhORT4iezWJJ3_E52w1i-d0kvj3exA-fjqh0m3h2Z8EmS3hMvihLfk9lp9fJzuPKkf8MFSWZyOpMuyfbPT3_5BqOXjwZdvFrkZcn96p7ceOKmSPwg2__SoEJ615y67FlWj4-o23s0Nktsv5TY-cF4DhI7XyW2y_apfdvUmqXU9itTuzruLE7SgKc8KBz5Mvvkul1eqI9_euLmSxLGPO2y0oUf8Z_y3QF7_zENr2_yv6hBT7OgDzLw_I77M5hfFc1sm_gVEcknUxKEYkxmwrvmG8NegbRKIBnqIjkKhQxjX3aZA9LVikBxVWWXYThblJUKl9lrJ64VCqeEwkTVxXmSSp52TVAVf29bnP1ynK9J-UsJz4N7MesnSSeZdq1SyisorA3FqQxlUArFKqaMvV7vGHKQ6ZqdrlXUO3Ovd285yrBNUzvAjjL71NY8ygwqU1vHKMN2aJRBXSSrUabfTm3ecpTpb1FWylGGtROXYpRB1cVylAFV0f5Rpphy8_UiYWL13-p07aJIWHuReEv9NzdN7RCr__vU1qz_w8rU1qH_5g7pP-oiWen_oJ2CtqX-D7YoK6X-m-3EpdB_VF0s9R9URfv1v5hy6_UiYWH13-50naJI2HuReEv9tzZN7Qir__vU1qz_o8rU1qH_1g7pP-oiWen_sJ2CtqX-D7coK6X-W-3EpdB_VF0s9R9URfv1v5hy-_UiYWP13-kUJcLZS8Rbqr-9aWIdpPp3uox4cUAYSeQNT_dJrnEOcCqTXMccYO_QHIC6XFZzwKidwrblHDDaoqyUc4DdTlyKOQBVF8s5AFRF--eAEebWjTMupkkseLmjvPhVvdJXdVhWIzy45ouCEsks9fm3NPHzfRcvT_MD5aoWcCEXW83Fi-N4uUlIT6pulHhLtj2ah5hyb_J03-DrQxlVhhJzOU_SMYk8yWP__imW5ftzL5TFKAMueBp6Ufg_DyJYfiw_95T7PLzNGTzbtFTSp205gOXWCRcZl_KHsXwYEhBzGibEFISGfwkhViRkIgmZTLcasrCEBroRsgEhhuioZqs6ah8XyqgylB3NNUMCKnXU-gnV31GRhEodVYMasrCEBroRsgEhs0yo95yQVQDUe34oBzRnSwnbbtO4W7q0HAcXC9NuWOkjs820G1b6yBoyLd0IDZA1ZGr3s3IAashWtmenuj0PAWxHeag-ZP10KHBWfbVoMHharZnDAZbBhibNjpYgw_GpvkSbTzVDxtK4SVN7sk0kIQ1NGiyhpuee2n-W2oDQcEOTZkdLaIDjU-38tKCjImNp3KSpv6MiCWlo0mAJNW3S1N9RAaGRct5mPYVLA7ozU68yVNs0O1qPDjQN16zlVQ9BzTtZfWy-NTRqsAnX0KnBVpGGVg2sIrDYUOzSpsKsgbzVvvwLbs1ua-IQ4l5jHupWkCYSkHZXLMMSUvhBzf8UM7HRNO7d1N4zLDQi7WYhGyICKw56uzdDJCD9btzBElKYQi1oq9hoGjdw6m-raERNOzj1t1WISL36yvoKCwf2aLD-qrmFAwyzNYQ0vH8HW0QKX6gFLhc24RpaONiEa2jhwCoCi7vFLj1UWDiQN1jX0NzCgbjBuobeFo6FBNT0FVt7CTEsIQ1v6cEiUvhCzf8cs9DR6GfhAEQm5rlTDX6NjZCAmrZw6m-rWEIa3teDRaTwhVrQVtHR6GfhQETq9V1Tsb7rwB4N1nc1t3CAY7aGkIYWDraINLy1B1tFCl-oeZdrgE24hhYOTDhY4i12aVth4UDe6sev9LNwIG6wrtEqC6f-e3eRgLS7YhmWkIYWDhZR47f21O-UohG1ajmr_FsDRrNmrUY3hwI8gbwGUNMWTv1tFUtIQwsHi6jxW3vqb6toRNW-UAvaKoxGvb5rKtZ3Hdij1c-t6WfhQMdszdOh2o0tfWwRaWjhYKtIw1t7sFWk8IVa4HLBhKsfd7UUj7sOARoLLGxobuGMHi8N-jNK5j_CgLq09_tf54X_lv9o9gHvWlD3gZ7fJPOc1sX9lAvq_vQiwQ361RvzIy55OgnjUMjQp65MZ_zx8W9_BgAA__8UGxmJ

# This query verifies stats collection for WITH ORDINALITY and the hashJoiner.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv WITH ORDINALITY AS a, kv WITH ORDINALITY AS b
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• cross join
│ sql nodes: <hidden>
│ regions: <hidden>
│ actual row count: 25
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│
├── • ordinality
│   │ sql nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 5
│   │
│   └── • scan
│         sql nodes: <hidden>
│         kv nodes: <hidden>
│         regions: <hidden>
│         actual row count: 5
│         KV time: 0µs
│         KV contention time: 0µs
│         KV rows decoded: 5
│         KV pairs read: 10
│         KV bytes read: 40 B
│         KV gRPC calls: 5
│         estimated max memory allocated: 0 B
│         missing stats
│         table: kv@kv_pkey
│         spans: FULL SCAN
│
└── • ordinality
    │ sql nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │
    └── • scan
          sql nodes: <hidden>
          kv nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV rows decoded: 5
          KV pairs read: 10
          KV bytes read: 40 B
          KV gRPC calls: 5
          estimated max memory allocated: 0 B
          missing stats
          table: kv@kv_pkey
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsVM1u2zgQvu9TDOa0u2Bg_XkPPDnrpIjbJA5sI0VRGAEtTRxCEqmQlGMj8GP1Bfpkhaw4sZXYTVoUvZQHATPz8eM38w10j_Y2Q47D49Pj7gj-hXeD_hmkM_jYG51Af3DUOz887Y0-weEQBNtRmCBDpRM6FzlZ5J_RxzHDwuiYrNWmSt2vAL1kjtxjKFVRuio9ZhhrQ8jv0UmXEXIciUlGAxIJmZaHDBNyQmYr2nTWSWdXRUoLZNjVWZkryyFlMEOGw0JU0QEy_HAJ1WuWg_IZqICBChmoiIFq12VDU6kruCPr6pSTOXHwvn6xdRxr5Ug5qdWzktF3FhKKdUIJhwfKycKRBUMi4RB58H-dnQ4uuhCLLLOPwEJIswb6VYdnl90uWEcFxLpUDv6muWtJ5f7h4LWeAETpLkAu5pBTrs0CRJbpWLhKWC1iIlx8QxZ06YrScajwqwbWiTaOlwzr6MET68SUkPsbJvaOkHtL9nof-yaRSmTSLVr-to00p7h8PtifEBo0hPpvEbq5cMGfhfudCxc2fAx-cOHCX71wUUNouFPok75SaZOQoWRL3Li6-T3IC92eCHvzXktFphVtd9uvpHd81glYJ2SdiHXarPMfsl1j2OdlVbO3GTjKC0ikTaG0YkqvtjrYPcJ2Y4TRW7wekC20stQc5YsveY2XDvxqoJRMqTbI6tLEdGF0vMLWYX9FtEokZF1d9eugp9Yl6wyJ_PHfuMnk72WKtpj8TaagyRTsZQp3a_KbTOEbNAWbTGGTKdrL1N43pzHD60zfXckEOXoP5-CFz_pgdUFMbbUAwxt9t6IdLYrKvmuRWWJ4JlI6Ikcml0paJ2PkzpS0XP71LQAA___WDtl0

# Verify that EXPLAIN ANALYZE on an unsupported query doesn't return an error.
statement ok
EXPLAIN ANALYZE (DISTSQL) SHOW QUERIES;

statement ok
EXPLAIN ANALYZE (DISTSQL) EXPLAIN SELECT 1

# This query verifies support for zeroNode in DistSQL.
query T
EXPLAIN (DISTSQL) SELECT sum(k) FROM kv WHERE FALSE
----
distribution: local
vectorized: true
·
• group (scalar)
│ estimated row count: 1
│
└── • norows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkltLwzAUx9_9FOE8dZCxxsc8OV3Fwm6u8wJSJLRnXeklNUmdMvrdpanbVHTMPBRyzunvx_mTLeiXHDh4j_Px0J8SZ-QHy-B23COBN_aulkTXhZP1yPViNiHZK3m48RYeWYlcI1AoZYxTUaAG_gQMQgqVkhFqLVVb2toBP34D7lJIy6o2bTmkEEmFwLdgUpMjcLgXeY164AKFGI1Ic0t0ySVxXBKt6zLTPQgbCrI2B4o2IkHL3mv9EXC3oaebh0miMBFGqgH7bg_uJs4F-1vLfmjZf7QL1JUsbYgH5akL9lkTUsA4wS5lLWsV4VzJyM5215kF2UKM2nRd1l38ctfSRqEo9ql9JbGjpPNjpJDCKpeb5zQGDu7n6f_y2R1ofxCJbiMK1nJjscv3ql3QPjYKE5HhCA2qIi1TbdIIuFE1Ns3ZRwAAAP___Pbhag==

# This query verifies stat collection for the tableReader and windower.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT avg(k) OVER () FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 5 (40 B, 10 KVs, 5 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• window
│ sql nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│
└── • scan
      sql nodes: <hidden>
      kv nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows decoded: 5
      KV pairs read: 10
      KV bytes read: 40 B
      KV gRPC calls: 5
      estimated max memory allocated: 0 B
      missing stats
      table: kv@kv_pkey
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzslk1u8zYQhvc9BTErG5Bh_bkouErrLy2CNnXgBO6iMAJGnDiEJFIhKf808LF6gZ6soBTlkxw7sL22FobJGQ5H7_OC4huY1wwo3F__cT1-IGy56KV9MpldT0mvT36dTm5JugQPpOL4J8vRAP0bAvAgBA8i8CAGD0Yw96DQKkFjlHYpb9WCG74G6nsgZFFaNz33IFEagb6BFTZDoPDAnjKcIuOohz54wNEykVXbpMurdPlYpLgBD8YqK3NpKEnBg_uCub-Doevi9xlxmxlKZFAPNS6EcgkWja2nrMiREv-_f009TpS0KK1Q8lNIq5UhHBPFkVPyXvJpY9EQjYxT8hP5pZ5cTO_GJGFZZj7yCiZ0k-eau52Nx8RYLEiiSmlJD9d2KKTtU-JX71snIKaHEnK2JjnmSm8IyzKVMOva8qsenphNXtAQVdqitJS4_Kr9ZiKA-daDevQOwFi2QKBBi9jNN6D-1jsA7TurUirNUSPvcJpv92D9S0iuVqiHoy7Tn2e_9a6CPngwcf1dOY1wjUn5GcVXL-5i5jUjFvOCcGFSUhq2wKN1GR3UJdzRZdTRJTjezMGJZh6Gg2HUtXN4sfO5dg462MLjsYWnYosGw7iLLbpgOxdb2MEWHY8tOhVbPKiOpha2-ILtXGxRB1t8PLb4VGyjQRfa6ALtXGjxwS_-HmhTNIWSBne-_Pt38nd2GgTuioB8gfV9wqhSJ3inVVLl1sNJVaia4GhsHQ3qwY2sQoHbQSPLPy4s7UrBl5V-7FTyv6wUntoTqwQAiXaldEoyZlEmmw-LNfMrJmzXfBwNasEy8Q_77MxmWcVXY4Ji2fizCTUmbWK1UZtojsbditoJ_pEeausT7OoTXfRp6xPu6hNf9GnrE-3qM7ro09Yndqfjc6ZWj4IDBf_9Gez5aR5wC9jCuCP6_kWtKrEeNoU7YJ9ZZtCDW5biN7SocyGFsSIBanWJ2-0P_wcAAP__X0Awzg==

# Very simple query to make it easier to spot regressions when rewriting results
# in test files.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT k FROM kv WHERE k = 0
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• scan
  sql nodes: <hidden>
  kv nodes: <hidden>
  regions: <hidden>
  actual row count: 0
  KV time: 0µs
  KV contention time: 0µs
  KV rows decoded: 0
  KV bytes read: 0 B
  KV gRPC calls: 0
  estimated max memory allocated: 0 B
  missing stats
  table: kv@kv_pkey
  spans: [/0 - /0]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyMUl2L2zAQfO-vWPapBR1xXgWF0lxKQ5vekYTrQwmHIu_lhGXJ1a7zQfDP6h_oLyu2cunnQfVgPLOjnTHjE_JXjxqX04_TyQoqeLe4mUO1g8_vp4spVPAaClQYYkmfTE2M-guOca2wSdESc0w9dRoEs_KAulDoQtNKT68V2pgI9QnFiSfUuDIbTwsyJaVRv7gkMc4Pa6vdm2p331R0RIWT6Ns6sIYKFS4b07-OiuHKhzvo3VhDGGeYaOtirxBiyZS4mjQU379xxjYGoSAuhr9GKe4ZSrKxpFLD2WFzFGJIZHoK3mZyu7idgDXe80XXGJcuOlQ4v5tMgIUasLENAi_pICMX5JWGnD4LiKrnBLU5QE11TEcw3kdrhC4ZNkbsIzHEVppWsuMQ_yex7hRmdG6AxWwJ9fiXymbXqItO_X9rC-ImBqbfCnvOqfjD6WrcrRVSuaX8q3Bsk6XbFO2gzfBmWDQQJbHk6TiDWXgasSQydY6_Vvjg4_7elaixOJ-rfzyeDvYXzJb7D1s-xv2wdnVs-lgPxjMpnJuKrkko1S44FmdRS2qp6178CAAA__-InP65

# Test a query that has a subquery and a postquery.
statement ok
CREATE TABLE parent (p INT PRIMARY KEY);
INSERT INTO parent VALUES (1), (2);
CREATE TABLE child (c INT PRIMARY KEY, p INT REFERENCES parent(p))

query T
EXPLAIN ANALYZE (DISTSQL) INSERT INTO child VALUES (1, (SELECT min(p) FROM parent))
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 2 (16 B, 4 KVs, 2 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• root
│
├── • insert
│   │ sql nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 1
│   │ into: child(c, p)
│   │
│   └── • buffer
│       │ sql nodes: <hidden>
│       │ regions: <hidden>
│       │ actual row count: 1
│       │ label: buffer 1
│       │
│       └── • values
│             sql nodes: <hidden>
│             regions: <hidden>
│             actual row count: 1
│             size: 2 columns, 1 row
│
├── • subquery
│   │ id: @S1
│   │ original sql: (SELECT min(p) FROM parent)
│   │ exec mode: one row
│   │
│   └── • group (scalar)
│       │ sql nodes: <hidden>
│       │ regions: <hidden>
│       │ actual row count: 1
│       │
│       └── • scan
│             sql nodes: <hidden>
│             kv nodes: <hidden>
│             regions: <hidden>
│             actual row count: 1
│             KV time: 0µs
│             KV contention time: 0µs
│             KV rows decoded: 1
│             KV pairs read: 2
│             KV bytes read: 8 B
│             KV gRPC calls: 1
│             estimated max memory allocated: 0 B
│             missing stats
│             table: parent@parent_pkey
│             spans: LIMITED SCAN
│             limit: 1
│
└── • constraint-check
    │
    └── • error if rows
        │ sql nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 0
        │
        └── • lookup join (anti)
            │ sql nodes: <hidden>
            │ kv nodes: <hidden>
            │ regions: <hidden>
            │ actual row count: 0
            │ KV time: 0µs
            │ KV contention time: 0µs
            │ KV rows decoded: 1
            │ KV pairs read: 2
            │ KV bytes read: 8 B
            │ KV gRPC calls: 1
            │ estimated max memory allocated: 0 B
            │ table: parent@parent_pkey
            │ equality: (column2) = (p)
            │ equality cols are key
            │
            └── • filter
                │ sql nodes: <hidden>
                │ regions: <hidden>
                │ actual row count: 1
                │ estimated row count: 1
                │ filter: column2 IS NOT NULL
                │
                └── • scan buffer
                      sql nodes: <hidden>
                      regions: <hidden>
                      actual row count: 1
                      estimated row count: 1
                      label: buffer 1
·
Diagram 1 (subquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJysU9Fu2koQfb9fsZonkBZhE0W62qfkEq6EQiACglRVCG3WE2eFvevujgs04rP6A_2yau04haRJG7V-AO_M2Znjc2YewH_KQMBwPBtM52w4nk-YutdZwhbno5vBjLVizlqzwWjQn7Ncm1bRZv9PJ1eskA4NtdvAwdgExzJHD-IjxMDhFJYcCmcVem9dCD9UoGGyBRFx0KYoKYSXHJR1COIBSFOGIGBsO7bo9oBDgiR1VhXFLaqStDWMdI6CRd--euBwK0ndo2e2pKIkwSLg4OzmRyCG5Z5DfXrs50mmCOLkgODwAkRvzw84xm9znMvbDKcoE3Td6JhpLctZ_bcq1rgDDn2blbnxghXAYVbI8NoBDiOda2JBscsFC829YOa0PjpMtQ1AQk916OjbLxdMWUNoXsoSbgcVElQ2wUQ0HW53hJ45lIlg_7L_6mA6ve4zJbPMP-EKqV2DC0ZcLfp95gkLpmxpiLVwS11tqC1YVH1_DUBcvwbI5ZblmFu3YzLLrJIUaEUVhz8wMX5mYvQeE8_T1GEqybpufOzh-fjDajyZr8Y3o1HrLA4j_vcHsPeMe3zE_RdLMkVfWOPxiPdrnaJnnTrxfskBkxTrzfS2dAqvnVUVtj5OqkJVIEFPdfakPgxNk_LkUOZP0h9Wit-s1HtHpd6blaKXlWQlABikjXVrlklCo3ZPpjXxjdR0bGeCHp2Wmf4iX3rdXKv8dahQf252q0k1C9bk6iVrsjl6L9MjQPSbM3SoT-XeXWY3K52AgOjx6fzkp3kgXJCpDyM0u7ebSqz5rggDcCczjxyu5BovkNDl2mhPWoEgV-J-_8_3AAAA___BLv8s
Diagram 2 (main-query): https://cockroachdb.github.io/distsqlplan/decode.html#eJy0ksGK2zAQhu99CjGnBLTE8t50K90UDLtJSdJeiilaeZyIypIrjZotwY_VF-iTFdu77dZ0AzmsDoL5JX3zIeYE8ZsFCcVqu9zsWLHarZk-GFuxT29vPy63bCY4m22Xt8t3O9YYN2vn7P1mfcdaFdDRfA4cnK9wpRqMID-DgJJDG7zGGH3oo9NwoageQGYcjGsT9XHJQfuAIE9AhiyCBOu1suy7sgkjyxYZcKiQlLEDGR9QJzLeMTINSpb9-hmBw70ifcDIfKI2kWT9q-CPfwMBZcdhrB4bR1J7BCmemRY3ILOOXyp7n-oaAxML8dqy-URWXC6rfXLE8kX-2q7XE9f8EtcNxta7iP9IvtQpm3S6El3JAas9jqMXfQoaPwSvh7tjuR5AQ1BhpPFUjEXhno4iBVTNn7l4ThJnSfnLJDEl5WdJ1-ecSg619ccvpgIJ2eO6-s_2tKB_oPax_-ztwR8H7O5H239VrWxEDnfqK94gYWiMM5GMBkkhYde9-R0AAP__XNhbxw==
Diagram 3 (postquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJy0lNFuKjcQhu_7FKO5AskRu5BKla-SEiJtQiACwk2FImd3IC5ee2t7FVDEY_UF-mSVMaSBFnpypLMXoJkd__5m9rff0f2hkGM2GPdGE8gGkyHkr1IVML3uP_XG0EgZNMa9fq87gVLqRtWE29HwASphSftmExlqU9BAlOSQ_4YpzhhW1uTknLEh9b4tyIoV8oSh1FXtQ3rGMDeWkL-jl14RclQmFwpcLjS81PM5WUhaCTIsyAuptvLD2nO4aiNDWlFee2k0eFkSh-SvPx0yfBE-fyUHpvZVqA3rrXn7J5HibMMwRjsO58WCkKefwLMb5MmGfTv7rVSeLNlWeggc8xyuUsjGMBhOYPDU7_8Q_vYRf_oV_jsj9YhEQbbVPuxgsq6IQ793O4HrwSSDu2E2QIbRAFfx77la0hoZ9o1Z1hX8bqQGo0PXyLBrVF1qx6HCHQOEjkIr-9h5odThIO6nENgdB_1zDC0tpAk6npyPqeMVudGe9L-nGlaHIRaUm4KKuPX9FF7WnhxYEgWHX-DXmFyMHruQC6XcR10lpN3XhfE8TLtdcJ4qyE2tPTRo5VtS-ybfWTYWEC1PFZz4_KVYQUmlsWsQKpwHH2iTLdr_WiM5aY3OkTXaX7FGPJZkrbEg53GQaatz6JLvtfNp5ssj5s5XmEfkKqMdHUCe2ik52uki3cwYUrGgeH85U9ucHq3Jt7UxHG6FtomCnI9v0xhkev_KeUui_LhNPiulZ5Xap5XSY6X2WaXOaaX2sVLnrNLlue5mDOfKvD3LAjkmu-fiP372D4YFYuHCZxu_mretbLhsHPK5UI4YPogl3ZAnW0otnZc5cm9r2mx--jsAAP__QuQt0g==
