# LogicTest: 5node

# These tests are different from explain_analyze because they require manual
# data placement.

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT, FAMILY (k, v))

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i);

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT, FAMILY (k, w))

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify that EXPLAIN ANALYZE (DISTSQL) annotates plans with collected
# statistics.

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv WITH DETAILS]
ORDER BY 1
----
start_key           end_key                 replicas  lease_holder
<before:/Table/62>  …/1/1                   {1}       1
…/1/1               …/1/2                   {1}       1
…/1/2               …/1/3                   {2}       2
…/1/3               …/1/4                   {3}       3
…/1/4               …/1/5                   {4}       4
…/1/5               <after:/Table/107/1/1>  {5}       5

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw WITH DETAILS]
----
start_key                end_key       replicas  lease_holder
<before:/Table/106/1/5>  …/1/1         {5}       5
…/1/1                    …/1/2         {1}       1
…/1/2                    …/1/3         {2}       2
…/1/3                    …/1/4         {3}       3
…/1/4                    …/1/5         {4}       4
…/1/5                    <after:/Max>  {5}       5

# This query verifies stat collection for the tableReader, mergeJoiner, and
# aggregator.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT kv.k, avg(kw.k) FROM kv JOIN kw ON kv.k=kw.k GROUP BY kv.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• group (streaming)
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ group by: k
│ ordered: +k
│
└── • merge join
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ estimated max memory allocated: 0 B
    │ estimated max sql temp disk usage: 0 B
    │ equality: (k) = (k)
    │ left cols are key
    │ right cols are key
    │
    ├── • scan
    │     nodes: <hidden>
    │     regions: <hidden>
    │     actual row count: 5
    │     KV time: 0µs
    │     KV contention time: 0µs
    │     KV rows decoded: 5
    │     KV pairs read: 10
    │     KV bytes read: 40 B
    │     KV gRPC calls: 5
    │     estimated max memory allocated: 0 B
    │     missing stats
    │     table: kv@kv_pkey
    │     spans: FULL SCAN
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV rows decoded: 5
          KV pairs read: 10
          KV bytes read: 40 B
          KV gRPC calls: 5
          estimated max memory allocated: 0 B
          missing stats
          table: kw@kw_pkey
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm-Fu2kgQx7_fU6z2U6qamrVNSixVokW9U3oNVCSpVJ1Q5NhzxLKxqb1AclUe617gnuxk-2gBwy5L6K2D9xv2rsP4N7PzZ2cn33D6NcQ2vnz_8X33CgWzV4GGnNnoJJi_Cl6gXwf9CxTM0If-eQ8Fc9Tv5VPQG5SNo98G_etP6N2X_CbWcBR70HPGkGL7D0ywhg2sYRNr2MIabuGhhidJ7EKaxkk25Vv-wLl3j-2mhv1oMqXZ7aGG3TgBbH_D1KchYBtfObchDMDxINGbWMMeUMcP868JZp1gdjMJ4AFruBuH03GU2iiz5nLiZB8bembF758R9cdgo-Y_f6fFtRtHFCLqx1FpKInnKfLAjT3wbESKm7cPFFKUgOPZqI3eFTdHg09d5DphmH6fN3H8ZDEv--qLz90uSilMkBtPI4pO4J7qfkRf2KiZv00xASDYNmHs3KMxjOPkATlhGLsOzcxq5jbcOtS9gxTFUzqZUhtl83PzFzcIHj5quLgqqC-o3j6gOye9W-XZyeYPNZxSZwTYJo_afm46XXPTvBPMWW7SiXLUUxxlbHXUj78TJx4k4K3_nZfZF-80a4PPLyAZwYfYjyDRydraDOFPetIhL1-8SfzRXfERa7ifvW2HaJ0MOtyDOy37lkUyG0u_hojCeII8Pw3QNHVGsDfoHxBNkWh_OxolMHJonOikVfKNhvsFx-xVsYbf9r7c9PpXN73rjx9POiTjcHl9cdIxsk_d_nXv6r_PW4D85PCxnhY-bDxG82l4Lq8vbs4zQGZ2NYDIgySPINQx9I55QGg_gLR2ADKNNiHZSKMXN-KJbqzFyb5mt7aafbpiNtk9XxNBWdWNhm6qfH0gYRVw1GtRYVWOOqCwEjnCSo5KWDnRviysp8clrMLhwxFW8tyF1dg98RmiCmU2dEslvgMplICj2qIKpRx1QIUy5CiUcVQKxYn2ZYV6fVwKJRw-HIUynrtCmbsnPlNUoayG3lKJ70AKJeCoM1GFUo46oEKZchTKPCqF4kT7skK1j0uhhMOHo1Dmc1coa_fEZ4kqVKuh0t6B9EnATS1BfWroBDmRhwiK6R0kymUHUipLjlJZR6VUnLhfVqqz41Iq4fDhKJX13JWKc6I6gHQSRymsHadt_svNjBZ4IyjopvE0ceFTErv51xSX_fy5vOzqQUqLUaO4OI8WQyl1KOs47mcuomaRNHa3vr3V-gjoPE4CFDoUIvfhu_mL-3PHp6sv5kEKie-E_l9O-a0Xj-XmJuCCP8tfe2looRDfx_J3XoyOIc1QrD98eCTElMyEMJi0D8KECDNRcVJe-LLjRAoTIpAMjcolQ7b17a3W19aha8nw_2ciJRlymKg44SXDmjAx1pk0l5msImmuP2wygVpV-lm5YYmwrSfNOmojh0lLMSmlDRUnZSa1jBOLmUrXkKw_3GI-bJyuJuLK_So93bPAcMThwEayfTf6HBwqvcBQQY_Ws8DAWfiy40TK3uv1ngWGIw4TNpLtu9FqJEO29dILDBX0aD0LDJyFLztOpCTDNvOH7Rm7wHC2Z4HhiGOMjYRRtahG0YVjfi03jmwm9SwwcJjUMk5I6TSPVWGoh7wQkdO8usSJyBmhYsIpaFRjC8KzX7ZTK7n4ZVcf5ER66UhPlR84TGq5WeUwYVQ1KpIROfbLdqqcjMhZ_LJLEHIivXRaufK7mVjsIgQpHeypKgSHST2bJ3hQtm_QqlGb4dhfz0IED4rsXbccKOx2BdlM5Eiv6oEQZVLPTatqrRCHUvV2Gd7ir6dTVSOEKJN6blpVf4U4lKr3zPAWfz2dyu6GIJx2CKL6IcpI926IqDEU2Ru0KkJhlDcqUp5RPREb_n9N9USUmVS7J6KKTGRXIuSsnb17ImoMRUWKUHmjGpsRo9o9EXIyouqJEGVSz0oED4qKFKHyRkUyIrsnwuD0RBiqJ6KMVPVEiEORvUGrIpR6NlrwoFS9e8ZQPRHDx-HjL_8GAAD__4t9lnQ=

# This query verifies stats collection for the hashJoiner, distinct and sorter.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT DISTINCT(kw.w) FROM kv JOIN kw ON kv.k = kw.w ORDER BY kw.w
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• sort
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│ order: +w
│
└── • distinct
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ estimated max memory allocated: 0 B
    │ estimated max sql temp disk usage: 0 B
    │ distinct on: w
    │
    └── • hash join
        │ nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 5
        │ estimated max memory allocated: 0 B
        │ estimated max sql temp disk usage: 0 B
        │ equality: (k) = (w)
        │ left cols are key
        │
        ├── • scan
        │     nodes: <hidden>
        │     regions: <hidden>
        │     actual row count: 5
        │     KV time: 0µs
        │     KV contention time: 0µs
        │     KV rows decoded: 5
        │     KV pairs read: 10
        │     KV bytes read: 40 B
        │     KV gRPC calls: 5
        │     estimated max memory allocated: 0 B
        │     missing stats
        │     table: kv@kv_pkey
        │     spans: FULL SCAN
        │
        └── • scan
              nodes: <hidden>
              regions: <hidden>
              actual row count: 5
              KV time: 0µs
              KV contention time: 0µs
              KV rows decoded: 5
              KV pairs read: 10
              KV bytes read: 40 B
              KV gRPC calls: 5
              estimated max memory allocated: 0 B
              missing stats
              table: kw@kw_pkey
              spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsW-1uo0YU_d-nGM2vXRUvDGDHQVopWm-qZtuNV060UlVZFYFpjMDgZcZx0iiP1Rfok1VgEa-NmWtiN0w9_Atf8Z1z7txzOcM8YvYtwg6-Ov_1fHCNPl5cXV9cDq7Rm3DxbvEW_TQafkbhHfo0vLhE4QINL1F49y5E71F2HQ1HH89H6MNv-RHWcJz49NKdUoad3zHBGjaxhi2sYRtruIvHGp6liUcZS9Lslsf8gQv_HjuGhoN4NufZ6bGGvSSl2HnEPOARxQ6-dm8iOqKuT1PdwBr2KXeDKP-Z8O4svPtjFtIHrOFBEs2nMXNQiDV8NXOzPzt6FsUvXxEPptRBxj9_s-Wxl8ScxjxI4tKlNFkw5FMv8anvILI8efPAKUMpdX0H9dGH5cnb0ZcB8twoYs_3zdwgLe7Lfvrz18EAMU5nyEvmMUdv6D3Xg5i_dZCRj2Z5A6Vh1Q1T9x5N6TRJH5AbRYnn8iwsI4_hxuXehDKUzPlszh2U3Z-HX5wgePyk4eXREvUC1ZsHNHHZZB3Ps-z-sYYZd28pdsiT9jKaehs0Lc7CRYmmxYomnbRE7UOUWUnU6v_M4yT1aUr9tf80zp6EbtnC9s8um3xKgpimOtmYlBH9k785I2_fp8HtJP8La3iYDfIsA5reU29e5lOEXnaNfYsQp9MZ8gMWojlzb-mLwV0BZ9XJ8I8B40HscZ10S2xIMa56SWPvkTQidExDTnRWI-_WYf0qSTlNdbPE-Y-yDau3A6Hb6MzHspXTy6STzHRrg9CKQYORdysjP1mLnOwuNKRmP6CbHd1qheZAHUENok7qdgQtUQfsCMgrdwTkWDoCIMNXHUFPTs3bpyOolzTCjoDIiU5VRwCwXnQEJc4l7wjM3cu1WVdXrY5ut-X6QLpag6h-XV1tiTqgrpqvrKvmsegqkOErXT2RUzn20dV6SSPUVVNOdKp0FWC90NUS55LrqrV7ubbq6qrd0bttuT6QrtYg6rSurrZEHVBXrVfWVetYdBXI8JWu9uVUjn10tV7SCHXVkhOdKl0FWC90tcS55Lpq716u7bq62u20xfpAqlqDpm5NVe3oBLmxjwhK-ISmLWUH0lf7lfXVPhZ9BXJ9pa-ncirIPvpaL2mE-mrLiU6VvgKsF_pa4lxyfQUWvkeUzZKY0c1qsPU_Gxnh1L-ly-xgyTz16Jc08fKfWR4O8-dye92njC-vmsuDi7i4xLjLRcvM_yVyBs6r3e7Rn1ZGH1O-SNIQRS6nsffwHH5xfuEGfH1gPmU0Ddwo-Mstj7p4LA83pR4N7vJhf3ep0LXna_mYi6tTyjIoNh8-PCSk2zAmRIBJ_yCYkLqYmKTNkxImJypiQmoUQ1O6YiiO_rQyemUJ3SiGr49JI8UQSHLS5glQDBXBxNzExPgeE2sNEmPzYUsIqC1TW7llioijJ0r2CwAmSvYLYkxMq8WkhImS72S2sJR2xaW0K3y4t47n5sM9cRFfr2SGdC3tyQvdiSPOJTEk1dPr_0Bo4-6EhIyq6U4AmDTdbTTy4tZ_oTtxxGkihqTa8pCjGIqjb9ydkJBRNd0JAJOm3YlGiuGpsLElhrinJmL3u9qfOOIsAzARuB5ymDZQ_E33DDKSqqZFAYGipEdBSh74ekU1gYoqtot7KjbsBPDClEwzMSZqTj3AW692ReR4j4HyvGkHQ8rJr2Y7UnLCWw8DwETN7zbEmAisEUkqIpDnTdsYzVREAJSmfYxmMl28vEd6QNtdWuBrjQwAEzU_34BAqW5HJHF3xPEramQAoKj5NlVaO1yvqH2gopbc9tbIICW3vTUyAEyannoy5oman3dAk0eqdZUXxK-kkWHW2TenyKsMgEnTRkYjFRHARM1vPKDJU-2OyFERofiVNDJM8fqhCawfmqX1w9bIADBR08iAQFGzHRGDInBH5HB3oPibfptqhtTSCuJ6RbWBiiredaKkkWGW3HapjAwZMVFz6okxUdPIgCaPmu0IAIpU6yrb4geWEJR8aRdj0rSR0UyeA-uHahoZwORp-jMPKUGpdkckqYji9UMTWD80xbt11DQygJ1uanYOAChqGhnAXjclP_OAQJFq0_-2fkq8Wc8CNutZJbtdQSNj_PTDvwEAAP__cW9pUg==

# This query verifies stats collection for WITH ORDINALITY and the hashJoiner.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv WITH ORDINALITY AS a, kv WITH ORDINALITY AS b
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• cross join
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 25
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│
├── • ordinality
│   │ nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 5
│   │
│   └── • scan
│         nodes: <hidden>
│         regions: <hidden>
│         actual row count: 5
│         KV time: 0µs
│         KV contention time: 0µs
│         KV rows decoded: 5
│         KV pairs read: 10
│         KV bytes read: 40 B
│         KV gRPC calls: 5
│         estimated max memory allocated: 0 B
│         missing stats
│         table: kv@kv_pkey
│         spans: FULL SCAN
│
└── • ordinality
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV rows decoded: 5
          KV pairs read: 10
          KV bytes read: 40 B
          KV gRPC calls: 5
          estimated max memory allocated: 0 B
          missing stats
          table: kv@kv_pkey
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsUs1u2zwQvH9PsdjT14KFJVnugSelboq4TeLAMVIUhVHQ4sIRJJEKSbk2DD9WX6BPVlBqmtiJ3bg_tx53doacnd0V2psCOV4enx73x_Ac3oyGZ5DP4f1gfALD0evB-dHpYPwBji5BsB2NKTJUWtK5KMki_4ghThhWRqdkrTYeWjWEgVwgDxhmqqqdhycMU20I-Qpd5gpCjmMxLWhEQpLpBMhQkhNZ0Tybz5N8_qnKaYkM-7qoS2U55AzmyPCyEr56gQzfXYHLSuIQfP1i2zrVypFymVYPWkZ_tiAp1ZIkh14LTpeOLBgSkkMcwKsWnY0u-pCKorA_iJXIzC0x9H7Prvp9sI4qSHWtHPxPC9fJlHvGIejcEYjyXYRSLKCkUpsliKLQqXDeWGtiKlx6TRZ07aracfD8ZoBboIeTNcO2-p6wdWJGyMM1e_oWhkZmShSZW3bCzSXQgtL6YZC_YSw6xNj984j-ncefO4_uL55H92-fR7zT2J2fWmkjyZDcMDPxyp9RHpnuRNjrtzpTZDrx5nRDbzUJWRKxpMuSmCU9lrxEtmvsfbvyPXtTgKOyApnZHGorZvTkVUa7I-sdsssR2UorS9vRPfpy4PMiOaM2f6trk9KF0WnzTVsOG10DSLKu7YZtMVBtyxu8Lw73iuMNcbgtjvaKu_t_7h7wc7QtjveKe1s_T9b_fQsAAP__FOxplw==

# Verify that EXPLAIN ANALYZE on an unsupported query doesn't return an error.
statement ok
EXPLAIN ANALYZE (DISTSQL) SHOW QUERIES;

statement ok
EXPLAIN ANALYZE (DISTSQL) EXPLAIN SELECT 1

# This query verifies support for zeroNode in DistSQL.
query T
EXPLAIN (DISTSQL) SELECT sum(k) FROM kv WHERE FALSE
----
distribution: local
vectorized: true
·
• group (scalar)
│ estimated row count: 1
│
└── • norows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkE1LxDAQhu_-ijCnLgS28ZiTq1YsdD9s1w-QHkI71tJuUzOJCKX_XZoeVoUVPc47eebJzAD01oKE6GmXrOINC67jbJ_dJQuWRUl0tWfkDkGzYDfpds2ad_Z4G6URe1EtIXDodIkbdUAC-QwCcg690QUSaTNFg38Qlx8gQw511zs7xTmHQhsEOYCtbYsg4UG1DmkZAocSrapbPzFklywIWfHquoYWkI8ctLPHKWRVhSDDkf_dtKoqg5Wy2izFd1t2vw4uxGmN-I8mRep15490VJxeIOeAZYXz0Ug7U-DO6MJr5nLrOR-USHbuirmIu7k1ffArLH6Fz3_A-Xj2GQAA__8VEanA

# This query verifies stat collection for the tableReader and windower.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT avg(k) OVER () FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 5 (40 B, 10 KVs, 5 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• window
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows decoded: 5
      KV pairs read: 10
      KV bytes read: 40 B
      KV gRPC calls: 5
      estimated max memory allocated: 0 B
      missing stats
      table: kv@kv_pkey
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzslstu2zoQhvfnKQazsgEaknw5KLRKa6RF0KYOnMBdFEbBiAOXkEQqJOVLAz9WX6BPVoiq0ti5VN5rZ87FHP7fD4_v0d5lGOP1-afz6Q3w9aqX9mG2OJ9Drw_v57NLSNfIUGlBn3lOFuOvGCHDITIcIcMxMpzgkmFhdELWalOV3PuGC7HFOGQoVVG6KrxkmGhDGN-jky4jjPGG32Y0Jy7IBCEyFOS4zPw16fosXX8rUtohw6nOylzZGFJkeF3w6uMgqKb4uAAnc4oh_PXT1udEK0fKSa2epIzeWBCUaEEihqgO3u4cWTDERQxv4F0dXM2vppDwLLMPdQWXpqmrrr5cTKdgHRWQ6FI56NHWBVK5fgyhf01dQJS-VJDzLeSUa7MDnmU64a4aK_Qz3HKXfCcLunRF6WKo6v34TSDC5Z5hffojr3V8RRhHe_YCgr_Kl0obQYbEgerL_TOQvkgl9IZMMDkk9HbxoXcW9ZHhrJrnrNKEtpSUT6V_7aFVzt5l4CgvQEibQmn5ilrrMHlRh-GBDlF7K0YnWjEYDoJRZ8YWZhy2hzA8FcJoEIw7CC0gjNpDGJ0KYTzwPxMdhH9BGLeHMD4VwmTQIThxMz6DYE620MrS0YZ8_pvDanOSWFG9Zq0uTUJXRif-mvo4830-IMi6OhvVhwvlU37Ax83Rq83_HzSHx83DU272T_GvQkVuo00KGXekkt2DT5r4hkt36CBBlozkmfzBn9qrafOQDCUk143JmlTjtCZXu63J5mSrvwSPC8LWRjiUZNRJcizJuJPkWJJJJ8l-uf_vdwAAAP__liCfcg==

# Very simple query to make it easier to spot regressions when rewriting results
# in test files.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT k FROM kv WHERE k = 0
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• scan
  nodes: <hidden>
  regions: <hidden>
  actual row count: 0
  KV time: 0µs
  KV contention time: 0µs
  KV rows decoded: 0
  KV bytes read: 0 B
  KV gRPC calls: 0
  estimated max memory allocated: 0 B
  missing stats
  table: kv@kv_pkey
  spans: [/0 - /0]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkcGKFDEQhu8-RVEnhcD0XAOC2LS46LpL77IepJFMUoxNp5OYqh5nGPqxfAGfTLqzjIgMeMv_1V-Vn6oz8nePGh-aj039CAO8a-9uYTjA5_dN28AAr6FChSE6-mRGYtRfcIudwpSjJeaYF3ReDTfuiLpS2Ic0yYI7hTZmQn1G6cUTanw0O08tGUd5swx2JKb369jh8GY4fE0DnVBhHf00BtYwoMKHZJbnplpbPjyB9CNpqH795KJtDEJB-hj-KeX4g8GRjY6chuf-3UmIIZNZELwtcN_e12CN93zxJdPniw8V3j7VNbBQAhunIPCSjrLpg7zSULIVA9FwzTCaI4w0xnwC4320RuiSYWfEfiOGOEmapPy4xv8DullhUc_7ZTF7Qr2d1f_foCVOMTD9tf5rk6u5U0huT-XOHKds6T5Hu35T5N3atwJHLKW6LeImlNLczS9-BwAA__95TcXF

# Test a query that has a subquery and a postquery.
statement ok
CREATE TABLE parent (p INT PRIMARY KEY);
INSERT INTO parent VALUES (1), (2);
CREATE TABLE child (c INT PRIMARY KEY, p INT REFERENCES parent(p))

query T
EXPLAIN ANALYZE (DISTSQL) INSERT INTO child VALUES (1, (SELECT min(p) FROM parent))
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 2 (16 B, 4 KVs, 2 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• root
│
├── • insert
│   │ nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 1
│   │ into: child(c, p)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 2 columns, 1 row
│
├── • subquery
│   │ id: @S1
│   │ original sql: (SELECT min(p) FROM parent)
│   │ exec mode: one row
│   │
│   └── • group (scalar)
│       │ nodes: <hidden>
│       │ regions: <hidden>
│       │ actual row count: 1
│       │
│       └── • scan
│             nodes: <hidden>
│             regions: <hidden>
│             actual row count: 1
│             KV time: 0µs
│             KV contention time: 0µs
│             KV rows decoded: 1
│             KV pairs read: 2
│             KV bytes read: 8 B
│             KV gRPC calls: 1
│             estimated max memory allocated: 0 B
│             missing stats
│             table: parent@parent_pkey
│             spans: LIMITED SCAN
│             limit: 1
│
└── • constraint-check
    │
    └── • error if rows
        │ nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 0
        │
        └── • lookup join (anti)
            │ nodes: <hidden>
            │ regions: <hidden>
            │ actual row count: 0
            │ KV time: 0µs
            │ KV contention time: 0µs
            │ KV rows decoded: 1
            │ KV pairs read: 2
            │ KV bytes read: 8 B
            │ KV gRPC calls: 1
            │ estimated max memory allocated: 0 B
            │ table: parent@parent_pkey
            │ equality: (column2) = (p)
            │ equality cols are key
            │
            └── • filter
                │ nodes: <hidden>
                │ regions: <hidden>
                │ actual row count: 1
                │ estimated row count: 1
                │ filter: column2 IS NOT NULL
                │
                └── • scan buffer
                      nodes: <hidden>
                      regions: <hidden>
                      actual row count: 1
                      estimated row count: 1
                      label: buffer 1
·
Diagram 1 (subquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJysU-Fq2zAQ_r-nOO5XAiqxUwbDv9qFDEJTpyRpYIxQVPlwRW1Jk85rspLH2gvsyYbtuaspzTa2X7bu7pO-7767RwyfC0xwlq6myzXM0vUC1J0uMticz6-nKxjEAgar6Xw6WUOpzcAN4cNycQlOejI8HKJAYzNKZUkBk08Yo8C3uBXovFUUgvV1-LEpmmU7TCKB2riK6_BWoLKeMHlE1lwQJpjaE-tGYxSYEUtdNJfSjlTF2hpgXVIC0fdvAQXeSlZ3FMBW7CpOIEKB3j78CsS4PQhsTz_fCyxzwuT0IJ5xio9zWsvbgpYkM_KjqM-sbcNZ-7lx97RHgRNbVKUJCTgUuHKy_j1BgXNdaoa6QxebvpKLDShrmMxLkRcbaDRlpGxGWdLhb_dMATzJLIF38L4N5surCShZFOGpzkntu7q6rZebyQQCkwNlK8MwoB2PtOFhAlGjri0gun-toJQ7KKm0fg-yKKySXNOKGg7_YEn8N5ac57mnXLL1o7jvyHn68SZdrG_S6_l8cBbXA_r_x2fc4_qbkV5ScNYE6vF87ebosBVIWU7t2gRbeUVX3qrmmfa4aHBNIKPAbfa0PcxMm6oJPgfHR8Hj4-DxUXDUBzdSGlVoiB-sv4dCMhm1f-p8F3-QmvueZBTIa1nor_KlYR2sMcmTIv2lW4gu1W1Fl2s3o8uWFILMewXRnw7C9vDmRwAAAP__XNSzvA==
Diagram 2 (main-query): https://cockroachdb.github.io/distsqlplan/decode.html#eJyMj89K80AUxfffU1zOqoWBL9nOTiRCoLbSVjeSRZxc2oF0bpy5wULJY_kCPpk0I4gLweX53Tl_5oL02sOiXu-q7Z7q9X5D7uj7jp5uVo_VjhalocWuWlW3ezr5sBiWdLfd3NPQRg66XMIgSMfr9sQJ9hklGoMhiuOUJF7RZX5Qd2fYwsCHYdQrbgycRIa9QL32DIteXNuTkzEoFf8LGHSsre_nYD6zG9VLIPUntlR8vCcYvLTqjpxIRh1GtXR1RXn7BiWaySCrr96k7YFhy8n8fduW0yAh8Y9RvyUXU2PA3YHz_5OM0fFDFDfXZLmZfTPoOGm-llnUIZ-mZvr3GQAA__9Sm4hi
Diagram 3 (postquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJy0lMFu2zwMx-_fUxA8JYCA2EkPH3RqF6SA29QuEjeXIRhUmW21ypInyViCIo-1F9iTDbbabVmRbB2wk0GKf_pH_Wk_of-kkWOWL2eLErK8LEA-KF3B6mx-M1vCIGUwWM7ms2kJtTKDZgjni-IKGuHIhOEQGRpbUS5q8sjfY4prho2zkry3rks99QVZtUGeMFSmaUOXXjOU1hHyJwwqaEKO2kqhwUth4La9uyMHyShBhhUFoXTfvmgDh9MxMqQNyTYoayComjgkX794ZHgrgnwgD7YNTVfb6Z39_COR4nrHMEbPHD6Ie0Ke7tifs54rHciRG6X7gDHP4TSFbAl5UUJ-M5__E97xW3gvrDILEhW50XifuNw2xGE-Oy_hLC8zuCiyHBlGg0_j40PzSFtkOLf2sW3go1UGrOmmRIZTq9vaeA4NPjNAN0GH_hL7ILTeH_xy9SqW1gQyr-_octU3hIqkraiKjS9XcLsN5MGRqDj8D-9i8n5xPQUptPbf6xqh3EtdN_zVajoFH6gBaVsTYECbMFImDPnzwsUCosdDBQfMrMUGaqqt24LQ3TaHjjbp0X5rdHLQ6MlbjI4fETlnHai7eHHpaLLv-d8u42HGk7cwLsg31njagzrUOdmtGVJ1T_Fn4m3rJF07K_vXxLDodX2iIh_iaRqDzMSjDvBncXpUPD4uHh8VT46LJ0fFJ7-I17v_vgUAAP__kpTZFA==
