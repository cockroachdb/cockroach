# LogicTest: 5node

# These tests are different from explain_analyze because they require manual
# data placement.

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT, FAMILY (k, v))

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i);

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT, FAMILY (k, w))

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify that EXPLAIN ANALYZE (DISTSQL) annotates plans with collected
# statistics.

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv WITH DETAILS]
ORDER BY 1
----
start_key           end_key                 replicas  lease_holder
<before:/Table/72>  …/1/1                   {1}       1
…/1/1               …/1/2                   {1}       1
…/1/2               …/1/3                   {2}       2
…/1/3               …/1/4                   {3}       3
…/1/4               …/1/5                   {4}       4
…/1/5               <after:/Table/107/1/1>  {5}       5

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw WITH DETAILS]
----
start_key                end_key       replicas  lease_holder
<before:/Table/106/1/5>  …/1/1         {5}       5
…/1/1                    …/1/2         {1}       1
…/1/2                    …/1/3         {2}       2
…/1/3                    …/1/4         {3}       3
…/1/4                    …/1/5         {4}       4
…/1/5                    <after:/Max>  {5}       5

# This query verifies stat collection for the tableReader, mergeJoiner, and
# aggregator.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT kv.k, avg(kw.k) FROM kv JOIN kw ON kv.k=kw.k GROUP BY kv.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: custom
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• group (streaming)
│ sql nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ group by: k
│ ordered: +k
│
└── • merge join
    │ sql nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ estimated max memory allocated: 0 B
    │ estimated max sql temp disk usage: 0 B
    │ equality: (k) = (k)
    │ left cols are key
    │ right cols are key
    │
    ├── • scan
    │     sql nodes: <hidden>
    │     kv nodes: <hidden>
    │     regions: <hidden>
    │     actual row count: 5
    │     KV time: 0µs
    │     KV contention time: 0µs
    │     KV lock wait time: 0µs
    │     KV latch wait time: 0µs
    │     KV rows decoded: 5
    │     KV pairs read: 10
    │     KV bytes read: 40 B
    │     KV gRPC calls: 5
    │     estimated max memory allocated: 0 B
    │     missing stats
    │     table: kv@kv_pkey
    │     spans: FULL SCAN
    │
    └── • scan
          sql nodes: <hidden>
          kv nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV lock wait time: 0µs
          KV latch wait time: 0µs
          KV rows decoded: 5
          KV pairs read: 10
          KV bytes read: 40 B
          KV gRPC calls: 5
          estimated max memory allocated: 0 B
          missing stats
          table: kw@kw_pkey
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm-1um0gXx78_VzGaT6mKaw8vtoNUyW3aZ5VuY1d5qVStoojAqYPA4MI4TjbKZe0N7JWtwHViMzHOcVpADPlQGRhjzm_-nDP8Ob2j8Q-fmvTk4-ePB6fEu37jKcS6Hu958zfeK_L_49ER8a7Jp9HhkHhzMhqmQ8hbkhwnfxyPzr6Q99_SnVShQejA0JpATM2_KKMKValCNapQnSrUoOcKnUahDXEcRsmQu_QLh84NNTsKdYPpjCe7zxVqhxFQ845yl_tATXpqXfpwDJYDUbtDFeoAt1w__RnveuBdX0w9uKUKPQj92SSITZJczcnUSj622slV_PmVJD8WmyRgi80Ixm6YDOAQ88Uu7k7AJJ1__4kX23YYcAi4GwbCIT-0PTK3XC4esbh99fShKJzHxAE7dMAxyc_ruLzlEJMILMckffJ-sXN8_OWA2Jbvxw_jppYbLcclER19PTggMYcpscNZwMke3PC2G_BXJumkkBYDALxNAybWDZnAJIxuieX7oW3x5LI66TVcJlFATMIZn864SZLx6eUvdzB6fq_QxdZiMpeTdXlLrqz4an2aBsn4c4XG3BoDNdmKFA4_ULNzr-ymhm5GDfOBN89TQ5s1eqigHtSMHrob9fB43jByIAIne97XyYU8a9QT0jqCaAyfQjeAqM0ymcaH73xvwF6_ehu546vFR6rQURL9gCmDZBLgBuyZKJA8ssmx-IdPOEymxHFjj8xiaww7g3-EqmWgMtRd9m48jmBs8TBqM0OYPIWOFmCT2KlC3w2_XQxHpxfDs8-f9wYsAXNydrQ3UJNPB6Oz4enPzxsI_WZ96VkUxssEls9L7byM18nZ0cVhQkxLto4hcCBKNUYGanug_UKKj4SMDCF1s1geY54FTzF6Es8wbIXTtppR0q5xGBvj6GbjWJ9p9vzSwpALjbbaamtNaalaackuNdiueuhhlxqNHqqoh-xSo7dRDwUuNVjdlhqou2x1qdGt3VKj-zKBbVlqsBosNdbFoj4_JavYEq212nqTkquWkrMlWt1VD31siW70UEU9ZEt0f6MeCizRat1KNOouWy3RvdqV6N7LBLalRKs1KNHrYtGen5I1bInWW22jSclVS8nZEq3tqod9bIlu9FBFPWRL9P5GPRRYorW6lWjUXbZaovu1K9H9lwlsS4nWalCi18WiPz8l69gSbbSahFy1hJwt0PquajCQBbrVZsQKHMJIyK8gapRRNWVkS7WxURkFlmq9bqUadb-tlur92pXq_ZcJbEup1mtQqnVMI8YxxNMwiCHzjv3pn-pkfqrFEp7gjGHBPw5nkQ1fotBOxy42R-mJ0hriQMwXR9XFxmGwPBRzi-e9tP-dN2KHpiFGYE0e2sWeH0p_YygB8HkYeUkhgcC-fYhluV8sLQ7EELmW7_5tiQiWX0uvPQIb3OuUwcqhZQl6OJYCWB6dQJxwyX4Zy4chATGtZEIsh1D_lxBi64RULCHpNKQhCalla6hwQrpAiCEyqlqpjNrFhdLfGEpN55ohAWUyavGEis-oWELSaUhDElLL1lDxGVUgpGYJdVYJrQPqrJ7KEJKzlgtbr9JyN3NrGQYuFtaRrRR3kbPNDOkIITWkSqehHlJDqnQa6gka0nPT8xOAlqfqC7CN3FOpXTHVV2bxLMTS3dFZqaluGI7P5kft8qeaIWMp3VkpfLJVLCH5nBUkodKdlcKfJXWBUG9HZ6WmEurh-Gx-1K5ARkXGUrqzUnxGxRKSz1lBEirdWSk-owqE-rnr7f0cZ0VIzvs7Ois1VaMhuFj5gHLsmvK9py5ytiV0VpDTLaGzgtSQhM6K-GpAeNu6zVqpdwHrCxpimLetEmhIRQKS7rmbYQnlmDflPzep6GjKnvDCc4aGRVS601L8G1cRkfDKVW6rpY8EJN3DN8MSynFwKpBW0dGUPeHFp1UsotLtluLTqohIeJm8tp5neo7hIuZo4b2r5I6L4G5tISRhhwxWRDlGTgVcKeyES2i6YCdcQtdFVFF-F0rZhIp3XUQRNb0t64shJCDpHsIZlpCELTNoRFVukdKw0UjouoiImgaXNUL7SEDSPYQzLCEJ-2bQiKrcJ6Vho5HQdRER5Xe5sLw2FzFHN30u666LaHLt3OhSU0RdrIgkbJ_BqijHyinfmOphJ1xC10WYcLXpdVl3XQQRqdXudSm-nRUJqGzXpfiXslhCErouaETSqUjDIsqxcsp_gtLFaKrd61J4WhX-f-8WQGW7LsWnVSwhCV0XNCLpVKRhEeVYORVIq2I0-b0ual6vi5ijm16X9RwtmFxbCEnoumBFJKHrglWRhA00WBXlWDkVMKbECW96XdZdF_3-XKHf_XB-4TrUpJ2ff60n_ln-0eQL1jim5h09uQrnKa3T2ynE1Pxu-TEo9Mjy4ANwiCZu4MbctanJoxnc3__vvwAAAP__fNXM5w==

# This query verifies stats collection for the hashJoiner, distinct and sorter.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT DISTINCT(kw.w) FROM kv JOIN kw ON kv.k = kw.w ORDER BY kw.w
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: custom
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• sort
│ sql nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ estimated max memory allocated: 0 B
│ order: +w
│
└── • distinct
    │ sql nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ estimated max memory allocated: 0 B
    │ distinct on: w
    │
    └── • hash join
        │ sql nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 5
        │ estimated max memory allocated: 0 B
        │ equality: (k) = (w)
        │ left cols are key
        │
        ├── • scan
        │     sql nodes: <hidden>
        │     kv nodes: <hidden>
        │     regions: <hidden>
        │     actual row count: 5
        │     KV time: 0µs
        │     KV contention time: 0µs
        │     KV lock wait time: 0µs
        │     KV latch wait time: 0µs
        │     KV rows decoded: 5
        │     KV pairs read: 10
        │     KV bytes read: 40 B
        │     KV gRPC calls: 5
        │     estimated max memory allocated: 0 B
        │     missing stats
        │     table: kv@kv_pkey
        │     spans: FULL SCAN
        │
        └── • scan
              sql nodes: <hidden>
              kv nodes: <hidden>
              regions: <hidden>
              actual row count: 5
              KV time: 0µs
              KV contention time: 0µs
              KV lock wait time: 0µs
              KV latch wait time: 0µs
              KV rows decoded: 5
              KV pairs read: 10
              KV bytes read: 40 B
              KV gRPC calls: 5
              estimated max memory allocated: 0 B
              missing stats
              table: kw@kw_pkey
              spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsW-1u27gS_X-fguCvFleuTX34Q0CBoEkvbrrbpEiCAotFUCgSmwiSJVek42SDPNa-wD7ZQnIdx5qIzjiFJIfujyKyaFlz5nDO6JC6o-JHTF16-vH3j_tn5ODw9OzwaP-MvIlm72Zvyf9Ojj-T6Jp8Oj48ItGMHB-R6PpdRN6T_Dw5Pjn4eEI-_FEcUYMmacCPvDEX1P2TMmpQkxrUoga1qUEdem7QSZb6XIg0y4fcFV84DG6o2zNomEymMv_43KB-mnHq3lEZyphTl555FzE_4V7As26PGjTg0gvj4mei673o-tsk4rfUoPtpPB0nwiURNejpxMv_7HTzu_jtK8l_TLgkYfPDjF-GaT5AciHnH8lwzF3S--dvMT_200TyRIZpAk7FqR-RmRdKeMaT_tXTp7J0JkjA_TTggUt-3sfFreSCZNwLXDIkH-YfXp582Se-F8fiYdzEC7PFuDyiz1_394mQfEL8dJpI8obfyG6YyLcu6RUgzQdwHlUNGHs3ZMzHaXZLvDhOfU_mt9Ur7uEij4ILkk7lZCpdko8vbn_xAaPn9wadH82TuUjWxS258sTVapr28vHnBhXSu-TUZY-ocHhA3d69sRkb-iU2zPaiGWDDbMmGLtvxoYV8MEt86FfyYXndaZJmAc94sHLl8_yb64Y8Qar_e-LqUxomPOuyUomJ-Xf5Zo-9fZ-Fl1fFX9Sgx3nQeznw_Ib7U0iKX4rmEimrhBRDTZ2DUMgw8WWXOSAf9USC44VdjtZ5ATFUeJi9hvBYxuqUYjVRmT1NM8mzrgny-t_aA-mXA3lO0p5KWXH3T-btKO2kk65VSlpFmGtDcSpDGZRCsVZzwp4vVAzZtnTNTtfaCVXbhKrcuLBN-TDANi47PrSRD-XGZVDJhzoaF7ZNjQtq6iwbl_52Ni79FxBD2biw9jUuqMwuGheQ1xY0LqtJM59f3U2s2ludrr2r7m2r7mW1NzflwxCr9js-tJEPZbUfVvKhDrU3t0ntUVNnqfaD7VT7wQuIoVR7s31qj8rsQu1BXlug9qtJs55f3S2s2tudrrOr7m2r7mW1tzblwwir9js-tJEPZbUfVfKhDrW3tkntUVNnqfbD7VT74QuIoVR7q31qj8rsQu1BXlug9qtJs59f3W2s2judXW1vW20va729KRscpNZ3uox4SUAYSeUVz3bMaBszyqrvVDKjDtW3t0n1UZNoqfqj7VT90QuIoVR9u32qj8rsQvVBXlug-iPMnooTLiZpInh5Vj_5U73ST3VYnmUeXPI5JUQ6zXz-JUv9Yuz88Li4UCFHARdyftacHxwmi1NCelK1wUEFXn5O_IiJ5OMJCUIRkanwLvmzse3RIsSMe-OHjXrPD2VUGUrC5SzNolyTeOLfPsSy-ByqVMAFz0IvDv_yIASLrxX3nnGfh9cFBo9OLdTs4VwBwOLsmIscl_KXsfgwJEDMaRghpkBo-EsQYqsImUiETKYbhywsQgPdELIBQgxRUc1WVdQ-LpRRZSivNNcMCVCpotaPUP0VFYlQqaJqwCELi9BAN4RsgJBZRqj3GCFrBaDe40s5oDhbSrDtNrW7panlOLhYmHbNSh-ZbaZds9JHcsi0dENogOSQqd1j5QBwyFaWZ6e6PA8B2I7yUn2I9cOlwF311aLB4G21pg8HsAw2NGleKQUZDp_qKdp8qhkylsZNmtqTbSIR0tCkwSLUdN9T-2OpDRAabmjSvFIKDXD4VDs_LaioyFgaN2nqr6hIhDQ0abAINW3S1F9RAUIjZb_NegqXBlRnpl5lqLZpXikfHWgarlnLq26Cmney-th8a2jUYBOuoVODZZGGVg1kEVhsWK3SpsKsgXirffkn3JrXrYlDCPca81A3QppIgLSbsQyLkMIPav5RzMRG07h3U3vNsNAQadcL2RAisOKgt3szRAKk38YdLEIKU6gFZRUbTeMGTv1lFQ1R0w5O_WUVQqRefWV9hYUDazRYf9XcwgGG2RqENNy_gyWRwhdqgcuFTbiGFg424RpaOJBFYHF3tUoPFRYOxBusa2hu4UC4wbqG3haOhQSo6RlbO4UYFiENt_RgIVL4Qs0_jlnoaPSzcABEJua9Uw2exkZIgJq2cOovq1iENNzXg4VI4Qu1oKyio9HPwoEQqdd3TcX6rgNrNFjf1dzCAY7ZGoQ0tHCwJNJwaw-WRQpfqHmXa4BNuIYWDkw4WOJdrdK2wsKBeKtfv9LPwoFwg3WNVlk49e_dRQKk3YxlWIQ0tHCwEDW-tad-pxQNUauWs8rPGjCaNWs1ujkU4A3kNQA1beHUX1axCGlo4WAhanxrT_1lFQ1RtS_UgrIKo1Gv75qK9V0H1mj1e2v6WTjQMVvzdqh2bUsfSyINLRwsizTc2oNlkcIXaoHLBROuft3VUrzuOgTQWGBhQ3MLZ3R_btDvcTr7FgbUpb2f_zpP_Lf4R_MveJeCunf09CqdFWid3U64oO53LxbcoJ-9iB9wybNxmIRChj51ZTbl9_f_-TcAAP__Kq0KGw==

# This query verifies stats collection for WITH ORDINALITY and the hashJoiner.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv WITH ORDINALITY AS a, kv WITH ORDINALITY AS b
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: custom
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• cross join
│ sql nodes: <hidden>
│ regions: <hidden>
│ actual row count: 25
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│
├── • ordinality
│   │ sql nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 5
│   │
│   └── • scan
│         sql nodes: <hidden>
│         kv nodes: <hidden>
│         regions: <hidden>
│         actual row count: 5
│         KV time: 0µs
│         KV contention time: 0µs
│         KV lock wait time: 0µs
│         KV latch wait time: 0µs
│         KV rows decoded: 5
│         KV pairs read: 10
│         KV bytes read: 40 B
│         KV gRPC calls: 5
│         estimated max memory allocated: 0 B
│         missing stats
│         table: kv@kv_pkey
│         spans: FULL SCAN
│
└── • ordinality
    │ sql nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │
    └── • scan
          sql nodes: <hidden>
          kv nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV lock wait time: 0µs
          KV latch wait time: 0µs
          KV rows decoded: 5
          KV pairs read: 10
          KV bytes read: 40 B
          KV gRPC calls: 5
          estimated max memory allocated: 0 B
          missing stats
          table: kv@kv_pkey
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsVE1v4zYQvfdXDObUFgwsyXYPPDl1UsRtEge2kaIojICWJg4hiVRIyh8I_LP6B_rLFrTixFZsb7KLBfawOhiYeY-Pj_MGfkL7mCHH4fnleXcEv8Ifg_4VpDP4uze6gP7grHd9etkb_QOnQxDsADBBhkondC1yssj_xRDHDAujY7JWG996WhN6yQJ5wFCqonS-PWYYa0PIn9BJlxFyHIlJRgMSCZlGgAwTckJma9l01klnd0VKS2TY1VmZK8shZTBDhsNC-OoEGf51C_42y0GFVWloKrWHHVlXtZzMiUPw_3-2qmOtHCkntXoDZTpOYS6ke4sIFz_sh4yeW0go1gklHNpVc7J0ZMGQSDi0Avi96k4HN12IRZbZF2IhpNkQQz-Gq9tuF6yjAmJdKgc_08I1pHK_cAgarwSi9BAhFwvIKddmCSLLdCycN1aZmPh3kAVduqJ0HDx__YBNo43jFcOqeg7OOjEl5OFW0r0z5MGKvT_svkmkEpl0y0a4mzUtKC7fpvEVRqOa0fAjRre3Mvqxld_9VjZrYUdfuJXNb72VrZrR5kGjr_5KpU1ChpIdc2N_8nOUPa-9EPbhTy0VmUZr97V9b70Tsk7EOk3WabFOm3V-Q3ZoDMey9Jh9zMBRXkAibQqlFVN6d9TR4RG2ayNsfSTrAdlCK0v1Ue69KajddBL6gVIypSogq0sT043R8Zpblf210LqRkHUVGlZFT20g6wyJ_OUPdFspPKrU2lEKt5WiulJ0VKl52FNYV2p-wFO0rdSsK7WOKrWPzWnM8D7T8zuZIMfg-TvZ87P50B8QU-sXYPig52vZ0bLw8d2LzBLDK5HSGTkyuVTSOhkjd6ak1eqnTwEAAP__v232lg==

# Verify that EXPLAIN ANALYZE on an unsupported query doesn't return an error.
statement ok
EXPLAIN ANALYZE (DISTSQL) SHOW QUERIES;

statement ok
EXPLAIN ANALYZE (DISTSQL) EXPLAIN SELECT 1

# This query verifies support for zeroNode in DistSQL.
query T
EXPLAIN (DISTSQL) SELECT sum(k) FROM kv WHERE FALSE
----
distribution: local
vectorized: true
·
• group (scalar)
│ estimated row count: 1
│
└── • norows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkktrq0AUx_f3UwxnZWBCnCxndXNvLBXyakwfUKQMemLEx9iZsWkJfvfi2DRpaEJ7FsJ5-PvhH3egn3Pg4D0sJiN_RpyxH6yCm0mPBN7E-78iui6crEeulvMpyV7I_bW39Mha5BqBQiljnIkCNfBHYBBSqJSMUGup2tHOHvjxK3CXQlpWtWnHIYVIKgS-A5OaHIHDnchr1AMXKMRoRJpbokv-Eccl0aYuM92DsKEga3OgaCMSBM6OtP4YuNvQn5tHSaIwEUaqAftqD26nzl92Xjs80bLfaJeoK1naEA_Kcyb3xNRnTUgB4wS7lLWsVYQLJSN727VzC7KDGLXptqxr_HK_0kahKD5TOyaxi6ThJVJIYZ3L7VMaAwf3o_rfPPYF7Qsi0W1EwUZuLXb1VrUfaH82ClOR4RgNqiItU23SCLhRNTbNn_cAAAD__wCO4Ww=

# This query verifies stat collection for the tableReader and windower.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT avg(k) OVER () FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: custom
rows decoded from KV: 5 (40 B, 10 KVs, 5 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• window
│ sql nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│
└── • scan
      sql nodes: <hidden>
      kv nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV lock wait time: 0µs
      KV latch wait time: 0µs
      KV rows decoded: 5
      KV pairs read: 10
      KV bytes read: 40 B
      KV gRPC calls: 5
      estimated max memory allocated: 0 B
      missing stats
      table: kv@kv_pkey
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsls1u2zgQx-_7FMScbECG9eXFgqfsOtkiaFMHTuAeCiNgxIlDSCIVkvJHAz9WX6BPVlCKUn8G9skX62CYM0Ny-P8NiXkF85IBhburL1f9e8Kmk1baJoPR1ZC02uT_4eCGpFPwQCqOX1mOBuh3CMCDEDyIwIMYPOjB2INCqwSNUdqFvFYTrvkcqO-BkEVpnXnsQaI0An0FK2yGQOGePWY4RMZRd33wgKNlIqu2SacX6fShSHEBHvRVVubSUJKCB3cFc387XZfF5xFxmxlKZFAPNU6EcgEWja1NVuRIif_rp6nHiZIWpRVKbrkylaRkxoTd9jCbPO92aTUzhGOiOHJK3vJ4XFg0RCPjlPxD_quNk-FtnyQsy8x7XMGEbuLciW5G_T4xFguSqFJa0sK57Qpp25T4lUh1AGK6LyBnc5JjrvSCsCxTCbMuLb_K4dGdAg1RpS1KS4mLr9JvDAGMlx7UozdqxrIJAg1WMF9fAvWX3h7SfwCXUmmOGvka3PFyRy18E5KrGepub70Q_h19al0EbfBg4PK7cBrhHJNym99HB3c-85IRi3lBuDApKQ2b4MG69PbqEm7o0lvTJTj8BgRH3oBu2OlG5ztwyjsQrLEOD2cdHss66nTjM-tTsg7XWEeHs46OZR13qkfwzPpkrKM11vHhrONjWfc6Z9KnJB3v7WJ2kB6iKZQ0uNHN7N7J39ipE7i2B_kE6x7JqFIneKtVUsXWw0G1UGXgaGztDerBtaxcgdtBI8vfm7DVlYIPV_p7bSX_w5XCY3NilQAg0c6UTl2poUwW7yXW2LeLj6NBLVgmfrDtcm6mVXw1JiimTX02rqZIG19dqI03R-M6vdUA_8AaWtUn2NQnOuuzqk-4qU981mdVn2hTn95Zn1V9Yvc6PmVq9iA4UPDfvs6On-YDN4FNjHui757VrBLrflG4B_aJZQY9uGEpXqJFnQspjBUJUKtLXC7_-h0AAP__xr-MJw==

# Very simple query to make it easier to spot regressions when rewriting results
# in test files.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT k FROM kv WHERE k = 0
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: custom
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• scan
  sql nodes: <hidden>
  kv nodes: <hidden>
  regions: <hidden>
  actual row count: 0
  KV time: 0µs
  KV contention time: 0µs
  KV lock wait time: 0µs
  KV latch wait time: 0µs
  KV rows decoded: 0
  KV bytes read: 0 B
  KV gRPC calls: 0
  estimated max memory allocated: 0 B
  missing stats
  table: kv@kv_pkey
  spans: [/0 - /0]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyMUs1qGzEQvvcphjm1oJD1VVAodVwa2jTBNumhmCBrJ45YrbTVzPoH48fqC_TJilaO-5MEqsOy349mvmG0R_7uUeNs8nkynkMDH6bXV9Cs4evHyXQCDbyFChWGWNMX0xKj_oYjXCjsUrTEHFOm9oPhst6irhS60PWS6YVCGxOh3qM48YQa52bpaUqmpnSeC9ckxvmhbLN-16zvuoZ2qHAcfd8G1tCgwlln8u95NVz5dAu5G2sIowITrVzMDiGWQolrSUP18wcXbGMQCuJieCL5aBvYGCdPFSP24XkpxQ1DTTbWVGs4xlruhBgSmUzB-0KupjdjsMZ7Pvk649LJhwqvbsdjYKEObOyDwGvayrkL8kZDGbkYiJqXDK3ZQkttTDsw3kdrhE4ZlnkKYoi9dL2UjkP838TioLCg49pYzIpQj_7Y8-UF6uqg_n_VU-IuBqa_tvxSp-qfTmejw0Ih1Ssq74tjnyzdpGgHb4HXQ6GBqImlqKMCLsOjxJLItCX-QuG9j5s7V6PG6njOnvk8HswXzIrzYLOHuBnKznddjnVvPJPCK9PQBQml1gXH4ixqST0dDq9-BQAA__-gYREP

# Test a query that has a subquery and a postquery.
statement ok
CREATE TABLE parent (p INT PRIMARY KEY);
INSERT INTO parent VALUES (1), (2);
CREATE TABLE child (c INT PRIMARY KEY, p INT REFERENCES parent(p))

query T
EXPLAIN ANALYZE (DISTSQL) INSERT INTO child VALUES (1, (SELECT min(p) FROM parent))
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
plan type: custom
rows decoded from KV: 2 (16 B, 4 KVs, 2 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• root
│
├── • insert
│   │ sql nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 1
│   │ KV contention time: 0µs
│   │ KV lock wait time: 0µs
│   │ KV latch wait time: 0µs
│   │ into: child(c, p)
│   │
│   └── • buffer
│       │ sql nodes: <hidden>
│       │ regions: <hidden>
│       │ actual row count: 1
│       │ label: buffer 1
│       │
│       └── • values
│             sql nodes: <hidden>
│             regions: <hidden>
│             actual row count: 1
│             size: 2 columns, 1 row
│
├── • subquery
│   │ id: @S1
│   │ original sql: (SELECT min(p) FROM parent)
│   │ exec mode: one row
│   │
│   └── • group (scalar)
│       │ sql nodes: <hidden>
│       │ regions: <hidden>
│       │ actual row count: 1
│       │
│       └── • scan
│             sql nodes: <hidden>
│             kv nodes: <hidden>
│             regions: <hidden>
│             actual row count: 1
│             KV time: 0µs
│             KV contention time: 0µs
│             KV lock wait time: 0µs
│             KV latch wait time: 0µs
│             KV rows decoded: 1
│             KV pairs read: 2
│             KV bytes read: 8 B
│             KV gRPC calls: 1
│             estimated max memory allocated: 0 B
│             missing stats
│             table: parent@parent_pkey
│             spans: LIMITED SCAN
│             limit: 1
│
└── • constraint-check
    │
    └── • error if rows
        │ sql nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 0
        │
        └── • lookup join (anti)
            │ sql nodes: <hidden>
            │ kv nodes: <hidden>
            │ regions: <hidden>
            │ actual row count: 0
            │ KV time: 0µs
            │ KV contention time: 0µs
            │ KV lock wait time: 0µs
            │ KV latch wait time: 0µs
            │ KV rows decoded: 1
            │ KV pairs read: 2
            │ KV bytes read: 8 B
            │ KV gRPC calls: 1
            │ estimated max memory allocated: 0 B
            │ table: parent@parent_pkey
            │ equality: (column2) = (p)
            │ equality cols are key
            │
            └── • filter
                │ sql nodes: <hidden>
                │ regions: <hidden>
                │ actual row count: 1
                │ estimated row count: 1
                │ filter: column2 IS NOT NULL
                │
                └── • scan buffer
                      sql nodes: <hidden>
                      regions: <hidden>
                      actual row count: 1
                      estimated row count: 1
                      label: buffer 1
·
Diagram 1 (subquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJysU9Fu2jAUfd9XWPcJJCMSqkmTn9pRJqHSUAFFmiaEXOc2tUjszL4ZsIrP2g_sy6YkTQel7VZteQB878n14Zx77sF_TUHAMJoOJjM2jGZjpu50GrP52eh6MGWtkLPWdDAa9Gcs06aVt9mnyfiS5dKhoXYbOBgbYyQz9CC-QAgc3sOCQ-6sQu-tK8v3FWgYb0AEHLTJCyrLCw7KOgRxD6QpRRAQ2Y7Nuz3gECNJnVZDcYOqIG0NI52hYMHPHx443EhSd-iZLSgvSLAAODi7_l0IYbHjUJ8e7vMkEwRxskdweA6it-N7HMPXOc7kTYoTlDG6bnDItJbltP5a5ivcAoe-TYvMeMFy4DDNZfmzAxxGOtPESsUu5qy83AtmHo4OE21LIKGnunTw3y_mTFlDaI5luZiz1KoVW0tNx51Ss-dblXQxKhtjLBpaN1tCzxzKWLAP7GNdTCZXfaZkmvpHXC61a3Cle5fzfp95wpwpWxhiLdxQVxtqCxZUotUAxNVLgExuWIaZdVsm09QqSSWtoOLwD86HT5wP3uL8WZI4TCRZ1w0PjT-LPi-j8WwZXY9GrdOwzMX_39reE-7hAfc_JGuCPrfG4wHvl24KntzUCXcLDhgnWMfZ28IpvHJWVdj6OK4GVYUYPdXdk_owNE3Lk0OZPUq_Pyl8dVLvDZN6r04KjifJSgAwSGvrVmVM0Kjto2lN_Tg4MXp0Wqb6uzz2unmt8tehQv2tyVbTagLW9OqQNd0MvZfJASD4yx3a16dy7za166WOQUDw8HSe-WgeKF-QiS9XaHpn15VYs21eLsCtTD1yuJQrPEdCl2mjPWkFglyBu927XwEAAP__fX8Rfg==
Diagram 2 (main-query): https://cockroachdb.github.io/distsqlplan/decode.html#eJy0ksFqGzEQhu99imFOMSh4tbnpVhoXTBK72K4vxRRFO7ZFtNJWmq1TzD5WX6BPVnY3aRMnMRhaHQQzv_TP9wvtMX1zqHA8mY9mCxhPFlMwW-sKWL6__jyaw5kUcDYfXY8-LKC0_qwawMfZ9AYqHcnzYIACfShooktKqL6gxJXAKgZDKYXYtvbdgXFxjyoTaH1Vc9teCTQhEqo9smVHqNAFox18166mBNkwQ4EFsbauc6Z7MjXb4IFtSQqyXz8TCrzVbLaUINRc1aygvRXD7m9D4qoR2FcPgxPrDaGST0jHl6iyRpwKe1uv1xRBDuX_hs0PYOXpsCbUniEf5s9Zr5ZggmfyL3mvluCCuYOdtvxSacO8Iv377BcH2fNTss8oVcEnehb6rUnZwaRz2awEUrGh_iunUEdDn2Iw3dm-nHZGXaOgxL0q-2LsH6XEkXT55589dZJHnfK3neShU37U6eIY00rg2oXdV1ugwuxhnb-yPS5sL-hNah97vg27znbxo2qfaq1dIoE3-o4uiSmW1tvE1qDiWFPTvPsdAAD__2nHd8M=
Diagram 3 (postquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJy0lMFu8jgQx-_7FKM5geSKBHpY-dQupVJaChVQLitUuclAvTh21nYEqOKx9gX2yVZOoFtoYbef9OUAmvH4n99M_vYbuj8VckwG495oAslgMoT0VaoMptf9p94YGjGDxrjX73UnkEvdKJpwOxo-QCEsad9sIkNtMhqInBzy3zHGGcPCmpScMzak3qqCJFsjjxhKXZQ-pGcMU2MJ-Rt66RUhR2VSocClQsNLOZ-ThagVIcOMvJCqkh-WnsNVGxnSmtLSS6PBy5w4RH__5ZDhi_DpKzkwpS9CbdhvzerfRIyzLcM62nE4LxaEPP4Antwgj7bs_7PfSuXJkm3Fh8B1nsNVDMkYBsMJDJ76_Z_C3z7ij7_Df2ekHpHIyLbahx1MNgVx6PduJ3A9mCRwN0wGyLA2wFX991wsaYMM-8YsywL-MFKD0aFrZNg1qsy141DgjgFCR6GVfey8UOpwEPdTCOyOg47r0NJCmqDjyfk6dbwjNdqT_jzV-ykoky5hJaT_vBJG_vVSNfmMUpNRVvPeT-Fl48mBJZFx-BV-q5OL0WMXUqGUe68rhLT7ujDTh2m3C85TAakptYcGrX1Lat_kO5_XBUTLUwUnPJOLNeSUG7sBocIh8oE2qtD-00_RST91jvzU_o6f6rNM1hoLcl4PMm51Dq31o2fgNPPlEXPnO8wjcoXRjg4gT70pOnrTRbydMaRsQfWl50xpU3q0Jq1q63BYCVWJjJyvV-M6SPR-yXlLIn-_gj4qxWeV2qeV4mOl9lmlzmml9rFS56zS5bnuZgznyqyeZYYco91z8cXP_sGwQSxc-GzjV7OqZMMN5ZDPhXLE8EEs6YY82Vxq6bxMkXtb0nb7yz8BAAD__8zCQBU=
