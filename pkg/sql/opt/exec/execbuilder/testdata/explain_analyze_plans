# LogicTest: 5node

# These tests are different from explain_analyze because they require manual
# data placement.

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT, FAMILY (k, v))

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i);

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT, FAMILY (k, w))

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify that EXPLAIN ANALYZE (DISTSQL) annotates plans with collected
# statistics.

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv WITH DETAILS]
ORDER BY 1
----
start_key           end_key                 replicas  lease_holder
<before:/Table/62>  …/1/1                   {1}       1
…/1/1               …/1/2                   {1}       1
…/1/2               …/1/3                   {2}       2
…/1/3               …/1/4                   {3}       3
…/1/4               …/1/5                   {4}       4
…/1/5               <after:/Table/107/1/1>  {5}       5

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw WITH DETAILS]
----
start_key                end_key       replicas  lease_holder
<before:/Table/106/1/5>  …/1/1         {5}       5
…/1/1                    …/1/2         {1}       1
…/1/2                    …/1/3         {2}       2
…/1/3                    …/1/4         {3}       3
…/1/4                    …/1/5         {4}       4
…/1/5                    <after:/Max>  {5}       5

# This query verifies stat collection for the tableReader, mergeJoiner, and
# aggregator.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT kv.k, avg(kw.k) FROM kv JOIN kw ON kv.k=kw.k GROUP BY kv.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• group (streaming)
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ group by: k
│ ordered: +k
│
└── • merge join
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ estimated max memory allocated: 0 B
    │ estimated max sql temp disk usage: 0 B
    │ equality: (k) = (k)
    │ left cols are key
    │ right cols are key
    │
    ├── • scan
    │     nodes: <hidden>
    │     regions: <hidden>
    │     actual row count: 5
    │     KV time: 0µs
    │     KV contention time: 0µs
    │     KV rows decoded: 5
    │     KV pairs read: 10
    │     KV bytes read: 40 B
    │     KV gRPC calls: 5
    │     estimated max memory allocated: 0 B
    │     missing stats
    │     table: kv@kv_pkey
    │     spans: FULL SCAN
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV rows decoded: 5
          KV pairs read: 10
          KV bytes read: 40 B
          KV gRPC calls: 5
          estimated max memory allocated: 0 B
          missing stats
          table: kw@kw_pkey
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsne1um0wWx7_vVYzmU6ri2sOLjZEquU27q3Qbu8pLpWoVRcScOMgYXBjHyUa5rL2BvbJH4MeJYWKc47hgMXyzgWDO7xzOH_5zqj7Q6LdHLXr69fvXwzMyvv0wVoh9OzoYzz-M35F_ngyOyfiWfBsc9cl4Tgb95BDykcT7yb9OBuc_yOdfyUaqUD9woG9PIKLWfyijClWpQjWqUJ0q1KAXCp2GwRCiKAjjQx6SPzhy7qjVUqjrT2c83nyh0GEQArUeKHe5B9SiZ_aVBydgOxA2W1ShDnDb9ZKfGd_2xreX0zHcU4UeBt5s4kcWia_mdGrHHxvN-Cr-_ZNwdwIWaf3_f9Hi-zDwOfjcDXxhVxjMI-LAMHDAsQhbbLy65xCREGzHIib5vNg4OvlxSIa250VPx01tN1weF__08c_DQxJxmJJhMPM5OYA73nR9_s4irSSaxQEA43UHTOw7MoFJEN4T2_OCoc3jy2ol13Bl8-ENRCSY8emMWyQ-Prn85QZGLx4Vuvi2oL6kenVPbuzoJs2zFx9_odCI2yOgFlvJ2dEXarUele3S1s6kbd4bz_PS1mR14t6SODWTuPbaxD2fNwgdCMHJnvd9fCGvOuqFGjiGcATfAteHsMky964H1_ygx96_-xi6o5vFR6rQQRx9jym9OAlwB8OZmOs8svG-6LdHOEymxHGjMZlF9gi2Bv8MVctAZajb4dNoFMLI5kHYZIaQPIUOFmDj2KlCP_V_XfYHZ5f98-_fD3osBnN6fnzQU-NPh4Pz_tnfn9cQ-sP1pWdRGG8rsHxeauttvE7Pjy-PYmJa_O0EfAfCpMZIT232tB1SfCZkZAip64vlOeaZ_xKjF_H0g0YwbaqZSto2DmNtHO1sHOlMs9drAENKd1NtNLVaA3Ym3mzbxHWw4l0nbqfi3VmbuALFm1VNvFG3w6p4tysn3u23FdgG8WYVEO90saiv750qVvS0RlOve-fORE_dNnEmVvTqxO1U9My1iStQ9NSqiR7qdlgVvU7lRK_ztgLbIHpqBUQvXSza63unhhU9vdE06t65M9HTtk1cFyt6deJ2KnrdtYkrUPS0qoke6nZYFT2zcqJnvq3ANoieVgHRSxeL_vreqWNFz2jUnXNnkqdvmzYDKXmNJiO27xBGAn4DYZ3CnYmfsTaFBYqfXjXxQ90Yq-LXrZz4dd9WYBvET6-A-OmYBe0TiKaBH0FmrfLln2plfqrBYp7gjGDBPwpm4RB-hMEwOXbxdZCcKGn2DkR8sVddfDnyl7sibvO8xc8_eSO2aBJiCPbkaT7m9aGYa0Pxgc-DcEw8m4M_vH-KZbl9brs8HaUDEYSu7bn_tUUEyz9Lrj2EIbi3CYOVXUsJetqXAFjunUAUc8n-MZYPQwJiWsmEWA4hcyeEWJqQiiUkXQ1pSEJq2TVUOCFdIMQQHVXdq47axoVirg2lorlmSECZjlo8oeI7KpaQdDWkIQmpZddQ8R1VIKRmCbVWCaUBtVZPZQjNWcuFre_T427m1jIMXCysJZsUt5HZZoZ0hJA1pEpXQx1kDanS1VBHqCE9tz2_AGh5KlOAbeSeSm2LrX5vHp6FWNpbOisVrRuG47P-Vbv8VDNkLKU7K4UnW8USks9ZQRIq3Vkp_F1SFwh1tnRWKlpCHRyf9a_ae9BRkbGU7qwU31GxhORzVpCESndWiu-oAiEz93m7m-OsCM25u6WzUtFqNAQXKx9Qjl1TvvfURmZbQmcFmW4JnRVkDUnorIhLA8Jq6yZrpdoCZgo1xDCrrRLUkIoEJN17N8MSyjFvyn9vUtHRlJ3wwnuGhkVUutNS_IqriEhYcpXbajGRgKR7-WZYQjkOzh60VXQ0ZSe8-LaKRVS63VJ8WxURCYvJqed5pucYLmKPFtZdJXdcBHdrAyEJJ2SwRZRj5OyBK4VNuISmCzbhErouYhXlT6GUTah410Usonq2Jf0whAQk3Us4wxKScGQGjWifR6Q0bDQSui4ionrAJUWoiwQk3Us4wxKScG4GjWif56Q0bDQSui4iovwpF5Y35iL26HrOJe26iCbX1oMuFUXUxhaRhOMz2CrKsXLKN6Y62IRL6LoICVfrWZe06yIUkbrfsy7Fj7MiAZXtuhS_KIslJKHrgkYkXRVpWEQ5Vk75b1C6GM1-z7oU3laFf9-7AVDZrkvxbRVLSELXBY1IuirSsIhyrJw9aKtiNPmzLmrerIvYo-tZl3SPFkyuDYQkdF2wRSSh64KtIgkHaLBVlGPl7IExJSa8nnVJuy7644VCr71gfuk61KKmxrRrw241um1Db-imwxo2tNsN49oxul0wO0by_8tee_YootYDPb0J5gmts_spRNS6tr0IFHpsj-ELcAgnru9G3B1Si4czeHz8x18BAAD__yZhrvs=

# This query verifies stats collection for the hashJoiner, distinct and sorter.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT DISTINCT(kw.w) FROM kv JOIN kw ON kv.k = kw.w ORDER BY kw.w
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• sort
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│ order: +w
│
└── • distinct
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ estimated max memory allocated: 0 B
    │ estimated max sql temp disk usage: 0 B
    │ distinct on: w
    │
    └── • hash join
        │ nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 5
        │ estimated max memory allocated: 0 B
        │ estimated max sql temp disk usage: 0 B
        │ equality: (k) = (w)
        │ left cols are key
        │
        ├── • scan
        │     nodes: <hidden>
        │     regions: <hidden>
        │     actual row count: 5
        │     KV time: 0µs
        │     KV contention time: 0µs
        │     KV rows decoded: 5
        │     KV pairs read: 10
        │     KV bytes read: 40 B
        │     KV gRPC calls: 5
        │     estimated max memory allocated: 0 B
        │     missing stats
        │     table: kv@kv_pkey
        │     spans: FULL SCAN
        │
        └── • scan
              nodes: <hidden>
              regions: <hidden>
              actual row count: 5
              KV time: 0µs
              KV contention time: 0µs
              KV rows decoded: 5
              KV pairs read: 10
              KV bytes read: 40 B
              KV gRPC calls: 5
              estimated max memory allocated: 0 B
              missing stats
              table: kw@kw_pkey
              spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm-9um0gXxr-_VzGaT61eXHv4Z4xUKWrS1aa7TaokqrRaRRWBSYKMwYVxnGyUy9ob2CtbgeU45oRxju0F5PG32GDC-Z0z5xmeGR5p9jOiLj3__PvnwwtydHx-cXxyeEHeDacfpu_JL2enX8nwjnw5PT4hwyk5PSHDuw9D8pHkx8np2dHnM_Lpj-IT1WicBPzEG_GMun9SRjWqU40aVKMm1ahFLzU6ThOfZ1mS5qc8Fj84Du6p29NoGI8nIv_6UqN-knLqPlIRiohTl154VxE_417A026PajTgwguj4t8M7w6Gdz_GQ_5ANXqYRJNRnLlkSDV6PvbyPzvd_C5--05EOOIu6f3zdzb77Cex4LEIkxgcSpNpRgLuJwEPXMJmX149CJ6RlHuBSxzyafblzdm3Q-J7UZQ9nzf2wnR-Xv6vv34_PCSZ4GPiJ5NYkHf8XnTDWLx3Sa-IZnYC58OqE0bePRnxUZI-EC-KEt8T-W31inu48oR_yzOSTMR4IlySn1_c_vwLRi-fNDr7NKM-p3r1QG697HaZ50F-_qVGM-HdcOqyFzk7PqJu70lbL212KW3Tg-EUpG26SFuX7RO3SeL0UuLsysQtrjuJkzTgKQ-WrnyZ_3LVKa9k_1cvu_2ShDFPu6w0aCN-Ld4dsPcf0_DmtviLavQ0D_ogB8_vuT-B-ZXRzI9lPyMi-GhMgjAbkknm3fC1YS9AGiWQDDUEjsJMhLEvuswC6WpFoLiqMsswrA3KSoZL77UT1wKFVUKho-riPEkFT7s6qIr_ty1OuxznW1L-WsKL4F7N-knSScZdo5TyCgorQ7EqQ-mXQjGWU8bermYMOQnp6p2usVezrU1D2LqJ62OnIfvEbXUa0q9MXB3TELZD0xDUEFhMQ-x26uqG0xB7g7KSTkNYO3FJpiGouphPQ0BVtH8aspxy_e0SoGO12-h0zb0EbE279XUT52C1e5-4rWq3U5m4OrRb3yHtRg2BhXb32ylGG2p3f4Oykmq33k5cEu1G1cVcu0FVtF-7l1NuvF0CDKx2m52utZeArWm3sW7iBljt3iduq9o9qExcHdpt7JB2o4bAQruddorRhtrtbFBWUu022olLot2ouphrN6iK9mv3csrNt0uAidVuq7MXgK0pt7lu2iykcne6jHhxQBhJxC1P9yncmoZblSmsQ8PNHdJw1GBYaPignaK0oYYPNigrqYab7cQl0XBUXcw1HFRF-zV8gNmqcMazcRJnvNxRXv1XvdK_6rC8Rnhww2cFlSWT1Off0sQvzp19PC0uVGhWwDMxO6rPPhzH80OZ8IRsY8B_ybZHixBT7o2ed8G9PZRBZSgxF9MkHZLIEzz2H55jmX8_9UKxHGXAM56GXhT-5UEE858V955yn4d3BYMXh-ZK-nysADA_OuJZzqX8YywfhgTErIYJMQkhZyuE2DIhHUlIZ6rVkIEl1FeNkAkIMURH1VvVUW1cKIPKUHY01wwJqNRR6ydUf0dFEip1VAVqyMAS6qtGyASE9DKh3ktCxhKg3stLWaA5G1LYZpumu6WhZVm4WJhykxUbmW2m3GTFRtaQbqhGqI-sIV25x8o-qCFT2p6t6vbsANiW9FI2ZP18KXBXtlw0GLyt1szDAZb-mibNjpYgw_GpHqLNp5ohY2ncpKk92TqSkIImDZZQ0_Oe2h9LTUDIWdOk2dES6uP4VDs_LeioyFgaN2nq76hIQgqaNFhCTZs09XdUQGggnW-znsSlAd2ZyVcZqm2aHa1HC5qGK9byqidBzTtZNjbfCho12IQr6NRgq0hBqwZWEVhsWO7SusSsgbzlvvwrbs1ua6IDca8wD1UrSB0JSLkRy7CEJH5Q849iOjaaxr2b2nuGgUak3FzIhIjAioPa7o2DBKTexh0sIYkp1IK2io2mcQOn_raKRtS0g1N_W4WI5KuvzJZYOLBHg_VXxS0cYJitIKTg_h1sEUl8oRa4XNiEK2jhYBOuoIUDqwgs7i53aUdi4UDeYF1DcQsH4gbrGmpbOAYSUNMjtvYSYlhCCm7pwSKS-ELNP44Z6GjUs3AAIh3z3qkCT2MDJKCmLZz62yqWkIL7erCIJL5QC9oqOhr1LByISL6-q0vWdy3Yo8H6ruIWDnDMVhBS0MLBFpGCW3uwVSTxhZp3ufrYhCto4cCEgyXe5S5tSiwcyFv--pV6Fg7EDdY1WmXh1L93FwlIuRHLsIQUtHCwiBrf2lO_U4pG1KrlrPKzBoxmxVqNag4FeAN5BaCmLZz62yqWkIIWDhZR41t76m-raETVvlAL2iqMRr6-q0vWdy3Yo-Xvraln4UDHbMXbocpNW2xsESlo4WCrSMGtPdgqkvhCLXC5YMLlr7saktddHYDGAAsbils4g6dLjV5HyfRHGFCXMsvrXTmO1Rn0Hadj6nav4-lXRmfg2Nfcv7J8vX9N8x94Nxl1H-n5bTItaF08jHlG3WsvyrhGv3pDfsQFT0dhHGYi9Kkr0gl_evrfvwEAAP__pUaypA==

# This query verifies stats collection for WITH ORDINALITY and the hashJoiner.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv WITH ORDINALITY AS a, kv WITH ORDINALITY AS b
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• cross join
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 25
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│
├── • ordinality
│   │ nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 5
│   │
│   └── • scan
│         nodes: <hidden>
│         regions: <hidden>
│         actual row count: 5
│         KV time: 0µs
│         KV contention time: 0µs
│         KV rows decoded: 5
│         KV pairs read: 10
│         KV bytes read: 40 B
│         KV gRPC calls: 5
│         estimated max memory allocated: 0 B
│         missing stats
│         table: kv@kv_pkey
│         spans: FULL SCAN
│
└── • ordinality
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV rows decoded: 5
          KV pairs read: 10
          KV bytes read: 40 B
          KV gRPC calls: 5
          estimated max memory allocated: 0 B
          missing stats
          table: kv@kv_pkey
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsVF1v2koQfb-_YjRP914tAhvDzd0nUpIqtEmIAKWqKhQt3oGs_LHO7pqAIn5W_0B_WWXcJOAEmvTjrY8zc3z2zDkj36G9iZHj8Pj0uDuCf-HtoH8G0Rw-9EYn0B8c9c4PT3ujj3A4BMF2DCbIMNWSzkVCFvkn9HDMMDM6JGu1KVp3a0BPLpA3GKo0y13RHjMMtSHkd-iUiwk5jsQkpgEJSabeQIaSnFDxmjaad6L5VRbREhl2dZwnqeUQMZgjw2EmiqqGDN9fglMJcWh8-WzLOtSpo9QpnT4ZGX1rQVKoJUkOrbI5WTqyYEhIDkED3pTd2eCiC6GIY_sAzIQy90Cv0Ht22e2CdZRBqPPUwd-0cHWVun84NOqPAKJoFyARC0go0WYJIo51KFwhrBQxES68Jgs6d1nuOBT49QL3jRaOVwzL6pvD1okZIfc2IukdIW-s2MtT6RupUhErt6x726HQgsL8qbE_IdSvCPVeI3TzfPw_5_PrzqdZScX_wfNp_u7zCSpCmzuFPurLU20kGZJb4sbFl9-DPLPtibDX77RKydSD7W37hfSOxzo-6zRZJ2CdFuu0ke2yYV-WxczexOAoyUAqG0FuxYxeHLW_28JWxcLgNVkPyGY6tVS18tmXGpWXal5hKMkZlQFZnZuQLowO19iy7K-J1g1J1pVTryx66f3IOkMiefjTbTJ5e5mCLSZvk8mvMvl7mZq7NXlVpuYrNPmbTM0qU7CXqbXPpzHDaaxvr5REjgci-K_tHfi1aSuUtcAT7dpkKoKaF7R9_0BM_w-kwOIDMbPFAQyv9e2adrTMivimIrbE8ExEdESOTKJSZZ0KkTuT02r119cAAAD__4T6v74=

# Verify that EXPLAIN ANALYZE on an unsupported query doesn't return an error.
statement ok
EXPLAIN ANALYZE (DISTSQL) SHOW QUERIES;

statement ok
EXPLAIN ANALYZE (DISTSQL) EXPLAIN SELECT 1

# This query verifies support for zeroNode in DistSQL.
query T
EXPLAIN (DISTSQL) SELECT sum(k) FROM kv WHERE FALSE
----
distribution: local
vectorized: true
·
• group (scalar)
│ estimated row count: 1
│
└── • norows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkl2r0zAYx-_9FOG56iDlNFXOOfTK6SoW9uY6X0CKZMmzrvQlNUmdMvrdpaluKjh2Lp-X_H48f3IC87WCCOJP6_k0WRJvlqTb9N18QtJ4Hr_eEtPVXjkhbzarBSm_kY9v401M9rwyCBQaJXHJazQQfQYGGYVWK4HGKD20Tm4hkd8hCigUTdvZoZ1REEojRCewha0QIvjAqw7NXQAUJFpeVI4YkFfEC4g4dE1pJpD1FFRnLxRjeY6OfdYmM4iCnt5unua5xpxbpe_Y3_b0_cJ7yf6vZf9o2VO0GzStalyIF-WtB_qszyigzHFM2ahOC1xrJdzuWK4cyDUkGjtO2Vgkze-RsRp5fU7tTxK7SgqvkTIK-0odvxQSIkDB9-Je3PuBlDv_BbJHf8dC5j-ED4-SY7hj_DkMD3huhojSgzo67PZHOxzoPhuFBS9xhhZ1XTSFsYX4Nen7Zz8DAAD___rg5SM=

# This query verifies stat collection for the tableReader and windower.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT avg(k) OVER () FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 5 (40 B, 10 KVs, 5 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• window
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows decoded: 5
      KV pairs read: 10
      KV bytes read: 40 B
      KV gRPC calls: 5
      estimated max memory allocated: 0 B
      missing stats
      table: kv@kv_pkey
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzslstu6zYQhvd9CmJWNiDBujmOtUrrpEXQpg6cwF0URkCJE4fQhQpJ-dLAj9UX6JMVlI5yLCfOkffemTNDzvj_fpB6A_WaQggPN3_cTB4JXS17SZ9M5zcz0uuTX2fTO5KswIJcMPyTZqgg_BtcsMADC3ywIAALhrCwoJAiRqWENCVv1YZbtoHQsYDnRalNeGFBLCRC-Aaa6xQhhEcapThDylAOHLCAoaY8rdokq6tk9VQkuAULJiIts1yFJAELHgpqftoDM8Xvc6J5hiFx_vtX1etY5BpzzUX-ISXFWhGGsWDIQuLWwWirURGJlIXkkvxSB5ez-wmJaZqq97qCctnUmdZ388mEKI0FiUWZa9LDjR7wXPdD4lT_pi5ATI4VZHRDMsyE3BKapiKm2ozlVDNEVMcvqIgodVHqkJj6avwm4MJiZ0G9-iav0nSJELp7PG6vIXR21hEk30mUuZAMJbIWhcXuE2h_8ZyJNcrBsE3s5_lvvSu3DxZMzXxXRiPcYFx-RPHVHzc59ZoSjVlBGFcJKRVdYmddhkd18Q50GbZ0cbtb1T3RqgPPHvhns3Yyq9uC4nWH4p0KxbcHwRlKJyheC4rfHYp_KpTArq6VM5QfQ_FbUILuUIJToQztM5JOSIKjL-0nSGaoCpErPHhxP-_kHHSyXfM0I1ti_Y4rUcoY76WIq9p6Oa0OqgIMla6zbr24zauUazpIpNn7h8L-Se6XJ120TnK-PMk7dSZaCQA56rWQCUmpxjzevlusia8p123zMVQoOU35P_SjM5ttFV-JMfJV488m1Zi0ydVGbbIZKvM1sl_gdPTQvj7uoT7-WZ99fbxDfYKzPvv6-If6DM_67OsTmNvxORXrJ84ghHh8ydyL4MKOxs-eHUReZI8vXc9mo3HkRWw0CkZjMBvoUpkr-uFFrCuxHreFuWCfaarQgjua4DVqlBnPudI8hlDLEne7n_4PAAD___fW_pY=

# Very simple query to make it easier to spot regressions when rewriting results
# in test files.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT k FROM kv WHERE k = 0
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• scan
  nodes: <hidden>
  regions: <hidden>
  actual row count: 0
  KV time: 0µs
  KV contention time: 0µs
  KV rows decoded: 0
  KV bytes read: 0 B
  KV gRPC calls: 0
  estimated max memory allocated: 0 B
  missing stats
  table: kv@kv_pkey
  spans: [/0 - /0]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyMUu2KEzEU_e9TXO4vhZSdqRXXgCB2Kxatu7Rl_SFlySS33WEyyZjc6Qelj-UL-GQyk7V-seC_nHPPPfckN0eMXy1KXEw-TsZLqODd_HoG1RY-v5_MJ1DBa8hQoPOGPqmaIsovmONKYBO8phh96KhjL5iaPcpMYOmaljt6JVD7QCiPyCVbQolLVViakzIULjpjQ6xK29tW2zfV9q6p6IACx962tYsSKhS4aFR3vMj6lg-3wGVNErLv32LC2jsmx6V3_5SC30UwpL0hI-GhvzgwRQikOgreJnIzvxmDVtbGs65RZTjrUODsdjyGyNSA9q1jeEp7vigdP5OQsiUBUfWYoFZ7qKn24QDKWq8V0zlDoVjfUwTfctNymtjH_0WsTgITenjfyGpDKPPfFjK9QpmdxP_vZE6x8S7SH-t4bFL216RBfloJJLOh9BGib4Omm-B1r03wujfqCUORUzVPYOp-liIHUnWKvxK4tn53VxqU-DwfKRqui8HL4nI4GBmjBq-G68tBoc1lluUjMxy9wK5BbWJ3scW93_W2y0PTxVorG0ngTFV0RUyhLl0ZudQoObR0Oj35EQAA___txPca

# Test a query that has a subquery and a postquery.
statement ok
CREATE TABLE parent (p INT PRIMARY KEY);
INSERT INTO parent VALUES (1), (2);
CREATE TABLE child (c INT PRIMARY KEY, p INT REFERENCES parent(p))

query T
EXPLAIN ANALYZE (DISTSQL) INSERT INTO child VALUES (1, (SELECT min(p) FROM parent))
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 2 (16 B, 4 KVs, 2 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• root
│
├── • insert
│   │ nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 1
│   │ into: child(c, p)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 2 columns, 1 row
│
├── • subquery
│   │ id: @S1
│   │ original sql: (SELECT min(p) FROM parent)
│   │ exec mode: one row
│   │
│   └── • group (scalar)
│       │ nodes: <hidden>
│       │ regions: <hidden>
│       │ actual row count: 1
│       │
│       └── • scan
│             nodes: <hidden>
│             regions: <hidden>
│             actual row count: 1
│             KV time: 0µs
│             KV contention time: 0µs
│             KV rows decoded: 1
│             KV pairs read: 2
│             KV bytes read: 8 B
│             KV gRPC calls: 1
│             estimated max memory allocated: 0 B
│             missing stats
│             table: parent@parent_pkey
│             spans: LIMITED SCAN
│             limit: 1
│
└── • constraint-check
    │
    └── • error if rows
        │ nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 0
        │
        └── • lookup join (anti)
            │ nodes: <hidden>
            │ regions: <hidden>
            │ actual row count: 0
            │ KV time: 0µs
            │ KV contention time: 0µs
            │ KV rows decoded: 1
            │ KV pairs read: 2
            │ KV bytes read: 8 B
            │ KV gRPC calls: 1
            │ estimated max memory allocated: 0 B
            │ table: parent@parent_pkey
            │ equality: (column2) = (p)
            │ equality cols are key
            │
            └── • filter
                │ nodes: <hidden>
                │ regions: <hidden>
                │ actual row count: 1
                │ estimated row count: 1
                │ filter: column2 IS NOT NULL
                │
                └── • scan buffer
                      nodes: <hidden>
                      regions: <hidden>
                      actual row count: 1
                      estimated row count: 1
                      label: buffer 1
·
Diagram 1 (subquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJysU91u4joQvj9PYc0VSEYk0F9ftYdyJFQKFVCkoyOEjD2kFomdYzsLbMVj7Qvsk62SbLqkVbtb7V4lnhl__ub7Zp7A_R8Dg8Fo2p_MyGA0GxPxqGJJ5tfDh_6UNEJKGtP-sN-bkUTpRtok_0zGdyTlFrVvNoGCNhJHPEEH7D8IgcIpLCik1gh0ztg8_FQUDeQOWEBB6TTzeXhBQRiLwJ7AKx8jMBiZlknbHaAg0XMVF6C4Q5F5ZTTxKkFGgq9fHFBYcS8e0RGT-TTzjARAwZrtj0AIiwOF8vT9Ped5hMC6RwQHN8A6B3rEMXyf44yvYpwgl2jbQZ1pKctV-VmmG9wDhZ6Js0Q7RlKgME15_tsCCkOVKE9yxW7n9c5u50QY7VG_bvp2TooeJQojUbLq_mrv0RGLXDJyQf4ug9HkvkcEj2P3XJdyZau6XOa7ea9HnMeUCJNpTxq4822lfZORoOiuLEDcvFWQ8B1JMDF2T3gcG8F9TisoOPyGReELi4KPWHQdRRYj7o1th3WHrkf_Lkfj2XL0MBw2rsJ8gP_8eHVecA9r3H-yAhN0qdEOa7zfeil48VIrPCwooIyw3DtnMivw3hpR1JbHcQFUBCQ6X2a75WGgq5TzFnnyLP0xUvguUucDSJ13kYLXSLwQADT6rbEbEnOPWuyfTaviW6583U6JDq3isfrMX3tdXSv8tShQfap2q0pVC1blyiWrsgk6x6NaQfCLM3SsT-HeOjbbpZLAQMp12OmeyRa_kOvWiVh1W5fByUmre7nqnp9frM_W4SnkF3jk8hGaPpptIdZsn-YDsOaxQwp3fIM36NEmSivnlQDmbYaHw1_fAgAA__8yXfdw
Diagram 2 (main-query): https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkN2O0zAQhe95CmuuWskRNoQt-A6xRYq026I2cIMi5DiT1sKxgz1RF1V5LF6AJ0NJQPxISHt5zsyc89lXSF8cKCh2x-2hZMWu3DNztq5hH17fvd8e2Upytjpu77ZvStZZv-rX7O1hf896HdHTeg0cfGhwpztMoD6ChIpDH4PBlEKcrOu8UDQPoAQH6_uBJrviYEJEUFcgSw5BgQtGO2bC4ImJpwI4NEjaujkYH9AMZINnZDtUTHz_loBDrcmcMbEwUD-QYtNVDJffhoRq5LCon72J9AlByT9Ai1tQYuSPZz1g6oNP-Bfk_5rEP02ZHCsO2Jxw-aAUhmjwXQxm3l3kfg6ajQYTLVO5iML_GiWKqLsFv-LQunD5ZBtQIDe5FOLZTWZQYJa_0iarJeZZe5NvNnVev3j-soXpQJ_S9LDjOVzm2PJrP2G12iXkcK8_4y0Sxs56m8gaUBQHHMcnPwIAAP__7ZK5XA==
Diagram 3 (postquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJy0lMFu4jwQx-_fU4zmBJIRSUAt9an9KJXSUqiAclmhyiQD9ZLYWdtRQRWPtS-wT7ZK0nYLFex2pT1FM_777994Jn5G-y1BjuFg3BtNIBxMhhA9yiSG6UX_vjeGms-gNu71e90JpFLVsjpcjYa3kAlDytXryFDpmAYiJYv8C_o4Y5gZHZG12hSp51IQxmvkHkOpstwV6RnDSBtC_oxOuoSQY6IjkYCNhIJ5vliQAa_pIcOYnJBJaT_MHYfzABnSmqLcSa3AyZQ4eD--W2Q4Fy56JAs6d1mhLfYb_fQr4eNsy7CKXjisE0tC7r8DDy-Re1v25-xXMnFkyDT9XeAqz-Hch3AMg-EEBvf9_j_hD_b4_c_wX2upRiRiMs1gt4LJJiMO_d7VBC4GkxCuh-EAGVYDcF59HrIVbZBhX-tVnsFXLRVoVVSNDLs6yVNlOWT4wgBFRUUpr7F1Ikl2L-Jm-iGOtHKkPt7ZzbQ0hJgiHVNcGd9MYb5xZMGQiDl04P8quRzddSESSWLfdJmQ5lVXFH877XbBOsog0rlyUKO1a0rl6vxlICsB0eqQ4EBzU7GGlFJtNiCSYtpdQeuVaL9tvHew8a29xgefaXz105Ex2oBcVBfpN1u7M_C3w3qYub3H3PoM84hsppWlHchDJ3l7JzX87YwhxUuqXiercxPRndFRqa3CYWlUJmKyrlr1qyBUr0vWGRLp21vx3sk_6hQcdvL3nYKjTq3DTsG-U-uoU_tYdTOGi0Q_PcgYObbnp-2TUxINWnjzRjv2RKPTPus0OidnfnshWkE8P8Fig1jaom3jR_1U2hZPiUW-EIklhrdiRZfkyKRSSetkhNyZnLbb_34GAAD__88rJhQ=
