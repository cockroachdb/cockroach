# LogicTest: 5node

# These tests are different from explain_analyze because they require manual
# data placement.

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT, FAMILY (k, v))

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i);

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT, FAMILY (k, w))

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify that EXPLAIN ANALYZE (DISTSQL) annotates plans with collected
# statistics.

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv WITH DETAILS]
ORDER BY 1
----
start_key           end_key                 replicas  lease_holder
<before:/Table/66>  …/1/1                   {1}       1
…/1/1               …/1/2                   {1}       1
…/1/2               …/1/3                   {2}       2
…/1/3               …/1/4                   {3}       3
…/1/4               …/1/5                   {4}       4
…/1/5               <after:/Table/107/1/1>  {5}       5

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw WITH DETAILS]
----
start_key                end_key       replicas  lease_holder
<before:/Table/106/1/5>  …/1/1         {5}       5
…/1/1                    …/1/2         {1}       1
…/1/2                    …/1/3         {2}       2
…/1/3                    …/1/4         {3}       3
…/1/4                    …/1/5         {4}       4
…/1/5                    <after:/Max>  {5}       5

# This query verifies stat collection for the tableReader, mergeJoiner, and
# aggregator.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT kv.k, avg(kw.k) FROM kv JOIN kw ON kv.k=kw.k GROUP BY kv.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• group (streaming)
│ sql nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ group by: k
│ ordered: +k
│
└── • merge join
    │ sql nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ estimated max memory allocated: 0 B
    │ estimated max sql temp disk usage: 0 B
    │ equality: (k) = (k)
    │ left cols are key
    │ right cols are key
    │
    ├── • scan
    │     sql nodes: <hidden>
    │     kv nodes: <hidden>
    │     regions: <hidden>
    │     actual row count: 5
    │     KV time: 0µs
    │     KV contention time: 0µs
    │     KV rows decoded: 5
    │     KV pairs read: 10
    │     KV bytes read: 40 B
    │     KV gRPC calls: 5
    │     estimated max memory allocated: 0 B
    │     missing stats
    │     table: kv@kv_pkey
    │     spans: FULL SCAN
    │
    └── • scan
          sql nodes: <hidden>
          kv nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV rows decoded: 5
          KV pairs read: 10
          KV bytes read: 40 B
          KV gRPC calls: 5
          estimated max memory allocated: 0 B
          missing stats
          table: kw@kw_pkey
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm-9um0wWxr_vVYzmU6oX154BbAepktu0u0q3sav8qVStooiYUwcZgwvjONkol7U3sFf2ClwnholxjpOAxZAPlTEYc37ncB7zzOkdjX571KInX759OTgl4-v3Y43Y16O98fz9-B355_HgiIyvydfBYZ-M52TQTw4hH0i8n_zreHD2nXz6mbxJNeoHDvTtCUTU-g9lVKOcalSnGjWoRk16rtFpGAwhioIwPuQu-cChc0OtlkZdfzoT8dvnGh0GIVDrjgpXeEAtempfenAMtgNhs0U16oCwXS_5mvF1b3x9MR3DLdXoQeDNJn5kkfhqTqZ2_LLRjK_i3z9I_GWRRXy22BTuBCzS-v__osX2MPAF-MINfGlXGMwj4sAwcMCxyJ_PX94KiEgItmORLvm0eHN0_P2ADG3Pix6Om9puuDwuvpKjHwcHJBIwJcNg5guyBzei6frinUVaSXCLAwDG6w6Y2DdkApMgvCW25wVDW8SX1Uqu4dIWwyuISDAT05mwSHx8cvnLNxg9v9foYmuRhCXky1tyZUdXaby9-PhzjUbCHgG12EoKDz9Tq3WvbZfFdiaL8954npfFJqvz-Ip55Jk8ttfm8fG8QehACE72vH_FF_Kso54oiSMIR_A1cH0ImyxzZ3vwS-z12F_vPoTu6Grxkmp0EEffY1ovTgLcwHAm5zqPbLwv-u0RAZMpcdxoTGaRPYKtwT9C1TNQGeru-DgahTCyRRA2mSklT6ODBdg4dqrRj_2fF_3B6UX_7Nu3vR6LwZycHe31ePzqYHDWP_3zeg2hN64vI4vCfFmB5fPirZfxOjk7ujiMienx1jH4DoRJjZEeb_b0V6T4SMjMEOLri-Ux5pn_FKMn8fSDRjBt8kwlbRuHuTaOdjaOdKbZ8yWBIYW9yRtNPS0JvJaEV5N2tm0eO1hpr_P4ltLeWZvHAqWdVU3aUXfHqrS3Kyft7ZcV2AZpZxWQ9nSx8Oe3Uo6VRL3RNNKtVK9b6atJIt82j12sJNZ5fEtJ7K7NY4GSyKsmiai7Y1USO5WTxM7LCmyDJPIKSGK6WPTnt1IdK4lGo2mmW6lRt9JXk0R92zzuYyWxzuNbSuL-2jwWKIl61SQRdXesSmK3cpLYfVmBbZBEvQKSmC4W4_mt1MBKotlIN1KzbqSvJojGtlk0kYLYaDJi-w5hJBBXENYZfStpNNdmtEBpNKomjaj7ZFUa9ysnjfsvK7AN0mhUQBoNzEL6MUTTwI8gs0b69Fe1Ml_VYDFPcEaw4B8Fs3AI38NgmBy72BwkJ0p6vwORWOzli41Df7krErbIW3R9yxuxRZMQQ7AnD2M6zw-luzYUH8Q8CMfEswX4w9uHWJbvz21XpKN0IILQtT33v7aMYPmx5NpDGIJ7nTBY2bWUoId9CYDl3glEMZfsh7F8GBIQ00smxHIIdV-FEEsT4lhCytWQjiTEy66hwgkZEiGG6Kh8pzpqGxdKd20oFc01QwLKdNTiCRXfUbGElKshHUmIl11DxXdUiRDPEmqtEkoDaq2eypSas54L29iln7uZW8s0cbGwlmpS3EZmm5nKEULWEFeuhjrIGuLK1VBHqiEjtz0_AWh5qq4E28w9FW_LrX5nfjxLsbS3dFYqWjcMx2f9o3b5qWbIWEp3VgpPNscSUs9ZQRIq3Vkp_FnSkAh1tnRWKlpCHRyf9Y_aO9BRkbGU7qwU31GxhNRzVpCESndWiu-oEqFu7u_t_RxnRWrO-1s6KxWtRlNysfIB5dg15XtPbWS2FXRWkOlW0FlB1pCCzoq8NCCttm6yVqotYF2phhhmtVWBGuJIQMo9dzMsoRzzpvznJo6OpuyEF94zdCyi0p2W4ldcZUTSkqvaVksXCUi5h2-GJZTj4OxAW0VHU3bCi2-rWESl2y3Ft1UZkbSYnPo9z4wcw0Xu0dK6q-KOi-RubSCk4IQMtohyjJwdcKWwCVfQdMEmXEHXRa6i_CmUsgkV77rIRVTPtqR_DCEBKfcQzrCEFByZQSPa5REpHRuNgq6LjKgecEkR2kcCUu4hnGEJKTg3g0a0y3NSOjYaBV0XGVH-lAvLG3ORe3Q955J2XWSTa-tBl4oiamOLSMHxGWwV5Vg55RtTHWzCFXRdpITzetYl7bpIRcR3e9al-HFWJKCyXZfiF2WxhBR0XdCIlKsiHYsox8op_wnKkKPZ7VmXwtuq9P97NwAq23Upvq1iCSnouqARKVdFOhZRjpWzA21VjiZ_1oXnzbrIPbqedUn3aMnk2kBIQdcFW0QKui7YKlJwgAZbRTlWzg4YU3LC61mXtOti3J9r9JcXzC9ch1q09eev8cQ_yz8af8AeRdS6oydXwTyhdXo7hYhav2wvAo0e2WP4DALCieu7kXCH1BLhDO7v__F3AAAA__-V5teS

# This query verifies stats collection for the hashJoiner, distinct and sorter.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT DISTINCT(kw.w) FROM kv JOIN kw ON kv.k = kw.w ORDER BY kw.w
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• sort
│ sql nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│ order: +w
│
└── • distinct
    │ sql nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ estimated max memory allocated: 0 B
    │ estimated max sql temp disk usage: 0 B
    │ distinct on: w
    │
    └── • hash join
        │ sql nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 5
        │ estimated max memory allocated: 0 B
        │ estimated max sql temp disk usage: 0 B
        │ equality: (k) = (w)
        │ left cols are key
        │
        ├── • scan
        │     sql nodes: <hidden>
        │     kv nodes: <hidden>
        │     regions: <hidden>
        │     actual row count: 5
        │     KV time: 0µs
        │     KV contention time: 0µs
        │     KV rows decoded: 5
        │     KV pairs read: 10
        │     KV bytes read: 40 B
        │     KV gRPC calls: 5
        │     estimated max memory allocated: 0 B
        │     missing stats
        │     table: kv@kv_pkey
        │     spans: FULL SCAN
        │
        └── • scan
              sql nodes: <hidden>
              kv nodes: <hidden>
              regions: <hidden>
              actual row count: 5
              KV time: 0µs
              KV contention time: 0µs
              KV rows decoded: 5
              KV pairs read: 10
              KV bytes read: 40 B
              KV gRPC calls: 5
              estimated max memory allocated: 0 B
              missing stats
              table: kw@kw_pkey
              spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm91O20gUx-_3KUZz1WqdJuOPfFiqhApdLd0tVIAqrVaoMvEUrDh26pkQWMRj7Qvsk63sNAT74AknAdvKpBcViT_i8zvH5z_-z_iOih8hdenpxz8_7p-Rg8PTs8Oj_TPyZjR7N3tLfjs5_kxG1-TT8eERGc3I8REZXb8bkfck3U6OTw4-npAPf2WfqEGj2OdH3pgL6v5NGTWoSQ1qUYPa1KAOPTfoJImHXIg4SXe5yw449G-o2zFoEE2mMv363KDDOOHUvaMykCGnLj3zLkJ-wj2fJ-0ONajPpReE2c-MrvdG198mI35LDbofh9NxJFwyogY9nXjpn612ehV_fCXpjwmXRGz-UQZj7pLOf_-K-edhHEkeySCOwKYkngni82Hsc98lP4-_uJVckIR7vkv65MP8y8uTL_tk6IWheNhv4gXJYr_0Sj5_3d8nQvIJGcbTSJI3_Ea2g0i-dUknC26-A-ejsh3G3g0Z83Gc3BIvDOOhJ9PL6mTXcOHJ4RUXJJ7KyVS6JN0_u_zFF4ye3xt0_mmehAXki1ty5YmrPN69dP9zgwrpXXLqskcpPDygbufeWC-L3UIWZ3ujGcjibJnFNtvl8QXzaBby2C3N4_K80yhOfJ5wP3fm8_TIVbs8UQy_e-LqUxxEPGmzwi0d8u_yzR57-z4JLq-yv6hBj9Og91Lw_IYPpzC_KprpNvEjJJKPJ8QPxIhMhXfJ14a9BGkVQDLUHXEQCBlEQ9lmDkhXIwLFVZVdhOFsUFYqXGanmbiWKJwCChNVF6dxInnSNkFV_Nq0OLvFOJ-T8qcSngX3ZNaP4lY8aVuFlJdQWBmKUxpKrxCKlU8Ze764MeQQpW222lZe3MyduL3YIIWtm8cedpCyy-NrDlJ6pXmsYpDCtmiQgrojloOUbjNVd8NBSneDslIOUlgzcSkGKai6WAxSQFU0f5CST7n5fEUwscputdp2XhGsnSK8mLKb6-axj1X2XR5fU9n7pXmsQtnNLVJ21B2xVPZeM6VqQ2XvbVBWSmU3m4lLoeyoulgoO6iK5it7PuXW8xXBwiq73Wo7eUWwd4rwYspurZvHAVbZd3l8TWUflOaxCmW3tkjZUXfEUtn7zZSqDZW9v0FZKZXdaiYuhbKj6mKh7KAqmq_s-ZTbz1cEG6vsTiuvB85OD15M1-11s-ggdb3VZsSLfMJILK94ssvoaym8U5rRKhTe3iKFR90bS4UfNFOyNlT4wQZlpVR4u5m4FAqPqouFwoOqaL7CDzBLJE64mMSR4MWO8uRPdQo_1WJpjXD_ks8LSsTTZMi_JPEw23f-8Tg7USZhPhdyvtWcfziMFpuE9KRqQcJrsu3QLMSEe-OHxXjPD2VQGkrE5SxORiT0JI-Gtw-xLL6feYHMR-lzwZPAC4N_PIhgcVh27Qkf8uA6Y_Bo00JJH7ZlABZbx1ykXIoHY_kwJCDm1EyIKQj1X4QQyxMykYRMplsNWVhCPd0I2YAQQ3RUs1EdtYsLZVAaypbmmiEBFTpq9YSq76hIQoWOqkENWVhCPd0I2YCQWSTUeUzIygHqPD6VA5qzpYRtN2m4W7i1HAcXC9NusNJFZptpN1jpImvItHQj1EPWkKndY2UP1JCtbM9OeXvuA9iO8lRdyPrhVOCqumrRYPCyGjMOB1h6a5o0W1qCDMen_BatP9UMGUvtJk3lyTaRhDQ0abCE6h73VP5YagNC_TVNmi0toR6OT7nz04COioyldpOm-o6KJKShSYMlVLdJU31HBYQGyvE26yhcGtCdmXqWodym2dJ6dKBpuGIur3wQVL-T1cXmW0OjBptwDZ0abBVpaNXAKgKTDfkubSrMGshb7cs_4dZstyb2Ie4V5qFuBWkiAWl3xzIsIYUfVP-jmImNpnbvpvKeYaERaTcWsiEiMOOgt3vTRwLSb-EOlpDCFGpAW8VGU7uBU31bRSOq28Gpvq1CROrZV9ZVWDiwR4P5V80tHGCYrSCk4fodbBEpfKEGuFzYhGto4WATrqGFA6sITO7mu3RfYeFA3mBeQ3MLB-IG8xp6WzgWElDdd2zlJcSwhDRc0oNFpPCF6n8cs9DR6GfhAEQm5r1TDZ7GBkhAdVs41bdVLCEN1_VgESl8oQa0VXQ0-lk4EJF6ftdUzO86sEeD-V3NLRzgmK0gpKGFgy0iDZf2YKtI4QvV73L1sAnX0MKBCQdTvPkubSssHMhb_fqVfhYOxA3mNRpl4VS_dhcJSLs7lmEJaWjhYBHVvrSneqcUjahR01nFZw0YzYq5Gt0cCvAG8gpAdVs41bdVLCENLRwsotqX9lTfVtGIyn2hBrRVGI16ftdUzO86sEer31vTz8KBjtmKt0O1G7Z0sUWkoYWDrSINl_Zgq0jhCzXA5YIJV7_uailed-0DNBaY2NDcwhncnxv0exjPvgU-dWnn57_WE_8t_tH0AO9SUPeOnl7Fs4zW2e2EC-p-90LBDfrZG_EDLnkyDqJAyGBIXZlM-f39L_8HAAD__0Uz2uY=

# This query verifies stats collection for WITH ORDINALITY and the hashJoiner.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv WITH ORDINALITY AS a, kv WITH ORDINALITY AS b
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 10 (80 B, 20 KVs, 10 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• cross join
│ sql nodes: <hidden>
│ regions: <hidden>
│ actual row count: 25
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│
├── • ordinality
│   │ sql nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 5
│   │
│   └── • scan
│         sql nodes: <hidden>
│         kv nodes: <hidden>
│         regions: <hidden>
│         actual row count: 5
│         KV time: 0µs
│         KV contention time: 0µs
│         KV rows decoded: 5
│         KV pairs read: 10
│         KV bytes read: 40 B
│         KV gRPC calls: 5
│         estimated max memory allocated: 0 B
│         missing stats
│         table: kv@kv_pkey
│         spans: FULL SCAN
│
└── • ordinality
    │ sql nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │
    └── • scan
          sql nodes: <hidden>
          kv nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV rows decoded: 5
          KV pairs read: 10
          KV bytes read: 40 B
          KV gRPC calls: 5
          estimated max memory allocated: 0 B
          missing stats
          table: kv@kv_pkey
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsVM1u2zgQvu9TDOa0u2Bg_XkPPDnrpIjbJA5sI0VRGAEtTRxCEqmQlGMj8GP1Bfpkhaw4sZXYTVq0p_IgYGY-fvxmvoHu0d5myHF4fHrcHcG_8G7QP4N0Bh97oxPoD45654envdEnOByCYDsKE2SodELnIieL_DP6OGZYGB2TtdpUqfsVoJfMkXsMpSpKV6XHDGNtCPk9OukyQo4jMcloQCIh0_KQYUJOyGxFm8466eyqSGmBDLs6K3NlOaQMZshwWIgqOkCGHy6hes1yUD4DFTBQIQMVMVDtuuxkThy8r19sHcdaOVJOavWsZPSdhYRinVDC4eH-ZOHIgiGRcIg8-L_OTgcXXYhFltlHYCGkWQP9qp2zy24XrKMCYl0qB3_T3LWkcv9w8FpPAKJ0FyAXc8gp12YBIst0LFwlrBYxES6-IQu6dEXpOFT4VQPrRBvHS4Z19GCAdWJKyP0Nx3pHyL0le71pfZNIJTLpFi1_2zOaU1w-H-xPCA0aQv23CN3cruDPdv227QobpgU_uF3hr96uqCE03Cn0SV-ptEnIULIlblzd_B7khW5PhL15r6Ui04q2u-1X0js-6wSsE7JOxDpt1vkP2a4x7POyqtnbDBzlBSTSplBaMaVXWx3sHmG7McLoLV4PyBZaWWqO8sWXvMZLB341UEqmVBtkdWliujA6XmHrsL8iWiUSsq6u-nXQU-uSdYZE_vgj3GTy9zJFW0z-JlPQZAr2MoW7NflNpvANmoJNprDJFO1lau-b05jhdabvrmSCHL2Hc_DCZ32wuiCmtlqA4Y2-W9GOFkVl37XILDE8EykdkSOTSyWtkzFyZ0paLv_6FgAA__8im8zw

# Verify that EXPLAIN ANALYZE on an unsupported query doesn't return an error.
statement ok
EXPLAIN ANALYZE (DISTSQL) SHOW QUERIES;

statement ok
EXPLAIN ANALYZE (DISTSQL) EXPLAIN SELECT 1

# This query verifies support for zeroNode in DistSQL.
query T
EXPLAIN (DISTSQL) SELECT sum(k) FROM kv WHERE FALSE
----
distribution: local
vectorized: true
·
• group (scalar)
│ estimated row count: 1
│
└── • norows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkltLwzAUx9_9FOE8dZCxxsc8OV3Fwm6u8wJSJLRnXeklNUmdMvrdpanbVHTMPBRyzunvx_mTLeiXHDh4j_Px0J8SZ-QHy-B23COBN_aulkTXhZP1yPViNiHZK3m48RYeWYlcI1AoZYxTUaAG_gQMQgqVkhFqLVVb2toBP34D7lJIy6o2bTmkEEmFwLdgUpMjcLgXeY164AKFGI1Ic0t0ySVxXBKt6zLTPQgbCrI2B4o2IkHL3mv9EXC3oaebh0miMBFGqgH7bg_uJs4F-1vLfmjZf7QL1JUsbYgH5akL9lkTUsA4wS5lLWsV4VzJyM5215kF2UKM2nRd1l38ctfSRqEo9ql9JbGjpPNjpJDCKpeb5zQGDu7n6f_y2R1ofxCJbiMK1nJjscv3ql3QPjYKE5HhCA2qIi1TbdIIuFE1Ns3ZRwAAAP___Pbhag==

# This query verifies stat collection for the tableReader and windower.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT avg(k) OVER () FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 5 (40 B, 10 KVs, 5 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• window
│ sql nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ estimated max memory allocated: 0 B
│ estimated max sql temp disk usage: 0 B
│
└── • scan
      sql nodes: <hidden>
      kv nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows decoded: 5
      KV pairs read: 10
      KV bytes read: 40 B
      KV gRPC calls: 5
      estimated max memory allocated: 0 B
      missing stats
      table: kv@kv_pkey
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzslk1u8zYQhvc9BTErG5Bh_bkouErrLy2CNnXgBO6iMAJGnDiEJFIhKf808LF6gZ6soBTlkxw7kPfWwjA5Q87ofV5QfAPzmgGF--s_rqcPhK1Xg3RIZovrORkMya_z2S1J1-CBVBz_ZDkaoH9DAB6E4EEEHsTgwQSWHhRaJWiM0i7lrVpww7dAfQ-ELErrppceJEoj0DewwmYIFB7YU4ZzZBz12AcPOFomsqpMur5K149FijvwYKqyMpeGkhQ8uC-Y-zsauy5-XxBXzFAig3poRY6U-P_9a-pxoqRFaYWSn0JabQzhmCiOnJL39U87i4ZoZJySn8gv9eRqfjclCcsy85FXMKGbPNfJ7WI6JcZiQRJVSksGuLVjIe2QEr96uToBMT2VkLMtyTFXekdYlqmEWdeWX_XwxGzygoao0halpcTlV-03EwEs9x7Uo3e1jWUrBBq08Nx8A-rvvROEvoMppdIcNfIOlOX-CMO_hORqg3o86QL8efHb4CoYggcz19-V0wi3mJSfUXz14i5mXjNiMS8IFyYlpWEr7K3L5KQu4YEuk44uQX_nBmc6dxyOxlHXu-HFu728G3QYhf0ZhecyikbjuMsoujDqxSjsMIr6M4rOZRSPqkOnxSi-MOrFKOowivszis9lNBl1CU0uhHoRik9-pY8QmqMplDR48LU-Xsk_qDQK3Gcd-QrrO4BRpU7wTqukyq2Hs2qjaoKjsXU0qAc3sgoFroJGln9cMto7BV_u9GNnJ__LncJze2KVACDRbpROScYsymT3YbFmfsOE7ZqPo0EtWCb-YZ-d2Syr-GpMUKwbfzahxqRNrDZqE83RuJtMO8Hv6aG2PsGhPtFFn7Y-4aE-8UWftj7RoT6Tiz5tfWJ3Oj5navMoOFDw35_RkZ_mAbeArYw7ou9f1KYS62FXuAP2mWUGPbhlKX5DizoXUhgrEqBWl7jf__B_AAAA___mNxGE

# Very simple query to make it easier to spot regressions when rewriting results
# in test files.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT k FROM kv WHERE k = 0
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• scan
  sql nodes: <hidden>
  kv nodes: <hidden>
  regions: <hidden>
  actual row count: 0
  KV time: 0µs
  KV contention time: 0µs
  KV rows decoded: 0
  KV bytes read: 0 B
  KV gRPC calls: 0
  estimated max memory allocated: 0 B
  missing stats
  table: kv@kv_pkey
  spans: [/0 - /0]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyMUtuK2zAQfe9XDPPUgpY4r4JCaTaloU13ScL2oYRFkWezwrLkasa5EPxZ_YF-WbGVTa8L1YPxOXPmzLFHJ-SvHjUupx-nkxVU8G5xM4dqB5_fTxdTqOA1FKgwxJI-mZoY9Rcc41phk6Il5ph66jQIZuUBdaHQhaaVnl4rtDER6hOKE0-ocWU2nhZkSkqj3rgkMc4PttXuTbW7byo6osJJ9G0dWEOFCpeN6V9HxdDy4Q76aawhjDMUV5OG4vs3ztjGIBTExfBXKcU9Q0k2llRqONttjkIMiUxPwdtMbhe3E7DGe77oGuPSRYcK53eTCbBQAza2QeAlHWTkgrzSkKNmAVH1nKA2B6ipjukIxvtojdAlw8aIfSSG2ErTSp44xP9JrDuFGZ1_N4vZEurxL_uZXaMuOvX_K1oQNzEw_bad5yYVf0y6GndrhVRuKd8Ljm2ydJuiHbQZ3gxGA1ESS66OM5iFpxJLIlPn-GuFDz7u712JGovzufrH4-lg32C23H_Y8jHuB9vVseljPRjPpHBuKromoVS74FicRS2ppa578SMAAP__Twf4dw==

# Test a query that has a subquery and a postquery.
statement ok
CREATE TABLE parent (p INT PRIMARY KEY);
INSERT INTO parent VALUES (1), (2);
CREATE TABLE child (c INT PRIMARY KEY, p INT REFERENCES parent(p))

query T
EXPLAIN ANALYZE (DISTSQL) INSERT INTO child VALUES (1, (SELECT min(p) FROM parent))
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows decoded from KV: 2 (16 B, 4 KVs, 2 gRPC calls)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
isolation level: serializable
priority: normal
quality of service: regular
·
• root
│
├── • insert
│   │ sql nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 1
│   │ into: child(c, p)
│   │
│   └── • buffer
│       │ sql nodes: <hidden>
│       │ regions: <hidden>
│       │ actual row count: 1
│       │ label: buffer 1
│       │
│       └── • values
│             sql nodes: <hidden>
│             regions: <hidden>
│             actual row count: 1
│             size: 2 columns, 1 row
│
├── • subquery
│   │ id: @S1
│   │ original sql: (SELECT min(p) FROM parent)
│   │ exec mode: one row
│   │
│   └── • group (scalar)
│       │ sql nodes: <hidden>
│       │ regions: <hidden>
│       │ actual row count: 1
│       │
│       └── • scan
│             sql nodes: <hidden>
│             kv nodes: <hidden>
│             regions: <hidden>
│             actual row count: 1
│             KV time: 0µs
│             KV contention time: 0µs
│             KV rows decoded: 1
│             KV pairs read: 2
│             KV bytes read: 8 B
│             KV gRPC calls: 1
│             estimated max memory allocated: 0 B
│             missing stats
│             table: parent@parent_pkey
│             spans: LIMITED SCAN
│             limit: 1
│
└── • constraint-check
    │
    └── • error if rows
        │ sql nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 0
        │
        └── • lookup join (anti)
            │ sql nodes: <hidden>
            │ kv nodes: <hidden>
            │ regions: <hidden>
            │ actual row count: 0
            │ KV time: 0µs
            │ KV contention time: 0µs
            │ KV rows decoded: 1
            │ KV pairs read: 2
            │ KV bytes read: 8 B
            │ KV gRPC calls: 1
            │ estimated max memory allocated: 0 B
            │ table: parent@parent_pkey
            │ equality: (column2) = (p)
            │ equality cols are key
            │
            └── • filter
                │ sql nodes: <hidden>
                │ regions: <hidden>
                │ actual row count: 1
                │ estimated row count: 1
                │ filter: column2 IS NOT NULL
                │
                └── • scan buffer
                      sql nodes: <hidden>
                      regions: <hidden>
                      actual row count: 1
                      estimated row count: 1
                      label: buffer 1
·
Diagram 1 (subquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJysU9Fu2koQfb9fMZonkBZhE0W62qfkEq6EQiACglRVCG3WE2fFetfdXRdoxGf1B_plle04haRJG7V-AO_M-MzZc2Ye0H_SyHE4ng2mcxiO5xOQ90onsDgf3Qxm0IoZtGaD0aA_h0yZVt6G_6eTK8iFIxPabWRobEJjkZFH_hFjZHiKS4a5s5K8t64MP1RFw2SLPGKoTF6EMrxkKK0j5A8YVNCEHMe2Y_NuDxkmFITSFShtSRZBWQNBZcQh-vbVI8NbEeQ9ebBFyIvAIUKGzm5-BGJc7hnWp8d-PoiUkJ8cEBxeIO_t2QHH-G2Oc3GraUoiIdeNjpnWspzVf6t8TTtk2Le6yIznkCPDWS7K1w4yHKlMBSgVu1xA2dxzMKf18eiilwuQ1gQyLzW4XEB15YSkTSjhDdztLpAHRyLh8C_8VwfT6XUfpNDaP9XlQrmmrlT9atHvgw-Ug7SFCdCibegqE9ocouqydQHR-rWCTGwho8y6HQitrRShpBVVHP7AsfiZY9F7HDtPU0epCNZ142PDzscfVuPJfDW-GY1aZ3E5z39_2nrPuMdH3H-xEVPyuTWejni_1il61qkT75cMKUmpXkNvCyfp2llZ1dbHSQVUBRLyoc6e1IehaVI-OBLZk_SHSPGbSL13IPXeRIpeIolKADQUNtatQYtARu6eTGviG6HCsZ0JeXJKaPVFvPS6-azy15Ek9bnZrSbVLFiTq5esyWbkvUiPCqLfnKFDfSr37rTdrFSCHKPHp_OTn-bB8gOR-nKEZvd2U4k13-XlANwJ7YnhlVjTBQVymTLKByWRB1fQfv_P9wAAAP__57z46g==
Diagram 2 (main-query): https://cockroachdb.github.io/distsqlplan/decode.html#eJy0ksGK2zAQhu99CjGnBLTE8t50K90UDLtJSdJeiilaeZyIypIrjZotwY_VF-iTFdu77dZ0AzmsDoL5JX3zIeYE8ZsFCcVqu9zsWLHarZk-GFuxT29vPy63bCY4m22Xt8t3O9YYN2vn7P1mfcdaFdDRfA4cnK9wpRqMID-DgJJDG7zGGH3oo9NwoageQGYcjGsT9XHJQfuAIE9AhiyCBOu1suy7sgkjyxYZcKiQlLEDGR9QJzLeMTINSpb9-hmBw70ifcDIfKI2kWT9q-CPfwMBZcdhrB4bR1J7BCmemRY3ILOOXyp7n-oaAxML8dqy-URWXC6rfXLE8kX-2q7XE9f8EtcNxta7iP9IvtQpm3S6El3JAas9jqMXfQoaPwSvh7tjuR5AQ1BhpPFUjEXhno4iBVTNn7l4ThJnSfnLJDEl5WdJ1-ecSg619ccvpgIJ2eO6-s_2tKB_oPax_-ztwR8H7O5H239VrWxEDnfqK94gYWiMM5GMBkkhYde9-R0AAP__XNhbxw==
Diagram 3 (postquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJy0lNFu4joQhu_PU4zmCiRXJNAjHfmqPZRKaSlUQLk5QpWbDNQHx87ajgqqeKx9gX2yVWLoFnZhtyttLkAznvz-ZvzHr-g-KeSYDMa90QSSwWQI6bNUGUwv-w-9MTRiBo1xr9_rTiCXulE04Xo0vINCWNK-2USG2mQ0EDk55P9hjDOGhTUpOWdslXqtC5JshTxiKHVR-io9Y5gaS8hf0UuvCDkqkwoFLhUansr5nCxErQgZZuSFVLX8sPQcLtrIkFaUll4aDV7mxCH68tkhwyfh02dyYEpfVLXV-9a8fEvEONswDNGWw3mxIOTxO_DkCnm0Yb_Ofi2VJ0u2Fe8DhzyHixiSMQyGExg89Pt_hL99wB9_hP_GSD0ikZFttfc7mKwL4tDvXU_gcjBJ4GaYDJBhMMBF-HsslrRGhn1jlmUB_xupweiqa2TYNarMteNQ4JYBqo6qVnax80Kp_UHcTqFidxz03yE8XE6N9qS_H-HttNaHjFKTURb2uZ3C09qTA0si4_AP_BuSi9F9F1KhlHurK4S0u7pqFnfTbhecpwJSU2oPDVr5ltS-ybf-DAVEy2MFR846FyvIKTd2DUJV5vcVbVSj_dQH0VEfdA580P6ID8I3SNYaC3IeBhm3OvuW-F3vHmc-P2DufIR5RK4w2tEe5LGdooOdzuLNjCFlCwqXlTOlTenemrSuDeGwFqoTGTkfVuMQJHq35Lwlkb9dHe-V4pNK7eNK8aFS-6RS57hS-1Cpc1Lp_FR3M4ZzZV4eZYYco-1z9oOf3YPVC2LhqmMbP5uXWra6WRzyuVCOGN6JJV2RJ5tLLZ2XKXJvS9ps_voaAAD__8GlJ5A=
