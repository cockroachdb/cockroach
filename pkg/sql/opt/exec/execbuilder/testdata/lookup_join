# LogicTest: 5node-dist-opt

statement ok
CREATE TABLE abc (a INT, b INT, c INT, PRIMARY KEY (a, c))

statement ok
CREATE TABLE def (d INT, e INT, f INT, PRIMARY KEY (f, e))

# Set up the statistics as if the first table is much smaller than the second.
# This will make lookup join into the second table be the best plan.
statement ok
ALTER TABLE abc INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 100,
    "distinct_count": 100
  }
]'

statement ok
ALTER TABLE def INJECT STATISTICS '[
  {
    "columns": ["f"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 10000
  }
]'

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT * FROM abc JOIN def ON f = b
----
tree         field  description  columns             ordering
lookup-join  ·      ·            (a, b, c, d, e, f)  ·
 │           type   inner        ·                   ·
 │           pred   @6 = @2      ·                   ·
 ├── scan    ·      ·            (a, b, c)           ·
 │           table  abc@primary  ·                   ·
 │           spans  ALL          ·                   ·
 └── scan    ·      ·            (d, e, f)           ·
·            table  def@primary  ·                   ·

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT * FROM abc JOIN def ON f = b WHERE a > 1 AND e > 1
----
tree         field  description             columns             ordering
lookup-join  ·      ·                       (a, b, c, d, e, f)  ·
 │           type   inner                   ·                   ·
 │           pred   (@6 = @2) AND (@5 > 1)  ·                   ·
 ├── scan    ·      ·                       (a, b, c)           ·
 │           table  abc@primary             ·                   ·
 │           spans  /2-                     ·                   ·
 └── scan    ·      ·                       (d, e, f)           ·
·            table  def@primary             ·                   ·

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT * FROM abc JOIN def ON f = a WHERE f > 1
----
tree         field  description             columns             ordering
lookup-join  ·      ·                       (a, b, c, d, e, f)  ·
 │           type   inner                   ·                   ·
 │           pred   (@6 = @1) AND (@6 > 1)  ·                   ·
 ├── scan    ·      ·                       (a, b, c)           ·
 │           table  abc@primary             ·                   ·
 │           spans  /2-                     ·                   ·
 └── scan    ·      ·                       (d, e, f)           ·
·            table  def@primary             ·                   ·

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT * FROM abc JOIN def ON f = b WHERE a >= e
----
tree         field  description               columns             ordering
lookup-join  ·      ·                         (a, b, c, d, e, f)  ·
 │           type   inner                     ·                   ·
 │           pred   (@6 = @2) AND (@1 >= @5)  ·                   ·
 ├── scan    ·      ·                         (a, b, c)           ·
 │           table  abc@primary               ·                   ·
 │           spans  ALL                       ·                   ·
 └── scan    ·      ·                         (d, e, f)           ·
·            table  def@primary               ·                   ·

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT * FROM abc JOIN def ON f = b AND a >= e
----
tree         field  description               columns             ordering
lookup-join  ·      ·                         (a, b, c, d, e, f)  ·
 │           type   inner                     ·                   ·
 │           pred   (@6 = @2) AND (@1 >= @5)  ·                   ·
 ├── scan    ·      ·                         (a, b, c)           ·
 │           table  abc@primary               ·                   ·
 │           spans  ALL                       ·                   ·
 └── scan    ·      ·                         (d, e, f)           ·
·            table  def@primary               ·                   ·

# Verify a distsql plan.
statement ok
CREATE TABLE data (a INT, b INT, c INT, d INT, PRIMARY KEY (a, b, c, d))

# Split into ten parts.
statement ok
ALTER TABLE data SPLIT AT SELECT i FROM generate_series(1, 9) AS g(i)

# Relocate the ten parts to the five nodes.
statement ok
ALTER TABLE data EXPERIMENTAL_RELOCATE
  SELECT ARRAY[i%5+1], i FROM generate_series(0, 9) AS g(i)

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM (SELECT * FROM data WHERE c = 1) AS l NATURAL JOIN data AS r
----
render            ·         ·                                                        (a, b, c, d)              ·
 │                render 0  a                                                        ·                         ·
 │                render 1  b                                                        ·                         ·
 │                render 2  c                                                        ·                         ·
 │                render 3  d                                                        ·                         ·
 └── lookup-join  ·         ·                                                        (a, b, c, d, a, b, c, d)  ·
      │           type      inner                                                    ·                         ·
      │           pred      (((@1 = @5) AND (@2 = @6)) AND (@3 = @7)) AND (@4 = @8)  ·                         ·
      ├── scan    ·         ·                                                        (a, b, c, d)              ·
      │           table     data@primary                                             ·                         ·
      │           spans     ALL                                                      ·                         ·
      │           filter    c = 1                                                    ·                         ·
      └── scan    ·         ·                                                        (a, b, c, d)              ·
·                 table     data@primary                                             ·                         ·

query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM (SELECT * FROM data WHERE c = 1) AS l NATURAL JOIN data AS r]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzUlU-L2zAQxe_9FGJOCaisZTt_VrCgQimkFG9Z9lZ8cKNhcZvVGEmGliXfvShuu07YyIaQg49j6em9-Y2wXsCQxqJ6RgfyGwjgkAKHDDjkwGEBJYfG0hadIxu2dIKN_gUy4VCbpvXhc8lhSxZBvoCv_Q5BwmP1fYcPWGm0Nwlw0OirenewaWz9XNnfSle-Ag6f6p1HK5nK2B0TUspN8QjlngO1_vV856snBCn2fHyGz1SbvxEW0QhfiH62DftBtWFkJFOCq5SrjKuA4b5gs9lMCXbH1GLOPhQf2UyloVrO_5Uhu1r9L_NQrudB3Prj8851lp7t7LWh1pDVaFEfdVPu3-i9oPfU3IjkZOfb3tmRtxg_WXGtyQ5k6E12ObHJpuPppteiO5ChR3c1MbrZeLrZtegOZOjRXU-Mbj6ebn4tugMZenRvJ0Z34DV7QNeQcTjqj56ENwH1E3YPiKPWbvGrpe3BpivvD7rDB43Od6uiKzamWwoB-2IRFadHYnEqTuPOA9ZZVJ3HxfkluRdR8TLuvLzEeRUVr-PO60ucb-OzSgauSfySnXqX-3d_AgAA___iTT6a

statement ok
CREATE TABLE books (title STRING, edition INT, shelf INT, PRIMARY KEY (title, edition))

statement ok
CREATE TABLE books2 (title STRING, edition INT, shelf INT, PRIMARY KEY (title, edition))

statement ok
ALTER TABLE books INJECT STATISTICS '[
  {
    "columns": ["title"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 100,
    "distinct_count": 100
  }
]'

statement ok
ALTER TABLE books2 INJECT STATISTICS '[
  {
    "columns": ["title"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 10000
  }
]'

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT DISTINCT b1.title FROM books as b1 JOIN books2 as b2 ON b1.title = b2.title WHERE b1.shelf <> b2.shelf
----
tree                   field        description               columns                       ordering
distinct               ·            ·                         (title)                       weak-key(title)
 │                     distinct on  title                     ·                             ·
 └── render            ·            ·                         (title)                       ·
      │                render 0     title                     ·                             ·
      └── lookup-join  ·            ·                         (title, shelf, title, shelf)  ·
           │           type         inner                     ·                             ·
           │           pred         (@1 = @3) AND (@2 != @4)  ·                             ·
           ├── scan    ·            ·                         (title, shelf)                ·
           │           table        books@primary             ·                             ·
           │           spans        ALL                       ·                             ·
           └── scan    ·            ·                         (title, shelf)                ·
·                      table        books2@primary            ·                             ·

statement ok
CREATE TABLE authors (name STRING PRIMARY KEY, book STRING)

statement ok
ALTER TABLE authors INJECT STATISTICS '[
  {
    "columns": ["name"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 100,
    "distinct_count": 100
  }
]'

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT DISTINCT authors.name FROM books AS b1, books2 AS b2, authors WHERE b1.title = b2.title AND authors.book = b1.title AND b1.shelf <> b2.shelf
----
tree                        field        description               columns                                   ordering
distinct                    ·            ·                         (name)                                    weak-key(name)
 │                          distinct on  name                      ·                                         ·
 └── render                 ·            ·                         (name)                                    ·
      │                     render 0     name                      ·                                         ·
      └── join              ·            ·                         (name, book, title, shelf, title, shelf)  ·
           │                type         inner                     ·                                         ·
           │                equality     (book) = (title)          ·                                         ·
           ├── scan         ·            ·                         (name, book)                              ·
           │                table        authors@primary           ·                                         ·
           │                spans        ALL                       ·                                         ·
           └── lookup-join  ·            ·                         (title, shelf, title, shelf)              ·
                │           type         inner                     ·                                         ·
                │           pred         (@1 = @3) AND (@2 != @4)  ·                                         ·
                ├── scan    ·            ·                         (title, shelf)                            ·
                │           table        books@primary             ·                                         ·
                │           spans        ALL                       ·                                         ·
                └── scan    ·            ·                         (title, shelf)                            ·
·                           table        books2@primary            ·                                         ·

query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT DISTINCT authors.name FROM books AS b1, books2 AS b2, authors WHERE b1.title = b2.title AND authors.book = b1.title AND b1.shelf <> b2.shelf]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJyck8GK2zAQhu99CnVOCagksuM9GAIq7KFbircsvZUctNY0UderMZIMLUvevcgurG3WStOjpfnm-2eMXsCSxko9o4fyOwjgUMCBQ-uoRu_JxeOh6E7_gnLLwdi2C_H4wKEmh1C-QDChQSihog_UbgrgoDEo0_RlZw7UhVfIB3VEKG_OfNRYpBt_U48NPqDS6DbbSXtonXlW7rdUXTjFvEs-8b8-8bbvkejJA4f7LpRMCi7zRXV2jfozGfvXnCXM8e4L0VPXsp9kLCMbU8Q8FVtJwfZM5mv2sbplK5mx93smi_U4bcZlzmWxmDlfzPwatbPkNDrU8x9-ueSNwT8pf4rDo9vk08Eb_BFWMlvvnTmewkqK0SSLA-yuWfqt8cHYOmx2U3OifzHpf-FhPKBvyXr8p5exjdtBfcRh2546V-NXR3WvGT7ve64_0OjDcHszfNzZ4SoGHMMiCe8msJjDWRLO0-b8CnM2h3dJuEibiyS8ncGH87s_AQAA___BAKd9

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT a.name FROM authors AS a JOIN books2 AS b2 ON a.book = b2.title ORDER BY a.name
----
tree              field     description      columns              ordering
render            ·         ·                (name)               ·
 │                render 0  name             ·                    ·
 └── lookup-join  ·         ·                (name, book, title)  ·
      │           type      inner            ·                    ·
      │           pred      @2 = @3          ·                    ·
      ├── scan    ·         ·                (name, book)         +name
      │           table     authors@primary  ·                    ·
      │           spans     ALL              ·                    ·
      └── scan    ·         ·                (title)              ·
·                 table     books2@primary   ·                    ·

# Cross joins should not be planned as lookup joins.
query TTTTT colnames
EXPLAIN (VERBOSE) SELECT * FROM books CROSS JOIN books2
----
tree            field     description     columns                                         ordering
render          ·         ·               (title, edition, shelf, title, edition, shelf)  ·
 │              render 0  title           ·                                               ·
 │              render 1  edition         ·                                               ·
 │              render 2  shelf           ·                                               ·
 │              render 3  title           ·                                               ·
 │              render 4  edition         ·                                               ·
 │              render 5  shelf           ·                                               ·
 └── join       ·         ·               (title, edition, shelf, title, edition, shelf)  ·
      │         type      cross           ·                                               ·
      ├── scan  ·         ·               (title, edition, shelf)                         ·
      │         table     books2@primary  ·                                               ·
      │         spans     ALL             ·                                               ·
      └── scan  ·         ·               (title, edition, shelf)                         ·
·               table     books@primary   ·                                               ·
·               spans     ALL             ·                                               ·


query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM authors INNER JOIN books2 ON books2.edition = 1 WHERE books2.title = authors.book]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkcFLwzAUxu_-FeGdNoisabdLYBDBy0Q6GbtJD1n7mHVdXklSUEb_d0kjuImresz33u99X_hOYKjCXB_RgXwGARwWUHBoLZXoHNkgx6VV9QYy4VCbtvNBLjiUZBHkCXztGwQJOd1SO0uBQ4Ve182w1nOgzn9Bzus9gsx6fnZYjB_e6l2DG9QV2llycR5aWx-1fVe68y8h7zU_8R-_B6rNp5342W5HdHDhp49Eh65lr1QbRkYyFcR1ziYqY0um0im7y-_ZRM3Zkgkp5SrfTsNG5yVTgquUq4yrOVeLq9HTi-i_dLBB15Jx-KcSkr7ggNUeY8-OOlvik6VysInP9cANQoXOx2kWHysTRyHgOSxG4XQcTkfh5Btc9DcfAQAA__9BRuUo

####################################
#  LOOKUP JOIN ON SECONDARY INDEX  #
####################################

statement ok
CREATE TABLE small (a INT, b INT, c INT, d INT)

statement ok
CREATE TABLE large (a INT, b INT, c INT, d INT, PRIMARY KEY (a, b), INDEX bc (b) STORING (c))

statement ok
ALTER TABLE small INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 100,
    "distinct_count": 100
  }
]'

statement ok
ALTER TABLE large INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 10000
  }
]'

# Lookup join on covering secondary index
query TTTTT
EXPLAIN (VERBOSE) SELECT small.a, large.c FROM small JOIN large ON small.a = large.b
----
render            ·         ·              (a, c)     ·
 │                render 0  a              ·          ·
 │                render 1  c              ·          ·
 └── lookup-join  ·         ·              (a, b, c)  ·
      │           type      inner          ·          ·
      │           pred      @1 = @2        ·          ·
      ├── scan    ·         ·              (a)        ·
      │           table     small@primary  ·          ·
      │           spans     ALL            ·          ·
      └── scan    ·         ·              (b, c)     ·
·                 table     large@bc       ·          ·

# Lookup join on non-covering secondary index
# TODO(radu): index-join fixup needed
query TTTTT
EXPLAIN (VERBOSE) SELECT small.a, large.d FROM small JOIN large ON small.a = large.b
----
render          ·         ·              (a, d)     ·
 │              render 0  a              ·          ·
 │              render 1  d              ·          ·
 └── join       ·         ·              (b, d, a)  ·
      │         type      inner          ·          ·
      │         equality  (b) = (a)      ·          ·
      ├── scan  ·         ·              (b, d)     ·
      │         table     large@primary  ·          ·
      │         spans     ALL            ·          ·
      └── scan  ·         ·              (a)        ·
·               table     small@primary  ·          ·
·               spans     ALL            ·          ·

############################
#  LEFT OUTER LOOKUP JOIN  #
############################

# Left join against primary index
query TTTTT
EXPLAIN (VERBOSE) SELECT small.b, large.a FROM small LEFT JOIN large ON small.b = large.a
----
lookup-join  ·      ·              (b, a)  ·
 │           type   left outer     ·       ·
 │           pred   @1 = @2        ·       ·
 ├── scan    ·      ·              (b)     ·
 │           table  small@primary  ·       ·
 │           spans  ALL            ·       ·
 └── scan    ·      ·              (a)     ·
·            table  large@primary  ·       ·

# Left join against covering secondary index
query TTTTT
EXPLAIN (VERBOSE) SELECT small.c, large.c FROM small LEFT JOIN large ON small.c = large.b
----
render            ·         ·              (c, c)     ·
 │                render 0  c              ·          ·
 │                render 1  c              ·          ·
 └── lookup-join  ·         ·              (c, b, c)  ·
      │           type      left outer     ·          ·
      │           pred      @1 = @2        ·          ·
      ├── scan    ·         ·              (c)        ·
      │           table     small@primary  ·          ·
      │           spans     ALL            ·          ·
      └── scan    ·         ·              (b, c)     ·
·                 table     large@bc       ·          ·

# Left join against non-covering secondary index
# TODO(radu): index-join fixup needed
query TTTTT
EXPLAIN (VERBOSE) SELECT small.c, large.d FROM small LEFT JOIN large ON small.c = large.b
----
render          ·         ·              (c, d)     ·
 │              render 0  c              ·          ·
 │              render 1  d              ·          ·
 └── join       ·         ·              (b, d, c)  ·
      │         type      right outer    ·          ·
      │         equality  (b) = (c)      ·          ·
      ├── scan  ·         ·              (b, d)     ·
      │         table     large@primary  ·          ·
      │         spans     ALL            ·          ·
      └── scan  ·         ·              (c)        ·
·               table     small@primary  ·          ·
·               spans     ALL            ·          ·

# Left join with ON filter on covering index
query TTTTT
EXPLAIN (VERBOSE) SELECT small.c, large.c FROM small LEFT JOIN large ON small.c = large.b AND large.c < 20
----
render            ·         ·                        (c, c)     ·
 │                render 0  c                        ·          ·
 │                render 1  c                        ·          ·
 └── lookup-join  ·         ·                        (c, b, c)  ·
      │           type      left outer               ·          ·
      │           pred      (@1 = @2) AND (@3 < 20)  ·          ·
      ├── scan    ·         ·                        (c)        ·
      │           table     small@primary            ·          ·
      │           spans     ALL                      ·          ·
      └── scan    ·         ·                        (b, c)     ·
·                 table     large@bc                 ·          ·

# Left join with ON filter on non-covering index
# TODO(radu): this doesn't use lookup join yet, the current rules don't cover
# left join with ON condition on columns that are not covered by the index.
query TTTTT
EXPLAIN (VERBOSE) SELECT small.c, large.d FROM small LEFT JOIN large ON small.c = large.b AND large.d < 30
----
render          ·         ·              (c, d)     ·
 │              render 0  c              ·          ·
 │              render 1  d              ·          ·
 └── join       ·         ·              (b, d, c)  ·
      │         type      right outer    ·          ·
      │         equality  (b) = (c)      ·          ·
      ├── scan  ·         ·              (b, d)     ·
      │         table     large@primary  ·          ·
      │         spans     ALL            ·          ·
      │         filter    d < 30         ·          ·
      └── scan  ·         ·              (c)        ·
·               table     small@primary  ·          ·
·               spans     ALL            ·          ·
