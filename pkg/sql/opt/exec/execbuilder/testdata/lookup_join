# LogicTest: 5node-dist-opt

statement ok
CREATE TABLE abc (a INT, b INT, c INT, PRIMARY KEY (a, c))

statement ok
CREATE TABLE def (d INT, e INT, f INT, PRIMARY KEY (f, e))

# Set up the statistics as if the first table is much smaller than the second.
# This will make lookup join into the second table be the best plan.
statement ok
ALTER TABLE abc INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 100,
    "distinct_count": 100
  }
]'

statement ok
ALTER TABLE def INJECT STATISTICS '[
  {
    "columns": ["f"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 10000
  }
]'

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT * FROM abc JOIN def ON f = b
----
tree         field  description  columns             ordering
lookup-join  ·      ·            (a, b, c, d, e, f)  ·
 │           type   inner        ·                   ·
 ├── scan    ·      ·            (a, b, c)           ·
 │           table  abc@primary  ·                   ·
 │           spans  ALL          ·                   ·
 └── scan    ·      ·            (d, e, f)           ·
·            table  def@primary  ·                   ·

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT * FROM abc JOIN def ON f = b WHERE a > 1 AND e > 1
----
tree         field  description  columns             ordering
lookup-join  ·      ·            (a, b, c, d, e, f)  ·
 │           type   inner        ·                   ·
 │           pred   @5 > 1       ·                   ·
 ├── scan    ·      ·            (a, b, c)           ·
 │           table  abc@primary  ·                   ·
 │           spans  /2-          ·                   ·
 └── scan    ·      ·            (d, e, f)           ·
·            table  def@primary  ·                   ·

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT * FROM abc JOIN def ON f = a WHERE f > 1
----
tree         field  description  columns             ordering
lookup-join  ·      ·            (a, b, c, d, e, f)  ·
 │           type   inner        ·                   ·
 │           pred   @6 > 1       ·                   ·
 ├── scan    ·      ·            (a, b, c)           ·
 │           table  abc@primary  ·                   ·
 │           spans  /2-          ·                   ·
 └── scan    ·      ·            (d, e, f)           ·
·            table  def@primary  ·                   ·

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT * FROM abc JOIN def ON f = b WHERE a >= e
----
tree         field  description  columns             ordering
lookup-join  ·      ·            (a, b, c, d, e, f)  ·
 │           type   inner        ·                   ·
 │           pred   @1 >= @5     ·                   ·
 ├── scan    ·      ·            (a, b, c)           ·
 │           table  abc@primary  ·                   ·
 │           spans  ALL          ·                   ·
 └── scan    ·      ·            (d, e, f)           ·
·            table  def@primary  ·                   ·

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT * FROM abc JOIN def ON f = b AND a >= e
----
tree         field  description  columns             ordering
lookup-join  ·      ·            (a, b, c, d, e, f)  ·
 │           type   inner        ·                   ·
 │           pred   @1 >= @5     ·                   ·
 ├── scan    ·      ·            (a, b, c)           ·
 │           table  abc@primary  ·                   ·
 │           spans  ALL          ·                   ·
 └── scan    ·      ·            (d, e, f)           ·
·            table  def@primary  ·                   ·

# Verify a distsql plan.
statement ok
CREATE TABLE data (a INT, b INT, c INT, d INT, PRIMARY KEY (a, b, c, d))

# Prevent the merge queue from immediately discarding our splits.
statement ok
SET CLUSTER SETTING kv.range_merge.queue_enabled = false;

# Split into ten parts.
statement ok
ALTER TABLE data SPLIT AT SELECT i FROM generate_series(1, 9) AS g(i)

# Relocate the ten parts to the five nodes.
statement ok
ALTER TABLE data EXPERIMENTAL_RELOCATE
  SELECT ARRAY[i%5+1], i FROM generate_series(0, 9) AS g(i)

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM (SELECT * FROM data WHERE c = 1) AS l NATURAL JOIN data AS r
----
render            ·         ·             (a, b, c, d)              ·
 │                render 0  a             ·                         ·
 │                render 1  b             ·                         ·
 │                render 2  c             ·                         ·
 │                render 3  d             ·                         ·
 └── lookup-join  ·         ·             (a, b, c, d, a, b, c, d)  ·
      │           type      inner         ·                         ·
      ├── scan    ·         ·             (a, b, c, d)              ·
      │           table     data@primary  ·                         ·
      │           spans     ALL           ·                         ·
      │           filter    c = 1         ·                         ·
      └── scan    ·         ·             (a, b, c, d)              ·
·                 table     data@primary  ·                         ·

query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM (SELECT * FROM data WHERE c = 1) AS l NATURAL JOIN data AS r]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzElFGrmzAUx9_3KeQ8Z1yjttcbGPg06Bi943Lfhg-ZORQ3myNJhI3idx_qoFraKBS7R2P-_H_8Tjgn0KRwL49oQXwHDgwiYBADgwQYbCBnUBsq0Foy3ZUhsFO_QYQMSl03rjvOGRRkEMQJXOkqBAHv8keFbygVmqcQGCh0sqz6mtqUR2n-ZEo6CQw-l5VDI4IsDj4FXAix27-nkLcMqHHnAuvkAUHwli2H-EKl_sew8TJ8JfrV1MFPKnVAWgQZZ1nEsphlnYfXxk2PbsFFN-HOTI0mo9CgmgDl7RX8PX2k-omHFzevd8eTbr58Ony16cxAjKazffx0ouWGotUMzUCMDD0_3lC83FC8mqEZiJGh9PGGkuWGktUMzUCMDL383x14Be4NbU3a4qINF3Y7EtUBh4VqqTEFfjNU9DXD52uf6w8UWjf85cPHTg-_OsBxmHvD0STML8ORv3mmOvamE384uYd74w1v_c3be5qfveHU35ze0_zin1U480z8j-yyO28__A0AAP__5bUEPg==

statement ok
CREATE TABLE books (title STRING, edition INT, shelf INT, PRIMARY KEY (title, edition))

statement ok
CREATE TABLE books2 (title STRING, edition INT, shelf INT, PRIMARY KEY (title, edition))

statement ok
ALTER TABLE books INJECT STATISTICS '[
  {
    "columns": ["title"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 100,
    "distinct_count": 100
  }
]'

statement ok
ALTER TABLE books2 INJECT STATISTICS '[
  {
    "columns": ["title"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 10000
  }
]'

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT DISTINCT b1.title FROM books as b1 JOIN books2 as b2 ON b1.title = b2.title WHERE b1.shelf <> b2.shelf
----
tree                   field        description     columns                       ordering
distinct               ·            ·               (title)                       weak-key(title)
 │                     distinct on  title           ·                             ·
 │                     order key    title           ·                             ·
 └── render            ·            ·               (title)                       ·
      │                render 0     title           ·                             ·
      └── lookup-join  ·            ·               (title, shelf, title, shelf)  +title
           │           type         inner           ·                             ·
           │           pred         @2 != @4        ·                             ·
           ├── scan    ·            ·               (title, shelf)                +title
           │           table        books@primary   ·                             ·
           │           spans        ALL             ·                             ·
           └── scan    ·            ·               (title, shelf)                ·
·                      table        books2@primary  ·                             ·

statement ok
CREATE TABLE authors (name STRING PRIMARY KEY, book STRING)

statement ok
ALTER TABLE authors INJECT STATISTICS '[
  {
    "columns": ["name"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 100,
    "distinct_count": 100
  }
]'

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT DISTINCT authors.name FROM books AS b1, books2 AS b2, authors WHERE b1.title = b2.title AND authors.book = b1.title AND b1.shelf <> b2.shelf
----
tree                      field        description                          columns                                   ordering
distinct                  ·            ·                                    (name)                                    weak-key(name)
 │                        distinct on  name                                 ·                                         ·
 └── render               ·            ·                                    (name)                                    ·
      │                   render 0     name                                 ·                                         ·
      └── join            ·            ·                                    (title, shelf, name, book, title, shelf)  ·
           │              type         inner                                ·                                         ·
           │              equality     (title) = (title)                    ·                                         ·
           │              pred         (book = title) AND (shelf != shelf)  ·                                         ·
           ├── join       ·            ·                                    (title, shelf, name, book)                ·
           │    │         type         cross                                ·                                         ·
           │    ├── scan  ·            ·                                    (title, shelf)                            ·
           │    │         table        books2@primary                       ·                                         ·
           │    │         spans        ALL                                  ·                                         ·
           │    └── scan  ·            ·                                    (name, book)                              ·
           │              table        authors@primary                      ·                                         ·
           │              spans        ALL                                  ·                                         ·
           └── scan       ·            ·                                    (title, shelf)                            ·
·                         table        books@primary                        ·                                         ·
·                         spans        ALL                                  ·                                         ·

# Verify data placement.
query TTITI colnames
SHOW EXPERIMENTAL_RANGES FROM TABLE books
----
start_key  end_key  range_id  replicas  lease_holder
NULL       NULL     10        {5}       5

query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT DISTINCT authors.name FROM books AS b1, books2 AS b2, authors WHERE b1.title = b2.title AND authors.book = b1.title AND b1.shelf <> b2.shelf]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzEk0-L2zAQxe_9FOqcElCx5X8LhoAKe-j24C1LbyUHrTVNRB3LSDK0hHz3YhuS2I2VP5febGl-8968QXuotcRC7NBC_gMYUEhhTaExukRrtemOh6IX-RvykIKqm9Z1x2sKpTYI-R6cchVCDoX-pJsgAwoSnVBVX3agoFt3gqwTG4T86UDPGjN_4-_ivcI3FBJNEI7aQ2PUTpg__F3rXzYCCq-tywlnlMcwp80e1WaXtUXrtl1Wc3rRrN5Jpq21kWhQTtO7XnLB9Bdht1-1qtEE0djzMZ6I8pjyZNZ0_GhIsWdBt-0n-Z95JWP7Ff50C86WK6M22_6rm6EgC56QFeHpknwunsmCZ-TjivBoeZxwfrz0nmSflXWqLl2Qjn1xNts_G_W_8mbf0Da6tnjTow277FBucNiF1a0p8ZvRZS8z_L72XH8g0brh9mn4eamHq87gOcy8cDyC2RSO7oCjKRx74dSvnNwB_6OceuHMH1jmhcMJvD58-BsAAP__2dLv4w==

query TTTTT colnames
EXPLAIN (VERBOSE) SELECT a.name FROM authors AS a JOIN books2 AS b2 ON a.book = b2.title ORDER BY a.name
----
tree              field     description      columns              ordering
render            ·         ·                (name)               +name
 │                render 0  name             ·                    ·
 └── lookup-join  ·         ·                (name, book, title)  +name
      │           type      inner            ·                    ·
      ├── scan    ·         ·                (name, book)         +name
      │           table     authors@primary  ·                    ·
      │           spans     ALL              ·                    ·
      └── scan    ·         ·                (title)              ·
·                 table     books2@primary   ·                    ·

# Cross joins should not be planned as lookup joins.
query TTTTT colnames
EXPLAIN (VERBOSE) SELECT * FROM books CROSS JOIN books2
----
tree            field     description     columns                                         ordering
render          ·         ·               (title, edition, shelf, title, edition, shelf)  ·
 │              render 0  title           ·                                               ·
 │              render 1  edition         ·                                               ·
 │              render 2  shelf           ·                                               ·
 │              render 3  title           ·                                               ·
 │              render 4  edition         ·                                               ·
 │              render 5  shelf           ·                                               ·
 └── join       ·         ·               (title, edition, shelf, title, edition, shelf)  ·
      │         type      cross           ·                                               ·
      ├── scan  ·         ·               (title, edition, shelf)                         ·
      │         table     books2@primary  ·                                               ·
      │         spans     ALL             ·                                               ·
      └── scan  ·         ·               (title, edition, shelf)                         ·
·               table     books@primary   ·                                               ·
·               spans     ALL             ·                                               ·


query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT * FROM authors INNER JOIN books2 ON books2.edition = 1 WHERE books2.title = authors.book]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkUFrwzAMhe_7FUZnjcZpC8Mw8LVjpKP0NnJwE9FlTa1gO7BR8t-H48HasWbbUU_69J7lE1iuqTBH8qCeQQLCEkqEznFF3rOLchpa1W-gMoTGdn2IcolQsSNQJwhNaAkUFHzL3SwHhJqCadpxbEDgPnxBPpg9gZoPeLZYTi_eml1LGzI1uVl2sR461xyNe9emDy8x7zU_-R-_B27sp5382W7HfPDxpY_Mh74Tr9xYwVYJHcV1IfRC3AuplFoV27so9UEJLVHnqOeoF6iXV7PmF1l_OfqGfMfW05-ung0lAtV7Sh_ruXcVPTmuRptUrkduFGryIXXnqVjZ1IoBz2E5CefTcD4JZ9_gcrj5CAAA__-cGuJJ

####################################
#  LOOKUP JOIN ON SECONDARY INDEX  #
####################################

statement ok
CREATE TABLE small (a INT PRIMARY KEY, b INT, c INT, d INT)

statement ok
CREATE TABLE large (a INT, b INT, c INT, d INT, PRIMARY KEY (a, b), INDEX bc (b) STORING (c))

statement ok
ALTER TABLE small SPLIT AT SELECT i FROM generate_series(1, 9) AS g(i)

statement ok
ALTER TABLE small EXPERIMENTAL_RELOCATE
  SELECT ARRAY[i%5+1], i FROM generate_series(0, 9) AS g(i)

statement ok
INSERT INTO small SELECT x, 2*x, 3*x, 4*x FROM
  generate_series(1, 10) AS a(x)

statement ok
ALTER TABLE small INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 100,
    "distinct_count": 100
  }
]'

statement ok
ALTER TABLE large INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 10000
  }
]'

# Lookup join on covering secondary index
query TTTTT
EXPLAIN (VERBOSE) SELECT small.a, large.c FROM small JOIN large ON small.a = large.b
----
render            ·         ·              (a, c)     ·
 │                render 0  a              ·          ·
 │                render 1  c              ·          ·
 └── lookup-join  ·         ·              (a, b, c)  ·
      │           type      inner          ·          ·
      ├── scan    ·         ·              (a)        ·
      │           table     small@primary  ·          ·
      │           spans     ALL            ·          ·
      └── scan    ·         ·              (b, c)     ·
·                 table     large@bc       ·          ·

# Lookup join on non-covering secondary index
query TTTTT
EXPLAIN (VERBOSE) SELECT small.a, large.d FROM small JOIN large ON small.a = large.b
----
render                 ·         ·              (a, d)        ·
 │                     render 0  a              ·             ·
 │                     render 1  d              ·             ·
 └── lookup-join       ·         ·              (a, a, b, d)  ·
      │                type      inner          ·             ·
      ├── lookup-join  ·         ·              (a, a, b)     ·
      │    │           type      inner          ·             ·
      │    ├── scan    ·         ·              (a)           ·
      │    │           table     small@primary  ·             ·
      │    │           spans     ALL            ·             ·
      │    └── scan    ·         ·              (a, b)        ·
      │                table     large@bc       ·             ·
      └── scan         ·         ·              (d)           ·
·                      table     large@primary  ·             ·

############################
#  LEFT OUTER LOOKUP JOIN  #
############################

# Left join against primary index
query TTTTT
EXPLAIN (VERBOSE) SELECT small.b, large.a FROM small LEFT JOIN large ON small.b = large.a
----
lookup-join  ·      ·              (b, a)  ·
 │           type   left outer     ·       ·
 ├── scan    ·      ·              (b)     ·
 │           table  small@primary  ·       ·
 │           spans  ALL            ·       ·
 └── scan    ·      ·              (a)     ·
·            table  large@primary  ·       ·

# Left join should preserve input order.
query TTTTT
EXPLAIN (VERBOSE) SELECT t1.a, t2.b FROM small t1 LEFT JOIN large t2 ON t1.a = t2.a AND t2.b % 6 = 0 ORDER BY t1.a
----
render            ·         ·              (a, b)     +a
 │                render 0  a              ·          ·
 │                render 1  b              ·          ·
 └── lookup-join  ·         ·              (a, a, b)  +a
      │           type      left outer     ·          ·
      │           pred      (@3 % 6) = 0   ·          ·
      ├── scan    ·         ·              (a)        +a
      │           table     small@primary  ·          ·
      │           spans     ALL            ·          ·
      └── scan    ·         ·              (a, b)     ·
·                 table     large@primary  ·          ·

query T
SELECT url FROM [EXPLAIN (DISTSQL) SELECT t1.a, t2.b FROM small t1 LEFT JOIN large t2 ON t1.a = t2.a AND t2.b % 6 = 0 ORDER BY t1.a]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzMlUGLm0AUx-_9FMMfCi2dso6abHag4GULWRYtwZ6KBxsfwdY4MqPQZcl3L9Gl0dCMQnLwlpnJP7_3fm-YvKJUGYXpngzkDwhwuODwwOGDY4GEo9JqS8YoffxKF1hnfyAdjrysmvq4nXBslSbIV9R5XRAk4vRnQRtKM9J3DjgyqtO8aDGVzvepfgnMPi0KcERNLVkgkBw4VFOfftPU6Y4gxYFP5z6pvHzDLobY-KUiyZ4fv8Ys-h4_bthTtA7B_5VTpHpH4HhW6ndTsV8qL5kq28o4opB9CDz2ni2llOswXn1kX5jz9vnUAw-8i224F9s4Va90RpqyYeGB-ITk8J9eQ_VZVXdiqPcS3hvgxfTpiVtOb4Tbm95yztNzp-tzb6lvhNvTdz9nfd50fd4t9Y1we_pWc9bnT9fn31LfCLen72HO-kb-QTZkKlUamvSqOsd3mbIdde-4UY3e0jetti2mW0Ztrt3IyNTdqegW67I7OhbYDwtr2B2ExXnYtZNH0J417dvD_jV1L6zhpZ28vIZ8bw2v7OTVNeQH-6yckWtiv2Tn7OTw7m8AAAD__48rKi4=

# Left join against covering secondary index
query TTTTT
EXPLAIN (VERBOSE) SELECT small.c, large.c FROM small LEFT JOIN large ON small.c = large.b
----
render            ·         ·              (c, c)     ·
 │                render 0  c              ·          ·
 │                render 1  c              ·          ·
 └── lookup-join  ·         ·              (c, b, c)  ·
      │           type      left outer     ·          ·
      ├── scan    ·         ·              (c)        ·
      │           table     small@primary  ·          ·
      │           spans     ALL            ·          ·
      └── scan    ·         ·              (b, c)     ·
·                 table     large@bc       ·          ·

# Left join against non-covering secondary index
query TTTTT
EXPLAIN (VERBOSE) SELECT small.c, large.d FROM small LEFT JOIN large ON small.c = large.b
----
render                 ·         ·              (c, d)        ·
 │                     render 0  c              ·             ·
 │                     render 1  d              ·             ·
 └── lookup-join       ·         ·              (c, a, b, d)  ·
      │                type      left outer     ·             ·
      ├── lookup-join  ·         ·              (c, a, b)     ·
      │    │           type      left outer     ·             ·
      │    ├── scan    ·         ·              (c)           ·
      │    │           table     small@primary  ·             ·
      │    │           spans     ALL            ·             ·
      │    └── scan    ·         ·              (a, b)        ·
      │                table     large@bc       ·             ·
      └── scan         ·         ·              (d)           ·
·                      table     large@primary  ·             ·

# Left join with ON filter on covering index
query TTTTT
EXPLAIN (VERBOSE) SELECT small.c, large.c FROM small LEFT JOIN large ON small.c = large.b AND large.c < 20
----
render            ·         ·              (c, c)     ·
 │                render 0  c              ·          ·
 │                render 1  c              ·          ·
 └── lookup-join  ·         ·              (c, b, c)  ·
      │           type      left outer     ·          ·
      │           pred      @3 < 20        ·          ·
      ├── scan    ·         ·              (c)        ·
      │           table     small@primary  ·          ·
      │           spans     ALL            ·          ·
      └── scan    ·         ·              (b, c)     ·
·                 table     large@bc       ·          ·

# Left join with ON filter on non-covering index
# TODO(radu): this doesn't use lookup join yet, the current rules don't cover
# left join with ON condition on columns that are not covered by the index.
query TTTTT
EXPLAIN (VERBOSE) SELECT small.c, large.d FROM small LEFT JOIN large ON small.c = large.b AND large.d < 30
----
render          ·         ·              (c, d)     ·
 │              render 0  c              ·          ·
 │              render 1  d              ·          ·
 └── join       ·         ·              (b, d, c)  ·
      │         type      right outer    ·          ·
      │         equality  (b) = (c)      ·          ·
      ├── scan  ·         ·              (b, d)     ·
      │         table     large@primary  ·          ·
      │         spans     ALL            ·          ·
      │         filter    d < 30         ·          ·
      └── scan  ·         ·              (c)        ·
·               table     small@primary  ·          ·
·               spans     ALL            ·          ·

###########################################################
#  LOOKUP JOINS ON IMPLICIT INDEX KEY COLUMNS             #
#  https://github.com/cockroachdb/cockroach/issues/31777  #
###########################################################
statement ok
CREATE TABLE t (a INT, b INT, c INT, d INT, e INT)

statement ok
CREATE TABLE u (a INT, b INT, c INT, d INT, e INT, PRIMARY KEY (a DESC, b, c))

# Test index with all primary key columns implicit.
statement ok
CREATE INDEX idx ON u (d)

query TTTTT
EXPLAIN (VERBOSE) SELECT u.a FROM t JOIN u ON t.d = u.d AND t.a = u.a WHERE t.e = 5
----
render            ·         ·          (a)              ·
 │                render 0  a          ·                ·
 └── lookup-join  ·         ·          (a, d, e, a, d)  ·
      │           type      inner      ·                ·
      ├── scan    ·         ·          (a, d, e)        ·
      │           table     t@primary  ·                ·
      │           spans     ALL        ·                ·
      │           filter    e = 5      ·                ·
      └── scan    ·         ·          (a, d)           ·
·                 table     u@idx      ·                ·

# Test unique version of same index. (Lookup join should not use column a.)
statement ok
DROP INDEX u@idx

statement ok
CREATE UNIQUE INDEX idx ON u (d)

query TTTTT
EXPLAIN (VERBOSE) SELECT u.a FROM t JOIN u ON t.d = u.d AND t.a = u.a WHERE t.e = 5
----
render            ·         ·          (a)              ·
 │                render 0  a          ·                ·
 └── lookup-join  ·         ·          (a, d, e, a, d)  ·
      │           type      inner      ·                ·
      │           pred      @1 = @4    ·                ·
      ├── scan    ·         ·          (a, d, e)        ·
      │           table     t@primary  ·                ·
      │           spans     ALL        ·                ·
      │           filter    e = 5      ·                ·
      └── scan    ·         ·          (a, d)           ·
·                 table     u@idx      ·                ·

# Test index with first primary key column explicit and the rest implicit.
statement ok
DROP INDEX u@idx CASCADE

statement ok
CREATE INDEX idx ON u (d, a)

query TTTTT
EXPLAIN (VERBOSE) SELECT u.a FROM t JOIN u ON t.d = u.d AND t.a = u.a AND t.b = u.b WHERE t.e = 5
----
render            ·         ·          (a)                    ·
 │                render 0  a          ·                      ·
 └── lookup-join  ·         ·          (a, b, d, e, a, b, d)  ·
      │           type      inner      ·                      ·
      ├── scan    ·         ·          (a, b, d, e)           ·
      │           table     t@primary  ·                      ·
      │           spans     ALL        ·                      ·
      │           filter    e = 5      ·                      ·
      └── scan    ·         ·          (a, b, d)              ·
·                 table     u@idx      ·                      ·

# Test index with middle primary key column explicit and the rest implicit.
statement ok
DROP INDEX u@idx

statement ok
CREATE INDEX idx ON u (d, b)

query TTTTT
EXPLAIN (VERBOSE) SELECT u.a FROM t JOIN u ON t.d = u.d AND t.a = u.a AND t.b = u.b WHERE t.e = 5
----
render            ·         ·          (a)                    ·
 │                render 0  a          ·                      ·
 └── lookup-join  ·         ·          (a, b, d, e, a, b, d)  ·
      │           type      inner      ·                      ·
      ├── scan    ·         ·          (a, b, d, e)           ·
      │           table     t@primary  ·                      ·
      │           spans     ALL        ·                      ·
      │           filter    e = 5      ·                      ·
      └── scan    ·         ·          (a, b, d)              ·
·                 table     u@idx      ·                      ·

# Test index with last primary key column explicit and the rest implicit.
statement ok
DROP INDEX u@idx

statement ok
CREATE INDEX idx ON u (d, c)

query TTTTT
EXPLAIN (VERBOSE) SELECT u.a FROM t JOIN u ON t.d = u.d AND t.a = u.a AND t.d = u.d WHERE t.e = 5
----
render            ·         ·          (a)              ·
 │                render 0  a          ·                ·
 └── lookup-join  ·         ·          (a, d, e, a, d)  ·
      │           type      inner      ·                ·
      │           pred      @1 = @4    ·                ·
      ├── scan    ·         ·          (a, d, e)        ·
      │           table     t@primary  ·                ·
      │           spans     ALL        ·                ·
      │           filter    e = 5      ·                ·
      └── scan    ·         ·          (a, d)           ·
·                 table     u@idx      ·                ·
