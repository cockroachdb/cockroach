# LogicTest: 5node

# The following tables form the interleaved hierarchy:
#   name:             primary key:                # rows:   'a' = id mod X :
#   parent1           (pid1)                      40        8
#     child1          (pid1, cid1)                150       66
#       grandchild1   (pid1, cid1, gcid1)         410       201
#     child2          (pid1, cid2, cid3)          15        7
#       grandchild2   (pid1, cid2, cid3, gcid2)   51        13
#   parent2           (pid2)                      5         2
# Additional rows in child1, child2, and grandchild1 with no corresponding
# parent row are also inserted.
#
# All IDs belonging to a table (pid1 --> parent1, cid1 --> child1, cid2,cid3
# --> child2, etc.) start from 1 up to (# rows).
# Foreign keys are modded by their ancestor's (# rows). For example, for child1
# row with cid1=500, we take ((cid1-1) % 200 + 1) = 100 as pid1.
# One exception is cid3, which is taken as cid2 % 15.
# There's a column 'a' that's modded by a factor.
#
# This allows us to test the following edge cases (in order of tests):
#   - one-to-many (parent1 - child1)
#   - one-to-one and one-to-none (parent1 - child2)
#   - parent-grandchild (parent1 - grandchild1)
#   - multiple interleaved columns (child2 - grandchild2)
#   - additional ancestor above (child2 - grandchild2)
#   - no interleaved relationship (parent1 - parent2, parent2 - child1)

#################
# Create tables #
#################

statement ok
CREATE TABLE parent1 (pid1 INT PRIMARY KEY, pa1 INT, FAMILY (pid1,pa1))

statement ok
CREATE TABLE parent2 (pid2 INT PRIMARY KEY, pa2 INT, FAMILY (pid2, pa2))

statement ok
CREATE TABLE child1 (
  pid1 INT,
  cid1 INT,
  ca1 INT,
  PRIMARY KEY(pid1, cid1),
  FAMILY (pid1,cid1,ca1)
)
INTERLEAVE IN PARENT parent1 (pid1)

statement ok
CREATE TABLE child2 (
  pid1 INT,
  cid2 INT,
  cid3 INT,
  ca2 INT,
  PRIMARY KEY(pid1, cid2, cid3),
  FAMILY (pid1,cid2,cid3,ca2)
)
INTERLEAVE IN PARENT parent1 (pid1)

statement ok
CREATE TABLE grandchild1 (
  pid1 INT,
  cid1 INT,
  gcid1 INT,
  gca1 INT,
  PRIMARY KEY(pid1, cid1, gcid1),
  FAMILY (pid1,cid1,gcid1,gca1)
)
INTERLEAVE IN PARENT child1 (pid1, cid1)

# No foreign key since we are permitting the rows to overflow out of child2
# for pid1 > 15.
statement ok
CREATE TABLE grandchild2 (
  pid1 INT,
  cid2 INT,
  cid3 INT,
  gcid2 INT,
  gca2 INT,
  PRIMARY KEY(pid1, cid2, cid3, gcid2),
  FAMILY (pid1, cid2, cid3, gcid2, gca2)
)
INTERLEAVE IN PARENT child2 (pid1, cid2, cid3)

####################
# Split our ranges #
####################

# Split at parent1 key into five parts.
statement ok
ALTER TABLE parent1 SPLIT AT SELECT i FROM generate_series(8, 32, 8) AS g(i)

# Split at child1 keys in between parent1 parts (total 10 parts).
statement ok
ALTER TABLE child1 SPLIT AT SELECT pid1, pid1 + 40 FROM
generate_series(4, 36, 8) AS g(pid1)

# Split at grandchild2 keys in between the 10 parts (total 20 parts).
statement ok
ALTER TABLE grandchild2 SPLIT AT SELECT pid1, pid1 + 40, pid1, pid1 FROM
generate_series(2, 38, 4) AS g(pid1)

# Relocate the twenty parts to the five nodes.
statement ok
ALTER TABLE grandchild2 EXPERIMENTAL_RELOCATE
  SELECT ARRAY[((i-1)/2)::INT%5+1], i, i+20, i, i FROM generate_series(1, 39, 2) AS g(i)

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE parent1]
----
start_key                   end_key                     replicas  lease_holder
NULL                        /2/#/56/1/42/2/#/58/1/2     {1}       1
/2/#/56/1/42/2/#/58/1/2     /4/#/55/1/44                {2}       2
/4/#/55/1/44                /6/#/56/1/46/6/#/58/1/6     {3}       3
/6/#/56/1/46/6/#/58/1/6     /8                          {4}       4
/8                          /10/#/56/1/50/10/#/58/1/10  {5}       5
/10/#/56/1/50/10/#/58/1/10  /12/#/55/1/52               {1}       1
/12/#/55/1/52               /14/#/56/1/54/14/#/58/1/14  {2}       2
/14/#/56/1/54/14/#/58/1/14  /16                         {3}       3
/16                         /18/#/56/1/58/18/#/58/1/18  {4}       4
/18/#/56/1/58/18/#/58/1/18  /20/#/55/1/60               {5}       5
/20/#/55/1/60               /22/#/56/1/62/22/#/58/1/22  {1}       1
/22/#/56/1/62/22/#/58/1/22  /24                         {2}       2
/24                         /26/#/56/1/66/26/#/58/1/26  {3}       3
/26/#/56/1/66/26/#/58/1/26  /28/#/55/1/68               {4}       4
/28/#/55/1/68               /30/#/56/1/70/30/#/58/1/30  {5}       5
/30/#/56/1/70/30/#/58/1/30  /32                         {1}       1
/32                         /34/#/56/1/74/34/#/58/1/34  {2}       2
/34/#/56/1/74/34/#/58/1/34  /36/#/55/1/76               {3}       3
/36/#/55/1/76               /38/#/56/1/78/38/#/58/1/38  {4}       4
/38/#/56/1/78/38/#/58/1/38  NULL                        {5}       5

query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE child1]
----
start_key                   end_key                     replicas  lease_holder
NULL                        /2/#/56/1/42/2/#/58/1/2     {1}       1
/2/#/56/1/42/2/#/58/1/2     /4/#/55/1/44                {2}       2
/4/#/55/1/44                /6/#/56/1/46/6/#/58/1/6     {3}       3
/6/#/56/1/46/6/#/58/1/6     /8                          {4}       4
/8                          /10/#/56/1/50/10/#/58/1/10  {5}       5
/10/#/56/1/50/10/#/58/1/10  /12/#/55/1/52               {1}       1
/12/#/55/1/52               /14/#/56/1/54/14/#/58/1/14  {2}       2
/14/#/56/1/54/14/#/58/1/14  /16                         {3}       3
/16                         /18/#/56/1/58/18/#/58/1/18  {4}       4
/18/#/56/1/58/18/#/58/1/18  /20/#/55/1/60               {5}       5
/20/#/55/1/60               /22/#/56/1/62/22/#/58/1/22  {1}       1
/22/#/56/1/62/22/#/58/1/22  /24                         {2}       2
/24                         /26/#/56/1/66/26/#/58/1/26  {3}       3
/26/#/56/1/66/26/#/58/1/26  /28/#/55/1/68               {4}       4
/28/#/55/1/68               /30/#/56/1/70/30/#/58/1/30  {5}       5
/30/#/56/1/70/30/#/58/1/30  /32                         {1}       1
/32                         /34/#/56/1/74/34/#/58/1/34  {2}       2
/34/#/56/1/74/34/#/58/1/34  /36/#/55/1/76               {3}       3
/36/#/55/1/76               /38/#/56/1/78/38/#/58/1/38  {4}       4
/38/#/56/1/78/38/#/58/1/38  NULL                        {5}       5

query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE grandchild1]
----
start_key                   end_key                     replicas  lease_holder
NULL                        /2/#/56/1/42/2/#/58/1/2     {1}       1
/2/#/56/1/42/2/#/58/1/2     /4/#/55/1/44                {2}       2
/4/#/55/1/44                /6/#/56/1/46/6/#/58/1/6     {3}       3
/6/#/56/1/46/6/#/58/1/6     /8                          {4}       4
/8                          /10/#/56/1/50/10/#/58/1/10  {5}       5
/10/#/56/1/50/10/#/58/1/10  /12/#/55/1/52               {1}       1
/12/#/55/1/52               /14/#/56/1/54/14/#/58/1/14  {2}       2
/14/#/56/1/54/14/#/58/1/14  /16                         {3}       3
/16                         /18/#/56/1/58/18/#/58/1/18  {4}       4
/18/#/56/1/58/18/#/58/1/18  /20/#/55/1/60               {5}       5
/20/#/55/1/60               /22/#/56/1/62/22/#/58/1/22  {1}       1
/22/#/56/1/62/22/#/58/1/22  /24                         {2}       2
/24                         /26/#/56/1/66/26/#/58/1/26  {3}       3
/26/#/56/1/66/26/#/58/1/26  /28/#/55/1/68               {4}       4
/28/#/55/1/68               /30/#/56/1/70/30/#/58/1/30  {5}       5
/30/#/56/1/70/30/#/58/1/30  /32                         {1}       1
/32                         /34/#/56/1/74/34/#/58/1/34  {2}       2
/34/#/56/1/74/34/#/58/1/34  /36/#/55/1/76               {3}       3
/36/#/55/1/76               /38/#/56/1/78/38/#/58/1/38  {4}       4
/38/#/56/1/78/38/#/58/1/38  NULL                        {5}       5

###############
# Merge joins #
###############

query T
EXPLAIN SELECT * FROM parent1 JOIN child1 USING(pid1)
----
distribution: full
vectorized: true
·
• merge join
│ equality: (pid1) = (pid1)
│ left cols are key
│
├── • scan
│     missing stats
│     table: parent1@primary
│     spans: FULL SCAN
│
└── • scan
      missing stats
      table: child1@primary
      spans: FULL SCAN

# Select over two ranges for parent/child with split at children key.
query T
EXPLAIN (VERBOSE) SELECT * FROM parent1 JOIN child1 USING(pid1) WHERE pid1 >= 3 AND pid1 <= 5
----
distribution: full
vectorized: true
·
• project
│ columns: (pid1, pa1, cid1, ca1)
│ estimated row count: 30 (missing stats)
│
└── • merge join (inner)
    │ columns: (pid1, pa1, pid1, cid1, ca1)
    │ estimated row count: 30 (missing stats)
    │ equality: (pid1) = (pid1)
    │ left cols are key
    │ merge ordering: +"(pid1=pid1)"
    │
    ├── • scan
    │     columns: (pid1, pa1)
    │     ordering: +pid1
    │     estimated row count: 3 (missing stats)
    │     table: parent1@primary
    │     spans: /3-/5/#
    │     parallel
    │
    └── • scan
          columns: (pid1, cid1, ca1)
          ordering: +pid1
          estimated row count: 30 (missing stats)
          table: child1@primary
          spans: /3/#/55/1-/5/#/55/2

query T
EXPLAIN (DISTSQL) SELECT * FROM parent1 JOIN child1 USING(pid1) WHERE pid1 >= 3 AND pid1 <= 5
----
distribution: full
vectorized: true
·
• merge join
│ equality: (pid1) = (pid1)
│ left cols are key
│
├── • scan
│     missing stats
│     table: parent1@primary
│     spans: [/3 - /5]
│
└── • scan
      missing stats
      table: child1@primary
      spans: [/3 - /5]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzEVN1q20wQvf-eYpnc2F_WrFY_LggMCo3bKjhyaru00OpCkaa2QNGquytoCH73Istgybiy3bj0TrMzZ-bMmYNeQP3IwIXxl4fJjR-Q3q0_X8w_TvpkPp6M3y7I_-TdbHpPikhirjm5m_oBiVdplnDyae4H70mvSBPeJ58_jGfjOiDfSsOwcESsPrkJbpuP8Yg4faCQiwSD6AkVuF-BAwUTKFgQUiikiFEpIavUy6bQT36Ca1BI86LU9bNOdYbgQpkLmaDEBCgkqKM0q_LhOqQQC4ng7koDMRAFG7YKYVpql3iceib1bOo5EK4piFJvB4UUlI6WCK69pg0yvEHmwKhF9JjhDKMEJTPaA7c6eoVMnyL5DBTmRZQrlzBrwGx2xRyHcWbbe0R2vR-fySpSq3ZXj8Nm5y1Z_qdkzXbb-s6HuG6JXo6y-VvKuz6HTg0ev64Gn1R1YPt7lEu8E2mOktltTIbfdc_j1_2RTJer-hNoyzLWEddYra3M0w_BT3VNQ_8Bc9jVBX1zBl3rRN_ss60C84K-Mf-Jb5y_7Buj-xAzVIXIFe79Ag93NqplMFliLZESpYzxQYp4M6YOpxvc5iFBpevsmzrw8zpVEWyC-T6YN8FWC8zPAw-7weYZk83zwMNusNUpmNFN236NYN3gI4I5rxGsG3xEsOFZgoXr_34FAAD__66Tv0Q=

# Swap parent1 and child1 tables.
query T
EXPLAIN (VERBOSE) SELECT * FROM child1 JOIN parent1 USING(pid1) WHERE pid1 >= 3 AND pid1 <= 5
----
distribution: full
vectorized: true
·
• project
│ columns: (pid1, cid1, ca1, pa1)
│ estimated row count: 30 (missing stats)
│
└── • merge join (inner)
    │ columns: (pid1, cid1, ca1, pid1, pa1)
    │ estimated row count: 30 (missing stats)
    │ equality: (pid1) = (pid1)
    │ right cols are key
    │ merge ordering: +"(pid1=pid1)"
    │
    ├── • scan
    │     columns: (pid1, cid1, ca1)
    │     ordering: +pid1
    │     estimated row count: 30 (missing stats)
    │     table: child1@primary
    │     spans: /3/#/55/1-/5/#/55/2
    │
    └── • scan
          columns: (pid1, pa1)
          ordering: +pid1
          estimated row count: 3 (missing stats)
          table: parent1@primary
          spans: /3-/5/#
          parallel

query T
EXPLAIN (DISTSQL) SELECT * FROM child1 JOIN parent1 USING(pid1) WHERE pid1 >= 3 AND pid1 <= 5
----
distribution: full
vectorized: true
·
• merge join
│ equality: (pid1) = (pid1)
│ right cols are key
│
├── • scan
│     missing stats
│     table: child1@primary
│     spans: [/3 - /5]
│
└── • scan
      missing stats
      table: parent1@primary
      spans: [/3 - /5]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzEVE1r20AQvfdXLNNL3KyRVh8uCAwKjdsqOHJqu7TQ6qBop7ZA0aq7K2gI_u_FXoMl4yp249KbZmfezJs3Dz2B-llAAKOvd-OrKCYX19FsPvs07pHZaDx6NydvyPvp5JZky7zgjNxMophUqcRSM_J5FsUfyEWVc9YjXz6OpiMTkO-1bbs4JG6PXMXXzcdsSPweUCgFxzh9QAXBN2BAwQEKLiQUKikyVErIdeppUxjxXxDYFPKyqrV51rkuEAKoSyE5SuRAgaNO82KdT1YJhUxIhGBXGou-qKxBqxAmtQ5IyGjo0NCloQ_JioKo9XZQQkHpdIEQeCvaIMMaZA6Mmqf3BU4x5Sgtuz3Q6BhWMn9I5SNQmFVpqQJiudZry_ct1re87ZfleXt0dhPuH8kyVct275DBZvMtZfa3lJ122-25D3E-H1nnj2R3fQ6dGkJ2uR58VNWBvW9RLvBG5CVKy2tjCvyhL0J22RvKfLE0n0D3LeN1ucZtbeUcfwJ2pGsa8vct3wTOGV1zAmX3WNfscz6jb5z_4hv_H_vG7j7CFFUlSoV7v8DDne31MsgXaCRSopYZ3kmRbcaYcLLBbR44Km2yb00QlSa1JtgEs30wa4LdFpidBh50g50TJjungQfdYLdTMLubtvcSwbrBzwjmv0SwbvAzgg1OEixZvfodAAD__1YJv0M=

# Select over two ranges for parent/child with split at grandchild key.
# Also, rows with pid1 <= 30 should have 4 rows whereas pid1 > 30 should
# have 3 rows.
query T
EXPLAIN (VERBOSE) SELECT * FROM parent1 JOIN child1 ON parent1.pid1 = child1.pid1 WHERE parent1.pid1 >= 29 AND parent1.pid1 <= 31 ORDER BY parent1.pid1
----
distribution: full
vectorized: true
·
• merge join (inner)
│ columns: (pid1, pa1, pid1, cid1, ca1)
│ ordering: +pid1
│ estimated row count: 30 (missing stats)
│ equality: (pid1) = (pid1)
│ left cols are key
│ merge ordering: +"(pid1=pid1)"
│
├── • scan
│     columns: (pid1, pa1)
│     ordering: +pid1
│     estimated row count: 3 (missing stats)
│     table: parent1@primary
│     spans: /29-/31/#
│     parallel
│
└── • scan
      columns: (pid1, cid1, ca1)
      ordering: +pid1
      estimated row count: 30 (missing stats)
      table: child1@primary
      spans: /29/#/55/1-/31/#/55/2

query T
EXPLAIN (DISTSQL) SELECT * FROM parent1 JOIN child1 ON parent1.pid1 = child1.pid1 WHERE parent1.pid1 >= 29 AND parent1.pid1 <= 31 ORDER BY parent1.pid1
----
distribution: full
vectorized: true
·
• merge join
│ equality: (pid1) = (pid1)
│ left cols are key
│
├── • scan
│     missing stats
│     table: parent1@primary
│     spans: [/29 - /31]
│
└── • scan
      missing stats
      table: child1@primary
      spans: [/29 - /31]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJy8UlFvm0wQfP9-xWnzEn8597jDODWSJdKaqo4cSLGltmp5ILC1kQhHDyw1svzfK4wrF8smuG7zxu3u7OwMs4L8ewIm2J_uJzdjh1yOxtPZ9MOkQ6b2xH47I_-Td557R7JAYVpwcuuOHRIu4iTixHV-lV9lccTJcNuoXh_f255NLmsTX5eapuOQiEGH3DijQ91wSHTeIa43sj3y5nONASikMkIneMQczC9QFgzwKWRKhpjnUpXl1WZoHP0AU6MQp9myKMs-hVAqBHMFRVwkCCbMgocEPQwiVKzcFWERxMlm9ZbWylT8GKgnoDDNgjQ3CdM1dsGMPuPsWts-XjPOdK3LdM4uwF9TkMtiy7oje3giiyBf1GksDv7ap5AXwRzB5Gv6Z9fr9bXVfzj9eGYYTJylQBxVsNsjVYQKo_09VyVxq6kDZtyhmuOtjFNUzKhjEvxWXFr8qjNU8XxRfQIFd1mYxOLUEtTSqdWjlrGnfKdKP0_VgXsd2ZUZ69emj7H3auy8fSq0tpkWg-7xaPzFRJ9wu2iZaDGoYsv_lQJxVMHLJbr3gok-cIqHeSbTHFulVSvFYDTHyqJcLlWI90qGG5rq6W5wGzcjzIuq268e47RqlQe2B4tmMD-BWZwGFs1gsQ_WfgfrzWfrjeDrGljbB_fOcbsZ_IzbxjluN4Ofcbt_ktv--r-fAQAA__8HOtjL

# Parent-child where pid1 <= 15 have one joined row and pid1 > 15 have no
# joined rows (since child2 only has 15 rows up to pid1 = 15).
# Note this spans all 5 nodes, which makes sense since we want to read all
# parent rows even if child rows are non-existent (so we can support OUTER
# joins).
# TODO(richardwu): we can remove nodes reading from just one table for INNER
# joins or LEFT/RIGHT joins.
query T
EXPLAIN (VERBOSE) SELECT * FROM parent1 JOIN child2 USING(pid1) WHERE pid1 >= 12 ORDER BY pid1
----
distribution: full
vectorized: true
·
• project
│ columns: (pid1, pa1, cid2, cid3, ca2)
│ ordering: +pid1
│ estimated row count: 333 (missing stats)
│
└── • merge join (inner)
    │ columns: (pid1, pa1, pid1, cid2, cid3, ca2)
    │ ordering: +pid1
    │ estimated row count: 333 (missing stats)
    │ equality: (pid1) = (pid1)
    │ left cols are key
    │ merge ordering: +"(pid1=pid1)"
    │
    ├── • scan
    │     columns: (pid1, pa1)
    │     ordering: +pid1
    │     estimated row count: 333 (missing stats)
    │     table: parent1@primary
    │     spans: /12-
    │
    └── • scan
          columns: (pid1, cid2, cid3, ca2)
          ordering: +pid1
          estimated row count: 333 (missing stats)
          table: child2@primary
          spans: /12/#/56/1-

query T
EXPLAIN (DISTSQL) SELECT * FROM parent1 JOIN child2 USING(pid1) WHERE pid1 >= 12 ORDER BY pid1
----
distribution: full
vectorized: true
·
• merge join
│ equality: (pid1) = (pid1)
│ left cols are key
│
├── • scan
│     missing stats
│     table: parent1@primary
│     spans: [/12 - ]
│
└── • scan
      missing stats
      table: child2@primary
      spans: [/12 - ]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJy8ll1vm0gUhu_3V4zO3iSbsWCGj9hIkdjdeLeOEju1U7VV6wtipjaSAxSw1Cjyf68Ap44_mAMdmTuP4WHOO-cZ6bxA-n0JDvQ_3d_-PRiSs-vB5GHy_vacTPq3_X8fyF_kv_HojsReIsKMkZvRYEhmi2Dpc_JhMhj-T87iwGfn5OO7_rhP8t_k60rXDXFFGCej8XV_TP75XDwACmHki6H3JFJwvkD-BwcKBlAwgYIFUwpxEs1EmkZJ_spLAQz8H-DoFIIwXmX531MKsygR4LxAFmRLAQ48eI9LMRaeLxJNBwq-yLxgWWyzKd2Nk-DJS56BwiT2wtQhGuMdjXHtT82yNKZZnHihTziJsoVIUpiuKUSrbLPndqvHZ7Lw0sXuJi6D6XpKIc28uQCHrenv1d7b_Wx50kdK5_pr2bbe0XgRws5XfLPoakzjZSJWJlIKxCsDbb8TJb5IhL__nYt841pvHTmbO5HMxU0UhCLR2F5jl-Jbduayi_OrJJgvyp9AYbTKHOIy6nLqGtQ1qWtR195Lv01mqCU7UvMw6kSxxqzd19-WhdVk7tTE6uvD6qu_1b6jMfPVH8vcLHJ_mHmqG9EgklXzRrDXO9BKHF4Zp8X7wE5_H3j9RvHa7lW1p6Mx-1TGNQhi1zWunRy8MkeLqvHTq2bU75BRWzW7o7HurzZ1N4uiTd1TqdYgyGVd1drJwStztKiacXrVzPodMmurVtWezs6wdirpGkTq1pWu7US8MlGL-pntDplHyhmLNI7CVOwUUvVlPQ8k_LkojymNVslM3CfRrNimXI4KrhhTfJFm5VNeLgZh-SgvsD5sq8A9FZgp1c0sOc0aHBlvBtsqcE8FZkp17x3ZAc33af0tbcjP25DCbPfM9H3aVBFcDiOCy2FEcDmMCY7QiOCWiuByGBFcDiOCy2FMcIRGBLdVBL9UUVQOI4rKYURROYwpitCIol0VReUwoqgcRhSVw5iiCI0o2lNRlCnNCQiNSIrQiKUIjWmK4disoDYsqE0LauOC4rygNjAwpYmBHYwMjWyV05itchqzVU6jtiI4ZmuTYemwZ02mpaY0Zmujeakxjtl6MDxIbZ2u__gZAAD__73jyJg=

# These rows are all on the same node 1 (gateway).
query T
EXPLAIN (VERBOSE) SELECT * FROM parent1 JOIN child2 USING(pid1) WHERE pid1 IN (1, 11, 21, 31) ORDER BY pid1
----
distribution: full
vectorized: true
·
• project
│ columns: (pid1, pa1, cid2, cid3, ca2)
│ ordering: +pid1
│ estimated row count: 40 (missing stats)
│
└── • merge join (inner)
    │ columns: (pid1, pa1, pid1, cid2, cid3, ca2)
    │ ordering: +pid1
    │ estimated row count: 40 (missing stats)
    │ equality: (pid1) = (pid1)
    │ left cols are key
    │ merge ordering: +"(pid1=pid1)"
    │
    ├── • scan
    │     columns: (pid1, pa1)
    │     ordering: +pid1
    │     estimated row count: 4 (missing stats)
    │     table: parent1@primary
    │     spans: /1/0 /11/0 /21/0 /31/0
    │     parallel
    │
    └── • scan
          columns: (pid1, cid2, cid3, ca2)
          ordering: +pid1
          estimated row count: 40 (missing stats)
          table: child2@primary
          spans: /1/#/56/1-/1/#/56/2 /11/#/56/1-/11/#/56/2 /21/#/56/1-/21/#/56/2 /31/#/56/1-/31/#/56/2

query T
EXPLAIN (DISTSQL) SELECT * FROM parent1 JOIN child2 USING(pid1) WHERE pid1 IN (1, 11, 21, 31) ORDER BY pid1
----
distribution: full
vectorized: true
·
• merge join
│ equality: (pid1) = (pid1)
│ left cols are key
│
├── • scan
│     missing stats
│     table: parent1@primary
│     spans: [/1 - /1] [/11 - /11] [/21 - /21] [/31 - /31]
│
└── • scan
      missing stats
      table: child2@primary
      spans: [/1 - /1] [/11 - /11] [/21 - /21] [/31 - /31]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJycklFvlEAQx9_9FJPx5U63gd2zfSAxQS0qDYUK16gxPKzseEdCd3F3STSX--4G0NRrrmp9IbMz85_5_Sfs0H3tMMLkw1X2Is1hcZ5W6-pdtoQqyZJXa3gCr8viEnppSXsOF0WaQ7NtOyXgukrzN7DoW8WX8P5tUiYwxjCO4Qw4ZyA4gxVfQlGeJyW8_Dg1IENtFOXyhhxGn5BjzbC3piHnjB1Tu6khVd8wChm2uh_8mK4ZNsYSRjv0re8II1zLzx2VJBXZIESGirxsu2nsT-S4t-2NtN-RYdVL7SIIeBCejJ8gv84ykFrBCozfknVY7xmawd8udF5uCCO-Z_8HxQ-h5tMdZXocnJ4F_ORXJP4NTNwLdsszaGMVWVIHLPWo_FvLEXeXZDd0YVpNNhCH7jr64hcxf7p8btvNdg6RYTH4CGLOYsHiZyw-ZfHZvX5WDzl0Sa432tFdX0cnh6MZUhuaj-PMYBu6sqaZ1szPYtJNCUXOz1UxP1I9laY_4Xcxf4BY3BWLP4pXB-JwX-8f_QgAAP__02Qrig==

# Parent-grandchild.
# We add the pa1 > 0 condition so a lookup join is not considered to be a better plan.
query T
EXPLAIN (VERBOSE)
  SELECT * FROM parent1 JOIN grandchild2 USING(pid1) WHERE
    pid1 >= 11 AND pid1 <= 13
    OR pid1 >= 19 AND pid1 <= 21
    OR pid1 >= 31 AND pid1 <= 33
    OR pa1 > 0
----
distribution: full
vectorized: true
·
• project
│ columns: (pid1, pa1, cid2, cid3, gcid2, gca2)
│ estimated row count: 1,000 (missing stats)
│
└── • merge join (inner)
    │ columns: (pid1, pa1, pid1, cid2, cid3, gcid2, gca2)
    │ estimated row count: 1,000 (missing stats)
    │ equality: (pid1) = (pid1)
    │ left cols are key
    │ merge ordering: +"(pid1=pid1)"
    │
    ├── • filter
    │   │ columns: (pid1, pa1)
    │   │ ordering: +pid1
    │   │ estimated row count: 333 (missing stats)
    │   │ filter: ((((pid1 >= 11) AND (pid1 <= 13)) OR ((pid1 >= 19) AND (pid1 <= 21))) OR ((pid1 >= 31) AND (pid1 <= 33))) OR (pa1 > 0)
    │   │
    │   └── • scan
    │         columns: (pid1, pa1)
    │         ordering: +pid1
    │         estimated row count: 1,000 (missing stats)
    │         table: parent1@primary
    │         spans: FULL SCAN
    │
    └── • scan
          columns: (pid1, cid2, cid3, gcid2, gca2)
          ordering: +pid1
          estimated row count: 1,000 (missing stats)
          table: grandchild2@primary
          spans: FULL SCAN

query T
EXPLAIN (DISTSQL)
  SELECT * FROM parent1 JOIN grandchild2 USING(pid1) WHERE
    pid1 >= 11 AND pid1 <= 13
    OR pid1 >= 19 AND pid1 <= 21
    OR pid1 >= 31 AND pid1 <= 33
    OR pa1 > 0
----
distribution: full
vectorized: true
·
• merge join
│ equality: (pid1) = (pid1)
│ left cols are key
│
├── • filter
│   │ filter: ((((pid1 >= 11) AND (pid1 <= 13)) OR ((pid1 >= 19) AND (pid1 <= 21))) OR ((pid1 >= 31) AND (pid1 <= 33))) OR (pa1 > 0)
│   │
│   └── • scan
│         missing stats
│         table: parent1@primary
│         spans: FULL SCAN
│
└── • scan
      missing stats
      table: grandchild2@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsl1-PozYUxd_7KSz3Jek6AtuEIUgjsepm26xmk20yVSu1eWCDmyBlgRoidTSa714RJhkCxBeH1cxL3vjjH1zuOcdXPOL03y128fjPL3fvJ1PU-zBZ3C9-u-ujxfhu_PM9-gl9nM8-o8SXIsoo-jSbTNFa-lGw2oTbgKHfF5PpL6iXhAHtoz9-Hc_HqNfr7c_R3zvT5OIWUdpH76cfUOnq6hZR3u-j2RxVF4-aFjPab1zNGx_N-WF14h_WIrOPCY7iQEz9byLF7l-YYoIZJphjgi1M8BAvCU5kvBJpGst8yeMemAT_YdckOIySXZZfXhK8iqXA7iPOwmwrsIvv_a9bMRd-IKRhYoIDkfnhdv-a5955iQy_-fIBE7xI_Ch10cBgxo_G0DaoYbHi2DGowZAfBYijONsImeLlE8HxLnt5dZr5a4Fd-kTal_cx3GZCCmkMT2srrrt7zbyyYq7rTqb3znN3vbJsh1vPepSx0VmMHZ_YwPHzr-O8wnnsKOjhTqVFL1_99QFt_HRz-skexcunlzYynTaWVaYVmUup-D5S630HP_sdL8-JZSCkCKrPeZe_uNWqhpZ8FnItPsVhlLek4q6t-CfrefRd_1aG601xiAme7TIXeZR4jHiceBbxhsSziXdz1utWi4_bRU2FN9Y8jQdxYrCKgOWyWtQ0PKmJahin5fZwxjIDw8qPh_l165KtAij1uFXY161CtVXoKE41toqusnfZNujbbBv2q2wbrL1grG1ES5oMDPsonF0c58LZl0QUKPUY0ZtrRFUR1VCcMp2IdpS9S0TZ20T05lUiytsLxttGtFmegeFcEkygwGMwnWswVcHU0JlynWBeJHaXOPK3iaPzKnG02stktY2jMzCoeVBpaD6f5DJR85JEAjUeEzm6JlKVSA2pqaWTyEv17hJK621COXr1v9-GiuYiTeIoFZW_4OYnm_k3iWAtik6l8U6uxBcZr_avKU5ne25_IRBpVtylxckkKm7lBZZhWoVpGeYnMNWDnS4wZZ1ouwvNTDXNNHrG9GCnC1zpmS5td6ErPavRXGlSS91wSwkzwOJDJW2rYbtLPtQwkA81DOUDoIF8qGkoHzdd8qGGgXyoYSgfAA3kQ01D-XC65GOkngAmMAJqA0RrBqhpaAioaXAKADg0BtQ45HOqMzxrigM04HSAhqwO4YDXARwyO63NEh23U_UsoRZg99o00bK7mobsrqZBuwM4ZHc1Dtq9Nki17K6mIburadDuAA7ZXY2Ddq-NUy271wbLqd0dwO61yaJldzUN2V1Ng3YHcMjuahy0e22qatldTUN2V9Og3QEcsrsah-zO1D-kVbsvn374PwAA__8Tct5X

query T
EXPLAIN (VERBOSE)
  SELECT * FROM grandchild2 JOIN parent1 USING(pid1) WHERE
    pid1 >= 11 AND pid1 <= 13
    OR pid1 >= 19 AND pid1 <= 21
    OR pid1 >= 31 AND pid1 <= 33
    OR pa1 > 0
----
distribution: full
vectorized: true
·
• project
│ columns: (pid1, cid2, cid3, gcid2, gca2, pa1)
│ estimated row count: 1,000 (missing stats)
│
└── • merge join (inner)
    │ columns: (pid1, cid2, cid3, gcid2, gca2, pid1, pa1)
    │ estimated row count: 1,000 (missing stats)
    │ equality: (pid1) = (pid1)
    │ right cols are key
    │ merge ordering: +"(pid1=pid1)"
    │
    ├── • scan
    │     columns: (pid1, cid2, cid3, gcid2, gca2)
    │     ordering: +pid1
    │     estimated row count: 1,000 (missing stats)
    │     table: grandchild2@primary
    │     spans: FULL SCAN
    │
    └── • filter
        │ columns: (pid1, pa1)
        │ ordering: +pid1
        │ estimated row count: 333 (missing stats)
        │ filter: ((((pid1 >= 11) AND (pid1 <= 13)) OR ((pid1 >= 19) AND (pid1 <= 21))) OR ((pid1 >= 31) AND (pid1 <= 33))) OR (pa1 > 0)
        │
        └── • scan
              columns: (pid1, pa1)
              ordering: +pid1
              estimated row count: 1,000 (missing stats)
              table: parent1@primary
              spans: FULL SCAN

query T
EXPLAIN (DISTSQL)
  SELECT * FROM grandchild2 JOIN parent1 USING(pid1) WHERE
    pid1 >= 11 AND pid1 <= 13
    OR pid1 >= 19 AND pid1 <= 21
    OR pid1 >= 31 AND pid1 <= 33
    OR pa1 > 0
----
distribution: full
vectorized: true
·
• merge join
│ equality: (pid1) = (pid1)
│ right cols are key
│
├── • scan
│     missing stats
│     table: grandchild2@primary
│     spans: FULL SCAN
│
└── • filter
    │ filter: ((((pid1 >= 11) AND (pid1 <= 13)) OR ((pid1 >= 19) AND (pid1 <= 21))) OR ((pid1 >= 31) AND (pid1 <= 33))) OR (pa1 > 0)
    │
    └── • scan
          missing stats
          table: parent1@primary
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsl1GP4jYXhu-_X2Gd7wa6RontECDSSFl12ZbVLGxhqlZqucgSFyKxSZoEqavR_PcqBAYIiU886czczF0S-7HPOX5fH-Ue0r-34MD49y-37ydT0vkwWdwtfrntksX4dvzjHfmBfJzPPpN14oX-ahNsfU4-zSZTEnuJDDNGfl1Mpj-RThz4rEt--3k8H5NOp7N_J3_uTFPIG8JYl7yffiBnX1c3hIlul8zmpDx5VDWZs27lbFG5tBDH2bF3nEvMLlAII19OvW8yBecPYECBAwUBFCyg0IclhTiJVjJNoySfcr8HJv4_4JgUgjDeZfnnJYVVlEhw7iELsq0EB-68r1s5l54vE8MECr7MvGC73-asdm6cBN-85DtQWMRemDqkZ3Dj_0bfNphh8eJ5aDCDEy_0iSBRtpFJCssHCtEuO2x_2vXrd7Lx0s3lfi6D5cOSQpp5awkOe6BPS6N_uezhxP-bFE7hcZ3wPgbbTCYyMVipxsWAs9eee648x3Em07vhQSXuufyOQwddnWOjWow_rljBifrthChxLn8U5nGk1TGL2jqe1okSXybSL6_zLt-40ayKI_ksk7X8FAVhfiolyWzlX1nHZe-6N0mw3hSPQGG2yxziMupy6grqWtTtU9em7qBWJFaD5HZhVeCVMU-jXhQbvKShyrDqY-pfxMSa-4ppXA811uoZVv7cz79bz3VVaKRkN7wq2qZTd20goZ6uDfZ2baiuDfY614b9ItcGb65nrmPRM-32DPtR4HbxnAvcfi6LaqQ0aGrRlunUWRQJ9WRR_mZRlUX561h08CIWFc31LHQsWi3jnjF8LmNqJDJsaswnJVFnRyTAkx3Fmx1VdhSvY8fhi9jRaq5iS8eOw57BzKOa--bhJZczM5_LkRq5jJo68ql51JkSifFkSuvNlCpTWq9jytGL__1WRDSXaRyFqSz9BVevbOY5SX8ti0ql0S5ZyS9JtNpvU7zO9tz-38CXaVaMiuJlEhZDeYDN4WEbmPFWtN2G5qaaZmXavKAvYLMMc42Ccz142AYuFVyXttvQpYJf0UJZcEt9Wpb6tJj6uPpt_KGGEX-oYcwfCI34Q01j_rCVFR-oCz5o4w81jPhDDWP-QGjEH2oa88ewjT9GbRSuhhGFq2FM4QiNKFxNox3gqoFcVJwhlwq76iA6IkdoROUIjckcwxGdIzgmdHbVR3SUzq76iI7UERrROkJjYsdwRO0Ijspd3UNZH5G7ThO9PnOdLqpLo3LX6qO6OCp3dSfF5K7TSnVpTO5azVQbx-Su1U6vcXU_ZSNE7jod9frMdVqqLo3KXaup6uKY3Lm6q5blvnz4378BAAD__52K3ak=

query T
EXPLAIN SELECT * FROM grandchild2 JOIN parent1 USING(pid1) WHERE
  pid1 >= 11 AND pid1 <= 13
  OR pid1 >= 19 AND pid1 <= 21
  OR pid1 >= 31 AND pid1 <= 33
  OR pa1 > 0
----
distribution: full
vectorized: true
·
• merge join
│ equality: (pid1) = (pid1)
│ right cols are key
│
├── • scan
│     missing stats
│     table: grandchild2@primary
│     spans: FULL SCAN
│
└── • filter
    │ filter: ((((pid1 >= 11) AND (pid1 <= 13)) OR ((pid1 >= 19) AND (pid1 <= 21))) OR ((pid1 >= 31) AND (pid1 <= 33))) OR (pa1 > 0)
    │
    └── • scan
          missing stats
          table: parent1@primary
          spans: FULL SCAN

# Join on multiple interleaved columns with an overarching ancestor (parent1).
# Note there are 5 nodes because the filter cid2 >= 12 AND cid2 <= 14
# creates a giant parent span which requires reading from all rows.
query T
EXPLAIN (DISTSQL)
  SELECT * FROM child2 JOIN grandchild2 ON
    child2.pid1=grandchild2.pid1
    AND child2.cid2=grandchild2.cid2
    AND child2.cid3=grandchild2.cid3
  WHERE
    child2.pid1 >= 5 AND child2.pid1 <= 7
    OR child2.cid2 >= 12 AND child2.cid2 <= 14
    OR gcid2 >= 49 AND gcid2 <= 51
----
distribution: full
vectorized: true
·
• merge join
│ equality: (pid1, cid2, cid3) = (pid1, cid2, cid3)
│ left cols are key
│
├── • scan
│     missing stats
│     table: child2@primary
│     spans: FULL SCAN
│
└── • filter
    │ filter: (((pid1 >= 5) AND (pid1 <= 7)) OR ((cid2 >= 12) AND (cid2 <= 14))) OR ((gcid2 >= 49) AND (gcid2 <= 51))
    │
    └── • scan
          missing stats
          table: grandchild2@primary
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsl12P4jYUhu_7K6zTG9IxTex8ECKNlFWXVVnNwpYZqZVaLrLEhUgsoUmQuhrNf69CYMgH-MSTHdGLuUtsP_E5x-_rozxC-s8aPBj98fnu3XhCeu_H9w_3v91p5H50N_rlgfxEPsymn8hiFa1DTj5OxxOyTIJNeBiYTkivVzz_vI1CRm7L0_shjbybvCfHRYso5LVF-ZDWWGU2V5ka-f3X0WxEetU9_9oZhiluiV39yGlucUsGmkams1Ow-ziOIONngjySzNKO7LJCWcMDtayst5mmAYVNHIpJ8FWk4P0JDChwoGACBQso2DCnsE3ihUjTOMmXPO6BcfgveAaFaLPdZfnwnMIiTgR4j5BF2VqABw_Bl7WYiSAUiW4AhVBkQbTeb1OE72-T6GuQfAMK99tgk3qkr3P9R912dKZbvHh2daZzEmxCYpI4W4kkhfkThXiXHXY-bfjlG1kF6aq6lc-oz6lvwvxpTiHNgqUAjz3Rl-VhVz9eOvfvk8wpRK4S4odonYlEJDqrFbqY8HIh-iX9eZ43njy4B1n4JfUdZw5C8svaq1Fl5T1jR84qqa_GWSUFPnPf4VDNixU7fS1OQpGIsP61G-rzG-qbN3kYSqvPHMYnkSzFxzja5OdRE8xa_J31Sl_QbpNouaoOAYXpLvPIMUnqW9S3qe9Qf0B9l_rDi6KxWpRgtzmX1tlMJnE_3urcqK08v7dd2Zu19xRrdzdccFNft_JnOx-3XveeUMjJUbgnuiZ26c5Awj3dGeztzmhW7Ip3hnPFO4O31zhv6duSjPu686x1p3jOte68rm8Vchqo-LZjYpd8i4R78i1_822zYlf07eCKvjXba9xs6dvziu7r7uu6VSETV8WtL0rnkkeRIE8eNd882qzYFT3qXtGjVntlWy096vZ1ZhyFbRuHl1zZzHhdmyokM1Sx6UszuuRUJM6TU603pzYrdkWnDv8nf85n4pyJdBtvUtHqv9jIMxXhUhT1TONdshCfk3ix36Z4ne65_Q9IKNKsmDWLl_GmmMoDbA-7XWDGO9FOF5obcprVaaNCV2CjDnOFgnM12O0C1wquSjtd6FrBG7QpLbglPy1LflpMflx2F3_IYcQfchjzB0Ij_pDTmD8cacUH8oIPuvhDDiP-kMOYPxAa8YecxvzhdvHHsIvC5TCicDmMKRyhEYXLabQDNBpIpeIMuVRYo4OoiByhEZUjNCZzDEd0juCY0Fmjj6gonTX6iIrUERrROkJjYsdwRO0Ijspd3kOZjchdpYk2z1yli6rSqNyV-qgqjspd3kkxuau0UlUak7tSM1XGMbkrtdMmLu-nbIjIXaWjNs9cpaWq0qjclZqqKo7Jncu7al3u86cf_gsAAP__Ue8MMQ==

query T
EXPLAIN
  SELECT * FROM child2 JOIN grandchild2 ON
    child2.pid1=grandchild2.pid1
    AND child2.cid2=grandchild2.cid2
    AND child2.cid3=grandchild2.cid3
  WHERE
    child2.pid1 >= 5 AND child2.pid1 <= 7
    OR child2.cid2 >= 12 AND child2.cid2 <= 14
    OR gcid2 >= 49 AND gcid2 <= 51
----
distribution: full
vectorized: true
·
• merge join
│ equality: (pid1, cid2, cid3) = (pid1, cid2, cid3)
│ left cols are key
│
├── • scan
│     missing stats
│     table: child2@primary
│     spans: FULL SCAN
│
└── • filter
    │ filter: (((pid1 >= 5) AND (pid1 <= 7)) OR ((cid2 >= 12) AND (cid2 <= 14))) OR ((gcid2 >= 49) AND (gcid2 <= 51))
    │
    └── • scan
          missing stats
          table: grandchild2@primary
          spans: FULL SCAN

# Aggregation over parent and child keys.
query T
EXPLAIN (DISTSQL)
  SELECT sum(parent1.pid1), sum(child1.cid1) FROM parent1 JOIN child1 USING(pid1) WHERE
    pid1 >= 10 AND pid1 <= 39
----
distribution: full
vectorized: true
·
• group (scalar)
│
└── • merge join
    │ equality: (pid1) = (pid1)
    │ left cols are key
    │
    ├── • scan
    │     missing stats
    │     table: parent1@primary
    │     spans: [/10 - /39]
    │
    └── • scan
          missing stats
          table: child1@primary
          spans: [/10 - /39]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzEl-GPokYUwL_3r5i8ftEcHswAiiSbuOnZ1suue1330iatHziZKokLdsCkl83-7xfA7CLoPEYgfnOA38x7M7_ngxeI_9uCC9O_vtzdzuak92m2eFr8cdcni-nd9JcnEu-feztP8DChH3eBT_tadmm1CbY-_bhKr5BfHx_uyeEh8vlhNif5bfJ1MZv_RnoZR_78ffo4zQfkn71hmPyGUKNPbuefildXN8Qc90GDMPL53HvmMbh_AwUNGGhgggYWaGDDUoOdiFY8jiORPvKSATP_f3ANDYJwt0_Sy0sNVpHg4L5AEiRbDi48ed-2_JF7Phd6Oq_PEy_YZssckpjsRPDsie-gwWLnhbFLdGroP-v2UKe6bRwGjk51agx0ytKRnd5ixAt9wkiUbLiIQYOHfeKSCYXlqwbRPjkE9R7Lt-9k48Wb4yiy55caxIm35uDSV-2y5IbH0-aH0npu2oQ1So-dTe99nkj4XHC_PM-HdOFaT53YqXsu1vxzFISpBiUPtvzfpDehH_o3Ilhv8p_FjM1Sxu_ZmCqHdbteC772kkjotHRYi6_3vQlNF81-sf7ZFa0a-7cPT-3NyW0pxMSMS2Oyj2Ki9ZVlteuxIOZAp9abwdZhkBlsdV-PCsmN6tZjo9zarUd6nXpk3dQjcljFehy1U4-svh5mbffPGTHQ6bB74xVScuoaf0FG7XrOruO52Y3nyBEVPXfa8dysL4VV2_PhQKfOmxnOYZCZ4XTvuUJK47qeX5BRu56b1_Hc6sZz5IiKno_b8dyqL4VR_9ticP4dPLPC7NJzhZRspS8KW6fqibWru3Ud3Y1udEdOqqi73f7nxIkVH3m8i8KYlz4rTs9spNvG_TXPDyOO9mLFv4holS2TDx8yLntR83mc5HfpOB_NwvxeGmF9mjWBR01gShvRtpymKnvG1GjWBB41gUt7pkrbcpqVaaNIm0ewUYZNKWzJT8uSwozKl7Yb1YecRupDDiP1gcSN1AdCI_UxbFQfchqpDzmM1AcSN1IfCI3Ux0hqqSOX1GlSH-NGhstpxHA5jBiOxI0YjtBYB1Bqm9W_UpW-qUpjTUCpcyrjiOa00kWOVKVMLjqVtxHEdFrpI0qqIzjiOkIjsmOhI7ZjOKZ7pYeq6S7HMd3lNKY7EjqmO4Jjulca6bHuQ0T3Sk9R0r3SU9R0l-OY7nIa0x0JHdMdwTHdK_1UTXc5jukupzHdkdAx3REc073SVY_ftQ257qzSW6S6L19_-hEAAP__vncF2A==

###############
# Outer joins #
###############

# The schema/values for each table are as follows:
# Table:        pkey:                     pkey values (same):   values:
# outer_p1      (pid1)                    {1, 2, 3, ... 20}     100 + pkey
# outer_c1      (pid1, cid1, cid2)        {2, 4, 6, ... 28}     200 + pkey
# outer_gc1     (pid1, cid1, cid2, gcid1) {4, 8, 12, ... 36}    300 + pkey

# Split between 4 nodes based on pkey value (p):
# node 1:       p - 1 mod 20 ∈ [1...5)
# node 2:       p - 1 mod 20 ∈ [5...10)
# node 3:       p - 1 mod 20 ∈ [10...15)
# node 4:       p - 1 mod 20 ∈ [15...20)

statement ok
CREATE TABLE outer_p1 (
  pid1 INT PRIMARY KEY,
  pa1 INT,
  FAMILY (pid1, pa1)
)

statement ok
CREATE TABLE outer_c1 (
  pid1 INT,
  cid1 INT,
  cid2 INT,
  ca1 INT,
  PRIMARY KEY (pid1, cid1, cid2),
  FAMILY (pid1, cid1, cid2)
) INTERLEAVE IN PARENT outer_p1 (pid1)

statement ok
CREATE TABLE outer_gc1 (
  pid1 INT,
  cid1 INT,
  cid2 INT,
  gcid1 INT,
  gca1 INT,
  PRIMARY KEY (pid1, cid1, cid2, gcid1),
  FAMILY (pid1, cid1, cid2)
) INTERLEAVE IN PARENT outer_c1 (pid1, cid1, cid2)

statement ok
ALTER TABLE outer_p1 SPLIT AT
  SELECT i FROM generate_series(0, 40, 5) AS g(i)

statement ok
ALTER TABLE outer_p1 EXPERIMENTAL_RELOCATE
  SELECT ARRAY[(((i-3)/5)%4)::INT + 1], i FROM generate_series(3, 40, 5) AS g(i)

query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE outer_p1]
----
start_key  end_key  replicas  lease_holder
NULL       /0       {5}       5
/0         /5       {1}       1
/5         /10      {2}       2
/10        /15      {3}       3
/15        /20      {4}       4
/20        /25      {1}       1
/25        /30      {2}       2
/30        /35      {3}       3
/35        /40      {4}       4
/40        NULL     {5}       5

### Begin OUTER queries

query T
EXPLAIN (VERBOSE) SELECT * FROM outer_p1 FULL OUTER JOIN outer_c1 USING (pid1)
----
distribution: full
vectorized: true
·
• render
│ columns: (pid1, pa1, cid1, cid2, ca1)
│ estimated row count: 1,000 (missing stats)
│ render pid1: COALESCE(pid1, pid1)
│ render pa1: pa1
│ render cid1: cid1
│ render cid2: cid2
│ render ca1: ca1
│
└── • merge join (full outer)
    │ columns: (pid1, pa1, pid1, cid1, cid2, ca1)
    │ estimated row count: 1,000 (missing stats)
    │ equality: (pid1) = (pid1)
    │ left cols are key
    │ merge ordering: +"(pid1=pid1)"
    │
    ├── • scan
    │     columns: (pid1, pa1)
    │     ordering: +pid1
    │     estimated row count: 1,000 (missing stats)
    │     table: outer_p1@primary
    │     spans: FULL SCAN
    │
    └── • scan
          columns: (pid1, cid1, cid2, ca1)
          ordering: +pid1
          estimated row count: 1,000 (missing stats)
          table: outer_c1@primary
          spans: FULL SCAN

query T
EXPLAIN (DISTSQL) SELECT * FROM outer_p1 FULL OUTER JOIN outer_c1 USING (pid1)
----
distribution: full
vectorized: true
·
• render
│
└── • merge join (full outer)
    │ equality: (pid1) = (pid1)
    │ left cols are key
    │
    ├── • scan
    │     missing stats
    │     table: outer_p1@primary
    │     spans: FULL SCAN
    │
    └── • scan
          missing stats
          table: outer_c1@primary
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzMluFr2k4Yx9___orjeaW_niR3SWwNDFI6OyxWO7UwGDJSc1PBJtklwkrxfx8xHZ1W77ns1O5d1Xwu3yfPh_T7DNmPBfjQ_nLXvez0SO1jZzgafu7WybDdbV-NyP_ketC_JckyF_Jbysj1fbdLbvqd3stXE0buh53eJ1JL5xGrA4U4iUQvfBQZ-F-BAQUOFByg4AIFD8YUUplMRJYlsrjkeQ10op_g2xTmcbrMi6_HFCaJFOA_Qz7PFwJ8GIUPCzEQYSSkVZwbiTycL9a3-R0vSOX8MZRPQGGYhnHmE8tuWB4J44gwkuQzIWG8osX1L_d5Pf7hiczCbLZ5cMBgvBpTyPJwKsBnK_p3eZu78k6Onpfvzft6TiIjIUW0fc5ZcWOtq3aMfivkVNwk87hY1dauRk-p8EuP-vej9mBtE1BYiO95LWBn9Q9yPp2VfwKF_jL3ScBowGng0MClgUeD5tZTeZ3Y0Zh4Ge-aZucgvaSRpBbzNkcYiDgS0idX_ctue3jVrhX5nDolAackcCkJPEoUId2NkExfI66tvdewmH0k7ysEPtf2_rCB-d7AJxSfv5_4XH9FjrZTzG5Y7Fgv0wqJL7SlOnBivjfxCa1y3s8qR39Hrr5VXsPix3pVVUjc0rfqsIn53sQntMp9P6tc_R3ZulY1rGMZVSGtp2vUIdPyvWlPaJP9b1S-HTEHIkuTOBNb1W_3yXYxqIimonx8WbKUE3Enk8n6NuXH_ppbd4xIZHn5K_PKT524_K1IqE9zE7hpArdMYIbkZlUeGa9GcxO4aQK3TGCG5ObbtP0n7aift6OE2ebU9jbtGgmuphFR1DAiuBpGBEeGRnJ7RoKraUQUNYwIroYRwZGhkdxNE8HPjRRV08iq1TCiqBpGFEWGRnJfGCmqppFVq2FEUTWMKIoMjeRumSjKzHoCgmP_cI2aAkIjmmKDY9ENy4JZWzCrC2Z9wawwMKPGwN5Uhmq2qnFs5Woas1VNY7Yig2PRK5Wlt0ur0paq0pitVfpSVRq19U15UNo6Xv33KwAA___AHbV3

query T
EXPLAIN (VERBOSE) SELECT * FROM outer_gc1 FULL OUTER JOIN outer_c1 USING (pid1, cid1, cid2)
----
distribution: full
vectorized: true
·
• render
│ columns: (pid1, cid1, cid2, gcid1, gca1, ca1)
│ estimated row count: 1,999 (missing stats)
│ render pid1: COALESCE(pid1, pid1)
│ render cid1: COALESCE(cid1, cid1)
│ render cid2: COALESCE(cid2, cid2)
│ render gcid1: gcid1
│ render gca1: gca1
│ render ca1: ca1
│
└── • merge join (full outer)
    │ columns: (pid1, cid1, cid2, gcid1, gca1, pid1, cid1, cid2, ca1)
    │ estimated row count: 1,999 (missing stats)
    │ equality: (pid1, cid1, cid2) = (pid1, cid1, cid2)
    │ right cols are key
    │ merge ordering: +"(pid1=pid1)",+"(cid1=cid1)",+"(cid2=cid2)"
    │
    ├── • scan
    │     columns: (pid1, cid1, cid2, gcid1, gca1)
    │     ordering: +pid1,+cid1,+cid2
    │     estimated row count: 1,000 (missing stats)
    │     table: outer_gc1@primary
    │     spans: FULL SCAN
    │
    └── • scan
          columns: (pid1, cid1, cid2, ca1)
          ordering: +pid1,+cid1,+cid2
          estimated row count: 1,000 (missing stats)
          table: outer_c1@primary
          spans: FULL SCAN

query T
EXPLAIN (DISTSQL) SELECT * FROM outer_gc1 FULL OUTER JOIN outer_c1 USING (pid1, cid1, cid2)
----
distribution: full
vectorized: true
·
• render
│
└── • merge join (full outer)
    │ equality: (pid1, cid1, cid2) = (pid1, cid1, cid2)
    │ right cols are key
    │
    ├── • scan
    │     missing stats
    │     table: outer_gc1@primary
    │     spans: FULL SCAN
    │
    └── • scan
          missing stats
          table: outer_c1@primary
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzMl29v6jYUh9_vU1jnFawHJXYS_kSa5KuOO3FFoQMqTZrQlBIPkGiSJUFaVfHdp0C7Fgo-yTwuvKmE4XF-x-cxPbxA9tcKfOj-dt__0huw2s-98WT8a7_Oxt1-93bCfmRfR8M7Fq9zlf4xn3H29aHfZ9-GvcHr2oyzh3Fv8AurJcuQI5u9_RV1QIjiUA2CJ5WB_ztwQBCA4ACCCwgeTBGSNJ6pLIvT4iMvW6AX_g2-jbCMknVeLE8RZnGqwH-BfJmvFPgwCR5XaqSCUKVWsW-o8mC52j7m36wySZdPQfoMCOMkiDKfWXbD8lgQhYyzOF-oFKYbLIDXB73v__jMFkG22N9ZcpQCpQPTzRQhy4O5Ap9v8L_Fbh6L_b1Si5Op33eL01ClKjzc7QaluEHp3BQxKn36yIHcqXSuvsXLqOjjQSMnz4nyd8INHybd0VY7QFipP_Pah53rP6XL-WJ_CRCG69xnb8WjdFF6KJsoWyjbKDsHh_h-NE6Jo1lHx8o9WuEgbsSJxb392kYqClXqs9vhl353fNutFUGbdfywIFC29hYclO06Mukikx4yTQnuXgm8vJOi_FXyGha3z3qXKuRulb5L54gtTsa-4GUSV3iZRPmOOuVN5HbD4uf9Wq8QvF1axbPkFidzX9BF5wpddMq31K3gotewxHm_FisE75R38Ry5xcncF3TRvUIX3fIttUu72LDO62GF0F5ZD___zOJk5gs6aF-hg8Qvl5HKkjjK1MHAe3xnuzgBFc7V7pyzeJ3O1H0az7aP2b0cbrntuBSqLN-9y73dq160e69IWJ4WJnDTBO6YwJzIzascmahGCxO4aQJ3TGBO5BaHtP2RdvTn7Whhvl-1fUi7RoLraUIUPUwIrocJwYmiidyekeB6mhBFDxOC62FCcKJoInfTRPCWkaJ6mmi1HiYU1cOEokTRRO62kaJ6mmi1HiYU1cOEokTRRO6OiaLcbE4gcOofrtGkQNCEplThVHTDYcFsWjAbF8zmBbOBgRtNDPzTyFDNVj1OtVxPU7bqacpWonAqeqVh6XPTqkxLVWnK1irzUlWatPXT8KC1dbr54Z8AAAD__3YY95Q=

query T
EXPLAIN (VERBOSE) SELECT * FROM outer_c1 LEFT OUTER JOIN outer_p1 USING (pid1) WHERE pid1 >= 0 AND pid1 < 40
----
distribution: full
vectorized: true
·
• project
│ columns: (pid1, cid1, cid2, ca1, pa1)
│ estimated row count: 400 (missing stats)
│
└── • merge join (left outer)
    │ columns: (pid1, cid1, cid2, ca1, pid1, pa1)
    │ estimated row count: 400 (missing stats)
    │ equality: (pid1) = (pid1)
    │ right cols are key
    │ merge ordering: +"(pid1=pid1)"
    │
    ├── • scan
    │     columns: (pid1, cid1, cid2, ca1)
    │     ordering: +pid1
    │     estimated row count: 400 (missing stats)
    │     table: outer_c1@primary
    │     spans: /0/#/60/1-/39/#/60/2
    │
    └── • scan
          columns: (pid1, pa1)
          ordering: +pid1
          estimated row count: 40 (missing stats)
          table: outer_p1@primary
          spans: /0-/39/#
          parallel

query T
EXPLAIN (DISTSQL) SELECT * FROM outer_c1 LEFT OUTER JOIN outer_p1 USING (pid1) WHERE pid1 >= 0 AND pid1 < 40
----
distribution: full
vectorized: true
·
• merge join (left outer)
│ equality: (pid1) = (pid1)
│ right cols are key
│
├── • scan
│     missing stats
│     table: outer_c1@primary
│     spans: [/0 - /39]
│
└── • scan
      missing stats
      table: outer_p1@primary
      spans: [/0 - /39]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzMldFu2jAUhu_3FNbZTVmNYjtAS6RKqVa6UVHogGqTNjSl5Awi0ThzgrSq4t0nSKcWFuww03Z3sZ3P_o_zKece0p8z8KD15apz2u6Sg7P2YDj41KmQQavTej8k78h5v3dJ5DxD9X3MSad1PiQXvXb3YSrh5HrQ7n4gB0kU8gr5_LHVb-UD8m3OmIsnhFXIaffs6eSY1FgFKMQyxG5wiyl4X4EDBQEUXKBQgxGFRMkxpqlUy-X71cvt8Bd4jEIUJ_NsOT2iMJYKwbuHLMpmCB4Mg5sZ9jEIUTkMKISYBdFsdcSfMvxERbeBugMKgySIU484zHnrNJjDq06dBHFIOJHZFBWMFnSJPRz3eMrNHZkG6XR9f5_DaDGikGbBBMHjC_pvsWtFsZPC2PvMK7bmfdxHqhAVhpv7HC4PLvVWQemXqCZ4IaMYlXO8zgzvEvRy63rXw1Z_5R5QmOGP7MDnh5UTFU2m-SNQ6M0zj_ic-oL6LvVr1K9Tv7FxKY8FuyUKnsdFxRTW0ZVVmThcrJfwd6btgWprgXh5Y3hp0etVh7NnUnyHwPXSiu83sNga-OUcb76e46L8FxKlleKs6vDn-m3ukLhR2qk9JxZbE7-cVJy9nlVu-W_klreqXnXEc_2pdkh8VN6q_SYWWxO_oFX8_-jHBTH7mCYyTnGjLxfvzJaFYjjB_PpSOVdjvFJyvDomH_ZW3KophJhm-arIB-04X1oGLA83bOCmDcwNufkORYvd4IYN3LSBuSG32KTZU9rV35irhfk6zTbpmo1ketggmR42SKaHTZLVbSTTwwbJ9LBBMj1skqxhI9mRjSZ62KCJHjZooodNmhzbaKKHDZroYYMmetikSdNGE27Vswy0QRQDbTDFQBvbll3fsmtcdp3LrnXx3XrXaPHmdwAAAP__d-Rydw==

query T
EXPLAIN (VERBOSE) SELECT * FROM outer_p1 RIGHT OUTER JOIN outer_gc1 USING (pid1) WHERE pid1 >= 1 AND pid1 <= 20
----
distribution: full
vectorized: true
·
• project
│ columns: (pid1, pa1, cid1, cid2, gcid1, gca1)
│ estimated row count: 200 (missing stats)
│
└── • merge join (left outer)
    │ columns: (pid1, cid1, cid2, gcid1, gca1, pid1, pa1)
    │ estimated row count: 200 (missing stats)
    │ equality: (pid1) = (pid1)
    │ right cols are key
    │ merge ordering: +"(pid1=pid1)"
    │
    ├── • scan
    │     columns: (pid1, cid1, cid2, gcid1, gca1)
    │     ordering: +pid1
    │     estimated row count: 200 (missing stats)
    │     table: outer_gc1@primary
    │     spans: /1/#/60/1-/20/#/60/2
    │
    └── • scan
          columns: (pid1, pa1)
          ordering: +pid1
          estimated row count: 20 (missing stats)
          table: outer_p1@primary
          spans: /1-/20/#
          parallel

query T
EXPLAIN (DISTSQL) SELECT * FROM outer_p1 RIGHT OUTER JOIN outer_gc1 USING (pid1) WHERE pid1 >= 1 AND pid1 <= 20
----
distribution: full
vectorized: true
·
• merge join (left outer)
│ equality: (pid1) = (pid1)
│ right cols are key
│
├── • scan
│     missing stats
│     table: outer_gc1@primary
│     spans: [/1 - /20]
│
└── • scan
      missing stats
      table: outer_p1@primary
      spans: [/1 - /20]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzMlW9P2zAQh9_vU1i3N3S4Suz0D42EFDQCBJWWtUGbtFVTaG5tpJJkTioNoX73qQ0CWqV2MiPYuybu4_ud88j3ANnvBdjgfrvun3gDcnDqjf3xl36DjN2--9knn8jZaHhFkmWO4mfKyMg7v_DJ5dAbPL6bTRm5GXuDc3KQRiFrkK8X7sgtHsiPpWlaeExYg5wMTl--nB4TbjaAQpyEOAjuMAP7OzCgwIGCBRRaMKGQimSKWZaI9fLD5s9e-Adsk0IUp8t8_XpCYZoIBPsB8ihfINjgB7cLHGEQojBMoBBiHkSLTYmn1E4qortA3AOFcRrEmU0MZnw0OqbBmkabBHFIGEnyOQqYrOiae6z3XOb2nsyDbL5dwGEwWU0oZHkwQ7DZiv5b7lZZ7rQ09mvm5XvzPu-TiBAFhrv7HK4LV_pXSetXKGZ4mUQxCuNom_HvU7RJ3z3zyfDGd0cb_YDCAn_lBw47bByLaDYvfgKF4TK3icOow6ljUadFnTZ1OtTp7pzLc89WhZ6XcVk_pa0MkmaSGoxvd_EUq_sy2d5Mra1MrLo3rLrv7abBzFe0u0bKdmW79UPyvSHfTuneuyrNq38YXuO6NJsG2zVYx58aMTvVb0f9lHxvyrcTiJnvapBV_dNYNQxqNw3-mjdQjZjd6gbpp-R7U76hQey_GaslSUeYpUmc4c54Ld_ZXPeK4QyLE8ySpZjitUimmzLF43DDbe77ELO8WOXFgxcXS-uA1eGODtzTgZkiN6vRNK8Hd3Tgng7MFLn5Lm2-pC35iVlSmG3T5i7d0pFMDiskk8MKyeSwSrK2jmRyWCGZHFZIJodVknV0JOvqaCKHFZrIYYUmclilyZGOJnJYoYkcVmgih1Wa9HQ0YVozS0ErRFHQClMUtHJs6c0tvcGlN7n0RherN7smqw9_AwAA__9qOmDV

query T
EXPLAIN (DISTSQL) SELECT * FROM child1 JOIN child2 USING(pid1)
----
distribution: full
vectorized: true
·
• merge join
│ equality: (pid1) = (pid1)
│
├── • scan
│     missing stats
│     table: child1@primary
│     spans: FULL SCAN
│
└── • scan
      missing stats
      table: child2@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzElt9r2zoUx9_vXyHOfWlvFWTJP5oYLvhy142UNumaDgYjD26sJYbUzmQHVkr-9-G4W1sn0ZEn4r3JiT_W-ep8BOcJim9LCOHi883Vf8MROXk3nNxNPl6dksnF1cX_d-Qf8v52fE1mi3SZcHI5Ho7qtSCfJsPRB3KyShN-ChSyPJGj-EEWEH4BDhQEUHCBggcUfJhSWKl8JosiV9UrT1tgmHyH0KGQZqt1Wf08pTDLlYTwCcq0XEoI4S6-X8pbGSdSMQcoJLKM0-V2m7qqaKXSh1g9AoXJKs6KkPSYYH8zP2CceaJe9xlngsRZQlySlwupCphuKOTr8nnnlw3vH8kiLhZvt4o4TDdTCkUZzyWEfEN_L4G_J4H4EwnEwQQv38lVIpVMmt85qzY2emvPYVxLNZeXeZpJxXijn0v5tTyJ-NnpvyqdL-olUBivy5BEnEaCRi6NPBr5NApodN44gJdwrkG4dbav8L01j_JevmK80btGWVhN3puauLky3Ez6A8b0mFet_ep371gXoEWawOwCdJtGHEzT4WXgnVwGYd4qYSjeq5b0WPCrb0G9rvoWHEu8FmnODcXrNI04mKZD8UQn4rnmrXINxdvfnR7rH0u3Fhn6hrp1kEEczNChZG4nknnmDfIMJev3GHd-Nsl3nh-qLnHnWJ61iDEw9KybGOJgjA5V8zqfKvdUdCuLVZ4VsjFd7v-yU2WSyVzWJ1XkazWTNyqfbbepH8dbbjudJLIo639F_TDM6r-qAs3hwAYe2MDcqm7u62ne4shEOziwgQc2MLequ3FkO7Ro0s5r2tWft6uF-dszc5q0ZyO4HkYE18OI4HoYExyhEcF9G8H1MCK4HkYE18OY4AiNCB7YCH5uo6geRhTVw4iiehhTFKERRfs2iuphRFE9jCiqhzFFERpRdGCjKLeaExAakRShEUsRGtMUw7FZwW5YsJsW7MYFy3nBbmDgVhMD3xkZWtmqpzFb9TRmq55GbUVwzNY2w9Juz9pMS21pzNZW81JrHLN1Z3jQ2jrd_PUjAAD__38TubA=

query T
EXPLAIN (DISTSQL) SELECT * FROM parent1 JOIN parent2 ON pid1=pid2
----
distribution: full
vectorized: true
·
• merge join
│ equality: (pid1) = (pid2)
│ left cols are key
│ right cols are key
│
├── • scan
│     missing stats
│     table: parent1@primary
│     spans: FULL SCAN
│
└── • scan
      missing stats
      table: parent2@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJy8lVFr2zAUhd_3K8TdS7sqyJId1zUUPLYOUtqka_owGHlw47vEkFqe7MBKyX8fjrOlCY7kIJynSLY-X51zLrlvUPxeQAg3Px7uPg-G5OzrYPw0_n53TsY3dzdfnsgn8u1xdE_yWGFWcnI7Ggw3G0FGQ5KnCSfX1Y8ACplMcBi_YAHhT-BAoXroAgUPKPRhQiFXcopFIVV15G0NDJI_EDoU0ixfltXjCYWpVAjhG5RpuUAI4Sl-XuAjxgkq5gCFBMs4XazLbG4W5Sp9idUrUBjncVaEpMcE-8j6PuPME_U6YJwJEmcJcYks56gKmKwoyGW5Kb2t-PxK5nEx360VcZisJhSKMp4hhHxFD0jYfkeqBBUm-9-5qApvTy2zpnPrWvtW3KOa4a1MM1TM3_3sAn-VZxG_OL9W6WxeL4HCaFmGJOI0EjRyaeTtad7qcVvoOeKmQ9mTOeN872RzbW-nNm_fDrxlOxzohh7zqnW_eu511Rr89K1x2WVriPbxiLbxvIuhx_z_Wfn1usrK7yoecfp4gi7jcdvH47aNpzmRHgu6CsU9fShXXYbitQ_FaxtK0GPc-RdM39lsqmS401UuR-joN-kQDZPa6nri4PVO1DbcOdUYbrjIIxa5zApsNWSdSgomM6zdKeRSTfFByem6TL0drbn1zEqwKOu3m80gq19VF2wPezawbwMHNjA3iOb7tPOeFnpYaGG-Szv7tGsTlh42hKWHDWHpYUNYBs0G0Z5NWH0bu_WwwW49bLBbDxvsNmg2iPZt7L60sVsPG-zWwwa79bDBboNmg-jAxu4rG7v1sMFuPWywWw8b7DZoNv3zHzMsxZG0Z0X7VnRgRXOT8OMm5mT14W8AAAD__7prC-k=

# Join on non-interleaved column uses hash joiner.
query T
EXPLAIN (DISTSQL) SELECT * FROM parent1 JOIN child1 ON pa1 = ca1
----
distribution: full
vectorized: true
·
• hash join
│ equality: (pa1) = (ca1)
│
├── • scan
│     missing stats
│     table: parent1@primary
│     spans: FULL SCAN
│
└── • scan
      missing stats
      table: child1@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJy8ll1r2zwYhs_fXyGe96QdCrLkjyaGgsfWsZQu6ZoeDIYP3FhrDKntyQ6slPz34bhbm4_qkSecM39dlm4918H9BNXPJYRw8e366v14Qk4-jme3s69Xp2R2cXXx4Za8I59upl9ImSiZ15xcTscTMl9ky5ST6YSUCSfnZJ5woJAXqZwkD7KC8Ds0DwRQcIGCBxR8iCmUqpjLqipU88nTBhinvyB0KGR5uaqbxzGFeaEkhE9QZ_VSQgi3yd1S3sgklYo5QCGVdZItN8s8bysqVfaQqEegMCuTvArJgAn2P_MDxpkn2ush40yQJE-JS4p6IVUF8ZpCsaqfl35Z8e6RLJJqsb1WJCBexxSqOrmXEPI1_bcI_vZv28M8TgJ3K4F4M8HLf1Z5oVKpZLr1p7ghsU8OHMPnpFpcFlkuFeM7k1zKH_VJJE7PVXa_qE8i9xQoTFd1SCJOI0Ejl0YejfydxC9pXIs0B7Y6KQZFybi_m_vg2t7W2tzcBW6o8xsuDJjXXPvNc68vtTvECczU7juNTnN-ZM15r5oL89kIU9VeDWHAgr-TCtrrZlJBX6p1iHNmqFrPaXSqiSOrJnpVzTWfjWuq2uF5DNiwL8E6hBgaCtZLBp1W7pG1cnvVyjOfiGeq1XDAuPNnLL7zfNPMhTt9mdUhx8jQrL5i6OTyjiyXd7QWeGAjN7Iqi7ySRh3PaaLI9F62R1MVKzWX16qYb5Zpb6cbblMyUlnV7VvR3ozz9lWzQXM4sIFHNjC32jf39TTvcGSiGxzYwCMbmFvte-fI9mixSzuvaVd_3q4W5ttn5uzSno3gehgRXA8jguthTHCERgT3bQTXw4jgehgRXA9jgiM0InhgI_iZjaJ6GFFUDyOK6mFMUYRGFB3aKKqHEUX1MKKoHsYURWhE0ZGNotyqJyA0IilCI5YiNKYphmNdwa4s2LUFu7pg2RfsCgO3agx8rzJ0slVPY7bqacxWPY3aiuCYrV3K0v7MurSlrjRma6e-1BnHbN0rD1pb4_V_vwMAAP__C7ytSQ==

query T
EXPLAIN (DISTSQL) SELECT * FROM child2 JOIN grandchild2 USING(pid1, cid2)
----
distribution: full
vectorized: true
·
• merge join
│ equality: (pid1, cid2) = (pid1, cid2)
│
├── • scan
│     missing stats
│     table: child2@primary
│     spans: FULL SCAN
│
└── • scan
      missing stats
      table: grandchild2@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzElt9u4jgUh-_3KayzN-3WKLHzpxBppax2uyOqFjqlI4004iIlHohEE8YJ0lQV7z4KYYYSwCceC3KXBD7bv3M-S-cN8m9zCODm88PdP_0BufivP3oafby7JKObu5t_n8hf5P_H4T2ZzJJ5zMntsD8gUxml8ebDp1F_8IFcLJKYUTJJYn4JFNIsFoPoReQQfAEGFDhQcICCCxQ8GFNYyGwi8jyT5V_e1kA__g6BTSFJF8ui_DymMMmkgOANiqSYCwjgKXqei0cRxUJaNlCIRREl8_U21XnChUxeIvkKFEaLKM0D0rG49afl-RazXF49dy1mcRKlMXFIVsyEzGG8opAti83O2w2fX8ksyme7W4WMhhzGqzGFvIimAgK2or8Xwttd-V1lW0rCjybZLpXJWEgR15e6oiG_Kvdv_M8DxbkXcipusyQV0mK1Fs_F1-JiQ1_-LZPpbPsKFIbLIiDrRDR0aOjS0KOhT8NrGnZp2KtVZhvZaRB5mR6KcjDBIOtkC4vVOrt_OOxY7s6xWHOnWLOLccSmjuWWz1753T3hJdEI5GtckrOn4kdTtXBhWAsXhjdvJG9o5rtedSz_V0P96rlsqH9CMzUCXeuYee5U_GiqFszkLZjpNG-k09DMw23rWN0T-qgRo6vj43my8KNZWrDQacFCt3n73IYWdjsWs392z7M3L2X7mH1CETWS9HREPFscfjROCy66LQ-3B873KPJFluaiNuQeXtkuE4p4Kqr65dlSTsSDzCbrbarX4Zpbj0WxyIvqV1699NPqp_KAzWHfBO6ZwMzo3MxT00yjZFwP9k3gngnMjM5dK9kezeu0_Z521PV2lDDbrZldp10TwdUwIrgaRgRXw5jgCI0I7pkIroYRwdUwIrgaxgRHaERw30TwaxNF1TCiqBpGFFXDmKIIjSjaNVFUDSOKqmFEUTWMKYrQiKI9E0WZ0ZyA0IikCI1YitCYphiOzQpmw4LZtGA2LhjOC2YDAzOaGNjeyKBlq5rGbFXTmK1qGrUVwTFbdYal_Z7pTEu6NGar1rykjWO27g0PSlvHqz9-BAAA__-JNOSf

# Subset join on interleaved columns uses hash joiner.
query T
EXPLAIN (DISTSQL) SELECT * FROM child2 JOIN grandchild2 USING(pid1, cid3)
----
distribution: full
vectorized: true
·
• hash join
│ equality: (pid1, cid3) = (pid1, cid3)
│
├── • scan
│     missing stats
│     table: child2@primary
│     spans: FULL SCAN
│
└── • scan
      missing stats
      table: grandchild2@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzElt9r2zoUx9_vXyHOfWkvCrbkH00MFzy2bkvpkq7pYDDy4MZaYkjtTHZgpeR_H7b7K06iY03EfbOcfKzz1fkIzgPkv5YQwPn3q8t3wxE5-TCc3Ey-Xp6Syfnl-fsb8h_5eD3-QmaLZBlzcjEejshcRmn8-OLbZDj6RE5WScwomSWxcwoU0iwWo-hO5BD8AAYUOFBwgIILFDyYUljJbCbyPJPlXx4qYBj_hsCmkKSrdVG-nlKYZVJA8ABFUiwFBHAT3S7FtYhiIS0bKMSiiJJltU1dT7iSyV0k74HCZBWleUB6Frf-tTzfYpbL6-e-xSxOojQmDsmKhZA5TDcUsnXxuPPLhrf3ZBHli-2tQkZDB6abKYW8iOYCArahfxfC2_7yq5N9oyT8YJKXT63TTMZCinjrY9OSxP6y5zg-R_niIktSIS3W6OlS_CxOqhpP_5fJfPG0AArjdRGQcsVp6NDQpaFHQ5-GZzTs03DQOIaXfI5Bvj3Fj7JetrJYo43PxTlVfW5VmbIsd6ss1l4g1u4WHFCnZ7nls1e-d494IzQC-Ro3ovNU_GCqLm4H6_h28PZd4y01fNWYnuU_d8-vn8vu-UfUUCPQmY6GXafiB1N1oSHvWEOnfdeclhru71HP6h9RPo0YfR35usnCD2bpQjmnY-Xc9r1yWyrX71nMfmqVZz8uyl4x-4jWaSQZ6FjXWRx-ME4X4rlvOJDuKe1a5KsszUUz594v22U4Ec9FfVh5tpYzcSWzWbVNvRxXXDXKxCIv6l95vRim9U9lge1h3wQemMDMqG7mqWmmcWRcD_ZN4IEJzIzqbhzZDs2btP2adtTn7Shhtn1mdpN2TQRXw4jgahgRXA1jgiM0IrhnIrgaRgRXw4jgahgTHKERwX0Twc9MFFXDiKJqGFFUDWOKIjSiaN9EUTWMKKqGEUXVMKYoQiOKDkwUZUZzAkIjkiI0YilCY5piODYrmA0LZtOC2bhgOC-YDQzMaGJgOyODlq1qGrNVTWO2qmnUVgTHbNUZlnZ7pjMt6dKYrVrzkjaO2bozPChtnW7--RMAAP__uEvXfw==

# Multi-table staggered join uses merge joiner on the bottom join
# and a lookup join on the higher join.
query T
EXPLAIN (DISTSQL)
  SELECT * FROM grandchild1
  JOIN child1 USING (pid1, cid1)
  JOIN parent1 USING (pid1)
ORDER BY pid1
----
distribution: full
vectorized: true
·
• lookup join
│ table: parent1@primary
│ equality: (pid1) = (pid1)
│ equality cols are key
│
└── • merge join
    │ equality: (pid1, cid1) = (pid1, cid1)
    │ right cols are key
    │
    ├── • scan
    │     missing stats
    │     table: grandchild1@primary
    │     spans: FULL SCAN
    │
    └── • scan
          missing stats
          table: child1@primary
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzMl12P4zQUhu_5FebMzQzryrHz0Q8JKcAOqKtuu7SzEgj1ItuYNtCNQ5JKjEbz31HawiRN4xMTOuVuU_eJfXzeZ0_nCbI_tjCC-58-TL4ZT8nt2_HiYfHj5I4s7if33z2Qr8j389l7sk6DOFxtom3IybvZeEqO__64GE9_ILdJFHJKVlHI7w7LSZDKOK-s35HZ_O39nHz7MykegUKsQjkNPssMRr9A8YEACjZQcICCC0sKSapWMstUWnzlaQ-Mwz9hZFGI4mSXFx8vKaxUKmH0BHmUbyWM4CH4tJVzGYQyZRZQCGUeRNv9NqVC_CSNPgfpI1BYJEGcjUiPCXbDXI9x5ggm2JfTj5MJcweMM0GCOCQ2UflGphksnymoXX48wsvOnx7JJsg21T19Tn0By-clhSwP1hJG_Jn-u2rc6pvbFnJziSJEYxEvr1JpKFMZnr7qDfXFm2L_1t88cy_vZbqW71QUy5TxkzZv5a_57ZG--zqN1puXR6Aw2-Ujsq-I-jb1Heq71Peo3z-5k5dibZOOFYc6NoyfdOwoRqllE6V-3yXkNxXFRMXFsXQHpP6A-sPGYzodenL-lqeqpxImTu63fr6-7lhu5Vi8fd65gb0aeXvMKdbcYs25oMkGlXntTG4Q-XIFicaCrmA1f1Wrke6VrfauaLVoHzJhok8pUT3m_RM7j3lll7wL6mNQWb-lPpqibi5RkGgs6Ar6iFfVB-leWZ_-FfWx24fMNtGn2ZgeG1xQGoN6Bi2lOe_Jf12GaCzjCqrYr6oK0rOyKoMrquK0j5Zjosqgx7j1d8Zcq3go-cKtC9piUNKwpS1nqrm5SCWisZIrCOO8qjBI28rCDP8nf3CdOeZcZomKM1k5YdObraIFMlzLQ4MztUtX8kOqVvttDo-zPbf_5RrKLD-sisPDOD4sFQdsD_e7wJx3ot1O9FBPc4M7E2Zwvwt8cmemtNuJHuppcUpbZdquwNYpbGthR98tRwsLrt_a7eKHHkb80MOYHwiN-IHQiB9eFz_0MOKHHsb8QGjED4RG_OhrUzrQh3TQxY9hl4TrYSThehhLOEIjCUdobAKYjM36_6Qmc9OURoeA0eQ0xpGY89oUqUSVC33QuX6MIEnntTliEnWERrKO0FjYMRxJO4Zjca_NUKO462ks7noajTuCY3FHcCzutUFajbuHxL02U4ziXpspRnHX01jc9TQadwTH4o7gWNxr89Qo7noai7ueRuOO4FjcERyLe22qVn9rW_q4i9ps0cZ9-fzFXwEAAP__1VpbyQ==

# Multi-table join with parent1 and child1 at the bottom uses merge
# joiner but induces a hash joiner on the higher join.
query T
EXPLAIN (DISTSQL)
  SELECT * FROM parent1
  JOIN child1 USING (pid1)
  JOIN grandchild1 USING (pid1, cid1)
----
distribution: full
vectorized: true
·
• lookup join
│ table: parent1@primary
│ equality: (pid1) = (pid1)
│ equality cols are key
│
└── • merge join
    │ equality: (pid1, cid1) = (pid1, cid1)
    │ left cols are key
    │
    ├── • scan
    │     missing stats
    │     table: child1@primary
    │     spans: FULL SCAN
    │
    └── • scan
          missing stats
          table: grandchild1@primary
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzMl99u4kYUh-_7FNPTm6Q7yJ7xHwxSJVdtWrFiyTZkpUoVF148Bbesxx0bqaso714Z08bYMMdTB9g7HPvzzJnz-3LgCfK_NjCGu1_fT7-fzMjNj5P54_yX6S2Z303vfngk35KfHu7fkSxSIi0YeXs_mZHlOtnEjHyYT2Y_k5ssidltdWOlojRu36VkWT4DFFIZi1n0SeQw_g0YUOBAwQEKLlDwYEEhU3Ip8lyq8pGnHTCJ_4axTSFJs21R_nlBYSmVgPETFEmxETCGx-jjRjyIKBbKsoFCLIoo2eyWqfYTZir5FKnPQGGeRWk-JgOLW99Ynm8xy-XV58BiFidRGhOHyGItVA6LZwpyW-xXflnw42eyjvL14VIhoyGHxfOCQl5EKwFj9kz_XxHe4ZtrJ4tX8vXsw3R6jmr4yWpeXiVVLJSIm696Q0P-ply_85NHDuidUCvxViapUBZrtHkjfi9u9vTtdypZrV8ugcL9thiTXUU0dGjo0tCjoU_DYeNMXop1TFpXbmrfOdZo3V6dWtumUv65zcgfMkmJTMtt6TZIw4CGo5PbdDv0ZJseO-ujRzyTA5lZvHG41eaC3eZGu_1pj8472BPrnnrWTd0T5g4st_zslX93z6ixQUG-gcYai89XGT9Z2RWUZhdVGmljXWn_ikrz7mnjHfWphWlg-f-lzq8-l4nzz6iPQUFDE300VdVcet3K-MnKrqAPv6g-SBvr-gyvqI_TPW1OR32OGzOwgjNKY1BGYCLNaU9eux5-sp4rqOJcVBWkeXVVgiuq4nbPmNtRlWBgMfvfiHn2_qLMF7PPaItBJSMTW46UU1PmlUviJ0u6gjDuRYVB-lcXZvSF_No6ss0HkWcyzUXjV9fxN9tlC0S8ElWDc7lVS_FeyeVumeryfsftvrnGIi-qu7y6mKTVrXKD3eFhH5ixXrTXix7paWZwZtwMHvaBG2dmSnu96JGe5k3artPOAWw3YUcLu_puuVqYM_3SXh8_9DDihx7G_EBoxA-ERvzw-_ihhxE_9DDmB0IjfiA04sdQm9JAH9Kgjx-jPgnXw0jC9TCWcIRGEo7Q2AQwGZvt_6Qmc9OURoeA0eQ0xpGYs9YUOYgq4_qgM_0YQZLOWnPEJOoIjWQdobGwYziSdgzH4t6aoUZx19NY3PU0GncEx-KO4FjcW4P0MO4-EvfWTDGKe2umGMVdT2Nx19No3BEcizuCY3FvzVOjuOtpLO56Go07gmNxR3As7q2pevhd29bHnbdmizbui-ev_gkAAP__AqJX8A==

statement ok
DROP TABLE grandchild2, grandchild1, child1, child2, parent1, parent2
