# LogicTest: 5node

# Regression test for #39317.

statement ok
CREATE TABLE l (a INT PRIMARY KEY, b INT, FAMILY (a, b))

statement ok
CREATE TABLE r (a INT PRIMARY KEY, b INT, FAMILY (a, b))

statement ok
INSERT INTO l VALUES (1, 10), (2, 20), (3, 30)

statement ok
INSERT INTO r VALUES (2, 200), (3, 300), (4, 400)

statement ok
ALTER TABLE l SPLIT AT VALUES (2), (3)

statement ok
ALTER TABLE r SPLIT AT VALUES (2), (3)

statement ok
ALTER TABLE l EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 2), (ARRAY[3], 3)

statement ok
ALTER TABLE r EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 2), (ARRAY[2], 3), (ARRAY[3], 1)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder from [SHOW EXPERIMENTAL_RANGES FROM TABLE l] ORDER BY lease_holder
----
start_key  end_key  replicas  lease_holder
NULL       /2       {1}       1
/2         /3       {2}       2
/3         NULL     {3}       3

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder from [SHOW EXPERIMENTAL_RANGES FROM TABLE r] ORDER BY lease_holder
----
start_key  end_key  replicas  lease_holder
/2         /3       {1}       1
/3         NULL     {2}       2
NULL       /2       {3}       3

query T
EXPLAIN (DISTSQL) SELECT * FROM l LEFT OUTER JOIN r USING(a) WHERE a = 2
----
distribution: full
vectorized: true
·
• merge join (left outer)
│ equality: (a) = (a)
│ left cols are key
│ right cols are key
│
├── • scan
│     missing stats
│     table: l@l_pkey
│     spans: [/2 - /2]
│
└── • scan
      missing stats
      table: r@r_pkey
      spans: [/2 - /2]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzEk1GLm0AQx9_7KYZ5StotcY19EQ4sV6_1yOlVPVooPmziNBGMa3dXaAj57kUtpNpcmqNw9-bs7u8_858Z96h_lOii__V-8T4IYfIhSNLk82IKib_wr1N4DTdxdAclLPybFG6jIAQFD0kQfoSJmMKXT37sg4ArsJFhJXMKxZY0ut-QI0MbM4a1kivSWqr2eN89CvKf6FoMi6puTHucMVxJReju0RSmJHQxFcuSYhI5qVmrlZMRRdlJK69WxVaoHTK8lmWzrbQLgsESGSa1aKOZPbMwOzCUjfmd4yi93MFG6M1Q1OOYHTKG2og1oWsf2CO1HnWaSqqcFOUDpawl__XkhOE7Umu6lUVFajYf1pbuanL7EUQPqR93g0CGJX03E4-_mV6pYr3pP5Fh1BgXPM48m3nOqAtHh_P_cHii_FC-lfXMGbfiZGpnkJpfvgjWsC_lMywCf7TW51gE-0UX4URxMelaVpoumrPV2qN8TX27tGzUiu6VXHVp-jDquK6zOWnT3zp9EFTdVfcvXg7z8zAfw9afsD2A-Ri2z8LvBrA1hudP8PxX5vMwPw87T_KcHV79CgAA__9mp_ev

# Test that we can handle merge joins with equality columns of integers with
# different widths.
statement ok
CREATE TABLE numbers (_int2 INT2, _int4 INT4, _int8 INT8, _float FLOAT, _decimal DECIMAL);
INSERT INTO numbers VALUES (1, 1, 1, 1, 1)

# Place the single range on node 1 for determinism.
statement ok
ALTER TABLE numbers EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1)

query T
EXPLAIN (VEC) SELECT * FROM numbers AS t1 INNER MERGE JOIN numbers AS t2 ON t1._int2 = t2._int4
----
│
└ Node 1
  └ *colexecjoin.mergeJoinInnerOp
    ├ *colexecbase.castInt2Int4Op
    │ └ *colexec.sortOp
    │   └ *colfetcher.ColBatchScan
    └ *colexec.sortOp
      └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC) SELECT * FROM numbers AS t1 INNER MERGE JOIN numbers AS t2 ON t1._int8 = t2._int2
----
│
└ Node 1
  └ *colexecjoin.mergeJoinInnerOp
    ├ *colexec.sortOp
    │ └ *colfetcher.ColBatchScan
    └ *colexecbase.castInt2IntOp
      └ *colexec.sortOp
        └ *colfetcher.ColBatchScan

# Also check that we cannot plan a merge join with other numeric types.
statement error could not produce a query plan conforming to the MERGE JOIN hint
EXPLAIN SELECT * FROM numbers AS t1 INNER MERGE JOIN numbers AS t2 ON t1._int8 = t2._float

statement error could not produce a query plan conforming to the MERGE JOIN hint
EXPLAIN SELECT * FROM numbers AS t1 INNER MERGE JOIN numbers AS t2 ON t1._int8 = t2._decimal

statement error could not produce a query plan conforming to the MERGE JOIN hint
EXPLAIN SELECT * FROM numbers AS t1 INNER MERGE JOIN numbers AS t2 ON t1._float = t2._decimal
