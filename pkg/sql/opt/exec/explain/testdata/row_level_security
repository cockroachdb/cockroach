# Setup
# ----------------------------------------------------------------------

exec-ddl
CREATE USER rls_accessor
----

exec-ddl
SET ROLE rls_accessor
----

exec-ddl
CREATE TABLE t1 (c1 int);
----

exec-ddl
CREATE TABLE t2 (c1 int);
----

# Ensure non-RLS enabled tables don't show any policy info.
# ----------------------------------------------------------------------

plan
select * from t1,t2 where t1.c1 = t2.c1;
----
• hash join
│ equality: (c1) = (c1)
│
├── • scan
│     table: t1@t1_pkey
│     spans: FULL SCAN
│
└── • scan
      table: t2@t2_pkey
      spans: FULL SCAN

# Enable RLS on only one table (t1)
# ----------------------------------------------------------------------

exec-ddl
ALTER TABLE t1 ENABLE ROW LEVEL SECURITY
----

plan
select * from t1,t2 where t1.c1 = t2.c1;
----
• norows
  policies: row-level security enabled, no policies applied.

# Enable RLS on both tables (t1 and t2)
# ----------------------------------------------------------------------

exec-ddl
ALTER TABLE t2 ENABLE ROW LEVEL SECURITY
----

plan
select * from t1,t2 where t1.c1 = t2.c1;
----
• norows
  policies: row-level security enabled, no policies applied.

# Ensure admin shows that we are exempt from all policies
# ----------------------------------------------------------------------

exec-ddl
SET ROLE root
----

plan
select max(t1.c1) from t1,t2 where t1.c1 = t2.c1;
----
• group (scalar)
│
└── • hash join
    │ equality: (c1) = (c1)
    │
    ├── • scan
    │     table: t1@t1_pkey
    │     spans: FULL SCAN
    │     policies: exempt for role
    │
    └── • scan
          table: t2@t2_pkey
          spans: FULL SCAN
          policies: exempt for role

exec-ddl
SET ROLE rls_accessor
----

# Add select policies to each table
# ----------------------------------------------------------------------

exec-ddl
CREATE POLICY "policy 1" ON t1 USING (c1 > 0);
----

exec-ddl
CREATE POLICY t2_pol_1 on t2 FOR SELECT USING (c1 > 0);
----

plan
select count(*) from t1,t2 where t1.c1 = t2.c1;
----
• group (scalar)
│
└── • hash join
    │ equality: (c1) = (c1)
    │
    ├── • filter
    │   │ filter: c1 > _
    │   │
    │   └── • scan
    │         table: t1@t1_pkey
    │         spans: FULL SCAN
    │         policies: policy 1
    │
    └── • filter
        │ filter: c1 > _
        │
        └── • scan
              table: t2@t2_pkey
              spans: FULL SCAN
              policies: t2_pol_1

# Ensure that when the optimizer replaces a scan with a "norows" VALUES clause
# due to RLS filtering, the plan still includes appropriate policy information.
# ----------------------------------------------------------------------
plan
select count(*) from t1,t2 where t1.c1 = t2.c1 and t1.c1 < 0;
----
• group (scalar)
│
└── • norows
      policies: applied (filtered all rows)

# Add multiple policies on the same table
# ----------------------------------------------------------------------

exec-ddl
CREATE POLICY p2 on t1 USING (true);
----

exec-ddl
CREATE POLICY p3 on t1 USING (true);
----

exec-ddl
CREATE POLICY r1 on t1 AS RESTRICTIVE USING (true);
----

exec-ddl
CREATE POLICY r2 on t1 AS RESTRICTIVE USING (true);
----

plan
select * from t1
----
• scan
  table: t1@t1_pkey
  spans: FULL SCAN
  policies: policy 1, p2, p3, r1, r2

# Show policy information where an index scan is used for one table
# ----------------------------------------------------------------------

exec-ddl
CREATE INDEX t1_idx ON t1 (c1)
----

plan
select t1.c1 from t1, t2 where t1.c1 = t2.c1 and t1.c1 = 1;
----
• cross join
│
├── • scan
│     table: t1@t1_idx
│     spans: 1+ spans
│     policies: policy 1, p2, p3, r1, r2
│
└── • filter
    │ filter: c1 = _
    │
    └── • scan
          table: t2@t2_pkey
          spans: FULL SCAN
          policies: t2_pol_1

# Show policy information for insert
# ----------------------------------------------------------------------

exec-ddl
CREATE TABLE writer (key int not null primary key, value text);
----

exec-ddl
ALTER TABLE writer ENABLE ROW LEVEL SECURITY;
----

exec-ddl
CREATE POLICY p_select ON writer FOR SELECT USING (true);
----

plan
INSERT INTO writer VALUES (0, 'zero')
----
• insert fast path
  into: writer(key, value)
  auto commit
  size: 3 columns, 1 row
  policies: row-level security enabled, no policies applied.

exec-ddl
CREATE POLICY p_insert on writer FOR INSERT WITH CHECK (value like 'inserted: %');
----

plan
INSERT INTO writer VALUES (1, 'one'), (2, 'two');
----
• insert
│ into: writer(key, value)
│ auto commit
│ policies: p_insert
│
└── • render
    │
    └── • values
          size: 2 columns, 2 rows

plan
INSERT INTO writer VALUES (3, 'three');
----
• insert fast path
  into: writer(key, value)
  auto commit
  size: 3 columns, 1 row
  policies: p_insert

# The next two show that the SELECT policy is applied when using the RETURNING
# clause, but only if it references the columns in the table.

plan
INSERT INTO writer VALUES (4, 'four') RETURNING *;
----
• insert fast path
  into: writer(key, value)
  auto commit
  size: 3 columns, 1 row
  policies: p_select, p_insert

plan
INSERT INTO writer VALUES (4, 'four') RETURNING 'foo'
----
• render
│
└── • insert fast path
      into: writer(key, value)
      auto commit
      size: 3 columns, 1 row
      policies: p_insert

exec-ddl
CREATE TABLE populator (key int not null primary key, value text);
----

plan
INSERT INTO writer SELECT * from populator
----
• insert
│ into: writer(key, value)
│ auto commit
│ policies: p_insert
│
└── • render
    │
    └── • scan
          table: populator@populator_pkey
          spans: FULL SCAN

# Show policy information for update
# ----------------------------------------------------------------------

plan
UPDATE writer SET key = key * 10;
----
• update
│ table: writer
│ set: key
│ auto commit
│ policies: p_select
│
└── • render
    │
    └── • norows
          policies: row-level security enabled, no policies applied.

exec-ddl
CREATE POLICY p_update1 ON writer FOR UPDATE USING (key = 5)  WITH CHECK (value like 'updater: %')
----

exec-ddl
CREATE POLICY p_update2 ON writer FOR UPDATE WITH CHECK (value IN ('updater: a', 'updater: b', 'updater: c'))
----

plan
UPDATE writer SET key = key * 11;
----
• update
│ table: writer
│ set: key
│ auto commit
│ policies: p_select, p_update1, p_update2
│
└── • render
    │
    └── • scan
          table: writer@writer_pkey
          spans: 1+ spans
          locking strength: for update
          policies: p_select, p_update1

plan
UPDATE writer SET key = key * 15 WHERE value = 'some-val' or value = 'other-val';
----
• update
│ table: writer
│ set: key
│ auto commit
│ policies: p_select, p_update1, p_update2
│
└── • render
    │
    └── • filter
        │ filter: (value = _) OR (value = _)
        │
        └── • scan
              table: writer@writer_pkey
              spans: 1+ spans
              policies: p_select, p_update1

plan
UPDATE writer SET value = 'updated' WHERE key between 1 and 100;
----
• update
│ table: writer
│ set: value
│ auto commit
│ policies: p_select, p_update1, p_update2
│
└── • render
    │
    └── • scan
          table: writer@writer_pkey
          spans: 1+ spans
          locking strength: for update
          policies: p_select, p_update1

plan
UPDATE writer SET value = value WHERE key = 5;
----
• update
│ table: writer
│ set: value
│ auto commit
│ policies: p_select, p_update1, p_update2
│
└── • render
    │
    └── • scan
          table: writer@writer_pkey
          spans: 1+ spans
          locking strength: for update
          policies: p_select, p_update1

# Should not apply select policy for the new row because columns weren't
# referenced in the SET or WHERE clause.
plan
UPDATE writer SET key = 10 WHERE true;
----
• update
│ table: writer
│ set: key
│ auto commit
│ policies: p_update1, p_update2
│
└── • render
    │
    └── • scan
          table: writer@writer_pkey
          spans: 1+ spans
          locking strength: for update
          policies: p_select, p_update1


# Show policy information for delete
# ----------------------------------------------------------------------

plan
DELETE FROM writer WHERE key = 1;
----
• delete
│ from: writer
│ auto commit
│
└── • norows
      policies: row-level security enabled, no policies applied.

exec-ddl
CREATE POLICY p_delete ON writer FOR DELETE USING (key = 1);
----

plan
DELETE FROM writer WHERE key = 1;
----
• delete range
  from: writer
  auto commit
  spans: 1+ spans
  policies: p_select, p_delete

plan
DELETE FROM writer WHERE value = 'some-val' or value = 'other-val';
----
• delete
│ from: writer
│ auto commit
│
└── • filter
    │ filter: (value = _) OR (value = _)
    │
    └── • scan
          table: writer@writer_pkey
          spans: 1+ spans
          policies: p_select, p_delete

# Show that policies are exempt when the table owner queries the table, unless
# the FORCE option is used.
# ----------------------------------------------------------------------

exec-ddl
ALTER TABLE t1 OWNER TO rls_accessor
----

plan
select count(*) from t1,t2 where t1.c1 = t2.c1;
----
• group (scalar)
│
└── • hash join
    │ equality: (c1) = (c1)
    │
    ├── • scan
    │     table: t1@t1_pkey
    │     spans: FULL SCAN
    │     policies: exempt for role
    │
    └── • filter
        │ filter: c1 > _
        │
        └── • scan
              table: t2@t2_pkey
              spans: FULL SCAN
              policies: t2_pol_1

exec-ddl
ALTER TABLE t1 FORCE ROW LEVEL SECURITY
----

plan
select count(*) from t1,t2 where t1.c1 = t2.c1;
----
• group (scalar)
│
└── • hash join
    │ equality: (c1) = (c1)
    │
    ├── • scan
    │     table: t1@t1_pkey
    │     spans: FULL SCAN
    │     policies: policy 1, p2, p3, r1, r2
    │
    └── • filter
        │ filter: c1 > _
        │
        └── • scan
              table: t2@t2_pkey
              spans: FULL SCAN
              policies: t2_pol_1

# Show that policies are shown for UPSERT (and its variations).
# ----------------------------------------------------------------------

exec-ddl
CREATE TABLE ups (pk int not null primary key, comment text);
----

exec-ddl
ALTER TABLE ups OWNER TO rls_accessor
----

exec-ddl
ALTER TABLE ups ENABLE ROW LEVEL SECURITY, FORCE ROW LEVEL SECURITY;
----

exec-ddl
CREATE POLICY p_ins ON ups FOR INSERT USING (comment = 'insert');
----

exec-ddl
CREATE POLICY p_sel ON ups FOR SELECT USING (comment = 'select');
----

exec-ddl
CREATE POLICY p_upd ON ups FOR UPDATE USING (comment = 'update');
----

plan
UPSERT INTO ups VALUES (1, 'first value');
----
• upsert
│ into: ups(pk, comment)
│ auto commit
│ arbiter indexes: ups_pkey
│ policies: p_ins, p_sel, p_upd
│
└── • render
    │
    └── • cross join (left outer)
        │
        ├── • values
        │     size: 2 columns, 1 row
        │
        └── • scan
              table: ups@ups_pkey
              spans: 1+ spans
              locking strength: for update

plan
INSERT INTO ups VALUES (1, 'first value') ON CONFLICT (pk) DO UPDATE SET comment = 'second value';
----
• upsert
│ into: ups(pk, comment)
│ auto commit
│ arbiter indexes: ups_pkey
│ policies: p_ins, p_sel, p_upd
│
└── • render
    │
    └── • render
        │
        └── • cross join (left outer)
            │
            ├── • values
            │     size: 2 columns, 1 row
            │
            └── • scan
                  table: ups@ups_pkey
                  spans: 1+ spans
                  locking strength: for update

plan
INSERT INTO ups VALUES (1, 'first value') ON CONFLICT (pk) DO NOTHING;
----
• insert
│ into: ups(pk, comment)
│ auto commit
│ arbiter indexes: ups_pkey
│ policies: p_ins, p_sel
│
└── • render
    │
    └── • cross join (anti)
        │
        ├── • values
        │     size: 2 columns, 1 row
        │
        └── • scan
              table: ups@ups_pkey
              spans: 1+ spans
