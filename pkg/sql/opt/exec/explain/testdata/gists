
exec-ddl
CREATE TABLE foo (a INT PRIMARY KEY, b INT[], c STRING, INVERTED INDEX b_inverted_index(b), UNIQUE INDEX c_idx(c))
----

exec-ddl
CREATE TABLE bar (ba INT PRIMARY KEY)
----

exec-ddl
CREATE TABLE abc (a INT PRIMARY KEY, b INT, c INT, INDEX(b), INDEX(c))
----

exec-ddl
CREATE TABLE xyz (x INT PRIMARY KEY, y INT, z INT)
----


# ConstructScan/ConstructSerializingProject
gist-explain-roundtrip
SELECT * from foo LIMIT 1
----
hash: 9489487498677608528
plan-gist: AgFqAgAHAAAGBgA=
• scan
  missing stats
  table: foo@primary
  spans: LIMITED SCAN
  limit: 1
• scan
  table: foo@primary
  spans: FULL SCAN

# ConstructFilter
gist-explain-roundtrip
SELECT * from foo WHERE a = 1
----
hash: 9232698808283701206
plan-gist: AgFqAgAHAgAGBgA=
• scan
  missing stats
  table: foo@primary
  spans: 1 span
• scan
  table: foo@primary
  spans: 0 spans

# ConstructInvertedFilter/ConstructIndexJoin
gist-explain-roundtrip
SELECT * from foo WHERE b @> ARRAY[1]
----
hash: 16201508141227046250
plan-gist: AgFqBAABAAITagIGBgA=
• index join
│ table: foo@primary
│
└── • scan
      missing stats
      table: foo@b_inverted_index
      spans: 1 span
• index join
│ table: foo@primary
│
└── • scan
      table: foo@b_inverted_index
      spans: 1 span

# ConstructSimpleProjectOp
gist-explain-roundtrip
select a,b from foo@c_idx where c = 'bar'
----
hash: 1205672026933967497
plan-gist: AgFqBgAFAgATagIFBAYEAA==
• index join
│ table: foo@primary
│
└── • scan
      missing stats
      table: foo@c_idx
      spans: 1 span
• index join
│ table: foo@primary
│
└── • scan
      table: foo@c_idx
      spans: 0 spans

# ConstructRender
gist-explain-roundtrip
select a + 1 from foo
----
hash: 2389675096184913893
plan-gist: AgFqBgABAAAHAAYCAA==
• render
│
└── • scan
      missing stats
      table: foo@c_idx
      spans: FULL SCAN
• render
│
└── • scan
      table: foo@c_idx
      spans: FULL SCAN

# ConstructApplyJoin
gist-explain-roundtrip
SELECT * FROM abc WHERE EXISTS(SELECT * FROM (VALUES (a), (b)) WHERE column1=a)
----
hash: 12229645142276466433
plan-gist: AgFuAgAHAAAIBAAGBgA=
• apply join (semi)
│ pred: column1 = a
│
└── • scan
      missing stats
      table: abc@primary
      spans: FULL SCAN
• apply join (semi)
│
└── • scan
      table: abc@primary
      spans: FULL SCAN

# ConstructHashJoin
gist-explain-roundtrip
SELECT * FROM foo INNER HASH JOIN bar ON a = ba
----
hash: 581674594156450507
plan-gist: AgFqAgAHAAABbAIAAQAACQACAgEBBggA
• hash join
│ equality: (a) = (ba)
│ left cols are key
│ right cols are key
│
├── • scan
│     missing stats
│     table: foo@primary
│     spans: FULL SCAN
│
└── • scan
      missing stats
      table: bar@primary
      spans: FULL SCAN
• hash join
│ equality: (a) = (ba)
│ left cols are key
│ right cols are key
│
├── • scan
│     table: foo@primary
│     spans: FULL SCAN
│
└── • scan
      table: bar@primary
      spans: FULL SCAN

# ConstructMergeJoin
gist-explain-roundtrip
SELECT * FROM foo JOIN bar ON a = ba
----
hash: 5599847003088118789
plan-gist: AgFqAgAHAAABbAIAAQAACgAAAAEBBggA
• merge join
│ equality: (a) = (ba)
│ left cols are key
│ right cols are key
│
├── • scan
│     missing stats
│     table: foo@primary
│     spans: FULL SCAN
│
└── • scan
      missing stats
      table: bar@primary
      spans: FULL SCAN
• merge join
│
├── • scan
│     table: foo@primary
│     spans: FULL SCAN
│
└── • scan
      table: bar@primary
      spans: FULL SCAN

# ConstructGroupBy
gist-explain-roundtrip
SELECT c, count(*) FROM foo, bar WHERE a = 1 GROUP BY c
----
hash: 13843774794200274452
plan-gist: AgFsAgAAAAABagIABQIACQAAAAABBQILAAAGBAA=
• group
│
└── • cross join
    │
    ├── • scan
    │     missing stats
    │     table: bar@primary
    │     spans: FULL SCAN
    │
    └── • scan
          missing stats
          table: foo@primary
          spans: 1 span
• group
│
└── • cross join
    │
    ├── • scan
    │     table: bar@primary
    │     spans: FULL SCAN
    │
    └── • scan
          table: foo@primary
          spans: 0 spans

# ConstructScalarGroupBy
gist-explain-roundtrip
SELECT sum(a),max(c) FROM foo
----
hash: 14019041554553312077
plan-gist: AgFqBgAFAAAMBgQA
• group (scalar)
│
└── • scan
      missing stats
      table: foo@c_idx
      spans: FULL SCAN
• group (scalar)
│
└── • scan
      table: foo@c_idx
      spans: FULL SCAN

# ConstructInsert
gist-explain-roundtrip
INSERT INTO foo VALUES (1,ARRAY[1,2],'str')
----
hash: 7858461319896258412
plan-gist: Ah9qAQA=
• insert fast path
  into: foo(a, b, c)
  auto commit
  size: 3 columns, 1 row
• insert fast path
  into: foo()
  auto commit

# ConstructDistinct
gist-explain-roundtrip
SELECT DISTINCT ON (b,c) b,c from abc
----
hash: 7154331578550141841
plan-gist: AgFuAgAGAAANAAYEAA==
• distinct
│ distinct on: b, c
│
└── • scan
      missing stats
      table: abc@primary
      spans: FULL SCAN
• distinct
│ distinct on
│
└── • scan
      table: abc@primary
      spans: FULL SCAN

# ConstructHashSetOpOp
gist-explain-roundtrip
SELECT * FROM abc INTERSECT ALL SELECT * FROM abc
----
hash: 14180266622096736640
plan-gist: AgFuAgAHAAABbgIABwAADwEABgYA
• intersect all
│
├── • scan
│     missing stats
│     table: abc@primary
│     spans: FULL SCAN
│
└── • scan
      missing stats
      table: abc@primary
      spans: FULL SCAN
• union all
│
├── • scan
│     table: abc@primary
│     spans: FULL SCAN
│
└── • scan
      table: abc@primary
      spans: FULL SCAN

# ConstructStreamingSetOpOp
gist-explain-roundtrip
SELECT * FROM abc UNION SELECT * FROM abc ORDER BY b,a
----
hash: 8701093766435411078
plan-gist: AgFuAgAHAAARAW4CAAcAABEQDQAGBgA=
• distinct
│ distinct on: a
│
└── • union all
    │
    ├── • sort
    │   │ order: +b,+a
    │   │
    │   └── • scan
    │         missing stats
    │         table: abc@primary
    │         spans: FULL SCAN
    │
    └── • sort
        │ order: +b,+a
        │
        └── • scan
              missing stats
              table: abc@primary
              spans: FULL SCAN
• distinct
│ distinct on
│
└── • union all
    │
    ├── • sort
    │   │ order
    │   │
    │   └── • scan
    │         table: abc@primary
    │         spans: FULL SCAN
    │
    └── • sort
        │ order
        │
        └── • scan
              table: abc@primary
              spans: FULL SCAN

# ConstructUnionAllOp
gist-explain-roundtrip
SELECT * FROM abc UNION ALL SELECT * FROM abc
----
hash: 6308280373918303600
plan-gist: AgFuAgAHAAABbgIABwAAEAYGAA==
• union all
│
├── • scan
│     missing stats
│     table: abc@primary
│     spans: FULL SCAN
│
└── • scan
      missing stats
      table: abc@primary
      spans: FULL SCAN
• union all
│
├── • scan
│     table: abc@primary
│     spans: FULL SCAN
│
└── • scan
      table: abc@primary
      spans: FULL SCAN

# ConstructOrdinality
gist-explain-roundtrip
SELECT * FROM abc WITH ORDINALITY
----
hash: 5149511237402522706
plan-gist: AgFuAgAHAAASBggA
• ordinality
│
└── • scan
      missing stats
      table: abc@primary
      spans: FULL SCAN
• ordinality
│
└── • scan
      table: abc@primary
      spans: FULL SCAN

# ConstructLookupJoin
gist-explain-roundtrip
SELECT * FROM foo INNER LOOKUP JOIN bar ON a = ba
----
hash: 481304706963354016
plan-gist: AgFqAgAHAAAUAGwCAgEABggA
• lookup join
│ table: bar@primary
│ equality: (a) = (ba)
│ equality cols are key
│
└── • scan
      missing stats
      table: foo@primary
      spans: FULL SCAN
• lookup join
│ table: bar@primary
│ equality: (a) = (ba)
│ equality cols are key
│
└── • scan
      table: foo@primary
      spans: FULL SCAN

# ConstructInvertedJoin
gist-explain-roundtrip
SELECT * FROM foo JOIN bar ON b @> ARRAY[1,2]
----
hash: 14236313391177429609
plan-gist: AgFsAgABAAAWagRqBBQAagICAQAJAAAAAAAGCAA=
• cross join
│
├── • scan
│     missing stats
│     table: bar@primary
│     spans: FULL SCAN
│
└── • lookup join
    │ table: foo@primary
    │ equality: (a) = (a)
    │ equality cols are key
    │ pred: b @> _
    │
    └── • zigzag join
          left table: foo@b_inverted_index
          left columns: (a)
          left fixed values: 1 column
          right table: foo@b_inverted_index
          right columns: ()
          right fixed values: 1 column
• cross join
│
├── • scan
│     table: bar@primary
│     spans: FULL SCAN
│
└── • lookup join
    │ table: foo@primary
    │ equality: (_) = (a)
    │ equality cols are key
    │
    └── • zigzag join
          left table: foo@b_inverted_index
          left columns: ()
          right table: foo@b_inverted_index
          right columns: ()

# ConstructZigzagJoin
gist-explain-roundtrip
SELECT * FROM abc WHERE b = 2 AND c = 3
----
hash: 599474890014729044
plan-gist: AhZuBG4GBgYA
• zigzag join
  pred: (b = _) AND (c = _)
  left table: abc@secondary
  left columns: (a, b)
  left fixed values: 1 column
  right table: abc@secondary
  right columns: (c)
  right fixed values: 1 column
• zigzag join
  left table: abc@secondary
  left columns: ()
  right table: abc@secondary
  right columns: ()

#	ConstructMax1Row
gist-explain-roundtrip
SELECT (SELECT a FROM abc FOR UPDATE)
----
hash: 7735856439233665626
plan-gist: AgFuBAABAAAYAgAGAgA=
• root
│
├── • values
│     size: 1 column, 1 row
│
└── • subquery
    │ id: @S1
    │ original sql: (SELECT a FROM abc FOR UPDATE)
    │ exec mode: one row
    │
    └── • max1row
        │ estimated row count: 1
        │
        └── • scan
              missing stats
              table: abc@secondary
              spans: FULL SCAN
              locking strength: for update
• root
│
├── • norows
│
└── • subquery
    │ id: @S1
    │ exec mode: exists
    │
    └── • max1row
        │
        └── • scan
              table: abc@secondary
              spans: FULL SCAN

#	ConstructProjectSet
gist-explain-roundtrip
SELECT * FROM generate_series(1, 3)
----
hash: 3240284421188437333
plan-gist: AgIAGQAGAgA=
• project set
│ estimated row count: 10
│
└── • emptyrow
• project set
│
└── • norows

#	ConstructWindow
gist-explain-roundtrip
SELECT * FROM (SELECT avg(a) OVER () FROM abc)
----
hash: 7877116598142696241
plan-gist: AgFuBAABAAAaBQIGAgA=
• window
│
└── • scan
      missing stats
      table: abc@secondary
      spans: FULL SCAN
• window
│
└── • scan
      table: abc@secondary
      spans: FULL SCAN

#	ConstructExplainOpt
gist-explain-roundtrip
EXPLAIN (OPT) SELECT 1
----
hash: 12598942397768016898
plan-gist: AhsGAgA=
• explain
• explain

#	ConstructExplain
gist-explain-roundtrip
EXPLAIN SELECT 1
----
hash: 2948044416462619662
plan-gist: AhwGAgA=
• explain
• explain

#	ConstructShowTrace
gist-explain-roundtrip
SHOW TRACE FOR SESSION
----
hash: 10794616113476764771
plan-gist: Ah0ABg4A
• show trace
• show trace

#	ConstructInsert
gist-explain-roundtrip
INSERT INTO abc SELECT * from abc
----
hash: 8854468905984394874
plan-gist: AgFuAgAHAAAebgEA
• insert
│ into: abc(a, b, c)
│ auto commit
│
└── • scan
      missing stats
      table: abc@primary
      spans: FULL SCAN
• insert
│ into: abc()
│ auto commit
│
└── • scan
      table: abc@primary
      spans: FULL SCAN

#	ConstructUpdate
gist-explain-roundtrip
UPDATE abc SET b = 2 WHERE a = 1
----
hash: 16212845964205132171
plan-gist: AgFuAgAHAgAHAAUIIG4AAQA=
• update
│ table: abc
│ set: b
│ auto commit
│
└── • render
    │
    └── • scan
          missing stats
          table: abc@primary
          spans: 1 span
• update
│ table: abc
│ set
│ auto commit
│
└── • render
    │
    └── • scan
          table: abc@primary
          spans: 0 spans

#	ConstructUpsert
gist-explain-roundtrip
UPSERT INTO abc (a,b,c) VALUES (1,2,3)
----
hash: 17164490578267507034
plan-gist: AgIAAW4CAAcCAAkBAAABAQUSIW4BAA==
• upsert
│ into: abc(a, b, c)
│ auto commit
│ arbiter indexes: primary
│
└── • cross join (left outer)
    │
    ├── • values
    │     size: 3 columns, 1 row
    │
    └── • scan
          missing stats
          table: abc@primary
          spans: 1 span
• upsert
│ into: abc()
│ auto commit
│
└── • cross join (left outer)
    │
    ├── • norows
    │
    └── • scan
          table: abc@primary
          spans: 0 spans

#	ConstructDeleteRange
# FIXME: how to test?
gist-explain-roundtrip
DELETE FROM foo 
----
hash: 1324529101884638227
plan-gist: AgFqAgAHAAAiagEA
• delete
│ from: foo
│ auto commit
│
└── • scan
      missing stats
      table: foo@primary
      spans: FULL SCAN
• delete
│ from: foo
│ auto commit
│
└── • scan
      table: foo@primary
      spans: FULL SCAN

#	ConstructDelete
gist-explain-roundtrip
DELETE FROM foo WHERE a = 1
----
hash: 13015352668290460729
plan-gist: AgFqAgAHAgAiagEA
• delete
│ from: foo
│ auto commit
│
└── • scan
      missing stats
      table: foo@primary
      spans: 1 span
• delete
│ from: foo
│ auto commit
│
└── • scan
      table: foo@primary
      spans: 0 spans

#	createTableOp
# TODO: figure out how to go DDL
build
CREATE TABLE t1 (x int)
----
create-table
 ├── CREATE TABLE t1 (x INT8)
 ├── cardinality: [0 - 0]
 ├── volatile, mutations
 ├── stats: [rows=0]
 └── cost: 0.02

#	createTableAsOp
build
CREATE TABLE t2 AS SELECT * FROM abc
----
create-table
 ├── CREATE TABLE t2 AS SELECT * FROM t.public.abc
 ├── cardinality: [0 - 0]
 ├── volatile, mutations
 ├── stats: [rows=0]
 ├── cost: 1134.84
 └── project
      ├── columns: rowid:6(int) t.public.abc.a:1(int!null) t.public.abc.b:2(int) t.public.abc.c:3(int)
      ├── volatile
      ├── stats: [rows=1000]
      ├── cost: 1134.83
      ├── key: (1)
      ├── fd: (1)-->(2,3,6)
      ├── prune: (1-3,6)
      ├── interesting orderings: (+1) (+2,+1) (+3,+1)
      ├── project
      │    ├── columns: t.public.abc.a:1(int!null) t.public.abc.b:2(int) t.public.abc.c:3(int)
      │    ├── stats: [rows=1000]
      │    ├── cost: 1114.82
      │    ├── key: (1)
      │    ├── fd: (1)-->(2,3)
      │    ├── prune: (1-3)
      │    ├── interesting orderings: (+1) (+2,+1) (+3,+1)
      │    └── scan t.public.abc
      │         ├── columns: t.public.abc.a:1(int!null) t.public.abc.b:2(int) t.public.abc.c:3(int) t.public.abc.crdb_internal_mvcc_timestamp:4(decimal) t.public.abc.tableoid:5(oid)
      │         ├── stats: [rows=1000]
      │         ├── cost: 1104.81
      │         ├── key: (1)
      │         ├── fd: (1)-->(2-5)
      │         ├── prune: (1-5)
      │         └── interesting orderings: (+1) (+2,+1) (+3,+1)
      └── projections
           └── function: unique_rowid [as=rowid:6, type=int, volatile]

#	createViewOp
build
CREATE VIEW v AS SELECT 1
----
create-view t.public.v
 ├── SELECT 1
 ├── columns: "?column?":1(int)
 ├── dependencies
 ├── cardinality: [0 - 0]
 ├── volatile, mutations
 ├── stats: [rows=0]
 └── cost: 0.01

exec-ddl
CREATE SEQUENCE select_test
----

#	ConstructSequenceSelect
gist-explain-roundtrip
SELECT * FROM select_test
----
hash: 16896127220333389106
plan-gist: AicGBgA=
• sequence select
  estimated row count: 1
• sequence select

#	saveTableOp
# FIXME: couldn't find any examples of this, some internal thing?


#	opaqueOp
# FIXME: apparently not supported in execbuilder?
#gist-explain-roundtrip
#ALTER TABLE abc SCATTER FROM (0) TO (1)
#----

# TODO: work out how to do DDL
#	alterTableSplitOp
#	alterTableUnsplitOp
#	alterTableUnsplitAllOp
#	alterTableRelocateOp

#	ConstructBuffer/ConstructScanBuffer
gist-explain-roundtrip
SELECT * FROM [INSERT INTO abc SELECT a, b, c FROM abc RETURNING a] ORDER BY a
----
hash: 7504348941617548954
plan-gist: AgFuAgAHAAAebgAvMBEGAgA=
• root
│
├── • sort
│   │ order: +a
│   │
│   └── • scan buffer
│         label: buffer 1
│
└── • subquery
    │ id: @S1
    │ original sql: INSERT INTO abc SELECT a, b, c FROM abc RETURNING a
    │ exec mode: all rows
    │
    └── • buffer
        │ label: buffer 1
        │
        └── • insert
            │ into: abc(a, b, c)
            │
            └── • scan
                  missing stats
                  table: abc@primary
                  spans: FULL SCAN
• root
│
├── • sort
│   │ order
│   │
│   └── • scan buffer
│         label
│
└── • subquery
    │ id: @S1
    │ exec mode: exists
    │
    └── • buffer
        │ label
        │
        └── • insert
            │ into: abc()
            │
            └── • scan
                  table: abc@primary
                  spans: FULL SCAN

#	recursiveCTEOp
#	controlJobsOp
#	controlSchedulesOp
#	cancelQueriesOp
#	cancelSessionsOp

#	ConstructCreateStatistics
gist-explain-roundtrip
CREATE STATISTICS s1 FROM foo
----
hash: 1780391343084059690
plan-gist: AjYA
• create statistics
• create statistics

#	ConstructExport
gist-explain-roundtrip
EXPORT INTO CSV "tmp" FROM SELECT * FROM foo
----
hash: 1132676487712417406
plan-gist: AgFqAgAHAAAGBjcGBgA=
• export
│
└── • scan
      missing stats
      table: foo@primary
      spans: FULL SCAN
• export
│
└── • scan
      table: foo@primary
      spans: FULL SCAN

# ConstructValues
# FIXME: we could probably do better here...
gist-explain-roundtrip
SELECT 1
----
hash: 8435090442833167832
plan-gist: AgIABgIA
• values
  size: 1 column, 1 row
• norows
