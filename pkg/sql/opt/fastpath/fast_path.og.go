// Code generated by optgen; DO NOT EDIT.

package fastpath

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt"
	"github.com/cockroachdb/cockroach/pkg/sql/opt/memo"
	"github.com/cockroachdb/cockroach/pkg/sql/opt/props/physical"
)

// tryFastPath should not be used directly; use TryOptimizerFastPath instead.
func (_fp *fastPathExplorer) tryFastPath() (_rel memo.RelExpr, _ok bool) {
	_root := _fp.f.Memo().RootExpr().(memo.RelExpr)
	_required := _fp.f.Memo().RootProps()
	switch t := _root.(type) {
	case *memo.InsertExpr:
		return _fp.fastPathInsert(t, _required)
	case *memo.SelectExpr:
		return _fp.fastPathSelect(t, _required)
	case *memo.ProjectExpr:
		return _fp.fastPathProject(t, _required)
	}

	// No rules for other operator types.
	return nil, false
}

func (_fp *fastPathExplorer) fastPathInsert(
	_root *memo.InsertExpr,
	_required *physical.Required,
) (_rel memo.RelExpr, _ok bool) {
	opt.MaybeInjectOptimizerTestingPanic(_fp.ctx, _fp.evalCtx)
	// [SimpleInsertFastPath]
	{
		input := _root.Input
		_values, _ := input.(*memo.ValuesExpr)
		if _values != nil {
			if _fp.funcs.IsValuesConstantsAndPlaceholders(_values) {
				// The matched expression will be kept as-is.
				return _root, true
			}
		}
	}

	return nil, false
}

func (_fp *fastPathExplorer) fastPathSelect(
	_root *memo.SelectExpr,
	_required *physical.Required,
) (_rel memo.RelExpr, _ok bool) {
	opt.MaybeInjectOptimizerTestingPanic(_fp.ctx, _fp.evalCtx)
	// [PlaceholderSelectFastPath]
	{
		_scan, _ := _root.Input.(*memo.ScanExpr)
		if _scan != nil {
			private := &_scan.ScanPrivate
			if _fp.funcs.CheckRowCountForFastPath(_root) {
				if _fp.funcs.IsEmptyOrdering(_fp.funcs.RequiredOrdering(_required)) {
					filters := _root.Filters
					if _fp.funcs.CanUseFiltersInPlaceholderScan(filters) {
						index, ok := _fp.funcs.FindPlaceholderScanIndex(private, filters)
						if ok {
							_expr := &memo.PlaceholderScanExpr{
								Span:        _fp.funcs.MakePlaceholderScanSpan(filters, private, index),
								ScanPrivate: *_fp.funcs.MakePlaceholderScanPrivate(_root, private, index),
							}

							_interned := _fp.f.Memo().AddPlaceholderScanToGroup(_expr, _root)
							return _interned, true
						}
					}
				}
			}
		}
	}

	return nil, false
}

func (_fp *fastPathExplorer) fastPathProject(
	_root *memo.ProjectExpr,
	_required *physical.Required,
) (_rel memo.RelExpr, _ok bool) {
	opt.MaybeInjectOptimizerTestingPanic(_fp.ctx, _fp.evalCtx)
	// [SimpleProjectInsertFastPath]
	{
		insert := _root.Input
		_insert, _ := insert.(*memo.InsertExpr)
		if _insert != nil {
			input := _insert.Input
			_values, _ := input.(*memo.ValuesExpr)
			if _values != nil {
				if _fp.funcs.IsValuesConstantsAndPlaceholders(_values) {
					if len(_root.Projections) == 0 {
						// The matched expression will be kept as-is.
						return _root, true
					}
				}
			}
		}
	}

	// [PlaceholderProjectSelectFastPath]
	{
		_select, _ := _root.Input.(*memo.SelectExpr)
		if _select != nil {
			_scan, _ := _select.Input.(*memo.ScanExpr)
			if _scan != nil {
				private := &_scan.ScanPrivate
				if _fp.funcs.CheckRowCountForFastPath(_root) {
					if _fp.funcs.IsEmptyOrdering(_fp.funcs.RequiredOrdering(_required)) {
						filters := _select.Filters
						if _fp.funcs.CanUseFiltersInPlaceholderScan(filters) {
							index, ok := _fp.funcs.FindPlaceholderScanIndex(private, filters)
							if ok {
								if len(_root.Projections) == 0 {
									_expr := &memo.PlaceholderScanExpr{
										Span:        _fp.funcs.MakePlaceholderScanSpan(filters, private, index),
										ScanPrivate: *_fp.funcs.MakePlaceholderScanPrivate(_root, private, index),
									}

									_interned := _fp.f.Memo().AddPlaceholderScanToGroup(_expr, _root)
									return _interned, true
								}
							}
						}
					}
				}
			}
		}
	}

	return nil, false
}
