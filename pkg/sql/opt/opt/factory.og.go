// Code generated by optgen; DO NOT EDIT.

package opt

type Factory interface {
	// Metadata returns the query-specific metadata, which includes information
	// about the columns and tables used in this particular query.
	Metadata() *Metadata

	// InternList adds the given list of group IDs to memo storage and returns
	// an ID that can be used for later lookup. If the same list was added
	// previously, this method is a no-op and returns the ID of the previous
	// value.
	InternList(items []GroupID) ListID

	// InternPrivate adds the given private value to the memo and returns an ID
	// that can be used for later lookup. If the same value was added before,
	// then this method is a no-op and returns the ID of the previous value.
	InternPrivate(private interface{}) PrivateID

	// DynamicConstruct dynamically constructs an operator with the given type
	// and operands. It is equivalent to a switch statement that calls the
	// ConstructXXX method that corresponds to the given operator.
	DynamicConstruct(op Operator, children []GroupID, private PrivateID) GroupID

	// Scalar operator constructors.
	ConstructSubquery(input GroupID, projection GroupID) GroupID
	ConstructVariable(col PrivateID) GroupID
	ConstructConst(value PrivateID) GroupID
	ConstructTrue() GroupID
	ConstructFalse() GroupID
	ConstructPlaceholder(value PrivateID) GroupID
	ConstructTuple(elems ListID) GroupID
	ConstructProjections(elems ListID, cols PrivateID) GroupID
	ConstructFilters(conditions ListID) GroupID
	ConstructExists(input GroupID) GroupID
	ConstructAnd(left GroupID, right GroupID) GroupID
	ConstructOr(left GroupID, right GroupID) GroupID
	ConstructNot(input GroupID) GroupID
	ConstructEq(left GroupID, right GroupID) GroupID
	ConstructLt(left GroupID, right GroupID) GroupID
	ConstructGt(left GroupID, right GroupID) GroupID
	ConstructLe(left GroupID, right GroupID) GroupID
	ConstructGe(left GroupID, right GroupID) GroupID
	ConstructNe(left GroupID, right GroupID) GroupID
	ConstructIn(left GroupID, right GroupID) GroupID
	ConstructNotIn(left GroupID, right GroupID) GroupID
	ConstructLike(left GroupID, right GroupID) GroupID
	ConstructNotLike(left GroupID, right GroupID) GroupID
	ConstructILike(left GroupID, right GroupID) GroupID
	ConstructNotILike(left GroupID, right GroupID) GroupID
	ConstructSimilarTo(left GroupID, right GroupID) GroupID
	ConstructNotSimilarTo(left GroupID, right GroupID) GroupID
	ConstructRegMatch(left GroupID, right GroupID) GroupID
	ConstructNotRegMatch(left GroupID, right GroupID) GroupID
	ConstructRegIMatch(left GroupID, right GroupID) GroupID
	ConstructNotRegIMatch(left GroupID, right GroupID) GroupID
	ConstructIs(left GroupID, right GroupID) GroupID
	ConstructIsNot(left GroupID, right GroupID) GroupID
	ConstructContains(left GroupID, right GroupID) GroupID
	ConstructContainedBy(left GroupID, right GroupID) GroupID
	ConstructAny(left GroupID, right GroupID) GroupID
	ConstructSome(left GroupID, right GroupID) GroupID
	ConstructAll(left GroupID, right GroupID) GroupID
	ConstructBitand(left GroupID, right GroupID) GroupID
	ConstructBitor(left GroupID, right GroupID) GroupID
	ConstructBitxor(left GroupID, right GroupID) GroupID
	ConstructPlus(left GroupID, right GroupID) GroupID
	ConstructMinus(left GroupID, right GroupID) GroupID
	ConstructMult(left GroupID, right GroupID) GroupID
	ConstructDiv(left GroupID, right GroupID) GroupID
	ConstructFloorDiv(left GroupID, right GroupID) GroupID
	ConstructMod(left GroupID, right GroupID) GroupID
	ConstructPow(left GroupID, right GroupID) GroupID
	ConstructConcat(left GroupID, right GroupID) GroupID
	ConstructLShift(left GroupID, right GroupID) GroupID
	ConstructRShift(left GroupID, right GroupID) GroupID
	ConstructFetchVal(json GroupID, index GroupID) GroupID
	ConstructFetchText(json GroupID, index GroupID) GroupID
	ConstructFetchValPath(json GroupID, path GroupID) GroupID
	ConstructFetchTextPath(json GroupID, path GroupID) GroupID
	ConstructUnaryPlus(input GroupID) GroupID
	ConstructUnaryMinus(input GroupID) GroupID
	ConstructUnaryComplement(input GroupID) GroupID
	ConstructFunction(args ListID, def PrivateID) GroupID

	// Relational operator constructors.
	ConstructScan(table PrivateID) GroupID
	ConstructValues(rows ListID, cols PrivateID) GroupID
	ConstructSelect(input GroupID, filter GroupID) GroupID
	ConstructProject(input GroupID, projections GroupID) GroupID
	ConstructInnerJoin(left GroupID, right GroupID, on GroupID) GroupID
	ConstructLeftJoin(left GroupID, right GroupID, on GroupID) GroupID
	ConstructRightJoin(left GroupID, right GroupID, on GroupID) GroupID
	ConstructFullJoin(left GroupID, right GroupID, on GroupID) GroupID
	ConstructSemiJoin(left GroupID, right GroupID, on GroupID) GroupID
	ConstructAntiJoin(left GroupID, right GroupID, on GroupID) GroupID
	ConstructInnerJoinApply(left GroupID, right GroupID, on GroupID) GroupID
	ConstructLeftJoinApply(left GroupID, right GroupID, on GroupID) GroupID
	ConstructRightJoinApply(left GroupID, right GroupID, on GroupID) GroupID
	ConstructFullJoinApply(left GroupID, right GroupID, on GroupID) GroupID
	ConstructSemiJoinApply(left GroupID, right GroupID, on GroupID) GroupID
	ConstructAntiJoinApply(left GroupID, right GroupID, on GroupID) GroupID
	ConstructGroupBy(input GroupID, groupings GroupID, aggregations GroupID) GroupID
	ConstructUnion(left GroupID, right GroupID, colMap PrivateID) GroupID
	ConstructIntersect(left GroupID, right GroupID) GroupID
	ConstructExcept(left GroupID, right GroupID) GroupID
}
