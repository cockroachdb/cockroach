exec-ddl
CREATE TABLE a (x INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON)
----
TABLE a
 ├── x int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE t.b (x INT PRIMARY KEY, z INT)
----
TABLE b
 ├── x int not null
 ├── z int
 └── INDEX primary
      └── x int not null

# --------------------------------------------------
# EnsureJoinFiltersAnd
# --------------------------------------------------
opt
SELECT * FROM a INNER JOIN b ON a.x=b.x AND b.z<a.i
----
inner-join
 ├── columns: x:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) z:7(int)
 ├── scan a
 │    └── columns: a.x:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 ├── scan b
 │    └── columns: b.x:6(int!null) b.z:7(int)
 └── filters [type=bool, outer=(1,2,6,7)]
      ├── eq [type=bool, outer=(1,6)]
      │    ├── variable: a.x [type=int, outer=(1)]
      │    └── variable: b.x [type=int, outer=(6)]
      └── lt [type=bool, outer=(2,7)]
           ├── variable: b.z [type=int, outer=(7)]
           └── variable: a.i [type=int, outer=(2)]

# --------------------------------------------------
# EnsureJoinFilters
# --------------------------------------------------
opt
SELECT * FROM a INNER JOIN b ON a.x=b.x
----
inner-join
 ├── columns: x:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) z:7(int)
 ├── scan a
 │    └── columns: a.x:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 ├── scan b
 │    └── columns: b.x:6(int!null) b.z:7(int)
 └── filters [type=bool, outer=(1,6)]
      └── eq [type=bool, outer=(1,6)]
           ├── variable: a.x [type=int, outer=(1)]
           └── variable: b.x [type=int, outer=(6)]

opt
SELECT * FROM a INNER JOIN b ON a.s='foo' OR b.z<10
----
inner-join
 ├── columns: x:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) z:7(int)
 ├── scan a
 │    └── columns: a.x:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 ├── scan b
 │    └── columns: b.x:6(int!null) b.z:7(int)
 └── filters [type=bool, outer=(4,7)]
      └── or [type=bool, outer=(4,7)]
           ├── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
           │    ├── variable: a.s [type=string, outer=(4)]
           │    └── const: 'foo' [type=string]
           └── lt [type=bool, outer=(7), constraints=(/7: (/NULL - /9]; tight)]
                ├── variable: b.z [type=int, outer=(7)]
                └── const: 10 [type=int]

# --------------------------------------------------
# PushFilterIntoJoinLeft
# --------------------------------------------------
opt
SELECT * FROM a INNER JOIN b ON a.x=b.x AND a.s='foo'
----
inner-join
 ├── columns: x:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) z:7(int)
 ├── select
 │    ├── columns: a.x:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    ├── scan a
 │    │    └── columns: a.x:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── filters [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │         └── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │              ├── variable: a.s [type=string, outer=(4)]
 │              └── const: 'foo' [type=string]
 ├── scan b
 │    └── columns: b.x:6(int!null) b.z:7(int)
 └── filters [type=bool, outer=(1,6)]
      └── eq [type=bool, outer=(1,6)]
           ├── variable: a.x [type=int, outer=(1)]
           └── variable: b.x [type=int, outer=(6)]

opt
SELECT * FROM a RIGHT JOIN b ON (a.i<0 OR a.i>10) AND b.z=1 AND a.s='foo' AND a.x=b.x
----
right-join
 ├── columns: x:1(int) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) z:7(int)
 ├── select
 │    ├── columns: a.x:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    ├── scan a
 │    │    └── columns: a.x:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── filters [type=bool, outer=(2,4), constraints=(/4: [/'foo' - /'foo'])]
 │         ├── or [type=bool, outer=(2)]
 │         │    ├── lt [type=bool, outer=(2), constraints=(/2: (/NULL - /-1]; tight)]
 │         │    │    ├── variable: a.i [type=int, outer=(2)]
 │         │    │    └── const: 0 [type=int]
 │         │    └── gt [type=bool, outer=(2), constraints=(/2: [/11 - ]; tight)]
 │         │         ├── variable: a.i [type=int, outer=(2)]
 │         │         └── const: 10 [type=int]
 │         └── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │              ├── variable: a.s [type=string, outer=(4)]
 │              └── const: 'foo' [type=string]
 ├── scan b
 │    └── columns: b.x:6(int!null) b.z:7(int)
 └── filters [type=bool, outer=(1,6,7), constraints=(/7: [/1 - /1])]
      ├── eq [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]
      │    ├── variable: b.z [type=int, outer=(7)]
      │    └── const: 1 [type=int]
      └── eq [type=bool, outer=(1,6)]
           ├── variable: a.x [type=int, outer=(1)]
           └── variable: b.x [type=int, outer=(6)]

# LEFT JOIN should not push down conditions to left side of join.
opt
SELECT * FROM a LEFT JOIN b ON a.x=b.x AND a.i=1
----
left-join
 ├── columns: x:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int) z:7(int)
 ├── scan a
 │    └── columns: a.x:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 ├── scan b
 │    └── columns: b.x:6(int!null) b.z:7(int)
 └── filters [type=bool, outer=(1,2,6), constraints=(/2: [/1 - /1])]
      ├── eq [type=bool, outer=(1,6)]
      │    ├── variable: a.x [type=int, outer=(1)]
      │    └── variable: b.x [type=int, outer=(6)]
      └── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
           ├── variable: a.i [type=int, outer=(2)]
           └── const: 1 [type=int]

# --------------------------------------------------
# PushFilterIntoJoinRight
# --------------------------------------------------
opt
SELECT * FROM b INNER JOIN a ON b.x=a.x AND a.s='foo'
----
inner-join
 ├── columns: x:1(int!null) z:2(int) x:3(int!null) i:4(int) f:5(float) s:6(string) j:7(jsonb)
 ├── scan b
 │    └── columns: b.x:1(int!null) b.z:2(int)
 ├── select
 │    ├── columns: a.x:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string) a.j:7(jsonb)
 │    ├── scan a
 │    │    └── columns: a.x:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string) a.j:7(jsonb)
 │    └── filters [type=bool, outer=(6), constraints=(/6: [/'foo' - /'foo']; tight)]
 │         └── eq [type=bool, outer=(6), constraints=(/6: [/'foo' - /'foo']; tight)]
 │              ├── variable: a.s [type=string, outer=(6)]
 │              └── const: 'foo' [type=string]
 └── filters [type=bool, outer=(1,3)]
      └── eq [type=bool, outer=(1,3)]
           ├── variable: b.x [type=int, outer=(1)]
           └── variable: a.x [type=int, outer=(3)]

opt
SELECT * FROM b LEFT JOIN a ON (a.i<0 OR a.i>10) AND b.z=1 AND a.s='foo' AND b.x=a.x
----
left-join
 ├── columns: x:1(int!null) z:2(int) x:3(int) i:4(int) f:5(float) s:6(string) j:7(jsonb)
 ├── scan b
 │    └── columns: b.x:1(int!null) b.z:2(int)
 ├── select
 │    ├── columns: a.x:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string) a.j:7(jsonb)
 │    ├── scan a
 │    │    └── columns: a.x:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string) a.j:7(jsonb)
 │    └── filters [type=bool, outer=(4,6), constraints=(/6: [/'foo' - /'foo'])]
 │         ├── or [type=bool, outer=(4)]
 │         │    ├── lt [type=bool, outer=(4), constraints=(/4: (/NULL - /-1]; tight)]
 │         │    │    ├── variable: a.i [type=int, outer=(4)]
 │         │    │    └── const: 0 [type=int]
 │         │    └── gt [type=bool, outer=(4), constraints=(/4: [/11 - ]; tight)]
 │         │         ├── variable: a.i [type=int, outer=(4)]
 │         │         └── const: 10 [type=int]
 │         └── eq [type=bool, outer=(6), constraints=(/6: [/'foo' - /'foo']; tight)]
 │              ├── variable: a.s [type=string, outer=(6)]
 │              └── const: 'foo' [type=string]
 └── filters [type=bool, outer=(1-3), constraints=(/2: [/1 - /1])]
      ├── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
      │    ├── variable: b.z [type=int, outer=(2)]
      │    └── const: 1 [type=int]
      └── eq [type=bool, outer=(1,3)]
           ├── variable: b.x [type=int, outer=(1)]
           └── variable: a.x [type=int, outer=(3)]

# RIGHT JOIN should not push down conditions to right side of join.
opt
SELECT * FROM b RIGHT JOIN a ON b.x=a.x AND a.i=1
----
right-join
 ├── columns: x:1(int) z:2(int) x:3(int!null) i:4(int) f:5(float) s:6(string) j:7(jsonb)
 ├── scan b
 │    └── columns: b.x:1(int!null) b.z:2(int)
 ├── scan a
 │    └── columns: a.x:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string) a.j:7(jsonb)
 └── filters [type=bool, outer=(1,3,4), constraints=(/4: [/1 - /1])]
      ├── eq [type=bool, outer=(1,3)]
      │    ├── variable: b.x [type=int, outer=(1)]
      │    └── variable: a.x [type=int, outer=(3)]
      └── eq [type=bool, outer=(4), constraints=(/4: [/1 - /1]; tight)]
           ├── variable: a.i [type=int, outer=(4)]
           └── const: 1 [type=int]

# --------------------------------------------------
# PushFilterIntoJoinLeft + PushFilterIntoJoinRight
# --------------------------------------------------

opt
SELECT * FROM a INNER JOIN b ON a.x=b.x AND a.i=1 AND b.z=1
----
inner-join
 ├── columns: x:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) z:7(int)
 ├── select
 │    ├── columns: a.x:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    ├── scan a
 │    │    └── columns: a.x:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── filters [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
 │         └── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
 │              ├── variable: a.i [type=int, outer=(2)]
 │              └── const: 1 [type=int]
 ├── select
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    ├── scan b
 │    │    └── columns: b.x:6(int!null) b.z:7(int)
 │    └── filters [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]
 │         └── eq [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]
 │              ├── variable: b.z [type=int, outer=(7)]
 │              └── const: 1 [type=int]
 └── filters [type=bool, outer=(1,6)]
      └── eq [type=bool, outer=(1,6)]
           ├── variable: a.x [type=int, outer=(1)]
           └── variable: b.x [type=int, outer=(6)]

# FULL JOIN should not push down conditions to either side of join.
opt
SELECT * FROM a FULL JOIN b ON a.x=b.x AND a.i=1 AND b.z=1
----
full-join
 ├── columns: x:1(int) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int) z:7(int)
 ├── scan a
 │    └── columns: a.x:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 ├── scan b
 │    └── columns: b.x:6(int!null) b.z:7(int)
 └── filters [type=bool, outer=(1,2,6,7), constraints=(/2: [/1 - /1]; /7: [/1 - /1])]
      ├── eq [type=bool, outer=(1,6)]
      │    ├── variable: a.x [type=int, outer=(1)]
      │    └── variable: b.x [type=int, outer=(6)]
      ├── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
      │    ├── variable: a.i [type=int, outer=(2)]
      │    └── const: 1 [type=int]
      └── eq [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]
           ├── variable: b.z [type=int, outer=(7)]
           └── const: 1 [type=int]
