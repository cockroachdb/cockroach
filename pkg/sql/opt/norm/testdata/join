exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 └── INDEX primary
      └── k int not null

exec-ddl
CREATE TABLE t.b (x INT PRIMARY KEY, z INT)
----
TABLE b
 ├── x int not null
 ├── z int
 └── INDEX primary
      └── x int not null

# --------------------------------------------------
# EnsureJoinFiltersAnd
# --------------------------------------------------
opt
SELECT * FROM a INNER JOIN b ON a.k=b.x AND b.z<a.i
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) z:7(int)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── scan b
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,2,6,7)]
      ├── eq [type=bool, outer=(1,6)]
      │    ├── variable: a.k [type=int, outer=(1)]
      │    └── variable: b.x [type=int, outer=(6)]
      └── lt [type=bool, outer=(2,7)]
           ├── variable: b.z [type=int, outer=(7)]
           └── variable: a.i [type=int, outer=(2)]

# --------------------------------------------------
# EnsureJoinFilters
# --------------------------------------------------
opt
SELECT * FROM a INNER JOIN b ON a.k=b.x
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) z:7(int)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── scan b
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,6)]
      └── eq [type=bool, outer=(1,6)]
           ├── variable: a.k [type=int, outer=(1)]
           └── variable: b.x [type=int, outer=(6)]

opt
SELECT * FROM a INNER JOIN b ON a.s='foo' OR b.z<10
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) z:7(int)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── scan b
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(4,7)]
      └── or [type=bool, outer=(4,7)]
           ├── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
           │    ├── variable: a.s [type=string, outer=(4)]
           │    └── const: 'foo' [type=string]
           └── lt [type=bool, outer=(7), constraints=(/7: (/NULL - /9]; tight)]
                ├── variable: b.z [type=int, outer=(7)]
                └── const: 10 [type=int]

# --------------------------------------------------
# PushFilterIntoJoinLeft
# --------------------------------------------------
opt
SELECT * FROM a INNER JOIN b ON a.k=b.x AND a.s='foo'
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) z:7(int)
 ├── select
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │         └── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │              ├── variable: a.s [type=string, outer=(4)]
 │              └── const: 'foo' [type=string]
 ├── scan b
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,6)]
      └── eq [type=bool, outer=(1,6)]
           ├── variable: a.k [type=int, outer=(1)]
           └── variable: b.x [type=int, outer=(6)]

opt
SELECT * FROM a RIGHT JOIN b ON (a.i<0 OR a.i>10) AND b.z=1 AND a.s='foo' AND a.k=b.x
----
right-join
 ├── columns: k:1(int) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) z:7(int)
 ├── select
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(2,4), constraints=(/4: [/'foo' - /'foo'])]
 │         ├── or [type=bool, outer=(2)]
 │         │    ├── lt [type=bool, outer=(2), constraints=(/2: (/NULL - /-1]; tight)]
 │         │    │    ├── variable: a.i [type=int, outer=(2)]
 │         │    │    └── const: 0 [type=int]
 │         │    └── gt [type=bool, outer=(2), constraints=(/2: [/11 - ]; tight)]
 │         │         ├── variable: a.i [type=int, outer=(2)]
 │         │         └── const: 10 [type=int]
 │         └── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │              ├── variable: a.s [type=string, outer=(4)]
 │              └── const: 'foo' [type=string]
 ├── scan b
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,6,7), constraints=(/7: [/1 - /1])]
      ├── eq [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]
      │    ├── variable: b.z [type=int, outer=(7)]
      │    └── const: 1 [type=int]
      └── eq [type=bool, outer=(1,6)]
           ├── variable: a.k [type=int, outer=(1)]
           └── variable: b.x [type=int, outer=(6)]

# LEFT JOIN should not push down conditions to left side of join.
opt
SELECT * FROM a LEFT JOIN b ON a.k=b.x AND a.i=1
----
left-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int) z:7(int)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── scan b
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,2,6), constraints=(/2: [/1 - /1])]
      ├── eq [type=bool, outer=(1,6)]
      │    ├── variable: a.k [type=int, outer=(1)]
      │    └── variable: b.x [type=int, outer=(6)]
      └── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
           ├── variable: a.i [type=int, outer=(2)]
           └── const: 1 [type=int]

# Semi-join case.
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM b WHERE x=k AND s='foo')
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── select
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │         └── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │              ├── variable: a.s [type=string, outer=(4)]
 │              └── const: 'foo' [type=string]
 ├── scan b
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,6)]
      └── eq [type=bool, outer=(1,6)]
           ├── variable: b.x [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

# Do not push anti-join conditions into left input.
opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM b WHERE x=k AND s='foo')
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── scan b
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,4,6), constraints=(/4: [/'foo' - /'foo'])]
      ├── eq [type=bool, outer=(1,6)]
      │    ├── variable: b.x [type=int, outer=(6)]
      │    └── variable: a.k [type=int, outer=(1)]
      └── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
           ├── variable: a.s [type=string, outer=(4)]
           └── const: 'foo' [type=string]

# --------------------------------------------------
# PushFilterIntoJoinRight
# --------------------------------------------------
opt
SELECT * FROM b INNER JOIN a ON b.x=a.k AND a.s='foo'
----
inner-join
 ├── columns: x:1(int!null) z:2(int) k:3(int!null) i:4(int) f:5(float) s:6(string) j:7(jsonb)
 ├── scan b
 │    ├── columns: b.x:1(int!null) b.z:2(int)
 │    └── keys: (1)
 ├── select
 │    ├── columns: a.k:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string) a.j:7(jsonb)
 │    ├── keys: (3)
 │    ├── scan a
 │    │    ├── columns: a.k:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string) a.j:7(jsonb)
 │    │    └── keys: (3)
 │    └── filters [type=bool, outer=(6), constraints=(/6: [/'foo' - /'foo']; tight)]
 │         └── eq [type=bool, outer=(6), constraints=(/6: [/'foo' - /'foo']; tight)]
 │              ├── variable: a.s [type=string, outer=(6)]
 │              └── const: 'foo' [type=string]
 └── filters [type=bool, outer=(1,3)]
      └── eq [type=bool, outer=(1,3)]
           ├── variable: b.x [type=int, outer=(1)]
           └── variable: a.k [type=int, outer=(3)]

opt
SELECT * FROM b LEFT JOIN a ON (a.i<0 OR a.i>10) AND b.z=1 AND a.s='foo' AND b.x=a.k
----
left-join
 ├── columns: x:1(int!null) z:2(int) k:3(int) i:4(int) f:5(float) s:6(string) j:7(jsonb)
 ├── scan b
 │    ├── columns: b.x:1(int!null) b.z:2(int)
 │    └── keys: (1)
 ├── select
 │    ├── columns: a.k:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string) a.j:7(jsonb)
 │    ├── keys: (3)
 │    ├── scan a
 │    │    ├── columns: a.k:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string) a.j:7(jsonb)
 │    │    └── keys: (3)
 │    └── filters [type=bool, outer=(4,6), constraints=(/6: [/'foo' - /'foo'])]
 │         ├── or [type=bool, outer=(4)]
 │         │    ├── lt [type=bool, outer=(4), constraints=(/4: (/NULL - /-1]; tight)]
 │         │    │    ├── variable: a.i [type=int, outer=(4)]
 │         │    │    └── const: 0 [type=int]
 │         │    └── gt [type=bool, outer=(4), constraints=(/4: [/11 - ]; tight)]
 │         │         ├── variable: a.i [type=int, outer=(4)]
 │         │         └── const: 10 [type=int]
 │         └── eq [type=bool, outer=(6), constraints=(/6: [/'foo' - /'foo']; tight)]
 │              ├── variable: a.s [type=string, outer=(6)]
 │              └── const: 'foo' [type=string]
 └── filters [type=bool, outer=(1-3), constraints=(/2: [/1 - /1])]
      ├── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
      │    ├── variable: b.z [type=int, outer=(2)]
      │    └── const: 1 [type=int]
      └── eq [type=bool, outer=(1,3)]
           ├── variable: b.x [type=int, outer=(1)]
           └── variable: a.k [type=int, outer=(3)]

# RIGHT JOIN should not push down conditions to right side of join.
opt
SELECT * FROM b RIGHT JOIN a ON b.x=a.k AND a.i=1
----
right-join
 ├── columns: x:1(int) z:2(int) k:3(int!null) i:4(int) f:5(float) s:6(string) j:7(jsonb)
 ├── scan b
 │    ├── columns: b.x:1(int!null) b.z:2(int)
 │    └── keys: (1)
 ├── scan a
 │    ├── columns: a.k:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string) a.j:7(jsonb)
 │    └── keys: (3)
 └── filters [type=bool, outer=(1,3,4), constraints=(/4: [/1 - /1])]
      ├── eq [type=bool, outer=(1,3)]
      │    ├── variable: b.x [type=int, outer=(1)]
      │    └── variable: a.k [type=int, outer=(3)]
      └── eq [type=bool, outer=(4), constraints=(/4: [/1 - /1]; tight)]
           ├── variable: a.i [type=int, outer=(4)]
           └── const: 1 [type=int]

# Semi-join case.
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM b WHERE x=k AND z>10)
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── select
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    ├── keys: (6)
 │    ├── scan b
 │    │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    │    └── keys: (6)
 │    └── filters [type=bool, outer=(7), constraints=(/7: [/11 - ]; tight)]
 │         └── gt [type=bool, outer=(7), constraints=(/7: [/11 - ]; tight)]
 │              ├── variable: b.z [type=int, outer=(7)]
 │              └── const: 10 [type=int]
 └── filters [type=bool, outer=(1,6)]
      └── eq [type=bool, outer=(1,6)]
           ├── variable: b.x [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

# Anti-join case.
opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM b WHERE x=k AND z>10)
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── select
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    ├── keys: (6)
 │    ├── scan b
 │    │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    │    └── keys: (6)
 │    └── filters [type=bool, outer=(7), constraints=(/7: [/11 - ]; tight)]
 │         └── gt [type=bool, outer=(7), constraints=(/7: [/11 - ]; tight)]
 │              ├── variable: b.z [type=int, outer=(7)]
 │              └── const: 10 [type=int]
 └── filters [type=bool, outer=(1,6)]
      └── eq [type=bool, outer=(1,6)]
           ├── variable: b.x [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

# --------------------------------------------------
# PushFilterIntoJoinLeft + PushFilterIntoJoinRight
# --------------------------------------------------

opt
SELECT * FROM a INNER JOIN b ON a.k=b.x AND a.i=1 AND b.z=1
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) z:7(int)
 ├── select
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
 │         └── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
 │              ├── variable: a.i [type=int, outer=(2)]
 │              └── const: 1 [type=int]
 ├── select
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    ├── keys: (6)
 │    ├── scan b
 │    │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    │    └── keys: (6)
 │    └── filters [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]
 │         └── eq [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]
 │              ├── variable: b.z [type=int, outer=(7)]
 │              └── const: 1 [type=int]
 └── filters [type=bool, outer=(1,6)]
      └── eq [type=bool, outer=(1,6)]
           ├── variable: a.k [type=int, outer=(1)]
           └── variable: b.x [type=int, outer=(6)]

# FULL JOIN should not push down conditions to either side of join.
opt
SELECT * FROM a FULL JOIN b ON a.k=b.x AND a.i=1 AND b.z=1
----
full-join
 ├── columns: k:1(int) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int) z:7(int)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── scan b
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,2,6,7), constraints=(/2: [/1 - /1]; /7: [/1 - /1])]
      ├── eq [type=bool, outer=(1,6)]
      │    ├── variable: a.k [type=int, outer=(1)]
      │    └── variable: b.x [type=int, outer=(6)]
      ├── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
      │    ├── variable: a.i [type=int, outer=(2)]
      │    └── const: 1 [type=int]
      └── eq [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]
           ├── variable: b.z [type=int, outer=(7)]
           └── const: 1 [type=int]

# Nested semi/anti-join case.
opt
SELECT * FROM b
WHERE EXISTS
(
    SELECT * FROM a WHERE k=x AND s='foo' AND NOT EXISTS(SELECT * FROM a WHERE i=10 AND z>100)
)
----
semi-join-apply
 ├── columns: x:1(int!null) z:2(int)
 ├── scan b
 │    ├── columns: b.x:1(int!null) b.z:2(int)
 │    └── keys: (1)
 ├── anti-join
 │    ├── columns: a.k:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string) a.j:7(jsonb)
 │    ├── outer: (1,2)
 │    ├── select
 │    │    ├── columns: a.k:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string) a.j:7(jsonb)
 │    │    ├── outer: (1)
 │    │    ├── keys: (3)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string) a.j:7(jsonb)
 │    │    │    └── keys: (3)
 │    │    └── filters [type=bool, outer=(1,3,6), constraints=(/6: [/'foo' - /'foo'])]
 │    │         ├── eq [type=bool, outer=(1,3)]
 │    │         │    ├── variable: a.k [type=int, outer=(3)]
 │    │         │    └── variable: b.x [type=int, outer=(1)]
 │    │         └── eq [type=bool, outer=(6), constraints=(/6: [/'foo' - /'foo']; tight)]
 │    │              ├── variable: a.s [type=string, outer=(6)]
 │    │              └── const: 'foo' [type=string]
 │    ├── select
 │    │    ├── columns: a.k:8(int!null) a.i:9(int) a.f:10(float) a.s:11(string) a.j:12(jsonb)
 │    │    ├── outer: (2)
 │    │    ├── keys: (8)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:8(int!null) a.i:9(int) a.f:10(float) a.s:11(string) a.j:12(jsonb)
 │    │    │    └── keys: (8)
 │    │    └── filters [type=bool, outer=(2,9), constraints=(/2: [/101 - ]; /9: [/10 - /10]; tight)]
 │    │         ├── eq [type=bool, outer=(9), constraints=(/9: [/10 - /10]; tight)]
 │    │         │    ├── variable: a.i [type=int, outer=(9)]
 │    │         │    └── const: 10 [type=int]
 │    │         └── gt [type=bool, outer=(2), constraints=(/2: [/101 - ]; tight)]
 │    │              ├── variable: b.z [type=int, outer=(2)]
 │    │              └── const: 100 [type=int]
 │    └── true [type=bool]
 └── true [type=bool]

# --------------------------------------------------
# DecorrelateJoin
# --------------------------------------------------
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM b WHERE x=k)
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── scan b
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,6)]
      └── eq [type=bool, outer=(1,6)]
           ├── variable: b.x [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM b WHERE x=k)
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── scan b
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,6)]
      └── eq [type=bool, outer=(1,6)]
           ├── variable: b.x [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

# --------------------------------------------------
# TryDecorrelateSelect
# TODO: Add test case for inner join once we hoist the Subquery operator.
# --------------------------------------------------
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM (VALUES (k), (i)) WHERE column1=k)
----
semi-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── values
 │    ├── columns: column1:6(int)
 │    ├── outer: (1,2)
 │    ├── cardinality: [2 - 2]
 │    ├── tuple [type=tuple{int}, outer=(1)]
 │    │    └── variable: a.k [type=int, outer=(1)]
 │    └── tuple [type=tuple{int}, outer=(2)]
 │         └── variable: a.i [type=int, outer=(2)]
 └── filters [type=bool, outer=(1,6)]
      └── eq [type=bool, outer=(1,6)]
           ├── variable: column1 [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM (VALUES (k), (i)) WHERE column1=k)
----
anti-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── values
 │    ├── columns: column1:6(int)
 │    ├── outer: (1,2)
 │    ├── cardinality: [2 - 2]
 │    ├── tuple [type=tuple{int}, outer=(1)]
 │    │    └── variable: a.k [type=int, outer=(1)]
 │    └── tuple [type=tuple{int}, outer=(2)]
 │         └── variable: a.i [type=int, outer=(2)]
 └── filters [type=bool, outer=(1,6)]
      └── eq [type=bool, outer=(1,6)]
           ├── variable: column1 [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

# Attempt to decorrelate query by pulling up outer select. But since limit query
# cannot be decorrelated, push the outer select back down again (and make sure
# potential rule cycle is detected and handled).
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM (SELECT * FROM b WHERE z=k LIMIT 1) WHERE z=10)
----
semi-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── select
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    ├── outer: (1)
 │    ├── cardinality: [0 - 1]
 │    ├── keys: (6)
 │    ├── limit
 │    │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    │    ├── outer: (1)
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── keys: (6)
 │    │    ├── select
 │    │    │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    │    │    ├── outer: (1)
 │    │    │    ├── keys: (6)
 │    │    │    ├── scan b
 │    │    │    │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    │    │    │    └── keys: (6)
 │    │    │    └── filters [type=bool, outer=(1,7)]
 │    │    │         └── eq [type=bool, outer=(1,7)]
 │    │    │              ├── variable: b.z [type=int, outer=(7)]
 │    │    │              └── variable: a.k [type=int, outer=(1)]
 │    │    └── const: 1 [type=int]
 │    └── filters [type=bool, outer=(7), constraints=(/7: [/10 - /10]; tight)]
 │         └── eq [type=bool, outer=(7), constraints=(/7: [/10 - /10]; tight)]
 │              ├── variable: b.z [type=int, outer=(7)]
 │              └── const: 10 [type=int]
 └── true [type=bool]

# Same as previous, but using anti-join.
opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM (SELECT * FROM b WHERE z=k LIMIT 1) WHERE z=10)
----
anti-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── select
 │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    ├── outer: (1)
 │    ├── cardinality: [0 - 1]
 │    ├── keys: (6)
 │    ├── limit
 │    │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    │    ├── outer: (1)
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── keys: (6)
 │    │    ├── select
 │    │    │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    │    │    ├── outer: (1)
 │    │    │    ├── keys: (6)
 │    │    │    ├── scan b
 │    │    │    │    ├── columns: b.x:6(int!null) b.z:7(int)
 │    │    │    │    └── keys: (6)
 │    │    │    └── filters [type=bool, outer=(1,7)]
 │    │    │         └── eq [type=bool, outer=(1,7)]
 │    │    │              ├── variable: b.z [type=int, outer=(7)]
 │    │    │              └── variable: a.k [type=int, outer=(1)]
 │    │    └── const: 1 [type=int]
 │    └── filters [type=bool, outer=(7), constraints=(/7: [/10 - /10]; tight)]
 │         └── eq [type=bool, outer=(7), constraints=(/7: [/10 - /10]; tight)]
 │              ├── variable: b.z [type=int, outer=(7)]
 │              └── const: 10 [type=int]
 └── true [type=bool]
