# Tests for PruneCols property

exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 └── INDEX primary
      └── k int not null

exec-ddl
CREATE TABLE xy (x INT PRIMARY KEY, y INT)
----
TABLE xy
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

# Scan operator.
build
SELECT * FROM a
----
scan a
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 ├── prune: (1-4)
 └── interesting orderings: (+1)

# Select operator.
build
SELECT * FROM a WHERE k=1 AND f=1.0
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float!null) s:4(string)
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-4)
 ├── prune: (2,4)
 ├── interesting orderings: (+1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4)
 │    ├── prune: (1-4)
 │    └── interesting orderings: (+1)
 └── filters [type=bool, outer=(1,3), constraints=(/1: [/1 - /1]; /3: [/1.0 - /1.0]; tight), fd=()-->(1,3)]
      └── (a.k = 1) AND (a.f = 1.0) [type=bool, outer=(1,3), constraints=(/1: [/1 - /1]; /3: [/1.0 - /1.0]; tight)]

# Select operator that doesn't reference any columns in input.
build
SELECT * FROM a WHERE True
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 ├── prune: (1-4)
 ├── interesting orderings: (+1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4)
 │    ├── prune: (1-4)
 │    └── interesting orderings: (+1)
 └── filters [type=bool]
      └── true [type=bool]

# Project operator.
build
SELECT i, s, k+1 AS r FROM a
----
project
 ├── columns: i:2(int) s:4(string) r:5(int)
 ├── prune: (2,4,5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4)
 │    ├── prune: (1-4)
 │    └── interesting orderings: (+1)
 └── projections [outer=(1,2,4)]
      └── a.k + 1 [type=int, outer=(1)]

# Join operator.
build
SELECT * FROM a INNER JOIN xy ON a.k=xy.x
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) x:5(int!null) y:6(int)
 ├── key: (5)
 ├── fd: (1)-->(2-4), (5)-->(6), (1)==(5), (5)==(1)
 ├── prune: (2-4,6)
 ├── interesting orderings: (+1) (+5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4)
 │    ├── prune: (1-4)
 │    └── interesting orderings: (+1)
 ├── scan xy
 │    ├── columns: x:5(int!null) y:6(int)
 │    ├── key: (5)
 │    ├── fd: (5)-->(6)
 │    ├── prune: (5,6)
 │    └── interesting orderings: (+5)
 └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ]), fd=(1)==(5), (5)==(1)]
      └── a.k = xy.x [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]

# Join operator that doesn't reference any columns from either input.
build
SELECT * FROM a, xy
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) x:5(int!null) y:6(int)
 ├── key: (1,5)
 ├── fd: (1)-->(2-4), (5)-->(6)
 ├── prune: (1-6)
 ├── interesting orderings: (+1) (+5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4)
 │    ├── prune: (1-4)
 │    └── interesting orderings: (+1)
 ├── scan xy
 │    ├── columns: x:5(int!null) y:6(int)
 │    ├── key: (5)
 │    ├── fd: (5)-->(6)
 │    ├── prune: (5,6)
 │    └── interesting orderings: (+5)
 └── true [type=bool]

# ApplyJoin operator.
opt
SELECT *
FROM a
WHERE (SELECT k+1 AS r FROM xy WHERE y=k) = 1
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 ├── prune: (1-4)
 ├── interesting orderings: (+1)
 └── inner-join-apply
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) r:7(int!null)
      ├── key: (1)
      ├── fd: (1)-->(2-4,7)
      ├── prune: (2-4)
      ├── interesting orderings: (+1)
      ├── scan a
      │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-4)
      │    ├── prune: (1-4)
      │    └── interesting orderings: (+1)
      ├── select
      │    ├── columns: r:7(int!null)
      │    ├── outer: (1)
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    ├── fd: ()-->(7)
      │    ├── max1-row
      │    │    ├── columns: r:7(int)
      │    │    ├── outer: (1)
      │    │    ├── cardinality: [0 - 1]
      │    │    ├── key: ()
      │    │    ├── fd: ()-->(7)
      │    │    └── project
      │    │         ├── columns: r:7(int)
      │    │         ├── outer: (1)
      │    │         ├── fd: ()-->(7)
      │    │         ├── prune: (7)
      │    │         ├── select
      │    │         │    ├── columns: y:6(int!null)
      │    │         │    ├── outer: (1)
      │    │         │    ├── fd: ()-->(6)
      │    │         │    ├── interesting orderings: ()
      │    │         │    ├── scan xy
      │    │         │    │    ├── columns: y:6(int)
      │    │         │    │    ├── prune: (6)
      │    │         │    │    └── interesting orderings: ()
      │    │         │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
      │    │         │         └── xy.y = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      │    │         └── projections [outer=(1)]
      │    │              └── a.k + 1 [type=int, outer=(1)]
      │    └── filters [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight), fd=()-->(7)]
      │         └── r = 1 [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]
      └── true [type=bool]

# SemiJoin operator.
opt
SELECT a.i
FROM a
WHERE
    EXISTS(SELECT * FROM xy WHERE a.k=xy.x) AND
    EXISTS(SELECT * FROM xy WHERE a.k=xy.x)
----
project
 ├── columns: i:2(int)
 ├── prune: (2)
 └── semi-join
      ├── columns: k:1(int!null) i:2(int)
      ├── key: (1)
      ├── fd: (1)-->(2)
      ├── prune: (2)
      ├── interesting orderings: (+1)
      ├── semi-join (merge)
      │    ├── columns: k:1(int!null) i:2(int)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2)
      │    ├── prune: (2)
      │    ├── interesting orderings: (+1)
      │    ├── scan a
      │    │    ├── columns: k:1(int!null) i:2(int)
      │    │    ├── key: (1)
      │    │    ├── fd: (1)-->(2)
      │    │    ├── ordering: +1
      │    │    ├── prune: (1,2)
      │    │    └── interesting orderings: (+1)
      │    ├── scan xy
      │    │    ├── columns: xy.x:7(int!null) xy.y:8(int)
      │    │    ├── key: (7)
      │    │    ├── fd: (7)-->(8)
      │    │    ├── ordering: +7
      │    │    ├── prune: (7,8)
      │    │    └── interesting orderings: (+7)
      │    └── merge-on
      │         ├── left ordering: +1
      │         ├── right ordering: +7
      │         └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
      │              └── a.k = xy.x [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
      ├── scan xy
      │    ├── columns: xy.x:5(int!null)
      │    ├── key: (5)
      │    ├── prune: (5)
      │    └── interesting orderings: (+5)
      └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ]), fd=(1)==(5), (5)==(1)]
           └── a.k = xy.x [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]

# AntiJoin operator.
opt
SELECT a.i
FROM a
WHERE
    NOT EXISTS(SELECT * FROM xy WHERE a.k=xy.x) AND
    NOT EXISTS(SELECT * FROM xy WHERE a.k=xy.x)
----
project
 ├── columns: i:2(int)
 ├── prune: (2)
 └── anti-join
      ├── columns: k:1(int!null) i:2(int)
      ├── key: (1)
      ├── fd: (1)-->(2)
      ├── prune: (2)
      ├── interesting orderings: (+1)
      ├── anti-join (merge)
      │    ├── columns: k:1(int!null) i:2(int)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2)
      │    ├── prune: (2)
      │    ├── interesting orderings: (+1)
      │    ├── scan a
      │    │    ├── columns: k:1(int!null) i:2(int)
      │    │    ├── key: (1)
      │    │    ├── fd: (1)-->(2)
      │    │    ├── ordering: +1
      │    │    ├── prune: (1,2)
      │    │    └── interesting orderings: (+1)
      │    ├── scan xy
      │    │    ├── columns: xy.x:7(int!null) xy.y:8(int)
      │    │    ├── key: (7)
      │    │    ├── fd: (7)-->(8)
      │    │    ├── ordering: +7
      │    │    ├── prune: (7,8)
      │    │    └── interesting orderings: (+7)
      │    └── merge-on
      │         ├── left ordering: +1
      │         ├── right ordering: +7
      │         └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
      │              └── a.k = xy.x [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
      ├── scan xy
      │    ├── columns: xy.x:5(int!null)
      │    ├── key: (5)
      │    ├── prune: (5)
      │    └── interesting orderings: (+5)
      └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ]), fd=(1)==(5), (5)==(1)]
           └── a.k = xy.x [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]

# GroupBy operator.
opt
SELECT count(*), sum(i) FROM a GROUP BY s, f
----
project
 ├── columns: count:5(int) sum:6(decimal)
 ├── prune: (5,6)
 └── group-by
      ├── columns: f:3(float) s:4(string) count:5(int) sum:6(decimal)
      ├── grouping columns: f:3(float) s:4(string)
      ├── key: (3,4)
      ├── fd: (3,4)-->(5,6)
      ├── prune: (5,6)
      ├── scan a
      │    ├── columns: i:2(int) f:3(float) s:4(string)
      │    ├── prune: (2-4)
      │    └── interesting orderings: ()
      └── aggregations [outer=(2)]
           ├── count-rows [type=int]
           └── sum [type=decimal, outer=(2)]
                └── variable: a.i [type=int, outer=(2)]

# Scalar GroupBy operator.
opt
SELECT count(*), sum(i) FROM a
----
scalar-group-by
 ├── columns: count:5(int) sum:6(decimal)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(5,6)
 ├── prune: (5,6)
 ├── scan a
 │    ├── columns: i:2(int)
 │    ├── prune: (2)
 │    └── interesting orderings: ()
 └── aggregations [outer=(2)]
      ├── count-rows [type=int]
      └── sum [type=decimal, outer=(2)]
           └── variable: a.i [type=int, outer=(2)]

# Distinct (GroupBy operator with no aggregates).
opt
SELECT DISTINCT s, f FROM a
----
group-by
 ├── columns: s:4(string) f:3(float)
 ├── grouping columns: f:3(float) s:4(string)
 ├── key: (3,4)
 └── scan a
      ├── columns: f:3(float) s:4(string)
      ├── prune: (3,4)
      └── interesting orderings: ()

# UnionAll operator (don't allow pruning).
opt
SELECT k, k, i FROM a WHERE k=1
UNION ALL
SELECT x, y, x FROM xy WHERE y=2
----
union-all
 ├── columns: k:7(int!null) k:8(int!null) i:9(int)
 ├── left columns: a.k:1(int) a.k:1(int) a.i:2(int)
 ├── right columns: x:5(int) y:6(int) x:5(int)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    ├── constraint: /1: [/1 - /1]
 │    ├── cardinality: [0 - 1]
 │    ├── key: ()
 │    ├── fd: ()-->(1,2)
 │    ├── prune: (2)
 │    └── interesting orderings: (+1)
 └── select
      ├── columns: x:5(int!null) y:6(int!null)
      ├── key: (5)
      ├── fd: ()-->(6)
      ├── prune: (5)
      ├── interesting orderings: (+5)
      ├── scan xy
      │    ├── columns: x:5(int!null) y:6(int)
      │    ├── key: (5)
      │    ├── fd: (5)-->(6)
      │    ├── prune: (5,6)
      │    └── interesting orderings: (+5)
      └── filters [type=bool, outer=(6), constraints=(/6: [/2 - /2]; tight), fd=()-->(6)]
           └── xy.y = 2 [type=bool, outer=(6), constraints=(/6: [/2 - /2]; tight)]

# Values operator.
build
SELECT * FROM (VALUES (1, 2, 3), (4, 5, 6))
----
values
 ├── columns: column1:1(int) column2:2(int) column3:3(int)
 ├── cardinality: [2 - 2]
 ├── prune: (1-3)
 ├── (1, 2, 3) [type=tuple{int, int, int}]
 └── (4, 5, 6) [type=tuple{int, int, int}]

# Explain operator (don't allow pruning).
build
EXPLAIN SELECT * FROM a
----
explain
 ├── columns: tree:5(string) field:6(string) description:7(string)
 └── scan a
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
      ├── key: (1)
      ├── fd: (1)-->(2-4)
      ├── prune: (1-4)
      └── interesting orderings: (+1)

# Limit operator.
build
SELECT * FROM a LIMIT 1
----
limit
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-4)
 ├── prune: (1-4)
 ├── interesting orderings: (+1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4)
 │    ├── prune: (1-4)
 │    └── interesting orderings: (+1)
 └── const: 1 [type=int]

# Limit operator with ordering.
build
SELECT * FROM a ORDER BY s DESC, i LIMIT 1
----
limit
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-4)
 ├── ordering: -4,+2
 ├── prune: (1,3)
 ├── interesting orderings: (-4,+2)
 ├── sort
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4)
 │    ├── ordering: -4,+2
 │    ├── prune: (1-4)
 │    └── scan a
 │         ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 │         ├── key: (1)
 │         ├── fd: (1)-->(2-4)
 │         └── prune: (1-4)
 └── const: 1 [type=int]

# Offset operator.
build
SELECT * FROM a OFFSET 1
----
offset
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 ├── prune: (1-4)
 ├── interesting orderings: (+1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4)
 │    ├── prune: (1-4)
 │    └── interesting orderings: (+1)
 └── const: 1 [type=int]

# Offset operator with ordering.
build
SELECT * FROM a ORDER BY s DESC, i OFFSET 1
----
offset
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 ├── ordering: -4,+2
 ├── prune: (1,3)
 ├── interesting orderings: (-4,+2)
 ├── sort
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4)
 │    ├── ordering: -4,+2
 │    ├── prune: (1-4)
 │    └── scan a
 │         ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 │         ├── key: (1)
 │         ├── fd: (1)-->(2-4)
 │         └── prune: (1-4)
 └── const: 1 [type=int]

# Max1Row operator.
build
SELECT (SELECT 1 AS r FROM a)
----
project
 ├── columns: r:6(int)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(6)
 ├── prune: (6)
 ├── values
 │    ├── cardinality: [1 - 1]
 │    ├── key: ()
 │    └── tuple [type=tuple]
 └── projections
      └── subquery [type=int]
           └── max1-row
                ├── columns: r:5(int!null)
                ├── cardinality: [0 - 1]
                ├── key: ()
                ├── fd: ()-->(5)
                └── project
                     ├── columns: r:5(int!null)
                     ├── fd: ()-->(5)
                     ├── prune: (5)
                     ├── scan a
                     │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
                     │    ├── key: (1)
                     │    ├── fd: (1)-->(2-4)
                     │    ├── prune: (1-4)
                     │    └── interesting orderings: (+1)
                     └── projections
                          └── const: 1 [type=int]

# RowNumber operator.
build
SELECT * FROM a WITH ORDINALITY
----
row-number
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) ordinality:5(int!null)
 ├── key: (1)
 ├── fd: (1)-->(2-5), (5)-->(1-4)
 ├── prune: (1-4)
 └── scan a
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
      ├── key: (1)
      ├── fd: (1)-->(2-4)
      ├── prune: (1-4)
      └── interesting orderings: (+1)

# RowNumber operator with ordering.
build
SELECT * FROM (SELECT * FROM a ORDER BY i, s) WITH ORDINALITY
----
row-number
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) ordinality:5(int!null)
 ├── key: (1)
 ├── fd: (1)-->(2-5), (5)-->(1-4)
 ├── prune: (1,3)
 └── sort
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
      ├── key: (1)
      ├── fd: (1)-->(2-4)
      ├── ordering: +2,+4
      ├── prune: (1-4)
      └── scan a
           ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
           ├── key: (1)
           ├── fd: (1)-->(2-4)
           └── prune: (1-4)
