exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 └── INDEX primary
      └── k int not null

exec-ddl
CREATE TABLE xy (x INT PRIMARY KEY, y INT)
----
TABLE xy
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

# --------------------------------------------------
# PruneCols property
# --------------------------------------------------

# Scan operator.
build
SELECT * FROM a
----
scan a
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 ├── keys: (1)
 └── prune: (1-4)

# Select operator.
build
SELECT * FROM a WHERE k=1 AND f=1.0
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float!null) s:4(string)
 ├── keys: (1)
 ├── prune: (2,4)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string)
 │    ├── keys: (1)
 │    └── prune: (1-4)
 └── and [type=bool, outer=(1,3), constraints=(/1: [/1 - /1]; /3: [/1.0 - /1.0]; tight)]
      ├── eq [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
      │    ├── variable: a.k [type=int, outer=(1)]
      │    └── const: 1 [type=int]
      └── eq [type=bool, outer=(3), constraints=(/3: [/1.0 - /1.0]; tight)]
           ├── variable: a.f [type=float, outer=(3)]
           └── const: 1.0 [type=float]

# Select operator that doesn't reference any columns in input.
build
SELECT * FROM a WHERE True
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 ├── keys: (1)
 ├── prune: (1-4)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string)
 │    ├── keys: (1)
 │    └── prune: (1-4)
 └── true [type=bool]

# Project operator.
build
SELECT i, s, k+1 FROM a
----
project
 ├── columns: i:2(int) s:4(string) column5:5(int)
 ├── prune: (2,4,5)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string)
 │    ├── keys: (1)
 │    └── prune: (1-4)
 └── projections [outer=(1,2,4)]
      └── plus [type=int, outer=(1)]
           ├── variable: a.k [type=int, outer=(1)]
           └── const: 1 [type=int]

# Join operator.
build
SELECT * FROM a INNER JOIN xy ON a.k=xy.x
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) x:5(int!null) y:6(int)
 ├── prune: (2-4,6)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string)
 │    ├── keys: (1)
 │    └── prune: (1-4)
 ├── scan xy
 │    ├── columns: xy.x:5(int!null) xy.y:6(int)
 │    ├── keys: (5)
 │    └── prune: (5,6)
 └── eq [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      ├── variable: a.k [type=int, outer=(1)]
      └── variable: xy.x [type=int, outer=(5)]

# Join operator that doesn't reference any columns from either input.
build
SELECT * FROM a, xy
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) x:5(int!null) y:6(int)
 ├── prune: (1-6)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string)
 │    ├── keys: (1)
 │    └── prune: (1-4)
 ├── scan xy
 │    ├── columns: xy.x:5(int!null) xy.y:6(int)
 │    ├── keys: (5)
 │    └── prune: (5,6)
 └── true [type=bool]

# ApplyJoin operator.
opt
SELECT *
FROM a
WHERE (SELECT k+1 FROM xy WHERE x=k) = 1
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 ├── keys: (1)
 ├── prune: (1-4)
 └── select
      ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) column7:7(int!null)
      ├── keys: (1)
      ├── prune: (2-4)
      ├── left-join-apply
      │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) column7:7(int)
      │    ├── keys: (1)
      │    ├── prune: (2-4,7)
      │    ├── scan a
      │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string)
      │    │    ├── keys: (1)
      │    │    └── prune: (1-4)
      │    ├── max1-row
      │    │    ├── columns: column7:7(int)
      │    │    ├── outer: (1)
      │    │    ├── cardinality: [0 - 1]
      │    │    ├── prune: (7)
      │    │    └── project
      │    │         ├── columns: column7:7(int)
      │    │         ├── outer: (1)
      │    │         ├── prune: (7)
      │    │         ├── select
      │    │         │    ├── columns: xy.x:5(int!null)
      │    │         │    ├── outer: (1)
      │    │         │    ├── keys: (5)
      │    │         │    ├── scan xy
      │    │         │    │    ├── columns: xy.x:5(int!null)
      │    │         │    │    ├── keys: (5)
      │    │         │    │    └── prune: (5)
      │    │         │    └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      │    │         │         └── eq [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      │    │         │              ├── variable: xy.x [type=int, outer=(5)]
      │    │         │              └── variable: a.k [type=int, outer=(1)]
      │    │         └── projections [outer=(1)]
      │    │              └── plus [type=int, outer=(1)]
      │    │                   ├── variable: a.k [type=int, outer=(1)]
      │    │                   └── const: 1 [type=int]
      │    └── true [type=bool]
      └── filters [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]
           └── eq [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]
                ├── variable: column7 [type=int, outer=(7)]
                └── const: 1 [type=int]

# SemiJoin operator.
opt
SELECT a.i
FROM a
WHERE
    EXISTS(SELECT * FROM xy WHERE a.k=xy.x) AND
    EXISTS(SELECT * FROM xy WHERE a.k=xy.x)
----
project
 ├── columns: i:2(int)
 ├── prune: (2)
 └── semi-join
      ├── columns: a.k:1(int!null) a.i:2(int)
      ├── keys: (1)
      ├── prune: (2)
      ├── semi-join
      │    ├── columns: a.k:1(int!null) a.i:2(int)
      │    ├── keys: (1)
      │    ├── prune: (2)
      │    ├── scan a
      │    │    ├── columns: a.k:1(int!null) a.i:2(int)
      │    │    ├── keys: (1)
      │    │    └── prune: (1,2)
      │    ├── scan xy
      │    │    ├── columns: xy.x:5(int!null) xy.y:6(int)
      │    │    ├── keys: (5)
      │    │    └── prune: (5,6)
      │    └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      │         └── eq [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      │              ├── variable: a.k [type=int, outer=(1)]
      │              └── variable: xy.x [type=int, outer=(5)]
      ├── scan xy
      │    ├── columns: xy.x:7(int!null)
      │    ├── keys: (7)
      │    └── prune: (7)
      └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
           └── eq [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
                ├── variable: a.k [type=int, outer=(1)]
                └── variable: xy.x [type=int, outer=(7)]

# AntiJoin operator.
opt
SELECT a.i
FROM a
WHERE
    NOT EXISTS(SELECT * FROM xy WHERE a.k=xy.x) AND
    NOT EXISTS(SELECT * FROM xy WHERE a.k=xy.x)
----
project
 ├── columns: i:2(int)
 ├── prune: (2)
 └── anti-join
      ├── columns: a.k:1(int!null) a.i:2(int)
      ├── keys: (1)
      ├── prune: (2)
      ├── anti-join
      │    ├── columns: a.k:1(int!null) a.i:2(int)
      │    ├── keys: (1)
      │    ├── prune: (2)
      │    ├── scan a
      │    │    ├── columns: a.k:1(int!null) a.i:2(int)
      │    │    ├── keys: (1)
      │    │    └── prune: (1,2)
      │    ├── scan xy
      │    │    ├── columns: xy.x:5(int!null) xy.y:6(int)
      │    │    ├── keys: (5)
      │    │    └── prune: (5,6)
      │    └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      │         └── eq [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      │              ├── variable: a.k [type=int, outer=(1)]
      │              └── variable: xy.x [type=int, outer=(5)]
      ├── scan xy
      │    ├── columns: xy.x:7(int!null)
      │    ├── keys: (7)
      │    └── prune: (7)
      └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
           └── eq [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
                ├── variable: a.k [type=int, outer=(1)]
                └── variable: xy.x [type=int, outer=(7)]

# GroupBy operator.
opt
SELECT COUNT(*), SUM(i) FROM a GROUP BY s, f
----
project
 ├── columns: column5:5(int) column6:6(decimal)
 ├── prune: (5,6)
 └── group-by
      ├── columns: a.f:3(float) a.s:4(string) column5:5(int) column6:6(decimal)
      ├── grouping columns: a.f:3(float) a.s:4(string)
      ├── keys: weak(3,4)
      ├── prune: (5,6)
      ├── scan a
      │    ├── columns: a.i:2(int) a.f:3(float) a.s:4(string)
      │    └── prune: (2-4)
      └── aggregations [outer=(2)]
           ├── count-rows [type=int]
           └── sum [type=decimal, outer=(2)]
                └── variable: a.i [type=int, outer=(2)]

# Scalar GroupBy operator.
opt
SELECT COUNT(*), SUM(i) FROM a
----
group-by
 ├── columns: column5:5(int) column6:6(decimal)
 ├── cardinality: [1 - 1]
 ├── prune: (5,6)
 ├── scan a
 │    ├── columns: a.i:2(int)
 │    └── prune: (2)
 └── aggregations [outer=(2)]
      ├── count-rows [type=int]
      └── sum [type=decimal, outer=(2)]
           └── variable: a.i [type=int, outer=(2)]

# Distinct (GroupBy operator with no aggregates).
opt
SELECT DISTINCT s, f FROM a
----
group-by
 ├── columns: s:4(string) f:3(float)
 ├── grouping columns: a.f:3(float) a.s:4(string)
 ├── keys: weak(3,4)
 └── scan a
      ├── columns: a.f:3(float) a.s:4(string)
      └── prune: (3,4)

# UnionAll operator (don't allow pruning).
opt
SELECT k, k, i FROM a WHERE k=1
UNION ALL
SELECT x, y, x FROM xy WHERE y=2
----
union-all
 ├── columns: k:7(int!null) k:8(int!null) i:9(int)
 ├── left columns: a.k:1(int) a.k:1(int) a.i:2(int)
 ├── right columns: xy.x:5(int) xy.y:6(int) xy.x:5(int)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    ├── constraint: /1: [/1 - /1]
 │    ├── keys: (1)
 │    └── prune: (2)
 └── select
      ├── columns: xy.x:5(int!null) xy.y:6(int!null)
      ├── keys: (5)
      ├── prune: (5)
      ├── scan xy
      │    ├── columns: xy.x:5(int!null) xy.y:6(int)
      │    ├── keys: (5)
      │    └── prune: (5,6)
      └── filters [type=bool, outer=(6), constraints=(/6: [/2 - /2]; tight)]
           └── eq [type=bool, outer=(6), constraints=(/6: [/2 - /2]; tight)]
                ├── variable: xy.y [type=int, outer=(6)]
                └── const: 2 [type=int]

# Values operator.
build
SELECT * FROM (VALUES (1, 2, 3), (4, 5, 6))
----
values
 ├── columns: column1:1(int) column2:2(int) column3:3(int)
 ├── cardinality: [2 - 2]
 ├── prune: (1-3)
 ├── tuple [type=tuple{int, int, int}]
 │    ├── const: 1 [type=int]
 │    ├── const: 2 [type=int]
 │    └── const: 3 [type=int]
 └── tuple [type=tuple{int, int, int}]
      ├── const: 4 [type=int]
      ├── const: 5 [type=int]
      └── const: 6 [type=int]

# Explain operator (don't allow pruning).
build
EXPLAIN SELECT * FROM a
----
explain
 ├── columns: Tree:5(string) Field:6(string) Description:7(string)
 └── scan a
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
      ├── keys: (1)
      └── prune: (1-4)

# Limit operator.
build
SELECT * FROM a LIMIT 1
----
limit
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 ├── cardinality: [0 - 1]
 ├── keys: (1)
 ├── prune: (1-4)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string)
 │    ├── keys: (1)
 │    └── prune: (1-4)
 └── const: 1 [type=int]

# Limit operator with ordering.
build
SELECT * FROM a ORDER BY s DESC, i LIMIT 1
----
limit
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 ├── cardinality: [0 - 1]
 ├── keys: (1)
 ├── ordering: -4,+2
 ├── prune: (1,3)
 ├── sort
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string)
 │    ├── keys: (1)
 │    ├── ordering: -4,+2
 │    ├── prune: (1-4)
 │    └── scan a
 │         ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string)
 │         ├── keys: (1)
 │         └── prune: (1-4)
 └── const: 1 [type=int]

# Offset operator.
build
SELECT * FROM a OFFSET 1
----
offset
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 ├── keys: (1)
 ├── prune: (1-4)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string)
 │    ├── keys: (1)
 │    └── prune: (1-4)
 └── const: 1 [type=int]

# Offset operator with ordering.
build
SELECT * FROM a ORDER BY s DESC, i OFFSET 1
----
offset
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 ├── keys: (1)
 ├── ordering: -4,+2
 ├── prune: (1,3)
 ├── sort
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string)
 │    ├── keys: (1)
 │    ├── ordering: -4,+2
 │    ├── prune: (1-4)
 │    └── scan a
 │         ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string)
 │         ├── keys: (1)
 │         └── prune: (1-4)
 └── const: 1 [type=int]

# Max1Row operator.
build
SELECT (SELECT 1 FROM a)
----
project
 ├── columns: column6:6(int)
 ├── cardinality: [1 - 1]
 ├── prune: (6)
 ├── values
 │    ├── cardinality: [1 - 1]
 │    └── tuple [type=tuple{}]
 └── projections
      └── subquery [type=int]
           └── max1-row
                ├── columns: column5:5(int!null)
                ├── cardinality: [0 - 1]
                ├── prune: (5)
                └── project
                     ├── columns: column5:5(int!null)
                     ├── prune: (5)
                     ├── scan a
                     │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string)
                     │    ├── keys: (1)
                     │    └── prune: (1-4)
                     └── projections
                          └── const: 1 [type=int]

# RowNumber operator.
build
SELECT * FROM a WITH ORDINALITY
----
row-number
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) ordinality:5(int!null)
 ├── keys: (1) (5)
 ├── prune: (1-4)
 └── scan a
      ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string)
      ├── keys: (1)
      └── prune: (1-4)

# RowNumber operator with ordering.
build
SELECT * FROM (SELECT * FROM a ORDER BY i, s) WITH ORDINALITY
----
row-number
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) ordinality:5(int!null)
 ├── keys: (1) (5)
 ├── prune: (1,3)
 └── sort
      ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string)
      ├── keys: (1)
      ├── ordering: +2,+4
      ├── prune: (1-4)
      └── scan a
           ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string)
           ├── keys: (1)
           └── prune: (1-4)
