# See VolatilitySet comment for the optimizer's side-effect policy.

exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON)
----

exec-ddl
CREATE TABLE xy (x INT PRIMARY KEY, y INT)
----

exec-ddl
CREATE TABLE uv (u INT PRIMARY KEY, v INT)
----

# Don't allow ORDER BY column to be eliminated if it has a side effect.
norm
SELECT * FROM a ORDER BY length('foo'), random()+1.0
----
sort
 ├── columns: k:1!null i:2 f:3 s:4 j:5  [hidden: column8:8]
 ├── volatile
 ├── key: (1)
 ├── fd: (1)-->(2-5,8)
 ├── ordering: +8
 └── project
      ├── columns: column8:8 k:1!null i:2 f:3 s:4 j:5
      ├── volatile
      ├── key: (1)
      ├── fd: (1)-->(2-5,8)
      ├── scan a
      │    ├── columns: k:1!null i:2 f:3 s:4 j:5
      │    ├── key: (1)
      │    └── fd: (1)-->(2-5)
      └── projections
           └── random() + 1.0 [as=column8:8, volatile]

# Don't allow GROUP BY column to be eliminated if it has a side effect.
norm
SELECT avg(f) FROM a WHERE i=5 GROUP BY i+(random()*10)::int, i+1
----
project
 ├── columns: avg:7
 ├── volatile
 └── group-by
      ├── columns: avg:7 column8:8
      ├── grouping columns: column8:8
      ├── volatile
      ├── key: (8)
      ├── fd: (8)-->(7)
      ├── project
      │    ├── columns: column8:8 f:3
      │    ├── volatile
      │    ├── select
      │    │    ├── columns: i:2!null f:3
      │    │    ├── fd: ()-->(2)
      │    │    ├── scan a
      │    │    │    └── columns: i:2 f:3
      │    │    └── filters
      │    │         └── i:2 = 5 [outer=(2), constraints=(/2: [/5 - /5]; tight), fd=()-->(2)]
      │    └── projections
      │         └── i:2 + (random() * 10.0)::INT8 [as=column8:8, outer=(2), volatile]
      └── aggregations
           └── avg [as=avg:7, outer=(3)]
                └── f:3

# Allow elimination of side effecting expressions during column pruning.
norm
SELECT i FROM (SELECT i, nextval('foo') FROM a)
----
scan a
 └── columns: i:2

# Allow duplication of side effecting expressions during predicate pushdown.
norm
SELECT * FROM a INNER JOIN xy ON k=x WHERE k=random()
----
inner-join (hash)
 ├── columns: k:1!null i:2 f:3 s:4 j:5 x:7!null y:8
 ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-one)
 ├── volatile
 ├── key: (7)
 ├── fd: (1)-->(2-5), (7)-->(8), (1)==(7), (7)==(1)
 ├── select
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5
 │    ├── volatile
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    ├── scan a
 │    │    ├── columns: k:1!null i:2 f:3 s:4 j:5
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2-5)
 │    └── filters
 │         └── k:1 = random() [outer=(1), volatile, constraints=(/1: (/NULL - ])]
 ├── select
 │    ├── columns: x:7!null y:8
 │    ├── volatile
 │    ├── key: (7)
 │    ├── fd: (7)-->(8)
 │    ├── scan xy
 │    │    ├── columns: x:7!null y:8
 │    │    ├── key: (7)
 │    │    └── fd: (7)-->(8)
 │    └── filters
 │         └── x:7 = random() [outer=(7), volatile, constraints=(/7: (/NULL - ])]
 └── filters
      └── k:1 = x:7 [outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]

# Decorrelate CASE WHEN branch if there are no side effects.
norm
SELECT CASE WHEN i<0 THEN (SELECT y FROM xy WHERE x=i LIMIT 1) ELSE 5 END FROM a
----
project
 ├── columns: case:10
 ├── left-join (hash)
 │    ├── columns: i:2 x:7 y:8
 │    ├── multiplicity: left-rows(exactly-one), right-rows(zero-or-more)
 │    ├── fd: (7)-->(8)
 │    ├── scan a
 │    │    └── columns: i:2
 │    ├── scan xy
 │    │    ├── columns: x:7!null y:8
 │    │    ├── key: (7)
 │    │    └── fd: (7)-->(8)
 │    └── filters
 │         └── x:7 = i:2 [outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
 └── projections
      └── CASE WHEN i:2 < 0 THEN y:8 ELSE 5 END [as=case:10, outer=(2,8)]

# Decorrelate CASE ELSE branch if there are no side effects.
norm
SELECT * FROM a WHERE (CASE WHEN i<0 THEN 5 ELSE (SELECT y FROM xy WHERE x=i LIMIT 1) END)=k
----
project
 ├── columns: k:1!null i:2 f:3 s:4 j:5
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 └── select
      ├── columns: k:1!null i:2 f:3 s:4 j:5 x:7 y:8
      ├── key: (1)
      ├── fd: (1)-->(2-5,7,8), (7)-->(8)
      ├── left-join (hash)
      │    ├── columns: k:1!null i:2 f:3 s:4 j:5 x:7 y:8
      │    ├── multiplicity: left-rows(exactly-one), right-rows(zero-or-more)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-5,7,8), (7)-->(8)
      │    ├── scan a
      │    │    ├── columns: k:1!null i:2 f:3 s:4 j:5
      │    │    ├── key: (1)
      │    │    └── fd: (1)-->(2-5)
      │    ├── scan xy
      │    │    ├── columns: x:7!null y:8
      │    │    ├── key: (7)
      │    │    └── fd: (7)-->(8)
      │    └── filters
      │         └── x:7 = i:2 [outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
      └── filters
           └── k:1 = CASE WHEN i:2 < 0 THEN 5 ELSE y:8 END [outer=(1,2,8), constraints=(/1: (/NULL - ])]

# Don't decorrelate CASE WHEN branch if there are side effects.
norm
SELECT CASE WHEN i<0 THEN (SELECT y FROM xy WHERE x=i LIMIT (random()*10)::int) ELSE 5 END FROM a
----
project
 ├── columns: case:10
 ├── volatile
 ├── scan a
 │    └── columns: i:2
 └── projections
      └── case [as=case:10, outer=(2), volatile, correlated-subquery]
           ├── true
           ├── when
           │    ├── i:2 < 0
           │    └── subquery
           │         └── project
           │              ├── columns: y:8
           │              ├── outer: (2)
           │              ├── cardinality: [0 - 1]
           │              ├── volatile
           │              ├── key: ()
           │              ├── fd: ()-->(8)
           │              └── limit
           │                   ├── columns: x:7!null y:8
           │                   ├── outer: (2)
           │                   ├── cardinality: [0 - 1]
           │                   ├── volatile
           │                   ├── key: ()
           │                   ├── fd: ()-->(7,8)
           │                   ├── select
           │                   │    ├── columns: x:7!null y:8
           │                   │    ├── outer: (2)
           │                   │    ├── cardinality: [0 - 1]
           │                   │    ├── key: ()
           │                   │    ├── fd: ()-->(7,8)
           │                   │    ├── scan xy
           │                   │    │    ├── columns: x:7!null y:8
           │                   │    │    ├── key: (7)
           │                   │    │    └── fd: (7)-->(8)
           │                   │    └── filters
           │                   │         └── x:7 = i:2 [outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
           │                   └── (random() * 10.0)::INT8
           └── 5

# Don't decorrelate CASE ELSE branch if there are side effects.
norm
SELECT * FROM a WHERE (CASE WHEN i<0 THEN 5 ELSE (SELECT y FROM xy WHERE x=i AND 5/y>1) END)=k
----
select
 ├── columns: k:1!null i:2 f:3 s:4 j:5
 ├── immutable
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 └── filters
      └── eq [outer=(1,2), immutable, correlated-subquery, constraints=(/1: (/NULL - ])]
           ├── k:1
           └── case
                ├── true
                ├── when
                │    ├── i:2 < 0
                │    └── 5
                └── subquery
                     └── project
                          ├── columns: y:8
                          ├── outer: (2)
                          ├── cardinality: [0 - 1]
                          ├── immutable
                          ├── key: ()
                          ├── fd: ()-->(8)
                          └── select
                               ├── columns: x:7!null y:8
                               ├── outer: (2)
                               ├── cardinality: [0 - 1]
                               ├── immutable
                               ├── key: ()
                               ├── fd: ()-->(7,8)
                               ├── scan xy
                               │    ├── columns: x:7!null y:8
                               │    ├── key: (7)
                               │    └── fd: (7)-->(8)
                               └── filters
                                    ├── x:7 = i:2 [outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
                                    └── (5 / y:8) > 1 [outer=(8), immutable]


# Don't decorrelate IFERROR branch if there are side effects
norm
SELECT * FROM a WHERE IFERROR(1/0, (SELECT y::DECIMAL FROM xy WHERE x = i AND 5/y>1))=k
----
select
 ├── columns: k:1!null i:2 f:3 s:4 j:5
 ├── immutable
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 └── filters
      └── eq [outer=(1,2), immutable, correlated-subquery, constraints=(/1: (/NULL - ])]
           ├── k:1
           └── if-err
                ├── 1 / 0
                └── else
                     └── subquery
                          └── project
                               ├── columns: y:10
                               ├── outer: (2)
                               ├── cardinality: [0 - 1]
                               ├── immutable
                               ├── key: ()
                               ├── fd: ()-->(10)
                               ├── select
                               │    ├── columns: x:7!null xy.y:8
                               │    ├── outer: (2)
                               │    ├── cardinality: [0 - 1]
                               │    ├── immutable
                               │    ├── key: ()
                               │    ├── fd: ()-->(7,8)
                               │    ├── scan xy
                               │    │    ├── columns: x:7!null xy.y:8
                               │    │    ├── key: (7)
                               │    │    └── fd: (7)-->(8)
                               │    └── filters
                               │         ├── x:7 = i:2 [outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
                               │         └── (5 / xy.y:8) > 1 [outer=(8), immutable]
                               └── projections
                                    └── xy.y:8::DECIMAL [as=y:10, outer=(8), immutable]

# Decorrelate IFERROR branch if there are no side effects
norm
SELECT * FROM a WHERE IFERROR((1/0)::int, (SELECT y FROM xy WHERE x = i))=k
----
project
 ├── columns: k:1!null i:2 f:3 s:4 j:5
 ├── immutable
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 └── select
      ├── columns: k:1!null i:2 f:3 s:4 j:5 x:7 y:8
      ├── immutable
      ├── key: (1)
      ├── fd: (1)-->(2-5,7,8), (7)-->(8)
      ├── left-join (hash)
      │    ├── columns: k:1!null i:2 f:3 s:4 j:5 x:7 y:8
      │    ├── multiplicity: left-rows(exactly-one), right-rows(zero-or-more)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-5,7,8), (7)-->(8)
      │    ├── scan a
      │    │    ├── columns: k:1!null i:2 f:3 s:4 j:5
      │    │    ├── key: (1)
      │    │    └── fd: (1)-->(2-5)
      │    ├── scan xy
      │    │    ├── columns: x:7!null y:8
      │    │    ├── key: (7)
      │    │    └── fd: (7)-->(8)
      │    └── filters
      │         └── x:7 = i:2 [outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
      └── filters
           └── k:1 = IFERROR((1 / 0)::INT8, y:8) [outer=(1,8), immutable, constraints=(/1: (/NULL - ])]
