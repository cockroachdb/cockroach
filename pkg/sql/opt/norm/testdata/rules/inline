exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 └── INDEX primary
      └── k int not null

exec-ddl
CREATE TABLE xy (x INT PRIMARY KEY, y INT)
----
TABLE xy
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

# --------------------------------------------------
# PushSelectIntoInlinableProject
# --------------------------------------------------

# Inline comparison.
opt
SELECT * FROM (SELECT k=1 AS expr FROM a) a WHERE expr IS NULL
----
project
 ├── columns: expr:6(bool)
 ├── select
 │    ├── columns: k:1(int!null)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null)
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(1)]
 │         └── is [type=bool, outer=(1)]
 │              ├── eq [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
 │              │    ├── variable: a.k [type=int, outer=(1)]
 │              │    └── const: 1 [type=int]
 │              └── null [type=unknown]
 └── projections [outer=(1)]
      └── eq [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
           ├── variable: a.k [type=int, outer=(1)]
           └── const: 1 [type=int]

# Inline arithmetic.
opt
SELECT * FROM (SELECT k*2+1 AS expr FROM a) a WHERE expr > 10
----
project
 ├── columns: expr:6(int)
 ├── select
 │    ├── columns: k:1(int!null)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null)
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(1)]
 │         └── gt [type=bool, outer=(1)]
 │              ├── plus [type=int, outer=(1)]
 │              │    ├── mult [type=int, outer=(1)]
 │              │    │    ├── variable: a.k [type=int, outer=(1)]
 │              │    │    └── const: 2 [type=int]
 │              │    └── const: 1 [type=int]
 │              └── const: 10 [type=int]
 └── projections [outer=(1)]
      └── plus [type=int, outer=(1)]
           ├── mult [type=int, outer=(1)]
           │    ├── variable: a.k [type=int, outer=(1)]
           │    └── const: 2 [type=int]
           └── const: 1 [type=int]

# Inline boolean logic.
opt
SELECT * FROM (SELECT NOT(k>1 AND k<=5) AS expr FROM a) a WHERE expr
----
project
 ├── columns: expr:6(bool)
 ├── scan a
 │    ├── columns: k:1(int!null)
 │    ├── constraint: /1: [ - /1] [/6 - ]
 │    └── keys: (1)
 └── projections [outer=(1)]
      └── or [type=bool, outer=(1)]
           ├── le [type=bool, outer=(1), constraints=(/1: (/NULL - /1]; tight)]
           │    ├── variable: a.k [type=int, outer=(1)]
           │    └── const: 1 [type=int]
           └── gt [type=bool, outer=(1), constraints=(/1: [/6 - ]; tight)]
                ├── variable: a.k [type=int, outer=(1)]
                └── const: 5 [type=int]

# Inline constants.
opt
SELECT * FROM (SELECT (f IS NULL OR f != 10.5) AS expr FROM a) a WHERE expr
----
project
 ├── columns: expr:6(bool)
 ├── select
 │    ├── columns: f:3(float)
 │    ├── scan a
 │    │    └── columns: f:3(float)
 │    └── filters [type=bool, outer=(3)]
 │         └── or [type=bool, outer=(3)]
 │              ├── is [type=bool, outer=(3), constraints=(/3: [/NULL - /NULL]; tight)]
 │              │    ├── variable: a.f [type=float, outer=(3)]
 │              │    └── null [type=unknown]
 │              └── ne [type=bool, outer=(3), constraints=(/3: (/NULL - /10.499999999999998] [/10.500000000000002 - ]; tight)]
 │                   ├── variable: a.f [type=float, outer=(3)]
 │                   └── const: 10.5 [type=float]
 └── projections [outer=(3)]
      └── or [type=bool, outer=(3)]
           ├── is [type=bool, outer=(3), constraints=(/3: [/NULL - /NULL]; tight)]
           │    ├── variable: a.f [type=float, outer=(3)]
           │    └── null [type=unknown]
           └── ne [type=bool, outer=(3), constraints=(/3: (/NULL - /10.499999999999998] [/10.500000000000002 - ]; tight)]
                ├── variable: a.f [type=float, outer=(3)]
                └── const: 10.5 [type=float]

# Reference the expression to inline multiple times.
opt
SELECT * FROM (SELECT f+1 AS expr FROM a) a WHERE expr=expr
----
project
 ├── columns: expr:6(float)
 ├── select
 │    ├── columns: f:3(float)
 │    ├── scan a
 │    │    └── columns: f:3(float)
 │    └── filters [type=bool, outer=(3)]
 │         └── eq [type=bool, outer=(3)]
 │              ├── plus [type=float, outer=(3)]
 │              │    ├── variable: a.f [type=float, outer=(3)]
 │              │    └── const: 1.0 [type=float]
 │              └── plus [type=float, outer=(3)]
 │                   ├── variable: a.f [type=float, outer=(3)]
 │                   └── const: 1.0 [type=float]
 └── projections [outer=(3)]
      └── plus [type=float, outer=(3)]
           ├── variable: a.f [type=float, outer=(3)]
           └── const: 1.0 [type=float]

# Use outer references in both inlined expression and in referencing expression.
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM (SELECT (x-i) AS expr FROM xy) WHERE expr > i*i)
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 ├── scan xy
 │    ├── columns: x:6(int!null)
 │    └── keys: (6)
 └── filters [type=bool, outer=(2,6)]
      └── gt [type=bool, outer=(2,6)]
           ├── minus [type=int, outer=(2,6)]
           │    ├── variable: xy.x [type=int, outer=(6)]
           │    └── variable: a.i [type=int, outer=(2)]
           └── mult [type=int, outer=(2)]
                ├── variable: a.i [type=int, outer=(2)]
                └── variable: a.i [type=int, outer=(2)]

# --------------------------------------------------
# InlineProjectInProject
# --------------------------------------------------
opt
SELECT expr, i+1 FROM (SELECT k=1 AS expr, i FROM a)
----
project
 ├── columns: expr:6(bool) column7:7(int)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int)
 │    └── keys: (1)
 └── projections [outer=(1,2)]
      ├── plus [type=int, outer=(2)]
      │    ├── variable: a.i [type=int, outer=(2)]
      │    └── const: 1 [type=int]
      └── eq [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
           ├── variable: a.k [type=int, outer=(1)]
           └── const: 1 [type=int]

# Inline multiple expressions.
opt
SELECT expr+1, i, expr2 || 'bar' FROM (SELECT k+1 AS expr, s || 'foo' AS expr2, i FROM a)
----
project
 ├── columns: column8:8(int) i:2(int) column9:9(string)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) s:4(string)
 │    └── keys: (1)
 └── projections [outer=(1,2,4)]
      ├── plus [type=int, outer=(1)]
      │    ├── plus [type=int, outer=(1)]
      │    │    ├── variable: a.k [type=int, outer=(1)]
      │    │    └── const: 1 [type=int]
      │    └── const: 1 [type=int]
      └── concat [type=string, outer=(4)]
           ├── concat [type=string, outer=(4)]
           │    ├── variable: a.s [type=string, outer=(4)]
           │    └── const: 'foo' [type=string]
           └── const: 'bar' [type=string]

# Don't inline when there are multiple references.
opt
SELECT expr, expr*2 FROM (SELECT k+1 AS expr FROM a)
----
project
 ├── columns: expr:6(int) column7:7(int)
 ├── project
 │    ├── columns: expr:6(int)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null)
 │    │    └── keys: (1)
 │    └── projections [outer=(1)]
 │         └── plus [type=int, outer=(1)]
 │              ├── variable: a.k [type=int, outer=(1)]
 │              └── const: 1 [type=int]
 └── projections [outer=(6)]
      └── mult [type=int, outer=(6)]
           ├── variable: expr [type=int, outer=(6)]
           └── const: 2 [type=int]

# Uncorrelated subquery should not block inlining.
opt
SELECT EXISTS(SELECT * FROM xy WHERE x=1 OR x=2), expr*2 FROM (SELECT k+1 AS expr FROM a)
----
project
 ├── columns: column9:9(bool) column10:10(int)
 ├── scan a
 │    ├── columns: k:1(int!null)
 │    └── keys: (1)
 └── projections [outer=(1)]
      ├── exists [type=bool]
      │    └── scan xy
      │         ├── columns: x:7(int!null) y:8(int)
      │         ├── constraint: /7: [/1 - /2]
      │         └── keys: (7)
      └── mult [type=int, outer=(1)]
           ├── plus [type=int, outer=(1)]
           │    ├── variable: a.k [type=int, outer=(1)]
           │    └── const: 1 [type=int]
           └── const: 2 [type=int]

# Correlated subquery should be hoisted as usual.
opt
SELECT EXISTS(SELECT * FROM xy WHERE expr<0) FROM (SELECT k+1 AS expr FROM a)
----
project
 ├── columns: column9:9(bool)
 ├── group-by
 │    ├── columns: exists_agg:11(bool) rownum:12(int!null)
 │    ├── grouping columns: rownum:12(int!null)
 │    ├── keys: (12)
 │    ├── left-join
 │    │    ├── columns: expr:6(int) true:10(bool) rownum:12(int!null)
 │    │    ├── row-number
 │    │    │    ├── columns: expr:6(int) rownum:12(int!null)
 │    │    │    ├── keys: (12)
 │    │    │    └── project
 │    │    │         ├── columns: expr:6(int)
 │    │    │         ├── scan a
 │    │    │         │    ├── columns: k:1(int!null)
 │    │    │         │    └── keys: (1)
 │    │    │         └── projections [outer=(1)]
 │    │    │              └── plus [type=int, outer=(1)]
 │    │    │                   ├── variable: a.k [type=int, outer=(1)]
 │    │    │                   └── const: 1 [type=int]
 │    │    ├── project
 │    │    │    ├── columns: true:10(bool!null)
 │    │    │    ├── scan xy
 │    │    │    └── projections
 │    │    │         └── true [type=bool]
 │    │    └── filters [type=bool, outer=(6), constraints=(/6: (/NULL - /-1]; tight)]
 │    │         └── lt [type=bool, outer=(6), constraints=(/6: (/NULL - /-1]; tight)]
 │    │              ├── variable: expr [type=int, outer=(6)]
 │    │              └── const: 0 [type=int]
 │    └── aggregations [outer=(10)]
 │         └── exists-agg [type=bool, outer=(10)]
 │              └── variable: true [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
 └── projections [outer=(11)]
      └── variable: exists_agg [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
