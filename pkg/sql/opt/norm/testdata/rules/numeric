exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, d DECIMAL, t TIME)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── d decimal
 ├── t time
 └── INDEX primary
      └── k int not null

# --------------------------------------------------
# FoldPlusZero, FoldZeroPlus
# --------------------------------------------------

# Add columns to prevent NormalizeVar from swapping left and right.
opt
SELECT
    (a.i + a.i) + 0 AS r, 0 + (a.i + a.i) AS s,
    (a.f + a.f) + 0 AS t, 0 + (a.f + a.f) AS u,
    (a.d + a.d) + 0 AS v, 0 + (a.d + a.d) AS w
FROM a
----
project
 ├── columns: r:6(int) s:7(int) t:8(float) u:9(float) v:10(decimal) w:11(decimal)
 ├── scan a
 │    └── columns: i:2(int) f:3(float) d:4(decimal)
 └── projections [outer=(2-4)]
      ├── a.i + a.i [type=int, outer=(2)]
      ├── a.i + a.i [type=int, outer=(2)]
      ├── a.f + a.f [type=float, outer=(3)]
      ├── a.f + a.f [type=float, outer=(3)]
      ├── a.d + a.d [type=decimal, outer=(4)]
      └── a.d + a.d [type=decimal, outer=(4)]

# --------------------------------------------------
# FoldMinusZero
# --------------------------------------------------

# Add columns to prevent NormalizeVar from swapping left and right.
opt
SELECT
    (a.i + a.i) - 0 AS r,
    (a.f + a.f) - 0 AS s,
    (a.d + a.d) - 0 AS t
FROM a
----
project
 ├── columns: r:6(int) s:7(float) t:8(decimal)
 ├── scan a
 │    └── columns: i:2(int) f:3(float) d:4(decimal)
 └── projections [outer=(2-4)]
      ├── a.i + a.i [type=int, outer=(2)]
      ├── a.f + a.f [type=float, outer=(3)]
      └── a.d + a.d [type=decimal, outer=(4)]

# --------------------------------------------------
# FoldMultOne, FoldOneMult
# --------------------------------------------------

# Add columns to prevent NormalizeVar from swapping left and right.
opt
SELECT
    (a.i + a.i) * 1 AS r, 1 * (a.i + a.i) AS s,
    (a.f + a.f) * 1 AS t, 1 * (a.f + a.f) AS u,
    (a.d + a.d) * 1 AS v, 1 * (a.d + a.d) AS w
FROM a
----
project
 ├── columns: r:6(int) s:7(int) t:8(float) u:9(float) v:10(decimal) w:11(decimal)
 ├── scan a
 │    └── columns: i:2(int) f:3(float) d:4(decimal)
 └── projections [outer=(2-4)]
      ├── a.i + a.i [type=int, outer=(2)]
      ├── a.i + a.i [type=int, outer=(2)]
      ├── a.f + a.f [type=float, outer=(3)]
      ├── a.f + a.f [type=float, outer=(3)]
      ├── a.d + a.d [type=decimal, outer=(4)]
      └── a.d + a.d [type=decimal, outer=(4)]

# --------------------------------------------------
# FoldDivOne
# --------------------------------------------------

opt
SELECT
    a.i / 1 AS r,
    a.f / 1 AS s,
    a.d / 1 AS t
FROM a
----
project
 ├── columns: r:6(decimal) s:7(float) t:8(decimal)
 ├── scan a
 │    └── columns: i:2(int) f:3(float) d:4(decimal)
 └── projections [outer=(2-4)]
      ├── variable: a.i [type=int, outer=(2)]
      ├── variable: a.f [type=float, outer=(3)]
      └── variable: a.d [type=decimal, outer=(4)]

# --------------------------------------------------
# InvertMinus
# --------------------------------------------------
opt
SELECT
    -(a.f - a.f) AS r,
    -(a.d - a.i) AS s,
    -(a.t - a.t) AS t
FROM a
----
project
 ├── columns: r:6(float) s:7(decimal) t:8(interval)
 ├── scan a
 │    └── columns: i:2(int) f:3(float) d:4(decimal) a.t:5(time)
 └── projections [outer=(2-5)]
      ├── a.f - a.f [type=float, outer=(3)]
      ├── a.i - a.d [type=decimal, outer=(2,4)]
      └── a.t - a.t [type=interval, outer=(5)]

# --------------------------------------------------
# EliminateUnaryMinus
# --------------------------------------------------
opt
SELECT -(-a.i::int) AS r FROM a
----
project
 ├── columns: r:6(int)
 ├── scan a
 │    └── columns: i:2(int)
 └── projections [outer=(2)]
      └── variable: a.i [type=int, outer=(2)]

# --------------------------------------------------
# FoldUnaryMinus
# --------------------------------------------------
opt
SELECT -(1:::int)
----
project
 ├── columns: "?column?":1(int!null)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 ├── values
 │    ├── cardinality: [1 - 1]
 │    ├── key: ()
 │    └── tuple [type=tuple{}]
 └── projections
      └── const: -1 [type=int]

opt
SELECT -(1:::float)
----
project
 ├── columns: "?column?":1(float!null)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 ├── values
 │    ├── cardinality: [1 - 1]
 │    ├── key: ()
 │    └── tuple [type=tuple{}]
 └── projections
      └── const: -1.0 [type=float]

# TODO(justin): it would be better if this produced an error in the optimizer
# rather than falling back to execution to error.
opt format=show-all
SELECT -((-9223372036854775808)::int)
----
project
 ├── columns: "?column?":1(int)
 ├── cardinality: [1 - 1]
 ├── stats: [rows=1]
 ├── cost: 0.01
 ├── key: ()
 ├── fd: ()-->(1)
 ├── prune: (1)
 ├── values
 │    ├── cardinality: [1 - 1]
 │    ├── stats: [rows=1]
 │    ├── cost: 0.01
 │    ├── key: ()
 │    └── tuple [type=tuple{}]
 └── projections
      └── unary-minus [type=int]
           └── const: -9223372036854775808 [type=int]

opt format=show-all
SELECT -(1:::decimal)
----
project
 ├── columns: "?column?":1(decimal!null)
 ├── cardinality: [1 - 1]
 ├── stats: [rows=1]
 ├── cost: 0.01
 ├── key: ()
 ├── fd: ()-->(1)
 ├── prune: (1)
 ├── values
 │    ├── cardinality: [1 - 1]
 │    ├── stats: [rows=1]
 │    ├── cost: 0.01
 │    ├── key: ()
 │    └── tuple [type=tuple{}]
 └── projections
      └── const: -1 [type=decimal]

opt format=show-all
SELECT -('-1d'::interval);
----
project
 ├── columns: "?column?":1(interval!null)
 ├── cardinality: [1 - 1]
 ├── stats: [rows=1]
 ├── cost: 0.01
 ├── key: ()
 ├── fd: ()-->(1)
 ├── prune: (1)
 ├── values
 │    ├── cardinality: [1 - 1]
 │    ├── stats: [rows=1]
 │    ├── cost: 0.01
 │    ├── key: ()
 │    └── tuple [type=tuple{}]
 └── projections
      └── const: '1d' [type=interval]

# TODO(justin): this seems incorrect but it's consistent with the existing
# planner. Revisit this: #26932.
opt
SELECT -('-9223372036854775808d'::interval);
----
project
 ├── columns: "?column?":1(interval!null)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 ├── values
 │    ├── cardinality: [1 - 1]
 │    ├── key: ()
 │    └── tuple [type=tuple{}]
 └── projections
      └── const: '-9223372036854775808d' [type=interval]
