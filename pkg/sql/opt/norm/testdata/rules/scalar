exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON, arr int[])
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 ├── arr int[]
 └── INDEX primary
      └── k int not null

# --------------------------------------------------
# CommuteVar
# --------------------------------------------------

# Put variables on both sides of comparison operator to avoid matching constant
# patterns.
opt
SELECT
    (1+i) = k AS r,
    (2-k) <> i AS s,
    (i+1) IS NOT DISTINCT FROM k AS t,
    (i-1) IS DISTINCT FROM k AS u,

    (i*2) + k AS v,
    (i+2) * k AS w,
    (i^2) & k AS x,
    (i^2) | k AS y,
    (i*i) # k AS z
FROM a
----
project
 ├── columns: r:7(bool) s:8(bool) t:9(bool) u:10(bool) v:11(int) w:12(int) x:13(int) y:14(int) z:15(int)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int)
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── projections [outer=(1,2)]
      ├── k = (i + 1) [type=bool, outer=(1,2)]
      ├── i != (2 - k) [type=bool, outer=(1,2)]
      ├── k IS NOT DISTINCT FROM (i + 1) [type=bool, outer=(1,2)]
      ├── k IS DISTINCT FROM (i - 1) [type=bool, outer=(1,2)]
      ├── k + (i * 2) [type=int, outer=(1,2)]
      ├── k * (i + 2) [type=int, outer=(1,2)]
      ├── k & (i ^ 2) [type=int, outer=(1,2)]
      ├── k | (i ^ 2) [type=int, outer=(1,2)]
      └── k # (i * i) [type=int, outer=(1,2)]

# --------------------------------------------------
# CommuteConst
# --------------------------------------------------
opt
SELECT
    (length('foo')+1) = (i+k) AS r,
    length('bar') <> (i*2) AS s,
    5 IS NOT DISTINCT FROM (1-k) AS t,
    (10::decimal+1::int) IS DISTINCT FROM k AS u,

    1 + f AS v,
    (5*length('foo')) * (i*i) AS w,
    (100 ^ 2) & (i+i) AS x,
    length('foo')+1 | (i+i) AS y,
    1-length('foo') # (k^2) AS z
FROM a
----
project
 ├── columns: r:7(bool) s:8(bool) t:9(bool) u:10(bool) v:11(float) w:12(int) x:13(int) y:14(int) z:15(int)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float)
 │    ├── key: (1)
 │    └── fd: (1)-->(2,3)
 └── projections [outer=(1-3)]
      ├── (i + k) = (length('foo') + 1) [type=bool, outer=(1,2)]
      ├── (i * 2) != length('bar') [type=bool, outer=(2)]
      ├── (1 - k) IS NOT DISTINCT FROM 5 [type=bool, outer=(1)]
      ├── k IS DISTINCT FROM (10 + 1) [type=bool, outer=(1)]
      ├── f + 1.0 [type=float, outer=(3)]
      ├── (i * i) * (5 * length('foo')) [type=int, outer=(2)]
      ├── (i + i) & (100 ^ 2) [type=int, outer=(2)]
      ├── (i + i) | (length('foo') + 1) [type=int, outer=(2)]
      └── (k ^ 2) # (1 - length('foo')) [type=int, outer=(1)]

# --------------------------------------------------
# EliminateCoalesce
# --------------------------------------------------
opt
SELECT COALESCE(i) FROM a
----
project
 ├── columns: coalesce:7(int)
 ├── scan a
 │    └── columns: i:2(int)
 └── projections [outer=(2)]
      └── variable: i [type=int, outer=(2)]

# --------------------------------------------------
# SimplifyCoalesce
# --------------------------------------------------
opt
SELECT COALESCE(NULL) FROM a
----
project
 ├── columns: coalesce:7(unknown)
 ├── fd: ()-->(7)
 ├── scan a
 └── projections
      └── null [type=unknown]

opt
SELECT COALESCE(NULL, 'foo', s) FROM a
----
project
 ├── columns: coalesce:7(string!null)
 ├── fd: ()-->(7)
 ├── scan a
 └── projections
      └── const: 'foo' [type=string]

opt
SELECT COALESCE(NULL, NULL, s, s || 'foo') FROM a
----
project
 ├── columns: coalesce:7(string)
 ├── scan a
 │    └── columns: s:4(string)
 └── projections [outer=(4)]
      └── COALESCE(s, s || 'foo') [type=string, outer=(4)]

# Trailing null can't be removed.
opt
SELECT COALESCE(i, NULL, NULL) FROM a
----
project
 ├── columns: coalesce:7(int)
 ├── scan a
 │    └── columns: i:2(int)
 └── projections [outer=(2)]
      └── COALESCE(i, NULL, NULL) [type=int, outer=(2)]

# --------------------------------------------------
# EliminateCast
# --------------------------------------------------
opt
SELECT
    i::int, arr::int[], '[1, 2]'::jsonb::json, null::char(2)::int, s::string::string
FROM a
----
project
 ├── columns: i:7(int) arr:8(int[]) jsonb:9(jsonb!null) int:10(int) s:11(string)
 ├── fd: ()-->(9,10)
 ├── scan a
 │    └── columns: a.i:2(int) a.s:4(string) a.arr:6(int[])
 └── projections [outer=(2,4,6)]
      ├── variable: a.i [type=int, outer=(2)]
      ├── variable: a.arr [type=int[], outer=(6)]
      ├── const: '[1, 2]' [type=jsonb]
      ├── null [type=int]
      └── variable: a.s [type=string, outer=(4)]

# Shouldn't eliminate these casts.
opt
SELECT
    i::float,
    arr::decimal[],
    s::json::json,
    s::varchar(2),
    i::smallint::int8,
    s::text::char::varchar,
    ARRAY[1, 2]::OIDVECTOR,
    ARRAY[1, 2]::INT2VECTOR
FROM a
----
project
 ├── columns: i:7(float) arr:8(decimal[]) s:9(jsonb) s:10(string) i:11(int) s:12(string) array:13(oid[]) array:14(int[])
 ├── fd: ()-->(13,14)
 ├── scan a
 │    └── columns: a.i:2(int) a.s:4(string) a.arr:6(int[])
 └── projections [outer=(2,4,6)]
      ├── a.i::FLOAT8 [type=float, outer=(2)]
      ├── a.arr::DECIMAL[] [type=decimal[], outer=(6)]
      ├── a.s::JSONB [type=jsonb, outer=(4)]
      ├── a.s::VARCHAR(2) [type=string, outer=(4)]
      ├── a.i::SMALLINT::INT8 [type=int, outer=(2)]
      ├── a.s::CHAR::VARCHAR [type=string, outer=(4)]
      ├── ARRAY[1,2]::OIDVECTOR [type=oid[]]
      └── ARRAY[1,2]::INT2VECTOR [type=int[]]

# --------------------------------------------------
# FoldNullCast
# --------------------------------------------------
opt
SELECT
    null::int,
    null::timestamptz,
    null::decimal(19,2)::int::char(2),
    null::oidvector,
    null::int2vector
----
project
 ├── columns: int:1(int) timestamptz:2(timestamptz) char:3(string) oidvector:4(oid[]) int2vector:5(int[])
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1-5)
 ├── values
 │    ├── cardinality: [1 - 1]
 │    ├── key: ()
 │    └── tuple [type=tuple]
 └── projections
      ├── null [type=int]
      ├── null [type=timestamptz]
      ├── null [type=string]
      ├── null [type=oid[]]
      └── null [type=int[]]

# --------------------------------------------------
# FoldNullUnary
# --------------------------------------------------
opt
SELECT +null::int AS r, -null::int AS s, ~null::int AS t FROM a
----
project
 ├── columns: r:7(int) s:8(int) t:9(int)
 ├── fd: ()-->(7-9)
 ├── scan a
 └── projections
      ├── null [type=int]
      ├── null [type=int]
      └── null [type=int]

# --------------------------------------------------
# FoldNullBinaryLeft, FoldNullBinaryRight
# --------------------------------------------------
opt
SELECT
    null::int & 1 AS ra, 1 & null::int AS rb,
    null::decimal + 1 AS sa, 1 + null::decimal AS sb,
    null::float % 1 AS ta, 1 % null::float AS tb,
    null::int << 4 AS ua, 4 << null::int AS ub,

    -- These shouldn't be folded because AllowNullArgs is true for concat with arrays.
    arr::decimal[] || null AS va, null || arr::string[] AS vb,

    -- Scalars concatenated with nulls match array overloads, and shouldn't be folded.
    -- In other words, the only overload for decimal concatenation is an array overload.
    i::decimal || null AS wa, null || i::float AS wb
FROM a
----
project
 ├── columns: ra:7(int) rb:8(int) sa:9(decimal) sb:10(decimal) ta:11(float) tb:12(float) ua:13(int) ub:14(int) va:15(decimal[]) vb:16(string[]) wa:17(decimal[]) wb:18(float[])
 ├── fd: ()-->(7-14)
 ├── scan a
 │    └── columns: i:2(int) arr:6(int[])
 └── projections [outer=(2,6)]
      ├── null [type=int]
      ├── null [type=int]
      ├── null [type=decimal]
      ├── null [type=decimal]
      ├── null [type=float]
      ├── null [type=float]
      ├── null [type=int]
      ├── null [type=int]
      ├── arr::DECIMAL[] || CAST(NULL AS DECIMAL[]) [type=decimal[], outer=(6)]
      ├── CAST(NULL AS STRING[]) || arr::STRING[] [type=string[], outer=(6)]
      ├── i::DECIMAL || CAST(NULL AS DECIMAL[]) [type=decimal[], outer=(2)]
      └── CAST(NULL AS FLOAT8[]) || i::FLOAT8 [type=float[], outer=(2)]

opt
SELECT
    null::json || '[1, 2]' AS ra, '[1, 2]' || null::json AS rb,
    null::json->'foo' AS sa, '{}'::jsonb->null::string AS sb,
    null::json->>'foo' AS ta, '{}'::jsonb->>null::string AS tb,
    null::json->>'foo' AS ua, '{}'::jsonb->>null::string AS ub,
    null::json#>ARRAY['foo'] AS va, '{}'::jsonb#>NULL AS vb,
    null::json#>>ARRAY['foo'] AS wa, '{}'::jsonb#>>NULL AS wb
FROM a
----
project
 ├── columns: ra:7(jsonb) rb:8(jsonb) sa:9(jsonb) sb:10(jsonb) ta:11(string) tb:12(string) ua:11(string) ub:12(string) va:13(jsonb) vb:14(unknown) wa:15(string) wb:14(unknown)
 ├── fd: ()-->(7-15)
 ├── scan a
 └── projections
      ├── null [type=jsonb]
      ├── null [type=jsonb]
      ├── null [type=jsonb]
      ├── null [type=jsonb]
      ├── null [type=string]
      ├── null [type=string]
      ├── null [type=jsonb]
      ├── null [type=unknown]
      └── null [type=string]

# --------------------------------------------------
# FoldNullInNonEmpty
# --------------------------------------------------
opt
SELECT null IN (i) AS r, null NOT IN (s) AS s FROM a
----
project
 ├── columns: r:7(bool) s:8(bool)
 ├── fd: ()-->(7,8)
 ├── scan a
 └── projections
      ├── null [type=bool]
      └── null [type=bool]

# --------------------------------------------------
# FoldInNull
# --------------------------------------------------
opt
SELECT i IN (null, null) AS r, k NOT IN (1 * null, null::int, 1 < null) AS s FROM a
----
project
 ├── columns: r:7(bool) s:8(bool)
 ├── fd: ()-->(7,8)
 ├── scan a
 └── projections
      ├── null [type=bool]
      └── null [type=bool]

# --------------------------------------------------
# NormalizeInConst
# --------------------------------------------------
opt
SELECT i IN (2, 1, 1, null, 3, null, 2, 3.0) AS r FROM a
----
project
 ├── columns: r:7(bool)
 ├── scan a
 │    └── columns: i:2(int)
 └── projections [outer=(2)]
      └── i IN (NULL, 1, 2, 3) [type=bool, outer=(2)]

opt
SELECT s NOT IN ('foo', s || 'foo', 'bar', length(s)::string, NULL) AS r FROM a
----
project
 ├── columns: r:7(bool)
 ├── scan a
 │    └── columns: s:4(string)
 └── projections [outer=(4)]
      └── s NOT IN (NULL, 'bar', 'foo', s || 'foo', length(s)::STRING) [type=bool, outer=(4)]

# --------------------------------------------------
# EliminateExistsProject
# --------------------------------------------------
opt
SELECT * FROM a WHERE EXISTS(SELECT i+1, i*k FROM a)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) a.arr:6(int[])
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters [type=bool]
      └── exists [type=bool]
           └── scan a
                ├── columns: a.k:7(int!null) a.i:8(int)
                ├── key: (7)
                └── fd: (7)-->(8)

# --------------------------------------------------
# EliminateExistsGroupBy
# --------------------------------------------------

# Scalar group by shouldn't get eliminated.
opt
SELECT * FROM a WHERE EXISTS(SELECT max(s) FROM a WHERE False)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) a.arr:6(int[])
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters [type=bool]
      └── exists [type=bool]
           └── scalar-group-by
                ├── columns: max:13(string)
                ├── cardinality: [1 - 1]
                ├── key: ()
                ├── fd: ()-->(13)
                ├── values
                │    ├── columns: a.s:10(string)
                │    ├── cardinality: [0 - 0]
                │    ├── key: ()
                │    └── fd: ()-->(10)
                └── aggregations [outer=(10)]
                     └── max [type=string, outer=(10)]
                          └── variable: a.s [type=string, outer=(10)]

opt
SELECT * FROM a WHERE EXISTS(SELECT DISTINCT s FROM a)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) a.arr:6(int[])
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters [type=bool]
      └── exists [type=bool]
           └── scan a
                └── columns: a.s:10(string)

opt
SELECT * FROM a WHERE EXISTS(SELECT DISTINCT ON (i) s FROM a)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) a.arr:6(int[])
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters [type=bool]
      └── exists [type=bool]
           └── scan a
                └── columns: a.i:8(int) a.s:10(string)

# --------------------------------------------------
# EliminateExistsGroupBy + EliminateExistsProject
# --------------------------------------------------
opt
SELECT * FROM a WHERE EXISTS(SELECT max(s) FROM a GROUP BY i)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) a.arr:6(int[])
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters [type=bool]
      └── exists [type=bool]
           └── scan a
                └── columns: a.i:8(int) a.s:10(string)

# --------------------------------------------------
# NormalizeJSONFieldAccess
# --------------------------------------------------
opt
SELECT * FROM a WHERE j->'a' = '"b"'::JSON
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters [type=bool, outer=(5)]
      └── j @> '{"a": "b"}' [type=bool, outer=(5)]

opt
SELECT * FROM a WHERE j->'a' @> '{"x": "b"}'::JSON
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters [type=bool, outer=(5)]
      └── j @> '{"a": {"x": "b"}}' [type=bool, outer=(5)]

opt
SELECT * FROM a WHERE j->'a'->'x' = '"b"'::JSON
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters [type=bool, outer=(5)]
      └── j @> '{"a": {"x": "b"}}' [type=bool, outer=(5)]

# The transformation is not valid in this case.
opt
SELECT * FROM a WHERE j->2 = '"b"'::JSON
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters [type=bool, outer=(5)]
      └── (j->2) = '"b"' [type=bool, outer=(5)]

# The transformation is not valid in this case, since j->'a' could be an array.
opt
SELECT * FROM a WHERE j->'a' @> '"b"'::JSON
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters [type=bool, outer=(5)]
      └── (j->'a') @> '"b"' [type=bool, outer=(5)]
