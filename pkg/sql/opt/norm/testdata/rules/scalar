exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON, arr int[])
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 ├── arr int[]
 └── INDEX primary
      └── k int not null

# --------------------------------------------------
# CommuteVar
# --------------------------------------------------

# Put variables on both sides of comparison operator to avoid matching constant
# patterns.
opt
SELECT
    (1+i) = k,
    (2-k) <> i,
    (i+1) IS NOT DISTINCT FROM k,
    (i-1) IS DISTINCT FROM k,

    (i*2) + k,
    (i+2) * k,
    (i^2) & k,
    (i^2) | k,
    (i*i) # k
FROM a
----
project
 ├── columns: "(1 + i) = k":7(bool) "(2 - k) != i":8(bool) "(i + 1) IS NOT DISTINCT FROM k":9(bool) "(i - 1) IS DISTINCT FROM k":10(bool) "(i * 2) + k":11(int) "(i + 2) * k":12(int) "(i ^ 2) & k":13(int) "(i ^ 2) | k":14(int) "(i * i) # k":15(int)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int)
 │    └── keys: (1)
 └── projections [outer=(1,2)]
      ├── a.k = (a.i + 1) [type=bool, outer=(1,2)]
      ├── a.i != (2 - a.k) [type=bool, outer=(1,2)]
      ├── a.k IS NOT DISTINCT FROM (a.i + 1) [type=bool, outer=(1,2)]
      ├── a.k IS DISTINCT FROM (a.i - 1) [type=bool, outer=(1,2)]
      ├── a.k + (a.i * 2) [type=int, outer=(1,2)]
      ├── a.k * (a.i + 2) [type=int, outer=(1,2)]
      ├── a.k & (a.i ^ 2) [type=int, outer=(1,2)]
      ├── a.k | (a.i ^ 2) [type=int, outer=(1,2)]
      └── a.k # (a.i * a.i) [type=int, outer=(1,2)]

# --------------------------------------------------
# CommuteConst
# --------------------------------------------------
opt
SELECT
    (length('foo')+1) = (i+k),
    length('bar') <> (i*2),
    5 IS NOT DISTINCT FROM (1-k),
    (10::decimal+1::int) IS DISTINCT FROM k,

    1 + f,
    (5*length('foo')) * (i*i),
    (100 ^ 2) & (i+i),
    length('foo')+1 | (i+i),
    1-length('foo') # (k^2)
FROM a
----
project
 ├── columns: "(length('foo') + 1) = (i + k)":7(bool) "length('bar') != (i * 2)":8(bool) "5 IS NOT DISTINCT FROM (1 - k)":9(bool) "(10::DECIMAL + 1::INT) IS DISTINCT FROM k":10(bool) "1 + f":11(float) "(5 * length('foo')) * (i * i)":12(int) "(100 ^ 2) & (i + i)":13(int) "(length('foo') + 1) | (i + i)":14(int) "(1 - length('foo')) # (k ^ 2)":15(int)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float)
 │    └── keys: (1)
 └── projections [outer=(1-3)]
      ├── (a.i + a.k) = (length('foo') + 1) [type=bool, outer=(1,2)]
      ├── (a.i * 2) != length('bar') [type=bool, outer=(2)]
      ├── (1 - a.k) IS NOT DISTINCT FROM 5 [type=bool, outer=(1)]
      ├── a.k IS DISTINCT FROM (10 + 1) [type=bool, outer=(1)]
      ├── a.f + 1.0 [type=float, outer=(3)]
      ├── (a.i * a.i) * (5 * length('foo')) [type=int, outer=(2)]
      ├── (a.i + a.i) & (100 ^ 2) [type=int, outer=(2)]
      ├── (a.i + a.i) | (length('foo') + 1) [type=int, outer=(2)]
      └── (a.k ^ 2) # (1 - length('foo')) [type=int, outer=(1)]

# --------------------------------------------------
# EliminateCoalesce
# --------------------------------------------------
opt
SELECT COALESCE(i) FROM a
----
project
 ├── columns: "COALESCE(i)":7(int)
 ├── scan a
 │    └── columns: i:2(int)
 └── projections [outer=(2)]
      └── variable: a.i [type=int, outer=(2)]

# --------------------------------------------------
# SimplifyCoalesce
# --------------------------------------------------
opt
SELECT COALESCE(NULL) FROM a
----
project
 ├── columns: "COALESCE(NULL)":7(unknown)
 ├── scan a
 └── projections
      └── null [type=unknown]

opt
SELECT COALESCE(NULL, 'foo', s) FROM a
----
project
 ├── columns: "COALESCE(NULL, 'foo', s)":7(string!null)
 ├── scan a
 └── projections
      └── const: 'foo' [type=string]

opt
SELECT COALESCE(NULL, NULL, s, s || 'foo') FROM a
----
project
 ├── columns: "COALESCE(NULL, NULL, s, s || 'foo')":7(string)
 ├── scan a
 │    └── columns: s:4(string)
 └── projections [outer=(4)]
      └── COALESCE(a.s, a.s || 'foo') [type=string, outer=(4)]

# Trailing null can't be removed.
opt
SELECT COALESCE(i, NULL, NULL) FROM a
----
project
 ├── columns: "COALESCE(i, NULL, NULL)":7(int)
 ├── scan a
 │    └── columns: i:2(int)
 └── projections [outer=(2)]
      └── COALESCE(a.i, NULL, NULL) [type=int, outer=(2)]

# --------------------------------------------------
# EliminateCast
# --------------------------------------------------
opt
SELECT
    i::int, arr::int[], '[1, 2]'::jsonb::json, null::char(2)::bit, s::string::string
FROM a
----
project
 ├── columns: "i::INT":7(int) "arr::INT[]":8(int[]) "'[1, 2]'::JSONB::JSON":9(jsonb) "NULL::CHAR(2)::BIT":10(int) "s::STRING::STRING":11(string)
 ├── scan a
 │    └── columns: i:2(int) s:4(string) arr:6(int[])
 └── projections [outer=(2,4,6)]
      ├── variable: a.i [type=int, outer=(2)]
      ├── variable: a.arr [type=int[], outer=(6)]
      ├── '[1, 2]'::JSONB [type=jsonb]
      ├── null [type=int]
      └── variable: a.s [type=string, outer=(4)]

# Shouldn't eliminate these casts.
opt
SELECT
    i::float,
    arr::decimal[],
    s::json::json,
    s::varchar(2),
    i::smallint::int8,
    s::text::char::varchar,
    ARRAY[1, 2]::OIDVECTOR,
    ARRAY[1, 2]::INT2VECTOR
FROM a
----
project
 ├── columns: "i::FLOAT":7(float) "arr::DECIMAL[]":8(decimal[]) "s::JSON::JSON":9(jsonb) "s::VARCHAR(2)":10(string) "i::SMALLINT::INT8":11(int) "s::TEXT::CHAR::VARCHAR":12(string) "ARRAY[1, 2]::OIDVECTOR":13(oid[]) "ARRAY[1, 2]::INT2VECTOR":14(int[])
 ├── scan a
 │    └── columns: i:2(int) s:4(string) arr:6(int[])
 └── projections [outer=(2,4,6)]
      ├── a.i::FLOAT [type=float, outer=(2)]
      ├── a.arr::DECIMAL[] [type=decimal[], outer=(6)]
      ├── a.s::JSON [type=jsonb, outer=(4)]
      ├── a.s::VARCHAR(2) [type=string, outer=(4)]
      ├── a.i::SMALLINT::INT8 [type=int, outer=(2)]
      ├── a.s::TEXT::CHAR::VARCHAR [type=string, outer=(4)]
      ├── ARRAY[1,2]::OIDVECTOR [type=oid[]]
      └── ARRAY[1,2]::INT2VECTOR [type=int[]]

# --------------------------------------------------
# FoldNullCast
# --------------------------------------------------
opt
SELECT
    null::int,
    null::timestamptz,
    null::decimal(19,2)::bit::char(2),
    null::oidvector,
    null::int2vector
----
project
 ├── columns: "NULL::INT":1(int) "NULL::TIMESTAMP WITH TIME ZONE":2(timestamptz) "NULL::DECIMAL(19,2)::BIT::CHAR(2)":3(string) "NULL::OIDVECTOR":4(oid[]) "NULL::INT2VECTOR":5(int[])
 ├── cardinality: [1 - 1]
 ├── values
 │    ├── cardinality: [1 - 1]
 │    └── tuple [type=tuple{}]
 └── projections
      ├── null [type=int]
      ├── null [type=timestamptz]
      ├── null [type=string]
      ├── null [type=oid[]]
      └── null [type=int[]]

# --------------------------------------------------
# FoldNullUnary
# --------------------------------------------------
opt
SELECT +null::int, -null::int, ~null::int FROM a
----
project
 ├── columns: "+NULL::INT":7(int) "-NULL::INT":8(int) "~NULL::INT":9(int)
 ├── scan a
 └── projections
      ├── null [type=int]
      ├── null [type=int]
      └── null [type=int]

# --------------------------------------------------
# FoldNullBinaryLeft, FoldNullBinaryRight
# --------------------------------------------------
opt
SELECT
    null::int & 1, 1 & null::int,
    null::decimal + 1, 1 + null::decimal,
    null::float % 1, 1 % null::float,
    null::int << 4, 4 << null::int,

    -- These shouldn't be folded because AllowNullArgs is true for concat with arrays.
    arr::decimal[] || null, null || arr::string[],

    -- Scalars concatenated with nulls match array overloads, and shouldn't be folded.
    -- In other words, the only overload for decimal concatenation is an array overload.
    i::decimal || null, null || i::float
FROM a
----
project
 ├── columns: "NULL::INT & 1":7(int) "1 & NULL::INT":8(int) "NULL::DECIMAL + 1":9(decimal) "1 + NULL::DECIMAL":10(decimal) "NULL::FLOAT % 1":11(float) "1 % NULL::FLOAT":12(float) "NULL::INT << 4":13(int) "4 << NULL::INT":14(int) "arr::DECIMAL[] || NULL":15(decimal[]) "NULL || arr::STRING[]":16(string[]) "i::DECIMAL || NULL":17(decimal[]) "NULL || i::FLOAT":18(float[])
 ├── scan a
 │    └── columns: i:2(int) arr:6(int[])
 └── projections [outer=(2,6)]
      ├── null [type=int]
      ├── null [type=int]
      ├── null [type=decimal]
      ├── null [type=decimal]
      ├── null [type=float]
      ├── null [type=float]
      ├── null [type=int]
      ├── null [type=int]
      ├── a.arr::DECIMAL[] || CAST(NULL AS DECIMAL[]) [type=decimal[], outer=(6)]
      ├── CAST(NULL AS STRING[]) || a.arr::STRING[] [type=string[], outer=(6)]
      ├── a.i::DECIMAL || CAST(NULL AS DECIMAL[]) [type=decimal[], outer=(2)]
      └── CAST(NULL AS FLOAT[]) || a.i::FLOAT [type=float[], outer=(2)]

opt
SELECT
    null::json || '[1, 2]', '[1, 2]' || null::json,
    null::json->'foo', '{}'::jsonb->null::string,
    null::json->>'foo', '{}'::jsonb->>null::string,
    null::json->>'foo', '{}'::jsonb->>null::string,
    null::json#>ARRAY['foo'], '{}'::jsonb#>NULL,
    null::json#>>ARRAY['foo'], '{}'::jsonb#>>NULL
FROM a
----
project
 ├── columns: "NULL::JSON || '[1, 2]'":7(jsonb) "'[1, 2]' || NULL::JSON":8(jsonb) "NULL::JSON->'foo'":9(jsonb) "'{}'::JSONB->NULL::STRING":10(jsonb) "NULL::JSON->>'foo'":11(string) "'{}'::JSONB->>NULL::STRING":12(string) "NULL::JSON->>'foo'":11(string) "'{}'::JSONB->>NULL::STRING":12(string) "NULL::JSON#>ARRAY['foo']":13(jsonb) "'{}'::JSONB#>NULL":14(unknown) "NULL::JSON#>>ARRAY['foo']":15(string) "'{}'::JSONB#>>NULL":14(unknown)
 ├── scan a
 └── projections
      ├── null [type=jsonb]
      ├── null [type=jsonb]
      ├── null [type=jsonb]
      ├── null [type=jsonb]
      ├── null [type=string]
      ├── null [type=string]
      ├── null [type=jsonb]
      ├── null [type=unknown]
      └── null [type=string]

# --------------------------------------------------
# FoldNullInNonEmpty
# --------------------------------------------------
opt
SELECT null IN (i), null NOT IN (s) FROM a
----
project
 ├── columns: "NULL IN (i)":7(bool) "NULL NOT IN (s)":8(bool)
 ├── scan a
 └── projections
      ├── null [type=bool]
      └── null [type=bool]

# --------------------------------------------------
# FoldInNull
# --------------------------------------------------
opt
SELECT i IN (null, null), k NOT IN (1 * null, null::int, 1 < null) FROM a
----
project
 ├── columns: "i IN (NULL, NULL)":7(bool) "k NOT IN (1 * NULL, NULL::INT, 1 < NULL)":8(bool)
 ├── scan a
 └── projections
      ├── null [type=bool]
      └── null [type=bool]

# --------------------------------------------------
# NormalizeInConst
# --------------------------------------------------
opt
SELECT i IN (2, 1, 1, null, 3, null, 2, 3.0) FROM a
----
project
 ├── columns: "i IN (2, 1, 1, NULL, 3, NULL, 2, 3.0)":7(bool)
 ├── scan a
 │    └── columns: i:2(int)
 └── projections [outer=(2)]
      └── a.i IN (NULL, 1, 2, 3) [type=bool, outer=(2)]

opt
SELECT s NOT IN ('foo', s || 'foo', 'bar', length(s)::string, NULL) FROM a
----
project
 ├── columns: "s NOT IN ('foo', s || 'foo', 'bar', length(s)::STRING, NULL)":7(bool)
 ├── scan a
 │    └── columns: s:4(string)
 └── projections [outer=(4)]
      └── a.s NOT IN (NULL, 'bar', 'foo', a.s || 'foo', length(a.s)::STRING) [type=bool, outer=(4)]

# --------------------------------------------------
# EliminateExistsProject
# --------------------------------------------------
opt
SELECT * FROM a WHERE EXISTS(SELECT i+1, i*k FROM a)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) a.arr:6(int[])
 │    └── keys: (1)
 └── filters [type=bool]
      └── exists [type=bool]
           └── scan a
                ├── columns: a.k:7(int!null) a.i:8(int)
                └── keys: (7)

# --------------------------------------------------
# EliminateExistsGroupBy
# --------------------------------------------------

# Scalar group by shouldn't get eliminated.
opt
SELECT * FROM a WHERE EXISTS(SELECT MAX(s) FROM a WHERE False)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) a.arr:6(int[])
 │    └── keys: (1)
 └── filters [type=bool]
      └── exists [type=bool]
           └── group-by
                ├── columns: max:13(string)
                ├── cardinality: [1 - 1]
                ├── scan a
                │    ├── columns: a.s:10(string)
                │    └── constraint: /7: contradiction
                └── aggregations [outer=(10)]
                     └── max [type=string, outer=(10)]
                          └── variable: a.s [type=string, outer=(10)]

# --------------------------------------------------
# EliminateExistsGroupBy + EliminateExistsProject
# --------------------------------------------------
opt
SELECT * FROM a WHERE EXISTS(SELECT MAX(s) FROM a GROUP BY i)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) arr:6(int[])
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) a.arr:6(int[])
 │    └── keys: (1)
 └── filters [type=bool]
      └── exists [type=bool]
           └── scan a
                └── columns: a.i:8(int) a.s:10(string)
