exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON, arr int[])
----

# --------------------------------------------------
# EliminateAggDistinct
# --------------------------------------------------

norm expect=EliminateAggDistinct
SELECT min(DISTINCT i), max(DISTINCT i), bool_and(DISTINCT i>f), bool_or(DISTINCT i>f), corr(DISTINCT k, i) FROM a
----
scalar-group-by
 ├── columns: min:7(int) max:8(int) bool_and:10(bool) bool_or:11(bool) corr:12(float)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(7,8,10-12)
 ├── project
 │    ├── columns: column9:9(bool) k:1(int!null) i:2(int)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2,9)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2,3)
 │    └── projections
 │         └── i > f [type=bool, outer=(2,3)]
 └── aggregations
      ├── min [type=int, outer=(2)]
      │    └── variable: i [type=int]
      ├── max [type=int, outer=(2)]
      │    └── variable: i [type=int]
      ├── bool-and [type=bool, outer=(9)]
      │    └── variable: column9 [type=bool]
      ├── bool-or [type=bool, outer=(9)]
      │    └── variable: column9 [type=bool]
      └── corr [type=float, outer=(1,2)]
           ├── variable: k [type=int]
           └── variable: i [type=int]

# The rule should still work when FILTER is present.
norm expect=EliminateAggDistinct
SELECT
    min(DISTINCT i) FILTER (WHERE i > 5),
    max(DISTINCT i) FILTER (WHERE i > 5),
    bool_and(DISTINCT i>f) FILTER (WHERE f > 0.0),
    bool_or(DISTINCT i>f) FILTER (WHERE f > 1.0),
    corr(DISTINCT k, i) FILTER(WHERE k > 5 AND i > 5)
FROM a
----
scalar-group-by
 ├── columns: min:8(int) max:9(int) bool_and:12(bool) bool_or:14(bool) corr:16(float)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(8,9,12,14,16)
 ├── project
 │    ├── columns: column7:7(bool) column10:10(bool) column11:11(bool) column13:13(bool) column15:15(bool) k:1(int!null) i:2(int)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2,7,10,11,13), (2)-->(7), (1,2)-->(15)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2,3)
 │    └── projections
 │         ├── i > 5 [type=bool, outer=(2)]
 │         ├── i > f [type=bool, outer=(2,3)]
 │         ├── f > 0.0 [type=bool, outer=(3)]
 │         ├── f > 1.0 [type=bool, outer=(3)]
 │         └── (k > 5) AND (i > 5) [type=bool, outer=(1,2)]
 └── aggregations
      ├── agg-filter [type=int, outer=(2,7)]
      │    ├── min [type=int]
      │    │    └── variable: i [type=int]
      │    └── variable: column7 [type=bool]
      ├── agg-filter [type=int, outer=(2,7)]
      │    ├── max [type=int]
      │    │    └── variable: i [type=int]
      │    └── variable: column7 [type=bool]
      ├── agg-filter [type=bool, outer=(10,11)]
      │    ├── bool-and [type=bool]
      │    │    └── variable: column10 [type=bool]
      │    └── variable: column11 [type=bool]
      ├── agg-filter [type=bool, outer=(10,13)]
      │    ├── bool-or [type=bool]
      │    │    └── variable: column10 [type=bool]
      │    └── variable: column13 [type=bool]
      └── agg-filter [type=float, outer=(1,2,15)]
           ├── corr [type=float]
           │    ├── variable: k [type=int]
           │    └── variable: i [type=int]
           └── variable: column15 [type=bool]

# The rule should not apply to these aggregations.
norm expect-not=EliminateAggDistinct
SELECT
    count(DISTINCT i),
    sum(DISTINCT i) FILTER (WHERE i > 5),
    sum_int(DISTINCT i),
    avg(DISTINCT i),
    stddev(DISTINCT f),
    variance(DISTINCT f),
    xor_agg(DISTINCT s::BYTES),
    array_agg(DISTINCT i),
    json_agg(DISTINCT j)
FROM a
----
scalar-group-by
 ├── columns: count:7(int) sum:9(decimal) sum_int:10(int) avg:11(decimal) stddev:12(float) variance:13(float) xor_agg:15(bytes) array_agg:16(int[]) json_agg:17(jsonb)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(7,9-13,15-17)
 ├── project
 │    ├── columns: column8:8(bool) column14:14(bytes) i:2(int) f:3(float) j:5(jsonb)
 │    ├── fd: (2)-->(8)
 │    ├── scan a
 │    │    └── columns: i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── projections
 │         ├── i > 5 [type=bool, outer=(2)]
 │         └── s::BYTES [type=bytes, outer=(4)]
 └── aggregations
      ├── agg-distinct [type=int, outer=(2)]
      │    └── count [type=int]
      │         └── variable: i [type=int]
      ├── agg-filter [type=decimal, outer=(2,8)]
      │    ├── agg-distinct [type=decimal]
      │    │    └── sum [type=decimal]
      │    │         └── variable: i [type=int]
      │    └── variable: column8 [type=bool]
      ├── agg-distinct [type=int, outer=(2)]
      │    └── sum-int [type=int]
      │         └── variable: i [type=int]
      ├── agg-distinct [type=decimal, outer=(2)]
      │    └── avg [type=decimal]
      │         └── variable: i [type=int]
      ├── agg-distinct [type=float, outer=(3)]
      │    └── std-dev [type=float]
      │         └── variable: f [type=float]
      ├── agg-distinct [type=float, outer=(3)]
      │    └── variance [type=float]
      │         └── variable: f [type=float]
      ├── agg-distinct [type=bytes, outer=(14)]
      │    └── xor-agg [type=bytes]
      │         └── variable: column14 [type=bytes]
      ├── agg-distinct [type=int[], outer=(2)]
      │    └── array-agg [type=int[]]
      │         └── variable: i [type=int]
      └── agg-distinct [type=jsonb, outer=(5)]
           └── json-agg [type=jsonb]
                └── variable: j [type=jsonb]
