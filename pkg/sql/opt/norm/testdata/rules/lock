exec-ddl
CREATE TABLE abcde (
  a UUID NOT NULL DEFAULT gen_random_uuid(),
  b STRING NULL,
  c TIMESTAMP NOT NULL DEFAULT current_timestamp():::TIMESTAMP,
  d TIMESTAMP NULL,
  e STRING NULL,
  PRIMARY KEY (a),
  INDEX (c) WHERE d IS NULL
)
----

# Check that we push down LIMIT and OFFSET under SFU locking, except when using
# SKIP LOCKED.

# Serializable, without SKIP LOCKED.

opt set=optimizer_use_lock_op_for_serializable=true expect=PushLimitIntoLock
SELECT * FROM abcde WHERE d IS NULL LIMIT 1 FOR UPDATE
----
lock abcde
 ├── columns: a:1!null b:2 c:3!null d:4 e:5
 ├── locking: for-update
 ├── cardinality: [0 - 1]
 ├── volatile, mutations
 ├── key: ()
 ├── fd: ()-->(1-5)
 └── index-join abcde
      ├── columns: a:1!null b:2 c:3!null d:4 e:5
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1-5)
      └── scan abcde@abcde_c_idx,partial
           ├── columns: a:1!null c:3!null
           ├── limit: 1
           ├── key: ()
           └── fd: ()-->(1,3)

opt set=optimizer_use_lock_op_for_serializable=true expect=PushOffsetIntoLock
SELECT * FROM abcde WHERE d IS NULL OFFSET 1 FOR UPDATE
----
lock abcde
 ├── columns: a:1!null b:2 c:3!null d:4 e:5
 ├── locking: for-update
 ├── volatile, mutations
 ├── key: (1)
 ├── fd: ()-->(4), (1)-->(2,3,5)
 └── index-join abcde
      ├── columns: a:1!null b:2 c:3!null d:4 e:5
      ├── key: (1)
      ├── fd: ()-->(4), (1)-->(2,3,5)
      └── offset
           ├── columns: a:1!null c:3!null
           ├── key: (1)
           ├── fd: (1)-->(3)
           ├── scan abcde@abcde_c_idx,partial
           │    ├── columns: a:1!null c:3!null
           │    ├── key: (1)
           │    └── fd: (1)-->(3)
           └── 1

# Serializable, with SKIP LOCKED.

opt set=optimizer_use_lock_op_for_serializable=true expect-not=PushLimitIntoLock
SELECT * FROM abcde WHERE d IS NULL LIMIT 1 FOR UPDATE SKIP LOCKED
----
limit
 ├── columns: a:1!null b:2 c:3!null d:4 e:5
 ├── cardinality: [0 - 1]
 ├── volatile, mutations
 ├── key: ()
 ├── fd: ()-->(1-5)
 ├── lock abcde
 │    ├── columns: a:1!null b:2 c:3!null d:4 e:5
 │    ├── locking: for-update,skip-locked
 │    ├── volatile, mutations
 │    ├── key: (1)
 │    ├── fd: ()-->(4), (1)-->(2,3,5)
 │    ├── limit hint: 1.00
 │    └── index-join abcde
 │         ├── columns: a:1!null b:2 c:3!null d:4 e:5
 │         ├── locking: none,skip-locked
 │         ├── volatile
 │         ├── key: (1)
 │         ├── fd: ()-->(4), (1)-->(2,3,5)
 │         ├── limit hint: 1.00
 │         └── scan abcde@abcde_c_idx,partial
 │              ├── columns: a:1!null c:3!null
 │              ├── locking: none,skip-locked
 │              ├── volatile
 │              ├── key: (1)
 │              ├── fd: (1)-->(3)
 │              └── limit hint: 1.00
 └── 1

opt set=optimizer_use_lock_op_for_serializable=true expect-not=PushOffsetIntoLock
SELECT * FROM abcde WHERE d IS NULL OFFSET 1 FOR UPDATE SKIP LOCKED
----
offset
 ├── columns: a:1!null b:2 c:3!null d:4 e:5
 ├── volatile, mutations
 ├── key: (1)
 ├── fd: ()-->(4), (1)-->(2,3,5)
 ├── lock abcde
 │    ├── columns: a:1!null b:2 c:3!null d:4 e:5
 │    ├── locking: for-update,skip-locked
 │    ├── volatile, mutations
 │    ├── key: (1)
 │    ├── fd: ()-->(4), (1)-->(2,3,5)
 │    └── index-join abcde
 │         ├── columns: a:1!null b:2 c:3!null d:4 e:5
 │         ├── locking: none,skip-locked
 │         ├── volatile
 │         ├── key: (1)
 │         ├── fd: ()-->(4), (1)-->(2,3,5)
 │         └── scan abcde@abcde_c_idx,partial
 │              ├── columns: a:1!null c:3!null
 │              ├── locking: none,skip-locked
 │              ├── volatile
 │              ├── key: (1)
 │              └── fd: (1)-->(3)
 └── 1

# Read committed, without SKIP LOCKED.

opt isolation=ReadCommitted expect=PushLimitIntoLock
SELECT * FROM abcde WHERE d IS NULL LIMIT 1 FOR UPDATE
----
lock abcde
 ├── columns: a:1!null b:2 c:3!null d:4 e:5
 ├── locking: for-update,durability-guaranteed
 ├── cardinality: [0 - 1]
 ├── volatile, mutations
 ├── key: ()
 ├── fd: ()-->(1-5)
 └── index-join abcde
      ├── columns: a:1!null b:2 c:3!null d:4 e:5
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1-5)
      └── scan abcde@abcde_c_idx,partial
           ├── columns: a:1!null c:3!null
           ├── limit: 1
           ├── key: ()
           └── fd: ()-->(1,3)

opt isolation=ReadCommitted expect=PushOffsetIntoLock
SELECT * FROM abcde WHERE d IS NULL OFFSET 1 FOR UPDATE
----
lock abcde
 ├── columns: a:1!null b:2 c:3!null d:4 e:5
 ├── locking: for-update,durability-guaranteed
 ├── volatile, mutations
 ├── key: (1)
 ├── fd: ()-->(4), (1)-->(2,3,5)
 └── index-join abcde
      ├── columns: a:1!null b:2 c:3!null d:4 e:5
      ├── key: (1)
      ├── fd: ()-->(4), (1)-->(2,3,5)
      └── offset
           ├── columns: a:1!null c:3!null
           ├── key: (1)
           ├── fd: (1)-->(3)
           ├── scan abcde@abcde_c_idx,partial
           │    ├── columns: a:1!null c:3!null
           │    ├── key: (1)
           │    └── fd: (1)-->(3)
           └── 1

# Read committed, with SKIP LOCKED.

opt isolation=ReadCommitted expect-not=PushLimitIntoLock
SELECT * FROM abcde WHERE d IS NULL LIMIT 1 FOR UPDATE SKIP LOCKED
----
limit
 ├── columns: a:1!null b:2 c:3!null d:4 e:5
 ├── cardinality: [0 - 1]
 ├── volatile, mutations
 ├── key: ()
 ├── fd: ()-->(1-5)
 ├── lock abcde
 │    ├── columns: a:1!null b:2 c:3!null d:4 e:5
 │    ├── locking: for-update,skip-locked,durability-guaranteed
 │    ├── volatile, mutations
 │    ├── key: (1)
 │    ├── fd: ()-->(4), (1)-->(2,3,5)
 │    ├── limit hint: 1.00
 │    └── index-join abcde
 │         ├── columns: a:1!null b:2 c:3!null d:4 e:5
 │         ├── locking: none,skip-locked,durability-guaranteed
 │         ├── volatile
 │         ├── key: (1)
 │         ├── fd: ()-->(4), (1)-->(2,3,5)
 │         ├── limit hint: 1.00
 │         └── scan abcde@abcde_c_idx,partial
 │              ├── columns: a:1!null c:3!null
 │              ├── locking: none,skip-locked,durability-guaranteed
 │              ├── volatile
 │              ├── key: (1)
 │              ├── fd: (1)-->(3)
 │              └── limit hint: 1.00
 └── 1

opt isolation=ReadCommitted expect-not=PushOffsetIntoLock
SELECT * FROM abcde WHERE d IS NULL OFFSET 1 FOR UPDATE SKIP LOCKED
----
offset
 ├── columns: a:1!null b:2 c:3!null d:4 e:5
 ├── volatile, mutations
 ├── key: (1)
 ├── fd: ()-->(4), (1)-->(2,3,5)
 ├── lock abcde
 │    ├── columns: a:1!null b:2 c:3!null d:4 e:5
 │    ├── locking: for-update,skip-locked,durability-guaranteed
 │    ├── volatile, mutations
 │    ├── key: (1)
 │    ├── fd: ()-->(4), (1)-->(2,3,5)
 │    └── index-join abcde
 │         ├── columns: a:1!null b:2 c:3!null d:4 e:5
 │         ├── locking: none,skip-locked,durability-guaranteed
 │         ├── volatile
 │         ├── key: (1)
 │         ├── fd: ()-->(4), (1)-->(2,3,5)
 │         └── scan abcde@abcde_c_idx,partial
 │              ├── columns: a:1!null c:3!null
 │              ├── locking: none,skip-locked,durability-guaranteed
 │              ├── volatile
 │              ├── key: (1)
 │              └── fd: (1)-->(3)
 └── 1
