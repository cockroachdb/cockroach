exec-ddl
CREATE TABLE a (
    k INT PRIMARY KEY,
    i INT,
    f FLOAT,
    s STRING,
    j JSON,
    UNIQUE INDEX (s DESC, f) STORING (j)
)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 ├── INDEX primary
 │    └── k int not null
 └── INDEX secondary
      ├── s string desc
      ├── f float
      ├── k int not null (storing)
      └── j jsonb (storing)

exec-ddl
CREATE TABLE t.xy (x INT PRIMARY KEY, y INT)
----
TABLE xy
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

# --------------------------------------------------
# Use optsteps.
# --------------------------------------------------
optsteps
SELECT s FROM a INNER JOIN xy ON a.k=xy.x AND i+1=10
----
================================================================================
Initial expression
  Cost: 2020.00
================================================================================
  project
   ├── columns: s:4(string)
   ├── inner-join
   │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int!null) xy.y:7(int)
   │    ├── scan a
   │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
   │    │    └── keys: (1) weak(3,4)
   │    ├── scan xy
   │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
   │    │    └── keys: (6)
   │    └── and [type=bool, outer=(1,2,6)]
   │         ├── eq [type=bool, outer=(1,6)]
   │         │    ├── variable: a.k [type=int, outer=(1)]
   │         │    └── variable: xy.x [type=int, outer=(6)]
   │         └── eq [type=bool, outer=(2)]
   │              ├── plus [type=int, outer=(2)]
   │              │    ├── variable: a.i [type=int, outer=(2)]
   │              │    └── const: 1 [type=int]
   │              └── const: 10 [type=int]
   └── projections [outer=(4)]
        └── variable: a.s [type=string, outer=(4)]
================================================================================
NormalizeCmpPlusConst
  Cost: 2020.00
================================================================================
   project
    ├── columns: s:4(string)
    ├── inner-join
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int!null) xy.y:7(int)
    │    ├── scan a
    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    │    └── keys: (1) weak(3,4)
    │    ├── scan xy
    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
    │    │    └── keys: (6)
    │    └── and [type=bool, outer=(1,2,6)]
    │         ├── eq [type=bool, outer=(1,6)]
    │         │    ├── variable: a.k [type=int, outer=(1)]
    │         │    └── variable: xy.x [type=int, outer=(6)]
    │         └── eq [type=bool, outer=(2)]
  - │              ├── plus [type=int, outer=(2)]
  - │              │    ├── variable: a.i [type=int, outer=(2)]
  - │              │    └── const: 1 [type=int]
  - │              └── const: 10 [type=int]
  + │              ├── variable: a.i [type=int, outer=(2)]
  + │              └── minus [type=int]
  + │                   ├── const: 10 [type=int]
  + │                   └── const: 1 [type=int]
    └── projections [outer=(4)]
         └── variable: a.s [type=string, outer=(4)]
================================================================================
EnsureJoinFiltersAnd
  Cost: 2020.00
================================================================================
   project
    ├── columns: s:4(string)
    ├── inner-join
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int!null) xy.y:7(int)
    │    ├── scan a
    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    │    └── keys: (1) weak(3,4)
    │    ├── scan xy
    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
    │    │    └── keys: (6)
  - │    └── and [type=bool, outer=(1,2,6)]
  + │    └── filters [type=bool, outer=(1,2,6)]
    │         ├── eq [type=bool, outer=(1,6)]
    │         │    ├── variable: a.k [type=int, outer=(1)]
    │         │    └── variable: xy.x [type=int, outer=(6)]
    │         └── eq [type=bool, outer=(2)]
    │              ├── variable: a.i [type=int, outer=(2)]
    │              └── minus [type=int]
    │                   ├── const: 10 [type=int]
    │                   └── const: 1 [type=int]
    └── projections [outer=(4)]
         └── variable: a.s [type=string, outer=(4)]
================================================================================
PushFilterIntoJoinLeft
  Cost: 2023.33
================================================================================
   project
    ├── columns: s:4(string)
    ├── inner-join
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int!null) xy.y:7(int)
  - │    ├── scan a
  + │    ├── select
    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  - │    │    └── keys: (1) weak(3,4)
  + │    │    ├── keys: (1) weak(3,4)
  + │    │    ├── scan a
  + │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  + │    │    │    └── keys: (1) weak(3,4)
  + │    │    └── filters [type=bool, outer=(2)]
  + │    │         └── eq [type=bool, outer=(2)]
  + │    │              ├── variable: a.i [type=int, outer=(2)]
  + │    │              └── minus [type=int]
  + │    │                   ├── const: 10 [type=int]
  + │    │                   └── const: 1 [type=int]
    │    ├── scan xy
    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
    │    │    └── keys: (6)
  - │    └── filters [type=bool, outer=(1,2,6)]
  - │         ├── eq [type=bool, outer=(1,6)]
  - │         │    ├── variable: a.k [type=int, outer=(1)]
  - │         │    └── variable: xy.x [type=int, outer=(6)]
  - │         └── eq [type=bool, outer=(2)]
  - │              ├── variable: a.i [type=int, outer=(2)]
  - │              └── minus [type=int]
  - │                   ├── const: 10 [type=int]
  - │                   └── const: 1 [type=int]
  + │    └── filters [type=bool, outer=(1,6)]
  + │         └── eq [type=bool, outer=(1,6)]
  + │              ├── variable: a.k [type=int, outer=(1)]
  + │              └── variable: xy.x [type=int, outer=(6)]
    └── projections [outer=(4)]
         └── variable: a.s [type=string, outer=(4)]
================================================================================
PruneJoinLeftCols
  Cost: 2023.33
================================================================================
   project
    ├── columns: s:4(string)
    ├── inner-join
  - │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int!null) xy.y:7(int)
  - │    ├── select
  - │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  - │    │    ├── keys: (1) weak(3,4)
  - │    │    ├── scan a
  + │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string) xy.x:6(int!null) xy.y:7(int)
  + │    ├── project
  + │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
  + │    │    ├── keys: (1)
  + │    │    ├── select
    │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  - │    │    │    └── keys: (1) weak(3,4)
  - │    │    └── filters [type=bool, outer=(2)]
  - │    │         └── eq [type=bool, outer=(2)]
  - │    │              ├── variable: a.i [type=int, outer=(2)]
  - │    │              └── minus [type=int]
  - │    │                   ├── const: 10 [type=int]
  - │    │                   └── const: 1 [type=int]
  + │    │    │    ├── keys: (1) weak(3,4)
  + │    │    │    ├── scan a
  + │    │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  + │    │    │    │    └── keys: (1) weak(3,4)
  + │    │    │    └── filters [type=bool, outer=(2)]
  + │    │    │         └── eq [type=bool, outer=(2)]
  + │    │    │              ├── variable: a.i [type=int, outer=(2)]
  + │    │    │              └── minus [type=int]
  + │    │    │                   ├── const: 10 [type=int]
  + │    │    │                   └── const: 1 [type=int]
  + │    │    └── projections [outer=(1,2,4)]
  + │    │         ├── variable: a.k [type=int, outer=(1)]
  + │    │         ├── variable: a.i [type=int, outer=(2)]
  + │    │         └── variable: a.s [type=string, outer=(4)]
    │    ├── scan xy
    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
    │    │    └── keys: (6)
    │    └── filters [type=bool, outer=(1,6)]
    │         └── eq [type=bool, outer=(1,6)]
    │              ├── variable: a.k [type=int, outer=(1)]
    │              └── variable: xy.x [type=int, outer=(6)]
    └── projections [outer=(4)]
         └── variable: a.s [type=string, outer=(4)]
================================================================================
PruneSelectCols
  Cost: 2023.33
================================================================================
   project
    ├── columns: s:4(string)
    ├── inner-join
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string) xy.x:6(int!null) xy.y:7(int)
    │    ├── project
    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
    │    │    ├── keys: (1)
    │    │    ├── select
  - │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  - │    │    │    ├── keys: (1) weak(3,4)
  + │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
  + │    │    │    ├── keys: (1)
    │    │    │    ├── scan a
  - │    │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  - │    │    │    │    └── keys: (1) weak(3,4)
  + │    │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
  + │    │    │    │    └── keys: (1)
    │    │    │    └── filters [type=bool, outer=(2)]
    │    │    │         └── eq [type=bool, outer=(2)]
    │    │    │              ├── variable: a.i [type=int, outer=(2)]
    │    │    │              └── minus [type=int]
    │    │    │                   ├── const: 10 [type=int]
    │    │    │                   └── const: 1 [type=int]
    │    │    └── projections [outer=(1,2,4)]
    │    │         ├── variable: a.k [type=int, outer=(1)]
    │    │         ├── variable: a.i [type=int, outer=(2)]
    │    │         └── variable: a.s [type=string, outer=(4)]
    │    ├── scan xy
    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
    │    │    └── keys: (6)
    │    └── filters [type=bool, outer=(1,6)]
    │         └── eq [type=bool, outer=(1,6)]
    │              ├── variable: a.k [type=int, outer=(1)]
    │              └── variable: xy.x [type=int, outer=(6)]
    └── projections [outer=(4)]
         └── variable: a.s [type=string, outer=(4)]
================================================================================
EliminateProject
  Cost: 2023.33
================================================================================
   project
    ├── columns: s:4(string)
    ├── inner-join
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string) xy.x:6(int!null) xy.y:7(int)
  - │    ├── project
  + │    ├── select
    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
    │    │    ├── keys: (1)
  - │    │    ├── select
  + │    │    ├── scan a
    │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
  - │    │    │    ├── keys: (1)
  - │    │    │    ├── scan a
  - │    │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
  - │    │    │    │    └── keys: (1)
  - │    │    │    └── filters [type=bool, outer=(2)]
  - │    │    │         └── eq [type=bool, outer=(2)]
  - │    │    │              ├── variable: a.i [type=int, outer=(2)]
  - │    │    │              └── minus [type=int]
  - │    │    │                   ├── const: 10 [type=int]
  - │    │    │                   └── const: 1 [type=int]
  - │    │    └── projections [outer=(1,2,4)]
  - │    │         ├── variable: a.k [type=int, outer=(1)]
  - │    │         ├── variable: a.i [type=int, outer=(2)]
  - │    │         └── variable: a.s [type=string, outer=(4)]
  + │    │    │    └── keys: (1)
  + │    │    └── filters [type=bool, outer=(2)]
  + │    │         └── eq [type=bool, outer=(2)]
  + │    │              ├── variable: a.i [type=int, outer=(2)]
  + │    │              └── minus [type=int]
  + │    │                   ├── const: 10 [type=int]
  + │    │                   └── const: 1 [type=int]
    │    ├── scan xy
    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
    │    │    └── keys: (6)
    │    └── filters [type=bool, outer=(1,6)]
    │         └── eq [type=bool, outer=(1,6)]
    │              ├── variable: a.k [type=int, outer=(1)]
    │              └── variable: xy.x [type=int, outer=(6)]
    └── projections [outer=(4)]
         └── variable: a.s [type=string, outer=(4)]
================================================================================
PruneJoinRightCols
  Cost: 2023.33
================================================================================
   project
    ├── columns: s:4(string)
    ├── inner-join
  - │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string) xy.x:6(int!null) xy.y:7(int)
  + │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string) xy.x:6(int!null)
    │    ├── select
    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
    │    │    ├── keys: (1)
    │    │    ├── scan a
    │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
    │    │    │    └── keys: (1)
    │    │    └── filters [type=bool, outer=(2)]
    │    │         └── eq [type=bool, outer=(2)]
    │    │              ├── variable: a.i [type=int, outer=(2)]
    │    │              └── minus [type=int]
    │    │                   ├── const: 10 [type=int]
    │    │                   └── const: 1 [type=int]
    │    ├── scan xy
  - │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  + │    │    ├── columns: xy.x:6(int!null)
    │    │    └── keys: (6)
    │    └── filters [type=bool, outer=(1,6)]
    │         └── eq [type=bool, outer=(1,6)]
    │              ├── variable: a.k [type=int, outer=(1)]
    │              └── variable: xy.x [type=int, outer=(6)]
    └── projections [outer=(4)]
         └── variable: a.s [type=string, outer=(4)]
--------------------------------------------------------------------------------
GenerateIndexScans (higher cost)
--------------------------------------------------------------------------------
   project
    ├── columns: s:4(string)
    ├── inner-join
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string) xy.x:6(int!null)
    │    ├── select
    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
    │    │    ├── keys: (1)
  - │    │    ├── scan a
  + │    │    ├── lookup-join
    │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
  - │    │    │    └── keys: (1)
  + │    │    │    ├── table: a
  + │    │    │    ├── keys: (1)
  + │    │    │    └── scan a@secondary
  + │    │    │         ├── columns: a.k:1(int!null) a.s:4(string)
  + │    │    │         └── keys: (1)
    │    │    └── filters [type=bool, outer=(2)]
    │    │         └── eq [type=bool, outer=(2)]
    │    │              ├── variable: a.i [type=int, outer=(2)]
    │    │              └── minus [type=int]
    │    │                   ├── const: 10 [type=int]
    │    │                   └── const: 1 [type=int]
    │    ├── scan xy
    │    │    ├── columns: xy.x:6(int!null)
    │    │    └── keys: (6)
    │    └── filters [type=bool, outer=(1,6)]
    │         └── eq [type=bool, outer=(1,6)]
    │              ├── variable: a.k [type=int, outer=(1)]
    │              └── variable: xy.x [type=int, outer=(6)]
    └── projections [outer=(4)]
         └── variable: a.s [type=string, outer=(4)]
--------------------------------------------------------------------------------
ConstrainScan (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
ConstrainLookupJoinIndexScan (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
GenerateIndexScans (no changes)
--------------------------------------------------------------------------------
================================================================================
Final best expression
  Cost: 2023.33
================================================================================
  project
   ├── columns: s:4(string)
   ├── inner-join
   │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string) xy.x:6(int!null)
   │    ├── select
   │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
   │    │    ├── keys: (1)
   │    │    ├── scan a
   │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
   │    │    │    └── keys: (1)
   │    │    └── filters [type=bool, outer=(2)]
   │    │         └── eq [type=bool, outer=(2)]
   │    │              ├── variable: a.i [type=int, outer=(2)]
   │    │              └── minus [type=int]
   │    │                   ├── const: 10 [type=int]
   │    │                   └── const: 1 [type=int]
   │    ├── scan xy
   │    │    ├── columns: xy.x:6(int!null)
   │    │    └── keys: (6)
   │    └── filters [type=bool, outer=(1,6)]
   │         └── eq [type=bool, outer=(1,6)]
   │              ├── variable: a.k [type=int, outer=(1)]
   │              └── variable: xy.x [type=int, outer=(6)]
   └── projections [outer=(4)]
        └── variable: a.s [type=string, outer=(4)]

# Exploration patterns with varying costs.
optsteps
SELECT s, k FROM a WHERE s='foo' AND f>100
----
================================================================================
Initial expression
  Cost: 1010.00
================================================================================
  project
   ├── columns: s:4(string) k:1(int!null)
   ├── keys: (1)
   ├── select
   │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
   │    ├── keys: (1) weak(3,4)
   │    ├── scan a
   │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
   │    │    └── keys: (1) weak(3,4)
   │    └── and [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight)]
   │         ├── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
   │         │    ├── variable: a.s [type=string, outer=(4)]
   │         │    └── const: 'foo' [type=string]
   │         └── gt [type=bool, outer=(3), constraints=(/3: [/100.00000000000001 - ]; tight)]
   │              ├── variable: a.f [type=float, outer=(3)]
   │              └── const: 100.0 [type=float]
   └── projections [outer=(1,4)]
        ├── variable: a.s [type=string, outer=(4)]
        └── variable: a.k [type=int, outer=(1)]
================================================================================
EnsureSelectFiltersAnd
  Cost: 1010.00
================================================================================
   project
    ├── columns: s:4(string) k:1(int!null)
    ├── keys: (1)
    ├── select
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    ├── keys: (1) weak(3,4)
    │    ├── scan a
    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    │    └── keys: (1) weak(3,4)
  - │    └── and [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight)]
  + │    └── filters [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight)]
    │         ├── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
    │         │    ├── variable: a.s [type=string, outer=(4)]
    │         │    └── const: 'foo' [type=string]
    │         └── gt [type=bool, outer=(3), constraints=(/3: [/100.00000000000001 - ]; tight)]
    │              ├── variable: a.f [type=float, outer=(3)]
    │              └── const: 100.0 [type=float]
    └── projections [outer=(1,4)]
         ├── variable: a.s [type=string, outer=(4)]
         └── variable: a.k [type=int, outer=(1)]
================================================================================
PruneSelectCols
  Cost: 1010.00
================================================================================
   project
    ├── columns: s:4(string) k:1(int!null)
    ├── keys: (1)
    ├── select
  - │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  + │    ├── columns: a.k:1(int!null) a.f:3(float) a.s:4(string)
    │    ├── keys: (1) weak(3,4)
    │    ├── scan a
  - │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  + │    │    ├── columns: a.k:1(int!null) a.f:3(float) a.s:4(string)
    │    │    └── keys: (1) weak(3,4)
    │    └── filters [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight)]
    │         ├── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
    │         │    ├── variable: a.s [type=string, outer=(4)]
    │         │    └── const: 'foo' [type=string]
    │         └── gt [type=bool, outer=(3), constraints=(/3: [/100.00000000000001 - ]; tight)]
    │              ├── variable: a.f [type=float, outer=(3)]
    │              └── const: 100.0 [type=float]
    └── projections [outer=(1,4)]
         ├── variable: a.s [type=string, outer=(4)]
         └── variable: a.k [type=int, outer=(1)]
--------------------------------------------------------------------------------
GenerateIndexScans (higher cost)
--------------------------------------------------------------------------------
   project
    ├── columns: s:4(string) k:1(int!null)
    ├── keys: (1)
    ├── select
    │    ├── columns: a.k:1(int!null) a.f:3(float) a.s:4(string)
    │    ├── keys: (1) weak(3,4)
  - │    ├── scan a
  + │    ├── scan a@secondary
    │    │    ├── columns: a.k:1(int!null) a.f:3(float) a.s:4(string)
    │    │    └── keys: (1) weak(3,4)
    │    └── filters [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight)]
    │         ├── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
    │         │    ├── variable: a.s [type=string, outer=(4)]
    │         │    └── const: 'foo' [type=string]
    │         └── gt [type=bool, outer=(3), constraints=(/3: [/100.00000000000001 - ]; tight)]
    │              ├── variable: a.f [type=float, outer=(3)]
    │              └── const: 100.0 [type=float]
    └── projections [outer=(1,4)]
         ├── variable: a.s [type=string, outer=(4)]
         └── variable: a.k [type=int, outer=(1)]
--------------------------------------------------------------------------------
ConstrainScan (no changes)
--------------------------------------------------------------------------------
================================================================================
ConstrainScan
  Cost: 1.01
================================================================================
   project
    ├── columns: s:4(string) k:1(int!null)
    ├── keys: (1)
    ├── select
    │    ├── columns: a.k:1(int!null) a.f:3(float) a.s:4(string)
    │    ├── keys: (1) weak(3,4)
  - │    ├── scan a
  + │    ├── scan a@secondary
    │    │    ├── columns: a.k:1(int!null) a.f:3(float) a.s:4(string)
  + │    │    ├── constraint: /-4/3: [/'foo'/100.00000000000001 - /'foo']
    │    │    └── keys: (1) weak(3,4)
  - │    └── filters [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight)]
  - │         ├── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
  - │         │    ├── variable: a.s [type=string, outer=(4)]
  - │         │    └── const: 'foo' [type=string]
  - │         └── gt [type=bool, outer=(3), constraints=(/3: [/100.00000000000001 - ]; tight)]
  - │              ├── variable: a.f [type=float, outer=(3)]
  - │              └── const: 100.0 [type=float]
  + │    └── filters [type=bool]
  + │         ├── true [type=bool]
  + │         └── true [type=bool]
    └── projections [outer=(1,4)]
         ├── variable: a.s [type=string, outer=(4)]
         └── variable: a.k [type=int, outer=(1)]
================================================================================
SimplifyFilters
  Cost: 1.00
================================================================================
   project
    ├── columns: s:4(string) k:1(int!null)
    ├── keys: (1)
  - ├── select
  + ├── scan a@secondary
    │    ├── columns: a.k:1(int!null) a.f:3(float) a.s:4(string)
  - │    ├── keys: (1) weak(3,4)
  - │    ├── scan a@secondary
  - │    │    ├── columns: a.k:1(int!null) a.f:3(float) a.s:4(string)
  - │    │    ├── constraint: /-4/3: [/'foo'/100.00000000000001 - /'foo']
  - │    │    └── keys: (1) weak(3,4)
  - │    └── filters [type=bool]
  - │         ├── true [type=bool]
  - │         └── true [type=bool]
  + │    ├── constraint: /-4/3: [/'foo'/100.00000000000001 - /'foo']
  + │    └── keys: (1) weak(3,4)
    └── projections [outer=(1,4)]
         ├── variable: a.s [type=string, outer=(4)]
         └── variable: a.k [type=int, outer=(1)]
================================================================================
Final best expression
  Cost: 1.00
================================================================================
  project
   ├── columns: s:4(string) k:1(int!null)
   ├── keys: (1)
   ├── scan a@secondary
   │    ├── columns: a.k:1(int!null) a.f:3(float) a.s:4(string)
   │    ├── constraint: /-4/3: [/'foo'/100.00000000000001 - /'foo']
   │    └── keys: (1) weak(3,4)
   └── projections [outer=(1,4)]
        ├── variable: a.s [type=string, outer=(4)]
        └── variable: a.k [type=int, outer=(1)]

# Decorrelation pattern.
optsteps
SELECT * FROM a WHERE EXISTS(SELECT * FROM xy WHERE y=i)
----
================================================================================
Initial expression
  Cost: 2020.00
================================================================================
  select
   ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
   ├── keys: (1) weak(3,4)
   ├── scan a
   │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
   │    └── keys: (1) weak(3,4)
   └── exists [type=bool, outer=(2)]
        └── select
             ├── columns: xy.x:6(int!null) xy.y:7(int)
             ├── outer: (2)
             ├── keys: (6)
             ├── scan xy
             │    ├── columns: xy.x:6(int!null) xy.y:7(int)
             │    └── keys: (6)
             └── eq [type=bool, outer=(2,7)]
                  ├── variable: xy.y [type=int, outer=(7)]
                  └── variable: a.i [type=int, outer=(2)]
================================================================================
EnsureSelectFilters
  Cost: 2020.00
================================================================================
   select
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── keys: (1) weak(3,4)
    ├── scan a
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    └── keys: (1) weak(3,4)
    └── exists [type=bool, outer=(2)]
         └── select
              ├── columns: xy.x:6(int!null) xy.y:7(int)
              ├── outer: (2)
              ├── keys: (6)
              ├── scan xy
              │    ├── columns: xy.x:6(int!null) xy.y:7(int)
              │    └── keys: (6)
  -           └── eq [type=bool, outer=(2,7)]
  -                ├── variable: xy.y [type=int, outer=(7)]
  -                └── variable: a.i [type=int, outer=(2)]
  +           └── filters [type=bool, outer=(2,7)]
  +                └── eq [type=bool, outer=(2,7)]
  +                     ├── variable: xy.y [type=int, outer=(7)]
  +                     └── variable: a.i [type=int, outer=(2)]
================================================================================
EnsureSelectFilters
  Cost: 2020.00
================================================================================
   select
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── keys: (1) weak(3,4)
    ├── scan a
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    └── keys: (1) weak(3,4)
  - └── exists [type=bool, outer=(2)]
  -      └── select
  -           ├── columns: xy.x:6(int!null) xy.y:7(int)
  -           ├── outer: (2)
  -           ├── keys: (6)
  -           ├── scan xy
  -           │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  -           │    └── keys: (6)
  -           └── filters [type=bool, outer=(2,7)]
  -                └── eq [type=bool, outer=(2,7)]
  -                     ├── variable: xy.y [type=int, outer=(7)]
  -                     └── variable: a.i [type=int, outer=(2)]
  + └── filters [type=bool, outer=(2)]
  +      └── exists [type=bool, outer=(2)]
  +           └── select
  +                ├── columns: xy.x:6(int!null) xy.y:7(int)
  +                ├── outer: (2)
  +                ├── keys: (6)
  +                ├── scan xy
  +                │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  +                │    └── keys: (6)
  +                └── filters [type=bool, outer=(2,7)]
  +                     └── eq [type=bool, outer=(2,7)]
  +                          ├── variable: xy.y [type=int, outer=(7)]
  +                          └── variable: a.i [type=int, outer=(2)]
================================================================================
HoistSelectExists
  Cost: 5353.33
================================================================================
   select
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
  - ├── keys: (1) weak(3,4)
  - ├── scan a
  + ├── semi-join-apply
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  - │    └── keys: (1) weak(3,4)
  - └── filters [type=bool, outer=(2)]
  -      └── exists [type=bool, outer=(2)]
  -           └── select
  -                ├── columns: xy.x:6(int!null) xy.y:7(int)
  -                ├── outer: (2)
  -                ├── keys: (6)
  -                ├── scan xy
  -                │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  -                │    └── keys: (6)
  -                └── filters [type=bool, outer=(2,7)]
  -                     └── eq [type=bool, outer=(2,7)]
  -                          ├── variable: xy.y [type=int, outer=(7)]
  -                          └── variable: a.i [type=int, outer=(2)]
  + │    ├── scan a
  + │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  + │    │    └── keys: (1) weak(3,4)
  + │    ├── select
  + │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  + │    │    ├── outer: (2)
  + │    │    ├── keys: (6)
  + │    │    ├── scan xy
  + │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  + │    │    │    └── keys: (6)
  + │    │    └── filters [type=bool, outer=(2,7)]
  + │    │         └── eq [type=bool, outer=(2,7)]
  + │    │              ├── variable: xy.y [type=int, outer=(7)]
  + │    │              └── variable: a.i [type=int, outer=(2)]
  + │    └── true [type=bool]
  + └── filters [type=bool]
================================================================================
TryDecorrelateSelect
  Cost: 3020.00
================================================================================
   select
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── semi-join-apply
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    ├── scan a
    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    │    └── keys: (1) weak(3,4)
  - │    ├── select
  + │    ├── scan xy
    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  - │    │    ├── outer: (2)
  - │    │    ├── keys: (6)
  - │    │    ├── scan xy
  - │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  - │    │    │    └── keys: (6)
  - │    │    └── filters [type=bool, outer=(2,7)]
  - │    │         └── eq [type=bool, outer=(2,7)]
  - │    │              ├── variable: xy.y [type=int, outer=(7)]
  - │    │              └── variable: a.i [type=int, outer=(2)]
  - │    └── true [type=bool]
  + │    │    └── keys: (6)
  + │    └── filters [type=bool, outer=(2,7)]
  + │         └── eq [type=bool, outer=(2,7)]
  + │              ├── variable: xy.y [type=int, outer=(7)]
  + │              └── variable: a.i [type=int, outer=(2)]
    └── filters [type=bool]
================================================================================
DecorrelateJoin
  Cost: 3020.00
================================================================================
   select
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
  - ├── semi-join-apply
  + ├── semi-join
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    ├── scan a
    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    │    └── keys: (1) weak(3,4)
    │    ├── scan xy
    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
    │    │    └── keys: (6)
    │    └── filters [type=bool, outer=(2,7)]
    │         └── eq [type=bool, outer=(2,7)]
    │              ├── variable: xy.y [type=int, outer=(7)]
    │              └── variable: a.i [type=int, outer=(2)]
    └── filters [type=bool]
================================================================================
EliminateEmptyAnd
  Cost: 3020.00
================================================================================
   select
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── semi-join
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    ├── scan a
    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    │    └── keys: (1) weak(3,4)
    │    ├── scan xy
    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
    │    │    └── keys: (6)
    │    └── filters [type=bool, outer=(2,7)]
    │         └── eq [type=bool, outer=(2,7)]
    │              ├── variable: xy.y [type=int, outer=(7)]
    │              └── variable: a.i [type=int, outer=(2)]
  - └── filters [type=bool]
  + └── true [type=bool]
================================================================================
EliminateSelect
  Cost: 2020.00
================================================================================
  -select
  +semi-join
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
  - ├── semi-join
  + ├── scan a
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  - │    ├── scan a
  - │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  - │    │    └── keys: (1) weak(3,4)
  - │    ├── scan xy
  - │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  - │    │    └── keys: (6)
  - │    └── filters [type=bool, outer=(2,7)]
  - │         └── eq [type=bool, outer=(2,7)]
  - │              ├── variable: xy.y [type=int, outer=(7)]
  - │              └── variable: a.i [type=int, outer=(2)]
  - └── true [type=bool]
  + │    └── keys: (1) weak(3,4)
  + ├── scan xy
  + │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  + │    └── keys: (6)
  + └── filters [type=bool, outer=(2,7)]
  +      └── eq [type=bool, outer=(2,7)]
  +           ├── variable: xy.y [type=int, outer=(7)]
  +           └── variable: a.i [type=int, outer=(2)]
--------------------------------------------------------------------------------
GenerateIndexScans (higher cost)
--------------------------------------------------------------------------------
   semi-join
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
  - ├── scan a
  + ├── lookup-join
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  - │    └── keys: (1) weak(3,4)
  + │    ├── table: a
  + │    ├── keys: (1) weak(3,4)
  + │    └── scan a@secondary
  + │         ├── columns: a.k:1(int!null) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  + │         └── keys: (1) weak(3,4)
    ├── scan xy
    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
    │    └── keys: (6)
    └── filters [type=bool, outer=(2,7)]
         └── eq [type=bool, outer=(2,7)]
              ├── variable: xy.y [type=int, outer=(7)]
              └── variable: a.i [type=int, outer=(2)]
--------------------------------------------------------------------------------
GenerateIndexScans (no changes)
--------------------------------------------------------------------------------
================================================================================
Final best expression
  Cost: 2020.00
================================================================================
  semi-join
   ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
   ├── scan a
   │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
   │    └── keys: (1) weak(3,4)
   ├── scan xy
   │    ├── columns: xy.x:6(int!null) xy.y:7(int)
   │    └── keys: (6)
   └── filters [type=bool, outer=(2,7)]
        └── eq [type=bool, outer=(2,7)]
             ├── variable: xy.y [type=int, outer=(7)]
             └── variable: a.i [type=int, outer=(2)]
