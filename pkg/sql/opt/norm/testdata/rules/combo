exec-ddl
CREATE TABLE a (
    k INT PRIMARY KEY,
    i INT,
    f FLOAT,
    s STRING,
    j JSON,
    UNIQUE INDEX (s DESC, f) STORING (j)
)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 ├── INDEX primary
 │    └── k int not null
 └── INDEX secondary
      ├── s string desc
      ├── f float
      ├── k int not null (storing)
      └── j jsonb (storing)

exec-ddl
CREATE TABLE t.xy (x INT PRIMARY KEY, y INT)
----
TABLE xy
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

# --------------------------------------------------
# Use optsteps.
# --------------------------------------------------
optsteps
SELECT s FROM a INNER JOIN xy ON a.k=xy.x AND i+1=10
----
================================================================================
Initial expression
  Cost: 3170.00
================================================================================
  project
   ├── columns: s:4(string)
   └── inner-join
        ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) y:7(int)
        ├── key: (1,6)
        ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5), (6)-->(7)
        ├── scan a
        │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
        │    ├── key: (1)
        │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
        ├── scan xy
        │    ├── columns: x:6(int!null) y:7(int)
        │    ├── key: (6)
        │    └── fd: (6)-->(7)
        └── filters [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
             └── (a.k = xy.x) AND ((a.i + 1) = 10) [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
================================================================================
NormalizeCmpPlusConst
  Cost: 3170.00
================================================================================
   project
    ├── columns: s:4(string)
    └── inner-join
  -      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) y:7(int)
  +      ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) y:7(int)
         ├── key: (1,6)
         ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5), (6)-->(7)
         ├── scan a
         │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
         │    ├── key: (1)
         │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
         ├── scan xy
         │    ├── columns: x:6(int!null) y:7(int)
         │    ├── key: (6)
         │    └── fd: (6)-->(7)
  -      └── filters [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
  -           └── (a.k = xy.x) AND ((a.i + 1) = 10) [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
  +      └── filters [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /6: (/NULL - ])]
  +           └── (a.k = xy.x) AND (a.i = (10 - 1)) [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /6: (/NULL - ])]
================================================================================
SimplifyFilters
  Cost: 3170.00
================================================================================
   project
    ├── columns: s:4(string)
    └── inner-join
         ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) y:7(int)
  -      ├── key: (1,6)
  -      ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5), (6)-->(7)
  +      ├── key: (6)
  +      ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5), (6)-->(7), (1)==(6), (6)==(1)
         ├── scan a
         │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
         │    ├── key: (1)
         │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
         ├── scan xy
         │    ├── columns: x:6(int!null) y:7(int)
         │    ├── key: (6)
         │    └── fd: (6)-->(7)
  -      └── filters [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /6: (/NULL - ])]
  -           └── (a.k = xy.x) AND (a.i = (10 - 1)) [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /6: (/NULL - ])]
  +      └── filters [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
  +           ├── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
  +           └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
================================================================================
PushFilterIntoJoinLeft
  Cost: 2505.00
================================================================================
   project
    ├── columns: s:4(string)
    └── inner-join
         ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) y:7(int)
         ├── key: (6)
         ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5), (6)-->(7), (1)==(6), (6)==(1)
  -      ├── scan a
  -      │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
  +      ├── select
  +      │    ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
         │    ├── key: (1)
  -      │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  +      │    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  +      │    ├── scan a
  +      │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
  +      │    │    ├── key: (1)
  +      │    │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  +      │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  +      │         └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         ├── scan xy
         │    ├── columns: x:6(int!null) y:7(int)
         │    ├── key: (6)
         │    └── fd: (6)-->(7)
  -      └── filters [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
  -           ├── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
  -           └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  +      └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
  +           └── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
================================================================================
PruneJoinLeftCols
  Cost: 2505.00
================================================================================
   project
    ├── columns: s:4(string)
    └── inner-join
  -      ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) y:7(int)
  +      ├── columns: k:1(int!null) i:2(int!null) s:4(string) x:6(int!null) y:7(int)
         ├── key: (6)
  -      ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5), (6)-->(7), (1)==(6), (6)==(1)
  -      ├── select
  -      │    ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
  +      ├── fd: (1)-->(2,4), (6)-->(7), (1)==(6), (6)==(1)
  +      ├── project
  +      │    ├── columns: k:1(int!null) i:2(int!null) s:4(string)
         │    ├── key: (1)
  -      │    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  -      │    ├── scan a
  -      │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
  -      │    │    ├── key: (1)
  -      │    │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  -      │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  -      │         └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  +      │    ├── fd: (1)-->(2,4)
  +      │    └── select
  +      │         ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
  +      │         ├── key: (1)
  +      │         ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  +      │         ├── scan a
  +      │         │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
  +      │         │    ├── key: (1)
  +      │         │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  +      │         └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  +      │              └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         ├── scan xy
         │    ├── columns: x:6(int!null) y:7(int)
         │    ├── key: (6)
         │    └── fd: (6)-->(7)
         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
              └── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
================================================================================
PruneSelectCols
  Cost: 2485.00
================================================================================
   project
    ├── columns: s:4(string)
    └── inner-join
         ├── columns: k:1(int!null) i:2(int!null) s:4(string) x:6(int!null) y:7(int)
         ├── key: (6)
         ├── fd: (1)-->(2,4), (6)-->(7), (1)==(6), (6)==(1)
         ├── project
         │    ├── columns: k:1(int!null) i:2(int!null) s:4(string)
         │    ├── key: (1)
         │    ├── fd: (1)-->(2,4)
         │    └── select
  -      │         ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
  +      │         ├── columns: k:1(int!null) i:2(int!null) s:4(string)
         │         ├── key: (1)
  -      │         ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  +      │         ├── fd: (1)-->(2,4)
         │         ├── scan a
  -      │         │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
  +      │         │    ├── columns: k:1(int!null) i:2(int) s:4(string)
         │         │    ├── key: (1)
  -      │         │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  +      │         │    └── fd: (1)-->(2,4)
         │         └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         │              └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         ├── scan xy
         │    ├── columns: x:6(int!null) y:7(int)
         │    ├── key: (6)
         │    └── fd: (6)-->(7)
         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
              └── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
================================================================================
EliminateProject
  Cost: 2485.00
================================================================================
   project
    ├── columns: s:4(string)
    └── inner-join
         ├── columns: k:1(int!null) i:2(int!null) s:4(string) x:6(int!null) y:7(int)
         ├── key: (6)
         ├── fd: (1)-->(2,4), (6)-->(7), (1)==(6), (6)==(1)
  -      ├── project
  +      ├── select
         │    ├── columns: k:1(int!null) i:2(int!null) s:4(string)
         │    ├── key: (1)
         │    ├── fd: (1)-->(2,4)
  -      │    └── select
  -      │         ├── columns: k:1(int!null) i:2(int!null) s:4(string)
  -      │         ├── key: (1)
  -      │         ├── fd: (1)-->(2,4)
  -      │         ├── scan a
  -      │         │    ├── columns: k:1(int!null) i:2(int) s:4(string)
  -      │         │    ├── key: (1)
  -      │         │    └── fd: (1)-->(2,4)
  -      │         └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  -      │              └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  +      │    ├── scan a
  +      │    │    ├── columns: k:1(int!null) i:2(int) s:4(string)
  +      │    │    ├── key: (1)
  +      │    │    └── fd: (1)-->(2,4)
  +      │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  +      │         └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         ├── scan xy
         │    ├── columns: x:6(int!null) y:7(int)
         │    ├── key: (6)
         │    └── fd: (6)-->(7)
         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
              └── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
================================================================================
PruneJoinRightCols
  Cost: 2475.00
================================================================================
   project
    ├── columns: s:4(string)
    └── inner-join
  -      ├── columns: k:1(int!null) i:2(int!null) s:4(string) x:6(int!null) y:7(int)
  +      ├── columns: k:1(int!null) i:2(int!null) s:4(string) x:6(int!null)
         ├── key: (6)
  -      ├── fd: (1)-->(2,4), (6)-->(7), (1)==(6), (6)==(1)
  +      ├── fd: (1)-->(2,4), (1)==(6), (6)==(1)
         ├── select
         │    ├── columns: k:1(int!null) i:2(int!null) s:4(string)
         │    ├── key: (1)
         │    ├── fd: (1)-->(2,4)
         │    ├── scan a
         │    │    ├── columns: k:1(int!null) i:2(int) s:4(string)
         │    │    ├── key: (1)
         │    │    └── fd: (1)-->(2,4)
         │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         │         └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         ├── scan xy
  -      │    ├── columns: x:6(int!null) y:7(int)
  -      │    ├── key: (6)
  -      │    └── fd: (6)-->(7)
  +      │    ├── columns: x:6(int!null)
  +      │    └── key: (6)
         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
              └── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
--------------------------------------------------------------------------------
GenerateIndexScans (higher cost)
--------------------------------------------------------------------------------
   project
    ├── columns: s:4(string)
    └── inner-join
         ├── columns: k:1(int!null) i:2(int!null) s:4(string) x:6(int!null)
         ├── key: (6)
         ├── fd: (1)-->(2,4), (1)==(6), (6)==(1)
         ├── select
         │    ├── columns: k:1(int!null) i:2(int!null) s:4(string)
         │    ├── key: (1)
         │    ├── fd: (1)-->(2,4)
  -      │    ├── scan a
  +      │    ├── scan a,rev
         │    │    ├── columns: k:1(int!null) i:2(int) s:4(string)
         │    │    ├── key: (1)
         │    │    └── fd: (1)-->(2,4)
         │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         │         └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         ├── scan xy
         │    ├── columns: x:6(int!null)
         │    └── key: (6)
         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
              └── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
--------------------------------------------------------------------------------
ConstrainScan (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
ConstrainScan (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
ConstrainIndexJoinScan (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
ConstrainIndexJoinScan (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
GenerateIndexScans (higher cost)
--------------------------------------------------------------------------------
   project
    ├── columns: s:4(string)
    └── inner-join
         ├── columns: k:1(int!null) i:2(int!null) s:4(string) x:6(int!null)
         ├── key: (6)
         ├── fd: (1)-->(2,4), (1)==(6), (6)==(1)
         ├── select
         │    ├── columns: k:1(int!null) i:2(int!null) s:4(string)
         │    ├── key: (1)
         │    ├── fd: (1)-->(2,4)
         │    ├── scan a
         │    │    ├── columns: k:1(int!null) i:2(int) s:4(string)
         │    │    ├── key: (1)
         │    │    └── fd: (1)-->(2,4)
         │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         │         └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  -      ├── scan xy
  +      ├── scan xy,rev
         │    ├── columns: x:6(int!null)
         │    └── key: (6)
         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
              └── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
================================================================================
CommuteJoin
  Cost: 2471.67
================================================================================
   project
    ├── columns: s:4(string)
    └── inner-join
         ├── columns: k:1(int!null) i:2(int!null) s:4(string) x:6(int!null)
         ├── key: (6)
         ├── fd: (1)-->(2,4), (1)==(6), (6)==(1)
  +      ├── scan xy
  +      │    ├── columns: x:6(int!null)
  +      │    └── key: (6)
         ├── select
         │    ├── columns: k:1(int!null) i:2(int!null) s:4(string)
         │    ├── key: (1)
         │    ├── fd: (1)-->(2,4)
         │    ├── scan a
         │    │    ├── columns: k:1(int!null) i:2(int) s:4(string)
         │    │    ├── key: (1)
         │    │    └── fd: (1)-->(2,4)
         │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         │         └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  -      ├── scan xy
  -      │    ├── columns: x:6(int!null)
  -      │    └── key: (6)
         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
              └── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
================================================================================
GenerateMergeJoins
  Cost: 2466.67
================================================================================
   project
    ├── columns: s:4(string)
  - └── inner-join
  + └── inner-join (merge)
         ├── columns: k:1(int!null) i:2(int!null) s:4(string) x:6(int!null)
         ├── key: (6)
         ├── fd: (1)-->(2,4), (1)==(6), (6)==(1)
  -      ├── scan xy
  -      │    ├── columns: x:6(int!null)
  -      │    └── key: (6)
         ├── select
         │    ├── columns: k:1(int!null) i:2(int!null) s:4(string)
         │    ├── key: (1)
         │    ├── fd: (1)-->(2,4)
  +      │    ├── ordering: +1
         │    ├── scan a
         │    │    ├── columns: k:1(int!null) i:2(int) s:4(string)
         │    │    ├── key: (1)
  -      │    │    └── fd: (1)-->(2,4)
  +      │    │    ├── fd: (1)-->(2,4)
  +      │    │    └── ordering: +1
         │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         │         └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  -      └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
  -           └── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
  +      ├── scan xy
  +      │    ├── columns: x:6(int!null)
  +      │    ├── key: (6)
  +      │    └── ordering: +6
  +      └── merge-on
  +           ├── left ordering: +1
  +           ├── right ordering: +6
  +           └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
  +                └── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
--------------------------------------------------------------------------------
GenerateLookupJoin (higher cost)
--------------------------------------------------------------------------------
   project
    ├── columns: s:4(string)
  - └── inner-join (merge)
  + └── inner-join (lookup xy)
         ├── columns: k:1(int!null) i:2(int!null) s:4(string) x:6(int!null)
  +      ├── key columns: [1] = [6]
         ├── key: (6)
         ├── fd: (1)-->(2,4), (1)==(6), (6)==(1)
         ├── select
         │    ├── columns: k:1(int!null) i:2(int!null) s:4(string)
         │    ├── key: (1)
         │    ├── fd: (1)-->(2,4)
  -      │    ├── ordering: +1
         │    ├── scan a
         │    │    ├── columns: k:1(int!null) i:2(int) s:4(string)
         │    │    ├── key: (1)
  -      │    │    ├── fd: (1)-->(2,4)
  -      │    │    └── ordering: +1
  +      │    │    └── fd: (1)-->(2,4)
         │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         │         └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  -      ├── scan xy
  -      │    ├── columns: x:6(int!null)
  -      │    ├── key: (6)
  -      │    └── ordering: +6
  -      └── merge-on
  -           ├── left ordering: +1
  -           ├── right ordering: +6
  -           └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
  -                └── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
  +      └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
  +           └── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
--------------------------------------------------------------------------------
CommuteJoin (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
GenerateMergeJoins (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
GenerateLookupJoinWithFilter (higher cost)
--------------------------------------------------------------------------------
   project
    ├── columns: s:4(string)
  - └── inner-join (merge)
  + └── inner-join (lookup a)
         ├── columns: k:1(int!null) i:2(int!null) s:4(string) x:6(int!null)
  +      ├── key columns: [6] = [1]
         ├── key: (6)
         ├── fd: (1)-->(2,4), (1)==(6), (6)==(1)
  -      ├── select
  -      │    ├── columns: k:1(int!null) i:2(int!null) s:4(string)
  -      │    ├── key: (1)
  -      │    ├── fd: (1)-->(2,4)
  -      │    ├── ordering: +1
  -      │    ├── scan a
  -      │    │    ├── columns: k:1(int!null) i:2(int) s:4(string)
  -      │    │    ├── key: (1)
  -      │    │    ├── fd: (1)-->(2,4)
  -      │    │    └── ordering: +1
  -      │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  -      │         └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         ├── scan xy
         │    ├── columns: x:6(int!null)
  -      │    ├── key: (6)
  -      │    └── ordering: +6
  -      └── merge-on
  -           ├── left ordering: +1
  -           ├── right ordering: +6
  -           └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
  -                └── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
  +      │    └── key: (6)
  +      └── filters [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
  +           ├── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
  +           └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
================================================================================
Final best expression
  Cost: 2466.67
================================================================================
  project
   ├── columns: s:4(string)
   └── inner-join (merge)
        ├── columns: k:1(int!null) i:2(int!null) s:4(string) x:6(int!null)
        ├── key: (6)
        ├── fd: (1)-->(2,4), (1)==(6), (6)==(1)
        ├── select
        │    ├── columns: k:1(int!null) i:2(int!null) s:4(string)
        │    ├── key: (1)
        │    ├── fd: (1)-->(2,4)
        │    ├── ordering: +1
        │    ├── scan a
        │    │    ├── columns: k:1(int!null) i:2(int) s:4(string)
        │    │    ├── key: (1)
        │    │    ├── fd: (1)-->(2,4)
        │    │    └── ordering: +1
        │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
        │         └── a.i = (10 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
        ├── scan xy
        │    ├── columns: x:6(int!null)
        │    ├── key: (6)
        │    └── ordering: +6
        └── merge-on
             ├── left ordering: +1
             ├── right ordering: +6
             └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
                  └── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# Exploration patterns with varying costs.
optsteps
SELECT s, k FROM a WHERE s='foo' AND f>100
----
================================================================================
Initial expression
  Cost: 1110.00
================================================================================
  project
   ├── columns: s:4(string!null) k:1(int!null)
   ├── key: (1)
   ├── fd: ()-->(4)
   └── select
        ├── columns: k:1(int!null) i:2(int) f:3(float!null) s:4(string!null) j:5(jsonb)
        ├── key: (1)
        ├── fd: ()-->(4), (1)-->(2,3,5), (3)-->(1,2,5)
        ├── scan a
        │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
        │    ├── key: (1)
        │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
        └── filters [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight), fd=()-->(4)]
             └── (a.s = 'foo') AND (a.f > 100.0) [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight)]
================================================================================
SimplifyFilters
  Cost: 1110.00
================================================================================
   project
    ├── columns: s:4(string!null) k:1(int!null)
    ├── key: (1)
    ├── fd: ()-->(4)
    └── select
         ├── columns: k:1(int!null) i:2(int) f:3(float!null) s:4(string!null) j:5(jsonb)
         ├── key: (1)
         ├── fd: ()-->(4), (1)-->(2,3,5), (3)-->(1,2,5)
         ├── scan a
         │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
         │    ├── key: (1)
         │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
         └── filters [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight), fd=()-->(4)]
  -           └── (a.s = 'foo') AND (a.f > 100.0) [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight)]
  +           ├── a.s = 'foo' [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
  +           └── a.f > 100.0 [type=bool, outer=(3), constraints=(/3: [/100.00000000000001 - ]; tight)]
================================================================================
PruneSelectCols
  Cost: 1090.00
================================================================================
   project
    ├── columns: s:4(string!null) k:1(int!null)
    ├── key: (1)
    ├── fd: ()-->(4)
    └── select
  -      ├── columns: k:1(int!null) i:2(int) f:3(float!null) s:4(string!null) j:5(jsonb)
  +      ├── columns: k:1(int!null) f:3(float!null) s:4(string!null)
         ├── key: (1)
  -      ├── fd: ()-->(4), (1)-->(2,3,5), (3)-->(1,2,5)
  +      ├── fd: ()-->(4), (1)-->(3), (3)-->(1)
         ├── scan a
  -      │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
  +      │    ├── columns: k:1(int!null) f:3(float) s:4(string)
         │    ├── key: (1)
  -      │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  +      │    └── fd: (1)-->(3,4), (3,4)~~>(1)
         └── filters [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight), fd=()-->(4)]
              ├── a.s = 'foo' [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
              └── a.f > 100.0 [type=bool, outer=(3), constraints=(/3: [/100.00000000000001 - ]; tight)]
================================================================================
GenerateIndexScans
  Cost: 1080.00
================================================================================
   project
    ├── columns: s:4(string!null) k:1(int!null)
    ├── key: (1)
    ├── fd: ()-->(4)
    └── select
         ├── columns: k:1(int!null) f:3(float!null) s:4(string!null)
         ├── key: (1)
         ├── fd: ()-->(4), (1)-->(3), (3)-->(1)
  -      ├── scan a
  +      ├── scan a@secondary
         │    ├── columns: k:1(int!null) f:3(float) s:4(string)
         │    ├── key: (1)
         │    └── fd: (1)-->(3,4), (3,4)~~>(1)
         └── filters [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight), fd=()-->(4)]
              ├── a.s = 'foo' [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
              └── a.f > 100.0 [type=bool, outer=(3), constraints=(/3: [/100.00000000000001 - ]; tight)]
--------------------------------------------------------------------------------
ConstrainScan (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
ConstrainScan (no changes)
--------------------------------------------------------------------------------
================================================================================
ConstrainScan
  Cost: 1.54
================================================================================
   project
    ├── columns: s:4(string!null) k:1(int!null)
    ├── key: (1)
    ├── fd: ()-->(4)
    └── select
         ├── columns: k:1(int!null) f:3(float!null) s:4(string!null)
         ├── key: (1)
         ├── fd: ()-->(4), (1)-->(3), (3)-->(1)
         ├── scan a@secondary
  -      │    ├── columns: k:1(int!null) f:3(float) s:4(string)
  +      │    ├── columns: k:1(int!null) f:3(float!null) s:4(string!null)
  +      │    ├── constraint: /-4/3: [/'foo'/100.00000000000001 - /'foo']
         │    ├── key: (1)
  -      │    └── fd: (1)-->(3,4), (3,4)~~>(1)
  -      └── filters [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight), fd=()-->(4)]
  -           ├── a.s = 'foo' [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
  -           └── a.f > 100.0 [type=bool, outer=(3), constraints=(/3: [/100.00000000000001 - ]; tight)]
  +      │    └── fd: ()-->(4), (1)-->(3), (3)-->(1)
  +      └── filters [type=bool]
  +           ├── true [type=bool]
  +           └── true [type=bool]
================================================================================
SimplifyFilters
  Cost: 0.51
================================================================================
   project
    ├── columns: s:4(string!null) k:1(int!null)
    ├── key: (1)
    ├── fd: ()-->(4)
  - └── select
  + └── scan a@secondary
         ├── columns: k:1(int!null) f:3(float!null) s:4(string!null)
  +      ├── constraint: /-4/3: [/'foo'/100.00000000000001 - /'foo']
         ├── key: (1)
  -      ├── fd: ()-->(4), (1)-->(3), (3)-->(1)
  -      ├── scan a@secondary
  -      │    ├── columns: k:1(int!null) f:3(float!null) s:4(string!null)
  -      │    ├── constraint: /-4/3: [/'foo'/100.00000000000001 - /'foo']
  -      │    ├── key: (1)
  -      │    └── fd: ()-->(4), (1)-->(3), (3)-->(1)
  -      └── filters [type=bool]
  -           ├── true [type=bool]
  -           └── true [type=bool]
  +      └── fd: ()-->(4), (1)-->(3), (3)-->(1)
--------------------------------------------------------------------------------
ConstrainScan (higher cost)
--------------------------------------------------------------------------------
   project
    ├── columns: s:4(string!null) k:1(int!null)
    ├── key: (1)
    ├── fd: ()-->(4)
  - └── scan a@secondary
  + └── scan a@secondary,rev
         ├── columns: k:1(int!null) f:3(float!null) s:4(string!null)
         ├── constraint: /-4/3: [/'foo'/100.00000000000001 - /'foo']
         ├── key: (1)
         └── fd: ()-->(4), (1)-->(3), (3)-->(1)
================================================================================
Final best expression
  Cost: 0.51
================================================================================
  project
   ├── columns: s:4(string!null) k:1(int!null)
   ├── key: (1)
   ├── fd: ()-->(4)
   └── scan a@secondary
        ├── columns: k:1(int!null) f:3(float!null) s:4(string!null)
        ├── constraint: /-4/3: [/'foo'/100.00000000000001 - /'foo']
        ├── key: (1)
        └── fd: ()-->(4), (1)-->(3), (3)-->(1)

# Decorrelation pattern.
optsteps
SELECT * FROM a WHERE EXISTS(SELECT * FROM xy WHERE y=i)
----
================================================================================
Initial expression
  Cost: 2160.00
================================================================================
  select
   ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
   ├── key: (1)
   ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
   ├── scan a
   │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
   │    ├── key: (1)
   │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
   └── filters [type=bool, outer=(2)]
        └── exists [type=bool, outer=(2)]
             └── select
                  ├── columns: x:6(int!null) y:7(int!null)
                  ├── outer: (2)
                  ├── key: (6)
                  ├── fd: ()-->(7)
                  ├── scan xy
                  │    ├── columns: x:6(int!null) y:7(int)
                  │    ├── key: (6)
                  │    └── fd: (6)-->(7)
                  └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
                       └── xy.y = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
================================================================================
HoistSelectExists
  Cost: 4386.67
================================================================================
   select
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── key: (1)
    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  - ├── scan a
  + ├── semi-join-apply
    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    │    ├── key: (1)
  - │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  - └── filters [type=bool, outer=(2)]
  -      └── exists [type=bool, outer=(2)]
  -           └── select
  -                ├── columns: x:6(int!null) y:7(int!null)
  -                ├── outer: (2)
  -                ├── key: (6)
  -                ├── fd: ()-->(7)
  -                ├── scan xy
  -                │    ├── columns: x:6(int!null) y:7(int)
  -                │    ├── key: (6)
  -                │    └── fd: (6)-->(7)
  -                └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
  -                     └── xy.y = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  + │    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  + │    ├── scan a
  + │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
  + │    │    ├── key: (1)
  + │    │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  + │    ├── select
  + │    │    ├── columns: x:6(int!null) y:7(int!null)
  + │    │    ├── outer: (2)
  + │    │    ├── key: (6)
  + │    │    ├── fd: ()-->(7)
  + │    │    ├── scan xy
  + │    │    │    ├── columns: x:6(int!null) y:7(int)
  + │    │    │    ├── key: (6)
  + │    │    │    └── fd: (6)-->(7)
  + │    │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
  + │    │         └── xy.y = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  + │    └── true [type=bool]
  + └── filters [type=bool]
================================================================================
TryDecorrelateSelect
  Cost: 4170.00
================================================================================
   select
  - ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
  + ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
    ├── key: (1)
    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
    ├── semi-join-apply
  - │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
  + │    ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
    │    ├── key: (1)
    │    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
    │    ├── scan a
    │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    │    │    ├── key: (1)
    │    │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  - │    ├── select
  - │    │    ├── columns: x:6(int!null) y:7(int!null)
  - │    │    ├── outer: (2)
  + │    ├── scan xy
  + │    │    ├── columns: x:6(int!null) y:7(int)
    │    │    ├── key: (6)
  - │    │    ├── fd: ()-->(7)
  - │    │    ├── scan xy
  - │    │    │    ├── columns: x:6(int!null) y:7(int)
  - │    │    │    ├── key: (6)
  - │    │    │    └── fd: (6)-->(7)
  - │    │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
  - │    │         └── xy.y = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  - │    └── true [type=bool]
  + │    │    └── fd: (6)-->(7)
  + │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
  + │         └── xy.y = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
    └── filters [type=bool]
================================================================================
DecorrelateJoin
  Cost: 4170.00
================================================================================
   select
  - ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
  + ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── key: (1)
    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  - ├── semi-join-apply
  - │    ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
  + ├── semi-join
  + │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    │    ├── key: (1)
    │    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
    │    ├── scan a
    │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    │    │    ├── key: (1)
    │    │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
    │    ├── scan xy
    │    │    ├── columns: x:6(int!null) y:7(int)
    │    │    ├── key: (6)
    │    │    └── fd: (6)-->(7)
    │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
    │         └── xy.y = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
    └── filters [type=bool]
================================================================================
EliminateEmptyAnd
  Cost: 4170.00
================================================================================
   select
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── key: (1)
    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
    ├── semi-join
    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    │    ├── key: (1)
    │    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
    │    ├── scan a
    │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    │    │    ├── key: (1)
    │    │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
    │    ├── scan xy
    │    │    ├── columns: x:6(int!null) y:7(int)
    │    │    ├── key: (6)
    │    │    └── fd: (6)-->(7)
    │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
    │         └── xy.y = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  - └── filters [type=bool]
  + └── true [type=bool]
================================================================================
EliminateSelect
  Cost: 3170.00
================================================================================
  -select
  +semi-join
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── key: (1)
    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  - ├── semi-join
  + ├── scan a
    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    │    ├── key: (1)
  - │    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  - │    ├── scan a
  - │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
  - │    │    ├── key: (1)
  - │    │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  - │    ├── scan xy
  - │    │    ├── columns: x:6(int!null) y:7(int)
  - │    │    ├── key: (6)
  - │    │    └── fd: (6)-->(7)
  - │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
  - │         └── xy.y = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  - └── true [type=bool]
  + │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  + ├── scan xy
  + │    ├── columns: x:6(int!null) y:7(int)
  + │    ├── key: (6)
  + │    └── fd: (6)-->(7)
  + └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
  +      └── xy.y = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
--------------------------------------------------------------------------------
GenerateIndexScans (higher cost)
--------------------------------------------------------------------------------
   semi-join
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── key: (1)
    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  - ├── scan a
  + ├── scan a,rev
    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    │    ├── key: (1)
    │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
    ├── scan xy
    │    ├── columns: x:6(int!null) y:7(int)
    │    ├── key: (6)
    │    └── fd: (6)-->(7)
    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
         └── xy.y = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
--------------------------------------------------------------------------------
GenerateIndexScans (higher cost)
--------------------------------------------------------------------------------
   semi-join
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── key: (1)
    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  - ├── scan a,rev
  + ├── scan a
    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    │    ├── key: (1)
    │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
  - ├── scan xy
  + ├── scan xy,rev
    │    ├── columns: x:6(int!null) y:7(int)
    │    ├── key: (6)
    │    └── fd: (6)-->(7)
    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
         └── xy.y = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
--------------------------------------------------------------------------------
GenerateMergeJoins (no changes)
--------------------------------------------------------------------------------
================================================================================
Final best expression
  Cost: 3170.00
================================================================================
  semi-join
   ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
   ├── key: (1)
   ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
   ├── scan a
   │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
   │    ├── key: (1)
   │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
   ├── scan xy
   │    ├── columns: x:6(int!null) y:7(int)
   │    ├── key: (6)
   │    └── fd: (6)-->(7)
   └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
        └── xy.y = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]

# Decorrelation pattern using ANY function.
optsteps
SELECT x=ANY(SELECT k FROM a) AS r FROM xy
----
================================================================================
Initial expression
  Cost: 2140.00
================================================================================
  project
   ├── columns: r:8(bool)
   ├── scan xy
   │    ├── columns: x:1(int!null) y:2(int)
   │    ├── key: (1)
   │    └── fd: (1)-->(2)
   └── projections [outer=(1)]
        └── any: eq [type=bool, outer=(1)]
             ├── project
             │    ├── columns: k:3(int!null)
             │    ├── key: (3)
             │    └── scan a
             │         ├── columns: k:3(int!null) i:4(int) f:5(float) s:6(string) j:7(jsonb)
             │         ├── key: (3)
             │         └── fd: (3)-->(4-7), (5,6)~~>(3,4,7)
             └── variable: xy.x [type=int, outer=(1)]
================================================================================
PruneScanCols
  Cost: 2100.00
================================================================================
   project
    ├── columns: r:8(bool)
    ├── scan xy
    │    ├── columns: x:1(int!null) y:2(int)
    │    ├── key: (1)
    │    └── fd: (1)-->(2)
    └── projections [outer=(1)]
         └── any: eq [type=bool, outer=(1)]
              ├── project
              │    ├── columns: k:3(int!null)
              │    ├── key: (3)
              │    └── scan a
  -           │         ├── columns: k:3(int!null) i:4(int) f:5(float) s:6(string) j:7(jsonb)
  -           │         ├── key: (3)
  -           │         └── fd: (3)-->(4-7), (5,6)~~>(3,4,7)
  +           │         ├── columns: k:3(int!null)
  +           │         └── key: (3)
              └── variable: xy.x [type=int, outer=(1)]
================================================================================
EliminateProject
  Cost: 2100.00
================================================================================
   project
    ├── columns: r:8(bool)
    ├── scan xy
    │    ├── columns: x:1(int!null) y:2(int)
    │    ├── key: (1)
    │    └── fd: (1)-->(2)
    └── projections [outer=(1)]
         └── any: eq [type=bool, outer=(1)]
  -           ├── project
  +           ├── scan a
              │    ├── columns: k:3(int!null)
  -           │    ├── key: (3)
  -           │    └── scan a
  -           │         ├── columns: k:3(int!null)
  -           │         └── key: (3)
  +           │    └── key: (3)
              └── variable: xy.x [type=int, outer=(1)]
================================================================================
PruneScanCols
  Cost: 2090.00
================================================================================
   project
    ├── columns: r:8(bool)
    ├── scan xy
  - │    ├── columns: x:1(int!null) y:2(int)
  - │    ├── key: (1)
  - │    └── fd: (1)-->(2)
  + │    ├── columns: x:1(int!null)
  + │    └── key: (1)
    └── projections [outer=(1)]
         └── any: eq [type=bool, outer=(1)]
              ├── scan a
              │    ├── columns: k:3(int!null)
              │    └── key: (3)
              └── variable: xy.x [type=int, outer=(1)]
================================================================================
HoistProjectSubquery
  Cost: 2122.52
================================================================================
   project
    ├── columns: r:8(bool)
  - ├── scan xy
  - │    ├── columns: x:1(int!null)
  - │    └── key: (1)
  - └── projections [outer=(1)]
  -      └── any: eq [type=bool, outer=(1)]
  -           ├── scan a
  -           │    ├── columns: k:3(int!null)
  -           │    └── key: (3)
  -           └── variable: xy.x [type=int, outer=(1)]
  + ├── inner-join-apply
  + │    ├── columns: x:1(int!null) case:11(bool)
  + │    ├── key: (1)
  + │    ├── fd: (1)-->(11)
  + │    ├── scan xy
  + │    │    ├── columns: x:1(int!null)
  + │    │    └── key: (1)
  + │    ├── project
  + │    │    ├── columns: case:11(bool)
  + │    │    ├── outer: (1)
  + │    │    ├── cardinality: [1 - 1]
  + │    │    ├── key: ()
  + │    │    ├── fd: ()-->(11)
  + │    │    ├── scalar-group-by
  + │    │    │    ├── columns: bool_or:10(bool)
  + │    │    │    ├── outer: (1)
  + │    │    │    ├── cardinality: [1 - 1]
  + │    │    │    ├── key: ()
  + │    │    │    ├── fd: ()-->(10)
  + │    │    │    ├── project
  + │    │    │    │    ├── columns: notnull:9(bool)
  + │    │    │    │    ├── outer: (1)
  + │    │    │    │    ├── select
  + │    │    │    │    │    ├── columns: k:3(int!null)
  + │    │    │    │    │    ├── outer: (1)
  + │    │    │    │    │    ├── key: (3)
  + │    │    │    │    │    ├── scan a
  + │    │    │    │    │    │    ├── columns: k:3(int!null)
  + │    │    │    │    │    │    └── key: (3)
  + │    │    │    │    │    └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
  + │    │    │    │    └── projections [outer=(3)]
  + │    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
  + │    │    │    └── aggregations [outer=(9)]
  + │    │    │         └── bool-or [type=bool, outer=(9)]
  + │    │    │              └── variable: notnull [type=bool, outer=(9)]
  + │    │    └── projections [outer=(1,10)]
  + │    │         └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
  + │    └── true [type=bool]
  + └── projections [outer=(11)]
  +      └── variable: case [type=bool, outer=(11)]
================================================================================
EnsureSelectFilters
  Cost: 2122.52
================================================================================
   project
    ├── columns: r:8(bool)
    ├── inner-join-apply
    │    ├── columns: x:1(int!null) case:11(bool)
    │    ├── key: (1)
    │    ├── fd: (1)-->(11)
    │    ├── scan xy
    │    │    ├── columns: x:1(int!null)
    │    │    └── key: (1)
    │    ├── project
    │    │    ├── columns: case:11(bool)
    │    │    ├── outer: (1)
    │    │    ├── cardinality: [1 - 1]
    │    │    ├── key: ()
    │    │    ├── fd: ()-->(11)
    │    │    ├── scalar-group-by
    │    │    │    ├── columns: bool_or:10(bool)
    │    │    │    ├── outer: (1)
    │    │    │    ├── cardinality: [1 - 1]
    │    │    │    ├── key: ()
    │    │    │    ├── fd: ()-->(10)
    │    │    │    ├── project
    │    │    │    │    ├── columns: notnull:9(bool)
    │    │    │    │    ├── outer: (1)
    │    │    │    │    ├── select
    │    │    │    │    │    ├── columns: k:3(int!null)
    │    │    │    │    │    ├── outer: (1)
    │    │    │    │    │    ├── key: (3)
    │    │    │    │    │    ├── scan a
    │    │    │    │    │    │    ├── columns: k:3(int!null)
    │    │    │    │    │    │    └── key: (3)
  - │    │    │    │    │    └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
  + │    │    │    │    │    └── filters [type=bool, outer=(1,3)]
  + │    │    │    │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
    │    │    │    │    └── projections [outer=(3)]
    │    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
    │    │    │    └── aggregations [outer=(9)]
    │    │    │         └── bool-or [type=bool, outer=(9)]
    │    │    │              └── variable: notnull [type=bool, outer=(9)]
    │    │    └── projections [outer=(1,10)]
    │    │         └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
    │    └── true [type=bool]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11)]
================================================================================
TryDecorrelateProject
  Cost: 2132.52
================================================================================
   project
    ├── columns: r:8(bool)
  - ├── inner-join-apply
  + ├── select
    │    ├── columns: x:1(int!null) case:11(bool)
    │    ├── key: (1)
    │    ├── fd: (1)-->(11)
  - │    ├── scan xy
  - │    │    ├── columns: x:1(int!null)
  - │    │    └── key: (1)
    │    ├── project
  - │    │    ├── columns: case:11(bool)
  - │    │    ├── outer: (1)
  - │    │    ├── cardinality: [1 - 1]
  - │    │    ├── key: ()
  - │    │    ├── fd: ()-->(11)
  - │    │    ├── scalar-group-by
  - │    │    │    ├── columns: bool_or:10(bool)
  - │    │    │    ├── outer: (1)
  - │    │    │    ├── cardinality: [1 - 1]
  - │    │    │    ├── key: ()
  - │    │    │    ├── fd: ()-->(10)
  - │    │    │    ├── project
  - │    │    │    │    ├── columns: notnull:9(bool)
  + │    │    ├── columns: case:11(bool) x:1(int!null)
  + │    │    ├── key: (1)
  + │    │    ├── fd: (1)-->(11)
  + │    │    ├── inner-join-apply
  + │    │    │    ├── columns: x:1(int!null) bool_or:10(bool)
  + │    │    │    ├── key: (1)
  + │    │    │    ├── fd: (1)-->(10)
  + │    │    │    ├── scan xy
  + │    │    │    │    ├── columns: x:1(int!null)
  + │    │    │    │    └── key: (1)
  + │    │    │    ├── scalar-group-by
  + │    │    │    │    ├── columns: bool_or:10(bool)
    │    │    │    │    ├── outer: (1)
  - │    │    │    │    ├── select
  - │    │    │    │    │    ├── columns: k:3(int!null)
  + │    │    │    │    ├── cardinality: [1 - 1]
  + │    │    │    │    ├── key: ()
  + │    │    │    │    ├── fd: ()-->(10)
  + │    │    │    │    ├── project
  + │    │    │    │    │    ├── columns: notnull:9(bool)
    │    │    │    │    │    ├── outer: (1)
  - │    │    │    │    │    ├── key: (3)
  - │    │    │    │    │    ├── scan a
  + │    │    │    │    │    ├── select
    │    │    │    │    │    │    ├── columns: k:3(int!null)
  - │    │    │    │    │    │    └── key: (3)
  - │    │    │    │    │    └── filters [type=bool, outer=(1,3)]
  - │    │    │    │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
  - │    │    │    │    └── projections [outer=(3)]
  - │    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
  - │    │    │    └── aggregations [outer=(9)]
  - │    │    │         └── bool-or [type=bool, outer=(9)]
  - │    │    │              └── variable: notnull [type=bool, outer=(9)]
  + │    │    │    │    │    │    ├── outer: (1)
  + │    │    │    │    │    │    ├── key: (3)
  + │    │    │    │    │    │    ├── scan a
  + │    │    │    │    │    │    │    ├── columns: k:3(int!null)
  + │    │    │    │    │    │    │    └── key: (3)
  + │    │    │    │    │    │    └── filters [type=bool, outer=(1,3)]
  + │    │    │    │    │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
  + │    │    │    │    │    └── projections [outer=(3)]
  + │    │    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
  + │    │    │    │    └── aggregations [outer=(9)]
  + │    │    │    │         └── bool-or [type=bool, outer=(9)]
  + │    │    │    │              └── variable: notnull [type=bool, outer=(9)]
  + │    │    │    └── true [type=bool]
    │    │    └── projections [outer=(1,10)]
    │    │         └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
    │    └── true [type=bool]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11)]
================================================================================
TryDecorrelateScalarGroupBy
  Cost: 5465.00
================================================================================
   project
    ├── columns: r:8(bool)
    ├── select
    │    ├── columns: x:1(int!null) case:11(bool)
    │    ├── key: (1)
    │    ├── fd: (1)-->(11)
    │    ├── project
    │    │    ├── columns: case:11(bool) x:1(int!null)
    │    │    ├── key: (1)
    │    │    ├── fd: (1)-->(11)
  - │    │    ├── inner-join-apply
  + │    │    ├── select
    │    │    │    ├── columns: x:1(int!null) bool_or:10(bool)
    │    │    │    ├── key: (1)
    │    │    │    ├── fd: (1)-->(10)
  - │    │    │    ├── scan xy
  - │    │    │    │    ├── columns: x:1(int!null)
  - │    │    │    │    └── key: (1)
  - │    │    │    ├── scalar-group-by
  - │    │    │    │    ├── columns: bool_or:10(bool)
  - │    │    │    │    ├── outer: (1)
  - │    │    │    │    ├── cardinality: [1 - 1]
  - │    │    │    │    ├── key: ()
  - │    │    │    │    ├── fd: ()-->(10)
  - │    │    │    │    ├── project
  - │    │    │    │    │    ├── columns: notnull:9(bool)
  - │    │    │    │    │    ├── outer: (1)
  - │    │    │    │    │    ├── select
  - │    │    │    │    │    │    ├── columns: k:3(int!null)
  + │    │    │    ├── group-by
  + │    │    │    │    ├── columns: x:1(int!null) bool_or:10(bool)
  + │    │    │    │    ├── grouping columns: x:1(int!null)
  + │    │    │    │    ├── key: (1)
  + │    │    │    │    ├── fd: (1)-->(10)
  + │    │    │    │    ├── left-join-apply
  + │    │    │    │    │    ├── columns: x:1(int!null) notnull:9(bool)
  + │    │    │    │    │    ├── scan xy
  + │    │    │    │    │    │    ├── columns: x:1(int!null)
  + │    │    │    │    │    │    └── key: (1)
  + │    │    │    │    │    ├── project
  + │    │    │    │    │    │    ├── columns: notnull:9(bool)
    │    │    │    │    │    │    ├── outer: (1)
  - │    │    │    │    │    │    ├── key: (3)
  - │    │    │    │    │    │    ├── scan a
  + │    │    │    │    │    │    ├── select
    │    │    │    │    │    │    │    ├── columns: k:3(int!null)
  - │    │    │    │    │    │    │    └── key: (3)
  - │    │    │    │    │    │    └── filters [type=bool, outer=(1,3)]
  - │    │    │    │    │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
  - │    │    │    │    │    └── projections [outer=(3)]
  - │    │    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
  + │    │    │    │    │    │    │    ├── outer: (1)
  + │    │    │    │    │    │    │    ├── key: (3)
  + │    │    │    │    │    │    │    ├── scan a
  + │    │    │    │    │    │    │    │    ├── columns: k:3(int!null)
  + │    │    │    │    │    │    │    │    └── key: (3)
  + │    │    │    │    │    │    │    └── filters [type=bool, outer=(1,3)]
  + │    │    │    │    │    │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
  + │    │    │    │    │    │    └── projections [outer=(3)]
  + │    │    │    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
  + │    │    │    │    │    └── true [type=bool]
    │    │    │    │    └── aggregations [outer=(9)]
    │    │    │    │         └── bool-or [type=bool, outer=(9)]
    │    │    │    │              └── variable: notnull [type=bool, outer=(9)]
    │    │    │    └── true [type=bool]
    │    │    └── projections [outer=(1,10)]
    │    │         └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
    │    └── true [type=bool]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11)]
================================================================================
TryDecorrelateProjectSelect
  Cost: 3133.33
================================================================================
   project
    ├── columns: r:8(bool)
    ├── select
    │    ├── columns: x:1(int!null) case:11(bool)
    │    ├── key: (1)
    │    ├── fd: (1)-->(11)
    │    ├── project
    │    │    ├── columns: case:11(bool) x:1(int!null)
    │    │    ├── key: (1)
    │    │    ├── fd: (1)-->(11)
    │    │    ├── select
    │    │    │    ├── columns: x:1(int!null) bool_or:10(bool)
    │    │    │    ├── key: (1)
    │    │    │    ├── fd: (1)-->(10)
    │    │    │    ├── group-by
    │    │    │    │    ├── columns: x:1(int!null) bool_or:10(bool)
    │    │    │    │    ├── grouping columns: x:1(int!null)
    │    │    │    │    ├── key: (1)
    │    │    │    │    ├── fd: (1)-->(10)
  - │    │    │    │    ├── left-join-apply
  + │    │    │    │    ├── project
    │    │    │    │    │    ├── columns: x:1(int!null) notnull:9(bool)
  - │    │    │    │    │    ├── scan xy
  - │    │    │    │    │    │    ├── columns: x:1(int!null)
  - │    │    │    │    │    │    └── key: (1)
  - │    │    │    │    │    ├── project
  - │    │    │    │    │    │    ├── columns: notnull:9(bool)
  - │    │    │    │    │    │    ├── outer: (1)
  - │    │    │    │    │    │    ├── select
  - │    │    │    │    │    │    │    ├── columns: k:3(int!null)
  - │    │    │    │    │    │    │    ├── outer: (1)
  - │    │    │    │    │    │    │    ├── key: (3)
  - │    │    │    │    │    │    │    ├── scan a
  - │    │    │    │    │    │    │    │    ├── columns: k:3(int!null)
  - │    │    │    │    │    │    │    │    └── key: (3)
  - │    │    │    │    │    │    │    └── filters [type=bool, outer=(1,3)]
  - │    │    │    │    │    │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
  - │    │    │    │    │    │    └── projections [outer=(3)]
  - │    │    │    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
  - │    │    │    │    │    └── true [type=bool]
  + │    │    │    │    │    └── left-join-apply
  + │    │    │    │    │         ├── columns: x:1(int!null) k:3(int) notnull:9(bool)
  + │    │    │    │    │         ├── key: (1,3)
  + │    │    │    │    │         ├── fd: (1,3)-->(9)
  + │    │    │    │    │         ├── scan xy
  + │    │    │    │    │         │    ├── columns: x:1(int!null)
  + │    │    │    │    │         │    └── key: (1)
  + │    │    │    │    │         ├── project
  + │    │    │    │    │         │    ├── columns: notnull:9(bool) k:3(int!null)
  + │    │    │    │    │         │    ├── key: (3)
  + │    │    │    │    │         │    ├── fd: (3)-->(9)
  + │    │    │    │    │         │    ├── scan a
  + │    │    │    │    │         │    │    ├── columns: k:3(int!null)
  + │    │    │    │    │         │    │    └── key: (3)
  + │    │    │    │    │         │    └── projections [outer=(3)]
  + │    │    │    │    │         │         └── a.k IS NOT NULL [type=bool, outer=(3)]
  + │    │    │    │    │         └── filters [type=bool, outer=(1,3)]
  + │    │    │    │    │              └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
    │    │    │    │    └── aggregations [outer=(9)]
    │    │    │    │         └── bool-or [type=bool, outer=(9)]
    │    │    │    │              └── variable: notnull [type=bool, outer=(9)]
    │    │    │    └── true [type=bool]
    │    │    └── projections [outer=(1,10)]
    │    │         └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
    │    └── true [type=bool]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11)]
================================================================================
DecorrelateJoin
  Cost: 3133.33
================================================================================
   project
    ├── columns: r:8(bool)
    ├── select
    │    ├── columns: x:1(int!null) case:11(bool)
    │    ├── key: (1)
    │    ├── fd: (1)-->(11)
    │    ├── project
    │    │    ├── columns: case:11(bool) x:1(int!null)
    │    │    ├── key: (1)
    │    │    ├── fd: (1)-->(11)
    │    │    ├── select
    │    │    │    ├── columns: x:1(int!null) bool_or:10(bool)
    │    │    │    ├── key: (1)
    │    │    │    ├── fd: (1)-->(10)
    │    │    │    ├── group-by
    │    │    │    │    ├── columns: x:1(int!null) bool_or:10(bool)
    │    │    │    │    ├── grouping columns: x:1(int!null)
    │    │    │    │    ├── key: (1)
    │    │    │    │    ├── fd: (1)-->(10)
    │    │    │    │    ├── project
    │    │    │    │    │    ├── columns: x:1(int!null) notnull:9(bool)
  - │    │    │    │    │    └── left-join-apply
  + │    │    │    │    │    └── left-join
    │    │    │    │    │         ├── columns: x:1(int!null) k:3(int) notnull:9(bool)
    │    │    │    │    │         ├── key: (1,3)
  - │    │    │    │    │         ├── fd: (1,3)-->(9)
  + │    │    │    │    │         ├── fd: (3)-->(9)
    │    │    │    │    │         ├── scan xy
    │    │    │    │    │         │    ├── columns: x:1(int!null)
    │    │    │    │    │         │    └── key: (1)
    │    │    │    │    │         ├── project
    │    │    │    │    │         │    ├── columns: notnull:9(bool) k:3(int!null)
    │    │    │    │    │         │    ├── key: (3)
    │    │    │    │    │         │    ├── fd: (3)-->(9)
    │    │    │    │    │         │    ├── scan a
    │    │    │    │    │         │    │    ├── columns: k:3(int!null)
    │    │    │    │    │         │    │    └── key: (3)
    │    │    │    │    │         │    └── projections [outer=(3)]
    │    │    │    │    │         │         └── a.k IS NOT NULL [type=bool, outer=(3)]
    │    │    │    │    │         └── filters [type=bool, outer=(1,3)]
    │    │    │    │    │              └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
    │    │    │    │    └── aggregations [outer=(9)]
    │    │    │    │         └── bool-or [type=bool, outer=(9)]
    │    │    │    │              └── variable: notnull [type=bool, outer=(9)]
    │    │    │    └── true [type=bool]
    │    │    └── projections [outer=(1,10)]
    │    │         └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
    │    └── true [type=bool]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11)]
================================================================================
EliminateGroupByProject
  Cost: 3133.33
================================================================================
   project
    ├── columns: r:8(bool)
    ├── select
    │    ├── columns: x:1(int!null) case:11(bool)
    │    ├── key: (1)
    │    ├── fd: (1)-->(11)
    │    ├── project
    │    │    ├── columns: case:11(bool) x:1(int!null)
    │    │    ├── key: (1)
    │    │    ├── fd: (1)-->(11)
    │    │    ├── select
    │    │    │    ├── columns: x:1(int!null) bool_or:10(bool)
    │    │    │    ├── key: (1)
    │    │    │    ├── fd: (1)-->(10)
    │    │    │    ├── group-by
    │    │    │    │    ├── columns: x:1(int!null) bool_or:10(bool)
    │    │    │    │    ├── grouping columns: x:1(int!null)
    │    │    │    │    ├── key: (1)
    │    │    │    │    ├── fd: (1)-->(10)
  - │    │    │    │    ├── project
  - │    │    │    │    │    ├── columns: x:1(int!null) notnull:9(bool)
  - │    │    │    │    │    └── left-join
  - │    │    │    │    │         ├── columns: x:1(int!null) k:3(int) notnull:9(bool)
  - │    │    │    │    │         ├── key: (1,3)
  - │    │    │    │    │         ├── fd: (3)-->(9)
  - │    │    │    │    │         ├── scan xy
  - │    │    │    │    │         │    ├── columns: x:1(int!null)
  - │    │    │    │    │         │    └── key: (1)
  - │    │    │    │    │         ├── project
  - │    │    │    │    │         │    ├── columns: notnull:9(bool) k:3(int!null)
  - │    │    │    │    │         │    ├── key: (3)
  - │    │    │    │    │         │    ├── fd: (3)-->(9)
  - │    │    │    │    │         │    ├── scan a
  - │    │    │    │    │         │    │    ├── columns: k:3(int!null)
  - │    │    │    │    │         │    │    └── key: (3)
  - │    │    │    │    │         │    └── projections [outer=(3)]
  - │    │    │    │    │         │         └── a.k IS NOT NULL [type=bool, outer=(3)]
  - │    │    │    │    │         └── filters [type=bool, outer=(1,3)]
  - │    │    │    │    │              └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
  + │    │    │    │    ├── left-join
  + │    │    │    │    │    ├── columns: x:1(int!null) k:3(int) notnull:9(bool)
  + │    │    │    │    │    ├── key: (1,3)
  + │    │    │    │    │    ├── fd: (3)-->(9)
  + │    │    │    │    │    ├── scan xy
  + │    │    │    │    │    │    ├── columns: x:1(int!null)
  + │    │    │    │    │    │    └── key: (1)
  + │    │    │    │    │    ├── project
  + │    │    │    │    │    │    ├── columns: notnull:9(bool) k:3(int!null)
  + │    │    │    │    │    │    ├── key: (3)
  + │    │    │    │    │    │    ├── fd: (3)-->(9)
  + │    │    │    │    │    │    ├── scan a
  + │    │    │    │    │    │    │    ├── columns: k:3(int!null)
  + │    │    │    │    │    │    │    └── key: (3)
  + │    │    │    │    │    │    └── projections [outer=(3)]
  + │    │    │    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
  + │    │    │    │    │    └── filters [type=bool, outer=(1,3)]
  + │    │    │    │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
    │    │    │    │    └── aggregations [outer=(9)]
    │    │    │    │         └── bool-or [type=bool, outer=(9)]
    │    │    │    │              └── variable: notnull [type=bool, outer=(9)]
    │    │    │    └── true [type=bool]
    │    │    └── projections [outer=(1,10)]
    │    │         └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
    │    └── true [type=bool]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11)]
================================================================================
EliminateSelect
  Cost: 3130.00
================================================================================
   project
    ├── columns: r:8(bool)
    ├── select
    │    ├── columns: x:1(int!null) case:11(bool)
    │    ├── key: (1)
    │    ├── fd: (1)-->(11)
    │    ├── project
    │    │    ├── columns: case:11(bool) x:1(int!null)
    │    │    ├── key: (1)
    │    │    ├── fd: (1)-->(11)
  - │    │    ├── select
  + │    │    ├── group-by
    │    │    │    ├── columns: x:1(int!null) bool_or:10(bool)
  + │    │    │    ├── grouping columns: x:1(int!null)
    │    │    │    ├── key: (1)
    │    │    │    ├── fd: (1)-->(10)
  - │    │    │    ├── group-by
  - │    │    │    │    ├── columns: x:1(int!null) bool_or:10(bool)
  - │    │    │    │    ├── grouping columns: x:1(int!null)
  - │    │    │    │    ├── key: (1)
  - │    │    │    │    ├── fd: (1)-->(10)
  - │    │    │    │    ├── left-join
  - │    │    │    │    │    ├── columns: x:1(int!null) k:3(int) notnull:9(bool)
  - │    │    │    │    │    ├── key: (1,3)
  + │    │    │    ├── left-join
  + │    │    │    │    ├── columns: x:1(int!null) k:3(int) notnull:9(bool)
  + │    │    │    │    ├── key: (1,3)
  + │    │    │    │    ├── fd: (3)-->(9)
  + │    │    │    │    ├── scan xy
  + │    │    │    │    │    ├── columns: x:1(int!null)
  + │    │    │    │    │    └── key: (1)
  + │    │    │    │    ├── project
  + │    │    │    │    │    ├── columns: notnull:9(bool) k:3(int!null)
  + │    │    │    │    │    ├── key: (3)
    │    │    │    │    │    ├── fd: (3)-->(9)
  - │    │    │    │    │    ├── scan xy
  - │    │    │    │    │    │    ├── columns: x:1(int!null)
  - │    │    │    │    │    │    └── key: (1)
  - │    │    │    │    │    ├── project
  - │    │    │    │    │    │    ├── columns: notnull:9(bool) k:3(int!null)
  - │    │    │    │    │    │    ├── key: (3)
  - │    │    │    │    │    │    ├── fd: (3)-->(9)
  - │    │    │    │    │    │    ├── scan a
  - │    │    │    │    │    │    │    ├── columns: k:3(int!null)
  - │    │    │    │    │    │    │    └── key: (3)
  - │    │    │    │    │    │    └── projections [outer=(3)]
  - │    │    │    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
  - │    │    │    │    │    └── filters [type=bool, outer=(1,3)]
  - │    │    │    │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
  - │    │    │    │    └── aggregations [outer=(9)]
  - │    │    │    │         └── bool-or [type=bool, outer=(9)]
  - │    │    │    │              └── variable: notnull [type=bool, outer=(9)]
  - │    │    │    └── true [type=bool]
  + │    │    │    │    │    ├── scan a
  + │    │    │    │    │    │    ├── columns: k:3(int!null)
  + │    │    │    │    │    │    └── key: (3)
  + │    │    │    │    │    └── projections [outer=(3)]
  + │    │    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
  + │    │    │    │    └── filters [type=bool, outer=(1,3)]
  + │    │    │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
  + │    │    │    └── aggregations [outer=(9)]
  + │    │    │         └── bool-or [type=bool, outer=(9)]
  + │    │    │              └── variable: notnull [type=bool, outer=(9)]
    │    │    └── projections [outer=(1,10)]
    │    │         └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
    │    └── true [type=bool]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11)]
================================================================================
EliminateSelect
  Cost: 3120.00
================================================================================
   project
    ├── columns: r:8(bool)
  - ├── select
  - │    ├── columns: x:1(int!null) case:11(bool)
  + ├── project
  + │    ├── columns: case:11(bool) x:1(int!null)
    │    ├── key: (1)
    │    ├── fd: (1)-->(11)
  - │    ├── project
  - │    │    ├── columns: case:11(bool) x:1(int!null)
  + │    ├── group-by
  + │    │    ├── columns: x:1(int!null) bool_or:10(bool)
  + │    │    ├── grouping columns: x:1(int!null)
    │    │    ├── key: (1)
  - │    │    ├── fd: (1)-->(11)
  - │    │    ├── group-by
  - │    │    │    ├── columns: x:1(int!null) bool_or:10(bool)
  - │    │    │    ├── grouping columns: x:1(int!null)
  - │    │    │    ├── key: (1)
  - │    │    │    ├── fd: (1)-->(10)
  - │    │    │    ├── left-join
  - │    │    │    │    ├── columns: x:1(int!null) k:3(int) notnull:9(bool)
  - │    │    │    │    ├── key: (1,3)
  + │    │    ├── fd: (1)-->(10)
  + │    │    ├── left-join
  + │    │    │    ├── columns: x:1(int!null) k:3(int) notnull:9(bool)
  + │    │    │    ├── key: (1,3)
  + │    │    │    ├── fd: (3)-->(9)
  + │    │    │    ├── scan xy
  + │    │    │    │    ├── columns: x:1(int!null)
  + │    │    │    │    └── key: (1)
  + │    │    │    ├── project
  + │    │    │    │    ├── columns: notnull:9(bool) k:3(int!null)
  + │    │    │    │    ├── key: (3)
    │    │    │    │    ├── fd: (3)-->(9)
  - │    │    │    │    ├── scan xy
  - │    │    │    │    │    ├── columns: x:1(int!null)
  - │    │    │    │    │    └── key: (1)
  - │    │    │    │    ├── project
  - │    │    │    │    │    ├── columns: notnull:9(bool) k:3(int!null)
  - │    │    │    │    │    ├── key: (3)
  - │    │    │    │    │    ├── fd: (3)-->(9)
  - │    │    │    │    │    ├── scan a
  - │    │    │    │    │    │    ├── columns: k:3(int!null)
  - │    │    │    │    │    │    └── key: (3)
  - │    │    │    │    │    └── projections [outer=(3)]
  - │    │    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
  - │    │    │    │    └── filters [type=bool, outer=(1,3)]
  - │    │    │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
  - │    │    │    └── aggregations [outer=(9)]
  - │    │    │         └── bool-or [type=bool, outer=(9)]
  - │    │    │              └── variable: notnull [type=bool, outer=(9)]
  - │    │    └── projections [outer=(1,10)]
  - │    │         └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
  - │    └── true [type=bool]
  + │    │    │    │    ├── scan a
  + │    │    │    │    │    ├── columns: k:3(int!null)
  + │    │    │    │    │    └── key: (3)
  + │    │    │    │    └── projections [outer=(3)]
  + │    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
  + │    │    │    └── filters [type=bool, outer=(1,3)]
  + │    │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
  + │    │    └── aggregations [outer=(9)]
  + │    │         └── bool-or [type=bool, outer=(9)]
  + │    │              └── variable: notnull [type=bool, outer=(9)]
  + │    └── projections [outer=(1,10)]
  + │         └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11)]
================================================================================
PruneProjectCols
  Cost: 3120.00
================================================================================
   project
    ├── columns: r:8(bool)
    ├── project
  - │    ├── columns: case:11(bool) x:1(int!null)
  - │    ├── key: (1)
  - │    ├── fd: (1)-->(11)
  + │    ├── columns: case:11(bool)
    │    ├── group-by
    │    │    ├── columns: x:1(int!null) bool_or:10(bool)
    │    │    ├── grouping columns: x:1(int!null)
    │    │    ├── key: (1)
    │    │    ├── fd: (1)-->(10)
    │    │    ├── left-join
    │    │    │    ├── columns: x:1(int!null) k:3(int) notnull:9(bool)
    │    │    │    ├── key: (1,3)
    │    │    │    ├── fd: (3)-->(9)
    │    │    │    ├── scan xy
    │    │    │    │    ├── columns: x:1(int!null)
    │    │    │    │    └── key: (1)
    │    │    │    ├── project
    │    │    │    │    ├── columns: notnull:9(bool) k:3(int!null)
    │    │    │    │    ├── key: (3)
    │    │    │    │    ├── fd: (3)-->(9)
    │    │    │    │    ├── scan a
    │    │    │    │    │    ├── columns: k:3(int!null)
    │    │    │    │    │    └── key: (3)
    │    │    │    │    └── projections [outer=(3)]
    │    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
    │    │    │    └── filters [type=bool, outer=(1,3)]
    │    │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
    │    │    └── aggregations [outer=(9)]
    │    │         └── bool-or [type=bool, outer=(9)]
    │    │              └── variable: notnull [type=bool, outer=(9)]
    │    └── projections [outer=(1,10)]
    │         └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11)]
================================================================================
InlineProjectInProject
  Cost: 3120.00
================================================================================
   project
    ├── columns: r:8(bool)
  - ├── project
  - │    ├── columns: case:11(bool)
  - │    ├── group-by
  - │    │    ├── columns: x:1(int!null) bool_or:10(bool)
  - │    │    ├── grouping columns: x:1(int!null)
  - │    │    ├── key: (1)
  - │    │    ├── fd: (1)-->(10)
  - │    │    ├── left-join
  - │    │    │    ├── columns: x:1(int!null) k:3(int) notnull:9(bool)
  - │    │    │    ├── key: (1,3)
  + ├── group-by
  + │    ├── columns: x:1(int!null) bool_or:10(bool)
  + │    ├── grouping columns: x:1(int!null)
  + │    ├── key: (1)
  + │    ├── fd: (1)-->(10)
  + │    ├── left-join
  + │    │    ├── columns: x:1(int!null) k:3(int) notnull:9(bool)
  + │    │    ├── key: (1,3)
  + │    │    ├── fd: (3)-->(9)
  + │    │    ├── scan xy
  + │    │    │    ├── columns: x:1(int!null)
  + │    │    │    └── key: (1)
  + │    │    ├── project
  + │    │    │    ├── columns: notnull:9(bool) k:3(int!null)
  + │    │    │    ├── key: (3)
    │    │    │    ├── fd: (3)-->(9)
  - │    │    │    ├── scan xy
  - │    │    │    │    ├── columns: x:1(int!null)
  - │    │    │    │    └── key: (1)
  - │    │    │    ├── project
  - │    │    │    │    ├── columns: notnull:9(bool) k:3(int!null)
  - │    │    │    │    ├── key: (3)
  - │    │    │    │    ├── fd: (3)-->(9)
  - │    │    │    │    ├── scan a
  - │    │    │    │    │    ├── columns: k:3(int!null)
  - │    │    │    │    │    └── key: (3)
  - │    │    │    │    └── projections [outer=(3)]
  - │    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
  - │    │    │    └── filters [type=bool, outer=(1,3)]
  - │    │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
  - │    │    └── aggregations [outer=(9)]
  - │    │         └── bool-or [type=bool, outer=(9)]
  - │    │              └── variable: notnull [type=bool, outer=(9)]
  - │    └── projections [outer=(1,10)]
  - │         └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
  - └── projections [outer=(11)]
  -      └── variable: case [type=bool, outer=(11)]
  + │    │    │    ├── scan a
  + │    │    │    │    ├── columns: k:3(int!null)
  + │    │    │    │    └── key: (3)
  + │    │    │    └── projections [outer=(3)]
  + │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
  + │    │    └── filters [type=bool, outer=(1,3)]
  + │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
  + │    └── aggregations [outer=(9)]
  + │         └── bool-or [type=bool, outer=(9)]
  + │              └── variable: notnull [type=bool, outer=(9)]
  + └── projections [outer=(1,10)]
  +      └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
--------------------------------------------------------------------------------
GenerateIndexScans (higher cost)
--------------------------------------------------------------------------------
   project
    ├── columns: r:8(bool)
    ├── group-by
    │    ├── columns: x:1(int!null) bool_or:10(bool)
    │    ├── grouping columns: x:1(int!null)
    │    ├── key: (1)
    │    ├── fd: (1)-->(10)
    │    ├── left-join
    │    │    ├── columns: x:1(int!null) k:3(int) notnull:9(bool)
    │    │    ├── key: (1,3)
    │    │    ├── fd: (3)-->(9)
  - │    │    ├── scan xy
  + │    │    ├── scan xy,rev
    │    │    │    ├── columns: x:1(int!null)
    │    │    │    └── key: (1)
    │    │    ├── project
    │    │    │    ├── columns: notnull:9(bool) k:3(int!null)
    │    │    │    ├── key: (3)
    │    │    │    ├── fd: (3)-->(9)
    │    │    │    ├── scan a
    │    │    │    │    ├── columns: k:3(int!null)
    │    │    │    │    └── key: (3)
    │    │    │    └── projections [outer=(3)]
    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
    │    │    └── filters [type=bool, outer=(1,3)]
    │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
    │    └── aggregations [outer=(9)]
    │         └── bool-or [type=bool, outer=(9)]
    │              └── variable: notnull [type=bool, outer=(9)]
    └── projections [outer=(1,10)]
         └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
================================================================================
GenerateIndexScans
  Cost: 3110.00
================================================================================
   project
    ├── columns: r:8(bool)
    ├── group-by
    │    ├── columns: x:1(int!null) bool_or:10(bool)
    │    ├── grouping columns: x:1(int!null)
    │    ├── key: (1)
    │    ├── fd: (1)-->(10)
    │    ├── left-join
    │    │    ├── columns: x:1(int!null) k:3(int) notnull:9(bool)
    │    │    ├── key: (1,3)
    │    │    ├── fd: (3)-->(9)
    │    │    ├── scan xy
    │    │    │    ├── columns: x:1(int!null)
    │    │    │    └── key: (1)
    │    │    ├── project
    │    │    │    ├── columns: notnull:9(bool) k:3(int!null)
    │    │    │    ├── key: (3)
    │    │    │    ├── fd: (3)-->(9)
  - │    │    │    ├── scan a
  + │    │    │    ├── scan a@secondary
    │    │    │    │    ├── columns: k:3(int!null)
    │    │    │    │    └── key: (3)
    │    │    │    └── projections [outer=(3)]
    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
    │    │    └── filters [type=bool, outer=(1,3)]
    │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
    │    └── aggregations [outer=(9)]
    │         └── bool-or [type=bool, outer=(9)]
    │              └── variable: notnull [type=bool, outer=(9)]
    └── projections [outer=(1,10)]
         └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
--------------------------------------------------------------------------------
CommuteLeftJoin (higher cost)
--------------------------------------------------------------------------------
   project
    ├── columns: r:8(bool)
    ├── group-by
    │    ├── columns: x:1(int!null) bool_or:10(bool)
    │    ├── grouping columns: x:1(int!null)
    │    ├── key: (1)
    │    ├── fd: (1)-->(10)
  - │    ├── left-join
  + │    ├── right-join
    │    │    ├── columns: x:1(int!null) k:3(int) notnull:9(bool)
    │    │    ├── key: (1,3)
    │    │    ├── fd: (3)-->(9)
  - │    │    ├── scan xy
  - │    │    │    ├── columns: x:1(int!null)
  - │    │    │    └── key: (1)
    │    │    ├── project
    │    │    │    ├── columns: notnull:9(bool) k:3(int!null)
    │    │    │    ├── key: (3)
    │    │    │    ├── fd: (3)-->(9)
    │    │    │    ├── scan a@secondary
    │    │    │    │    ├── columns: k:3(int!null)
    │    │    │    │    └── key: (3)
    │    │    │    └── projections [outer=(3)]
    │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
  + │    │    ├── scan xy
  + │    │    │    ├── columns: x:1(int!null)
  + │    │    │    └── key: (1)
    │    │    └── filters [type=bool, outer=(1,3)]
    │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
    │    └── aggregations [outer=(9)]
    │         └── bool-or [type=bool, outer=(9)]
    │              └── variable: notnull [type=bool, outer=(9)]
    └── projections [outer=(1,10)]
         └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
--------------------------------------------------------------------------------
GenerateMergeJoins (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
CommuteRightJoin (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
GenerateMergeJoins (no changes)
--------------------------------------------------------------------------------
================================================================================
Final best expression
  Cost: 3110.00
================================================================================
  project
   ├── columns: r:8(bool)
   ├── group-by
   │    ├── columns: x:1(int!null) bool_or:10(bool)
   │    ├── grouping columns: x:1(int!null)
   │    ├── key: (1)
   │    ├── fd: (1)-->(10)
   │    ├── left-join
   │    │    ├── columns: x:1(int!null) k:3(int) notnull:9(bool)
   │    │    ├── key: (1,3)
   │    │    ├── fd: (3)-->(9)
   │    │    ├── scan xy
   │    │    │    ├── columns: x:1(int!null)
   │    │    │    └── key: (1)
   │    │    ├── project
   │    │    │    ├── columns: notnull:9(bool) k:3(int!null)
   │    │    │    ├── key: (3)
   │    │    │    ├── fd: (3)-->(9)
   │    │    │    ├── scan a@secondary
   │    │    │    │    ├── columns: k:3(int!null)
   │    │    │    │    └── key: (3)
   │    │    │    └── projections [outer=(3)]
   │    │    │         └── a.k IS NOT NULL [type=bool, outer=(3)]
   │    │    └── filters [type=bool, outer=(1,3)]
   │    │         └── (xy.x = a.k) IS NOT false [type=bool, outer=(1,3)]
   │    └── aggregations [outer=(9)]
   │         └── bool-or [type=bool, outer=(9)]
   │              └── variable: notnull [type=bool, outer=(9)]
   └── projections [outer=(1,10)]
        └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(1,10)]
