exec-ddl
CREATE TABLE a (
    k INT PRIMARY KEY,
    i INT,
    f FLOAT,
    s STRING,
    j JSON,
    UNIQUE INDEX (s DESC, f) STORING (j)
)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 ├── INDEX primary
 │    └── k int not null
 └── INDEX secondary
      ├── s string desc
      ├── f float
      ├── k int not null (storing)
      └── j jsonb (storing)

exec-ddl
CREATE TABLE t.xy (x INT PRIMARY KEY, y INT)
----
TABLE xy
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

# --------------------------------------------------
# Use optsteps.
# --------------------------------------------------
optsteps
SELECT s FROM a INNER JOIN xy ON a.k=xy.x AND i+1=10
----
================================================================================
Initial expression
  Cost: 2020.00
================================================================================
  project
   ├── columns: s:4(string)
   └── inner-join
        ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int!null) xy.y:7(int)
        ├── scan a
        │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
        │    └── keys: (1) weak(3,4)
        ├── scan xy
        │    ├── columns: xy.x:6(int!null) xy.y:7(int)
        │    └── keys: (6)
        └── and [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
             ├── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
             │    ├── variable: a.k [type=int, outer=(1)]
             │    └── variable: xy.x [type=int, outer=(6)]
             └── eq [type=bool, outer=(2)]
                  ├── plus [type=int, outer=(2)]
                  │    ├── variable: a.i [type=int, outer=(2)]
                  │    └── const: 1 [type=int]
                  └── const: 10 [type=int]
================================================================================
NormalizeCmpPlusConst
  Cost: 2020.00
================================================================================
   project
    ├── columns: s:4(string)
    └── inner-join
         ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int!null) xy.y:7(int)
         ├── scan a
         │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
         │    └── keys: (1) weak(3,4)
         ├── scan xy
         │    ├── columns: xy.x:6(int!null) xy.y:7(int)
         │    └── keys: (6)
  -      └── and [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
  +      └── and [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /6: (/NULL - ])]
              ├── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
              │    ├── variable: a.k [type=int, outer=(1)]
              │    └── variable: xy.x [type=int, outer=(6)]
  -           └── eq [type=bool, outer=(2)]
  -                ├── plus [type=int, outer=(2)]
  -                │    ├── variable: a.i [type=int, outer=(2)]
  -                │    └── const: 1 [type=int]
  -                └── const: 10 [type=int]
  +           └── eq [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  +                ├── variable: a.i [type=int, outer=(2)]
  +                └── minus [type=int]
  +                     ├── const: 10 [type=int]
  +                     └── const: 1 [type=int]
================================================================================
EnsureJoinFiltersAnd
  Cost: 2020.00
================================================================================
   project
    ├── columns: s:4(string)
    └── inner-join
         ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int!null) xy.y:7(int)
         ├── scan a
         │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
         │    └── keys: (1) weak(3,4)
         ├── scan xy
         │    ├── columns: xy.x:6(int!null) xy.y:7(int)
         │    └── keys: (6)
  -      └── and [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /6: (/NULL - ])]
  +      └── filters [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /6: (/NULL - ])]
              ├── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
              │    ├── variable: a.k [type=int, outer=(1)]
              │    └── variable: xy.x [type=int, outer=(6)]
              └── eq [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
                   ├── variable: a.i [type=int, outer=(2)]
                   └── minus [type=int]
                        ├── const: 10 [type=int]
                        └── const: 1 [type=int]
================================================================================
PushFilterIntoJoinLeft
  Cost: 2023.33
================================================================================
   project
    ├── columns: s:4(string)
    └── inner-join
  -      ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int!null) xy.y:7(int)
  -      ├── scan a
  -      │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  -      │    └── keys: (1) weak(3,4)
  +      ├── columns: a.k:1(int!null) a.i:2(int!null) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int!null) xy.y:7(int)
  +      ├── select
  +      │    ├── columns: a.k:1(int!null) a.i:2(int!null) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  +      │    ├── keys: (1) weak(3,4)
  +      │    ├── scan a
  +      │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  +      │    │    └── keys: (1) weak(3,4)
  +      │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  +      │         └── eq [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  +      │              ├── variable: a.i [type=int, outer=(2)]
  +      │              └── minus [type=int]
  +      │                   ├── const: 10 [type=int]
  +      │                   └── const: 1 [type=int]
         ├── scan xy
         │    ├── columns: xy.x:6(int!null) xy.y:7(int)
         │    └── keys: (6)
  -      └── filters [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /6: (/NULL - ])]
  -           ├── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
  -           │    ├── variable: a.k [type=int, outer=(1)]
  -           │    └── variable: xy.x [type=int, outer=(6)]
  -           └── eq [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  -                ├── variable: a.i [type=int, outer=(2)]
  -                └── minus [type=int]
  -                     ├── const: 10 [type=int]
  -                     └── const: 1 [type=int]
  +      └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
  +           └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
  +                ├── variable: a.k [type=int, outer=(1)]
  +                └── variable: xy.x [type=int, outer=(6)]
================================================================================
PruneJoinLeftCols
  Cost: 2023.33
================================================================================
   project
    ├── columns: s:4(string)
    └── inner-join
  -      ├── columns: a.k:1(int!null) a.i:2(int!null) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int!null) xy.y:7(int)
  -      ├── select
  -      │    ├── columns: a.k:1(int!null) a.i:2(int!null) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  -      │    ├── keys: (1) weak(3,4)
  -      │    ├── scan a
  -      │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  -      │    │    └── keys: (1) weak(3,4)
  -      │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  -      │         └── eq [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  -      │              ├── variable: a.i [type=int, outer=(2)]
  -      │              └── minus [type=int]
  -      │                   ├── const: 10 [type=int]
  -      │                   └── const: 1 [type=int]
  +      ├── columns: a.k:1(int!null) a.i:2(int!null) a.s:4(string) xy.x:6(int!null) xy.y:7(int)
  +      ├── project
  +      │    ├── columns: a.k:1(int!null) a.i:2(int!null) a.s:4(string)
  +      │    ├── keys: (1)
  +      │    └── select
  +      │         ├── columns: a.k:1(int!null) a.i:2(int!null) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  +      │         ├── keys: (1) weak(3,4)
  +      │         ├── scan a
  +      │         │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  +      │         │    └── keys: (1) weak(3,4)
  +      │         └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  +      │              └── eq [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  +      │                   ├── variable: a.i [type=int, outer=(2)]
  +      │                   └── minus [type=int]
  +      │                        ├── const: 10 [type=int]
  +      │                        └── const: 1 [type=int]
         ├── scan xy
         │    ├── columns: xy.x:6(int!null) xy.y:7(int)
         │    └── keys: (6)
         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
              └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
                   ├── variable: a.k [type=int, outer=(1)]
                   └── variable: xy.x [type=int, outer=(6)]
================================================================================
PruneSelectCols
  Cost: 2023.33
================================================================================
   project
    ├── columns: s:4(string)
    └── inner-join
         ├── columns: a.k:1(int!null) a.i:2(int!null) a.s:4(string) xy.x:6(int!null) xy.y:7(int)
         ├── project
         │    ├── columns: a.k:1(int!null) a.i:2(int!null) a.s:4(string)
         │    ├── keys: (1)
         │    └── select
  -      │         ├── columns: a.k:1(int!null) a.i:2(int!null) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  -      │         ├── keys: (1) weak(3,4)
  +      │         ├── columns: a.k:1(int!null) a.i:2(int!null) a.s:4(string)
  +      │         ├── keys: (1)
         │         ├── scan a
  -      │         │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  -      │         │    └── keys: (1) weak(3,4)
  +      │         │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
  +      │         │    └── keys: (1)
         │         └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         │              └── eq [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         │                   ├── variable: a.i [type=int, outer=(2)]
         │                   └── minus [type=int]
         │                        ├── const: 10 [type=int]
         │                        └── const: 1 [type=int]
         ├── scan xy
         │    ├── columns: xy.x:6(int!null) xy.y:7(int)
         │    └── keys: (6)
         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
              └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
                   ├── variable: a.k [type=int, outer=(1)]
                   └── variable: xy.x [type=int, outer=(6)]
================================================================================
EliminateProject
  Cost: 2023.33
================================================================================
   project
    ├── columns: s:4(string)
    └── inner-join
         ├── columns: a.k:1(int!null) a.i:2(int!null) a.s:4(string) xy.x:6(int!null) xy.y:7(int)
  -      ├── project
  +      ├── select
         │    ├── columns: a.k:1(int!null) a.i:2(int!null) a.s:4(string)
         │    ├── keys: (1)
  -      │    └── select
  -      │         ├── columns: a.k:1(int!null) a.i:2(int!null) a.s:4(string)
  -      │         ├── keys: (1)
  -      │         ├── scan a
  -      │         │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
  -      │         │    └── keys: (1)
  -      │         └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  -      │              └── eq [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  -      │                   ├── variable: a.i [type=int, outer=(2)]
  -      │                   └── minus [type=int]
  -      │                        ├── const: 10 [type=int]
  -      │                        └── const: 1 [type=int]
  +      │    ├── scan a
  +      │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
  +      │    │    └── keys: (1)
  +      │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  +      │         └── eq [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
  +      │              ├── variable: a.i [type=int, outer=(2)]
  +      │              └── minus [type=int]
  +      │                   ├── const: 10 [type=int]
  +      │                   └── const: 1 [type=int]
         ├── scan xy
         │    ├── columns: xy.x:6(int!null) xy.y:7(int)
         │    └── keys: (6)
         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
              └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
                   ├── variable: a.k [type=int, outer=(1)]
                   └── variable: xy.x [type=int, outer=(6)]
================================================================================
PruneJoinRightCols
  Cost: 2023.33
================================================================================
   project
    ├── columns: s:4(string)
    └── inner-join
  -      ├── columns: a.k:1(int!null) a.i:2(int!null) a.s:4(string) xy.x:6(int!null) xy.y:7(int)
  +      ├── columns: a.k:1(int!null) a.i:2(int!null) a.s:4(string) xy.x:6(int!null)
         ├── select
         │    ├── columns: a.k:1(int!null) a.i:2(int!null) a.s:4(string)
         │    ├── keys: (1)
         │    ├── scan a
         │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
         │    │    └── keys: (1)
         │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         │         └── eq [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         │              ├── variable: a.i [type=int, outer=(2)]
         │              └── minus [type=int]
         │                   ├── const: 10 [type=int]
         │                   └── const: 1 [type=int]
         ├── scan xy
  -      │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  +      │    ├── columns: xy.x:6(int!null)
         │    └── keys: (6)
         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
              └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
                   ├── variable: a.k [type=int, outer=(1)]
                   └── variable: xy.x [type=int, outer=(6)]
--------------------------------------------------------------------------------
GenerateIndexScans (higher cost)
--------------------------------------------------------------------------------
   project
    ├── columns: s:4(string)
    └── inner-join
         ├── columns: a.k:1(int!null) a.i:2(int!null) a.s:4(string) xy.x:6(int!null)
         ├── select
         │    ├── columns: a.k:1(int!null) a.i:2(int!null) a.s:4(string)
         │    ├── keys: (1)
  -      │    ├── scan a
  +      │    ├── lookup-join
         │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
  -      │    │    └── keys: (1)
  +      │    │    ├── table: a
  +      │    │    ├── keys: (1)
  +      │    │    └── scan a@secondary
  +      │    │         ├── columns: a.k:1(int!null) a.s:4(string)
  +      │    │         └── keys: (1)
         │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         │         └── eq [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
         │              ├── variable: a.i [type=int, outer=(2)]
         │              └── minus [type=int]
         │                   ├── const: 10 [type=int]
         │                   └── const: 1 [type=int]
         ├── scan xy
         │    ├── columns: xy.x:6(int!null)
         │    └── keys: (6)
         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
              └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
                   ├── variable: a.k [type=int, outer=(1)]
                   └── variable: xy.x [type=int, outer=(6)]
--------------------------------------------------------------------------------
ConstrainScan (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
ConstrainLookupJoinIndexScan (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
GenerateIndexScans (no changes)
--------------------------------------------------------------------------------
================================================================================
Final best expression
  Cost: 2023.33
================================================================================
  project
   ├── columns: s:4(string)
   └── inner-join
        ├── columns: a.k:1(int!null) a.i:2(int!null) a.s:4(string) xy.x:6(int!null)
        ├── select
        │    ├── columns: a.k:1(int!null) a.i:2(int!null) a.s:4(string)
        │    ├── keys: (1)
        │    ├── scan a
        │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
        │    │    └── keys: (1)
        │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
        │         └── eq [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
        │              ├── variable: a.i [type=int, outer=(2)]
        │              └── minus [type=int]
        │                   ├── const: 10 [type=int]
        │                   └── const: 1 [type=int]
        ├── scan xy
        │    ├── columns: xy.x:6(int!null)
        │    └── keys: (6)
        └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
             └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
                  ├── variable: a.k [type=int, outer=(1)]
                  └── variable: xy.x [type=int, outer=(6)]

# Exploration patterns with varying costs.
optsteps
SELECT s, k FROM a WHERE s='foo' AND f>100
----
================================================================================
Initial expression
  Cost: 1010.00
================================================================================
  project
   ├── columns: s:4(string!null) k:1(int!null)
   ├── keys: (1)
   └── select
        ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float!null) a.s:4(string!null) a.j:5(jsonb)
        ├── keys: (1) (3,4)
        ├── scan a
        │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
        │    └── keys: (1) weak(3,4)
        └── and [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight)]
             ├── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
             │    ├── variable: a.s [type=string, outer=(4)]
             │    └── const: 'foo' [type=string]
             └── gt [type=bool, outer=(3), constraints=(/3: [/100.00000000000001 - ]; tight)]
                  ├── variable: a.f [type=float, outer=(3)]
                  └── const: 100.0 [type=float]
================================================================================
EnsureSelectFiltersAnd
  Cost: 1010.00
================================================================================
   project
    ├── columns: s:4(string!null) k:1(int!null)
    ├── keys: (1)
    └── select
         ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float!null) a.s:4(string!null) a.j:5(jsonb)
         ├── keys: (1) (3,4)
         ├── scan a
         │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
         │    └── keys: (1) weak(3,4)
  -      └── and [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight)]
  +      └── filters [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight)]
              ├── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
              │    ├── variable: a.s [type=string, outer=(4)]
              │    └── const: 'foo' [type=string]
              └── gt [type=bool, outer=(3), constraints=(/3: [/100.00000000000001 - ]; tight)]
                   ├── variable: a.f [type=float, outer=(3)]
                   └── const: 100.0 [type=float]
================================================================================
PruneSelectCols
  Cost: 1010.00
================================================================================
   project
    ├── columns: s:4(string!null) k:1(int!null)
    ├── keys: (1)
    └── select
  -      ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float!null) a.s:4(string!null) a.j:5(jsonb)
  +      ├── columns: a.k:1(int!null) a.f:3(float!null) a.s:4(string!null)
         ├── keys: (1) (3,4)
         ├── scan a
  -      │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  +      │    ├── columns: a.k:1(int!null) a.f:3(float) a.s:4(string)
         │    └── keys: (1) weak(3,4)
         └── filters [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight)]
              ├── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
              │    ├── variable: a.s [type=string, outer=(4)]
              │    └── const: 'foo' [type=string]
              └── gt [type=bool, outer=(3), constraints=(/3: [/100.00000000000001 - ]; tight)]
                   ├── variable: a.f [type=float, outer=(3)]
                   └── const: 100.0 [type=float]
--------------------------------------------------------------------------------
GenerateIndexScans (higher cost)
--------------------------------------------------------------------------------
   project
    ├── columns: s:4(string!null) k:1(int!null)
    ├── keys: (1)
    └── select
         ├── columns: a.k:1(int!null) a.f:3(float!null) a.s:4(string!null)
         ├── keys: (1) (3,4)
  -      ├── scan a
  +      ├── scan a@secondary
         │    ├── columns: a.k:1(int!null) a.f:3(float) a.s:4(string)
         │    └── keys: (1) weak(3,4)
         └── filters [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight)]
              ├── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
              │    ├── variable: a.s [type=string, outer=(4)]
              │    └── const: 'foo' [type=string]
              └── gt [type=bool, outer=(3), constraints=(/3: [/100.00000000000001 - ]; tight)]
                   ├── variable: a.f [type=float, outer=(3)]
                   └── const: 100.0 [type=float]
--------------------------------------------------------------------------------
ConstrainScan (no changes)
--------------------------------------------------------------------------------
================================================================================
ConstrainScan
  Cost: 1.01
================================================================================
   project
    ├── columns: s:4(string!null) k:1(int!null)
    ├── keys: (1)
    └── select
         ├── columns: a.k:1(int!null) a.f:3(float!null) a.s:4(string!null)
         ├── keys: (1) (3,4)
  -      ├── scan a
  +      ├── scan a@secondary
         │    ├── columns: a.k:1(int!null) a.f:3(float) a.s:4(string)
  +      │    ├── constraint: /-4/3: [/'foo'/100.00000000000001 - /'foo']
         │    └── keys: (1) weak(3,4)
  -      └── filters [type=bool, outer=(3,4), constraints=(/3: [/100.00000000000001 - ]; /4: [/'foo' - /'foo']; tight)]
  -           ├── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
  -           │    ├── variable: a.s [type=string, outer=(4)]
  -           │    └── const: 'foo' [type=string]
  -           └── gt [type=bool, outer=(3), constraints=(/3: [/100.00000000000001 - ]; tight)]
  -                ├── variable: a.f [type=float, outer=(3)]
  -                └── const: 100.0 [type=float]
  +      └── filters [type=bool]
  +           ├── true [type=bool]
  +           └── true [type=bool]
================================================================================
SimplifyFilters
  Cost: 1.00
================================================================================
   project
    ├── columns: s:4(string!null) k:1(int!null)
    ├── keys: (1)
  - └── select
  + └── scan a@secondary
         ├── columns: a.k:1(int!null) a.f:3(float!null) a.s:4(string!null)
  -      ├── keys: (1) (3,4)
  -      ├── scan a@secondary
  -      │    ├── columns: a.k:1(int!null) a.f:3(float) a.s:4(string)
  -      │    ├── constraint: /-4/3: [/'foo'/100.00000000000001 - /'foo']
  -      │    └── keys: (1) weak(3,4)
  -      └── filters [type=bool]
  -           ├── true [type=bool]
  -           └── true [type=bool]
  +      ├── constraint: /-4/3: [/'foo'/100.00000000000001 - /'foo']
  +      └── keys: (1) (3,4)
================================================================================
Final best expression
  Cost: 1.00
================================================================================
  project
   ├── columns: s:4(string!null) k:1(int!null)
   ├── keys: (1)
   └── scan a@secondary
        ├── columns: a.k:1(int!null) a.f:3(float!null) a.s:4(string!null)
        ├── constraint: /-4/3: [/'foo'/100.00000000000001 - /'foo']
        └── keys: (1) (3,4)

# Decorrelation pattern.
optsteps
SELECT * FROM a WHERE EXISTS(SELECT * FROM xy WHERE y=i)
----
================================================================================
Initial expression
  Cost: 2020.00
================================================================================
  select
   ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
   ├── keys: (1) weak(3,4)
   ├── scan a
   │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
   │    └── keys: (1) weak(3,4)
   └── exists [type=bool, outer=(2)]
        └── select
             ├── columns: xy.x:6(int!null) xy.y:7(int!null)
             ├── outer: (2)
             ├── keys: (6)
             ├── scan xy
             │    ├── columns: xy.x:6(int!null) xy.y:7(int)
             │    └── keys: (6)
             └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
                  ├── variable: xy.y [type=int, outer=(7)]
                  └── variable: a.i [type=int, outer=(2)]
================================================================================
EnsureSelectFilters
  Cost: 2020.00
================================================================================
   select
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── keys: (1) weak(3,4)
    ├── scan a
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    └── keys: (1) weak(3,4)
    └── exists [type=bool, outer=(2)]
         └── select
              ├── columns: xy.x:6(int!null) xy.y:7(int!null)
              ├── outer: (2)
              ├── keys: (6)
              ├── scan xy
              │    ├── columns: xy.x:6(int!null) xy.y:7(int)
              │    └── keys: (6)
  -           └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  -                ├── variable: xy.y [type=int, outer=(7)]
  -                └── variable: a.i [type=int, outer=(2)]
  +           └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  +                └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  +                     ├── variable: xy.y [type=int, outer=(7)]
  +                     └── variable: a.i [type=int, outer=(2)]
================================================================================
EnsureSelectFilters
  Cost: 2020.00
================================================================================
   select
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── keys: (1) weak(3,4)
    ├── scan a
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    └── keys: (1) weak(3,4)
  - └── exists [type=bool, outer=(2)]
  -      └── select
  -           ├── columns: xy.x:6(int!null) xy.y:7(int!null)
  -           ├── outer: (2)
  -           ├── keys: (6)
  -           ├── scan xy
  -           │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  -           │    └── keys: (6)
  -           └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  -                └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  -                     ├── variable: xy.y [type=int, outer=(7)]
  -                     └── variable: a.i [type=int, outer=(2)]
  + └── filters [type=bool, outer=(2)]
  +      └── exists [type=bool, outer=(2)]
  +           └── select
  +                ├── columns: xy.x:6(int!null) xy.y:7(int!null)
  +                ├── outer: (2)
  +                ├── keys: (6)
  +                ├── scan xy
  +                │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  +                │    └── keys: (6)
  +                └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  +                     └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  +                          ├── variable: xy.y [type=int, outer=(7)]
  +                          └── variable: a.i [type=int, outer=(2)]
================================================================================
HoistSelectExists
  Cost: 3131.11
================================================================================
   select
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── keys: (1) weak(3,4)
  - ├── scan a
  + ├── semi-join-apply
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  - │    └── keys: (1) weak(3,4)
  - └── filters [type=bool, outer=(2)]
  -      └── exists [type=bool, outer=(2)]
  -           └── select
  -                ├── columns: xy.x:6(int!null) xy.y:7(int!null)
  -                ├── outer: (2)
  -                ├── keys: (6)
  -                ├── scan xy
  -                │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  -                │    └── keys: (6)
  -                └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  -                     └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  -                          ├── variable: xy.y [type=int, outer=(7)]
  -                          └── variable: a.i [type=int, outer=(2)]
  + │    ├── keys: (1) weak(3,4)
  + │    ├── scan a
  + │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  + │    │    └── keys: (1) weak(3,4)
  + │    ├── select
  + │    │    ├── columns: xy.x:6(int!null) xy.y:7(int!null)
  + │    │    ├── outer: (2)
  + │    │    ├── keys: (6)
  + │    │    ├── scan xy
  + │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  + │    │    │    └── keys: (6)
  + │    │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  + │    │         └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  + │    │              ├── variable: xy.y [type=int, outer=(7)]
  + │    │              └── variable: a.i [type=int, outer=(2)]
  + │    └── true [type=bool]
  + └── filters [type=bool]
================================================================================
TryDecorrelateSelect
  Cost: 3020.00
================================================================================
   select
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── keys: (1) weak(3,4)
    ├── semi-join-apply
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    ├── keys: (1) weak(3,4)
    │    ├── scan a
    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    │    └── keys: (1) weak(3,4)
  - │    ├── select
  - │    │    ├── columns: xy.x:6(int!null) xy.y:7(int!null)
  - │    │    ├── outer: (2)
  - │    │    ├── keys: (6)
  - │    │    ├── scan xy
  - │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  - │    │    │    └── keys: (6)
  - │    │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  - │    │         └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  - │    │              ├── variable: xy.y [type=int, outer=(7)]
  - │    │              └── variable: a.i [type=int, outer=(2)]
  - │    └── true [type=bool]
  + │    ├── scan xy
  + │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  + │    │    └── keys: (6)
  + │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  + │         └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  + │              ├── variable: xy.y [type=int, outer=(7)]
  + │              └── variable: a.i [type=int, outer=(2)]
    └── filters [type=bool]
================================================================================
DecorrelateJoin
  Cost: 3020.00
================================================================================
   select
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── keys: (1) weak(3,4)
  - ├── semi-join-apply
  + ├── semi-join
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    ├── keys: (1) weak(3,4)
    │    ├── scan a
    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    │    └── keys: (1) weak(3,4)
    │    ├── scan xy
    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
    │    │    └── keys: (6)
    │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
    │         └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
    │              ├── variable: xy.y [type=int, outer=(7)]
    │              └── variable: a.i [type=int, outer=(2)]
    └── filters [type=bool]
================================================================================
EliminateEmptyAnd
  Cost: 3020.00
================================================================================
   select
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── keys: (1) weak(3,4)
    ├── semi-join
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    ├── keys: (1) weak(3,4)
    │    ├── scan a
    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
    │    │    └── keys: (1) weak(3,4)
    │    ├── scan xy
    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
    │    │    └── keys: (6)
    │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
    │         └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
    │              ├── variable: xy.y [type=int, outer=(7)]
    │              └── variable: a.i [type=int, outer=(2)]
  - └── filters [type=bool]
  + └── true [type=bool]
================================================================================
EliminateSelect
  Cost: 2020.00
================================================================================
  -select
  +semi-join
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── keys: (1) weak(3,4)
  - ├── semi-join
  + ├── scan a
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  - │    ├── keys: (1) weak(3,4)
  - │    ├── scan a
  - │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  - │    │    └── keys: (1) weak(3,4)
  - │    ├── scan xy
  - │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  - │    │    └── keys: (6)
  - │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  - │         └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  - │              ├── variable: xy.y [type=int, outer=(7)]
  - │              └── variable: a.i [type=int, outer=(2)]
  - └── true [type=bool]
  + │    └── keys: (1) weak(3,4)
  + ├── scan xy
  + │    ├── columns: xy.x:6(int!null) xy.y:7(int)
  + │    └── keys: (6)
  + └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  +      └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
  +           ├── variable: xy.y [type=int, outer=(7)]
  +           └── variable: a.i [type=int, outer=(2)]
--------------------------------------------------------------------------------
GenerateIndexScans (higher cost)
--------------------------------------------------------------------------------
   semi-join
    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
    ├── keys: (1) weak(3,4)
  - ├── scan a
  + ├── lookup-join
    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  - │    └── keys: (1) weak(3,4)
  + │    ├── table: a
  + │    ├── keys: (1) weak(3,4)
  + │    └── scan a@secondary
  + │         ├── columns: a.k:1(int!null) a.f:3(float) a.s:4(string) a.j:5(jsonb)
  + │         └── keys: (1) weak(3,4)
    ├── scan xy
    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
    │    └── keys: (6)
    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
         └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
              ├── variable: xy.y [type=int, outer=(7)]
              └── variable: a.i [type=int, outer=(2)]
--------------------------------------------------------------------------------
GenerateIndexScans (no changes)
--------------------------------------------------------------------------------
================================================================================
Final best expression
  Cost: 2020.00
================================================================================
  semi-join
   ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
   ├── keys: (1) weak(3,4)
   ├── scan a
   │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
   │    └── keys: (1) weak(3,4)
   ├── scan xy
   │    ├── columns: xy.x:6(int!null) xy.y:7(int)
   │    └── keys: (6)
   └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
        └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
             ├── variable: xy.y [type=int, outer=(7)]
             └── variable: a.i [type=int, outer=(2)]

# Decorrelation pattern using ANY function.
optsteps
SELECT x=ANY(SELECT k FROM a) FROM xy
----
================================================================================
Initial expression
  Cost: 2000.00
================================================================================
  project
   ├── columns: column8:8(bool)
   ├── scan xy
   │    ├── columns: xy.x:1(int!null) xy.y:2(int)
   │    └── keys: (1)
   └── projections [outer=(1)]
        └── any: eq [type=bool, outer=(1)]
             ├── project
             │    ├── columns: a.k:3(int!null)
             │    ├── keys: (3)
             │    └── scan a
             │         ├── columns: a.k:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string) a.j:7(jsonb)
             │         └── keys: (3) weak(5,6)
             └── variable: xy.x [type=int, outer=(1)]
================================================================================
PruneScanCols
  Cost: 2000.00
================================================================================
   project
    ├── columns: column8:8(bool)
    ├── scan xy
    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
    │    └── keys: (1)
    └── projections [outer=(1)]
         └── any: eq [type=bool, outer=(1)]
              ├── project
              │    ├── columns: a.k:3(int!null)
              │    ├── keys: (3)
              │    └── scan a
  -           │         ├── columns: a.k:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string) a.j:7(jsonb)
  -           │         └── keys: (3) weak(5,6)
  +           │         ├── columns: a.k:3(int!null)
  +           │         └── keys: (3)
              └── variable: xy.x [type=int, outer=(1)]
================================================================================
EliminateProject
  Cost: 2000.00
================================================================================
   project
    ├── columns: column8:8(bool)
    ├── scan xy
    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
    │    └── keys: (1)
    └── projections [outer=(1)]
         └── any: eq [type=bool, outer=(1)]
  -           ├── project
  +           ├── scan a
              │    ├── columns: a.k:3(int!null)
  -           │    ├── keys: (3)
  -           │    └── scan a
  -           │         ├── columns: a.k:3(int!null)
  -           │         └── keys: (3)
  +           │    └── keys: (3)
              └── variable: xy.x [type=int, outer=(1)]
================================================================================
HoistProjectSubquery
  Cost: 2020.01
================================================================================
   project
    ├── columns: column8:8(bool)
  - ├── scan xy
  - │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  - │    └── keys: (1)
  - └── projections [outer=(1)]
  -      └── any: eq [type=bool, outer=(1)]
  -           ├── scan a
  -           │    ├── columns: a.k:3(int!null)
  -           │    └── keys: (3)
  -           └── variable: xy.x [type=int, outer=(1)]
  + ├── inner-join-apply
  + │    ├── columns: xy.x:1(int!null) xy.y:2(int) case:11(bool)
  + │    ├── keys: (1)
  + │    ├── scan xy
  + │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  + │    │    └── keys: (1)
  + │    ├── project
  + │    │    ├── columns: case:11(bool)
  + │    │    ├── outer: (1)
  + │    │    ├── cardinality: [1 - 1]
  + │    │    ├── group-by
  + │    │    │    ├── columns: bool_or:10(bool)
  + │    │    │    ├── outer: (1)
  + │    │    │    ├── cardinality: [1 - 1]
  + │    │    │    ├── project
  + │    │    │    │    ├── columns: notnull:9(bool)
  + │    │    │    │    ├── outer: (1)
  + │    │    │    │    ├── select
  + │    │    │    │    │    ├── columns: a.k:3(int!null)
  + │    │    │    │    │    ├── outer: (1)
  + │    │    │    │    │    ├── keys: (3)
  + │    │    │    │    │    ├── scan a
  + │    │    │    │    │    │    ├── columns: a.k:3(int!null)
  + │    │    │    │    │    │    └── keys: (3)
  + │    │    │    │    │    └── is-not [type=bool, outer=(1,3)]
  + │    │    │    │    │         ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  + │    │    │    │    │         │    ├── variable: a.k [type=int, outer=(3)]
  + │    │    │    │    │         │    └── variable: xy.x [type=int, outer=(1)]
  + │    │    │    │    │         └── false [type=bool]
  + │    │    │    │    └── projections [outer=(3)]
  + │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  + │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
  + │    │    │    │              └── null [type=unknown]
  + │    │    │    └── aggregations [outer=(9)]
  + │    │    │         └── bool-or [type=bool, outer=(9)]
  + │    │    │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
  + │    │    └── projections [outer=(1,10)]
  + │    │         └── case [type=bool, outer=(1,10)]
  + │    │              ├── true [type=bool]
  + │    │              ├── when [type=bool, outer=(1,10)]
  + │    │              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
  + │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
  + │    │              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
  + │    │              │    │         ├── variable: xy.x [type=int, outer=(1)]
  + │    │              │    │         └── null [type=unknown]
  + │    │              │    └── true [type=bool]
  + │    │              ├── when [type=bool, outer=(10)]
  + │    │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
  + │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
  + │    │              │    │    └── null [type=unknown]
  + │    │              │    └── false [type=bool]
  + │    │              └── null [type=unknown]
  + │    └── true [type=bool]
  + └── projections [outer=(11)]
  +      └── variable: case [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
================================================================================
EnsureSelectFilters
  Cost: 2020.01
================================================================================
   project
    ├── columns: column8:8(bool)
    ├── inner-join-apply
    │    ├── columns: xy.x:1(int!null) xy.y:2(int) case:11(bool)
    │    ├── keys: (1)
    │    ├── scan xy
    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
    │    │    └── keys: (1)
    │    ├── project
    │    │    ├── columns: case:11(bool)
    │    │    ├── outer: (1)
    │    │    ├── cardinality: [1 - 1]
    │    │    ├── group-by
    │    │    │    ├── columns: bool_or:10(bool)
    │    │    │    ├── outer: (1)
    │    │    │    ├── cardinality: [1 - 1]
    │    │    │    ├── project
    │    │    │    │    ├── columns: notnull:9(bool)
    │    │    │    │    ├── outer: (1)
    │    │    │    │    ├── select
    │    │    │    │    │    ├── columns: a.k:3(int!null)
    │    │    │    │    │    ├── outer: (1)
    │    │    │    │    │    ├── keys: (3)
    │    │    │    │    │    ├── scan a
    │    │    │    │    │    │    ├── columns: a.k:3(int!null)
    │    │    │    │    │    │    └── keys: (3)
  - │    │    │    │    │    └── is-not [type=bool, outer=(1,3)]
  - │    │    │    │    │         ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  - │    │    │    │    │         │    ├── variable: a.k [type=int, outer=(3)]
  - │    │    │    │    │         │    └── variable: xy.x [type=int, outer=(1)]
  - │    │    │    │    │         └── false [type=bool]
  + │    │    │    │    │    └── filters [type=bool, outer=(1,3)]
  + │    │    │    │    │         └── is-not [type=bool, outer=(1,3)]
  + │    │    │    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  + │    │    │    │    │              │    ├── variable: a.k [type=int, outer=(3)]
  + │    │    │    │    │              │    └── variable: xy.x [type=int, outer=(1)]
  + │    │    │    │    │              └── false [type=bool]
    │    │    │    │    └── projections [outer=(3)]
    │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
    │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
    │    │    │    │              └── null [type=unknown]
    │    │    │    └── aggregations [outer=(9)]
    │    │    │         └── bool-or [type=bool, outer=(9)]
    │    │    │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
    │    │    └── projections [outer=(1,10)]
    │    │         └── case [type=bool, outer=(1,10)]
    │    │              ├── true [type=bool]
    │    │              ├── when [type=bool, outer=(1,10)]
    │    │              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
    │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │    │              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
    │    │              │    │         ├── variable: xy.x [type=int, outer=(1)]
    │    │              │    │         └── null [type=unknown]
    │    │              │    └── true [type=bool]
    │    │              ├── when [type=bool, outer=(10)]
    │    │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
    │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │    │              │    │    └── null [type=unknown]
    │    │              │    └── false [type=bool]
    │    │              └── null [type=unknown]
    │    └── true [type=bool]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
================================================================================
TryDecorrelateProject
  Cost: 2030.01
================================================================================
   project
    ├── columns: column8:8(bool)
  - ├── inner-join-apply
  + ├── select
    │    ├── columns: xy.x:1(int!null) xy.y:2(int) case:11(bool)
    │    ├── keys: (1)
  - │    ├── scan xy
  - │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  - │    │    └── keys: (1)
    │    ├── project
  - │    │    ├── columns: case:11(bool)
  - │    │    ├── outer: (1)
  - │    │    ├── cardinality: [1 - 1]
  - │    │    ├── group-by
  - │    │    │    ├── columns: bool_or:10(bool)
  - │    │    │    ├── outer: (1)
  - │    │    │    ├── cardinality: [1 - 1]
  - │    │    │    ├── project
  - │    │    │    │    ├── columns: notnull:9(bool)
  + │    │    ├── columns: case:11(bool) xy.x:1(int!null) xy.y:2(int)
  + │    │    ├── keys: (1)
  + │    │    ├── inner-join-apply
  + │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) bool_or:10(bool)
  + │    │    │    ├── keys: (1)
  + │    │    │    ├── scan xy
  + │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  + │    │    │    │    └── keys: (1)
  + │    │    │    ├── group-by
  + │    │    │    │    ├── columns: bool_or:10(bool)
    │    │    │    │    ├── outer: (1)
  - │    │    │    │    ├── select
  - │    │    │    │    │    ├── columns: a.k:3(int!null)
  + │    │    │    │    ├── cardinality: [1 - 1]
  + │    │    │    │    ├── project
  + │    │    │    │    │    ├── columns: notnull:9(bool)
    │    │    │    │    │    ├── outer: (1)
  - │    │    │    │    │    ├── keys: (3)
  - │    │    │    │    │    ├── scan a
  + │    │    │    │    │    ├── select
    │    │    │    │    │    │    ├── columns: a.k:3(int!null)
  - │    │    │    │    │    │    └── keys: (3)
  - │    │    │    │    │    └── filters [type=bool, outer=(1,3)]
  - │    │    │    │    │         └── is-not [type=bool, outer=(1,3)]
  - │    │    │    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  - │    │    │    │    │              │    ├── variable: a.k [type=int, outer=(3)]
  - │    │    │    │    │              │    └── variable: xy.x [type=int, outer=(1)]
  - │    │    │    │    │              └── false [type=bool]
  - │    │    │    │    └── projections [outer=(3)]
  - │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  - │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
  - │    │    │    │              └── null [type=unknown]
  - │    │    │    └── aggregations [outer=(9)]
  - │    │    │         └── bool-or [type=bool, outer=(9)]
  - │    │    │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
  - │    │    └── projections [outer=(1,10)]
  + │    │    │    │    │    │    ├── outer: (1)
  + │    │    │    │    │    │    ├── keys: (3)
  + │    │    │    │    │    │    ├── scan a
  + │    │    │    │    │    │    │    ├── columns: a.k:3(int!null)
  + │    │    │    │    │    │    │    └── keys: (3)
  + │    │    │    │    │    │    └── filters [type=bool, outer=(1,3)]
  + │    │    │    │    │    │         └── is-not [type=bool, outer=(1,3)]
  + │    │    │    │    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  + │    │    │    │    │    │              │    ├── variable: a.k [type=int, outer=(3)]
  + │    │    │    │    │    │              │    └── variable: xy.x [type=int, outer=(1)]
  + │    │    │    │    │    │              └── false [type=bool]
  + │    │    │    │    │    └── projections [outer=(3)]
  + │    │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  + │    │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
  + │    │    │    │    │              └── null [type=unknown]
  + │    │    │    │    └── aggregations [outer=(9)]
  + │    │    │    │         └── bool-or [type=bool, outer=(9)]
  + │    │    │    │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
  + │    │    │    └── true [type=bool]
  + │    │    └── projections [outer=(1,2,10)]
    │    │         └── case [type=bool, outer=(1,10)]
    │    │              ├── true [type=bool]
    │    │              ├── when [type=bool, outer=(1,10)]
    │    │              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
    │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │    │              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
    │    │              │    │         ├── variable: xy.x [type=int, outer=(1)]
    │    │              │    │         └── null [type=unknown]
    │    │              │    └── true [type=bool]
    │    │              ├── when [type=bool, outer=(10)]
    │    │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
    │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │    │              │    │    └── null [type=unknown]
    │    │              │    └── false [type=bool]
    │    │              └── null [type=unknown]
    │    └── true [type=bool]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
================================================================================
TryDecorrelateScalarGroupBy
  Cost: 2036.66
================================================================================
   project
    ├── columns: column8:8(bool)
    ├── select
    │    ├── columns: xy.x:1(int!null) xy.y:2(int) case:11(bool)
    │    ├── keys: (1)
    │    ├── project
    │    │    ├── columns: case:11(bool) xy.x:1(int!null) xy.y:2(int)
    │    │    ├── keys: (1)
  - │    │    ├── inner-join-apply
  + │    │    ├── select
    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) bool_or:10(bool)
    │    │    │    ├── keys: (1)
  - │    │    │    ├── scan xy
  - │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  - │    │    │    │    └── keys: (1)
    │    │    │    ├── group-by
  - │    │    │    │    ├── columns: bool_or:10(bool)
  - │    │    │    │    ├── outer: (1)
  - │    │    │    │    ├── cardinality: [1 - 1]
  - │    │    │    │    ├── project
  - │    │    │    │    │    ├── columns: notnull:9(bool)
  - │    │    │    │    │    ├── outer: (1)
  - │    │    │    │    │    ├── select
  - │    │    │    │    │    │    ├── columns: a.k:3(int!null)
  + │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) bool_or:10(bool)
  + │    │    │    │    ├── grouping columns: xy.x:1(int!null)
  + │    │    │    │    ├── keys: (1)
  + │    │    │    │    ├── left-join-apply
  + │    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) notnull:9(bool)
  + │    │    │    │    │    ├── scan xy
  + │    │    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  + │    │    │    │    │    │    └── keys: (1)
  + │    │    │    │    │    ├── project
  + │    │    │    │    │    │    ├── columns: notnull:9(bool)
    │    │    │    │    │    │    ├── outer: (1)
  - │    │    │    │    │    │    ├── keys: (3)
  - │    │    │    │    │    │    ├── scan a
  + │    │    │    │    │    │    ├── select
    │    │    │    │    │    │    │    ├── columns: a.k:3(int!null)
  - │    │    │    │    │    │    │    └── keys: (3)
  - │    │    │    │    │    │    └── filters [type=bool, outer=(1,3)]
  - │    │    │    │    │    │         └── is-not [type=bool, outer=(1,3)]
  - │    │    │    │    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  - │    │    │    │    │    │              │    ├── variable: a.k [type=int, outer=(3)]
  - │    │    │    │    │    │              │    └── variable: xy.x [type=int, outer=(1)]
  - │    │    │    │    │    │              └── false [type=bool]
  - │    │    │    │    │    └── projections [outer=(3)]
  - │    │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  - │    │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
  - │    │    │    │    │              └── null [type=unknown]
  - │    │    │    │    └── aggregations [outer=(9)]
  - │    │    │    │         └── bool-or [type=bool, outer=(9)]
  - │    │    │    │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
  + │    │    │    │    │    │    │    ├── outer: (1)
  + │    │    │    │    │    │    │    ├── keys: (3)
  + │    │    │    │    │    │    │    ├── scan a
  + │    │    │    │    │    │    │    │    ├── columns: a.k:3(int!null)
  + │    │    │    │    │    │    │    │    └── keys: (3)
  + │    │    │    │    │    │    │    └── filters [type=bool, outer=(1,3)]
  + │    │    │    │    │    │    │         └── is-not [type=bool, outer=(1,3)]
  + │    │    │    │    │    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  + │    │    │    │    │    │    │              │    ├── variable: a.k [type=int, outer=(3)]
  + │    │    │    │    │    │    │              │    └── variable: xy.x [type=int, outer=(1)]
  + │    │    │    │    │    │    │              └── false [type=bool]
  + │    │    │    │    │    │    └── projections [outer=(3)]
  + │    │    │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  + │    │    │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
  + │    │    │    │    │    │              └── null [type=unknown]
  + │    │    │    │    │    └── true [type=bool]
  + │    │    │    │    └── aggregations [outer=(2,9)]
  + │    │    │    │         ├── bool-or [type=bool, outer=(9)]
  + │    │    │    │         │    └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
  + │    │    │    │         └── any-not-null [type=int, outer=(2)]
  + │    │    │    │              └── variable: xy.y [type=int, outer=(2)]
    │    │    │    └── true [type=bool]
    │    │    └── projections [outer=(1,2,10)]
    │    │         └── case [type=bool, outer=(1,10)]
    │    │              ├── true [type=bool]
    │    │              ├── when [type=bool, outer=(1,10)]
    │    │              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
    │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │    │              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
    │    │              │    │         ├── variable: xy.x [type=int, outer=(1)]
    │    │              │    │         └── null [type=unknown]
    │    │              │    └── true [type=bool]
    │    │              ├── when [type=bool, outer=(10)]
    │    │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
    │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │    │              │    │    └── null [type=unknown]
    │    │              │    └── false [type=bool]
    │    │              └── null [type=unknown]
    │    └── true [type=bool]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
================================================================================
TryDecorrelateProjectSelect
  Cost: 2033.33
================================================================================
   project
    ├── columns: column8:8(bool)
    ├── select
    │    ├── columns: xy.x:1(int!null) xy.y:2(int) case:11(bool)
    │    ├── keys: (1)
    │    ├── project
    │    │    ├── columns: case:11(bool) xy.x:1(int!null) xy.y:2(int)
    │    │    ├── keys: (1)
    │    │    ├── select
    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) bool_or:10(bool)
    │    │    │    ├── keys: (1)
    │    │    │    ├── group-by
    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) bool_or:10(bool)
    │    │    │    │    ├── grouping columns: xy.x:1(int!null)
    │    │    │    │    ├── keys: (1)
  - │    │    │    │    ├── left-join-apply
  + │    │    │    │    ├── project
    │    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) notnull:9(bool)
  - │    │    │    │    │    ├── scan xy
  - │    │    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  - │    │    │    │    │    │    └── keys: (1)
  - │    │    │    │    │    ├── project
  - │    │    │    │    │    │    ├── columns: notnull:9(bool)
  - │    │    │    │    │    │    ├── outer: (1)
  - │    │    │    │    │    │    ├── select
  - │    │    │    │    │    │    │    ├── columns: a.k:3(int!null)
  - │    │    │    │    │    │    │    ├── outer: (1)
  - │    │    │    │    │    │    │    ├── keys: (3)
  - │    │    │    │    │    │    │    ├── scan a
  - │    │    │    │    │    │    │    │    ├── columns: a.k:3(int!null)
  - │    │    │    │    │    │    │    │    └── keys: (3)
  - │    │    │    │    │    │    │    └── filters [type=bool, outer=(1,3)]
  - │    │    │    │    │    │    │         └── is-not [type=bool, outer=(1,3)]
  - │    │    │    │    │    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  - │    │    │    │    │    │    │              │    ├── variable: a.k [type=int, outer=(3)]
  - │    │    │    │    │    │    │              │    └── variable: xy.x [type=int, outer=(1)]
  - │    │    │    │    │    │    │              └── false [type=bool]
  - │    │    │    │    │    │    └── projections [outer=(3)]
  - │    │    │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  - │    │    │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
  - │    │    │    │    │    │              └── null [type=unknown]
  - │    │    │    │    │    └── true [type=bool]
  + │    │    │    │    │    └── left-join-apply
  + │    │    │    │    │         ├── columns: xy.x:1(int!null) xy.y:2(int) a.k:3(int) notnull:9(bool)
  + │    │    │    │    │         ├── scan xy
  + │    │    │    │    │         │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  + │    │    │    │    │         │    └── keys: (1)
  + │    │    │    │    │         ├── project
  + │    │    │    │    │         │    ├── columns: notnull:9(bool) a.k:3(int!null)
  + │    │    │    │    │         │    ├── keys: (3)
  + │    │    │    │    │         │    ├── scan a
  + │    │    │    │    │         │    │    ├── columns: a.k:3(int!null)
  + │    │    │    │    │         │    │    └── keys: (3)
  + │    │    │    │    │         │    └── projections [outer=(3)]
  + │    │    │    │    │         │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  + │    │    │    │    │         │              ├── variable: a.k [type=int, outer=(3)]
  + │    │    │    │    │         │              └── null [type=unknown]
  + │    │    │    │    │         └── filters [type=bool, outer=(1,3)]
  + │    │    │    │    │              └── is-not [type=bool, outer=(1,3)]
  + │    │    │    │    │                   ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  + │    │    │    │    │                   │    ├── variable: a.k [type=int, outer=(3)]
  + │    │    │    │    │                   │    └── variable: xy.x [type=int, outer=(1)]
  + │    │    │    │    │                   └── false [type=bool]
    │    │    │    │    └── aggregations [outer=(2,9)]
    │    │    │    │         ├── bool-or [type=bool, outer=(9)]
    │    │    │    │         │    └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
    │    │    │    │         └── any-not-null [type=int, outer=(2)]
    │    │    │    │              └── variable: xy.y [type=int, outer=(2)]
    │    │    │    └── true [type=bool]
    │    │    └── projections [outer=(1,2,10)]
    │    │         └── case [type=bool, outer=(1,10)]
    │    │              ├── true [type=bool]
    │    │              ├── when [type=bool, outer=(1,10)]
    │    │              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
    │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │    │              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
    │    │              │    │         ├── variable: xy.x [type=int, outer=(1)]
    │    │              │    │         └── null [type=unknown]
    │    │              │    └── true [type=bool]
    │    │              ├── when [type=bool, outer=(10)]
    │    │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
    │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │    │              │    │    └── null [type=unknown]
    │    │              │    └── false [type=bool]
    │    │              └── null [type=unknown]
    │    └── true [type=bool]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
================================================================================
DecorrelateJoin
  Cost: 2033.33
================================================================================
   project
    ├── columns: column8:8(bool)
    ├── select
    │    ├── columns: xy.x:1(int!null) xy.y:2(int) case:11(bool)
    │    ├── keys: (1)
    │    ├── project
    │    │    ├── columns: case:11(bool) xy.x:1(int!null) xy.y:2(int)
    │    │    ├── keys: (1)
    │    │    ├── select
    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) bool_or:10(bool)
    │    │    │    ├── keys: (1)
    │    │    │    ├── group-by
    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) bool_or:10(bool)
    │    │    │    │    ├── grouping columns: xy.x:1(int!null)
    │    │    │    │    ├── keys: (1)
    │    │    │    │    ├── project
    │    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) notnull:9(bool)
  - │    │    │    │    │    └── left-join-apply
  + │    │    │    │    │    └── left-join
    │    │    │    │    │         ├── columns: xy.x:1(int!null) xy.y:2(int) a.k:3(int) notnull:9(bool)
    │    │    │    │    │         ├── scan xy
    │    │    │    │    │         │    ├── columns: xy.x:1(int!null) xy.y:2(int)
    │    │    │    │    │         │    └── keys: (1)
    │    │    │    │    │         ├── project
    │    │    │    │    │         │    ├── columns: notnull:9(bool) a.k:3(int!null)
    │    │    │    │    │         │    ├── keys: (3)
    │    │    │    │    │         │    ├── scan a
    │    │    │    │    │         │    │    ├── columns: a.k:3(int!null)
    │    │    │    │    │         │    │    └── keys: (3)
    │    │    │    │    │         │    └── projections [outer=(3)]
    │    │    │    │    │         │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
    │    │    │    │    │         │              ├── variable: a.k [type=int, outer=(3)]
    │    │    │    │    │         │              └── null [type=unknown]
    │    │    │    │    │         └── filters [type=bool, outer=(1,3)]
    │    │    │    │    │              └── is-not [type=bool, outer=(1,3)]
    │    │    │    │    │                   ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
    │    │    │    │    │                   │    ├── variable: a.k [type=int, outer=(3)]
    │    │    │    │    │                   │    └── variable: xy.x [type=int, outer=(1)]
    │    │    │    │    │                   └── false [type=bool]
    │    │    │    │    └── aggregations [outer=(2,9)]
    │    │    │    │         ├── bool-or [type=bool, outer=(9)]
    │    │    │    │         │    └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
    │    │    │    │         └── any-not-null [type=int, outer=(2)]
    │    │    │    │              └── variable: xy.y [type=int, outer=(2)]
    │    │    │    └── true [type=bool]
    │    │    └── projections [outer=(1,2,10)]
    │    │         └── case [type=bool, outer=(1,10)]
    │    │              ├── true [type=bool]
    │    │              ├── when [type=bool, outer=(1,10)]
    │    │              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
    │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │    │              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
    │    │              │    │         ├── variable: xy.x [type=int, outer=(1)]
    │    │              │    │         └── null [type=unknown]
    │    │              │    └── true [type=bool]
    │    │              ├── when [type=bool, outer=(10)]
    │    │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
    │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │    │              │    │    └── null [type=unknown]
    │    │              │    └── false [type=bool]
    │    │              └── null [type=unknown]
    │    └── true [type=bool]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
================================================================================
EliminateGroupByProject
  Cost: 2033.33
================================================================================
   project
    ├── columns: column8:8(bool)
    ├── select
    │    ├── columns: xy.x:1(int!null) xy.y:2(int) case:11(bool)
    │    ├── keys: (1)
    │    ├── project
    │    │    ├── columns: case:11(bool) xy.x:1(int!null) xy.y:2(int)
    │    │    ├── keys: (1)
    │    │    ├── select
    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) bool_or:10(bool)
    │    │    │    ├── keys: (1)
    │    │    │    ├── group-by
    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) bool_or:10(bool)
    │    │    │    │    ├── grouping columns: xy.x:1(int!null)
    │    │    │    │    ├── keys: (1)
  - │    │    │    │    ├── project
  - │    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) notnull:9(bool)
  - │    │    │    │    │    └── left-join
  - │    │    │    │    │         ├── columns: xy.x:1(int!null) xy.y:2(int) a.k:3(int) notnull:9(bool)
  - │    │    │    │    │         ├── scan xy
  - │    │    │    │    │         │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  - │    │    │    │    │         │    └── keys: (1)
  - │    │    │    │    │         ├── project
  - │    │    │    │    │         │    ├── columns: notnull:9(bool) a.k:3(int!null)
  - │    │    │    │    │         │    ├── keys: (3)
  - │    │    │    │    │         │    ├── scan a
  - │    │    │    │    │         │    │    ├── columns: a.k:3(int!null)
  - │    │    │    │    │         │    │    └── keys: (3)
  - │    │    │    │    │         │    └── projections [outer=(3)]
  - │    │    │    │    │         │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  - │    │    │    │    │         │              ├── variable: a.k [type=int, outer=(3)]
  - │    │    │    │    │         │              └── null [type=unknown]
  - │    │    │    │    │         └── filters [type=bool, outer=(1,3)]
  - │    │    │    │    │              └── is-not [type=bool, outer=(1,3)]
  - │    │    │    │    │                   ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  - │    │    │    │    │                   │    ├── variable: a.k [type=int, outer=(3)]
  - │    │    │    │    │                   │    └── variable: xy.x [type=int, outer=(1)]
  - │    │    │    │    │                   └── false [type=bool]
  + │    │    │    │    ├── left-join
  + │    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) a.k:3(int) notnull:9(bool)
  + │    │    │    │    │    ├── scan xy
  + │    │    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  + │    │    │    │    │    │    └── keys: (1)
  + │    │    │    │    │    ├── project
  + │    │    │    │    │    │    ├── columns: notnull:9(bool) a.k:3(int!null)
  + │    │    │    │    │    │    ├── keys: (3)
  + │    │    │    │    │    │    ├── scan a
  + │    │    │    │    │    │    │    ├── columns: a.k:3(int!null)
  + │    │    │    │    │    │    │    └── keys: (3)
  + │    │    │    │    │    │    └── projections [outer=(3)]
  + │    │    │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  + │    │    │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
  + │    │    │    │    │    │              └── null [type=unknown]
  + │    │    │    │    │    └── filters [type=bool, outer=(1,3)]
  + │    │    │    │    │         └── is-not [type=bool, outer=(1,3)]
  + │    │    │    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  + │    │    │    │    │              │    ├── variable: a.k [type=int, outer=(3)]
  + │    │    │    │    │              │    └── variable: xy.x [type=int, outer=(1)]
  + │    │    │    │    │              └── false [type=bool]
    │    │    │    │    └── aggregations [outer=(2,9)]
    │    │    │    │         ├── bool-or [type=bool, outer=(9)]
    │    │    │    │         │    └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
    │    │    │    │         └── any-not-null [type=int, outer=(2)]
    │    │    │    │              └── variable: xy.y [type=int, outer=(2)]
    │    │    │    └── true [type=bool]
    │    │    └── projections [outer=(1,2,10)]
    │    │         └── case [type=bool, outer=(1,10)]
    │    │              ├── true [type=bool]
    │    │              ├── when [type=bool, outer=(1,10)]
    │    │              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
    │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │    │              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
    │    │              │    │         ├── variable: xy.x [type=int, outer=(1)]
    │    │              │    │         └── null [type=unknown]
    │    │              │    └── true [type=bool]
    │    │              ├── when [type=bool, outer=(10)]
    │    │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
    │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │    │              │    │    └── null [type=unknown]
    │    │              │    └── false [type=bool]
    │    │              └── null [type=unknown]
    │    └── true [type=bool]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
================================================================================
EliminateSelect
  Cost: 2030.00
================================================================================
   project
    ├── columns: column8:8(bool)
    ├── select
    │    ├── columns: xy.x:1(int!null) xy.y:2(int) case:11(bool)
    │    ├── keys: (1)
    │    ├── project
    │    │    ├── columns: case:11(bool) xy.x:1(int!null) xy.y:2(int)
    │    │    ├── keys: (1)
  - │    │    ├── select
  + │    │    ├── group-by
    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) bool_or:10(bool)
  + │    │    │    ├── grouping columns: xy.x:1(int!null)
    │    │    │    ├── keys: (1)
  - │    │    │    ├── group-by
  - │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) bool_or:10(bool)
  - │    │    │    │    ├── grouping columns: xy.x:1(int!null)
  - │    │    │    │    ├── keys: (1)
  - │    │    │    │    ├── left-join
  - │    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) a.k:3(int) notnull:9(bool)
  - │    │    │    │    │    ├── scan xy
  - │    │    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  - │    │    │    │    │    │    └── keys: (1)
  - │    │    │    │    │    ├── project
  - │    │    │    │    │    │    ├── columns: notnull:9(bool) a.k:3(int!null)
  - │    │    │    │    │    │    ├── keys: (3)
  - │    │    │    │    │    │    ├── scan a
  - │    │    │    │    │    │    │    ├── columns: a.k:3(int!null)
  - │    │    │    │    │    │    │    └── keys: (3)
  - │    │    │    │    │    │    └── projections [outer=(3)]
  - │    │    │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  - │    │    │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
  - │    │    │    │    │    │              └── null [type=unknown]
  - │    │    │    │    │    └── filters [type=bool, outer=(1,3)]
  - │    │    │    │    │         └── is-not [type=bool, outer=(1,3)]
  - │    │    │    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  - │    │    │    │    │              │    ├── variable: a.k [type=int, outer=(3)]
  - │    │    │    │    │              │    └── variable: xy.x [type=int, outer=(1)]
  - │    │    │    │    │              └── false [type=bool]
  - │    │    │    │    └── aggregations [outer=(2,9)]
  - │    │    │    │         ├── bool-or [type=bool, outer=(9)]
  - │    │    │    │         │    └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
  - │    │    │    │         └── any-not-null [type=int, outer=(2)]
  - │    │    │    │              └── variable: xy.y [type=int, outer=(2)]
  - │    │    │    └── true [type=bool]
  + │    │    │    ├── left-join
  + │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) a.k:3(int) notnull:9(bool)
  + │    │    │    │    ├── scan xy
  + │    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  + │    │    │    │    │    └── keys: (1)
  + │    │    │    │    ├── project
  + │    │    │    │    │    ├── columns: notnull:9(bool) a.k:3(int!null)
  + │    │    │    │    │    ├── keys: (3)
  + │    │    │    │    │    ├── scan a
  + │    │    │    │    │    │    ├── columns: a.k:3(int!null)
  + │    │    │    │    │    │    └── keys: (3)
  + │    │    │    │    │    └── projections [outer=(3)]
  + │    │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  + │    │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
  + │    │    │    │    │              └── null [type=unknown]
  + │    │    │    │    └── filters [type=bool, outer=(1,3)]
  + │    │    │    │         └── is-not [type=bool, outer=(1,3)]
  + │    │    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  + │    │    │    │              │    ├── variable: a.k [type=int, outer=(3)]
  + │    │    │    │              │    └── variable: xy.x [type=int, outer=(1)]
  + │    │    │    │              └── false [type=bool]
  + │    │    │    └── aggregations [outer=(2,9)]
  + │    │    │         ├── bool-or [type=bool, outer=(9)]
  + │    │    │         │    └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
  + │    │    │         └── any-not-null [type=int, outer=(2)]
  + │    │    │              └── variable: xy.y [type=int, outer=(2)]
    │    │    └── projections [outer=(1,2,10)]
    │    │         └── case [type=bool, outer=(1,10)]
    │    │              ├── true [type=bool]
    │    │              ├── when [type=bool, outer=(1,10)]
    │    │              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
    │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │    │              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
    │    │              │    │         ├── variable: xy.x [type=int, outer=(1)]
    │    │              │    │         └── null [type=unknown]
    │    │              │    └── true [type=bool]
    │    │              ├── when [type=bool, outer=(10)]
    │    │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
    │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │    │              │    │    └── null [type=unknown]
    │    │              │    └── false [type=bool]
    │    │              └── null [type=unknown]
    │    └── true [type=bool]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
================================================================================
EliminateSelect
  Cost: 2020.00
================================================================================
   project
    ├── columns: column8:8(bool)
  - ├── select
  - │    ├── columns: xy.x:1(int!null) xy.y:2(int) case:11(bool)
  + ├── project
  + │    ├── columns: case:11(bool) xy.x:1(int!null) xy.y:2(int)
    │    ├── keys: (1)
  - │    ├── project
  - │    │    ├── columns: case:11(bool) xy.x:1(int!null) xy.y:2(int)
  + │    ├── group-by
  + │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) bool_or:10(bool)
  + │    │    ├── grouping columns: xy.x:1(int!null)
    │    │    ├── keys: (1)
  - │    │    ├── group-by
  - │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) bool_or:10(bool)
  - │    │    │    ├── grouping columns: xy.x:1(int!null)
  - │    │    │    ├── keys: (1)
  - │    │    │    ├── left-join
  - │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) a.k:3(int) notnull:9(bool)
  - │    │    │    │    ├── scan xy
  - │    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  - │    │    │    │    │    └── keys: (1)
  - │    │    │    │    ├── project
  - │    │    │    │    │    ├── columns: notnull:9(bool) a.k:3(int!null)
  - │    │    │    │    │    ├── keys: (3)
  - │    │    │    │    │    ├── scan a
  - │    │    │    │    │    │    ├── columns: a.k:3(int!null)
  - │    │    │    │    │    │    └── keys: (3)
  - │    │    │    │    │    └── projections [outer=(3)]
  - │    │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  - │    │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
  - │    │    │    │    │              └── null [type=unknown]
  - │    │    │    │    └── filters [type=bool, outer=(1,3)]
  - │    │    │    │         └── is-not [type=bool, outer=(1,3)]
  - │    │    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  - │    │    │    │              │    ├── variable: a.k [type=int, outer=(3)]
  - │    │    │    │              │    └── variable: xy.x [type=int, outer=(1)]
  - │    │    │    │              └── false [type=bool]
  - │    │    │    └── aggregations [outer=(2,9)]
  - │    │    │         ├── bool-or [type=bool, outer=(9)]
  - │    │    │         │    └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
  - │    │    │         └── any-not-null [type=int, outer=(2)]
  - │    │    │              └── variable: xy.y [type=int, outer=(2)]
  - │    │    └── projections [outer=(1,2,10)]
  - │    │         └── case [type=bool, outer=(1,10)]
  - │    │              ├── true [type=bool]
  - │    │              ├── when [type=bool, outer=(1,10)]
  - │    │              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
  - │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
  - │    │              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
  - │    │              │    │         ├── variable: xy.x [type=int, outer=(1)]
  - │    │              │    │         └── null [type=unknown]
  - │    │              │    └── true [type=bool]
  - │    │              ├── when [type=bool, outer=(10)]
  - │    │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
  - │    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
  - │    │              │    │    └── null [type=unknown]
  - │    │              │    └── false [type=bool]
  - │    │              └── null [type=unknown]
  - │    └── true [type=bool]
  + │    │    ├── left-join
  + │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) a.k:3(int) notnull:9(bool)
  + │    │    │    ├── scan xy
  + │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  + │    │    │    │    └── keys: (1)
  + │    │    │    ├── project
  + │    │    │    │    ├── columns: notnull:9(bool) a.k:3(int!null)
  + │    │    │    │    ├── keys: (3)
  + │    │    │    │    ├── scan a
  + │    │    │    │    │    ├── columns: a.k:3(int!null)
  + │    │    │    │    │    └── keys: (3)
  + │    │    │    │    └── projections [outer=(3)]
  + │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  + │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
  + │    │    │    │              └── null [type=unknown]
  + │    │    │    └── filters [type=bool, outer=(1,3)]
  + │    │    │         └── is-not [type=bool, outer=(1,3)]
  + │    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  + │    │    │              │    ├── variable: a.k [type=int, outer=(3)]
  + │    │    │              │    └── variable: xy.x [type=int, outer=(1)]
  + │    │    │              └── false [type=bool]
  + │    │    └── aggregations [outer=(2,9)]
  + │    │         ├── bool-or [type=bool, outer=(9)]
  + │    │         │    └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
  + │    │         └── any-not-null [type=int, outer=(2)]
  + │    │              └── variable: xy.y [type=int, outer=(2)]
  + │    └── projections [outer=(1,2,10)]
  + │         └── case [type=bool, outer=(1,10)]
  + │              ├── true [type=bool]
  + │              ├── when [type=bool, outer=(1,10)]
  + │              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
  + │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
  + │              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
  + │              │    │         ├── variable: xy.x [type=int, outer=(1)]
  + │              │    │         └── null [type=unknown]
  + │              │    └── true [type=bool]
  + │              ├── when [type=bool, outer=(10)]
  + │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
  + │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
  + │              │    │    └── null [type=unknown]
  + │              │    └── false [type=bool]
  + │              └── null [type=unknown]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
================================================================================
PruneProjectCols
  Cost: 2020.00
================================================================================
   project
    ├── columns: column8:8(bool)
    ├── project
  - │    ├── columns: case:11(bool) xy.x:1(int!null) xy.y:2(int)
  - │    ├── keys: (1)
  + │    ├── columns: case:11(bool)
    │    ├── group-by
    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) bool_or:10(bool)
    │    │    ├── grouping columns: xy.x:1(int!null)
    │    │    ├── keys: (1)
    │    │    ├── left-join
    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) a.k:3(int) notnull:9(bool)
    │    │    │    ├── scan xy
    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
    │    │    │    │    └── keys: (1)
    │    │    │    ├── project
    │    │    │    │    ├── columns: notnull:9(bool) a.k:3(int!null)
    │    │    │    │    ├── keys: (3)
    │    │    │    │    ├── scan a
    │    │    │    │    │    ├── columns: a.k:3(int!null)
    │    │    │    │    │    └── keys: (3)
    │    │    │    │    └── projections [outer=(3)]
    │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
    │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
    │    │    │    │              └── null [type=unknown]
    │    │    │    └── filters [type=bool, outer=(1,3)]
    │    │    │         └── is-not [type=bool, outer=(1,3)]
    │    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
    │    │    │              │    ├── variable: a.k [type=int, outer=(3)]
    │    │    │              │    └── variable: xy.x [type=int, outer=(1)]
    │    │    │              └── false [type=bool]
    │    │    └── aggregations [outer=(2,9)]
    │    │         ├── bool-or [type=bool, outer=(9)]
    │    │         │    └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
    │    │         └── any-not-null [type=int, outer=(2)]
    │    │              └── variable: xy.y [type=int, outer=(2)]
  - │    └── projections [outer=(1,2,10)]
  + │    └── projections [outer=(1,10)]
    │         └── case [type=bool, outer=(1,10)]
    │              ├── true [type=bool]
    │              ├── when [type=bool, outer=(1,10)]
    │              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
    │              │    │         ├── variable: xy.x [type=int, outer=(1)]
    │              │    │         └── null [type=unknown]
    │              │    └── true [type=bool]
    │              ├── when [type=bool, outer=(10)]
    │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │              │    │    └── null [type=unknown]
    │              │    └── false [type=bool]
    │              └── null [type=unknown]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
================================================================================
PruneAggCols
  Cost: 2020.00
================================================================================
   project
    ├── columns: column8:8(bool)
    ├── project
    │    ├── columns: case:11(bool)
    │    ├── group-by
  - │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) bool_or:10(bool)
  + │    │    ├── columns: xy.x:1(int!null) bool_or:10(bool)
    │    │    ├── grouping columns: xy.x:1(int!null)
    │    │    ├── keys: (1)
    │    │    ├── left-join
    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) a.k:3(int) notnull:9(bool)
    │    │    │    ├── scan xy
    │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
    │    │    │    │    └── keys: (1)
    │    │    │    ├── project
    │    │    │    │    ├── columns: notnull:9(bool) a.k:3(int!null)
    │    │    │    │    ├── keys: (3)
    │    │    │    │    ├── scan a
    │    │    │    │    │    ├── columns: a.k:3(int!null)
    │    │    │    │    │    └── keys: (3)
    │    │    │    │    └── projections [outer=(3)]
    │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
    │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
    │    │    │    │              └── null [type=unknown]
    │    │    │    └── filters [type=bool, outer=(1,3)]
    │    │    │         └── is-not [type=bool, outer=(1,3)]
    │    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
    │    │    │              │    ├── variable: a.k [type=int, outer=(3)]
    │    │    │              │    └── variable: xy.x [type=int, outer=(1)]
    │    │    │              └── false [type=bool]
  - │    │    └── aggregations [outer=(2,9)]
  - │    │         ├── bool-or [type=bool, outer=(9)]
  - │    │         │    └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
  - │    │         └── any-not-null [type=int, outer=(2)]
  - │    │              └── variable: xy.y [type=int, outer=(2)]
  + │    │    └── aggregations [outer=(9)]
  + │    │         └── bool-or [type=bool, outer=(9)]
  + │    │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
    │    └── projections [outer=(1,10)]
    │         └── case [type=bool, outer=(1,10)]
    │              ├── true [type=bool]
    │              ├── when [type=bool, outer=(1,10)]
    │              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
    │              │    │         ├── variable: xy.x [type=int, outer=(1)]
    │              │    │         └── null [type=unknown]
    │              │    └── true [type=bool]
    │              ├── when [type=bool, outer=(10)]
    │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │              │    │    └── null [type=unknown]
    │              │    └── false [type=bool]
    │              └── null [type=unknown]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
================================================================================
PruneGroupByCols
  Cost: 2020.00
================================================================================
   project
    ├── columns: column8:8(bool)
    ├── project
    │    ├── columns: case:11(bool)
    │    ├── group-by
    │    │    ├── columns: xy.x:1(int!null) bool_or:10(bool)
    │    │    ├── grouping columns: xy.x:1(int!null)
    │    │    ├── keys: (1)
  - │    │    ├── left-join
  - │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int) a.k:3(int) notnull:9(bool)
  - │    │    │    ├── scan xy
  - │    │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  - │    │    │    │    └── keys: (1)
  - │    │    │    ├── project
  - │    │    │    │    ├── columns: notnull:9(bool) a.k:3(int!null)
  - │    │    │    │    ├── keys: (3)
  - │    │    │    │    ├── scan a
  - │    │    │    │    │    ├── columns: a.k:3(int!null)
  - │    │    │    │    │    └── keys: (3)
  - │    │    │    │    └── projections [outer=(3)]
  - │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  - │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
  - │    │    │    │              └── null [type=unknown]
  - │    │    │    └── filters [type=bool, outer=(1,3)]
  - │    │    │         └── is-not [type=bool, outer=(1,3)]
  - │    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  - │    │    │              │    ├── variable: a.k [type=int, outer=(3)]
  - │    │    │              │    └── variable: xy.x [type=int, outer=(1)]
  - │    │    │              └── false [type=bool]
  + │    │    ├── project
  + │    │    │    ├── columns: xy.x:1(int!null) a.k:3(int) notnull:9(bool)
  + │    │    │    └── left-join
  + │    │    │         ├── columns: xy.x:1(int!null) xy.y:2(int) a.k:3(int) notnull:9(bool)
  + │    │    │         ├── scan xy
  + │    │    │         │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  + │    │    │         │    └── keys: (1)
  + │    │    │         ├── project
  + │    │    │         │    ├── columns: notnull:9(bool) a.k:3(int!null)
  + │    │    │         │    ├── keys: (3)
  + │    │    │         │    ├── scan a
  + │    │    │         │    │    ├── columns: a.k:3(int!null)
  + │    │    │         │    │    └── keys: (3)
  + │    │    │         │    └── projections [outer=(3)]
  + │    │    │         │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  + │    │    │         │              ├── variable: a.k [type=int, outer=(3)]
  + │    │    │         │              └── null [type=unknown]
  + │    │    │         └── filters [type=bool, outer=(1,3)]
  + │    │    │              └── is-not [type=bool, outer=(1,3)]
  + │    │    │                   ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  + │    │    │                   │    ├── variable: a.k [type=int, outer=(3)]
  + │    │    │                   │    └── variable: xy.x [type=int, outer=(1)]
  + │    │    │                   └── false [type=bool]
    │    │    └── aggregations [outer=(9)]
    │    │         └── bool-or [type=bool, outer=(9)]
    │    │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
    │    └── projections [outer=(1,10)]
    │         └── case [type=bool, outer=(1,10)]
    │              ├── true [type=bool]
    │              ├── when [type=bool, outer=(1,10)]
    │              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
    │              │    │         ├── variable: xy.x [type=int, outer=(1)]
    │              │    │         └── null [type=unknown]
    │              │    └── true [type=bool]
    │              ├── when [type=bool, outer=(10)]
    │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │              │    │    └── null [type=unknown]
    │              │    └── false [type=bool]
    │              └── null [type=unknown]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
================================================================================
PruneJoinLeftCols
  Cost: 2020.00
================================================================================
   project
    ├── columns: column8:8(bool)
    ├── project
    │    ├── columns: case:11(bool)
    │    ├── group-by
    │    │    ├── columns: xy.x:1(int!null) bool_or:10(bool)
    │    │    ├── grouping columns: xy.x:1(int!null)
    │    │    ├── keys: (1)
    │    │    ├── project
    │    │    │    ├── columns: xy.x:1(int!null) a.k:3(int) notnull:9(bool)
    │    │    │    └── left-join
  - │    │    │         ├── columns: xy.x:1(int!null) xy.y:2(int) a.k:3(int) notnull:9(bool)
  + │    │    │         ├── columns: xy.x:1(int!null) a.k:3(int) notnull:9(bool)
    │    │    │         ├── scan xy
  - │    │    │         │    ├── columns: xy.x:1(int!null) xy.y:2(int)
  + │    │    │         │    ├── columns: xy.x:1(int!null)
    │    │    │         │    └── keys: (1)
    │    │    │         ├── project
    │    │    │         │    ├── columns: notnull:9(bool) a.k:3(int!null)
    │    │    │         │    ├── keys: (3)
    │    │    │         │    ├── scan a
    │    │    │         │    │    ├── columns: a.k:3(int!null)
    │    │    │         │    │    └── keys: (3)
    │    │    │         │    └── projections [outer=(3)]
    │    │    │         │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
    │    │    │         │              ├── variable: a.k [type=int, outer=(3)]
    │    │    │         │              └── null [type=unknown]
    │    │    │         └── filters [type=bool, outer=(1,3)]
    │    │    │              └── is-not [type=bool, outer=(1,3)]
    │    │    │                   ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
    │    │    │                   │    ├── variable: a.k [type=int, outer=(3)]
    │    │    │                   │    └── variable: xy.x [type=int, outer=(1)]
    │    │    │                   └── false [type=bool]
    │    │    └── aggregations [outer=(9)]
    │    │         └── bool-or [type=bool, outer=(9)]
    │    │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
    │    └── projections [outer=(1,10)]
    │         └── case [type=bool, outer=(1,10)]
    │              ├── true [type=bool]
    │              ├── when [type=bool, outer=(1,10)]
    │              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
    │              │    │         ├── variable: xy.x [type=int, outer=(1)]
    │              │    │         └── null [type=unknown]
    │              │    └── true [type=bool]
    │              ├── when [type=bool, outer=(10)]
    │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │              │    │    └── null [type=unknown]
    │              │    └── false [type=bool]
    │              └── null [type=unknown]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
================================================================================
EliminateProject
  Cost: 2020.00
================================================================================
   project
    ├── columns: column8:8(bool)
    ├── project
    │    ├── columns: case:11(bool)
    │    ├── group-by
    │    │    ├── columns: xy.x:1(int!null) bool_or:10(bool)
    │    │    ├── grouping columns: xy.x:1(int!null)
    │    │    ├── keys: (1)
  - │    │    ├── project
  + │    │    ├── left-join
    │    │    │    ├── columns: xy.x:1(int!null) a.k:3(int) notnull:9(bool)
  - │    │    │    └── left-join
  - │    │    │         ├── columns: xy.x:1(int!null) a.k:3(int) notnull:9(bool)
  - │    │    │         ├── scan xy
  - │    │    │         │    ├── columns: xy.x:1(int!null)
  - │    │    │         │    └── keys: (1)
  - │    │    │         ├── project
  - │    │    │         │    ├── columns: notnull:9(bool) a.k:3(int!null)
  - │    │    │         │    ├── keys: (3)
  - │    │    │         │    ├── scan a
  - │    │    │         │    │    ├── columns: a.k:3(int!null)
  - │    │    │         │    │    └── keys: (3)
  - │    │    │         │    └── projections [outer=(3)]
  - │    │    │         │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  - │    │    │         │              ├── variable: a.k [type=int, outer=(3)]
  - │    │    │         │              └── null [type=unknown]
  - │    │    │         └── filters [type=bool, outer=(1,3)]
  - │    │    │              └── is-not [type=bool, outer=(1,3)]
  - │    │    │                   ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  - │    │    │                   │    ├── variable: a.k [type=int, outer=(3)]
  - │    │    │                   │    └── variable: xy.x [type=int, outer=(1)]
  - │    │    │                   └── false [type=bool]
  + │    │    │    ├── scan xy
  + │    │    │    │    ├── columns: xy.x:1(int!null)
  + │    │    │    │    └── keys: (1)
  + │    │    │    ├── project
  + │    │    │    │    ├── columns: notnull:9(bool) a.k:3(int!null)
  + │    │    │    │    ├── keys: (3)
  + │    │    │    │    ├── scan a
  + │    │    │    │    │    ├── columns: a.k:3(int!null)
  + │    │    │    │    │    └── keys: (3)
  + │    │    │    │    └── projections [outer=(3)]
  + │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  + │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
  + │    │    │    │              └── null [type=unknown]
  + │    │    │    └── filters [type=bool, outer=(1,3)]
  + │    │    │         └── is-not [type=bool, outer=(1,3)]
  + │    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  + │    │    │              │    ├── variable: a.k [type=int, outer=(3)]
  + │    │    │              │    └── variable: xy.x [type=int, outer=(1)]
  + │    │    │              └── false [type=bool]
    │    │    └── aggregations [outer=(9)]
    │    │         └── bool-or [type=bool, outer=(9)]
    │    │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
    │    └── projections [outer=(1,10)]
    │         └── case [type=bool, outer=(1,10)]
    │              ├── true [type=bool]
    │              ├── when [type=bool, outer=(1,10)]
    │              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
    │              │    │         ├── variable: xy.x [type=int, outer=(1)]
    │              │    │         └── null [type=unknown]
    │              │    └── true [type=bool]
    │              ├── when [type=bool, outer=(10)]
    │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
    │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
    │              │    │    └── null [type=unknown]
    │              │    └── false [type=bool]
    │              └── null [type=unknown]
    └── projections [outer=(11)]
         └── variable: case [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
================================================================================
InlineProjectInProject
  Cost: 2020.00
================================================================================
   project
    ├── columns: column8:8(bool)
  - ├── project
  - │    ├── columns: case:11(bool)
  - │    ├── group-by
  - │    │    ├── columns: xy.x:1(int!null) bool_or:10(bool)
  - │    │    ├── grouping columns: xy.x:1(int!null)
  - │    │    ├── keys: (1)
  - │    │    ├── left-join
  - │    │    │    ├── columns: xy.x:1(int!null) a.k:3(int) notnull:9(bool)
  - │    │    │    ├── scan xy
  - │    │    │    │    ├── columns: xy.x:1(int!null)
  - │    │    │    │    └── keys: (1)
  - │    │    │    ├── project
  - │    │    │    │    ├── columns: notnull:9(bool) a.k:3(int!null)
  - │    │    │    │    ├── keys: (3)
  - │    │    │    │    ├── scan a
  - │    │    │    │    │    ├── columns: a.k:3(int!null)
  - │    │    │    │    │    └── keys: (3)
  - │    │    │    │    └── projections [outer=(3)]
  - │    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  - │    │    │    │              ├── variable: a.k [type=int, outer=(3)]
  - │    │    │    │              └── null [type=unknown]
  - │    │    │    └── filters [type=bool, outer=(1,3)]
  - │    │    │         └── is-not [type=bool, outer=(1,3)]
  - │    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  - │    │    │              │    ├── variable: a.k [type=int, outer=(3)]
  - │    │    │              │    └── variable: xy.x [type=int, outer=(1)]
  - │    │    │              └── false [type=bool]
  - │    │    └── aggregations [outer=(9)]
  - │    │         └── bool-or [type=bool, outer=(9)]
  - │    │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
  - │    └── projections [outer=(1,10)]
  - │         └── case [type=bool, outer=(1,10)]
  - │              ├── true [type=bool]
  - │              ├── when [type=bool, outer=(1,10)]
  - │              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
  - │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
  - │              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
  - │              │    │         ├── variable: xy.x [type=int, outer=(1)]
  - │              │    │         └── null [type=unknown]
  - │              │    └── true [type=bool]
  - │              ├── when [type=bool, outer=(10)]
  - │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
  - │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
  - │              │    │    └── null [type=unknown]
  - │              │    └── false [type=bool]
  - │              └── null [type=unknown]
  - └── projections [outer=(11)]
  -      └── variable: case [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
  + ├── group-by
  + │    ├── columns: xy.x:1(int!null) bool_or:10(bool)
  + │    ├── grouping columns: xy.x:1(int!null)
  + │    ├── keys: (1)
  + │    ├── left-join
  + │    │    ├── columns: xy.x:1(int!null) a.k:3(int) notnull:9(bool)
  + │    │    ├── scan xy
  + │    │    │    ├── columns: xy.x:1(int!null)
  + │    │    │    └── keys: (1)
  + │    │    ├── project
  + │    │    │    ├── columns: notnull:9(bool) a.k:3(int!null)
  + │    │    │    ├── keys: (3)
  + │    │    │    ├── scan a
  + │    │    │    │    ├── columns: a.k:3(int!null)
  + │    │    │    │    └── keys: (3)
  + │    │    │    └── projections [outer=(3)]
  + │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
  + │    │    │              ├── variable: a.k [type=int, outer=(3)]
  + │    │    │              └── null [type=unknown]
  + │    │    └── filters [type=bool, outer=(1,3)]
  + │    │         └── is-not [type=bool, outer=(1,3)]
  + │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
  + │    │              │    ├── variable: a.k [type=int, outer=(3)]
  + │    │              │    └── variable: xy.x [type=int, outer=(1)]
  + │    │              └── false [type=bool]
  + │    └── aggregations [outer=(9)]
  + │         └── bool-or [type=bool, outer=(9)]
  + │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
  + └── projections [outer=(1,10)]
  +      └── case [type=bool, outer=(1,10)]
  +           ├── true [type=bool]
  +           ├── when [type=bool, outer=(1,10)]
  +           │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
  +           │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
  +           │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
  +           │    │         ├── variable: xy.x [type=int, outer=(1)]
  +           │    │         └── null [type=unknown]
  +           │    └── true [type=bool]
  +           ├── when [type=bool, outer=(10)]
  +           │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
  +           │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
  +           │    │    └── null [type=unknown]
  +           │    └── false [type=bool]
  +           └── null [type=unknown]
--------------------------------------------------------------------------------
GenerateIndexScans (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
GenerateIndexScans (higher cost)
--------------------------------------------------------------------------------
   project
    ├── columns: column8:8(bool)
    ├── group-by
    │    ├── columns: xy.x:1(int!null) bool_or:10(bool)
    │    ├── grouping columns: xy.x:1(int!null)
    │    ├── keys: (1)
    │    ├── left-join
    │    │    ├── columns: xy.x:1(int!null) a.k:3(int) notnull:9(bool)
    │    │    ├── scan xy
    │    │    │    ├── columns: xy.x:1(int!null)
    │    │    │    └── keys: (1)
    │    │    ├── project
    │    │    │    ├── columns: notnull:9(bool) a.k:3(int!null)
    │    │    │    ├── keys: (3)
  - │    │    │    ├── scan a
  + │    │    │    ├── scan a@secondary
    │    │    │    │    ├── columns: a.k:3(int!null)
    │    │    │    │    └── keys: (3)
    │    │    │    └── projections [outer=(3)]
    │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
    │    │    │              ├── variable: a.k [type=int, outer=(3)]
    │    │    │              └── null [type=unknown]
    │    │    └── filters [type=bool, outer=(1,3)]
    │    │         └── is-not [type=bool, outer=(1,3)]
    │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
    │    │              │    ├── variable: a.k [type=int, outer=(3)]
    │    │              │    └── variable: xy.x [type=int, outer=(1)]
    │    │              └── false [type=bool]
    │    └── aggregations [outer=(9)]
    │         └── bool-or [type=bool, outer=(9)]
    │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
    └── projections [outer=(1,10)]
         └── case [type=bool, outer=(1,10)]
              ├── true [type=bool]
              ├── when [type=bool, outer=(1,10)]
              │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
              │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
              │    │         ├── variable: xy.x [type=int, outer=(1)]
              │    │         └── null [type=unknown]
              │    └── true [type=bool]
              ├── when [type=bool, outer=(10)]
              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
              │    │    └── null [type=unknown]
              │    └── false [type=bool]
              └── null [type=unknown]
================================================================================
Final best expression
  Cost: 2020.00
================================================================================
  project
   ├── columns: column8:8(bool)
   ├── group-by
   │    ├── columns: xy.x:1(int!null) bool_or:10(bool)
   │    ├── grouping columns: xy.x:1(int!null)
   │    ├── keys: (1)
   │    ├── left-join
   │    │    ├── columns: xy.x:1(int!null) a.k:3(int) notnull:9(bool)
   │    │    ├── scan xy
   │    │    │    ├── columns: xy.x:1(int!null)
   │    │    │    └── keys: (1)
   │    │    ├── project
   │    │    │    ├── columns: notnull:9(bool) a.k:3(int!null)
   │    │    │    ├── keys: (3)
   │    │    │    ├── scan a
   │    │    │    │    ├── columns: a.k:3(int!null)
   │    │    │    │    └── keys: (3)
   │    │    │    └── projections [outer=(3)]
   │    │    │         └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
   │    │    │              ├── variable: a.k [type=int, outer=(3)]
   │    │    │              └── null [type=unknown]
   │    │    └── filters [type=bool, outer=(1,3)]
   │    │         └── is-not [type=bool, outer=(1,3)]
   │    │              ├── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
   │    │              │    ├── variable: a.k [type=int, outer=(3)]
   │    │              │    └── variable: xy.x [type=int, outer=(1)]
   │    │              └── false [type=bool]
   │    └── aggregations [outer=(9)]
   │         └── bool-or [type=bool, outer=(9)]
   │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
   └── projections [outer=(1,10)]
        └── case [type=bool, outer=(1,10)]
             ├── true [type=bool]
             ├── when [type=bool, outer=(1,10)]
             │    ├── and [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: [/true - /true]; tight)]
             │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
             │    │    └── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
             │    │         ├── variable: xy.x [type=int, outer=(1)]
             │    │         └── null [type=unknown]
             │    └── true [type=bool]
             ├── when [type=bool, outer=(10)]
             │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
             │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
             │    │    └── null [type=unknown]
             │    └── false [type=bool]
             └── null [type=unknown]
