exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON, arr int[])
----

exec-ddl
CREATE TABLE t (
  x INT PRIMARY KEY
)
----

# --------------------------------------------------
# FoldNullCast
# --------------------------------------------------
norm expect=FoldNullCast
SELECT
    null::int,
    null::timestamptz,
    null::decimal(19,2)::int::bit::char(2),
    null::oidvector,
    null::int2vector
----
values
 ├── columns: int8:1 timestamptz:2 bpchar:3 oid:4 int2:5
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1-5)
 └── (NULL, NULL, NULL, NULL, NULL)

# --------------------------------------------------
# FoldNullUnary
# --------------------------------------------------
norm expect=FoldNullUnary
SELECT +null::int AS r, -null::int AS s, ~null::int AS t FROM a
----
project
 ├── columns: r:7 s:8 t:9
 ├── fd: ()-->(7-9)
 ├── scan a
 └── projections
      ├── CAST(NULL AS INT8) [as=r:7]
      ├── CAST(NULL AS INT8) [as=s:8]
      └── CAST(NULL AS INT8) [as=t:9]

# --------------------------------------------------
# FoldNullBinaryLeft, FoldNullBinaryRight
# --------------------------------------------------
norm expect=(FoldNullBinaryLeft,FoldNullBinaryRight)
SELECT
    null::int & 1 AS ra, 1 & null::int AS rb,
    null::decimal + 1 AS sa, 1 + null::decimal AS sb,
    null::float % 1 AS ta, 1 % null::float AS tb,
    null::int << 4 AS ua, 4 << null::int AS ub,

    -- These shouldn't be folded because AllowNullArgs is true for concat with arrays.
    arr::decimal[] || null AS va, null || arr::string[] AS vb,

    -- Scalars concatenated with nulls match array overloads, and shouldn't be folded.
    -- In other words, the only overload for decimal concatenation is an array overload.
    i::decimal || null AS wa, null || i::float AS wb
FROM a
----
project
 ├── columns: ra:7 rb:8 sa:9 sb:10 ta:11 tb:12 ua:13 ub:14 va:15 vb:16 wa:17 wb:18
 ├── fd: ()-->(7-14)
 ├── scan a
 │    └── columns: i:2 arr:6
 └── projections
      ├── CAST(NULL AS INT8) [as=ra:7]
      ├── CAST(NULL AS INT8) [as=rb:8]
      ├── CAST(NULL AS DECIMAL) [as=sa:9]
      ├── CAST(NULL AS DECIMAL) [as=sb:10]
      ├── CAST(NULL AS FLOAT8) [as=ta:11]
      ├── CAST(NULL AS FLOAT8) [as=tb:12]
      ├── CAST(NULL AS INT8) [as=ua:13]
      ├── CAST(NULL AS INT8) [as=ub:14]
      ├── arr:6::DECIMAL[] || CAST(NULL AS DECIMAL[]) [as=va:15, outer=(6)]
      ├── CAST(NULL AS STRING[]) || arr:6::STRING[] [as=vb:16, outer=(6)]
      ├── i:2::DECIMAL || CAST(NULL AS DECIMAL[]) [as=wa:17, outer=(2)]
      └── CAST(NULL AS FLOAT8[]) || i:2::FLOAT8 [as=wb:18, outer=(2)]

norm
SELECT
    null::json || '[1, 2]' AS ra, '[1, 2]' || null::json AS rb,
    null::json->'foo' AS sa, '{}'::jsonb->null::string AS sb,
    null::json->>'foo' AS ta, '{}'::jsonb->>null::string AS tb,
    null::json->>'foo' AS ua, '{}'::jsonb->>null::string AS ub,
    null::json#>ARRAY['foo'] AS va, '{}'::jsonb#>NULL AS vb,
    null::json#>>ARRAY['foo'] AS wa, '{}'::jsonb#>>NULL AS wb
FROM a
----
project
 ├── columns: ra:7 rb:8 sa:9 sb:10 ta:11 tb:12 ua:11 ub:12 va:13 vb:14 wa:15 wb:14
 ├── fd: ()-->(7-15)
 ├── scan a
 └── projections
      ├── CAST(NULL AS JSONB) [as=ra:7]
      ├── CAST(NULL AS JSONB) [as=rb:8]
      ├── CAST(NULL AS JSONB) [as=sa:9]
      ├── CAST(NULL AS JSONB) [as=sb:10]
      ├── CAST(NULL AS STRING) [as=ta:11]
      ├── CAST(NULL AS STRING) [as=tb:12]
      ├── CAST(NULL AS JSONB) [as=va:13]
      ├── NULL [as=vb:14]
      └── CAST(NULL AS STRING) [as=wa:15]

# --------------------------------------------------
# FoldNullInNonEmpty
# --------------------------------------------------
norm expect=FoldNullInNonEmpty
SELECT null IN (i) AS r, null NOT IN (s) AS s FROM a
----
project
 ├── columns: r:7 s:8
 ├── fd: ()-->(7,8)
 ├── scan a
 └── projections
      ├── CAST(NULL AS BOOL) [as=r:7]
      └── CAST(NULL AS BOOL) [as=s:8]

# --------------------------------------------------
# FoldInNull
# --------------------------------------------------
norm expect=FoldInNull
SELECT i IN (null, null) AS r, k NOT IN (1 * null, null::int, 1 < null) AS s FROM a
----
project
 ├── columns: r:7 s:8
 ├── fd: ()-->(7,8)
 ├── scan a
 └── projections
      ├── CAST(NULL AS BOOL) [as=r:7]
      └── CAST(NULL AS BOOL) [as=s:8]

# --------------------------------------------------
# FoldInEmpty
# --------------------------------------------------
norm expect=FoldInEmpty
SELECT 1 IN ()
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (false,)

norm expect=FoldInEmpty
SELECT NULL IN ()
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (false,)

norm expect=FoldInEmpty
SELECT i FROM a WHERE i = ANY ARRAY[]
----
values
 ├── columns: i:2!null
 ├── cardinality: [0 - 0]
 ├── key: ()
 └── fd: ()-->(2)

# --------------------------------------------------
# FoldNotInEmpty
# --------------------------------------------------
norm expect=FoldNotInEmpty
SELECT 1 NOT IN ()
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (true,)

norm expect=FoldNotInEmpty
SELECT NULL NOT IN ()
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (true,)

# --------------------------------------------------
# FoldArray
# --------------------------------------------------
norm expect=FoldArray
SELECT ARRAY[1, 2, 3] FROM t
----
project
 ├── columns: array:2!null
 ├── fd: ()-->(2)
 ├── scan t
 └── projections
      └── ARRAY[1,2,3] [as=array:2]

# Do not fold if there is a non-constant element.
norm expect-not=FoldArray
SELECT ARRAY[1, 2, 3, x] FROM t
----
project
 ├── columns: array:2!null
 ├── scan t
 │    ├── columns: x:1!null
 │    └── key: (1)
 └── projections
      └── ARRAY[1, 2, 3, x:1] [as=array:2, outer=(1)]

norm expect=FoldArray
SELECT ARRAY['foo', 'bar']
----
values
 ├── columns: array:1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (ARRAY['foo','bar'],)

# --------------------------------------------------
# FoldBinary
# --------------------------------------------------
# Fold constant.
norm expect=FoldBinary
SELECT 1::INT + 2::DECIMAL
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (3,)

# Don't fold: out of range error.
norm expect-not=FoldBinary
SELECT 9223372036854775800::INT + 9223372036854775800::INT
----
values
 ├── columns: "?column?":1
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (9223372036854775800 + 9223372036854775800,)

# Fold constant.
norm expect=FoldBinary
SELECT 1::INT - 2::INT
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (-1,)

# Don't fold: out of range error.
norm expect-not=FoldBinary
SELECT (-9223372036854775800)::INT - 9223372036854775800::INT
----
values
 ├── columns: "?column?":1
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (-9223372036854775800 - 9223372036854775800,)

# Fold constant.
norm expect=FoldBinary
SELECT 4::INT * 2::INT
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (8,)

# Don't fold: out of range error.
norm expect-not=FoldBinary
SELECT 9223372036854775800::INT * 9223372036854775800::INT
----
values
 ├── columns: "?column?":1
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (9223372036854775800 * 9223372036854775800,)

# Fold constant.
norm expect=FoldBinary
SELECT 1::FLOAT / 2::FLOAT
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (0.5,)

# Don't fold: divide by zero error.
norm expect-not=FoldBinary
SELECT 1::INT / 0::INT
----
values
 ├── columns: "?column?":1
 ├── cardinality: [1 - 1]
 ├── side-effects
 ├── key: ()
 ├── fd: ()-->(1)
 └── (1 / 0,)

# Fold constant.
norm expect=FoldBinary
SELECT B'01' # B'11'
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (B'10',)

# Don't fold: cannot mix bit array sizes error.
norm expect-not=FoldBinary
SELECT B'01' # B'11001001010101'
----
values
 ├── columns: "?column?":1
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (B'01' # B'11001001010101',)

# Fold constant.
norm expect=FoldBinary
SELECT B'01' | B'11'
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (B'11',)

# Don't fold: cannot mix bit array sizes error.
norm expect-not=FoldBinary
SELECT B'01' | B'11001001010101'
----
values
 ├── columns: "?column?":1
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (B'01' | B'11001001010101',)

# Fold constant.
norm expect=FoldBinary
SELECT '2000-05-05 10:00:00+03':::TIMESTAMP - '2000-05-06 10:00:00+03':::TIMESTAMP
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── ('-24:00:00',)

# Fold constant.
norm expect=FoldBinary
SELECT '2000-05-05 10:00:00+03':::TIMESTAMP - '2000-05-06 10:00:00+03':::TIMESTAMPTZ
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── ('-21:00:00',)

# Fold constant.
norm expect=FoldBinary
SELECT ARRAY['a','b','c'] || 'd'::string
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (ARRAY['a','b','c','d'],)

# Fold constant.
norm expect=FoldBinary
SELECT ARRAY['a','b','c'] || ARRAY['d','e','f']
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (ARRAY['a','b','c','d','e','f'],)

# NULL should not be added to the array.
norm expect=FoldBinary
SELECT ARRAY[1,2,3] || NULL
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (ARRAY[1,2,3],)

# Regression test for #34270.
norm expect=FoldBinary
VALUES ((e'{}' ->> 0) || (e'{}' ->> 0))
----
values
 ├── columns: column1:1
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (NULL,)

# --------------------------------------------------
# FoldUnary
# --------------------------------------------------
norm expect=FoldUnary
SELECT -(1:::int)
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (-1,)

norm expect=FoldUnary
SELECT -(1:::float)
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (-1.0,)

# TODO(justin): it would be better if this produced an error in the optimizer
# rather than falling back to execution to error.
norm expect-not=FoldUnary format=show-all
SELECT -((-9223372036854775808)::int)
----
values
 ├── columns: "?column?":1(int)
 ├── cardinality: [1 - 1]
 ├── stats: [rows=1]
 ├── cost: 0.02
 ├── key: ()
 ├── fd: ()-->(1)
 ├── prune: (1)
 └── tuple [type=tuple{int}]
      └── unary-minus [type=int]
           └── const: -9223372036854775808 [type=int]

norm expect=FoldUnary format=show-all
SELECT -(1:::decimal)
----
values
 ├── columns: "?column?":1(decimal!null)
 ├── cardinality: [1 - 1]
 ├── stats: [rows=1]
 ├── cost: 0.02
 ├── key: ()
 ├── fd: ()-->(1)
 ├── prune: (1)
 └── tuple [type=tuple{decimal}]
      └── const: -1 [type=decimal]

norm expect=FoldUnary format=show-all
SELECT -('-1d'::interval);
----
values
 ├── columns: "?column?":1(interval!null)
 ├── cardinality: [1 - 1]
 ├── stats: [rows=1]
 ├── cost: 0.02
 ├── key: ()
 ├── fd: ()-->(1)
 ├── prune: (1)
 └── tuple [type=tuple{interval}]
      └── const: '1 day' [type=interval]

# TODO(justin): this seems incorrect but it's consistent with the existing
# planner. Revisit this: #26932.
norm expect=FoldUnary
SELECT -('-9223372036854775808d'::interval);
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── ('-9223372036854775808 days',)

# Fold constant.
norm expect=FoldUnary
SELECT ~(500::INT)
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (-501,)

# Fold constant.
norm expect=FoldUnary
SELECT ~('35.231.178.195'::INET)
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── ('220.24.77.60',)

# --------------------------------------------------
# FoldComparison
# --------------------------------------------------
norm expect=FoldComparison
SELECT 1::INT < 2::INT
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (true,)

norm expect=FoldComparison
SELECT 1::INT > 2::INT
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (false,)

norm expect=FoldComparison
SELECT 10.0::FLOAT <= 20.0::FLOAT
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (true,)

norm expect=FoldComparison
SELECT 10.0::FLOAT >= 20.0::FLOAT
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (false,)

norm expect=FoldComparison
SELECT 2.0::DECIMAL = 2::INT
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (true,)

norm expect=FoldComparison
SELECT 2.0::DECIMAL != 2::INT
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (false,)

norm expect=FoldComparison
SELECT 100 IS NOT DISTINCT FROM 200
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (false,)

norm expect=FoldComparison
SELECT 100 IS DISTINCT FROM 200
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (true,)

norm expect=FoldComparison
SELECT 'foo' IN ('a', 'b', 'c')
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (false,)

norm expect=FoldComparison
SELECT 'foo' NOT IN ('a', 'b', 'c')
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (true,)

norm expect=FoldComparison
SELECT 'foo' LIKE 'foobar'
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (false,)

norm expect=FoldComparison
SELECT 'foo' NOT LIKE 'foobar'
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (true,)

norm expect=FoldComparison
SELECT 'foo' ILIKE 'FOO%'
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (true,)

norm expect=FoldComparison
SELECT 'foo' NOT ILIKE 'FOO%'
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (false,)

norm expect=FoldComparison
SELECT 'monday' SIMILAR TO '_onday'
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (true,)

norm expect=FoldComparison
SELECT 'monday' NOT SIMILAR TO '_onday'
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (false,)

norm expect=FoldComparison
SELECT 'tuEsday' ~ 't[uU][eE]sday'
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (true,)

norm expect=FoldComparison
SELECT 'tuEsday' !~ 't[uU][eE]sday'
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (false,)

norm expect=FoldComparison
SELECT 'wednesday' ~* 'W.*y'
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (true,)

norm expect=FoldComparison
SELECT 'wednesday' !~* 'W.*y'
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (false,)

norm expect=FoldComparison
SELECT '[1, 2]'::JSONB <@ '[1, 2, 3]'::JSONB
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (true,)

norm expect=FoldComparison
SELECT ('a', 'b', 'c') = ('d', 'e', 'f')
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (false,)

# --------------------------------------------------
# FoldCast
# --------------------------------------------------
norm expect=FoldCast
SELECT 1::int/1
----
values
 ├── columns: "?column?":1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (1,)

# --------------------------------------------------
# FoldFunction
# --------------------------------------------------
norm expect=FoldFunction
SELECT length('abc'), upper('xyz'), lower('DEF')
----
values
 ├── columns: length:1!null upper:2!null lower:3!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1-3)
 └── (3, 'XYZ', 'def')

norm expect=FoldFunction
SELECT encode('abc', 'hex'), decode('616263', 'hex')
----
values
 ├── columns: encode:1!null decode:2!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1,2)
 └── ('616263', '\x616263')

norm expect=FoldFunction locality=(region=east,dc=east1-b)
SELECT crdb_internal.locality_value('dc')
----
values
 ├── columns: crdb_internal.locality_value:1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── ('east1-b',)

norm expect=FoldFunction
SELECT crdb_internal.locality_value('unk')
----
values
 ├── columns: crdb_internal.locality_value:1
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (NULL,)

norm expect-not=FoldFunction
SELECT now(), current_user(), current_database()
----
values
 ├── columns: now:1 current_user:2 current_database:3
 ├── cardinality: [1 - 1]
 ├── side-effects
 ├── key: ()
 ├── fd: ()-->(1-3)
 └── (now(), current_user(), current_database())

# --------------------------------------------------
# FoldIndirection
# --------------------------------------------------
# Fold when input is a static array constructor (but elements are not constant).
norm expect=FoldIndirection
SELECT ARRAY[i, i + 1][1] FROM a
----
project
 ├── columns: array:7
 ├── scan a
 │    └── columns: i:2
 └── projections
      └── i:2 [as=array:7, outer=(2)]

norm expect=FoldIndirection
SELECT ARRAY[i, i + 1][2] FROM a
----
project
 ├── columns: array:7
 ├── scan a
 │    └── columns: i:2
 └── projections
      └── i:2 + 1 [as=array:7, outer=(2)]

# Fold when input is a DArray constant.
norm expect=FoldIndirection
SELECT ARRAY[4, 5, 6][2] FROM a
----
project
 ├── columns: array:7!null
 ├── fd: ()-->(7)
 ├── scan a
 └── projections
      └── 5 [as=array:7]

# Array bounds are out-of-range.
norm expect=FoldIndirection
SELECT ARRAY[s, 'foo'][0] FROM a
----
project
 ├── columns: array:7
 ├── fd: ()-->(7)
 ├── scan a
 └── projections
      └── CAST(NULL AS STRING) [as=array:7]

norm expect=FoldIndirection
SELECT ARRAY[i, i + 1][3] FROM a
----
project
 ├── columns: array:7
 ├── fd: ()-->(7)
 ├── scan a
 └── projections
      └── CAST(NULL AS INT8) [as=array:7]

norm expect=FoldIndirection
SELECT ARRAY[4, 5, 6][0] FROM a
----
project
 ├── columns: array:7
 ├── fd: ()-->(7)
 ├── scan a
 └── projections
      └── CAST(NULL AS INT8) [as=array:7]

# Array is dynamically constructed.
norm expect-not=FoldIndirection
SELECT arr[0] FROM a
----
project
 ├── columns: arr:7
 ├── scan a
 │    └── columns: a.arr:6
 └── projections
      └── a.arr:6[0] [as=arr:7, outer=(6)]

# Regression test for #40404.
norm expect=FoldIndirection
SELECT (SELECT x[1]) FROM (VALUES(null::oid[])) v(x)
----
values
 ├── columns: x:3
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(3)
 └── tuple
      └── subquery
           └── values
                ├── columns: x:2
                ├── cardinality: [1 - 1]
                ├── key: ()
                ├── fd: ()-->(2)
                └── (NULL,)

# --------------------------------------------------
# FoldColumnAccess
# --------------------------------------------------
# Fold when input is a static tuple constructor (but elements are not constant).
# NOTE: Use constant array access to avoid triggering ColumnAccess::TypeCheck
#       constant tuple folding.
norm expect=FoldColumnAccess
SELECT (ARRAY[(('foo', i) AS foo, bar)][1]).foo FROM a
----
project
 ├── columns: foo:7!null
 ├── fd: ()-->(7)
 ├── scan a
 └── projections
      └── 'foo' [as=foo:7]

norm expect=FoldColumnAccess
SELECT (ARRAY[(('foo', i) AS foo, bar)][1]).bar FROM a
----
project
 ├── columns: bar:7
 ├── scan a
 │    └── columns: i:2
 └── projections
      └── i:2 [as=bar:7, outer=(2)]

# Fold when input is a constant DTuple.
norm expect=FoldColumnAccess
SELECT (ARRAY[(('foo', 'bar') AS foo, bar)][1]).foo
----
values
 ├── columns: foo:1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── ('foo',)

# --------------------------------------------------
# FoldEqualsAnyNull
# --------------------------------------------------
norm expect=FoldEqualsAnyNull
SELECT * FROM a WHERE i = ANY (NULL::int[])
----
values
 ├── columns: k:1!null i:2!null f:3!null s:4!null j:5!null arr:6!null
 ├── cardinality: [0 - 0]
 ├── key: ()
 └── fd: ()-->(1-6)
