exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 └── INDEX primary
      └── k int not null

exec-ddl
CREATE TABLE xy (x INT PRIMARY KEY, y INT)
----
TABLE xy
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE uv (u INT PRIMARY KEY, v INT)
----
TABLE uv
 ├── u int not null
 ├── v int
 └── INDEX primary
      └── u int not null

# --------------------------------------------------
# DecorrelateJoin
# --------------------------------------------------
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM xy WHERE x=k)
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── scan xy
 │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
           ├── variable: xy.x [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM xy WHERE x=k)
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── scan xy
 │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
           ├── variable: xy.x [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

# --------------------------------------------------
# TryDecorrelateSelect
# --------------------------------------------------
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM (VALUES (k), (i)) WHERE column1=k)
----
semi-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── values
 │    ├── columns: column1:6(int)
 │    ├── outer: (1,2)
 │    ├── cardinality: [2 - 2]
 │    ├── tuple [type=tuple{int}, outer=(1)]
 │    │    └── variable: a.k [type=int, outer=(1)]
 │    └── tuple [type=tuple{int}, outer=(2)]
 │         └── variable: a.i [type=int, outer=(2)]
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
           ├── variable: column1 [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM (VALUES (k), (i)) WHERE column1=k)
----
anti-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── values
 │    ├── columns: column1:6(int)
 │    ├── outer: (1,2)
 │    ├── cardinality: [2 - 2]
 │    ├── tuple [type=tuple{int}, outer=(1)]
 │    │    └── variable: a.k [type=int, outer=(1)]
 │    └── tuple [type=tuple{int}, outer=(2)]
 │         └── variable: a.i [type=int, outer=(2)]
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
           ├── variable: column1 [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

# Attempt to decorrelate query by pulling up outer select. But since limit query
# cannot be decorrelated, push the outer select back down again (and make sure
# potential rule cycle is detected and handled).
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM (SELECT * FROM xy WHERE y=k LIMIT 1) WHERE y=10)
----
semi-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── select
 │    ├── columns: xy.x:6(int!null) xy.y:7(int!null)
 │    ├── outer: (1)
 │    ├── cardinality: [0 - 1]
 │    ├── keys: (6)
 │    ├── limit
 │    │    ├── columns: xy.x:6(int!null) xy.y:7(int!null)
 │    │    ├── outer: (1)
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── keys: (6)
 │    │    ├── select
 │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int!null)
 │    │    │    ├── outer: (1)
 │    │    │    ├── keys: (6)
 │    │    │    ├── scan xy
 │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    │    │    │    └── keys: (6)
 │    │    │    └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
 │    │    │         └── eq [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
 │    │    │              ├── variable: xy.y [type=int, outer=(7)]
 │    │    │              └── variable: a.k [type=int, outer=(1)]
 │    │    └── const: 1 [type=int]
 │    └── filters [type=bool, outer=(7), constraints=(/7: [/10 - /10]; tight)]
 │         └── eq [type=bool, outer=(7), constraints=(/7: [/10 - /10]; tight)]
 │              ├── variable: xy.y [type=int, outer=(7)]
 │              └── const: 10 [type=int]
 └── true [type=bool]

# Same as previous, but using anti-join.
opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM (SELECT * FROM xy WHERE y=k LIMIT 1) WHERE y=10)
----
anti-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── select
 │    ├── columns: xy.x:6(int!null) xy.y:7(int!null)
 │    ├── outer: (1)
 │    ├── cardinality: [0 - 1]
 │    ├── keys: (6)
 │    ├── limit
 │    │    ├── columns: xy.x:6(int!null) xy.y:7(int!null)
 │    │    ├── outer: (1)
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── keys: (6)
 │    │    ├── select
 │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int!null)
 │    │    │    ├── outer: (1)
 │    │    │    ├── keys: (6)
 │    │    │    ├── scan xy
 │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    │    │    │    └── keys: (6)
 │    │    │    └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
 │    │    │         └── eq [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
 │    │    │              ├── variable: xy.y [type=int, outer=(7)]
 │    │    │              └── variable: a.k [type=int, outer=(1)]
 │    │    └── const: 1 [type=int]
 │    └── filters [type=bool, outer=(7), constraints=(/7: [/10 - /10]; tight)]
 │         └── eq [type=bool, outer=(7), constraints=(/7: [/10 - /10]; tight)]
 │              ├── variable: xy.y [type=int, outer=(7)]
 │              └── const: 10 [type=int]
 └── true [type=bool]

# Decorrelate Select with LeftJoinApply.
opt
SELECT * FROM a WHERE (SELECT x FROM (SELECT * FROM xy LIMIT 1) WHERE k=x) > 100
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 └── select
      ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int!null)
      ├── keys: (1)
      ├── left-join
      │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int)
      │    ├── keys: (1)
      │    ├── scan a
      │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
      │    │    └── keys: (1)
      │    ├── scan xy
      │    │    ├── columns: xy.x:6(int!null)
      │    │    ├── limit: 1
      │    │    └── keys: (6)
      │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      │         └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      │              ├── variable: a.k [type=int, outer=(1)]
      │              └── variable: xy.x [type=int, outer=(6)]
      └── filters [type=bool, outer=(6), constraints=(/6: [/101 - ]; tight)]
           └── gt [type=bool, outer=(6), constraints=(/6: [/101 - ]; tight)]
                ├── variable: xy.x [type=int, outer=(6)]
                └── const: 100 [type=int]

# Decorrelate with non-apply operator because of multi-level nesting.
opt
SELECT *
FROM a
WHERE EXISTS(SELECT * FROM xy WHERE x=k AND EXISTS(SELECT * FROM uv WHERE u=10 AND s='foo'))
----
semi-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── semi-join
 │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    ├── outer: (4)
 │    ├── keys: (6)
 │    ├── scan xy
 │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    │    └── keys: (6)
 │    ├── scan uv
 │    │    ├── columns: uv.u:8(int!null) uv.v:9(int)
 │    │    ├── constraint: /8: [/10 - /10]
 │    │    └── keys: (8)
 │    └── filters [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │         └── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │              ├── variable: a.s [type=string, outer=(4)]
 │              └── const: 'foo' [type=string]
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
           ├── variable: xy.x [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

# --------------------------------------------------
# TryDecorrelateProject +
# TryDecorrelateProjectSelect +
# TryDecorrelateScalarGroupBy
#
# Start with some shared test cases that exercise multiple
# decorrelation rules.
# --------------------------------------------------

# Left join caused by correlated ANY clause.
opt
SELECT 5=ANY(SELECT y FROM xy WHERE x=k) FROM a
----
project
 ├── columns: column8:8(bool)
 ├── group-by
 │    ├── columns: a.k:1(int!null) bool_or:10(bool)
 │    ├── grouping columns: a.k:1(int!null)
 │    ├── keys: (1)
 │    ├── left-join
 │    │    ├── columns: a.k:1(int!null) xy.x:6(int) notnull:9(bool)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:1(int!null)
 │    │    │    └── keys: (1)
 │    │    ├── project
 │    │    │    ├── columns: notnull:9(bool) xy.x:6(int!null)
 │    │    │    ├── keys: (6)
 │    │    │    ├── select
 │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    │    │    │    ├── keys: (6)
 │    │    │    │    ├── scan xy
 │    │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    │    │    │    │    └── keys: (6)
 │    │    │    │    └── filters [type=bool, outer=(7)]
 │    │    │    │         └── is-not [type=bool, outer=(7)]
 │    │    │    │              ├── eq [type=bool, outer=(7), constraints=(/7: [/5 - /5]; tight)]
 │    │    │    │              │    ├── variable: xy.y [type=int, outer=(7)]
 │    │    │    │              │    └── const: 5 [type=int]
 │    │    │    │              └── false [type=bool]
 │    │    │    └── projections [outer=(6,7)]
 │    │    │         └── is-not [type=bool, outer=(7), constraints=(/7: (/NULL - ]; tight)]
 │    │    │              ├── variable: xy.y [type=int, outer=(7)]
 │    │    │              └── null [type=unknown]
 │    │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │         └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │              ├── variable: xy.x [type=int, outer=(6)]
 │    │              └── variable: a.k [type=int, outer=(1)]
 │    └── aggregations [outer=(9)]
 │         └── bool-or [type=bool, outer=(9)]
 │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
 └── projections [outer=(10)]
      └── case [type=bool, outer=(10)]
           ├── true [type=bool]
           ├── when [type=bool, outer=(10)]
           │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
           │    └── true [type=bool]
           ├── when [type=bool, outer=(10)]
           │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
           │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
           │    │    └── null [type=unknown]
           │    └── false [type=bool]
           └── null [type=unknown]

# Left join caused by zero or one cardinality subquery.
opt
SELECT * FROM a WHERE (SELECT y+1 FROM (SELECT * FROM xy LIMIT 1) WHERE x=k) > 10
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 └── select
      ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int) column8:8(int!null)
      ├── keys: (1)
      ├── left-join
      │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int) column8:8(int)
      │    ├── keys: (1)
      │    ├── scan a
      │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
      │    │    └── keys: (1)
      │    ├── project
      │    │    ├── columns: column8:8(int) xy.x:6(int!null)
      │    │    ├── cardinality: [0 - 1]
      │    │    ├── keys: (6)
      │    │    ├── scan xy
      │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
      │    │    │    ├── limit: 1
      │    │    │    └── keys: (6)
      │    │    └── projections [outer=(6,7)]
      │    │         └── plus [type=int, outer=(7)]
      │    │              ├── variable: xy.y [type=int, outer=(7)]
      │    │              └── const: 1 [type=int]
      │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      │         └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      │              ├── variable: xy.x [type=int, outer=(6)]
      │              └── variable: a.k [type=int, outer=(1)]
      └── filters [type=bool, outer=(8), constraints=(/8: [/11 - ]; tight)]
           └── gt [type=bool, outer=(8), constraints=(/8: [/11 - ]; tight)]
                ├── variable: column8 [type=int, outer=(8)]
                └── const: 10 [type=int]

# Any clause with constant.
opt
SELECT 5=ANY(SELECT y FROM xy WHERE x=k) FROM a
----
project
 ├── columns: column8:8(bool)
 ├── group-by
 │    ├── columns: a.k:1(int!null) bool_or:10(bool)
 │    ├── grouping columns: a.k:1(int!null)
 │    ├── keys: (1)
 │    ├── left-join
 │    │    ├── columns: a.k:1(int!null) xy.x:6(int) notnull:9(bool)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:1(int!null)
 │    │    │    └── keys: (1)
 │    │    ├── project
 │    │    │    ├── columns: notnull:9(bool) xy.x:6(int!null)
 │    │    │    ├── keys: (6)
 │    │    │    ├── select
 │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    │    │    │    ├── keys: (6)
 │    │    │    │    ├── scan xy
 │    │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    │    │    │    │    └── keys: (6)
 │    │    │    │    └── filters [type=bool, outer=(7)]
 │    │    │    │         └── is-not [type=bool, outer=(7)]
 │    │    │    │              ├── eq [type=bool, outer=(7), constraints=(/7: [/5 - /5]; tight)]
 │    │    │    │              │    ├── variable: xy.y [type=int, outer=(7)]
 │    │    │    │              │    └── const: 5 [type=int]
 │    │    │    │              └── false [type=bool]
 │    │    │    └── projections [outer=(6,7)]
 │    │    │         └── is-not [type=bool, outer=(7), constraints=(/7: (/NULL - ]; tight)]
 │    │    │              ├── variable: xy.y [type=int, outer=(7)]
 │    │    │              └── null [type=unknown]
 │    │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │         └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │              ├── variable: xy.x [type=int, outer=(6)]
 │    │              └── variable: a.k [type=int, outer=(1)]
 │    └── aggregations [outer=(9)]
 │         └── bool-or [type=bool, outer=(9)]
 │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
 └── projections [outer=(10)]
      └── case [type=bool, outer=(10)]
           ├── true [type=bool]
           ├── when [type=bool, outer=(10)]
           │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
           │    └── true [type=bool]
           ├── when [type=bool, outer=(10)]
           │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
           │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
           │    │    └── null [type=unknown]
           │    └── false [type=bool]
           └── null [type=unknown]

# Any clause with variable.
opt
SELECT i=ANY(SELECT y FROM xy WHERE x=k) FROM a
----
project
 ├── columns: column8:8(bool)
 ├── group-by
 │    ├── columns: a.k:1(int!null) a.i:2(int) bool_or:10(bool)
 │    ├── grouping columns: a.k:1(int!null)
 │    ├── keys: (1)
 │    ├── left-join
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) xy.x:6(int) xy.y:7(int) notnull:9(bool)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    │    │    └── keys: (1)
 │    │    ├── project
 │    │    │    ├── columns: notnull:9(bool) xy.x:6(int!null) xy.y:7(int)
 │    │    │    ├── keys: (6)
 │    │    │    ├── scan xy
 │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    │    │    │    └── keys: (6)
 │    │    │    └── projections [outer=(6,7)]
 │    │    │         └── is-not [type=bool, outer=(7), constraints=(/7: (/NULL - ]; tight)]
 │    │    │              ├── variable: xy.y [type=int, outer=(7)]
 │    │    │              └── null [type=unknown]
 │    │    └── filters [type=bool, outer=(1,2,6,7), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │         ├── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │         │    ├── variable: xy.x [type=int, outer=(6)]
 │    │         │    └── variable: a.k [type=int, outer=(1)]
 │    │         └── is-not [type=bool, outer=(2,7)]
 │    │              ├── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
 │    │              │    ├── variable: xy.y [type=int, outer=(7)]
 │    │              │    └── variable: a.i [type=int, outer=(2)]
 │    │              └── false [type=bool]
 │    └── aggregations [outer=(2,9)]
 │         ├── bool-or [type=bool, outer=(9)]
 │         │    └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
 │         └── any-not-null [type=int, outer=(2)]
 │              └── variable: a.i [type=int, outer=(2)]
 └── projections [outer=(2,10)]
      └── case [type=bool, outer=(2,10)]
           ├── true [type=bool]
           ├── when [type=bool, outer=(2,10)]
           │    ├── and [type=bool, outer=(2,10), constraints=(/2: (/NULL - ]; /10: [/true - /true]; tight)]
           │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
           │    │    └── is-not [type=bool, outer=(2), constraints=(/2: (/NULL - ]; tight)]
           │    │         ├── variable: a.i [type=int, outer=(2)]
           │    │         └── null [type=unknown]
           │    └── true [type=bool]
           ├── when [type=bool, outer=(10)]
           │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
           │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
           │    │    └── null [type=unknown]
           │    └── false [type=bool]
           └── null [type=unknown]

# Any clause with more complex expression that must be cached.
opt
SELECT i*i/5=ANY(SELECT y FROM xy WHERE x=k) FROM a
----
project
 ├── columns: column8:8(bool)
 ├── group-by
 │    ├── columns: a.k:1(int!null) scalar:9(decimal) bool_or:11(bool)
 │    ├── grouping columns: a.k:1(int!null)
 │    ├── keys: (1)
 │    ├── left-join
 │    │    ├── columns: a.k:1(int!null) xy.x:6(int) xy.y:7(int) scalar:9(decimal) notnull:10(bool)
 │    │    ├── project
 │    │    │    ├── columns: scalar:9(decimal) a.k:1(int!null)
 │    │    │    ├── keys: (1)
 │    │    │    ├── scan a
 │    │    │    │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    │    │    │    └── keys: (1)
 │    │    │    └── projections [outer=(1,2)]
 │    │    │         └── div [type=decimal, outer=(2)]
 │    │    │              ├── mult [type=int, outer=(2)]
 │    │    │              │    ├── variable: a.i [type=int, outer=(2)]
 │    │    │              │    └── variable: a.i [type=int, outer=(2)]
 │    │    │              └── const: 5 [type=int]
 │    │    ├── project
 │    │    │    ├── columns: notnull:10(bool) xy.x:6(int!null) xy.y:7(int)
 │    │    │    ├── keys: (6)
 │    │    │    ├── scan xy
 │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    │    │    │    └── keys: (6)
 │    │    │    └── projections [outer=(6,7)]
 │    │    │         └── is-not [type=bool, outer=(7), constraints=(/7: (/NULL - ]; tight)]
 │    │    │              ├── variable: xy.y [type=int, outer=(7)]
 │    │    │              └── null [type=unknown]
 │    │    └── filters [type=bool, outer=(1,6,7,9), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │         ├── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │         │    ├── variable: xy.x [type=int, outer=(6)]
 │    │         │    └── variable: a.k [type=int, outer=(1)]
 │    │         └── is-not [type=bool, outer=(7,9)]
 │    │              ├── eq [type=bool, outer=(7,9), constraints=(/7: (/NULL - ]; /9: (/NULL - ])]
 │    │              │    ├── variable: xy.y [type=int, outer=(7)]
 │    │              │    └── variable: scalar [type=decimal, outer=(9)]
 │    │              └── false [type=bool]
 │    └── aggregations [outer=(9,10)]
 │         ├── bool-or [type=bool, outer=(10)]
 │         │    └── variable: notnull [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
 │         └── any-not-null [type=decimal, outer=(9)]
 │              └── variable: scalar [type=decimal, outer=(9)]
 └── projections [outer=(9,11)]
      └── case [type=bool, outer=(9,11)]
           ├── true [type=bool]
           ├── when [type=bool, outer=(9,11)]
           │    ├── and [type=bool, outer=(9,11), constraints=(/9: (/NULL - ]; /11: [/true - /true]; tight)]
           │    │    ├── variable: bool_or [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
           │    │    └── is-not [type=bool, outer=(9), constraints=(/9: (/NULL - ]; tight)]
           │    │         ├── variable: scalar [type=decimal, outer=(9)]
           │    │         └── null [type=unknown]
           │    └── true [type=bool]
           ├── when [type=bool, outer=(11)]
           │    ├── is [type=bool, outer=(11), constraints=(/11: [/NULL - /NULL]; tight)]
           │    │    ├── variable: bool_or [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
           │    │    └── null [type=unknown]
           │    └── false [type=bool]
           └── null [type=unknown]

# --------------------------------------------------
# TryDecorrelateProject
# --------------------------------------------------
opt
SELECT k FROM a
WHERE EXISTS
(
    SELECT * FROM xy RIGHT JOIN (SELECT u, u/1.1 AS div FROM uv WHERE i=5) ON x=div
)
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 └── semi-join-apply
      ├── columns: a.k:1(int!null) a.i:2(int)
      ├── keys: (1)
      ├── scan a
      │    ├── columns: a.k:1(int!null) a.i:2(int)
      │    └── keys: (1)
      ├── select
      │    ├── columns: xy.x:6(int!null) div:10(decimal!null)
      │    ├── outer: (2)
      │    ├── project
      │    │    ├── columns: div:10(decimal) xy.x:6(int)
      │    │    ├── outer: (2)
      │    │    ├── right-join
      │    │    │    ├── columns: xy.x:6(int) uv.u:8(int!null)
      │    │    │    ├── outer: (2)
      │    │    │    ├── scan xy
      │    │    │    │    ├── columns: xy.x:6(int!null)
      │    │    │    │    └── keys: (6)
      │    │    │    ├── select
      │    │    │    │    ├── columns: uv.u:8(int!null)
      │    │    │    │    ├── outer: (2)
      │    │    │    │    ├── keys: (8)
      │    │    │    │    ├── scan uv
      │    │    │    │    │    ├── columns: uv.u:8(int!null)
      │    │    │    │    │    └── keys: (8)
      │    │    │    │    └── filters [type=bool, outer=(2), constraints=(/2: [/5 - /5]; tight)]
      │    │    │    │         └── eq [type=bool, outer=(2), constraints=(/2: [/5 - /5]; tight)]
      │    │    │    │              ├── variable: a.i [type=int, outer=(2)]
      │    │    │    │              └── const: 5 [type=int]
      │    │    │    └── true [type=bool]
      │    │    └── projections [outer=(6,8)]
      │    │         └── div [type=decimal, outer=(8)]
      │    │              ├── variable: uv.u [type=int, outer=(8)]
      │    │              └── const: 1.1 [type=decimal]
      │    └── filters [type=bool, outer=(6,10), constraints=(/6: (/NULL - ]; /10: (/NULL - ])]
      │         └── eq [type=bool, outer=(6,10), constraints=(/6: (/NULL - ]; /10: (/NULL - ])]
      │              ├── variable: xy.x [type=int, outer=(6)]
      │              └── variable: div [type=decimal, outer=(10)]
      └── true [type=bool]

# --------------------------------------------------
# TryDecorrelateProjectSelect
# --------------------------------------------------
opt
SELECT k FROM a
WHERE EXISTS
(
    SELECT * FROM xy FULL JOIN (SELECT u, u+1 AS plus FROM uv WHERE i=5) ON x=plus
)
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 └── semi-join-apply
      ├── columns: a.k:1(int!null) a.i:2(int)
      ├── keys: (1)
      ├── scan a
      │    ├── columns: a.k:1(int!null) a.i:2(int)
      │    └── keys: (1)
      ├── full-join
      │    ├── columns: xy.x:6(int) plus:10(int)
      │    ├── outer: (2)
      │    ├── scan xy
      │    │    ├── columns: xy.x:6(int!null)
      │    │    └── keys: (6)
      │    ├── project
      │    │    ├── columns: plus:10(int)
      │    │    ├── scan uv
      │    │    │    ├── columns: uv.u:8(int!null)
      │    │    │    └── keys: (8)
      │    │    └── projections [outer=(8)]
      │    │         └── plus [type=int, outer=(8)]
      │    │              ├── variable: uv.u [type=int, outer=(8)]
      │    │              └── const: 1 [type=int]
      │    └── filters [type=bool, outer=(2,6,10), constraints=(/2: [/5 - /5]; /6: (/NULL - ]; /10: (/NULL - ])]
      │         ├── eq [type=bool, outer=(6,10), constraints=(/6: (/NULL - ]; /10: (/NULL - ])]
      │         │    ├── variable: xy.x [type=int, outer=(6)]
      │         │    └── variable: plus [type=int, outer=(10)]
      │         └── eq [type=bool, outer=(2), constraints=(/2: [/5 - /5]; tight)]
      │              ├── variable: a.i [type=int, outer=(2)]
      │              └── const: 5 [type=int]
      └── true [type=bool]

# --------------------------------------------------
# TryDecorrelateScalarGroupBy
# --------------------------------------------------
opt
SELECT *
FROM a
WHERE EXISTS
(
    SELECT * FROM xy INNER JOIN (SELECT SUM(v), COUNT(*) AS cnt FROM uv WHERE i=5) ON x=cnt
)
----
semi-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── select
 │    ├── columns: xy.x:6(int!null) xy.y:7(int) column10:10(decimal) cnt:11(int!null)
 │    ├── outer: (2)
 │    ├── keys: (6)
 │    ├── group-by
 │    │    ├── columns: xy.x:6(int!null) xy.y:7(int) column10:10(decimal) cnt:11(int)
 │    │    ├── grouping columns: xy.x:6(int!null)
 │    │    ├── outer: (2)
 │    │    ├── keys: (6)
 │    │    ├── left-join
 │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int) uv.v:9(int)
 │    │    │    ├── outer: (2)
 │    │    │    ├── scan xy
 │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    │    │    │    └── keys: (6)
 │    │    │    ├── scan uv
 │    │    │    │    └── columns: uv.v:9(int)
 │    │    │    └── filters [type=bool, outer=(2), constraints=(/2: [/5 - /5]; tight)]
 │    │    │         └── eq [type=bool, outer=(2), constraints=(/2: [/5 - /5]; tight)]
 │    │    │              ├── variable: a.i [type=int, outer=(2)]
 │    │    │              └── const: 5 [type=int]
 │    │    └── aggregations [outer=(2,7,9)]
 │    │         ├── sum [type=decimal, outer=(9)]
 │    │         │    └── variable: uv.v [type=int, outer=(9)]
 │    │         ├── count [type=int, outer=(2)]
 │    │         │    └── variable: a.i [type=int, outer=(2)]
 │    │         └── any-not-null [type=int, outer=(7)]
 │    │              └── variable: xy.y [type=int, outer=(7)]
 │    └── filters [type=bool, outer=(6,11), constraints=(/6: (/NULL - ]; /11: (/NULL - ])]
 │         └── eq [type=bool, outer=(6,11), constraints=(/6: (/NULL - ]; /11: (/NULL - ])]
 │              ├── variable: xy.x [type=int, outer=(6)]
 │              └── variable: cnt [type=int, outer=(11)]
 └── true [type=bool]

# Synthesize key when one is not present.
opt
SELECT * FROM (SELECT i, 'foo' FROM a) WHERE 5=(SELECT MAX(y) FROM xy WHERE x=i)
----
project
 ├── columns: i:2(int) column6:6(string)
 └── select
      ├── columns: a.i:2(int) column6:6(string) column9:9(int!null) rownum:10(int!null)
      ├── keys: (10)
      ├── group-by
      │    ├── columns: a.i:2(int) column6:6(string) column9:9(int) rownum:10(int!null)
      │    ├── grouping columns: rownum:10(int!null)
      │    ├── keys: (10)
      │    ├── left-join
      │    │    ├── columns: a.i:2(int) column6:6(string!null) xy.x:7(int) xy.y:8(int) rownum:10(int!null)
      │    │    ├── row-number
      │    │    │    ├── columns: a.i:2(int) column6:6(string!null) rownum:10(int!null)
      │    │    │    ├── keys: (10)
      │    │    │    └── project
      │    │    │         ├── columns: column6:6(string!null) a.i:2(int)
      │    │    │         ├── scan a
      │    │    │         │    └── columns: a.i:2(int)
      │    │    │         └── projections [outer=(2)]
      │    │    │              └── const: 'foo' [type=string]
      │    │    ├── scan xy
      │    │    │    ├── columns: xy.x:7(int!null) xy.y:8(int)
      │    │    │    └── keys: (7)
      │    │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
      │    │         └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
      │    │              ├── variable: xy.x [type=int, outer=(7)]
      │    │              └── variable: a.i [type=int, outer=(2)]
      │    └── aggregations [outer=(2,6,8)]
      │         ├── max [type=int, outer=(8)]
      │         │    └── variable: xy.y [type=int, outer=(8)]
      │         ├── any-not-null [type=int, outer=(2)]
      │         │    └── variable: a.i [type=int, outer=(2)]
      │         └── any-not-null [type=string, outer=(6)]
      │              └── variable: column6 [type=string, outer=(6)]
      └── filters [type=bool, outer=(9), constraints=(/9: [/5 - /5]; tight)]
           └── eq [type=bool, outer=(9), constraints=(/9: [/5 - /5]; tight)]
                ├── variable: column9 [type=int, outer=(9)]
                └── const: 5 [type=int]

# Don't decorrelate when agg function that doesn't ignore nulls is used.
opt
SELECT * FROM a WHERE 'foo'=(SELECT CONCAT_AGG(y::string) FROM xy WHERE x=k)
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 └── inner-join-apply
      ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) column9:9(string!null)
      ├── keys: (1)
      ├── scan a
      │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
      │    └── keys: (1)
      ├── select
      │    ├── columns: column9:9(string!null)
      │    ├── outer: (1)
      │    ├── cardinality: [0 - 1]
      │    ├── group-by
      │    │    ├── columns: column9:9(string)
      │    │    ├── outer: (1)
      │    │    ├── cardinality: [1 - 1]
      │    │    ├── project
      │    │    │    ├── columns: column8:8(string)
      │    │    │    ├── outer: (1)
      │    │    │    ├── select
      │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
      │    │    │    │    ├── outer: (1)
      │    │    │    │    ├── keys: (6)
      │    │    │    │    ├── scan xy
      │    │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
      │    │    │    │    │    └── keys: (6)
      │    │    │    │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      │    │    │    │         └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      │    │    │    │              ├── variable: xy.x [type=int, outer=(6)]
      │    │    │    │              └── variable: a.k [type=int, outer=(1)]
      │    │    │    └── projections [outer=(7)]
      │    │    │         └── cast: string [type=string, outer=(7)]
      │    │    │              └── variable: xy.y [type=int, outer=(7)]
      │    │    └── aggregations [outer=(8)]
      │    │         └── concat-agg [type=string, outer=(8)]
      │    │              └── variable: column8 [type=string, outer=(8)]
      │    └── filters [type=bool, outer=(9), constraints=(/9: [/'foo' - /'foo']; tight)]
      │         └── eq [type=bool, outer=(9), constraints=(/9: [/'foo' - /'foo']; tight)]
      │              ├── variable: column9 [type=string, outer=(9)]
      │              └── const: 'foo' [type=string]
      └── true [type=bool]

# --------------------------------------------------
# HoistSelectExists
# --------------------------------------------------
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM xy WHERE x=k)
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── scan xy
 │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
           ├── variable: xy.x [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

# Ensure that EXISTS is hoisted even when it is one of several conjuncts.
opt
SELECT * FROM a WHERE s='foo' AND EXISTS(SELECT * FROM xy WHERE x=k) AND i>1
----
semi-join
 ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string!null) j:5(jsonb)
 ├── keys: (1)
 ├── select
 │    ├── columns: a.k:1(int!null) a.i:2(int!null) a.f:3(float) a.s:4(string!null) a.j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(2,4), constraints=(/2: [/2 - ]; /4: [/'foo' - /'foo']; tight)]
 │         ├── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │         │    ├── variable: a.s [type=string, outer=(4)]
 │         │    └── const: 'foo' [type=string]
 │         └── gt [type=bool, outer=(2), constraints=(/2: [/2 - ]; tight)]
 │              ├── variable: a.i [type=int, outer=(2)]
 │              └── const: 1 [type=int]
 ├── scan xy
 │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
           ├── variable: xy.x [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

# Multiple Exists operators in same Select list.
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM xy WHERE x=k) AND EXISTS(SELECT * FROM xy WHERE x=i)
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── semi-join
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    │    └── keys: (1)
 │    ├── scan xy
 │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    │    └── keys: (6)
 │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │         └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │              ├── variable: xy.x [type=int, outer=(6)]
 │              └── variable: a.k [type=int, outer=(1)]
 ├── scan xy
 │    ├── columns: xy.x:8(int!null) xy.y:9(int)
 │    └── keys: (8)
 └── filters [type=bool, outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ])]
      └── eq [type=bool, outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ])]
           ├── variable: xy.x [type=int, outer=(8)]
           └── variable: a.i [type=int, outer=(2)]

# Don't hoist uncorrelated subqueries.
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM xy)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool]
      └── exists [type=bool]
           └── scan xy
                ├── columns: xy.x:6(int!null) xy.y:7(int)
                └── keys: (6)

# Hoist nested EXISTS.
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM xy WHERE EXISTS (SELECT * FROM uv WHERE x=u) AND x=k)
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── semi-join
 │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    ├── keys: (6)
 │    ├── scan xy
 │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    │    └── keys: (6)
 │    ├── scan uv
 │    │    ├── columns: uv.u:8(int!null) uv.v:9(int)
 │    │    └── keys: (8)
 │    └── filters [type=bool, outer=(6,8), constraints=(/6: (/NULL - ]; /8: (/NULL - ])]
 │         └── eq [type=bool, outer=(6,8), constraints=(/6: (/NULL - ]; /8: (/NULL - ])]
 │              ├── variable: xy.x [type=int, outer=(6)]
 │              └── variable: uv.u [type=int, outer=(8)]
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
           ├── variable: xy.x [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

# --------------------------------------------------
# HoistSelectNotExists
# --------------------------------------------------
opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM xy WHERE x=k)
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── scan xy
 │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
           ├── variable: xy.x [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

# Ensure that NOT EXISTS is hoisted even when one of several conjuncts.
opt
SELECT * FROM a WHERE s='foo' AND NOT EXISTS(SELECT * FROM xy WHERE x=k) AND i>1
----
anti-join
 ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string!null) j:5(jsonb)
 ├── keys: (1)
 ├── select
 │    ├── columns: a.k:1(int!null) a.i:2(int!null) a.f:3(float) a.s:4(string!null) a.j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(2,4), constraints=(/2: [/2 - ]; /4: [/'foo' - /'foo']; tight)]
 │         ├── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │         │    ├── variable: a.s [type=string, outer=(4)]
 │         │    └── const: 'foo' [type=string]
 │         └── gt [type=bool, outer=(2), constraints=(/2: [/2 - ]; tight)]
 │              ├── variable: a.i [type=int, outer=(2)]
 │              └── const: 1 [type=int]
 ├── scan xy
 │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
           ├── variable: xy.x [type=int, outer=(6)]
           └── variable: a.k [type=int, outer=(1)]

# Multiple Not Exists operators in same Select list.
opt
SELECT *
FROM a
WHERE NOT EXISTS(SELECT * FROM xy WHERE x=k) AND NOT EXISTS(SELECT * FROM xy WHERE x=i)
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── anti-join
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    │    └── keys: (1)
 │    ├── scan xy
 │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    │    └── keys: (6)
 │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │         └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │              ├── variable: xy.x [type=int, outer=(6)]
 │              └── variable: a.k [type=int, outer=(1)]
 ├── scan xy
 │    ├── columns: xy.x:8(int!null) xy.y:9(int)
 │    └── keys: (8)
 └── filters [type=bool, outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ])]
      └── eq [type=bool, outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ])]
           ├── variable: xy.x [type=int, outer=(8)]
           └── variable: a.i [type=int, outer=(2)]

# Don't hoist uncorrelated subqueries.
opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM xy)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool]
      └── not [type=bool]
           └── exists [type=bool]
                └── scan xy
                     ├── columns: xy.x:6(int!null) xy.y:7(int)
                     └── keys: (6)

# --------------------------------------------------
# HoistSelectExists + HoistSelectNotExists
# --------------------------------------------------
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM xy WHERE x=k) AND NOT EXISTS(SELECT * FROM xy WHERE x=i)
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── semi-join
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    │    └── keys: (1)
 │    ├── scan xy
 │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    │    └── keys: (6)
 │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │         └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │              ├── variable: xy.x [type=int, outer=(6)]
 │              └── variable: a.k [type=int, outer=(1)]
 ├── scan xy
 │    ├── columns: xy.x:8(int!null) xy.y:9(int)
 │    └── keys: (8)
 └── filters [type=bool, outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ])]
      └── eq [type=bool, outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ])]
           ├── variable: xy.x [type=int, outer=(8)]
           └── variable: a.i [type=int, outer=(2)]

# --------------------------------------------------
# HoistSelectSubquery
# --------------------------------------------------
opt
SELECT * FROM a WHERE (SELECT y FROM xy WHERE y=k LIMIT 1) = i
----
project
 ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 └── select
      ├── columns: a.k:1(int!null) a.i:2(int!null) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.y:7(int!null)
      ├── keys: (1)
      ├── left-join-apply
      │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.y:7(int)
      │    ├── keys: (1)
      │    ├── scan a
      │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
      │    │    └── keys: (1)
      │    ├── limit
      │    │    ├── columns: xy.y:7(int!null)
      │    │    ├── outer: (1)
      │    │    ├── cardinality: [0 - 1]
      │    │    ├── select
      │    │    │    ├── columns: xy.y:7(int!null)
      │    │    │    ├── outer: (1)
      │    │    │    ├── scan xy
      │    │    │    │    └── columns: xy.y:7(int)
      │    │    │    └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
      │    │    │         └── eq [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
      │    │    │              ├── variable: xy.y [type=int, outer=(7)]
      │    │    │              └── variable: a.k [type=int, outer=(1)]
      │    │    └── const: 1 [type=int]
      │    └── true [type=bool]
      └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
           └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
                ├── variable: a.i [type=int, outer=(2)]
                └── variable: xy.y [type=int, outer=(7)]

# Multiple other conjuncts, including uncorrelated subquery (don't hoist).
opt
SELECT *
FROM a
WHERE k=10 AND (SELECT y FROM xy WHERE y=k LIMIT 1) = i AND (SELECT x FROM xy LIMIT 1) = 100
----
project
 ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 └── select
      ├── columns: a.k:1(int!null) a.i:2(int!null) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.y:7(int!null)
      ├── keys: (1)
      ├── left-join-apply
      │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.y:7(int)
      │    ├── keys: (1)
      │    ├── select
      │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
      │    │    ├── keys: (1)
      │    │    ├── scan a
      │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
      │    │    │    ├── constraint: /1: [/10 - /10]
      │    │    │    └── keys: (1)
      │    │    └── filters [type=bool]
      │    │         └── eq [type=bool]
      │    │              ├── subquery [type=int]
      │    │              │    └── scan xy
      │    │              │         ├── columns: xy.x:8(int!null)
      │    │              │         ├── limit: 1
      │    │              │         └── keys: (8)
      │    │              └── const: 100 [type=int]
      │    ├── limit
      │    │    ├── columns: xy.y:7(int!null)
      │    │    ├── outer: (1)
      │    │    ├── cardinality: [0 - 1]
      │    │    ├── select
      │    │    │    ├── columns: xy.y:7(int!null)
      │    │    │    ├── outer: (1)
      │    │    │    ├── scan xy
      │    │    │    │    └── columns: xy.y:7(int)
      │    │    │    └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
      │    │    │         └── eq [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
      │    │    │              ├── variable: xy.y [type=int, outer=(7)]
      │    │    │              └── variable: a.k [type=int, outer=(1)]
      │    │    └── const: 1 [type=int]
      │    └── true [type=bool]
      └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
           └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
                ├── variable: a.i [type=int, outer=(2)]
                └── variable: xy.y [type=int, outer=(7)]

# Multiple correlated subqueries.
opt
SELECT * FROM a
WHERE (SELECT COUNT(*) FROM xy WHERE y=k) > 0 AND (SELECT y FROM xy WHERE y=k LIMIT 1) = i
----
project
 ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 └── select
      ├── columns: a.k:1(int!null) a.i:2(int!null) a.f:3(float) a.s:4(string) a.j:5(jsonb) column8:8(int!null) xy.y:10(int!null)
      ├── keys: (1)
      ├── left-join-apply
      │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) column8:8(int!null) xy.y:10(int)
      │    ├── keys: (1)
      │    ├── select
      │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) column8:8(int!null)
      │    │    ├── keys: (1)
      │    │    ├── group-by
      │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) column8:8(int)
      │    │    │    ├── grouping columns: a.k:1(int!null)
      │    │    │    ├── keys: (1)
      │    │    │    ├── left-join
      │    │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.y:7(int)
      │    │    │    │    ├── scan a
      │    │    │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
      │    │    │    │    │    └── keys: (1)
      │    │    │    │    ├── scan xy
      │    │    │    │    │    └── columns: xy.y:7(int)
      │    │    │    │    └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
      │    │    │    │         └── eq [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
      │    │    │    │              ├── variable: xy.y [type=int, outer=(7)]
      │    │    │    │              └── variable: a.k [type=int, outer=(1)]
      │    │    │    └── aggregations [outer=(1-5)]
      │    │    │         ├── count [type=int, outer=(1)]
      │    │    │         │    └── variable: a.k [type=int, outer=(1)]
      │    │    │         ├── any-not-null [type=int, outer=(2)]
      │    │    │         │    └── variable: a.i [type=int, outer=(2)]
      │    │    │         ├── any-not-null [type=float, outer=(3)]
      │    │    │         │    └── variable: a.f [type=float, outer=(3)]
      │    │    │         ├── any-not-null [type=string, outer=(4)]
      │    │    │         │    └── variable: a.s [type=string, outer=(4)]
      │    │    │         └── any-not-null [type=jsonb, outer=(5)]
      │    │    │              └── variable: a.j [type=jsonb, outer=(5)]
      │    │    └── filters [type=bool, outer=(8), constraints=(/8: [/1 - ]; tight)]
      │    │         └── gt [type=bool, outer=(8), constraints=(/8: [/1 - ]; tight)]
      │    │              ├── variable: column8 [type=int, outer=(8)]
      │    │              └── const: 0 [type=int]
      │    ├── limit
      │    │    ├── columns: xy.y:10(int!null)
      │    │    ├── outer: (1)
      │    │    ├── cardinality: [0 - 1]
      │    │    ├── select
      │    │    │    ├── columns: xy.y:10(int!null)
      │    │    │    ├── outer: (1)
      │    │    │    ├── scan xy
      │    │    │    │    └── columns: xy.y:10(int)
      │    │    │    └── filters [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: (/NULL - ])]
      │    │    │         └── eq [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: (/NULL - ])]
      │    │    │              ├── variable: xy.y [type=int, outer=(10)]
      │    │    │              └── variable: a.k [type=int, outer=(1)]
      │    │    └── const: 1 [type=int]
      │    └── true [type=bool]
      └── filters [type=bool, outer=(2,10), constraints=(/2: (/NULL - ]; /10: (/NULL - ])]
           └── eq [type=bool, outer=(2,10), constraints=(/2: (/NULL - ]; /10: (/NULL - ])]
                ├── variable: a.i [type=int, outer=(2)]
                └── variable: xy.y [type=int, outer=(10)]

# Subquery nested below interesting scalar operators like cast, function, tuple,
# or, etc).
opt
SELECT * FROM a WHERE (0, length((SELECT COUNT(*) FROM uv WHERE k=u)::string)) > (0, 1) OR i=1
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 └── select
      ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) column8:8(int)
      ├── keys: (1)
      ├── group-by
      │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) column8:8(int)
      │    ├── grouping columns: a.k:1(int!null)
      │    ├── keys: (1)
      │    ├── left-join
      │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) uv.u:6(int)
      │    │    ├── scan a
      │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
      │    │    │    └── keys: (1)
      │    │    ├── scan uv
      │    │    │    ├── columns: uv.u:6(int!null)
      │    │    │    └── keys: (6)
      │    │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      │    │         └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      │    │              ├── variable: a.k [type=int, outer=(1)]
      │    │              └── variable: uv.u [type=int, outer=(6)]
      │    └── aggregations [outer=(1-5)]
      │         ├── count [type=int, outer=(1)]
      │         │    └── variable: a.k [type=int, outer=(1)]
      │         ├── any-not-null [type=int, outer=(2)]
      │         │    └── variable: a.i [type=int, outer=(2)]
      │         ├── any-not-null [type=float, outer=(3)]
      │         │    └── variable: a.f [type=float, outer=(3)]
      │         ├── any-not-null [type=string, outer=(4)]
      │         │    └── variable: a.s [type=string, outer=(4)]
      │         └── any-not-null [type=jsonb, outer=(5)]
      │              └── variable: a.j [type=jsonb, outer=(5)]
      └── filters [type=bool, outer=(2,8)]
           └── or [type=bool, outer=(2,8)]
                ├── gt [type=bool, outer=(8)]
                │    ├── tuple [type=tuple{int, int}, outer=(8)]
                │    │    ├── const: 0 [type=int]
                │    │    └── function: length [type=int, outer=(8)]
                │    │         └── cast: string [type=string, outer=(8)]
                │    │              └── variable: column8 [type=int, outer=(8)]
                │    └── tuple [type=tuple{int, int}]
                │         ├── const: 0 [type=int]
                │         └── const: 1 [type=int]
                └── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
                     ├── variable: a.i [type=int, outer=(2)]
                     └── const: 1 [type=int]

# Exists within a disjunction.
opt
SELECT * FROM a WHERE i=1 OR EXISTS(SELECT * FROM xy WHERE y=i)
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 └── select
      ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) exists_agg:9(bool)
      ├── keys: (1)
      ├── group-by
      │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) exists_agg:9(bool)
      │    ├── grouping columns: a.k:1(int!null)
      │    ├── keys: (1)
      │    ├── left-join
      │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.y:7(int) true:8(bool)
      │    │    ├── scan a
      │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
      │    │    │    └── keys: (1)
      │    │    ├── project
      │    │    │    ├── columns: true:8(bool!null) xy.y:7(int)
      │    │    │    ├── scan xy
      │    │    │    │    └── columns: xy.y:7(int)
      │    │    │    └── projections [outer=(7)]
      │    │    │         └── true [type=bool]
      │    │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
      │    │         └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
      │    │              ├── variable: xy.y [type=int, outer=(7)]
      │    │              └── variable: a.i [type=int, outer=(2)]
      │    └── aggregations [outer=(2-5,8)]
      │         ├── exists-agg [type=bool, outer=(8)]
      │         │    └── variable: true [type=bool, outer=(8), constraints=(/8: [/true - /true]; tight)]
      │         ├── any-not-null [type=int, outer=(2)]
      │         │    └── variable: a.i [type=int, outer=(2)]
      │         ├── any-not-null [type=float, outer=(3)]
      │         │    └── variable: a.f [type=float, outer=(3)]
      │         ├── any-not-null [type=string, outer=(4)]
      │         │    └── variable: a.s [type=string, outer=(4)]
      │         └── any-not-null [type=jsonb, outer=(5)]
      │              └── variable: a.j [type=jsonb, outer=(5)]
      └── filters [type=bool, outer=(2,9)]
           └── or [type=bool, outer=(2,9)]
                ├── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
                │    ├── variable: a.i [type=int, outer=(2)]
                │    └── const: 1 [type=int]
                └── variable: exists_agg [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]

# Any with IS NULL.
opt
SELECT * FROM a WHERE (i = ANY(SELECT y FROM xy)) IS NULL
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 └── select
      ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) case:10(bool)
      ├── keys: (1)
      ├── project
      │    ├── columns: case:10(bool) a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
      │    ├── keys: (1)
      │    ├── group-by
      │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) bool_or:9(bool)
      │    │    ├── grouping columns: a.k:1(int!null)
      │    │    ├── keys: (1)
      │    │    ├── left-join
      │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.y:7(int) notnull:8(bool)
      │    │    │    ├── scan a
      │    │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
      │    │    │    │    └── keys: (1)
      │    │    │    ├── project
      │    │    │    │    ├── columns: notnull:8(bool) xy.y:7(int)
      │    │    │    │    ├── scan xy
      │    │    │    │    │    └── columns: xy.y:7(int)
      │    │    │    │    └── projections [outer=(7)]
      │    │    │    │         └── is-not [type=bool, outer=(7), constraints=(/7: (/NULL - ]; tight)]
      │    │    │    │              ├── variable: xy.y [type=int, outer=(7)]
      │    │    │    │              └── null [type=unknown]
      │    │    │    └── filters [type=bool, outer=(2,7)]
      │    │    │         └── is-not [type=bool, outer=(2,7)]
      │    │    │              ├── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
      │    │    │              │    ├── variable: xy.y [type=int, outer=(7)]
      │    │    │              │    └── variable: a.i [type=int, outer=(2)]
      │    │    │              └── false [type=bool]
      │    │    └── aggregations [outer=(2-5,8)]
      │    │         ├── bool-or [type=bool, outer=(8)]
      │    │         │    └── variable: notnull [type=bool, outer=(8), constraints=(/8: [/true - /true]; tight)]
      │    │         ├── any-not-null [type=int, outer=(2)]
      │    │         │    └── variable: a.i [type=int, outer=(2)]
      │    │         ├── any-not-null [type=float, outer=(3)]
      │    │         │    └── variable: a.f [type=float, outer=(3)]
      │    │         ├── any-not-null [type=string, outer=(4)]
      │    │         │    └── variable: a.s [type=string, outer=(4)]
      │    │         └── any-not-null [type=jsonb, outer=(5)]
      │    │              └── variable: a.j [type=jsonb, outer=(5)]
      │    └── projections [outer=(1-5,9)]
      │         └── case [type=bool, outer=(2,9)]
      │              ├── true [type=bool]
      │              ├── when [type=bool, outer=(2,9)]
      │              │    ├── and [type=bool, outer=(2,9), constraints=(/2: (/NULL - ]; /9: [/true - /true]; tight)]
      │              │    │    ├── variable: bool_or [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
      │              │    │    └── is-not [type=bool, outer=(2), constraints=(/2: (/NULL - ]; tight)]
      │              │    │         ├── variable: a.i [type=int, outer=(2)]
      │              │    │         └── null [type=unknown]
      │              │    └── true [type=bool]
      │              ├── when [type=bool, outer=(9)]
      │              │    ├── is [type=bool, outer=(9), constraints=(/9: [/NULL - /NULL]; tight)]
      │              │    │    ├── variable: bool_or [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
      │              │    │    └── null [type=unknown]
      │              │    └── false [type=bool]
      │              └── null [type=unknown]
      └── filters [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
           └── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
                ├── variable: case [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
                └── null [type=unknown]

# ALL with non-trivial expression on left.
opt
SELECT i*i/100 < ALL(SELECT y FROM xy), s FROM a
----
project
 ├── columns: column8:8(bool) s:4(string)
 ├── group-by
 │    ├── columns: a.k:1(int!null) a.s:4(string) scalar:9(decimal) bool_or:11(bool)
 │    ├── grouping columns: a.k:1(int!null)
 │    ├── keys: (1)
 │    ├── left-join
 │    │    ├── columns: a.k:1(int!null) a.s:4(string) xy.y:7(int) scalar:9(decimal) notnull:10(bool)
 │    │    ├── project
 │    │    │    ├── columns: scalar:9(decimal) a.k:1(int!null) a.s:4(string)
 │    │    │    ├── keys: (1)
 │    │    │    ├── scan a
 │    │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    │    │    │    └── keys: (1)
 │    │    │    └── projections [outer=(1,2,4)]
 │    │    │         └── div [type=decimal, outer=(2)]
 │    │    │              ├── mult [type=int, outer=(2)]
 │    │    │              │    ├── variable: a.i [type=int, outer=(2)]
 │    │    │              │    └── variable: a.i [type=int, outer=(2)]
 │    │    │              └── const: 100 [type=int]
 │    │    ├── project
 │    │    │    ├── columns: notnull:10(bool) xy.y:7(int)
 │    │    │    ├── scan xy
 │    │    │    │    └── columns: xy.y:7(int)
 │    │    │    └── projections [outer=(7)]
 │    │    │         └── is-not [type=bool, outer=(7), constraints=(/7: (/NULL - ]; tight)]
 │    │    │              ├── variable: xy.y [type=int, outer=(7)]
 │    │    │              └── null [type=unknown]
 │    │    └── filters [type=bool, outer=(7,9)]
 │    │         └── is-not [type=bool, outer=(7,9)]
 │    │              ├── ge [type=bool, outer=(7,9), constraints=(/7: (/NULL - ]; /9: (/NULL - ])]
 │    │              │    ├── variable: xy.y [type=int, outer=(7)]
 │    │              │    └── variable: scalar [type=decimal, outer=(9)]
 │    │              └── false [type=bool]
 │    └── aggregations [outer=(4,9,10)]
 │         ├── bool-or [type=bool, outer=(10)]
 │         │    └── variable: notnull [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
 │         ├── any-not-null [type=string, outer=(4)]
 │         │    └── variable: a.s [type=string, outer=(4)]
 │         └── any-not-null [type=decimal, outer=(9)]
 │              └── variable: scalar [type=decimal, outer=(9)]
 └── projections [outer=(4,9,11)]
      └── not [type=bool, outer=(9,11)]
           └── case [type=bool, outer=(9,11)]
                ├── true [type=bool]
                ├── when [type=bool, outer=(9,11)]
                │    ├── and [type=bool, outer=(9,11), constraints=(/9: (/NULL - ]; /11: [/true - /true]; tight)]
                │    │    ├── variable: bool_or [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
                │    │    └── is-not [type=bool, outer=(9), constraints=(/9: (/NULL - ]; tight)]
                │    │         ├── variable: scalar [type=decimal, outer=(9)]
                │    │         └── null [type=unknown]
                │    └── true [type=bool]
                ├── when [type=bool, outer=(11)]
                │    ├── is [type=bool, outer=(11), constraints=(/11: [/NULL - /NULL]; tight)]
                │    │    ├── variable: bool_or [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
                │    │    └── null [type=unknown]
                │    └── false [type=bool]
                └── null [type=unknown]

# --------------------------------------------------
# HoistProjectSubquery
# --------------------------------------------------
opt
SELECT (SELECT x FROM xy WHERE x=k) FROM a
----
project
 ├── columns: column8:8(int)
 ├── left-join-apply
 │    ├── columns: a.k:1(int!null) xy.x:6(int)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null)
 │    │    └── keys: (1)
 │    ├── max1-row
 │    │    ├── columns: xy.x:6(int!null)
 │    │    ├── outer: (1)
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── keys: (6)
 │    │    └── select
 │    │         ├── columns: xy.x:6(int!null)
 │    │         ├── outer: (1)
 │    │         ├── keys: (6)
 │    │         ├── scan xy
 │    │         │    ├── columns: xy.x:6(int!null)
 │    │         │    └── keys: (6)
 │    │         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │              └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │                   ├── variable: xy.x [type=int, outer=(6)]
 │    │                   └── variable: a.k [type=int, outer=(1)]
 │    └── true [type=bool]
 └── projections [outer=(6)]
      └── variable: xy.x [type=int, outer=(6)]

# Mixed correlated and uncorrelated subqueries.
opt
SELECT
    5,
    (SELECT x FROM xy WHERE x=k),
    (SELECT y FROM xy LIMIT 1),
    5 IN (SELECT y FROM xy),
    EXISTS(SELECT * FROM xy),
    (SELECT COUNT(*) FROM xy WHERE y=k)
FROM a
----
project
 ├── columns: column6:6(int!null) column9:9(int) column12:12(int) column15:15(bool) column18:18(bool) column22:22(int)
 ├── group-by
 │    ├── columns: a.k:1(int!null) xy.x:7(int) column21:21(int)
 │    ├── grouping columns: a.k:1(int!null)
 │    ├── keys: (1)
 │    ├── left-join
 │    │    ├── columns: a.k:1(int!null) xy.x:7(int) xy.y:20(int)
 │    │    ├── left-join-apply
 │    │    │    ├── columns: a.k:1(int!null) xy.x:7(int)
 │    │    │    ├── keys: (1)
 │    │    │    ├── scan a
 │    │    │    │    ├── columns: a.k:1(int!null)
 │    │    │    │    └── keys: (1)
 │    │    │    ├── max1-row
 │    │    │    │    ├── columns: xy.x:7(int!null)
 │    │    │    │    ├── outer: (1)
 │    │    │    │    ├── cardinality: [0 - 1]
 │    │    │    │    ├── keys: (7)
 │    │    │    │    └── select
 │    │    │    │         ├── columns: xy.x:7(int!null)
 │    │    │    │         ├── outer: (1)
 │    │    │    │         ├── keys: (7)
 │    │    │    │         ├── scan xy
 │    │    │    │         │    ├── columns: xy.x:7(int!null)
 │    │    │    │         │    └── keys: (7)
 │    │    │    │         └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
 │    │    │    │              └── eq [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
 │    │    │    │                   ├── variable: xy.x [type=int, outer=(7)]
 │    │    │    │                   └── variable: a.k [type=int, outer=(1)]
 │    │    │    └── true [type=bool]
 │    │    ├── scan xy
 │    │    │    └── columns: xy.y:20(int)
 │    │    └── filters [type=bool, outer=(1,20), constraints=(/1: (/NULL - ]; /20: (/NULL - ])]
 │    │         └── eq [type=bool, outer=(1,20), constraints=(/1: (/NULL - ]; /20: (/NULL - ])]
 │    │              ├── variable: xy.y [type=int, outer=(20)]
 │    │              └── variable: a.k [type=int, outer=(1)]
 │    └── aggregations [outer=(1,7)]
 │         ├── count [type=int, outer=(1)]
 │         │    └── variable: a.k [type=int, outer=(1)]
 │         └── any-not-null [type=int, outer=(7)]
 │              └── variable: xy.x [type=int, outer=(7)]
 └── projections [outer=(7,21)]
      ├── const: 5 [type=int]
      ├── variable: xy.x [type=int, outer=(7)]
      ├── subquery [type=int]
      │    └── scan xy
      │         ├── columns: xy.y:11(int)
      │         └── limit: 1
      ├── any: eq [type=bool]
      │    ├── scan xy
      │    │    └── columns: xy.y:14(int)
      │    └── const: 5 [type=int]
      ├── exists [type=bool]
      │    └── scan xy
      │         ├── columns: xy.x:16(int!null) xy.y:17(int)
      │         └── keys: (16)
      └── variable: column21 [type=int, outer=(21)]

# Subquery in GroupBy aggregate (optbuilder creates correlated Project).
opt
SELECT MAX((SELECT y FROM xy WHERE y=i)) FROM a
----
group-by
 ├── columns: column9:9(int)
 ├── cardinality: [1 - 1]
 ├── project
 │    ├── columns: column8:8(int)
 │    ├── left-join-apply
 │    │    ├── columns: a.i:2(int) xy.y:7(int)
 │    │    ├── scan a
 │    │    │    └── columns: a.i:2(int)
 │    │    ├── max1-row
 │    │    │    ├── columns: xy.y:7(int!null)
 │    │    │    ├── outer: (2)
 │    │    │    ├── cardinality: [0 - 1]
 │    │    │    └── select
 │    │    │         ├── columns: xy.y:7(int!null)
 │    │    │         ├── outer: (2)
 │    │    │         ├── scan xy
 │    │    │         │    └── columns: xy.y:7(int)
 │    │    │         └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
 │    │    │              └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
 │    │    │                   ├── variable: xy.y [type=int, outer=(7)]
 │    │    │                   └── variable: a.i [type=int, outer=(2)]
 │    │    └── true [type=bool]
 │    └── projections [outer=(7)]
 │         └── variable: xy.y [type=int, outer=(7)]
 └── aggregations [outer=(8)]
      └── max [type=int, outer=(8)]
           └── variable: column8 [type=int, outer=(8)]

# Exists in projection list.
opt
SELECT EXISTS(SELECT * FROM xy WHERE y=i) FROM a
----
project
 ├── columns: column8:8(bool)
 ├── group-by
 │    ├── columns: a.k:1(int!null) exists_agg:10(bool)
 │    ├── grouping columns: a.k:1(int!null)
 │    ├── keys: (1)
 │    ├── left-join
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) xy.y:7(int) true:9(bool)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    │    │    └── keys: (1)
 │    │    ├── project
 │    │    │    ├── columns: true:9(bool!null) xy.y:7(int)
 │    │    │    ├── scan xy
 │    │    │    │    └── columns: xy.y:7(int)
 │    │    │    └── projections [outer=(7)]
 │    │    │         └── true [type=bool]
 │    │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
 │    │         └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
 │    │              ├── variable: xy.y [type=int, outer=(7)]
 │    │              └── variable: a.i [type=int, outer=(2)]
 │    └── aggregations [outer=(9)]
 │         └── exists-agg [type=bool, outer=(9)]
 │              └── variable: true [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
 └── projections [outer=(10)]
      └── variable: exists_agg [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]

# Any in projection list.
opt
SELECT 5 < ANY(SELECT y FROM xy WHERE y=i) FROM a
----
project
 ├── columns: column8:8(bool)
 ├── group-by
 │    ├── columns: a.k:1(int!null) bool_or:10(bool)
 │    ├── grouping columns: a.k:1(int!null)
 │    ├── keys: (1)
 │    ├── left-join
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) xy.y:7(int) notnull:9(bool)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    │    │    └── keys: (1)
 │    │    ├── project
 │    │    │    ├── columns: notnull:9(bool) xy.y:7(int)
 │    │    │    ├── select
 │    │    │    │    ├── columns: xy.y:7(int)
 │    │    │    │    ├── scan xy
 │    │    │    │    │    └── columns: xy.y:7(int)
 │    │    │    │    └── filters [type=bool, outer=(7)]
 │    │    │    │         └── is-not [type=bool, outer=(7)]
 │    │    │    │              ├── lt [type=bool, outer=(7), constraints=(/7: (/NULL - /4]; tight)]
 │    │    │    │              │    ├── variable: xy.y [type=int, outer=(7)]
 │    │    │    │              │    └── const: 5 [type=int]
 │    │    │    │              └── false [type=bool]
 │    │    │    └── projections [outer=(7)]
 │    │    │         └── is-not [type=bool, outer=(7), constraints=(/7: (/NULL - ]; tight)]
 │    │    │              ├── variable: xy.y [type=int, outer=(7)]
 │    │    │              └── null [type=unknown]
 │    │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
 │    │         └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
 │    │              ├── variable: xy.y [type=int, outer=(7)]
 │    │              └── variable: a.i [type=int, outer=(2)]
 │    └── aggregations [outer=(9)]
 │         └── bool-or [type=bool, outer=(9)]
 │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
 └── projections [outer=(10)]
      └── case [type=bool, outer=(10)]
           ├── true [type=bool]
           ├── when [type=bool, outer=(10)]
           │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
           │    └── true [type=bool]
           ├── when [type=bool, outer=(10)]
           │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
           │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
           │    │    └── null [type=unknown]
           │    └── false [type=bool]
           └── null [type=unknown]

# --------------------------------------------------
# HoistJoinSubquery
# --------------------------------------------------
opt
SELECT i, y FROM a INNER JOIN xy ON (SELECT k+1) = 0
----
project
 ├── columns: i:2(int) y:7(int)
 └── inner-join
      ├── columns: a.k:1(int!null) a.i:2(int) xy.y:7(int)
      ├── select
      │    ├── columns: a.k:1(int!null) a.i:2(int)
      │    ├── keys: (1)
      │    ├── scan a
      │    │    ├── columns: a.k:1(int!null) a.i:2(int)
      │    │    └── keys: (1)
      │    └── filters [type=bool, outer=(1)]
      │         └── eq [type=bool, outer=(1)]
      │              ├── plus [type=int, outer=(1)]
      │              │    ├── variable: a.k [type=int, outer=(1)]
      │              │    └── const: 1 [type=int]
      │              └── const: 0 [type=int]
      ├── scan xy
      │    └── columns: xy.y:7(int)
      └── true [type=bool]

# Right join + multiple subqueries.
opt
SELECT y FROM a RIGHT JOIN xy ON (SELECT k+1) = (SELECT x+1)
----
project
 ├── columns: y:7(int)
 └── select
      ├── columns: a.k:1(int) xy.x:6(int!null) xy.y:7(int)
      ├── right-join
      │    ├── columns: a.k:1(int) xy.x:6(int!null) xy.y:7(int)
      │    ├── scan a
      │    │    ├── columns: a.k:1(int!null)
      │    │    └── keys: (1)
      │    ├── scan xy
      │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
      │    │    └── keys: (6)
      │    └── true [type=bool]
      └── filters [type=bool, outer=(1,6)]
           └── eq [type=bool, outer=(1,6)]
                ├── plus [type=int, outer=(1)]
                │    ├── variable: a.k [type=int, outer=(1)]
                │    └── const: 1 [type=int]
                └── plus [type=int, outer=(6)]
                     ├── variable: xy.x [type=int, outer=(6)]
                     └── const: 1 [type=int]

# Hoist Exists in join filter disjunction.
opt
SELECT s, x FROM a FULL JOIN xy ON EXISTS(SELECT * FROM uv WHERE u=y) OR k=x
----
project
 ├── columns: s:4(string) x:6(int)
 └── full-join
      ├── columns: a.k:1(int) a.s:4(string) xy.x:6(int) exists_agg:11(bool)
      ├── scan a
      │    ├── columns: a.k:1(int!null) a.s:4(string)
      │    └── keys: (1)
      ├── group-by
      │    ├── columns: xy.x:6(int!null) exists_agg:11(bool)
      │    ├── grouping columns: xy.x:6(int!null)
      │    ├── keys: (6)
      │    ├── left-join
      │    │    ├── columns: xy.x:6(int!null) xy.y:7(int) uv.u:8(int) true:10(bool)
      │    │    ├── scan xy
      │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
      │    │    │    └── keys: (6)
      │    │    ├── project
      │    │    │    ├── columns: true:10(bool!null) uv.u:8(int!null)
      │    │    │    ├── keys: (8)
      │    │    │    ├── scan uv
      │    │    │    │    ├── columns: uv.u:8(int!null)
      │    │    │    │    └── keys: (8)
      │    │    │    └── projections [outer=(8)]
      │    │    │         └── true [type=bool]
      │    │    └── filters [type=bool, outer=(7,8), constraints=(/7: (/NULL - ]; /8: (/NULL - ])]
      │    │         └── eq [type=bool, outer=(7,8), constraints=(/7: (/NULL - ]; /8: (/NULL - ])]
      │    │              ├── variable: uv.u [type=int, outer=(8)]
      │    │              └── variable: xy.y [type=int, outer=(7)]
      │    └── aggregations [outer=(10)]
      │         └── exists-agg [type=bool, outer=(10)]
      │              └── variable: true [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
      └── filters [type=bool, outer=(1,6,11)]
           └── or [type=bool, outer=(1,6,11)]
                ├── variable: exists_agg [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
                └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
                     ├── variable: a.k [type=int, outer=(1)]
                     └── variable: xy.x [type=int, outer=(6)]

# Any in Join filter disjunction.
opt
SELECT j, y FROM a INNER JOIN xy ON x IN (SELECT v FROM uv WHERE u=y) OR x IS NULL
----
project
 ├── columns: j:5(jsonb) y:7(int)
 └── inner-join
      ├── columns: a.j:5(jsonb) xy.x:6(int!null) xy.y:7(int) case:12(bool)
      ├── scan a
      │    └── columns: a.j:5(jsonb)
      ├── select
      │    ├── columns: xy.x:6(int!null) xy.y:7(int) case:12(bool)
      │    ├── keys: (6)
      │    ├── project
      │    │    ├── columns: case:12(bool) xy.x:6(int!null) xy.y:7(int)
      │    │    ├── keys: (6)
      │    │    ├── group-by
      │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int) bool_or:11(bool)
      │    │    │    ├── grouping columns: xy.x:6(int!null)
      │    │    │    ├── keys: (6)
      │    │    │    ├── left-join
      │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int) uv.u:8(int) uv.v:9(int) notnull:10(bool)
      │    │    │    │    ├── scan xy
      │    │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
      │    │    │    │    │    └── keys: (6)
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: notnull:10(bool) uv.u:8(int!null) uv.v:9(int)
      │    │    │    │    │    ├── keys: (8)
      │    │    │    │    │    ├── scan uv
      │    │    │    │    │    │    ├── columns: uv.u:8(int!null) uv.v:9(int)
      │    │    │    │    │    │    └── keys: (8)
      │    │    │    │    │    └── projections [outer=(8,9)]
      │    │    │    │    │         └── is-not [type=bool, outer=(9), constraints=(/9: (/NULL - ]; tight)]
      │    │    │    │    │              ├── variable: uv.v [type=int, outer=(9)]
      │    │    │    │    │              └── null [type=unknown]
      │    │    │    │    └── filters [type=bool, outer=(6-9), constraints=(/7: (/NULL - ]; /8: (/NULL - ])]
      │    │    │    │         ├── eq [type=bool, outer=(7,8), constraints=(/7: (/NULL - ]; /8: (/NULL - ])]
      │    │    │    │         │    ├── variable: uv.u [type=int, outer=(8)]
      │    │    │    │         │    └── variable: xy.y [type=int, outer=(7)]
      │    │    │    │         └── is-not [type=bool, outer=(6,9)]
      │    │    │    │              ├── eq [type=bool, outer=(6,9), constraints=(/6: (/NULL - ]; /9: (/NULL - ])]
      │    │    │    │              │    ├── variable: uv.v [type=int, outer=(9)]
      │    │    │    │              │    └── variable: xy.x [type=int, outer=(6)]
      │    │    │    │              └── false [type=bool]
      │    │    │    └── aggregations [outer=(7,10)]
      │    │    │         ├── bool-or [type=bool, outer=(10)]
      │    │    │         │    └── variable: notnull [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
      │    │    │         └── any-not-null [type=int, outer=(7)]
      │    │    │              └── variable: xy.y [type=int, outer=(7)]
      │    │    └── projections [outer=(6,7,11)]
      │    │         └── case [type=bool, outer=(6,11)]
      │    │              ├── true [type=bool]
      │    │              ├── when [type=bool, outer=(6,11)]
      │    │              │    ├── and [type=bool, outer=(6,11), constraints=(/6: (/NULL - ]; /11: [/true - /true]; tight)]
      │    │              │    │    ├── variable: bool_or [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
      │    │              │    │    └── is-not [type=bool, outer=(6), constraints=(/6: (/NULL - ]; tight)]
      │    │              │    │         ├── variable: xy.x [type=int, outer=(6)]
      │    │              │    │         └── null [type=unknown]
      │    │              │    └── true [type=bool]
      │    │              ├── when [type=bool, outer=(11)]
      │    │              │    ├── is [type=bool, outer=(11), constraints=(/11: [/NULL - /NULL]; tight)]
      │    │              │    │    ├── variable: bool_or [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
      │    │              │    │    └── null [type=unknown]
      │    │              │    └── false [type=bool]
      │    │              └── null [type=unknown]
      │    └── filters [type=bool, outer=(6,12)]
      │         └── or [type=bool, outer=(6,12)]
      │              ├── variable: case [type=bool, outer=(12), constraints=(/12: [/true - /true]; tight)]
      │              └── is [type=bool, outer=(6), constraints=(/6: [/NULL - /NULL]; tight)]
      │                   ├── variable: xy.x [type=int, outer=(6)]
      │                   └── null [type=unknown]
      └── true [type=bool]

# --------------------------------------------------
# HoistValuesSubquery
# --------------------------------------------------
opt
SELECT (VALUES ((SELECT i+1)), (10), ((SELECT k+1))) FROM a
----
project
 ├── columns: column9:9(int)
 ├── outer: (6)
 ├── inner-join-apply
 │    ├── columns: a.k:1(int!null) column1:8(int)
 │    ├── outer: (6)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null)
 │    │    └── keys: (1)
 │    ├── max1-row
 │    │    ├── columns: column1:8(int)
 │    │    ├── outer: (1,6)
 │    │    ├── cardinality: [1 - 1]
 │    │    └── project
 │    │         ├── columns: column1:8(int)
 │    │         ├── outer: (1,6)
 │    │         ├── cardinality: [3 - 3]
 │    │         └── inner-join-apply
 │    │              ├── columns: column6:6(int) column7:7(int) column1:8(int)
 │    │              ├── outer: (1,6)
 │    │              ├── cardinality: [3 - 3]
 │    │              ├── project
 │    │              │    ├── columns: column7:7(int) column6:6(int)
 │    │              │    ├── outer: (1,6)
 │    │              │    ├── cardinality: [1 - 1]
 │    │              │    ├── values
 │    │              │    │    ├── cardinality: [1 - 1]
 │    │              │    │    └── tuple [type=tuple{}]
 │    │              │    └── projections [outer=(1,6)]
 │    │              │         └── plus [type=int, outer=(1)]
 │    │              │              ├── variable: a.k [type=int, outer=(1)]
 │    │              │              └── const: 1 [type=int]
 │    │              ├── values
 │    │              │    ├── columns: column1:8(int)
 │    │              │    ├── outer: (6,7)
 │    │              │    ├── cardinality: [3 - 3]
 │    │              │    ├── tuple [type=tuple{int}, outer=(6)]
 │    │              │    │    └── variable: column6 [type=int, outer=(6)]
 │    │              │    ├── tuple [type=tuple{int}]
 │    │              │    │    └── const: 10 [type=int]
 │    │              │    └── tuple [type=tuple{int}, outer=(7)]
 │    │              │         └── variable: column7 [type=int, outer=(7)]
 │    │              └── true [type=bool]
 │    └── true [type=bool]
 └── projections [outer=(8)]
      └── variable: column1 [type=int, outer=(8)]

# Exists in values row.
opt
SELECT (VALUES (EXISTS(SELECT * FROM xy WHERE x=k))) FROM a
----
project
 ├── columns: column9:12(bool)
 ├── left-join-apply
 │    ├── columns: a.k:1(int!null) column1:8(bool)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null)
 │    │    └── keys: (1)
 │    ├── max1-row
 │    │    ├── columns: column1:8(bool)
 │    │    ├── outer: (1)
 │    │    ├── cardinality: [0 - 1]
 │    │    └── project
 │    │         ├── columns: column1:8(bool)
 │    │         ├── outer: (1)
 │    │         └── inner-join-apply
 │    │              ├── columns: column1:8(bool) exists_agg:10(bool) rownum:11(int!null)
 │    │              ├── outer: (1)
 │    │              ├── keys: (11)
 │    │              ├── group-by
 │    │              │    ├── columns: exists_agg:10(bool) rownum:11(int!null)
 │    │              │    ├── grouping columns: rownum:11(int!null)
 │    │              │    ├── outer: (1)
 │    │              │    ├── keys: (11)
 │    │              │    ├── left-join
 │    │              │    │    ├── columns: xy.x:6(int) true:9(bool) rownum:11(int!null)
 │    │              │    │    ├── outer: (1)
 │    │              │    │    ├── keys: weak(6)
 │    │              │    │    ├── row-number
 │    │              │    │    │    ├── columns: rownum:11(int!null)
 │    │              │    │    │    ├── cardinality: [1 - 1]
 │    │              │    │    │    ├── keys: (11)
 │    │              │    │    │    └── values
 │    │              │    │    │         ├── cardinality: [1 - 1]
 │    │              │    │    │         └── tuple [type=tuple{}]
 │    │              │    │    ├── project
 │    │              │    │    │    ├── columns: true:9(bool!null) xy.x:6(int!null)
 │    │              │    │    │    ├── keys: (6)
 │    │              │    │    │    ├── scan xy
 │    │              │    │    │    │    ├── columns: xy.x:6(int!null)
 │    │              │    │    │    │    └── keys: (6)
 │    │              │    │    │    └── projections [outer=(6)]
 │    │              │    │    │         └── true [type=bool]
 │    │              │    │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │              │    │         └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │              │    │              ├── variable: xy.x [type=int, outer=(6)]
 │    │              │    │              └── variable: a.k [type=int, outer=(1)]
 │    │              │    └── aggregations [outer=(9)]
 │    │              │         └── exists-agg [type=bool, outer=(9)]
 │    │              │              └── variable: true [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
 │    │              ├── values
 │    │              │    ├── columns: column1:8(bool)
 │    │              │    ├── outer: (10)
 │    │              │    ├── cardinality: [1 - 1]
 │    │              │    └── tuple [type=tuple{bool}, outer=(10)]
 │    │              │         └── variable: exists_agg [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
 │    │              └── true [type=bool]
 │    └── true [type=bool]
 └── projections [outer=(8)]
      └── variable: column1 [type=bool, outer=(8), constraints=(/8: [/true - /true]; tight)]

# Any in values row.
opt
SELECT (VALUES (5 IN (SELECT y FROM xy WHERE x=k))) FROM a
----
project
 ├── columns: column9:13(bool)
 ├── left-join-apply
 │    ├── columns: a.k:1(int!null) column1:8(bool)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null)
 │    │    └── keys: (1)
 │    ├── max1-row
 │    │    ├── columns: column1:8(bool)
 │    │    ├── outer: (1)
 │    │    ├── cardinality: [0 - 1]
 │    │    └── project
 │    │         ├── columns: column1:8(bool)
 │    │         ├── outer: (1)
 │    │         └── inner-join-apply
 │    │              ├── columns: column1:8(bool) case:11(bool)
 │    │              ├── outer: (1)
 │    │              ├── project
 │    │              │    ├── columns: case:11(bool)
 │    │              │    ├── outer: (1)
 │    │              │    ├── group-by
 │    │              │    │    ├── columns: bool_or:10(bool) rownum:12(int!null)
 │    │              │    │    ├── grouping columns: rownum:12(int!null)
 │    │              │    │    ├── outer: (1)
 │    │              │    │    ├── keys: (12)
 │    │              │    │    ├── left-join
 │    │              │    │    │    ├── columns: xy.x:6(int) notnull:9(bool) rownum:12(int!null)
 │    │              │    │    │    ├── outer: (1)
 │    │              │    │    │    ├── keys: weak(6)
 │    │              │    │    │    ├── row-number
 │    │              │    │    │    │    ├── columns: rownum:12(int!null)
 │    │              │    │    │    │    ├── cardinality: [1 - 1]
 │    │              │    │    │    │    ├── keys: (12)
 │    │              │    │    │    │    └── values
 │    │              │    │    │    │         ├── cardinality: [1 - 1]
 │    │              │    │    │    │         └── tuple [type=tuple{}]
 │    │              │    │    │    ├── project
 │    │              │    │    │    │    ├── columns: notnull:9(bool) xy.x:6(int!null)
 │    │              │    │    │    │    ├── keys: (6)
 │    │              │    │    │    │    ├── select
 │    │              │    │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    │              │    │    │    │    │    ├── keys: (6)
 │    │              │    │    │    │    │    ├── scan xy
 │    │              │    │    │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    │              │    │    │    │    │    │    └── keys: (6)
 │    │              │    │    │    │    │    └── filters [type=bool, outer=(7)]
 │    │              │    │    │    │    │         └── is-not [type=bool, outer=(7)]
 │    │              │    │    │    │    │              ├── eq [type=bool, outer=(7), constraints=(/7: [/5 - /5]; tight)]
 │    │              │    │    │    │    │              │    ├── variable: xy.y [type=int, outer=(7)]
 │    │              │    │    │    │    │              │    └── const: 5 [type=int]
 │    │              │    │    │    │    │              └── false [type=bool]
 │    │              │    │    │    │    └── projections [outer=(6,7)]
 │    │              │    │    │    │         └── is-not [type=bool, outer=(7), constraints=(/7: (/NULL - ]; tight)]
 │    │              │    │    │    │              ├── variable: xy.y [type=int, outer=(7)]
 │    │              │    │    │    │              └── null [type=unknown]
 │    │              │    │    │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │              │    │    │         └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │              │    │    │              ├── variable: xy.x [type=int, outer=(6)]
 │    │              │    │    │              └── variable: a.k [type=int, outer=(1)]
 │    │              │    │    └── aggregations [outer=(9)]
 │    │              │    │         └── bool-or [type=bool, outer=(9)]
 │    │              │    │              └── variable: notnull [type=bool, outer=(9), constraints=(/9: [/true - /true]; tight)]
 │    │              │    └── projections [outer=(10)]
 │    │              │         └── case [type=bool, outer=(10)]
 │    │              │              ├── true [type=bool]
 │    │              │              ├── when [type=bool, outer=(10)]
 │    │              │              │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
 │    │              │              │    └── true [type=bool]
 │    │              │              ├── when [type=bool, outer=(10)]
 │    │              │              │    ├── is [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
 │    │              │              │    │    ├── variable: bool_or [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
 │    │              │              │    │    └── null [type=unknown]
 │    │              │              │    └── false [type=bool]
 │    │              │              └── null [type=unknown]
 │    │              ├── values
 │    │              │    ├── columns: column1:8(bool)
 │    │              │    ├── outer: (11)
 │    │              │    ├── cardinality: [1 - 1]
 │    │              │    └── tuple [type=tuple{bool}, outer=(11)]
 │    │              │         └── variable: case [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
 │    │              └── true [type=bool]
 │    └── true [type=bool]
 └── projections [outer=(8)]
      └── variable: column1 [type=bool, outer=(8), constraints=(/8: [/true - /true]; tight)]

# --------------------------------------------------
# NormalizeAnyFilter
# --------------------------------------------------
opt
SELECT * FROM a WHERE i IN (SELECT y FROM xy)
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── scan xy
 │    └── columns: xy.y:7(int)
 └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
      └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
           ├── variable: a.i [type=int, outer=(2)]
           └── variable: xy.y [type=int, outer=(7)]

# Any is one of several conjuncts.
opt
SELECT * FROM a WHERE k=10 AND i < ANY(SELECT y FROM xy) AND s='foo'
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string!null) j:5(jsonb)
 ├── keys: (1)
 ├── select
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string!null) a.j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    │    ├── constraint: /1: [/10 - /10]
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │         └── eq [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │              ├── variable: a.s [type=string, outer=(4)]
 │              └── const: 'foo' [type=string]
 ├── scan xy
 │    └── columns: xy.y:7(int)
 └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
      └── lt [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
           ├── variable: a.i [type=int, outer=(2)]
           └── variable: xy.y [type=int, outer=(7)]

# Multiple ANY conjuncts.
opt
SELECT * FROM a WHERE i < ANY(SELECT y FROM xy) AND s = ANY(SELECT y::string FROM xy)
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── semi-join
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    │    └── keys: (1)
 │    ├── scan xy
 │    │    └── columns: xy.y:7(int)
 │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
 │         └── lt [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
 │              ├── variable: a.i [type=int, outer=(2)]
 │              └── variable: xy.y [type=int, outer=(7)]
 ├── project
 │    ├── columns: column10:10(string)
 │    ├── scan xy
 │    │    └── columns: xy.y:9(int)
 │    └── projections [outer=(9)]
 │         └── cast: string [type=string, outer=(9)]
 │              └── variable: xy.y [type=int, outer=(9)]
 └── filters [type=bool, outer=(4,10), constraints=(/4: (/NULL - ]; /10: (/NULL - ])]
      └── eq [type=bool, outer=(4,10), constraints=(/4: (/NULL - ]; /10: (/NULL - ])]
           ├── variable: a.s [type=string, outer=(4)]
           └── variable: column10 [type=string, outer=(10)]

# Don't hoist uncorrelated ANY (but rewrite it to EXISTS).
opt
SELECT * FROM a WHERE 5 IN (SELECT y FROM xy)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool]
      └── exists [type=bool]
           └── select
                ├── columns: xy.y:7(int!null)
                ├── scan xy
                │    └── columns: xy.y:7(int)
                └── filters [type=bool, outer=(7), constraints=(/7: [/5 - /5]; tight)]
                     └── eq [type=bool, outer=(7), constraints=(/7: [/5 - /5]; tight)]
                          ├── variable: xy.y [type=int, outer=(7)]
                          └── const: 5 [type=int]

# ANY in Join On condition.
opt
SELECT * FROM a INNER JOIN xy ON i IN (SELECT v FROM uv) AND k=x
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) y:7(int)
 └── inner-join-apply
      ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int!null) xy.y:7(int) exists_agg:11(bool!null)
      ├── scan a
      │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
      │    └── keys: (1)
      ├── select
      │    ├── columns: xy.x:6(int!null) xy.y:7(int) exists_agg:11(bool!null)
      │    ├── outer: (2)
      │    ├── keys: (6)
      │    ├── group-by
      │    │    ├── columns: xy.x:6(int!null) xy.y:7(int) exists_agg:11(bool)
      │    │    ├── grouping columns: xy.x:6(int!null)
      │    │    ├── outer: (2)
      │    │    ├── keys: (6)
      │    │    ├── left-join
      │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int) uv.v:9(int) true:10(bool)
      │    │    │    ├── outer: (2)
      │    │    │    ├── scan xy
      │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
      │    │    │    │    └── keys: (6)
      │    │    │    ├── project
      │    │    │    │    ├── columns: true:10(bool!null) uv.v:9(int)
      │    │    │    │    ├── scan uv
      │    │    │    │    │    └── columns: uv.v:9(int)
      │    │    │    │    └── projections [outer=(9)]
      │    │    │    │         └── true [type=bool]
      │    │    │    └── filters [type=bool, outer=(2,9), constraints=(/2: (/NULL - ]; /9: (/NULL - ])]
      │    │    │         └── eq [type=bool, outer=(2,9), constraints=(/2: (/NULL - ]; /9: (/NULL - ])]
      │    │    │              ├── variable: a.i [type=int, outer=(2)]
      │    │    │              └── variable: uv.v [type=int, outer=(9)]
      │    │    └── aggregations [outer=(7,10)]
      │    │         ├── exists-agg [type=bool, outer=(10)]
      │    │         │    └── variable: true [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
      │    │         └── any-not-null [type=int, outer=(7)]
      │    │              └── variable: xy.y [type=int, outer=(7)]
      │    └── filters [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
      │         └── variable: exists_agg [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
      └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
           └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
                ├── variable: a.k [type=int, outer=(1)]
                └── variable: xy.x [type=int, outer=(6)]

# --------------------------------------------------
# NormalizeNotAnyFilter
# --------------------------------------------------
opt
SELECT * FROM a WHERE i NOT IN (SELECT y FROM xy)
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 ├── scan xy
 │    └── columns: xy.y:7(int)
 └── filters [type=bool, outer=(2,7)]
      └── is-not [type=bool, outer=(2,7)]
           ├── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
           │    ├── variable: a.i [type=int, outer=(2)]
           │    └── variable: xy.y [type=int, outer=(7)]
           └── false [type=bool]

# NOT ANY is one of several conjuncts. Note that i > ALL(...) gets mapped to
# NOT i <= ANY(...) by optbuilder.
opt
SELECT * FROM a WHERE k > 1 AND k < 5 AND i > ALL(SELECT y FROM xy)
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    ├── constraint: /1: [/2 - /4]
 │    └── keys: (1)
 ├── scan xy
 │    └── columns: xy.y:7(int)
 └── filters [type=bool, outer=(2,7)]
      └── is-not [type=bool, outer=(2,7)]
           ├── le [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
           │    ├── variable: a.i [type=int, outer=(2)]
           │    └── variable: xy.y [type=int, outer=(7)]
           └── false [type=bool]

# Multiple NOT ANY conjuncts.
opt
SELECT * FROM a WHERE i < ALL(SELECT y FROM xy) AND s <> ALL(SELECT y::string FROM xy)
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── anti-join
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    │    └── keys: (1)
 │    ├── scan xy
 │    │    └── columns: xy.y:7(int)
 │    └── filters [type=bool, outer=(2,7)]
 │         └── is-not [type=bool, outer=(2,7)]
 │              ├── ge [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
 │              │    ├── variable: a.i [type=int, outer=(2)]
 │              │    └── variable: xy.y [type=int, outer=(7)]
 │              └── false [type=bool]
 ├── project
 │    ├── columns: column10:10(string)
 │    ├── scan xy
 │    │    └── columns: xy.y:9(int)
 │    └── projections [outer=(9)]
 │         └── cast: string [type=string, outer=(9)]
 │              └── variable: xy.y [type=int, outer=(9)]
 └── filters [type=bool, outer=(4,10)]
      └── is-not [type=bool, outer=(4,10)]
           ├── eq [type=bool, outer=(4,10), constraints=(/4: (/NULL - ]; /10: (/NULL - ])]
           │    ├── variable: a.s [type=string, outer=(4)]
           │    └── variable: column10 [type=string, outer=(10)]
           └── false [type=bool]

# Don't hoist uncorrelated NOT ANY (but rewrite it to NOT EXISTS).
opt
SELECT * FROM a WHERE 5 NOT IN (SELECT y FROM xy)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool]
      └── not [type=bool]
           └── exists [type=bool]
                └── select
                     ├── columns: xy.y:7(int)
                     ├── scan xy
                     │    └── columns: xy.y:7(int)
                     └── filters [type=bool, outer=(7)]
                          └── is-not [type=bool, outer=(7)]
                               ├── eq [type=bool, outer=(7), constraints=(/7: [/5 - /5]; tight)]
                               │    ├── variable: xy.y [type=int, outer=(7)]
                               │    └── const: 5 [type=int]
                               └── false [type=bool]

# NOT ANY in Join On condition.
opt
SELECT * FROM a INNER JOIN xy ON i NOT IN (SELECT v FROM uv) AND k=x
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) y:7(int)
 └── inner-join-apply
      ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb) xy.x:6(int!null) xy.y:7(int) exists_agg:11(bool!null)
      ├── scan a
      │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
      │    └── keys: (1)
      ├── select
      │    ├── columns: xy.x:6(int!null) xy.y:7(int) exists_agg:11(bool!null)
      │    ├── outer: (2)
      │    ├── keys: (6)
      │    ├── group-by
      │    │    ├── columns: xy.x:6(int!null) xy.y:7(int) exists_agg:11(bool)
      │    │    ├── grouping columns: xy.x:6(int!null)
      │    │    ├── outer: (2)
      │    │    ├── keys: (6)
      │    │    ├── left-join
      │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int) uv.v:9(int) true:10(bool)
      │    │    │    ├── outer: (2)
      │    │    │    ├── scan xy
      │    │    │    │    ├── columns: xy.x:6(int!null) xy.y:7(int)
      │    │    │    │    └── keys: (6)
      │    │    │    ├── project
      │    │    │    │    ├── columns: true:10(bool!null) uv.v:9(int)
      │    │    │    │    ├── scan uv
      │    │    │    │    │    └── columns: uv.v:9(int)
      │    │    │    │    └── projections [outer=(9)]
      │    │    │    │         └── true [type=bool]
      │    │    │    └── filters [type=bool, outer=(2,9)]
      │    │    │         └── is-not [type=bool, outer=(2,9)]
      │    │    │              ├── eq [type=bool, outer=(2,9), constraints=(/2: (/NULL - ]; /9: (/NULL - ])]
      │    │    │              │    ├── variable: a.i [type=int, outer=(2)]
      │    │    │              │    └── variable: uv.v [type=int, outer=(9)]
      │    │    │              └── false [type=bool]
      │    │    └── aggregations [outer=(7,10)]
      │    │         ├── exists-agg [type=bool, outer=(10)]
      │    │         │    └── variable: true [type=bool, outer=(10), constraints=(/10: [/true - /true]; tight)]
      │    │         └── any-not-null [type=int, outer=(7)]
      │    │              └── variable: xy.y [type=int, outer=(7)]
      │    └── filters [type=bool, outer=(11), constraints=(/11: [/false - /false]; tight)]
      │         └── not [type=bool, outer=(11), constraints=(/11: [/false - /false]; tight)]
      │              └── variable: exists_agg [type=bool, outer=(11), constraints=(/11: [/true - /true]; tight)]
      └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
           └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
                ├── variable: a.k [type=int, outer=(1)]
                └── variable: xy.x [type=int, outer=(6)]

# --------------------------------------------------
# NormalizeAnyFilter + NormalizeNotAnyFilter
# --------------------------------------------------
opt
SELECT * FROM a WHERE i = ANY(SELECT y FROM xy) AND s <> ALL(SELECT y::string FROM xy)
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── semi-join
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    │    └── keys: (1)
 │    ├── scan xy
 │    │    └── columns: xy.y:7(int)
 │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
 │         └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
 │              ├── variable: a.i [type=int, outer=(2)]
 │              └── variable: xy.y [type=int, outer=(7)]
 ├── project
 │    ├── columns: column10:10(string)
 │    ├── scan xy
 │    │    └── columns: xy.y:9(int)
 │    └── projections [outer=(9)]
 │         └── cast: string [type=string, outer=(9)]
 │              └── variable: xy.y [type=int, outer=(9)]
 └── filters [type=bool, outer=(4,10)]
      └── is-not [type=bool, outer=(4,10)]
           ├── eq [type=bool, outer=(4,10), constraints=(/4: (/NULL - ]; /10: (/NULL - ])]
           │    ├── variable: a.s [type=string, outer=(4)]
           │    └── variable: column10 [type=string, outer=(10)]
           └── false [type=bool]
