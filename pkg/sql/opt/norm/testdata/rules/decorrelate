exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 └── INDEX primary
      └── k int not null

exec-ddl
CREATE TABLE xy (x INT PRIMARY KEY, y INT)
----
TABLE xy
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE uv (u INT PRIMARY KEY, v INT)
----
TABLE uv
 ├── u int not null
 ├── v int
 └── INDEX primary
      └── u int not null

# --------------------------------------------------
# DecorrelateJoin
# --------------------------------------------------
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM xy WHERE x=k)
----
semi-join (merge)
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    └── ordering: +1
 ├── scan xy
 │    ├── columns: x:6(int!null) y:7(int)
 │    ├── key: (6)
 │    ├── fd: (6)-->(7)
 │    └── ordering: +6
 └── merge-on
      ├── left ordering: +1
      ├── right ordering: +6
      └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
           └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM xy WHERE x=k)
----
anti-join (merge)
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    └── ordering: +1
 ├── scan xy
 │    ├── columns: x:6(int!null) y:7(int)
 │    ├── key: (6)
 │    ├── fd: (6)-->(7)
 │    └── ordering: +6
 └── merge-on
      ├── left ordering: +1
      ├── right ordering: +6
      └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
           └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# --------------------------------------------------
# TryDecorrelateSelect
# --------------------------------------------------
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM (VALUES (k), (i)) WHERE column1=k)
----
semi-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 ├── values
 │    ├── columns: column1:6(int)
 │    ├── outer: (1,2)
 │    ├── cardinality: [2 - 2]
 │    ├── (a.k) [type=tuple{int}, outer=(1)]
 │    └── (a.i) [type=tuple{int}, outer=(2)]
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
      └── column1 = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM (VALUES (k), (i)) WHERE column1=k)
----
anti-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 ├── values
 │    ├── columns: column1:6(int)
 │    ├── outer: (1,2)
 │    ├── cardinality: [2 - 2]
 │    ├── (a.k) [type=tuple{int}, outer=(1)]
 │    └── (a.i) [type=tuple{int}, outer=(2)]
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
      └── column1 = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# Attempt to decorrelate query by pulling up outer select. But since limit query
# cannot be decorrelated, push the outer select back down again (and make sure
# potential rule cycle is detected and handled).
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM (SELECT * FROM xy WHERE y=k LIMIT 1) WHERE y=10)
----
semi-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 ├── select
 │    ├── columns: x:6(int!null) y:7(int!null)
 │    ├── outer: (1)
 │    ├── cardinality: [0 - 1]
 │    ├── key: ()
 │    ├── fd: ()-->(6,7)
 │    ├── limit
 │    │    ├── columns: x:6(int!null) y:7(int!null)
 │    │    ├── outer: (1)
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── key: ()
 │    │    ├── fd: ()-->(6,7)
 │    │    ├── select
 │    │    │    ├── columns: x:6(int!null) y:7(int!null)
 │    │    │    ├── outer: (1)
 │    │    │    ├── key: (6)
 │    │    │    ├── fd: ()-->(7)
 │    │    │    ├── scan xy
 │    │    │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    │    │    ├── key: (6)
 │    │    │    │    └── fd: (6)-->(7)
 │    │    │    └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
 │    │    │         └── xy.y = a.k [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
 │    │    └── const: 1 [type=int]
 │    └── filters [type=bool, outer=(7), constraints=(/7: [/10 - /10]; tight), fd=()-->(7)]
 │         └── xy.y = 10 [type=bool, outer=(7), constraints=(/7: [/10 - /10]; tight)]
 └── true [type=bool]

# Same as previous, but using anti-join.
opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM (SELECT * FROM xy WHERE y=k LIMIT 1) WHERE y=10)
----
anti-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 ├── select
 │    ├── columns: x:6(int!null) y:7(int!null)
 │    ├── outer: (1)
 │    ├── cardinality: [0 - 1]
 │    ├── key: ()
 │    ├── fd: ()-->(6,7)
 │    ├── limit
 │    │    ├── columns: x:6(int!null) y:7(int!null)
 │    │    ├── outer: (1)
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── key: ()
 │    │    ├── fd: ()-->(6,7)
 │    │    ├── select
 │    │    │    ├── columns: x:6(int!null) y:7(int!null)
 │    │    │    ├── outer: (1)
 │    │    │    ├── key: (6)
 │    │    │    ├── fd: ()-->(7)
 │    │    │    ├── scan xy
 │    │    │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    │    │    ├── key: (6)
 │    │    │    │    └── fd: (6)-->(7)
 │    │    │    └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
 │    │    │         └── xy.y = a.k [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
 │    │    └── const: 1 [type=int]
 │    └── filters [type=bool, outer=(7), constraints=(/7: [/10 - /10]; tight), fd=()-->(7)]
 │         └── xy.y = 10 [type=bool, outer=(7), constraints=(/7: [/10 - /10]; tight)]
 └── true [type=bool]

# Decorrelate Select with reference to outer column and no limit.
opt
SELECT * FROM a WHERE (SELECT y FROM xy WHERE x=i) > 100
----
project
 ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 └── inner-join
      ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) y:7(int!null)
      ├── key: (1)
      ├── fd: (1)-->(2-5), (6)-->(7), (2)==(6), (6)==(2)
      ├── scan a
      │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
      │    ├── key: (1)
      │    └── fd: (1)-->(2-5)
      ├── select
      │    ├── columns: x:6(int!null) y:7(int!null)
      │    ├── key: (6)
      │    ├── fd: (6)-->(7)
      │    ├── scan xy
      │    │    ├── columns: x:6(int!null) y:7(int)
      │    │    ├── key: (6)
      │    │    └── fd: (6)-->(7)
      │    └── filters [type=bool, outer=(7), constraints=(/7: [/101 - ]; tight)]
      │         └── xy.y > 100 [type=bool, outer=(7), constraints=(/7: [/101 - ]; tight)]
      └── filters [type=bool, outer=(2,6), constraints=(/2: (/NULL - ]; /6: (/NULL - ]), fd=(2)==(6), (6)==(2)]
           └── xy.x = a.i [type=bool, outer=(2,6), constraints=(/2: (/NULL - ]; /6: (/NULL - ])]

# Decorrelate Select with LeftJoinApply.
opt
SELECT * FROM a WHERE (SELECT x FROM (SELECT * FROM xy LIMIT 1) WHERE k=x) > 100
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-5)
 └── inner-join (lookup a)
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null)
      ├── key columns: [6] = [1]
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1-6)
      ├── select
      │    ├── columns: x:6(int!null)
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    ├── fd: ()-->(6)
      │    ├── scan xy
      │    │    ├── columns: x:6(int!null)
      │    │    ├── limit: 1
      │    │    ├── key: ()
      │    │    └── fd: ()-->(6)
      │    └── filters [type=bool, outer=(6), constraints=(/6: [/101 - ]; tight)]
      │         └── xy.x > 100 [type=bool, outer=(6), constraints=(/6: [/101 - ]; tight)]
      └── filters [type=bool, outer=(1,6), constraints=(/1: [/101 - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
           ├── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
           └── a.k > 100 [type=bool, outer=(1), constraints=(/1: [/101 - ]; tight)]

# Decorrelate with non-apply operator because of multi-level nesting.
opt
SELECT *
FROM a
WHERE EXISTS(SELECT * FROM xy WHERE x=k AND EXISTS(SELECT * FROM uv WHERE u=10 AND s='foo'))
----
semi-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 ├── semi-join
 │    ├── columns: x:6(int!null) y:7(int)
 │    ├── outer: (4)
 │    ├── key: (6)
 │    ├── fd: (6)-->(7)
 │    ├── scan xy
 │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    ├── key: (6)
 │    │    └── fd: (6)-->(7)
 │    ├── scan uv
 │    │    ├── columns: u:8(int!null) v:9(int)
 │    │    ├── constraint: /8: [/10 - /10]
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── key: ()
 │    │    └── fd: ()-->(8,9)
 │    └── filters [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight), fd=()-->(4)]
 │         └── a.s = 'foo' [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
      └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# --------------------------------------------------
# TryDecorrelateProject +
# TryDecorrelateProjectSelect +
# TryDecorrelateScalarGroupBy
#
# Start with some shared test cases that exercise multiple
# decorrelation rules.
# --------------------------------------------------

# Left join caused by correlated ANY clause.
opt
SELECT 5=ANY(SELECT y FROM xy WHERE x=k) AS r FROM a
----
project
 ├── columns: r:8(bool)
 ├── group-by
 │    ├── columns: k:1(int!null) bool_or:10(bool)
 │    ├── grouping columns: k:1(int!null)
 │    ├── key: (1)
 │    ├── fd: (1)-->(10)
 │    ├── left-join (merge)
 │    │    ├── columns: k:1(int!null) x:6(int) notnull:9(bool)
 │    │    ├── key: (1,6)
 │    │    ├── fd: (6)-->(9)
 │    │    ├── scan a
 │    │    │    ├── columns: k:1(int!null)
 │    │    │    ├── key: (1)
 │    │    │    └── ordering: +1
 │    │    ├── project
 │    │    │    ├── columns: notnull:9(bool) x:6(int!null)
 │    │    │    ├── key: (6)
 │    │    │    ├── fd: (6)-->(9)
 │    │    │    ├── ordering: +6
 │    │    │    ├── select
 │    │    │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    │    │    ├── key: (6)
 │    │    │    │    ├── fd: (6)-->(7)
 │    │    │    │    ├── ordering: +6
 │    │    │    │    ├── scan xy
 │    │    │    │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    │    │    │    ├── key: (6)
 │    │    │    │    │    ├── fd: (6)-->(7)
 │    │    │    │    │    └── ordering: +6
 │    │    │    │    └── filters [type=bool, outer=(7)]
 │    │    │    │         └── (xy.y = 5) IS NOT false [type=bool, outer=(7)]
 │    │    │    └── projections [outer=(6,7)]
 │    │    │         └── xy.y IS NOT NULL [type=bool, outer=(7)]
 │    │    └── merge-on
 │    │         ├── left ordering: +1
 │    │         ├── right ordering: +6
 │    │         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
 │    │              └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    └── aggregations [outer=(9)]
 │         └── bool-or [type=bool, outer=(9)]
 │              └── variable: notnull [type=bool, outer=(9)]
 └── projections [outer=(10)]
      └── CASE WHEN bool_or THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(10)]

# Left join caused by zero or one cardinality subquery.
opt
SELECT * FROM a WHERE (SELECT y+1 AS r FROM (SELECT * FROM xy LIMIT 1) WHERE x=k) > 10
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-5)
 └── inner-join (lookup a)
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null)
      ├── key columns: [6] = [1]
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1-6)
      ├── project
      │    ├── columns: x:6(int!null)
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    ├── fd: ()-->(6)
      │    └── select
      │         ├── columns: x:6(int!null) y:7(int)
      │         ├── cardinality: [0 - 1]
      │         ├── key: ()
      │         ├── fd: ()-->(6,7)
      │         ├── scan xy
      │         │    ├── columns: x:6(int!null) y:7(int)
      │         │    ├── limit: 1
      │         │    ├── key: ()
      │         │    └── fd: ()-->(6,7)
      │         └── filters [type=bool, outer=(7)]
      │              └── (xy.y + 1) > 10 [type=bool, outer=(7)]
      └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
           └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# Any clause with constant.
opt
SELECT 5=ANY(SELECT y FROM xy WHERE x=k) AS r FROM a
----
project
 ├── columns: r:8(bool)
 ├── group-by
 │    ├── columns: k:1(int!null) bool_or:10(bool)
 │    ├── grouping columns: k:1(int!null)
 │    ├── key: (1)
 │    ├── fd: (1)-->(10)
 │    ├── left-join (merge)
 │    │    ├── columns: k:1(int!null) x:6(int) notnull:9(bool)
 │    │    ├── key: (1,6)
 │    │    ├── fd: (6)-->(9)
 │    │    ├── scan a
 │    │    │    ├── columns: k:1(int!null)
 │    │    │    ├── key: (1)
 │    │    │    └── ordering: +1
 │    │    ├── project
 │    │    │    ├── columns: notnull:9(bool) x:6(int!null)
 │    │    │    ├── key: (6)
 │    │    │    ├── fd: (6)-->(9)
 │    │    │    ├── ordering: +6
 │    │    │    ├── select
 │    │    │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    │    │    ├── key: (6)
 │    │    │    │    ├── fd: (6)-->(7)
 │    │    │    │    ├── ordering: +6
 │    │    │    │    ├── scan xy
 │    │    │    │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    │    │    │    ├── key: (6)
 │    │    │    │    │    ├── fd: (6)-->(7)
 │    │    │    │    │    └── ordering: +6
 │    │    │    │    └── filters [type=bool, outer=(7)]
 │    │    │    │         └── (xy.y = 5) IS NOT false [type=bool, outer=(7)]
 │    │    │    └── projections [outer=(6,7)]
 │    │    │         └── xy.y IS NOT NULL [type=bool, outer=(7)]
 │    │    └── merge-on
 │    │         ├── left ordering: +1
 │    │         ├── right ordering: +6
 │    │         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
 │    │              └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    └── aggregations [outer=(9)]
 │         └── bool-or [type=bool, outer=(9)]
 │              └── variable: notnull [type=bool, outer=(9)]
 └── projections [outer=(10)]
      └── CASE WHEN bool_or THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(10)]

# Any clause with variable.
opt
SELECT i=ANY(SELECT y FROM xy WHERE x=k) AS r FROM a
----
project
 ├── columns: r:8(bool)
 ├── group-by
 │    ├── columns: k:1(int!null) i:2(int) bool_or:10(bool)
 │    ├── grouping columns: k:1(int!null)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2,10)
 │    ├── left-join (merge)
 │    │    ├── columns: k:1(int!null) i:2(int) x:6(int) y:7(int) notnull:9(bool)
 │    │    ├── key: (1,6)
 │    │    ├── fd: (1)-->(2), (6)-->(7), (7)~~>(9), (1,6)-->(9)
 │    │    ├── scan a
 │    │    │    ├── columns: k:1(int!null) i:2(int)
 │    │    │    ├── key: (1)
 │    │    │    ├── fd: (1)-->(2)
 │    │    │    └── ordering: +1
 │    │    ├── project
 │    │    │    ├── columns: notnull:9(bool) x:6(int!null) y:7(int)
 │    │    │    ├── key: (6)
 │    │    │    ├── fd: (6)-->(7), (7)-->(9)
 │    │    │    ├── ordering: +6
 │    │    │    ├── scan xy
 │    │    │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    │    │    ├── key: (6)
 │    │    │    │    ├── fd: (6)-->(7)
 │    │    │    │    └── ordering: +6
 │    │    │    └── projections [outer=(6,7)]
 │    │    │         └── xy.y IS NOT NULL [type=bool, outer=(7)]
 │    │    └── merge-on
 │    │         ├── left ordering: +1
 │    │         ├── right ordering: +6
 │    │         └── filters [type=bool, outer=(1,2,6,7), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
 │    │              ├── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │              └── (a.i = xy.y) IS NOT false [type=bool, outer=(2,7)]
 │    └── aggregations [outer=(2,9)]
 │         ├── bool-or [type=bool, outer=(9)]
 │         │    └── variable: notnull [type=bool, outer=(9)]
 │         └── any-not-null [type=int, outer=(2)]
 │              └── variable: a.i [type=int, outer=(2)]
 └── projections [outer=(2,10)]
      └── CASE WHEN bool_or AND (a.i IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(2,10)]

# Any clause with more complex expression that must be cached.
opt
SELECT i*i/5=ANY(SELECT y FROM xy WHERE x=k) AS r FROM a
----
project
 ├── columns: r:8(bool)
 ├── group-by
 │    ├── columns: k:1(int!null) scalar:9(decimal) bool_or:11(bool)
 │    ├── grouping columns: k:1(int!null)
 │    ├── key: (1)
 │    ├── fd: (1)-->(9,11)
 │    ├── left-join (merge)
 │    │    ├── columns: k:1(int!null) x:6(int) y:7(int) scalar:9(decimal) notnull:10(bool)
 │    │    ├── key: (1,6)
 │    │    ├── fd: (1)-->(9), (6)-->(7), (7)~~>(10), (1,6)-->(10)
 │    │    ├── project
 │    │    │    ├── columns: scalar:9(decimal) k:1(int!null)
 │    │    │    ├── key: (1)
 │    │    │    ├── fd: (1)-->(9)
 │    │    │    ├── ordering: +1
 │    │    │    ├── scan a
 │    │    │    │    ├── columns: k:1(int!null) i:2(int)
 │    │    │    │    ├── key: (1)
 │    │    │    │    ├── fd: (1)-->(2)
 │    │    │    │    └── ordering: +1
 │    │    │    └── projections [outer=(1,2)]
 │    │    │         └── (a.i * a.i) / 5 [type=decimal, outer=(2)]
 │    │    ├── project
 │    │    │    ├── columns: notnull:10(bool) x:6(int!null) y:7(int)
 │    │    │    ├── key: (6)
 │    │    │    ├── fd: (6)-->(7), (7)-->(10)
 │    │    │    ├── ordering: +6
 │    │    │    ├── scan xy
 │    │    │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    │    │    ├── key: (6)
 │    │    │    │    ├── fd: (6)-->(7)
 │    │    │    │    └── ordering: +6
 │    │    │    └── projections [outer=(6,7)]
 │    │    │         └── xy.y IS NOT NULL [type=bool, outer=(7)]
 │    │    └── merge-on
 │    │         ├── left ordering: +1
 │    │         ├── right ordering: +6
 │    │         └── filters [type=bool, outer=(1,6,7,9), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
 │    │              ├── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │              └── (scalar = xy.y) IS NOT false [type=bool, outer=(7,9)]
 │    └── aggregations [outer=(9,10)]
 │         ├── bool-or [type=bool, outer=(10)]
 │         │    └── variable: notnull [type=bool, outer=(10)]
 │         └── any-not-null [type=decimal, outer=(9)]
 │              └── variable: scalar [type=decimal, outer=(9)]
 └── projections [outer=(9,11)]
      └── CASE WHEN bool_or AND (scalar IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(9,11)]

# --------------------------------------------------
# TryDecorrelateProject
# --------------------------------------------------
opt
SELECT k FROM a
WHERE EXISTS
(
    SELECT * FROM xy RIGHT JOIN (SELECT u, u/1.1 AS div FROM uv WHERE i=5) ON x=div
)
----
project
 ├── columns: k:1(int!null)
 ├── key: (1)
 └── semi-join-apply
      ├── columns: k:1(int!null) i:2(int)
      ├── key: (1)
      ├── fd: (1)-->(2)
      ├── scan a
      │    ├── columns: k:1(int!null) i:2(int)
      │    ├── key: (1)
      │    └── fd: (1)-->(2)
      ├── select
      │    ├── columns: x:6(int!null) div:10(decimal!null)
      │    ├── outer: (2)
      │    ├── fd: (6)==(10), (10)==(6)
      │    ├── project
      │    │    ├── columns: div:10(decimal) x:6(int)
      │    │    ├── outer: (2)
      │    │    ├── right-join
      │    │    │    ├── columns: x:6(int) u:8(int!null)
      │    │    │    ├── outer: (2)
      │    │    │    ├── key: (6,8)
      │    │    │    ├── scan xy
      │    │    │    │    ├── columns: x:6(int!null)
      │    │    │    │    └── key: (6)
      │    │    │    ├── select
      │    │    │    │    ├── columns: u:8(int!null)
      │    │    │    │    ├── outer: (2)
      │    │    │    │    ├── key: (8)
      │    │    │    │    ├── scan uv
      │    │    │    │    │    ├── columns: u:8(int!null)
      │    │    │    │    │    └── key: (8)
      │    │    │    │    └── filters [type=bool, outer=(2), constraints=(/2: [/5 - /5]; tight), fd=()-->(2)]
      │    │    │    │         └── a.i = 5 [type=bool, outer=(2), constraints=(/2: [/5 - /5]; tight)]
      │    │    │    └── true [type=bool]
      │    │    └── projections [outer=(6,8)]
      │    │         └── uv.u / 1.1 [type=decimal, outer=(8)]
      │    └── filters [type=bool, outer=(6,10), constraints=(/6: (/NULL - ]; /10: (/NULL - ]), fd=(6)==(10), (10)==(6)]
      │         └── xy.x = div [type=bool, outer=(6,10), constraints=(/6: (/NULL - ]; /10: (/NULL - ])]
      └── true [type=bool]

# --------------------------------------------------
# TryDecorrelateProjectSelect
# --------------------------------------------------
opt
SELECT k FROM a
WHERE EXISTS
(
    SELECT * FROM xy FULL JOIN (SELECT u, u+1 AS plus FROM uv WHERE i=5) ON x=plus
)
----
project
 ├── columns: k:1(int!null)
 ├── key: (1)
 └── semi-join-apply
      ├── columns: k:1(int!null) i:2(int)
      ├── key: (1)
      ├── fd: (1)-->(2)
      ├── scan a
      │    ├── columns: k:1(int!null) i:2(int)
      │    ├── key: (1)
      │    └── fd: (1)-->(2)
      ├── full-join
      │    ├── columns: x:6(int) plus:10(int)
      │    ├── outer: (2)
      │    ├── scan xy
      │    │    ├── columns: x:6(int!null)
      │    │    └── key: (6)
      │    ├── project
      │    │    ├── columns: plus:10(int)
      │    │    ├── scan uv
      │    │    │    ├── columns: u:8(int!null)
      │    │    │    └── key: (8)
      │    │    └── projections [outer=(8)]
      │    │         └── uv.u + 1 [type=int, outer=(8)]
      │    └── filters [type=bool, outer=(2,6,10), constraints=(/2: [/5 - /5]; /6: (/NULL - ]; /10: (/NULL - ]), fd=()-->(2), (6)==(10), (10)==(6)]
      │         ├── xy.x = plus [type=bool, outer=(6,10), constraints=(/6: (/NULL - ]; /10: (/NULL - ])]
      │         └── a.i = 5 [type=bool, outer=(2), constraints=(/2: [/5 - /5]; tight)]
      └── true [type=bool]

# --------------------------------------------------
# TryDecorrelateInnerJoin
# --------------------------------------------------
# Semi-join as outer.
opt
SELECT k FROM a
WHERE EXISTS
(
    SELECT * FROM xy INNER JOIN uv ON x=u AND x=k
)
----
semi-join
 ├── columns: k:1(int!null)
 ├── key: (1)
 ├── scan a
 │    ├── columns: k:1(int!null)
 │    └── key: (1)
 ├── inner-join (merge)
 │    ├── columns: x:6(int!null) y:7(int) u:8(int!null) v:9(int)
 │    ├── key: (8)
 │    ├── fd: (6)-->(7), (8)-->(9), (6)==(8), (8)==(6)
 │    ├── scan xy
 │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    ├── key: (6)
 │    │    ├── fd: (6)-->(7)
 │    │    └── ordering: +6
 │    ├── scan uv
 │    │    ├── columns: u:8(int!null) v:9(int)
 │    │    ├── key: (8)
 │    │    ├── fd: (8)-->(9)
 │    │    └── ordering: +8
 │    └── merge-on
 │         ├── left ordering: +6
 │         ├── right ordering: +8
 │         └── filters [type=bool, outer=(6,8), constraints=(/6: (/NULL - ]; /8: (/NULL - ]), fd=(6)==(8), (8)==(6)]
 │              └── xy.x = uv.u [type=bool, outer=(6,8), constraints=(/6: (/NULL - ]; /8: (/NULL - ])]
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
      └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# Anti-join as outer.
opt
SELECT k FROM a
WHERE NOT EXISTS
(
    SELECT * FROM xy INNER JOIN uv ON x=u AND x=k
)
----
anti-join
 ├── columns: k:1(int!null)
 ├── key: (1)
 ├── scan a
 │    ├── columns: k:1(int!null)
 │    └── key: (1)
 ├── inner-join (merge)
 │    ├── columns: x:6(int!null) y:7(int) u:8(int!null) v:9(int)
 │    ├── key: (8)
 │    ├── fd: (6)-->(7), (8)-->(9), (6)==(8), (8)==(6)
 │    ├── scan xy
 │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    ├── key: (6)
 │    │    ├── fd: (6)-->(7)
 │    │    └── ordering: +6
 │    ├── scan uv
 │    │    ├── columns: u:8(int!null) v:9(int)
 │    │    ├── key: (8)
 │    │    ├── fd: (8)-->(9)
 │    │    └── ordering: +8
 │    └── merge-on
 │         ├── left ordering: +6
 │         ├── right ordering: +8
 │         └── filters [type=bool, outer=(6,8), constraints=(/6: (/NULL - ]; /8: (/NULL - ]), fd=(6)==(8), (8)==(6)]
 │              └── xy.x = uv.u [type=bool, outer=(6,8), constraints=(/6: (/NULL - ]; /8: (/NULL - ])]
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
      └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# Right-join as outer.
opt
SELECT k FROM a
WHERE
(
    SELECT count(*)
    FROM xy
    INNER JOIN uv
    ON x=u AND x=k
) IS DISTINCT FROM 1
----
project
 ├── columns: k:1(int!null)
 ├── key: (1)
 └── select
      ├── columns: k:1(int!null) count:10(int)
      ├── key: (1)
      ├── fd: (1)-->(10)
      ├── group-by
      │    ├── columns: k:1(int!null) count:10(int)
      │    ├── grouping columns: k:1(int!null)
      │    ├── key: (1)
      │    ├── fd: (1)-->(10)
      │    ├── right-join
      │    │    ├── columns: k:1(int!null) x:6(int) u:8(int)
      │    │    ├── key: (1,8)
      │    │    ├── fd: (6)==(8), (8)==(6)
      │    │    ├── inner-join (merge)
      │    │    │    ├── columns: x:6(int!null) u:8(int!null)
      │    │    │    ├── key: (8)
      │    │    │    ├── fd: (6)==(8), (8)==(6)
      │    │    │    ├── scan xy
      │    │    │    │    ├── columns: x:6(int!null)
      │    │    │    │    ├── key: (6)
      │    │    │    │    └── ordering: +6
      │    │    │    ├── scan uv
      │    │    │    │    ├── columns: u:8(int!null)
      │    │    │    │    ├── key: (8)
      │    │    │    │    └── ordering: +8
      │    │    │    └── merge-on
      │    │    │         ├── left ordering: +6
      │    │    │         ├── right ordering: +8
      │    │    │         └── filters [type=bool, outer=(6,8), constraints=(/6: (/NULL - ]; /8: (/NULL - ]), fd=(6)==(8), (8)==(6)]
      │    │    │              └── xy.x = uv.u [type=bool, outer=(6,8), constraints=(/6: (/NULL - ]; /8: (/NULL - ])]
      │    │    ├── scan a
      │    │    │    ├── columns: k:1(int!null)
      │    │    │    └── key: (1)
      │    │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
      │    │         └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      │    └── aggregations [outer=(6)]
      │         └── count [type=int, outer=(6)]
      │              └── variable: xy.x [type=int, outer=(6)]
      └── filters [type=bool, outer=(10), constraints=(/10: [ - /0] [/2 - ]; tight)]
           └── count IS DISTINCT FROM 1 [type=bool, outer=(10), constraints=(/10: [ - /0] [/2 - ]; tight)]

# Can't decorrelate left-join as inner.
opt
SELECT k FROM a
WHERE EXISTS
(
    SELECT * FROM xy LEFT JOIN uv ON x=u AND x=k
)
----
semi-join-apply
 ├── columns: k:1(int!null)
 ├── key: (1)
 ├── scan a
 │    ├── columns: k:1(int!null)
 │    └── key: (1)
 ├── left-join (merge)
 │    ├── columns: x:6(int!null) y:7(int) u:8(int) v:9(int)
 │    ├── outer: (1)
 │    ├── key: (6,8)
 │    ├── fd: (6)-->(7), (8)-->(9)
 │    ├── scan xy
 │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    ├── key: (6)
 │    │    ├── fd: (6)-->(7)
 │    │    └── ordering: +6
 │    ├── scan uv
 │    │    ├── columns: u:8(int!null) v:9(int)
 │    │    ├── key: (8)
 │    │    ├── fd: (8)-->(9)
 │    │    └── ordering: +8
 │    └── merge-on
 │         ├── left ordering: +6
 │         ├── right ordering: +8
 │         └── filters [type=bool, outer=(1,6,8), constraints=(/1: (/NULL - ]; /6: (/NULL - ]; /8: (/NULL - ]), fd=(6)==(1,8), (8)==(1,6), (1)==(6,8)]
 │              ├── xy.x = uv.u [type=bool, outer=(6,8), constraints=(/6: (/NULL - ]; /8: (/NULL - ])]
 │              └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 └── true [type=bool]

# Can't decorrelate semi-join as inner.
opt
SELECT k
FROM a
WHERE EXISTS
(
    SELECT *
    FROM xy
    WHERE EXISTS
    (
        SELECT * FROM uv INNER JOIN uv AS uv2 ON uv2.u=k
    )
)
----
semi-join-apply
 ├── columns: k:1(int!null)
 ├── key: (1)
 ├── scan a
 │    ├── columns: k:1(int!null)
 │    └── key: (1)
 ├── semi-join
 │    ├── columns: x:6(int!null) y:7(int)
 │    ├── outer: (1)
 │    ├── key: (6)
 │    ├── fd: (6)-->(7)
 │    ├── scan xy
 │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    ├── key: (6)
 │    │    └── fd: (6)-->(7)
 │    ├── inner-join
 │    │    ├── columns: uv.u:8(int!null) uv.v:9(int) uv.u:10(int!null) uv.v:11(int)
 │    │    ├── key: (8,10)
 │    │    ├── fd: (8)-->(9), (10)-->(11)
 │    │    ├── scan uv
 │    │    │    ├── columns: uv.u:8(int!null) uv.v:9(int)
 │    │    │    ├── key: (8)
 │    │    │    └── fd: (8)-->(9)
 │    │    ├── scan uv
 │    │    │    ├── columns: uv.u:10(int!null) uv.v:11(int)
 │    │    │    ├── key: (10)
 │    │    │    └── fd: (10)-->(11)
 │    │    └── true [type=bool]
 │    └── filters [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: (/NULL - ]), fd=(1)==(10), (10)==(1)]
 │         └── uv.u = a.k [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: (/NULL - ])]
 └── true [type=bool]

# --------------------------------------------------
# TryDecorrelateGroupBy
# --------------------------------------------------
opt
SELECT *
FROM a
WHERE EXISTS
(
    SELECT * FROM xy INNER JOIN (SELECT count(*) AS cnt, sum(v) FROM uv WHERE i=5 GROUP BY v) ON x=cnt
)
----
semi-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 ├── select
 │    ├── columns: x:6(int!null) y:7(int) v:9(int) cnt:10(int!null) sum:11(decimal)
 │    ├── outer: (2)
 │    ├── key: (6,9)
 │    ├── fd: (6)-->(7), (6,9)-->(7,10,11), (6)==(10), (10)==(6)
 │    ├── group-by
 │    │    ├── columns: x:6(int!null) y:7(int) v:9(int) cnt:10(int) sum:11(decimal)
 │    │    ├── grouping columns: x:6(int!null) v:9(int)
 │    │    ├── outer: (2)
 │    │    ├── key: (6,9)
 │    │    ├── fd: (6)-->(7), (6,9)-->(7,10,11)
 │    │    ├── inner-join
 │    │    │    ├── columns: x:6(int!null) y:7(int) v:9(int)
 │    │    │    ├── outer: (2)
 │    │    │    ├── fd: (6)-->(7)
 │    │    │    ├── scan xy
 │    │    │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    │    │    ├── key: (6)
 │    │    │    │    └── fd: (6)-->(7)
 │    │    │    ├── scan uv
 │    │    │    │    └── columns: v:9(int)
 │    │    │    └── filters [type=bool, outer=(2), constraints=(/2: [/5 - /5]; tight), fd=()-->(2)]
 │    │    │         └── a.i = 5 [type=bool, outer=(2), constraints=(/2: [/5 - /5]; tight)]
 │    │    └── aggregations [outer=(7,9)]
 │    │         ├── count-rows [type=int]
 │    │         ├── sum [type=decimal, outer=(9)]
 │    │         │    └── variable: uv.v [type=int, outer=(9)]
 │    │         └── any-not-null [type=int, outer=(7)]
 │    │              └── variable: xy.y [type=int, outer=(7)]
 │    └── filters [type=bool, outer=(6,10), constraints=(/6: (/NULL - ]; /10: (/NULL - ]), fd=(6)==(10), (10)==(6)]
 │         └── xy.x = cnt [type=bool, outer=(6,10), constraints=(/6: (/NULL - ]; /10: (/NULL - ])]
 └── true [type=bool]

# Indirectly decorrelate GROUP BY after decorrelating scalar GROUP BY.
opt
SELECT *
FROM xy, uv
WHERE x=v AND u=(SELECT max(i) FROM a WHERE k=x)
----
project
 ├── columns: x:1(int) y:2(int) u:3(int!null) v:4(int)
 ├── key: (3)
 ├── fd: (1)-->(2), (3)-->(1,2,4), (1)==(4), (4)==(1)
 └── select
      ├── columns: x:1(int) y:2(int) u:3(int!null) v:4(int) max:10(int!null)
      ├── key: (3)
      ├── fd: (1)-->(2), (3)-->(1,2,4), (1)==(4), (4)==(1), (3)==(10), (10)==(3)
      ├── group-by
      │    ├── columns: x:1(int) y:2(int) u:3(int!null) v:4(int) max:10(int)
      │    ├── grouping columns: u:3(int!null)
      │    ├── key: (3)
      │    ├── fd: (1)-->(2), (3)-->(1,2,4,10), (1)==(4), (4)==(1)
      │    ├── inner-join
      │    │    ├── columns: x:1(int!null) y:2(int) u:3(int!null) v:4(int!null) k:5(int!null) i:6(int!null)
      │    │    ├── key: (3)
      │    │    ├── fd: (1)-->(2), (3)-->(4), (5)-->(6), (1)==(4,5), (4)==(1,5), (5)==(1,4)
      │    │    ├── inner-join
      │    │    │    ├── columns: u:3(int!null) v:4(int) k:5(int!null) i:6(int!null)
      │    │    │    ├── key: (3,5)
      │    │    │    ├── fd: (3)-->(4), (5)-->(6)
      │    │    │    ├── scan uv
      │    │    │    │    ├── columns: u:3(int!null) v:4(int)
      │    │    │    │    ├── key: (3)
      │    │    │    │    └── fd: (3)-->(4)
      │    │    │    ├── select
      │    │    │    │    ├── columns: k:5(int!null) i:6(int!null)
      │    │    │    │    ├── key: (5)
      │    │    │    │    ├── fd: (5)-->(6)
      │    │    │    │    ├── scan a
      │    │    │    │    │    ├── columns: k:5(int!null) i:6(int)
      │    │    │    │    │    ├── key: (5)
      │    │    │    │    │    └── fd: (5)-->(6)
      │    │    │    │    └── filters [type=bool, outer=(6), constraints=(/6: (/NULL - ]; tight)]
      │    │    │    │         └── a.i IS NOT NULL [type=bool, outer=(6), constraints=(/6: (/NULL - ]; tight)]
      │    │    │    └── true [type=bool]
      │    │    ├── scan xy
      │    │    │    ├── columns: x:1(int!null) y:2(int)
      │    │    │    ├── key: (1)
      │    │    │    └── fd: (1)-->(2)
      │    │    └── filters [type=bool, outer=(1,4,5), constraints=(/1: (/NULL - ]; /4: (/NULL - ]; /5: (/NULL - ]), fd=(1)==(4,5), (4)==(1,5), (5)==(1,4)]
      │    │         ├── xy.x = uv.v [type=bool, outer=(1,4), constraints=(/1: (/NULL - ]; /4: (/NULL - ])]
      │    │         └── a.k = xy.x [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      │    └── aggregations [outer=(1,2,4,6)]
      │         ├── max [type=int, outer=(6)]
      │         │    └── variable: a.i [type=int, outer=(6)]
      │         ├── any-not-null [type=int, outer=(4)]
      │         │    └── variable: uv.v [type=int, outer=(4)]
      │         ├── any-not-null [type=int, outer=(2)]
      │         │    └── variable: xy.y [type=int, outer=(2)]
      │         └── any-not-null [type=int, outer=(1)]
      │              └── variable: xy.x [type=int, outer=(1)]
      └── filters [type=bool, outer=(3,10), constraints=(/3: (/NULL - ]; /10: (/NULL - ]), fd=(3)==(10), (10)==(3)]
           └── uv.u = max [type=bool, outer=(3,10), constraints=(/3: (/NULL - ]; /10: (/NULL - ])]

# Indirectly decorrelate GROUP BY after decorrelating scalar GROUP BY. Use
# IS DISTINCT FROM to retain left join.
opt
SELECT *
FROM xy, uv
WHERE x=v AND (SELECT max(i) FROM a WHERE k=x) IS DISTINCT FROM u
----
project
 ├── columns: x:1(int!null) y:2(int) u:3(int!null) v:4(int)
 ├── key: (1,3)
 ├── fd: (1)-->(2), (1,3)-->(2,4), (1)==(4), (4)==(1)
 └── select
      ├── columns: x:1(int!null) y:2(int) u:3(int!null) v:4(int) max:10(int)
      ├── key: (1,3)
      ├── fd: (1)-->(2), (1,3)-->(2,4,10), (1)==(4), (4)==(1)
      ├── group-by
      │    ├── columns: x:1(int!null) y:2(int) u:3(int!null) v:4(int) max:10(int)
      │    ├── grouping columns: x:1(int!null) u:3(int!null)
      │    ├── key: (1,3)
      │    ├── fd: (1)-->(2), (1,3)-->(2,4,10), (1)==(4), (4)==(1)
      │    ├── inner-join-apply
      │    │    ├── columns: x:1(int!null) y:2(int) u:3(int!null) v:4(int) k:5(int) i:6(int)
      │    │    ├── key: (1,3,5)
      │    │    ├── fd: (1)-->(2), (1,3)-->(4), (1,5)-->(6), (1)==(4), (4)==(1)
      │    │    ├── scan xy
      │    │    │    ├── columns: x:1(int!null) y:2(int)
      │    │    │    ├── key: (1)
      │    │    │    └── fd: (1)-->(2)
      │    │    ├── left-join
      │    │    │    ├── columns: u:3(int!null) v:4(int) k:5(int) i:6(int)
      │    │    │    ├── outer: (1)
      │    │    │    ├── key: (3,5)
      │    │    │    ├── fd: (3)-->(4), (5)-->(6)
      │    │    │    ├── scan uv
      │    │    │    │    ├── columns: u:3(int!null) v:4(int)
      │    │    │    │    ├── key: (3)
      │    │    │    │    └── fd: (3)-->(4)
      │    │    │    ├── scan a
      │    │    │    │    ├── columns: k:5(int!null) i:6(int)
      │    │    │    │    ├── key: (5)
      │    │    │    │    └── fd: (5)-->(6)
      │    │    │    └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ]), fd=(1)==(5), (5)==(1)]
      │    │    │         └── a.k = xy.x [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      │    │    └── filters [type=bool, outer=(1,4), constraints=(/1: (/NULL - ]; /4: (/NULL - ]), fd=(1)==(4), (4)==(1)]
      │    │         └── xy.x = uv.v [type=bool, outer=(1,4), constraints=(/1: (/NULL - ]; /4: (/NULL - ])]
      │    └── aggregations [outer=(2,4,6)]
      │         ├── max [type=int, outer=(6)]
      │         │    └── variable: a.i [type=int, outer=(6)]
      │         ├── any-not-null [type=int, outer=(4)]
      │         │    └── variable: uv.v [type=int, outer=(4)]
      │         └── any-not-null [type=int, outer=(2)]
      │              └── variable: xy.y [type=int, outer=(2)]
      └── filters [type=bool, outer=(3,10)]
           └── uv.u IS DISTINCT FROM max [type=bool, outer=(3,10)]

# Synthesize key when one is not present.
opt
SELECT *
FROM
(
    SELECT y, 'foo' AS cst FROM xy
)
WHERE 'bar'=(SELECT max(s) FROM (SELECT * FROM a LIMIT 1) WHERE k=y GROUP BY i)
----
project
 ├── columns: y:2(int) cst:3(string!null)
 ├── fd: ()-->(2,3)
 ├── select
 │    ├── columns: y:2(int) max:9(string!null) rownum:10(int!null)
 │    ├── key: (10)
 │    ├── fd: ()-->(2,9)
 │    ├── group-by
 │    │    ├── columns: y:2(int) max:9(string) rownum:10(int!null)
 │    │    ├── grouping columns: rownum:10(int!null)
 │    │    ├── key: (10)
 │    │    ├── fd: ()-->(2), (10)-->(2,9)
 │    │    ├── inner-join
 │    │    │    ├── columns: y:2(int!null) k:4(int!null) s:7(string) rownum:10(int!null)
 │    │    │    ├── key: (10)
 │    │    │    ├── fd: ()-->(2,4,7), (2)==(4), (4)==(2)
 │    │    │    ├── row-number
 │    │    │    │    ├── columns: y:2(int) rownum:10(int!null)
 │    │    │    │    ├── key: (10)
 │    │    │    │    ├── fd: (10)-->(2)
 │    │    │    │    └── scan xy
 │    │    │    │         └── columns: y:2(int)
 │    │    │    ├── scan a
 │    │    │    │    ├── columns: k:4(int!null) s:7(string)
 │    │    │    │    ├── limit: 1
 │    │    │    │    ├── key: ()
 │    │    │    │    └── fd: ()-->(4,7)
 │    │    │    └── filters [type=bool, outer=(2,4), constraints=(/2: (/NULL - ]; /4: (/NULL - ]), fd=(2)==(4), (4)==(2)]
 │    │    │         └── a.k = xy.y [type=bool, outer=(2,4), constraints=(/2: (/NULL - ]; /4: (/NULL - ])]
 │    │    └── aggregations [outer=(2,7)]
 │    │         ├── max [type=string, outer=(7)]
 │    │         │    └── variable: a.s [type=string, outer=(7)]
 │    │         └── any-not-null [type=int, outer=(2)]
 │    │              └── variable: xy.y [type=int, outer=(2)]
 │    └── filters [type=bool, outer=(9), constraints=(/9: [/'bar' - /'bar']; tight), fd=()-->(9)]
 │         └── max = 'bar' [type=bool, outer=(9), constraints=(/9: [/'bar' - /'bar']; tight)]
 └── projections [outer=(2)]
      └── const: 'foo' [type=string]

# --------------------------------------------------
# TryDecorrelateScalarGroupBy
# --------------------------------------------------
opt
SELECT *
FROM a
WHERE EXISTS
(
    SELECT * FROM xy INNER JOIN (SELECT sum(v), count(*) AS cnt FROM uv WHERE i=5) ON x=cnt
)
----
semi-join-apply
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 ├── select
 │    ├── columns: x:6(int!null) y:7(int) sum:10(decimal) cnt:11(int!null)
 │    ├── outer: (2)
 │    ├── key: (6)
 │    ├── fd: (6)-->(7,10), (6)==(11), (11)==(6)
 │    ├── group-by
 │    │    ├── columns: x:6(int!null) y:7(int) sum:10(decimal) cnt:11(int)
 │    │    ├── grouping columns: x:6(int!null)
 │    │    ├── outer: (2)
 │    │    ├── key: (6)
 │    │    ├── fd: (6)-->(7,10,11)
 │    │    ├── left-join
 │    │    │    ├── columns: x:6(int!null) y:7(int) v:9(int) notnull:12(bool)
 │    │    │    ├── outer: (2)
 │    │    │    ├── fd: (6)-->(7), ()~~>(12)
 │    │    │    ├── scan xy
 │    │    │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    │    │    ├── key: (6)
 │    │    │    │    └── fd: (6)-->(7)
 │    │    │    ├── project
 │    │    │    │    ├── columns: notnull:12(bool!null) v:9(int)
 │    │    │    │    ├── fd: ()-->(12)
 │    │    │    │    ├── scan uv
 │    │    │    │    │    └── columns: v:9(int)
 │    │    │    │    └── projections [outer=(9)]
 │    │    │    │         └── true [type=bool]
 │    │    │    └── filters [type=bool, outer=(2), constraints=(/2: [/5 - /5]; tight), fd=()-->(2)]
 │    │    │         └── a.i = 5 [type=bool, outer=(2), constraints=(/2: [/5 - /5]; tight)]
 │    │    └── aggregations [outer=(7,9,12)]
 │    │         ├── sum [type=decimal, outer=(9)]
 │    │         │    └── variable: uv.v [type=int, outer=(9)]
 │    │         ├── count [type=int, outer=(12)]
 │    │         │    └── variable: notnull [type=bool, outer=(12)]
 │    │         └── any-not-null [type=int, outer=(7)]
 │    │              └── variable: xy.y [type=int, outer=(7)]
 │    └── filters [type=bool, outer=(6,11), constraints=(/6: (/NULL - ]; /11: (/NULL - ]), fd=(6)==(11), (11)==(6)]
 │         └── xy.x = cnt [type=bool, outer=(6,11), constraints=(/6: (/NULL - ]; /11: (/NULL - ])]
 └── true [type=bool]

# Synthesize key when one is not present.
opt
SELECT * FROM (SELECT i, 'foo' AS cst FROM a) WHERE 5=(SELECT max(y) FROM xy WHERE x=i)
----
project
 ├── columns: i:2(int) cst:6(string!null)
 ├── fd: ()-->(6)
 ├── select
 │    ├── columns: i:2(int) max:9(int!null) rownum:10(int!null)
 │    ├── key: (10)
 │    ├── fd: ()-->(9), (10)-->(2)
 │    ├── group-by
 │    │    ├── columns: i:2(int) max:9(int) rownum:10(int!null)
 │    │    ├── grouping columns: rownum:10(int!null)
 │    │    ├── key: (10)
 │    │    ├── fd: (10)-->(2,9)
 │    │    ├── inner-join
 │    │    │    ├── columns: i:2(int!null) x:7(int!null) y:8(int!null) rownum:10(int!null)
 │    │    │    ├── key: (10)
 │    │    │    ├── fd: (10)-->(2), (7)-->(8), (2)==(7), (7)==(2)
 │    │    │    ├── row-number
 │    │    │    │    ├── columns: i:2(int) rownum:10(int!null)
 │    │    │    │    ├── key: (10)
 │    │    │    │    ├── fd: (10)-->(2)
 │    │    │    │    └── scan a
 │    │    │    │         └── columns: i:2(int)
 │    │    │    ├── select
 │    │    │    │    ├── columns: x:7(int!null) y:8(int!null)
 │    │    │    │    ├── key: (7)
 │    │    │    │    ├── fd: (7)-->(8)
 │    │    │    │    ├── scan xy
 │    │    │    │    │    ├── columns: x:7(int!null) y:8(int)
 │    │    │    │    │    ├── key: (7)
 │    │    │    │    │    └── fd: (7)-->(8)
 │    │    │    │    └── filters [type=bool, outer=(8), constraints=(/8: (/NULL - ]; tight)]
 │    │    │    │         └── xy.y IS NOT NULL [type=bool, outer=(8), constraints=(/8: (/NULL - ]; tight)]
 │    │    │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
 │    │    │         └── xy.x = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
 │    │    └── aggregations [outer=(2,8)]
 │    │         ├── max [type=int, outer=(8)]
 │    │         │    └── variable: xy.y [type=int, outer=(8)]
 │    │         └── any-not-null [type=int, outer=(2)]
 │    │              └── variable: a.i [type=int, outer=(2)]
 │    └── filters [type=bool, outer=(9), constraints=(/9: [/5 - /5]; tight), fd=()-->(9)]
 │         └── max = 5 [type=bool, outer=(9), constraints=(/9: [/5 - /5]; tight)]
 └── projections [outer=(2)]
      └── const: 'foo' [type=string]

# Nest scalar decorrelation within scalar decorrelation, using IS NULL to force
# use of left joins.
opt
SELECT *
FROM a
WHERE
(
    SELECT max(y)
    FROM xy
    WHERE
    (
        SELECT max(v) FROM uv WHERE u=k
    ) IS NULL
) IS NULL
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 └── select
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) max:11(int)
      ├── key: (1)
      ├── fd: ()-->(11), (1)-->(2-5)
      ├── group-by
      │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) max:11(int)
      │    ├── grouping columns: k:1(int!null)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-5,11)
      │    ├── left-join-apply
      │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int) y:7(int) max:10(int)
      │    │    ├── key: (1,6)
      │    │    ├── fd: (1)-->(2-5), (1,6)-->(7,10)
      │    │    ├── scan a
      │    │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
      │    │    │    ├── key: (1)
      │    │    │    └── fd: (1)-->(2-5)
      │    │    ├── select
      │    │    │    ├── columns: x:6(int!null) y:7(int) max:10(int)
      │    │    │    ├── outer: (1)
      │    │    │    ├── key: (6)
      │    │    │    ├── fd: ()-->(10), (6)-->(7)
      │    │    │    ├── group-by
      │    │    │    │    ├── columns: x:6(int!null) y:7(int) max:10(int)
      │    │    │    │    ├── grouping columns: x:6(int!null)
      │    │    │    │    ├── outer: (1)
      │    │    │    │    ├── key: (6)
      │    │    │    │    ├── fd: (6)-->(7,10)
      │    │    │    │    ├── left-join
      │    │    │    │    │    ├── columns: x:6(int!null) y:7(int) u:8(int) v:9(int)
      │    │    │    │    │    ├── outer: (1)
      │    │    │    │    │    ├── key: (6,8)
      │    │    │    │    │    ├── fd: (6)-->(7), (8)-->(9)
      │    │    │    │    │    ├── scan xy
      │    │    │    │    │    │    ├── columns: x:6(int!null) y:7(int)
      │    │    │    │    │    │    ├── key: (6)
      │    │    │    │    │    │    └── fd: (6)-->(7)
      │    │    │    │    │    ├── scan uv
      │    │    │    │    │    │    ├── columns: u:8(int!null) v:9(int)
      │    │    │    │    │    │    ├── key: (8)
      │    │    │    │    │    │    └── fd: (8)-->(9)
      │    │    │    │    │    └── filters [type=bool, outer=(1,8), constraints=(/1: (/NULL - ]; /8: (/NULL - ]), fd=(1)==(8), (8)==(1)]
      │    │    │    │    │         └── uv.u = a.k [type=bool, outer=(1,8), constraints=(/1: (/NULL - ]; /8: (/NULL - ])]
      │    │    │    │    └── aggregations [outer=(7,9)]
      │    │    │    │         ├── max [type=int, outer=(9)]
      │    │    │    │         │    └── variable: uv.v [type=int, outer=(9)]
      │    │    │    │         └── any-not-null [type=int, outer=(7)]
      │    │    │    │              └── variable: xy.y [type=int, outer=(7)]
      │    │    │    └── filters [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight), fd=()-->(10)]
      │    │    │         └── max IS NULL [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]
      │    │    └── true [type=bool]
      │    └── aggregations [outer=(2-5,7)]
      │         ├── max [type=int, outer=(7)]
      │         │    └── variable: xy.y [type=int, outer=(7)]
      │         ├── any-not-null [type=int, outer=(2)]
      │         │    └── variable: a.i [type=int, outer=(2)]
      │         ├── any-not-null [type=float, outer=(3)]
      │         │    └── variable: a.f [type=float, outer=(3)]
      │         ├── any-not-null [type=string, outer=(4)]
      │         │    └── variable: a.s [type=string, outer=(4)]
      │         └── any-not-null [type=jsonb, outer=(5)]
      │              └── variable: a.j [type=jsonb, outer=(5)]
      └── filters [type=bool, outer=(11), constraints=(/11: [/NULL - /NULL]; tight), fd=()-->(11)]
           └── max IS NULL [type=bool, outer=(11), constraints=(/11: [/NULL - /NULL]; tight)]

# Don't decorrelate when agg function that doesn't ignore nulls is used.
opt
SELECT * FROM a WHERE 'foo'=(SELECT concat_agg(y::string) FROM xy WHERE x=k)
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 └── inner-join-apply
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) concat_agg:9(string!null)
      ├── key: (1)
      ├── fd: (1)-->(2-5,9)
      ├── scan a
      │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
      │    ├── key: (1)
      │    └── fd: (1)-->(2-5)
      ├── select
      │    ├── columns: concat_agg:9(string!null)
      │    ├── outer: (1)
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    ├── fd: ()-->(9)
      │    ├── scalar-group-by
      │    │    ├── columns: concat_agg:9(string)
      │    │    ├── outer: (1)
      │    │    ├── cardinality: [1 - 1]
      │    │    ├── key: ()
      │    │    ├── fd: ()-->(9)
      │    │    ├── project
      │    │    │    ├── columns: column8:8(string)
      │    │    │    ├── outer: (1)
      │    │    │    ├── cardinality: [0 - 1]
      │    │    │    ├── key: ()
      │    │    │    ├── fd: ()-->(8)
      │    │    │    ├── select
      │    │    │    │    ├── columns: x:6(int!null) y:7(int)
      │    │    │    │    ├── outer: (1)
      │    │    │    │    ├── cardinality: [0 - 1]
      │    │    │    │    ├── key: ()
      │    │    │    │    ├── fd: ()-->(6,7)
      │    │    │    │    ├── scan xy
      │    │    │    │    │    ├── columns: x:6(int!null) y:7(int)
      │    │    │    │    │    ├── key: (6)
      │    │    │    │    │    └── fd: (6)-->(7)
      │    │    │    │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
      │    │    │    │         └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      │    │    │    └── projections [outer=(7)]
      │    │    │         └── xy.y::STRING [type=string, outer=(7)]
      │    │    └── aggregations [outer=(8)]
      │    │         └── concat-agg [type=string, outer=(8)]
      │    │              └── variable: column8 [type=string, outer=(8)]
      │    └── filters [type=bool, outer=(9), constraints=(/9: [/'foo' - /'foo']; tight), fd=()-->(9)]
      │         └── concat_agg = 'foo' [type=bool, outer=(9), constraints=(/9: [/'foo' - /'foo']; tight)]
      └── true [type=bool]

# Don't decorrelate when the group by input is ordered.
opt
SELECT * FROM a WHERE 'foo'=(SELECT max(y::string) FROM (SELECT * FROM xy ORDER BY x+y) WHERE y=k)
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 └── inner-join-apply
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) max:10(string!null)
      ├── key: (1)
      ├── fd: (1)-->(2-5,10)
      ├── scan a
      │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
      │    ├── key: (1)
      │    └── fd: (1)-->(2-5)
      ├── select
      │    ├── columns: max:10(string!null)
      │    ├── outer: (1)
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    ├── fd: ()-->(10)
      │    ├── scalar-group-by
      │    │    ├── columns: max:10(string)
      │    │    ├── ordering: +8 opt(9)
      │    │    ├── outer: (1)
      │    │    ├── cardinality: [1 - 1]
      │    │    ├── key: ()
      │    │    ├── fd: ()-->(10)
      │    │    ├── sort
      │    │    │    ├── columns: column8:8(int) column9:9(string!null)
      │    │    │    ├── outer: (1)
      │    │    │    ├── cardinality: [0 - 1]
      │    │    │    ├── key: ()
      │    │    │    ├── fd: ()-->(8,9)
      │    │    │    ├── ordering: +8 opt(9)
      │    │    │    └── limit
      │    │    │         ├── columns: column8:8(int) column9:9(string!null)
      │    │    │         ├── outer: (1)
      │    │    │         ├── cardinality: [0 - 1]
      │    │    │         ├── key: ()
      │    │    │         ├── fd: ()-->(8,9)
      │    │    │         ├── select
      │    │    │         │    ├── columns: column8:8(int) column9:9(string!null)
      │    │    │         │    ├── outer: (1)
      │    │    │         │    ├── fd: ()-->(9)
      │    │    │         │    ├── project
      │    │    │         │    │    ├── columns: column9:9(string) column8:8(int)
      │    │    │         │    │    ├── outer: (1)
      │    │    │         │    │    ├── fd: ()-->(9)
      │    │    │         │    │    ├── select
      │    │    │         │    │    │    ├── columns: x:6(int!null) y:7(int!null)
      │    │    │         │    │    │    ├── outer: (1)
      │    │    │         │    │    │    ├── key: (6)
      │    │    │         │    │    │    ├── fd: ()-->(7)
      │    │    │         │    │    │    ├── scan xy
      │    │    │         │    │    │    │    ├── columns: x:6(int!null) y:7(int)
      │    │    │         │    │    │    │    ├── key: (6)
      │    │    │         │    │    │    │    └── fd: (6)-->(7)
      │    │    │         │    │    │    └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
      │    │    │         │    │    │         └── xy.y = a.k [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
      │    │    │         │    │    └── projections [outer=(6,7)]
      │    │    │         │    │         ├── xy.y::STRING [type=string, outer=(7)]
      │    │    │         │    │         └── xy.x + xy.y [type=int, outer=(6,7)]
      │    │    │         │    └── filters [type=bool, outer=(9), constraints=(/9: (/NULL - ]; tight)]
      │    │    │         │         └── column9 IS NOT NULL [type=bool, outer=(9), constraints=(/9: (/NULL - ]; tight)]
      │    │    │         └── const: 1 [type=int]
      │    │    └── aggregations [outer=(9)]
      │    │         └── any-not-null [type=string, outer=(9)]
      │    │              └── variable: column9 [type=string, outer=(9)]
      │    └── filters [type=bool, outer=(10), constraints=(/10: [/'foo' - /'foo']; tight), fd=()-->(10)]
      │         └── max = 'foo' [type=bool, outer=(10), constraints=(/10: [/'foo' - /'foo']; tight)]
      └── true [type=bool]


# --------------------------------------------------
# HoistSelectExists
# --------------------------------------------------
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM xy WHERE x=k)
----
semi-join (merge)
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    └── ordering: +1
 ├── scan xy
 │    ├── columns: x:6(int!null) y:7(int)
 │    ├── key: (6)
 │    ├── fd: (6)-->(7)
 │    └── ordering: +6
 └── merge-on
      ├── left ordering: +1
      ├── right ordering: +6
      └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
           └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# Ensure that EXISTS is hoisted even when it is one of several conjuncts.
opt
SELECT * FROM a WHERE s='foo' AND EXISTS(SELECT * FROM xy WHERE x=k) AND i>1
----
semi-join (merge)
 ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string!null) j:5(jsonb)
 ├── key: (1)
 ├── fd: ()-->(4), (1)-->(2,3,5)
 ├── select
 │    ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string!null) j:5(jsonb)
 │    ├── key: (1)
 │    ├── fd: ()-->(4), (1)-->(2,3,5)
 │    ├── ordering: +1 opt(4)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2-5)
 │    │    └── ordering: +1 opt(4)
 │    └── filters [type=bool, outer=(2,4), constraints=(/2: [/2 - ]; /4: [/'foo' - /'foo']; tight), fd=()-->(4)]
 │         ├── a.s = 'foo' [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │         └── a.i > 1 [type=bool, outer=(2), constraints=(/2: [/2 - ]; tight)]
 ├── scan xy
 │    ├── columns: x:6(int!null) y:7(int)
 │    ├── key: (6)
 │    ├── fd: (6)-->(7)
 │    └── ordering: +6
 └── merge-on
      ├── left ordering: +1
      ├── right ordering: +6
      └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
           └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# Multiple Exists operators in same Select list.
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM xy WHERE x=k) AND EXISTS(SELECT * FROM xy WHERE x=i)
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── semi-join
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2-5)
 │    ├── scan xy
 │    │    ├── columns: xy.x:8(int!null) xy.y:9(int)
 │    │    ├── key: (8)
 │    │    └── fd: (8)-->(9)
 │    └── filters [type=bool, outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ]), fd=(2)==(8), (8)==(2)]
 │         └── xy.x = a.i [type=bool, outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ])]
 ├── scan xy
 │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    ├── key: (6)
 │    └── fd: (6)-->(7)
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
      └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# Don't hoist uncorrelated subqueries.
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM xy)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 └── filters [type=bool]
      └── exists [type=bool]
           └── scan xy
                ├── columns: x:6(int!null) y:7(int)
                ├── key: (6)
                └── fd: (6)-->(7)

# Hoist nested EXISTS.
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM xy WHERE EXISTS (SELECT * FROM uv WHERE x=u) AND x=k)
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 ├── semi-join (merge)
 │    ├── columns: x:6(int!null) y:7(int)
 │    ├── key: (6)
 │    ├── fd: (6)-->(7)
 │    ├── scan xy
 │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    ├── key: (6)
 │    │    ├── fd: (6)-->(7)
 │    │    └── ordering: +6
 │    ├── scan uv
 │    │    ├── columns: u:8(int!null) v:9(int)
 │    │    ├── key: (8)
 │    │    ├── fd: (8)-->(9)
 │    │    └── ordering: +8
 │    └── merge-on
 │         ├── left ordering: +6
 │         ├── right ordering: +8
 │         └── filters [type=bool, outer=(6,8), constraints=(/6: (/NULL - ]; /8: (/NULL - ]), fd=(6)==(8), (8)==(6)]
 │              └── xy.x = uv.u [type=bool, outer=(6,8), constraints=(/6: (/NULL - ]; /8: (/NULL - ])]
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
      └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# --------------------------------------------------
# HoistSelectNotExists
# --------------------------------------------------
opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM xy WHERE x=k)
----
anti-join (merge)
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    └── ordering: +1
 ├── scan xy
 │    ├── columns: x:6(int!null) y:7(int)
 │    ├── key: (6)
 │    ├── fd: (6)-->(7)
 │    └── ordering: +6
 └── merge-on
      ├── left ordering: +1
      ├── right ordering: +6
      └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
           └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# Ensure that NOT EXISTS is hoisted even when one of several conjuncts.
opt
SELECT * FROM a WHERE s='foo' AND NOT EXISTS(SELECT * FROM xy WHERE x=k) AND i>1
----
anti-join (merge)
 ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string!null) j:5(jsonb)
 ├── key: (1)
 ├── fd: ()-->(4), (1)-->(2,3,5)
 ├── select
 │    ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string!null) j:5(jsonb)
 │    ├── key: (1)
 │    ├── fd: ()-->(4), (1)-->(2,3,5)
 │    ├── ordering: +1 opt(4)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2-5)
 │    │    └── ordering: +1 opt(4)
 │    └── filters [type=bool, outer=(2,4), constraints=(/2: [/2 - ]; /4: [/'foo' - /'foo']; tight), fd=()-->(4)]
 │         ├── a.s = 'foo' [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │         └── a.i > 1 [type=bool, outer=(2), constraints=(/2: [/2 - ]; tight)]
 ├── scan xy
 │    ├── columns: x:6(int!null) y:7(int)
 │    ├── key: (6)
 │    ├── fd: (6)-->(7)
 │    └── ordering: +6
 └── merge-on
      ├── left ordering: +1
      ├── right ordering: +6
      └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
           └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# Multiple Not Exists operators in same Select list.
opt
SELECT *
FROM a
WHERE NOT EXISTS(SELECT * FROM xy WHERE x=k) AND NOT EXISTS(SELECT * FROM xy WHERE x=i)
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── anti-join
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2-5)
 │    ├── scan xy
 │    │    ├── columns: xy.x:8(int!null) xy.y:9(int)
 │    │    ├── key: (8)
 │    │    └── fd: (8)-->(9)
 │    └── filters [type=bool, outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ]), fd=(2)==(8), (8)==(2)]
 │         └── xy.x = a.i [type=bool, outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ])]
 ├── scan xy
 │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    ├── key: (6)
 │    └── fd: (6)-->(7)
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
      └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# Don't hoist uncorrelated subqueries.
opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM xy)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 └── filters [type=bool]
      └── not [type=bool]
           └── exists [type=bool]
                └── scan xy
                     ├── columns: x:6(int!null) y:7(int)
                     ├── key: (6)
                     └── fd: (6)-->(7)

# --------------------------------------------------
# HoistSelectExists + HoistSelectNotExists
# --------------------------------------------------
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM xy WHERE x=k) AND NOT EXISTS(SELECT * FROM xy WHERE x=i)
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── anti-join
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2-5)
 │    ├── scan xy
 │    │    ├── columns: xy.x:8(int!null) xy.y:9(int)
 │    │    ├── key: (8)
 │    │    └── fd: (8)-->(9)
 │    └── filters [type=bool, outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ]), fd=(2)==(8), (8)==(2)]
 │         └── xy.x = a.i [type=bool, outer=(2,8), constraints=(/2: (/NULL - ]; /8: (/NULL - ])]
 ├── scan xy
 │    ├── columns: xy.x:6(int!null) xy.y:7(int)
 │    ├── key: (6)
 │    └── fd: (6)-->(7)
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
      └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# --------------------------------------------------
# HoistSelectSubquery
# --------------------------------------------------
opt
SELECT * FROM a WHERE (SELECT y FROM xy WHERE y=k LIMIT 1) = i
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 └── inner-join-apply
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) y:7(int!null)
      ├── key: (1)
      ├── fd: (1)-->(2-5,7), (2)==(7), (7)==(2)
      ├── scan a
      │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
      │    ├── key: (1)
      │    └── fd: (1)-->(2-5)
      ├── limit
      │    ├── columns: y:7(int!null)
      │    ├── outer: (1)
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    ├── fd: ()-->(7)
      │    ├── select
      │    │    ├── columns: y:7(int!null)
      │    │    ├── outer: (1)
      │    │    ├── fd: ()-->(7)
      │    │    ├── scan xy
      │    │    │    └── columns: y:7(int)
      │    │    └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
      │    │         └── xy.y = a.k [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
      │    └── const: 1 [type=int]
      └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
           └── a.i = xy.y [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]

# Multiple other conjuncts, including uncorrelated subquery (don't hoist).
opt
SELECT *
FROM a
WHERE k=10 AND (SELECT y FROM xy WHERE y=k LIMIT 1) = i AND (SELECT x FROM xy LIMIT 1) = 100
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-5)
 └── inner-join-apply
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) xy.y:7(int!null)
      ├── cardinality: [0 - 1]
      ├── key: ()
      ├── fd: ()-->(1-5,7)
      ├── select
      │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    ├── fd: ()-->(1-5)
      │    ├── scan a
      │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
      │    │    ├── constraint: /1: [/10 - /10]
      │    │    ├── cardinality: [0 - 1]
      │    │    ├── key: ()
      │    │    └── fd: ()-->(1-5)
      │    └── filters [type=bool]
      │         └── eq [type=bool]
      │              ├── subquery [type=int]
      │              │    └── scan xy
      │              │         ├── columns: xy.x:8(int!null)
      │              │         ├── limit: 1
      │              │         ├── key: ()
      │              │         └── fd: ()-->(8)
      │              └── const: 100 [type=int]
      ├── limit
      │    ├── columns: xy.y:7(int!null)
      │    ├── outer: (1)
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    ├── fd: ()-->(7)
      │    ├── select
      │    │    ├── columns: xy.y:7(int!null)
      │    │    ├── outer: (1)
      │    │    ├── fd: ()-->(7)
      │    │    ├── scan xy
      │    │    │    └── columns: xy.y:7(int)
      │    │    └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
      │    │         └── xy.y = a.k [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
      │    └── const: 1 [type=int]
      └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
           └── a.i = xy.y [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]

# Multiple correlated subqueries.
opt
SELECT * FROM a
WHERE (SELECT count(*) FROM xy WHERE y=k) > 0 AND (SELECT y FROM xy WHERE y=k LIMIT 1) = i
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 └── inner-join-apply
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) count:8(int!null) xy.y:10(int!null)
      ├── key: (1)
      ├── fd: (1)-->(2-5,8,10), (2)==(10), (10)==(2)
      ├── select
      │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) count:8(int!null)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-5,8)
      │    ├── group-by
      │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) count:8(int)
      │    │    ├── grouping columns: k:1(int!null)
      │    │    ├── key: (1)
      │    │    ├── fd: (1)-->(2-5,8)
      │    │    ├── left-join
      │    │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) xy.y:7(int)
      │    │    │    ├── fd: (1)-->(2-5)
      │    │    │    ├── scan a
      │    │    │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
      │    │    │    │    ├── key: (1)
      │    │    │    │    └── fd: (1)-->(2-5)
      │    │    │    ├── scan xy
      │    │    │    │    └── columns: xy.y:7(int)
      │    │    │    └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
      │    │    │         └── xy.y = a.k [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
      │    │    └── aggregations [outer=(2-5,7)]
      │    │         ├── count [type=int, outer=(7)]
      │    │         │    └── variable: xy.y [type=int, outer=(7)]
      │    │         ├── any-not-null [type=int, outer=(2)]
      │    │         │    └── variable: a.i [type=int, outer=(2)]
      │    │         ├── any-not-null [type=float, outer=(3)]
      │    │         │    └── variable: a.f [type=float, outer=(3)]
      │    │         ├── any-not-null [type=string, outer=(4)]
      │    │         │    └── variable: a.s [type=string, outer=(4)]
      │    │         └── any-not-null [type=jsonb, outer=(5)]
      │    │              └── variable: a.j [type=jsonb, outer=(5)]
      │    └── filters [type=bool, outer=(8), constraints=(/8: [/1 - ]; tight)]
      │         └── count > 0 [type=bool, outer=(8), constraints=(/8: [/1 - ]; tight)]
      ├── limit
      │    ├── columns: xy.y:10(int!null)
      │    ├── outer: (1)
      │    ├── cardinality: [0 - 1]
      │    ├── key: ()
      │    ├── fd: ()-->(10)
      │    ├── select
      │    │    ├── columns: xy.y:10(int!null)
      │    │    ├── outer: (1)
      │    │    ├── fd: ()-->(10)
      │    │    ├── scan xy
      │    │    │    └── columns: xy.y:10(int)
      │    │    └── filters [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: (/NULL - ]), fd=(1)==(10), (10)==(1)]
      │    │         └── xy.y = a.k [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: (/NULL - ])]
      │    └── const: 1 [type=int]
      └── filters [type=bool, outer=(2,10), constraints=(/2: (/NULL - ]; /10: (/NULL - ]), fd=(2)==(10), (10)==(2)]
           └── a.i = xy.y [type=bool, outer=(2,10), constraints=(/2: (/NULL - ]; /10: (/NULL - ])]

# Subquery nested below interesting scalar operators like cast, function, tuple,
# or, etc).
opt
SELECT * FROM a WHERE (0, length((SELECT count(*) FROM uv WHERE k=u)::string)) > (0, 1) OR i=1
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 └── select
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) count:8(int)
      ├── key: (1)
      ├── fd: (1)-->(2-5,8)
      ├── group-by
      │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) count:8(int)
      │    ├── grouping columns: k:1(int!null)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-5,8)
      │    ├── left-join (merge)
      │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) u:6(int)
      │    │    ├── key: (1,6)
      │    │    ├── fd: (1)-->(2-5)
      │    │    ├── scan a
      │    │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
      │    │    │    ├── key: (1)
      │    │    │    ├── fd: (1)-->(2-5)
      │    │    │    └── ordering: +1
      │    │    ├── scan uv
      │    │    │    ├── columns: u:6(int!null)
      │    │    │    ├── key: (6)
      │    │    │    └── ordering: +6
      │    │    └── merge-on
      │    │         ├── left ordering: +1
      │    │         ├── right ordering: +6
      │    │         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
      │    │              └── a.k = uv.u [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      │    └── aggregations [outer=(2-6)]
      │         ├── count [type=int, outer=(6)]
      │         │    └── variable: uv.u [type=int, outer=(6)]
      │         ├── any-not-null [type=int, outer=(2)]
      │         │    └── variable: a.i [type=int, outer=(2)]
      │         ├── any-not-null [type=float, outer=(3)]
      │         │    └── variable: a.f [type=float, outer=(3)]
      │         ├── any-not-null [type=string, outer=(4)]
      │         │    └── variable: a.s [type=string, outer=(4)]
      │         └── any-not-null [type=jsonb, outer=(5)]
      │              └── variable: a.j [type=jsonb, outer=(5)]
      └── filters [type=bool, outer=(2,8)]
           └── ((0, length(count::STRING)) > (0, 1)) OR (a.i = 1) [type=bool, outer=(2,8)]

# Exists within a disjunction.
opt
SELECT * FROM a WHERE i=1 OR EXISTS(SELECT * FROM xy WHERE y=i)
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 └── select
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) any_not_null:9(bool)
      ├── key: (1)
      ├── fd: (1)-->(2-5,9)
      ├── group-by
      │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) any_not_null:9(bool)
      │    ├── grouping columns: k:1(int!null)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-5,9)
      │    ├── left-join
      │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) y:7(int) true:8(bool)
      │    │    ├── fd: (1)-->(2-5), ()~~>(8)
      │    │    ├── scan a
      │    │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
      │    │    │    ├── key: (1)
      │    │    │    └── fd: (1)-->(2-5)
      │    │    ├── project
      │    │    │    ├── columns: true:8(bool!null) y:7(int)
      │    │    │    ├── fd: ()-->(8)
      │    │    │    ├── scan xy
      │    │    │    │    └── columns: y:7(int)
      │    │    │    └── projections [outer=(7)]
      │    │    │         └── true [type=bool]
      │    │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
      │    │         └── xy.y = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
      │    └── aggregations [outer=(2-5,8)]
      │         ├── any-not-null [type=bool, outer=(8)]
      │         │    └── variable: true [type=bool, outer=(8)]
      │         ├── any-not-null [type=int, outer=(2)]
      │         │    └── variable: a.i [type=int, outer=(2)]
      │         ├── any-not-null [type=float, outer=(3)]
      │         │    └── variable: a.f [type=float, outer=(3)]
      │         ├── any-not-null [type=string, outer=(4)]
      │         │    └── variable: a.s [type=string, outer=(4)]
      │         └── any-not-null [type=jsonb, outer=(5)]
      │              └── variable: a.j [type=jsonb, outer=(5)]
      └── filters [type=bool, outer=(2,9)]
           └── (a.i = 1) OR (any_not_null IS NOT NULL) [type=bool, outer=(2,9)]

# Any with IS NULL.
opt
SELECT * FROM a WHERE (i = ANY(SELECT y FROM xy)) IS NULL
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 └── select
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) case:10(bool)
      ├── key: (1)
      ├── fd: ()-->(10), (1)-->(2-5)
      ├── project
      │    ├── columns: case:10(bool) k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-5,10)
      │    ├── group-by
      │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) bool_or:9(bool)
      │    │    ├── grouping columns: k:1(int!null)
      │    │    ├── key: (1)
      │    │    ├── fd: (1)-->(2-5,9)
      │    │    ├── left-join
      │    │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) y:7(int) notnull:8(bool)
      │    │    │    ├── fd: (1)-->(2-5), (7)~~>(8)
      │    │    │    ├── scan a
      │    │    │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
      │    │    │    │    ├── key: (1)
      │    │    │    │    └── fd: (1)-->(2-5)
      │    │    │    ├── project
      │    │    │    │    ├── columns: notnull:8(bool) y:7(int)
      │    │    │    │    ├── fd: (7)-->(8)
      │    │    │    │    ├── scan xy
      │    │    │    │    │    └── columns: y:7(int)
      │    │    │    │    └── projections [outer=(7)]
      │    │    │    │         └── xy.y IS NOT NULL [type=bool, outer=(7)]
      │    │    │    └── filters [type=bool, outer=(2,7)]
      │    │    │         └── (a.i = xy.y) IS NOT false [type=bool, outer=(2,7)]
      │    │    └── aggregations [outer=(2-5,8)]
      │    │         ├── bool-or [type=bool, outer=(8)]
      │    │         │    └── variable: notnull [type=bool, outer=(8)]
      │    │         ├── any-not-null [type=int, outer=(2)]
      │    │         │    └── variable: a.i [type=int, outer=(2)]
      │    │         ├── any-not-null [type=float, outer=(3)]
      │    │         │    └── variable: a.f [type=float, outer=(3)]
      │    │         ├── any-not-null [type=string, outer=(4)]
      │    │         │    └── variable: a.s [type=string, outer=(4)]
      │    │         └── any-not-null [type=jsonb, outer=(5)]
      │    │              └── variable: a.j [type=jsonb, outer=(5)]
      │    └── projections [outer=(1-5,9)]
      │         └── CASE WHEN bool_or AND (a.i IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(2,9)]
      └── filters [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight), fd=()-->(10)]
           └── case IS NULL [type=bool, outer=(10), constraints=(/10: [/NULL - /NULL]; tight)]

# ALL with non-trivial expression on left.
opt
SELECT i*i/100 < ALL(SELECT y FROM xy) AS r, s FROM a
----
project
 ├── columns: r:8(bool) s:4(string)
 ├── group-by
 │    ├── columns: s:4(string) scalar:9(decimal) bool_or:11(bool) rownum:13(int!null)
 │    ├── grouping columns: rownum:13(int!null)
 │    ├── key: (13)
 │    ├── fd: (13)-->(4,9,11)
 │    ├── left-join
 │    │    ├── columns: s:4(string) y:7(int) scalar:9(decimal) notnull:10(bool) rownum:13(int!null)
 │    │    ├── fd: (13)-->(4,9), (7)~~>(10)
 │    │    ├── row-number
 │    │    │    ├── columns: s:4(string) scalar:9(decimal) rownum:13(int!null)
 │    │    │    ├── key: (13)
 │    │    │    ├── fd: (13)-->(4,9)
 │    │    │    └── project
 │    │    │         ├── columns: scalar:9(decimal) s:4(string)
 │    │    │         ├── scan a
 │    │    │         │    └── columns: i:2(int) s:4(string)
 │    │    │         └── projections [outer=(2,4)]
 │    │    │              └── (a.i * a.i) / 100 [type=decimal, outer=(2)]
 │    │    ├── project
 │    │    │    ├── columns: notnull:10(bool) y:7(int)
 │    │    │    ├── fd: (7)-->(10)
 │    │    │    ├── scan xy
 │    │    │    │    └── columns: y:7(int)
 │    │    │    └── projections [outer=(7)]
 │    │    │         └── xy.y IS NOT NULL [type=bool, outer=(7)]
 │    │    └── filters [type=bool, outer=(7,9)]
 │    │         └── (scalar >= xy.y) IS NOT false [type=bool, outer=(7,9)]
 │    └── aggregations [outer=(4,9,10)]
 │         ├── bool-or [type=bool, outer=(10)]
 │         │    └── variable: notnull [type=bool, outer=(10)]
 │         ├── any-not-null [type=string, outer=(4)]
 │         │    └── variable: a.s [type=string, outer=(4)]
 │         └── any-not-null [type=decimal, outer=(9)]
 │              └── variable: scalar [type=decimal, outer=(9)]
 └── projections [outer=(4,9,11)]
      └── NOT CASE WHEN bool_or AND (scalar IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(9,11)]

# --------------------------------------------------
# HoistProjectSubquery
# --------------------------------------------------
opt
SELECT (SELECT x FROM xy WHERE x=k) FROM a
----
project
 ├── columns: x:8(int)
 ├── left-join (merge)
 │    ├── columns: k:1(int!null) xy.x:6(int)
 │    ├── key: (1,6)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null)
 │    │    ├── key: (1)
 │    │    └── ordering: +1
 │    ├── scan xy
 │    │    ├── columns: xy.x:6(int!null)
 │    │    ├── key: (6)
 │    │    └── ordering: +6
 │    └── merge-on
 │         ├── left ordering: +1
 │         ├── right ordering: +6
 │         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
 │              └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 └── projections [outer=(6)]
      └── variable: xy.x [type=int, outer=(6)]

# Mixed correlated and uncorrelated subqueries.
opt
SELECT
    5 AS a,
    (SELECT x FROM xy WHERE x=k),
    (SELECT y FROM xy LIMIT 1),
    5 IN (SELECT y FROM xy) AS b,
    EXISTS(SELECT * FROM xy),
    (SELECT count(*) FROM xy WHERE y=k)
FROM a
----
project
 ├── columns: a:6(int!null) x:9(int) y:12(int) b:15(bool) exists:18(bool) count:22(int)
 ├── fd: ()-->(6,12,15,18)
 ├── group-by
 │    ├── columns: k:1(int!null) xy.x:7(int) count:21(int)
 │    ├── grouping columns: k:1(int!null) xy.x:7(int)
 │    ├── key: (1,7)
 │    ├── fd: (1,7)-->(21)
 │    ├── left-join
 │    │    ├── columns: k:1(int!null) xy.x:7(int) xy.y:20(int)
 │    │    ├── left-join (merge)
 │    │    │    ├── columns: k:1(int!null) xy.x:7(int)
 │    │    │    ├── key: (1,7)
 │    │    │    ├── scan a
 │    │    │    │    ├── columns: k:1(int!null)
 │    │    │    │    ├── key: (1)
 │    │    │    │    └── ordering: +1
 │    │    │    ├── scan xy
 │    │    │    │    ├── columns: xy.x:7(int!null)
 │    │    │    │    ├── key: (7)
 │    │    │    │    └── ordering: +7
 │    │    │    └── merge-on
 │    │    │         ├── left ordering: +1
 │    │    │         ├── right ordering: +7
 │    │    │         └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
 │    │    │              └── xy.x = a.k [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
 │    │    ├── scan xy
 │    │    │    └── columns: xy.y:20(int)
 │    │    └── filters [type=bool, outer=(1,20), constraints=(/1: (/NULL - ]; /20: (/NULL - ]), fd=(1)==(20), (20)==(1)]
 │    │         └── xy.y = a.k [type=bool, outer=(1,20), constraints=(/1: (/NULL - ]; /20: (/NULL - ])]
 │    └── aggregations [outer=(20)]
 │         └── count [type=int, outer=(20)]
 │              └── variable: xy.y [type=int, outer=(20)]
 └── projections [outer=(7,21)]
      ├── const: 5 [type=int]
      ├── variable: xy.x [type=int, outer=(7)]
      ├── subquery [type=int]
      │    └── scan xy
      │         ├── columns: xy.y:11(int)
      │         ├── limit: 1
      │         ├── key: ()
      │         └── fd: ()-->(11)
      ├── any: eq [type=bool]
      │    ├── scan xy
      │    │    └── columns: xy.y:14(int)
      │    └── const: 5 [type=int]
      ├── exists [type=bool]
      │    └── scan xy
      │         ├── columns: xy.x:16(int!null) xy.y:17(int)
      │         ├── key: (16)
      │         └── fd: (16)-->(17)
      └── variable: count [type=int, outer=(21)]

# Subquery in GroupBy aggregate (optbuilder creates correlated Project).
opt
SELECT max((SELECT y FROM xy WHERE y=i)) FROM a
----
scalar-group-by
 ├── columns: max:9(int)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(9)
 ├── project
 │    ├── columns: column8:8(int)
 │    ├── left-join-apply
 │    │    ├── columns: i:2(int) y:7(int)
 │    │    ├── scan a
 │    │    │    └── columns: i:2(int)
 │    │    ├── max1-row
 │    │    │    ├── columns: y:7(int!null)
 │    │    │    ├── outer: (2)
 │    │    │    ├── cardinality: [0 - 1]
 │    │    │    ├── key: ()
 │    │    │    ├── fd: ()-->(7)
 │    │    │    └── select
 │    │    │         ├── columns: y:7(int!null)
 │    │    │         ├── outer: (2)
 │    │    │         ├── fd: ()-->(7)
 │    │    │         ├── scan xy
 │    │    │         │    └── columns: y:7(int)
 │    │    │         └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
 │    │    │              └── xy.y = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
 │    │    └── true [type=bool]
 │    └── projections [outer=(7)]
 │         └── variable: xy.y [type=int, outer=(7)]
 └── aggregations [outer=(8)]
      └── max [type=int, outer=(8)]
           └── variable: column8 [type=int, outer=(8)]

# Exists in projection list.
opt
SELECT EXISTS(SELECT * FROM xy WHERE y=i) FROM a
----
project
 ├── columns: exists:8(bool)
 ├── group-by
 │    ├── columns: any_not_null:10(bool) rownum:12(int!null)
 │    ├── grouping columns: rownum:12(int!null)
 │    ├── key: (12)
 │    ├── fd: (12)-->(10)
 │    ├── left-join
 │    │    ├── columns: i:2(int) y:7(int) true:9(bool) rownum:12(int!null)
 │    │    ├── fd: (12)-->(2), ()~~>(9)
 │    │    ├── row-number
 │    │    │    ├── columns: i:2(int) rownum:12(int!null)
 │    │    │    ├── key: (12)
 │    │    │    ├── fd: (12)-->(2)
 │    │    │    └── scan a
 │    │    │         └── columns: i:2(int)
 │    │    ├── project
 │    │    │    ├── columns: true:9(bool!null) y:7(int)
 │    │    │    ├── fd: ()-->(9)
 │    │    │    ├── scan xy
 │    │    │    │    └── columns: y:7(int)
 │    │    │    └── projections [outer=(7)]
 │    │    │         └── true [type=bool]
 │    │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
 │    │         └── xy.y = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
 │    └── aggregations [outer=(9)]
 │         └── any-not-null [type=bool, outer=(9)]
 │              └── variable: true [type=bool, outer=(9)]
 └── projections [outer=(10)]
      └── any_not_null IS NOT NULL [type=bool, outer=(10)]

# Any in projection list.
opt
SELECT 5 < ANY(SELECT y FROM xy WHERE y=i) AS r FROM a
----
project
 ├── columns: r:8(bool)
 ├── group-by
 │    ├── columns: bool_or:10(bool) rownum:12(int!null)
 │    ├── grouping columns: rownum:12(int!null)
 │    ├── key: (12)
 │    ├── fd: (12)-->(10)
 │    ├── left-join
 │    │    ├── columns: i:2(int) y:7(int) notnull:9(bool) rownum:12(int!null)
 │    │    ├── fd: (12)-->(2), (7)~~>(9)
 │    │    ├── row-number
 │    │    │    ├── columns: i:2(int) rownum:12(int!null)
 │    │    │    ├── key: (12)
 │    │    │    ├── fd: (12)-->(2)
 │    │    │    └── scan a
 │    │    │         └── columns: i:2(int)
 │    │    ├── project
 │    │    │    ├── columns: notnull:9(bool) y:7(int)
 │    │    │    ├── fd: (7)-->(9)
 │    │    │    ├── select
 │    │    │    │    ├── columns: y:7(int)
 │    │    │    │    ├── scan xy
 │    │    │    │    │    └── columns: y:7(int)
 │    │    │    │    └── filters [type=bool, outer=(7)]
 │    │    │    │         └── (xy.y > 5) IS NOT false [type=bool, outer=(7)]
 │    │    │    └── projections [outer=(7)]
 │    │    │         └── xy.y IS NOT NULL [type=bool, outer=(7)]
 │    │    └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
 │    │         └── xy.y = a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
 │    └── aggregations [outer=(9)]
 │         └── bool-or [type=bool, outer=(9)]
 │              └── variable: notnull [type=bool, outer=(9)]
 └── projections [outer=(10)]
      └── CASE WHEN bool_or THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(10)]

# --------------------------------------------------
# HoistJoinSubquery
# --------------------------------------------------
opt
SELECT i, y FROM a INNER JOIN xy ON (SELECT k+1) = 0
----
project
 ├── columns: i:2(int) y:7(int)
 └── inner-join
      ├── columns: k:1(int!null) i:2(int) y:7(int)
      ├── fd: (1)-->(2)
      ├── scan xy
      │    └── columns: y:7(int)
      ├── select
      │    ├── columns: k:1(int!null) i:2(int)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2)
      │    ├── scan a
      │    │    ├── columns: k:1(int!null) i:2(int)
      │    │    ├── key: (1)
      │    │    └── fd: (1)-->(2)
      │    └── filters [type=bool, outer=(1)]
      │         └── (a.k + 1) = 0 [type=bool, outer=(1)]
      └── true [type=bool]

# Right join + multiple subqueries.
opt
SELECT y FROM a RIGHT JOIN xy ON (SELECT k+1) = (SELECT x+1)
----
project
 ├── columns: y:7(int)
 └── select
      ├── columns: k:1(int) x:6(int!null) y:7(int)
      ├── key: (1,6)
      ├── fd: (6)-->(7)
      ├── right-join
      │    ├── columns: k:1(int) x:6(int!null) y:7(int)
      │    ├── key: (1,6)
      │    ├── fd: (6)-->(7)
      │    ├── scan a
      │    │    ├── columns: k:1(int!null)
      │    │    └── key: (1)
      │    ├── scan xy
      │    │    ├── columns: x:6(int!null) y:7(int)
      │    │    ├── key: (6)
      │    │    └── fd: (6)-->(7)
      │    └── true [type=bool]
      └── filters [type=bool, outer=(1,6)]
           └── (a.k + 1) = (xy.x + 1) [type=bool, outer=(1,6)]

# Hoist Exists in join filter disjunction.
opt
SELECT s, x FROM a FULL JOIN xy ON EXISTS(SELECT * FROM uv WHERE u=y) OR k=x
----
project
 ├── columns: s:4(string) x:6(int)
 └── full-join
      ├── columns: k:1(int) s:4(string) x:6(int) exists:12(bool)
      ├── key: (1,6)
      ├── fd: (1)-->(4), (6)-->(12)
      ├── scan a
      │    ├── columns: k:1(int!null) s:4(string)
      │    ├── key: (1)
      │    └── fd: (1)-->(4)
      ├── project
      │    ├── columns: exists:12(bool) x:6(int!null)
      │    ├── key: (6)
      │    ├── fd: (6)-->(12)
      │    ├── group-by
      │    │    ├── columns: x:6(int!null) any_not_null:11(bool)
      │    │    ├── grouping columns: x:6(int!null)
      │    │    ├── key: (6)
      │    │    ├── fd: (6)-->(11)
      │    │    ├── left-join
      │    │    │    ├── columns: x:6(int!null) y:7(int) u:8(int) true:10(bool)
      │    │    │    ├── key: (6,8)
      │    │    │    ├── fd: (6)-->(7), ()~~>(10), (6,8)-->(10)
      │    │    │    ├── scan xy
      │    │    │    │    ├── columns: x:6(int!null) y:7(int)
      │    │    │    │    ├── key: (6)
      │    │    │    │    └── fd: (6)-->(7)
      │    │    │    ├── project
      │    │    │    │    ├── columns: true:10(bool!null) u:8(int!null)
      │    │    │    │    ├── key: (8)
      │    │    │    │    ├── fd: ()-->(10)
      │    │    │    │    ├── scan uv
      │    │    │    │    │    ├── columns: u:8(int!null)
      │    │    │    │    │    └── key: (8)
      │    │    │    │    └── projections [outer=(8)]
      │    │    │    │         └── true [type=bool]
      │    │    │    └── filters [type=bool, outer=(7,8), constraints=(/7: (/NULL - ]; /8: (/NULL - ]), fd=(7)==(8), (8)==(7)]
      │    │    │         └── uv.u = xy.y [type=bool, outer=(7,8), constraints=(/7: (/NULL - ]; /8: (/NULL - ])]
      │    │    └── aggregations [outer=(10)]
      │    │         └── any-not-null [type=bool, outer=(10)]
      │    │              └── variable: true [type=bool, outer=(10)]
      │    └── projections [outer=(6,11)]
      │         └── any_not_null IS NOT NULL [type=bool, outer=(11)]
      └── filters [type=bool, outer=(1,6,12)]
           └── exists OR (a.k = xy.x) [type=bool, outer=(1,6,12)]

# Any in Join filter disjunction.
opt
SELECT j, y FROM a INNER JOIN xy ON x IN (SELECT v FROM uv WHERE u=y) OR x IS NULL
----
inner-join
 ├── columns: j:5(jsonb) y:7(int)
 ├── scan a
 │    └── columns: j:5(jsonb)
 ├── project
 │    ├── columns: y:7(int)
 │    └── select
 │         ├── columns: x:6(int!null) y:7(int) case:12(bool)
 │         ├── key: (6)
 │         ├── fd: (6)-->(7,12)
 │         ├── project
 │         │    ├── columns: case:12(bool) x:6(int!null) y:7(int)
 │         │    ├── key: (6)
 │         │    ├── fd: (6)-->(7,12)
 │         │    ├── group-by
 │         │    │    ├── columns: x:6(int!null) y:7(int) bool_or:11(bool)
 │         │    │    ├── grouping columns: x:6(int!null)
 │         │    │    ├── key: (6)
 │         │    │    ├── fd: (6)-->(7,11)
 │         │    │    ├── left-join
 │         │    │    │    ├── columns: x:6(int!null) y:7(int) u:8(int) v:9(int) notnull:10(bool)
 │         │    │    │    ├── key: (6,8)
 │         │    │    │    ├── fd: (6)-->(7), (8)-->(9), (9)~~>(10), (6,8)-->(10)
 │         │    │    │    ├── scan xy
 │         │    │    │    │    ├── columns: x:6(int!null) y:7(int)
 │         │    │    │    │    ├── key: (6)
 │         │    │    │    │    └── fd: (6)-->(7)
 │         │    │    │    ├── project
 │         │    │    │    │    ├── columns: notnull:10(bool) u:8(int!null) v:9(int)
 │         │    │    │    │    ├── key: (8)
 │         │    │    │    │    ├── fd: (8)-->(9), (9)-->(10)
 │         │    │    │    │    ├── scan uv
 │         │    │    │    │    │    ├── columns: u:8(int!null) v:9(int)
 │         │    │    │    │    │    ├── key: (8)
 │         │    │    │    │    │    └── fd: (8)-->(9)
 │         │    │    │    │    └── projections [outer=(8,9)]
 │         │    │    │    │         └── uv.v IS NOT NULL [type=bool, outer=(9)]
 │         │    │    │    └── filters [type=bool, outer=(6-9), constraints=(/7: (/NULL - ]; /8: (/NULL - ]), fd=(7)==(8), (8)==(7)]
 │         │    │    │         ├── uv.u = xy.y [type=bool, outer=(7,8), constraints=(/7: (/NULL - ]; /8: (/NULL - ])]
 │         │    │    │         └── (xy.x = uv.v) IS NOT false [type=bool, outer=(6,9)]
 │         │    │    └── aggregations [outer=(7,10)]
 │         │    │         ├── bool-or [type=bool, outer=(10)]
 │         │    │         │    └── variable: notnull [type=bool, outer=(10)]
 │         │    │         └── any-not-null [type=int, outer=(7)]
 │         │    │              └── variable: xy.y [type=int, outer=(7)]
 │         │    └── projections [outer=(6,7,11)]
 │         │         └── CASE WHEN bool_or AND (xy.x IS NOT NULL) THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(6,11)]
 │         └── filters [type=bool, outer=(6,12)]
 │              └── case OR (xy.x IS NULL) [type=bool, outer=(6,12)]
 └── true [type=bool]

# --------------------------------------------------
# HoistValuesSubquery
# --------------------------------------------------
opt
SELECT (VALUES ((SELECT i+1 AS r)), (10), ((SELECT k+1 AS s))) FROM a
----
project
 ├── columns: column1:9(int)
 ├── inner-join-apply
 │    ├── columns: k:1(int!null) i:2(int) column1:8(int)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2,8)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2)
 │    ├── max1-row
 │    │    ├── columns: column1:8(int)
 │    │    ├── outer: (1,2)
 │    │    ├── cardinality: [1 - 1]
 │    │    ├── key: ()
 │    │    ├── fd: ()-->(8)
 │    │    └── project
 │    │         ├── columns: column1:8(int)
 │    │         ├── outer: (1,2)
 │    │         ├── cardinality: [3 - 3]
 │    │         └── inner-join-apply
 │    │              ├── columns: r:6(int) s:7(int) column1:8(int)
 │    │              ├── outer: (1,2)
 │    │              ├── cardinality: [3 - 3]
 │    │              ├── fd: ()-->(6,7)
 │    │              ├── project
 │    │              │    ├── columns: s:7(int) r:6(int)
 │    │              │    ├── outer: (1,2)
 │    │              │    ├── cardinality: [1 - 1]
 │    │              │    ├── key: ()
 │    │              │    ├── fd: ()-->(6,7)
 │    │              │    ├── values
 │    │              │    │    ├── cardinality: [1 - 1]
 │    │              │    │    ├── key: ()
 │    │              │    │    └── tuple [type=tuple]
 │    │              │    └── projections [outer=(1,2)]
 │    │              │         ├── a.k + 1 [type=int, outer=(1)]
 │    │              │         └── a.i + 1 [type=int, outer=(2)]
 │    │              ├── values
 │    │              │    ├── columns: column1:8(int)
 │    │              │    ├── outer: (6,7)
 │    │              │    ├── cardinality: [3 - 3]
 │    │              │    ├── (r) [type=tuple{int}, outer=(6)]
 │    │              │    ├── (10) [type=tuple{int}]
 │    │              │    └── (s) [type=tuple{int}, outer=(7)]
 │    │              └── true [type=bool]
 │    └── true [type=bool]
 └── projections [outer=(8)]
      └── variable: column1 [type=int, outer=(8)]

# Exists in values row.
opt
SELECT (VALUES (EXISTS(SELECT * FROM xy WHERE x=k))) FROM a
----
project
 ├── columns: column1:12(bool)
 ├── left-join-apply
 │    ├── columns: k:1(int!null) column1:8(bool)
 │    ├── key: (1)
 │    ├── fd: (1)-->(8)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null)
 │    │    └── key: (1)
 │    ├── project
 │    │    ├── columns: column1:8(bool)
 │    │    ├── outer: (1)
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── key: ()
 │    │    ├── fd: ()-->(8)
 │    │    └── inner-join-apply
 │    │         ├── columns: column1:8(bool) exists:11(bool)
 │    │         ├── outer: (1)
 │    │         ├── cardinality: [0 - 1]
 │    │         ├── key: ()
 │    │         ├── fd: ()-->(8,11)
 │    │         ├── project
 │    │         │    ├── columns: exists:11(bool)
 │    │         │    ├── outer: (1)
 │    │         │    ├── cardinality: [0 - 1]
 │    │         │    ├── key: ()
 │    │         │    ├── fd: ()-->(11)
 │    │         │    ├── group-by
 │    │         │    │    ├── columns: any_not_null:10(bool)
 │    │         │    │    ├── outer: (1)
 │    │         │    │    ├── cardinality: [0 - 1]
 │    │         │    │    ├── key: ()
 │    │         │    │    ├── fd: ()-->(10)
 │    │         │    │    ├── right-join
 │    │         │    │    │    ├── columns: x:6(int) true:9(bool)
 │    │         │    │    │    ├── outer: (1)
 │    │         │    │    │    ├── key: (6)
 │    │         │    │    │    ├── fd: ()~~>(9), (6)-->(9)
 │    │         │    │    │    ├── project
 │    │         │    │    │    │    ├── columns: true:9(bool!null) x:6(int!null)
 │    │         │    │    │    │    ├── key: (6)
 │    │         │    │    │    │    ├── fd: ()-->(9)
 │    │         │    │    │    │    ├── scan xy
 │    │         │    │    │    │    │    ├── columns: x:6(int!null)
 │    │         │    │    │    │    │    └── key: (6)
 │    │         │    │    │    │    └── projections [outer=(6)]
 │    │         │    │    │    │         └── true [type=bool]
 │    │         │    │    │    ├── values
 │    │         │    │    │    │    ├── cardinality: [1 - 1]
 │    │         │    │    │    │    ├── key: ()
 │    │         │    │    │    │    └── tuple [type=tuple]
 │    │         │    │    │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
 │    │         │    │    │         └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │         │    │    └── aggregations [outer=(9)]
 │    │         │    │         └── any-not-null [type=bool, outer=(9)]
 │    │         │    │              └── variable: true [type=bool, outer=(9)]
 │    │         │    └── projections [outer=(10)]
 │    │         │         └── any_not_null IS NOT NULL [type=bool, outer=(10)]
 │    │         ├── values
 │    │         │    ├── columns: column1:8(bool)
 │    │         │    ├── outer: (11)
 │    │         │    ├── cardinality: [1 - 1]
 │    │         │    ├── key: ()
 │    │         │    ├── fd: ()-->(8)
 │    │         │    └── (exists) [type=tuple{bool}, outer=(11)]
 │    │         └── true [type=bool]
 │    └── true [type=bool]
 └── projections [outer=(8)]
      └── variable: column1 [type=bool, outer=(8)]

# Any in values row.
opt
SELECT (VALUES (5 IN (SELECT y FROM xy WHERE x=k))) FROM a
----
project
 ├── columns: column1:12(bool)
 ├── left-join-apply
 │    ├── columns: k:1(int!null) column1:8(bool)
 │    ├── key: (1)
 │    ├── fd: (1)-->(8)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null)
 │    │    └── key: (1)
 │    ├── project
 │    │    ├── columns: column1:8(bool)
 │    │    ├── outer: (1)
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── key: ()
 │    │    ├── fd: ()-->(8)
 │    │    └── inner-join-apply
 │    │         ├── columns: column1:8(bool) case:11(bool)
 │    │         ├── outer: (1)
 │    │         ├── cardinality: [0 - 1]
 │    │         ├── key: ()
 │    │         ├── fd: ()-->(8,11)
 │    │         ├── project
 │    │         │    ├── columns: case:11(bool)
 │    │         │    ├── outer: (1)
 │    │         │    ├── cardinality: [0 - 1]
 │    │         │    ├── key: ()
 │    │         │    ├── fd: ()-->(11)
 │    │         │    ├── group-by
 │    │         │    │    ├── columns: bool_or:10(bool)
 │    │         │    │    ├── outer: (1)
 │    │         │    │    ├── cardinality: [0 - 1]
 │    │         │    │    ├── key: ()
 │    │         │    │    ├── fd: ()-->(10)
 │    │         │    │    ├── right-join
 │    │         │    │    │    ├── columns: x:6(int) notnull:9(bool)
 │    │         │    │    │    ├── outer: (1)
 │    │         │    │    │    ├── key: (6)
 │    │         │    │    │    ├── fd: (6)-->(9)
 │    │         │    │    │    ├── project
 │    │         │    │    │    │    ├── columns: notnull:9(bool) x:6(int!null)
 │    │         │    │    │    │    ├── key: (6)
 │    │         │    │    │    │    ├── fd: (6)-->(9)
 │    │         │    │    │    │    ├── select
 │    │         │    │    │    │    │    ├── columns: x:6(int!null) y:7(int)
 │    │         │    │    │    │    │    ├── key: (6)
 │    │         │    │    │    │    │    ├── fd: (6)-->(7)
 │    │         │    │    │    │    │    ├── scan xy
 │    │         │    │    │    │    │    │    ├── columns: x:6(int!null) y:7(int)
 │    │         │    │    │    │    │    │    ├── key: (6)
 │    │         │    │    │    │    │    │    └── fd: (6)-->(7)
 │    │         │    │    │    │    │    └── filters [type=bool, outer=(7)]
 │    │         │    │    │    │    │         └── (xy.y = 5) IS NOT false [type=bool, outer=(7)]
 │    │         │    │    │    │    └── projections [outer=(6,7)]
 │    │         │    │    │    │         └── xy.y IS NOT NULL [type=bool, outer=(7)]
 │    │         │    │    │    ├── values
 │    │         │    │    │    │    ├── cardinality: [1 - 1]
 │    │         │    │    │    │    ├── key: ()
 │    │         │    │    │    │    └── tuple [type=tuple]
 │    │         │    │    │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
 │    │         │    │    │         └── xy.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │         │    │    └── aggregations [outer=(9)]
 │    │         │    │         └── bool-or [type=bool, outer=(9)]
 │    │         │    │              └── variable: notnull [type=bool, outer=(9)]
 │    │         │    └── projections [outer=(10)]
 │    │         │         └── CASE WHEN bool_or THEN true WHEN bool_or IS NULL THEN false END [type=bool, outer=(10)]
 │    │         ├── values
 │    │         │    ├── columns: column1:8(bool)
 │    │         │    ├── outer: (11)
 │    │         │    ├── cardinality: [1 - 1]
 │    │         │    ├── key: ()
 │    │         │    ├── fd: ()-->(8)
 │    │         │    └── (case) [type=tuple{bool}, outer=(11)]
 │    │         └── true [type=bool]
 │    └── true [type=bool]
 └── projections [outer=(8)]
      └── variable: column1 [type=bool, outer=(8)]

# --------------------------------------------------
# NormalizeAnyFilter
# --------------------------------------------------
opt
SELECT * FROM a WHERE i IN (SELECT y FROM xy)
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 ├── scan xy
 │    └── columns: y:7(int)
 └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
      └── a.i = xy.y [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]

# Any is one of several conjuncts.
opt
SELECT * FROM a WHERE k=10 AND i < ANY(SELECT y FROM xy) AND s='foo'
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string!null) j:5(jsonb)
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-5)
 ├── select
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string!null) j:5(jsonb)
 │    ├── cardinality: [0 - 1]
 │    ├── key: ()
 │    ├── fd: ()-->(1-5)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    │    ├── constraint: /1: [/10 - /10]
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── key: ()
 │    │    └── fd: ()-->(1-5)
 │    └── filters [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight), fd=()-->(4)]
 │         └── a.s = 'foo' [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 ├── scan xy
 │    └── columns: y:7(int)
 └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
      └── a.i < xy.y [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]

# Multiple ANY conjuncts.
opt
SELECT * FROM a WHERE i < ANY(SELECT y FROM xy) AND s = ANY(SELECT y::string FROM xy)
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── semi-join
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2-5)
 │    ├── project
 │    │    ├── columns: y:10(string)
 │    │    ├── scan xy
 │    │    │    └── columns: xy.y:9(int)
 │    │    └── projections [outer=(9)]
 │    │         └── xy.y::STRING [type=string, outer=(9)]
 │    └── filters [type=bool, outer=(4,10), constraints=(/4: (/NULL - ]; /10: (/NULL - ]), fd=(4)==(10), (10)==(4)]
 │         └── a.s = y [type=bool, outer=(4,10), constraints=(/4: (/NULL - ]; /10: (/NULL - ])]
 ├── scan xy
 │    └── columns: xy.y:7(int)
 └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
      └── a.i < xy.y [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]

# Don't hoist uncorrelated ANY (but rewrite it to EXISTS).
opt
SELECT * FROM a WHERE 5 IN (SELECT y FROM xy)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 └── filters [type=bool]
      └── exists [type=bool]
           └── select
                ├── columns: y:7(int!null)
                ├── fd: ()-->(7)
                ├── scan xy
                │    └── columns: y:7(int)
                └── filters [type=bool, outer=(7), constraints=(/7: [/5 - /5]; tight), fd=()-->(7)]
                     └── xy.y = 5 [type=bool, outer=(7), constraints=(/7: [/5 - /5]; tight)]

# ANY in Join On condition.
opt
SELECT * FROM a INNER JOIN xy ON i IN (SELECT v FROM uv) AND k=x
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) y:7(int)
 ├── key: (6)
 ├── fd: (1)-->(2-5), (6)-->(7), (1)==(6), (6)==(1)
 ├── semi-join
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2-5)
 │    ├── scan uv
 │    │    └── columns: v:9(int)
 │    └── filters [type=bool, outer=(2,9), constraints=(/2: (/NULL - ]; /9: (/NULL - ]), fd=(2)==(9), (9)==(2)]
 │         └── a.i = uv.v [type=bool, outer=(2,9), constraints=(/2: (/NULL - ]; /9: (/NULL - ])]
 ├── scan xy
 │    ├── columns: x:6(int!null) y:7(int)
 │    ├── key: (6)
 │    └── fd: (6)-->(7)
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
      └── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# --------------------------------------------------
# NormalizeNotAnyFilter
# --------------------------------------------------
opt
SELECT * FROM a WHERE i NOT IN (SELECT y FROM xy)
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 ├── scan xy
 │    └── columns: y:7(int)
 └── filters [type=bool, outer=(2,7)]
      └── (a.i = xy.y) IS NOT false [type=bool, outer=(2,7)]

# NOT ANY is one of several conjuncts. Note that i > ALL(...) gets mapped to
# NOT i <= ANY(...) by optbuilder.
opt
SELECT * FROM a WHERE k > 1 AND k < 5 AND i > ALL(SELECT y FROM xy)
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── constraint: /1: [/2 - /4]
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 ├── scan xy
 │    └── columns: y:7(int)
 └── filters [type=bool, outer=(2,7)]
      └── (a.i <= xy.y) IS NOT false [type=bool, outer=(2,7)]

# Multiple NOT ANY conjuncts.
opt
SELECT * FROM a WHERE i < ALL(SELECT y FROM xy) AND s <> ALL(SELECT y::string FROM xy)
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── anti-join
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2-5)
 │    ├── project
 │    │    ├── columns: y:10(string)
 │    │    ├── scan xy
 │    │    │    └── columns: xy.y:9(int)
 │    │    └── projections [outer=(9)]
 │    │         └── xy.y::STRING [type=string, outer=(9)]
 │    └── filters [type=bool, outer=(4,10)]
 │         └── (a.s = y) IS NOT false [type=bool, outer=(4,10)]
 ├── scan xy
 │    └── columns: xy.y:7(int)
 └── filters [type=bool, outer=(2,7)]
      └── (a.i >= xy.y) IS NOT false [type=bool, outer=(2,7)]

# Don't hoist uncorrelated NOT ANY (but rewrite it to NOT EXISTS).
opt
SELECT * FROM a WHERE 5 NOT IN (SELECT y FROM xy)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 └── filters [type=bool]
      └── not [type=bool]
           └── exists [type=bool]
                └── select
                     ├── columns: y:7(int)
                     ├── scan xy
                     │    └── columns: y:7(int)
                     └── filters [type=bool, outer=(7)]
                          └── (xy.y = 5) IS NOT false [type=bool, outer=(7)]

# NOT ANY in Join On condition.
opt
SELECT * FROM a INNER JOIN xy ON i NOT IN (SELECT v FROM uv) AND k=x
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) y:7(int)
 ├── key: (6)
 ├── fd: (1)-->(2-5), (6)-->(7), (1)==(6), (6)==(1)
 ├── anti-join
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2-5)
 │    ├── scan uv
 │    │    └── columns: v:9(int)
 │    └── filters [type=bool, outer=(2,9)]
 │         └── (a.i = uv.v) IS NOT false [type=bool, outer=(2,9)]
 ├── scan xy
 │    ├── columns: x:6(int!null) y:7(int)
 │    ├── key: (6)
 │    └── fd: (6)-->(7)
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
      └── a.k = xy.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# --------------------------------------------------
# NormalizeAnyFilter + NormalizeNotAnyFilter
# --------------------------------------------------
opt
SELECT * FROM a WHERE i = ANY(SELECT y FROM xy) AND s <> ALL(SELECT y::string FROM xy)
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── anti-join
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2-5)
 │    ├── project
 │    │    ├── columns: y:10(string)
 │    │    ├── scan xy
 │    │    │    └── columns: xy.y:9(int)
 │    │    └── projections [outer=(9)]
 │    │         └── xy.y::STRING [type=string, outer=(9)]
 │    └── filters [type=bool, outer=(4,10)]
 │         └── (a.s = y) IS NOT false [type=bool, outer=(4,10)]
 ├── scan xy
 │    └── columns: xy.y:7(int)
 └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
      └── a.i = xy.y [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
