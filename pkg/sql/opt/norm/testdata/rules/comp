exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON, d DATE)
----

# --------------------------------------------------
# CommuteVarInequality
# --------------------------------------------------

# Put variables on both sides of comparison operator to avoid matching constant
# patterns.
norm expect=CommuteVarInequality
SELECT * FROM a WHERE 1+i<k AND k-1<=i AND i*i>k AND k/2>=i
----
select
 ├── columns: k:1!null i:2!null f:3 s:4 j:5 d:6
 ├── side-effects
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters
      ├── k:1 > (i:2 + 1) [outer=(1,2), constraints=(/1: (/NULL - ])]
      ├── i:2 >= (k:1 - 1) [outer=(1,2), constraints=(/2: (/NULL - ])]
      ├── k:1 < (i:2 * i:2) [outer=(1,2), constraints=(/1: (/NULL - ])]
      └── i:2 <= (k:1 / 2) [outer=(1,2), side-effects, constraints=(/2: (/NULL - ])]

# --------------------------------------------------
# CommuteConstInequality
# --------------------------------------------------
norm expect=CommuteConstInequality
SELECT * FROM a WHERE 5+1<i+k AND 5*5/3<=i*2 AND 5>i AND 'foo'>=s
----
select
 ├── columns: k:1!null i:2!null f:3 s:4!null j:5 d:6
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters
      ├── (i:2 + k:1) > 6 [outer=(1,2)]
      ├── (i:2 * 2) >= 8.3333333333333333333 [outer=(2)]
      ├── i:2 < 5 [outer=(2), constraints=(/2: (/NULL - /4]; tight)]
      └── s:4 <= 'foo' [outer=(4), constraints=(/4: (/NULL - /'foo']; tight)]

norm expect=CommuteConstInequality
SELECT * FROM a WHERE length('foo')+1<i+k AND length('bar')<=i*2
----
select
 ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters
      ├── (i:2 + k:1) > 4 [outer=(1,2)]
      └── (i:2 * 2) >= 3 [outer=(2)]

# Impure function should not be considered constant.
norm expect-not=CommuteConstInequality
SELECT * FROM a WHERE random()::int>a.i+a.i
----
select
 ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 ├── side-effects
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters
      └── random()::INT8 > (i:2 + i:2) [outer=(2), side-effects]

# --------------------------------------------------
# NormalizeCmpPlusConst
# --------------------------------------------------
norm expect=NormalizeCmpPlusConst
SELECT *
FROM a
WHERE
    k+1 = 2 AND
    (f+f)+2 < 5 AND
    1::decimal+i >= length('foo') AND
    i+2+2 > 10 AND
    '1:00:00'::time + i::interval >= '2:00:00'::time
----
select
 ├── columns: k:1!null i:2!null f:3 s:4 j:5 d:6
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-6)
 ├── scan a
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters
      ├── (i:2 >= 2) AND (i:2 > 6) [outer=(2), constraints=(/2: [/7 - ]; tight)]
      ├── k:1 = 1 [outer=(1), constraints=(/1: [/1 - /1]; tight), fd=()-->(1)]
      ├── (f:3 + f:3) < 3.0 [outer=(3)]
      └── i:2::INTERVAL >= '01:00:00' [outer=(2)]

# Try case that should not match pattern because Minus overload is not defined.
norm expect-not=NormalizeCmpPlusConst
SELECT * FROM a WHERE s::date + '02:00:00'::time = '2000-01-01T02:00:00'::timestamp
----
select
 ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters
      └── (s:4::DATE + '02:00:00') = '2000-01-01 02:00:00+00:00' [outer=(4)]

# --------------------------------------------------
# NormalizeCmpMinusConst
# --------------------------------------------------
norm expect=NormalizeCmpMinusConst
SELECT *
FROM a
WHERE
    k-1 = 2 AND
    (f+f)-2 < 5 AND
    i-1::decimal >= length('foo') AND
    i-2-2 < 10 AND
    f+i::float-10.0 >= 100.0 AND
    d-'1w'::interval >= '2018-09-23'::date
----
select
 ├── columns: k:1!null i:2!null f:3 s:4 j:5 d:6!null
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-6)
 ├── scan a
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters
      ├── (i:2 >= 4) AND (i:2 < 14) [outer=(2), constraints=(/2: [/4 - /13]; tight)]
      ├── k:1 = 3 [outer=(1), constraints=(/1: [/3 - /3]; tight), fd=()-->(1)]
      ├── (f:3 + f:3) < 7.0 [outer=(3)]
      ├── (f:3 + i:2::FLOAT8) >= 110.0 [outer=(2,3)]
      └── d:6 >= '2018-09-30' [outer=(6), constraints=(/6: [/'2018-09-30' - ]; tight)]

# Try case that should not match pattern because Plus overload is not defined.
norm expect-not=NormalizeCmpMinusConst
SELECT * FROM a WHERE s::json - 1 = '[1]'::json
----
select
 ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters
      └── (s:4::JSONB - 1) = '[1]' [outer=(4)]

# --------------------------------------------------
# NormalizeCmpConstMinus
# --------------------------------------------------
norm expect=NormalizeCmpConstMinus
SELECT *
FROM a
WHERE
    1-k = 2 AND
    2-(f+f) < 5 AND
    1::decimal-i <= length('foo') AND
    2-(2-i) > 10 AND
    10.0-(f+i::float) >= 100.0
----
select
 ├── columns: k:1!null i:2!null f:3 s:4 j:5 d:6
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-6)
 ├── scan a
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters
      ├── (i:2 >= -2) AND (i:2 > 10) [outer=(2), constraints=(/2: [/11 - ]; tight)]
      ├── k:1 = -1 [outer=(1), constraints=(/1: [/-1 - /-1]; tight), fd=()-->(1)]
      ├── (f:3 + f:3) > -3.0 [outer=(3)]
      └── (f:3 + i:2::FLOAT8) <= -90.0 [outer=(2,3)]

# Try case that should not match pattern because Minus overload is not defined.
norm expect-not=NormalizeCmpConstMinus
SELECT * FROM a WHERE '[1, 2]'::json - i = '[1]'
----
select
 ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 ├── key: (1)
 ├── fd: (1)-->(2-6)
 ├── scan a
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters
      └── ('[1, 2]' - i:2) = '[1]' [outer=(2)]

# --------------------------------------------------
# NormalizeTupleEquality
# --------------------------------------------------
norm expect=NormalizeTupleEquality
SELECT * FROM a WHERE (i, f, s) = (1, 3.5, 'foo')
----
select
 ├── columns: k:1!null i:2!null f:3!null s:4!null j:5 d:6
 ├── key: (1)
 ├── fd: ()-->(2-4), (1)-->(5,6)
 ├── scan a
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters
      ├── i:2 = 1 [outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
      ├── f:3 = 3.5 [outer=(3), constraints=(/3: [/3.5 - /3.5]; tight), fd=()-->(3)]
      └── s:4 = 'foo' [outer=(4), constraints=(/4: [/'foo' - /'foo']; tight), fd=()-->(4)]

# Empty tuples.
norm expect=NormalizeTupleEquality
SELECT * FROM a WHERE () = ()
----
scan a
 ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 ├── key: (1)
 └── fd: (1)-->(2-6)

# --------------------------------------------------
# NormalizeTupleEquality, NormalizeNestedAnds
# --------------------------------------------------

# Nested tuples.
norm expect=(NormalizeTupleEquality,NormalizeNestedAnds)
SELECT * FROM a WHERE (1, (2, 'foo')) = (k, (i, s))
----
select
 ├── columns: k:1!null i:2!null f:3 s:4!null j:5 d:6
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-6)
 ├── scan a
 │    ├── columns: k:1!null i:2 f:3 s:4 j:5 d:6
 │    ├── key: (1)
 │    └── fd: (1)-->(2-6)
 └── filters
      ├── k:1 = 1 [outer=(1), constraints=(/1: [/1 - /1]; tight), fd=()-->(1)]
      ├── i:2 = 2 [outer=(2), constraints=(/2: [/2 - /2]; tight), fd=()-->(2)]
      └── s:4 = 'foo' [outer=(4), constraints=(/4: [/'foo' - /'foo']; tight), fd=()-->(4)]

# --------------------------------------------------
# FoldNullComparisonLeft, FoldNullComparisonRight
# --------------------------------------------------

# Use null::type to circumvent type checker constant folding.
norm expect=(FoldNullComparisonLeft,FoldNullComparisonRight)
SELECT *
FROM a
WHERE
    null::int = 1 OR 1 = null::int OR
    null::int <> 1 OR 1 <> null::int OR
    null::int > 1 OR 1 > null::int OR
    null::int >= 1 OR 1 >= null::int OR
    null::int < 1 OR 1 < null::int OR
    null::int <= 1 OR 1 <= null::int OR
    null::string LIKE 'foo' OR 'foo' LIKE null::string OR
    null::string NOT LIKE 'foo' OR 'foo' NOT LIKE null::string OR
    null::string ILIKE 'foo' OR 'foo' ILIKE null::string OR
    null::string NOT ILIKE 'foo' OR 'foo' NOT ILIKE null::string OR
    null::string SIMILAR TO 'foo' OR 'foo' SIMILAR TO null::string OR
    null::string NOT SIMILAR TO 'foo' OR 'foo' NOT SIMILAR TO null::string OR
    null::string ~ 'foo' OR 'foo' ~ null::string OR
    null::string !~ 'foo' OR 'foo' !~ null::string OR
    null::string ~* 'foo' OR 'foo' ~* null::string OR
    null::string !~* 'foo' OR 'foo' !~* null::string OR
    null::string[] && ARRAY['foo'] OR ARRAY['foo'] && null::string[] OR
    null::jsonb @> '"foo"' OR '"foo"' <@ null::jsonb OR
    null::jsonb ? 'foo' OR '{}' ? null::string OR
    null::jsonb ?| ARRAY['foo'] OR '{}' ?| null::string[] OR
    null::jsonb ?& ARRAY['foo'] OR '{}' ?& null::string[]
----
values
 ├── columns: k:1!null i:2!null f:3!null s:4!null j:5!null d:6!null
 ├── cardinality: [0 - 0]
 ├── key: ()
 └── fd: ()-->(1-6)

# --------------------------------------------------
# FoldIsNull
# --------------------------------------------------
norm expect=FoldIsNull
SELECT NULL IS NULL AS r
----
values
 ├── columns: r:1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (true,)

# --------------------------------------------------
# FoldNonNullIsNull
# --------------------------------------------------
norm expect=FoldNonNullIsNull
SELECT 1 IS NULL AS r
----
values
 ├── columns: r:1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (false,)

norm expect=FoldNonNullIsNull
SELECT (1, 2, 3) IS NULL AS r
----
values
 ├── columns: r:1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (false,)

# --------------------------------------------------
# FoldIsNotNull
# --------------------------------------------------
norm expect=FoldIsNotNull
SELECT NULL IS NOT NULL AS r, NULL IS NOT TRUE AS s
----
values
 ├── columns: r:1!null s:2!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1,2)
 └── (false, true)

# --------------------------------------------------
# FoldNonNullIsNotNull
# --------------------------------------------------

# We could (but do not currently) infer that k IS NOT NULL is always True given
# that k is declared NOT NULL.
norm expect=FoldNonNullIsNotNull
SELECT 1 IS NOT NULL AS r, k IS NOT NULL AS s, i IS NOT NULL AS t FROM a
----
project
 ├── columns: r:7!null s:8!null t:9!null
 ├── fd: ()-->(7)
 ├── scan a
 │    ├── columns: k:1!null i:2
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── projections
      ├── true [as=r:7]
      ├── k:1 IS NOT NULL [as=s:8, outer=(1)]
      └── i:2 IS NOT NULL [as=t:9, outer=(2)]

norm expect=FoldNonNullIsNotNull
SELECT (1, 2, 3) IS NOT NULL AS r
----
values
 ├── columns: r:1!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── (true,)

# --------------------------------------------------
# CommuteNullIs
# --------------------------------------------------
norm expect=CommuteNullIs
SELECT NULL IS NOT TRUE AS r, NULL IS TRUE AS s
----
values
 ├── columns: r:1!null s:2!null
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1,2)
 └── (true, false)
