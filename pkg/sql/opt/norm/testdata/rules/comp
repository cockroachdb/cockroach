exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 └── INDEX primary
      └── k int not null

# --------------------------------------------------
# CommuteVarInequality
# --------------------------------------------------

# Put variables on both sides of comparison operator to avoid matching constant
# patterns.
opt
SELECT * FROM a WHERE 1+i<k AND k-1<=i AND i*i>k AND k/2>=i
----
select
 ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(1,2), constraints=(/1: (/NULL - ]; /2: (/NULL - ])]
      ├── a.k > (a.i + 1) [type=bool, outer=(1,2), constraints=(/1: (/NULL - ])]
      ├── a.i >= (a.k - 1) [type=bool, outer=(1,2), constraints=(/2: (/NULL - ])]
      ├── a.k < (a.i * a.i) [type=bool, outer=(1,2), constraints=(/1: (/NULL - ])]
      └── a.i <= (a.k / 2) [type=bool, outer=(1,2), constraints=(/2: (/NULL - ])]

# --------------------------------------------------
# CommuteConstInequality
# --------------------------------------------------
opt
SELECT * FROM a WHERE length('foo')+1<i+k AND length('bar')<=i*2 AND 5>i AND 'foo'>=s
----
select
 ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string!null) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(1,2,4), constraints=(/2: (/NULL - /4]; /4: (/NULL - /'foo'])]
      ├── (a.i + a.k) > (length('foo') + 1) [type=bool, outer=(1,2)]
      ├── (a.i * 2) >= length('bar') [type=bool, outer=(2)]
      ├── a.i < 5 [type=bool, outer=(2), constraints=(/2: (/NULL - /4]; tight)]
      └── a.s <= 'foo' [type=bool, outer=(4), constraints=(/4: (/NULL - /'foo']; tight)]

# --------------------------------------------------
# NormalizeCmpPlusConst
# --------------------------------------------------
opt
SELECT *
FROM a
WHERE
    i+1 = 2 AND
    (f+f)+2 < 5 AND
    1::decimal+i <= length('foo') AND
    i+2+2 > 10 AND
    '1:00:00'::time + i::interval >= '2:00:00'::time
----
select
 ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(2,3), constraints=(/2: (/NULL - ])]
      ├── a.i = (2 - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
      ├── (a.f + a.f) < (5.0 - 2.0) [type=bool, outer=(3)]
      ├── a.i <= (length('foo') - 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
      ├── a.i > ((10 - 2) - 2) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
      └── a.i::INTERVAL >= ('02:00:00' - '01:00:00') [type=bool, outer=(2)]

# Try case that should not match pattern because Minus overload is not defined.
opt
SELECT * FROM a WHERE s::date + '02:00:00'::time = '2000-01-01T02:00:00'::timestamp
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(4)]
      └── (a.s::DATE + '02:00:00') = '2000-01-01 02:00:00+00:00' [type=bool, outer=(4)]

# --------------------------------------------------
# NormalizeCmpMinusConst
# --------------------------------------------------
opt
SELECT *
FROM a
WHERE
    i-1 = 2 AND
    (f+f)-2 < 5 AND
    i-1::decimal <= length('foo') AND
    i-2-2 > 10 AND
    f+i::float-10.0 >= 100.0
----
select
 ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(2,3), constraints=(/2: (/NULL - ])]
      ├── a.i = (2 + 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
      ├── (a.f + a.f) < (5.0 + 2.0) [type=bool, outer=(3)]
      ├── a.i <= (length('foo') + 1) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
      ├── a.i > ((10 + 2) + 2) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
      └── (a.f + a.i::FLOAT) >= (100.0 + 10.0) [type=bool, outer=(2,3)]

# Try case that should not match pattern because Plus overload is not defined.
opt
SELECT * FROM a WHERE s::json - 1 = '[1]'::json
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(4)]
      └── (a.s::JSON - 1) = '[1]' [type=bool, outer=(4)]

# --------------------------------------------------
# NormalizeCmpConstMinus
# --------------------------------------------------
opt
SELECT *
FROM a
WHERE
    1-i = 2 AND
    2-(f+f) < 5 AND
    1::decimal-i <= length('foo') AND
    2-(2-i) > 10 AND
    10.0-(f+i::float) >= 100.0
----
select
 ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(2,3), constraints=(/2: (/NULL - ])]
      ├── a.i = (1 - 2) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
      ├── (a.f + a.f) > (2.0 - 5.0) [type=bool, outer=(3)]
      ├── a.i >= (1 - length('foo')) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
      ├── a.i > (2 - (2 - 10)) [type=bool, outer=(2), constraints=(/2: (/NULL - ])]
      └── (a.f + a.i::FLOAT) <= (10.0 - 100.0) [type=bool, outer=(2,3)]

# Try case that should not match pattern because Minus overload is not defined.
opt
SELECT * FROM a WHERE '[1, 2]'::json - i = '[1]'
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(2)]
      └── ('[1, 2]' - a.i) = '[1]' [type=bool, outer=(2)]

# --------------------------------------------------
# NormalizeTupleEquality
# --------------------------------------------------
opt
SELECT * FROM a WHERE (i, f, s) = (1, 3.5, 'foo')
----
select
 ├── columns: k:1(int!null) i:2(int!null) f:3(float!null) s:4(string!null) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(2-4), constraints=(/2: [/1 - /1]; /3: [/3.5 - /3.5]; /4: [/'foo' - /'foo']; tight)]
      ├── a.i = 1 [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
      ├── a.f = 3.5 [type=bool, outer=(3), constraints=(/3: [/3.5 - /3.5]; tight)]
      └── a.s = 'foo' [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]

# --------------------------------------------------
# NormalizeTupleEquality, FlattenAnd
# --------------------------------------------------

# Nested tuples.
opt
SELECT * FROM a WHERE (1, (2, 'foo')) = (k, (i, s))
----
select
 ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string!null) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── constraint: /1: [/1 - /1]
 │    └── keys: (1)
 └── filters [type=bool, outer=(2,4), constraints=(/2: [/2 - /2]; /4: [/'foo' - /'foo']; tight)]
      ├── a.i = 2 [type=bool, outer=(2), constraints=(/2: [/2 - /2]; tight)]
      └── a.s = 'foo' [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]

# --------------------------------------------------
# FoldNullComparisonLeft, FoldNullComparisonRight
# --------------------------------------------------

# Use null::type to circumvent type checker constant folding.
opt
SELECT *
FROM a
WHERE
    null::int = 1 OR 1 = null::int OR
    null::int <> 1 OR 1 <> null::int OR
    null::int > 1 OR 1 > null::int OR
    null::int >= 1 OR 1 >= null::int OR
    null::int < 1 OR 1 < null::int OR
    null::int <= 1 OR 1 <= null::int OR
    null::string LIKE 'foo' OR 'foo' LIKE null::string OR
    null::string NOT LIKE 'foo' OR 'foo' NOT LIKE null::string OR
    null::string ILIKE 'foo' OR 'foo' ILIKE null::string OR
    null::string NOT ILIKE 'foo' OR 'foo' NOT ILIKE null::string OR
    null::string SIMILAR TO 'foo' OR 'foo' SIMILAR TO null::string OR
    null::string NOT SIMILAR TO 'foo' OR 'foo' NOT SIMILAR TO null::string OR
    null::string ~ 'foo' OR 'foo' ~ null::string OR
    null::string !~ 'foo' OR 'foo' !~ null::string OR
    null::string ~* 'foo' OR 'foo' ~* null::string OR
    null::string !~* 'foo' OR 'foo' !~* null::string OR
    null::jsonb @> '"foo"' OR '"foo"' <@ null::jsonb OR
    null::jsonb ? 'foo' OR '{}' ? null::string OR
    null::jsonb ?| ARRAY['foo'] OR '{}' ?| null::string[] OR
    null::jsonb ?& ARRAY['foo'] OR '{}' ?& null::string[]
----
scan a
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── constraint: /1: contradiction
 └── keys: (1)

# --------------------------------------------------
# FoldIsNull
# --------------------------------------------------
opt
SELECT NULL IS NULL
----
project
 ├── columns: "NULL IS NULL":1(bool!null)
 ├── cardinality: [1 - 1]
 ├── values
 │    ├── cardinality: [1 - 1]
 │    └── tuple [type=tuple{}]
 └── projections
      └── true [type=bool]

# --------------------------------------------------
# FoldNonNullIsNull
# --------------------------------------------------
opt
SELECT 1 IS NULL
----
project
 ├── columns: "1 IS NULL":1(bool!null)
 ├── cardinality: [1 - 1]
 ├── values
 │    ├── cardinality: [1 - 1]
 │    └── tuple [type=tuple{}]
 └── projections
      └── false [type=bool]

# --------------------------------------------------
# FoldIsNotNull
# --------------------------------------------------
opt
SELECT NULL IS NOT NULL, NULL IS NOT TRUE
----
project
 ├── columns: "NULL IS NOT NULL":1(bool!null) "NULL IS NOT true":2(bool!null)
 ├── cardinality: [1 - 1]
 ├── values
 │    ├── cardinality: [1 - 1]
 │    └── tuple [type=tuple{}]
 └── projections
      ├── false [type=bool]
      └── true [type=bool]

# --------------------------------------------------
# FoldNonNullIsNotNull
# --------------------------------------------------

# We could (but do not currently) infer that k IS NOT NULL is always True given
# that k is declared NOT NULL.
opt
SELECT 1 IS NOT NULL, k IS NOT NULL, i IS NOT NULL from a
----
project
 ├── columns: "1 IS NOT NULL":6(bool!null) "k IS NOT NULL":7(bool) "i IS NOT NULL":8(bool)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int)
 │    └── keys: (1)
 └── projections [outer=(1,2)]
      ├── true [type=bool]
      ├── a.k IS NOT NULL [type=bool, outer=(1)]
      └── a.i IS NOT NULL [type=bool, outer=(2)]

# --------------------------------------------------
# CommuteNullIs
# --------------------------------------------------
opt
SELECT NULL IS NOT TRUE, NULL IS TRUE
----
project
 ├── columns: "NULL IS NOT true":1(bool!null) "NULL IS true":2(bool!null)
 ├── cardinality: [1 - 1]
 ├── values
 │    ├── cardinality: [1 - 1]
 │    └── tuple [type=tuple{}]
 └── projections
      ├── true [type=bool]
      └── false [type=bool]
