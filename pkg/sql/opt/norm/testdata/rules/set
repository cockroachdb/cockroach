exec-ddl
CREATE TABLE b (k INT PRIMARY KEY, i INT, f FLOAT, s STRING NOT NULL, j JSON)
----
TABLE b
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string not null
 ├── j jsonb
 └── INDEX primary
      └── k int not null

exec-ddl
CREATE TABLE a (v INT PRIMARY KEY, w INT, x FLOAT, y STRING NOT NULL, z JSON)
----
TABLE a
 ├── v int not null
 ├── w int
 ├── x float
 ├── y string not null
 ├── z jsonb
 └── INDEX primary
      └── v int not null

# --------------------------------------------------
# EliminateUnionAllLeft
# --------------------------------------------------

opt expect=EliminateUnionAllLeft
SELECT k FROM
  (SELECT k FROM b)
  UNION ALL
  (SELECT k FROM b WHERE k IN ())
----
project
 ├── columns: k:11(int)
 ├── scan b
 │    ├── columns: b.k:1(int!null)
 │    └── key: (1)
 └── projections
      └── variable: b.k [type=int, outer=(1)]

# --------------------------------------------------
# EliminateUnionAllRight
# --------------------------------------------------

opt expect=EliminateUnionAllRight
SELECT k FROM
  (SELECT k FROM b WHERE Null)
  UNION ALL
  (SELECT k FROM b)
----
project
 ├── columns: k:11(int)
 ├── scan b
 │    ├── columns: b.k:6(int!null)
 │    └── key: (6)
 └── projections
      └── variable: b.k [type=int, outer=(6)]

opt
SELECT k FROM
  (SELECT k FROM b WHERE False)
  UNION ALL
  (SELECT k FROM b WHERE i IN ())
----
values
 ├── columns: k:11(int)
 ├── cardinality: [0 - 0]
 ├── key: ()
 └── fd: ()-->(11)

# --------------------------------------------------
# PushFilterIntoSetOp
# --------------------------------------------------

opt expect=PushFilterIntoSetOp
SELECT k FROM
  ((SELECT k FROM b)
  UNION ALL
  (SELECT k FROM b))
WHERE k < 10
----
union-all
 ├── columns: k:11(int!null)
 ├── left columns: b.k:1(int)
 ├── right columns: b.k:6(int)
 ├── scan b
 │    ├── columns: b.k:1(int!null)
 │    ├── constraint: /1: [ - /9]
 │    └── key: (1)
 └── scan b
      ├── columns: b.k:6(int!null)
      ├── constraint: /6: [ - /9]
      └── key: (6)

opt expect=PushFilterIntoSetOp
SELECT k FROM
((SELECT k FROM b)
  UNION
  (SELECT w FROM a))
WHERE k < 10 AND k > 1
----
union
 ├── columns: k:11(int!null)
 ├── left columns: b.k:1(int)
 ├── right columns: w:7(int)
 ├── key: (11)
 ├── scan b
 │    ├── columns: b.k:1(int!null)
 │    ├── constraint: /1: [/2 - /9]
 │    └── key: (1)
 └── select
      ├── columns: w:7(int!null)
      ├── scan a
      │    └── columns: w:7(int)
      └── filters
           └── (w < 10) AND (w > 1) [type=bool, outer=(7), constraints=(/7: [/2 - /9]; tight)]

opt expect=PushFilterIntoSetOp
SELECT
(SELECT k FROM
((SELECT k FROM b)
  UNION ALL
  (SELECT k FROM b))
WHERE k < w)
FROM a
----
project
 ├── columns: k:17(int)
 ├── left-join-apply
 │    ├── columns: w:2(int) k:16(int)
 │    ├── scan a
 │    │    └── columns: w:2(int)
 │    ├── max1-row
 │    │    ├── columns: k:16(int!null)
 │    │    ├── outer: (2)
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── key: ()
 │    │    ├── fd: ()-->(16)
 │    │    └── union-all
 │    │         ├── columns: k:16(int!null)
 │    │         ├── left columns: b.k:6(int)
 │    │         ├── right columns: b.k:11(int)
 │    │         ├── outer: (2)
 │    │         ├── select
 │    │         │    ├── columns: b.k:6(int!null)
 │    │         │    ├── outer: (2)
 │    │         │    ├── key: (6)
 │    │         │    ├── scan b
 │    │         │    │    ├── columns: b.k:6(int!null)
 │    │         │    │    └── key: (6)
 │    │         │    └── filters
 │    │         │         └── b.k < w [type=bool, outer=(2,6), constraints=(/2: (/NULL - ]; /6: (/NULL - ])]
 │    │         └── select
 │    │              ├── columns: b.k:11(int!null)
 │    │              ├── outer: (2)
 │    │              ├── key: (11)
 │    │              ├── scan b
 │    │              │    ├── columns: b.k:11(int!null)
 │    │              │    └── key: (11)
 │    │              └── filters
 │    │                   └── b.k < w [type=bool, outer=(2,11), constraints=(/2: (/NULL - ]; /11: (/NULL - ])]
 │    └── filters (true)
 └── projections
      └── variable: k [type=int, outer=(16)]

opt expect=PushFilterIntoSetOp
SELECT k FROM
((SELECT k FROM b)
  EXCEPT
  (SELECT w FROM a))
WHERE k < 10 AND k > 1
----
except
 ├── columns: k:1(int!null)
 ├── left columns: k:1(int!null)
 ├── right columns: w:7(int)
 ├── key: (1)
 ├── scan b
 │    ├── columns: k:1(int!null)
 │    ├── constraint: /1: [/2 - /9]
 │    └── key: (1)
 └── select
      ├── columns: w:7(int!null)
      ├── scan a
      │    └── columns: w:7(int)
      └── filters
           └── (w < 10) AND (w > 1) [type=bool, outer=(7), constraints=(/7: [/2 - /9]; tight)]

opt expect=PushFilterIntoSetOp
SELECT k FROM
((SELECT k FROM b)
  EXCEPT ALL
  (SELECT w FROM a))
WHERE k < 10 AND k > 1
----
except-all
 ├── columns: k:1(int!null)
 ├── left columns: k:1(int!null)
 ├── right columns: w:7(int)
 ├── scan b
 │    ├── columns: k:1(int!null)
 │    ├── constraint: /1: [/2 - /9]
 │    └── key: (1)
 └── select
      ├── columns: w:7(int!null)
      ├── scan a
      │    └── columns: w:7(int)
      └── filters
           └── (w < 10) AND (w > 1) [type=bool, outer=(7), constraints=(/7: [/2 - /9]; tight)]

opt expect=PushFilterIntoSetOp
SELECT k FROM
((SELECT k FROM b)
  INTERSECT
  (SELECT w FROM a))
WHERE k < 10 AND k > 1
----
intersect
 ├── columns: k:1(int!null)
 ├── left columns: k:1(int!null)
 ├── right columns: w:7(int)
 ├── key: (1)
 ├── scan b
 │    ├── columns: k:1(int!null)
 │    ├── constraint: /1: [/2 - /9]
 │    └── key: (1)
 └── select
      ├── columns: w:7(int!null)
      ├── scan a
      │    └── columns: w:7(int)
      └── filters
           └── (w < 10) AND (w > 1) [type=bool, outer=(7), constraints=(/7: [/2 - /9]; tight)]

opt expect=PushFilterIntoSetOp
SELECT k FROM
((SELECT k FROM b)
  INTERSECT ALL
  (SELECT w FROM a))
WHERE k < 10 AND k > 1
----
intersect-all
 ├── columns: k:1(int!null)
 ├── left columns: k:1(int!null)
 ├── right columns: w:7(int)
 ├── scan b
 │    ├── columns: k:1(int!null)
 │    ├── constraint: /1: [/2 - /9]
 │    └── key: (1)
 └── select
      ├── columns: w:7(int!null)
      ├── scan a
      │    └── columns: w:7(int)
      └── filters
           └── (w < 10) AND (w > 1) [type=bool, outer=(7), constraints=(/7: [/2 - /9]; tight)]
