exec-ddl
CREATE TABLE xy (x INT PRIMARY KEY, y INT)
----

# --------------------------------------------------
# ConvertZipArraysToValues
# --------------------------------------------------

# Basic case with single unzip and only constants in array.
norm expect=ConvertZipArraysToValues
SELECT unnest(ARRAY[1,2,3])
----
values
 ├── columns: unnest:1!null
 ├── cardinality: [3 - 3]
 ├── (1,)
 ├── (2,)
 └── (3,)

# Case with subquery in ProjectSet input.
norm expect=ConvertZipArraysToValues
SELECT unnest(ARRAY[1,2,3]) FROM unnest(ARRAY[4,5,6])
----
inner-join (cross)
 ├── columns: unnest:2!null
 ├── cardinality: [9 - 9]
 ├── values
 │    ├── cardinality: [3 - 3]
 │    ├── ()
 │    ├── ()
 │    └── ()
 ├── values
 │    ├── columns: unnest:2!null
 │    ├── cardinality: [3 - 3]
 │    ├── (1,)
 │    ├── (2,)
 │    └── (3,)
 └── filters (true)

# Case with correlated array.
norm expect=ConvertZipArraysToValues
SELECT unnest(ARRAY[x,y]) FROM xy
----
project
 ├── columns: unnest:3
 └── inner-join-apply
      ├── columns: x:1!null y:2 unnest:3
      ├── fd: (1)-->(2)
      ├── scan xy
      │    ├── columns: x:1!null y:2
      │    ├── key: (1)
      │    └── fd: (1)-->(2)
      ├── values
      │    ├── columns: unnest:3
      │    ├── outer: (1,2)
      │    ├── cardinality: [2 - 2]
      │    ├── (x:1,)
      │    └── (y:2,)
      └── filters (true)

# Case with correlated array in a correlated subquery.
norm expect=ConvertZipArraysToValues
SELECT * FROM xy
WHERE EXISTS
(SELECT t
  FROM unnest(ARRAY[NULL,2,NULL,4,5,x])
  AS f(t)
  WHERE t=y
)
----
semi-join-apply
 ├── columns: x:1!null y:2!null
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── scan xy
 │    ├── columns: x:1!null y:2
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 ├── values
 │    ├── columns: unnest:3
 │    ├── outer: (1)
 │    ├── cardinality: [6 - 6]
 │    ├── (NULL,)
 │    ├── (2,)
 │    ├── (NULL,)
 │    ├── (4,)
 │    ├── (5,)
 │    └── (x:1,)
 └── filters
      └── unnest:3 = y:2 [outer=(2,3), constraints=(/2: (/NULL - ]; /3: (/NULL - ]), fd=(2)==(3), (3)==(2)]

# Case with multiple arrays of different sizes.
norm expect=ConvertZipArraysToValues
SELECT unnest(ARRAY[1,2,3]), unnest(ARRAY[1,2,3,4,5,6,NULL,8,9,10]), unnest(ARRAY[]::INT[])
----
values
 ├── columns: unnest:1 unnest:2 unnest:3
 ├── cardinality: [10 - 10]
 ├── (1, 1, NULL)
 ├── (2, 2, NULL)
 ├── (3, 3, NULL)
 ├── (NULL, 4, NULL)
 ├── (NULL, 5, NULL)
 ├── (NULL, 6, NULL)
 ├── (NULL, NULL, NULL)
 ├── (NULL, 8, NULL)
 ├── (NULL, 9, NULL)
 └── (NULL, 10, NULL)

# Case with multiple arrays of different types and different sizes.
norm expect=ConvertZipArraysToValues
SELECT unnest(ARRAY['one','two','three']), unnest(ARRAY[1,2,5,6,NULL,8]), unnest(ARRAY[]::BOOL[])
----
values
 ├── columns: unnest:1 unnest:2 unnest:3
 ├── cardinality: [6 - 6]
 ├── ('one', 1, NULL)
 ├── ('two', 2, NULL)
 ├── ('three', 5, NULL)
 ├── (NULL, 6, NULL)
 ├── (NULL, NULL, NULL)
 └── (NULL, 8, NULL)

# Case with multiple empty arrays.
norm expect=ConvertZipArraysToValues
SELECT unnest(ARRAY[]::STRING[]), unnest(ARRAY[]::REAL[]), unnest(ARRAY[]::INT[])
----
values
 ├── columns: unnest:1!null unnest:2!null unnest:3!null
 ├── cardinality: [0 - 0]
 ├── key: ()
 └── fd: ()-->(1-3)

# Case with multiple correlated arrays.
norm expect=ConvertZipArraysToValues
SELECT unnest(ARRAY[x,y]), unnest(ARRAY[1,x*100]) FROM xy
----
project
 ├── columns: unnest:3 unnest:4
 └── inner-join-apply
      ├── columns: x:1!null y:2 unnest:3 unnest:4
      ├── fd: (1)-->(2)
      ├── scan xy
      │    ├── columns: x:1!null y:2
      │    ├── key: (1)
      │    └── fd: (1)-->(2)
      ├── values
      │    ├── columns: unnest:3 unnest:4
      │    ├── outer: (1,2)
      │    ├── cardinality: [2 - 2]
      │    ├── (x:1, 1)
      │    └── (y:2, x:1 * 100)
      └── filters (true)

# No-op case - ConvertZipArraysToValues fires the first time but not the
# second because the outer zip is over a variable of an array instead of an
# array.
norm expect=ConvertZipArraysToValues
SELECT unnest(x) FROM unnest(ARRAY[[1,2,3],[4,5],[6]]) AS x
----
project
 ├── columns: unnest:2
 ├── side-effects
 └── project-set
      ├── columns: unnest:1!null unnest:2
      ├── side-effects
      ├── values
      │    ├── columns: unnest:1!null
      │    ├── cardinality: [3 - 3]
      │    ├── (ARRAY[1,2,3],)
      │    ├── (ARRAY[4,5],)
      │    └── (ARRAY[6],)
      └── zip
           └── unnest(unnest:1) [outer=(1), side-effects]

# No-op case because array_agg is not an ArrayExpr or ConstExpr with a DArray.
norm expect-not=ConvertZipArraysToValues
SELECT unnest((SELECT array_agg(y) FROM xy))
----
project-set
 ├── columns: unnest:4
 ├── side-effects
 ├── values
 │    ├── cardinality: [1 - 1]
 │    ├── key: ()
 │    └── ()
 └── zip
      └── function: unnest [side-effects, subquery]
           └── subquery
                └── scalar-group-by
                     ├── columns: array_agg:3
                     ├── cardinality: [1 - 1]
                     ├── key: ()
                     ├── fd: ()-->(3)
                     ├── scan xy
                     │    └── columns: y:2
                     └── aggregations
                          └── array-agg [as=array_agg:3, outer=(2)]
                               └── y:2
