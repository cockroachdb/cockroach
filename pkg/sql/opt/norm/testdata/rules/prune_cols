exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 └── INDEX primary
      └── k int not null

exec-ddl
CREATE TABLE xy (x INT PRIMARY KEY, y INT)
----
TABLE xy
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

# --------------------------------------------------
# PruneProjectCols
# --------------------------------------------------

# Discard some of columns.
opt
SELECT k FROM (SELECT k, i+1 FROM a) a
----
scan a
 ├── columns: k:1(int!null)
 └── keys: (1)

# Discard all columns.
opt
SELECT 1 FROM (SELECT i+1, k FROM a) a
----
project
 ├── columns: column6:6(int)
 ├── scan a
 └── projections
      └── const: 1 [type=int]

# Use column values within computed column.
opt
SELECT k+i FROM (SELECT i, k, s || 'foo' FROM a) a
----
project
 ├── columns: column6:6(int)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    └── keys: (1)
 └── projections [outer=(1,2)]
      └── plus [type=int, outer=(1,2)]
           ├── variable: a.k [type=int, outer=(1)]
           └── variable: a.i [type=int, outer=(2)]

# Discard non-computed columns and keep computed column.
opt
SELECT l, k FROM (SELECT length(s) l, * FROM a) a
----
project
 ├── columns: l:5(int) k:1(int!null)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.s:4(string)
 │    └── keys: (1)
 └── projections [outer=(1,4)]
      ├── function: length [type=int, outer=(4)]
      │    └── variable: a.s [type=string, outer=(4)]
      └── variable: a.k [type=int, outer=(1)]

# Compute column based on another computed column.
opt
SELECT l*l, k FROM (SELECT k, length(s) l, i FROM a) a
----
project
 ├── columns: column6:6(int) k:1(int!null)
 ├── keys: (1)
 ├── project
 │    ├── columns: a.k:1(int!null) l:5(int)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.s:4(string)
 │    │    └── keys: (1)
 │    └── projections [outer=(1,4)]
 │         ├── variable: a.k [type=int, outer=(1)]
 │         └── function: length [type=int, outer=(4)]
 │              └── variable: a.s [type=string, outer=(4)]
 └── projections [outer=(1,5)]
      ├── mult [type=int, outer=(5)]
      │    ├── variable: l [type=int, outer=(5)]
      │    └── variable: l [type=int, outer=(5)]
      └── variable: a.k [type=int, outer=(1)]

# --------------------------------------------------
# PruneScanCols
# --------------------------------------------------

# Project subset of columns.
opt
SELECT k FROM a
----
scan a
 ├── columns: k:1(int!null)
 └── keys: (1)

# Project subset of columns, some used in computed columns.
opt
SELECT k, k+1, i+1 FROM a
----
project
 ├── columns: k:1(int!null) column5:5(int) column6:6(int)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    └── keys: (1)
 └── projections [outer=(1,2)]
      ├── variable: a.k [type=int, outer=(1)]
      ├── plus [type=int, outer=(1)]
      │    ├── variable: a.k [type=int, outer=(1)]
      │    └── const: 1 [type=int]
      └── plus [type=int, outer=(2)]
           ├── variable: a.i [type=int, outer=(2)]
           └── const: 1 [type=int]

# Use columns only in computed columns.
opt
SELECT k+i FROM a
----
project
 ├── columns: column5:5(int)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    └── keys: (1)
 └── projections [outer=(1,2)]
      └── plus [type=int, outer=(1,2)]
           ├── variable: a.k [type=int, outer=(1)]
           └── variable: a.i [type=int, outer=(2)]

# Use no scan columns.
opt
SELECT 1 FROM a
----
project
 ├── columns: column5:5(int)
 ├── scan a
 └── projections
      └── const: 1 [type=int]

# --------------------------------------------------
# PruneSelectCols
# --------------------------------------------------

# Columns used only by projection or filter, but not both.
opt
SELECT k FROM a WHERE i<5
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 ├── select
 │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - /4]; tight)]
 │         └── lt [type=bool, outer=(2), constraints=(/2: (/NULL - /4]; tight)]
 │              ├── variable: a.i [type=int, outer=(2)]
 │              └── const: 5 [type=int]
 └── projections [outer=(1)]
      └── variable: a.k [type=int, outer=(1)]

# Columns used by both projection and filter.
opt
SELECT k, i FROM a WHERE k=1 AND i<5
----
select
 ├── columns: k:1(int!null) i:2(int)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    ├── constraint: /1: [/1 - /1]
 │    └── keys: (1)
 └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - /4]; tight)]
      └── lt [type=bool, outer=(2), constraints=(/2: (/NULL - /4]; tight)]
           ├── variable: a.i [type=int, outer=(2)]
           └── const: 5 [type=int]

# No needed select columns.
opt
SELECT 1 FROM a WHERE now()<'2000-01-01T02:00:00'::timestamp
----
project
 ├── columns: column5:5(int)
 ├── select
 │    ├── scan a
 │    └── filters [type=bool]
 │         └── lt [type=bool]
 │              ├── function: now [type=timestamptz]
 │              └── const: '2000-01-01 02:00:00+00:00' [type=timestamp]
 └── projections
      └── const: 1 [type=int]

# Select columns used in computed columns.
opt
SELECT i-1, k*k FROM a WHERE k+1<5 AND s||'o'='foo'
----
project
 ├── columns: column5:5(int) column6:6(int)
 ├── select
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(1,4)]
 │         ├── lt [type=bool, outer=(1)]
 │         │    ├── variable: a.k [type=int, outer=(1)]
 │         │    └── minus [type=int]
 │         │         ├── const: 5 [type=int]
 │         │         └── const: 1 [type=int]
 │         └── eq [type=bool, outer=(4)]
 │              ├── concat [type=string, outer=(4)]
 │              │    ├── variable: a.s [type=string, outer=(4)]
 │              │    └── const: 'o' [type=string]
 │              └── const: 'foo' [type=string]
 └── projections [outer=(1,2)]
      ├── minus [type=int, outer=(2)]
      │    ├── variable: a.i [type=int, outer=(2)]
      │    └── const: 1 [type=int]
      └── mult [type=int, outer=(1)]
           ├── variable: a.k [type=int, outer=(1)]
           └── variable: a.k [type=int, outer=(1)]

# Select nested in select.
opt
SELECT i FROM (SELECT k, i, s, f/2.0 f FROM a WHERE k = 5) a2 WHERE i::float = f
----
project
 ├── columns: i:2(int)
 ├── select
 │    ├── columns: a.i:2(int) f:5(float)
 │    ├── project
 │    │    ├── columns: a.i:2(int) f:5(float)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.f:3(float)
 │    │    │    ├── constraint: /1: [/5 - /5]
 │    │    │    └── keys: (1)
 │    │    └── projections [outer=(2,3)]
 │    │         ├── variable: a.i [type=int, outer=(2)]
 │    │         └── div [type=float, outer=(3)]
 │    │              ├── variable: a.f [type=float, outer=(3)]
 │    │              └── const: 2.0 [type=float]
 │    └── filters [type=bool, outer=(2,5)]
 │         └── eq [type=bool, outer=(2,5)]
 │              ├── variable: f [type=float, outer=(5)]
 │              └── cast: float [type=float, outer=(2)]
 │                   └── variable: a.i [type=int, outer=(2)]
 └── projections [outer=(2)]
      └── variable: a.i [type=int, outer=(2)]

# Detect PruneSelectCols and PushSelectIntoProject dependency cycle.
opt
SELECT f, f+1.1 FROM (SELECT f, k FROM a GROUP BY f, k HAVING SUM(k)=100) a
----
project
 ├── columns: f:3(float) column6:6(float)
 ├── select
 │    ├── columns: a.k:1(int!null) a.f:3(float) column5:5(decimal)
 │    ├── keys: (1)
 │    ├── group-by
 │    │    ├── columns: a.k:1(int!null) a.f:3(float) column5:5(decimal)
 │    │    ├── grouping columns: a.k:1(int!null) a.f:3(float)
 │    │    ├── keys: (1)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:1(int!null) a.f:3(float)
 │    │    │    └── keys: (1)
 │    │    └── aggregations [outer=(1)]
 │    │         └── sum [type=decimal, outer=(1)]
 │    │              └── variable: a.k [type=int, outer=(1)]
 │    └── filters [type=bool, outer=(5), constraints=(/5: [/100 - /100]; tight)]
 │         └── eq [type=bool, outer=(5), constraints=(/5: [/100 - /100]; tight)]
 │              ├── variable: column5 [type=decimal, outer=(5)]
 │              └── const: 100 [type=decimal]
 └── projections [outer=(3)]
      ├── variable: a.f [type=float, outer=(3)]
      └── plus [type=float, outer=(3)]
           ├── variable: a.f [type=float, outer=(3)]
           └── const: 1.1 [type=float]

# --------------------------------------------------
# PruneLimitCols
# --------------------------------------------------

# The projection on top of Limit should trickle down and we shouldn't scan f.
opt
SELECT k FROM (SELECT k, i, f FROM a ORDER BY i LIMIT 10)
----
project
 ├── columns: k:1(int!null)
 ├── cardinality: [0 - 10]
 ├── keys: (1)
 ├── limit
 │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    ├── cardinality: [0 - 10]
 │    ├── keys: (1)
 │    ├── sort
 │    │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    │    ├── keys: (1)
 │    │    ├── ordering: +2
 │    │    └── scan a
 │    │         ├── columns: a.k:1(int!null) a.i:2(int)
 │    │         └── keys: (1)
 │    └── const: 10 [type=int]
 └── projections [outer=(1)]
      └── variable: a.k [type=int, outer=(1)]

# We should scan k, i, s.
opt
SELECT s FROM (SELECT k, i, f, s FROM a ORDER BY k, i LIMIT 10)
----
project
 ├── columns: s:4(string)
 ├── cardinality: [0 - 10]
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    ├── limit: 10
 │    └── keys: (1)
 └── projections [outer=(4)]
      └── variable: a.s [type=string, outer=(4)]

# We should scan k, i, s.
opt
SELECT k, s FROM (SELECT k, i, f, s FROM a ORDER BY k, i LIMIT 10)
----
project
 ├── columns: k:1(int!null) s:4(string)
 ├── cardinality: [0 - 10]
 ├── keys: (1)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    ├── limit: 10
 │    └── keys: (1)
 └── projections [outer=(1,4)]
      ├── variable: a.k [type=int, outer=(1)]
      └── variable: a.s [type=string, outer=(4)]

# Project uses subset of Limit columns, but no additional Project should be
# introduced to tree, because it can't be pushed down to Scan.
opt
SELECT f, f*2.0 FROM (SELECT f, s FROM a GROUP BY f, s LIMIT 5) a
----
project
 ├── columns: f:3(float) column5:5(float)
 ├── cardinality: [0 - 5]
 ├── limit
 │    ├── columns: a.f:3(float) a.s:4(string)
 │    ├── cardinality: [0 - 5]
 │    ├── keys: weak(3,4)
 │    ├── group-by
 │    │    ├── columns: a.f:3(float) a.s:4(string)
 │    │    ├── grouping columns: a.f:3(float) a.s:4(string)
 │    │    ├── keys: weak(3,4)
 │    │    ├── scan a
 │    │    │    └── columns: a.f:3(float) a.s:4(string)
 │    │    └── aggregations
 │    └── const: 5 [type=int]
 └── projections [outer=(3)]
      ├── variable: a.f [type=float, outer=(3)]
      └── mult [type=float, outer=(3)]
           ├── variable: a.f [type=float, outer=(3)]
           └── const: 2.0 [type=float]

# --------------------------------------------------
# PruneOffsetCols
# --------------------------------------------------

opt
SELECT k FROM (SELECT k, i, f FROM a ORDER BY i OFFSET 10)
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 ├── offset
 │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    ├── keys: (1)
 │    ├── sort
 │    │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    │    ├── keys: (1)
 │    │    ├── ordering: +2
 │    │    └── scan a
 │    │         ├── columns: a.k:1(int!null) a.i:2(int)
 │    │         └── keys: (1)
 │    └── const: 10 [type=int]
 └── projections [outer=(1)]
      └── variable: a.k [type=int, outer=(1)]

# We should scan k, i, s.
opt
SELECT s FROM (SELECT k, i, f, s FROM a ORDER BY k, i OFFSET 10)
----
project
 ├── columns: s:4(string)
 ├── offset
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    │    ├── keys: (1)
 │    │    └── ordering: +1,+2
 │    └── const: 10 [type=int]
 └── projections [outer=(4)]
      └── variable: a.s [type=string, outer=(4)]

# We should scan k, i, s.
opt
SELECT k, s FROM (SELECT k, i, f, s FROM a ORDER BY k, i OFFSET 10)
----
project
 ├── columns: k:1(int!null) s:4(string)
 ├── keys: (1)
 ├── offset
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    │    ├── keys: (1)
 │    │    └── ordering: +1,+2
 │    └── const: 10 [type=int]
 └── projections [outer=(1,4)]
      ├── variable: a.k [type=int, outer=(1)]
      └── variable: a.s [type=string, outer=(4)]

# Project uses subset of Offset columns, but no additional Project should be
# introduced to tree, because it can't be pushed down past Explain.
opt
SELECT "Tree", "Columns"
FROM
(
    SELECT *
    FROM [ EXPLAIN (VERBOSE) SELECT * FROM a ]
    ORDER BY "Tree"
    OFFSET 1
)
----
project
 ├── columns: Tree:5(string) Columns:10(string)
 ├── offset
 │    ├── columns: Tree:5(string) Level:6(int) Type:7(string) Field:8(string) Description:9(string) Columns:10(string) Ordering:11(string)
 │    ├── sort
 │    │    ├── columns: Tree:5(string) Level:6(int) Type:7(string) Field:8(string) Description:9(string) Columns:10(string) Ordering:11(string)
 │    │    ├── ordering: +5
 │    │    └── explain
 │    │         ├── columns: Tree:5(string) Level:6(int) Type:7(string) Field:8(string) Description:9(string) Columns:10(string) Ordering:11(string)
 │    │         └── scan a
 │    │              ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 │    │              └── keys: (1)
 │    └── const: 1 [type=int]
 └── projections [outer=(5,10)]
      ├── variable: Tree [type=string, outer=(5)]
      └── variable: Columns [type=string, outer=(10)]

# --------------------------------------------------
# PruneLimitCols + PruneOffsetCols
# --------------------------------------------------

opt
SELECT k FROM (SELECT k, i, f FROM a ORDER BY i LIMIT 10 OFFSET 10)
----
project
 ├── columns: k:1(int!null)
 ├── cardinality: [0 - 10]
 ├── keys: (1)
 ├── limit
 │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    ├── cardinality: [0 - 10]
 │    ├── keys: (1)
 │    ├── offset
 │    │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    │    ├── keys: (1)
 │    │    ├── ordering: +2
 │    │    ├── sort
 │    │    │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    │    │    ├── keys: (1)
 │    │    │    ├── ordering: +2
 │    │    │    └── scan a
 │    │    │         ├── columns: a.k:1(int!null) a.i:2(int)
 │    │    │         └── keys: (1)
 │    │    └── const: 10 [type=int]
 │    └── const: 10 [type=int]
 └── projections [outer=(1)]
      └── variable: a.k [type=int, outer=(1)]

# We should scan k, i, s.
opt
SELECT s FROM (SELECT k, i, f, s FROM a ORDER BY k, i LIMIT 10 OFFSET 10)
----
project
 ├── columns: s:4(string)
 ├── cardinality: [0 - 10]
 ├── limit
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    ├── cardinality: [0 - 10]
 │    ├── keys: (1)
 │    ├── offset
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    │    ├── keys: (1)
 │    │    ├── ordering: +1,+2
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    │    │    ├── keys: (1)
 │    │    │    └── ordering: +1,+2
 │    │    └── const: 10 [type=int]
 │    └── const: 10 [type=int]
 └── projections [outer=(4)]
      └── variable: a.s [type=string, outer=(4)]

# We should scan k, i, s.
opt
SELECT k, s FROM (SELECT k, i, f, s FROM a ORDER BY k, i LIMIT 10 OFFSET 10)
----
project
 ├── columns: k:1(int!null) s:4(string)
 ├── cardinality: [0 - 10]
 ├── keys: (1)
 ├── limit
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    ├── cardinality: [0 - 10]
 │    ├── keys: (1)
 │    ├── offset
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    │    ├── keys: (1)
 │    │    ├── ordering: +1,+2
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    │    │    ├── keys: (1)
 │    │    │    └── ordering: +1,+2
 │    │    └── const: 10 [type=int]
 │    └── const: 10 [type=int]
 └── projections [outer=(1,4)]
      ├── variable: a.k [type=int, outer=(1)]
      └── variable: a.s [type=string, outer=(4)]

# Project filter offset/limit columns, but can't push all the way down to scan.
opt
SELECT f, f*2.0 FROM (SELECT f, s FROM a GROUP BY f, s OFFSET 5 LIMIT 5) a
----
project
 ├── columns: f:3(float) column5:5(float)
 ├── cardinality: [0 - 5]
 ├── limit
 │    ├── columns: a.f:3(float) a.s:4(string)
 │    ├── cardinality: [0 - 5]
 │    ├── keys: weak(3,4)
 │    ├── offset
 │    │    ├── columns: a.f:3(float) a.s:4(string)
 │    │    ├── keys: weak(3,4)
 │    │    ├── group-by
 │    │    │    ├── columns: a.f:3(float) a.s:4(string)
 │    │    │    ├── grouping columns: a.f:3(float) a.s:4(string)
 │    │    │    ├── keys: weak(3,4)
 │    │    │    ├── scan a
 │    │    │    │    └── columns: a.f:3(float) a.s:4(string)
 │    │    │    └── aggregations
 │    │    └── const: 5 [type=int]
 │    └── const: 5 [type=int]
 └── projections [outer=(3)]
      ├── variable: a.f [type=float, outer=(3)]
      └── mult [type=float, outer=(3)]
           ├── variable: a.f [type=float, outer=(3)]
           └── const: 2.0 [type=float]

# --------------------------------------------------
# PruneJoinLeftCols
# --------------------------------------------------

# Columns used only by projection or on condition, but not both.
opt
SELECT a.i, xy.* FROM a INNER JOIN xy ON a.k=xy.x
----
project
 ├── columns: i:2(int) x:5(int!null) y:6(int)
 ├── inner-join
 │    ├── columns: a.k:1(int!null) a.i:2(int) xy.x:5(int!null) xy.y:6(int)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    │    └── keys: (1)
 │    ├── scan xy
 │    │    ├── columns: xy.x:5(int!null) xy.y:6(int)
 │    │    └── keys: (5)
 │    └── filters [type=bool, outer=(1,5)]
 │         └── eq [type=bool, outer=(1,5)]
 │              ├── variable: a.k [type=int, outer=(1)]
 │              └── variable: xy.x [type=int, outer=(5)]
 └── projections [outer=(2,5,6)]
      ├── variable: a.i [type=int, outer=(2)]
      ├── variable: xy.x [type=int, outer=(5)]
      └── variable: xy.y [type=int, outer=(6)]

# Columns used by both projection and on condition, left join.
opt
SELECT a.k, a.i, xy.* FROM a LEFT JOIN xy ON a.k=xy.x AND a.i<5
----
left-join
 ├── columns: k:1(int!null) i:2(int) x:5(int) y:6(int)
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    └── keys: (1)
 ├── scan xy
 │    ├── columns: xy.x:5(int!null) xy.y:6(int)
 │    └── keys: (5)
 └── filters [type=bool, outer=(1,2,5), constraints=(/2: (/NULL - /4])]
      ├── eq [type=bool, outer=(1,5)]
      │    ├── variable: a.k [type=int, outer=(1)]
      │    └── variable: xy.x [type=int, outer=(5)]
      └── lt [type=bool, outer=(2), constraints=(/2: (/NULL - /4]; tight)]
           ├── variable: a.i [type=int, outer=(2)]
           └── const: 5 [type=int]

# Columns only used by on condition, right join
opt
SELECT xy.* FROM a RIGHT JOIN xy ON a.k=xy.x
----
project
 ├── columns: x:5(int!null) y:6(int)
 ├── right-join
 │    ├── columns: a.k:1(int) xy.x:5(int!null) xy.y:6(int)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null)
 │    │    └── keys: (1)
 │    ├── scan xy
 │    │    ├── columns: xy.x:5(int!null) xy.y:6(int)
 │    │    └── keys: (5)
 │    └── filters [type=bool, outer=(1,5)]
 │         └── eq [type=bool, outer=(1,5)]
 │              ├── variable: a.k [type=int, outer=(1)]
 │              └── variable: xy.x [type=int, outer=(5)]
 └── projections [outer=(5,6)]
      ├── variable: xy.x [type=int, outer=(5)]
      └── variable: xy.y [type=int, outer=(6)]

# Columns needed only by projection, full join.
opt
SELECT a.k+1, xy.* FROM a FULL JOIN xy ON True
----
project
 ├── columns: column7:7(int) x:5(int) y:6(int)
 ├── full-join
 │    ├── columns: a.k:1(int) xy.x:5(int) xy.y:6(int)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null)
 │    │    └── keys: (1)
 │    ├── scan xy
 │    │    ├── columns: xy.x:5(int!null) xy.y:6(int)
 │    │    └── keys: (5)
 │    └── true [type=bool]
 └── projections [outer=(1,5,6)]
      ├── plus [type=int, outer=(1)]
      │    ├── variable: a.k [type=int, outer=(1)]
      │    └── const: 1 [type=int]
      ├── variable: xy.x [type=int, outer=(5)]
      └── variable: xy.y [type=int, outer=(6)]

# No columns needed from left side of join.
opt
SELECT xy.* FROM a, xy
----
inner-join
 ├── columns: x:5(int!null) y:6(int)
 ├── scan a
 ├── scan xy
 │    ├── columns: xy.x:5(int!null) xy.y:6(int)
 │    └── keys: (5)
 └── true [type=bool]

# Computed columns.
opt
SELECT a.k+1, a.i/2, xy.* FROM a INNER JOIN xy ON a.k*a.k=xy.x AND a.s||'o'='foo'
----
project
 ├── columns: column7:7(int) column8:8(decimal) x:5(int!null) y:6(int)
 ├── inner-join
 │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string) xy.x:5(int!null) xy.y:6(int)
 │    ├── select
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    │    ├── keys: (1)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    │    │    └── keys: (1)
 │    │    └── filters [type=bool, outer=(4)]
 │    │         └── eq [type=bool, outer=(4)]
 │    │              ├── concat [type=string, outer=(4)]
 │    │              │    ├── variable: a.s [type=string, outer=(4)]
 │    │              │    └── const: 'o' [type=string]
 │    │              └── const: 'foo' [type=string]
 │    ├── scan xy
 │    │    ├── columns: xy.x:5(int!null) xy.y:6(int)
 │    │    └── keys: (5)
 │    └── filters [type=bool, outer=(1,5)]
 │         └── eq [type=bool, outer=(1,5)]
 │              ├── variable: xy.x [type=int, outer=(5)]
 │              └── mult [type=int, outer=(1)]
 │                   ├── variable: a.k [type=int, outer=(1)]
 │                   └── variable: a.k [type=int, outer=(1)]
 └── projections [outer=(1,2,5,6)]
      ├── plus [type=int, outer=(1)]
      │    ├── variable: a.k [type=int, outer=(1)]
      │    └── const: 1 [type=int]
      ├── div [type=decimal, outer=(2)]
      │    ├── variable: a.i [type=int, outer=(2)]
      │    └── const: 2 [type=int]
      ├── variable: xy.x [type=int, outer=(5)]
      └── variable: xy.y [type=int, outer=(6)]

# Join that is nested in another join.
opt
SELECT a.k, xy.*
FROM
(
    SELECT * FROM a INNER JOIN xy ON a.k=xy.x
) a
INNER JOIN xy
ON a.i < xy.y
----
project
 ├── columns: k:1(int!null) x:7(int!null) y:8(int)
 ├── inner-join
 │    ├── columns: a.k:1(int!null) a.i:2(int) xy.x:5(int!null) xy.x:7(int!null) xy.y:8(int)
 │    ├── inner-join
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) xy.x:5(int!null)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    │    │    └── keys: (1)
 │    │    ├── scan xy
 │    │    │    ├── columns: xy.x:5(int!null)
 │    │    │    └── keys: (5)
 │    │    └── filters [type=bool, outer=(1,5)]
 │    │         └── eq [type=bool, outer=(1,5)]
 │    │              ├── variable: a.k [type=int, outer=(1)]
 │    │              └── variable: xy.x [type=int, outer=(5)]
 │    ├── scan xy
 │    │    ├── columns: xy.x:7(int!null) xy.y:8(int)
 │    │    └── keys: (7)
 │    └── filters [type=bool, outer=(2,8)]
 │         └── lt [type=bool, outer=(2,8)]
 │              ├── variable: a.i [type=int, outer=(2)]
 │              └── variable: xy.y [type=int, outer=(8)]
 └── projections [outer=(1,7,8)]
      ├── variable: a.k [type=int, outer=(1)]
      ├── variable: xy.x [type=int, outer=(7)]
      └── variable: xy.y [type=int, outer=(8)]

# --------------------------------------------------
# PruneJoinRightCols
# --------------------------------------------------

# Columns used only by projection or on condition, but not both.
opt
SELECT xy.*, a.i FROM xy INNER JOIN a ON xy.x=a.k
----
project
 ├── columns: x:1(int!null) y:2(int) i:4(int)
 ├── inner-join
 │    ├── columns: xy.x:1(int!null) xy.y:2(int) a.k:3(int!null) a.i:4(int)
 │    ├── scan xy
 │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
 │    │    └── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:3(int!null) a.i:4(int)
 │    │    └── keys: (3)
 │    └── filters [type=bool, outer=(1,3)]
 │         └── eq [type=bool, outer=(1,3)]
 │              ├── variable: xy.x [type=int, outer=(1)]
 │              └── variable: a.k [type=int, outer=(3)]
 └── projections [outer=(1,2,4)]
      ├── variable: xy.x [type=int, outer=(1)]
      ├── variable: xy.y [type=int, outer=(2)]
      └── variable: a.i [type=int, outer=(4)]

# Columns used by both projection and on condition, left join.
opt
SELECT xy.*, a.k, a.i FROM xy LEFT JOIN a ON xy.x=a.k AND a.i<xy.x
----
left-join
 ├── columns: x:1(int!null) y:2(int) k:3(int) i:4(int)
 ├── scan xy
 │    ├── columns: xy.x:1(int!null) xy.y:2(int)
 │    └── keys: (1)
 ├── scan a
 │    ├── columns: a.k:3(int!null) a.i:4(int)
 │    └── keys: (3)
 └── filters [type=bool, outer=(1,3,4)]
      ├── eq [type=bool, outer=(1,3)]
      │    ├── variable: xy.x [type=int, outer=(1)]
      │    └── variable: a.k [type=int, outer=(3)]
      └── lt [type=bool, outer=(1,4)]
           ├── variable: a.i [type=int, outer=(4)]
           └── variable: xy.x [type=int, outer=(1)]

# Columns only used by on condition, right join
opt
SELECT xy.* FROM xy RIGHT JOIN a ON xy.x=a.k
----
project
 ├── columns: x:1(int) y:2(int)
 ├── right-join
 │    ├── columns: xy.x:1(int) xy.y:2(int) a.k:3(int!null)
 │    ├── scan xy
 │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
 │    │    └── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:3(int!null)
 │    │    └── keys: (3)
 │    └── filters [type=bool, outer=(1,3)]
 │         └── eq [type=bool, outer=(1,3)]
 │              ├── variable: xy.x [type=int, outer=(1)]
 │              └── variable: a.k [type=int, outer=(3)]
 └── projections [outer=(1,2)]
      ├── variable: xy.x [type=int, outer=(1)]
      └── variable: xy.y [type=int, outer=(2)]

# Columns needed only by projection, full join.
opt
SELECT xy.*, a.k+1 FROM xy FULL JOIN a ON True
----
project
 ├── columns: x:1(int) y:2(int) column7:7(int)
 ├── full-join
 │    ├── columns: xy.x:1(int) xy.y:2(int) a.k:3(int)
 │    ├── scan xy
 │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
 │    │    └── keys: (1)
 │    ├── scan a
 │    │    ├── columns: a.k:3(int!null)
 │    │    └── keys: (3)
 │    └── true [type=bool]
 └── projections [outer=(1-3)]
      ├── variable: xy.x [type=int, outer=(1)]
      ├── variable: xy.y [type=int, outer=(2)]
      └── plus [type=int, outer=(3)]
           ├── variable: a.k [type=int, outer=(3)]
           └── const: 1 [type=int]

# No columns needed from right side of join.
opt
SELECT xy.* FROM xy, a
----
inner-join
 ├── columns: x:1(int!null) y:2(int)
 ├── scan xy
 │    ├── columns: xy.x:1(int!null) xy.y:2(int)
 │    └── keys: (1)
 ├── scan a
 └── true [type=bool]

# Computed columns.
opt
SELECT xy.*, a.k+1, a.i/2 FROM xy INNER JOIN a ON xy.x=a.k*a.k AND a.s||'o'='foo'
----
project
 ├── columns: x:1(int!null) y:2(int) column7:7(int) column8:8(decimal)
 ├── inner-join
 │    ├── columns: xy.x:1(int!null) xy.y:2(int) a.k:3(int!null) a.i:4(int) a.s:6(string)
 │    ├── scan xy
 │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
 │    │    └── keys: (1)
 │    ├── select
 │    │    ├── columns: a.k:3(int!null) a.i:4(int) a.s:6(string)
 │    │    ├── keys: (3)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:3(int!null) a.i:4(int) a.s:6(string)
 │    │    │    └── keys: (3)
 │    │    └── filters [type=bool, outer=(6)]
 │    │         └── eq [type=bool, outer=(6)]
 │    │              ├── concat [type=string, outer=(6)]
 │    │              │    ├── variable: a.s [type=string, outer=(6)]
 │    │              │    └── const: 'o' [type=string]
 │    │              └── const: 'foo' [type=string]
 │    └── filters [type=bool, outer=(1,3)]
 │         └── eq [type=bool, outer=(1,3)]
 │              ├── variable: xy.x [type=int, outer=(1)]
 │              └── mult [type=int, outer=(3)]
 │                   ├── variable: a.k [type=int, outer=(3)]
 │                   └── variable: a.k [type=int, outer=(3)]
 └── projections [outer=(1-4)]
      ├── variable: xy.x [type=int, outer=(1)]
      ├── variable: xy.y [type=int, outer=(2)]
      ├── plus [type=int, outer=(3)]
      │    ├── variable: a.k [type=int, outer=(3)]
      │    └── const: 1 [type=int]
      └── div [type=decimal, outer=(4)]
           ├── variable: a.i [type=int, outer=(4)]
           └── const: 2 [type=int]

# Join that is nested in another join.
opt
SELECT a.k, xy.*
FROM xy
INNER JOIN
(
    SELECT * FROM a INNER JOIN xy ON a.k=xy.x
) a
ON a.y < xy.y
----
project
 ├── columns: k:3(int!null) x:1(int!null) y:2(int)
 ├── inner-join
 │    ├── columns: xy.x:1(int!null) xy.y:2(int) a.k:3(int!null) xy.x:7(int!null) xy.y:8(int)
 │    ├── scan xy
 │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
 │    │    └── keys: (1)
 │    ├── inner-join
 │    │    ├── columns: a.k:3(int!null) xy.x:7(int!null) xy.y:8(int)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:3(int!null)
 │    │    │    └── keys: (3)
 │    │    ├── scan xy
 │    │    │    ├── columns: xy.x:7(int!null) xy.y:8(int)
 │    │    │    └── keys: (7)
 │    │    └── filters [type=bool, outer=(3,7)]
 │    │         └── eq [type=bool, outer=(3,7)]
 │    │              ├── variable: a.k [type=int, outer=(3)]
 │    │              └── variable: xy.x [type=int, outer=(7)]
 │    └── filters [type=bool, outer=(2,8)]
 │         └── lt [type=bool, outer=(2,8)]
 │              ├── variable: xy.y [type=int, outer=(8)]
 │              └── variable: xy.y [type=int, outer=(2)]
 └── projections [outer=(1-3)]
      ├── variable: a.k [type=int, outer=(3)]
      ├── variable: xy.x [type=int, outer=(1)]
      └── variable: xy.y [type=int, outer=(2)]

# --------------------------------------------------
# PruneJoinLeftCols + PruneJoinRightCols
# --------------------------------------------------

# Columns not needed by either side of join.
opt
SELECT 1 FROM a,xy
----
project
 ├── columns: column7:7(int)
 ├── inner-join
 │    ├── scan a
 │    ├── scan xy
 │    └── true [type=bool]
 └── projections
      └── const: 1 [type=int]

# Subset of columns needed by each side of join.
opt
SELECT a.k, xy.x, a.k+xy.x FROM a LEFT JOIN xy ON a.k=xy.x
----
project
 ├── columns: k:1(int!null) x:5(int) column7:7(int)
 ├── left-join
 │    ├── columns: a.k:1(int!null) xy.x:5(int)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null)
 │    │    └── keys: (1)
 │    ├── scan xy
 │    │    ├── columns: xy.x:5(int!null)
 │    │    └── keys: (5)
 │    └── filters [type=bool, outer=(1,5)]
 │         └── eq [type=bool, outer=(1,5)]
 │              ├── variable: a.k [type=int, outer=(1)]
 │              └── variable: xy.x [type=int, outer=(5)]
 └── projections [outer=(1,5)]
      ├── variable: a.k [type=int, outer=(1)]
      ├── variable: xy.x [type=int, outer=(5)]
      └── plus [type=int, outer=(1,5)]
           ├── variable: a.k [type=int, outer=(1)]
           └── variable: xy.x [type=int, outer=(5)]

# --------------------------------------------------
# PruneAggCols
# --------------------------------------------------

# Discard all aggregates.
opt
SELECT s FROM (SELECT s, SUM(i), MIN(s||'foo') FROM a GROUP BY s) a
----
group-by
 ├── columns: s:4(string)
 ├── grouping columns: a.s:4(string)
 ├── keys: weak(4)
 ├── scan a
 │    └── columns: a.s:4(string)
 └── aggregations

# Discard subset of aggregates.
opt
SELECT s, sumi FROM (SELECT SUM(i) sumi, s, MIN(s||'foo') FROM a GROUP BY s) a
----
group-by
 ├── columns: s:4(string) sumi:5(decimal)
 ├── grouping columns: a.s:4(string)
 ├── keys: weak(4)
 ├── scan a
 │    └── columns: a.i:2(int) a.s:4(string)
 └── aggregations [outer=(2)]
      └── sum [type=decimal, outer=(2)]
           └── variable: a.i [type=int, outer=(2)]

# No aggregates to discard.
opt
SELECT 1 FROM (SELECT s FROM a GROUP BY s) a
----
project
 ├── columns: column5:5(int)
 ├── group-by
 │    ├── columns: a.s:4(string)
 │    ├── grouping columns: a.s:4(string)
 │    ├── keys: weak(4)
 │    ├── scan a
 │    │    └── columns: a.s:4(string)
 │    └── aggregations
 └── projections
      └── const: 1 [type=int]

# --------------------------------------------------
# PruneGroupByCols
# --------------------------------------------------

# Columns used by grouping or aggregation, but not both.
opt
SELECT s, SUM(i) FROM a GROUP BY s
----
group-by
 ├── columns: s:4(string) column5:5(decimal)
 ├── grouping columns: a.s:4(string)
 ├── keys: weak(4)
 ├── scan a
 │    └── columns: a.i:2(int) a.s:4(string)
 └── aggregations [outer=(2)]
      └── sum [type=decimal, outer=(2)]
           └── variable: a.i [type=int, outer=(2)]

# Columns used by both grouping and aggregation.
opt
SELECT AVG(s::int+i), s, i FROM a GROUP BY s, i
----
group-by
 ├── columns: column6:6(decimal) s:4(string) i:2(int)
 ├── grouping columns: a.i:2(int) a.s:4(string)
 ├── keys: weak(2,4)
 ├── project
 │    ├── columns: a.s:4(string) a.i:2(int) column5:5(int)
 │    ├── scan a
 │    │    └── columns: a.i:2(int) a.s:4(string)
 │    └── projections [outer=(2,4)]
 │         ├── variable: a.s [type=string, outer=(4)]
 │         ├── variable: a.i [type=int, outer=(2)]
 │         └── plus [type=int, outer=(2,4)]
 │              ├── variable: a.i [type=int, outer=(2)]
 │              └── cast: int [type=int, outer=(4)]
 │                   └── variable: a.s [type=string, outer=(4)]
 └── aggregations [outer=(5)]
      └── avg [type=decimal, outer=(5)]
           └── variable: column5 [type=int, outer=(5)]

# Columns used only by aggregation, no grouping columns.
opt
SELECT MIN(i), MAX(k), MAX(k) FROM a
----
group-by
 ├── columns: column5:5(int) column6:6(int) column6:6(int)
 ├── cardinality: [1 - 1]
 ├── scan a
 │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    └── keys: (1)
 └── aggregations [outer=(1,2)]
      ├── min [type=int, outer=(2)]
      │    └── variable: a.i [type=int, outer=(2)]
      └── max [type=int, outer=(1)]
           └── variable: a.k [type=int, outer=(1)]

# Columns used only by groupings, no aggregation columns.
opt
SELECT s, i+1 FROM a GROUP BY i, s
----
project
 ├── columns: s:4(string) column5:5(int)
 ├── group-by
 │    ├── columns: a.i:2(int) a.s:4(string)
 │    ├── grouping columns: a.i:2(int) a.s:4(string)
 │    ├── keys: weak(2,4)
 │    ├── scan a
 │    │    └── columns: a.i:2(int) a.s:4(string)
 │    └── aggregations
 └── projections [outer=(2,4)]
      ├── variable: a.s [type=string, outer=(4)]
      └── plus [type=int, outer=(2)]
           ├── variable: a.i [type=int, outer=(2)]
           └── const: 1 [type=int]

# Groupby a groupby.
opt
SELECT MIN(sm), i FROM (SELECT s, i, SUM(k) sm, AVG(k) av FROM a GROUP BY i, s) a GROUP BY i
----
group-by
 ├── columns: column7:7(decimal) i:2(int)
 ├── grouping columns: a.i:2(int)
 ├── keys: weak(2)
 ├── group-by
 │    ├── columns: a.i:2(int) a.s:4(string) sm:5(decimal)
 │    ├── grouping columns: a.i:2(int) a.s:4(string)
 │    ├── keys: weak(2,4)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int) a.s:4(string)
 │    │    └── keys: (1)
 │    └── aggregations [outer=(1)]
 │         └── sum [type=decimal, outer=(1)]
 │              └── variable: a.k [type=int, outer=(1)]
 └── aggregations [outer=(5)]
      └── min [type=decimal, outer=(5)]
           └── variable: sm [type=decimal, outer=(5)]

# --------------------------------------------------
# PruneValueCols
# --------------------------------------------------

# Discard all but first Values column.
opt
SELECT column1 FROM (VALUES (1, 2), (3, 4)) a
----
values
 ├── columns: column1:1(int)
 ├── cardinality: [2 - 2]
 ├── tuple [type=tuple{int}]
 │    └── const: 1 [type=int]
 └── tuple [type=tuple{int}]
      └── const: 3 [type=int]

# Discard all but middle Values column.
opt
SELECT column2 FROM (VALUES (1, 2, 3), (4, 5, 6)) a
----
values
 ├── columns: column2:2(int)
 ├── cardinality: [2 - 2]
 ├── tuple [type=tuple{int}]
 │    └── const: 2 [type=int]
 └── tuple [type=tuple{int}]
      └── const: 5 [type=int]

# Discard all but last Values column.
opt
SELECT column3 FROM (VALUES ('foo', 'bar', 'baz'), ('apple', 'banana', 'cherry')) a
----
values
 ├── columns: column3:3(string)
 ├── cardinality: [2 - 2]
 ├── tuple [type=tuple{string}]
 │    └── const: 'baz' [type=string]
 └── tuple [type=tuple{string}]
      └── const: 'cherry' [type=string]

# Discard all Values columns.
opt
SELECT 1 FROM (VALUES ('foo', 'bar', 'baz'), ('apple', 'banana', 'cherry')) a
----
project
 ├── columns: column4:4(int)
 ├── cardinality: [2 - 2]
 ├── values
 │    ├── cardinality: [2 - 2]
 │    ├── tuple [type=tuple{}]
 │    └── tuple [type=tuple{}]
 └── projections
      └── const: 1 [type=int]

# --------------------------------------------------
# Prune - multiple combined operators
# --------------------------------------------------

opt
SELECT a.k, xy.y FROM a INNER JOIN xy ON a.k=xy.x WHERE a.i < 5
----
project
 ├── columns: k:1(int!null) y:6(int)
 ├── inner-join
 │    ├── columns: a.k:1(int!null) a.i:2(int) xy.x:5(int!null) xy.y:6(int)
 │    ├── select
 │    │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    │    ├── keys: (1)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    │    │    └── keys: (1)
 │    │    └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - /4]; tight)]
 │    │         └── lt [type=bool, outer=(2), constraints=(/2: (/NULL - /4]; tight)]
 │    │              ├── variable: a.i [type=int, outer=(2)]
 │    │              └── const: 5 [type=int]
 │    ├── scan xy
 │    │    ├── columns: xy.x:5(int!null) xy.y:6(int)
 │    │    └── keys: (5)
 │    └── filters [type=bool, outer=(1,5)]
 │         └── eq [type=bool, outer=(1,5)]
 │              ├── variable: a.k [type=int, outer=(1)]
 │              └── variable: xy.x [type=int, outer=(5)]
 └── projections [outer=(1,6)]
      ├── variable: a.k [type=int, outer=(1)]
      └── variable: xy.y [type=int, outer=(6)]

opt
SELECT k FROM (SELECT k, MIN(s) FROM a GROUP BY k HAVING SUM(i) > 5)
----
project
 ├── columns: k:1(int!null)
 ├── keys: (1)
 ├── select
 │    ├── columns: a.k:1(int!null) column5:5(decimal)
 │    ├── keys: (1)
 │    ├── group-by
 │    │    ├── columns: a.k:1(int!null) column5:5(decimal)
 │    │    ├── grouping columns: a.k:1(int!null)
 │    │    ├── keys: (1)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:1(int!null) a.i:2(int)
 │    │    │    └── keys: (1)
 │    │    └── aggregations [outer=(2)]
 │    │         └── sum [type=decimal, outer=(2)]
 │    │              └── variable: a.i [type=int, outer=(2)]
 │    └── filters [type=bool, outer=(5), constraints=(/5: (/5 - ]; tight)]
 │         └── gt [type=bool, outer=(5), constraints=(/5: (/5 - ]; tight)]
 │              ├── variable: column5 [type=decimal, outer=(5)]
 │              └── const: 5 [type=decimal]
 └── projections [outer=(1)]
      └── variable: a.k [type=int, outer=(1)]

# --------------------------------------------------
# PruneRowNumberCols
# --------------------------------------------------
opt
SELECT i, s FROM a WITH ORDINALITY
----
project
 ├── columns: i:2(int) s:4(string)
 ├── row-number
 │    ├── columns: a.i:2(int) a.s:4(string) ordinality:5(int!null)
 │    ├── keys: (5)
 │    └── scan a
 │         └── columns: a.i:2(int) a.s:4(string)
 └── projections [outer=(2,4)]
      ├── variable: a.i [type=int, outer=(2)]
      └── variable: a.s [type=string, outer=(4)]

# With order by.
opt
SELECT i, s FROM (SELECT * FROM a ORDER BY f) WITH ORDINALITY
----
project
 ├── columns: i:2(int) s:4(string)
 ├── row-number
 │    ├── columns: a.i:2(int) a.f:3(float) a.s:4(string) ordinality:5(int!null)
 │    ├── keys: (5)
 │    └── sort
 │         ├── columns: a.i:2(int) a.f:3(float) a.s:4(string)
 │         ├── ordering: +3
 │         └── scan a
 │              └── columns: a.i:2(int) a.f:3(float) a.s:4(string)
 └── projections [outer=(2,4)]
      ├── variable: a.i [type=int, outer=(2)]
      └── variable: a.s [type=string, outer=(4)]
