exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 └── INDEX primary
      └── k int not null

exec-ddl
CREATE TABLE t.b (x INT PRIMARY KEY, y INT)
----
TABLE b
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

# --------------------------------------------------
# EnsureJoinFiltersAnd
# --------------------------------------------------
opt
SELECT * FROM a INNER JOIN b ON a.k=b.x AND b.y<a.i
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) y:7(int)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 ├── scan b
 │    ├── columns: x:6(int!null) y:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,2,6,7), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /6: (/NULL - ]; /7: (/NULL - ])]
      ├── a.k = b.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── b.y < a.i [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]

# --------------------------------------------------
# EnsureJoinFilters
# --------------------------------------------------
opt
SELECT * FROM a INNER JOIN b ON a.k=b.x
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) y:7(int)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 ├── scan b
 │    ├── columns: x:6(int!null) y:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── a.k = b.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

opt
SELECT * FROM a INNER JOIN b ON a.s='foo' OR b.y<10
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) y:7(int)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 ├── scan b
 │    ├── columns: x:6(int!null) y:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(4,7)]
      └── (a.s = 'foo') OR (b.y < 10) [type=bool, outer=(4,7)]

# --------------------------------------------------
# PushFilterIntoJoinLeft
# --------------------------------------------------
opt
SELECT * FROM a INNER JOIN b ON a.k=b.x AND a.s='foo'
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string!null) j:5(jsonb) x:6(int!null) y:7(int)
 ├── select
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string!null) j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │         └── a.s = 'foo' [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 ├── scan b
 │    ├── columns: x:6(int!null) y:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── a.k = b.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

opt
SELECT * FROM a RIGHT JOIN b ON (a.i<0 OR a.i>10) AND b.y=1 AND a.s='foo' AND a.k=b.x
----
right-join
 ├── columns: k:1(int) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) y:7(int)
 ├── select
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string!null) j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(2,4), constraints=(/4: [/'foo' - /'foo'])]
 │         ├── (a.i < 0) OR (a.i > 10) [type=bool, outer=(2)]
 │         └── a.s = 'foo' [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 ├── scan b
 │    ├── columns: x:6(int!null) y:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,6,7), constraints=(/1: (/NULL - ]; /6: (/NULL - ]; /7: [/1 - /1])]
      ├── b.y = 1 [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]
      └── a.k = b.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# LEFT JOIN should not push down conditions to left side of join.
opt
SELECT * FROM a LEFT JOIN b ON a.k=b.x AND a.i=1
----
left-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int) y:7(int)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 ├── scan b
 │    ├── columns: x:6(int!null) y:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,2,6), constraints=(/1: (/NULL - ]; /2: [/1 - /1]; /6: (/NULL - ])]
      ├── a.k = b.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── a.i = 1 [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]

# Semi-join case.
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM b WHERE x=k AND s='foo')
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string!null) j:5(jsonb)
 ├── keys: (1)
 ├── select
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string!null) j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 │         └── a.s = 'foo' [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
 ├── scan b
 │    ├── columns: x:6(int!null) y:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── b.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# Do not push anti-join conditions into left input.
opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM b WHERE x=k AND s='foo')
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 ├── scan b
 │    ├── columns: x:6(int!null) y:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,4,6), constraints=(/1: (/NULL - ]; /4: [/'foo' - /'foo']; /6: (/NULL - ])]
      ├── b.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── a.s = 'foo' [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]

# --------------------------------------------------
# PushFilterIntoJoinRight
# --------------------------------------------------
opt
SELECT * FROM b INNER JOIN a ON b.x=a.k AND a.s='foo'
----
inner-join
 ├── columns: x:1(int!null) y:2(int) k:3(int!null) i:4(int) f:5(float) s:6(string!null) j:7(jsonb)
 ├── scan b
 │    ├── columns: x:1(int!null) y:2(int)
 │    └── keys: (1)
 ├── select
 │    ├── columns: k:3(int!null) i:4(int) f:5(float) s:6(string!null) j:7(jsonb)
 │    ├── keys: (3)
 │    ├── scan a
 │    │    ├── columns: k:3(int!null) i:4(int) f:5(float) s:6(string) j:7(jsonb)
 │    │    └── keys: (3)
 │    └── filters [type=bool, outer=(6), constraints=(/6: [/'foo' - /'foo']; tight)]
 │         └── a.s = 'foo' [type=bool, outer=(6), constraints=(/6: [/'foo' - /'foo']; tight)]
 └── filters [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
      └── b.x = a.k [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]

opt
SELECT * FROM b LEFT JOIN a ON (a.i<0 OR a.i>10) AND b.y=1 AND a.s='foo' AND b.x=a.k
----
left-join
 ├── columns: x:1(int!null) y:2(int) k:3(int) i:4(int) f:5(float) s:6(string) j:7(jsonb)
 ├── scan b
 │    ├── columns: x:1(int!null) y:2(int)
 │    └── keys: (1)
 ├── select
 │    ├── columns: k:3(int!null) i:4(int) f:5(float) s:6(string!null) j:7(jsonb)
 │    ├── keys: (3)
 │    ├── scan a
 │    │    ├── columns: k:3(int!null) i:4(int) f:5(float) s:6(string) j:7(jsonb)
 │    │    └── keys: (3)
 │    └── filters [type=bool, outer=(4,6), constraints=(/6: [/'foo' - /'foo'])]
 │         ├── (a.i < 0) OR (a.i > 10) [type=bool, outer=(4)]
 │         └── a.s = 'foo' [type=bool, outer=(6), constraints=(/6: [/'foo' - /'foo']; tight)]
 └── filters [type=bool, outer=(1-3), constraints=(/1: (/NULL - ]; /2: [/1 - /1]; /3: (/NULL - ])]
      ├── b.y = 1 [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
      └── b.x = a.k [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]

# RIGHT JOIN should not push down conditions to right side of join.
opt
SELECT * FROM b RIGHT JOIN a ON b.x=a.k AND a.i=1
----
right-join
 ├── columns: x:1(int) y:2(int) k:3(int!null) i:4(int) f:5(float) s:6(string) j:7(jsonb)
 ├── scan b
 │    ├── columns: x:1(int!null) y:2(int)
 │    └── keys: (1)
 ├── scan a
 │    ├── columns: k:3(int!null) i:4(int) f:5(float) s:6(string) j:7(jsonb)
 │    └── keys: (3)
 └── filters [type=bool, outer=(1,3,4), constraints=(/1: (/NULL - ]; /3: (/NULL - ]; /4: [/1 - /1])]
      ├── b.x = a.k [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
      └── a.i = 1 [type=bool, outer=(4), constraints=(/4: [/1 - /1]; tight)]

# Semi-join case.
opt
SELECT * FROM a WHERE EXISTS(SELECT * FROM b WHERE x=k AND y>10)
----
semi-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 ├── select
 │    ├── columns: x:6(int!null) y:7(int!null)
 │    ├── keys: (6)
 │    ├── scan b
 │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    └── keys: (6)
 │    └── filters [type=bool, outer=(7), constraints=(/7: [/11 - ]; tight)]
 │         └── b.y > 10 [type=bool, outer=(7), constraints=(/7: [/11 - ]; tight)]
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── b.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# Anti-join case.
opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM b WHERE x=k AND y>10)
----
anti-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 ├── select
 │    ├── columns: x:6(int!null) y:7(int!null)
 │    ├── keys: (6)
 │    ├── scan b
 │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    └── keys: (6)
 │    └── filters [type=bool, outer=(7), constraints=(/7: [/11 - ]; tight)]
 │         └── b.y > 10 [type=bool, outer=(7), constraints=(/7: [/11 - ]; tight)]
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── b.x = a.k [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# --------------------------------------------------
# PushFilterIntoJoinLeft + PushFilterIntoJoinRight
# --------------------------------------------------

opt
SELECT * FROM a INNER JOIN b ON a.k=b.x AND a.i=1 AND b.y=1
----
inner-join
 ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) y:7(int!null)
 ├── select
 │    ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string) j:5(jsonb)
 │    ├── keys: (1)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
 │         └── a.i = 1 [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
 ├── select
 │    ├── columns: x:6(int!null) y:7(int!null)
 │    ├── keys: (6)
 │    ├── scan b
 │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    └── keys: (6)
 │    └── filters [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]
 │         └── b.y = 1 [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]
 └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      └── a.k = b.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]

# FULL JOIN should not push down conditions to either side of join.
opt
SELECT * FROM a FULL JOIN b ON a.k=b.x AND a.i=1 AND b.y=1
----
full-join
 ├── columns: k:1(int) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int) y:7(int)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 ├── scan b
 │    ├── columns: x:6(int!null) y:7(int)
 │    └── keys: (6)
 └── filters [type=bool, outer=(1,2,6,7), constraints=(/1: (/NULL - ]; /2: [/1 - /1]; /6: (/NULL - ]; /7: [/1 - /1])]
      ├── a.k = b.x [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
      ├── a.i = 1 [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
      └── b.y = 1 [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]

# Nested semi/anti-join case.
opt
SELECT * FROM b
WHERE EXISTS
(
    SELECT * FROM a WHERE k=x AND s='foo' AND NOT EXISTS(SELECT * FROM a WHERE i=10 AND y>100)
)
----
semi-join-apply
 ├── columns: x:1(int!null) y:2(int)
 ├── keys: (1)
 ├── scan b
 │    ├── columns: x:1(int!null) y:2(int)
 │    └── keys: (1)
 ├── anti-join
 │    ├── columns: a.k:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string!null) a.j:7(jsonb)
 │    ├── outer: (2)
 │    ├── keys: (3)
 │    ├── select
 │    │    ├── columns: a.k:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string!null) a.j:7(jsonb)
 │    │    ├── keys: (3)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:3(int!null) a.i:4(int) a.f:5(float) a.s:6(string) a.j:7(jsonb)
 │    │    │    └── keys: (3)
 │    │    └── filters [type=bool, outer=(6), constraints=(/6: [/'foo' - /'foo']; tight)]
 │    │         └── a.s = 'foo' [type=bool, outer=(6), constraints=(/6: [/'foo' - /'foo']; tight)]
 │    ├── select
 │    │    ├── columns: a.k:8(int!null) a.i:9(int!null) a.f:10(float) a.s:11(string) a.j:12(jsonb)
 │    │    ├── keys: (8)
 │    │    ├── scan a
 │    │    │    ├── columns: a.k:8(int!null) a.i:9(int) a.f:10(float) a.s:11(string) a.j:12(jsonb)
 │    │    │    └── keys: (8)
 │    │    └── filters [type=bool, outer=(9), constraints=(/9: [/10 - /10]; tight)]
 │    │         └── a.i = 10 [type=bool, outer=(9), constraints=(/9: [/10 - /10]; tight)]
 │    └── filters [type=bool, outer=(2), constraints=(/2: [/101 - ]; tight)]
 │         └── b.y > 100 [type=bool, outer=(2), constraints=(/2: [/101 - ]; tight)]
 └── filters [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
      └── a.k = b.x [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]

# --------------------------------------------------
# SimplifyLeftJoin
# --------------------------------------------------
opt
SELECT * FROM a LEFT JOIN (SELECT COUNT(*) FROM b) ON True
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) count:8(int)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 ├── group-by
 │    ├── columns: count:8(int)
 │    ├── cardinality: [1 - 1]
 │    ├── scan b
 │    └── aggregations
 │         └── count-rows [type=int]
 └── true [type=bool]

# Full-join.
opt
SELECT * FROM a FULL JOIN (SELECT COUNT(*) FROM b) ON True
----
right-join
 ├── columns: k:1(int) i:2(int) f:3(float) s:4(string) j:5(jsonb) count:8(int)
 ├── cardinality: [1 - ]
 ├── keys: weak(1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 ├── group-by
 │    ├── columns: count:8(int)
 │    ├── cardinality: [1 - 1]
 │    ├── scan b
 │    └── aggregations
 │         └── count-rows [type=int]
 └── true [type=bool]

# Left-join-apply.
opt
SELECT * FROM a WHERE (SELECT SUM(column1) FROM (VALUES (k), (1))) = 1
----
project
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 └── select
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) sum:7(decimal!null)
      ├── keys: (1)
      ├── group-by
      │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) sum:7(decimal)
      │    ├── grouping columns: k:1(int!null)
      │    ├── keys: (1)
      │    ├── inner-join-apply
      │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) column1:6(int)
      │    │    ├── scan a
      │    │    │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
      │    │    │    └── keys: (1)
      │    │    ├── values
      │    │    │    ├── columns: column1:6(int)
      │    │    │    ├── outer: (1)
      │    │    │    ├── cardinality: [2 - 2]
      │    │    │    ├── (a.k) [type=tuple{int}, outer=(1)]
      │    │    │    └── (1) [type=tuple{int}]
      │    │    └── true [type=bool]
      │    └── aggregations [outer=(2-6)]
      │         ├── sum [type=decimal, outer=(6)]
      │         │    └── variable: column1 [type=int, outer=(6)]
      │         ├── any-not-null [type=int, outer=(2)]
      │         │    └── variable: a.i [type=int, outer=(2)]
      │         ├── any-not-null [type=float, outer=(3)]
      │         │    └── variable: a.f [type=float, outer=(3)]
      │         ├── any-not-null [type=string, outer=(4)]
      │         │    └── variable: a.s [type=string, outer=(4)]
      │         └── any-not-null [type=jsonb, outer=(5)]
      │              └── variable: a.j [type=jsonb, outer=(5)]
      └── filters [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]
           └── sum = 1 [type=bool, outer=(7), constraints=(/7: [/1 - /1]; tight)]

# Don't simplify right join
opt
SELECT * FROM a RIGHT JOIN (SELECT COUNT(*) FROM b) ON True
----
right-join
 ├── columns: k:1(int) i:2(int) f:3(float) s:4(string) j:5(jsonb) count:8(int)
 ├── cardinality: [1 - ]
 ├── keys: weak(1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 ├── group-by
 │    ├── columns: count:8(int)
 │    ├── cardinality: [1 - 1]
 │    ├── scan b
 │    └── aggregations
 │         └── count-rows [type=int]
 └── true [type=bool]

# --------------------------------------------------
# SimplifyRightJoin
# --------------------------------------------------
opt
SELECT * FROM (SELECT COUNT(*) FROM b) RIGHT JOIN a ON True
----
inner-join
 ├── columns: count:3(int) k:4(int!null) i:5(int) f:6(float) s:7(string) j:8(jsonb)
 ├── keys: (4)
 ├── group-by
 │    ├── columns: count:3(int)
 │    ├── cardinality: [1 - 1]
 │    ├── scan b
 │    └── aggregations
 │         └── count-rows [type=int]
 ├── scan a
 │    ├── columns: k:4(int!null) i:5(int) f:6(float) s:7(string) j:8(jsonb)
 │    └── keys: (4)
 └── true [type=bool]

# Full-join.
opt
SELECT * FROM (SELECT COUNT(*) FROM b) FULL JOIN a ON True
----
left-join
 ├── columns: count:3(int) k:4(int) i:5(int) f:6(float) s:7(string) j:8(jsonb)
 ├── cardinality: [1 - ]
 ├── keys: weak(4)
 ├── group-by
 │    ├── columns: count:3(int)
 │    ├── cardinality: [1 - 1]
 │    ├── scan b
 │    └── aggregations
 │         └── count-rows [type=int]
 ├── scan a
 │    ├── columns: k:4(int!null) i:5(int) f:6(float) s:7(string) j:8(jsonb)
 │    └── keys: (4)
 └── true [type=bool]

# Don't simplify left join
opt
SELECT * FROM (SELECT COUNT(*) FROM b) LEFT JOIN a ON True
----
left-join
 ├── columns: count:3(int) k:4(int) i:5(int) f:6(float) s:7(string) j:8(jsonb)
 ├── cardinality: [1 - ]
 ├── keys: weak(4)
 ├── group-by
 │    ├── columns: count:3(int)
 │    ├── cardinality: [1 - 1]
 │    ├── scan b
 │    └── aggregations
 │         └── count-rows [type=int]
 ├── scan a
 │    ├── columns: k:4(int!null) i:5(int) f:6(float) s:7(string) j:8(jsonb)
 │    └── keys: (4)
 └── true [type=bool]

# --------------------------------------------------
# EliminateSemiJoin
# --------------------------------------------------
opt
SELECT * FROM a WHERE EXISTS(SELECT COUNT(*) FROM b WHERE x=k)
----
scan a
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 └── keys: (1)

# --------------------------------------------------
# EliminateAntiJoin
# --------------------------------------------------
opt
SELECT * FROM a WHERE NOT EXISTS(SELECT * FROM (VALUES (k)) OFFSET 1)
----
scan a
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 └── keys: (1)

# --------------------------------------------------
# EliminateJoinNoColsLeft
# --------------------------------------------------
opt
SELECT s FROM (VALUES (1, 2)) INNER JOIN a ON s='foo'
----
select
 ├── columns: s:6(string!null)
 ├── scan a
 │    └── columns: s:6(string)
 └── filters [type=bool, outer=(6), constraints=(/6: [/'foo' - /'foo']; tight)]
      └── a.s = 'foo' [type=bool, outer=(6), constraints=(/6: [/'foo' - /'foo']; tight)]

# --------------------------------------------------
# EliminateJoinNoColsRight
# --------------------------------------------------
opt
SELECT s FROM a INNER JOIN (SELECT COUNT(*) FROM b) ON s='foo'
----
select
 ├── columns: s:4(string!null)
 ├── scan a
 │    └── columns: s:4(string)
 └── filters [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
      └── a.s = 'foo' [type=bool, outer=(4), constraints=(/4: [/'foo' - /'foo']; tight)]
