exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON)
----
TABLE a
 ├── k int not null
 ├── i int
 ├── f float
 ├── s string
 ├── j jsonb
 └── INDEX primary
      └── k int not null

exec-ddl
CREATE TABLE t.b (x INT PRIMARY KEY, z INT)
----
TABLE b
 ├── x int not null
 ├── z int
 └── INDEX primary
      └── x int not null

# --------------------------------------------------
# EliminateEmptyAnd
# --------------------------------------------------
opt
SELECT * FROM a WHERE True AND True
----
scan a
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 └── keys: (1)

# --------------------------------------------------
# EliminateEmptyOr
# --------------------------------------------------
opt
SELECT False OR False
----
project
 ├── columns: "false OR false":1(bool!null)
 ├── cardinality: [1 - 1]
 ├── values
 │    ├── cardinality: [1 - 1]
 │    └── tuple [type=tuple{}]
 └── projections
      └── false [type=bool]

# --------------------------------------------------
# EliminateSingletonAndOr
# --------------------------------------------------
opt
SELECT (i=5 OR False) AND (s<'foo' AND True) FROM a
----
project
 ├── columns: "((i = 5) OR false) AND ((s < 'foo') AND true)":6(bool)
 ├── scan a
 │    └── columns: i:2(int) s:4(string)
 └── projections [outer=(2,4)]
      └── (a.i = 5) AND (a.s < 'foo') [type=bool, outer=(2,4)]

# --------------------------------------------------
# SimplifyAnd
# --------------------------------------------------

# Replace with False if any operand is false.
opt
SELECT k=1 AND False AND f=3.5 FROM a
----
project
 ├── columns: "((k = 1) AND false) AND (f = 3.5)":6(bool!null)
 ├── scan a
 └── projections
      └── false [type=bool]

opt
SELECT False AND s='foo' FROM a
----
project
 ├── columns: "false AND (s = 'foo')":6(bool!null)
 ├── scan a
 └── projections
      └── false [type=bool]

# Discard True operands.
opt
SELECT true AND k=1 FROM a
----
project
 ├── columns: "true AND (k = 1)":6(bool)
 ├── scan a
 │    ├── columns: k:1(int!null)
 │    └── keys: (1)
 └── projections [outer=(1)]
      └── a.k = 1 [type=bool, outer=(1)]

opt
SELECT k=1 AND i=2 AND true FROM a
----
project
 ├── columns: "((k = 1) AND (i = 2)) AND true":6(bool)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int)
 │    └── keys: (1)
 └── projections [outer=(1,2)]
      └── (a.k = 1) AND (a.i = 2) [type=bool, outer=(1,2)]

# No conditions left after rule.
opt
SELECT * FROM a WHERE true AND true
----
scan a
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 └── keys: (1)

# Flatten nested And operands.
opt
SELECT (k>1 AND k<5) AND (f=3.5 AND s='foo') FROM a
----
project
 ├── columns: "((k > 1) AND (k < 5)) AND ((f = 3.5) AND (s = 'foo'))":6(bool)
 ├── scan a
 │    ├── columns: k:1(int!null) f:3(float) s:4(string)
 │    └── keys: (1)
 └── projections [outer=(1,3,4)]
      └── (((a.k > 1) AND (a.k < 5)) AND (a.f = 3.5)) AND (a.s = 'foo') [type=bool, outer=(1,3,4)]

# --------------------------------------------------
# SimplifyOr
# --------------------------------------------------

# Replace with True if any operand is True.
opt
SELECT k=1 OR (i=2 OR True) FROM a
----
project
 ├── columns: "(k = 1) OR ((i = 2) OR true)":6(bool!null)
 ├── scan a
 └── projections
      └── true [type=bool]

opt
SELECT k=1 OR True OR f=3.5 FROM a
----
project
 ├── columns: "((k = 1) OR true) OR (f = 3.5)":6(bool!null)
 ├── scan a
 └── projections
      └── true [type=bool]

# Discard False operands.
opt
SELECT false OR k=1 FROM a
----
project
 ├── columns: "false OR (k = 1)":6(bool)
 ├── scan a
 │    ├── columns: k:1(int!null)
 │    └── keys: (1)
 └── projections [outer=(1)]
      └── a.k = 1 [type=bool, outer=(1)]

opt
SELECT * FROM a WHERE k=1 OR i=2 OR false
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(1,2)]
      └── (a.k = 1) OR (a.i = 2) [type=bool, outer=(1,2)]

# No conditions left after rule.
opt
SELECT * FROM a WHERE false OR false
----
scan a
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── constraint: /1: contradiction
 └── keys: (1)

# Flatten nested Or operands.
opt
SELECT * FROM a WHERE (k=1 OR i=2) OR (f=3.5 OR s='foo')
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(1-4)]
      └── (((a.k = 1) OR (a.i = 2)) OR (a.f = 3.5)) OR (a.s = 'foo') [type=bool, outer=(1-4)]

# --------------------------------------------------
# SimplifyAnd + SimplifyOr
# --------------------------------------------------
opt
SELECT (k=1 OR false) AND (false OR k=2 OR false) AND true FROM a
----
project
 ├── columns: "(((k = 1) OR false) AND ((false OR (k = 2)) OR false)) AND true":6(bool)
 ├── scan a
 │    ├── columns: k:1(int!null)
 │    └── keys: (1)
 └── projections [outer=(1)]
      └── (a.k = 1) AND (a.k = 2) [type=bool, outer=(1)]

# Use parentheses to make and/or tree right-heavy instead of left-heavy.
opt
SELECT (k=1 OR (i=2 OR f=3.5)) AND (s='foo' AND s<>'bar') FROM a
----
project
 ├── columns: "((k = 1) OR ((i = 2) OR (f = 3.5))) AND ((s = 'foo') AND (s != 'bar'))":6(bool)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string)
 │    └── keys: (1)
 └── projections [outer=(1-4)]
      └── ((((a.k = 1) OR (a.i = 2)) OR (a.f = 3.5)) AND (a.s = 'foo')) AND (a.s != 'bar') [type=bool, outer=(1-4)]

# --------------------------------------------------
# SimplifyFilters
# --------------------------------------------------
opt
SELECT * FROM a WHERE Null
----
scan a
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── constraint: /1: contradiction
 └── keys: (1)

opt
SELECT * FROM a INNER JOIN b ON NULL
----
inner-join
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) x:6(int!null) z:7(int)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 ├── scan b
 │    ├── columns: x:6(int!null) z:7(int)
 │    └── keys: (6)
 └── false [type=bool]

opt
SELECT * FROM a WHERE i=1 AND Null
----
scan a
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── constraint: /1: contradiction
 └── keys: (1)

# --------------------------------------------------
# FoldNullAndOr
# --------------------------------------------------
opt
SELECT null and null FROM a
----
project
 ├── columns: "NULL AND NULL":6(bool)
 ├── scan a
 └── projections
      └── null [type=bool]

opt
SELECT null or null FROM a
----
project
 ├── columns: "NULL OR NULL":6(bool)
 ├── scan a
 └── projections
      └── null [type=bool]

opt
SELECT null or (null and null and null) or null FROM a
----
project
 ├── columns: "(NULL OR ((NULL AND NULL) AND NULL)) OR NULL":6(bool)
 ├── scan a
 └── projections
      └── null [type=bool]

# Don't fold.
opt
SELECT null or (null and k=1) FROM a
----
project
 ├── columns: "NULL OR (NULL AND (k = 1))":6(bool)
 ├── scan a
 │    ├── columns: k:1(int!null)
 │    └── keys: (1)
 └── projections [outer=(1)]
      └── NULL OR (NULL AND (a.k = 1)) [type=bool, outer=(1)]

# --------------------------------------------------
# NegateComparison
# --------------------------------------------------

# Equality and inequality comparisons.
opt
SELECT * FROM a WHERE NOT(i=1) AND NOT(i<>1) AND NOT(i>1) AND NOT(i>=1) AND NOT(i<1) AND NOT(i<=1)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(2), constraints=(contradiction; tight)]
      ├── a.i != 1 [type=bool, outer=(2), constraints=(/2: (/NULL - /0] [/2 - ]; tight)]
      ├── a.i = 1 [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
      ├── a.i <= 1 [type=bool, outer=(2), constraints=(/2: (/NULL - /1]; tight)]
      ├── a.i < 1 [type=bool, outer=(2), constraints=(/2: (/NULL - /0]; tight)]
      ├── a.i >= 1 [type=bool, outer=(2), constraints=(/2: [/1 - ]; tight)]
      └── a.i > 1 [type=bool, outer=(2), constraints=(/2: [/2 - ]; tight)]

# IN and IS comparisons.
opt
SELECT *
FROM a
WHERE NOT(i IN (1,2)) AND NOT(i NOT IN (3,4)) AND NOT(i IS NULL) AND NOT(i IS NOT NULL)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(2), constraints=(contradiction; tight)]
      ├── a.i NOT IN (1, 2) [type=bool, outer=(2)]
      ├── a.i IN (3, 4) [type=bool, outer=(2), constraints=(/2: [/3 - /3] [/4 - /4]; tight)]
      ├── a.i IS NOT NULL [type=bool, outer=(2), constraints=(/2: (/NULL - ]; tight)]
      └── a.i IS NULL [type=bool, outer=(2), constraints=(/2: [/NULL - /NULL]; tight)]

# Like comparisons.
opt
SELECT *
FROM a
WHERE NOT(s LIKE 'foo') AND NOT(s NOT LIKE 'foo') AND NOT(s ILIKE 'foo') AND NOT(s NOT ILIKE 'foo')
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(4)]
      ├── a.s NOT LIKE 'foo' [type=bool, outer=(4)]
      ├── a.s LIKE 'foo' [type=bool, outer=(4)]
      ├── a.s NOT ILIKE 'foo' [type=bool, outer=(4)]
      └── a.s ILIKE 'foo' [type=bool, outer=(4)]

# SimilarTo comparisons.
opt
SELECT * FROM a WHERE NOT(s SIMILAR TO 'foo') AND NOT(s NOT SIMILAR TO 'foo')
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(4)]
      ├── a.s NOT SIMILAR TO 'foo' [type=bool, outer=(4)]
      └── a.s SIMILAR TO 'foo' [type=bool, outer=(4)]

# RegMatch comparisons.
opt
SELECT * FROM a WHERE NOT(s ~ 'foo') AND NOT(s !~ 'foo') AND NOT(s ~* 'foo') AND NOT (s !~* 'foo')
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(4)]
      ├── a.s !~ 'foo' [type=bool, outer=(4)]
      ├── a.s ~ 'foo' [type=bool, outer=(4)]
      ├── a.s !~* 'foo' [type=bool, outer=(4)]
      └── a.s ~* 'foo' [type=bool, outer=(4)]

# JSON comparisons (should not be negated).
opt
SELECT * FROM a WHERE
  NOT('[1, 2]' @> j) AND NOT(j <@ '[3, 4]') AND
  NOT(j ? 'foo') AND
  NOT(j ?| ARRAY['foo']) AND
  NOT(j ?& ARRAY['foo'])
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(5)]
      ├── NOT ('[1, 2]' @> a.j) [type=bool, outer=(5)]
      ├── NOT ('[3, 4]' @> a.j) [type=bool, outer=(5)]
      ├── NOT (a.j ? 'foo') [type=bool, outer=(5)]
      ├── NOT (a.j ?| ARRAY['foo']) [type=bool, outer=(5)]
      └── NOT (a.j ?& ARRAY['foo']) [type=bool, outer=(5)]

# --------------------------------------------------
# EliminateNot
# --------------------------------------------------
opt
SELECT * FROM a WHERE NOT(NOT('[1, 2]' @> j))
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(5)]
      └── '[1, 2]' @> a.j [type=bool, outer=(5)]

# --------------------------------------------------
# NegateAnd + NegateComparison
# --------------------------------------------------
opt
SELECT * FROM a WHERE NOT (k >= i AND i < f)
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(1-3)]
      └── (a.k < a.i) OR (a.i >= a.f) [type=bool, outer=(1-3)]

opt
SELECT * FROM a WHERE NOT (k >= i AND i < f AND (i > 5 AND i < 10 AND f > 1))
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(1-3)]
      └── ((((a.k < a.i) OR (a.i >= a.f)) OR (a.i <= 5)) OR (a.i >= 10)) OR (a.f <= 1.0) [type=bool, outer=(1-3)]


# --------------------------------------------------
# NegateOr + NegateComparison
# --------------------------------------------------
opt
SELECT * FROM a WHERE NOT (k >= i OR i < f OR k + i < f)
----
select
 ├── columns: k:1(int!null) i:2(int!null) f:3(float!null) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(1-3), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /3: (/NULL - ])]
      ├── a.k < a.i [type=bool, outer=(1,2), constraints=(/1: (/NULL - ]; /2: (/NULL - ])]
      ├── a.i >= a.f [type=bool, outer=(2,3), constraints=(/2: (/NULL - ]; /3: (/NULL - ])]
      └── a.f <= (a.k + a.i) [type=bool, outer=(1-3), constraints=(/3: (/NULL - ])]

opt
SELECT * FROM a WHERE NOT (k >= i OR i < f OR (i > 5 OR i < 10 OR f > 1))
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(1-3), constraints=(contradiction; tight)]
      ├── a.k < a.i [type=bool, outer=(1,2), constraints=(/1: (/NULL - ]; /2: (/NULL - ])]
      ├── a.i >= a.f [type=bool, outer=(2,3), constraints=(/2: (/NULL - ]; /3: (/NULL - ])]
      ├── a.i <= 5 [type=bool, outer=(2), constraints=(/2: (/NULL - /5]; tight)]
      ├── a.i >= 10 [type=bool, outer=(2), constraints=(/2: [/10 - ]; tight)]
      └── a.f <= 1.0 [type=bool, outer=(3), constraints=(/3: (/NULL - /1.0]; tight)]

# --------------------------------------------------
# NegateAnd + NegateOr + NegateComparison
# --------------------------------------------------
opt
SELECT * FROM a WHERE NOT ((k >= i OR i < f) AND (i > 5 OR f > 1))
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(1-3)]
      └── ((a.k < a.i) AND (a.i >= a.f)) OR ((a.i <= 5) AND (a.f <= 1.0)) [type=bool, outer=(1-3)]

opt
SELECT * FROM a WHERE NOT ((k >= i AND i < f) OR (i > 5 AND f > 1))
----
select
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── keys: (1)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    └── keys: (1)
 └── filters [type=bool, outer=(1-3)]
      ├── (a.k < a.i) OR (a.i >= a.f) [type=bool, outer=(1-3)]
      └── (a.i <= 5) OR (a.f <= 1.0) [type=bool, outer=(2,3)]
