exec-ddl
CREATE TABLE xy (x INT, y INT);
----

exec-ddl
CREATE FUNCTION one() RETURNS INT LANGUAGE SQL AS 'SELECT 1';
----

# Do not attempt to hoist UDFs.
norm format=show-scalars
SELECT one()
----
values
 ├── columns: one:2
 ├── cardinality: [1 - 1]
 ├── volatile
 ├── key: ()
 ├── fd: ()-->(2)
 └── tuple
      └── udf: one
           └── body
                └── values
                     ├── columns: "?column?":1!null
                     ├── cardinality: [1 - 1]
                     ├── key: ()
                     ├── fd: ()-->(1)
                     └── tuple
                          └── const: 1

exec-ddl
CREATE FUNCTION strict_fn(i INT, t TEXT, b BOOl) RETURNS INT STRICT LANGUAGE SQL AS 'SELECT i'
----

# Strict UDFs should be folded to NULL in the presence of a constant NULL
# argument.
norm format=show-scalars
SELECT strict_fn(1, 'foo', NULL)
----
values
 ├── columns: strict_fn:1
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(1)
 └── tuple
      └── null

# The CASE expression used to check for NULL arguments in strict UDFs should be
# folded in the presence of all non-NULL arguments.
norm format=show-scalars
SELECT strict_fn(1, 'foo', true)
----
values
 ├── columns: strict_fn:5
 ├── cardinality: [1 - 1]
 ├── volatile
 ├── key: ()
 ├── fd: ()-->(5)
 └── tuple
      └── udf: strict_fn
           ├── params: i:1 t:2 b:3
           ├── args
           │    ├── const: 1
           │    ├── const: 'foo'
           │    └── true
           └── body
                └── values
                     ├── columns: i:4
                     ├── outer: (1)
                     ├── cardinality: [1 - 1]
                     ├── key: ()
                     ├── fd: ()-->(4)
                     └── tuple
                          └── variable: i:1

# The CASE expression cannot be optimized away for nullable non-constant
# arguments of a volatile function.
norm format=show-scalars
SELECT strict_fn(x, 'foo', true) FROM xy;
----
project
 ├── columns: strict_fn:10
 ├── volatile
 ├── scan xy
 │    └── columns: x:1
 └── projections
      └── case [as=strict_fn:10, outer=(1), volatile, udf]
           ├── true
           ├── when
           │    ├── is
           │    │    ├── variable: x:1
           │    │    └── null
           │    └── null
           └── udf: strict_fn
                ├── params: i:6 t:7 b:8
                ├── args
                │    ├── variable: x:1
                │    ├── const: 'foo'
                │    └── true
                └── body
                     └── values
                          ├── columns: i:9
                          ├── outer: (6)
                          ├── cardinality: [1 - 1]
                          ├── key: ()
                          ├── fd: ()-->(9)
                          └── tuple
                               └── variable: i:6

exec-ddl
CREATE FUNCTION strict_stable_fn(i INT, t TEXT, b BOOl) RETURNS BOOL STABLE STRICT LANGUAGE SQL AS 'SELECT i > 0'
----

# The CASE expression can be simplified after the stable function call is
# hoisted.
norm format=show-scalars
SELECT * FROM xy WHERE strict_stable_fn(x, 'foo', true);
----
select
 ├── columns: x:1!null y:2
 ├── scan xy
 │    └── columns: x:1 y:2
 └── filters
      └── or [outer=(1), constraints=(/1: [/1 - ])]
           ├── and
           │    ├── is
           │    │    ├── is
           │    │    │    ├── variable: x:1
           │    │    │    └── null
           │    │    └── true
           │    └── null
           └── and
                ├── is-not
                │    ├── is
                │    │    ├── variable: x:1
                │    │    └── null
                │    └── true
                └── gt
                     ├── variable: x:1
                     └── const: 0
