exec-ddl
CREATE TABLE a
(
    k INT PRIMARY KEY,
    i INT NOT NULL,
    f FLOAT,
    s STRING NOT NULL,
    j JSON,
    UNIQUE INDEX si_idx (s DESC, i) STORING (j),
    UNIQUE INDEX fi_idx (f, i)
)
----

exec-ddl
CREATE TABLE xy
(
    x INT PRIMARY KEY,
    y INT
)
----

exec-ddl
CREATE TABLE abc
(
    a INT,
    b INT,
    c INT,
    PRIMARY KEY (a,b,c)
)
----

exec-ddl
CREATE TABLE uvwz
(
    u INT NOT NULL,
    v INT NOT NULL,
    w INT NOT NULL,
    z INT NOT NULL,

    UNIQUE INDEX (u,v),
    UNIQUE INDEX (v,w)
)
----

exec-ddl
CREATE TABLE s (
    s STRING PRIMARY KEY
)
----

exec-ddl
CREATE TABLE nullablecols (
    c1 INT,
    c2 INT,
    c3 INT,
    UNIQUE (c1),
    UNIQUE (c2,c3)
)
----

# --------------------------------------------------
# ConvertGroupByToDistinct
# --------------------------------------------------
norm expect=ConvertGroupByToDistinct
SELECT s, f FROM a GROUP BY s, f
----
distinct-on
 ├── columns: s:4!null f:3
 ├── grouping columns: f:3 s:4!null
 ├── key: (3,4)
 └── scan a
      └── columns: f:3 s:4!null

# Group by not converted to DistinctOn because it has an aggregation.
norm expect-not=ConvertGroupByToDistinct
SELECT s, f, sum(f) FROM a GROUP BY s, f
----
group-by
 ├── columns: s:4!null f:3 sum:6
 ├── grouping columns: f:3 s:4!null
 ├── key: (3,4)
 ├── fd: (3,4)-->(6)
 ├── scan a
 │    └── columns: f:3 s:4!null
 └── aggregations
      └── sum [as=sum:6, outer=(3)]
           └── f:3


# --------------------------------------------------
# EliminateDistinct
# --------------------------------------------------
norm expect=EliminateDistinct
SELECT DISTINCT k FROM a
----
scan a
 ├── columns: k:1!null
 └── key: (1)

norm expect=EliminateDistinct
SELECT DISTINCT s, i FROM a
----
scan a
 ├── columns: s:4!null i:2!null
 └── key: (2,4)

norm expect=EliminateDistinct
SELECT DISTINCT ON (s, i) k, i, f FROM a
----
scan a
 ├── columns: k:1!null i:2!null f:3
 ├── key: (1)
 └── fd: (1)-->(2,3), (2,3)~~>(1)

# Strict superset of key.
norm expect=EliminateDistinct
SELECT DISTINCT s, i, f FROM a
----
scan a
 ├── columns: s:4!null i:2!null f:3
 ├── key: (2,4)
 └── fd: (2,4)-->(3), (2,3)~~>(4)

# Distinct not eliminated because columns aren't superset of any weak key.
norm expect-not=EliminateDistinct
SELECT DISTINCT i FROM a
----
distinct-on
 ├── columns: i:2!null
 ├── grouping columns: i:2!null
 ├── key: (2)
 └── scan a
      └── columns: i:2!null

# Distinct not eliminated despite a unique index on (f, i) because f is nullable.
norm expect-not=EliminateDistinct
SELECT DISTINCT f, i FROM a
----
distinct-on
 ├── columns: f:3 i:2!null
 ├── grouping columns: i:2!null f:3
 ├── key: (2,3)
 └── scan a
      ├── columns: i:2!null f:3
      └── lax-key: (2,3)

# Regression test for #40295. Ensure that the DistinctOn is replaced with a
# Project operator to keep the correct number of output columns.
exec-ddl
CREATE TABLE table0 (col0 REGTYPE);
----

exec-ddl
CREATE TABLE table1 (col0 REGCLASS, col1 REGTYPE, col2 INT4);
----

norm expect=EliminateDistinct
SELECT
  (
    SELECT
      t1.col2
    FROM
      table1 AS t1
    JOIN table0 AS t0 ON
        t1.col1 = t0.col0
        AND t1.col0 = t0.col0
    GROUP BY
      t1.col2
    HAVING
      NULL
  );
----
values
 ├── columns: col2:7
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(7)
 └── tuple
      └── subquery
           └── values
                ├── columns: t1.col2:3!null
                ├── cardinality: [0 - 0]
                ├── key: ()
                └── fd: ()-->(3)

# --------------------------------------------------
# EliminateGroupByProject
# --------------------------------------------------
norm expect=EliminateGroupByProject
SELECT min(s) FROM (SELECT i, s FROM (SELECT * FROM a UNION SELECT * FROM a)) GROUP BY i
----
project
 ├── columns: min:16!null
 └── group-by
      ├── columns: i:12!null min:16!null
      ├── grouping columns: i:12!null
      ├── key: (12)
      ├── fd: (12)-->(16)
      ├── union
      │    ├── columns: k:11!null i:12!null f:13 s:14!null j:15
      │    ├── left columns: a.k:1 a.i:2 a.f:3 a.s:4 a.j:5
      │    ├── right columns: a.k:6 a.i:7 a.f:8 a.s:9 a.j:10
      │    ├── key: (11-15)
      │    ├── scan a
      │    │    ├── columns: a.k:1!null a.i:2!null a.f:3 a.s:4!null a.j:5
      │    │    ├── key: (1)
      │    │    └── fd: (1)-->(2-5), (2,4)-->(1,3,5), (2,3)~~>(1,4,5)
      │    └── scan a
      │         ├── columns: a.k:6!null a.i:7!null a.f:8 a.s:9!null a.j:10
      │         ├── key: (6)
      │         └── fd: (6)-->(7-10), (7,9)-->(6,8,10), (7,8)~~>(6,9,10)
      └── aggregations
           └── min [as=min:16, outer=(14)]
                └── s:14

# ScalarGroupBy case.
norm expect=EliminateGroupByProject
SELECT min(s) FROM (SELECT i, s FROM (SELECT * FROM a UNION SELECT * FROM a))
----
scalar-group-by
 ├── columns: min:16
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(16)
 ├── union
 │    ├── columns: k:11!null i:12!null f:13 s:14!null j:15
 │    ├── left columns: a.k:1 a.i:2 a.f:3 a.s:4 a.j:5
 │    ├── right columns: a.k:6 a.i:7 a.f:8 a.s:9 a.j:10
 │    ├── key: (11-15)
 │    ├── scan a
 │    │    ├── columns: a.k:1!null a.i:2!null a.f:3 a.s:4!null a.j:5
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2-5), (2,4)-->(1,3,5), (2,3)~~>(1,4,5)
 │    └── scan a
 │         ├── columns: a.k:6!null a.i:7!null a.f:8 a.s:9!null a.j:10
 │         ├── key: (6)
 │         └── fd: (6)-->(7-10), (7,9)-->(6,8,10), (7,8)~~>(6,9,10)
 └── aggregations
      └── min [as=min:16, outer=(14)]
           └── s:14

# DistinctOn case.
norm expect=EliminateGroupByProject
SELECT DISTINCT ON (i) s FROM (SELECT i, s, f FROM (SELECT * FROM a UNION SELECT * FROM a))
----
distinct-on
 ├── columns: s:14!null  [hidden: i:12!null]
 ├── grouping columns: i:12!null
 ├── key: (12)
 ├── fd: (12)-->(14)
 ├── union
 │    ├── columns: k:11!null i:12!null f:13 s:14!null j:15
 │    ├── left columns: a.k:1 a.i:2 a.f:3 a.s:4 a.j:5
 │    ├── right columns: a.k:6 a.i:7 a.f:8 a.s:9 a.j:10
 │    ├── key: (11-15)
 │    ├── scan a
 │    │    ├── columns: a.k:1!null a.i:2!null a.f:3 a.s:4!null a.j:5
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2-5), (2,4)-->(1,3,5), (2,3)~~>(1,4,5)
 │    └── scan a
 │         ├── columns: a.k:6!null a.i:7!null a.f:8 a.s:9!null a.j:10
 │         ├── key: (6)
 │         └── fd: (6)-->(7-10), (7,9)-->(6,8,10), (7,8)~~>(6,9,10)
 └── aggregations
      └── first-agg [as=s:14, outer=(14)]
           └── s:14

# UpsertDistinctOn case.
norm expect=EliminateGroupByProject
INSERT INTO nullablecols (rowid, c1, c2, c3)
SELECT i, i, i, i FROM (SELECT * FROM a WHERE EXISTS(SELECT * FROM a) AND k>0)
ON CONFLICT (c1) DO UPDATE SET c3=1
----
upsert nullablecols
 ├── columns: <none>
 ├── canary column: 18
 ├── fetch columns: c1:15 c2:16 c3:17 rowid:18
 ├── insert-mapping:
 │    ├── i:6 => c1:1
 │    ├── i:6 => c2:2
 │    ├── i:6 => c3:3
 │    └── i:6 => rowid:4
 ├── update-mapping:
 │    └── upsert_c3:22 => c3:3
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 └── project
      ├── columns: upsert_c3:22!null i:6!null c1:15 c2:16 c3:17 rowid:18
      ├── key: (6,18)
      ├── fd: (18)-->(15-17), (15)~~>(16-18), (16,17)~~>(15,18), (6,18)-->(22)
      ├── left-join (hash)
      │    ├── columns: i:6!null c1:15 c2:16 c3:17 rowid:18
      │    ├── key: (6,18)
      │    ├── fd: (18)-->(15-17), (15)~~>(16-18), (16,17)~~>(15,18)
      │    ├── upsert-distinct-on
      │    │    ├── columns: i:6!null
      │    │    ├── grouping columns: i:6!null
      │    │    ├── error-on-dup
      │    │    ├── key: (6)
      │    │    └── select
      │    │         ├── columns: k:5!null i:6!null
      │    │         ├── key: (5)
      │    │         ├── fd: (5)-->(6)
      │    │         ├── scan a
      │    │         │    ├── columns: k:5!null i:6!null
      │    │         │    ├── key: (5)
      │    │         │    └── fd: (5)-->(6)
      │    │         └── filters
      │    │              ├── exists [subquery]
      │    │              │    └── limit
      │    │              │         ├── columns: k:10!null i:11!null f:12 s:13!null j:14
      │    │              │         ├── cardinality: [0 - 1]
      │    │              │         ├── key: ()
      │    │              │         ├── fd: ()-->(10-14)
      │    │              │         ├── scan a
      │    │              │         │    ├── columns: k:10!null i:11!null f:12 s:13!null j:14
      │    │              │         │    ├── key: (10)
      │    │              │         │    ├── fd: (10)-->(11-14), (11,13)-->(10,12,14), (11,12)~~>(10,13,14)
      │    │              │         │    └── limit hint: 1.00
      │    │              │         └── 1
      │    │              └── k:5 > 0 [outer=(5), constraints=(/5: [/1 - ]; tight)]
      │    ├── scan nullablecols
      │    │    ├── columns: c1:15 c2:16 c3:17 rowid:18!null
      │    │    ├── key: (18)
      │    │    └── fd: (18)-->(15-17), (15)~~>(16-18), (16,17)~~>(15,18)
      │    └── filters
      │         └── i:6 = c1:15 [outer=(6,15), constraints=(/6: (/NULL - ]; /15: (/NULL - ]), fd=(6)==(15), (15)==(6)]
      └── projections
           └── CASE WHEN rowid:18 IS NULL THEN i:6 ELSE 1 END [as=upsert_c3:22, outer=(6,18)]

# Don't eliminate project if it computes extra column(s).
norm expect-not=EliminateGroupByProject
SELECT min(s) FROM (SELECT i+1 AS i2, s FROM a) GROUP BY i2
----
project
 ├── columns: min:7!null
 └── group-by
      ├── columns: i2:6!null min:7!null
      ├── grouping columns: i2:6!null
      ├── key: (6)
      ├── fd: (6)-->(7)
      ├── project
      │    ├── columns: i2:6!null s:4!null
      │    ├── scan a
      │    │    ├── columns: i:2!null s:4!null
      │    │    └── key: (2,4)
      │    └── projections
      │         └── i:2 + 1 [as=i2:6, outer=(2)]
      └── aggregations
           └── min [as=min:7, outer=(4)]
                └── s:4

# --------------------------------------------------
# ReduceGroupingCols
# --------------------------------------------------
norm expect=ReduceGroupingCols
SELECT k, min(i), f, s FROM a GROUP BY s, f, k
----
group-by
 ├── columns: k:1!null min:6!null f:3 s:4!null
 ├── grouping columns: k:1!null
 ├── key: (1)
 ├── fd: (1)-->(3,4,6)
 ├── scan a
 │    ├── columns: k:1!null i:2!null f:3 s:4!null
 │    ├── key: (1)
 │    └── fd: (1)-->(2-4), (2,4)-->(1,3), (2,3)~~>(1,4)
 └── aggregations
      ├── min [as=min:6, outer=(2)]
      │    └── i:2
      ├── const-agg [as=f:3, outer=(3)]
      │    └── f:3
      └── const-agg [as=s:4, outer=(4)]
           └── s:4

norm expect=ReduceGroupingCols
SELECT k, sum(DISTINCT i), f, s FROM a, xy GROUP BY s, f, k
----
group-by
 ├── columns: k:1!null sum:8!null f:3 s:4!null
 ├── grouping columns: k:1!null
 ├── key: (1)
 ├── fd: (1)-->(3,4,8)
 ├── inner-join (cross)
 │    ├── columns: k:1!null i:2!null f:3 s:4!null
 │    ├── fd: (1)-->(2-4), (2,4)-->(1,3), (2,3)~~>(1,4)
 │    ├── scan a
 │    │    ├── columns: k:1!null i:2!null f:3 s:4!null
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2-4), (2,4)-->(1,3), (2,3)~~>(1,4)
 │    ├── scan xy
 │    └── filters (true)
 └── aggregations
      ├── agg-distinct [as=sum:8, outer=(2)]
      │    └── sum
      │         └── i:2
      ├── const-agg [as=f:3, outer=(3)]
      │    └── f:3
      └── const-agg [as=s:4, outer=(4)]
           └── s:4

# Eliminated columns are not part of projection.
norm expect=ReduceGroupingCols
SELECT min(f) FROM a GROUP BY i, s, k
----
project
 ├── columns: min:6
 └── group-by
      ├── columns: i:2!null s:4!null min:6
      ├── grouping columns: i:2!null s:4!null
      ├── key: (2,4)
      ├── fd: (2,4)-->(6)
      ├── scan a
      │    ├── columns: i:2!null f:3 s:4!null
      │    ├── key: (2,4)
      │    └── fd: (2,4)-->(3), (2,3)~~>(4)
      └── aggregations
           └── min [as=min:6, outer=(3)]
                └── f:3

# All grouping columns eliminated.
norm expect=ReduceGroupingCols
SELECT sum(f), i FROM a GROUP BY k, i, f HAVING k=1
----
group-by
 ├── columns: sum:6 i:2!null
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(2,6)
 ├── select
 │    ├── columns: k:1!null i:2!null f:3
 │    ├── cardinality: [0 - 1]
 │    ├── key: ()
 │    ├── fd: ()-->(1-3)
 │    ├── scan a
 │    │    ├── columns: k:1!null i:2!null f:3
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2,3), (2,3)~~>(1)
 │    └── filters
 │         └── k:1 = 1 [outer=(1), constraints=(/1: [/1 - /1]; tight), fd=()-->(1)]
 └── aggregations
      ├── sum [as=sum:6, outer=(3)]
      │    └── f:3
      └── const-agg [as=i:2, outer=(2)]
           └── i:2

norm expect=ReduceGroupingCols
SELECT DISTINCT ON (k, f, s) i, f, x FROM a JOIN xy ON i=y
----
distinct-on
 ├── columns: i:2!null f:3 x:6!null  [hidden: k:1!null]
 ├── grouping columns: k:1!null
 ├── key: (1)
 ├── fd: (1)-->(2,3,6), (2,3)~~>(1), (6)-->(2)
 ├── inner-join (hash)
 │    ├── columns: k:1!null i:2!null f:3 x:6!null y:7!null
 │    ├── key: (1,6)
 │    ├── fd: (1)-->(2,3), (2,3)~~>(1), (6)-->(7), (2)==(7), (7)==(2)
 │    ├── scan a
 │    │    ├── columns: k:1!null i:2!null f:3
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2,3), (2,3)~~>(1)
 │    ├── scan xy
 │    │    ├── columns: x:6!null y:7
 │    │    ├── key: (6)
 │    │    └── fd: (6)-->(7)
 │    └── filters
 │         └── i:2 = y:7 [outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
 └── aggregations
      ├── first-agg [as=i:2, outer=(2)]
      │    └── i:2
      ├── first-agg [as=x:6, outer=(6)]
      │    └── x:6
      └── const-agg [as=f:3, outer=(3)]
           └── f:3

# --------------------------------------------------
# ReduceNotNullGroupingCols
# --------------------------------------------------

# UpsertDistinctOn should reduce non-nullable constant grouping column.
norm expect=ReduceNotNullGroupingCols
INSERT INTO xy (x)
SELECT y FROM xy WHERE y=0
ON CONFLICT (x) DO UPDATE SET y=1
----
upsert xy
 ├── columns: <none>
 ├── canary column: 6
 ├── fetch columns: x:6 y:7
 ├── insert-mapping:
 │    ├── y:4 => x:1
 │    └── column5:5 => y:2
 ├── update-mapping:
 │    └── upsert_y:10 => y:2
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 └── project
      ├── columns: upsert_y:10 y:4!null column5:5 x:6 y:7
      ├── key: (6)
      ├── fd: ()-->(4,5), (6)-->(7), (6)-->(10)
      ├── left-join (hash)
      │    ├── columns: y:4!null column5:5 x:6 y:7
      │    ├── key: (6)
      │    ├── fd: ()-->(4,5), (6)-->(7)
      │    ├── max1-row
      │    │    ├── columns: y:4!null column5:5
      │    │    ├── error: "UPSERT or INSERT...ON CONFLICT command cannot affect row a second time"
      │    │    ├── cardinality: [0 - 1]
      │    │    ├── key: ()
      │    │    ├── fd: ()-->(4,5)
      │    │    └── project
      │    │         ├── columns: column5:5 y:4!null
      │    │         ├── fd: ()-->(4,5)
      │    │         ├── select
      │    │         │    ├── columns: y:4!null
      │    │         │    ├── fd: ()-->(4)
      │    │         │    ├── scan xy
      │    │         │    │    └── columns: y:4
      │    │         │    └── filters
      │    │         │         └── y:4 = 0 [outer=(4), constraints=(/4: [/0 - /0]; tight), fd=()-->(4)]
      │    │         └── projections
      │    │              └── CAST(NULL AS INT8) [as=column5:5]
      │    ├── scan xy
      │    │    ├── columns: x:6!null y:7
      │    │    ├── key: (6)
      │    │    └── fd: (6)-->(7)
      │    └── filters
      │         └── y:4 = x:6 [outer=(4,6), constraints=(/4: (/NULL - ]; /6: (/NULL - ]), fd=(4)==(6), (6)==(4)]
      └── projections
           └── CASE WHEN x:6 IS NULL THEN column5:5 ELSE 1 END [as=upsert_y:10, outer=(5,6)]

# UpsertDistinctOn should not reduce nullable constant grouping column.
norm expect-not=ReduceNotNullGroupingCols
INSERT INTO xy (x)
SELECT y FROM xy WHERE y IS NULL
ON CONFLICT (x) DO UPDATE SET y=1
----
upsert xy
 ├── columns: <none>
 ├── canary column: 6
 ├── fetch columns: x:6 y:7
 ├── insert-mapping:
 │    ├── y:4 => x:1
 │    └── column5:5 => y:2
 ├── update-mapping:
 │    └── upsert_y:10 => y:2
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 └── project
      ├── columns: upsert_y:10 y:4 column5:5 x:6 y:7
      ├── lax-key: (4,6)
      ├── fd: ()-->(4,5), (6)-->(7), (6)-->(10)
      ├── left-join (hash)
      │    ├── columns: y:4 column5:5 x:6 y:7
      │    ├── lax-key: (4,6)
      │    ├── fd: ()-->(4,5), (6)-->(7)
      │    ├── upsert-distinct-on
      │    │    ├── columns: y:4 column5:5
      │    │    ├── grouping columns: y:4
      │    │    ├── error-on-dup
      │    │    ├── lax-key: (4)
      │    │    ├── fd: ()-->(4,5)
      │    │    ├── project
      │    │    │    ├── columns: column5:5 y:4
      │    │    │    ├── fd: ()-->(4,5)
      │    │    │    ├── select
      │    │    │    │    ├── columns: y:4
      │    │    │    │    ├── fd: ()-->(4)
      │    │    │    │    ├── scan xy
      │    │    │    │    │    └── columns: y:4
      │    │    │    │    └── filters
      │    │    │    │         └── y:4 IS NULL [outer=(4), constraints=(/4: [/NULL - /NULL]; tight), fd=()-->(4)]
      │    │    │    └── projections
      │    │    │         └── CAST(NULL AS INT8) [as=column5:5]
      │    │    └── aggregations
      │    │         └── first-agg [as=column5:5, outer=(5)]
      │    │              └── column5:5
      │    ├── scan xy
      │    │    ├── columns: x:6!null y:7
      │    │    ├── key: (6)
      │    │    └── fd: (6)-->(7)
      │    └── filters
      │         └── y:4 = x:6 [outer=(4,6), constraints=(/4: (/NULL - ]; /6: (/NULL - ]), fd=(4)==(6), (6)==(4)]
      └── projections
           └── CASE WHEN x:6 IS NULL THEN column5:5 ELSE 1 END [as=upsert_y:10, outer=(5,6)]

# Test removal of 2/3 grouping columns.
norm expect=ReduceNotNullGroupingCols
INSERT INTO abc (a, b, c)
SELECT 1, b, 2 FROM abc
ON CONFLICT (a, b, c) DO UPDATE SET a=1
----
upsert abc
 ├── columns: <none>
 ├── canary column: 9
 ├── fetch columns: a:9 b:10 c:11
 ├── insert-mapping:
 │    ├── "?column?":7 => a:1
 │    ├── b:5 => b:2
 │    └── "?column?":8 => c:3
 ├── update-mapping:
 │    └── "?column?":7 => a:1
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 └── left-join (hash)
      ├── columns: b:5!null "?column?":7!null "?column?":8!null a:9 b:10 c:11
      ├── key: (5,9-11)
      ├── fd: ()-->(7,8)
      ├── upsert-distinct-on
      │    ├── columns: b:5!null "?column?":7!null "?column?":8!null
      │    ├── grouping columns: b:5!null
      │    ├── error-on-dup
      │    ├── key: (5)
      │    ├── fd: ()-->(7,8)
      │    ├── project
      │    │    ├── columns: "?column?":7!null "?column?":8!null b:5!null
      │    │    ├── fd: ()-->(7,8)
      │    │    ├── scan abc
      │    │    │    └── columns: b:5!null
      │    │    └── projections
      │    │         ├── 1 [as="?column?":7]
      │    │         └── 2 [as="?column?":8]
      │    └── aggregations
      │         ├── const-agg [as="?column?":7, outer=(7)]
      │         │    └── "?column?":7
      │         └── const-agg [as="?column?":8, outer=(8)]
      │              └── "?column?":8
      ├── scan abc
      │    ├── columns: a:9!null b:10!null c:11!null
      │    └── key: (9-11)
      └── filters
           ├── "?column?":7 = a:9 [outer=(7,9), constraints=(/7: (/NULL - ]; /9: (/NULL - ]), fd=(7)==(9), (9)==(7)]
           ├── b:5 = b:10 [outer=(5,10), constraints=(/5: (/NULL - ]; /10: (/NULL - ]), fd=(5)==(10), (10)==(5)]
           └── "?column?":8 = c:11 [outer=(8,11), constraints=(/8: (/NULL - ]; /11: (/NULL - ]), fd=(8)==(11), (11)==(8)]

# Test removal of not-null column, but not nullable column.
norm expect=ReduceNotNullGroupingCols
INSERT INTO abc
SELECT NULL, b, c FROM abc WHERE b=1
ON CONFLICT (a, b, c) DO UPDATE SET c=2
----
upsert abc
 ├── columns: <none>
 ├── canary column: 8
 ├── fetch columns: a:8 b:9 c:10
 ├── insert-mapping:
 │    ├── "?column?":7 => a:1
 │    ├── b:5 => b:2
 │    └── c:6 => c:3
 ├── update-mapping:
 │    └── upsert_c:14 => c:3
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 └── project
      ├── columns: upsert_c:14!null b:5!null c:6!null "?column?":7 a:8 b:9 c:10
      ├── lax-key: (6-10)
      ├── fd: ()-->(5,7), (6,8)-->(14)
      ├── left-join (hash)
      │    ├── columns: b:5!null c:6!null "?column?":7 a:8 b:9 c:10
      │    ├── lax-key: (6-10)
      │    ├── fd: ()-->(5,7)
      │    ├── upsert-distinct-on
      │    │    ├── columns: b:5!null c:6!null "?column?":7
      │    │    ├── grouping columns: c:6!null "?column?":7
      │    │    ├── error-on-dup
      │    │    ├── lax-key: (6,7)
      │    │    ├── fd: ()-->(5,7)
      │    │    ├── project
      │    │    │    ├── columns: "?column?":7 b:5!null c:6!null
      │    │    │    ├── fd: ()-->(5,7)
      │    │    │    ├── select
      │    │    │    │    ├── columns: b:5!null c:6!null
      │    │    │    │    ├── fd: ()-->(5)
      │    │    │    │    ├── scan abc
      │    │    │    │    │    └── columns: b:5!null c:6!null
      │    │    │    │    └── filters
      │    │    │    │         └── b:5 = 1 [outer=(5), constraints=(/5: [/1 - /1]; tight), fd=()-->(5)]
      │    │    │    └── projections
      │    │    │         └── CAST(NULL AS INT8) [as="?column?":7]
      │    │    └── aggregations
      │    │         └── const-agg [as=b:5, outer=(5)]
      │    │              └── b:5
      │    ├── scan abc
      │    │    ├── columns: a:8!null b:9!null c:10!null
      │    │    └── key: (8-10)
      │    └── filters
      │         ├── "?column?":7 = a:8 [outer=(7,8), constraints=(/7: (/NULL - ]; /8: (/NULL - ]), fd=(7)==(8), (8)==(7)]
      │         ├── b:5 = b:9 [outer=(5,9), constraints=(/5: (/NULL - ]; /9: (/NULL - ]), fd=(5)==(9), (9)==(5)]
      │         └── c:6 = c:10 [outer=(6,10), constraints=(/6: (/NULL - ]; /10: (/NULL - ]), fd=(6)==(10), (10)==(6)]
      └── projections
           └── CASE WHEN a:8 IS NULL THEN c:6 ELSE 2 END [as=upsert_c:14, outer=(6,8)]

# --------------------------------------------------
# EliminateAggDistinctForKeys
# --------------------------------------------------

# ScalarGroupBy with key argument. Only the first aggregation can be
# simplified.
norm expect=EliminateAggDistinctForKeys
SELECT sum(DISTINCT k), sum(DISTINCT i) FROM a
----
scalar-group-by
 ├── columns: sum:6 sum:7
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(6,7)
 ├── scan a
 │    ├── columns: k:1!null i:2!null
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── aggregations
      ├── sum [as=sum:6, outer=(1)]
      │    └── k:1
      └── agg-distinct [as=sum:7, outer=(2)]
           └── sum
                └── i:2

norm expect=EliminateAggDistinctForKeys
SELECT string_agg(DISTINCT s, ', ') FROM s
----
scalar-group-by
 ├── columns: string_agg:3
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(3)
 ├── project
 │    ├── columns: column2:2!null s:1!null
 │    ├── key: (1)
 │    ├── fd: ()-->(2)
 │    ├── scan s
 │    │    ├── columns: s:1!null
 │    │    └── key: (1)
 │    └── projections
 │         └── ', ' [as=column2:2]
 └── aggregations
      └── string-agg [as=string_agg:3, outer=(1,2)]
           ├── s:1
           └── column2:2

# GroupBy with key argument.
norm expect=EliminateAggDistinctForKeys
SELECT sum(DISTINCT k) FROM a GROUP BY i
----
project
 ├── columns: sum:6!null
 └── group-by
      ├── columns: i:2!null sum:6!null
      ├── grouping columns: i:2!null
      ├── key: (2)
      ├── fd: (2)-->(6)
      ├── scan a
      │    ├── columns: k:1!null i:2!null
      │    ├── key: (1)
      │    └── fd: (1)-->(2)
      └── aggregations
           └── sum [as=sum:6, outer=(1)]
                └── k:1

# GroupBy with no key.
norm expect-not=EliminateAggDistinctForKeys
SELECT sum(DISTINCT a) FROM abc GROUP BY b
----
project
 ├── columns: sum:4!null
 └── group-by
      ├── columns: b:2!null sum:4!null
      ├── grouping columns: b:2!null
      ├── key: (2)
      ├── fd: (2)-->(4)
      ├── scan abc
      │    └── columns: a:1!null b:2!null
      └── aggregations
           └── agg-distinct [as=sum:4, outer=(1)]
                └── sum
                     └── a:1

# GroupBy with composite key formed by argument plus grouping columns.
norm expect=EliminateAggDistinctForKeys
SELECT sum(DISTINCT a) FROM abc GROUP BY b, c
----
project
 ├── columns: sum:4!null
 └── group-by
      ├── columns: b:2!null c:3!null sum:4!null
      ├── grouping columns: b:2!null c:3!null
      ├── key: (2,3)
      ├── fd: (2,3)-->(4)
      ├── scan abc
      │    ├── columns: a:1!null b:2!null c:3!null
      │    └── key: (1-3)
      └── aggregations
           └── sum [as=sum:4, outer=(1)]
                └── a:1

# GroupBy with multiple aggregations simplified.
norm expect=EliminateAggDistinctForKeys
SELECT sum(DISTINCT i), avg(DISTINCT f) FROM a GROUP BY k
----
project
 ├── columns: sum:6!null avg:7
 └── group-by
      ├── columns: k:1!null sum:6!null avg:7
      ├── grouping columns: k:1!null
      ├── key: (1)
      ├── fd: (1)-->(6,7)
      ├── scan a
      │    ├── columns: k:1!null i:2!null f:3
      │    ├── key: (1)
      │    └── fd: (1)-->(2,3), (2,3)~~>(1)
      └── aggregations
           ├── sum [as=sum:6, outer=(2)]
           │    └── i:2
           └── avg [as=avg:7, outer=(3)]
                └── f:3

# GroupBy where only some aggregations are simplified (the table has
# keys u,v and v,w).
norm expect=EliminateAggDistinctForKeys
SELECT sum(DISTINCT u), stddev(DISTINCT w), avg(DISTINCT z) FROM uvwz GROUP BY v
----
project
 ├── columns: sum:6!null stddev:7!null avg:8!null
 └── group-by
      ├── columns: v:2!null sum:6!null stddev:7!null avg:8!null
      ├── grouping columns: v:2!null
      ├── key: (2)
      ├── fd: (2)-->(6-8)
      ├── scan uvwz
      │    ├── columns: u:1!null v:2!null w:3!null z:4!null
      │    ├── key: (2,3)
      │    └── fd: (1,2)-->(3,4), (2,3)-->(1,4)
      └── aggregations
           ├── sum [as=sum:6, outer=(1)]
           │    └── u:1
           ├── std-dev [as=stddev:7, outer=(3)]
           │    └── w:3
           └── agg-distinct [as=avg:8, outer=(4)]
                └── avg
                     └── z:4

# --------------------------------------------------
# EliminateAggFilteredDistinctForKeys
# --------------------------------------------------

# ScalarGroupBy with key argument. Only the first aggregation can be
# simplified.
norm expect=EliminateAggFilteredDistinctForKeys
SELECT sum(DISTINCT k) FILTER (WHERE k > 0), sum(DISTINCT i) FILTER (WHERE i > 0) FROM a
----
scalar-group-by
 ├── columns: sum:7 sum:9
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(7,9)
 ├── project
 │    ├── columns: column6:6!null column8:8!null k:1!null i:2!null
 │    ├── key: (1)
 │    ├── fd: (1)-->(2,6), (2)-->(8)
 │    ├── scan a
 │    │    ├── columns: k:1!null i:2!null
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2)
 │    └── projections
 │         ├── k:1 > 0 [as=column6:6, outer=(1)]
 │         └── i:2 > 0 [as=column8:8, outer=(2)]
 └── aggregations
      ├── agg-filter [as=sum:7, outer=(1,6)]
      │    ├── sum
      │    │    └── k:1
      │    └── column6:6
      └── agg-filter [as=sum:9, outer=(2,8)]
           ├── agg-distinct
           │    └── sum
           │         └── i:2
           └── column8:8

norm expect=EliminateAggFilteredDistinctForKeys
SELECT string_agg(DISTINCT s, ',') FILTER (WHERE s > 'a') FROM s
----
scalar-group-by
 ├── columns: string_agg:4
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(4)
 ├── project
 │    ├── columns: column2:2!null column3:3!null s:1!null
 │    ├── key: (1)
 │    ├── fd: ()-->(2), (1)-->(3)
 │    ├── scan s
 │    │    ├── columns: s:1!null
 │    │    └── key: (1)
 │    └── projections
 │         ├── ',' [as=column2:2]
 │         └── s:1 > 'a' [as=column3:3, outer=(1)]
 └── aggregations
      └── agg-filter [as=string_agg:4, outer=(1-3)]
           ├── string-agg
           │    ├── s:1
           │    └── column2:2
           └── column3:3

# GroupBy with key argument.
norm expect=EliminateAggFilteredDistinctForKeys
SELECT sum(DISTINCT k) FILTER (WHERE f > 0) FROM a GROUP BY i
----
project
 ├── columns: sum:7
 └── group-by
      ├── columns: i:2!null sum:7
      ├── grouping columns: i:2!null
      ├── key: (2)
      ├── fd: (2)-->(7)
      ├── project
      │    ├── columns: column6:6 k:1!null i:2!null
      │    ├── key: (1)
      │    ├── fd: (1)-->(2,6)
      │    ├── scan a
      │    │    ├── columns: k:1!null i:2!null f:3
      │    │    ├── key: (1)
      │    │    └── fd: (1)-->(2,3), (2,3)~~>(1)
      │    └── projections
      │         └── f:3 > 0.0 [as=column6:6, outer=(3)]
      └── aggregations
           └── agg-filter [as=sum:7, outer=(1,6)]
                ├── sum
                │    └── k:1
                └── column6:6

# GroupBy with no key.
norm expect-not=EliminateAggFilteredDistinctForKeys
SELECT sum(DISTINCT a) FILTER (WHERE c > 0) FROM abc GROUP BY b
----
project
 ├── columns: sum:5
 └── group-by
      ├── columns: b:2!null sum:5
      ├── grouping columns: b:2!null
      ├── key: (2)
      ├── fd: (2)-->(5)
      ├── project
      │    ├── columns: column4:4!null a:1!null b:2!null
      │    ├── scan abc
      │    │    ├── columns: a:1!null b:2!null c:3!null
      │    │    └── key: (1-3)
      │    └── projections
      │         └── c:3 > 0 [as=column4:4, outer=(3)]
      └── aggregations
           └── agg-filter [as=sum:5, outer=(1,4)]
                ├── agg-distinct
                │    └── sum
                │         └── a:1
                └── column4:4

# GroupBy with composite key formed by argument plus grouping columns.
norm expect=EliminateAggFilteredDistinctForKeys
SELECT sum(DISTINCT a) FILTER (WHERE c > 0) FROM abc GROUP BY b, c
----
project
 ├── columns: sum:5
 └── group-by
      ├── columns: b:2!null c:3!null sum:5
      ├── grouping columns: b:2!null c:3!null
      ├── key: (2,3)
      ├── fd: (2,3)-->(5)
      ├── project
      │    ├── columns: column4:4!null a:1!null b:2!null c:3!null
      │    ├── key: (1-3)
      │    ├── fd: (3)-->(4)
      │    ├── scan abc
      │    │    ├── columns: a:1!null b:2!null c:3!null
      │    │    └── key: (1-3)
      │    └── projections
      │         └── c:3 > 0 [as=column4:4, outer=(3)]
      └── aggregations
           └── agg-filter [as=sum:5, outer=(1,4)]
                ├── sum
                │    └── a:1
                └── column4:4

# GroupBy with multiple aggregations simplified.
norm expect=EliminateAggFilteredDistinctForKeys
SELECT sum(DISTINCT i) FILTER (WHERE f > 0), avg(DISTINCT f) FILTER (WHERE i > 0) FROM a GROUP BY k
----
project
 ├── columns: sum:7 avg:9
 └── group-by
      ├── columns: k:1!null sum:7 avg:9
      ├── grouping columns: k:1!null
      ├── key: (1)
      ├── fd: (1)-->(7,9)
      ├── project
      │    ├── columns: column6:6 column8:8!null k:1!null i:2!null f:3
      │    ├── key: (1)
      │    ├── fd: (1)-->(2,3,6), (2,3)~~>(1), (2)-->(8)
      │    ├── scan a
      │    │    ├── columns: k:1!null i:2!null f:3
      │    │    ├── key: (1)
      │    │    └── fd: (1)-->(2,3), (2,3)~~>(1)
      │    └── projections
      │         ├── f:3 > 0.0 [as=column6:6, outer=(3)]
      │         └── i:2 > 0 [as=column8:8, outer=(2)]
      └── aggregations
           ├── agg-filter [as=sum:7, outer=(2,6)]
           │    ├── sum
           │    │    └── i:2
           │    └── column6:6
           └── agg-filter [as=avg:9, outer=(3,8)]
                ├── avg
                │    └── f:3
                └── column8:8

# GroupBy where only some aggregations are simplified (the table has
# keys u,v and v,w).
norm expect=EliminateAggFilteredDistinctForKeys
SELECT
    sum(DISTINCT u) FILTER (WHERE u > 0),
    stddev(DISTINCT w) FILTER (WHERE w > 0),
    avg(DISTINCT z) FILTER (WHERE z > 0)
FROM uvwz
GROUP BY v
----
project
 ├── columns: sum:7 stddev:9 avg:11
 └── group-by
      ├── columns: v:2!null sum:7 stddev:9 avg:11
      ├── grouping columns: v:2!null
      ├── key: (2)
      ├── fd: (2)-->(7,9,11)
      ├── project
      │    ├── columns: column6:6!null column8:8!null column10:10!null u:1!null v:2!null w:3!null z:4!null
      │    ├── key: (2,3)
      │    ├── fd: (1,2)-->(3,4), (2,3)-->(1,4), (1)-->(6), (3)-->(8), (4)-->(10)
      │    ├── scan uvwz
      │    │    ├── columns: u:1!null v:2!null w:3!null z:4!null
      │    │    ├── key: (2,3)
      │    │    └── fd: (1,2)-->(3,4), (2,3)-->(1,4)
      │    └── projections
      │         ├── u:1 > 0 [as=column6:6, outer=(1)]
      │         ├── w:3 > 0 [as=column8:8, outer=(3)]
      │         └── z:4 > 0 [as=column10:10, outer=(4)]
      └── aggregations
           ├── agg-filter [as=sum:7, outer=(1,6)]
           │    ├── sum
           │    │    └── u:1
           │    └── column6:6
           ├── agg-filter [as=stddev:9, outer=(3,8)]
           │    ├── std-dev
           │    │    └── w:3
           │    └── column8:8
           └── agg-filter [as=avg:11, outer=(4,10)]
                ├── agg-distinct
                │    └── avg
                │         └── z:4
                └── column10:10

# --------------------------------------------------
# EliminateDistinctOnNoColumns
# --------------------------------------------------

norm expect=EliminateDistinctOnNoColumns
SELECT DISTINCT ON (a) a, b FROM abc WHERE a = 1
----
limit
 ├── columns: a:1!null b:2!null
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1,2)
 ├── select
 │    ├── columns: a:1!null b:2!null
 │    ├── fd: ()-->(1)
 │    ├── limit hint: 1.00
 │    ├── scan abc
 │    │    ├── columns: a:1!null b:2!null
 │    │    └── limit hint: 100.00
 │    └── filters
 │         └── a:1 = 1 [outer=(1), constraints=(/1: [/1 - /1]; tight), fd=()-->(1)]
 └── 1

norm expect=EliminateDistinctOnNoColumns
SELECT DISTINCT ON (b) b, c FROM abc WHERE b = 1 ORDER BY b, c
----
limit
 ├── columns: b:2!null c:3!null
 ├── internal-ordering: +3 opt(2)
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(2,3)
 ├── sort
 │    ├── columns: b:2!null c:3!null
 │    ├── fd: ()-->(2)
 │    ├── ordering: +3 opt(2) [actual: +3]
 │    ├── limit hint: 1.00
 │    └── select
 │         ├── columns: b:2!null c:3!null
 │         ├── fd: ()-->(2)
 │         ├── scan abc
 │         │    └── columns: b:2!null c:3!null
 │         └── filters
 │              └── b:2 = 1 [outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
 └── 1

# --------------------------------------------------
# EliminateUpsertDistinctOnNoColumns
# --------------------------------------------------
norm expect=EliminateUpsertDistinctOnNoColumns
INSERT INTO a (k, i, s) SELECT 1, i, 'foo' FROM a WHERE i = 1
ON CONFLICT (s, i) DO UPDATE SET f=1.1
----
upsert a
 ├── columns: <none>
 ├── canary column: 15
 ├── fetch columns: k:15 i:16 f:17 s:18 j:19
 ├── insert-mapping:
 │    ├── "?column?":11 => k:1
 │    ├── i:7 => i:2
 │    ├── column13:13 => f:3
 │    ├── "?column?":12 => s:4
 │    └── column14:14 => j:5
 ├── update-mapping:
 │    └── upsert_f:23 => f:3
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 └── project
      ├── columns: upsert_f:23 i:7!null "?column?":11!null "?column?":12!null column13:13 column14:14 k:15 i:16 f:17 s:18 j:19
      ├── key: (15)
      ├── fd: ()-->(7,11-14), (15)-->(16-19,23), (16,18)-->(15,17,19), (16,17)~~>(15,18,19)
      ├── left-join (hash)
      │    ├── columns: i:7!null "?column?":11!null "?column?":12!null column13:13 column14:14 k:15 i:16 f:17 s:18 j:19
      │    ├── key: (15)
      │    ├── fd: ()-->(7,11-14), (15)-->(16-19), (16,18)-->(15,17,19), (16,17)~~>(15,18,19)
      │    ├── max1-row
      │    │    ├── columns: i:7!null "?column?":11!null "?column?":12!null column13:13 column14:14
      │    │    ├── error: "UPSERT or INSERT...ON CONFLICT command cannot affect row a second time"
      │    │    ├── cardinality: [0 - 1]
      │    │    ├── key: ()
      │    │    ├── fd: ()-->(7,11-14)
      │    │    └── project
      │    │         ├── columns: column13:13 column14:14 "?column?":11!null "?column?":12!null i:7!null
      │    │         ├── fd: ()-->(7,11-14)
      │    │         ├── select
      │    │         │    ├── columns: i:7!null
      │    │         │    ├── fd: ()-->(7)
      │    │         │    ├── scan a
      │    │         │    │    └── columns: i:7!null
      │    │         │    └── filters
      │    │         │         └── i:7 = 1 [outer=(7), constraints=(/7: [/1 - /1]; tight), fd=()-->(7)]
      │    │         └── projections
      │    │              ├── CAST(NULL AS FLOAT8) [as=column13:13]
      │    │              ├── CAST(NULL AS JSONB) [as=column14:14]
      │    │              ├── 1 [as="?column?":11]
      │    │              └── 'foo' [as="?column?":12]
      │    ├── scan a
      │    │    ├── columns: k:15!null i:16!null f:17 s:18!null j:19
      │    │    ├── key: (15)
      │    │    └── fd: (15)-->(16-19), (16,18)-->(15,17,19), (16,17)~~>(15,18,19)
      │    └── filters
      │         ├── i:7 = i:16 [outer=(7,16), constraints=(/7: (/NULL - ]; /16: (/NULL - ]), fd=(7)==(16), (16)==(7)]
      │         └── "?column?":12 = s:18 [outer=(12,18), constraints=(/12: (/NULL - ]; /18: (/NULL - ]), fd=(12)==(18), (18)==(12)]
      └── projections
           └── CASE WHEN k:15 IS NULL THEN column13:13 ELSE 1.1 END [as=upsert_f:23, outer=(13,15)]

# --------------------------------------------------
# EliminateDistinctOnValues
# --------------------------------------------------

# Eliminate DistinctOn when its immediate input is a Values operator.
norm expect=EliminateDistinctOnValues
SELECT DISTINCT ON (x) * FROM (VALUES (1), (2)) t(x)
----
values
 ├── columns: x:1!null
 ├── cardinality: [2 - 2]
 ├── (1,)
 └── (2,)

# Eliminate DistinctOn when Values operator is below Project, Select, and
# LeftJoin operators.
norm expect=EliminateDistinctOnValues
SELECT DISTINCT ON (x, y, z) *, x+1
FROM (VALUES (1, 2, 3), (4, 5, 6)) t(x, y, z)
LEFT JOIN (SELECT a, b, c FROM abc)
ON a=x AND b=y AND c=z
WHERE x > 100 OR b > 100
----
project
 ├── columns: x:1!null y:2!null z:3!null a:4 b:5 c:6 "?column?":7!null
 ├── fd: (1)-->(7)
 ├── select
 │    ├── columns: column1:1!null column2:2!null column3:3!null a:4 b:5 c:6
 │    ├── left-join (hash)
 │    │    ├── columns: column1:1!null column2:2!null column3:3!null a:4 b:5 c:6
 │    │    ├── cardinality: [2 - ]
 │    │    ├── values
 │    │    │    ├── columns: column1:1!null column2:2!null column3:3!null
 │    │    │    ├── cardinality: [2 - 2]
 │    │    │    ├── (1, 2, 3)
 │    │    │    └── (4, 5, 6)
 │    │    ├── scan abc
 │    │    │    ├── columns: a:4!null b:5!null c:6!null
 │    │    │    └── key: (4-6)
 │    │    └── filters
 │    │         ├── a:4 = column1:1 [outer=(1,4), constraints=(/1: (/NULL - ]; /4: (/NULL - ]), fd=(1)==(4), (4)==(1)]
 │    │         ├── b:5 = column2:2 [outer=(2,5), constraints=(/2: (/NULL - ]; /5: (/NULL - ]), fd=(2)==(5), (5)==(2)]
 │    │         └── c:6 = column3:3 [outer=(3,6), constraints=(/3: (/NULL - ]; /6: (/NULL - ]), fd=(3)==(6), (6)==(3)]
 │    └── filters
 │         └── (column1:1 > 100) OR (b:5 > 100) [outer=(1,5)]
 └── projections
      └── column1:1 + 1 [as="?column?":7, outer=(1)]

# Right input of left join does not have a key, so left side may have dups.
norm expect-not=EliminateDistinctOnValues
SELECT DISTINCT ON (x) *
FROM (VALUES (1), (2)) t(x)
LEFT JOIN (SELECT a FROM abc)
ON a=x
----
distinct-on
 ├── columns: x:1!null a:2
 ├── grouping columns: column1:1!null
 ├── cardinality: [1 - ]
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── left-join (hash)
 │    ├── columns: column1:1!null a:2
 │    ├── cardinality: [2 - ]
 │    ├── values
 │    │    ├── columns: column1:1!null
 │    │    ├── cardinality: [2 - 2]
 │    │    ├── (1,)
 │    │    └── (2,)
 │    ├── scan abc
 │    │    └── columns: a:2!null
 │    └── filters
 │         └── a:2 = column1:1 [outer=(1,2), constraints=(/1: (/NULL - ]; /2: (/NULL - ]), fd=(1)==(2), (2)==(1)]
 └── aggregations
      └── first-agg [as=a:2, outer=(2)]
           └── a:2

# Left join does not join on all columns of the right input's key, so dups are
# possible.
norm expect-not=EliminateDistinctOnValues
SELECT DISTINCT ON (x, y) *
FROM (VALUES (1, 2), (3, 4)) t(x, y)
LEFT JOIN (SELECT * FROM abc)
ON x=a AND y=c
----
distinct-on
 ├── columns: x:1!null y:2!null a:3 b:4 c:5
 ├── grouping columns: column1:1!null column2:2!null
 ├── cardinality: [1 - ]
 ├── key: (1,2)
 ├── fd: (1,2)-->(3-5)
 ├── left-join (hash)
 │    ├── columns: column1:1!null column2:2!null a:3 b:4 c:5
 │    ├── cardinality: [2 - ]
 │    ├── values
 │    │    ├── columns: column1:1!null column2:2!null
 │    │    ├── cardinality: [2 - 2]
 │    │    ├── (1, 2)
 │    │    └── (3, 4)
 │    ├── scan abc
 │    │    ├── columns: a:3!null b:4!null c:5!null
 │    │    └── key: (3-5)
 │    └── filters
 │         ├── column1:1 = a:3 [outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 │         └── column2:2 = c:5 [outer=(2,5), constraints=(/2: (/NULL - ]; /5: (/NULL - ]), fd=(2)==(5), (5)==(2)]
 └── aggregations
      ├── first-agg [as=a:3, outer=(3)]
      │    └── a:3
      ├── first-agg [as=b:4, outer=(4)]
      │    └── b:4
      └── first-agg [as=c:5, outer=(5)]
           └── c:5

# Grouping columns are not passthrough Project columns.
norm expect-not=EliminateDistinctOnValues
SELECT DISTINCT ON (y) *
FROM (SELECT x, x+1 AS y FROM (VALUES (1), (2)) t(x))
----
distinct-on
 ├── columns: x:1!null y:2!null
 ├── grouping columns: y:2!null
 ├── cardinality: [1 - 2]
 ├── key: (2)
 ├── fd: (1)-->(2), (2)-->(1)
 ├── project
 │    ├── columns: y:2!null column1:1!null
 │    ├── cardinality: [2 - 2]
 │    ├── fd: (1)-->(2)
 │    ├── values
 │    │    ├── columns: column1:1!null
 │    │    ├── cardinality: [2 - 2]
 │    │    ├── (1,)
 │    │    └── (2,)
 │    └── projections
 │         └── column1:1 + 1 [as=y:2, outer=(1)]
 └── aggregations
      └── first-agg [as=column1:1, outer=(1)]
           └── column1:1

# Grouping columns are on the right side of a LeftJoin.
norm expect-not=EliminateDistinctOnValues
SELECT DISTINCT ON (x) *
FROM (SELECT k FROM a)
LEFT JOIN (VALUES (1), (2)) t(x)
ON k=x
----
distinct-on
 ├── columns: k:1!null x:6
 ├── grouping columns: column1:6
 ├── key: (6)
 ├── fd: (6)-->(1)
 ├── left-join (hash)
 │    ├── columns: k:1!null column1:6
 │    ├── scan a
 │    │    ├── columns: k:1!null
 │    │    └── key: (1)
 │    ├── values
 │    │    ├── columns: column1:6!null
 │    │    ├── cardinality: [2 - 2]
 │    │    ├── (1,)
 │    │    └── (2,)
 │    └── filters
 │         └── k:1 = column1:6 [outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
 └── aggregations
      └── first-agg [as=k:1, outer=(1)]
           └── k:1

# DistinctOn with multiple grouping columns should be eliminated when there are
# not duplicate rows.
norm expect=EliminateDistinctOnValues
SELECT DISTINCT ON (b, c) * FROM (VALUES (1, 1, 1, 1), (1, 2, 2, 1)) t(a, b, c, d)
----
values
 ├── columns: a:1!null b:2!null c:3!null d:4!null
 ├── cardinality: [2 - 2]
 ├── (1, 1, 1, 1)
 └── (1, 2, 2, 1)

# Composite string type should be considered as not distinct.
norm expect-not=EliminateDistinctOnValues
SELECT DISTINCT ON (x) * FROM (VALUES ('ä' COLLATE en), (e'a\u0308' COLLATE en)) t(x)
----
distinct-on
 ├── columns: x:1!null
 ├── grouping columns: column1:1!null
 ├── cardinality: [1 - 2]
 ├── key: (1)
 └── values
      ├── columns: column1:1!null
      ├── cardinality: [2 - 2]
      ├── (e'\u00E4' COLLATE en,)
      └── (e'a\u0308' COLLATE en,)

# Composite decimal type should be considered as not distinct.
norm expect-not=EliminateDistinctOnValues
SELECT DISTINCT ON (x) * FROM (VALUES (1.0::decimal), (1.00::decimal)) t(x)
----
distinct-on
 ├── columns: x:1!null
 ├── grouping columns: column1:1!null
 ├── cardinality: [1 - 2]
 ├── key: (1)
 └── values
      ├── columns: column1:1!null
      ├── cardinality: [2 - 2]
      ├── (1.0,)
      └── (1.00,)

# Non-constant value should be considered as not distinct.
norm expect-not=EliminateDistinctOnValues
SELECT DISTINCT ON (x) * FROM (VALUES (1), (unique_rowid())) t(x)
----
distinct-on
 ├── columns: x:1
 ├── grouping columns: column1:1
 ├── cardinality: [1 - 2]
 ├── side-effects
 ├── key: (1)
 └── values
      ├── columns: column1:1
      ├── cardinality: [2 - 2]
      ├── side-effects
      ├── (1,)
      └── (unique_rowid(),)

# Tuple values are not handled.
norm expect-not=EliminateDistinctOnValues
SELECT DISTINCT ON (x) * FROM (VALUES ((1, 2, 3)), ((1, 2, 3))) t(x)
----
distinct-on
 ├── columns: x:1
 ├── grouping columns: column1:1
 ├── cardinality: [1 - 2]
 ├── key: (1)
 └── values
      ├── columns: column1:1
      ├── cardinality: [2 - 2]
      ├── ((1, 2, 3),)
      └── ((1, 2, 3),)

# DistinctOn should not be eliminated when there are duplicate rows.
norm expect-not=EliminateDistinctOnValues
SELECT DISTINCT ON (y, z) * FROM (VALUES (1, 1, 1), (2, 1, 1)) t(x, y, z)
----
distinct-on
 ├── columns: x:1!null y:2!null z:3!null
 ├── grouping columns: column2:2!null column3:3!null
 ├── cardinality: [1 - 2]
 ├── key: (2,3)
 ├── fd: (2,3)-->(1)
 ├── values
 │    ├── columns: column1:1!null column2:2!null column3:3!null
 │    ├── cardinality: [2 - 2]
 │    ├── (1, 1, 1)
 │    └── (2, 1, 1)
 └── aggregations
      └── first-agg [as=column1:1, outer=(1)]
           └── column1:1

# DistinctOn treats NULL values as not distinct, so it can't be eliminated when
# there are duplicate NULL values.
norm expect-not=EliminateDistinctOnValues
SELECT DISTINCT ON (x) * FROM (VALUES (NULL), (NULL)) t(x)
----
distinct-on
 ├── columns: x:1
 ├── grouping columns: column1:1
 ├── cardinality: [1 - 2]
 ├── key: (1)
 └── values
      ├── columns: column1:1
      ├── cardinality: [2 - 2]
      ├── (NULL,)
      └── (NULL,)

# UpsertDistinctOn treats NULL values as distinct, so it can be eliminated.
norm expect=EliminateDistinctOnValues
INSERT INTO a (k, s, i) VALUES (1, NULL, NULL), (1, NULL, NULL)
ON CONFLICT (s, i) DO UPDATE SET f=1.0
----
upsert a
 ├── columns: <none>
 ├── canary column: 11
 ├── fetch columns: k:11 i:12 f:13 s:14 j:15
 ├── insert-mapping:
 │    ├── column1:6 => k:1
 │    ├── column3:8 => i:2
 │    ├── column9:9 => f:3
 │    ├── column2:7 => s:4
 │    └── column10:10 => j:5
 ├── update-mapping:
 │    └── upsert_f:19 => f:3
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 └── project
      ├── columns: upsert_f:19 column1:6!null column2:7 column3:8 column9:9 column10:10 k:11 i:12 f:13 s:14 j:15
      ├── cardinality: [2 - ]
      ├── fd: ()-->(9,10), (11)-->(12-15), (12,14)-->(11,13,15), (12,13)~~>(11,14,15)
      ├── left-join (hash)
      │    ├── columns: column1:6!null column2:7 column3:8 column9:9 column10:10 k:11 i:12 f:13 s:14 j:15
      │    ├── cardinality: [2 - ]
      │    ├── fd: ()-->(9,10), (11)-->(12-15), (12,14)-->(11,13,15), (12,13)~~>(11,14,15)
      │    ├── project
      │    │    ├── columns: column9:9 column10:10 column1:6!null column2:7 column3:8
      │    │    ├── cardinality: [2 - 2]
      │    │    ├── fd: ()-->(9,10)
      │    │    ├── values
      │    │    │    ├── columns: column1:6!null column2:7 column3:8
      │    │    │    ├── cardinality: [2 - 2]
      │    │    │    ├── (1, NULL, NULL)
      │    │    │    └── (1, NULL, NULL)
      │    │    └── projections
      │    │         ├── CAST(NULL AS FLOAT8) [as=column9:9]
      │    │         └── CAST(NULL AS JSONB) [as=column10:10]
      │    ├── scan a
      │    │    ├── columns: k:11!null i:12!null f:13 s:14!null j:15
      │    │    ├── key: (11)
      │    │    └── fd: (11)-->(12-15), (12,14)-->(11,13,15), (12,13)~~>(11,14,15)
      │    └── filters
      │         ├── column3:8 = i:12 [outer=(8,12), constraints=(/8: (/NULL - ]; /12: (/NULL - ]), fd=(8)==(12), (12)==(8)]
      │         └── column2:7 = s:14 [outer=(7,14), constraints=(/7: (/NULL - ]; /14: (/NULL - ]), fd=(7)==(14), (14)==(7)]
      └── projections
           └── CASE WHEN k:11 IS NULL THEN column9:9 ELSE 1.0 END [as=upsert_f:19, outer=(9,11)]

# UpsertDistinctOn is not removed when there are duplicates.
norm expect-not=EliminateDistinctOnValues
INSERT INTO a (k, s, i) VALUES (1, 'foo', 1), (2, 'bar', 2), (3, 'foo', 1)
ON CONFLICT (s, i) DO UPDATE SET f=1.0
----
upsert a
 ├── columns: <none>
 ├── canary column: 11
 ├── fetch columns: k:11 i:12 f:13 s:14 j:15
 ├── insert-mapping:
 │    ├── column1:6 => k:1
 │    ├── column3:8 => i:2
 │    ├── column9:9 => f:3
 │    ├── column2:7 => s:4
 │    └── column10:10 => j:5
 ├── update-mapping:
 │    └── upsert_f:19 => f:3
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 └── project
      ├── columns: upsert_f:19 column1:6!null column2:7!null column3:8!null column9:9 column10:10 k:11 i:12 f:13 s:14 j:15
      ├── cardinality: [1 - ]
      ├── key: (7,8,11)
      ├── fd: ()-->(9,10), (7,8)-->(6), (11)-->(12-15), (12,14)-->(11,13,15), (12,13)~~>(11,14,15), (7,8,11)-->(19)
      ├── left-join (hash)
      │    ├── columns: column1:6!null column2:7!null column3:8!null column9:9 column10:10 k:11 i:12 f:13 s:14 j:15
      │    ├── cardinality: [1 - ]
      │    ├── key: (7,8,11)
      │    ├── fd: ()-->(9,10), (7,8)-->(6), (11)-->(12-15), (12,14)-->(11,13,15), (12,13)~~>(11,14,15)
      │    ├── upsert-distinct-on
      │    │    ├── columns: column1:6!null column2:7!null column3:8!null column9:9 column10:10
      │    │    ├── grouping columns: column2:7!null column3:8!null
      │    │    ├── error-on-dup
      │    │    ├── cardinality: [1 - 3]
      │    │    ├── key: (7,8)
      │    │    ├── fd: ()-->(9,10), (7,8)-->(6,9,10)
      │    │    ├── project
      │    │    │    ├── columns: column9:9 column10:10 column1:6!null column2:7!null column3:8!null
      │    │    │    ├── cardinality: [3 - 3]
      │    │    │    ├── fd: ()-->(9,10)
      │    │    │    ├── values
      │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    │    │    ├── cardinality: [3 - 3]
      │    │    │    │    ├── (1, 'foo', 1)
      │    │    │    │    ├── (2, 'bar', 2)
      │    │    │    │    └── (3, 'foo', 1)
      │    │    │    └── projections
      │    │    │         ├── CAST(NULL AS FLOAT8) [as=column9:9]
      │    │    │         └── CAST(NULL AS JSONB) [as=column10:10]
      │    │    └── aggregations
      │    │         ├── first-agg [as=column1:6, outer=(6)]
      │    │         │    └── column1:6
      │    │         ├── first-agg [as=column9:9, outer=(9)]
      │    │         │    └── column9:9
      │    │         └── first-agg [as=column10:10, outer=(10)]
      │    │              └── column10:10
      │    ├── scan a
      │    │    ├── columns: k:11!null i:12!null f:13 s:14!null j:15
      │    │    ├── key: (11)
      │    │    └── fd: (11)-->(12-15), (12,14)-->(11,13,15), (12,13)~~>(11,14,15)
      │    └── filters
      │         ├── column3:8 = i:12 [outer=(8,12), constraints=(/8: (/NULL - ]; /12: (/NULL - ]), fd=(8)==(12), (12)==(8)]
      │         └── column2:7 = s:14 [outer=(7,14), constraints=(/7: (/NULL - ]; /14: (/NULL - ]), fd=(7)==(14), (14)==(7)]
      └── projections
           └── CASE WHEN k:11 IS NULL THEN column9:9 ELSE 1.0 END [as=upsert_f:19, outer=(9,11)]

# DO NOTHING case where all distinct ops can be removed.
norm expect=EliminateDistinctOnValues
INSERT INTO a (k, s, i, f) VALUES (1, 'foo', 1, 1.0), (2, 'bar', 2, 2.0), (3, 'foo', 2, 1.0)
ON CONFLICT DO NOTHING
----
insert a
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:6 => k:1
 │    ├── column3:8 => i:2
 │    ├── column4:9 => f:3
 │    ├── column2:7 => s:4
 │    └── column10:10 => j:5
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 └── project
      ├── columns: column1:6!null column2:7!null column3:8!null column4:9!null column10:10
      ├── fd: ()-->(10)
      └── select
           ├── columns: column1:6!null column2:7!null column3:8!null column4:9!null column10:10 k:11 i:17 s:19 i:22 f:23
           ├── fd: ()-->(10,11,19,22)
           ├── left-join (hash)
           │    ├── columns: column1:6!null column2:7!null column3:8!null column4:9!null column10:10 k:11 i:17 s:19 i:22 f:23
           │    ├── fd: ()-->(10,11,19)
           │    ├── select
           │    │    ├── columns: column1:6!null column2:7!null column3:8!null column4:9!null column10:10 k:11 i:17 s:19
           │    │    ├── fd: ()-->(10,11,19)
           │    │    ├── left-join (hash)
           │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null column4:9!null column10:10 k:11 i:17 s:19
           │    │    │    ├── fd: ()-->(10,11)
           │    │    │    ├── select
           │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null column4:9!null column10:10 k:11
           │    │    │    │    ├── fd: ()-->(10,11)
           │    │    │    │    ├── left-join (hash)
           │    │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null column4:9!null column10:10 k:11
           │    │    │    │    │    ├── cardinality: [3 - ]
           │    │    │    │    │    ├── fd: ()-->(10)
           │    │    │    │    │    ├── project
           │    │    │    │    │    │    ├── columns: column10:10 column1:6!null column2:7!null column3:8!null column4:9!null
           │    │    │    │    │    │    ├── cardinality: [3 - 3]
           │    │    │    │    │    │    ├── fd: ()-->(10)
           │    │    │    │    │    │    ├── values
           │    │    │    │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null column4:9!null
           │    │    │    │    │    │    │    ├── cardinality: [3 - 3]
           │    │    │    │    │    │    │    ├── (1, 'foo', 1, 1.0)
           │    │    │    │    │    │    │    ├── (2, 'bar', 2, 2.0)
           │    │    │    │    │    │    │    └── (3, 'foo', 2, 1.0)
           │    │    │    │    │    │    └── projections
           │    │    │    │    │    │         └── CAST(NULL AS JSONB) [as=column10:10]
           │    │    │    │    │    ├── scan a
           │    │    │    │    │    │    ├── columns: k:11!null
           │    │    │    │    │    │    └── key: (11)
           │    │    │    │    │    └── filters
           │    │    │    │    │         └── column1:6 = k:11 [outer=(6,11), constraints=(/6: (/NULL - ]; /11: (/NULL - ]), fd=(6)==(11), (11)==(6)]
           │    │    │    │    └── filters
           │    │    │    │         └── k:11 IS NULL [outer=(11), constraints=(/11: [/NULL - /NULL]; tight), fd=()-->(11)]
           │    │    │    ├── scan a
           │    │    │    │    ├── columns: i:17!null s:19!null
           │    │    │    │    └── key: (17,19)
           │    │    │    └── filters
           │    │    │         ├── column2:7 = s:19 [outer=(7,19), constraints=(/7: (/NULL - ]; /19: (/NULL - ]), fd=(7)==(19), (19)==(7)]
           │    │    │         └── column3:8 = i:17 [outer=(8,17), constraints=(/8: (/NULL - ]; /17: (/NULL - ]), fd=(8)==(17), (17)==(8)]
           │    │    └── filters
           │    │         └── s:19 IS NULL [outer=(19), constraints=(/19: [/NULL - /NULL]; tight), fd=()-->(19)]
           │    ├── scan a
           │    │    ├── columns: i:22!null f:23
           │    │    └── lax-key: (22,23)
           │    └── filters
           │         ├── column4:9 = f:23 [outer=(9,23), constraints=(/9: (/NULL - ]; /23: (/NULL - ]), fd=(9)==(23), (23)==(9)]
           │         └── column3:8 = i:22 [outer=(8,22), constraints=(/8: (/NULL - ]; /22: (/NULL - ]), fd=(8)==(22), (22)==(8)]
           └── filters
                └── i:22 IS NULL [outer=(22), constraints=(/22: [/NULL - /NULL]; tight), fd=()-->(22)]

# DO NOTHING case where one distinct op can be removed (k), but two others
# can't: (s, i) and (f, i).
norm expect=EliminateDistinctOnValues
INSERT INTO a (k, s, f) VALUES (1, 'foo', 1.0), (2, 'bar', 2.0), (3, 'foo', 1.0)
ON CONFLICT DO NOTHING
----
insert a
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:6 => k:1
 │    ├── column9:9 => i:2
 │    ├── column3:8 => f:3
 │    ├── column2:7 => s:4
 │    └── column10:10 => j:5
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 └── upsert-distinct-on
      ├── columns: column1:6!null column2:7!null column3:8!null column9:9 column10:10
      ├── grouping columns: column3:8!null column9:9
      ├── lax-key: (8,9)
      ├── fd: ()-->(9,10), (7,9)~~>(6,8), (8,9)~~>(6,7,10)
      ├── select
      │    ├── columns: column1:6!null column2:7!null column3:8!null column9:9 column10:10 i:22 f:23
      │    ├── lax-key: (7,9,22,23)
      │    ├── fd: ()-->(9,10,22), (7,9)~~>(6,8)
      │    ├── left-join (hash)
      │    │    ├── columns: column1:6!null column2:7!null column3:8!null column9:9 column10:10 i:22 f:23
      │    │    ├── lax-key: (7,9,22,23)
      │    │    ├── fd: ()-->(9,10), (7,9)~~>(6,8)
      │    │    ├── upsert-distinct-on
      │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null column9:9 column10:10
      │    │    │    ├── grouping columns: column2:7!null column9:9
      │    │    │    ├── lax-key: (7,9)
      │    │    │    ├── fd: ()-->(9,10), (7,9)~~>(6,8,10)
      │    │    │    ├── select
      │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null column9:9 column10:10 k:11 i:17 s:19
      │    │    │    │    ├── fd: ()-->(9-11,19)
      │    │    │    │    ├── left-join (hash)
      │    │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null column9:9 column10:10 k:11 i:17 s:19
      │    │    │    │    │    ├── fd: ()-->(9-11)
      │    │    │    │    │    ├── select
      │    │    │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null column9:9 column10:10 k:11
      │    │    │    │    │    │    ├── fd: ()-->(9-11)
      │    │    │    │    │    │    ├── left-join (hash)
      │    │    │    │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null column9:9 column10:10 k:11
      │    │    │    │    │    │    │    ├── cardinality: [3 - ]
      │    │    │    │    │    │    │    ├── fd: ()-->(9,10)
      │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    ├── columns: column9:9 column10:10 column1:6!null column2:7!null column3:8!null
      │    │    │    │    │    │    │    │    ├── cardinality: [3 - 3]
      │    │    │    │    │    │    │    │    ├── fd: ()-->(9,10)
      │    │    │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    │    │    │    │    │    │    │    ├── cardinality: [3 - 3]
      │    │    │    │    │    │    │    │    │    ├── (1, 'foo', 1.0)
      │    │    │    │    │    │    │    │    │    ├── (2, 'bar', 2.0)
      │    │    │    │    │    │    │    │    │    └── (3, 'foo', 1.0)
      │    │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │    │         ├── CAST(NULL AS INT8) [as=column9:9]
      │    │    │    │    │    │    │    │         └── CAST(NULL AS JSONB) [as=column10:10]
      │    │    │    │    │    │    │    ├── scan a
      │    │    │    │    │    │    │    │    ├── columns: k:11!null
      │    │    │    │    │    │    │    │    └── key: (11)
      │    │    │    │    │    │    │    └── filters
      │    │    │    │    │    │    │         └── column1:6 = k:11 [outer=(6,11), constraints=(/6: (/NULL - ]; /11: (/NULL - ]), fd=(6)==(11), (11)==(6)]
      │    │    │    │    │    │    └── filters
      │    │    │    │    │    │         └── k:11 IS NULL [outer=(11), constraints=(/11: [/NULL - /NULL]; tight), fd=()-->(11)]
      │    │    │    │    │    ├── scan a
      │    │    │    │    │    │    ├── columns: i:17!null s:19!null
      │    │    │    │    │    │    └── key: (17,19)
      │    │    │    │    │    └── filters
      │    │    │    │    │         ├── column2:7 = s:19 [outer=(7,19), constraints=(/7: (/NULL - ]; /19: (/NULL - ]), fd=(7)==(19), (19)==(7)]
      │    │    │    │    │         └── column9:9 = i:17 [outer=(9,17), constraints=(/9: (/NULL - ]; /17: (/NULL - ]), fd=(9)==(17), (17)==(9)]
      │    │    │    │    └── filters
      │    │    │    │         └── s:19 IS NULL [outer=(19), constraints=(/19: [/NULL - /NULL]; tight), fd=()-->(19)]
      │    │    │    └── aggregations
      │    │    │         ├── first-agg [as=column1:6, outer=(6)]
      │    │    │         │    └── column1:6
      │    │    │         ├── first-agg [as=column3:8, outer=(8)]
      │    │    │         │    └── column3:8
      │    │    │         └── first-agg [as=column10:10, outer=(10)]
      │    │    │              └── column10:10
      │    │    ├── scan a
      │    │    │    ├── columns: i:22!null f:23
      │    │    │    └── lax-key: (22,23)
      │    │    └── filters
      │    │         ├── column3:8 = f:23 [outer=(8,23), constraints=(/8: (/NULL - ]; /23: (/NULL - ]), fd=(8)==(23), (23)==(8)]
      │    │         └── column9:9 = i:22 [outer=(9,22), constraints=(/9: (/NULL - ]; /22: (/NULL - ]), fd=(9)==(22), (22)==(9)]
      │    └── filters
      │         └── i:22 IS NULL [outer=(22), constraints=(/22: [/NULL - /NULL]; tight), fd=()-->(22)]
      └── aggregations
           ├── first-agg [as=column1:6, outer=(6)]
           │    └── column1:6
           ├── first-agg [as=column2:7, outer=(7)]
           │    └── column2:7
           └── first-agg [as=column10:10, outer=(10)]
                └── column10:10

# DO NOTHING case where innermost distinct op cannot be removed (because it
# groups on a non-constant column). Ensure that outer distinct ops can still be
# removed.
norm
INSERT INTO a (k, s, i, f) VALUES (unique_rowid(), 'foo', 1, 1.0), (unique_rowid(), 'bar', 2, 2.0)
ON CONFLICT DO NOTHING
----
insert a
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:6 => k:1
 │    ├── column3:8 => i:2
 │    ├── column4:9 => f:3
 │    ├── column2:7 => s:4
 │    └── column10:10 => j:5
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 └── project
      ├── columns: column1:6 column2:7!null column3:8!null column4:9!null column10:10
      ├── side-effects
      ├── fd: ()-->(10), (6)~~>(7-9)
      └── select
           ├── columns: column1:6 column2:7!null column3:8!null column4:9!null column10:10 i:17 s:19 i:22 f:23
           ├── side-effects
           ├── lax-key: (6,17,19,22,23)
           ├── fd: ()-->(10,19,22), (6)~~>(7-9)
           ├── left-join (hash)
           │    ├── columns: column1:6 column2:7!null column3:8!null column4:9!null column10:10 i:17 s:19 i:22 f:23
           │    ├── side-effects
           │    ├── lax-key: (6,17,19,22,23)
           │    ├── fd: ()-->(10,19), (6)~~>(7-9)
           │    ├── select
           │    │    ├── columns: column1:6 column2:7!null column3:8!null column4:9!null column10:10 i:17 s:19
           │    │    ├── side-effects
           │    │    ├── lax-key: (6,17,19)
           │    │    ├── fd: ()-->(10,19), (6)~~>(7-9)
           │    │    ├── left-join (hash)
           │    │    │    ├── columns: column1:6 column2:7!null column3:8!null column4:9!null column10:10 i:17 s:19
           │    │    │    ├── side-effects
           │    │    │    ├── lax-key: (6,17,19)
           │    │    │    ├── fd: ()-->(10), (6)~~>(7-9)
           │    │    │    ├── upsert-distinct-on
           │    │    │    │    ├── columns: column1:6 column2:7!null column3:8!null column4:9!null column10:10
           │    │    │    │    ├── grouping columns: column1:6
           │    │    │    │    ├── side-effects
           │    │    │    │    ├── lax-key: (6)
           │    │    │    │    ├── fd: ()-->(10), (6)~~>(7-10)
           │    │    │    │    ├── select
           │    │    │    │    │    ├── columns: column1:6 column2:7!null column3:8!null column4:9!null column10:10 k:11
           │    │    │    │    │    ├── side-effects
           │    │    │    │    │    ├── fd: ()-->(10,11)
           │    │    │    │    │    ├── left-join (hash)
           │    │    │    │    │    │    ├── columns: column1:6 column2:7!null column3:8!null column4:9!null column10:10 k:11
           │    │    │    │    │    │    ├── cardinality: [2 - ]
           │    │    │    │    │    │    ├── side-effects
           │    │    │    │    │    │    ├── fd: ()-->(10)
           │    │    │    │    │    │    ├── project
           │    │    │    │    │    │    │    ├── columns: column10:10 column1:6 column2:7!null column3:8!null column4:9!null
           │    │    │    │    │    │    │    ├── cardinality: [2 - 2]
           │    │    │    │    │    │    │    ├── side-effects
           │    │    │    │    │    │    │    ├── fd: ()-->(10)
           │    │    │    │    │    │    │    ├── values
           │    │    │    │    │    │    │    │    ├── columns: column1:6 column2:7!null column3:8!null column4:9!null
           │    │    │    │    │    │    │    │    ├── cardinality: [2 - 2]
           │    │    │    │    │    │    │    │    ├── side-effects
           │    │    │    │    │    │    │    │    ├── (unique_rowid(), 'foo', 1, 1.0)
           │    │    │    │    │    │    │    │    └── (unique_rowid(), 'bar', 2, 2.0)
           │    │    │    │    │    │    │    └── projections
           │    │    │    │    │    │    │         └── CAST(NULL AS JSONB) [as=column10:10]
           │    │    │    │    │    │    ├── scan a
           │    │    │    │    │    │    │    ├── columns: k:11!null
           │    │    │    │    │    │    │    └── key: (11)
           │    │    │    │    │    │    └── filters
           │    │    │    │    │    │         └── column1:6 = k:11 [outer=(6,11), constraints=(/6: (/NULL - ]; /11: (/NULL - ]), fd=(6)==(11), (11)==(6)]
           │    │    │    │    │    └── filters
           │    │    │    │    │         └── k:11 IS NULL [outer=(11), constraints=(/11: [/NULL - /NULL]; tight), fd=()-->(11)]
           │    │    │    │    └── aggregations
           │    │    │    │         ├── first-agg [as=column2:7, outer=(7)]
           │    │    │    │         │    └── column2:7
           │    │    │    │         ├── first-agg [as=column3:8, outer=(8)]
           │    │    │    │         │    └── column3:8
           │    │    │    │         ├── first-agg [as=column4:9, outer=(9)]
           │    │    │    │         │    └── column4:9
           │    │    │    │         └── first-agg [as=column10:10, outer=(10)]
           │    │    │    │              └── column10:10
           │    │    │    ├── scan a
           │    │    │    │    ├── columns: i:17!null s:19!null
           │    │    │    │    └── key: (17,19)
           │    │    │    └── filters
           │    │    │         ├── column2:7 = s:19 [outer=(7,19), constraints=(/7: (/NULL - ]; /19: (/NULL - ]), fd=(7)==(19), (19)==(7)]
           │    │    │         └── column3:8 = i:17 [outer=(8,17), constraints=(/8: (/NULL - ]; /17: (/NULL - ]), fd=(8)==(17), (17)==(8)]
           │    │    └── filters
           │    │         └── s:19 IS NULL [outer=(19), constraints=(/19: [/NULL - /NULL]; tight), fd=()-->(19)]
           │    ├── scan a
           │    │    ├── columns: i:22!null f:23
           │    │    └── lax-key: (22,23)
           │    └── filters
           │         ├── column4:9 = f:23 [outer=(9,23), constraints=(/9: (/NULL - ]; /23: (/NULL - ]), fd=(9)==(23), (23)==(9)]
           │         └── column3:8 = i:22 [outer=(8,22), constraints=(/8: (/NULL - ]; /22: (/NULL - ]), fd=(8)==(22), (22)==(8)]
           └── filters
                └── i:22 IS NULL [outer=(22), constraints=(/22: [/NULL - /NULL]; tight), fd=()-->(22)]

# DO NOTHING case with explicit conflict columns (only add upsert-distinct-on
# for one index).
norm expect-not=EliminateDistinctOnValues
INSERT INTO a (k, s, i) SELECT i, 'foo', i FROM a
ON CONFLICT (s, i) DO NOTHING
----
insert a
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── i:7 => k:1
 │    ├── i:7 => i:2
 │    ├── column12:12 => f:3
 │    ├── "?column?":11 => s:4
 │    └── column13:13 => j:5
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 └── upsert-distinct-on
      ├── columns: i:7!null "?column?":11!null column12:12 column13:13
      ├── grouping columns: i:7!null
      ├── key: (7)
      ├── fd: ()-->(11-13)
      ├── select
      │    ├── columns: i:7!null "?column?":11!null column12:12 column13:13 i:15 s:17
      │    ├── fd: ()-->(11-13,17)
      │    ├── left-join (hash)
      │    │    ├── columns: i:7!null "?column?":11!null column12:12 column13:13 i:15 s:17
      │    │    ├── fd: ()-->(11-13)
      │    │    ├── project
      │    │    │    ├── columns: column12:12 column13:13 "?column?":11!null i:7!null
      │    │    │    ├── fd: ()-->(11-13)
      │    │    │    ├── scan a
      │    │    │    │    └── columns: i:7!null
      │    │    │    └── projections
      │    │    │         ├── CAST(NULL AS FLOAT8) [as=column12:12]
      │    │    │         ├── CAST(NULL AS JSONB) [as=column13:13]
      │    │    │         └── 'foo' [as="?column?":11]
      │    │    ├── select
      │    │    │    ├── columns: i:15!null s:17!null
      │    │    │    ├── key: (15)
      │    │    │    ├── fd: ()-->(17)
      │    │    │    ├── scan a
      │    │    │    │    ├── columns: i:15!null s:17!null
      │    │    │    │    └── key: (15,17)
      │    │    │    └── filters
      │    │    │         └── s:17 = 'foo' [outer=(17), constraints=(/17: [/'foo' - /'foo']; tight), fd=()-->(17)]
      │    │    └── filters
      │    │         └── i:7 = i:15 [outer=(7,15), constraints=(/7: (/NULL - ]; /15: (/NULL - ]), fd=(7)==(15), (15)==(7)]
      │    └── filters
      │         └── s:17 IS NULL [outer=(17), constraints=(/17: [/NULL - /NULL]; tight), fd=()-->(17)]
      └── aggregations
           ├── first-agg [as=column12:12, outer=(12)]
           │    └── column12:12
           ├── first-agg [as=column13:13, outer=(13)]
           │    └── column13:13
           └── const-agg [as="?column?":11, outer=(11)]
                └── "?column?":11
