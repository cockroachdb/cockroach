exec-ddl
CREATE TABLE a
(
    k INT PRIMARY KEY,
    i INT NOT NULL,
    f FLOAT,
    s STRING NOT NULL,
    j JSON,
    UNIQUE INDEX si_idx (s DESC, i) STORING (j),
    UNIQUE INDEX fi_idx (f, i)
)
----

exec-ddl
CREATE TABLE xy
(
    x INT PRIMARY KEY,
    y INT
)
----

exec-ddl
CREATE TABLE abc
(
    a INT,
    b INT,
    c INT,
    PRIMARY KEY (a,b,c)
)
----

exec-ddl
CREATE TABLE uvwz
(
    u INT NOT NULL,
    v INT NOT NULL,
    w INT NOT NULL,
    z INT NOT NULL,

    UNIQUE INDEX (u,v),
    UNIQUE INDEX (v,w)
)
----

exec-ddl
CREATE TABLE s (
    s STRING PRIMARY KEY
)
----

# --------------------------------------------------
# ConvertGroupByToDistinct
# --------------------------------------------------
norm expect=ConvertGroupByToDistinct
SELECT s, f FROM a GROUP BY s, f
----
distinct-on
 ├── columns: s:4(string!null) f:3(float)
 ├── grouping columns: f:3(float) s:4(string!null)
 ├── key: (3,4)
 └── scan a
      └── columns: f:3(float) s:4(string!null)

# Group by not converted to DistinctOn because it has an aggregation.
norm expect-not=ConvertGroupByToDistinct
SELECT s, f, sum(f) FROM a GROUP BY s, f
----
group-by
 ├── columns: s:4(string!null) f:3(float) sum:6(float)
 ├── grouping columns: f:3(float) s:4(string!null)
 ├── key: (3,4)
 ├── fd: (3,4)-->(6)
 ├── scan a
 │    └── columns: f:3(float) s:4(string!null)
 └── aggregations
      └── sum [type=float, outer=(3)]
           └── variable: f [type=float]


# --------------------------------------------------
# EliminateDistinct
# --------------------------------------------------
norm expect=EliminateDistinct
SELECT DISTINCT k FROM a
----
scan a
 ├── columns: k:1(int!null)
 └── key: (1)

norm expect=EliminateDistinct
SELECT DISTINCT s, i FROM a
----
scan a
 ├── columns: s:4(string!null) i:2(int!null)
 └── key: (2,4)

norm expect=EliminateDistinct
SELECT DISTINCT ON (s, i) k, i, f FROM a
----
scan a
 ├── columns: k:1(int!null) i:2(int!null) f:3(float)
 ├── key: (1)
 └── fd: (1)-->(2,3), (2,3)~~>(1)

# Strict superset of key.
norm expect=EliminateDistinct
SELECT DISTINCT s, i, f FROM a
----
scan a
 ├── columns: s:4(string!null) i:2(int!null) f:3(float)
 ├── key: (2,4)
 └── fd: (2,4)-->(3), (2,3)~~>(4)

# Distinct not eliminated because columns aren't superset of any weak key.
norm expect-not=EliminateDistinct
SELECT DISTINCT i FROM a
----
distinct-on
 ├── columns: i:2(int!null)
 ├── grouping columns: i:2(int!null)
 ├── key: (2)
 └── scan a
      └── columns: i:2(int!null)

# Distinct not eliminated despite a unique index on (f, i) because f is nullable.
norm expect-not=EliminateDistinct
SELECT DISTINCT f, i FROM a
----
distinct-on
 ├── columns: f:3(float) i:2(int!null)
 ├── grouping columns: i:2(int!null) f:3(float)
 ├── key: (2,3)
 └── scan a
      ├── columns: i:2(int!null) f:3(float)
      └── lax-key: (2,3)

# Regression test for #40295. Ensure that the DistinctOn is replaced with a
# Project operator to keep the correct number of output columns.
exec-ddl
CREATE TABLE table0 (col0 REGTYPE);
----

exec-ddl
CREATE TABLE table1 (col0 REGCLASS, col1 REGTYPE, col2 INT4);
----

norm expect=EliminateDistinct
SELECT
  (
    SELECT
      t1.col2
    FROM
      table1 AS t1
    JOIN table0 AS t0 ON
        t1.col1 = t0.col0
        AND t1.col0 = t0.col0
    GROUP BY
      t1.col2
    HAVING
      NULL
  );
----
values
 ├── columns: col2:7(int4)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(7)
 └── tuple [type=tuple{int4}]
      └── subquery [type=int4]
           └── values
                ├── columns: t1.col2:3(int4!null)
                ├── cardinality: [0 - 0]
                ├── key: ()
                └── fd: ()-->(3)

# --------------------------------------------------
# EliminateGroupByProject
# --------------------------------------------------
norm expect=EliminateGroupByProject
SELECT min(s) FROM (SELECT i, s FROM (SELECT * FROM a UNION SELECT * FROM a)) GROUP BY i
----
project
 ├── columns: min:16(string)
 └── group-by
      ├── columns: i:12(int!null) min:16(string)
      ├── grouping columns: i:12(int!null)
      ├── key: (12)
      ├── fd: (12)-->(16)
      ├── union
      │    ├── columns: k:11(int!null) i:12(int!null) f:13(float) s:14(string!null) j:15(jsonb)
      │    ├── left columns: a.k:1(int) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
      │    ├── right columns: a.k:6(int) a.i:7(int) a.f:8(float) a.s:9(string) a.j:10(jsonb)
      │    ├── key: (11-15)
      │    ├── scan a
      │    │    ├── columns: a.k:1(int!null) a.i:2(int!null) a.f:3(float) a.s:4(string!null) a.j:5(jsonb)
      │    │    ├── key: (1)
      │    │    └── fd: (1)-->(2-5), (2,4)-->(1,3,5), (2,3)~~>(1,4,5)
      │    └── scan a
      │         ├── columns: a.k:6(int!null) a.i:7(int!null) a.f:8(float) a.s:9(string!null) a.j:10(jsonb)
      │         ├── key: (6)
      │         └── fd: (6)-->(7-10), (7,9)-->(6,8,10), (7,8)~~>(6,9,10)
      └── aggregations
           └── min [type=string, outer=(14)]
                └── variable: s [type=string]

# ScalarGroupBy case.
norm expect=EliminateGroupByProject
SELECT min(s) FROM (SELECT i, s FROM (SELECT * FROM a UNION SELECT * FROM a))
----
scalar-group-by
 ├── columns: min:16(string)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(16)
 ├── union
 │    ├── columns: k:11(int!null) i:12(int!null) f:13(float) s:14(string!null) j:15(jsonb)
 │    ├── left columns: a.k:1(int) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    ├── right columns: a.k:6(int) a.i:7(int) a.f:8(float) a.s:9(string) a.j:10(jsonb)
 │    ├── key: (11-15)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int!null) a.f:3(float) a.s:4(string!null) a.j:5(jsonb)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2-5), (2,4)-->(1,3,5), (2,3)~~>(1,4,5)
 │    └── scan a
 │         ├── columns: a.k:6(int!null) a.i:7(int!null) a.f:8(float) a.s:9(string!null) a.j:10(jsonb)
 │         ├── key: (6)
 │         └── fd: (6)-->(7-10), (7,9)-->(6,8,10), (7,8)~~>(6,9,10)
 └── aggregations
      └── min [type=string, outer=(14)]
           └── variable: s [type=string]

# DistinctOn case.
norm expect=EliminateGroupByProject
SELECT DISTINCT ON (i) s FROM (SELECT i, s, f FROM (SELECT * FROM a UNION SELECT * FROM a))
----
distinct-on
 ├── columns: s:14(string)  [hidden: i:12(int!null)]
 ├── grouping columns: i:12(int!null)
 ├── key: (12)
 ├── fd: (12)-->(14)
 ├── union
 │    ├── columns: k:11(int!null) i:12(int!null) f:13(float) s:14(string!null) j:15(jsonb)
 │    ├── left columns: a.k:1(int) a.i:2(int) a.f:3(float) a.s:4(string) a.j:5(jsonb)
 │    ├── right columns: a.k:6(int) a.i:7(int) a.f:8(float) a.s:9(string) a.j:10(jsonb)
 │    ├── key: (11-15)
 │    ├── scan a
 │    │    ├── columns: a.k:1(int!null) a.i:2(int!null) a.f:3(float) a.s:4(string!null) a.j:5(jsonb)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2-5), (2,4)-->(1,3,5), (2,3)~~>(1,4,5)
 │    └── scan a
 │         ├── columns: a.k:6(int!null) a.i:7(int!null) a.f:8(float) a.s:9(string!null) a.j:10(jsonb)
 │         ├── key: (6)
 │         └── fd: (6)-->(7-10), (7,9)-->(6,8,10), (7,8)~~>(6,9,10)
 └── aggregations
      └── first-agg [type=string, outer=(14)]
           └── variable: s [type=string]

# Don't eliminate project if it computes extra column(s).
norm expect-not=EliminateGroupByProject
SELECT min(s) FROM (SELECT i+1 AS i2, s FROM a) GROUP BY i2
----
project
 ├── columns: min:7(string)
 └── group-by
      ├── columns: i2:6(int!null) min:7(string)
      ├── grouping columns: i2:6(int!null)
      ├── key: (6)
      ├── fd: (6)-->(7)
      ├── project
      │    ├── columns: i2:6(int!null) s:4(string!null)
      │    ├── scan a
      │    │    ├── columns: i:2(int!null) s:4(string!null)
      │    │    └── key: (2,4)
      │    └── projections
      │         └── i + 1 [type=int, outer=(2)]
      └── aggregations
           └── min [type=string, outer=(4)]
                └── variable: s [type=string]

# --------------------------------------------------
# ReduceGroupingCols
# --------------------------------------------------
norm expect=ReduceGroupingCols
SELECT k, min(i), f, s FROM a GROUP BY s, f, k
----
group-by
 ├── columns: k:1(int!null) min:6(int) f:3(float) s:4(string)
 ├── grouping columns: k:1(int!null)
 ├── key: (1)
 ├── fd: (1)-->(3,4,6)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string!null)
 │    ├── key: (1)
 │    └── fd: (1)-->(2-4), (2,4)-->(1,3), (2,3)~~>(1,4)
 └── aggregations
      ├── min [type=int, outer=(2)]
      │    └── variable: i [type=int]
      ├── const-agg [type=float, outer=(3)]
      │    └── variable: f [type=float]
      └── const-agg [type=string, outer=(4)]
           └── variable: s [type=string]

norm expect=ReduceGroupingCols
SELECT k, sum(DISTINCT i), f, s FROM a, xy GROUP BY s, f, k
----
group-by
 ├── columns: k:1(int!null) sum:8(decimal) f:3(float) s:4(string)
 ├── grouping columns: k:1(int!null)
 ├── key: (1)
 ├── fd: (1)-->(3,4,8)
 ├── inner-join (cross)
 │    ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string!null)
 │    ├── fd: (1)-->(2-4), (2,4)-->(1,3), (2,3)~~>(1,4)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int!null) f:3(float) s:4(string!null)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2-4), (2,4)-->(1,3), (2,3)~~>(1,4)
 │    ├── scan xy
 │    └── filters (true)
 └── aggregations
      ├── agg-distinct [type=decimal, outer=(2)]
      │    └── sum [type=decimal]
      │         └── variable: i [type=int]
      ├── const-agg [type=float, outer=(3)]
      │    └── variable: f [type=float]
      └── const-agg [type=string, outer=(4)]
           └── variable: s [type=string]

# Eliminated columns are not part of projection.
norm expect=ReduceGroupingCols
SELECT min(f) FROM a GROUP BY i, s, k
----
project
 ├── columns: min:6(float)
 └── group-by
      ├── columns: i:2(int!null) s:4(string!null) min:6(float)
      ├── grouping columns: i:2(int!null) s:4(string!null)
      ├── key: (2,4)
      ├── fd: (2,4)-->(6)
      ├── scan a
      │    ├── columns: i:2(int!null) f:3(float) s:4(string!null)
      │    ├── key: (2,4)
      │    └── fd: (2,4)-->(3), (2,3)~~>(4)
      └── aggregations
           └── min [type=float, outer=(3)]
                └── variable: f [type=float]

# All grouping columns eliminated.
norm expect=ReduceGroupingCols
SELECT sum(f), i FROM a GROUP BY k, i, f HAVING k=1
----
group-by
 ├── columns: sum:6(float) i:2(int)
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(2,6)
 ├── select
 │    ├── columns: k:1(int!null) i:2(int!null) f:3(float)
 │    ├── cardinality: [0 - 1]
 │    ├── key: ()
 │    ├── fd: ()-->(1-3)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int!null) f:3(float)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2,3), (2,3)~~>(1)
 │    └── filters
 │         └── k = 1 [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight), fd=()-->(1)]
 └── aggregations
      ├── sum [type=float, outer=(3)]
      │    └── variable: f [type=float]
      └── const-agg [type=int, outer=(2)]
           └── variable: i [type=int]

norm expect=ReduceGroupingCols
SELECT DISTINCT ON (k, f, s) i, f, x FROM a JOIN xy ON i=y
----
distinct-on
 ├── columns: i:2(int) f:3(float) x:6(int)  [hidden: k:1(int!null)]
 ├── grouping columns: k:1(int!null)
 ├── key: (1)
 ├── fd: (1)-->(2,3,6), (2,3)~~>(1), (6)-->(2)
 ├── inner-join (hash)
 │    ├── columns: k:1(int!null) i:2(int!null) f:3(float) x:6(int!null) y:7(int!null)
 │    ├── key: (1,6)
 │    ├── fd: (1)-->(2,3), (2,3)~~>(1), (6)-->(7), (2)==(7), (7)==(2)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int!null) f:3(float)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2,3), (2,3)~~>(1)
 │    ├── scan xy
 │    │    ├── columns: x:6(int!null) y:7(int)
 │    │    ├── key: (6)
 │    │    └── fd: (6)-->(7)
 │    └── filters
 │         └── i = y [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
 └── aggregations
      ├── first-agg [type=int, outer=(2)]
      │    └── variable: i [type=int]
      ├── first-agg [type=int, outer=(6)]
      │    └── variable: x [type=int]
      └── const-agg [type=float, outer=(3)]
           └── variable: f [type=float]

# --------------------------------------------------
# EliminateAggDistinctForKeys
# --------------------------------------------------

# ScalarGroupBy with key argument. Only the first aggregation can be
# simplified.
norm expect=EliminateAggDistinctForKeys
SELECT sum(DISTINCT k), sum(DISTINCT i) FROM a
----
scalar-group-by
 ├── columns: sum:6(decimal) sum:7(decimal)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(6,7)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int!null)
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── aggregations
      ├── sum [type=decimal, outer=(1)]
      │    └── variable: k [type=int]
      └── agg-distinct [type=decimal, outer=(2)]
           └── sum [type=decimal]
                └── variable: i [type=int]

norm expect=EliminateAggDistinctForKeys
SELECT string_agg(DISTINCT s, ', ') FROM s
----
scalar-group-by
 ├── columns: string_agg:3(string)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(3)
 ├── project
 │    ├── columns: column2:2(string!null) s:1(string!null)
 │    ├── key: (1)
 │    ├── fd: ()-->(2)
 │    ├── scan s
 │    │    ├── columns: s:1(string!null)
 │    │    └── key: (1)
 │    └── projections
 │         └── const: ', ' [type=string]
 └── aggregations
      └── string-agg [type=string, outer=(1)]
           ├── variable: s [type=string]
           └── const: ', ' [type=string]

# GroupBy with key argument.
norm expect=EliminateAggDistinctForKeys
SELECT sum(DISTINCT k) FROM a GROUP BY i
----
project
 ├── columns: sum:6(decimal)
 └── group-by
      ├── columns: i:2(int!null) sum:6(decimal)
      ├── grouping columns: i:2(int!null)
      ├── key: (2)
      ├── fd: (2)-->(6)
      ├── scan a
      │    ├── columns: k:1(int!null) i:2(int!null)
      │    ├── key: (1)
      │    └── fd: (1)-->(2)
      └── aggregations
           └── sum [type=decimal, outer=(1)]
                └── variable: k [type=int]

# GroupBy with no key.
norm expect-not=EliminateAggDistinctForKeys
SELECT sum(DISTINCT a) FROM abc GROUP BY b
----
project
 ├── columns: sum:4(decimal)
 └── group-by
      ├── columns: b:2(int!null) sum:4(decimal)
      ├── grouping columns: b:2(int!null)
      ├── key: (2)
      ├── fd: (2)-->(4)
      ├── scan abc
      │    └── columns: a:1(int!null) b:2(int!null)
      └── aggregations
           └── agg-distinct [type=decimal, outer=(1)]
                └── sum [type=decimal]
                     └── variable: a [type=int]

# GroupBy with composite key formed by argument plus grouping columns.
norm expect=EliminateAggDistinctForKeys
SELECT sum(DISTINCT a) FROM abc GROUP BY b, c
----
project
 ├── columns: sum:4(decimal)
 └── group-by
      ├── columns: b:2(int!null) c:3(int!null) sum:4(decimal)
      ├── grouping columns: b:2(int!null) c:3(int!null)
      ├── key: (2,3)
      ├── fd: (2,3)-->(4)
      ├── scan abc
      │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      │    └── key: (1-3)
      └── aggregations
           └── sum [type=decimal, outer=(1)]
                └── variable: a [type=int]

# GroupBy with multiple aggregations simplified.
norm expect=EliminateAggDistinctForKeys
SELECT sum(DISTINCT i), avg(DISTINCT f) FROM a GROUP BY k
----
project
 ├── columns: sum:6(decimal) avg:7(float)
 └── group-by
      ├── columns: k:1(int!null) sum:6(decimal) avg:7(float)
      ├── grouping columns: k:1(int!null)
      ├── key: (1)
      ├── fd: (1)-->(6,7)
      ├── scan a
      │    ├── columns: k:1(int!null) i:2(int!null) f:3(float)
      │    ├── key: (1)
      │    └── fd: (1)-->(2,3), (2,3)~~>(1)
      └── aggregations
           ├── sum [type=decimal, outer=(2)]
           │    └── variable: i [type=int]
           └── avg [type=float, outer=(3)]
                └── variable: f [type=float]

# GroupBy where only some aggregations are simplified (the table has
# keys u,v and v,w).
norm expect=EliminateAggDistinctForKeys
SELECT sum(DISTINCT u), stddev(DISTINCT w), avg(DISTINCT z) FROM uvwz GROUP BY v
----
project
 ├── columns: sum:6(decimal) stddev:7(decimal) avg:8(decimal)
 └── group-by
      ├── columns: v:2(int!null) sum:6(decimal) stddev:7(decimal) avg:8(decimal)
      ├── grouping columns: v:2(int!null)
      ├── key: (2)
      ├── fd: (2)-->(6-8)
      ├── scan uvwz
      │    ├── columns: u:1(int!null) v:2(int!null) w:3(int!null) z:4(int!null)
      │    ├── key: (2,3)
      │    └── fd: (1,2)-->(3,4), (2,3)-->(1,4)
      └── aggregations
           ├── sum [type=decimal, outer=(1)]
           │    └── variable: u [type=int]
           ├── std-dev [type=decimal, outer=(3)]
           │    └── variable: w [type=int]
           └── agg-distinct [type=decimal, outer=(4)]
                └── avg [type=decimal]
                     └── variable: z [type=int]

# --------------------------------------------------
# EliminateAggFilteredDistinctForKeys
# --------------------------------------------------

# ScalarGroupBy with key argument. Only the first aggregation can be
# simplified.
norm expect=EliminateAggFilteredDistinctForKeys
SELECT sum(DISTINCT k) FILTER (WHERE k > 0), sum(DISTINCT i) FILTER (WHERE i > 0) FROM a
----
scalar-group-by
 ├── columns: sum:7(decimal) sum:9(decimal)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(7,9)
 ├── project
 │    ├── columns: column6:6(bool!null) column8:8(bool!null) k:1(int!null) i:2(int!null)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2,6), (2)-->(8)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int!null)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2)
 │    └── projections
 │         ├── k > 0 [type=bool, outer=(1)]
 │         └── i > 0 [type=bool, outer=(2)]
 └── aggregations
      ├── agg-filter [type=decimal, outer=(1,6)]
      │    ├── sum [type=decimal]
      │    │    └── variable: k [type=int]
      │    └── variable: column6 [type=bool]
      └── agg-filter [type=decimal, outer=(2,8)]
           ├── agg-distinct [type=decimal]
           │    └── sum [type=decimal]
           │         └── variable: i [type=int]
           └── variable: column8 [type=bool]

norm expect=EliminateAggFilteredDistinctForKeys
SELECT string_agg(DISTINCT s, ',') FILTER (WHERE s > 'a') FROM s
----
scalar-group-by
 ├── columns: string_agg:4(string)
 ├── cardinality: [1 - 1]
 ├── key: ()
 ├── fd: ()-->(4)
 ├── project
 │    ├── columns: column2:2(string!null) column3:3(bool!null) s:1(string!null)
 │    ├── key: (1)
 │    ├── fd: ()-->(2), (1)-->(3)
 │    ├── scan s
 │    │    ├── columns: s:1(string!null)
 │    │    └── key: (1)
 │    └── projections
 │         ├── const: ',' [type=string]
 │         └── s > 'a' [type=bool, outer=(1)]
 └── aggregations
      └── agg-filter [type=string, outer=(1,3)]
           ├── string-agg [type=string]
           │    ├── variable: s [type=string]
           │    └── const: ',' [type=string]
           └── variable: column3 [type=bool]

# GroupBy with key argument.
norm expect=EliminateAggFilteredDistinctForKeys
SELECT sum(DISTINCT k) FILTER (WHERE f > 0) FROM a GROUP BY i
----
project
 ├── columns: sum:7(decimal)
 └── group-by
      ├── columns: i:2(int!null) sum:7(decimal)
      ├── grouping columns: i:2(int!null)
      ├── key: (2)
      ├── fd: (2)-->(7)
      ├── project
      │    ├── columns: column6:6(bool) k:1(int!null) i:2(int!null)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2,6)
      │    ├── scan a
      │    │    ├── columns: k:1(int!null) i:2(int!null) f:3(float)
      │    │    ├── key: (1)
      │    │    └── fd: (1)-->(2,3), (2,3)~~>(1)
      │    └── projections
      │         └── f > 0.0 [type=bool, outer=(3)]
      └── aggregations
           └── agg-filter [type=decimal, outer=(1,6)]
                ├── sum [type=decimal]
                │    └── variable: k [type=int]
                └── variable: column6 [type=bool]

# GroupBy with no key.
norm expect-not=EliminateAggFilteredDistinctForKeys
SELECT sum(DISTINCT a) FILTER (WHERE c > 0) FROM abc GROUP BY b
----
project
 ├── columns: sum:5(decimal)
 └── group-by
      ├── columns: b:2(int!null) sum:5(decimal)
      ├── grouping columns: b:2(int!null)
      ├── key: (2)
      ├── fd: (2)-->(5)
      ├── project
      │    ├── columns: column4:4(bool!null) a:1(int!null) b:2(int!null)
      │    ├── scan abc
      │    │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      │    │    └── key: (1-3)
      │    └── projections
      │         └── c > 0 [type=bool, outer=(3)]
      └── aggregations
           └── agg-filter [type=decimal, outer=(1,4)]
                ├── agg-distinct [type=decimal]
                │    └── sum [type=decimal]
                │         └── variable: a [type=int]
                └── variable: column4 [type=bool]

# GroupBy with composite key formed by argument plus grouping columns.
norm expect=EliminateAggFilteredDistinctForKeys
SELECT sum(DISTINCT a) FILTER (WHERE c > 0) FROM abc GROUP BY b, c
----
project
 ├── columns: sum:5(decimal)
 └── group-by
      ├── columns: b:2(int!null) c:3(int!null) sum:5(decimal)
      ├── grouping columns: b:2(int!null) c:3(int!null)
      ├── key: (2,3)
      ├── fd: (2,3)-->(5)
      ├── project
      │    ├── columns: column4:4(bool!null) a:1(int!null) b:2(int!null) c:3(int!null)
      │    ├── key: (1-3)
      │    ├── fd: (3)-->(4)
      │    ├── scan abc
      │    │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null)
      │    │    └── key: (1-3)
      │    └── projections
      │         └── c > 0 [type=bool, outer=(3)]
      └── aggregations
           └── agg-filter [type=decimal, outer=(1,4)]
                ├── sum [type=decimal]
                │    └── variable: a [type=int]
                └── variable: column4 [type=bool]

# GroupBy with multiple aggregations simplified.
norm expect=EliminateAggFilteredDistinctForKeys
SELECT sum(DISTINCT i) FILTER (WHERE f > 0), avg(DISTINCT f) FILTER (WHERE i > 0) FROM a GROUP BY k
----
project
 ├── columns: sum:7(decimal) avg:9(float)
 └── group-by
      ├── columns: k:1(int!null) sum:7(decimal) avg:9(float)
      ├── grouping columns: k:1(int!null)
      ├── key: (1)
      ├── fd: (1)-->(7,9)
      ├── project
      │    ├── columns: column6:6(bool) column8:8(bool!null) k:1(int!null) i:2(int!null) f:3(float)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2,3,6), (2,3)~~>(1), (2)-->(8)
      │    ├── scan a
      │    │    ├── columns: k:1(int!null) i:2(int!null) f:3(float)
      │    │    ├── key: (1)
      │    │    └── fd: (1)-->(2,3), (2,3)~~>(1)
      │    └── projections
      │         ├── f > 0.0 [type=bool, outer=(3)]
      │         └── i > 0 [type=bool, outer=(2)]
      └── aggregations
           ├── agg-filter [type=decimal, outer=(2,6)]
           │    ├── sum [type=decimal]
           │    │    └── variable: i [type=int]
           │    └── variable: column6 [type=bool]
           └── agg-filter [type=float, outer=(3,8)]
                ├── avg [type=float]
                │    └── variable: f [type=float]
                └── variable: column8 [type=bool]

# GroupBy where only some aggregations are simplified (the table has
# keys u,v and v,w).
norm expect=EliminateAggFilteredDistinctForKeys
SELECT
    sum(DISTINCT u) FILTER (WHERE u > 0),
    stddev(DISTINCT w) FILTER (WHERE w > 0),
    avg(DISTINCT z) FILTER (WHERE z > 0)
FROM uvwz
GROUP BY v
----
project
 ├── columns: sum:7(decimal) stddev:9(decimal) avg:11(decimal)
 └── group-by
      ├── columns: v:2(int!null) sum:7(decimal) stddev:9(decimal) avg:11(decimal)
      ├── grouping columns: v:2(int!null)
      ├── key: (2)
      ├── fd: (2)-->(7,9,11)
      ├── project
      │    ├── columns: column6:6(bool!null) column8:8(bool!null) column10:10(bool!null) u:1(int!null) v:2(int!null) w:3(int!null) z:4(int!null)
      │    ├── key: (2,3)
      │    ├── fd: (1,2)-->(3,4), (2,3)-->(1,4), (1)-->(6), (3)-->(8), (4)-->(10)
      │    ├── scan uvwz
      │    │    ├── columns: u:1(int!null) v:2(int!null) w:3(int!null) z:4(int!null)
      │    │    ├── key: (2,3)
      │    │    └── fd: (1,2)-->(3,4), (2,3)-->(1,4)
      │    └── projections
      │         ├── u > 0 [type=bool, outer=(1)]
      │         ├── w > 0 [type=bool, outer=(3)]
      │         └── z > 0 [type=bool, outer=(4)]
      └── aggregations
           ├── agg-filter [type=decimal, outer=(1,6)]
           │    ├── sum [type=decimal]
           │    │    └── variable: u [type=int]
           │    └── variable: column6 [type=bool]
           ├── agg-filter [type=decimal, outer=(3,8)]
           │    ├── std-dev [type=decimal]
           │    │    └── variable: w [type=int]
           │    └── variable: column8 [type=bool]
           └── agg-filter [type=decimal, outer=(4,10)]
                ├── agg-distinct [type=decimal]
                │    └── avg [type=decimal]
                │         └── variable: z [type=int]
                └── variable: column10 [type=bool]

# --------------------------------------------------
# EliminateDistinctOnNoColumns
# --------------------------------------------------

norm expect=EliminateDistinctOnNoColumns
SELECT DISTINCT ON (a) a, b FROM abc WHERE a = 1
----
limit
 ├── columns: a:1(int!null) b:2(int!null)
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1,2)
 ├── select
 │    ├── columns: a:1(int!null) b:2(int!null)
 │    ├── fd: ()-->(1)
 │    ├── limit hint: 1.00
 │    ├── scan abc
 │    │    ├── columns: a:1(int!null) b:2(int!null)
 │    │    └── limit hint: 100.00
 │    └── filters
 │         └── a = 1 [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight), fd=()-->(1)]
 └── const: 1 [type=int]

norm expect=EliminateDistinctOnNoColumns
SELECT DISTINCT ON (b) b, c FROM abc WHERE b = 1 ORDER BY b, c
----
limit
 ├── columns: b:2(int!null) c:3(int!null)
 ├── internal-ordering: +3 opt(2)
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(2,3)
 ├── sort
 │    ├── columns: b:2(int!null) c:3(int!null)
 │    ├── fd: ()-->(2)
 │    ├── ordering: +3 opt(2) [actual: +3]
 │    ├── limit hint: 1.00
 │    └── select
 │         ├── columns: b:2(int!null) c:3(int!null)
 │         ├── fd: ()-->(2)
 │         ├── scan abc
 │         │    └── columns: b:2(int!null) c:3(int!null)
 │         └── filters
 │              └── b = 1 [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
 └── const: 1 [type=int]
