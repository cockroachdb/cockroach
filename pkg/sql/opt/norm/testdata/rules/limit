exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON)
----

exec-ddl
CREATE TABLE b (x INT PRIMARY KEY, y INT)
----

exec-ddl
CREATE TABLE ab (a INT PRIMARY KEY, b INT)
----

exec-ddl
CREATE TABLE uv (u INT PRIMARY KEY, v INT)
----

# --------------------------------------------------
# EliminateLimit
# --------------------------------------------------
opt expect=EliminateLimit
SELECT * FROM (SELECT * FROM a LIMIT 99) LIMIT 100
----
scan a
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── limit: 99
 ├── key: (1)
 └── fd: (1)-->(2-5)

opt expect=EliminateLimit
SELECT * FROM (SELECT * FROM a LIMIT 100) LIMIT 100
----
scan a
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── limit: 100
 ├── key: (1)
 └── fd: (1)-->(2-5)

# Don't eliminate the outer limit if it's less than the inner.
opt
SELECT * FROM (SELECT * FROM a LIMIT 100) LIMIT 99
----
limit
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── cardinality: [0 - 99]
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── limit: 100
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    └── limit hint: 99.00
 └── const: 99 [type=int]

# High limits (> max uint32), can't eliminate in this case.
opt
SELECT * FROM (SELECT * FROM a LIMIT 5000000000) LIMIT 5100000000
----
limit
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── limit: 5000000000
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    └── limit hint: 5100000000.00
 └── const: 5100000000 [type=int]

# Don't eliminate in case of negative limit.
opt
SELECT * FROM (SELECT * FROM a LIMIT 0) LIMIT -1
----
limit
 ├── columns: k:1(int!null) i:2(int!null) f:3(float!null) s:4(string!null) j:5(jsonb!null)
 ├── cardinality: [0 - 0]
 ├── side-effects
 ├── key: ()
 ├── fd: ()-->(1-5)
 ├── values
 │    ├── columns: k:1(int!null) i:2(int!null) f:3(float!null) s:4(string!null) j:5(jsonb!null)
 │    ├── cardinality: [0 - 0]
 │    ├── key: ()
 │    ├── fd: ()-->(1-5)
 │    └── limit hint: -1.00
 └── const: -1 [type=int]

# --------------------------------------------------
# EliminateOffset
# --------------------------------------------------
opt expect=EliminateOffset
SELECT * FROM a OFFSET 0
----
scan a
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── key: (1)
 └── fd: (1)-->(2-5)

opt expect=EliminateOffset
SELECT * FROM a LIMIT 5 OFFSET 0
----
scan a
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── limit: 5
 ├── key: (1)
 └── fd: (1)-->(2-5)

opt expect-not=EliminateOffset
SELECT * FROM a LIMIT 5 OFFSET 1
----
offset
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── cardinality: [0 - 5]
 ├── key: (1)
 ├── fd: (1)-->(2-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── limit: 6
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5)
 └── const: 1 [type=int]

# --------------------------------------------------
# PushLimitIntoProject
# --------------------------------------------------
opt expect=PushLimitIntoProject
SELECT k, f*2.0 AS r FROM a LIMIT 5
----
project
 ├── columns: k:1(int!null) r:6(float)
 ├── cardinality: [0 - 5]
 ├── key: (1)
 ├── fd: (1)-->(6)
 ├── scan a
 │    ├── columns: k:1(int!null) f:3(float)
 │    ├── limit: 5
 │    ├── key: (1)
 │    └── fd: (1)-->(3)
 └── projections
      └── f * 2.0 [type=float, outer=(3)]

opt expect=PushLimitIntoProject
SELECT k, f*2.0 AS r FROM a ORDER BY k LIMIT 5
----
project
 ├── columns: k:1(int!null) r:6(float)
 ├── cardinality: [0 - 5]
 ├── key: (1)
 ├── fd: (1)-->(6)
 ├── ordering: +1
 ├── scan a
 │    ├── columns: k:1(int!null) f:3(float)
 │    ├── limit: 5
 │    ├── key: (1)
 │    ├── fd: (1)-->(3)
 │    └── ordering: +1
 └── projections
      └── f * 2.0 [type=float, outer=(3)]

# Don't push the limit through project when the ordering is on a
# synthesized column.
opt expect-not=PushLimitIntoProject
SELECT k, f*2.0 AS r FROM a ORDER BY r LIMIT 5
----
limit
 ├── columns: k:1(int!null) r:6(float)
 ├── internal-ordering: +6
 ├── cardinality: [0 - 5]
 ├── key: (1)
 ├── fd: (1)-->(6)
 ├── ordering: +6
 ├── sort
 │    ├── columns: k:1(int!null) r:6(float)
 │    ├── key: (1)
 │    ├── fd: (1)-->(6)
 │    ├── ordering: +6
 │    ├── limit hint: 5.00
 │    └── project
 │         ├── columns: r:6(float) k:1(int!null)
 │         ├── key: (1)
 │         ├── fd: (1)-->(6)
 │         ├── scan a
 │         │    ├── columns: k:1(int!null) f:3(float)
 │         │    ├── key: (1)
 │         │    └── fd: (1)-->(3)
 │         └── projections
 │              └── f * 2.0 [type=float, outer=(3)]
 └── const: 5 [type=int]


# Detect PushLimitIntoProject and FilterUnusedLimitCols dependency cycle.
opt
SELECT f, f+1.1 AS r FROM (SELECT f, i FROM a GROUP BY f, i) a ORDER BY f LIMIT 5
----
project
 ├── columns: f:3(float) r:6(float)
 ├── cardinality: [0 - 5]
 ├── ordering: +3
 ├── limit
 │    ├── columns: i:2(int) f:3(float)
 │    ├── internal-ordering: +3
 │    ├── cardinality: [0 - 5]
 │    ├── key: (2,3)
 │    ├── ordering: +3
 │    ├── distinct-on
 │    │    ├── columns: i:2(int) f:3(float)
 │    │    ├── grouping columns: i:2(int) f:3(float)
 │    │    ├── key: (2,3)
 │    │    ├── ordering: +3
 │    │    ├── limit hint: 5.00
 │    │    └── sort
 │    │         ├── columns: i:2(int) f:3(float)
 │    │         ├── ordering: +3
 │    │         ├── limit hint: 5.00
 │    │         └── scan a
 │    │              └── columns: i:2(int) f:3(float)
 │    └── const: 5 [type=int]
 └── projections
      └── f + 1.1 [type=float, outer=(3)]

# Don't push negative limit into Scan.
opt
SELECT * FROM a LIMIT -1
----
limit
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 ├── cardinality: [0 - 0]
 ├── side-effects
 ├── key: ()
 ├── fd: ()-->(1-5)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5)
 │    └── limit hint: -1.00
 └── const: -1 [type=int]

# --------------------------------------------------
# PushOffsetIntoProject
# --------------------------------------------------
opt expect=PushOffsetIntoProject
SELECT k, f*2.0 AS r FROM a OFFSET 5
----
project
 ├── columns: k:1(int!null) r:6(float)
 ├── key: (1)
 ├── fd: (1)-->(6)
 ├── offset
 │    ├── columns: k:1(int!null) f:3(float)
 │    ├── key: (1)
 │    ├── fd: (1)-->(3)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) f:3(float)
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(3)
 │    └── const: 5 [type=int]
 └── projections
      └── f * 2.0 [type=float, outer=(3)]

opt expect=PushOffsetIntoProject
SELECT k, f*2.0 AS r FROM a ORDER BY k OFFSET 5
----
project
 ├── columns: k:1(int!null) r:6(float)
 ├── key: (1)
 ├── fd: (1)-->(6)
 ├── ordering: +1
 ├── offset
 │    ├── columns: k:1(int!null) f:3(float)
 │    ├── internal-ordering: +1
 │    ├── key: (1)
 │    ├── fd: (1)-->(3)
 │    ├── ordering: +1
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) f:3(float)
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(3)
 │    │    └── ordering: +1
 │    └── const: 5 [type=int]
 └── projections
      └── f * 2.0 [type=float, outer=(3)]

# Don't push the offset through project when the ordering is on a
# synthesized column.
opt expect-not=PushOffsetIntoProject
SELECT k, f*2.0 AS r FROM a ORDER BY r OFFSET 5
----
offset
 ├── columns: k:1(int!null) r:6(float)
 ├── internal-ordering: +6
 ├── key: (1)
 ├── fd: (1)-->(6)
 ├── ordering: +6
 ├── sort
 │    ├── columns: k:1(int!null) r:6(float)
 │    ├── key: (1)
 │    ├── fd: (1)-->(6)
 │    ├── ordering: +6
 │    └── project
 │         ├── columns: r:6(float) k:1(int!null)
 │         ├── key: (1)
 │         ├── fd: (1)-->(6)
 │         ├── scan a
 │         │    ├── columns: k:1(int!null) f:3(float)
 │         │    ├── key: (1)
 │         │    └── fd: (1)-->(3)
 │         └── projections
 │              └── f * 2.0 [type=float, outer=(3)]
 └── const: 5 [type=int]

# Detect PushOffsetIntoProject and FilterUnusedOffsetCols dependency cycle.
opt
SELECT f, f+1.1 AS r FROM (SELECT f, i FROM a GROUP BY f, i) a ORDER BY f OFFSET 5
----
project
 ├── columns: f:3(float) r:6(float)
 ├── ordering: +3
 ├── offset
 │    ├── columns: i:2(int) f:3(float)
 │    ├── internal-ordering: +3
 │    ├── key: (2,3)
 │    ├── ordering: +3
 │    ├── distinct-on
 │    │    ├── columns: i:2(int) f:3(float)
 │    │    ├── grouping columns: i:2(int) f:3(float)
 │    │    ├── key: (2,3)
 │    │    ├── ordering: +3
 │    │    └── sort
 │    │         ├── columns: i:2(int) f:3(float)
 │    │         ├── ordering: +3
 │    │         └── scan a
 │    │              └── columns: i:2(int) f:3(float)
 │    └── const: 5 [type=int]
 └── projections
      └── f + 1.1 [type=float, outer=(3)]

# --------------------------------------------------
# PushLimitIntoProject + PushOffsetIntoProject
# --------------------------------------------------
opt expect=(PushLimitIntoProject,PushOffsetIntoProject)
SELECT k, f*2.0 AS r FROM a OFFSET 5 LIMIT 10
----
project
 ├── columns: k:1(int!null) r:6(float)
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(6)
 ├── offset
 │    ├── columns: k:1(int!null) f:3(float)
 │    ├── cardinality: [0 - 10]
 │    ├── key: (1)
 │    ├── fd: (1)-->(3)
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) f:3(float)
 │    │    ├── limit: 15
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(3)
 │    └── const: 5 [type=int]
 └── projections
      └── f * 2.0 [type=float, outer=(3)]

opt expect=(PushLimitIntoProject,PushOffsetIntoProject)
SELECT f, f+1.1 AS r FROM (SELECT f, i FROM a GROUP BY f, i) a ORDER BY f OFFSET 5 LIMIT 10
----
project
 ├── columns: f:3(float) r:6(float)
 ├── cardinality: [0 - 10]
 ├── ordering: +3
 ├── offset
 │    ├── columns: i:2(int) f:3(float)
 │    ├── internal-ordering: +3
 │    ├── cardinality: [0 - 10]
 │    ├── key: (2,3)
 │    ├── ordering: +3
 │    ├── limit
 │    │    ├── columns: i:2(int) f:3(float)
 │    │    ├── internal-ordering: +3
 │    │    ├── cardinality: [0 - 15]
 │    │    ├── key: (2,3)
 │    │    ├── ordering: +3
 │    │    ├── distinct-on
 │    │    │    ├── columns: i:2(int) f:3(float)
 │    │    │    ├── grouping columns: i:2(int) f:3(float)
 │    │    │    ├── key: (2,3)
 │    │    │    ├── ordering: +3
 │    │    │    ├── limit hint: 15.00
 │    │    │    └── sort
 │    │    │         ├── columns: i:2(int) f:3(float)
 │    │    │         ├── ordering: +3
 │    │    │         ├── limit hint: 15.00
 │    │    │         └── scan a
 │    │    │              └── columns: i:2(int) f:3(float)
 │    │    └── const: 15 [type=int]
 │    └── const: 5 [type=int]
 └── projections
      └── f + 1.1 [type=float, outer=(3)]

# --------------------------------------------------
# PushLimitIntoOffset
# --------------------------------------------------

opt expect=PushLimitIntoOffset
SELECT k, i FROM a LIMIT 10 OFFSET 10
----
offset
 ├── columns: k:1(int!null) i:2(int)
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int)
 │    ├── limit: 20
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── const: 10 [type=int]

opt expect=(PushLimitIntoOffset)
SELECT k, i FROM a OFFSET 10 LIMIT 10
----
offset
 ├── columns: k:1(int!null) i:2(int)
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── scan a
 │    ├── columns: k:1(int!null) i:2(int)
 │    ├── limit: 20
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── const: 10 [type=int]

# Limit can be pushed into the ordering if they have the same ordering.
opt expect=PushLimitIntoOffset
SELECT k, i FROM (SELECT k, i FROM a ORDER BY i OFFSET 20) ORDER BY i LIMIT 10
----
offset
 ├── columns: k:1(int!null) i:2(int)
 ├── internal-ordering: +2
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── ordering: +2
 ├── limit
 │    ├── columns: k:1(int!null) i:2(int)
 │    ├── internal-ordering: +2
 │    ├── cardinality: [0 - 30]
 │    ├── key: (1)
 │    ├── fd: (1)-->(2)
 │    ├── ordering: +2
 │    ├── sort
 │    │    ├── columns: k:1(int!null) i:2(int)
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2)
 │    │    ├── ordering: +2
 │    │    ├── limit hint: 30.00
 │    │    └── scan a
 │    │         ├── columns: k:1(int!null) i:2(int)
 │    │         ├── key: (1)
 │    │         └── fd: (1)-->(2)
 │    └── const: 30 [type=int]
 └── const: 20 [type=int]

opt expect-not=PushLimitIntoOffset
SELECT k, i FROM (SELECT k, i FROM a ORDER BY i OFFSET 20) ORDER BY i DESC LIMIT 10
----
limit
 ├── columns: k:1(int!null) i:2(int)
 ├── internal-ordering: -2
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── ordering: -2
 ├── sort
 │    ├── columns: k:1(int!null) i:2(int)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2)
 │    ├── ordering: -2
 │    ├── limit hint: 10.00
 │    └── offset
 │         ├── columns: k:1(int!null) i:2(int)
 │         ├── internal-ordering: +2
 │         ├── key: (1)
 │         ├── fd: (1)-->(2)
 │         ├── sort
 │         │    ├── columns: k:1(int!null) i:2(int)
 │         │    ├── key: (1)
 │         │    ├── fd: (1)-->(2)
 │         │    ├── ordering: +2
 │         │    └── scan a
 │         │         ├── columns: k:1(int!null) i:2(int)
 │         │         ├── key: (1)
 │         │         └── fd: (1)-->(2)
 │         └── const: 20 [type=int]
 └── const: 10 [type=int]

# Using MaxInt64. Do not apply rule when sum overflows.
opt expect-not=PushLimitIntoOffset
SELECT k, i FROM a LIMIT 9223372036854775807 OFFSET 9223372036854775807
----
limit
 ├── columns: k:1(int!null) i:2(int)
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── offset
 │    ├── columns: k:1(int!null) i:2(int)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2)
 │    ├── limit hint: 9223372036854775808.00
 │    ├── scan a
 │    │    ├── columns: k:1(int!null) i:2(int)
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2)
 │    │    └── limit hint: 18446744073709551616.00
 │    └── const: 9223372036854775807 [type=int]
 └── const: 9223372036854775807 [type=int]

opt expect=PushLimitIntoOrdinality
SELECT * FROM (SELECT * FROM a ORDER BY k) WITH ORDINALITY LIMIT 10
----
ordinality
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) ordinality:6(int!null)
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(2-6), (6)-->(1-5)
 └── scan a
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
      ├── limit: 10
      ├── key: (1)
      ├── fd: (1)-->(2-5)
      └── ordering: +1

opt expect=PushLimitIntoOrdinality
SELECT * FROM a WITH ORDINALITY ORDER BY k LIMIT 10
----
sort
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) ordinality:6(int!null)
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(2-6), (6)-->(1-5)
 ├── ordering: +1
 └── ordinality
      ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) ordinality:6(int!null)
      ├── cardinality: [0 - 10]
      ├── key: (1)
      ├── fd: (1)-->(2-6), (6)-->(1-5)
      └── scan a
           ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
           ├── limit: 10
           ├── key: (1)
           └── fd: (1)-->(2-5)


# More complex example of an intersection:
# +(i|f) +s and +f have the intersection +(i|f) +s
opt expect=PushLimitIntoOrdinality
SELECT * FROM (SELECT * FROM a WHERE i=f ORDER BY i, s) WITH ORDINALITY ORDER BY f LIMIT 10
----
ordinality
 ├── columns: k:1(int!null) i:2(int!null) f:3(float!null) s:4(string) j:5(jsonb) ordinality:6(int!null)
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(2-6), (2)==(3), (3)==(2), (6)-->(1-5)
 ├── ordering: +(2|3) [actual: +2]
 └── limit
      ├── columns: k:1(int!null) i:2(int!null) f:3(float!null) s:4(string) j:5(jsonb)
      ├── internal-ordering: +(2|3),+4
      ├── cardinality: [0 - 10]
      ├── key: (1)
      ├── fd: (1)-->(2-5), (2)==(3), (3)==(2)
      ├── ordering: +(2|3),+4 [actual: +2,+4]
      ├── sort
      │    ├── columns: k:1(int!null) i:2(int!null) f:3(float!null) s:4(string) j:5(jsonb)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-5), (2)==(3), (3)==(2)
      │    ├── ordering: +(2|3),+4 [actual: +2,+4]
      │    ├── limit hint: 10.00
      │    └── select
      │         ├── columns: k:1(int!null) i:2(int!null) f:3(float!null) s:4(string) j:5(jsonb)
      │         ├── key: (1)
      │         ├── fd: (1)-->(2-5), (2)==(3), (3)==(2)
      │         ├── scan a
      │         │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
      │         │    ├── key: (1)
      │         │    └── fd: (1)-->(2-5)
      │         └── filters
      │              └── i = f [type=bool, outer=(2,3), constraints=(/2: (/NULL - ]; /3: (/NULL - ]), fd=(2)==(3), (3)==(2)]
      └── const: 10 [type=int]

opt expect-not=PushLimitIntoOrdinality
SELECT * FROM (SELECT * FROM a ORDER BY k) WITH ORDINALITY ORDER BY i LIMIT 10
----
limit
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) ordinality:6(int!null)
 ├── internal-ordering: +2
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(2-6), (6)-->(1-5)
 ├── ordering: +2
 ├── sort
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) ordinality:6(int!null)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-6), (6)-->(1-5)
 │    ├── ordering: +2
 │    ├── limit hint: 10.00
 │    └── ordinality
 │         ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) ordinality:6(int!null)
 │         ├── key: (1)
 │         ├── fd: (1)-->(2-6), (6)-->(1-5)
 │         └── scan a
 │              ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │              ├── key: (1)
 │              ├── fd: (1)-->(2-5)
 │              └── ordering: +1
 └── const: 10 [type=int]

opt expect-not=PushLimitIntoOrdinality
SELECT * FROM (SELECT * FROM a WITH ORDINALITY) ORDER BY ordinality LIMIT 10
----
limit
 ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) ordinality:6(int!null)
 ├── internal-ordering: +6
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(2-6), (6)-->(1-5)
 ├── ordering: +6
 ├── ordinality
 │    ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb) ordinality:6(int!null)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-6), (6)-->(1-5)
 │    ├── ordering: +6
 │    ├── limit hint: 10.00
 │    └── scan a
 │         ├── columns: k:1(int!null) i:2(int) f:3(float) s:4(string) j:5(jsonb)
 │         ├── key: (1)
 │         ├── fd: (1)-->(2-5)
 │         └── limit hint: 10.00
 └── const: 10 [type=int]

# ---------------------
# PushLimitIntoLeftJoin
# ---------------------

norm expect=PushLimitIntoLeftJoin
SELECT * FROM ab LEFT JOIN uv ON a = u LIMIT 10
----
limit
 ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 ├── cardinality: [0 - 10]
 ├── key: (1,3)
 ├── fd: (1)-->(2), (3)-->(4)
 ├── left-join (hash)
 │    ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 │    ├── key: (1,3)
 │    ├── fd: (1)-->(2), (3)-->(4)
 │    ├── limit hint: 10.00
 │    ├── limit
 │    │    ├── columns: a:1(int!null) b:2(int)
 │    │    ├── cardinality: [0 - 10]
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2)
 │    │    ├── scan ab
 │    │    │    ├── columns: a:1(int!null) b:2(int)
 │    │    │    ├── key: (1)
 │    │    │    ├── fd: (1)-->(2)
 │    │    │    └── limit hint: 10.00
 │    │    └── const: 10 [type=int]
 │    ├── scan uv
 │    │    ├── columns: u:3(int!null) v:4(int)
 │    │    ├── key: (3)
 │    │    └── fd: (3)-->(4)
 │    └── filters
 │         └── a = u [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 └── const: 10 [type=int]

# Ordering can be pushed down.
norm expect=PushLimitIntoLeftJoin
SELECT * FROM ab LEFT JOIN uv ON a = u ORDER BY a LIMIT 10
----
limit
 ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 ├── internal-ordering: +1
 ├── cardinality: [0 - 10]
 ├── key: (1,3)
 ├── fd: (1)-->(2), (3)-->(4)
 ├── ordering: +1
 ├── sort
 │    ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 │    ├── key: (1,3)
 │    ├── fd: (1)-->(2), (3)-->(4)
 │    ├── ordering: +1
 │    ├── limit hint: 10.00
 │    └── left-join (hash)
 │         ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 │         ├── key: (1,3)
 │         ├── fd: (1)-->(2), (3)-->(4)
 │         ├── limit
 │         │    ├── columns: a:1(int!null) b:2(int)
 │         │    ├── internal-ordering: +1
 │         │    ├── cardinality: [0 - 10]
 │         │    ├── key: (1)
 │         │    ├── fd: (1)-->(2)
 │         │    ├── scan ab
 │         │    │    ├── columns: a:1(int!null) b:2(int)
 │         │    │    ├── key: (1)
 │         │    │    ├── fd: (1)-->(2)
 │         │    │    ├── ordering: +1
 │         │    │    └── limit hint: 10.00
 │         │    └── const: 10 [type=int]
 │         ├── scan uv
 │         │    ├── columns: u:3(int!null) v:4(int)
 │         │    ├── key: (3)
 │         │    └── fd: (3)-->(4)
 │         └── filters
 │              └── a = u [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 └── const: 10 [type=int]

norm expect=PushLimitIntoLeftJoin
SELECT * FROM ab LEFT JOIN uv ON a = u ORDER BY b LIMIT 10
----
limit
 ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 ├── internal-ordering: +2
 ├── cardinality: [0 - 10]
 ├── key: (1,3)
 ├── fd: (1)-->(2), (3)-->(4)
 ├── ordering: +2
 ├── sort
 │    ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 │    ├── key: (1,3)
 │    ├── fd: (1)-->(2), (3)-->(4)
 │    ├── ordering: +2
 │    ├── limit hint: 10.00
 │    └── left-join (hash)
 │         ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 │         ├── key: (1,3)
 │         ├── fd: (1)-->(2), (3)-->(4)
 │         ├── limit
 │         │    ├── columns: a:1(int!null) b:2(int)
 │         │    ├── internal-ordering: +2
 │         │    ├── cardinality: [0 - 10]
 │         │    ├── key: (1)
 │         │    ├── fd: (1)-->(2)
 │         │    ├── sort
 │         │    │    ├── columns: a:1(int!null) b:2(int)
 │         │    │    ├── key: (1)
 │         │    │    ├── fd: (1)-->(2)
 │         │    │    ├── ordering: +2
 │         │    │    ├── limit hint: 10.00
 │         │    │    └── scan ab
 │         │    │         ├── columns: a:1(int!null) b:2(int)
 │         │    │         ├── key: (1)
 │         │    │         └── fd: (1)-->(2)
 │         │    └── const: 10 [type=int]
 │         ├── scan uv
 │         │    ├── columns: u:3(int!null) v:4(int)
 │         │    ├── key: (3)
 │         │    └── fd: (3)-->(4)
 │         └── filters
 │              └── a = u [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 └── const: 10 [type=int]

# Ordering on u is not equivalent to ordering on a because of NULLs; it cannot
# be pushed down.
norm expect-not=PushLimitIntoLeftJoin
SELECT * FROM ab LEFT JOIN uv ON a = u ORDER BY u LIMIT 10
----
limit
 ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 ├── internal-ordering: +3
 ├── cardinality: [0 - 10]
 ├── key: (1,3)
 ├── fd: (1)-->(2), (3)-->(4)
 ├── ordering: +3
 ├── sort
 │    ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 │    ├── key: (1,3)
 │    ├── fd: (1)-->(2), (3)-->(4)
 │    ├── ordering: +3
 │    ├── limit hint: 10.00
 │    └── left-join (hash)
 │         ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 │         ├── key: (1,3)
 │         ├── fd: (1)-->(2), (3)-->(4)
 │         ├── scan ab
 │         │    ├── columns: a:1(int!null) b:2(int)
 │         │    ├── key: (1)
 │         │    └── fd: (1)-->(2)
 │         ├── scan uv
 │         │    ├── columns: u:3(int!null) v:4(int)
 │         │    ├── key: (3)
 │         │    └── fd: (3)-->(4)
 │         └── filters
 │              └── a = u [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 └── const: 10 [type=int]

# Ordering cannot be pushed down.
norm expect-not=PushLimitIntoLeftJoin
SELECT * FROM ab LEFT JOIN uv ON a = u ORDER BY v LIMIT 10
----
limit
 ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 ├── internal-ordering: +4
 ├── cardinality: [0 - 10]
 ├── key: (1,3)
 ├── fd: (1)-->(2), (3)-->(4)
 ├── ordering: +4
 ├── sort
 │    ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 │    ├── key: (1,3)
 │    ├── fd: (1)-->(2), (3)-->(4)
 │    ├── ordering: +4
 │    ├── limit hint: 10.00
 │    └── left-join (hash)
 │         ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 │         ├── key: (1,3)
 │         ├── fd: (1)-->(2), (3)-->(4)
 │         ├── scan ab
 │         │    ├── columns: a:1(int!null) b:2(int)
 │         │    ├── key: (1)
 │         │    └── fd: (1)-->(2)
 │         ├── scan uv
 │         │    ├── columns: u:3(int!null) v:4(int)
 │         │    ├── key: (3)
 │         │    └── fd: (3)-->(4)
 │         └── filters
 │              └── a = u [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 └── const: 10 [type=int]

norm expect-not=PushLimitIntoLeftJoin
SELECT * FROM ab LEFT JOIN uv ON a = u ORDER BY a, v LIMIT 10
----
limit
 ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 ├── internal-ordering: +1,+4
 ├── cardinality: [0 - 10]
 ├── key: (1,3)
 ├── fd: (1)-->(2), (3)-->(4)
 ├── ordering: +1,+4
 ├── sort
 │    ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 │    ├── key: (1,3)
 │    ├── fd: (1)-->(2), (3)-->(4)
 │    ├── ordering: +1,+4
 │    ├── limit hint: 10.00
 │    └── left-join (hash)
 │         ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 │         ├── key: (1,3)
 │         ├── fd: (1)-->(2), (3)-->(4)
 │         ├── scan ab
 │         │    ├── columns: a:1(int!null) b:2(int)
 │         │    ├── key: (1)
 │         │    └── fd: (1)-->(2)
 │         ├── scan uv
 │         │    ├── columns: u:3(int!null) v:4(int)
 │         │    ├── key: (3)
 │         │    └── fd: (3)-->(4)
 │         └── filters
 │              └── a = u [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 └── const: 10 [type=int]

norm expect-not=PushLimitIntoLeftJoin
SELECT * FROM ab LEFT JOIN uv ON a = u ORDER BY u, b LIMIT 10
----
limit
 ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 ├── internal-ordering: +3,+2
 ├── cardinality: [0 - 10]
 ├── key: (1,3)
 ├── fd: (1)-->(2), (3)-->(4)
 ├── ordering: +3,+2
 ├── sort
 │    ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 │    ├── key: (1,3)
 │    ├── fd: (1)-->(2), (3)-->(4)
 │    ├── ordering: +3,+2
 │    ├── limit hint: 10.00
 │    └── left-join (hash)
 │         ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 │         ├── key: (1,3)
 │         ├── fd: (1)-->(2), (3)-->(4)
 │         ├── scan ab
 │         │    ├── columns: a:1(int!null) b:2(int)
 │         │    ├── key: (1)
 │         │    └── fd: (1)-->(2)
 │         ├── scan uv
 │         │    ├── columns: u:3(int!null) v:4(int)
 │         │    ├── key: (3)
 │         │    └── fd: (3)-->(4)
 │         └── filters
 │              └── a = u [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 └── const: 10 [type=int]

# Rule should not fire if the input's cardinality is already less than the
# limit.
norm expect-not=PushLimitIntoLeftJoin
SELECT * FROM (SELECT * FROM ab LIMIT 5) LEFT JOIN uv ON a = u LIMIT 10
----
limit
 ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 ├── cardinality: [0 - 10]
 ├── key: (1,3)
 ├── fd: (1)-->(2), (3)-->(4)
 ├── left-join (hash)
 │    ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 │    ├── key: (1,3)
 │    ├── fd: (1)-->(2), (3)-->(4)
 │    ├── limit hint: 10.00
 │    ├── limit
 │    │    ├── columns: a:1(int!null) b:2(int)
 │    │    ├── cardinality: [0 - 5]
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2)
 │    │    ├── scan ab
 │    │    │    ├── columns: a:1(int!null) b:2(int)
 │    │    │    ├── key: (1)
 │    │    │    ├── fd: (1)-->(2)
 │    │    │    └── limit hint: 5.00
 │    │    └── const: 5 [type=int]
 │    ├── scan uv
 │    │    ├── columns: u:3(int!null) v:4(int)
 │    │    ├── key: (3)
 │    │    └── fd: (3)-->(4)
 │    └── filters
 │         └── a = u [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 └── const: 10 [type=int]

# Push the limit even if the input is already limited (but with a higher limit).
norm expect=PushLimitIntoLeftJoin
SELECT * FROM (SELECT * FROM ab LIMIT 20) LEFT JOIN uv ON a = u LIMIT 10
----
limit
 ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 ├── cardinality: [0 - 10]
 ├── key: (1,3)
 ├── fd: (1)-->(2), (3)-->(4)
 ├── left-join (hash)
 │    ├── columns: a:1(int!null) b:2(int) u:3(int) v:4(int)
 │    ├── key: (1,3)
 │    ├── fd: (1)-->(2), (3)-->(4)
 │    ├── limit hint: 10.00
 │    ├── limit
 │    │    ├── columns: a:1(int!null) b:2(int)
 │    │    ├── cardinality: [0 - 10]
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2)
 │    │    ├── limit
 │    │    │    ├── columns: a:1(int!null) b:2(int)
 │    │    │    ├── cardinality: [0 - 20]
 │    │    │    ├── key: (1)
 │    │    │    ├── fd: (1)-->(2)
 │    │    │    ├── limit hint: 10.00
 │    │    │    ├── scan ab
 │    │    │    │    ├── columns: a:1(int!null) b:2(int)
 │    │    │    │    ├── key: (1)
 │    │    │    │    ├── fd: (1)-->(2)
 │    │    │    │    └── limit hint: 20.00
 │    │    │    └── const: 20 [type=int]
 │    │    └── const: 10 [type=int]
 │    ├── scan uv
 │    │    ├── columns: u:3(int!null) v:4(int)
 │    │    ├── key: (3)
 │    │    └── fd: (3)-->(4)
 │    └── filters
 │         └── a = u [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 └── const: 10 [type=int]
