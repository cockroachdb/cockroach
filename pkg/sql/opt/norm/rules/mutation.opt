# =============================================================================
# mutation.opt contains normalization rules for the mutation operators.
# =============================================================================

# SimplifyPartialIndexProjections converts partial index PUT and DEL projected
# expressions to false when it is guaranteed that the mutation will not require
# changes to the associated partial index. These projected expressions can only
# be simplified to false when an UPDATE mutates neither the associated index's
# columns nor the columns referenced in the partial index predicate.
[SimplifyPartialIndexProjections, Normalize]
(Update
    $project:(Project $input:* $projections:* $passthrough:*)
    $uniqueChecks:*
    $fkChecks:*
    $mutationPrivate:* &
        ^(ColsAreEmpty
            $simplifiableCols:(SimplifiablePartialIndexProjectCols
                $mutationPrivate
                $uniqueChecks
                $fkChecks
                $projections
            )
        )
)
=>
(Update
    (Project
        $input
        (Let
            (
                $simplifiedProjections
                $simplifiedPrivate
            ):(SimplifyPartialIndexProjections
                $projections
                $passthrough
                $simplifiableCols
                $mutationPrivate
            )
            $simplifiedProjections
        )
        $passthrough
    )
    $uniqueChecks
    $fkChecks
    $simplifiedPrivate
)

# RemoveZeroCardLock removes lock operations when we know no rows will be locked.
[RemoveZeroCardLock, Normalize]
(Lock $rows:* & (HasZeroRows $rows))
=>
$rows

# TrySwapMutation
[TrySwapMutation, Normalize]
(Update | Delete
    $sel:(Select
        (Scan $scanPrivate:*)
        $filters:*
    ) & (HasZeroOrOneRow $sel)
    []
    []
    $mutationPrivate:* &
        (CanUseSwapMutation
            $mutationPrivate
            $filters
            $scanPrivate
        ) &
        (Let
            ($values $ok):(BuildSwapMutationValues $mutationPrivate $filters $scanPrivate)
            $ok
        )
)
=>
((OpName)
    $values
    []
    []
    (UseSwapMutation $mutationPrivate)
)

# TrySwapMutationProject
[TrySwapMutationProject, Normalize]
(Update | Delete
    (Project
        $sel:(Select
            (Scan $scanPrivate:*)
            $filters:*
        ) & (HasZeroOrOneRow $sel)
        $projections:*
        $passthrough:*
    )
    []
    []
    $mutationPrivate:* &
        (CanUseSwapMutation
            $mutationPrivate
            $filters
            $scanPrivate
        ) &
        (Let
            ($values $ok):(BuildSwapMutationValues $mutationPrivate $filters $scanPrivate)
            $ok
        )
)
=>
((OpName)
    (Project
        $values
        $projections
        $passthrough
    )
    []
    []
    (UseSwapMutation $mutationPrivate)
)
