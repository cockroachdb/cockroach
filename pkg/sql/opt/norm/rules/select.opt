# =============================================================================
# select.opt contains normalization rules for the Select operator.
# =============================================================================


# EliminateSelect discards an unnecessary Select operator in the case where its
# filter is always true. Keep this near the top of the file so that it tends to
# be checked early.
[EliminateSelect, Normalize]
(Select $input:* (True)) => $input

# EnsureSelectFiltersAnd replaces an And operator in a Select filter with the
# Filters operator. This allows other rules to rely upon the presence of the
# Filters when matching. See comment at top of bool.opt for more details. This
# rule is a special-case of the EnsureSelectFilters rule, for performance
# reasons (no need to construct a new conditions list) in a common case.
[EnsureSelectFiltersAnd, Normalize]
(Select
    $input:*
    (And $conditions:*)
)
=>
(Select
    $input
    (Filters $conditions)
)

# EnsureSelectFilters adds a Filters operator to a Select's filter condition
# if it does not already exist. This allows other rules to rely upon the
# presence of the Filters when matching. See comment at top of bool.opt for
# more details.
[EnsureSelectFilters, Normalize]
(Select
    $input:*
    $filter:^(Filters | And | True | False)
)
=>
(Select
    $input
    (Filters [ $filter ])
)

# MergeSelects combines two nested Select operators into a single Select that
# ANDs the filter conditions of the two Selects.
[MergeSelects, Normalize]
(Select
    (Select
        $input:*
        $innerFilter:*
    )
    $filter:*
)
=>
(Select
    $input
    (ConcatFilters $innerFilter $filter)
)

# PushSelectIntoProject pushes the Select operator into its Project input. This
# is typically preferable because it minimizes the number of rows which Project
# needs to process. This is especially important if Project is adding expensive
# computed columns.
[PushSelectIntoProject, Normalize]
(Select
    (Project
        $input:*
        $projections:*
    )
    (Filters
        $list:[ ... $condition:* & (IsBoundBy $condition $input) ... ]
    )
)
=>
(Select
    (Project
        (Select
            $input
            (Filters (ExtractBoundConditions $list $input))
        )
        $projections
    )
    (Filters (ExtractUnboundConditions $list $input))
)

# MergeSelectInnerJoin merges a Select operator with an InnerJoin input by
# AND'ing the filter conditions of each and creating a new InnerJoin with that
# On condition. This is only safe to do with InnerJoin in the general case
# where the conditions could filter either left or right rows. The special case
# where a condition filters only one or the other is already taken care of by
# the PushSelectIntoJoin rules.
# NOTE: Keep this rule ordered before the PushSelectIntoJoin rules to avoid
#       missing out on the potential for new filter inference based on
#       equivalent columns.
[MergeSelectInnerJoin, Normalize]
(Select
    $input:(InnerJoin | InnerJoinApply
        $left:*
        $right:*
        $on:*
    )
    $filter:*
)
=>
((OpName $input)
    $left
    $right
    (ConcatFilters $on $filter)
)

# PushSelectCondLeftIntoJoinLeftAndRight applies to the case when a condition
# bound by the left side of a join can be mapped to the right side using
# equality columns from the ON condition of the join. It pushes the original
# filter to the left side, and the mapped filter to the right side.
# For example, consider this query:
#
#   SELECT * FROM l LEFT JOIN r ON l.x = r.x WHERE l.x = 5;
#
# This can safely be converted to:
#
#   SELECT * FROM (SELECT * FROM l WHERE l.x = 5)
#   LEFT JOIN (SELECT * FROM r WHERE r.x = 5) ON l.x = r.x;
#
# It's not normally correct to push filters from the SELECT clause to
# the right side of a LEFT JOIN, since those rows might still show up
# in the output as NULL-extended rows from the left side. In this case,
# however, for any rows removed from the right side, the matching rows are
# also removed from the left side (and thus removed from the output).
# To ensure that this is the case, it's important that the filter only refers
# to columns on the left side that have corresponding equivalent columns on
# the right side.
[PushSelectCondLeftIntoJoinLeftAndRight, Normalize]
(Select
    $input:(InnerJoin | InnerJoinApply | LeftJoin | LeftJoinApply |
            SemiJoin | SemiJoinApply | AntiJoin | AntiJoinApply
        $left:*
        $right:*
        $on:*
    )
    (Filters
        $list:[
            ...
            $condition:* &
                (IsBoundBy $condition $left) &
                (CanMap $on $condition $right)
            ...
        ]
    )
)
=>
(Select
    ((OpName $input)
        (Select
            $left
            (Filters [$condition])
        )
        (Select
            $right
            (Filters [(Map $on $condition $right)])
        )
        $on
    )
    (Filters (RemoveListItem $list $condition))
)

# PushSelectCondRightIntoJoinLeftAndRight is symmetric with
# PushSelectCondLeftIntoJoinLeftAndRight. It applies to the case when a
# condition bound by the right side of a join can be mapped to the left side
# using equality columns from the ON condition of the join. It pushes the
# original filter to the right side, and the mapped filter to the left side.
# See the comments above PushSelectCondLeftIntoJoinLeftAndRight for more
# details.
[PushSelectCondRightIntoJoinLeftAndRight, Normalize]
(Select
    $input:(InnerJoin | InnerJoinApply | RightJoin | RightJoinApply
        $left:*
        $right:*
        $on:*
    )
    (Filters
        $list:[
            ...
            $condition:* &
                (IsBoundBy $condition $right) &
                (CanMap $on $condition $left)
            ...
        ]
    )
)
=>
(Select
    ((OpName $input)
        (Select
            $left
            (Filters [(Map $on $condition $left)])
        )
        (Select
            $right
            (Filters [$condition])
        )
        $on
    )
    (Filters (RemoveListItem $list $condition))
)

# PushSelectIntoJoinLeft pushes Select filter conditions into the left side of
# an input Join. This is possible in the case of InnerJoin, LeftJoin, SemiJoin,
# and AntiJoin, as long as the condition has no dependencies on the right side
# of the join. Right and Full joins are not eligible, since attempting to filter
# left rows would just result in NULL left rows instead.
#
#   -- No row is returned for a.x=1, a.y=2, b.x=1, since the WHERE excludes it.
#   SELECT * FROM a RIGHT JOIN b ON a.x=b.x WHERE a.y < 0
#
#   -- But if the filter is incorrectly pushed down in RIGHT/FULL JOIN case,
#   -- then a row containing null values on the left side is returned.
#   SELECT * FROM (SELECT * FROM a WHERE a.y < 0) a RIGHT JOIN b ON a.x=b.x
#
# Citations: [1]
[PushSelectIntoJoinLeft, Normalize]
(Select
    $input:(InnerJoin | InnerJoinApply | LeftJoin | LeftJoinApply |
            SemiJoin | SemiJoinApply | AntiJoin | AntiJoinApply
        $left:*
        $right:*
        $on:*
    )
    $filter:(Filters $list:[ ... $condition:* & (IsBoundBy $condition $left) ... ])
)
=>
(Select
    ((OpName $input)
        (Select
            $left
            (Filters (ExtractBoundConditions $list $left))
        )
        $right
        $on
    )
    (Filters (ExtractUnboundConditions $list $left))
)

# PushSelectIntoJoinRight is symmetric with PushSelectIntoJoinLeft. It pushes
# Select filter conditions into the right side of an input Join rather than
# into the left side. See that rule's comments for more details.
[PushSelectIntoJoinRight, Normalize]
(Select
    $input:(InnerJoin | InnerJoinApply | RightJoin | RightJoinApply
        $left:*
        $right:*
        $on:*
    )
    $filter:(Filters $list:[ ... $condition:* & (IsBoundBy $condition $right) ... ])
)
=>
(Select
    ((OpName $input)
        $left
        (Select
            $right
            (Filters (ExtractBoundConditions $list $right))
        )
        $on
    )
    (Filters (ExtractUnboundConditions $list $right))
)

# PushSelectIntoGroupBy pushes a Select condition below a GroupBy in the case
# where it does not reference any of the aggregation columns. This only works
# if this is not an instance of the "scalar" GroupBy, which returns only one
# row, and which exhibits different behavior if the input is empty:
#   SELECT MAX(y) FROM a
#
# If "a" is empty, this returns a single row containing a null value. This is
# different behavior than a GroupBy with grouping columns, which would return
# the empty set for a similar query:
#   SELECT MAX(y) FROM a GROUP BY x
#
# Citations: [2]
[PushSelectIntoGroupBy, Normalize]
(Select
    (GroupBy
        $input:*
        $aggregations:*
        $def:*
    )
    (Filters $list:[ ... $condition:* & (IsBoundBy $condition $input) ... ])
)
=>
(Select
    (GroupBy
        (Select
            $input
            (Filters (ExtractBoundConditions $list $input))
        )
        $aggregations
        $def
    )
    (Filters (ExtractUnboundConditions $list $input))
)

# RemoveNotNullCondition removes a filter with an IS NOT NULL condition
# when the given column has a NOT NULL constraint.
[RemoveNotNullCondition, Normalize]
(Select
    $input:*
    (Filters
        $list:[ ... $condition:(IsNot (Variable $col:* & (IsColNotNull $col $input)) (Null))  ... ]
    )
)
=>
(Select
    $input
    (Filters
        (RemoveListItem $list $condition)
     )
)
