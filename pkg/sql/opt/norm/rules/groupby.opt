# =============================================================================
# groupby.opt contains normalization rules for the GroupBy operator.
# =============================================================================

# ConvertGroupByToDistinct converts a GroupBy operator that has no aggregations
# to an equivalent DistinctOn operator.
[ConvertGroupByToDistinct, Normalize]
(GroupBy
    $input:*
    $aggregations:[]
    $groupingPrivate:*
)
=>
(DistinctOn $input $aggregations $groupingPrivate)

# EliminateDistinct discards a DistinctOn operator that is eliminating duplicate
# rows by using grouping columns that are statically known to form a strong key.
# By definition, a strong key does not allow duplicate values, so the GroupBy is
# redundant and can be eliminated.
#
# Since a DistinctOn operator can serve as a projection operator, we need to
# replace it with a Project so that the correct columns are projected. The
# project itself may be eliminated later by other rules.
[EliminateDistinct, Normalize]
(DistinctOn
    $input:*
    $aggs:*
    $groupingPrivate:* & (ColsAreStrictKey (GroupingCols $groupingPrivate) $input)
)
=>
(Project
  $input
  []
  (GroupingOutputCols $groupingPrivate $aggs)
)

# EliminateGroupByProject discards a nested Project operator that is only
# removing columns from its input (and not synthesizing new ones). That's
# something the GroupBy operators can do on their own.
[EliminateGroupByProject, Normalize]
(GroupBy | ScalarGroupBy | DistinctOn | UpsertDistinctOn
    $input:(Project $innerInput:*) & (ColsAreSubset (OutputCols $input) (OutputCols $innerInput))
    $aggregations:*
    $groupingPrivate:*
)
=>
((OpName)
    $innerInput
    $aggregations
    $groupingPrivate
)

# ReduceGroupingCols eliminates redundant grouping columns from the GroupBy
# operator and replaces them by ConstAgg aggregate functions. A grouping
# column is redundant if it is functionally determined by the other grouping
# columns. If that's true, then its value must be constant within a group.
# Therefore, it has no effect on the grouping and can instead be represented as
# an ConstAgg aggregate, since all rows in the group have the same value for
# that column.
[ReduceGroupingCols, Normalize]
(GroupBy | DistinctOn
    $input:*
    $aggregations:*
    $groupingPrivate:* &
        ^(ColsAreEmpty $redundantCols:(RedundantCols $input (GroupingCols $groupingPrivate)))
)
=>
((OpName)
    $input
    (AppendAggCols $aggregations ConstAgg $redundantCols)
    (RemoveGroupingCols $groupingPrivate $redundantCols)
)

# ReduceNotNullGroupingCols is similar to ReduceGroupingCols, but with the
# additional restriction that nullable columns cannot be removed from the set of
# grouping columns. This is because the UpsertDistinctOn operator treats NULL
# values as not equal to one another, and therefore will not group them
# together. Since removing a grouping column is equivalent to grouping all
# values of that column together, this would be incorrect in the case where all
# input rows are NULL for that column:
#
#   SELECT c FROM t WHERE c IS NULL
#
[ReduceNotNullGroupingCols, Normalize]
(UpsertDistinctOn
    $input:*
    $aggregations:*
    $groupingPrivate:* &
        ^(ColsAreEmpty
            $redundantCols:(IntersectionCols
                (RedundantCols $input (GroupingCols $groupingPrivate))
                (NotNullCols $input)
            )
        )
)
=>
((OpName)
    $input
    (AppendAggCols $aggregations ConstAgg $redundantCols)
    (RemoveGroupingCols $groupingPrivate $redundantCols)
)

# EliminateAggDistinctForKeys eliminates unnecessary AggDistinct modifiers when
# it is known that the aggregation argument is unique within each group.
[EliminateAggDistinctForKeys, Normalize]
(GroupBy | ScalarGroupBy
    $input:* & (HasStrictKey $input)
    $aggregations:
    [
        ...
        $item:(AggregationsItem (AggDistinct $agg:*))
        ...
    ]
    $groupingPrivate:* & (CanRemoveAggDistinctForKeys $input $groupingPrivate $agg)
)
=>
((OpName)
    $input
    (ReplaceAggregationsItem $aggregations $item $agg)
    $groupingPrivate
)

# EliminateAggFilteredDistinctForKeys is similar to EliminateAggDistinctForKeys,
# except that it works when an AggFilter operator is also present.
[EliminateAggFilteredDistinctForKeys, Normalize]
(GroupBy | ScalarGroupBy
    $input:* & (HasStrictKey $input)
    $aggregations:
    [
        ...
        $item:(AggregationsItem (AggFilter (AggDistinct $agg:*) $filter:*))
        ...
    ]
    $groupingPrivate:* & (CanRemoveAggDistinctForKeys $input $groupingPrivate $agg)
)
=>
((OpName)
    $input
    (ReplaceAggregationsItem $aggregations $item (AggFilter $agg $filter))
    $groupingPrivate
)

# EliminateDistinctOnNoColumns eliminates a DistinctOn with no grouping columns,
# replacing it with a projection and a LIMIT 1. For example:
#   SELECT DISTINCT ON (a) a, b FROM ab WHERE a=1
# is equivalent to:
#   SELECT a, b FROM ab WHERE a=1 LIMIT 1
#
# Note that this rule does not apply to UpsertDistinctOn, since that will raise
# an error if there are duplicate rows.
[EliminateDistinctOnNoColumns, Normalize]
(DistinctOn
    $input:*
    $aggregations:*
    $groupingPrivate:* & (HasNoGroupingCols $groupingPrivate)
)
=>
(ConstructProjectionFromDistinctOn
    (Limit $input (Const 1) (GroupingInputOrdering $groupingPrivate))
    (MakeEmptyColSet)
    $aggregations
)

# EliminateUpsertDistinctOnNoColumns is similar to EliminateDistinctOnNoColumns,
# except that it will raise an error if there are no grouping columns and the
# input has more than one row. No grouping columns means there is at most one
# group. And the Max1Row operator is needed to raise an error if that group has
# more than one row, which is a requirement of the Upsert operator.
[EliminateUpsertDistinctOnNoColumns, Normalize]
(UpsertDistinctOn
    $input:*
    $aggregations:*
    $groupingPrivate:* & (HasNoGroupingCols $groupingPrivate)
)
=>
(ConstructProjectionFromDistinctOn
    (Max1Row $input (DuplicateUpsertErrText))
    (MakeEmptyColSet)
    $aggregations
)

# EliminateDistinctOnValues eliminates a distinct operator that has a constant
# input Values operator that is already distinct with respect to the grouping
# columns. The Values operator may be the immediate input, or it may be wrapped
# by Select, Project, LeftJoin, and/or other operators. These are common
# patterns that are generated by the optbuilder's upsert construction code,
# which must ensure the same row cannot be updated twice. See the comment for
# UpsertDistinctOn for more detail on NullsAreDistinct behavior.
[EliminateDistinctOnValues, Normalize]
(DistinctOn | UpsertDistinctOn
    $input:*
    $aggregations:*
    $groupingPrivate:* &
        (AreValuesDistinct $input (GroupingCols $groupingPrivate) (NullsAreDistinct (OpName)))
)
=>
(ConstructProjectionFromDistinctOn
    $input
    (GroupingCols $groupingPrivate)
    $aggregations
)
