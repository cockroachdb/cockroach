# =============================================================================
# scalar.opt contains scalar normalization rules that aren't handled elsewhere.
# =============================================================================


# CommuteVar ensures that variable references are on the left side of
# commutative comparison and binary operators. Other patterns don't need to
# handle both combinations.
[CommuteVar, Normalize]
(Eq | Ne | Is | IsNot | Plus | Mult | Bitand | Bitor | Bitxor
    $left:^(Variable)
    $right:(Variable)
)
=>
((OpName) $right $left)

# CommuteConst ensures that "constant expression trees" are on the right side
# of commutative comparison and binary operators. A constant expression tree
# has no unbound variables that refer to outer columns. It therefore always
# evaluates to the same result. Note that this is possible even if the tree
# contains variable expressions, as long as they are bound, such as in
# uncorrelated subqueries:
#
#   SELECT * FROM a WHERE a.x = (SELECT SUM(b.x) FROM b)
#
# The right side of the equality expression is a constant expression tree, even
# though it contains an entire subquery, because it always evalutes to the same
# result. The left side is not a constant expression tree, even though it
# contains just a single variable, because its value can be different for each
# row in the table "a".
#
# The goal of this and related patterns is to push constant expression trees to
# the right side until only a Variable remains on the left (if possible). Other
# patterns can rely on this normal form and only handle one combination.
[CommuteConst, Normalize]
(Eq | Ne | Is | IsNot | Plus | Mult | Bitand | Bitor | Bitxor
    $left:* & (OnlyConstants $left)
    $right:* & ^(OnlyConstants $right)
)
=>
((OpName) $right $left)

# EliminateCoalesce discards the Coalesce operator if it has a single operand.
[EliminateCoalesce, Normalize]
(Coalesce [ $item:* ]) => $item

# SimplifyCoalesce discards any leading null operands, and then if the next
# operand is a constant, replaces with that constant. Note that ConstValue
# matches nulls as well as other constants.
[SimplifyCoalesce, Normalize]
(Coalesce $args:[ (ConstValue) ... ]) => (SimplifyCoalesce $args)

# EliminateCast discards the cast operator if its input already has a type
# that's equivalent to the desired static type.
[EliminateCast, Normalize]
(Cast $input:* $targetTyp:* & (HasColType $input $targetTyp)) => $input

# FoldNullCast discards the cast operator if it has a null input. The resulting
# null value has the same type as the Cast operator would have had.
[FoldNullCast, Normalize]
(Cast $input:(Null) $targetTyp:*) => (Null (ColTypeToDatumType $targetTyp))

# FoldNullUnary discards any unary operator with a null input, and replaces it
# with a null value having the same type as the unary expression would have.
[FoldNullUnary, Normalize]
(Unary $input:(Null)) => (FoldNullUnary (OpName) $input)

# FoldNullBinaryLeft replaces the binary operator with null if its left input
# is null and it does not allow null arguments.
[FoldNullBinaryLeft, Normalize]
(Binary
    $left:(Null)
    $right:* & ^(AllowNullArgs (OpName) $left $right)
)
=>
(FoldNullBinary (OpName) $left $right)

# FoldNullBinaryRight replaces the binary operator with null if its right input
# is null and it does not allow null arguments.
[FoldNullBinaryRight, Normalize]
(Binary
    $left:*
    $right:(Null) & ^(AllowNullArgs (OpName) $left $right)
)
=>
(FoldNullBinary (OpName) $left $right)

# FoldNullInNonEmpty replaces the In/NotIn with null when the left input is
# null and the right input is not empty. Null is the unknown value, and if the
# set is non-empty, it is unknown whether it's in/not in the set.
[FoldNullInNonEmpty, Normalize]
(In | NotIn
    $left:(Null)
    (Tuple ^[])
)
=>
(Null (BoolType))

# FoldNullInEmpty replaces the In with False when the left input is null and
# the right input is empty, since even an unknown value can't be in an empty
# set.
[FoldNullInEmpty, Normalize]
(In
    $left:(Null)
    (Tuple [])
)
=>
(False)

# FoldNullNotInEmpty replaces the NotIn with True when the left input is null
# and the right input is empty, since even an unknown value can't be in an
# empty set.
[FoldNullNotInEmpty, Normalize]
(NotIn
    $left:(Null)
    (Tuple [])
)
=>
(True)

# NormalizeInConst ensures that the In operator's tuple operand is sorted with
# duplicates removed (since duplicates do not change the result).
[NormalizeInConst, Normalize]
(In | NotIn
    $left:*
    $right:(Tuple $elems:*) & ^(IsSortedUniqueList $elems)
)
=>
((OpName) $left (Tuple (ConstructSortedUniqueList $elems)))

# FoldInNull replaces the In/Not operator with Null when the tuple only
# contains null. The NormalizeInConst pattern will reduce multiple nulls to a
# single null when it removes duplicates, so this pattern will match that.
[FoldInNull, Normalize]
(In | NotIn
    $left:*
    (Tuple [ (Null) ])
)
=>
(Null (BoolType))

# EliminateExistsProject discards a Project input to the Exists operator. The
# Project operator never changes the row cardinality of its input, and row
# cardinality is the only thing that Exists cares about, so Project is a no-op.
[EliminateExistsProject, Normalize]
(Exists (Project $input:*)) => (Exists $input)

# EliminateExistsGroupBy discards a non-scalar GroupBy input to the Exists
# operator. While non-scalar GroupBy can change row cardinality, it always
# returns a non-empty set if its input is non-empty. Similarly, if its input is
# empty, then it returns the empty set. Therefore, it's a no-op for Exists.
[EliminateExistsGroupBy, Normalize]
(Exists
    (GroupBy
        $input:*
        *
        $def:* & ^(IsScalarGroupBy $def)
    )
)
=>
(Exists $input)
