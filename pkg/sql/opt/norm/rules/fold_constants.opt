# =============================================================================
# fold_constants.opt contains normalization rules for folding constants.
# =============================================================================

# FoldArray evaluates an Array expression with constant inputs. It replaces the
# Array with a Const datum with type TArray.
[FoldArray, Normalize]
(Array
    $elems:* & (IsListOfConstants $elems)
    $typ:*
)
=>
(FoldArray $elems $typ)

# FoldBinary evaluates a binary operation over constant inputs, replacing the
# entire expression with a constant. The rule applies as long as the evaluation
# would not cause an error. Any errors should be saved for execution time,
# since it's possible that the given operation will not be executed. For
# example:
#
#   SELECT CASE WHEN true THEN 42 ELSE 1/0 END
#
# In this query, the ELSE clause is not executed, so the divide-by-zero error
# should not be triggered.
#
# This rule is marked as low priority so that the FoldNull rules in scalar.opt
# can run first.
[FoldBinary, Normalize, LowPriority]
(Binary
    $left:* & (IsConstValueOrTuple $left)
    $right:* &
        (IsConstValueOrTuple $right) &
        (Succeeded $result:(FoldBinary (OpName) $left $right))
)
=>
$result

# FoldUnary is similar to FoldBinary, but it involves a unary operation over a
# single constant input. As with FoldBinary, FoldUnary applies as long as the
# evaluation would not cause an error.
#
# This rule is marked as low priority so that the FoldNull rules in scalar.opt
# can run first.
[FoldUnary, Normalize, LowPriority]
(Unary
    $input:* &
        (IsConstValueOrTuple $input) &
        (Succeeded $result:(FoldUnary (OpName) $input))
)
=>
$result

# FoldComparison is similar to FoldBinary, but it involves a comparison
# operation. As with FoldBinary, FoldComparison applies as long as the
# evaluation would not cause an error.
#
# This rule is marked as low priority so that the FoldNull rules in scalar.opt
# can run first.
[FoldComparison, Normalize, LowPriority]
(Comparison
    $left:* & (IsConstValueOrTuple $left)
    $right:* &
        (IsConstValueOrTuple $right) &
        (Succeeded $result:(FoldComparison (OpName) $left $right))
)
=>
$result

# FoldCast is similar to FoldUnary, but it involves a cast operation. As with
# FoldUnary, FoldCast applies as long as the evaluation would not cause an
# error.
#
# This rule is marked as low priority so that the FoldNull rules in scalar.opt
# can run first.
[FoldCast, Normalize, LowPriority]
(Cast
    $input:*
    $typ:* &
        (IsConstValueOrTuple $input) &
        (Succeeded $result:(FoldCast $input $typ))
)
=>
$result
