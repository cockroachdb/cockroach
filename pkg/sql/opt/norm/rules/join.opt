# =============================================================================
# join.opt contains normalization rules for Join operators.
# =============================================================================


# EnsureJoinFiltersAnd replaces an And operator in a Join's On condition with
# the Filters operator. This allows other rules to rely upon the presence of
# the Filters when matching. See comment at top of bool.opt for more details.
# This rule is a special-case of the EnsureJoinFilters rule, for performance
# reasons (no need to construct a new conditions list) in a common case.
[EnsureJoinFiltersAnd, Normalize]
(Join
    $left:*
    $right:*
    (And $conditions:*)
)
=>
((OpName)
    $left
    $right
    (Filters $conditions)
)

# EnsureJoinFilters adds a Filters operator to a Join's On condition if it does
# not already exist. This allows other rules to rely upon the presence of the
# Filters when matching. See comment at top of bool.opt for more details.
[EnsureJoinFilters, Normalize]
(Join
    $left:*
    $right:*
    $filter:^(Filters | And | True | False)
)
=>
((OpName)
    $left
    $right
    (Filters [ $filter ])
)

# PushFilterIntoJoinLeftAndRight pushes a filter into both the left and right
# sides of an InnerJoin or SemiJoin if it can be mapped to use the columns of
# both sides. For example, consider this query:
#
#   SELECT * FROM a JOIN b ON a.x=b.x AND a.y=b.y AND a.x + b.y < 5
#
# In this case, we can map a.x + b.y < 5 to both sides based on the equality
# filters a.x=b.x AND a.y=b.y. For the left side, we can map it to
# a.x + a.y < 5, and for the right side, we can map it to b.x + b.y < 5.
# Given this mapping, we can safely push the filter down to both sides and
# remove it from the ON filters list.
#
# Note that this rule is only applied to InnerJoin and SemiJoin, not
# InnerJoinApply or SemiJoinApply. The apply variants would cause a
# non-detectable cycle with TryDecorrelateSelect, causing the filters to get
# remapped to both sides and pushed down over and over again.
#
# NOTE: It is important that this rule is first among the join filter push-down
#       rules.
[PushFilterIntoJoinLeftAndRight, Normalize]
(InnerJoin | SemiJoin
    $left:*
    $right:*
    $filters:(Filters
        $list:[
            ...
            $condition:* &
                ^(Eq (Variable) (Variable)) &
                (CanMap $filters $condition $left) &
                (CanMap $filters $condition $right)
            ...
        ]
    )
)
=>
((OpName)
    (Select
        $left
        (Filters [(Map $filters $condition $left)])
    )
    (Select
        $right
        (Filters [(Map $filters $condition $right)])
    )
    (Filters (RemoveListItem $list $condition))
)

# MapFilterIntoJoinLeft maps a filter that is not bound by the left side of
# the join to use the columns from the left side. This will allow
# the filter to be pushed down by the PushFilterIntoJoinLeft rule.
# For example, consider this query:
#
#   SELECT * FROM a INNER JOIN b ON a.x = b.x AND b.x + a.y < 5
#
# In this case, we can map b.x + a.y < 5 to the left side by replacing b.x
# with the equivalent column a.x.
# NOTE: This rule only applies to cases where it is not possible or not safe
#       to map the filter to both sides. If it can be mapped to both sides, it
#       will be handled by PushFilterIntoJoinLeftAndRight (which must be
#       ordered above this rule). For performance reasons, this rule should
#       be ordered before PushFilterIntoJoinLeft (otherwise,
#       PushFilterIntoJoinLeft might need to be applied multiple times).
[MapFilterIntoJoinLeft, Normalize]
(InnerJoin | InnerJoinApply | RightJoin | RightJoinApply | SemiJoin | SemiJoinApply
    $left:*
    $right:*
    $filters:(Filters
        $list:[
            ...
            $condition:* &
                ^(Eq (Variable) (Variable)) &
                ^(IsBoundBy $condition (OutputCols $left)) &
                (CanMap $filters $condition $left)
            ...
        ]
    )
)
=>
((OpName)
    $left
    $right
    (Filters (ReplaceListItem $list $condition (Map $filters $condition $left)))
)

# MapFilterIntoJoinRight is symmetric with MapFilterIntoJoinLeft. It maps
# Join filter conditions to use columns from the right side of the join rather
# than the left side. See that rule's comments for more details.
[MapFilterIntoJoinRight, Normalize]
(InnerJoin | InnerJoinApply | LeftJoin | LeftJoinApply |
 SemiJoin | SemiJoinApply | AntiJoin | AntiJoinApply
    $left:*
    $right:*
    $filters:(Filters
        $list:[
            ...
            $condition:* &
                ^(Eq (Variable) (Variable)) &
                ^(IsBoundBy $condition (OutputCols $right)) &
                (CanMap $filters $condition $right)
            ...
        ]
    )
)
=>
((OpName)
    $left
    $right
    (Filters (ReplaceListItem $list $condition (Map $filters $condition $right)))
)

# PushFilterIntoJoinLeft pushes Join filter conditions into the left side of the
# join. This is possible in the case of InnerJoin and RightJoin, as long as the
# condition has no dependencies on the right side of the join. Left and Full
# joins are not eligible, since filtering left rows will change the number of
# rows in the result for those types of joins:
#
#   -- A row with nulls on the right side is returned for a.x=1, a.y=2, b.x=1.
#   SELECT * FROM a LEFT JOIN b ON a.x=b.x AND a.y < 0
#
#   -- But if the filter is incorrectly pushed down, then no row is returned.
#   SELECT * FROM (SELECT * FROM a WHERE a.y < 0) a LEFT JOIN b ON a.x=b.x
#
# In addition, AntiJoin is not eligible for this rule, as illustrated by this
# example:
#
#   -- A row is returned for a.y=2.
#   SELECT * FROM a ANTI JOIN b ON a.y < 0
#
#   -- But if the filter is incorrectly pushed down, then no row is returned.
#   SELECT * FROM (SELECT * FROM a WHERE a.y < 0) a ANTI JOIN b ON True
#
# Citations: [1]
[PushFilterIntoJoinLeft, Normalize]
(InnerJoin | InnerJoinApply | RightJoin | RightJoinApply | SemiJoin | SemiJoinApply
    $left:*
    $right:*
    $on:(Filters $list:[
        ...
        $condition:* & (IsBoundBy $condition $leftCols:(OutputCols $left))
        ...
    ])
)
=>
((OpName)
    (Select
        $left
        (Filters (ExtractBoundConditions $list $leftCols))
    )
    $right
    (Filters (ExtractUnboundConditions $list $leftCols))
)

# PushFilterIntoJoinRight is symmetric with PushFilterIntoJoinLeft. It pushes
# Join filter conditions into the right side of the join rather than into the
# left side. See that rule's comments for more details.
#
# This rule triggers a cycle with the TryDecorrelateSelect rule. That rule has
# the DetectCycle tag to break the cycle.
[PushFilterIntoJoinRight, Normalize]
(InnerJoin | InnerJoinApply | LeftJoin | LeftJoinApply |
 SemiJoin | SemiJoinApply | AntiJoin | AntiJoinApply
    $left:*
    $right:*
    $on:(Filters $list:[
        ...
        $condition:* & (IsBoundBy $condition $rightCols:(OutputCols $right))
        ...
    ])
)
=>
((OpName)
    $left
    (Select
        $right
        (Filters (ExtractBoundConditions $list $rightCols))
    )
    (Filters (ExtractUnboundConditions $list $rightCols))
)

# SimplifyLeftJoinWithoutFilters reduces a LeftJoin operator to an InnerJoin
# operator (or a FullJoin to a RightJoin) when it's known that the join's right
# input never returns zero rows and when there's no join condition. The outer
# join only populates the right side with NULL values when it would otherwise
# not be present.
[SimplifyLeftJoinWithoutFilters, Normalize]
(LeftJoin | LeftJoinApply | FullJoin | FullJoinApply
    $left:*
    $right:* & ^(CanHaveZeroRows $right)
    $on:(True)
)
=>
(ConstructNonLeftJoin
    (OpName)
    $left
    $right
    $on
)

# SimplifyRightJoinWithoutFilters reduces a RightJoin operator to an InnerJoin
# operator (or a FullJoin to a LeftJoin) when it's known that the join's left
# input never returns zero rows and when there's no join condition. The outer
# join only populates the left side with NULL values when it would otherwise not
# be present.
[SimplifyRightJoinWithoutFilters, Normalize]
(RightJoin | RightJoinApply | FullJoin | FullJoinApply
    $left:* & ^(CanHaveZeroRows $left)
    $right:*
    $on:(True)
)
=>
(ConstructNonRightJoin
    (OpName)
    $left
    $right
    $on
)

# SimplifyLeftJoinWithFilters reduces a LeftJoin operator to an InnerJoin
# operator (or a FullJoin to a RightJoin) when it's known that every row in the
# join's left input will match at least one row in the right input. Since every
# row matches, NULL-extended rows will never be added by the outer join, and
# therefore can be mapped to an InnerJoin (or RightJoin in case of FullJoin).
# See JoinConditionMatchesAllLeftRows comment for conditions in which this rule
# can match.
#
# Self-join example:
#   SELECT * FROM xy LEFT JOIN xy AS xy2 ON xy.y = xy2.y
#   =>
#   SELECT * FROM xy INNER JOIN xy AS xy2 ON xy.y = xy2.y
#
# Foreign-key example:
#   SELECT * FROM orders o LEFT JOIN customers c ON o.customer_id = c.id
#   =>
#   SELECT * FROM orders o INNER JOIN customers c ON o.customer_id = c.id
#
# TODO(andyk): Need to implement foreign key case.
[SimplifyLeftJoinWithFilters, Normalize]
(LeftJoin | LeftJoinApply | FullJoin | FullJoinApply
    $left:*
    $right:*
    $on:(Filters) & (JoinFiltersMatchAllLeftRows $left $right $on)
)
=>
(ConstructNonLeftJoin
    (OpName)
    $left
    $right
    $on
)

# SimplifyRightJoinWithFilters reduces a RightJoin operator to an InnerJoin
# operator (or a FullJoin to a LeftJoin) when it's known that every row in the
# join's right input will match at least one row in the left input. This rule
# is symmetric with SimplifyLeftJoinWithFilters; see that rule for more details
# and examples.
[SimplifyRightJoinWithFilters, Normalize]
(RightJoin | RightJoinApply | FullJoin | FullJoinApply
    $left:*
    $right:*
    $on:(Filters) & (JoinFiltersMatchAllLeftRows $right $left $on)
)
=>
(ConstructNonRightJoin
    (OpName)
    $left
    $right
    $on
)

# EliminateSemiJoin discards a SemiJoin operator when it's known that the right
# input never returns zero rows, and there is no join condition.
[EliminateSemiJoin, Normalize]
(SemiJoin | SemiJoinApply
    $left:*
    $right:* & ^(CanHaveZeroRows $right)
    (True)
)
=>
$left

# EliminateAntiJoin discards an AntiJoin operator when it's known that the right
# input never returns any rows.
[EliminateAntiJoin, Normalize]
(AntiJoin | AntiJoinApply
    $left:*
    $right:* & (HasZeroRows $right)
    *
)
=>
$left

# EliminateJoinNoColsLeft eliminates an InnerJoin with a one row, zero column
# left input set. These can be produced when a Values, scalar GroupBy, or other
# one-row operator's columns are never used.
[EliminateJoinNoColsLeft, Normalize]
(InnerJoin | InnerJoinApply
    $left:* & (HasNoCols $left) & (HasOneRow $left)
    $right:*
    $on:*
)
=>
(Select
    $right
    $on
)

# EliminateJoinNoColsRight eliminates an InnerJoin with a one row, zero column
# right input set. These can be produced when a Values, scalar GroupBy, or other
# one-row operator's columns are never used.
[EliminateJoinNoColsRight, Normalize]
(InnerJoin | InnerJoinApply
    $left:*
    $right:* & (HasNoCols $right) & (HasOneRow $right)
    $on:*
)
=>
(Select
    $left
    $on
)
