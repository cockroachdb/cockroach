# =============================================================================
# project.opt contains normalization rules for the Project operator.
# =============================================================================


# EliminateProject discards a Project operator which is not adding or removing
# columns, but instead is just reordering existing columns.
[EliminateProject, Normalize]
(Project
    $input:*
    $projections:* & (HasSameCols $input $projections)
)
=>
$input

# FilterUnusedProjectCols discards nested project columns that are never used.
[FilterUnusedProjectCols, Normalize]
(Project
    (Project
        $innerInput:*
        $innerProjections:*
    )
    $projections:* & (HasUnusedColumns $innerProjections (NeededCols $projections))
)
=>
(Project
    (Project
        $innerInput
        (FilterUnusedColumns $innerProjections (NeededCols $projections))
    )
    $projections
)

# FilterUnusedScanCols discards Scan operator columns that are never used. The
# needed columns are pushed down into the Scan's opt.ScanOpDef private.
[FilterUnusedScanCols, Normalize]
(Project
    $input:(Scan)
    $projections:* & (HasUnusedColumns $input (NeededCols $projections))
)
=>
(Project
    (FilterUnusedColumns $input (NeededCols $projections))
    $projections
)

# FilterUnusedSelectCols discards Select input columns that are never used.
[FilterUnusedSelectCols, Normalize]
(Project
    (Select
        $innerInput:*
        $filter:*
    )
    $projections:* & (HasUnusedColumns $innerInput (NeededCols2 $projections $filter))
)
=>
(Project
    (Select
        (FilterUnusedColumns $innerInput (NeededCols2 $projections $filter))
        $filter
    )
    $projections
)

# FilterUnusedLimitCols discards Limit input columns that are never used.
[FilterUnusedLimitCols, Normalize]
(Project
    (Limit
        $input:*
        $limit:*
        $ordering:*
    )
    $projections:* & (HasUnusedColumns $input (NeededColsLimit $projections $ordering))
)
=>
(Project
    (Limit
        (FilterUnusedColumns $input (NeededColsLimit $projections $ordering))
        $limit
        $ordering
    )
    $projections
)

# FilterUnusedOffsetCols discards Offset input columns that are never used.
# Note: this rule is separate from FilterUnusedLimitCols because we can't access
# the ordering private if using (Limit | Offset .. ).
[FilterUnusedOffsetCols, Normalize]
(Project
    (Offset
        $input:*
        $offset:*
        $ordering:*
    )
    $projections:* & (HasUnusedColumns $input (NeededColsLimit $projections $ordering))
)
=>
(Project
    (Offset
        (FilterUnusedColumns $input (NeededColsLimit $projections $ordering))
        $offset
        $ordering
    )
    $projections
)

# FilterUnusedJoinLeftCols discards columns on the left side of a join that are
# never used.
[FilterUnusedJoinLeftCols, Normalize]
(Project
    $input:(Join
        $left:*
        $right:*
        $on:*
    )
    $projections:* & (HasUnusedColumns $left (NeededCols3 $projections $right $on))
)
=>
(Project
    ((OpName $input)
        (FilterUnusedColumns $left (NeededCols3 $projections $right $on))
        $right
        $on
    )
    $projections
)

# FilterUnusedJoinRightCols discards columns on the right side of a join that
# are never used.
[FilterUnusedJoinRightCols, Normalize]
(Project
    $input:(Join
        $left:*
        $right:*
        $on:*
    )
    $projections:* & (HasUnusedColumns $right (NeededCols2 $projections $on))
)
=>
(Project
    ((OpName $input)
        $left
        (FilterUnusedColumns $right (NeededCols2 $projections $on))
        $on
    )
    $projections
)

# FilterUnusedAggCols discards aggregation columns in a GroupBy that are never
# used.
[FilterUnusedAggCols, Normalize]
(Project
    (GroupBy
        $innerInput:*
        $aggregations:*
        $groupingCols:*
    )
    $projections:* & (HasUnusedColumns $aggregations (NeededCols $projections))
)
=>
(Project
    (GroupBy
        $innerInput
        (FilterUnusedColumns $aggregations (NeededCols $projections))
        $groupingCols
    )
    $projections
)

# FilterUnusedGroupByCols discards GroupBy input columns that are never used.
[FilterUnusedGroupByCols, Normalize]
(GroupBy
    $input:*
    $aggregations:*
    $groupingCols:* & (HasUnusedColumns $input (NeededColsGroupBy $aggregations $groupingCols))
)
=>
(GroupBy
    (FilterUnusedColumns $input (NeededColsGroupBy $aggregations $groupingCols))
    $aggregations
    $groupingCols
)

# FilterUnusedValueCols discards Values columns that are never used.
[FilterUnusedValueCols, Normalize]
(Project
    $input:(Values)
    $projections:* & (HasUnusedColumns $input (NeededCols $projections))
)
=>
(Project
    (FilterUnusedColumns $input (NeededCols $projections))
    $projections
)
