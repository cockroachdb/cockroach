# =============================================================================
# with.opt contains normalization rules for the With operator.
# =============================================================================

# InlineWith replaces use of a With which is referenced at most one time with
# the contents of the With itself.
[InlineWith, Normalize]
(With
    $binding:*
    $input:*
    $withPrivate:* & (CanInlineWith $binding $input $withPrivate)
)
=>
(InlineWith
    $binding
    $input
    $withPrivate
)

# PushProjectIntoWith pushes a Project operator beneath a With. This has the
# effect of pruning columns, but since the With passes through all its columns,
# no logic to test prunability is needed.
[PushProjectIntoWith, Normalize]
(Project
    (With
        $binding:*
        $input:*
        $private:*
    )
    $projections:*
    $passthrough:*
)
=>
(With
    $binding
    (Project
        $input
        $projections
        $passthrough
    )
    $private
)
