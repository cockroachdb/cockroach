// Code generated by optgen; DO NOT EDIT.

package norm

import (
	"github.com/cockroachdb/cockroach/pkg/sql/opt"
	"github.com/cockroachdb/cockroach/pkg/sql/opt/memo"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/types"
)

// InternScanOpDef adds the given value to the memo and returns an ID that
// can be used for later lookup. If the same value was added previously,
// this method is a no-op and returns the ID of the previous value.
func (_f *Factory) InternScanOpDef(val *memo.ScanOpDef) memo.PrivateID {
	return _f.mem.InternScanOpDef(val)
}

// InternColList adds the given value to the memo and returns an ID that
// can be used for later lookup. If the same value was added previously,
// this method is a no-op and returns the ID of the previous value.
func (_f *Factory) InternColList(val opt.ColList) memo.PrivateID {
	return _f.mem.InternColList(val)
}

// InternColSet adds the given value to the memo and returns an ID that
// can be used for later lookup. If the same value was added previously,
// this method is a no-op and returns the ID of the previous value.
func (_f *Factory) InternColSet(val opt.ColSet) memo.PrivateID {
	return _f.mem.InternColSet(val)
}

// InternSetOpColMap adds the given value to the memo and returns an ID that
// can be used for later lookup. If the same value was added previously,
// this method is a no-op and returns the ID of the previous value.
func (_f *Factory) InternSetOpColMap(val *memo.SetOpColMap) memo.PrivateID {
	return _f.mem.InternSetOpColMap(val)
}

// InternOrdering adds the given value to the memo and returns an ID that
// can be used for later lookup. If the same value was added previously,
// this method is a no-op and returns the ID of the previous value.
func (_f *Factory) InternOrdering(val memo.Ordering) memo.PrivateID {
	return _f.mem.InternOrdering(val)
}

// InternColumnID adds the given value to the memo and returns an ID that
// can be used for later lookup. If the same value was added previously,
// this method is a no-op and returns the ID of the previous value.
func (_f *Factory) InternColumnID(val opt.ColumnID) memo.PrivateID {
	return _f.mem.InternColumnID(val)
}

// InternDatum adds the given value to the memo and returns an ID that
// can be used for later lookup. If the same value was added previously,
// this method is a no-op and returns the ID of the previous value.
func (_f *Factory) InternDatum(val tree.Datum) memo.PrivateID {
	return _f.mem.InternDatum(val)
}

// InternType adds the given value to the memo and returns an ID that
// can be used for later lookup. If the same value was added previously,
// this method is a no-op and returns the ID of the previous value.
func (_f *Factory) InternType(val types.T) memo.PrivateID {
	return _f.mem.InternType(val)
}

// InternTypedExpr adds the given value to the memo and returns an ID that
// can be used for later lookup. If the same value was added previously,
// this method is a no-op and returns the ID of the previous value.
func (_f *Factory) InternTypedExpr(val tree.TypedExpr) memo.PrivateID {
	return _f.mem.InternTypedExpr(val)
}

// InternFuncOpDef adds the given value to the memo and returns an ID that
// can be used for later lookup. If the same value was added previously,
// this method is a no-op and returns the ID of the previous value.
func (_f *Factory) InternFuncOpDef(val *memo.FuncOpDef) memo.PrivateID {
	return _f.mem.InternFuncOpDef(val)
}

// ConstructScan constructs an expression for the Scan operator.
// Scan returns a result set containing every row in the specified table, by
// scanning one of the table's indexes according to its ordering. The private
// Def field is an *opt.ScanOpDef that identifies the table and index to scan,
// as well as the subset of columns to project from it.
func (_f *Factory) ConstructScan(
	def memo.PrivateID,
) memo.GroupID {
	_scanExpr := memo.MakeScanExpr(def)
	_group := _f.mem.GroupByFingerprint(_scanExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_scanExpr)))
}

// ConstructValues constructs an expression for the Values operator.
// Values returns a manufactured result set containing a constant number of rows.
// specified by the Rows list field. Each row must contain the same set of
// columns in the same order.
//
// The Rows field contains a list of Tuples, one for each row. Each tuple has
// the same length (same with that of Cols).
//
// The Cols field contains the set of column indices returned by each row
// as an opt.ColList. It is legal for Cols to be empty.
func (_f *Factory) ConstructValues(
	rows memo.ListID,
	cols memo.PrivateID,
) memo.GroupID {
	_valuesExpr := memo.MakeValuesExpr(rows, cols)
	_group := _f.mem.GroupByFingerprint(_valuesExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_valuesExpr)))
}

// ConstructSelect constructs an expression for the Select operator.
// Select filters rows from its input result set, based on the boolean filter
// predicate expression. Rows which do not match the filter are discarded. While
// the Filter operand can be any boolean expression, normalization rules will
// typically convert it to a Filters operator in order to make conjunction list
// matching easier.
func (_f *Factory) ConstructSelect(
	input memo.GroupID,
	filter memo.GroupID,
) memo.GroupID {
	_selectExpr := memo.MakeSelectExpr(input, filter)
	_group := _f.mem.GroupByFingerprint(_selectExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EnsureSelectFiltersAnd]
	{
		_andExpr := _f.mem.NormExpr(filter).AsAnd()
		if _andExpr != nil {
			conditions := _andExpr.Conditions()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureSelectFiltersAnd) {
				_group = _f.ConstructSelect(
					input,
					_f.ConstructFilters(
						conditions,
					),
				)
				_f.mem.AddAltFingerprint(_selectExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EnsureSelectFilters]
	{
		_expr := _f.mem.NormExpr(filter)
		if !(_expr.Operator() == opt.FiltersOp || _expr.Operator() == opt.AndOp || _expr.Operator() == opt.TrueOp || _expr.Operator() == opt.FalseOp) {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureSelectFilters) {
				_group = _f.ConstructSelect(
					input,
					_f.ConstructFilters(
						_f.mem.InternList([]memo.GroupID{filter}),
					),
				)
				_f.mem.AddAltFingerprint(_selectExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EliminateSelect]
	{
		_trueExpr := _f.mem.NormExpr(filter).AsTrue()
		if _trueExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EliminateSelect) {
				_group = input
				_f.mem.AddAltFingerprint(_selectExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [MergeSelects]
	{
		_selectExpr2 := _f.mem.NormExpr(input).AsSelect()
		if _selectExpr2 != nil {
			input := _selectExpr2.Input()
			innerFilter := _selectExpr2.Filter()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.MergeSelects) {
				_group = _f.ConstructSelect(
					input,
					_f.concatFilters(innerFilter, filter),
				)
				_f.mem.AddAltFingerprint(_selectExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [PushSelectIntoProject]
	{
		project := input
		_projectExpr := _f.mem.NormExpr(input).AsProject()
		if _projectExpr != nil {
			input := _projectExpr.Input()
			projections := _projectExpr.Projections()
			_filtersExpr := _f.mem.NormExpr(filter).AsFilters()
			if _filtersExpr != nil {
				list := _filtersExpr.Conditions()
				for _, _item := range _f.mem.LookupList(_filtersExpr.Conditions()) {
					condition := _item
					if !_f.isCorrelatedCols(condition, _f.synthesizedCols(project)) {
						if _f.onRuleMatch == nil || _f.onRuleMatch(opt.PushSelectIntoProject) {
							_group = _f.ConstructSelect(
								_f.projectNoCycle(_f.ConstructSelect(
									input,
									_f.ConstructFilters(
										_f.extractUncorrelatedConditions(list, _f.synthesizedCols(project)),
									),
								), projections),
								_f.ConstructFilters(
									_f.extractCorrelatedConditions(list, _f.synthesizedCols(project)),
								),
							)
							_f.mem.AddAltFingerprint(_selectExpr.Fingerprint(), _group)
							return _group
						}
					}
				}
			}
		}
	}

	// [PushSelectIntoJoinLeft]
	{
		_expr := _f.mem.NormExpr(input)
		if _expr.Operator() == opt.InnerJoinOp || _expr.Operator() == opt.InnerJoinApplyOp || _expr.Operator() == opt.LeftJoinOp || _expr.Operator() == opt.LeftJoinApplyOp {
			left := _expr.ChildGroup(_f.mem, 0)
			right := _expr.ChildGroup(_f.mem, 1)
			on := _expr.ChildGroup(_f.mem, 2)
			_filtersExpr := _f.mem.NormExpr(filter).AsFilters()
			if _filtersExpr != nil {
				list := _filtersExpr.Conditions()
				for _, _item := range _f.mem.LookupList(_filtersExpr.Conditions()) {
					condition := _item
					if !_f.isCorrelated(condition, right) {
						if _f.onRuleMatch == nil || _f.onRuleMatch(opt.PushSelectIntoJoinLeft) {
							_group = _f.ConstructSelect(
								_f.DynamicConstruct(
									_f.mem.NormExpr(input).Operator(),
									DynamicOperands{
										DynamicID(_f.ConstructSelect(
											left,
											_f.ConstructFilters(
												_f.extractUncorrelatedConditions(list, _f.outputCols(right)),
											),
										)),
										DynamicID(right),
										DynamicID(on),
									},
								),
								_f.ConstructFilters(
									_f.extractCorrelatedConditions(list, _f.outputCols(right)),
								),
							)
							_f.mem.AddAltFingerprint(_selectExpr.Fingerprint(), _group)
							return _group
						}
					}
				}
			}
		}
	}

	// [PushSelectIntoJoinRight]
	{
		_expr := _f.mem.NormExpr(input)
		if _expr.Operator() == opt.InnerJoinOp || _expr.Operator() == opt.InnerJoinApplyOp || _expr.Operator() == opt.RightJoinOp || _expr.Operator() == opt.RightJoinApplyOp {
			left := _expr.ChildGroup(_f.mem, 0)
			right := _expr.ChildGroup(_f.mem, 1)
			on := _expr.ChildGroup(_f.mem, 2)
			_filtersExpr := _f.mem.NormExpr(filter).AsFilters()
			if _filtersExpr != nil {
				list := _filtersExpr.Conditions()
				for _, _item := range _f.mem.LookupList(_filtersExpr.Conditions()) {
					condition := _item
					if !_f.isCorrelated(condition, left) {
						if _f.onRuleMatch == nil || _f.onRuleMatch(opt.PushSelectIntoJoinRight) {
							_group = _f.ConstructSelect(
								_f.DynamicConstruct(
									_f.mem.NormExpr(input).Operator(),
									DynamicOperands{
										DynamicID(left),
										DynamicID(_f.ConstructSelect(
											right,
											_f.ConstructFilters(
												_f.extractUncorrelatedConditions(list, _f.outputCols(left)),
											),
										)),
										DynamicID(on),
									},
								),
								_f.ConstructFilters(
									_f.extractCorrelatedConditions(list, _f.outputCols(left)),
								),
							)
							_f.mem.AddAltFingerprint(_selectExpr.Fingerprint(), _group)
							return _group
						}
					}
				}
			}
		}
	}

	// [MergeSelectInnerJoin]
	{
		_expr := _f.mem.NormExpr(input)
		if _expr.Operator() == opt.InnerJoinOp || _expr.Operator() == opt.InnerJoinApplyOp {
			left := _expr.ChildGroup(_f.mem, 0)
			right := _expr.ChildGroup(_f.mem, 1)
			on := _expr.ChildGroup(_f.mem, 2)
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.MergeSelectInnerJoin) {
				_group = _f.DynamicConstruct(
					_f.mem.NormExpr(input).Operator(),
					DynamicOperands{
						DynamicID(left),
						DynamicID(right),
						DynamicID(_f.concatFilters(on, filter)),
					},
				)
				_f.mem.AddAltFingerprint(_selectExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [PushSelectIntoGroupBy]
	{
		_groupByExpr := _f.mem.NormExpr(input).AsGroupBy()
		if _groupByExpr != nil {
			input := _groupByExpr.Input()
			aggregations := _groupByExpr.Aggregations()
			groupingCols := _groupByExpr.GroupingCols()
			if !_f.emptyGroupingCols(groupingCols) {
				_filtersExpr := _f.mem.NormExpr(filter).AsFilters()
				if _filtersExpr != nil {
					list := _filtersExpr.Conditions()
					for _, _item := range _f.mem.LookupList(_filtersExpr.Conditions()) {
						condition := _item
						if !_f.isCorrelated(condition, aggregations) {
							if _f.onRuleMatch == nil || _f.onRuleMatch(opt.PushSelectIntoGroupBy) {
								_group = _f.ConstructSelect(
									_f.ConstructGroupBy(
										_f.ConstructSelect(
											input,
											_f.ConstructFilters(
												_f.extractUncorrelatedConditions(list, _f.outputCols(aggregations)),
											),
										),
										aggregations,
										groupingCols,
									),
									_f.ConstructFilters(
										_f.extractCorrelatedConditions(list, _f.outputCols(aggregations)),
									),
								)
								_f.mem.AddAltFingerprint(_selectExpr.Fingerprint(), _group)
								return _group
							}
						}
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_selectExpr)))
}

// ConstructProject constructs an expression for the Project operator.
// Project modifies the set of columns returned by the input result set. Columns
// can be removed, reordered, or renamed. In addition, new columns can be
// synthesized. Projections is a scalar Projections list operator that contains
// the list of expressions that describe the output columns. The Cols field of
// the Projections operator provides the indexes of each of the output columns.
func (_f *Factory) ConstructProject(
	input memo.GroupID,
	projections memo.GroupID,
) memo.GroupID {
	_projectExpr := memo.MakeProjectExpr(input, projections)
	_group := _f.mem.GroupByFingerprint(_projectExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EliminateProject]
	{
		if _f.hasSameCols(input, projections) {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EliminateProject) {
				_group = input
				_f.mem.AddAltFingerprint(_projectExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EliminateProjectProject]
	{
		_projectExpr2 := _f.mem.NormExpr(input).AsProject()
		if _projectExpr2 != nil {
			innerInput := _projectExpr2.Input()
			if _f.hasSubsetCols(input, innerInput) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EliminateProjectProject) {
					_group = _f.ConstructProject(
						innerInput,
						projections,
					)
					_f.mem.AddAltFingerprint(_projectExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FilterUnusedProjectCols]
	{
		_projectExpr2 := _f.mem.NormExpr(input).AsProject()
		if _projectExpr2 != nil {
			innerInput := _projectExpr2.Input()
			innerProjections := _projectExpr2.Projections()
			if _f.hasUnusedColumns(innerProjections, _f.neededCols(projections)) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FilterUnusedProjectCols) {
					_group = _f.ConstructProject(
						_f.ConstructProject(
							innerInput,
							_f.filterUnusedColumns(innerProjections, _f.neededCols(projections)),
						),
						projections,
					)
					_f.mem.AddAltFingerprint(_projectExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FilterUnusedScanCols]
	{
		_scanExpr := _f.mem.NormExpr(input).AsScan()
		if _scanExpr != nil {
			if _f.hasUnusedColumns(input, _f.neededCols(projections)) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FilterUnusedScanCols) {
					_group = _f.ConstructProject(
						_f.filterUnusedColumns(input, _f.neededCols(projections)),
						projections,
					)
					_f.mem.AddAltFingerprint(_projectExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FilterUnusedSelectCols]
	{
		_selectExpr := _f.mem.NormExpr(input).AsSelect()
		if _selectExpr != nil {
			input := _selectExpr.Input()
			filter := _selectExpr.Filter()
			if _f.hasUnusedColumns(input, _f.neededCols2(projections, filter)) {
				if !_f.ruleCycles[_projectExpr.Fingerprint()] {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FilterUnusedSelectCols) {
						_f.ruleCycles[_projectExpr.Fingerprint()] = true
						_group = _f.ConstructProject(
							_f.ConstructSelect(
								_f.filterUnusedColumns(input, _f.neededCols2(projections, filter)),
								filter,
							),
							projections,
						)
						delete(_f.ruleCycles, _projectExpr.Fingerprint())
						if _f.mem.GroupByFingerprint(_projectExpr.Fingerprint()) == 0 {
							_f.mem.AddAltFingerprint(_projectExpr.Fingerprint(), _group)
						}
						return _group
					}
				}
			}
		}
	}

	// [FilterUnusedLimitCols]
	{
		_limitExpr := _f.mem.NormExpr(input).AsLimit()
		if _limitExpr != nil {
			input := _limitExpr.Input()
			limit := _limitExpr.Limit()
			ordering := _limitExpr.Ordering()
			if _f.hasUnusedColumns(input, _f.neededColsLimit(projections, ordering)) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FilterUnusedLimitCols) {
					_group = _f.ConstructProject(
						_f.limitNoCycle(_f.filterUnusedColumns(input, _f.neededColsLimit(projections, ordering)), limit, ordering),
						projections,
					)
					_f.mem.AddAltFingerprint(_projectExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FilterUnusedOffsetCols]
	{
		_offsetExpr := _f.mem.NormExpr(input).AsOffset()
		if _offsetExpr != nil {
			input := _offsetExpr.Input()
			offset := _offsetExpr.Offset()
			ordering := _offsetExpr.Ordering()
			if _f.hasUnusedColumns(input, _f.neededColsLimit(projections, ordering)) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FilterUnusedOffsetCols) {
					_group = _f.ConstructProject(
						_f.offsetNoCycle(_f.filterUnusedColumns(input, _f.neededColsLimit(projections, ordering)), offset, ordering),
						projections,
					)
					_f.mem.AddAltFingerprint(_projectExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FilterUnusedJoinLeftCols]
	{
		_expr := _f.mem.NormExpr(input)
		if _expr.IsJoin() {
			left := _expr.ChildGroup(_f.mem, 0)
			right := _expr.ChildGroup(_f.mem, 1)
			on := _expr.ChildGroup(_f.mem, 2)
			if _f.hasUnusedColumns(left, _f.neededCols3(projections, right, on)) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FilterUnusedJoinLeftCols) {
					_group = _f.ConstructProject(
						_f.DynamicConstruct(
							_f.mem.NormExpr(input).Operator(),
							DynamicOperands{
								DynamicID(_f.filterUnusedColumns(left, _f.neededCols3(projections, right, on))),
								DynamicID(right),
								DynamicID(on),
							},
						),
						projections,
					)
					_f.mem.AddAltFingerprint(_projectExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FilterUnusedJoinRightCols]
	{
		_expr := _f.mem.NormExpr(input)
		if _expr.IsJoin() {
			left := _expr.ChildGroup(_f.mem, 0)
			right := _expr.ChildGroup(_f.mem, 1)
			on := _expr.ChildGroup(_f.mem, 2)
			if _f.hasUnusedColumns(right, _f.neededCols2(projections, on)) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FilterUnusedJoinRightCols) {
					_group = _f.ConstructProject(
						_f.DynamicConstruct(
							_f.mem.NormExpr(input).Operator(),
							DynamicOperands{
								DynamicID(left),
								DynamicID(_f.filterUnusedColumns(right, _f.neededCols2(projections, on))),
								DynamicID(on),
							},
						),
						projections,
					)
					_f.mem.AddAltFingerprint(_projectExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FilterUnusedAggCols]
	{
		_groupByExpr := _f.mem.NormExpr(input).AsGroupBy()
		if _groupByExpr != nil {
			innerInput := _groupByExpr.Input()
			aggregations := _groupByExpr.Aggregations()
			groupingCols := _groupByExpr.GroupingCols()
			if _f.hasUnusedColumns(aggregations, _f.neededCols(projections)) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FilterUnusedAggCols) {
					_group = _f.ConstructProject(
						_f.ConstructGroupBy(
							innerInput,
							_f.filterUnusedColumns(aggregations, _f.neededCols(projections)),
							groupingCols,
						),
						projections,
					)
					_f.mem.AddAltFingerprint(_projectExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FilterUnusedValueCols]
	{
		_valuesExpr := _f.mem.NormExpr(input).AsValues()
		if _valuesExpr != nil {
			if _f.hasUnusedColumns(input, _f.neededCols(projections)) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FilterUnusedValueCols) {
					_group = _f.ConstructProject(
						_f.filterUnusedColumns(input, _f.neededCols(projections)),
						projections,
					)
					_f.mem.AddAltFingerprint(_projectExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_projectExpr)))
}

// ConstructInnerJoin constructs an expression for the InnerJoin operator.
// InnerJoin creates a result set that combines columns from its left and right
// inputs, based upon its "on" join predicate. Rows which do not match the
// predicate are filtered. While expressions in the predicate can refer to
// columns projected by either the left or right inputs, the inputs are not
// allowed to refer to the other's projected columns.
func (_f *Factory) ConstructInnerJoin(
	left memo.GroupID,
	right memo.GroupID,
	on memo.GroupID,
) memo.GroupID {
	_innerJoinExpr := memo.MakeInnerJoinExpr(left, right, on)
	_group := _f.mem.GroupByFingerprint(_innerJoinExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EnsureJoinFiltersAnd]
	{
		_andExpr := _f.mem.NormExpr(on).AsAnd()
		if _andExpr != nil {
			conditions := _andExpr.Conditions()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFiltersAnd) {
				_group = _f.ConstructInnerJoin(
					left,
					right,
					_f.ConstructFilters(
						conditions,
					),
				)
				_f.mem.AddAltFingerprint(_innerJoinExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EnsureJoinFilters]
	{
		filter := on
		_expr := _f.mem.NormExpr(on)
		if !(_expr.Operator() == opt.FiltersOp || _expr.Operator() == opt.AndOp || _expr.Operator() == opt.TrueOp || _expr.Operator() == opt.FalseOp) {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFilters) {
				_group = _f.ConstructInnerJoin(
					left,
					right,
					_f.ConstructFilters(
						_f.mem.InternList([]memo.GroupID{filter}),
					),
				)
				_f.mem.AddAltFingerprint(_innerJoinExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [PushFilterIntoJoinLeft]
	{
		_filtersExpr := _f.mem.NormExpr(on).AsFilters()
		if _filtersExpr != nil {
			list := _filtersExpr.Conditions()
			for _, _item := range _f.mem.LookupList(_filtersExpr.Conditions()) {
				condition := _item
				if !_f.isCorrelated(condition, right) {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.PushFilterIntoJoinLeft) {
						_group = _f.ConstructInnerJoin(
							_f.ConstructSelect(
								left,
								_f.ConstructFilters(
									_f.extractUncorrelatedConditions(list, _f.outputCols(right)),
								),
							),
							right,
							_f.ConstructFilters(
								_f.extractCorrelatedConditions(list, _f.outputCols(right)),
							),
						)
						_f.mem.AddAltFingerprint(_innerJoinExpr.Fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	// [PushFilterIntoJoinRight]
	{
		_filtersExpr := _f.mem.NormExpr(on).AsFilters()
		if _filtersExpr != nil {
			list := _filtersExpr.Conditions()
			for _, _item := range _f.mem.LookupList(_filtersExpr.Conditions()) {
				condition := _item
				if !_f.isCorrelated(condition, left) {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.PushFilterIntoJoinRight) {
						_group = _f.ConstructInnerJoin(
							left,
							_f.ConstructSelect(
								right,
								_f.ConstructFilters(
									_f.extractUncorrelatedConditions(list, _f.outputCols(left)),
								),
							),
							_f.ConstructFilters(
								_f.extractCorrelatedConditions(list, _f.outputCols(left)),
							),
						)
						_f.mem.AddAltFingerprint(_innerJoinExpr.Fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_innerJoinExpr)))
}

// ConstructLeftJoin constructs an expression for the LeftJoin operator.
func (_f *Factory) ConstructLeftJoin(
	left memo.GroupID,
	right memo.GroupID,
	on memo.GroupID,
) memo.GroupID {
	_leftJoinExpr := memo.MakeLeftJoinExpr(left, right, on)
	_group := _f.mem.GroupByFingerprint(_leftJoinExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EnsureJoinFiltersAnd]
	{
		_andExpr := _f.mem.NormExpr(on).AsAnd()
		if _andExpr != nil {
			conditions := _andExpr.Conditions()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFiltersAnd) {
				_group = _f.ConstructLeftJoin(
					left,
					right,
					_f.ConstructFilters(
						conditions,
					),
				)
				_f.mem.AddAltFingerprint(_leftJoinExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EnsureJoinFilters]
	{
		filter := on
		_expr := _f.mem.NormExpr(on)
		if !(_expr.Operator() == opt.FiltersOp || _expr.Operator() == opt.AndOp || _expr.Operator() == opt.TrueOp || _expr.Operator() == opt.FalseOp) {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFilters) {
				_group = _f.ConstructLeftJoin(
					left,
					right,
					_f.ConstructFilters(
						_f.mem.InternList([]memo.GroupID{filter}),
					),
				)
				_f.mem.AddAltFingerprint(_leftJoinExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [PushFilterIntoJoinRight]
	{
		_filtersExpr := _f.mem.NormExpr(on).AsFilters()
		if _filtersExpr != nil {
			list := _filtersExpr.Conditions()
			for _, _item := range _f.mem.LookupList(_filtersExpr.Conditions()) {
				condition := _item
				if !_f.isCorrelated(condition, left) {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.PushFilterIntoJoinRight) {
						_group = _f.ConstructLeftJoin(
							left,
							_f.ConstructSelect(
								right,
								_f.ConstructFilters(
									_f.extractUncorrelatedConditions(list, _f.outputCols(left)),
								),
							),
							_f.ConstructFilters(
								_f.extractCorrelatedConditions(list, _f.outputCols(left)),
							),
						)
						_f.mem.AddAltFingerprint(_leftJoinExpr.Fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_leftJoinExpr)))
}

// ConstructRightJoin constructs an expression for the RightJoin operator.
func (_f *Factory) ConstructRightJoin(
	left memo.GroupID,
	right memo.GroupID,
	on memo.GroupID,
) memo.GroupID {
	_rightJoinExpr := memo.MakeRightJoinExpr(left, right, on)
	_group := _f.mem.GroupByFingerprint(_rightJoinExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EnsureJoinFiltersAnd]
	{
		_andExpr := _f.mem.NormExpr(on).AsAnd()
		if _andExpr != nil {
			conditions := _andExpr.Conditions()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFiltersAnd) {
				_group = _f.ConstructRightJoin(
					left,
					right,
					_f.ConstructFilters(
						conditions,
					),
				)
				_f.mem.AddAltFingerprint(_rightJoinExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EnsureJoinFilters]
	{
		filter := on
		_expr := _f.mem.NormExpr(on)
		if !(_expr.Operator() == opt.FiltersOp || _expr.Operator() == opt.AndOp || _expr.Operator() == opt.TrueOp || _expr.Operator() == opt.FalseOp) {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFilters) {
				_group = _f.ConstructRightJoin(
					left,
					right,
					_f.ConstructFilters(
						_f.mem.InternList([]memo.GroupID{filter}),
					),
				)
				_f.mem.AddAltFingerprint(_rightJoinExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [PushFilterIntoJoinLeft]
	{
		_filtersExpr := _f.mem.NormExpr(on).AsFilters()
		if _filtersExpr != nil {
			list := _filtersExpr.Conditions()
			for _, _item := range _f.mem.LookupList(_filtersExpr.Conditions()) {
				condition := _item
				if !_f.isCorrelated(condition, right) {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.PushFilterIntoJoinLeft) {
						_group = _f.ConstructRightJoin(
							_f.ConstructSelect(
								left,
								_f.ConstructFilters(
									_f.extractUncorrelatedConditions(list, _f.outputCols(right)),
								),
							),
							right,
							_f.ConstructFilters(
								_f.extractCorrelatedConditions(list, _f.outputCols(right)),
							),
						)
						_f.mem.AddAltFingerprint(_rightJoinExpr.Fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_rightJoinExpr)))
}

// ConstructFullJoin constructs an expression for the FullJoin operator.
func (_f *Factory) ConstructFullJoin(
	left memo.GroupID,
	right memo.GroupID,
	on memo.GroupID,
) memo.GroupID {
	_fullJoinExpr := memo.MakeFullJoinExpr(left, right, on)
	_group := _f.mem.GroupByFingerprint(_fullJoinExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EnsureJoinFiltersAnd]
	{
		_andExpr := _f.mem.NormExpr(on).AsAnd()
		if _andExpr != nil {
			conditions := _andExpr.Conditions()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFiltersAnd) {
				_group = _f.ConstructFullJoin(
					left,
					right,
					_f.ConstructFilters(
						conditions,
					),
				)
				_f.mem.AddAltFingerprint(_fullJoinExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EnsureJoinFilters]
	{
		filter := on
		_expr := _f.mem.NormExpr(on)
		if !(_expr.Operator() == opt.FiltersOp || _expr.Operator() == opt.AndOp || _expr.Operator() == opt.TrueOp || _expr.Operator() == opt.FalseOp) {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFilters) {
				_group = _f.ConstructFullJoin(
					left,
					right,
					_f.ConstructFilters(
						_f.mem.InternList([]memo.GroupID{filter}),
					),
				)
				_f.mem.AddAltFingerprint(_fullJoinExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_fullJoinExpr)))
}

// ConstructSemiJoin constructs an expression for the SemiJoin operator.
func (_f *Factory) ConstructSemiJoin(
	left memo.GroupID,
	right memo.GroupID,
	on memo.GroupID,
) memo.GroupID {
	_semiJoinExpr := memo.MakeSemiJoinExpr(left, right, on)
	_group := _f.mem.GroupByFingerprint(_semiJoinExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EnsureJoinFiltersAnd]
	{
		_andExpr := _f.mem.NormExpr(on).AsAnd()
		if _andExpr != nil {
			conditions := _andExpr.Conditions()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFiltersAnd) {
				_group = _f.ConstructSemiJoin(
					left,
					right,
					_f.ConstructFilters(
						conditions,
					),
				)
				_f.mem.AddAltFingerprint(_semiJoinExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EnsureJoinFilters]
	{
		filter := on
		_expr := _f.mem.NormExpr(on)
		if !(_expr.Operator() == opt.FiltersOp || _expr.Operator() == opt.AndOp || _expr.Operator() == opt.TrueOp || _expr.Operator() == opt.FalseOp) {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFilters) {
				_group = _f.ConstructSemiJoin(
					left,
					right,
					_f.ConstructFilters(
						_f.mem.InternList([]memo.GroupID{filter}),
					),
				)
				_f.mem.AddAltFingerprint(_semiJoinExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_semiJoinExpr)))
}

// ConstructAntiJoin constructs an expression for the AntiJoin operator.
func (_f *Factory) ConstructAntiJoin(
	left memo.GroupID,
	right memo.GroupID,
	on memo.GroupID,
) memo.GroupID {
	_antiJoinExpr := memo.MakeAntiJoinExpr(left, right, on)
	_group := _f.mem.GroupByFingerprint(_antiJoinExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EnsureJoinFiltersAnd]
	{
		_andExpr := _f.mem.NormExpr(on).AsAnd()
		if _andExpr != nil {
			conditions := _andExpr.Conditions()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFiltersAnd) {
				_group = _f.ConstructAntiJoin(
					left,
					right,
					_f.ConstructFilters(
						conditions,
					),
				)
				_f.mem.AddAltFingerprint(_antiJoinExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EnsureJoinFilters]
	{
		filter := on
		_expr := _f.mem.NormExpr(on)
		if !(_expr.Operator() == opt.FiltersOp || _expr.Operator() == opt.AndOp || _expr.Operator() == opt.TrueOp || _expr.Operator() == opt.FalseOp) {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFilters) {
				_group = _f.ConstructAntiJoin(
					left,
					right,
					_f.ConstructFilters(
						_f.mem.InternList([]memo.GroupID{filter}),
					),
				)
				_f.mem.AddAltFingerprint(_antiJoinExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_antiJoinExpr)))
}

// ConstructInnerJoinApply constructs an expression for the InnerJoinApply operator.
// InnerJoinApply has the same join semantics as InnerJoin. However, unlike
// InnerJoin, it allows the right input to refer to columns projected by the
// left input.
func (_f *Factory) ConstructInnerJoinApply(
	left memo.GroupID,
	right memo.GroupID,
	on memo.GroupID,
) memo.GroupID {
	_innerJoinApplyExpr := memo.MakeInnerJoinApplyExpr(left, right, on)
	_group := _f.mem.GroupByFingerprint(_innerJoinApplyExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EnsureJoinFiltersAnd]
	{
		_andExpr := _f.mem.NormExpr(on).AsAnd()
		if _andExpr != nil {
			conditions := _andExpr.Conditions()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFiltersAnd) {
				_group = _f.ConstructInnerJoinApply(
					left,
					right,
					_f.ConstructFilters(
						conditions,
					),
				)
				_f.mem.AddAltFingerprint(_innerJoinApplyExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EnsureJoinFilters]
	{
		filter := on
		_expr := _f.mem.NormExpr(on)
		if !(_expr.Operator() == opt.FiltersOp || _expr.Operator() == opt.AndOp || _expr.Operator() == opt.TrueOp || _expr.Operator() == opt.FalseOp) {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFilters) {
				_group = _f.ConstructInnerJoinApply(
					left,
					right,
					_f.ConstructFilters(
						_f.mem.InternList([]memo.GroupID{filter}),
					),
				)
				_f.mem.AddAltFingerprint(_innerJoinApplyExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [PushFilterIntoJoinLeft]
	{
		_filtersExpr := _f.mem.NormExpr(on).AsFilters()
		if _filtersExpr != nil {
			list := _filtersExpr.Conditions()
			for _, _item := range _f.mem.LookupList(_filtersExpr.Conditions()) {
				condition := _item
				if !_f.isCorrelated(condition, right) {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.PushFilterIntoJoinLeft) {
						_group = _f.ConstructInnerJoinApply(
							_f.ConstructSelect(
								left,
								_f.ConstructFilters(
									_f.extractUncorrelatedConditions(list, _f.outputCols(right)),
								),
							),
							right,
							_f.ConstructFilters(
								_f.extractCorrelatedConditions(list, _f.outputCols(right)),
							),
						)
						_f.mem.AddAltFingerprint(_innerJoinApplyExpr.Fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	// [PushFilterIntoJoinRight]
	{
		_filtersExpr := _f.mem.NormExpr(on).AsFilters()
		if _filtersExpr != nil {
			list := _filtersExpr.Conditions()
			for _, _item := range _f.mem.LookupList(_filtersExpr.Conditions()) {
				condition := _item
				if !_f.isCorrelated(condition, left) {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.PushFilterIntoJoinRight) {
						_group = _f.ConstructInnerJoinApply(
							left,
							_f.ConstructSelect(
								right,
								_f.ConstructFilters(
									_f.extractUncorrelatedConditions(list, _f.outputCols(left)),
								),
							),
							_f.ConstructFilters(
								_f.extractCorrelatedConditions(list, _f.outputCols(left)),
							),
						)
						_f.mem.AddAltFingerprint(_innerJoinApplyExpr.Fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_innerJoinApplyExpr)))
}

// ConstructLeftJoinApply constructs an expression for the LeftJoinApply operator.
func (_f *Factory) ConstructLeftJoinApply(
	left memo.GroupID,
	right memo.GroupID,
	on memo.GroupID,
) memo.GroupID {
	_leftJoinApplyExpr := memo.MakeLeftJoinApplyExpr(left, right, on)
	_group := _f.mem.GroupByFingerprint(_leftJoinApplyExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EnsureJoinFiltersAnd]
	{
		_andExpr := _f.mem.NormExpr(on).AsAnd()
		if _andExpr != nil {
			conditions := _andExpr.Conditions()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFiltersAnd) {
				_group = _f.ConstructLeftJoinApply(
					left,
					right,
					_f.ConstructFilters(
						conditions,
					),
				)
				_f.mem.AddAltFingerprint(_leftJoinApplyExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EnsureJoinFilters]
	{
		filter := on
		_expr := _f.mem.NormExpr(on)
		if !(_expr.Operator() == opt.FiltersOp || _expr.Operator() == opt.AndOp || _expr.Operator() == opt.TrueOp || _expr.Operator() == opt.FalseOp) {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFilters) {
				_group = _f.ConstructLeftJoinApply(
					left,
					right,
					_f.ConstructFilters(
						_f.mem.InternList([]memo.GroupID{filter}),
					),
				)
				_f.mem.AddAltFingerprint(_leftJoinApplyExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [PushFilterIntoJoinRight]
	{
		_filtersExpr := _f.mem.NormExpr(on).AsFilters()
		if _filtersExpr != nil {
			list := _filtersExpr.Conditions()
			for _, _item := range _f.mem.LookupList(_filtersExpr.Conditions()) {
				condition := _item
				if !_f.isCorrelated(condition, left) {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.PushFilterIntoJoinRight) {
						_group = _f.ConstructLeftJoinApply(
							left,
							_f.ConstructSelect(
								right,
								_f.ConstructFilters(
									_f.extractUncorrelatedConditions(list, _f.outputCols(left)),
								),
							),
							_f.ConstructFilters(
								_f.extractCorrelatedConditions(list, _f.outputCols(left)),
							),
						)
						_f.mem.AddAltFingerprint(_leftJoinApplyExpr.Fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_leftJoinApplyExpr)))
}

// ConstructRightJoinApply constructs an expression for the RightJoinApply operator.
func (_f *Factory) ConstructRightJoinApply(
	left memo.GroupID,
	right memo.GroupID,
	on memo.GroupID,
) memo.GroupID {
	_rightJoinApplyExpr := memo.MakeRightJoinApplyExpr(left, right, on)
	_group := _f.mem.GroupByFingerprint(_rightJoinApplyExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EnsureJoinFiltersAnd]
	{
		_andExpr := _f.mem.NormExpr(on).AsAnd()
		if _andExpr != nil {
			conditions := _andExpr.Conditions()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFiltersAnd) {
				_group = _f.ConstructRightJoinApply(
					left,
					right,
					_f.ConstructFilters(
						conditions,
					),
				)
				_f.mem.AddAltFingerprint(_rightJoinApplyExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EnsureJoinFilters]
	{
		filter := on
		_expr := _f.mem.NormExpr(on)
		if !(_expr.Operator() == opt.FiltersOp || _expr.Operator() == opt.AndOp || _expr.Operator() == opt.TrueOp || _expr.Operator() == opt.FalseOp) {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFilters) {
				_group = _f.ConstructRightJoinApply(
					left,
					right,
					_f.ConstructFilters(
						_f.mem.InternList([]memo.GroupID{filter}),
					),
				)
				_f.mem.AddAltFingerprint(_rightJoinApplyExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [PushFilterIntoJoinLeft]
	{
		_filtersExpr := _f.mem.NormExpr(on).AsFilters()
		if _filtersExpr != nil {
			list := _filtersExpr.Conditions()
			for _, _item := range _f.mem.LookupList(_filtersExpr.Conditions()) {
				condition := _item
				if !_f.isCorrelated(condition, right) {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.PushFilterIntoJoinLeft) {
						_group = _f.ConstructRightJoinApply(
							_f.ConstructSelect(
								left,
								_f.ConstructFilters(
									_f.extractUncorrelatedConditions(list, _f.outputCols(right)),
								),
							),
							right,
							_f.ConstructFilters(
								_f.extractCorrelatedConditions(list, _f.outputCols(right)),
							),
						)
						_f.mem.AddAltFingerprint(_rightJoinApplyExpr.Fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_rightJoinApplyExpr)))
}

// ConstructFullJoinApply constructs an expression for the FullJoinApply operator.
func (_f *Factory) ConstructFullJoinApply(
	left memo.GroupID,
	right memo.GroupID,
	on memo.GroupID,
) memo.GroupID {
	_fullJoinApplyExpr := memo.MakeFullJoinApplyExpr(left, right, on)
	_group := _f.mem.GroupByFingerprint(_fullJoinApplyExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EnsureJoinFiltersAnd]
	{
		_andExpr := _f.mem.NormExpr(on).AsAnd()
		if _andExpr != nil {
			conditions := _andExpr.Conditions()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFiltersAnd) {
				_group = _f.ConstructFullJoinApply(
					left,
					right,
					_f.ConstructFilters(
						conditions,
					),
				)
				_f.mem.AddAltFingerprint(_fullJoinApplyExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EnsureJoinFilters]
	{
		filter := on
		_expr := _f.mem.NormExpr(on)
		if !(_expr.Operator() == opt.FiltersOp || _expr.Operator() == opt.AndOp || _expr.Operator() == opt.TrueOp || _expr.Operator() == opt.FalseOp) {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFilters) {
				_group = _f.ConstructFullJoinApply(
					left,
					right,
					_f.ConstructFilters(
						_f.mem.InternList([]memo.GroupID{filter}),
					),
				)
				_f.mem.AddAltFingerprint(_fullJoinApplyExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_fullJoinApplyExpr)))
}

// ConstructSemiJoinApply constructs an expression for the SemiJoinApply operator.
func (_f *Factory) ConstructSemiJoinApply(
	left memo.GroupID,
	right memo.GroupID,
	on memo.GroupID,
) memo.GroupID {
	_semiJoinApplyExpr := memo.MakeSemiJoinApplyExpr(left, right, on)
	_group := _f.mem.GroupByFingerprint(_semiJoinApplyExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EnsureJoinFiltersAnd]
	{
		_andExpr := _f.mem.NormExpr(on).AsAnd()
		if _andExpr != nil {
			conditions := _andExpr.Conditions()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFiltersAnd) {
				_group = _f.ConstructSemiJoinApply(
					left,
					right,
					_f.ConstructFilters(
						conditions,
					),
				)
				_f.mem.AddAltFingerprint(_semiJoinApplyExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EnsureJoinFilters]
	{
		filter := on
		_expr := _f.mem.NormExpr(on)
		if !(_expr.Operator() == opt.FiltersOp || _expr.Operator() == opt.AndOp || _expr.Operator() == opt.TrueOp || _expr.Operator() == opt.FalseOp) {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFilters) {
				_group = _f.ConstructSemiJoinApply(
					left,
					right,
					_f.ConstructFilters(
						_f.mem.InternList([]memo.GroupID{filter}),
					),
				)
				_f.mem.AddAltFingerprint(_semiJoinApplyExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_semiJoinApplyExpr)))
}

// ConstructAntiJoinApply constructs an expression for the AntiJoinApply operator.
func (_f *Factory) ConstructAntiJoinApply(
	left memo.GroupID,
	right memo.GroupID,
	on memo.GroupID,
) memo.GroupID {
	_antiJoinApplyExpr := memo.MakeAntiJoinApplyExpr(left, right, on)
	_group := _f.mem.GroupByFingerprint(_antiJoinApplyExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EnsureJoinFiltersAnd]
	{
		_andExpr := _f.mem.NormExpr(on).AsAnd()
		if _andExpr != nil {
			conditions := _andExpr.Conditions()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFiltersAnd) {
				_group = _f.ConstructAntiJoinApply(
					left,
					right,
					_f.ConstructFilters(
						conditions,
					),
				)
				_f.mem.AddAltFingerprint(_antiJoinApplyExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EnsureJoinFilters]
	{
		filter := on
		_expr := _f.mem.NormExpr(on)
		if !(_expr.Operator() == opt.FiltersOp || _expr.Operator() == opt.AndOp || _expr.Operator() == opt.TrueOp || _expr.Operator() == opt.FalseOp) {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EnsureJoinFilters) {
				_group = _f.ConstructAntiJoinApply(
					left,
					right,
					_f.ConstructFilters(
						_f.mem.InternList([]memo.GroupID{filter}),
					),
				)
				_f.mem.AddAltFingerprint(_antiJoinApplyExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_antiJoinApplyExpr)))
}

// ConstructGroupBy constructs an expression for the GroupBy operator.
// GroupBy is an operator that is used for performing aggregations (for queries
// with aggregate functions, HAVING clauses and/or group by expressions). It
// groups results that are equal on the grouping columns and computes
// aggregations as described by Aggregations (which is always an Aggregations
// operator). The arguments of the aggregations are columns from the input.
func (_f *Factory) ConstructGroupBy(
	input memo.GroupID,
	aggregations memo.GroupID,
	groupingCols memo.PrivateID,
) memo.GroupID {
	_groupByExpr := memo.MakeGroupByExpr(input, aggregations, groupingCols)
	_group := _f.mem.GroupByFingerprint(_groupByExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FilterUnusedGroupByCols]
	{
		if _f.hasUnusedColumns(input, _f.neededColsGroupBy(aggregations, groupingCols)) {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FilterUnusedGroupByCols) {
				_group = _f.ConstructGroupBy(
					_f.filterUnusedColumns(input, _f.neededColsGroupBy(aggregations, groupingCols)),
					aggregations,
					groupingCols,
				)
				_f.mem.AddAltFingerprint(_groupByExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_groupByExpr)))
}

// ConstructUnion constructs an expression for the Union operator.
// Union is an operator used to combine the Left and Right input relations into
// a single set containing rows from both inputs. Duplicate rows are discarded.
// The private field, ColMap, matches columns from the Left and Right inputs
// of the Union with the output columns. See the comment above opt.SetOpColMap
// for more details.
func (_f *Factory) ConstructUnion(
	left memo.GroupID,
	right memo.GroupID,
	colMap memo.PrivateID,
) memo.GroupID {
	_unionExpr := memo.MakeUnionExpr(left, right, colMap)
	_group := _f.mem.GroupByFingerprint(_unionExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_unionExpr)))
}

// ConstructIntersect constructs an expression for the Intersect operator.
// Intersect is an operator used to perform an intersection between the Left
// and Right input relations. The result consists only of rows in the Left
// relation that are also present in the Right relation. Duplicate rows are
// discarded.
// The private field, ColMap, matches columns from the Left and Right inputs
// of the Intersect with the output columns. See the comment above
// opt.SetOpColMap for more details.
func (_f *Factory) ConstructIntersect(
	left memo.GroupID,
	right memo.GroupID,
	colMap memo.PrivateID,
) memo.GroupID {
	_intersectExpr := memo.MakeIntersectExpr(left, right, colMap)
	_group := _f.mem.GroupByFingerprint(_intersectExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_intersectExpr)))
}

// ConstructExcept constructs an expression for the Except operator.
// Except is an operator used to perform a set difference between the Left and
// Right input relations. The result consists only of rows in the Left relation
// that are not present in the Right relation. Duplicate rows are discarded.
// The private field, ColMap, matches columns from the Left and Right inputs
// of the Except with the output columns. See the comment above opt.SetOpColMap
// for more details.
func (_f *Factory) ConstructExcept(
	left memo.GroupID,
	right memo.GroupID,
	colMap memo.PrivateID,
) memo.GroupID {
	_exceptExpr := memo.MakeExceptExpr(left, right, colMap)
	_group := _f.mem.GroupByFingerprint(_exceptExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_exceptExpr)))
}

// ConstructUnionAll constructs an expression for the UnionAll operator.
// UnionAll is an operator used to combine the Left and Right input relations
// into a single set containing rows from both inputs. Duplicate rows are
// not discarded. For example:
//   SELECT x FROM xx UNION ALL SELECT y FROM yy
//     x       y         out
//   -----   -----      -----
//     1       1          1
//     1       2    ->    1
//     2       3          1
//                        2
//                        2
//                        3
//
// The private field, ColMap, matches columns from the Left and Right inputs
// of the UnionAll with the output columns. See the comment above
// opt.SetOpColMap for more details.
func (_f *Factory) ConstructUnionAll(
	left memo.GroupID,
	right memo.GroupID,
	colMap memo.PrivateID,
) memo.GroupID {
	_unionAllExpr := memo.MakeUnionAllExpr(left, right, colMap)
	_group := _f.mem.GroupByFingerprint(_unionAllExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_unionAllExpr)))
}

// ConstructIntersectAll constructs an expression for the IntersectAll operator.
// IntersectAll is an operator used to perform an intersection between the Left
// and Right input relations. The result consists only of rows in the Left
// relation that have a corresponding row in the Right relation. Duplicate rows
// are not discarded. This effectively creates a one-to-one mapping between the
// Left and Right rows. For example:
//   SELECT x FROM xx INTERSECT ALL SELECT y FROM yy
//     x       y         out
//   -----   -----      -----
//     1       1          1
//     1       1    ->    1
//     1       2          2
//     2       2          2
//     2       3
//     4
//
// The private field, ColMap, matches columns from the Left and Right inputs
// of the IntersectAll with the output columns. See the comment above
// opt.SetOpColMap for more details.
func (_f *Factory) ConstructIntersectAll(
	left memo.GroupID,
	right memo.GroupID,
	colMap memo.PrivateID,
) memo.GroupID {
	_intersectAllExpr := memo.MakeIntersectAllExpr(left, right, colMap)
	_group := _f.mem.GroupByFingerprint(_intersectAllExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_intersectAllExpr)))
}

// ConstructExceptAll constructs an expression for the ExceptAll operator.
// ExceptAll is an operator used to perform a set difference between the Left
// and Right input relations. The result consists only of rows in the Left
// relation that do not have a corresponding row in the Right relation.
// Duplicate rows are not discarded. This effectively creates a one-to-one
// mapping between the Left and Right rows. For example:
//   SELECT x FROM xx EXCEPT ALL SELECT y FROM yy
//     x       y         out
//   -----   -----      -----
//     1       1    ->    1
//     1       1          4
//     1       2
//     2       2
//     2       3
//     4
//
// The private field, ColMap, matches columns from the Left and Right inputs
// of the ExceptAll with the output columns. See the comment above
// opt.SetOpColMap for more details.
func (_f *Factory) ConstructExceptAll(
	left memo.GroupID,
	right memo.GroupID,
	colMap memo.PrivateID,
) memo.GroupID {
	_exceptAllExpr := memo.MakeExceptAllExpr(left, right, colMap)
	_group := _f.mem.GroupByFingerprint(_exceptAllExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_exceptAllExpr)))
}

// ConstructLimit constructs an expression for the Limit operator.
// Limit returns a limited subset of the results in the input relation.
// The limit expression is a scalar value; the operator returns at most this many
// rows. The private field is an opt.Ordering which indicates the desired
// row ordering (the first rows with respect to this ordering are returned).
func (_f *Factory) ConstructLimit(
	input memo.GroupID,
	limit memo.GroupID,
	ordering memo.PrivateID,
) memo.GroupID {
	_limitExpr := memo.MakeLimitExpr(input, limit, ordering)
	_group := _f.mem.GroupByFingerprint(_limitExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [PushLimitIntoProject]
	{
		_projectExpr := _f.mem.NormExpr(input).AsProject()
		if _projectExpr != nil {
			input := _projectExpr.Input()
			projections := _projectExpr.Projections()
			if !_f.ruleCycles[_limitExpr.Fingerprint()] {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.PushLimitIntoProject) {
					_f.ruleCycles[_limitExpr.Fingerprint()] = true
					_group = _f.ConstructProject(
						_f.ConstructLimit(
							input,
							limit,
							ordering,
						),
						projections,
					)
					delete(_f.ruleCycles, _limitExpr.Fingerprint())
					if _f.mem.GroupByFingerprint(_limitExpr.Fingerprint()) == 0 {
						_f.mem.AddAltFingerprint(_limitExpr.Fingerprint(), _group)
					}
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_limitExpr)))
}

// ConstructOffset constructs an expression for the Offset operator.
// Offset filters out the first Offset rows of the input relation; used in
// conjunction with Limit.
func (_f *Factory) ConstructOffset(
	input memo.GroupID,
	offset memo.GroupID,
	ordering memo.PrivateID,
) memo.GroupID {
	_offsetExpr := memo.MakeOffsetExpr(input, offset, ordering)
	_group := _f.mem.GroupByFingerprint(_offsetExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [PushOffsetIntoProject]
	{
		_projectExpr := _f.mem.NormExpr(input).AsProject()
		if _projectExpr != nil {
			input := _projectExpr.Input()
			projections := _projectExpr.Projections()
			if !_f.ruleCycles[_offsetExpr.Fingerprint()] {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.PushOffsetIntoProject) {
					_f.ruleCycles[_offsetExpr.Fingerprint()] = true
					_group = _f.ConstructProject(
						_f.ConstructOffset(
							input,
							offset,
							ordering,
						),
						projections,
					)
					delete(_f.ruleCycles, _offsetExpr.Fingerprint())
					if _f.mem.GroupByFingerprint(_offsetExpr.Fingerprint()) == 0 {
						_f.mem.AddAltFingerprint(_offsetExpr.Fingerprint(), _group)
					}
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_offsetExpr)))
}

// ConstructMax1Row constructs an expression for the Max1Row operator.
// Max1Row is an operator which enforces that its input must return at most one
// row. It is used as input to the Subquery operator. See the comment above
// Subquery for more details.
func (_f *Factory) ConstructMax1Row(
	input memo.GroupID,
) memo.GroupID {
	_max1RowExpr := memo.MakeMax1RowExpr(input)
	_group := _f.mem.GroupByFingerprint(_max1RowExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_max1RowExpr)))
}

// ConstructSubquery constructs an expression for the Subquery operator.
// Subquery is a subquery in a single-row context such as
// `SELECT 1 = (SELECT 1)` or `SELECT (1, 'a') = (SELECT 1, 'a')`.
// In a single-row context, the outer query is only valid if the subquery
// returns at most one row.
//
// Subqueries in a multi-row context such as
// `SELECT 1 IN (SELECT c FROM t)` or `SELECT (1, 'a') IN (SELECT 1, 'a')`
// can be transformed to a single row context using the Any operator. (Note that
// this is different from the SQL ANY operator. See the comment above the Any
// operator for more details.)
//
// We use the following transformations:
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// `<var> IN (<subquery>)`
//    ==> `Any(SELECT <var> = x FROM (<subquery>) AS q(x))`
//
// `<var> NOT IN (<subquery>)`
//    ==> `NOT Any(SELECT <var> = x FROM (<subquery>) AS q(x))`
//
// `<var> <comp> {SOME|ANY}(<subquery>)`
//    ==> `Any(SELECT <var> <comp> x FROM (<subquery>) AS q(x))`
//
// `<var> <comp> ALL(<subquery>)`
//    ==> `NOT Any(SELECT NOT(<var> <comp> x) FROM (<subquery>) AS q(x))`
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//
// The Input field contains the subquery itself, which should be wrapped in a
// Max1Row operator to enforce that the subquery can return at most one row
// (Max1Row may be removed by the optimizer later if it can determine statically
// that the subquery will always return at most one row). The Projection field
// contains a single column representing the output of the subquery. For
// example, `(SELECT 1, 'a')` would be represented by the following structure:
//
// (Subquery
//   (Max1Row
//     (Project (Values (Tuple)) (Projections (Tuple (Const 1) (Const 'a'))))
//   )
//   (Variable 3)
// )
//
// Here Variable 3 refers to the projection from the Input,
// (Tuple (Const 1) (Const 'a')).
func (_f *Factory) ConstructSubquery(
	input memo.GroupID,
	projection memo.GroupID,
) memo.GroupID {
	_subqueryExpr := memo.MakeSubqueryExpr(input, projection)
	_group := _f.mem.GroupByFingerprint(_subqueryExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_subqueryExpr)))
}

// ConstructAny constructs an expression for the Any operator.
// Any is a special operator that does not exist in SQL. However, it is very
// similar to the SQL ANY, and can be converted to the SQL ANY operator using
// the following transformation:
//  `Any(<subquery>)` ==> `True = ANY(<subquery>)`
//
// Any expects the subquery to return a single boolean column. The semantics
// are equivalent to the SQL ANY expression above on the right: Any returns true
// if any of the values returned by the subquery are true, else returns NULL
// if any of the values are NULL, else returns false.
func (_f *Factory) ConstructAny(
	input memo.GroupID,
) memo.GroupID {
	_anyExpr := memo.MakeAnyExpr(input)
	_group := _f.mem.GroupByFingerprint(_anyExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_anyExpr)))
}

// ConstructVariable constructs an expression for the Variable operator.
// Variable is the typed scalar value of a column in the query. The private
// field is a Metadata.ColumnID that references the column by index.
func (_f *Factory) ConstructVariable(
	col memo.PrivateID,
) memo.GroupID {
	_variableExpr := memo.MakeVariableExpr(col)
	_group := _f.mem.GroupByFingerprint(_variableExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_variableExpr)))
}

// ConstructConst constructs an expression for the Const operator.
// Const is a typed scalar constant value. The private field is a tree.Datum
// value having any datum type that's legal in the expression's context.
func (_f *Factory) ConstructConst(
	value memo.PrivateID,
) memo.GroupID {
	_constExpr := memo.MakeConstExpr(value)
	_group := _f.mem.GroupByFingerprint(_constExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_constExpr)))
}

// ConstructNull constructs an expression for the Null operator.
// Null is the constant SQL null value that has "unknown value" semantics. If
// the Typ field is not types.Unknown, then the value is known to be in the
// domain of that type. This is important for preserving correct types in
// replacement patterns. For example:
//   (Plus (Function ...) (Const 1))
//
// If the function in that expression has a static type of Int, but then it gets
// constant folded to (Null), then its type must remain as Int. Any other type
// violates logical equivalence of the expression, breaking type inference and
// possibly changing the results of execution. The solution is to tag the null
// with the correct type:
//   (Plus (Null (Int)) (Const 1))
//
// Null is its own operator rather than a Const datum in order to make matching
// and replacement easier and more efficient, as patterns can contain (Null)
// expressions.
func (_f *Factory) ConstructNull(
	typ memo.PrivateID,
) memo.GroupID {
	_nullExpr := memo.MakeNullExpr(typ)
	_group := _f.mem.GroupByFingerprint(_nullExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_nullExpr)))
}

// ConstructTrue constructs an expression for the True operator.
// True is the boolean true value that is equivalent to the tree.DBoolTrue datum
// value. It is a separate operator to make matching and replacement simpler and
// more efficient, as patterns can contain (True) expressions.
func (_f *Factory) ConstructTrue() memo.GroupID {
	_trueExpr := memo.MakeTrueExpr()
	_group := _f.mem.GroupByFingerprint(_trueExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_trueExpr)))
}

// ConstructFalse constructs an expression for the False operator.
// False is the boolean false value that is equivalent to the tree.DBoolFalse
// datum value. It is a separate operator to make matching and replacement
// simpler and more efficient, as patterns can contain (False) expressions.
func (_f *Factory) ConstructFalse() memo.GroupID {
	_falseExpr := memo.MakeFalseExpr()
	_group := _f.mem.GroupByFingerprint(_falseExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_falseExpr)))
}

// ConstructPlaceholder constructs an expression for the Placeholder operator.
func (_f *Factory) ConstructPlaceholder(
	value memo.PrivateID,
) memo.GroupID {
	_placeholderExpr := memo.MakePlaceholderExpr(value)
	_group := _f.mem.GroupByFingerprint(_placeholderExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_placeholderExpr)))
}

// ConstructTuple constructs an expression for the Tuple operator.
func (_f *Factory) ConstructTuple(
	elems memo.ListID,
) memo.GroupID {
	_tupleExpr := memo.MakeTupleExpr(elems)
	_group := _f.mem.GroupByFingerprint(_tupleExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_tupleExpr)))
}

// ConstructProjections constructs an expression for the Projections operator.
// Projections is a set of typed scalar expressions that will become output
// columns for a containing Project operator. The private Cols field contains
// the list of column indexes returned by the expression, as an opt.ColList. It
// is not legal for Cols to be empty.
func (_f *Factory) ConstructProjections(
	elems memo.ListID,
	cols memo.PrivateID,
) memo.GroupID {
	_projectionsExpr := memo.MakeProjectionsExpr(elems, cols)
	_group := _f.mem.GroupByFingerprint(_projectionsExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_projectionsExpr)))
}

// ConstructAggregations constructs an expression for the Aggregations operator.
// Aggregations is a set of aggregate expressions that will become output
// columns for a containing GroupBy operator. The private Cols field contains
// the list of column indexes returned by the expression, as an opt.ColList. It
// is legal for Cols to be empty.
func (_f *Factory) ConstructAggregations(
	aggs memo.ListID,
	cols memo.PrivateID,
) memo.GroupID {
	_aggregationsExpr := memo.MakeAggregationsExpr(aggs, cols)
	_group := _f.mem.GroupByFingerprint(_aggregationsExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_aggregationsExpr)))
}

// ConstructExists constructs an expression for the Exists operator.
func (_f *Factory) ConstructExists(
	input memo.GroupID,
) memo.GroupID {
	_existsExpr := memo.MakeExistsExpr(input)
	_group := _f.mem.GroupByFingerprint(_existsExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_existsExpr)))
}

// ConstructFilters constructs an expression for the Filters operator.
// Filters is a boolean And operator that only appears as the Filters child of
// a Select operator, or the On child of a Join operator. For example:
//   (Select
//     (Scan a)
//     (Filters (Gt (Variable a) 1) (Lt (Variable a) 5))
//   )
//
// Normalization rules ensure that a Filters expression is always created if
// there is at least one condition, so that other rules can rely on its presence
// when matching, even in the case where there is only one condition. The
// semantics of the Filters operator are identical to those of the And operator.
func (_f *Factory) ConstructFilters(
	conditions memo.ListID,
) memo.GroupID {
	_filtersExpr := memo.MakeFiltersExpr(conditions)
	_group := _f.mem.GroupByFingerprint(_filtersExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EliminateEmptyAnd]
	{
		if conditions.Length == 0 {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EliminateEmptyAnd) {
				_group = _f.ConstructTrue()
				_f.mem.AddAltFingerprint(_filtersExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [SimplifyFilters]
	{
		for _, _item := range _f.mem.LookupList(conditions) {
			_expr := _f.mem.NormExpr(_item)
			if _expr.Operator() == opt.AndOp || _expr.Operator() == opt.TrueOp || _expr.Operator() == opt.FalseOp || _expr.Operator() == opt.NullOp {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.SimplifyFilters) {
					_group = _f.simplifyFilters(conditions)
					_f.mem.AddAltFingerprint(_filtersExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_filtersExpr)))
}

// ConstructAnd constructs an expression for the And operator.
// And is the boolean conjunction operator that evalutes to true if all of its
// conditions evaluate to true. If the conditions list is empty, it evalutes to
// true.
func (_f *Factory) ConstructAnd(
	conditions memo.ListID,
) memo.GroupID {
	_andExpr := memo.MakeAndExpr(conditions)
	_group := _f.mem.GroupByFingerprint(_andExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EliminateEmptyAnd]
	{
		if conditions.Length == 0 {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EliminateEmptyAnd) {
				_group = _f.ConstructTrue()
				_f.mem.AddAltFingerprint(_andExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EliminateSingletonAndOr]
	{
		if conditions.Length == 1 {
			_item := _f.mem.LookupList(conditions)[0]
			item := _item
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EliminateSingletonAndOr) {
				_group = item
				_f.mem.AddAltFingerprint(_andExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [SimplifyAnd]
	{
		for _, _item := range _f.mem.LookupList(conditions) {
			_expr := _f.mem.NormExpr(_item)
			if _expr.Operator() == opt.AndOp || _expr.Operator() == opt.TrueOp || _expr.Operator() == opt.FalseOp {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.SimplifyAnd) {
					_group = _f.simplifyAnd(conditions)
					_f.mem.AddAltFingerprint(_andExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullAndOr]
	{
		if conditions.Length > 0 {
			_item := _f.mem.LookupList(conditions)[0]
			_nullExpr := _f.mem.NormExpr(_item).AsNull()
			if _nullExpr != nil {
				if _f.listOnlyHasNulls(conditions) {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullAndOr) {
						_group = _f.ConstructNull(
							_f.boolType(),
						)
						_f.mem.AddAltFingerprint(_andExpr.Fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_andExpr)))
}

// ConstructOr constructs an expression for the Or operator.
// Or is the boolean disjunction operator that evalutes to true if any of its
// conditions evaluate to true. If the conditions list is empty, it evaluates to
// false.
func (_f *Factory) ConstructOr(
	conditions memo.ListID,
) memo.GroupID {
	_orExpr := memo.MakeOrExpr(conditions)
	_group := _f.mem.GroupByFingerprint(_orExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EliminateEmptyOr]
	{
		if conditions.Length == 0 {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EliminateEmptyOr) {
				_group = _f.ConstructFalse()
				_f.mem.AddAltFingerprint(_orExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [EliminateSingletonAndOr]
	{
		if conditions.Length == 1 {
			_item := _f.mem.LookupList(conditions)[0]
			item := _item
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EliminateSingletonAndOr) {
				_group = item
				_f.mem.AddAltFingerprint(_orExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [SimplifyOr]
	{
		for _, _item := range _f.mem.LookupList(conditions) {
			_expr := _f.mem.NormExpr(_item)
			if _expr.Operator() == opt.OrOp || _expr.Operator() == opt.TrueOp || _expr.Operator() == opt.FalseOp {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.SimplifyOr) {
					_group = _f.simplifyOr(conditions)
					_f.mem.AddAltFingerprint(_orExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullAndOr]
	{
		if conditions.Length > 0 {
			_item := _f.mem.LookupList(conditions)[0]
			_nullExpr := _f.mem.NormExpr(_item).AsNull()
			if _nullExpr != nil {
				if _f.listOnlyHasNulls(conditions) {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullAndOr) {
						_group = _f.ConstructNull(
							_f.boolType(),
						)
						_f.mem.AddAltFingerprint(_orExpr.Fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_orExpr)))
}

// ConstructNot constructs an expression for the Not operator.
// Not is the boolean negation operator that evaluates to true if its input
// evalutes to false.
func (_f *Factory) ConstructNot(
	input memo.GroupID,
) memo.GroupID {
	_notExpr := memo.MakeNotExpr(input)
	_group := _f.mem.GroupByFingerprint(_notExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [NegateComparison]
	{
		_expr := _f.mem.NormExpr(input)
		if _expr.IsComparison() {
			left := _expr.ChildGroup(_f.mem, 0)
			right := _expr.ChildGroup(_f.mem, 1)
			_expr2 := _f.mem.NormExpr(input)
			if !(_expr2.Operator() == opt.ContainsOp || _expr2.Operator() == opt.JsonExistsOp || _expr2.Operator() == opt.JsonSomeExistsOp || _expr2.Operator() == opt.JsonAllExistsOp) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NegateComparison) {
					_group = _f.negateComparison(_f.mem.NormExpr(input).Operator(), left, right)
					_f.mem.AddAltFingerprint(_notExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [EliminateNot]
	{
		_notExpr2 := _f.mem.NormExpr(input).AsNot()
		if _notExpr2 != nil {
			input := _notExpr2.Input()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EliminateNot) {
				_group = input
				_f.mem.AddAltFingerprint(_notExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [NegateAnd]
	{
		_andExpr := _f.mem.NormExpr(input).AsAnd()
		if _andExpr != nil {
			conditions := _andExpr.Conditions()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NegateAnd) {
				_group = _f.ConstructOr(
					_f.negateConditions(conditions),
				)
				_f.mem.AddAltFingerprint(_notExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [NegateOr]
	{
		_orExpr := _f.mem.NormExpr(input).AsOr()
		if _orExpr != nil {
			conditions := _orExpr.Conditions()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NegateOr) {
				_group = _f.ConstructAnd(
					_f.negateConditions(conditions),
				)
				_f.mem.AddAltFingerprint(_notExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_notExpr)))
}

// ConstructEq constructs an expression for the Eq operator.
func (_f *Factory) ConstructEq(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_eqExpr := memo.MakeEqExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_eqExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [NormalizeCmpPlusConst]
	{
		_plusExpr := _f.mem.NormExpr(left).AsPlus()
		if _plusExpr != nil {
			leftLeft := _plusExpr.Left()
			if !_f.onlyConstants(leftLeft) {
				leftRight := _plusExpr.Right()
				if _f.onlyConstants(leftRight) {
					if _f.onlyConstants(right) {
						if _f.canConstructBinary(opt.MinusOp, right, leftRight) {
							if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeCmpPlusConst) {
								_group = _f.ConstructEq(
									leftLeft,
									_f.ConstructMinus(
										right,
										leftRight,
									),
								)
								_f.mem.AddAltFingerprint(_eqExpr.Fingerprint(), _group)
								return _group
							}
						}
					}
				}
			}
		}
	}

	// [NormalizeCmpMinusConst]
	{
		_minusExpr := _f.mem.NormExpr(left).AsMinus()
		if _minusExpr != nil {
			leftLeft := _minusExpr.Left()
			if !_f.onlyConstants(leftLeft) {
				leftRight := _minusExpr.Right()
				if _f.onlyConstants(leftRight) {
					if _f.onlyConstants(right) {
						if _f.canConstructBinary(opt.PlusOp, right, leftRight) {
							if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeCmpMinusConst) {
								_group = _f.ConstructEq(
									leftLeft,
									_f.ConstructPlus(
										right,
										leftRight,
									),
								)
								_f.mem.AddAltFingerprint(_eqExpr.Fingerprint(), _group)
								return _group
							}
						}
					}
				}
			}
		}
	}

	// [NormalizeCmpConstMinus]
	{
		_minusExpr := _f.mem.NormExpr(left).AsMinus()
		if _minusExpr != nil {
			leftLeft := _minusExpr.Left()
			if _f.onlyConstants(leftLeft) {
				leftRight := _minusExpr.Right()
				if !_f.onlyConstants(leftRight) {
					if _f.onlyConstants(right) {
						if _f.canConstructBinary(opt.MinusOp, leftLeft, right) {
							if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeCmpConstMinus) {
								_group = _f.ConstructEq(
									_f.ConstructMinus(
										leftLeft,
										right,
									),
									leftRight,
								)
								_f.mem.AddAltFingerprint(_eqExpr.Fingerprint(), _group)
								return _group
							}
						}
					}
				}
			}
		}
	}

	// [NormalizeTupleEquality]
	{
		_tupleExpr := _f.mem.NormExpr(left).AsTuple()
		if _tupleExpr != nil {
			left := _tupleExpr.Elems()
			_tupleExpr2 := _f.mem.NormExpr(right).AsTuple()
			if _tupleExpr2 != nil {
				right := _tupleExpr2.Elems()
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeTupleEquality) {
					_group = _f.normalizeTupleEquality(left, right)
					_f.mem.AddAltFingerprint(_eqExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_eqExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_eqExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [CommuteVar]
	{
		_variableExpr := _f.mem.NormExpr(left).AsVariable()
		if _variableExpr == nil {
			_variableExpr2 := _f.mem.NormExpr(right).AsVariable()
			if _variableExpr2 != nil {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteVar) {
					_group = _f.ConstructEq(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_eqExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [CommuteConst]
	{
		if _f.onlyConstants(left) {
			if !_f.onlyConstants(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteConst) {
					_group = _f.ConstructEq(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_eqExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_eqExpr)))
}

// ConstructLt constructs an expression for the Lt operator.
func (_f *Factory) ConstructLt(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_ltExpr := memo.MakeLtExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_ltExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [CommuteVarInequality]
	{
		_variableExpr := _f.mem.NormExpr(left).AsVariable()
		if _variableExpr == nil {
			_variableExpr2 := _f.mem.NormExpr(right).AsVariable()
			if _variableExpr2 != nil {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteVarInequality) {
					_group = _f.commuteInequality(opt.LtOp, left, right)
					_f.mem.AddAltFingerprint(_ltExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [CommuteConstInequality]
	{
		if _f.onlyConstants(left) {
			if !_f.onlyConstants(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteConstInequality) {
					_group = _f.commuteInequality(opt.LtOp, left, right)
					_f.mem.AddAltFingerprint(_ltExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [NormalizeCmpPlusConst]
	{
		_plusExpr := _f.mem.NormExpr(left).AsPlus()
		if _plusExpr != nil {
			leftLeft := _plusExpr.Left()
			if !_f.onlyConstants(leftLeft) {
				leftRight := _plusExpr.Right()
				if _f.onlyConstants(leftRight) {
					if _f.onlyConstants(right) {
						if _f.canConstructBinary(opt.MinusOp, right, leftRight) {
							if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeCmpPlusConst) {
								_group = _f.ConstructLt(
									leftLeft,
									_f.ConstructMinus(
										right,
										leftRight,
									),
								)
								_f.mem.AddAltFingerprint(_ltExpr.Fingerprint(), _group)
								return _group
							}
						}
					}
				}
			}
		}
	}

	// [NormalizeCmpMinusConst]
	{
		_minusExpr := _f.mem.NormExpr(left).AsMinus()
		if _minusExpr != nil {
			leftLeft := _minusExpr.Left()
			if !_f.onlyConstants(leftLeft) {
				leftRight := _minusExpr.Right()
				if _f.onlyConstants(leftRight) {
					if _f.onlyConstants(right) {
						if _f.canConstructBinary(opt.PlusOp, right, leftRight) {
							if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeCmpMinusConst) {
								_group = _f.ConstructLt(
									leftLeft,
									_f.ConstructPlus(
										right,
										leftRight,
									),
								)
								_f.mem.AddAltFingerprint(_ltExpr.Fingerprint(), _group)
								return _group
							}
						}
					}
				}
			}
		}
	}

	// [NormalizeCmpConstMinus]
	{
		_minusExpr := _f.mem.NormExpr(left).AsMinus()
		if _minusExpr != nil {
			leftLeft := _minusExpr.Left()
			if _f.onlyConstants(leftLeft) {
				leftRight := _minusExpr.Right()
				if !_f.onlyConstants(leftRight) {
					if _f.onlyConstants(right) {
						if _f.canConstructBinary(opt.MinusOp, leftLeft, right) {
							if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeCmpConstMinus) {
								_group = _f.ConstructLt(
									_f.ConstructMinus(
										leftLeft,
										right,
									),
									leftRight,
								)
								_f.mem.AddAltFingerprint(_ltExpr.Fingerprint(), _group)
								return _group
							}
						}
					}
				}
			}
		}
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_ltExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_ltExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_ltExpr)))
}

// ConstructGt constructs an expression for the Gt operator.
func (_f *Factory) ConstructGt(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_gtExpr := memo.MakeGtExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_gtExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [CommuteVarInequality]
	{
		_variableExpr := _f.mem.NormExpr(left).AsVariable()
		if _variableExpr == nil {
			_variableExpr2 := _f.mem.NormExpr(right).AsVariable()
			if _variableExpr2 != nil {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteVarInequality) {
					_group = _f.commuteInequality(opt.GtOp, left, right)
					_f.mem.AddAltFingerprint(_gtExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [CommuteConstInequality]
	{
		if _f.onlyConstants(left) {
			if !_f.onlyConstants(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteConstInequality) {
					_group = _f.commuteInequality(opt.GtOp, left, right)
					_f.mem.AddAltFingerprint(_gtExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [NormalizeCmpPlusConst]
	{
		_plusExpr := _f.mem.NormExpr(left).AsPlus()
		if _plusExpr != nil {
			leftLeft := _plusExpr.Left()
			if !_f.onlyConstants(leftLeft) {
				leftRight := _plusExpr.Right()
				if _f.onlyConstants(leftRight) {
					if _f.onlyConstants(right) {
						if _f.canConstructBinary(opt.MinusOp, right, leftRight) {
							if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeCmpPlusConst) {
								_group = _f.ConstructGt(
									leftLeft,
									_f.ConstructMinus(
										right,
										leftRight,
									),
								)
								_f.mem.AddAltFingerprint(_gtExpr.Fingerprint(), _group)
								return _group
							}
						}
					}
				}
			}
		}
	}

	// [NormalizeCmpMinusConst]
	{
		_minusExpr := _f.mem.NormExpr(left).AsMinus()
		if _minusExpr != nil {
			leftLeft := _minusExpr.Left()
			if !_f.onlyConstants(leftLeft) {
				leftRight := _minusExpr.Right()
				if _f.onlyConstants(leftRight) {
					if _f.onlyConstants(right) {
						if _f.canConstructBinary(opt.PlusOp, right, leftRight) {
							if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeCmpMinusConst) {
								_group = _f.ConstructGt(
									leftLeft,
									_f.ConstructPlus(
										right,
										leftRight,
									),
								)
								_f.mem.AddAltFingerprint(_gtExpr.Fingerprint(), _group)
								return _group
							}
						}
					}
				}
			}
		}
	}

	// [NormalizeCmpConstMinus]
	{
		_minusExpr := _f.mem.NormExpr(left).AsMinus()
		if _minusExpr != nil {
			leftLeft := _minusExpr.Left()
			if _f.onlyConstants(leftLeft) {
				leftRight := _minusExpr.Right()
				if !_f.onlyConstants(leftRight) {
					if _f.onlyConstants(right) {
						if _f.canConstructBinary(opt.MinusOp, leftLeft, right) {
							if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeCmpConstMinus) {
								_group = _f.ConstructGt(
									_f.ConstructMinus(
										leftLeft,
										right,
									),
									leftRight,
								)
								_f.mem.AddAltFingerprint(_gtExpr.Fingerprint(), _group)
								return _group
							}
						}
					}
				}
			}
		}
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_gtExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_gtExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_gtExpr)))
}

// ConstructLe constructs an expression for the Le operator.
func (_f *Factory) ConstructLe(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_leExpr := memo.MakeLeExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_leExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [CommuteVarInequality]
	{
		_variableExpr := _f.mem.NormExpr(left).AsVariable()
		if _variableExpr == nil {
			_variableExpr2 := _f.mem.NormExpr(right).AsVariable()
			if _variableExpr2 != nil {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteVarInequality) {
					_group = _f.commuteInequality(opt.LeOp, left, right)
					_f.mem.AddAltFingerprint(_leExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [CommuteConstInequality]
	{
		if _f.onlyConstants(left) {
			if !_f.onlyConstants(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteConstInequality) {
					_group = _f.commuteInequality(opt.LeOp, left, right)
					_f.mem.AddAltFingerprint(_leExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [NormalizeCmpPlusConst]
	{
		_plusExpr := _f.mem.NormExpr(left).AsPlus()
		if _plusExpr != nil {
			leftLeft := _plusExpr.Left()
			if !_f.onlyConstants(leftLeft) {
				leftRight := _plusExpr.Right()
				if _f.onlyConstants(leftRight) {
					if _f.onlyConstants(right) {
						if _f.canConstructBinary(opt.MinusOp, right, leftRight) {
							if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeCmpPlusConst) {
								_group = _f.ConstructLe(
									leftLeft,
									_f.ConstructMinus(
										right,
										leftRight,
									),
								)
								_f.mem.AddAltFingerprint(_leExpr.Fingerprint(), _group)
								return _group
							}
						}
					}
				}
			}
		}
	}

	// [NormalizeCmpMinusConst]
	{
		_minusExpr := _f.mem.NormExpr(left).AsMinus()
		if _minusExpr != nil {
			leftLeft := _minusExpr.Left()
			if !_f.onlyConstants(leftLeft) {
				leftRight := _minusExpr.Right()
				if _f.onlyConstants(leftRight) {
					if _f.onlyConstants(right) {
						if _f.canConstructBinary(opt.PlusOp, right, leftRight) {
							if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeCmpMinusConst) {
								_group = _f.ConstructLe(
									leftLeft,
									_f.ConstructPlus(
										right,
										leftRight,
									),
								)
								_f.mem.AddAltFingerprint(_leExpr.Fingerprint(), _group)
								return _group
							}
						}
					}
				}
			}
		}
	}

	// [NormalizeCmpConstMinus]
	{
		_minusExpr := _f.mem.NormExpr(left).AsMinus()
		if _minusExpr != nil {
			leftLeft := _minusExpr.Left()
			if _f.onlyConstants(leftLeft) {
				leftRight := _minusExpr.Right()
				if !_f.onlyConstants(leftRight) {
					if _f.onlyConstants(right) {
						if _f.canConstructBinary(opt.MinusOp, leftLeft, right) {
							if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeCmpConstMinus) {
								_group = _f.ConstructLe(
									_f.ConstructMinus(
										leftLeft,
										right,
									),
									leftRight,
								)
								_f.mem.AddAltFingerprint(_leExpr.Fingerprint(), _group)
								return _group
							}
						}
					}
				}
			}
		}
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_leExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_leExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_leExpr)))
}

// ConstructGe constructs an expression for the Ge operator.
func (_f *Factory) ConstructGe(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_geExpr := memo.MakeGeExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_geExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [CommuteVarInequality]
	{
		_variableExpr := _f.mem.NormExpr(left).AsVariable()
		if _variableExpr == nil {
			_variableExpr2 := _f.mem.NormExpr(right).AsVariable()
			if _variableExpr2 != nil {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteVarInequality) {
					_group = _f.commuteInequality(opt.GeOp, left, right)
					_f.mem.AddAltFingerprint(_geExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [CommuteConstInequality]
	{
		if _f.onlyConstants(left) {
			if !_f.onlyConstants(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteConstInequality) {
					_group = _f.commuteInequality(opt.GeOp, left, right)
					_f.mem.AddAltFingerprint(_geExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [NormalizeCmpPlusConst]
	{
		_plusExpr := _f.mem.NormExpr(left).AsPlus()
		if _plusExpr != nil {
			leftLeft := _plusExpr.Left()
			if !_f.onlyConstants(leftLeft) {
				leftRight := _plusExpr.Right()
				if _f.onlyConstants(leftRight) {
					if _f.onlyConstants(right) {
						if _f.canConstructBinary(opt.MinusOp, right, leftRight) {
							if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeCmpPlusConst) {
								_group = _f.ConstructGe(
									leftLeft,
									_f.ConstructMinus(
										right,
										leftRight,
									),
								)
								_f.mem.AddAltFingerprint(_geExpr.Fingerprint(), _group)
								return _group
							}
						}
					}
				}
			}
		}
	}

	// [NormalizeCmpMinusConst]
	{
		_minusExpr := _f.mem.NormExpr(left).AsMinus()
		if _minusExpr != nil {
			leftLeft := _minusExpr.Left()
			if !_f.onlyConstants(leftLeft) {
				leftRight := _minusExpr.Right()
				if _f.onlyConstants(leftRight) {
					if _f.onlyConstants(right) {
						if _f.canConstructBinary(opt.PlusOp, right, leftRight) {
							if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeCmpMinusConst) {
								_group = _f.ConstructGe(
									leftLeft,
									_f.ConstructPlus(
										right,
										leftRight,
									),
								)
								_f.mem.AddAltFingerprint(_geExpr.Fingerprint(), _group)
								return _group
							}
						}
					}
				}
			}
		}
	}

	// [NormalizeCmpConstMinus]
	{
		_minusExpr := _f.mem.NormExpr(left).AsMinus()
		if _minusExpr != nil {
			leftLeft := _minusExpr.Left()
			if _f.onlyConstants(leftLeft) {
				leftRight := _minusExpr.Right()
				if !_f.onlyConstants(leftRight) {
					if _f.onlyConstants(right) {
						if _f.canConstructBinary(opt.MinusOp, leftLeft, right) {
							if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeCmpConstMinus) {
								_group = _f.ConstructGe(
									_f.ConstructMinus(
										leftLeft,
										right,
									),
									leftRight,
								)
								_f.mem.AddAltFingerprint(_geExpr.Fingerprint(), _group)
								return _group
							}
						}
					}
				}
			}
		}
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_geExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_geExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_geExpr)))
}

// ConstructNe constructs an expression for the Ne operator.
func (_f *Factory) ConstructNe(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_neExpr := memo.MakeNeExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_neExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_neExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_neExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [CommuteVar]
	{
		_variableExpr := _f.mem.NormExpr(left).AsVariable()
		if _variableExpr == nil {
			_variableExpr2 := _f.mem.NormExpr(right).AsVariable()
			if _variableExpr2 != nil {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteVar) {
					_group = _f.ConstructNe(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_neExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [CommuteConst]
	{
		if _f.onlyConstants(left) {
			if !_f.onlyConstants(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteConst) {
					_group = _f.ConstructNe(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_neExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_neExpr)))
}

// ConstructIn constructs an expression for the In operator.
func (_f *Factory) ConstructIn(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_inExpr := memo.MakeInExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_inExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullInNonEmpty]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			_tupleExpr := _f.mem.NormExpr(right).AsTuple()
			if _tupleExpr != nil {
				if _tupleExpr.Elems().Length != 0 {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullInNonEmpty) {
						_group = _f.ConstructNull(
							_f.boolType(),
						)
						_f.mem.AddAltFingerprint(_inExpr.Fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	// [FoldNullInEmpty]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			_tupleExpr := _f.mem.NormExpr(right).AsTuple()
			if _tupleExpr != nil {
				if _tupleExpr.Elems().Length == 0 {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullInEmpty) {
						_group = _f.ConstructFalse()
						_f.mem.AddAltFingerprint(_inExpr.Fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	// [NormalizeInConst]
	{
		_tupleExpr := _f.mem.NormExpr(right).AsTuple()
		if _tupleExpr != nil {
			elems := _tupleExpr.Elems()
			if !_f.isSortedUniqueList(elems) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeInConst) {
					_group = _f.ConstructIn(
						left,
						_f.ConstructTuple(
							_f.constructSortedUniqueList(elems),
						),
					)
					_f.mem.AddAltFingerprint(_inExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldInNull]
	{
		_tupleExpr := _f.mem.NormExpr(right).AsTuple()
		if _tupleExpr != nil {
			if _tupleExpr.Elems().Length == 1 {
				_item := _f.mem.LookupList(_tupleExpr.Elems())[0]
				_nullExpr := _f.mem.NormExpr(_item).AsNull()
				if _nullExpr != nil {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldInNull) {
						_group = _f.ConstructNull(
							_f.boolType(),
						)
						_f.mem.AddAltFingerprint(_inExpr.Fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_inExpr)))
}

// ConstructNotIn constructs an expression for the NotIn operator.
func (_f *Factory) ConstructNotIn(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_notInExpr := memo.MakeNotInExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_notInExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullInNonEmpty]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			_tupleExpr := _f.mem.NormExpr(right).AsTuple()
			if _tupleExpr != nil {
				if _tupleExpr.Elems().Length != 0 {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullInNonEmpty) {
						_group = _f.ConstructNull(
							_f.boolType(),
						)
						_f.mem.AddAltFingerprint(_notInExpr.Fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	// [FoldNullNotInEmpty]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			_tupleExpr := _f.mem.NormExpr(right).AsTuple()
			if _tupleExpr != nil {
				if _tupleExpr.Elems().Length == 0 {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullNotInEmpty) {
						_group = _f.ConstructTrue()
						_f.mem.AddAltFingerprint(_notInExpr.Fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	// [NormalizeInConst]
	{
		_tupleExpr := _f.mem.NormExpr(right).AsTuple()
		if _tupleExpr != nil {
			elems := _tupleExpr.Elems()
			if !_f.isSortedUniqueList(elems) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.NormalizeInConst) {
					_group = _f.ConstructNotIn(
						left,
						_f.ConstructTuple(
							_f.constructSortedUniqueList(elems),
						),
					)
					_f.mem.AddAltFingerprint(_notInExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldInNull]
	{
		_tupleExpr := _f.mem.NormExpr(right).AsTuple()
		if _tupleExpr != nil {
			if _tupleExpr.Elems().Length == 1 {
				_item := _f.mem.LookupList(_tupleExpr.Elems())[0]
				_nullExpr := _f.mem.NormExpr(_item).AsNull()
				if _nullExpr != nil {
					if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldInNull) {
						_group = _f.ConstructNull(
							_f.boolType(),
						)
						_f.mem.AddAltFingerprint(_notInExpr.Fingerprint(), _group)
						return _group
					}
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_notInExpr)))
}

// ConstructLike constructs an expression for the Like operator.
func (_f *Factory) ConstructLike(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_likeExpr := memo.MakeLikeExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_likeExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_likeExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_likeExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_likeExpr)))
}

// ConstructNotLike constructs an expression for the NotLike operator.
func (_f *Factory) ConstructNotLike(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_notLikeExpr := memo.MakeNotLikeExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_notLikeExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_notLikeExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_notLikeExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_notLikeExpr)))
}

// ConstructILike constructs an expression for the ILike operator.
func (_f *Factory) ConstructILike(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_iLikeExpr := memo.MakeILikeExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_iLikeExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_iLikeExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_iLikeExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_iLikeExpr)))
}

// ConstructNotILike constructs an expression for the NotILike operator.
func (_f *Factory) ConstructNotILike(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_notILikeExpr := memo.MakeNotILikeExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_notILikeExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_notILikeExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_notILikeExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_notILikeExpr)))
}

// ConstructSimilarTo constructs an expression for the SimilarTo operator.
func (_f *Factory) ConstructSimilarTo(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_similarToExpr := memo.MakeSimilarToExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_similarToExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_similarToExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_similarToExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_similarToExpr)))
}

// ConstructNotSimilarTo constructs an expression for the NotSimilarTo operator.
func (_f *Factory) ConstructNotSimilarTo(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_notSimilarToExpr := memo.MakeNotSimilarToExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_notSimilarToExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_notSimilarToExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_notSimilarToExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_notSimilarToExpr)))
}

// ConstructRegMatch constructs an expression for the RegMatch operator.
func (_f *Factory) ConstructRegMatch(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_regMatchExpr := memo.MakeRegMatchExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_regMatchExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_regMatchExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_regMatchExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_regMatchExpr)))
}

// ConstructNotRegMatch constructs an expression for the NotRegMatch operator.
func (_f *Factory) ConstructNotRegMatch(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_notRegMatchExpr := memo.MakeNotRegMatchExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_notRegMatchExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_notRegMatchExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_notRegMatchExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_notRegMatchExpr)))
}

// ConstructRegIMatch constructs an expression for the RegIMatch operator.
func (_f *Factory) ConstructRegIMatch(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_regIMatchExpr := memo.MakeRegIMatchExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_regIMatchExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_regIMatchExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_regIMatchExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_regIMatchExpr)))
}

// ConstructNotRegIMatch constructs an expression for the NotRegIMatch operator.
func (_f *Factory) ConstructNotRegIMatch(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_notRegIMatchExpr := memo.MakeNotRegIMatchExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_notRegIMatchExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_notRegIMatchExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_notRegIMatchExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_notRegIMatchExpr)))
}

// ConstructIs constructs an expression for the Is operator.
func (_f *Factory) ConstructIs(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_isExpr := memo.MakeIsExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_isExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [CommuteVar]
	{
		_variableExpr := _f.mem.NormExpr(left).AsVariable()
		if _variableExpr == nil {
			_variableExpr2 := _f.mem.NormExpr(right).AsVariable()
			if _variableExpr2 != nil {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteVar) {
					_group = _f.ConstructIs(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_isExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [CommuteConst]
	{
		if _f.onlyConstants(left) {
			if !_f.onlyConstants(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteConst) {
					_group = _f.ConstructIs(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_isExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_isExpr)))
}

// ConstructIsNot constructs an expression for the IsNot operator.
func (_f *Factory) ConstructIsNot(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_isNotExpr := memo.MakeIsNotExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_isNotExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [CommuteVar]
	{
		_variableExpr := _f.mem.NormExpr(left).AsVariable()
		if _variableExpr == nil {
			_variableExpr2 := _f.mem.NormExpr(right).AsVariable()
			if _variableExpr2 != nil {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteVar) {
					_group = _f.ConstructIsNot(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_isNotExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [CommuteConst]
	{
		if _f.onlyConstants(left) {
			if !_f.onlyConstants(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteConst) {
					_group = _f.ConstructIsNot(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_isNotExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_isNotExpr)))
}

// ConstructContains constructs an expression for the Contains operator.
func (_f *Factory) ConstructContains(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_containsExpr := memo.MakeContainsExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_containsExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_containsExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_containsExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_containsExpr)))
}

// ConstructJsonExists constructs an expression for the JsonExists operator.
func (_f *Factory) ConstructJsonExists(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_jsonExistsExpr := memo.MakeJsonExistsExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_jsonExistsExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_jsonExistsExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_jsonExistsExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_jsonExistsExpr)))
}

// ConstructJsonAllExists constructs an expression for the JsonAllExists operator.
func (_f *Factory) ConstructJsonAllExists(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_jsonAllExistsExpr := memo.MakeJsonAllExistsExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_jsonAllExistsExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_jsonAllExistsExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_jsonAllExistsExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_jsonAllExistsExpr)))
}

// ConstructJsonSomeExists constructs an expression for the JsonSomeExists operator.
func (_f *Factory) ConstructJsonSomeExists(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_jsonSomeExistsExpr := memo.MakeJsonSomeExistsExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_jsonSomeExistsExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullComparisonLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonLeft) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_jsonSomeExistsExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullComparisonRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullComparisonRight) {
				_group = _f.ConstructNull(
					_f.boolType(),
				)
				_f.mem.AddAltFingerprint(_jsonSomeExistsExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_jsonSomeExistsExpr)))
}

// ConstructBitand constructs an expression for the Bitand operator.
func (_f *Factory) ConstructBitand(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_bitandExpr := memo.MakeBitandExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_bitandExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [CommuteVar]
	{
		_variableExpr := _f.mem.NormExpr(left).AsVariable()
		if _variableExpr == nil {
			_variableExpr2 := _f.mem.NormExpr(right).AsVariable()
			if _variableExpr2 != nil {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteVar) {
					_group = _f.ConstructBitand(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_bitandExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [CommuteConst]
	{
		if _f.onlyConstants(left) {
			if !_f.onlyConstants(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteConst) {
					_group = _f.ConstructBitand(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_bitandExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.BitandOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.BitandOp, left, right)
					_f.mem.AddAltFingerprint(_bitandExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.BitandOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.BitandOp, left, right)
					_f.mem.AddAltFingerprint(_bitandExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_bitandExpr)))
}

// ConstructBitor constructs an expression for the Bitor operator.
func (_f *Factory) ConstructBitor(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_bitorExpr := memo.MakeBitorExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_bitorExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [CommuteVar]
	{
		_variableExpr := _f.mem.NormExpr(left).AsVariable()
		if _variableExpr == nil {
			_variableExpr2 := _f.mem.NormExpr(right).AsVariable()
			if _variableExpr2 != nil {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteVar) {
					_group = _f.ConstructBitor(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_bitorExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [CommuteConst]
	{
		if _f.onlyConstants(left) {
			if !_f.onlyConstants(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteConst) {
					_group = _f.ConstructBitor(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_bitorExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.BitorOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.BitorOp, left, right)
					_f.mem.AddAltFingerprint(_bitorExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.BitorOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.BitorOp, left, right)
					_f.mem.AddAltFingerprint(_bitorExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_bitorExpr)))
}

// ConstructBitxor constructs an expression for the Bitxor operator.
func (_f *Factory) ConstructBitxor(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_bitxorExpr := memo.MakeBitxorExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_bitxorExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [CommuteVar]
	{
		_variableExpr := _f.mem.NormExpr(left).AsVariable()
		if _variableExpr == nil {
			_variableExpr2 := _f.mem.NormExpr(right).AsVariable()
			if _variableExpr2 != nil {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteVar) {
					_group = _f.ConstructBitxor(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_bitxorExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [CommuteConst]
	{
		if _f.onlyConstants(left) {
			if !_f.onlyConstants(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteConst) {
					_group = _f.ConstructBitxor(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_bitxorExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.BitxorOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.BitxorOp, left, right)
					_f.mem.AddAltFingerprint(_bitxorExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.BitxorOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.BitxorOp, left, right)
					_f.mem.AddAltFingerprint(_bitxorExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_bitxorExpr)))
}

// ConstructPlus constructs an expression for the Plus operator.
func (_f *Factory) ConstructPlus(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_plusExpr := memo.MakePlusExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_plusExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldPlusZero]
	{
		_constExpr := _f.mem.NormExpr(right).AsConst()
		if _constExpr != nil {
			if _f.isZero(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldPlusZero) {
					_group = left
					_f.mem.AddAltFingerprint(_plusExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldZeroPlus]
	{
		_constExpr := _f.mem.NormExpr(left).AsConst()
		if _constExpr != nil {
			if _f.isZero(left) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldZeroPlus) {
					_group = right
					_f.mem.AddAltFingerprint(_plusExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [CommuteVar]
	{
		_variableExpr := _f.mem.NormExpr(left).AsVariable()
		if _variableExpr == nil {
			_variableExpr2 := _f.mem.NormExpr(right).AsVariable()
			if _variableExpr2 != nil {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteVar) {
					_group = _f.ConstructPlus(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_plusExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [CommuteConst]
	{
		if _f.onlyConstants(left) {
			if !_f.onlyConstants(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteConst) {
					_group = _f.ConstructPlus(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_plusExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.PlusOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.PlusOp, left, right)
					_f.mem.AddAltFingerprint(_plusExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.PlusOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.PlusOp, left, right)
					_f.mem.AddAltFingerprint(_plusExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_plusExpr)))
}

// ConstructMinus constructs an expression for the Minus operator.
func (_f *Factory) ConstructMinus(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_minusExpr := memo.MakeMinusExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_minusExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldMinusZero]
	{
		_constExpr := _f.mem.NormExpr(right).AsConst()
		if _constExpr != nil {
			if _f.isZero(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldMinusZero) {
					_group = left
					_f.mem.AddAltFingerprint(_minusExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.MinusOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.MinusOp, left, right)
					_f.mem.AddAltFingerprint(_minusExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.MinusOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.MinusOp, left, right)
					_f.mem.AddAltFingerprint(_minusExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_minusExpr)))
}

// ConstructMult constructs an expression for the Mult operator.
func (_f *Factory) ConstructMult(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_multExpr := memo.MakeMultExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_multExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldMultOne]
	{
		_constExpr := _f.mem.NormExpr(right).AsConst()
		if _constExpr != nil {
			if _f.isOne(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldMultOne) {
					_group = left
					_f.mem.AddAltFingerprint(_multExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldOneMult]
	{
		_constExpr := _f.mem.NormExpr(left).AsConst()
		if _constExpr != nil {
			if _f.isOne(left) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldOneMult) {
					_group = right
					_f.mem.AddAltFingerprint(_multExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [CommuteVar]
	{
		_variableExpr := _f.mem.NormExpr(left).AsVariable()
		if _variableExpr == nil {
			_variableExpr2 := _f.mem.NormExpr(right).AsVariable()
			if _variableExpr2 != nil {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteVar) {
					_group = _f.ConstructMult(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_multExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [CommuteConst]
	{
		if _f.onlyConstants(left) {
			if !_f.onlyConstants(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.CommuteConst) {
					_group = _f.ConstructMult(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_multExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.MultOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.MultOp, left, right)
					_f.mem.AddAltFingerprint(_multExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.MultOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.MultOp, left, right)
					_f.mem.AddAltFingerprint(_multExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_multExpr)))
}

// ConstructDiv constructs an expression for the Div operator.
func (_f *Factory) ConstructDiv(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_divExpr := memo.MakeDivExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_divExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldDivOne]
	{
		_constExpr := _f.mem.NormExpr(right).AsConst()
		if _constExpr != nil {
			if _f.isOne(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldDivOne) {
					_group = left
					_f.mem.AddAltFingerprint(_divExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.DivOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.DivOp, left, right)
					_f.mem.AddAltFingerprint(_divExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.DivOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.DivOp, left, right)
					_f.mem.AddAltFingerprint(_divExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_divExpr)))
}

// ConstructFloorDiv constructs an expression for the FloorDiv operator.
func (_f *Factory) ConstructFloorDiv(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_floorDivExpr := memo.MakeFloorDivExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_floorDivExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldDivOne]
	{
		_constExpr := _f.mem.NormExpr(right).AsConst()
		if _constExpr != nil {
			if _f.isOne(right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldDivOne) {
					_group = left
					_f.mem.AddAltFingerprint(_floorDivExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.FloorDivOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.FloorDivOp, left, right)
					_f.mem.AddAltFingerprint(_floorDivExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.FloorDivOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.FloorDivOp, left, right)
					_f.mem.AddAltFingerprint(_floorDivExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_floorDivExpr)))
}

// ConstructMod constructs an expression for the Mod operator.
func (_f *Factory) ConstructMod(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_modExpr := memo.MakeModExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_modExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullBinaryLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.ModOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.ModOp, left, right)
					_f.mem.AddAltFingerprint(_modExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.ModOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.ModOp, left, right)
					_f.mem.AddAltFingerprint(_modExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_modExpr)))
}

// ConstructPow constructs an expression for the Pow operator.
func (_f *Factory) ConstructPow(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_powExpr := memo.MakePowExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_powExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullBinaryLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.PowOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.PowOp, left, right)
					_f.mem.AddAltFingerprint(_powExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.PowOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.PowOp, left, right)
					_f.mem.AddAltFingerprint(_powExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_powExpr)))
}

// ConstructConcat constructs an expression for the Concat operator.
func (_f *Factory) ConstructConcat(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_concatExpr := memo.MakeConcatExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_concatExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullBinaryLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.ConcatOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.ConcatOp, left, right)
					_f.mem.AddAltFingerprint(_concatExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.ConcatOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.ConcatOp, left, right)
					_f.mem.AddAltFingerprint(_concatExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_concatExpr)))
}

// ConstructLShift constructs an expression for the LShift operator.
func (_f *Factory) ConstructLShift(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_lShiftExpr := memo.MakeLShiftExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_lShiftExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullBinaryLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.LShiftOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.LShiftOp, left, right)
					_f.mem.AddAltFingerprint(_lShiftExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.LShiftOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.LShiftOp, left, right)
					_f.mem.AddAltFingerprint(_lShiftExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_lShiftExpr)))
}

// ConstructRShift constructs an expression for the RShift operator.
func (_f *Factory) ConstructRShift(
	left memo.GroupID,
	right memo.GroupID,
) memo.GroupID {
	_rShiftExpr := memo.MakeRShiftExpr(left, right)
	_group := _f.mem.GroupByFingerprint(_rShiftExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullBinaryLeft]
	{
		_nullExpr := _f.mem.NormExpr(left).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.RShiftOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.RShiftOp, left, right)
					_f.mem.AddAltFingerprint(_rShiftExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		_nullExpr := _f.mem.NormExpr(right).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.RShiftOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.RShiftOp, left, right)
					_f.mem.AddAltFingerprint(_rShiftExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_rShiftExpr)))
}

// ConstructFetchVal constructs an expression for the FetchVal operator.
func (_f *Factory) ConstructFetchVal(
	json memo.GroupID,
	index memo.GroupID,
) memo.GroupID {
	_fetchValExpr := memo.MakeFetchValExpr(json, index)
	_group := _f.mem.GroupByFingerprint(_fetchValExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullBinaryLeft]
	{
		left := json
		_nullExpr := _f.mem.NormExpr(json).AsNull()
		if _nullExpr != nil {
			right := index
			if !_f.allowNullArgs(opt.FetchValOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.FetchValOp, left, right)
					_f.mem.AddAltFingerprint(_fetchValExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		left := json
		right := index
		_nullExpr := _f.mem.NormExpr(index).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.FetchValOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.FetchValOp, left, right)
					_f.mem.AddAltFingerprint(_fetchValExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_fetchValExpr)))
}

// ConstructFetchText constructs an expression for the FetchText operator.
func (_f *Factory) ConstructFetchText(
	json memo.GroupID,
	index memo.GroupID,
) memo.GroupID {
	_fetchTextExpr := memo.MakeFetchTextExpr(json, index)
	_group := _f.mem.GroupByFingerprint(_fetchTextExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullBinaryLeft]
	{
		left := json
		_nullExpr := _f.mem.NormExpr(json).AsNull()
		if _nullExpr != nil {
			right := index
			if !_f.allowNullArgs(opt.FetchTextOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.FetchTextOp, left, right)
					_f.mem.AddAltFingerprint(_fetchTextExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		left := json
		right := index
		_nullExpr := _f.mem.NormExpr(index).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.FetchTextOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.FetchTextOp, left, right)
					_f.mem.AddAltFingerprint(_fetchTextExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_fetchTextExpr)))
}

// ConstructFetchValPath constructs an expression for the FetchValPath operator.
func (_f *Factory) ConstructFetchValPath(
	json memo.GroupID,
	path memo.GroupID,
) memo.GroupID {
	_fetchValPathExpr := memo.MakeFetchValPathExpr(json, path)
	_group := _f.mem.GroupByFingerprint(_fetchValPathExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullBinaryLeft]
	{
		left := json
		_nullExpr := _f.mem.NormExpr(json).AsNull()
		if _nullExpr != nil {
			right := path
			if !_f.allowNullArgs(opt.FetchValPathOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.FetchValPathOp, left, right)
					_f.mem.AddAltFingerprint(_fetchValPathExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		left := json
		right := path
		_nullExpr := _f.mem.NormExpr(path).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.FetchValPathOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.FetchValPathOp, left, right)
					_f.mem.AddAltFingerprint(_fetchValPathExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_fetchValPathExpr)))
}

// ConstructFetchTextPath constructs an expression for the FetchTextPath operator.
func (_f *Factory) ConstructFetchTextPath(
	json memo.GroupID,
	path memo.GroupID,
) memo.GroupID {
	_fetchTextPathExpr := memo.MakeFetchTextPathExpr(json, path)
	_group := _f.mem.GroupByFingerprint(_fetchTextPathExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullBinaryLeft]
	{
		left := json
		_nullExpr := _f.mem.NormExpr(json).AsNull()
		if _nullExpr != nil {
			right := path
			if !_f.allowNullArgs(opt.FetchTextPathOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryLeft) {
					_group = _f.foldNullBinary(opt.FetchTextPathOp, left, right)
					_f.mem.AddAltFingerprint(_fetchTextPathExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [FoldNullBinaryRight]
	{
		left := json
		right := path
		_nullExpr := _f.mem.NormExpr(path).AsNull()
		if _nullExpr != nil {
			if !_f.allowNullArgs(opt.FetchTextPathOp, left, right) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullBinaryRight) {
					_group = _f.foldNullBinary(opt.FetchTextPathOp, left, right)
					_f.mem.AddAltFingerprint(_fetchTextPathExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_fetchTextPathExpr)))
}

// ConstructUnaryMinus constructs an expression for the UnaryMinus operator.
func (_f *Factory) ConstructUnaryMinus(
	input memo.GroupID,
) memo.GroupID {
	_unaryMinusExpr := memo.MakeUnaryMinusExpr(input)
	_group := _f.mem.GroupByFingerprint(_unaryMinusExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [InvertMinus]
	{
		_minusExpr := _f.mem.NormExpr(input).AsMinus()
		if _minusExpr != nil {
			left := _minusExpr.Left()
			right := _minusExpr.Right()
			if _f.canConstructBinary(opt.MinusOp, right, left) {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.InvertMinus) {
					_group = _f.ConstructMinus(
						right,
						left,
					)
					_f.mem.AddAltFingerprint(_unaryMinusExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	// [EliminateUnaryMinus]
	{
		_unaryMinusExpr2 := _f.mem.NormExpr(input).AsUnaryMinus()
		if _unaryMinusExpr2 != nil {
			input := _unaryMinusExpr2.Input()
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EliminateUnaryMinus) {
				_group = input
				_f.mem.AddAltFingerprint(_unaryMinusExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullUnary]
	{
		_nullExpr := _f.mem.NormExpr(input).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullUnary) {
				_group = _f.foldNullUnary(opt.UnaryMinusOp, input)
				_f.mem.AddAltFingerprint(_unaryMinusExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_unaryMinusExpr)))
}

// ConstructUnaryComplement constructs an expression for the UnaryComplement operator.
func (_f *Factory) ConstructUnaryComplement(
	input memo.GroupID,
) memo.GroupID {
	_unaryComplementExpr := memo.MakeUnaryComplementExpr(input)
	_group := _f.mem.GroupByFingerprint(_unaryComplementExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [FoldNullUnary]
	{
		_nullExpr := _f.mem.NormExpr(input).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullUnary) {
				_group = _f.foldNullUnary(opt.UnaryComplementOp, input)
				_f.mem.AddAltFingerprint(_unaryComplementExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_unaryComplementExpr)))
}

// ConstructCast constructs an expression for the Cast operator.
func (_f *Factory) ConstructCast(
	input memo.GroupID,
	typ memo.PrivateID,
) memo.GroupID {
	_castExpr := memo.MakeCastExpr(input, typ)
	_group := _f.mem.GroupByFingerprint(_castExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EliminateCast]
	{
		if _f.hasType(input, typ) {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EliminateCast) {
				_group = input
				_f.mem.AddAltFingerprint(_castExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [FoldNullCast]
	{
		_nullExpr := _f.mem.NormExpr(input).AsNull()
		if _nullExpr != nil {
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.FoldNullCast) {
				_group = _f.ConstructNull(
					typ,
				)
				_f.mem.AddAltFingerprint(_castExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_castExpr)))
}

// ConstructCase constructs an expression for the Case operator.
// Case is a CASE statement of the form:
//   CASE [ <Input> ]
//       WHEN <condval1> THEN <expr1>
//     [ WHEN <condval2> THEN <expr2> ] ...
//     [ ELSE <expr> ]
//   END
//
// The Case operator evaluates <Input> (if not provided, Input is set to True),
// then picks the WHEN branch where <condval> is equal to
// <Input>, then evaluates and returns the corresponding THEN expression. If no
// WHEN branch matches, the ELSE expression is evaluated and returned, if any.
// Otherwise, NULL is returned.
//
// Note that the Whens list inside Case is used to represent all the WHEN
// branches as well as the ELSE statement if it exists. It is of the form:
// [(When <condval1> <expr1>),(When <condval2> <expr2>),...,<expr>]
func (_f *Factory) ConstructCase(
	input memo.GroupID,
	whens memo.ListID,
) memo.GroupID {
	_caseExpr := memo.MakeCaseExpr(input, whens)
	_group := _f.mem.GroupByFingerprint(_caseExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_caseExpr)))
}

// ConstructWhen constructs an expression for the When operator.
// When represents a single WHEN ... THEN ... condition inside a CASE statement.
// It is the type of each list item in Whens (except for the last item which is
// a raw expression for the ELSE statement).
func (_f *Factory) ConstructWhen(
	condition memo.GroupID,
	value memo.GroupID,
) memo.GroupID {
	_whenExpr := memo.MakeWhenExpr(condition, value)
	_group := _f.mem.GroupByFingerprint(_whenExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_whenExpr)))
}

// ConstructArray constructs an expression for the Array operator.
// Array is an ARRAY literal of the form ARRAY[<expr1>, <expr2>, ..., <exprN>].
func (_f *Factory) ConstructArray(
	elems memo.ListID,
	typ memo.PrivateID,
) memo.GroupID {
	_arrayExpr := memo.MakeArrayExpr(elems, typ)
	_group := _f.mem.GroupByFingerprint(_arrayExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_arrayExpr)))
}

// ConstructFunction constructs an expression for the Function operator.
// Function invokes a builtin SQL function like CONCAT or NOW, passing the given
// arguments. The private field is a *opt.FuncOpDef struct that provides the
// name of the function as well as a pointer to the builtin overload definition.
func (_f *Factory) ConstructFunction(
	args memo.ListID,
	def memo.PrivateID,
) memo.GroupID {
	_functionExpr := memo.MakeFunctionExpr(args, def)
	_group := _f.mem.GroupByFingerprint(_functionExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_functionExpr)))
}

// ConstructCoalesce constructs an expression for the Coalesce operator.
func (_f *Factory) ConstructCoalesce(
	args memo.ListID,
) memo.GroupID {
	_coalesceExpr := memo.MakeCoalesceExpr(args)
	_group := _f.mem.GroupByFingerprint(_coalesceExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	// [EliminateCoalesce]
	{
		if args.Length == 1 {
			_item := _f.mem.LookupList(args)[0]
			item := _item
			if _f.onRuleMatch == nil || _f.onRuleMatch(opt.EliminateCoalesce) {
				_group = item
				_f.mem.AddAltFingerprint(_coalesceExpr.Fingerprint(), _group)
				return _group
			}
		}
	}

	// [SimplifyCoalesce]
	{
		if args.Length > 0 {
			_item := _f.mem.LookupList(args)[0]
			_expr := _f.mem.NormExpr(_item)
			if _expr.IsConstValue() {
				if _f.onRuleMatch == nil || _f.onRuleMatch(opt.SimplifyCoalesce) {
					_group = _f.simplifyCoalesce(args)
					_f.mem.AddAltFingerprint(_coalesceExpr.Fingerprint(), _group)
					return _group
				}
			}
		}
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_coalesceExpr)))
}

// ConstructUnsupportedExpr constructs an expression for the UnsupportedExpr operator.
// UnsupportedExpr is used for interfacing with the old planner code. It can
// encapsulate a TypedExpr that is otherwise not supported by the optimizer.
func (_f *Factory) ConstructUnsupportedExpr(
	value memo.PrivateID,
) memo.GroupID {
	_unsupportedExprExpr := memo.MakeUnsupportedExprExpr(value)
	_group := _f.mem.GroupByFingerprint(_unsupportedExprExpr.Fingerprint())
	if _group != 0 {
		return _group
	}

	return _f.onConstruct(_f.mem.MemoizeNormExpr(_f.evalCtx, memo.Expr(_unsupportedExprExpr)))
}

type dynConstructLookupFunc func(f *Factory, operands DynamicOperands) memo.GroupID

var dynConstructLookup [opt.NumOperators]dynConstructLookupFunc

func init() {
	// UnknownOp
	dynConstructLookup[opt.UnknownOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		panic("op type not initialized")
	}

	// ScanOp
	dynConstructLookup[opt.ScanOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructScan(memo.PrivateID(operands[0]))
	}

	// ValuesOp
	dynConstructLookup[opt.ValuesOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructValues(operands[0].ListID(), memo.PrivateID(operands[1]))
	}

	// SelectOp
	dynConstructLookup[opt.SelectOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructSelect(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// ProjectOp
	dynConstructLookup[opt.ProjectOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructProject(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// InnerJoinOp
	dynConstructLookup[opt.InnerJoinOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructInnerJoin(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.GroupID(operands[2]))
	}

	// LeftJoinOp
	dynConstructLookup[opt.LeftJoinOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructLeftJoin(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.GroupID(operands[2]))
	}

	// RightJoinOp
	dynConstructLookup[opt.RightJoinOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructRightJoin(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.GroupID(operands[2]))
	}

	// FullJoinOp
	dynConstructLookup[opt.FullJoinOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructFullJoin(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.GroupID(operands[2]))
	}

	// SemiJoinOp
	dynConstructLookup[opt.SemiJoinOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructSemiJoin(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.GroupID(operands[2]))
	}

	// AntiJoinOp
	dynConstructLookup[opt.AntiJoinOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructAntiJoin(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.GroupID(operands[2]))
	}

	// InnerJoinApplyOp
	dynConstructLookup[opt.InnerJoinApplyOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructInnerJoinApply(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.GroupID(operands[2]))
	}

	// LeftJoinApplyOp
	dynConstructLookup[opt.LeftJoinApplyOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructLeftJoinApply(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.GroupID(operands[2]))
	}

	// RightJoinApplyOp
	dynConstructLookup[opt.RightJoinApplyOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructRightJoinApply(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.GroupID(operands[2]))
	}

	// FullJoinApplyOp
	dynConstructLookup[opt.FullJoinApplyOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructFullJoinApply(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.GroupID(operands[2]))
	}

	// SemiJoinApplyOp
	dynConstructLookup[opt.SemiJoinApplyOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructSemiJoinApply(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.GroupID(operands[2]))
	}

	// AntiJoinApplyOp
	dynConstructLookup[opt.AntiJoinApplyOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructAntiJoinApply(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.GroupID(operands[2]))
	}

	// GroupByOp
	dynConstructLookup[opt.GroupByOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructGroupBy(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.PrivateID(operands[2]))
	}

	// UnionOp
	dynConstructLookup[opt.UnionOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructUnion(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.PrivateID(operands[2]))
	}

	// IntersectOp
	dynConstructLookup[opt.IntersectOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructIntersect(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.PrivateID(operands[2]))
	}

	// ExceptOp
	dynConstructLookup[opt.ExceptOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructExcept(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.PrivateID(operands[2]))
	}

	// UnionAllOp
	dynConstructLookup[opt.UnionAllOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructUnionAll(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.PrivateID(operands[2]))
	}

	// IntersectAllOp
	dynConstructLookup[opt.IntersectAllOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructIntersectAll(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.PrivateID(operands[2]))
	}

	// ExceptAllOp
	dynConstructLookup[opt.ExceptAllOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructExceptAll(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.PrivateID(operands[2]))
	}

	// LimitOp
	dynConstructLookup[opt.LimitOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructLimit(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.PrivateID(operands[2]))
	}

	// OffsetOp
	dynConstructLookup[opt.OffsetOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructOffset(memo.GroupID(operands[0]), memo.GroupID(operands[1]), memo.PrivateID(operands[2]))
	}

	// Max1RowOp
	dynConstructLookup[opt.Max1RowOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructMax1Row(memo.GroupID(operands[0]))
	}

	// SubqueryOp
	dynConstructLookup[opt.SubqueryOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructSubquery(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// AnyOp
	dynConstructLookup[opt.AnyOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructAny(memo.GroupID(operands[0]))
	}

	// VariableOp
	dynConstructLookup[opt.VariableOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructVariable(memo.PrivateID(operands[0]))
	}

	// ConstOp
	dynConstructLookup[opt.ConstOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructConst(memo.PrivateID(operands[0]))
	}

	// NullOp
	dynConstructLookup[opt.NullOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructNull(memo.PrivateID(operands[0]))
	}

	// TrueOp
	dynConstructLookup[opt.TrueOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructTrue()
	}

	// FalseOp
	dynConstructLookup[opt.FalseOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructFalse()
	}

	// PlaceholderOp
	dynConstructLookup[opt.PlaceholderOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructPlaceholder(memo.PrivateID(operands[0]))
	}

	// TupleOp
	dynConstructLookup[opt.TupleOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructTuple(operands[0].ListID())
	}

	// ProjectionsOp
	dynConstructLookup[opt.ProjectionsOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructProjections(operands[0].ListID(), memo.PrivateID(operands[1]))
	}

	// AggregationsOp
	dynConstructLookup[opt.AggregationsOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructAggregations(operands[0].ListID(), memo.PrivateID(operands[1]))
	}

	// ExistsOp
	dynConstructLookup[opt.ExistsOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructExists(memo.GroupID(operands[0]))
	}

	// FiltersOp
	dynConstructLookup[opt.FiltersOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructFilters(operands[0].ListID())
	}

	// AndOp
	dynConstructLookup[opt.AndOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructAnd(operands[0].ListID())
	}

	// OrOp
	dynConstructLookup[opt.OrOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructOr(operands[0].ListID())
	}

	// NotOp
	dynConstructLookup[opt.NotOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructNot(memo.GroupID(operands[0]))
	}

	// EqOp
	dynConstructLookup[opt.EqOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructEq(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// LtOp
	dynConstructLookup[opt.LtOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructLt(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// GtOp
	dynConstructLookup[opt.GtOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructGt(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// LeOp
	dynConstructLookup[opt.LeOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructLe(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// GeOp
	dynConstructLookup[opt.GeOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructGe(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// NeOp
	dynConstructLookup[opt.NeOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructNe(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// InOp
	dynConstructLookup[opt.InOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructIn(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// NotInOp
	dynConstructLookup[opt.NotInOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructNotIn(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// LikeOp
	dynConstructLookup[opt.LikeOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructLike(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// NotLikeOp
	dynConstructLookup[opt.NotLikeOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructNotLike(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// ILikeOp
	dynConstructLookup[opt.ILikeOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructILike(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// NotILikeOp
	dynConstructLookup[opt.NotILikeOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructNotILike(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// SimilarToOp
	dynConstructLookup[opt.SimilarToOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructSimilarTo(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// NotSimilarToOp
	dynConstructLookup[opt.NotSimilarToOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructNotSimilarTo(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// RegMatchOp
	dynConstructLookup[opt.RegMatchOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructRegMatch(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// NotRegMatchOp
	dynConstructLookup[opt.NotRegMatchOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructNotRegMatch(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// RegIMatchOp
	dynConstructLookup[opt.RegIMatchOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructRegIMatch(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// NotRegIMatchOp
	dynConstructLookup[opt.NotRegIMatchOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructNotRegIMatch(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// IsOp
	dynConstructLookup[opt.IsOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructIs(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// IsNotOp
	dynConstructLookup[opt.IsNotOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructIsNot(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// ContainsOp
	dynConstructLookup[opt.ContainsOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructContains(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// JsonExistsOp
	dynConstructLookup[opt.JsonExistsOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructJsonExists(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// JsonAllExistsOp
	dynConstructLookup[opt.JsonAllExistsOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructJsonAllExists(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// JsonSomeExistsOp
	dynConstructLookup[opt.JsonSomeExistsOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructJsonSomeExists(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// BitandOp
	dynConstructLookup[opt.BitandOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructBitand(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// BitorOp
	dynConstructLookup[opt.BitorOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructBitor(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// BitxorOp
	dynConstructLookup[opt.BitxorOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructBitxor(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// PlusOp
	dynConstructLookup[opt.PlusOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructPlus(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// MinusOp
	dynConstructLookup[opt.MinusOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructMinus(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// MultOp
	dynConstructLookup[opt.MultOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructMult(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// DivOp
	dynConstructLookup[opt.DivOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructDiv(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// FloorDivOp
	dynConstructLookup[opt.FloorDivOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructFloorDiv(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// ModOp
	dynConstructLookup[opt.ModOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructMod(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// PowOp
	dynConstructLookup[opt.PowOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructPow(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// ConcatOp
	dynConstructLookup[opt.ConcatOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructConcat(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// LShiftOp
	dynConstructLookup[opt.LShiftOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructLShift(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// RShiftOp
	dynConstructLookup[opt.RShiftOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructRShift(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// FetchValOp
	dynConstructLookup[opt.FetchValOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructFetchVal(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// FetchTextOp
	dynConstructLookup[opt.FetchTextOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructFetchText(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// FetchValPathOp
	dynConstructLookup[opt.FetchValPathOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructFetchValPath(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// FetchTextPathOp
	dynConstructLookup[opt.FetchTextPathOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructFetchTextPath(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// UnaryMinusOp
	dynConstructLookup[opt.UnaryMinusOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructUnaryMinus(memo.GroupID(operands[0]))
	}

	// UnaryComplementOp
	dynConstructLookup[opt.UnaryComplementOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructUnaryComplement(memo.GroupID(operands[0]))
	}

	// CastOp
	dynConstructLookup[opt.CastOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructCast(memo.GroupID(operands[0]), memo.PrivateID(operands[1]))
	}

	// CaseOp
	dynConstructLookup[opt.CaseOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructCase(memo.GroupID(operands[0]), operands[1].ListID())
	}

	// WhenOp
	dynConstructLookup[opt.WhenOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructWhen(memo.GroupID(operands[0]), memo.GroupID(operands[1]))
	}

	// ArrayOp
	dynConstructLookup[opt.ArrayOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructArray(operands[0].ListID(), memo.PrivateID(operands[1]))
	}

	// FunctionOp
	dynConstructLookup[opt.FunctionOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructFunction(operands[0].ListID(), memo.PrivateID(operands[1]))
	}

	// CoalesceOp
	dynConstructLookup[opt.CoalesceOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructCoalesce(operands[0].ListID())
	}

	// UnsupportedExprOp
	dynConstructLookup[opt.UnsupportedExprOp] = func(f *Factory, operands DynamicOperands) memo.GroupID {
		return f.ConstructUnsupportedExpr(memo.PrivateID(operands[0]))
	}

}

func (f *Factory) DynamicConstruct(op opt.Operator, operands DynamicOperands) memo.GroupID {
	return dynConstructLookup[op](f, operands)
}
