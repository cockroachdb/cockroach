load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

# gazelle:exclude gen-check_expr.go
# gazelle:exclude gen-check_expr_skip.go
# gazelle:exclude gen-filters_expr_mutate_checker.go
# gazelle:exclude gen-filters_expr_mutate_checker_skip.go

go_library(
    name = "memo",
    srcs = [
        "constraint_builder.go",
        "cost.go",
        "expr.go",
        "expr_format.go",
        "expr_name_gen.go",
        "extract.go",
        "group.go",
        "interner.go",
        "logical_props_builder.go",
        "memo.go",
        "multiplicity_builder.go",
        "statistics_builder.go",
        "typing.go",
        ":additional-srcs",  # keep
        ":gen-expr",  # keep
    ],
    importpath = "github.com/cockroachdb/cockroach/pkg/sql/opt/memo",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/geo/geoindex",
        "//pkg/sql/catalog/colinfo",
        "//pkg/sql/catalog/descpb",
        "//pkg/sql/inverted",
        "//pkg/sql/opt",
        "//pkg/sql/opt/cat",
        "//pkg/sql/opt/constraint",
        "//pkg/sql/opt/invertedexpr",  # keep
        "//pkg/sql/opt/props",
        "//pkg/sql/opt/props/physical",
        "//pkg/sql/rowenc",
        "//pkg/sql/sem/builtins",
        "//pkg/sql/sem/tree",
        "//pkg/sql/types",
        "//pkg/util",
        "//pkg/util/duration",
        "//pkg/util/encoding",
        "//pkg/util/json",
        "//pkg/util/log",
        "//pkg/util/timeutil/pgdate",
        "//pkg/util/treeprinter",
        "@com_github_cockroachdb_errors//:errors",
    ],
)

go_test(
    name = "memo_test",
    size = "small",
    srcs = [
        "cost_test.go",
        "expr_test.go",
        "interner_test.go",
        "logical_props_builder_test.go",
        "memo_test.go",
        "multiplicity_builder_test.go",
        "statistics_builder_test.go",
        "typing_test.go",
    ],
    data = glob(["testdata/**"]) + [
        "@cockroach//c-deps:libgeos",
        "//pkg/sql/opt/testutils/opttester:testfixtures",
    ],
    embed = [":memo"],
    deps = [
        "//pkg/settings/cluster",
        "//pkg/sql/inverted",
        "//pkg/sql/opt",
        "//pkg/sql/opt/constraint",
        "//pkg/sql/opt/norm",
        "//pkg/sql/opt/optbuilder",
        "//pkg/sql/opt/props",
        "//pkg/sql/opt/props/physical",
        "//pkg/sql/opt/testutils",
        "//pkg/sql/opt/testutils/opttester",
        "//pkg/sql/opt/testutils/testcat",
        "//pkg/sql/opt/xform",
        "//pkg/sql/parser",
        "//pkg/sql/randgen",
        "//pkg/sql/sem/builtins",
        "//pkg/sql/sem/tree",
        "//pkg/sql/types",
        "//pkg/testutils",
        "//pkg/util/duration",
        "//pkg/util/leaktest",
        "//pkg/util/timeofday",
        "//pkg/util/timeutil/pgdate",
        "@com_github_cockroachdb_datadriven//:datadriven",
        "@com_github_cockroachdb_errors//:errors",
        "@org_golang_x_tools//container/intsets",
    ],
)

# Define a gerator for expression definitions and functions.
genrule(
    name = "gen-expr",
    srcs = ["//pkg/sql/opt:ops"],
    outs = ["expr.og.go"],
    cmd = """
      $(location //pkg/sql/opt/optgen/cmd/optgen) -out $@ exprs $(locations //pkg/sql/opt:ops)
    """,
    exec_tools = ["//pkg/sql/opt/optgen/cmd/optgen"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "additional-srcs",
    srcs = select({
        "//build/toolchains:crdb_test": [":crdb-test-srcs"],
        "//conditions:default": [":crdb-test-off-srcs"],
    }),
)

genrule(
    name = "crdb-test-srcs",
    srcs = [
        "check_expr.go",
        "filters_expr_mutate_checker.go",
    ],
    outs = [
        "gen-check_expr.go",
        "gen-filters_expr_mutate_checker.go",
    ],
    cmd = """
        cat $(location check_expr.go) | grep -v '//go:build' | grep -v '// +build' > $(location gen-check_expr.go)
        cat $(location filters_expr_mutate_checker.go) | grep -v '//go:build' | grep -v '// +build' > $(location gen-filters_expr_mutate_checker.go)
    """,
)

genrule(
    name = "crdb-test-off-srcs",
    srcs = [
        "check_expr_skip.go",
        "filters_expr_mutate_checker_skip.go",
    ],
    outs = [
        "gen-check_expr_skip.go",
        "gen-filters_expr_mutate_checker_skip.go",
    ],
    cmd = """
        cat $(location check_expr_skip.go) | grep -v '//go:build' | grep -v '// +build' > $(location gen-check_expr_skip.go)
        cat $(location filters_expr_mutate_checker_skip.go) | grep -v '//go:build' | grep -v '// +build' > $(location gen-filters_expr_mutate_checker_skip.go)
    """,
)
