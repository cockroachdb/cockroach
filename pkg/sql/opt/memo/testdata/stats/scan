exec-ddl
CREATE TABLE a (x INT PRIMARY KEY, y INT, s STRING, d DECIMAL NOT NULL, b BOOL, UNIQUE (s DESC, d))
----
TABLE a
 ├── x int not null
 ├── y int
 ├── s string
 ├── d decimal not null
 ├── b bool
 ├── INDEX primary
 │    └── x int not null
 └── INDEX secondary
      ├── s string desc
      ├── d decimal not null
      └── x int not null (storing)

exec-ddl
ALTER TABLE a INJECT STATISTICS '[
  {
    "columns": ["x"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  }
]'
----

build
SELECT * FROM a
----
scan a
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) b:5(bool)
 ├── stats: [rows=2000]
 ├── key: (1)
 └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)

# Check that boolean columns have distinct count 2 when there are no stats
# available.
build
SELECT * FROM a WHERE b
----
select
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) b:5(bool!null)
 ├── stats: [rows=1000, distinct(5)=1]
 ├── key: (1)
 ├── fd: ()-->(5), (1)-->(2-4), (3,4)~~>(1,2)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) b:5(bool)
 │    ├── stats: [rows=2000, distinct(5)=2]
 │    ├── key: (1)
 │    └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
 └── filters [type=bool, outer=(5), constraints=(/5: [/true - /true]; tight), fd=()-->(5)]
      └── variable: a.b [type=bool, outer=(5), constraints=(/5: [/true - /true]; tight)]

exec-ddl
ALTER TABLE a INJECT STATISTICS '[
  {
    "columns": ["x"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  },
  {
    "columns": ["x","y"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  },
  {
    "columns": ["y"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 400
  },
  {
    "columns": ["y"],
    "created_at": "2018-01-01 2:00:00.00000+00:00",
    "row_count": 3000,
    "distinct_count": 500
  },
  {
    "columns": ["s"],
    "created_at": "2018-01-01 2:00:00.00000+00:00",
    "row_count": 3000,
    "distinct_count": 2
  }
]'
----

build
SELECT * FROM a
----
scan a
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) b:5(bool)
 ├── stats: [rows=3000]
 ├── key: (1)
 └── fd: (1)-->(2-5), (3,4)~~>(1,2,5)

# Test constrained scan.
opt
SELECT s, x FROM a WHERE x > 0 AND x <= 100
----
scan a
 ├── columns: s:3(string) x:1(int!null)
 ├── constraint: /1: [/1 - /100]
 ├── stats: [rows=150, distinct(1)=100]
 ├── key: (1)
 └── fd: (1)-->(3)

# Test limited scan.
opt
SELECT s, x FROM a WHERE x > 5 AND x <= 10 LIMIT 2
----
scan a
 ├── columns: s:3(string) x:1(int!null)
 ├── constraint: /1: [/6 - /10]
 ├── limit: 2
 ├── stats: [rows=2]
 ├── key: (1)
 └── fd: (1)-->(3)

opt
SELECT count(*), y, x FROM a WHERE x > 0 AND x <= 100 GROUP BY x, y
----
group-by
 ├── columns: count:6(int) y:2(int) x:1(int!null)
 ├── grouping columns: x:1(int!null)
 ├── stats: [rows=100, distinct(1)=100]
 ├── key: (1)
 ├── fd: (1)-->(2,6)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── constraint: /1: [/1 - /100]
 │    ├── stats: [rows=150, distinct(1)=100]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── aggregations [outer=(2)]
      ├── count-rows [type=int]
      └── const-agg [type=int, outer=(2)]
           └── variable: a.y [type=int, outer=(2)]

# Test calculation of multi-column stats.
opt
SELECT y, s FROM a GROUP BY y, s
----
distinct-on
 ├── columns: y:2(int) s:3(string)
 ├── grouping columns: y:2(int) s:3(string)
 ├── stats: [rows=1000, distinct(2,3)=1000]
 ├── key: (2,3)
 └── scan a
      ├── columns: y:2(int) s:3(string)
      └── stats: [rows=3000, distinct(2,3)=1000]
