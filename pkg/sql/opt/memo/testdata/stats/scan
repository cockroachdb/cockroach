exec-ddl
CREATE TABLE a (x INT PRIMARY KEY, y INT, s STRING, d DECIMAL NOT NULL, UNIQUE (s DESC, d))
----
TABLE a
 ├── x int not null
 ├── y int
 ├── s string
 ├── d decimal not null
 ├── INDEX primary
 │    └── x int not null
 └── INDEX secondary
      ├── s string desc
      ├── d decimal not null
      └── x int not null (storing)

exec-ddl
ALTER TABLE a INJECT STATISTICS '[
  {
    "columns": ["x"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  }
]'
----

build
SELECT * FROM a
----
scan a
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 ├── stats: [rows=2000]
 ├── key: (1)
 └── fd: (1)-->(2-4), (3,4)~~>(1,2)

exec-ddl
ALTER TABLE a INJECT STATISTICS '[
  {
    "columns": ["x"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  },
  {
    "columns": ["x","y"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  },
  {
    "columns": ["y"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 400
  },
  {
    "columns": ["y"],
    "created_at": "2018-01-01 2:00:00.00000+00:00",
    "row_count": 3000,
    "distinct_count": 500
  },
  {
    "columns": ["s"],
    "created_at": "2018-01-01 2:00:00.00000+00:00",
    "row_count": 3000,
    "distinct_count": 2
  }
]'
----

build
SELECT * FROM a
----
scan a
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 ├── stats: [rows=3000]
 ├── key: (1)
 └── fd: (1)-->(2-4), (3,4)~~>(1,2)

# Test constrained scan.
opt
SELECT s, x FROM a WHERE x > 0 AND x <= 100
----
scan a
 ├── columns: s:3(string) x:1(int!null)
 ├── constraint: /1: [/1 - /100]
 ├── stats: [rows=150, distinct(1)=100]
 ├── key: (1)
 └── fd: (1)-->(3)

# Test limited scan.
opt
SELECT s, x FROM a WHERE x > 5 AND x <= 10 LIMIT 2
----
scan a
 ├── columns: s:3(string) x:1(int!null)
 ├── constraint: /1: [/6 - /10]
 ├── limit: 2
 ├── stats: [rows=2]
 ├── key: (1)
 └── fd: (1)-->(3)

opt
SELECT count(*), y, x FROM a WHERE x > 0 AND x <= 100 GROUP BY x, y
----
group-by
 ├── columns: count:5(int) y:2(int) x:1(int!null)
 ├── grouping columns: x:1(int!null) y:2(int)
 ├── stats: [rows=148.109074, distinct(1,2)=148.109074]
 ├── key: (1)
 ├── fd: (1)-->(2,5)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── constraint: /1: [/1 - /100]
 │    ├── stats: [rows=150, distinct(1)=100, distinct(1,2)=148.109074]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── aggregations
      └── count-rows [type=int]

# Test calculation of multi-column stats.
opt
SELECT y, s FROM a GROUP BY y, s
----
group-by
 ├── columns: y:2(int) s:3(string)
 ├── grouping columns: y:2(int) s:3(string)
 ├── stats: [rows=1000, distinct(2,3)=1000]
 ├── key: (2,3)
 └── scan a
      ├── columns: y:2(int) s:3(string)
      └── stats: [rows=3000, distinct(2,3)=1000]

opt
SELECT x,y FROM a where y=1 AND x > 0 AND x <= 7
----
select
 ├── columns: x:1(int!null) y:2(int!null)
 ├── stats: [rows=0.021, distinct(1)=0.021, distinct(2)=0.021]
 ├── key: (1)
 ├── fd: ()-->(2)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── constraint: /1: [/1 - /7]
 │    ├── stats: [rows=10.5, distinct(1)=7]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── filters [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
      └── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
           ├── variable: a.y [type=int, outer=(2)]
           └── const: 1 [type=int]

# Test enforceFDOnDistinctCounts
opt
SELECT x,y FROM a where x=1 AND y > 0 AND y <= 7
----
select
 ├── columns: x:1(int!null) y:2(int!null)
 ├── cardinality: [0 - 1]
 ├── stats: [rows=0.003, distinct(1)=0.003, distinct(2)=0.003]
 ├── key: ()
 ├── fd: ()-->(1,2)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── constraint: /1: [/1 - /1]
 │    ├── cardinality: [0 - 1]
 │    ├── stats: [rows=1.5, distinct(1)=1]
 │    ├── key: ()
 │    └── fd: ()-->(1,2)
 └── filters [type=bool, outer=(2), constraints=(/2: [/1 - /7]; tight)]
      ├── gt [type=bool, outer=(2), constraints=(/2: [/1 - ]; tight)]
      │    ├── variable: a.y [type=int, outer=(2)]
      │    └── const: 0 [type=int]
      └── le [type=bool, outer=(2), constraints=(/2: (/NULL - /7]; tight)]
           ├── variable: a.y [type=int, outer=(2)]
           └── const: 7 [type=int]
