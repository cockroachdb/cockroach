exec-ddl
CREATE TABLE abc (
    a INT NOT NULL,
    b TEXT DEFAULT ('foo'),
    c FLOAT AS (a::float) STORED
)
----

exec-ddl
ALTER TABLE abc INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  },
  {
    "columns": ["b"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 10
  }
]'
----

exec-ddl
CREATE TABLE xyz (
    x TEXT PRIMARY KEY,
    y INT8 NOT NULL,
    z FLOAT8
)
----

# Table with unique secondary index over nullable column.
exec-ddl
CREATE TABLE uv (
    u INT PRIMARY KEY DEFAULT unique_rowid(),
    v INT,
    UNIQUE (v)
)
----

# Table with multi-column key.
exec-ddl
CREATE TABLE mno (
    m INT PRIMARY KEY,
    n INT,
    o INT,
    UNIQUE (n, o)
)
----

exec-ddl
ALTER TABLE mno INJECT STATISTICS '[
  {
    "columns": ["m"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 100
  },
  {
    "columns": ["n"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 100,
    "null_count": 10
  },
  {
    "columns": ["o"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 1900,
    "null_count": 100
  }
]'
----

# Statistics should be derived from input columns and transferred to RETURNING
# columns.
build
SELECT *
FROM
[
	INSERT INTO xyz (x, y)
	SELECT b, a FROM abc WHERE c=1.0
	ON CONFLICT (x) DO UPDATE SET y=5
	RETURNING *
]
WHERE y=10
----
with &1
 ├── columns: x:19(string!null) y:20(int!null) z:21(float)
 ├── volatile, mutations
 ├── stats: [rows=1, distinct(20)=1, null(20)=0]
 ├── fd: ()-->(20)
 ├── upsert xyz
 │    ├── columns: xyz.x:1(string!null) xyz.y:2(int!null) xyz.z:3(float)
 │    ├── arbiter indexes: primary
 │    ├── canary column: xyz.x:11(string)
 │    ├── fetch columns: xyz.x:11(string) xyz.y:12(int) xyz.z:13(float)
 │    ├── insert-mapping:
 │    │    ├── b:6 => xyz.x:1
 │    │    ├── a:5 => xyz.y:2
 │    │    └── column10:10 => xyz.z:3
 │    ├── update-mapping:
 │    │    └── upsert_y:17 => xyz.y:2
 │    ├── return-mapping:
 │    │    ├── upsert_x:16 => xyz.x:1
 │    │    ├── upsert_y:17 => xyz.y:2
 │    │    └── upsert_z:18 => xyz.z:3
 │    ├── volatile, mutations
 │    ├── stats: [rows=9.94974874, distinct(1)=9.94974874, null(1)=0, distinct(2)=9.94974874, null(2)=0]
 │    └── project
 │         ├── columns: upsert_x:16(string) upsert_y:17(int!null) upsert_z:18(float) a:5(int!null) b:6(string) column10:10(float) xyz.x:11(string) xyz.y:12(int) xyz.z:13(float) xyz.crdb_internal_mvcc_timestamp:14(decimal) y_new:15(int!null)
 │         ├── immutable
 │         ├── stats: [rows=9.94974874, distinct(16)=9.94974874, null(16)=0, distinct(17)=9.94974874, null(17)=0]
 │         ├── lax-key: (6,11)
 │         ├── fd: ()-->(10,15), (6)~~>(5), (11)-->(12-14), (6,11)-->(16), (5,11)-->(17), (6,11)~~>(5,17,18)
 │         ├── project
 │         │    ├── columns: y_new:15(int!null) a:5(int!null) b:6(string) column10:10(float) xyz.x:11(string) xyz.y:12(int) xyz.z:13(float) xyz.crdb_internal_mvcc_timestamp:14(decimal)
 │         │    ├── immutable
 │         │    ├── stats: [rows=9.94974874, distinct(6,11)=9.94974874, null(6,11)=0, distinct(5,11,15)=9.94974874, null(5,11,15)=0]
 │         │    ├── lax-key: (6,11)
 │         │    ├── fd: ()-->(10,15), (6)~~>(5), (11)-->(12-14)
 │         │    ├── left-join (hash)
 │         │    │    ├── columns: a:5(int!null) b:6(string) column10:10(float) xyz.x:11(string) xyz.y:12(int) xyz.z:13(float) xyz.crdb_internal_mvcc_timestamp:14(decimal)
 │         │    │    ├── multiplicity: left-rows(exactly-one), right-rows(zero-or-one)
 │         │    │    ├── immutable
 │         │    │    ├── stats: [rows=9.94974874, distinct(11)=9.94974874, null(11)=0, distinct(5,11)=9.94974874, null(5,11)=0, distinct(6,11)=9.94974874, null(6,11)=0]
 │         │    │    ├── lax-key: (6,11)
 │         │    │    ├── fd: ()-->(10), (6)~~>(5), (11)-->(12-14)
 │         │    │    ├── ensure-upsert-distinct-on
 │         │    │    │    ├── columns: a:5(int!null) b:6(string) column10:10(float)
 │         │    │    │    ├── grouping columns: b:6(string)
 │         │    │    │    ├── error: "UPSERT or INSERT...ON CONFLICT command cannot affect row a second time"
 │         │    │    │    ├── immutable
 │         │    │    │    ├── stats: [rows=9.94974874, distinct(5)=6.31184239, null(5)=0, distinct(6)=9.94974874, null(6)=0]
 │         │    │    │    ├── lax-key: (6)
 │         │    │    │    ├── fd: ()-->(10), (6)~~>(5,10)
 │         │    │    │    ├── project
 │         │    │    │    │    ├── columns: column10:10(float) a:5(int!null) b:6(string)
 │         │    │    │    │    ├── immutable
 │         │    │    │    │    ├── stats: [rows=9.94974874, distinct(6)=6.31184239, null(6)=0]
 │         │    │    │    │    ├── fd: ()-->(10)
 │         │    │    │    │    ├── project
 │         │    │    │    │    │    ├── columns: a:5(int!null) b:6(string)
 │         │    │    │    │    │    ├── stats: [rows=9.94974874, distinct(6)=6.31184239, null(6)=0]
 │         │    │    │    │    │    └── select
 │         │    │    │    │    │         ├── columns: a:5(int!null) b:6(string) c:7(float!null) rowid:8(int!null) abc.crdb_internal_mvcc_timestamp:9(decimal)
 │         │    │    │    │    │         ├── stats: [rows=9.94974874, distinct(6)=6.31184239, null(6)=0, distinct(7)=1, null(7)=0]
 │         │    │    │    │    │         ├── key: (8)
 │         │    │    │    │    │         ├── fd: ()-->(7), (8)-->(5,6,9)
 │         │    │    │    │    │         ├── scan abc
 │         │    │    │    │    │         │    ├── columns: a:5(int!null) b:6(string) c:7(float) rowid:8(int!null) abc.crdb_internal_mvcc_timestamp:9(decimal)
 │         │    │    │    │    │         │    ├── computed column expressions
 │         │    │    │    │    │         │    │    └── c:7
 │         │    │    │    │    │         │    │         └── a:5::FLOAT8 [type=float]
 │         │    │    │    │    │         │    ├── stats: [rows=2000, distinct(5)=2000, null(5)=0, distinct(6)=10, null(6)=0, distinct(7)=200, null(7)=20, distinct(8)=2000, null(8)=0]
 │         │    │    │    │    │         │    ├── key: (8)
 │         │    │    │    │    │         │    └── fd: (8)-->(5-7,9)
 │         │    │    │    │    │         └── filters
 │         │    │    │    │    │              └── c:7 = 1.0 [type=bool, outer=(7), constraints=(/7: [/1.0 - /1.0]; tight), fd=()-->(7)]
 │         │    │    │    │    └── projections
 │         │    │    │    │         └── NULL::FLOAT8 [as=column10:10, type=float, immutable]
 │         │    │    │    └── aggregations
 │         │    │    │         ├── first-agg [as=a:5, type=int, outer=(5)]
 │         │    │    │         │    └── a:5 [type=int]
 │         │    │    │         └── first-agg [as=column10:10, type=float, outer=(10)]
 │         │    │    │              └── column10:10 [type=float]
 │         │    │    ├── scan xyz
 │         │    │    │    ├── columns: xyz.x:11(string!null) xyz.y:12(int!null) xyz.z:13(float) xyz.crdb_internal_mvcc_timestamp:14(decimal)
 │         │    │    │    ├── stats: [rows=1000, distinct(11)=1000, null(11)=0]
 │         │    │    │    ├── key: (11)
 │         │    │    │    └── fd: (11)-->(12-14)
 │         │    │    └── filters
 │         │    │         └── b:6 = xyz.x:11 [type=bool, outer=(6,11), constraints=(/6: (/NULL - ]; /11: (/NULL - ]), fd=(6)==(11), (11)==(6)]
 │         │    └── projections
 │         │         └── 5 [as=y_new:15, type=int]
 │         └── projections
 │              ├── CASE WHEN xyz.x:11 IS NULL THEN b:6 ELSE xyz.x:11 END [as=upsert_x:16, type=string, outer=(6,11)]
 │              ├── CASE WHEN xyz.x:11 IS NULL THEN a:5 ELSE y_new:15 END [as=upsert_y:17, type=int, outer=(5,11,15)]
 │              └── CASE WHEN xyz.x:11 IS NULL THEN column10:10 ELSE xyz.z:13 END [as=upsert_z:18, type=float, outer=(10,11,13)]
 └── select
      ├── columns: x:19(string!null) y:20(int!null) z:21(float)
      ├── stats: [rows=1, distinct(20)=1, null(20)=0]
      ├── fd: ()-->(20)
      ├── with-scan &1
      │    ├── columns: x:19(string!null) y:20(int!null) z:21(float)
      │    ├── mapping:
      │    │    ├──  xyz.x:1(string) => x:19(string)
      │    │    ├──  xyz.y:2(int) => y:20(int)
      │    │    └──  xyz.z:3(float) => z:21(float)
      │    └── stats: [rows=9.94974874, distinct(19)=9.94974874, null(19)=0, distinct(20)=9.94974874, null(20)=0]
      └── filters
           └── y:20 = 10 [type=bool, outer=(20), constraints=(/20: [/10 - /10]; tight), fd=()-->(20)]

# Cardinality is zero.
build
UPSERT INTO xyz SELECT b, a FROM abc WHERE False RETURNING *
----
upsert xyz
 ├── columns: x:1(string!null) y:2(int!null) z:3(float)
 ├── upsert-mapping:
 │    ├── b:6 => x:1
 │    ├── a:5 => y:2
 │    └── column10:10 => z:3
 ├── cardinality: [0 - 0]
 ├── volatile, mutations
 ├── stats: [rows=0]
 ├── fd: ()-->(3)
 └── project
      ├── columns: column10:10(float) a:5(int!null) b:6(string)
      ├── cardinality: [0 - 0]
      ├── immutable
      ├── stats: [rows=0]
      ├── fd: ()-->(10)
      ├── project
      │    ├── columns: a:5(int!null) b:6(string)
      │    ├── cardinality: [0 - 0]
      │    ├── stats: [rows=0]
      │    └── select
      │         ├── columns: a:5(int!null) b:6(string) c:7(float) rowid:8(int!null) abc.crdb_internal_mvcc_timestamp:9(decimal)
      │         ├── cardinality: [0 - 0]
      │         ├── stats: [rows=0]
      │         ├── key: (8)
      │         ├── fd: (8)-->(5-7,9)
      │         ├── scan abc
      │         │    ├── columns: a:5(int!null) b:6(string) c:7(float) rowid:8(int!null) abc.crdb_internal_mvcc_timestamp:9(decimal)
      │         │    ├── computed column expressions
      │         │    │    └── c:7
      │         │    │         └── a:5::FLOAT8 [type=float]
      │         │    ├── stats: [rows=2000]
      │         │    ├── key: (8)
      │         │    └── fd: (8)-->(5-7,9)
      │         └── filters
      │              └── false [type=bool, constraints=(contradiction; tight)]
      └── projections
           └── NULL::FLOAT8 [as=column10:10, type=float, immutable]

# Nullable conflict column. Ensure that ensure-upsert-distinct-on passes through
# the input's null count.
build
INSERT INTO uv (v)
SELECT z::int FROM xyz
ON CONFLICT (v) DO UPDATE SET v=1
----
upsert uv
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── canary column: u:10(int)
 ├── fetch columns: u:10(int) v:11(int)
 ├── insert-mapping:
 │    ├── column9:9 => u:1
 │    └── z:8 => v:2
 ├── update-mapping:
 │    └── upsert_v:15 => v:2
 ├── cardinality: [0 - 0]
 ├── volatile, mutations
 ├── stats: [rows=0]
 └── project
      ├── columns: upsert_u:14(int) upsert_v:15(int) z:8(int) column9:9(int) u:10(int) v:11(int) uv.crdb_internal_mvcc_timestamp:12(decimal) v_new:13(int!null)
      ├── volatile
      ├── stats: [rows=1000]
      ├── lax-key: (8,10)
      ├── fd: ()-->(13), (8)~~>(9), (10)-->(11,12), (11)~~>(10,12), (9,10)-->(14), (8,10)-->(15), (8,10)~~>(9,14)
      ├── project
      │    ├── columns: v_new:13(int!null) z:8(int) column9:9(int) u:10(int) v:11(int) uv.crdb_internal_mvcc_timestamp:12(decimal)
      │    ├── volatile
      │    ├── stats: [rows=1000]
      │    ├── lax-key: (8,10)
      │    ├── fd: ()-->(13), (8)~~>(9), (10)-->(11,12), (11)~~>(10,12)
      │    ├── left-join (hash)
      │    │    ├── columns: z:8(int) column9:9(int) u:10(int) v:11(int) uv.crdb_internal_mvcc_timestamp:12(decimal)
      │    │    ├── multiplicity: left-rows(exactly-one), right-rows(zero-or-one)
      │    │    ├── volatile
      │    │    ├── stats: [rows=1000, distinct(11)=991, null(11)=0]
      │    │    ├── lax-key: (8,10)
      │    │    ├── fd: (8)~~>(9), (10)-->(11,12), (11)~~>(10,12)
      │    │    ├── ensure-upsert-distinct-on
      │    │    │    ├── columns: z:8(int) column9:9(int)
      │    │    │    ├── grouping columns: z:8(int)
      │    │    │    ├── error: "UPSERT or INSERT...ON CONFLICT command cannot affect row a second time"
      │    │    │    ├── volatile
      │    │    │    ├── stats: [rows=1000, distinct(8)=1000, null(8)=0]
      │    │    │    ├── lax-key: (8)
      │    │    │    ├── fd: (8)~~>(9)
      │    │    │    ├── project
      │    │    │    │    ├── columns: column9:9(int) z:8(int)
      │    │    │    │    ├── volatile
      │    │    │    │    ├── stats: [rows=1000, distinct(8)=100, null(8)=0]
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: z:8(int)
      │    │    │    │    │    ├── immutable
      │    │    │    │    │    ├── stats: [rows=1000, distinct(8)=100, null(8)=0]
      │    │    │    │    │    ├── scan xyz
      │    │    │    │    │    │    ├── columns: x:4(string!null) y:5(int!null) xyz.z:6(float) xyz.crdb_internal_mvcc_timestamp:7(decimal)
      │    │    │    │    │    │    ├── stats: [rows=1000, distinct(6)=100, null(6)=10]
      │    │    │    │    │    │    ├── key: (4)
      │    │    │    │    │    │    └── fd: (4)-->(5-7)
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── xyz.z:6::INT8 [as=z:8, type=int, outer=(6), immutable]
      │    │    │    │    └── projections
      │    │    │    │         └── unique_rowid() [as=column9:9, type=int, volatile]
      │    │    │    └── aggregations
      │    │    │         └── first-agg [as=column9:9, type=int, outer=(9)]
      │    │    │              └── column9:9 [type=int]
      │    │    ├── scan uv
      │    │    │    ├── columns: u:10(int!null) v:11(int) uv.crdb_internal_mvcc_timestamp:12(decimal)
      │    │    │    ├── stats: [rows=1000, distinct(11)=991, null(11)=10]
      │    │    │    ├── key: (10)
      │    │    │    └── fd: (10)-->(11,12), (11)~~>(10,12)
      │    │    └── filters
      │    │         └── z:8 = v:11 [type=bool, outer=(8,11), constraints=(/8: (/NULL - ]; /11: (/NULL - ]), fd=(8)==(11), (11)==(8)]
      │    └── projections
      │         └── 1 [as=v_new:13, type=int]
      └── projections
           ├── CASE WHEN u:10 IS NULL THEN column9:9 ELSE u:10 END [as=upsert_u:14, type=int, outer=(9,10)]
           └── CASE WHEN u:10 IS NULL THEN z:8 ELSE v_new:13 END [as=upsert_v:15, type=int, outer=(8,10,13)]

# Multiple conflict columns.
# TODO(andyk): The null counts for the left join are surprisingly high. It's due
# to the stats code deciding that the left join will only return a tiny number
# of matches, which then implies all non-matches are NULL (due to null extending
# behavior of left join). This will get better once we improve multi-column
# stats.
build
INSERT INTO mno
SELECT * FROM mno
ON CONFLICT (n, o) DO UPDATE SET o = 5
----
upsert mno
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── canary column: m:9(int)
 ├── fetch columns: m:9(int) n:10(int) o:11(int)
 ├── insert-mapping:
 │    ├── m:5 => m:1
 │    ├── n:6 => n:2
 │    └── o:7 => o:3
 ├── update-mapping:
 │    └── upsert_o:16 => o:3
 ├── cardinality: [0 - 0]
 ├── volatile, mutations
 ├── stats: [rows=0]
 └── project
      ├── columns: upsert_m:14(int) upsert_n:15(int) upsert_o:16(int) m:5(int!null) n:6(int) o:7(int) m:9(int) n:10(int) o:11(int) crdb_internal_mvcc_timestamp:12(decimal) o_new:13(int!null)
      ├── stats: [rows=2000]
      ├── key: (5,9)
      ├── fd: ()-->(13), (5)-->(6,7), (6,7)~~>(5), (9)-->(10-12), (10,11)~~>(9,12), (5,9)-->(14), (6,9)-->(15), (7,9)-->(16)
      ├── project
      │    ├── columns: o_new:13(int!null) m:5(int!null) n:6(int) o:7(int) m:9(int) n:10(int) o:11(int) crdb_internal_mvcc_timestamp:12(decimal)
      │    ├── stats: [rows=2000]
      │    ├── key: (5,9)
      │    ├── fd: ()-->(13), (5)-->(6,7), (6,7)~~>(5), (9)-->(10-12), (10,11)~~>(9,12)
      │    ├── left-join (hash)
      │    │    ├── columns: m:5(int!null) n:6(int) o:7(int) m:9(int) n:10(int) o:11(int) crdb_internal_mvcc_timestamp:12(decimal)
      │    │    ├── multiplicity: left-rows(exactly-one), right-rows(zero-or-one)
      │    │    ├── stats: [rows=2000, distinct(10)=21.0526316, null(10)=1988.94737, distinct(11)=21.0526316, null(11)=2000]
      │    │    ├── key: (5,9)
      │    │    ├── fd: (5)-->(6,7), (6,7)~~>(5), (9)-->(10-12), (10,11)~~>(9,12)
      │    │    ├── ensure-upsert-distinct-on
      │    │    │    ├── columns: m:5(int!null) n:6(int) o:7(int)
      │    │    │    ├── grouping columns: n:6(int) o:7(int)
      │    │    │    ├── error: "UPSERT or INSERT...ON CONFLICT command cannot affect row a second time"
      │    │    │    ├── stats: [rows=2000, distinct(5)=1981, null(5)=0, distinct(6)=100, null(6)=10, distinct(7)=1900, null(7)=100]
      │    │    │    ├── key: (5)
      │    │    │    ├── fd: (5)-->(6,7), (6,7)~~>(5)
      │    │    │    ├── project
      │    │    │    │    ├── columns: m:5(int!null) n:6(int) o:7(int)
      │    │    │    │    ├── stats: [rows=2000, distinct(6)=100, null(6)=10, distinct(7)=1900, null(7)=100, distinct(6,7)=1981, null(6,7)=20]
      │    │    │    │    ├── key: (5)
      │    │    │    │    ├── fd: (5)-->(6,7), (6,7)~~>(5)
      │    │    │    │    └── scan mno
      │    │    │    │         ├── columns: m:5(int!null) n:6(int) o:7(int) crdb_internal_mvcc_timestamp:8(decimal)
      │    │    │    │         ├── stats: [rows=2000, distinct(6)=100, null(6)=10, distinct(7)=1900, null(7)=100, distinct(6,7)=1981, null(6,7)=20]
      │    │    │    │         ├── key: (5)
      │    │    │    │         └── fd: (5)-->(6-8), (6,7)~~>(5,8)
      │    │    │    └── aggregations
      │    │    │         └── first-agg [as=m:5, type=int, outer=(5)]
      │    │    │              └── m:5 [type=int]
      │    │    ├── scan mno
      │    │    │    ├── columns: m:9(int!null) n:10(int) o:11(int) crdb_internal_mvcc_timestamp:12(decimal)
      │    │    │    ├── stats: [rows=2000, distinct(10)=100, null(10)=10, distinct(11)=1900, null(11)=100]
      │    │    │    ├── key: (9)
      │    │    │    └── fd: (9)-->(10-12), (10,11)~~>(9,12)
      │    │    └── filters
      │    │         ├── n:6 = n:10 [type=bool, outer=(6,10), constraints=(/6: (/NULL - ]; /10: (/NULL - ]), fd=(6)==(10), (10)==(6)]
      │    │         └── o:7 = o:11 [type=bool, outer=(7,11), constraints=(/7: (/NULL - ]; /11: (/NULL - ]), fd=(7)==(11), (11)==(7)]
      │    └── projections
      │         └── 5 [as=o_new:13, type=int]
      └── projections
           ├── CASE WHEN m:9 IS NULL THEN m:5 ELSE m:9 END [as=upsert_m:14, type=int, outer=(5,9)]
           ├── CASE WHEN m:9 IS NULL THEN n:6 ELSE n:10 END [as=upsert_n:15, type=int, outer=(6,9,10)]
           └── CASE WHEN m:9 IS NULL THEN o:7 ELSE o_new:13 END [as=upsert_o:16, type=int, outer=(7,9,13)]
