exec-ddl
CREATE TABLE abc (
    a INT NOT NULL,
    b TEXT DEFAULT ('foo'),
    c FLOAT AS (a::float) STORED
)
----

exec-ddl
ALTER TABLE abc INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  },
  {
    "columns": ["b"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 10
  }
]'
----

exec-ddl
CREATE TABLE xyz (
    x TEXT PRIMARY KEY,
    y INT8 NOT NULL,
    z FLOAT8
)
----

# Table with unique secondary index over nullable column.
exec-ddl
CREATE TABLE uv (
    u INT PRIMARY KEY DEFAULT unique_rowid(),
    v INT,
    UNIQUE (v)
)
----

# Table with multi-column key.
exec-ddl
CREATE TABLE mno (
    m INT PRIMARY KEY,
    n INT,
    o INT,
    UNIQUE (n, o)
)
----

exec-ddl
ALTER TABLE mno INJECT STATISTICS '[
  {
    "columns": ["m"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 100
  },
  {
    "columns": ["n"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 100,
    "null_count": 10
  },
  {
    "columns": ["o"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 1900,
    "null_count": 100
  }
]'
----

# Statistics should be derived from input columns and transferred to RETURNING
# columns.
build
SELECT *
FROM
[
	INSERT INTO xyz (x, y)
	SELECT b, a FROM abc WHERE c=1.0
	ON CONFLICT (x) DO UPDATE SET y=5
	RETURNING *
]
WHERE y=10
----
with &1
 ├── columns: x:16(string!null) y:17(int!null) z:18(float)
 ├── side-effects, mutations
 ├── stats: [rows=9.94974874, distinct(17)=0.994974874, null(17)=0]
 ├── fd: ()-->(17)
 ├── upsert xyz
 │    ├── columns: xyz.x:1(string!null) xyz.y:2(int!null) xyz.z:3(float)
 │    ├── canary column: 9
 │    ├── fetch columns: xyz.x:9(string) xyz.y:10(int) xyz.z:11(float)
 │    ├── insert-mapping:
 │    │    ├── b:5 => xyz.x:1
 │    │    ├── a:4 => xyz.y:2
 │    │    └── column8:8 => xyz.z:3
 │    ├── update-mapping:
 │    │    └── upsert_y:14 => xyz.y:2
 │    ├── return-mapping:
 │    │    ├── upsert_x:13 => xyz.x:1
 │    │    ├── upsert_y:14 => xyz.y:2
 │    │    └── upsert_z:15 => xyz.z:3
 │    ├── side-effects, mutations
 │    ├── stats: [rows=9.94974874]
 │    └── project
 │         ├── columns: upsert_x:13(string) upsert_y:14(int!null) upsert_z:15(float) a:4(int!null) b:5(string) column8:8(float) xyz.x:9(string) xyz.y:10(int) xyz.z:11(float) column12:12(int!null)
 │         ├── stats: [rows=9.94974874]
 │         ├── lax-key: (5,9)
 │         ├── fd: ()-->(8,12), (5)~~>(4), (9)-->(10,11), (5,9)-->(13), (4,9)-->(14), (5,9)~~>(4,14,15)
 │         ├── project
 │         │    ├── columns: column12:12(int!null) a:4(int!null) b:5(string) column8:8(float) xyz.x:9(string) xyz.y:10(int) xyz.z:11(float)
 │         │    ├── stats: [rows=9.94974874]
 │         │    ├── lax-key: (5,9)
 │         │    ├── fd: ()-->(8,12), (5)~~>(4), (9)-->(10,11)
 │         │    ├── left-join (hash)
 │         │    │    ├── columns: a:4(int!null) b:5(string) column8:8(float) xyz.x:9(string) xyz.y:10(int) xyz.z:11(float)
 │         │    │    ├── stats: [rows=9.94974874, distinct(9)=9.94974874, null(9)=0]
 │         │    │    ├── lax-key: (5,9)
 │         │    │    ├── fd: ()-->(8), (5)~~>(4), (9)-->(10,11)
 │         │    │    ├── upsert-distinct-on
 │         │    │    │    ├── columns: a:4(int!null) b:5(string) column8:8(float)
 │         │    │    │    ├── grouping columns: b:5(string)
 │         │    │    │    ├── error-on-dup
 │         │    │    │    ├── stats: [rows=9.94974874, distinct(4)=6.31184239, null(4)=0, distinct(5)=9.94974874, null(5)=0]
 │         │    │    │    ├── lax-key: (5)
 │         │    │    │    ├── fd: ()-->(8), (5)~~>(4,8)
 │         │    │    │    ├── project
 │         │    │    │    │    ├── columns: column8:8(float) a:4(int!null) b:5(string)
 │         │    │    │    │    ├── stats: [rows=9.94974874, distinct(5)=6.31184239, null(5)=0]
 │         │    │    │    │    ├── fd: ()-->(8)
 │         │    │    │    │    ├── project
 │         │    │    │    │    │    ├── columns: a:4(int!null) b:5(string)
 │         │    │    │    │    │    ├── stats: [rows=9.94974874, distinct(5)=6.31184239, null(5)=0]
 │         │    │    │    │    │    └── select
 │         │    │    │    │    │         ├── columns: a:4(int!null) b:5(string) c:6(float!null) rowid:7(int!null)
 │         │    │    │    │    │         ├── stats: [rows=9.94974874, distinct(5)=6.31184239, null(5)=0, distinct(6)=1, null(6)=0]
 │         │    │    │    │    │         ├── key: (7)
 │         │    │    │    │    │         ├── fd: ()-->(6), (7)-->(4,5)
 │         │    │    │    │    │         ├── scan abc
 │         │    │    │    │    │         │    ├── columns: a:4(int!null) b:5(string) c:6(float) rowid:7(int!null)
 │         │    │    │    │    │         │    ├── computed column expressions
 │         │    │    │    │    │         │    │    └── c:6
 │         │    │    │    │    │         │    │         └── a:4::FLOAT8 [type=float]
 │         │    │    │    │    │         │    ├── stats: [rows=2000, distinct(4)=2000, null(4)=0, distinct(5)=10, null(5)=0, distinct(6)=200, null(6)=20, distinct(7)=2000, null(7)=0]
 │         │    │    │    │    │         │    ├── key: (7)
 │         │    │    │    │    │         │    └── fd: (7)-->(4-6)
 │         │    │    │    │    │         └── filters
 │         │    │    │    │    │              └── c:6 = 1.0 [type=bool, outer=(6), constraints=(/6: [/1.0 - /1.0]; tight), fd=()-->(6)]
 │         │    │    │    │    └── projections
 │         │    │    │    │         └── NULL::FLOAT8 [as=column8:8, type=float]
 │         │    │    │    └── aggregations
 │         │    │    │         ├── first-agg [as=a:4, type=int, outer=(4)]
 │         │    │    │         │    └── a:4 [type=int]
 │         │    │    │         └── first-agg [as=column8:8, type=float, outer=(8)]
 │         │    │    │              └── column8:8 [type=float]
 │         │    │    ├── scan xyz
 │         │    │    │    ├── columns: xyz.x:9(string!null) xyz.y:10(int!null) xyz.z:11(float)
 │         │    │    │    ├── stats: [rows=1000, distinct(9)=1000, null(9)=0]
 │         │    │    │    ├── key: (9)
 │         │    │    │    └── fd: (9)-->(10,11)
 │         │    │    └── filters
 │         │    │         └── b:5 = xyz.x:9 [type=bool, outer=(5,9), constraints=(/5: (/NULL - ]; /9: (/NULL - ]), fd=(5)==(9), (9)==(5)]
 │         │    └── projections
 │         │         └── 5 [as=column12:12, type=int]
 │         └── projections
 │              ├── CASE WHEN xyz.x:9 IS NULL THEN b:5 ELSE xyz.x:9 END [as=upsert_x:13, type=string, outer=(5,9)]
 │              ├── CASE WHEN xyz.x:9 IS NULL THEN a:4 ELSE column12:12 END [as=upsert_y:14, type=int, outer=(4,9,12)]
 │              └── CASE WHEN xyz.x:9 IS NULL THEN column8:8 ELSE xyz.z:11 END [as=upsert_z:15, type=float, outer=(8,9,11)]
 └── select
      ├── columns: x:16(string!null) y:17(int!null) z:18(float)
      ├── stats: [rows=9.94974874, distinct(17)=0.994974874, null(17)=0]
      ├── fd: ()-->(17)
      ├── with-scan &1
      │    ├── columns: x:16(string!null) y:17(int!null) z:18(float)
      │    ├── mapping:
      │    │    ├──  xyz.x:1(string) => x:16(string)
      │    │    ├──  xyz.y:2(int) => y:17(int)
      │    │    └──  xyz.z:3(float) => z:18(float)
      │    └── stats: [rows=9.94974874, distinct(16)=0.994974874, null(16)=0, distinct(17)=0.994974874, null(17)=0]
      └── filters
           └── y:17 = 10 [type=bool, outer=(17), constraints=(/17: [/10 - /10]; tight), fd=()-->(17)]

# Cardinality is zero.
build
UPSERT INTO xyz SELECT b, a FROM abc WHERE False RETURNING *
----
upsert xyz
 ├── columns: x:1(string!null) y:2(int!null) z:3(float)
 ├── upsert-mapping:
 │    ├── b:5 => x:1
 │    ├── a:4 => y:2
 │    └── column8:8 => z:3
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 ├── stats: [rows=0]
 ├── fd: ()-->(3)
 └── project
      ├── columns: column8:8(float) a:4(int!null) b:5(string)
      ├── cardinality: [0 - 0]
      ├── stats: [rows=0]
      ├── fd: ()-->(8)
      ├── project
      │    ├── columns: a:4(int!null) b:5(string)
      │    ├── cardinality: [0 - 0]
      │    ├── stats: [rows=0]
      │    └── select
      │         ├── columns: a:4(int!null) b:5(string) c:6(float) rowid:7(int!null)
      │         ├── cardinality: [0 - 0]
      │         ├── stats: [rows=0]
      │         ├── key: (7)
      │         ├── fd: (7)-->(4-6)
      │         ├── scan abc
      │         │    ├── columns: a:4(int!null) b:5(string) c:6(float) rowid:7(int!null)
      │         │    ├── computed column expressions
      │         │    │    └── c:6
      │         │    │         └── a:4::FLOAT8 [type=float]
      │         │    ├── stats: [rows=2000]
      │         │    ├── key: (7)
      │         │    └── fd: (7)-->(4-6)
      │         └── filters
      │              └── false [type=bool]
      └── projections
           └── NULL::FLOAT8 [as=column8:8, type=float]

# Nullable conflict column. Ensure that upsert-distinct-on passes through the
# input's null count.
build
INSERT INTO uv (v)
SELECT z::int FROM xyz
ON CONFLICT (v) DO UPDATE SET v=1
----
upsert uv
 ├── columns: <none>
 ├── canary column: 8
 ├── fetch columns: u:8(int) v:9(int)
 ├── insert-mapping:
 │    ├── column7:7 => u:1
 │    └── z:6 => v:2
 ├── update-mapping:
 │    └── upsert_v:12 => v:2
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 ├── stats: [rows=0]
 └── project
      ├── columns: upsert_u:11(int) upsert_v:12(int) z:6(int) column7:7(int) u:8(int) v:9(int) column10:10(int!null)
      ├── side-effects
      ├── stats: [rows=1000]
      ├── lax-key: (6,8)
      ├── fd: ()-->(10), (6)~~>(7), (8)-->(9), (9)~~>(8), (7,8)-->(11), (6,8)-->(12), (6,8)~~>(7,11)
      ├── project
      │    ├── columns: column10:10(int!null) z:6(int) column7:7(int) u:8(int) v:9(int)
      │    ├── side-effects
      │    ├── stats: [rows=1000]
      │    ├── lax-key: (6,8)
      │    ├── fd: ()-->(10), (6)~~>(7), (8)-->(9), (9)~~>(8)
      │    ├── left-join (hash)
      │    │    ├── columns: z:6(int) column7:7(int) u:8(int) v:9(int)
      │    │    ├── side-effects
      │    │    ├── stats: [rows=1000, distinct(9)=991, null(9)=10]
      │    │    ├── lax-key: (6,8)
      │    │    ├── fd: (6)~~>(7), (8)-->(9), (9)~~>(8)
      │    │    ├── upsert-distinct-on
      │    │    │    ├── columns: z:6(int) column7:7(int)
      │    │    │    ├── grouping columns: z:6(int)
      │    │    │    ├── error-on-dup
      │    │    │    ├── side-effects
      │    │    │    ├── stats: [rows=1000, distinct(6)=1000, null(6)=10]
      │    │    │    ├── lax-key: (6)
      │    │    │    ├── fd: (6)~~>(7)
      │    │    │    ├── project
      │    │    │    │    ├── columns: column7:7(int) z:6(int)
      │    │    │    │    ├── side-effects
      │    │    │    │    ├── stats: [rows=1000, distinct(6)=100, null(6)=10]
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: z:6(int)
      │    │    │    │    │    ├── stats: [rows=1000, distinct(6)=100, null(6)=10]
      │    │    │    │    │    ├── scan xyz
      │    │    │    │    │    │    ├── columns: x:3(string!null) y:4(int!null) xyz.z:5(float)
      │    │    │    │    │    │    ├── stats: [rows=1000, distinct(5)=100, null(5)=10]
      │    │    │    │    │    │    ├── key: (3)
      │    │    │    │    │    │    └── fd: (3)-->(4,5)
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── xyz.z:5::INT8 [as=z:6, type=int, outer=(5)]
      │    │    │    │    └── projections
      │    │    │    │         └── unique_rowid() [as=column7:7, type=int, side-effects]
      │    │    │    └── aggregations
      │    │    │         └── first-agg [as=column7:7, type=int, outer=(7)]
      │    │    │              └── column7:7 [type=int]
      │    │    ├── scan uv
      │    │    │    ├── columns: u:8(int!null) v:9(int)
      │    │    │    ├── stats: [rows=1000, distinct(9)=991, null(9)=10]
      │    │    │    ├── key: (8)
      │    │    │    └── fd: (8)-->(9), (9)~~>(8)
      │    │    └── filters
      │    │         └── z:6 = v:9 [type=bool, outer=(6,9), constraints=(/6: (/NULL - ]; /9: (/NULL - ]), fd=(6)==(9), (9)==(6)]
      │    └── projections
      │         └── 1 [as=column10:10, type=int]
      └── projections
           ├── CASE WHEN u:8 IS NULL THEN column7:7 ELSE u:8 END [as=upsert_u:11, type=int, outer=(7,8)]
           └── CASE WHEN u:8 IS NULL THEN z:6 ELSE column10:10 END [as=upsert_v:12, type=int, outer=(6,8,10)]

# Multiple conflict columns.
# TODO(andyk): The null counts for the left join are surprisingly high. It's due
# to the stats code deciding that the left join will only return a tiny number
# of matches, which then implies all non-matches are NULL (due to null extending
# behavior of left join). This will get better once we improve multi-column
# stats.
build
INSERT INTO mno
SELECT * FROM mno
ON CONFLICT (n, o) DO UPDATE SET o = 5
----
upsert mno
 ├── columns: <none>
 ├── canary column: 7
 ├── fetch columns: m:7(int) n:8(int) o:9(int)
 ├── insert-mapping:
 │    ├── m:4 => m:1
 │    ├── n:5 => n:2
 │    └── o:6 => o:3
 ├── update-mapping:
 │    └── upsert_o:13 => o:3
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 ├── stats: [rows=0]
 └── project
      ├── columns: upsert_m:11(int) upsert_n:12(int) upsert_o:13(int) m:4(int!null) n:5(int) o:6(int) m:7(int) n:8(int) o:9(int) column10:10(int!null)
      ├── stats: [rows=2000]
      ├── key: (4,7)
      ├── fd: ()-->(10), (4)-->(5,6), (5,6)~~>(4), (7)-->(8,9), (8,9)~~>(7), (4,7)-->(11), (5,7,8)-->(12), (6,7)-->(13)
      ├── project
      │    ├── columns: column10:10(int!null) m:4(int!null) n:5(int) o:6(int) m:7(int) n:8(int) o:9(int)
      │    ├── stats: [rows=2000]
      │    ├── key: (4,7)
      │    ├── fd: ()-->(10), (4)-->(5,6), (5,6)~~>(4), (7)-->(8,9), (8,9)~~>(7)
      │    ├── left-join (hash)
      │    │    ├── columns: m:4(int!null) n:5(int) o:6(int) m:7(int) n:8(int) o:9(int)
      │    │    ├── stats: [rows=2000, distinct(8)=21.0526316, null(8)=1988.94737, distinct(9)=21.0526316, null(9)=2000]
      │    │    ├── key: (4,7)
      │    │    ├── fd: (4)-->(5,6), (5,6)~~>(4), (7)-->(8,9), (8,9)~~>(7)
      │    │    ├── upsert-distinct-on
      │    │    │    ├── columns: m:4(int!null) n:5(int) o:6(int)
      │    │    │    ├── grouping columns: n:5(int) o:6(int)
      │    │    │    ├── error-on-dup
      │    │    │    ├── stats: [rows=2000, distinct(4)=1981, null(4)=0, distinct(5)=100, null(5)=10, distinct(6)=1900, null(6)=100]
      │    │    │    ├── key: (4)
      │    │    │    ├── fd: (4)-->(5,6), (5,6)~~>(4)
      │    │    │    ├── scan mno
      │    │    │    │    ├── columns: m:4(int!null) n:5(int) o:6(int)
      │    │    │    │    ├── stats: [rows=2000, distinct(5)=100, null(5)=10, distinct(6)=1900, null(6)=100, distinct(5,6)=1981, null(5,6)=20]
      │    │    │    │    ├── key: (4)
      │    │    │    │    └── fd: (4)-->(5,6), (5,6)~~>(4)
      │    │    │    └── aggregations
      │    │    │         └── first-agg [as=m:4, type=int, outer=(4)]
      │    │    │              └── m:4 [type=int]
      │    │    ├── scan mno
      │    │    │    ├── columns: m:7(int!null) n:8(int) o:9(int)
      │    │    │    ├── stats: [rows=2000, distinct(8)=100, null(8)=10, distinct(9)=1900, null(9)=100]
      │    │    │    ├── key: (7)
      │    │    │    └── fd: (7)-->(8,9), (8,9)~~>(7)
      │    │    └── filters
      │    │         ├── n:5 = n:8 [type=bool, outer=(5,8), constraints=(/5: (/NULL - ]; /8: (/NULL - ]), fd=(5)==(8), (8)==(5)]
      │    │         └── o:6 = o:9 [type=bool, outer=(6,9), constraints=(/6: (/NULL - ]; /9: (/NULL - ]), fd=(6)==(9), (9)==(6)]
      │    └── projections
      │         └── 5 [as=column10:10, type=int]
      └── projections
           ├── CASE WHEN m:7 IS NULL THEN m:4 ELSE m:7 END [as=upsert_m:11, type=int, outer=(4,7)]
           ├── CASE WHEN m:7 IS NULL THEN n:5 ELSE n:8 END [as=upsert_n:12, type=int, outer=(5,7,8)]
           └── CASE WHEN m:7 IS NULL THEN o:6 ELSE column10:10 END [as=upsert_o:13, type=int, outer=(6,7,10)]
