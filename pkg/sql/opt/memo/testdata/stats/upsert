exec-ddl
CREATE TABLE abc (
    a INT NOT NULL,
    b TEXT DEFAULT ('foo'),
    c FLOAT AS (a::float) STORED
)
----

exec-ddl
ALTER TABLE abc INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  },
  {
    "columns": ["b"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 10
  }
]'
----

exec-ddl
CREATE TABLE xyz (
    x TEXT PRIMARY KEY,
    y INT8 NOT NULL,
    z FLOAT8
)
----

# Statistics should be derived from input columns and transferred to RETURNING
# columns.
build
SELECT *
FROM
[
	INSERT INTO xyz (x, y)
	SELECT b, a FROM abc WHERE b='foo'
	ON CONFLICT (x) DO UPDATE SET y=5
	RETURNING *
]
WHERE y=10
----
with &1
 ├── columns: x:16(string!null) y:17(int!null) z:18(float)
 ├── side-effects, mutations
 ├── stats: [rows=10, distinct(17)=1, null(17)=0]
 ├── fd: ()-->(17)
 ├── upsert xyz
 │    ├── columns: xyz.x:1(string!null) xyz.y:2(int!null) xyz.z:3(float)
 │    ├── canary column: 9
 │    ├── fetch columns: xyz.x:9(string) xyz.y:10(int) xyz.z:11(float)
 │    ├── insert-mapping:
 │    │    ├── b:5 => xyz.x:1
 │    │    ├── a:4 => xyz.y:2
 │    │    └── column8:8 => xyz.z:3
 │    ├── update-mapping:
 │    │    └── upsert_y:14 => xyz.y:2
 │    ├── return-mapping:
 │    │    ├── upsert_x:13 => xyz.x:1
 │    │    ├── upsert_y:14 => xyz.y:2
 │    │    └── upsert_z:15 => xyz.z:3
 │    ├── side-effects, mutations
 │    ├── stats: [rows=200]
 │    └── project
 │         ├── columns: upsert_x:13(string) upsert_y:14(int!null) upsert_z:15(float) a:4(int!null) b:5(string!null) column8:8(float) xyz.x:9(string) xyz.y:10(int) xyz.z:11(float) column12:12(int!null)
 │         ├── stats: [rows=200]
 │         ├── fd: ()-->(5,8,12), (9)-->(10,11), (9)-->(13), (4,9)-->(14)
 │         ├── project
 │         │    ├── columns: column12:12(int!null) a:4(int!null) b:5(string!null) column8:8(float) xyz.x:9(string) xyz.y:10(int) xyz.z:11(float)
 │         │    ├── stats: [rows=200]
 │         │    ├── fd: ()-->(5,8,12), (9)-->(10,11)
 │         │    ├── left-join (hash)
 │         │    │    ├── columns: a:4(int!null) b:5(string!null) column8:8(float) xyz.x:9(string) xyz.y:10(int) xyz.z:11(float)
 │         │    │    ├── stats: [rows=200, distinct(9)=1, null(9)=0]
 │         │    │    ├── fd: ()-->(5,8), (9)-->(10,11)
 │         │    │    ├── project
 │         │    │    │    ├── columns: column8:8(float) a:4(int!null) b:5(string!null)
 │         │    │    │    ├── stats: [rows=200, distinct(4)=200, null(4)=0, distinct(5)=1, null(5)=0]
 │         │    │    │    ├── fd: ()-->(5,8)
 │         │    │    │    ├── project
 │         │    │    │    │    ├── columns: a:4(int!null) b:5(string!null)
 │         │    │    │    │    ├── stats: [rows=200, distinct(4)=200, null(4)=0, distinct(5)=1, null(5)=0]
 │         │    │    │    │    ├── fd: ()-->(5)
 │         │    │    │    │    └── select
 │         │    │    │    │         ├── columns: a:4(int!null) b:5(string!null) c:6(float) rowid:7(int!null)
 │         │    │    │    │         ├── stats: [rows=200, distinct(4)=200, null(4)=0, distinct(5)=1, null(5)=0]
 │         │    │    │    │         ├── key: (7)
 │         │    │    │    │         ├── fd: ()-->(5), (7)-->(4,6)
 │         │    │    │    │         ├── scan abc
 │         │    │    │    │         │    ├── columns: a:4(int!null) b:5(string) c:6(float) rowid:7(int!null)
 │         │    │    │    │         │    ├── computed column expressions
 │         │    │    │    │         │    │    └── c:6
 │         │    │    │    │         │    │         └── a:4::FLOAT8 [type=float]
 │         │    │    │    │         │    ├── stats: [rows=2000, distinct(4)=2000, null(4)=0, distinct(5)=10, null(5)=0, distinct(7)=2000, null(7)=0]
 │         │    │    │    │         │    ├── key: (7)
 │         │    │    │    │         │    └── fd: (7)-->(4-6)
 │         │    │    │    │         └── filters
 │         │    │    │    │              └── b:5 = 'foo' [type=bool, outer=(5), constraints=(/5: [/'foo' - /'foo']; tight), fd=()-->(5)]
 │         │    │    │    └── projections
 │         │    │    │         └── NULL::FLOAT8 [as=column8:8, type=float]
 │         │    │    ├── scan xyz
 │         │    │    │    ├── columns: xyz.x:9(string!null) xyz.y:10(int!null) xyz.z:11(float)
 │         │    │    │    ├── stats: [rows=1000, distinct(9)=1000, null(9)=0]
 │         │    │    │    ├── key: (9)
 │         │    │    │    └── fd: (9)-->(10,11)
 │         │    │    └── filters
 │         │    │         └── b:5 = xyz.x:9 [type=bool, outer=(5,9), constraints=(/5: (/NULL - ]; /9: (/NULL - ]), fd=(5)==(9), (9)==(5)]
 │         │    └── projections
 │         │         └── 5 [as=column12:12, type=int]
 │         └── projections
 │              ├── CASE WHEN xyz.x:9 IS NULL THEN b:5 ELSE xyz.x:9 END [as=upsert_x:13, type=string, outer=(5,9)]
 │              ├── CASE WHEN xyz.x:9 IS NULL THEN a:4 ELSE column12:12 END [as=upsert_y:14, type=int, outer=(4,9,12)]
 │              └── CASE WHEN xyz.x:9 IS NULL THEN column8:8 ELSE xyz.z:11 END [as=upsert_z:15, type=float, outer=(8,9,11)]
 └── select
      ├── columns: x:16(string!null) y:17(int!null) z:18(float)
      ├── stats: [rows=10, distinct(17)=1, null(17)=0]
      ├── fd: ()-->(17)
      ├── with-scan &1
      │    ├── columns: x:16(string!null) y:17(int!null) z:18(float)
      │    ├── mapping:
      │    │    ├──  xyz.x:1(string) => x:16(string)
      │    │    ├──  xyz.y:2(int) => y:17(int)
      │    │    └──  xyz.z:3(float) => z:18(float)
      │    └── stats: [rows=200, distinct(16)=20, null(16)=0, distinct(17)=20, null(17)=0]
      └── filters
           └── y:17 = 10 [type=bool, outer=(17), constraints=(/17: [/10 - /10]; tight), fd=()-->(17)]

# Cardinality is zero.
build
UPSERT INTO xyz SELECT b, a FROM abc WHERE False RETURNING *
----
upsert xyz
 ├── columns: x:1(string!null) y:2(int!null) z:3(float)
 ├── upsert-mapping:
 │    ├── b:5 => x:1
 │    ├── a:4 => y:2
 │    └── column8:8 => z:3
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 ├── stats: [rows=0]
 ├── fd: ()-->(3)
 └── project
      ├── columns: column8:8(float) a:4(int!null) b:5(string)
      ├── cardinality: [0 - 0]
      ├── stats: [rows=0]
      ├── fd: ()-->(8)
      ├── project
      │    ├── columns: a:4(int!null) b:5(string)
      │    ├── cardinality: [0 - 0]
      │    ├── stats: [rows=0]
      │    └── select
      │         ├── columns: a:4(int!null) b:5(string) c:6(float) rowid:7(int!null)
      │         ├── cardinality: [0 - 0]
      │         ├── stats: [rows=0]
      │         ├── key: (7)
      │         ├── fd: (7)-->(4-6)
      │         ├── scan abc
      │         │    ├── columns: a:4(int!null) b:5(string) c:6(float) rowid:7(int!null)
      │         │    ├── computed column expressions
      │         │    │    └── c:6
      │         │    │         └── a:4::FLOAT8 [type=float]
      │         │    ├── stats: [rows=2000]
      │         │    ├── key: (7)
      │         │    └── fd: (7)-->(4-6)
      │         └── filters
      │              └── false [type=bool]
      └── projections
           └── NULL::FLOAT8 [as=column8:8, type=float]
