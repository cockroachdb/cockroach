exec-ddl
CREATE TABLE t (x INT PRIMARY KEY, v VECTOR(3));
----

exec-ddl
CREATE VECTOR INDEX ON t (v);
----

# VectorMutationSearch produces one output row for each input row.
build
INSERT INTO t VALUES (1, '[1, 2, 3]');
----
insert t
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:5 => x:1
 │    └── v_cast:7 => v:2
 ├── vector index put partition columns: vector_index_put_partition1:8(int)
 ├── vector index put quantized vector columns: vector_index_put_quantized_vec1:9(bytes)
 ├── cardinality: [0 - 0]
 ├── volatile, mutations
 ├── stats: [rows=0]
 └── vector-mutation-search t@t_v_idx,vector
      ├── columns: column1:5(int!null) v_cast:7(vector!null) vector_index_put_partition1:8(int) vector_index_put_quantized_vec1:9(bytes)
      ├── query vector column: v_cast:7
      ├── partition col: vector_index_put_partition1:8
      ├── quantized vector col: vector_index_put_quantized_vec1:9
      ├── cardinality: [1 - 1]
      ├── immutable
      ├── stats: [rows=1]
      ├── key: ()
      ├── fd: ()-->(5,7-9)
      └── project
           ├── columns: v_cast:7(vector!null) column1:5(int!null)
           ├── cardinality: [1 - 1]
           ├── immutable
           ├── stats: [rows=1]
           ├── key: ()
           ├── fd: ()-->(5,7)
           ├── values
           │    ├── columns: column1:5(int!null) column2:6(vector!null)
           │    ├── cardinality: [1 - 1]
           │    ├── stats: [rows=1]
           │    ├── key: ()
           │    ├── fd: ()-->(5,6)
           │    └── (1, '[1,2,3]') [type=tuple{int, vector}]
           └── projections
                └── assignment-cast: VECTOR(3) [as=v_cast:7, type=vector, outer=(6), immutable]
                     └── column2:6 [type=vector]

build
INSERT INTO t VALUES (1, '[1, 2, 3]'), (2, '[4, 5, 6]'), (3, '[7, 8, 9]');
----
insert t
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:5 => x:1
 │    └── v_cast:7 => v:2
 ├── vector index put partition columns: vector_index_put_partition1:8(int)
 ├── vector index put quantized vector columns: vector_index_put_quantized_vec1:9(bytes)
 ├── cardinality: [0 - 0]
 ├── volatile, mutations
 ├── stats: [rows=0]
 └── vector-mutation-search t@t_v_idx,vector
      ├── columns: column1:5(int!null) v_cast:7(vector!null) vector_index_put_partition1:8(int) vector_index_put_quantized_vec1:9(bytes)
      ├── query vector column: v_cast:7
      ├── partition col: vector_index_put_partition1:8
      ├── quantized vector col: vector_index_put_quantized_vec1:9
      ├── cardinality: [3 - 3]
      ├── immutable
      ├── stats: [rows=3]
      └── project
           ├── columns: v_cast:7(vector!null) column1:5(int!null)
           ├── cardinality: [3 - 3]
           ├── immutable
           ├── stats: [rows=3]
           ├── values
           │    ├── columns: column1:5(int!null) column2:6(vector!null)
           │    ├── cardinality: [3 - 3]
           │    ├── stats: [rows=3]
           │    ├── (1, '[1,2,3]') [type=tuple{int, vector}]
           │    ├── (2, '[4,5,6]') [type=tuple{int, vector}]
           │    └── (3, '[7,8,9]') [type=tuple{int, vector}]
           └── projections
                └── assignment-cast: VECTOR(3) [as=v_cast:7, type=vector, outer=(6), immutable]
                     └── column2:6 [type=vector]

# VectorSearch operators produce more candidates than requested by the LIMIT
# clause.
opt
SELECT * FROM t@t_v_idx ORDER BY v <-> '[1, 2, 3]' LIMIT 1;
----
top-k
 ├── columns: x:1(int!null) v:2(vector)  [hidden: column5:5(float)]
 ├── internal-ordering: +5
 ├── k: 1
 ├── cardinality: [0 - 1]
 ├── immutable
 ├── stats: [rows=1]
 ├── key: ()
 ├── fd: ()-->(1,2,5)
 └── project
      ├── columns: column5:5(float) x:1(int!null) v:2(vector)
      ├── immutable
      ├── stats: [rows=2]
      ├── key: (1)
      ├── fd: (1)-->(2), (2)-->(5)
      ├── index-join t
      │    ├── columns: x:1(int!null) v:2(vector)
      │    ├── stats: [rows=2]
      │    ├── key: (1)
      │    ├── fd: (1)-->(2)
      │    └── vector-search t@t_v_idx,vector
      │         ├── columns: x:1(int!null)
      │         ├── target nearest neighbors: 1
      │         ├── stats: [rows=2]
      │         ├── key: (1)
      │         └── '[1,2,3]' [type=vector]
      └── projections
           └── v:2 <-> '[1,2,3]' [as=column5:5, type=float, outer=(2), immutable]

opt
SELECT * FROM t@t_v_idx ORDER BY v <-> '[1, 2, 3]' LIMIT 5;
----
top-k
 ├── columns: x:1(int!null) v:2(vector)  [hidden: column5:5(float)]
 ├── internal-ordering: +5
 ├── k: 5
 ├── cardinality: [0 - 5]
 ├── immutable
 ├── stats: [rows=5]
 ├── key: (1)
 ├── fd: (1)-->(2), (2)-->(5)
 ├── ordering: +5
 └── project
      ├── columns: column5:5(float) x:1(int!null) v:2(vector)
      ├── immutable
      ├── stats: [rows=10]
      ├── key: (1)
      ├── fd: (1)-->(2), (2)-->(5)
      ├── index-join t
      │    ├── columns: x:1(int!null) v:2(vector)
      │    ├── stats: [rows=10]
      │    ├── key: (1)
      │    ├── fd: (1)-->(2)
      │    └── vector-search t@t_v_idx,vector
      │         ├── columns: x:1(int!null)
      │         ├── target nearest neighbors: 5
      │         ├── stats: [rows=10]
      │         ├── key: (1)
      │         └── '[1,2,3]' [type=vector]
      └── projections
           └── v:2 <-> '[1,2,3]' [as=column5:5, type=float, outer=(2), immutable]

# Test a limit that is higher than the number of rows in the table.
opt
SELECT * FROM t@t_v_idx ORDER BY v <-> '[1, 2, 3]' LIMIT 10000;
----
top-k
 ├── columns: x:1(int!null) v:2(vector)  [hidden: column5:5(float)]
 ├── internal-ordering: +5
 ├── k: 10000
 ├── cardinality: [0 - 10000]
 ├── immutable
 ├── stats: [rows=1000]
 ├── key: (1)
 ├── fd: (1)-->(2), (2)-->(5)
 ├── ordering: +5
 └── project
      ├── columns: column5:5(float) x:1(int!null) v:2(vector)
      ├── immutable
      ├── stats: [rows=1000]
      ├── key: (1)
      ├── fd: (1)-->(2), (2)-->(5)
      ├── index-join t
      │    ├── columns: x:1(int!null) v:2(vector)
      │    ├── stats: [rows=1000]
      │    ├── key: (1)
      │    ├── fd: (1)-->(2)
      │    └── vector-search t@t_v_idx,vector
      │         ├── columns: x:1(int!null)
      │         ├── target nearest neighbors: 10000
      │         ├── stats: [rows=1000]
      │         ├── key: (1)
      │         └── '[1,2,3]' [type=vector]
      └── projections
           └── v:2 <-> '[1,2,3]' [as=column5:5, type=float, outer=(2), immutable]
