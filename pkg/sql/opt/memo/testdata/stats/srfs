exec-ddl
CREATE TABLE xy (x INT PRIMARY KEY, y INT)
----
TABLE xy
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

opt colstat=1 colstat=2 colstat=3 colstat=4 colstat=5
SELECT a.*, b.*, c.* FROM upper('abc') a
JOIN ROWS FROM (upper('def'), generate_series(1, 3), upper('ghi')) b ON true
JOIN generate_series(1, 4) c ON true
----
inner-join
 ├── columns: a:1(string) upper:2(string) generate_series:3(int) upper:4(string) c:5(int)
 ├── side-effects
 ├── stats: [rows=100, distinct(1)=1, null(1)=0, distinct(2)=1, null(2)=90, distinct(3)=7, null(3)=1, distinct(4)=1, null(4)=90, distinct(5)=7, null(5)=1]
 ├── inner-join
 │    ├── columns: upper:1(string) upper:2(string) generate_series:3(int) upper:4(string)
 │    ├── side-effects
 │    ├── stats: [rows=10, distinct(1)=1, null(1)=0, distinct(2)=1, null(2)=9, distinct(3)=7, null(3)=0.1, distinct(4)=1, null(4)=9]
 │    ├── project-set
 │    │    ├── columns: upper:2(string) generate_series:3(int) upper:4(string)
 │    │    ├── side-effects
 │    │    ├── stats: [rows=10, distinct(2)=1, null(2)=9, distinct(3)=7, null(3)=0.1, distinct(4)=1, null(4)=9]
 │    │    ├── values
 │    │    │    ├── cardinality: [1 - 1]
 │    │    │    ├── stats: [rows=1]
 │    │    │    ├── key: ()
 │    │    │    └── tuple [type=tuple]
 │    │    └── zip
 │    │         ├── function: upper [type=string]
 │    │         │    └── const: 'def' [type=string]
 │    │         ├── function: generate_series [type=int, side-effects]
 │    │         │    ├── const: 1 [type=int]
 │    │         │    └── const: 3 [type=int]
 │    │         └── function: upper [type=string]
 │    │              └── const: 'ghi' [type=string]
 │    ├── project-set
 │    │    ├── columns: upper:1(string)
 │    │    ├── stats: [rows=1, distinct(1)=1, null(1)=0]
 │    │    ├── values
 │    │    │    ├── cardinality: [1 - 1]
 │    │    │    ├── stats: [rows=1]
 │    │    │    ├── key: ()
 │    │    │    └── tuple [type=tuple]
 │    │    └── zip
 │    │         └── function: upper [type=string]
 │    │              └── const: 'abc' [type=string]
 │    └── filters (true)
 ├── project-set
 │    ├── columns: generate_series:5(int)
 │    ├── side-effects
 │    ├── stats: [rows=10, distinct(5)=7, null(5)=0.1]
 │    ├── values
 │    │    ├── cardinality: [1 - 1]
 │    │    ├── stats: [rows=1]
 │    │    ├── key: ()
 │    │    └── tuple [type=tuple]
 │    └── zip
 │         └── function: generate_series [type=int, side-effects]
 │              ├── const: 1 [type=int]
 │              └── const: 4 [type=int]
 └── filters (true)

opt
SELECT * FROM (SELECT * FROM upper('abc') a, generate_series(1, 2) b) GROUP BY a, b
----
distinct-on
 ├── columns: a:1(string) b:2(int)
 ├── grouping columns: upper:1(string) generate_series:2(int)
 ├── side-effects
 ├── stats: [rows=7, distinct(1,2)=7, null(1,2)=0.1]
 ├── key: (1,2)
 └── inner-join
      ├── columns: upper:1(string) generate_series:2(int)
      ├── side-effects
      ├── stats: [rows=10, distinct(1,2)=7, null(1,2)=0.1]
      ├── project-set
      │    ├── columns: generate_series:2(int)
      │    ├── side-effects
      │    ├── stats: [rows=10, distinct(2)=7, null(2)=0.1]
      │    ├── values
      │    │    ├── cardinality: [1 - 1]
      │    │    ├── stats: [rows=1]
      │    │    ├── key: ()
      │    │    └── tuple [type=tuple]
      │    └── zip
      │         └── function: generate_series [type=int, side-effects]
      │              ├── const: 1 [type=int]
      │              └── const: 2 [type=int]
      ├── project-set
      │    ├── columns: upper:1(string)
      │    ├── stats: [rows=1, distinct(1)=1, null(1)=0]
      │    ├── values
      │    │    ├── cardinality: [1 - 1]
      │    │    ├── stats: [rows=1]
      │    │    ├── key: ()
      │    │    └── tuple [type=tuple]
      │    └── zip
      │         └── function: upper [type=string]
      │              └── const: 'abc' [type=string]
      └── filters (true)

opt colstat=3 colstat=(1,2,3)
SELECT unnest(ARRAY[x,y]) FROM xy
----
project
 ├── columns: unnest:3(int)
 ├── side-effects
 ├── stats: [rows=10000, distinct(3)=700, null(3)=100, distinct(1-3)=10000, null(1-3)=199]
 └── project-set
      ├── columns: x:1(int!null) y:2(int) unnest:3(int)
      ├── side-effects
      ├── stats: [rows=10000, distinct(3)=700, null(3)=100, distinct(1-3)=10000, null(1-3)=199]
      ├── fd: (1)-->(2)
      ├── scan xy
      │    ├── columns: x:1(int!null) y:2(int)
      │    ├── stats: [rows=1000, distinct(1,2)=990, null(1,2)=10]
      │    ├── key: (1)
      │    └── fd: (1)-->(2)
      └── zip
           └── function: unnest [type=int, outer=(1,2), side-effects]
                └── ARRAY[x, y] [type=int[]]

opt colstat=3 colstat=4 colstat=(3, 4) colstat=(1, 3) colstat=(2, 4)
SELECT xy.*, generate_series(x, y), generate_series(0, 1) FROM xy
----
project-set
 ├── columns: x:1(int!null) y:2(int) generate_series:3(int) generate_series:4(int)
 ├── side-effects
 ├── stats: [rows=10000, distinct(3)=700, null(3)=100, distinct(4)=7, null(4)=100, distinct(1,3)=10000, null(1,3)=100, distinct(2,4)=700, null(2,4)=199, distinct(3,4)=4900, null(3,4)=199]
 ├── fd: (1)-->(2)
 ├── scan xy
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── stats: [rows=1000, distinct(1)=1000, null(1)=0, distinct(2)=100, null(2)=10]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── zip
      ├── function: generate_series [type=int, outer=(1,2), side-effects]
      │    ├── variable: x [type=int]
      │    └── variable: y [type=int]
      └── function: generate_series [type=int, side-effects]
           ├── const: 0 [type=int]
           └── const: 1 [type=int]
