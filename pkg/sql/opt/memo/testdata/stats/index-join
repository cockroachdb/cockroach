exec-ddl
CREATE TABLE a (x INT PRIMARY KEY, y INT, s STRING, d DECIMAL NOT NULL, UNIQUE (s DESC, d))
----
TABLE a
 ├── x int not null
 ├── y int
 ├── s string
 ├── d decimal not null
 ├── INDEX primary
 │    └── x int not null
 └── INDEX secondary
      ├── s string desc
      ├── d decimal not null
      └── x int not null (storing)

exec-ddl
ALTER TABLE a INJECT STATISTICS '[
  {
    "columns": ["x"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  },
  {
    "columns": ["x","y"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  },
  {
    "columns": ["s"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 10
  },
  {
    "columns": ["y"],
    "created_at": "2018-01-01 1:40:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 100
  }
]'
----

# In order to actually create new logical props for the lookup join, we
# need to call ConstructLookupJoin, which only happens when where is a
# remaining filter.
opt
SELECT count(*) FROM (SELECT * FROM a WHERE s = 'foo' AND x + y = 10) GROUP BY s, y
----
project
 ├── columns: count:5(int)
 ├── stats: [rows=49.2384513]
 └── group-by
      ├── columns: y:2(int) count:5(int)
      ├── grouping columns: y:2(int)
      ├── stats: [rows=49.2384513, distinct(2)=49.2384513]
      ├── key: (2)
      ├── fd: (2)-->(5)
      ├── select
      │    ├── columns: x:1(int!null) y:2(int) s:3(string!null)
      │    ├── stats: [rows=66.6666667, distinct(2)=49.2384513, distinct(3)=1]
      │    ├── key: (1)
      │    ├── fd: ()-->(3), (1)-->(2)
      │    ├── index-join a
      │    │    ├── columns: x:1(int!null) y:2(int) s:3(string)
      │    │    ├── stats: [rows=200]
      │    │    ├── key: (1)
      │    │    ├── fd: ()-->(3), (1)-->(2)
      │    │    └── scan a@secondary
      │    │         ├── columns: x:1(int!null) s:3(string!null)
      │    │         ├── constraint: /-3/4: [/'foo' - /'foo']
      │    │         ├── stats: [rows=200, distinct(3)=1]
      │    │         ├── key: (1)
      │    │         └── fd: ()-->(3)
      │    └── filters [type=bool, outer=(1,2)]
      │         └── eq [type=bool, outer=(1,2)]
      │              ├── plus [type=int, outer=(1,2)]
      │              │    ├── variable: a.x [type=int, outer=(1)]
      │              │    └── variable: a.y [type=int, outer=(2)]
      │              └── const: 10 [type=int]
      └── aggregations
           └── count-rows [type=int]
