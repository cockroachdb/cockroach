exec-ddl
CREATE TABLE abc (
    a INT NOT NULL,
    b TEXT DEFAULT ('foo'),
    c FLOAT AS (a::float) STORED
)
----

exec-ddl
ALTER TABLE abc INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  },
  {
    "columns": ["b"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 10
  }
]'
----

exec-ddl
CREATE TABLE xyz (
    x TEXT PRIMARY KEY,
    y INT8 NOT NULL,
    z FLOAT8
)
----

# Statistics should be derived from INSERT input columns and transferred to
# RETURNING columns.
build
SELECT *
FROM [INSERT INTO xyz (x, y, z) SELECT b, a, c FROM abc WHERE b='foo' RETURNING *]
WHERE z > 1.0
----
with &1
 ├── columns: x:8(string!null) y:9(int!null) z:10(float!null)
 ├── side-effects, mutations
 ├── stats: [rows=69.4736842, distinct(10)=6.66666667, null(10)=0]
 ├── fd: ()-->(8)
 ├── insert xyz
 │    ├── columns: xyz.x:1(string!null) xyz.y:2(int!null) xyz.z:3(float)
 │    ├── insert-mapping:
 │    │    ├── b:5 => xyz.x:1
 │    │    ├── a:4 => xyz.y:2
 │    │    └── c:6 => xyz.z:3
 │    ├── side-effects, mutations
 │    ├── stats: [rows=200]
 │    ├── fd: ()-->(1)
 │    └── project
 │         ├── columns: a:4(int!null) b:5(string!null) c:6(float)
 │         ├── stats: [rows=200]
 │         ├── fd: ()-->(5)
 │         └── select
 │              ├── columns: a:4(int!null) b:5(string!null) c:6(float) rowid:7(int!null)
 │              ├── stats: [rows=200, distinct(5)=1, null(5)=0]
 │              ├── key: (7)
 │              ├── fd: ()-->(5), (7)-->(4,6)
 │              ├── scan abc
 │              │    ├── columns: a:4(int!null) b:5(string) c:6(float) rowid:7(int!null)
 │              │    ├── computed column expressions
 │              │    │    └── c:6
 │              │    │         └── a:4::FLOAT8 [type=float]
 │              │    ├── stats: [rows=2000, distinct(4)=2000, null(4)=0, distinct(5)=10, null(5)=0, distinct(7)=2000, null(7)=0]
 │              │    ├── key: (7)
 │              │    └── fd: (7)-->(4-6)
 │              └── filters
 │                   └── b:5 = 'foo' [type=bool, outer=(5), constraints=(/5: [/'foo' - /'foo']; tight), fd=()-->(5)]
 └── select
      ├── columns: x:8(string!null) y:9(int!null) z:10(float!null)
      ├── stats: [rows=69.4736842, distinct(10)=6.66666667, null(10)=0]
      ├── fd: ()-->(8)
      ├── with-scan &1
      │    ├── columns: x:8(string!null) y:9(int!null) z:10(float)
      │    ├── mapping:
      │    │    ├──  xyz.x:1(string) => x:8(string)
      │    │    ├──  xyz.y:2(int) => y:9(int)
      │    │    └──  xyz.z:3(float) => z:10(float)
      │    ├── stats: [rows=200, distinct(8)=20, null(8)=0, distinct(9)=20, null(9)=0, distinct(10)=20, null(10)=2]
      │    └── fd: ()-->(8)
      └── filters
           └── z:10 > 1.0 [type=bool, outer=(10), constraints=(/10: [/1.0000000000000002 - ]; tight)]

# Cardinality is zero.
build
INSERT INTO xyz (x, y, z) SELECT b, a, c FROM abc WHERE False RETURNING *
----
insert xyz
 ├── columns: x:1(string!null) y:2(int!null) z:3(float)
 ├── insert-mapping:
 │    ├── b:5 => x:1
 │    ├── a:4 => y:2
 │    └── c:6 => z:3
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 ├── stats: [rows=0]
 └── project
      ├── columns: a:4(int!null) b:5(string) c:6(float)
      ├── cardinality: [0 - 0]
      ├── stats: [rows=0]
      └── select
           ├── columns: a:4(int!null) b:5(string) c:6(float) rowid:7(int!null)
           ├── cardinality: [0 - 0]
           ├── stats: [rows=0]
           ├── key: (7)
           ├── fd: (7)-->(4-6)
           ├── scan abc
           │    ├── columns: a:4(int!null) b:5(string) c:6(float) rowid:7(int!null)
           │    ├── computed column expressions
           │    │    └── c:6
           │    │         └── a:4::FLOAT8 [type=float]
           │    ├── stats: [rows=2000]
           │    ├── key: (7)
           │    └── fd: (7)-->(4-6)
           └── filters
                └── false [type=bool]
