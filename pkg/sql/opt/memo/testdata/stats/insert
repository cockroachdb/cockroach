exec-ddl
CREATE TABLE abc (
    a INT NOT NULL,
    b TEXT DEFAULT ('foo'),
    c FLOAT AS (a::float) STORED
)
----

exec-ddl
ALTER TABLE abc INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  },
  {
    "columns": ["b"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 10
  }
]'
----

exec-ddl
CREATE TABLE xyz (
    x TEXT PRIMARY KEY,
    y INT8 NOT NULL,
    z FLOAT8
)
----

# Statistics should be derived from INSERT input columns and transferred to
# RETURNING columns.
build
SELECT *
FROM [INSERT INTO xyz (x, y, z) SELECT b, a, c FROM abc WHERE b='foo' RETURNING *]
WHERE z > 1.0
----
with &1
 ├── columns: x:12(string!null) y:13(int!null) z:14(float!null)
 ├── volatile, mutations
 ├── stats: [rows=66.51058, distinct(14)=43.4214, null(14)=0]
 ├── fd: ()-->(12), (13)-->(14)
 ├── insert xyz
 │    ├── columns: xyz.x:1(string!null) xyz.y:2(int!null) xyz.z:3(float)
 │    ├── insert-mapping:
 │    │    ├── b:7 => xyz.x:1
 │    │    ├── a:6 => xyz.y:2
 │    │    └── c:8 => xyz.z:3
 │    ├── return-mapping:
 │    │    ├── b:7 => xyz.x:1
 │    │    ├── a:6 => xyz.y:2
 │    │    └── c:8 => xyz.z:3
 │    ├── volatile, mutations
 │    ├── stats: [rows=200, distinct(1)=1, null(1)=0, distinct(2)=200, null(2)=0, distinct(3)=130.264, null(3)=2]
 │    ├── fd: ()-->(1), (2)-->(3)
 │    └── project
 │         ├── columns: a:6(int!null) b:7(string!null) c:8(float)
 │         ├── stats: [rows=200, distinct(6)=200, null(6)=0, distinct(7)=1, null(7)=0, distinct(8)=130.264, null(8)=2]
 │         ├── fd: ()-->(7), (6)-->(8)
 │         └── select
 │              ├── columns: a:6(int!null) b:7(string!null) c:8(float) rowid:9(int!null) abc.crdb_internal_mvcc_timestamp:10(decimal) abc.tableoid:11(oid)
 │              ├── stats: [rows=200, distinct(6)=200, null(6)=0, distinct(7)=1, null(7)=0, distinct(8)=130.264, null(8)=2]
 │              ├── key: (9)
 │              ├── fd: ()-->(7), (9)-->(6,8,10,11), (6)-->(8)
 │              ├── scan abc
 │              │    ├── columns: a:6(int!null) b:7(string) c:8(float) rowid:9(int!null) abc.crdb_internal_mvcc_timestamp:10(decimal) abc.tableoid:11(oid)
 │              │    ├── computed column expressions
 │              │    │    └── c:8
 │              │    │         └── a:6::FLOAT8 [type=float]
 │              │    ├── stats: [rows=2000, distinct(6)=2000, null(6)=0, distinct(7)=10, null(7)=0, distinct(8)=200, null(8)=20, distinct(9)=2000, null(9)=0]
 │              │    ├── key: (9)
 │              │    └── fd: (9)-->(6-8,10,11), (6)-->(8)
 │              └── filters
 │                   └── b:7 = 'foo' [type=bool, outer=(7), constraints=(/7: [/'foo' - /'foo']; tight), fd=()-->(7)]
 └── select
      ├── columns: x:12(string!null) y:13(int!null) z:14(float!null)
      ├── stats: [rows=66.51058, distinct(14)=43.4214, null(14)=0]
      ├── fd: ()-->(12), (13)-->(14)
      ├── with-scan &1
      │    ├── columns: x:12(string!null) y:13(int!null) z:14(float)
      │    ├── mapping:
      │    │    ├──  xyz.x:1(string) => x:12(string)
      │    │    ├──  xyz.y:2(int) => y:13(int)
      │    │    └──  xyz.z:3(float) => z:14(float)
      │    ├── stats: [rows=200, distinct(12)=1, null(12)=0, distinct(13)=200, null(13)=0, distinct(14)=130.264, null(14)=2]
      │    └── fd: ()-->(12), (13)-->(14)
      └── filters
           └── z:14 > 1.0 [type=bool, outer=(14), constraints=(/14: [/1.0000000000000002 - ]; tight)]

# Cardinality is zero.
build
INSERT INTO xyz (x, y, z) SELECT b, a, c FROM abc WHERE False RETURNING *
----
insert xyz
 ├── columns: x:1(string!null) y:2(int!null) z:3(float)
 ├── insert-mapping:
 │    ├── b:7 => x:1
 │    ├── a:6 => y:2
 │    └── c:8 => z:3
 ├── return-mapping:
 │    ├── b:7 => x:1
 │    ├── a:6 => y:2
 │    └── c:8 => z:3
 ├── cardinality: [0 - 0]
 ├── volatile, mutations
 ├── stats: [rows=0]
 ├── fd: (2)-->(3)
 └── project
      ├── columns: a:6(int!null) b:7(string) c:8(float)
      ├── cardinality: [0 - 0]
      ├── stats: [rows=0]
      ├── fd: (6)-->(8)
      └── select
           ├── columns: a:6(int!null) b:7(string) c:8(float) rowid:9(int!null) abc.crdb_internal_mvcc_timestamp:10(decimal) abc.tableoid:11(oid)
           ├── cardinality: [0 - 0]
           ├── stats: [rows=0]
           ├── key: (9)
           ├── fd: (9)-->(6-8,10,11), (6)-->(8)
           ├── scan abc
           │    ├── columns: a:6(int!null) b:7(string) c:8(float) rowid:9(int!null) abc.crdb_internal_mvcc_timestamp:10(decimal) abc.tableoid:11(oid)
           │    ├── computed column expressions
           │    │    └── c:8
           │    │         └── a:6::FLOAT8 [type=float]
           │    ├── stats: [rows=2000]
           │    ├── key: (9)
           │    └── fd: (9)-->(6-8,10,11), (6)-->(8)
           └── filters
                └── false [type=bool, constraints=(contradiction; tight)]

exec-ddl
CREATE TABLE p137547 (
  region STRING,
  id STRING,
  i INT,
  s STRING,
  PRIMARY KEY (region, id),
  UNIQUE INDEX (region, i)
)
----

exec-ddl
CREATE TABLE c137547 (
  region STRING,
  id STRING,
  p_id STRING,
  PRIMARY KEY (region, id),
  FOREIGN KEY (region, p_id) REFERENCES p137547 (region, id)
)
----

exec-ddl
ALTER TABLE p137547 INJECT STATISTICS '[
  {
    "avg_size": 1500,
    "columns": ["s"],
    "created_at": "2024-11-29 16:18:00.835616",
    "distinct_count": 14000000,
    "null_count": 0,
    "row_count": 14000000
  }
]';
----

# Regression test for #137547. Estimate that the FK check WithScan produces at
# least 1 row to avoid a lookup into the secondary index of p137547 using just
# the region column.
opt locality=(region=us)
INSERT INTO c137547 VALUES ('us', 'foo', 'foo') ON CONFLICT DO NOTHING
----
insert c137547
 ├── arbiter indexes: c137547_pkey
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:6 => c137547.region:1
 │    ├── column2:7 => c137547.id:2
 │    └── column3:8 => c137547.p_id:3
 ├── input binding: &1
 ├── cardinality: [0 - 0]
 ├── volatile, mutations
 ├── stats: [rows=0]
 ├── distribution: us
 ├── anti-join (cross)
 │    ├── columns: column1:6(string!null) column2:7(string!null) column3:8(string!null)
 │    ├── cardinality: [0 - 1]
 │    ├── stats: [rows=1e-10, distinct(6)=1e-10, null(6)=0, distinct(8)=1e-10, null(8)=0]
 │    ├── key: ()
 │    ├── fd: ()-->(6-8)
 │    ├── distribution: us
 │    ├── values
 │    │    ├── columns: column1:6(string!null) column2:7(string!null) column3:8(string!null)
 │    │    ├── cardinality: [1 - 1]
 │    │    ├── stats: [rows=1, distinct(6)=1, null(6)=0, distinct(8)=1, null(8)=0]
 │    │    ├── key: ()
 │    │    ├── fd: ()-->(6-8)
 │    │    ├── distribution: us
 │    │    └── ('us', 'foo', 'foo') [type=tuple{string, string, string}]
 │    ├── scan c137547
 │    │    ├── columns: c137547.region:9(string!null) c137547.id:10(string!null)
 │    │    ├── constraint: /9/10: [/'us'/'foo' - /'us'/'foo']
 │    │    ├── flags: avoid-full-scan
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── stats: [rows=0.91, distinct(9)=0.91, null(9)=0, distinct(10)=0.91, null(10)=0, distinct(9,10)=0.91, null(9,10)=0]
 │    │    ├── key: ()
 │    │    ├── fd: ()-->(9,10)
 │    │    └── distribution: us
 │    └── filters (true)
 └── f-k-checks
      └── f-k-checks-item: c137547(region,p_id) -> p137547(region,id)
           └── anti-join (lookup p137547)
                ├── columns: region:14(string!null) p_id:15(string!null)
                ├── key columns: [14 15] = [16 17]
                ├── lookup columns are key
                ├── cardinality: [0 - 1]
                ├── stats: [rows=1e-10]
                ├── key: ()
                ├── fd: ()-->(14,15)
                ├── distribution: us
                ├── with-scan &1
                │    ├── columns: region:14(string!null) p_id:15(string!null)
                │    ├── mapping:
                │    │    ├──  column1:6(string) => region:14(string)
                │    │    └──  column3:8(string) => p_id:15(string)
                │    ├── cardinality: [0 - 1]
                │    ├── stats: [rows=1, distinct(14)=1e-10, null(14)=0, distinct(15)=1e-10, null(15)=0]
                │    ├── key: ()
                │    ├── fd: ()-->(14,15)
                │    └── distribution: us
                └── filters (true)
