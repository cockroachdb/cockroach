exec-ddl
CREATE TABLE a (x INT PRIMARY KEY, y INT, s STRING, d DECIMAL NOT NULL, UNIQUE (s DESC, d))
----
TABLE a
 ├── x int not null
 ├── y int
 ├── s string
 ├── d decimal not null
 ├── INDEX primary
 │    └── x int not null
 └── INDEX secondary
      ├── s string desc
      ├── d decimal not null
      └── x int not null (storing)

exec-ddl
ALTER TABLE a INJECT STATISTICS '[
  {
    "columns": ["x"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  },
  {
    "columns": ["x","y"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  },
  {
    "columns": ["s"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 10
  },
  {
    "columns": ["s","y"],
    "created_at": "2018-01-01 1:40:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 100
  }
]'
----

build
SELECT x FROM a
----
project
 ├── columns: x:1(int!null)
 ├── stats: [rows=2000]
 ├── keys: (1)
 └── scan a
      ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
      ├── stats: [rows=2000]
      └── keys: (1) weak(3,4)

build
SELECT y, s FROM a
----
project
 ├── columns: y:2(int) s:3(string)
 ├── stats: [rows=2000]
 └── scan a
      ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
      ├── stats: [rows=2000]
      └── keys: (1) weak(3,4)

build
SELECT count(*) FROM (SELECT x, y FROM a) GROUP BY x, y
----
project
 ├── columns: count:5(int)
 ├── stats: [rows=2000]
 └── group-by
      ├── columns: x:1(int!null) y:2(int) count:5(int)
      ├── grouping columns: x:1(int!null) y:2(int)
      ├── stats: [rows=2000, distinct(1,2)=2000]
      ├── keys: (1)
      ├── project
      │    ├── columns: x:1(int!null) y:2(int)
      │    ├── stats: [rows=2000, distinct(1,2)=2000]
      │    ├── keys: (1)
      │    └── scan a
      │         ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
      │         ├── stats: [rows=2000, distinct(1,2)=2000]
      │         └── keys: (1) weak(3,4)
      └── aggregations
           └── count-rows [type=int]

# Test that the stats are calculated correctly for synthesized columns.
build
SELECT * FROM (SELECT concat(s, y::string) FROM a) AS q(v) WHERE v = 'foo'
----
select
 ├── columns: v:5(string!null)
 ├── stats: [rows=20, distinct(5)=1]
 ├── project
 │    ├── columns: concat:5(string)
 │    ├── stats: [rows=2000, distinct(5)=100]
 │    ├── scan a
 │    │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 │    │    ├── stats: [rows=2000, distinct(2,3)=100]
 │    │    └── keys: (1) weak(3,4)
 │    └── projections [outer=(2,3)]
 │         └── function: concat [type=string, outer=(2,3)]
 │              ├── variable: a.s [type=string, outer=(3)]
 │              └── cast: STRING [type=string, outer=(2)]
 │                   └── variable: a.y [type=int, outer=(2)]
 └── filters [type=bool, outer=(5), constraints=(/5: [/'foo' - /'foo']; tight)]
      └── eq [type=bool, outer=(5), constraints=(/5: [/'foo' - /'foo']; tight)]
           ├── variable: concat [type=string, outer=(5)]
           └── const: 'foo' [type=string]

# Test that stats for synthesized and non-synthesized columns are combined.
build
SELECT * FROM (SELECT concat(s, y::string), x FROM a) AS q(v, x) GROUP BY v, x
----
group-by
 ├── columns: v:5(string) x:1(int!null)
 ├── grouping columns: x:1(int!null) concat:5(string)
 ├── stats: [rows=2000, distinct(1,5)=2000]
 ├── keys: (1)
 └── project
      ├── columns: concat:5(string) x:1(int!null)
      ├── stats: [rows=2000, distinct(1,5)=2000]
      ├── keys: (1)
      ├── scan a
      │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
      │    ├── stats: [rows=2000, distinct(1-3)=2000]
      │    └── keys: (1) weak(3,4)
      └── projections [outer=(1-3)]
           └── function: concat [type=string, outer=(2,3)]
                ├── variable: a.s [type=string, outer=(3)]
                └── cast: STRING [type=string, outer=(2)]
                     └── variable: a.y [type=int, outer=(2)]

# No available stats for column y.
build
SELECT * FROM (SELECT y + 3 AS v FROM a) WHERE v >= 1 AND v <= 100
----
select
 ├── columns: v:5(int!null)
 ├── stats: [rows=142, distinct(5)=100]
 ├── project
 │    ├── columns: v:5(int)
 │    ├── stats: [rows=2000, distinct(5)=1400]
 │    ├── scan a
 │    │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 │    │    ├── stats: [rows=2000, distinct(2)=1400]
 │    │    └── keys: (1) weak(3,4)
 │    └── projections [outer=(2)]
 │         └── plus [type=int, outer=(2)]
 │              ├── variable: a.y [type=int, outer=(2)]
 │              └── const: 3 [type=int]
 └── filters [type=bool, outer=(5), constraints=(/5: [/1 - /100]; tight)]
      └── and [type=bool, outer=(5), constraints=(/5: [/1 - /100]; tight)]
           ├── ge [type=bool, outer=(5), constraints=(/5: [/1 - ]; tight)]
           │    ├── variable: v [type=int, outer=(5)]
           │    └── const: 1 [type=int]
           └── le [type=bool, outer=(5), constraints=(/5: (/NULL - /100]; tight)]
                ├── variable: v [type=int, outer=(5)]
                └── const: 100 [type=int]

exec-ddl
CREATE TABLE kuv (k INT PRIMARY KEY, u FLOAT, v STRING)
----
TABLE kuv
 ├── k int not null
 ├── u float
 ├── v string
 └── INDEX primary
      └── k int not null

exec-ddl
ALTER TABLE kuv INJECT STATISTICS '[
  {
    "columns": ["k"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  },
  {
    "columns": ["v"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 10
  }
]'
----

# Correlated subquery.
build
SELECT * FROM a WHERE EXISTS (SELECT s < v FROM kuv GROUP BY s < v)
----
select
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 ├── stats: [rows=666]
 ├── keys: (1) weak(3,4)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 │    ├── stats: [rows=2000]
 │    └── keys: (1) weak(3,4)
 └── filters [type=bool, outer=(3)]
      └── exists [type=bool, outer=(3)]
           └── group-by
                ├── columns: column8:8(bool)
                ├── grouping columns: column8:8(bool)
                ├── outer: (3)
                ├── stats: [rows=10, distinct(8)=10]
                ├── keys: weak(8)
                └── project
                     ├── columns: column8:8(bool)
                     ├── outer: (3)
                     ├── stats: [rows=2000, distinct(8)=10]
                     ├── scan kuv
                     │    ├── columns: k:5(int!null) u:6(float) v:7(string)
                     │    ├── stats: [rows=2000, distinct(7)=10]
                     │    └── keys: (5)
                     └── projections [outer=(3,7)]
                          └── lt [type=bool, outer=(3,7)]
                               ├── variable: a.s [type=string, outer=(3)]
                               └── variable: kuv.v [type=string, outer=(7)]
