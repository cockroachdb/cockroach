exec-ddl
CREATE TABLE a (x INT PRIMARY KEY, y INT, s STRING)
----

exec-ddl
ALTER TABLE a INJECT STATISTICS '[
  {
    "columns": ["x"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 5000,
    "distinct_count": 5000
  },
  {
    "columns": ["y"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 5000,
    "distinct_count": 400
  },
  {
    "columns": ["s"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 5000,
    "distinct_count": 10
  },
  {
    "columns": ["y","s"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 5000,
    "distinct_count": 1000
  }
]'
----

build colstat=5 colstat=6 colstat=7 disable=InlineWith
WITH foo AS (SELECT * FROM a) SELECT * FROM foo
----
with &1 (foo)
 ├── columns: x:5(int!null) y:6(int) s:7(string)
 ├── stats: [rows=5000]
 ├── key: (5)
 ├── fd: (5)-->(6,7)
 ├── project
 │    ├── columns: a.x:1(int!null) a.y:2(int) a.s:3(string)
 │    ├── stats: [rows=5000, distinct(1)=5000, null(1)=0, distinct(2)=400, null(2)=0, distinct(3)=10, null(3)=0]
 │    ├── key: (1)
 │    ├── fd: (1)-->(2,3)
 │    └── scan a
 │         ├── columns: a.x:1(int!null) a.y:2(int) a.s:3(string) crdb_internal_mvcc_timestamp:4(decimal)
 │         ├── stats: [rows=5000, distinct(1)=5000, null(1)=0, distinct(2)=400, null(2)=0, distinct(3)=10, null(3)=0]
 │         ├── key: (1)
 │         └── fd: (1)-->(2-4)
 └── with-scan &1 (foo)
      ├── columns: x:5(int!null) y:6(int) s:7(string)
      ├── mapping:
      │    ├──  a.x:1(int) => x:5(int)
      │    ├──  a.y:2(int) => y:6(int)
      │    └──  a.s:3(string) => s:7(string)
      ├── stats: [rows=5000, distinct(5)=5000, null(5)=0, distinct(6)=400, null(6)=0, distinct(7)=10, null(7)=0]
      ├── key: (5)
      └── fd: (5)-->(6,7)

# Regression test for #40296.
opt disable=InlineWith
WITH
  t0 AS ((VALUES (0, 0:::OID, NULL, '')) UNION (VALUES (NULL, 0:::OID,'1970-09-08'::DATE, NULL)))
SELECT
  NULL
FROM
  a, t0
WHERE
  EXISTS(
    WITH
      t1 AS (SELECT NULL)
    SELECT
      t0.column2, a.y
  );
----
with &1 (t0)
 ├── columns: "?column?":28(unknown)
 ├── stats: [rows=10000]
 ├── fd: ()-->(28)
 ├── union
 │    ├── columns: column1:10(int) column2:11(oid!null) column3:12(date) column4:13(string)
 │    ├── left columns: column1:1(int) column2:2(oid) column3:9(date) column4:4(string)
 │    ├── right columns: column1:5(int) column2:6(oid) column3:7(date) column4:8(string)
 │    ├── cardinality: [1 - 2]
 │    ├── stats: [rows=2, distinct(10-13)=2, null(10-13)=0]
 │    ├── key: (10-13)
 │    ├── values
 │    │    ├── columns: column1:1(int!null) column2:2(oid!null) column4:4(string!null) column3:9(date)
 │    │    ├── cardinality: [1 - 1]
 │    │    ├── stats: [rows=1, distinct(1,2,4,9)=1, null(1,2,4,9)=0]
 │    │    ├── key: ()
 │    │    ├── fd: ()-->(1,2,4,9)
 │    │    └── (0, 0, '', NULL) [type=tuple{int, oid, string, date}]
 │    └── values
 │         ├── columns: column1:5(int) column2:6(oid!null) column3:7(date!null) column4:8(string)
 │         ├── cardinality: [1 - 1]
 │         ├── stats: [rows=1, distinct(5-8)=1, null(5-8)=0]
 │         ├── key: ()
 │         ├── fd: ()-->(5-8)
 │         └── (NULL, 0, '1970-09-08', NULL) [type=tuple{int, oid, date, string}]
 └── with &2 (t1)
      ├── columns: "?column?":28(unknown)
      ├── stats: [rows=10000]
      ├── fd: ()-->(28)
      ├── values
      │    ├── columns: "?column?":22(unknown)
      │    ├── cardinality: [1 - 1]
      │    ├── stats: [rows=1]
      │    ├── key: ()
      │    ├── fd: ()-->(22)
      │    └── (NULL,) [type=tuple{unknown}]
      └── project
           ├── columns: "?column?":28(unknown)
           ├── stats: [rows=10000]
           ├── fd: ()-->(28)
           ├── inner-join (cross)
           │    ├── columns: true_agg:26(bool!null)
           │    ├── stats: [rows=10000]
           │    ├── fd: ()-->(26)
           │    ├── scan a
           │    │    └── stats: [rows=5000]
           │    ├── inner-join (cross)
           │    │    ├── columns: true_agg:26(bool!null)
           │    │    ├── cardinality: [0 - 2]
           │    │    ├── multiplicity: left-rows(zero-or-one), right-rows(one-or-more)
           │    │    ├── stats: [rows=2]
           │    │    ├── fd: ()-->(26)
           │    │    ├── with-scan &1 (t0)
           │    │    │    ├── mapping:
           │    │    │    ├── cardinality: [1 - 2]
           │    │    │    └── stats: [rows=2]
           │    │    ├── select
           │    │    │    ├── columns: true_agg:26(bool!null)
           │    │    │    ├── cardinality: [0 - 1]
           │    │    │    ├── stats: [rows=1, distinct(26)=1, null(26)=0]
           │    │    │    ├── key: ()
           │    │    │    ├── fd: ()-->(26)
           │    │    │    ├── scalar-group-by
           │    │    │    │    ├── columns: true_agg:26(bool)
           │    │    │    │    ├── cardinality: [1 - 1]
           │    │    │    │    ├── stats: [rows=1, distinct(26)=1, null(26)=0]
           │    │    │    │    ├── key: ()
           │    │    │    │    ├── fd: ()-->(26)
           │    │    │    │    ├── values
           │    │    │    │    │    ├── columns: true:25(bool!null)
           │    │    │    │    │    ├── cardinality: [1 - 1]
           │    │    │    │    │    ├── stats: [rows=1]
           │    │    │    │    │    ├── key: ()
           │    │    │    │    │    ├── fd: ()-->(25)
           │    │    │    │    │    └── (true,) [type=tuple{bool}]
           │    │    │    │    └── aggregations
           │    │    │    │         └── const-agg [as=true_agg:26, type=bool, outer=(25)]
           │    │    │    │              └── true:25 [type=bool]
           │    │    │    └── filters
           │    │    │         └── true_agg:26 IS NOT NULL [type=bool, outer=(26), constraints=(/26: (/NULL - ]; tight)]
           │    │    └── filters (true)
           │    └── filters (true)
           └── projections
                └── NULL [as="?column?":28, type=unknown]

exec-ddl
CREATE TABLE test (
  id string
)
----

# Regression test for #49911. Make sure there is no error if the left side of
# a recursive CTE has cardinality=0.
norm
WITH RECURSIVE hierarchy(id) as
  (SELECT id FROM test WHERE id = 'foo' AND 1 != 1 UNION ALL SELECT c.id FROM test AS c, hierarchy AS p WHERE c.id = 'bar')
SELECT * FROM hierarchy
----
project
 ├── columns: id:9(string)
 ├── stats: [rows=10]
 ├── recursive-c-t-e
 │    ├── columns: id:4(string)
 │    ├── working table binding: &1
 │    ├── initial columns: test.id:1(string)
 │    ├── recursive columns: c.id:5(string)
 │    ├── stats: [rows=10]
 │    ├── fake-rel
 │    │    ├── columns: test.id:1(string)
 │    │    ├── cardinality: [1 - ]
 │    │    └── stats: [rows=1]
 │    ├── values
 │    │    ├── columns: test.id:1(string!null)
 │    │    ├── cardinality: [0 - 0]
 │    │    ├── stats: [rows=0]
 │    │    ├── key: ()
 │    │    └── fd: ()-->(1)
 │    └── inner-join (cross)
 │         ├── columns: c.id:5(string!null)
 │         ├── multiplicity: left-rows(one-or-more), right-rows(zero-or-more)
 │         ├── stats: [rows=10]
 │         ├── fd: ()-->(5)
 │         ├── select
 │         │    ├── columns: c.id:5(string!null)
 │         │    ├── stats: [rows=10, distinct(5)=1, null(5)=0]
 │         │    ├── fd: ()-->(5)
 │         │    ├── scan test [as=c]
 │         │    │    ├── columns: c.id:5(string)
 │         │    │    └── stats: [rows=1000, distinct(5)=100, null(5)=10]
 │         │    └── filters
 │         │         └── c.id:5 = 'bar' [type=bool, outer=(5), constraints=(/5: [/'bar' - /'bar']; tight), fd=()-->(5)]
 │         ├── with-scan &1 (hierarchy)
 │         │    ├── mapping:
 │         │    ├── cardinality: [1 - ]
 │         │    └── stats: [rows=1]
 │         └── filters (true)
 └── projections
      └── id:4 [as=id:9, type=string, outer=(4)]
