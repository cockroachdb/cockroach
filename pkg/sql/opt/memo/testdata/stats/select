exec-ddl
CREATE TABLE a (x INT PRIMARY KEY, y INT)
----
TABLE a
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE b (x INT, z INT NOT NULL)
----
TABLE b
 ├── x int
 ├── z int not null
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

exec-ddl
ALTER TABLE a INJECT STATISTICS '[
  {
    "columns": ["x"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 5000,
    "distinct_count": 5000
  },
  {
    "columns": ["y"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 4000,
    "distinct_count": 400
  }
]'
----

exec-ddl
ALTER TABLE b INJECT STATISTICS '[
  {
    "columns": ["x"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 5000
  },
  {
    "columns": ["z"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 100
  },
  {
    "columns": ["rowid"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 10000
  }
]'
----

# Distinct values calculation with constraints.
build
SELECT * FROM b WHERE x = 1 AND z = 2 AND rowid >= 5 AND rowid <= 8
----
project
 ├── columns: x:1(int!null) z:2(int!null)
 ├── stats: [rows=8e-06]
 ├── fd: ()-->(1,2)
 └── select
      ├── columns: x:1(int!null) z:2(int!null) rowid:3(int!null)
      ├── stats: [rows=8e-06, distinct(1)=8e-06, distinct(2)=8e-06, distinct(3)=8e-06]
      ├── key: (3)
      ├── fd: ()-->(1,2)
      ├── scan b
      │    ├── columns: x:1(int) z:2(int!null) rowid:3(int!null)
      │    ├── stats: [rows=10000, distinct(1)=5000, distinct(2)=100, distinct(3)=10000]
      │    ├── key: (3)
      │    └── fd: (3)-->(1,2)
      └── filters [type=bool, outer=(1-3), constraints=(/1: [/1 - /1]; /2: [/2 - /2]; /3: [/5 - /8]; tight), fd=()-->(1,2)]
           └── and [type=bool, outer=(1-3), constraints=(/1: [/1 - /1]; /2: [/2 - /2]; /3: [/5 - /8]; tight)]
                ├── and [type=bool, outer=(1-3), constraints=(/1: [/1 - /1]; /2: [/2 - /2]; /3: [/5 - ]; tight)]
                │    ├── and [type=bool, outer=(1,2), constraints=(/1: [/1 - /1]; /2: [/2 - /2]; tight)]
                │    │    ├── eq [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
                │    │    │    ├── variable: b.x [type=int, outer=(1)]
                │    │    │    └── const: 1 [type=int]
                │    │    └── eq [type=bool, outer=(2), constraints=(/2: [/2 - /2]; tight)]
                │    │         ├── variable: b.z [type=int, outer=(2)]
                │    │         └── const: 2 [type=int]
                │    └── ge [type=bool, outer=(3), constraints=(/3: [/5 - ]; tight)]
                │         ├── variable: b.rowid [type=int, outer=(3)]
                │         └── const: 5 [type=int]
                └── le [type=bool, outer=(3), constraints=(/3: (/NULL - /8]; tight)]
                     ├── variable: b.rowid [type=int, outer=(3)]
                     └── const: 8 [type=int]

# Can't determine stats from filter.
build
SELECT * FROM a WHERE x + y < 10
----
select
 ├── columns: x:1(int!null) y:2(int)
 ├── stats: [rows=1333.33333]
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── stats: [rows=4000]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── filters [type=bool, outer=(1,2)]
      └── lt [type=bool, outer=(1,2)]
           ├── plus [type=int, outer=(1,2)]
           │    ├── variable: a.x [type=int, outer=(1)]
           │    └── variable: a.y [type=int, outer=(2)]
           └── const: 10 [type=int]

# Remaining filter.
build
SELECT * FROM a WHERE y = 5 AND x + y < 10
----
select
 ├── columns: x:1(int!null) y:2(int!null)
 ├── stats: [rows=10, distinct(2)=1]
 ├── key: (1)
 ├── fd: ()-->(2)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── stats: [rows=4000, distinct(2)=400]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── filters [type=bool, outer=(1,2), constraints=(/2: [/5 - /5]), fd=()-->(2)]
      └── and [type=bool, outer=(1,2), constraints=(/2: [/5 - /5])]
           ├── eq [type=bool, outer=(2), constraints=(/2: [/5 - /5]; tight)]
           │    ├── variable: a.y [type=int, outer=(2)]
           │    └── const: 5 [type=int]
           └── lt [type=bool, outer=(1,2)]
                ├── plus [type=int, outer=(1,2)]
                │    ├── variable: a.x [type=int, outer=(1)]
                │    └── variable: a.y [type=int, outer=(2)]
                └── const: 10 [type=int]

# Contradiction.
build
SELECT * FROM a WHERE x > 5 AND x < 0
----
select
 ├── columns: x:1(int!null) y:2(int)
 ├── stats: [rows=0]
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── stats: [rows=4000]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── filters [type=bool, outer=(1), constraints=(contradiction; tight)]
      └── and [type=bool, outer=(1), constraints=(contradiction; tight)]
           ├── gt [type=bool, outer=(1), constraints=(/1: [/6 - ]; tight)]
           │    ├── variable: a.x [type=int, outer=(1)]
           │    └── const: 5 [type=int]
           └── lt [type=bool, outer=(1), constraints=(/1: (/NULL - /-1]; tight)]
                ├── variable: a.x [type=int, outer=(1)]
                └── const: 0 [type=int]

build
SELECT sum(x) FROM b WHERE x > 1000 AND x <= 2000 GROUP BY z
----
project
 ├── columns: sum:4(decimal)
 ├── stats: [rows=100]
 └── group-by
      ├── columns: z:2(int!null) sum:4(decimal)
      ├── grouping columns: z:2(int!null)
      ├── stats: [rows=100, distinct(2)=100]
      ├── key: (2)
      ├── fd: (2)-->(4)
      ├── project
      │    ├── columns: x:1(int!null) z:2(int!null)
      │    ├── stats: [rows=2000, distinct(2)=100]
      │    └── select
      │         ├── columns: x:1(int!null) z:2(int!null) rowid:3(int!null)
      │         ├── stats: [rows=2000, distinct(1)=1000, distinct(2)=100]
      │         ├── key: (3)
      │         ├── fd: (3)-->(1,2)
      │         ├── scan b
      │         │    ├── columns: x:1(int) z:2(int!null) rowid:3(int!null)
      │         │    ├── stats: [rows=10000, distinct(1)=5000, distinct(2)=100]
      │         │    ├── key: (3)
      │         │    └── fd: (3)-->(1,2)
      │         └── filters [type=bool, outer=(1), constraints=(/1: [/1001 - /2000]; tight)]
      │              └── and [type=bool, outer=(1), constraints=(/1: [/1001 - /2000]; tight)]
      │                   ├── gt [type=bool, outer=(1), constraints=(/1: [/1001 - ]; tight)]
      │                   │    ├── variable: b.x [type=int, outer=(1)]
      │                   │    └── const: 1000 [type=int]
      │                   └── le [type=bool, outer=(1), constraints=(/1: (/NULL - /2000]; tight)]
      │                        ├── variable: b.x [type=int, outer=(1)]
      │                        └── const: 2000 [type=int]
      └── aggregations [outer=(1)]
           └── sum [type=decimal, outer=(1)]
                └── variable: b.x [type=int, outer=(1)]

# Regression: statistics builder panics when end key is NULL when it's trying
# to compute start/end int boundaries.
exec-ddl
CREATE TABLE idx (x INT PRIMARY KEY, y INT, z INT, INDEX yz (y DESC, z))
----
TABLE idx
 ├── x int not null
 ├── y int
 ├── z int
 ├── INDEX primary
 │    └── x int not null
 └── INDEX yz
      ├── y int desc
      ├── z int
      └── x int not null

opt
SELECT y FROM idx WHERE y < 5 AND z < 10
----
project
 ├── columns: y:2(int!null)
 ├── stats: [rows=111.111111]
 └── select
      ├── columns: y:2(int!null) z:3(int!null)
      ├── stats: [rows=111.111111]
      ├── scan idx@yz
      │    ├── columns: y:2(int!null) z:3(int)
      │    ├── constraint: /-2/3/1: (/4/NULL - /NULL)
      │    └── stats: [rows=333.333333]
      └── filters [type=bool, outer=(3), constraints=(/3: (/NULL - /9]; tight)]
           └── lt [type=bool, outer=(3), constraints=(/3: (/NULL - /9]; tight)]
                ├── variable: idx.z [type=int, outer=(3)]
                └── const: 10 [type=int]

# Regression: certain queries could cause a NaN expected number of rows via a divide-by-zero.
exec-ddl
CREATE TABLE tab0(pk INTEGER PRIMARY KEY, col0 INTEGER, col1 FLOAT, col2 TEXT, col3 INTEGER, col4 FLOAT, col5 TEXT)
----
TABLE tab0
 ├── pk int not null
 ├── col0 int
 ├── col1 float
 ├── col2 string
 ├── col3 int
 ├── col4 float
 ├── col5 string
 └── INDEX primary
      └── pk int not null

opt
SELECT pk FROM tab0 WHERE
  col0 = 1 AND
  col0 = 2 AND
  (col0 = 1 OR col0 IN (SELECT col3 FROM tab0)) AND
  (col0 = 1 OR col0 IN (SELECT col3 FROM tab0))
----
project
 ├── columns: pk:1(int!null)
 ├── stats: [rows=0]
 ├── key: (1)
 └── select
      ├── columns: tab0.pk:1(int!null) tab0.col0:2(int) case:27(bool)
      ├── stats: [rows=0]
      ├── key: (1)
      ├── fd: (1)-->(2,27)
      ├── project
      │    ├── columns: case:27(bool) tab0.pk:1(int!null) tab0.col0:2(int)
      │    ├── stats: [rows=0]
      │    ├── key: (1)
      │    ├── fd: (1)-->(2,27)
      │    ├── group-by
      │    │    ├── columns: tab0.pk:1(int!null) tab0.col0:2(int) bool_or:26(bool)
      │    │    ├── grouping columns: tab0.pk:1(int!null)
      │    │    ├── stats: [rows=0, distinct(1)=0]
      │    │    ├── key: (1)
      │    │    ├── fd: (1)-->(2,26)
      │    │    ├── right-join
      │    │    │    ├── columns: tab0.pk:1(int!null) tab0.col0:2(int) tab0.col3:19(int) case:24(bool) notnull:25(bool)
      │    │    │    ├── stats: [rows=0, distinct(1)=0]
      │    │    │    ├── fd: (1)-->(2,24), (19)~~>(25)
      │    │    │    ├── project
      │    │    │    │    ├── columns: notnull:25(bool) tab0.col3:19(int)
      │    │    │    │    ├── stats: [rows=1000]
      │    │    │    │    ├── fd: (19)-->(25)
      │    │    │    │    ├── scan tab0
      │    │    │    │    │    ├── columns: tab0.col3:19(int)
      │    │    │    │    │    └── stats: [rows=1000]
      │    │    │    │    └── projections [outer=(19)]
      │    │    │    │         └── is-not [type=bool, outer=(19)]
      │    │    │    │              ├── variable: tab0.col3 [type=int, outer=(19)]
      │    │    │    │              └── null [type=unknown]
      │    │    │    ├── select
      │    │    │    │    ├── columns: tab0.pk:1(int!null) tab0.col0:2(int) case:24(bool)
      │    │    │    │    ├── stats: [rows=0, distinct(1)=0]
      │    │    │    │    ├── key: (1)
      │    │    │    │    ├── fd: (1)-->(2,24)
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: case:24(bool) tab0.pk:1(int!null) tab0.col0:2(int)
      │    │    │    │    │    ├── stats: [rows=0, distinct(1)=0]
      │    │    │    │    │    ├── key: (1)
      │    │    │    │    │    ├── fd: (1)-->(2,24)
      │    │    │    │    │    ├── group-by
      │    │    │    │    │    │    ├── columns: tab0.pk:1(int!null) tab0.col0:2(int) bool_or:23(bool)
      │    │    │    │    │    │    ├── grouping columns: tab0.pk:1(int!null)
      │    │    │    │    │    │    ├── stats: [rows=0, distinct(1)=0]
      │    │    │    │    │    │    ├── key: (1)
      │    │    │    │    │    │    ├── fd: (1)-->(2,23)
      │    │    │    │    │    │    ├── right-join
      │    │    │    │    │    │    │    ├── columns: tab0.pk:1(int!null) tab0.col0:2(int) tab0.col3:12(int) notnull:22(bool)
      │    │    │    │    │    │    │    ├── stats: [rows=0, distinct(1)=0]
      │    │    │    │    │    │    │    ├── fd: (1)-->(2), (12)~~>(22)
      │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    ├── columns: notnull:22(bool) tab0.col3:12(int)
      │    │    │    │    │    │    │    │    ├── stats: [rows=1000]
      │    │    │    │    │    │    │    │    ├── fd: (12)-->(22)
      │    │    │    │    │    │    │    │    ├── scan tab0
      │    │    │    │    │    │    │    │    │    ├── columns: tab0.col3:12(int)
      │    │    │    │    │    │    │    │    │    └── stats: [rows=1000]
      │    │    │    │    │    │    │    │    └── projections [outer=(12)]
      │    │    │    │    │    │    │    │         └── is-not [type=bool, outer=(12)]
      │    │    │    │    │    │    │    │              ├── variable: tab0.col3 [type=int, outer=(12)]
      │    │    │    │    │    │    │    │              └── null [type=unknown]
      │    │    │    │    │    │    │    ├── select
      │    │    │    │    │    │    │    │    ├── columns: tab0.pk:1(int!null) tab0.col0:2(int)
      │    │    │    │    │    │    │    │    ├── stats: [rows=0, distinct(1)=0]
      │    │    │    │    │    │    │    │    ├── key: (1)
      │    │    │    │    │    │    │    │    ├── fd: (1)-->(2)
      │    │    │    │    │    │    │    │    ├── scan tab0
      │    │    │    │    │    │    │    │    │    ├── columns: tab0.pk:1(int!null) tab0.col0:2(int)
      │    │    │    │    │    │    │    │    │    ├── stats: [rows=1000, distinct(1)=1000]
      │    │    │    │    │    │    │    │    │    ├── key: (1)
      │    │    │    │    │    │    │    │    │    └── fd: (1)-->(2)
      │    │    │    │    │    │    │    │    └── filters [type=bool, outer=(2), constraints=(contradiction; tight)]
      │    │    │    │    │    │    │    │         ├── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
      │    │    │    │    │    │    │    │         │    ├── variable: tab0.col0 [type=int, outer=(2)]
      │    │    │    │    │    │    │    │         │    └── const: 1 [type=int]
      │    │    │    │    │    │    │    │         └── eq [type=bool, outer=(2), constraints=(/2: [/2 - /2]; tight)]
      │    │    │    │    │    │    │    │              ├── variable: tab0.col0 [type=int, outer=(2)]
      │    │    │    │    │    │    │    │              └── const: 2 [type=int]
      │    │    │    │    │    │    │    └── filters [type=bool, outer=(2,12)]
      │    │    │    │    │    │    │         └── is-not [type=bool, outer=(2,12)]
      │    │    │    │    │    │    │              ├── eq [type=bool, outer=(2,12)]
      │    │    │    │    │    │    │              │    ├── variable: tab0.col0 [type=int, outer=(2)]
      │    │    │    │    │    │    │              │    └── variable: tab0.col3 [type=int, outer=(12)]
      │    │    │    │    │    │    │              └── false [type=bool]
      │    │    │    │    │    │    └── aggregations [outer=(2,22)]
      │    │    │    │    │    │         ├── bool-or [type=bool, outer=(22)]
      │    │    │    │    │    │         │    └── variable: notnull [type=bool, outer=(22)]
      │    │    │    │    │    │         └── any-not-null [type=int, outer=(2)]
      │    │    │    │    │    │              └── variable: tab0.col0 [type=int, outer=(2)]
      │    │    │    │    │    └── projections [outer=(1,2,23)]
      │    │    │    │    │         └── case [type=bool, outer=(2,23)]
      │    │    │    │    │              ├── true [type=bool]
      │    │    │    │    │              ├── when [type=bool, outer=(2,23)]
      │    │    │    │    │              │    ├── and [type=bool, outer=(2,23)]
      │    │    │    │    │              │    │    ├── variable: bool_or [type=bool, outer=(23)]
      │    │    │    │    │              │    │    └── is-not [type=bool, outer=(2)]
      │    │    │    │    │              │    │         ├── variable: tab0.col0 [type=int, outer=(2)]
      │    │    │    │    │              │    │         └── null [type=unknown]
      │    │    │    │    │              │    └── true [type=bool]
      │    │    │    │    │              ├── when [type=bool, outer=(23)]
      │    │    │    │    │              │    ├── is [type=bool, outer=(23)]
      │    │    │    │    │              │    │    ├── variable: bool_or [type=bool, outer=(23)]
      │    │    │    │    │              │    │    └── null [type=unknown]
      │    │    │    │    │              │    └── false [type=bool]
      │    │    │    │    │              └── null [type=unknown]
      │    │    │    │    └── filters [type=bool, outer=(2,24)]
      │    │    │    │         └── or [type=bool, outer=(2,24)]
      │    │    │    │              ├── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
      │    │    │    │              │    ├── variable: tab0.col0 [type=int, outer=(2)]
      │    │    │    │              │    └── const: 1 [type=int]
      │    │    │    │              └── variable: case [type=bool, outer=(24)]
      │    │    │    └── filters [type=bool, outer=(2,19)]
      │    │    │         └── is-not [type=bool, outer=(2,19)]
      │    │    │              ├── eq [type=bool, outer=(2,19)]
      │    │    │              │    ├── variable: tab0.col0 [type=int, outer=(2)]
      │    │    │              │    └── variable: tab0.col3 [type=int, outer=(19)]
      │    │    │              └── false [type=bool]
      │    │    └── aggregations [outer=(2,25)]
      │    │         ├── bool-or [type=bool, outer=(25)]
      │    │         │    └── variable: notnull [type=bool, outer=(25)]
      │    │         └── any-not-null [type=int, outer=(2)]
      │    │              └── variable: tab0.col0 [type=int, outer=(2)]
      │    └── projections [outer=(1,2,26)]
      │         └── case [type=bool, outer=(2,26)]
      │              ├── true [type=bool]
      │              ├── when [type=bool, outer=(2,26)]
      │              │    ├── and [type=bool, outer=(2,26)]
      │              │    │    ├── variable: bool_or [type=bool, outer=(26)]
      │              │    │    └── is-not [type=bool, outer=(2)]
      │              │    │         ├── variable: tab0.col0 [type=int, outer=(2)]
      │              │    │         └── null [type=unknown]
      │              │    └── true [type=bool]
      │              ├── when [type=bool, outer=(26)]
      │              │    ├── is [type=bool, outer=(26)]
      │              │    │    ├── variable: bool_or [type=bool, outer=(26)]
      │              │    │    └── null [type=unknown]
      │              │    └── false [type=bool]
      │              └── null [type=unknown]
      └── filters [type=bool, outer=(2,27)]
           └── or [type=bool, outer=(2,27)]
                ├── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
                │    ├── variable: tab0.col0 [type=int, outer=(2)]
                │    └── const: 1 [type=int]
                └── variable: case [type=bool, outer=(27)]

# Test enforceFDOnDistinctCounts.
# Since x is not (fd) dependent on y, the distinct count of
# y does not affect x.
opt
SELECT x,y FROM a WHERE y=1 AND x > 0 AND x <= 7
----
select
 ├── columns: x:1(int!null) y:2(int!null)
 ├── stats: [rows=0.014, distinct(1)=0.014, distinct(2)=0.014]
 ├── key: (1)
 ├── fd: ()-->(2)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── constraint: /1: [/1 - /7]
 │    ├── stats: [rows=5.6, distinct(1)=5.6]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── filters [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
      └── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
           ├── variable: a.y [type=int, outer=(2)]
           └── const: 1 [type=int]

# Test enforceFDOnDistinctCounts.
# x is a primary key, and thus this equality constraint
# has one distinct value. Since y is a (fd) dependent of x,
# the distinct count on x needs to be pushed onto y.
opt
SELECT x,y FROM a WHERE x=1 AND y > 0 AND y <= 7
----
select
 ├── columns: x:1(int!null) y:2(int!null)
 ├── cardinality: [0 - 1]
 ├── stats: [rows=0.002, distinct(1)=0.002, distinct(2)=0.002]
 ├── key: ()
 ├── fd: ()-->(1,2)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── constraint: /1: [/1 - /1]
 │    ├── cardinality: [0 - 1]
 │    ├── stats: [rows=0.8, distinct(1)=0.8]
 │    ├── key: ()
 │    └── fd: ()-->(1,2)
 └── filters [type=bool, outer=(2), constraints=(/2: [/1 - /7]; tight)]
      ├── gt [type=bool, outer=(2), constraints=(/2: [/1 - ]; tight)]
      │    ├── variable: a.y [type=int, outer=(2)]
      │    └── const: 0 [type=int]
      └── le [type=bool, outer=(2), constraints=(/2: (/NULL - /7]; tight)]
           ├── variable: a.y [type=int, outer=(2)]
           └── const: 7 [type=int]


exec-ddl
CREATE TABLE c (x INT PRIMARY KEY, y INT, z INT, w INT)
----
TABLE c
 ├── x int not null
 ├── y int
 ├── z int
 ├── w int
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE d (x INT PRIMARY KEY, y INT, s INT, t INT, UNIQUE (s DESC, t))
----
TABLE d
 ├── x int not null
 ├── y int
 ├── s int
 ├── t int
 ├── INDEX primary
 │    └── x int not null
 └── INDEX secondary
      ├── s int desc
      ├── t int
      └── x int not null (storing)

opt
SELECT s FROM d WHERE y < 10 and x > 10
----
project
 ├── columns: s:3(int)
 ├── stats: [rows=111.111111]
 └── select
      ├── columns: x:1(int!null) y:2(int!null) s:3(int)
      ├── stats: [rows=111.111111]
      ├── key: (1)
      ├── fd: (1)-->(2,3)
      ├── scan d
      │    ├── columns: x:1(int!null) y:2(int) s:3(int)
      │    ├── constraint: /1: [/11 - ]
      │    ├── stats: [rows=333.333333]
      │    ├── key: (1)
      │    └── fd: (1)-->(2,3)
      └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - /9]; tight)]
           └── lt [type=bool, outer=(2), constraints=(/2: (/NULL - /9]; tight)]
                ├── variable: d.y [type=int, outer=(2)]
                └── const: 10 [type=int]

opt
SELECT s FROM d WHERE y < 10
----
project
 ├── columns: s:3(int)
 ├── stats: [rows=333.333333]
 └── select
      ├── columns: y:2(int!null) s:3(int)
      ├── stats: [rows=333.333333]
      ├── scan d
      │    ├── columns: y:2(int) s:3(int)
      │    └── stats: [rows=1000]
      └── filters [type=bool, outer=(2), constraints=(/2: (/NULL - /9]; tight)]
           └── lt [type=bool, outer=(2), constraints=(/2: (/NULL - /9]; tight)]
                ├── variable: d.y [type=int, outer=(2)]
                └── const: 10 [type=int]

opt
SELECT y,t FROM d WHERE s > 10
----
project
 ├── columns: y:2(int) t:4(int)
 ├── stats: [rows=333.333333]
 └── select
      ├── columns: y:2(int) s:3(int!null) t:4(int)
      ├── stats: [rows=333.333333]
      ├── fd: (3,4)~~>(2)
      ├── scan d
      │    ├── columns: y:2(int) s:3(int) t:4(int)
      │    ├── stats: [rows=1000]
      │    └── fd: (3,4)~~>(2)
      └── filters [type=bool, outer=(3), constraints=(/3: [/11 - ]; tight)]
           └── gt [type=bool, outer=(3), constraints=(/3: [/11 - ]; tight)]
                ├── variable: d.s [type=int, outer=(3)]
                └── const: 10 [type=int]

opt
SELECT y,t FROM d WHERE s = 10
----
project
 ├── columns: y:2(int) t:4(int)
 ├── stats: [rows=1.42857143]
 └── index-join d
      ├── columns: y:2(int) s:3(int!null) t:4(int)
      ├── stats: [rows=1.42857143, distinct(3)=1]
      ├── fd: ()-->(3), (3,4)~~>(2)
      └── scan d@secondary
           ├── columns: x:1(int!null) s:3(int!null) t:4(int)
           ├── constraint: /-3/4: [/10 - /10]
           ├── stats: [rows=1.42857143, distinct(3)=1]
           ├── key: (1)
           └── fd: ()-->(3), (1)-->(4), (3,4)~~>(1)

opt
SELECT s,t FROM d WHERE y > -10 AND y < 10
----
project
 ├── columns: s:3(int) t:4(int)
 ├── stats: [rows=27.1428571]
 └── select
      ├── columns: y:2(int!null) s:3(int) t:4(int)
      ├── stats: [rows=27.1428571, distinct(2)=19]
      ├── fd: (3,4)~~>(2)
      ├── scan d
      │    ├── columns: y:2(int) s:3(int) t:4(int)
      │    ├── stats: [rows=1000, distinct(2)=700]
      │    └── fd: (3,4)~~>(2)
      └── filters [type=bool, outer=(2), constraints=(/2: [/-9 - /9]; tight)]
           ├── gt [type=bool, outer=(2), constraints=(/2: [/-9 - ]; tight)]
           │    ├── variable: d.y [type=int, outer=(2)]
           │    └── const: -10 [type=int]
           └── lt [type=bool, outer=(2), constraints=(/2: (/NULL - /9]; tight)]
                ├── variable: d.y [type=int, outer=(2)]
                └── const: 10 [type=int]

opt
SELECT s,t FROM d WHERE y > 0 AND y < 1000 and s > 0 and s < 600
----
project
 ├── columns: s:3(int!null) t:4(int)
 ├── stats: [rows=855.714286]
 └── select
      ├── columns: y:2(int!null) s:3(int!null) t:4(int)
      ├── stats: [rows=855.714286, distinct(2)=700, distinct(3)=599]
      ├── fd: (3,4)~~>(2)
      ├── scan d
      │    ├── columns: y:2(int) s:3(int) t:4(int)
      │    ├── stats: [rows=1000, distinct(2)=700, distinct(3)=700]
      │    └── fd: (3,4)~~>(2)
      └── filters [type=bool, outer=(2,3), constraints=(/2: [/1 - /999]; /3: [/1 - /599]; tight)]
           ├── gt [type=bool, outer=(2), constraints=(/2: [/1 - ]; tight)]
           │    ├── variable: d.y [type=int, outer=(2)]
           │    └── const: 0 [type=int]
           ├── lt [type=bool, outer=(2), constraints=(/2: (/NULL - /999]; tight)]
           │    ├── variable: d.y [type=int, outer=(2)]
           │    └── const: 1000 [type=int]
           ├── gt [type=bool, outer=(3), constraints=(/3: [/1 - ]; tight)]
           │    ├── variable: d.s [type=int, outer=(3)]
           │    └── const: 0 [type=int]
           └── lt [type=bool, outer=(3), constraints=(/3: (/NULL - /599]; tight)]
                ├── variable: d.s [type=int, outer=(3)]
                └── const: 600 [type=int]

opt
SELECT y,t FROM d WHERE s < 1000 AND s > 500 AND t > 20 AND t < 500
----
project
 ├── columns: y:2(int) t:4(int!null)
 ├── stats: [rows=487.797959]
 └── select
      ├── columns: y:2(int) s:3(int!null) t:4(int!null)
      ├── stats: [rows=487.797959, distinct(3)=487.797959, distinct(4)=479]
      ├── fd: (3,4)-->(2)
      ├── scan d
      │    ├── columns: y:2(int) s:3(int) t:4(int)
      │    ├── stats: [rows=1000, distinct(3)=700, distinct(4)=700]
      │    └── fd: (3,4)~~>(2)
      └── filters [type=bool, outer=(3,4), constraints=(/3: [/501 - /999]; /4: [/21 - /499]; tight)]
           ├── lt [type=bool, outer=(3), constraints=(/3: (/NULL - /999]; tight)]
           │    ├── variable: d.s [type=int, outer=(3)]
           │    └── const: 1000 [type=int]
           ├── gt [type=bool, outer=(3), constraints=(/3: [/501 - ]; tight)]
           │    ├── variable: d.s [type=int, outer=(3)]
           │    └── const: 500 [type=int]
           ├── gt [type=bool, outer=(4), constraints=(/4: [/21 - ]; tight)]
           │    ├── variable: d.t [type=int, outer=(4)]
           │    └── const: 20 [type=int]
           └── lt [type=bool, outer=(4), constraints=(/4: (/NULL - /499]; tight)]
                ├── variable: d.t [type=int, outer=(4)]
                └── const: 500 [type=int]

opt
SELECT y,t FROM d WHERE s < 1000 AND s > 5 AND x> 10 AND x < 1000
----
project
 ├── columns: y:2(int) t:4(int)
 ├── stats: [rows=989]
 └── select
      ├── columns: x:1(int!null) y:2(int) s:3(int!null) t:4(int)
      ├── stats: [rows=989, distinct(1)=989, distinct(3)=700]
      ├── key: (1)
      ├── fd: (1)-->(2-4), (3,4)~~>(1,2)
      ├── scan d
      │    ├── columns: x:1(int!null) y:2(int) s:3(int) t:4(int)
      │    ├── constraint: /1: [/11 - /999]
      │    ├── stats: [rows=989, distinct(1)=989]
      │    ├── key: (1)
      │    └── fd: (1)-->(2-4), (3,4)~~>(1,2)
      └── filters [type=bool, outer=(3), constraints=(/3: [/6 - /999]; tight)]
           ├── lt [type=bool, outer=(3), constraints=(/3: (/NULL - /999]; tight)]
           │    ├── variable: d.s [type=int, outer=(3)]
           │    └── const: 1000 [type=int]
           └── gt [type=bool, outer=(3), constraints=(/3: [/6 - ]; tight)]
                ├── variable: d.s [type=int, outer=(3)]
                └── const: 5 [type=int]

opt
SELECT y,t FROM d WHERE s < 1000 AND s > 0 AND x > 301 AND x < 1000
----
project
 ├── columns: y:2(int) t:4(int)
 ├── stats: [rows=696.005714]
 └── select
      ├── columns: x:1(int!null) y:2(int) s:3(int!null) t:4(int)
      ├── stats: [rows=696.005714, distinct(1)=696.005714, distinct(3)=696.005714]
      ├── key: (1)
      ├── fd: (1)-->(2-4), (3,4)~~>(1,2)
      ├── scan d
      │    ├── columns: x:1(int!null) y:2(int) s:3(int) t:4(int)
      │    ├── constraint: /1: [/302 - /999]
      │    ├── stats: [rows=698, distinct(1)=698]
      │    ├── key: (1)
      │    └── fd: (1)-->(2-4), (3,4)~~>(1,2)
      └── filters [type=bool, outer=(3), constraints=(/3: [/1 - /999]; tight)]
           ├── lt [type=bool, outer=(3), constraints=(/3: (/NULL - /999]; tight)]
           │    ├── variable: d.s [type=int, outer=(3)]
           │    └── const: 1000 [type=int]
           └── gt [type=bool, outer=(3), constraints=(/3: [/1 - ]; tight)]
                ├── variable: d.s [type=int, outer=(3)]
                └── const: 0 [type=int]
