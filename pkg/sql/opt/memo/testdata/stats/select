exec-ddl
CREATE TABLE a (x INT PRIMARY KEY, y INT)
----
TABLE a
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE b (x INT, z INT NOT NULL)
----
TABLE b
 ├── x int
 ├── z int not null
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

exec-ddl
ALTER TABLE a INJECT STATISTICS '[
  {
    "columns": ["x"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 5000,
    "distinct_count": 5000
  },
  {
    "columns": ["y"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 4000,
    "distinct_count": 400
  }
]'
----

exec-ddl
ALTER TABLE b INJECT STATISTICS '[
  {
    "columns": ["x"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 5000
  },
  {
    "columns": ["z"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 100
  },
  {
    "columns": ["rowid"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 10000
  }
]'
----

norm
SELECT * FROM a WHERE true
----
scan a
 ├── columns: x:1(int!null) y:2(int)
 ├── stats: [rows=4000]
 ├── key: (1)
 └── fd: (1)-->(2)

norm
SELECT * FROM a WHERE false
----
values
 ├── columns: x:1(int) y:2(int)
 ├── cardinality: [0 - 0]
 ├── stats: [rows=0]
 ├── key: ()
 └── fd: ()-->(1,2)

# Distinct values calculation with constraints.
norm
SELECT * FROM b WHERE x = 1 AND z = 2 AND rowid >= 5 AND rowid <= 8
----
project
 ├── columns: x:1(int!null) z:2(int!null)
 ├── stats: [rows=8e-06]
 ├── fd: ()-->(1,2)
 └── select
      ├── columns: x:1(int!null) z:2(int!null) rowid:3(int!null)
      ├── stats: [rows=8e-06, distinct(1)=8e-06, distinct(2)=8e-06, distinct(3)=8e-06]
      ├── key: (3)
      ├── fd: ()-->(1,2)
      ├── scan b
      │    ├── columns: x:1(int) z:2(int!null) rowid:3(int!null)
      │    ├── stats: [rows=10000, distinct(1)=5000, distinct(2)=100, distinct(3)=10000]
      │    ├── key: (3)
      │    └── fd: (3)-->(1,2)
      └── filters [type=bool, outer=(1-3), constraints=(/1: [/1 - /1]; /2: [/2 - /2]; /3: [/5 - /8]; tight), fd=()-->(1,2)]
           ├── eq [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
           │    ├── variable: b.x [type=int, outer=(1)]
           │    └── const: 1 [type=int]
           ├── eq [type=bool, outer=(2), constraints=(/2: [/2 - /2]; tight)]
           │    ├── variable: b.z [type=int, outer=(2)]
           │    └── const: 2 [type=int]
           ├── ge [type=bool, outer=(3), constraints=(/3: [/5 - ]; tight)]
           │    ├── variable: b.rowid [type=int, outer=(3)]
           │    └── const: 5 [type=int]
           └── le [type=bool, outer=(3), constraints=(/3: (/NULL - /8]; tight)]
                ├── variable: b.rowid [type=int, outer=(3)]
                └── const: 8 [type=int]

# Can't determine stats from filter.
norm
SELECT * FROM a WHERE x + y < 10
----
select
 ├── columns: x:1(int!null) y:2(int)
 ├── stats: [rows=1333.33333]
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── stats: [rows=4000]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── filters [type=bool, outer=(1,2)]
      └── lt [type=bool, outer=(1,2)]
           ├── plus [type=int, outer=(1,2)]
           │    ├── variable: a.x [type=int, outer=(1)]
           │    └── variable: a.y [type=int, outer=(2)]
           └── const: 10 [type=int]

# Remaining filter.
norm
SELECT * FROM a WHERE y = 5 AND x + y < 10
----
select
 ├── columns: x:1(int!null) y:2(int!null)
 ├── stats: [rows=3.33333333, distinct(2)=1]
 ├── key: (1)
 ├── fd: ()-->(2)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── stats: [rows=4000, distinct(2)=400]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── filters [type=bool, outer=(1,2), constraints=(/2: [/5 - /5]), fd=()-->(2)]
      ├── eq [type=bool, outer=(2), constraints=(/2: [/5 - /5]; tight)]
      │    ├── variable: a.y [type=int, outer=(2)]
      │    └── const: 5 [type=int]
      └── lt [type=bool, outer=(1,2)]
           ├── plus [type=int, outer=(1,2)]
           │    ├── variable: a.x [type=int, outer=(1)]
           │    └── variable: a.y [type=int, outer=(2)]
           └── const: 10 [type=int]

# Contradiction.
norm
SELECT * FROM a WHERE x IS NULL
----
select
 ├── columns: x:1(int!null) y:2(int)
 ├── cardinality: [0 - 1]
 ├── stats: [rows=0.8, distinct(1)=0.8]
 ├── key: ()
 ├── fd: ()-->(1,2)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── stats: [rows=4000, distinct(1)=5000]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── filters [type=bool, outer=(1), constraints=(/1: [/NULL - /NULL]; tight), fd=()-->(1)]
      └── is [type=bool, outer=(1), constraints=(/1: [/NULL - /NULL]; tight)]
           ├── variable: a.x [type=int, outer=(1)]
           └── null [type=unknown]

norm
SELECT sum(x) FROM b WHERE x > 1000 AND x <= 2000 GROUP BY z
----
project
 ├── columns: sum:4(decimal)
 ├── stats: [rows=100]
 └── group-by
      ├── columns: z:2(int!null) sum:4(decimal)
      ├── grouping columns: z:2(int!null)
      ├── stats: [rows=100, distinct(2)=100]
      ├── key: (2)
      ├── fd: (2)-->(4)
      ├── select
      │    ├── columns: x:1(int!null) z:2(int!null)
      │    ├── stats: [rows=2000, distinct(1)=1000, distinct(2)=100]
      │    ├── scan b
      │    │    ├── columns: x:1(int) z:2(int!null)
      │    │    └── stats: [rows=10000, distinct(1)=5000, distinct(2)=100]
      │    └── filters [type=bool, outer=(1), constraints=(/1: [/1001 - /2000]; tight)]
      │         ├── gt [type=bool, outer=(1), constraints=(/1: [/1001 - ]; tight)]
      │         │    ├── variable: b.x [type=int, outer=(1)]
      │         │    └── const: 1000 [type=int]
      │         └── le [type=bool, outer=(1), constraints=(/1: (/NULL - /2000]; tight)]
      │              ├── variable: b.x [type=int, outer=(1)]
      │              └── const: 2000 [type=int]
      └── aggregations [outer=(1)]
           └── sum [type=decimal, outer=(1)]
                └── variable: b.x [type=int, outer=(1)]

# Regression: statistics builder panics when end key is NULL when it's trying
# to compute start/end int boundaries.
exec-ddl
CREATE TABLE idx (x INT PRIMARY KEY, y INT, z INT, INDEX yz (y DESC, z))
----
TABLE idx
 ├── x int not null
 ├── y int
 ├── z int
 ├── INDEX primary
 │    └── x int not null
 └── INDEX yz
      ├── y int desc
      ├── z int
      └── x int not null

opt
SELECT y FROM idx WHERE y < 5 AND z < 10
----
project
 ├── columns: y:2(int!null)
 ├── stats: [rows=111.111111]
 └── select
      ├── columns: y:2(int!null) z:3(int!null)
      ├── stats: [rows=111.111111]
      ├── scan idx@yz
      │    ├── columns: y:2(int!null) z:3(int)
      │    ├── constraint: /-2/3/1: (/4/NULL - /NULL)
      │    └── stats: [rows=333.333333]
      └── filters [type=bool, outer=(3), constraints=(/3: (/NULL - /9]; tight)]
           └── lt [type=bool, outer=(3), constraints=(/3: (/NULL - /9]; tight)]
                ├── variable: idx.z [type=int, outer=(3)]
                └── const: 10 [type=int]

# Regression: certain queries could cause a NaN expected number of rows via a divide-by-zero.
exec-ddl
CREATE TABLE tab0(pk INTEGER PRIMARY KEY, col0 INTEGER, col1 FLOAT, col2 TEXT, col3 INTEGER, col4 FLOAT, col5 TEXT)
----
TABLE tab0
 ├── pk int not null
 ├── col0 int
 ├── col1 float
 ├── col2 string
 ├── col3 int
 ├── col4 float
 ├── col5 string
 └── INDEX primary
      └── pk int not null

opt
SELECT pk FROM tab0 WHERE
  col0 = 1 AND
  col0 = 2 AND
  (col0 = 1 OR col0 IN (SELECT col3 FROM tab0)) AND
  (col0 = 1 OR col0 IN (SELECT col3 FROM tab0))
----
values
 ├── columns: pk:1(int)
 ├── cardinality: [0 - 0]
 ├── stats: [rows=0]
 ├── key: ()
 └── fd: ()-->(1)


exec-ddl
CREATE TABLE customers (id INT PRIMARY KEY, name STRING, state STRING)
----
TABLE customers
 ├── id int not null
 ├── name string
 ├── state string
 └── INDEX primary
      └── id int not null

exec-ddl
CREATE TABLE order_history (order_id INT, item_id INT, customer_id INT, year INT)
----
TABLE order_history
 ├── order_id int
 ├── item_id int
 ├── customer_id int
 ├── year int
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

exec-ddl
CREATE TABLE district (d_id INT, d_w_id INT, d_name STRING, PRIMARY KEY(d_id, d_w_id))
----
TABLE district
 ├── d_id int not null
 ├── d_w_id int not null
 ├── d_name string
 └── INDEX primary
      ├── d_id int not null
      └── d_w_id int not null

exec-ddl
ALTER TABLE district INJECT STATISTICS '[
{
  "columns": ["d_id"],
  "created_at": "2018-01-01 1:00:00.00000+00:00",
  "row_count": 100,
  "distinct_count": 10
},
{
  "columns": ["d_w_id"],
  "created_at": "2018-01-01 1:30:00.00000+00:00",
  "row_count": 100,
  "distinct_count": 10
},
{
  "columns": ["d_name"],
  "created_at": "2018-01-01 1:30:00.00000+00:00",
  "row_count": 100,
  "distinct_count": 100
}
]'
----

# This tests selectivityFromReducedCols.
# Since the reduced column set is (d_id, d_name), and
# both columns have distinct count 1, we expect this
# to calculate selectivity through selectivityFromReducedCols.
# The output is the same as the naive approach.
norm
SELECT * FROM district WHERE d_id = 1 AND d_name='bobs_burgers'
----
select
 ├── columns: d_id:1(int!null) d_w_id:2(int!null) d_name:3(string!null)
 ├── stats: [rows=0.1, distinct(1)=0.1, distinct(3)=0.1]
 ├── key: (2)
 ├── fd: ()-->(1,3)
 ├── scan district
 │    ├── columns: d_id:1(int!null) d_w_id:2(int!null) d_name:3(string)
 │    ├── stats: [rows=100, distinct(1)=10, distinct(3)=100]
 │    ├── key: (1,2)
 │    └── fd: (1,2)-->(3)
 └── filters [type=bool, outer=(1,3), constraints=(/1: [/1 - /1]; /3: [/'bobs_burgers' - /'bobs_burgers']; tight), fd=()-->(1,3)]
      ├── eq [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
      │    ├── variable: district.d_id [type=int, outer=(1)]
      │    └── const: 1 [type=int]
      └── eq [type=bool, outer=(3), constraints=(/3: [/'bobs_burgers' - /'bobs_burgers']; tight)]
           ├── variable: district.d_name [type=string, outer=(3)]
           └── const: 'bobs_burgers' [type=string]

# In this case we expect to use unknownFilterSelectivity
# to estimate the selectivity on d_name, and use
# the ratio of current/input distinct counts for d_id
norm
SELECT * FROM district WHERE d_id = 1 and d_name LIKE 'bob'
----
select
 ├── columns: d_id:1(int!null) d_w_id:2(int!null) d_name:3(string)
 ├── stats: [rows=3.33333333, distinct(1)=1]
 ├── key: (2)
 ├── fd: ()-->(1), (2)-->(3)
 ├── scan district
 │    ├── columns: d_id:1(int!null) d_w_id:2(int!null) d_name:3(string)
 │    ├── stats: [rows=100, distinct(1)=10]
 │    ├── key: (1,2)
 │    └── fd: (1,2)-->(3)
 └── filters [type=bool, outer=(1,3), constraints=(/1: [/1 - /1]), fd=()-->(1)]
      ├── eq [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
      │    ├── variable: district.d_id [type=int, outer=(1)]
      │    └── const: 1 [type=int]
      └── like [type=bool, outer=(3)]
           ├── variable: district.d_name [type=string, outer=(3)]
           └── const: 'bob' [type=string]

# This tests selectivityFromReducedCols.
# Since (1,2)-->(3) in order to use selectivityFromReducedCols,
# both (1,2) must have distinct=1 after applying the filter. Since
# d_id is a range constraint, this fails, and we fall back to the
# naive estimation for selectivity.
norm
SELECT * FROM district WHERE d_id > 1 AND d_id < 10 AND d_w_id=10 AND d_name='bobs_burgers'
----
select
 ├── columns: d_id:1(int!null) d_w_id:2(int!null) d_name:3(string!null)
 ├── stats: [rows=0.08, distinct(1)=0.08, distinct(2)=0.08, distinct(3)=0.08]
 ├── key: (1)
 ├── fd: ()-->(2,3)
 ├── scan district
 │    ├── columns: d_id:1(int!null) d_w_id:2(int!null) d_name:3(string)
 │    ├── stats: [rows=100, distinct(1)=10, distinct(2)=10, distinct(3)=100]
 │    ├── key: (1,2)
 │    └── fd: (1,2)-->(3)
 └── filters [type=bool, outer=(1-3), constraints=(/1: [/2 - /9]; /2: [/10 - /10]; /3: [/'bobs_burgers' - /'bobs_burgers']; tight), fd=()-->(2,3)]
      ├── gt [type=bool, outer=(1), constraints=(/1: [/2 - ]; tight)]
      │    ├── variable: district.d_id [type=int, outer=(1)]
      │    └── const: 1 [type=int]
      ├── lt [type=bool, outer=(1), constraints=(/1: (/NULL - /9]; tight)]
      │    ├── variable: district.d_id [type=int, outer=(1)]
      │    └── const: 10 [type=int]
      ├── eq [type=bool, outer=(2), constraints=(/2: [/10 - /10]; tight)]
      │    ├── variable: district.d_w_id [type=int, outer=(2)]
      │    └── const: 10 [type=int]
      └── eq [type=bool, outer=(3), constraints=(/3: [/'bobs_burgers' - /'bobs_burgers']; tight)]
           ├── variable: district.d_name [type=string, outer=(3)]
           └── const: 'bobs_burgers' [type=string]

# This tests selectivityFromReducedCols
# We don't apply the selectivity on d_name since (1,2)-->3.
norm
SELECT * FROM district WHERE d_id = 1 AND d_w_id=10 AND d_name='hello'
----
select
 ├── columns: d_id:1(int!null) d_w_id:2(int!null) d_name:3(string!null)
 ├── cardinality: [0 - 1]
 ├── stats: [rows=1, distinct(1)=1, distinct(2)=1, distinct(3)=1]
 ├── key: ()
 ├── fd: ()-->(1-3)
 ├── scan district
 │    ├── columns: d_id:1(int!null) d_w_id:2(int!null) d_name:3(string)
 │    ├── stats: [rows=100, distinct(1)=10, distinct(2)=10, distinct(3)=100]
 │    ├── key: (1,2)
 │    └── fd: (1,2)-->(3)
 └── filters [type=bool, outer=(1-3), constraints=(/1: [/1 - /1]; /2: [/10 - /10]; /3: [/'hello' - /'hello']; tight), fd=()-->(1-3)]
      ├── eq [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
      │    ├── variable: district.d_id [type=int, outer=(1)]
      │    └── const: 1 [type=int]
      ├── eq [type=bool, outer=(2), constraints=(/2: [/10 - /10]; tight)]
      │    ├── variable: district.d_w_id [type=int, outer=(2)]
      │    └── const: 10 [type=int]
      └── eq [type=bool, outer=(3), constraints=(/3: [/'hello' - /'hello']; tight)]
           ├── variable: district.d_name [type=string, outer=(3)]
           └── const: 'hello' [type=string]

exec-ddl
ALTER TABLE customers INJECT STATISTICS '[
{
  "columns": ["name"],
  "created_at": "2018-01-01 1:00:00.00000+00:00",
  "row_count": 10000,
  "distinct_count": 500
},
{
  "columns": ["id"],
  "created_at": "2018-01-01 1:30:00.00000+00:00",
  "row_count": 10000,
  "distinct_count": 10000
}
]'
----

# This tests selectivityFromReducedCols
# The following two tests cases are paired together. The first has
# one constraint, one on single non-key column. The second  query has two
# constraints on columns which form a determinant, dependent FD pair.
# The dependent column in this FD pair is from the first test case.
# This series of tests demonstrates that the selectivity
# contribution for a pair of (determinant, dependent) FDs is the
# selectivity of the determinant.
# 1/2 join-subquery-selectivityFromReducedCols tests

build
SELECT * FROM (SELECT * FROM customers, order_history WHERE id = customer_id)
WHERE name='andy'
----
select
 ├── columns: id:1(int!null) name:2(string!null) state:3(string) order_id:4(int) item_id:5(int) customer_id:6(int!null) year:7(int)
 ├── stats: [rows=2.31299908, distinct(2)=1]
 ├── fd: ()-->(2), (1)-->(3), (1)==(6), (6)==(1)
 ├── project
 │    ├── columns: id:1(int!null) name:2(string) state:3(string) order_id:4(int) item_id:5(int) customer_id:6(int!null) year:7(int)
 │    ├── stats: [rows=1000, distinct(2)=432.339125]
 │    ├── fd: (1)-->(2,3), (1)==(6), (6)==(1)
 │    └── select
 │         ├── columns: id:1(int!null) name:2(string) state:3(string) order_id:4(int) item_id:5(int) customer_id:6(int!null) year:7(int) rowid:8(int!null)
 │         ├── stats: [rows=1000, distinct(1)=700, distinct(2)=432.339125, distinct(6)=700]
 │         ├── key: (8)
 │         ├── fd: (1)-->(2,3), (8)-->(4-7), (1)==(6), (6)==(1)
 │         ├── inner-join
 │         │    ├── columns: id:1(int!null) name:2(string) state:3(string) order_id:4(int) item_id:5(int) customer_id:6(int) year:7(int) rowid:8(int!null)
 │         │    ├── stats: [rows=10000000, distinct(1)=10000, distinct(2)=500, distinct(6)=700]
 │         │    ├── key: (1,8)
 │         │    ├── fd: (1)-->(2,3), (8)-->(4-7)
 │         │    ├── scan customers
 │         │    │    ├── columns: id:1(int!null) name:2(string) state:3(string)
 │         │    │    ├── stats: [rows=10000, distinct(1)=10000, distinct(2)=500]
 │         │    │    ├── key: (1)
 │         │    │    └── fd: (1)-->(2,3)
 │         │    ├── scan order_history
 │         │    │    ├── columns: order_id:4(int) item_id:5(int) customer_id:6(int) year:7(int) rowid:8(int!null)
 │         │    │    ├── stats: [rows=1000, distinct(6)=700]
 │         │    │    ├── key: (8)
 │         │    │    └── fd: (8)-->(4-7)
 │         │    └── true [type=bool]
 │         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
 │              └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │                   ├── variable: customers.id [type=int, outer=(1)]
 │                   └── variable: order_history.customer_id [type=int, outer=(6)]
 └── filters [type=bool, outer=(2), constraints=(/2: [/'andy' - /'andy']; tight), fd=()-->(2)]
      └── eq [type=bool, outer=(2), constraints=(/2: [/'andy' - /'andy']; tight)]
           ├── variable: customers.name [type=string, outer=(2)]
           └── const: 'andy' [type=string]

# This tests selectivityFromReducedCols
# The previous tests case and the following are paired together. The first has
# one constraint, one on single non-key column. The second  query has two
# constraints on columns which form a determinant, dependent FD pair.
# The dependent column in this FD pair is from the first test case.
# This series of tests demonstrates that the selectivity
# contribution for a pair of (determinant, dependent) FDs is the
# selectivity of the determinant.
# 2/2 join-subquery-selectivityFromReducedCols tests

build
SELECT * FROM (SELECT * FROM customers, order_history WHERE id = customer_id)
WHERE id = 1 AND name='andy'
----
select
 ├── columns: id:1(int!null) name:2(string!null) state:3(string) order_id:4(int) item_id:5(int) customer_id:6(int!null) year:7(int)
 ├── stats: [rows=1.42857143, distinct(1)=1, distinct(2)=1]
 ├── fd: ()-->(1-3,6), (1)==(6), (6)==(1)
 ├── project
 │    ├── columns: id:1(int!null) name:2(string) state:3(string) order_id:4(int) item_id:5(int) customer_id:6(int!null) year:7(int)
 │    ├── stats: [rows=1000, distinct(1)=700, distinct(2)=432.339125]
 │    ├── fd: (1)-->(2,3), (1)==(6), (6)==(1)
 │    └── select
 │         ├── columns: id:1(int!null) name:2(string) state:3(string) order_id:4(int) item_id:5(int) customer_id:6(int!null) year:7(int) rowid:8(int!null)
 │         ├── stats: [rows=1000, distinct(1)=700, distinct(2)=432.339125, distinct(6)=700]
 │         ├── key: (8)
 │         ├── fd: (1)-->(2,3), (8)-->(4-7), (1)==(6), (6)==(1)
 │         ├── inner-join
 │         │    ├── columns: id:1(int!null) name:2(string) state:3(string) order_id:4(int) item_id:5(int) customer_id:6(int) year:7(int) rowid:8(int!null)
 │         │    ├── stats: [rows=10000000, distinct(1)=10000, distinct(2)=500, distinct(6)=700]
 │         │    ├── key: (1,8)
 │         │    ├── fd: (1)-->(2,3), (8)-->(4-7)
 │         │    ├── scan customers
 │         │    │    ├── columns: id:1(int!null) name:2(string) state:3(string)
 │         │    │    ├── stats: [rows=10000, distinct(1)=10000, distinct(2)=500]
 │         │    │    ├── key: (1)
 │         │    │    └── fd: (1)-->(2,3)
 │         │    ├── scan order_history
 │         │    │    ├── columns: order_id:4(int) item_id:5(int) customer_id:6(int) year:7(int) rowid:8(int!null)
 │         │    │    ├── stats: [rows=1000, distinct(6)=700]
 │         │    │    ├── key: (8)
 │         │    │    └── fd: (8)-->(4-7)
 │         │    └── true [type=bool]
 │         └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
 │              └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │                   ├── variable: customers.id [type=int, outer=(1)]
 │                   └── variable: order_history.customer_id [type=int, outer=(6)]
 └── filters [type=bool, outer=(1,2), constraints=(/1: [/1 - /1]; /2: [/'andy' - /'andy']; tight), fd=()-->(1,2)]
      └── and [type=bool, outer=(1,2), constraints=(/1: [/1 - /1]; /2: [/'andy' - /'andy']; tight)]
           ├── eq [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
           │    ├── variable: customers.id [type=int, outer=(1)]
           │    └── const: 1 [type=int]
           └── eq [type=bool, outer=(2), constraints=(/2: [/'andy' - /'andy']; tight)]
                ├── variable: customers.name [type=string, outer=(2)]
                └── const: 'andy' [type=string]

# Test equality conditions where all have distinct count 1.
norm
SELECT * FROM order_history WHERE item_id = order_id AND item_id = customer_id AND customer_id = 5
----
select
 ├── columns: order_id:1(int!null) item_id:2(int!null) customer_id:3(int!null) year:4(int)
 ├── stats: [rows=0.00204081633, distinct(1)=0.00204081633, distinct(2)=0.00204081633, distinct(3)=0.00204081633]
 ├── fd: ()-->(1-3), (1)==(2,3), (2)==(1,3), (3)==(1,2)
 ├── scan order_history
 │    ├── columns: order_id:1(int) item_id:2(int) customer_id:3(int) year:4(int)
 │    └── stats: [rows=1000, distinct(1)=700, distinct(2)=700, distinct(3)=700]
 └── filters [type=bool, outer=(1-3), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /3: [/5 - /5]), fd=()-->(1-3), (1)==(2,3), (2)==(1,3), (3)==(1,2)]
      ├── eq [type=bool, outer=(1,2), constraints=(/1: (/NULL - ]; /2: (/NULL - ])]
      │    ├── variable: order_history.item_id [type=int, outer=(2)]
      │    └── variable: order_history.order_id [type=int, outer=(1)]
      ├── eq [type=bool, outer=(2,3), constraints=(/2: (/NULL - ]; /3: (/NULL - ])]
      │    ├── variable: order_history.item_id [type=int, outer=(2)]
      │    └── variable: order_history.customer_id [type=int, outer=(3)]
      └── eq [type=bool, outer=(3), constraints=(/3: [/5 - /5]; tight)]
           ├── variable: order_history.customer_id [type=int, outer=(3)]
           └── const: 5 [type=int]

# Test equality condition with another condition on one of the attributes.
norm
SELECT * FROM order_history WHERE item_id = order_id AND item_id < 5 AND item_id > 0
----
select
 ├── columns: order_id:1(int!null) item_id:2(int!null) customer_id:3(int) year:4(int)
 ├── stats: [rows=0.158730159, distinct(1)=0.158730159, distinct(2)=0.158730159]
 ├── fd: (1)==(2), (2)==(1)
 ├── scan order_history
 │    ├── columns: order_id:1(int) item_id:2(int) customer_id:3(int) year:4(int)
 │    └── stats: [rows=1000, distinct(1)=700, distinct(2)=700]
 └── filters [type=bool, outer=(1,2), constraints=(/1: (/NULL - ]; /2: [/1 - /4]), fd=(1)==(2), (2)==(1)]
      ├── eq [type=bool, outer=(1,2), constraints=(/1: (/NULL - ]; /2: (/NULL - ])]
      │    ├── variable: order_history.item_id [type=int, outer=(2)]
      │    └── variable: order_history.order_id [type=int, outer=(1)]
      ├── lt [type=bool, outer=(2), constraints=(/2: (/NULL - /4]; tight)]
      │    ├── variable: order_history.item_id [type=int, outer=(2)]
      │    └── const: 5 [type=int]
      └── gt [type=bool, outer=(2), constraints=(/2: [/1 - ]; tight)]
           ├── variable: order_history.item_id [type=int, outer=(2)]
           └── const: 0 [type=int]

# Test equality condition with another condition on a different attribute.
norm
SELECT * FROM order_history WHERE item_id = order_id AND customer_id < 5 AND customer_id > 0
----
select
 ├── columns: order_id:1(int!null) item_id:2(int!null) customer_id:3(int!null) year:4(int)
 ├── stats: [rows=0.158730159, distinct(1)=0.158730159, distinct(2)=0.158730159]
 ├── fd: (1)==(2), (2)==(1)
 ├── scan order_history
 │    ├── columns: order_id:1(int) item_id:2(int) customer_id:3(int) year:4(int)
 │    └── stats: [rows=1000, distinct(1)=700, distinct(2)=700]
 └── filters [type=bool, outer=(1-3), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /3: [/1 - /4]), fd=(1)==(2), (2)==(1)]
      ├── eq [type=bool, outer=(1,2), constraints=(/1: (/NULL - ]; /2: (/NULL - ])]
      │    ├── variable: order_history.item_id [type=int, outer=(2)]
      │    └── variable: order_history.order_id [type=int, outer=(1)]
      ├── lt [type=bool, outer=(3), constraints=(/3: (/NULL - /4]; tight)]
      │    ├── variable: order_history.customer_id [type=int, outer=(3)]
      │    └── const: 5 [type=int]
      └── gt [type=bool, outer=(3), constraints=(/3: [/1 - ]; tight)]
           ├── variable: order_history.customer_id [type=int, outer=(3)]
           └── const: 0 [type=int]

# Test equality condition with another filter condition without a constraint.
norm
SELECT * FROM order_history WHERE item_id = order_id AND customer_id % 2 = 0
----
select
 ├── columns: order_id:1(int!null) item_id:2(int!null) customer_id:3(int) year:4(int)
 ├── stats: [rows=0.476190476, distinct(1)=0.476190476, distinct(2)=0.476190476]
 ├── fd: (1)==(2), (2)==(1)
 ├── scan order_history
 │    ├── columns: order_id:1(int) item_id:2(int) customer_id:3(int) year:4(int)
 │    └── stats: [rows=1000, distinct(1)=700, distinct(2)=700]
 └── filters [type=bool, outer=(1-3), constraints=(/1: (/NULL - ]; /2: (/NULL - ]), fd=(1)==(2), (2)==(1)]
      ├── eq [type=bool, outer=(1,2), constraints=(/1: (/NULL - ]; /2: (/NULL - ])]
      │    ├── variable: order_history.item_id [type=int, outer=(2)]
      │    └── variable: order_history.order_id [type=int, outer=(1)]
      └── eq [type=bool, outer=(3)]
           ├── mod [type=int, outer=(3)]
           │    ├── variable: order_history.customer_id [type=int, outer=(3)]
           │    └── const: 2 [type=int]
           └── const: 0 [type=int]

exec-ddl
CREATE TABLE c (x INT, z INT NOT NULL, UNIQUE INDEX x_idx (x))
----
TABLE c
 ├── x int
 ├── z int not null
 ├── rowid int not null (hidden)
 ├── INDEX primary
 │    └── rowid int not null (hidden)
 └── INDEX x_idx
      ├── x int
      └── rowid int not null (hidden) (storing)

# Test that the distinct count for x is estimated correctly (since it's a weak
# key).
norm
SELECT * FROM c WHERE x >= 0 AND x < 100
----
select
 ├── columns: x:1(int!null) z:2(int!null)
 ├── stats: [rows=100, distinct(1)=100]
 ├── fd: (1)-->(2)
 ├── scan c
 │    ├── columns: x:1(int) z:2(int!null)
 │    ├── stats: [rows=1000, distinct(1)=1000]
 │    └── fd: (1)~~>(2)
 └── filters [type=bool, outer=(1), constraints=(/1: [/0 - /99]; tight)]
      ├── ge [type=bool, outer=(1), constraints=(/1: [/0 - ]; tight)]
      │    ├── variable: c.x [type=int, outer=(1)]
      │    └── const: 0 [type=int]
      └── lt [type=bool, outer=(1), constraints=(/1: (/NULL - /99]; tight)]
           ├── variable: c.x [type=int, outer=(1)]
           └── const: 100 [type=int]
