exec-ddl
CREATE TABLE a (x INT PRIMARY KEY, y INT)
----
TABLE a
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE b (x INT, z INT NOT NULL)
----
TABLE b
 ├── x int
 ├── z int not null
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

exec-ddl
ALTER TABLE a INJECT STATISTICS '[
  {
    "columns": ["x"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 5000,
    "distinct_count": 5000
  },
  {
    "columns": ["y"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 4000,
    "distinct_count": 400
  }
]'
----

exec-ddl
ALTER TABLE b INJECT STATISTICS '[
  {
    "columns": ["x"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 5000
  },
  {
    "columns": ["z"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 100
  },
  {
    "columns": ["rowid"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 10000,
    "distinct_count": 10000
  }
]'
----

# Distinct values calculation with constraints.
build
SELECT * FROM b WHERE x = 1 AND z = 2 AND rowid >= 5 AND rowid <= 8
----
project
 ├── columns: x:1(int!null) z:2(int!null)
 ├── stats: [rows=8e-06]
 ├── fd: ()-->(1,2)
 └── select
      ├── columns: x:1(int!null) z:2(int!null) rowid:3(int!null)
      ├── stats: [rows=8e-06, distinct(1)=8e-06, distinct(2)=8e-06, distinct(3)=8e-06]
      ├── key: (3)
      ├── fd: ()-->(1,2)
      ├── scan b
      │    ├── columns: x:1(int) z:2(int!null) rowid:3(int!null)
      │    ├── stats: [rows=10000, distinct(1)=5000, distinct(2)=100, distinct(3)=10000]
      │    ├── key: (3)
      │    └── fd: (3)-->(1,2)
      └── filters [type=bool, outer=(1-3), constraints=(/1: [/1 - /1]; /2: [/2 - /2]; /3: [/5 - /8]; tight), fd=()-->(1,2)]
           └── and [type=bool, outer=(1-3), constraints=(/1: [/1 - /1]; /2: [/2 - /2]; /3: [/5 - /8]; tight)]
                ├── and [type=bool, outer=(1-3), constraints=(/1: [/1 - /1]; /2: [/2 - /2]; /3: [/5 - ]; tight)]
                │    ├── and [type=bool, outer=(1,2), constraints=(/1: [/1 - /1]; /2: [/2 - /2]; tight)]
                │    │    ├── eq [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
                │    │    │    ├── variable: b.x [type=int, outer=(1)]
                │    │    │    └── const: 1 [type=int]
                │    │    └── eq [type=bool, outer=(2), constraints=(/2: [/2 - /2]; tight)]
                │    │         ├── variable: b.z [type=int, outer=(2)]
                │    │         └── const: 2 [type=int]
                │    └── ge [type=bool, outer=(3), constraints=(/3: [/5 - ]; tight)]
                │         ├── variable: b.rowid [type=int, outer=(3)]
                │         └── const: 5 [type=int]
                └── le [type=bool, outer=(3), constraints=(/3: (/NULL - /8]; tight)]
                     ├── variable: b.rowid [type=int, outer=(3)]
                     └── const: 8 [type=int]

# Can't determine stats from filter.
build
SELECT * FROM a WHERE x + y < 10
----
select
 ├── columns: x:1(int!null) y:2(int)
 ├── stats: [rows=1333.33333]
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── stats: [rows=4000]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── filters [type=bool, outer=(1,2)]
      └── lt [type=bool, outer=(1,2)]
           ├── plus [type=int, outer=(1,2)]
           │    ├── variable: a.x [type=int, outer=(1)]
           │    └── variable: a.y [type=int, outer=(2)]
           └── const: 10 [type=int]

# Remaining filter.
build
SELECT * FROM a WHERE y = 5 AND x + y < 10
----
select
 ├── columns: x:1(int!null) y:2(int!null)
 ├── stats: [rows=10, distinct(2)=1]
 ├── key: (1)
 ├── fd: ()-->(2)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── stats: [rows=4000, distinct(2)=400]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── filters [type=bool, outer=(1,2), constraints=(/2: [/5 - /5]), fd=()-->(2)]
      └── and [type=bool, outer=(1,2), constraints=(/2: [/5 - /5])]
           ├── eq [type=bool, outer=(2), constraints=(/2: [/5 - /5]; tight)]
           │    ├── variable: a.y [type=int, outer=(2)]
           │    └── const: 5 [type=int]
           └── lt [type=bool, outer=(1,2)]
                ├── plus [type=int, outer=(1,2)]
                │    ├── variable: a.x [type=int, outer=(1)]
                │    └── variable: a.y [type=int, outer=(2)]
                └── const: 10 [type=int]

# Contradiction.
build
SELECT * FROM a WHERE x > 5 AND x < 0
----
select
 ├── columns: x:1(int!null) y:2(int)
 ├── stats: [rows=0]
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── scan a
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── stats: [rows=4000]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── filters [type=bool, outer=(1), constraints=(contradiction; tight)]
      └── and [type=bool, outer=(1), constraints=(contradiction; tight)]
           ├── gt [type=bool, outer=(1), constraints=(/1: [/6 - ]; tight)]
           │    ├── variable: a.x [type=int, outer=(1)]
           │    └── const: 5 [type=int]
           └── lt [type=bool, outer=(1), constraints=(/1: (/NULL - /-1]; tight)]
                ├── variable: a.x [type=int, outer=(1)]
                └── const: 0 [type=int]

build
SELECT sum(x) FROM b WHERE x > 1000 AND x <= 2000 GROUP BY z
----
project
 ├── columns: sum:4(decimal)
 ├── stats: [rows=100]
 └── group-by
      ├── columns: z:2(int!null) sum:4(decimal)
      ├── grouping columns: z:2(int!null)
      ├── stats: [rows=100, distinct(2)=100]
      ├── key: (2)
      ├── fd: (2)-->(4)
      ├── project
      │    ├── columns: x:1(int!null) z:2(int!null)
      │    ├── stats: [rows=2000, distinct(2)=100]
      │    └── select
      │         ├── columns: x:1(int!null) z:2(int!null) rowid:3(int!null)
      │         ├── stats: [rows=2000, distinct(1)=1000, distinct(2)=100]
      │         ├── key: (3)
      │         ├── fd: (3)-->(1,2)
      │         ├── scan b
      │         │    ├── columns: x:1(int) z:2(int!null) rowid:3(int!null)
      │         │    ├── stats: [rows=10000, distinct(1)=5000, distinct(2)=100]
      │         │    ├── key: (3)
      │         │    └── fd: (3)-->(1,2)
      │         └── filters [type=bool, outer=(1), constraints=(/1: [/1001 - /2000]; tight)]
      │              └── and [type=bool, outer=(1), constraints=(/1: [/1001 - /2000]; tight)]
      │                   ├── gt [type=bool, outer=(1), constraints=(/1: [/1001 - ]; tight)]
      │                   │    ├── variable: b.x [type=int, outer=(1)]
      │                   │    └── const: 1000 [type=int]
      │                   └── le [type=bool, outer=(1), constraints=(/1: (/NULL - /2000]; tight)]
      │                        ├── variable: b.x [type=int, outer=(1)]
      │                        └── const: 2000 [type=int]
      └── aggregations [outer=(1)]
           └── sum [type=decimal, outer=(1)]
                └── variable: b.x [type=int, outer=(1)]

# Regression: statistics builder panics when end key is NULL when it's trying
# to compute start/end int boundaries.
exec-ddl
CREATE TABLE idx (x INT PRIMARY KEY, y INT, z INT, INDEX yz (y DESC, z))
----
TABLE idx
 ├── x int not null
 ├── y int
 ├── z int
 ├── INDEX primary
 │    └── x int not null
 └── INDEX yz
      ├── y int desc
      ├── z int
      └── x int not null

opt
SELECT y FROM idx WHERE y < 5 AND z < 10
----
project
 ├── columns: y:2(int!null)
 ├── stats: [rows=111.111111]
 └── select
      ├── columns: y:2(int!null) z:3(int!null)
      ├── stats: [rows=111.111111]
      ├── scan idx@yz
      │    ├── columns: y:2(int!null) z:3(int)
      │    ├── constraint: /-2/3/1: (/4/NULL - /NULL)
      │    └── stats: [rows=333.333333]
      └── filters [type=bool, outer=(3), constraints=(/3: (/NULL - /9]; tight)]
           └── lt [type=bool, outer=(3), constraints=(/3: (/NULL - /9]; tight)]
                ├── variable: idx.z [type=int, outer=(3)]
                └── const: 10 [type=int]

# Regression: certain queries could cause a NaN expected number of rows via a divide-by-zero.
exec-ddl
CREATE TABLE tab0(pk INTEGER PRIMARY KEY, col0 INTEGER, col1 FLOAT, col2 TEXT, col3 INTEGER, col4 FLOAT, col5 TEXT)
----
TABLE tab0
 ├── pk int not null
 ├── col0 int
 ├── col1 float
 ├── col2 string
 ├── col3 int
 ├── col4 float
 ├── col5 string
 └── INDEX primary
      └── pk int not null

opt
SELECT pk FROM tab0 WHERE
  col0 = 1 AND
  col0 = 2 AND
  (col0 = 1 OR col0 IN (SELECT col3 FROM tab0)) AND
  (col0 = 1 OR col0 IN (SELECT col3 FROM tab0))
----
project
 ├── columns: pk:1(int!null)
 ├── stats: [rows=0]
 ├── key: (1)
 └── select
      ├── columns: tab0.pk:1(int!null) tab0.col0:2(int) case:27(bool)
      ├── stats: [rows=0]
      ├── key: (1)
      ├── fd: (1)-->(2,27)
      ├── project
      │    ├── columns: case:27(bool) tab0.pk:1(int!null) tab0.col0:2(int)
      │    ├── stats: [rows=0]
      │    ├── key: (1)
      │    ├── fd: (1)-->(2,27)
      │    ├── group-by
      │    │    ├── columns: tab0.pk:1(int!null) tab0.col0:2(int) bool_or:26(bool)
      │    │    ├── grouping columns: tab0.pk:1(int!null)
      │    │    ├── stats: [rows=0, distinct(1)=0]
      │    │    ├── key: (1)
      │    │    ├── fd: (1)-->(2,26)
      │    │    ├── right-join
      │    │    │    ├── columns: tab0.pk:1(int!null) tab0.col0:2(int) tab0.col3:19(int) case:24(bool) notnull:25(bool)
      │    │    │    ├── stats: [rows=0, distinct(1)=0]
      │    │    │    ├── fd: (1)-->(2,24), (19)~~>(25)
      │    │    │    ├── project
      │    │    │    │    ├── columns: notnull:25(bool) tab0.col3:19(int)
      │    │    │    │    ├── stats: [rows=1000]
      │    │    │    │    ├── fd: (19)-->(25)
      │    │    │    │    ├── scan tab0
      │    │    │    │    │    ├── columns: tab0.col3:19(int)
      │    │    │    │    │    └── stats: [rows=1000]
      │    │    │    │    └── projections [outer=(19)]
      │    │    │    │         └── is-not [type=bool, outer=(19)]
      │    │    │    │              ├── variable: tab0.col3 [type=int, outer=(19)]
      │    │    │    │              └── null [type=unknown]
      │    │    │    ├── select
      │    │    │    │    ├── columns: tab0.pk:1(int!null) tab0.col0:2(int) case:24(bool)
      │    │    │    │    ├── stats: [rows=0, distinct(1)=0]
      │    │    │    │    ├── key: (1)
      │    │    │    │    ├── fd: (1)-->(2,24)
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: case:24(bool) tab0.pk:1(int!null) tab0.col0:2(int)
      │    │    │    │    │    ├── stats: [rows=0, distinct(1)=0]
      │    │    │    │    │    ├── key: (1)
      │    │    │    │    │    ├── fd: (1)-->(2,24)
      │    │    │    │    │    ├── group-by
      │    │    │    │    │    │    ├── columns: tab0.pk:1(int!null) tab0.col0:2(int) bool_or:23(bool)
      │    │    │    │    │    │    ├── grouping columns: tab0.pk:1(int!null)
      │    │    │    │    │    │    ├── stats: [rows=0, distinct(1)=0]
      │    │    │    │    │    │    ├── key: (1)
      │    │    │    │    │    │    ├── fd: (1)-->(2,23)
      │    │    │    │    │    │    ├── right-join
      │    │    │    │    │    │    │    ├── columns: tab0.pk:1(int!null) tab0.col0:2(int) tab0.col3:12(int) notnull:22(bool)
      │    │    │    │    │    │    │    ├── stats: [rows=0, distinct(1)=0]
      │    │    │    │    │    │    │    ├── fd: (1)-->(2), (12)~~>(22)
      │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    ├── columns: notnull:22(bool) tab0.col3:12(int)
      │    │    │    │    │    │    │    │    ├── stats: [rows=1000]
      │    │    │    │    │    │    │    │    ├── fd: (12)-->(22)
      │    │    │    │    │    │    │    │    ├── scan tab0
      │    │    │    │    │    │    │    │    │    ├── columns: tab0.col3:12(int)
      │    │    │    │    │    │    │    │    │    └── stats: [rows=1000]
      │    │    │    │    │    │    │    │    └── projections [outer=(12)]
      │    │    │    │    │    │    │    │         └── is-not [type=bool, outer=(12)]
      │    │    │    │    │    │    │    │              ├── variable: tab0.col3 [type=int, outer=(12)]
      │    │    │    │    │    │    │    │              └── null [type=unknown]
      │    │    │    │    │    │    │    ├── select
      │    │    │    │    │    │    │    │    ├── columns: tab0.pk:1(int!null) tab0.col0:2(int)
      │    │    │    │    │    │    │    │    ├── stats: [rows=0, distinct(1)=0]
      │    │    │    │    │    │    │    │    ├── key: (1)
      │    │    │    │    │    │    │    │    ├── fd: (1)-->(2)
      │    │    │    │    │    │    │    │    ├── scan tab0
      │    │    │    │    │    │    │    │    │    ├── columns: tab0.pk:1(int!null) tab0.col0:2(int)
      │    │    │    │    │    │    │    │    │    ├── stats: [rows=1000, distinct(1)=1000]
      │    │    │    │    │    │    │    │    │    ├── key: (1)
      │    │    │    │    │    │    │    │    │    └── fd: (1)-->(2)
      │    │    │    │    │    │    │    │    └── filters [type=bool, outer=(2), constraints=(contradiction; tight)]
      │    │    │    │    │    │    │    │         ├── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
      │    │    │    │    │    │    │    │         │    ├── variable: tab0.col0 [type=int, outer=(2)]
      │    │    │    │    │    │    │    │         │    └── const: 1 [type=int]
      │    │    │    │    │    │    │    │         └── eq [type=bool, outer=(2), constraints=(/2: [/2 - /2]; tight)]
      │    │    │    │    │    │    │    │              ├── variable: tab0.col0 [type=int, outer=(2)]
      │    │    │    │    │    │    │    │              └── const: 2 [type=int]
      │    │    │    │    │    │    │    └── filters [type=bool, outer=(2,12)]
      │    │    │    │    │    │    │         └── is-not [type=bool, outer=(2,12)]
      │    │    │    │    │    │    │              ├── eq [type=bool, outer=(2,12)]
      │    │    │    │    │    │    │              │    ├── variable: tab0.col0 [type=int, outer=(2)]
      │    │    │    │    │    │    │              │    └── variable: tab0.col3 [type=int, outer=(12)]
      │    │    │    │    │    │    │              └── false [type=bool]
      │    │    │    │    │    │    └── aggregations [outer=(2,22)]
      │    │    │    │    │    │         ├── bool-or [type=bool, outer=(22)]
      │    │    │    │    │    │         │    └── variable: notnull [type=bool, outer=(22)]
      │    │    │    │    │    │         └── any-not-null [type=int, outer=(2)]
      │    │    │    │    │    │              └── variable: tab0.col0 [type=int, outer=(2)]
      │    │    │    │    │    └── projections [outer=(1,2,23)]
      │    │    │    │    │         └── case [type=bool, outer=(2,23)]
      │    │    │    │    │              ├── true [type=bool]
      │    │    │    │    │              ├── when [type=bool, outer=(2,23)]
      │    │    │    │    │              │    ├── and [type=bool, outer=(2,23)]
      │    │    │    │    │              │    │    ├── variable: bool_or [type=bool, outer=(23)]
      │    │    │    │    │              │    │    └── is-not [type=bool, outer=(2)]
      │    │    │    │    │              │    │         ├── variable: tab0.col0 [type=int, outer=(2)]
      │    │    │    │    │              │    │         └── null [type=unknown]
      │    │    │    │    │              │    └── true [type=bool]
      │    │    │    │    │              ├── when [type=bool, outer=(23)]
      │    │    │    │    │              │    ├── is [type=bool, outer=(23)]
      │    │    │    │    │              │    │    ├── variable: bool_or [type=bool, outer=(23)]
      │    │    │    │    │              │    │    └── null [type=unknown]
      │    │    │    │    │              │    └── false [type=bool]
      │    │    │    │    │              └── null [type=unknown]
      │    │    │    │    └── filters [type=bool, outer=(2,24)]
      │    │    │    │         └── or [type=bool, outer=(2,24)]
      │    │    │    │              ├── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
      │    │    │    │              │    ├── variable: tab0.col0 [type=int, outer=(2)]
      │    │    │    │              │    └── const: 1 [type=int]
      │    │    │    │              └── variable: case [type=bool, outer=(24)]
      │    │    │    └── filters [type=bool, outer=(2,19)]
      │    │    │         └── is-not [type=bool, outer=(2,19)]
      │    │    │              ├── eq [type=bool, outer=(2,19)]
      │    │    │              │    ├── variable: tab0.col0 [type=int, outer=(2)]
      │    │    │              │    └── variable: tab0.col3 [type=int, outer=(19)]
      │    │    │              └── false [type=bool]
      │    │    └── aggregations [outer=(2,25)]
      │    │         ├── bool-or [type=bool, outer=(25)]
      │    │         │    └── variable: notnull [type=bool, outer=(25)]
      │    │         └── any-not-null [type=int, outer=(2)]
      │    │              └── variable: tab0.col0 [type=int, outer=(2)]
      │    └── projections [outer=(1,2,26)]
      │         └── case [type=bool, outer=(2,26)]
      │              ├── true [type=bool]
      │              ├── when [type=bool, outer=(2,26)]
      │              │    ├── and [type=bool, outer=(2,26)]
      │              │    │    ├── variable: bool_or [type=bool, outer=(26)]
      │              │    │    └── is-not [type=bool, outer=(2)]
      │              │    │         ├── variable: tab0.col0 [type=int, outer=(2)]
      │              │    │         └── null [type=unknown]
      │              │    └── true [type=bool]
      │              ├── when [type=bool, outer=(26)]
      │              │    ├── is [type=bool, outer=(26)]
      │              │    │    ├── variable: bool_or [type=bool, outer=(26)]
      │              │    │    └── null [type=unknown]
      │              │    └── false [type=bool]
      │              └── null [type=unknown]
      └── filters [type=bool, outer=(2,27)]
           └── or [type=bool, outer=(2,27)]
                ├── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
                │    ├── variable: tab0.col0 [type=int, outer=(2)]
                │    └── const: 1 [type=int]
                └── variable: case [type=bool, outer=(27)]


# TODO(madhavsuresh): the equality constraints here are not represented in the FDs
# Given x=z, we expect the selectivity of the constraints to be the minimum of  the constraints on x and z

build
SELECT x,z from b where x=z and x < 10 and x > 5 and z < 10 and z > 8
----
project
 ├── columns: x:1(int!null) z:2(int!null)
 ├── stats: [rows=0.08]
 ├── fd: ()-->(2)
 └── select
      ├── columns: x:1(int!null) z:2(int!null) rowid:3(int!null)
      ├── stats: [rows=0.08, distinct(1)=0.08, distinct(2)=0.08]
      ├── key: (3)
      ├── fd: ()-->(2), (3)-->(1)
      ├── scan b
      │    ├── columns: x:1(int) z:2(int!null) rowid:3(int!null)
      │    ├── stats: [rows=10000, distinct(1)=5000, distinct(2)=100]
      │    ├── key: (3)
      │    └── fd: (3)-->(1,2)
      └── filters [type=bool, outer=(1,2), constraints=(/1: [/6 - /9]; /2: [/9 - /9]), fd=()-->(2)]
           └── and [type=bool, outer=(1,2), constraints=(/1: [/6 - /9]; /2: [/9 - /9])]
                ├── and [type=bool, outer=(1,2), constraints=(/1: [/6 - /9]; /2: (/NULL - /9])]
                │    ├── and [type=bool, outer=(1,2), constraints=(/1: [/6 - /9]; /2: (/NULL - ])]
                │    │    ├── and [type=bool, outer=(1,2), constraints=(/1: (/NULL - /9]; /2: (/NULL - ])]
                │    │    │    ├── eq [type=bool, outer=(1,2), constraints=(/1: (/NULL - ]; /2: (/NULL - ])]
                │    │    │    │    ├── variable: b.x [type=int, outer=(1)]
                │    │    │    │    └── variable: b.z [type=int, outer=(2)]
                │    │    │    └── lt [type=bool, outer=(1), constraints=(/1: (/NULL - /9]; tight)]
                │    │    │         ├── variable: b.x [type=int, outer=(1)]
                │    │    │         └── const: 10 [type=int]
                │    │    └── gt [type=bool, outer=(1), constraints=(/1: [/6 - ]; tight)]
                │    │         ├── variable: b.x [type=int, outer=(1)]
                │    │         └── const: 5 [type=int]
                │    └── lt [type=bool, outer=(2), constraints=(/2: (/NULL - /9]; tight)]
                │         ├── variable: b.z [type=int, outer=(2)]
                │         └── const: 10 [type=int]
                └── gt [type=bool, outer=(2), constraints=(/2: [/9 - ]; tight)]
                     ├── variable: b.z [type=int, outer=(2)]
                     └── const: 8 [type=int]

# TODO:(madhavsuresh) This test case does not perform as expected, if there was
# an equality represented in the FDs, then the selectivity should be 
# defined by the constraint on z
build
SELECT x,z from b where x=z and x < 100 and x > 5 and z < 20 and z > 10
----
project
 ├── columns: x:1(int!null) z:2(int!null)
 ├── stats: [rows=16.92]
 └── select
      ├── columns: x:1(int!null) z:2(int!null) rowid:3(int!null)
      ├── stats: [rows=16.92, distinct(1)=16.92, distinct(2)=9]
      ├── key: (3)
      ├── fd: (3)-->(1,2)
      ├── scan b
      │    ├── columns: x:1(int) z:2(int!null) rowid:3(int!null)
      │    ├── stats: [rows=10000, distinct(1)=5000, distinct(2)=100]
      │    ├── key: (3)
      │    └── fd: (3)-->(1,2)
      └── filters [type=bool, outer=(1,2), constraints=(/1: [/6 - /99]; /2: [/11 - /19])]
           └── and [type=bool, outer=(1,2), constraints=(/1: [/6 - /99]; /2: [/11 - /19])]
                ├── and [type=bool, outer=(1,2), constraints=(/1: [/6 - /99]; /2: (/NULL - /19])]
                │    ├── and [type=bool, outer=(1,2), constraints=(/1: [/6 - /99]; /2: (/NULL - ])]
                │    │    ├── and [type=bool, outer=(1,2), constraints=(/1: (/NULL - /99]; /2: (/NULL - ])]
                │    │    │    ├── eq [type=bool, outer=(1,2), constraints=(/1: (/NULL - ]; /2: (/NULL - ])]
                │    │    │    │    ├── variable: b.x [type=int, outer=(1)]
                │    │    │    │    └── variable: b.z [type=int, outer=(2)]
                │    │    │    └── lt [type=bool, outer=(1), constraints=(/1: (/NULL - /99]; tight)]
                │    │    │         ├── variable: b.x [type=int, outer=(1)]
                │    │    │         └── const: 100 [type=int]
                │    │    └── gt [type=bool, outer=(1), constraints=(/1: [/6 - ]; tight)]
                │    │         ├── variable: b.x [type=int, outer=(1)]
                │    │         └── const: 5 [type=int]
                │    └── lt [type=bool, outer=(2), constraints=(/2: (/NULL - /19]; tight)]
                │         ├── variable: b.z [type=int, outer=(2)]
                │         └── const: 20 [type=int]
                └── gt [type=bool, outer=(2), constraints=(/2: [/11 - ]; tight)]
                     ├── variable: b.z [type=int, outer=(2)]
                     └── const: 10 [type=int]

exec-ddl
CREATE table customers (id int, name string, state string)
----
TABLE customers
 ├── id int
 ├── name string
 ├── state string
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

exec-ddl
create table order_history (order_id int, item_id int, customer_id int, year int)
----
TABLE order_history
 ├── order_id int
 ├── item_id int
 ├── customer_id int
 ├── year int
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

# The following two tests cases are paired together. The first has two constraints, one on a column that has an equivalent
# column. The second query has three constraints, one on an independent columns and two on equivalent columns.
# This series of tests demonstrates that the selectivity contribution for two equivalent columns is the mininum selectivity
# over those columns.
# 1/2 FD-equality-select tests

build
select * from (SELECT * from customers, order_history where id = customer_id) where year > 2004 and year < 2008 and id < 15 and id > 0
----
select
 ├── columns: id:1(int!null) name:2(string) state:3(string) order_id:5(int) item_id:6(int) customer_id:7(int!null) year:8(int!null)
 ├── stats: [rows=9.52380952, distinct(1)=9.52380952, distinct(8)=3]
 ├── fd: (1)==(7), (7)==(1)
 ├── project
 │    ├── columns: id:1(int!null) name:2(string) state:3(string) order_id:5(int) item_id:6(int) customer_id:7(int!null) year:8(int)
 │    ├── stats: [rows=111111.111, distinct(1)=700, distinct(8)=700]
 │    ├── fd: (1)==(7), (7)==(1)
 │    └── select
 │         ├── columns: id:1(int!null) name:2(string) state:3(string) customers.rowid:4(int!null) order_id:5(int) item_id:6(int) customer_id:7(int!null) year:8(int) order_history.rowid:9(int!null)
 │         ├── stats: [rows=111111.111, distinct(1)=700, distinct(8)=700]
 │         ├── key: (4,9)
 │         ├── fd: (4)-->(1-3), (9)-->(5-8), (1)==(7), (7)==(1)
 │         ├── inner-join
 │         │    ├── columns: id:1(int) name:2(string) state:3(string) customers.rowid:4(int!null) order_id:5(int) item_id:6(int) customer_id:7(int) year:8(int) order_history.rowid:9(int!null)
 │         │    ├── stats: [rows=1000000, distinct(1)=700, distinct(8)=700]
 │         │    ├── key: (4,9)
 │         │    ├── fd: (4)-->(1-3), (9)-->(5-8)
 │         │    ├── scan customers
 │         │    │    ├── columns: id:1(int) name:2(string) state:3(string) customers.rowid:4(int!null)
 │         │    │    ├── stats: [rows=1000, distinct(1)=700]
 │         │    │    ├── key: (4)
 │         │    │    └── fd: (4)-->(1-3)
 │         │    ├── scan order_history
 │         │    │    ├── columns: order_id:5(int) item_id:6(int) customer_id:7(int) year:8(int) order_history.rowid:9(int!null)
 │         │    │    ├── stats: [rows=1000, distinct(8)=700]
 │         │    │    ├── key: (9)
 │         │    │    └── fd: (9)-->(5-8)
 │         │    └── true [type=bool]
 │         └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
 │              └── eq [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
 │                   ├── variable: customers.id [type=int, outer=(1)]
 │                   └── variable: order_history.customer_id [type=int, outer=(7)]
 └── filters [type=bool, outer=(1,8), constraints=(/1: [/1 - /14]; /8: [/2005 - /2007]; tight)]
      └── and [type=bool, outer=(1,8), constraints=(/1: [/1 - /14]; /8: [/2005 - /2007]; tight)]
           ├── and [type=bool, outer=(1,8), constraints=(/1: (/NULL - /14]; /8: [/2005 - /2007]; tight)]
           │    ├── and [type=bool, outer=(8), constraints=(/8: [/2005 - /2007]; tight)]
           │    │    ├── gt [type=bool, outer=(8), constraints=(/8: [/2005 - ]; tight)]
           │    │    │    ├── variable: order_history.year [type=int, outer=(8)]
           │    │    │    └── const: 2004 [type=int]
           │    │    └── lt [type=bool, outer=(8), constraints=(/8: (/NULL - /2007]; tight)]
           │    │         ├── variable: order_history.year [type=int, outer=(8)]
           │    │         └── const: 2008 [type=int]
           │    └── lt [type=bool, outer=(1), constraints=(/1: (/NULL - /14]; tight)]
           │         ├── variable: customers.id [type=int, outer=(1)]
           │         └── const: 15 [type=int]
           └── gt [type=bool, outer=(1), constraints=(/1: [/1 - ]; tight)]
                ├── variable: customers.id [type=int, outer=(1)]
                └── const: 0 [type=int]

# The previous tests case and the following are paired together. The first has two constraints, one on a column that has an equivalent
# column. The second query has three constraints, one on an independent columns and two on equivalent columns.
# This series of tests demonstrates that the selectivity contribution for two equivalent columns is the mininum selectivity
# over those columns.
# 2/2 FD-equality-select tests

build
select * from (SELECT * from customers, order_history where id = customer_id) where year > 2004 and year < 2008 and id < 15 and id > 0 and customer_id > 0 and customer_id < 10
----
select
 ├── columns: id:1(int!null) name:2(string) state:3(string) order_id:5(int) item_id:6(int) customer_id:7(int!null) year:8(int!null)
 ├── stats: [rows=6.12244898, distinct(1)=6.12244898, distinct(7)=6.12244898, distinct(8)=3]
 ├── fd: (1)==(7), (7)==(1)
 ├── project
 │    ├── columns: id:1(int!null) name:2(string) state:3(string) order_id:5(int) item_id:6(int) customer_id:7(int!null) year:8(int)
 │    ├── stats: [rows=111111.111, distinct(1)=700, distinct(7)=700, distinct(8)=700]
 │    ├── fd: (1)==(7), (7)==(1)
 │    └── select
 │         ├── columns: id:1(int!null) name:2(string) state:3(string) customers.rowid:4(int!null) order_id:5(int) item_id:6(int) customer_id:7(int!null) year:8(int) order_history.rowid:9(int!null)
 │         ├── stats: [rows=111111.111, distinct(1)=700, distinct(7)=700, distinct(8)=700]
 │         ├── key: (4,9)
 │         ├── fd: (4)-->(1-3), (9)-->(5-8), (1)==(7), (7)==(1)
 │         ├── inner-join
 │         │    ├── columns: id:1(int) name:2(string) state:3(string) customers.rowid:4(int!null) order_id:5(int) item_id:6(int) customer_id:7(int) year:8(int) order_history.rowid:9(int!null)
 │         │    ├── stats: [rows=1000000, distinct(1)=700, distinct(7)=700, distinct(8)=700]
 │         │    ├── key: (4,9)
 │         │    ├── fd: (4)-->(1-3), (9)-->(5-8)
 │         │    ├── scan customers
 │         │    │    ├── columns: id:1(int) name:2(string) state:3(string) customers.rowid:4(int!null)
 │         │    │    ├── stats: [rows=1000, distinct(1)=700]
 │         │    │    ├── key: (4)
 │         │    │    └── fd: (4)-->(1-3)
 │         │    ├── scan order_history
 │         │    │    ├── columns: order_id:5(int) item_id:6(int) customer_id:7(int) year:8(int) order_history.rowid:9(int!null)
 │         │    │    ├── stats: [rows=1000, distinct(7)=700, distinct(8)=700]
 │         │    │    ├── key: (9)
 │         │    │    └── fd: (9)-->(5-8)
 │         │    └── true [type=bool]
 │         └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
 │              └── eq [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
 │                   ├── variable: customers.id [type=int, outer=(1)]
 │                   └── variable: order_history.customer_id [type=int, outer=(7)]
 └── filters [type=bool, outer=(1,7,8), constraints=(/1: [/1 - /14]; /7: [/1 - /9]; /8: [/2005 - /2007]; tight)]
      └── and [type=bool, outer=(1,7,8), constraints=(/1: [/1 - /14]; /7: [/1 - /9]; /8: [/2005 - /2007]; tight)]
           ├── and [type=bool, outer=(1,7,8), constraints=(/1: [/1 - /14]; /7: [/1 - ]; /8: [/2005 - /2007]; tight)]
           │    ├── and [type=bool, outer=(1,8), constraints=(/1: [/1 - /14]; /8: [/2005 - /2007]; tight)]
           │    │    ├── and [type=bool, outer=(1,8), constraints=(/1: (/NULL - /14]; /8: [/2005 - /2007]; tight)]
           │    │    │    ├── and [type=bool, outer=(8), constraints=(/8: [/2005 - /2007]; tight)]
           │    │    │    │    ├── gt [type=bool, outer=(8), constraints=(/8: [/2005 - ]; tight)]
           │    │    │    │    │    ├── variable: order_history.year [type=int, outer=(8)]
           │    │    │    │    │    └── const: 2004 [type=int]
           │    │    │    │    └── lt [type=bool, outer=(8), constraints=(/8: (/NULL - /2007]; tight)]
           │    │    │    │         ├── variable: order_history.year [type=int, outer=(8)]
           │    │    │    │         └── const: 2008 [type=int]
           │    │    │    └── lt [type=bool, outer=(1), constraints=(/1: (/NULL - /14]; tight)]
           │    │    │         ├── variable: customers.id [type=int, outer=(1)]
           │    │    │         └── const: 15 [type=int]
           │    │    └── gt [type=bool, outer=(1), constraints=(/1: [/1 - ]; tight)]
           │    │         ├── variable: customers.id [type=int, outer=(1)]
           │    │         └── const: 0 [type=int]
           │    └── gt [type=bool, outer=(7), constraints=(/7: [/1 - ]; tight)]
           │         ├── variable: order_history.customer_id [type=int, outer=(7)]
           │         └── const: 0 [type=int]
           └── lt [type=bool, outer=(7), constraints=(/7: (/NULL - /9]; tight)]
                ├── variable: order_history.customer_id [type=int, outer=(7)]
                └── const: 10 [type=int]

build
select max(state) from ( select * from (SELECT * from customers, order_history where id = customer_id) where year > 2004 and year < 2008 and id < 10 and id > 0) group by item_id
----
project
 ├── columns: max:10(string)
 ├── stats: [rows=6.09591953]
 └── group-by
      ├── columns: item_id:6(int) max:10(string)
      ├── grouping columns: item_id:6(int)
      ├── stats: [rows=6.09591953, distinct(6)=6.09591953]
      ├── key: (6)
      ├── fd: (6)-->(10)
      ├── project
      │    ├── columns: state:3(string) item_id:6(int)
      │    ├── stats: [rows=6.12244898, distinct(6)=6.09591953]
      │    └── select
      │         ├── columns: id:1(int!null) name:2(string) state:3(string) order_id:5(int) item_id:6(int) customer_id:7(int!null) year:8(int!null)
      │         ├── stats: [rows=6.12244898, distinct(1)=6.12244898, distinct(6)=6.09591953, distinct(8)=3]
      │         ├── fd: (1)==(7), (7)==(1)
      │         ├── project
      │         │    ├── columns: id:1(int!null) name:2(string) state:3(string) order_id:5(int) item_id:6(int) customer_id:7(int!null) year:8(int)
      │         │    ├── stats: [rows=111111.111, distinct(1)=700, distinct(6)=700, distinct(8)=700]
      │         │    ├── fd: (1)==(7), (7)==(1)
      │         │    └── select
      │         │         ├── columns: id:1(int!null) name:2(string) state:3(string) customers.rowid:4(int!null) order_id:5(int) item_id:6(int) customer_id:7(int!null) year:8(int) order_history.rowid:9(int!null)
      │         │         ├── stats: [rows=111111.111, distinct(1)=700, distinct(6)=700, distinct(8)=700]
      │         │         ├── key: (4,9)
      │         │         ├── fd: (4)-->(1-3), (9)-->(5-8), (1)==(7), (7)==(1)
      │         │         ├── inner-join
      │         │         │    ├── columns: id:1(int) name:2(string) state:3(string) customers.rowid:4(int!null) order_id:5(int) item_id:6(int) customer_id:7(int) year:8(int) order_history.rowid:9(int!null)
      │         │         │    ├── stats: [rows=1000000, distinct(1)=700, distinct(6)=700, distinct(8)=700]
      │         │         │    ├── key: (4,9)
      │         │         │    ├── fd: (4)-->(1-3), (9)-->(5-8)
      │         │         │    ├── scan customers
      │         │         │    │    ├── columns: id:1(int) name:2(string) state:3(string) customers.rowid:4(int!null)
      │         │         │    │    ├── stats: [rows=1000, distinct(1)=700]
      │         │         │    │    ├── key: (4)
      │         │         │    │    └── fd: (4)-->(1-3)
      │         │         │    ├── scan order_history
      │         │         │    │    ├── columns: order_id:5(int) item_id:6(int) customer_id:7(int) year:8(int) order_history.rowid:9(int!null)
      │         │         │    │    ├── stats: [rows=1000, distinct(6)=700, distinct(8)=700]
      │         │         │    │    ├── key: (9)
      │         │         │    │    └── fd: (9)-->(5-8)
      │         │         │    └── true [type=bool]
      │         │         └── filters [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ]), fd=(1)==(7), (7)==(1)]
      │         │              └── eq [type=bool, outer=(1,7), constraints=(/1: (/NULL - ]; /7: (/NULL - ])]
      │         │                   ├── variable: customers.id [type=int, outer=(1)]
      │         │                   └── variable: order_history.customer_id [type=int, outer=(7)]
      │         └── filters [type=bool, outer=(1,8), constraints=(/1: [/1 - /9]; /8: [/2005 - /2007]; tight)]
      │              └── and [type=bool, outer=(1,8), constraints=(/1: [/1 - /9]; /8: [/2005 - /2007]; tight)]
      │                   ├── and [type=bool, outer=(1,8), constraints=(/1: (/NULL - /9]; /8: [/2005 - /2007]; tight)]
      │                   │    ├── and [type=bool, outer=(8), constraints=(/8: [/2005 - /2007]; tight)]
      │                   │    │    ├── gt [type=bool, outer=(8), constraints=(/8: [/2005 - ]; tight)]
      │                   │    │    │    ├── variable: order_history.year [type=int, outer=(8)]
      │                   │    │    │    └── const: 2004 [type=int]
      │                   │    │    └── lt [type=bool, outer=(8), constraints=(/8: (/NULL - /2007]; tight)]
      │                   │    │         ├── variable: order_history.year [type=int, outer=(8)]
      │                   │    │         └── const: 2008 [type=int]
      │                   │    └── lt [type=bool, outer=(1), constraints=(/1: (/NULL - /9]; tight)]
      │                   │         ├── variable: customers.id [type=int, outer=(1)]
      │                   │         └── const: 10 [type=int]
      │                   └── gt [type=bool, outer=(1), constraints=(/1: [/1 - ]; tight)]
      │                        ├── variable: customers.id [type=int, outer=(1)]
      │                        └── const: 0 [type=int]
      └── aggregations [outer=(3)]
           └── max [type=string, outer=(3)]
                └── variable: customers.state [type=string, outer=(3)]
