exec-ddl
CREATE TABLE abc (
    a INT NOT NULL,
    b TEXT DEFAULT ('foo'),
    c FLOAT AS (a::float) STORED
)
----

exec-ddl
ALTER TABLE abc INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 2000
  },
  {
    "columns": ["b"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 2000,
    "distinct_count": 10
  }
]'
----

exec-ddl
CREATE TABLE xyz (
    x TEXT PRIMARY KEY,
    y INT8 NOT NULL,
    z FLOAT8
)
----

# Statistics should be derived from UPDATE input columns and transferred to
# RETURNING columns.
build
SELECT *
FROM [UPDATE xyz SET y=5 WHERE z=5.5 RETURNING *]
WHERE x > 'foo'
----
with &1
 ├── columns: x:10(string!null) y:11(int!null) z:12(float!null)
 ├── volatile, mutations
 ├── stats: [rows=3.33333333, distinct(10)=3.33333333, null(10)=0]
 ├── key: (10)
 ├── fd: ()-->(11,12)
 ├── update xyz
 │    ├── columns: xyz.x:1(string!null) xyz.y:2(int!null) xyz.z:3(float!null)
 │    ├── fetch columns: xyz.x:5(string) xyz.y:6(int) xyz.z:7(float)
 │    ├── update-mapping:
 │    │    └── y_new:9 => xyz.y:2
 │    ├── volatile, mutations
 │    ├── stats: [rows=10, distinct(1)=10, null(1)=0, distinct(2)=1, null(2)=0, distinct(3)=1, null(3)=0]
 │    ├── key: (1)
 │    ├── fd: ()-->(2,3)
 │    └── project
 │         ├── columns: y_new:9(int!null) xyz.x:5(string!null) xyz.y:6(int!null) xyz.z:7(float!null) crdb_internal_mvcc_timestamp:8(decimal)
 │         ├── stats: [rows=10, distinct(5)=10, null(5)=0, distinct(7)=1, null(7)=0, distinct(9)=1, null(9)=0]
 │         ├── key: (5)
 │         ├── fd: ()-->(7,9), (5)-->(6,8)
 │         ├── select
 │         │    ├── columns: xyz.x:5(string!null) xyz.y:6(int!null) xyz.z:7(float!null) crdb_internal_mvcc_timestamp:8(decimal)
 │         │    ├── stats: [rows=10, distinct(5)=10, null(5)=0, distinct(7)=1, null(7)=0]
 │         │    ├── key: (5)
 │         │    ├── fd: ()-->(7), (5)-->(6,8)
 │         │    ├── scan xyz
 │         │    │    ├── columns: xyz.x:5(string!null) xyz.y:6(int!null) xyz.z:7(float) crdb_internal_mvcc_timestamp:8(decimal)
 │         │    │    ├── stats: [rows=1000, distinct(5)=1000, null(5)=0, distinct(6)=100, null(6)=0, distinct(7)=100, null(7)=10]
 │         │    │    ├── key: (5)
 │         │    │    └── fd: (5)-->(6-8)
 │         │    └── filters
 │         │         └── xyz.z:7 = 5.5 [type=bool, outer=(7), constraints=(/7: [/5.5 - /5.5]; tight), fd=()-->(7)]
 │         └── projections
 │              └── 5 [as=y_new:9, type=int]
 └── select
      ├── columns: x:10(string!null) y:11(int!null) z:12(float!null)
      ├── stats: [rows=3.33333333, distinct(10)=3.33333333, null(10)=0]
      ├── key: (10)
      ├── fd: ()-->(11,12)
      ├── with-scan &1
      │    ├── columns: x:10(string!null) y:11(int!null) z:12(float!null)
      │    ├── mapping:
      │    │    ├──  xyz.x:1(string) => x:10(string)
      │    │    ├──  xyz.y:2(int) => y:11(int)
      │    │    └──  xyz.z:3(float) => z:12(float)
      │    ├── stats: [rows=10, distinct(10)=10, null(10)=0, distinct(11)=1, null(11)=0, distinct(12)=1, null(12)=0]
      │    ├── key: (10)
      │    └── fd: ()-->(11,12)
      └── filters
           └── x:10 > 'foo' [type=bool, outer=(10), constraints=(/10: [/e'foo\x00' - ]; tight)]

# Cardinality is zero.
build
UPDATE xyz SET x='foo' WHERE False RETURNING *
----
update xyz
 ├── columns: x:1(string!null) y:2(int!null) z:3(float)
 ├── fetch columns: x:5(string) y:6(int) z:7(float)
 ├── update-mapping:
 │    └── x_new:9 => x:1
 ├── cardinality: [0 - 0]
 ├── volatile, mutations
 ├── stats: [rows=0]
 ├── fd: ()-->(1)
 └── project
      ├── columns: x_new:9(string!null) x:5(string!null) y:6(int!null) z:7(float) crdb_internal_mvcc_timestamp:8(decimal)
      ├── cardinality: [0 - 0]
      ├── stats: [rows=0]
      ├── key: (5)
      ├── fd: ()-->(9), (5)-->(6-8)
      ├── select
      │    ├── columns: x:5(string!null) y:6(int!null) z:7(float) crdb_internal_mvcc_timestamp:8(decimal)
      │    ├── cardinality: [0 - 0]
      │    ├── stats: [rows=0]
      │    ├── key: (5)
      │    ├── fd: (5)-->(6-8)
      │    ├── scan xyz
      │    │    ├── columns: x:5(string!null) y:6(int!null) z:7(float) crdb_internal_mvcc_timestamp:8(decimal)
      │    │    ├── stats: [rows=1000]
      │    │    ├── key: (5)
      │    │    └── fd: (5)-->(6-8)
      │    └── filters
      │         └── false [type=bool, constraints=(contradiction; tight)]
      └── projections
           └── 'foo' [as=x_new:9, type=string]

# Regression test for #62692. Ensure we don't error when calculating stats for
# mutation passthrough columns

exec-ddl
CREATE TABLE parent (p INT PRIMARY KEY)
----

exec-ddl
CREATE TABLE child (x INT, c INT REFERENCES parent (p))
----

build
WITH q AS (UPDATE child SET c = p FROM parent WHERE p = 1 RETURNING p) SELECT * FROM q WHERE p = 1
----
with &2 (q)
 ├── columns: p:14(int!null)
 ├── volatile, mutations
 ├── stats: [rows=1000, distinct(14)=1, null(14)=0]
 ├── fd: ()-->(14)
 ├── project
 │    ├── columns: parent.p:9(int)
 │    ├── volatile, mutations
 │    ├── stats: [rows=1000, distinct(9)=1, null(9)=0]
 │    ├── fd: ()-->(9)
 │    └── update child
 │         ├── columns: x:1(int) child.c:2(int!null) rowid:3(int!null) parent.p:9(int) parent.crdb_internal_mvcc_timestamp:10(decimal)
 │         ├── fetch columns: x:5(int) child.c:6(int) rowid:7(int)
 │         ├── update-mapping:
 │         │    └── parent.p:9 => child.c:2
 │         ├── input binding: &1
 │         ├── volatile, mutations
 │         ├── stats: [rows=1000, distinct(9)=1, null(9)=0]
 │         ├── key: (3)
 │         ├── fd: ()-->(2,9,10), (2)==(9), (9)==(2), (3)-->(1)
 │         ├── select
 │         │    ├── columns: x:5(int) child.c:6(int) rowid:7(int!null) child.crdb_internal_mvcc_timestamp:8(decimal) parent.p:9(int!null) parent.crdb_internal_mvcc_timestamp:10(decimal)
 │         │    ├── stats: [rows=1000, distinct(9)=1, null(9)=0]
 │         │    ├── key: (7)
 │         │    ├── fd: ()-->(9,10), (7)-->(5,6,8)
 │         │    ├── inner-join (cross)
 │         │    │    ├── columns: x:5(int) child.c:6(int) rowid:7(int!null) child.crdb_internal_mvcc_timestamp:8(decimal) parent.p:9(int!null) parent.crdb_internal_mvcc_timestamp:10(decimal)
 │         │    │    ├── stats: [rows=1000000, distinct(7)=1000, null(7)=0, distinct(9)=1000, null(9)=0]
 │         │    │    ├── key: (7,9)
 │         │    │    ├── fd: (7)-->(5,6,8), (9)-->(10)
 │         │    │    ├── scan child
 │         │    │    │    ├── columns: x:5(int) child.c:6(int) rowid:7(int!null) child.crdb_internal_mvcc_timestamp:8(decimal)
 │         │    │    │    ├── stats: [rows=1000, distinct(7)=1000, null(7)=0]
 │         │    │    │    ├── key: (7)
 │         │    │    │    └── fd: (7)-->(5,6,8)
 │         │    │    ├── scan parent
 │         │    │    │    ├── columns: parent.p:9(int!null) parent.crdb_internal_mvcc_timestamp:10(decimal)
 │         │    │    │    ├── stats: [rows=1000, distinct(9)=1000, null(9)=0]
 │         │    │    │    ├── key: (9)
 │         │    │    │    └── fd: (9)-->(10)
 │         │    │    └── filters (true)
 │         │    └── filters
 │         │         └── parent.p:9 = 1 [type=bool, outer=(9), constraints=(/9: [/1 - /1]; tight), fd=()-->(9)]
 │         └── f-k-checks
 │              └── f-k-checks-item: child(c) -> parent(p)
 │                   └── anti-join (hash)
 │                        ├── columns: c:11(int!null)
 │                        ├── stats: [rows=1e-10]
 │                        ├── fd: ()-->(11)
 │                        ├── with-scan &1
 │                        │    ├── columns: c:11(int!null)
 │                        │    ├── mapping:
 │                        │    │    └──  parent.p:9(int) => c:11(int)
 │                        │    ├── stats: [rows=1000, distinct(11)=1, null(11)=0]
 │                        │    └── fd: ()-->(11)
 │                        ├── scan parent
 │                        │    ├── columns: parent.p:12(int!null)
 │                        │    ├── stats: [rows=1000, distinct(12)=1000, null(12)=0]
 │                        │    └── key: (12)
 │                        └── filters
 │                             └── c:11 = parent.p:12 [type=bool, outer=(11,12), constraints=(/11: (/NULL - ]; /12: (/NULL - ]), fd=(11)==(12), (12)==(11)]
 └── select
      ├── columns: p:14(int!null)
      ├── stats: [rows=1000, distinct(14)=1, null(14)=0]
      ├── fd: ()-->(14)
      ├── with-scan &2 (q)
      │    ├── columns: p:14(int)
      │    ├── mapping:
      │    │    └──  parent.p:9(int) => p:14(int)
      │    ├── stats: [rows=1000, distinct(14)=1, null(14)=0]
      │    └── fd: ()-->(14)
      └── filters
           └── p:14 = 1 [type=bool, outer=(14), constraints=(/14: [/1 - /1]; tight), fd=()-->(14)]
