# ------------------------
# Tests without Histograms
# TODO(mgarnter): Add more interesting tests for constrained partial index
# scans, with and without histograms.
# ------------------------

exec-ddl
CREATE TABLE a (
  k INT PRIMARY KEY,
  i INT,
  s STRING,
  INDEX idx_i_gt_100 (i) WHERE i > 100,
  INDEX idx_i_s_foo (i) WHERE s = 'foo'
)
----

exec-ddl
CREATE TABLE b (
  k INT PRIMARY KEY,
  i INT,
  s STRING,
  b BOOL,
  INDEX idx_i_s_foo_b (i) WHERE s = 'foo' AND b
)
----

exec-ddl
ALTER TABLE a INJECT STATISTICS '[
  {
    "columns": ["k"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 5000,
    "distinct_count": 5000
  },
  {
    "columns": ["i"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 4000,
    "distinct_count": 400
  },
  {
    "columns": ["s"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 4000,
    "distinct_count": 40
  }
]'
----

exec-ddl
ALTER TABLE b INJECT STATISTICS '[
  {
    "columns": ["k"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 5000,
    "distinct_count": 5000
  },
  {
    "columns": ["i"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 4000,
    "distinct_count": 400
  },
  {
    "columns": ["s"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 4000,
    "distinct_count": 40
  },
  {
    "columns": ["b"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 5000,
    "distinct_count": 2
  }
]'
----

opt
SELECT k FROM a WHERE i = 101
----
project
 ├── columns: k:1(int!null)
 ├── stats: [rows=10]
 ├── key: (1)
 └── select
      ├── columns: k:1(int!null) i:2(int!null)
      ├── stats: [rows=10, distinct(2)=1, null(2)=0]
      ├── key: (1)
      ├── fd: ()-->(2)
      ├── scan a@idx_i_gt_100,partial
      │    ├── columns: k:1(int!null) i:2(int)
      │    ├── stats: [rows=1333.33333, distinct(2)=133.333333, null(2)=0]
      │    ├── key: (1)
      │    └── fd: (1)-->(2)
      └── filters
           └── i:2 = 101 [type=bool, outer=(2), constraints=(/2: [/101 - /101]; tight), fd=()-->(2)]

opt
SELECT k FROM a WHERE i > 100
----
project
 ├── columns: k:1(int!null)
 ├── stats: [rows=1333.33333]
 ├── key: (1)
 └── scan a@idx_i_gt_100,partial
      ├── columns: k:1(int!null) i:2(int!null)
      ├── stats: [rows=1333.33333, distinct(2)=133.333333, null(2)=0]
      ├── key: (1)
      └── fd: (1)-->(2)

opt
SELECT k FROM a WHERE i > 1000
----
project
 ├── columns: k:1(int!null)
 ├── stats: [rows=1333.33333]
 ├── key: (1)
 └── select
      ├── columns: k:1(int!null) i:2(int!null)
      ├── stats: [rows=1333.33333, distinct(2)=133.333333, null(2)=0]
      ├── key: (1)
      ├── fd: (1)-->(2)
      ├── scan a@idx_i_gt_100,partial
      │    ├── columns: k:1(int!null) i:2(int)
      │    ├── stats: [rows=1333.33333, distinct(2)=133.333333, null(2)=0]
      │    ├── key: (1)
      │    └── fd: (1)-->(2)
      └── filters
           └── i:2 > 1000 [type=bool, outer=(2), constraints=(/2: [/1001 - ]; tight)]

opt
SELECT k FROM a WHERE i > 100 AND i < 1000
----
project
 ├── columns: k:1(int!null)
 ├── stats: [rows=4000]
 ├── key: (1)
 └── select
      ├── columns: k:1(int!null) i:2(int!null)
      ├── stats: [rows=4000, distinct(2)=400, null(2)=0]
      ├── key: (1)
      ├── fd: (1)-->(2)
      ├── scan a@idx_i_gt_100,partial
      │    ├── columns: k:1(int!null) i:2(int)
      │    ├── stats: [rows=1333.33333, distinct(2)=133.333333, null(2)=0]
      │    ├── key: (1)
      │    └── fd: (1)-->(2)
      └── filters
           └── i:2 < 1000 [type=bool, outer=(2), constraints=(/2: (/NULL - /999]; tight)]

opt
SELECT k FROM a WHERE s = 'foo'
----
project
 ├── columns: k:1(int!null)
 ├── stats: [rows=100]
 ├── key: (1)
 └── index-join a
      ├── columns: k:1(int!null) s:3(string!null)
      ├── stats: [rows=100, distinct(3)=1, null(3)=0]
      ├── key: (1)
      ├── fd: ()-->(3)
      └── scan a@idx_i_s_foo,partial
           ├── columns: k:1(int!null)
           ├── stats: [rows=100, distinct(3)=1, null(3)=0]
           └── key: (1)

opt
SELECT k FROM a WHERE s = 'foo' AND i = 101
----
project
 ├── columns: k:1(int!null)
 ├── stats: [rows=0.925]
 ├── key: (1)
 └── index-join a
      ├── columns: k:1(int!null) i:2(int!null) s:3(string!null)
      ├── stats: [rows=0.925, distinct(2)=0.925, null(2)=0, distinct(3)=0.925, null(3)=0, distinct(2,3)=0.925, null(2,3)=0]
      ├── key: (1)
      ├── fd: ()-->(2,3)
      └── select
           ├── columns: k:1(int!null) i:2(int!null)
           ├── stats: [rows=1.11771617, distinct(2)=1, null(2)=0]
           ├── key: (1)
           ├── fd: ()-->(2)
           ├── scan a@idx_i_s_foo,partial
           │    ├── columns: k:1(int!null) i:2(int)
           │    ├── stats: [rows=100, distinct(1)=100, null(1)=0, distinct(2)=89.4681517, null(2)=0, distinct(3)=1, null(3)=0]
           │    ├── key: (1)
           │    └── fd: (1)-->(2)
           └── filters
                └── i:2 = 101 [type=bool, outer=(2), constraints=(/2: [/101 - /101]; tight), fd=()-->(2)]

# Test for a top-level AndExpr in the predicate. Notice the estimated rows in
# the plan above for the scan are 100, and here 50 rows are estimated with the
# addition of the boolean filter for b.
opt
SELECT k FROM b WHERE s = 'foo' AND b AND i = 101
----
project
 ├── columns: k:1(int!null)
 ├── stats: [rows=0.9125]
 ├── key: (1)
 └── index-join b
      ├── columns: k:1(int!null) i:2(int!null) s:3(string!null) b:4(bool!null)
      ├── stats: [rows=0.9125, distinct(2)=0.9125, null(2)=0, distinct(3)=0.9125, null(3)=0, distinct(4)=0.9125, null(4)=0, distinct(2-4)=0.9125, null(2-4)=0]
      ├── key: (1)
      ├── fd: ()-->(2-4)
      └── select
           ├── columns: k:1(int!null) i:2(int!null)
           ├── stats: [rows=1.05754684, distinct(2)=1, null(2)=0]
           ├── key: (1)
           ├── fd: ()-->(2)
           ├── scan b@idx_i_s_foo_b,partial
           │    ├── columns: k:1(int!null) i:2(int)
           │    ├── stats: [rows=50, distinct(1)=50, null(1)=0, distinct(2)=47.2792297, null(2)=0, distinct(3)=1, null(3)=0, distinct(4)=1, null(4)=0, distinct(3,4)=1, null(3,4)=0]
           │    ├── key: (1)
           │    └── fd: (1)-->(2)
           └── filters
                └── i:2 = 101 [type=bool, outer=(2), constraints=(/2: [/101 - /101]; tight), fd=()-->(2)]

# ---------------------
# Tests with Histograms
# ---------------------

exec-ddl
CREATE TABLE hist (
  k INT PRIMARY KEY,
  i INT,
  s STRING,
  INDEX idx_i_lt_15 (i) WHERE i < 15,
  INDEX idx_i_s_foo (i) WHERE s = 'foo'
)
----

exec-ddl
ALTER TABLE hist INJECT STATISTICS '[
  {
    "columns": ["i"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 1000,
    "distinct_count": 1000,
    "histo_col_type": "int",
    "histo_buckets": [
      {"num_eq": 0, "num_range": 0, "distinct_range": 0, "upper_bound": "0"},
      {"num_eq": 10, "num_range": 90, "distinct_range": 9, "upper_bound": "10"},
      {"num_eq": 20, "num_range": 180, "distinct_range": 9, "upper_bound": "20"},
      {"num_eq": 30, "num_range": 270, "distinct_range": 9, "upper_bound": "30"},
      {"num_eq": 40, "num_range": 360, "distinct_range": 9, "upper_bound": "40"}
    ]
  },
  {
    "columns": ["s"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 1000,
    "distinct_count": 40,
    "histo_col_type": "string",
    "histo_buckets": [
      {"num_eq": 0, "num_range": 0, "distinct_range": 0, "upper_bound": "apple"},
      {"num_eq": 10, "num_range": 90, "distinct_range": 9, "upper_bound": "banana"},
      {"num_eq": 20, "num_range": 180, "distinct_range": 9, "upper_bound": "cherry"},
      {"num_eq": 30, "num_range": 270, "distinct_range": 9, "upper_bound": "mango"},
      {"num_eq": 40, "num_range": 360, "distinct_range": 9, "upper_bound": "pineapple"}
    ]
  }
]'
----

opt
SELECT * FROM hist WHERE i < 10
----
index-join hist
 ├── columns: k:1(int!null) i:2(int!null) s:3(string)
 ├── stats: [rows=90, distinct(2)=9, null(2)=0]
 │   histogram(2)=  0  0  80 10
 │                <--- 0 ---- 9
 ├── key: (1)
 ├── fd: (1)-->(2,3)
 └── select
      ├── columns: k:1(int!null) i:2(int!null)
      ├── stats: [rows=90, distinct(2)=9, null(2)=0]
      │   histogram(2)=  0  0  80 10
      │                <--- 0 ---- 9
      ├── key: (1)
      ├── fd: (1)-->(2)
      ├── scan hist@idx_i_lt_15,partial
      │    ├── columns: k:1(int!null) i:2(int)
      │    ├── stats: [rows=180, distinct(1)=180, null(1)=0, distinct(2)=14, null(2)=0]
      │    │   histogram(2)=  0  0  90  10  60  20
      │    │                <--- 0 ---- 10 ---- 14
      │    ├── key: (1)
      │    └── fd: (1)-->(2)
      └── filters
           └── i:2 < 10 [type=bool, outer=(2), constraints=(/2: (/NULL - /9]; tight)]

opt
SELECT * FROM hist WHERE i > 30 and s = 'foo'
----
index-join hist
 ├── columns: k:1(int!null) i:2(int!null) s:3(string!null)
 ├── stats: [rows=433.2, distinct(2)=10, null(2)=0, distinct(3)=1, null(3)=0, distinct(2,3)=10, null(2,3)=0]
 │   histogram(2)=  0  0   360  40
 │                <--- 30 ----- 40
 │   histogram(3)=  0   30
 │                <--- 'foo'
 ├── key: (1)
 ├── fd: ()-->(3), (1)-->(2)
 └── select
      ├── columns: k:1(int!null) i:2(int!null)
      ├── stats: [rows=12, distinct(2)=7.33858941, null(2)=0]
      │   histogram(2)=  0  0   10.8 1.2
      │                <--- 30 ------ 40
      ├── key: (1)
      ├── fd: (1)-->(2)
      ├── scan hist@idx_i_s_foo,partial
      │    ├── columns: k:1(int!null) i:2(int)
      │    ├── stats: [rows=30, distinct(1)=30, null(1)=0, distinct(2)=30, null(2)=0, distinct(3)=1, null(3)=0]
      │    │   histogram(2)=  0  0  2.7 0.3  5.4 0.6  8.1 0.9  10.8 1.2
      │    │                <--- 0 ----- 10 ----- 20 ----- 30 ------ 40
      │    │   histogram(3)=  0   30
      │    │                <--- 'foo'
      │    ├── key: (1)
      │    └── fd: (1)-->(2)
      └── filters
           └── i:2 > 30 [type=bool, outer=(2), constraints=(/2: [/31 - ]; tight)]
