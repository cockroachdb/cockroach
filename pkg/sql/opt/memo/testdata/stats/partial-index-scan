# ------------------------
# Tests without Histograms
# ------------------------

exec-ddl
CREATE TABLE a (
  k INT PRIMARY KEY,
  i INT,
  s STRING,
  t STRING,
  INDEX idx_s_foo (i) WHERE s = 'foo',
  INDEX idx_i_0_to_100 (s) WHERE i > 0 AND i < 100,
  INDEX idx_not_tight (i) WHERE i < k AND i % 3 = 0,
  INDEX idx_equiv (s, t) WHERE s = t,
  INDEX idx_s_null (i) WHERE s IS NULL,
  INDEX idx_i_200_to_250 (i, s) WHERE i > 200 AND i < 250
)
----

exec-ddl
ALTER TABLE a INJECT STATISTICS '[
  {
    "columns": ["k"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 5000,
    "distinct_count": 5000
  },
  {
    "columns": ["i"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 5000,
    "distinct_count": 500
  },
  {
    "columns": ["s"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 5000,
    "distinct_count": 50,
    "null_count": 275
  },
  {
    "columns": ["t"],
    "created_at": "2018-01-01 1:30:00.00000+00:00",
    "row_count": 5000,
    "distinct_count": 500,
    "null_count": 50
  }
]'
----

# Distinct and null counts are updated based on the partial index predicate.
opt
SELECT * FROM a WHERE s = 'foo'
----
index-join a
 ├── columns: k:1(int!null) i:2(int) s:3(string!null) t:4(string)
 ├── stats: [rows=96.4285714, distinct(3)=1, null(3)=0]
 ├── key: (1)
 ├── fd: ()-->(3), (1)-->(2,4)
 └── scan a@idx_s_foo,partial
      ├── columns: k:1(int!null) i:2(int)
      ├── stats: [rows=96.4285714, distinct(3)=1, null(3)=0]
      ├── key: (1)
      └── fd: (1)-->(2)

# Test for Select filter applied after partial index scan.
opt
SELECT * FROM a WHERE i > 25 AND i < 50
----
select
 ├── columns: k:1(int!null) i:2(int!null) s:3(string) t:4(string)
 ├── stats: [rows=240, distinct(2)=24, null(2)=0]
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 ├── index-join a
 │    ├── columns: k:1(int!null) i:2(int) s:3(string) t:4(string)
 │    ├── stats: [rows=990]
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4)
 │    └── scan a@idx_i_0_to_100,partial
 │         ├── columns: k:1(int!null) s:3(string)
 │         ├── stats: [rows=990, distinct(2)=99, null(2)=0]
 │         ├── key: (1)
 │         └── fd: (1)-->(3)
 └── filters
      └── (i:2 > 25) AND (i:2 < 50) [type=bool, outer=(2), constraints=(/2: [/26 - /49]; tight)]

# Test for multiple unapplied conjunctions due to non-tight constraints.
opt
SELECT * FROM a WHERE i < k AND i % 3 = 0
----
index-join a
 ├── columns: k:1(int!null) i:2(int!null) s:3(string) t:4(string)
 ├── immutable
 ├── stats: [rows=555.555556, distinct(1)=555.555556, null(1)=0, distinct(2)=500, null(2)=0]
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 └── scan a@idx_not_tight,partial
      ├── columns: k:1(int!null) i:2(int)
      ├── stats: [rows=555.555556, distinct(1)=555.555556, null(1)=0, distinct(2)=500, null(2)=0]
      ├── key: (1)
      └── fd: (1)-->(2)

# Test for an indexed column that is also constrained by partial index predicate.
opt
SELECT * FROM a WHERE i > 215 AND i < 230
----
index-join a
 ├── columns: k:1(int!null) i:2(int!null) s:3(string) t:4(string)
 ├── stats: [rows=140, distinct(2)=14, null(2)=0]
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 └── scan a@idx_i_200_to_250,partial
      ├── columns: k:1(int!null) i:2(int!null) s:3(string)
      ├── constraint: /2/3/1: [/216 - /229]
      ├── stats: [rows=140, distinct(2)=14, null(2)=0]
      ├── key: (1)
      └── fd: (1)-->(2,3)

# Test for an indexed column that is also constrained by partial index predicate
# and the scan constraint has multiple spans.
opt
SELECT * FROM a WHERE (i > 215 AND i < 230) OR (i > 240 AND i < 250)
----
index-join a
 ├── columns: k:1(int!null) i:2(int!null) s:3(string) t:4(string)
 ├── stats: [rows=230, distinct(2)=23, null(2)=0]
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 └── scan a@idx_i_200_to_250,partial
      ├── columns: k:1(int!null) i:2(int!null) s:3(string)
      ├── constraint: /2/3/1
      │    ├── [/216 - /229]
      │    └── [/241 - /249]
      ├── stats: [rows=230, distinct(2)=23, null(2)=0]
      ├── key: (1)
      └── fd: (1)-->(2,3)

# Test for two indexed columns with one also constrained by partial index
# predicate.
opt
SELECT * FROM a WHERE i > 215 AND i < 230 AND s = 'baz'
----
index-join a
 ├── columns: k:1(int!null) i:2(int!null) s:3(string!null) t:4(string)
 ├── stats: [rows=12.87, distinct(2)=12.87, null(2)=0, distinct(3)=1, null(3)=0, distinct(2,3)=12.87, null(2,3)=0]
 ├── key: (1)
 ├── fd: ()-->(3), (1)-->(2,4)
 └── select
      ├── columns: k:1(int!null) i:2(int!null) s:3(string!null)
      ├── stats: [rows=2.87118328, distinct(3)=1, null(3)=0]
      ├── key: (1)
      ├── fd: ()-->(3), (1)-->(2)
      ├── scan a@idx_i_200_to_250,partial
      │    ├── columns: k:1(int!null) i:2(int!null) s:3(string)
      │    ├── constraint: /2/3/1: [/216/'baz' - /229/'baz']
      │    ├── stats: [rows=140, distinct(1)=140, null(1)=0, distinct(2)=14, null(2)=0, distinct(3)=47.0785632, null(3)=7.7]
      │    ├── key: (1)
      │    └── fd: (1)-->(2,3)
      └── filters
           └── s:3 = 'baz' [type=bool, outer=(3), constraints=(/3: [/'baz' - /'baz']; tight), fd=()-->(3)]

# Test for FuncDep equivalencies.
opt
SELECT * FROM a WHERE s = t AND s LIKE '%foo%' AND t LIKE '%bar%'
----
index-join a
 ├── columns: k:1(int!null) i:2(int) s:3(string!null) t:4(string!null)
 ├── stats: [rows=1.04895, distinct(3)=1.04895, null(3)=0, distinct(4)=1.04895, null(4)=0, distinct(3,4)=1.04895, null(3,4)=0]
 ├── key: (1)
 ├── fd: (1)-->(2-4), (3)==(4), (4)==(3)
 └── select
      ├── columns: k:1(int!null) s:3(string!null) t:4(string!null)
      ├── stats: [rows=1.0395, distinct(3)=1.0395, null(3)=0, distinct(4)=1.0395, null(4)=0]
      ├── key: (1)
      ├── fd: (1)-->(3,4)
      ├── scan a@idx_equiv,partial
      │    ├── columns: k:1(int!null) s:3(string) t:4(string)
      │    ├── stats: [rows=9.3555, distinct(1)=9.3555, null(1)=0, distinct(3)=9.3555, null(3)=0, distinct(4)=9.3555, null(4)=0]
      │    ├── key: (1)
      │    └── fd: (1)-->(3,4)
      └── filters
           ├── s:3 LIKE '%foo%' [type=bool, outer=(3), constraints=(/3: (/NULL - ])]
           └── t:4 LIKE '%bar%' [type=bool, outer=(4), constraints=(/4: (/NULL - ])]

# Test for null predicate.
opt
SELECT * FROM a WHERE s IS NULL
----
index-join a
 ├── columns: k:1(int!null) i:2(int) s:3(string) t:4(string)
 ├── stats: [rows=275, distinct(3)=1, null(3)=275]
 ├── key: (1)
 ├── fd: ()-->(3), (1)-->(2,4)
 └── scan a@idx_s_null,partial
      ├── columns: k:1(int!null) i:2(int)
      ├── stats: [rows=275, distinct(3)=1, null(3)=275]
      ├── key: (1)
      └── fd: (1)-->(2)

# Test for constrained partial index scan.
opt
SELECT * FROM a WHERE s = 'foo' AND i > 10 AND i < 20
----
index-join a
 ├── columns: k:1(int!null) i:2(int!null) s:3(string!null) t:4(string)
 ├── stats: [rows=8.27357143, distinct(2)=8.27357143, null(2)=0, distinct(3)=1, null(3)=0, distinct(2,3)=8.27357143, null(2,3)=0]
 ├── key: (1)
 ├── fd: ()-->(3), (1)-->(2,4)
 └── scan a@idx_s_foo,partial
      ├── columns: k:1(int!null) i:2(int!null)
      ├── constraint: /2/1: [/11 - /19]
      ├── stats: [rows=1.73571429, distinct(2)=1.73571429, null(2)=0, distinct(3)=1, null(3)=0]
      ├── key: (1)
      └── fd: (1)-->(2)

# ---------------------
# Tests with Histograms
# ---------------------

exec-ddl
CREATE TABLE hist (
  k INT PRIMARY KEY,
  i INT,
  s STRING,
  t STRING,
  INDEX idx_i_100_to_200 (s) WHERE i > 100 AND i <= 200,
  INDEX idx_i_200_to_400 (i, s) WHERE i > 200 AND i <= 400
)
----

exec-ddl
ALTER TABLE hist INJECT STATISTICS '[
  {
    "columns": ["i"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 1000,
    "distinct_count": 41,
    "null_count": 30,
    "histo_col_type": "int",
    "histo_buckets": [
      {"num_eq": 0, "num_range": 0, "distinct_range": 0, "upper_bound": "0"},
      {"num_eq": 10, "num_range": 90, "distinct_range": 9, "upper_bound": "100"},
      {"num_eq": 10, "num_range": 180, "distinct_range": 9, "upper_bound": "200"},
      {"num_eq": 20, "num_range": 270, "distinct_range": 9, "upper_bound": "300"},
      {"num_eq": 30, "num_range": 360, "distinct_range": 9, "upper_bound": "400"}
    ]
  },
  {
    "columns": ["s"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 1000,
    "distinct_count": 40,
    "histo_col_type": "string",
    "histo_buckets": [
      {"num_eq": 0, "num_range": 0, "distinct_range": 0, "upper_bound": "apple"},
      {"num_eq": 10, "num_range": 90, "distinct_range": 9, "upper_bound": "banana"},
      {"num_eq": 20, "num_range": 180, "distinct_range": 9, "upper_bound": "cherry"},
      {"num_eq": 30, "num_range": 270, "distinct_range": 9, "upper_bound": "mango"},
      {"num_eq": 40, "num_range": 360, "distinct_range": 9, "upper_bound": "pineapple"}
    ]
  }
]'
----

# TODO(mgartner): The distinct(2) stat for the partial index scan should be 10
# not 11. It is currently one more than it should be because
# updateDistinctCountFromHistogram increments the distinct count before the null
# count has been set to zero.
opt
SELECT * FROM hist WHERE i > 125 AND i < 150
----
select
 ├── columns: k:1(int!null) i:2(int!null) s:3(string) t:4(string)
 ├── stats: [rows=43.6363636, distinct(2)=4.09090909, null(2)=0]
 │   histogram(2)=  0   0   41.818 1.8182
 │                <--- 125 -------- 149 -
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 ├── index-join hist
 │    ├── columns: k:1(int!null) i:2(int) s:3(string) t:4(string)
 │    ├── stats: [rows=190]
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4)
 │    └── scan hist@idx_i_100_to_200,partial
 │         ├── columns: k:1(int!null) s:3(string)
 │         ├── stats: [rows=190, distinct(2)=11, null(2)=0]
 │         │   histogram(2)=  0   0   180  10
 │         │                <--- 100 ----- 200
 │         ├── key: (1)
 │         └── fd: (1)-->(3)
 └── filters
      └── (i:2 > 125) AND (i:2 < 150) [type=bool, outer=(2), constraints=(/2: [/126 - /149]; tight)]

# Test for constrained partial index scan.
opt
SELECT * FROM hist WHERE i > 125 AND i < 150 AND s >= 'banana' AND s < 'cherry'
----
select
 ├── columns: k:1(int!null) i:2(int!null) s:3(string!null) t:4(string)
 ├── stats: [rows=6.91433927, distinct(2)=4.09090909, null(2)=0, distinct(3)=5.5, null(3)=0, distinct(2,3)=6.91433927, null(2,3)=0]
 │   histogram(2)=  0   0   6.6262 0.2881
 │                <--- 125 -------- 149 -
 │   histogram(3)=  0  0.69143   6.2229     0
 │                <--- 'banana' -------- 'cherry'
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 ├── index-join hist
 │    ├── columns: k:1(int!null) i:2(int) s:3(string) t:4(string)
 │    ├── stats: [rows=19]
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4)
 │    └── scan hist@idx_i_100_to_200,partial
 │         ├── columns: k:1(int!null) s:3(string!null)
 │         ├── constraint: /3/1: [/'banana' - /'cherry')
 │         ├── stats: [rows=19, distinct(2)=11, null(2)=0, distinct(3)=5.5, null(3)=0]
 │         │   histogram(2)=  0   0   18   1
 │         │                <--- 100 ---- 200
 │         │   histogram(3)=  0    1.9     17.1     0
 │         │                <--- 'banana' ------ 'cherry'
 │         ├── key: (1)
 │         └── fd: (1)-->(3)
 └── filters
      └── (i:2 > 125) AND (i:2 < 150) [type=bool, outer=(2), constraints=(/2: [/126 - /149]; tight)]

# Test for an indexed column that is also constrained by partial index predicate.
opt
SELECT * FROM hist WHERE i > 300 AND i < 350
----
index-join hist
 ├── columns: k:1(int!null) i:2(int!null) s:3(string) t:4(string)
 ├── stats: [rows=178.181818, distinct(2)=6.36363636, null(2)=0]
 │   histogram(2)=  0   0   174.55 3.6364
 │                <--- 300 -------- 349 -
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 └── scan hist@idx_i_200_to_400,partial
      ├── columns: k:1(int!null) i:2(int!null) s:3(string)
      ├── constraint: /2/3/1: [/301 - /349]
      ├── stats: [rows=178.181818, distinct(2)=6.36363636, null(2)=0]
      │   histogram(2)=  0   0   174.55 3.6364
      │                <--- 300 -------- 349 -
      ├── key: (1)
      └── fd: (1)-->(2,3)

# Test for an indexed column that is also constrained by partial index predicate
# and the scan constraint has multiple spans.
opt
SELECT * FROM hist WHERE (i > 300 AND i < 350) OR (i > 360 AND i < 370)
----
index-join hist
 ├── columns: k:1(int!null) i:2(int!null) s:3(string) t:4(string)
 ├── stats: [rows=210.909091, distinct(2)=8.09090909, null(2)=0]
 │   histogram(2)=  0   0   174.55 3.6364 0   0   29.091 3.6364
 │                <--- 300 -------- 349 ---- 360 -------- 369 -
 ├── key: (1)
 ├── fd: (1)-->(2-4)
 └── scan hist@idx_i_200_to_400,partial
      ├── columns: k:1(int!null) i:2(int!null) s:3(string)
      ├── constraint: /2/3/1
      │    ├── [/301 - /349]
      │    └── [/361 - /369]
      ├── stats: [rows=210.909091, distinct(2)=8.09090909, null(2)=0]
      │   histogram(2)=  0   0   174.55 3.6364 0   0   29.091 3.6364
      │                <--- 300 -------- 349 ---- 360 -------- 369 -
      ├── key: (1)
      └── fd: (1)-->(2,3)

opt
SELECT * FROM hist WHERE i > 300 AND i < 350 AND s = 'banana'
----
index-join hist
 ├── columns: k:1(int!null) i:2(int!null) s:3(string!null) t:4(string)
 ├── stats: [rows=2.8233552, distinct(2)=2.8233552, null(2)=0, distinct(3)=1, null(3)=0, distinct(2,3)=2.8233552, null(2,3)=0]
 │   histogram(2)=  0   0   2.7657 0.057619
 │                <--- 300 --------- 349 --
 │   histogram(3)=  0   2.8234
 │                <--- 'banana'
 ├── key: (1)
 ├── fd: ()-->(3), (1)-->(2,4)
 └── select
      ├── columns: k:1(int!null) i:2(int!null) s:3(string!null)
      ├── stats: [rows=1.78181818, distinct(3)=1, null(3)=0]
      │   histogram(3)=  0   1.7818
      │                <--- 'banana'
      ├── key: (1)
      ├── fd: ()-->(3), (1)-->(2)
      ├── scan hist@idx_i_200_to_400,partial
      │    ├── columns: k:1(int!null) i:2(int!null) s:3(string)
      │    ├── constraint: /2/3/1: [/301/'banana' - /349/'banana']
      │    ├── stats: [rows=178.181818, distinct(1)=178.181818, null(1)=0, distinct(2)=6.36363636, null(2)=0, distinct(3)=39.7038896, null(3)=0]
      │    │   histogram(2)=  0   0   174.55 3.6364
      │    │                <--- 300 -------- 349 -
      │    │   histogram(3)=  0     0     16.036   1.7818   32.073   3.5636   48.109  5.3455   64.145    7.1273
      │    │                <--- 'apple' -------- 'banana' -------- 'cherry' -------- 'mango' -------- 'pineapple'
      │    ├── key: (1)
      │    └── fd: (1)-->(2,3)
      └── filters
           └── s:3 = 'banana' [type=bool, outer=(3), constraints=(/3: [/'banana' - /'banana']; tight), fd=()-->(3)]
