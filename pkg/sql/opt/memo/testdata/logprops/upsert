exec-ddl
CREATE TABLE abc (
    a INT NOT NULL,
    b INT DEFAULT (10),
    c INT AS (b + 1) STORED,
    UNIQUE(a),
    UNIQUE(b, c)
)
----

exec-ddl
CREATE TABLE xyz (
    x INT PRIMARY KEY,
    y INT,
    z INT,
    UNIQUE (y, z),
    UNIQUE (z, y)
)
----

# INSERT..ON CONFLICT case. Don't inherit FDs.
build
INSERT INTO abc (a, b)
SELECT x, y FROM xyz WHERE y=1
ON CONFLICT (b, c) DO
UPDATE SET a=1, b=excluded.b+abc.c
RETURNING *
----
project
 ├── columns: a:1(int!null) b:2(int) c:3(int)
 ├── side-effects, mutations
 ├── prune: (1-3)
 └── upsert abc
      ├── columns: a:1(int!null) b:2(int) c:3(int) rowid:4(int!null)
      ├── canary column: 13
      ├── fetch columns: a:10(int) b:11(int) c:12(int) rowid:13(int)
      ├── insert-mapping:
      │    ├── x:5 => a:1
      │    ├── y:6 => b:2
      │    ├── column9:9 => c:3
      │    └── column8:8 => rowid:4
      ├── update-mapping:
      │    ├── upsert_a:17 => a:1
      │    ├── upsert_b:18 => b:2
      │    └── upsert_c:19 => c:3
      ├── return-mapping:
      │    ├── upsert_a:17 => a:1
      │    ├── upsert_b:18 => b:2
      │    ├── upsert_c:19 => c:3
      │    └── upsert_rowid:20 => rowid:4
      ├── side-effects, mutations
      └── project
           ├── columns: upsert_a:17(int!null) upsert_b:18(int) upsert_c:19(int) upsert_rowid:20(int) x:5(int!null) y:6(int!null) column8:8(int) column9:9(int!null) a:10(int) b:11(int) c:12(int) rowid:13(int) column14:14(int!null) column15:15(int) column16:16(int)
           ├── side-effects
           ├── key: (13)
           ├── fd: ()-->(5,6,8,9,14), (13)-->(10-12), (10)-->(11-13), (11,12)~~>(10,13), (12)-->(15), (15)-->(16), (13)-->(17), (13,15)-->(18), (13,16)-->(19), (13)-->(20)
           ├── prune: (5,6,8-20)
           ├── reject-nulls: (10-13)
           ├── interesting orderings: (+13) (+10) (+11,+12,+13)
           ├── project
           │    ├── columns: column16:16(int) x:5(int!null) y:6(int!null) column8:8(int) column9:9(int!null) a:10(int) b:11(int) c:12(int) rowid:13(int) column14:14(int!null) column15:15(int)
           │    ├── side-effects
           │    ├── key: (13)
           │    ├── fd: ()-->(5,6,8,9,14), (13)-->(10-12), (10)-->(11-13), (11,12)~~>(10,13), (12)-->(15), (15)-->(16)
           │    ├── prune: (5,6,8-16)
           │    ├── reject-nulls: (10-13)
           │    ├── interesting orderings: (+13) (+10) (+11,+12,+13)
           │    ├── project
           │    │    ├── columns: column14:14(int!null) column15:15(int) x:5(int!null) y:6(int!null) column8:8(int) column9:9(int!null) a:10(int) b:11(int) c:12(int) rowid:13(int)
           │    │    ├── side-effects
           │    │    ├── key: (13)
           │    │    ├── fd: ()-->(5,6,8,9,14), (13)-->(10-12), (10)-->(11-13), (11,12)~~>(10,13), (12)-->(15)
           │    │    ├── prune: (5,6,8-15)
           │    │    ├── reject-nulls: (10-13)
           │    │    ├── interesting orderings: (+13) (+10) (+11,+12,+13)
           │    │    ├── left-join (hash)
           │    │    │    ├── columns: x:5(int!null) y:6(int!null) column8:8(int) column9:9(int!null) a:10(int) b:11(int) c:12(int) rowid:13(int)
           │    │    │    ├── side-effects
           │    │    │    ├── key: (13)
           │    │    │    ├── fd: ()-->(5,6,8,9), (13)-->(10-12), (10)-->(11-13), (11,12)~~>(10,13)
           │    │    │    ├── prune: (10,13)
           │    │    │    ├── reject-nulls: (10-13)
           │    │    │    ├── interesting orderings: (+13) (+10) (+11,+12,+13)
           │    │    │    ├── upsert-distinct-on
           │    │    │    │    ├── columns: x:5(int!null) y:6(int!null) column8:8(int) column9:9(int!null)
           │    │    │    │    ├── grouping columns: y:6(int!null) column9:9(int!null)
           │    │    │    │    ├── error-on-dup
           │    │    │    │    ├── cardinality: [0 - 1]
           │    │    │    │    ├── side-effects
           │    │    │    │    ├── key: ()
           │    │    │    │    ├── fd: ()-->(5,6,8,9)
           │    │    │    │    ├── project
           │    │    │    │    │    ├── columns: column9:9(int!null) x:5(int!null) y:6(int!null) column8:8(int)
           │    │    │    │    │    ├── side-effects
           │    │    │    │    │    ├── key: (5)
           │    │    │    │    │    ├── fd: ()-->(6,9), (5)-->(8)
           │    │    │    │    │    ├── prune: (5,6,8,9)
           │    │    │    │    │    ├── interesting orderings: (+5) (+6)
           │    │    │    │    │    ├── project
           │    │    │    │    │    │    ├── columns: column8:8(int) x:5(int!null) y:6(int!null)
           │    │    │    │    │    │    ├── side-effects
           │    │    │    │    │    │    ├── key: (5)
           │    │    │    │    │    │    ├── fd: ()-->(6), (5)-->(8)
           │    │    │    │    │    │    ├── prune: (5,6,8)
           │    │    │    │    │    │    ├── interesting orderings: (+5) (+6)
           │    │    │    │    │    │    ├── project
           │    │    │    │    │    │    │    ├── columns: x:5(int!null) y:6(int!null)
           │    │    │    │    │    │    │    ├── key: (5)
           │    │    │    │    │    │    │    ├── fd: ()-->(6)
           │    │    │    │    │    │    │    ├── prune: (5,6)
           │    │    │    │    │    │    │    ├── interesting orderings: (+5) (+6)
           │    │    │    │    │    │    │    └── select
           │    │    │    │    │    │    │         ├── columns: x:5(int!null) y:6(int!null) z:7(int)
           │    │    │    │    │    │    │         ├── key: (5)
           │    │    │    │    │    │    │         ├── fd: ()-->(6), (5)-->(7), (6,7)~~>(5)
           │    │    │    │    │    │    │         ├── prune: (5,7)
           │    │    │    │    │    │    │         ├── interesting orderings: (+5) (+6,+7,+5) (+7,+6,+5)
           │    │    │    │    │    │    │         ├── scan xyz
           │    │    │    │    │    │    │         │    ├── columns: x:5(int!null) y:6(int) z:7(int)
           │    │    │    │    │    │    │         │    ├── key: (5)
           │    │    │    │    │    │    │         │    ├── fd: (5)-->(6,7), (6,7)~~>(5)
           │    │    │    │    │    │    │         │    ├── prune: (5-7)
           │    │    │    │    │    │    │         │    └── interesting orderings: (+5) (+6,+7,+5) (+7,+6,+5)
           │    │    │    │    │    │    │         └── filters
           │    │    │    │    │    │    │              └── eq [type=bool, outer=(6), constraints=(/6: [/1 - /1]; tight), fd=()-->(6)]
           │    │    │    │    │    │    │                   ├── variable: y:6 [type=int]
           │    │    │    │    │    │    │                   └── const: 1 [type=int]
           │    │    │    │    │    │    └── projections
           │    │    │    │    │    │         └── function: unique_rowid [as=column8:8, type=int, side-effects]
           │    │    │    │    │    └── projections
           │    │    │    │    │         └── plus [as=column9:9, type=int, outer=(6)]
           │    │    │    │    │              ├── variable: y:6 [type=int]
           │    │    │    │    │              └── const: 1 [type=int]
           │    │    │    │    └── aggregations
           │    │    │    │         ├── first-agg [as=x:5, type=int, outer=(5)]
           │    │    │    │         │    └── variable: x:5 [type=int]
           │    │    │    │         └── first-agg [as=column8:8, type=int, outer=(8)]
           │    │    │    │              └── variable: column8:8 [type=int]
           │    │    │    ├── scan abc
           │    │    │    │    ├── columns: a:10(int!null) b:11(int) c:12(int) rowid:13(int!null)
           │    │    │    │    ├── computed column expressions
           │    │    │    │    │    └── c:12
           │    │    │    │    │         └── plus [type=int]
           │    │    │    │    │              ├── variable: b:11 [type=int]
           │    │    │    │    │              └── const: 1 [type=int]
           │    │    │    │    ├── key: (13)
           │    │    │    │    ├── fd: (13)-->(10-12), (10)-->(11-13), (11,12)~~>(10,13)
           │    │    │    │    ├── prune: (10-13)
           │    │    │    │    └── interesting orderings: (+13) (+10) (+11,+12,+13)
           │    │    │    └── filters
           │    │    │         ├── eq [type=bool, outer=(6,11), constraints=(/6: (/NULL - ]; /11: (/NULL - ]), fd=(6)==(11), (11)==(6)]
           │    │    │         │    ├── variable: y:6 [type=int]
           │    │    │         │    └── variable: b:11 [type=int]
           │    │    │         └── eq [type=bool, outer=(9,12), constraints=(/9: (/NULL - ]; /12: (/NULL - ]), fd=(9)==(12), (12)==(9)]
           │    │    │              ├── variable: column9:9 [type=int]
           │    │    │              └── variable: c:12 [type=int]
           │    │    └── projections
           │    │         ├── const: 1 [as=column14:14, type=int]
           │    │         └── plus [as=column15:15, type=int, outer=(6,12)]
           │    │              ├── variable: y:6 [type=int]
           │    │              └── variable: c:12 [type=int]
           │    └── projections
           │         └── plus [as=column16:16, type=int, outer=(15)]
           │              ├── variable: column15:15 [type=int]
           │              └── const: 1 [type=int]
           └── projections
                ├── case [as=upsert_a:17, type=int, outer=(5,13,14)]
                │    ├── true [type=bool]
                │    ├── when [type=int]
                │    │    ├── is [type=bool]
                │    │    │    ├── variable: rowid:13 [type=int]
                │    │    │    └── null [type=unknown]
                │    │    └── variable: x:5 [type=int]
                │    └── variable: column14:14 [type=int]
                ├── case [as=upsert_b:18, type=int, outer=(6,13,15)]
                │    ├── true [type=bool]
                │    ├── when [type=int]
                │    │    ├── is [type=bool]
                │    │    │    ├── variable: rowid:13 [type=int]
                │    │    │    └── null [type=unknown]
                │    │    └── variable: y:6 [type=int]
                │    └── variable: column15:15 [type=int]
                ├── case [as=upsert_c:19, type=int, outer=(9,13,16)]
                │    ├── true [type=bool]
                │    ├── when [type=int]
                │    │    ├── is [type=bool]
                │    │    │    ├── variable: rowid:13 [type=int]
                │    │    │    └── null [type=unknown]
                │    │    └── variable: column9:9 [type=int]
                │    └── variable: column16:16 [type=int]
                └── case [as=upsert_rowid:20, type=int, outer=(8,13)]
                     ├── true [type=bool]
                     ├── when [type=int]
                     │    ├── is [type=bool]
                     │    │    ├── variable: rowid:13 [type=int]
                     │    │    └── null [type=unknown]
                     │    └── variable: column8:8 [type=int]
                     └── variable: rowid:13 [type=int]

# DO NOTHING case.
build
INSERT INTO abc (a, b)
SELECT x, y FROM xyz
ON CONFLICT DO NOTHING
RETURNING *
----
project
 ├── columns: a:1(int!null) b:2(int) c:3(int)
 ├── side-effects, mutations
 ├── key: (1)
 ├── fd: (1)-->(2,3), (2)-->(3), (2,3)~~>(1)
 ├── prune: (1-3)
 └── insert abc
      ├── columns: a:1(int!null) b:2(int) c:3(int) rowid:4(int!null)
      ├── insert-mapping:
      │    ├── x:5 => a:1
      │    ├── y:6 => b:2
      │    ├── column9:9 => c:3
      │    └── column8:8 => rowid:4
      ├── side-effects, mutations
      ├── key: (1)
      ├── fd: (1)-->(2-4), (2)-->(3), (4)~~>(1-3), (2,3)~~>(1,4)
      └── upsert-distinct-on
           ├── columns: x:5(int!null) y:6(int) column8:8(int) column9:9(int)
           ├── grouping columns: y:6(int) column9:9(int)
           ├── side-effects
           ├── key: (5)
           ├── fd: (5)-->(6,8,9), (6)-->(9), (8)~~>(5,6,9), (6,9)~~>(5,8)
           ├── project
           │    ├── columns: x:5(int!null) y:6(int) column8:8(int) column9:9(int)
           │    ├── side-effects
           │    ├── key: (5)
           │    ├── fd: (5)-->(6,8,9), (6)-->(9), (8)~~>(5,6,9)
           │    ├── prune: (5,6,8,9)
           │    └── select
           │         ├── columns: x:5(int!null) y:6(int) column8:8(int) column9:9(int) a:18(int) b:19(int) c:20(int) rowid:21(int)
           │         ├── side-effects
           │         ├── key: (5)
           │         ├── fd: ()-->(18-21), (5)-->(6,8,9), (6)-->(9), (8)~~>(5,6,9)
           │         ├── prune: (18)
           │         ├── interesting orderings: (+21) (+18) (+19,+20,+21)
           │         ├── left-join (hash)
           │         │    ├── columns: x:5(int!null) y:6(int) column8:8(int) column9:9(int) a:18(int) b:19(int) c:20(int) rowid:21(int)
           │         │    ├── side-effects
           │         │    ├── key: (5,21)
           │         │    ├── fd: (5)-->(6,8,9), (6)-->(9), (8)~~>(5,6,9), (21)-->(18-20), (18)-->(19-21), (19,20)~~>(18,21)
           │         │    ├── prune: (18,21)
           │         │    ├── reject-nulls: (18-21)
           │         │    ├── interesting orderings: (+21) (+18) (+19,+20,+21)
           │         │    ├── upsert-distinct-on
           │         │    │    ├── columns: x:5(int!null) y:6(int) column8:8(int) column9:9(int)
           │         │    │    ├── grouping columns: x:5(int!null)
           │         │    │    ├── side-effects
           │         │    │    ├── key: (5)
           │         │    │    ├── fd: (5)-->(6,8,9), (6)-->(9), (8)~~>(5,6,9)
           │         │    │    ├── project
           │         │    │    │    ├── columns: x:5(int!null) y:6(int) column8:8(int) column9:9(int)
           │         │    │    │    ├── side-effects
           │         │    │    │    ├── key: (5)
           │         │    │    │    ├── fd: (5)-->(6,8), (6)-->(9), (8)~~>(5,6,9)
           │         │    │    │    ├── prune: (5,6,8,9)
           │         │    │    │    └── select
           │         │    │    │         ├── columns: x:5(int!null) y:6(int) column8:8(int) column9:9(int) a:14(int) b:15(int) c:16(int) rowid:17(int)
           │         │    │    │         ├── side-effects
           │         │    │    │         ├── key: (5)
           │         │    │    │         ├── fd: ()-->(14-17), (5)-->(6,8), (6)-->(9), (8)~~>(5,6,9)
           │         │    │    │         ├── prune: (15-17)
           │         │    │    │         ├── interesting orderings: (+17) (+14) (+15,+16,+17)
           │         │    │    │         ├── left-join (hash)
           │         │    │    │         │    ├── columns: x:5(int!null) y:6(int) column8:8(int) column9:9(int) a:14(int) b:15(int) c:16(int) rowid:17(int)
           │         │    │    │         │    ├── side-effects
           │         │    │    │         │    ├── key: (5,17)
           │         │    │    │         │    ├── fd: (5)-->(6,8), (6)-->(9), (8)~~>(5,6,9), (17)-->(14-16), (14)-->(15-17), (15,16)~~>(14,17)
           │         │    │    │         │    ├── prune: (15-17)
           │         │    │    │         │    ├── reject-nulls: (14-17)
           │         │    │    │         │    ├── interesting orderings: (+17) (+14) (+15,+16,+17)
           │         │    │    │         │    ├── upsert-distinct-on
           │         │    │    │         │    │    ├── columns: x:5(int!null) y:6(int) column8:8(int) column9:9(int)
           │         │    │    │         │    │    ├── grouping columns: column8:8(int)
           │         │    │    │         │    │    ├── side-effects
           │         │    │    │         │    │    ├── key: (5)
           │         │    │    │         │    │    ├── fd: (5)-->(6,8), (6)-->(9), (8)~~>(5,6,9)
           │         │    │    │         │    │    ├── project
           │         │    │    │         │    │    │    ├── columns: x:5(int!null) y:6(int) column8:8(int) column9:9(int)
           │         │    │    │         │    │    │    ├── side-effects
           │         │    │    │         │    │    │    ├── key: (5)
           │         │    │    │         │    │    │    ├── fd: (5)-->(6,8), (6)-->(9)
           │         │    │    │         │    │    │    ├── prune: (5,6,8,9)
           │         │    │    │         │    │    │    ├── interesting orderings: (+5) (+6)
           │         │    │    │         │    │    │    └── select
           │         │    │    │         │    │    │         ├── columns: x:5(int!null) y:6(int) column8:8(int) column9:9(int) a:10(int) b:11(int) c:12(int) rowid:13(int)
           │         │    │    │         │    │    │         ├── side-effects
           │         │    │    │         │    │    │         ├── key: (5)
           │         │    │    │         │    │    │         ├── fd: ()-->(10-13), (5)-->(6,8), (6)-->(9)
           │         │    │    │         │    │    │         ├── prune: (5,6,9-12)
           │         │    │    │         │    │    │         ├── interesting orderings: (+5) (+6) (+13) (+10) (+11,+12,+13)
           │         │    │    │         │    │    │         ├── left-join (hash)
           │         │    │    │         │    │    │         │    ├── columns: x:5(int!null) y:6(int) column8:8(int) column9:9(int) a:10(int) b:11(int) c:12(int) rowid:13(int)
           │         │    │    │         │    │    │         │    ├── side-effects
           │         │    │    │         │    │    │         │    ├── key: (5,13)
           │         │    │    │         │    │    │         │    ├── fd: (5)-->(6,8), (6)-->(9), (13)-->(10-12), (10)-->(11-13), (11,12)~~>(10,13)
           │         │    │    │         │    │    │         │    ├── prune: (5,6,9-12)
           │         │    │    │         │    │    │         │    ├── reject-nulls: (10-13)
           │         │    │    │         │    │    │         │    ├── interesting orderings: (+5) (+6) (+13) (+10) (+11,+12,+13)
           │         │    │    │         │    │    │         │    ├── project
           │         │    │    │         │    │    │         │    │    ├── columns: column9:9(int) x:5(int!null) y:6(int) column8:8(int)
           │         │    │    │         │    │    │         │    │    ├── side-effects
           │         │    │    │         │    │    │         │    │    ├── key: (5)
           │         │    │    │         │    │    │         │    │    ├── fd: (5)-->(6,8), (6)-->(9)
           │         │    │    │         │    │    │         │    │    ├── prune: (5,6,8,9)
           │         │    │    │         │    │    │         │    │    ├── interesting orderings: (+5) (+6)
           │         │    │    │         │    │    │         │    │    ├── project
           │         │    │    │         │    │    │         │    │    │    ├── columns: column8:8(int) x:5(int!null) y:6(int)
           │         │    │    │         │    │    │         │    │    │    ├── side-effects
           │         │    │    │         │    │    │         │    │    │    ├── key: (5)
           │         │    │    │         │    │    │         │    │    │    ├── fd: (5)-->(6,8)
           │         │    │    │         │    │    │         │    │    │    ├── prune: (5,6,8)
           │         │    │    │         │    │    │         │    │    │    ├── interesting orderings: (+5) (+6)
           │         │    │    │         │    │    │         │    │    │    ├── project
           │         │    │    │         │    │    │         │    │    │    │    ├── columns: x:5(int!null) y:6(int)
           │         │    │    │         │    │    │         │    │    │    │    ├── key: (5)
           │         │    │    │         │    │    │         │    │    │    │    ├── fd: (5)-->(6)
           │         │    │    │         │    │    │         │    │    │    │    ├── prune: (5,6)
           │         │    │    │         │    │    │         │    │    │    │    ├── interesting orderings: (+5) (+6)
           │         │    │    │         │    │    │         │    │    │    │    └── scan xyz
           │         │    │    │         │    │    │         │    │    │    │         ├── columns: x:5(int!null) y:6(int) z:7(int)
           │         │    │    │         │    │    │         │    │    │    │         ├── key: (5)
           │         │    │    │         │    │    │         │    │    │    │         ├── fd: (5)-->(6,7), (6,7)~~>(5)
           │         │    │    │         │    │    │         │    │    │    │         ├── prune: (5-7)
           │         │    │    │         │    │    │         │    │    │    │         └── interesting orderings: (+5) (+6,+7,+5) (+7,+6,+5)
           │         │    │    │         │    │    │         │    │    │    └── projections
           │         │    │    │         │    │    │         │    │    │         └── function: unique_rowid [as=column8:8, type=int, side-effects]
           │         │    │    │         │    │    │         │    │    └── projections
           │         │    │    │         │    │    │         │    │         └── plus [as=column9:9, type=int, outer=(6)]
           │         │    │    │         │    │    │         │    │              ├── variable: y:6 [type=int]
           │         │    │    │         │    │    │         │    │              └── const: 1 [type=int]
           │         │    │    │         │    │    │         │    ├── scan abc
           │         │    │    │         │    │    │         │    │    ├── columns: a:10(int!null) b:11(int) c:12(int) rowid:13(int!null)
           │         │    │    │         │    │    │         │    │    ├── computed column expressions
           │         │    │    │         │    │    │         │    │    │    └── c:12
           │         │    │    │         │    │    │         │    │    │         └── plus [type=int]
           │         │    │    │         │    │    │         │    │    │              ├── variable: b:11 [type=int]
           │         │    │    │         │    │    │         │    │    │              └── const: 1 [type=int]
           │         │    │    │         │    │    │         │    │    ├── key: (13)
           │         │    │    │         │    │    │         │    │    ├── fd: (13)-->(10-12), (10)-->(11-13), (11,12)~~>(10,13)
           │         │    │    │         │    │    │         │    │    ├── prune: (10-13)
           │         │    │    │         │    │    │         │    │    └── interesting orderings: (+13) (+10) (+11,+12,+13)
           │         │    │    │         │    │    │         │    └── filters
           │         │    │    │         │    │    │         │         └── eq [type=bool, outer=(8,13), constraints=(/8: (/NULL - ]; /13: (/NULL - ]), fd=(8)==(13), (13)==(8)]
           │         │    │    │         │    │    │         │              ├── variable: column8:8 [type=int]
           │         │    │    │         │    │    │         │              └── variable: rowid:13 [type=int]
           │         │    │    │         │    │    │         └── filters
           │         │    │    │         │    │    │              └── is [type=bool, outer=(13), constraints=(/13: [/NULL - /NULL]; tight), fd=()-->(13)]
           │         │    │    │         │    │    │                   ├── variable: rowid:13 [type=int]
           │         │    │    │         │    │    │                   └── null [type=unknown]
           │         │    │    │         │    │    └── aggregations
           │         │    │    │         │    │         ├── first-agg [as=x:5, type=int, outer=(5)]
           │         │    │    │         │    │         │    └── variable: x:5 [type=int]
           │         │    │    │         │    │         ├── first-agg [as=y:6, type=int, outer=(6)]
           │         │    │    │         │    │         │    └── variable: y:6 [type=int]
           │         │    │    │         │    │         └── first-agg [as=column9:9, type=int, outer=(9)]
           │         │    │    │         │    │              └── variable: column9:9 [type=int]
           │         │    │    │         │    ├── scan abc
           │         │    │    │         │    │    ├── columns: a:14(int!null) b:15(int) c:16(int) rowid:17(int!null)
           │         │    │    │         │    │    ├── computed column expressions
           │         │    │    │         │    │    │    └── c:16
           │         │    │    │         │    │    │         └── plus [type=int]
           │         │    │    │         │    │    │              ├── variable: b:15 [type=int]
           │         │    │    │         │    │    │              └── const: 1 [type=int]
           │         │    │    │         │    │    ├── key: (17)
           │         │    │    │         │    │    ├── fd: (17)-->(14-16), (14)-->(15-17), (15,16)~~>(14,17)
           │         │    │    │         │    │    ├── prune: (14-17)
           │         │    │    │         │    │    └── interesting orderings: (+17) (+14) (+15,+16,+17)
           │         │    │    │         │    └── filters
           │         │    │    │         │         └── eq [type=bool, outer=(5,14), constraints=(/5: (/NULL - ]; /14: (/NULL - ]), fd=(5)==(14), (14)==(5)]
           │         │    │    │         │              ├── variable: x:5 [type=int]
           │         │    │    │         │              └── variable: a:14 [type=int]
           │         │    │    │         └── filters
           │         │    │    │              └── is [type=bool, outer=(14), constraints=(/14: [/NULL - /NULL]; tight), fd=()-->(14)]
           │         │    │    │                   ├── variable: a:14 [type=int]
           │         │    │    │                   └── null [type=unknown]
           │         │    │    └── aggregations
           │         │    │         ├── first-agg [as=y:6, type=int, outer=(6)]
           │         │    │         │    └── variable: y:6 [type=int]
           │         │    │         ├── first-agg [as=column8:8, type=int, outer=(8)]
           │         │    │         │    └── variable: column8:8 [type=int]
           │         │    │         └── first-agg [as=column9:9, type=int, outer=(9)]
           │         │    │              └── variable: column9:9 [type=int]
           │         │    ├── scan abc
           │         │    │    ├── columns: a:18(int!null) b:19(int) c:20(int) rowid:21(int!null)
           │         │    │    ├── computed column expressions
           │         │    │    │    └── c:20
           │         │    │    │         └── plus [type=int]
           │         │    │    │              ├── variable: b:19 [type=int]
           │         │    │    │              └── const: 1 [type=int]
           │         │    │    ├── key: (21)
           │         │    │    ├── fd: (21)-->(18-20), (18)-->(19-21), (19,20)~~>(18,21)
           │         │    │    ├── prune: (18-21)
           │         │    │    └── interesting orderings: (+21) (+18) (+19,+20,+21)
           │         │    └── filters
           │         │         ├── eq [type=bool, outer=(6,19), constraints=(/6: (/NULL - ]; /19: (/NULL - ]), fd=(6)==(19), (19)==(6)]
           │         │         │    ├── variable: y:6 [type=int]
           │         │         │    └── variable: b:19 [type=int]
           │         │         └── eq [type=bool, outer=(9,20), constraints=(/9: (/NULL - ]; /20: (/NULL - ]), fd=(9)==(20), (20)==(9)]
           │         │              ├── variable: column9:9 [type=int]
           │         │              └── variable: c:20 [type=int]
           │         └── filters
           │              └── is [type=bool, outer=(21), constraints=(/21: [/NULL - /NULL]; tight), fd=()-->(21)]
           │                   ├── variable: rowid:21 [type=int]
           │                   └── null [type=unknown]
           └── aggregations
                ├── first-agg [as=x:5, type=int, outer=(5)]
                │    └── variable: x:5 [type=int]
                └── first-agg [as=column8:8, type=int, outer=(8)]
                     └── variable: column8:8 [type=int]

# UPSERT case.
build
UPSERT INTO abc (a) VALUES (1), (2) RETURNING b+c
----
project
 ├── columns: "?column?":17(int)
 ├── cardinality: [1 - ]
 ├── side-effects, mutations
 ├── prune: (17)
 ├── upsert abc
 │    ├── columns: a:1(int!null) b:2(int) c:3(int) rowid:4(int!null)
 │    ├── canary column: 12
 │    ├── fetch columns: a:9(int) b:10(int) c:11(int) rowid:12(int)
 │    ├── insert-mapping:
 │    │    ├── column1:5 => a:1
 │    │    ├── column6:6 => b:2
 │    │    ├── column8:8 => c:3
 │    │    └── column7:7 => rowid:4
 │    ├── update-mapping:
 │    │    ├── column1:5 => a:1
 │    │    └── upsert_c:15 => c:3
 │    ├── return-mapping:
 │    │    ├── column1:5 => a:1
 │    │    ├── upsert_b:14 => b:2
 │    │    ├── upsert_c:15 => c:3
 │    │    └── upsert_rowid:16 => rowid:4
 │    ├── cardinality: [1 - ]
 │    ├── side-effects, mutations
 │    └── project
 │         ├── columns: upsert_b:14(int) upsert_c:15(int) upsert_rowid:16(int) column1:5(int!null) column6:6(int!null) column7:7(int) column8:8(int!null) a:9(int) b:10(int) c:11(int) rowid:12(int) column13:13(int)
 │         ├── cardinality: [1 - ]
 │         ├── side-effects
 │         ├── lax-key: (7,12)
 │         ├── fd: ()-->(6,8), (7)~~>(5), (12)-->(9-11), (9)-->(10-12), (10,11)~~>(9,12), (10)-->(13), (10,12)-->(14), (12,13)-->(15), (7,12)-->(16)
 │         ├── prune: (5-16)
 │         ├── reject-nulls: (9-12)
 │         ├── interesting orderings: (+12) (+9) (+10,+11,+12)
 │         ├── project
 │         │    ├── columns: column13:13(int) column1:5(int!null) column6:6(int!null) column7:7(int) column8:8(int!null) a:9(int) b:10(int) c:11(int) rowid:12(int)
 │         │    ├── cardinality: [1 - ]
 │         │    ├── side-effects
 │         │    ├── lax-key: (7,12)
 │         │    ├── fd: ()-->(6,8), (7)~~>(5), (12)-->(9-11), (9)-->(10-12), (10,11)~~>(9,12), (10)-->(13)
 │         │    ├── prune: (5-13)
 │         │    ├── reject-nulls: (9-12)
 │         │    ├── interesting orderings: (+12) (+9) (+10,+11,+12)
 │         │    ├── left-join (hash)
 │         │    │    ├── columns: column1:5(int!null) column6:6(int!null) column7:7(int) column8:8(int!null) a:9(int) b:10(int) c:11(int) rowid:12(int)
 │         │    │    ├── cardinality: [1 - ]
 │         │    │    ├── side-effects
 │         │    │    ├── lax-key: (7,12)
 │         │    │    ├── fd: ()-->(6,8), (7)~~>(5), (12)-->(9-11), (9)-->(10-12), (10,11)~~>(9,12)
 │         │    │    ├── prune: (9-11)
 │         │    │    ├── reject-nulls: (9-12)
 │         │    │    ├── interesting orderings: (+12) (+9) (+10,+11,+12)
 │         │    │    ├── upsert-distinct-on
 │         │    │    │    ├── columns: column1:5(int!null) column6:6(int!null) column7:7(int) column8:8(int!null)
 │         │    │    │    ├── grouping columns: column7:7(int)
 │         │    │    │    ├── error-on-dup
 │         │    │    │    ├── cardinality: [1 - 2]
 │         │    │    │    ├── side-effects
 │         │    │    │    ├── lax-key: (7)
 │         │    │    │    ├── fd: ()-->(6,8), (7)~~>(5,6,8)
 │         │    │    │    ├── project
 │         │    │    │    │    ├── columns: column8:8(int!null) column1:5(int!null) column6:6(int!null) column7:7(int)
 │         │    │    │    │    ├── cardinality: [2 - 2]
 │         │    │    │    │    ├── side-effects
 │         │    │    │    │    ├── fd: ()-->(6,8)
 │         │    │    │    │    ├── prune: (5-8)
 │         │    │    │    │    ├── project
 │         │    │    │    │    │    ├── columns: column6:6(int!null) column7:7(int) column1:5(int!null)
 │         │    │    │    │    │    ├── cardinality: [2 - 2]
 │         │    │    │    │    │    ├── side-effects
 │         │    │    │    │    │    ├── fd: ()-->(6)
 │         │    │    │    │    │    ├── prune: (5-7)
 │         │    │    │    │    │    ├── values
 │         │    │    │    │    │    │    ├── columns: column1:5(int!null)
 │         │    │    │    │    │    │    ├── cardinality: [2 - 2]
 │         │    │    │    │    │    │    ├── prune: (5)
 │         │    │    │    │    │    │    ├── tuple [type=tuple{int}]
 │         │    │    │    │    │    │    │    └── const: 1 [type=int]
 │         │    │    │    │    │    │    └── tuple [type=tuple{int}]
 │         │    │    │    │    │    │         └── const: 2 [type=int]
 │         │    │    │    │    │    └── projections
 │         │    │    │    │    │         ├── const: 10 [as=column6:6, type=int]
 │         │    │    │    │    │         └── function: unique_rowid [as=column7:7, type=int, side-effects]
 │         │    │    │    │    └── projections
 │         │    │    │    │         └── plus [as=column8:8, type=int, outer=(6)]
 │         │    │    │    │              ├── variable: column6:6 [type=int]
 │         │    │    │    │              └── const: 1 [type=int]
 │         │    │    │    └── aggregations
 │         │    │    │         ├── first-agg [as=column1:5, type=int, outer=(5)]
 │         │    │    │         │    └── variable: column1:5 [type=int]
 │         │    │    │         ├── first-agg [as=column6:6, type=int, outer=(6)]
 │         │    │    │         │    └── variable: column6:6 [type=int]
 │         │    │    │         └── first-agg [as=column8:8, type=int, outer=(8)]
 │         │    │    │              └── variable: column8:8 [type=int]
 │         │    │    ├── scan abc
 │         │    │    │    ├── columns: a:9(int!null) b:10(int) c:11(int) rowid:12(int!null)
 │         │    │    │    ├── computed column expressions
 │         │    │    │    │    └── c:11
 │         │    │    │    │         └── plus [type=int]
 │         │    │    │    │              ├── variable: b:10 [type=int]
 │         │    │    │    │              └── const: 1 [type=int]
 │         │    │    │    ├── key: (12)
 │         │    │    │    ├── fd: (12)-->(9-11), (9)-->(10-12), (10,11)~~>(9,12)
 │         │    │    │    ├── prune: (9-12)
 │         │    │    │    └── interesting orderings: (+12) (+9) (+10,+11,+12)
 │         │    │    └── filters
 │         │    │         └── eq [type=bool, outer=(7,12), constraints=(/7: (/NULL - ]; /12: (/NULL - ]), fd=(7)==(12), (12)==(7)]
 │         │    │              ├── variable: column7:7 [type=int]
 │         │    │              └── variable: rowid:12 [type=int]
 │         │    └── projections
 │         │         └── plus [as=column13:13, type=int, outer=(10)]
 │         │              ├── variable: b:10 [type=int]
 │         │              └── const: 1 [type=int]
 │         └── projections
 │              ├── case [as=upsert_b:14, type=int, outer=(6,10,12)]
 │              │    ├── true [type=bool]
 │              │    ├── when [type=int]
 │              │    │    ├── is [type=bool]
 │              │    │    │    ├── variable: rowid:12 [type=int]
 │              │    │    │    └── null [type=unknown]
 │              │    │    └── variable: column6:6 [type=int]
 │              │    └── variable: b:10 [type=int]
 │              ├── case [as=upsert_c:15, type=int, outer=(8,12,13)]
 │              │    ├── true [type=bool]
 │              │    ├── when [type=int]
 │              │    │    ├── is [type=bool]
 │              │    │    │    ├── variable: rowid:12 [type=int]
 │              │    │    │    └── null [type=unknown]
 │              │    │    └── variable: column8:8 [type=int]
 │              │    └── variable: column13:13 [type=int]
 │              └── case [as=upsert_rowid:16, type=int, outer=(7,12)]
 │                   ├── true [type=bool]
 │                   ├── when [type=int]
 │                   │    ├── is [type=bool]
 │                   │    │    ├── variable: rowid:12 [type=int]
 │                   │    │    └── null [type=unknown]
 │                   │    └── variable: column7:7 [type=int]
 │                   └── variable: rowid:12 [type=int]
 └── projections
      └── plus [as="?column?":17, type=int, outer=(2,3)]
           ├── variable: b:2 [type=int]
           └── variable: c:3 [type=int]

# upsert-distinct-on should create strict key in case where all grouping columns
# are not NULL.
build
INSERT INTO abc (a)
SELECT y FROM xyz WHERE y IS NOT NULL
ON CONFLICT (a) DO
UPDATE SET b=2
----
upsert abc
 ├── columns: <none>
 ├── canary column: 14
 ├── fetch columns: a:11(int) b:12(int) c:13(int) rowid:14(int)
 ├── insert-mapping:
 │    ├── y:6 => a:1
 │    ├── column8:8 => b:2
 │    ├── column10:10 => c:3
 │    └── column9:9 => rowid:4
 ├── update-mapping:
 │    ├── upsert_b:18 => b:2
 │    └── upsert_c:19 => c:3
 ├── cardinality: [0 - 0]
 ├── side-effects, mutations
 └── project
      ├── columns: upsert_a:17(int) upsert_b:18(int!null) upsert_c:19(int!null) upsert_rowid:20(int) y:6(int!null) column8:8(int!null) column9:9(int) column10:10(int!null) a:11(int) b:12(int) c:13(int) rowid:14(int) column15:15(int!null) column16:16(int!null)
      ├── side-effects
      ├── key: (6,14)
      ├── fd: ()-->(8,10,15,16), (6)-->(9), (14)-->(11-13), (11)-->(12-14), (12,13)~~>(11,14), (6,11,14)-->(17), (14)-->(18), (14)-->(19), (9,14)-->(20)
      ├── prune: (6,8-20)
      ├── reject-nulls: (11-14)
      ├── interesting orderings: (+14) (+11) (+12,+13,+14)
      ├── project
      │    ├── columns: column16:16(int!null) y:6(int!null) column8:8(int!null) column9:9(int) column10:10(int!null) a:11(int) b:12(int) c:13(int) rowid:14(int) column15:15(int!null)
      │    ├── side-effects
      │    ├── key: (6,14)
      │    ├── fd: ()-->(8,10,15,16), (6)-->(9), (14)-->(11-13), (11)-->(12-14), (12,13)~~>(11,14)
      │    ├── prune: (6,8-16)
      │    ├── reject-nulls: (11-14)
      │    ├── interesting orderings: (+14) (+11) (+12,+13,+14)
      │    ├── project
      │    │    ├── columns: column15:15(int!null) y:6(int!null) column8:8(int!null) column9:9(int) column10:10(int!null) a:11(int) b:12(int) c:13(int) rowid:14(int)
      │    │    ├── side-effects
      │    │    ├── key: (6,14)
      │    │    ├── fd: ()-->(8,10,15), (6)-->(9), (14)-->(11-13), (11)-->(12-14), (12,13)~~>(11,14)
      │    │    ├── prune: (6,8-15)
      │    │    ├── reject-nulls: (11-14)
      │    │    ├── interesting orderings: (+14) (+11) (+12,+13,+14)
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: y:6(int!null) column8:8(int!null) column9:9(int) column10:10(int!null) a:11(int) b:12(int) c:13(int) rowid:14(int)
      │    │    │    ├── side-effects
      │    │    │    ├── key: (6,14)
      │    │    │    ├── fd: ()-->(8,10), (6)-->(9), (14)-->(11-13), (11)-->(12-14), (12,13)~~>(11,14)
      │    │    │    ├── prune: (12-14)
      │    │    │    ├── reject-nulls: (11-14)
      │    │    │    ├── interesting orderings: (+14) (+11) (+12,+13,+14)
      │    │    │    ├── upsert-distinct-on
      │    │    │    │    ├── columns: y:6(int!null) column8:8(int!null) column9:9(int) column10:10(int!null)
      │    │    │    │    ├── grouping columns: y:6(int!null)
      │    │    │    │    ├── error-on-dup
      │    │    │    │    ├── side-effects
      │    │    │    │    ├── key: (6)
      │    │    │    │    ├── fd: ()-->(8,10), (6)-->(8-10)
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: column10:10(int!null) y:6(int!null) column8:8(int!null) column9:9(int)
      │    │    │    │    │    ├── side-effects
      │    │    │    │    │    ├── fd: ()-->(8,10)
      │    │    │    │    │    ├── prune: (6,8-10)
      │    │    │    │    │    ├── interesting orderings: (+6)
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: column8:8(int!null) column9:9(int) y:6(int!null)
      │    │    │    │    │    │    ├── side-effects
      │    │    │    │    │    │    ├── fd: ()-->(8)
      │    │    │    │    │    │    ├── prune: (6,8,9)
      │    │    │    │    │    │    ├── interesting orderings: (+6)
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: y:6(int!null)
      │    │    │    │    │    │    │    ├── prune: (6)
      │    │    │    │    │    │    │    ├── interesting orderings: (+6)
      │    │    │    │    │    │    │    └── select
      │    │    │    │    │    │    │         ├── columns: x:5(int!null) y:6(int!null) z:7(int)
      │    │    │    │    │    │    │         ├── key: (5)
      │    │    │    │    │    │    │         ├── fd: (5)-->(6,7), (6,7)~~>(5)
      │    │    │    │    │    │    │         ├── prune: (5,7)
      │    │    │    │    │    │    │         ├── interesting orderings: (+5) (+6,+7,+5) (+7,+6,+5)
      │    │    │    │    │    │    │         ├── scan xyz
      │    │    │    │    │    │    │         │    ├── columns: x:5(int!null) y:6(int) z:7(int)
      │    │    │    │    │    │    │         │    ├── key: (5)
      │    │    │    │    │    │    │         │    ├── fd: (5)-->(6,7), (6,7)~~>(5)
      │    │    │    │    │    │    │         │    ├── prune: (5-7)
      │    │    │    │    │    │    │         │    └── interesting orderings: (+5) (+6,+7,+5) (+7,+6,+5)
      │    │    │    │    │    │    │         └── filters
      │    │    │    │    │    │    │              └── is-not [type=bool, outer=(6), constraints=(/6: (/NULL - ]; tight)]
      │    │    │    │    │    │    │                   ├── variable: y:6 [type=int]
      │    │    │    │    │    │    │                   └── null [type=unknown]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         ├── const: 10 [as=column8:8, type=int]
      │    │    │    │    │    │         └── function: unique_rowid [as=column9:9, type=int, side-effects]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── plus [as=column10:10, type=int, outer=(8)]
      │    │    │    │    │              ├── variable: column8:8 [type=int]
      │    │    │    │    │              └── const: 1 [type=int]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column8:8, type=int, outer=(8)]
      │    │    │    │         │    └── variable: column8:8 [type=int]
      │    │    │    │         ├── first-agg [as=column9:9, type=int, outer=(9)]
      │    │    │    │         │    └── variable: column9:9 [type=int]
      │    │    │    │         └── first-agg [as=column10:10, type=int, outer=(10)]
      │    │    │    │              └── variable: column10:10 [type=int]
      │    │    │    ├── scan abc
      │    │    │    │    ├── columns: a:11(int!null) b:12(int) c:13(int) rowid:14(int!null)
      │    │    │    │    ├── computed column expressions
      │    │    │    │    │    └── c:13
      │    │    │    │    │         └── plus [type=int]
      │    │    │    │    │              ├── variable: b:12 [type=int]
      │    │    │    │    │              └── const: 1 [type=int]
      │    │    │    │    ├── key: (14)
      │    │    │    │    ├── fd: (14)-->(11-13), (11)-->(12-14), (12,13)~~>(11,14)
      │    │    │    │    ├── prune: (11-14)
      │    │    │    │    └── interesting orderings: (+14) (+11) (+12,+13,+14)
      │    │    │    └── filters
      │    │    │         └── eq [type=bool, outer=(6,11), constraints=(/6: (/NULL - ]; /11: (/NULL - ]), fd=(6)==(11), (11)==(6)]
      │    │    │              ├── variable: y:6 [type=int]
      │    │    │              └── variable: a:11 [type=int]
      │    │    └── projections
      │    │         └── const: 2 [as=column15:15, type=int]
      │    └── projections
      │         └── plus [as=column16:16, type=int, outer=(15)]
      │              ├── variable: column15:15 [type=int]
      │              └── const: 1 [type=int]
      └── projections
           ├── case [as=upsert_a:17, type=int, outer=(6,11,14)]
           │    ├── true [type=bool]
           │    ├── when [type=int]
           │    │    ├── is [type=bool]
           │    │    │    ├── variable: rowid:14 [type=int]
           │    │    │    └── null [type=unknown]
           │    │    └── variable: y:6 [type=int]
           │    └── variable: a:11 [type=int]
           ├── case [as=upsert_b:18, type=int, outer=(8,14,15)]
           │    ├── true [type=bool]
           │    ├── when [type=int]
           │    │    ├── is [type=bool]
           │    │    │    ├── variable: rowid:14 [type=int]
           │    │    │    └── null [type=unknown]
           │    │    └── variable: column8:8 [type=int]
           │    └── variable: column15:15 [type=int]
           ├── case [as=upsert_c:19, type=int, outer=(10,14,16)]
           │    ├── true [type=bool]
           │    ├── when [type=int]
           │    │    ├── is [type=bool]
           │    │    │    ├── variable: rowid:14 [type=int]
           │    │    │    └── null [type=unknown]
           │    │    └── variable: column10:10 [type=int]
           │    └── variable: column16:16 [type=int]
           └── case [as=upsert_rowid:20, type=int, outer=(9,14)]
                ├── true [type=bool]
                ├── when [type=int]
                │    ├── is [type=bool]
                │    │    ├── variable: rowid:14 [type=int]
                │    │    └── null [type=unknown]
                │    └── variable: column9:9 [type=int]
                └── variable: rowid:14 [type=int]
