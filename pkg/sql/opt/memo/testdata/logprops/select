exec-ddl
CREATE TABLE xy (x INT PRIMARY KEY, y INT)
----
TABLE xy
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE kuv (k INT PRIMARY KEY, u FLOAT, v STRING)
----
TABLE kuv
 ├── k int not null
 ├── u float
 ├── v string
 └── INDEX primary
      └── k int not null

build
SELECT * FROM xy WHERE x=1
----
select
 ├── columns: x:1(int!null) y:2(int)
 ├── stats: [rows=1, distinct(1)=1]
 ├── keys: (1)
 ├── scan xy
 │    ├── columns: xy.x:1(int!null) xy.y:2(int)
 │    ├── stats: [rows=1000, distinct(1)=1000]
 │    └── keys: (1)
 └── eq [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
      ├── variable: xy.x [type=int, outer=(1)]
      └── const: 1 [type=int]

build
SELECT * FROM xy,kuv WHERE xy.x=kuv.k
----
select
 ├── columns: x:1(int!null) y:2(int) k:3(int!null) u:4(float) v:5(string)
 ├── stats: [rows=333333]
 ├── inner-join
 │    ├── columns: xy.x:1(int!null) xy.y:2(int) kuv.k:3(int!null) kuv.u:4(float) kuv.v:5(string)
 │    ├── stats: [rows=1000000]
 │    ├── scan xy
 │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
 │    │    ├── stats: [rows=1000]
 │    │    └── keys: (1)
 │    ├── scan kuv
 │    │    ├── columns: kuv.k:3(int!null) kuv.u:4(float) kuv.v:5(string)
 │    │    ├── stats: [rows=1000]
 │    │    └── keys: (3)
 │    └── true [type=bool]
 └── eq [type=bool, outer=(1,3)]
      ├── variable: xy.x [type=int, outer=(1)]
      └── variable: kuv.k [type=int, outer=(3)]

# Propagate outer columns.
build
SELECT * FROM xy WHERE EXISTS(SELECT * FROM (SELECT * FROM kuv WHERE k=y) WHERE k=x)
----
select
 ├── columns: x:1(int!null) y:2(int)
 ├── stats: [rows=333]
 ├── keys: (1)
 ├── scan xy
 │    ├── columns: xy.x:1(int!null) xy.y:2(int)
 │    ├── stats: [rows=1000]
 │    └── keys: (1)
 └── exists [type=bool, outer=(1,2)]
      └── select
           ├── columns: kuv.k:3(int!null) kuv.u:4(float) kuv.v:5(string)
           ├── outer: (1,2)
           ├── stats: [rows=111]
           ├── keys: (3)
           ├── select
           │    ├── columns: kuv.k:3(int!null) kuv.u:4(float) kuv.v:5(string)
           │    ├── outer: (2)
           │    ├── stats: [rows=333]
           │    ├── keys: (3)
           │    ├── scan kuv
           │    │    ├── columns: kuv.k:3(int!null) kuv.u:4(float) kuv.v:5(string)
           │    │    ├── stats: [rows=1000]
           │    │    └── keys: (3)
           │    └── eq [type=bool, outer=(2,3)]
           │         ├── variable: kuv.k [type=int, outer=(3)]
           │         └── variable: xy.y [type=int, outer=(2)]
           └── eq [type=bool, outer=(1,3)]
                ├── variable: kuv.k [type=int, outer=(3)]
                └── variable: xy.x [type=int, outer=(1)]

# Reduce min cardinality.
build
SELECT COUNT(*) FROM xy HAVING COUNT(*) = 5
----
select
 ├── columns: column3:3(int)
 ├── cardinality: [0 - 1]
 ├── stats: [rows=1, distinct(3)=1]
 ├── keys: ()
 ├── group-by
 │    ├── columns: column3:3(int)
 │    ├── cardinality: [1 - 1]
 │    ├── stats: [rows=1, distinct(3)=1]
 │    ├── keys: ()
 │    ├── project
 │    │    ├── stats: [rows=1000]
 │    │    ├── scan xy
 │    │    │    ├── columns: xy.x:1(int!null) xy.y:2(int)
 │    │    │    ├── stats: [rows=1000]
 │    │    │    └── keys: (1)
 │    │    └── projections
 │    └── aggregations
 │         └── count-rows [type=int]
 └── eq [type=bool, outer=(3), constraints=(/3: [/5 - /5]; tight)]
      ├── variable: column3 [type=int, outer=(3)]
      └── const: 5 [type=int]

build
SELECT * FROM xy WITH ORDINALITY
----
row-number
 ├── columns: x:1(int!null) y:2(int) ordinality:3(int!null)
 ├── stats: [rows=1000]
 ├── keys: (1) (3)
 └── scan xy
      ├── columns: xy.x:1(int!null) xy.y:2(int)
      ├── stats: [rows=1000]
      └── keys: (1)
