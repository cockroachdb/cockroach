exec-ddl
CREATE TABLE xy (x INT PRIMARY KEY, y INT)
----
TABLE xy
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE kuv (k INT PRIMARY KEY, u FLOAT, v STRING)
----
TABLE kuv
 ├── k int not null
 ├── u float
 ├── v string
 └── INDEX primary
      └── k int not null

build
SELECT * FROM xy WHERE x=1
----
select
 ├── columns: x:1(int!null) y:2(int)
 ├── cardinality: [0 - 1]
 ├── stats: [rows=1, distinct(1)=1]
 ├── key: ()
 ├── fd: ()-->(1,2)
 ├── scan xy
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── stats: [rows=1000, distinct(1)=1000]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── filters [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight), fd=()-->(1)]
      └── eq [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
           ├── variable: xy.x [type=int, outer=(1)]
           └── const: 1 [type=int]

build
SELECT * FROM xy,kuv WHERE xy.x=kuv.k
----
select
 ├── columns: x:1(int!null) y:2(int) k:3(int!null) u:4(float) v:5(string)
 ├── stats: [rows=111111.111]
 ├── key: (3)
 ├── fd: (1)-->(2), (3)-->(4,5), (1)==(3), (3)==(1)
 ├── inner-join
 │    ├── columns: x:1(int!null) y:2(int) k:3(int!null) u:4(float) v:5(string)
 │    ├── stats: [rows=1000000]
 │    ├── key: (1,3)
 │    ├── fd: (1)-->(2), (3)-->(4,5)
 │    ├── scan xy
 │    │    ├── columns: x:1(int!null) y:2(int)
 │    │    ├── stats: [rows=1000]
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2)
 │    ├── scan kuv
 │    │    ├── columns: k:3(int!null) u:4(float) v:5(string)
 │    │    ├── stats: [rows=1000]
 │    │    ├── key: (3)
 │    │    └── fd: (3)-->(4,5)
 │    └── true [type=bool]
 └── filters [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
      └── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
           ├── variable: xy.x [type=int, outer=(1)]
           └── variable: kuv.k [type=int, outer=(3)]

# Propagate outer columns.
build
SELECT * FROM xy WHERE EXISTS(SELECT * FROM (SELECT * FROM kuv WHERE k=y) WHERE k=x)
----
select
 ├── columns: x:1(int!null) y:2(int)
 ├── stats: [rows=333.333333]
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── scan xy
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── stats: [rows=1000]
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── filters [type=bool, outer=(1,2)]
      └── exists [type=bool, outer=(1,2)]
           └── select
                ├── columns: k:3(int!null) u:4(float) v:5(string)
                ├── outer: (1,2)
                ├── cardinality: [0 - 1]
                ├── stats: [rows=12.345679]
                ├── key: ()
                ├── fd: ()-->(3-5)
                ├── select
                │    ├── columns: k:3(int!null) u:4(float) v:5(string)
                │    ├── outer: (2)
                │    ├── cardinality: [0 - 1]
                │    ├── stats: [rows=111.111111]
                │    ├── key: ()
                │    ├── fd: ()-->(3-5)
                │    ├── scan kuv
                │    │    ├── columns: k:3(int!null) u:4(float) v:5(string)
                │    │    ├── stats: [rows=1000]
                │    │    ├── key: (3)
                │    │    └── fd: (3)-->(4,5)
                │    └── filters [type=bool, outer=(2,3), constraints=(/2: (/NULL - ]; /3: (/NULL - ]), fd=(2)==(3), (3)==(2)]
                │         └── eq [type=bool, outer=(2,3), constraints=(/2: (/NULL - ]; /3: (/NULL - ])]
                │              ├── variable: kuv.k [type=int, outer=(3)]
                │              └── variable: xy.y [type=int, outer=(2)]
                └── filters [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
                     └── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
                          ├── variable: kuv.k [type=int, outer=(3)]
                          └── variable: xy.x [type=int, outer=(1)]

# Reduce min cardinality.
build
SELECT count(*) FROM xy HAVING count(*) = 5
----
select
 ├── columns: count:3(int!null)
 ├── cardinality: [0 - 1]
 ├── stats: [rows=1, distinct(3)=1]
 ├── key: ()
 ├── fd: ()-->(3)
 ├── scalar-group-by
 │    ├── columns: column3:3(int)
 │    ├── cardinality: [1 - 1]
 │    ├── stats: [rows=1, distinct(3)=1]
 │    ├── key: ()
 │    ├── fd: ()-->(3)
 │    ├── project
 │    │    ├── stats: [rows=1000]
 │    │    └── scan xy
 │    │         ├── columns: x:1(int!null) y:2(int)
 │    │         ├── stats: [rows=1000]
 │    │         ├── key: (1)
 │    │         └── fd: (1)-->(2)
 │    └── aggregations
 │         └── count-rows [type=int]
 └── filters [type=bool, outer=(3), constraints=(/3: [/5 - /5]; tight), fd=()-->(3)]
      └── eq [type=bool, outer=(3), constraints=(/3: [/5 - /5]; tight)]
           ├── variable: column3 [type=int, outer=(3)]
           └── const: 5 [type=int]

build
SELECT * FROM xy WITH ORDINALITY
----
row-number
 ├── columns: x:1(int!null) y:2(int) ordinality:3(int!null)
 ├── stats: [rows=1000]
 ├── key: (1)
 ├── fd: (1)-->(2,3), (3)-->(1,2)
 └── scan xy
      ├── columns: x:1(int!null) y:2(int)
      ├── stats: [rows=1000]
      ├── key: (1)
      └── fd: (1)-->(2)

# Verify not-null column deduction from constraints.
exec-ddl
CREATE TABLE abcd (a INT NOT NULL, b INT NOT NULL, c INT, d INT)
----
TABLE abcd
 ├── a int not null
 ├── b int not null
 ├── c int
 ├── d int
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

build
SELECT * FROM abcd WHERE true
----
project
 ├── columns: a:1(int!null) b:2(int!null) c:3(int) d:4(int)
 ├── stats: [rows=333.333333]
 └── select
      ├── columns: a:1(int!null) b:2(int!null) c:3(int) d:4(int) rowid:5(int!null)
      ├── stats: [rows=333.333333]
      ├── key: (5)
      ├── fd: (5)-->(1-4)
      ├── scan abcd
      │    ├── columns: a:1(int!null) b:2(int!null) c:3(int) d:4(int) rowid:5(int!null)
      │    ├── stats: [rows=1000]
      │    ├── key: (5)
      │    └── fd: (5)-->(1-4)
      └── filters [type=bool]
           └── true [type=bool]

build
SELECT * FROM abcd WHERE c IS NOT NULL
----
project
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) d:4(int)
 ├── stats: [rows=333.333333]
 └── select
      ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) d:4(int) rowid:5(int!null)
      ├── stats: [rows=333.333333]
      ├── key: (5)
      ├── fd: (5)-->(1-4)
      ├── scan abcd
      │    ├── columns: a:1(int!null) b:2(int!null) c:3(int) d:4(int) rowid:5(int!null)
      │    ├── stats: [rows=1000]
      │    ├── key: (5)
      │    └── fd: (5)-->(1-4)
      └── filters [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
           └── is-not [type=bool, outer=(3), constraints=(/3: (/NULL - ]; tight)]
                ├── variable: abcd.c [type=int, outer=(3)]
                └── null [type=unknown]

build
SELECT * FROM abcd WHERE c = d
----
project
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) d:4(int!null)
 ├── stats: [rows=111.111111]
 ├── fd: (3)==(4), (4)==(3)
 └── select
      ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) d:4(int!null) rowid:5(int!null)
      ├── stats: [rows=111.111111]
      ├── key: (5)
      ├── fd: (5)-->(1-4), (3)==(4), (4)==(3)
      ├── scan abcd
      │    ├── columns: a:1(int!null) b:2(int!null) c:3(int) d:4(int) rowid:5(int!null)
      │    ├── stats: [rows=1000]
      │    ├── key: (5)
      │    └── fd: (5)-->(1-4)
      └── filters [type=bool, outer=(3,4), constraints=(/3: (/NULL - ]; /4: (/NULL - ]), fd=(3)==(4), (4)==(3)]
           └── eq [type=bool, outer=(3,4), constraints=(/3: (/NULL - ]; /4: (/NULL - ])]
                ├── variable: abcd.c [type=int, outer=(3)]
                └── variable: abcd.d [type=int, outer=(4)]

build
SELECT * FROM abcd WHERE a > c
----
project
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) d:4(int)
 ├── stats: [rows=111.111111]
 └── select
      ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) d:4(int) rowid:5(int!null)
      ├── stats: [rows=111.111111]
      ├── key: (5)
      ├── fd: (5)-->(1-4)
      ├── scan abcd
      │    ├── columns: a:1(int!null) b:2(int!null) c:3(int) d:4(int) rowid:5(int!null)
      │    ├── stats: [rows=1000]
      │    ├── key: (5)
      │    └── fd: (5)-->(1-4)
      └── filters [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
           └── gt [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
                ├── variable: abcd.a [type=int, outer=(1)]
                └── variable: abcd.c [type=int, outer=(3)]

build
SELECT * FROM (SELECT * FROM abcd WHERE a = c) WHERE b < d
----
select
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) d:4(int!null)
 ├── stats: [rows=12.345679]
 ├── fd: (1)==(3), (3)==(1)
 ├── project
 │    ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) d:4(int)
 │    ├── stats: [rows=111.111111]
 │    ├── fd: (1)==(3), (3)==(1)
 │    └── select
 │         ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) d:4(int) rowid:5(int!null)
 │         ├── stats: [rows=111.111111]
 │         ├── key: (5)
 │         ├── fd: (5)-->(1-4), (1)==(3), (3)==(1)
 │         ├── scan abcd
 │         │    ├── columns: a:1(int!null) b:2(int!null) c:3(int) d:4(int) rowid:5(int!null)
 │         │    ├── stats: [rows=1000]
 │         │    ├── key: (5)
 │         │    └── fd: (5)-->(1-4)
 │         └── filters [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 │              └── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ])]
 │                   ├── variable: abcd.a [type=int, outer=(1)]
 │                   └── variable: abcd.c [type=int, outer=(3)]
 └── filters [type=bool, outer=(2,4), constraints=(/2: (/NULL - ]; /4: (/NULL - ])]
      └── lt [type=bool, outer=(2,4), constraints=(/2: (/NULL - ]; /4: (/NULL - ])]
           ├── variable: abcd.b [type=int, outer=(2)]
           └── variable: abcd.d [type=int, outer=(4)]

# Test outer column in select filter that is part of a not-null constraint.
build
SELECT * FROM abcd WHERE (SELECT count(*) FROM xy WHERE y = b) > 0
----
project
 ├── columns: a:1(int!null) b:2(int!null) c:3(int) d:4(int)
 ├── stats: [rows=333.333333]
 └── select
      ├── columns: a:1(int!null) b:2(int!null) c:3(int) d:4(int) rowid:5(int!null)
      ├── stats: [rows=333.333333]
      ├── key: (5)
      ├── fd: (5)-->(1-4)
      ├── scan abcd
      │    ├── columns: a:1(int!null) b:2(int!null) c:3(int) d:4(int) rowid:5(int!null)
      │    ├── stats: [rows=1000]
      │    ├── key: (5)
      │    └── fd: (5)-->(1-4)
      └── filters [type=bool, outer=(2)]
           └── gt [type=bool, outer=(2)]
                ├── subquery [type=int, outer=(2)]
                │    └── max1-row
                │         ├── columns: count:8(int)
                │         ├── outer: (2)
                │         ├── cardinality: [1 - 1]
                │         ├── stats: [rows=1]
                │         ├── key: ()
                │         ├── fd: ()-->(8)
                │         └── scalar-group-by
                │              ├── columns: count:8(int)
                │              ├── outer: (2)
                │              ├── cardinality: [1 - 1]
                │              ├── stats: [rows=1]
                │              ├── key: ()
                │              ├── fd: ()-->(8)
                │              ├── project
                │              │    ├── outer: (2)
                │              │    ├── stats: [rows=111.111111]
                │              │    └── select
                │              │         ├── columns: x:6(int!null) y:7(int!null)
                │              │         ├── outer: (2)
                │              │         ├── stats: [rows=111.111111]
                │              │         ├── key: (6)
                │              │         ├── fd: ()-->(7)
                │              │         ├── scan xy
                │              │         │    ├── columns: x:6(int!null) y:7(int)
                │              │         │    ├── stats: [rows=1000]
                │              │         │    ├── key: (6)
                │              │         │    └── fd: (6)-->(7)
                │              │         └── filters [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ]), fd=(2)==(7), (7)==(2)]
                │              │              └── eq [type=bool, outer=(2,7), constraints=(/2: (/NULL - ]; /7: (/NULL - ])]
                │              │                   ├── variable: xy.y [type=int, outer=(7)]
                │              │                   └── variable: abcd.b [type=int, outer=(2)]
                │              └── aggregations
                │                   └── count-rows [type=int]
                └── const: 0 [type=int]
