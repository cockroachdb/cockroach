exec-ddl
CREATE TABLE xysd (x INT PRIMARY KEY, y INT, s STRING, d DECIMAL NOT NULL, UNIQUE (s DESC, d))
----

exec-ddl
CREATE TABLE kuv (k INT PRIMARY KEY, u FLOAT, v STRING)
----

exec-ddl
CREATE TABLE ab (a INT, b INT, UNIQUE (a, b))
----

build
SELECT y, x+1 AS a, 1 AS b, x FROM xysd
----
project
 ├── columns: y:2(int) a:6(int!null) b:7(int!null) x:1(int!null)
 ├── immutable
 ├── key: (1)
 ├── fd: ()-->(7), (1)-->(2,6)
 ├── prune: (1,2,6,7)
 ├── interesting orderings: (+1)
 ├── scan xysd
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) crdb_internal_mvcc_timestamp:5(decimal)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
 │    ├── prune: (1-5)
 │    └── interesting orderings: (+1) (-3,+4,+1)
 └── projections
      ├── plus [as=a:6, type=int, outer=(1), immutable]
      │    ├── variable: x:1 [type=int]
      │    └── const: 1 [type=int]
      └── const: 1 [as=b:7, type=int]

build
SELECT s FROM xysd
----
project
 ├── columns: s:3(string)
 ├── prune: (3)
 ├── interesting orderings: (-3)
 └── scan xysd
      ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) crdb_internal_mvcc_timestamp:5(decimal)
      ├── key: (1)
      ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
      ├── prune: (1-5)
      └── interesting orderings: (+1) (-3,+4,+1)

# Propagate outer columns.
build
SELECT * FROM xysd WHERE (SELECT (SELECT y) FROM kuv WHERE k=x) > 5
----
project
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 ├── key: (1)
 ├── fd: (1)-->(2-4), (3,4)~~>(1,2)
 ├── prune: (1-4)
 ├── interesting orderings: (+1) (-3,+4,+1)
 └── select
      ├── columns: x:1(int!null) xysd.y:2(int) s:3(string) d:4(decimal!null) xysd.crdb_internal_mvcc_timestamp:5(decimal)
      ├── key: (1)
      ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
      ├── prune: (3-5)
      ├── interesting orderings: (+1) (-3,+4,+1)
      ├── scan xysd
      │    ├── columns: x:1(int!null) xysd.y:2(int) s:3(string) d:4(decimal!null) xysd.crdb_internal_mvcc_timestamp:5(decimal)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
      │    ├── prune: (1-5)
      │    └── interesting orderings: (+1) (-3,+4,+1)
      └── filters
           └── gt [type=bool, outer=(1,2), correlated-subquery]
                ├── subquery [type=int]
                │    └── max1-row
                │         ├── columns: y:11(int)
                │         ├── error: "more than one row returned by a subquery used as an expression"
                │         ├── outer: (1,2)
                │         ├── cardinality: [0 - 1]
                │         ├── key: ()
                │         ├── fd: ()-->(11)
                │         └── project
                │              ├── columns: y:11(int)
                │              ├── outer: (1,2)
                │              ├── cardinality: [0 - 1]
                │              ├── key: ()
                │              ├── fd: ()-->(11)
                │              ├── prune: (11)
                │              ├── select
                │              │    ├── columns: k:6(int!null) u:7(float) v:8(string) kuv.crdb_internal_mvcc_timestamp:9(decimal)
                │              │    ├── outer: (1)
                │              │    ├── cardinality: [0 - 1]
                │              │    ├── key: ()
                │              │    ├── fd: ()-->(6-9)
                │              │    ├── prune: (7-9)
                │              │    ├── interesting orderings: (+6)
                │              │    ├── scan kuv
                │              │    │    ├── columns: k:6(int!null) u:7(float) v:8(string) kuv.crdb_internal_mvcc_timestamp:9(decimal)
                │              │    │    ├── key: (6)
                │              │    │    ├── fd: (6)-->(7-9)
                │              │    │    ├── prune: (6-9)
                │              │    │    └── interesting orderings: (+6)
                │              │    └── filters
                │              │         └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ]), fd=(1)==(6), (6)==(1)]
                │              │              ├── variable: k:6 [type=int]
                │              │              └── variable: x:1 [type=int]
                │              └── projections
                │                   └── subquery [as=y:11, type=int, outer=(2), correlated-subquery]
                │                        └── max1-row
                │                             ├── columns: y:10(int)
                │                             ├── error: "more than one row returned by a subquery used as an expression"
                │                             ├── outer: (2)
                │                             ├── cardinality: [1 - 1]
                │                             ├── key: ()
                │                             ├── fd: ()-->(10)
                │                             └── project
                │                                  ├── columns: y:10(int)
                │                                  ├── outer: (2)
                │                                  ├── cardinality: [1 - 1]
                │                                  ├── key: ()
                │                                  ├── fd: ()-->(10)
                │                                  ├── prune: (10)
                │                                  ├── values
                │                                  │    ├── cardinality: [1 - 1]
                │                                  │    ├── key: ()
                │                                  │    └── tuple [type=tuple]
                │                                  └── projections
                │                                       └── variable: xysd.y:2 [as=y:10, type=int, outer=(2)]
                └── const: 5 [type=int]

# Pass through cardinality.
build
SELECT x, y FROM (SELECT * FROM xysd LIMIT 10)
----
project
 ├── columns: x:1(int!null) y:2(int)
 ├── cardinality: [0 - 10]
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── prune: (1,2)
 ├── interesting orderings: (+1)
 └── limit
      ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
      ├── cardinality: [0 - 10]
      ├── key: (1)
      ├── fd: (1)-->(2-4), (3,4)~~>(1,2)
      ├── prune: (1-4)
      ├── interesting orderings: (+1) (-3,+4,+1)
      ├── project
      │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2-4), (3,4)~~>(1,2)
      │    ├── limit hint: 10.00
      │    ├── prune: (1-4)
      │    ├── interesting orderings: (+1) (-3,+4,+1)
      │    └── scan xysd
      │         ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) crdb_internal_mvcc_timestamp:5(decimal)
      │         ├── key: (1)
      │         ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
      │         ├── limit hint: 10.00
      │         ├── prune: (1-5)
      │         └── interesting orderings: (+1) (-3,+4,+1)
      └── const: 10 [type=int]

# Constant null and not-null columns.
build
SELECT 1 AS a, 'foo' AS b, NULL AS c, 1::decimal + NULL AS d, NULL::STRING AS e FROM xysd
----
project
 ├── columns: a:6(int!null) b:7(string!null) c:8(unknown) d:8(unknown) e:9(string)
 ├── immutable
 ├── fd: ()-->(6-9)
 ├── prune: (6-9)
 ├── scan xysd
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) crdb_internal_mvcc_timestamp:5(decimal)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
 │    ├── prune: (1-5)
 │    └── interesting orderings: (+1) (-3,+4,+1)
 └── projections
      ├── const: 1 [as=a:6, type=int]
      ├── const: 'foo' [as=b:7, type=string]
      ├── null [as=c:8, type=unknown]
      └── cast: STRING [as=e:9, type=string, immutable]
           └── null [type=unknown]

# Project constant over input with no needed columns and ensure that there is
# no key on the output (because it will have duplicates).
opt
SELECT 1 FROM (SELECT x FROM xysd)
----
project
 ├── columns: "?column?":6(int!null)
 ├── fd: ()-->(6)
 ├── prune: (6)
 ├── scan xysd@secondary
 └── projections
      └── const: 1 [as="?column?":6, type=int]

# Project simple variable reference after constant folding; should be not-null
# if the column it refers to is not-null.
norm
SELECT CASE WHEN true THEN x END FROM xysd
----
project
 ├── columns: case:6(int!null)
 ├── key: (6)
 ├── prune: (6)
 ├── interesting orderings: (+6)
 ├── scan xysd
 │    ├── columns: x:1(int!null)
 │    ├── key: (1)
 │    ├── prune: (1)
 │    └── interesting orderings: (+1)
 └── projections
      └── variable: x:1 [as=case:6, type=int, outer=(1)]

# Project correlated subquery.
build
SELECT k, (SELECT y FROM xysd WHERE x=k) FROM kuv
----
project
 ├── columns: k:1(int!null) y:10(int)
 ├── key: (1)
 ├── fd: (1)-->(10)
 ├── prune: (1,10)
 ├── interesting orderings: (+1)
 ├── scan kuv
 │    ├── columns: k:1(int!null) u:2(float) v:3(string) kuv.crdb_internal_mvcc_timestamp:4(decimal)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4)
 │    ├── prune: (1-4)
 │    └── interesting orderings: (+1)
 └── projections
      └── subquery [as=y:10, type=int, outer=(1), correlated-subquery]
           └── max1-row
                ├── columns: xysd.y:6(int)
                ├── error: "more than one row returned by a subquery used as an expression"
                ├── outer: (1)
                ├── cardinality: [0 - 1]
                ├── key: ()
                ├── fd: ()-->(6)
                └── project
                     ├── columns: xysd.y:6(int)
                     ├── outer: (1)
                     ├── cardinality: [0 - 1]
                     ├── key: ()
                     ├── fd: ()-->(6)
                     ├── prune: (6)
                     └── select
                          ├── columns: x:5(int!null) xysd.y:6(int) s:7(string) d:8(decimal!null) xysd.crdb_internal_mvcc_timestamp:9(decimal)
                          ├── outer: (1)
                          ├── cardinality: [0 - 1]
                          ├── key: ()
                          ├── fd: ()-->(5-9)
                          ├── prune: (6-9)
                          ├── interesting orderings: (+5) (-7,+8,+5)
                          ├── scan xysd
                          │    ├── columns: x:5(int!null) xysd.y:6(int) s:7(string) d:8(decimal!null) xysd.crdb_internal_mvcc_timestamp:9(decimal)
                          │    ├── key: (5)
                          │    ├── fd: (5)-->(6-9), (7,8)~~>(5,6,9)
                          │    ├── prune: (5-9)
                          │    └── interesting orderings: (+5) (-7,+8,+5)
                          └── filters
                               └── eq [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ]), fd=(1)==(5), (5)==(1)]
                                    ├── variable: x:5 [type=int]
                                    └── variable: k:1 [type=int]

# Project nested correlated subquery.
build
SELECT k, EXISTS(SELECT EXISTS(SELECT y FROM xysd WHERE x=k) FROM xysd) FROM kuv
----
project
 ├── columns: k:1(int!null) exists:16(bool)
 ├── key: (1)
 ├── fd: (1)-->(16)
 ├── prune: (1,16)
 ├── interesting orderings: (+1)
 ├── scan kuv
 │    ├── columns: k:1(int!null) u:2(float) v:3(string) kuv.crdb_internal_mvcc_timestamp:4(decimal)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-4)
 │    ├── prune: (1-4)
 │    └── interesting orderings: (+1)
 └── projections
      └── exists [as=exists:16, type=bool, outer=(1), correlated-subquery]
           └── project
                ├── columns: exists:15(bool)
                ├── outer: (1)
                ├── fd: ()-->(15)
                ├── prune: (15)
                ├── scan xysd
                │    ├── columns: x:5(int!null) y:6(int) s:7(string) d:8(decimal!null) xysd.crdb_internal_mvcc_timestamp:9(decimal)
                │    ├── key: (5)
                │    ├── fd: (5)-->(6-9), (7,8)~~>(5,6,9)
                │    ├── prune: (5-9)
                │    └── interesting orderings: (+5) (-7,+8,+5)
                └── projections
                     └── exists [as=exists:15, type=bool, outer=(1), correlated-subquery]
                          └── project
                               ├── columns: y:11(int)
                               ├── outer: (1)
                               ├── cardinality: [0 - 1]
                               ├── key: ()
                               ├── fd: ()-->(11)
                               ├── prune: (11)
                               └── select
                                    ├── columns: x:10(int!null) y:11(int) s:12(string) d:13(decimal!null) xysd.crdb_internal_mvcc_timestamp:14(decimal)
                                    ├── outer: (1)
                                    ├── cardinality: [0 - 1]
                                    ├── key: ()
                                    ├── fd: ()-->(10-14)
                                    ├── prune: (11-14)
                                    ├── interesting orderings: (+10) (-12,+13,+10)
                                    ├── scan xysd
                                    │    ├── columns: x:10(int!null) y:11(int) s:12(string) d:13(decimal!null) xysd.crdb_internal_mvcc_timestamp:14(decimal)
                                    │    ├── key: (10)
                                    │    ├── fd: (10)-->(11-14), (12,13)~~>(10,11,14)
                                    │    ├── prune: (10-14)
                                    │    └── interesting orderings: (+10) (-12,+13,+10)
                                    └── filters
                                         └── eq [type=bool, outer=(1,10), constraints=(/1: (/NULL - ]; /10: (/NULL - ]), fd=(1)==(10), (10)==(1)]
                                              ├── variable: x:10 [type=int]
                                              └── variable: k:1 [type=int]

# We have the FD: y --> y::TEXT.
build
SELECT y, y::TEXT FROM xysd
----
project
 ├── columns: y:2(int) y:6(string)
 ├── immutable
 ├── fd: (2)-->(6)
 ├── prune: (2,6)
 ├── scan xysd
 │    ├── columns: x:1(int!null) xysd.y:2(int) s:3(string) d:4(decimal!null) crdb_internal_mvcc_timestamp:5(decimal)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
 │    ├── prune: (1-5)
 │    └── interesting orderings: (+1) (-3,+4,+1)
 └── projections
      └── cast: STRING [as=y:6, type=string, outer=(2), immutable]
           └── variable: xysd.y:2 [type=int]

# We don't have the FD: d --> d::TEXT because d is a composite type.
# For example, d=1 is equal to d=1.0 but d::TEXT differs.
build
SELECT d, d::TEXT FROM xysd
----
project
 ├── columns: d:4(decimal!null) d:6(string!null)
 ├── immutable
 ├── prune: (4,6)
 ├── scan xysd
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) xysd.d:4(decimal!null) crdb_internal_mvcc_timestamp:5(decimal)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
 │    ├── prune: (1-5)
 │    └── interesting orderings: (+1) (-3,+4,+1)
 └── projections
      └── cast: STRING [as=d:6, type=string, outer=(4), immutable]
           └── variable: xysd.d:4 [type=decimal]

# We have the FD d --> d+1.
build
SELECT d, d+1 FROM xysd
----
project
 ├── columns: d:4(decimal!null) "?column?":6(decimal!null)
 ├── immutable
 ├── fd: (4)-->(6)
 ├── prune: (4,6)
 ├── scan xysd
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) crdb_internal_mvcc_timestamp:5(decimal)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2-5), (3,4)~~>(1,2,5)
 │    ├── prune: (1-5)
 │    └── interesting orderings: (+1) (-3,+4,+1)
 └── projections
      └── plus [as="?column?":6, type=decimal, outer=(4), immutable]
           ├── variable: d:4 [type=decimal]
           └── const: 1 [type=decimal]

# We have the equality relation between the synthesized column and the column
# it refers to.
norm
SELECT x, CASE WHEN true THEN x END FROM xysd
----
project
 ├── columns: x:1(int!null) case:6(int!null)
 ├── key: (1)
 ├── fd: (1)==(6), (6)==(1)
 ├── prune: (1,6)
 ├── interesting orderings: (+1)
 ├── scan xysd
 │    ├── columns: x:1(int!null)
 │    ├── key: (1)
 │    ├── prune: (1)
 │    └── interesting orderings: (+1)
 └── projections
      └── variable: x:1 [as=case:6, type=int, outer=(1)]


# Verify that a,b form a key.
norm
SELECT a, b FROM ab WHERE a IS NOT NULL and b IS NOT NULL
----
select
 ├── columns: a:1(int!null) b:2(int!null)
 ├── key: (1,2)
 ├── interesting orderings: (+1,+2)
 ├── scan ab
 │    ├── columns: a:1(int) b:2(int)
 │    ├── lax-key: (1,2)
 │    ├── prune: (1,2)
 │    └── interesting orderings: (+1,+2)
 └── filters
      ├── is-not [type=bool, outer=(1), constraints=(/1: (/NULL - ]; tight)]
      │    ├── variable: a:1 [type=int]
      │    └── null [type=unknown]
      └── is-not [type=bool, outer=(2), constraints=(/2: (/NULL - ]; tight)]
           ├── variable: b:2 [type=int]
           └── null [type=unknown]

norm
SELECT a, b FROM ab WHERE (a, b) IN ((1, 1), (2, 2))
----
select
 ├── columns: a:1(int!null) b:2(int!null)
 ├── cardinality: [0 - 2]
 ├── key: (1,2)
 ├── interesting orderings: (+1,+2)
 ├── scan ab
 │    ├── columns: a:1(int) b:2(int)
 │    ├── lax-key: (1,2)
 │    ├── prune: (1,2)
 │    └── interesting orderings: (+1,+2)
 └── filters
      └── in [type=bool, outer=(1,2), constraints=(/1/2: [/1/1 - /1/1] [/2/2 - /2/2]; /2: [/1 - /1] [/2 - /2]; tight)]
           ├── tuple [type=tuple{int, int}]
           │    ├── variable: a:1 [type=int]
           │    └── variable: b:2 [type=int]
           └── tuple [type=tuple{tuple{int, int}, tuple{int, int}}]
                ├── tuple [type=tuple{int, int}]
                │    ├── const: 1 [type=int]
                │    └── const: 1 [type=int]
                └── tuple [type=tuple{int, int}]
                     ├── const: 2 [type=int]
                     └── const: 2 [type=int]
