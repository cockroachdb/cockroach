exec-ddl
CREATE TABLE xyzs (x INT PRIMARY KEY, y INT, z FLOAT NOT NULL, s STRING, UNIQUE (s DESC, z))
----
TABLE xyzs
 ├── x int not null
 ├── y int
 ├── z float not null
 ├── s string
 ├── INDEX primary
 │    └── x int not null
 └── INDEX secondary
      ├── s string desc
      ├── z float not null
      └── x int not null (storing)

exec-ddl
CREATE TABLE kuv (k INT PRIMARY KEY, u FLOAT, v STRING)
----
TABLE kuv
 ├── k int not null
 ├── u float
 ├── v string
 └── INDEX primary
      └── k int not null

build
SELECT * FROM xyzs OFFSET 1
----
offset
 ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
 ├── stats: [rows=999]
 ├── keys: (1) weak(3,4)
 ├── scan xyzs
 │    ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 └── const: 1 [type=int]

build
SELECT * FROM xyzs OFFSET (SELECT 1)
----
offset
 ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
 ├── stats: [rows=1000]
 ├── keys: (1) weak(3,4)
 ├── scan xyzs
 │    ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 └── subquery [type=int]
      └── max1-row
           ├── columns: "1":5(int!null)
           ├── cardinality: [1 - 1]
           ├── stats: [rows=1]
           └── project
                ├── columns: "1":5(int!null)
                ├── cardinality: [1 - 1]
                ├── stats: [rows=1]
                ├── values
                │    ├── cardinality: [1 - 1]
                │    ├── stats: [rows=1]
                │    └── tuple [type=tuple{}]
                └── projections
                     └── const: 1 [type=int]

build
SELECT * FROM xyzs OFFSET 0
----
offset
 ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
 ├── stats: [rows=1000]
 ├── keys: (1) weak(3,4)
 ├── scan xyzs
 │    ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 └── const: 0 [type=int]

# Propagate outer columns.
build
SELECT (SELECT x FROM kuv OFFSET y) FROM xyzs
----
project
 ├── columns: "(SELECT x FROM kuv OFFSET y)":9(int)
 ├── stats: [rows=1000]
 ├── scan xyzs
 │    ├── columns: xyzs.x:1(int!null) y:2(int) z:3(float!null) s:4(string)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 └── projections [outer=(1,2)]
      └── subquery [type=int, outer=(1,2)]
           └── max1-row
                ├── columns: x:8(int)
                ├── outer: (1,2)
                ├── cardinality: [0 - 1]
                ├── stats: [rows=1]
                └── offset
                     ├── columns: x:8(int)
                     ├── outer: (1,2)
                     ├── stats: [rows=1000]
                     ├── project
                     │    ├── columns: x:8(int)
                     │    ├── outer: (1)
                     │    ├── stats: [rows=1000]
                     │    ├── scan kuv
                     │    │    ├── columns: k:5(int!null) u:6(float) v:7(string)
                     │    │    ├── stats: [rows=1000]
                     │    │    └── keys: (5)
                     │    └── projections [outer=(1)]
                     │         └── variable: xyzs.x [type=int, outer=(1)]
                     └── variable: xyzs.y [type=int, outer=(2)]

# Reduce cardinality of input set.
build
SELECT *
FROM ((SELECT x FROM xyzs LIMIT 10) UNION ALL (SELECT * FROM (VALUES (1), (2), (3))))
OFFSET 2
----
offset
 ├── columns: x:6(int)
 ├── cardinality: [1 - 11]
 ├── stats: [rows=11]
 ├── union-all
 │    ├── columns: x:6(int)
 │    ├── left columns: xyzs.x:1(int)
 │    ├── right columns: column1:5(int)
 │    ├── cardinality: [3 - 13]
 │    ├── stats: [rows=13]
 │    ├── limit
 │    │    ├── columns: xyzs.x:1(int!null)
 │    │    ├── cardinality: [0 - 10]
 │    │    ├── stats: [rows=10]
 │    │    ├── keys: (1)
 │    │    ├── project
 │    │    │    ├── columns: xyzs.x:1(int!null)
 │    │    │    ├── stats: [rows=1000]
 │    │    │    ├── keys: (1)
 │    │    │    └── scan xyzs
 │    │    │         ├── columns: xyzs.x:1(int!null) y:2(int) z:3(float!null) s:4(string)
 │    │    │         ├── stats: [rows=1000]
 │    │    │         └── keys: (1) weak(3,4)
 │    │    └── const: 10 [type=int]
 │    └── values
 │         ├── columns: column1:5(int)
 │         ├── cardinality: [3 - 3]
 │         ├── stats: [rows=3]
 │         ├── tuple [type=tuple{int}]
 │         │    └── const: 1 [type=int]
 │         ├── tuple [type=tuple{int}]
 │         │    └── const: 2 [type=int]
 │         └── tuple [type=tuple{int}]
 │              └── const: 3 [type=int]
 └── const: 2 [type=int]

# Test very high offset (> max uint32).
opt
SELECT s, x FROM (SELECT * FROM xyzs LIMIT 100) WHERE x=1 OFFSET 4294967296
----
offset
 ├── columns: s:4(string) x:1(int!null)
 ├── cardinality: [0 - 0]
 ├── stats: [rows=0]
 ├── keys: (1)
 ├── select
 │    ├── columns: x:1(int!null) s:4(string)
 │    ├── cardinality: [0 - 100]
 │    ├── stats: [rows=1, distinct(1)=1]
 │    ├── keys: (1)
 │    ├── scan xyzs
 │    │    ├── columns: x:1(int!null) s:4(string)
 │    │    ├── limit: 100
 │    │    ├── stats: [rows=100, distinct(1)=100]
 │    │    └── keys: (1)
 │    └── filters [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
 │         └── eq [type=bool, outer=(1), constraints=(/1: [/1 - /1]; tight)]
 │              ├── variable: xyzs.x [type=int, outer=(1)]
 │              └── const: 1 [type=int]
 └── const: 4294967296 [type=int]
