exec-ddl
CREATE TABLE system.information_schema.schemata (
	CATALOG_NAME               STRING NOT NULL,
	SCHEMA_NAME                STRING NOT NULL,
	DEFAULT_CHARACTER_SET_NAME STRING,
	SQL_PATH                   STRING
)
----
TABLE schemata
 ├── catalog_name string not null
 ├── schema_name string not null
 ├── default_character_set_name string
 └── sql_path string

exec-ddl
CREATE TABLE system.information_schema.tables (
	TABLE_CATALOG      STRING NOT NULL,
	TABLE_SCHEMA       STRING NOT NULL,
	TABLE_NAME         STRING NOT NULL,
	TABLE_TYPE         STRING NOT NULL,
	IS_INSERTABLE_INTO STRING NOT NULL,
	VERSION            INT
)
----
TABLE tables
 ├── table_catalog string not null
 ├── table_schema string not null
 ├── table_name string not null
 ├── table_type string not null
 ├── is_insertable_into string not null
 └── version int

build
SELECT catalog_name, sql_path
FROM (SELECT * FROM system.information_schema.schemata WHERE SCHEMA_NAME='public')
LEFT JOIN system.information_schema.tables
ON CATALOG_NAME=TABLE_CATALOG AND SCHEMA_NAME=TABLE_SCHEMA
----
project
 ├── columns: catalog_name:1(string) sql_path:4(string)
 ├── prune: (1,4)
 └── left-join
      ├── columns: catalog_name:1(string) schema_name:2(string!null) default_character_set_name:3(string) sql_path:4(string) table_catalog:5(string) table_schema:6(string) table_name:7(string) table_type:8(string) is_insertable_into:9(string) version:10(int)
      ├── fd: ()-->(2)
      ├── reject-nulls: (5-10)
      ├── select
      │    ├── columns: catalog_name:1(string) schema_name:2(string!null) default_character_set_name:3(string) sql_path:4(string)
      │    ├── fd: ()-->(2)
      │    ├── virtual-scan system.information_schema.schemata
      │    │    └── columns: catalog_name:1(string) schema_name:2(string) default_character_set_name:3(string) sql_path:4(string)
      │    └── filters [type=bool, outer=(2), constraints=(/2: [/'public' - /'public']; tight), fd=()-->(2)]
      │         └── eq [type=bool, outer=(2), constraints=(/2: [/'public' - /'public']; tight)]
      │              ├── variable: schema_name [type=string, outer=(2)]
      │              └── const: 'public' [type=string]
      ├── virtual-scan system.information_schema.tables
      │    └── columns: table_catalog:5(string) table_schema:6(string) table_name:7(string) table_type:8(string) is_insertable_into:9(string) version:10(int)
      └── filters [type=bool, outer=(1,2,5,6), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /5: (/NULL - ]; /6: (/NULL - ])]
           └── and [type=bool, outer=(1,2,5,6), constraints=(/1: (/NULL - ]; /2: (/NULL - ]; /5: (/NULL - ]; /6: (/NULL - ])]
                ├── eq [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
                │    ├── variable: catalog_name [type=string, outer=(1)]
                │    └── variable: table_catalog [type=string, outer=(5)]
                └── eq [type=bool, outer=(2,6), constraints=(/2: (/NULL - ]; /6: (/NULL - ])]
                     ├── variable: schema_name [type=string, outer=(2)]
                     └── variable: table_schema [type=string, outer=(6)]

# The system.crdb_internal.ranges_no_leases and system.crdb_internal.ranges
# tables are dynamically classified as virtual tables based on the 'system'
# catalog in their names
exec-ddl
CREATE TABLE system.crdb_internal.ranges_no_leases (
  range_id     INT NOT NULL,
  start_key    BYTES NOT NULL,
  start_pretty STRING NOT NULL,
  end_key      BYTES NOT NULL,
  end_pretty   STRING NOT NULL,
  database     STRING NOT NULL,
  "table"      STRING NOT NULL,
  "index"      STRING NOT NULL,
  replicas     INT[] NOT NULL
)
----
TABLE ranges_no_leases
 ├── range_id int not null
 ├── start_key bytes not null
 ├── start_pretty string not null
 ├── end_key bytes not null
 ├── end_pretty string not null
 ├── database string not null
 ├── table string not null
 ├── index string not null
 └── replicas int[] not null

exec-ddl
CREATE TABLE system.crdb_internal.ranges (
  range_id     INT NOT NULL,
  start_key    BYTES NOT NULL,
  start_pretty STRING NOT NULL,
  end_key      BYTES NOT NULL,
  end_pretty   STRING NOT NULL,
  database     STRING NOT NULL,
  "table"      STRING NOT NULL,
  "index"      STRING NOT NULL,
  replicas     INT[] NOT NULL,
  lease_holder INT NOT NULL
)
----
TABLE ranges
 ├── range_id int not null
 ├── start_key bytes not null
 ├── start_pretty string not null
 ├── end_key bytes not null
 ├── end_pretty string not null
 ├── database string not null
 ├── table string not null
 ├── index string not null
 ├── replicas int[] not null
 └── lease_holder int not null

build
SELECT * FROM system.crdb_internal.ranges
----
project
 ├── columns: range_id:11(int) start_key:12(bytes) start_pretty:13(string) end_key:14(bytes) end_pretty:15(string) database:16(string) table:17(string) index:18(string) replicas:19(int[]) lease_holder:20(int)
 ├── fd: (12)-->(20)
 ├── prune: (11-20)
 ├── virtual-scan system.crdb_internal.ranges_no_leases
 │    └── columns: ranges_no_leases.range_id:11(int) ranges_no_leases.start_key:12(bytes) ranges_no_leases.start_pretty:13(string) ranges_no_leases.end_key:14(bytes) ranges_no_leases.end_pretty:15(string) ranges_no_leases.database:16(string) ranges_no_leases.table:17(string) ranges_no_leases.index:18(string) ranges_no_leases.replicas:19(int[])
 └── projections [outer=(11-19)]
      └── function: crdb_internal.lease_holder [type=int, outer=(12)]
           └── variable: ranges_no_leases.start_key [type=bytes, outer=(12)]

opt
SELECT * FROM system.crdb_internal.ranges WHERE range_id = 1
----
project
 ├── columns: range_id:11(int!null) start_key:12(bytes) start_pretty:13(string) end_key:14(bytes) end_pretty:15(string) database:16(string) table:17(string) index:18(string) replicas:19(int[]) lease_holder:20(int)
 ├── fd: ()-->(11), (12)-->(20)
 ├── prune: (11-20)
 ├── select
 │    ├── columns: ranges_no_leases.range_id:11(int!null) ranges_no_leases.start_key:12(bytes) ranges_no_leases.start_pretty:13(string) ranges_no_leases.end_key:14(bytes) ranges_no_leases.end_pretty:15(string) ranges_no_leases.database:16(string) ranges_no_leases.table:17(string) ranges_no_leases.index:18(string) ranges_no_leases.replicas:19(int[])
 │    ├── fd: ()-->(11)
 │    ├── virtual-scan system.crdb_internal.ranges_no_leases
 │    │    └── columns: ranges_no_leases.range_id:11(int) ranges_no_leases.start_key:12(bytes) ranges_no_leases.start_pretty:13(string) ranges_no_leases.end_key:14(bytes) ranges_no_leases.end_pretty:15(string) ranges_no_leases.database:16(string) ranges_no_leases.table:17(string) ranges_no_leases.index:18(string) ranges_no_leases.replicas:19(int[])
 │    └── filters [type=bool, outer=(11), constraints=(/11: [/1 - /1]; tight), fd=()-->(11)]
 │         └── eq [type=bool, outer=(11), constraints=(/11: [/1 - /1]; tight)]
 │              ├── variable: ranges_no_leases.range_id [type=int, outer=(11)]
 │              └── const: 1 [type=int]
 └── projections [outer=(11-19)]
      └── function: crdb_internal.lease_holder [type=int, outer=(12)]
           └── variable: ranges_no_leases.start_key [type=bytes, outer=(12)]
