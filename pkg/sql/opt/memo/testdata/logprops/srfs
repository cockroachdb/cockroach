exec-ddl
CREATE TABLE xy (x INT PRIMARY KEY, y INT)
----

exec-ddl
CREATE TABLE uv (u INT, v INT NOT NULL)
----

opt
SELECT generate_series(0,1) FROM (SELECT * FROM xy LIMIT 0)
----
project-set
 ├── columns: generate_series:3(int)
 ├── cardinality: [0 - 0]
 ├── immutable, side-effects
 ├── values
 │    ├── cardinality: [0 - 0]
 │    └── key: ()
 └── zip
      └── function: generate_series [type=int, immutable, side-effects]
           ├── const: 0 [type=int]
           └── const: 1 [type=int]

opt
SELECT (SELECT unnest(ARRAY[1,2,y,v]) FROM xy WHERE x = u) FROM uv
----
project
 ├── columns: unnest:7(int)
 ├── prune: (7)
 ├── ensure-distinct-on
 │    ├── columns: rowid:3(int!null) unnest:6(int)
 │    ├── grouping columns: rowid:3(int!null)
 │    ├── error: "more than one row returned by a subquery used as an expression"
 │    ├── key: (3)
 │    ├── fd: (3)-->(6)
 │    ├── prune: (6)
 │    ├── left-join-apply
 │    │    ├── columns: u:1(int) v:2(int!null) rowid:3(int!null) x:4(int) y:5(int) unnest:6(int)
 │    │    ├── fd: (3)-->(1,2)
 │    │    ├── prune: (3,6)
 │    │    ├── reject-nulls: (4-6)
 │    │    ├── interesting orderings: (+3) (+4)
 │    │    ├── scan uv
 │    │    │    ├── columns: u:1(int) v:2(int!null) rowid:3(int!null)
 │    │    │    ├── key: (3)
 │    │    │    ├── fd: (3)-->(1,2)
 │    │    │    ├── prune: (1-3)
 │    │    │    ├── interesting orderings: (+3)
 │    │    │    └── unfiltered-cols: (1-3)
 │    │    ├── inner-join-apply
 │    │    │    ├── columns: x:4(int!null) y:5(int) unnest:6(int)
 │    │    │    ├── outer: (1,2)
 │    │    │    ├── cardinality: [0 - 4]
 │    │    │    ├── fd: ()-->(4,5)
 │    │    │    ├── prune: (6)
 │    │    │    ├── interesting orderings: (+4)
 │    │    │    ├── select
 │    │    │    │    ├── columns: x:4(int!null) y:5(int)
 │    │    │    │    ├── outer: (1)
 │    │    │    │    ├── cardinality: [0 - 1]
 │    │    │    │    ├── key: ()
 │    │    │    │    ├── fd: ()-->(4,5)
 │    │    │    │    ├── prune: (5)
 │    │    │    │    ├── interesting orderings: (+4)
 │    │    │    │    ├── scan xy
 │    │    │    │    │    ├── columns: x:4(int!null) y:5(int)
 │    │    │    │    │    ├── key: (4)
 │    │    │    │    │    ├── fd: (4)-->(5)
 │    │    │    │    │    ├── prune: (4,5)
 │    │    │    │    │    └── interesting orderings: (+4)
 │    │    │    │    └── filters
 │    │    │    │         └── eq [type=bool, outer=(1,4), constraints=(/1: (/NULL - ]; /4: (/NULL - ]), fd=(1)==(4), (4)==(1)]
 │    │    │    │              ├── variable: x:4 [type=int]
 │    │    │    │              └── variable: u:1 [type=int]
 │    │    │    ├── values
 │    │    │    │    ├── columns: unnest:6(int)
 │    │    │    │    ├── outer: (2,5)
 │    │    │    │    ├── cardinality: [4 - 4]
 │    │    │    │    ├── prune: (6)
 │    │    │    │    ├── tuple [type=tuple{int}]
 │    │    │    │    │    └── const: 1 [type=int]
 │    │    │    │    ├── tuple [type=tuple{int}]
 │    │    │    │    │    └── const: 2 [type=int]
 │    │    │    │    ├── tuple [type=tuple{int}]
 │    │    │    │    │    └── variable: y:5 [type=int]
 │    │    │    │    └── tuple [type=tuple{int}]
 │    │    │    │         └── variable: v:2 [type=int]
 │    │    │    └── filters (true)
 │    │    └── filters (true)
 │    └── aggregations
 │         └── const-agg [as=unnest:6, type=int, outer=(6)]
 │              └── variable: unnest:6 [type=int]
 └── projections
      └── variable: unnest:6 [as=unnest:7, type=int, outer=(6)]
