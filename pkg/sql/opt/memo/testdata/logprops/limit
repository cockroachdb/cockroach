exec-ddl
CREATE TABLE xyzs (x INT PRIMARY KEY, y INT, z FLOAT NOT NULL, s STRING, UNIQUE (s DESC, z))
----
TABLE xyzs
 ├── x int not null
 ├── y int
 ├── z float not null
 ├── s string
 ├── INDEX primary
 │    └── x int not null
 └── INDEX secondary
      ├── s string desc
      ├── z float not null
      └── x int not null (storing)

exec-ddl
CREATE TABLE kuv (k INT PRIMARY KEY, u FLOAT, v STRING)
----
TABLE kuv
 ├── k int not null
 ├── u float
 ├── v string
 └── INDEX primary
      └── k int not null

build
SELECT * FROM xyzs LIMIT 1
----
limit
 ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
 ├── cardinality: [0 - 1]
 ├── stats: [rows=1]
 ├── keys: (1) weak(3,4)
 ├── scan xyzs
 │    ├── columns: xyzs.x:1(int!null) xyzs.y:2(int) xyzs.z:3(float!null) xyzs.s:4(string)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 └── const: 1 [type=int]

build
SELECT COUNT(*) FROM xyzs LIMIT 10
----
limit
 ├── columns: column5:5(int)
 ├── cardinality: [1 - 1]
 ├── stats: [rows=1]
 ├── keys: ()
 ├── group-by
 │    ├── columns: column5:5(int)
 │    ├── cardinality: [1 - 1]
 │    ├── stats: [rows=1]
 │    ├── keys: ()
 │    ├── project
 │    │    ├── stats: [rows=1000]
 │    │    ├── scan xyzs
 │    │    │    ├── columns: xyzs.x:1(int!null) xyzs.y:2(int) xyzs.z:3(float!null) xyzs.s:4(string)
 │    │    │    ├── stats: [rows=1000]
 │    │    │    └── keys: (1) weak(3,4)
 │    │    └── projections
 │    └── aggregations
 │         └── function: count_rows [type=int]
 └── const: 10 [type=int]

build
SELECT * FROM xyzs LIMIT (SELECT 1)
----
limit
 ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
 ├── stats: [rows=1000]
 ├── keys: (1) weak(3,4)
 ├── scan xyzs
 │    ├── columns: xyzs.x:1(int!null) xyzs.y:2(int) xyzs.z:3(float!null) xyzs.s:4(string)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 └── subquery [type=int]
      ├── max1-row
      │    ├── columns: column5:5(int)
      │    ├── cardinality: [1 - 1]
      │    ├── stats: [rows=1]
      │    └── project
      │         ├── columns: column5:5(int)
      │         ├── cardinality: [1 - 1]
      │         ├── stats: [rows=1]
      │         ├── values
      │         │    ├── cardinality: [1 - 1]
      │         │    ├── stats: [rows=1]
      │         │    └── tuple [type=tuple{}]
      │         └── projections
      │              └── const: 1 [type=int]
      └── variable: column5 [type=int, outer=(5)]

build
SELECT * FROM xyzs LIMIT 0
----
limit
 ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
 ├── cardinality: [0 - 0]
 ├── stats: [rows=1000]
 ├── keys: (1) weak(3,4)
 ├── scan xyzs
 │    ├── columns: xyzs.x:1(int!null) xyzs.y:2(int) xyzs.z:3(float!null) xyzs.s:4(string)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 └── const: 0 [type=int]

# Propagate outer columns.
build
SELECT (SELECT x FROM kuv LIMIT y) FROM xyzs
----
project
 ├── columns: column8:8(int)
 ├── stats: [rows=1000]
 ├── scan xyzs
 │    ├── columns: xyzs.x:1(int!null) xyzs.y:2(int) xyzs.z:3(float!null) xyzs.s:4(string)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 └── projections [outer=(1,2)]
      └── subquery [type=int, outer=(1,2)]
           ├── max1-row
           │    ├── columns: xyzs.x:1(int)
           │    ├── outer: (1,2)
           │    ├── cardinality: [0 - 1]
           │    ├── stats: [rows=1]
           │    └── limit
           │         ├── columns: xyzs.x:1(int)
           │         ├── outer: (1,2)
           │         ├── stats: [rows=1000]
           │         ├── project
           │         │    ├── columns: xyzs.x:1(int)
           │         │    ├── outer: (1)
           │         │    ├── stats: [rows=1000]
           │         │    ├── scan kuv
           │         │    │    ├── columns: kuv.k:5(int!null) kuv.u:6(float) kuv.v:7(string)
           │         │    │    ├── stats: [rows=1000]
           │         │    │    └── keys: (5)
           │         │    └── projections [outer=(1)]
           │         │         └── variable: xyzs.x [type=int, outer=(1)]
           │         └── variable: xyzs.y [type=int, outer=(2)]
           └── variable: xyzs.x [type=int, outer=(1)]

# Test very high limit (> max uint32).
opt
SELECT s, x FROM xyzs WHERE x=1 LIMIT 4294967296
----
limit
 ├── columns: s:4(string) x:1(int!null)
 ├── stats: [rows=100]
 ├── keys: (1)
 ├── scan xyzs
 │    ├── columns: xyzs.x:1(int!null) xyzs.s:4(string)
 │    ├── constraint: /1: [/1 - /1]
 │    ├── stats: [rows=100]
 │    └── keys: (1)
 └── const: 4294967296 [type=int]
