exec-ddl
CREATE TABLE xyz (x INT PRIMARY KEY, y INT, z INT NOT NULL)
----
TABLE xyz
 ├── x int not null
 ├── y int
 ├── z int not null
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE uv (u INT, v INT NOT NULL)
----
TABLE uv
 ├── u int
 ├── v int not null
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

build
SELECT * FROM xyz UNION SELECT * FROM uv
----
error: each UNION query must have the same number of columns: 3 vs 2

build
SELECT x, y, x FROM xyz INTERSECT SELECT v, u, rowid FROM (SELECT *, rowid FROM uv WHERE u=1) uv
----
intersect
 ├── columns: x:1(int!null) y:2(int) x:1(int!null)
 ├── left columns: xyz.x:1(int!null) xyz.y:2(int) xyz.x:1(int!null)
 ├── right columns: uv.v:5(int) uv.u:4(int) uv.rowid:6(int)
 ├── used: (1,2)
 ├── stats: [rows=1, distinct(1,2)=1]
 ├── project
 │    ├── columns: xyz.x:1(int!null) xyz.y:2(int)
 │    ├── stats: [rows=1000, distinct(1,2)=1000]
 │    ├── keys: (1)
 │    ├── scan xyz
 │    │    ├── columns: xyz.x:1(int!null) xyz.y:2(int) xyz.z:3(int!null)
 │    │    ├── stats: [rows=1000, distinct(1,2)=1000]
 │    │    └── keys: (1)
 │    └── projections [outer=(1,2)]
 │         ├── variable: xyz.x [type=int, outer=(1)]
 │         └── variable: xyz.y [type=int, outer=(2)]
 └── project
      ├── columns: uv.v:5(int!null) uv.u:4(int) uv.rowid:6(int!null)
      ├── stats: [rows=1, distinct(4-6)=1]
      ├── keys: (6)
      ├── select
      │    ├── columns: uv.u:4(int) uv.v:5(int!null) uv.rowid:6(int!null)
      │    ├── used: (4)
      │    ├── stats: [rows=1, distinct(4)=1, distinct(4-6)=1]
      │    ├── keys: (6)
      │    ├── scan uv
      │    │    ├── columns: uv.u:4(int) uv.v:5(int!null) uv.rowid:6(int!null)
      │    │    ├── stats: [rows=1000, distinct(4)=700, distinct(4-6)=1000]
      │    │    └── keys: (6)
      │    └── eq [type=bool, outer=(4), constraints=(/4: [/1 - /1]; tight)]
      │         ├── variable: uv.u [type=int, outer=(4)]
      │         └── const: 1 [type=int]
      └── projections [outer=(4-6)]
           ├── variable: uv.v [type=int, outer=(5)]
           ├── variable: uv.u [type=int, outer=(4)]
           └── variable: uv.rowid [type=int, outer=(6)]

build
SELECT x, x, y FROM xyz EXCEPT SELECT u, v, v FROM (SELECT * FROM uv WHERE u=1) uv
----
except
 ├── columns: x:1(int!null) x:1(int!null) y:2(int)
 ├── left columns: xyz.x:1(int!null) xyz.x:1(int!null) xyz.y:2(int)
 ├── right columns: uv.u:4(int) uv.v:5(int) uv.v:5(int)
 ├── used: (1,2)
 ├── stats: [rows=1000, distinct(1,2)=1000]
 ├── project
 │    ├── columns: xyz.x:1(int!null) xyz.y:2(int)
 │    ├── stats: [rows=1000, distinct(1,2)=1000]
 │    ├── keys: (1)
 │    ├── scan xyz
 │    │    ├── columns: xyz.x:1(int!null) xyz.y:2(int) xyz.z:3(int!null)
 │    │    ├── stats: [rows=1000, distinct(1,2)=1000]
 │    │    └── keys: (1)
 │    └── projections [outer=(1,2)]
 │         ├── variable: xyz.x [type=int, outer=(1)]
 │         └── variable: xyz.y [type=int, outer=(2)]
 └── project
      ├── columns: uv.u:4(int) uv.v:5(int!null)
      ├── stats: [rows=1, distinct(4,5)=1]
      ├── project
      │    ├── columns: uv.u:4(int) uv.v:5(int!null)
      │    ├── stats: [rows=1, distinct(4,5)=1]
      │    ├── select
      │    │    ├── columns: uv.u:4(int) uv.v:5(int!null) uv.rowid:6(int!null)
      │    │    ├── used: (4)
      │    │    ├── stats: [rows=1, distinct(4)=1, distinct(4,5)=1]
      │    │    ├── keys: (6)
      │    │    ├── scan uv
      │    │    │    ├── columns: uv.u:4(int) uv.v:5(int!null) uv.rowid:6(int!null)
      │    │    │    ├── stats: [rows=1000, distinct(4)=700, distinct(4,5)=1000]
      │    │    │    └── keys: (6)
      │    │    └── eq [type=bool, outer=(4), constraints=(/4: [/1 - /1]; tight)]
      │    │         ├── variable: uv.u [type=int, outer=(4)]
      │    │         └── const: 1 [type=int]
      │    └── projections [outer=(4,5)]
      │         ├── variable: uv.u [type=int, outer=(4)]
      │         └── variable: uv.v [type=int, outer=(5)]
      └── projections [outer=(4,5)]
           ├── variable: uv.u [type=int, outer=(4)]
           └── variable: uv.v [type=int, outer=(5)]

# Propagate outer columns.
build
SELECT * FROM xyz WHERE (SELECT x, u FROM uv UNION SELECT y, v FROM uv) = (1, 2)
----
select
 ├── columns: x:1(int!null) y:2(int) z:3(int!null)
 ├── used: (1,2)
 ├── stats: [rows=333]
 ├── keys: (1)
 ├── scan xyz
 │    ├── columns: xyz.x:1(int!null) xyz.y:2(int) xyz.z:3(int!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (1)
 └── eq [type=bool, outer=(1,2)]
      ├── subquery [type=tuple{int, int}, outer=(1,2)]
      │    └── max1-row
      │         ├── columns: column12:12(tuple{int, int})
      │         ├── outer: (1,2)
      │         ├── cardinality: [0 - 1]
      │         ├── stats: [rows=1]
      │         └── project
      │              ├── columns: column12:12(tuple{int, int})
      │              ├── outer: (1,2)
      │              ├── stats: [rows=1400]
      │              ├── union
      │              │    ├── columns: x:10(int) u:11(int)
      │              │    ├── left columns: xyz.x:1(int) uv.u:4(int)
      │              │    ├── right columns: xyz.y:2(int) uv.v:8(int)
      │              │    ├── used: (10,11)
      │              │    ├── outer: (1,2)
      │              │    ├── stats: [rows=1400, distinct(10,11)=1400]
      │              │    ├── project
      │              │    │    ├── columns: xyz.x:1(int) uv.u:4(int)
      │              │    │    ├── outer: (1)
      │              │    │    ├── stats: [rows=1000, distinct(1,4)=700]
      │              │    │    ├── scan uv
      │              │    │    │    ├── columns: uv.u:4(int) uv.v:5(int!null) uv.rowid:6(int!null)
      │              │    │    │    ├── stats: [rows=1000, distinct(4)=700]
      │              │    │    │    └── keys: (6)
      │              │    │    └── projections [outer=(1,4)]
      │              │    │         ├── variable: xyz.x [type=int, outer=(1)]
      │              │    │         └── variable: uv.u [type=int, outer=(4)]
      │              │    └── project
      │              │         ├── columns: xyz.y:2(int) uv.v:8(int!null)
      │              │         ├── outer: (2)
      │              │         ├── stats: [rows=1000, distinct(2,8)=700]
      │              │         ├── scan uv
      │              │         │    ├── columns: uv.u:7(int) uv.v:8(int!null) uv.rowid:9(int!null)
      │              │         │    ├── stats: [rows=1000, distinct(8)=700]
      │              │         │    └── keys: (9)
      │              │         └── projections [outer=(2,8)]
      │              │              ├── variable: xyz.y [type=int, outer=(2)]
      │              │              └── variable: uv.v [type=int, outer=(8)]
      │              └── projections [outer=(10,11)]
      │                   └── tuple [type=tuple{int, int}, outer=(10,11)]
      │                        ├── variable: x [type=int, outer=(10)]
      │                        └── variable: u [type=int, outer=(11)]
      └── tuple [type=tuple{int, int}]
           ├── const: 1 [type=int]
           └── const: 2 [type=int]

# Calculate union cardinality.
build
SELECT * FROM (VALUES (1), (2), (3))
UNION ALL
SELECT * FROM (VALUES (4), (5))
UNION
SELECT * FROM (VALUES (6), (7), (8))
----
union
 ├── columns: column1:5(int)
 ├── left columns: column1:3(int)
 ├── right columns: column1:4(int)
 ├── used: (5)
 ├── cardinality: [1 - 8]
 ├── stats: [rows=8, distinct(5)=8]
 ├── union-all
 │    ├── columns: column1:3(int)
 │    ├── left columns: column1:1(int)
 │    ├── right columns: column1:2(int)
 │    ├── cardinality: [5 - 5]
 │    ├── stats: [rows=5, distinct(3)=5]
 │    ├── values
 │    │    ├── columns: column1:1(int)
 │    │    ├── cardinality: [3 - 3]
 │    │    ├── stats: [rows=3, distinct(1)=3]
 │    │    ├── tuple [type=tuple{int}]
 │    │    │    └── const: 1 [type=int]
 │    │    ├── tuple [type=tuple{int}]
 │    │    │    └── const: 2 [type=int]
 │    │    └── tuple [type=tuple{int}]
 │    │         └── const: 3 [type=int]
 │    └── values
 │         ├── columns: column1:2(int)
 │         ├── cardinality: [2 - 2]
 │         ├── stats: [rows=2, distinct(2)=2]
 │         ├── tuple [type=tuple{int}]
 │         │    └── const: 4 [type=int]
 │         └── tuple [type=tuple{int}]
 │              └── const: 5 [type=int]
 └── values
      ├── columns: column1:4(int)
      ├── cardinality: [3 - 3]
      ├── stats: [rows=3, distinct(4)=3]
      ├── tuple [type=tuple{int}]
      │    └── const: 6 [type=int]
      ├── tuple [type=tuple{int}]
      │    └── const: 7 [type=int]
      └── tuple [type=tuple{int}]
           └── const: 8 [type=int]

# Calculate intersection cardinality.
build
SELECT * FROM (VALUES (1), (2), (3))
INTERSECT ALL
SELECT * FROM (VALUES (4), (5))
INTERSECT
SELECT * FROM (VALUES (6), (7), (8))
----
intersect
 ├── columns: column1:1(int)
 ├── left columns: column1:1(int)
 ├── right columns: column1:3(int)
 ├── used: (1)
 ├── cardinality: [0 - 2]
 ├── stats: [rows=2, distinct(1)=2]
 ├── intersect-all
 │    ├── columns: column1:1(int)
 │    ├── left columns: column1:1(int)
 │    ├── right columns: column1:2(int)
 │    ├── used: (1)
 │    ├── cardinality: [0 - 2]
 │    ├── stats: [rows=2, distinct(1)=2]
 │    ├── values
 │    │    ├── columns: column1:1(int)
 │    │    ├── cardinality: [3 - 3]
 │    │    ├── stats: [rows=3, distinct(1)=3]
 │    │    ├── tuple [type=tuple{int}]
 │    │    │    └── const: 1 [type=int]
 │    │    ├── tuple [type=tuple{int}]
 │    │    │    └── const: 2 [type=int]
 │    │    └── tuple [type=tuple{int}]
 │    │         └── const: 3 [type=int]
 │    └── values
 │         ├── columns: column1:2(int)
 │         ├── cardinality: [2 - 2]
 │         ├── stats: [rows=2, distinct(2)=2]
 │         ├── tuple [type=tuple{int}]
 │         │    └── const: 4 [type=int]
 │         └── tuple [type=tuple{int}]
 │              └── const: 5 [type=int]
 └── values
      ├── columns: column1:3(int)
      ├── cardinality: [3 - 3]
      ├── stats: [rows=3, distinct(3)=3]
      ├── tuple [type=tuple{int}]
      │    └── const: 6 [type=int]
      ├── tuple [type=tuple{int}]
      │    └── const: 7 [type=int]
      └── tuple [type=tuple{int}]
           └── const: 8 [type=int]

# Calculate except cardinality.
build
SELECT * FROM (VALUES (1), (2), (3))
EXCEPT ALL
SELECT * FROM (VALUES (4), (5))
EXCEPT
SELECT * FROM (VALUES (6), (7), (8), (9))
----
except
 ├── columns: column1:1(int)
 ├── left columns: column1:1(int)
 ├── right columns: column1:3(int)
 ├── used: (1)
 ├── cardinality: [0 - 3]
 ├── stats: [rows=3, distinct(1)=3]
 ├── except-all
 │    ├── columns: column1:1(int)
 │    ├── left columns: column1:1(int)
 │    ├── right columns: column1:2(int)
 │    ├── used: (1)
 │    ├── cardinality: [1 - 3]
 │    ├── stats: [rows=3, distinct(1)=3]
 │    ├── values
 │    │    ├── columns: column1:1(int)
 │    │    ├── cardinality: [3 - 3]
 │    │    ├── stats: [rows=3, distinct(1)=3]
 │    │    ├── tuple [type=tuple{int}]
 │    │    │    └── const: 1 [type=int]
 │    │    ├── tuple [type=tuple{int}]
 │    │    │    └── const: 2 [type=int]
 │    │    └── tuple [type=tuple{int}]
 │    │         └── const: 3 [type=int]
 │    └── values
 │         ├── columns: column1:2(int)
 │         ├── cardinality: [2 - 2]
 │         ├── stats: [rows=2, distinct(2)=2]
 │         ├── tuple [type=tuple{int}]
 │         │    └── const: 4 [type=int]
 │         └── tuple [type=tuple{int}]
 │              └── const: 5 [type=int]
 └── values
      ├── columns: column1:3(int)
      ├── cardinality: [4 - 4]
      ├── stats: [rows=4, distinct(3)=4]
      ├── tuple [type=tuple{int}]
      │    └── const: 6 [type=int]
      ├── tuple [type=tuple{int}]
      │    └── const: 7 [type=int]
      ├── tuple [type=tuple{int}]
      │    └── const: 8 [type=int]
      └── tuple [type=tuple{int}]
           └── const: 9 [type=int]

# Test UsedCols with UnionAll.
opt
SELECT x, x, z FROM xyz WHERE x=1
UNION ALL
SELECT u, v, u FROM uv WHERE v=2
----
union-all
 ├── columns: x:7(int) x:8(int!null) z:9(int)
 ├── left columns: xyz.x:1(int) xyz.x:1(int) xyz.z:3(int)
 ├── right columns: uv.u:4(int) uv.v:5(int) uv.u:4(int)
 ├── used: (7,8)
 ├── stats: [rows=2]
 ├── scan xyz
 │    ├── columns: xyz.x:1(int!null) xyz.z:3(int!null)
 │    ├── constraint: /1: [/1 - /1]
 │    ├── used: (1)
 │    ├── stats: [rows=1, distinct(1)=1]
 │    └── keys: (1)
 └── select
      ├── columns: uv.u:4(int) uv.v:5(int!null)
      ├── used: (5)
      ├── stats: [rows=1, distinct(5)=1]
      ├── scan uv
      │    ├── columns: uv.u:4(int) uv.v:5(int!null)
      │    └── stats: [rows=1000, distinct(5)=700]
      └── filters [type=bool, outer=(5), constraints=(/5: [/2 - /2]; tight)]
           └── eq [type=bool, outer=(5), constraints=(/5: [/2 - /2]; tight)]
                ├── variable: uv.v [type=int, outer=(5)]
                └── const: 2 [type=int]
