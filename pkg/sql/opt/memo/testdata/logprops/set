exec-ddl
CREATE TABLE xy (x INT PRIMARY KEY, y INT)
----

exec-ddl
CREATE TABLE uv (u INT, v INT NOT NULL)
----

exec-ddl
CREATE TABLE abc (a INT PRIMARY KEY, b INT, c INT)
----

build
SELECT * FROM xy UNION SELECT * FROM uv
----
union
 ├── columns: x:8(int) y:9(int)
 ├── left columns: xy.x:1(int) xy.y:2(int)
 ├── right columns: u:4(int) v:5(int)
 ├── key: (8,9)
 ├── project
 │    ├── columns: xy.x:1(int!null) xy.y:2(int)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2)
 │    ├── prune: (1,2)
 │    ├── interesting orderings: (+1)
 │    └── scan xy
 │         ├── columns: xy.x:1(int!null) xy.y:2(int) xy.crdb_internal_mvcc_timestamp:3(decimal)
 │         ├── key: (1)
 │         ├── fd: (1)-->(2,3)
 │         ├── prune: (1-3)
 │         └── interesting orderings: (+1)
 └── project
      ├── columns: u:4(int) v:5(int!null)
      ├── prune: (4,5)
      └── scan uv
           ├── columns: u:4(int) v:5(int!null) rowid:6(int!null) uv.crdb_internal_mvcc_timestamp:7(decimal)
           ├── key: (6)
           ├── fd: (6)-->(4,5,7)
           ├── prune: (4-7)
           └── interesting orderings: (+6)

build
SELECT x, y, x FROM xy INTERSECT SELECT v, u, rowid FROM (SELECT *, rowid FROM uv WHERE u=1) uv
----
intersect
 ├── columns: x:1(int!null) y:2(int) x:1(int!null)
 ├── left columns: x:1(int!null) y:2(int) x:1(int!null)
 ├── right columns: v:5(int) u:4(int) rowid:6(int)
 ├── key: (1,2)
 ├── project
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2)
 │    ├── prune: (1,2)
 │    ├── interesting orderings: (+1)
 │    └── scan xy
 │         ├── columns: x:1(int!null) y:2(int) xy.crdb_internal_mvcc_timestamp:3(decimal)
 │         ├── key: (1)
 │         ├── fd: (1)-->(2,3)
 │         ├── prune: (1-3)
 │         └── interesting orderings: (+1)
 └── project
      ├── columns: u:4(int!null) v:5(int!null) rowid:6(int!null)
      ├── key: (6)
      ├── fd: ()-->(4), (6)-->(5)
      ├── prune: (4-6)
      ├── interesting orderings: (+6)
      └── select
           ├── columns: u:4(int!null) v:5(int!null) rowid:6(int!null) uv.crdb_internal_mvcc_timestamp:7(decimal)
           ├── key: (6)
           ├── fd: ()-->(4), (6)-->(5,7)
           ├── prune: (5-7)
           ├── interesting orderings: (+6)
           ├── scan uv
           │    ├── columns: u:4(int) v:5(int!null) rowid:6(int!null) uv.crdb_internal_mvcc_timestamp:7(decimal)
           │    ├── key: (6)
           │    ├── fd: (6)-->(4,5,7)
           │    ├── prune: (4-7)
           │    └── interesting orderings: (+6)
           └── filters
                └── eq [type=bool, outer=(4), constraints=(/4: [/1 - /1]; tight), fd=()-->(4)]
                     ├── variable: u:4 [type=int]
                     └── const: 1 [type=int]

build
SELECT x, x, y FROM xy EXCEPT SELECT u, v, v FROM (SELECT * FROM uv WHERE u=1) uv
----
except
 ├── columns: x:1(int!null) x:1(int!null) y:2(int)
 ├── left columns: x:1(int!null) x:1(int!null) y:2(int)
 ├── right columns: u:4(int) v:5(int) v:5(int)
 ├── key: (1,2)
 ├── project
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2)
 │    ├── prune: (1,2)
 │    ├── interesting orderings: (+1)
 │    └── scan xy
 │         ├── columns: x:1(int!null) y:2(int) xy.crdb_internal_mvcc_timestamp:3(decimal)
 │         ├── key: (1)
 │         ├── fd: (1)-->(2,3)
 │         ├── prune: (1-3)
 │         └── interesting orderings: (+1)
 └── project
      ├── columns: u:4(int!null) v:5(int!null)
      ├── fd: ()-->(4)
      ├── prune: (4,5)
      └── select
           ├── columns: u:4(int!null) v:5(int!null) rowid:6(int!null) uv.crdb_internal_mvcc_timestamp:7(decimal)
           ├── key: (6)
           ├── fd: ()-->(4), (6)-->(5,7)
           ├── prune: (5-7)
           ├── interesting orderings: (+6)
           ├── scan uv
           │    ├── columns: u:4(int) v:5(int!null) rowid:6(int!null) uv.crdb_internal_mvcc_timestamp:7(decimal)
           │    ├── key: (6)
           │    ├── fd: (6)-->(4,5,7)
           │    ├── prune: (4-7)
           │    └── interesting orderings: (+6)
           └── filters
                └── eq [type=bool, outer=(4), constraints=(/4: [/1 - /1]; tight), fd=()-->(4)]
                     ├── variable: u:4 [type=int]
                     └── const: 1 [type=int]

# Propagate outer columns.
build
SELECT * FROM xy WHERE (SELECT x, u FROM uv UNION SELECT y, v FROM uv) = (1, 2)
----
project
 ├── columns: x:1(int!null) y:2(int)
 ├── immutable
 ├── key: (1)
 ├── fd: (1)-->(2)
 ├── prune: (1,2)
 ├── interesting orderings: (+1)
 └── select
      ├── columns: xy.x:1(int!null) xy.y:2(int) xy.crdb_internal_mvcc_timestamp:3(decimal)
      ├── immutable
      ├── key: (1)
      ├── fd: (1)-->(2,3)
      ├── prune: (3)
      ├── interesting orderings: (+1)
      ├── scan xy
      │    ├── columns: xy.x:1(int!null) xy.y:2(int) xy.crdb_internal_mvcc_timestamp:3(decimal)
      │    ├── key: (1)
      │    ├── fd: (1)-->(2,3)
      │    ├── prune: (1-3)
      │    └── interesting orderings: (+1)
      └── filters
           └── eq [type=bool, outer=(1,2), immutable, correlated-subquery]
                ├── subquery [type=tuple{int, int}]
                │    └── max1-row
                │         ├── columns: column16:16(tuple{int, int})
                │         ├── error: "more than one row returned by a subquery used as an expression"
                │         ├── outer: (1,2)
                │         ├── cardinality: [0 - 1]
                │         ├── key: ()
                │         ├── fd: ()-->(16)
                │         └── project
                │              ├── columns: column16:16(tuple{int, int})
                │              ├── outer: (1,2)
                │              ├── prune: (16)
                │              ├── union
                │              │    ├── columns: x:14(int) u:15(int)
                │              │    ├── left columns: x:8(int) uv.u:4(int)
                │              │    ├── right columns: y:13(int) v:10(int)
                │              │    ├── outer: (1,2)
                │              │    ├── key: (14,15)
                │              │    ├── project
                │              │    │    ├── columns: x:8(int) uv.u:4(int)
                │              │    │    ├── outer: (1)
                │              │    │    ├── fd: ()-->(8)
                │              │    │    ├── prune: (4,8)
                │              │    │    ├── scan uv
                │              │    │    │    ├── columns: uv.u:4(int) v:5(int!null) rowid:6(int!null) uv.crdb_internal_mvcc_timestamp:7(decimal)
                │              │    │    │    ├── key: (6)
                │              │    │    │    ├── fd: (6)-->(4,5,7)
                │              │    │    │    ├── prune: (4-7)
                │              │    │    │    └── interesting orderings: (+6)
                │              │    │    └── projections
                │              │    │         └── variable: xy.x:1 [as=x:8, type=int, outer=(1)]
                │              │    └── project
                │              │         ├── columns: y:13(int) v:10(int!null)
                │              │         ├── outer: (2)
                │              │         ├── fd: ()-->(13)
                │              │         ├── prune: (10,13)
                │              │         ├── scan uv
                │              │         │    ├── columns: uv.u:9(int) v:10(int!null) rowid:11(int!null) uv.crdb_internal_mvcc_timestamp:12(decimal)
                │              │         │    ├── key: (11)
                │              │         │    ├── fd: (11)-->(9,10,12)
                │              │         │    ├── prune: (9-12)
                │              │         │    └── interesting orderings: (+11)
                │              │         └── projections
                │              │              └── variable: xy.y:2 [as=y:13, type=int, outer=(2)]
                │              └── projections
                │                   └── tuple [as=column16:16, type=tuple{int, int}, outer=(14,15)]
                │                        ├── variable: x:14 [type=int]
                │                        └── variable: u:15 [type=int]
                └── tuple [type=tuple{int, int}]
                     ├── const: 1 [type=int]
                     └── const: 2 [type=int]

# Calculate union cardinality.
build
SELECT * FROM (VALUES (1), (2), (3))
UNION ALL
SELECT * FROM (VALUES (4), (5))
UNION
SELECT * FROM (VALUES (6), (7), (8))
----
union
 ├── columns: column1:5(int!null)
 ├── left columns: column1:3(int)
 ├── right columns: column1:4(int)
 ├── cardinality: [1 - 8]
 ├── key: (5)
 ├── union-all
 │    ├── columns: column1:3(int!null)
 │    ├── left columns: column1:1(int)
 │    ├── right columns: column1:2(int)
 │    ├── cardinality: [5 - 5]
 │    ├── prune: (3)
 │    ├── values
 │    │    ├── columns: column1:1(int!null)
 │    │    ├── cardinality: [3 - 3]
 │    │    ├── prune: (1)
 │    │    ├── tuple [type=tuple{int}]
 │    │    │    └── const: 1 [type=int]
 │    │    ├── tuple [type=tuple{int}]
 │    │    │    └── const: 2 [type=int]
 │    │    └── tuple [type=tuple{int}]
 │    │         └── const: 3 [type=int]
 │    └── values
 │         ├── columns: column1:2(int!null)
 │         ├── cardinality: [2 - 2]
 │         ├── prune: (2)
 │         ├── tuple [type=tuple{int}]
 │         │    └── const: 4 [type=int]
 │         └── tuple [type=tuple{int}]
 │              └── const: 5 [type=int]
 └── values
      ├── columns: column1:4(int!null)
      ├── cardinality: [3 - 3]
      ├── prune: (4)
      ├── tuple [type=tuple{int}]
      │    └── const: 6 [type=int]
      ├── tuple [type=tuple{int}]
      │    └── const: 7 [type=int]
      └── tuple [type=tuple{int}]
           └── const: 8 [type=int]

# Calculate intersection cardinality.
build
SELECT * FROM (VALUES (1), (2), (3))
INTERSECT ALL
SELECT * FROM (VALUES (4), (5))
INTERSECT
SELECT * FROM (VALUES (6), (7), (8))
----
intersect
 ├── columns: column1:1(int!null)
 ├── left columns: column1:1(int!null)
 ├── right columns: column1:3(int)
 ├── cardinality: [0 - 2]
 ├── key: (1)
 ├── intersect-all
 │    ├── columns: column1:1(int!null)
 │    ├── left columns: column1:1(int!null)
 │    ├── right columns: column1:2(int)
 │    ├── cardinality: [0 - 2]
 │    ├── values
 │    │    ├── columns: column1:1(int!null)
 │    │    ├── cardinality: [3 - 3]
 │    │    ├── prune: (1)
 │    │    ├── tuple [type=tuple{int}]
 │    │    │    └── const: 1 [type=int]
 │    │    ├── tuple [type=tuple{int}]
 │    │    │    └── const: 2 [type=int]
 │    │    └── tuple [type=tuple{int}]
 │    │         └── const: 3 [type=int]
 │    └── values
 │         ├── columns: column1:2(int!null)
 │         ├── cardinality: [2 - 2]
 │         ├── prune: (2)
 │         ├── tuple [type=tuple{int}]
 │         │    └── const: 4 [type=int]
 │         └── tuple [type=tuple{int}]
 │              └── const: 5 [type=int]
 └── values
      ├── columns: column1:3(int!null)
      ├── cardinality: [3 - 3]
      ├── prune: (3)
      ├── tuple [type=tuple{int}]
      │    └── const: 6 [type=int]
      ├── tuple [type=tuple{int}]
      │    └── const: 7 [type=int]
      └── tuple [type=tuple{int}]
           └── const: 8 [type=int]

# Calculate except cardinality.
build
SELECT * FROM (VALUES (1), (2), (3))
EXCEPT ALL
SELECT * FROM (VALUES (4), (5))
EXCEPT
SELECT * FROM (VALUES (6), (7), (8), (9))
----
except
 ├── columns: column1:1(int!null)
 ├── left columns: column1:1(int!null)
 ├── right columns: column1:3(int)
 ├── cardinality: [0 - 3]
 ├── key: (1)
 ├── except-all
 │    ├── columns: column1:1(int!null)
 │    ├── left columns: column1:1(int!null)
 │    ├── right columns: column1:2(int)
 │    ├── cardinality: [1 - 3]
 │    ├── values
 │    │    ├── columns: column1:1(int!null)
 │    │    ├── cardinality: [3 - 3]
 │    │    ├── prune: (1)
 │    │    ├── tuple [type=tuple{int}]
 │    │    │    └── const: 1 [type=int]
 │    │    ├── tuple [type=tuple{int}]
 │    │    │    └── const: 2 [type=int]
 │    │    └── tuple [type=tuple{int}]
 │    │         └── const: 3 [type=int]
 │    └── values
 │         ├── columns: column1:2(int!null)
 │         ├── cardinality: [2 - 2]
 │         ├── prune: (2)
 │         ├── tuple [type=tuple{int}]
 │         │    └── const: 4 [type=int]
 │         └── tuple [type=tuple{int}]
 │              └── const: 5 [type=int]
 └── values
      ├── columns: column1:3(int!null)
      ├── cardinality: [4 - 4]
      ├── prune: (3)
      ├── tuple [type=tuple{int}]
      │    └── const: 6 [type=int]
      ├── tuple [type=tuple{int}]
      │    └── const: 7 [type=int]
      ├── tuple [type=tuple{int}]
      │    └── const: 8 [type=int]
      └── tuple [type=tuple{int}]
           └── const: 9 [type=int]

# FDs include equivalencies for columns that have equivalencies in both the left
# and right inputs.
norm
SELECT a, b, c FROM abc WHERE a > 0 AND a = c
UNION
SELECT a, b, c FROM abc WHERE a > 10 AND a = c
----
union
 ├── columns: a:9(int!null) b:10(int) c:11(int!null)
 ├── left columns: abc.a:1(int) abc.b:2(int) abc.c:3(int)
 ├── right columns: abc.a:5(int) abc.b:6(int) abc.c:7(int)
 ├── key: (10,11)
 ├── fd: (9)==(11), (11)==(9)
 ├── select
 │    ├── columns: abc.a:1(int!null) abc.b:2(int) abc.c:3(int!null)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2), (1)==(3), (3)==(1)
 │    ├── prune: (2)
 │    ├── interesting orderings: (+1)
 │    ├── scan abc
 │    │    ├── columns: abc.a:1(int!null) abc.b:2(int) abc.c:3(int)
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2,3)
 │    │    ├── prune: (1-3)
 │    │    └── interesting orderings: (+1)
 │    └── filters
 │         ├── gt [type=bool, outer=(1), constraints=(/1: [/1 - ]; tight)]
 │         │    ├── variable: abc.a:1 [type=int]
 │         │    └── const: 0 [type=int]
 │         └── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 │              ├── variable: abc.a:1 [type=int]
 │              └── variable: abc.c:3 [type=int]
 └── select
      ├── columns: abc.a:5(int!null) abc.b:6(int) abc.c:7(int!null)
      ├── key: (5)
      ├── fd: (5)-->(6), (5)==(7), (7)==(5)
      ├── prune: (6)
      ├── interesting orderings: (+5)
      ├── scan abc
      │    ├── columns: abc.a:5(int!null) abc.b:6(int) abc.c:7(int)
      │    ├── key: (5)
      │    ├── fd: (5)-->(6,7)
      │    ├── prune: (5-7)
      │    └── interesting orderings: (+5)
      └── filters
           ├── gt [type=bool, outer=(5), constraints=(/5: [/11 - ]; tight)]
           │    ├── variable: abc.a:5 [type=int]
           │    └── const: 10 [type=int]
           └── eq [type=bool, outer=(5,7), constraints=(/5: (/NULL - ]; /7: (/NULL - ]), fd=(5)==(7), (7)==(5)]
                ├── variable: abc.a:5 [type=int]
                └── variable: abc.c:7 [type=int]

# Do not include equivalencies from only the left or right input.
norm
SELECT a, b, c FROM abc WHERE a > 0 AND a = c
UNION
SELECT a, b, c FROM abc WHERE a > 10 AND a = b
----
union
 ├── columns: a:9(int!null) b:10(int) c:11(int)
 ├── left columns: abc.a:1(int) abc.b:2(int) abc.c:3(int)
 ├── right columns: abc.a:5(int) abc.b:6(int) abc.c:7(int)
 ├── key: (9-11)
 ├── select
 │    ├── columns: abc.a:1(int!null) abc.b:2(int) abc.c:3(int!null)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2), (1)==(3), (3)==(1)
 │    ├── prune: (2)
 │    ├── interesting orderings: (+1)
 │    ├── scan abc
 │    │    ├── columns: abc.a:1(int!null) abc.b:2(int) abc.c:3(int)
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2,3)
 │    │    ├── prune: (1-3)
 │    │    └── interesting orderings: (+1)
 │    └── filters
 │         ├── gt [type=bool, outer=(1), constraints=(/1: [/1 - ]; tight)]
 │         │    ├── variable: abc.a:1 [type=int]
 │         │    └── const: 0 [type=int]
 │         └── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 │              ├── variable: abc.a:1 [type=int]
 │              └── variable: abc.c:3 [type=int]
 └── select
      ├── columns: abc.a:5(int!null) abc.b:6(int!null) abc.c:7(int)
      ├── key: (5)
      ├── fd: (5)-->(7), (5)==(6), (6)==(5)
      ├── prune: (7)
      ├── interesting orderings: (+5)
      ├── scan abc
      │    ├── columns: abc.a:5(int!null) abc.b:6(int) abc.c:7(int)
      │    ├── key: (5)
      │    ├── fd: (5)-->(6,7)
      │    ├── prune: (5-7)
      │    └── interesting orderings: (+5)
      └── filters
           ├── gt [type=bool, outer=(5), constraints=(/5: [/11 - ]; tight)]
           │    ├── variable: abc.a:5 [type=int]
           │    └── const: 10 [type=int]
           └── eq [type=bool, outer=(5,6), constraints=(/5: (/NULL - ]; /6: (/NULL - ]), fd=(5)==(6), (6)==(5)]
                ├── variable: abc.a:5 [type=int]
                └── variable: abc.b:6 [type=int]

# Intersect FDs include equivalencies for columns that have equivalencies in the
# left input.
norm
SELECT a, b, c FROM abc WHERE a > 0 AND a = c
INTERSECT
SELECT a, b, c FROM abc WHERE a > 10 AND a = b
----
intersect
 ├── columns: a:1(int!null) b:2(int) c:3(int)
 ├── left columns: a:1(int!null) b:2(int) c:3(int)
 ├── right columns: a:5(int) b:6(int) c:7(int)
 ├── key: (2,3)
 ├── fd: (1)==(3), (3)==(1)
 ├── select
 │    ├── columns: a:1(int!null) b:2(int) c:3(int!null)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2), (1)==(3), (3)==(1)
 │    ├── prune: (2)
 │    ├── interesting orderings: (+1)
 │    ├── scan abc
 │    │    ├── columns: a:1(int!null) b:2(int) c:3(int)
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2,3)
 │    │    ├── prune: (1-3)
 │    │    └── interesting orderings: (+1)
 │    └── filters
 │         ├── gt [type=bool, outer=(1), constraints=(/1: [/1 - ]; tight)]
 │         │    ├── variable: a:1 [type=int]
 │         │    └── const: 0 [type=int]
 │         └── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 │              ├── variable: a:1 [type=int]
 │              └── variable: c:3 [type=int]
 └── select
      ├── columns: a:5(int!null) b:6(int!null) c:7(int)
      ├── key: (5)
      ├── fd: (5)-->(7), (5)==(6), (6)==(5)
      ├── prune: (7)
      ├── interesting orderings: (+5)
      ├── scan abc
      │    ├── columns: a:5(int!null) b:6(int) c:7(int)
      │    ├── key: (5)
      │    ├── fd: (5)-->(6,7)
      │    ├── prune: (5-7)
      │    └── interesting orderings: (+5)
      └── filters
           ├── gt [type=bool, outer=(5), constraints=(/5: [/11 - ]; tight)]
           │    ├── variable: a:5 [type=int]
           │    └── const: 10 [type=int]
           └── eq [type=bool, outer=(5,6), constraints=(/5: (/NULL - ]; /6: (/NULL - ]), fd=(5)==(6), (6)==(5)]
                ├── variable: a:5 [type=int]
                └── variable: b:6 [type=int]

# Except FDs include equivalencies for columns that have equivalencies in the
# left input.
norm
SELECT a, b, c FROM abc WHERE a > 0 AND a = c
EXCEPT
SELECT a, b, c FROM abc WHERE a > 10 AND a = b
----
except
 ├── columns: a:1(int!null) b:2(int) c:3(int)
 ├── left columns: a:1(int!null) b:2(int) c:3(int)
 ├── right columns: a:5(int) b:6(int) c:7(int)
 ├── key: (2,3)
 ├── fd: (1)==(3), (3)==(1)
 ├── select
 │    ├── columns: a:1(int!null) b:2(int) c:3(int!null)
 │    ├── key: (1)
 │    ├── fd: (1)-->(2), (1)==(3), (3)==(1)
 │    ├── prune: (2)
 │    ├── interesting orderings: (+1)
 │    ├── scan abc
 │    │    ├── columns: a:1(int!null) b:2(int) c:3(int)
 │    │    ├── key: (1)
 │    │    ├── fd: (1)-->(2,3)
 │    │    ├── prune: (1-3)
 │    │    └── interesting orderings: (+1)
 │    └── filters
 │         ├── gt [type=bool, outer=(1), constraints=(/1: [/1 - ]; tight)]
 │         │    ├── variable: a:1 [type=int]
 │         │    └── const: 0 [type=int]
 │         └── eq [type=bool, outer=(1,3), constraints=(/1: (/NULL - ]; /3: (/NULL - ]), fd=(1)==(3), (3)==(1)]
 │              ├── variable: a:1 [type=int]
 │              └── variable: c:3 [type=int]
 └── select
      ├── columns: a:5(int!null) b:6(int!null) c:7(int)
      ├── key: (5)
      ├── fd: (5)-->(7), (5)==(6), (6)==(5)
      ├── prune: (7)
      ├── interesting orderings: (+5)
      ├── scan abc
      │    ├── columns: a:5(int!null) b:6(int) c:7(int)
      │    ├── key: (5)
      │    ├── fd: (5)-->(6,7)
      │    ├── prune: (5-7)
      │    └── interesting orderings: (+5)
      └── filters
           ├── gt [type=bool, outer=(5), constraints=(/5: [/11 - ]; tight)]
           │    ├── variable: a:5 [type=int]
           │    └── const: 10 [type=int]
           └── eq [type=bool, outer=(5,6), constraints=(/5: (/NULL - ]; /6: (/NULL - ]), fd=(5)==(6), (6)==(5)]
                ├── variable: a:5 [type=int]
                └── variable: b:6 [type=int]
