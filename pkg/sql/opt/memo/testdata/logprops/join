exec-ddl
CREATE TABLE xysd (x INT PRIMARY KEY, y INT, s STRING, d DECIMAL NOT NULL, UNIQUE (s DESC, d))
----
TABLE xysd
 ├── x int not null
 ├── y int
 ├── s string
 ├── d decimal not null
 ├── INDEX primary
 │    └── x int not null
 └── INDEX secondary
      ├── s string desc
      ├── d decimal not null
      └── x int not null (storing)

exec-ddl
CREATE TABLE uv (u INT, v INT NOT NULL)
----
TABLE uv
 ├── u int
 ├── v int not null
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

# Inner-join.
build
SELECT *, rowid FROM xysd INNER JOIN uv ON x=u
----
inner-join
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) u:5(int) v:6(int!null) rowid:7(int!null)
 ├── stats: [rows=100000]
 ├── scan xysd
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 ├── scan uv
 │    ├── columns: u:5(int) v:6(int!null) rowid:7(int!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (7)
 └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      └── eq [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
           ├── variable: xysd.x [type=int, outer=(1)]
           └── variable: uv.u [type=int, outer=(5)]

# Inner-join-apply.
opt
SELECT (SELECT (VALUES (x), (y))) FROM xysd
----
project
 ├── columns: "(SELECT (VALUES (x), (y)))":7(int)
 ├── stats: [rows=1000]
 ├── inner-join-apply
 │    ├── columns: x:1(int!null) y:2(int) column1:5(int)
 │    ├── stats: [rows=1000]
 │    ├── keys: (1)
 │    ├── scan xysd
 │    │    ├── columns: x:1(int!null) y:2(int)
 │    │    ├── stats: [rows=1000]
 │    │    └── keys: (1)
 │    ├── max1-row
 │    │    ├── columns: column1:5(int)
 │    │    ├── outer: (1,2)
 │    │    ├── cardinality: [1 - 1]
 │    │    ├── stats: [rows=1]
 │    │    └── values
 │    │         ├── columns: column1:5(int)
 │    │         ├── outer: (1,2)
 │    │         ├── cardinality: [2 - 2]
 │    │         ├── stats: [rows=2]
 │    │         ├── tuple [type=tuple{int}, outer=(1)]
 │    │         │    └── variable: xysd.x [type=int, outer=(1)]
 │    │         └── tuple [type=tuple{int}, outer=(2)]
 │    │              └── variable: xysd.y [type=int, outer=(2)]
 │    └── true [type=bool]
 └── projections [outer=(5)]
      └── variable: column1 [type=int, outer=(5)]

# Left-join.
build
SELECT *, rowid FROM xysd LEFT JOIN uv ON x=u
----
left-join
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) u:5(int) v:6(int) rowid:7(int)
 ├── stats: [rows=100000]
 ├── scan xysd
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 ├── scan uv
 │    ├── columns: u:5(int) v:6(int!null) rowid:7(int!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (7)
 └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      └── eq [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
           ├── variable: xysd.x [type=int, outer=(1)]
           └── variable: uv.u [type=int, outer=(5)]

# Left-join-apply.
opt
SELECT * FROM xysd WHERE (SELECT u FROM uv WHERE u=x)=10
----
project
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 ├── stats: [rows=1000]
 ├── keys: (1) weak(3,4)
 └── select
      ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) u:5(int!null)
      ├── stats: [rows=1000, distinct(5)=1]
      ├── keys: (1) weak(3,4)
      ├── left-join-apply
      │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) u:5(int)
      │    ├── stats: [rows=1000, distinct(5)=1]
      │    ├── keys: (1) weak(3,4)
      │    ├── scan xysd
      │    │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
      │    │    ├── stats: [rows=1000]
      │    │    └── keys: (1) weak(3,4)
      │    ├── max1-row
      │    │    ├── columns: u:5(int!null)
      │    │    ├── outer: (1)
      │    │    ├── cardinality: [0 - 1]
      │    │    ├── stats: [rows=1, distinct(5)=1]
      │    │    └── select
      │    │         ├── columns: u:5(int!null)
      │    │         ├── outer: (1)
      │    │         ├── stats: [rows=111]
      │    │         ├── scan uv
      │    │         │    ├── columns: u:5(int)
      │    │         │    └── stats: [rows=1000]
      │    │         └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      │    │              └── eq [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      │    │                   ├── variable: uv.u [type=int, outer=(5)]
      │    │                   └── variable: xysd.x [type=int, outer=(1)]
      │    └── true [type=bool]
      └── filters [type=bool, outer=(5), constraints=(/5: [/10 - /10]; tight)]
           └── eq [type=bool, outer=(5), constraints=(/5: [/10 - /10]; tight)]
                ├── variable: uv.u [type=int, outer=(5)]
                └── const: 10 [type=int]

# Right-join.
build
SELECT *, rowid FROM xysd RIGHT JOIN uv ON x=u
----
right-join
 ├── columns: x:1(int) y:2(int) s:3(string) d:4(decimal) u:5(int) v:6(int!null) rowid:7(int!null)
 ├── stats: [rows=100000]
 ├── scan xysd
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 ├── scan uv
 │    ├── columns: u:5(int) v:6(int!null) rowid:7(int!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (7)
 └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      └── eq [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
           ├── variable: xysd.x [type=int, outer=(1)]
           └── variable: uv.u [type=int, outer=(5)]

# Right-join-apply.
opt
SELECT * FROM xysd RIGHT JOIN uv ON (SELECT u FROM uv WHERE u=x OFFSET 1) IS NULL
----
right-join
 ├── columns: x:1(int) y:2(int) s:3(string) d:4(decimal) u:5(int) v:6(int!null)
 ├── stats: [rows=1000000]
 ├── project
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 │    ├── stats: [rows=1000]
 │    ├── keys: (1) weak(3,4)
 │    └── select
 │         ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) uv.u:8(int)
 │         ├── stats: [rows=1000, distinct(8)=1]
 │         ├── keys: (1) weak(3,4)
 │         ├── left-join-apply
 │         │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) uv.u:8(int)
 │         │    ├── stats: [rows=1000, distinct(8)=1]
 │         │    ├── keys: (1) weak(3,4)
 │         │    ├── scan xysd
 │         │    │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 │         │    │    ├── stats: [rows=1000]
 │         │    │    └── keys: (1) weak(3,4)
 │         │    ├── max1-row
 │         │    │    ├── columns: uv.u:8(int!null)
 │         │    │    ├── outer: (1)
 │         │    │    ├── cardinality: [0 - 1]
 │         │    │    ├── stats: [rows=1, distinct(8)=1]
 │         │    │    └── offset
 │         │    │         ├── columns: uv.u:8(int!null)
 │         │    │         ├── outer: (1)
 │         │    │         ├── stats: [rows=110]
 │         │    │         ├── select
 │         │    │         │    ├── columns: uv.u:8(int!null)
 │         │    │         │    ├── outer: (1)
 │         │    │         │    ├── stats: [rows=111]
 │         │    │         │    ├── scan uv
 │         │    │         │    │    ├── columns: uv.u:8(int)
 │         │    │         │    │    └── stats: [rows=1000]
 │         │    │         │    └── filters [type=bool, outer=(1,8), constraints=(/1: (/NULL - ]; /8: (/NULL - ])]
 │         │    │         │         └── eq [type=bool, outer=(1,8), constraints=(/1: (/NULL - ]; /8: (/NULL - ])]
 │         │    │         │              ├── variable: uv.u [type=int, outer=(8)]
 │         │    │         │              └── variable: xysd.x [type=int, outer=(1)]
 │         │    │         └── const: 1 [type=int]
 │         │    └── true [type=bool]
 │         └── filters [type=bool, outer=(8), constraints=(/8: [/NULL - /NULL]; tight)]
 │              └── is [type=bool, outer=(8), constraints=(/8: [/NULL - /NULL]; tight)]
 │                   ├── variable: uv.u [type=int, outer=(8)]
 │                   └── null [type=unknown]
 ├── scan uv
 │    ├── columns: uv.u:5(int) uv.v:6(int!null)
 │    └── stats: [rows=1000]
 └── true [type=bool]

# Full-join.
build
SELECT *, rowid FROM xysd FULL JOIN uv ON x=u
----
full-join
 ├── columns: x:1(int) y:2(int) s:3(string) d:4(decimal) u:5(int) v:6(int) rowid:7(int)
 ├── stats: [rows=100000]
 ├── scan xysd
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 ├── scan uv
 │    ├── columns: u:5(int) v:6(int!null) rowid:7(int!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (7)
 └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      └── eq [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
           ├── variable: xysd.x [type=int, outer=(1)]
           └── variable: uv.u [type=int, outer=(5)]

# Full-join-apply.
opt
SELECT * FROM xysd FULL JOIN uv ON (SELECT u FROM uv WHERE u=x OFFSET 1) IS NULL
----
project
 ├── columns: x:1(int) y:2(int) s:3(string) d:4(decimal) u:5(int) v:6(int)
 ├── stats: [rows=100000]
 └── full-join-apply
      ├── columns: x:1(int) y:2(int) s:3(string) d:4(decimal) uv.u:5(int) uv.v:6(int) uv.u:8(int)
      ├── stats: [rows=100000]
      ├── scan xysd
      │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
      │    ├── stats: [rows=1000]
      │    └── keys: (1) weak(3,4)
      ├── left-join
      │    ├── columns: uv.u:5(int) uv.v:6(int!null) uv.u:8(int)
      │    ├── outer: (1)
      │    ├── stats: [rows=1000]
      │    ├── scan uv
      │    │    ├── columns: uv.u:5(int) uv.v:6(int!null)
      │    │    └── stats: [rows=1000]
      │    ├── max1-row
      │    │    ├── columns: uv.u:8(int!null)
      │    │    ├── outer: (1)
      │    │    ├── cardinality: [0 - 1]
      │    │    ├── stats: [rows=1]
      │    │    └── offset
      │    │         ├── columns: uv.u:8(int!null)
      │    │         ├── outer: (1)
      │    │         ├── stats: [rows=110]
      │    │         ├── select
      │    │         │    ├── columns: uv.u:8(int!null)
      │    │         │    ├── outer: (1)
      │    │         │    ├── stats: [rows=111]
      │    │         │    ├── scan uv
      │    │         │    │    ├── columns: uv.u:8(int)
      │    │         │    │    └── stats: [rows=1000]
      │    │         │    └── filters [type=bool, outer=(1,8), constraints=(/1: (/NULL - ]; /8: (/NULL - ])]
      │    │         │         └── eq [type=bool, outer=(1,8), constraints=(/1: (/NULL - ]; /8: (/NULL - ])]
      │    │         │              ├── variable: uv.u [type=int, outer=(8)]
      │    │         │              └── variable: xysd.x [type=int, outer=(1)]
      │    │         └── const: 1 [type=int]
      │    └── true [type=bool]
      └── filters [type=bool, outer=(8), constraints=(/8: [/NULL - /NULL]; tight)]
           └── is [type=bool, outer=(8), constraints=(/8: [/NULL - /NULL]; tight)]
                ├── variable: uv.u [type=int, outer=(8)]
                └── null [type=unknown]

# Semi-join.
opt
SELECT * FROM xysd WHERE EXISTS(SELECT * FROM uv WHERE x=u)
----
semi-join
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 ├── stats: [rows=100000]
 ├── keys: (1) weak(3,4)
 ├── scan xysd
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 ├── scan uv
 │    ├── columns: u:5(int) v:6(int!null)
 │    └── stats: [rows=1000]
 └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      └── eq [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
           ├── variable: xysd.x [type=int, outer=(1)]
           └── variable: uv.u [type=int, outer=(5)]

# Semi-join-apply.
opt
SELECT * FROM xysd WHERE EXISTS(SELECT * FROM uv WHERE v=x OFFSET 1)
----
semi-join-apply
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 ├── stats: [rows=110000]
 ├── keys: (1) weak(3,4)
 ├── scan xysd
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 ├── offset
 │    ├── columns: u:5(int) v:6(int!null)
 │    ├── outer: (1)
 │    ├── stats: [rows=110]
 │    ├── select
 │    │    ├── columns: u:5(int) v:6(int!null)
 │    │    ├── outer: (1)
 │    │    ├── stats: [rows=111]
 │    │    ├── scan uv
 │    │    │    ├── columns: u:5(int) v:6(int!null)
 │    │    │    └── stats: [rows=1000]
 │    │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │         └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │              ├── variable: uv.v [type=int, outer=(6)]
 │    │              └── variable: xysd.x [type=int, outer=(1)]
 │    └── const: 1 [type=int]
 └── true [type=bool]

# Anti-join.
opt
SELECT * FROM xysd WHERE NOT EXISTS(SELECT * FROM uv WHERE x=u)
----
anti-join
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 ├── stats: [rows=100000]
 ├── keys: (1) weak(3,4)
 ├── scan xysd
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 ├── scan uv
 │    ├── columns: u:5(int) v:6(int!null)
 │    └── stats: [rows=1000]
 └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
      └── eq [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
           ├── variable: xysd.x [type=int, outer=(1)]
           └── variable: uv.u [type=int, outer=(5)]

# Anti-join-apply.
opt
SELECT * FROM xysd WHERE NOT EXISTS(SELECT * FROM uv WHERE v=x OFFSET 1)
----
anti-join-apply
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 ├── stats: [rows=110000]
 ├── keys: (1) weak(3,4)
 ├── scan xysd
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 ├── offset
 │    ├── columns: u:5(int) v:6(int!null)
 │    ├── outer: (1)
 │    ├── stats: [rows=110]
 │    ├── select
 │    │    ├── columns: u:5(int) v:6(int!null)
 │    │    ├── outer: (1)
 │    │    ├── stats: [rows=111]
 │    │    ├── scan uv
 │    │    │    ├── columns: u:5(int) v:6(int!null)
 │    │    │    └── stats: [rows=1000]
 │    │    └── filters [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │         └── eq [type=bool, outer=(1,6), constraints=(/1: (/NULL - ]; /6: (/NULL - ])]
 │    │              ├── variable: uv.v [type=int, outer=(6)]
 │    │              └── variable: xysd.x [type=int, outer=(1)]
 │    └── const: 1 [type=int]
 └── true [type=bool]

# Cross-join.
build
SELECT * FROM xysd, uv
----
project
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) u:5(int) v:6(int!null)
 ├── stats: [rows=1000000]
 └── inner-join
      ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) u:5(int) v:6(int!null) rowid:7(int!null)
      ├── stats: [rows=1000000]
      ├── scan xysd
      │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
      │    ├── stats: [rows=1000]
      │    └── keys: (1) weak(3,4)
      ├── scan uv
      │    ├── columns: u:5(int) v:6(int!null) rowid:7(int!null)
      │    ├── stats: [rows=1000]
      │    └── keys: (7)
      └── true [type=bool]

# Self-join.
build
SELECT * FROM xysd, xysd AS xysd
----
inner-join
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null) x:5(int!null) y:6(int) s:7(string) d:8(decimal!null)
 ├── stats: [rows=1000000]
 ├── scan xysd
 │    ├── columns: xysd.x:1(int!null) xysd.y:2(int) xysd.s:3(string) xysd.d:4(decimal!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 ├── scan xysd
 │    ├── columns: xysd.x:5(int!null) xysd.y:6(int) xysd.s:7(string) xysd.d:8(decimal!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (5) weak(7,8)
 └── true [type=bool]

# Propagate outer columns.
build
SELECT * FROM xysd WHERE EXISTS(SELECT * FROM (SELECT x) INNER JOIN (SELECT y) ON x::string = s)
----
select
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 ├── stats: [rows=333]
 ├── keys: (1) weak(3,4)
 ├── scan xysd
 │    ├── columns: xysd.x:1(int!null) xysd.y:2(int) s:3(string) d:4(decimal!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 └── filters [type=bool, outer=(1-3)]
      └── exists [type=bool, outer=(1-3)]
           └── inner-join
                ├── columns: x:5(int) y:6(int)
                ├── outer: (1-3)
                ├── cardinality: [0 - 1]
                ├── stats: [rows=0]
                ├── project
                │    ├── columns: x:5(int)
                │    ├── outer: (1)
                │    ├── cardinality: [1 - 1]
                │    ├── stats: [rows=1]
                │    ├── values
                │    │    ├── cardinality: [1 - 1]
                │    │    ├── stats: [rows=1]
                │    │    └── tuple [type=tuple{}]
                │    └── projections [outer=(1)]
                │         └── variable: xysd.x [type=int, outer=(1)]
                ├── project
                │    ├── columns: y:6(int)
                │    ├── outer: (2)
                │    ├── cardinality: [1 - 1]
                │    ├── stats: [rows=1]
                │    ├── values
                │    │    ├── cardinality: [1 - 1]
                │    │    ├── stats: [rows=1]
                │    │    └── tuple [type=tuple{}]
                │    └── projections [outer=(2)]
                │         └── variable: xysd.y [type=int, outer=(2)]
                └── filters [type=bool, outer=(3,5)]
                     └── eq [type=bool, outer=(3,5)]
                          ├── cast: STRING [type=string, outer=(5)]
                          │    └── variable: x [type=int, outer=(5)]
                          └── variable: xysd.s [type=string, outer=(3)]

# Calculate semi-join cardinality when left side has non-zero cardinality.
opt
SELECT * FROM (SELECT COUNT(*) cnt FROM xysd) WHERE EXISTS(SELECT * FROM uv WHERE cnt=1)
----
semi-join
 ├── columns: cnt:5(int!null)
 ├── cardinality: [0 - 1]
 ├── stats: [rows=1000]
 ├── select
 │    ├── columns: cnt:5(int!null)
 │    ├── cardinality: [0 - 1]
 │    ├── stats: [rows=1, distinct(5)=1]
 │    ├── group-by
 │    │    ├── columns: cnt:5(int)
 │    │    ├── cardinality: [1 - 1]
 │    │    ├── stats: [rows=1, distinct(5)=1]
 │    │    ├── scan xysd
 │    │    │    └── stats: [rows=1000]
 │    │    └── aggregations
 │    │         └── count-rows [type=int]
 │    └── filters [type=bool, outer=(5), constraints=(/5: [/1 - /1]; tight)]
 │         └── eq [type=bool, outer=(5), constraints=(/5: [/1 - /1]; tight)]
 │              ├── variable: cnt [type=int, outer=(5)]
 │              └── const: 1 [type=int]
 ├── scan uv
 │    ├── columns: u:6(int) v:7(int!null)
 │    └── stats: [rows=1000, distinct(5)=700]
 └── true [type=bool]

# Calculate semi-join-apply cardinality.
opt
SELECT * FROM (SELECT * FROM xysd LIMIT 10) WHERE EXISTS(SELECT * FROM uv WHERE x=u LIMIT 5)
----
semi-join-apply
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 ├── cardinality: [0 - 10]
 ├── stats: [rows=50]
 ├── keys: (1) weak(3,4)
 ├── scan xysd
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 │    ├── limit: 10
 │    ├── stats: [rows=10]
 │    └── keys: (1) weak(3,4)
 ├── limit
 │    ├── columns: u:5(int!null) v:6(int!null)
 │    ├── outer: (1)
 │    ├── cardinality: [0 - 5]
 │    ├── stats: [rows=5]
 │    ├── select
 │    │    ├── columns: u:5(int!null) v:6(int!null)
 │    │    ├── outer: (1)
 │    │    ├── stats: [rows=111]
 │    │    ├── scan uv
 │    │    │    ├── columns: u:5(int) v:6(int!null)
 │    │    │    └── stats: [rows=1000]
 │    │    └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
 │    │         └── eq [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
 │    │              ├── variable: xysd.x [type=int, outer=(1)]
 │    │              └── variable: uv.u [type=int, outer=(5)]
 │    └── const: 5 [type=int]
 └── true [type=bool]

# Calculate anti-join cardinality when left side has non-zero cardinality.
opt
SELECT * FROM (SELECT * FROM (VALUES (1))) WHERE NOT EXISTS(SELECT * FROM uv WHERE u=column1)
----
anti-join
 ├── columns: column1:1(int)
 ├── cardinality: [0 - 1]
 ├── stats: [rows=100]
 ├── values
 │    ├── columns: column1:1(int)
 │    ├── cardinality: [1 - 1]
 │    ├── stats: [rows=1]
 │    └── tuple [type=tuple{int}]
 │         └── const: 1 [type=int]
 ├── scan uv
 │    ├── columns: u:2(int) v:3(int!null)
 │    └── stats: [rows=1000]
 └── filters [type=bool, outer=(1,2), constraints=(/1: (/NULL - ]; /2: (/NULL - ])]
      └── eq [type=bool, outer=(1,2), constraints=(/1: (/NULL - ]; /2: (/NULL - ])]
           ├── variable: uv.u [type=int, outer=(2)]
           └── variable: column1 [type=int, outer=(1)]

# Calculate anti-join-apply cardinality.
opt
SELECT * FROM (SELECT * FROM xysd LIMIT 10) WHERE NOT EXISTS(SELECT * FROM uv WHERE x=u LIMIT 5)
----
anti-join-apply
 ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 ├── cardinality: [0 - 10]
 ├── stats: [rows=50]
 ├── keys: (1) weak(3,4)
 ├── scan xysd
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 │    ├── limit: 10
 │    ├── stats: [rows=10]
 │    └── keys: (1) weak(3,4)
 ├── limit
 │    ├── columns: u:5(int!null) v:6(int!null)
 │    ├── outer: (1)
 │    ├── cardinality: [0 - 5]
 │    ├── stats: [rows=5]
 │    ├── select
 │    │    ├── columns: u:5(int!null) v:6(int!null)
 │    │    ├── outer: (1)
 │    │    ├── stats: [rows=111]
 │    │    ├── scan uv
 │    │    │    ├── columns: u:5(int) v:6(int!null)
 │    │    │    └── stats: [rows=1000]
 │    │    └── filters [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
 │    │         └── eq [type=bool, outer=(1,5), constraints=(/1: (/NULL - ]; /5: (/NULL - ])]
 │    │              ├── variable: xysd.x [type=int, outer=(1)]
 │    │              └── variable: uv.u [type=int, outer=(5)]
 │    └── const: 5 [type=int]
 └── true [type=bool]

# Calculate inner-join cardinality.
build
SELECT * FROM (VALUES (1), (2)) INNER JOIN (SELECT * FROM uv LIMIT 2) ON True
----
inner-join
 ├── columns: column1:1(int) u:2(int) v:3(int!null)
 ├── cardinality: [0 - 4]
 ├── stats: [rows=0]
 ├── values
 │    ├── columns: column1:1(int)
 │    ├── cardinality: [2 - 2]
 │    ├── stats: [rows=2]
 │    ├── tuple [type=tuple{int}]
 │    │    └── const: 1 [type=int]
 │    └── tuple [type=tuple{int}]
 │         └── const: 2 [type=int]
 ├── limit
 │    ├── columns: u:2(int) v:3(int!null)
 │    ├── cardinality: [0 - 2]
 │    ├── stats: [rows=2]
 │    ├── project
 │    │    ├── columns: u:2(int) v:3(int!null)
 │    │    ├── stats: [rows=1000]
 │    │    └── scan uv
 │    │         ├── columns: u:2(int) v:3(int!null) rowid:4(int!null)
 │    │         ├── stats: [rows=1000]
 │    │         └── keys: (4)
 │    └── const: 2 [type=int]
 └── filters [type=bool]
      └── true [type=bool]

# Calculate left-join cardinality.
build
SELECT * FROM (VALUES (1), (2), (3)) LEFT JOIN (SELECT * FROM uv LIMIT 2) ON True
----
left-join
 ├── columns: column1:1(int) u:2(int) v:3(int)
 ├── cardinality: [0 - 6]
 ├── stats: [rows=0]
 ├── values
 │    ├── columns: column1:1(int)
 │    ├── cardinality: [3 - 3]
 │    ├── stats: [rows=3]
 │    ├── tuple [type=tuple{int}]
 │    │    └── const: 1 [type=int]
 │    ├── tuple [type=tuple{int}]
 │    │    └── const: 2 [type=int]
 │    └── tuple [type=tuple{int}]
 │         └── const: 3 [type=int]
 ├── limit
 │    ├── columns: u:2(int) v:3(int!null)
 │    ├── cardinality: [0 - 2]
 │    ├── stats: [rows=2]
 │    ├── project
 │    │    ├── columns: u:2(int) v:3(int!null)
 │    │    ├── stats: [rows=1000]
 │    │    └── scan uv
 │    │         ├── columns: u:2(int) v:3(int!null) rowid:4(int!null)
 │    │         ├── stats: [rows=1000]
 │    │         └── keys: (4)
 │    └── const: 2 [type=int]
 └── filters [type=bool]
      └── true [type=bool]

# Calculate right-join cardinality.
build
SELECT * FROM (SELECT * FROM uv LIMIT 2) RIGHT JOIN (VALUES (1), (2), (3)) ON True
----
right-join
 ├── columns: u:1(int) v:2(int) column1:4(int)
 ├── cardinality: [0 - 6]
 ├── stats: [rows=0]
 ├── limit
 │    ├── columns: u:1(int) v:2(int!null)
 │    ├── cardinality: [0 - 2]
 │    ├── stats: [rows=2]
 │    ├── project
 │    │    ├── columns: u:1(int) v:2(int!null)
 │    │    ├── stats: [rows=1000]
 │    │    └── scan uv
 │    │         ├── columns: u:1(int) v:2(int!null) rowid:3(int!null)
 │    │         ├── stats: [rows=1000]
 │    │         └── keys: (3)
 │    └── const: 2 [type=int]
 ├── values
 │    ├── columns: column1:4(int)
 │    ├── cardinality: [3 - 3]
 │    ├── stats: [rows=3]
 │    ├── tuple [type=tuple{int}]
 │    │    └── const: 1 [type=int]
 │    ├── tuple [type=tuple{int}]
 │    │    └── const: 2 [type=int]
 │    └── tuple [type=tuple{int}]
 │         └── const: 3 [type=int]
 └── filters [type=bool]
      └── true [type=bool]

# Calculate full-join cardinality.
build
SELECT * FROM (VALUES (NULL), (NULL)) a FULL JOIN (VALUES (NULL), (NULL)) b ON True
----
full-join
 ├── columns: column1:1(unknown) column1:2(unknown)
 ├── cardinality: [0 - 4]
 ├── stats: [rows=0]
 ├── values
 │    ├── columns: column1:1(unknown)
 │    ├── cardinality: [2 - 2]
 │    ├── stats: [rows=2]
 │    ├── tuple [type=tuple{unknown}]
 │    │    └── null [type=unknown]
 │    └── tuple [type=tuple{unknown}]
 │         └── null [type=unknown]
 ├── values
 │    ├── columns: column1:2(unknown)
 │    ├── cardinality: [2 - 2]
 │    ├── stats: [rows=2]
 │    ├── tuple [type=tuple{unknown}]
 │    │    └── null [type=unknown]
 │    └── tuple [type=tuple{unknown}]
 │         └── null [type=unknown]
 └── filters [type=bool]
      └── true [type=bool]

# Calculate full-join cardinality with filter.
build
SELECT * FROM (VALUES (NULL), (NULL)) a FULL JOIN (VALUES (NULL), (NULL)) b ON a.column1=b.column1
----
full-join
 ├── columns: column1:1(unknown) column1:2(unknown)
 ├── cardinality: [0 - 4]
 ├── stats: [rows=0]
 ├── values
 │    ├── columns: column1:1(unknown)
 │    ├── cardinality: [2 - 2]
 │    ├── stats: [rows=2]
 │    ├── tuple [type=tuple{unknown}]
 │    │    └── null [type=unknown, constraints=(contradiction; tight)]
 │    └── tuple [type=tuple{unknown}]
 │         └── null [type=unknown, constraints=(contradiction; tight)]
 ├── values
 │    ├── columns: column1:2(unknown)
 │    ├── cardinality: [2 - 2]
 │    ├── stats: [rows=2]
 │    ├── tuple [type=tuple{unknown}]
 │    │    └── null [type=unknown, constraints=(contradiction; tight)]
 │    └── tuple [type=tuple{unknown}]
 │         └── null [type=unknown, constraints=(contradiction; tight)]
 └── filters [type=bool, constraints=(contradiction; tight)]
      └── null [type=unknown, constraints=(contradiction; tight)]

# Calculate full-join cardinality of one input with unknown cardinality.
build
SELECT * FROM xysd FULL JOIN (SELECT * FROM (VALUES (1), (2))) ON True
----
full-join
 ├── columns: x:1(int) y:2(int) s:3(string) d:4(decimal) column1:5(int)
 ├── stats: [rows=200]
 ├── scan xysd
 │    ├── columns: x:1(int!null) y:2(int) s:3(string) d:4(decimal!null)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 ├── values
 │    ├── columns: column1:5(int)
 │    ├── cardinality: [2 - 2]
 │    ├── stats: [rows=2]
 │    ├── tuple [type=tuple{int}]
 │    │    └── const: 1 [type=int]
 │    └── tuple [type=tuple{int}]
 │         └── const: 2 [type=int]
 └── filters [type=bool]
      └── true [type=bool]

# Keys on both sides of full-join.
build
SELECT * FROM (SELECT * FROM xysd LIMIT 1) FULL JOIN (SELECT * FROM xysd LIMIT 1) ON True
----
full-join
 ├── columns: x:1(int) y:2(int) s:3(string) d:4(decimal) x:5(int) y:6(int) s:7(string) d:8(decimal)
 ├── cardinality: [0 - 1]
 ├── stats: [rows=0]
 ├── keys: weak(1) weak(3,4) weak(5) weak(7,8)
 ├── limit
 │    ├── columns: xysd.x:1(int!null) xysd.y:2(int) xysd.s:3(string) xysd.d:4(decimal!null)
 │    ├── cardinality: [0 - 1]
 │    ├── stats: [rows=1]
 │    ├── keys: (1) weak(3,4)
 │    ├── scan xysd
 │    │    ├── columns: xysd.x:1(int!null) xysd.y:2(int) xysd.s:3(string) xysd.d:4(decimal!null)
 │    │    ├── stats: [rows=1000]
 │    │    └── keys: (1) weak(3,4)
 │    └── const: 1 [type=int]
 ├── limit
 │    ├── columns: xysd.x:5(int!null) xysd.y:6(int) xysd.s:7(string) xysd.d:8(decimal!null)
 │    ├── cardinality: [0 - 1]
 │    ├── stats: [rows=1]
 │    ├── keys: (5) weak(7,8)
 │    ├── scan xysd
 │    │    ├── columns: xysd.x:5(int!null) xysd.y:6(int) xysd.s:7(string) xysd.d:8(decimal!null)
 │    │    ├── stats: [rows=1000]
 │    │    └── keys: (5) weak(7,8)
 │    └── const: 1 [type=int]
 └── filters [type=bool]
      └── true [type=bool]
