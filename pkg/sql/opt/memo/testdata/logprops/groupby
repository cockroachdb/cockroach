exec-ddl
CREATE TABLE xyzs (x INT PRIMARY KEY, y INT, z FLOAT NOT NULL, s STRING, UNIQUE (s DESC, z))
----
TABLE xyzs
 ├── x int not null
 ├── y int
 ├── z float not null
 ├── s string
 ├── INDEX primary
 │    └── x int not null
 └── INDEX secondary
      ├── s string desc
      ├── z float not null
      └── x int not null (storing)

exec-ddl
CREATE TABLE kuv (k INT PRIMARY KEY, u FLOAT, v STRING)
----
TABLE kuv
 ├── k int not null
 ├── u float
 ├── v string
 └── INDEX primary
      └── k int not null

build
SELECT y, SUM(z), x, False FROM xyzs GROUP BY x, y
----
project
 ├── columns: y:2(int) sum:5(float) x:1(int!null) false:6(bool!null)
 ├── stats: [rows=1000]
 ├── keys: (1)
 ├── group-by
 │    ├── columns: x:1(int!null) y:2(int) sum:5(float)
 │    ├── grouping columns: x:1(int!null) y:2(int)
 │    ├── stats: [rows=1000, distinct(1,2)=1000]
 │    ├── keys: (1)
 │    ├── project
 │    │    ├── columns: x:1(int!null) y:2(int) z:3(float!null)
 │    │    ├── stats: [rows=1000, distinct(1,2)=1000]
 │    │    ├── keys: (1)
 │    │    └── scan xyzs
 │    │         ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
 │    │         ├── stats: [rows=1000, distinct(1,2)=1000]
 │    │         └── keys: (1) weak(3,4)
 │    └── aggregations [outer=(3)]
 │         └── sum [type=float, outer=(3)]
 │              └── variable: xyzs.z [type=float, outer=(3)]
 └── projections [outer=(1,2,5)]
      └── false [type=bool]

# Scalar groupby.
build
SELECT SUM(x), MAX(y) FROM xyzs
----
group-by
 ├── columns: sum:5(decimal) max:6(int)
 ├── cardinality: [1 - 1]
 ├── stats: [rows=1]
 ├── project
 │    ├── columns: x:1(int!null) y:2(int)
 │    ├── stats: [rows=1000]
 │    ├── keys: (1)
 │    └── scan xyzs
 │         ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
 │         ├── stats: [rows=1000]
 │         └── keys: (1) weak(3,4)
 └── aggregations [outer=(1,2)]
      ├── sum [type=decimal, outer=(1)]
      │    └── variable: xyzs.x [type=int, outer=(1)]
      └── max [type=int, outer=(2)]
           └── variable: xyzs.y [type=int, outer=(2)]

# Group by unique index columns.
build
SELECT s FROM xyzs GROUP BY z, s
----
project
 ├── columns: s:4(string)
 ├── stats: [rows=1000]
 └── group-by
      ├── columns: z:3(float!null) s:4(string)
      ├── grouping columns: z:3(float!null) s:4(string)
      ├── stats: [rows=1000, distinct(3,4)=1000]
      ├── keys: weak(3,4)
      └── project
           ├── columns: z:3(float!null) s:4(string)
           ├── stats: [rows=1000, distinct(3,4)=1000]
           ├── keys: weak(3,4)
           └── scan xyzs
                ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
                ├── stats: [rows=1000, distinct(3,4)=1000]
                └── keys: (1) weak(3,4)

# Group by columns that otherwise wouldn't be weak key.
build
SELECT y, SUM(z) FROM xyzs GROUP BY z, y
----
project
 ├── columns: y:2(int) sum:5(float)
 ├── stats: [rows=1000]
 └── group-by
      ├── columns: y:2(int) z:3(float!null) sum:5(float)
      ├── grouping columns: y:2(int) z:3(float!null)
      ├── stats: [rows=1000, distinct(2,3)=1000]
      ├── keys: weak(2,3)
      ├── project
      │    ├── columns: y:2(int) z:3(float!null)
      │    ├── stats: [rows=1000, distinct(2,3)=1000]
      │    └── scan xyzs
      │         ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
      │         ├── stats: [rows=1000, distinct(2,3)=1000]
      │         └── keys: (1) weak(3,4)
      └── aggregations [outer=(3)]
           └── sum [type=float, outer=(3)]
                └── variable: xyzs.z [type=float, outer=(3)]

# Group by column that is subset of unique index.
build
SELECT z, MAX(s) FROM xyzs GROUP BY z
----
group-by
 ├── columns: z:3(float!null) max:5(string)
 ├── grouping columns: z:3(float!null)
 ├── stats: [rows=700, distinct(3)=700]
 ├── keys: (3)
 ├── project
 │    ├── columns: z:3(float!null) s:4(string)
 │    ├── stats: [rows=1000, distinct(3)=700]
 │    ├── keys: weak(3,4)
 │    └── scan xyzs
 │         ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
 │         ├── stats: [rows=1000, distinct(3)=700]
 │         └── keys: (1) weak(3,4)
 └── aggregations [outer=(4)]
      └── max [type=string, outer=(4)]
           └── variable: xyzs.s [type=string, outer=(4)]

# Group by all columns.
build
SELECT s FROM xyzs GROUP BY xyzs.*
----
project
 ├── columns: s:4(string)
 ├── stats: [rows=1000]
 └── group-by
      ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
      ├── grouping columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
      ├── stats: [rows=1000, distinct(1-4)=1000]
      ├── keys: (1) weak(3,4)
      └── scan xyzs
           ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
           ├── stats: [rows=1000, distinct(1-4)=1000]
           └── keys: (1) weak(3,4)

# Propagate outer columns.
build
SELECT * FROM xyzs WHERE (SELECT SUM(x) FROM (SELECT y, u FROM kuv) GROUP BY u) > 100
----
select
 ├── columns: x:1(int!null) y:2(int) z:3(float!null) s:4(string)
 ├── stats: [rows=333]
 ├── keys: (1) weak(3,4)
 ├── scan xyzs
 │    ├── columns: xyzs.x:1(int!null) xyzs.y:2(int) z:3(float!null) s:4(string)
 │    ├── stats: [rows=1000]
 │    └── keys: (1) weak(3,4)
 └── filters [type=bool, outer=(1,2)]
      └── gt [type=bool, outer=(1,2)]
           ├── subquery [type=decimal, outer=(1,2)]
           │    └── max1-row
           │         ├── columns: sum:10(decimal)
           │         ├── outer: (1,2)
           │         ├── cardinality: [0 - 1]
           │         ├── stats: [rows=1]
           │         └── project
           │              ├── columns: sum:10(decimal)
           │              ├── outer: (1,2)
           │              ├── stats: [rows=700]
           │              └── group-by
           │                   ├── columns: u:6(float) sum:10(decimal)
           │                   ├── grouping columns: u:6(float)
           │                   ├── outer: (1,2)
           │                   ├── stats: [rows=700, distinct(6)=700]
           │                   ├── keys: weak(6)
           │                   ├── project
           │                   │    ├── columns: x:9(int) u:6(float)
           │                   │    ├── outer: (1,2)
           │                   │    ├── stats: [rows=1000, distinct(6)=700]
           │                   │    ├── project
           │                   │    │    ├── columns: y:8(int) u:6(float)
           │                   │    │    ├── outer: (2)
           │                   │    │    ├── stats: [rows=1000, distinct(6)=700]
           │                   │    │    ├── scan kuv
           │                   │    │    │    ├── columns: k:5(int!null) u:6(float) v:7(string)
           │                   │    │    │    ├── stats: [rows=1000, distinct(6)=700]
           │                   │    │    │    └── keys: (5)
           │                   │    │    └── projections [outer=(2,6)]
           │                   │    │         └── variable: xyzs.y [type=int, outer=(2)]
           │                   │    └── projections [outer=(1,6)]
           │                   │         └── variable: xyzs.x [type=int, outer=(1)]
           │                   └── aggregations [outer=(9)]
           │                        └── sum [type=decimal, outer=(9)]
           │                             └── variable: x [type=int, outer=(9)]
           └── const: 100 [type=decimal]

# Calculate groupby cardinality.
build
SELECT * FROM (VALUES (1), (2), (1), (NULL)) GROUP BY column1
----
group-by
 ├── columns: column1:1(int)
 ├── grouping columns: column1:1(int)
 ├── cardinality: [1 - 4]
 ├── stats: [rows=3, distinct(1)=3]
 ├── keys: weak(1)
 └── values
      ├── columns: column1:1(int)
      ├── cardinality: [4 - 4]
      ├── stats: [rows=4, distinct(1)=3]
      ├── tuple [type=tuple{int}]
      │    └── const: 1 [type=int]
      ├── tuple [type=tuple{int}]
      │    └── const: 2 [type=int]
      ├── tuple [type=tuple{int}]
      │    └── const: 1 [type=int]
      └── tuple [type=tuple{unknown}]
           └── null [type=unknown]
