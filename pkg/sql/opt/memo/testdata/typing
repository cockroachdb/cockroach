exec-ddl
CREATE TABLE a (x INT PRIMARY KEY, y INT)
----
TABLE a
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE b (x STRING PRIMARY KEY, z DECIMAL NOT NULL)
----
TABLE b
 ├── x string not null
 ├── z decimal not null
 └── INDEX primary
      └── x string not null

exec-ddl
CREATE TABLE unusual (x INT PRIMARY KEY, arr INT[])
----
TABLE unusual
 ├── x int not null
 ├── arr int[]
 └── INDEX primary
      └── x int not null

# Variable
build
SELECT a.x FROM a
----
project
 ├── columns: x:1(int!null)
 └── scan a
      └── columns: x:1(int!null) y:2(int)

# Const
build
SELECT 1, TRUE, FALSE, NULL
----
project
 ├── columns: "1":1(int!null) true:2(bool!null) false:3(bool!null) NULL:4(unknown)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      ├── const: 1 [type=int]
      ├── true [type=bool]
      ├── false [type=bool]
      └── null [type=unknown]

# Placeholder
build
SELECT * FROM a WHERE x = $1
----
select
 ├── columns: x:1(int!null) y:2(int)
 ├── scan a
 │    └── columns: x:1(int!null) y:2(int)
 └── filters [type=bool]
      └── eq [type=bool]
           ├── variable: a.x [type=int]
           └── placeholder: $1 [type=int]

# Tuple, Projections
build
SELECT (a.x, 1.5), a.y FROM a
----
project
 ├── columns: "(a.x, 1.5)":3(tuple{int, decimal}) y:2(int)
 ├── scan a
 │    └── columns: x:1(int!null) y:2(int)
 └── projections
      └── tuple [type=tuple{int, decimal}]
           ├── variable: a.x [type=int]
           └── const: 1.5 [type=decimal]

# And, Or, Not
build
SELECT * FROM a WHERE a.x = 1 AND NOT (a.y = 2 OR a.y = 3.5)
----
select
 ├── columns: x:1(int!null) y:2(int)
 ├── scan a
 │    └── columns: x:1(int!null) y:2(int)
 └── filters [type=bool]
      └── and [type=bool]
           ├── eq [type=bool]
           │    ├── variable: a.x [type=int]
           │    └── const: 1 [type=int]
           └── not [type=bool]
                └── or [type=bool]
                     ├── eq [type=bool]
                     │    ├── variable: a.y [type=int]
                     │    └── const: 2 [type=int]
                     └── eq [type=bool]
                          ├── variable: a.y [type=int]
                          └── const: 3.5 [type=decimal]

# Eq, Ne
build
SELECT * FROM a WHERE a.x = 1 AND a.x <> 2
----
select
 ├── columns: x:1(int!null) y:2(int)
 ├── scan a
 │    └── columns: x:1(int!null) y:2(int)
 └── filters [type=bool]
      └── and [type=bool]
           ├── eq [type=bool]
           │    ├── variable: a.x [type=int]
           │    └── const: 1 [type=int]
           └── ne [type=bool]
                ├── variable: a.x [type=int]
                └── const: 2 [type=int]

# Le, Ge, Lt, Gt
build
SELECT * FROM a WHERE a.x >= 1 AND a.x <= 10 AND a.y > 1 AND a.y < 10
----
select
 ├── columns: x:1(int!null) y:2(int!null)
 ├── scan a
 │    └── columns: x:1(int!null) y:2(int)
 └── filters [type=bool]
      └── and [type=bool]
           ├── and [type=bool]
           │    ├── and [type=bool]
           │    │    ├── ge [type=bool]
           │    │    │    ├── variable: a.x [type=int]
           │    │    │    └── const: 1 [type=int]
           │    │    └── le [type=bool]
           │    │         ├── variable: a.x [type=int]
           │    │         └── const: 10 [type=int]
           │    └── gt [type=bool]
           │         ├── variable: a.y [type=int]
           │         └── const: 1 [type=int]
           └── lt [type=bool]
                ├── variable: a.y [type=int]
                └── const: 10 [type=int]

# In, NotIn
build
SELECT * FROM a WHERE a.x IN (1, 2) AND a.y NOT IN (3, 4)
----
select
 ├── columns: x:1(int!null) y:2(int)
 ├── scan a
 │    └── columns: x:1(int!null) y:2(int)
 └── filters [type=bool]
      └── and [type=bool]
           ├── in [type=bool]
           │    ├── variable: a.x [type=int]
           │    └── tuple [type=tuple{int, int}]
           │         ├── const: 1 [type=int]
           │         └── const: 2 [type=int]
           └── not-in [type=bool]
                ├── variable: a.y [type=int]
                └── tuple [type=tuple{int, int}]
                     ├── const: 3 [type=int]
                     └── const: 4 [type=int]

# Like, NotLike
build
SELECT * FROM b WHERE b.x LIKE '%foo%' AND b.x NOT LIKE '%bar%'
----
select
 ├── columns: x:1(string!null) z:2(decimal!null)
 ├── scan b
 │    └── columns: x:1(string!null) z:2(decimal!null)
 └── filters [type=bool]
      └── and [type=bool]
           ├── like [type=bool]
           │    ├── variable: b.x [type=string]
           │    └── const: '%foo%' [type=string]
           └── not-like [type=bool]
                ├── variable: b.x [type=string]
                └── const: '%bar%' [type=string]

# ILike, INotLike
build
SELECT * FROM b WHERE b.x ILIKE '%foo%' AND b.x NOT ILIKE '%bar%'
----
select
 ├── columns: x:1(string!null) z:2(decimal!null)
 ├── scan b
 │    └── columns: x:1(string!null) z:2(decimal!null)
 └── filters [type=bool]
      └── and [type=bool]
           ├── i-like [type=bool]
           │    ├── variable: b.x [type=string]
           │    └── const: '%foo%' [type=string]
           └── not-i-like [type=bool]
                ├── variable: b.x [type=string]
                └── const: '%bar%' [type=string]

# RegMatch, NotRegMatch, RegIMatch, NotRegIMatch
build
SELECT * FROM b WHERE b.x ~ 'foo' AND b.x !~ 'bar' AND b.x ~* 'foo' AND b.x !~* 'bar'
----
select
 ├── columns: x:1(string!null) z:2(decimal!null)
 ├── scan b
 │    └── columns: x:1(string!null) z:2(decimal!null)
 └── filters [type=bool]
      └── and [type=bool]
           ├── and [type=bool]
           │    ├── and [type=bool]
           │    │    ├── reg-match [type=bool]
           │    │    │    ├── variable: b.x [type=string]
           │    │    │    └── const: 'foo' [type=string]
           │    │    └── not-reg-match [type=bool]
           │    │         ├── variable: b.x [type=string]
           │    │         └── const: 'bar' [type=string]
           │    └── reg-i-match [type=bool]
           │         ├── variable: b.x [type=string]
           │         └── const: 'foo' [type=string]
           └── not-reg-i-match [type=bool]
                ├── variable: b.x [type=string]
                └── const: 'bar' [type=string]

# Is, IsNot
build
SELECT * FROM a WHERE a.x IS DISTINCT FROM a.y AND a.x IS NULL
----
select
 ├── columns: x:1(int!null) y:2(int)
 ├── scan a
 │    └── columns: x:1(int!null) y:2(int)
 └── filters [type=bool]
      └── and [type=bool]
           ├── is-not [type=bool]
           │    ├── variable: a.x [type=int]
           │    └── variable: a.y [type=int]
           └── is [type=bool]
                ├── variable: a.x [type=int]
                └── null [type=unknown]

# Bitand, Bitor, Bitxor
build
SELECT a.x & a.y, a.x | a.y, a.x # a.y FROM a
----
project
 ├── columns: "a.x & a.y":3(int) "a.x | a.y":4(int) "a.x # a.y":5(int)
 ├── scan a
 │    └── columns: x:1(int!null) a.y:2(int)
 └── projections
      ├── bitand [type=int]
      │    ├── variable: a.x [type=int]
      │    └── variable: a.y [type=int]
      ├── bitor [type=int]
      │    ├── variable: a.x [type=int]
      │    └── variable: a.y [type=int]
      └── bitxor [type=int]
           ├── variable: a.x [type=int]
           └── variable: a.y [type=int]

# Plus, Minus, Mult, Div, FloorDiv
build
SELECT a.x + 1.5, DATE '2000-01-01' - 15, 10.10 * a.x, 1 / a.y, a.x // 1.5 FROM a
----
project
 ├── columns: "a.x + 1.5":3(decimal) "DATE '2000-01-01' - 15":4(date) "10.10 * a.x":5(decimal) "1 / a.y":6(decimal) "a.x // 1.5":7(decimal)
 ├── scan a
 │    └── columns: a.x:1(int!null) a.y:2(int)
 └── projections
      ├── plus [type=decimal]
      │    ├── variable: a.x [type=int]
      │    └── const: 1.5 [type=decimal]
      ├── minus [type=date]
      │    ├── const: '2000-01-01' [type=date]
      │    └── const: 15 [type=int]
      ├── mult [type=decimal]
      │    ├── const: 10.10 [type=decimal]
      │    └── variable: a.x [type=int]
      ├── div [type=decimal]
      │    ├── const: 1 [type=int]
      │    └── variable: a.y [type=int]
      └── floor-div [type=decimal]
           ├── variable: a.x [type=int]
           └── const: 1.5 [type=decimal]

# Mod, Pow, LShift, RShift
build
SELECT 100.1 % a.x, a.x ^ 2.5, a.x << 3, a.y >> 2 FROM a
----
project
 ├── columns: "100.1 % a.x":3(decimal) "a.x ^ 2.5":4(decimal) "a.x << 3":5(int) "a.y >> 2":6(int)
 ├── scan a
 │    └── columns: a.x:1(int!null) y:2(int)
 └── projections
      ├── mod [type=decimal]
      │    ├── const: 100.1 [type=decimal]
      │    └── variable: a.x [type=int]
      ├── pow [type=decimal]
      │    ├── variable: a.x [type=int]
      │    └── const: 2.5 [type=decimal]
      ├── l-shift [type=int]
      │    ├── variable: a.x [type=int]
      │    └── const: 3 [type=int]
      └── r-shift [type=int]
           ├── variable: a.y [type=int]
           └── const: 2 [type=int]

# FetchVal, FetchText, FetchValPath, FetchTextPath
build
SELECT '[1, 2]'->1, '[1, 2]'->>1, '{"a": 5}'#>ARRAY['a'], '{"a": 5}'#>>ARRAY['a'] FROM a
----
project
 ├── columns: "'[1, 2]'->1":3(jsonb) "'[1, 2]'->>1":4(string) "'{"a": 5}'#>ARRAY['a']":5(jsonb) "'{"a": 5}'#>>ARRAY['a']":6(string)
 ├── scan a
 │    └── columns: x:1(int!null) y:2(int)
 └── projections
      ├── fetch-val [type=jsonb]
      │    ├── const: '[1, 2]' [type=jsonb]
      │    └── const: 1 [type=int]
      ├── fetch-text [type=string]
      │    ├── const: '[1, 2]' [type=jsonb]
      │    └── const: 1 [type=int]
      ├── fetch-val-path [type=jsonb]
      │    ├── const: '{"a": 5}' [type=jsonb]
      │    └── array: string[] [type=string[]]
      │         └── const: 'a' [type=string]
      └── fetch-text-path [type=string]
           ├── const: '{"a": 5}' [type=jsonb]
           └── array: string[] [type=string[]]
                └── const: 'a' [type=string]

# Concat
build
SELECT b.x || 'more' FROM b
----
project
 ├── columns: "b.x || 'more'":3(string)
 ├── scan b
 │    └── columns: x:1(string!null) z:2(decimal!null)
 └── projections
      └── concat [type=string]
           ├── variable: b.x [type=string]
           └── const: 'more' [type=string]

# UnaryMinus, UnaryComplement
build
SELECT -a.y, ~a.x FROM a
----
project
 ├── columns: "-a.y":3(int) "~a.x":4(int)
 ├── scan a
 │    └── columns: a.x:1(int!null) a.y:2(int)
 └── projections
      ├── unary-minus [type=int]
      │    └── variable: a.y [type=int]
      └── unary-complement [type=int]
           └── variable: a.x [type=int]

# Array Concat
build
SELECT arr || arr, arr || NULL, NULL || arr FROM unusual
----
project
 ├── columns: "arr || arr":3(int[]) "arr || NULL":4(int[]) "NULL || arr":5(int[])
 ├── scan unusual
 │    └── columns: x:1(int!null) arr:2(int[])
 └── projections
      ├── concat [type=int[]]
      │    ├── variable: unusual.arr [type=int[]]
      │    └── variable: unusual.arr [type=int[]]
      ├── concat [type=int[]]
      │    ├── variable: unusual.arr [type=int[]]
      │    └── null [type=unknown]
      └── concat [type=int[]]
           ├── null [type=unknown]
           └── variable: unusual.arr [type=int[]]

# Array Element Concat
build
SELECT x || arr, arr || x, x || NULL, NULL || x FROM unusual
----
project
 ├── columns: "x || arr":3(int[]) "arr || x":4(int[]) "x || NULL":5(int[]) "NULL || x":6(int[])
 ├── scan unusual
 │    └── columns: x:1(int!null) arr:2(int[])
 └── projections
      ├── concat [type=int[]]
      │    ├── variable: unusual.x [type=int]
      │    └── variable: unusual.arr [type=int[]]
      ├── concat [type=int[]]
      │    ├── variable: unusual.arr [type=int[]]
      │    └── variable: unusual.x [type=int]
      ├── concat [type=int[]]
      │    ├── variable: unusual.x [type=int]
      │    └── null [type=unknown]
      └── concat [type=int[]]
           ├── null [type=unknown]
           └── variable: unusual.x [type=int]

# Function with fixed return type.
build
SELECT length('text')
----
project
 ├── columns: length:1(int)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── function: length [type=int]
           └── const: 'text' [type=string]

# Function with return type dependent on arg types.
build
SELECT div(1.0, 2.0)
----
project
 ├── columns: div:1(decimal)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── function: div [type=decimal]
           ├── const: 1.0 [type=decimal]
           └── const: 2.0 [type=decimal]

# Function with same arguments in multiple overloads.
build
SELECT NOW()
----
error (0A000): impure functions are not supported

# Variadic function.
build
SELECT GREATEST(1, 2, 3, 4)
----
project
 ├── columns: greatest:1(int)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── function: greatest [type=int]
           ├── const: 1 [type=int]
           ├── const: 2 [type=int]
           ├── const: 3 [type=int]
           └── const: 4 [type=int]

# Aggregate functions.
build
SELECT
    ARRAY_AGG(z), AVG(z), BOOL_AND(z=0), BOOL_OR(z=0), CONCAT_AGG(x), COUNT(z),
    COUNT(*), MAX(x), MAX(z), SUM_INT(x::int), SUM(z), SQRDIFF(z), VARIANCE(x::int),
    STDDEV(z), XOR_AGG(x::int), JSON_AGG(x::json), JSONB_AGG(x::jsonb)
FROM b
----
group-by
 ├── columns: array_agg:3(decimal[]) avg:4(decimal) bool_and:6(bool) bool_or:7(bool) concat_agg:8(string) count:9(int) count:10(int) max:11(string) max:12(decimal) sum_int:14(int) sum:15(decimal) sqrdiff:16(decimal) variance:17(decimal) stddev:18(decimal) xor_agg:19(int) json_agg:21(jsonb) jsonb_agg:23(jsonb)
 ├── project
 │    ├── columns: column5:5(bool) column13:13(int) column20:20(jsonb) column22:22(jsonb) x:1(string!null) z:2(decimal!null)
 │    ├── scan b
 │    │    └── columns: x:1(string!null) z:2(decimal!null)
 │    └── projections
 │         ├── eq [type=bool]
 │         │    ├── variable: b.z [type=decimal]
 │         │    └── const: 0 [type=decimal]
 │         ├── cast: INT [type=int]
 │         │    └── variable: b.x [type=string]
 │         ├── cast: JSON [type=jsonb]
 │         │    └── variable: b.x [type=string]
 │         └── cast: JSONB [type=jsonb]
 │              └── variable: b.x [type=string]
 └── aggregations
      ├── array-agg [type=decimal[]]
      │    └── variable: b.z [type=decimal]
      ├── avg [type=decimal]
      │    └── variable: b.z [type=decimal]
      ├── bool-and [type=bool]
      │    └── variable: column5 [type=bool]
      ├── bool-or [type=bool]
      │    └── variable: column5 [type=bool]
      ├── concat-agg [type=string]
      │    └── variable: b.x [type=string]
      ├── count [type=int]
      │    └── variable: b.z [type=decimal]
      ├── count-rows [type=int]
      ├── max [type=string]
      │    └── variable: b.x [type=string]
      ├── max [type=decimal]
      │    └── variable: b.z [type=decimal]
      ├── sum-int [type=int]
      │    └── variable: column13 [type=int]
      ├── sum [type=decimal]
      │    └── variable: b.z [type=decimal]
      ├── sqr-diff [type=decimal]
      │    └── variable: b.z [type=decimal]
      ├── variance [type=decimal]
      │    └── variable: column13 [type=int]
      ├── std-dev [type=decimal]
      │    └── variable: b.z [type=decimal]
      ├── xor-agg [type=int]
      │    └── variable: column13 [type=int]
      ├── json-agg [type=jsonb]
      │    └── variable: column20 [type=jsonb]
      └── jsonb-agg [type=jsonb]
           └── variable: column22 [type=jsonb]

# AnyNotNull internal aggregate function.
opt
SELECT * FROM (SELECT x, x::string, y FROM a) WHERE (SELECT MAX(x) FROM b WHERE y=z::int) > 'foo'
----
project
 ├── columns: x:1(int!null) "x::STRING":3(string) y:2(int)
 └── select
      ├── columns: a.x:1(int!null) y:2(int) "x::STRING":3(string) max:6(string!null)
      ├── group-by
      │    ├── columns: a.x:1(int!null) y:2(int) "x::STRING":3(string) max:6(string)
      │    ├── grouping columns: a.x:1(int!null)
      │    ├── left-join
      │    │    ├── columns: a.x:1(int!null) y:2(int) "x::STRING":3(string) b.x:4(string) z:5(decimal)
      │    │    ├── project
      │    │    │    ├── columns: "x::STRING":3(string) a.x:1(int!null) y:2(int)
      │    │    │    ├── scan a
      │    │    │    │    └── columns: a.x:1(int!null) y:2(int)
      │    │    │    └── projections
      │    │    │         └── cast: STRING [type=string]
      │    │    │              └── variable: a.x [type=int]
      │    │    ├── scan b
      │    │    │    └── columns: b.x:4(string!null) z:5(decimal!null)
      │    │    └── filters [type=bool]
      │    │         └── eq [type=bool]
      │    │              ├── variable: a.y [type=int]
      │    │              └── cast: INT [type=int]
      │    │                   └── variable: b.z [type=decimal]
      │    └── aggregations
      │         ├── max [type=string]
      │         │    └── variable: b.x [type=string]
      │         ├── any-not-null [type=int]
      │         │    └── variable: a.y [type=int]
      │         └── any-not-null [type=string]
      │              └── variable: x::STRING [type=string]
      └── filters [type=bool]
           └── gt [type=bool]
                ├── variable: max [type=string]
                └── const: 'foo' [type=string]

# Cast
build
SELECT x::VARCHAR(2) FROM b
----
project
 ├── columns: "x::VARCHAR(2)":3(string)
 ├── scan b
 │    └── columns: x:1(string!null) z:2(decimal!null)
 └── projections
      └── cast: VARCHAR(2) [type=string]
           └── variable: b.x [type=string]
