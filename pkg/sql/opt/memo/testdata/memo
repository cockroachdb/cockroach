exec-ddl
CREATE TABLE a (x INT PRIMARY KEY, y INT)
----
TABLE a
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE b (x STRING PRIMARY KEY, z DECIMAL NOT NULL)
----
TABLE b
 ├── x string not null
 ├── z decimal not null
 └── INDEX primary
      └── x string not null

build
SELECT y, b.x, y+1
FROM a, b
WHERE a.y=1 AND a.x::string=b.x
ORDER BY y
LIMIT 10
----
limit
 ├── columns: y:2(int) x:3(string!null) column5:5(int)
 ├── stats: [rows=10]
 ├── cost: 127000.00
 ├── ordering: +2
 ├── sort
 │    ├── columns: a.y:2(int) b.x:3(string!null) column5:5(int)
 │    ├── stats: [rows=100000]
 │    ├── cost: 127000.00
 │    ├── ordering: +2
 │    └── project
 │         ├── columns: a.y:2(int) b.x:3(string!null) column5:5(int)
 │         ├── stats: [rows=100000]
 │         ├── cost: 102000.00
 │         ├── select
 │         │    ├── columns: a.x:1(int!null) a.y:2(int) b.x:3(string!null) b.z:4(decimal!null)
 │         │    ├── stats: [rows=100000]
 │         │    ├── cost: 102000.00
 │         │    ├── inner-join
 │         │    │    ├── columns: a.x:1(int!null) a.y:2(int) b.x:3(string!null) b.z:4(decimal!null)
 │         │    │    ├── stats: [rows=1000000]
 │         │    │    ├── cost: 2000.00
 │         │    │    ├── scan a
 │         │    │    │    ├── columns: a.x:1(int!null) a.y:2(int)
 │         │    │    │    ├── stats: [rows=1000]
 │         │    │    │    └── cost: 1000.00
 │         │    │    ├── scan b
 │         │    │    │    ├── columns: b.x:3(string!null) b.z:4(decimal!null)
 │         │    │    │    ├── stats: [rows=1000]
 │         │    │    │    └── cost: 1000.00
 │         │    │    └── true [type=bool]
 │         │    └── and [type=bool, outer=(1-3), constraints=(/2: [/1 - /1])]
 │         │         ├── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
 │         │         │    ├── variable: a.y [type=int, outer=(2)]
 │         │         │    └── const: 1 [type=int]
 │         │         └── eq [type=bool, outer=(1,3)]
 │         │              ├── cast: string [type=string, outer=(1)]
 │         │              │    └── variable: a.x [type=int, outer=(1)]
 │         │              └── variable: b.x [type=string, outer=(3)]
 │         └── projections [outer=(2,3)]
 │              ├── variable: a.y [type=int, outer=(2)]
 │              ├── variable: b.x [type=string, outer=(3)]
 │              └── plus [type=int, outer=(2)]
 │                   ├── variable: a.y [type=int, outer=(2)]
 │                   └── const: 1 [type=int]
 └── const: 10 [type=int]

opt
SELECT y, b.x, y+1
FROM a, b
WHERE a.y=1 AND a.x::string=b.x
ORDER BY y
LIMIT 10
----
project
 ├── columns: y:2(int) x:3(string!null) column5:5(int)
 ├── stats: [rows=10]
 ├── cost: 4600.00
 ├── ordering: +2
 ├── limit
 │    ├── columns: a.y:2(int) b.x:3(string!null)
 │    ├── stats: [rows=10]
 │    ├── cost: 4600.00
 │    ├── ordering: +2
 │    ├── sort
 │    │    ├── columns: a.y:2(int) b.x:3(string!null)
 │    │    ├── stats: [rows=10000]
 │    │    ├── cost: 4600.00
 │    │    ├── ordering: +2
 │    │    └── project
 │    │         ├── columns: a.y:2(int) b.x:3(string!null)
 │    │         ├── stats: [rows=10000]
 │    │         ├── cost: 2100.00
 │    │         ├── inner-join
 │    │         │    ├── columns: a.x:1(int!null) a.y:2(int) b.x:3(string!null)
 │    │         │    ├── stats: [rows=10000]
 │    │         │    ├── cost: 2100.00
 │    │         │    ├── select
 │    │         │    │    ├── columns: a.x:1(int!null) a.y:2(int)
 │    │         │    │    ├── stats: [rows=100]
 │    │         │    │    ├── cost: 1100.00
 │    │         │    │    ├── scan a
 │    │         │    │    │    ├── columns: a.x:1(int!null) a.y:2(int)
 │    │         │    │    │    ├── stats: [rows=1000]
 │    │         │    │    │    └── cost: 1000.00
 │    │         │    │    └── filters [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
 │    │         │    │         └── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
 │    │         │    │              ├── variable: a.y [type=int, outer=(2)]
 │    │         │    │              └── const: 1 [type=int]
 │    │         │    ├── scan b
 │    │         │    │    ├── columns: b.x:3(string!null)
 │    │         │    │    ├── stats: [rows=1000]
 │    │         │    │    └── cost: 1000.00
 │    │         │    └── filters [type=bool, outer=(1,3)]
 │    │         │         └── eq [type=bool, outer=(1,3)]
 │    │         │              ├── variable: b.x [type=string, outer=(3)]
 │    │         │              └── cast: string [type=string, outer=(1)]
 │    │         │                   └── variable: a.x [type=int, outer=(1)]
 │    │         └── projections [outer=(2,3)]
 │    │              ├── variable: a.y [type=int, outer=(2)]
 │    │              └── variable: b.x [type=string, outer=(3)]
 │    └── const: 10 [type=int]
 └── projections [outer=(2,3)]
      ├── variable: a.y [type=int, outer=(2)]
      ├── variable: b.x [type=string, outer=(3)]
      └── plus [type=int, outer=(2)]
           ├── variable: a.y [type=int, outer=(2)]
           └── const: 1 [type=int]

memo
SELECT y, b.x, y+1
FROM a, b
WHERE a.y=1 AND a.x::string=b.x
ORDER BY y
LIMIT 10
----
[29: "p:y:2,x:3,column5:5 o:+2"]
memo
 ├── 29: (project 28 20)
 │    ├── "" [cost=4600.00]
 │    │    └── best: (project 28 20)
 │    └── "p:y:2,x:3,column5:5 o:+2" [cost=4600.00]
 │         └── best: (project 28="o:+2" 20)
 ├── 28: (limit 27 24 +2)
 │    ├── "" [cost=4600.00]
 │    │    └── best: (limit 27="o:+2" 24 +2)
 │    └── "o:+2" [cost=4600.00]
 │         └── best: (limit 27="o:+2" 24 +2)
 ├── 27: (project 22 26)
 │    ├── "" [cost=2100.00]
 │    │    └── best: (project 22 26)
 │    └── "o:+2" [cost=4600.00]
 │         └── best: (sort 27)
 ├── 26: (projections 5 10)
 ├── 25: (limit 22 24 +2)
 ├── 24: (const 10)
 ├── 23: (project 22 20)
 ├── 22: (inner-join 15 21 17)
 │    ├── "" [cost=2100.00]
 │    │    └── best: (inner-join 15 21 17)
 │    └── "o:+2" [cost=4600.00]
 │         └── best: (sort 22)
 ├── 21: (scan b)
 │    └── "" [cost=1000.00]
 │         └── best: (scan b)
 ├── 20: (projections 5 10 19)
 ├── 19: (plus 5 6)
 ├── 18: (inner-join 15 2 17)
 ├── 17: (filters 11)
 ├── 16: (inner-join 15 2 3)
 ├── 15: (select 1 14)
 │    └── "" [cost=1100.00]
 │         └── best: (select 1 14)
 ├── 14: (filters 7)
 ├── 13: (filters 7 11)
 ├── 12: (and 7 11)
 ├── 11: (eq 10 9)
 ├── 10: (variable b.x)
 ├── 9: (cast 8 string)
 ├── 8: (variable a.x)
 ├── 7: (eq 5 6)
 ├── 6: (const 1)
 ├── 5: (variable a.y)
 ├── 4: (inner-join 1 2 3)
 ├── 3: (true)
 ├── 2: (scan b)
 └── 1: (scan a)
      └── "" [cost=1000.00]
           └── best: (scan a)

# Test interning of expressions.
memo
SELECT 1, 1+z, now()::timestamp, now()::timestamptz
FROM b
WHERE z=1 AND concat(x, 'foo', x)=concat(x, 'foo', x)
----
[17: "p:column3:3,column4:4,column5:5,column6:6"]
memo
 ├── 17: (project 11 16)
 │    └── "p:column3:3,column4:4,column5:5,column6:6" [cost=1100.00]
 │         └── best: (project 11 16)
 ├── 16: (projections 12 13 15 14)
 ├── 15: (cast 14 timestamp)
 ├── 14: (function now)
 ├── 13: (plus 2 3)
 ├── 12: (const 1)
 ├── 11: (select 1 10)
 │    └── "" [cost=1100.00]
 │         └── best: (select 1 10)
 ├── 10: (filters 4 8)
 ├── 9: (and 4 8)
 ├── 8: (eq 7 7)
 ├── 7: (function 5 6 5 concat)
 ├── 6: (const 'foo')
 ├── 5: (variable b.x)
 ├── 4: (eq 2 3)
 ├── 3: (const 1)
 ├── 2: (variable b.z)
 └── 1: (scan b)
      └── "" [cost=1000.00]
           └── best: (scan b)
