exec-ddl
CREATE TABLE a (x INT PRIMARY KEY, y INT)
----
TABLE a
 ├── x int not null
 ├── y int
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE b (x STRING PRIMARY KEY, z DECIMAL NOT NULL)
----
TABLE b
 ├── x string not null
 ├── z decimal not null
 └── INDEX primary
      └── x string not null

build
SELECT y, b.x, y+1
FROM a, b
WHERE a.y=1 AND a.x::string=b.x
ORDER BY y
LIMIT 10
----
limit
 ├── columns: y:2(int!null) x:3(string!null) "y + 1":5(int)
 ├── cardinality: [0 - 10]
 ├── stats: [rows=10]
 ├── ordering: +2
 ├── sort
 │    ├── columns: y:2(int!null) b.x:3(string!null) "y + 1":5(int)
 │    ├── stats: [rows=1428]
 │    ├── ordering: +2
 │    └── project
 │         ├── columns: "y + 1":5(int) y:2(int!null) b.x:3(string!null)
 │         ├── stats: [rows=1428]
 │         ├── select
 │         │    ├── columns: a.x:1(int!null) y:2(int!null) b.x:3(string!null) z:4(decimal!null)
 │         │    ├── stats: [rows=1428, distinct(2)=1]
 │         │    ├── inner-join
 │         │    │    ├── columns: a.x:1(int!null) y:2(int) b.x:3(string!null) z:4(decimal!null)
 │         │    │    ├── stats: [rows=1000000, distinct(2)=700]
 │         │    │    ├── scan a
 │         │    │    │    ├── columns: a.x:1(int!null) y:2(int)
 │         │    │    │    ├── stats: [rows=1000, distinct(2)=700]
 │         │    │    │    └── keys: (1)
 │         │    │    ├── scan b
 │         │    │    │    ├── columns: b.x:3(string!null) z:4(decimal!null)
 │         │    │    │    ├── stats: [rows=1000]
 │         │    │    │    └── keys: (3)
 │         │    │    └── true [type=bool]
 │         │    └── filters [type=bool, outer=(1-3), constraints=(/2: [/1 - /1])]
 │         │         └── and [type=bool, outer=(1-3), constraints=(/2: [/1 - /1])]
 │         │              ├── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
 │         │              │    ├── variable: a.y [type=int, outer=(2)]
 │         │              │    └── const: 1 [type=int]
 │         │              └── eq [type=bool, outer=(1,3)]
 │         │                   ├── cast: STRING [type=string, outer=(1)]
 │         │                   │    └── variable: a.x [type=int, outer=(1)]
 │         │                   └── variable: b.x [type=string, outer=(3)]
 │         └── projections [outer=(2,3)]
 │              └── plus [type=int, outer=(2)]
 │                   ├── variable: a.y [type=int, outer=(2)]
 │                   └── const: 1 [type=int]
 └── const: 10 [type=int]

opt
SELECT y, b.x, y+1
FROM a, b
WHERE a.y=1 AND a.x::string=b.x
ORDER BY y
LIMIT 10
----
project
 ├── columns: y:2(int!null) x:3(string!null) "y + 1":5(int)
 ├── cardinality: [0 - 10]
 ├── stats: [rows=10]
 ├── ordering: +2
 ├── limit
 │    ├── columns: a.x:1(int!null) y:2(int!null) b.x:3(string!null)
 │    ├── cardinality: [0 - 10]
 │    ├── stats: [rows=10]
 │    ├── ordering: +2
 │    ├── sort
 │    │    ├── columns: a.x:1(int!null) y:2(int!null) b.x:3(string!null)
 │    │    ├── stats: [rows=100]
 │    │    ├── ordering: +2
 │    │    └── inner-join
 │    │         ├── columns: a.x:1(int!null) y:2(int!null) b.x:3(string!null)
 │    │         ├── stats: [rows=100]
 │    │         ├── select
 │    │         │    ├── columns: a.x:1(int!null) y:2(int!null)
 │    │         │    ├── stats: [rows=1, distinct(2)=1]
 │    │         │    ├── keys: (1)
 │    │         │    ├── scan a
 │    │         │    │    ├── columns: a.x:1(int!null) y:2(int)
 │    │         │    │    ├── stats: [rows=1000, distinct(2)=700]
 │    │         │    │    └── keys: (1)
 │    │         │    └── filters [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
 │    │         │         └── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight)]
 │    │         │              ├── variable: a.y [type=int, outer=(2)]
 │    │         │              └── const: 1 [type=int]
 │    │         ├── scan b
 │    │         │    ├── columns: b.x:3(string!null)
 │    │         │    ├── stats: [rows=1000]
 │    │         │    └── keys: (3)
 │    │         └── filters [type=bool, outer=(1,3), constraints=(/3: (/NULL - ])]
 │    │              └── eq [type=bool, outer=(1,3), constraints=(/3: (/NULL - ])]
 │    │                   ├── variable: b.x [type=string, outer=(3)]
 │    │                   └── cast: STRING [type=string, outer=(1)]
 │    │                        └── variable: a.x [type=int, outer=(1)]
 │    └── const: 10 [type=int]
 └── projections [outer=(2,3)]
      └── plus [type=int, outer=(2)]
           ├── variable: a.y [type=int, outer=(2)]
           └── const: 1 [type=int]

memo
SELECT y, b.x, y+1
FROM a, b
WHERE a.y=1 AND a.x::string=b.x
ORDER BY y
LIMIT 10
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    ├── "[presentation: y:2,x:3,y + 1:5] [ordering: +2]"
 │    │    ├── best: (project G2="[ordering: +2]" G3)
 │    │    └── cost: 2026.65
 │    └── ""
 │         ├── best: (project G2 G3)
 │         └── cost: 2026.65
 ├── G2: (limit G4 G5 ordering=+2)
 │    ├── ""
 │    │    ├── best: (limit G4="[ordering: +2]" G5 ordering=+2)
 │    │    └── cost: 2026.65
 │    └── "[ordering: +2]"
 │         ├── best: (limit G4="[ordering: +2]" G5 ordering=+2)
 │         └── cost: 2026.65
 ├── G3: (projections G6 a.y b.x)
 ├── G4: (inner-join G7 G8 G9)
 │    ├── ""
 │    │    ├── best: (inner-join G7 G8 G9)
 │    │    └── cost: 2020.01
 │    └── "[ordering: +2]"
 │         ├── best: (sort G4)
 │         └── cost: 2026.65
 ├── G5: (const 10)
 ├── G6: (plus G16 G17)
 ├── G7: (select G10 G11)
 │    └── ""
 │         ├── best: (select G10 G11)
 │         └── cost: 1010.00
 ├── G8: (scan b,cols=(3))
 │    └── ""
 │         ├── best: (scan b,cols=(3))
 │         └── cost: 1000.00
 ├── G9: (filters G12)
 ├── G10: (scan a)
 │    └── ""
 │         ├── best: (scan a)
 │         └── cost: 1000.00
 ├── G11: (filters G13)
 ├── G12: (eq G14 G15)
 ├── G13: (eq G16 G17)
 ├── G14: (variable b.x)
 ├── G15: (cast G18 STRING)
 ├── G16: (variable a.y)
 ├── G17: (const 1)
 └── G18: (variable a.x)

# Test interning of expressions.
memo
SELECT 1, 1+z, left(x, 10)::timestamp, left(x, 10)::timestamptz
FROM b
WHERE z=1 AND concat(x, 'foo', x)=concat(x, 'foo', x)
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: 1:3,1 + z:4,left(x, 10)::TIMESTAMP:5,left(x, 10)::TIMESTAMP WITH TIME ZONE:6]"
 │         ├── best: (project G2 G3)
 │         └── cost: 1010.00
 ├── G2: (select G4 G5)
 │    └── ""
 │         ├── best: (select G4 G5)
 │         └── cost: 1010.00
 ├── G3: (projections G6 G7 G8 G9)
 ├── G4: (scan b)
 │    └── ""
 │         ├── best: (scan b)
 │         └── cost: 1000.00
 ├── G5: (filters G10 G11)
 ├── G6: (const 1)
 ├── G7: (plus G13 G14)
 ├── G8: (cast G12 TIMESTAMP)
 ├── G9: (cast G12 TIMESTAMP WITH TIME ZONE)
 ├── G10: (eq G13 G14)
 ├── G11: (eq G15 G15)
 ├── G12: (function G18 G16 left)
 ├── G13: (variable b.z)
 ├── G14: (const 1)
 ├── G15: (function G18 G17 G18 concat)
 ├── G16: (const 10)
 ├── G17: (const 'foo')
 └── G18: (variable b.x)

# Test topological sorting
memo
SELECT x FROM a WHERE x = 1 AND x+y = 1
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: x:1]"
 │         ├── best: (project G2 G3)
 │         └── cost: 1.01
 ├── G2: (select G4 G5) (select G6 G7)
 │    └── ""
 │         ├── best: (select G6 G7)
 │         └── cost: 1.01
 ├── G3: (projections a.x)
 ├── G4: (scan a)
 │    └── ""
 │         ├── best: (scan a)
 │         └── cost: 1000.00
 ├── G5: (filters G8 G9)
 ├── G6: (scan a,constrained)
 │    └── ""
 │         ├── best: (scan a,constrained)
 │         └── cost: 1.00
 ├── G7: (filters G9)
 ├── G8: (eq G12 G11)
 ├── G9: (eq G10 G11)
 ├── G10: (plus G12 G13)
 ├── G11: (const 1)
 ├── G12: (variable a.x)
 └── G13: (variable a.y)

memo raw-memo
SELECT x FROM a WHERE x = 1 AND x+y = 1
----
root: G12, [presentation: x:1]
memo (optimized)
 ├── G1: (scan a)
 │    └── ""
 │         ├── best: (scan a)
 │         └── cost: 1000.00
 ├── G2: (variable a.x)
 ├── G3: (const 1)
 ├── G4: (eq G2 G3)
 ├── G5: (variable a.y)
 ├── G6: (plus G2 G5)
 ├── G7: (eq G6 G3)
 ├── G8: (and G4 G7)
 ├── G9: (filters G4 G7)
 ├── G10: (select G1 G9) (select G15 G14)
 │    └── ""
 │         ├── best: (select G15 G14)
 │         └── cost: 1.01
 ├── G11: (projections a.x)
 ├── G12: (project G10 G11)
 │    └── "[presentation: x:1]"
 │         ├── best: (project G10 G11)
 │         └── cost: 1.01
 ├── G13: (true)
 ├── G14: (filters G7)
 └── G15: (scan a,constrained)
      └── ""
           ├── best: (scan a,constrained)
           └── cost: 1.00

memo 
SELECT x, y FROM a UNION SELECT x+1, y+1 FROM a
----
memo (optimized)
 ├── G1: (union G2 G3)
 │    └── "[presentation: x:7,y:8]"
 │         ├── best: (union G2 G3)
 │         └── cost: 2000.00
 ├── G2: (scan a)
 │    └── ""
 │         ├── best: (scan a)
 │         └── cost: 1000.00
 ├── G3: (project G4 G5)
 │    └── ""
 │         ├── best: (project G4 G5)
 │         └── cost: 1000.00
 ├── G4: (scan a)
 │    └── ""
 │         ├── best: (scan a)
 │         └── cost: 1000.00
 ├── G5: (projections G6 G7)
 ├── G6: (plus G8 G10)
 ├── G7: (plus G9 G10)
 ├── G8: (variable a.x)
 ├── G9: (variable a.y)
 └── G10: (const 1)

memo
SELECT ARRAY_AGG(x) FROM (SELECT * FROM a)
----
memo (optimized)
 ├── G1: (group-by G2 G3 cols=())
 │    └── "[presentation: array_agg:3]"
 │         ├── best: (group-by G2 G3 cols=())
 │         └── cost: 1000.00
 ├── G2: (scan a,cols=(1))
 │    └── ""
 │         ├── best: (scan a,cols=(1))
 │         └── cost: 1000.00
 ├── G3: (aggregations G4)
 ├── G4: (array-agg G5)
 └── G5: (variable a.x)

memo
SELECT ARRAY_AGG(x) FROM (SELECT * FROM a) GROUP BY y
----
memo (optimized)
 ├── G1: (project G2 G3)
 │    └── "[presentation: array_agg:3]"
 │         ├── best: (project G2 G3)
 │         └── cost: 1000.00
 ├── G2: (group-by G4 G5 cols=(2))
 │    └── ""
 │         ├── best: (group-by G4 G5 cols=(2))
 │         └── cost: 1000.00
 ├── G3: (projections array_agg)
 ├── G4: (scan a)
 │    └── ""
 │         ├── best: (scan a)
 │         └── cost: 1000.00
 ├── G5: (aggregations G6)
 ├── G6: (array-agg G7)
 └── G7: (variable a.x)

memo
SELECT ARRAY_AGG(x) FROM (SELECT * FROM a ORDER BY y)
----
memo (optimized)
 ├── G1: (group-by G2 G3 cols=(),ordering=+2)
 │    └── "[presentation: array_agg:3]"
 │         ├── best: (group-by G2="[ordering: +2]" G3 cols=(),ordering=+2)
 │         └── cost: 1099.66
 ├── G2: (scan a,cols=(1))
 │    ├── ""
 │    │    ├── best: (scan a,cols=(1))
 │    │    └── cost: 1000.00
 │    └── "[ordering: +2]"
 │         ├── best: (sort G2)
 │         └── cost: 1099.66
 ├── G3: (aggregations G4)
 ├── G4: (array-agg G5)
 └── G5: (variable a.x)
