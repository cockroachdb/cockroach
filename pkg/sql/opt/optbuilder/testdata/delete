exec-ddl
CREATE TABLE abcde (
    a INT NOT NULL,
    b INT,
    c INT DEFAULT (10),
    d INT AS (b + c + 1) STORED,
    e INT AS (a) STORED
)
----

exec-ddl
CREATE TABLE xyz (
    x TEXT PRIMARY KEY,
    y INT8,
    z FLOAT8
)
----

exec-ddl
CREATE TABLE uv (
    u DECIMAL,
    v BYTES
)
----

exec-ddl
CREATE TABLE mutation (
    m INT PRIMARY KEY,
    n INT,
    "o:write-only" INT DEFAULT(10),
    "p:delete-only" INT AS (o + n) STORED
)
----

# ------------------------------------------------------------------------------
# Basic tests.
# ------------------------------------------------------------------------------

# No extra clauses.
build
DELETE FROM abcde
----
delete abcde
 ├── columns: <none>
 ├── fetch columns: a:7(int) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int)
 └── scan abcde
      ├── columns: a:7(int!null) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int!null)
      └── computed column expressions
           ├── d:10(int)
           │    └── plus [type=int]
           │         ├── plus [type=int]
           │         │    ├── variable: b [type=int]
           │         │    └── variable: c [type=int]
           │         └── const: 1 [type=int]
           └── e:11(int)
                └── variable: a [type=int]

# Use WHERE, ORDER BY, LIMIT.
build
DELETE FROM abcde WHERE a>0 ORDER BY a LIMIT 10
----
delete abcde
 ├── columns: <none>
 ├── fetch columns: a:7(int) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int)
 └── limit
      ├── columns: a:7(int!null) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int!null)
      ├── internal-ordering: +7
      ├── sort
      │    ├── columns: a:7(int!null) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int!null)
      │    ├── ordering: +7
      │    ├── limit hint: 10.00
      │    └── select
      │         ├── columns: a:7(int!null) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int!null)
      │         ├── scan abcde
      │         │    ├── columns: a:7(int!null) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int!null)
      │         │    └── computed column expressions
      │         │         ├── d:10(int)
      │         │         │    └── plus [type=int]
      │         │         │         ├── plus [type=int]
      │         │         │         │    ├── variable: b [type=int]
      │         │         │         │    └── variable: c [type=int]
      │         │         │         └── const: 1 [type=int]
      │         │         └── e:11(int)
      │         │              └── variable: a [type=int]
      │         └── filters
      │              └── gt [type=bool]
      │                   ├── variable: a [type=int]
      │                   └── const: 0 [type=int]
      └── const: 10 [type=int]

# Use aliased table name.
build
DELETE FROM abcde AS foo WHERE foo.a>0 ORDER BY foo.a LIMIT 10
----
delete foo
 ├── columns: <none>
 ├── fetch columns: a:7(int) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int)
 └── limit
      ├── columns: a:7(int!null) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int!null)
      ├── internal-ordering: +7
      ├── sort
      │    ├── columns: a:7(int!null) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int!null)
      │    ├── ordering: +7
      │    ├── limit hint: 10.00
      │    └── select
      │         ├── columns: a:7(int!null) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int!null)
      │         ├── scan foo
      │         │    ├── columns: a:7(int!null) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int!null)
      │         │    └── computed column expressions
      │         │         ├── d:10(int)
      │         │         │    └── plus [type=int]
      │         │         │         ├── plus [type=int]
      │         │         │         │    ├── variable: b [type=int]
      │         │         │         │    └── variable: c [type=int]
      │         │         │         └── const: 1 [type=int]
      │         │         └── e:11(int)
      │         │              └── variable: a [type=int]
      │         └── filters
      │              └── gt [type=bool]
      │                   ├── variable: a [type=int]
      │                   └── const: 0 [type=int]
      └── const: 10 [type=int]

# DELETE with index hints.
exec-ddl
CREATE TABLE xyzw (
  x INT PRIMARY KEY,
  y INT,
  z INT,
  w INT,
  INDEX foo (z, y)
)
----

build
DELETE FROM xyzw@primary
----
delete xyzw
 ├── columns: <none>
 ├── fetch columns: x:5(int) y:6(int) z:7(int) w:8(int)
 └── scan xyzw
      ├── columns: x:5(int!null) y:6(int) z:7(int) w:8(int)
      └── flags: force-index=primary

build
DELETE FROM xyzw@foo
----
delete xyzw
 ├── columns: <none>
 ├── fetch columns: x:5(int) y:6(int) z:7(int) w:8(int)
 └── scan xyzw
      ├── columns: x:5(int!null) y:6(int) z:7(int) w:8(int)
      └── flags: force-index=foo

build
DELETE FROM xyzw@{FORCE_INDEX=foo,ASC}
----
delete xyzw
 ├── columns: <none>
 ├── fetch columns: x:5(int) y:6(int) z:7(int) w:8(int)
 └── scan xyzw
      ├── columns: x:5(int!null) y:6(int) z:7(int) w:8(int)
      └── flags: force-index=foo,fwd

build
DELETE FROM xyzw@{FORCE_INDEX=foo,DESC}
----
delete xyzw
 ├── columns: <none>
 ├── fetch columns: x:5(int) y:6(int) z:7(int) w:8(int)
 └── scan xyzw,rev
      ├── columns: x:5(int!null) y:6(int) z:7(int) w:8(int)
      └── flags: force-index=foo,rev

build
DELETE FROM xyzw@{NO_INDEX_JOIN}
----
delete xyzw
 ├── columns: <none>
 ├── fetch columns: x:5(int) y:6(int) z:7(int) w:8(int)
 └── scan xyzw
      ├── columns: x:5(int!null) y:6(int) z:7(int) w:8(int)
      └── flags: no-index-join

build
DELETE FROM xyzw@bad_idx
----
error: index "bad_idx" not found

# Use placeholders.
build
DELETE FROM xyz WHERE x=$1 ORDER BY y+$2 DESC LIMIT 2
----
delete xyz
 ├── columns: <none>
 ├── fetch columns: x:4(string) y:5(int) z:6(float)
 └── limit
      ├── columns: x:4(string!null) y:5(int) z:6(float) column7:7(int)
      ├── internal-ordering: -7
      ├── sort
      │    ├── columns: x:4(string!null) y:5(int) z:6(float) column7:7(int)
      │    ├── ordering: -7
      │    ├── limit hint: 2.00
      │    └── project
      │         ├── columns: column7:7(int) x:4(string!null) y:5(int) z:6(float)
      │         ├── select
      │         │    ├── columns: x:4(string!null) y:5(int) z:6(float)
      │         │    ├── scan xyz
      │         │    │    └── columns: x:4(string!null) y:5(int) z:6(float)
      │         │    └── filters
      │         │         └── eq [type=bool]
      │         │              ├── variable: x [type=string]
      │         │              └── placeholder: $1 [type=string]
      │         └── projections
      │              └── plus [type=int]
      │                   ├── variable: y [type=int]
      │                   └── placeholder: $2 [type=int]
      └── const: 2 [type=int]


# Use CTE within WHERE clause.
build
WITH cte AS (SELECT x FROM xyz) DELETE FROM abcde WHERE EXISTS(SELECT * FROM cte)
----
with &1 (cte)
 ├── project
 │    ├── columns: xyz.x:1(string!null)
 │    └── scan xyz
 │         └── columns: xyz.x:1(string!null) y:2(int) z:3(float)
 └── delete abcde
      ├── columns: <none>
      ├── fetch columns: a:10(int) b:11(int) c:12(int) d:13(int) e:14(int) rowid:15(int)
      └── select
           ├── columns: a:10(int!null) b:11(int) c:12(int) d:13(int) e:14(int) rowid:15(int!null)
           ├── scan abcde
           │    ├── columns: a:10(int!null) b:11(int) c:12(int) d:13(int) e:14(int) rowid:15(int!null)
           │    └── computed column expressions
           │         ├── d:13(int)
           │         │    └── plus [type=int]
           │         │         ├── plus [type=int]
           │         │         │    ├── variable: b [type=int]
           │         │         │    └── variable: c [type=int]
           │         │         └── const: 1 [type=int]
           │         └── e:14(int)
           │              └── variable: a [type=int]
           └── filters
                └── exists [type=bool]
                     └── with-scan &1 (cte)
                          ├── columns: x:16(string!null)
                          └── mapping:
                               └──  xyz.x:1(string) => x:16(string)

# Unknown target table.
build
DELETE FROM unknown WHERE x=1
----
error (42P01): no data source matches prefix: "unknown"

# Try to use non-returning UPDATE as expression.
build
SELECT * FROM [DELETE FROM abcde WHERE a=1]
----
error (42703): statement source "DELETE FROM abcde WHERE a = 1" does not return any columns

# Non-referenced CTE with mutation.
build
WITH cte AS (SELECT b FROM [DELETE FROM abcde WHERE a=b RETURNING *]) DELETE FROM abcde WHERE a=b
----
with &1
 ├── project
 │    ├── columns: abcde.a:1(int!null) abcde.b:2(int!null) abcde.c:3(int) abcde.d:4(int) abcde.e:5(int)
 │    └── delete abcde
 │         ├── columns: abcde.a:1(int!null) abcde.b:2(int!null) abcde.c:3(int) abcde.d:4(int) abcde.e:5(int) rowid:6(int!null)
 │         ├── fetch columns: abcde.a:7(int) abcde.b:8(int) abcde.c:9(int) abcde.d:10(int) abcde.e:11(int) rowid:12(int)
 │         └── select
 │              ├── columns: abcde.a:7(int!null) abcde.b:8(int!null) abcde.c:9(int) abcde.d:10(int) abcde.e:11(int) rowid:12(int!null)
 │              ├── scan abcde
 │              │    ├── columns: abcde.a:7(int!null) abcde.b:8(int) abcde.c:9(int) abcde.d:10(int) abcde.e:11(int) rowid:12(int!null)
 │              │    └── computed column expressions
 │              │         ├── abcde.d:10(int)
 │              │         │    └── plus [type=int]
 │              │         │         ├── plus [type=int]
 │              │         │         │    ├── variable: abcde.b [type=int]
 │              │         │         │    └── variable: abcde.c [type=int]
 │              │         │         └── const: 1 [type=int]
 │              │         └── abcde.e:11(int)
 │              │              └── variable: abcde.a [type=int]
 │              └── filters
 │                   └── eq [type=bool]
 │                        ├── variable: abcde.a [type=int]
 │                        └── variable: abcde.b [type=int]
 └── with &2 (cte)
      ├── project
      │    ├── columns: b:14(int!null)
      │    └── with-scan &1
      │         ├── columns: a:13(int!null) b:14(int!null) c:15(int) d:16(int) e:17(int)
      │         └── mapping:
      │              ├──  abcde.a:1(int) => a:13(int)
      │              ├──  abcde.b:2(int) => b:14(int)
      │              ├──  abcde.c:3(int) => c:15(int)
      │              ├──  abcde.d:4(int) => d:16(int)
      │              └──  abcde.e:5(int) => e:17(int)
      └── delete abcde
           ├── columns: <none>
           ├── fetch columns: abcde.a:24(int) abcde.b:25(int) abcde.c:26(int) abcde.d:27(int) abcde.e:28(int) rowid:29(int)
           └── select
                ├── columns: abcde.a:24(int!null) abcde.b:25(int!null) abcde.c:26(int) abcde.d:27(int) abcde.e:28(int) rowid:29(int!null)
                ├── scan abcde
                │    ├── columns: abcde.a:24(int!null) abcde.b:25(int) abcde.c:26(int) abcde.d:27(int) abcde.e:28(int) rowid:29(int!null)
                │    └── computed column expressions
                │         ├── abcde.d:27(int)
                │         │    └── plus [type=int]
                │         │         ├── plus [type=int]
                │         │         │    ├── variable: abcde.b [type=int]
                │         │         │    └── variable: abcde.c [type=int]
                │         │         └── const: 1 [type=int]
                │         └── abcde.e:28(int)
                │              └── variable: abcde.a [type=int]
                └── filters
                     └── eq [type=bool]
                          ├── variable: abcde.a [type=int]
                          └── variable: abcde.b [type=int]

# With alias, original table name should be inaccessible.
build
DELETE FROM abcde AS foo WHERE a=abcde.b
----
error (42P01): no data source matches prefix: abcde

# ORDER BY can only be used with LIMIT.
build
DELETE FROM abcde WHERE b=1 ORDER BY c
----
error (42601): DELETE statement requires LIMIT when ORDER BY is used

# ------------------------------------------------------------------------------
# Test RETURNING.
# ------------------------------------------------------------------------------

# Return values from delete.
build
DELETE FROM abcde WHERE a=1 RETURNING *
----
project
 ├── columns: a:1(int!null) b:2(int) c:3(int) d:4(int) e:5(int)
 └── delete abcde
      ├── columns: a:1(int!null) b:2(int) c:3(int) d:4(int) e:5(int) rowid:6(int!null)
      ├── fetch columns: a:7(int) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int)
      └── select
           ├── columns: a:7(int!null) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int!null)
           ├── scan abcde
           │    ├── columns: a:7(int!null) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int!null)
           │    └── computed column expressions
           │         ├── d:10(int)
           │         │    └── plus [type=int]
           │         │         ├── plus [type=int]
           │         │         │    ├── variable: b [type=int]
           │         │         │    └── variable: c [type=int]
           │         │         └── const: 1 [type=int]
           │         └── e:11(int)
           │              └── variable: a [type=int]
           └── filters
                └── eq [type=bool]
                     ├── variable: a [type=int]
                     └── const: 1 [type=int]

# Return values from aliased table.
build
DELETE FROM abcde AS foo WHERE a=1 RETURNING foo.a+1, foo.b * foo.d
----
project
 ├── columns: "?column?":13(int!null) "?column?":14(int)
 ├── delete foo
 │    ├── columns: a:1(int!null) b:2(int) c:3(int) d:4(int) e:5(int) rowid:6(int!null)
 │    ├── fetch columns: a:7(int) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int)
 │    └── select
 │         ├── columns: a:7(int!null) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int!null)
 │         ├── scan foo
 │         │    ├── columns: a:7(int!null) b:8(int) c:9(int) d:10(int) e:11(int) rowid:12(int!null)
 │         │    └── computed column expressions
 │         │         ├── d:10(int)
 │         │         │    └── plus [type=int]
 │         │         │         ├── plus [type=int]
 │         │         │         │    ├── variable: b [type=int]
 │         │         │         │    └── variable: c [type=int]
 │         │         │         └── const: 1 [type=int]
 │         │         └── e:11(int)
 │         │              └── variable: a [type=int]
 │         └── filters
 │              └── eq [type=bool]
 │                   ├── variable: a [type=int]
 │                   └── const: 1 [type=int]
 └── projections
      ├── plus [type=int]
      │    ├── variable: a [type=int]
      │    └── const: 1 [type=int]
      └── mult [type=int]
           ├── variable: b [type=int]
           └── variable: d [type=int]

# Use returning DELETE as a FROM expression.
build
SELECT a, d FROM [DELETE FROM abcde WHERE a>0 ORDER BY b LIMIT 10 RETURNING *]
----
with &1
 ├── columns: a:13(int!null) d:16(int)
 ├── project
 │    ├── columns: abcde.a:1(int!null) abcde.b:2(int) abcde.c:3(int) abcde.d:4(int) abcde.e:5(int)
 │    └── delete abcde
 │         ├── columns: abcde.a:1(int!null) abcde.b:2(int) abcde.c:3(int) abcde.d:4(int) abcde.e:5(int) rowid:6(int!null)
 │         ├── fetch columns: abcde.a:7(int) abcde.b:8(int) abcde.c:9(int) abcde.d:10(int) abcde.e:11(int) rowid:12(int)
 │         └── limit
 │              ├── columns: abcde.a:7(int!null) abcde.b:8(int) abcde.c:9(int) abcde.d:10(int) abcde.e:11(int) rowid:12(int!null)
 │              ├── internal-ordering: +8
 │              ├── sort
 │              │    ├── columns: abcde.a:7(int!null) abcde.b:8(int) abcde.c:9(int) abcde.d:10(int) abcde.e:11(int) rowid:12(int!null)
 │              │    ├── ordering: +8
 │              │    ├── limit hint: 10.00
 │              │    └── select
 │              │         ├── columns: abcde.a:7(int!null) abcde.b:8(int) abcde.c:9(int) abcde.d:10(int) abcde.e:11(int) rowid:12(int!null)
 │              │         ├── scan abcde
 │              │         │    ├── columns: abcde.a:7(int!null) abcde.b:8(int) abcde.c:9(int) abcde.d:10(int) abcde.e:11(int) rowid:12(int!null)
 │              │         │    └── computed column expressions
 │              │         │         ├── abcde.d:10(int)
 │              │         │         │    └── plus [type=int]
 │              │         │         │         ├── plus [type=int]
 │              │         │         │         │    ├── variable: abcde.b [type=int]
 │              │         │         │         │    └── variable: abcde.c [type=int]
 │              │         │         │         └── const: 1 [type=int]
 │              │         │         └── abcde.e:11(int)
 │              │         │              └── variable: abcde.a [type=int]
 │              │         └── filters
 │              │              └── gt [type=bool]
 │              │                   ├── variable: abcde.a [type=int]
 │              │                   └── const: 0 [type=int]
 │              └── const: 10 [type=int]
 └── project
      ├── columns: a:13(int!null) d:16(int)
      └── with-scan &1
           ├── columns: a:13(int!null) b:14(int) c:15(int) d:16(int) e:17(int)
           └── mapping:
                ├──  abcde.a:1(int) => a:13(int)
                ├──  abcde.b:2(int) => b:14(int)
                ├──  abcde.c:3(int) => c:15(int)
                ├──  abcde.d:4(int) => d:16(int)
                └──  abcde.e:5(int) => e:17(int)

# ------------------------------------------------------------------------------
# Tests with mutations.
# ------------------------------------------------------------------------------

# Without RETURNING clause.
build
DELETE FROM mutation WHERE m=1
----
delete mutation
 ├── columns: <none>
 ├── fetch columns: m:5(int) n:6(int) o:7(int) p:8(int)
 └── select
      ├── columns: m:5(int!null) n:6(int) o:7(int) p:8(int)
      ├── scan mutation
      │    └── columns: m:5(int!null) n:6(int) o:7(int) p:8(int)
      └── filters
           └── eq [type=bool]
                ├── variable: m [type=int]
                └── const: 1 [type=int]

# With RETURNING clause.
build
DELETE FROM mutation WHERE m=1 RETURNING *
----
delete mutation
 ├── columns: m:1(int!null) n:2(int)
 ├── fetch columns: m:5(int) n:6(int) o:7(int) p:8(int)
 └── select
      ├── columns: m:5(int!null) n:6(int) o:7(int) p:8(int)
      ├── scan mutation
      │    └── columns: m:5(int!null) n:6(int) o:7(int) p:8(int)
      └── filters
           └── eq [type=bool]
                ├── variable: m [type=int]
                └── const: 1 [type=int]


# Try to return a mutation column.
build
DELETE FROM mutation RETURNING o
----
error (42703): column "o" does not exist

# Try to use mutation column in WHERE clause.
build
DELETE FROM mutation WHERE o=10
----
error (42P10): column "o" is being backfilled

# Try to use mutation column in ORDER BY expression.
build
DELETE FROM mutation ORDER BY p LIMIT 2
----
error (42P10): column "p" is being backfilled
