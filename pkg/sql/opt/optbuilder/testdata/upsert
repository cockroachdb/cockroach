exec-ddl
CREATE TABLE abc (
    a INT NOT NULL,
    b INT DEFAULT (10),
    c INT AS (b + 1) STORED,
    UNIQUE(a),
    UNIQUE(b, c)
)
----

exec-ddl
CREATE TABLE xyz (
    x INT PRIMARY KEY,
    y INT,
    z INT,
    UNIQUE (y, z),
    UNIQUE (z, y),
    INDEX (y DESC)
)
----

exec-ddl
CREATE TABLE uv (
    u INT,
    v INT,
    PRIMARY KEY (u, v)
)
----

exec-ddl
CREATE TABLE noindex (
    x INT PRIMARY KEY,
    y INT,
    z INT
)
----

exec-ddl
CREATE TABLE mutation (
    m INT PRIMARY KEY,
    n INT,
    "o:write-only" INT DEFAULT(10),
    "p:write-only" INT AS (o + n) STORED,
    "q:delete-only" INT AS (m * p) STORED,
    CHECK (m > 0)
)
----

exec-ddl
CREATE TABLE checks (
    a INT PRIMARY KEY CHECK (a > 0),
    b INT,
    c INT,
    d INT AS (c + 1) STORED,
    CHECK (b < d)
)
----

exec-ddl
CREATE TABLE decimals (
    a DECIMAL(10,0) PRIMARY KEY CHECK (round(a) = a),
    b DECIMAL(5,1)[] CHECK (b[0] > 1),
    c DECIMAL(10,1) DEFAULT (1.23),
    d DECIMAL(10,1) AS (a+c) STORED
)
----

exec-ddl
CREATE TABLE uniq (
  x STRING PRIMARY KEY,
  y STRING UNIQUE,
  z STRING UNIQUE
)
----

# ------------------------------------------------------------------------------
# Basic tests.
# ------------------------------------------------------------------------------

# Set single column, single column conflict.
build
INSERT INTO abc (a, b)
SELECT x, y FROM xyz
ON CONFLICT (a) DO
UPDATE SET a=5
----
upsert abc
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── canary column: a:12
 ├── fetch columns: a:12 b:13 c:14 rowid:15
 ├── insert-mapping:
 │    ├── x:6 => a:1
 │    ├── y:7 => b:2
 │    ├── c_comp:11 => c:3
 │    └── rowid_default:10 => rowid:4
 ├── update-mapping:
 │    └── upsert_a:19 => a:1
 └── project
      ├── columns: upsert_a:19!null upsert_b:20 upsert_c:21 upsert_rowid:22 x:6!null y:7 rowid_default:10 c_comp:11 a:12 b:13 c:14 rowid:15 abc.crdb_internal_mvcc_timestamp:16 a_new:17!null c_comp:18
      ├── project
      │    ├── columns: c_comp:18 x:6!null y:7 rowid_default:10 c_comp:11 a:12 b:13 c:14 rowid:15 abc.crdb_internal_mvcc_timestamp:16 a_new:17!null
      │    ├── project
      │    │    ├── columns: a_new:17!null x:6!null y:7 rowid_default:10 c_comp:11 a:12 b:13 c:14 rowid:15 abc.crdb_internal_mvcc_timestamp:16
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: x:6!null y:7 rowid_default:10 c_comp:11 a:12 b:13 c:14 rowid:15 abc.crdb_internal_mvcc_timestamp:16
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: x:6!null y:7 rowid_default:10 c_comp:11
      │    │    │    │    ├── grouping columns: x:6!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: c_comp:11 x:6!null y:7 rowid_default:10
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: rowid_default:10 x:6!null y:7
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: x:6!null y:7
      │    │    │    │    │    │    │    └── scan xyz
      │    │    │    │    │    │    │         └── columns: x:6!null y:7 z:8 xyz.crdb_internal_mvcc_timestamp:9
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── unique_rowid() [as=rowid_default:10]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── y:7 + 1 [as=c_comp:11]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=y:7]
      │    │    │    │         │    └── y:7
      │    │    │    │         ├── first-agg [as=rowid_default:10]
      │    │    │    │         │    └── rowid_default:10
      │    │    │    │         └── first-agg [as=c_comp:11]
      │    │    │    │              └── c_comp:11
      │    │    │    ├── scan abc
      │    │    │    │    ├── columns: a:12!null b:13 c:14 rowid:15!null abc.crdb_internal_mvcc_timestamp:16
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── c:14
      │    │    │    │              └── b:13 + 1
      │    │    │    └── filters
      │    │    │         └── x:6 = a:12
      │    │    └── projections
      │    │         └── 5 [as=a_new:17]
      │    └── projections
      │         └── b:13 + 1 [as=c_comp:18]
      └── projections
           ├── CASE WHEN a:12 IS NULL THEN x:6 ELSE a_new:17 END [as=upsert_a:19]
           ├── CASE WHEN a:12 IS NULL THEN y:7 ELSE b:13 END [as=upsert_b:20]
           ├── CASE WHEN a:12 IS NULL THEN c_comp:11 ELSE c:14 END [as=upsert_c:21]
           └── CASE WHEN a:12 IS NULL THEN rowid_default:10 ELSE rowid:15 END [as=upsert_rowid:22]

# Set all columns, multi-column conflict.
build
INSERT INTO abc (a, b, rowid)
SELECT x, y, z FROM xyz
ON CONFLICT (b, c) DO
UPDATE SET a=1, b=2, rowid=3
RETURNING *
----
project
 ├── columns: a:1!null b:2 c:3
 └── upsert abc
      ├── columns: a:1!null b:2 c:3 rowid:4!null
      ├── arbiter indexes: secondary
      ├── canary column: rowid:14
      ├── fetch columns: a:11 b:12 c:13 rowid:14
      ├── insert-mapping:
      │    ├── x:6 => a:1
      │    ├── y:7 => b:2
      │    ├── c_comp:10 => c:3
      │    └── z:8 => rowid:4
      ├── update-mapping:
      │    ├── upsert_a:20 => a:1
      │    ├── upsert_b:21 => b:2
      │    ├── upsert_c:22 => c:3
      │    └── upsert_rowid:23 => rowid:4
      ├── return-mapping:
      │    ├── upsert_a:20 => a:1
      │    ├── upsert_b:21 => b:2
      │    ├── upsert_c:22 => c:3
      │    └── upsert_rowid:23 => rowid:4
      └── project
           ├── columns: upsert_a:20!null upsert_b:21 upsert_c:22 upsert_rowid:23 x:6!null y:7 z:8 c_comp:10 a:11 b:12 c:13 rowid:14 abc.crdb_internal_mvcc_timestamp:15 a_new:16!null b_new:17!null rowid_new:18!null c_comp:19!null
           ├── project
           │    ├── columns: c_comp:19!null x:6!null y:7 z:8 c_comp:10 a:11 b:12 c:13 rowid:14 abc.crdb_internal_mvcc_timestamp:15 a_new:16!null b_new:17!null rowid_new:18!null
           │    ├── project
           │    │    ├── columns: a_new:16!null b_new:17!null rowid_new:18!null x:6!null y:7 z:8 c_comp:10 a:11 b:12 c:13 rowid:14 abc.crdb_internal_mvcc_timestamp:15
           │    │    ├── left-join (hash)
           │    │    │    ├── columns: x:6!null y:7 z:8 c_comp:10 a:11 b:12 c:13 rowid:14 abc.crdb_internal_mvcc_timestamp:15
           │    │    │    ├── ensure-upsert-distinct-on
           │    │    │    │    ├── columns: x:6!null y:7 z:8 c_comp:10
           │    │    │    │    ├── grouping columns: y:7 c_comp:10
           │    │    │    │    ├── project
           │    │    │    │    │    ├── columns: c_comp:10 x:6!null y:7 z:8
           │    │    │    │    │    ├── project
           │    │    │    │    │    │    ├── columns: x:6!null y:7 z:8
           │    │    │    │    │    │    └── scan xyz
           │    │    │    │    │    │         └── columns: x:6!null y:7 z:8 xyz.crdb_internal_mvcc_timestamp:9
           │    │    │    │    │    └── projections
           │    │    │    │    │         └── y:7 + 1 [as=c_comp:10]
           │    │    │    │    └── aggregations
           │    │    │    │         ├── first-agg [as=x:6]
           │    │    │    │         │    └── x:6
           │    │    │    │         └── first-agg [as=z:8]
           │    │    │    │              └── z:8
           │    │    │    ├── scan abc
           │    │    │    │    ├── columns: a:11!null b:12 c:13 rowid:14!null abc.crdb_internal_mvcc_timestamp:15
           │    │    │    │    └── computed column expressions
           │    │    │    │         └── c:13
           │    │    │    │              └── b:12 + 1
           │    │    │    └── filters
           │    │    │         ├── y:7 = b:12
           │    │    │         └── c_comp:10 = c:13
           │    │    └── projections
           │    │         ├── 1 [as=a_new:16]
           │    │         ├── 2 [as=b_new:17]
           │    │         └── 3 [as=rowid_new:18]
           │    └── projections
           │         └── b_new:17 + 1 [as=c_comp:19]
           └── projections
                ├── CASE WHEN rowid:14 IS NULL THEN x:6 ELSE a_new:16 END [as=upsert_a:20]
                ├── CASE WHEN rowid:14 IS NULL THEN y:7 ELSE b_new:17 END [as=upsert_b:21]
                ├── CASE WHEN rowid:14 IS NULL THEN c_comp:10 ELSE c_comp:19 END [as=upsert_c:22]
                └── CASE WHEN rowid:14 IS NULL THEN z:8 ELSE rowid_new:18 END [as=upsert_rowid:23]

# UPDATE + WHERE clause.
build
INSERT INTO abc
SELECT x, y FROM xyz
ON CONFLICT (a) DO
UPDATE SET b=10
WHERE abc.a>0
----
upsert abc
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── canary column: a:12
 ├── fetch columns: a:12 b:13 c:14 rowid:15
 ├── insert-mapping:
 │    ├── x:6 => a:1
 │    ├── y:7 => b:2
 │    ├── c_comp:11 => c:3
 │    └── rowid_default:10 => rowid:4
 ├── update-mapping:
 │    ├── upsert_b:20 => b:2
 │    └── upsert_c:21 => c:3
 └── project
      ├── columns: upsert_a:19 upsert_b:20 upsert_c:21 upsert_rowid:22 x:6!null y:7 rowid_default:10 c_comp:11 a:12 b:13 c:14 rowid:15 abc.crdb_internal_mvcc_timestamp:16 b_new:17!null c_comp:18!null
      ├── project
      │    ├── columns: c_comp:18!null x:6!null y:7 rowid_default:10 c_comp:11 a:12 b:13 c:14 rowid:15 abc.crdb_internal_mvcc_timestamp:16 b_new:17!null
      │    ├── project
      │    │    ├── columns: b_new:17!null x:6!null y:7 rowid_default:10 c_comp:11 a:12 b:13 c:14 rowid:15 abc.crdb_internal_mvcc_timestamp:16
      │    │    ├── select
      │    │    │    ├── columns: x:6!null y:7 rowid_default:10 c_comp:11 a:12 b:13 c:14 rowid:15 abc.crdb_internal_mvcc_timestamp:16
      │    │    │    ├── left-join (hash)
      │    │    │    │    ├── columns: x:6!null y:7 rowid_default:10 c_comp:11 a:12 b:13 c:14 rowid:15 abc.crdb_internal_mvcc_timestamp:16
      │    │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    │    ├── columns: x:6!null y:7 rowid_default:10 c_comp:11
      │    │    │    │    │    ├── grouping columns: x:6!null
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: c_comp:11 x:6!null y:7 rowid_default:10
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: rowid_default:10 x:6!null y:7
      │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    ├── columns: x:6!null y:7
      │    │    │    │    │    │    │    │    └── scan xyz
      │    │    │    │    │    │    │    │         └── columns: x:6!null y:7 z:8 xyz.crdb_internal_mvcc_timestamp:9
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         └── unique_rowid() [as=rowid_default:10]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── y:7 + 1 [as=c_comp:11]
      │    │    │    │    │    └── aggregations
      │    │    │    │    │         ├── first-agg [as=y:7]
      │    │    │    │    │         │    └── y:7
      │    │    │    │    │         ├── first-agg [as=rowid_default:10]
      │    │    │    │    │         │    └── rowid_default:10
      │    │    │    │    │         └── first-agg [as=c_comp:11]
      │    │    │    │    │              └── c_comp:11
      │    │    │    │    ├── scan abc
      │    │    │    │    │    ├── columns: a:12!null b:13 c:14 rowid:15!null abc.crdb_internal_mvcc_timestamp:16
      │    │    │    │    │    └── computed column expressions
      │    │    │    │    │         └── c:14
      │    │    │    │    │              └── b:13 + 1
      │    │    │    │    └── filters
      │    │    │    │         └── x:6 = a:12
      │    │    │    └── filters
      │    │    │         └── (a:12 IS NULL) OR (a:12 > 0)
      │    │    └── projections
      │    │         └── 10 [as=b_new:17]
      │    └── projections
      │         └── b_new:17 + 1 [as=c_comp:18]
      └── projections
           ├── CASE WHEN a:12 IS NULL THEN x:6 ELSE a:12 END [as=upsert_a:19]
           ├── CASE WHEN a:12 IS NULL THEN y:7 ELSE b_new:17 END [as=upsert_b:20]
           ├── CASE WHEN a:12 IS NULL THEN c_comp:11 ELSE c_comp:18 END [as=upsert_c:21]
           └── CASE WHEN a:12 IS NULL THEN rowid_default:10 ELSE rowid:15 END [as=upsert_rowid:22]

# Use RETURNING INSERT..ON CONFLICT as a FROM clause.
build
SELECT *
FROM [INSERT INTO abc (a, b) VALUES (1,2), (3,4) ON CONFLICT (a) DO UPDATE SET b=1 RETURNING *]
ORDER BY a, b DESC
----
sort
 ├── columns: a:21!null b:22!null c:23!null
 ├── ordering: +21,-22
 └── with &1
      ├── columns: a:21!null b:22!null c:23!null
      ├── project
      │    ├── columns: abc.a:1!null abc.b:2!null abc.c:3!null
      │    └── upsert abc
      │         ├── columns: abc.a:1!null abc.b:2!null abc.c:3!null rowid:4!null
      │         ├── arbiter indexes: secondary
      │         ├── canary column: abc.a:10
      │         ├── fetch columns: abc.a:10 abc.b:11 abc.c:12 rowid:13
      │         ├── insert-mapping:
      │         │    ├── column1:6 => abc.a:1
      │         │    ├── column2:7 => abc.b:2
      │         │    ├── c_comp:9 => abc.c:3
      │         │    └── rowid_default:8 => rowid:4
      │         ├── update-mapping:
      │         │    ├── upsert_b:18 => abc.b:2
      │         │    └── upsert_c:19 => abc.c:3
      │         ├── return-mapping:
      │         │    ├── upsert_a:17 => abc.a:1
      │         │    ├── upsert_b:18 => abc.b:2
      │         │    ├── upsert_c:19 => abc.c:3
      │         │    └── upsert_rowid:20 => rowid:4
      │         └── project
      │              ├── columns: upsert_a:17 upsert_b:18!null upsert_c:19!null upsert_rowid:20 column1:6!null column2:7!null rowid_default:8 c_comp:9!null abc.a:10 abc.b:11 abc.c:12 rowid:13 crdb_internal_mvcc_timestamp:14 b_new:15!null c_comp:16!null
      │              ├── project
      │              │    ├── columns: c_comp:16!null column1:6!null column2:7!null rowid_default:8 c_comp:9!null abc.a:10 abc.b:11 abc.c:12 rowid:13 crdb_internal_mvcc_timestamp:14 b_new:15!null
      │              │    ├── project
      │              │    │    ├── columns: b_new:15!null column1:6!null column2:7!null rowid_default:8 c_comp:9!null abc.a:10 abc.b:11 abc.c:12 rowid:13 crdb_internal_mvcc_timestamp:14
      │              │    │    ├── left-join (hash)
      │              │    │    │    ├── columns: column1:6!null column2:7!null rowid_default:8 c_comp:9!null abc.a:10 abc.b:11 abc.c:12 rowid:13 crdb_internal_mvcc_timestamp:14
      │              │    │    │    ├── ensure-upsert-distinct-on
      │              │    │    │    │    ├── columns: column1:6!null column2:7!null rowid_default:8 c_comp:9!null
      │              │    │    │    │    ├── grouping columns: column1:6!null
      │              │    │    │    │    ├── project
      │              │    │    │    │    │    ├── columns: c_comp:9!null column1:6!null column2:7!null rowid_default:8
      │              │    │    │    │    │    ├── project
      │              │    │    │    │    │    │    ├── columns: rowid_default:8 column1:6!null column2:7!null
      │              │    │    │    │    │    │    ├── values
      │              │    │    │    │    │    │    │    ├── columns: column1:6!null column2:7!null
      │              │    │    │    │    │    │    │    ├── (1, 2)
      │              │    │    │    │    │    │    │    └── (3, 4)
      │              │    │    │    │    │    │    └── projections
      │              │    │    │    │    │    │         └── unique_rowid() [as=rowid_default:8]
      │              │    │    │    │    │    └── projections
      │              │    │    │    │    │         └── column2:7 + 1 [as=c_comp:9]
      │              │    │    │    │    └── aggregations
      │              │    │    │    │         ├── first-agg [as=column2:7]
      │              │    │    │    │         │    └── column2:7
      │              │    │    │    │         ├── first-agg [as=rowid_default:8]
      │              │    │    │    │         │    └── rowid_default:8
      │              │    │    │    │         └── first-agg [as=c_comp:9]
      │              │    │    │    │              └── c_comp:9
      │              │    │    │    ├── scan abc
      │              │    │    │    │    ├── columns: abc.a:10!null abc.b:11 abc.c:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │              │    │    │    │    └── computed column expressions
      │              │    │    │    │         └── abc.c:12
      │              │    │    │    │              └── abc.b:11 + 1
      │              │    │    │    └── filters
      │              │    │    │         └── column1:6 = abc.a:10
      │              │    │    └── projections
      │              │    │         └── 1 [as=b_new:15]
      │              │    └── projections
      │              │         └── b_new:15 + 1 [as=c_comp:16]
      │              └── projections
      │                   ├── CASE WHEN abc.a:10 IS NULL THEN column1:6 ELSE abc.a:10 END [as=upsert_a:17]
      │                   ├── CASE WHEN abc.a:10 IS NULL THEN column2:7 ELSE b_new:15 END [as=upsert_b:18]
      │                   ├── CASE WHEN abc.a:10 IS NULL THEN c_comp:9 ELSE c_comp:16 END [as=upsert_c:19]
      │                   └── CASE WHEN abc.a:10 IS NULL THEN rowid_default:8 ELSE rowid:13 END [as=upsert_rowid:20]
      └── with-scan &1
           ├── columns: a:21!null b:22!null c:23!null
           └── mapping:
                ├──  abc.a:1 => a:21
                ├──  abc.b:2 => b:22
                └──  abc.c:3 => c:23

# Use table alias.
build
INSERT INTO abc AS tab (a, b)
VALUES (1, 2)
ON CONFLICT (a) DO
UPDATE SET a=tab.a*excluded.a
----
upsert abc [as=tab]
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── canary column: a:10
 ├── fetch columns: a:10 b:11 c:12 rowid:13
 ├── insert-mapping:
 │    ├── column1:6 => a:1
 │    ├── column2:7 => b:2
 │    ├── c_comp:9 => c:3
 │    └── rowid_default:8 => rowid:4
 ├── update-mapping:
 │    └── upsert_a:17 => a:1
 └── project
      ├── columns: upsert_a:17 upsert_b:18 upsert_c:19 upsert_rowid:20 column1:6!null column2:7!null rowid_default:8 c_comp:9!null a:10 b:11 c:12 rowid:13 crdb_internal_mvcc_timestamp:14 a_new:15 c_comp:16
      ├── project
      │    ├── columns: c_comp:16 column1:6!null column2:7!null rowid_default:8 c_comp:9!null a:10 b:11 c:12 rowid:13 crdb_internal_mvcc_timestamp:14 a_new:15
      │    ├── project
      │    │    ├── columns: a_new:15 column1:6!null column2:7!null rowid_default:8 c_comp:9!null a:10 b:11 c:12 rowid:13 crdb_internal_mvcc_timestamp:14
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:6!null column2:7!null rowid_default:8 c_comp:9!null a:10 b:11 c:12 rowid:13 crdb_internal_mvcc_timestamp:14
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: column1:6!null column2:7!null rowid_default:8 c_comp:9!null
      │    │    │    │    ├── grouping columns: column1:6!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: c_comp:9!null column1:6!null column2:7!null rowid_default:8
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: rowid_default:8 column1:6!null column2:7!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:6!null column2:7!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── unique_rowid() [as=rowid_default:8]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── column2:7 + 1 [as=c_comp:9]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column2:7]
      │    │    │    │         │    └── column2:7
      │    │    │    │         ├── first-agg [as=rowid_default:8]
      │    │    │    │         │    └── rowid_default:8
      │    │    │    │         └── first-agg [as=c_comp:9]
      │    │    │    │              └── c_comp:9
      │    │    │    ├── scan abc [as=tab]
      │    │    │    │    ├── columns: a:10!null b:11 c:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── c:12
      │    │    │    │              └── b:11 + 1
      │    │    │    └── filters
      │    │    │         └── column1:6 = a:10
      │    │    └── projections
      │    │         └── a:10 * column1:6 [as=a_new:15]
      │    └── projections
      │         └── b:11 + 1 [as=c_comp:16]
      └── projections
           ├── CASE WHEN a:10 IS NULL THEN column1:6 ELSE a_new:15 END [as=upsert_a:17]
           ├── CASE WHEN a:10 IS NULL THEN column2:7 ELSE b:11 END [as=upsert_b:18]
           ├── CASE WHEN a:10 IS NULL THEN c_comp:9 ELSE c:12 END [as=upsert_c:19]
           └── CASE WHEN a:10 IS NULL THEN rowid_default:8 ELSE rowid:13 END [as=upsert_rowid:20]

# Conflict columns are in different order than index key columns.
build
INSERT INTO abc (a, b)
VALUES (1, 2)
ON CONFLICT (c, b) DO
UPDATE SET a=5
----
upsert abc
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── canary column: rowid:13
 ├── fetch columns: a:10 b:11 c:12 rowid:13
 ├── insert-mapping:
 │    ├── column1:6 => a:1
 │    ├── column2:7 => b:2
 │    ├── c_comp:9 => c:3
 │    └── rowid_default:8 => rowid:4
 ├── update-mapping:
 │    └── upsert_a:17 => a:1
 └── project
      ├── columns: upsert_a:17!null upsert_b:18 upsert_c:19 upsert_rowid:20 column1:6!null column2:7!null rowid_default:8 c_comp:9!null a:10 b:11 c:12 rowid:13 crdb_internal_mvcc_timestamp:14 a_new:15!null c_comp:16
      ├── project
      │    ├── columns: c_comp:16 column1:6!null column2:7!null rowid_default:8 c_comp:9!null a:10 b:11 c:12 rowid:13 crdb_internal_mvcc_timestamp:14 a_new:15!null
      │    ├── project
      │    │    ├── columns: a_new:15!null column1:6!null column2:7!null rowid_default:8 c_comp:9!null a:10 b:11 c:12 rowid:13 crdb_internal_mvcc_timestamp:14
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:6!null column2:7!null rowid_default:8 c_comp:9!null a:10 b:11 c:12 rowid:13 crdb_internal_mvcc_timestamp:14
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: column1:6!null column2:7!null rowid_default:8 c_comp:9!null
      │    │    │    │    ├── grouping columns: column2:7!null c_comp:9!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: c_comp:9!null column1:6!null column2:7!null rowid_default:8
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: rowid_default:8 column1:6!null column2:7!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:6!null column2:7!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── unique_rowid() [as=rowid_default:8]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── column2:7 + 1 [as=c_comp:9]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column1:6]
      │    │    │    │         │    └── column1:6
      │    │    │    │         └── first-agg [as=rowid_default:8]
      │    │    │    │              └── rowid_default:8
      │    │    │    ├── scan abc
      │    │    │    │    ├── columns: a:10!null b:11 c:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── c:12
      │    │    │    │              └── b:11 + 1
      │    │    │    └── filters
      │    │    │         ├── column2:7 = b:11
      │    │    │         └── c_comp:9 = c:12
      │    │    └── projections
      │    │         └── 5 [as=a_new:15]
      │    └── projections
      │         └── b:11 + 1 [as=c_comp:16]
      └── projections
           ├── CASE WHEN rowid:13 IS NULL THEN column1:6 ELSE a_new:15 END [as=upsert_a:17]
           ├── CASE WHEN rowid:13 IS NULL THEN column2:7 ELSE b:11 END [as=upsert_b:18]
           ├── CASE WHEN rowid:13 IS NULL THEN c_comp:9 ELSE c:12 END [as=upsert_c:19]
           └── CASE WHEN rowid:13 IS NULL THEN rowid_default:8 ELSE rowid:13 END [as=upsert_rowid:20]

# Conflict columns don't match unique index (too few columns).
build
INSERT INTO abc (a, b)
VALUES (1, 2)
ON CONFLICT (b) DO
UPDATE SET a=5
----
error (42P10): there is no unique or exclusion constraint matching the ON CONFLICT specification

# Conflict columns don't match unique index (too many columns).
build
INSERT INTO abc (a, b)
VALUES (1, 2)
ON CONFLICT (a, b) DO
UPDATE SET a=5
----
error (42P10): there is no unique or exclusion constraint matching the ON CONFLICT specification

# Conflict column not found.
build
INSERT INTO abc (a, b)
VALUES (1, 2)
ON CONFLICT (a, unknown) DO
UPDATE SET a=5
----
error (42703): column "unknown" does not exist

# ------------------------------------------------------------------------------
# Test DO NOTHING.
# ------------------------------------------------------------------------------

# No conflict columns specified (all non-duplicate indexes must be checked).
build
INSERT INTO xyz
VALUES (1, 2, 3), (4, 5, 6)
ON CONFLICT DO NOTHING
----
insert xyz
 ├── columns: <none>
 ├── arbiter indexes: primary secondary secondary
 ├── insert-mapping:
 │    ├── column1:5 => x:1
 │    ├── column2:6 => y:2
 │    └── column3:7 => z:3
 └── upsert-distinct-on
      ├── columns: column1:5!null column2:6!null column3:7!null
      ├── grouping columns: column2:6!null column3:7!null
      ├── upsert-distinct-on
      │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    ├── grouping columns: column2:6!null column3:7!null
      │    ├── upsert-distinct-on
      │    │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    │    ├── grouping columns: column1:5!null
      │    │    ├── anti-join (hash)
      │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    │    │    ├── anti-join (hash)
      │    │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    │    │    │    ├── anti-join (hash)
      │    │    │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    │    │    │    │    ├── values
      │    │    │    │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    │    │    │    │    │    ├── (1, 2, 3)
      │    │    │    │    │    │    └── (4, 5, 6)
      │    │    │    │    │    ├── scan xyz
      │    │    │    │    │    │    └── columns: x:8!null y:9 z:10
      │    │    │    │    │    └── filters
      │    │    │    │    │         └── column1:5 = x:8
      │    │    │    │    ├── scan xyz
      │    │    │    │    │    └── columns: x:12!null y:13 z:14
      │    │    │    │    └── filters
      │    │    │    │         ├── column2:6 = y:13
      │    │    │    │         └── column3:7 = z:14
      │    │    │    ├── scan xyz
      │    │    │    │    └── columns: x:16!null y:17 z:18
      │    │    │    └── filters
      │    │    │         ├── column2:6 = y:17
      │    │    │         └── column3:7 = z:18
      │    │    └── aggregations
      │    │         ├── first-agg [as=column2:6]
      │    │         │    └── column2:6
      │    │         └── first-agg [as=column3:7]
      │    │              └── column3:7
      │    └── aggregations
      │         └── first-agg [as=column1:5]
      │              └── column1:5
      └── aggregations
           └── first-agg [as=column1:5]
                └── column1:5

# Conflict columns are explicitly specified.
build
INSERT INTO xyz
VALUES (1, 2, 3), (4, 5, 6)
ON CONFLICT (y, z) DO NOTHING
----
insert xyz
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── insert-mapping:
 │    ├── column1:5 => x:1
 │    ├── column2:6 => y:2
 │    └── column3:7 => z:3
 └── upsert-distinct-on
      ├── columns: column1:5!null column2:6!null column3:7!null
      ├── grouping columns: column2:6!null column3:7!null
      ├── anti-join (hash)
      │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    ├── values
      │    │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    │    ├── (1, 2, 3)
      │    │    └── (4, 5, 6)
      │    ├── scan xyz
      │    │    └── columns: x:8!null y:9 z:10
      │    └── filters
      │         ├── column2:6 = y:9
      │         └── column3:7 = z:10
      └── aggregations
           └── first-agg [as=column1:5]
                └── column1:5

build
INSERT INTO uniq VALUES ('x2', 'y1', 'z2'), ('x2', 'y2', 'z2'), ('x2', 'y2', 'z2')
ON CONFLICT DO NOTHING
----
insert uniq
 ├── columns: <none>
 ├── arbiter indexes: primary uniq_y_key uniq_z_key
 ├── insert-mapping:
 │    ├── column1:5 => x:1
 │    ├── column2:6 => y:2
 │    └── column3:7 => z:3
 └── upsert-distinct-on
      ├── columns: column1:5!null column2:6!null column3:7!null
      ├── grouping columns: column3:7!null
      ├── upsert-distinct-on
      │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    ├── grouping columns: column2:6!null
      │    ├── upsert-distinct-on
      │    │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    │    ├── grouping columns: column1:5!null
      │    │    ├── anti-join (hash)
      │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    │    │    ├── anti-join (hash)
      │    │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    │    │    │    ├── anti-join (hash)
      │    │    │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    │    │    │    │    ├── values
      │    │    │    │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    │    │    │    │    │    ├── ('x2', 'y1', 'z2')
      │    │    │    │    │    │    ├── ('x2', 'y2', 'z2')
      │    │    │    │    │    │    └── ('x2', 'y2', 'z2')
      │    │    │    │    │    ├── scan uniq
      │    │    │    │    │    │    └── columns: x:8!null y:9 z:10
      │    │    │    │    │    └── filters
      │    │    │    │    │         └── column1:5 = x:8
      │    │    │    │    ├── scan uniq
      │    │    │    │    │    └── columns: x:12!null y:13 z:14
      │    │    │    │    └── filters
      │    │    │    │         └── column2:6 = y:13
      │    │    │    ├── scan uniq
      │    │    │    │    └── columns: x:16!null y:17 z:18
      │    │    │    └── filters
      │    │    │         └── column3:7 = z:18
      │    │    └── aggregations
      │    │         ├── first-agg [as=column2:6]
      │    │         │    └── column2:6
      │    │         └── first-agg [as=column3:7]
      │    │              └── column3:7
      │    └── aggregations
      │         ├── first-agg [as=column1:5]
      │         │    └── column1:5
      │         └── first-agg [as=column3:7]
      │              └── column3:7
      └── aggregations
           ├── first-agg [as=column1:5]
           │    └── column1:5
           └── first-agg [as=column2:6]
                └── column2:6

# ------------------------------------------------------------------------------
# Test excluded columns.
# ------------------------------------------------------------------------------

build
INSERT INTO xyz
VALUES (1, 2, 3), (-1, -1, -1)
ON CONFLICT (z, y) DO
UPDATE SET x=excluded.x+1, y=excluded.y*xyz.y, z=excluded.x-excluded.z
WHERE excluded.y>xyz.y
RETURNING xyz.x*2, y+z
----
project
 ├── columns: "?column?":18!null "?column?":19
 ├── upsert xyz
 │    ├── columns: x:1!null y:2 z:3!null
 │    ├── arbiter indexes: secondary
 │    ├── canary column: x:8
 │    ├── fetch columns: x:8 y:9 z:10
 │    ├── insert-mapping:
 │    │    ├── column1:5 => x:1
 │    │    ├── column2:6 => y:2
 │    │    └── column3:7 => z:3
 │    ├── update-mapping:
 │    │    ├── upsert_x:15 => x:1
 │    │    ├── upsert_y:16 => y:2
 │    │    └── upsert_z:17 => z:3
 │    ├── return-mapping:
 │    │    ├── upsert_x:15 => x:1
 │    │    ├── upsert_y:16 => y:2
 │    │    └── upsert_z:17 => z:3
 │    └── project
 │         ├── columns: upsert_x:15!null upsert_y:16 upsert_z:17!null column1:5!null column2:6!null column3:7!null x:8 y:9 z:10 crdb_internal_mvcc_timestamp:11 x_new:12!null y_new:13 z_new:14!null
 │         ├── project
 │         │    ├── columns: x_new:12!null y_new:13 z_new:14!null column1:5!null column2:6!null column3:7!null x:8 y:9 z:10 crdb_internal_mvcc_timestamp:11
 │         │    ├── select
 │         │    │    ├── columns: column1:5!null column2:6!null column3:7!null x:8 y:9 z:10 crdb_internal_mvcc_timestamp:11
 │         │    │    ├── left-join (hash)
 │         │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null x:8 y:9 z:10 crdb_internal_mvcc_timestamp:11
 │         │    │    │    ├── ensure-upsert-distinct-on
 │         │    │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null
 │         │    │    │    │    ├── grouping columns: column2:6!null column3:7!null
 │         │    │    │    │    ├── values
 │         │    │    │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null
 │         │    │    │    │    │    ├── (1, 2, 3)
 │         │    │    │    │    │    └── (-1, -1, -1)
 │         │    │    │    │    └── aggregations
 │         │    │    │    │         └── first-agg [as=column1:5]
 │         │    │    │    │              └── column1:5
 │         │    │    │    ├── scan xyz
 │         │    │    │    │    └── columns: x:8!null y:9 z:10 crdb_internal_mvcc_timestamp:11
 │         │    │    │    └── filters
 │         │    │    │         ├── column2:6 = y:9
 │         │    │    │         └── column3:7 = z:10
 │         │    │    └── filters
 │         │    │         └── (x:8 IS NULL) OR (column2:6 > y:9)
 │         │    └── projections
 │         │         ├── column1:5 + 1 [as=x_new:12]
 │         │         ├── column2:6 * y:9 [as=y_new:13]
 │         │         └── column1:5 - column3:7 [as=z_new:14]
 │         └── projections
 │              ├── CASE WHEN x:8 IS NULL THEN column1:5 ELSE x_new:12 END [as=upsert_x:15]
 │              ├── CASE WHEN x:8 IS NULL THEN column2:6 ELSE y_new:13 END [as=upsert_y:16]
 │              └── CASE WHEN x:8 IS NULL THEN column3:7 ELSE z_new:14 END [as=upsert_z:17]
 └── projections
      ├── x:1 * 2 [as="?column?":18]
      └── y:2 + z:3 [as="?column?":19]

# Try to use excluded in RETURNING.
build
INSERT INTO xyz
VALUES (1, 2, 3)
ON CONFLICT (x) DO
UPDATE SET x=1
RETURNING excluded.x
----
error (42P01): no data source matches prefix: excluded in this context

# Referencing column without "excluded" or "xyz" prefix is not allowed.
build
INSERT INTO xyz
VALUES (1, 2, 3)
ON CONFLICT (x) DO
UPDATE SET x=x+1
----
error (42702): column reference "x" is ambiguous (candidates: excluded.x, xyz.x)

# ------------------------------------------------------------------------------
# Test UPDATE SET expressions.
# ------------------------------------------------------------------------------

# Subquery.
build
INSERT INTO abc
VALUES (1, 2)
ON CONFLICT (a) DO
UPDATE SET (b, a)=(SELECT x, y+excluded.b FROM xyz WHERE x=excluded.a)
----
upsert abc
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── canary column: a:10
 ├── fetch columns: a:10 b:11 c:12 rowid:13
 ├── insert-mapping:
 │    ├── column1:6 => a:1
 │    ├── column2:7 => b:2
 │    ├── c_comp:9 => c:3
 │    └── rowid_default:8 => rowid:4
 ├── update-mapping:
 │    ├── upsert_a:21 => a:1
 │    ├── upsert_b:22 => b:2
 │    └── upsert_c:23 => c:3
 └── project
      ├── columns: upsert_a:21 upsert_b:22 upsert_c:23 upsert_rowid:24 column1:6!null column2:7!null rowid_default:8 c_comp:9!null a:10 b:11 c:12 rowid:13 abc.crdb_internal_mvcc_timestamp:14 x:15 "?column?":19 c_comp:20
      ├── project
      │    ├── columns: c_comp:20 column1:6!null column2:7!null rowid_default:8 c_comp:9!null a:10 b:11 c:12 rowid:13 abc.crdb_internal_mvcc_timestamp:14 x:15 "?column?":19
      │    ├── left-join-apply
      │    │    ├── columns: column1:6!null column2:7!null rowid_default:8 c_comp:9!null a:10 b:11 c:12 rowid:13 abc.crdb_internal_mvcc_timestamp:14 x:15 "?column?":19
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:6!null column2:7!null rowid_default:8 c_comp:9!null a:10 b:11 c:12 rowid:13 abc.crdb_internal_mvcc_timestamp:14
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: column1:6!null column2:7!null rowid_default:8 c_comp:9!null
      │    │    │    │    ├── grouping columns: column1:6!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: c_comp:9!null column1:6!null column2:7!null rowid_default:8
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: rowid_default:8 column1:6!null column2:7!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:6!null column2:7!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── unique_rowid() [as=rowid_default:8]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── column2:7 + 1 [as=c_comp:9]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column2:7]
      │    │    │    │         │    └── column2:7
      │    │    │    │         ├── first-agg [as=rowid_default:8]
      │    │    │    │         │    └── rowid_default:8
      │    │    │    │         └── first-agg [as=c_comp:9]
      │    │    │    │              └── c_comp:9
      │    │    │    ├── scan abc
      │    │    │    │    ├── columns: a:10!null b:11 c:12 rowid:13!null abc.crdb_internal_mvcc_timestamp:14
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── c:12
      │    │    │    │              └── b:11 + 1
      │    │    │    └── filters
      │    │    │         └── column1:6 = a:10
      │    │    ├── max1-row
      │    │    │    ├── columns: x:15!null "?column?":19
      │    │    │    └── project
      │    │    │         ├── columns: "?column?":19 x:15!null
      │    │    │         ├── select
      │    │    │         │    ├── columns: x:15!null y:16 z:17 xyz.crdb_internal_mvcc_timestamp:18
      │    │    │         │    ├── scan xyz
      │    │    │         │    │    └── columns: x:15!null y:16 z:17 xyz.crdb_internal_mvcc_timestamp:18
      │    │    │         │    └── filters
      │    │    │         │         └── x:15 = column1:6
      │    │    │         └── projections
      │    │    │              └── y:16 + column2:7 [as="?column?":19]
      │    │    └── filters (true)
      │    └── projections
      │         └── x:15 + 1 [as=c_comp:20]
      └── projections
           ├── CASE WHEN a:10 IS NULL THEN column1:6 ELSE "?column?":19 END [as=upsert_a:21]
           ├── CASE WHEN a:10 IS NULL THEN column2:7 ELSE x:15 END [as=upsert_b:22]
           ├── CASE WHEN a:10 IS NULL THEN c_comp:9 ELSE c_comp:20 END [as=upsert_c:23]
           └── CASE WHEN a:10 IS NULL THEN rowid_default:8 ELSE rowid:13 END [as=upsert_rowid:24]

# Default expressions.
build
INSERT INTO abc
VALUES (1, 2)
ON CONFLICT (a) DO
UPDATE SET a=DEFAULT, b=DEFAULT
----
upsert abc
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── canary column: a:10
 ├── fetch columns: a:10 b:11 c:12 rowid:13
 ├── insert-mapping:
 │    ├── column1:6 => a:1
 │    ├── column2:7 => b:2
 │    ├── c_comp:9 => c:3
 │    └── rowid_default:8 => rowid:4
 ├── update-mapping:
 │    ├── upsert_a:18 => a:1
 │    ├── upsert_b:19 => b:2
 │    └── upsert_c:20 => c:3
 └── project
      ├── columns: upsert_a:18 upsert_b:19!null upsert_c:20!null upsert_rowid:21 column1:6!null column2:7!null rowid_default:8 c_comp:9!null a:10 b:11 c:12 rowid:13 crdb_internal_mvcc_timestamp:14 a_new:15 b_new:16!null c_comp:17!null
      ├── project
      │    ├── columns: c_comp:17!null column1:6!null column2:7!null rowid_default:8 c_comp:9!null a:10 b:11 c:12 rowid:13 crdb_internal_mvcc_timestamp:14 a_new:15 b_new:16!null
      │    ├── project
      │    │    ├── columns: a_new:15 b_new:16!null column1:6!null column2:7!null rowid_default:8 c_comp:9!null a:10 b:11 c:12 rowid:13 crdb_internal_mvcc_timestamp:14
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:6!null column2:7!null rowid_default:8 c_comp:9!null a:10 b:11 c:12 rowid:13 crdb_internal_mvcc_timestamp:14
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: column1:6!null column2:7!null rowid_default:8 c_comp:9!null
      │    │    │    │    ├── grouping columns: column1:6!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: c_comp:9!null column1:6!null column2:7!null rowid_default:8
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: rowid_default:8 column1:6!null column2:7!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:6!null column2:7!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── unique_rowid() [as=rowid_default:8]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── column2:7 + 1 [as=c_comp:9]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column2:7]
      │    │    │    │         │    └── column2:7
      │    │    │    │         ├── first-agg [as=rowid_default:8]
      │    │    │    │         │    └── rowid_default:8
      │    │    │    │         └── first-agg [as=c_comp:9]
      │    │    │    │              └── c_comp:9
      │    │    │    ├── scan abc
      │    │    │    │    ├── columns: a:10!null b:11 c:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── c:12
      │    │    │    │              └── b:11 + 1
      │    │    │    └── filters
      │    │    │         └── column1:6 = a:10
      │    │    └── projections
      │    │         ├── NULL::INT8 [as=a_new:15]
      │    │         └── 10 [as=b_new:16]
      │    └── projections
      │         └── b_new:16 + 1 [as=c_comp:17]
      └── projections
           ├── CASE WHEN a:10 IS NULL THEN column1:6 ELSE a_new:15 END [as=upsert_a:18]
           ├── CASE WHEN a:10 IS NULL THEN column2:7 ELSE b_new:16 END [as=upsert_b:19]
           ├── CASE WHEN a:10 IS NULL THEN c_comp:9 ELSE c_comp:17 END [as=upsert_c:20]
           └── CASE WHEN a:10 IS NULL THEN rowid_default:8 ELSE rowid:13 END [as=upsert_rowid:21]

# ------------------------------------------------------------------------------
# Test mutation columns.
# ------------------------------------------------------------------------------

build
INSERT INTO mutation (m, n)
VALUES (1, 2)
ON CONFLICT (m) DO
UPDATE SET m=mutation.m+1
----
upsert mutation
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: m:11
 ├── fetch columns: m:11 n:12 o:13 p:14 q:15
 ├── insert-mapping:
 │    ├── column1:7 => m:1
 │    ├── column2:8 => n:2
 │    ├── o_default:9 => o:3
 │    └── p_comp:10 => p:4
 ├── update-mapping:
 │    ├── upsert_m:19 => m:1
 │    ├── o_default:9 => o:3
 │    └── upsert_p:21 => p:4
 ├── check columns: check1:22
 └── project
      ├── columns: check1:22 column1:7!null column2:8!null o_default:9!null p_comp:10!null m:11 n:12 o:13 p:14 q:15 crdb_internal_mvcc_timestamp:16 m_new:17 p_comp:18 upsert_m:19 upsert_n:20 upsert_p:21
      ├── project
      │    ├── columns: upsert_m:19 upsert_n:20 upsert_p:21 column1:7!null column2:8!null o_default:9!null p_comp:10!null m:11 n:12 o:13 p:14 q:15 crdb_internal_mvcc_timestamp:16 m_new:17 p_comp:18
      │    ├── project
      │    │    ├── columns: p_comp:18 column1:7!null column2:8!null o_default:9!null p_comp:10!null m:11 n:12 o:13 p:14 q:15 crdb_internal_mvcc_timestamp:16 m_new:17
      │    │    ├── project
      │    │    │    ├── columns: m_new:17 column1:7!null column2:8!null o_default:9!null p_comp:10!null m:11 n:12 o:13 p:14 q:15 crdb_internal_mvcc_timestamp:16
      │    │    │    ├── left-join (hash)
      │    │    │    │    ├── columns: column1:7!null column2:8!null o_default:9!null p_comp:10!null m:11 n:12 o:13 p:14 q:15 crdb_internal_mvcc_timestamp:16
      │    │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    │    ├── columns: column1:7!null column2:8!null o_default:9!null p_comp:10!null
      │    │    │    │    │    ├── grouping columns: column1:7!null
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: p_comp:10!null column1:7!null column2:8!null o_default:9!null
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: o_default:9!null column1:7!null column2:8!null
      │    │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    │    ├── columns: column1:7!null column2:8!null
      │    │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         └── 10 [as=o_default:9]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── o_default:9 + column2:8 [as=p_comp:10]
      │    │    │    │    │    └── aggregations
      │    │    │    │    │         ├── first-agg [as=column2:8]
      │    │    │    │    │         │    └── column2:8
      │    │    │    │    │         ├── first-agg [as=o_default:9]
      │    │    │    │    │         │    └── o_default:9
      │    │    │    │    │         └── first-agg [as=p_comp:10]
      │    │    │    │    │              └── p_comp:10
      │    │    │    │    ├── scan mutation
      │    │    │    │    │    ├── columns: m:11!null n:12 o:13 p:14 q:15 crdb_internal_mvcc_timestamp:16
      │    │    │    │    │    └── check constraint expressions
      │    │    │    │    │         └── m:11 > 0
      │    │    │    │    └── filters
      │    │    │    │         └── column1:7 = m:11
      │    │    │    └── projections
      │    │    │         └── m:11 + 1 [as=m_new:17]
      │    │    └── projections
      │    │         └── o_default:9 + n:12 [as=p_comp:18]
      │    └── projections
      │         ├── CASE WHEN m:11 IS NULL THEN column1:7 ELSE m_new:17 END [as=upsert_m:19]
      │         ├── CASE WHEN m:11 IS NULL THEN column2:8 ELSE n:12 END [as=upsert_n:20]
      │         └── CASE WHEN m:11 IS NULL THEN p_comp:10 ELSE p_comp:18 END [as=upsert_p:21]
      └── projections
           └── upsert_m:19 > 0 [as=check1:22]

# ------------------------------------------------------------------------------
# Test UPSERT.
# ------------------------------------------------------------------------------

# Single column primary key.
build
UPSERT INTO xyz VALUES (1)
----
upsert xyz
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: x:7
 ├── fetch columns: x:7 y:8 z:9
 ├── insert-mapping:
 │    ├── column1:5 => x:1
 │    ├── y_default:6 => y:2
 │    └── y_default:6 => z:3
 ├── update-mapping:
 │    ├── y_default:6 => y:2
 │    └── y_default:6 => z:3
 └── project
      ├── columns: upsert_x:11 column1:5!null y_default:6 x:7 y:8 z:9 crdb_internal_mvcc_timestamp:10
      ├── left-join (hash)
      │    ├── columns: column1:5!null y_default:6 x:7 y:8 z:9 crdb_internal_mvcc_timestamp:10
      │    ├── ensure-upsert-distinct-on
      │    │    ├── columns: column1:5!null y_default:6
      │    │    ├── grouping columns: column1:5!null
      │    │    ├── project
      │    │    │    ├── columns: y_default:6 column1:5!null
      │    │    │    ├── values
      │    │    │    │    ├── columns: column1:5!null
      │    │    │    │    └── (1,)
      │    │    │    └── projections
      │    │    │         └── NULL::INT8 [as=y_default:6]
      │    │    └── aggregations
      │    │         └── first-agg [as=y_default:6]
      │    │              └── y_default:6
      │    ├── scan xyz
      │    │    └── columns: x:7!null y:8 z:9 crdb_internal_mvcc_timestamp:10
      │    └── filters
      │         └── column1:5 = x:7
      └── projections
           └── CASE WHEN x:7 IS NULL THEN column1:5 ELSE x:7 END [as=upsert_x:11]

# Test multi-column primary key that contains all columns in table.
build
UPSERT INTO uv VALUES (1, 2) RETURNING *
----
upsert uv
 ├── columns: u:1!null v:2!null
 ├── upsert-mapping:
 │    ├── column1:4 => u:1
 │    └── column2:5 => v:2
 └── values
      ├── columns: column1:4!null column2:5!null
      └── (1, 2)

# Use returning UPSERT as a FROM expression.
build
SELECT * FROM [UPSERT INTO abc VALUES (1, 2) RETURNING *]
----
with &1
 ├── columns: a:16!null b:17!null c:18!null
 ├── project
 │    ├── columns: abc.a:1!null abc.b:2!null abc.c:3!null
 │    └── upsert abc
 │         ├── columns: abc.a:1!null abc.b:2!null abc.c:3!null rowid:4!null
 │         ├── arbiter indexes: primary
 │         ├── canary column: rowid:13
 │         ├── fetch columns: abc.a:10 abc.b:11 abc.c:12 rowid:13
 │         ├── insert-mapping:
 │         │    ├── column1:6 => abc.a:1
 │         │    ├── column2:7 => abc.b:2
 │         │    ├── c_comp:9 => abc.c:3
 │         │    └── rowid_default:8 => rowid:4
 │         ├── update-mapping:
 │         │    ├── column1:6 => abc.a:1
 │         │    ├── column2:7 => abc.b:2
 │         │    └── c_comp:9 => abc.c:3
 │         ├── return-mapping:
 │         │    ├── column1:6 => abc.a:1
 │         │    ├── column2:7 => abc.b:2
 │         │    ├── c_comp:9 => abc.c:3
 │         │    └── upsert_rowid:15 => rowid:4
 │         └── project
 │              ├── columns: upsert_rowid:15 column1:6!null column2:7!null rowid_default:8 c_comp:9!null abc.a:10 abc.b:11 abc.c:12 rowid:13 crdb_internal_mvcc_timestamp:14
 │              ├── left-join (hash)
 │              │    ├── columns: column1:6!null column2:7!null rowid_default:8 c_comp:9!null abc.a:10 abc.b:11 abc.c:12 rowid:13 crdb_internal_mvcc_timestamp:14
 │              │    ├── ensure-upsert-distinct-on
 │              │    │    ├── columns: column1:6!null column2:7!null rowid_default:8 c_comp:9!null
 │              │    │    ├── grouping columns: rowid_default:8
 │              │    │    ├── project
 │              │    │    │    ├── columns: c_comp:9!null column1:6!null column2:7!null rowid_default:8
 │              │    │    │    ├── project
 │              │    │    │    │    ├── columns: rowid_default:8 column1:6!null column2:7!null
 │              │    │    │    │    ├── values
 │              │    │    │    │    │    ├── columns: column1:6!null column2:7!null
 │              │    │    │    │    │    └── (1, 2)
 │              │    │    │    │    └── projections
 │              │    │    │    │         └── unique_rowid() [as=rowid_default:8]
 │              │    │    │    └── projections
 │              │    │    │         └── column2:7 + 1 [as=c_comp:9]
 │              │    │    └── aggregations
 │              │    │         ├── first-agg [as=column1:6]
 │              │    │         │    └── column1:6
 │              │    │         ├── first-agg [as=column2:7]
 │              │    │         │    └── column2:7
 │              │    │         └── first-agg [as=c_comp:9]
 │              │    │              └── c_comp:9
 │              │    ├── scan abc
 │              │    │    ├── columns: abc.a:10!null abc.b:11 abc.c:12 rowid:13!null crdb_internal_mvcc_timestamp:14
 │              │    │    └── computed column expressions
 │              │    │         └── abc.c:12
 │              │    │              └── abc.b:11 + 1
 │              │    └── filters
 │              │         └── rowid_default:8 = rowid:13
 │              └── projections
 │                   └── CASE WHEN rowid:13 IS NULL THEN rowid_default:8 ELSE rowid:13 END [as=upsert_rowid:15]
 └── with-scan &1
      ├── columns: a:16!null b:17!null c:18!null
      └── mapping:
           ├──  abc.a:1 => a:16
           ├──  abc.b:2 => b:17
           └──  abc.c:3 => c:18

# Use explicitly specified column names with secondary indexes present. Existing
# values of other columns need to be fetched to delete existing index rows.
build
UPSERT INTO xyz (z, x, y) VALUES (1, 2, 3)
----
upsert xyz
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: x:8
 ├── fetch columns: x:8 y:9 z:10
 ├── insert-mapping:
 │    ├── column2:6 => x:1
 │    ├── column3:7 => y:2
 │    └── column1:5 => z:3
 ├── update-mapping:
 │    ├── column3:7 => y:2
 │    └── column1:5 => z:3
 └── project
      ├── columns: upsert_x:12 column1:5!null column2:6!null column3:7!null x:8 y:9 z:10 crdb_internal_mvcc_timestamp:11
      ├── left-join (hash)
      │    ├── columns: column1:5!null column2:6!null column3:7!null x:8 y:9 z:10 crdb_internal_mvcc_timestamp:11
      │    ├── ensure-upsert-distinct-on
      │    │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    │    ├── grouping columns: column2:6!null
      │    │    ├── values
      │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    │    │    └── (1, 2, 3)
      │    │    └── aggregations
      │    │         ├── first-agg [as=column1:5]
      │    │         │    └── column1:5
      │    │         └── first-agg [as=column3:7]
      │    │              └── column3:7
      │    ├── scan xyz
      │    │    └── columns: x:8!null y:9 z:10 crdb_internal_mvcc_timestamp:11
      │    └── filters
      │         └── column2:6 = x:8
      └── projections
           └── CASE WHEN x:8 IS NULL THEN column2:6 ELSE x:8 END [as=upsert_x:12]

# Use explicitly specified column names with no secondary indexes present.
# Upsert implemented with blind Puts is possible.
build
UPSERT INTO noindex (x, y, z) VALUES (1, 2, 3)
----
upsert noindex
 ├── columns: <none>
 ├── upsert-mapping:
 │    ├── column1:5 => x:1
 │    ├── column2:6 => y:2
 │    └── column3:7 => z:3
 └── values
      ├── columns: column1:5!null column2:6!null column3:7!null
      └── (1, 2, 3)

# Use subset of explicitly specified column names with no secondary indexes
# present. Existing values of other columns need to be fetched to provide
# update values for unspecified columns.
build
UPSERT INTO checks (a, b, c) VALUES (1, 2, 3)
----
upsert checks
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: a:10
 ├── fetch columns: a:10 b:11 c:12 d:13
 ├── insert-mapping:
 │    ├── column1:6 => a:1
 │    ├── column2:7 => b:2
 │    ├── column3:8 => c:3
 │    └── d_comp:9 => d:4
 ├── update-mapping:
 │    ├── column2:7 => b:2
 │    ├── column3:8 => c:3
 │    └── d_comp:9 => d:4
 ├── check columns: check1:16 check2:17
 └── project
      ├── columns: check1:16!null check2:17 column1:6!null column2:7!null column3:8!null d_comp:9!null a:10 b:11 c:12 d:13 crdb_internal_mvcc_timestamp:14 upsert_a:15
      ├── project
      │    ├── columns: upsert_a:15 column1:6!null column2:7!null column3:8!null d_comp:9!null a:10 b:11 c:12 d:13 crdb_internal_mvcc_timestamp:14
      │    ├── left-join (hash)
      │    │    ├── columns: column1:6!null column2:7!null column3:8!null d_comp:9!null a:10 b:11 c:12 d:13 crdb_internal_mvcc_timestamp:14
      │    │    ├── ensure-upsert-distinct-on
      │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null d_comp:9!null
      │    │    │    ├── grouping columns: column1:6!null
      │    │    │    ├── project
      │    │    │    │    ├── columns: d_comp:9!null column1:6!null column2:7!null column3:8!null
      │    │    │    │    ├── values
      │    │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    │    │    │    └── (1, 2, 3)
      │    │    │    │    └── projections
      │    │    │    │         └── column3:8 + 1 [as=d_comp:9]
      │    │    │    └── aggregations
      │    │    │         ├── first-agg [as=column2:7]
      │    │    │         │    └── column2:7
      │    │    │         ├── first-agg [as=column3:8]
      │    │    │         │    └── column3:8
      │    │    │         └── first-agg [as=d_comp:9]
      │    │    │              └── d_comp:9
      │    │    ├── scan checks
      │    │    │    ├── columns: a:10!null b:11 c:12 d:13 crdb_internal_mvcc_timestamp:14
      │    │    │    ├── check constraint expressions
      │    │    │    │    └── a:10 > 0
      │    │    │    └── computed column expressions
      │    │    │         └── d:13
      │    │    │              └── c:12 + 1
      │    │    └── filters
      │    │         └── column1:6 = a:10
      │    └── projections
      │         └── CASE WHEN a:10 IS NULL THEN column1:6 ELSE a:10 END [as=upsert_a:15]
      └── projections
           ├── column2:7 < d_comp:9 [as=check1:16]
           └── upsert_a:15 > 0 [as=check2:17]

# Ensure that mutation columns are set by the insert and update. Use explicit
# target columns.
build
UPSERT INTO mutation (m, n) VALUES (1, 2)
----
upsert mutation
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: m:11
 ├── fetch columns: m:11 n:12 o:13 p:14 q:15
 ├── insert-mapping:
 │    ├── column1:7 => m:1
 │    ├── column2:8 => n:2
 │    ├── o_default:9 => o:3
 │    └── p_comp:10 => p:4
 ├── update-mapping:
 │    ├── column2:8 => n:2
 │    ├── o_default:9 => o:3
 │    └── p_comp:10 => p:4
 ├── check columns: check1:18
 └── project
      ├── columns: check1:18 column1:7!null column2:8!null o_default:9!null p_comp:10!null m:11 n:12 o:13 p:14 q:15 crdb_internal_mvcc_timestamp:16 upsert_m:17
      ├── project
      │    ├── columns: upsert_m:17 column1:7!null column2:8!null o_default:9!null p_comp:10!null m:11 n:12 o:13 p:14 q:15 crdb_internal_mvcc_timestamp:16
      │    ├── left-join (hash)
      │    │    ├── columns: column1:7!null column2:8!null o_default:9!null p_comp:10!null m:11 n:12 o:13 p:14 q:15 crdb_internal_mvcc_timestamp:16
      │    │    ├── ensure-upsert-distinct-on
      │    │    │    ├── columns: column1:7!null column2:8!null o_default:9!null p_comp:10!null
      │    │    │    ├── grouping columns: column1:7!null
      │    │    │    ├── project
      │    │    │    │    ├── columns: p_comp:10!null column1:7!null column2:8!null o_default:9!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: o_default:9!null column1:7!null column2:8!null
      │    │    │    │    │    ├── values
      │    │    │    │    │    │    ├── columns: column1:7!null column2:8!null
      │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── 10 [as=o_default:9]
      │    │    │    │    └── projections
      │    │    │    │         └── o_default:9 + column2:8 [as=p_comp:10]
      │    │    │    └── aggregations
      │    │    │         ├── first-agg [as=column2:8]
      │    │    │         │    └── column2:8
      │    │    │         ├── first-agg [as=o_default:9]
      │    │    │         │    └── o_default:9
      │    │    │         └── first-agg [as=p_comp:10]
      │    │    │              └── p_comp:10
      │    │    ├── scan mutation
      │    │    │    ├── columns: m:11!null n:12 o:13 p:14 q:15 crdb_internal_mvcc_timestamp:16
      │    │    │    └── check constraint expressions
      │    │    │         └── m:11 > 0
      │    │    └── filters
      │    │         └── column1:7 = m:11
      │    └── projections
      │         └── CASE WHEN m:11 IS NULL THEN column1:7 ELSE m:11 END [as=upsert_m:17]
      └── projections
           └── upsert_m:17 > 0 [as=check1:18]

# Don't directly update mutation columns. However, computed columns do need to
# be updated. Use implicit target columns.
build
UPSERT INTO mutation VALUES (1, 2)
----
upsert mutation
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: m:11
 ├── fetch columns: m:11 n:12 o:13 p:14 q:15
 ├── insert-mapping:
 │    ├── column1:7 => m:1
 │    ├── column2:8 => n:2
 │    ├── o_default:9 => o:3
 │    └── p_comp:10 => p:4
 ├── update-mapping:
 │    ├── column2:8 => n:2
 │    ├── o_default:9 => o:3
 │    └── p_comp:10 => p:4
 ├── check columns: check1:18
 └── project
      ├── columns: check1:18 column1:7!null column2:8!null o_default:9!null p_comp:10!null m:11 n:12 o:13 p:14 q:15 crdb_internal_mvcc_timestamp:16 upsert_m:17
      ├── project
      │    ├── columns: upsert_m:17 column1:7!null column2:8!null o_default:9!null p_comp:10!null m:11 n:12 o:13 p:14 q:15 crdb_internal_mvcc_timestamp:16
      │    ├── left-join (hash)
      │    │    ├── columns: column1:7!null column2:8!null o_default:9!null p_comp:10!null m:11 n:12 o:13 p:14 q:15 crdb_internal_mvcc_timestamp:16
      │    │    ├── ensure-upsert-distinct-on
      │    │    │    ├── columns: column1:7!null column2:8!null o_default:9!null p_comp:10!null
      │    │    │    ├── grouping columns: column1:7!null
      │    │    │    ├── project
      │    │    │    │    ├── columns: p_comp:10!null column1:7!null column2:8!null o_default:9!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: o_default:9!null column1:7!null column2:8!null
      │    │    │    │    │    ├── values
      │    │    │    │    │    │    ├── columns: column1:7!null column2:8!null
      │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── 10 [as=o_default:9]
      │    │    │    │    └── projections
      │    │    │    │         └── o_default:9 + column2:8 [as=p_comp:10]
      │    │    │    └── aggregations
      │    │    │         ├── first-agg [as=column2:8]
      │    │    │         │    └── column2:8
      │    │    │         ├── first-agg [as=o_default:9]
      │    │    │         │    └── o_default:9
      │    │    │         └── first-agg [as=p_comp:10]
      │    │    │              └── p_comp:10
      │    │    ├── scan mutation
      │    │    │    ├── columns: m:11!null n:12 o:13 p:14 q:15 crdb_internal_mvcc_timestamp:16
      │    │    │    └── check constraint expressions
      │    │    │         └── m:11 > 0
      │    │    └── filters
      │    │         └── column1:7 = m:11
      │    └── projections
      │         └── CASE WHEN m:11 IS NULL THEN column1:7 ELSE m:11 END [as=upsert_m:17]
      └── projections
           └── upsert_m:17 > 0 [as=check1:18]

# Use unknown name in upsert column list.
build
UPSERT INTO xyz (x, unknown) VALUES (1)
----
error (42703): column "unknown" does not exist

# ------------------------------------------------------------------------------
# Test check constraints.
# ------------------------------------------------------------------------------

# INSERT..ON CONFLICT
build
INSERT INTO checks (a, b) VALUES (1, 2) ON CONFLICT (a) DO UPDATE SET b=3, c=4
----
upsert checks
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: a:10
 ├── fetch columns: a:10 b:11 c:12 d:13
 ├── insert-mapping:
 │    ├── column1:6 => a:1
 │    ├── column2:7 => b:2
 │    ├── c_default:8 => c:3
 │    └── d_comp:9 => d:4
 ├── update-mapping:
 │    ├── upsert_b:19 => b:2
 │    ├── upsert_c:20 => c:3
 │    └── upsert_d:21 => d:4
 ├── check columns: check1:22 check2:23
 └── project
      ├── columns: check1:22 check2:23 column1:6!null column2:7!null c_default:8 d_comp:9 a:10 b:11 c:12 d:13 crdb_internal_mvcc_timestamp:14 b_new:15!null c_new:16!null d_comp:17!null upsert_a:18 upsert_b:19!null upsert_c:20 upsert_d:21
      ├── project
      │    ├── columns: upsert_a:18 upsert_b:19!null upsert_c:20 upsert_d:21 column1:6!null column2:7!null c_default:8 d_comp:9 a:10 b:11 c:12 d:13 crdb_internal_mvcc_timestamp:14 b_new:15!null c_new:16!null d_comp:17!null
      │    ├── project
      │    │    ├── columns: d_comp:17!null column1:6!null column2:7!null c_default:8 d_comp:9 a:10 b:11 c:12 d:13 crdb_internal_mvcc_timestamp:14 b_new:15!null c_new:16!null
      │    │    ├── project
      │    │    │    ├── columns: b_new:15!null c_new:16!null column1:6!null column2:7!null c_default:8 d_comp:9 a:10 b:11 c:12 d:13 crdb_internal_mvcc_timestamp:14
      │    │    │    ├── left-join (hash)
      │    │    │    │    ├── columns: column1:6!null column2:7!null c_default:8 d_comp:9 a:10 b:11 c:12 d:13 crdb_internal_mvcc_timestamp:14
      │    │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    │    ├── columns: column1:6!null column2:7!null c_default:8 d_comp:9
      │    │    │    │    │    ├── grouping columns: column1:6!null
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: d_comp:9 column1:6!null column2:7!null c_default:8
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: c_default:8 column1:6!null column2:7!null
      │    │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    │    ├── columns: column1:6!null column2:7!null
      │    │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         └── NULL::INT8 [as=c_default:8]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── c_default:8 + 1 [as=d_comp:9]
      │    │    │    │    │    └── aggregations
      │    │    │    │    │         ├── first-agg [as=column2:7]
      │    │    │    │    │         │    └── column2:7
      │    │    │    │    │         ├── first-agg [as=c_default:8]
      │    │    │    │    │         │    └── c_default:8
      │    │    │    │    │         └── first-agg [as=d_comp:9]
      │    │    │    │    │              └── d_comp:9
      │    │    │    │    ├── scan checks
      │    │    │    │    │    ├── columns: a:10!null b:11 c:12 d:13 crdb_internal_mvcc_timestamp:14
      │    │    │    │    │    ├── check constraint expressions
      │    │    │    │    │    │    └── a:10 > 0
      │    │    │    │    │    └── computed column expressions
      │    │    │    │    │         └── d:13
      │    │    │    │    │              └── c:12 + 1
      │    │    │    │    └── filters
      │    │    │    │         └── column1:6 = a:10
      │    │    │    └── projections
      │    │    │         ├── 3 [as=b_new:15]
      │    │    │         └── 4 [as=c_new:16]
      │    │    └── projections
      │    │         └── c_new:16 + 1 [as=d_comp:17]
      │    └── projections
      │         ├── CASE WHEN a:10 IS NULL THEN column1:6 ELSE a:10 END [as=upsert_a:18]
      │         ├── CASE WHEN a:10 IS NULL THEN column2:7 ELSE b_new:15 END [as=upsert_b:19]
      │         ├── CASE WHEN a:10 IS NULL THEN c_default:8 ELSE c_new:16 END [as=upsert_c:20]
      │         └── CASE WHEN a:10 IS NULL THEN d_comp:9 ELSE d_comp:17 END [as=upsert_d:21]
      └── projections
           ├── upsert_b:19 < upsert_d:21 [as=check1:22]
           └── upsert_a:18 > 0 [as=check2:23]

# INSERT..ON CONFLICT DO NOTHING
build
INSERT INTO checks (a, b) VALUES (1, 2) ON CONFLICT (a) DO NOTHING
----
insert checks
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── insert-mapping:
 │    ├── column1:6 => a:1
 │    ├── column2:7 => b:2
 │    ├── c_default:8 => c:3
 │    └── d_comp:9 => d:4
 ├── check columns: check1:15 check2:16
 └── project
      ├── columns: check1:15 check2:16!null column1:6!null column2:7!null c_default:8 d_comp:9
      ├── upsert-distinct-on
      │    ├── columns: column1:6!null column2:7!null c_default:8 d_comp:9
      │    ├── grouping columns: column1:6!null
      │    ├── anti-join (hash)
      │    │    ├── columns: column1:6!null column2:7!null c_default:8 d_comp:9
      │    │    ├── project
      │    │    │    ├── columns: d_comp:9 column1:6!null column2:7!null c_default:8
      │    │    │    ├── project
      │    │    │    │    ├── columns: c_default:8 column1:6!null column2:7!null
      │    │    │    │    ├── values
      │    │    │    │    │    ├── columns: column1:6!null column2:7!null
      │    │    │    │    │    └── (1, 2)
      │    │    │    │    └── projections
      │    │    │    │         └── NULL::INT8 [as=c_default:8]
      │    │    │    └── projections
      │    │    │         └── c_default:8 + 1 [as=d_comp:9]
      │    │    ├── scan checks
      │    │    │    ├── columns: a:10!null b:11 c:12 d:13
      │    │    │    ├── check constraint expressions
      │    │    │    │    └── a:10 > 0
      │    │    │    └── computed column expressions
      │    │    │         └── d:13
      │    │    │              └── c:12 + 1
      │    │    └── filters
      │    │         └── column1:6 = a:10
      │    └── aggregations
      │         ├── first-agg [as=column2:7]
      │         │    └── column2:7
      │         ├── first-agg [as=c_default:8]
      │         │    └── c_default:8
      │         └── first-agg [as=d_comp:9]
      │              └── d_comp:9
      └── projections
           ├── column2:7 < d_comp:9 [as=check1:15]
           └── column1:6 > 0 [as=check2:16]

# UPSERT
build
UPSERT INTO checks (a, b) VALUES (1, 2)
----
upsert checks
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: a:10
 ├── fetch columns: a:10 b:11 c:12 d:13
 ├── insert-mapping:
 │    ├── column1:6 => a:1
 │    ├── column2:7 => b:2
 │    ├── c_default:8 => c:3
 │    └── d_comp:9 => d:4
 ├── update-mapping:
 │    └── column2:7 => b:2
 ├── check columns: check1:19 check2:20
 └── project
      ├── columns: check1:19 check2:20 column1:6!null column2:7!null c_default:8 d_comp:9 a:10 b:11 c:12 d:13 crdb_internal_mvcc_timestamp:14 d_comp:15 upsert_a:16 upsert_c:17 upsert_d:18
      ├── project
      │    ├── columns: upsert_a:16 upsert_c:17 upsert_d:18 column1:6!null column2:7!null c_default:8 d_comp:9 a:10 b:11 c:12 d:13 crdb_internal_mvcc_timestamp:14 d_comp:15
      │    ├── project
      │    │    ├── columns: d_comp:15 column1:6!null column2:7!null c_default:8 d_comp:9 a:10 b:11 c:12 d:13 crdb_internal_mvcc_timestamp:14
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:6!null column2:7!null c_default:8 d_comp:9 a:10 b:11 c:12 d:13 crdb_internal_mvcc_timestamp:14
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: column1:6!null column2:7!null c_default:8 d_comp:9
      │    │    │    │    ├── grouping columns: column1:6!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: d_comp:9 column1:6!null column2:7!null c_default:8
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: c_default:8 column1:6!null column2:7!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:6!null column2:7!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── NULL::INT8 [as=c_default:8]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── c_default:8 + 1 [as=d_comp:9]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column2:7]
      │    │    │    │         │    └── column2:7
      │    │    │    │         ├── first-agg [as=c_default:8]
      │    │    │    │         │    └── c_default:8
      │    │    │    │         └── first-agg [as=d_comp:9]
      │    │    │    │              └── d_comp:9
      │    │    │    ├── scan checks
      │    │    │    │    ├── columns: a:10!null b:11 c:12 d:13 crdb_internal_mvcc_timestamp:14
      │    │    │    │    ├── check constraint expressions
      │    │    │    │    │    └── a:10 > 0
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── d:13
      │    │    │    │              └── c:12 + 1
      │    │    │    └── filters
      │    │    │         └── column1:6 = a:10
      │    │    └── projections
      │    │         └── c:12 + 1 [as=d_comp:15]
      │    └── projections
      │         ├── CASE WHEN a:10 IS NULL THEN column1:6 ELSE a:10 END [as=upsert_a:16]
      │         ├── CASE WHEN a:10 IS NULL THEN c_default:8 ELSE c:12 END [as=upsert_c:17]
      │         └── CASE WHEN a:10 IS NULL THEN d_comp:9 ELSE d:13 END [as=upsert_d:18]
      └── projections
           ├── column2:7 < upsert_d:18 [as=check1:19]
           └── upsert_a:16 > 0 [as=check2:20]

# Use subqueries and excluded.
build
INSERT INTO checks
SELECT a, b FROM abc
ON CONFLICT (a) DO UPDATE SET a=excluded.a, b=(SELECT x FROM xyz WHERE x=checks.a)
----
upsert checks
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: checks.a:13
 ├── fetch columns: checks.a:13 checks.b:14 checks.c:15 d:16
 ├── insert-mapping:
 │    ├── abc.a:6 => checks.a:1
 │    ├── abc.b:7 => checks.b:2
 │    ├── c_default:11 => checks.c:3
 │    └── d_comp:12 => d:4
 ├── update-mapping:
 │    ├── abc.a:6 => checks.a:1
 │    └── upsert_b:24 => checks.b:2
 ├── check columns: check1:27 check2:28
 └── project
      ├── columns: check1:27 check2:28!null abc.a:6!null abc.b:7 c_default:11 d_comp:12 checks.a:13 checks.b:14 checks.c:15 d:16 checks.crdb_internal_mvcc_timestamp:17 b_new:22 d_comp:23 upsert_b:24 upsert_c:25 upsert_d:26
      ├── project
      │    ├── columns: upsert_b:24 upsert_c:25 upsert_d:26 abc.a:6!null abc.b:7 c_default:11 d_comp:12 checks.a:13 checks.b:14 checks.c:15 d:16 checks.crdb_internal_mvcc_timestamp:17 b_new:22 d_comp:23
      │    ├── project
      │    │    ├── columns: d_comp:23 abc.a:6!null abc.b:7 c_default:11 d_comp:12 checks.a:13 checks.b:14 checks.c:15 d:16 checks.crdb_internal_mvcc_timestamp:17 b_new:22
      │    │    ├── project
      │    │    │    ├── columns: b_new:22 abc.a:6!null abc.b:7 c_default:11 d_comp:12 checks.a:13 checks.b:14 checks.c:15 d:16 checks.crdb_internal_mvcc_timestamp:17
      │    │    │    ├── left-join (hash)
      │    │    │    │    ├── columns: abc.a:6!null abc.b:7 c_default:11 d_comp:12 checks.a:13 checks.b:14 checks.c:15 d:16 checks.crdb_internal_mvcc_timestamp:17
      │    │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    │    ├── columns: abc.a:6!null abc.b:7 c_default:11 d_comp:12
      │    │    │    │    │    ├── grouping columns: abc.a:6!null
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: d_comp:12 abc.a:6!null abc.b:7 c_default:11
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: c_default:11 abc.a:6!null abc.b:7
      │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    ├── columns: abc.a:6!null abc.b:7
      │    │    │    │    │    │    │    │    └── scan abc
      │    │    │    │    │    │    │    │         ├── columns: abc.a:6!null abc.b:7 abc.c:8 rowid:9!null abc.crdb_internal_mvcc_timestamp:10
      │    │    │    │    │    │    │    │         └── computed column expressions
      │    │    │    │    │    │    │    │              └── abc.c:8
      │    │    │    │    │    │    │    │                   └── abc.b:7 + 1
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         └── NULL::INT8 [as=c_default:11]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── c_default:11 + 1 [as=d_comp:12]
      │    │    │    │    │    └── aggregations
      │    │    │    │    │         ├── first-agg [as=abc.b:7]
      │    │    │    │    │         │    └── abc.b:7
      │    │    │    │    │         ├── first-agg [as=c_default:11]
      │    │    │    │    │         │    └── c_default:11
      │    │    │    │    │         └── first-agg [as=d_comp:12]
      │    │    │    │    │              └── d_comp:12
      │    │    │    │    ├── scan checks
      │    │    │    │    │    ├── columns: checks.a:13!null checks.b:14 checks.c:15 d:16 checks.crdb_internal_mvcc_timestamp:17
      │    │    │    │    │    ├── check constraint expressions
      │    │    │    │    │    │    └── checks.a:13 > 0
      │    │    │    │    │    └── computed column expressions
      │    │    │    │    │         └── d:16
      │    │    │    │    │              └── checks.c:15 + 1
      │    │    │    │    └── filters
      │    │    │    │         └── abc.a:6 = checks.a:13
      │    │    │    └── projections
      │    │    │         └── subquery [as=b_new:22]
      │    │    │              └── max1-row
      │    │    │                   ├── columns: x:18!null
      │    │    │                   └── project
      │    │    │                        ├── columns: x:18!null
      │    │    │                        └── select
      │    │    │                             ├── columns: x:18!null y:19 z:20 xyz.crdb_internal_mvcc_timestamp:21
      │    │    │                             ├── scan xyz
      │    │    │                             │    └── columns: x:18!null y:19 z:20 xyz.crdb_internal_mvcc_timestamp:21
      │    │    │                             └── filters
      │    │    │                                  └── x:18 = checks.a:13
      │    │    └── projections
      │    │         └── checks.c:15 + 1 [as=d_comp:23]
      │    └── projections
      │         ├── CASE WHEN checks.a:13 IS NULL THEN abc.b:7 ELSE b_new:22 END [as=upsert_b:24]
      │         ├── CASE WHEN checks.a:13 IS NULL THEN c_default:11 ELSE checks.c:15 END [as=upsert_c:25]
      │         └── CASE WHEN checks.a:13 IS NULL THEN d_comp:12 ELSE d:16 END [as=upsert_d:26]
      └── projections
           ├── upsert_b:24 < upsert_d:26 [as=check1:27]
           └── abc.a:6 > 0 [as=check2:28]

# Use ORDER BY in upsert input (should be ignored and not cause error).
build
INSERT INTO xyz
SELECT a, b, c FROM abc ORDER BY a
ON CONFLICT (z, y) DO UPDATE SET y=5
----
upsert xyz
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── canary column: x:10
 ├── fetch columns: x:10 y:11 z:12
 ├── insert-mapping:
 │    ├── a:5 => x:1
 │    ├── b:6 => y:2
 │    └── c:7 => z:3
 ├── update-mapping:
 │    └── upsert_y:16 => y:2
 └── project
      ├── columns: upsert_x:15 upsert_y:16 upsert_z:17 a:5!null b:6 c:7 x:10 y:11 z:12 xyz.crdb_internal_mvcc_timestamp:13 y_new:14!null
      ├── project
      │    ├── columns: y_new:14!null a:5!null b:6 c:7 x:10 y:11 z:12 xyz.crdb_internal_mvcc_timestamp:13
      │    ├── left-join (hash)
      │    │    ├── columns: a:5!null b:6 c:7 x:10 y:11 z:12 xyz.crdb_internal_mvcc_timestamp:13
      │    │    ├── ensure-upsert-distinct-on
      │    │    │    ├── columns: a:5!null b:6 c:7
      │    │    │    ├── grouping columns: b:6 c:7
      │    │    │    ├── project
      │    │    │    │    ├── columns: a:5!null b:6 c:7
      │    │    │    │    └── scan abc
      │    │    │    │         ├── columns: a:5!null b:6 c:7 rowid:8!null abc.crdb_internal_mvcc_timestamp:9
      │    │    │    │         └── computed column expressions
      │    │    │    │              └── c:7
      │    │    │    │                   └── b:6 + 1
      │    │    │    └── aggregations
      │    │    │         └── first-agg [as=a:5]
      │    │    │              └── a:5
      │    │    ├── scan xyz
      │    │    │    └── columns: x:10!null y:11 z:12 xyz.crdb_internal_mvcc_timestamp:13
      │    │    └── filters
      │    │         ├── b:6 = y:11
      │    │         └── c:7 = z:12
      │    └── projections
      │         └── 5 [as=y_new:14]
      └── projections
           ├── CASE WHEN x:10 IS NULL THEN a:5 ELSE x:10 END [as=upsert_x:15]
           ├── CASE WHEN x:10 IS NULL THEN b:6 ELSE y_new:14 END [as=upsert_y:16]
           └── CASE WHEN x:10 IS NULL THEN c:7 ELSE z:12 END [as=upsert_z:17]

# ------------------------------------------------------------------------------
# Test decimal column truncation.
# ------------------------------------------------------------------------------

# Fast UPSERT case.
build
UPSERT INTO decimals (a, b) VALUES (1.1, ARRAY[0.95])
----
upsert decimals
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: decimals.a:14
 ├── fetch columns: decimals.a:14 decimals.b:15 c:16 d:17
 ├── insert-mapping:
 │    ├── a:9 => decimals.a:1
 │    ├── b:10 => decimals.b:2
 │    ├── c_default:11 => c:3
 │    └── d_comp:13 => d:4
 ├── update-mapping:
 │    └── b:10 => decimals.b:2
 ├── check columns: check1:23 check2:24
 └── project
      ├── columns: check1:23 check2:24 a:9 b:10 c_default:11 d_comp:13 decimals.a:14 decimals.b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18 d_comp:19 upsert_a:20 upsert_c:21 upsert_d:22
      ├── project
      │    ├── columns: upsert_a:20 upsert_c:21 upsert_d:22 a:9 b:10 c_default:11 d_comp:13 decimals.a:14 decimals.b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18 d_comp:19
      │    ├── project
      │    │    ├── columns: d_comp:19 a:9 b:10 c_default:11 d_comp:13 decimals.a:14 decimals.b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: a:9 b:10 c_default:11 d_comp:13 decimals.a:14 decimals.b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: a:9 b:10 c_default:11 d_comp:13
      │    │    │    │    ├── grouping columns: a:9
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: d_comp:13 a:9 b:10 c_default:11
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: d_comp:12 a:9 b:10 c_default:11
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: a:9 b:10 c_default:11
      │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    ├── columns: c_default:8!null column1:6!null column2:7
      │    │    │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    │    │    ├── columns: column1:6!null column2:7
      │    │    │    │    │    │    │    │    │    └── (1.1, ARRAY[0.95])
      │    │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │    │         └── 1.23 [as=c_default:8]
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         ├── crdb_internal.round_decimal_values(column1:6, 0) [as=a:9]
      │    │    │    │    │    │    │         ├── crdb_internal.round_decimal_values(column2:7, 1) [as=b:10]
      │    │    │    │    │    │    │         └── crdb_internal.round_decimal_values(c_default:8, 1) [as=c_default:11]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── a:9 + c_default:11 [as=d_comp:12]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── crdb_internal.round_decimal_values(d_comp:12, 1) [as=d_comp:13]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=b:10]
      │    │    │    │         │    └── b:10
      │    │    │    │         ├── first-agg [as=c_default:11]
      │    │    │    │         │    └── c_default:11
      │    │    │    │         └── first-agg [as=d_comp:13]
      │    │    │    │              └── d_comp:13
      │    │    │    ├── scan decimals
      │    │    │    │    ├── columns: decimals.a:14!null decimals.b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── d:17
      │    │    │    │              └── decimals.a:14::DECIMAL + c:16::DECIMAL
      │    │    │    └── filters
      │    │    │         └── a:9 = decimals.a:14
      │    │    └── projections
      │    │         └── decimals.a:14::DECIMAL + c:16::DECIMAL [as=d_comp:19]
      │    └── projections
      │         ├── CASE WHEN decimals.a:14 IS NULL THEN a:9 ELSE decimals.a:14 END [as=upsert_a:20]
      │         ├── CASE WHEN decimals.a:14 IS NULL THEN c_default:11 ELSE c:16 END [as=upsert_c:21]
      │         └── CASE WHEN decimals.a:14 IS NULL THEN d_comp:13 ELSE d:17 END [as=upsert_d:22]
      └── projections
           ├── round(upsert_a:20) = upsert_a:20 [as=check1:23]
           └── b:10[0] > 1 [as=check2:24]

# Regular UPSERT case.
build
UPSERT INTO decimals (a) VALUES (1.1)
----
upsert decimals
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: decimals.a:14
 ├── fetch columns: decimals.a:14 b:15 c:16 d:17
 ├── insert-mapping:
 │    ├── a:9 => decimals.a:1
 │    ├── b_default:10 => b:2
 │    ├── c_default:11 => c:3
 │    └── d_comp:13 => d:4
 ├── check columns: check1:24 check2:25
 └── project
      ├── columns: check1:24 check2:25 a:9 b_default:10 c_default:11 d_comp:13 decimals.a:14 b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18 d_comp:19 upsert_a:20 upsert_b:21 upsert_c:22 upsert_d:23
      ├── project
      │    ├── columns: upsert_a:20 upsert_b:21 upsert_c:22 upsert_d:23 a:9 b_default:10 c_default:11 d_comp:13 decimals.a:14 b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18 d_comp:19
      │    ├── project
      │    │    ├── columns: d_comp:19 a:9 b_default:10 c_default:11 d_comp:13 decimals.a:14 b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: a:9 b_default:10 c_default:11 d_comp:13 decimals.a:14 b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: a:9 b_default:10 c_default:11 d_comp:13
      │    │    │    │    ├── grouping columns: a:9
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: d_comp:13 a:9 b_default:10 c_default:11
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: d_comp:12 a:9 b_default:10 c_default:11
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: a:9 b_default:10 c_default:11
      │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    ├── columns: b_default:7 c_default:8!null column1:6!null
      │    │    │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    │    │    ├── columns: column1:6!null
      │    │    │    │    │    │    │    │    │    └── (1.1,)
      │    │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │    │         ├── NULL::DECIMAL(5,1)[] [as=b_default:7]
      │    │    │    │    │    │    │    │         └── 1.23 [as=c_default:8]
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         ├── crdb_internal.round_decimal_values(column1:6, 0) [as=a:9]
      │    │    │    │    │    │    │         ├── crdb_internal.round_decimal_values(b_default:7, 1) [as=b_default:10]
      │    │    │    │    │    │    │         └── crdb_internal.round_decimal_values(c_default:8, 1) [as=c_default:11]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── a:9 + c_default:11 [as=d_comp:12]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── crdb_internal.round_decimal_values(d_comp:12, 1) [as=d_comp:13]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=b_default:10]
      │    │    │    │         │    └── b_default:10
      │    │    │    │         ├── first-agg [as=c_default:11]
      │    │    │    │         │    └── c_default:11
      │    │    │    │         └── first-agg [as=d_comp:13]
      │    │    │    │              └── d_comp:13
      │    │    │    ├── scan decimals
      │    │    │    │    ├── columns: decimals.a:14!null b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── d:17
      │    │    │    │              └── decimals.a:14::DECIMAL + c:16::DECIMAL
      │    │    │    └── filters
      │    │    │         └── a:9 = decimals.a:14
      │    │    └── projections
      │    │         └── decimals.a:14::DECIMAL + c:16::DECIMAL [as=d_comp:19]
      │    └── projections
      │         ├── CASE WHEN decimals.a:14 IS NULL THEN a:9 ELSE decimals.a:14 END [as=upsert_a:20]
      │         ├── CASE WHEN decimals.a:14 IS NULL THEN b_default:10 ELSE b:15 END [as=upsert_b:21]
      │         ├── CASE WHEN decimals.a:14 IS NULL THEN c_default:11 ELSE c:16 END [as=upsert_c:22]
      │         └── CASE WHEN decimals.a:14 IS NULL THEN d_comp:13 ELSE d:17 END [as=upsert_d:23]
      └── projections
           ├── round(upsert_a:20) = upsert_a:20 [as=check1:24]
           └── upsert_b:21[0] > 1 [as=check2:25]

# INSERT...ON CONFLICT case.
build
INSERT INTO decimals (a, b) VALUES (1.1, ARRAY[0.95])
ON CONFLICT (a)
DO UPDATE SET b=ARRAY[0.99]
----
upsert decimals
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: decimals.a:14
 ├── fetch columns: decimals.a:14 decimals.b:15 c:16 d:17
 ├── insert-mapping:
 │    ├── a:9 => decimals.a:1
 │    ├── b:10 => decimals.b:2
 │    ├── c_default:11 => c:3
 │    └── d_comp:13 => d:4
 ├── update-mapping:
 │    └── upsert_b:23 => decimals.b:2
 ├── check columns: check1:26 check2:27
 └── project
      ├── columns: check1:26 check2:27 a:9 b:10 c_default:11 d_comp:13 decimals.a:14 decimals.b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18 b_new:20 d_comp:21 upsert_a:22 upsert_b:23 upsert_c:24 upsert_d:25
      ├── project
      │    ├── columns: upsert_a:22 upsert_b:23 upsert_c:24 upsert_d:25 a:9 b:10 c_default:11 d_comp:13 decimals.a:14 decimals.b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18 b_new:20 d_comp:21
      │    ├── project
      │    │    ├── columns: d_comp:21 a:9 b:10 c_default:11 d_comp:13 decimals.a:14 decimals.b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18 b_new:20
      │    │    ├── project
      │    │    │    ├── columns: b_new:20 a:9 b:10 c_default:11 d_comp:13 decimals.a:14 decimals.b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18
      │    │    │    ├── project
      │    │    │    │    ├── columns: b_new:19!null a:9 b:10 c_default:11 d_comp:13 decimals.a:14 decimals.b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18
      │    │    │    │    ├── left-join (hash)
      │    │    │    │    │    ├── columns: a:9 b:10 c_default:11 d_comp:13 decimals.a:14 decimals.b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18
      │    │    │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    │    │    ├── columns: a:9 b:10 c_default:11 d_comp:13
      │    │    │    │    │    │    ├── grouping columns: a:9
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: d_comp:13 a:9 b:10 c_default:11
      │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    ├── columns: d_comp:12 a:9 b:10 c_default:11
      │    │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    │    ├── columns: a:9 b:10 c_default:11
      │    │    │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    │    │    ├── columns: c_default:8!null column1:6!null column2:7
      │    │    │    │    │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    │    │    │    │    ├── columns: column1:6!null column2:7
      │    │    │    │    │    │    │    │    │    │    │    └── (1.1, ARRAY[0.95])
      │    │    │    │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │    │    │    │         └── 1.23 [as=c_default:8]
      │    │    │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │    │    │         ├── crdb_internal.round_decimal_values(column1:6, 0) [as=a:9]
      │    │    │    │    │    │    │    │    │         ├── crdb_internal.round_decimal_values(column2:7, 1) [as=b:10]
      │    │    │    │    │    │    │    │    │         └── crdb_internal.round_decimal_values(c_default:8, 1) [as=c_default:11]
      │    │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │    │         └── a:9 + c_default:11 [as=d_comp:12]
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         └── crdb_internal.round_decimal_values(d_comp:12, 1) [as=d_comp:13]
      │    │    │    │    │    │    └── aggregations
      │    │    │    │    │    │         ├── first-agg [as=b:10]
      │    │    │    │    │    │         │    └── b:10
      │    │    │    │    │    │         ├── first-agg [as=c_default:11]
      │    │    │    │    │    │         │    └── c_default:11
      │    │    │    │    │    │         └── first-agg [as=d_comp:13]
      │    │    │    │    │    │              └── d_comp:13
      │    │    │    │    │    ├── scan decimals
      │    │    │    │    │    │    ├── columns: decimals.a:14!null decimals.b:15 c:16 d:17 crdb_internal_mvcc_timestamp:18
      │    │    │    │    │    │    └── computed column expressions
      │    │    │    │    │    │         └── d:17
      │    │    │    │    │    │              └── decimals.a:14::DECIMAL + c:16::DECIMAL
      │    │    │    │    │    └── filters
      │    │    │    │    │         └── a:9 = decimals.a:14
      │    │    │    │    └── projections
      │    │    │    │         └── ARRAY[0.99] [as=b_new:19]
      │    │    │    └── projections
      │    │    │         └── crdb_internal.round_decimal_values(b_new:19, 1) [as=b_new:20]
      │    │    └── projections
      │    │         └── decimals.a:14::DECIMAL + c:16::DECIMAL [as=d_comp:21]
      │    └── projections
      │         ├── CASE WHEN decimals.a:14 IS NULL THEN a:9 ELSE decimals.a:14 END [as=upsert_a:22]
      │         ├── CASE WHEN decimals.a:14 IS NULL THEN b:10 ELSE b_new:20 END [as=upsert_b:23]
      │         ├── CASE WHEN decimals.a:14 IS NULL THEN c_default:11 ELSE c:16 END [as=upsert_c:24]
      │         └── CASE WHEN decimals.a:14 IS NULL THEN d_comp:13 ELSE d:17 END [as=upsert_d:25]
      └── projections
           ├── round(upsert_a:22) = upsert_a:22 [as=check1:26]
           └── upsert_b:23[0] > 1 [as=check2:27]
