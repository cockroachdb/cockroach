exec-ddl
CREATE TABLE abc (
    a INT NOT NULL,
    b INT DEFAULT (10),
    c INT AS (abc.b + 1) STORED,
    UNIQUE(a),
    UNIQUE(b, c)
)
----
TABLE abc
 ├── a int not null
 ├── b int
 ├── c int
 ├── rowid int not null (hidden)
 ├── INDEX primary
 │    └── rowid int not null (hidden)
 ├── INDEX secondary
 │    ├── a int not null
 │    └── rowid int not null (hidden) (storing)
 └── INDEX secondary
      ├── b int
      ├── c int
      └── rowid int not null (hidden) (storing)

exec-ddl
CREATE TABLE xyz (
    x INT PRIMARY KEY,
    y INT,
    z INT,
    UNIQUE (y, z),
    UNIQUE (z, y),
    INDEX (y DESC)
)
----
TABLE xyz
 ├── x int not null
 ├── y int
 ├── z int
 ├── INDEX primary
 │    └── x int not null
 ├── INDEX secondary
 │    ├── y int
 │    ├── z int
 │    └── x int not null (storing)
 ├── INDEX secondary
 │    ├── z int
 │    ├── y int
 │    └── x int not null (storing)
 └── INDEX secondary
      ├── y int desc
      └── x int not null

exec-ddl
CREATE TABLE uv (
    u INT,
    v INT,
    PRIMARY KEY (u, v)
)
----
TABLE uv
 ├── u int not null
 ├── v int not null
 └── INDEX primary
      ├── u int not null
      └── v int not null

exec-ddl
CREATE TABLE mutation (
    m INT PRIMARY KEY,
    n INT,
    "o:write-only" INT DEFAULT(10),
    "p:write-only" INT AS (o + n) STORED
)
----
TABLE mutation
 ├── m int not null
 ├── n int
 ├── o int
 ├── p int
 └── INDEX primary
      └── m int not null

# ------------------------------------------------------------------------------
# Basic tests.
# ------------------------------------------------------------------------------

# Set single column, single column conflict.
build
INSERT INTO abc (a, b)
SELECT x, y FROM xyz
ON CONFLICT (a) DO
UPDATE SET a=5
----
upsert abc
 ├── columns: <none>
 ├── canary column: 13
 ├── fetch columns: a:10(int) b:11(int) c:12(int) rowid:13(int)
 ├── insert-mapping:
 │    ├──  x:5 => a:1
 │    ├──  y:6 => b:2
 │    ├──  column9:9 => c:3
 │    └──  column8:8 => rowid:4
 ├── update-mapping:
 │    ├──  column14:14 => a:1
 │    └──  column15:15 => c:3
 └── project
      ├── columns: column15:15(int) x:5(int!null) y:6(int) column8:8(int) column9:9(int) a:10(int) b:11(int) c:12(int) rowid:13(int) column14:14(int!null)
      ├── project
      │    ├── columns: column14:14(int!null) x:5(int!null) y:6(int) column8:8(int) column9:9(int) a:10(int) b:11(int) c:12(int) rowid:13(int)
      │    ├── left-join
      │    │    ├── columns: x:5(int!null) y:6(int) column8:8(int) column9:9(int) a:10(int) b:11(int) c:12(int) rowid:13(int)
      │    │    ├── project
      │    │    │    ├── columns: column9:9(int) x:5(int!null) y:6(int) column8:8(int)
      │    │    │    ├── project
      │    │    │    │    ├── columns: column8:8(int) x:5(int!null) y:6(int)
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: x:5(int!null) y:6(int)
      │    │    │    │    │    └── scan xyz
      │    │    │    │    │         └── columns: x:5(int!null) y:6(int) z:7(int)
      │    │    │    │    └── projections
      │    │    │    │         └── function: unique_rowid [type=int]
      │    │    │    └── projections
      │    │    │         └── plus [type=int]
      │    │    │              ├── variable: y [type=int]
      │    │    │              └── const: 1 [type=int]
      │    │    ├── scan abc
      │    │    │    └── columns: a:10(int!null) b:11(int) c:12(int) rowid:13(int!null)
      │    │    └── filters
      │    │         └── eq [type=bool]
      │    │              ├── variable: x [type=int]
      │    │              └── variable: a [type=int]
      │    └── projections
      │         └── const: 5 [type=int]
      └── projections
           └── plus [type=int]
                ├── variable: b [type=int]
                └── const: 1 [type=int]

# Set all columns, multi-column conflict.
build
INSERT INTO abc (a, b, rowid)
SELECT x, y, z FROM xyz
ON CONFLICT (b, c) DO
UPDATE SET a=1, b=2, rowid=3
RETURNING *
----
project
 ├── columns: a:1(int!null) b:2(int) c:3(int)
 └── upsert abc
      ├── columns: a:1(int!null) b:2(int) c:3(int) rowid:4(int!null)
      ├── canary column: 12
      ├── fetch columns: a:9(int) b:10(int) c:11(int) rowid:12(int)
      ├── insert-mapping:
      │    ├──  x:5 => a:1
      │    ├──  y:6 => b:2
      │    ├──  column8:8 => c:3
      │    └──  z:7 => rowid:4
      ├── update-mapping:
      │    ├──  column13:13 => a:1
      │    ├──  column14:14 => b:2
      │    ├──  column16:16 => c:3
      │    └──  column15:15 => rowid:4
      └── project
           ├── columns: column16:16(int) x:5(int!null) y:6(int) z:7(int) column8:8(int) a:9(int) b:10(int) c:11(int) rowid:12(int) column13:13(int!null) column14:14(int!null) column15:15(int!null)
           ├── project
           │    ├── columns: column13:13(int!null) column14:14(int!null) column15:15(int!null) x:5(int!null) y:6(int) z:7(int) column8:8(int) a:9(int) b:10(int) c:11(int) rowid:12(int)
           │    ├── left-join
           │    │    ├── columns: x:5(int!null) y:6(int) z:7(int) column8:8(int) a:9(int) b:10(int) c:11(int) rowid:12(int)
           │    │    ├── project
           │    │    │    ├── columns: column8:8(int) x:5(int!null) y:6(int) z:7(int)
           │    │    │    ├── scan xyz
           │    │    │    │    └── columns: x:5(int!null) y:6(int) z:7(int)
           │    │    │    └── projections
           │    │    │         └── plus [type=int]
           │    │    │              ├── variable: y [type=int]
           │    │    │              └── const: 1 [type=int]
           │    │    ├── scan abc
           │    │    │    └── columns: a:9(int!null) b:10(int) c:11(int) rowid:12(int!null)
           │    │    └── filters
           │    │         ├── eq [type=bool]
           │    │         │    ├── variable: y [type=int]
           │    │         │    └── variable: b [type=int]
           │    │         └── eq [type=bool]
           │    │              ├── variable: column8 [type=int]
           │    │              └── variable: c [type=int]
           │    └── projections
           │         ├── const: 1 [type=int]
           │         ├── const: 2 [type=int]
           │         └── const: 3 [type=int]
           └── projections
                └── plus [type=int]
                     ├── variable: column14 [type=int]
                     └── const: 1 [type=int]

# UPDATE + WHERE clause.
build
INSERT INTO abc
SELECT x, y FROM xyz
ON CONFLICT (a) DO
UPDATE SET b=10
WHERE abc.a>0
----
upsert abc
 ├── columns: <none>
 ├── canary column: 13
 ├── fetch columns: a:10(int) b:11(int) c:12(int) rowid:13(int)
 ├── insert-mapping:
 │    ├──  x:5 => a:1
 │    ├──  y:6 => b:2
 │    ├──  column9:9 => c:3
 │    └──  column8:8 => rowid:4
 ├── update-mapping:
 │    ├──  column14:14 => b:2
 │    └──  column15:15 => c:3
 └── project
      ├── columns: column15:15(int) x:5(int!null) y:6(int) column8:8(int) column9:9(int) a:10(int) b:11(int) c:12(int) rowid:13(int) column14:14(int!null)
      ├── project
      │    ├── columns: column14:14(int!null) x:5(int!null) y:6(int) column8:8(int) column9:9(int) a:10(int) b:11(int) c:12(int) rowid:13(int)
      │    ├── select
      │    │    ├── columns: x:5(int!null) y:6(int) column8:8(int) column9:9(int) a:10(int) b:11(int) c:12(int) rowid:13(int)
      │    │    ├── left-join
      │    │    │    ├── columns: x:5(int!null) y:6(int) column8:8(int) column9:9(int) a:10(int) b:11(int) c:12(int) rowid:13(int)
      │    │    │    ├── project
      │    │    │    │    ├── columns: column9:9(int) x:5(int!null) y:6(int) column8:8(int)
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: column8:8(int) x:5(int!null) y:6(int)
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: x:5(int!null) y:6(int)
      │    │    │    │    │    │    └── scan xyz
      │    │    │    │    │    │         └── columns: x:5(int!null) y:6(int) z:7(int)
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── function: unique_rowid [type=int]
      │    │    │    │    └── projections
      │    │    │    │         └── plus [type=int]
      │    │    │    │              ├── variable: y [type=int]
      │    │    │    │              └── const: 1 [type=int]
      │    │    │    ├── scan abc
      │    │    │    │    └── columns: a:10(int!null) b:11(int) c:12(int) rowid:13(int!null)
      │    │    │    └── filters
      │    │    │         └── eq [type=bool]
      │    │    │              ├── variable: x [type=int]
      │    │    │              └── variable: a [type=int]
      │    │    └── filters
      │    │         └── or [type=bool]
      │    │              ├── is [type=bool]
      │    │              │    ├── variable: rowid [type=int]
      │    │              │    └── null [type=unknown]
      │    │              └── gt [type=bool]
      │    │                   ├── variable: a [type=int]
      │    │                   └── const: 0 [type=int]
      │    └── projections
      │         └── const: 10 [type=int]
      └── projections
           └── plus [type=int]
                ├── variable: column14 [type=int]
                └── const: 1 [type=int]

# Use RETURNING INSERT..ON CONFLICT as a FROM clause.
build
SELECT *
FROM [INSERT INTO abc (a, b) VALUES (1,2), (3,4) ON CONFLICT (a) DO UPDATE SET b=1 RETURNING *]
ORDER BY a, b DESC
----
sort
 ├── columns: a:1(int!null) b:2(int) c:3(int)
 ├── ordering: +1,-2
 └── project
      ├── columns: a:1(int!null) b:2(int) c:3(int)
      └── upsert abc
           ├── columns: a:1(int!null) b:2(int) c:3(int) rowid:4(int!null)
           ├── canary column: 12
           ├── fetch columns: a:9(int) b:10(int) c:11(int) rowid:12(int)
           ├── insert-mapping:
           │    ├──  column1:5 => a:1
           │    ├──  column2:6 => b:2
           │    ├──  column8:8 => c:3
           │    └──  column7:7 => rowid:4
           ├── update-mapping:
           │    ├──  column13:13 => b:2
           │    └──  column14:14 => c:3
           └── project
                ├── columns: column14:14(int) column1:5(int) column2:6(int) column7:7(int) column8:8(int) a:9(int) b:10(int) c:11(int) rowid:12(int) column13:13(int!null)
                ├── project
                │    ├── columns: column13:13(int!null) column1:5(int) column2:6(int) column7:7(int) column8:8(int) a:9(int) b:10(int) c:11(int) rowid:12(int)
                │    ├── left-join
                │    │    ├── columns: column1:5(int) column2:6(int) column7:7(int) column8:8(int) a:9(int) b:10(int) c:11(int) rowid:12(int)
                │    │    ├── project
                │    │    │    ├── columns: column8:8(int) column1:5(int) column2:6(int) column7:7(int)
                │    │    │    ├── project
                │    │    │    │    ├── columns: column7:7(int) column1:5(int) column2:6(int)
                │    │    │    │    ├── values
                │    │    │    │    │    ├── columns: column1:5(int) column2:6(int)
                │    │    │    │    │    ├── tuple [type=tuple{int, int}]
                │    │    │    │    │    │    ├── const: 1 [type=int]
                │    │    │    │    │    │    └── const: 2 [type=int]
                │    │    │    │    │    └── tuple [type=tuple{int, int}]
                │    │    │    │    │         ├── const: 3 [type=int]
                │    │    │    │    │         └── const: 4 [type=int]
                │    │    │    │    └── projections
                │    │    │    │         └── function: unique_rowid [type=int]
                │    │    │    └── projections
                │    │    │         └── plus [type=int]
                │    │    │              ├── variable: column2 [type=int]
                │    │    │              └── const: 1 [type=int]
                │    │    ├── scan abc
                │    │    │    └── columns: a:9(int!null) b:10(int) c:11(int) rowid:12(int!null)
                │    │    └── filters
                │    │         └── eq [type=bool]
                │    │              ├── variable: column1 [type=int]
                │    │              └── variable: a [type=int]
                │    └── projections
                │         └── const: 1 [type=int]
                └── projections
                     └── plus [type=int]
                          ├── variable: column13 [type=int]
                          └── const: 1 [type=int]

# Use table alias.
build
INSERT INTO abc AS tab (a, b)
VALUES (1, 2)
ON CONFLICT (a) DO
UPDATE SET a=tab.a*excluded.a
----
upsert tab
 ├── columns: <none>
 ├── canary column: 12
 ├── fetch columns: a:9(int) b:10(int) c:11(int) rowid:12(int)
 ├── insert-mapping:
 │    ├──  column1:5 => a:1
 │    ├──  column2:6 => b:2
 │    ├──  column8:8 => c:3
 │    └──  column7:7 => rowid:4
 ├── update-mapping:
 │    ├──  column13:13 => a:1
 │    └──  column14:14 => c:3
 └── project
      ├── columns: column14:14(int) column1:5(int) column2:6(int) column7:7(int) column8:8(int) a:9(int) b:10(int) c:11(int) rowid:12(int) column13:13(int)
      ├── project
      │    ├── columns: column13:13(int) column1:5(int) column2:6(int) column7:7(int) column8:8(int) a:9(int) b:10(int) c:11(int) rowid:12(int)
      │    ├── left-join
      │    │    ├── columns: column1:5(int) column2:6(int) column7:7(int) column8:8(int) a:9(int) b:10(int) c:11(int) rowid:12(int)
      │    │    ├── project
      │    │    │    ├── columns: column8:8(int) column1:5(int) column2:6(int) column7:7(int)
      │    │    │    ├── project
      │    │    │    │    ├── columns: column7:7(int) column1:5(int) column2:6(int)
      │    │    │    │    ├── values
      │    │    │    │    │    ├── columns: column1:5(int) column2:6(int)
      │    │    │    │    │    └── tuple [type=tuple{int, int}]
      │    │    │    │    │         ├── const: 1 [type=int]
      │    │    │    │    │         └── const: 2 [type=int]
      │    │    │    │    └── projections
      │    │    │    │         └── function: unique_rowid [type=int]
      │    │    │    └── projections
      │    │    │         └── plus [type=int]
      │    │    │              ├── variable: column2 [type=int]
      │    │    │              └── const: 1 [type=int]
      │    │    ├── scan tab
      │    │    │    └── columns: a:9(int!null) b:10(int) c:11(int) rowid:12(int!null)
      │    │    └── filters
      │    │         └── eq [type=bool]
      │    │              ├── variable: column1 [type=int]
      │    │              └── variable: a [type=int]
      │    └── projections
      │         └── mult [type=int]
      │              ├── variable: a [type=int]
      │              └── variable: column1 [type=int]
      └── projections
           └── plus [type=int]
                ├── variable: b [type=int]
                └── const: 1 [type=int]

# Conflict columns don't match unique index (too few columns).
build
INSERT INTO abc (a, b)
VALUES (1, 2)
ON CONFLICT (b) DO
UPDATE SET a=5
----
error: there is no unique or exclusion constraint matching the ON CONFLICT specification

# Conflict columns don't match unique index (too many columns).
build
INSERT INTO abc (a, b)
VALUES (1, 2)
ON CONFLICT (a, b) DO
UPDATE SET a=5
----
error: there is no unique or exclusion constraint matching the ON CONFLICT specification

# Conflict columns don't match unique index (wrong order).
build
INSERT INTO abc (a, b)
VALUES (1, 2)
ON CONFLICT (c, b) DO
UPDATE SET a=5
----
error: there is no unique or exclusion constraint matching the ON CONFLICT specification

# ------------------------------------------------------------------------------
# Test DO NOTHING.
# ------------------------------------------------------------------------------

# No conflict columns specified (all non-duplicate indexes must be checked).
build
INSERT INTO xyz
VALUES (1, 2, 3), (4, 5, 6)
ON CONFLICT DO NOTHING
----
insert xyz
 ├── columns: <none>
 ├── insert-mapping:
 │    ├──  column1:4 => xyz.x:1
 │    ├──  column2:5 => xyz.y:2
 │    └──  column3:6 => xyz.z:3
 └── project
      ├── columns: column1:4(int) column2:5(int) column3:6(int)
      └── select
           ├── columns: column1:4(int) column2:5(int) column3:6(int) xyz_3.x:13(int) xyz_3.y:14(int) xyz_3.z:15(int)
           ├── left-join
           │    ├── columns: column1:4(int) column2:5(int) column3:6(int) xyz_3.x:13(int) xyz_3.y:14(int) xyz_3.z:15(int)
           │    ├── project
           │    │    ├── columns: column1:4(int) column2:5(int) column3:6(int)
           │    │    └── select
           │    │         ├── columns: column1:4(int) column2:5(int) column3:6(int) xyz_2.x:10(int) xyz_2.y:11(int) xyz_2.z:12(int)
           │    │         ├── left-join
           │    │         │    ├── columns: column1:4(int) column2:5(int) column3:6(int) xyz_2.x:10(int) xyz_2.y:11(int) xyz_2.z:12(int)
           │    │         │    ├── project
           │    │         │    │    ├── columns: column1:4(int) column2:5(int) column3:6(int)
           │    │         │    │    └── select
           │    │         │    │         ├── columns: column1:4(int) column2:5(int) column3:6(int) xyz_1.x:7(int) xyz_1.y:8(int) xyz_1.z:9(int)
           │    │         │    │         ├── left-join
           │    │         │    │         │    ├── columns: column1:4(int) column2:5(int) column3:6(int) xyz_1.x:7(int) xyz_1.y:8(int) xyz_1.z:9(int)
           │    │         │    │         │    ├── values
           │    │         │    │         │    │    ├── columns: column1:4(int) column2:5(int) column3:6(int)
           │    │         │    │         │    │    ├── tuple [type=tuple{int, int, int}]
           │    │         │    │         │    │    │    ├── const: 1 [type=int]
           │    │         │    │         │    │    │    ├── const: 2 [type=int]
           │    │         │    │         │    │    │    └── const: 3 [type=int]
           │    │         │    │         │    │    └── tuple [type=tuple{int, int, int}]
           │    │         │    │         │    │         ├── const: 4 [type=int]
           │    │         │    │         │    │         ├── const: 5 [type=int]
           │    │         │    │         │    │         └── const: 6 [type=int]
           │    │         │    │         │    ├── scan xyz_1
           │    │         │    │         │    │    └── columns: xyz_1.x:7(int!null) xyz_1.y:8(int) xyz_1.z:9(int)
           │    │         │    │         │    └── filters
           │    │         │    │         │         └── eq [type=bool]
           │    │         │    │         │              ├── variable: column1 [type=int]
           │    │         │    │         │              └── variable: xyz_1.x [type=int]
           │    │         │    │         └── filters
           │    │         │    │              └── is [type=bool]
           │    │         │    │                   ├── variable: xyz_1.x [type=int]
           │    │         │    │                   └── null [type=unknown]
           │    │         │    ├── scan xyz_2
           │    │         │    │    └── columns: xyz_2.x:10(int!null) xyz_2.y:11(int) xyz_2.z:12(int)
           │    │         │    └── filters
           │    │         │         ├── eq [type=bool]
           │    │         │         │    ├── variable: column2 [type=int]
           │    │         │         │    └── variable: xyz_2.y [type=int]
           │    │         │         └── eq [type=bool]
           │    │         │              ├── variable: column3 [type=int]
           │    │         │              └── variable: xyz_2.z [type=int]
           │    │         └── filters
           │    │              └── is [type=bool]
           │    │                   ├── variable: xyz_2.x [type=int]
           │    │                   └── null [type=unknown]
           │    ├── scan xyz_3
           │    │    └── columns: xyz_3.x:13(int!null) xyz_3.y:14(int) xyz_3.z:15(int)
           │    └── filters
           │         ├── eq [type=bool]
           │         │    ├── variable: column3 [type=int]
           │         │    └── variable: xyz_3.z [type=int]
           │         └── eq [type=bool]
           │              ├── variable: column2 [type=int]
           │              └── variable: xyz_3.y [type=int]
           └── filters
                └── is [type=bool]
                     ├── variable: xyz_3.x [type=int]
                     └── null [type=unknown]

# Conflict columns are explicitly specified.
build
INSERT INTO xyz
VALUES (1, 2, 3), (4, 5, 6)
ON CONFLICT (y, z) DO NOTHING
----
insert xyz
 ├── columns: <none>
 ├── insert-mapping:
 │    ├──  column1:4 => xyz.x:1
 │    ├──  column2:5 => xyz.y:2
 │    └──  column3:6 => xyz.z:3
 └── project
      ├── columns: column1:4(int) column2:5(int) column3:6(int)
      └── select
           ├── columns: column1:4(int) column2:5(int) column3:6(int) xyz_2.x:7(int) xyz_2.y:8(int) xyz_2.z:9(int)
           ├── left-join
           │    ├── columns: column1:4(int) column2:5(int) column3:6(int) xyz_2.x:7(int) xyz_2.y:8(int) xyz_2.z:9(int)
           │    ├── values
           │    │    ├── columns: column1:4(int) column2:5(int) column3:6(int)
           │    │    ├── tuple [type=tuple{int, int, int}]
           │    │    │    ├── const: 1 [type=int]
           │    │    │    ├── const: 2 [type=int]
           │    │    │    └── const: 3 [type=int]
           │    │    └── tuple [type=tuple{int, int, int}]
           │    │         ├── const: 4 [type=int]
           │    │         ├── const: 5 [type=int]
           │    │         └── const: 6 [type=int]
           │    ├── scan xyz_2
           │    │    └── columns: xyz_2.x:7(int!null) xyz_2.y:8(int) xyz_2.z:9(int)
           │    └── filters
           │         ├── eq [type=bool]
           │         │    ├── variable: column2 [type=int]
           │         │    └── variable: xyz_2.y [type=int]
           │         └── eq [type=bool]
           │              ├── variable: column3 [type=int]
           │              └── variable: xyz_2.z [type=int]
           └── filters
                └── is [type=bool]
                     ├── variable: xyz_2.x [type=int]
                     └── null [type=unknown]

# ------------------------------------------------------------------------------
# Test excluded columns.
# ------------------------------------------------------------------------------

build
INSERT INTO xyz
VALUES (1, 2, 3), (-1, -1, -1)
ON CONFLICT (z, y) DO
UPDATE SET x=excluded.x+1, y=excluded.y*xyz.y, z=excluded.x-excluded.z
WHERE excluded.y>xyz.y
RETURNING xyz.x*2, y+z
----
project
 ├── columns: "?column?":13(int) "?column?":14(int)
 ├── upsert xyz
 │    ├── columns: x:1(int!null) y:2(int) z:3(int)
 │    ├── canary column: 7
 │    ├── fetch columns: x:7(int) y:8(int) z:9(int)
 │    ├── insert-mapping:
 │    │    ├──  column1:4 => x:1
 │    │    ├──  column2:5 => y:2
 │    │    └──  column3:6 => z:3
 │    ├── update-mapping:
 │    │    ├──  column10:10 => x:1
 │    │    ├──  column11:11 => y:2
 │    │    └──  column12:12 => z:3
 │    └── project
 │         ├── columns: column10:10(int) column11:11(int) column12:12(int) column1:4(int) column2:5(int) column3:6(int) x:7(int) y:8(int) z:9(int)
 │         ├── select
 │         │    ├── columns: column1:4(int) column2:5(int) column3:6(int) x:7(int) y:8(int) z:9(int)
 │         │    ├── left-join
 │         │    │    ├── columns: column1:4(int) column2:5(int) column3:6(int) x:7(int) y:8(int) z:9(int)
 │         │    │    ├── values
 │         │    │    │    ├── columns: column1:4(int) column2:5(int) column3:6(int)
 │         │    │    │    ├── tuple [type=tuple{int, int, int}]
 │         │    │    │    │    ├── const: 1 [type=int]
 │         │    │    │    │    ├── const: 2 [type=int]
 │         │    │    │    │    └── const: 3 [type=int]
 │         │    │    │    └── tuple [type=tuple{int, int, int}]
 │         │    │    │         ├── const: -1 [type=int]
 │         │    │    │         ├── const: -1 [type=int]
 │         │    │    │         └── const: -1 [type=int]
 │         │    │    ├── scan xyz
 │         │    │    │    └── columns: x:7(int!null) y:8(int) z:9(int)
 │         │    │    └── filters
 │         │    │         ├── eq [type=bool]
 │         │    │         │    ├── variable: column3 [type=int]
 │         │    │         │    └── variable: z [type=int]
 │         │    │         └── eq [type=bool]
 │         │    │              ├── variable: column2 [type=int]
 │         │    │              └── variable: y [type=int]
 │         │    └── filters
 │         │         └── or [type=bool]
 │         │              ├── is [type=bool]
 │         │              │    ├── variable: x [type=int]
 │         │              │    └── null [type=unknown]
 │         │              └── gt [type=bool]
 │         │                   ├── variable: column2 [type=int]
 │         │                   └── variable: y [type=int]
 │         └── projections
 │              ├── plus [type=int]
 │              │    ├── variable: column1 [type=int]
 │              │    └── const: 1 [type=int]
 │              ├── mult [type=int]
 │              │    ├── variable: column2 [type=int]
 │              │    └── variable: y [type=int]
 │              └── minus [type=int]
 │                   ├── variable: column1 [type=int]
 │                   └── variable: column3 [type=int]
 └── projections
      ├── mult [type=int]
      │    ├── variable: x [type=int]
      │    └── const: 2 [type=int]
      └── plus [type=int]
           ├── variable: y [type=int]
           └── variable: z [type=int]

# Try to use excluded in RETURNING.
build
INSERT INTO xyz
VALUES (1, 2, 3)
ON CONFLICT (x) DO
UPDATE SET x=1
RETURNING excluded.x
----
error (42P01): no data source matches prefix: excluded

# Referencing column without "excluded" or "xyz" prefix is not allowed.
build
INSERT INTO xyz
VALUES (1, 2, 3)
ON CONFLICT (x) DO
UPDATE SET x=x+1
----
error (42702): column reference "x" is ambiguous (candidates: excluded.x, xyz.x)

# ------------------------------------------------------------------------------
# Test UPDATE SET expressions.
# ------------------------------------------------------------------------------

# Subquery.
build
INSERT INTO abc
VALUES (1, 2)
ON CONFLICT (a) DO
UPDATE SET (b, a)=(SELECT x, y+excluded.b FROM xyz WHERE x=excluded.a)
----
upsert abc
 ├── columns: <none>
 ├── canary column: 12
 ├── fetch columns: a:9(int) b:10(int) c:11(int) rowid:12(int)
 ├── insert-mapping:
 │    ├──  column1:5 => a:1
 │    ├──  column2:6 => b:2
 │    ├──  column8:8 => c:3
 │    └──  column7:7 => rowid:4
 ├── update-mapping:
 │    ├──  "?column?":16 => a:1
 │    ├──  x:13 => b:2
 │    └──  column17:17 => c:3
 └── project
      ├── columns: column17:17(int) column1:5(int) column2:6(int) column7:7(int) column8:8(int) a:9(int) b:10(int) c:11(int) rowid:12(int) x:13(int) "?column?":16(int)
      ├── left-join-apply
      │    ├── columns: column1:5(int) column2:6(int) column7:7(int) column8:8(int) a:9(int) b:10(int) c:11(int) rowid:12(int) x:13(int) "?column?":16(int)
      │    ├── left-join
      │    │    ├── columns: column1:5(int) column2:6(int) column7:7(int) column8:8(int) a:9(int) b:10(int) c:11(int) rowid:12(int)
      │    │    ├── project
      │    │    │    ├── columns: column8:8(int) column1:5(int) column2:6(int) column7:7(int)
      │    │    │    ├── project
      │    │    │    │    ├── columns: column7:7(int) column1:5(int) column2:6(int)
      │    │    │    │    ├── values
      │    │    │    │    │    ├── columns: column1:5(int) column2:6(int)
      │    │    │    │    │    └── tuple [type=tuple{int, int}]
      │    │    │    │    │         ├── const: 1 [type=int]
      │    │    │    │    │         └── const: 2 [type=int]
      │    │    │    │    └── projections
      │    │    │    │         └── function: unique_rowid [type=int]
      │    │    │    └── projections
      │    │    │         └── plus [type=int]
      │    │    │              ├── variable: column2 [type=int]
      │    │    │              └── const: 1 [type=int]
      │    │    ├── scan abc
      │    │    │    └── columns: a:9(int!null) b:10(int) c:11(int) rowid:12(int!null)
      │    │    └── filters
      │    │         └── eq [type=bool]
      │    │              ├── variable: column1 [type=int]
      │    │              └── variable: a [type=int]
      │    ├── max1-row
      │    │    ├── columns: x:13(int!null) "?column?":16(int)
      │    │    └── project
      │    │         ├── columns: "?column?":16(int) x:13(int!null)
      │    │         ├── select
      │    │         │    ├── columns: x:13(int!null) y:14(int) z:15(int)
      │    │         │    ├── scan xyz
      │    │         │    │    └── columns: x:13(int!null) y:14(int) z:15(int)
      │    │         │    └── filters
      │    │         │         └── eq [type=bool]
      │    │         │              ├── variable: x [type=int]
      │    │         │              └── variable: column1 [type=int]
      │    │         └── projections
      │    │              └── plus [type=int]
      │    │                   ├── variable: y [type=int]
      │    │                   └── variable: column2 [type=int]
      │    └── filters (true)
      └── projections
           └── plus [type=int]
                ├── variable: x [type=int]
                └── const: 1 [type=int]

# Default expressions.
build
INSERT INTO abc
VALUES (1, 2)
ON CONFLICT (a) DO
UPDATE SET a=DEFAULT, b=DEFAULT
----
upsert abc
 ├── columns: <none>
 ├── canary column: 12
 ├── fetch columns: a:9(int) b:10(int) c:11(int) rowid:12(int)
 ├── insert-mapping:
 │    ├──  column1:5 => a:1
 │    ├──  column2:6 => b:2
 │    ├──  column8:8 => c:3
 │    └──  column7:7 => rowid:4
 ├── update-mapping:
 │    ├──  column13:13 => a:1
 │    ├──  column14:14 => b:2
 │    └──  column15:15 => c:3
 └── project
      ├── columns: column15:15(int) column1:5(int) column2:6(int) column7:7(int) column8:8(int) a:9(int) b:10(int) c:11(int) rowid:12(int) column13:13(unknown) column14:14(int!null)
      ├── project
      │    ├── columns: column13:13(unknown) column14:14(int!null) column1:5(int) column2:6(int) column7:7(int) column8:8(int) a:9(int) b:10(int) c:11(int) rowid:12(int)
      │    ├── left-join
      │    │    ├── columns: column1:5(int) column2:6(int) column7:7(int) column8:8(int) a:9(int) b:10(int) c:11(int) rowid:12(int)
      │    │    ├── project
      │    │    │    ├── columns: column8:8(int) column1:5(int) column2:6(int) column7:7(int)
      │    │    │    ├── project
      │    │    │    │    ├── columns: column7:7(int) column1:5(int) column2:6(int)
      │    │    │    │    ├── values
      │    │    │    │    │    ├── columns: column1:5(int) column2:6(int)
      │    │    │    │    │    └── tuple [type=tuple{int, int}]
      │    │    │    │    │         ├── const: 1 [type=int]
      │    │    │    │    │         └── const: 2 [type=int]
      │    │    │    │    └── projections
      │    │    │    │         └── function: unique_rowid [type=int]
      │    │    │    └── projections
      │    │    │         └── plus [type=int]
      │    │    │              ├── variable: column2 [type=int]
      │    │    │              └── const: 1 [type=int]
      │    │    ├── scan abc
      │    │    │    └── columns: a:9(int!null) b:10(int) c:11(int) rowid:12(int!null)
      │    │    └── filters
      │    │         └── eq [type=bool]
      │    │              ├── variable: column1 [type=int]
      │    │              └── variable: a [type=int]
      │    └── projections
      │         ├── null [type=unknown]
      │         └── const: 10 [type=int]
      └── projections
           └── plus [type=int]
                ├── variable: column14 [type=int]
                └── const: 1 [type=int]

# ------------------------------------------------------------------------------
# Test mutation columns.
# ------------------------------------------------------------------------------

build
INSERT INTO mutation (m, n)
VALUES (1, 2)
ON CONFLICT (m) DO
UPDATE SET m=mutation.m+1
----
upsert mutation
 ├── columns: <none>
 ├── canary column: 9
 ├── fetch columns: m:9(int) n:10(int) o:11(int) p:12(int)
 ├── insert-mapping:
 │    ├──  column1:5 => m:1
 │    ├──  column2:6 => n:2
 │    ├──  column7:7 => o:3
 │    └──  column8:8 => p:4
 ├── update-mapping:
 │    ├──  column13:13 => m:1
 │    └──  column14:14 => p:4
 └── project
      ├── columns: column14:14(int) column1:5(int) column2:6(int) column7:7(int!null) column8:8(int) m:9(int) n:10(int) o:11(int) p:12(int) column13:13(int)
      ├── project
      │    ├── columns: column13:13(int) column1:5(int) column2:6(int) column7:7(int!null) column8:8(int) m:9(int) n:10(int) o:11(int) p:12(int)
      │    ├── left-join
      │    │    ├── columns: column1:5(int) column2:6(int) column7:7(int!null) column8:8(int) m:9(int) n:10(int) o:11(int) p:12(int)
      │    │    ├── project
      │    │    │    ├── columns: column8:8(int) column1:5(int) column2:6(int) column7:7(int!null)
      │    │    │    ├── project
      │    │    │    │    ├── columns: column7:7(int!null) column1:5(int) column2:6(int)
      │    │    │    │    ├── values
      │    │    │    │    │    ├── columns: column1:5(int) column2:6(int)
      │    │    │    │    │    └── tuple [type=tuple{int, int}]
      │    │    │    │    │         ├── const: 1 [type=int]
      │    │    │    │    │         └── const: 2 [type=int]
      │    │    │    │    └── projections
      │    │    │    │         └── const: 10 [type=int]
      │    │    │    └── projections
      │    │    │         └── plus [type=int]
      │    │    │              ├── variable: column7 [type=int]
      │    │    │              └── variable: column2 [type=int]
      │    │    ├── scan mutation
      │    │    │    └── columns: m:9(int!null) n:10(int) o:11(int) p:12(int)
      │    │    └── filters
      │    │         └── eq [type=bool]
      │    │              ├── variable: column1 [type=int]
      │    │              └── variable: m [type=int]
      │    └── projections
      │         └── plus [type=int]
      │              ├── variable: m [type=int]
      │              └── const: 1 [type=int]
      └── projections
           └── plus [type=int]
                ├── variable: o [type=int]
                └── variable: n [type=int]

# ------------------------------------------------------------------------------
# Test UPSERT.
# ------------------------------------------------------------------------------

# Single column primary key.
build
UPSERT INTO xyz VALUES (1)
----
upsert xyz
 ├── columns: <none>
 ├── canary column: 6
 ├── fetch columns: x:6(int) y:7(int) z:8(int)
 ├── insert-mapping:
 │    ├──  column1:4 => x:1
 │    ├──  column5:5 => y:2
 │    └──  column5:5 => z:3
 ├── update-mapping:
 │    ├──  column5:5 => y:2
 │    └──  column5:5 => z:3
 └── left-join
      ├── columns: column1:4(int) column5:5(unknown) x:6(int) y:7(int) z:8(int)
      ├── project
      │    ├── columns: column5:5(unknown) column1:4(int)
      │    ├── values
      │    │    ├── columns: column1:4(int)
      │    │    └── tuple [type=tuple{int}]
      │    │         └── const: 1 [type=int]
      │    └── projections
      │         └── null [type=unknown]
      ├── scan xyz
      │    └── columns: x:6(int!null) y:7(int) z:8(int)
      └── filters
           └── eq [type=bool]
                ├── variable: column1 [type=int]
                └── variable: x [type=int]

# Test multi-column primary key that contains all columns in table.
build
UPSERT INTO uv VALUES (1, 2) RETURNING *
----
upsert uv
 ├── columns: u:1(int!null) v:2(int!null)
 ├── canary column: 5
 ├── fetch columns: u:5(int) v:6(int)
 ├── insert-mapping:
 │    ├──  column1:3 => u:1
 │    └──  column2:4 => v:2
 ├── update-mapping:
 └── left-join
      ├── columns: column1:3(int) column2:4(int) u:5(int) v:6(int)
      ├── values
      │    ├── columns: column1:3(int) column2:4(int)
      │    └── tuple [type=tuple{int, int}]
      │         ├── const: 1 [type=int]
      │         └── const: 2 [type=int]
      ├── scan uv
      │    └── columns: u:5(int!null) v:6(int!null)
      └── filters
           ├── eq [type=bool]
           │    ├── variable: column1 [type=int]
           │    └── variable: u [type=int]
           └── eq [type=bool]
                ├── variable: column2 [type=int]
                └── variable: v [type=int]

# Use returning UPSERT as a FROM expression.
build
SELECT * FROM [UPSERT INTO abc VALUES (1, 2) RETURNING *]
----
project
 ├── columns: a:1(int!null) b:2(int) c:3(int)
 └── upsert abc
      ├── columns: a:1(int!null) b:2(int) c:3(int) rowid:4(int!null)
      ├── canary column: 12
      ├── fetch columns: a:9(int) b:10(int) c:11(int) rowid:12(int)
      ├── insert-mapping:
      │    ├──  column1:5 => a:1
      │    ├──  column2:6 => b:2
      │    ├──  column8:8 => c:3
      │    └──  column7:7 => rowid:4
      ├── update-mapping:
      │    ├──  column1:5 => a:1
      │    ├──  column2:6 => b:2
      │    └──  column8:8 => c:3
      └── left-join
           ├── columns: column1:5(int) column2:6(int) column7:7(int) column8:8(int) a:9(int) b:10(int) c:11(int) rowid:12(int)
           ├── project
           │    ├── columns: column8:8(int) column1:5(int) column2:6(int) column7:7(int)
           │    ├── project
           │    │    ├── columns: column7:7(int) column1:5(int) column2:6(int)
           │    │    ├── values
           │    │    │    ├── columns: column1:5(int) column2:6(int)
           │    │    │    └── tuple [type=tuple{int, int}]
           │    │    │         ├── const: 1 [type=int]
           │    │    │         └── const: 2 [type=int]
           │    │    └── projections
           │    │         └── function: unique_rowid [type=int]
           │    └── projections
           │         └── plus [type=int]
           │              ├── variable: column2 [type=int]
           │              └── const: 1 [type=int]
           ├── scan abc
           │    └── columns: a:9(int!null) b:10(int) c:11(int) rowid:12(int!null)
           └── filters
                └── eq [type=bool]
                     ├── variable: column7 [type=int]
                     └── variable: rowid [type=int]

# Use explicitly specified column names.
build
UPSERT INTO xyz (z, x, y) VALUES (1, 2, 3)
----
upsert xyz
 ├── columns: <none>
 ├── canary column: 7
 ├── fetch columns: x:7(int) y:8(int) z:9(int)
 ├── insert-mapping:
 │    ├──  column2:5 => x:1
 │    ├──  column3:6 => y:2
 │    └──  column1:4 => z:3
 ├── update-mapping:
 │    ├──  column3:6 => y:2
 │    └──  column1:4 => z:3
 └── left-join
      ├── columns: column1:4(int) column2:5(int) column3:6(int) x:7(int) y:8(int) z:9(int)
      ├── values
      │    ├── columns: column1:4(int) column2:5(int) column3:6(int)
      │    └── tuple [type=tuple{int, int, int}]
      │         ├── const: 1 [type=int]
      │         ├── const: 2 [type=int]
      │         └── const: 3 [type=int]
      ├── scan xyz
      │    └── columns: x:7(int!null) y:8(int) z:9(int)
      └── filters
           └── eq [type=bool]
                ├── variable: column2 [type=int]
                └── variable: x [type=int]

# Use unknown name in upsert column list.
build
UPSERT INTO xyz (x, unknown) VALUES (1)
----
error (42703): column "unknown" does not exist
