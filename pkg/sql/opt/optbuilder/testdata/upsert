exec-ddl
CREATE TABLE abc (
    a INT NOT NULL,
    b INT DEFAULT (10),
    c INT AS (b + 1) STORED,
    UNIQUE(a),
    UNIQUE(b, c)
)
----

exec-ddl
CREATE TABLE xyz (
    x INT PRIMARY KEY,
    y INT,
    z INT,
    UNIQUE (y, z),
    UNIQUE (z, y),
    INDEX (y DESC)
)
----

exec-ddl
CREATE TABLE uv (
    u INT,
    v INT,
    PRIMARY KEY (u, v)
)
----

exec-ddl
CREATE TABLE noindex (
    x INT PRIMARY KEY,
    y INT,
    z INT
)
----

exec-ddl
CREATE TABLE mutation (
    m INT PRIMARY KEY,
    n INT,
    "o:write-only" INT DEFAULT(10),
    "p:write-only" INT AS (o + n) STORED,
    "q:delete-only" INT AS (m * p) STORED,
    CHECK (m > 0)
)
----

exec-ddl
CREATE TABLE checks (
    a INT PRIMARY KEY CHECK (a > 0),
    b INT,
    c INT,
    d INT AS (c + 1) STORED,
    CHECK (b < d)
)
----

exec-ddl
CREATE TABLE decimals (
    a DECIMAL(10,0) PRIMARY KEY CHECK (round(a) = a),
    b DECIMAL(5,1)[] CHECK (b[0] > 1),
    c DECIMAL(10,1) DEFAULT (1.23),
    d DECIMAL(10,1) AS (a+c) STORED
)
----

# ------------------------------------------------------------------------------
# Basic tests.
# ------------------------------------------------------------------------------

# Set single column, single column conflict.
build
INSERT INTO abc (a, b)
SELECT x, y FROM xyz
ON CONFLICT (a) DO
UPDATE SET a=5
----
upsert abc
 ├── columns: <none>
 ├── canary column: 13
 ├── fetch columns: a:10 b:11 c:12 rowid:13
 ├── insert-mapping:
 │    ├── x:5 => a:1
 │    ├── y:6 => b:2
 │    ├── column9:9 => c:3
 │    └── column8:8 => rowid:4
 ├── update-mapping:
 │    ├── upsert_a:16 => a:1
 │    └── upsert_c:18 => c:3
 └── project
      ├── columns: upsert_a:16!null upsert_b:17 upsert_c:18 upsert_rowid:19 x:5!null y:6 column8:8 column9:9 a:10 b:11 c:12 rowid:13 column14:14!null column15:15
      ├── project
      │    ├── columns: column15:15 x:5!null y:6 column8:8 column9:9 a:10 b:11 c:12 rowid:13 column14:14!null
      │    ├── project
      │    │    ├── columns: column14:14!null x:5!null y:6 column8:8 column9:9 a:10 b:11 c:12 rowid:13
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: x:5!null y:6 column8:8 column9:9 a:10 b:11 c:12 rowid:13
      │    │    │    ├── upsert-distinct-on
      │    │    │    │    ├── columns: x:5!null y:6 column8:8 column9:9
      │    │    │    │    ├── grouping columns: x:5!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: column9:9 x:5!null y:6 column8:8
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: column8:8 x:5!null y:6
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: x:5!null y:6
      │    │    │    │    │    │    │    └── scan xyz
      │    │    │    │    │    │    │         └── columns: x:5!null y:6 z:7
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── unique_rowid() [as=column8:8]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── y:6 + 1 [as=column9:9]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=y:6]
      │    │    │    │         │    └── y:6
      │    │    │    │         ├── first-agg [as=column8:8]
      │    │    │    │         │    └── column8:8
      │    │    │    │         └── first-agg [as=column9:9]
      │    │    │    │              └── column9:9
      │    │    │    ├── scan abc
      │    │    │    │    ├── columns: a:10!null b:11 c:12 rowid:13!null
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── c:12
      │    │    │    │              └── b:11 + 1
      │    │    │    └── filters
      │    │    │         └── x:5 = a:10
      │    │    └── projections
      │    │         └── 5 [as=column14:14]
      │    └── projections
      │         └── b:11 + 1 [as=column15:15]
      └── projections
           ├── CASE WHEN rowid:13 IS NULL THEN x:5 ELSE column14:14 END [as=upsert_a:16]
           ├── CASE WHEN rowid:13 IS NULL THEN y:6 ELSE b:11 END [as=upsert_b:17]
           ├── CASE WHEN rowid:13 IS NULL THEN column9:9 ELSE column15:15 END [as=upsert_c:18]
           └── CASE WHEN rowid:13 IS NULL THEN column8:8 ELSE rowid:13 END [as=upsert_rowid:19]

# Set all columns, multi-column conflict.
build
INSERT INTO abc (a, b, rowid)
SELECT x, y, z FROM xyz
ON CONFLICT (b, c) DO
UPDATE SET a=1, b=2, rowid=3
RETURNING *
----
project
 ├── columns: a:1!null b:2 c:3
 └── upsert abc
      ├── columns: a:1!null b:2 c:3 rowid:4!null
      ├── canary column: 12
      ├── fetch columns: a:9 b:10 c:11 rowid:12
      ├── insert-mapping:
      │    ├── x:5 => a:1
      │    ├── y:6 => b:2
      │    ├── column8:8 => c:3
      │    └── z:7 => rowid:4
      ├── update-mapping:
      │    ├── upsert_a:17 => a:1
      │    ├── upsert_b:18 => b:2
      │    ├── upsert_c:19 => c:3
      │    └── upsert_rowid:20 => rowid:4
      ├── return-mapping:
      │    ├── upsert_a:17 => a:1
      │    ├── upsert_b:18 => b:2
      │    ├── upsert_c:19 => c:3
      │    └── upsert_rowid:20 => rowid:4
      └── project
           ├── columns: upsert_a:17!null upsert_b:18 upsert_c:19 upsert_rowid:20 x:5!null y:6 z:7 column8:8 a:9 b:10 c:11 rowid:12 column13:13!null column14:14!null column15:15!null column16:16!null
           ├── project
           │    ├── columns: column16:16!null x:5!null y:6 z:7 column8:8 a:9 b:10 c:11 rowid:12 column13:13!null column14:14!null column15:15!null
           │    ├── project
           │    │    ├── columns: column13:13!null column14:14!null column15:15!null x:5!null y:6 z:7 column8:8 a:9 b:10 c:11 rowid:12
           │    │    ├── left-join (hash)
           │    │    │    ├── columns: x:5!null y:6 z:7 column8:8 a:9 b:10 c:11 rowid:12
           │    │    │    ├── upsert-distinct-on
           │    │    │    │    ├── columns: x:5!null y:6 z:7 column8:8
           │    │    │    │    ├── grouping columns: y:6 column8:8
           │    │    │    │    ├── project
           │    │    │    │    │    ├── columns: column8:8 x:5!null y:6 z:7
           │    │    │    │    │    ├── scan xyz
           │    │    │    │    │    │    └── columns: x:5!null y:6 z:7
           │    │    │    │    │    └── projections
           │    │    │    │    │         └── y:6 + 1 [as=column8:8]
           │    │    │    │    └── aggregations
           │    │    │    │         ├── first-agg [as=x:5]
           │    │    │    │         │    └── x:5
           │    │    │    │         └── first-agg [as=z:7]
           │    │    │    │              └── z:7
           │    │    │    ├── scan abc
           │    │    │    │    ├── columns: a:9!null b:10 c:11 rowid:12!null
           │    │    │    │    └── computed column expressions
           │    │    │    │         └── c:11
           │    │    │    │              └── b:10 + 1
           │    │    │    └── filters
           │    │    │         ├── y:6 = b:10
           │    │    │         └── column8:8 = c:11
           │    │    └── projections
           │    │         ├── 1 [as=column13:13]
           │    │         ├── 2 [as=column14:14]
           │    │         └── 3 [as=column15:15]
           │    └── projections
           │         └── column14:14 + 1 [as=column16:16]
           └── projections
                ├── CASE WHEN rowid:12 IS NULL THEN x:5 ELSE column13:13 END [as=upsert_a:17]
                ├── CASE WHEN rowid:12 IS NULL THEN y:6 ELSE column14:14 END [as=upsert_b:18]
                ├── CASE WHEN rowid:12 IS NULL THEN column8:8 ELSE column16:16 END [as=upsert_c:19]
                └── CASE WHEN rowid:12 IS NULL THEN z:7 ELSE column15:15 END [as=upsert_rowid:20]

# UPDATE + WHERE clause.
build
INSERT INTO abc
SELECT x, y FROM xyz
ON CONFLICT (a) DO
UPDATE SET b=10
WHERE abc.a>0
----
upsert abc
 ├── columns: <none>
 ├── canary column: 13
 ├── fetch columns: a:10 b:11 c:12 rowid:13
 ├── insert-mapping:
 │    ├── x:5 => a:1
 │    ├── y:6 => b:2
 │    ├── column9:9 => c:3
 │    └── column8:8 => rowid:4
 ├── update-mapping:
 │    ├── upsert_b:17 => b:2
 │    └── upsert_c:18 => c:3
 └── project
      ├── columns: upsert_a:16 upsert_b:17 upsert_c:18 upsert_rowid:19 x:5!null y:6 column8:8 column9:9 a:10 b:11 c:12 rowid:13 column14:14!null column15:15!null
      ├── project
      │    ├── columns: column15:15!null x:5!null y:6 column8:8 column9:9 a:10 b:11 c:12 rowid:13 column14:14!null
      │    ├── project
      │    │    ├── columns: column14:14!null x:5!null y:6 column8:8 column9:9 a:10 b:11 c:12 rowid:13
      │    │    ├── select
      │    │    │    ├── columns: x:5!null y:6 column8:8 column9:9 a:10 b:11 c:12 rowid:13
      │    │    │    ├── left-join (hash)
      │    │    │    │    ├── columns: x:5!null y:6 column8:8 column9:9 a:10 b:11 c:12 rowid:13
      │    │    │    │    ├── upsert-distinct-on
      │    │    │    │    │    ├── columns: x:5!null y:6 column8:8 column9:9
      │    │    │    │    │    ├── grouping columns: x:5!null
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: column9:9 x:5!null y:6 column8:8
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: column8:8 x:5!null y:6
      │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    ├── columns: x:5!null y:6
      │    │    │    │    │    │    │    │    └── scan xyz
      │    │    │    │    │    │    │    │         └── columns: x:5!null y:6 z:7
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         └── unique_rowid() [as=column8:8]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── y:6 + 1 [as=column9:9]
      │    │    │    │    │    └── aggregations
      │    │    │    │    │         ├── first-agg [as=y:6]
      │    │    │    │    │         │    └── y:6
      │    │    │    │    │         ├── first-agg [as=column8:8]
      │    │    │    │    │         │    └── column8:8
      │    │    │    │    │         └── first-agg [as=column9:9]
      │    │    │    │    │              └── column9:9
      │    │    │    │    ├── scan abc
      │    │    │    │    │    ├── columns: a:10!null b:11 c:12 rowid:13!null
      │    │    │    │    │    └── computed column expressions
      │    │    │    │    │         └── c:12
      │    │    │    │    │              └── b:11 + 1
      │    │    │    │    └── filters
      │    │    │    │         └── x:5 = a:10
      │    │    │    └── filters
      │    │    │         └── (rowid:13 IS NULL) OR (a:10 > 0)
      │    │    └── projections
      │    │         └── 10 [as=column14:14]
      │    └── projections
      │         └── column14:14 + 1 [as=column15:15]
      └── projections
           ├── CASE WHEN rowid:13 IS NULL THEN x:5 ELSE a:10 END [as=upsert_a:16]
           ├── CASE WHEN rowid:13 IS NULL THEN y:6 ELSE column14:14 END [as=upsert_b:17]
           ├── CASE WHEN rowid:13 IS NULL THEN column9:9 ELSE column15:15 END [as=upsert_c:18]
           └── CASE WHEN rowid:13 IS NULL THEN column8:8 ELSE rowid:13 END [as=upsert_rowid:19]

# Use RETURNING INSERT..ON CONFLICT as a FROM clause.
build
SELECT *
FROM [INSERT INTO abc (a, b) VALUES (1,2), (3,4) ON CONFLICT (a) DO UPDATE SET b=1 RETURNING *]
ORDER BY a, b DESC
----
sort
 ├── columns: a:19!null b:20!null c:21!null
 ├── ordering: +19,-20
 └── with &1
      ├── columns: a:19!null b:20!null c:21!null
      ├── project
      │    ├── columns: abc.a:1!null abc.b:2!null abc.c:3!null
      │    └── upsert abc
      │         ├── columns: abc.a:1!null abc.b:2!null abc.c:3!null rowid:4!null
      │         ├── canary column: 12
      │         ├── fetch columns: abc.a:9 abc.b:10 abc.c:11 rowid:12
      │         ├── insert-mapping:
      │         │    ├── column1:5 => abc.a:1
      │         │    ├── column2:6 => abc.b:2
      │         │    ├── column8:8 => abc.c:3
      │         │    └── column7:7 => rowid:4
      │         ├── update-mapping:
      │         │    ├── upsert_b:16 => abc.b:2
      │         │    └── upsert_c:17 => abc.c:3
      │         ├── return-mapping:
      │         │    ├── upsert_a:15 => abc.a:1
      │         │    ├── upsert_b:16 => abc.b:2
      │         │    ├── upsert_c:17 => abc.c:3
      │         │    └── upsert_rowid:18 => rowid:4
      │         └── project
      │              ├── columns: upsert_a:15 upsert_b:16!null upsert_c:17!null upsert_rowid:18 column1:5!null column2:6!null column7:7 column8:8!null abc.a:9 abc.b:10 abc.c:11 rowid:12 column13:13!null column14:14!null
      │              ├── project
      │              │    ├── columns: column14:14!null column1:5!null column2:6!null column7:7 column8:8!null abc.a:9 abc.b:10 abc.c:11 rowid:12 column13:13!null
      │              │    ├── project
      │              │    │    ├── columns: column13:13!null column1:5!null column2:6!null column7:7 column8:8!null abc.a:9 abc.b:10 abc.c:11 rowid:12
      │              │    │    ├── left-join (hash)
      │              │    │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8!null abc.a:9 abc.b:10 abc.c:11 rowid:12
      │              │    │    │    ├── upsert-distinct-on
      │              │    │    │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8!null
      │              │    │    │    │    ├── grouping columns: column1:5!null
      │              │    │    │    │    ├── project
      │              │    │    │    │    │    ├── columns: column8:8!null column1:5!null column2:6!null column7:7
      │              │    │    │    │    │    ├── project
      │              │    │    │    │    │    │    ├── columns: column7:7 column1:5!null column2:6!null
      │              │    │    │    │    │    │    ├── values
      │              │    │    │    │    │    │    │    ├── columns: column1:5!null column2:6!null
      │              │    │    │    │    │    │    │    ├── (1, 2)
      │              │    │    │    │    │    │    │    └── (3, 4)
      │              │    │    │    │    │    │    └── projections
      │              │    │    │    │    │    │         └── unique_rowid() [as=column7:7]
      │              │    │    │    │    │    └── projections
      │              │    │    │    │    │         └── column2:6 + 1 [as=column8:8]
      │              │    │    │    │    └── aggregations
      │              │    │    │    │         ├── first-agg [as=column2:6]
      │              │    │    │    │         │    └── column2:6
      │              │    │    │    │         ├── first-agg [as=column7:7]
      │              │    │    │    │         │    └── column7:7
      │              │    │    │    │         └── first-agg [as=column8:8]
      │              │    │    │    │              └── column8:8
      │              │    │    │    ├── scan abc
      │              │    │    │    │    ├── columns: abc.a:9!null abc.b:10 abc.c:11 rowid:12!null
      │              │    │    │    │    └── computed column expressions
      │              │    │    │    │         └── abc.c:11
      │              │    │    │    │              └── abc.b:10 + 1
      │              │    │    │    └── filters
      │              │    │    │         └── column1:5 = abc.a:9
      │              │    │    └── projections
      │              │    │         └── 1 [as=column13:13]
      │              │    └── projections
      │              │         └── column13:13 + 1 [as=column14:14]
      │              └── projections
      │                   ├── CASE WHEN rowid:12 IS NULL THEN column1:5 ELSE abc.a:9 END [as=upsert_a:15]
      │                   ├── CASE WHEN rowid:12 IS NULL THEN column2:6 ELSE column13:13 END [as=upsert_b:16]
      │                   ├── CASE WHEN rowid:12 IS NULL THEN column8:8 ELSE column14:14 END [as=upsert_c:17]
      │                   └── CASE WHEN rowid:12 IS NULL THEN column7:7 ELSE rowid:12 END [as=upsert_rowid:18]
      └── with-scan &1
           ├── columns: a:19!null b:20!null c:21!null
           └── mapping:
                ├──  abc.a:1 => a:19
                ├──  abc.b:2 => b:20
                └──  abc.c:3 => c:21

# Use table alias.
build
INSERT INTO abc AS tab (a, b)
VALUES (1, 2)
ON CONFLICT (a) DO
UPDATE SET a=tab.a*excluded.a
----
upsert tab
 ├── columns: <none>
 ├── canary column: 12
 ├── fetch columns: a:9 b:10 c:11 rowid:12
 ├── insert-mapping:
 │    ├── column1:5 => a:1
 │    ├── column2:6 => b:2
 │    ├── column8:8 => c:3
 │    └── column7:7 => rowid:4
 ├── update-mapping:
 │    ├── upsert_a:15 => a:1
 │    └── upsert_c:17 => c:3
 └── project
      ├── columns: upsert_a:15 upsert_b:16 upsert_c:17 upsert_rowid:18 column1:5!null column2:6!null column7:7 column8:8!null a:9 b:10 c:11 rowid:12 column13:13 column14:14
      ├── project
      │    ├── columns: column14:14 column1:5!null column2:6!null column7:7 column8:8!null a:9 b:10 c:11 rowid:12 column13:13
      │    ├── project
      │    │    ├── columns: column13:13 column1:5!null column2:6!null column7:7 column8:8!null a:9 b:10 c:11 rowid:12
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8!null a:9 b:10 c:11 rowid:12
      │    │    │    ├── upsert-distinct-on
      │    │    │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8!null
      │    │    │    │    ├── grouping columns: column1:5!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: column8:8!null column1:5!null column2:6!null column7:7
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: column7:7 column1:5!null column2:6!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:5!null column2:6!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── unique_rowid() [as=column7:7]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── column2:6 + 1 [as=column8:8]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column2:6]
      │    │    │    │         │    └── column2:6
      │    │    │    │         ├── first-agg [as=column7:7]
      │    │    │    │         │    └── column7:7
      │    │    │    │         └── first-agg [as=column8:8]
      │    │    │    │              └── column8:8
      │    │    │    ├── scan tab
      │    │    │    │    ├── columns: a:9!null b:10 c:11 rowid:12!null
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── c:11
      │    │    │    │              └── b:10 + 1
      │    │    │    └── filters
      │    │    │         └── column1:5 = a:9
      │    │    └── projections
      │    │         └── a:9 * column1:5 [as=column13:13]
      │    └── projections
      │         └── b:10 + 1 [as=column14:14]
      └── projections
           ├── CASE WHEN rowid:12 IS NULL THEN column1:5 ELSE column13:13 END [as=upsert_a:15]
           ├── CASE WHEN rowid:12 IS NULL THEN column2:6 ELSE b:10 END [as=upsert_b:16]
           ├── CASE WHEN rowid:12 IS NULL THEN column8:8 ELSE column14:14 END [as=upsert_c:17]
           └── CASE WHEN rowid:12 IS NULL THEN column7:7 ELSE rowid:12 END [as=upsert_rowid:18]

# Conflict columns are in different order than index key columns.
build
INSERT INTO abc (a, b)
VALUES (1, 2)
ON CONFLICT (c, b) DO
UPDATE SET a=5
----
upsert abc
 ├── columns: <none>
 ├── canary column: 12
 ├── fetch columns: a:9 b:10 c:11 rowid:12
 ├── insert-mapping:
 │    ├── column1:5 => a:1
 │    ├── column2:6 => b:2
 │    ├── column8:8 => c:3
 │    └── column7:7 => rowid:4
 ├── update-mapping:
 │    ├── upsert_a:15 => a:1
 │    └── upsert_c:17 => c:3
 └── project
      ├── columns: upsert_a:15!null upsert_b:16 upsert_c:17 upsert_rowid:18 column1:5!null column2:6!null column7:7 column8:8!null a:9 b:10 c:11 rowid:12 column13:13!null column14:14
      ├── project
      │    ├── columns: column14:14 column1:5!null column2:6!null column7:7 column8:8!null a:9 b:10 c:11 rowid:12 column13:13!null
      │    ├── project
      │    │    ├── columns: column13:13!null column1:5!null column2:6!null column7:7 column8:8!null a:9 b:10 c:11 rowid:12
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8!null a:9 b:10 c:11 rowid:12
      │    │    │    ├── upsert-distinct-on
      │    │    │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8!null
      │    │    │    │    ├── grouping columns: column2:6!null column8:8!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: column8:8!null column1:5!null column2:6!null column7:7
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: column7:7 column1:5!null column2:6!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:5!null column2:6!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── unique_rowid() [as=column7:7]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── column2:6 + 1 [as=column8:8]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column1:5]
      │    │    │    │         │    └── column1:5
      │    │    │    │         └── first-agg [as=column7:7]
      │    │    │    │              └── column7:7
      │    │    │    ├── scan abc
      │    │    │    │    ├── columns: a:9!null b:10 c:11 rowid:12!null
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── c:11
      │    │    │    │              └── b:10 + 1
      │    │    │    └── filters
      │    │    │         ├── column2:6 = b:10
      │    │    │         └── column8:8 = c:11
      │    │    └── projections
      │    │         └── 5 [as=column13:13]
      │    └── projections
      │         └── b:10 + 1 [as=column14:14]
      └── projections
           ├── CASE WHEN rowid:12 IS NULL THEN column1:5 ELSE column13:13 END [as=upsert_a:15]
           ├── CASE WHEN rowid:12 IS NULL THEN column2:6 ELSE b:10 END [as=upsert_b:16]
           ├── CASE WHEN rowid:12 IS NULL THEN column8:8 ELSE column14:14 END [as=upsert_c:17]
           └── CASE WHEN rowid:12 IS NULL THEN column7:7 ELSE rowid:12 END [as=upsert_rowid:18]

# Conflict columns don't match unique index (too few columns).
build
INSERT INTO abc (a, b)
VALUES (1, 2)
ON CONFLICT (b) DO
UPDATE SET a=5
----
error (42P10): there is no unique or exclusion constraint matching the ON CONFLICT specification

# Conflict columns don't match unique index (too many columns).
build
INSERT INTO abc (a, b)
VALUES (1, 2)
ON CONFLICT (a, b) DO
UPDATE SET a=5
----
error (42P10): there is no unique or exclusion constraint matching the ON CONFLICT specification

# Conflict column not found.
build
INSERT INTO abc (a, b)
VALUES (1, 2)
ON CONFLICT (a, unknown) DO
UPDATE SET a=5
----
error (42703): column "unknown" does not exist

# ------------------------------------------------------------------------------
# Test DO NOTHING.
# ------------------------------------------------------------------------------

# No conflict columns specified (all non-duplicate indexes must be checked).
build
INSERT INTO xyz
VALUES (1, 2, 3), (4, 5, 6)
ON CONFLICT DO NOTHING
----
insert xyz
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:4 => x:1
 │    ├── column2:5 => y:2
 │    └── column3:6 => z:3
 └── upsert-distinct-on
      ├── columns: column1:4!null column2:5!null column3:6!null
      ├── grouping columns: column2:5!null column3:6!null
      ├── project
      │    ├── columns: column1:4!null column2:5!null column3:6!null
      │    └── select
      │         ├── columns: column1:4!null column2:5!null column3:6!null x:13 y:14 z:15
      │         ├── left-join (hash)
      │         │    ├── columns: column1:4!null column2:5!null column3:6!null x:13 y:14 z:15
      │         │    ├── upsert-distinct-on
      │         │    │    ├── columns: column1:4!null column2:5!null column3:6!null
      │         │    │    ├── grouping columns: column2:5!null column3:6!null
      │         │    │    ├── project
      │         │    │    │    ├── columns: column1:4!null column2:5!null column3:6!null
      │         │    │    │    └── select
      │         │    │    │         ├── columns: column1:4!null column2:5!null column3:6!null x:10 y:11 z:12
      │         │    │    │         ├── left-join (hash)
      │         │    │    │         │    ├── columns: column1:4!null column2:5!null column3:6!null x:10 y:11 z:12
      │         │    │    │         │    ├── upsert-distinct-on
      │         │    │    │         │    │    ├── columns: column1:4!null column2:5!null column3:6!null
      │         │    │    │         │    │    ├── grouping columns: column1:4!null
      │         │    │    │         │    │    ├── project
      │         │    │    │         │    │    │    ├── columns: column1:4!null column2:5!null column3:6!null
      │         │    │    │         │    │    │    └── select
      │         │    │    │         │    │    │         ├── columns: column1:4!null column2:5!null column3:6!null x:7 y:8 z:9
      │         │    │    │         │    │    │         ├── left-join (hash)
      │         │    │    │         │    │    │         │    ├── columns: column1:4!null column2:5!null column3:6!null x:7 y:8 z:9
      │         │    │    │         │    │    │         │    ├── values
      │         │    │    │         │    │    │         │    │    ├── columns: column1:4!null column2:5!null column3:6!null
      │         │    │    │         │    │    │         │    │    ├── (1, 2, 3)
      │         │    │    │         │    │    │         │    │    └── (4, 5, 6)
      │         │    │    │         │    │    │         │    ├── scan xyz
      │         │    │    │         │    │    │         │    │    └── columns: x:7!null y:8 z:9
      │         │    │    │         │    │    │         │    └── filters
      │         │    │    │         │    │    │         │         └── column1:4 = x:7
      │         │    │    │         │    │    │         └── filters
      │         │    │    │         │    │    │              └── x:7 IS NULL
      │         │    │    │         │    │    └── aggregations
      │         │    │    │         │    │         ├── first-agg [as=column2:5]
      │         │    │    │         │    │         │    └── column2:5
      │         │    │    │         │    │         └── first-agg [as=column3:6]
      │         │    │    │         │    │              └── column3:6
      │         │    │    │         │    ├── scan xyz
      │         │    │    │         │    │    └── columns: x:10!null y:11 z:12
      │         │    │    │         │    └── filters
      │         │    │    │         │         ├── column2:5 = y:11
      │         │    │    │         │         └── column3:6 = z:12
      │         │    │    │         └── filters
      │         │    │    │              └── x:10 IS NULL
      │         │    │    └── aggregations
      │         │    │         └── first-agg [as=column1:4]
      │         │    │              └── column1:4
      │         │    ├── scan xyz
      │         │    │    └── columns: x:13!null y:14 z:15
      │         │    └── filters
      │         │         ├── column3:6 = z:15
      │         │         └── column2:5 = y:14
      │         └── filters
      │              └── x:13 IS NULL
      └── aggregations
           └── first-agg [as=column1:4]
                └── column1:4

# Conflict columns are explicitly specified.
build
INSERT INTO xyz
VALUES (1, 2, 3), (4, 5, 6)
ON CONFLICT (y, z) DO NOTHING
----
insert xyz
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:4 => x:1
 │    ├── column2:5 => y:2
 │    └── column3:6 => z:3
 └── upsert-distinct-on
      ├── columns: column1:4!null column2:5!null column3:6!null
      ├── grouping columns: column2:5!null column3:6!null
      ├── project
      │    ├── columns: column1:4!null column2:5!null column3:6!null
      │    └── select
      │         ├── columns: column1:4!null column2:5!null column3:6!null x:7 y:8 z:9
      │         ├── left-join (hash)
      │         │    ├── columns: column1:4!null column2:5!null column3:6!null x:7 y:8 z:9
      │         │    ├── values
      │         │    │    ├── columns: column1:4!null column2:5!null column3:6!null
      │         │    │    ├── (1, 2, 3)
      │         │    │    └── (4, 5, 6)
      │         │    ├── scan xyz
      │         │    │    └── columns: x:7!null y:8 z:9
      │         │    └── filters
      │         │         ├── column2:5 = y:8
      │         │         └── column3:6 = z:9
      │         └── filters
      │              └── x:7 IS NULL
      └── aggregations
           └── first-agg [as=column1:4]
                └── column1:4

# ------------------------------------------------------------------------------
# Test excluded columns.
# ------------------------------------------------------------------------------

build
INSERT INTO xyz
VALUES (1, 2, 3), (-1, -1, -1)
ON CONFLICT (z, y) DO
UPDATE SET x=excluded.x+1, y=excluded.y*xyz.y, z=excluded.x-excluded.z
WHERE excluded.y>xyz.y
RETURNING xyz.x*2, y+z
----
project
 ├── columns: "?column?":16!null "?column?":17
 ├── upsert xyz
 │    ├── columns: x:1!null y:2 z:3!null
 │    ├── canary column: 7
 │    ├── fetch columns: x:7 y:8 z:9
 │    ├── insert-mapping:
 │    │    ├── column1:4 => x:1
 │    │    ├── column2:5 => y:2
 │    │    └── column3:6 => z:3
 │    ├── update-mapping:
 │    │    ├── upsert_x:13 => x:1
 │    │    ├── upsert_y:14 => y:2
 │    │    └── upsert_z:15 => z:3
 │    ├── return-mapping:
 │    │    ├── upsert_x:13 => x:1
 │    │    ├── upsert_y:14 => y:2
 │    │    └── upsert_z:15 => z:3
 │    └── project
 │         ├── columns: upsert_x:13!null upsert_y:14 upsert_z:15!null column1:4!null column2:5!null column3:6!null x:7 y:8 z:9 column10:10!null column11:11 column12:12!null
 │         ├── project
 │         │    ├── columns: column10:10!null column11:11 column12:12!null column1:4!null column2:5!null column3:6!null x:7 y:8 z:9
 │         │    ├── select
 │         │    │    ├── columns: column1:4!null column2:5!null column3:6!null x:7 y:8 z:9
 │         │    │    ├── left-join (hash)
 │         │    │    │    ├── columns: column1:4!null column2:5!null column3:6!null x:7 y:8 z:9
 │         │    │    │    ├── upsert-distinct-on
 │         │    │    │    │    ├── columns: column1:4!null column2:5!null column3:6!null
 │         │    │    │    │    ├── grouping columns: column2:5!null column3:6!null
 │         │    │    │    │    ├── values
 │         │    │    │    │    │    ├── columns: column1:4!null column2:5!null column3:6!null
 │         │    │    │    │    │    ├── (1, 2, 3)
 │         │    │    │    │    │    └── (-1, -1, -1)
 │         │    │    │    │    └── aggregations
 │         │    │    │    │         └── first-agg [as=column1:4]
 │         │    │    │    │              └── column1:4
 │         │    │    │    ├── scan xyz
 │         │    │    │    │    └── columns: x:7!null y:8 z:9
 │         │    │    │    └── filters
 │         │    │    │         ├── column2:5 = y:8
 │         │    │    │         └── column3:6 = z:9
 │         │    │    └── filters
 │         │    │         └── (x:7 IS NULL) OR (column2:5 > y:8)
 │         │    └── projections
 │         │         ├── column1:4 + 1 [as=column10:10]
 │         │         ├── column2:5 * y:8 [as=column11:11]
 │         │         └── column1:4 - column3:6 [as=column12:12]
 │         └── projections
 │              ├── CASE WHEN x:7 IS NULL THEN column1:4 ELSE column10:10 END [as=upsert_x:13]
 │              ├── CASE WHEN x:7 IS NULL THEN column2:5 ELSE column11:11 END [as=upsert_y:14]
 │              └── CASE WHEN x:7 IS NULL THEN column3:6 ELSE column12:12 END [as=upsert_z:15]
 └── projections
      ├── x:1 * 2 [as="?column?":16]
      └── y:2 + z:3 [as="?column?":17]

# Try to use excluded in RETURNING.
build
INSERT INTO xyz
VALUES (1, 2, 3)
ON CONFLICT (x) DO
UPDATE SET x=1
RETURNING excluded.x
----
error (42P01): no data source matches prefix: excluded

# Referencing column without "excluded" or "xyz" prefix is not allowed.
build
INSERT INTO xyz
VALUES (1, 2, 3)
ON CONFLICT (x) DO
UPDATE SET x=x+1
----
error (42702): column reference "x" is ambiguous (candidates: excluded.x, xyz.x)

# ------------------------------------------------------------------------------
# Test UPDATE SET expressions.
# ------------------------------------------------------------------------------

# Subquery.
build
INSERT INTO abc
VALUES (1, 2)
ON CONFLICT (a) DO
UPDATE SET (b, a)=(SELECT x, y+excluded.b FROM xyz WHERE x=excluded.a)
----
upsert abc
 ├── columns: <none>
 ├── canary column: 12
 ├── fetch columns: a:9 b:10 c:11 rowid:12
 ├── insert-mapping:
 │    ├── column1:5 => a:1
 │    ├── column2:6 => b:2
 │    ├── column8:8 => c:3
 │    └── column7:7 => rowid:4
 ├── update-mapping:
 │    ├── upsert_a:18 => a:1
 │    ├── upsert_b:19 => b:2
 │    └── upsert_c:20 => c:3
 └── project
      ├── columns: upsert_a:18 upsert_b:19 upsert_c:20 upsert_rowid:21 column1:5!null column2:6!null column7:7 column8:8!null a:9 b:10 c:11 rowid:12 x:13 "?column?":16 column17:17
      ├── project
      │    ├── columns: column17:17 column1:5!null column2:6!null column7:7 column8:8!null a:9 b:10 c:11 rowid:12 x:13 "?column?":16
      │    ├── left-join-apply
      │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8!null a:9 b:10 c:11 rowid:12 x:13 "?column?":16
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8!null a:9 b:10 c:11 rowid:12
      │    │    │    ├── upsert-distinct-on
      │    │    │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8!null
      │    │    │    │    ├── grouping columns: column1:5!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: column8:8!null column1:5!null column2:6!null column7:7
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: column7:7 column1:5!null column2:6!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:5!null column2:6!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── unique_rowid() [as=column7:7]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── column2:6 + 1 [as=column8:8]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column2:6]
      │    │    │    │         │    └── column2:6
      │    │    │    │         ├── first-agg [as=column7:7]
      │    │    │    │         │    └── column7:7
      │    │    │    │         └── first-agg [as=column8:8]
      │    │    │    │              └── column8:8
      │    │    │    ├── scan abc
      │    │    │    │    ├── columns: a:9!null b:10 c:11 rowid:12!null
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── c:11
      │    │    │    │              └── b:10 + 1
      │    │    │    └── filters
      │    │    │         └── column1:5 = a:9
      │    │    ├── max1-row
      │    │    │    ├── columns: x:13!null "?column?":16
      │    │    │    └── project
      │    │    │         ├── columns: "?column?":16 x:13!null
      │    │    │         ├── select
      │    │    │         │    ├── columns: x:13!null y:14 z:15
      │    │    │         │    ├── scan xyz
      │    │    │         │    │    └── columns: x:13!null y:14 z:15
      │    │    │         │    └── filters
      │    │    │         │         └── x:13 = column1:5
      │    │    │         └── projections
      │    │    │              └── y:14 + column2:6 [as="?column?":16]
      │    │    └── filters (true)
      │    └── projections
      │         └── x:13 + 1 [as=column17:17]
      └── projections
           ├── CASE WHEN rowid:12 IS NULL THEN column1:5 ELSE "?column?":16 END [as=upsert_a:18]
           ├── CASE WHEN rowid:12 IS NULL THEN column2:6 ELSE x:13 END [as=upsert_b:19]
           ├── CASE WHEN rowid:12 IS NULL THEN column8:8 ELSE column17:17 END [as=upsert_c:20]
           └── CASE WHEN rowid:12 IS NULL THEN column7:7 ELSE rowid:12 END [as=upsert_rowid:21]

# Default expressions.
build
INSERT INTO abc
VALUES (1, 2)
ON CONFLICT (a) DO
UPDATE SET a=DEFAULT, b=DEFAULT
----
upsert abc
 ├── columns: <none>
 ├── canary column: 12
 ├── fetch columns: a:9 b:10 c:11 rowid:12
 ├── insert-mapping:
 │    ├── column1:5 => a:1
 │    ├── column2:6 => b:2
 │    ├── column8:8 => c:3
 │    └── column7:7 => rowid:4
 ├── update-mapping:
 │    ├── upsert_a:16 => a:1
 │    ├── upsert_b:17 => b:2
 │    └── upsert_c:18 => c:3
 └── project
      ├── columns: upsert_a:16 upsert_b:17!null upsert_c:18!null upsert_rowid:19 column1:5!null column2:6!null column7:7 column8:8!null a:9 b:10 c:11 rowid:12 column13:13 column14:14!null column15:15!null
      ├── project
      │    ├── columns: column15:15!null column1:5!null column2:6!null column7:7 column8:8!null a:9 b:10 c:11 rowid:12 column13:13 column14:14!null
      │    ├── project
      │    │    ├── columns: column13:13 column14:14!null column1:5!null column2:6!null column7:7 column8:8!null a:9 b:10 c:11 rowid:12
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8!null a:9 b:10 c:11 rowid:12
      │    │    │    ├── upsert-distinct-on
      │    │    │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8!null
      │    │    │    │    ├── grouping columns: column1:5!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: column8:8!null column1:5!null column2:6!null column7:7
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: column7:7 column1:5!null column2:6!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:5!null column2:6!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── unique_rowid() [as=column7:7]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── column2:6 + 1 [as=column8:8]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column2:6]
      │    │    │    │         │    └── column2:6
      │    │    │    │         ├── first-agg [as=column7:7]
      │    │    │    │         │    └── column7:7
      │    │    │    │         └── first-agg [as=column8:8]
      │    │    │    │              └── column8:8
      │    │    │    ├── scan abc
      │    │    │    │    ├── columns: a:9!null b:10 c:11 rowid:12!null
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── c:11
      │    │    │    │              └── b:10 + 1
      │    │    │    └── filters
      │    │    │         └── column1:5 = a:9
      │    │    └── projections
      │    │         ├── NULL::INT8 [as=column13:13]
      │    │         └── 10 [as=column14:14]
      │    └── projections
      │         └── column14:14 + 1 [as=column15:15]
      └── projections
           ├── CASE WHEN rowid:12 IS NULL THEN column1:5 ELSE column13:13 END [as=upsert_a:16]
           ├── CASE WHEN rowid:12 IS NULL THEN column2:6 ELSE column14:14 END [as=upsert_b:17]
           ├── CASE WHEN rowid:12 IS NULL THEN column8:8 ELSE column15:15 END [as=upsert_c:18]
           └── CASE WHEN rowid:12 IS NULL THEN column7:7 ELSE rowid:12 END [as=upsert_rowid:19]

# ------------------------------------------------------------------------------
# Test mutation columns.
# ------------------------------------------------------------------------------

build
INSERT INTO mutation (m, n)
VALUES (1, 2)
ON CONFLICT (m) DO
UPDATE SET m=mutation.m+1
----
upsert mutation
 ├── columns: <none>
 ├── canary column: 10
 ├── fetch columns: m:10 n:11 o:12 p:13 q:14
 ├── insert-mapping:
 │    ├── column1:6 => m:1
 │    ├── column2:7 => n:2
 │    ├── column8:8 => o:3
 │    └── column9:9 => p:4
 ├── update-mapping:
 │    ├── upsert_m:17 => m:1
 │    └── upsert_p:20 => p:4
 ├── check columns: check1:21
 └── project
      ├── columns: check1:21 column1:6!null column2:7!null column8:8!null column9:9!null m:10 n:11 o:12 p:13 q:14 column15:15 column16:16 upsert_m:17 upsert_n:18 upsert_o:19 upsert_p:20
      ├── project
      │    ├── columns: upsert_m:17 upsert_n:18 upsert_o:19 upsert_p:20 column1:6!null column2:7!null column8:8!null column9:9!null m:10 n:11 o:12 p:13 q:14 column15:15 column16:16
      │    ├── project
      │    │    ├── columns: column16:16 column1:6!null column2:7!null column8:8!null column9:9!null m:10 n:11 o:12 p:13 q:14 column15:15
      │    │    ├── project
      │    │    │    ├── columns: column15:15 column1:6!null column2:7!null column8:8!null column9:9!null m:10 n:11 o:12 p:13 q:14
      │    │    │    ├── left-join (hash)
      │    │    │    │    ├── columns: column1:6!null column2:7!null column8:8!null column9:9!null m:10 n:11 o:12 p:13 q:14
      │    │    │    │    ├── upsert-distinct-on
      │    │    │    │    │    ├── columns: column1:6!null column2:7!null column8:8!null column9:9!null
      │    │    │    │    │    ├── grouping columns: column1:6!null
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: column9:9!null column1:6!null column2:7!null column8:8!null
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: column8:8!null column1:6!null column2:7!null
      │    │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    │    ├── columns: column1:6!null column2:7!null
      │    │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         └── 10 [as=column8:8]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── column8:8 + column2:7 [as=column9:9]
      │    │    │    │    │    └── aggregations
      │    │    │    │    │         ├── first-agg [as=column2:7]
      │    │    │    │    │         │    └── column2:7
      │    │    │    │    │         ├── first-agg [as=column8:8]
      │    │    │    │    │         │    └── column8:8
      │    │    │    │    │         └── first-agg [as=column9:9]
      │    │    │    │    │              └── column9:9
      │    │    │    │    ├── scan mutation
      │    │    │    │    │    ├── columns: m:10!null n:11 o:12 p:13 q:14
      │    │    │    │    │    └── check constraint expressions
      │    │    │    │    │         └── m:10 > 0
      │    │    │    │    └── filters
      │    │    │    │         └── column1:6 = m:10
      │    │    │    └── projections
      │    │    │         └── m:10 + 1 [as=column15:15]
      │    │    └── projections
      │    │         └── o:12 + n:11 [as=column16:16]
      │    └── projections
      │         ├── CASE WHEN m:10 IS NULL THEN column1:6 ELSE column15:15 END [as=upsert_m:17]
      │         ├── CASE WHEN m:10 IS NULL THEN column2:7 ELSE n:11 END [as=upsert_n:18]
      │         ├── CASE WHEN m:10 IS NULL THEN column8:8 ELSE o:12 END [as=upsert_o:19]
      │         └── CASE WHEN m:10 IS NULL THEN column9:9 ELSE column16:16 END [as=upsert_p:20]
      └── projections
           └── upsert_m:17 > 0 [as=check1:21]

# ------------------------------------------------------------------------------
# Test UPSERT.
# ------------------------------------------------------------------------------

# Single column primary key.
build
UPSERT INTO xyz VALUES (1)
----
upsert xyz
 ├── columns: <none>
 ├── canary column: 6
 ├── fetch columns: x:6 y:7 z:8
 ├── insert-mapping:
 │    ├── column1:4 => x:1
 │    ├── column5:5 => y:2
 │    └── column5:5 => z:3
 ├── update-mapping:
 │    ├── column5:5 => y:2
 │    └── column5:5 => z:3
 └── project
      ├── columns: upsert_x:9 column1:4!null column5:5 x:6 y:7 z:8
      ├── left-join (hash)
      │    ├── columns: column1:4!null column5:5 x:6 y:7 z:8
      │    ├── upsert-distinct-on
      │    │    ├── columns: column1:4!null column5:5
      │    │    ├── grouping columns: column1:4!null
      │    │    ├── project
      │    │    │    ├── columns: column5:5 column1:4!null
      │    │    │    ├── values
      │    │    │    │    ├── columns: column1:4!null
      │    │    │    │    └── (1,)
      │    │    │    └── projections
      │    │    │         └── NULL::INT8 [as=column5:5]
      │    │    └── aggregations
      │    │         └── first-agg [as=column5:5]
      │    │              └── column5:5
      │    ├── scan xyz
      │    │    └── columns: x:6!null y:7 z:8
      │    └── filters
      │         └── column1:4 = x:6
      └── projections
           └── CASE WHEN x:6 IS NULL THEN column1:4 ELSE x:6 END [as=upsert_x:9]

# Test multi-column primary key that contains all columns in table.
build
UPSERT INTO uv VALUES (1, 2) RETURNING *
----
upsert uv
 ├── columns: u:1!null v:2!null
 ├── upsert-mapping:
 │    ├── column1:3 => u:1
 │    └── column2:4 => v:2
 └── values
      ├── columns: column1:3!null column2:4!null
      └── (1, 2)

# Use returning UPSERT as a FROM expression.
build
SELECT * FROM [UPSERT INTO abc VALUES (1, 2) RETURNING *]
----
with &1
 ├── columns: a:14!null b:15!null c:16!null
 ├── project
 │    ├── columns: abc.a:1!null abc.b:2!null abc.c:3!null
 │    └── upsert abc
 │         ├── columns: abc.a:1!null abc.b:2!null abc.c:3!null rowid:4!null
 │         ├── canary column: 12
 │         ├── fetch columns: abc.a:9 abc.b:10 abc.c:11 rowid:12
 │         ├── insert-mapping:
 │         │    ├── column1:5 => abc.a:1
 │         │    ├── column2:6 => abc.b:2
 │         │    ├── column8:8 => abc.c:3
 │         │    └── column7:7 => rowid:4
 │         ├── update-mapping:
 │         │    ├── column1:5 => abc.a:1
 │         │    ├── column2:6 => abc.b:2
 │         │    └── column8:8 => abc.c:3
 │         ├── return-mapping:
 │         │    ├── column1:5 => abc.a:1
 │         │    ├── column2:6 => abc.b:2
 │         │    ├── column8:8 => abc.c:3
 │         │    └── upsert_rowid:13 => rowid:4
 │         └── project
 │              ├── columns: upsert_rowid:13 column1:5!null column2:6!null column7:7 column8:8!null abc.a:9 abc.b:10 abc.c:11 rowid:12
 │              ├── left-join (hash)
 │              │    ├── columns: column1:5!null column2:6!null column7:7 column8:8!null abc.a:9 abc.b:10 abc.c:11 rowid:12
 │              │    ├── upsert-distinct-on
 │              │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8!null
 │              │    │    ├── grouping columns: column7:7
 │              │    │    ├── project
 │              │    │    │    ├── columns: column8:8!null column1:5!null column2:6!null column7:7
 │              │    │    │    ├── project
 │              │    │    │    │    ├── columns: column7:7 column1:5!null column2:6!null
 │              │    │    │    │    ├── values
 │              │    │    │    │    │    ├── columns: column1:5!null column2:6!null
 │              │    │    │    │    │    └── (1, 2)
 │              │    │    │    │    └── projections
 │              │    │    │    │         └── unique_rowid() [as=column7:7]
 │              │    │    │    └── projections
 │              │    │    │         └── column2:6 + 1 [as=column8:8]
 │              │    │    └── aggregations
 │              │    │         ├── first-agg [as=column1:5]
 │              │    │         │    └── column1:5
 │              │    │         ├── first-agg [as=column2:6]
 │              │    │         │    └── column2:6
 │              │    │         └── first-agg [as=column8:8]
 │              │    │              └── column8:8
 │              │    ├── scan abc
 │              │    │    ├── columns: abc.a:9!null abc.b:10 abc.c:11 rowid:12!null
 │              │    │    └── computed column expressions
 │              │    │         └── abc.c:11
 │              │    │              └── abc.b:10 + 1
 │              │    └── filters
 │              │         └── column7:7 = rowid:12
 │              └── projections
 │                   └── CASE WHEN rowid:12 IS NULL THEN column7:7 ELSE rowid:12 END [as=upsert_rowid:13]
 └── with-scan &1
      ├── columns: a:14!null b:15!null c:16!null
      └── mapping:
           ├──  abc.a:1 => a:14
           ├──  abc.b:2 => b:15
           └──  abc.c:3 => c:16

# Use explicitly specified column names with secondary indexes present. Existing
# values of other columns need to be fetched to delete existing index rows.
build
UPSERT INTO xyz (z, x, y) VALUES (1, 2, 3)
----
upsert xyz
 ├── columns: <none>
 ├── canary column: 7
 ├── fetch columns: x:7 y:8 z:9
 ├── insert-mapping:
 │    ├── column2:5 => x:1
 │    ├── column3:6 => y:2
 │    └── column1:4 => z:3
 ├── update-mapping:
 │    ├── column3:6 => y:2
 │    └── column1:4 => z:3
 └── project
      ├── columns: upsert_x:10 column1:4!null column2:5!null column3:6!null x:7 y:8 z:9
      ├── left-join (hash)
      │    ├── columns: column1:4!null column2:5!null column3:6!null x:7 y:8 z:9
      │    ├── upsert-distinct-on
      │    │    ├── columns: column1:4!null column2:5!null column3:6!null
      │    │    ├── grouping columns: column2:5!null
      │    │    ├── values
      │    │    │    ├── columns: column1:4!null column2:5!null column3:6!null
      │    │    │    └── (1, 2, 3)
      │    │    └── aggregations
      │    │         ├── first-agg [as=column1:4]
      │    │         │    └── column1:4
      │    │         └── first-agg [as=column3:6]
      │    │              └── column3:6
      │    ├── scan xyz
      │    │    └── columns: x:7!null y:8 z:9
      │    └── filters
      │         └── column2:5 = x:7
      └── projections
           └── CASE WHEN x:7 IS NULL THEN column2:5 ELSE x:7 END [as=upsert_x:10]

# Use explicitly specified column names with no secondary indexes present.
# Upsert implemented with blind Puts is possible.
build
UPSERT INTO noindex (x, y, z) VALUES (1, 2, 3)
----
upsert noindex
 ├── columns: <none>
 ├── upsert-mapping:
 │    ├── column1:4 => x:1
 │    ├── column2:5 => y:2
 │    └── column3:6 => z:3
 └── values
      ├── columns: column1:4!null column2:5!null column3:6!null
      └── (1, 2, 3)

# Use subset of explicitly specified column names with no secondary indexes
# present. Existing values of other columns need to be fetched to provide
# update values for unspecified columns.
build
UPSERT INTO checks (a, b, c) VALUES (1, 2, 3)
----
upsert checks
 ├── columns: <none>
 ├── canary column: 9
 ├── fetch columns: a:9 b:10 c:11 d:12
 ├── insert-mapping:
 │    ├── column1:5 => a:1
 │    ├── column2:6 => b:2
 │    ├── column3:7 => c:3
 │    └── column8:8 => d:4
 ├── update-mapping:
 │    ├── column2:6 => b:2
 │    ├── column3:7 => c:3
 │    └── column8:8 => d:4
 ├── check columns: check1:14 check2:15
 └── project
      ├── columns: check1:14!null check2:15 column1:5!null column2:6!null column3:7!null column8:8!null a:9 b:10 c:11 d:12 upsert_a:13
      ├── project
      │    ├── columns: upsert_a:13 column1:5!null column2:6!null column3:7!null column8:8!null a:9 b:10 c:11 d:12
      │    ├── left-join (hash)
      │    │    ├── columns: column1:5!null column2:6!null column3:7!null column8:8!null a:9 b:10 c:11 d:12
      │    │    ├── upsert-distinct-on
      │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null column8:8!null
      │    │    │    ├── grouping columns: column1:5!null
      │    │    │    ├── project
      │    │    │    │    ├── columns: column8:8!null column1:5!null column2:6!null column3:7!null
      │    │    │    │    ├── values
      │    │    │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null
      │    │    │    │    │    └── (1, 2, 3)
      │    │    │    │    └── projections
      │    │    │    │         └── column3:7 + 1 [as=column8:8]
      │    │    │    └── aggregations
      │    │    │         ├── first-agg [as=column2:6]
      │    │    │         │    └── column2:6
      │    │    │         ├── first-agg [as=column3:7]
      │    │    │         │    └── column3:7
      │    │    │         └── first-agg [as=column8:8]
      │    │    │              └── column8:8
      │    │    ├── scan checks
      │    │    │    ├── columns: a:9!null b:10 c:11 d:12
      │    │    │    ├── check constraint expressions
      │    │    │    │    ├── b:10 < d:12
      │    │    │    │    └── a:9 > 0
      │    │    │    └── computed column expressions
      │    │    │         └── d:12
      │    │    │              └── c:11 + 1
      │    │    └── filters
      │    │         └── column1:5 = a:9
      │    └── projections
      │         └── CASE WHEN a:9 IS NULL THEN column1:5 ELSE a:9 END [as=upsert_a:13]
      └── projections
           ├── column2:6 < column8:8 [as=check1:14]
           └── upsert_a:13 > 0 [as=check2:15]

# Don't directly update mutation columns. However, computed columns do need to
# be updated. Use explicit target columns.
build
UPSERT INTO mutation (m, n) VALUES (1, 2)
----
upsert mutation
 ├── columns: <none>
 ├── canary column: 10
 ├── fetch columns: m:10 n:11 o:12 p:13 q:14
 ├── insert-mapping:
 │    ├── column1:6 => m:1
 │    ├── column2:7 => n:2
 │    ├── column8:8 => o:3
 │    └── column9:9 => p:4
 ├── update-mapping:
 │    ├── column2:7 => n:2
 │    └── upsert_p:18 => p:4
 ├── check columns: check1:19
 └── project
      ├── columns: check1:19 column1:6!null column2:7!null column8:8!null column9:9!null m:10 n:11 o:12 p:13 q:14 column15:15 upsert_m:16 upsert_o:17 upsert_p:18
      ├── project
      │    ├── columns: upsert_m:16 upsert_o:17 upsert_p:18 column1:6!null column2:7!null column8:8!null column9:9!null m:10 n:11 o:12 p:13 q:14 column15:15
      │    ├── project
      │    │    ├── columns: column15:15 column1:6!null column2:7!null column8:8!null column9:9!null m:10 n:11 o:12 p:13 q:14
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:6!null column2:7!null column8:8!null column9:9!null m:10 n:11 o:12 p:13 q:14
      │    │    │    ├── upsert-distinct-on
      │    │    │    │    ├── columns: column1:6!null column2:7!null column8:8!null column9:9!null
      │    │    │    │    ├── grouping columns: column1:6!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: column9:9!null column1:6!null column2:7!null column8:8!null
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: column8:8!null column1:6!null column2:7!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:6!null column2:7!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── 10 [as=column8:8]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── column8:8 + column2:7 [as=column9:9]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column2:7]
      │    │    │    │         │    └── column2:7
      │    │    │    │         ├── first-agg [as=column8:8]
      │    │    │    │         │    └── column8:8
      │    │    │    │         └── first-agg [as=column9:9]
      │    │    │    │              └── column9:9
      │    │    │    ├── scan mutation
      │    │    │    │    ├── columns: m:10!null n:11 o:12 p:13 q:14
      │    │    │    │    └── check constraint expressions
      │    │    │    │         └── m:10 > 0
      │    │    │    └── filters
      │    │    │         └── column1:6 = m:10
      │    │    └── projections
      │    │         └── o:12 + column2:7 [as=column15:15]
      │    └── projections
      │         ├── CASE WHEN m:10 IS NULL THEN column1:6 ELSE m:10 END [as=upsert_m:16]
      │         ├── CASE WHEN m:10 IS NULL THEN column8:8 ELSE o:12 END [as=upsert_o:17]
      │         └── CASE WHEN m:10 IS NULL THEN column9:9 ELSE column15:15 END [as=upsert_p:18]
      └── projections
           └── upsert_m:16 > 0 [as=check1:19]

# Don't directly update mutation columns. However, computed columns do need to
# be updated. Use implicit target columns.
build
UPSERT INTO mutation VALUES (1, 2)
----
upsert mutation
 ├── columns: <none>
 ├── canary column: 10
 ├── fetch columns: m:10 n:11 o:12 p:13 q:14
 ├── insert-mapping:
 │    ├── column1:6 => m:1
 │    ├── column2:7 => n:2
 │    ├── column8:8 => o:3
 │    └── column9:9 => p:4
 ├── update-mapping:
 │    ├── column2:7 => n:2
 │    └── upsert_p:18 => p:4
 ├── check columns: check1:19
 └── project
      ├── columns: check1:19 column1:6!null column2:7!null column8:8!null column9:9!null m:10 n:11 o:12 p:13 q:14 column15:15 upsert_m:16 upsert_o:17 upsert_p:18
      ├── project
      │    ├── columns: upsert_m:16 upsert_o:17 upsert_p:18 column1:6!null column2:7!null column8:8!null column9:9!null m:10 n:11 o:12 p:13 q:14 column15:15
      │    ├── project
      │    │    ├── columns: column15:15 column1:6!null column2:7!null column8:8!null column9:9!null m:10 n:11 o:12 p:13 q:14
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:6!null column2:7!null column8:8!null column9:9!null m:10 n:11 o:12 p:13 q:14
      │    │    │    ├── upsert-distinct-on
      │    │    │    │    ├── columns: column1:6!null column2:7!null column8:8!null column9:9!null
      │    │    │    │    ├── grouping columns: column1:6!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: column9:9!null column1:6!null column2:7!null column8:8!null
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: column8:8!null column1:6!null column2:7!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:6!null column2:7!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── 10 [as=column8:8]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── column8:8 + column2:7 [as=column9:9]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column2:7]
      │    │    │    │         │    └── column2:7
      │    │    │    │         ├── first-agg [as=column8:8]
      │    │    │    │         │    └── column8:8
      │    │    │    │         └── first-agg [as=column9:9]
      │    │    │    │              └── column9:9
      │    │    │    ├── scan mutation
      │    │    │    │    ├── columns: m:10!null n:11 o:12 p:13 q:14
      │    │    │    │    └── check constraint expressions
      │    │    │    │         └── m:10 > 0
      │    │    │    └── filters
      │    │    │         └── column1:6 = m:10
      │    │    └── projections
      │    │         └── o:12 + column2:7 [as=column15:15]
      │    └── projections
      │         ├── CASE WHEN m:10 IS NULL THEN column1:6 ELSE m:10 END [as=upsert_m:16]
      │         ├── CASE WHEN m:10 IS NULL THEN column8:8 ELSE o:12 END [as=upsert_o:17]
      │         └── CASE WHEN m:10 IS NULL THEN column9:9 ELSE column15:15 END [as=upsert_p:18]
      └── projections
           └── upsert_m:16 > 0 [as=check1:19]

# Use unknown name in upsert column list.
build
UPSERT INTO xyz (x, unknown) VALUES (1)
----
error (42703): column "unknown" does not exist

# ------------------------------------------------------------------------------
# Test check constraints.
# ------------------------------------------------------------------------------

# INSERT..ON CONFLICT
build
INSERT INTO checks (a, b) VALUES (1, 2) ON CONFLICT (a) DO UPDATE SET b=3, c=4
----
upsert checks
 ├── columns: <none>
 ├── canary column: 9
 ├── fetch columns: a:9 b:10 c:11 d:12
 ├── insert-mapping:
 │    ├── column1:5 => a:1
 │    ├── column2:6 => b:2
 │    ├── column7:7 => c:3
 │    └── column8:8 => d:4
 ├── update-mapping:
 │    ├── upsert_b:17 => b:2
 │    ├── upsert_c:18 => c:3
 │    └── upsert_d:19 => d:4
 ├── check columns: check1:20 check2:21
 └── project
      ├── columns: check1:20 check2:21 column1:5!null column2:6!null column7:7 column8:8 a:9 b:10 c:11 d:12 column13:13!null column14:14!null column15:15!null upsert_a:16 upsert_b:17!null upsert_c:18 upsert_d:19
      ├── project
      │    ├── columns: upsert_a:16 upsert_b:17!null upsert_c:18 upsert_d:19 column1:5!null column2:6!null column7:7 column8:8 a:9 b:10 c:11 d:12 column13:13!null column14:14!null column15:15!null
      │    ├── project
      │    │    ├── columns: column15:15!null column1:5!null column2:6!null column7:7 column8:8 a:9 b:10 c:11 d:12 column13:13!null column14:14!null
      │    │    ├── project
      │    │    │    ├── columns: column13:13!null column14:14!null column1:5!null column2:6!null column7:7 column8:8 a:9 b:10 c:11 d:12
      │    │    │    ├── left-join (hash)
      │    │    │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8 a:9 b:10 c:11 d:12
      │    │    │    │    ├── upsert-distinct-on
      │    │    │    │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8
      │    │    │    │    │    ├── grouping columns: column1:5!null
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: column8:8 column1:5!null column2:6!null column7:7
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: column7:7 column1:5!null column2:6!null
      │    │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    │    ├── columns: column1:5!null column2:6!null
      │    │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         └── NULL::INT8 [as=column7:7]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── column7:7 + 1 [as=column8:8]
      │    │    │    │    │    └── aggregations
      │    │    │    │    │         ├── first-agg [as=column2:6]
      │    │    │    │    │         │    └── column2:6
      │    │    │    │    │         ├── first-agg [as=column7:7]
      │    │    │    │    │         │    └── column7:7
      │    │    │    │    │         └── first-agg [as=column8:8]
      │    │    │    │    │              └── column8:8
      │    │    │    │    ├── scan checks
      │    │    │    │    │    ├── columns: a:9!null b:10 c:11 d:12
      │    │    │    │    │    ├── check constraint expressions
      │    │    │    │    │    │    ├── b:10 < d:12
      │    │    │    │    │    │    └── a:9 > 0
      │    │    │    │    │    └── computed column expressions
      │    │    │    │    │         └── d:12
      │    │    │    │    │              └── c:11 + 1
      │    │    │    │    └── filters
      │    │    │    │         └── column1:5 = a:9
      │    │    │    └── projections
      │    │    │         ├── 3 [as=column13:13]
      │    │    │         └── 4 [as=column14:14]
      │    │    └── projections
      │    │         └── column14:14 + 1 [as=column15:15]
      │    └── projections
      │         ├── CASE WHEN a:9 IS NULL THEN column1:5 ELSE a:9 END [as=upsert_a:16]
      │         ├── CASE WHEN a:9 IS NULL THEN column2:6 ELSE column13:13 END [as=upsert_b:17]
      │         ├── CASE WHEN a:9 IS NULL THEN column7:7 ELSE column14:14 END [as=upsert_c:18]
      │         └── CASE WHEN a:9 IS NULL THEN column8:8 ELSE column15:15 END [as=upsert_d:19]
      └── projections
           ├── upsert_b:17 < upsert_d:19 [as=check1:20]
           └── upsert_a:16 > 0 [as=check2:21]

# INSERT..ON CONFLICT DO NOTHING
build
INSERT INTO checks (a, b) VALUES (1, 2) ON CONFLICT (a) DO NOTHING
----
insert checks
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:5 => a:1
 │    ├── column2:6 => b:2
 │    ├── column7:7 => c:3
 │    └── column8:8 => d:4
 ├── check columns: check1:13 check2:14
 └── project
      ├── columns: check1:13 check2:14!null column1:5!null column2:6!null column7:7 column8:8
      ├── upsert-distinct-on
      │    ├── columns: column1:5!null column2:6!null column7:7 column8:8
      │    ├── grouping columns: column1:5!null
      │    ├── project
      │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8
      │    │    └── select
      │    │         ├── columns: column1:5!null column2:6!null column7:7 column8:8 a:9 b:10 c:11 d:12
      │    │         ├── left-join (hash)
      │    │         │    ├── columns: column1:5!null column2:6!null column7:7 column8:8 a:9 b:10 c:11 d:12
      │    │         │    ├── project
      │    │         │    │    ├── columns: column8:8 column1:5!null column2:6!null column7:7
      │    │         │    │    ├── project
      │    │         │    │    │    ├── columns: column7:7 column1:5!null column2:6!null
      │    │         │    │    │    ├── values
      │    │         │    │    │    │    ├── columns: column1:5!null column2:6!null
      │    │         │    │    │    │    └── (1, 2)
      │    │         │    │    │    └── projections
      │    │         │    │    │         └── NULL::INT8 [as=column7:7]
      │    │         │    │    └── projections
      │    │         │    │         └── column7:7 + 1 [as=column8:8]
      │    │         │    ├── scan checks
      │    │         │    │    ├── columns: a:9!null b:10 c:11 d:12
      │    │         │    │    ├── check constraint expressions
      │    │         │    │    │    ├── b:10 < d:12
      │    │         │    │    │    └── a:9 > 0
      │    │         │    │    └── computed column expressions
      │    │         │    │         └── d:12
      │    │         │    │              └── c:11 + 1
      │    │         │    └── filters
      │    │         │         └── column1:5 = a:9
      │    │         └── filters
      │    │              └── a:9 IS NULL
      │    └── aggregations
      │         ├── first-agg [as=column2:6]
      │         │    └── column2:6
      │         ├── first-agg [as=column7:7]
      │         │    └── column7:7
      │         └── first-agg [as=column8:8]
      │              └── column8:8
      └── projections
           ├── column2:6 < column8:8 [as=check1:13]
           └── column1:5 > 0 [as=check2:14]

# UPSERT
build
UPSERT INTO checks (a, b) VALUES (1, 2)
----
upsert checks
 ├── columns: <none>
 ├── canary column: 9
 ├── fetch columns: a:9 b:10 c:11 d:12
 ├── insert-mapping:
 │    ├── column1:5 => a:1
 │    ├── column2:6 => b:2
 │    ├── column7:7 => c:3
 │    └── column8:8 => d:4
 ├── update-mapping:
 │    ├── column2:6 => b:2
 │    └── upsert_d:16 => d:4
 ├── check columns: check1:17 check2:18
 └── project
      ├── columns: check1:17 check2:18 column1:5!null column2:6!null column7:7 column8:8 a:9 b:10 c:11 d:12 column13:13 upsert_a:14 upsert_c:15 upsert_d:16
      ├── project
      │    ├── columns: upsert_a:14 upsert_c:15 upsert_d:16 column1:5!null column2:6!null column7:7 column8:8 a:9 b:10 c:11 d:12 column13:13
      │    ├── project
      │    │    ├── columns: column13:13 column1:5!null column2:6!null column7:7 column8:8 a:9 b:10 c:11 d:12
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8 a:9 b:10 c:11 d:12
      │    │    │    ├── upsert-distinct-on
      │    │    │    │    ├── columns: column1:5!null column2:6!null column7:7 column8:8
      │    │    │    │    ├── grouping columns: column1:5!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: column8:8 column1:5!null column2:6!null column7:7
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: column7:7 column1:5!null column2:6!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:5!null column2:6!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── NULL::INT8 [as=column7:7]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── column7:7 + 1 [as=column8:8]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column2:6]
      │    │    │    │         │    └── column2:6
      │    │    │    │         ├── first-agg [as=column7:7]
      │    │    │    │         │    └── column7:7
      │    │    │    │         └── first-agg [as=column8:8]
      │    │    │    │              └── column8:8
      │    │    │    ├── scan checks
      │    │    │    │    ├── columns: a:9!null b:10 c:11 d:12
      │    │    │    │    ├── check constraint expressions
      │    │    │    │    │    ├── b:10 < d:12
      │    │    │    │    │    └── a:9 > 0
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── d:12
      │    │    │    │              └── c:11 + 1
      │    │    │    └── filters
      │    │    │         └── column1:5 = a:9
      │    │    └── projections
      │    │         └── c:11 + 1 [as=column13:13]
      │    └── projections
      │         ├── CASE WHEN a:9 IS NULL THEN column1:5 ELSE a:9 END [as=upsert_a:14]
      │         ├── CASE WHEN a:9 IS NULL THEN column7:7 ELSE c:11 END [as=upsert_c:15]
      │         └── CASE WHEN a:9 IS NULL THEN column8:8 ELSE column13:13 END [as=upsert_d:16]
      └── projections
           ├── column2:6 < upsert_d:16 [as=check1:17]
           └── upsert_a:14 > 0 [as=check2:18]

# Use subqueries and excluded.
build
INSERT INTO checks
SELECT a, b FROM abc
ON CONFLICT (a) DO UPDATE SET a=excluded.a, b=(SELECT x FROM xyz WHERE x=checks.a)
----
upsert checks
 ├── columns: <none>
 ├── canary column: 11
 ├── fetch columns: checks.a:11 checks.b:12 checks.c:13 d:14
 ├── insert-mapping:
 │    ├── abc.a:5 => checks.a:1
 │    ├── abc.b:6 => checks.b:2
 │    ├── column9:9 => checks.c:3
 │    └── column10:10 => d:4
 ├── update-mapping:
 │    ├── abc.a:5 => checks.a:1
 │    ├── upsert_b:20 => checks.b:2
 │    └── upsert_d:22 => d:4
 ├── check columns: check1:23 check2:24
 └── project
      ├── columns: check1:23 check2:24!null abc.a:5!null abc.b:6 column9:9 column10:10 checks.a:11 checks.b:12 checks.c:13 d:14 column18:18 column19:19 upsert_b:20 upsert_c:21 upsert_d:22
      ├── project
      │    ├── columns: upsert_b:20 upsert_c:21 upsert_d:22 abc.a:5!null abc.b:6 column9:9 column10:10 checks.a:11 checks.b:12 checks.c:13 d:14 column18:18 column19:19
      │    ├── project
      │    │    ├── columns: column19:19 abc.a:5!null abc.b:6 column9:9 column10:10 checks.a:11 checks.b:12 checks.c:13 d:14 column18:18
      │    │    ├── project
      │    │    │    ├── columns: column18:18 abc.a:5!null abc.b:6 column9:9 column10:10 checks.a:11 checks.b:12 checks.c:13 d:14
      │    │    │    ├── left-join (hash)
      │    │    │    │    ├── columns: abc.a:5!null abc.b:6 column9:9 column10:10 checks.a:11 checks.b:12 checks.c:13 d:14
      │    │    │    │    ├── upsert-distinct-on
      │    │    │    │    │    ├── columns: abc.a:5!null abc.b:6 column9:9 column10:10
      │    │    │    │    │    ├── grouping columns: abc.a:5!null
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: column10:10 abc.a:5!null abc.b:6 column9:9
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: column9:9 abc.a:5!null abc.b:6
      │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    ├── columns: abc.a:5!null abc.b:6
      │    │    │    │    │    │    │    │    └── scan abc
      │    │    │    │    │    │    │    │         ├── columns: abc.a:5!null abc.b:6 abc.c:7 rowid:8!null
      │    │    │    │    │    │    │    │         └── computed column expressions
      │    │    │    │    │    │    │    │              └── abc.c:7
      │    │    │    │    │    │    │    │                   └── abc.b:6 + 1
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         └── NULL::INT8 [as=column9:9]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── column9:9 + 1 [as=column10:10]
      │    │    │    │    │    └── aggregations
      │    │    │    │    │         ├── first-agg [as=abc.b:6]
      │    │    │    │    │         │    └── abc.b:6
      │    │    │    │    │         ├── first-agg [as=column9:9]
      │    │    │    │    │         │    └── column9:9
      │    │    │    │    │         └── first-agg [as=column10:10]
      │    │    │    │    │              └── column10:10
      │    │    │    │    ├── scan checks
      │    │    │    │    │    ├── columns: checks.a:11!null checks.b:12 checks.c:13 d:14
      │    │    │    │    │    ├── check constraint expressions
      │    │    │    │    │    │    ├── checks.b:12 < d:14
      │    │    │    │    │    │    └── checks.a:11 > 0
      │    │    │    │    │    └── computed column expressions
      │    │    │    │    │         └── d:14
      │    │    │    │    │              └── checks.c:13 + 1
      │    │    │    │    └── filters
      │    │    │    │         └── abc.a:5 = checks.a:11
      │    │    │    └── projections
      │    │    │         └── subquery [as=column18:18]
      │    │    │              └── max1-row
      │    │    │                   ├── columns: x:15!null
      │    │    │                   └── project
      │    │    │                        ├── columns: x:15!null
      │    │    │                        └── select
      │    │    │                             ├── columns: x:15!null y:16 z:17
      │    │    │                             ├── scan xyz
      │    │    │                             │    └── columns: x:15!null y:16 z:17
      │    │    │                             └── filters
      │    │    │                                  └── x:15 = checks.a:11
      │    │    └── projections
      │    │         └── checks.c:13 + 1 [as=column19:19]
      │    └── projections
      │         ├── CASE WHEN checks.a:11 IS NULL THEN abc.b:6 ELSE column18:18 END [as=upsert_b:20]
      │         ├── CASE WHEN checks.a:11 IS NULL THEN column9:9 ELSE checks.c:13 END [as=upsert_c:21]
      │         └── CASE WHEN checks.a:11 IS NULL THEN column10:10 ELSE column19:19 END [as=upsert_d:22]
      └── projections
           ├── upsert_b:20 < upsert_d:22 [as=check1:23]
           └── abc.a:5 > 0 [as=check2:24]

# Use ORDER BY in upsert input (should be ignored and not cause error).
build
INSERT INTO xyz
SELECT a, b, c FROM abc ORDER BY a
ON CONFLICT (z, y) DO UPDATE SET y=5
----
upsert xyz
 ├── columns: <none>
 ├── canary column: 8
 ├── fetch columns: x:8 y:9 z:10
 ├── insert-mapping:
 │    ├── a:4 => x:1
 │    ├── b:5 => y:2
 │    └── c:6 => z:3
 ├── update-mapping:
 │    └── upsert_y:13 => y:2
 └── project
      ├── columns: upsert_x:12 upsert_y:13 upsert_z:14 a:4!null b:5 c:6 x:8 y:9 z:10 column11:11!null
      ├── project
      │    ├── columns: column11:11!null a:4!null b:5 c:6 x:8 y:9 z:10
      │    ├── left-join (hash)
      │    │    ├── columns: a:4!null b:5 c:6 x:8 y:9 z:10
      │    │    ├── upsert-distinct-on
      │    │    │    ├── columns: a:4!null b:5 c:6
      │    │    │    ├── grouping columns: b:5 c:6
      │    │    │    ├── project
      │    │    │    │    ├── columns: a:4!null b:5 c:6
      │    │    │    │    └── scan abc
      │    │    │    │         ├── columns: a:4!null b:5 c:6 rowid:7!null
      │    │    │    │         └── computed column expressions
      │    │    │    │              └── c:6
      │    │    │    │                   └── b:5 + 1
      │    │    │    └── aggregations
      │    │    │         └── first-agg [as=a:4]
      │    │    │              └── a:4
      │    │    ├── scan xyz
      │    │    │    └── columns: x:8!null y:9 z:10
      │    │    └── filters
      │    │         ├── b:5 = y:9
      │    │         └── c:6 = z:10
      │    └── projections
      │         └── 5 [as=column11:11]
      └── projections
           ├── CASE WHEN x:8 IS NULL THEN a:4 ELSE x:8 END [as=upsert_x:12]
           ├── CASE WHEN x:8 IS NULL THEN b:5 ELSE column11:11 END [as=upsert_y:13]
           └── CASE WHEN x:8 IS NULL THEN c:6 ELSE z:10 END [as=upsert_z:14]

# ------------------------------------------------------------------------------
# Test decimal column truncation.
# ------------------------------------------------------------------------------

# Fast UPSERT case.
opt
UPSERT INTO decimals (a, b) VALUES (1.1, ARRAY[0.95])
----
upsert decimals
 ├── columns: <none>
 ├── canary column: 13
 ├── fetch columns: decimals.a:13 decimals.b:14 decimals.c:15 decimals.d:16
 ├── insert-mapping:
 │    ├── a:8 => decimals.a:1
 │    ├── b:9 => decimals.b:2
 │    ├── c:10 => decimals.c:3
 │    └── d:12 => decimals.d:4
 ├── update-mapping:
 │    ├── b:9 => decimals.b:2
 │    └── upsert_d:21 => decimals.d:4
 ├── check columns: check1:22 check2:23
 └── project
      ├── columns: check1:22 check2:23 a:8 b:9 c:10 d:12 decimals.a:13 decimals.b:14 decimals.c:15 decimals.d:16 upsert_d:21
      ├── project
      │    ├── columns: upsert_a:19 upsert_d:21 a:8 b:9 c:10 d:12 decimals.a:13 decimals.b:14 decimals.c:15 decimals.d:16
      │    ├── left-join (lookup decimals)
      │    │    ├── columns: a:8 b:9 c:10 d:12 decimals.a:13 decimals.b:14 decimals.c:15 decimals.d:16
      │    │    ├── key columns: [8] = [13]
      │    │    ├── lookup columns are key
      │    │    ├── upsert-distinct-on
      │    │    │    ├── columns: a:8 b:9 c:10 d:12
      │    │    │    ├── grouping columns: a:8
      │    │    │    ├── project
      │    │    │    │    ├── columns: d:12 a:8 b:9 c:10
      │    │    │    │    ├── values
      │    │    │    │    │    ├── columns: a:8 b:9 c:10
      │    │    │    │    │    └── (crdb_internal.round_decimal_values(1.1, 0), crdb_internal.round_decimal_values(ARRAY[0.95], 1), crdb_internal.round_decimal_values(1.23, 1))
      │    │    │    │    └── projections
      │    │    │    │         └── crdb_internal.round_decimal_values(a:8 + c:10, 1) [as=d:12]
      │    │    │    └── aggregations
      │    │    │         ├── first-agg [as=b:9]
      │    │    │         │    └── b:9
      │    │    │         ├── first-agg [as=c:10]
      │    │    │         │    └── c:10
      │    │    │         └── first-agg [as=d:12]
      │    │    │              └── d:12
      │    │    └── filters (true)
      │    └── projections
      │         ├── CASE WHEN decimals.a:13 IS NULL THEN a:8 ELSE decimals.a:13 END [as=upsert_a:19]
      │         └── CASE WHEN decimals.a:13 IS NULL THEN d:12 ELSE crdb_internal.round_decimal_values(decimals.a:13 + decimals.c:15, 1) END [as=upsert_d:21]
      └── projections
           ├── upsert_a:19 = round(upsert_a:19) [as=check1:22]
           └── b:9[0] > 1 [as=check2:23]

# Regular UPSERT case.
opt
UPSERT INTO decimals (a) VALUES (1.1)
----
upsert decimals
 ├── columns: <none>
 ├── canary column: 13
 ├── fetch columns: decimals.a:13 decimals.b:14 decimals.c:15 decimals.d:16
 ├── insert-mapping:
 │    ├── a:8 => decimals.a:1
 │    ├── b:9 => decimals.b:2
 │    ├── c:10 => decimals.c:3
 │    └── d:12 => decimals.d:4
 ├── update-mapping:
 │    └── upsert_d:22 => decimals.d:4
 ├── check columns: check1:23 check2:24
 └── project
      ├── columns: check1:23 check2:24 a:8 b:9 c:10 d:12 decimals.a:13 decimals.b:14 decimals.c:15 decimals.d:16 upsert_d:22
      ├── project
      │    ├── columns: upsert_a:19 upsert_b:20 upsert_d:22 a:8 b:9 c:10 d:12 decimals.a:13 decimals.b:14 decimals.c:15 decimals.d:16
      │    ├── left-join (lookup decimals)
      │    │    ├── columns: a:8 b:9 c:10 d:12 decimals.a:13 decimals.b:14 decimals.c:15 decimals.d:16
      │    │    ├── key columns: [8] = [13]
      │    │    ├── lookup columns are key
      │    │    ├── upsert-distinct-on
      │    │    │    ├── columns: a:8 b:9 c:10 d:12
      │    │    │    ├── grouping columns: a:8
      │    │    │    ├── project
      │    │    │    │    ├── columns: d:12 a:8 b:9 c:10
      │    │    │    │    ├── values
      │    │    │    │    │    ├── columns: a:8 b:9 c:10
      │    │    │    │    │    └── (crdb_internal.round_decimal_values(1.1, 0), crdb_internal.round_decimal_values(CAST(NULL AS DECIMAL(5,1)[]), 1), crdb_internal.round_decimal_values(1.23, 1))
      │    │    │    │    └── projections
      │    │    │    │         └── crdb_internal.round_decimal_values(a:8 + c:10, 1) [as=d:12]
      │    │    │    └── aggregations
      │    │    │         ├── first-agg [as=b:9]
      │    │    │         │    └── b:9
      │    │    │         ├── first-agg [as=c:10]
      │    │    │         │    └── c:10
      │    │    │         └── first-agg [as=d:12]
      │    │    │              └── d:12
      │    │    └── filters (true)
      │    └── projections
      │         ├── CASE WHEN decimals.a:13 IS NULL THEN a:8 ELSE decimals.a:13 END [as=upsert_a:19]
      │         ├── CASE WHEN decimals.a:13 IS NULL THEN b:9 ELSE decimals.b:14 END [as=upsert_b:20]
      │         └── CASE WHEN decimals.a:13 IS NULL THEN d:12 ELSE crdb_internal.round_decimal_values(decimals.a:13 + decimals.c:15, 1) END [as=upsert_d:22]
      └── projections
           ├── upsert_a:19 = round(upsert_a:19) [as=check1:23]
           └── upsert_b:20[0] > 1 [as=check2:24]

# INSERT...ON CONFLICT case.
opt
INSERT INTO decimals (a, b) VALUES (1.1, ARRAY[0.95])
ON CONFLICT (a)
DO UPDATE SET b=ARRAY[0.99]
----
upsert decimals
 ├── columns: <none>
 ├── canary column: 13
 ├── fetch columns: decimals.a:13 decimals.b:14 decimals.c:15 decimals.d:16
 ├── insert-mapping:
 │    ├── a:8 => decimals.a:1
 │    ├── b:9 => decimals.b:2
 │    ├── c:10 => decimals.c:3
 │    └── d:12 => decimals.d:4
 ├── update-mapping:
 │    ├── upsert_b:22 => decimals.b:2
 │    └── upsert_d:24 => decimals.d:4
 ├── check columns: check1:25 check2:26
 └── project
      ├── columns: check1:25 check2:26 a:8 b:9 c:10 d:12 decimals.a:13 decimals.b:14 decimals.c:15 decimals.d:16 upsert_b:22 upsert_d:24
      ├── project
      │    ├── columns: upsert_a:21 upsert_b:22 upsert_d:24 a:8 b:9 c:10 d:12 decimals.a:13 decimals.b:14 decimals.c:15 decimals.d:16
      │    ├── left-join (lookup decimals)
      │    │    ├── columns: a:8 b:9 c:10 d:12 decimals.a:13 decimals.b:14 decimals.c:15 decimals.d:16
      │    │    ├── key columns: [8] = [13]
      │    │    ├── lookup columns are key
      │    │    ├── upsert-distinct-on
      │    │    │    ├── columns: a:8 b:9 c:10 d:12
      │    │    │    ├── grouping columns: a:8
      │    │    │    ├── project
      │    │    │    │    ├── columns: d:12 a:8 b:9 c:10
      │    │    │    │    ├── values
      │    │    │    │    │    ├── columns: a:8 b:9 c:10
      │    │    │    │    │    └── (crdb_internal.round_decimal_values(1.1, 0), crdb_internal.round_decimal_values(ARRAY[0.95], 1), crdb_internal.round_decimal_values(1.23, 1))
      │    │    │    │    └── projections
      │    │    │    │         └── crdb_internal.round_decimal_values(a:8 + c:10, 1) [as=d:12]
      │    │    │    └── aggregations
      │    │    │         ├── first-agg [as=b:9]
      │    │    │         │    └── b:9
      │    │    │         ├── first-agg [as=c:10]
      │    │    │         │    └── c:10
      │    │    │         └── first-agg [as=d:12]
      │    │    │              └── d:12
      │    │    └── filters (true)
      │    └── projections
      │         ├── CASE WHEN decimals.a:13 IS NULL THEN a:8 ELSE decimals.a:13 END [as=upsert_a:21]
      │         ├── CASE WHEN decimals.a:13 IS NULL THEN b:9 ELSE crdb_internal.round_decimal_values(ARRAY[0.99], 1) END [as=upsert_b:22]
      │         └── CASE WHEN decimals.a:13 IS NULL THEN d:12 ELSE crdb_internal.round_decimal_values(decimals.a:13 + decimals.c:15, 1) END [as=upsert_d:24]
      └── projections
           ├── upsert_a:21 = round(upsert_a:21) [as=check1:25]
           └── upsert_b:22[0] > 1 [as=check2:26]
