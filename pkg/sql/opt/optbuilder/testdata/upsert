exec-ddl
CREATE TABLE abc (
    a INT NOT NULL,
    b INT DEFAULT (10),
    c INT AS (b + 1) STORED,
    UNIQUE(a),
    UNIQUE(b, c)
)
----

exec-ddl
CREATE TABLE xyz (
    x INT PRIMARY KEY,
    y INT,
    z INT,
    UNIQUE (y, z),
    UNIQUE (z, y),
    INDEX (y DESC)
)
----

exec-ddl
CREATE TABLE uv (
    u INT,
    v INT,
    PRIMARY KEY (u, v)
)
----

exec-ddl
CREATE TABLE noindex (
    x INT PRIMARY KEY,
    y INT,
    z INT
)
----

exec-ddl
CREATE TABLE mutation (
    m INT PRIMARY KEY,
    n INT,
    "o:write-only" INT DEFAULT(10),
    "p:write-only" INT AS (o + n) STORED,
    "q:delete-only" INT AS (m * p) STORED,
    CHECK (m > 0)
)
----

exec-ddl
CREATE TABLE checks (
    a INT PRIMARY KEY CHECK (a > 0),
    b INT,
    c INT,
    d INT AS (c + 1) STORED,
    CHECK (b < d)
)
----

exec-ddl
CREATE TABLE decimals (
    a DECIMAL(10,0) PRIMARY KEY CHECK (round(a) = a),
    b DECIMAL(5,1)[] CHECK (b[0] > 1),
    c DECIMAL(10,1) DEFAULT (1.23),
    d DECIMAL(10,1) AS (a+c) STORED
)
----

exec-ddl
CREATE TABLE uniq (
  x STRING PRIMARY KEY,
  y STRING UNIQUE,
  z STRING UNIQUE
)
----

# ------------------------------------------------------------------------------
# Basic tests.
# ------------------------------------------------------------------------------

# Set single column, single column conflict.
build
INSERT INTO abc (a, b)
SELECT x, y FROM xyz
ON CONFLICT (a) DO
UPDATE SET a=5
----
upsert abc
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── canary column: a:14
 ├── fetch columns: a:14 b:15 c:16 rowid:17
 ├── insert-mapping:
 │    ├── x:7 => a:1
 │    ├── y:8 => b:2
 │    ├── c_comp:13 => c:3
 │    └── rowid_default:12 => rowid:4
 ├── update-mapping:
 │    └── upsert_a:22 => a:1
 └── project
      ├── columns: upsert_a:22!null upsert_b:23 upsert_c:24 upsert_rowid:25 x:7!null y:8 rowid_default:12 c_comp:13 a:14 b:15 c:16 rowid:17 abc.crdb_internal_mvcc_timestamp:18 abc.tableoid:19 a_new:20!null c_comp:21
      ├── project
      │    ├── columns: c_comp:21 x:7!null y:8 rowid_default:12 c_comp:13 a:14 b:15 c:16 rowid:17 abc.crdb_internal_mvcc_timestamp:18 abc.tableoid:19 a_new:20!null
      │    ├── project
      │    │    ├── columns: a_new:20!null x:7!null y:8 rowid_default:12 c_comp:13 a:14 b:15 c:16 rowid:17 abc.crdb_internal_mvcc_timestamp:18 abc.tableoid:19
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: x:7!null y:8 rowid_default:12 c_comp:13 a:14 b:15 c:16 rowid:17 abc.crdb_internal_mvcc_timestamp:18 abc.tableoid:19
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: x:7!null y:8 rowid_default:12 c_comp:13
      │    │    │    │    ├── grouping columns: x:7!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: c_comp:13 x:7!null y:8 rowid_default:12
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: rowid_default:12 x:7!null y:8
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: x:7!null y:8
      │    │    │    │    │    │    │    └── scan xyz
      │    │    │    │    │    │    │         └── columns: x:7!null y:8 z:9 xyz.crdb_internal_mvcc_timestamp:10 xyz.tableoid:11
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── unique_rowid() [as=rowid_default:12]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── y:8 + 1 [as=c_comp:13]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=y:8]
      │    │    │    │         │    └── y:8
      │    │    │    │         ├── first-agg [as=rowid_default:12]
      │    │    │    │         │    └── rowid_default:12
      │    │    │    │         └── first-agg [as=c_comp:13]
      │    │    │    │              └── c_comp:13
      │    │    │    ├── scan abc
      │    │    │    │    ├── columns: a:14!null b:15 c:16 rowid:17!null abc.crdb_internal_mvcc_timestamp:18 abc.tableoid:19
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── c:16
      │    │    │    │              └── b:15 + 1
      │    │    │    └── filters
      │    │    │         └── x:7 = a:14
      │    │    └── projections
      │    │         └── 5 [as=a_new:20]
      │    └── projections
      │         └── b:15 + 1 [as=c_comp:21]
      └── projections
           ├── CASE WHEN a:14 IS NULL THEN x:7 ELSE a_new:20 END [as=upsert_a:22]
           ├── CASE WHEN a:14 IS NULL THEN y:8 ELSE b:15 END [as=upsert_b:23]
           ├── CASE WHEN a:14 IS NULL THEN c_comp:13 ELSE c:16 END [as=upsert_c:24]
           └── CASE WHEN a:14 IS NULL THEN rowid_default:12 ELSE rowid:17 END [as=upsert_rowid:25]

# Set all columns, multi-column conflict.
build
INSERT INTO abc (a, b, rowid)
SELECT x, y, z FROM xyz
ON CONFLICT (b, c) DO
UPDATE SET a=1, b=2, rowid=3
RETURNING *
----
project
 ├── columns: a:1!null b:2 c:3
 └── upsert abc
      ├── columns: a:1!null b:2 c:3 rowid:4!null
      ├── arbiter indexes: secondary
      ├── canary column: rowid:16
      ├── fetch columns: a:13 b:14 c:15 rowid:16
      ├── insert-mapping:
      │    ├── x:7 => a:1
      │    ├── y:8 => b:2
      │    ├── c_comp:12 => c:3
      │    └── z:9 => rowid:4
      ├── update-mapping:
      │    ├── upsert_a:23 => a:1
      │    ├── upsert_b:24 => b:2
      │    ├── upsert_c:25 => c:3
      │    └── upsert_rowid:26 => rowid:4
      ├── return-mapping:
      │    ├── upsert_a:23 => a:1
      │    ├── upsert_b:24 => b:2
      │    ├── upsert_c:25 => c:3
      │    └── upsert_rowid:26 => rowid:4
      └── project
           ├── columns: upsert_a:23!null upsert_b:24 upsert_c:25 upsert_rowid:26 x:7!null y:8 z:9 c_comp:12 a:13 b:14 c:15 rowid:16 abc.crdb_internal_mvcc_timestamp:17 abc.tableoid:18 a_new:19!null b_new:20!null rowid_new:21!null c_comp:22!null
           ├── project
           │    ├── columns: c_comp:22!null x:7!null y:8 z:9 c_comp:12 a:13 b:14 c:15 rowid:16 abc.crdb_internal_mvcc_timestamp:17 abc.tableoid:18 a_new:19!null b_new:20!null rowid_new:21!null
           │    ├── project
           │    │    ├── columns: a_new:19!null b_new:20!null rowid_new:21!null x:7!null y:8 z:9 c_comp:12 a:13 b:14 c:15 rowid:16 abc.crdb_internal_mvcc_timestamp:17 abc.tableoid:18
           │    │    ├── left-join (hash)
           │    │    │    ├── columns: x:7!null y:8 z:9 c_comp:12 a:13 b:14 c:15 rowid:16 abc.crdb_internal_mvcc_timestamp:17 abc.tableoid:18
           │    │    │    ├── ensure-upsert-distinct-on
           │    │    │    │    ├── columns: x:7!null y:8 z:9 c_comp:12
           │    │    │    │    ├── grouping columns: y:8 c_comp:12
           │    │    │    │    ├── project
           │    │    │    │    │    ├── columns: c_comp:12 x:7!null y:8 z:9
           │    │    │    │    │    ├── project
           │    │    │    │    │    │    ├── columns: x:7!null y:8 z:9
           │    │    │    │    │    │    └── scan xyz
           │    │    │    │    │    │         └── columns: x:7!null y:8 z:9 xyz.crdb_internal_mvcc_timestamp:10 xyz.tableoid:11
           │    │    │    │    │    └── projections
           │    │    │    │    │         └── y:8 + 1 [as=c_comp:12]
           │    │    │    │    └── aggregations
           │    │    │    │         ├── first-agg [as=x:7]
           │    │    │    │         │    └── x:7
           │    │    │    │         └── first-agg [as=z:9]
           │    │    │    │              └── z:9
           │    │    │    ├── scan abc
           │    │    │    │    ├── columns: a:13!null b:14 c:15 rowid:16!null abc.crdb_internal_mvcc_timestamp:17 abc.tableoid:18
           │    │    │    │    └── computed column expressions
           │    │    │    │         └── c:15
           │    │    │    │              └── b:14 + 1
           │    │    │    └── filters
           │    │    │         ├── y:8 = b:14
           │    │    │         └── c_comp:12 = c:15
           │    │    └── projections
           │    │         ├── 1 [as=a_new:19]
           │    │         ├── 2 [as=b_new:20]
           │    │         └── 3 [as=rowid_new:21]
           │    └── projections
           │         └── b_new:20 + 1 [as=c_comp:22]
           └── projections
                ├── CASE WHEN rowid:16 IS NULL THEN x:7 ELSE a_new:19 END [as=upsert_a:23]
                ├── CASE WHEN rowid:16 IS NULL THEN y:8 ELSE b_new:20 END [as=upsert_b:24]
                ├── CASE WHEN rowid:16 IS NULL THEN c_comp:12 ELSE c_comp:22 END [as=upsert_c:25]
                └── CASE WHEN rowid:16 IS NULL THEN z:9 ELSE rowid_new:21 END [as=upsert_rowid:26]

# UPDATE + WHERE clause.
build
INSERT INTO abc
SELECT x, y FROM xyz
ON CONFLICT (a) DO
UPDATE SET b=10
WHERE abc.a>0
----
upsert abc
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── canary column: a:14
 ├── fetch columns: a:14 b:15 c:16 rowid:17
 ├── insert-mapping:
 │    ├── x:7 => a:1
 │    ├── y:8 => b:2
 │    ├── c_comp:13 => c:3
 │    └── rowid_default:12 => rowid:4
 ├── update-mapping:
 │    ├── upsert_b:23 => b:2
 │    └── upsert_c:24 => c:3
 └── project
      ├── columns: upsert_a:22 upsert_b:23 upsert_c:24 upsert_rowid:25 x:7!null y:8 rowid_default:12 c_comp:13 a:14 b:15 c:16 rowid:17 abc.crdb_internal_mvcc_timestamp:18 abc.tableoid:19 b_new:20!null c_comp:21!null
      ├── project
      │    ├── columns: c_comp:21!null x:7!null y:8 rowid_default:12 c_comp:13 a:14 b:15 c:16 rowid:17 abc.crdb_internal_mvcc_timestamp:18 abc.tableoid:19 b_new:20!null
      │    ├── project
      │    │    ├── columns: b_new:20!null x:7!null y:8 rowid_default:12 c_comp:13 a:14 b:15 c:16 rowid:17 abc.crdb_internal_mvcc_timestamp:18 abc.tableoid:19
      │    │    ├── select
      │    │    │    ├── columns: x:7!null y:8 rowid_default:12 c_comp:13 a:14 b:15 c:16 rowid:17 abc.crdb_internal_mvcc_timestamp:18 abc.tableoid:19
      │    │    │    ├── left-join (hash)
      │    │    │    │    ├── columns: x:7!null y:8 rowid_default:12 c_comp:13 a:14 b:15 c:16 rowid:17 abc.crdb_internal_mvcc_timestamp:18 abc.tableoid:19
      │    │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    │    ├── columns: x:7!null y:8 rowid_default:12 c_comp:13
      │    │    │    │    │    ├── grouping columns: x:7!null
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: c_comp:13 x:7!null y:8 rowid_default:12
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: rowid_default:12 x:7!null y:8
      │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    ├── columns: x:7!null y:8
      │    │    │    │    │    │    │    │    └── scan xyz
      │    │    │    │    │    │    │    │         └── columns: x:7!null y:8 z:9 xyz.crdb_internal_mvcc_timestamp:10 xyz.tableoid:11
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         └── unique_rowid() [as=rowid_default:12]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── y:8 + 1 [as=c_comp:13]
      │    │    │    │    │    └── aggregations
      │    │    │    │    │         ├── first-agg [as=y:8]
      │    │    │    │    │         │    └── y:8
      │    │    │    │    │         ├── first-agg [as=rowid_default:12]
      │    │    │    │    │         │    └── rowid_default:12
      │    │    │    │    │         └── first-agg [as=c_comp:13]
      │    │    │    │    │              └── c_comp:13
      │    │    │    │    ├── scan abc
      │    │    │    │    │    ├── columns: a:14!null b:15 c:16 rowid:17!null abc.crdb_internal_mvcc_timestamp:18 abc.tableoid:19
      │    │    │    │    │    └── computed column expressions
      │    │    │    │    │         └── c:16
      │    │    │    │    │              └── b:15 + 1
      │    │    │    │    └── filters
      │    │    │    │         └── x:7 = a:14
      │    │    │    └── filters
      │    │    │         └── (a:14 IS NULL) OR (a:14 > 0)
      │    │    └── projections
      │    │         └── 10 [as=b_new:20]
      │    └── projections
      │         └── b_new:20 + 1 [as=c_comp:21]
      └── projections
           ├── CASE WHEN a:14 IS NULL THEN x:7 ELSE a:14 END [as=upsert_a:22]
           ├── CASE WHEN a:14 IS NULL THEN y:8 ELSE b_new:20 END [as=upsert_b:23]
           ├── CASE WHEN a:14 IS NULL THEN c_comp:13 ELSE c_comp:21 END [as=upsert_c:24]
           └── CASE WHEN a:14 IS NULL THEN rowid_default:12 ELSE rowid:17 END [as=upsert_rowid:25]

# Use RETURNING INSERT..ON CONFLICT as a FROM clause.
build
SELECT *
FROM [INSERT INTO abc (a, b) VALUES (1,2), (3,4) ON CONFLICT (a) DO UPDATE SET b=1 RETURNING *]
ORDER BY a, b DESC
----
sort
 ├── columns: a:23!null b:24!null c:25!null
 ├── ordering: +23,-24
 └── with &1
      ├── columns: a:23!null b:24!null c:25!null
      ├── project
      │    ├── columns: abc.a:1!null abc.b:2!null abc.c:3!null
      │    └── upsert abc
      │         ├── columns: abc.a:1!null abc.b:2!null abc.c:3!null rowid:4!null
      │         ├── arbiter indexes: secondary
      │         ├── canary column: abc.a:11
      │         ├── fetch columns: abc.a:11 abc.b:12 abc.c:13 rowid:14
      │         ├── insert-mapping:
      │         │    ├── column1:7 => abc.a:1
      │         │    ├── column2:8 => abc.b:2
      │         │    ├── c_comp:10 => abc.c:3
      │         │    └── rowid_default:9 => rowid:4
      │         ├── update-mapping:
      │         │    ├── upsert_b:20 => abc.b:2
      │         │    └── upsert_c:21 => abc.c:3
      │         ├── return-mapping:
      │         │    ├── upsert_a:19 => abc.a:1
      │         │    ├── upsert_b:20 => abc.b:2
      │         │    ├── upsert_c:21 => abc.c:3
      │         │    └── upsert_rowid:22 => rowid:4
      │         └── project
      │              ├── columns: upsert_a:19 upsert_b:20!null upsert_c:21!null upsert_rowid:22 column1:7!null column2:8!null rowid_default:9 c_comp:10!null abc.a:11 abc.b:12 abc.c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16 b_new:17!null c_comp:18!null
      │              ├── project
      │              │    ├── columns: c_comp:18!null column1:7!null column2:8!null rowid_default:9 c_comp:10!null abc.a:11 abc.b:12 abc.c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16 b_new:17!null
      │              │    ├── project
      │              │    │    ├── columns: b_new:17!null column1:7!null column2:8!null rowid_default:9 c_comp:10!null abc.a:11 abc.b:12 abc.c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │              │    │    ├── left-join (hash)
      │              │    │    │    ├── columns: column1:7!null column2:8!null rowid_default:9 c_comp:10!null abc.a:11 abc.b:12 abc.c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │              │    │    │    ├── ensure-upsert-distinct-on
      │              │    │    │    │    ├── columns: column1:7!null column2:8!null rowid_default:9 c_comp:10!null
      │              │    │    │    │    ├── grouping columns: column1:7!null
      │              │    │    │    │    ├── project
      │              │    │    │    │    │    ├── columns: c_comp:10!null column1:7!null column2:8!null rowid_default:9
      │              │    │    │    │    │    ├── project
      │              │    │    │    │    │    │    ├── columns: rowid_default:9 column1:7!null column2:8!null
      │              │    │    │    │    │    │    ├── values
      │              │    │    │    │    │    │    │    ├── columns: column1:7!null column2:8!null
      │              │    │    │    │    │    │    │    ├── (1, 2)
      │              │    │    │    │    │    │    │    └── (3, 4)
      │              │    │    │    │    │    │    └── projections
      │              │    │    │    │    │    │         └── unique_rowid() [as=rowid_default:9]
      │              │    │    │    │    │    └── projections
      │              │    │    │    │    │         └── column2:8 + 1 [as=c_comp:10]
      │              │    │    │    │    └── aggregations
      │              │    │    │    │         ├── first-agg [as=column2:8]
      │              │    │    │    │         │    └── column2:8
      │              │    │    │    │         ├── first-agg [as=rowid_default:9]
      │              │    │    │    │         │    └── rowid_default:9
      │              │    │    │    │         └── first-agg [as=c_comp:10]
      │              │    │    │    │              └── c_comp:10
      │              │    │    │    ├── scan abc
      │              │    │    │    │    ├── columns: abc.a:11!null abc.b:12 abc.c:13 rowid:14!null crdb_internal_mvcc_timestamp:15 tableoid:16
      │              │    │    │    │    └── computed column expressions
      │              │    │    │    │         └── abc.c:13
      │              │    │    │    │              └── abc.b:12 + 1
      │              │    │    │    └── filters
      │              │    │    │         └── column1:7 = abc.a:11
      │              │    │    └── projections
      │              │    │         └── 1 [as=b_new:17]
      │              │    └── projections
      │              │         └── b_new:17 + 1 [as=c_comp:18]
      │              └── projections
      │                   ├── CASE WHEN abc.a:11 IS NULL THEN column1:7 ELSE abc.a:11 END [as=upsert_a:19]
      │                   ├── CASE WHEN abc.a:11 IS NULL THEN column2:8 ELSE b_new:17 END [as=upsert_b:20]
      │                   ├── CASE WHEN abc.a:11 IS NULL THEN c_comp:10 ELSE c_comp:18 END [as=upsert_c:21]
      │                   └── CASE WHEN abc.a:11 IS NULL THEN rowid_default:9 ELSE rowid:14 END [as=upsert_rowid:22]
      └── with-scan &1
           ├── columns: a:23!null b:24!null c:25!null
           └── mapping:
                ├──  abc.a:1 => a:23
                ├──  abc.b:2 => b:24
                └──  abc.c:3 => c:25

# Use table alias.
build
INSERT INTO abc AS tab (a, b)
VALUES (1, 2)
ON CONFLICT (a) DO
UPDATE SET a=tab.a*excluded.a
----
upsert abc [as=tab]
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── canary column: a:11
 ├── fetch columns: a:11 b:12 c:13 rowid:14
 ├── insert-mapping:
 │    ├── column1:7 => a:1
 │    ├── column2:8 => b:2
 │    ├── c_comp:10 => c:3
 │    └── rowid_default:9 => rowid:4
 ├── update-mapping:
 │    └── upsert_a:19 => a:1
 └── project
      ├── columns: upsert_a:19 upsert_b:20 upsert_c:21 upsert_rowid:22 column1:7!null column2:8!null rowid_default:9 c_comp:10!null a:11 b:12 c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16 a_new:17 c_comp:18
      ├── project
      │    ├── columns: c_comp:18 column1:7!null column2:8!null rowid_default:9 c_comp:10!null a:11 b:12 c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16 a_new:17
      │    ├── project
      │    │    ├── columns: a_new:17 column1:7!null column2:8!null rowid_default:9 c_comp:10!null a:11 b:12 c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:7!null column2:8!null rowid_default:9 c_comp:10!null a:11 b:12 c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: column1:7!null column2:8!null rowid_default:9 c_comp:10!null
      │    │    │    │    ├── grouping columns: column1:7!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: c_comp:10!null column1:7!null column2:8!null rowid_default:9
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: rowid_default:9 column1:7!null column2:8!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:7!null column2:8!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── unique_rowid() [as=rowid_default:9]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── column2:8 + 1 [as=c_comp:10]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column2:8]
      │    │    │    │         │    └── column2:8
      │    │    │    │         ├── first-agg [as=rowid_default:9]
      │    │    │    │         │    └── rowid_default:9
      │    │    │    │         └── first-agg [as=c_comp:10]
      │    │    │    │              └── c_comp:10
      │    │    │    ├── scan abc [as=tab]
      │    │    │    │    ├── columns: a:11!null b:12 c:13 rowid:14!null crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── c:13
      │    │    │    │              └── b:12 + 1
      │    │    │    └── filters
      │    │    │         └── column1:7 = a:11
      │    │    └── projections
      │    │         └── a:11 * column1:7 [as=a_new:17]
      │    └── projections
      │         └── b:12 + 1 [as=c_comp:18]
      └── projections
           ├── CASE WHEN a:11 IS NULL THEN column1:7 ELSE a_new:17 END [as=upsert_a:19]
           ├── CASE WHEN a:11 IS NULL THEN column2:8 ELSE b:12 END [as=upsert_b:20]
           ├── CASE WHEN a:11 IS NULL THEN c_comp:10 ELSE c:13 END [as=upsert_c:21]
           └── CASE WHEN a:11 IS NULL THEN rowid_default:9 ELSE rowid:14 END [as=upsert_rowid:22]

# Conflict columns are in different order than index key columns.
build
INSERT INTO abc (a, b)
VALUES (1, 2)
ON CONFLICT (c, b) DO
UPDATE SET a=5
----
upsert abc
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── canary column: rowid:14
 ├── fetch columns: a:11 b:12 c:13 rowid:14
 ├── insert-mapping:
 │    ├── column1:7 => a:1
 │    ├── column2:8 => b:2
 │    ├── c_comp:10 => c:3
 │    └── rowid_default:9 => rowid:4
 ├── update-mapping:
 │    └── upsert_a:19 => a:1
 └── project
      ├── columns: upsert_a:19!null upsert_b:20 upsert_c:21 upsert_rowid:22 column1:7!null column2:8!null rowid_default:9 c_comp:10!null a:11 b:12 c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16 a_new:17!null c_comp:18
      ├── project
      │    ├── columns: c_comp:18 column1:7!null column2:8!null rowid_default:9 c_comp:10!null a:11 b:12 c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16 a_new:17!null
      │    ├── project
      │    │    ├── columns: a_new:17!null column1:7!null column2:8!null rowid_default:9 c_comp:10!null a:11 b:12 c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:7!null column2:8!null rowid_default:9 c_comp:10!null a:11 b:12 c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: column1:7!null column2:8!null rowid_default:9 c_comp:10!null
      │    │    │    │    ├── grouping columns: column2:8!null c_comp:10!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: c_comp:10!null column1:7!null column2:8!null rowid_default:9
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: rowid_default:9 column1:7!null column2:8!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:7!null column2:8!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── unique_rowid() [as=rowid_default:9]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── column2:8 + 1 [as=c_comp:10]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column1:7]
      │    │    │    │         │    └── column1:7
      │    │    │    │         └── first-agg [as=rowid_default:9]
      │    │    │    │              └── rowid_default:9
      │    │    │    ├── scan abc
      │    │    │    │    ├── columns: a:11!null b:12 c:13 rowid:14!null crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── c:13
      │    │    │    │              └── b:12 + 1
      │    │    │    └── filters
      │    │    │         ├── column2:8 = b:12
      │    │    │         └── c_comp:10 = c:13
      │    │    └── projections
      │    │         └── 5 [as=a_new:17]
      │    └── projections
      │         └── b:12 + 1 [as=c_comp:18]
      └── projections
           ├── CASE WHEN rowid:14 IS NULL THEN column1:7 ELSE a_new:17 END [as=upsert_a:19]
           ├── CASE WHEN rowid:14 IS NULL THEN column2:8 ELSE b:12 END [as=upsert_b:20]
           ├── CASE WHEN rowid:14 IS NULL THEN c_comp:10 ELSE c:13 END [as=upsert_c:21]
           └── CASE WHEN rowid:14 IS NULL THEN rowid_default:9 ELSE rowid:14 END [as=upsert_rowid:22]

# Conflict columns don't match unique index (too few columns).
build
INSERT INTO abc (a, b)
VALUES (1, 2)
ON CONFLICT (b) DO
UPDATE SET a=5
----
error (42P10): there is no unique or exclusion constraint matching the ON CONFLICT specification

# Conflict columns don't match unique index (too many columns).
build
INSERT INTO abc (a, b)
VALUES (1, 2)
ON CONFLICT (a, b) DO
UPDATE SET a=5
----
error (42P10): there is no unique or exclusion constraint matching the ON CONFLICT specification

# Conflict column not found.
build
INSERT INTO abc (a, b)
VALUES (1, 2)
ON CONFLICT (a, unknown) DO
UPDATE SET a=5
----
error (42703): column "unknown" does not exist

# ------------------------------------------------------------------------------
# Test DO NOTHING.
# ------------------------------------------------------------------------------

# No conflict columns specified (all non-duplicate indexes must be checked).
build
INSERT INTO xyz
VALUES (1, 2, 3), (4, 5, 6)
ON CONFLICT DO NOTHING
----
insert xyz
 ├── columns: <none>
 ├── arbiter indexes: primary secondary secondary
 ├── insert-mapping:
 │    ├── column1:6 => x:1
 │    ├── column2:7 => y:2
 │    └── column3:8 => z:3
 └── upsert-distinct-on
      ├── columns: column1:6!null column2:7!null column3:8!null
      ├── grouping columns: column2:7!null column3:8!null
      ├── upsert-distinct-on
      │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    ├── grouping columns: column2:7!null column3:8!null
      │    ├── upsert-distinct-on
      │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    ├── grouping columns: column1:6!null
      │    │    ├── anti-join (hash)
      │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    │    ├── anti-join (hash)
      │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    │    │    ├── anti-join (hash)
      │    │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    │    │    │    ├── values
      │    │    │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    │    │    │    │    ├── (1, 2, 3)
      │    │    │    │    │    │    └── (4, 5, 6)
      │    │    │    │    │    ├── scan xyz
      │    │    │    │    │    │    └── columns: x:9!null y:10 z:11
      │    │    │    │    │    └── filters
      │    │    │    │    │         └── column1:6 = x:9
      │    │    │    │    ├── scan xyz
      │    │    │    │    │    └── columns: x:14!null y:15 z:16
      │    │    │    │    └── filters
      │    │    │    │         ├── column2:7 = y:15
      │    │    │    │         └── column3:8 = z:16
      │    │    │    ├── scan xyz
      │    │    │    │    └── columns: x:19!null y:20 z:21
      │    │    │    └── filters
      │    │    │         ├── column2:7 = y:20
      │    │    │         └── column3:8 = z:21
      │    │    └── aggregations
      │    │         ├── first-agg [as=column2:7]
      │    │         │    └── column2:7
      │    │         └── first-agg [as=column3:8]
      │    │              └── column3:8
      │    └── aggregations
      │         └── first-agg [as=column1:6]
      │              └── column1:6
      └── aggregations
           └── first-agg [as=column1:6]
                └── column1:6

# Conflict columns are explicitly specified.
build
INSERT INTO xyz
VALUES (1, 2, 3), (4, 5, 6)
ON CONFLICT (y, z) DO NOTHING
----
insert xyz
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── insert-mapping:
 │    ├── column1:6 => x:1
 │    ├── column2:7 => y:2
 │    └── column3:8 => z:3
 └── upsert-distinct-on
      ├── columns: column1:6!null column2:7!null column3:8!null
      ├── grouping columns: column2:7!null column3:8!null
      ├── anti-join (hash)
      │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    ├── values
      │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    ├── (1, 2, 3)
      │    │    └── (4, 5, 6)
      │    ├── scan xyz
      │    │    └── columns: x:9!null y:10 z:11
      │    └── filters
      │         ├── column2:7 = y:10
      │         └── column3:8 = z:11
      └── aggregations
           └── first-agg [as=column1:6]
                └── column1:6

build
INSERT INTO uniq VALUES ('x2', 'y1', 'z2'), ('x2', 'y2', 'z2'), ('x2', 'y2', 'z2')
ON CONFLICT DO NOTHING
----
insert uniq
 ├── columns: <none>
 ├── arbiter indexes: primary uniq_y_key uniq_z_key
 ├── insert-mapping:
 │    ├── column1:6 => x:1
 │    ├── column2:7 => y:2
 │    └── column3:8 => z:3
 └── upsert-distinct-on
      ├── columns: column1:6!null column2:7!null column3:8!null
      ├── grouping columns: column3:8!null
      ├── upsert-distinct-on
      │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    ├── grouping columns: column2:7!null
      │    ├── upsert-distinct-on
      │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    ├── grouping columns: column1:6!null
      │    │    ├── anti-join (hash)
      │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    │    ├── anti-join (hash)
      │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    │    │    ├── anti-join (hash)
      │    │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    │    │    │    ├── values
      │    │    │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    │    │    │    │    ├── ('x2', 'y1', 'z2')
      │    │    │    │    │    │    ├── ('x2', 'y2', 'z2')
      │    │    │    │    │    │    └── ('x2', 'y2', 'z2')
      │    │    │    │    │    ├── scan uniq
      │    │    │    │    │    │    └── columns: x:9!null y:10 z:11
      │    │    │    │    │    └── filters
      │    │    │    │    │         └── column1:6 = x:9
      │    │    │    │    ├── scan uniq
      │    │    │    │    │    └── columns: x:14!null y:15 z:16
      │    │    │    │    └── filters
      │    │    │    │         └── column2:7 = y:15
      │    │    │    ├── scan uniq
      │    │    │    │    └── columns: x:19!null y:20 z:21
      │    │    │    └── filters
      │    │    │         └── column3:8 = z:21
      │    │    └── aggregations
      │    │         ├── first-agg [as=column2:7]
      │    │         │    └── column2:7
      │    │         └── first-agg [as=column3:8]
      │    │              └── column3:8
      │    └── aggregations
      │         ├── first-agg [as=column1:6]
      │         │    └── column1:6
      │         └── first-agg [as=column3:8]
      │              └── column3:8
      └── aggregations
           ├── first-agg [as=column1:6]
           │    └── column1:6
           └── first-agg [as=column2:7]
                └── column2:7

# ------------------------------------------------------------------------------
# Test excluded columns.
# ------------------------------------------------------------------------------

build
INSERT INTO xyz
VALUES (1, 2, 3), (-1, -1, -1)
ON CONFLICT (z, y) DO
UPDATE SET x=excluded.x+1, y=excluded.y*xyz.y, z=excluded.x-excluded.z
WHERE excluded.y>xyz.y
RETURNING xyz.x*2, y+z
----
project
 ├── columns: "?column?":20!null "?column?":21
 ├── upsert xyz
 │    ├── columns: x:1!null y:2 z:3!null
 │    ├── arbiter indexes: secondary
 │    ├── canary column: x:9
 │    ├── fetch columns: x:9 y:10 z:11
 │    ├── insert-mapping:
 │    │    ├── column1:6 => x:1
 │    │    ├── column2:7 => y:2
 │    │    └── column3:8 => z:3
 │    ├── update-mapping:
 │    │    ├── upsert_x:17 => x:1
 │    │    ├── upsert_y:18 => y:2
 │    │    └── upsert_z:19 => z:3
 │    ├── return-mapping:
 │    │    ├── upsert_x:17 => x:1
 │    │    ├── upsert_y:18 => y:2
 │    │    └── upsert_z:19 => z:3
 │    └── project
 │         ├── columns: upsert_x:17!null upsert_y:18 upsert_z:19!null column1:6!null column2:7!null column3:8!null x:9 y:10 z:11 crdb_internal_mvcc_timestamp:12 tableoid:13 x_new:14!null y_new:15 z_new:16!null
 │         ├── project
 │         │    ├── columns: x_new:14!null y_new:15 z_new:16!null column1:6!null column2:7!null column3:8!null x:9 y:10 z:11 crdb_internal_mvcc_timestamp:12 tableoid:13
 │         │    ├── select
 │         │    │    ├── columns: column1:6!null column2:7!null column3:8!null x:9 y:10 z:11 crdb_internal_mvcc_timestamp:12 tableoid:13
 │         │    │    ├── left-join (hash)
 │         │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null x:9 y:10 z:11 crdb_internal_mvcc_timestamp:12 tableoid:13
 │         │    │    │    ├── ensure-upsert-distinct-on
 │         │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
 │         │    │    │    │    ├── grouping columns: column2:7!null column3:8!null
 │         │    │    │    │    ├── values
 │         │    │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
 │         │    │    │    │    │    ├── (1, 2, 3)
 │         │    │    │    │    │    └── (-1, -1, -1)
 │         │    │    │    │    └── aggregations
 │         │    │    │    │         └── first-agg [as=column1:6]
 │         │    │    │    │              └── column1:6
 │         │    │    │    ├── scan xyz
 │         │    │    │    │    └── columns: x:9!null y:10 z:11 crdb_internal_mvcc_timestamp:12 tableoid:13
 │         │    │    │    └── filters
 │         │    │    │         ├── column2:7 = y:10
 │         │    │    │         └── column3:8 = z:11
 │         │    │    └── filters
 │         │    │         └── (x:9 IS NULL) OR (column2:7 > y:10)
 │         │    └── projections
 │         │         ├── column1:6 + 1 [as=x_new:14]
 │         │         ├── column2:7 * y:10 [as=y_new:15]
 │         │         └── column1:6 - column3:8 [as=z_new:16]
 │         └── projections
 │              ├── CASE WHEN x:9 IS NULL THEN column1:6 ELSE x_new:14 END [as=upsert_x:17]
 │              ├── CASE WHEN x:9 IS NULL THEN column2:7 ELSE y_new:15 END [as=upsert_y:18]
 │              └── CASE WHEN x:9 IS NULL THEN column3:8 ELSE z_new:16 END [as=upsert_z:19]
 └── projections
      ├── x:1 * 2 [as="?column?":20]
      └── y:2 + z:3 [as="?column?":21]

# Try to use excluded in RETURNING.
build
INSERT INTO xyz
VALUES (1, 2, 3)
ON CONFLICT (x) DO
UPDATE SET x=1
RETURNING excluded.x
----
error (42P01): no data source matches prefix: excluded in this context

# Referencing column without "excluded" or "xyz" prefix is not allowed.
build
INSERT INTO xyz
VALUES (1, 2, 3)
ON CONFLICT (x) DO
UPDATE SET x=x+1
----
error (42702): column reference "x" is ambiguous (candidates: excluded.x, xyz.x)

# ------------------------------------------------------------------------------
# Test UPDATE SET expressions.
# ------------------------------------------------------------------------------

# Subquery.
build
INSERT INTO abc
VALUES (1, 2)
ON CONFLICT (a) DO
UPDATE SET (b, a)=(SELECT x, y+excluded.b FROM xyz WHERE x=excluded.a)
----
upsert abc
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── canary column: a:11
 ├── fetch columns: a:11 b:12 c:13 rowid:14
 ├── insert-mapping:
 │    ├── column1:7 => a:1
 │    ├── column2:8 => b:2
 │    ├── c_comp:10 => c:3
 │    └── rowid_default:9 => rowid:4
 ├── update-mapping:
 │    ├── upsert_a:24 => a:1
 │    ├── upsert_b:25 => b:2
 │    └── upsert_c:26 => c:3
 └── project
      ├── columns: upsert_a:24 upsert_b:25 upsert_c:26 upsert_rowid:27 column1:7!null column2:8!null rowid_default:9 c_comp:10!null a:11 b:12 c:13 rowid:14 abc.crdb_internal_mvcc_timestamp:15 abc.tableoid:16 x:17 "?column?":22 c_comp:23
      ├── project
      │    ├── columns: c_comp:23 column1:7!null column2:8!null rowid_default:9 c_comp:10!null a:11 b:12 c:13 rowid:14 abc.crdb_internal_mvcc_timestamp:15 abc.tableoid:16 x:17 "?column?":22
      │    ├── left-join-apply
      │    │    ├── columns: column1:7!null column2:8!null rowid_default:9 c_comp:10!null a:11 b:12 c:13 rowid:14 abc.crdb_internal_mvcc_timestamp:15 abc.tableoid:16 x:17 "?column?":22
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:7!null column2:8!null rowid_default:9 c_comp:10!null a:11 b:12 c:13 rowid:14 abc.crdb_internal_mvcc_timestamp:15 abc.tableoid:16
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: column1:7!null column2:8!null rowid_default:9 c_comp:10!null
      │    │    │    │    ├── grouping columns: column1:7!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: c_comp:10!null column1:7!null column2:8!null rowid_default:9
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: rowid_default:9 column1:7!null column2:8!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:7!null column2:8!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── unique_rowid() [as=rowid_default:9]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── column2:8 + 1 [as=c_comp:10]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column2:8]
      │    │    │    │         │    └── column2:8
      │    │    │    │         ├── first-agg [as=rowid_default:9]
      │    │    │    │         │    └── rowid_default:9
      │    │    │    │         └── first-agg [as=c_comp:10]
      │    │    │    │              └── c_comp:10
      │    │    │    ├── scan abc
      │    │    │    │    ├── columns: a:11!null b:12 c:13 rowid:14!null abc.crdb_internal_mvcc_timestamp:15 abc.tableoid:16
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── c:13
      │    │    │    │              └── b:12 + 1
      │    │    │    └── filters
      │    │    │         └── column1:7 = a:11
      │    │    ├── max1-row
      │    │    │    ├── columns: x:17!null "?column?":22
      │    │    │    └── project
      │    │    │         ├── columns: "?column?":22 x:17!null
      │    │    │         ├── select
      │    │    │         │    ├── columns: x:17!null y:18 z:19 xyz.crdb_internal_mvcc_timestamp:20 xyz.tableoid:21
      │    │    │         │    ├── scan xyz
      │    │    │         │    │    └── columns: x:17!null y:18 z:19 xyz.crdb_internal_mvcc_timestamp:20 xyz.tableoid:21
      │    │    │         │    └── filters
      │    │    │         │         └── x:17 = column1:7
      │    │    │         └── projections
      │    │    │              └── y:18 + column2:8 [as="?column?":22]
      │    │    └── filters (true)
      │    └── projections
      │         └── x:17 + 1 [as=c_comp:23]
      └── projections
           ├── CASE WHEN a:11 IS NULL THEN column1:7 ELSE "?column?":22 END [as=upsert_a:24]
           ├── CASE WHEN a:11 IS NULL THEN column2:8 ELSE x:17 END [as=upsert_b:25]
           ├── CASE WHEN a:11 IS NULL THEN c_comp:10 ELSE c_comp:23 END [as=upsert_c:26]
           └── CASE WHEN a:11 IS NULL THEN rowid_default:9 ELSE rowid:14 END [as=upsert_rowid:27]

# Default expressions.
build
INSERT INTO abc
VALUES (1, 2)
ON CONFLICT (a) DO
UPDATE SET a=DEFAULT, b=DEFAULT
----
upsert abc
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── canary column: a:11
 ├── fetch columns: a:11 b:12 c:13 rowid:14
 ├── insert-mapping:
 │    ├── column1:7 => a:1
 │    ├── column2:8 => b:2
 │    ├── c_comp:10 => c:3
 │    └── rowid_default:9 => rowid:4
 ├── update-mapping:
 │    ├── upsert_a:20 => a:1
 │    ├── upsert_b:21 => b:2
 │    └── upsert_c:22 => c:3
 └── project
      ├── columns: upsert_a:20 upsert_b:21!null upsert_c:22!null upsert_rowid:23 column1:7!null column2:8!null rowid_default:9 c_comp:10!null a:11 b:12 c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16 a_new:17 b_new:18!null c_comp:19!null
      ├── project
      │    ├── columns: c_comp:19!null column1:7!null column2:8!null rowid_default:9 c_comp:10!null a:11 b:12 c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16 a_new:17 b_new:18!null
      │    ├── project
      │    │    ├── columns: a_new:17 b_new:18!null column1:7!null column2:8!null rowid_default:9 c_comp:10!null a:11 b:12 c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:7!null column2:8!null rowid_default:9 c_comp:10!null a:11 b:12 c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: column1:7!null column2:8!null rowid_default:9 c_comp:10!null
      │    │    │    │    ├── grouping columns: column1:7!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: c_comp:10!null column1:7!null column2:8!null rowid_default:9
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: rowid_default:9 column1:7!null column2:8!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:7!null column2:8!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── unique_rowid() [as=rowid_default:9]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── column2:8 + 1 [as=c_comp:10]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column2:8]
      │    │    │    │         │    └── column2:8
      │    │    │    │         ├── first-agg [as=rowid_default:9]
      │    │    │    │         │    └── rowid_default:9
      │    │    │    │         └── first-agg [as=c_comp:10]
      │    │    │    │              └── c_comp:10
      │    │    │    ├── scan abc
      │    │    │    │    ├── columns: a:11!null b:12 c:13 rowid:14!null crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── c:13
      │    │    │    │              └── b:12 + 1
      │    │    │    └── filters
      │    │    │         └── column1:7 = a:11
      │    │    └── projections
      │    │         ├── NULL::INT8 [as=a_new:17]
      │    │         └── 10 [as=b_new:18]
      │    └── projections
      │         └── b_new:18 + 1 [as=c_comp:19]
      └── projections
           ├── CASE WHEN a:11 IS NULL THEN column1:7 ELSE a_new:17 END [as=upsert_a:20]
           ├── CASE WHEN a:11 IS NULL THEN column2:8 ELSE b_new:18 END [as=upsert_b:21]
           ├── CASE WHEN a:11 IS NULL THEN c_comp:10 ELSE c_comp:19 END [as=upsert_c:22]
           └── CASE WHEN a:11 IS NULL THEN rowid_default:9 ELSE rowid:14 END [as=upsert_rowid:23]

# ------------------------------------------------------------------------------
# Test mutation columns.
# ------------------------------------------------------------------------------

build
INSERT INTO mutation (m, n)
VALUES (1, 2)
ON CONFLICT (m) DO
UPDATE SET m=mutation.m+1
----
upsert mutation
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: m:12
 ├── fetch columns: m:12 n:13 o:14 p:15 q:16
 ├── insert-mapping:
 │    ├── column1:8 => m:1
 │    ├── column2:9 => n:2
 │    ├── o_default:10 => o:3
 │    └── p_comp:11 => p:4
 ├── update-mapping:
 │    ├── upsert_m:21 => m:1
 │    ├── o_default:10 => o:3
 │    └── upsert_p:23 => p:4
 ├── check columns: check1:24
 └── project
      ├── columns: check1:24 column1:8!null column2:9!null o_default:10!null p_comp:11!null m:12 n:13 o:14 p:15 q:16 crdb_internal_mvcc_timestamp:17 tableoid:18 m_new:19 p_comp:20 upsert_m:21 upsert_n:22 upsert_p:23
      ├── project
      │    ├── columns: upsert_m:21 upsert_n:22 upsert_p:23 column1:8!null column2:9!null o_default:10!null p_comp:11!null m:12 n:13 o:14 p:15 q:16 crdb_internal_mvcc_timestamp:17 tableoid:18 m_new:19 p_comp:20
      │    ├── project
      │    │    ├── columns: p_comp:20 column1:8!null column2:9!null o_default:10!null p_comp:11!null m:12 n:13 o:14 p:15 q:16 crdb_internal_mvcc_timestamp:17 tableoid:18 m_new:19
      │    │    ├── project
      │    │    │    ├── columns: m_new:19 column1:8!null column2:9!null o_default:10!null p_comp:11!null m:12 n:13 o:14 p:15 q:16 crdb_internal_mvcc_timestamp:17 tableoid:18
      │    │    │    ├── left-join (hash)
      │    │    │    │    ├── columns: column1:8!null column2:9!null o_default:10!null p_comp:11!null m:12 n:13 o:14 p:15 q:16 crdb_internal_mvcc_timestamp:17 tableoid:18
      │    │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    │    ├── columns: column1:8!null column2:9!null o_default:10!null p_comp:11!null
      │    │    │    │    │    ├── grouping columns: column1:8!null
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: p_comp:11!null column1:8!null column2:9!null o_default:10!null
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: o_default:10!null column1:8!null column2:9!null
      │    │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    │    ├── columns: column1:8!null column2:9!null
      │    │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         └── 10 [as=o_default:10]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── o_default:10 + column2:9 [as=p_comp:11]
      │    │    │    │    │    └── aggregations
      │    │    │    │    │         ├── first-agg [as=column2:9]
      │    │    │    │    │         │    └── column2:9
      │    │    │    │    │         ├── first-agg [as=o_default:10]
      │    │    │    │    │         │    └── o_default:10
      │    │    │    │    │         └── first-agg [as=p_comp:11]
      │    │    │    │    │              └── p_comp:11
      │    │    │    │    ├── scan mutation
      │    │    │    │    │    ├── columns: m:12!null n:13 o:14 p:15 q:16 crdb_internal_mvcc_timestamp:17 tableoid:18
      │    │    │    │    │    └── check constraint expressions
      │    │    │    │    │         └── m:12 > 0
      │    │    │    │    └── filters
      │    │    │    │         └── column1:8 = m:12
      │    │    │    └── projections
      │    │    │         └── m:12 + 1 [as=m_new:19]
      │    │    └── projections
      │    │         └── o_default:10 + n:13 [as=p_comp:20]
      │    └── projections
      │         ├── CASE WHEN m:12 IS NULL THEN column1:8 ELSE m_new:19 END [as=upsert_m:21]
      │         ├── CASE WHEN m:12 IS NULL THEN column2:9 ELSE n:13 END [as=upsert_n:22]
      │         └── CASE WHEN m:12 IS NULL THEN p_comp:11 ELSE p_comp:20 END [as=upsert_p:23]
      └── projections
           └── upsert_m:21 > 0 [as=check1:24]

# ------------------------------------------------------------------------------
# Test UPSERT.
# ------------------------------------------------------------------------------

# Single column primary key.
build
UPSERT INTO xyz VALUES (1)
----
upsert xyz
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: x:8
 ├── fetch columns: x:8 y:9 z:10
 ├── insert-mapping:
 │    ├── column1:6 => x:1
 │    ├── y_default:7 => y:2
 │    └── y_default:7 => z:3
 ├── update-mapping:
 │    ├── y_default:7 => y:2
 │    └── y_default:7 => z:3
 └── project
      ├── columns: upsert_x:13 column1:6!null y_default:7 x:8 y:9 z:10 crdb_internal_mvcc_timestamp:11 tableoid:12
      ├── left-join (hash)
      │    ├── columns: column1:6!null y_default:7 x:8 y:9 z:10 crdb_internal_mvcc_timestamp:11 tableoid:12
      │    ├── ensure-upsert-distinct-on
      │    │    ├── columns: column1:6!null y_default:7
      │    │    ├── grouping columns: column1:6!null
      │    │    ├── project
      │    │    │    ├── columns: y_default:7 column1:6!null
      │    │    │    ├── values
      │    │    │    │    ├── columns: column1:6!null
      │    │    │    │    └── (1,)
      │    │    │    └── projections
      │    │    │         └── NULL::INT8 [as=y_default:7]
      │    │    └── aggregations
      │    │         └── first-agg [as=y_default:7]
      │    │              └── y_default:7
      │    ├── scan xyz
      │    │    └── columns: x:8!null y:9 z:10 crdb_internal_mvcc_timestamp:11 tableoid:12
      │    └── filters
      │         └── column1:6 = x:8
      └── projections
           └── CASE WHEN x:8 IS NULL THEN column1:6 ELSE x:8 END [as=upsert_x:13]

# Test multi-column primary key that contains all columns in table.
build
UPSERT INTO uv VALUES (1, 2) RETURNING *
----
upsert uv
 ├── columns: u:1!null v:2!null
 ├── upsert-mapping:
 │    ├── column1:5 => u:1
 │    └── column2:6 => v:2
 └── values
      ├── columns: column1:5!null column2:6!null
      └── (1, 2)

# Use returning UPSERT as a FROM expression.
build
SELECT * FROM [UPSERT INTO abc VALUES (1, 2) RETURNING *]
----
with &1
 ├── columns: a:18!null b:19!null c:20!null
 ├── project
 │    ├── columns: abc.a:1!null abc.b:2!null abc.c:3!null
 │    └── upsert abc
 │         ├── columns: abc.a:1!null abc.b:2!null abc.c:3!null rowid:4!null
 │         ├── arbiter indexes: primary
 │         ├── canary column: rowid:14
 │         ├── fetch columns: abc.a:11 abc.b:12 abc.c:13 rowid:14
 │         ├── insert-mapping:
 │         │    ├── column1:7 => abc.a:1
 │         │    ├── column2:8 => abc.b:2
 │         │    ├── c_comp:10 => abc.c:3
 │         │    └── rowid_default:9 => rowid:4
 │         ├── update-mapping:
 │         │    ├── column1:7 => abc.a:1
 │         │    ├── column2:8 => abc.b:2
 │         │    └── c_comp:10 => abc.c:3
 │         ├── return-mapping:
 │         │    ├── column1:7 => abc.a:1
 │         │    ├── column2:8 => abc.b:2
 │         │    ├── c_comp:10 => abc.c:3
 │         │    └── upsert_rowid:17 => rowid:4
 │         └── project
 │              ├── columns: upsert_rowid:17 column1:7!null column2:8!null rowid_default:9 c_comp:10!null abc.a:11 abc.b:12 abc.c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16
 │              ├── left-join (hash)
 │              │    ├── columns: column1:7!null column2:8!null rowid_default:9 c_comp:10!null abc.a:11 abc.b:12 abc.c:13 rowid:14 crdb_internal_mvcc_timestamp:15 tableoid:16
 │              │    ├── ensure-upsert-distinct-on
 │              │    │    ├── columns: column1:7!null column2:8!null rowid_default:9 c_comp:10!null
 │              │    │    ├── grouping columns: rowid_default:9
 │              │    │    ├── project
 │              │    │    │    ├── columns: c_comp:10!null column1:7!null column2:8!null rowid_default:9
 │              │    │    │    ├── project
 │              │    │    │    │    ├── columns: rowid_default:9 column1:7!null column2:8!null
 │              │    │    │    │    ├── values
 │              │    │    │    │    │    ├── columns: column1:7!null column2:8!null
 │              │    │    │    │    │    └── (1, 2)
 │              │    │    │    │    └── projections
 │              │    │    │    │         └── unique_rowid() [as=rowid_default:9]
 │              │    │    │    └── projections
 │              │    │    │         └── column2:8 + 1 [as=c_comp:10]
 │              │    │    └── aggregations
 │              │    │         ├── first-agg [as=column1:7]
 │              │    │         │    └── column1:7
 │              │    │         ├── first-agg [as=column2:8]
 │              │    │         │    └── column2:8
 │              │    │         └── first-agg [as=c_comp:10]
 │              │    │              └── c_comp:10
 │              │    ├── scan abc
 │              │    │    ├── columns: abc.a:11!null abc.b:12 abc.c:13 rowid:14!null crdb_internal_mvcc_timestamp:15 tableoid:16
 │              │    │    └── computed column expressions
 │              │    │         └── abc.c:13
 │              │    │              └── abc.b:12 + 1
 │              │    └── filters
 │              │         └── rowid_default:9 = rowid:14
 │              └── projections
 │                   └── CASE WHEN rowid:14 IS NULL THEN rowid_default:9 ELSE rowid:14 END [as=upsert_rowid:17]
 └── with-scan &1
      ├── columns: a:18!null b:19!null c:20!null
      └── mapping:
           ├──  abc.a:1 => a:18
           ├──  abc.b:2 => b:19
           └──  abc.c:3 => c:20

# Use explicitly specified column names with secondary indexes present. Existing
# values of other columns need to be fetched to delete existing index rows.
build
UPSERT INTO xyz (z, x, y) VALUES (1, 2, 3)
----
upsert xyz
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: x:9
 ├── fetch columns: x:9 y:10 z:11
 ├── insert-mapping:
 │    ├── column2:7 => x:1
 │    ├── column3:8 => y:2
 │    └── column1:6 => z:3
 ├── update-mapping:
 │    ├── column3:8 => y:2
 │    └── column1:6 => z:3
 └── project
      ├── columns: upsert_x:14 column1:6!null column2:7!null column3:8!null x:9 y:10 z:11 crdb_internal_mvcc_timestamp:12 tableoid:13
      ├── left-join (hash)
      │    ├── columns: column1:6!null column2:7!null column3:8!null x:9 y:10 z:11 crdb_internal_mvcc_timestamp:12 tableoid:13
      │    ├── ensure-upsert-distinct-on
      │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    ├── grouping columns: column2:7!null
      │    │    ├── values
      │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    │    └── (1, 2, 3)
      │    │    └── aggregations
      │    │         ├── first-agg [as=column1:6]
      │    │         │    └── column1:6
      │    │         └── first-agg [as=column3:8]
      │    │              └── column3:8
      │    ├── scan xyz
      │    │    └── columns: x:9!null y:10 z:11 crdb_internal_mvcc_timestamp:12 tableoid:13
      │    └── filters
      │         └── column2:7 = x:9
      └── projections
           └── CASE WHEN x:9 IS NULL THEN column2:7 ELSE x:9 END [as=upsert_x:14]

# Use explicitly specified column names with no secondary indexes present.
# Upsert implemented with blind Puts is possible.
build
UPSERT INTO noindex (x, y, z) VALUES (1, 2, 3)
----
upsert noindex
 ├── columns: <none>
 ├── upsert-mapping:
 │    ├── column1:6 => x:1
 │    ├── column2:7 => y:2
 │    └── column3:8 => z:3
 └── values
      ├── columns: column1:6!null column2:7!null column3:8!null
      └── (1, 2, 3)

# Use subset of explicitly specified column names with no secondary indexes
# present. Existing values of other columns need to be fetched to provide
# update values for unspecified columns.
build
UPSERT INTO checks (a, b, c) VALUES (1, 2, 3)
----
upsert checks
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: a:11
 ├── fetch columns: a:11 b:12 c:13 d:14
 ├── insert-mapping:
 │    ├── column1:7 => a:1
 │    ├── column2:8 => b:2
 │    ├── column3:9 => c:3
 │    └── d_comp:10 => d:4
 ├── update-mapping:
 │    ├── column2:8 => b:2
 │    ├── column3:9 => c:3
 │    └── d_comp:10 => d:4
 ├── check columns: check1:18 check2:19
 └── project
      ├── columns: check1:18!null check2:19 column1:7!null column2:8!null column3:9!null d_comp:10!null a:11 b:12 c:13 d:14 crdb_internal_mvcc_timestamp:15 tableoid:16 upsert_a:17
      ├── project
      │    ├── columns: upsert_a:17 column1:7!null column2:8!null column3:9!null d_comp:10!null a:11 b:12 c:13 d:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │    ├── left-join (hash)
      │    │    ├── columns: column1:7!null column2:8!null column3:9!null d_comp:10!null a:11 b:12 c:13 d:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    ├── ensure-upsert-distinct-on
      │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null d_comp:10!null
      │    │    │    ├── grouping columns: column1:7!null
      │    │    │    ├── project
      │    │    │    │    ├── columns: d_comp:10!null column1:7!null column2:8!null column3:9!null
      │    │    │    │    ├── values
      │    │    │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null
      │    │    │    │    │    └── (1, 2, 3)
      │    │    │    │    └── projections
      │    │    │    │         └── column3:9 + 1 [as=d_comp:10]
      │    │    │    └── aggregations
      │    │    │         ├── first-agg [as=column2:8]
      │    │    │         │    └── column2:8
      │    │    │         ├── first-agg [as=column3:9]
      │    │    │         │    └── column3:9
      │    │    │         └── first-agg [as=d_comp:10]
      │    │    │              └── d_comp:10
      │    │    ├── scan checks
      │    │    │    ├── columns: a:11!null b:12 c:13 d:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    │    ├── check constraint expressions
      │    │    │    │    └── a:11 > 0
      │    │    │    └── computed column expressions
      │    │    │         └── d:14
      │    │    │              └── c:13 + 1
      │    │    └── filters
      │    │         └── column1:7 = a:11
      │    └── projections
      │         └── CASE WHEN a:11 IS NULL THEN column1:7 ELSE a:11 END [as=upsert_a:17]
      └── projections
           ├── column2:8 < d_comp:10 [as=check1:18]
           └── upsert_a:17 > 0 [as=check2:19]

# Ensure that mutation columns are set by the insert and update. Use explicit
# target columns.
build
UPSERT INTO mutation (m, n) VALUES (1, 2)
----
upsert mutation
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: m:12
 ├── fetch columns: m:12 n:13 o:14 p:15 q:16
 ├── insert-mapping:
 │    ├── column1:8 => m:1
 │    ├── column2:9 => n:2
 │    ├── o_default:10 => o:3
 │    └── p_comp:11 => p:4
 ├── update-mapping:
 │    ├── column2:9 => n:2
 │    ├── o_default:10 => o:3
 │    └── p_comp:11 => p:4
 ├── check columns: check1:20
 └── project
      ├── columns: check1:20 column1:8!null column2:9!null o_default:10!null p_comp:11!null m:12 n:13 o:14 p:15 q:16 crdb_internal_mvcc_timestamp:17 tableoid:18 upsert_m:19
      ├── project
      │    ├── columns: upsert_m:19 column1:8!null column2:9!null o_default:10!null p_comp:11!null m:12 n:13 o:14 p:15 q:16 crdb_internal_mvcc_timestamp:17 tableoid:18
      │    ├── left-join (hash)
      │    │    ├── columns: column1:8!null column2:9!null o_default:10!null p_comp:11!null m:12 n:13 o:14 p:15 q:16 crdb_internal_mvcc_timestamp:17 tableoid:18
      │    │    ├── ensure-upsert-distinct-on
      │    │    │    ├── columns: column1:8!null column2:9!null o_default:10!null p_comp:11!null
      │    │    │    ├── grouping columns: column1:8!null
      │    │    │    ├── project
      │    │    │    │    ├── columns: p_comp:11!null column1:8!null column2:9!null o_default:10!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: o_default:10!null column1:8!null column2:9!null
      │    │    │    │    │    ├── values
      │    │    │    │    │    │    ├── columns: column1:8!null column2:9!null
      │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── 10 [as=o_default:10]
      │    │    │    │    └── projections
      │    │    │    │         └── o_default:10 + column2:9 [as=p_comp:11]
      │    │    │    └── aggregations
      │    │    │         ├── first-agg [as=column2:9]
      │    │    │         │    └── column2:9
      │    │    │         ├── first-agg [as=o_default:10]
      │    │    │         │    └── o_default:10
      │    │    │         └── first-agg [as=p_comp:11]
      │    │    │              └── p_comp:11
      │    │    ├── scan mutation
      │    │    │    ├── columns: m:12!null n:13 o:14 p:15 q:16 crdb_internal_mvcc_timestamp:17 tableoid:18
      │    │    │    └── check constraint expressions
      │    │    │         └── m:12 > 0
      │    │    └── filters
      │    │         └── column1:8 = m:12
      │    └── projections
      │         └── CASE WHEN m:12 IS NULL THEN column1:8 ELSE m:12 END [as=upsert_m:19]
      └── projections
           └── upsert_m:19 > 0 [as=check1:20]

# Don't directly update mutation columns. However, computed columns do need to
# be updated. Use implicit target columns.
build
UPSERT INTO mutation VALUES (1, 2)
----
upsert mutation
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: m:12
 ├── fetch columns: m:12 n:13 o:14 p:15 q:16
 ├── insert-mapping:
 │    ├── column1:8 => m:1
 │    ├── column2:9 => n:2
 │    ├── o_default:10 => o:3
 │    └── p_comp:11 => p:4
 ├── update-mapping:
 │    ├── column2:9 => n:2
 │    ├── o_default:10 => o:3
 │    └── p_comp:11 => p:4
 ├── check columns: check1:20
 └── project
      ├── columns: check1:20 column1:8!null column2:9!null o_default:10!null p_comp:11!null m:12 n:13 o:14 p:15 q:16 crdb_internal_mvcc_timestamp:17 tableoid:18 upsert_m:19
      ├── project
      │    ├── columns: upsert_m:19 column1:8!null column2:9!null o_default:10!null p_comp:11!null m:12 n:13 o:14 p:15 q:16 crdb_internal_mvcc_timestamp:17 tableoid:18
      │    ├── left-join (hash)
      │    │    ├── columns: column1:8!null column2:9!null o_default:10!null p_comp:11!null m:12 n:13 o:14 p:15 q:16 crdb_internal_mvcc_timestamp:17 tableoid:18
      │    │    ├── ensure-upsert-distinct-on
      │    │    │    ├── columns: column1:8!null column2:9!null o_default:10!null p_comp:11!null
      │    │    │    ├── grouping columns: column1:8!null
      │    │    │    ├── project
      │    │    │    │    ├── columns: p_comp:11!null column1:8!null column2:9!null o_default:10!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: o_default:10!null column1:8!null column2:9!null
      │    │    │    │    │    ├── values
      │    │    │    │    │    │    ├── columns: column1:8!null column2:9!null
      │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── 10 [as=o_default:10]
      │    │    │    │    └── projections
      │    │    │    │         └── o_default:10 + column2:9 [as=p_comp:11]
      │    │    │    └── aggregations
      │    │    │         ├── first-agg [as=column2:9]
      │    │    │         │    └── column2:9
      │    │    │         ├── first-agg [as=o_default:10]
      │    │    │         │    └── o_default:10
      │    │    │         └── first-agg [as=p_comp:11]
      │    │    │              └── p_comp:11
      │    │    ├── scan mutation
      │    │    │    ├── columns: m:12!null n:13 o:14 p:15 q:16 crdb_internal_mvcc_timestamp:17 tableoid:18
      │    │    │    └── check constraint expressions
      │    │    │         └── m:12 > 0
      │    │    └── filters
      │    │         └── column1:8 = m:12
      │    └── projections
      │         └── CASE WHEN m:12 IS NULL THEN column1:8 ELSE m:12 END [as=upsert_m:19]
      └── projections
           └── upsert_m:19 > 0 [as=check1:20]

# Use unknown name in upsert column list.
build
UPSERT INTO xyz (x, unknown) VALUES (1)
----
error (42703): column "unknown" does not exist

# ------------------------------------------------------------------------------
# Test check constraints.
# ------------------------------------------------------------------------------

# INSERT..ON CONFLICT
build
INSERT INTO checks (a, b) VALUES (1, 2) ON CONFLICT (a) DO UPDATE SET b=3, c=4
----
upsert checks
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: a:11
 ├── fetch columns: a:11 b:12 c:13 d:14
 ├── insert-mapping:
 │    ├── column1:7 => a:1
 │    ├── column2:8 => b:2
 │    ├── c_default:9 => c:3
 │    └── d_comp:10 => d:4
 ├── update-mapping:
 │    ├── upsert_b:21 => b:2
 │    ├── upsert_c:22 => c:3
 │    └── upsert_d:23 => d:4
 ├── check columns: check1:24 check2:25
 └── project
      ├── columns: check1:24 check2:25 column1:7!null column2:8!null c_default:9 d_comp:10 a:11 b:12 c:13 d:14 crdb_internal_mvcc_timestamp:15 tableoid:16 b_new:17!null c_new:18!null d_comp:19!null upsert_a:20 upsert_b:21!null upsert_c:22 upsert_d:23
      ├── project
      │    ├── columns: upsert_a:20 upsert_b:21!null upsert_c:22 upsert_d:23 column1:7!null column2:8!null c_default:9 d_comp:10 a:11 b:12 c:13 d:14 crdb_internal_mvcc_timestamp:15 tableoid:16 b_new:17!null c_new:18!null d_comp:19!null
      │    ├── project
      │    │    ├── columns: d_comp:19!null column1:7!null column2:8!null c_default:9 d_comp:10 a:11 b:12 c:13 d:14 crdb_internal_mvcc_timestamp:15 tableoid:16 b_new:17!null c_new:18!null
      │    │    ├── project
      │    │    │    ├── columns: b_new:17!null c_new:18!null column1:7!null column2:8!null c_default:9 d_comp:10 a:11 b:12 c:13 d:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    │    ├── left-join (hash)
      │    │    │    │    ├── columns: column1:7!null column2:8!null c_default:9 d_comp:10 a:11 b:12 c:13 d:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    │    ├── columns: column1:7!null column2:8!null c_default:9 d_comp:10
      │    │    │    │    │    ├── grouping columns: column1:7!null
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: d_comp:10 column1:7!null column2:8!null c_default:9
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: c_default:9 column1:7!null column2:8!null
      │    │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    │    ├── columns: column1:7!null column2:8!null
      │    │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         └── NULL::INT8 [as=c_default:9]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── c_default:9 + 1 [as=d_comp:10]
      │    │    │    │    │    └── aggregations
      │    │    │    │    │         ├── first-agg [as=column2:8]
      │    │    │    │    │         │    └── column2:8
      │    │    │    │    │         ├── first-agg [as=c_default:9]
      │    │    │    │    │         │    └── c_default:9
      │    │    │    │    │         └── first-agg [as=d_comp:10]
      │    │    │    │    │              └── d_comp:10
      │    │    │    │    ├── scan checks
      │    │    │    │    │    ├── columns: a:11!null b:12 c:13 d:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    │    │    │    ├── check constraint expressions
      │    │    │    │    │    │    └── a:11 > 0
      │    │    │    │    │    └── computed column expressions
      │    │    │    │    │         └── d:14
      │    │    │    │    │              └── c:13 + 1
      │    │    │    │    └── filters
      │    │    │    │         └── column1:7 = a:11
      │    │    │    └── projections
      │    │    │         ├── 3 [as=b_new:17]
      │    │    │         └── 4 [as=c_new:18]
      │    │    └── projections
      │    │         └── c_new:18 + 1 [as=d_comp:19]
      │    └── projections
      │         ├── CASE WHEN a:11 IS NULL THEN column1:7 ELSE a:11 END [as=upsert_a:20]
      │         ├── CASE WHEN a:11 IS NULL THEN column2:8 ELSE b_new:17 END [as=upsert_b:21]
      │         ├── CASE WHEN a:11 IS NULL THEN c_default:9 ELSE c_new:18 END [as=upsert_c:22]
      │         └── CASE WHEN a:11 IS NULL THEN d_comp:10 ELSE d_comp:19 END [as=upsert_d:23]
      └── projections
           ├── upsert_b:21 < upsert_d:23 [as=check1:24]
           └── upsert_a:20 > 0 [as=check2:25]

# INSERT..ON CONFLICT DO NOTHING
build
INSERT INTO checks (a, b) VALUES (1, 2) ON CONFLICT (a) DO NOTHING
----
insert checks
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── insert-mapping:
 │    ├── column1:7 => a:1
 │    ├── column2:8 => b:2
 │    ├── c_default:9 => c:3
 │    └── d_comp:10 => d:4
 ├── check columns: check1:17 check2:18
 └── project
      ├── columns: check1:17 check2:18!null column1:7!null column2:8!null c_default:9 d_comp:10
      ├── upsert-distinct-on
      │    ├── columns: column1:7!null column2:8!null c_default:9 d_comp:10
      │    ├── grouping columns: column1:7!null
      │    ├── anti-join (hash)
      │    │    ├── columns: column1:7!null column2:8!null c_default:9 d_comp:10
      │    │    ├── project
      │    │    │    ├── columns: d_comp:10 column1:7!null column2:8!null c_default:9
      │    │    │    ├── project
      │    │    │    │    ├── columns: c_default:9 column1:7!null column2:8!null
      │    │    │    │    ├── values
      │    │    │    │    │    ├── columns: column1:7!null column2:8!null
      │    │    │    │    │    └── (1, 2)
      │    │    │    │    └── projections
      │    │    │    │         └── NULL::INT8 [as=c_default:9]
      │    │    │    └── projections
      │    │    │         └── c_default:9 + 1 [as=d_comp:10]
      │    │    ├── scan checks
      │    │    │    ├── columns: a:11!null b:12 c:13 d:14
      │    │    │    ├── check constraint expressions
      │    │    │    │    └── a:11 > 0
      │    │    │    └── computed column expressions
      │    │    │         └── d:14
      │    │    │              └── c:13 + 1
      │    │    └── filters
      │    │         └── column1:7 = a:11
      │    └── aggregations
      │         ├── first-agg [as=column2:8]
      │         │    └── column2:8
      │         ├── first-agg [as=c_default:9]
      │         │    └── c_default:9
      │         └── first-agg [as=d_comp:10]
      │              └── d_comp:10
      └── projections
           ├── column2:8 < d_comp:10 [as=check1:17]
           └── column1:7 > 0 [as=check2:18]

# UPSERT
build
UPSERT INTO checks (a, b) VALUES (1, 2)
----
upsert checks
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: a:11
 ├── fetch columns: a:11 b:12 c:13 d:14
 ├── insert-mapping:
 │    ├── column1:7 => a:1
 │    ├── column2:8 => b:2
 │    ├── c_default:9 => c:3
 │    └── d_comp:10 => d:4
 ├── update-mapping:
 │    └── column2:8 => b:2
 ├── check columns: check1:21 check2:22
 └── project
      ├── columns: check1:21 check2:22 column1:7!null column2:8!null c_default:9 d_comp:10 a:11 b:12 c:13 d:14 crdb_internal_mvcc_timestamp:15 tableoid:16 d_comp:17 upsert_a:18 upsert_c:19 upsert_d:20
      ├── project
      │    ├── columns: upsert_a:18 upsert_c:19 upsert_d:20 column1:7!null column2:8!null c_default:9 d_comp:10 a:11 b:12 c:13 d:14 crdb_internal_mvcc_timestamp:15 tableoid:16 d_comp:17
      │    ├── project
      │    │    ├── columns: d_comp:17 column1:7!null column2:8!null c_default:9 d_comp:10 a:11 b:12 c:13 d:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:7!null column2:8!null c_default:9 d_comp:10 a:11 b:12 c:13 d:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: column1:7!null column2:8!null c_default:9 d_comp:10
      │    │    │    │    ├── grouping columns: column1:7!null
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: d_comp:10 column1:7!null column2:8!null c_default:9
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: c_default:9 column1:7!null column2:8!null
      │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    ├── columns: column1:7!null column2:8!null
      │    │    │    │    │    │    │    └── (1, 2)
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── NULL::INT8 [as=c_default:9]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── c_default:9 + 1 [as=d_comp:10]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column2:8]
      │    │    │    │         │    └── column2:8
      │    │    │    │         ├── first-agg [as=c_default:9]
      │    │    │    │         │    └── c_default:9
      │    │    │    │         └── first-agg [as=d_comp:10]
      │    │    │    │              └── d_comp:10
      │    │    │    ├── scan checks
      │    │    │    │    ├── columns: a:11!null b:12 c:13 d:14 crdb_internal_mvcc_timestamp:15 tableoid:16
      │    │    │    │    ├── check constraint expressions
      │    │    │    │    │    └── a:11 > 0
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── d:14
      │    │    │    │              └── c:13 + 1
      │    │    │    └── filters
      │    │    │         └── column1:7 = a:11
      │    │    └── projections
      │    │         └── c:13 + 1 [as=d_comp:17]
      │    └── projections
      │         ├── CASE WHEN a:11 IS NULL THEN column1:7 ELSE a:11 END [as=upsert_a:18]
      │         ├── CASE WHEN a:11 IS NULL THEN c_default:9 ELSE c:13 END [as=upsert_c:19]
      │         └── CASE WHEN a:11 IS NULL THEN d_comp:10 ELSE d:14 END [as=upsert_d:20]
      └── projections
           ├── column2:8 < upsert_d:20 [as=check1:21]
           └── upsert_a:18 > 0 [as=check2:22]

# Use subqueries and excluded.
build
INSERT INTO checks
SELECT a, b FROM abc
ON CONFLICT (a) DO UPDATE SET a=excluded.a, b=(SELECT x FROM xyz WHERE x=checks.a)
----
upsert checks
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: checks.a:15
 ├── fetch columns: checks.a:15 checks.b:16 checks.c:17 d:18
 ├── insert-mapping:
 │    ├── abc.a:7 => checks.a:1
 │    ├── abc.b:8 => checks.b:2
 │    ├── c_default:13 => checks.c:3
 │    └── d_comp:14 => d:4
 ├── update-mapping:
 │    ├── abc.a:7 => checks.a:1
 │    └── upsert_b:28 => checks.b:2
 ├── check columns: check1:31 check2:32
 └── project
      ├── columns: check1:31 check2:32!null abc.a:7!null abc.b:8 c_default:13 d_comp:14 checks.a:15 checks.b:16 checks.c:17 d:18 checks.crdb_internal_mvcc_timestamp:19 checks.tableoid:20 b_new:26 d_comp:27 upsert_b:28 upsert_c:29 upsert_d:30
      ├── project
      │    ├── columns: upsert_b:28 upsert_c:29 upsert_d:30 abc.a:7!null abc.b:8 c_default:13 d_comp:14 checks.a:15 checks.b:16 checks.c:17 d:18 checks.crdb_internal_mvcc_timestamp:19 checks.tableoid:20 b_new:26 d_comp:27
      │    ├── project
      │    │    ├── columns: d_comp:27 abc.a:7!null abc.b:8 c_default:13 d_comp:14 checks.a:15 checks.b:16 checks.c:17 d:18 checks.crdb_internal_mvcc_timestamp:19 checks.tableoid:20 b_new:26
      │    │    ├── project
      │    │    │    ├── columns: b_new:26 abc.a:7!null abc.b:8 c_default:13 d_comp:14 checks.a:15 checks.b:16 checks.c:17 d:18 checks.crdb_internal_mvcc_timestamp:19 checks.tableoid:20
      │    │    │    ├── left-join (hash)
      │    │    │    │    ├── columns: abc.a:7!null abc.b:8 c_default:13 d_comp:14 checks.a:15 checks.b:16 checks.c:17 d:18 checks.crdb_internal_mvcc_timestamp:19 checks.tableoid:20
      │    │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    │    ├── columns: abc.a:7!null abc.b:8 c_default:13 d_comp:14
      │    │    │    │    │    ├── grouping columns: abc.a:7!null
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: d_comp:14 abc.a:7!null abc.b:8 c_default:13
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: c_default:13 abc.a:7!null abc.b:8
      │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    ├── columns: abc.a:7!null abc.b:8
      │    │    │    │    │    │    │    │    └── scan abc
      │    │    │    │    │    │    │    │         ├── columns: abc.a:7!null abc.b:8 abc.c:9 rowid:10!null abc.crdb_internal_mvcc_timestamp:11 abc.tableoid:12
      │    │    │    │    │    │    │    │         └── computed column expressions
      │    │    │    │    │    │    │    │              └── abc.c:9
      │    │    │    │    │    │    │    │                   └── abc.b:8 + 1
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         └── NULL::INT8 [as=c_default:13]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── c_default:13 + 1 [as=d_comp:14]
      │    │    │    │    │    └── aggregations
      │    │    │    │    │         ├── first-agg [as=abc.b:8]
      │    │    │    │    │         │    └── abc.b:8
      │    │    │    │    │         ├── first-agg [as=c_default:13]
      │    │    │    │    │         │    └── c_default:13
      │    │    │    │    │         └── first-agg [as=d_comp:14]
      │    │    │    │    │              └── d_comp:14
      │    │    │    │    ├── scan checks
      │    │    │    │    │    ├── columns: checks.a:15!null checks.b:16 checks.c:17 d:18 checks.crdb_internal_mvcc_timestamp:19 checks.tableoid:20
      │    │    │    │    │    ├── check constraint expressions
      │    │    │    │    │    │    └── checks.a:15 > 0
      │    │    │    │    │    └── computed column expressions
      │    │    │    │    │         └── d:18
      │    │    │    │    │              └── checks.c:17 + 1
      │    │    │    │    └── filters
      │    │    │    │         └── abc.a:7 = checks.a:15
      │    │    │    └── projections
      │    │    │         └── subquery [as=b_new:26]
      │    │    │              └── max1-row
      │    │    │                   ├── columns: x:21!null
      │    │    │                   └── project
      │    │    │                        ├── columns: x:21!null
      │    │    │                        └── select
      │    │    │                             ├── columns: x:21!null y:22 z:23 xyz.crdb_internal_mvcc_timestamp:24 xyz.tableoid:25
      │    │    │                             ├── scan xyz
      │    │    │                             │    └── columns: x:21!null y:22 z:23 xyz.crdb_internal_mvcc_timestamp:24 xyz.tableoid:25
      │    │    │                             └── filters
      │    │    │                                  └── x:21 = checks.a:15
      │    │    └── projections
      │    │         └── checks.c:17 + 1 [as=d_comp:27]
      │    └── projections
      │         ├── CASE WHEN checks.a:15 IS NULL THEN abc.b:8 ELSE b_new:26 END [as=upsert_b:28]
      │         ├── CASE WHEN checks.a:15 IS NULL THEN c_default:13 ELSE checks.c:17 END [as=upsert_c:29]
      │         └── CASE WHEN checks.a:15 IS NULL THEN d_comp:14 ELSE d:18 END [as=upsert_d:30]
      └── projections
           ├── upsert_b:28 < upsert_d:30 [as=check1:31]
           └── abc.a:7 > 0 [as=check2:32]

# Use ORDER BY in upsert input (should be ignored and not cause error).
build
INSERT INTO xyz
SELECT a, b, c FROM abc ORDER BY a
ON CONFLICT (z, y) DO UPDATE SET y=5
----
upsert xyz
 ├── columns: <none>
 ├── arbiter indexes: secondary
 ├── canary column: x:12
 ├── fetch columns: x:12 y:13 z:14
 ├── insert-mapping:
 │    ├── a:6 => x:1
 │    ├── b:7 => y:2
 │    └── c:8 => z:3
 ├── update-mapping:
 │    └── upsert_y:19 => y:2
 └── project
      ├── columns: upsert_x:18 upsert_y:19 upsert_z:20 a:6!null b:7 c:8 x:12 y:13 z:14 xyz.crdb_internal_mvcc_timestamp:15 xyz.tableoid:16 y_new:17!null
      ├── project
      │    ├── columns: y_new:17!null a:6!null b:7 c:8 x:12 y:13 z:14 xyz.crdb_internal_mvcc_timestamp:15 xyz.tableoid:16
      │    ├── left-join (hash)
      │    │    ├── columns: a:6!null b:7 c:8 x:12 y:13 z:14 xyz.crdb_internal_mvcc_timestamp:15 xyz.tableoid:16
      │    │    ├── ensure-upsert-distinct-on
      │    │    │    ├── columns: a:6!null b:7 c:8
      │    │    │    ├── grouping columns: b:7 c:8
      │    │    │    ├── project
      │    │    │    │    ├── columns: a:6!null b:7 c:8
      │    │    │    │    └── scan abc
      │    │    │    │         ├── columns: a:6!null b:7 c:8 rowid:9!null abc.crdb_internal_mvcc_timestamp:10 abc.tableoid:11
      │    │    │    │         └── computed column expressions
      │    │    │    │              └── c:8
      │    │    │    │                   └── b:7 + 1
      │    │    │    └── aggregations
      │    │    │         └── first-agg [as=a:6]
      │    │    │              └── a:6
      │    │    ├── scan xyz
      │    │    │    └── columns: x:12!null y:13 z:14 xyz.crdb_internal_mvcc_timestamp:15 xyz.tableoid:16
      │    │    └── filters
      │    │         ├── b:7 = y:13
      │    │         └── c:8 = z:14
      │    └── projections
      │         └── 5 [as=y_new:17]
      └── projections
           ├── CASE WHEN x:12 IS NULL THEN a:6 ELSE x:12 END [as=upsert_x:18]
           ├── CASE WHEN x:12 IS NULL THEN b:7 ELSE y_new:17 END [as=upsert_y:19]
           └── CASE WHEN x:12 IS NULL THEN c:8 ELSE z:14 END [as=upsert_z:20]

# ------------------------------------------------------------------------------
# Test decimal column truncation.
# ------------------------------------------------------------------------------

# Fast UPSERT case.
build
UPSERT INTO decimals (a, b) VALUES (1.1, ARRAY[0.95])
----
upsert decimals
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: decimals.a:15
 ├── fetch columns: decimals.a:15 decimals.b:16 c:17 d:18
 ├── insert-mapping:
 │    ├── a:10 => decimals.a:1
 │    ├── b:11 => decimals.b:2
 │    ├── c_default:12 => c:3
 │    └── d_comp:14 => d:4
 ├── update-mapping:
 │    └── b:11 => decimals.b:2
 ├── check columns: check1:25 check2:26
 └── project
      ├── columns: check1:25 check2:26 a:10 b:11 c_default:12 d_comp:14 decimals.a:15 decimals.b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20 d_comp:21 upsert_a:22 upsert_c:23 upsert_d:24
      ├── project
      │    ├── columns: upsert_a:22 upsert_c:23 upsert_d:24 a:10 b:11 c_default:12 d_comp:14 decimals.a:15 decimals.b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20 d_comp:21
      │    ├── project
      │    │    ├── columns: d_comp:21 a:10 b:11 c_default:12 d_comp:14 decimals.a:15 decimals.b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: a:10 b:11 c_default:12 d_comp:14 decimals.a:15 decimals.b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: a:10 b:11 c_default:12 d_comp:14
      │    │    │    │    ├── grouping columns: a:10
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: d_comp:14 a:10 b:11 c_default:12
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: d_comp:13 a:10 b:11 c_default:12
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: a:10 b:11 c_default:12
      │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    ├── columns: c_default:9!null column1:7!null column2:8
      │    │    │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    │    │    ├── columns: column1:7!null column2:8
      │    │    │    │    │    │    │    │    │    └── (1.1, ARRAY[0.95])
      │    │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │    │         └── 1.23::DECIMAL(10,1) [as=c_default:9]
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         ├── crdb_internal.round_decimal_values(column1:7, 0) [as=a:10]
      │    │    │    │    │    │    │         ├── crdb_internal.round_decimal_values(column2:8, 1) [as=b:11]
      │    │    │    │    │    │    │         └── crdb_internal.round_decimal_values(c_default:9, 1) [as=c_default:12]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── (a:10 + c_default:12::DECIMAL)::DECIMAL(10,1) [as=d_comp:13]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── crdb_internal.round_decimal_values(d_comp:13, 1) [as=d_comp:14]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=b:11]
      │    │    │    │         │    └── b:11
      │    │    │    │         ├── first-agg [as=c_default:12]
      │    │    │    │         │    └── c_default:12
      │    │    │    │         └── first-agg [as=d_comp:14]
      │    │    │    │              └── d_comp:14
      │    │    │    ├── scan decimals
      │    │    │    │    ├── columns: decimals.a:15!null decimals.b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── d:18
      │    │    │    │              └── (decimals.a:15::DECIMAL + c:17::DECIMAL)::DECIMAL(10,1)
      │    │    │    └── filters
      │    │    │         └── a:10 = decimals.a:15
      │    │    └── projections
      │    │         └── (decimals.a:15::DECIMAL + c:17::DECIMAL)::DECIMAL(10,1) [as=d_comp:21]
      │    └── projections
      │         ├── CASE WHEN decimals.a:15 IS NULL THEN a:10 ELSE decimals.a:15 END [as=upsert_a:22]
      │         ├── CASE WHEN decimals.a:15 IS NULL THEN c_default:12 ELSE c:17 END [as=upsert_c:23]
      │         └── CASE WHEN decimals.a:15 IS NULL THEN d_comp:14 ELSE d:18 END [as=upsert_d:24]
      └── projections
           ├── round(upsert_a:22) = upsert_a:22 [as=check1:25]
           └── b:11[0] > 1 [as=check2:26]

# Regular UPSERT case.
build
UPSERT INTO decimals (a) VALUES (1.1)
----
upsert decimals
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: decimals.a:15
 ├── fetch columns: decimals.a:15 b:16 c:17 d:18
 ├── insert-mapping:
 │    ├── a:10 => decimals.a:1
 │    ├── b_default:11 => b:2
 │    ├── c_default:12 => c:3
 │    └── d_comp:14 => d:4
 ├── check columns: check1:26 check2:27
 └── project
      ├── columns: check1:26 check2:27 a:10 b_default:11 c_default:12 d_comp:14 decimals.a:15 b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20 d_comp:21 upsert_a:22 upsert_b:23 upsert_c:24 upsert_d:25
      ├── project
      │    ├── columns: upsert_a:22 upsert_b:23 upsert_c:24 upsert_d:25 a:10 b_default:11 c_default:12 d_comp:14 decimals.a:15 b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20 d_comp:21
      │    ├── project
      │    │    ├── columns: d_comp:21 a:10 b_default:11 c_default:12 d_comp:14 decimals.a:15 b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: a:10 b_default:11 c_default:12 d_comp:14 decimals.a:15 b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: a:10 b_default:11 c_default:12 d_comp:14
      │    │    │    │    ├── grouping columns: a:10
      │    │    │    │    ├── project
      │    │    │    │    │    ├── columns: d_comp:14 a:10 b_default:11 c_default:12
      │    │    │    │    │    ├── project
      │    │    │    │    │    │    ├── columns: d_comp:13 a:10 b_default:11 c_default:12
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: a:10 b_default:11 c_default:12
      │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    ├── columns: b_default:8 c_default:9!null column1:7!null
      │    │    │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    │    │    ├── columns: column1:7!null
      │    │    │    │    │    │    │    │    │    └── (1.1,)
      │    │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │    │         ├── NULL::DECIMAL(5,1)[] [as=b_default:8]
      │    │    │    │    │    │    │    │         └── 1.23::DECIMAL(10,1) [as=c_default:9]
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         ├── crdb_internal.round_decimal_values(column1:7, 0) [as=a:10]
      │    │    │    │    │    │    │         ├── crdb_internal.round_decimal_values(b_default:8, 1) [as=b_default:11]
      │    │    │    │    │    │    │         └── crdb_internal.round_decimal_values(c_default:9, 1) [as=c_default:12]
      │    │    │    │    │    │    └── projections
      │    │    │    │    │    │         └── (a:10 + c_default:12::DECIMAL)::DECIMAL(10,1) [as=d_comp:13]
      │    │    │    │    │    └── projections
      │    │    │    │    │         └── crdb_internal.round_decimal_values(d_comp:13, 1) [as=d_comp:14]
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=b_default:11]
      │    │    │    │         │    └── b_default:11
      │    │    │    │         ├── first-agg [as=c_default:12]
      │    │    │    │         │    └── c_default:12
      │    │    │    │         └── first-agg [as=d_comp:14]
      │    │    │    │              └── d_comp:14
      │    │    │    ├── scan decimals
      │    │    │    │    ├── columns: decimals.a:15!null b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20
      │    │    │    │    └── computed column expressions
      │    │    │    │         └── d:18
      │    │    │    │              └── (decimals.a:15::DECIMAL + c:17::DECIMAL)::DECIMAL(10,1)
      │    │    │    └── filters
      │    │    │         └── a:10 = decimals.a:15
      │    │    └── projections
      │    │         └── (decimals.a:15::DECIMAL + c:17::DECIMAL)::DECIMAL(10,1) [as=d_comp:21]
      │    └── projections
      │         ├── CASE WHEN decimals.a:15 IS NULL THEN a:10 ELSE decimals.a:15 END [as=upsert_a:22]
      │         ├── CASE WHEN decimals.a:15 IS NULL THEN b_default:11 ELSE b:16 END [as=upsert_b:23]
      │         ├── CASE WHEN decimals.a:15 IS NULL THEN c_default:12 ELSE c:17 END [as=upsert_c:24]
      │         └── CASE WHEN decimals.a:15 IS NULL THEN d_comp:14 ELSE d:18 END [as=upsert_d:25]
      └── projections
           ├── round(upsert_a:22) = upsert_a:22 [as=check1:26]
           └── upsert_b:23[0] > 1 [as=check2:27]

# INSERT...ON CONFLICT case.
build
INSERT INTO decimals (a, b) VALUES (1.1, ARRAY[0.95])
ON CONFLICT (a)
DO UPDATE SET b=ARRAY[0.99]
----
upsert decimals
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: decimals.a:15
 ├── fetch columns: decimals.a:15 decimals.b:16 c:17 d:18
 ├── insert-mapping:
 │    ├── a:10 => decimals.a:1
 │    ├── b:11 => decimals.b:2
 │    ├── c_default:12 => c:3
 │    └── d_comp:14 => d:4
 ├── update-mapping:
 │    └── upsert_b:25 => decimals.b:2
 ├── check columns: check1:28 check2:29
 └── project
      ├── columns: check1:28 check2:29 a:10 b:11 c_default:12 d_comp:14 decimals.a:15 decimals.b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20 b_new:22 d_comp:23 upsert_a:24 upsert_b:25 upsert_c:26 upsert_d:27
      ├── project
      │    ├── columns: upsert_a:24 upsert_b:25 upsert_c:26 upsert_d:27 a:10 b:11 c_default:12 d_comp:14 decimals.a:15 decimals.b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20 b_new:22 d_comp:23
      │    ├── project
      │    │    ├── columns: d_comp:23 a:10 b:11 c_default:12 d_comp:14 decimals.a:15 decimals.b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20 b_new:22
      │    │    ├── project
      │    │    │    ├── columns: b_new:22 a:10 b:11 c_default:12 d_comp:14 decimals.a:15 decimals.b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20
      │    │    │    ├── project
      │    │    │    │    ├── columns: b_new:21!null a:10 b:11 c_default:12 d_comp:14 decimals.a:15 decimals.b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20
      │    │    │    │    ├── left-join (hash)
      │    │    │    │    │    ├── columns: a:10 b:11 c_default:12 d_comp:14 decimals.a:15 decimals.b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20
      │    │    │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    │    │    ├── columns: a:10 b:11 c_default:12 d_comp:14
      │    │    │    │    │    │    ├── grouping columns: a:10
      │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    ├── columns: d_comp:14 a:10 b:11 c_default:12
      │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    ├── columns: d_comp:13 a:10 b:11 c_default:12
      │    │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    │    ├── columns: a:10 b:11 c_default:12
      │    │    │    │    │    │    │    │    │    ├── project
      │    │    │    │    │    │    │    │    │    │    ├── columns: c_default:9!null column1:7!null column2:8
      │    │    │    │    │    │    │    │    │    │    ├── values
      │    │    │    │    │    │    │    │    │    │    │    ├── columns: column1:7!null column2:8
      │    │    │    │    │    │    │    │    │    │    │    └── (1.1, ARRAY[0.95])
      │    │    │    │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │    │    │    │         └── 1.23::DECIMAL(10,1) [as=c_default:9]
      │    │    │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │    │    │         ├── crdb_internal.round_decimal_values(column1:7, 0) [as=a:10]
      │    │    │    │    │    │    │    │    │         ├── crdb_internal.round_decimal_values(column2:8, 1) [as=b:11]
      │    │    │    │    │    │    │    │    │         └── crdb_internal.round_decimal_values(c_default:9, 1) [as=c_default:12]
      │    │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │    │         └── (a:10 + c_default:12::DECIMAL)::DECIMAL(10,1) [as=d_comp:13]
      │    │    │    │    │    │    │    └── projections
      │    │    │    │    │    │    │         └── crdb_internal.round_decimal_values(d_comp:13, 1) [as=d_comp:14]
      │    │    │    │    │    │    └── aggregations
      │    │    │    │    │    │         ├── first-agg [as=b:11]
      │    │    │    │    │    │         │    └── b:11
      │    │    │    │    │    │         ├── first-agg [as=c_default:12]
      │    │    │    │    │    │         │    └── c_default:12
      │    │    │    │    │    │         └── first-agg [as=d_comp:14]
      │    │    │    │    │    │              └── d_comp:14
      │    │    │    │    │    ├── scan decimals
      │    │    │    │    │    │    ├── columns: decimals.a:15!null decimals.b:16 c:17 d:18 crdb_internal_mvcc_timestamp:19 tableoid:20
      │    │    │    │    │    │    └── computed column expressions
      │    │    │    │    │    │         └── d:18
      │    │    │    │    │    │              └── (decimals.a:15::DECIMAL + c:17::DECIMAL)::DECIMAL(10,1)
      │    │    │    │    │    └── filters
      │    │    │    │    │         └── a:10 = decimals.a:15
      │    │    │    │    └── projections
      │    │    │    │         └── ARRAY[0.99] [as=b_new:21]
      │    │    │    └── projections
      │    │    │         └── crdb_internal.round_decimal_values(b_new:21, 1) [as=b_new:22]
      │    │    └── projections
      │    │         └── (decimals.a:15::DECIMAL + c:17::DECIMAL)::DECIMAL(10,1) [as=d_comp:23]
      │    └── projections
      │         ├── CASE WHEN decimals.a:15 IS NULL THEN a:10 ELSE decimals.a:15 END [as=upsert_a:24]
      │         ├── CASE WHEN decimals.a:15 IS NULL THEN b:11 ELSE b_new:22 END [as=upsert_b:25]
      │         ├── CASE WHEN decimals.a:15 IS NULL THEN c_default:12 ELSE c:17 END [as=upsert_c:26]
      │         └── CASE WHEN decimals.a:15 IS NULL THEN d_comp:14 ELSE d:18 END [as=upsert_d:27]
      └── projections
           ├── round(upsert_a:24) = upsert_a:24 [as=check1:28]
           └── upsert_b:25[0] > 1 [as=check2:29]

# Regression test for #67100. Do not prune check columns for UPSERTs even if the
# expression does not reference any mutating columns.

exec-ddl
CREATE TABLE t67100 (
  a INT,
  CHECK (false),
  CHECK (0 > 1),
  CHECK (true AND 0 > 1)
)
----

build
UPSERT INTO t67100 VALUES (1)
----
upsert t67100
 ├── columns: <none>
 ├── upsert-mapping:
 │    ├── column1:5 => a:1
 │    └── rowid_default:6 => rowid:2
 ├── check columns: check1:7 check2:8 check3:9
 └── project
      ├── columns: check1:7!null check2:8!null check3:9!null column1:5!null rowid_default:6
      ├── project
      │    ├── columns: rowid_default:6 column1:5!null
      │    ├── values
      │    │    ├── columns: column1:5!null
      │    │    └── (1,)
      │    └── projections
      │         └── unique_rowid() [as=rowid_default:6]
      └── projections
           ├── false [as=check1:7]
           ├── 0 > 1 [as=check2:8]
           └── true AND (0 > 1) [as=check3:9]
