exec-ddl
CREATE TABLE abcde (
    a INT NOT NULL,
    b INT,
    c INT DEFAULT (10),
    d INT AS (b + c + 1) STORED,
    e INT AS (a) STORED
)
----

exec-ddl
CREATE TABLE xyz (
    x TEXT PRIMARY KEY,
    y INT8,
    z FLOAT8
)
----

exec-ddl
CREATE TABLE uv (
    u DECIMAL,
    v BYTES
)
----

exec-ddl
CREATE TABLE mutation (
    m INT PRIMARY KEY,
    n INT,
    "o:write-only" INT DEFAULT(10),
    "p:write-only" INT AS (o + n) STORED,
    "q:delete-only" INT AS (m * p) STORED,
    CHECK (m > 0)
)
----

exec-ddl
CREATE TABLE checks (
    a INT PRIMARY KEY CHECK (a > 0),
    b INT,
    c INT,
    d INT AS (c + 1) STORED,
    CHECK (b < d)
)
----

exec-ddl
CREATE TABLE decimals (
    a DECIMAL(10,0) PRIMARY KEY CHECK (round(a) = a),
    b DECIMAL(5,1)[] CHECK (b[0] > 1),
    c DECIMAL(10,1) DEFAULT (1.23),
    d DECIMAL(10,1) AS (a+c) STORED
)
----

# Unknown target table.
build
INSERT INTO unknown VALUES (1, 2, 3)
----
error (42P01): no data source matches prefix: "unknown"

# ------------------------------------------------------------------------------
# Tests without target column names.
# ------------------------------------------------------------------------------

# Specify values for all non-hidden columns.
build
INSERT INTO abcde VALUES (1, 2, 3)
----
insert abcde
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:8 => a:1
 │    ├── column2:9 => b:2
 │    ├── column3:10 => c:3
 │    ├── column12:12 => d:4
 │    ├── column1:8 => e:5
 │    └── column11:11 => rowid:6
 └── project
      ├── columns: column12:12!null column1:8!null column2:9!null column3:10!null column11:11
      ├── project
      │    ├── columns: column11:11 column1:8!null column2:9!null column3:10!null
      │    ├── values
      │    │    ├── columns: column1:8!null column2:9!null column3:10!null
      │    │    └── (1, 2, 3)
      │    └── projections
      │         └── unique_rowid() [as=column11:11]
      └── projections
           └── (column2:9 + column3:10) + 1 [as=column12:12]

# Don't specify values for null or default columns.
build
INSERT INTO abcde VALUES (1)
----
insert abcde
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:8 => a:1
 │    ├── column9:9 => b:2
 │    ├── column10:10 => c:3
 │    ├── column12:12 => d:4
 │    ├── column1:8 => e:5
 │    └── column11:11 => rowid:6
 └── project
      ├── columns: column12:12 column1:8!null column9:9 column10:10!null column11:11
      ├── project
      │    ├── columns: column9:9 column10:10!null column11:11 column1:8!null
      │    ├── values
      │    │    ├── columns: column1:8!null
      │    │    └── (1,)
      │    └── projections
      │         ├── NULL::INT8 [as=column9:9]
      │         ├── 10 [as=column10:10]
      │         └── unique_rowid() [as=column11:11]
      └── projections
           └── (column9:9 + column10:10) + 1 [as=column12:12]

# Ordered input.
build
INSERT INTO abcde SELECT y FROM xyz ORDER BY y, z LIMIT 10
----
insert abcde
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── y:9 => a:1
 │    ├── column12:12 => b:2
 │    ├── column13:13 => c:3
 │    ├── column15:15 => d:4
 │    ├── y:9 => e:5
 │    └── column14:14 => rowid:6
 └── project
      ├── columns: column15:15 y:9 column12:12 column13:13!null column14:14
      ├── project
      │    ├── columns: column12:12 column13:13!null column14:14 y:9
      │    ├── limit
      │    │    ├── columns: y:9 z:10
      │    │    ├── internal-ordering: +9,+10
      │    │    ├── sort
      │    │    │    ├── columns: y:9 z:10
      │    │    │    ├── ordering: +9,+10
      │    │    │    ├── limit hint: 10.00
      │    │    │    └── project
      │    │    │         ├── columns: y:9 z:10
      │    │    │         └── scan xyz
      │    │    │              └── columns: x:8!null y:9 z:10 xyz.crdb_internal_mvcc_timestamp:11
      │    │    └── 10
      │    └── projections
      │         ├── NULL::INT8 [as=column12:12]
      │         ├── 10 [as=column13:13]
      │         └── unique_rowid() [as=column14:14]
      └── projections
           └── (column12:12 + column13:13) + 1 [as=column15:15]

# Ignore ORDER BY without LIMIT.
build
INSERT INTO abcde SELECT y FROM xyz ORDER BY y, z
----
insert abcde
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── y:9 => a:1
 │    ├── column12:12 => b:2
 │    ├── column13:13 => c:3
 │    ├── column15:15 => d:4
 │    ├── y:9 => e:5
 │    └── column14:14 => rowid:6
 └── project
      ├── columns: column15:15 y:9 column12:12 column13:13!null column14:14
      ├── project
      │    ├── columns: column12:12 column13:13!null column14:14 y:9
      │    ├── project
      │    │    ├── columns: y:9 z:10
      │    │    └── scan xyz
      │    │         └── columns: x:8!null y:9 z:10 xyz.crdb_internal_mvcc_timestamp:11
      │    └── projections
      │         ├── NULL::INT8 [as=column12:12]
      │         ├── 10 [as=column13:13]
      │         └── unique_rowid() [as=column14:14]
      └── projections
           └── (column12:12 + column13:13) + 1 [as=column15:15]

# Use placeholders.
build
INSERT INTO xyz VALUES ($1, $2, $3)
----
insert xyz
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:5 => x:1
 │    ├── column2:6 => y:2
 │    └── column3:7 => z:3
 └── values
      ├── columns: column1:5 column2:6 column3:7
      └── ($1, $2, $3)

# Null expressions.
build
INSERT INTO abcde VALUES (2, null, null)
----
insert abcde
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:8 => a:1
 │    ├── column2:9 => b:2
 │    ├── column3:10 => c:3
 │    ├── column12:12 => d:4
 │    ├── column1:8 => e:5
 │    └── column11:11 => rowid:6
 └── project
      ├── columns: column12:12 column1:8!null column2:9 column3:10 column11:11
      ├── project
      │    ├── columns: column11:11 column1:8!null column2:9 column3:10
      │    ├── values
      │    │    ├── columns: column1:8!null column2:9 column3:10
      │    │    └── (2, NULL::INT8, NULL::INT8)
      │    └── projections
      │         └── unique_rowid() [as=column11:11]
      └── projections
           └── (column2:9 + column3:10) + 1 [as=column12:12]

# Duplicate expressions.
build
INSERT INTO abcde SELECT 2, $1 + 1, $1 + 1
----
insert abcde
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── "?column?":8 => a:1
 │    ├── "?column?":9 => b:2
 │    ├── "?column?":9 => c:3
 │    ├── column11:11 => d:4
 │    ├── "?column?":8 => e:5
 │    └── column10:10 => rowid:6
 └── project
      ├── columns: column11:11 "?column?":8!null "?column?":9 column10:10
      ├── project
      │    ├── columns: column10:10 "?column?":8!null "?column?":9
      │    ├── project
      │    │    ├── columns: "?column?":8!null "?column?":9
      │    │    ├── values
      │    │    │    └── ()
      │    │    └── projections
      │    │         ├── 2 [as="?column?":8]
      │    │         └── $1 + 1 [as="?column?":9]
      │    └── projections
      │         └── unique_rowid() [as=column10:10]
      └── projections
           └── ("?column?":9 + "?column?":9) + 1 [as=column11:11]

# Use DEFAULT VALUES.
build
INSERT INTO uv DEFAULT VALUES
----
insert uv
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column5:5 => u:1
 │    ├── column6:6 => v:2
 │    └── column7:7 => rowid:3
 └── project
      ├── columns: column5:5 column6:6 column7:7
      ├── values
      │    └── ()
      └── projections
           ├── NULL::DECIMAL [as=column5:5]
           ├── NULL::BYTES [as=column6:6]
           └── unique_rowid() [as=column7:7]

# Use DEFAULT expressions in VALUES expression.
build
INSERT INTO abcde ((VALUES (1, DEFAULT, 2), (2, 3, 4), (3, 2, DEFAULT), (4, DEFAULT, DEFAULT)))
----
insert abcde
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:8 => a:1
 │    ├── column2:9 => b:2
 │    ├── column3:10 => c:3
 │    ├── column12:12 => d:4
 │    ├── column1:8 => e:5
 │    └── column11:11 => rowid:6
 └── project
      ├── columns: column12:12 column1:8!null column2:9 column3:10!null column11:11
      ├── project
      │    ├── columns: column11:11 column1:8!null column2:9 column3:10!null
      │    ├── values
      │    │    ├── columns: column1:8!null column2:9 column3:10!null
      │    │    ├── (1, NULL::INT8, 2)
      │    │    ├── (2, 3, 4)
      │    │    ├── (3, 2, 10)
      │    │    └── (4, NULL::INT8, 10)
      │    └── projections
      │         └── unique_rowid() [as=column11:11]
      └── projections
           └── (column2:9 + column3:10) + 1 [as=column12:12]

# Use DEFAULT expressions in VALUES expression wrapped by WITH clause (error).
build
INSERT INTO abcde WITH a AS (SELECT 1) VALUES (1, DEFAULT, 2)
----
error (42601): DEFAULT can only appear in a VALUES list within INSERT or on the right side of a SET

# Too many values.
build
INSERT INTO xyz VALUES ('foo', 2, 3, 4)
----
error (42601): INSERT has more expressions than target columns, 4 expressions for 3 targets

# Return values from insert.
build
INSERT INTO abcde SELECT 1 RETURNING *
----
project
 ├── columns: a:1!null b:2 c:3!null d:4 e:5!null
 └── insert abcde
      ├── columns: a:1!null b:2 c:3!null d:4 e:5!null rowid:6!null
      ├── insert-mapping:
      │    ├── "?column?":8 => a:1
      │    ├── column9:9 => b:2
      │    ├── column10:10 => c:3
      │    ├── column12:12 => d:4
      │    ├── "?column?":8 => e:5
      │    └── column11:11 => rowid:6
      └── project
           ├── columns: column12:12 "?column?":8!null column9:9 column10:10!null column11:11
           ├── project
           │    ├── columns: column9:9 column10:10!null column11:11 "?column?":8!null
           │    ├── project
           │    │    ├── columns: "?column?":8!null
           │    │    ├── values
           │    │    │    └── ()
           │    │    └── projections
           │    │         └── 1 [as="?column?":8]
           │    └── projections
           │         ├── NULL::INT8 [as=column9:9]
           │         ├── 10 [as=column10:10]
           │         └── unique_rowid() [as=column11:11]
           └── projections
                └── (column9:9 + column10:10) + 1 [as=column12:12]

# Return values from aliased table.
build
INSERT INTO abcde AS foo SELECT 1 RETURNING foo.a + 1, foo.b * foo.c
----
project
 ├── columns: "?column?":13!null "?column?":14
 ├── insert abcde [as=foo]
 │    ├── columns: a:1!null b:2 c:3!null d:4 e:5!null rowid:6!null
 │    ├── insert-mapping:
 │    │    ├── "?column?":8 => a:1
 │    │    ├── column9:9 => b:2
 │    │    ├── column10:10 => c:3
 │    │    ├── column12:12 => d:4
 │    │    ├── "?column?":8 => e:5
 │    │    └── column11:11 => rowid:6
 │    └── project
 │         ├── columns: column12:12 "?column?":8!null column9:9 column10:10!null column11:11
 │         ├── project
 │         │    ├── columns: column9:9 column10:10!null column11:11 "?column?":8!null
 │         │    ├── project
 │         │    │    ├── columns: "?column?":8!null
 │         │    │    ├── values
 │         │    │    │    └── ()
 │         │    │    └── projections
 │         │    │         └── 1 [as="?column?":8]
 │         │    └── projections
 │         │         ├── NULL::INT8 [as=column9:9]
 │         │         ├── 10 [as=column10:10]
 │         │         └── unique_rowid() [as=column11:11]
 │         └── projections
 │              └── (column9:9 + column10:10) + 1 [as=column12:12]
 └── projections
      ├── a:1 + 1 [as="?column?":13]
      └── b:2 * c:3 [as="?column?":14]

# Use returning INSERT as a FROM expression.
build
SELECT * FROM [INSERT INTO abcde VALUES (1) RETURNING *]
----
with &1
 ├── columns: a:13!null b:14 c:15!null d:16 e:17!null
 ├── project
 │    ├── columns: abcde.a:1!null abcde.b:2 abcde.c:3!null abcde.d:4 abcde.e:5!null
 │    └── insert abcde
 │         ├── columns: abcde.a:1!null abcde.b:2 abcde.c:3!null abcde.d:4 abcde.e:5!null rowid:6!null
 │         ├── insert-mapping:
 │         │    ├── column1:8 => abcde.a:1
 │         │    ├── column9:9 => abcde.b:2
 │         │    ├── column10:10 => abcde.c:3
 │         │    ├── column12:12 => abcde.d:4
 │         │    ├── column1:8 => abcde.e:5
 │         │    └── column11:11 => rowid:6
 │         └── project
 │              ├── columns: column12:12 column1:8!null column9:9 column10:10!null column11:11
 │              ├── project
 │              │    ├── columns: column9:9 column10:10!null column11:11 column1:8!null
 │              │    ├── values
 │              │    │    ├── columns: column1:8!null
 │              │    │    └── (1,)
 │              │    └── projections
 │              │         ├── NULL::INT8 [as=column9:9]
 │              │         ├── 10 [as=column10:10]
 │              │         └── unique_rowid() [as=column11:11]
 │              └── projections
 │                   └── (column9:9 + column10:10) + 1 [as=column12:12]
 └── with-scan &1
      ├── columns: a:13!null b:14 c:15!null d:16 e:17!null
      └── mapping:
           ├──  abcde.a:1 => a:13
           ├──  abcde.b:2 => b:14
           ├──  abcde.c:3 => c:15
           ├──  abcde.d:4 => d:16
           └──  abcde.e:5 => e:17

# Try to use aggregate function in RETURNING clause.
build
INSERT INTO abcde VALUES (1) RETURNING sum(a)
----
error (42803): sum(): aggregate functions are not allowed in RETURNING

# Try to use SRF in RETURNING clause.
build
INSERT INTO abcde VALUES (1) RETURNING generate_series(1, 10)
----
error (0A000): generate_series(): generator functions are not allowed in RETURNING

# Try to use non-returning INSERT as expression.
build
SELECT * FROM [INSERT INTO abcde VALUES (1)]
----
error (42703): statement source "INSERT INTO abcde VALUES (1)" does not return any columns

# Use CTE with multiple variables.
build
WITH a AS (SELECT y, y+1 FROM xyz) INSERT INTO abcde SELECT * FROM a
----
with &1 (a)
 ├── project
 │    ├── columns: "?column?":5 xyz.y:2
 │    ├── scan xyz
 │    │    └── columns: x:1!null xyz.y:2 z:3 xyz.crdb_internal_mvcc_timestamp:4
 │    └── projections
 │         └── xyz.y:2 + 1 [as="?column?":5]
 └── insert abcde
      ├── columns: <none>
      ├── insert-mapping:
      │    ├── y:13 => a:6
      │    ├── "?column?":14 => b:7
      │    ├── column15:15 => c:8
      │    ├── column17:17 => d:9
      │    ├── y:13 => e:10
      │    └── column16:16 => rowid:11
      └── project
           ├── columns: column17:17 y:13 "?column?":14 column15:15!null column16:16
           ├── project
           │    ├── columns: column15:15!null column16:16 y:13 "?column?":14
           │    ├── with-scan &1 (a)
           │    │    ├── columns: y:13 "?column?":14
           │    │    └── mapping:
           │    │         ├──  xyz.y:2 => y:13
           │    │         └──  "?column?":5 => "?column?":14
           │    └── projections
           │         ├── 10 [as=column15:15]
           │         └── unique_rowid() [as=column16:16]
           └── projections
                └── ("?column?":14 + column15:15) + 1 [as=column17:17]

# Use CTE with multiple variables.
build
WITH a AS (SELECT y, y+1 FROM xyz), b AS (SELECT y+1, y FROM xyz)
INSERT INTO abcde TABLE a UNION TABLE b
----
with &1 (a)
 ├── project
 │    ├── columns: "?column?":5 xyz.y:2
 │    ├── scan xyz
 │    │    └── columns: x:1!null xyz.y:2 z:3 xyz.crdb_internal_mvcc_timestamp:4
 │    └── projections
 │         └── xyz.y:2 + 1 [as="?column?":5]
 └── with &2 (b)
      ├── project
      │    ├── columns: "?column?":10 xyz.y:7
      │    ├── scan xyz
      │    │    └── columns: x:6!null xyz.y:7 z:8 xyz.crdb_internal_mvcc_timestamp:9
      │    └── projections
      │         └── xyz.y:7 + 1 [as="?column?":10]
      └── insert abcde
           ├── columns: <none>
           ├── insert-mapping:
           │    ├── y:22 => a:11
           │    ├── "?column?":23 => b:12
           │    ├── column24:24 => c:13
           │    ├── column26:26 => d:14
           │    ├── y:22 => e:15
           │    └── column25:25 => rowid:16
           └── project
                ├── columns: column26:26 y:22 "?column?":23 column24:24!null column25:25
                ├── project
                │    ├── columns: column24:24!null column25:25 y:22 "?column?":23
                │    ├── union
                │    │    ├── columns: y:22 "?column?":23
                │    │    ├── left columns: y:18 "?column?":19
                │    │    ├── right columns: "?column?":20 y:21
                │    │    ├── with-scan &1 (a)
                │    │    │    ├── columns: y:18 "?column?":19
                │    │    │    └── mapping:
                │    │    │         ├──  xyz.y:2 => y:18
                │    │    │         └──  "?column?":5 => "?column?":19
                │    │    └── with-scan &2 (b)
                │    │         ├── columns: "?column?":20 y:21
                │    │         └── mapping:
                │    │              ├──  "?column?":10 => "?column?":20
                │    │              └──  xyz.y:7 => y:21
                │    └── projections
                │         ├── 10 [as=column24:24]
                │         └── unique_rowid() [as=column25:25]
                └── projections
                     └── ("?column?":23 + column24:24) + 1 [as=column26:26]

# Non-referenced CTE with mutation.
build
WITH cte AS (SELECT b FROM [INSERT INTO abcde VALUES (1) RETURNING *]) INSERT INTO abcde VALUES (1)
----
with &1
 ├── project
 │    ├── columns: abcde.a:1!null abcde.b:2 abcde.c:3!null abcde.d:4 abcde.e:5!null
 │    └── insert abcde
 │         ├── columns: abcde.a:1!null abcde.b:2 abcde.c:3!null abcde.d:4 abcde.e:5!null rowid:6!null
 │         ├── insert-mapping:
 │         │    ├── column1:8 => abcde.a:1
 │         │    ├── column9:9 => abcde.b:2
 │         │    ├── column10:10 => abcde.c:3
 │         │    ├── column12:12 => abcde.d:4
 │         │    ├── column1:8 => abcde.e:5
 │         │    └── column11:11 => rowid:6
 │         └── project
 │              ├── columns: column12:12 column1:8!null column9:9 column10:10!null column11:11
 │              ├── project
 │              │    ├── columns: column9:9 column10:10!null column11:11 column1:8!null
 │              │    ├── values
 │              │    │    ├── columns: column1:8!null
 │              │    │    └── (1,)
 │              │    └── projections
 │              │         ├── NULL::INT8 [as=column9:9]
 │              │         ├── 10 [as=column10:10]
 │              │         └── unique_rowid() [as=column11:11]
 │              └── projections
 │                   └── (column9:9 + column10:10) + 1 [as=column12:12]
 └── with &2 (cte)
      ├── project
      │    ├── columns: b:14
      │    └── with-scan &1
      │         ├── columns: a:13!null b:14 c:15!null d:16 e:17!null
      │         └── mapping:
      │              ├──  abcde.a:1 => a:13
      │              ├──  abcde.b:2 => b:14
      │              ├──  abcde.c:3 => c:15
      │              ├──  abcde.d:4 => d:16
      │              └──  abcde.e:5 => e:17
      └── insert abcde
           ├── columns: <none>
           ├── insert-mapping:
           │    ├── column1:25 => abcde.a:18
           │    ├── column26:26 => abcde.b:19
           │    ├── column27:27 => abcde.c:20
           │    ├── column29:29 => abcde.d:21
           │    ├── column1:25 => abcde.e:22
           │    └── column28:28 => rowid:23
           └── project
                ├── columns: column29:29 column1:25!null column26:26 column27:27!null column28:28
                ├── project
                │    ├── columns: column26:26 column27:27!null column28:28 column1:25!null
                │    ├── values
                │    │    ├── columns: column1:25!null
                │    │    └── (1,)
                │    └── projections
                │         ├── NULL::INT8 [as=column26:26]
                │         ├── 10 [as=column27:27]
                │         └── unique_rowid() [as=column28:28]
                └── projections
                     └── (column26:26 + column27:27) + 1 [as=column29:29]

# Insert CTE that returns no columns.
build
WITH cte AS (INSERT INTO abcde VALUES (1)) SELECT * FROM cte
----
error (0A000): WITH clause "cte" does not return any columns

# Use SRF in RETURNING clause.
build
INSERT INTO abcde VALUES (1) RETURNING generate_series(1, 100)
----
error (0A000): generate_series(): generator functions are not allowed in RETURNING

# ------------------------------------------------------------------------------
# Tests with target column names.
# ------------------------------------------------------------------------------

# Specify values for all non-computed columns.
build
INSERT INTO abcde (c, b, a) VALUES (1, 2, 3)
----
insert abcde
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column3:10 => a:1
 │    ├── column2:9 => b:2
 │    ├── column1:8 => c:3
 │    ├── column12:12 => d:4
 │    ├── column3:10 => e:5
 │    └── column11:11 => rowid:6
 └── project
      ├── columns: column12:12!null column1:8!null column2:9!null column3:10!null column11:11
      ├── project
      │    ├── columns: column11:11 column1:8!null column2:9!null column3:10!null
      │    ├── values
      │    │    ├── columns: column1:8!null column2:9!null column3:10!null
      │    │    └── (1, 2, 3)
      │    └── projections
      │         └── unique_rowid() [as=column11:11]
      └── projections
           └── (column2:9 + column1:8) + 1 [as=column12:12]

# Don't specify values for null or default columns.
build
INSERT INTO abcde (a) VALUES (1)
----
insert abcde
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:8 => a:1
 │    ├── column9:9 => b:2
 │    ├── column10:10 => c:3
 │    ├── column12:12 => d:4
 │    ├── column1:8 => e:5
 │    └── column11:11 => rowid:6
 └── project
      ├── columns: column12:12 column1:8!null column9:9 column10:10!null column11:11
      ├── project
      │    ├── columns: column9:9 column10:10!null column11:11 column1:8!null
      │    ├── values
      │    │    ├── columns: column1:8!null
      │    │    └── (1,)
      │    └── projections
      │         ├── NULL::INT8 [as=column9:9]
      │         ├── 10 [as=column10:10]
      │         └── unique_rowid() [as=column11:11]
      └── projections
           └── (column9:9 + column10:10) + 1 [as=column12:12]

# Insert value into hidden rowid column.
build
INSERT INTO abcde (a, rowid) VALUES (1, 2) RETURNING *
----
project
 ├── columns: a:1!null b:2 c:3!null d:4 e:5!null
 └── insert abcde
      ├── columns: a:1!null b:2 c:3!null d:4 e:5!null rowid:6!null
      ├── insert-mapping:
      │    ├── column1:8 => a:1
      │    ├── column10:10 => b:2
      │    ├── column11:11 => c:3
      │    ├── column12:12 => d:4
      │    ├── column1:8 => e:5
      │    └── column2:9 => rowid:6
      └── project
           ├── columns: column12:12 column1:8!null column2:9!null column10:10 column11:11!null
           ├── project
           │    ├── columns: column10:10 column11:11!null column1:8!null column2:9!null
           │    ├── values
           │    │    ├── columns: column1:8!null column2:9!null
           │    │    └── (1, 2)
           │    └── projections
           │         ├── NULL::INT8 [as=column10:10]
           │         └── 10 [as=column11:11]
           └── projections
                └── (column10:10 + column11:11) + 1 [as=column12:12]

# Use DEFAULT expressions in VALUES expression.
build
INSERT INTO abcde (c, b, a, rowid)
VALUES (DEFAULT, DEFAULT, 1, DEFAULT), (3, 2, 1, DEFAULT), (DEFAULT, DEFAULT, 2, 100)
RETURNING *, rowid
----
insert abcde
 ├── columns: a:1!null b:2 c:3!null d:4 e:5!null rowid:6!null
 ├── insert-mapping:
 │    ├── column3:10 => a:1
 │    ├── column2:9 => b:2
 │    ├── column1:8 => c:3
 │    ├── column12:12 => d:4
 │    ├── column3:10 => e:5
 │    └── column4:11 => rowid:6
 └── project
      ├── columns: column12:12 column1:8!null column2:9 column3:10!null column4:11
      ├── values
      │    ├── columns: column1:8!null column2:9 column3:10!null column4:11
      │    ├── (10, NULL::INT8, 1, unique_rowid())
      │    ├── (3, 2, 1, unique_rowid())
      │    └── (10, NULL::INT8, 2, 100)
      └── projections
           └── (column2:9 + column1:8) + 1 [as=column12:12]

# Verify that there is no compile-time error when trying to insert a NULL
# DEFAULT value into a not-null column (it will fail at runtime).
build
INSERT INTO abcde (a) VALUES (DEFAULT)
----
insert abcde
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:8 => a:1
 │    ├── column9:9 => b:2
 │    ├── column10:10 => c:3
 │    ├── column12:12 => d:4
 │    ├── column1:8 => e:5
 │    └── column11:11 => rowid:6
 └── project
      ├── columns: column12:12 column1:8 column9:9 column10:10!null column11:11
      ├── project
      │    ├── columns: column9:9 column10:10!null column11:11 column1:8
      │    ├── values
      │    │    ├── columns: column1:8
      │    │    └── (NULL::INT8,)
      │    └── projections
      │         ├── NULL::INT8 [as=column9:9]
      │         ├── 10 [as=column10:10]
      │         └── unique_rowid() [as=column11:11]
      └── projections
           └── (column9:9 + column10:10) + 1 [as=column12:12]

# Mismatched type.
build
INSERT INTO xyz (x) VALUES (10)
----
error (42804): value type int doesn't match type string of column "x"

# Try to insert into computed column.
build
INSERT INTO abcde (a, b, c, d) VALUES (1, 2, 3, 4)
----
error (55000): cannot write directly to computed column "d"

# Try to insert DEFAULT expression into computed column.
build
INSERT INTO abcde (a, d) VALUES (1, DEFAULT)
----
error (55000): cannot write directly to computed column "d"

# Too many values.
build
INSERT INTO abcde (a, b) VALUES (1, 2, 3)
----
error (42601): INSERT has more expressions than target columns, 3 expressions for 2 targets

# Too few values.
build
INSERT INTO abcde (a, b) VALUES (1)
----
error (42601): INSERT has more target columns than expressions, 1 expressions for 2 targets

# Duplicate column name.
build
INSERT INTO abcde (a, b, a) VALUES (1, 2, 3)
----
error (42601): multiple assignments to the same column "a"

# Undefined column name.
build
INSERT INTO abcde (a, unk) VALUES (1, 2)
----
error (42703): column "unk" does not exist

# Return values from insert.
build
INSERT INTO abcde (b, a) SELECT x::int, y FROM xyz RETURNING *
----
project
 ├── columns: a:1!null b:2!null c:3!null d:4!null e:5
 └── insert abcde
      ├── columns: a:1!null b:2!null c:3!null d:4!null e:5 rowid:6!null
      ├── insert-mapping:
      │    ├── y:9 => a:1
      │    ├── x:12 => b:2
      │    ├── column13:13 => c:3
      │    ├── column15:15 => d:4
      │    ├── y:9 => e:5
      │    └── column14:14 => rowid:6
      └── project
           ├── columns: column15:15!null y:9 x:12!null column13:13!null column14:14
           ├── project
           │    ├── columns: column13:13!null column14:14 y:9 x:12!null
           │    ├── project
           │    │    ├── columns: x:12!null y:9
           │    │    ├── scan xyz
           │    │    │    └── columns: xyz.x:8!null y:9 z:10 xyz.crdb_internal_mvcc_timestamp:11
           │    │    └── projections
           │    │         └── xyz.x:8::INT8 [as=x:12]
           │    └── projections
           │         ├── 10 [as=column13:13]
           │         └── unique_rowid() [as=column14:14]
           └── projections
                └── (x:12 + column13:13) + 1 [as=column15:15]

# Return hidden column.
build
INSERT INTO abcde (rowid, a) VALUES (1, 2) RETURNING *, rowid
----
insert abcde
 ├── columns: a:1!null b:2 c:3!null d:4 e:5!null rowid:6!null
 ├── insert-mapping:
 │    ├── column2:9 => a:1
 │    ├── column10:10 => b:2
 │    ├── column11:11 => c:3
 │    ├── column12:12 => d:4
 │    ├── column2:9 => e:5
 │    └── column1:8 => rowid:6
 └── project
      ├── columns: column12:12 column1:8!null column2:9!null column10:10 column11:11!null
      ├── project
      │    ├── columns: column10:10 column11:11!null column1:8!null column2:9!null
      │    ├── values
      │    │    ├── columns: column1:8!null column2:9!null
      │    │    └── (1, 2)
      │    └── projections
      │         ├── NULL::INT8 [as=column10:10]
      │         └── 10 [as=column11:11]
      └── projections
           └── (column10:10 + column11:11) + 1 [as=column12:12]

# Use returning INSERT as a FROM expression.
build
SELECT * FROM [INSERT INTO abcde (a, b) SELECT y+1, y FROM xyz RETURNING *]
----
with &1
 ├── columns: a:16!null b:17 c:18!null d:19 e:20
 ├── project
 │    ├── columns: abcde.a:1!null abcde.b:2 abcde.c:3!null abcde.d:4 abcde.e:5
 │    └── insert abcde
 │         ├── columns: abcde.a:1!null abcde.b:2 abcde.c:3!null abcde.d:4 abcde.e:5 rowid:6!null
 │         ├── insert-mapping:
 │         │    ├── "?column?":12 => abcde.a:1
 │         │    ├── y:9 => abcde.b:2
 │         │    ├── column13:13 => abcde.c:3
 │         │    ├── column15:15 => abcde.d:4
 │         │    ├── "?column?":12 => abcde.e:5
 │         │    └── column14:14 => rowid:6
 │         └── project
 │              ├── columns: column15:15 y:9 "?column?":12 column13:13!null column14:14
 │              ├── project
 │              │    ├── columns: column13:13!null column14:14 y:9 "?column?":12
 │              │    ├── project
 │              │    │    ├── columns: "?column?":12 y:9
 │              │    │    ├── scan xyz
 │              │    │    │    └── columns: x:8!null y:9 z:10 xyz.crdb_internal_mvcc_timestamp:11
 │              │    │    └── projections
 │              │    │         └── y:9 + 1 [as="?column?":12]
 │              │    └── projections
 │              │         ├── 10 [as=column13:13]
 │              │         └── unique_rowid() [as=column14:14]
 │              └── projections
 │                   └── (y:9 + column13:13) + 1 [as=column15:15]
 └── with-scan &1
      ├── columns: a:16!null b:17 c:18!null d:19 e:20
      └── mapping:
           ├──  abcde.a:1 => a:16
           ├──  abcde.b:2 => b:17
           ├──  abcde.c:3 => c:18
           ├──  abcde.d:4 => d:19
           └──  abcde.e:5 => e:20

# ------------------------------------------------------------------------------
# Propagate desired INSERT types.
# ------------------------------------------------------------------------------

# Propagate types to VALUES.
build
INSERT INTO xyz VALUES ($1, $2 + 1, $3 + 1)
----
insert xyz
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:5 => x:1
 │    ├── column2:6 => y:2
 │    └── column3:7 => z:3
 └── values
      ├── columns: column1:5 column2:6 column3:7
      └── ($1, $2 + 1, $3 + 1.0)

# Propagate types to VALUES (named columns).
build
INSERT INTO xyz (z, y, x) VALUES ($1 + 1, $2 + 1, $3)
----
insert xyz
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column3:7 => x:1
 │    ├── column2:6 => y:2
 │    └── column1:5 => z:3
 └── values
      ├── columns: column1:5 column2:6 column3:7
      └── ($1 + 1.0, $2 + 1, $3)

# Propagate types to projection list.
build
INSERT INTO xyz ((SELECT $1, $2 + 1, $3 + 1))
----
insert xyz
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── "?column?":5 => x:1
 │    ├── "?column?":6 => y:2
 │    └── "?column?":7 => z:3
 └── project
      ├── columns: "?column?":5 "?column?":6 "?column?":7
      ├── values
      │    └── ()
      └── projections
           ├── $1 [as="?column?":5]
           ├── $2 + 1 [as="?column?":6]
           └── $3 + 1.0 [as="?column?":7]

# Propagate types to projection list (named columns).
build
INSERT INTO xyz (x, y, z) SELECT $1, $2 + 1, $3 + 1
----
insert xyz
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── "?column?":5 => x:1
 │    ├── "?column?":6 => y:2
 │    └── "?column?":7 => z:3
 └── project
      ├── columns: "?column?":5 "?column?":6 "?column?":7
      ├── values
      │    └── ()
      └── projections
           ├── $1 [as="?column?":5]
           ├── $2 + 1 [as="?column?":6]
           └── $3 + 1.0 [as="?column?":7]

# Propagate types to UNION.
build
INSERT INTO xyz (SELECT $1, $2 + 1, $3 + 1) UNION ALL (SELECT $1, $2 + 1, $3 + 1)
----
insert xyz
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── "?column?":11 => x:1
 │    ├── "?column?":12 => y:2
 │    └── "?column?":13 => z:3
 └── union-all
      ├── columns: "?column?":11 "?column?":12 "?column?":13
      ├── left columns: "?column?":5 "?column?":6 "?column?":7
      ├── right columns: "?column?":8 "?column?":9 "?column?":10
      ├── project
      │    ├── columns: "?column?":5 "?column?":6 "?column?":7
      │    ├── values
      │    │    └── ()
      │    └── projections
      │         ├── $1 [as="?column?":5]
      │         ├── $2 + 1 [as="?column?":6]
      │         └── $3 + 1.0 [as="?column?":7]
      └── project
           ├── columns: "?column?":8 "?column?":9 "?column?":10
           ├── values
           │    └── ()
           └── projections
                ├── $1 [as="?column?":8]
                ├── $2 + 1 [as="?column?":9]
                └── $3 + 1.0 [as="?column?":10]

# Propagate types to UNION (named columns).
build
INSERT INTO xyz (x, z, y) SELECT $1, $2 + 1, $3 + 1 UNION ALL SELECT $1, $2 + 1, $3 + 1
----
insert xyz
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── "?column?":11 => x:1
 │    ├── "?column?":13 => y:2
 │    └── "?column?":12 => z:3
 └── union-all
      ├── columns: "?column?":11 "?column?":12 "?column?":13
      ├── left columns: "?column?":5 "?column?":6 "?column?":7
      ├── right columns: "?column?":8 "?column?":9 "?column?":10
      ├── project
      │    ├── columns: "?column?":5 "?column?":6 "?column?":7
      │    ├── values
      │    │    └── ()
      │    └── projections
      │         ├── $1 [as="?column?":5]
      │         ├── $2 + 1.0 [as="?column?":6]
      │         └── $3 + 1 [as="?column?":7]
      └── project
           ├── columns: "?column?":8 "?column?":9 "?column?":10
           ├── values
           │    └── ()
           └── projections
                ├── $1 [as="?column?":8]
                ├── $2 + 1.0 [as="?column?":9]
                └── $3 + 1 [as="?column?":10]

# ------------------------------------------------------------------------------
# Tests with mutation columns.
# ------------------------------------------------------------------------------

# Test mutation columns with default and computed values.
build
INSERT INTO mutation (m, n) VALUES (1, 2)
----
insert mutation
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:7 => m:1
 │    ├── column2:8 => n:2
 │    ├── column9:9 => o:3
 │    └── column10:10 => p:4
 ├── check columns: check1:11
 └── project
      ├── columns: check1:11!null column1:7!null column2:8!null column9:9!null column10:10!null
      ├── project
      │    ├── columns: column10:10!null column1:7!null column2:8!null column9:9!null
      │    ├── project
      │    │    ├── columns: column9:9!null column1:7!null column2:8!null
      │    │    ├── values
      │    │    │    ├── columns: column1:7!null column2:8!null
      │    │    │    └── (1, 2)
      │    │    └── projections
      │    │         └── 10 [as=column9:9]
      │    └── projections
      │         └── column9:9 + column2:8 [as=column10:10]
      └── projections
           └── column1:7 > 0 [as=check1:11]

# Use RETURNING clause and ensure that mutation columns aren't projected.
build
INSERT INTO mutation (m, n) VALUES (1, 2) RETURNING *
----
insert mutation
 ├── columns: m:1!null n:2!null
 ├── insert-mapping:
 │    ├── column1:7 => m:1
 │    ├── column2:8 => n:2
 │    ├── column9:9 => o:3
 │    └── column10:10 => p:4
 ├── check columns: check1:11
 └── project
      ├── columns: check1:11!null column1:7!null column2:8!null column9:9!null column10:10!null
      ├── project
      │    ├── columns: column10:10!null column1:7!null column2:8!null column9:9!null
      │    ├── project
      │    │    ├── columns: column9:9!null column1:7!null column2:8!null
      │    │    ├── values
      │    │    │    ├── columns: column1:7!null column2:8!null
      │    │    │    └── (1, 2)
      │    │    └── projections
      │    │         └── 10 [as=column9:9]
      │    └── projections
      │         └── column9:9 + column2:8 [as=column10:10]
      └── projections
           └── column1:7 > 0 [as=check1:11]

# Try to reference write-only mutation column in RETURNING clause.
build
INSERT INTO mutation (m, n) VALUES (1, 2) RETURNING o
----
error (42703): column "o" does not exist

# Try to reference delete-only mutation column in RETURNING clause.
build
INSERT INTO mutation (m, n) VALUES (1, 2) RETURNING p
----
error (42703): column "p" does not exist

# Try to insert into mutation column.
build
INSERT INTO mutation (m, n, p) VALUES (1, 2, 3)
----
error (42703): column "p" does not exist

# ------------------------------------------------------------------------------
# Test check constraints.
# ------------------------------------------------------------------------------

# Insert constants.
build
INSERT INTO checks (a, b, c) VALUES (1, 2, 3)
----
insert checks
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:6 => a:1
 │    ├── column2:7 => b:2
 │    ├── column3:8 => c:3
 │    └── column9:9 => d:4
 ├── check columns: check1:10 check2:11
 └── project
      ├── columns: check1:10!null check2:11!null column1:6!null column2:7!null column3:8!null column9:9!null
      ├── project
      │    ├── columns: column9:9!null column1:6!null column2:7!null column3:8!null
      │    ├── values
      │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    └── (1, 2, 3)
      │    └── projections
      │         └── column3:8 + 1 [as=column9:9]
      └── projections
           ├── column2:7 < column9:9 [as=check1:10]
           └── column1:6 > 0 [as=check2:11]

# Insert results of SELECT.
build
INSERT INTO checks SELECT a, b, c FROM abcde
----
insert checks
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── abcde.a:6 => checks.a:1
 │    ├── abcde.b:7 => checks.b:2
 │    ├── abcde.c:8 => checks.c:3
 │    └── column13:13 => checks.d:4
 ├── check columns: check1:14 check2:15
 └── project
      ├── columns: check1:14 check2:15!null abcde.a:6!null abcde.b:7 abcde.c:8 column13:13
      ├── project
      │    ├── columns: column13:13 abcde.a:6!null abcde.b:7 abcde.c:8
      │    ├── project
      │    │    ├── columns: abcde.a:6!null abcde.b:7 abcde.c:8
      │    │    └── scan abcde
      │    │         ├── columns: abcde.a:6!null abcde.b:7 abcde.c:8 abcde.d:9 e:10 rowid:11!null abcde.crdb_internal_mvcc_timestamp:12
      │    │         └── computed column expressions
      │    │              ├── abcde.d:9
      │    │              │    └── (abcde.b:7 + abcde.c:8) + 1
      │    │              └── e:10
      │    │                   └── abcde.a:6
      │    └── projections
      │         └── abcde.c:8 + 1 [as=column13:13]
      └── projections
           ├── abcde.b:7 < column13:13 [as=check1:14]
           └── abcde.a:6 > 0 [as=check2:15]

# ------------------------------------------------------------------------------
# Test decimal column rounding.
# ------------------------------------------------------------------------------

build
INSERT INTO decimals (a, b) VALUES (1.1, ARRAY[0.95, NULL, 15])
----
insert decimals
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── a:9 => decimals.a:1
 │    ├── b:10 => decimals.b:2
 │    ├── c:11 => decimals.c:3
 │    └── d:13 => decimals.d:4
 ├── check columns: check1:14 check2:15
 └── project
      ├── columns: check1:14 check2:15 a:9 b:10 c:11 d:13
      ├── project
      │    ├── columns: d:13 a:9 b:10 c:11
      │    ├── project
      │    │    ├── columns: column12:12 a:9 b:10 c:11
      │    │    ├── project
      │    │    │    ├── columns: a:9 b:10 c:11
      │    │    │    ├── project
      │    │    │    │    ├── columns: column8:8!null column1:6!null column2:7
      │    │    │    │    ├── values
      │    │    │    │    │    ├── columns: column1:6!null column2:7
      │    │    │    │    │    └── (1.1, ARRAY[0.95,NULL,15])
      │    │    │    │    └── projections
      │    │    │    │         └── 1.23 [as=column8:8]
      │    │    │    └── projections
      │    │    │         ├── crdb_internal.round_decimal_values(column1:6, 0) [as=a:9]
      │    │    │         ├── crdb_internal.round_decimal_values(column2:7, 1) [as=b:10]
      │    │    │         └── crdb_internal.round_decimal_values(column8:8, 1) [as=c:11]
      │    │    └── projections
      │    │         └── a:9 + c:11 [as=column12:12]
      │    └── projections
      │         └── crdb_internal.round_decimal_values(column12:12, 1) [as=d:13]
      └── projections
           ├── round(a:9) = a:9 [as=check1:14]
           └── b:10[0] > 1 [as=check2:15]

# Regression test for #38293; the default values should be separate projections.
exec-ddl
CREATE TABLE defvals (
    id SERIAL NOT NULL PRIMARY KEY,
    arr1 STRING(100) ARRAY NOT NULL DEFAULT ARRAY[],
    arr2 INT ARRAY NOT NULL DEFAULT ARRAY[]
)
----

build
INSERT INTO defvals(id) VALUES (1)
----
insert defvals
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:5 => id:1
 │    ├── column6:6 => arr1:2
 │    └── column7:7 => arr2:3
 └── project
      ├── columns: column6:6!null column7:7!null column1:5!null
      ├── values
      │    ├── columns: column1:5!null
      │    └── (1,)
      └── projections
           ├── ARRAY[] [as=column6:6]
           └── ARRAY[] [as=column7:7]

exec-ddl
CREATE TABLE defvals2 (
    id SERIAL NOT NULL PRIMARY KEY,
    arr1 STRING(100) ARRAY NOT NULL DEFAULT ARRAY[NULL],
    arr2 INT ARRAY NOT NULL DEFAULT ARRAY[NULL]
)
----

build
INSERT INTO defvals2(id) VALUES (1)
----
insert defvals2
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:5 => id:1
 │    ├── column6:6 => arr1:2
 │    └── column7:7 => arr2:3
 └── project
      ├── columns: column6:6 column7:7 column1:5!null
      ├── values
      │    ├── columns: column1:5!null
      │    └── (1,)
      └── projections
           ├── ARRAY[NULL] [as=column6:6]
           └── ARRAY[NULL] [as=column7:7]
