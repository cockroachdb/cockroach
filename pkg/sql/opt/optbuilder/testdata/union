# tests adapted from logictest -- union

build
VALUES (1), (1), (1), (2), (2) UNION VALUES (1), (3), (1)
----
union
 ├── columns: column1:3!null
 ├── left columns: column1:1
 ├── right columns: column1:2
 ├── values
 │    ├── columns: column1:1!null
 │    ├── (1,)
 │    ├── (1,)
 │    ├── (1,)
 │    ├── (2,)
 │    └── (2,)
 └── values
      ├── columns: column1:2!null
      ├── (1,)
      ├── (3,)
      └── (1,)

build
VALUES (1), (1), (1), (2), (2) UNION ALL VALUES (1), (3), (1)
----
union-all
 ├── columns: column1:3!null
 ├── left columns: column1:1
 ├── right columns: column1:2
 ├── values
 │    ├── columns: column1:1!null
 │    ├── (1,)
 │    ├── (1,)
 │    ├── (1,)
 │    ├── (2,)
 │    └── (2,)
 └── values
      ├── columns: column1:2!null
      ├── (1,)
      ├── (3,)
      └── (1,)

build
VALUES (1), (1), (1), (2), (2) INTERSECT VALUES (1), (3), (1)
----
intersect
 ├── columns: column1:1!null
 ├── left columns: column1:1!null
 ├── right columns: column1:2
 ├── values
 │    ├── columns: column1:1!null
 │    ├── (1,)
 │    ├── (1,)
 │    ├── (1,)
 │    ├── (2,)
 │    └── (2,)
 └── values
      ├── columns: column1:2!null
      ├── (1,)
      ├── (3,)
      └── (1,)

build
VALUES (1), (1), (1), (2), (2) INTERSECT ALL VALUES (1), (3), (1)
----
intersect-all
 ├── columns: column1:1!null
 ├── left columns: column1:1!null
 ├── right columns: column1:2
 ├── values
 │    ├── columns: column1:1!null
 │    ├── (1,)
 │    ├── (1,)
 │    ├── (1,)
 │    ├── (2,)
 │    └── (2,)
 └── values
      ├── columns: column1:2!null
      ├── (1,)
      ├── (3,)
      └── (1,)

build
VALUES (1), (1), (1), (2), (2) EXCEPT VALUES (1), (3), (1)
----
except
 ├── columns: column1:1!null
 ├── left columns: column1:1!null
 ├── right columns: column1:2
 ├── values
 │    ├── columns: column1:1!null
 │    ├── (1,)
 │    ├── (1,)
 │    ├── (1,)
 │    ├── (2,)
 │    └── (2,)
 └── values
      ├── columns: column1:2!null
      ├── (1,)
      ├── (3,)
      └── (1,)

build
VALUES (1), (1), (1), (2), (2) EXCEPT ALL VALUES (1), (3), (1)
----
except-all
 ├── columns: column1:1!null
 ├── left columns: column1:1!null
 ├── right columns: column1:2
 ├── values
 │    ├── columns: column1:1!null
 │    ├── (1,)
 │    ├── (1,)
 │    ├── (1,)
 │    ├── (2,)
 │    └── (2,)
 └── values
      ├── columns: column1:2!null
      ├── (1,)
      ├── (3,)
      └── (1,)

build
VALUES (1, 2), (1, 1), (1, 2), (2, 1), (2, 1) UNION VALUES (1, 3), (3, 4), (1, 1)
----
union
 ├── columns: column1:5!null column2:6!null
 ├── left columns: column1:1 column2:2
 ├── right columns: column1:3 column2:4
 ├── values
 │    ├── columns: column1:1!null column2:2!null
 │    ├── (1, 2)
 │    ├── (1, 1)
 │    ├── (1, 2)
 │    ├── (2, 1)
 │    └── (2, 1)
 └── values
      ├── columns: column1:3!null column2:4!null
      ├── (1, 3)
      ├── (3, 4)
      └── (1, 1)

build
(VALUES (1), (1), (1), (2), (2) UNION ALL VALUES (1), (3), (1)) ORDER BY 1 DESC LIMIT 2
----
limit
 ├── columns: column1:3!null
 ├── internal-ordering: -3
 ├── ordering: -3
 ├── sort
 │    ├── columns: column1:3!null
 │    ├── ordering: -3
 │    ├── limit hint: 2.00
 │    └── union-all
 │         ├── columns: column1:3!null
 │         ├── left columns: column1:1
 │         ├── right columns: column1:2
 │         ├── values
 │         │    ├── columns: column1:1!null
 │         │    ├── (1,)
 │         │    ├── (1,)
 │         │    ├── (1,)
 │         │    ├── (2,)
 │         │    └── (2,)
 │         └── values
 │              ├── columns: column1:2!null
 │              ├── (1,)
 │              ├── (3,)
 │              └── (1,)
 └── 2

# The ORDER BY and LIMIT apply to the UNION, not the last VALUES.
build
VALUES (1), (1), (1), (2), (2) UNION ALL VALUES (1), (3), (1) ORDER BY 1 DESC LIMIT 2
----
limit
 ├── columns: column1:3!null
 ├── internal-ordering: -3
 ├── ordering: -3
 ├── sort
 │    ├── columns: column1:3!null
 │    ├── ordering: -3
 │    ├── limit hint: 2.00
 │    └── union-all
 │         ├── columns: column1:3!null
 │         ├── left columns: column1:1
 │         ├── right columns: column1:2
 │         ├── values
 │         │    ├── columns: column1:1!null
 │         │    ├── (1,)
 │         │    ├── (1,)
 │         │    ├── (1,)
 │         │    ├── (2,)
 │         │    └── (2,)
 │         └── values
 │              ├── columns: column1:2!null
 │              ├── (1,)
 │              ├── (3,)
 │              └── (1,)
 └── 2

# UNION with NULL columns in operands works.
build
VALUES (NULL) UNION ALL VALUES (1) ORDER BY 1
----
sort
 ├── columns: column1:4
 ├── ordering: +4
 └── union-all
      ├── columns: column1:4
      ├── left columns: column1:3
      ├── right columns: column1:2
      ├── project
      │    ├── columns: column1:3
      │    ├── values
      │    │    ├── columns: column1:1
      │    │    └── (NULL,)
      │    └── projections
      │         └── column1:1::INT8 [as=column1:3]
      └── values
           ├── columns: column1:2!null
           └── (1,)

build
VALUES (NULL) UNION ALL VALUES (NULL)
----
union-all
 ├── columns: column1:3
 ├── left columns: column1:1
 ├── right columns: column1:2
 ├── values
 │    ├── columns: column1:1
 │    └── (NULL,)
 └── values
      ├── columns: column1:2
      └── (NULL,)

build
SELECT x, pg_typeof(y) FROM (SELECT 1 AS a, NULL AS b UNION ALL SELECT 2 AS a, 4 AS b) AS t(x, y)
----
project
 ├── columns: x:6!null pg_typeof:8
 ├── union-all
 │    ├── columns: a:6!null b:7
 │    ├── left columns: a:1 b:5
 │    ├── right columns: a:3 b:4
 │    ├── project
 │    │    ├── columns: b:5 a:1!null
 │    │    ├── project
 │    │    │    ├── columns: a:1!null b:2
 │    │    │    ├── values
 │    │    │    │    └── ()
 │    │    │    └── projections
 │    │    │         ├── 1 [as=a:1]
 │    │    │         └── NULL [as=b:2]
 │    │    └── projections
 │    │         └── b:2::INT8 [as=b:5]
 │    └── project
 │         ├── columns: a:3!null b:4!null
 │         ├── values
 │         │    └── ()
 │         └── projections
 │              ├── 2 [as=a:3]
 │              └── 4 [as=b:4]
 └── projections
      └── pg_typeof(b:7) [as=pg_typeof:8]

build
SELECT x, pg_typeof(y) FROM (SELECT 1 AS a, 3 AS b UNION ALL SELECT 2 AS a, NULL AS b) AS t(x, y)
----
project
 ├── columns: x:5!null pg_typeof:7
 ├── union-all
 │    ├── columns: a:5!null b:6
 │    ├── left columns: a:1 b:2
 │    ├── right columns: a:3 b:4
 │    ├── project
 │    │    ├── columns: a:1!null b:2!null
 │    │    ├── values
 │    │    │    └── ()
 │    │    └── projections
 │    │         ├── 1 [as=a:1]
 │    │         └── 3 [as=b:2]
 │    └── project
 │         ├── columns: a:3!null b:4
 │         ├── values
 │         │    └── ()
 │         └── projections
 │              ├── 2 [as=a:3]
 │              └── NULL::INT8 [as=b:4]
 └── projections
      └── pg_typeof(b:6) [as=pg_typeof:7]

exec-ddl
CREATE TABLE uniontest (
  k INT,
  v INT
)
----

build
SELECT v FROM uniontest WHERE k = 1 UNION SELECT v FROM uniontest WHERE k = 2
----
union
 ├── columns: v:7
 ├── left columns: uniontest.v:2
 ├── right columns: uniontest.v:5
 ├── project
 │    ├── columns: uniontest.v:2
 │    └── select
 │         ├── columns: k:1!null uniontest.v:2 rowid:3!null
 │         ├── scan uniontest
 │         │    └── columns: k:1 uniontest.v:2 rowid:3!null
 │         └── filters
 │              └── k:1 = 1
 └── project
      ├── columns: uniontest.v:5
      └── select
           ├── columns: k:4!null uniontest.v:5 rowid:6!null
           ├── scan uniontest
           │    └── columns: k:4 uniontest.v:5 rowid:6!null
           └── filters
                └── k:4 = 2

build
SELECT v FROM uniontest WHERE k = 1 UNION ALL SELECT v FROM uniontest WHERE k = 2
----
union-all
 ├── columns: v:7
 ├── left columns: uniontest.v:2
 ├── right columns: uniontest.v:5
 ├── project
 │    ├── columns: uniontest.v:2
 │    └── select
 │         ├── columns: k:1!null uniontest.v:2 rowid:3!null
 │         ├── scan uniontest
 │         │    └── columns: k:1 uniontest.v:2 rowid:3!null
 │         └── filters
 │              └── k:1 = 1
 └── project
      ├── columns: uniontest.v:5
      └── select
           ├── columns: k:4!null uniontest.v:5 rowid:6!null
           ├── scan uniontest
           │    └── columns: k:4 uniontest.v:5 rowid:6!null
           └── filters
                └── k:4 = 2

build
SELECT v FROM uniontest WHERE k = 1 INTERSECT SELECT v FROM uniontest WHERE k = 2
----
intersect
 ├── columns: v:2
 ├── left columns: v:2
 ├── right columns: v:5
 ├── project
 │    ├── columns: v:2
 │    └── select
 │         ├── columns: k:1!null v:2 rowid:3!null
 │         ├── scan uniontest
 │         │    └── columns: k:1 v:2 rowid:3!null
 │         └── filters
 │              └── k:1 = 1
 └── project
      ├── columns: v:5
      └── select
           ├── columns: k:4!null v:5 rowid:6!null
           ├── scan uniontest
           │    └── columns: k:4 v:5 rowid:6!null
           └── filters
                └── k:4 = 2

build
SELECT v FROM uniontest WHERE k = 1 INTERSECT ALL SELECT v FROM uniontest WHERE k = 2
----
intersect-all
 ├── columns: v:2
 ├── left columns: v:2
 ├── right columns: v:5
 ├── project
 │    ├── columns: v:2
 │    └── select
 │         ├── columns: k:1!null v:2 rowid:3!null
 │         ├── scan uniontest
 │         │    └── columns: k:1 v:2 rowid:3!null
 │         └── filters
 │              └── k:1 = 1
 └── project
      ├── columns: v:5
      └── select
           ├── columns: k:4!null v:5 rowid:6!null
           ├── scan uniontest
           │    └── columns: k:4 v:5 rowid:6!null
           └── filters
                └── k:4 = 2

build
SELECT v FROM uniontest WHERE k = 1 EXCEPT SELECT v FROM uniontest WHERE k = 2
----
except
 ├── columns: v:2
 ├── left columns: v:2
 ├── right columns: v:5
 ├── project
 │    ├── columns: v:2
 │    └── select
 │         ├── columns: k:1!null v:2 rowid:3!null
 │         ├── scan uniontest
 │         │    └── columns: k:1 v:2 rowid:3!null
 │         └── filters
 │              └── k:1 = 1
 └── project
      ├── columns: v:5
      └── select
           ├── columns: k:4!null v:5 rowid:6!null
           ├── scan uniontest
           │    └── columns: k:4 v:5 rowid:6!null
           └── filters
                └── k:4 = 2

build
SELECT v FROM uniontest WHERE k = 1 EXCEPT ALL SELECT v FROM uniontest WHERE k = 2
----
except-all
 ├── columns: v:2
 ├── left columns: v:2
 ├── right columns: v:5
 ├── project
 │    ├── columns: v:2
 │    └── select
 │         ├── columns: k:1!null v:2 rowid:3!null
 │         ├── scan uniontest
 │         │    └── columns: k:1 v:2 rowid:3!null
 │         └── filters
 │              └── k:1 = 1
 └── project
      ├── columns: v:5
      └── select
           ├── columns: k:4!null v:5 rowid:6!null
           ├── scan uniontest
           │    └── columns: k:4 v:5 rowid:6!null
           └── filters
                └── k:4 = 2

build
(SELECT v FROM uniontest WHERE k = 1 UNION ALL SELECT v FROM uniontest WHERE k = 2) ORDER BY 1 DESC LIMIT 2
----
limit
 ├── columns: v:7
 ├── internal-ordering: -7
 ├── ordering: -7
 ├── sort
 │    ├── columns: v:7
 │    ├── ordering: -7
 │    ├── limit hint: 2.00
 │    └── union-all
 │         ├── columns: v:7
 │         ├── left columns: uniontest.v:2
 │         ├── right columns: uniontest.v:5
 │         ├── project
 │         │    ├── columns: uniontest.v:2
 │         │    └── select
 │         │         ├── columns: k:1!null uniontest.v:2 rowid:3!null
 │         │         ├── scan uniontest
 │         │         │    └── columns: k:1 uniontest.v:2 rowid:3!null
 │         │         └── filters
 │         │              └── k:1 = 1
 │         └── project
 │              ├── columns: uniontest.v:5
 │              └── select
 │                   ├── columns: k:4!null uniontest.v:5 rowid:6!null
 │                   ├── scan uniontest
 │                   │    └── columns: k:4 uniontest.v:5 rowid:6!null
 │                   └── filters
 │                        └── k:4 = 2
 └── 2

# The ORDER BY and LIMIT apply to the UNION, not the last SELECT.
build
SELECT v FROM uniontest WHERE k = 1 UNION ALL SELECT v FROM uniontest WHERE k = 2 ORDER BY 1 DESC LIMIT 2
----
limit
 ├── columns: v:7
 ├── internal-ordering: -7
 ├── ordering: -7
 ├── sort
 │    ├── columns: v:7
 │    ├── ordering: -7
 │    ├── limit hint: 2.00
 │    └── union-all
 │         ├── columns: v:7
 │         ├── left columns: uniontest.v:2
 │         ├── right columns: uniontest.v:5
 │         ├── project
 │         │    ├── columns: uniontest.v:2
 │         │    └── select
 │         │         ├── columns: k:1!null uniontest.v:2 rowid:3!null
 │         │         ├── scan uniontest
 │         │         │    └── columns: k:1 uniontest.v:2 rowid:3!null
 │         │         └── filters
 │         │              └── k:1 = 1
 │         └── project
 │              ├── columns: uniontest.v:5
 │              └── select
 │                   ├── columns: k:4!null uniontest.v:5 rowid:6!null
 │                   ├── scan uniontest
 │                   │    └── columns: k:4 uniontest.v:5 rowid:6!null
 │                   └── filters
 │                        └── k:4 = 2
 └── 2

build
SELECT v FROM uniontest UNION SELECT k FROM uniontest
----
union
 ├── columns: v:7
 ├── left columns: uniontest.v:2
 ├── right columns: k:4
 ├── project
 │    ├── columns: uniontest.v:2
 │    └── scan uniontest
 │         └── columns: k:1 uniontest.v:2 rowid:3!null
 └── project
      ├── columns: k:4
      └── scan uniontest
           └── columns: k:4 uniontest.v:5 rowid:6!null

build
SELECT v FROM uniontest UNION ALL SELECT k FROM uniontest
----
union-all
 ├── columns: v:7
 ├── left columns: uniontest.v:2
 ├── right columns: k:4
 ├── project
 │    ├── columns: uniontest.v:2
 │    └── scan uniontest
 │         └── columns: k:1 uniontest.v:2 rowid:3!null
 └── project
      ├── columns: k:4
      └── scan uniontest
           └── columns: k:4 uniontest.v:5 rowid:6!null

build
SELECT * FROM (SELECT * FROM (VALUES (1)) a LEFT JOIN (VALUES (1) UNION VALUES (2)) b on a.column1 = b.column1);
----
left-join (hash)
 ├── columns: column1:1!null column1:4
 ├── values
 │    ├── columns: column1:1!null
 │    └── (1,)
 ├── union
 │    ├── columns: column1:4!null
 │    ├── left columns: column1:2
 │    ├── right columns: column1:3
 │    ├── values
 │    │    ├── columns: column1:2!null
 │    │    └── (1,)
 │    └── values
 │         ├── columns: column1:3!null
 │         └── (2,)
 └── filters
      └── column1:1 = column1:4

build
SELECT * FROM (VALUES (1)) a LEFT JOIN (VALUES (1) UNION VALUES (2)) b on a.column1 = b.column1;
----
left-join (hash)
 ├── columns: column1:1!null column1:4
 ├── values
 │    ├── columns: column1:1!null
 │    └── (1,)
 ├── union
 │    ├── columns: column1:4!null
 │    ├── left columns: column1:2
 │    ├── right columns: column1:3
 │    ├── values
 │    │    ├── columns: column1:2!null
 │    │    └── (1,)
 │    └── values
 │         ├── columns: column1:3!null
 │         └── (2,)
 └── filters
      └── column1:1 = column1:4

build
SELECT 1, 2 UNION SELECT 3
----
error (42601): each UNION query must have the same number of columns: 2 vs 1

build
SELECT 1, 2 INTERSECT SELECT 3
----
error (42601): each INTERSECT query must have the same number of columns: 2 vs 1

build
SELECT 1, 2 EXCEPT SELECT 3
----
error (42601): each EXCEPT query must have the same number of columns: 2 vs 1

build
SELECT 1 UNION SELECT '3'
----
union
 ├── columns: "?column?":3!null
 ├── left columns: "?column?":1
 ├── right columns: "?column?":2
 ├── project
 │    ├── columns: "?column?":1!null
 │    ├── values
 │    │    └── ()
 │    └── projections
 │         └── 1 [as="?column?":1]
 └── project
      ├── columns: "?column?":2!null
      ├── values
      │    └── ()
      └── projections
           └── 3 [as="?column?":2]

build
SELECT 1 INTERSECT SELECT '3'
----
intersect
 ├── columns: "?column?":1!null
 ├── left columns: "?column?":1!null
 ├── right columns: "?column?":2
 ├── project
 │    ├── columns: "?column?":1!null
 │    ├── values
 │    │    └── ()
 │    └── projections
 │         └── 1 [as="?column?":1]
 └── project
      ├── columns: "?column?":2!null
      ├── values
      │    └── ()
      └── projections
           └── 3 [as="?column?":2]

build
SELECT 1 EXCEPT SELECT '3'
----
except
 ├── columns: "?column?":1!null
 ├── left columns: "?column?":1!null
 ├── right columns: "?column?":2
 ├── project
 │    ├── columns: "?column?":1!null
 │    ├── values
 │    │    └── ()
 │    └── projections
 │         └── 1 [as="?column?":1]
 └── project
      ├── columns: "?column?":2!null
      ├── values
      │    └── ()
      └── projections
           └── 3 [as="?column?":2]

build
SELECT 1 UNION SELECT 3 ORDER BY z
----
error (42703): column "z" does not exist

build
SELECT ARRAY[1] UNION ALL SELECT ARRAY['foo']
----
error (22P02): could not parse "foo" as type int: strconv.ParseInt: parsing "foo": invalid syntax

build
SELECT ARRAY['foo'] UNION ALL SELECT ARRAY[1]
----
error (42804): UNION types string[] and int[] cannot be matched

build
SELECT ARRAY[1] UNION ALL SELECT ARRAY[1.2]
----
error (42804): UNION types int[] and decimal[] cannot be matched

exec-ddl
CREATE TABLE t.xy (x STRING NOT NULL, y STRING NOT NULL)
----

exec-ddl
CREATE TABLE t.abc (
  a string,
  b string NOT NULL,
  c string NOT NULL
)
----

build
(SELECT x, x, y FROM xy) UNION (SELECT a, b, c FROM abc)
----
union
 ├── columns: x:8 x:9!null y:10!null
 ├── left columns: xy.x:1 xy.x:1 xy.y:2
 ├── right columns: a:4 b:5 c:6
 ├── project
 │    ├── columns: xy.x:1!null xy.y:2!null
 │    └── scan xy
 │         └── columns: xy.x:1!null xy.y:2!null xy.rowid:3!null
 └── project
      ├── columns: a:4 b:5!null c:6!null
      └── scan abc
           └── columns: a:4 b:5!null c:6!null abc.rowid:7!null

build
(SELECT a FROM abc ORDER BY b) UNION ALL (SELECT b FROM abc) ORDER BY a
----
sort
 ├── columns: a:9
 ├── ordering: +9
 └── union-all
      ├── columns: a:9
      ├── left columns: abc.a:1
      ├── right columns: b:6
      ├── project
      │    ├── columns: abc.a:1 b:2!null
      │    └── scan abc
      │         └── columns: abc.a:1 b:2!null c:3!null rowid:4!null
      └── project
           ├── columns: b:6!null
           └── scan abc
                └── columns: abc.a:5 b:6!null c:7!null rowid:8!null

build
(SELECT a FROM abc ORDER BY b) UNION ALL (SELECT a FROM abc ORDER BY c) ORDER BY a
----
sort
 ├── columns: a:9
 ├── ordering: +9
 └── union-all
      ├── columns: a:9
      ├── left columns: abc.a:1
      ├── right columns: abc.a:5
      ├── project
      │    ├── columns: abc.a:1 b:2!null
      │    └── scan abc
      │         └── columns: abc.a:1 b:2!null c:3!null rowid:4!null
      └── project
           ├── columns: abc.a:5 c:7!null
           └── scan abc
                └── columns: abc.a:5 b:6!null c:7!null rowid:8!null

build
(SELECT a FROM abc ORDER BY b) EXCEPT (SELECT b FROM abc ORDER BY c, b, a)
----
except
 ├── columns: a:1
 ├── left columns: a:1
 ├── right columns: b:6
 ├── project
 │    ├── columns: a:1 b:2!null
 │    └── scan abc
 │         └── columns: a:1 b:2!null c:3!null rowid:4!null
 └── project
      ├── columns: a:5 b:6!null c:7!null
      └── scan abc
           └── columns: a:5 b:6!null c:7!null rowid:8!null

# Tests for type propagation.

build
VALUES (NULL, NULL), (NULL, 'x') UNION VALUES (1, 'a'), (2, 'b')
----
union
 ├── columns: column1:6 column2:7
 ├── left columns: column1:5 column2:2
 ├── right columns: column1:3 column2:4
 ├── project
 │    ├── columns: column1:5 column2:2
 │    ├── values
 │    │    ├── columns: column1:1 column2:2
 │    │    ├── (NULL, NULL::STRING)
 │    │    └── (NULL, 'x')
 │    └── projections
 │         └── column1:1::INT8 [as=column1:5]
 └── values
      ├── columns: column1:3!null column2:4!null
      ├── (1, 'a')
      └── (2, 'b')

build
VALUES (3, NULL), (NULL, 'x') INTERSECT VALUES (1, NULL), (2, NULL)
----
intersect
 ├── columns: column1:1 column2:2
 ├── left columns: column1:1 column2:2
 ├── right columns: column1:3 column2:4
 ├── values
 │    ├── columns: column1:1 column2:2
 │    ├── (3, NULL::STRING)
 │    └── (NULL::INT8, 'x')
 └── values
      ├── columns: column1:3!null column2:4
      ├── (1, NULL::STRING)
      └── (2, NULL::STRING)

build
VALUES (NULL, NULL), (NULL, 'x') UNION ALL VALUES (1, NULL), (2, NULL)
----
union-all
 ├── columns: column1:6 column2:7
 ├── left columns: column1:5 column2:2
 ├── right columns: column1:3 column2:4
 ├── project
 │    ├── columns: column1:5 column2:2
 │    ├── values
 │    │    ├── columns: column1:1 column2:2
 │    │    ├── (NULL, NULL::STRING)
 │    │    └── (NULL, 'x')
 │    └── projections
 │         └── column1:1::INT8 [as=column1:5]
 └── values
      ├── columns: column1:3!null column2:4
      ├── (1, NULL::STRING)
      └── (2, NULL::STRING)

build
VALUES (NULL, NULL), (NULL, NULL) UNION ALL VALUES (NULL, NULL), (NULL, NULL)
----
union-all
 ├── columns: column1:5 column2:6
 ├── left columns: column1:1 column2:2
 ├── right columns: column1:3 column2:4
 ├── values
 │    ├── columns: column1:1 column2:2
 │    ├── (NULL, NULL)
 │    └── (NULL, NULL)
 └── values
      ├── columns: column1:3 column2:4
      ├── (NULL, NULL)
      └── (NULL, NULL)

exec-ddl
CREATE TABLE a (a INT PRIMARY KEY)
----

# Regression test for #34524.
build
(SELECT NULL FROM a) EXCEPT (VALUES((SELECT 1 FROM a LIMIT 1)), (1))
----
except
 ├── columns: "?column?":6
 ├── left columns: "?column?":6
 ├── right columns: column1:5
 ├── project
 │    ├── columns: "?column?":6
 │    ├── project
 │    │    ├── columns: "?column?":2
 │    │    ├── scan a
 │    │    │    └── columns: a:1!null
 │    │    └── projections
 │    │         └── NULL [as="?column?":2]
 │    └── projections
 │         └── "?column?":2::INT8 [as="?column?":6]
 └── values
      ├── columns: column1:5
      ├── tuple
      │    └── subquery
      │         └── max1-row
      │              ├── columns: "?column?":4!null
      │              └── limit
      │                   ├── columns: "?column?":4!null
      │                   ├── project
      │                   │    ├── columns: "?column?":4!null
      │                   │    ├── limit hint: 1.00
      │                   │    ├── scan a
      │                   │    │    ├── columns: a:3!null
      │                   │    │    └── limit hint: 1.00
      │                   │    └── projections
      │                   │         └── 1 [as="?column?":4]
      │                   └── 1
      └── (1,)
