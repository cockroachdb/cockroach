# tests adapted from logictest -- join

exec-ddl
CREATE TABLE onecolumn (x INT)
----
TABLE onecolumn
 ├── x int
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

build
SELECT * FROM onecolumn AS a(x) CROSS JOIN onecolumn AS b(y)
----
project
 ├── columns: x:1(int) y:3(int)
 ├── inner-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    └── true [type=bool]
 └── projections
      ├── variable: onecolumn.x [type=int]
      └── variable: onecolumn.x [type=int]

# Check that name resolution chokes on ambiguity when it needs to.
build
SELECT x FROM onecolumn AS a, onecolumn AS b
----
error: column reference "x" is ambiguous (candidates: a.x, b.x)

# Check that name resolution does not choke on ambiguity if an
# unqualified column name is requested and there is an anonymous
# source providing this name in addition to two or more named sources
# that also provide it.
build
SELECT x FROM (SELECT 1 AS x), onecolumn AS a, onecolumn AS b
----
project
 ├── columns: x:1(int)
 ├── inner-join
 │    ├── columns: x:1(int) onecolumn.x:2(int) onecolumn.rowid:3(int!null) onecolumn.x:4(int) onecolumn.rowid:5(int!null)
 │    ├── inner-join
 │    │    ├── columns: x:1(int) onecolumn.x:2(int) onecolumn.rowid:3(int!null)
 │    │    ├── project
 │    │    │    ├── columns: x:1(int)
 │    │    │    ├── values
 │    │    │    │    └── tuple [type=tuple{}]
 │    │    │    └── projections
 │    │    │         └── const: 1 [type=int]
 │    │    ├── scan onecolumn
 │    │    │    └── columns: onecolumn.x:2(int) onecolumn.rowid:3(int!null)
 │    │    └── true [type=bool]
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:4(int) onecolumn.rowid:5(int!null)
 │    └── true [type=bool]
 └── projections
      └── variable: x [type=int]

build
SELECT * FROM onecolumn AS a(x) JOIN onecolumn AS b(y) ON a.x = b.y
----
project
 ├── columns: x:1(int) y:3(int)
 ├── inner-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: onecolumn.x [type=int]
 └── projections
      ├── variable: onecolumn.x [type=int]
      └── variable: onecolumn.x [type=int]

build
SELECT * FROM onecolumn AS a JOIN onecolumn as b USING(x) ORDER BY x
----
sort
 ├── columns: x:1(int)
 ├── ordering: +1
 └── project
      ├── columns: onecolumn.x:1(int)
      ├── inner-join
      │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) onecolumn.x:3(int) onecolumn.rowid:4(int!null)
      │    ├── scan onecolumn
      │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
      │    ├── scan onecolumn
      │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
      │    └── eq [type=bool]
      │         ├── variable: onecolumn.x [type=int]
      │         └── variable: onecolumn.x [type=int]
      └── projections
           └── variable: onecolumn.x [type=int]

build
SELECT * FROM onecolumn AS a NATURAL JOIN onecolumn as b
----
project
 ├── columns: x:1(int)
 ├── inner-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: onecolumn.x [type=int]
 └── projections
      └── variable: onecolumn.x [type=int]

build
SELECT * FROM onecolumn AS a(x) LEFT OUTER JOIN onecolumn AS b(y) ON a.x = b.y
----
project
 ├── columns: x:1(int) y:3(int)
 ├── left-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) onecolumn.x:3(int) onecolumn.rowid:4(int)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: onecolumn.x [type=int]
 └── projections
      ├── variable: onecolumn.x [type=int]
      └── variable: onecolumn.x [type=int]

build
SELECT * FROM onecolumn AS a LEFT OUTER JOIN onecolumn AS b USING(x) ORDER BY x
----
sort
 ├── columns: x:1(int)
 ├── ordering: +1
 └── project
      ├── columns: onecolumn.x:1(int)
      ├── left-join
      │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) onecolumn.x:3(int) onecolumn.rowid:4(int)
      │    ├── scan onecolumn
      │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
      │    ├── scan onecolumn
      │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
      │    └── eq [type=bool]
      │         ├── variable: onecolumn.x [type=int]
      │         └── variable: onecolumn.x [type=int]
      └── projections
           └── variable: onecolumn.x [type=int]

# Check that ORDER BY chokes on ambiguity if no table less columns
# were introduced by USING. (#12239)
# TODO(rytaft): This is a bug. This query is invalid.
build
SELECT * FROM onecolumn AS a, onecolumn AS b ORDER BY x
----
sort
 ├── columns: x:1(int) x:3(int)
 ├── ordering: +1
 └── project
      ├── columns: onecolumn.x:1(int) onecolumn.x:3(int)
      ├── inner-join
      │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) onecolumn.x:3(int) onecolumn.rowid:4(int!null)
      │    ├── scan onecolumn
      │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
      │    ├── scan onecolumn
      │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
      │    └── true [type=bool]
      └── projections
           ├── variable: onecolumn.x [type=int]
           └── variable: onecolumn.x [type=int]

build
SELECT * FROM onecolumn AS a NATURAL LEFT OUTER JOIN onecolumn AS b
----
project
 ├── columns: x:1(int)
 ├── left-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) onecolumn.x:3(int) onecolumn.rowid:4(int)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: onecolumn.x [type=int]
 └── projections
      └── variable: onecolumn.x [type=int]

build
SELECT * FROM onecolumn AS a(x) RIGHT OUTER JOIN onecolumn AS b(y) ON a.x = b.y
----
project
 ├── columns: x:1(int) y:3(int)
 ├── right-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int) onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: onecolumn.x [type=int]
 └── projections
      ├── variable: onecolumn.x [type=int]
      └── variable: onecolumn.x [type=int]

build
SELECT * FROM onecolumn AS a RIGHT OUTER JOIN onecolumn AS b USING(x) ORDER BY x
----
sort
 ├── columns: x:3(int)
 ├── ordering: +3
 └── project
      ├── columns: onecolumn.x:3(int)
      ├── right-join
      │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int) onecolumn.x:3(int) onecolumn.rowid:4(int!null)
      │    ├── scan onecolumn
      │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
      │    ├── scan onecolumn
      │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
      │    └── eq [type=bool]
      │         ├── variable: onecolumn.x [type=int]
      │         └── variable: onecolumn.x [type=int]
      └── projections
           └── variable: onecolumn.x [type=int]

build
SELECT * FROM onecolumn AS a NATURAL RIGHT OUTER JOIN onecolumn AS b
----
project
 ├── columns: x:3(int)
 ├── right-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int) onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: onecolumn.x [type=int]
 └── projections
      └── variable: onecolumn.x [type=int]

exec-ddl
CREATE TABLE onecolumn_w(w INT)
----
TABLE onecolumn_w
 ├── w int
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

build
SELECT * FROM onecolumn AS a NATURAL JOIN onecolumn_w as b
----
project
 ├── columns: x:1(int) w:3(int)
 ├── inner-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) onecolumn_w.w:3(int) onecolumn_w.rowid:4(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan onecolumn_w
 │    │    └── columns: onecolumn_w.w:3(int) onecolumn_w.rowid:4(int!null)
 │    └── true [type=bool]
 └── projections
      ├── variable: onecolumn.x [type=int]
      └── variable: onecolumn_w.w [type=int]

exec-ddl
CREATE TABLE othercolumn (x INT)
----
TABLE othercolumn
 ├── x int
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

build
SELECT * FROM onecolumn AS a FULL OUTER JOIN othercolumn AS b ON a.x = b.x ORDER BY a.x,b.x
----
sort
 ├── columns: x:1(int) x:3(int)
 ├── ordering: +1,+3
 └── project
      ├── columns: onecolumn.x:1(int) othercolumn.x:3(int)
      ├── full-join
      │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int) othercolumn.x:3(int) othercolumn.rowid:4(int)
      │    ├── scan onecolumn
      │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
      │    ├── scan othercolumn
      │    │    └── columns: othercolumn.x:3(int) othercolumn.rowid:4(int!null)
      │    └── eq [type=bool]
      │         ├── variable: onecolumn.x [type=int]
      │         └── variable: othercolumn.x [type=int]
      └── projections
           ├── variable: onecolumn.x [type=int]
           └── variable: othercolumn.x [type=int]

build
SELECT * FROM onecolumn AS a FULL OUTER JOIN othercolumn AS b USING(x) ORDER BY x
----
sort
 ├── columns: x:5(int)
 ├── ordering: +5
 └── project
      ├── columns: x:5(int)
      ├── project
      │    ├── columns: x:5(int) onecolumn.x:1(int) onecolumn.rowid:2(int) othercolumn.x:3(int) othercolumn.rowid:4(int)
      │    ├── full-join
      │    │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int) othercolumn.x:3(int) othercolumn.rowid:4(int)
      │    │    ├── scan onecolumn
      │    │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
      │    │    ├── scan othercolumn
      │    │    │    └── columns: othercolumn.x:3(int) othercolumn.rowid:4(int!null)
      │    │    └── eq [type=bool]
      │    │         ├── variable: onecolumn.x [type=int]
      │    │         └── variable: othercolumn.x [type=int]
      │    └── projections
      │         ├── coalesce [type=int]
      │         │    ├── variable: onecolumn.x [type=int]
      │         │    └── variable: othercolumn.x [type=int]
      │         ├── variable: onecolumn.x [type=int]
      │         ├── variable: onecolumn.rowid [type=int]
      │         ├── variable: othercolumn.x [type=int]
      │         └── variable: othercolumn.rowid [type=int]
      └── projections
           └── variable: x [type=int]

# Check that the source columns can be selected separately from the
# USING column (#12033).
build
SELECT x AS s, a.x, b.x FROM onecolumn AS a FULL OUTER JOIN othercolumn AS b USING(x) ORDER BY s
----
sort
 ├── columns: s:5(int) x:1(int) x:3(int)
 ├── ordering: +5
 └── project
      ├── columns: x:5(int) onecolumn.x:1(int) othercolumn.x:3(int)
      ├── project
      │    ├── columns: x:5(int) onecolumn.x:1(int) onecolumn.rowid:2(int) othercolumn.x:3(int) othercolumn.rowid:4(int)
      │    ├── full-join
      │    │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int) othercolumn.x:3(int) othercolumn.rowid:4(int)
      │    │    ├── scan onecolumn
      │    │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
      │    │    ├── scan othercolumn
      │    │    │    └── columns: othercolumn.x:3(int) othercolumn.rowid:4(int!null)
      │    │    └── eq [type=bool]
      │    │         ├── variable: onecolumn.x [type=int]
      │    │         └── variable: othercolumn.x [type=int]
      │    └── projections
      │         ├── coalesce [type=int]
      │         │    ├── variable: onecolumn.x [type=int]
      │         │    └── variable: othercolumn.x [type=int]
      │         ├── variable: onecolumn.x [type=int]
      │         ├── variable: onecolumn.rowid [type=int]
      │         ├── variable: othercolumn.x [type=int]
      │         └── variable: othercolumn.rowid [type=int]
      └── projections
           ├── variable: x [type=int]
           ├── variable: onecolumn.x [type=int]
           └── variable: othercolumn.x [type=int]

build
SELECT * FROM onecolumn AS a NATURAL FULL OUTER JOIN othercolumn AS b ORDER BY x
----
sort
 ├── columns: x:5(int)
 ├── ordering: +5
 └── project
      ├── columns: x:5(int)
      ├── project
      │    ├── columns: x:5(int) onecolumn.x:1(int) onecolumn.rowid:2(int) othercolumn.x:3(int) othercolumn.rowid:4(int)
      │    ├── full-join
      │    │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int) othercolumn.x:3(int) othercolumn.rowid:4(int)
      │    │    ├── scan onecolumn
      │    │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
      │    │    ├── scan othercolumn
      │    │    │    └── columns: othercolumn.x:3(int) othercolumn.rowid:4(int!null)
      │    │    └── eq [type=bool]
      │    │         ├── variable: onecolumn.x [type=int]
      │    │         └── variable: othercolumn.x [type=int]
      │    └── projections
      │         ├── coalesce [type=int]
      │         │    ├── variable: onecolumn.x [type=int]
      │         │    └── variable: othercolumn.x [type=int]
      │         ├── variable: onecolumn.x [type=int]
      │         ├── variable: onecolumn.rowid [type=int]
      │         ├── variable: othercolumn.x [type=int]
      │         └── variable: othercolumn.rowid [type=int]
      └── projections
           └── variable: x [type=int]

# Check that a limit on the JOIN's result do not cause rows from the
# JOIN operands to become invisible to the JOIN.
build
SELECT * FROM (SELECT x FROM onecolumn ORDER BY x DESC) NATURAL JOIN (VALUES (42)) AS v(x) LIMIT 1
----
limit
 ├── columns: x:1(int)
 ├── project
 │    ├── columns: onecolumn.x:1(int)
 │    ├── inner-join
 │    │    ├── columns: onecolumn.x:1(int) column1:3(int)
 │    │    ├── project
 │    │    │    ├── columns: onecolumn.x:1(int)
 │    │    │    ├── scan onecolumn
 │    │    │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    │    │    └── projections
 │    │    │         └── variable: onecolumn.x [type=int]
 │    │    ├── values
 │    │    │    ├── columns: column1:3(int)
 │    │    │    └── tuple [type=tuple{int}]
 │    │    │         └── const: 42 [type=int]
 │    │    └── eq [type=bool]
 │    │         ├── variable: onecolumn.x [type=int]
 │    │         └── variable: column1 [type=int]
 │    └── projections
 │         └── variable: onecolumn.x [type=int]
 └── const: 1 [type=int]

exec-ddl
CREATE TABLE empty (x INT)
----
TABLE empty
 ├── x int
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

build
SELECT * FROM onecolumn AS a(x) CROSS JOIN empty AS b(y)
----
project
 ├── columns: x:1(int) y:3(int)
 ├── inner-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) empty.x:3(int) empty.rowid:4(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan empty
 │    │    └── columns: empty.x:3(int) empty.rowid:4(int!null)
 │    └── true [type=bool]
 └── projections
      ├── variable: onecolumn.x [type=int]
      └── variable: empty.x [type=int]

build
SELECT * FROM empty AS a CROSS JOIN onecolumn AS b
----
project
 ├── columns: x:1(int) x:3(int)
 ├── inner-join
 │    ├── columns: empty.x:1(int) empty.rowid:2(int!null) onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    ├── scan empty
 │    │    └── columns: empty.x:1(int) empty.rowid:2(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    └── true [type=bool]
 └── projections
      ├── variable: empty.x [type=int]
      └── variable: onecolumn.x [type=int]

build
SELECT * FROM onecolumn AS a(x) JOIN empty AS b(y) ON a.x = b.y
----
project
 ├── columns: x:1(int) y:3(int)
 ├── inner-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) empty.x:3(int) empty.rowid:4(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan empty
 │    │    └── columns: empty.x:3(int) empty.rowid:4(int!null)
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: empty.x [type=int]
 └── projections
      ├── variable: onecolumn.x [type=int]
      └── variable: empty.x [type=int]

build
SELECT * FROM onecolumn AS a JOIN empty AS b USING(x)
----
project
 ├── columns: x:1(int)
 ├── inner-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) empty.x:3(int) empty.rowid:4(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan empty
 │    │    └── columns: empty.x:3(int) empty.rowid:4(int!null)
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: empty.x [type=int]
 └── projections
      └── variable: onecolumn.x [type=int]

build
SELECT * FROM empty AS a(x) JOIN onecolumn AS b(y) ON a.x = b.y
----
project
 ├── columns: x:1(int) y:3(int)
 ├── inner-join
 │    ├── columns: empty.x:1(int) empty.rowid:2(int!null) onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    ├── scan empty
 │    │    └── columns: empty.x:1(int) empty.rowid:2(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    └── eq [type=bool]
 │         ├── variable: empty.x [type=int]
 │         └── variable: onecolumn.x [type=int]
 └── projections
      ├── variable: empty.x [type=int]
      └── variable: onecolumn.x [type=int]

build
SELECT * FROM empty AS a JOIN onecolumn AS b USING(x)
----
project
 ├── columns: x:1(int)
 ├── inner-join
 │    ├── columns: empty.x:1(int) empty.rowid:2(int!null) onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    ├── scan empty
 │    │    └── columns: empty.x:1(int) empty.rowid:2(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    └── eq [type=bool]
 │         ├── variable: empty.x [type=int]
 │         └── variable: onecolumn.x [type=int]
 └── projections
      └── variable: empty.x [type=int]

build
SELECT * FROM onecolumn AS a(x) LEFT OUTER JOIN empty AS b(y) ON a.x = b.y ORDER BY a.x
----
sort
 ├── columns: x:1(int) y:3(int)
 ├── ordering: +1
 └── project
      ├── columns: onecolumn.x:1(int) empty.x:3(int)
      ├── left-join
      │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) empty.x:3(int) empty.rowid:4(int)
      │    ├── scan onecolumn
      │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
      │    ├── scan empty
      │    │    └── columns: empty.x:3(int) empty.rowid:4(int!null)
      │    └── eq [type=bool]
      │         ├── variable: onecolumn.x [type=int]
      │         └── variable: empty.x [type=int]
      └── projections
           ├── variable: onecolumn.x [type=int]
           └── variable: empty.x [type=int]

build
SELECT * FROM onecolumn AS a LEFT OUTER JOIN empty AS b USING(x) ORDER BY x
----
sort
 ├── columns: x:1(int)
 ├── ordering: +1
 └── project
      ├── columns: onecolumn.x:1(int)
      ├── left-join
      │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) empty.x:3(int) empty.rowid:4(int)
      │    ├── scan onecolumn
      │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
      │    ├── scan empty
      │    │    └── columns: empty.x:3(int) empty.rowid:4(int!null)
      │    └── eq [type=bool]
      │         ├── variable: onecolumn.x [type=int]
      │         └── variable: empty.x [type=int]
      └── projections
           └── variable: onecolumn.x [type=int]

build
SELECT * FROM empty AS a(x) LEFT OUTER JOIN onecolumn AS b(y) ON a.x = b.y
----
project
 ├── columns: x:1(int) y:3(int)
 ├── left-join
 │    ├── columns: empty.x:1(int) empty.rowid:2(int!null) onecolumn.x:3(int) onecolumn.rowid:4(int)
 │    ├── scan empty
 │    │    └── columns: empty.x:1(int) empty.rowid:2(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    └── eq [type=bool]
 │         ├── variable: empty.x [type=int]
 │         └── variable: onecolumn.x [type=int]
 └── projections
      ├── variable: empty.x [type=int]
      └── variable: onecolumn.x [type=int]

build
SELECT * FROM empty AS a LEFT OUTER JOIN onecolumn AS b USING(x)
----
project
 ├── columns: x:1(int)
 ├── left-join
 │    ├── columns: empty.x:1(int) empty.rowid:2(int!null) onecolumn.x:3(int) onecolumn.rowid:4(int)
 │    ├── scan empty
 │    │    └── columns: empty.x:1(int) empty.rowid:2(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    └── eq [type=bool]
 │         ├── variable: empty.x [type=int]
 │         └── variable: onecolumn.x [type=int]
 └── projections
      └── variable: empty.x [type=int]

build
SELECT * FROM onecolumn AS a(x) RIGHT OUTER JOIN empty AS b(y) ON a.x = b.y
----
project
 ├── columns: x:1(int) y:3(int)
 ├── right-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int) empty.x:3(int) empty.rowid:4(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan empty
 │    │    └── columns: empty.x:3(int) empty.rowid:4(int!null)
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: empty.x [type=int]
 └── projections
      ├── variable: onecolumn.x [type=int]
      └── variable: empty.x [type=int]

build
SELECT * FROM onecolumn AS a RIGHT OUTER JOIN empty AS b USING(x)
----
project
 ├── columns: x:3(int)
 ├── right-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int) empty.x:3(int) empty.rowid:4(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan empty
 │    │    └── columns: empty.x:3(int) empty.rowid:4(int!null)
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: empty.x [type=int]
 └── projections
      └── variable: empty.x [type=int]

build
SELECT * FROM empty AS a(x) FULL OUTER JOIN onecolumn AS b(y) ON a.x = b.y ORDER BY b.y
----
sort
 ├── columns: x:1(int) y:3(int)
 ├── ordering: +3
 └── project
      ├── columns: empty.x:1(int) onecolumn.x:3(int)
      ├── full-join
      │    ├── columns: empty.x:1(int) empty.rowid:2(int) onecolumn.x:3(int) onecolumn.rowid:4(int)
      │    ├── scan empty
      │    │    └── columns: empty.x:1(int) empty.rowid:2(int!null)
      │    ├── scan onecolumn
      │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
      │    └── eq [type=bool]
      │         ├── variable: empty.x [type=int]
      │         └── variable: onecolumn.x [type=int]
      └── projections
           ├── variable: empty.x [type=int]
           └── variable: onecolumn.x [type=int]

build
SELECT * FROM empty AS a FULL OUTER JOIN onecolumn AS b USING(x) ORDER BY x
----
sort
 ├── columns: x:5(int)
 ├── ordering: +5
 └── project
      ├── columns: x:5(int)
      ├── project
      │    ├── columns: x:5(int) empty.x:1(int) empty.rowid:2(int) onecolumn.x:3(int) onecolumn.rowid:4(int)
      │    ├── full-join
      │    │    ├── columns: empty.x:1(int) empty.rowid:2(int) onecolumn.x:3(int) onecolumn.rowid:4(int)
      │    │    ├── scan empty
      │    │    │    └── columns: empty.x:1(int) empty.rowid:2(int!null)
      │    │    ├── scan onecolumn
      │    │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
      │    │    └── eq [type=bool]
      │    │         ├── variable: empty.x [type=int]
      │    │         └── variable: onecolumn.x [type=int]
      │    └── projections
      │         ├── coalesce [type=int]
      │         │    ├── variable: empty.x [type=int]
      │         │    └── variable: onecolumn.x [type=int]
      │         ├── variable: empty.x [type=int]
      │         ├── variable: empty.rowid [type=int]
      │         ├── variable: onecolumn.x [type=int]
      │         └── variable: onecolumn.rowid [type=int]
      └── projections
           └── variable: x [type=int]

build
SELECT * FROM onecolumn AS a(x) FULL OUTER JOIN empty AS b(y) ON a.x = b.y ORDER BY a.x
----
sort
 ├── columns: x:1(int) y:3(int)
 ├── ordering: +1
 └── project
      ├── columns: onecolumn.x:1(int) empty.x:3(int)
      ├── full-join
      │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int) empty.x:3(int) empty.rowid:4(int)
      │    ├── scan onecolumn
      │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
      │    ├── scan empty
      │    │    └── columns: empty.x:3(int) empty.rowid:4(int!null)
      │    └── eq [type=bool]
      │         ├── variable: onecolumn.x [type=int]
      │         └── variable: empty.x [type=int]
      └── projections
           ├── variable: onecolumn.x [type=int]
           └── variable: empty.x [type=int]

build
SELECT * FROM onecolumn AS a FULL OUTER JOIN empty AS b USING(x) ORDER BY x
----
sort
 ├── columns: x:5(int)
 ├── ordering: +5
 └── project
      ├── columns: x:5(int)
      ├── project
      │    ├── columns: x:5(int) onecolumn.x:1(int) onecolumn.rowid:2(int) empty.x:3(int) empty.rowid:4(int)
      │    ├── full-join
      │    │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int) empty.x:3(int) empty.rowid:4(int)
      │    │    ├── scan onecolumn
      │    │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
      │    │    ├── scan empty
      │    │    │    └── columns: empty.x:3(int) empty.rowid:4(int!null)
      │    │    └── eq [type=bool]
      │    │         ├── variable: onecolumn.x [type=int]
      │    │         └── variable: empty.x [type=int]
      │    └── projections
      │         ├── coalesce [type=int]
      │         │    ├── variable: onecolumn.x [type=int]
      │         │    └── variable: empty.x [type=int]
      │         ├── variable: onecolumn.x [type=int]
      │         ├── variable: onecolumn.rowid [type=int]
      │         ├── variable: empty.x [type=int]
      │         └── variable: empty.rowid [type=int]
      └── projections
           └── variable: x [type=int]

exec-ddl
CREATE TABLE twocolumn (x INT, y INT)
----
TABLE twocolumn
 ├── x int
 ├── y int
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

# Natural joins with partial match
build
SELECT * FROM onecolumn NATURAL JOIN twocolumn
----
project
 ├── columns: x:1(int) y:4(int)
 ├── inner-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: twocolumn.x [type=int]
 └── projections
      ├── variable: onecolumn.x [type=int]
      └── variable: twocolumn.y [type=int]

build
SELECT * FROM onecolumn JOIN twocolumn USING(x)
----
project
 ├── columns: x:1(int) y:4(int)
 ├── inner-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: twocolumn.x [type=int]
 └── projections
      ├── variable: onecolumn.x [type=int]
      └── variable: twocolumn.y [type=int]

build
SELECT * FROM twocolumn AS a JOIN twocolumn AS b ON a.x = b.y
----
project
 ├── columns: x:1(int) y:2(int) x:4(int) y:5(int)
 ├── inner-join
 │    ├── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null) twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
 │    └── eq [type=bool]
 │         ├── variable: twocolumn.x [type=int]
 │         └── variable: twocolumn.y [type=int]
 └── projections
      ├── variable: twocolumn.x [type=int]
      ├── variable: twocolumn.y [type=int]
      ├── variable: twocolumn.x [type=int]
      └── variable: twocolumn.y [type=int]

build
SELECT * FROM twocolumn AS a JOIN twocolumn AS b ON a.x = a.y
----
project
 ├── columns: x:1(int) y:2(int) x:4(int) y:5(int)
 ├── inner-join
 │    ├── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null) twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
 │    └── eq [type=bool]
 │         ├── variable: twocolumn.x [type=int]
 │         └── variable: twocolumn.y [type=int]
 └── projections
      ├── variable: twocolumn.x [type=int]
      ├── variable: twocolumn.y [type=int]
      ├── variable: twocolumn.x [type=int]
      └── variable: twocolumn.y [type=int]

build
SELECT * FROM onecolumn AS a JOIN twocolumn AS b ON ((a.x)) = ((b.y))
----
project
 ├── columns: x:1(int) x:3(int) y:4(int)
 ├── inner-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: twocolumn.y [type=int]
 └── projections
      ├── variable: onecolumn.x [type=int]
      ├── variable: twocolumn.x [type=int]
      └── variable: twocolumn.y [type=int]

build
SELECT * FROM onecolumn JOIN twocolumn ON onecolumn.x = twocolumn.y
----
project
 ├── columns: x:1(int) x:3(int) y:4(int)
 ├── inner-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: twocolumn.y [type=int]
 └── projections
      ├── variable: onecolumn.x [type=int]
      ├── variable: twocolumn.x [type=int]
      └── variable: twocolumn.y [type=int]

# Inner join with filter predicate
build
SELECT * FROM twocolumn AS a JOIN twocolumn AS b ON a.x = 44
----
project
 ├── columns: x:1(int) y:2(int) x:4(int) y:5(int)
 ├── inner-join
 │    ├── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null) twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
 │    └── eq [type=bool]
 │         ├── variable: twocolumn.x [type=int]
 │         └── const: 44 [type=int]
 └── projections
      ├── variable: twocolumn.x [type=int]
      ├── variable: twocolumn.y [type=int]
      ├── variable: twocolumn.x [type=int]
      └── variable: twocolumn.y [type=int]

build
SELECT o.x, t.y FROM onecolumn o INNER JOIN twocolumn t ON (o.x=t.x AND t.y=53)
----
project
 ├── columns: x:1(int) y:4(int)
 ├── inner-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: onecolumn.x [type=int]
 │         │    └── variable: twocolumn.x [type=int]
 │         └── eq [type=bool]
 │              ├── variable: twocolumn.y [type=int]
 │              └── const: 53 [type=int]
 └── projections
      ├── variable: onecolumn.x [type=int]
      └── variable: twocolumn.y [type=int]

# Outer joins with filter predicate
build
SELECT o.x, t.y FROM onecolumn o LEFT OUTER JOIN twocolumn t ON (o.x=t.x AND t.y=53)
----
project
 ├── columns: x:1(int) y:4(int)
 ├── left-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: onecolumn.x [type=int]
 │         │    └── variable: twocolumn.x [type=int]
 │         └── eq [type=bool]
 │              ├── variable: twocolumn.y [type=int]
 │              └── const: 53 [type=int]
 └── projections
      ├── variable: onecolumn.x [type=int]
      └── variable: twocolumn.y [type=int]

build
SELECT o.x, t.y FROM onecolumn o LEFT OUTER JOIN twocolumn t ON (o.x=t.x AND o.x=44)
----
project
 ├── columns: x:1(int) y:4(int)
 ├── left-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: onecolumn.x [type=int]
 │         │    └── variable: twocolumn.x [type=int]
 │         └── eq [type=bool]
 │              ├── variable: onecolumn.x [type=int]
 │              └── const: 44 [type=int]
 └── projections
      ├── variable: onecolumn.x [type=int]
      └── variable: twocolumn.y [type=int]

build
SELECT o.x, t.y FROM onecolumn o LEFT OUTER JOIN twocolumn t ON (o.x=t.x AND t.x=44)
----
project
 ├── columns: x:1(int) y:4(int)
 ├── left-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: onecolumn.x [type=int]
 │         │    └── variable: twocolumn.x [type=int]
 │         └── eq [type=bool]
 │              ├── variable: twocolumn.x [type=int]
 │              └── const: 44 [type=int]
 └── projections
      ├── variable: onecolumn.x [type=int]
      └── variable: twocolumn.y [type=int]

build
SELECT x, a.x, b.y FROM (SELECT * FROM onecolumn AS a NATURAL JOIN twocolumn AS b) AS q
----
error: no data source matches prefix: a

build
SELECT x, a.x, b.y FROM (SELECT * FROM onecolumn AS a NATURAL JOIN twocolumn AS b)
----
error: no data source matches prefix: a


## Simple test cases for inner, left, right, and outer joins

exec-ddl
CREATE TABLE a (i int)
----
TABLE a
 ├── i int
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

exec-ddl
CREATE TABLE b (i int, b bool)
----
TABLE b
 ├── i int
 ├── b bool
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

build
SELECT * FROM a INNER JOIN b ON a.i = b.i
----
project
 ├── columns: i:1(int) i:3(int) b:4(bool)
 ├── inner-join
 │    ├── columns: a.i:1(int) a.rowid:2(int!null) b.i:3(int) b.b:4(bool) b.rowid:5(int!null)
 │    ├── scan a
 │    │    └── columns: a.i:1(int) a.rowid:2(int!null)
 │    ├── scan b
 │    │    └── columns: b.i:3(int) b.b:4(bool) b.rowid:5(int!null)
 │    └── eq [type=bool]
 │         ├── variable: a.i [type=int]
 │         └── variable: b.i [type=int]
 └── projections
      ├── variable: a.i [type=int]
      ├── variable: b.i [type=int]
      └── variable: b.b [type=bool]

build
SELECT * FROM a LEFT OUTER JOIN b ON a.i = b.i
----
project
 ├── columns: i:1(int) i:3(int) b:4(bool)
 ├── left-join
 │    ├── columns: a.i:1(int) a.rowid:2(int!null) b.i:3(int) b.b:4(bool) b.rowid:5(int)
 │    ├── scan a
 │    │    └── columns: a.i:1(int) a.rowid:2(int!null)
 │    ├── scan b
 │    │    └── columns: b.i:3(int) b.b:4(bool) b.rowid:5(int!null)
 │    └── eq [type=bool]
 │         ├── variable: a.i [type=int]
 │         └── variable: b.i [type=int]
 └── projections
      ├── variable: a.i [type=int]
      ├── variable: b.i [type=int]
      └── variable: b.b [type=bool]

build
SELECT * FROM a RIGHT OUTER JOIN b ON a.i = b.i ORDER BY b.i, b.b
----
sort
 ├── columns: i:1(int) i:3(int) b:4(bool)
 ├── ordering: +3,+4
 └── project
      ├── columns: a.i:1(int) b.i:3(int) b.b:4(bool)
      ├── right-join
      │    ├── columns: a.i:1(int) a.rowid:2(int) b.i:3(int) b.b:4(bool) b.rowid:5(int!null)
      │    ├── scan a
      │    │    └── columns: a.i:1(int) a.rowid:2(int!null)
      │    ├── scan b
      │    │    └── columns: b.i:3(int) b.b:4(bool) b.rowid:5(int!null)
      │    └── eq [type=bool]
      │         ├── variable: a.i [type=int]
      │         └── variable: b.i [type=int]
      └── projections
           ├── variable: a.i [type=int]
           ├── variable: b.i [type=int]
           └── variable: b.b [type=bool]

build
SELECT * FROM a FULL OUTER JOIN b ON a.i = b.i ORDER BY b.i, b.b
----
sort
 ├── columns: i:1(int) i:3(int) b:4(bool)
 ├── ordering: +3,+4
 └── project
      ├── columns: a.i:1(int) b.i:3(int) b.b:4(bool)
      ├── full-join
      │    ├── columns: a.i:1(int) a.rowid:2(int) b.i:3(int) b.b:4(bool) b.rowid:5(int)
      │    ├── scan a
      │    │    └── columns: a.i:1(int) a.rowid:2(int!null)
      │    ├── scan b
      │    │    └── columns: b.i:3(int) b.b:4(bool) b.rowid:5(int!null)
      │    └── eq [type=bool]
      │         ├── variable: a.i [type=int]
      │         └── variable: b.i [type=int]
      └── projections
           ├── variable: a.i [type=int]
           ├── variable: b.i [type=int]
           └── variable: b.b [type=bool]

# Full outer join with filter predicate
build
SELECT * FROM a FULL OUTER JOIN b ON (a.i = b.i and a.i>2) ORDER BY a.i, b.i
----
sort
 ├── columns: i:1(int) i:3(int) b:4(bool)
 ├── ordering: +1,+3
 └── project
      ├── columns: a.i:1(int) b.i:3(int) b.b:4(bool)
      ├── full-join
      │    ├── columns: a.i:1(int) a.rowid:2(int) b.i:3(int) b.b:4(bool) b.rowid:5(int)
      │    ├── scan a
      │    │    └── columns: a.i:1(int) a.rowid:2(int!null)
      │    ├── scan b
      │    │    └── columns: b.i:3(int) b.b:4(bool) b.rowid:5(int!null)
      │    └── and [type=bool]
      │         ├── eq [type=bool]
      │         │    ├── variable: a.i [type=int]
      │         │    └── variable: b.i [type=int]
      │         └── gt [type=bool]
      │              ├── variable: a.i [type=int]
      │              └── const: 2 [type=int]
      └── projections
           ├── variable: a.i [type=int]
           ├── variable: b.i [type=int]
           └── variable: b.b [type=bool]

# Check column orders and names.
build
SELECT * FROM (onecolumn CROSS JOIN twocolumn JOIN onecolumn AS a(b) ON a.b=twocolumn.x JOIN twocolumn AS c(d,e) ON a.b=c.d AND c.d=onecolumn.x) ORDER BY 1 LIMIT 1
----
limit
 ├── columns: x:1(int) x:3(int) y:4(int) b:6(int) d:8(int) e:9(int)
 ├── ordering: +1
 ├── sort
 │    ├── columns: onecolumn.x:1(int) twocolumn.x:3(int) twocolumn.y:4(int) onecolumn.x:6(int) twocolumn.x:8(int) twocolumn.y:9(int)
 │    ├── ordering: +1
 │    └── project
 │         ├── columns: onecolumn.x:1(int) twocolumn.x:3(int) twocolumn.y:4(int) onecolumn.x:6(int) twocolumn.x:8(int) twocolumn.y:9(int)
 │         ├── inner-join
 │         │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null) onecolumn.x:6(int) onecolumn.rowid:7(int!null) twocolumn.x:8(int) twocolumn.y:9(int) twocolumn.rowid:10(int!null)
 │         │    ├── inner-join
 │         │    │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null) onecolumn.x:6(int) onecolumn.rowid:7(int!null)
 │         │    │    ├── inner-join
 │         │    │    │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │         │    │    │    ├── scan onecolumn
 │         │    │    │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │         │    │    │    ├── scan twocolumn
 │         │    │    │    │    └── columns: twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │         │    │    │    └── true [type=bool]
 │         │    │    ├── scan onecolumn
 │         │    │    │    └── columns: onecolumn.x:6(int) onecolumn.rowid:7(int!null)
 │         │    │    └── eq [type=bool]
 │         │    │         ├── variable: onecolumn.x [type=int]
 │         │    │         └── variable: twocolumn.x [type=int]
 │         │    ├── scan twocolumn
 │         │    │    └── columns: twocolumn.x:8(int) twocolumn.y:9(int) twocolumn.rowid:10(int!null)
 │         │    └── and [type=bool]
 │         │         ├── eq [type=bool]
 │         │         │    ├── variable: onecolumn.x [type=int]
 │         │         │    └── variable: twocolumn.x [type=int]
 │         │         └── eq [type=bool]
 │         │              ├── variable: twocolumn.x [type=int]
 │         │              └── variable: onecolumn.x [type=int]
 │         └── projections
 │              ├── variable: onecolumn.x [type=int]
 │              ├── variable: twocolumn.x [type=int]
 │              ├── variable: twocolumn.y [type=int]
 │              ├── variable: onecolumn.x [type=int]
 │              ├── variable: twocolumn.x [type=int]
 │              └── variable: twocolumn.y [type=int]
 └── const: 1 [type=int]

# Check sub-queries in ON conditions.
build
SELECT * FROM onecolumn JOIN twocolumn ON twocolumn.x = onecolumn.x AND onecolumn.x IN (SELECT x FROM twocolumn WHERE y >= 52)
----
project
 ├── columns: x:1(int) x:3(int) y:4(int)
 ├── inner-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:3(int) twocolumn.y:4(int) twocolumn.rowid:5(int!null)
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: twocolumn.x [type=int]
 │         │    └── variable: onecolumn.x [type=int]
 │         └── any [type=bool]
 │              └── project
 │                   ├── columns: column9:9(bool)
 │                   ├── project
 │                   │    ├── columns: twocolumn.x:6(int)
 │                   │    ├── select
 │                   │    │    ├── columns: twocolumn.x:6(int) twocolumn.y:7(int) twocolumn.rowid:8(int!null)
 │                   │    │    ├── scan twocolumn
 │                   │    │    │    └── columns: twocolumn.x:6(int) twocolumn.y:7(int) twocolumn.rowid:8(int!null)
 │                   │    │    └── ge [type=bool]
 │                   │    │         ├── variable: twocolumn.y [type=int]
 │                   │    │         └── const: 52 [type=int]
 │                   │    └── projections
 │                   │         └── variable: twocolumn.x [type=int]
 │                   └── projections
 │                        └── eq [type=bool]
 │                             ├── variable: onecolumn.x [type=int]
 │                             └── variable: twocolumn.x [type=int]
 └── projections
      ├── variable: onecolumn.x [type=int]
      ├── variable: twocolumn.x [type=int]
      └── variable: twocolumn.y [type=int]

# Check sub-queries as data sources.
build
SELECT * FROM onecolumn JOIN (VALUES (41),(42),(43)) AS a(x) USING(x)
----
project
 ├── columns: x:1(int)
 ├── inner-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) column1:3(int)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── values
 │    │    ├── columns: column1:3(int)
 │    │    ├── tuple [type=tuple{int}]
 │    │    │    └── const: 41 [type=int]
 │    │    ├── tuple [type=tuple{int}]
 │    │    │    └── const: 42 [type=int]
 │    │    └── tuple [type=tuple{int}]
 │    │         └── const: 43 [type=int]
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: column1 [type=int]
 └── projections
      └── variable: onecolumn.x [type=int]

build
SELECT * FROM onecolumn JOIN (SELECT x + 2 AS x FROM onecolumn) USING(x)
----
project
 ├── columns: x:1(int)
 ├── inner-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) x:5(int)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    ├── project
 │    │    ├── columns: x:5(int)
 │    │    ├── scan onecolumn
 │    │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    │    └── projections
 │    │         └── plus [type=int]
 │    │              ├── variable: onecolumn.x [type=int]
 │    │              └── const: 2 [type=int]
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: x [type=int]
 └── projections
      └── variable: onecolumn.x [type=int]

# Check that a single column can have multiple table aliases.
build
SELECT * FROM (twocolumn AS a JOIN twocolumn AS b USING(x) JOIN twocolumn AS c USING(x)) ORDER BY x LIMIT 1
----
limit
 ├── columns: x:1(int) y:2(int) y:5(int) y:8(int)
 ├── ordering: +1
 ├── sort
 │    ├── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.y:5(int) twocolumn.y:8(int)
 │    ├── ordering: +1
 │    └── project
 │         ├── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.y:5(int) twocolumn.y:8(int)
 │         ├── inner-join
 │         │    ├── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null) twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null) twocolumn.x:7(int) twocolumn.y:8(int) twocolumn.rowid:9(int!null)
 │         │    ├── inner-join
 │         │    │    ├── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null) twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
 │         │    │    ├── scan twocolumn
 │         │    │    │    └── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null)
 │         │    │    ├── scan twocolumn
 │         │    │    │    └── columns: twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
 │         │    │    └── eq [type=bool]
 │         │    │         ├── variable: twocolumn.x [type=int]
 │         │    │         └── variable: twocolumn.x [type=int]
 │         │    ├── scan twocolumn
 │         │    │    └── columns: twocolumn.x:7(int) twocolumn.y:8(int) twocolumn.rowid:9(int!null)
 │         │    └── eq [type=bool]
 │         │         ├── variable: twocolumn.x [type=int]
 │         │         └── variable: twocolumn.x [type=int]
 │         └── projections
 │              ├── variable: twocolumn.x [type=int]
 │              ├── variable: twocolumn.y [type=int]
 │              ├── variable: twocolumn.y [type=int]
 │              └── variable: twocolumn.y [type=int]
 └── const: 1 [type=int]

build
SELECT a.x AS s, b.x, c.x, a.y, b.y, c.y FROM (twocolumn AS a JOIN twocolumn AS b USING(x) JOIN twocolumn AS c USING(x)) ORDER BY s
----
sort
 ├── columns: s:1(int) x:4(int) x:7(int) y:2(int) y:5(int) y:8(int)
 ├── ordering: +1
 └── project
      ├── columns: twocolumn.x:1(int) twocolumn.x:4(int) twocolumn.x:7(int) twocolumn.y:2(int) twocolumn.y:5(int) twocolumn.y:8(int)
      ├── inner-join
      │    ├── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null) twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null) twocolumn.x:7(int) twocolumn.y:8(int) twocolumn.rowid:9(int!null)
      │    ├── inner-join
      │    │    ├── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null) twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
      │    │    ├── scan twocolumn
      │    │    │    └── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null)
      │    │    ├── scan twocolumn
      │    │    │    └── columns: twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
      │    │    └── eq [type=bool]
      │    │         ├── variable: twocolumn.x [type=int]
      │    │         └── variable: twocolumn.x [type=int]
      │    ├── scan twocolumn
      │    │    └── columns: twocolumn.x:7(int) twocolumn.y:8(int) twocolumn.rowid:9(int!null)
      │    └── eq [type=bool]
      │         ├── variable: twocolumn.x [type=int]
      │         └── variable: twocolumn.x [type=int]
      └── projections
           ├── variable: twocolumn.x [type=int]
           ├── variable: twocolumn.x [type=int]
           ├── variable: twocolumn.x [type=int]
           ├── variable: twocolumn.y [type=int]
           ├── variable: twocolumn.y [type=int]
           └── variable: twocolumn.y [type=int]

build
SELECT * FROM (onecolumn AS a JOIN onecolumn AS b USING(y))
----
error: column "y" specified in USING clause does not exist in left table

build
SELECT * FROM (onecolumn AS a JOIN onecolumn AS b USING(x, x))
----
error: column "x" appears more than once in USING clause

exec-ddl
CREATE TABLE othertype (x TEXT)
----
TABLE othertype
 ├── x string
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

build
SELECT * FROM (onecolumn AS a JOIN othertype AS b USING(x))
----
error: JOIN/USING types int for left and string for right cannot be matched for column x

build
SELECT * FROM (onecolumn JOIN onecolumn USING(x))
----
error: cannot join columns from the same source name "onecolumn" (missing AS clause)

build
SELECT * FROM (onecolumn JOIN twocolumn USING(x) JOIN onecolumn USING(x))
----
error: cannot join columns from the same source name "onecolumn" (missing AS clause)

# Check that star expansion works across anonymous sources.
build
SELECT * FROM (SELECT * FROM onecolumn), (SELECT * FROM onecolumn)
----
inner-join
 ├── columns: x:1(int) x:3(int)
 ├── project
 │    ├── columns: onecolumn.x:1(int)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    └── projections
 │         └── variable: onecolumn.x [type=int]
 ├── project
 │    ├── columns: onecolumn.x:3(int)
 │    ├── scan onecolumn
 │    │    └── columns: onecolumn.x:3(int) onecolumn.rowid:4(int!null)
 │    └── projections
 │         └── variable: onecolumn.x [type=int]
 └── true [type=bool]

# Check that anonymous sources are properly looked up without ambiguity.
build
SELECT x FROM (onecolumn JOIN othercolumn USING (x)) JOIN (onecolumn AS a JOIN othercolumn AS b USING(x)) USING(x)
----
project
 ├── columns: x:1(int)
 ├── inner-join
 │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) othercolumn.x:3(int) othercolumn.rowid:4(int!null) onecolumn.x:5(int) onecolumn.rowid:6(int!null) othercolumn.x:7(int) othercolumn.rowid:8(int!null)
 │    ├── inner-join
 │    │    ├── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null) othercolumn.x:3(int) othercolumn.rowid:4(int!null)
 │    │    ├── scan onecolumn
 │    │    │    └── columns: onecolumn.x:1(int) onecolumn.rowid:2(int!null)
 │    │    ├── scan othercolumn
 │    │    │    └── columns: othercolumn.x:3(int) othercolumn.rowid:4(int!null)
 │    │    └── eq [type=bool]
 │    │         ├── variable: onecolumn.x [type=int]
 │    │         └── variable: othercolumn.x [type=int]
 │    ├── inner-join
 │    │    ├── columns: onecolumn.x:5(int) onecolumn.rowid:6(int!null) othercolumn.x:7(int) othercolumn.rowid:8(int!null)
 │    │    ├── scan onecolumn
 │    │    │    └── columns: onecolumn.x:5(int) onecolumn.rowid:6(int!null)
 │    │    ├── scan othercolumn
 │    │    │    └── columns: othercolumn.x:7(int) othercolumn.rowid:8(int!null)
 │    │    └── eq [type=bool]
 │    │         ├── variable: onecolumn.x [type=int]
 │    │         └── variable: othercolumn.x [type=int]
 │    └── eq [type=bool]
 │         ├── variable: onecolumn.x [type=int]
 │         └── variable: onecolumn.x [type=int]
 └── projections
      └── variable: onecolumn.x [type=int]

# Check that multiple anonymous sources cause proper ambiguity errors.
build
SELECT x FROM (SELECT * FROM onecolumn), (SELECT * FROM onecolumn)
----
error: column reference "x" is ambiguous (candidates: <anonymous>.x, <anonymous>.x)

build
SELECT * FROM (onecolumn AS a JOIN onecolumn AS b ON x > 32)
----
error: column reference "x" is ambiguous (candidates: a.x, b.x)

build
SELECT * FROM (onecolumn AS a JOIN onecolumn AS b ON a.y > y)
----
error: column name "a.y" not found

# THe following queries verify that only the necessary columns are scanned.
build
SELECT a.x, b.y FROM twocolumn AS a, twocolumn AS b
----
project
 ├── columns: x:1(int) y:5(int)
 ├── inner-join
 │    ├── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null) twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
 │    └── true [type=bool]
 └── projections
      ├── variable: twocolumn.x [type=int]
      └── variable: twocolumn.y [type=int]

build
SELECT b.y FROM (twocolumn AS a JOIN twocolumn AS b USING(x))
----
project
 ├── columns: y:5(int)
 ├── inner-join
 │    ├── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null) twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
 │    └── eq [type=bool]
 │         ├── variable: twocolumn.x [type=int]
 │         └── variable: twocolumn.x [type=int]
 └── projections
      └── variable: twocolumn.y [type=int]

build
SELECT b.y FROM (twocolumn AS a JOIN twocolumn AS b ON a.x = b.x)
----
project
 ├── columns: y:5(int)
 ├── inner-join
 │    ├── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null) twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
 │    └── eq [type=bool]
 │         ├── variable: twocolumn.x [type=int]
 │         └── variable: twocolumn.x [type=int]
 └── projections
      └── variable: twocolumn.y [type=int]

build
SELECT a.x FROM (twocolumn AS a JOIN twocolumn AS b ON a.x < b.y)
----
project
 ├── columns: x:1(int)
 ├── inner-join
 │    ├── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null) twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:1(int) twocolumn.y:2(int) twocolumn.rowid:3(int!null)
 │    ├── scan twocolumn
 │    │    └── columns: twocolumn.x:4(int) twocolumn.y:5(int) twocolumn.rowid:6(int!null)
 │    └── lt [type=bool]
 │         ├── variable: twocolumn.x [type=int]
 │         └── variable: twocolumn.y [type=int]
 └── projections
      └── variable: twocolumn.x [type=int]

build
SELECT * FROM (SELECT * FROM (VALUES (9, 1), (8, 2)) AS a (u, k) ORDER BY k)
  INNER JOIN (VALUES (1, 1), (2, 2)) AS b (k, w) USING (k) ORDER BY u
----
sort
 ├── columns: k:2(int) u:1(int) w:4(int)
 ├── ordering: +1
 └── project
      ├── columns: column2:2(int) column1:1(int) column2:4(int)
      ├── inner-join
      │    ├── columns: column1:1(int) column2:2(int) column1:3(int) column2:4(int)
      │    ├── values
      │    │    ├── columns: column1:1(int) column2:2(int)
      │    │    ├── tuple [type=tuple{int, int}]
      │    │    │    ├── const: 9 [type=int]
      │    │    │    └── const: 1 [type=int]
      │    │    └── tuple [type=tuple{int, int}]
      │    │         ├── const: 8 [type=int]
      │    │         └── const: 2 [type=int]
      │    ├── values
      │    │    ├── columns: column1:3(int) column2:4(int)
      │    │    ├── tuple [type=tuple{int, int}]
      │    │    │    ├── const: 1 [type=int]
      │    │    │    └── const: 1 [type=int]
      │    │    └── tuple [type=tuple{int, int}]
      │    │         ├── const: 2 [type=int]
      │    │         └── const: 2 [type=int]
      │    └── eq [type=bool]
      │         ├── variable: column2 [type=int]
      │         └── variable: column1 [type=int]
      └── projections
           ├── variable: column2 [type=int]
           ├── variable: column1 [type=int]
           └── variable: column2 [type=int]

# Tests for filter propagation through joins.

exec-ddl
CREATE TABLE square (n INT PRIMARY KEY, sq INT)
----
TABLE square
 ├── n int not null
 ├── sq int
 └── INDEX primary
      └── n int not null

exec-ddl
CREATE TABLE pairs (a INT, b INT)
----
TABLE pairs
 ├── a int
 ├── b int
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

# The filter expression becomes an equality constraint.
build
SELECT * FROM pairs, square WHERE pairs.b = square.n
----
project
 ├── columns: a:1(int) b:2(int) n:4(int!null) sq:5(int)
 ├── select
 │    ├── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int!null) square.n:4(int!null) square.sq:5(int)
 │    ├── inner-join
 │    │    ├── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int!null) square.n:4(int!null) square.sq:5(int)
 │    │    ├── scan pairs
 │    │    │    └── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int!null)
 │    │    ├── scan square
 │    │    │    └── columns: square.n:4(int!null) square.sq:5(int)
 │    │    └── true [type=bool]
 │    └── eq [type=bool]
 │         ├── variable: pairs.b [type=int]
 │         └── variable: square.n [type=int]
 └── projections
      ├── variable: pairs.a [type=int]
      ├── variable: pairs.b [type=int]
      ├── variable: square.n [type=int]
      └── variable: square.sq [type=int]

# The filter expression becomes an ON predicate.
build
SELECT * FROM pairs, square WHERE pairs.a + pairs.b = square.sq
----
project
 ├── columns: a:1(int) b:2(int) n:4(int!null) sq:5(int)
 ├── select
 │    ├── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int!null) square.n:4(int!null) square.sq:5(int)
 │    ├── inner-join
 │    │    ├── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int!null) square.n:4(int!null) square.sq:5(int)
 │    │    ├── scan pairs
 │    │    │    └── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int!null)
 │    │    ├── scan square
 │    │    │    └── columns: square.n:4(int!null) square.sq:5(int)
 │    │    └── true [type=bool]
 │    └── eq [type=bool]
 │         ├── plus [type=int]
 │         │    ├── variable: pairs.a [type=int]
 │         │    └── variable: pairs.b [type=int]
 │         └── variable: square.sq [type=int]
 └── projections
      ├── variable: pairs.a [type=int]
      ├── variable: pairs.b [type=int]
      ├── variable: square.n [type=int]
      └── variable: square.sq [type=int]

# Query similar to the one above, but the filter refers to a rendered
# expression and can't "break through". See the comment for propagateFilters
# in fitler_opt.go for all the details.
build
SELECT a, b, n, sq FROM (SELECT a, b, a + b AS sum, n, sq FROM pairs, square) WHERE sum = sq
----
project
 ├── columns: a:1(int) b:2(int) n:4(int!null) sq:5(int)
 ├── select
 │    ├── columns: pairs.a:1(int) pairs.b:2(int) square.n:4(int!null) square.sq:5(int) sum:6(int)
 │    ├── project
 │    │    ├── columns: pairs.a:1(int) pairs.b:2(int) sum:6(int) square.n:4(int!null) square.sq:5(int)
 │    │    ├── inner-join
 │    │    │    ├── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int!null) square.n:4(int!null) square.sq:5(int)
 │    │    │    ├── scan pairs
 │    │    │    │    └── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int!null)
 │    │    │    ├── scan square
 │    │    │    │    └── columns: square.n:4(int!null) square.sq:5(int)
 │    │    │    └── true [type=bool]
 │    │    └── projections
 │    │         ├── variable: pairs.a [type=int]
 │    │         ├── variable: pairs.b [type=int]
 │    │         ├── plus [type=int]
 │    │         │    ├── variable: pairs.a [type=int]
 │    │         │    └── variable: pairs.b [type=int]
 │    │         ├── variable: square.n [type=int]
 │    │         └── variable: square.sq [type=int]
 │    └── eq [type=bool]
 │         ├── variable: sum [type=int]
 │         └── variable: square.sq [type=int]
 └── projections
      ├── variable: pairs.a [type=int]
      ├── variable: pairs.b [type=int]
      ├── variable: square.n [type=int]
      └── variable: square.sq [type=int]

# The filter expression must stay on top of the outer join.
build
SELECT * FROM pairs FULL OUTER JOIN square ON pairs.a + pairs.b = square.sq
----
project
 ├── columns: a:1(int) b:2(int) n:4(int) sq:5(int)
 ├── full-join
 │    ├── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int) square.n:4(int) square.sq:5(int)
 │    ├── scan pairs
 │    │    └── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int!null)
 │    ├── scan square
 │    │    └── columns: square.n:4(int!null) square.sq:5(int)
 │    └── eq [type=bool]
 │         ├── plus [type=int]
 │         │    ├── variable: pairs.a [type=int]
 │         │    └── variable: pairs.b [type=int]
 │         └── variable: square.sq [type=int]
 └── projections
      ├── variable: pairs.a [type=int]
      ├── variable: pairs.b [type=int]
      ├── variable: square.n [type=int]
      └── variable: square.sq [type=int]

build
SELECT * FROM pairs FULL OUTER JOIN square ON pairs.a + pairs.b = square.sq WHERE pairs.b%2 <> square.sq%2
----
project
 ├── columns: a:1(int) b:2(int) n:4(int) sq:5(int)
 ├── select
 │    ├── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int) square.n:4(int) square.sq:5(int)
 │    ├── full-join
 │    │    ├── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int) square.n:4(int) square.sq:5(int)
 │    │    ├── scan pairs
 │    │    │    └── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int!null)
 │    │    ├── scan square
 │    │    │    └── columns: square.n:4(int!null) square.sq:5(int)
 │    │    └── eq [type=bool]
 │    │         ├── plus [type=int]
 │    │         │    ├── variable: pairs.a [type=int]
 │    │         │    └── variable: pairs.b [type=int]
 │    │         └── variable: square.sq [type=int]
 │    └── ne [type=bool]
 │         ├── mod [type=int]
 │         │    ├── variable: pairs.b [type=int]
 │         │    └── const: 2 [type=int]
 │         └── mod [type=int]
 │              ├── variable: square.sq [type=int]
 │              └── const: 2 [type=int]
 └── projections
      ├── variable: pairs.a [type=int]
      ├── variable: pairs.b [type=int]
      ├── variable: square.n [type=int]
      └── variable: square.sq [type=int]

# Filter propagation through outer joins.

build
SELECT *
  FROM (SELECT * FROM pairs LEFT JOIN square ON b = sq AND a > 1 AND n < 6)
 WHERE b > 1 AND (n IS NULL OR n > 1) AND (n IS NULL OR a  < sq)
----
select
 ├── columns: a:1(int) b:2(int) n:4(int) sq:5(int)
 ├── project
 │    ├── columns: pairs.a:1(int) pairs.b:2(int) square.n:4(int) square.sq:5(int)
 │    ├── left-join
 │    │    ├── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int!null) square.n:4(int) square.sq:5(int)
 │    │    ├── scan pairs
 │    │    │    └── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int!null)
 │    │    ├── scan square
 │    │    │    └── columns: square.n:4(int!null) square.sq:5(int)
 │    │    └── and [type=bool]
 │    │         ├── and [type=bool]
 │    │         │    ├── eq [type=bool]
 │    │         │    │    ├── variable: pairs.b [type=int]
 │    │         │    │    └── variable: square.sq [type=int]
 │    │         │    └── gt [type=bool]
 │    │         │         ├── variable: pairs.a [type=int]
 │    │         │         └── const: 1 [type=int]
 │    │         └── lt [type=bool]
 │    │              ├── variable: square.n [type=int]
 │    │              └── const: 6 [type=int]
 │    └── projections
 │         ├── variable: pairs.a [type=int]
 │         ├── variable: pairs.b [type=int]
 │         ├── variable: square.n [type=int]
 │         └── variable: square.sq [type=int]
 └── and [type=bool]
      ├── and [type=bool]
      │    ├── gt [type=bool]
      │    │    ├── variable: pairs.b [type=int]
      │    │    └── const: 1 [type=int]
      │    └── or [type=bool]
      │         ├── is [type=bool]
      │         │    ├── variable: square.n [type=int]
      │         │    └── null [type=unknown]
      │         └── gt [type=bool]
      │              ├── variable: square.n [type=int]
      │              └── const: 1 [type=int]
      └── or [type=bool]
           ├── is [type=bool]
           │    ├── variable: square.n [type=int]
           │    └── null [type=unknown]
           └── lt [type=bool]
                ├── variable: pairs.a [type=int]
                └── variable: square.sq [type=int]

build
SELECT *
  FROM (SELECT * FROM pairs RIGHT JOIN square ON b = sq AND a > 1 AND n < 6)
 WHERE (a IS NULL OR a > 2) AND n > 1 AND (a IS NULL OR a < sq)
----
select
 ├── columns: a:1(int) b:2(int) n:4(int!null) sq:5(int)
 ├── project
 │    ├── columns: pairs.a:1(int) pairs.b:2(int) square.n:4(int!null) square.sq:5(int)
 │    ├── right-join
 │    │    ├── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int) square.n:4(int!null) square.sq:5(int)
 │    │    ├── scan pairs
 │    │    │    └── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int!null)
 │    │    ├── scan square
 │    │    │    └── columns: square.n:4(int!null) square.sq:5(int)
 │    │    └── and [type=bool]
 │    │         ├── and [type=bool]
 │    │         │    ├── eq [type=bool]
 │    │         │    │    ├── variable: pairs.b [type=int]
 │    │         │    │    └── variable: square.sq [type=int]
 │    │         │    └── gt [type=bool]
 │    │         │         ├── variable: pairs.a [type=int]
 │    │         │         └── const: 1 [type=int]
 │    │         └── lt [type=bool]
 │    │              ├── variable: square.n [type=int]
 │    │              └── const: 6 [type=int]
 │    └── projections
 │         ├── variable: pairs.a [type=int]
 │         ├── variable: pairs.b [type=int]
 │         ├── variable: square.n [type=int]
 │         └── variable: square.sq [type=int]
 └── and [type=bool]
      ├── and [type=bool]
      │    ├── or [type=bool]
      │    │    ├── is [type=bool]
      │    │    │    ├── variable: pairs.a [type=int]
      │    │    │    └── null [type=unknown]
      │    │    └── gt [type=bool]
      │    │         ├── variable: pairs.a [type=int]
      │    │         └── const: 2 [type=int]
      │    └── gt [type=bool]
      │         ├── variable: square.n [type=int]
      │         └── const: 1 [type=int]
      └── or [type=bool]
           ├── is [type=bool]
           │    ├── variable: pairs.a [type=int]
           │    └── null [type=unknown]
           └── lt [type=bool]
                ├── variable: pairs.a [type=int]
                └── variable: square.sq [type=int]

# The simpler plan for an inner join, to compare.
build
SELECT *
  FROM (SELECT * FROM pairs JOIN square ON b = sq AND a > 1 AND n < 6)
 WHERE (a IS NULL OR a > 2) AND n > 1 AND (a IS NULL OR a < sq)
----
select
 ├── columns: a:1(int) b:2(int) n:4(int!null) sq:5(int)
 ├── project
 │    ├── columns: pairs.a:1(int) pairs.b:2(int) square.n:4(int!null) square.sq:5(int)
 │    ├── inner-join
 │    │    ├── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int!null) square.n:4(int!null) square.sq:5(int)
 │    │    ├── scan pairs
 │    │    │    └── columns: pairs.a:1(int) pairs.b:2(int) pairs.rowid:3(int!null)
 │    │    ├── scan square
 │    │    │    └── columns: square.n:4(int!null) square.sq:5(int)
 │    │    └── and [type=bool]
 │    │         ├── and [type=bool]
 │    │         │    ├── eq [type=bool]
 │    │         │    │    ├── variable: pairs.b [type=int]
 │    │         │    │    └── variable: square.sq [type=int]
 │    │         │    └── gt [type=bool]
 │    │         │         ├── variable: pairs.a [type=int]
 │    │         │         └── const: 1 [type=int]
 │    │         └── lt [type=bool]
 │    │              ├── variable: square.n [type=int]
 │    │              └── const: 6 [type=int]
 │    └── projections
 │         ├── variable: pairs.a [type=int]
 │         ├── variable: pairs.b [type=int]
 │         ├── variable: square.n [type=int]
 │         └── variable: square.sq [type=int]
 └── and [type=bool]
      ├── and [type=bool]
      │    ├── or [type=bool]
      │    │    ├── is [type=bool]
      │    │    │    ├── variable: pairs.a [type=int]
      │    │    │    └── null [type=unknown]
      │    │    └── gt [type=bool]
      │    │         ├── variable: pairs.a [type=int]
      │    │         └── const: 2 [type=int]
      │    └── gt [type=bool]
      │         ├── variable: square.n [type=int]
      │         └── const: 1 [type=int]
      └── or [type=bool]
           ├── is [type=bool]
           │    ├── variable: pairs.a [type=int]
           │    └── null [type=unknown]
           └── lt [type=bool]
                ├── variable: pairs.a [type=int]
                └── variable: square.sq [type=int]


exec-ddl
CREATE TABLE t1 (col1 INT, x INT, col2 INT, y INT)
----
TABLE t1
 ├── col1 int
 ├── x int
 ├── col2 int
 ├── y int
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

exec-ddl
CREATE TABLE t2 (col3 INT, y INT, x INT, col4 INT)
----
TABLE t2
 ├── col3 int
 ├── y int
 ├── x int
 ├── col4 int
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

build
SELECT * FROM t1 JOIN t2 USING(x)
----
project
 ├── columns: x:2(int) col1:1(int) col2:3(int) y:4(int) col3:6(int) y:7(int) col4:9(int)
 ├── inner-join
 │    ├── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int!null) t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int!null)
 │    ├── scan t1
 │    │    └── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int!null)
 │    ├── scan t2
 │    │    └── columns: t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int!null)
 │    └── eq [type=bool]
 │         ├── variable: t1.x [type=int]
 │         └── variable: t2.x [type=int]
 └── projections
      ├── variable: t1.x [type=int]
      ├── variable: t1.col1 [type=int]
      ├── variable: t1.col2 [type=int]
      ├── variable: t1.y [type=int]
      ├── variable: t2.col3 [type=int]
      ├── variable: t2.y [type=int]
      └── variable: t2.col4 [type=int]

build
SELECT * FROM t1 NATURAL JOIN t2
----
project
 ├── columns: x:2(int) y:4(int) col1:1(int) col2:3(int) col3:6(int) col4:9(int)
 ├── inner-join
 │    ├── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int!null) t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int!null)
 │    ├── scan t1
 │    │    └── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int!null)
 │    ├── scan t2
 │    │    └── columns: t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int!null)
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: t1.x [type=int]
 │         │    └── variable: t2.x [type=int]
 │         └── eq [type=bool]
 │              ├── variable: t1.y [type=int]
 │              └── variable: t2.y [type=int]
 └── projections
      ├── variable: t1.x [type=int]
      ├── variable: t1.y [type=int]
      ├── variable: t1.col1 [type=int]
      ├── variable: t1.col2 [type=int]
      ├── variable: t2.col3 [type=int]
      └── variable: t2.col4 [type=int]

build
SELECT * FROM t1 JOIN t2 ON t2.x=t1.x
----
project
 ├── columns: col1:1(int) x:2(int) col2:3(int) y:4(int) col3:6(int) y:7(int) x:8(int) col4:9(int)
 ├── inner-join
 │    ├── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int!null) t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int!null)
 │    ├── scan t1
 │    │    └── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int!null)
 │    ├── scan t2
 │    │    └── columns: t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int!null)
 │    └── eq [type=bool]
 │         ├── variable: t2.x [type=int]
 │         └── variable: t1.x [type=int]
 └── projections
      ├── variable: t1.col1 [type=int]
      ├── variable: t1.x [type=int]
      ├── variable: t1.col2 [type=int]
      ├── variable: t1.y [type=int]
      ├── variable: t2.col3 [type=int]
      ├── variable: t2.y [type=int]
      ├── variable: t2.x [type=int]
      └── variable: t2.col4 [type=int]

build
SELECT * FROM t1 FULL OUTER JOIN t2 USING(x)
----
project
 ├── columns: x:11(int) col1:1(int) col2:3(int) y:4(int) col3:6(int) y:7(int) col4:9(int)
 ├── project
 │    ├── columns: x:11(int) t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int) t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int)
 │    ├── full-join
 │    │    ├── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int) t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int)
 │    │    ├── scan t1
 │    │    │    └── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int!null)
 │    │    ├── scan t2
 │    │    │    └── columns: t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int!null)
 │    │    └── eq [type=bool]
 │    │         ├── variable: t1.x [type=int]
 │    │         └── variable: t2.x [type=int]
 │    └── projections
 │         ├── coalesce [type=int]
 │         │    ├── variable: t1.x [type=int]
 │         │    └── variable: t2.x [type=int]
 │         ├── variable: t1.col1 [type=int]
 │         ├── variable: t1.x [type=int]
 │         ├── variable: t1.col2 [type=int]
 │         ├── variable: t1.y [type=int]
 │         ├── variable: t1.rowid [type=int]
 │         ├── variable: t2.col3 [type=int]
 │         ├── variable: t2.y [type=int]
 │         ├── variable: t2.x [type=int]
 │         ├── variable: t2.col4 [type=int]
 │         └── variable: t2.rowid [type=int]
 └── projections
      ├── variable: x [type=int]
      ├── variable: t1.col1 [type=int]
      ├── variable: t1.col2 [type=int]
      ├── variable: t1.y [type=int]
      ├── variable: t2.col3 [type=int]
      ├── variable: t2.y [type=int]
      └── variable: t2.col4 [type=int]

build
SELECT * FROM t1 NATURAL FULL OUTER JOIN t2
----
project
 ├── columns: x:11(int) y:12(int) col1:1(int) col2:3(int) col3:6(int) col4:9(int)
 ├── project
 │    ├── columns: x:11(int) y:12(int) t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int) t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int)
 │    ├── full-join
 │    │    ├── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int) t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int)
 │    │    ├── scan t1
 │    │    │    └── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int!null)
 │    │    ├── scan t2
 │    │    │    └── columns: t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int!null)
 │    │    └── and [type=bool]
 │    │         ├── eq [type=bool]
 │    │         │    ├── variable: t1.x [type=int]
 │    │         │    └── variable: t2.x [type=int]
 │    │         └── eq [type=bool]
 │    │              ├── variable: t1.y [type=int]
 │    │              └── variable: t2.y [type=int]
 │    └── projections
 │         ├── coalesce [type=int]
 │         │    ├── variable: t1.x [type=int]
 │         │    └── variable: t2.x [type=int]
 │         ├── coalesce [type=int]
 │         │    ├── variable: t1.y [type=int]
 │         │    └── variable: t2.y [type=int]
 │         ├── variable: t1.col1 [type=int]
 │         ├── variable: t1.x [type=int]
 │         ├── variable: t1.col2 [type=int]
 │         ├── variable: t1.y [type=int]
 │         ├── variable: t1.rowid [type=int]
 │         ├── variable: t2.col3 [type=int]
 │         ├── variable: t2.y [type=int]
 │         ├── variable: t2.x [type=int]
 │         ├── variable: t2.col4 [type=int]
 │         └── variable: t2.rowid [type=int]
 └── projections
      ├── variable: x [type=int]
      ├── variable: y [type=int]
      ├── variable: t1.col1 [type=int]
      ├── variable: t1.col2 [type=int]
      ├── variable: t2.col3 [type=int]
      └── variable: t2.col4 [type=int]

build
SELECT * FROM t1 FULL OUTER JOIN t2 ON t1.x=t2.x
----
project
 ├── columns: col1:1(int) x:2(int) col2:3(int) y:4(int) col3:6(int) y:7(int) x:8(int) col4:9(int)
 ├── full-join
 │    ├── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int) t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int)
 │    ├── scan t1
 │    │    └── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int!null)
 │    ├── scan t2
 │    │    └── columns: t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int!null)
 │    └── eq [type=bool]
 │         ├── variable: t1.x [type=int]
 │         └── variable: t2.x [type=int]
 └── projections
      ├── variable: t1.col1 [type=int]
      ├── variable: t1.x [type=int]
      ├── variable: t1.col2 [type=int]
      ├── variable: t1.y [type=int]
      ├── variable: t2.col3 [type=int]
      ├── variable: t2.y [type=int]
      ├── variable: t2.x [type=int]
      └── variable: t2.col4 [type=int]

build
SELECT t2.x, t1.x, x FROM t1 JOIN t2 USING(x)
----
project
 ├── columns: x:8(int) x:2(int) x:2(int)
 ├── inner-join
 │    ├── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int!null) t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int!null)
 │    ├── scan t1
 │    │    └── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int!null)
 │    ├── scan t2
 │    │    └── columns: t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int!null)
 │    └── eq [type=bool]
 │         ├── variable: t1.x [type=int]
 │         └── variable: t2.x [type=int]
 └── projections
      ├── variable: t2.x [type=int]
      └── variable: t1.x [type=int]

build
SELECT t2.x, t1.x, x FROM t1 FULL OUTER JOIN t2 USING(x)
----
project
 ├── columns: x:8(int) x:2(int) x:11(int)
 ├── project
 │    ├── columns: x:11(int) t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int) t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int)
 │    ├── full-join
 │    │    ├── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int) t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int)
 │    │    ├── scan t1
 │    │    │    └── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int!null)
 │    │    ├── scan t2
 │    │    │    └── columns: t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int!null)
 │    │    └── eq [type=bool]
 │    │         ├── variable: t1.x [type=int]
 │    │         └── variable: t2.x [type=int]
 │    └── projections
 │         ├── coalesce [type=int]
 │         │    ├── variable: t1.x [type=int]
 │         │    └── variable: t2.x [type=int]
 │         ├── variable: t1.col1 [type=int]
 │         ├── variable: t1.x [type=int]
 │         ├── variable: t1.col2 [type=int]
 │         ├── variable: t1.y [type=int]
 │         ├── variable: t1.rowid [type=int]
 │         ├── variable: t2.col3 [type=int]
 │         ├── variable: t2.y [type=int]
 │         ├── variable: t2.x [type=int]
 │         ├── variable: t2.col4 [type=int]
 │         └── variable: t2.rowid [type=int]
 └── projections
      ├── variable: t2.x [type=int]
      ├── variable: t1.x [type=int]
      └── variable: x [type=int]

# Test for #19536.
build
SELECT x FROM t1 NATURAL JOIN (SELECT * FROM t2)
----
project
 ├── columns: x:2(int)
 ├── inner-join
 │    ├── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int!null) t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int)
 │    ├── scan t1
 │    │    └── columns: t1.col1:1(int) t1.x:2(int) t1.col2:3(int) t1.y:4(int) t1.rowid:5(int!null)
 │    ├── project
 │    │    ├── columns: t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int)
 │    │    ├── scan t2
 │    │    │    └── columns: t2.col3:6(int) t2.y:7(int) t2.x:8(int) t2.col4:9(int) t2.rowid:10(int!null)
 │    │    └── projections
 │    │         ├── variable: t2.col3 [type=int]
 │    │         ├── variable: t2.y [type=int]
 │    │         ├── variable: t2.x [type=int]
 │    │         └── variable: t2.col4 [type=int]
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: t1.x [type=int]
 │         │    └── variable: t2.x [type=int]
 │         └── eq [type=bool]
 │              ├── variable: t1.y [type=int]
 │              └── variable: t2.y [type=int]
 └── projections
      └── variable: t1.x [type=int]

# Tests for merge join ordering information.
exec-ddl
CREATE TABLE pkBA (a INT, b INT, c INT, d INT, PRIMARY KEY(b,a))
----
TABLE pkba
 ├── a int not null
 ├── b int not null
 ├── c int
 ├── d int
 └── INDEX primary
      ├── b int not null
      └── a int not null

exec-ddl
CREATE TABLE pkBC (a INT, b INT, c INT, d INT, PRIMARY KEY(b,c))
----
TABLE pkbc
 ├── a int
 ├── b int not null
 ├── c int not null
 ├── d int
 └── INDEX primary
      ├── b int not null
      └── c int not null

exec-ddl
CREATE TABLE pkBAC (a INT, b INT, c INT, d INT, PRIMARY KEY(b,a,c))
----
TABLE pkbac
 ├── a int not null
 ├── b int not null
 ├── c int not null
 ├── d int
 └── INDEX primary
      ├── b int not null
      ├── a int not null
      └── c int not null

exec-ddl
CREATE TABLE pkBAD (a INT, b INT, c INT, d INT, PRIMARY KEY(b,a,d))
----
TABLE pkbad
 ├── a int not null
 ├── b int not null
 ├── c int
 ├── d int not null
 └── INDEX primary
      ├── b int not null
      ├── a int not null
      └── d int not null

build
SELECT * FROM pkBA AS l JOIN pkBC AS r ON l.a = r.a AND l.b = r.b AND l.c = r.c
----
inner-join
 ├── columns: a:1(int!null) b:2(int!null) c:3(int) d:4(int) a:5(int) b:6(int!null) c:7(int!null) d:8(int)
 ├── scan pkba
 │    └── columns: pkba.a:1(int!null) pkba.b:2(int!null) pkba.c:3(int) pkba.d:4(int)
 ├── scan pkbc
 │    └── columns: pkbc.a:5(int) pkbc.b:6(int!null) pkbc.c:7(int!null) pkbc.d:8(int)
 └── and [type=bool]
      ├── and [type=bool]
      │    ├── eq [type=bool]
      │    │    ├── variable: pkba.a [type=int]
      │    │    └── variable: pkbc.a [type=int]
      │    └── eq [type=bool]
      │         ├── variable: pkba.b [type=int]
      │         └── variable: pkbc.b [type=int]
      └── eq [type=bool]
           ├── variable: pkba.c [type=int]
           └── variable: pkbc.c [type=int]

build
SELECT * FROM pkBA NATURAL JOIN pkBAD
----
project
 ├── columns: a:1(int!null) b:2(int!null) c:3(int) d:4(int)
 ├── inner-join
 │    ├── columns: pkba.a:1(int!null) pkba.b:2(int!null) pkba.c:3(int) pkba.d:4(int) pkbad.a:5(int!null) pkbad.b:6(int!null) pkbad.c:7(int) pkbad.d:8(int!null)
 │    ├── scan pkba
 │    │    └── columns: pkba.a:1(int!null) pkba.b:2(int!null) pkba.c:3(int) pkba.d:4(int)
 │    ├── scan pkbad
 │    │    └── columns: pkbad.a:5(int!null) pkbad.b:6(int!null) pkbad.c:7(int) pkbad.d:8(int!null)
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: pkba.a [type=int]
 │         │    └── variable: pkbad.a [type=int]
 │         ├── eq [type=bool]
 │         │    ├── variable: pkba.b [type=int]
 │         │    └── variable: pkbad.b [type=int]
 │         ├── eq [type=bool]
 │         │    ├── variable: pkba.c [type=int]
 │         │    └── variable: pkbad.c [type=int]
 │         └── eq [type=bool]
 │              ├── variable: pkba.d [type=int]
 │              └── variable: pkbad.d [type=int]
 └── projections
      ├── variable: pkba.a [type=int]
      ├── variable: pkba.b [type=int]
      ├── variable: pkba.c [type=int]
      └── variable: pkba.d [type=int]

build
SELECT * FROM pkBAC AS l JOIN pkBAC AS r USING(a, b, c)
----
project
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) d:4(int) d:8(int)
 ├── inner-join
 │    ├── columns: pkbac.a:1(int!null) pkbac.b:2(int!null) pkbac.c:3(int!null) pkbac.d:4(int) pkbac.a:5(int!null) pkbac.b:6(int!null) pkbac.c:7(int!null) pkbac.d:8(int)
 │    ├── scan pkbac
 │    │    └── columns: pkbac.a:1(int!null) pkbac.b:2(int!null) pkbac.c:3(int!null) pkbac.d:4(int)
 │    ├── scan pkbac
 │    │    └── columns: pkbac.a:5(int!null) pkbac.b:6(int!null) pkbac.c:7(int!null) pkbac.d:8(int)
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: pkbac.a [type=int]
 │         │    └── variable: pkbac.a [type=int]
 │         ├── eq [type=bool]
 │         │    ├── variable: pkbac.b [type=int]
 │         │    └── variable: pkbac.b [type=int]
 │         └── eq [type=bool]
 │              ├── variable: pkbac.c [type=int]
 │              └── variable: pkbac.c [type=int]
 └── projections
      ├── variable: pkbac.a [type=int]
      ├── variable: pkbac.b [type=int]
      ├── variable: pkbac.c [type=int]
      ├── variable: pkbac.d [type=int]
      └── variable: pkbac.d [type=int]

build
SELECT * FROM pkBAC AS l JOIN pkBAD AS r ON l.c = r.d AND l.a = r.a AND l.b = r.b
----
inner-join
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) d:4(int) a:5(int!null) b:6(int!null) c:7(int) d:8(int!null)
 ├── scan pkbac
 │    └── columns: pkbac.a:1(int!null) pkbac.b:2(int!null) pkbac.c:3(int!null) pkbac.d:4(int)
 ├── scan pkbad
 │    └── columns: pkbad.a:5(int!null) pkbad.b:6(int!null) pkbad.c:7(int) pkbad.d:8(int!null)
 └── and [type=bool]
      ├── and [type=bool]
      │    ├── eq [type=bool]
      │    │    ├── variable: pkbac.c [type=int]
      │    │    └── variable: pkbad.d [type=int]
      │    └── eq [type=bool]
      │         ├── variable: pkbac.a [type=int]
      │         └── variable: pkbad.a [type=int]
      └── eq [type=bool]
           ├── variable: pkbac.b [type=int]
           └── variable: pkbad.b [type=int]

# Tests with joins with merged columns of collated string type.
exec-ddl
CREATE TABLE str1 (a INT PRIMARY KEY, s STRING COLLATE en_u_ks_level1)
----
TABLE str1
 ├── a int not null
 ├── s collatedstring{en_u_ks_level1}
 └── INDEX primary
      └── a int not null

exec-ddl
CREATE TABLE str2 (a INT PRIMARY KEY, s STRING COLLATE en_u_ks_level1)
----
TABLE str2
 ├── a int not null
 ├── s collatedstring{en_u_ks_level1}
 └── INDEX primary
      └── a int not null

build
SELECT s, str1.s, str2.s FROM str1 INNER JOIN str2 USING(s)
----
project
 ├── columns: s:2(collatedstring{en_u_ks_level1}) s:2(collatedstring{en_u_ks_level1}) s:4(collatedstring{en_u_ks_level1})
 ├── inner-join
 │    ├── columns: str1.a:1(int!null) str1.s:2(collatedstring{en_u_ks_level1}) str2.a:3(int!null) str2.s:4(collatedstring{en_u_ks_level1})
 │    ├── scan str1
 │    │    └── columns: str1.a:1(int!null) str1.s:2(collatedstring{en_u_ks_level1})
 │    ├── scan str2
 │    │    └── columns: str2.a:3(int!null) str2.s:4(collatedstring{en_u_ks_level1})
 │    └── eq [type=bool]
 │         ├── variable: str1.s [type=collatedstring{en_u_ks_level1}]
 │         └── variable: str2.s [type=collatedstring{en_u_ks_level1}]
 └── projections
      ├── variable: str1.s [type=collatedstring{en_u_ks_level1}]
      └── variable: str2.s [type=collatedstring{en_u_ks_level1}]

build
SELECT s, str1.s, str2.s FROM str1 LEFT OUTER JOIN str2 USING(s)
----
project
 ├── columns: s:2(collatedstring{en_u_ks_level1}) s:2(collatedstring{en_u_ks_level1}) s:4(collatedstring{en_u_ks_level1})
 ├── left-join
 │    ├── columns: str1.a:1(int!null) str1.s:2(collatedstring{en_u_ks_level1}) str2.a:3(int) str2.s:4(collatedstring{en_u_ks_level1})
 │    ├── scan str1
 │    │    └── columns: str1.a:1(int!null) str1.s:2(collatedstring{en_u_ks_level1})
 │    ├── scan str2
 │    │    └── columns: str2.a:3(int!null) str2.s:4(collatedstring{en_u_ks_level1})
 │    └── eq [type=bool]
 │         ├── variable: str1.s [type=collatedstring{en_u_ks_level1}]
 │         └── variable: str2.s [type=collatedstring{en_u_ks_level1}]
 └── projections
      ├── variable: str1.s [type=collatedstring{en_u_ks_level1}]
      └── variable: str2.s [type=collatedstring{en_u_ks_level1}]

build
SELECT s, str1.s, str2.s FROM str1 RIGHT OUTER JOIN str2 USING(s)
----
project
 ├── columns: s:5(collatedstring{en_u_ks_level1}) s:2(collatedstring{en_u_ks_level1}) s:4(collatedstring{en_u_ks_level1})
 ├── project
 │    ├── columns: s:5(collatedstring{en_u_ks_level1}) str1.a:1(int) str1.s:2(collatedstring{en_u_ks_level1}) str2.a:3(int!null) str2.s:4(collatedstring{en_u_ks_level1})
 │    ├── right-join
 │    │    ├── columns: str1.a:1(int) str1.s:2(collatedstring{en_u_ks_level1}) str2.a:3(int!null) str2.s:4(collatedstring{en_u_ks_level1})
 │    │    ├── scan str1
 │    │    │    └── columns: str1.a:1(int!null) str1.s:2(collatedstring{en_u_ks_level1})
 │    │    ├── scan str2
 │    │    │    └── columns: str2.a:3(int!null) str2.s:4(collatedstring{en_u_ks_level1})
 │    │    └── eq [type=bool]
 │    │         ├── variable: str1.s [type=collatedstring{en_u_ks_level1}]
 │    │         └── variable: str2.s [type=collatedstring{en_u_ks_level1}]
 │    └── projections
 │         ├── coalesce [type=collatedstring{en_u_ks_level1}]
 │         │    ├── variable: str1.s [type=collatedstring{en_u_ks_level1}]
 │         │    └── variable: str2.s [type=collatedstring{en_u_ks_level1}]
 │         ├── variable: str1.a [type=int]
 │         ├── variable: str1.s [type=collatedstring{en_u_ks_level1}]
 │         ├── variable: str2.a [type=int]
 │         └── variable: str2.s [type=collatedstring{en_u_ks_level1}]
 └── projections
      ├── variable: s [type=collatedstring{en_u_ks_level1}]
      ├── variable: str1.s [type=collatedstring{en_u_ks_level1}]
      └── variable: str2.s [type=collatedstring{en_u_ks_level1}]

build
SELECT s, str1.s, str2.s FROM str1 FULL OUTER JOIN str2 USING(s)
----
project
 ├── columns: s:5(collatedstring{en_u_ks_level1}) s:2(collatedstring{en_u_ks_level1}) s:4(collatedstring{en_u_ks_level1})
 ├── project
 │    ├── columns: s:5(collatedstring{en_u_ks_level1}) str1.a:1(int) str1.s:2(collatedstring{en_u_ks_level1}) str2.a:3(int) str2.s:4(collatedstring{en_u_ks_level1})
 │    ├── full-join
 │    │    ├── columns: str1.a:1(int) str1.s:2(collatedstring{en_u_ks_level1}) str2.a:3(int) str2.s:4(collatedstring{en_u_ks_level1})
 │    │    ├── scan str1
 │    │    │    └── columns: str1.a:1(int!null) str1.s:2(collatedstring{en_u_ks_level1})
 │    │    ├── scan str2
 │    │    │    └── columns: str2.a:3(int!null) str2.s:4(collatedstring{en_u_ks_level1})
 │    │    └── eq [type=bool]
 │    │         ├── variable: str1.s [type=collatedstring{en_u_ks_level1}]
 │    │         └── variable: str2.s [type=collatedstring{en_u_ks_level1}]
 │    └── projections
 │         ├── coalesce [type=collatedstring{en_u_ks_level1}]
 │         │    ├── variable: str1.s [type=collatedstring{en_u_ks_level1}]
 │         │    └── variable: str2.s [type=collatedstring{en_u_ks_level1}]
 │         ├── variable: str1.a [type=int]
 │         ├── variable: str1.s [type=collatedstring{en_u_ks_level1}]
 │         ├── variable: str2.a [type=int]
 │         └── variable: str2.s [type=collatedstring{en_u_ks_level1}]
 └── projections
      ├── variable: s [type=collatedstring{en_u_ks_level1}]
      ├── variable: str1.s [type=collatedstring{en_u_ks_level1}]
      └── variable: str2.s [type=collatedstring{en_u_ks_level1}]

# Verify that we resolve the merged column a to str2.a but use IFNULL for
# column s which is a collated string.
build
SELECT * FROM str1 RIGHT OUTER JOIN str2 USING(a, s)
----
project
 ├── columns: a:3(int!null) s:5(collatedstring{en_u_ks_level1})
 ├── project
 │    ├── columns: str2.a:3(int!null) s:5(collatedstring{en_u_ks_level1}) str1.a:1(int) str1.s:2(collatedstring{en_u_ks_level1}) str2.s:4(collatedstring{en_u_ks_level1})
 │    ├── right-join
 │    │    ├── columns: str1.a:1(int) str1.s:2(collatedstring{en_u_ks_level1}) str2.a:3(int!null) str2.s:4(collatedstring{en_u_ks_level1})
 │    │    ├── scan str1
 │    │    │    └── columns: str1.a:1(int!null) str1.s:2(collatedstring{en_u_ks_level1})
 │    │    ├── scan str2
 │    │    │    └── columns: str2.a:3(int!null) str2.s:4(collatedstring{en_u_ks_level1})
 │    │    └── and [type=bool]
 │    │         ├── eq [type=bool]
 │    │         │    ├── variable: str1.a [type=int]
 │    │         │    └── variable: str2.a [type=int]
 │    │         └── eq [type=bool]
 │    │              ├── variable: str1.s [type=collatedstring{en_u_ks_level1}]
 │    │              └── variable: str2.s [type=collatedstring{en_u_ks_level1}]
 │    └── projections
 │         ├── variable: str2.a [type=int]
 │         ├── coalesce [type=collatedstring{en_u_ks_level1}]
 │         │    ├── variable: str1.s [type=collatedstring{en_u_ks_level1}]
 │         │    └── variable: str2.s [type=collatedstring{en_u_ks_level1}]
 │         ├── variable: str1.a [type=int]
 │         ├── variable: str1.s [type=collatedstring{en_u_ks_level1}]
 │         └── variable: str2.s [type=collatedstring{en_u_ks_level1}]
 └── projections
      ├── variable: str2.a [type=int]
      └── variable: s [type=collatedstring{en_u_ks_level1}]


exec-ddl
CREATE TABLE xyu (x INT, y INT, u INT, PRIMARY KEY(x,y,u))
----
TABLE xyu
 ├── x int not null
 ├── y int not null
 ├── u int not null
 └── INDEX primary
      ├── x int not null
      ├── y int not null
      └── u int not null

exec-ddl
CREATE TABLE xyv (x INT, y INT, v INT, PRIMARY KEY(x,y,v))
----
TABLE xyv
 ├── x int not null
 ├── y int not null
 ├── v int not null
 └── INDEX primary
      ├── x int not null
      ├── y int not null
      └── v int not null

build
SELECT * FROM xyu INNER JOIN xyv USING(x, y) WHERE x > 2
----
project
 ├── columns: x:1(int!null) y:2(int!null) u:3(int!null) v:6(int!null)
 ├── select
 │    ├── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null) xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    ├── inner-join
 │    │    ├── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null) xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    │    ├── scan xyu
 │    │    │    └── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null)
 │    │    ├── scan xyv
 │    │    │    └── columns: xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    │    └── and [type=bool]
 │    │         ├── eq [type=bool]
 │    │         │    ├── variable: xyu.x [type=int]
 │    │         │    └── variable: xyv.x [type=int]
 │    │         └── eq [type=bool]
 │    │              ├── variable: xyu.y [type=int]
 │    │              └── variable: xyv.y [type=int]
 │    └── gt [type=bool]
 │         ├── variable: xyu.x [type=int]
 │         └── const: 2 [type=int]
 └── projections
      ├── variable: xyu.x [type=int]
      ├── variable: xyu.y [type=int]
      ├── variable: xyu.u [type=int]
      └── variable: xyv.v [type=int]

build
SELECT * FROM xyu LEFT OUTER JOIN xyv USING(x, y) WHERE x > 2
----
project
 ├── columns: x:1(int!null) y:2(int!null) u:3(int!null) v:6(int)
 ├── select
 │    ├── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null) xyv.x:4(int) xyv.y:5(int) xyv.v:6(int)
 │    ├── left-join
 │    │    ├── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null) xyv.x:4(int) xyv.y:5(int) xyv.v:6(int)
 │    │    ├── scan xyu
 │    │    │    └── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null)
 │    │    ├── scan xyv
 │    │    │    └── columns: xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    │    └── and [type=bool]
 │    │         ├── eq [type=bool]
 │    │         │    ├── variable: xyu.x [type=int]
 │    │         │    └── variable: xyv.x [type=int]
 │    │         └── eq [type=bool]
 │    │              ├── variable: xyu.y [type=int]
 │    │              └── variable: xyv.y [type=int]
 │    └── gt [type=bool]
 │         ├── variable: xyu.x [type=int]
 │         └── const: 2 [type=int]
 └── projections
      ├── variable: xyu.x [type=int]
      ├── variable: xyu.y [type=int]
      ├── variable: xyu.u [type=int]
      └── variable: xyv.v [type=int]

build
SELECT * FROM xyu RIGHT OUTER JOIN xyv USING(x, y) WHERE x > 2
----
project
 ├── columns: x:4(int!null) y:5(int!null) u:3(int) v:6(int!null)
 ├── select
 │    ├── columns: xyu.x:1(int) xyu.y:2(int) xyu.u:3(int) xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    ├── right-join
 │    │    ├── columns: xyu.x:1(int) xyu.y:2(int) xyu.u:3(int) xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    │    ├── scan xyu
 │    │    │    └── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null)
 │    │    ├── scan xyv
 │    │    │    └── columns: xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    │    └── and [type=bool]
 │    │         ├── eq [type=bool]
 │    │         │    ├── variable: xyu.x [type=int]
 │    │         │    └── variable: xyv.x [type=int]
 │    │         └── eq [type=bool]
 │    │              ├── variable: xyu.y [type=int]
 │    │              └── variable: xyv.y [type=int]
 │    └── gt [type=bool]
 │         ├── variable: xyv.x [type=int]
 │         └── const: 2 [type=int]
 └── projections
      ├── variable: xyv.x [type=int]
      ├── variable: xyv.y [type=int]
      ├── variable: xyu.u [type=int]
      └── variable: xyv.v [type=int]

build
SELECT * FROM xyu FULL OUTER JOIN xyv USING(x, y) WHERE x > 2
----
project
 ├── columns: x:7(int) y:8(int) u:3(int) v:6(int)
 ├── select
 │    ├── columns: xyu.x:1(int) xyu.y:2(int) xyu.u:3(int) xyv.x:4(int) xyv.y:5(int) xyv.v:6(int) x:7(int) y:8(int)
 │    ├── project
 │    │    ├── columns: x:7(int) y:8(int) xyu.x:1(int) xyu.y:2(int) xyu.u:3(int) xyv.x:4(int) xyv.y:5(int) xyv.v:6(int)
 │    │    ├── full-join
 │    │    │    ├── columns: xyu.x:1(int) xyu.y:2(int) xyu.u:3(int) xyv.x:4(int) xyv.y:5(int) xyv.v:6(int)
 │    │    │    ├── scan xyu
 │    │    │    │    └── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null)
 │    │    │    ├── scan xyv
 │    │    │    │    └── columns: xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    │    │    └── and [type=bool]
 │    │    │         ├── eq [type=bool]
 │    │    │         │    ├── variable: xyu.x [type=int]
 │    │    │         │    └── variable: xyv.x [type=int]
 │    │    │         └── eq [type=bool]
 │    │    │              ├── variable: xyu.y [type=int]
 │    │    │              └── variable: xyv.y [type=int]
 │    │    └── projections
 │    │         ├── coalesce [type=int]
 │    │         │    ├── variable: xyu.x [type=int]
 │    │         │    └── variable: xyv.x [type=int]
 │    │         ├── coalesce [type=int]
 │    │         │    ├── variable: xyu.y [type=int]
 │    │         │    └── variable: xyv.y [type=int]
 │    │         ├── variable: xyu.x [type=int]
 │    │         ├── variable: xyu.y [type=int]
 │    │         ├── variable: xyu.u [type=int]
 │    │         ├── variable: xyv.x [type=int]
 │    │         ├── variable: xyv.y [type=int]
 │    │         └── variable: xyv.v [type=int]
 │    └── gt [type=bool]
 │         ├── variable: x [type=int]
 │         └── const: 2 [type=int]
 └── projections
      ├── variable: x [type=int]
      ├── variable: y [type=int]
      ├── variable: xyu.u [type=int]
      └── variable: xyv.v [type=int]

# Verify that we transfer constraints between the two sides.
build
SELECT * FROM xyu INNER JOIN xyv ON xyu.x = xyv.x AND xyu.y = xyv.y WHERE xyu.x = 1 AND xyu.y < 10
----
select
 ├── columns: x:1(int!null) y:2(int!null) u:3(int!null) x:4(int!null) y:5(int!null) v:6(int!null)
 ├── inner-join
 │    ├── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null) xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    ├── scan xyu
 │    │    └── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null)
 │    ├── scan xyv
 │    │    └── columns: xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: xyu.x [type=int]
 │         │    └── variable: xyv.x [type=int]
 │         └── eq [type=bool]
 │              ├── variable: xyu.y [type=int]
 │              └── variable: xyv.y [type=int]
 └── and [type=bool]
      ├── eq [type=bool]
      │    ├── variable: xyu.x [type=int]
      │    └── const: 1 [type=int]
      └── lt [type=bool]
           ├── variable: xyu.y [type=int]
           └── const: 10 [type=int]

build
SELECT * FROM xyu INNER JOIN xyv ON xyu.x = xyv.x AND xyu.y = xyv.y AND xyu.x = 1 AND xyu.y < 10
----
inner-join
 ├── columns: x:1(int!null) y:2(int!null) u:3(int!null) x:4(int!null) y:5(int!null) v:6(int!null)
 ├── scan xyu
 │    └── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null)
 ├── scan xyv
 │    └── columns: xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 └── and [type=bool]
      ├── and [type=bool]
      │    ├── and [type=bool]
      │    │    ├── eq [type=bool]
      │    │    │    ├── variable: xyu.x [type=int]
      │    │    │    └── variable: xyv.x [type=int]
      │    │    └── eq [type=bool]
      │    │         ├── variable: xyu.y [type=int]
      │    │         └── variable: xyv.y [type=int]
      │    └── eq [type=bool]
      │         ├── variable: xyu.x [type=int]
      │         └── const: 1 [type=int]
      └── lt [type=bool]
           ├── variable: xyu.y [type=int]
           └── const: 10 [type=int]

build
SELECT * FROM xyu LEFT OUTER JOIN xyv ON xyu.x = xyv.x AND xyu.y = xyv.y AND xyu.x = 1 AND xyu.y < 10
----
left-join
 ├── columns: x:1(int!null) y:2(int!null) u:3(int!null) x:4(int) y:5(int) v:6(int)
 ├── scan xyu
 │    └── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null)
 ├── scan xyv
 │    └── columns: xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 └── and [type=bool]
      ├── and [type=bool]
      │    ├── and [type=bool]
      │    │    ├── eq [type=bool]
      │    │    │    ├── variable: xyu.x [type=int]
      │    │    │    └── variable: xyv.x [type=int]
      │    │    └── eq [type=bool]
      │    │         ├── variable: xyu.y [type=int]
      │    │         └── variable: xyv.y [type=int]
      │    └── eq [type=bool]
      │         ├── variable: xyu.x [type=int]
      │         └── const: 1 [type=int]
      └── lt [type=bool]
           ├── variable: xyu.y [type=int]
           └── const: 10 [type=int]

build
SELECT * FROM xyu RIGHT OUTER JOIN xyv ON xyu.x = xyv.x AND xyu.y = xyv.y AND xyu.x = 1 AND xyu.y < 10
----
right-join
 ├── columns: x:1(int) y:2(int) u:3(int) x:4(int!null) y:5(int!null) v:6(int!null)
 ├── scan xyu
 │    └── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null)
 ├── scan xyv
 │    └── columns: xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 └── and [type=bool]
      ├── and [type=bool]
      │    ├── and [type=bool]
      │    │    ├── eq [type=bool]
      │    │    │    ├── variable: xyu.x [type=int]
      │    │    │    └── variable: xyv.x [type=int]
      │    │    └── eq [type=bool]
      │    │         ├── variable: xyu.y [type=int]
      │    │         └── variable: xyv.y [type=int]
      │    └── eq [type=bool]
      │         ├── variable: xyu.x [type=int]
      │         └── const: 1 [type=int]
      └── lt [type=bool]
           ├── variable: xyu.y [type=int]
           └── const: 10 [type=int]


# Test OUTER joins that are run in the distSQL merge joiner

build
SELECT * FROM (SELECT * FROM xyu ORDER BY x, y) AS xyu LEFT OUTER JOIN (SELECT * FROM xyv ORDER BY x, y) AS xyv USING(x, y) WHERE x > 2
----
project
 ├── columns: x:1(int!null) y:2(int!null) u:3(int!null) v:6(int)
 ├── select
 │    ├── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null) xyv.x:4(int) xyv.y:5(int) xyv.v:6(int)
 │    ├── left-join
 │    │    ├── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null) xyv.x:4(int) xyv.y:5(int) xyv.v:6(int)
 │    │    ├── scan xyu
 │    │    │    └── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null)
 │    │    ├── scan xyv
 │    │    │    └── columns: xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    │    └── and [type=bool]
 │    │         ├── eq [type=bool]
 │    │         │    ├── variable: xyu.x [type=int]
 │    │         │    └── variable: xyv.x [type=int]
 │    │         └── eq [type=bool]
 │    │              ├── variable: xyu.y [type=int]
 │    │              └── variable: xyv.y [type=int]
 │    └── gt [type=bool]
 │         ├── variable: xyu.x [type=int]
 │         └── const: 2 [type=int]
 └── projections
      ├── variable: xyu.x [type=int]
      ├── variable: xyu.y [type=int]
      ├── variable: xyu.u [type=int]
      └── variable: xyv.v [type=int]

build
SELECT * FROM (SELECT * FROM xyu ORDER BY x, y) AS xyu RIGHT OUTER JOIN (SELECT * FROM xyv ORDER BY x, y) AS xyv USING(x, y) WHERE x > 2
----
project
 ├── columns: x:4(int!null) y:5(int!null) u:3(int) v:6(int!null)
 ├── select
 │    ├── columns: xyu.x:1(int) xyu.y:2(int) xyu.u:3(int) xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    ├── right-join
 │    │    ├── columns: xyu.x:1(int) xyu.y:2(int) xyu.u:3(int) xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    │    ├── scan xyu
 │    │    │    └── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null)
 │    │    ├── scan xyv
 │    │    │    └── columns: xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    │    └── and [type=bool]
 │    │         ├── eq [type=bool]
 │    │         │    ├── variable: xyu.x [type=int]
 │    │         │    └── variable: xyv.x [type=int]
 │    │         └── eq [type=bool]
 │    │              ├── variable: xyu.y [type=int]
 │    │              └── variable: xyv.y [type=int]
 │    └── gt [type=bool]
 │         ├── variable: xyv.x [type=int]
 │         └── const: 2 [type=int]
 └── projections
      ├── variable: xyv.x [type=int]
      ├── variable: xyv.y [type=int]
      ├── variable: xyu.u [type=int]
      └── variable: xyv.v [type=int]

build
SELECT * FROM (SELECT * FROM xyu ORDER BY x, y) AS xyu FULL OUTER JOIN (SELECT * FROM xyv ORDER BY x, y) AS xyv USING(x, y) WHERE x > 2
----
project
 ├── columns: x:7(int) y:8(int) u:3(int) v:6(int)
 ├── select
 │    ├── columns: xyu.x:1(int) xyu.y:2(int) xyu.u:3(int) xyv.x:4(int) xyv.y:5(int) xyv.v:6(int) x:7(int) y:8(int)
 │    ├── project
 │    │    ├── columns: x:7(int) y:8(int) xyu.x:1(int) xyu.y:2(int) xyu.u:3(int) xyv.x:4(int) xyv.y:5(int) xyv.v:6(int)
 │    │    ├── full-join
 │    │    │    ├── columns: xyu.x:1(int) xyu.y:2(int) xyu.u:3(int) xyv.x:4(int) xyv.y:5(int) xyv.v:6(int)
 │    │    │    ├── scan xyu
 │    │    │    │    └── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null)
 │    │    │    ├── scan xyv
 │    │    │    │    └── columns: xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    │    │    └── and [type=bool]
 │    │    │         ├── eq [type=bool]
 │    │    │         │    ├── variable: xyu.x [type=int]
 │    │    │         │    └── variable: xyv.x [type=int]
 │    │    │         └── eq [type=bool]
 │    │    │              ├── variable: xyu.y [type=int]
 │    │    │              └── variable: xyv.y [type=int]
 │    │    └── projections
 │    │         ├── coalesce [type=int]
 │    │         │    ├── variable: xyu.x [type=int]
 │    │         │    └── variable: xyv.x [type=int]
 │    │         ├── coalesce [type=int]
 │    │         │    ├── variable: xyu.y [type=int]
 │    │         │    └── variable: xyv.y [type=int]
 │    │         ├── variable: xyu.x [type=int]
 │    │         ├── variable: xyu.y [type=int]
 │    │         ├── variable: xyu.u [type=int]
 │    │         ├── variable: xyv.x [type=int]
 │    │         ├── variable: xyv.y [type=int]
 │    │         └── variable: xyv.v [type=int]
 │    └── gt [type=bool]
 │         ├── variable: x [type=int]
 │         └── const: 2 [type=int]
 └── projections
      ├── variable: x [type=int]
      ├── variable: y [type=int]
      ├── variable: xyu.u [type=int]
      └── variable: xyv.v [type=int]

build
SELECT * FROM (SELECT * FROM xyu ORDER BY x, y) AS xyu LEFT OUTER JOIN (SELECT * FROM xyv ORDER BY x, y) AS xyv ON xyu.x = xyv.x AND xyu.y = xyv.y AND xyu.x = 1 AND xyu.y < 10
----
left-join
 ├── columns: x:1(int!null) y:2(int!null) u:3(int!null) x:4(int) y:5(int) v:6(int)
 ├── scan xyu
 │    └── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null)
 ├── scan xyv
 │    └── columns: xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 └── and [type=bool]
      ├── and [type=bool]
      │    ├── and [type=bool]
      │    │    ├── eq [type=bool]
      │    │    │    ├── variable: xyu.x [type=int]
      │    │    │    └── variable: xyv.x [type=int]
      │    │    └── eq [type=bool]
      │    │         ├── variable: xyu.y [type=int]
      │    │         └── variable: xyv.y [type=int]
      │    └── eq [type=bool]
      │         ├── variable: xyu.x [type=int]
      │         └── const: 1 [type=int]
      └── lt [type=bool]
           ├── variable: xyu.y [type=int]
           └── const: 10 [type=int]

build
SELECT * FROM xyu RIGHT OUTER JOIN (SELECT * FROM xyv ORDER BY x, y) AS xyv ON xyu.x = xyv.x AND xyu.y = xyv.y AND xyu.x = 1 AND xyu.y < 10
----
right-join
 ├── columns: x:1(int) y:2(int) u:3(int) x:4(int!null) y:5(int!null) v:6(int!null)
 ├── scan xyu
 │    └── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null)
 ├── scan xyv
 │    └── columns: xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 └── and [type=bool]
      ├── and [type=bool]
      │    ├── and [type=bool]
      │    │    ├── eq [type=bool]
      │    │    │    ├── variable: xyu.x [type=int]
      │    │    │    └── variable: xyv.x [type=int]
      │    │    └── eq [type=bool]
      │    │         ├── variable: xyu.y [type=int]
      │    │         └── variable: xyv.y [type=int]
      │    └── eq [type=bool]
      │         ├── variable: xyu.x [type=int]
      │         └── const: 1 [type=int]
      └── lt [type=bool]
           ├── variable: xyu.y [type=int]
           └── const: 10 [type=int]

# Regression test for #20472: break up tuple inequalities.
build
SELECT * FROM xyu JOIN xyv USING(x, y) WHERE (x, y, u) > (1, 2, 3)
----
project
 ├── columns: x:1(int!null) y:2(int!null) u:3(int!null) v:6(int!null)
 ├── select
 │    ├── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null) xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    ├── inner-join
 │    │    ├── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null) xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    │    ├── scan xyu
 │    │    │    └── columns: xyu.x:1(int!null) xyu.y:2(int!null) xyu.u:3(int!null)
 │    │    ├── scan xyv
 │    │    │    └── columns: xyv.x:4(int!null) xyv.y:5(int!null) xyv.v:6(int!null)
 │    │    └── and [type=bool]
 │    │         ├── eq [type=bool]
 │    │         │    ├── variable: xyu.x [type=int]
 │    │         │    └── variable: xyv.x [type=int]
 │    │         └── eq [type=bool]
 │    │              ├── variable: xyu.y [type=int]
 │    │              └── variable: xyv.y [type=int]
 │    └── gt [type=bool]
 │         ├── tuple [type=tuple{int, int, int}]
 │         │    ├── variable: xyu.x [type=int]
 │         │    ├── variable: xyu.y [type=int]
 │         │    └── variable: xyu.u [type=int]
 │         └── tuple [type=tuple{int, int, int}]
 │              ├── const: 1 [type=int]
 │              ├── const: 2 [type=int]
 │              └── const: 3 [type=int]
 └── projections
      ├── variable: xyu.x [type=int]
      ├── variable: xyu.y [type=int]
      ├── variable: xyu.u [type=int]
      └── variable: xyv.v [type=int]


# Regression test for #20858.

exec-ddl
CREATE TABLE l (a INT PRIMARY KEY)
----
TABLE l
 ├── a int not null
 └── INDEX primary
      └── a int not null

exec-ddl
CREATE TABLE r (a INT PRIMARY KEY)
----
TABLE r
 ├── a int not null
 └── INDEX primary
      └── a int not null

build
SELECT * FROM l LEFT OUTER JOIN r ON l.a = r.a WHERE l.a = 3;
----
select
 ├── columns: a:1(int!null) a:2(int)
 ├── left-join
 │    ├── columns: l.a:1(int!null) r.a:2(int)
 │    ├── scan l
 │    │    └── columns: l.a:1(int!null)
 │    ├── scan r
 │    │    └── columns: r.a:2(int!null)
 │    └── eq [type=bool]
 │         ├── variable: l.a [type=int]
 │         └── variable: r.a [type=int]
 └── eq [type=bool]
      ├── variable: l.a [type=int]
      └── const: 3 [type=int]

build
SELECT * FROM l RIGHT OUTER JOIN r ON l.a = r.a WHERE r.a = 3;
----
select
 ├── columns: a:1(int) a:2(int!null)
 ├── right-join
 │    ├── columns: l.a:1(int) r.a:2(int!null)
 │    ├── scan l
 │    │    └── columns: l.a:1(int!null)
 │    ├── scan r
 │    │    └── columns: r.a:2(int!null)
 │    └── eq [type=bool]
 │         ├── variable: l.a [type=int]
 │         └── variable: r.a [type=int]
 └── eq [type=bool]
      ├── variable: r.a [type=int]
      └── const: 3 [type=int]

build
SELECT * FROM l LEFT OUTER JOIN r USING(a) WHERE a = 1
----
project
 ├── columns: a:1(int!null)
 ├── select
 │    ├── columns: l.a:1(int!null) r.a:2(int)
 │    ├── left-join
 │    │    ├── columns: l.a:1(int!null) r.a:2(int)
 │    │    ├── scan l
 │    │    │    └── columns: l.a:1(int!null)
 │    │    ├── scan r
 │    │    │    └── columns: r.a:2(int!null)
 │    │    └── eq [type=bool]
 │    │         ├── variable: l.a [type=int]
 │    │         └── variable: r.a [type=int]
 │    └── eq [type=bool]
 │         ├── variable: l.a [type=int]
 │         └── const: 1 [type=int]
 └── projections
      └── variable: l.a [type=int]

build
SELECT * FROM l RIGHT OUTER JOIN r USING(a) WHERE a = 3
----
project
 ├── columns: a:2(int!null)
 ├── select
 │    ├── columns: l.a:1(int) r.a:2(int!null)
 │    ├── right-join
 │    │    ├── columns: l.a:1(int) r.a:2(int!null)
 │    │    ├── scan l
 │    │    │    └── columns: l.a:1(int!null)
 │    │    ├── scan r
 │    │    │    └── columns: r.a:2(int!null)
 │    │    └── eq [type=bool]
 │    │         ├── variable: l.a [type=int]
 │    │         └── variable: r.a [type=int]
 │    └── eq [type=bool]
 │         ├── variable: r.a [type=int]
 │         └── const: 3 [type=int]
 └── projections
      └── variable: r.a [type=int]

# Regression tests for #21243
exec-ddl
CREATE TABLE abcdef (
  a INT NOT NULL,
  b INT NOT NULL,
  c INT NOT NULL,
  d INT NOT NULL,
  e INT NULL,
  f INT NULL,
  PRIMARY KEY (a ASC, b ASC, c DESC, d ASC)
)
----
TABLE abcdef
 ├── a int not null
 ├── b int not null
 ├── c int not null
 ├── d int not null
 ├── e int
 ├── f int
 └── INDEX primary
      ├── a int not null
      ├── b int not null
      ├── c int not null desc
      └── d int not null

exec-ddl
CREATE TABLE abg (
  a INT NOT NULL,
  b INT NOT NULL,
  g INT NULL,
  PRIMARY KEY (a ASC, b ASC)
);
----
TABLE abg
 ├── a int not null
 ├── b int not null
 ├── g int
 └── INDEX primary
      ├── a int not null
      └── b int not null

build
SELECT * FROM abcdef join (select * from abg) USING (a,b) WHERE ((a,b)>(1,2) OR ((a,b)=(1,2) AND c < 6) OR ((a,b,c)=(1,2,6) AND d > 8))
----
project
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) d:4(int!null) e:5(int) f:6(int) g:9(int)
 ├── select
 │    ├── columns: abcdef.a:1(int!null) abcdef.b:2(int!null) abcdef.c:3(int!null) abcdef.d:4(int!null) abcdef.e:5(int) abcdef.f:6(int) abg.a:7(int!null) abg.b:8(int!null) abg.g:9(int)
 │    ├── inner-join
 │    │    ├── columns: abcdef.a:1(int!null) abcdef.b:2(int!null) abcdef.c:3(int!null) abcdef.d:4(int!null) abcdef.e:5(int) abcdef.f:6(int) abg.a:7(int!null) abg.b:8(int!null) abg.g:9(int)
 │    │    ├── scan abcdef
 │    │    │    └── columns: abcdef.a:1(int!null) abcdef.b:2(int!null) abcdef.c:3(int!null) abcdef.d:4(int!null) abcdef.e:5(int) abcdef.f:6(int)
 │    │    ├── scan abg
 │    │    │    └── columns: abg.a:7(int!null) abg.b:8(int!null) abg.g:9(int)
 │    │    └── and [type=bool]
 │    │         ├── eq [type=bool]
 │    │         │    ├── variable: abcdef.a [type=int]
 │    │         │    └── variable: abg.a [type=int]
 │    │         └── eq [type=bool]
 │    │              ├── variable: abcdef.b [type=int]
 │    │              └── variable: abg.b [type=int]
 │    └── or [type=bool]
 │         ├── or [type=bool]
 │         │    ├── gt [type=bool]
 │         │    │    ├── tuple [type=tuple{int, int}]
 │         │    │    │    ├── variable: abcdef.a [type=int]
 │         │    │    │    └── variable: abcdef.b [type=int]
 │         │    │    └── tuple [type=tuple{int, int}]
 │         │    │         ├── const: 1 [type=int]
 │         │    │         └── const: 2 [type=int]
 │         │    └── and [type=bool]
 │         │         ├── eq [type=bool]
 │         │         │    ├── tuple [type=tuple{int, int}]
 │         │         │    │    ├── variable: abcdef.a [type=int]
 │         │         │    │    └── variable: abcdef.b [type=int]
 │         │         │    └── tuple [type=tuple{int, int}]
 │         │         │         ├── const: 1 [type=int]
 │         │         │         └── const: 2 [type=int]
 │         │         └── lt [type=bool]
 │         │              ├── variable: abcdef.c [type=int]
 │         │              └── const: 6 [type=int]
 │         └── and [type=bool]
 │              ├── eq [type=bool]
 │              │    ├── tuple [type=tuple{int, int, int}]
 │              │    │    ├── variable: abcdef.a [type=int]
 │              │    │    ├── variable: abcdef.b [type=int]
 │              │    │    └── variable: abcdef.c [type=int]
 │              │    └── tuple [type=tuple{int, int, int}]
 │              │         ├── const: 1 [type=int]
 │              │         ├── const: 2 [type=int]
 │              │         └── const: 6 [type=int]
 │              └── gt [type=bool]
 │                   ├── variable: abcdef.d [type=int]
 │                   └── const: 8 [type=int]
 └── projections
      ├── variable: abcdef.a [type=int]
      ├── variable: abcdef.b [type=int]
      ├── variable: abcdef.c [type=int]
      ├── variable: abcdef.d [type=int]
      ├── variable: abcdef.e [type=int]
      ├── variable: abcdef.f [type=int]
      └── variable: abg.g [type=int]

# Regression tests for mixed-type equality columns (#22514).
exec-ddl
CREATE TABLE foo (
  a INT,
  b INT,
  c FLOAT,
  d FLOAT
)
----
TABLE foo
 ├── a int
 ├── b int
 ├── c float
 ├── d float
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

exec-ddl
CREATE TABLE bar (
  a INT,
  b FLOAT,
  c FLOAT,
  d INT
)
----
TABLE bar
 ├── a int
 ├── b float
 ├── c float
 ├── d int
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

# Only a and c can be equality columns.
build
SELECT * FROM foo NATURAL JOIN bar
----
project
 ├── columns: a:1(int) b:2(int) c:3(float) d:4(float)
 ├── inner-join
 │    ├── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null) bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    ├── scan foo
 │    │    └── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null)
 │    ├── scan bar
 │    │    └── columns: bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: foo.a [type=int]
 │         │    └── variable: bar.a [type=int]
 │         ├── eq [type=bool]
 │         │    ├── variable: foo.b [type=int]
 │         │    └── variable: bar.b [type=float]
 │         ├── eq [type=bool]
 │         │    ├── variable: foo.c [type=float]
 │         │    └── variable: bar.c [type=float]
 │         └── eq [type=bool]
 │              ├── variable: foo.d [type=float]
 │              └── variable: bar.d [type=int]
 └── projections
      ├── variable: foo.a [type=int]
      ├── variable: foo.b [type=int]
      ├── variable: foo.c [type=float]
      └── variable: foo.d [type=float]

# b can't be an equality column.
build
SELECT * FROM foo JOIN bar USING (b)
----
project
 ├── columns: b:2(int) a:1(int) c:3(float) d:4(float) a:6(int) c:8(float) d:9(int)
 ├── inner-join
 │    ├── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null) bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    ├── scan foo
 │    │    └── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null)
 │    ├── scan bar
 │    │    └── columns: bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    └── eq [type=bool]
 │         ├── variable: foo.b [type=int]
 │         └── variable: bar.b [type=float]
 └── projections
      ├── variable: foo.b [type=int]
      ├── variable: foo.a [type=int]
      ├── variable: foo.c [type=float]
      ├── variable: foo.d [type=float]
      ├── variable: bar.a [type=int]
      ├── variable: bar.c [type=float]
      └── variable: bar.d [type=int]

# Only a can be an equality column.
build
SELECT * FROM foo JOIN bar USING (a, b)
----
project
 ├── columns: a:1(int) b:2(int) c:3(float) d:4(float) c:8(float) d:9(int)
 ├── inner-join
 │    ├── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null) bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    ├── scan foo
 │    │    └── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null)
 │    ├── scan bar
 │    │    └── columns: bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: foo.a [type=int]
 │         │    └── variable: bar.a [type=int]
 │         └── eq [type=bool]
 │              ├── variable: foo.b [type=int]
 │              └── variable: bar.b [type=float]
 └── projections
      ├── variable: foo.a [type=int]
      ├── variable: foo.b [type=int]
      ├── variable: foo.c [type=float]
      ├── variable: foo.d [type=float]
      ├── variable: bar.c [type=float]
      └── variable: bar.d [type=int]

# Only a and c can be equality columns.
build
SELECT * FROM foo JOIN bar USING (a, b, c)
----
project
 ├── columns: a:1(int) b:2(int) c:3(float) d:4(float) d:9(int)
 ├── inner-join
 │    ├── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null) bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    ├── scan foo
 │    │    └── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null)
 │    ├── scan bar
 │    │    └── columns: bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: foo.a [type=int]
 │         │    └── variable: bar.a [type=int]
 │         ├── eq [type=bool]
 │         │    ├── variable: foo.b [type=int]
 │         │    └── variable: bar.b [type=float]
 │         └── eq [type=bool]
 │              ├── variable: foo.c [type=float]
 │              └── variable: bar.c [type=float]
 └── projections
      ├── variable: foo.a [type=int]
      ├── variable: foo.b [type=int]
      ├── variable: foo.c [type=float]
      ├── variable: foo.d [type=float]
      └── variable: bar.d [type=int]

# b can't be an equality column.
build
SELECT * FROM foo JOIN bar ON foo.b = bar.b
----
project
 ├── columns: a:1(int) b:2(int) c:3(float) d:4(float) a:6(int) b:7(float) c:8(float) d:9(int)
 ├── inner-join
 │    ├── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null) bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    ├── scan foo
 │    │    └── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null)
 │    ├── scan bar
 │    │    └── columns: bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    └── eq [type=bool]
 │         ├── variable: foo.b [type=int]
 │         └── variable: bar.b [type=float]
 └── projections
      ├── variable: foo.a [type=int]
      ├── variable: foo.b [type=int]
      ├── variable: foo.c [type=float]
      ├── variable: foo.d [type=float]
      ├── variable: bar.a [type=int]
      ├── variable: bar.b [type=float]
      ├── variable: bar.c [type=float]
      └── variable: bar.d [type=int]

# Only a can be an equality column.
build
SELECT * FROM foo JOIN bar ON foo.a = bar.a AND foo.b = bar.b
----
project
 ├── columns: a:1(int) b:2(int) c:3(float) d:4(float) a:6(int) b:7(float) c:8(float) d:9(int)
 ├── inner-join
 │    ├── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null) bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    ├── scan foo
 │    │    └── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null)
 │    ├── scan bar
 │    │    └── columns: bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: foo.a [type=int]
 │         │    └── variable: bar.a [type=int]
 │         └── eq [type=bool]
 │              ├── variable: foo.b [type=int]
 │              └── variable: bar.b [type=float]
 └── projections
      ├── variable: foo.a [type=int]
      ├── variable: foo.b [type=int]
      ├── variable: foo.c [type=float]
      ├── variable: foo.d [type=float]
      ├── variable: bar.a [type=int]
      ├── variable: bar.b [type=float]
      ├── variable: bar.c [type=float]
      └── variable: bar.d [type=int]

build
SELECT * FROM foo, bar WHERE foo.b = bar.b
----
project
 ├── columns: a:1(int) b:2(int) c:3(float) d:4(float) a:6(int) b:7(float) c:8(float) d:9(int)
 ├── select
 │    ├── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null) bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    ├── inner-join
 │    │    ├── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null) bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    │    ├── scan foo
 │    │    │    └── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null)
 │    │    ├── scan bar
 │    │    │    └── columns: bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    │    └── true [type=bool]
 │    └── eq [type=bool]
 │         ├── variable: foo.b [type=int]
 │         └── variable: bar.b [type=float]
 └── projections
      ├── variable: foo.a [type=int]
      ├── variable: foo.b [type=int]
      ├── variable: foo.c [type=float]
      ├── variable: foo.d [type=float]
      ├── variable: bar.a [type=int]
      ├── variable: bar.b [type=float]
      ├── variable: bar.c [type=float]
      └── variable: bar.d [type=int]

# Only a can be an equality column.
build
SELECT * FROM foo, bar WHERE foo.a = bar.a AND foo.b = bar.b
----
project
 ├── columns: a:1(int) b:2(int) c:3(float) d:4(float) a:6(int) b:7(float) c:8(float) d:9(int)
 ├── select
 │    ├── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null) bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    ├── inner-join
 │    │    ├── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null) bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    │    ├── scan foo
 │    │    │    └── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null)
 │    │    ├── scan bar
 │    │    │    └── columns: bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    │    └── true [type=bool]
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: foo.a [type=int]
 │         │    └── variable: bar.a [type=int]
 │         └── eq [type=bool]
 │              ├── variable: foo.b [type=int]
 │              └── variable: bar.b [type=float]
 └── projections
      ├── variable: foo.a [type=int]
      ├── variable: foo.b [type=int]
      ├── variable: foo.c [type=float]
      ├── variable: foo.d [type=float]
      ├── variable: bar.a [type=int]
      ├── variable: bar.b [type=float]
      ├── variable: bar.c [type=float]
      └── variable: bar.d [type=int]

# Only a and c can be equality columns.
build
SELECT * FROM foo JOIN bar USING (a, b) WHERE foo.c = bar.c AND foo.d = bar.d
----
project
 ├── columns: a:1(int) b:2(int) c:3(float) d:4(float) c:8(float) d:9(int)
 ├── select
 │    ├── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null) bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    ├── inner-join
 │    │    ├── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null) bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    │    ├── scan foo
 │    │    │    └── columns: foo.a:1(int) foo.b:2(int) foo.c:3(float) foo.d:4(float) foo.rowid:5(int!null)
 │    │    ├── scan bar
 │    │    │    └── columns: bar.a:6(int) bar.b:7(float) bar.c:8(float) bar.d:9(int) bar.rowid:10(int!null)
 │    │    └── and [type=bool]
 │    │         ├── eq [type=bool]
 │    │         │    ├── variable: foo.a [type=int]
 │    │         │    └── variable: bar.a [type=int]
 │    │         └── eq [type=bool]
 │    │              ├── variable: foo.b [type=int]
 │    │              └── variable: bar.b [type=float]
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: foo.c [type=float]
 │         │    └── variable: bar.c [type=float]
 │         └── eq [type=bool]
 │              ├── variable: foo.d [type=float]
 │              └── variable: bar.d [type=int]
 └── projections
      ├── variable: foo.a [type=int]
      ├── variable: foo.b [type=int]
      ├── variable: foo.c [type=float]
      ├── variable: foo.d [type=float]
      ├── variable: bar.c [type=float]
      └── variable: bar.d [type=int]

exec-ddl
CREATE TABLE t.kv (
  k INT PRIMARY KEY,
  v INT,
  w INT,
  s STRING
)
----
TABLE kv
 ├── k int not null
 ├── v int
 ├── w int
 ├── s string
 └── INDEX primary
      └── k int not null

build
SELECT k FROM kv, (SELECT 1 AS k)
----
project
 ├── columns: k:5(int)
 ├── inner-join
 │    ├── columns: kv.k:1(int!null) kv.v:2(int) kv.w:3(int) kv.s:4(string) k:5(int)
 │    ├── scan kv
 │    │    └── columns: kv.k:1(int!null) kv.v:2(int) kv.w:3(int) kv.s:4(string)
 │    ├── project
 │    │    ├── columns: k:5(int)
 │    │    ├── values
 │    │    │    └── tuple [type=tuple{}]
 │    │    └── projections
 │    │         └── const: 1 [type=int]
 │    └── true [type=bool]
 └── projections
      └── variable: k [type=int]

build
select * from (select 1 as k), (select 2 as k) where 1 in (select k from kv)
----
select
 ├── columns: k:1(int) k:2(int)
 ├── inner-join
 │    ├── columns: k:1(int) k:2(int)
 │    ├── project
 │    │    ├── columns: k:1(int)
 │    │    ├── values
 │    │    │    └── tuple [type=tuple{}]
 │    │    └── projections
 │    │         └── const: 1 [type=int]
 │    ├── project
 │    │    ├── columns: k:2(int)
 │    │    ├── values
 │    │    │    └── tuple [type=tuple{}]
 │    │    └── projections
 │    │         └── const: 2 [type=int]
 │    └── true [type=bool]
 └── any [type=bool]
      └── project
           ├── columns: column7:7(bool)
           ├── project
           │    ├── columns: kv.k:3(int!null)
           │    ├── scan kv
           │    │    └── columns: kv.k:3(int!null) kv.v:4(int) kv.w:5(int) kv.s:6(string)
           │    └── projections
           │         └── variable: kv.k [type=int]
           └── projections
                └── eq [type=bool]
                     ├── const: 1 [type=int]
                     └── variable: kv.k [type=int]

# Test natural outer join when the left side has unknown type
build
SELECT * FROM (VALUES (NULL, NULL)) NATURAL FULL OUTER JOIN (SELECT * FROM (VALUES (1, 1)))
----
project
 ├── columns: column1:5(int) column2:6(int)
 ├── project
 │    ├── columns: column1:5(int) column2:6(int) column1:1(unknown) column2:2(unknown) column1:3(int) column2:4(int)
 │    ├── full-join
 │    │    ├── columns: column1:1(unknown) column2:2(unknown) column1:3(int) column2:4(int)
 │    │    ├── values
 │    │    │    ├── columns: column1:1(unknown) column2:2(unknown)
 │    │    │    └── tuple [type=tuple{unknown, unknown}]
 │    │    │         ├── null [type=unknown]
 │    │    │         └── null [type=unknown]
 │    │    ├── values
 │    │    │    ├── columns: column1:3(int) column2:4(int)
 │    │    │    └── tuple [type=tuple{int, int}]
 │    │    │         ├── const: 1 [type=int]
 │    │    │         └── const: 1 [type=int]
 │    │    └── and [type=bool]
 │    │         ├── eq [type=bool]
 │    │         │    ├── variable: column1 [type=unknown]
 │    │         │    └── variable: column1 [type=int]
 │    │         └── eq [type=bool]
 │    │              ├── variable: column2 [type=unknown]
 │    │              └── variable: column2 [type=int]
 │    └── projections
 │         ├── coalesce [type=int]
 │         │    ├── variable: column1 [type=unknown]
 │         │    └── variable: column1 [type=int]
 │         ├── coalesce [type=int]
 │         │    ├── variable: column2 [type=unknown]
 │         │    └── variable: column2 [type=int]
 │         ├── variable: column1 [type=unknown]
 │         ├── variable: column2 [type=unknown]
 │         ├── variable: column1 [type=int]
 │         └── variable: column2 [type=int]
 └── projections
      ├── variable: column1 [type=int]
      └── variable: column2 [type=int]

# Regression test for #23609: make sure that the type of the merged column
# is int (not unknown).
build
SELECT column1, column1+1
FROM
  (SELECT * FROM
    (VALUES (NULL, NULL)) AS t
      NATURAL FULL OUTER JOIN
    (VALUES (1, 1)) AS u)
----
project
 ├── columns: column1:5(int) column7:7(int)
 ├── project
 │    ├── columns: column1:5(int) column2:6(int)
 │    ├── project
 │    │    ├── columns: column1:5(int) column2:6(int) column1:1(unknown) column2:2(unknown) column1:3(int) column2:4(int)
 │    │    ├── full-join
 │    │    │    ├── columns: column1:1(unknown) column2:2(unknown) column1:3(int) column2:4(int)
 │    │    │    ├── values
 │    │    │    │    ├── columns: column1:1(unknown) column2:2(unknown)
 │    │    │    │    └── tuple [type=tuple{unknown, unknown}]
 │    │    │    │         ├── null [type=unknown]
 │    │    │    │         └── null [type=unknown]
 │    │    │    ├── values
 │    │    │    │    ├── columns: column1:3(int) column2:4(int)
 │    │    │    │    └── tuple [type=tuple{int, int}]
 │    │    │    │         ├── const: 1 [type=int]
 │    │    │    │         └── const: 1 [type=int]
 │    │    │    └── and [type=bool]
 │    │    │         ├── eq [type=bool]
 │    │    │         │    ├── variable: column1 [type=unknown]
 │    │    │         │    └── variable: column1 [type=int]
 │    │    │         └── eq [type=bool]
 │    │    │              ├── variable: column2 [type=unknown]
 │    │    │              └── variable: column2 [type=int]
 │    │    └── projections
 │    │         ├── coalesce [type=int]
 │    │         │    ├── variable: column1 [type=unknown]
 │    │         │    └── variable: column1 [type=int]
 │    │         ├── coalesce [type=int]
 │    │         │    ├── variable: column2 [type=unknown]
 │    │         │    └── variable: column2 [type=int]
 │    │         ├── variable: column1 [type=unknown]
 │    │         ├── variable: column2 [type=unknown]
 │    │         ├── variable: column1 [type=int]
 │    │         └── variable: column2 [type=int]
 │    └── projections
 │         ├── variable: column1 [type=int]
 │         └── variable: column2 [type=int]
 └── projections
      ├── variable: column1 [type=int]
      └── plus [type=int]
           ├── variable: column1 [type=int]
           └── const: 1 [type=int]
