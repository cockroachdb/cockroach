exec-ddl
CREATE TABLE a (x INT PRIMARY KEY, y FLOAT)
----

exec-ddl
CREATE TABLE b (x INT, y FLOAT)
----

exec-ddl
CREATE TABLE c (x INT, y FLOAT, z VARCHAR, CONSTRAINT fk_x_ref_a FOREIGN KEY (x) REFERENCES a (x))
----

build
SELECT * FROM a, b
----
project
 ├── columns: x:1!null y:2 x:3 y:4
 └── inner-join (cross)
      ├── columns: a.x:1!null a.y:2 b.x:3 b.y:4 rowid:5!null
      ├── scan a
      │    └── columns: a.x:1!null a.y:2
      ├── scan b
      │    └── columns: b.x:3 b.y:4 rowid:5!null
      └── filters (true)

build
SELECT a.x, b.y FROM a, b WHERE a.x = b.x
----
project
 ├── columns: x:1!null y:4
 └── select
      ├── columns: a.x:1!null a.y:2 b.x:3!null b.y:4 rowid:5!null
      ├── inner-join (cross)
      │    ├── columns: a.x:1!null a.y:2 b.x:3 b.y:4 rowid:5!null
      │    ├── scan a
      │    │    └── columns: a.x:1!null a.y:2
      │    ├── scan b
      │    │    └── columns: b.x:3 b.y:4 rowid:5!null
      │    └── filters (true)
      └── filters
           └── a.x:1 = b.x:3

build
SELECT * FROM c, b, a WHERE c.x = a.x AND b.x = a.x
----
project
 ├── columns: x:1!null y:2 z:3 x:5!null y:6 x:8!null y:9
 └── select
      ├── columns: c.x:1!null c.y:2 z:3 c.rowid:4!null b.x:5!null b.y:6 b.rowid:7!null a.x:8!null a.y:9
      ├── inner-join (cross)
      │    ├── columns: c.x:1 c.y:2 z:3 c.rowid:4!null b.x:5 b.y:6 b.rowid:7!null a.x:8!null a.y:9
      │    ├── scan c
      │    │    └── columns: c.x:1 c.y:2 z:3 c.rowid:4!null
      │    ├── inner-join (cross)
      │    │    ├── columns: b.x:5 b.y:6 b.rowid:7!null a.x:8!null a.y:9
      │    │    ├── scan b
      │    │    │    └── columns: b.x:5 b.y:6 b.rowid:7!null
      │    │    ├── scan a
      │    │    │    └── columns: a.x:8!null a.y:9
      │    │    └── filters (true)
      │    └── filters (true)
      └── filters
           └── (c.x:1 = a.x:8) AND (b.x:5 = a.x:8)

exec-ddl
CREATE TABLE db1.a (x INT PRIMARY KEY, y FLOAT, z STRING)
----

exec-ddl
CREATE TABLE db2.a (x INT PRIMARY KEY, y FLOAT)
----

build fully-qualify-names
SELECT a.x FROM db1.a, db2.a
----
error (42P09): ambiguous source name: "a"

build fully-qualify-names
SELECT x FROM a, b
----
error (42702): column reference "x" is ambiguous (candidates: a.x, b.x)

build fully-qualify-names
SELECT * FROM db1.a, db2.a
----
inner-join (cross)
 ├── columns: x:1!null y:2 z:3 x:4!null y:5
 ├── scan db1.public.a
 │    └── columns: db1.public.a.x:1!null db1.public.a.y:2 db1.public.a.z:3
 ├── scan db2.public.a
 │    └── columns: db2.public.a.x:4!null db2.public.a.y:5
 └── filters (true)

build fully-qualify-names
SELECT * FROM a, a
----
error (42712): source name "a" specified more than once (missing AS clause)

# TODO(justin): this case should be rejected for having a name specified twice.
build fully-qualify-names
SELECT * FROM a, (SELECT * FROM a) AS a
----
inner-join (cross)
 ├── columns: x:1!null y:2 x:3!null y:4
 ├── scan t.public.a
 │    └── columns: t.public.a.x:1!null t.public.a.y:2
 ├── scan t.public.a
 │    └── columns: t.public.a.x:3!null t.public.a.y:4
 └── filters (true)

build fully-qualify-names
SELECT * FROM t.a, a
----
error (42712): source name "a" specified more than once (missing AS clause)

build fully-qualify-names
SELECT * FROM t.a, a AS a
----
inner-join (cross)
 ├── columns: x:1!null y:2 x:3!null y:4
 ├── scan t.public.a
 │    └── columns: t.public.a.x:1!null t.public.a.y:2
 ├── scan t.public.a
 │    └── columns: t.public.a.x:3!null t.public.a.y:4
 └── filters (true)

build fully-qualify-names
SELECT a.* FROM t.a, a AS a
----
error (42P09): ambiguous source name: "a"
