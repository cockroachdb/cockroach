exec-ddl
CREATE TABLE t.a (x INT PRIMARY KEY, y FLOAT)
----
TABLE a
 ├── x int not null
 ├── y float
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE t.b (x INT, y FLOAT)
----
TABLE b
 ├── x int
 ├── y float
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

exec-ddl
CREATE TABLE t.c (x INT, y FLOAT, z VARCHAR, CONSTRAINT fk_x_ref_a FOREIGN KEY (x) REFERENCES t.a (x))
----
TABLE c
 ├── x int
 ├── y float
 ├── z string
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

build
SELECT * FROM t.a, t.b
----
project
 ├── columns: x:1(int!null) y:2(float) x:3(int) y:4(float)
 ├── inner-join
 │    ├── columns: a.x:1(int!null) a.y:2(float) b.x:3(int) b.y:4(float) b.rowid:5(int!null)
 │    ├── scan a
 │    │    └── columns: a.x:1(int!null) a.y:2(float)
 │    ├── scan b
 │    │    └── columns: b.x:3(int) b.y:4(float) b.rowid:5(int!null)
 │    └── true [type=bool]
 └── projections
      ├── variable: a.x [type=int]
      ├── variable: a.y [type=float]
      ├── variable: b.x [type=int]
      └── variable: b.y [type=float]

build
SELECT a.x, b.y FROM t.a, t.b WHERE a.x = b.x
----
project
 ├── columns: x:1(int!null) y:4(float)
 ├── select
 │    ├── columns: a.x:1(int!null) a.y:2(float) b.x:3(int) b.y:4(float) b.rowid:5(int!null)
 │    ├── inner-join
 │    │    ├── columns: a.x:1(int!null) a.y:2(float) b.x:3(int) b.y:4(float) b.rowid:5(int!null)
 │    │    ├── scan a
 │    │    │    └── columns: a.x:1(int!null) a.y:2(float)
 │    │    ├── scan b
 │    │    │    └── columns: b.x:3(int) b.y:4(float) b.rowid:5(int!null)
 │    │    └── true [type=bool]
 │    └── eq [type=bool]
 │         ├── variable: a.x [type=int]
 │         └── variable: b.x [type=int]
 └── projections
      ├── variable: a.x [type=int]
      └── variable: b.y [type=float]

build
SELECT * FROM t.c, t.b, t.a WHERE c.x = a.x AND b.x = a.x
----
project
 ├── columns: x:1(int) y:2(float) z:3(string) x:5(int) y:6(float) x:8(int!null) y:9(float)
 ├── select
 │    ├── columns: c.x:1(int) c.y:2(float) c.z:3(string) c.rowid:4(int!null) b.x:5(int) b.y:6(float) b.rowid:7(int!null) a.x:8(int!null) a.y:9(float)
 │    ├── inner-join
 │    │    ├── columns: c.x:1(int) c.y:2(float) c.z:3(string) c.rowid:4(int!null) b.x:5(int) b.y:6(float) b.rowid:7(int!null) a.x:8(int!null) a.y:9(float)
 │    │    ├── inner-join
 │    │    │    ├── columns: c.x:1(int) c.y:2(float) c.z:3(string) c.rowid:4(int!null) b.x:5(int) b.y:6(float) b.rowid:7(int!null)
 │    │    │    ├── scan c
 │    │    │    │    └── columns: c.x:1(int) c.y:2(float) c.z:3(string) c.rowid:4(int!null)
 │    │    │    ├── scan b
 │    │    │    │    └── columns: b.x:5(int) b.y:6(float) b.rowid:7(int!null)
 │    │    │    └── true [type=bool]
 │    │    ├── scan a
 │    │    │    └── columns: a.x:8(int!null) a.y:9(float)
 │    │    └── true [type=bool]
 │    └── and [type=bool]
 │         ├── eq [type=bool]
 │         │    ├── variable: c.x [type=int]
 │         │    └── variable: a.x [type=int]
 │         └── eq [type=bool]
 │              ├── variable: b.x [type=int]
 │              └── variable: a.x [type=int]
 └── projections
      ├── variable: c.x [type=int]
      ├── variable: c.y [type=float]
      ├── variable: c.z [type=string]
      ├── variable: b.x [type=int]
      ├── variable: b.y [type=float]
      ├── variable: a.x [type=int]
      └── variable: a.y [type=float]

exec-ddl
CREATE TABLE db1.a (x INT PRIMARY KEY, y FLOAT, z STRING)
----
TABLE a
 ├── x int not null
 ├── y float
 ├── z string
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE db2.a (x INT PRIMARY KEY, y FLOAT)
----
TABLE a
 ├── x int not null
 ├── y float
 └── INDEX primary
      └── x int not null

build
SELECT a.x FROM db1.a, db2.a
----
error: ambiguous source name: "a"

build
SELECT x FROM a, b
----
error: column reference "x" is ambiguous (candidates: a.x, b.x)

build
SELECT * FROM db1.a, db2.a
----
inner-join
 ├── columns: x:1(int!null) y:2(float) z:3(string) x:4(int!null) y:5(float)
 ├── scan a
 │    └── columns: a.x:1(int!null) a.y:2(float) a.z:3(string)
 ├── scan a
 │    └── columns: a.x:4(int!null) a.y:5(float)
 └── true [type=bool]

build
SELECT * FROM a, a
----
error: cannot join columns from the same source name "a" (missing AS clause)

build
SELECT * FROM t.a, a
----
error: cannot join columns from the same source name "a" (missing AS clause)

build
SELECT * FROM t.a, a AS a
----
inner-join
 ├── columns: x:1(int!null) y:2(float) x:3(int!null) y:4(float)
 ├── scan a
 │    └── columns: a.x:1(int!null) a.y:2(float)
 ├── scan a
 │    └── columns: a.x:3(int!null) a.y:4(float)
 └── true [type=bool]

build
SELECT a.* FROM t.a, a AS a
----
error: ambiguous source name: "a"
