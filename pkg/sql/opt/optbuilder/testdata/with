exec-ddl
CREATE TABLE x(a INT, b INT)
----

exec-ddl
CREATE TABLE y(a INT)
----

build
WITH t AS (SELECT a FROM y WHERE a < 3)
  SELECT * FROM x NATURAL JOIN t
----
let &1
 ├── columns: a:3(int!null) b:4(int)
 ├── project
 │    ├── columns: y.a:1(int!null)
 │    └── project
 │         ├── columns: y.a:1(int!null)
 │         └── select
 │              ├── columns: y.a:1(int!null) y.rowid:2(int!null)
 │              ├── scan y
 │              │    └── columns: y.a:1(int) y.rowid:2(int!null)
 │              └── filters
 │                   └── lt [type=bool]
 │                        ├── variable: y.a [type=int]
 │                        └── const: 3 [type=int]
 └── project
      ├── columns: x.a:3(int!null) b:4(int)
      └── inner-join
           ├── columns: x.a:3(int!null) b:4(int) x.rowid:5(int!null) a:6(int!null)
           ├── scan x
           │    └── columns: x.a:3(int) b:4(int) x.rowid:5(int!null)
           ├── let-ref &1
           │    └── columns: a:6(int)
           └── filters
                └── eq [type=bool]
                     ├── variable: x.a [type=int]
                     └── variable: a [type=int]

build
WITH t AS (SELECT a FROM y WHERE a < 3)
  SELECT * FROM t
----
let &1
 ├── columns: a:3(int)
 ├── project
 │    ├── columns: y.a:1(int!null)
 │    └── project
 │         ├── columns: y.a:1(int!null)
 │         └── select
 │              ├── columns: y.a:1(int!null) rowid:2(int!null)
 │              ├── scan y
 │              │    └── columns: y.a:1(int) rowid:2(int!null)
 │              └── filters
 │                   └── lt [type=bool]
 │                        ├── variable: y.a [type=int]
 │                        └── const: 3 [type=int]
 └── let-ref &1
      └── columns: a:3(int)

# Chaining multiple CTEs.
build
WITH
    t1 AS (SELECT a FROM y WHERE a < 3),
    t2 AS (SELECT * FROM t1 WHERE a > 1)
SELECT * FROM t2
----
let &1
 ├── columns: a:4(int)
 ├── project
 │    ├── columns: y.a:1(int!null)
 │    └── project
 │         ├── columns: y.a:1(int!null)
 │         └── select
 │              ├── columns: y.a:1(int!null) rowid:2(int!null)
 │              ├── scan y
 │              │    └── columns: y.a:1(int) rowid:2(int!null)
 │              └── filters
 │                   └── lt [type=bool]
 │                        ├── variable: y.a [type=int]
 │                        └── const: 3 [type=int]
 └── let &2
      ├── columns: a:4(int)
      ├── project
      │    ├── columns: a:3(int!null)
      │    └── select
      │         ├── columns: a:3(int!null)
      │         ├── let-ref &1
      │         │    └── columns: a:3(int)
      │         └── filters
      │              └── gt [type=bool]
      │                   ├── variable: a [type=int]
      │                   └── const: 1 [type=int]
      └── let-ref &2
           └── columns: a:4(int)

build
WITH
    t1 AS (SELECT a FROM y WHERE a < 3),
    t2 AS (SELECT * FROM t1 WHERE a > 1),
    t3 AS (SELECT * FROM t2 WHERE a = 2)
SELECT * FROM t3
----
let &1
 ├── columns: a:5(int)
 ├── project
 │    ├── columns: y.a:1(int!null)
 │    └── project
 │         ├── columns: y.a:1(int!null)
 │         └── select
 │              ├── columns: y.a:1(int!null) rowid:2(int!null)
 │              ├── scan y
 │              │    └── columns: y.a:1(int) rowid:2(int!null)
 │              └── filters
 │                   └── lt [type=bool]
 │                        ├── variable: y.a [type=int]
 │                        └── const: 3 [type=int]
 └── let &2
      ├── columns: a:5(int)
      ├── project
      │    ├── columns: a:3(int!null)
      │    └── select
      │         ├── columns: a:3(int!null)
      │         ├── let-ref &1
      │         │    └── columns: a:3(int)
      │         └── filters
      │              └── gt [type=bool]
      │                   ├── variable: a [type=int]
      │                   └── const: 1 [type=int]
      └── let &3
           ├── columns: a:5(int)
           ├── project
           │    ├── columns: a:4(int!null)
           │    └── select
           │         ├── columns: a:4(int!null)
           │         ├── let-ref &2
           │         │    └── columns: a:4(int)
           │         └── filters
           │              └── eq [type=bool]
           │                   ├── variable: a [type=int]
           │                   └── const: 2 [type=int]
           └── let-ref &3
                └── columns: a:5(int)

build
WITH
    t1 AS (SELECT * FROM y WHERE a < 3),
    t2 AS (SELECT * FROM y WHERE a > 1),
    t3 AS (SELECT * FROM t1 WHERE a < 4),
    t4 AS (SELECT * FROM t2 WHERE a > 3)
SELECT * FROM t3 NATURAL JOIN t4
----
let &1
 ├── columns: a:7(int!null)
 ├── project
 │    ├── columns: y.a:1(int!null)
 │    └── project
 │         ├── columns: y.a:1(int!null)
 │         └── select
 │              ├── columns: y.a:1(int!null) rowid:2(int!null)
 │              ├── scan y
 │              │    └── columns: y.a:1(int) rowid:2(int!null)
 │              └── filters
 │                   └── lt [type=bool]
 │                        ├── variable: y.a [type=int]
 │                        └── const: 3 [type=int]
 └── let &2
      ├── columns: a:7(int!null)
      ├── project
      │    ├── columns: y.a:3(int!null)
      │    └── project
      │         ├── columns: y.a:3(int!null)
      │         └── select
      │              ├── columns: y.a:3(int!null) rowid:4(int!null)
      │              ├── scan y
      │              │    └── columns: y.a:3(int) rowid:4(int!null)
      │              └── filters
      │                   └── gt [type=bool]
      │                        ├── variable: y.a [type=int]
      │                        └── const: 1 [type=int]
      └── let &3
           ├── columns: a:7(int!null)
           ├── project
           │    ├── columns: a:5(int!null)
           │    └── select
           │         ├── columns: a:5(int!null)
           │         ├── let-ref &1
           │         │    └── columns: a:5(int)
           │         └── filters
           │              └── lt [type=bool]
           │                   ├── variable: a [type=int]
           │                   └── const: 4 [type=int]
           └── let &4
                ├── columns: a:7(int!null)
                ├── project
                │    ├── columns: a:6(int!null)
                │    └── select
                │         ├── columns: a:6(int!null)
                │         ├── let-ref &2
                │         │    └── columns: a:6(int)
                │         └── filters
                │              └── gt [type=bool]
                │                   ├── variable: a [type=int]
                │                   └── const: 3 [type=int]
                └── project
                     ├── columns: a:7(int!null)
                     └── inner-join
                          ├── columns: a:7(int!null) a:8(int!null)
                          ├── let-ref &3
                          │    └── columns: a:7(int)
                          ├── let-ref &4
                          │    └── columns: a:8(int)
                          └── filters
                               └── eq [type=bool]
                                    ├── variable: a [type=int]
                                    └── variable: a [type=int]

# Make sure they scope properly.
build
WITH t AS (SELECT true) SELECT * FROM (WITH t AS (SELECT false) SELECT * FROM t)
----
let &1
 ├── columns: bool:3(bool)
 ├── project
 │    ├── columns: bool:1(bool!null)
 │    └── project
 │         ├── columns: bool:1(bool!null)
 │         ├── values
 │         │    └── tuple [type=tuple]
 │         └── projections
 │              └── true [type=bool]
 └── let &2
      ├── columns: bool:3(bool)
      ├── project
      │    ├── columns: bool:2(bool!null)
      │    └── project
      │         ├── columns: bool:2(bool!null)
      │         ├── values
      │         │    └── tuple [type=tuple]
      │         └── projections
      │              └── false [type=bool]
      └── let-ref &2
           └── columns: bool:3(bool)

build
WITH
    t AS (SELECT true),
    t AS (SELECT false)
SELECT * FROM t
----
error (42712): WITH query name t specified more than once

# Using a CTE once in another CTE and once otherwise.
build
WITH
    t1 AS (SELECT true),
    t2 AS (SELECT * FROM t1)
SELECT * FROM t1 NATURAL JOIN t2
----
let &1
 ├── columns: bool:3(bool!null)
 ├── project
 │    ├── columns: bool:1(bool!null)
 │    └── project
 │         ├── columns: bool:1(bool!null)
 │         ├── values
 │         │    └── tuple [type=tuple]
 │         └── projections
 │              └── true [type=bool]
 └── let &2
      ├── columns: bool:3(bool!null)
      ├── project
      │    ├── columns: bool:2(bool)
      │    └── let-ref &1
      │         └── columns: bool:2(bool)
      └── project
           ├── columns: bool:3(bool!null)
           └── inner-join
                ├── columns: bool:3(bool!null) bool:4(bool!null)
                ├── let-ref &1
                │    └── columns: bool:3(bool)
                ├── let-ref &2
                │    └── columns: bool:4(bool)
                └── filters
                     └── eq [type=bool]
                          ├── variable: bool [type=bool]
                          └── variable: bool [type=bool]

build
WITH
    t1 AS (SELECT * FROM x),
    t2 AS (SELECT * FROM x NATURAL JOIN t1)
SELECT * FROM t2 NATURAL JOIN x
----
let &1
 ├── columns: a:9(int!null) b:10(int!null)
 ├── project
 │    ├── columns: x.a:1(int) x.b:2(int)
 │    └── project
 │         ├── columns: x.a:1(int) x.b:2(int)
 │         └── scan x
 │              └── columns: x.a:1(int) x.b:2(int) rowid:3(int!null)
 └── let &2
      ├── columns: a:9(int!null) b:10(int!null)
      ├── project
      │    ├── columns: x.a:4(int!null) x.b:5(int!null)
      │    └── project
      │         ├── columns: x.a:4(int!null) x.b:5(int!null)
      │         └── inner-join
      │              ├── columns: x.a:4(int!null) x.b:5(int!null) rowid:6(int!null) a:7(int!null) b:8(int!null)
      │              ├── scan x
      │              │    └── columns: x.a:4(int) x.b:5(int) rowid:6(int!null)
      │              ├── let-ref &1
      │              │    └── columns: a:7(int) b:8(int)
      │              └── filters
      │                   ├── eq [type=bool]
      │                   │    ├── variable: x.a [type=int]
      │                   │    └── variable: a [type=int]
      │                   └── eq [type=bool]
      │                        ├── variable: x.b [type=int]
      │                        └── variable: b [type=int]
      └── project
           ├── columns: a:9(int!null) b:10(int!null)
           └── inner-join
                ├── columns: a:9(int!null) b:10(int!null) x.a:11(int!null) x.b:12(int!null) rowid:13(int!null)
                ├── let-ref &2
                │    └── columns: a:9(int) b:10(int)
                ├── scan x
                │    └── columns: x.a:11(int) x.b:12(int) rowid:13(int!null)
                └── filters
                     ├── eq [type=bool]
                     │    ├── variable: a [type=int]
                     │    └── variable: x.a [type=int]
                     └── eq [type=bool]
                          ├── variable: b [type=int]
                          └── variable: x.b [type=int]

build
WITH t AS (SELECT a FROM y WHERE a < 3)
  SELECT * FROM t NATURAL JOIN t
----
error (42712): source name "t" specified more than once (missing AS clause)

build
WITH t(x) AS (SELECT a FROM x)
  SELECT x FROM (SELECT x FROM t)
----
let &1
 ├── columns: x:4(int)
 ├── project
 │    ├── columns: a:1(int)
 │    └── project
 │         ├── columns: a:1(int)
 │         └── scan x
 │              └── columns: a:1(int) b:2(int) rowid:3(int!null)
 └── let-ref &1
      └── columns: x:4(int)

build
WITH t(a, b) AS (SELECT true a, false b)
  SELECT a, b FROM t
----
let &1
 ├── columns: a:3(bool) b:4(bool)
 ├── project
 │    ├── columns: a:1(bool!null) b:2(bool!null)
 │    └── project
 │         ├── columns: a:1(bool!null) b:2(bool!null)
 │         ├── values
 │         │    └── tuple [type=tuple]
 │         └── projections
 │              ├── true [type=bool]
 │              └── false [type=bool]
 └── let-ref &1
      └── columns: a:3(bool) b:4(bool)

build
WITH t(b, a) AS (SELECT true a, false b)
  SELECT a, b FROM t
----
let &1
 ├── columns: a:4(bool) b:3(bool)
 ├── project
 │    ├── columns: a:1(bool!null) b:2(bool!null)
 │    └── project
 │         ├── columns: a:1(bool!null) b:2(bool!null)
 │         ├── values
 │         │    └── tuple [type=tuple]
 │         └── projections
 │              ├── true [type=bool]
 │              └── false [type=bool]
 └── let-ref &1
      └── columns: b:3(bool) a:4(bool)

build
WITH t AS (SELECT a FROM x)
    SELECT * FROM y WHERE a IN (SELECT * FROM t)
----
let &1
 ├── columns: a:4(int)
 ├── project
 │    ├── columns: x.a:1(int)
 │    └── project
 │         ├── columns: x.a:1(int)
 │         └── scan x
 │              └── columns: x.a:1(int) b:2(int) x.rowid:3(int!null)
 └── project
      ├── columns: y.a:4(int)
      └── select
           ├── columns: y.a:4(int) y.rowid:5(int!null)
           ├── scan y
           │    └── columns: y.a:4(int) y.rowid:5(int!null)
           └── filters
                └── any: eq [type=bool]
                     ├── let-ref &1
                     │    └── columns: a:6(int)
                     └── variable: y.a [type=int]

build
WITH t(x) AS (SELECT a FROM x)
    SELECT * FROM y WHERE a IN (SELECT x FROM t)
----
let &1
 ├── columns: a:4(int)
 ├── project
 │    ├── columns: x.a:1(int)
 │    └── project
 │         ├── columns: x.a:1(int)
 │         └── scan x
 │              └── columns: x.a:1(int) b:2(int) x.rowid:3(int!null)
 └── project
      ├── columns: y.a:4(int)
      └── select
           ├── columns: y.a:4(int) y.rowid:5(int!null)
           ├── scan y
           │    └── columns: y.a:4(int) y.rowid:5(int!null)
           └── filters
                └── any: eq [type=bool]
                     ├── let-ref &1
                     │    └── columns: x:6(int)
                     └── variable: y.a [type=int]

# Using a subquery inside a CTE
build
SELECT * FROM x WHERE a IN
  (WITH t AS (SELECT * FROM y WHERE a < 3) SELECT * FROM t)
----
project
 ├── columns: a:1(int) b:2(int)
 └── select
      ├── columns: x.a:1(int) b:2(int) x.rowid:3(int!null)
      ├── scan x
      │    └── columns: x.a:1(int) b:2(int) x.rowid:3(int!null)
      └── filters
           └── any: eq [type=bool]
                ├── let &1
                │    ├── columns: a:6(int)
                │    ├── project
                │    │    ├── columns: y.a:4(int!null)
                │    │    └── project
                │    │         ├── columns: y.a:4(int!null)
                │    │         └── select
                │    │              ├── columns: y.a:4(int!null) y.rowid:5(int!null)
                │    │              ├── scan y
                │    │              │    └── columns: y.a:4(int) y.rowid:5(int!null)
                │    │              └── filters
                │    │                   └── lt [type=bool]
                │    │                        ├── variable: y.a [type=int]
                │    │                        └── const: 3 [type=int]
                │    └── let-ref &1
                │         └── columns: a:6(int)
                └── variable: x.a [type=int]

# Using a correlated subquery inside a CTE
build
SELECT (WITH t AS (SELECT * FROM y WHERE x.a = y.a) SELECT * FROM t LIMIT 1) FROM x
----
error (0A000): CTEs may not be correlated

# Rename columns
build
WITH t(b) AS (SELECT a FROM x) SELECT b, t.b FROM t
----
let &1
 ├── columns: b:4(int) b:4(int)
 ├── project
 │    ├── columns: a:1(int)
 │    └── project
 │         ├── columns: a:1(int)
 │         └── scan x
 │              └── columns: a:1(int) x.b:2(int) rowid:3(int!null)
 └── let-ref &1
      └── columns: b:4(int)

build
WITH t(b, c) AS (SELECT a FROM x) SELECT b, t.b FROM t
----
error (42P10): source "t" has 1 columns available but 2 columns specified

# Ensure you can't reference the original table name
build
WITH t AS (SELECT a FROM x) SELECT a, x.t FROM t
----
error (42P01): no data source matches prefix: x

# Nested WITH, name shadowing
build
WITH t(x) AS (WITH t(x) AS (SELECT 1) SELECT x * 10 FROM t) SELECT x + 2 FROM t
----
let &1
 ├── columns: "?column?":5(int)
 ├── project
 │    ├── columns: "?column?":1(int!null)
 │    └── project
 │         ├── columns: "?column?":1(int!null)
 │         ├── values
 │         │    └── tuple [type=tuple]
 │         └── projections
 │              └── const: 1 [type=int]
 └── let &2
      ├── columns: "?column?":5(int)
      ├── project
      │    ├── columns: "?column?":3(int)
      │    └── let &1
      │         ├── columns: "?column?":3(int)
      │         ├── project
      │         │    ├── columns: "?column?":1(int!null)
      │         │    └── project
      │         │         ├── columns: "?column?":1(int!null)
      │         │         ├── values
      │         │         │    └── tuple [type=tuple]
      │         │         └── projections
      │         │              └── const: 1 [type=int]
      │         └── project
      │              ├── columns: "?column?":3(int)
      │              ├── let-ref &1
      │              │    └── columns: x:2(int)
      │              └── projections
      │                   └── mult [type=int]
      │                        ├── variable: x [type=int]
      │                        └── const: 10 [type=int]
      └── project
           ├── columns: "?column?":5(int)
           ├── let-ref &2
           │    └── columns: x:4(int)
           └── projections
                └── plus [type=int]
                     ├── variable: x [type=int]
                     └── const: 2 [type=int]

build
WITH one AS (SELECT a AS u FROM x),
     two AS (SELECT a AS v FROM (SELECT a FROM y UNION ALL SELECT u FROM one))
  SELECT * FROM one JOIN two ON u = v
----
let &1
 ├── columns: u:8(int!null) v:9(int!null)
 ├── project
 │    ├── columns: x.a:1(int)
 │    └── project
 │         ├── columns: x.a:1(int)
 │         └── scan x
 │              └── columns: x.a:1(int) b:2(int) x.rowid:3(int!null)
 └── let &2
      ├── columns: u:8(int!null) v:9(int!null)
      ├── project
      │    ├── columns: a:7(int)
      │    └── union-all
      │         ├── columns: a:7(int)
      │         ├── left columns: y.a:4(int)
      │         ├── right columns: u:6(int)
      │         ├── project
      │         │    ├── columns: y.a:4(int)
      │         │    └── scan y
      │         │         └── columns: y.a:4(int) y.rowid:5(int!null)
      │         └── let-ref &1
      │              └── columns: u:6(int)
      └── inner-join
           ├── columns: u:8(int!null) v:9(int!null)
           ├── let-ref &1
           │    └── columns: u:8(int)
           ├── let-ref &2
           │    └── columns: v:9(int)
           └── filters
                └── eq [type=bool]
                     ├── variable: u [type=int]
                     └── variable: v [type=int]

build
WITH foo AS (SELECT x.a FROM x ORDER by x.a) SELECT * FROM foo
----
let &1
 ├── columns: a:4(int)
 ├── project
 │    ├── columns: x.a:1(int)
 │    └── project
 │         ├── columns: x.a:1(int)
 │         └── scan x
 │              └── columns: x.a:1(int) b:2(int) rowid:3(int!null)
 └── let-ref &1
      └── columns: a:4(int)

# Mutations.
build
WITH t AS (SELECT a FROM x) INSERT INTO x SELECT a + 20 FROM t RETURNING *
----
let &1
 ├── columns: a:4(int) b:5(int)
 ├── project
 │    ├── columns: x.a:1(int)
 │    └── project
 │         ├── columns: x.a:1(int)
 │         └── scan x
 │              └── columns: x.a:1(int) b:2(int) rowid:3(int!null)
 └── project
      ├── columns: x.a:4(int) b:5(int)
      └── insert x
           ├── columns: x.a:4(int) b:5(int) rowid:6(int!null)
           ├── insert-mapping:
           │    ├──  "?column?":8 => x.a:4
           │    ├──  column9:9 => b:5
           │    └──  column10:10 => rowid:6
           └── project
                ├── columns: column9:9(int) column10:10(int) "?column?":8(int)
                ├── project
                │    ├── columns: "?column?":8(int)
                │    ├── let-ref &1
                │    │    └── columns: a:7(int)
                │    └── projections
                │         └── plus [type=int]
                │              ├── variable: a [type=int]
                │              └── const: 20 [type=int]
                └── projections
                     ├── cast: INT8 [type=int]
                     │    └── null [type=unknown]
                     └── function: unique_rowid [type=int]

build
WITH t AS (SELECT a FROM x) UPDATE x SET a = (SELECT * FROM t) RETURNING *
----
let &1
 ├── columns: a:4(int) b:5(int)
 ├── project
 │    ├── columns: x.a:1(int)
 │    └── project
 │         ├── columns: x.a:1(int)
 │         └── scan x
 │              └── columns: x.a:1(int) b:2(int) rowid:3(int!null)
 └── project
      ├── columns: x.a:4(int) b:5(int)
      └── update x
           ├── columns: x.a:4(int) b:5(int) rowid:6(int!null)
           ├── fetch columns: x.a:7(int) b:8(int) rowid:9(int)
           ├── update-mapping:
           │    └──  column11:11 => x.a:4
           └── project
                ├── columns: column11:11(int) x.a:7(int) b:8(int) rowid:9(int!null)
                ├── scan x
                │    └── columns: x.a:7(int) b:8(int) rowid:9(int!null)
                └── projections
                     └── subquery [type=int]
                          └── max1-row
                               ├── columns: a:10(int)
                               └── let-ref &1
                                    └── columns: a:10(int)

build
WITH t AS (SELECT a FROM x) DELETE FROM x WHERE a = (SELECT * FROM t) RETURNING *
----
let &1
 ├── columns: a:4(int!null) b:5(int)
 ├── project
 │    ├── columns: x.a:1(int)
 │    └── project
 │         ├── columns: x.a:1(int)
 │         └── scan x
 │              └── columns: x.a:1(int) b:2(int) rowid:3(int!null)
 └── project
      ├── columns: x.a:4(int!null) b:5(int)
      └── delete x
           ├── columns: x.a:4(int!null) b:5(int) rowid:6(int!null)
           ├── fetch columns: x.a:7(int) b:8(int) rowid:9(int)
           └── select
                ├── columns: x.a:7(int!null) b:8(int) rowid:9(int!null)
                ├── scan x
                │    └── columns: x.a:7(int) b:8(int) rowid:9(int!null)
                └── filters
                     └── eq [type=bool]
                          ├── variable: x.a [type=int]
                          └── subquery [type=int]
                               └── max1-row
                                    ├── columns: a:10(int)
                                    └── let-ref &1
                                         └── columns: a:10(int)

# Correlated WITH is not allowed.

build
SELECT (WITH foo AS (SELECT x.a FROM x WHERE x.a = y.a) SELECT a FROM foo) FROM y
----
error (0A000): CTEs may not be correlated

build
SELECT (WITH foo AS (SELECT (SELECT y.a) FROM x) SELECT a FROM foo) FROM y
----
error (0A000): CTEs may not be correlated
