exec-ddl
CREATE TABLE parent (p INT PRIMARY KEY)
----

exec-ddl
CREATE TABLE child (c INT PRIMARY KEY, p INT NOT NULL REFERENCES parent(p) ON DELETE CASCADE)
----

# Simple cascade.
build-cascades
DELETE FROM parent WHERE p > 1
----
root
 ├── delete parent
 │    ├── columns: <none>
 │    ├── fetch columns: p:3
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk_p_ref_parent
 │    └── select
 │         ├── columns: p:3!null crdb_internal_mvcc_timestamp:4
 │         ├── scan parent
 │         │    └── columns: p:3!null crdb_internal_mvcc_timestamp:4
 │         └── filters
 │              └── p:3 > 1
 └── cascade
      └── delete child
           ├── columns: <none>
           ├── fetch columns: c:8 child.p:9
           └── semi-join (hash)
                ├── columns: c:8!null child.p:9!null
                ├── scan child
                │    └── columns: c:8!null child.p:9!null
                ├── with-scan &1
                │    ├── columns: p:11!null
                │    └── mapping:
                │         └──  parent.p:3 => p:11
                └── filters
                     └── child.p:9 = p:11

exec-ddl
CREATE TABLE grandchild (g INT PRIMARY KEY, c INT REFERENCES child(c) ON DELETE CASCADE)
----

# Two-level cascade.
build-cascades
DELETE FROM parent WHERE p > 1
----
root
 ├── delete parent
 │    ├── columns: <none>
 │    ├── fetch columns: p:3
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk_p_ref_parent
 │    └── select
 │         ├── columns: p:3!null crdb_internal_mvcc_timestamp:4
 │         ├── scan parent
 │         │    └── columns: p:3!null crdb_internal_mvcc_timestamp:4
 │         └── filters
 │              └── p:3 > 1
 └── cascade
      ├── delete child
      │    ├── columns: <none>
      │    ├── fetch columns: c:8 child.p:9
      │    ├── input binding: &2
      │    ├── cascades
      │    │    └── fk_c_ref_child
      │    └── semi-join (hash)
      │         ├── columns: c:8!null child.p:9!null
      │         ├── scan child
      │         │    └── columns: c:8!null child.p:9!null
      │         ├── with-scan &1
      │         │    ├── columns: p:11!null
      │         │    └── mapping:
      │         │         └──  parent.p:3 => p:11
      │         └── filters
      │              └── child.p:9 = p:11
      └── cascade
           └── delete grandchild
                ├── columns: <none>
                ├── fetch columns: g:15 grandchild.c:16
                └── semi-join (hash)
                     ├── columns: g:15!null grandchild.c:16
                     ├── scan grandchild
                     │    └── columns: g:15!null grandchild.c:16
                     ├── with-scan &2
                     │    ├── columns: c:18!null
                     │    └── mapping:
                     │         └──  child.c:8 => c:18
                     └── filters
                          └── grandchild.c:16 = c:18

# Cascade with check query.
exec-ddl
DROP TABLE grandchild
----

exec-ddl
CREATE TABLE grandchild (g INT PRIMARY KEY, c INT REFERENCES child(c))
----

build-cascades
DELETE FROM parent WHERE p > 1
----
root
 ├── delete parent
 │    ├── columns: <none>
 │    ├── fetch columns: p:3
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk_p_ref_parent
 │    └── select
 │         ├── columns: p:3!null crdb_internal_mvcc_timestamp:4
 │         ├── scan parent
 │         │    └── columns: p:3!null crdb_internal_mvcc_timestamp:4
 │         └── filters
 │              └── p:3 > 1
 └── cascade
      └── delete child
           ├── columns: <none>
           ├── fetch columns: child.c:8 child.p:9
           ├── input binding: &2
           ├── semi-join (hash)
           │    ├── columns: child.c:8!null child.p:9!null
           │    ├── scan child
           │    │    └── columns: child.c:8!null child.p:9!null
           │    ├── with-scan &1
           │    │    ├── columns: p:11!null
           │    │    └── mapping:
           │    │         └──  parent.p:3 => p:11
           │    └── filters
           │         └── child.p:9 = p:11
           └── f-k-checks
                └── f-k-checks-item: grandchild(c) -> child(c)
                     └── semi-join (hash)
                          ├── columns: c:12!null
                          ├── with-scan &2
                          │    ├── columns: c:12!null
                          │    └── mapping:
                          │         └──  child.c:8 => c:12
                          ├── scan grandchild
                          │    └── columns: grandchild.c:14
                          └── filters
                               └── c:12 = grandchild.c:14

# Self-reference with cascade.
exec-ddl
CREATE TABLE self (a INT PRIMARY KEY, b INT REFERENCES self(a) ON DELETE CASCADE)
----

build-cascades cascade-levels=3
DELETE FROM self WHERE a=1
----
root
 ├── delete self
 │    ├── columns: <none>
 │    ├── fetch columns: a:4 b:5
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk_b_ref_self
 │    └── select
 │         ├── columns: a:4!null b:5 crdb_internal_mvcc_timestamp:6
 │         ├── scan self
 │         │    └── columns: a:4!null b:5 crdb_internal_mvcc_timestamp:6
 │         └── filters
 │              └── a:4 = 1
 └── cascade
      ├── delete self
      │    ├── columns: <none>
      │    ├── fetch columns: self.a:10 b:11
      │    ├── input binding: &2
      │    ├── cascades
      │    │    └── fk_b_ref_self
      │    └── semi-join (hash)
      │         ├── columns: self.a:10!null b:11
      │         ├── scan self
      │         │    └── columns: self.a:10!null b:11
      │         ├── with-scan &1
      │         │    ├── columns: a:13!null
      │         │    └── mapping:
      │         │         └──  self.a:4 => a:13
      │         └── filters
      │              └── b:11 = a:13
      └── cascade
           ├── delete self
           │    ├── columns: <none>
           │    ├── fetch columns: self.a:17 b:18
           │    ├── input binding: &3
           │    ├── cascades
           │    │    └── fk_b_ref_self
           │    └── semi-join (hash)
           │         ├── columns: self.a:17!null b:18
           │         ├── scan self
           │         │    └── columns: self.a:17!null b:18
           │         ├── with-scan &2
           │         │    ├── columns: a:20!null
           │         │    └── mapping:
           │         │         └──  self.a:10 => a:20
           │         └── filters
           │              └── b:18 = a:20
           └── cascade
                └── delete self
                     ├── columns: <none>
                     ├── fetch columns: self.a:24 b:25
                     ├── input binding: &4
                     ├── cascades
                     │    └── fk_b_ref_self
                     └── semi-join (hash)
                          ├── columns: self.a:24!null b:25
                          ├── scan self
                          │    └── columns: self.a:24!null b:25
                          ├── with-scan &3
                          │    ├── columns: a:27!null
                          │    └── mapping:
                          │         └──  self.a:17 => a:27
                          └── filters
                               └── b:25 = a:27

# Cascade cycle.
exec-ddl
CREATE TABLE ab (a INT PRIMARY KEY, b INT)
----

exec-ddl
CREATE TABLE cd (c INT PRIMARY KEY, d INT)
----

exec-ddl
CREATE TABLE ef (e INT PRIMARY KEY, f INT)
----

exec-ddl
ALTER TABLE ab ADD CONSTRAINT ab_cd FOREIGN KEY (b) REFERENCES cd(c) ON DELETE CASCADE
----

exec-ddl
ALTER TABLE cd ADD CONSTRAINT cd_ef FOREIGN KEY (d) REFERENCES ef(e) ON DELETE CASCADE
----

exec-ddl
ALTER TABLE ef ADD CONSTRAINT ef_ab FOREIGN KEY (f) REFERENCES ab(a) ON DELETE CASCADE
----

build-cascades cascade-levels=3
DELETE FROM ab WHERE a = 1
----
root
 ├── delete ab
 │    ├── columns: <none>
 │    ├── fetch columns: a:4 b:5
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── ef_ab
 │    └── select
 │         ├── columns: a:4!null b:5 crdb_internal_mvcc_timestamp:6
 │         ├── scan ab
 │         │    └── columns: a:4!null b:5 crdb_internal_mvcc_timestamp:6
 │         └── filters
 │              └── a:4 = 1
 └── cascade
      ├── delete ef
      │    ├── columns: <none>
      │    ├── fetch columns: e:10 f:11
      │    ├── input binding: &2
      │    ├── cascades
      │    │    └── cd_ef
      │    └── semi-join (hash)
      │         ├── columns: e:10!null f:11
      │         ├── scan ef
      │         │    └── columns: e:10!null f:11
      │         ├── with-scan &1
      │         │    ├── columns: a:13!null
      │         │    └── mapping:
      │         │         └──  ab.a:4 => a:13
      │         └── filters
      │              └── f:11 = a:13
      └── cascade
           ├── delete cd
           │    ├── columns: <none>
           │    ├── fetch columns: c:17 d:18
           │    ├── input binding: &3
           │    ├── cascades
           │    │    └── ab_cd
           │    └── semi-join (hash)
           │         ├── columns: c:17!null d:18
           │         ├── scan cd
           │         │    └── columns: c:17!null d:18
           │         ├── with-scan &2
           │         │    ├── columns: e:20!null
           │         │    └── mapping:
           │         │         └──  ef.e:10 => e:20
           │         └── filters
           │              └── d:18 = e:20
           └── cascade
                └── delete ab
                     ├── columns: <none>
                     ├── fetch columns: ab.a:24 b:25
                     ├── input binding: &4
                     ├── cascades
                     │    └── ef_ab
                     └── semi-join (hash)
                          ├── columns: ab.a:24!null b:25
                          ├── scan ab
                          │    └── columns: ab.a:24!null b:25
                          ├── with-scan &3
                          │    ├── columns: c:27!null
                          │    └── mapping:
                          │         └──  cd.c:17 => c:27
                          └── filters
                               └── b:25 = c:27
