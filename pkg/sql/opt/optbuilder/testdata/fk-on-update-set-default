exec-ddl
CREATE TABLE parent (p INT PRIMARY KEY)
----

exec-ddl
CREATE TABLE child (c INT PRIMARY KEY, p INT DEFAULT 0 NOT NULL REFERENCES parent(p) ON UPDATE SET DEFAULT)
----

build-cascades
UPDATE parent SET p = p * 10 WHERE p > 1
----
root
 ├── update parent
 │    ├── columns: <none>
 │    ├── fetch columns: p:2
 │    ├── update-mapping:
 │    │    └── p_new:3 => p:1
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk_p_ref_parent
 │    └── project
 │         ├── columns: p_new:3!null p:2!null
 │         ├── select
 │         │    ├── columns: p:2!null
 │         │    ├── scan parent
 │         │    │    └── columns: p:2!null
 │         │    └── filters
 │         │         └── p:2 > 1
 │         └── projections
 │              └── p:2 * 10 [as=p_new:3]
 └── cascade
      └── update child
           ├── columns: <none>
           ├── fetch columns: c:6 child.p:7
           ├── update-mapping:
           │    └── p_new:10 => child.p:5
           ├── input binding: &2
           ├── project
           │    ├── columns: p_new:10!null c:6!null child.p:7!null p:8!null p_new:9!null
           │    ├── inner-join (hash)
           │    │    ├── columns: c:6!null child.p:7!null p:8!null p_new:9!null
           │    │    ├── scan child
           │    │    │    └── columns: c:6!null child.p:7!null
           │    │    ├── select
           │    │    │    ├── columns: p:8!null p_new:9!null
           │    │    │    ├── with-scan &1
           │    │    │    │    ├── columns: p:8!null p_new:9!null
           │    │    │    │    └── mapping:
           │    │    │    │         ├──  parent.p:2 => p:8
           │    │    │    │         └──  p_new:3 => p_new:9
           │    │    │    └── filters
           │    │    │         └── p:8 IS DISTINCT FROM p_new:9
           │    │    └── filters
           │    │         └── child.p:7 = p:8
           │    └── projections
           │         └── 0 [as=p_new:10]
           └── f-k-checks
                └── f-k-checks-item: child(p) -> parent(p)
                     └── anti-join (hash)
                          ├── columns: p_new:11!null
                          ├── with-scan &2
                          │    ├── columns: p_new:11!null
                          │    └── mapping:
                          │         └──  p_new:10 => p_new:11
                          ├── scan parent
                          │    └── columns: parent.p:12!null
                          └── filters
                               └── p_new:11 = parent.p:12

exec-ddl
CREATE TABLE parent_multi (
  pk INT PRIMARY KEY,
  p INT, q INT,
  UNIQUE (p, q),
  FAMILY (pk),
  FAMILY (p),
  FAMILY (q)
)
----

exec-ddl
CREATE TABLE child_multi (
  c INT PRIMARY KEY,
  p INT DEFAULT 0,
  q INT DEFAULT 1,
  UNIQUE (c, q),
  CONSTRAINT fk FOREIGN KEY (p, q) REFERENCES parent_multi(p, q) ON UPDATE SET DEFAULT 
)
----

build-cascades
UPDATE parent_multi SET p = p * 10, q = q + 1 WHERE pk > 1
----
root
 ├── update parent_multi
 │    ├── columns: <none>
 │    ├── fetch columns: pk:4 p:5 q:6
 │    ├── update-mapping:
 │    │    ├── p_new:7 => p:2
 │    │    └── q_new:8 => q:3
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: p_new:7 q_new:8 pk:4!null p:5 q:6
 │         ├── select
 │         │    ├── columns: pk:4!null p:5 q:6
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:4!null p:5 q:6
 │         │    └── filters
 │         │         └── pk:4 > 1
 │         └── projections
 │              ├── p:5 * 10 [as=p_new:7]
 │              └── q:6 + 1 [as=q_new:8]
 └── cascade
      └── update child_multi
           ├── columns: <none>
           ├── fetch columns: c:12 child_multi.p:13 child_multi.q:14
           ├── update-mapping:
           │    ├── p_new:19 => child_multi.p:10
           │    └── q_new:20 => child_multi.q:11
           ├── input binding: &2
           ├── project
           │    ├── columns: p_new:19!null q_new:20!null c:12!null child_multi.p:13!null child_multi.q:14!null p:15!null q:16!null p_new:17 q_new:18
           │    ├── inner-join (hash)
           │    │    ├── columns: c:12!null child_multi.p:13!null child_multi.q:14!null p:15!null q:16!null p_new:17 q_new:18
           │    │    ├── scan child_multi
           │    │    │    └── columns: c:12!null child_multi.p:13 child_multi.q:14
           │    │    ├── select
           │    │    │    ├── columns: p:15 q:16 p_new:17 q_new:18
           │    │    │    ├── with-scan &1
           │    │    │    │    ├── columns: p:15 q:16 p_new:17 q_new:18
           │    │    │    │    └── mapping:
           │    │    │    │         ├──  parent_multi.p:5 => p:15
           │    │    │    │         ├──  parent_multi.q:6 => q:16
           │    │    │    │         ├──  p_new:7 => p_new:17
           │    │    │    │         └──  q_new:8 => q_new:18
           │    │    │    └── filters
           │    │    │         └── (p:15 IS DISTINCT FROM p_new:17) OR (q:16 IS DISTINCT FROM q_new:18)
           │    │    └── filters
           │    │         ├── child_multi.p:13 = p:15
           │    │         └── child_multi.q:14 = q:16
           │    └── projections
           │         ├── 0 [as=p_new:19]
           │         └── 1 [as=q_new:20]
           └── f-k-checks
                └── f-k-checks-item: child_multi(p,q) -> parent_multi(p,q)
                     └── anti-join (hash)
                          ├── columns: p_new:21!null q_new:22!null
                          ├── with-scan &2
                          │    ├── columns: p_new:21!null q_new:22!null
                          │    └── mapping:
                          │         ├──  p_new:19 => p_new:21
                          │         └──  q_new:20 => q_new:22
                          ├── scan parent_multi
                          │    └── columns: parent_multi.p:24 parent_multi.q:25
                          └── filters
                               ├── p_new:21 = parent_multi.p:24
                               └── q_new:22 = parent_multi.q:25

# Update only one of the two FK columns. The "before" and "after" values of q
# come from the same column in the mutation input.
build-cascades
UPDATE parent_multi SET p = p * 10 WHERE p > 1
----
root
 ├── update parent_multi
 │    ├── columns: <none>
 │    ├── fetch columns: pk:4 p:5 q:6
 │    ├── update-mapping:
 │    │    └── p_new:7 => p:2
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: p_new:7!null pk:4!null p:5!null q:6
 │         ├── select
 │         │    ├── columns: pk:4!null p:5!null q:6
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:4!null p:5 q:6
 │         │    └── filters
 │         │         └── p:5 > 1
 │         └── projections
 │              └── p:5 * 10 [as=p_new:7]
 └── cascade
      └── update child_multi
           ├── columns: <none>
           ├── fetch columns: c:11 child_multi.p:12 child_multi.q:13
           ├── update-mapping:
           │    ├── p_new:18 => child_multi.p:9
           │    └── q_new:19 => child_multi.q:10
           ├── input binding: &2
           ├── project
           │    ├── columns: p_new:18!null q_new:19!null c:11!null child_multi.p:12!null child_multi.q:13!null p:14!null q:15!null p_new:16!null q:17
           │    ├── inner-join (hash)
           │    │    ├── columns: c:11!null child_multi.p:12!null child_multi.q:13!null p:14!null q:15!null p_new:16!null q:17
           │    │    ├── scan child_multi
           │    │    │    └── columns: c:11!null child_multi.p:12 child_multi.q:13
           │    │    ├── select
           │    │    │    ├── columns: p:14!null q:15 p_new:16!null q:17
           │    │    │    ├── with-scan &1
           │    │    │    │    ├── columns: p:14!null q:15 p_new:16!null q:17
           │    │    │    │    └── mapping:
           │    │    │    │         ├──  parent_multi.p:5 => p:14
           │    │    │    │         ├──  parent_multi.q:6 => q:15
           │    │    │    │         ├──  p_new:7 => p_new:16
           │    │    │    │         └──  parent_multi.q:6 => q:17
           │    │    │    └── filters
           │    │    │         └── (p:14 IS DISTINCT FROM p_new:16) OR (q:15 IS DISTINCT FROM q:17)
           │    │    └── filters
           │    │         ├── child_multi.p:12 = p:14
           │    │         └── child_multi.q:13 = q:15
           │    └── projections
           │         ├── 0 [as=p_new:18]
           │         └── 1 [as=q_new:19]
           └── f-k-checks
                └── f-k-checks-item: child_multi(p,q) -> parent_multi(p,q)
                     └── anti-join (hash)
                          ├── columns: p_new:20!null q_new:21!null
                          ├── with-scan &2
                          │    ├── columns: p_new:20!null q_new:21!null
                          │    └── mapping:
                          │         ├──  p_new:18 => p_new:20
                          │         └──  q_new:19 => q_new:21
                          ├── scan parent_multi
                          │    └── columns: parent_multi.p:23 parent_multi.q:24
                          └── filters
                               ├── p_new:20 = parent_multi.p:23
                               └── q_new:21 = parent_multi.q:24

# Test a two-level cascade.
exec-ddl
CREATE TABLE grandchild (
  g INT PRIMARY KEY,
  c INT DEFAULT 10, q INT DEFAULT 11,
  CONSTRAINT fk2 FOREIGN KEY (c, q) REFERENCES child_multi(c, q) ON UPDATE SET DEFAULT
)
----

build-cascades
UPDATE parent_multi SET q = q * 10 WHERE p > 1
----
root
 ├── update parent_multi
 │    ├── columns: <none>
 │    ├── fetch columns: pk:4 p:5 q:6
 │    ├── update-mapping:
 │    │    └── q_new:7 => q:3
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: q_new:7 pk:4!null p:5!null q:6
 │         ├── select
 │         │    ├── columns: pk:4!null p:5!null q:6
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:4!null p:5 q:6
 │         │    └── filters
 │         │         └── p:5 > 1
 │         └── projections
 │              └── q:6 * 10 [as=q_new:7]
 └── cascade
      ├── update child_multi
      │    ├── columns: <none>
      │    ├── fetch columns: c:11 child_multi.p:12 child_multi.q:13
      │    ├── update-mapping:
      │    │    ├── p_new:18 => child_multi.p:9
      │    │    └── q_new:19 => child_multi.q:10
      │    ├── input binding: &2
      │    ├── cascades
      │    │    └── fk2
      │    ├── project
      │    │    ├── columns: p_new:18!null q_new:19!null c:11!null child_multi.p:12!null child_multi.q:13!null p:14!null q:15!null p:16!null q_new:17
      │    │    ├── inner-join (hash)
      │    │    │    ├── columns: c:11!null child_multi.p:12!null child_multi.q:13!null p:14!null q:15!null p:16!null q_new:17
      │    │    │    ├── scan child_multi
      │    │    │    │    └── columns: c:11!null child_multi.p:12 child_multi.q:13
      │    │    │    ├── select
      │    │    │    │    ├── columns: p:14!null q:15 p:16!null q_new:17
      │    │    │    │    ├── with-scan &1
      │    │    │    │    │    ├── columns: p:14!null q:15 p:16!null q_new:17
      │    │    │    │    │    └── mapping:
      │    │    │    │    │         ├──  parent_multi.p:5 => p:14
      │    │    │    │    │         ├──  parent_multi.q:6 => q:15
      │    │    │    │    │         ├──  parent_multi.p:5 => p:16
      │    │    │    │    │         └──  q_new:7 => q_new:17
      │    │    │    │    └── filters
      │    │    │    │         └── (p:14 IS DISTINCT FROM p:16) OR (q:15 IS DISTINCT FROM q_new:17)
      │    │    │    └── filters
      │    │    │         ├── child_multi.p:12 = p:14
      │    │    │         └── child_multi.q:13 = q:15
      │    │    └── projections
      │    │         ├── 0 [as=p_new:18]
      │    │         └── 1 [as=q_new:19]
      │    └── f-k-checks
      │         └── f-k-checks-item: child_multi(p,q) -> parent_multi(p,q)
      │              └── anti-join (hash)
      │                   ├── columns: p_new:20!null q_new:21!null
      │                   ├── with-scan &2
      │                   │    ├── columns: p_new:20!null q_new:21!null
      │                   │    └── mapping:
      │                   │         ├──  p_new:18 => p_new:20
      │                   │         └──  q_new:19 => q_new:21
      │                   ├── scan parent_multi
      │                   │    └── columns: parent_multi.p:23 parent_multi.q:24
      │                   └── filters
      │                        ├── p_new:20 = parent_multi.p:23
      │                        └── q_new:21 = parent_multi.q:24
      └── cascade
           └── update grandchild
                ├── columns: <none>
                ├── fetch columns: g:28 grandchild.c:29 grandchild.q:30
                ├── update-mapping:
                │    ├── c_new:35 => grandchild.c:26
                │    └── q_new:36 => grandchild.q:27
                ├── input binding: &3
                ├── project
                │    ├── columns: c_new:35!null q_new:36!null g:28!null grandchild.c:29!null grandchild.q:30!null c:31!null q:32!null c:33!null q_new:34!null
                │    ├── inner-join (hash)
                │    │    ├── columns: g:28!null grandchild.c:29!null grandchild.q:30!null c:31!null q:32!null c:33!null q_new:34!null
                │    │    ├── scan grandchild
                │    │    │    └── columns: g:28!null grandchild.c:29 grandchild.q:30
                │    │    ├── select
                │    │    │    ├── columns: c:31!null q:32!null c:33!null q_new:34!null
                │    │    │    ├── with-scan &2
                │    │    │    │    ├── columns: c:31!null q:32!null c:33!null q_new:34!null
                │    │    │    │    └── mapping:
                │    │    │    │         ├──  child_multi.c:11 => c:31
                │    │    │    │         ├──  child_multi.q:13 => q:32
                │    │    │    │         ├──  child_multi.c:11 => c:33
                │    │    │    │         └──  q_new:19 => q_new:34
                │    │    │    └── filters
                │    │    │         └── (c:31 IS DISTINCT FROM c:33) OR (q:32 IS DISTINCT FROM q_new:34)
                │    │    └── filters
                │    │         ├── grandchild.c:29 = c:31
                │    │         └── grandchild.q:30 = q:32
                │    └── projections
                │         ├── 10 [as=c_new:35]
                │         └── 11 [as=q_new:36]
                └── f-k-checks
                     └── f-k-checks-item: grandchild(c,q) -> child_multi(c,q)
                          └── anti-join (hash)
                               ├── columns: c_new:37!null q_new:38!null
                               ├── with-scan &3
                               │    ├── columns: c_new:37!null q_new:38!null
                               │    └── mapping:
                               │         ├──  c_new:35 => c_new:37
                               │         └──  q_new:36 => q_new:38
                               ├── scan child_multi
                               │    └── columns: child_multi.c:39!null child_multi.q:41
                               └── filters
                                    ├── c_new:37 = child_multi.c:39
                                    └── q_new:38 = child_multi.q:41

build-cascades
UPSERT INTO parent_multi VALUES (1, 10, 10), (2, 20, 20)
----
root
 ├── upsert parent_multi
 │    ├── columns: <none>
 │    ├── canary column: 7
 │    ├── fetch columns: pk:7 p:8 q:9
 │    ├── insert-mapping:
 │    │    ├── column1:4 => pk:1
 │    │    ├── column2:5 => p:2
 │    │    └── column3:6 => q:3
 │    ├── update-mapping:
 │    │    ├── column2:5 => p:2
 │    │    └── column3:6 => q:3
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: upsert_pk:10 column1:4!null column2:5!null column3:6!null pk:7 p:8 q:9
 │         ├── left-join (hash)
 │         │    ├── columns: column1:4!null column2:5!null column3:6!null pk:7 p:8 q:9
 │         │    ├── ensure-upsert-distinct-on
 │         │    │    ├── columns: column1:4!null column2:5!null column3:6!null
 │         │    │    ├── grouping columns: column1:4!null
 │         │    │    ├── values
 │         │    │    │    ├── columns: column1:4!null column2:5!null column3:6!null
 │         │    │    │    ├── (1, 10, 10)
 │         │    │    │    └── (2, 20, 20)
 │         │    │    └── aggregations
 │         │    │         ├── first-agg [as=column2:5]
 │         │    │         │    └── column2:5
 │         │    │         └── first-agg [as=column3:6]
 │         │    │              └── column3:6
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:7!null p:8 q:9
 │         │    └── filters
 │         │         └── column1:4 = pk:7
 │         └── projections
 │              └── CASE WHEN pk:7 IS NULL THEN column1:4 ELSE pk:7 END [as=upsert_pk:10]
 └── cascade
      ├── update child_multi
      │    ├── columns: <none>
      │    ├── fetch columns: c:14 child_multi.p:15 child_multi.q:16
      │    ├── update-mapping:
      │    │    ├── p_new:21 => child_multi.p:12
      │    │    └── q_new:22 => child_multi.q:13
      │    ├── input binding: &2
      │    ├── cascades
      │    │    └── fk2
      │    ├── project
      │    │    ├── columns: p_new:21!null q_new:22!null c:14!null child_multi.p:15!null child_multi.q:16!null p:17!null q:18!null column2:19!null column3:20!null
      │    │    ├── inner-join (hash)
      │    │    │    ├── columns: c:14!null child_multi.p:15!null child_multi.q:16!null p:17!null q:18!null column2:19!null column3:20!null
      │    │    │    ├── scan child_multi
      │    │    │    │    └── columns: c:14!null child_multi.p:15 child_multi.q:16
      │    │    │    ├── select
      │    │    │    │    ├── columns: p:17 q:18 column2:19!null column3:20!null
      │    │    │    │    ├── with-scan &1
      │    │    │    │    │    ├── columns: p:17 q:18 column2:19!null column3:20!null
      │    │    │    │    │    └── mapping:
      │    │    │    │    │         ├──  parent_multi.p:8 => p:17
      │    │    │    │    │         ├──  parent_multi.q:9 => q:18
      │    │    │    │    │         ├──  column2:5 => column2:19
      │    │    │    │    │         └──  column3:6 => column3:20
      │    │    │    │    └── filters
      │    │    │    │         └── (p:17 IS DISTINCT FROM column2:19) OR (q:18 IS DISTINCT FROM column3:20)
      │    │    │    └── filters
      │    │    │         ├── child_multi.p:15 = p:17
      │    │    │         └── child_multi.q:16 = q:18
      │    │    └── projections
      │    │         ├── 0 [as=p_new:21]
      │    │         └── 1 [as=q_new:22]
      │    └── f-k-checks
      │         └── f-k-checks-item: child_multi(p,q) -> parent_multi(p,q)
      │              └── anti-join (hash)
      │                   ├── columns: p_new:23!null q_new:24!null
      │                   ├── with-scan &2
      │                   │    ├── columns: p_new:23!null q_new:24!null
      │                   │    └── mapping:
      │                   │         ├──  p_new:21 => p_new:23
      │                   │         └──  q_new:22 => q_new:24
      │                   ├── scan parent_multi
      │                   │    └── columns: parent_multi.p:26 parent_multi.q:27
      │                   └── filters
      │                        ├── p_new:23 = parent_multi.p:26
      │                        └── q_new:24 = parent_multi.q:27
      └── cascade
           └── update grandchild
                ├── columns: <none>
                ├── fetch columns: g:31 grandchild.c:32 grandchild.q:33
                ├── update-mapping:
                │    ├── c_new:38 => grandchild.c:29
                │    └── q_new:39 => grandchild.q:30
                ├── input binding: &3
                ├── project
                │    ├── columns: c_new:38!null q_new:39!null g:31!null grandchild.c:32!null grandchild.q:33!null c:34!null q:35!null c:36!null q_new:37!null
                │    ├── inner-join (hash)
                │    │    ├── columns: g:31!null grandchild.c:32!null grandchild.q:33!null c:34!null q:35!null c:36!null q_new:37!null
                │    │    ├── scan grandchild
                │    │    │    └── columns: g:31!null grandchild.c:32 grandchild.q:33
                │    │    ├── select
                │    │    │    ├── columns: c:34!null q:35!null c:36!null q_new:37!null
                │    │    │    ├── with-scan &2
                │    │    │    │    ├── columns: c:34!null q:35!null c:36!null q_new:37!null
                │    │    │    │    └── mapping:
                │    │    │    │         ├──  child_multi.c:14 => c:34
                │    │    │    │         ├──  child_multi.q:16 => q:35
                │    │    │    │         ├──  child_multi.c:14 => c:36
                │    │    │    │         └──  q_new:22 => q_new:37
                │    │    │    └── filters
                │    │    │         └── (c:34 IS DISTINCT FROM c:36) OR (q:35 IS DISTINCT FROM q_new:37)
                │    │    └── filters
                │    │         ├── grandchild.c:32 = c:34
                │    │         └── grandchild.q:33 = q:35
                │    └── projections
                │         ├── 10 [as=c_new:38]
                │         └── 11 [as=q_new:39]
                └── f-k-checks
                     └── f-k-checks-item: grandchild(c,q) -> child_multi(c,q)
                          └── anti-join (hash)
                               ├── columns: c_new:40!null q_new:41!null
                               ├── with-scan &3
                               │    ├── columns: c_new:40!null q_new:41!null
                               │    └── mapping:
                               │         ├──  c_new:38 => c_new:40
                               │         └──  q_new:39 => q_new:41
                               ├── scan child_multi
                               │    └── columns: child_multi.c:42!null child_multi.q:44
                               └── filters
                                    ├── c_new:40 = child_multi.c:42
                                    └── q_new:41 = child_multi.q:44

# Upsert that only touches one of the FK columns.
build-cascades
UPSERT INTO parent_multi(pk, p) VALUES (1, 10), (2, 20)
----
root
 ├── upsert parent_multi
 │    ├── columns: <none>
 │    ├── canary column: 7
 │    ├── fetch columns: pk:7 p:8 q:9
 │    ├── insert-mapping:
 │    │    ├── column1:4 => pk:1
 │    │    ├── column2:5 => p:2
 │    │    └── column6:6 => q:3
 │    ├── update-mapping:
 │    │    └── column2:5 => p:2
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: upsert_pk:10 upsert_q:11 column1:4!null column2:5!null column6:6 pk:7 p:8 q:9
 │         ├── left-join (hash)
 │         │    ├── columns: column1:4!null column2:5!null column6:6 pk:7 p:8 q:9
 │         │    ├── ensure-upsert-distinct-on
 │         │    │    ├── columns: column1:4!null column2:5!null column6:6
 │         │    │    ├── grouping columns: column1:4!null
 │         │    │    ├── project
 │         │    │    │    ├── columns: column6:6 column1:4!null column2:5!null
 │         │    │    │    ├── values
 │         │    │    │    │    ├── columns: column1:4!null column2:5!null
 │         │    │    │    │    ├── (1, 10)
 │         │    │    │    │    └── (2, 20)
 │         │    │    │    └── projections
 │         │    │    │         └── NULL::INT8 [as=column6:6]
 │         │    │    └── aggregations
 │         │    │         ├── first-agg [as=column2:5]
 │         │    │         │    └── column2:5
 │         │    │         └── first-agg [as=column6:6]
 │         │    │              └── column6:6
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:7!null p:8 q:9
 │         │    └── filters
 │         │         └── column1:4 = pk:7
 │         └── projections
 │              ├── CASE WHEN pk:7 IS NULL THEN column1:4 ELSE pk:7 END [as=upsert_pk:10]
 │              └── CASE WHEN pk:7 IS NULL THEN column6:6 ELSE q:9 END [as=upsert_q:11]
 └── cascade
      ├── update child_multi
      │    ├── columns: <none>
      │    ├── fetch columns: c:15 child_multi.p:16 child_multi.q:17
      │    ├── update-mapping:
      │    │    ├── p_new:22 => child_multi.p:13
      │    │    └── q_new:23 => child_multi.q:14
      │    ├── input binding: &2
      │    ├── cascades
      │    │    └── fk2
      │    ├── project
      │    │    ├── columns: p_new:22!null q_new:23!null c:15!null child_multi.p:16!null child_multi.q:17!null p:18!null q:19!null column2:20!null q:21
      │    │    ├── inner-join (hash)
      │    │    │    ├── columns: c:15!null child_multi.p:16!null child_multi.q:17!null p:18!null q:19!null column2:20!null q:21
      │    │    │    ├── scan child_multi
      │    │    │    │    └── columns: c:15!null child_multi.p:16 child_multi.q:17
      │    │    │    ├── select
      │    │    │    │    ├── columns: p:18 q:19 column2:20!null q:21
      │    │    │    │    ├── with-scan &1
      │    │    │    │    │    ├── columns: p:18 q:19 column2:20!null q:21
      │    │    │    │    │    └── mapping:
      │    │    │    │    │         ├──  parent_multi.p:8 => p:18
      │    │    │    │    │         ├──  parent_multi.q:9 => q:19
      │    │    │    │    │         ├──  column2:5 => column2:20
      │    │    │    │    │         └──  parent_multi.q:9 => q:21
      │    │    │    │    └── filters
      │    │    │    │         └── (p:18 IS DISTINCT FROM column2:20) OR (q:19 IS DISTINCT FROM q:21)
      │    │    │    └── filters
      │    │    │         ├── child_multi.p:16 = p:18
      │    │    │         └── child_multi.q:17 = q:19
      │    │    └── projections
      │    │         ├── 0 [as=p_new:22]
      │    │         └── 1 [as=q_new:23]
      │    └── f-k-checks
      │         └── f-k-checks-item: child_multi(p,q) -> parent_multi(p,q)
      │              └── anti-join (hash)
      │                   ├── columns: p_new:24!null q_new:25!null
      │                   ├── with-scan &2
      │                   │    ├── columns: p_new:24!null q_new:25!null
      │                   │    └── mapping:
      │                   │         ├──  p_new:22 => p_new:24
      │                   │         └──  q_new:23 => q_new:25
      │                   ├── scan parent_multi
      │                   │    └── columns: parent_multi.p:27 parent_multi.q:28
      │                   └── filters
      │                        ├── p_new:24 = parent_multi.p:27
      │                        └── q_new:25 = parent_multi.q:28
      └── cascade
           └── update grandchild
                ├── columns: <none>
                ├── fetch columns: g:32 grandchild.c:33 grandchild.q:34
                ├── update-mapping:
                │    ├── c_new:39 => grandchild.c:30
                │    └── q_new:40 => grandchild.q:31
                ├── input binding: &3
                ├── project
                │    ├── columns: c_new:39!null q_new:40!null g:32!null grandchild.c:33!null grandchild.q:34!null c:35!null q:36!null c:37!null q_new:38!null
                │    ├── inner-join (hash)
                │    │    ├── columns: g:32!null grandchild.c:33!null grandchild.q:34!null c:35!null q:36!null c:37!null q_new:38!null
                │    │    ├── scan grandchild
                │    │    │    └── columns: g:32!null grandchild.c:33 grandchild.q:34
                │    │    ├── select
                │    │    │    ├── columns: c:35!null q:36!null c:37!null q_new:38!null
                │    │    │    ├── with-scan &2
                │    │    │    │    ├── columns: c:35!null q:36!null c:37!null q_new:38!null
                │    │    │    │    └── mapping:
                │    │    │    │         ├──  child_multi.c:15 => c:35
                │    │    │    │         ├──  child_multi.q:17 => q:36
                │    │    │    │         ├──  child_multi.c:15 => c:37
                │    │    │    │         └──  q_new:23 => q_new:38
                │    │    │    └── filters
                │    │    │         └── (c:35 IS DISTINCT FROM c:37) OR (q:36 IS DISTINCT FROM q_new:38)
                │    │    └── filters
                │    │         ├── grandchild.c:33 = c:35
                │    │         └── grandchild.q:34 = q:36
                │    └── projections
                │         ├── 10 [as=c_new:39]
                │         └── 11 [as=q_new:40]
                └── f-k-checks
                     └── f-k-checks-item: grandchild(c,q) -> child_multi(c,q)
                          └── anti-join (hash)
                               ├── columns: c_new:41!null q_new:42!null
                               ├── with-scan &3
                               │    ├── columns: c_new:41!null q_new:42!null
                               │    └── mapping:
                               │         ├──  c_new:39 => c_new:41
                               │         └──  q_new:40 => q_new:42
                               ├── scan child_multi
                               │    └── columns: child_multi.c:43!null child_multi.q:45
                               └── filters
                                    ├── c_new:41 = child_multi.c:43
                                    └── q_new:42 = child_multi.q:45

build-cascades
INSERT INTO parent_multi VALUES (1, 10, 10), (2, 20, 20) ON CONFLICT (p,q) DO UPDATE SET p = 100
----
root
 ├── upsert parent_multi
 │    ├── columns: <none>
 │    ├── canary column: 7
 │    ├── fetch columns: pk:7 p:8 q:9
 │    ├── insert-mapping:
 │    │    ├── column1:4 => pk:1
 │    │    ├── column2:5 => p:2
 │    │    └── column3:6 => q:3
 │    ├── update-mapping:
 │    │    └── upsert_p:12 => p:2
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: upsert_pk:11 upsert_p:12!null upsert_q:13 column1:4!null column2:5!null column3:6!null pk:7 p:8 q:9 p_new:10!null
 │         ├── project
 │         │    ├── columns: p_new:10!null column1:4!null column2:5!null column3:6!null pk:7 p:8 q:9
 │         │    ├── left-join (hash)
 │         │    │    ├── columns: column1:4!null column2:5!null column3:6!null pk:7 p:8 q:9
 │         │    │    ├── ensure-upsert-distinct-on
 │         │    │    │    ├── columns: column1:4!null column2:5!null column3:6!null
 │         │    │    │    ├── grouping columns: column2:5!null column3:6!null
 │         │    │    │    ├── values
 │         │    │    │    │    ├── columns: column1:4!null column2:5!null column3:6!null
 │         │    │    │    │    ├── (1, 10, 10)
 │         │    │    │    │    └── (2, 20, 20)
 │         │    │    │    └── aggregations
 │         │    │    │         └── first-agg [as=column1:4]
 │         │    │    │              └── column1:4
 │         │    │    ├── scan parent_multi
 │         │    │    │    └── columns: pk:7!null p:8 q:9
 │         │    │    └── filters
 │         │    │         ├── column2:5 = p:8
 │         │    │         └── column3:6 = q:9
 │         │    └── projections
 │         │         └── 100 [as=p_new:10]
 │         └── projections
 │              ├── CASE WHEN pk:7 IS NULL THEN column1:4 ELSE pk:7 END [as=upsert_pk:11]
 │              ├── CASE WHEN pk:7 IS NULL THEN column2:5 ELSE p_new:10 END [as=upsert_p:12]
 │              └── CASE WHEN pk:7 IS NULL THEN column3:6 ELSE q:9 END [as=upsert_q:13]
 └── cascade
      ├── update child_multi
      │    ├── columns: <none>
      │    ├── fetch columns: c:17 child_multi.p:18 child_multi.q:19
      │    ├── update-mapping:
      │    │    ├── p_new:24 => child_multi.p:15
      │    │    └── q_new:25 => child_multi.q:16
      │    ├── input binding: &2
      │    ├── cascades
      │    │    └── fk2
      │    ├── project
      │    │    ├── columns: p_new:24!null q_new:25!null c:17!null child_multi.p:18!null child_multi.q:19!null p:20!null q:21!null upsert_p:22!null q:23
      │    │    ├── inner-join (hash)
      │    │    │    ├── columns: c:17!null child_multi.p:18!null child_multi.q:19!null p:20!null q:21!null upsert_p:22!null q:23
      │    │    │    ├── scan child_multi
      │    │    │    │    └── columns: c:17!null child_multi.p:18 child_multi.q:19
      │    │    │    ├── select
      │    │    │    │    ├── columns: p:20 q:21 upsert_p:22!null q:23
      │    │    │    │    ├── with-scan &1
      │    │    │    │    │    ├── columns: p:20 q:21 upsert_p:22!null q:23
      │    │    │    │    │    └── mapping:
      │    │    │    │    │         ├──  parent_multi.p:8 => p:20
      │    │    │    │    │         ├──  parent_multi.q:9 => q:21
      │    │    │    │    │         ├──  upsert_p:12 => upsert_p:22
      │    │    │    │    │         └──  parent_multi.q:9 => q:23
      │    │    │    │    └── filters
      │    │    │    │         └── (p:20 IS DISTINCT FROM upsert_p:22) OR (q:21 IS DISTINCT FROM q:23)
      │    │    │    └── filters
      │    │    │         ├── child_multi.p:18 = p:20
      │    │    │         └── child_multi.q:19 = q:21
      │    │    └── projections
      │    │         ├── 0 [as=p_new:24]
      │    │         └── 1 [as=q_new:25]
      │    └── f-k-checks
      │         └── f-k-checks-item: child_multi(p,q) -> parent_multi(p,q)
      │              └── anti-join (hash)
      │                   ├── columns: p_new:26!null q_new:27!null
      │                   ├── with-scan &2
      │                   │    ├── columns: p_new:26!null q_new:27!null
      │                   │    └── mapping:
      │                   │         ├──  p_new:24 => p_new:26
      │                   │         └──  q_new:25 => q_new:27
      │                   ├── scan parent_multi
      │                   │    └── columns: parent_multi.p:29 parent_multi.q:30
      │                   └── filters
      │                        ├── p_new:26 = parent_multi.p:29
      │                        └── q_new:27 = parent_multi.q:30
      └── cascade
           └── update grandchild
                ├── columns: <none>
                ├── fetch columns: g:34 grandchild.c:35 grandchild.q:36
                ├── update-mapping:
                │    ├── c_new:41 => grandchild.c:32
                │    └── q_new:42 => grandchild.q:33
                ├── input binding: &3
                ├── project
                │    ├── columns: c_new:41!null q_new:42!null g:34!null grandchild.c:35!null grandchild.q:36!null c:37!null q:38!null c:39!null q_new:40!null
                │    ├── inner-join (hash)
                │    │    ├── columns: g:34!null grandchild.c:35!null grandchild.q:36!null c:37!null q:38!null c:39!null q_new:40!null
                │    │    ├── scan grandchild
                │    │    │    └── columns: g:34!null grandchild.c:35 grandchild.q:36
                │    │    ├── select
                │    │    │    ├── columns: c:37!null q:38!null c:39!null q_new:40!null
                │    │    │    ├── with-scan &2
                │    │    │    │    ├── columns: c:37!null q:38!null c:39!null q_new:40!null
                │    │    │    │    └── mapping:
                │    │    │    │         ├──  child_multi.c:17 => c:37
                │    │    │    │         ├──  child_multi.q:19 => q:38
                │    │    │    │         ├──  child_multi.c:17 => c:39
                │    │    │    │         └──  q_new:25 => q_new:40
                │    │    │    └── filters
                │    │    │         └── (c:37 IS DISTINCT FROM c:39) OR (q:38 IS DISTINCT FROM q_new:40)
                │    │    └── filters
                │    │         ├── grandchild.c:35 = c:37
                │    │         └── grandchild.q:36 = q:38
                │    └── projections
                │         ├── 10 [as=c_new:41]
                │         └── 11 [as=q_new:42]
                └── f-k-checks
                     └── f-k-checks-item: grandchild(c,q) -> child_multi(c,q)
                          └── anti-join (hash)
                               ├── columns: c_new:43!null q_new:44!null
                               ├── with-scan &3
                               │    ├── columns: c_new:43!null q_new:44!null
                               │    └── mapping:
                               │         ├──  c_new:41 => c_new:43
                               │         └──  q_new:42 => q_new:44
                               ├── scan child_multi
                               │    └── columns: child_multi.c:45!null child_multi.q:47
                               └── filters
                                    ├── c_new:43 = child_multi.c:45
                                    └── q_new:44 = child_multi.q:47
