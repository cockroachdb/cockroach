exec-ddl
CREATE TABLE abcde (
    a INT NOT NULL,
    b INT,
    c INT DEFAULT (10),
    d INT AS (b + c + 1) STORED,
    e INT AS (a) STORED
)
----

exec-ddl
CREATE TABLE xyz (
    x TEXT PRIMARY KEY,
    y INT8,
    z FLOAT8
)
----

exec-ddl
CREATE TABLE uv (
    u DECIMAL,
    v BYTES
)
----

exec-ddl
CREATE TABLE mutation (
    m INT PRIMARY KEY,
    n INT,
    "o:write-only" INT DEFAULT(10),
    "p:write-only" INT AS (o + n) STORED,
    "q:delete-only" INT AS (m * p) STORED,
    CHECK (m > 0)
)
----

exec-ddl
CREATE TABLE checks (
    a INT PRIMARY KEY CHECK (a > 0),
    b INT,
    c INT,
    d INT AS (c + 1) STORED,
    CHECK (b < d)
)
----

exec-ddl
CREATE TABLE decimals (
    a DECIMAL(10,0) PRIMARY KEY CHECK (round(a) = a),
    b DECIMAL(5,1)[] CHECK (b[0] > 1),
    c DECIMAL(10,1) DEFAULT (1.23),
    d DECIMAL(10,1) AS (a+c) STORED
)
----

# ------------------------------------------------------------------------------
# Basic tests.
# ------------------------------------------------------------------------------

# Set single column.
build
UPDATE abcde SET a=2 WHERE a=1
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── a_new:15 => a:1
 │    └── a_new:15 => e:5
 └── project
      ├── columns: column16:16 a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 a_new:15!null
      ├── project
      │    ├── columns: a_new:15!null a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    ├── select
      │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    ├── scan abcde
      │    │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    │    └── computed column expressions
      │    │    │         ├── d:11
      │    │    │         │    └── (b:9 + c:10) + 1
      │    │    │         └── e:12
      │    │    │              └── a:8
      │    │    └── filters
      │    │         └── a:8 = 1
      │    └── projections
      │         └── 2 [as=a_new:15]
      └── projections
           └── (b:9 + c:10) + 1 [as=column16:16]

# Set all non-computed columns.
build
UPDATE abcde SET a=1, b=2, c=3, rowid=4
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── a_new:15 => a:1
 │    ├── b_new:16 => b:2
 │    ├── c_new:17 => c:3
 │    ├── column19:19 => d:4
 │    ├── a_new:15 => e:5
 │    └── rowid_new:18 => rowid:6
 └── project
      ├── columns: column19:19!null a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 a_new:15!null b_new:16!null c_new:17!null rowid_new:18!null
      ├── project
      │    ├── columns: a_new:15!null b_new:16!null c_new:17!null rowid_new:18!null a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    ├── scan abcde
      │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    └── computed column expressions
      │    │         ├── d:11
      │    │         │    └── (b:9 + c:10) + 1
      │    │         └── e:12
      │    │              └── a:8
      │    └── projections
      │         ├── 1 [as=a_new:15]
      │         ├── 2 [as=b_new:16]
      │         ├── 3 [as=c_new:17]
      │         └── 4 [as=rowid_new:18]
      └── projections
           └── (b_new:16 + c_new:17) + 1 [as=column19:19]

# Set all non-computed columns in reverse order.
build
UPDATE abcde SET rowid=1, c=2, b=3, a=4
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── a_new:18 => a:1
 │    ├── b_new:17 => b:2
 │    ├── c_new:16 => c:3
 │    ├── column19:19 => d:4
 │    ├── a_new:18 => e:5
 │    └── rowid_new:15 => rowid:6
 └── project
      ├── columns: column19:19!null a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 rowid_new:15!null c_new:16!null b_new:17!null a_new:18!null
      ├── project
      │    ├── columns: rowid_new:15!null c_new:16!null b_new:17!null a_new:18!null a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    ├── scan abcde
      │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    └── computed column expressions
      │    │         ├── d:11
      │    │         │    └── (b:9 + c:10) + 1
      │    │         └── e:12
      │    │              └── a:8
      │    └── projections
      │         ├── 1 [as=rowid_new:15]
      │         ├── 2 [as=c_new:16]
      │         ├── 3 [as=b_new:17]
      │         └── 4 [as=a_new:18]
      └── projections
           └── (b_new:17 + c_new:16) + 1 [as=column19:19]

# Set all non-computed columns to NULL.
build
UPDATE abcde SET a=NULL, b=NULL, c=NULL, rowid=NULL
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── a_new:15 => a:1
 │    ├── a_new:15 => b:2
 │    ├── a_new:15 => c:3
 │    ├── column16:16 => d:4
 │    ├── a_new:15 => e:5
 │    └── a_new:15 => rowid:6
 └── project
      ├── columns: column16:16 a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 a_new:15
      ├── project
      │    ├── columns: a_new:15 a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    ├── scan abcde
      │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    └── computed column expressions
      │    │         ├── d:11
      │    │         │    └── (b:9 + c:10) + 1
      │    │         └── e:12
      │    │              └── a:8
      │    └── projections
      │         └── NULL::INT8 [as=a_new:15]
      └── projections
           └── (a_new:15 + a_new:15) + 1 [as=column16:16]

# Set columns using variable expressions.
build
UPDATE abcde SET a=a+1, b=b*c WHERE b>e
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── a_new:15 => a:1
 │    ├── b_new:16 => b:2
 │    ├── column17:17 => d:4
 │    └── a_new:15 => e:5
 └── project
      ├── columns: column17:17 a:8!null b:9!null c:10 d:11 e:12!null rowid:13!null crdb_internal_mvcc_timestamp:14 a_new:15!null b_new:16
      ├── project
      │    ├── columns: a_new:15!null b_new:16 a:8!null b:9!null c:10 d:11 e:12!null rowid:13!null crdb_internal_mvcc_timestamp:14
      │    ├── select
      │    │    ├── columns: a:8!null b:9!null c:10 d:11 e:12!null rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    ├── scan abcde
      │    │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    │    └── computed column expressions
      │    │    │         ├── d:11
      │    │    │         │    └── (b:9 + c:10) + 1
      │    │    │         └── e:12
      │    │    │              └── a:8
      │    │    └── filters
      │    │         └── b:9 > e:12
      │    └── projections
      │         ├── a:8 + 1 [as=a_new:15]
      │         └── b:9 * c:10 [as=b_new:16]
      └── projections
           └── (b_new:16 + c:10) + 1 [as=column17:17]

# Set columns using aliased expressions.
build
UPDATE abcde AS foo SET a=foo.b, b=foo.c
----
update abcde [as=foo]
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── b:9 => a:1
 │    ├── c:10 => b:2
 │    ├── column15:15 => d:4
 │    └── b:9 => e:5
 └── project
      ├── columns: column15:15 a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      ├── scan abcde [as=foo]
      │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    └── computed column expressions
      │         ├── d:11
      │         │    └── (b:9 + c:10) + 1
      │         └── e:12
      │              └── a:8
      └── projections
           └── (c:10 + c:10) + 1 [as=column15:15]

# Use WHERE, ORDER BY, LIMIT.
build
UPDATE abcde SET b=1 WHERE a>0 ORDER BY a LIMIT 10
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── b_new:15 => b:2
 │    └── column16:16 => d:4
 └── project
      ├── columns: column16:16 a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 b_new:15!null
      ├── project
      │    ├── columns: b_new:15!null a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    ├── limit
      │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    ├── internal-ordering: +8
      │    │    ├── sort
      │    │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    │    ├── ordering: +8
      │    │    │    ├── limit hint: 10.00
      │    │    │    └── select
      │    │    │         ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    │         ├── scan abcde
      │    │    │         │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    │         │    └── computed column expressions
      │    │    │         │         ├── d:11
      │    │    │         │         │    └── (b:9 + c:10) + 1
      │    │    │         │         └── e:12
      │    │    │         │              └── a:8
      │    │    │         └── filters
      │    │    │              └── a:8 > 0
      │    │    └── 10
      │    └── projections
      │         └── 1 [as=b_new:15]
      └── projections
           └── (b_new:15 + c:10) + 1 [as=column16:16]

# UPDATE with index hints.
exec-ddl
CREATE TABLE xyzw (
  x INT PRIMARY KEY,
  y INT,
  z INT,
  w INT,
  INDEX foo (z, y)
)
----

build
UPDATE xyzw@primary SET x=2 WHERE z=1
----
update xyzw
 ├── columns: <none>
 ├── fetch columns: x:6 y:7 z:8 w:9
 ├── update-mapping:
 │    └── x_new:11 => x:1
 └── project
      ├── columns: x_new:11!null x:6!null y:7 z:8!null w:9 crdb_internal_mvcc_timestamp:10
      ├── select
      │    ├── columns: x:6!null y:7 z:8!null w:9 crdb_internal_mvcc_timestamp:10
      │    ├── scan xyzw
      │    │    ├── columns: x:6!null y:7 z:8 w:9 crdb_internal_mvcc_timestamp:10
      │    │    └── flags: force-index=primary
      │    └── filters
      │         └── z:8 = 1
      └── projections
           └── 2 [as=x_new:11]

build
UPDATE xyzw@foo SET x=2 WHERE z=1
----
update xyzw
 ├── columns: <none>
 ├── fetch columns: x:6 y:7 z:8 w:9
 ├── update-mapping:
 │    └── x_new:11 => x:1
 └── project
      ├── columns: x_new:11!null x:6!null y:7 z:8!null w:9 crdb_internal_mvcc_timestamp:10
      ├── select
      │    ├── columns: x:6!null y:7 z:8!null w:9 crdb_internal_mvcc_timestamp:10
      │    ├── scan xyzw
      │    │    ├── columns: x:6!null y:7 z:8 w:9 crdb_internal_mvcc_timestamp:10
      │    │    └── flags: force-index=foo
      │    └── filters
      │         └── z:8 = 1
      └── projections
           └── 2 [as=x_new:11]

build
UPDATE xyzw@{FORCE_INDEX=foo,ASC} SET x=2 WHERE z=1
----
update xyzw
 ├── columns: <none>
 ├── fetch columns: x:6 y:7 z:8 w:9
 ├── update-mapping:
 │    └── x_new:11 => x:1
 └── project
      ├── columns: x_new:11!null x:6!null y:7 z:8!null w:9 crdb_internal_mvcc_timestamp:10
      ├── select
      │    ├── columns: x:6!null y:7 z:8!null w:9 crdb_internal_mvcc_timestamp:10
      │    ├── scan xyzw
      │    │    ├── columns: x:6!null y:7 z:8 w:9 crdb_internal_mvcc_timestamp:10
      │    │    └── flags: force-index=foo,fwd
      │    └── filters
      │         └── z:8 = 1
      └── projections
           └── 2 [as=x_new:11]

build
UPDATE xyzw@{FORCE_INDEX=foo,DESC} SET x=2 WHERE z=1
----
update xyzw
 ├── columns: <none>
 ├── fetch columns: x:6 y:7 z:8 w:9
 ├── update-mapping:
 │    └── x_new:11 => x:1
 └── project
      ├── columns: x_new:11!null x:6!null y:7 z:8!null w:9 crdb_internal_mvcc_timestamp:10
      ├── select
      │    ├── columns: x:6!null y:7 z:8!null w:9 crdb_internal_mvcc_timestamp:10
      │    ├── scan xyzw,rev
      │    │    ├── columns: x:6!null y:7 z:8 w:9 crdb_internal_mvcc_timestamp:10
      │    │    └── flags: force-index=foo,rev
      │    └── filters
      │         └── z:8 = 1
      └── projections
           └── 2 [as=x_new:11]

build
UPDATE xyzw@{NO_INDEX_JOIN} SET x=2 WHERE z=1
----
update xyzw
 ├── columns: <none>
 ├── fetch columns: x:6 y:7 z:8 w:9
 ├── update-mapping:
 │    └── x_new:11 => x:1
 └── project
      ├── columns: x_new:11!null x:6!null y:7 z:8!null w:9 crdb_internal_mvcc_timestamp:10
      ├── select
      │    ├── columns: x:6!null y:7 z:8!null w:9 crdb_internal_mvcc_timestamp:10
      │    ├── scan xyzw
      │    │    ├── columns: x:6!null y:7 z:8 w:9 crdb_internal_mvcc_timestamp:10
      │    │    └── flags: no-index-join
      │    └── filters
      │         └── z:8 = 1
      └── projections
           └── 2 [as=x_new:11]

build
UPDATE xyzw@bad_idx SET x=2 WHERE z=1
----
error: index "bad_idx" not found


# Infer types.
build
UPDATE xyz SET y=1, z=1
----
update xyz
 ├── columns: <none>
 ├── fetch columns: x:5 y:6 z:7
 ├── update-mapping:
 │    ├── y_new:9 => y:2
 │    └── z_new:10 => z:3
 └── project
      ├── columns: y_new:9!null z_new:10!null x:5!null y:6 z:7 crdb_internal_mvcc_timestamp:8
      ├── scan xyz
      │    └── columns: x:5!null y:6 z:7 crdb_internal_mvcc_timestamp:8
      └── projections
           ├── 1 [as=y_new:9]
           └── 1.0 [as=z_new:10]

# Use placeholders.
build
UPDATE xyz SET x=$1, y=$2, z=$3
----
update xyz
 ├── columns: <none>
 ├── fetch columns: x:5 y:6 z:7
 ├── update-mapping:
 │    ├── x_new:9 => x:1
 │    ├── y_new:10 => y:2
 │    └── z_new:11 => z:3
 └── project
      ├── columns: x_new:9 y_new:10 z_new:11 x:5!null y:6 z:7 crdb_internal_mvcc_timestamp:8
      ├── scan xyz
      │    └── columns: x:5!null y:6 z:7 crdb_internal_mvcc_timestamp:8
      └── projections
           ├── $1 [as=x_new:9]
           ├── $2 [as=y_new:10]
           └── $3 [as=z_new:11]

# Duplicate expressions with placeholders.
build
UPDATE abcde SET a=$1 + 1, b=$1 + 1 WHERE c=10
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── a_new:15 => a:1
 │    ├── a_new:15 => b:2
 │    ├── column16:16 => d:4
 │    └── a_new:15 => e:5
 └── project
      ├── columns: column16:16 a:8!null b:9 c:10!null d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 a_new:15
      ├── project
      │    ├── columns: a_new:15 a:8!null b:9 c:10!null d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    ├── select
      │    │    ├── columns: a:8!null b:9 c:10!null d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    ├── scan abcde
      │    │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    │    └── computed column expressions
      │    │    │         ├── d:11
      │    │    │         │    └── (b:9 + c:10) + 1
      │    │    │         └── e:12
      │    │    │              └── a:8
      │    │    └── filters
      │    │         └── c:10 = 10
      │    └── projections
      │         └── $1 + 1 [as=a_new:15]
      └── projections
           └── (a_new:15 + c:10) + 1 [as=column16:16]


# Unknown target table.
build
UPDATE unknown SET x=1
----
error (42P01): no data source matches prefix: "unknown"

# Unknown target column.
build
UPDATE abcde SET f=1
----
error (42703): column "f" does not exist

# Test SET type checking.
build
UPDATE xyz SET x=1, y=1, z=1
----
error (42804): value type int doesn't match type string of column "x"

# Try to use non-returning UPDATE as expression.
build
SELECT * FROM [UPDATE abcde SET a=1]
----
error (42703): statement source "UPDATE abcde SET a = 1" does not return any columns

# Non-referenced CTE with mutation.
build
WITH cte AS (SELECT b FROM [UPDATE abcde SET a=b RETURNING *]) UPDATE abcde SET a=b
----
with &1
 ├── project
 │    ├── columns: abcde.a:1!null abcde.b:2 abcde.c:3 abcde.d:4 abcde.e:5
 │    └── update abcde
 │         ├── columns: abcde.a:1!null abcde.b:2 abcde.c:3 abcde.d:4 abcde.e:5 rowid:6!null
 │         ├── fetch columns: abcde.a:8 abcde.b:9 abcde.c:10 abcde.d:11 abcde.e:12 rowid:13
 │         ├── update-mapping:
 │         │    ├── abcde.b:9 => abcde.a:1
 │         │    ├── column15:15 => abcde.d:4
 │         │    └── abcde.b:9 => abcde.e:5
 │         └── project
 │              ├── columns: column15:15 abcde.a:8!null abcde.b:9 abcde.c:10 abcde.d:11 abcde.e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
 │              ├── scan abcde
 │              │    ├── columns: abcde.a:8!null abcde.b:9 abcde.c:10 abcde.d:11 abcde.e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
 │              │    └── computed column expressions
 │              │         ├── abcde.d:11
 │              │         │    └── (abcde.b:9 + abcde.c:10) + 1
 │              │         └── abcde.e:12
 │              │              └── abcde.a:8
 │              └── projections
 │                   └── (abcde.b:9 + abcde.c:10) + 1 [as=column15:15]
 └── with &2 (cte)
      ├── project
      │    ├── columns: b:17
      │    └── with-scan &1
      │         ├── columns: a:16!null b:17 c:18 d:19 e:20
      │         └── mapping:
      │              ├──  abcde.a:1 => a:16
      │              ├──  abcde.b:2 => b:17
      │              ├──  abcde.c:3 => c:18
      │              ├──  abcde.d:4 => d:19
      │              └──  abcde.e:5 => e:20
      └── update abcde
           ├── columns: <none>
           ├── fetch columns: abcde.a:28 abcde.b:29 abcde.c:30 abcde.d:31 abcde.e:32 rowid:33
           ├── update-mapping:
           │    ├── abcde.b:29 => abcde.a:21
           │    ├── column35:35 => abcde.d:24
           │    └── abcde.b:29 => abcde.e:25
           └── project
                ├── columns: column35:35 abcde.a:28!null abcde.b:29 abcde.c:30 abcde.d:31 abcde.e:32 rowid:33!null crdb_internal_mvcc_timestamp:34
                ├── scan abcde
                │    ├── columns: abcde.a:28!null abcde.b:29 abcde.c:30 abcde.d:31 abcde.e:32 rowid:33!null crdb_internal_mvcc_timestamp:34
                │    └── computed column expressions
                │         ├── abcde.d:31
                │         │    └── (abcde.b:29 + abcde.c:30) + 1
                │         └── abcde.e:32
                │              └── abcde.a:28
                └── projections
                     └── (abcde.b:29 + abcde.c:30) + 1 [as=column35:35]

# With alias, original table name should be inaccessible.
build
UPDATE abcde AS foo SET a=abcde.b
----
error (42P01): no data source matches prefix: abcde in this context

# ORDER BY can only be used with LIMIT.
build
UPDATE abcde SET b=1 ORDER BY c
----
error (42601): UPDATE statement requires LIMIT when ORDER BY is used

# ------------------------------------------------------------------------------
# Test RETURNING.
# ------------------------------------------------------------------------------

# Return values from update.
build
UPDATE abcde SET a=2 WHERE a=1 RETURNING *
----
project
 ├── columns: a:1!null b:2 c:3 d:4 e:5!null
 └── update abcde
      ├── columns: a:1!null b:2 c:3 d:4 e:5!null rowid:6!null
      ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
      ├── update-mapping:
      │    ├── a_new:15 => a:1
      │    └── a_new:15 => e:5
      └── project
           ├── columns: column16:16 a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 a_new:15!null
           ├── project
           │    ├── columns: a_new:15!null a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
           │    ├── select
           │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
           │    │    ├── scan abcde
           │    │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
           │    │    │    └── computed column expressions
           │    │    │         ├── d:11
           │    │    │         │    └── (b:9 + c:10) + 1
           │    │    │         └── e:12
           │    │    │              └── a:8
           │    │    └── filters
           │    │         └── a:8 = 1
           │    └── projections
           │         └── 2 [as=a_new:15]
           └── projections
                └── (b:9 + c:10) + 1 [as=column16:16]

# Return values from aliased table.
build
UPDATE abcde AS foo SET a=2 WHERE a=1 RETURNING foo.a+1, foo.b * foo.d
----
project
 ├── columns: "?column?":17!null "?column?":18
 ├── update abcde [as=foo]
 │    ├── columns: a:1!null b:2 c:3 d:4 e:5!null rowid:6!null
 │    ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 │    ├── update-mapping:
 │    │    ├── a_new:15 => a:1
 │    │    └── a_new:15 => e:5
 │    └── project
 │         ├── columns: column16:16 a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 a_new:15!null
 │         ├── project
 │         │    ├── columns: a_new:15!null a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
 │         │    ├── select
 │         │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
 │         │    │    ├── scan abcde [as=foo]
 │         │    │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
 │         │    │    │    └── computed column expressions
 │         │    │    │         ├── d:11
 │         │    │    │         │    └── (b:9 + c:10) + 1
 │         │    │    │         └── e:12
 │         │    │    │              └── a:8
 │         │    │    └── filters
 │         │    │         └── a:8 = 1
 │         │    └── projections
 │         │         └── 2 [as=a_new:15]
 │         └── projections
 │              └── (b:9 + c:10) + 1 [as=column16:16]
 └── projections
      ├── a:1 + 1 [as="?column?":17]
      └── b:2 * d:4 [as="?column?":18]

# Use returning UPDATE as a FROM expression.
build
SELECT a, d FROM [UPDATE abcde SET a=2 WHERE a>0 ORDER BY b LIMIT 10 RETURNING *]
----
with &1
 ├── columns: a:17!null d:20
 ├── project
 │    ├── columns: abcde.a:1!null abcde.b:2 abcde.c:3 abcde.d:4 abcde.e:5!null
 │    └── update abcde
 │         ├── columns: abcde.a:1!null abcde.b:2 abcde.c:3 abcde.d:4 abcde.e:5!null rowid:6!null
 │         ├── fetch columns: abcde.a:8 abcde.b:9 abcde.c:10 abcde.d:11 abcde.e:12 rowid:13
 │         ├── update-mapping:
 │         │    ├── a_new:15 => abcde.a:1
 │         │    └── a_new:15 => abcde.e:5
 │         └── project
 │              ├── columns: column16:16 abcde.a:8!null abcde.b:9 abcde.c:10 abcde.d:11 abcde.e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 a_new:15!null
 │              ├── project
 │              │    ├── columns: a_new:15!null abcde.a:8!null abcde.b:9 abcde.c:10 abcde.d:11 abcde.e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
 │              │    ├── limit
 │              │    │    ├── columns: abcde.a:8!null abcde.b:9 abcde.c:10 abcde.d:11 abcde.e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
 │              │    │    ├── internal-ordering: +9
 │              │    │    ├── sort
 │              │    │    │    ├── columns: abcde.a:8!null abcde.b:9 abcde.c:10 abcde.d:11 abcde.e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
 │              │    │    │    ├── ordering: +9
 │              │    │    │    ├── limit hint: 10.00
 │              │    │    │    └── select
 │              │    │    │         ├── columns: abcde.a:8!null abcde.b:9 abcde.c:10 abcde.d:11 abcde.e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
 │              │    │    │         ├── scan abcde
 │              │    │    │         │    ├── columns: abcde.a:8!null abcde.b:9 abcde.c:10 abcde.d:11 abcde.e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
 │              │    │    │         │    └── computed column expressions
 │              │    │    │         │         ├── abcde.d:11
 │              │    │    │         │         │    └── (abcde.b:9 + abcde.c:10) + 1
 │              │    │    │         │         └── abcde.e:12
 │              │    │    │         │              └── abcde.a:8
 │              │    │    │         └── filters
 │              │    │    │              └── abcde.a:8 > 0
 │              │    │    └── 10
 │              │    └── projections
 │              │         └── 2 [as=a_new:15]
 │              └── projections
 │                   └── (abcde.b:9 + abcde.c:10) + 1 [as=column16:16]
 └── project
      ├── columns: a:17!null d:20
      └── with-scan &1
           ├── columns: a:17!null b:18 c:19 d:20 e:21!null
           └── mapping:
                ├──  abcde.a:1 => a:17
                ├──  abcde.b:2 => b:18
                ├──  abcde.c:3 => c:19
                ├──  abcde.d:4 => d:20
                └──  abcde.e:5 => e:21

# Return hidden column.
build
UPDATE abcde SET rowid=rowid+1 RETURNING rowid
----
project
 ├── columns: rowid:6!null
 └── update abcde
      ├── columns: a:1!null b:2 c:3 d:4 e:5 rowid:6!null
      ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
      ├── update-mapping:
      │    └── rowid_new:15 => rowid:6
      └── project
           ├── columns: column16:16 a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 rowid_new:15!null
           ├── project
           │    ├── columns: rowid_new:15!null a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
           │    ├── scan abcde
           │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
           │    │    └── computed column expressions
           │    │         ├── d:11
           │    │         │    └── (b:9 + c:10) + 1
           │    │         └── e:12
           │    │              └── a:8
           │    └── projections
           │         └── rowid:13 + 1 [as=rowid_new:15]
           └── projections
                └── (b:9 + c:10) + 1 [as=column16:16]

# Try to use aggregate function in RETURNING clause.
build
UPDATE abcde SET b=1 RETURNING sum(a)
----
error (42803): sum(): aggregate functions are not allowed in RETURNING

# Try to use SRF in RETURNING clause.
build
UPDATE abcde SET c=1 RETURNING generate_series(1, 10)
----
error (0A000): generate_series(): generator functions are not allowed in RETURNING

# ------------------------------------------------------------------------------
# Test DEFAULT values.
# ------------------------------------------------------------------------------

# Use DEFAULT expressions in RHS of SET expressions.
build
UPDATE abcde SET b=DEFAULT, c=DEFAULT
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── b_new:15 => b:2
 │    ├── c_new:16 => c:3
 │    └── column17:17 => d:4
 └── project
      ├── columns: column17:17 a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 b_new:15 c_new:16!null
      ├── project
      │    ├── columns: b_new:15 c_new:16!null a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    ├── scan abcde
      │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    └── computed column expressions
      │    │         ├── d:11
      │    │         │    └── (b:9 + c:10) + 1
      │    │         └── e:12
      │    │              └── a:8
      │    └── projections
      │         ├── NULL::INT8 [as=b_new:15]
      │         └── 10 [as=c_new:16]
      └── projections
           └── (b_new:15 + c_new:16) + 1 [as=column17:17]

# Allow not-null column to be updated with NULL DEFAULT value (would fail at
# runtime if there are any rows to update).
build
UPDATE abcde SET a=DEFAULT
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── a_new:15 => a:1
 │    └── a_new:15 => e:5
 └── project
      ├── columns: column16:16 a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 a_new:15
      ├── project
      │    ├── columns: a_new:15 a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    ├── scan abcde
      │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    └── computed column expressions
      │    │         ├── d:11
      │    │         │    └── (b:9 + c:10) + 1
      │    │         └── e:12
      │    │              └── a:8
      │    └── projections
      │         └── NULL::INT8 [as=a_new:15]
      └── projections
           └── (b:9 + c:10) + 1 [as=column16:16]

build
UPDATE abcde SET c=1+DEFAULT
----
error (42601): DEFAULT can only appear in a VALUES list within INSERT or on the right side of a SET

# ------------------------------------------------------------------------------
# Test tuples.
# ------------------------------------------------------------------------------

build
UPDATE abcde SET (a, b, c) = (1, 2, 3)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── a_new:15 => a:1
 │    ├── b_new:16 => b:2
 │    ├── c_new:17 => c:3
 │    ├── column18:18 => d:4
 │    └── a_new:15 => e:5
 └── project
      ├── columns: column18:18!null a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 a_new:15!null b_new:16!null c_new:17!null
      ├── project
      │    ├── columns: a_new:15!null b_new:16!null c_new:17!null a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    ├── scan abcde
      │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    └── computed column expressions
      │    │         ├── d:11
      │    │         │    └── (b:9 + c:10) + 1
      │    │         └── e:12
      │    │              └── a:8
      │    └── projections
      │         ├── 1 [as=a_new:15]
      │         ├── 2 [as=b_new:16]
      │         └── 3 [as=c_new:17]
      └── projections
           └── (b_new:16 + c_new:17) + 1 [as=column18:18]

build
UPDATE abcde SET (c) = (NULL), (b, a) = (1, 2)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── a_new:17 => a:1
 │    ├── b_new:16 => b:2
 │    ├── c_new:15 => c:3
 │    ├── column18:18 => d:4
 │    └── a_new:17 => e:5
 └── project
      ├── columns: column18:18 a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 c_new:15 b_new:16!null a_new:17!null
      ├── project
      │    ├── columns: c_new:15 b_new:16!null a_new:17!null a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    ├── scan abcde
      │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    └── computed column expressions
      │    │         ├── d:11
      │    │         │    └── (b:9 + c:10) + 1
      │    │         └── e:12
      │    │              └── a:8
      │    └── projections
      │         ├── NULL::INT8 [as=c_new:15]
      │         ├── 1 [as=b_new:16]
      │         └── 2 [as=a_new:17]
      └── projections
           └── (b_new:16 + c_new:15) + 1 [as=column18:18]

# Tuples + DEFAULT.
build
UPDATE abcde SET (b, c)=(DEFAULT, DEFAULT)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── b_new:15 => b:2
 │    ├── c_new:16 => c:3
 │    └── column17:17 => d:4
 └── project
      ├── columns: column17:17 a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 b_new:15 c_new:16!null
      ├── project
      │    ├── columns: b_new:15 c_new:16!null a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    ├── scan abcde
      │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    └── computed column expressions
      │    │         ├── d:11
      │    │         │    └── (b:9 + c:10) + 1
      │    │         └── e:12
      │    │              └── a:8
      │    └── projections
      │         ├── NULL::INT8 [as=b_new:15]
      │         └── 10 [as=c_new:16]
      └── projections
           └── (b_new:15 + c_new:16) + 1 [as=column17:17]

# Tuples + non-null DEFAULT.
build
UPDATE abcde SET (a, b)=(DEFAULT, DEFAULT)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── a_new:15 => a:1
 │    ├── a_new:15 => b:2
 │    ├── column16:16 => d:4
 │    └── a_new:15 => e:5
 └── project
      ├── columns: column16:16 a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 a_new:15
      ├── project
      │    ├── columns: a_new:15 a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    ├── scan abcde
      │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    └── computed column expressions
      │    │         ├── d:11
      │    │         │    └── (b:9 + c:10) + 1
      │    │         └── e:12
      │    │              └── a:8
      │    └── projections
      │         └── NULL::INT8 [as=a_new:15]
      └── projections
           └── (a_new:15 + c:10) + 1 [as=column16:16]

build
UPDATE abcde SET (a, b)=(1, 2, 3)
----
error (42601): number of columns (2) does not match number of values (3)

build
UPDATE abcde SET (a, b, a)=(1, 2, 3)
----
error (42601): multiple assignments to the same column "a"

build
UPDATE abcde SET (a, unk)=(1, 2)
----
error (42703): column "unk" does not exist

build
UPDATE abcde SET (a, d)=(1, 2)
----
error (55000): cannot write directly to computed column "d"

# ------------------------------------------------------------------------------
# Test subqueries.
# ------------------------------------------------------------------------------

# Update single column.
build
UPDATE abcde SET (a)=(SELECT 1 AS one)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── one:15 => a:1
 │    └── one:15 => e:5
 └── project
      ├── columns: column16:16 a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 one:15
      ├── left-join-apply
      │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14 one:15
      │    ├── scan abcde
      │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null crdb_internal_mvcc_timestamp:14
      │    │    └── computed column expressions
      │    │         ├── d:11
      │    │         │    └── (b:9 + c:10) + 1
      │    │         └── e:12
      │    │              └── a:8
      │    ├── max1-row
      │    │    ├── columns: one:15!null
      │    │    └── project
      │    │         ├── columns: one:15!null
      │    │         ├── values
      │    │         │    └── ()
      │    │         └── projections
      │    │              └── 1 [as=one:15]
      │    └── filters (true)
      └── projections
           └── (b:9 + c:10) + 1 [as=column16:16]

# Update all updatable columns.
build
UPDATE abcde SET (a, b, c, rowid)=(SELECT x::int, y, z::int, y+1 AS y1 FROM xyz)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── x:19 => a:1
 │    ├── y:16 => b:2
 │    ├── z:20 => c:3
 │    ├── column22:22 => d:4
 │    ├── x:19 => e:5
 │    └── y1:21 => rowid:6
 └── project
      ├── columns: column22:22 a:8!null b:9 c:10 d:11 e:12 rowid:13!null abcde.crdb_internal_mvcc_timestamp:14 y:16 x:19 z:20 y1:21
      ├── left-join-apply
      │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null abcde.crdb_internal_mvcc_timestamp:14 y:16 x:19 z:20 y1:21
      │    ├── scan abcde
      │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null abcde.crdb_internal_mvcc_timestamp:14
      │    │    └── computed column expressions
      │    │         ├── d:11
      │    │         │    └── (b:9 + c:10) + 1
      │    │         └── e:12
      │    │              └── a:8
      │    ├── max1-row
      │    │    ├── columns: y:16 x:19!null z:20 y1:21
      │    │    └── project
      │    │         ├── columns: x:19!null z:20 y1:21 y:16
      │    │         ├── scan xyz
      │    │         │    └── columns: xyz.x:15!null y:16 xyz.z:17 xyz.crdb_internal_mvcc_timestamp:18
      │    │         └── projections
      │    │              ├── xyz.x:15::INT8 [as=x:19]
      │    │              ├── xyz.z:17::INT8 [as=z:20]
      │    │              └── y:16 + 1 [as=y1:21]
      │    └── filters (true)
      └── projections
           └── (y:16 + z:20) + 1 [as=column22:22]

# Update using combination of subquery and tuple SET expressions.
build
UPDATE abcde SET (a, b)=(SELECT y, y+1 AS y1 FROM xyz), (c, rowid)=(1, 2)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── y:16 => a:1
 │    ├── y1:19 => b:2
 │    ├── c_new:20 => c:3
 │    ├── column22:22 => d:4
 │    ├── y:16 => e:5
 │    └── rowid_new:21 => rowid:6
 └── project
      ├── columns: column22:22 a:8!null b:9 c:10 d:11 e:12 rowid:13!null abcde.crdb_internal_mvcc_timestamp:14 y:16 y1:19 c_new:20!null rowid_new:21!null
      ├── project
      │    ├── columns: c_new:20!null rowid_new:21!null a:8!null b:9 c:10 d:11 e:12 rowid:13!null abcde.crdb_internal_mvcc_timestamp:14 y:16 y1:19
      │    ├── left-join-apply
      │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null abcde.crdb_internal_mvcc_timestamp:14 y:16 y1:19
      │    │    ├── scan abcde
      │    │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null abcde.crdb_internal_mvcc_timestamp:14
      │    │    │    └── computed column expressions
      │    │    │         ├── d:11
      │    │    │         │    └── (b:9 + c:10) + 1
      │    │    │         └── e:12
      │    │    │              └── a:8
      │    │    ├── max1-row
      │    │    │    ├── columns: y:16 y1:19
      │    │    │    └── project
      │    │    │         ├── columns: y1:19 y:16
      │    │    │         ├── scan xyz
      │    │    │         │    └── columns: x:15!null y:16 z:17 xyz.crdb_internal_mvcc_timestamp:18
      │    │    │         └── projections
      │    │    │              └── y:16 + 1 [as=y1:19]
      │    │    └── filters (true)
      │    └── projections
      │         ├── 1 [as=c_new:20]
      │         └── 2 [as=rowid_new:21]
      └── projections
           └── (y1:19 + c_new:20) + 1 [as=column22:22]

# Use subquery SET expression after other expressions.
build
UPDATE abcde SET a=1, (b)=(2), (c, rowid)=(SELECT y, y+1 AS y1 FROM xyz)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── a_new:20 => a:1
 │    ├── b_new:21 => b:2
 │    ├── y:16 => c:3
 │    ├── column22:22 => d:4
 │    ├── a_new:20 => e:5
 │    └── y1:19 => rowid:6
 └── project
      ├── columns: column22:22 a:8!null b:9 c:10 d:11 e:12 rowid:13!null abcde.crdb_internal_mvcc_timestamp:14 y:16 y1:19 a_new:20!null b_new:21!null
      ├── project
      │    ├── columns: a_new:20!null b_new:21!null a:8!null b:9 c:10 d:11 e:12 rowid:13!null abcde.crdb_internal_mvcc_timestamp:14 y:16 y1:19
      │    ├── left-join-apply
      │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null abcde.crdb_internal_mvcc_timestamp:14 y:16 y1:19
      │    │    ├── scan abcde
      │    │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null abcde.crdb_internal_mvcc_timestamp:14
      │    │    │    └── computed column expressions
      │    │    │         ├── d:11
      │    │    │         │    └── (b:9 + c:10) + 1
      │    │    │         └── e:12
      │    │    │              └── a:8
      │    │    ├── max1-row
      │    │    │    ├── columns: y:16 y1:19
      │    │    │    └── project
      │    │    │         ├── columns: y1:19 y:16
      │    │    │         ├── scan xyz
      │    │    │         │    └── columns: x:15!null y:16 z:17 xyz.crdb_internal_mvcc_timestamp:18
      │    │    │         └── projections
      │    │    │              └── y:16 + 1 [as=y1:19]
      │    │    └── filters (true)
      │    └── projections
      │         ├── 1 [as=a_new:20]
      │         └── 2 [as=b_new:21]
      └── projections
           └── (b_new:21 + y:16) + 1 [as=column22:22]

# Multiple subqueries in SET expressions.
build
UPDATE abcde SET (b, a)=(SELECT y, y+1 AS y1 FROM xyz), (c, rowid)=(SELECT 1 AS one, 2 AS two)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:8 b:9 c:10 d:11 e:12 rowid:13
 ├── update-mapping:
 │    ├── y1:19 => a:1
 │    ├── y:16 => b:2
 │    ├── one:20 => c:3
 │    ├── column22:22 => d:4
 │    ├── y1:19 => e:5
 │    └── two:21 => rowid:6
 └── project
      ├── columns: column22:22 a:8!null b:9 c:10 d:11 e:12 rowid:13!null abcde.crdb_internal_mvcc_timestamp:14 y:16 y1:19 one:20 two:21
      ├── left-join-apply
      │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null abcde.crdb_internal_mvcc_timestamp:14 y:16 y1:19 one:20 two:21
      │    ├── left-join-apply
      │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null abcde.crdb_internal_mvcc_timestamp:14 y:16 y1:19
      │    │    ├── scan abcde
      │    │    │    ├── columns: a:8!null b:9 c:10 d:11 e:12 rowid:13!null abcde.crdb_internal_mvcc_timestamp:14
      │    │    │    └── computed column expressions
      │    │    │         ├── d:11
      │    │    │         │    └── (b:9 + c:10) + 1
      │    │    │         └── e:12
      │    │    │              └── a:8
      │    │    ├── max1-row
      │    │    │    ├── columns: y:16 y1:19
      │    │    │    └── project
      │    │    │         ├── columns: y1:19 y:16
      │    │    │         ├── scan xyz
      │    │    │         │    └── columns: x:15!null y:16 z:17 xyz.crdb_internal_mvcc_timestamp:18
      │    │    │         └── projections
      │    │    │              └── y:16 + 1 [as=y1:19]
      │    │    └── filters (true)
      │    ├── max1-row
      │    │    ├── columns: one:20!null two:21!null
      │    │    └── project
      │    │         ├── columns: one:20!null two:21!null
      │    │         ├── values
      │    │         │    └── ()
      │    │         └── projections
      │    │              ├── 1 [as=one:20]
      │    │              └── 2 [as=two:21]
      │    └── filters (true)
      └── projections
           └── (y:16 + one:20) + 1 [as=column22:22]

# Incorporate desired types when compiling subquery.
build
UPDATE xyz SET x='foo', (z, y)=(SELECT 2 AS two, 3 AS three)
----
update xyz
 ├── columns: <none>
 ├── fetch columns: x:5 y:6 z:7
 ├── update-mapping:
 │    ├── x_new:11 => x:1
 │    ├── three:10 => y:2
 │    └── two:9 => z:3
 └── project
      ├── columns: x_new:11!null x:5!null y:6 z:7 crdb_internal_mvcc_timestamp:8 two:9 three:10
      ├── left-join-apply
      │    ├── columns: x:5!null y:6 z:7 crdb_internal_mvcc_timestamp:8 two:9 three:10
      │    ├── scan xyz
      │    │    └── columns: x:5!null y:6 z:7 crdb_internal_mvcc_timestamp:8
      │    ├── max1-row
      │    │    ├── columns: two:9!null three:10!null
      │    │    └── project
      │    │         ├── columns: two:9!null three:10!null
      │    │         ├── values
      │    │         │    └── ()
      │    │         └── projections
      │    │              ├── 2.0 [as=two:9]
      │    │              └── 3 [as=three:10]
      │    └── filters (true)
      └── projections
           └── 'foo' [as=x_new:11]

# SET expression contains correlated subquery + alias.
build
UPDATE abcde AS abcde1 SET b=(SELECT b FROM abcde AS abcde2 WHERE abcde2.rowid=abcde1.a) RETURNING *
----
project
 ├── columns: a:1!null b:2 c:3 d:4 e:5
 └── update abcde [as=abcde1]
      ├── columns: abcde1.a:1!null abcde1.b:2 abcde1.c:3 abcde1.d:4 abcde1.e:5 abcde1.rowid:6!null
      ├── fetch columns: abcde1.a:8 abcde1.b:9 abcde1.c:10 abcde1.d:11 abcde1.e:12 abcde1.rowid:13
      ├── update-mapping:
      │    ├── b_new:22 => abcde1.b:2
      │    └── column23:23 => abcde1.d:4
      └── project
           ├── columns: column23:23 abcde1.a:8!null abcde1.b:9 abcde1.c:10 abcde1.d:11 abcde1.e:12 abcde1.rowid:13!null abcde1.crdb_internal_mvcc_timestamp:14 b_new:22
           ├── project
           │    ├── columns: b_new:22 abcde1.a:8!null abcde1.b:9 abcde1.c:10 abcde1.d:11 abcde1.e:12 abcde1.rowid:13!null abcde1.crdb_internal_mvcc_timestamp:14
           │    ├── scan abcde [as=abcde1]
           │    │    ├── columns: abcde1.a:8!null abcde1.b:9 abcde1.c:10 abcde1.d:11 abcde1.e:12 abcde1.rowid:13!null abcde1.crdb_internal_mvcc_timestamp:14
           │    │    └── computed column expressions
           │    │         ├── abcde1.d:11
           │    │         │    └── (abcde1.b:9 + abcde1.c:10) + 1
           │    │         └── abcde1.e:12
           │    │              └── abcde1.a:8
           │    └── projections
           │         └── subquery [as=b_new:22]
           │              └── max1-row
           │                   ├── columns: abcde2.b:16
           │                   └── project
           │                        ├── columns: abcde2.b:16
           │                        └── select
           │                             ├── columns: abcde2.a:15!null abcde2.b:16 abcde2.c:17 abcde2.d:18 abcde2.e:19 abcde2.rowid:20!null abcde2.crdb_internal_mvcc_timestamp:21
           │                             ├── scan abcde [as=abcde2]
           │                             │    ├── columns: abcde2.a:15!null abcde2.b:16 abcde2.c:17 abcde2.d:18 abcde2.e:19 abcde2.rowid:20!null abcde2.crdb_internal_mvcc_timestamp:21
           │                             │    └── computed column expressions
           │                             │         ├── abcde2.d:18
           │                             │         │    └── (abcde2.b:16 + abcde2.c:17) + 1
           │                             │         └── abcde2.e:19
           │                             │              └── abcde2.a:15
           │                             └── filters
           │                                  └── abcde2.rowid:20 = abcde1.a:8
           └── projections
                └── (b_new:22 + abcde1.c:10) + 1 [as=column23:23]

# Too many values.
build
UPDATE abcde SET (a, b)=(SELECT y, y+1 AS y1, y+2 AS y2 FROM xyz)
----
error (42601): number of columns (2) does not match number of values (3)

# Too few values.
build
UPDATE abcde SET (a, b, c)=(SELECT y, y+1 AS y1 FROM xyz)
----
error (42601): number of columns (3) does not match number of values (2)

# Try to update same column.
build
UPDATE abcde SET (a, b)=(1, 2), (c, b)=(SELECT y, y+1 AS y1 FROM xyz)
----
error (42601): multiple assignments to the same column "b"

# Target type does not match subquery result.
build
UPDATE xyz SET (x, y)=(SELECT a, b FROM abcde WHERE a>0)
----
error (42804): value type int doesn't match type string of column "x"

# ------------------------------------------------------------------------------
# Test CTEs.
# ------------------------------------------------------------------------------

# Use CTE within WHERE clause.
build
WITH cte AS (SELECT x FROM xyz) UPDATE abcde SET a=b WHERE EXISTS(SELECT * FROM cte)
----
with &1 (cte)
 ├── project
 │    ├── columns: xyz.x:1!null
 │    └── scan xyz
 │         └── columns: xyz.x:1!null y:2 z:3 xyz.crdb_internal_mvcc_timestamp:4
 └── update abcde
      ├── columns: <none>
      ├── fetch columns: a:12 b:13 c:14 d:15 e:16 rowid:17
      ├── update-mapping:
      │    ├── b:13 => a:5
      │    ├── column20:20 => d:8
      │    └── b:13 => e:9
      └── project
           ├── columns: column20:20 a:12!null b:13 c:14 d:15 e:16 rowid:17!null abcde.crdb_internal_mvcc_timestamp:18
           ├── select
           │    ├── columns: a:12!null b:13 c:14 d:15 e:16 rowid:17!null abcde.crdb_internal_mvcc_timestamp:18
           │    ├── scan abcde
           │    │    ├── columns: a:12!null b:13 c:14 d:15 e:16 rowid:17!null abcde.crdb_internal_mvcc_timestamp:18
           │    │    └── computed column expressions
           │    │         ├── d:15
           │    │         │    └── (b:13 + c:14) + 1
           │    │         └── e:16
           │    │              └── a:12
           │    └── filters
           │         └── exists
           │              └── with-scan &1 (cte)
           │                   ├── columns: x:19!null
           │                   └── mapping:
           │                        └──  xyz.x:1 => x:19
           └── projections
                └── (b:13 + c:14) + 1 [as=column20:20]

# Use CTE within SET expression.
build
WITH a AS (SELECT y, y+1 AS y1 FROM xyz) UPDATE abcde SET (a, b) = (SELECT * FROM a)
----
with &1 (a)
 ├── project
 │    ├── columns: y1:5 xyz.y:2
 │    ├── scan xyz
 │    │    └── columns: x:1!null xyz.y:2 z:3 xyz.crdb_internal_mvcc_timestamp:4
 │    └── projections
 │         └── xyz.y:2 + 1 [as=y1:5]
 └── update abcde
      ├── columns: <none>
      ├── fetch columns: a:13 b:14 c:15 d:16 e:17 rowid:18
      ├── update-mapping:
      │    ├── y:20 => a:6
      │    ├── y1:21 => b:7
      │    ├── column22:22 => d:9
      │    └── y:20 => e:10
      └── project
           ├── columns: column22:22 a:13!null b:14 c:15 d:16 e:17 rowid:18!null abcde.crdb_internal_mvcc_timestamp:19 y:20 y1:21
           ├── left-join-apply
           │    ├── columns: a:13!null b:14 c:15 d:16 e:17 rowid:18!null abcde.crdb_internal_mvcc_timestamp:19 y:20 y1:21
           │    ├── scan abcde
           │    │    ├── columns: a:13!null b:14 c:15 d:16 e:17 rowid:18!null abcde.crdb_internal_mvcc_timestamp:19
           │    │    └── computed column expressions
           │    │         ├── d:16
           │    │         │    └── (b:14 + c:15) + 1
           │    │         └── e:17
           │    │              └── a:13
           │    ├── max1-row
           │    │    ├── columns: y:20 y1:21
           │    │    └── with-scan &1 (a)
           │    │         ├── columns: y:20 y1:21
           │    │         └── mapping:
           │    │              ├──  xyz.y:2 => y:20
           │    │              └──  y1:5 => y1:21
           │    └── filters (true)
           └── projections
                └── (y1:21 + c:15) + 1 [as=column22:22]

# ------------------------------------------------------------------------------
# Tests with mutations.
# ------------------------------------------------------------------------------

# Mutation columns should be updated.
build
UPDATE mutation SET m=1
----
update mutation
 ├── columns: <none>
 ├── fetch columns: m:7 n:8 o:9 p:10 q:11
 ├── update-mapping:
 │    ├── m_new:13 => m:1
 │    ├── column14:14 => o:3
 │    └── column15:15 => p:4
 ├── check columns: check1:16
 └── project
      ├── columns: check1:16!null m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 m_new:13!null column14:14!null column15:15
      ├── project
      │    ├── columns: column15:15 m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 m_new:13!null column14:14!null
      │    ├── project
      │    │    ├── columns: column14:14!null m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 m_new:13!null
      │    │    ├── project
      │    │    │    ├── columns: m_new:13!null m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12
      │    │    │    ├── scan mutation
      │    │    │    │    ├── columns: m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12
      │    │    │    │    └── check constraint expressions
      │    │    │    │         └── m:7 > 0
      │    │    │    └── projections
      │    │    │         └── 1 [as=m_new:13]
      │    │    └── projections
      │    │         └── 10 [as=column14:14]
      │    └── projections
      │         └── column14:14 + n:8 [as=column15:15]
      └── projections
           └── m_new:13 > 0 [as=check1:16]

# Update column that mutation column depends upon.
build
UPDATE mutation SET m=1, n=2
----
update mutation
 ├── columns: <none>
 ├── fetch columns: m:7 n:8 o:9 p:10 q:11
 ├── update-mapping:
 │    ├── m_new:13 => m:1
 │    ├── n_new:14 => n:2
 │    ├── column15:15 => o:3
 │    └── column16:16 => p:4
 ├── check columns: check1:17
 └── project
      ├── columns: check1:17!null m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 m_new:13!null n_new:14!null column15:15!null column16:16!null
      ├── project
      │    ├── columns: column16:16!null m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 m_new:13!null n_new:14!null column15:15!null
      │    ├── project
      │    │    ├── columns: column15:15!null m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 m_new:13!null n_new:14!null
      │    │    ├── project
      │    │    │    ├── columns: m_new:13!null n_new:14!null m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12
      │    │    │    ├── scan mutation
      │    │    │    │    ├── columns: m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12
      │    │    │    │    └── check constraint expressions
      │    │    │    │         └── m:7 > 0
      │    │    │    └── projections
      │    │    │         ├── 1 [as=m_new:13]
      │    │    │         └── 2 [as=n_new:14]
      │    │    └── projections
      │    │         └── 10 [as=column15:15]
      │    └── projections
      │         └── column15:15 + n_new:14 [as=column16:16]
      └── projections
           └── m_new:13 > 0 [as=check1:17]

# Ensure that ORDER BY wildcard does not select mutation columns.
build
UPDATE mutation SET m=1 ORDER BY mutation.* LIMIT 10
----
update mutation
 ├── columns: <none>
 ├── fetch columns: m:7 n:8 o:9 p:10 q:11
 ├── update-mapping:
 │    ├── m_new:13 => m:1
 │    ├── column14:14 => o:3
 │    └── column15:15 => p:4
 ├── check columns: check1:16
 └── project
      ├── columns: check1:16!null m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 m_new:13!null column14:14!null column15:15
      ├── project
      │    ├── columns: column15:15 m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 m_new:13!null column14:14!null
      │    ├── project
      │    │    ├── columns: column14:14!null m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 m_new:13!null
      │    │    ├── project
      │    │    │    ├── columns: m_new:13!null m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12
      │    │    │    ├── limit
      │    │    │    │    ├── columns: m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12
      │    │    │    │    ├── internal-ordering: +7,+8
      │    │    │    │    ├── sort (segmented)
      │    │    │    │    │    ├── columns: m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12
      │    │    │    │    │    ├── ordering: +7,+8
      │    │    │    │    │    ├── limit hint: 10.00
      │    │    │    │    │    └── scan mutation
      │    │    │    │    │         ├── columns: m:7!null n:8 o:9 p:10 q:11 crdb_internal_mvcc_timestamp:12
      │    │    │    │    │         ├── check constraint expressions
      │    │    │    │    │         │    └── m:7 > 0
      │    │    │    │    │         └── ordering: +7
      │    │    │    │    └── 10
      │    │    │    └── projections
      │    │    │         └── 1 [as=m_new:13]
      │    │    └── projections
      │    │         └── 10 [as=column14:14]
      │    └── projections
      │         └── column14:14 + n:8 [as=column15:15]
      └── projections
           └── m_new:13 > 0 [as=check1:16]

# Try to return a mutation column.
build
UPDATE mutation SET m=1 RETURNING o
----
error (42703): column "o" does not exist

# Try to update a mutation column.
build
UPDATE mutation SET o=10
----
error (42703): column "o" does not exist

# Try to use mutation column in WHERE clause.
build
UPDATE mutation SET m=1 WHERE o=10
----
error (42P10): column "o" is being backfilled

# Try to use mutation column in SET expression.
build
UPDATE mutation SET m=o
----
error (42P10): column "o" is being backfilled

# Try to use mutation column in ORDER BY expression.
build
UPDATE mutation SET m=1 ORDER BY o LIMIT 2
----
error (42P10): column "o" is being backfilled

# ------------------------------------------------------------------------------
# Test check constraints
# ------------------------------------------------------------------------------

# Update all columns to be constant.
build
UPDATE checks SET a=1, b=2, c=3
----
update checks
 ├── columns: <none>
 ├── fetch columns: a:6 b:7 c:8 d:9
 ├── update-mapping:
 │    ├── a_new:11 => a:1
 │    ├── b_new:12 => b:2
 │    ├── c_new:13 => c:3
 │    └── column14:14 => d:4
 ├── check columns: check1:15 check2:16
 └── project
      ├── columns: check1:15!null check2:16!null a:6!null b:7 c:8 d:9 crdb_internal_mvcc_timestamp:10 a_new:11!null b_new:12!null c_new:13!null column14:14!null
      ├── project
      │    ├── columns: column14:14!null a:6!null b:7 c:8 d:9 crdb_internal_mvcc_timestamp:10 a_new:11!null b_new:12!null c_new:13!null
      │    ├── project
      │    │    ├── columns: a_new:11!null b_new:12!null c_new:13!null a:6!null b:7 c:8 d:9 crdb_internal_mvcc_timestamp:10
      │    │    ├── scan checks
      │    │    │    ├── columns: a:6!null b:7 c:8 d:9 crdb_internal_mvcc_timestamp:10
      │    │    │    ├── check constraint expressions
      │    │    │    │    └── a:6 > 0
      │    │    │    └── computed column expressions
      │    │    │         └── d:9
      │    │    │              └── c:8 + 1
      │    │    └── projections
      │    │         ├── 1 [as=a_new:11]
      │    │         ├── 2 [as=b_new:12]
      │    │         └── 3 [as=c_new:13]
      │    └── projections
      │         └── c_new:13 + 1 [as=column14:14]
      └── projections
           ├── b_new:12 < column14:14 [as=check1:15]
           └── a_new:11 > 0 [as=check2:16]

# Do not update columns for one of the constraints.
build
UPDATE checks SET a=1
----
update checks
 ├── columns: <none>
 ├── fetch columns: a:6 b:7 c:8 d:9
 ├── update-mapping:
 │    └── a_new:11 => a:1
 ├── check columns: check2:14
 └── project
      ├── columns: check1:13 check2:14!null a:6!null b:7 c:8 d:9 crdb_internal_mvcc_timestamp:10 a_new:11!null column12:12
      ├── project
      │    ├── columns: column12:12 a:6!null b:7 c:8 d:9 crdb_internal_mvcc_timestamp:10 a_new:11!null
      │    ├── project
      │    │    ├── columns: a_new:11!null a:6!null b:7 c:8 d:9 crdb_internal_mvcc_timestamp:10
      │    │    ├── scan checks
      │    │    │    ├── columns: a:6!null b:7 c:8 d:9 crdb_internal_mvcc_timestamp:10
      │    │    │    ├── check constraint expressions
      │    │    │    │    └── a:6 > 0
      │    │    │    └── computed column expressions
      │    │    │         └── d:9
      │    │    │              └── c:8 + 1
      │    │    └── projections
      │    │         └── 1 [as=a_new:11]
      │    └── projections
      │         └── c:8 + 1 [as=column12:12]
      └── projections
           ├── b:7 < d:9 [as=check1:13]
           └── a_new:11 > 0 [as=check2:14]

# Update one column in constraint, but not the other.
build
UPDATE checks SET b=2
----
update checks
 ├── columns: <none>
 ├── fetch columns: a:6 b:7 c:8 d:9
 ├── update-mapping:
 │    └── b_new:11 => b:2
 ├── check columns: check1:13
 └── project
      ├── columns: check1:13 check2:14!null a:6!null b:7 c:8 d:9 crdb_internal_mvcc_timestamp:10 b_new:11!null column12:12
      ├── project
      │    ├── columns: column12:12 a:6!null b:7 c:8 d:9 crdb_internal_mvcc_timestamp:10 b_new:11!null
      │    ├── project
      │    │    ├── columns: b_new:11!null a:6!null b:7 c:8 d:9 crdb_internal_mvcc_timestamp:10
      │    │    ├── scan checks
      │    │    │    ├── columns: a:6!null b:7 c:8 d:9 crdb_internal_mvcc_timestamp:10
      │    │    │    ├── check constraint expressions
      │    │    │    │    └── a:6 > 0
      │    │    │    └── computed column expressions
      │    │    │         └── d:9
      │    │    │              └── c:8 + 1
      │    │    └── projections
      │    │         └── 2 [as=b_new:11]
      │    └── projections
      │         └── c:8 + 1 [as=column12:12]
      └── projections
           ├── b_new:11 < d:9 [as=check1:13]
           └── a:6 > 0 [as=check2:14]

# Update using tuple and subquery.
build
UPDATE checks SET (a, b)=(SELECT a, b FROM abcde WHERE abcde.a=checks.a)
----
update checks
 ├── columns: <none>
 ├── fetch columns: checks.a:6 checks.b:7 checks.c:8 checks.d:9
 ├── update-mapping:
 │    ├── abcde.a:11 => checks.a:1
 │    └── abcde.b:12 => checks.b:2
 ├── check columns: check1:19 check2:20
 └── project
      ├── columns: check1:19 check2:20 checks.a:6!null checks.b:7 checks.c:8 checks.d:9 checks.crdb_internal_mvcc_timestamp:10 abcde.a:11 abcde.b:12 column18:18
      ├── project
      │    ├── columns: column18:18 checks.a:6!null checks.b:7 checks.c:8 checks.d:9 checks.crdb_internal_mvcc_timestamp:10 abcde.a:11 abcde.b:12
      │    ├── left-join-apply
      │    │    ├── columns: checks.a:6!null checks.b:7 checks.c:8 checks.d:9 checks.crdb_internal_mvcc_timestamp:10 abcde.a:11 abcde.b:12
      │    │    ├── scan checks
      │    │    │    ├── columns: checks.a:6!null checks.b:7 checks.c:8 checks.d:9 checks.crdb_internal_mvcc_timestamp:10
      │    │    │    ├── check constraint expressions
      │    │    │    │    └── checks.a:6 > 0
      │    │    │    └── computed column expressions
      │    │    │         └── checks.d:9
      │    │    │              └── checks.c:8 + 1
      │    │    ├── max1-row
      │    │    │    ├── columns: abcde.a:11!null abcde.b:12
      │    │    │    └── project
      │    │    │         ├── columns: abcde.a:11!null abcde.b:12
      │    │    │         └── select
      │    │    │              ├── columns: abcde.a:11!null abcde.b:12 abcde.c:13 abcde.d:14 e:15 rowid:16!null abcde.crdb_internal_mvcc_timestamp:17
      │    │    │              ├── scan abcde
      │    │    │              │    ├── columns: abcde.a:11!null abcde.b:12 abcde.c:13 abcde.d:14 e:15 rowid:16!null abcde.crdb_internal_mvcc_timestamp:17
      │    │    │              │    └── computed column expressions
      │    │    │              │         ├── abcde.d:14
      │    │    │              │         │    └── (abcde.b:12 + abcde.c:13) + 1
      │    │    │              │         └── e:15
      │    │    │              │              └── abcde.a:11
      │    │    │              └── filters
      │    │    │                   └── abcde.a:11 = checks.a:6
      │    │    └── filters (true)
      │    └── projections
      │         └── checks.c:8 + 1 [as=column18:18]
      └── projections
           ├── abcde.b:12 < checks.d:9 [as=check1:19]
           └── abcde.a:11 > 0 [as=check2:20]

# ------------------------------------------------------------------------------
# Test decimal column truncation.
# ------------------------------------------------------------------------------

build
UPDATE decimals SET a=1.1, b=ARRAY[0.95, NULL, 15]
----
update decimals
 ├── columns: <none>
 ├── fetch columns: decimals.a:6 decimals.b:7 c:8 decimals.d:9
 ├── update-mapping:
 │    ├── a:13 => decimals.a:1
 │    ├── b:14 => decimals.b:2
 │    └── d:16 => decimals.d:4
 ├── check columns: check1:17 check2:18
 └── project
      ├── columns: check1:17 check2:18 decimals.a:6!null decimals.b:7 c:8 decimals.d:9 crdb_internal_mvcc_timestamp:10 a:13 b:14 d:16
      ├── project
      │    ├── columns: d:16 decimals.a:6!null decimals.b:7 c:8 decimals.d:9 crdb_internal_mvcc_timestamp:10 a:13 b:14
      │    ├── project
      │    │    ├── columns: column15:15 decimals.a:6!null decimals.b:7 c:8 decimals.d:9 crdb_internal_mvcc_timestamp:10 a:13 b:14
      │    │    ├── project
      │    │    │    ├── columns: a:13 b:14 decimals.a:6!null decimals.b:7 c:8 decimals.d:9 crdb_internal_mvcc_timestamp:10
      │    │    │    ├── project
      │    │    │    │    ├── columns: a_new:11!null b_new:12 decimals.a:6!null decimals.b:7 c:8 decimals.d:9 crdb_internal_mvcc_timestamp:10
      │    │    │    │    ├── scan decimals
      │    │    │    │    │    ├── columns: decimals.a:6!null decimals.b:7 c:8 decimals.d:9 crdb_internal_mvcc_timestamp:10
      │    │    │    │    │    └── computed column expressions
      │    │    │    │    │         └── decimals.d:9
      │    │    │    │    │              └── decimals.a:6::DECIMAL + c:8::DECIMAL
      │    │    │    │    └── projections
      │    │    │    │         ├── 1.1 [as=a_new:11]
      │    │    │    │         └── ARRAY[0.95,NULL,15] [as=b_new:12]
      │    │    │    └── projections
      │    │    │         ├── crdb_internal.round_decimal_values(a_new:11, 0) [as=a:13]
      │    │    │         └── crdb_internal.round_decimal_values(b_new:12, 1) [as=b:14]
      │    │    └── projections
      │    │         └── a:13 + c:8::DECIMAL [as=column15:15]
      │    └── projections
      │         └── crdb_internal.round_decimal_values(column15:15, 1) [as=d:16]
      └── projections
           ├── round(a:13) = a:13 [as=check1:17]
           └── b:14[0] > 1 [as=check2:18]
