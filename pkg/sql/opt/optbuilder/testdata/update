exec-ddl
CREATE TABLE abcde (
    a INT NOT NULL,
    b INT,
    c INT DEFAULT (10),
    d INT AS (b + c + 1) STORED,
    e INT AS (a) STORED
)
----

exec-ddl
CREATE TABLE xyz (
    x TEXT PRIMARY KEY,
    y INT8,
    z FLOAT8
)
----

exec-ddl
CREATE TABLE uv (
    u DECIMAL,
    v BYTES
)
----

exec-ddl
CREATE TABLE mutation (
    m INT PRIMARY KEY,
    n INT,
    "o:write-only" INT DEFAULT(10),
    "p:write-only" INT AS (o + n) STORED,
    "q:delete-only" INT AS (m * p) STORED,
    CHECK (m > 0)
)
----

exec-ddl
CREATE TABLE checks (
    a INT PRIMARY KEY CHECK (a > 0),
    b INT,
    c INT,
    d INT AS (c + 1) STORED,
    CHECK (b < d)
)
----

exec-ddl
CREATE TABLE decimals (
    a DECIMAL(10,0) PRIMARY KEY CHECK (round(a) = a),
    b DECIMAL(5,1)[] CHECK (b[0] > 1),
    c DECIMAL(10,1) DEFAULT (1.23),
    d DECIMAL(10,1) AS (a+c) STORED
)
----

# ------------------------------------------------------------------------------
# Basic tests.
# ------------------------------------------------------------------------------

# Set single column.
build
UPDATE abcde SET a=2 WHERE a=1
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── a_new:13 => a:1
 │    ├── column14:14 => d:4
 │    └── a_new:13 => e:5
 └── project
      ├── columns: column14:14 a:7!null b:8 c:9 d:10 e:11 rowid:12!null a_new:13!null
      ├── project
      │    ├── columns: a_new:13!null a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    ├── select
      │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    ├── scan abcde
      │    │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    │    └── computed column expressions
      │    │    │         ├── d:10
      │    │    │         │    └── (b:8 + c:9) + 1
      │    │    │         └── e:11
      │    │    │              └── a:7
      │    │    └── filters
      │    │         └── a:7 = 1
      │    └── projections
      │         └── 2 [as=a_new:13]
      └── projections
           └── (b:8 + c:9) + 1 [as=column14:14]

# Set all non-computed columns.
build
UPDATE abcde SET a=1, b=2, c=3, rowid=4
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── a_new:13 => a:1
 │    ├── b_new:14 => b:2
 │    ├── c_new:15 => c:3
 │    ├── column17:17 => d:4
 │    ├── a_new:13 => e:5
 │    └── rowid_new:16 => rowid:6
 └── project
      ├── columns: column17:17!null a:7!null b:8 c:9 d:10 e:11 rowid:12!null a_new:13!null b_new:14!null c_new:15!null rowid_new:16!null
      ├── project
      │    ├── columns: a_new:13!null b_new:14!null c_new:15!null rowid_new:16!null a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    ├── scan abcde
      │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    └── computed column expressions
      │    │         ├── d:10
      │    │         │    └── (b:8 + c:9) + 1
      │    │         └── e:11
      │    │              └── a:7
      │    └── projections
      │         ├── 1 [as=a_new:13]
      │         ├── 2 [as=b_new:14]
      │         ├── 3 [as=c_new:15]
      │         └── 4 [as=rowid_new:16]
      └── projections
           └── (b_new:14 + c_new:15) + 1 [as=column17:17]

# Set all non-computed columns in reverse order.
build
UPDATE abcde SET rowid=1, c=2, b=3, a=4
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── a_new:16 => a:1
 │    ├── b_new:15 => b:2
 │    ├── c_new:14 => c:3
 │    ├── column17:17 => d:4
 │    ├── a_new:16 => e:5
 │    └── rowid_new:13 => rowid:6
 └── project
      ├── columns: column17:17!null a:7!null b:8 c:9 d:10 e:11 rowid:12!null rowid_new:13!null c_new:14!null b_new:15!null a_new:16!null
      ├── project
      │    ├── columns: rowid_new:13!null c_new:14!null b_new:15!null a_new:16!null a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    ├── scan abcde
      │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    └── computed column expressions
      │    │         ├── d:10
      │    │         │    └── (b:8 + c:9) + 1
      │    │         └── e:11
      │    │              └── a:7
      │    └── projections
      │         ├── 1 [as=rowid_new:13]
      │         ├── 2 [as=c_new:14]
      │         ├── 3 [as=b_new:15]
      │         └── 4 [as=a_new:16]
      └── projections
           └── (b_new:15 + c_new:14) + 1 [as=column17:17]

# Set all non-computed columns to NULL.
build
UPDATE abcde SET a=NULL, b=NULL, c=NULL, rowid=NULL
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── a_new:13 => a:1
 │    ├── a_new:13 => b:2
 │    ├── a_new:13 => c:3
 │    ├── column14:14 => d:4
 │    ├── a_new:13 => e:5
 │    └── a_new:13 => rowid:6
 └── project
      ├── columns: column14:14 a:7!null b:8 c:9 d:10 e:11 rowid:12!null a_new:13
      ├── project
      │    ├── columns: a_new:13 a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    ├── scan abcde
      │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    └── computed column expressions
      │    │         ├── d:10
      │    │         │    └── (b:8 + c:9) + 1
      │    │         └── e:11
      │    │              └── a:7
      │    └── projections
      │         └── NULL::INT8 [as=a_new:13]
      └── projections
           └── (a_new:13 + a_new:13) + 1 [as=column14:14]

# Set columns using variable expressions.
build
UPDATE abcde SET a=a+1, b=b*c WHERE b>e
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── a_new:13 => a:1
 │    ├── b_new:14 => b:2
 │    ├── column15:15 => d:4
 │    └── a_new:13 => e:5
 └── project
      ├── columns: column15:15 a:7!null b:8!null c:9 d:10 e:11!null rowid:12!null a_new:13!null b_new:14
      ├── project
      │    ├── columns: a_new:13!null b_new:14 a:7!null b:8!null c:9 d:10 e:11!null rowid:12!null
      │    ├── select
      │    │    ├── columns: a:7!null b:8!null c:9 d:10 e:11!null rowid:12!null
      │    │    ├── scan abcde
      │    │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    │    └── computed column expressions
      │    │    │         ├── d:10
      │    │    │         │    └── (b:8 + c:9) + 1
      │    │    │         └── e:11
      │    │    │              └── a:7
      │    │    └── filters
      │    │         └── b:8 > e:11
      │    └── projections
      │         ├── a:7 + 1 [as=a_new:13]
      │         └── b:8 * c:9 [as=b_new:14]
      └── projections
           └── (b_new:14 + c:9) + 1 [as=column15:15]

# Set columns using aliased expressions.
build
UPDATE abcde AS foo SET a=foo.b, b=foo.c
----
update foo
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── b:8 => a:1
 │    ├── c:9 => b:2
 │    ├── column13:13 => d:4
 │    └── b:8 => e:5
 └── project
      ├── columns: column13:13 a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      ├── scan foo
      │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    └── computed column expressions
      │         ├── d:10
      │         │    └── (b:8 + c:9) + 1
      │         └── e:11
      │              └── a:7
      └── projections
           └── (c:9 + c:9) + 1 [as=column13:13]

# Use WHERE, ORDER BY, LIMIT.
build
UPDATE abcde SET b=1 WHERE a>0 ORDER BY a LIMIT 10
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── b_new:13 => b:2
 │    ├── column14:14 => d:4
 │    └── a:7 => e:5
 └── project
      ├── columns: column14:14 a:7!null b:8 c:9 d:10 e:11 rowid:12!null b_new:13!null
      ├── project
      │    ├── columns: b_new:13!null a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    ├── limit
      │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    ├── internal-ordering: +7
      │    │    ├── sort
      │    │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    │    ├── ordering: +7
      │    │    │    ├── limit hint: 10.00
      │    │    │    └── select
      │    │    │         ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    │         ├── scan abcde
      │    │    │         │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    │         │    └── computed column expressions
      │    │    │         │         ├── d:10
      │    │    │         │         │    └── (b:8 + c:9) + 1
      │    │    │         │         └── e:11
      │    │    │         │              └── a:7
      │    │    │         └── filters
      │    │    │              └── a:7 > 0
      │    │    └── 10
      │    └── projections
      │         └── 1 [as=b_new:13]
      └── projections
           └── (b_new:13 + c:9) + 1 [as=column14:14]

# UPDATE with index hints.
exec-ddl
CREATE TABLE xyzw (
  x INT PRIMARY KEY,
  y INT,
  z INT,
  w INT,
  INDEX foo (z, y)
)
----

build
UPDATE xyzw@primary SET x=2 WHERE z=1
----
update xyzw
 ├── columns: <none>
 ├── fetch columns: x:5 y:6 z:7 w:8
 ├── update-mapping:
 │    └── x_new:9 => x:1
 └── project
      ├── columns: x_new:9!null x:5!null y:6 z:7!null w:8
      ├── select
      │    ├── columns: x:5!null y:6 z:7!null w:8
      │    ├── scan xyzw
      │    │    ├── columns: x:5!null y:6 z:7 w:8
      │    │    └── flags: force-index=primary
      │    └── filters
      │         └── z:7 = 1
      └── projections
           └── 2 [as=x_new:9]

build
UPDATE xyzw@foo SET x=2 WHERE z=1
----
update xyzw
 ├── columns: <none>
 ├── fetch columns: x:5 y:6 z:7 w:8
 ├── update-mapping:
 │    └── x_new:9 => x:1
 └── project
      ├── columns: x_new:9!null x:5!null y:6 z:7!null w:8
      ├── select
      │    ├── columns: x:5!null y:6 z:7!null w:8
      │    ├── scan xyzw
      │    │    ├── columns: x:5!null y:6 z:7 w:8
      │    │    └── flags: force-index=foo
      │    └── filters
      │         └── z:7 = 1
      └── projections
           └── 2 [as=x_new:9]

build
UPDATE xyzw@{FORCE_INDEX=foo,ASC} SET x=2 WHERE z=1
----
update xyzw
 ├── columns: <none>
 ├── fetch columns: x:5 y:6 z:7 w:8
 ├── update-mapping:
 │    └── x_new:9 => x:1
 └── project
      ├── columns: x_new:9!null x:5!null y:6 z:7!null w:8
      ├── select
      │    ├── columns: x:5!null y:6 z:7!null w:8
      │    ├── scan xyzw
      │    │    ├── columns: x:5!null y:6 z:7 w:8
      │    │    └── flags: force-index=foo,fwd
      │    └── filters
      │         └── z:7 = 1
      └── projections
           └── 2 [as=x_new:9]

build
UPDATE xyzw@{FORCE_INDEX=foo,DESC} SET x=2 WHERE z=1
----
update xyzw
 ├── columns: <none>
 ├── fetch columns: x:5 y:6 z:7 w:8
 ├── update-mapping:
 │    └── x_new:9 => x:1
 └── project
      ├── columns: x_new:9!null x:5!null y:6 z:7!null w:8
      ├── select
      │    ├── columns: x:5!null y:6 z:7!null w:8
      │    ├── scan xyzw,rev
      │    │    ├── columns: x:5!null y:6 z:7 w:8
      │    │    └── flags: force-index=foo,rev
      │    └── filters
      │         └── z:7 = 1
      └── projections
           └── 2 [as=x_new:9]

build
UPDATE xyzw@{NO_INDEX_JOIN} SET x=2 WHERE z=1
----
update xyzw
 ├── columns: <none>
 ├── fetch columns: x:5 y:6 z:7 w:8
 ├── update-mapping:
 │    └── x_new:9 => x:1
 └── project
      ├── columns: x_new:9!null x:5!null y:6 z:7!null w:8
      ├── select
      │    ├── columns: x:5!null y:6 z:7!null w:8
      │    ├── scan xyzw
      │    │    ├── columns: x:5!null y:6 z:7 w:8
      │    │    └── flags: no-index-join
      │    └── filters
      │         └── z:7 = 1
      └── projections
           └── 2 [as=x_new:9]

build
UPDATE xyzw@bad_idx SET x=2 WHERE z=1
----
error: index "bad_idx" not found


# Infer types.
build
UPDATE xyz SET y=1, z=1
----
update xyz
 ├── columns: <none>
 ├── fetch columns: x:4 y:5 z:6
 ├── update-mapping:
 │    ├── y_new:7 => y:2
 │    └── z_new:8 => z:3
 └── project
      ├── columns: y_new:7!null z_new:8!null x:4!null y:5 z:6
      ├── scan xyz
      │    └── columns: x:4!null y:5 z:6
      └── projections
           ├── 1 [as=y_new:7]
           └── 1.0 [as=z_new:8]

# Use placeholders.
build
UPDATE xyz SET x=$1, y=$2, z=$3
----
update xyz
 ├── columns: <none>
 ├── fetch columns: x:4 y:5 z:6
 ├── update-mapping:
 │    ├── x_new:7 => x:1
 │    ├── y_new:8 => y:2
 │    └── z_new:9 => z:3
 └── project
      ├── columns: x_new:7 y_new:8 z_new:9 x:4!null y:5 z:6
      ├── scan xyz
      │    └── columns: x:4!null y:5 z:6
      └── projections
           ├── $1 [as=x_new:7]
           ├── $2 [as=y_new:8]
           └── $3 [as=z_new:9]

# Duplicate expressions with placeholders.
build
UPDATE abcde SET a=$1 + 1, b=$1 + 1 WHERE c=10
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── a_new:13 => a:1
 │    ├── a_new:13 => b:2
 │    ├── column14:14 => d:4
 │    └── a_new:13 => e:5
 └── project
      ├── columns: column14:14 a:7!null b:8 c:9!null d:10 e:11 rowid:12!null a_new:13
      ├── project
      │    ├── columns: a_new:13 a:7!null b:8 c:9!null d:10 e:11 rowid:12!null
      │    ├── select
      │    │    ├── columns: a:7!null b:8 c:9!null d:10 e:11 rowid:12!null
      │    │    ├── scan abcde
      │    │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    │    └── computed column expressions
      │    │    │         ├── d:10
      │    │    │         │    └── (b:8 + c:9) + 1
      │    │    │         └── e:11
      │    │    │              └── a:7
      │    │    └── filters
      │    │         └── c:9 = 10
      │    └── projections
      │         └── $1 + 1 [as=a_new:13]
      └── projections
           └── (a_new:13 + c:9) + 1 [as=column14:14]


# Unknown target table.
build
UPDATE unknown SET x=1
----
error (42P01): no data source matches prefix: "unknown"

# Unknown target column.
build
UPDATE abcde SET f=1
----
error (42703): column "f" does not exist

# Test SET type checking.
build
UPDATE xyz SET x=1, y=1, z=1
----
error (42804): value type int doesn't match type string of column "x"

# Try to use non-returning UPDATE as expression.
build
SELECT * FROM [UPDATE abcde SET a=1]
----
error (42703): statement source "UPDATE abcde SET a = 1" does not return any columns

# Non-referenced CTE with mutation.
build
WITH cte AS (SELECT b FROM [UPDATE abcde SET a=b RETURNING *]) UPDATE abcde SET a=b
----
with &1
 ├── project
 │    ├── columns: abcde.a:1!null abcde.b:2 abcde.c:3 abcde.d:4 abcde.e:5
 │    └── update abcde
 │         ├── columns: abcde.a:1!null abcde.b:2 abcde.c:3 abcde.d:4 abcde.e:5 rowid:6!null
 │         ├── fetch columns: abcde.a:7 abcde.b:8 abcde.c:9 abcde.d:10 abcde.e:11 rowid:12
 │         ├── update-mapping:
 │         │    ├── abcde.b:8 => abcde.a:1
 │         │    ├── column13:13 => abcde.d:4
 │         │    └── abcde.b:8 => abcde.e:5
 │         └── project
 │              ├── columns: column13:13 abcde.a:7!null abcde.b:8 abcde.c:9 abcde.d:10 abcde.e:11 rowid:12!null
 │              ├── scan abcde
 │              │    ├── columns: abcde.a:7!null abcde.b:8 abcde.c:9 abcde.d:10 abcde.e:11 rowid:12!null
 │              │    └── computed column expressions
 │              │         ├── abcde.d:10
 │              │         │    └── (abcde.b:8 + abcde.c:9) + 1
 │              │         └── abcde.e:11
 │              │              └── abcde.a:7
 │              └── projections
 │                   └── (abcde.b:8 + abcde.c:9) + 1 [as=column13:13]
 └── with &2 (cte)
      ├── project
      │    ├── columns: b:15
      │    └── with-scan &1
      │         ├── columns: a:14!null b:15 c:16 d:17 e:18
      │         └── mapping:
      │              ├──  abcde.a:1 => a:14
      │              ├──  abcde.b:2 => b:15
      │              ├──  abcde.c:3 => c:16
      │              ├──  abcde.d:4 => d:17
      │              └──  abcde.e:5 => e:18
      └── update abcde
           ├── columns: <none>
           ├── fetch columns: abcde.a:25 abcde.b:26 abcde.c:27 abcde.d:28 abcde.e:29 rowid:30
           ├── update-mapping:
           │    ├── abcde.b:26 => abcde.a:19
           │    ├── column31:31 => abcde.d:22
           │    └── abcde.b:26 => abcde.e:23
           └── project
                ├── columns: column31:31 abcde.a:25!null abcde.b:26 abcde.c:27 abcde.d:28 abcde.e:29 rowid:30!null
                ├── scan abcde
                │    ├── columns: abcde.a:25!null abcde.b:26 abcde.c:27 abcde.d:28 abcde.e:29 rowid:30!null
                │    └── computed column expressions
                │         ├── abcde.d:28
                │         │    └── (abcde.b:26 + abcde.c:27) + 1
                │         └── abcde.e:29
                │              └── abcde.a:25
                └── projections
                     └── (abcde.b:26 + abcde.c:27) + 1 [as=column31:31]

# With alias, original table name should be inaccessible.
build
UPDATE abcde AS foo SET a=abcde.b
----
error (42P01): no data source matches prefix: abcde

# ORDER BY can only be used with LIMIT.
build
UPDATE abcde SET b=1 ORDER BY c
----
error (42601): UPDATE statement requires LIMIT when ORDER BY is used

# ------------------------------------------------------------------------------
# Test RETURNING.
# ------------------------------------------------------------------------------

# Return values from update.
build
UPDATE abcde SET a=2 WHERE a=1 RETURNING *
----
project
 ├── columns: a:1!null b:2 c:3 d:4 e:5!null
 └── update abcde
      ├── columns: a:1!null b:2 c:3 d:4 e:5!null rowid:6!null
      ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
      ├── update-mapping:
      │    ├── a_new:13 => a:1
      │    ├── column14:14 => d:4
      │    └── a_new:13 => e:5
      └── project
           ├── columns: column14:14 a:7!null b:8 c:9 d:10 e:11 rowid:12!null a_new:13!null
           ├── project
           │    ├── columns: a_new:13!null a:7!null b:8 c:9 d:10 e:11 rowid:12!null
           │    ├── select
           │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
           │    │    ├── scan abcde
           │    │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
           │    │    │    └── computed column expressions
           │    │    │         ├── d:10
           │    │    │         │    └── (b:8 + c:9) + 1
           │    │    │         └── e:11
           │    │    │              └── a:7
           │    │    └── filters
           │    │         └── a:7 = 1
           │    └── projections
           │         └── 2 [as=a_new:13]
           └── projections
                └── (b:8 + c:9) + 1 [as=column14:14]

# Return values from aliased table.
build
UPDATE abcde AS foo SET a=2 WHERE a=1 RETURNING foo.a+1, foo.b * foo.d
----
project
 ├── columns: "?column?":15!null "?column?":16
 ├── update foo
 │    ├── columns: a:1!null b:2 c:3 d:4 e:5!null rowid:6!null
 │    ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 │    ├── update-mapping:
 │    │    ├── a_new:13 => a:1
 │    │    ├── column14:14 => d:4
 │    │    └── a_new:13 => e:5
 │    └── project
 │         ├── columns: column14:14 a:7!null b:8 c:9 d:10 e:11 rowid:12!null a_new:13!null
 │         ├── project
 │         │    ├── columns: a_new:13!null a:7!null b:8 c:9 d:10 e:11 rowid:12!null
 │         │    ├── select
 │         │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
 │         │    │    ├── scan foo
 │         │    │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
 │         │    │    │    └── computed column expressions
 │         │    │    │         ├── d:10
 │         │    │    │         │    └── (b:8 + c:9) + 1
 │         │    │    │         └── e:11
 │         │    │    │              └── a:7
 │         │    │    └── filters
 │         │    │         └── a:7 = 1
 │         │    └── projections
 │         │         └── 2 [as=a_new:13]
 │         └── projections
 │              └── (b:8 + c:9) + 1 [as=column14:14]
 └── projections
      ├── a:1 + 1 [as="?column?":15]
      └── b:2 * d:4 [as="?column?":16]

# Use returning UPDATE as a FROM expression.
build
SELECT a, d FROM [UPDATE abcde SET a=2 WHERE a>0 ORDER BY b LIMIT 10 RETURNING *]
----
with &1
 ├── columns: a:15!null d:18
 ├── project
 │    ├── columns: abcde.a:1!null abcde.b:2 abcde.c:3 abcde.d:4 abcde.e:5!null
 │    └── update abcde
 │         ├── columns: abcde.a:1!null abcde.b:2 abcde.c:3 abcde.d:4 abcde.e:5!null rowid:6!null
 │         ├── fetch columns: abcde.a:7 abcde.b:8 abcde.c:9 abcde.d:10 abcde.e:11 rowid:12
 │         ├── update-mapping:
 │         │    ├── a_new:13 => abcde.a:1
 │         │    ├── column14:14 => abcde.d:4
 │         │    └── a_new:13 => abcde.e:5
 │         └── project
 │              ├── columns: column14:14 abcde.a:7!null abcde.b:8 abcde.c:9 abcde.d:10 abcde.e:11 rowid:12!null a_new:13!null
 │              ├── project
 │              │    ├── columns: a_new:13!null abcde.a:7!null abcde.b:8 abcde.c:9 abcde.d:10 abcde.e:11 rowid:12!null
 │              │    ├── limit
 │              │    │    ├── columns: abcde.a:7!null abcde.b:8 abcde.c:9 abcde.d:10 abcde.e:11 rowid:12!null
 │              │    │    ├── internal-ordering: +8
 │              │    │    ├── sort
 │              │    │    │    ├── columns: abcde.a:7!null abcde.b:8 abcde.c:9 abcde.d:10 abcde.e:11 rowid:12!null
 │              │    │    │    ├── ordering: +8
 │              │    │    │    ├── limit hint: 10.00
 │              │    │    │    └── select
 │              │    │    │         ├── columns: abcde.a:7!null abcde.b:8 abcde.c:9 abcde.d:10 abcde.e:11 rowid:12!null
 │              │    │    │         ├── scan abcde
 │              │    │    │         │    ├── columns: abcde.a:7!null abcde.b:8 abcde.c:9 abcde.d:10 abcde.e:11 rowid:12!null
 │              │    │    │         │    └── computed column expressions
 │              │    │    │         │         ├── abcde.d:10
 │              │    │    │         │         │    └── (abcde.b:8 + abcde.c:9) + 1
 │              │    │    │         │         └── abcde.e:11
 │              │    │    │         │              └── abcde.a:7
 │              │    │    │         └── filters
 │              │    │    │              └── abcde.a:7 > 0
 │              │    │    └── 10
 │              │    └── projections
 │              │         └── 2 [as=a_new:13]
 │              └── projections
 │                   └── (abcde.b:8 + abcde.c:9) + 1 [as=column14:14]
 └── project
      ├── columns: a:15!null d:18
      └── with-scan &1
           ├── columns: a:15!null b:16 c:17 d:18 e:19!null
           └── mapping:
                ├──  abcde.a:1 => a:15
                ├──  abcde.b:2 => b:16
                ├──  abcde.c:3 => c:17
                ├──  abcde.d:4 => d:18
                └──  abcde.e:5 => e:19

# Return hidden column.
build
UPDATE abcde SET rowid=rowid+1 RETURNING rowid
----
project
 ├── columns: rowid:6!null
 └── update abcde
      ├── columns: a:1!null b:2 c:3 d:4 e:5!null rowid:6!null
      ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
      ├── update-mapping:
      │    ├── column14:14 => d:4
      │    ├── a:7 => e:5
      │    └── rowid_new:13 => rowid:6
      └── project
           ├── columns: column14:14 a:7!null b:8 c:9 d:10 e:11 rowid:12!null rowid_new:13!null
           ├── project
           │    ├── columns: rowid_new:13!null a:7!null b:8 c:9 d:10 e:11 rowid:12!null
           │    ├── scan abcde
           │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
           │    │    └── computed column expressions
           │    │         ├── d:10
           │    │         │    └── (b:8 + c:9) + 1
           │    │         └── e:11
           │    │              └── a:7
           │    └── projections
           │         └── rowid:12 + 1 [as=rowid_new:13]
           └── projections
                └── (b:8 + c:9) + 1 [as=column14:14]

# Try to use aggregate function in RETURNING clause.
build
UPDATE abcde SET b=1 RETURNING sum(a)
----
error (42803): sum(): aggregate functions are not allowed in RETURNING

# Try to use SRF in RETURNING clause.
build
UPDATE abcde SET c=1 RETURNING generate_series(1, 10)
----
error (0A000): generate_series(): generator functions are not allowed in RETURNING

# ------------------------------------------------------------------------------
# Test DEFAULT values.
# ------------------------------------------------------------------------------

# Use DEFAULT expressions in RHS of SET expressions.
build
UPDATE abcde SET b=DEFAULT, c=DEFAULT
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── b_new:13 => b:2
 │    ├── c_new:14 => c:3
 │    ├── column15:15 => d:4
 │    └── a:7 => e:5
 └── project
      ├── columns: column15:15 a:7!null b:8 c:9 d:10 e:11 rowid:12!null b_new:13 c_new:14!null
      ├── project
      │    ├── columns: b_new:13 c_new:14!null a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    ├── scan abcde
      │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    └── computed column expressions
      │    │         ├── d:10
      │    │         │    └── (b:8 + c:9) + 1
      │    │         └── e:11
      │    │              └── a:7
      │    └── projections
      │         ├── NULL::INT8 [as=b_new:13]
      │         └── 10 [as=c_new:14]
      └── projections
           └── (b_new:13 + c_new:14) + 1 [as=column15:15]

# Allow not-null column to be updated with NULL DEFAULT value (would fail at
# runtime if there are any rows to update).
build
UPDATE abcde SET a=DEFAULT
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── a_new:13 => a:1
 │    ├── column14:14 => d:4
 │    └── a_new:13 => e:5
 └── project
      ├── columns: column14:14 a:7!null b:8 c:9 d:10 e:11 rowid:12!null a_new:13
      ├── project
      │    ├── columns: a_new:13 a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    ├── scan abcde
      │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    └── computed column expressions
      │    │         ├── d:10
      │    │         │    └── (b:8 + c:9) + 1
      │    │         └── e:11
      │    │              └── a:7
      │    └── projections
      │         └── NULL::INT8 [as=a_new:13]
      └── projections
           └── (b:8 + c:9) + 1 [as=column14:14]

build
UPDATE abcde SET c=1+DEFAULT
----
error (42601): DEFAULT can only appear in a VALUES list within INSERT or on the right side of a SET

# ------------------------------------------------------------------------------
# Test tuples.
# ------------------------------------------------------------------------------

build
UPDATE abcde SET (a, b, c) = (1, 2, 3)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── a_new:13 => a:1
 │    ├── b_new:14 => b:2
 │    ├── c_new:15 => c:3
 │    ├── column16:16 => d:4
 │    └── a_new:13 => e:5
 └── project
      ├── columns: column16:16!null a:7!null b:8 c:9 d:10 e:11 rowid:12!null a_new:13!null b_new:14!null c_new:15!null
      ├── project
      │    ├── columns: a_new:13!null b_new:14!null c_new:15!null a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    ├── scan abcde
      │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    └── computed column expressions
      │    │         ├── d:10
      │    │         │    └── (b:8 + c:9) + 1
      │    │         └── e:11
      │    │              └── a:7
      │    └── projections
      │         ├── 1 [as=a_new:13]
      │         ├── 2 [as=b_new:14]
      │         └── 3 [as=c_new:15]
      └── projections
           └── (b_new:14 + c_new:15) + 1 [as=column16:16]

build
UPDATE abcde SET (c) = (NULL), (b, a) = (1, 2)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── a_new:15 => a:1
 │    ├── b_new:14 => b:2
 │    ├── c_new:13 => c:3
 │    ├── column16:16 => d:4
 │    └── a_new:15 => e:5
 └── project
      ├── columns: column16:16 a:7!null b:8 c:9 d:10 e:11 rowid:12!null c_new:13 b_new:14!null a_new:15!null
      ├── project
      │    ├── columns: c_new:13 b_new:14!null a_new:15!null a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    ├── scan abcde
      │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    └── computed column expressions
      │    │         ├── d:10
      │    │         │    └── (b:8 + c:9) + 1
      │    │         └── e:11
      │    │              └── a:7
      │    └── projections
      │         ├── NULL::INT8 [as=c_new:13]
      │         ├── 1 [as=b_new:14]
      │         └── 2 [as=a_new:15]
      └── projections
           └── (b_new:14 + c_new:13) + 1 [as=column16:16]

# Tuples + DEFAULT.
build
UPDATE abcde SET (b, c)=(DEFAULT, DEFAULT)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── b_new:13 => b:2
 │    ├── c_new:14 => c:3
 │    ├── column15:15 => d:4
 │    └── a:7 => e:5
 └── project
      ├── columns: column15:15 a:7!null b:8 c:9 d:10 e:11 rowid:12!null b_new:13 c_new:14!null
      ├── project
      │    ├── columns: b_new:13 c_new:14!null a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    ├── scan abcde
      │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    └── computed column expressions
      │    │         ├── d:10
      │    │         │    └── (b:8 + c:9) + 1
      │    │         └── e:11
      │    │              └── a:7
      │    └── projections
      │         ├── NULL::INT8 [as=b_new:13]
      │         └── 10 [as=c_new:14]
      └── projections
           └── (b_new:13 + c_new:14) + 1 [as=column15:15]

# Tuples + non-null DEFAULT.
build
UPDATE abcde SET (a, b)=(DEFAULT, DEFAULT)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── a_new:13 => a:1
 │    ├── a_new:13 => b:2
 │    ├── column14:14 => d:4
 │    └── a_new:13 => e:5
 └── project
      ├── columns: column14:14 a:7!null b:8 c:9 d:10 e:11 rowid:12!null a_new:13
      ├── project
      │    ├── columns: a_new:13 a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    ├── scan abcde
      │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    └── computed column expressions
      │    │         ├── d:10
      │    │         │    └── (b:8 + c:9) + 1
      │    │         └── e:11
      │    │              └── a:7
      │    └── projections
      │         └── NULL::INT8 [as=a_new:13]
      └── projections
           └── (a_new:13 + c:9) + 1 [as=column14:14]

build
UPDATE abcde SET (a, b)=(1, 2, 3)
----
error (42601): number of columns (2) does not match number of values (3)

build
UPDATE abcde SET (a, b, a)=(1, 2, 3)
----
error (42601): multiple assignments to the same column "a"

build
UPDATE abcde SET (a, unk)=(1, 2)
----
error (42703): column "unk" does not exist

build
UPDATE abcde SET (a, d)=(1, 2)
----
error (55000): cannot write directly to computed column "d"

# ------------------------------------------------------------------------------
# Test subqueries.
# ------------------------------------------------------------------------------

# Update single column.
build
UPDATE abcde SET (a)=(SELECT 1 AS one)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── one:13 => a:1
 │    ├── column14:14 => d:4
 │    └── one:13 => e:5
 └── project
      ├── columns: column14:14 a:7!null b:8 c:9 d:10 e:11 rowid:12!null one:13
      ├── left-join-apply
      │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null one:13
      │    ├── scan abcde
      │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    └── computed column expressions
      │    │         ├── d:10
      │    │         │    └── (b:8 + c:9) + 1
      │    │         └── e:11
      │    │              └── a:7
      │    ├── max1-row
      │    │    ├── columns: one:13!null
      │    │    └── project
      │    │         ├── columns: one:13!null
      │    │         ├── values
      │    │         │    └── ()
      │    │         └── projections
      │    │              └── 1 [as=one:13]
      │    └── filters (true)
      └── projections
           └── (b:8 + c:9) + 1 [as=column14:14]

# Update all updatable columns.
build
UPDATE abcde SET (a, b, c, rowid)=(SELECT x::int, y, z::int, y+1 AS y1 FROM xyz)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── x:16 => a:1
 │    ├── y:14 => b:2
 │    ├── z:17 => c:3
 │    ├── column19:19 => d:4
 │    ├── x:16 => e:5
 │    └── y1:18 => rowid:6
 └── project
      ├── columns: column19:19 a:7!null b:8 c:9 d:10 e:11 rowid:12!null y:14 x:16 z:17 y1:18
      ├── left-join-apply
      │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null y:14 x:16 z:17 y1:18
      │    ├── scan abcde
      │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    └── computed column expressions
      │    │         ├── d:10
      │    │         │    └── (b:8 + c:9) + 1
      │    │         └── e:11
      │    │              └── a:7
      │    ├── max1-row
      │    │    ├── columns: y:14 x:16!null z:17 y1:18
      │    │    └── project
      │    │         ├── columns: x:16!null z:17 y1:18 y:14
      │    │         ├── scan xyz
      │    │         │    └── columns: xyz.x:13!null y:14 xyz.z:15
      │    │         └── projections
      │    │              ├── xyz.x:13::INT8 [as=x:16]
      │    │              ├── xyz.z:15::INT8 [as=z:17]
      │    │              └── y:14 + 1 [as=y1:18]
      │    └── filters (true)
      └── projections
           └── (y:14 + z:17) + 1 [as=column19:19]

# Update using combination of subquery and tuple SET expressions.
build
UPDATE abcde SET (a, b)=(SELECT y, y+1 AS y1 FROM xyz), (c, rowid)=(1, 2)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── y:14 => a:1
 │    ├── y1:16 => b:2
 │    ├── c_new:17 => c:3
 │    ├── column19:19 => d:4
 │    ├── y:14 => e:5
 │    └── rowid_new:18 => rowid:6
 └── project
      ├── columns: column19:19 a:7!null b:8 c:9 d:10 e:11 rowid:12!null y:14 y1:16 c_new:17!null rowid_new:18!null
      ├── project
      │    ├── columns: c_new:17!null rowid_new:18!null a:7!null b:8 c:9 d:10 e:11 rowid:12!null y:14 y1:16
      │    ├── left-join-apply
      │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null y:14 y1:16
      │    │    ├── scan abcde
      │    │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    │    └── computed column expressions
      │    │    │         ├── d:10
      │    │    │         │    └── (b:8 + c:9) + 1
      │    │    │         └── e:11
      │    │    │              └── a:7
      │    │    ├── max1-row
      │    │    │    ├── columns: y:14 y1:16
      │    │    │    └── project
      │    │    │         ├── columns: y1:16 y:14
      │    │    │         ├── scan xyz
      │    │    │         │    └── columns: x:13!null y:14 z:15
      │    │    │         └── projections
      │    │    │              └── y:14 + 1 [as=y1:16]
      │    │    └── filters (true)
      │    └── projections
      │         ├── 1 [as=c_new:17]
      │         └── 2 [as=rowid_new:18]
      └── projections
           └── (y1:16 + c_new:17) + 1 [as=column19:19]

# Use subquery SET expression after other expressions.
build
UPDATE abcde SET a=1, (b)=(2), (c, rowid)=(SELECT y, y+1 AS y1 FROM xyz)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── a_new:17 => a:1
 │    ├── b_new:18 => b:2
 │    ├── y:14 => c:3
 │    ├── column19:19 => d:4
 │    ├── a_new:17 => e:5
 │    └── y1:16 => rowid:6
 └── project
      ├── columns: column19:19 a:7!null b:8 c:9 d:10 e:11 rowid:12!null y:14 y1:16 a_new:17!null b_new:18!null
      ├── project
      │    ├── columns: a_new:17!null b_new:18!null a:7!null b:8 c:9 d:10 e:11 rowid:12!null y:14 y1:16
      │    ├── left-join-apply
      │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null y:14 y1:16
      │    │    ├── scan abcde
      │    │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    │    └── computed column expressions
      │    │    │         ├── d:10
      │    │    │         │    └── (b:8 + c:9) + 1
      │    │    │         └── e:11
      │    │    │              └── a:7
      │    │    ├── max1-row
      │    │    │    ├── columns: y:14 y1:16
      │    │    │    └── project
      │    │    │         ├── columns: y1:16 y:14
      │    │    │         ├── scan xyz
      │    │    │         │    └── columns: x:13!null y:14 z:15
      │    │    │         └── projections
      │    │    │              └── y:14 + 1 [as=y1:16]
      │    │    └── filters (true)
      │    └── projections
      │         ├── 1 [as=a_new:17]
      │         └── 2 [as=b_new:18]
      └── projections
           └── (b_new:18 + y:14) + 1 [as=column19:19]

# Multiple subqueries in SET expressions.
build
UPDATE abcde SET (b, a)=(SELECT y, y+1 AS y1 FROM xyz), (c, rowid)=(SELECT 1 AS one, 2 AS two)
----
update abcde
 ├── columns: <none>
 ├── fetch columns: a:7 b:8 c:9 d:10 e:11 rowid:12
 ├── update-mapping:
 │    ├── y1:16 => a:1
 │    ├── y:14 => b:2
 │    ├── one:17 => c:3
 │    ├── column19:19 => d:4
 │    ├── y1:16 => e:5
 │    └── two:18 => rowid:6
 └── project
      ├── columns: column19:19 a:7!null b:8 c:9 d:10 e:11 rowid:12!null y:14 y1:16 one:17 two:18
      ├── left-join-apply
      │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null y:14 y1:16 one:17 two:18
      │    ├── left-join-apply
      │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null y:14 y1:16
      │    │    ├── scan abcde
      │    │    │    ├── columns: a:7!null b:8 c:9 d:10 e:11 rowid:12!null
      │    │    │    └── computed column expressions
      │    │    │         ├── d:10
      │    │    │         │    └── (b:8 + c:9) + 1
      │    │    │         └── e:11
      │    │    │              └── a:7
      │    │    ├── max1-row
      │    │    │    ├── columns: y:14 y1:16
      │    │    │    └── project
      │    │    │         ├── columns: y1:16 y:14
      │    │    │         ├── scan xyz
      │    │    │         │    └── columns: x:13!null y:14 z:15
      │    │    │         └── projections
      │    │    │              └── y:14 + 1 [as=y1:16]
      │    │    └── filters (true)
      │    ├── max1-row
      │    │    ├── columns: one:17!null two:18!null
      │    │    └── project
      │    │         ├── columns: one:17!null two:18!null
      │    │         ├── values
      │    │         │    └── ()
      │    │         └── projections
      │    │              ├── 1 [as=one:17]
      │    │              └── 2 [as=two:18]
      │    └── filters (true)
      └── projections
           └── (y:14 + one:17) + 1 [as=column19:19]

# Incorporate desired types when compiling subquery.
build
UPDATE xyz SET x='foo', (z, y)=(SELECT 2 AS two, 3 AS three)
----
update xyz
 ├── columns: <none>
 ├── fetch columns: x:4 y:5 z:6
 ├── update-mapping:
 │    ├── x_new:9 => x:1
 │    ├── three:8 => y:2
 │    └── two:7 => z:3
 └── project
      ├── columns: x_new:9!null x:4!null y:5 z:6 two:7 three:8
      ├── left-join-apply
      │    ├── columns: x:4!null y:5 z:6 two:7 three:8
      │    ├── scan xyz
      │    │    └── columns: x:4!null y:5 z:6
      │    ├── max1-row
      │    │    ├── columns: two:7!null three:8!null
      │    │    └── project
      │    │         ├── columns: two:7!null three:8!null
      │    │         ├── values
      │    │         │    └── ()
      │    │         └── projections
      │    │              ├── 2.0 [as=two:7]
      │    │              └── 3 [as=three:8]
      │    └── filters (true)
      └── projections
           └── 'foo' [as=x_new:9]

# SET expression contains correlated subquery + alias.
build
UPDATE abcde AS abcde1 SET b=(SELECT b FROM abcde AS abcde2 WHERE abcde2.rowid=abcde1.a) RETURNING *
----
project
 ├── columns: a:1!null b:2 c:3 d:4 e:5!null
 └── update abcde1
      ├── columns: abcde1.a:1!null abcde1.b:2 abcde1.c:3 abcde1.d:4 abcde1.e:5!null abcde1.rowid:6!null
      ├── fetch columns: abcde1.a:7 abcde1.b:8 abcde1.c:9 abcde1.d:10 abcde1.e:11 abcde1.rowid:12
      ├── update-mapping:
      │    ├── b_new:19 => abcde1.b:2
      │    ├── column20:20 => abcde1.d:4
      │    └── abcde1.a:7 => abcde1.e:5
      └── project
           ├── columns: column20:20 abcde1.a:7!null abcde1.b:8 abcde1.c:9 abcde1.d:10 abcde1.e:11 abcde1.rowid:12!null b_new:19
           ├── project
           │    ├── columns: b_new:19 abcde1.a:7!null abcde1.b:8 abcde1.c:9 abcde1.d:10 abcde1.e:11 abcde1.rowid:12!null
           │    ├── scan abcde1
           │    │    ├── columns: abcde1.a:7!null abcde1.b:8 abcde1.c:9 abcde1.d:10 abcde1.e:11 abcde1.rowid:12!null
           │    │    └── computed column expressions
           │    │         ├── abcde1.d:10
           │    │         │    └── (abcde1.b:8 + abcde1.c:9) + 1
           │    │         └── abcde1.e:11
           │    │              └── abcde1.a:7
           │    └── projections
           │         └── subquery [as=b_new:19]
           │              └── max1-row
           │                   ├── columns: abcde2.b:14
           │                   └── project
           │                        ├── columns: abcde2.b:14
           │                        └── select
           │                             ├── columns: abcde2.a:13!null abcde2.b:14 abcde2.c:15 abcde2.d:16 abcde2.e:17 abcde2.rowid:18!null
           │                             ├── scan abcde2
           │                             │    ├── columns: abcde2.a:13!null abcde2.b:14 abcde2.c:15 abcde2.d:16 abcde2.e:17 abcde2.rowid:18!null
           │                             │    └── computed column expressions
           │                             │         ├── abcde2.d:16
           │                             │         │    └── (abcde2.b:14 + abcde2.c:15) + 1
           │                             │         └── abcde2.e:17
           │                             │              └── abcde2.a:13
           │                             └── filters
           │                                  └── abcde2.rowid:18 = abcde1.a:7
           └── projections
                └── (b_new:19 + abcde1.c:9) + 1 [as=column20:20]

# Too many values.
build
UPDATE abcde SET (a, b)=(SELECT y, y+1 AS y1, y+2 AS y2 FROM xyz)
----
error (42601): number of columns (2) does not match number of values (3)

# Too few values.
build
UPDATE abcde SET (a, b, c)=(SELECT y, y+1 AS y1 FROM xyz)
----
error (42601): number of columns (3) does not match number of values (2)

# Try to update same column.
build
UPDATE abcde SET (a, b)=(1, 2), (c, b)=(SELECT y, y+1 AS y1 FROM xyz)
----
error (42601): multiple assignments to the same column "b"

# Target type does not match subquery result.
build
UPDATE xyz SET (x, y)=(SELECT a, b FROM abcde WHERE a>0)
----
error (42804): value type int doesn't match type string of column "x"

# ------------------------------------------------------------------------------
# Test CTEs.
# ------------------------------------------------------------------------------

# Use CTE within WHERE clause.
build
WITH cte AS (SELECT x FROM xyz) UPDATE abcde SET a=b WHERE EXISTS(SELECT * FROM cte)
----
with &1 (cte)
 ├── project
 │    ├── columns: xyz.x:1!null
 │    └── scan xyz
 │         └── columns: xyz.x:1!null y:2 z:3
 └── update abcde
      ├── columns: <none>
      ├── fetch columns: a:10 b:11 c:12 d:13 e:14 rowid:15
      ├── update-mapping:
      │    ├── b:11 => a:4
      │    ├── column17:17 => d:7
      │    └── b:11 => e:8
      └── project
           ├── columns: column17:17 a:10!null b:11 c:12 d:13 e:14 rowid:15!null
           ├── select
           │    ├── columns: a:10!null b:11 c:12 d:13 e:14 rowid:15!null
           │    ├── scan abcde
           │    │    ├── columns: a:10!null b:11 c:12 d:13 e:14 rowid:15!null
           │    │    └── computed column expressions
           │    │         ├── d:13
           │    │         │    └── (b:11 + c:12) + 1
           │    │         └── e:14
           │    │              └── a:10
           │    └── filters
           │         └── exists
           │              └── with-scan &1 (cte)
           │                   ├── columns: x:16!null
           │                   └── mapping:
           │                        └──  xyz.x:1 => x:16
           └── projections
                └── (b:11 + c:12) + 1 [as=column17:17]

# Use CTE within SET expression.
build
WITH a AS (SELECT y, y+1 AS y1 FROM xyz) UPDATE abcde SET (a, b) = (SELECT * FROM a)
----
with &1 (a)
 ├── project
 │    ├── columns: y1:4 xyz.y:2
 │    ├── scan xyz
 │    │    └── columns: x:1!null xyz.y:2 z:3
 │    └── projections
 │         └── xyz.y:2 + 1 [as=y1:4]
 └── update abcde
      ├── columns: <none>
      ├── fetch columns: a:11 b:12 c:13 d:14 e:15 rowid:16
      ├── update-mapping:
      │    ├── y:17 => a:5
      │    ├── y1:18 => b:6
      │    ├── column19:19 => d:8
      │    └── y:17 => e:9
      └── project
           ├── columns: column19:19 a:11!null b:12 c:13 d:14 e:15 rowid:16!null y:17 y1:18
           ├── left-join-apply
           │    ├── columns: a:11!null b:12 c:13 d:14 e:15 rowid:16!null y:17 y1:18
           │    ├── scan abcde
           │    │    ├── columns: a:11!null b:12 c:13 d:14 e:15 rowid:16!null
           │    │    └── computed column expressions
           │    │         ├── d:14
           │    │         │    └── (b:12 + c:13) + 1
           │    │         └── e:15
           │    │              └── a:11
           │    ├── max1-row
           │    │    ├── columns: y:17 y1:18
           │    │    └── with-scan &1 (a)
           │    │         ├── columns: y:17 y1:18
           │    │         └── mapping:
           │    │              ├──  xyz.y:2 => y:17
           │    │              └──  y1:4 => y1:18
           │    └── filters (true)
           └── projections
                └── (y1:18 + c:13) + 1 [as=column19:19]

# ------------------------------------------------------------------------------
# Tests with mutations.
# ------------------------------------------------------------------------------

# Mutation columns should be updated.
build
UPDATE mutation SET m=1
----
update mutation
 ├── columns: <none>
 ├── fetch columns: m:6 n:7 o:8 p:9 q:10
 ├── update-mapping:
 │    ├── m_new:11 => m:1
 │    ├── column12:12 => o:3
 │    └── column13:13 => p:4
 ├── check columns: check1:14
 └── project
      ├── columns: check1:14!null m:6!null n:7 o:8 p:9 q:10 m_new:11!null column12:12!null column13:13
      ├── project
      │    ├── columns: column13:13 m:6!null n:7 o:8 p:9 q:10 m_new:11!null column12:12!null
      │    ├── project
      │    │    ├── columns: column12:12!null m:6!null n:7 o:8 p:9 q:10 m_new:11!null
      │    │    ├── project
      │    │    │    ├── columns: m_new:11!null m:6!null n:7 o:8 p:9 q:10
      │    │    │    ├── scan mutation
      │    │    │    │    ├── columns: m:6!null n:7 o:8 p:9 q:10
      │    │    │    │    └── check constraint expressions
      │    │    │    │         └── m:6 > 0
      │    │    │    └── projections
      │    │    │         └── 1 [as=m_new:11]
      │    │    └── projections
      │    │         └── 10 [as=column12:12]
      │    └── projections
      │         └── column12:12 + n:7 [as=column13:13]
      └── projections
           └── m_new:11 > 0 [as=check1:14]

# Update column that mutation column depends upon.
build
UPDATE mutation SET m=1, n=2
----
update mutation
 ├── columns: <none>
 ├── fetch columns: m:6 n:7 o:8 p:9 q:10
 ├── update-mapping:
 │    ├── m_new:11 => m:1
 │    ├── n_new:12 => n:2
 │    ├── column13:13 => o:3
 │    └── column14:14 => p:4
 ├── check columns: check1:15
 └── project
      ├── columns: check1:15!null m:6!null n:7 o:8 p:9 q:10 m_new:11!null n_new:12!null column13:13!null column14:14!null
      ├── project
      │    ├── columns: column14:14!null m:6!null n:7 o:8 p:9 q:10 m_new:11!null n_new:12!null column13:13!null
      │    ├── project
      │    │    ├── columns: column13:13!null m:6!null n:7 o:8 p:9 q:10 m_new:11!null n_new:12!null
      │    │    ├── project
      │    │    │    ├── columns: m_new:11!null n_new:12!null m:6!null n:7 o:8 p:9 q:10
      │    │    │    ├── scan mutation
      │    │    │    │    ├── columns: m:6!null n:7 o:8 p:9 q:10
      │    │    │    │    └── check constraint expressions
      │    │    │    │         └── m:6 > 0
      │    │    │    └── projections
      │    │    │         ├── 1 [as=m_new:11]
      │    │    │         └── 2 [as=n_new:12]
      │    │    └── projections
      │    │         └── 10 [as=column13:13]
      │    └── projections
      │         └── column13:13 + n_new:12 [as=column14:14]
      └── projections
           └── m_new:11 > 0 [as=check1:15]

# Ensure that ORDER BY wildcard does not select mutation columns.
build
UPDATE mutation SET m=1 ORDER BY mutation.* LIMIT 10
----
update mutation
 ├── columns: <none>
 ├── fetch columns: m:6 n:7 o:8 p:9 q:10
 ├── update-mapping:
 │    ├── m_new:11 => m:1
 │    ├── column12:12 => o:3
 │    └── column13:13 => p:4
 ├── check columns: check1:14
 └── project
      ├── columns: check1:14!null m:6!null n:7 o:8 p:9 q:10 m_new:11!null column12:12!null column13:13
      ├── project
      │    ├── columns: column13:13 m:6!null n:7 o:8 p:9 q:10 m_new:11!null column12:12!null
      │    ├── project
      │    │    ├── columns: column12:12!null m:6!null n:7 o:8 p:9 q:10 m_new:11!null
      │    │    ├── project
      │    │    │    ├── columns: m_new:11!null m:6!null n:7 o:8 p:9 q:10
      │    │    │    ├── limit
      │    │    │    │    ├── columns: m:6!null n:7 o:8 p:9 q:10
      │    │    │    │    ├── internal-ordering: +6,+7
      │    │    │    │    ├── sort (segmented)
      │    │    │    │    │    ├── columns: m:6!null n:7 o:8 p:9 q:10
      │    │    │    │    │    ├── ordering: +6,+7
      │    │    │    │    │    ├── limit hint: 10.00
      │    │    │    │    │    └── scan mutation
      │    │    │    │    │         ├── columns: m:6!null n:7 o:8 p:9 q:10
      │    │    │    │    │         ├── check constraint expressions
      │    │    │    │    │         │    └── m:6 > 0
      │    │    │    │    │         └── ordering: +6
      │    │    │    │    └── 10
      │    │    │    └── projections
      │    │    │         └── 1 [as=m_new:11]
      │    │    └── projections
      │    │         └── 10 [as=column12:12]
      │    └── projections
      │         └── column12:12 + n:7 [as=column13:13]
      └── projections
           └── m_new:11 > 0 [as=check1:14]

# Try to return a mutation column.
build
UPDATE mutation SET m=1 RETURNING o
----
error (42703): column "o" does not exist

# Try to update a mutation column.
build
UPDATE mutation SET o=10
----
error (42703): column "o" does not exist

# Try to use mutation column in WHERE clause.
build
UPDATE mutation SET m=1 WHERE o=10
----
error (42P10): column "o" is being backfilled

# Try to use mutation column in SET expression.
build
UPDATE mutation SET m=o
----
error (42P10): column "o" is being backfilled

# Try to use mutation column in ORDER BY expression.
build
UPDATE mutation SET m=1 ORDER BY o LIMIT 2
----
error (42P10): column "o" is being backfilled

# ------------------------------------------------------------------------------
# Test check constraints
# ------------------------------------------------------------------------------

# Update all columns to be constant.
build
UPDATE checks SET a=1, b=2, c=3
----
update checks
 ├── columns: <none>
 ├── fetch columns: a:5 b:6 c:7 d:8
 ├── update-mapping:
 │    ├── a_new:9 => a:1
 │    ├── b_new:10 => b:2
 │    ├── c_new:11 => c:3
 │    └── column12:12 => d:4
 ├── check columns: check1:13 check2:14
 └── project
      ├── columns: check1:13!null check2:14!null a:5!null b:6 c:7 d:8 a_new:9!null b_new:10!null c_new:11!null column12:12!null
      ├── project
      │    ├── columns: column12:12!null a:5!null b:6 c:7 d:8 a_new:9!null b_new:10!null c_new:11!null
      │    ├── project
      │    │    ├── columns: a_new:9!null b_new:10!null c_new:11!null a:5!null b:6 c:7 d:8
      │    │    ├── scan checks
      │    │    │    ├── columns: a:5!null b:6 c:7 d:8
      │    │    │    ├── check constraint expressions
      │    │    │    │    └── a:5 > 0
      │    │    │    └── computed column expressions
      │    │    │         └── d:8
      │    │    │              └── c:7 + 1
      │    │    └── projections
      │    │         ├── 1 [as=a_new:9]
      │    │         ├── 2 [as=b_new:10]
      │    │         └── 3 [as=c_new:11]
      │    └── projections
      │         └── c_new:11 + 1 [as=column12:12]
      └── projections
           ├── b_new:10 < column12:12 [as=check1:13]
           └── a_new:9 > 0 [as=check2:14]

# Do not update columns for one of the constraints.
build
UPDATE checks SET a=1
----
update checks
 ├── columns: <none>
 ├── fetch columns: a:5 b:6 c:7 d:8
 ├── update-mapping:
 │    ├── a_new:9 => a:1
 │    └── column10:10 => d:4
 ├── check columns: check1:11 check2:12
 └── project
      ├── columns: check1:11 check2:12!null a:5!null b:6 c:7 d:8 a_new:9!null column10:10
      ├── project
      │    ├── columns: column10:10 a:5!null b:6 c:7 d:8 a_new:9!null
      │    ├── project
      │    │    ├── columns: a_new:9!null a:5!null b:6 c:7 d:8
      │    │    ├── scan checks
      │    │    │    ├── columns: a:5!null b:6 c:7 d:8
      │    │    │    ├── check constraint expressions
      │    │    │    │    └── a:5 > 0
      │    │    │    └── computed column expressions
      │    │    │         └── d:8
      │    │    │              └── c:7 + 1
      │    │    └── projections
      │    │         └── 1 [as=a_new:9]
      │    └── projections
      │         └── c:7 + 1 [as=column10:10]
      └── projections
           ├── b:6 < column10:10 [as=check1:11]
           └── a_new:9 > 0 [as=check2:12]

# Update one column in constraint, but not the other.
build
UPDATE checks SET b=2
----
update checks
 ├── columns: <none>
 ├── fetch columns: a:5 b:6 c:7 d:8
 ├── update-mapping:
 │    ├── b_new:9 => b:2
 │    └── column10:10 => d:4
 ├── check columns: check1:11 check2:12
 └── project
      ├── columns: check1:11 check2:12!null a:5!null b:6 c:7 d:8 b_new:9!null column10:10
      ├── project
      │    ├── columns: column10:10 a:5!null b:6 c:7 d:8 b_new:9!null
      │    ├── project
      │    │    ├── columns: b_new:9!null a:5!null b:6 c:7 d:8
      │    │    ├── scan checks
      │    │    │    ├── columns: a:5!null b:6 c:7 d:8
      │    │    │    ├── check constraint expressions
      │    │    │    │    └── a:5 > 0
      │    │    │    └── computed column expressions
      │    │    │         └── d:8
      │    │    │              └── c:7 + 1
      │    │    └── projections
      │    │         └── 2 [as=b_new:9]
      │    └── projections
      │         └── c:7 + 1 [as=column10:10]
      └── projections
           ├── b_new:9 < column10:10 [as=check1:11]
           └── a:5 > 0 [as=check2:12]

# Update using tuple and subquery.
build
UPDATE checks SET (a, b)=(SELECT a, b FROM abcde WHERE abcde.a=checks.a)
----
update checks
 ├── columns: <none>
 ├── fetch columns: checks.a:5 checks.b:6 checks.c:7 checks.d:8
 ├── update-mapping:
 │    ├── abcde.a:9 => checks.a:1
 │    ├── abcde.b:10 => checks.b:2
 │    └── column15:15 => checks.d:4
 ├── check columns: check1:16 check2:17
 └── project
      ├── columns: check1:16 check2:17 checks.a:5!null checks.b:6 checks.c:7 checks.d:8 abcde.a:9 abcde.b:10 column15:15
      ├── project
      │    ├── columns: column15:15 checks.a:5!null checks.b:6 checks.c:7 checks.d:8 abcde.a:9 abcde.b:10
      │    ├── left-join-apply
      │    │    ├── columns: checks.a:5!null checks.b:6 checks.c:7 checks.d:8 abcde.a:9 abcde.b:10
      │    │    ├── scan checks
      │    │    │    ├── columns: checks.a:5!null checks.b:6 checks.c:7 checks.d:8
      │    │    │    ├── check constraint expressions
      │    │    │    │    └── checks.a:5 > 0
      │    │    │    └── computed column expressions
      │    │    │         └── checks.d:8
      │    │    │              └── checks.c:7 + 1
      │    │    ├── max1-row
      │    │    │    ├── columns: abcde.a:9!null abcde.b:10
      │    │    │    └── project
      │    │    │         ├── columns: abcde.a:9!null abcde.b:10
      │    │    │         └── select
      │    │    │              ├── columns: abcde.a:9!null abcde.b:10 abcde.c:11 abcde.d:12 e:13 rowid:14!null
      │    │    │              ├── scan abcde
      │    │    │              │    ├── columns: abcde.a:9!null abcde.b:10 abcde.c:11 abcde.d:12 e:13 rowid:14!null
      │    │    │              │    └── computed column expressions
      │    │    │              │         ├── abcde.d:12
      │    │    │              │         │    └── (abcde.b:10 + abcde.c:11) + 1
      │    │    │              │         └── e:13
      │    │    │              │              └── abcde.a:9
      │    │    │              └── filters
      │    │    │                   └── abcde.a:9 = checks.a:5
      │    │    └── filters (true)
      │    └── projections
      │         └── checks.c:7 + 1 [as=column15:15]
      └── projections
           ├── abcde.b:10 < column15:15 [as=check1:16]
           └── abcde.a:9 > 0 [as=check2:17]

# ------------------------------------------------------------------------------
# Test decimal column truncation.
# ------------------------------------------------------------------------------

build
UPDATE decimals SET a=1.1, b=ARRAY[0.95, NULL, 15]
----
update decimals
 ├── columns: <none>
 ├── fetch columns: decimals.a:5 decimals.b:6 c:7 decimals.d:8
 ├── update-mapping:
 │    ├── a:11 => decimals.a:1
 │    ├── b:12 => decimals.b:2
 │    └── d:14 => decimals.d:4
 ├── check columns: check1:15 check2:16
 └── project
      ├── columns: check1:15 check2:16 decimals.a:5!null decimals.b:6 c:7 decimals.d:8 a:11 b:12 d:14
      ├── project
      │    ├── columns: d:14 decimals.a:5!null decimals.b:6 c:7 decimals.d:8 a:11 b:12
      │    ├── project
      │    │    ├── columns: column13:13 decimals.a:5!null decimals.b:6 c:7 decimals.d:8 a:11 b:12
      │    │    ├── project
      │    │    │    ├── columns: a:11 b:12 decimals.a:5!null decimals.b:6 c:7 decimals.d:8
      │    │    │    ├── project
      │    │    │    │    ├── columns: a_new:9!null b_new:10 decimals.a:5!null decimals.b:6 c:7 decimals.d:8
      │    │    │    │    ├── scan decimals
      │    │    │    │    │    ├── columns: decimals.a:5!null decimals.b:6 c:7 decimals.d:8
      │    │    │    │    │    └── computed column expressions
      │    │    │    │    │         └── decimals.d:8
      │    │    │    │    │              └── decimals.a:5 + c:7
      │    │    │    │    └── projections
      │    │    │    │         ├── 1.1 [as=a_new:9]
      │    │    │    │         └── ARRAY[0.95,NULL,15] [as=b_new:10]
      │    │    │    └── projections
      │    │    │         ├── crdb_internal.round_decimal_values(a_new:9, 0) [as=a:11]
      │    │    │         └── crdb_internal.round_decimal_values(b_new:10, 1) [as=b:12]
      │    │    └── projections
      │    │         └── a:11 + c:7 [as=column13:13]
      │    └── projections
      │         └── crdb_internal.round_decimal_values(column13:13, 1) [as=d:14]
      └── projections
           ├── round(a:11) = a:11 [as=check1:15]
           └── b:12[0] > 1 [as=check2:16]
