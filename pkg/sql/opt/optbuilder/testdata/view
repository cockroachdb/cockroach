exec-ddl
CREATE TABLE a (k INT PRIMARY KEY, i INT, f FLOAT, s STRING, j JSON)
----

exec-ddl
CREATE TABLE cd (c INT PRIMARY KEY, d INT)
----

exec-ddl
CREATE VIEW av AS SELECT k, i, s FROM a
----

exec-ddl
CREATE SEQUENCE s
----

exec-ddl
CREATE TYPE foobar AS ENUM ('foo', 'bar')
----

exec-ddl
CREATE FUNCTION foo() RETURNS INT LANGUAGE SQL AS $$ SELECT 100 $$;
----

exec-ddl
CREATE FUNCTION bar(x INT, y INT) RETURNS INT LANGUAGE SQL AS $$ SELECT x + y $$;
----

exec-ddl
CREATE FUNCTION baz() RETURNS INT LANGUAGE PLpgSQL AS $$
  BEGIN
    RAISE NOTICE '%', 'foo'::foobar;
    RAISE NOTICE '%', nextval('s');
    RETURN (SELECT count(*) FROM cd);
  END
$$;
----

exec-ddl
CREATE FUNCTION f_view() RETURNS INT LANGUAGE SQL AS $$ SELECT count(*) FROM av $$;
----

build
SELECT * FROM av
----
project
 ├── columns: k:1!null i:2 s:4
 └── scan a
      └── columns: k:1!null i:2 f:3 s:4 j:5 crdb_internal_mvcc_timestamp:6 tableoid:7

build
SELECT av.i, s, t.public.av.s AS s2 FROM t.av
----
project
 ├── columns: i:2 s:4 s2:4
 └── project
      ├── columns: k:1!null i:2 s:4
      └── scan a
           └── columns: k:1!null i:2 f:3 s:4 j:5 crdb_internal_mvcc_timestamp:6 tableoid:7

# Self view join (multiple references to view).
build
SELECT av.k, av2.s FROM av, av AS av2 WHERE av.k=av2.k
----
project
 ├── columns: k:1!null s:11
 └── select
      ├── columns: k:1!null i:2 s:4 k:8!null i:9 s:11
      ├── inner-join (cross)
      │    ├── columns: k:1!null i:2 s:4 k:8!null i:9 s:11
      │    ├── project
      │    │    ├── columns: k:1!null i:2 s:4
      │    │    └── scan a
      │    │         └── columns: k:1!null i:2 f:3 s:4 j:5 crdb_internal_mvcc_timestamp:6 tableoid:7
      │    ├── project
      │    │    ├── columns: k:8!null i:9 s:11
      │    │    └── scan a
      │    │         └── columns: k:8!null i:9 f:10 s:11 j:12 crdb_internal_mvcc_timestamp:13 tableoid:14
      │    └── filters (true)
      └── filters
           └── k:1 = k:8

# View with aliased column names, filter, and ORDER BY.
exec-ddl
CREATE VIEW av2 (x, y) AS SELECT k, f FROM a WHERE i=10 ORDER BY s
----

# Result is not ordered.
build
SELECT * FROM av2
----
project
 ├── columns: x:1!null y:3
 └── project
      ├── columns: k:1!null f:3 s:4
      └── select
           ├── columns: k:1!null i:2!null f:3 s:4 j:5 crdb_internal_mvcc_timestamp:6 tableoid:7
           ├── scan a
           │    └── columns: k:1!null i:2 f:3 s:4 j:5 crdb_internal_mvcc_timestamp:6 tableoid:7
           └── filters
                └── i:2 = 10

# Sort used by group by because of presence of ARRAY_AGG.
build
SELECT array_agg(y) FROM av2
----
scalar-group-by
 ├── columns: array_agg:8
 ├── internal-ordering: +4
 ├── sort
 │    ├── columns: f:3 s:4
 │    ├── ordering: +4
 │    └── project
 │         ├── columns: f:3 s:4
 │         └── project
 │              ├── columns: k:1!null f:3 s:4
 │              └── select
 │                   ├── columns: k:1!null i:2!null f:3 s:4 j:5 crdb_internal_mvcc_timestamp:6 tableoid:7
 │                   ├── scan a
 │                   │    └── columns: k:1!null i:2 f:3 s:4 j:5 crdb_internal_mvcc_timestamp:6 tableoid:7
 │                   └── filters
 │                        └── i:2 = 10
 └── aggregations
      └── array-agg [as=array_agg:8]
           └── f:3

# Verify that an outer table is visible from a subquery that uses
# a view (#46180).
exec-ddl
CREATE VIEW v AS SELECT x FROM (VALUES (1), (2)) AS foo(x);
----

build
SELECT (SELECT x FROM v WHERE x=t.a) FROM (VALUES (3), (4)) AS t(a);
----
project
 ├── columns: x:3
 ├── values
 │    ├── columns: column1:1!null
 │    ├── (3,)
 │    └── (4,)
 └── projections
      └── subquery [as=x:3]
           └── max1-row
                ├── columns: column1:2!null
                └── select
                     ├── columns: column1:2!null
                     ├── values
                     │    ├── columns: column1:2!null
                     │    ├── (1,)
                     │    └── (2,)
                     └── filters
                          └── column1:2 = column1:1

# Test UDFs called from a view.
exec-ddl
CREATE VIEW v1 AS SELECT foo();
----

build
SELECT * FROM v1
----
project
 ├── columns: foo:2
 ├── values
 │    └── ()
 └── projections
      └── foo() [as=foo:2]

exec-ddl
CREATE VIEW v2 AS SELECT bar(1, 2);
----

build
SELECT * FROM v2
----
project
 ├── columns: bar:4
 ├── values
 │    └── ()
 └── projections
      └── bar(1, 2) [as=bar:4]

exec-ddl
CREATE VIEW v3 AS SELECT baz();
----

build
SELECT * FROM v3
----
project
 ├── columns: baz:11
 ├── values
 │    └── ()
 └── projections
      └── baz() [as=baz:11]

exec-ddl
CREATE VIEW v4 AS SELECT foo() AS x, bar(1, 2) AS y, baz() AS z
----

build
SELECT * FROM v4
----
project
 ├── columns: x:2 y:6 z:17
 ├── values
 │    └── ()
 └── projections
      ├── foo() [as=x:2]
      ├── bar(1, 2) [as=y:6]
      └── baz() [as=z:17]

exec-ddl
CREATE VIEW v5 AS SELECT bar(k, i) FROM a
----

build
SELECT * FROM v5
----
project
 ├── columns: bar:11
 ├── scan a
 │    └── columns: k:1!null i:2 f:3 s:4 j:5 crdb_internal_mvcc_timestamp:6 tableoid:7
 └── projections
      └── bar(k:1, i:2) [as=bar:11]

exec-ddl
CREATE VIEW v6 AS SELECT * FROM a INNER JOIN cd ON bar(k, i) = c
----

build
SELECT * FROM v6
----
project
 ├── columns: k:1!null i:2 f:3 s:4 j:5 c:8!null d:9
 └── inner-join (cross)
      ├── columns: k:1!null i:2 f:3 s:4 j:5 a.crdb_internal_mvcc_timestamp:6 a.tableoid:7 c:8!null d:9 cd.crdb_internal_mvcc_timestamp:10 cd.tableoid:11
      ├── scan a
      │    └── columns: k:1!null i:2 f:3 s:4 j:5 a.crdb_internal_mvcc_timestamp:6 a.tableoid:7
      ├── scan cd
      │    └── columns: c:8!null d:9 cd.crdb_internal_mvcc_timestamp:10 cd.tableoid:11
      └── filters
           └── bar(k:1, i:2) = c:8

exec-ddl
CREATE VIEW v7 AS SELECT f_view();
----

build
SELECT * FROM v7
----
project
 ├── columns: f_view:9
 ├── values
 │    └── ()
 └── projections
      └── f_view() [as=f_view:9]
