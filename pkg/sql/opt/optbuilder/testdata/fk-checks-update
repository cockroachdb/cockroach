exec-ddl
CREATE TABLE parent (x INT, p INT PRIMARY KEY, other INT UNIQUE)
----

exec-ddl
CREATE TABLE child (c INT PRIMARY KEY, p INT NOT NULL REFERENCES parent(p))
----

build
UPDATE child SET p = 4
----
update child
 ├── columns: <none>
 ├── fetch columns: c:3(int) child.p:4(int)
 ├── update-mapping:
 │    └──  column5:5 => child.p:2
 ├── input binding: &1
 ├── project
 │    ├── columns: column5:5(int!null) c:3(int!null) child.p:4(int!null)
 │    ├── scan child
 │    │    └── columns: c:3(int!null) child.p:4(int!null)
 │    └── projections
 │         └── const: 4 [type=int]
 └── f-k-checks
      └── f-k-checks-item: child(p) -> parent(p)
           └── anti-join (hash)
                ├── columns: column5:9(int!null)
                ├── with-scan &1
                │    ├── columns: column5:9(int!null)
                │    └── mapping:
                │         └──  column5:5(int) => column5:9(int)
                ├── scan parent
                │    └── columns: parent.p:7(int!null)
                └── filters
                     └── eq [type=bool]
                          ├── variable: column5 [type=int]
                          └── variable: parent.p [type=int]

exec-ddl
CREATE TABLE grandchild (g INT PRIMARY KEY, c INT NOT NULL REFERENCES child(c))
----

build
UPDATE child SET p = 4
----
update child
 ├── columns: <none>
 ├── fetch columns: child.c:3(int) child.p:4(int)
 ├── update-mapping:
 │    └──  column5:5 => child.p:2
 ├── input binding: &1
 ├── project
 │    ├── columns: column5:5(int!null) child.c:3(int!null) child.p:4(int!null)
 │    ├── scan child
 │    │    └── columns: child.c:3(int!null) child.p:4(int!null)
 │    └── projections
 │         └── const: 4 [type=int]
 └── f-k-checks
      ├── f-k-checks-item: child(p) -> parent(p)
      │    └── anti-join (hash)
      │         ├── columns: column5:9(int!null)
      │         ├── with-scan &1
      │         │    ├── columns: column5:9(int!null)
      │         │    └── mapping:
      │         │         └──  column5:5(int) => column5:9(int)
      │         ├── scan parent
      │         │    └── columns: parent.p:7(int!null)
      │         └── filters
      │              └── eq [type=bool]
      │                   ├── variable: column5 [type=int]
      │                   └── variable: parent.p [type=int]
      └── f-k-checks-item: grandchild(c) -> child(c)
           └── semi-join (hash)
                ├── columns: c:12(int)
                ├── project
                │    ├── columns: c:12(int)
                │    ├── except
                │    │    ├── columns: c:10(int!null)
                │    │    ├── left columns: c:10(int!null)
                │    │    ├── right columns: c:11(int)
                │    │    ├── with-scan &1
                │    │    │    ├── columns: c:10(int!null)
                │    │    │    └── mapping:
                │    │    │         └──  child.c:3(int) => c:10(int)
                │    │    └── with-scan &1
                │    │         ├── columns: c:11(int!null)
                │    │         └── mapping:
                │    │              └──  child.c:3(int) => c:11(int)
                │    └── projections
                │         └── variable: c [type=int]
                ├── scan grandchild
                │    └── columns: grandchild.c:14(int!null)
                └── filters
                     └── eq [type=bool]
                          ├── variable: c [type=int]
                          └── variable: grandchild.c [type=int]

build
UPDATE child SET p = p
----
update child
 ├── columns: <none>
 ├── fetch columns: child.c:3(int) child.p:4(int)
 ├── update-mapping:
 │    └──  child.p:4 => child.p:2
 ├── input binding: &1
 ├── scan child
 │    └── columns: child.c:3(int!null) child.p:4(int!null)
 └── f-k-checks
      ├── f-k-checks-item: child(p) -> parent(p)
      │    └── anti-join (hash)
      │         ├── columns: p:8(int!null)
      │         ├── with-scan &1
      │         │    ├── columns: p:8(int!null)
      │         │    └── mapping:
      │         │         └──  child.p:4(int) => p:8(int)
      │         ├── scan parent
      │         │    └── columns: parent.p:6(int!null)
      │         └── filters
      │              └── eq [type=bool]
      │                   ├── variable: p [type=int]
      │                   └── variable: parent.p [type=int]
      └── f-k-checks-item: grandchild(c) -> child(c)
           └── semi-join (hash)
                ├── columns: c:11(int)
                ├── project
                │    ├── columns: c:11(int)
                │    ├── except
                │    │    ├── columns: c:9(int!null)
                │    │    ├── left columns: c:9(int!null)
                │    │    ├── right columns: c:10(int)
                │    │    ├── with-scan &1
                │    │    │    ├── columns: c:9(int!null)
                │    │    │    └── mapping:
                │    │    │         └──  child.c:3(int) => c:9(int)
                │    │    └── with-scan &1
                │    │         ├── columns: c:10(int!null)
                │    │         └── mapping:
                │    │              └──  child.c:3(int) => c:10(int)
                │    └── projections
                │         └── variable: c [type=int]
                ├── scan grandchild
                │    └── columns: grandchild.c:13(int!null)
                └── filters
                     └── eq [type=bool]
                          ├── variable: c [type=int]
                          └── variable: grandchild.c [type=int]

# Multiple grandchild tables
exec-ddl
CREATE TABLE grandchild2 (g INT PRIMARY KEY, c INT NOT NULL REFERENCES child(c))
----

build
UPDATE child SET p = 4
----
update child
 ├── columns: <none>
 ├── fetch columns: child.c:3(int) child.p:4(int)
 ├── update-mapping:
 │    └──  column5:5 => child.p:2
 ├── input binding: &1
 ├── project
 │    ├── columns: column5:5(int!null) child.c:3(int!null) child.p:4(int!null)
 │    ├── scan child
 │    │    └── columns: child.c:3(int!null) child.p:4(int!null)
 │    └── projections
 │         └── const: 4 [type=int]
 └── f-k-checks
      ├── f-k-checks-item: child(p) -> parent(p)
      │    └── anti-join (hash)
      │         ├── columns: column5:9(int!null)
      │         ├── with-scan &1
      │         │    ├── columns: column5:9(int!null)
      │         │    └── mapping:
      │         │         └──  column5:5(int) => column5:9(int)
      │         ├── scan parent
      │         │    └── columns: parent.p:7(int!null)
      │         └── filters
      │              └── eq [type=bool]
      │                   ├── variable: column5 [type=int]
      │                   └── variable: parent.p [type=int]
      ├── f-k-checks-item: grandchild(c) -> child(c)
      │    └── semi-join (hash)
      │         ├── columns: c:12(int)
      │         ├── project
      │         │    ├── columns: c:12(int)
      │         │    ├── except
      │         │    │    ├── columns: c:10(int!null)
      │         │    │    ├── left columns: c:10(int!null)
      │         │    │    ├── right columns: c:11(int)
      │         │    │    ├── with-scan &1
      │         │    │    │    ├── columns: c:10(int!null)
      │         │    │    │    └── mapping:
      │         │    │    │         └──  child.c:3(int) => c:10(int)
      │         │    │    └── with-scan &1
      │         │    │         ├── columns: c:11(int!null)
      │         │    │         └── mapping:
      │         │    │              └──  child.c:3(int) => c:11(int)
      │         │    └── projections
      │         │         └── variable: c [type=int]
      │         ├── scan grandchild
      │         │    └── columns: grandchild.c:14(int!null)
      │         └── filters
      │              └── eq [type=bool]
      │                   ├── variable: c [type=int]
      │                   └── variable: grandchild.c [type=int]
      └── f-k-checks-item: grandchild2(c) -> child(c)
           └── semi-join (hash)
                ├── columns: c:17(int)
                ├── project
                │    ├── columns: c:17(int)
                │    ├── except
                │    │    ├── columns: c:15(int!null)
                │    │    ├── left columns: c:15(int!null)
                │    │    ├── right columns: c:16(int)
                │    │    ├── with-scan &1
                │    │    │    ├── columns: c:15(int!null)
                │    │    │    └── mapping:
                │    │    │         └──  child.c:3(int) => c:15(int)
                │    │    └── with-scan &1
                │    │         ├── columns: c:16(int!null)
                │    │         └── mapping:
                │    │              └──  child.c:3(int) => c:16(int)
                │    └── projections
                │         └── variable: c [type=int]
                ├── scan grandchild2
                │    └── columns: grandchild2.c:19(int!null)
                └── filters
                     └── eq [type=bool]
                          ├── variable: c [type=int]
                          └── variable: grandchild2.c [type=int]
