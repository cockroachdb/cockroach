exec-ddl
CREATE TABLE parent (x INT, p INT PRIMARY KEY, other INT UNIQUE)
----

exec-ddl
CREATE TABLE child (c INT PRIMARY KEY, p INT NOT NULL REFERENCES parent(p))
----

build
UPDATE child SET p = 4
----
update child
 ├── columns: <none>
 ├── fetch columns: c:4 child.p:5
 ├── update-mapping:
 │    └── p_new:7 => child.p:2
 ├── input binding: &1
 ├── project
 │    ├── columns: p_new:7!null c:4!null child.p:5!null child.crdb_internal_mvcc_timestamp:6
 │    ├── scan child
 │    │    └── columns: c:4!null child.p:5!null child.crdb_internal_mvcc_timestamp:6
 │    └── projections
 │         └── 4 [as=p_new:7]
 └── f-k-checks
      └── f-k-checks-item: child(p) -> parent(p)
           └── anti-join (hash)
                ├── columns: p:8!null
                ├── with-scan &1
                │    ├── columns: p:8!null
                │    └── mapping:
                │         └──  p_new:7 => p:8
                ├── scan parent
                │    └── columns: parent.p:10!null
                └── filters
                     └── p:8 = parent.p:10

build
UPDATE parent SET p = p+1
----
update parent
 ├── columns: <none>
 ├── fetch columns: x:5 parent.p:6 other:7
 ├── update-mapping:
 │    └── p_new:9 => parent.p:2
 ├── input binding: &1
 ├── project
 │    ├── columns: p_new:9!null x:5 parent.p:6!null other:7 parent.crdb_internal_mvcc_timestamp:8
 │    ├── scan parent
 │    │    └── columns: x:5 parent.p:6!null other:7 parent.crdb_internal_mvcc_timestamp:8
 │    └── projections
 │         └── parent.p:6 + 1 [as=p_new:9]
 └── f-k-checks
      └── f-k-checks-item: child(p) -> parent(p)
           └── semi-join (hash)
                ├── columns: p:10!null
                ├── except
                │    ├── columns: p:10!null
                │    ├── left columns: p:10!null
                │    ├── right columns: p:11
                │    ├── with-scan &1
                │    │    ├── columns: p:10!null
                │    │    └── mapping:
                │    │         └──  parent.p:6 => p:10
                │    └── with-scan &1
                │         ├── columns: p:11!null
                │         └── mapping:
                │              └──  p_new:9 => p:11
                ├── scan child
                │    └── columns: child.p:13!null
                └── filters
                     └── p:10 = child.p:13

exec-ddl
CREATE TABLE grandchild (g INT PRIMARY KEY, c INT NOT NULL REFERENCES child(c))
----

build
UPDATE child SET c = 4
----
update child
 ├── columns: <none>
 ├── fetch columns: child.c:4 p:5
 ├── update-mapping:
 │    └── c_new:7 => child.c:1
 ├── input binding: &1
 ├── project
 │    ├── columns: c_new:7!null child.c:4!null p:5!null child.crdb_internal_mvcc_timestamp:6
 │    ├── scan child
 │    │    └── columns: child.c:4!null p:5!null child.crdb_internal_mvcc_timestamp:6
 │    └── projections
 │         └── 4 [as=c_new:7]
 └── f-k-checks
      └── f-k-checks-item: grandchild(c) -> child(c)
           └── semi-join (hash)
                ├── columns: c:8!null
                ├── except
                │    ├── columns: c:8!null
                │    ├── left columns: c:8!null
                │    ├── right columns: c:9
                │    ├── with-scan &1
                │    │    ├── columns: c:8!null
                │    │    └── mapping:
                │    │         └──  child.c:4 => c:8
                │    └── with-scan &1
                │         ├── columns: c:9!null
                │         └── mapping:
                │              └──  c_new:7 => c:9
                ├── scan grandchild
                │    └── columns: grandchild.c:11!null
                └── filters
                     └── c:8 = grandchild.c:11

# This update shouldn't emit checks for c, since it's unchanged.
build
UPDATE child SET p = 4
----
update child
 ├── columns: <none>
 ├── fetch columns: c:4 child.p:5
 ├── update-mapping:
 │    └── p_new:7 => child.p:2
 ├── input binding: &1
 ├── project
 │    ├── columns: p_new:7!null c:4!null child.p:5!null child.crdb_internal_mvcc_timestamp:6
 │    ├── scan child
 │    │    └── columns: c:4!null child.p:5!null child.crdb_internal_mvcc_timestamp:6
 │    └── projections
 │         └── 4 [as=p_new:7]
 └── f-k-checks
      └── f-k-checks-item: child(p) -> parent(p)
           └── anti-join (hash)
                ├── columns: p:8!null
                ├── with-scan &1
                │    ├── columns: p:8!null
                │    └── mapping:
                │         └──  p_new:7 => p:8
                ├── scan parent
                │    └── columns: parent.p:10!null
                └── filters
                     └── p:8 = parent.p:10

build
UPDATE child SET p = p
----
update child
 ├── columns: <none>
 ├── fetch columns: c:4 child.p:5
 ├── update-mapping:
 │    └── child.p:5 => child.p:2
 ├── input binding: &1
 ├── scan child
 │    └── columns: c:4!null child.p:5!null child.crdb_internal_mvcc_timestamp:6
 └── f-k-checks
      └── f-k-checks-item: child(p) -> parent(p)
           └── anti-join (hash)
                ├── columns: p:7!null
                ├── with-scan &1
                │    ├── columns: p:7!null
                │    └── mapping:
                │         └──  child.p:5 => p:7
                ├── scan parent
                │    └── columns: parent.p:9!null
                └── filters
                     └── p:7 = parent.p:9

build
UPDATE child SET p = p+1, c = c+1
----
update child
 ├── columns: <none>
 ├── fetch columns: child.c:4 child.p:5
 ├── update-mapping:
 │    ├── c_new:8 => child.c:1
 │    └── p_new:7 => child.p:2
 ├── input binding: &1
 ├── project
 │    ├── columns: p_new:7!null c_new:8!null child.c:4!null child.p:5!null child.crdb_internal_mvcc_timestamp:6
 │    ├── scan child
 │    │    └── columns: child.c:4!null child.p:5!null child.crdb_internal_mvcc_timestamp:6
 │    └── projections
 │         ├── child.p:5 + 1 [as=p_new:7]
 │         └── child.c:4 + 1 [as=c_new:8]
 └── f-k-checks
      ├── f-k-checks-item: child(p) -> parent(p)
      │    └── anti-join (hash)
      │         ├── columns: p:9!null
      │         ├── with-scan &1
      │         │    ├── columns: p:9!null
      │         │    └── mapping:
      │         │         └──  p_new:7 => p:9
      │         ├── scan parent
      │         │    └── columns: parent.p:11!null
      │         └── filters
      │              └── p:9 = parent.p:11
      └── f-k-checks-item: grandchild(c) -> child(c)
           └── semi-join (hash)
                ├── columns: c:14!null
                ├── except
                │    ├── columns: c:14!null
                │    ├── left columns: c:14!null
                │    ├── right columns: c:15
                │    ├── with-scan &1
                │    │    ├── columns: c:14!null
                │    │    └── mapping:
                │    │         └──  child.c:4 => c:14
                │    └── with-scan &1
                │         ├── columns: c:15!null
                │         └── mapping:
                │              └──  c_new:8 => c:15
                ├── scan grandchild
                │    └── columns: grandchild.c:17!null
                └── filters
                     └── c:14 = grandchild.c:17

exec-ddl
CREATE TABLE child_nullable (c INT PRIMARY KEY, p INT REFERENCES parent(p))
----

# We don't need the FK check in this case because we are only setting NULL
# values.
build
UPDATE child_nullable SET p = NULL
----
update child_nullable
 ├── columns: <none>
 ├── fetch columns: c:4 p:5
 ├── update-mapping:
 │    └── p_new:7 => p:2
 └── project
      ├── columns: p_new:7 c:4!null p:5 crdb_internal_mvcc_timestamp:6
      ├── scan child_nullable
      │    └── columns: c:4!null p:5 crdb_internal_mvcc_timestamp:6
      └── projections
           └── NULL::INT8 [as=p_new:7]

# Multiple grandchild tables
exec-ddl
CREATE TABLE grandchild2 (g INT PRIMARY KEY, c INT NOT NULL REFERENCES child(c))
----

build
UPDATE child SET p = 4
----
update child
 ├── columns: <none>
 ├── fetch columns: c:4 child.p:5
 ├── update-mapping:
 │    └── p_new:7 => child.p:2
 ├── input binding: &1
 ├── project
 │    ├── columns: p_new:7!null c:4!null child.p:5!null child.crdb_internal_mvcc_timestamp:6
 │    ├── scan child
 │    │    └── columns: c:4!null child.p:5!null child.crdb_internal_mvcc_timestamp:6
 │    └── projections
 │         └── 4 [as=p_new:7]
 └── f-k-checks
      └── f-k-checks-item: child(p) -> parent(p)
           └── anti-join (hash)
                ├── columns: p:8!null
                ├── with-scan &1
                │    ├── columns: p:8!null
                │    └── mapping:
                │         └──  p_new:7 => p:8
                ├── scan parent
                │    └── columns: parent.p:10!null
                └── filters
                     └── p:8 = parent.p:10

exec-ddl
CREATE TABLE self (x INT PRIMARY KEY, y INT NOT NULL REFERENCES self(x))
----

build
UPDATE self SET y = 3
----
update self
 ├── columns: <none>
 ├── fetch columns: x:4 self.y:5
 ├── update-mapping:
 │    └── y_new:7 => self.y:2
 ├── input binding: &1
 ├── project
 │    ├── columns: y_new:7!null x:4!null self.y:5!null crdb_internal_mvcc_timestamp:6
 │    ├── scan self
 │    │    └── columns: x:4!null self.y:5!null crdb_internal_mvcc_timestamp:6
 │    └── projections
 │         └── 3 [as=y_new:7]
 └── f-k-checks
      └── f-k-checks-item: self(y) -> self(x)
           └── anti-join (hash)
                ├── columns: y:8!null
                ├── with-scan &1
                │    ├── columns: y:8!null
                │    └── mapping:
                │         └──  y_new:7 => y:8
                ├── scan self
                │    └── columns: x:9!null
                └── filters
                     └── y:8 = x:9

build
UPDATE self SET x = 3
----
update self
 ├── columns: <none>
 ├── fetch columns: self.x:4 y:5
 ├── update-mapping:
 │    └── x_new:7 => self.x:1
 ├── input binding: &1
 ├── project
 │    ├── columns: x_new:7!null self.x:4!null y:5!null crdb_internal_mvcc_timestamp:6
 │    ├── scan self
 │    │    └── columns: self.x:4!null y:5!null crdb_internal_mvcc_timestamp:6
 │    └── projections
 │         └── 3 [as=x_new:7]
 └── f-k-checks
      └── f-k-checks-item: self(y) -> self(x)
           └── semi-join (hash)
                ├── columns: x:8!null
                ├── except
                │    ├── columns: x:8!null
                │    ├── left columns: x:8!null
                │    ├── right columns: x:9
                │    ├── with-scan &1
                │    │    ├── columns: x:8!null
                │    │    └── mapping:
                │    │         └──  self.x:4 => x:8
                │    └── with-scan &1
                │         ├── columns: x:9!null
                │         └── mapping:
                │              └──  x_new:7 => x:9
                ├── scan self
                │    └── columns: y:11!null
                └── filters
                     └── x:8 = y:11

exec-ddl
CREATE TABLE parent_multicol (a INT, b INT, c INT, PRIMARY KEY (a,b,c))
----

exec-ddl
CREATE TABLE child_multicol_simple (
  k INT PRIMARY KEY,
  a INT, b INT, c INT,
  CONSTRAINT fk FOREIGN KEY(a,b,c) REFERENCES parent_multicol(a,b,c) MATCH SIMPLE
)
----

# With MATCH SIMPLE, we can elide the FK check if any FK column is NULL.
build
UPDATE child_multicol_simple SET a = 1, b = NULL, c = 1 WHERE k = 1
----
update child_multicol_simple
 ├── columns: <none>
 ├── fetch columns: k:6 a:7 b:8 c:9
 ├── update-mapping:
 │    ├── a_new:11 => a:2
 │    ├── b_new:12 => b:3
 │    └── a_new:11 => c:4
 └── project
      ├── columns: a_new:11!null b_new:12 k:6!null a:7 b:8 c:9 crdb_internal_mvcc_timestamp:10
      ├── select
      │    ├── columns: k:6!null a:7 b:8 c:9 crdb_internal_mvcc_timestamp:10
      │    ├── scan child_multicol_simple
      │    │    └── columns: k:6!null a:7 b:8 c:9 crdb_internal_mvcc_timestamp:10
      │    └── filters
      │         └── k:6 = 1
      └── projections
           ├── 1 [as=a_new:11]
           └── NULL::INT8 [as=b_new:12]

exec-ddl
CREATE TABLE child_multicol_full (
  k INT PRIMARY KEY,
  a INT, b INT, c INT,
  CONSTRAINT fk FOREIGN KEY(a,b,c) REFERENCES parent_multicol(a,b,c) MATCH FULL
)
----

# With MATCH FULL, we can elide the FK check only if all FK columns are NULL.
build
UPDATE child_multicol_full SET a = 1, b = NULL, c = 1 WHERE k = 1
----
update child_multicol_full
 ├── columns: <none>
 ├── fetch columns: k:6 child_multicol_full.a:7 child_multicol_full.b:8 child_multicol_full.c:9
 ├── update-mapping:
 │    ├── a_new:11 => child_multicol_full.a:2
 │    ├── b_new:12 => child_multicol_full.b:3
 │    └── a_new:11 => child_multicol_full.c:4
 ├── input binding: &1
 ├── project
 │    ├── columns: a_new:11!null b_new:12 k:6!null child_multicol_full.a:7 child_multicol_full.b:8 child_multicol_full.c:9 child_multicol_full.crdb_internal_mvcc_timestamp:10
 │    ├── select
 │    │    ├── columns: k:6!null child_multicol_full.a:7 child_multicol_full.b:8 child_multicol_full.c:9 child_multicol_full.crdb_internal_mvcc_timestamp:10
 │    │    ├── scan child_multicol_full
 │    │    │    └── columns: k:6!null child_multicol_full.a:7 child_multicol_full.b:8 child_multicol_full.c:9 child_multicol_full.crdb_internal_mvcc_timestamp:10
 │    │    └── filters
 │    │         └── k:6 = 1
 │    └── projections
 │         ├── 1 [as=a_new:11]
 │         └── NULL::INT8 [as=b_new:12]
 └── f-k-checks
      └── f-k-checks-item: child_multicol_full(a,b,c) -> parent_multicol(a,b,c)
           └── anti-join (hash)
                ├── columns: a:13!null b:14 c:15!null
                ├── with-scan &1
                │    ├── columns: a:13!null b:14 c:15!null
                │    └── mapping:
                │         ├──  a_new:11 => a:13
                │         ├──  b_new:12 => b:14
                │         └──  a_new:11 => c:15
                ├── scan parent_multicol
                │    └── columns: parent_multicol.a:16!null parent_multicol.b:17!null parent_multicol.c:18!null
                └── filters
                     ├── a:13 = parent_multicol.a:16
                     ├── b:14 = parent_multicol.b:17
                     └── c:15 = parent_multicol.c:18

build
UPDATE child_multicol_full SET a = NULL, b = NULL, c = NULL WHERE k = 1
----
update child_multicol_full
 ├── columns: <none>
 ├── fetch columns: k:6 a:7 b:8 c:9
 ├── update-mapping:
 │    ├── a_new:11 => a:2
 │    ├── a_new:11 => b:3
 │    └── a_new:11 => c:4
 └── project
      ├── columns: a_new:11 k:6!null a:7 b:8 c:9 crdb_internal_mvcc_timestamp:10
      ├── select
      │    ├── columns: k:6!null a:7 b:8 c:9 crdb_internal_mvcc_timestamp:10
      │    ├── scan child_multicol_full
      │    │    └── columns: k:6!null a:7 b:8 c:9 crdb_internal_mvcc_timestamp:10
      │    └── filters
      │         └── k:6 = 1
      └── projections
           └── NULL::INT8 [as=a_new:11]

exec-ddl
CREATE TABLE two (a int, b int, primary key (a, b))
----

exec-ddl
CREATE TABLE fam (
  a INT,
  b INT,
  c INT,
  d INT,
  e INT,
  FAMILY (a, b, c),
  FAMILY (d, e),
  FOREIGN KEY (c, d) REFERENCES two (a, b)
)
----

# Ensure that we fetch all relevant columns for a foreign key.

# NOTE: when we no longer require indexes to be created for FKs, ensure that
# these still scan all the relevant FK columns.
norm
UPDATE fam SET c = 3
----
update fam
 ├── columns: <none>
 ├── fetch columns: fam.a:8 fam.b:9 fam.c:10 rowid:13
 ├── update-mapping:
 │    └── c_new:15 => fam.c:3
 ├── input binding: &1
 ├── project
 │    ├── columns: c_new:15!null fam.a:8 fam.b:9 fam.c:10 fam.d:11 rowid:13!null
 │    ├── scan fam
 │    │    └── columns: fam.a:8 fam.b:9 fam.c:10 fam.d:11 rowid:13!null
 │    └── projections
 │         └── 3 [as=c_new:15]
 └── f-k-checks
      └── f-k-checks-item: fam(c,d) -> two(a,b)
           └── anti-join (hash)
                ├── columns: c:16!null d:17!null
                ├── select
                │    ├── columns: c:16!null d:17!null
                │    ├── with-scan &1
                │    │    ├── columns: c:16!null d:17
                │    │    └── mapping:
                │    │         ├──  c_new:15 => c:16
                │    │         └──  fam.d:11 => d:17
                │    └── filters
                │         └── d:17 IS NOT NULL
                ├── scan two
                │    └── columns: two.a:18!null two.b:19!null
                └── filters
                     ├── c:16 = two.a:18
                     └── d:17 = two.b:19

norm
UPDATE fam SET d = 3
----
update fam
 ├── columns: <none>
 ├── fetch columns: fam.d:11 e:12 rowid:13
 ├── update-mapping:
 │    └── d_new:15 => fam.d:4
 ├── input binding: &1
 ├── project
 │    ├── columns: d_new:15!null fam.c:10 fam.d:11 e:12 rowid:13!null
 │    ├── scan fam
 │    │    └── columns: fam.c:10 fam.d:11 e:12 rowid:13!null
 │    └── projections
 │         └── 3 [as=d_new:15]
 └── f-k-checks
      └── f-k-checks-item: fam(c,d) -> two(a,b)
           └── anti-join (hash)
                ├── columns: c:16!null d:17!null
                ├── select
                │    ├── columns: c:16!null d:17!null
                │    ├── with-scan &1
                │    │    ├── columns: c:16 d:17!null
                │    │    └── mapping:
                │    │         ├──  fam.c:10 => c:16
                │    │         └──  d_new:15 => d:17
                │    └── filters
                │         └── c:16 IS NOT NULL
                ├── scan two
                │    └── columns: two.a:18!null two.b:19!null
                └── filters
                     ├── c:16 = two.a:18
                     └── d:17 = two.b:19

# Verify that the join hint is set.
build prefer-lookup-joins-for-fks
UPDATE child SET p = 4
----
update child
 ├── columns: <none>
 ├── fetch columns: c:4 child.p:5
 ├── update-mapping:
 │    └── p_new:7 => child.p:2
 ├── input binding: &1
 ├── project
 │    ├── columns: p_new:7!null c:4!null child.p:5!null child.crdb_internal_mvcc_timestamp:6
 │    ├── scan child
 │    │    └── columns: c:4!null child.p:5!null child.crdb_internal_mvcc_timestamp:6
 │    └── projections
 │         └── 4 [as=p_new:7]
 └── f-k-checks
      └── f-k-checks-item: child(p) -> parent(p)
           └── anti-join (hash)
                ├── columns: p:8!null
                ├── flags: prefer lookup join (into right side)
                ├── with-scan &1
                │    ├── columns: p:8!null
                │    └── mapping:
                │         └──  p_new:7 => p:8
                ├── scan parent
                │    └── columns: parent.p:10!null
                └── filters
                     └── p:8 = parent.p:10
