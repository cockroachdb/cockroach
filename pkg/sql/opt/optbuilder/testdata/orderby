# tests adapted from logictest -- order_by

exec-ddl
CREATE TABLE t (
  a INT PRIMARY KEY,
  b INT,
  c BOOLEAN
)
----
TABLE t
 ├── a int not null
 ├── b int
 ├── c bool
 └── INDEX primary
      └── a int not null

build
SELECT c FROM t ORDER BY c
----
sort
 ├── columns: c:3(bool)
 ├── ordering: +3
 └── project
      ├── columns: t.c:3(bool)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           └── variable: t.c [type=bool]

build
SELECT c FROM t ORDER BY c DESC
----
sort
 ├── columns: c:3(bool)
 ├── ordering: -3
 └── project
      ├── columns: t.c:3(bool)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           └── variable: t.c [type=bool]

build
SELECT a, b FROM t ORDER BY b
----
sort
 ├── columns: a:1(int!null) b:2(int)
 ├── ordering: +2
 └── project
      ├── columns: t.a:1(int!null) t.b:2(int)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           ├── variable: t.a [type=int]
           └── variable: t.b [type=int]

build
SELECT a, b FROM t ORDER BY b DESC
----
sort
 ├── columns: a:1(int!null) b:2(int)
 ├── ordering: -2
 └── project
      ├── columns: t.a:1(int!null) t.b:2(int)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           ├── variable: t.a [type=int]
           └── variable: t.b [type=int]

build
SELECT a, b FROM t ORDER BY b DESC LIMIT 2
----
limit
 ├── columns: a:1(int!null) b:2(int)
 ├── ordering: -2
 ├── sort
 │    ├── columns: t.a:1(int!null) t.b:2(int)
 │    ├── ordering: -2
 │    └── project
 │         ├── columns: t.a:1(int!null) t.b:2(int)
 │         ├── scan t
 │         │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
 │         └── projections
 │              ├── variable: t.a [type=int]
 │              └── variable: t.b [type=int]
 └── const: 2 [type=int]

build
SELECT a FROM t ORDER BY 1 DESC
----
sort
 ├── columns: a:1(int!null)
 ├── ordering: -1
 └── project
      ├── columns: t.a:1(int!null)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           └── variable: t.a [type=int]

# TODO(rytaft): This query causes an error in Postgres, but it is supported by
# CockroachDB with the semantics:
#   SELECT c FROM t GROUP BY c ORDER BY max(b) DESC;
# We may decide to support this later, but for now this should cause an error.
build
SELECT DISTINCT c FROM t ORDER BY b DESC
----
error: for SELECT DISTINCT, ORDER BY expressions must appear in select list

build
SELECT a AS foo, b FROM t ORDER BY foo DESC
----
sort
 ├── columns: foo:1(int!null) b:2(int)
 ├── ordering: -1
 └── project
      ├── columns: t.a:1(int!null) t.b:2(int)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           ├── variable: t.a [type=int]
           └── variable: t.b [type=int]

# Check that ambiguous references to renders are properly reported.
build
SELECT a AS foo, b AS foo FROM t ORDER BY foo
----
error: ORDER BY "foo" is ambiguous

# Check that no ambiguity is reported if the ORDER BY name refers
# to two or more equivalent renders (special case in SQL92).
build
SELECT a AS foo, (a) AS foo FROM t ORDER BY foo LIMIT 1
----
limit
 ├── columns: foo:1(int!null) foo:1(int!null)
 ├── ordering: +1
 ├── project
 │    ├── columns: t.a:1(int!null)
 │    ├── ordering: +1
 │    ├── scan t
 │    │    ├── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
 │    │    └── ordering: +1
 │    └── projections
 │         └── variable: t.a [type=int]
 └── const: 1 [type=int]

# Check that this orders by the aliased column b (i.e., column a), not the
# original column b.
build
SELECT a AS b, b AS c FROM t ORDER BY b
----
project
 ├── columns: b:1(int!null) c:2(int)
 ├── ordering: +1
 ├── scan t
 │    ├── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
 │    └── ordering: +1
 └── projections
      ├── variable: t.a [type=int]
      └── variable: t.b [type=int]

build
SELECT a AS "foo.bar", b FROM t ORDER BY "foo.bar" DESC
----
sort
 ├── columns: foo.bar:1(int!null) b:2(int)
 ├── ordering: -1
 └── project
      ├── columns: t.a:1(int!null) t.b:2(int)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           ├── variable: t.a [type=int]
           └── variable: t.b [type=int]

build
SELECT a AS foo, b FROM t ORDER BY a DESC
----
sort
 ├── columns: foo:1(int!null) b:2(int)
 ├── ordering: -1
 └── project
      ├── columns: t.a:1(int!null) t.b:2(int)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           ├── variable: t.a [type=int]
           └── variable: t.b [type=int]

build
SELECT b FROM t ORDER BY a DESC
----
sort
 ├── columns: b:2(int)
 ├── ordering: -1
 └── project
      ├── columns: t.b:2(int) t.a:1(int!null)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           ├── variable: t.b [type=int]
           └── variable: t.a [type=int]

build
SELECT b FROM t ORDER BY a LIMIT 1
----
limit
 ├── columns: b:2(int)
 ├── ordering: +1
 ├── project
 │    ├── columns: t.b:2(int) t.a:1(int!null)
 │    ├── ordering: +1
 │    ├── scan t
 │    │    ├── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
 │    │    └── ordering: +1
 │    └── projections
 │         ├── variable: t.b [type=int]
 │         └── variable: t.a [type=int]
 └── const: 1 [type=int]

build
SELECT b FROM t ORDER BY a DESC, b ASC
----
sort
 ├── columns: b:2(int)
 ├── ordering: -1,+2
 └── project
      ├── columns: t.b:2(int) t.a:1(int!null)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           ├── variable: t.b [type=int]
           └── variable: t.a [type=int]

build
SELECT b FROM t ORDER BY a DESC, b DESC
----
sort
 ├── columns: b:2(int)
 ├── ordering: -1,-2
 └── project
      ├── columns: t.b:2(int) t.a:1(int!null)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           ├── variable: t.b [type=int]
           └── variable: t.a [type=int]

# both presentation and ordering
build
SELECT a, b, b FROM t ORDER BY c
----
sort
 ├── columns: a:1(int!null) b:2(int) b:2(int)
 ├── ordering: +3
 └── project
      ├── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           ├── variable: t.a [type=int]
           ├── variable: t.b [type=int]
           └── variable: t.c [type=bool]

build
SELECT * FROM t ORDER BY (b, t.*)
----
sort
 ├── columns: a:1(int!null) b:2(int) c:3(bool)
 ├── ordering: +2,+1,+2,+3
 └── scan t
      └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)

build
SELECT * FROM t ORDER BY (b, a), c
----
sort
 ├── columns: a:1(int!null) b:2(int) c:3(bool)
 ├── ordering: +2,+1,+3
 └── scan t
      └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)

build
SELECT * FROM t ORDER BY b, (a, c)
----
sort
 ├── columns: a:1(int!null) b:2(int) c:3(bool)
 ├── ordering: +2,+1,+3
 └── scan t
      └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)

build
SELECT * FROM t ORDER BY (b, (a, c))
----
sort
 ├── columns: a:1(int!null) b:2(int) c:3(bool)
 ├── ordering: +2,+1,+3
 └── scan t
      └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)

build
SELECT a, b FROM t WHERE b = 7 ORDER BY b, a
----
sort
 ├── columns: a:1(int!null) b:2(int)
 ├── ordering: +2,+1
 └── project
      ├── columns: t.a:1(int!null) t.b:2(int)
      ├── select
      │    ├── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      │    ├── scan t
      │    │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      │    └── eq [type=bool]
      │         ├── variable: t.b [type=int]
      │         └── const: 7 [type=int]
      └── projections
           ├── variable: t.a [type=int]
           └── variable: t.b [type=int]

build
SELECT a, b FROM t ORDER BY b, a DESC
----
sort
 ├── columns: a:1(int!null) b:2(int)
 ├── ordering: +2,-1
 └── project
      ├── columns: t.a:1(int!null) t.b:2(int)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           ├── variable: t.a [type=int]
           └── variable: t.b [type=int]

build
SELECT a, b, a+b AS ab FROM t WHERE b = 7 ORDER BY ab DESC, a
----
sort
 ├── columns: a:1(int!null) b:2(int) ab:4(int)
 ├── ordering: -4,+1
 └── project
      ├── columns: t.a:1(int!null) t.b:2(int) ab:4(int)
      ├── select
      │    ├── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      │    ├── scan t
      │    │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      │    └── eq [type=bool]
      │         ├── variable: t.b [type=int]
      │         └── const: 7 [type=int]
      └── projections
           ├── variable: t.a [type=int]
           ├── variable: t.b [type=int]
           └── plus [type=int]
                ├── variable: t.a [type=int]
                └── variable: t.b [type=int]

build
SELECT a FROM t ORDER BY a+b DESC, a
----
sort
 ├── columns: a:1(int!null)
 ├── ordering: -4,+1
 └── project
      ├── columns: t.a:1(int!null) column4:4(int)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           ├── variable: t.a [type=int]
           └── plus [type=int]
                ├── variable: t.a [type=int]
                └── variable: t.b [type=int]

build
SELECT a FROM t ORDER BY (((a)))
----
project
 ├── columns: a:1(int!null)
 ├── ordering: +1
 ├── scan t
 │    ├── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
 │    └── ordering: +1
 └── projections
      └── variable: t.a [type=int]

build
(((SELECT a FROM t))) ORDER BY a DESC LIMIT 4
----
limit
 ├── columns: a:1(int!null)
 ├── ordering: -1
 ├── sort
 │    ├── columns: t.a:1(int!null)
 │    ├── ordering: -1
 │    └── project
 │         ├── columns: t.a:1(int!null)
 │         ├── scan t
 │         │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
 │         └── projections
 │              └── variable: t.a [type=int]
 └── const: 4 [type=int]

build
(((SELECT a FROM t ORDER BY a DESC LIMIT 4)))
----
limit
 ├── columns: a:1(int!null)
 ├── ordering: -1
 ├── sort
 │    ├── columns: t.a:1(int!null)
 │    ├── ordering: -1
 │    └── project
 │         ├── columns: t.a:1(int!null)
 │         ├── scan t
 │         │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
 │         └── projections
 │              └── variable: t.a [type=int]
 └── const: 4 [type=int]

build
((SELECT a FROM t ORDER BY a)) ORDER BY a
----
error: multiple ORDER BY clauses not allowed

build
SELECT CASE a WHEN 1 THEN b ELSE c END as val FROM t ORDER BY val
----
error: incompatible value type:: expected t.c to be of type int, found type bool

build
SELECT * FROM t ORDER BY 0
----
error: ORDER BY position 0 is not in select list

build
SELECT * FROM t ORDER BY true
----
error: non-integer constant in ORDER BY: true

build
SELECT * FROM t ORDER BY 'a'
----
error: non-integer constant in ORDER BY: 'a'

build
SELECT * FROM t ORDER BY 2.5
----
error: non-integer constant in ORDER BY: 2.5

build
SELECT * FROM t ORDER BY foo
----
error: column name "foo" not found

build
SELECT a FROM t ORDER BY a.b
----
error: no data source matches prefix: a

build
SELECT GENERATE_SERIES FROM GENERATE_SERIES(1, 100) ORDER BY ARRAY[GENERATE_SERIES]
----
error: not yet implemented: table expr: *tree.FuncExpr

build
SELECT ARRAY[GENERATE_SERIES] FROM GENERATE_SERIES(1, 100) ORDER BY ARRAY[GENERATE_SERIES]
----
error: not yet implemented: table expr: *tree.FuncExpr

build
SELECT ARRAY[GENERATE_SERIES] FROM GENERATE_SERIES(1, 100) ORDER BY 1
----
error: not yet implemented: table expr: *tree.FuncExpr

build
SELECT ARRAY[GENERATE_SERIES] AS a FROM GENERATE_SERIES(1, 100) ORDER BY a
----
error: not yet implemented: table expr: *tree.FuncExpr

build
SELECT GENERATE_SERIES, ARRAY[GENERATE_SERIES] FROM GENERATE_SERIES(1, 1) ORDER BY 1
----
error: not yet implemented: table expr: *tree.FuncExpr

build
SELECT GENERATE_SERIES, ARRAY[GENERATE_SERIES] FROM GENERATE_SERIES(1, 1) ORDER BY GENERATE_SERIES
----
error: not yet implemented: table expr: *tree.FuncExpr

build
SELECT GENERATE_SERIES, ARRAY[GENERATE_SERIES] FROM GENERATE_SERIES(1, 1) ORDER BY -GENERATE_SERIES
----
error: not yet implemented: table expr: *tree.FuncExpr


# Sort should be skipped if the ORDER BY clause is constant.
# (This skipping will probably happen later during optimization. The below
# tests should just show that the ordering column is constant.)
build
SELECT * FROM t ORDER BY 1+2
----
sort
 ├── columns: a:1(int!null) b:2(int) c:3(bool)
 ├── ordering: +4
 └── project
      ├── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool) column4:4(int)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           ├── variable: t.a [type=int]
           ├── variable: t.b [type=int]
           ├── variable: t.c [type=bool]
           └── const: 3 [type=int]

build
SELECT 1, * FROM t ORDER BY 1
----
sort
 ├── columns: column4:4(int) a:1(int!null) b:2(int) c:3(bool)
 ├── ordering: +4
 └── project
      ├── columns: column4:4(int) t.a:1(int!null) t.b:2(int) t.c:3(bool)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           ├── const: 1 [type=int]
           ├── variable: t.a [type=int]
           ├── variable: t.b [type=int]
           └── variable: t.c [type=bool]

build
SELECT * FROM t ORDER BY length('abc')
----
sort
 ├── columns: a:1(int!null) b:2(int) c:3(bool)
 ├── ordering: +4
 └── project
      ├── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool) column4:4(int)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           ├── variable: t.a [type=int]
           ├── variable: t.b [type=int]
           ├── variable: t.c [type=bool]
           └── function: length [type=int]
                └── const: 'abc' [type=string]

build
SELECT b+2 FROM t ORDER BY b+2
----
sort
 ├── columns: column4:4(int)
 ├── ordering: +4
 └── project
      ├── columns: column4:4(int)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           └── plus [type=int]
                ├── variable: t.b [type=int]
                └── const: 2 [type=int]

# Check that the sort picks up a renamed render properly.
build
SELECT b+2 AS y FROM t ORDER BY y
----
sort
 ├── columns: y:4(int)
 ├── ordering: +4
 └── project
      ├── columns: y:4(int)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           └── plus [type=int]
                ├── variable: t.b [type=int]
                └── const: 2 [type=int]

build
SELECT b+2 AS y FROM t ORDER BY b+2
----
sort
 ├── columns: y:4(int)
 ├── ordering: +4
 └── project
      ├── columns: y:4(int)
      ├── scan t
      │    └── columns: t.a:1(int!null) t.b:2(int) t.c:3(bool)
      └── projections
           └── plus [type=int]
                ├── variable: t.b [type=int]
                └── const: 2 [type=int]

exec-ddl
CREATE TABLE abc (
  a INT,
  b INT,
  c INT,
  d CHAR,
  PRIMARY KEY (a, b, c),
  UNIQUE INDEX bc (b, c),
  INDEX ba (b, a),
  FAMILY (a, b, c),
  FAMILY (d)
)
----
TABLE abc
 ├── a int not null
 ├── b int not null
 ├── c int not null
 ├── d string
 ├── INDEX primary
 │    ├── a int not null
 │    ├── b int not null
 │    └── c int not null
 ├── INDEX bc
 │    ├── b int not null
 │    ├── c int not null
 │    └── a int not null (storing)
 └── INDEX ba
      ├── b int not null
      ├── a int not null
      └── c int not null

build
SELECT d FROM abc ORDER BY LOWER(d)
----
sort
 ├── columns: d:4(string)
 ├── ordering: +5
 └── project
      ├── columns: abc.d:4(string) column5:5(string)
      ├── scan abc
      │    └── columns: abc.a:1(int!null) abc.b:2(int!null) abc.c:3(int!null) abc.d:4(string)
      └── projections
           ├── variable: abc.d [type=string]
           └── function: lower [type=string]
                └── variable: abc.d [type=string]

build
SELECT * FROM abc ORDER BY a
----
scan abc
 ├── columns: a:1(int!null) b:2(int!null) c:3(int!null) d:4(string)
 └── ordering: +1

build
SELECT a, b FROM abc ORDER BY b, a
----
sort
 ├── columns: a:1(int!null) b:2(int!null)
 ├── ordering: +2,+1
 └── project
      ├── columns: abc.a:1(int!null) abc.b:2(int!null)
      ├── scan abc
      │    └── columns: abc.a:1(int!null) abc.b:2(int!null) abc.c:3(int!null) abc.d:4(string)
      └── projections
           ├── variable: abc.a [type=int]
           └── variable: abc.b [type=int]

build
SELECT a, b FROM abc ORDER BY b, c
----
sort
 ├── columns: a:1(int!null) b:2(int!null)
 ├── ordering: +2,+3
 └── project
      ├── columns: abc.a:1(int!null) abc.b:2(int!null) abc.c:3(int!null)
      ├── scan abc
      │    └── columns: abc.a:1(int!null) abc.b:2(int!null) abc.c:3(int!null) abc.d:4(string)
      └── projections
           ├── variable: abc.a [type=int]
           ├── variable: abc.b [type=int]
           └── variable: abc.c [type=int]

build
SELECT a, b FROM abc ORDER BY b, c, a DESC
----
sort
 ├── columns: a:1(int!null) b:2(int!null)
 ├── ordering: +2,+3,-1
 └── project
      ├── columns: abc.a:1(int!null) abc.b:2(int!null) abc.c:3(int!null)
      ├── scan abc
      │    └── columns: abc.a:1(int!null) abc.b:2(int!null) abc.c:3(int!null) abc.d:4(string)
      └── projections
           ├── variable: abc.a [type=int]
           ├── variable: abc.b [type=int]
           └── variable: abc.c [type=int]

build
SELECT a FROM abc ORDER BY a DESC
----
sort
 ├── columns: a:1(int!null)
 ├── ordering: -1
 └── project
      ├── columns: abc.a:1(int!null)
      ├── scan abc
      │    └── columns: abc.a:1(int!null) abc.b:2(int!null) abc.c:3(int!null) abc.d:4(string)
      └── projections
           └── variable: abc.a [type=int]

build
SELECT a FROM abc ORDER BY a DESC LIMIT 1
----
limit
 ├── columns: a:1(int!null)
 ├── ordering: -1
 ├── sort
 │    ├── columns: abc.a:1(int!null)
 │    ├── ordering: -1
 │    └── project
 │         ├── columns: abc.a:1(int!null)
 │         ├── scan abc
 │         │    └── columns: abc.a:1(int!null) abc.b:2(int!null) abc.c:3(int!null) abc.d:4(string)
 │         └── projections
 │              └── variable: abc.a [type=int]
 └── const: 1 [type=int]

build
SELECT a FROM abc ORDER BY a DESC OFFSET 1
----
offset
 ├── columns: a:1(int!null)
 ├── ordering: -1
 ├── sort
 │    ├── columns: abc.a:1(int!null)
 │    ├── ordering: -1
 │    └── project
 │         ├── columns: abc.a:1(int!null)
 │         ├── scan abc
 │         │    └── columns: abc.a:1(int!null) abc.b:2(int!null) abc.c:3(int!null) abc.d:4(string)
 │         └── projections
 │              └── variable: abc.a [type=int]
 └── const: 1 [type=int]

build
SELECT c FROM abc WHERE b = 2 ORDER BY c
----
sort
 ├── columns: c:3(int!null)
 ├── ordering: +3
 └── project
      ├── columns: abc.c:3(int!null)
      ├── select
      │    ├── columns: abc.a:1(int!null) abc.b:2(int!null) abc.c:3(int!null) abc.d:4(string)
      │    ├── scan abc
      │    │    └── columns: abc.a:1(int!null) abc.b:2(int!null) abc.c:3(int!null) abc.d:4(string)
      │    └── eq [type=bool]
      │         ├── variable: abc.b [type=int]
      │         └── const: 2 [type=int]
      └── projections
           └── variable: abc.c [type=int]

build
SELECT c FROM abc WHERE b = 2 ORDER BY c DESC
----
sort
 ├── columns: c:3(int!null)
 ├── ordering: -3
 └── project
      ├── columns: abc.c:3(int!null)
      ├── select
      │    ├── columns: abc.a:1(int!null) abc.b:2(int!null) abc.c:3(int!null) abc.d:4(string)
      │    ├── scan abc
      │    │    └── columns: abc.a:1(int!null) abc.b:2(int!null) abc.c:3(int!null) abc.d:4(string)
      │    └── eq [type=bool]
      │         ├── variable: abc.b [type=int]
      │         └── const: 2 [type=int]
      └── projections
           └── variable: abc.c [type=int]

# Verify that the ordering of the primary index is still used for the outer sort.
# TODO(rytaft): Verify that the sort node is removed before execution.
build
SELECT * FROM (SELECT b, c FROM abc WHERE a=1 ORDER BY a,b) ORDER BY b,c
----
sort
 ├── columns: b:2(int!null) c:3(int!null)
 ├── ordering: +2,+3
 └── project
      ├── columns: abc.b:2(int!null) abc.c:3(int!null) abc.a:1(int!null)
      ├── select
      │    ├── columns: abc.a:1(int!null) abc.b:2(int!null) abc.c:3(int!null) abc.d:4(string)
      │    ├── scan abc
      │    │    └── columns: abc.a:1(int!null) abc.b:2(int!null) abc.c:3(int!null) abc.d:4(string)
      │    └── eq [type=bool]
      │         ├── variable: abc.a [type=int]
      │         └── const: 1 [type=int]
      └── projections
           ├── variable: abc.b [type=int]
           ├── variable: abc.c [type=int]
           └── variable: abc.a [type=int]

exec-ddl
CREATE TABLE bar (id INT PRIMARY KEY, baz STRING, UNIQUE INDEX i_bar (baz))
----
TABLE bar
 ├── id int not null
 ├── baz string
 ├── INDEX primary
 │    └── id int not null
 └── INDEX i_bar
      ├── baz string
      └── id int not null (storing)

build
SELECT * FROM bar ORDER BY baz, id
----
sort
 ├── columns: id:1(int!null) baz:2(string)
 ├── ordering: +2,+1
 └── scan bar
      └── columns: bar.id:1(int!null) bar.baz:2(string)

exec-ddl
CREATE TABLE abcd (
  a INT PRIMARY KEY,
  b INT,
  c INT,
  d INT,
  INDEX abc (a, b, c)
)
----
TABLE abcd
 ├── a int not null
 ├── b int
 ├── c int
 ├── d int
 ├── INDEX primary
 │    └── a int not null
 └── INDEX abc
      ├── a int not null
      ├── b int
      └── c int

# Verify that projections after ORDER BY perform correctly (i.e., the outer
# expression does not guarantee it will apply the ORDER BY).

build
SELECT a+b FROM (SELECT * FROM abcd ORDER BY d)
----
project
 ├── columns: column5:5(int)
 ├── scan abcd
 │    └── columns: abcd.a:1(int!null) abcd.b:2(int) abcd.c:3(int) abcd.d:4(int)
 └── projections
      └── plus [type=int]
           ├── variable: abcd.a [type=int]
           └── variable: abcd.b [type=int]

build
SELECT b+d FROM (SELECT * FROM abcd ORDER BY a,d)
----
project
 ├── columns: column5:5(int)
 ├── scan abcd
 │    └── columns: abcd.a:1(int!null) abcd.b:2(int) abcd.c:3(int) abcd.d:4(int)
 └── projections
      └── plus [type=int]
           ├── variable: abcd.b [type=int]
           └── variable: abcd.d [type=int]

build
SELECT * FROM (VALUES ('a'), ('b'), ('c')) AS c(x) ORDER BY x
----
sort
 ├── columns: x:1(string)
 ├── ordering: +1
 └── values
      ├── columns: column1:1(string)
      ├── tuple [type=tuple{string}]
      │    └── const: 'a' [type=string]
      ├── tuple [type=tuple{string}]
      │    └── const: 'b' [type=string]
      └── tuple [type=tuple{string}]
           └── const: 'c' [type=string]

build
SELECT * FROM (SELECT * FROM (VALUES ('a'), ('b'), ('c')) AS c(x) ORDER BY x)
----
values
 ├── columns: x:1(string)
 ├── tuple [type=tuple{string}]
 │    └── const: 'a' [type=string]
 ├── tuple [type=tuple{string}]
 │    └── const: 'b' [type=string]
 └── tuple [type=tuple{string}]
      └── const: 'c' [type=string]

exec-ddl
CREATE TABLE blocks (
  block_id  INT,
  writer_id STRING,
  block_num INT,
  raw_bytes BYTES,
  PRIMARY KEY (block_id, writer_id, block_num)
)
----
TABLE blocks
 ├── block_id int not null
 ├── writer_id string not null
 ├── block_num int not null
 ├── raw_bytes bytes
 └── INDEX primary
      ├── block_id int not null
      ├── writer_id string not null
      └── block_num int not null

# Regression test for #13696.
build
SELECT block_id,writer_id,block_num,block_id FROM blocks ORDER BY block_id, writer_id, block_num LIMIT 1
----
limit
 ├── columns: block_id:1(int!null) writer_id:2(string!null) block_num:3(int!null) block_id:1(int!null)
 ├── ordering: +1,+2,+3
 ├── project
 │    ├── columns: blocks.block_id:1(int!null) blocks.writer_id:2(string!null) blocks.block_num:3(int!null)
 │    ├── ordering: +1,+2,+3
 │    ├── scan blocks
 │    │    ├── columns: blocks.block_id:1(int!null) blocks.writer_id:2(string!null) blocks.block_num:3(int!null) blocks.raw_bytes:4(bytes)
 │    │    └── ordering: +1,+2,+3
 │    └── projections
 │         ├── variable: blocks.block_id [type=int]
 │         ├── variable: blocks.writer_id [type=string]
 │         └── variable: blocks.block_num [type=int]
 └── const: 1 [type=int]

exec-ddl
CREATE TABLE abcd (
  a INT PRIMARY KEY,
  b INT,
  c INT,
  d INT
)
----
TABLE abcd
 ├── a int not null
 ├── b int
 ├── c int
 ├── d int
 └── INDEX primary
      └── a int not null

build
SELECT a, b FROM abcd ORDER BY b, c
----
sort
 ├── columns: a:1(int!null) b:2(int)
 ├── ordering: +2,+3
 └── project
      ├── columns: abcd.a:1(int!null) abcd.b:2(int) abcd.c:3(int)
      ├── scan abcd
      │    └── columns: abcd.a:1(int!null) abcd.b:2(int) abcd.c:3(int) abcd.d:4(int)
      └── projections
           ├── variable: abcd.a [type=int]
           ├── variable: abcd.b [type=int]
           └── variable: abcd.c [type=int]

build
SELECT a FROM abcd ORDER BY b, c
----
sort
 ├── columns: a:1(int!null)
 ├── ordering: +2,+3
 └── project
      ├── columns: abcd.a:1(int!null) abcd.b:2(int) abcd.c:3(int)
      ├── scan abcd
      │    └── columns: abcd.a:1(int!null) abcd.b:2(int) abcd.c:3(int) abcd.d:4(int)
      └── projections
           ├── variable: abcd.a [type=int]
           ├── variable: abcd.b [type=int]
           └── variable: abcd.c [type=int]

build
SELECT a FROM abcd ORDER BY a, b, c
----
project
 ├── columns: a:1(int!null)
 ├── ordering: +1,+2,+3
 ├── scan abcd
 │    ├── columns: abcd.a:1(int!null) abcd.b:2(int) abcd.c:3(int) abcd.d:4(int)
 │    └── ordering: +1,+2,+3
 └── projections
      ├── variable: abcd.a [type=int]
      ├── variable: abcd.b [type=int]
      └── variable: abcd.c [type=int]
