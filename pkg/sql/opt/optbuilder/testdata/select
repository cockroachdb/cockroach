# tests adapted from logictest -- select

# These statements must be first - the numeric reference tests assume that
# these are the first tables defined. Cockroach numeric references start after
# 53 for user tables. See opt/testutils/testcat/create_table.go:117 for more
# info on 53 as a magic number.

exec-ddl
CREATE TABLE tab53 (a INT PRIMARY KEY, y INT, b INT, c INT, INDEX bc (b,c))
----

exec-ddl
CREATE TABLE tab54 (x INT, y INT)
----

exec-ddl
CREATE TABLE tab55 (a INT PRIMARY KEY, b INT NOT NULL, CONSTRAINT foo CHECK (a+b < 10))
----

exec-ddl
CREATE TABLE tab56 (
  a INT PRIMARY KEY,
  b INT,
  "c:write-only" INT,
  "d:delete-only" INT
)
----

# SELECT with no table.

build
SELECT 1
----
project
 ├── columns: "?column?":1!null
 ├── values
 │    └── ()
 └── projections
      └── 1 [as="?column?":1]

build
SELECT NULL
----
project
 ├── columns: "?column?":1
 ├── values
 │    └── ()
 └── projections
      └── NULL [as="?column?":1]

build
SELECT 1+1 AS two, 2+2 AS four
----
project
 ├── columns: two:1!null four:2!null
 ├── values
 │    └── ()
 └── projections
      ├── 1 + 1 [as=two:1]
      └── 2 + 2 [as=four:2]

# SELECT expression tests.

exec-ddl
CREATE TABLE abc (a INT PRIMARY KEY, b INT, c INT)
----

build
SELECT * FROM abc WHERE 'hello'
----
error (22P02): could not parse "hello" as type bool: invalid bool value

build
SELECT * FROM abc
----
project
 ├── columns: a:1!null b:2 c:3
 └── scan abc
      └── columns: a:1!null b:2 c:3 crdb_internal_mvcc_timestamp:4

build
SELECT NULL AS r, * FROM abc
----
project
 ├── columns: r:5 a:1!null b:2 c:3
 ├── scan abc
 │    └── columns: a:1!null b:2 c:3 crdb_internal_mvcc_timestamp:4
 └── projections
      └── NULL [as=r:5]


# synonym for SELECT * FROM abc
build
TABLE abc
----
project
 ├── columns: a:1!null b:2 c:3
 └── scan abc
      └── columns: a:1!null b:2 c:3 crdb_internal_mvcc_timestamp:4

build
SELECT * FROM abc WHERE NULL
----
project
 ├── columns: a:1!null b:2 c:3
 └── select
      ├── columns: a:1!null b:2 c:3 crdb_internal_mvcc_timestamp:4
      ├── scan abc
      │    └── columns: a:1!null b:2 c:3 crdb_internal_mvcc_timestamp:4
      └── filters
           └── NULL::BOOL

build
SELECT * FROM abc WHERE a = NULL
----
project
 ├── columns: a:1!null b:2 c:3
 └── select
      ├── columns: a:1!null b:2 c:3 crdb_internal_mvcc_timestamp:4
      ├── scan abc
      │    └── columns: a:1!null b:2 c:3 crdb_internal_mvcc_timestamp:4
      └── filters
           └── NULL::BOOL

build
SELECT *,* FROM abc
----
project
 ├── columns: a:1!null b:2 c:3 a:1!null b:2 c:3
 └── scan abc
      └── columns: a:1!null b:2 c:3 crdb_internal_mvcc_timestamp:4

build
SELECT a,a,a,a FROM abc
----
project
 ├── columns: a:1!null a:1!null a:1!null a:1!null
 └── scan abc
      └── columns: a:1!null b:2 c:3 crdb_internal_mvcc_timestamp:4

build
SELECT a,c FROM abc
----
project
 ├── columns: a:1!null c:3
 └── scan abc
      └── columns: a:1!null b:2 c:3 crdb_internal_mvcc_timestamp:4

build
SELECT a+b+c AS foo FROM abc
----
project
 ├── columns: foo:5
 ├── scan abc
 │    └── columns: a:1!null b:2 c:3 crdb_internal_mvcc_timestamp:4
 └── projections
      └── (a:1 + b:2) + c:3 [as=foo:5]

build
SELECT a,b FROM abc WHERE CASE WHEN a != 0 THEN b/a > 1.5 ELSE false END
----
project
 ├── columns: a:1!null b:2
 └── select
      ├── columns: a:1!null b:2 c:3 crdb_internal_mvcc_timestamp:4
      ├── scan abc
      │    └── columns: a:1!null b:2 c:3 crdb_internal_mvcc_timestamp:4
      └── filters
           └── CASE WHEN a:1 != 0 THEN (b:2 / a:1) > 1.5 ELSE false END

# SELECT of NULL value.

exec-ddl
CREATE TABLE kv (k CHAR PRIMARY KEY, v CHAR)
----

build
SELECT * FROM kv
----
project
 ├── columns: k:1!null v:2
 └── scan kv
      └── columns: k:1!null v:2 crdb_internal_mvcc_timestamp:3

build
SELECT k,v FROM kv
----
project
 ├── columns: k:1!null v:2
 └── scan kv
      └── columns: k:1!null v:2 crdb_internal_mvcc_timestamp:3

build
SELECT v||'foo' AS r FROM kv
----
project
 ├── columns: r:4
 ├── scan kv
 │    └── columns: k:1!null v:2 crdb_internal_mvcc_timestamp:3
 └── projections
      └── v:2::STRING || 'foo' [as=r:4]

build
SELECT lower(v) FROM kv
----
project
 ├── columns: lower:4
 ├── scan kv
 │    └── columns: k:1!null v:2 crdb_internal_mvcc_timestamp:3
 └── projections
      └── lower(v:2) [as=lower:4]

build
SELECT k FROM kv
----
project
 ├── columns: k:1!null
 └── scan kv
      └── columns: k:1!null v:2 crdb_internal_mvcc_timestamp:3

build
SELECT kv.K,KV.v FROM kv
----
project
 ├── columns: k:1!null v:2
 └── scan kv
      └── columns: k:1!null v:2 crdb_internal_mvcc_timestamp:3

build
SELECT kv.* FROM kv
----
project
 ├── columns: k:1!null v:2
 └── scan kv
      └── columns: k:1!null v:2 crdb_internal_mvcc_timestamp:3

build
SELECT (kv.*) AS r FROM kv
----
project
 ├── columns: r:4
 ├── scan kv
 │    └── columns: k:1!null v:2 crdb_internal_mvcc_timestamp:3
 └── projections
      └── ((k:1, v:2) AS k, v) [as=r:4]

build
SELECT (SELECT t.*) FROM (VALUES (1)) AS t(x)
----
project
 ├── columns: "?column?":3
 ├── values
 │    ├── columns: column1:1!null
 │    └── (1,)
 └── projections
      └── subquery [as="?column?":3]
           └── max1-row
                ├── columns: x:2
                └── project
                     ├── columns: x:2
                     ├── values
                     │    └── ()
                     └── projections
                          └── column1:1 [as=x:2]

build
SELECT foo.* FROM kv
----
error (42P01): no data source matches pattern: foo.*

build
SELECT *
----
error (42602): cannot use "*" without a FROM clause

build
SELECT kv.* AS foo FROM kv
----
error (42601): "kv.*" cannot be aliased

build
SELECT bar.kv.* FROM kv
----
error (42P01): no data source matches pattern: bar.kv.*

# Don't panic with invalid names (#8024)
build
SELECT kv.*[1] FROM kv
----
error (42804): cannot subscript type tuple{char AS k, char AS v} because it is not an array

build
SELECT ARRAY[]
----
error (42P18): cannot determine type of empty array. Consider annotating with the desired type, for example ARRAY[]:::int[]

build
SELECT FOO.k FROM kv AS foo WHERE foo.k = 'a'
----
project
 ├── columns: k:1!null
 └── select
      ├── columns: k:1!null v:2 crdb_internal_mvcc_timestamp:3
      ├── scan kv [as=foo]
      │    └── columns: k:1!null v:2 crdb_internal_mvcc_timestamp:3
      └── filters
           └── k:1 = 'a'

build
SELECT "foo"."v" FROM kv AS foo WHERE foo.k = 'a'
----
project
 ├── columns: v:2
 └── select
      ├── columns: k:1!null v:2 crdb_internal_mvcc_timestamp:3
      ├── scan kv [as=foo]
      │    └── columns: k:1!null v:2 crdb_internal_mvcc_timestamp:3
      └── filters
           └── k:1 = 'a'

exec-ddl
CREATE TABLE kw ("from" INT PRIMARY KEY)
----

build
SELECT *, "from", kw."from" FROM kw
----
project
 ├── columns: from:1!null from:1!null from:1!null
 └── scan kw
      └── columns: from:1!null crdb_internal_mvcc_timestamp:2

exec-ddl
CREATE TABLE xyzw (
  x INT PRIMARY KEY,
  y INT,
  z INT,
  w INT,
  INDEX foo (z, y)
)
----

# SELECT with index hints.

build
SELECT * FROM xyzw@primary
----
project
 ├── columns: x:1!null y:2 z:3 w:4
 └── scan xyzw
      ├── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
      └── flags: force-index=primary

build
SELECT * FROM xyzw@foo
----
project
 ├── columns: x:1!null y:2 z:3 w:4
 └── scan xyzw
      ├── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
      └── flags: force-index=foo

build
SELECT * FROM xyzw@{FORCE_INDEX=foo,ASC}
----
project
 ├── columns: x:1!null y:2 z:3 w:4
 └── scan xyzw
      ├── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
      └── flags: force-index=foo,fwd

build
SELECT * FROM xyzw@{FORCE_INDEX=foo,DESC}
----
project
 ├── columns: x:1!null y:2 z:3 w:4
 └── scan xyzw,rev
      ├── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
      └── flags: force-index=foo,rev

build
SELECT * FROM xyzw@{NO_INDEX_JOIN}
----
project
 ├── columns: x:1!null y:2 z:3 w:4
 └── scan xyzw
      ├── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
      └── flags: no-index-join

build
SELECT * FROM xyzw LIMIT x
----
error (42703): column "x" does not exist

build
SELECT * FROM xyzw OFFSET 1 + y
----
error (42703): column "y" does not exist

build
SELECT * FROM xyzw LIMIT 3.3
----
error (42804): argument of LIMIT must be type int, not type decimal

build
SELECT * FROM xyzw ORDER BY 1 LIMIT '1'
----
limit
 ├── columns: x:1!null y:2 z:3 w:4
 ├── internal-ordering: +1
 ├── ordering: +1
 ├── project
 │    ├── columns: x:1!null y:2 z:3 w:4
 │    ├── ordering: +1
 │    ├── limit hint: 1.00
 │    └── scan xyzw
 │         ├── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
 │         ├── ordering: +1
 │         └── limit hint: 1.00
 └── 1

build
SELECT * FROM xyzw OFFSET 1.5
----
error (42804): argument of OFFSET must be type int, not type decimal

# At execution time, this will cause the error: negative value for LIMIT
build
SELECT * FROM xyzw LIMIT -100
----
limit
 ├── columns: x:1!null y:2 z:3 w:4
 ├── project
 │    ├── columns: x:1!null y:2 z:3 w:4
 │    ├── limit hint: 1.00
 │    └── scan xyzw
 │         ├── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
 │         └── limit hint: 1.00
 └── -100

# At execution time, this will cause the error: negative value for OFFSET
build
SELECT * FROM xyzw OFFSET -100
----
offset
 ├── columns: x:1!null y:2 z:3 w:4
 ├── project
 │    ├── columns: x:1!null y:2 z:3 w:4
 │    └── scan xyzw
 │         └── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
 └── -100

build
SELECT * FROM xyzw ORDER BY x OFFSET 1 + 0.0
----
offset
 ├── columns: x:1!null y:2 z:3 w:4
 ├── internal-ordering: +1
 ├── ordering: +1
 ├── project
 │    ├── columns: x:1!null y:2 z:3 w:4
 │    ├── ordering: +1
 │    └── scan xyzw
 │         ├── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
 │         └── ordering: +1
 └── 1 + 0

build
SELECT (x,y) AS r FROM xyzw
----
project
 ├── columns: r:6
 ├── scan xyzw
 │    └── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
 └── projections
      └── (x:1, y:2) [as=r:6]

build
SELECT * FROM xyzw LIMIT 0
----
limit
 ├── columns: x:1!null y:2 z:3 w:4
 ├── project
 │    ├── columns: x:1!null y:2 z:3 w:4
 │    ├── limit hint: 1.00
 │    └── scan xyzw
 │         ├── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
 │         └── limit hint: 1.00
 └── 0

build
SELECT * FROM xyzw ORDER BY x LIMIT 1
----
limit
 ├── columns: x:1!null y:2 z:3 w:4
 ├── internal-ordering: +1
 ├── ordering: +1
 ├── project
 │    ├── columns: x:1!null y:2 z:3 w:4
 │    ├── ordering: +1
 │    ├── limit hint: 1.00
 │    └── scan xyzw
 │         ├── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
 │         ├── ordering: +1
 │         └── limit hint: 1.00
 └── 1

build
SELECT * FROM xyzw ORDER BY x LIMIT 1 OFFSET 1
----
limit
 ├── columns: x:1!null y:2 z:3 w:4
 ├── internal-ordering: +1
 ├── ordering: +1
 ├── offset
 │    ├── columns: x:1!null y:2 z:3 w:4
 │    ├── internal-ordering: +1
 │    ├── ordering: +1
 │    ├── limit hint: 1.00
 │    ├── project
 │    │    ├── columns: x:1!null y:2 z:3 w:4
 │    │    ├── ordering: +1
 │    │    ├── limit hint: 2.00
 │    │    └── scan xyzw
 │    │         ├── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
 │    │         ├── ordering: +1
 │    │         └── limit hint: 2.00
 │    └── 1
 └── 1

build
SELECT * FROM xyzw ORDER BY y OFFSET 1
----
offset
 ├── columns: x:1!null y:2 z:3 w:4
 ├── internal-ordering: +2
 ├── ordering: +2
 ├── sort
 │    ├── columns: x:1!null y:2 z:3 w:4
 │    ├── ordering: +2
 │    └── project
 │         ├── columns: x:1!null y:2 z:3 w:4
 │         └── scan xyzw
 │              └── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
 └── 1

build
SELECT * FROM xyzw ORDER BY y OFFSET 1 LIMIT 1
----
limit
 ├── columns: x:1!null y:2 z:3 w:4
 ├── internal-ordering: +2
 ├── ordering: +2
 ├── offset
 │    ├── columns: x:1!null y:2 z:3 w:4
 │    ├── internal-ordering: +2
 │    ├── ordering: +2
 │    ├── limit hint: 1.00
 │    ├── sort
 │    │    ├── columns: x:1!null y:2 z:3 w:4
 │    │    ├── ordering: +2
 │    │    ├── limit hint: 2.00
 │    │    └── project
 │    │         ├── columns: x:1!null y:2 z:3 w:4
 │    │         └── scan xyzw
 │    │              └── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
 │    └── 1
 └── 1

build
SELECT * FROM xyzw LIMIT (SELECT count(*) FROM abc) * 2 OFFSET (SELECT count(*) FROM abc) * 3
----
limit
 ├── columns: x:1!null y:2 z:3 w:4
 ├── offset
 │    ├── columns: x:1!null y:2 z:3 w:4
 │    ├── project
 │    │    ├── columns: x:1!null y:2 z:3 w:4
 │    │    └── scan xyzw
 │    │         └── columns: x:1!null y:2 z:3 w:4 xyzw.crdb_internal_mvcc_timestamp:5
 │    └── mult
 │         ├── subquery
 │         │    └── max1-row
 │         │         ├── columns: count_rows:10!null
 │         │         └── scalar-group-by
 │         │              ├── columns: count_rows:10!null
 │         │              ├── project
 │         │              │    └── scan abc
 │         │              │         └── columns: a:6!null b:7 c:8 abc.crdb_internal_mvcc_timestamp:9
 │         │              └── aggregations
 │         │                   └── count-rows [as=count_rows:10]
 │         └── 3
 └── mult
      ├── subquery
      │    └── max1-row
      │         ├── columns: count_rows:15!null
      │         └── scalar-group-by
      │              ├── columns: count_rows:15!null
      │              ├── project
      │              │    └── scan abc
      │              │         └── columns: a:11!null b:12 c:13 abc.crdb_internal_mvcc_timestamp:14
      │              └── aggregations
      │                   └── count-rows [as=count_rows:15]
      └── 2

build
((SELECT x FROM xyzw LIMIT 1)) LIMIT 1
----
error (42601): multiple LIMIT clauses not allowed

build
SELECT * FROM (SELECT * FROM xyzw LIMIT 5) OFFSET 5
----
offset
 ├── columns: x:1!null y:2 z:3 w:4
 ├── limit
 │    ├── columns: x:1!null y:2 z:3 w:4
 │    ├── project
 │    │    ├── columns: x:1!null y:2 z:3 w:4
 │    │    ├── limit hint: 5.00
 │    │    └── scan xyzw
 │    │         ├── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
 │    │         └── limit hint: 5.00
 │    └── 5
 └── 5

build
SELECT * FROM xyzw@foo
----
project
 ├── columns: x:1!null y:2 z:3 w:4
 └── scan xyzw
      ├── columns: x:1!null y:2 z:3 w:4 crdb_internal_mvcc_timestamp:5
      └── flags: force-index=foo

exec-ddl
CREATE TABLE boolean_table (
  id INTEGER PRIMARY KEY NOT NULL,
  value BOOLEAN
)
----

build
SELECT value FROM boolean_table
----
project
 ├── columns: value:2
 └── scan boolean_table
      └── columns: id:1!null value:2 crdb_internal_mvcc_timestamp:3

build
SELECT CASE WHEN NULL THEN 1 ELSE 2 END
----
project
 ├── columns: case:1
 ├── values
 │    └── ()
 └── projections
      └── CASE WHEN NULL THEN 1 ELSE 2 END [as=case:1]

build
SELECT 0 * b AS r, b % 1 AS s, 0 % b AS t from abc
----
project
 ├── columns: r:5 s:6 t:7
 ├── scan abc
 │    └── columns: a:1!null b:2 c:3 crdb_internal_mvcc_timestamp:4
 └── projections
      ├── 0 * b:2 [as=r:5]
      ├── b:2 % 1 [as=s:6]
      └── 0 % b:2 [as=t:7]

# Regression tests for #22670.
build
SELECT 1 IN (1, 2) AS r
----
project
 ├── columns: r:1!null
 ├── values
 │    └── ()
 └── projections
      └── 1 IN (1, 2) [as=r:1]

build
SELECT NULL IN (1, 2) AS r
----
project
 ├── columns: r:1
 ├── values
 │    └── ()
 └── projections
      └── NULL IN (1, 2) [as=r:1]

build
SELECT 1 IN (NULL, 2) AS r
----
project
 ├── columns: r:1
 ├── values
 │    └── ()
 └── projections
      └── 1 IN (NULL, 2) [as=r:1]

build
SELECT (1, NULL) IN ((1, 1)) AS r
----
project
 ├── columns: r:1
 ├── values
 │    └── ()
 └── projections
      └── (1, NULL) IN ((1, 1),) [as=r:1]

# Tests with a tuple coming from a subquery.
build
 SELECT NULL::int IN (SELECT * FROM (VALUES (1)) AS t(a)) AS r
----
project
 ├── columns: r:2
 ├── values
 │    └── ()
 └── projections
      └── any: eq [as=r:2]
           ├── values
           │    ├── columns: column1:1!null
           │    └── (1,)
           └── NULL::INT8

build
SELECT (1, NULL::int) IN (SELECT * FROM (VALUES (1, 1)) AS t(a, b)) AS r
----
project
 ├── columns: r:4
 ├── values
 │    └── ()
 └── projections
      └── any: eq [as=r:4]
           ├── project
           │    ├── columns: column3:3!null
           │    ├── values
           │    │    ├── columns: column1:1!null column2:2!null
           │    │    └── (1, 1)
           │    └── projections
           │         └── (column1:1, column2:2) [as=column3:3]
           └── (1, NULL::INT8)

build
SELECT NULL::int NOT IN (SELECT * FROM (VALUES (1)) AS t(a)) AS r
----
project
 ├── columns: r:2
 ├── values
 │    └── ()
 └── projections
      └── not [as=r:2]
           └── any: eq
                ├── values
                │    ├── columns: column1:1!null
                │    └── (1,)
                └── NULL::INT8

build
SELECT (1, NULL::int) NOT IN (SELECT * FROM (VALUES (1, 1)) AS t(a, b)) AS r
----
project
 ├── columns: r:4
 ├── values
 │    └── ()
 └── projections
      └── not [as=r:4]
           └── any: eq
                ├── project
                │    ├── columns: column3:3!null
                │    ├── values
                │    │    ├── columns: column1:1!null column2:2!null
                │    │    └── (1, 1)
                │    └── projections
                │         └── (column1:1, column2:2) [as=column3:3]
                └── (1, NULL::INT8)

# Tests with an empty IN tuple.
build
SELECT NULL::int IN (SELECT * FROM (VALUES (1)) AS t(a) WHERE a > 1) AS r
----
project
 ├── columns: r:2
 ├── values
 │    └── ()
 └── projections
      └── any: eq [as=r:2]
           ├── select
           │    ├── columns: column1:1!null
           │    ├── values
           │    │    ├── columns: column1:1!null
           │    │    └── (1,)
           │    └── filters
           │         └── column1:1 > 1
           └── NULL::INT8

build
SELECT (1, NULL::int) IN (SELECT * FROM (VALUES (1, 1)) AS t(a, b) WHERE a > 1) AS r
----
project
 ├── columns: r:4
 ├── values
 │    └── ()
 └── projections
      └── any: eq [as=r:4]
           ├── project
           │    ├── columns: column3:3!null
           │    ├── select
           │    │    ├── columns: column1:1!null column2:2!null
           │    │    ├── values
           │    │    │    ├── columns: column1:1!null column2:2!null
           │    │    │    └── (1, 1)
           │    │    └── filters
           │    │         └── column1:1 > 1
           │    └── projections
           │         └── (column1:1, column2:2) [as=column3:3]
           └── (1, NULL::INT8)

build
SELECT NULL::int NOT IN (SELECT * FROM (VALUES (1)) AS t(a) WHERE a > 1) AS r
----
project
 ├── columns: r:2
 ├── values
 │    └── ()
 └── projections
      └── not [as=r:2]
           └── any: eq
                ├── select
                │    ├── columns: column1:1!null
                │    ├── values
                │    │    ├── columns: column1:1!null
                │    │    └── (1,)
                │    └── filters
                │         └── column1:1 > 1
                └── NULL::INT8

build
SELECT (1, NULL::int) NOT IN (SELECT * FROM (VALUES (1, 1)) AS t(a, b) WHERE a > 1) AS r
----
project
 ├── columns: r:4
 ├── values
 │    └── ()
 └── projections
      └── not [as=r:4]
           └── any: eq
                ├── project
                │    ├── columns: column3:3!null
                │    ├── select
                │    │    ├── columns: column1:1!null column2:2!null
                │    │    ├── values
                │    │    │    ├── columns: column1:1!null column2:2!null
                │    │    │    └── (1, 1)
                │    │    └── filters
                │    │         └── column1:1 > 1
                │    └── projections
                │         └── (column1:1, column2:2) [as=column3:3]
                └── (1, NULL::INT8)

build
SELECT NULL::int NOT IN (SELECT * FROM (VALUES (1)) AS t(a) WHERE a > 1) AS r
----
project
 ├── columns: r:2
 ├── values
 │    └── ()
 └── projections
      └── not [as=r:2]
           └── any: eq
                ├── select
                │    ├── columns: column1:1!null
                │    ├── values
                │    │    ├── columns: column1:1!null
                │    │    └── (1,)
                │    └── filters
                │         └── column1:1 > 1
                └── NULL::INT8

build
SELECT (1, NULL::int) NOT IN (SELECT * FROM (VALUES (1, 1)) AS t(a, b) WHERE a > 1) AS r
----
project
 ├── columns: r:4
 ├── values
 │    └── ()
 └── projections
      └── not [as=r:4]
           └── any: eq
                ├── project
                │    ├── columns: column3:3!null
                │    ├── select
                │    │    ├── columns: column1:1!null column2:2!null
                │    │    ├── values
                │    │    │    ├── columns: column1:1!null column2:2!null
                │    │    │    └── (1, 1)
                │    │    └── filters
                │    │         └── column1:1 > 1
                │    └── projections
                │         └── (column1:1, column2:2) [as=column3:3]
                └── (1, NULL::INT8)

build
SELECT NULL::int NOT IN (SELECT * FROM (VALUES (1)) AS t(a) WHERE a > 1) AS r
----
project
 ├── columns: r:2
 ├── values
 │    └── ()
 └── projections
      └── not [as=r:2]
           └── any: eq
                ├── select
                │    ├── columns: column1:1!null
                │    ├── values
                │    │    ├── columns: column1:1!null
                │    │    └── (1,)
                │    └── filters
                │         └── column1:1 > 1
                └── NULL::INT8

build
SELECT (1, NULL::int) NOT IN (SELECT * FROM (VALUES (1, 1)) AS t(a, b) WHERE a > 1) AS r
----
project
 ├── columns: r:4
 ├── values
 │    └── ()
 └── projections
      └── not [as=r:4]
           └── any: eq
                ├── project
                │    ├── columns: column3:3!null
                │    ├── select
                │    │    ├── columns: column1:1!null column2:2!null
                │    │    ├── values
                │    │    │    ├── columns: column1:1!null column2:2!null
                │    │    │    └── (1, 1)
                │    │    └── filters
                │    │         └── column1:1 > 1
                │    └── projections
                │         └── (column1:1, column2:2) [as=column3:3]
                └── (1, NULL::INT8)

exec-ddl
CREATE TABLE a (x INT PRIMARY KEY, y FLOAT)
----

build
SELECT * FROM a
----
project
 ├── columns: x:1!null y:2
 └── scan a
      └── columns: x:1!null y:2 crdb_internal_mvcc_timestamp:3

build
SELECT * FROM a WHERE x > 10
----
project
 ├── columns: x:1!null y:2
 └── select
      ├── columns: x:1!null y:2 crdb_internal_mvcc_timestamp:3
      ├── scan a
      │    └── columns: x:1!null y:2 crdb_internal_mvcc_timestamp:3
      └── filters
           └── x:1 > 10

build
SELECT * FROM a WHERE (x > 10 AND (x < 20 AND x != 13))
----
project
 ├── columns: x:1!null y:2
 └── select
      ├── columns: x:1!null y:2 crdb_internal_mvcc_timestamp:3
      ├── scan a
      │    └── columns: x:1!null y:2 crdb_internal_mvcc_timestamp:3
      └── filters
           └── (x:1 > 10) AND ((x:1 < 20) AND (x:1 != 13))

build
SELECT * FROM a WHERE x IN (1, 2, 3)
----
project
 ├── columns: x:1!null y:2
 └── select
      ├── columns: x:1!null y:2 crdb_internal_mvcc_timestamp:3
      ├── scan a
      │    └── columns: x:1!null y:2 crdb_internal_mvcc_timestamp:3
      └── filters
           └── x:1 IN (1, 2, 3)

build
SELECT * FROM a AS A(X, Y)
----
project
 ├── columns: x:1!null y:2
 └── scan a
      └── columns: x:1!null y:2 crdb_internal_mvcc_timestamp:3

build
SELECT @1 AS r, @2 AS s FROM a
----
project
 ├── columns: r:4!null s:5
 ├── scan a
 │    └── columns: x:1!null y:2 crdb_internal_mvcc_timestamp:3
 └── projections
      ├── x:1 [as=r:4]
      └── y:2 [as=s:5]

build
SELECT * FROM a WHERE (x > 10)::bool
----
project
 ├── columns: x:1!null y:2
 └── select
      ├── columns: x:1!null y:2 crdb_internal_mvcc_timestamp:3
      ├── scan a
      │    └── columns: x:1!null y:2 crdb_internal_mvcc_timestamp:3
      └── filters
           └── x:1 > 10

build
SELECT * FROM a WHERE (x > 10)::INT[]
----
error (42846): invalid cast: bool -> int[]

build
SELECT * FROM a WHERE x = $1
----
project
 ├── columns: x:1!null y:2
 └── select
      ├── columns: x:1!null y:2 crdb_internal_mvcc_timestamp:3
      ├── scan a
      │    └── columns: x:1!null y:2 crdb_internal_mvcc_timestamp:3
      └── filters
           └── x:1 = $1

# This is slightly funky, because the AS OF SYSTEM TIME timestamp only gets
# interpreted by the executor, which obviously is not at play in these tests.
build
SELECT * FROM a AS OF SYSTEM TIME '-1000ms'
----
error (42601): AS OF SYSTEM TIME must be provided on a top-level statement

build
SELECT * FROM a AS t(a, b, c)
----
error (42P10): source "t" has 2 columns available but 3 columns specified

build
SELECT (x).e, (x).f, (x).g
FROM (
  SELECT ((1,'2',true) AS e,f,g) AS x
)
----
project
 ├── columns: e:2 f:3 g:4
 ├── project
 │    ├── columns: x:1!null
 │    ├── values
 │    │    └── ()
 │    └── projections
 │         └── ((1, '2', true) AS e, f, g) [as=x:1]
 └── projections
      ├── (x:1).e [as=e:2]
      ├── (x:1).f [as=f:3]
      └── (x:1).g [as=g:4]

build
SELECT (((x, y) AS x, y)).x FROM a
----
project
 ├── columns: x:1!null
 └── scan a
      └── columns: x:1!null y:2 crdb_internal_mvcc_timestamp:3


# Numeric Reference Tests
# Cockroach numeric references start after 53 for user tables.
# See opt/testutils/testcat/create_table.go:117 for more info on
# 53 as a magic number.

build
SELECT * FROM [53 AS t]
----
project
 ├── columns: a:1!null y:2 b:3 c:4
 └── scan tab53 [as=t]
      └── columns: a:1!null y:2 b:3 c:4 crdb_internal_mvcc_timestamp:5

build
SELECT * FROM [53(1) AS t]
----
scan tab53 [as=t]
 └── columns: a:1!null

build
SELECT * FROM [53(1,2) AS t]
----
scan tab53 [as=t]
 └── columns: a:1!null y:2

build
SELECT * FROM [53(4) AS t]
----
scan tab53 [as=t]
 └── columns: c:4

build
SELECT * FROM [53(5) AS t]
----
project
 └── scan tab53 [as=t]
      └── columns: crdb_internal_mvcc_timestamp:5

build
SELECT * FROM [53(2,4) AS t]
----
scan tab53 [as=t]
 └── columns: y:2 c:4

build
SELECT * FROM [53(2,3) AS t(col1,col2)]
----
scan tab53 [as=t]
 └── columns: col1:2 col2:3

build
SELECT * FROM [53() AS t]
----
error (42601): an explicit list of column IDs must include at least one column

# Test that hidden columns are not presented
build
SELECT * FROM [54 AS t]
----
project
 ├── columns: x:1 y:2
 └── scan tab54 [as=t]
      └── columns: x:1 y:2 rowid:3!null crdb_internal_mvcc_timestamp:4

# Verify that we force the given index.
build
SELECT * FROM [53 AS t]@[1]
----
project
 ├── columns: a:1!null y:2 b:3 c:4
 └── scan tab53 [as=t]
      ├── columns: a:1!null y:2 b:3 c:4 crdb_internal_mvcc_timestamp:5
      └── flags: force-index=primary

build
SELECT * FROM [53 AS t]@[2]
----
project
 ├── columns: a:1!null y:2 b:3 c:4
 └── scan tab53 [as=t]
      ├── columns: a:1!null y:2 b:3 c:4 crdb_internal_mvcc_timestamp:5
      └── flags: force-index=bc

# Test that hidden columns are not presented.
build
SELECT * FROM [54(1,3) AS t]
----
project
 ├── columns: x:1
 └── scan tab54 [as=t]
      └── columns: x:1 rowid:3!null

build
SELECT rowid FROM [54(3) as t]
----
scan tab54 [as=t]
 └── columns: rowid:3!null


# Test that we don't error out due to check constraints that involve unselected
# columns.
build
SELECT * FROM [55(1) as t(a)]
----
scan tab55 [as=t]
 ├── columns: a:1!null
 └── check constraint expressions
      └── (a:1 + b:2) < 10

# Test that we error out if we refer to a mutation column,
build
SELECT * FROM [56(1,3) AS t(a, b)]
----
error (42703): column [3] does not exist

build
SELECT * FROM [56(1,4) AS t(a, b)]
----
error (42703): column [4] does not exist

build
INSERT INTO [56(1,3) AS t(a,b)] VALUES (1,2)
----
error (42703): column [3] does not exist

# Regression test for #28388. Ensure that selecting from a table with no
# columns does not cause a panic.
exec-ddl
CREATE TABLE no_cols_table ()
----

build
SELECT * FROM no_cols_table
----
project
 └── scan no_cols_table
      └── columns: rowid:1!null crdb_internal_mvcc_timestamp:2

build
SELECT * FROM [54(3) as t]
----
project
 └── scan tab54 [as=t]
      └── columns: rowid:3!null

# Non-referenced CTE with mutation.
build
WITH cte AS (SELECT b FROM [INSERT INTO abc VALUES (1) RETURNING *] LIMIT 1) SELECT * FROM abc
----
with &1
 ├── columns: a:10!null b:11 c:12
 ├── insert abc
 │    ├── columns: abc.a:1!null abc.b:2 abc.c:3
 │    ├── insert-mapping:
 │    │    ├── column1:5 => abc.a:1
 │    │    ├── column6:6 => abc.b:2
 │    │    └── column6:6 => abc.c:3
 │    └── project
 │         ├── columns: column6:6 column1:5!null
 │         ├── values
 │         │    ├── columns: column1:5!null
 │         │    └── (1,)
 │         └── projections
 │              └── NULL::INT8 [as=column6:6]
 └── with &2 (cte)
      ├── columns: abc.a:10!null abc.b:11 abc.c:12
      ├── limit
      │    ├── columns: b:8
      │    ├── project
      │    │    ├── columns: b:8
      │    │    ├── limit hint: 1.00
      │    │    └── with-scan &1
      │    │         ├── columns: a:7!null b:8 c:9
      │    │         ├── mapping:
      │    │         │    ├──  abc.a:1 => a:7
      │    │         │    ├──  abc.b:2 => b:8
      │    │         │    └──  abc.c:3 => c:9
      │    │         └── limit hint: 1.00
      │    └── 1
      └── project
           ├── columns: abc.a:10!null abc.b:11 abc.c:12
           └── scan abc
                └── columns: abc.a:10!null abc.b:11 abc.c:12 crdb_internal_mvcc_timestamp:13

# Tests for the square bracket syntax.
build
SELECT * FROM [SELECT * FROM abc]
----
with &1
 ├── columns: a:5!null b:6 c:7
 ├── project
 │    ├── columns: abc.a:1!null abc.b:2 abc.c:3
 │    └── scan abc
 │         └── columns: abc.a:1!null abc.b:2 abc.c:3 crdb_internal_mvcc_timestamp:4
 └── with-scan &1
      ├── columns: a:5!null b:6 c:7
      └── mapping:
           ├──  abc.a:1 => a:5
           ├──  abc.b:2 => b:6
           └──  abc.c:3 => c:7

build
SELECT * FROM [INSERT INTO abc VALUES (1, 2, 3) RETURNING a]
----
with &1
 ├── columns: a:8!null
 ├── project
 │    ├── columns: abc.a:1!null
 │    └── insert abc
 │         ├── columns: abc.a:1!null b:2!null c:3!null
 │         ├── insert-mapping:
 │         │    ├── column1:5 => abc.a:1
 │         │    ├── column2:6 => b:2
 │         │    └── column3:7 => c:3
 │         └── values
 │              ├── columns: column1:5!null column2:6!null column3:7!null
 │              └── (1, 2, 3)
 └── with-scan &1
      ├── columns: a:8!null
      └── mapping:
           └──  abc.a:1 => a:8

# Statement inside brackets cannot refer to outer column.
build
SELECT a, b FROM abc WHERE b = (SELECT x FROM [SELECT * FROM xyzw WHERE x = a])
----
error (42703): column "a" does not exist

build
SELECT a, b FROM abc, LATERAL (SELECT * FROM [SELECT * FROM xyzw WHERE a = x])
----
error (42703): column "a" does not exist

# Statement inside brackets cannot refer to outer CTEs.
build
WITH cte AS (VALUES (1), (2))
SELECT * FROM (VALUES (3)) AS t (x), [SELECT * FROM cte]
----
error (42P01): no data source matches prefix: "cte"

# Projection list should still be able to refer to outer columns or CTEs.
build
WITH cte AS (SELECT 1) SELECT 1 + (SELECT * FROM cte) FROM [SELECT * from xyzw]
----
with &1 (cte)
 ├── columns: "?column?":12
 ├── project
 │    ├── columns: "?column?":1!null
 │    ├── values
 │    │    └── ()
 │    └── projections
 │         └── 1 [as="?column?":1]
 └── with &2
      ├── columns: "?column?":12
      ├── project
      │    ├── columns: xyzw.x:2!null xyzw.y:3 xyzw.z:4 xyzw.w:5
      │    └── scan xyzw
      │         └── columns: xyzw.x:2!null xyzw.y:3 xyzw.z:4 xyzw.w:5 crdb_internal_mvcc_timestamp:6
      └── project
           ├── columns: "?column?":12
           ├── with-scan &2
           │    ├── columns: x:7!null y:8 z:9 w:10
           │    └── mapping:
           │         ├──  xyzw.x:2 => x:7
           │         ├──  xyzw.y:3 => y:8
           │         ├──  xyzw.z:4 => z:9
           │         └──  xyzw.w:5 => w:10
           └── projections
                └── plus [as="?column?":12]
                     ├── 1
                     └── subquery
                          └── max1-row
                               ├── columns: "?column?":11!null
                               └── with-scan &1 (cte)
                                    ├── columns: "?column?":11!null
                                    └── mapping:
                                         └──  "?column?":1 => "?column?":11

build
SELECT a, (SELECT a+x FROM [SELECT * from xyzw]) FROM abc
----
with &1
 ├── columns: a:1!null "?column?":15
 ├── project
 │    ├── columns: xyzw.x:5!null xyzw.y:6 xyzw.z:7 xyzw.w:8
 │    └── scan xyzw
 │         └── columns: xyzw.x:5!null xyzw.y:6 xyzw.z:7 xyzw.w:8 xyzw.crdb_internal_mvcc_timestamp:9
 └── project
      ├── columns: "?column?":15 a:1!null
      ├── scan abc
      │    └── columns: a:1!null b:2 c:3 abc.crdb_internal_mvcc_timestamp:4
      └── projections
           └── subquery [as="?column?":15]
                └── max1-row
                     ├── columns: "?column?":14
                     └── project
                          ├── columns: "?column?":14
                          ├── with-scan &1
                          │    ├── columns: x:10!null y:11 z:12 w:13
                          │    └── mapping:
                          │         ├──  xyzw.x:5 => x:10
                          │         ├──  xyzw.y:6 => y:11
                          │         ├──  xyzw.z:7 => z:12
                          │         └──  xyzw.w:8 => w:13
                          └── projections
                               └── a:1 + x:10 [as="?column?":14]

exec-ddl
CREATE TABLE inaccessible (
    k INT PRIMARY KEY,
    "v:inaccessible" INT
)
----

build
SELECT * FROM inaccessible
----
project
 ├── columns: k:1!null
 └── scan inaccessible
      └── columns: k:1!null v:2 crdb_internal_mvcc_timestamp:3

build
SELECT v FROM inaccessible
----
error (42703): column "v" does not exist

build
INSERT INTO inaccessible VALUES (1)
----
insert inaccessible
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:4 => k:1
 │    └── column5:5 => v:2
 └── project
      ├── columns: column5:5 column1:4!null
      ├── values
      │    ├── columns: column1:4!null
      │    └── (1,)
      └── projections
           └── NULL::INT8 [as=column5:5]

build
INSERT INTO inaccessible VALUES (1) RETURNING v
----
error (42703): column "v" does not exist

build
INSERT INTO inaccessible(k, v) VALUES (1, 1)
----
error (42703): column "v" does not exist

build
UPSERT INTO inaccessible(k, v) VALUES (1, 1)
----
error (42703): column "v" does not exist

build
UPDATE inaccessible SET k=k+1
----
update inaccessible
 ├── columns: <none>
 ├── fetch columns: k:4 v:5
 ├── update-mapping:
 │    └── k_new:7 => k:1
 └── project
      ├── columns: k_new:7!null k:4!null v:5 crdb_internal_mvcc_timestamp:6
      ├── scan inaccessible
      │    └── columns: k:4!null v:5 crdb_internal_mvcc_timestamp:6
      └── projections
           └── k:4 + 1 [as=k_new:7]

build
UPDATE inaccessible SET k=k+1 WHERE v=1
----
error (42703): column "v" does not exist

build
UPDATE inaccessible SET k=v+1
----
error (42703): column "v" does not exist

build
UPDATE inaccessible SET v=1
----
error (42703): column "v" does not exist

build
DELETE FROM inaccessible WHERE v=1
----
error (42703): column "v" does not exist

build
DELETE FROM inaccessible RETURNING v
----
error (42703): column "v" does not exist
