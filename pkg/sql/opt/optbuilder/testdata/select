# tests adapted from logictest -- select

# SELECT with no table.

build
SELECT 1
----
project
 ├── columns: column1:1(int)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── const: 1 [type=int]

build
SELECT NULL
----
project
 ├── columns: column1:1(unknown)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── null [type=unknown]

build
SELECT 1+1 AS two, 2+2 AS four
----
project
 ├── columns: two:1(int) four:2(int)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      ├── const: 2 [type=int]
      └── const: 4 [type=int]

# SELECT expression tests.

exec-ddl
CREATE TABLE abc (a INT PRIMARY KEY, b INT, c INT)
----
TABLE abc
 ├── a int not null
 ├── b int
 ├── c int
 └── INDEX primary
      └── a int not null

build
SELECT * FROM abc WHERE 'hello'
----
error: could not parse "hello" as type bool: invalid bool value

build
SELECT * FROM abc
----
scan abc
 └── columns: a:1(int!null) b:2(int) c:3(int)

build
SELECT NULL, * FROM abc
----
project
 ├── columns: column4:4(unknown) a:1(int!null) b:2(int) c:3(int)
 ├── scan abc
 │    └── columns: abc.a:1(int!null) abc.b:2(int) abc.c:3(int)
 └── projections
      ├── null [type=unknown]
      ├── variable: abc.a [type=int]
      ├── variable: abc.b [type=int]
      └── variable: abc.c [type=int]


# synonym for SELECT * FROM abc
build
TABLE abc
----
scan abc
 └── columns: a:1(int!null) b:2(int) c:3(int)

build
SELECT * FROM abc WHERE NULL
----
select
 ├── columns: a:1(int!null) b:2(int) c:3(int)
 ├── scan abc
 │    └── columns: abc.a:1(int!null) abc.b:2(int) abc.c:3(int)
 └── null [type=unknown]

build
SELECT * FROM abc WHERE a = NULL
----
select
 ├── columns: a:1(int!null) b:2(int) c:3(int)
 ├── scan abc
 │    └── columns: abc.a:1(int!null) abc.b:2(int) abc.c:3(int)
 └── null [type=unknown]

build
SELECT *,* FROM abc
----
project
 ├── columns: a:1(int!null) b:2(int) c:3(int) a:1(int!null) b:2(int) c:3(int)
 ├── scan abc
 │    └── columns: abc.a:1(int!null) abc.b:2(int) abc.c:3(int)
 └── projections
      ├── variable: abc.a [type=int]
      ├── variable: abc.b [type=int]
      └── variable: abc.c [type=int]

build
SELECT a,a,a,a FROM abc
----
project
 ├── columns: a:1(int!null) a:1(int!null) a:1(int!null) a:1(int!null)
 ├── scan abc
 │    └── columns: abc.a:1(int!null) abc.b:2(int) abc.c:3(int)
 └── projections
      └── variable: abc.a [type=int]

build
SELECT a,c FROM abc
----
project
 ├── columns: a:1(int!null) c:3(int)
 ├── scan abc
 │    └── columns: abc.a:1(int!null) abc.b:2(int) abc.c:3(int)
 └── projections
      ├── variable: abc.a [type=int]
      └── variable: abc.c [type=int]

build
SELECT a+b+c AS foo FROM abc
----
project
 ├── columns: foo:4(int)
 ├── scan abc
 │    └── columns: abc.a:1(int!null) abc.b:2(int) abc.c:3(int)
 └── projections
      └── plus [type=int]
           ├── plus [type=int]
           │    ├── variable: abc.a [type=int]
           │    └── variable: abc.b [type=int]
           └── variable: abc.c [type=int]

build allow-unsupported
SELECT a,b FROM abc WHERE CASE WHEN a != 0 THEN b/a > 1.5 ELSE false END
----
project
 ├── columns: a:1(int!null) b:2(int)
 ├── select
 │    ├── columns: abc.a:1(int!null) abc.b:2(int) abc.c:3(int)
 │    ├── scan abc
 │    │    └── columns: abc.a:1(int!null) abc.b:2(int) abc.c:3(int)
 │    └── case [type=bool]
 │         ├── true [type=bool]
 │         ├── when [type=bool]
 │         │    ├── ne [type=bool]
 │         │    │    ├── variable: abc.a [type=int]
 │         │    │    └── const: 0 [type=int]
 │         │    └── gt [type=bool]
 │         │         ├── div [type=decimal]
 │         │         │    ├── variable: abc.b [type=int]
 │         │         │    └── variable: abc.a [type=int]
 │         │         └── const: 1.5 [type=decimal]
 │         └── false [type=bool]
 └── projections
      ├── variable: abc.a [type=int]
      └── variable: abc.b [type=int]

# SELECT of NULL value.

exec-ddl
CREATE TABLE kv (k CHAR PRIMARY KEY, v CHAR)
----
TABLE kv
 ├── k string not null
 ├── v string
 └── INDEX primary
      └── k string not null

build
SELECT * FROM kv
----
scan kv
 └── columns: k:1(string!null) v:2(string)

build
SELECT k,v FROM kv
----
scan kv
 └── columns: k:1(string!null) v:2(string)

build
SELECT v||'foo' FROM kv
----
project
 ├── columns: column3:3(string)
 ├── scan kv
 │    └── columns: kv.k:1(string!null) kv.v:2(string)
 └── projections
      └── concat [type=string]
           ├── variable: kv.v [type=string]
           └── const: 'foo' [type=string]

build
SELECT LOWER(v) FROM kv
----
project
 ├── columns: column3:3(string)
 ├── scan kv
 │    └── columns: kv.k:1(string!null) kv.v:2(string)
 └── projections
      └── function: lower [type=string]
           └── variable: kv.v [type=string]

build
SELECT k FROM kv
----
project
 ├── columns: k:1(string!null)
 ├── scan kv
 │    └── columns: kv.k:1(string!null) kv.v:2(string)
 └── projections
      └── variable: kv.k [type=string]

build
SELECT kv.K,KV.v FROM kv
----
scan kv
 └── columns: k:1(string!null) v:2(string)

build
SELECT kv.* FROM kv
----
scan kv
 └── columns: k:1(string!null) v:2(string)

build
SELECT (kv.*) FROM kv
----
project
 ├── columns: column3:3(tuple{string, string})
 ├── scan kv
 │    └── columns: kv.k:1(string!null) kv.v:2(string)
 └── projections
      └── tuple [type=tuple{string, string}]
           ├── variable: kv.k [type=string]
           └── variable: kv.v [type=string]

build
SELECT foo.* FROM kv
----
error: no data source named "foo"

build
SELECT *
----
error: cannot use "*" without a FROM clause

build
SELECT kv.* AS foo FROM kv
----
error: "kv.*" cannot be aliased

build
SELECT bar.kv.* FROM kv
----
error: no data source named "bar.kv"

# Don't panic with invalid names (#8024)
build
SELECT kv.*[1] FROM kv
----
error: cannot subscript type tuple{string, string} because it is not an array

build
SELECT ARRAY[]
----
error: cannot determine type of empty array. Consider annotating with the desired type, for example ARRAY[]:::int[]

build
SELECT FOO.k FROM kv AS foo WHERE foo.k = 'a'
----
project
 ├── columns: k:1(string!null)
 ├── select
 │    ├── columns: kv.k:1(string!null) kv.v:2(string)
 │    ├── scan kv
 │    │    └── columns: kv.k:1(string!null) kv.v:2(string)
 │    └── eq [type=bool]
 │         ├── variable: kv.k [type=string]
 │         └── const: 'a' [type=string]
 └── projections
      └── variable: kv.k [type=string]

build
SELECT "foo"."v" FROM kv AS foo WHERE foo.k = 'a'
----
project
 ├── columns: v:2(string)
 ├── select
 │    ├── columns: kv.k:1(string!null) kv.v:2(string)
 │    ├── scan kv
 │    │    └── columns: kv.k:1(string!null) kv.v:2(string)
 │    └── eq [type=bool]
 │         ├── variable: kv.k [type=string]
 │         └── const: 'a' [type=string]
 └── projections
      └── variable: kv.v [type=string]

exec-ddl
CREATE TABLE kw ("from" INT PRIMARY KEY)
----
TABLE kw
 ├── from int not null
 └── INDEX primary
      └── from int not null

build
SELECT *, "from", kw."from" FROM kw
----
project
 ├── columns: from:1(int!null) from:1(int!null) from:1(int!null)
 ├── scan kw
 │    └── columns: kw.from:1(int!null)
 └── projections
      └── variable: kw.from [type=int]

exec-ddl
CREATE TABLE xyzw (
  x INT PRIMARY KEY,
  y INT,
  z INT,
  w INT,
  INDEX foo (z, y)
)
----
TABLE xyzw
 ├── x int not null
 ├── y int
 ├── z int
 ├── w int
 ├── INDEX primary
 │    └── x int not null
 └── INDEX foo
      ├── z int
      ├── y int
      └── x int not null

# TODO(rytaft): Fix error message:
# error: name "x" is not defined
build
SELECT * FROM xyzw LIMIT x
----
error: column name "x" not found

# TODO(rytaft): Fix error message:
# error: name "y" is not defined
build
SELECT * FROM xyzw OFFSET 1 + y
----
error: column name "y" not found

build
SELECT * FROM xyzw LIMIT 3.3
----
error: argument of LIMIT must be type int, not type decimal

build
SELECT * FROM xyzw ORDER BY 1 LIMIT '1'
----
limit
 ├── columns: x:1(int!null) y:2(int) z:3(int) w:4(int)
 ├── ordering: +1
 ├── scan xyzw
 │    ├── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 │    └── ordering: +1
 └── const: 1 [type=int]

build
SELECT * FROM xyzw OFFSET 1.5
----
error: argument of OFFSET must be type int, not type decimal

# At execution time, this will cause the error: negative value for LIMIT
build
SELECT * FROM xyzw LIMIT -100
----
limit
 ├── columns: x:1(int!null) y:2(int) z:3(int) w:4(int)
 ├── scan xyzw
 │    └── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 └── const: -100 [type=int]

# At execution time, this will cause the error: negative value for OFFSET
build
SELECT * FROM xyzw OFFSET -100
----
offset
 ├── columns: x:1(int!null) y:2(int) z:3(int) w:4(int)
 ├── scan xyzw
 │    └── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 └── const: -100 [type=int]

build
SELECT * FROM xyzw ORDER BY x OFFSET 1 + 0.0
----
offset
 ├── columns: x:1(int!null) y:2(int) z:3(int) w:4(int)
 ├── ordering: +1
 ├── scan xyzw
 │    ├── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 │    └── ordering: +1
 └── const: 1 [type=int]

build
SELECT (x,y) FROM xyzw
----
project
 ├── columns: column5:5(tuple{int, int})
 ├── scan xyzw
 │    └── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 └── projections
      └── tuple [type=tuple{int, int}]
           ├── variable: xyzw.x [type=int]
           └── variable: xyzw.y [type=int]

build
SELECT * FROM xyzw LIMIT 0
----
limit
 ├── columns: x:1(int!null) y:2(int) z:3(int) w:4(int)
 ├── scan xyzw
 │    └── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 └── const: 0 [type=int]

build
SELECT * FROM xyzw ORDER BY x LIMIT 1
----
limit
 ├── columns: x:1(int!null) y:2(int) z:3(int) w:4(int)
 ├── ordering: +1
 ├── scan xyzw
 │    ├── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 │    └── ordering: +1
 └── const: 1 [type=int]

build
SELECT * FROM xyzw ORDER BY x LIMIT 1 OFFSET 1
----
limit
 ├── columns: x:1(int!null) y:2(int) z:3(int) w:4(int)
 ├── ordering: +1
 ├── offset
 │    ├── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 │    ├── ordering: +1
 │    ├── scan xyzw
 │    │    ├── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 │    │    └── ordering: +1
 │    └── const: 1 [type=int]
 └── const: 1 [type=int]

build
SELECT * FROM xyzw ORDER BY y OFFSET 1
----
offset
 ├── columns: x:1(int!null) y:2(int) z:3(int) w:4(int)
 ├── ordering: +2
 ├── sort
 │    ├── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 │    ├── ordering: +2
 │    └── scan xyzw
 │         └── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 └── const: 1 [type=int]

build
SELECT * FROM xyzw ORDER BY y OFFSET 1 LIMIT 1
----
limit
 ├── columns: x:1(int!null) y:2(int) z:3(int) w:4(int)
 ├── ordering: +2
 ├── offset
 │    ├── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 │    ├── ordering: +2
 │    ├── sort
 │    │    ├── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 │    │    ├── ordering: +2
 │    │    └── scan xyzw
 │    │         └── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 │    └── const: 1 [type=int]
 └── const: 1 [type=int]

build
SELECT * FROM xyzw LIMIT (RANDOM() * 0.0)::int OFFSET (RANDOM() * 0.0)::int
----
limit
 ├── columns: x:1(int!null) y:2(int) z:3(int) w:4(int)
 ├── offset
 │    ├── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 │    ├── scan xyzw
 │    │    └── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 │    └── cast: int [type=int]
 │         └── mult [type=float]
 │              ├── function: random [type=float]
 │              └── const: 0.0 [type=float]
 └── cast: int [type=int]
      └── mult [type=float]
           ├── function: random [type=float]
           └── const: 0.0 [type=float]

build
((SELECT x FROM xyzw LIMIT 1)) LIMIT 1
----
error: multiple LIMIT clauses not allowed

build
SELECT * FROM (SELECT * FROM xyzw LIMIT 5) OFFSET 5
----
offset
 ├── columns: x:1(int!null) y:2(int) z:3(int) w:4(int)
 ├── limit
 │    ├── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 │    ├── scan xyzw
 │    │    └── columns: xyzw.x:1(int!null) xyzw.y:2(int) xyzw.z:3(int) xyzw.w:4(int)
 │    └── const: 5 [type=int]
 └── const: 5 [type=int]

exec-ddl
CREATE TABLE boolean_table (
  id INTEGER PRIMARY KEY NOT NULL,
  value BOOLEAN
)
----
TABLE boolean_table
 ├── id int not null
 ├── value bool
 └── INDEX primary
      └── id int not null

build
SELECT value FROM boolean_table
----
project
 ├── columns: value:2(bool)
 ├── scan boolean_table
 │    └── columns: boolean_table.id:1(int!null) boolean_table.value:2(bool)
 └── projections
      └── variable: boolean_table.value [type=bool]

build allow-unsupported
SELECT CASE WHEN NULL THEN 1 ELSE 2 END
----
project
 ├── columns: column1:1(int)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── case [type=int]
           ├── true [type=bool]
           ├── when [type=int]
           │    ├── null [type=unknown]
           │    └── const: 1 [type=int]
           └── const: 2 [type=int]

build
SELECT 0 * b, b % 1, 0 % b from abc
----
project
 ├── columns: column4:4(int) column5:5(int) column6:6(int)
 ├── scan abc
 │    └── columns: abc.a:1(int!null) abc.b:2(int) abc.c:3(int)
 └── projections
      ├── mult [type=int]
      │    ├── const: 0 [type=int]
      │    └── variable: abc.b [type=int]
      ├── mod [type=int]
      │    ├── variable: abc.b [type=int]
      │    └── const: 1 [type=int]
      └── mod [type=int]
           ├── const: 0 [type=int]
           └── variable: abc.b [type=int]

# Regression tests for #22670.
build
SELECT 1 IN (1, 2)
----
project
 ├── columns: column1:1(bool)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── in [type=bool]
           ├── const: 1 [type=int]
           └── tuple [type=tuple{int, int}]
                ├── const: 1 [type=int]
                └── const: 2 [type=int]

build
SELECT NULL IN (1, 2)
----
project
 ├── columns: column1:1(bool)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── in [type=bool]
           ├── null [type=unknown]
           └── tuple [type=tuple{int, int}]
                ├── const: 1 [type=int]
                └── const: 2 [type=int]

build
SELECT 1 IN (NULL, 2)
----
project
 ├── columns: column1:1(bool)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── in [type=bool]
           ├── const: 1 [type=int]
           └── tuple [type=tuple{unknown, int}]
                ├── null [type=unknown]
                └── const: 2 [type=int]

build
SELECT (1, NULL) IN ((1, 1))
----
project
 ├── columns: column1:1(bool)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── in [type=bool]
           ├── tuple [type=tuple{int, unknown}]
           │    ├── const: 1 [type=int]
           │    └── null [type=unknown]
           └── tuple [type=tuple{tuple{int, int}}]
                └── tuple [type=tuple{int, int}]
                     ├── const: 1 [type=int]
                     └── const: 1 [type=int]

# Tests with a tuple coming from a subquery.
build
SELECT NULL::int IN (SELECT * FROM (VALUES (1)) AS t(a))
----
project
 ├── columns: column3:3(bool)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── any [type=bool]
           └── project
                ├── columns: column2:2(bool)
                ├── values
                │    ├── columns: column1:1(int)
                │    └── tuple [type=tuple{int}]
                │         └── const: 1 [type=int]
                └── projections
                     └── eq [type=bool]
                          ├── cast: int [type=int]
                          │    └── null [type=unknown]
                          └── variable: column1 [type=int]

build
SELECT (1, NULL::int) IN (SELECT * FROM (VALUES (1, 1)) AS t(a, b))
----
project
 ├── columns: column5:5(bool)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── any [type=bool]
           └── project
                ├── columns: column4:4(bool)
                ├── project
                │    ├── columns: column3:3(tuple{int, int})
                │    ├── values
                │    │    ├── columns: column1:1(int) column2:2(int)
                │    │    └── tuple [type=tuple{int, int}]
                │    │         ├── const: 1 [type=int]
                │    │         └── const: 1 [type=int]
                │    └── projections
                │         └── tuple [type=tuple{int, int}]
                │              ├── variable: column1 [type=int]
                │              └── variable: column2 [type=int]
                └── projections
                     └── eq [type=bool]
                          ├── tuple [type=tuple{int, int}]
                          │    ├── const: 1 [type=int]
                          │    └── cast: int [type=int]
                          │         └── null [type=unknown]
                          └── variable: column3 [type=tuple{int, int}]

build
SELECT NULL::int NOT IN (SELECT * FROM (VALUES (1)) AS t(a))
----
project
 ├── columns: column3:3(bool)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── not [type=bool]
           └── any [type=bool]
                └── project
                     ├── columns: column2:2(bool)
                     ├── values
                     │    ├── columns: column1:1(int)
                     │    └── tuple [type=tuple{int}]
                     │         └── const: 1 [type=int]
                     └── projections
                          └── eq [type=bool]
                               ├── cast: int [type=int]
                               │    └── null [type=unknown]
                               └── variable: column1 [type=int]

build
SELECT (1, NULL::int) NOT IN (SELECT * FROM (VALUES (1, 1)) AS t(a, b))
----
project
 ├── columns: column5:5(bool)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── not [type=bool]
           └── any [type=bool]
                └── project
                     ├── columns: column4:4(bool)
                     ├── project
                     │    ├── columns: column3:3(tuple{int, int})
                     │    ├── values
                     │    │    ├── columns: column1:1(int) column2:2(int)
                     │    │    └── tuple [type=tuple{int, int}]
                     │    │         ├── const: 1 [type=int]
                     │    │         └── const: 1 [type=int]
                     │    └── projections
                     │         └── tuple [type=tuple{int, int}]
                     │              ├── variable: column1 [type=int]
                     │              └── variable: column2 [type=int]
                     └── projections
                          └── eq [type=bool]
                               ├── tuple [type=tuple{int, int}]
                               │    ├── const: 1 [type=int]
                               │    └── cast: int [type=int]
                               │         └── null [type=unknown]
                               └── variable: column3 [type=tuple{int, int}]

# Tests with an empty IN tuple.
build
SELECT NULL::int IN (SELECT * FROM (VALUES (1)) AS t(a) WHERE a > 1)
----
project
 ├── columns: column3:3(bool)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── any [type=bool]
           └── project
                ├── columns: column2:2(bool)
                ├── select
                │    ├── columns: column1:1(int)
                │    ├── values
                │    │    ├── columns: column1:1(int)
                │    │    └── tuple [type=tuple{int}]
                │    │         └── const: 1 [type=int]
                │    └── gt [type=bool]
                │         ├── variable: column1 [type=int]
                │         └── const: 1 [type=int]
                └── projections
                     └── eq [type=bool]
                          ├── cast: int [type=int]
                          │    └── null [type=unknown]
                          └── variable: column1 [type=int]

build
SELECT (1, NULL::int) IN (SELECT * FROM (VALUES (1, 1)) AS t(a, b) WHERE a > 1)
----
project
 ├── columns: column5:5(bool)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── any [type=bool]
           └── project
                ├── columns: column4:4(bool)
                ├── project
                │    ├── columns: column3:3(tuple{int, int})
                │    ├── select
                │    │    ├── columns: column1:1(int) column2:2(int)
                │    │    ├── values
                │    │    │    ├── columns: column1:1(int) column2:2(int)
                │    │    │    └── tuple [type=tuple{int, int}]
                │    │    │         ├── const: 1 [type=int]
                │    │    │         └── const: 1 [type=int]
                │    │    └── gt [type=bool]
                │    │         ├── variable: column1 [type=int]
                │    │         └── const: 1 [type=int]
                │    └── projections
                │         └── tuple [type=tuple{int, int}]
                │              ├── variable: column1 [type=int]
                │              └── variable: column2 [type=int]
                └── projections
                     └── eq [type=bool]
                          ├── tuple [type=tuple{int, int}]
                          │    ├── const: 1 [type=int]
                          │    └── cast: int [type=int]
                          │         └── null [type=unknown]
                          └── variable: column3 [type=tuple{int, int}]

build
SELECT NULL::int NOT IN (SELECT * FROM (VALUES (1)) AS t(a) WHERE a > 1)
----
project
 ├── columns: column3:3(bool)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── not [type=bool]
           └── any [type=bool]
                └── project
                     ├── columns: column2:2(bool)
                     ├── select
                     │    ├── columns: column1:1(int)
                     │    ├── values
                     │    │    ├── columns: column1:1(int)
                     │    │    └── tuple [type=tuple{int}]
                     │    │         └── const: 1 [type=int]
                     │    └── gt [type=bool]
                     │         ├── variable: column1 [type=int]
                     │         └── const: 1 [type=int]
                     └── projections
                          └── eq [type=bool]
                               ├── cast: int [type=int]
                               │    └── null [type=unknown]
                               └── variable: column1 [type=int]

build
SELECT (1, NULL::int) NOT IN (SELECT * FROM (VALUES (1, 1)) AS t(a, b) WHERE a > 1)
----
project
 ├── columns: column5:5(bool)
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── not [type=bool]
           └── any [type=bool]
                └── project
                     ├── columns: column4:4(bool)
                     ├── project
                     │    ├── columns: column3:3(tuple{int, int})
                     │    ├── select
                     │    │    ├── columns: column1:1(int) column2:2(int)
                     │    │    ├── values
                     │    │    │    ├── columns: column1:1(int) column2:2(int)
                     │    │    │    └── tuple [type=tuple{int, int}]
                     │    │    │         ├── const: 1 [type=int]
                     │    │    │         └── const: 1 [type=int]
                     │    │    └── gt [type=bool]
                     │    │         ├── variable: column1 [type=int]
                     │    │         └── const: 1 [type=int]
                     │    └── projections
                     │         └── tuple [type=tuple{int, int}]
                     │              ├── variable: column1 [type=int]
                     │              └── variable: column2 [type=int]
                     └── projections
                          └── eq [type=bool]
                               ├── tuple [type=tuple{int, int}]
                               │    ├── const: 1 [type=int]
                               │    └── cast: int [type=int]
                               │         └── null [type=unknown]
                               └── variable: column3 [type=tuple{int, int}]

exec-ddl
CREATE TABLE t.a (x INT PRIMARY KEY, y FLOAT)
----
TABLE a
 ├── x int not null
 ├── y float
 └── INDEX primary
      └── x int not null

build
SELECT * FROM t.a
----
scan a
 └── columns: x:1(int!null) y:2(float)

build
SELECT * FROM t.a WHERE x > 10
----
select
 ├── columns: x:1(int!null) y:2(float)
 ├── scan a
 │    └── columns: a.x:1(int!null) a.y:2(float)
 └── gt [type=bool]
      ├── variable: a.x [type=int]
      └── const: 10 [type=int]

build
SELECT * FROM t.a WHERE (x > 10 AND (x < 20 AND x != 13))
----
select
 ├── columns: x:1(int!null) y:2(float)
 ├── scan a
 │    └── columns: a.x:1(int!null) a.y:2(float)
 └── and [type=bool]
      ├── gt [type=bool]
      │    ├── variable: a.x [type=int]
      │    └── const: 10 [type=int]
      └── and [type=bool]
           ├── lt [type=bool]
           │    ├── variable: a.x [type=int]
           │    └── const: 20 [type=int]
           └── ne [type=bool]
                ├── variable: a.x [type=int]
                └── const: 13 [type=int]

build
SELECT * FROM t.a WHERE x IN (1, 2, 3)
----
select
 ├── columns: x:1(int!null) y:2(float)
 ├── scan a
 │    └── columns: a.x:1(int!null) a.y:2(float)
 └── in [type=bool]
      ├── variable: a.x [type=int]
      └── tuple [type=tuple{int, int, int}]
           ├── const: 1 [type=int]
           ├── const: 2 [type=int]
           └── const: 3 [type=int]

build
SELECT * FROM t.a AS A(X, Y)
----
scan a
 └── columns: x:1(int!null) y:2(float)

build
SELECT @1, @2 FROM t.a
----
project
 ├── columns: column3:3(int) column4:4(float)
 ├── scan a
 │    └── columns: a.x:1(int!null) a.y:2(float)
 └── projections
      ├── variable: a.x [type=int]
      └── variable: a.y [type=float]

build
SELECT * FROM t.a WHERE (x > 10)::bool
----
select
 ├── columns: x:1(int!null) y:2(float)
 ├── scan a
 │    └── columns: a.x:1(int!null) a.y:2(float)
 └── cast: bool [type=bool]
      └── gt [type=bool]
           ├── variable: a.x [type=int]
           └── const: 10 [type=int]

build
SELECT * FROM t.a WHERE (x > 10)::INT[]
----
error: invalid cast: bool -> INT[]
