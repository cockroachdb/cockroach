exec-ddl
CREATE TABLE parent (p INT PRIMARY KEY)
----

exec-ddl
CREATE TABLE child (c INT PRIMARY KEY, p INT NOT NULL REFERENCES parent(p) ON UPDATE CASCADE)
----

build-cascades
UPDATE parent SET p = p * 10 WHERE p > 1
----
root
 ├── update parent
 │    ├── columns: <none>
 │    ├── fetch columns: p:4
 │    ├── update-mapping:
 │    │    └── p_new:7 => p:1
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk_p_ref_parent
 │    └── project
 │         ├── columns: p_new:7!null p:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
 │         ├── select
 │         │    ├── columns: p:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
 │         │    ├── scan parent
 │         │    │    └── columns: p:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
 │         │    └── filters
 │         │         └── p:4 > 1
 │         └── projections
 │              └── p:4 * 10 [as=p_new:7]
 └── cascade
      └── update child
           ├── columns: <none>
           ├── fetch columns: c:12 child.p:13
           ├── update-mapping:
           │    └── p_new:17 => child.p:9
           ├── input binding: &2
           ├── inner-join (hash)
           │    ├── columns: c:12!null child.p:13!null p:16!null p_new:17!null
           │    ├── scan child
           │    │    └── columns: c:12!null child.p:13!null
           │    ├── select
           │    │    ├── columns: p:16!null p_new:17!null
           │    │    ├── with-scan &1
           │    │    │    ├── columns: p:16!null p_new:17!null
           │    │    │    └── mapping:
           │    │    │         ├──  parent.p:4 => p:16
           │    │    │         └──  p_new:7 => p_new:17
           │    │    └── filters
           │    │         └── p:16 IS DISTINCT FROM p_new:17
           │    └── filters
           │         └── child.p:13 = p:16
           └── f-k-checks
                └── f-k-checks-item: child(p) -> parent(p)
                     └── anti-join (hash)
                          ├── columns: p:18!null
                          ├── with-scan &2
                          │    ├── columns: p:18!null
                          │    └── mapping:
                          │         └──  p_new:17 => p:18
                          ├── scan parent
                          │    └── columns: parent.p:19!null
                          └── filters
                               └── p:18 = parent.p:19

exec-ddl
CREATE TABLE parent_multi (
  pk INT PRIMARY KEY,
  p INT, q INT,
  UNIQUE (p, q),
  FAMILY (pk),
  FAMILY (p),
  FAMILY (q)
)
----

exec-ddl
CREATE TABLE child_multi (
  c INT PRIMARY KEY,
  p INT, q INT,
  UNIQUE (c, q),
  CONSTRAINT fk FOREIGN KEY (p, q) REFERENCES parent_multi(p, q) ON UPDATE CASCADE 
)
----

build-cascades
UPDATE parent_multi SET p = p * 10, q = q + 1 WHERE pk > 1
----
root
 ├── update parent_multi
 │    ├── columns: <none>
 │    ├── fetch columns: pk:6 p:7 q:8
 │    ├── update-mapping:
 │    │    ├── p_new:11 => p:2
 │    │    └── q_new:12 => q:3
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: p_new:11 q_new:12 pk:6!null p:7 q:8 crdb_internal_mvcc_timestamp:9 tableoid:10
 │         ├── select
 │         │    ├── columns: pk:6!null p:7 q:8 crdb_internal_mvcc_timestamp:9 tableoid:10
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:6!null p:7 q:8 crdb_internal_mvcc_timestamp:9 tableoid:10
 │         │    └── filters
 │         │         └── pk:6 > 1
 │         └── projections
 │              ├── p:7 * 10 [as=p_new:11]
 │              └── q:8 + 1 [as=q_new:12]
 └── cascade
      └── update child_multi
           ├── columns: <none>
           ├── fetch columns: c:18 child_multi.p:19 child_multi.q:20
           ├── update-mapping:
           │    ├── p_new:25 => child_multi.p:14
           │    └── q_new:26 => child_multi.q:15
           ├── input binding: &2
           ├── inner-join (hash)
           │    ├── columns: c:18!null child_multi.p:19!null child_multi.q:20!null p:23!null q:24!null p_new:25 q_new:26
           │    ├── scan child_multi
           │    │    └── columns: c:18!null child_multi.p:19 child_multi.q:20
           │    ├── select
           │    │    ├── columns: p:23 q:24 p_new:25 q_new:26
           │    │    ├── with-scan &1
           │    │    │    ├── columns: p:23 q:24 p_new:25 q_new:26
           │    │    │    └── mapping:
           │    │    │         ├──  parent_multi.p:7 => p:23
           │    │    │         ├──  parent_multi.q:8 => q:24
           │    │    │         ├──  p_new:11 => p_new:25
           │    │    │         └──  q_new:12 => q_new:26
           │    │    └── filters
           │    │         └── (p:23 IS DISTINCT FROM p_new:25) OR (q:24 IS DISTINCT FROM q_new:26)
           │    └── filters
           │         ├── child_multi.p:19 = p:23
           │         └── child_multi.q:20 = q:24
           └── f-k-checks
                └── f-k-checks-item: child_multi(p,q) -> parent_multi(p,q)
                     └── anti-join (hash)
                          ├── columns: p:27!null q:28!null
                          ├── select
                          │    ├── columns: p:27!null q:28!null
                          │    ├── with-scan &2
                          │    │    ├── columns: p:27 q:28
                          │    │    └── mapping:
                          │    │         ├──  p_new:25 => p:27
                          │    │         └──  q_new:26 => q:28
                          │    └── filters
                          │         ├── p:27 IS NOT NULL
                          │         └── q:28 IS NOT NULL
                          ├── scan parent_multi
                          │    └── columns: parent_multi.p:30 parent_multi.q:31
                          └── filters
                               ├── p:27 = parent_multi.p:30
                               └── q:28 = parent_multi.q:31

# Update only one of the two FK columns. The "before" and "after" values of q
# come from the same column in the mutation input.
build-cascades
UPDATE parent_multi SET p = p * 10 WHERE p > 1
----
root
 ├── update parent_multi
 │    ├── columns: <none>
 │    ├── fetch columns: pk:6 p:7 q:8
 │    ├── update-mapping:
 │    │    └── p_new:11 => p:2
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: p_new:11!null pk:6!null p:7!null q:8 crdb_internal_mvcc_timestamp:9 tableoid:10
 │         ├── select
 │         │    ├── columns: pk:6!null p:7!null q:8 crdb_internal_mvcc_timestamp:9 tableoid:10
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:6!null p:7 q:8 crdb_internal_mvcc_timestamp:9 tableoid:10
 │         │    └── filters
 │         │         └── p:7 > 1
 │         └── projections
 │              └── p:7 * 10 [as=p_new:11]
 └── cascade
      └── update child_multi
           ├── columns: <none>
           ├── fetch columns: c:17 child_multi.p:18 child_multi.q:19
           ├── update-mapping:
           │    ├── p_new:24 => child_multi.p:13
           │    └── q:25 => child_multi.q:14
           ├── input binding: &2
           ├── inner-join (hash)
           │    ├── columns: c:17!null child_multi.p:18!null child_multi.q:19!null p:22!null q:23!null p_new:24!null q:25
           │    ├── scan child_multi
           │    │    └── columns: c:17!null child_multi.p:18 child_multi.q:19
           │    ├── select
           │    │    ├── columns: p:22!null q:23 p_new:24!null q:25
           │    │    ├── with-scan &1
           │    │    │    ├── columns: p:22!null q:23 p_new:24!null q:25
           │    │    │    └── mapping:
           │    │    │         ├──  parent_multi.p:7 => p:22
           │    │    │         ├──  parent_multi.q:8 => q:23
           │    │    │         ├──  p_new:11 => p_new:24
           │    │    │         └──  parent_multi.q:8 => q:25
           │    │    └── filters
           │    │         └── (p:22 IS DISTINCT FROM p_new:24) OR (q:23 IS DISTINCT FROM q:25)
           │    └── filters
           │         ├── child_multi.p:18 = p:22
           │         └── child_multi.q:19 = q:23
           └── f-k-checks
                └── f-k-checks-item: child_multi(p,q) -> parent_multi(p,q)
                     └── anti-join (hash)
                          ├── columns: p:26!null q:27!null
                          ├── select
                          │    ├── columns: p:26!null q:27!null
                          │    ├── with-scan &2
                          │    │    ├── columns: p:26!null q:27
                          │    │    └── mapping:
                          │    │         ├──  p_new:24 => p:26
                          │    │         └──  q:25 => q:27
                          │    └── filters
                          │         └── q:27 IS NOT NULL
                          ├── scan parent_multi
                          │    └── columns: parent_multi.p:29 parent_multi.q:30
                          └── filters
                               ├── p:26 = parent_multi.p:29
                               └── q:27 = parent_multi.q:30

build-cascades
UPSERT INTO parent_multi VALUES (1, 10, 10), (2, 20, 20)
----
root
 ├── upsert parent_multi
 │    ├── columns: <none>
 │    ├── arbiter indexes: primary
 │    ├── canary column: pk:9
 │    ├── fetch columns: pk:9 p:10 q:11
 │    ├── insert-mapping:
 │    │    ├── column1:6 => pk:1
 │    │    ├── column2:7 => p:2
 │    │    └── column3:8 => q:3
 │    ├── update-mapping:
 │    │    ├── column2:7 => p:2
 │    │    └── column3:8 => q:3
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: upsert_pk:14 column1:6!null column2:7!null column3:8!null pk:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 tableoid:13
 │         ├── left-join (hash)
 │         │    ├── columns: column1:6!null column2:7!null column3:8!null pk:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 tableoid:13
 │         │    ├── ensure-upsert-distinct-on
 │         │    │    ├── columns: column1:6!null column2:7!null column3:8!null
 │         │    │    ├── grouping columns: column1:6!null
 │         │    │    ├── values
 │         │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
 │         │    │    │    ├── (1, 10, 10)
 │         │    │    │    └── (2, 20, 20)
 │         │    │    └── aggregations
 │         │    │         ├── first-agg [as=column2:7]
 │         │    │         │    └── column2:7
 │         │    │         └── first-agg [as=column3:8]
 │         │    │              └── column3:8
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:9!null p:10 q:11 crdb_internal_mvcc_timestamp:12 tableoid:13
 │         │    └── filters
 │         │         └── column1:6 = pk:9
 │         └── projections
 │              └── CASE WHEN pk:9 IS NULL THEN column1:6 ELSE pk:9 END [as=upsert_pk:14]
 └── cascade
      └── update child_multi
           ├── columns: <none>
           ├── fetch columns: c:20 child_multi.p:21 child_multi.q:22
           ├── update-mapping:
           │    ├── column2:27 => child_multi.p:16
           │    └── column3:28 => child_multi.q:17
           ├── input binding: &2
           ├── inner-join (hash)
           │    ├── columns: c:20!null child_multi.p:21!null child_multi.q:22!null p:25!null q:26!null column2:27!null column3:28!null
           │    ├── scan child_multi
           │    │    └── columns: c:20!null child_multi.p:21 child_multi.q:22
           │    ├── select
           │    │    ├── columns: p:25 q:26 column2:27!null column3:28!null
           │    │    ├── with-scan &1
           │    │    │    ├── columns: p:25 q:26 column2:27!null column3:28!null
           │    │    │    └── mapping:
           │    │    │         ├──  parent_multi.p:10 => p:25
           │    │    │         ├──  parent_multi.q:11 => q:26
           │    │    │         ├──  column2:7 => column2:27
           │    │    │         └──  column3:8 => column3:28
           │    │    └── filters
           │    │         └── (p:25 IS DISTINCT FROM column2:27) OR (q:26 IS DISTINCT FROM column3:28)
           │    └── filters
           │         ├── child_multi.p:21 = p:25
           │         └── child_multi.q:22 = q:26
           └── f-k-checks
                └── f-k-checks-item: child_multi(p,q) -> parent_multi(p,q)
                     └── anti-join (hash)
                          ├── columns: p:29!null q:30!null
                          ├── with-scan &2
                          │    ├── columns: p:29!null q:30!null
                          │    └── mapping:
                          │         ├──  column2:27 => p:29
                          │         └──  column3:28 => q:30
                          ├── scan parent_multi
                          │    └── columns: parent_multi.p:32 parent_multi.q:33
                          └── filters
                               ├── p:29 = parent_multi.p:32
                               └── q:30 = parent_multi.q:33

# Upsert that only touches one of the FK columns.
build-cascades
UPSERT INTO parent_multi(pk, p) VALUES (1, 10), (2, 20)
----
root
 ├── upsert parent_multi
 │    ├── columns: <none>
 │    ├── arbiter indexes: primary
 │    ├── canary column: pk:9
 │    ├── fetch columns: pk:9 p:10 q:11
 │    ├── insert-mapping:
 │    │    ├── column1:6 => pk:1
 │    │    ├── column2:7 => p:2
 │    │    └── q_default:8 => q:3
 │    ├── update-mapping:
 │    │    └── column2:7 => p:2
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: upsert_pk:14 upsert_q:15 column1:6!null column2:7!null q_default:8 pk:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 tableoid:13
 │         ├── left-join (hash)
 │         │    ├── columns: column1:6!null column2:7!null q_default:8 pk:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 tableoid:13
 │         │    ├── ensure-upsert-distinct-on
 │         │    │    ├── columns: column1:6!null column2:7!null q_default:8
 │         │    │    ├── grouping columns: column1:6!null
 │         │    │    ├── project
 │         │    │    │    ├── columns: q_default:8 column1:6!null column2:7!null
 │         │    │    │    ├── values
 │         │    │    │    │    ├── columns: column1:6!null column2:7!null
 │         │    │    │    │    ├── (1, 10)
 │         │    │    │    │    └── (2, 20)
 │         │    │    │    └── projections
 │         │    │    │         └── NULL::INT8 [as=q_default:8]
 │         │    │    └── aggregations
 │         │    │         ├── first-agg [as=column2:7]
 │         │    │         │    └── column2:7
 │         │    │         └── first-agg [as=q_default:8]
 │         │    │              └── q_default:8
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:9!null p:10 q:11 crdb_internal_mvcc_timestamp:12 tableoid:13
 │         │    └── filters
 │         │         └── column1:6 = pk:9
 │         └── projections
 │              ├── CASE WHEN pk:9 IS NULL THEN column1:6 ELSE pk:9 END [as=upsert_pk:14]
 │              └── CASE WHEN pk:9 IS NULL THEN q_default:8 ELSE q:11 END [as=upsert_q:15]
 └── cascade
      └── update child_multi
           ├── columns: <none>
           ├── fetch columns: c:21 child_multi.p:22 child_multi.q:23
           ├── update-mapping:
           │    ├── column2:28 => child_multi.p:17
           │    └── q:29 => child_multi.q:18
           ├── input binding: &2
           ├── inner-join (hash)
           │    ├── columns: c:21!null child_multi.p:22!null child_multi.q:23!null p:26!null q:27!null column2:28!null q:29
           │    ├── scan child_multi
           │    │    └── columns: c:21!null child_multi.p:22 child_multi.q:23
           │    ├── select
           │    │    ├── columns: p:26 q:27 column2:28!null q:29
           │    │    ├── with-scan &1
           │    │    │    ├── columns: p:26 q:27 column2:28!null q:29
           │    │    │    └── mapping:
           │    │    │         ├──  parent_multi.p:10 => p:26
           │    │    │         ├──  parent_multi.q:11 => q:27
           │    │    │         ├──  column2:7 => column2:28
           │    │    │         └──  parent_multi.q:11 => q:29
           │    │    └── filters
           │    │         └── (p:26 IS DISTINCT FROM column2:28) OR (q:27 IS DISTINCT FROM q:29)
           │    └── filters
           │         ├── child_multi.p:22 = p:26
           │         └── child_multi.q:23 = q:27
           └── f-k-checks
                └── f-k-checks-item: child_multi(p,q) -> parent_multi(p,q)
                     └── anti-join (hash)
                          ├── columns: p:30!null q:31!null
                          ├── select
                          │    ├── columns: p:30!null q:31!null
                          │    ├── with-scan &2
                          │    │    ├── columns: p:30!null q:31
                          │    │    └── mapping:
                          │    │         ├──  column2:28 => p:30
                          │    │         └──  q:29 => q:31
                          │    └── filters
                          │         └── q:31 IS NOT NULL
                          ├── scan parent_multi
                          │    └── columns: parent_multi.p:33 parent_multi.q:34
                          └── filters
                               ├── p:30 = parent_multi.p:33
                               └── q:31 = parent_multi.q:34

build-cascades
INSERT INTO parent_multi VALUES (1, 10, 10), (2, 20, 20) ON CONFLICT (p,q) DO UPDATE SET p = 100
----
root
 ├── upsert parent_multi
 │    ├── columns: <none>
 │    ├── arbiter indexes: secondary
 │    ├── canary column: pk:9
 │    ├── fetch columns: pk:9 p:10 q:11
 │    ├── insert-mapping:
 │    │    ├── column1:6 => pk:1
 │    │    ├── column2:7 => p:2
 │    │    └── column3:8 => q:3
 │    ├── update-mapping:
 │    │    └── upsert_p:16 => p:2
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: upsert_pk:15 upsert_p:16!null upsert_q:17 column1:6!null column2:7!null column3:8!null pk:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 tableoid:13 p_new:14!null
 │         ├── project
 │         │    ├── columns: p_new:14!null column1:6!null column2:7!null column3:8!null pk:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 tableoid:13
 │         │    ├── left-join (hash)
 │         │    │    ├── columns: column1:6!null column2:7!null column3:8!null pk:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 tableoid:13
 │         │    │    ├── ensure-upsert-distinct-on
 │         │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
 │         │    │    │    ├── grouping columns: column2:7!null column3:8!null
 │         │    │    │    ├── values
 │         │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
 │         │    │    │    │    ├── (1, 10, 10)
 │         │    │    │    │    └── (2, 20, 20)
 │         │    │    │    └── aggregations
 │         │    │    │         └── first-agg [as=column1:6]
 │         │    │    │              └── column1:6
 │         │    │    ├── scan parent_multi
 │         │    │    │    └── columns: pk:9!null p:10 q:11 crdb_internal_mvcc_timestamp:12 tableoid:13
 │         │    │    └── filters
 │         │    │         ├── column2:7 = p:10
 │         │    │         └── column3:8 = q:11
 │         │    └── projections
 │         │         └── 100 [as=p_new:14]
 │         └── projections
 │              ├── CASE WHEN pk:9 IS NULL THEN column1:6 ELSE pk:9 END [as=upsert_pk:15]
 │              ├── CASE WHEN pk:9 IS NULL THEN column2:7 ELSE p_new:14 END [as=upsert_p:16]
 │              └── CASE WHEN pk:9 IS NULL THEN column3:8 ELSE q:11 END [as=upsert_q:17]
 └── cascade
      └── update child_multi
           ├── columns: <none>
           ├── fetch columns: c:23 child_multi.p:24 child_multi.q:25
           ├── update-mapping:
           │    ├── upsert_p:30 => child_multi.p:19
           │    └── q:31 => child_multi.q:20
           ├── input binding: &2
           ├── inner-join (hash)
           │    ├── columns: c:23!null child_multi.p:24!null child_multi.q:25!null p:28!null q:29!null upsert_p:30!null q:31
           │    ├── scan child_multi
           │    │    └── columns: c:23!null child_multi.p:24 child_multi.q:25
           │    ├── select
           │    │    ├── columns: p:28 q:29 upsert_p:30!null q:31
           │    │    ├── with-scan &1
           │    │    │    ├── columns: p:28 q:29 upsert_p:30!null q:31
           │    │    │    └── mapping:
           │    │    │         ├──  parent_multi.p:10 => p:28
           │    │    │         ├──  parent_multi.q:11 => q:29
           │    │    │         ├──  upsert_p:16 => upsert_p:30
           │    │    │         └──  parent_multi.q:11 => q:31
           │    │    └── filters
           │    │         └── (p:28 IS DISTINCT FROM upsert_p:30) OR (q:29 IS DISTINCT FROM q:31)
           │    └── filters
           │         ├── child_multi.p:24 = p:28
           │         └── child_multi.q:25 = q:29
           └── f-k-checks
                └── f-k-checks-item: child_multi(p,q) -> parent_multi(p,q)
                     └── anti-join (hash)
                          ├── columns: p:32!null q:33!null
                          ├── select
                          │    ├── columns: p:32!null q:33!null
                          │    ├── with-scan &2
                          │    │    ├── columns: p:32!null q:33
                          │    │    └── mapping:
                          │    │         ├──  upsert_p:30 => p:32
                          │    │         └──  q:31 => q:33
                          │    └── filters
                          │         └── q:33 IS NOT NULL
                          ├── scan parent_multi
                          │    └── columns: parent_multi.p:35 parent_multi.q:36
                          └── filters
                               ├── p:32 = parent_multi.p:35
                               └── q:33 = parent_multi.q:36

# Test a two-level cascade.
exec-ddl
CREATE TABLE grandchild (
  g INT PRIMARY KEY,
  c INT, q INT,
  CONSTRAINT fk2 FOREIGN KEY (c, q) REFERENCES child_multi(c, q) ON UPDATE CASCADE
)
----

build-cascades
UPDATE parent_multi SET q = q * 10 WHERE p > 1
----
root
 ├── update parent_multi
 │    ├── columns: <none>
 │    ├── fetch columns: pk:6 p:7 q:8
 │    ├── update-mapping:
 │    │    └── q_new:11 => q:3
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: q_new:11 pk:6!null p:7!null q:8 crdb_internal_mvcc_timestamp:9 tableoid:10
 │         ├── select
 │         │    ├── columns: pk:6!null p:7!null q:8 crdb_internal_mvcc_timestamp:9 tableoid:10
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:6!null p:7 q:8 crdb_internal_mvcc_timestamp:9 tableoid:10
 │         │    └── filters
 │         │         └── p:7 > 1
 │         └── projections
 │              └── q:8 * 10 [as=q_new:11]
 └── cascade
      ├── update child_multi
      │    ├── columns: <none>
      │    ├── fetch columns: c:17 child_multi.p:18 child_multi.q:19
      │    ├── update-mapping:
      │    │    ├── p:24 => child_multi.p:13
      │    │    └── q_new:25 => child_multi.q:14
      │    ├── input binding: &2
      │    ├── cascades
      │    │    └── fk2
      │    ├── inner-join (hash)
      │    │    ├── columns: c:17!null child_multi.p:18!null child_multi.q:19!null p:22!null q:23!null p:24!null q_new:25
      │    │    ├── scan child_multi
      │    │    │    └── columns: c:17!null child_multi.p:18 child_multi.q:19
      │    │    ├── select
      │    │    │    ├── columns: p:22!null q:23 p:24!null q_new:25
      │    │    │    ├── with-scan &1
      │    │    │    │    ├── columns: p:22!null q:23 p:24!null q_new:25
      │    │    │    │    └── mapping:
      │    │    │    │         ├──  parent_multi.p:7 => p:22
      │    │    │    │         ├──  parent_multi.q:8 => q:23
      │    │    │    │         ├──  parent_multi.p:7 => p:24
      │    │    │    │         └──  q_new:11 => q_new:25
      │    │    │    └── filters
      │    │    │         └── (p:22 IS DISTINCT FROM p:24) OR (q:23 IS DISTINCT FROM q_new:25)
      │    │    └── filters
      │    │         ├── child_multi.p:18 = p:22
      │    │         └── child_multi.q:19 = q:23
      │    └── f-k-checks
      │         └── f-k-checks-item: child_multi(p,q) -> parent_multi(p,q)
      │              └── anti-join (hash)
      │                   ├── columns: p:26!null q:27!null
      │                   ├── select
      │                   │    ├── columns: p:26!null q:27!null
      │                   │    ├── with-scan &2
      │                   │    │    ├── columns: p:26!null q:27
      │                   │    │    └── mapping:
      │                   │    │         ├──  p:24 => p:26
      │                   │    │         └──  q_new:25 => q:27
      │                   │    └── filters
      │                   │         └── q:27 IS NOT NULL
      │                   ├── scan parent_multi
      │                   │    └── columns: parent_multi.p:29 parent_multi.q:30
      │                   └── filters
      │                        ├── p:26 = parent_multi.p:29
      │                        └── q:27 = parent_multi.q:30
      └── cascade
           └── update grandchild
                ├── columns: <none>
                ├── fetch columns: g:38 grandchild.c:39 grandchild.q:40
                ├── update-mapping:
                │    ├── c:45 => grandchild.c:34
                │    └── q_new:46 => grandchild.q:35
                ├── input binding: &3
                ├── inner-join (hash)
                │    ├── columns: g:38!null grandchild.c:39!null grandchild.q:40!null c:43!null q:44!null c:45!null q_new:46
                │    ├── scan grandchild
                │    │    └── columns: g:38!null grandchild.c:39 grandchild.q:40
                │    ├── select
                │    │    ├── columns: c:43!null q:44!null c:45!null q_new:46
                │    │    ├── with-scan &2
                │    │    │    ├── columns: c:43!null q:44!null c:45!null q_new:46
                │    │    │    └── mapping:
                │    │    │         ├──  child_multi.c:17 => c:43
                │    │    │         ├──  child_multi.q:19 => q:44
                │    │    │         ├──  child_multi.c:17 => c:45
                │    │    │         └──  q_new:25 => q_new:46
                │    │    └── filters
                │    │         └── (c:43 IS DISTINCT FROM c:45) OR (q:44 IS DISTINCT FROM q_new:46)
                │    └── filters
                │         ├── grandchild.c:39 = c:43
                │         └── grandchild.q:40 = q:44
                └── f-k-checks
                     └── f-k-checks-item: grandchild(c,q) -> child_multi(c,q)
                          └── anti-join (hash)
                               ├── columns: c:47!null q:48!null
                               ├── select
                               │    ├── columns: c:47!null q:48!null
                               │    ├── with-scan &3
                               │    │    ├── columns: c:47!null q:48
                               │    │    └── mapping:
                               │    │         ├──  c:45 => c:47
                               │    │         └──  q_new:46 => q:48
                               │    └── filters
                               │         └── q:48 IS NOT NULL
                               ├── scan child_multi
                               │    └── columns: child_multi.c:49!null child_multi.q:51
                               └── filters
                                    ├── c:47 = child_multi.c:49
                                    └── q:48 = child_multi.q:51

build-cascades
UPSERT INTO parent_multi VALUES (1, 10, 10), (2, 20, 20)
----
root
 ├── upsert parent_multi
 │    ├── columns: <none>
 │    ├── arbiter indexes: primary
 │    ├── canary column: pk:9
 │    ├── fetch columns: pk:9 p:10 q:11
 │    ├── insert-mapping:
 │    │    ├── column1:6 => pk:1
 │    │    ├── column2:7 => p:2
 │    │    └── column3:8 => q:3
 │    ├── update-mapping:
 │    │    ├── column2:7 => p:2
 │    │    └── column3:8 => q:3
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: upsert_pk:14 column1:6!null column2:7!null column3:8!null pk:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 tableoid:13
 │         ├── left-join (hash)
 │         │    ├── columns: column1:6!null column2:7!null column3:8!null pk:9 p:10 q:11 crdb_internal_mvcc_timestamp:12 tableoid:13
 │         │    ├── ensure-upsert-distinct-on
 │         │    │    ├── columns: column1:6!null column2:7!null column3:8!null
 │         │    │    ├── grouping columns: column1:6!null
 │         │    │    ├── values
 │         │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
 │         │    │    │    ├── (1, 10, 10)
 │         │    │    │    └── (2, 20, 20)
 │         │    │    └── aggregations
 │         │    │         ├── first-agg [as=column2:7]
 │         │    │         │    └── column2:7
 │         │    │         └── first-agg [as=column3:8]
 │         │    │              └── column3:8
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:9!null p:10 q:11 crdb_internal_mvcc_timestamp:12 tableoid:13
 │         │    └── filters
 │         │         └── column1:6 = pk:9
 │         └── projections
 │              └── CASE WHEN pk:9 IS NULL THEN column1:6 ELSE pk:9 END [as=upsert_pk:14]
 └── cascade
      ├── update child_multi
      │    ├── columns: <none>
      │    ├── fetch columns: c:20 child_multi.p:21 child_multi.q:22
      │    ├── update-mapping:
      │    │    ├── column2:27 => child_multi.p:16
      │    │    └── column3:28 => child_multi.q:17
      │    ├── input binding: &2
      │    ├── cascades
      │    │    └── fk2
      │    ├── inner-join (hash)
      │    │    ├── columns: c:20!null child_multi.p:21!null child_multi.q:22!null p:25!null q:26!null column2:27!null column3:28!null
      │    │    ├── scan child_multi
      │    │    │    └── columns: c:20!null child_multi.p:21 child_multi.q:22
      │    │    ├── select
      │    │    │    ├── columns: p:25 q:26 column2:27!null column3:28!null
      │    │    │    ├── with-scan &1
      │    │    │    │    ├── columns: p:25 q:26 column2:27!null column3:28!null
      │    │    │    │    └── mapping:
      │    │    │    │         ├──  parent_multi.p:10 => p:25
      │    │    │    │         ├──  parent_multi.q:11 => q:26
      │    │    │    │         ├──  column2:7 => column2:27
      │    │    │    │         └──  column3:8 => column3:28
      │    │    │    └── filters
      │    │    │         └── (p:25 IS DISTINCT FROM column2:27) OR (q:26 IS DISTINCT FROM column3:28)
      │    │    └── filters
      │    │         ├── child_multi.p:21 = p:25
      │    │         └── child_multi.q:22 = q:26
      │    └── f-k-checks
      │         └── f-k-checks-item: child_multi(p,q) -> parent_multi(p,q)
      │              └── anti-join (hash)
      │                   ├── columns: p:29!null q:30!null
      │                   ├── with-scan &2
      │                   │    ├── columns: p:29!null q:30!null
      │                   │    └── mapping:
      │                   │         ├──  column2:27 => p:29
      │                   │         └──  column3:28 => q:30
      │                   ├── scan parent_multi
      │                   │    └── columns: parent_multi.p:32 parent_multi.q:33
      │                   └── filters
      │                        ├── p:29 = parent_multi.p:32
      │                        └── q:30 = parent_multi.q:33
      └── cascade
           └── update grandchild
                ├── columns: <none>
                ├── fetch columns: g:41 grandchild.c:42 grandchild.q:43
                ├── update-mapping:
                │    ├── c:48 => grandchild.c:37
                │    └── column3:49 => grandchild.q:38
                ├── input binding: &3
                ├── inner-join (hash)
                │    ├── columns: g:41!null grandchild.c:42!null grandchild.q:43!null c:46!null q:47!null c:48!null column3:49!null
                │    ├── scan grandchild
                │    │    └── columns: g:41!null grandchild.c:42 grandchild.q:43
                │    ├── select
                │    │    ├── columns: c:46!null q:47!null c:48!null column3:49!null
                │    │    ├── with-scan &2
                │    │    │    ├── columns: c:46!null q:47!null c:48!null column3:49!null
                │    │    │    └── mapping:
                │    │    │         ├──  child_multi.c:20 => c:46
                │    │    │         ├──  child_multi.q:22 => q:47
                │    │    │         ├──  child_multi.c:20 => c:48
                │    │    │         └──  column3:28 => column3:49
                │    │    └── filters
                │    │         └── (c:46 IS DISTINCT FROM c:48) OR (q:47 IS DISTINCT FROM column3:49)
                │    └── filters
                │         ├── grandchild.c:42 = c:46
                │         └── grandchild.q:43 = q:47
                └── f-k-checks
                     └── f-k-checks-item: grandchild(c,q) -> child_multi(c,q)
                          └── anti-join (hash)
                               ├── columns: c:50!null q:51!null
                               ├── with-scan &3
                               │    ├── columns: c:50!null q:51!null
                               │    └── mapping:
                               │         ├──  c:48 => c:50
                               │         └──  column3:49 => q:51
                               ├── scan child_multi
                               │    └── columns: child_multi.c:52!null child_multi.q:54
                               └── filters
                                    ├── c:50 = child_multi.c:52
                                    └── q:51 = child_multi.q:54

# Test a cascade to a child with a partial index.
exec-ddl
CREATE TABLE parent_partial (p INT PRIMARY KEY)
----

exec-ddl
CREATE TABLE child_partial (
  c INT PRIMARY KEY,
  p INT REFERENCES parent_partial(p) ON UPDATE CASCADE,
  i INT,
  INDEX (p) WHERE i > 0,
  INDEX (i) WHERE p > 0
)
----

build-cascades
UPDATE parent_partial SET p = p * 10 WHERE p > 1
----
root
 ├── update parent_partial
 │    ├── columns: <none>
 │    ├── fetch columns: p:4
 │    ├── update-mapping:
 │    │    └── p_new:7 => p:1
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk_p_ref_parent_partial
 │    └── project
 │         ├── columns: p_new:7!null p:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
 │         ├── select
 │         │    ├── columns: p:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
 │         │    ├── scan parent_partial
 │         │    │    └── columns: p:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
 │         │    └── filters
 │         │         └── p:4 > 1
 │         └── projections
 │              └── p:4 * 10 [as=p_new:7]
 └── cascade
      └── update child_partial
           ├── columns: <none>
           ├── fetch columns: c:13 child_partial.p:14 i:15
           ├── update-mapping:
           │    └── p_new:19 => child_partial.p:9
           ├── partial index put columns: partial_index_put1:20 partial_index_put2:21
           ├── partial index del columns: partial_index_put1:20 partial_index_del2:22
           ├── input binding: &2
           ├── project
           │    ├── columns: partial_index_put1:20 partial_index_put2:21!null partial_index_del2:22!null c:13!null child_partial.p:14!null i:15 p:18!null p_new:19!null
           │    ├── inner-join (hash)
           │    │    ├── columns: c:13!null child_partial.p:14!null i:15 p:18!null p_new:19!null
           │    │    ├── scan child_partial
           │    │    │    ├── columns: c:13!null child_partial.p:14 i:15
           │    │    │    └── partial index predicates
           │    │    │         ├── secondary: filters
           │    │    │         │    └── i:15 > 0
           │    │    │         └── secondary: filters
           │    │    │              └── child_partial.p:14 > 0
           │    │    ├── select
           │    │    │    ├── columns: p:18!null p_new:19!null
           │    │    │    ├── with-scan &1
           │    │    │    │    ├── columns: p:18!null p_new:19!null
           │    │    │    │    └── mapping:
           │    │    │    │         ├──  parent_partial.p:4 => p:18
           │    │    │    │         └──  p_new:7 => p_new:19
           │    │    │    └── filters
           │    │    │         └── p:18 IS DISTINCT FROM p_new:19
           │    │    └── filters
           │    │         └── child_partial.p:14 = p:18
           │    └── projections
           │         ├── i:15 > 0 [as=partial_index_put1:20]
           │         ├── p_new:19 > 0 [as=partial_index_put2:21]
           │         └── child_partial.p:14 > 0 [as=partial_index_del2:22]
           └── f-k-checks
                └── f-k-checks-item: child_partial(p) -> parent_partial(p)
                     └── anti-join (hash)
                          ├── columns: p:23!null
                          ├── with-scan &2
                          │    ├── columns: p:23!null
                          │    └── mapping:
                          │         └──  p_new:19 => p:23
                          ├── scan parent_partial
                          │    └── columns: parent_partial.p:24!null
                          └── filters
                               └── p:23 = parent_partial.p:24

# Test a cascade to a child with a partial index with an ambiguous name.
exec-ddl
CREATE TABLE parent_partial_ambig (p INT PRIMARY KEY)
----

exec-ddl
CREATE TABLE child_partial_ambig (
  c INT PRIMARY KEY,
  p_new INT REFERENCES parent_partial_ambig(p) ON UPDATE CASCADE,
  i INT,
  INDEX (i) WHERE p_new > 0
)
----

build-cascades
UPDATE parent_partial_ambig SET p = p * 10 WHERE p > 1
----
root
 ├── update parent_partial_ambig
 │    ├── columns: <none>
 │    ├── fetch columns: p:4
 │    ├── update-mapping:
 │    │    └── p_new:7 => p:1
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk_p_new_ref_parent_partial_ambig
 │    └── project
 │         ├── columns: p_new:7!null p:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
 │         ├── select
 │         │    ├── columns: p:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
 │         │    ├── scan parent_partial_ambig
 │         │    │    └── columns: p:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
 │         │    └── filters
 │         │         └── p:4 > 1
 │         └── projections
 │              └── p:4 * 10 [as=p_new:7]
 └── cascade
      └── update child_partial_ambig
           ├── columns: <none>
           ├── fetch columns: c:13 child_partial_ambig.p_new:14 i:15
           ├── update-mapping:
           │    └── p_new:19 => child_partial_ambig.p_new:9
           ├── partial index put columns: partial_index_put1:20
           ├── partial index del columns: partial_index_del1:21
           ├── input binding: &2
           ├── project
           │    ├── columns: partial_index_put1:20!null partial_index_del1:21!null c:13!null child_partial_ambig.p_new:14!null i:15 p:18!null p_new:19!null
           │    ├── inner-join (hash)
           │    │    ├── columns: c:13!null child_partial_ambig.p_new:14!null i:15 p:18!null p_new:19!null
           │    │    ├── scan child_partial_ambig
           │    │    │    ├── columns: c:13!null child_partial_ambig.p_new:14 i:15
           │    │    │    └── partial index predicates
           │    │    │         └── secondary: filters
           │    │    │              └── child_partial_ambig.p_new:14 > 0
           │    │    ├── select
           │    │    │    ├── columns: p:18!null p_new:19!null
           │    │    │    ├── with-scan &1
           │    │    │    │    ├── columns: p:18!null p_new:19!null
           │    │    │    │    └── mapping:
           │    │    │    │         ├──  parent_partial_ambig.p:4 => p:18
           │    │    │    │         └──  p_new:7 => p_new:19
           │    │    │    └── filters
           │    │    │         └── p:18 IS DISTINCT FROM p_new:19
           │    │    └── filters
           │    │         └── child_partial_ambig.p_new:14 = p:18
           │    └── projections
           │         ├── p_new:19 > 0 [as=partial_index_put1:20]
           │         └── child_partial_ambig.p_new:14 > 0 [as=partial_index_del1:21]
           └── f-k-checks
                └── f-k-checks-item: child_partial_ambig(p_new) -> parent_partial_ambig(p)
                     └── anti-join (hash)
                          ├── columns: p_new:22!null
                          ├── with-scan &2
                          │    ├── columns: p_new:22!null
                          │    └── mapping:
                          │         └──  p_new:19 => p_new:22
                          ├── scan parent_partial_ambig
                          │    └── columns: parent_partial_ambig.p:23!null
                          └── filters
                               └── p_new:22 = parent_partial_ambig.p:23

# Test an UPSERT that cascades to a child with a partial index.
exec-ddl
CREATE TABLE parent_multi_partial (
  pk INT PRIMARY KEY,
  p INT, q INT,
  UNIQUE (p, q),
  FAMILY (pk),
  FAMILY (p),
  FAMILY (q)
)
----

exec-ddl
CREATE TABLE child_multi_partial (
  c INT PRIMARY KEY,
  p INT, q INT,
  i INT,
  UNIQUE (c, q),
  INDEX (p, q) WHERE i > 0,
  INDEX (i) WHERE p > 0 AND q > 0,
  CONSTRAINT fk FOREIGN KEY (p, q) REFERENCES parent_multi_partial(p, q) ON UPDATE CASCADE
)
----

build-cascades
UPSERT INTO parent_multi_partial VALUES (1), (2)
----
root
 ├── upsert parent_multi_partial
 │    ├── columns: <none>
 │    ├── arbiter indexes: primary
 │    ├── canary column: pk:8
 │    ├── fetch columns: pk:8 p:9 q:10
 │    ├── insert-mapping:
 │    │    ├── column1:6 => pk:1
 │    │    ├── p_default:7 => p:2
 │    │    └── p_default:7 => q:3
 │    ├── update-mapping:
 │    │    ├── p_default:7 => p:2
 │    │    └── p_default:7 => q:3
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: upsert_pk:13 column1:6!null p_default:7 pk:8 p:9 q:10 crdb_internal_mvcc_timestamp:11 tableoid:12
 │         ├── left-join (hash)
 │         │    ├── columns: column1:6!null p_default:7 pk:8 p:9 q:10 crdb_internal_mvcc_timestamp:11 tableoid:12
 │         │    ├── ensure-upsert-distinct-on
 │         │    │    ├── columns: column1:6!null p_default:7
 │         │    │    ├── grouping columns: column1:6!null
 │         │    │    ├── project
 │         │    │    │    ├── columns: p_default:7 column1:6!null
 │         │    │    │    ├── values
 │         │    │    │    │    ├── columns: column1:6!null
 │         │    │    │    │    ├── (1,)
 │         │    │    │    │    └── (2,)
 │         │    │    │    └── projections
 │         │    │    │         └── NULL::INT8 [as=p_default:7]
 │         │    │    └── aggregations
 │         │    │         └── first-agg [as=p_default:7]
 │         │    │              └── p_default:7
 │         │    ├── scan parent_multi_partial
 │         │    │    └── columns: pk:8!null p:9 q:10 crdb_internal_mvcc_timestamp:11 tableoid:12
 │         │    └── filters
 │         │         └── column1:6 = pk:8
 │         └── projections
 │              └── CASE WHEN pk:8 IS NULL THEN column1:6 ELSE pk:8 END [as=upsert_pk:13]
 └── cascade
      └── update child_multi_partial
           ├── columns: <none>
           ├── fetch columns: c:20 child_multi_partial.p:21 child_multi_partial.q:22 i:23
           ├── update-mapping:
           │    ├── p_default:28 => child_multi_partial.p:15
           │    └── p_default:29 => child_multi_partial.q:16
           ├── partial index put columns: partial_index_put1:30 partial_index_put2:31
           ├── partial index del columns: partial_index_put1:30 partial_index_del2:32
           ├── input binding: &2
           ├── project
           │    ├── columns: partial_index_put1:30 partial_index_put2:31 partial_index_del2:32!null c:20!null child_multi_partial.p:21!null child_multi_partial.q:22!null i:23 p:26!null q:27!null p_default:28 p_default:29
           │    ├── inner-join (hash)
           │    │    ├── columns: c:20!null child_multi_partial.p:21!null child_multi_partial.q:22!null i:23 p:26!null q:27!null p_default:28 p_default:29
           │    │    ├── scan child_multi_partial
           │    │    │    ├── columns: c:20!null child_multi_partial.p:21 child_multi_partial.q:22 i:23
           │    │    │    └── partial index predicates
           │    │    │         ├── secondary: filters
           │    │    │         │    └── i:23 > 0
           │    │    │         └── secondary: filters
           │    │    │              └── (child_multi_partial.p:21 > 0) AND (child_multi_partial.q:22 > 0)
           │    │    ├── select
           │    │    │    ├── columns: p:26 q:27 p_default:28 p_default:29
           │    │    │    ├── with-scan &1
           │    │    │    │    ├── columns: p:26 q:27 p_default:28 p_default:29
           │    │    │    │    └── mapping:
           │    │    │    │         ├──  parent_multi_partial.p:9 => p:26
           │    │    │    │         ├──  parent_multi_partial.q:10 => q:27
           │    │    │    │         ├──  p_default:7 => p_default:28
           │    │    │    │         └──  p_default:7 => p_default:29
           │    │    │    └── filters
           │    │    │         └── (p:26 IS DISTINCT FROM p_default:28) OR (q:27 IS DISTINCT FROM p_default:29)
           │    │    └── filters
           │    │         ├── child_multi_partial.p:21 = p:26
           │    │         └── child_multi_partial.q:22 = q:27
           │    └── projections
           │         ├── i:23 > 0 [as=partial_index_put1:30]
           │         ├── (p_default:28 > 0) AND (p_default:29 > 0) [as=partial_index_put2:31]
           │         └── (child_multi_partial.p:21 > 0) AND (child_multi_partial.q:22 > 0) [as=partial_index_del2:32]
           └── f-k-checks
                └── f-k-checks-item: child_multi_partial(p,q) -> parent_multi_partial(p,q)
                     └── anti-join (hash)
                          ├── columns: p:33!null q:34!null
                          ├── select
                          │    ├── columns: p:33!null q:34!null
                          │    ├── with-scan &2
                          │    │    ├── columns: p:33 q:34
                          │    │    └── mapping:
                          │    │         ├──  p_default:28 => p:33
                          │    │         └──  p_default:29 => q:34
                          │    └── filters
                          │         ├── p:33 IS NOT NULL
                          │         └── q:34 IS NOT NULL
                          ├── scan parent_multi_partial
                          │    └── columns: parent_multi_partial.p:36 parent_multi_partial.q:37
                          └── filters
                               ├── p:33 = parent_multi_partial.p:36
                               └── q:34 = parent_multi_partial.q:37

# Regression test for #57148. A check constraint or computed column in a child
# table that references a column with the same name as the parent's synthesized
# update column should not result in an ambiguous column reference error. In
# this test the synthesized update column for the parent is "p" + "_new" =
# "p_new", which is the name of the FK column in the child.
exec-ddl
CREATE TABLE parent_check_ambig (p INT PRIMARY KEY)
----

exec-ddl
CREATE TABLE child_check_ambig (
  c INT PRIMARY KEY,
  p_new INT REFERENCES parent_check_ambig(p) ON UPDATE CASCADE,
  i INT AS (p_new * 2) STORED,
  CHECK (p_new > 0)
)
----

build-cascades
UPDATE parent_check_ambig SET p = p * 10 WHERE p > 1
----
root
 ├── update parent_check_ambig
 │    ├── columns: <none>
 │    ├── fetch columns: p:4
 │    ├── update-mapping:
 │    │    └── p_new:7 => p:1
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk_p_new_ref_parent_check_ambig
 │    └── project
 │         ├── columns: p_new:7!null p:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
 │         ├── select
 │         │    ├── columns: p:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
 │         │    ├── scan parent_check_ambig
 │         │    │    └── columns: p:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
 │         │    └── filters
 │         │         └── p:4 > 1
 │         └── projections
 │              └── p:4 * 10 [as=p_new:7]
 └── cascade
      └── update child_check_ambig
           ├── columns: <none>
           ├── fetch columns: c:13 child_check_ambig.p_new:14 i:15
           ├── update-mapping:
           │    ├── p_new:19 => child_check_ambig.p_new:9
           │    └── i_comp:20 => i:10
           ├── check columns: check1:21
           ├── input binding: &2
           ├── project
           │    ├── columns: check1:21!null c:13!null child_check_ambig.p_new:14!null i:15 p:18!null p_new:19!null i_comp:20!null
           │    ├── project
           │    │    ├── columns: i_comp:20!null c:13!null child_check_ambig.p_new:14!null i:15 p:18!null p_new:19!null
           │    │    ├── inner-join (hash)
           │    │    │    ├── columns: c:13!null child_check_ambig.p_new:14!null i:15 p:18!null p_new:19!null
           │    │    │    ├── scan child_check_ambig
           │    │    │    │    ├── columns: c:13!null child_check_ambig.p_new:14 i:15
           │    │    │    │    └── computed column expressions
           │    │    │    │         └── i:15
           │    │    │    │              └── child_check_ambig.p_new:14 * 2
           │    │    │    ├── select
           │    │    │    │    ├── columns: p:18!null p_new:19!null
           │    │    │    │    ├── with-scan &1
           │    │    │    │    │    ├── columns: p:18!null p_new:19!null
           │    │    │    │    │    └── mapping:
           │    │    │    │    │         ├──  parent_check_ambig.p:4 => p:18
           │    │    │    │    │         └──  p_new:7 => p_new:19
           │    │    │    │    └── filters
           │    │    │    │         └── p:18 IS DISTINCT FROM p_new:19
           │    │    │    └── filters
           │    │    │         └── child_check_ambig.p_new:14 = p:18
           │    │    └── projections
           │    │         └── p_new:19 * 2 [as=i_comp:20]
           │    └── projections
           │         └── p_new:19 > 0 [as=check1:21]
           └── f-k-checks
                └── f-k-checks-item: child_check_ambig(p_new) -> parent_check_ambig(p)
                     └── anti-join (hash)
                          ├── columns: p_new:22!null
                          ├── with-scan &2
                          │    ├── columns: p_new:22!null
                          │    └── mapping:
                          │         └──  p_new:19 => p_new:22
                          ├── scan parent_check_ambig
                          │    └── columns: parent_check_ambig.p:23!null
                          └── filters
                               └── p_new:22 = parent_check_ambig.p:23

# Test cascade to a child with a virtual column that references the FK.
exec-ddl
CREATE TABLE parent_virt (p INT PRIMARY KEY)
----

exec-ddl
CREATE TABLE child_virt (
  c INT PRIMARY KEY,
  p INT REFERENCES parent_virt(p) ON UPDATE CASCADE,
  v INT AS (p) VIRTUAL
)
----

build-cascades
UPDATE parent_virt SET p = p * 10 WHERE p > 1
----
root
 ├── update parent_virt
 │    ├── columns: <none>
 │    ├── fetch columns: p:4
 │    ├── update-mapping:
 │    │    └── p_new:7 => p:1
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk_p_ref_parent_virt
 │    └── project
 │         ├── columns: p_new:7!null p:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
 │         ├── select
 │         │    ├── columns: p:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
 │         │    ├── scan parent_virt
 │         │    │    └── columns: p:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
 │         │    └── filters
 │         │         └── p:4 > 1
 │         └── projections
 │              └── p:4 * 10 [as=p_new:7]
 └── cascade
      └── update child_virt
           ├── columns: <none>
           ├── fetch columns: c:13 child_virt.p:14 v:15
           ├── update-mapping:
           │    ├── p_new:19 => child_virt.p:9
           │    └── p_new:19 => v:10
           ├── input binding: &2
           ├── inner-join (hash)
           │    ├── columns: c:13!null child_virt.p:14!null v:15 p:18!null p_new:19!null
           │    ├── project
           │    │    ├── columns: v:15 c:13!null child_virt.p:14
           │    │    ├── scan child_virt
           │    │    │    ├── columns: c:13!null child_virt.p:14
           │    │    │    └── computed column expressions
           │    │    │         └── v:15
           │    │    │              └── child_virt.p:14
           │    │    └── projections
           │    │         └── child_virt.p:14 [as=v:15]
           │    ├── select
           │    │    ├── columns: p:18!null p_new:19!null
           │    │    ├── with-scan &1
           │    │    │    ├── columns: p:18!null p_new:19!null
           │    │    │    └── mapping:
           │    │    │         ├──  parent_virt.p:4 => p:18
           │    │    │         └──  p_new:7 => p_new:19
           │    │    └── filters
           │    │         └── p:18 IS DISTINCT FROM p_new:19
           │    └── filters
           │         └── child_virt.p:14 = p:18
           └── f-k-checks
                └── f-k-checks-item: child_virt(p) -> parent_virt(p)
                     └── anti-join (hash)
                          ├── columns: p:20!null
                          ├── with-scan &2
                          │    ├── columns: p:20!null
                          │    └── mapping:
                          │         └──  p_new:19 => p:20
                          ├── scan parent_virt
                          │    └── columns: parent_virt.p:21!null
                          └── filters
                               └── p:20 = parent_virt.p:21
