exec-ddl
CREATE TABLE parent (p INT PRIMARY KEY)
----

exec-ddl
CREATE TABLE child (c INT PRIMARY KEY, p INT DEFAULT 0 REFERENCES parent(p) ON DELETE SET DEFAULT)
----

build-cascades
DELETE FROM parent WHERE p > 1
----
root
 ├── delete parent
 │    ├── columns: <none>
 │    ├── fetch columns: p:2
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk_p_ref_parent
 │    └── select
 │         ├── columns: p:2!null
 │         ├── scan parent
 │         │    └── columns: p:2!null
 │         └── filters
 │              └── p:2 > 1
 └── cascade
      └── update child
           ├── columns: <none>
           ├── fetch columns: c:5 child.p:6
           ├── update-mapping:
           │    └── p_new:8 => child.p:4
           ├── input binding: &2
           ├── project
           │    ├── columns: p_new:8!null c:5!null child.p:6
           │    ├── semi-join (hash)
           │    │    ├── columns: c:5!null child.p:6
           │    │    ├── scan child
           │    │    │    └── columns: c:5!null child.p:6
           │    │    ├── with-scan &1
           │    │    │    ├── columns: p:7!null
           │    │    │    └── mapping:
           │    │    │         └──  parent.p:2 => p:7
           │    │    └── filters
           │    │         └── child.p:6 = p:7
           │    └── projections
           │         └── 0 [as=p_new:8]
           └── f-k-checks
                └── f-k-checks-item: child(p) -> parent(p)
                     └── anti-join (hash)
                          ├── columns: p_new:9!null
                          ├── with-scan &2
                          │    ├── columns: p_new:9!null
                          │    └── mapping:
                          │         └──  p_new:8 => p_new:9
                          ├── scan parent
                          │    └── columns: parent.p:10!null
                          └── filters
                               └── p_new:9 = parent.p:10

exec-ddl
DROP TABLE child
----

exec-ddl
CREATE TABLE child_null (c INT PRIMARY KEY, p INT REFERENCES parent(p) ON DELETE SET DEFAULT)
----

# Verify that no FK check is issued when updating the child, just like ON
# DELETE SET NULL.
build-cascades
DELETE FROM parent WHERE p > 1
----
root
 ├── delete parent
 │    ├── columns: <none>
 │    ├── fetch columns: p:2
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk_p_ref_parent
 │    └── select
 │         ├── columns: p:2!null
 │         ├── scan parent
 │         │    └── columns: p:2!null
 │         └── filters
 │              └── p:2 > 1
 └── cascade
      └── update child_null
           ├── columns: <none>
           ├── fetch columns: c:5 child_null.p:6
           ├── update-mapping:
           │    └── p_new:8 => child_null.p:4
           └── project
                ├── columns: p_new:8 c:5!null child_null.p:6
                ├── semi-join (hash)
                │    ├── columns: c:5!null child_null.p:6
                │    ├── scan child_null
                │    │    └── columns: c:5!null child_null.p:6
                │    ├── with-scan &1
                │    │    ├── columns: p:7!null
                │    │    └── mapping:
                │    │         └──  parent.p:2 => p:7
                │    └── filters
                │         └── child_null.p:6 = p:7
                └── projections
                     └── NULL::INT8 [as=p_new:8]

exec-ddl
CREATE TABLE parent_multicol (p INT, q INT, r INT, PRIMARY KEY (p, q, r))
----

exec-ddl
CREATE TABLE child_multicol (
  c INT PRIMARY KEY,
  p INT DEFAULT (c), q INT DEFAULT (p + 1), r INT DEFAULT (p + q),
  x INT AS (p + q + r) STORED,
  CONSTRAINT fk FOREIGN KEY (p,q,r) REFERENCES parent_multicol(p,q,r) ON DELETE SET DEFAULT,
  CONSTRAINT ch CHECK (c > 100 OR p > c)
)
----

# Verify that:
#  - multiple FK columns are handled correctly;
#  - non-trivial default expressions are projected correctly;
#  - we recalculate the stored column;
#  - we verify the CHECK expression.
build-cascades
DELETE FROM parent_multicol WHERE p > 1
----
root
 ├── delete parent_multicol
 │    ├── columns: <none>
 │    ├── fetch columns: p:4 q:5 r:6
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── select
 │         ├── columns: p:4!null q:5!null r:6!null
 │         ├── scan parent_multicol
 │         │    └── columns: p:4!null q:5!null r:6!null
 │         └── filters
 │              └── p:4 > 1
 └── cascade
      └── update child_multicol
           ├── columns: <none>
           ├── fetch columns: child_multicol.c:12 child_multicol.p:13 child_multicol.q:14 child_multicol.r:15 x:16
           ├── update-mapping:
           │    ├── child_multicol.c:12 => child_multicol.p:8
           │    ├── q_new:20 => child_multicol.q:9
           │    ├── r_new:21 => child_multicol.r:10
           │    └── column22:22 => x:11
           ├── check columns: check1:23
           ├── input binding: &2
           ├── project
           │    ├── columns: check1:23!null child_multicol.c:12!null child_multicol.p:13 child_multicol.q:14 child_multicol.r:15 x:16 q_new:20 r_new:21 column22:22
           │    ├── project
           │    │    ├── columns: column22:22 child_multicol.c:12!null child_multicol.p:13 child_multicol.q:14 child_multicol.r:15 x:16 q_new:20 r_new:21
           │    │    ├── project
           │    │    │    ├── columns: q_new:20 r_new:21 child_multicol.c:12!null child_multicol.p:13 child_multicol.q:14 child_multicol.r:15 x:16
           │    │    │    ├── semi-join (hash)
           │    │    │    │    ├── columns: child_multicol.c:12!null child_multicol.p:13 child_multicol.q:14 child_multicol.r:15 x:16
           │    │    │    │    ├── scan child_multicol
           │    │    │    │    │    ├── columns: child_multicol.c:12!null child_multicol.p:13 child_multicol.q:14 child_multicol.r:15 x:16
           │    │    │    │    │    └── computed column expressions
           │    │    │    │    │         └── x:16
           │    │    │    │    │              └── (child_multicol.p:13 + child_multicol.q:14) + child_multicol.r:15
           │    │    │    │    ├── with-scan &1
           │    │    │    │    │    ├── columns: p:17!null q:18!null r:19!null
           │    │    │    │    │    └── mapping:
           │    │    │    │    │         ├──  parent_multicol.p:4 => p:17
           │    │    │    │    │         ├──  parent_multicol.q:5 => q:18
           │    │    │    │    │         └──  parent_multicol.r:6 => r:19
           │    │    │    │    └── filters
           │    │    │    │         ├── child_multicol.p:13 = p:17
           │    │    │    │         ├── child_multicol.q:14 = q:18
           │    │    │    │         └── child_multicol.r:15 = r:19
           │    │    │    └── projections
           │    │    │         ├── child_multicol.p:13 + 1 [as=q_new:20]
           │    │    │         └── child_multicol.p:13 + child_multicol.q:14 [as=r_new:21]
           │    │    └── projections
           │    │         └── (child_multicol.c:12 + q_new:20) + r_new:21 [as=column22:22]
           │    └── projections
           │         └── (child_multicol.c:12 > 100) OR (child_multicol.c:12 > child_multicol.c:12) [as=check1:23]
           └── f-k-checks
                └── f-k-checks-item: child_multicol(p,q,r) -> parent_multicol(p,q,r)
                     └── anti-join (hash)
                          ├── columns: c:24!null q_new:25!null r_new:26!null
                          ├── select
                          │    ├── columns: c:24!null q_new:25!null r_new:26!null
                          │    ├── with-scan &2
                          │    │    ├── columns: c:24!null q_new:25 r_new:26
                          │    │    └── mapping:
                          │    │         ├──  child_multicol.c:12 => c:24
                          │    │         ├──  q_new:20 => q_new:25
                          │    │         └──  r_new:21 => r_new:26
                          │    └── filters
                          │         ├── q_new:25 IS NOT NULL
                          │         └── r_new:26 IS NOT NULL
                          ├── scan parent_multicol
                          │    └── columns: parent_multicol.p:27!null parent_multicol.q:28!null parent_multicol.r:29!null
                          └── filters
                               ├── c:24 = parent_multicol.p:27
                               ├── q_new:25 = parent_multicol.q:28
                               └── r_new:26 = parent_multicol.r:29
