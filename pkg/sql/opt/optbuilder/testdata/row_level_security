# Tests for row-level security policies.

exec-ddl
CREATE TABLE t1 (c1 INT, c2 TEXT, c3 DATE);
----

exec-ddl
ALTER TABLE t1 ENABLE ROW LEVEL SECURITY;
----

# Show a build with no policies for the admin user (default). Nothing should be
# added for RLS.

build
SELECT c1 FROM T1;
----
project
 ├── columns: c1:1
 └── scan t1
      └── columns: c1:1 c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6

# Repeat for a user that isn't an admin. All rows should be filtered.

exec-ddl
CREATE USER user1;
----

exec-ddl
SET ROLE user1;
----

build
SELECT c1 FROM T1;
----
project
 ├── columns: c1:1
 └── select
      ├── columns: c1:1 c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      ├── scan t1
      │    └── columns: c1:1 c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      └── filters
           └── false

# Add a policy with a USING expression to see that a SELECT will include that
# expression in its filter.

exec-ddl
CREATE POLICY p1 on t1 USING (c1 > 0);
----

build
SELECT c1 FROM T1;
----
project
 ├── columns: c1:1!null
 └── select
      ├── columns: c1:1!null c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      ├── scan t1
      │    └── columns: c1:1 c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      └── filters
           └── c1:1 > 0

exec-ddl
DROP POLICY p1 on t1;
----

# Verify that having only a SELECT policy will prevent an UPDATE.

exec-ddl
CREATE POLICY p1 on t1 FOR SELECT USING (c1 % 2 = 0);
----

build
UPDATE T1 SET c1 = c1 * 2 WHERE c1 > 0;
----
update t1
 ├── columns: <none>
 ├── fetch columns: c1:7 c2:8 c3:9 rowid:10
 ├── update-mapping:
 │    └── c1_new:13 => c1:1
 ├── check columns: rls:14
 └── project
      ├── columns: rls:14!null c1:7!null c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12 c1_new:13!null
      ├── project
      │    ├── columns: c1_new:13!null c1:7!null c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    ├── select
      │    │    ├── columns: c1:7!null c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    │    ├── select
      │    │    │    ├── columns: c1:7 c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    │    │    ├── scan t1
      │    │    │    │    ├── columns: c1:7 c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    │    │    │    └── flags: avoid-full-scan
      │    │    │    └── filters
      │    │    │         └── false
      │    │    └── filters
      │    │         └── c1:7 > 0
      │    └── projections
      │         └── c1:7 * 2 [as=c1_new:13]
      └── projections
           └── ((c1_new:13 % 2) = 0) AND false [as=rls:14]

exec-ddl
CREATE POLICY p2 on t1 FOR UPDATE USING (c1 < 100);
----

build
UPDATE T1 SET c1 = c1 * 2 WHERE c1 > 0;
----
update t1
 ├── columns: <none>
 ├── fetch columns: c1:7 c2:8 c3:9 rowid:10
 ├── update-mapping:
 │    └── c1_new:13 => c1:1
 ├── check columns: rls:14
 └── project
      ├── columns: rls:14!null c1:7!null c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12 c1_new:13!null
      ├── project
      │    ├── columns: c1_new:13!null c1:7!null c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    ├── select
      │    │    ├── columns: c1:7!null c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    │    ├── select
      │    │    │    ├── columns: c1:7!null c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    │    │    ├── scan t1
      │    │    │    │    ├── columns: c1:7 c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    │    │    │    └── flags: avoid-full-scan
      │    │    │    └── filters
      │    │    │         └── ((c1:7 % 2) = 0) AND (c1:7 < 100)
      │    │    └── filters
      │    │         └── c1:7 > 0
      │    └── projections
      │         └── c1:7 * 2 [as=c1_new:13]
      └── projections
           └── ((c1_new:13 % 2) = 0) AND (c1_new:13 < 100) [as=rls:14]

# Verify a DELETE won't use policies for UPDATE.

build
DELETE FROM T1 WHERE c1 BETWEEN 0 AND 20;
----
delete t1
 ├── columns: <none>
 ├── fetch columns: c1:7 c2:8 c3:9 rowid:10
 └── select
      ├── columns: c1:7!null c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      ├── select
      │    ├── columns: c1:7 c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    ├── scan t1
      │    │    ├── columns: c1:7 c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    │    └── flags: avoid-full-scan
      │    └── filters
      │         └── false
      └── filters
           └── (c1:7 >= 0) AND (c1:7 <= 20)

exec-ddl
CREATE POLICY p3 on t1 FOR DELETE USING (c1 between 8 and 12);
----

build
DELETE FROM T1 WHERE c1 BETWEEN 0 AND 20;
----
delete t1
 ├── columns: <none>
 ├── fetch columns: c1:7 c2:8 c3:9 rowid:10
 └── select
      ├── columns: c1:7!null c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      ├── select
      │    ├── columns: c1:7!null c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    ├── scan t1
      │    │    ├── columns: c1:7 c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    │    └── flags: avoid-full-scan
      │    └── filters
      │         └── ((c1:7 % 2) = 0) AND ((c1:7 >= 8) AND (c1:7 <= 12))
      └── filters
           └── (c1:7 >= 0) AND (c1:7 <= 20)

exec-ddl
DROP POLICY p1 on t1;
----

exec-ddl
DROP POLICY p2 on t1;
----

exec-ddl
DROP POLICY p3 on t1;
----

# Verify policies only apply to a specific role.

exec-ddl
CREATE USER fred;
----

exec-ddl
CREATE POLICY p1 on t1 TO fred USING (c1 > 0);
----

build
SELECT c1 FROM t1 where C1 between 0 and 9;
----
project
 ├── columns: c1:1!null
 └── select
      ├── columns: c1:1!null c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      ├── select
      │    ├── columns: c1:1 c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      │    ├── scan t1
      │    │    └── columns: c1:1 c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      │    └── filters
      │         └── false
      └── filters
           └── (c1:1 >= 0) AND (c1:1 <= 9)

exec-ddl
SET ROLE fred;
----

build
SELECT c1 FROM t1 where C1 between 0 and 9;
----
project
 ├── columns: c1:1!null
 └── select
      ├── columns: c1:1!null c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      ├── select
      │    ├── columns: c1:1!null c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      │    ├── scan t1
      │    │    └── columns: c1:1 c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      │    └── filters
      │         └── c1:1 > 0
      └── filters
           └── (c1:1 >= 0) AND (c1:1 <= 9)

# Verify policies applied for insert

build
INSERT INTO t1 VALUES (0),(1),(2);
----
insert t1
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:7 => c1:1
 │    ├── c2_default:8 => c2:2
 │    ├── c3_default:9 => c3:3
 │    └── rowid_default:10 => rowid:4
 ├── check columns: rls:11
 └── project
      ├── columns: rls:11!null column1:7!null c2_default:8 c3_default:9 rowid_default:10
      ├── project
      │    ├── columns: c2_default:8 c3_default:9 rowid_default:10 column1:7!null
      │    ├── values
      │    │    ├── columns: column1:7!null
      │    │    ├── (0,)
      │    │    ├── (1,)
      │    │    └── (2,)
      │    └── projections
      │         ├── NULL::STRING [as=c2_default:8]
      │         ├── NULL::DATE [as=c3_default:9]
      │         └── unique_rowid() [as=rowid_default:10]
      └── projections
           └── column1:7 > 0 [as=rls:11]

# Verify policies apply to table with an existing check constraint.

exec-ddl
CREATE TABLE t1_with_check (c1 int, c2 int, CHECK (c1 > 0));
----

exec-ddl
ALTER TABLE t1_with_check ENABLE ROW LEVEL SECURITY;
----

exec-ddl
CREATE POLICY p1 on t1_with_check WITH CHECK (c2 > 2);
----

build
INSERT INTO t1_with_check VALUES (0);
----
insert t1_with_check
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:6 => c1:1
 │    ├── c2_default:7 => c2:2
 │    └── rowid_default:8 => rowid:3
 ├── check columns: check1:9 rls:10
 └── project
      ├── columns: check1:9!null rls:10 column1:6!null c2_default:7 rowid_default:8
      ├── project
      │    ├── columns: c2_default:7 rowid_default:8 column1:6!null
      │    ├── values
      │    │    ├── columns: column1:6!null
      │    │    └── (0,)
      │    └── projections
      │         ├── NULL::INT8 [as=c2_default:7]
      │         └── unique_rowid() [as=rowid_default:8]
      └── projections
           ├── column1:6 > 0 [as=check1:9]
           └── c2_default:7 > 2 [as=rls:10]

# Verify a policy that has no WITH CHECK will use the USING expression for new rows.

exec-ddl
DROP POLICY p1 on t1;
----

exec-ddl
CREATE POLICY p1 on t1 AS PERMISSIVE FOR SELECT TO fred USING (true);
----

exec-ddl
CREATE POLICY p2 on t1 AS PERMISSIVE FOR ALL TO fred USING (c2 = 'Hello, World' OR c3 = '2024-12-24');
----

build
INSERT INTO t1(c1) VALUES (10);
----
insert t1
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:7 => c1:1
 │    ├── c2_default:8 => c2:2
 │    ├── c3_default:9 => c3:3
 │    └── rowid_default:10 => rowid:4
 ├── check columns: rls:11
 └── project
      ├── columns: rls:11 column1:7!null c2_default:8 c3_default:9 rowid_default:10
      ├── project
      │    ├── columns: c2_default:8 c3_default:9 rowid_default:10 column1:7!null
      │    ├── values
      │    │    ├── columns: column1:7!null
      │    │    └── (10,)
      │    └── projections
      │         ├── NULL::STRING [as=c2_default:8]
      │         ├── NULL::DATE [as=c3_default:9]
      │         └── unique_rowid() [as=rowid_default:10]
      └── projections
           └── (c2_default:8 = 'Hello, World') OR (c3_default:9 = '2024-12-24') [as=rls:11]

build
UPDATE t1 SET c2 = 'new val';
----
update t1
 ├── columns: <none>
 ├── fetch columns: c1:7 c2:8 c3:9 rowid:10
 ├── update-mapping:
 │    └── c2_new:13 => c2:2
 ├── check columns: rls:14
 └── project
      ├── columns: rls:14 c1:7 c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12 c2_new:13!null
      ├── project
      │    ├── columns: c2_new:13!null c1:7 c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    ├── select
      │    │    ├── columns: c1:7 c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    │    ├── scan t1
      │    │    │    ├── columns: c1:7 c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    │    │    └── flags: avoid-full-scan
      │    │    └── filters
      │    │         └── (true OR ((c2:8 = 'Hello, World') OR (c3:9 = '2024-12-24'))) AND ((c2:8 = 'Hello, World') OR (c3:9 = '2024-12-24'))
      │    └── projections
      │         └── 'new val' [as=c2_new:13]
      └── projections
           └── (true OR ((c2_new:13 = 'Hello, World') OR (c3:9 = '2024-12-24'))) AND ((c2_new:13 = 'Hello, World') OR (c3:9 = '2024-12-24')) [as=rls:14]

# Verify insert and update code path when no policy applies to role.

exec-ddl
DROP POLICY p2 on t1;
----

build
INSERT INTO t1(c1) VALUES (10);
----
insert t1
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:7 => c1:1
 │    ├── c2_default:8 => c2:2
 │    ├── c3_default:9 => c3:3
 │    └── rowid_default:10 => rowid:4
 ├── check columns: rls:11
 └── project
      ├── columns: rls:11!null column1:7!null c2_default:8 c3_default:9 rowid_default:10
      ├── project
      │    ├── columns: c2_default:8 c3_default:9 rowid_default:10 column1:7!null
      │    ├── values
      │    │    ├── columns: column1:7!null
      │    │    └── (10,)
      │    └── projections
      │         ├── NULL::STRING [as=c2_default:8]
      │         ├── NULL::DATE [as=c3_default:9]
      │         └── unique_rowid() [as=rowid_default:10]
      └── projections
           └── false [as=rls:11]

build
UPDATE t1 SET c2 = 'new val';
----
update t1
 ├── columns: <none>
 ├── fetch columns: c1:7 c2:8 c3:9 rowid:10
 ├── update-mapping:
 │    └── c2_new:13 => c2:2
 ├── check columns: rls:14
 └── project
      ├── columns: rls:14!null c1:7 c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12 c2_new:13!null
      ├── project
      │    ├── columns: c2_new:13!null c1:7 c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    ├── select
      │    │    ├── columns: c1:7 c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    │    ├── scan t1
      │    │    │    ├── columns: c1:7 c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    │    │    └── flags: avoid-full-scan
      │    │    └── filters
      │    │         └── false
      │    └── projections
      │         └── 'new val' [as=c2_new:13]
      └── projections
           └── true AND false [as=rls:14]

# Verify that an INSERT ... SELECT statement applies the RLS check constraint
# and uses different policies for the SELECT and INSERT portions of the query.

exec-ddl
DROP POLICY p1 on t1;
----

exec-ddl
CREATE POLICY p_select on t1 FOR SELECT USING (c3 IN ('2013-06-02', '1988-07-01'));
----

exec-ddl
CREATE POLICY p_insert on t1 FOR INSERT USING (char_length(c2) < 10);
----

build
INSERT INTO t1 SELECT * FROM t1;
----
insert t1
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── c1:7 => c1:1
 │    ├── c2:8 => c2:2
 │    ├── c3:9 => c3:3
 │    └── rowid_default:13 => rowid:4
 ├── check columns: rls:14
 └── project
      ├── columns: rls:14 c1:7 c2:8 c3:9!null rowid_default:13
      ├── project
      │    ├── columns: rowid_default:13 c1:7 c2:8 c3:9!null
      │    ├── project
      │    │    ├── columns: c1:7 c2:8 c3:9!null
      │    │    └── select
      │    │         ├── columns: c1:7 c2:8 c3:9!null rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    │         ├── scan t1
      │    │         │    └── columns: c1:7 c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    │         └── filters
      │    │              └── c3:9 IN ('2013-06-02', '1988-07-01')
      │    └── projections
      │         └── unique_rowid() [as=rowid_default:13]
      └── projections
           └── char_length(c2:8) < 10 [as=rls:14]

exec-ddl
DROP POLICY p_select on t1;
----

exec-ddl
DROP POLICY p_insert on t1;
----

# Verify that an update fetches the column if a policy references it, even when
# the column itself is not being modified.

exec-ddl
CREATE POLICY p_select on t1 FOR SELECT USING (true);
----

exec-ddl
CREATE POLICY p_update on t1 FOR UPDATE USING (c3 in ('2025-01-01', '2024-12-31')) WITH CHECK (c2 like '%');
----

build
UPDATE t1 SET c1 = c1 + 1;
----
update t1
 ├── columns: <none>
 ├── fetch columns: c1:7 c2:8 c3:9 rowid:10
 ├── update-mapping:
 │    └── c1_new:13 => c1:1
 ├── check columns: rls:14
 └── project
      ├── columns: rls:14 c1:7 c2:8 c3:9!null rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12 c1_new:13
      ├── project
      │    ├── columns: c1_new:13 c1:7 c2:8 c3:9!null rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    ├── select
      │    │    ├── columns: c1:7 c2:8 c3:9!null rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    │    ├── scan t1
      │    │    │    ├── columns: c1:7 c2:8 c3:9 rowid:10!null crdb_internal_mvcc_timestamp:11 tableoid:12
      │    │    │    └── flags: avoid-full-scan
      │    │    └── filters
      │    │         └── true AND (c3:9 IN ('2025-01-01', '2024-12-31'))
      │    └── projections
      │         └── c1:7 + 1 [as=c1_new:13]
      └── projections
           └── true AND (c2:8 LIKE '%') [as=rls:14]

# Show that SELECT with the locking clauses causes the UPDATE policies to be applied.
build
SELECT c2 FROM t1 FOR SHARE
----
project
 ├── columns: c2:2
 └── select
      ├── columns: c1:1 c2:2 c3:3!null rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      ├── scan t1
      │    ├── columns: c1:1 c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      │    └── locking: for-share
      └── filters
           └── true AND (c3:3 IN ('2025-01-01', '2024-12-31'))

build
SELECT c3 FROM t1 FOR UPDATE
----
project
 ├── columns: c3:3!null
 └── select
      ├── columns: c1:1 c2:2 c3:3!null rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      ├── scan t1
      │    ├── columns: c1:1 c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      │    └── locking: for-update
      └── filters
           └── true AND (c3:3 IN ('2025-01-01', '2024-12-31'))

exec-ddl
DROP POLICY p_update on t1;
----

# Verify an upsert operation.
# TODO(141998): There is more work needed to enforce the proper policies for upsert.

exec-ddl
CREATE TABLE t1_explicit_pk (C1 INT NOT NULL PRIMARY KEY, C2 TEXT, C3 DATE);
----

exec-ddl
ALTER TABLE t1_explicit_pk ENABLE ROW LEVEL SECURITY;
----

exec-ddl
CREATE POLICY p_insert ON t1_explicit_pk FOR INSERT WITH CHECK (c3 != '2023-05-02');
----

exec-ddl
CREATE POLICY p_update ON t1_explicit_pk FOR UPDATE WITH CHECK (c3 >= '2000-01-01');
----

build
UPSERT INTO t1_explicit_pk VALUES (1, 'first', '2010-08-08');
----
upsert t1_explicit_pk
 ├── columns: <none>
 ├── upsert-mapping:
 │    ├── column1:6 => c1:1
 │    ├── column2:7 => c2:2
 │    └── column3:8 => c3:3
 ├── check columns: rls:9
 └── project
      ├── columns: rls:9!null column1:6!null column2:7!null column3:8!null
      ├── values
      │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    └── (1, 'first', '2010-08-08')
      └── projections
           └── column3:8 != '2023-05-02' [as=rls:9]

build
INSERT INTO t1_explicit_pk VALUES (2, 'second', '2008-11-19') ON CONFLICT DO NOTHING;
----
insert t1_explicit_pk
 ├── arbiter indexes: t1_explicit_pk_pkey
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:6 => c1:1
 │    ├── column2:7 => c2:2
 │    └── column3:8 => c3:3
 ├── check columns: rls:14
 └── project
      ├── columns: rls:14!null column1:6!null column2:7!null column3:8!null
      ├── upsert-distinct-on
      │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    ├── grouping columns: column1:6!null
      │    ├── anti-join (hash)
      │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    ├── values
      │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    │    └── (2, 'second', '2008-11-19')
      │    │    ├── scan t1_explicit_pk
      │    │    │    ├── columns: c1:9!null c2:10 c3:11
      │    │    │    └── flags: avoid-full-scan disabled not visible index feature
      │    │    └── filters
      │    │         └── column1:6 = c1:9
      │    └── aggregations
      │         ├── first-agg [as=column2:7]
      │         │    └── column2:7
      │         └── first-agg [as=column3:8]
      │              └── column3:8
      └── projections
           └── column3:8 != '2023-05-02' [as=rls:14]

build
INSERT INTO t1_explicit_pk VALUES (2, 'second', '2008-11-19') ON CONFLICT (c1) DO UPDATE SET c2 = 'updated';
----
upsert t1_explicit_pk
 ├── arbiter indexes: t1_explicit_pk_pkey
 ├── columns: <none>
 ├── canary column: c1:9
 ├── fetch columns: c1:9 c2:10 c3:11
 ├── insert-mapping:
 │    ├── column1:6 => c1:1
 │    ├── column2:7 => c2:2
 │    └── column3:8 => c3:3
 ├── update-mapping:
 │    └── upsert_c2:16 => c2:2
 ├── check columns: rls:18
 └── project
      ├── columns: rls:18 column1:6!null column2:7!null column3:8!null c1:9 c2:10 c3:11 crdb_internal_mvcc_timestamp:12 tableoid:13 c2_new:14!null upsert_c1:15 upsert_c2:16!null upsert_c3:17
      ├── project
      │    ├── columns: upsert_c1:15 upsert_c2:16!null upsert_c3:17 column1:6!null column2:7!null column3:8!null c1:9 c2:10 c3:11 crdb_internal_mvcc_timestamp:12 tableoid:13 c2_new:14!null
      │    ├── project
      │    │    ├── columns: c2_new:14!null column1:6!null column2:7!null column3:8!null c1:9 c2:10 c3:11 crdb_internal_mvcc_timestamp:12 tableoid:13
      │    │    ├── left-join (hash)
      │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null c1:9 c2:10 c3:11 crdb_internal_mvcc_timestamp:12 tableoid:13
      │    │    │    ├── ensure-upsert-distinct-on
      │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    │    │    ├── grouping columns: column1:6!null
      │    │    │    │    ├── values
      │    │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    │    │    │    │    └── (2, 'second', '2008-11-19')
      │    │    │    │    └── aggregations
      │    │    │    │         ├── first-agg [as=column2:7]
      │    │    │    │         │    └── column2:7
      │    │    │    │         └── first-agg [as=column3:8]
      │    │    │    │              └── column3:8
      │    │    │    ├── scan t1_explicit_pk
      │    │    │    │    ├── columns: c1:9!null c2:10 c3:11 crdb_internal_mvcc_timestamp:12 tableoid:13
      │    │    │    │    └── flags: avoid-full-scan disabled not visible index feature
      │    │    │    └── filters
      │    │    │         └── column1:6 = c1:9
      │    │    └── projections
      │    │         └── 'updated' [as=c2_new:14]
      │    └── projections
      │         ├── CASE WHEN c1:9 IS NULL THEN column1:6 ELSE c1:9 END [as=upsert_c1:15]
      │         ├── CASE WHEN c1:9 IS NULL THEN column2:7 ELSE c2_new:14 END [as=upsert_c2:16]
      │         └── CASE WHEN c1:9 IS NULL THEN column3:8 ELSE c3:11 END [as=upsert_c3:17]
      └── projections
           └── upsert_c3:17 != '2023-05-02' [as=rls:18]

exec-ddl
DROP POLICY p_insert ON t1_explicit_pk;
----

exec-ddl
DROP POLICY p_update ON t1_explicit_pk;
----

# Verify multiple policies on a table

exec-ddl
CREATE POLICY p1 ON t1_explicit_pk AS PERMISSIVE USING (c1 = 1);
----

exec-ddl
CREATE POLICY p2 ON t1_explicit_pk AS PERMISSIVE USING (c1 = 2);
----

exec-ddl
CREATE POLICY p3 ON t1_explicit_pk AS PERMISSIVE USING (c1 = 3);
----

exec-ddl
CREATE POLICY p4 ON t1_explicit_pk AS PERMISSIVE USING (c1 = 4);
----

exec-ddl
CREATE POLICY p5 ON t1_explicit_pk AS RESTRICTIVE USING (c1 % 2 = 0);
----

exec-ddl
CREATE POLICY p6 ON t1_explicit_pk AS RESTRICTIVE USING (c1 % 3 = 0);
----

build
SELECT c2 FROM t1_explicit_pk WHERE c3 >= '2025-01-01';
----
project
 ├── columns: c2:2
 └── select
      ├── columns: c1:1!null c2:2 c3:3!null crdb_internal_mvcc_timestamp:4 tableoid:5
      ├── select
      │    ├── columns: c1:1!null c2:2 c3:3 crdb_internal_mvcc_timestamp:4 tableoid:5
      │    ├── scan t1_explicit_pk
      │    │    └── columns: c1:1!null c2:2 c3:3 crdb_internal_mvcc_timestamp:4 tableoid:5
      │    └── filters
      │         └── (((((c1:1 = 1) OR (c1:1 = 2)) OR (c1:1 = 3)) OR (c1:1 = 4)) AND ((c1:1 % 2) = 0)) AND ((c1:1 % 3) = 0)
      └── filters
           └── c3:3 >= '2025-01-01'

build
INSERT INTO t1_explicit_pk VALUES (8, 'eight', '2002-05-04');
----
insert t1_explicit_pk
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:6 => c1:1
 │    ├── column2:7 => c2:2
 │    └── column3:8 => c3:3
 ├── check columns: rls:9
 └── project
      ├── columns: rls:9!null column1:6!null column2:7!null column3:8!null
      ├── values
      │    ├── columns: column1:6!null column2:7!null column3:8!null
      │    └── (8, 'eight', '2002-05-04')
      └── projections
           └── (((((column1:6 = 1) OR (column1:6 = 2)) OR (column1:6 = 3)) OR (column1:6 = 4)) AND ((column1:6 % 2) = 0)) AND ((column1:6 % 3) = 0) [as=rls:9]

build
UPDATE t1_explicit_pk SET c3 = now() WHERE c1 = 18;
----
update t1_explicit_pk
 ├── columns: <none>
 ├── fetch columns: c1:6 c2:7 c3:8
 ├── update-mapping:
 │    └── c3_new:11 => c3:3
 ├── check columns: rls:12
 └── project
      ├── columns: rls:12!null c1:6!null c2:7 c3:8 crdb_internal_mvcc_timestamp:9 tableoid:10 c3_new:11
      ├── project
      │    ├── columns: c3_new:11 c1:6!null c2:7 c3:8 crdb_internal_mvcc_timestamp:9 tableoid:10
      │    ├── select
      │    │    ├── columns: c1:6!null c2:7 c3:8 crdb_internal_mvcc_timestamp:9 tableoid:10
      │    │    ├── select
      │    │    │    ├── columns: c1:6!null c2:7 c3:8 crdb_internal_mvcc_timestamp:9 tableoid:10
      │    │    │    ├── scan t1_explicit_pk
      │    │    │    │    ├── columns: c1:6!null c2:7 c3:8 crdb_internal_mvcc_timestamp:9 tableoid:10
      │    │    │    │    └── flags: avoid-full-scan
      │    │    │    └── filters
      │    │    │         └── ((((((c1:6 = 1) OR (c1:6 = 2)) OR (c1:6 = 3)) OR (c1:6 = 4)) AND ((c1:6 % 2) = 0)) AND ((c1:6 % 3) = 0)) AND ((((((c1:6 = 1) OR (c1:6 = 2)) OR (c1:6 = 3)) OR (c1:6 = 4)) AND ((c1:6 % 2) = 0)) AND ((c1:6 % 3) = 0))
      │    │    └── filters
      │    │         └── c1:6 = 18
      │    └── projections
      │         └── now() [as=c3_new:11]
      └── projections
           └── ((((((c1:6 = 1) OR (c1:6 = 2)) OR (c1:6 = 3)) OR (c1:6 = 4)) AND ((c1:6 % 2) = 0)) AND ((c1:6 % 3) = 0)) AND ((((((c1:6 = 1) OR (c1:6 = 2)) OR (c1:6 = 3)) OR (c1:6 = 4)) AND ((c1:6 % 2) = 0)) AND ((c1:6 % 3) = 0)) [as=rls:12]

# Show that the owner, who is not admin, is exempt from policies unless FORCE
# option is set.

exec-ddl
ALTER TABLE t1 OWNER TO fred;
----

exec-ddl
CREATE POLICY p_read on t1 FOR SELECT TO fred USING (c2 != 'out of policy');
----

exec-ddl
CREATE POLICY p_write on t1 FOR INSERT TO fred WITH CHECK (c3 >= '2025-01-01');
----

# Show that querying and inserting into the table won't have the policy filter.
build
SELECT c1 FROM t1 where C1 between 0 and 9;
----
project
 ├── columns: c1:1!null
 └── select
      ├── columns: c1:1!null c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      ├── scan t1
      │    └── columns: c1:1 c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      └── filters
           └── (c1:1 >= 0) AND (c1:1 <= 9)

build
INSERT INTO t1(c1) VALUES (23);
----
insert t1
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:7 => c1:1
 │    ├── c2_default:8 => c2:2
 │    ├── c3_default:9 => c3:3
 │    └── rowid_default:10 => rowid:4
 ├── check columns: rls:11
 └── project
      ├── columns: rls:11!null column1:7!null c2_default:8 c3_default:9 rowid_default:10
      ├── project
      │    ├── columns: c2_default:8 c3_default:9 rowid_default:10 column1:7!null
      │    ├── values
      │    │    ├── columns: column1:7!null
      │    │    └── (23,)
      │    └── projections
      │         ├── NULL::STRING [as=c2_default:8]
      │         ├── NULL::DATE [as=c3_default:9]
      │         └── unique_rowid() [as=rowid_default:10]
      └── projections
           └── true [as=rls:11]

exec-ddl
ALTER TABLE t1 FORCE ROW LEVEL SECURITY
----

# Repeat the above DML, but this time with FORCE enabled. The policies will show up.
build
SELECT c1 FROM t1 where C1 between 0 and 9;
----
project
 ├── columns: c1:1!null
 └── select
      ├── columns: c1:1!null c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      ├── select
      │    ├── columns: c1:1 c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      │    ├── scan t1
      │    │    └── columns: c1:1 c2:2 c3:3 rowid:4!null crdb_internal_mvcc_timestamp:5 tableoid:6
      │    └── filters
      │         └── true OR (c2:2 != 'out of policy')
      └── filters
           └── (c1:1 >= 0) AND (c1:1 <= 9)

build
INSERT INTO t1(c1) VALUES (23);
----
insert t1
 ├── columns: <none>
 ├── insert-mapping:
 │    ├── column1:7 => c1:1
 │    ├── c2_default:8 => c2:2
 │    ├── c3_default:9 => c3:3
 │    └── rowid_default:10 => rowid:4
 ├── check columns: rls:11
 └── project
      ├── columns: rls:11 column1:7!null c2_default:8 c3_default:9 rowid_default:10
      ├── project
      │    ├── columns: c2_default:8 c3_default:9 rowid_default:10 column1:7!null
      │    ├── values
      │    │    ├── columns: column1:7!null
      │    │    └── (23,)
      │    └── projections
      │         ├── NULL::STRING [as=c2_default:8]
      │         ├── NULL::DATE [as=c3_default:9]
      │         └── unique_rowid() [as=rowid_default:10]
      └── projections
           └── c3_default:9 >= '2025-01-01' [as=rls:11]
