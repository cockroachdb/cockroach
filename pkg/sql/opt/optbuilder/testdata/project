exec-ddl
CREATE TABLE t.a (x INT PRIMARY KEY, y FLOAT)
----
TABLE a
 ├── x int not null
 ├── y float
 └── INDEX primary
      └── x int not null

exec-ddl
CREATE TABLE t.b (x INT, y FLOAT)
----
TABLE b
 ├── x int
 ├── y float
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

build
SELECT 5
----
project
 ├── columns: column1:int:null:1
 ├── values
 │    └── tuple [type=tuple{}]
 └── projections
      └── const: 5 [type=int]

build
SELECT a.x FROM t.a
----
project
 ├── columns: x:int:1
 ├── scan
 │    └── columns: a.x:int:1 a.y:float:null:2
 └── projections [outer=(1)]
      └── variable: a.x [type=int, outer=(1)]

build
SELECT a.x, a.y FROM t.a
----
scan
 └── columns: x:int:1 y:float:null:2

build
SELECT a.y, a.x FROM t.a
----
project
 ├── columns: y:float:null:2 x:int:1
 ├── scan
 │    └── columns: a.x:int:1 a.y:float:null:2
 └── projections [outer=(1,2)]
      ├── variable: a.y [type=float, outer=(2)]
      └── variable: a.x [type=int, outer=(1)]

build
SELECT * FROM t.a
----
scan
 └── columns: x:int:1 y:float:null:2

# Note that an explicit projection operator is added for table b (unlike for
# table a) to avoid projecting the hidden rowid column.
build
SELECT * FROM t.b
----
project
 ├── columns: x:int:null:1 y:float:null:2
 ├── scan
 │    └── columns: b.x:int:null:1 b.y:float:null:2 b.rowid:int:3
 └── projections [outer=(1,2)]
      ├── variable: b.x [type=int, outer=(1)]
      └── variable: b.y [type=float, outer=(2)]

build
SELECT (a.x + 3) AS "X", false AS "Y" FROM t.a
----
project
 ├── columns: X:int:null:3 Y:bool:null:4
 ├── scan
 │    └── columns: a.x:int:1 a.y:float:null:2
 └── projections [outer=(1)]
      ├── plus [type=int, outer=(1)]
      │    ├── variable: a.x [type=int, outer=(1)]
      │    └── const: 3 [type=int]
      └── false [type=bool]

build
SELECT *, ((x < y) OR x > 1000) FROM t.a
----
project
 ├── columns: x:int:1 y:float:null:2 column3:bool:null:3
 ├── scan
 │    └── columns: a.x:int:1 a.y:float:null:2
 └── projections [outer=(1,2)]
      ├── variable: a.x [type=int, outer=(1)]
      ├── variable: a.y [type=float, outer=(2)]
      └── or [type=bool, outer=(1,2)]
           ├── lt [type=bool, outer=(1,2)]
           │    ├── variable: a.x [type=int, outer=(1)]
           │    └── variable: a.y [type=float, outer=(2)]
           └── gt [type=bool, outer=(1)]
                ├── variable: a.x [type=int, outer=(1)]
                └── const: 1000 [type=int]

build
SELECT a.*, true FROM t.a
----
project
 ├── columns: x:int:1 y:float:null:2 column3:bool:null:3
 ├── scan
 │    └── columns: a.x:int:1 a.y:float:null:2
 └── projections [outer=(1,2)]
      ├── variable: a.x [type=int, outer=(1)]
      ├── variable: a.y [type=float, outer=(2)]
      └── true [type=bool]

build
SELECT u + 1, v + 1 FROM (SELECT a.x + 3, a.y + 1.0 FROM t.a) AS foo(u, v)
----
project
 ├── columns: column5:int:null:5 column6:float:null:6
 ├── project
 │    ├── columns: column3:int:null:3 column4:float:null:4
 │    ├── scan
 │    │    └── columns: a.x:int:1 a.y:float:null:2
 │    └── projections [outer=(1,2)]
 │         ├── plus [type=int, outer=(1)]
 │         │    ├── variable: a.x [type=int, outer=(1)]
 │         │    └── const: 3 [type=int]
 │         └── plus [type=float, outer=(2)]
 │              ├── variable: a.y [type=float, outer=(2)]
 │              └── const: 1.0 [type=float]
 └── projections [outer=(3,4)]
      ├── plus [type=int, outer=(3)]
      │    ├── variable: column3 [type=int, outer=(3)]
      │    └── const: 1 [type=int]
      └── plus [type=float, outer=(4)]
           ├── variable: column4 [type=float, outer=(4)]
           └── const: 1.0 [type=float]

build
SELECT rowid FROM b;
----
project
 ├── columns: rowid:int:3
 ├── scan
 │    └── columns: b.x:int:null:1 b.y:float:null:2 b.rowid:int:3
 └── projections [outer=(3)]
      └── variable: b.rowid [type=int, outer=(3)]

build
SELECT rowid FROM (SELECT * FROM b)
----
error: column name "rowid" not found

build
SELECT rowid FROM (SELECT rowid FROM b)
----
project
 ├── columns: rowid:int:3
 ├── scan
 │    └── columns: b.x:int:null:1 b.y:float:null:2 b.rowid:int:3
 └── projections [outer=(3)]
      └── variable: b.rowid [type=int, outer=(3)]

build
SELECT q.r FROM (SELECT rowid FROM b) AS q(r)
----
project
 ├── columns: r:int:3
 ├── scan
 │    └── columns: b.x:int:null:1 b.y:float:null:2 b.rowid:int:3
 └── projections [outer=(3)]
      └── variable: b.rowid [type=int, outer=(3)]

build
SELECT r FROM (SELECT rowid FROM b) AS q(r)
----
project
 ├── columns: r:int:3
 ├── scan
 │    └── columns: b.x:int:null:1 b.y:float:null:2 b.rowid:int:3
 └── projections [outer=(3)]
      └── variable: b.rowid [type=int, outer=(3)]

exec-ddl
CREATE TABLE c (x INT, y FLOAT)
----
TABLE c
 ├── x int
 ├── y float
 ├── rowid int not null (hidden)
 └── INDEX primary
      └── rowid int not null (hidden)

build
SELECT rowid FROM b, c
----
error: column reference "rowid" is ambiguous (candidates: b.rowid, c.rowid)

build
SELECT rowid::string FROM b
----
project
 ├── columns: column4:string:null:4
 ├── scan
 │    └── columns: b.x:int:null:1 b.y:float:null:2 b.rowid:int:3
 └── projections [outer=(3)]
      └── cast: string [type=string, outer=(3)]
           └── variable: b.rowid [type=int, outer=(3)]

build
SELECT (x, y)::timestamp FROM b
----
error: invalid cast: tuple{int, float} -> TIMESTAMP

build
SELECT CAST(x AS int[]) FROM b
----
error: invalid cast: int -> INT[]
