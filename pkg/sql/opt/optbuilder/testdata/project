exec-ddl
CREATE TABLE a (x INT PRIMARY KEY, y FLOAT)
----

exec-ddl
CREATE TABLE b (x INT, y FLOAT)
----

build
SELECT 5 r
----
project
 ├── columns: r:1!null
 ├── values
 │    └── ()
 └── projections
      └── 5 [as=r:1]

build
SELECT a.x FROM a
----
project
 ├── columns: x:1!null
 └── scan a
      └── columns: x:1!null y:2

build
SELECT a.x, a.y FROM a
----
scan a
 └── columns: x:1!null y:2

build
SELECT a.y, a.x FROM a
----
scan a
 └── columns: y:2 x:1!null

build
SELECT * FROM a
----
scan a
 └── columns: x:1!null y:2

# Note that an explicit projection operator is added for table b (unlike for
# table a) to avoid projecting the hidden rowid column.
build
SELECT * FROM b
----
project
 ├── columns: x:1 y:2
 └── scan b
      └── columns: x:1 y:2 rowid:3!null

build
SELECT (a.x + 3) AS "X", false AS "Y" FROM a
----
project
 ├── columns: X:3!null Y:4!null
 ├── scan a
 │    └── columns: x:1!null y:2
 └── projections
      ├── x:1 + 3 [as=X:3]
      └── false [as=Y:4]

build
SELECT *, ((x < y) OR x > 1000) AS r FROM a
----
project
 ├── columns: x:1!null y:2 r:3
 ├── scan a
 │    └── columns: x:1!null y:2
 └── projections
      └── (x:1 < y:2) OR (x:1 > 1000) [as=r:3]

build
SELECT a.*, true FROM a
----
project
 ├── columns: x:1!null y:2 bool:3!null
 ├── scan a
 │    └── columns: x:1!null y:2
 └── projections
      └── true [as=bool:3]

build
SELECT u + 1 AS r, v + 1 AS s FROM (SELECT a.x + 3 AS t, a.y + 1.0 AS u FROM a) AS foo(u, v)
----
project
 ├── columns: r:5!null s:6
 ├── project
 │    ├── columns: t:3!null u:4
 │    ├── scan a
 │    │    └── columns: x:1!null y:2
 │    └── projections
 │         ├── x:1 + 3 [as=t:3]
 │         └── y:2 + 1.0 [as=u:4]
 └── projections
      ├── t:3 + 1 [as=r:5]
      └── u:4 + 1.0 [as=s:6]

build
SELECT rowid FROM b;
----
project
 ├── columns: rowid:3!null
 └── scan b
      └── columns: x:1 y:2 rowid:3!null

build
SELECT rowid FROM (SELECT * FROM b)
----
error (42703): column "rowid" does not exist

build
SELECT rowid FROM (SELECT rowid FROM b)
----
project
 ├── columns: rowid:3!null
 └── scan b
      └── columns: x:1 y:2 rowid:3!null

build
SELECT q.r FROM (SELECT rowid FROM b) AS q(r)
----
project
 ├── columns: r:3!null
 └── scan b
      └── columns: x:1 y:2 rowid:3!null

build
SELECT r FROM (SELECT rowid FROM b) AS q(r)
----
project
 ├── columns: r:3!null
 └── scan b
      └── columns: x:1 y:2 rowid:3!null

exec-ddl
CREATE TABLE c (x INT, y FLOAT)
----

build
SELECT rowid FROM b, c
----
error (42702): column reference "rowid" is ambiguous (candidates: b.rowid, c.rowid)

build
SELECT x, y, rowid FROM c WHERE rowid > 0
----
select
 ├── columns: x:1 y:2 rowid:3!null
 ├── scan c
 │    └── columns: x:1 y:2 rowid:3!null
 └── filters
      └── rowid:3 > 0

build
SELECT r FROM (SELECT x, y, rowid AS r FROM c)
----
project
 ├── columns: r:3!null
 └── scan c
      └── columns: x:1 y:2 rowid:3!null

build
SELECT rowid::string FROM b
----
project
 ├── columns: rowid:4!null
 ├── scan b
 │    └── columns: x:1 y:2 b.rowid:3!null
 └── projections
      └── b.rowid:3::STRING [as=rowid:4]

build
SELECT (x, y)::timestamp FROM b
----
error (42846): invalid cast: tuple{int, float} -> timestamp

build
SELECT CAST(x AS int[]) FROM b
----
error (42846): invalid cast: int -> int[]

exec-ddl
CREATE TABLE abc (a INT PRIMARY KEY, b INT, c INT)
----

build
SELECT c FROM (SELECT a FROM abc)
----
error (42703): column "c" does not exist

build
SELECT c FROM (SELECT a FROM abc ORDER BY c)
----
error (42703): column "c" does not exist

build
SELECT c FROM (SELECT a, b FROM abc ORDER BY c)
----
error (42703): column "c" does not exist

build fully-qualify-names
SELECT t.kv.k FROM abc AS kv
----
error (42P01): no data source matches prefix: t.kv

exec-ddl
CREATE TABLE kv (k INT PRIMARY KEY, v INT)
----

build fully-qualify-names
SELECT t.kv.k FROM kv
----
project
 ├── columns: k:1!null
 └── scan t.public.kv
      └── columns: t.public.kv.k:1!null t.public.kv.v:2

# Check that tuple type includes labels.
build
SELECT x FROM (SELECT (row(v,v,v) AS a,b,c) AS x FROM kv)
----
project
 ├── columns: x:3
 ├── scan kv
 │    └── columns: k:1!null v:2
 └── projections
      └── ((v:2, v:2, v:2) AS a, b, c) [as=x:3]
