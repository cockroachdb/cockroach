exec-ddl
CREATE TABLE uniq (
  k INT PRIMARY KEY,
  v INT UNIQUE,
  w INT UNIQUE WITHOUT INDEX,
  x INT,
  y INT DEFAULT 5,
  UNIQUE WITHOUT INDEX (x, y)
)
----

exec-ddl
CREATE TABLE other (k INT, v INT, w INT NOT NULL, x INT, y INT)
----

# None of the upserted values have nulls.
build
UPSERT INTO uniq VALUES (1, 1, 1, 1, 1), (2, 2, 2, 2, 2)
----
upsert uniq
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: uniq.k:12
 ├── fetch columns: uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16
 ├── insert-mapping:
 │    ├── column1:7 => uniq.k:1
 │    ├── column2:8 => uniq.v:2
 │    ├── column3:9 => uniq.w:3
 │    ├── column4:10 => uniq.x:4
 │    └── column5:11 => uniq.y:5
 ├── update-mapping:
 │    ├── column2:8 => uniq.v:2
 │    ├── column3:9 => uniq.w:3
 │    ├── column4:10 => uniq.x:4
 │    └── column5:11 => uniq.y:5
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_k:18 column1:7!null column2:8!null column3:9!null column4:10!null column5:11!null uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17
 │    ├── left-join (hash)
 │    │    ├── columns: column1:7!null column2:8!null column3:9!null column4:10!null column5:11!null uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17
 │    │    ├── ensure-upsert-distinct-on
 │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null column4:10!null column5:11!null
 │    │    │    ├── grouping columns: column1:7!null
 │    │    │    ├── values
 │    │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null column4:10!null column5:11!null
 │    │    │    │    ├── (1, 1, 1, 1, 1)
 │    │    │    │    └── (2, 2, 2, 2, 2)
 │    │    │    └── aggregations
 │    │    │         ├── first-agg [as=column2:8]
 │    │    │         │    └── column2:8
 │    │    │         ├── first-agg [as=column3:9]
 │    │    │         │    └── column3:9
 │    │    │         ├── first-agg [as=column4:10]
 │    │    │         │    └── column4:10
 │    │    │         └── first-agg [as=column5:11]
 │    │    │              └── column5:11
 │    │    ├── scan uniq
 │    │    │    └── columns: uniq.k:12!null uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17
 │    │    └── filters
 │    │         └── column1:7 = uniq.k:12
 │    └── projections
 │         └── CASE WHEN uniq.k:12 IS NULL THEN column1:7 ELSE uniq.k:12 END [as=upsert_k:18]
 └── unique-checks
      ├── unique-checks-item: uniq(w)
      │    └── semi-join (hash)
      │         ├── columns: k:25 v:26!null w:27!null x:28!null y:29!null
      │         ├── with-scan &1
      │         │    ├── columns: k:25 v:26!null w:27!null x:28!null y:29!null
      │         │    └── mapping:
      │         │         ├──  upsert_k:18 => k:25
      │         │         ├──  column2:8 => v:26
      │         │         ├──  column3:9 => w:27
      │         │         ├──  column4:10 => x:28
      │         │         └──  column5:11 => y:29
      │         ├── scan uniq
      │         │    └── columns: uniq.k:19!null uniq.v:20 uniq.w:21 uniq.x:22 uniq.y:23
      │         └── filters
      │              ├── w:27 = uniq.w:21
      │              └── k:25 != uniq.k:19
      └── unique-checks-item: uniq(x,y)
           └── semi-join (hash)
                ├── columns: k:36 v:37!null w:38!null x:39!null y:40!null
                ├── with-scan &1
                │    ├── columns: k:36 v:37!null w:38!null x:39!null y:40!null
                │    └── mapping:
                │         ├──  upsert_k:18 => k:36
                │         ├──  column2:8 => v:37
                │         ├──  column3:9 => w:38
                │         ├──  column4:10 => x:39
                │         └──  column5:11 => y:40
                ├── scan uniq
                │    └── columns: uniq.k:30!null uniq.v:31 uniq.w:32 uniq.x:33 uniq.y:34
                └── filters
                     ├── x:39 = uniq.x:33
                     ├── y:40 = uniq.y:34
                     └── k:36 != uniq.k:30

# TODO(rytaft): The default value for x is NULL, and we're not updating either
# x or y. Therefore, we could avoid planning checks for (x,y) (see #58300).
build
UPSERT INTO uniq (k, v, w) VALUES (1, 1, 1), (2, 2, 2)
----
upsert uniq
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: uniq.k:12
 ├── fetch columns: uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16
 ├── insert-mapping:
 │    ├── column1:7 => uniq.k:1
 │    ├── column2:8 => uniq.v:2
 │    ├── column3:9 => uniq.w:3
 │    ├── column10:10 => uniq.x:4
 │    └── column11:11 => uniq.y:5
 ├── update-mapping:
 │    ├── column2:8 => uniq.v:2
 │    └── column3:9 => uniq.w:3
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_k:18 upsert_x:19 upsert_y:20 column1:7!null column2:8!null column3:9!null column10:10 column11:11!null uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17
 │    ├── left-join (hash)
 │    │    ├── columns: column1:7!null column2:8!null column3:9!null column10:10 column11:11!null uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17
 │    │    ├── ensure-upsert-distinct-on
 │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null column10:10 column11:11!null
 │    │    │    ├── grouping columns: column1:7!null
 │    │    │    ├── project
 │    │    │    │    ├── columns: column10:10 column11:11!null column1:7!null column2:8!null column3:9!null
 │    │    │    │    ├── values
 │    │    │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null
 │    │    │    │    │    ├── (1, 1, 1)
 │    │    │    │    │    └── (2, 2, 2)
 │    │    │    │    └── projections
 │    │    │    │         ├── NULL::INT8 [as=column10:10]
 │    │    │    │         └── 5 [as=column11:11]
 │    │    │    └── aggregations
 │    │    │         ├── first-agg [as=column2:8]
 │    │    │         │    └── column2:8
 │    │    │         ├── first-agg [as=column3:9]
 │    │    │         │    └── column3:9
 │    │    │         ├── first-agg [as=column10:10]
 │    │    │         │    └── column10:10
 │    │    │         └── first-agg [as=column11:11]
 │    │    │              └── column11:11
 │    │    ├── scan uniq
 │    │    │    └── columns: uniq.k:12!null uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17
 │    │    └── filters
 │    │         └── column1:7 = uniq.k:12
 │    └── projections
 │         ├── CASE WHEN uniq.k:12 IS NULL THEN column1:7 ELSE uniq.k:12 END [as=upsert_k:18]
 │         ├── CASE WHEN uniq.k:12 IS NULL THEN column10:10 ELSE uniq.x:15 END [as=upsert_x:19]
 │         └── CASE WHEN uniq.k:12 IS NULL THEN column11:11 ELSE uniq.y:16 END [as=upsert_y:20]
 └── unique-checks
      ├── unique-checks-item: uniq(w)
      │    └── semi-join (hash)
      │         ├── columns: k:27 v:28!null w:29!null x:30 y:31
      │         ├── with-scan &1
      │         │    ├── columns: k:27 v:28!null w:29!null x:30 y:31
      │         │    └── mapping:
      │         │         ├──  upsert_k:18 => k:27
      │         │         ├──  column2:8 => v:28
      │         │         ├──  column3:9 => w:29
      │         │         ├──  upsert_x:19 => x:30
      │         │         └──  upsert_y:20 => y:31
      │         ├── scan uniq
      │         │    └── columns: uniq.k:21!null uniq.v:22 uniq.w:23 uniq.x:24 uniq.y:25
      │         └── filters
      │              ├── w:29 = uniq.w:23
      │              └── k:27 != uniq.k:21
      └── unique-checks-item: uniq(x,y)
           └── semi-join (hash)
                ├── columns: k:38 v:39!null w:40!null x:41 y:42
                ├── with-scan &1
                │    ├── columns: k:38 v:39!null w:40!null x:41 y:42
                │    └── mapping:
                │         ├──  upsert_k:18 => k:38
                │         ├──  column2:8 => v:39
                │         ├──  column3:9 => w:40
                │         ├──  upsert_x:19 => x:41
                │         └──  upsert_y:20 => y:42
                ├── scan uniq
                │    └── columns: uniq.k:32!null uniq.v:33 uniq.w:34 uniq.x:35 uniq.y:36
                └── filters
                     ├── x:41 = uniq.x:35
                     ├── y:42 = uniq.y:36
                     └── k:38 != uniq.k:32

# TODO(rytaft): No need to plan checks for w since it's aways NULL.
# We currently can't determine that w is always NULL since the function
# OutputColumnIsAlwaysNull doesn't recurse into joins or group bys (see #58300).
build
UPSERT INTO uniq (k, w, x) VALUES (1, NULL, 1), (2, NULL, NULL)
----
upsert uniq
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: uniq.k:12
 ├── fetch columns: uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16
 ├── insert-mapping:
 │    ├── column1:7 => uniq.k:1
 │    ├── column10:10 => uniq.v:2
 │    ├── column2:8 => uniq.w:3
 │    ├── column3:9 => uniq.x:4
 │    └── column11:11 => uniq.y:5
 ├── update-mapping:
 │    ├── column2:8 => uniq.w:3
 │    └── column3:9 => uniq.x:4
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_k:18 upsert_v:19 upsert_y:20 column1:7!null column2:8 column3:9 column10:10 column11:11!null uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17
 │    ├── left-join (hash)
 │    │    ├── columns: column1:7!null column2:8 column3:9 column10:10 column11:11!null uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17
 │    │    ├── ensure-upsert-distinct-on
 │    │    │    ├── columns: column1:7!null column2:8 column3:9 column10:10 column11:11!null
 │    │    │    ├── grouping columns: column1:7!null
 │    │    │    ├── project
 │    │    │    │    ├── columns: column10:10 column11:11!null column1:7!null column2:8 column3:9
 │    │    │    │    ├── values
 │    │    │    │    │    ├── columns: column1:7!null column2:8 column3:9
 │    │    │    │    │    ├── (1, NULL::INT8, 1)
 │    │    │    │    │    └── (2, NULL::INT8, NULL::INT8)
 │    │    │    │    └── projections
 │    │    │    │         ├── NULL::INT8 [as=column10:10]
 │    │    │    │         └── 5 [as=column11:11]
 │    │    │    └── aggregations
 │    │    │         ├── first-agg [as=column2:8]
 │    │    │         │    └── column2:8
 │    │    │         ├── first-agg [as=column3:9]
 │    │    │         │    └── column3:9
 │    │    │         ├── first-agg [as=column10:10]
 │    │    │         │    └── column10:10
 │    │    │         └── first-agg [as=column11:11]
 │    │    │              └── column11:11
 │    │    ├── scan uniq
 │    │    │    └── columns: uniq.k:12!null uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17
 │    │    └── filters
 │    │         └── column1:7 = uniq.k:12
 │    └── projections
 │         ├── CASE WHEN uniq.k:12 IS NULL THEN column1:7 ELSE uniq.k:12 END [as=upsert_k:18]
 │         ├── CASE WHEN uniq.k:12 IS NULL THEN column10:10 ELSE uniq.v:13 END [as=upsert_v:19]
 │         └── CASE WHEN uniq.k:12 IS NULL THEN column11:11 ELSE uniq.y:16 END [as=upsert_y:20]
 └── unique-checks
      ├── unique-checks-item: uniq(w)
      │    └── semi-join (hash)
      │         ├── columns: k:27 v:28 w:29 x:30 y:31
      │         ├── with-scan &1
      │         │    ├── columns: k:27 v:28 w:29 x:30 y:31
      │         │    └── mapping:
      │         │         ├──  upsert_k:18 => k:27
      │         │         ├──  upsert_v:19 => v:28
      │         │         ├──  column2:8 => w:29
      │         │         ├──  column3:9 => x:30
      │         │         └──  upsert_y:20 => y:31
      │         ├── scan uniq
      │         │    └── columns: uniq.k:21!null uniq.v:22 uniq.w:23 uniq.x:24 uniq.y:25
      │         └── filters
      │              ├── w:29 = uniq.w:23
      │              └── k:27 != uniq.k:21
      └── unique-checks-item: uniq(x,y)
           └── semi-join (hash)
                ├── columns: k:38 v:39 w:40 x:41 y:42
                ├── with-scan &1
                │    ├── columns: k:38 v:39 w:40 x:41 y:42
                │    └── mapping:
                │         ├──  upsert_k:18 => k:38
                │         ├──  upsert_v:19 => v:39
                │         ├──  column2:8 => w:40
                │         ├──  column3:9 => x:41
                │         └──  upsert_y:20 => y:42
                ├── scan uniq
                │    └── columns: uniq.k:32!null uniq.v:33 uniq.w:34 uniq.x:35 uniq.y:36
                └── filters
                     ├── x:41 = uniq.x:35
                     ├── y:42 = uniq.y:36
                     └── k:38 != uniq.k:32

# Upsert with non-constant input.
# TODO(rytaft): The default value for x is NULL, and we're not updating either
# x or y. Therefore, we could avoid planning checks for (x,y) (see #58300).
build
UPSERT INTO uniq SELECT k, v, w FROM other
----
upsert uniq
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: uniq.k:16
 ├── fetch columns: uniq.k:16 uniq.v:17 uniq.w:18 uniq.x:19 uniq.y:20
 ├── insert-mapping:
 │    ├── other.k:7 => uniq.k:1
 │    ├── other.v:8 => uniq.v:2
 │    ├── other.w:9 => uniq.w:3
 │    ├── column14:14 => uniq.x:4
 │    └── column15:15 => uniq.y:5
 ├── update-mapping:
 │    ├── other.v:8 => uniq.v:2
 │    ├── other.w:9 => uniq.w:3
 │    ├── column14:14 => uniq.x:4
 │    └── column15:15 => uniq.y:5
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_k:22 other.k:7 other.v:8 other.w:9!null column14:14 column15:15!null uniq.k:16 uniq.v:17 uniq.w:18 uniq.x:19 uniq.y:20 uniq.crdb_internal_mvcc_timestamp:21
 │    ├── left-join (hash)
 │    │    ├── columns: other.k:7 other.v:8 other.w:9!null column14:14 column15:15!null uniq.k:16 uniq.v:17 uniq.w:18 uniq.x:19 uniq.y:20 uniq.crdb_internal_mvcc_timestamp:21
 │    │    ├── ensure-upsert-distinct-on
 │    │    │    ├── columns: other.k:7 other.v:8 other.w:9!null column14:14 column15:15!null
 │    │    │    ├── grouping columns: other.k:7
 │    │    │    ├── project
 │    │    │    │    ├── columns: column14:14 column15:15!null other.k:7 other.v:8 other.w:9!null
 │    │    │    │    ├── project
 │    │    │    │    │    ├── columns: other.k:7 other.v:8 other.w:9!null
 │    │    │    │    │    └── scan other
 │    │    │    │    │         └── columns: other.k:7 other.v:8 other.w:9!null other.x:10 other.y:11 rowid:12!null other.crdb_internal_mvcc_timestamp:13
 │    │    │    │    └── projections
 │    │    │    │         ├── NULL::INT8 [as=column14:14]
 │    │    │    │         └── 5 [as=column15:15]
 │    │    │    └── aggregations
 │    │    │         ├── first-agg [as=other.v:8]
 │    │    │         │    └── other.v:8
 │    │    │         ├── first-agg [as=other.w:9]
 │    │    │         │    └── other.w:9
 │    │    │         ├── first-agg [as=column14:14]
 │    │    │         │    └── column14:14
 │    │    │         └── first-agg [as=column15:15]
 │    │    │              └── column15:15
 │    │    ├── scan uniq
 │    │    │    └── columns: uniq.k:16!null uniq.v:17 uniq.w:18 uniq.x:19 uniq.y:20 uniq.crdb_internal_mvcc_timestamp:21
 │    │    └── filters
 │    │         └── other.k:7 = uniq.k:16
 │    └── projections
 │         └── CASE WHEN uniq.k:16 IS NULL THEN other.k:7 ELSE uniq.k:16 END [as=upsert_k:22]
 └── unique-checks
      ├── unique-checks-item: uniq(w)
      │    └── semi-join (hash)
      │         ├── columns: k:29 v:30 w:31!null x:32 y:33!null
      │         ├── with-scan &1
      │         │    ├── columns: k:29 v:30 w:31!null x:32 y:33!null
      │         │    └── mapping:
      │         │         ├──  upsert_k:22 => k:29
      │         │         ├──  other.v:8 => v:30
      │         │         ├──  other.w:9 => w:31
      │         │         ├──  column14:14 => x:32
      │         │         └──  column15:15 => y:33
      │         ├── scan uniq
      │         │    └── columns: uniq.k:23!null uniq.v:24 uniq.w:25 uniq.x:26 uniq.y:27
      │         └── filters
      │              ├── w:31 = uniq.w:25
      │              └── k:29 != uniq.k:23
      └── unique-checks-item: uniq(x,y)
           └── semi-join (hash)
                ├── columns: k:40 v:41 w:42!null x:43 y:44!null
                ├── with-scan &1
                │    ├── columns: k:40 v:41 w:42!null x:43 y:44!null
                │    └── mapping:
                │         ├──  upsert_k:22 => k:40
                │         ├──  other.v:8 => v:41
                │         ├──  other.w:9 => w:42
                │         ├──  column14:14 => x:43
                │         └──  column15:15 => y:44
                ├── scan uniq
                │    └── columns: uniq.k:34!null uniq.v:35 uniq.w:36 uniq.x:37 uniq.y:38
                └── filters
                     ├── x:43 = uniq.x:37
                     ├── y:44 = uniq.y:38
                     └── k:40 != uniq.k:34

# On conflict do update with constant input.
# TODO(rytaft): The default value for x is NULL, and we're not updating either
# x or y. Therefore, we could avoid planning checks for (x,y). w is also NULL
# here, so we could avoid planning checks for w too (see #58300).
build
INSERT INTO uniq VALUES (100, 1), (200, 1) ON CONFLICT (k) DO UPDATE SET w = excluded.w + 1
----
upsert uniq
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: uniq.k:11
 ├── fetch columns: uniq.k:11 uniq.v:12 uniq.w:13 uniq.x:14 uniq.y:15
 ├── insert-mapping:
 │    ├── column1:7 => uniq.k:1
 │    ├── column2:8 => uniq.v:2
 │    ├── column9:9 => uniq.w:3
 │    ├── column9:9 => uniq.x:4
 │    └── column10:10 => uniq.y:5
 ├── update-mapping:
 │    └── upsert_w:20 => uniq.w:3
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_k:18 upsert_v:19 upsert_w:20 upsert_x:21 upsert_y:22 column1:7!null column2:8!null column9:9 column10:10!null uniq.k:11 uniq.v:12 uniq.w:13 uniq.x:14 uniq.y:15 crdb_internal_mvcc_timestamp:16 w_new:17
 │    ├── project
 │    │    ├── columns: w_new:17 column1:7!null column2:8!null column9:9 column10:10!null uniq.k:11 uniq.v:12 uniq.w:13 uniq.x:14 uniq.y:15 crdb_internal_mvcc_timestamp:16
 │    │    ├── left-join (hash)
 │    │    │    ├── columns: column1:7!null column2:8!null column9:9 column10:10!null uniq.k:11 uniq.v:12 uniq.w:13 uniq.x:14 uniq.y:15 crdb_internal_mvcc_timestamp:16
 │    │    │    ├── ensure-upsert-distinct-on
 │    │    │    │    ├── columns: column1:7!null column2:8!null column9:9 column10:10!null
 │    │    │    │    ├── grouping columns: column1:7!null
 │    │    │    │    ├── project
 │    │    │    │    │    ├── columns: column9:9 column10:10!null column1:7!null column2:8!null
 │    │    │    │    │    ├── values
 │    │    │    │    │    │    ├── columns: column1:7!null column2:8!null
 │    │    │    │    │    │    ├── (100, 1)
 │    │    │    │    │    │    └── (200, 1)
 │    │    │    │    │    └── projections
 │    │    │    │    │         ├── NULL::INT8 [as=column9:9]
 │    │    │    │    │         └── 5 [as=column10:10]
 │    │    │    │    └── aggregations
 │    │    │    │         ├── first-agg [as=column2:8]
 │    │    │    │         │    └── column2:8
 │    │    │    │         ├── first-agg [as=column9:9]
 │    │    │    │         │    └── column9:9
 │    │    │    │         └── first-agg [as=column10:10]
 │    │    │    │              └── column10:10
 │    │    │    ├── scan uniq
 │    │    │    │    └── columns: uniq.k:11!null uniq.v:12 uniq.w:13 uniq.x:14 uniq.y:15 crdb_internal_mvcc_timestamp:16
 │    │    │    └── filters
 │    │    │         └── column1:7 = uniq.k:11
 │    │    └── projections
 │    │         └── column9:9 + 1 [as=w_new:17]
 │    └── projections
 │         ├── CASE WHEN uniq.k:11 IS NULL THEN column1:7 ELSE uniq.k:11 END [as=upsert_k:18]
 │         ├── CASE WHEN uniq.k:11 IS NULL THEN column2:8 ELSE uniq.v:12 END [as=upsert_v:19]
 │         ├── CASE WHEN uniq.k:11 IS NULL THEN column9:9 ELSE w_new:17 END [as=upsert_w:20]
 │         ├── CASE WHEN uniq.k:11 IS NULL THEN column9:9 ELSE uniq.x:14 END [as=upsert_x:21]
 │         └── CASE WHEN uniq.k:11 IS NULL THEN column10:10 ELSE uniq.y:15 END [as=upsert_y:22]
 └── unique-checks
      ├── unique-checks-item: uniq(w)
      │    └── semi-join (hash)
      │         ├── columns: k:29 v:30 w:31 x:32 y:33
      │         ├── with-scan &1
      │         │    ├── columns: k:29 v:30 w:31 x:32 y:33
      │         │    └── mapping:
      │         │         ├──  upsert_k:18 => k:29
      │         │         ├──  upsert_v:19 => v:30
      │         │         ├──  upsert_w:20 => w:31
      │         │         ├──  upsert_x:21 => x:32
      │         │         └──  upsert_y:22 => y:33
      │         ├── scan uniq
      │         │    └── columns: uniq.k:23!null uniq.v:24 uniq.w:25 uniq.x:26 uniq.y:27
      │         └── filters
      │              ├── w:31 = uniq.w:25
      │              └── k:29 != uniq.k:23
      └── unique-checks-item: uniq(x,y)
           └── semi-join (hash)
                ├── columns: k:40 v:41 w:42 x:43 y:44
                ├── with-scan &1
                │    ├── columns: k:40 v:41 w:42 x:43 y:44
                │    └── mapping:
                │         ├──  upsert_k:18 => k:40
                │         ├──  upsert_v:19 => v:41
                │         ├──  upsert_w:20 => w:42
                │         ├──  upsert_x:21 => x:43
                │         └──  upsert_y:22 => y:44
                ├── scan uniq
                │    └── columns: uniq.k:34!null uniq.v:35 uniq.w:36 uniq.x:37 uniq.y:38
                └── filters
                     ├── x:43 = uniq.x:37
                     ├── y:44 = uniq.y:38
                     └── k:40 != uniq.k:34

# On conflict do update with non-constant input.
# TODO(rytaft): The default value for x is NULL, and we're not updating either
# x or y. Therefore, we could avoid planning checks for (x,y) (see #58300).
build
INSERT INTO uniq SELECT k, v FROM other ON CONFLICT (k) DO UPDATE SET w = uniq.k + 1
----
upsert uniq
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: uniq.k:16
 ├── fetch columns: uniq.k:16 uniq.v:17 uniq.w:18 uniq.x:19 uniq.y:20
 ├── insert-mapping:
 │    ├── other.k:7 => uniq.k:1
 │    ├── other.v:8 => uniq.v:2
 │    ├── column14:14 => uniq.w:3
 │    ├── column14:14 => uniq.x:4
 │    └── column15:15 => uniq.y:5
 ├── update-mapping:
 │    └── upsert_w:25 => uniq.w:3
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_k:23 upsert_v:24 upsert_w:25 upsert_x:26 upsert_y:27 other.k:7 other.v:8 column14:14 column15:15!null uniq.k:16 uniq.v:17 uniq.w:18 uniq.x:19 uniq.y:20 uniq.crdb_internal_mvcc_timestamp:21 w_new:22
 │    ├── project
 │    │    ├── columns: w_new:22 other.k:7 other.v:8 column14:14 column15:15!null uniq.k:16 uniq.v:17 uniq.w:18 uniq.x:19 uniq.y:20 uniq.crdb_internal_mvcc_timestamp:21
 │    │    ├── left-join (hash)
 │    │    │    ├── columns: other.k:7 other.v:8 column14:14 column15:15!null uniq.k:16 uniq.v:17 uniq.w:18 uniq.x:19 uniq.y:20 uniq.crdb_internal_mvcc_timestamp:21
 │    │    │    ├── ensure-upsert-distinct-on
 │    │    │    │    ├── columns: other.k:7 other.v:8 column14:14 column15:15!null
 │    │    │    │    ├── grouping columns: other.k:7
 │    │    │    │    ├── project
 │    │    │    │    │    ├── columns: column14:14 column15:15!null other.k:7 other.v:8
 │    │    │    │    │    ├── project
 │    │    │    │    │    │    ├── columns: other.k:7 other.v:8
 │    │    │    │    │    │    └── scan other
 │    │    │    │    │    │         └── columns: other.k:7 other.v:8 other.w:9!null other.x:10 other.y:11 rowid:12!null other.crdb_internal_mvcc_timestamp:13
 │    │    │    │    │    └── projections
 │    │    │    │    │         ├── NULL::INT8 [as=column14:14]
 │    │    │    │    │         └── 5 [as=column15:15]
 │    │    │    │    └── aggregations
 │    │    │    │         ├── first-agg [as=other.v:8]
 │    │    │    │         │    └── other.v:8
 │    │    │    │         ├── first-agg [as=column14:14]
 │    │    │    │         │    └── column14:14
 │    │    │    │         └── first-agg [as=column15:15]
 │    │    │    │              └── column15:15
 │    │    │    ├── scan uniq
 │    │    │    │    └── columns: uniq.k:16!null uniq.v:17 uniq.w:18 uniq.x:19 uniq.y:20 uniq.crdb_internal_mvcc_timestamp:21
 │    │    │    └── filters
 │    │    │         └── other.k:7 = uniq.k:16
 │    │    └── projections
 │    │         └── uniq.k:16 + 1 [as=w_new:22]
 │    └── projections
 │         ├── CASE WHEN uniq.k:16 IS NULL THEN other.k:7 ELSE uniq.k:16 END [as=upsert_k:23]
 │         ├── CASE WHEN uniq.k:16 IS NULL THEN other.v:8 ELSE uniq.v:17 END [as=upsert_v:24]
 │         ├── CASE WHEN uniq.k:16 IS NULL THEN column14:14 ELSE w_new:22 END [as=upsert_w:25]
 │         ├── CASE WHEN uniq.k:16 IS NULL THEN column14:14 ELSE uniq.x:19 END [as=upsert_x:26]
 │         └── CASE WHEN uniq.k:16 IS NULL THEN column15:15 ELSE uniq.y:20 END [as=upsert_y:27]
 └── unique-checks
      ├── unique-checks-item: uniq(w)
      │    └── semi-join (hash)
      │         ├── columns: k:34 v:35 w:36 x:37 y:38
      │         ├── with-scan &1
      │         │    ├── columns: k:34 v:35 w:36 x:37 y:38
      │         │    └── mapping:
      │         │         ├──  upsert_k:23 => k:34
      │         │         ├──  upsert_v:24 => v:35
      │         │         ├──  upsert_w:25 => w:36
      │         │         ├──  upsert_x:26 => x:37
      │         │         └──  upsert_y:27 => y:38
      │         ├── scan uniq
      │         │    └── columns: uniq.k:28!null uniq.v:29 uniq.w:30 uniq.x:31 uniq.y:32
      │         └── filters
      │              ├── w:36 = uniq.w:30
      │              └── k:34 != uniq.k:28
      └── unique-checks-item: uniq(x,y)
           └── semi-join (hash)
                ├── columns: k:45 v:46 w:47 x:48 y:49
                ├── with-scan &1
                │    ├── columns: k:45 v:46 w:47 x:48 y:49
                │    └── mapping:
                │         ├──  upsert_k:23 => k:45
                │         ├──  upsert_v:24 => v:46
                │         ├──  upsert_w:25 => w:47
                │         ├──  upsert_x:26 => x:48
                │         └──  upsert_y:27 => y:49
                ├── scan uniq
                │    └── columns: uniq.k:39!null uniq.v:40 uniq.w:41 uniq.x:42 uniq.y:43
                └── filters
                     ├── x:48 = uniq.x:42
                     ├── y:49 = uniq.y:43
                     └── k:45 != uniq.k:39

# On conflict do update with constant input, conflict on UNIQUE WITHOUT INDEX
# column.
build
INSERT INTO uniq VALUES (100, 10, 1), (200, 20, 2) ON CONFLICT (w) DO UPDATE SET w = 10
----
upsert uniq
 ├── columns: <none>
 ├── arbiter constraints: unique_w
 ├── canary column: uniq.k:12
 ├── fetch columns: uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16
 ├── insert-mapping:
 │    ├── column1:7 => uniq.k:1
 │    ├── column2:8 => uniq.v:2
 │    ├── column3:9 => uniq.w:3
 │    ├── column10:10 => uniq.x:4
 │    └── column11:11 => uniq.y:5
 ├── update-mapping:
 │    └── upsert_w:21 => uniq.w:3
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_k:19 upsert_v:20 upsert_w:21!null upsert_x:22 upsert_y:23 column1:7!null column2:8!null column3:9!null column10:10 column11:11!null uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17 w_new:18!null
 │    ├── project
 │    │    ├── columns: w_new:18!null column1:7!null column2:8!null column3:9!null column10:10 column11:11!null uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17
 │    │    ├── left-join (hash)
 │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null column10:10 column11:11!null uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17
 │    │    │    ├── ensure-upsert-distinct-on
 │    │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null column10:10 column11:11!null
 │    │    │    │    ├── grouping columns: column3:9!null
 │    │    │    │    ├── project
 │    │    │    │    │    ├── columns: column10:10 column11:11!null column1:7!null column2:8!null column3:9!null
 │    │    │    │    │    ├── values
 │    │    │    │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null
 │    │    │    │    │    │    ├── (100, 10, 1)
 │    │    │    │    │    │    └── (200, 20, 2)
 │    │    │    │    │    └── projections
 │    │    │    │    │         ├── NULL::INT8 [as=column10:10]
 │    │    │    │    │         └── 5 [as=column11:11]
 │    │    │    │    └── aggregations
 │    │    │    │         ├── first-agg [as=column1:7]
 │    │    │    │         │    └── column1:7
 │    │    │    │         ├── first-agg [as=column2:8]
 │    │    │    │         │    └── column2:8
 │    │    │    │         ├── first-agg [as=column10:10]
 │    │    │    │         │    └── column10:10
 │    │    │    │         └── first-agg [as=column11:11]
 │    │    │    │              └── column11:11
 │    │    │    ├── scan uniq
 │    │    │    │    └── columns: uniq.k:12!null uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17
 │    │    │    └── filters
 │    │    │         └── column3:9 = uniq.w:14
 │    │    └── projections
 │    │         └── 10 [as=w_new:18]
 │    └── projections
 │         ├── CASE WHEN uniq.k:12 IS NULL THEN column1:7 ELSE uniq.k:12 END [as=upsert_k:19]
 │         ├── CASE WHEN uniq.k:12 IS NULL THEN column2:8 ELSE uniq.v:13 END [as=upsert_v:20]
 │         ├── CASE WHEN uniq.k:12 IS NULL THEN column3:9 ELSE w_new:18 END [as=upsert_w:21]
 │         ├── CASE WHEN uniq.k:12 IS NULL THEN column10:10 ELSE uniq.x:15 END [as=upsert_x:22]
 │         └── CASE WHEN uniq.k:12 IS NULL THEN column11:11 ELSE uniq.y:16 END [as=upsert_y:23]
 └── unique-checks
      ├── unique-checks-item: uniq(w)
      │    └── semi-join (hash)
      │         ├── columns: k:30 v:31 w:32!null x:33 y:34
      │         ├── with-scan &1
      │         │    ├── columns: k:30 v:31 w:32!null x:33 y:34
      │         │    └── mapping:
      │         │         ├──  upsert_k:19 => k:30
      │         │         ├──  upsert_v:20 => v:31
      │         │         ├──  upsert_w:21 => w:32
      │         │         ├──  upsert_x:22 => x:33
      │         │         └──  upsert_y:23 => y:34
      │         ├── scan uniq
      │         │    └── columns: uniq.k:24!null uniq.v:25 uniq.w:26 uniq.x:27 uniq.y:28
      │         └── filters
      │              ├── w:32 = uniq.w:26
      │              └── k:30 != uniq.k:24
      └── unique-checks-item: uniq(x,y)
           └── semi-join (hash)
                ├── columns: k:41 v:42 w:43!null x:44 y:45
                ├── with-scan &1
                │    ├── columns: k:41 v:42 w:43!null x:44 y:45
                │    └── mapping:
                │         ├──  upsert_k:19 => k:41
                │         ├──  upsert_v:20 => v:42
                │         ├──  upsert_w:21 => w:43
                │         ├──  upsert_x:22 => x:44
                │         └──  upsert_y:23 => y:45
                ├── scan uniq
                │    └── columns: uniq.k:35!null uniq.v:36 uniq.w:37 uniq.x:38 uniq.y:39
                └── filters
                     ├── x:44 = uniq.x:38
                     ├── y:45 = uniq.y:39
                     └── k:41 != uniq.k:35

# On conflict do update with constant input, conflict on UNIQUE WITHOUT INDEX
# columns.
build
INSERT INTO uniq VALUES (1, 2, 3, 4, 5) ON CONFLICT (x, y) DO UPDATE SET v = 10
----
upsert uniq
 ├── columns: <none>
 ├── arbiter constraints: unique_x_y
 ├── canary column: uniq.k:12
 ├── fetch columns: uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16
 ├── insert-mapping:
 │    ├── column1:7 => uniq.k:1
 │    ├── column2:8 => uniq.v:2
 │    ├── column3:9 => uniq.w:3
 │    ├── column4:10 => uniq.x:4
 │    └── column5:11 => uniq.y:5
 ├── update-mapping:
 │    └── upsert_v:20 => uniq.v:2
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_k:19 upsert_v:20!null upsert_w:21 upsert_x:22 upsert_y:23 column1:7!null column2:8!null column3:9!null column4:10!null column5:11!null uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17 v_new:18!null
 │    ├── project
 │    │    ├── columns: v_new:18!null column1:7!null column2:8!null column3:9!null column4:10!null column5:11!null uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17
 │    │    ├── left-join (hash)
 │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null column4:10!null column5:11!null uniq.k:12 uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17
 │    │    │    ├── ensure-upsert-distinct-on
 │    │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null column4:10!null column5:11!null
 │    │    │    │    ├── grouping columns: column4:10!null column5:11!null
 │    │    │    │    ├── values
 │    │    │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null column4:10!null column5:11!null
 │    │    │    │    │    └── (1, 2, 3, 4, 5)
 │    │    │    │    └── aggregations
 │    │    │    │         ├── first-agg [as=column1:7]
 │    │    │    │         │    └── column1:7
 │    │    │    │         ├── first-agg [as=column2:8]
 │    │    │    │         │    └── column2:8
 │    │    │    │         └── first-agg [as=column3:9]
 │    │    │    │              └── column3:9
 │    │    │    ├── scan uniq
 │    │    │    │    └── columns: uniq.k:12!null uniq.v:13 uniq.w:14 uniq.x:15 uniq.y:16 crdb_internal_mvcc_timestamp:17
 │    │    │    └── filters
 │    │    │         ├── column4:10 = uniq.x:15
 │    │    │         └── column5:11 = uniq.y:16
 │    │    └── projections
 │    │         └── 10 [as=v_new:18]
 │    └── projections
 │         ├── CASE WHEN uniq.k:12 IS NULL THEN column1:7 ELSE uniq.k:12 END [as=upsert_k:19]
 │         ├── CASE WHEN uniq.k:12 IS NULL THEN column2:8 ELSE v_new:18 END [as=upsert_v:20]
 │         ├── CASE WHEN uniq.k:12 IS NULL THEN column3:9 ELSE uniq.w:14 END [as=upsert_w:21]
 │         ├── CASE WHEN uniq.k:12 IS NULL THEN column4:10 ELSE uniq.x:15 END [as=upsert_x:22]
 │         └── CASE WHEN uniq.k:12 IS NULL THEN column5:11 ELSE uniq.y:16 END [as=upsert_y:23]
 └── unique-checks
      ├── unique-checks-item: uniq(w)
      │    └── semi-join (hash)
      │         ├── columns: k:30 v:31!null w:32 x:33 y:34
      │         ├── with-scan &1
      │         │    ├── columns: k:30 v:31!null w:32 x:33 y:34
      │         │    └── mapping:
      │         │         ├──  upsert_k:19 => k:30
      │         │         ├──  upsert_v:20 => v:31
      │         │         ├──  upsert_w:21 => w:32
      │         │         ├──  upsert_x:22 => x:33
      │         │         └──  upsert_y:23 => y:34
      │         ├── scan uniq
      │         │    └── columns: uniq.k:24!null uniq.v:25 uniq.w:26 uniq.x:27 uniq.y:28
      │         └── filters
      │              ├── w:32 = uniq.w:26
      │              └── k:30 != uniq.k:24
      └── unique-checks-item: uniq(x,y)
           └── semi-join (hash)
                ├── columns: k:41 v:42!null w:43 x:44 y:45
                ├── with-scan &1
                │    ├── columns: k:41 v:42!null w:43 x:44 y:45
                │    └── mapping:
                │         ├──  upsert_k:19 => k:41
                │         ├──  upsert_v:20 => v:42
                │         ├──  upsert_w:21 => w:43
                │         ├──  upsert_x:22 => x:44
                │         └──  upsert_y:23 => y:45
                ├── scan uniq
                │    └── columns: uniq.k:35!null uniq.v:36 uniq.w:37 uniq.x:38 uniq.y:39
                └── filters
                     ├── x:44 = uniq.x:38
                     ├── y:45 = uniq.y:39
                     └── k:41 != uniq.k:35

# Cannot conflict on a subset of columns in a unique constraint.
build
INSERT INTO uniq VALUES (1, 2, 3, 4, 5) ON CONFLICT (x) DO UPDATE SET v = 10
----
error (42P10): there is no unique or exclusion constraint matching the ON CONFLICT specification

# Cannot conflict on a superset of columns in a unique constraint.
build
INSERT INTO uniq VALUES (1, 2, 3, 4, 5) ON CONFLICT (w, x, y) DO UPDATE SET v = 10
----
error (42P10): there is no unique or exclusion constraint matching the ON CONFLICT specification

exec-ddl
CREATE TABLE uniq_overlaps_pk (
  a INT,
  b INT,
  c INT,
  d INT,
  PRIMARY KEY (a, b),
  UNIQUE WITHOUT INDEX (b, c),
  UNIQUE WITHOUT INDEX (a, b, d),
  UNIQUE WITHOUT INDEX (a),
  UNIQUE WITHOUT INDEX (c, d)
)
----

# Upsert with constant input.
# Add inequality filters for the primary key columns that are not part of each
# unique constraint to prevent rows from matching themselves in the semi join.
build
UPSERT INTO uniq_overlaps_pk VALUES (1, 1, 1, 1), (2, 2, 2, 2)
----
upsert uniq_overlaps_pk
 ├── columns: <none>
 ├── upsert-mapping:
 │    ├── column1:6 => uniq_overlaps_pk.a:1
 │    ├── column2:7 => uniq_overlaps_pk.b:2
 │    ├── column3:8 => uniq_overlaps_pk.c:3
 │    └── column4:9 => uniq_overlaps_pk.d:4
 ├── input binding: &1
 ├── values
 │    ├── columns: column1:6!null column2:7!null column3:8!null column4:9!null
 │    ├── (1, 1, 1, 1)
 │    └── (2, 2, 2, 2)
 └── unique-checks
      ├── unique-checks-item: uniq_overlaps_pk(b,c)
      │    └── semi-join (hash)
      │         ├── columns: a:15!null b:16!null c:17!null d:18!null
      │         ├── with-scan &1
      │         │    ├── columns: a:15!null b:16!null c:17!null d:18!null
      │         │    └── mapping:
      │         │         ├──  column1:6 => a:15
      │         │         ├──  column2:7 => b:16
      │         │         ├──  column3:8 => c:17
      │         │         └──  column4:9 => d:18
      │         ├── scan uniq_overlaps_pk
      │         │    └── columns: uniq_overlaps_pk.a:10!null uniq_overlaps_pk.b:11!null uniq_overlaps_pk.c:12 uniq_overlaps_pk.d:13
      │         └── filters
      │              ├── b:16 = uniq_overlaps_pk.b:11
      │              ├── c:17 = uniq_overlaps_pk.c:12
      │              └── a:15 != uniq_overlaps_pk.a:10
      ├── unique-checks-item: uniq_overlaps_pk(a)
      │    └── semi-join (hash)
      │         ├── columns: a:24!null b:25!null c:26!null d:27!null
      │         ├── with-scan &1
      │         │    ├── columns: a:24!null b:25!null c:26!null d:27!null
      │         │    └── mapping:
      │         │         ├──  column1:6 => a:24
      │         │         ├──  column2:7 => b:25
      │         │         ├──  column3:8 => c:26
      │         │         └──  column4:9 => d:27
      │         ├── scan uniq_overlaps_pk
      │         │    └── columns: uniq_overlaps_pk.a:19!null uniq_overlaps_pk.b:20!null uniq_overlaps_pk.c:21 uniq_overlaps_pk.d:22
      │         └── filters
      │              ├── a:24 = uniq_overlaps_pk.a:19
      │              └── b:25 != uniq_overlaps_pk.b:20
      └── unique-checks-item: uniq_overlaps_pk(c,d)
           └── semi-join (hash)
                ├── columns: a:33!null b:34!null c:35!null d:36!null
                ├── with-scan &1
                │    ├── columns: a:33!null b:34!null c:35!null d:36!null
                │    └── mapping:
                │         ├──  column1:6 => a:33
                │         ├──  column2:7 => b:34
                │         ├──  column3:8 => c:35
                │         └──  column4:9 => d:36
                ├── scan uniq_overlaps_pk
                │    └── columns: uniq_overlaps_pk.a:28!null uniq_overlaps_pk.b:29!null uniq_overlaps_pk.c:30 uniq_overlaps_pk.d:31
                └── filters
                     ├── c:35 = uniq_overlaps_pk.c:30
                     ├── d:36 = uniq_overlaps_pk.d:31
                     └── (a:33 != uniq_overlaps_pk.a:28) OR (b:34 != uniq_overlaps_pk.b:29)

# Upsert with non-constant input.
# Add inequality filters for the primary key columns that are not part of each
# unique constraint to prevent rows from matching themselves in the semi join.
# We avoid planning checks on c,d since the default for d is NULL.
build
UPSERT INTO uniq_overlaps_pk SELECT k, v, x FROM other
----
upsert uniq_overlaps_pk
 ├── columns: <none>
 ├── upsert-mapping:
 │    ├── k:6 => uniq_overlaps_pk.a:1
 │    ├── v:7 => uniq_overlaps_pk.b:2
 │    ├── x:9 => uniq_overlaps_pk.c:3
 │    └── column13:13 => uniq_overlaps_pk.d:4
 ├── input binding: &1
 ├── project
 │    ├── columns: column13:13 k:6 v:7 x:9
 │    ├── project
 │    │    ├── columns: k:6 v:7 x:9
 │    │    └── scan other
 │    │         └── columns: k:6 v:7 w:8!null x:9 y:10 rowid:11!null other.crdb_internal_mvcc_timestamp:12
 │    └── projections
 │         └── NULL::INT8 [as=column13:13]
 └── unique-checks
      ├── unique-checks-item: uniq_overlaps_pk(b,c)
      │    └── semi-join (hash)
      │         ├── columns: a:19 b:20 c:21 d:22
      │         ├── with-scan &1
      │         │    ├── columns: a:19 b:20 c:21 d:22
      │         │    └── mapping:
      │         │         ├──  k:6 => a:19
      │         │         ├──  v:7 => b:20
      │         │         ├──  x:9 => c:21
      │         │         └──  column13:13 => d:22
      │         ├── scan uniq_overlaps_pk
      │         │    └── columns: uniq_overlaps_pk.a:14!null uniq_overlaps_pk.b:15!null uniq_overlaps_pk.c:16 uniq_overlaps_pk.d:17
      │         └── filters
      │              ├── b:20 = uniq_overlaps_pk.b:15
      │              ├── c:21 = uniq_overlaps_pk.c:16
      │              └── a:19 != uniq_overlaps_pk.a:14
      └── unique-checks-item: uniq_overlaps_pk(a)
           └── semi-join (hash)
                ├── columns: a:28 b:29 c:30 d:31
                ├── with-scan &1
                │    ├── columns: a:28 b:29 c:30 d:31
                │    └── mapping:
                │         ├──  k:6 => a:28
                │         ├──  v:7 => b:29
                │         ├──  x:9 => c:30
                │         └──  column13:13 => d:31
                ├── scan uniq_overlaps_pk
                │    └── columns: uniq_overlaps_pk.a:23!null uniq_overlaps_pk.b:24!null uniq_overlaps_pk.c:25 uniq_overlaps_pk.d:26
                └── filters
                     ├── a:28 = uniq_overlaps_pk.a:23
                     └── b:29 != uniq_overlaps_pk.b:24

# On conflict do update with constant input, conflict on UNIQUE WITHOUT INDEX
# column.
build
INSERT INTO uniq_overlaps_pk VALUES (100, 10, 1, 1), (200, 20, 2, 2) ON CONFLICT (a) DO UPDATE SET a = 10
----
upsert uniq_overlaps_pk
 ├── columns: <none>
 ├── arbiter constraints: unique_a
 ├── canary column: uniq_overlaps_pk.a:10
 ├── fetch columns: uniq_overlaps_pk.a:10 uniq_overlaps_pk.b:11 uniq_overlaps_pk.c:12 uniq_overlaps_pk.d:13
 ├── insert-mapping:
 │    ├── column1:6 => uniq_overlaps_pk.a:1
 │    ├── column2:7 => uniq_overlaps_pk.b:2
 │    ├── column3:8 => uniq_overlaps_pk.c:3
 │    └── column4:9 => uniq_overlaps_pk.d:4
 ├── update-mapping:
 │    └── upsert_a:16 => uniq_overlaps_pk.a:1
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_a:16!null upsert_b:17 upsert_c:18 upsert_d:19 column1:6!null column2:7!null column3:8!null column4:9!null uniq_overlaps_pk.a:10 uniq_overlaps_pk.b:11 uniq_overlaps_pk.c:12 uniq_overlaps_pk.d:13 crdb_internal_mvcc_timestamp:14 a_new:15!null
 │    ├── project
 │    │    ├── columns: a_new:15!null column1:6!null column2:7!null column3:8!null column4:9!null uniq_overlaps_pk.a:10 uniq_overlaps_pk.b:11 uniq_overlaps_pk.c:12 uniq_overlaps_pk.d:13 crdb_internal_mvcc_timestamp:14
 │    │    ├── left-join (hash)
 │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null column4:9!null uniq_overlaps_pk.a:10 uniq_overlaps_pk.b:11 uniq_overlaps_pk.c:12 uniq_overlaps_pk.d:13 crdb_internal_mvcc_timestamp:14
 │    │    │    ├── ensure-upsert-distinct-on
 │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null column4:9!null
 │    │    │    │    ├── grouping columns: column1:6!null
 │    │    │    │    ├── values
 │    │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null column4:9!null
 │    │    │    │    │    ├── (100, 10, 1, 1)
 │    │    │    │    │    └── (200, 20, 2, 2)
 │    │    │    │    └── aggregations
 │    │    │    │         ├── first-agg [as=column2:7]
 │    │    │    │         │    └── column2:7
 │    │    │    │         ├── first-agg [as=column3:8]
 │    │    │    │         │    └── column3:8
 │    │    │    │         └── first-agg [as=column4:9]
 │    │    │    │              └── column4:9
 │    │    │    ├── scan uniq_overlaps_pk
 │    │    │    │    └── columns: uniq_overlaps_pk.a:10!null uniq_overlaps_pk.b:11!null uniq_overlaps_pk.c:12 uniq_overlaps_pk.d:13 crdb_internal_mvcc_timestamp:14
 │    │    │    └── filters
 │    │    │         └── column1:6 = uniq_overlaps_pk.a:10
 │    │    └── projections
 │    │         └── 10 [as=a_new:15]
 │    └── projections
 │         ├── CASE WHEN uniq_overlaps_pk.a:10 IS NULL THEN column1:6 ELSE a_new:15 END [as=upsert_a:16]
 │         ├── CASE WHEN uniq_overlaps_pk.a:10 IS NULL THEN column2:7 ELSE uniq_overlaps_pk.b:11 END [as=upsert_b:17]
 │         ├── CASE WHEN uniq_overlaps_pk.a:10 IS NULL THEN column3:8 ELSE uniq_overlaps_pk.c:12 END [as=upsert_c:18]
 │         └── CASE WHEN uniq_overlaps_pk.a:10 IS NULL THEN column4:9 ELSE uniq_overlaps_pk.d:13 END [as=upsert_d:19]
 └── unique-checks
      ├── unique-checks-item: uniq_overlaps_pk(b,c)
      │    └── semi-join (hash)
      │         ├── columns: a:25!null b:26 c:27 d:28
      │         ├── with-scan &1
      │         │    ├── columns: a:25!null b:26 c:27 d:28
      │         │    └── mapping:
      │         │         ├──  upsert_a:16 => a:25
      │         │         ├──  upsert_b:17 => b:26
      │         │         ├──  upsert_c:18 => c:27
      │         │         └──  upsert_d:19 => d:28
      │         ├── scan uniq_overlaps_pk
      │         │    └── columns: uniq_overlaps_pk.a:20!null uniq_overlaps_pk.b:21!null uniq_overlaps_pk.c:22 uniq_overlaps_pk.d:23
      │         └── filters
      │              ├── b:26 = uniq_overlaps_pk.b:21
      │              ├── c:27 = uniq_overlaps_pk.c:22
      │              └── a:25 != uniq_overlaps_pk.a:20
      ├── unique-checks-item: uniq_overlaps_pk(a)
      │    └── semi-join (hash)
      │         ├── columns: a:34!null b:35 c:36 d:37
      │         ├── with-scan &1
      │         │    ├── columns: a:34!null b:35 c:36 d:37
      │         │    └── mapping:
      │         │         ├──  upsert_a:16 => a:34
      │         │         ├──  upsert_b:17 => b:35
      │         │         ├──  upsert_c:18 => c:36
      │         │         └──  upsert_d:19 => d:37
      │         ├── scan uniq_overlaps_pk
      │         │    └── columns: uniq_overlaps_pk.a:29!null uniq_overlaps_pk.b:30!null uniq_overlaps_pk.c:31 uniq_overlaps_pk.d:32
      │         └── filters
      │              ├── a:34 = uniq_overlaps_pk.a:29
      │              └── b:35 != uniq_overlaps_pk.b:30
      └── unique-checks-item: uniq_overlaps_pk(c,d)
           └── semi-join (hash)
                ├── columns: a:43!null b:44 c:45 d:46
                ├── with-scan &1
                │    ├── columns: a:43!null b:44 c:45 d:46
                │    └── mapping:
                │         ├──  upsert_a:16 => a:43
                │         ├──  upsert_b:17 => b:44
                │         ├──  upsert_c:18 => c:45
                │         └──  upsert_d:19 => d:46
                ├── scan uniq_overlaps_pk
                │    └── columns: uniq_overlaps_pk.a:38!null uniq_overlaps_pk.b:39!null uniq_overlaps_pk.c:40 uniq_overlaps_pk.d:41
                └── filters
                     ├── c:45 = uniq_overlaps_pk.c:40
                     ├── d:46 = uniq_overlaps_pk.d:41
                     └── (a:43 != uniq_overlaps_pk.a:38) OR (b:44 != uniq_overlaps_pk.b:39)

# On conflict do update with constant input, conflict on UNIQUE WITHOUT INDEX
# columns.
build
INSERT INTO uniq_overlaps_pk VALUES (1, 2, 3, 4) ON CONFLICT (c, d) DO UPDATE SET b = 10
----
upsert uniq_overlaps_pk
 ├── columns: <none>
 ├── arbiter constraints: unique_c_d
 ├── canary column: uniq_overlaps_pk.a:10
 ├── fetch columns: uniq_overlaps_pk.a:10 uniq_overlaps_pk.b:11 uniq_overlaps_pk.c:12 uniq_overlaps_pk.d:13
 ├── insert-mapping:
 │    ├── column1:6 => uniq_overlaps_pk.a:1
 │    ├── column2:7 => uniq_overlaps_pk.b:2
 │    ├── column3:8 => uniq_overlaps_pk.c:3
 │    └── column4:9 => uniq_overlaps_pk.d:4
 ├── update-mapping:
 │    └── upsert_b:17 => uniq_overlaps_pk.b:2
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_a:16 upsert_b:17!null upsert_c:18 upsert_d:19 column1:6!null column2:7!null column3:8!null column4:9!null uniq_overlaps_pk.a:10 uniq_overlaps_pk.b:11 uniq_overlaps_pk.c:12 uniq_overlaps_pk.d:13 crdb_internal_mvcc_timestamp:14 b_new:15!null
 │    ├── project
 │    │    ├── columns: b_new:15!null column1:6!null column2:7!null column3:8!null column4:9!null uniq_overlaps_pk.a:10 uniq_overlaps_pk.b:11 uniq_overlaps_pk.c:12 uniq_overlaps_pk.d:13 crdb_internal_mvcc_timestamp:14
 │    │    ├── left-join (hash)
 │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null column4:9!null uniq_overlaps_pk.a:10 uniq_overlaps_pk.b:11 uniq_overlaps_pk.c:12 uniq_overlaps_pk.d:13 crdb_internal_mvcc_timestamp:14
 │    │    │    ├── ensure-upsert-distinct-on
 │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null column4:9!null
 │    │    │    │    ├── grouping columns: column3:8!null column4:9!null
 │    │    │    │    ├── values
 │    │    │    │    │    ├── columns: column1:6!null column2:7!null column3:8!null column4:9!null
 │    │    │    │    │    └── (1, 2, 3, 4)
 │    │    │    │    └── aggregations
 │    │    │    │         ├── first-agg [as=column1:6]
 │    │    │    │         │    └── column1:6
 │    │    │    │         └── first-agg [as=column2:7]
 │    │    │    │              └── column2:7
 │    │    │    ├── scan uniq_overlaps_pk
 │    │    │    │    └── columns: uniq_overlaps_pk.a:10!null uniq_overlaps_pk.b:11!null uniq_overlaps_pk.c:12 uniq_overlaps_pk.d:13 crdb_internal_mvcc_timestamp:14
 │    │    │    └── filters
 │    │    │         ├── column3:8 = uniq_overlaps_pk.c:12
 │    │    │         └── column4:9 = uniq_overlaps_pk.d:13
 │    │    └── projections
 │    │         └── 10 [as=b_new:15]
 │    └── projections
 │         ├── CASE WHEN uniq_overlaps_pk.a:10 IS NULL THEN column1:6 ELSE uniq_overlaps_pk.a:10 END [as=upsert_a:16]
 │         ├── CASE WHEN uniq_overlaps_pk.a:10 IS NULL THEN column2:7 ELSE b_new:15 END [as=upsert_b:17]
 │         ├── CASE WHEN uniq_overlaps_pk.a:10 IS NULL THEN column3:8 ELSE uniq_overlaps_pk.c:12 END [as=upsert_c:18]
 │         └── CASE WHEN uniq_overlaps_pk.a:10 IS NULL THEN column4:9 ELSE uniq_overlaps_pk.d:13 END [as=upsert_d:19]
 └── unique-checks
      ├── unique-checks-item: uniq_overlaps_pk(b,c)
      │    └── semi-join (hash)
      │         ├── columns: a:25 b:26!null c:27 d:28
      │         ├── with-scan &1
      │         │    ├── columns: a:25 b:26!null c:27 d:28
      │         │    └── mapping:
      │         │         ├──  upsert_a:16 => a:25
      │         │         ├──  upsert_b:17 => b:26
      │         │         ├──  upsert_c:18 => c:27
      │         │         └──  upsert_d:19 => d:28
      │         ├── scan uniq_overlaps_pk
      │         │    └── columns: uniq_overlaps_pk.a:20!null uniq_overlaps_pk.b:21!null uniq_overlaps_pk.c:22 uniq_overlaps_pk.d:23
      │         └── filters
      │              ├── b:26 = uniq_overlaps_pk.b:21
      │              ├── c:27 = uniq_overlaps_pk.c:22
      │              └── a:25 != uniq_overlaps_pk.a:20
      ├── unique-checks-item: uniq_overlaps_pk(a)
      │    └── semi-join (hash)
      │         ├── columns: a:34 b:35!null c:36 d:37
      │         ├── with-scan &1
      │         │    ├── columns: a:34 b:35!null c:36 d:37
      │         │    └── mapping:
      │         │         ├──  upsert_a:16 => a:34
      │         │         ├──  upsert_b:17 => b:35
      │         │         ├──  upsert_c:18 => c:36
      │         │         └──  upsert_d:19 => d:37
      │         ├── scan uniq_overlaps_pk
      │         │    └── columns: uniq_overlaps_pk.a:29!null uniq_overlaps_pk.b:30!null uniq_overlaps_pk.c:31 uniq_overlaps_pk.d:32
      │         └── filters
      │              ├── a:34 = uniq_overlaps_pk.a:29
      │              └── b:35 != uniq_overlaps_pk.b:30
      └── unique-checks-item: uniq_overlaps_pk(c,d)
           └── semi-join (hash)
                ├── columns: a:43 b:44!null c:45 d:46
                ├── with-scan &1
                │    ├── columns: a:43 b:44!null c:45 d:46
                │    └── mapping:
                │         ├──  upsert_a:16 => a:43
                │         ├──  upsert_b:17 => b:44
                │         ├──  upsert_c:18 => c:45
                │         └──  upsert_d:19 => d:46
                ├── scan uniq_overlaps_pk
                │    └── columns: uniq_overlaps_pk.a:38!null uniq_overlaps_pk.b:39!null uniq_overlaps_pk.c:40 uniq_overlaps_pk.d:41
                └── filters
                     ├── c:45 = uniq_overlaps_pk.c:40
                     ├── d:46 = uniq_overlaps_pk.d:41
                     └── (a:43 != uniq_overlaps_pk.a:38) OR (b:44 != uniq_overlaps_pk.b:39)

exec-ddl
CREATE TABLE uniq_hidden_pk (
  a INT,
  b INT,
  c INT,
  d INT,
  UNIQUE WITHOUT INDEX (b, c),
  UNIQUE WITHOUT INDEX (a, b, d),
  UNIQUE WITHOUT INDEX (a)
)
----

# Upsert with constant input.
# Add inequality filters for the hidden primary key column.
build
UPSERT INTO uniq_hidden_pk (a, b, d) VALUES (1, 1, 1), (2, 2, 2)
----
upsert uniq_hidden_pk
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: uniq_hidden_pk.rowid:16
 ├── fetch columns: uniq_hidden_pk.a:12 uniq_hidden_pk.b:13 uniq_hidden_pk.c:14 uniq_hidden_pk.d:15 uniq_hidden_pk.rowid:16
 ├── insert-mapping:
 │    ├── column1:7 => uniq_hidden_pk.a:1
 │    ├── column2:8 => uniq_hidden_pk.b:2
 │    ├── column10:10 => uniq_hidden_pk.c:3
 │    ├── column3:9 => uniq_hidden_pk.d:4
 │    └── column11:11 => uniq_hidden_pk.rowid:5
 ├── update-mapping:
 │    ├── column1:7 => uniq_hidden_pk.a:1
 │    ├── column2:8 => uniq_hidden_pk.b:2
 │    └── column3:9 => uniq_hidden_pk.d:4
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_c:18 upsert_rowid:19 column1:7!null column2:8!null column3:9!null column10:10 column11:11 uniq_hidden_pk.a:12 uniq_hidden_pk.b:13 uniq_hidden_pk.c:14 uniq_hidden_pk.d:15 uniq_hidden_pk.rowid:16 crdb_internal_mvcc_timestamp:17
 │    ├── left-join (hash)
 │    │    ├── columns: column1:7!null column2:8!null column3:9!null column10:10 column11:11 uniq_hidden_pk.a:12 uniq_hidden_pk.b:13 uniq_hidden_pk.c:14 uniq_hidden_pk.d:15 uniq_hidden_pk.rowid:16 crdb_internal_mvcc_timestamp:17
 │    │    ├── ensure-upsert-distinct-on
 │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null column10:10 column11:11
 │    │    │    ├── grouping columns: column11:11
 │    │    │    ├── project
 │    │    │    │    ├── columns: column10:10 column11:11 column1:7!null column2:8!null column3:9!null
 │    │    │    │    ├── values
 │    │    │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null
 │    │    │    │    │    ├── (1, 1, 1)
 │    │    │    │    │    └── (2, 2, 2)
 │    │    │    │    └── projections
 │    │    │    │         ├── NULL::INT8 [as=column10:10]
 │    │    │    │         └── unique_rowid() [as=column11:11]
 │    │    │    └── aggregations
 │    │    │         ├── first-agg [as=column1:7]
 │    │    │         │    └── column1:7
 │    │    │         ├── first-agg [as=column2:8]
 │    │    │         │    └── column2:8
 │    │    │         ├── first-agg [as=column3:9]
 │    │    │         │    └── column3:9
 │    │    │         └── first-agg [as=column10:10]
 │    │    │              └── column10:10
 │    │    ├── scan uniq_hidden_pk
 │    │    │    └── columns: uniq_hidden_pk.a:12 uniq_hidden_pk.b:13 uniq_hidden_pk.c:14 uniq_hidden_pk.d:15 uniq_hidden_pk.rowid:16!null crdb_internal_mvcc_timestamp:17
 │    │    └── filters
 │    │         └── column11:11 = uniq_hidden_pk.rowid:16
 │    └── projections
 │         ├── CASE WHEN uniq_hidden_pk.rowid:16 IS NULL THEN column10:10 ELSE uniq_hidden_pk.c:14 END [as=upsert_c:18]
 │         └── CASE WHEN uniq_hidden_pk.rowid:16 IS NULL THEN column11:11 ELSE uniq_hidden_pk.rowid:16 END [as=upsert_rowid:19]
 └── unique-checks
      ├── unique-checks-item: uniq_hidden_pk(b,c)
      │    └── semi-join (hash)
      │         ├── columns: a:26!null b:27!null c:28 d:29!null rowid:30
      │         ├── with-scan &1
      │         │    ├── columns: a:26!null b:27!null c:28 d:29!null rowid:30
      │         │    └── mapping:
      │         │         ├──  column1:7 => a:26
      │         │         ├──  column2:8 => b:27
      │         │         ├──  upsert_c:18 => c:28
      │         │         ├──  column3:9 => d:29
      │         │         └──  upsert_rowid:19 => rowid:30
      │         ├── scan uniq_hidden_pk
      │         │    └── columns: uniq_hidden_pk.a:20 uniq_hidden_pk.b:21 uniq_hidden_pk.c:22 uniq_hidden_pk.d:23 uniq_hidden_pk.rowid:24!null
      │         └── filters
      │              ├── b:27 = uniq_hidden_pk.b:21
      │              ├── c:28 = uniq_hidden_pk.c:22
      │              └── rowid:30 != uniq_hidden_pk.rowid:24
      ├── unique-checks-item: uniq_hidden_pk(a,b,d)
      │    └── semi-join (hash)
      │         ├── columns: a:37!null b:38!null c:39 d:40!null rowid:41
      │         ├── with-scan &1
      │         │    ├── columns: a:37!null b:38!null c:39 d:40!null rowid:41
      │         │    └── mapping:
      │         │         ├──  column1:7 => a:37
      │         │         ├──  column2:8 => b:38
      │         │         ├──  upsert_c:18 => c:39
      │         │         ├──  column3:9 => d:40
      │         │         └──  upsert_rowid:19 => rowid:41
      │         ├── scan uniq_hidden_pk
      │         │    └── columns: uniq_hidden_pk.a:31 uniq_hidden_pk.b:32 uniq_hidden_pk.c:33 uniq_hidden_pk.d:34 uniq_hidden_pk.rowid:35!null
      │         └── filters
      │              ├── a:37 = uniq_hidden_pk.a:31
      │              ├── b:38 = uniq_hidden_pk.b:32
      │              ├── d:40 = uniq_hidden_pk.d:34
      │              └── rowid:41 != uniq_hidden_pk.rowid:35
      └── unique-checks-item: uniq_hidden_pk(a)
           └── semi-join (hash)
                ├── columns: a:48!null b:49!null c:50 d:51!null rowid:52
                ├── with-scan &1
                │    ├── columns: a:48!null b:49!null c:50 d:51!null rowid:52
                │    └── mapping:
                │         ├──  column1:7 => a:48
                │         ├──  column2:8 => b:49
                │         ├──  upsert_c:18 => c:50
                │         ├──  column3:9 => d:51
                │         └──  upsert_rowid:19 => rowid:52
                ├── scan uniq_hidden_pk
                │    └── columns: uniq_hidden_pk.a:42 uniq_hidden_pk.b:43 uniq_hidden_pk.c:44 uniq_hidden_pk.d:45 uniq_hidden_pk.rowid:46!null
                └── filters
                     ├── a:48 = uniq_hidden_pk.a:42
                     └── rowid:52 != uniq_hidden_pk.rowid:46

# Upsert with non-constant input.
# Add inequality filters for the hidden primary key column.
build
UPSERT INTO uniq_hidden_pk SELECT k, v, x, y FROM other
----
upsert uniq_hidden_pk
 ├── columns: <none>
 ├── upsert-mapping:
 │    ├── k:7 => uniq_hidden_pk.a:1
 │    ├── v:8 => uniq_hidden_pk.b:2
 │    ├── x:10 => uniq_hidden_pk.c:3
 │    ├── y:11 => uniq_hidden_pk.d:4
 │    └── column14:14 => uniq_hidden_pk.rowid:5
 ├── input binding: &1
 ├── project
 │    ├── columns: column14:14 k:7 v:8 x:10 y:11
 │    ├── project
 │    │    ├── columns: k:7 v:8 x:10 y:11
 │    │    └── scan other
 │    │         └── columns: k:7 v:8 w:9!null x:10 y:11 other.rowid:12!null other.crdb_internal_mvcc_timestamp:13
 │    └── projections
 │         └── unique_rowid() [as=column14:14]
 └── unique-checks
      ├── unique-checks-item: uniq_hidden_pk(b,c)
      │    └── semi-join (hash)
      │         ├── columns: a:21 b:22 c:23 d:24 rowid:25
      │         ├── with-scan &1
      │         │    ├── columns: a:21 b:22 c:23 d:24 rowid:25
      │         │    └── mapping:
      │         │         ├──  k:7 => a:21
      │         │         ├──  v:8 => b:22
      │         │         ├──  x:10 => c:23
      │         │         ├──  y:11 => d:24
      │         │         └──  column14:14 => rowid:25
      │         ├── scan uniq_hidden_pk
      │         │    └── columns: uniq_hidden_pk.a:15 uniq_hidden_pk.b:16 uniq_hidden_pk.c:17 uniq_hidden_pk.d:18 uniq_hidden_pk.rowid:19!null
      │         └── filters
      │              ├── b:22 = uniq_hidden_pk.b:16
      │              ├── c:23 = uniq_hidden_pk.c:17
      │              └── rowid:25 != uniq_hidden_pk.rowid:19
      ├── unique-checks-item: uniq_hidden_pk(a,b,d)
      │    └── semi-join (hash)
      │         ├── columns: a:32 b:33 c:34 d:35 rowid:36
      │         ├── with-scan &1
      │         │    ├── columns: a:32 b:33 c:34 d:35 rowid:36
      │         │    └── mapping:
      │         │         ├──  k:7 => a:32
      │         │         ├──  v:8 => b:33
      │         │         ├──  x:10 => c:34
      │         │         ├──  y:11 => d:35
      │         │         └──  column14:14 => rowid:36
      │         ├── scan uniq_hidden_pk
      │         │    └── columns: uniq_hidden_pk.a:26 uniq_hidden_pk.b:27 uniq_hidden_pk.c:28 uniq_hidden_pk.d:29 uniq_hidden_pk.rowid:30!null
      │         └── filters
      │              ├── a:32 = uniq_hidden_pk.a:26
      │              ├── b:33 = uniq_hidden_pk.b:27
      │              ├── d:35 = uniq_hidden_pk.d:29
      │              └── rowid:36 != uniq_hidden_pk.rowid:30
      └── unique-checks-item: uniq_hidden_pk(a)
           └── semi-join (hash)
                ├── columns: a:43 b:44 c:45 d:46 rowid:47
                ├── with-scan &1
                │    ├── columns: a:43 b:44 c:45 d:46 rowid:47
                │    └── mapping:
                │         ├──  k:7 => a:43
                │         ├──  v:8 => b:44
                │         ├──  x:10 => c:45
                │         ├──  y:11 => d:46
                │         └──  column14:14 => rowid:47
                ├── scan uniq_hidden_pk
                │    └── columns: uniq_hidden_pk.a:37 uniq_hidden_pk.b:38 uniq_hidden_pk.c:39 uniq_hidden_pk.d:40 uniq_hidden_pk.rowid:41!null
                └── filters
                     ├── a:43 = uniq_hidden_pk.a:37
                     └── rowid:47 != uniq_hidden_pk.rowid:41

# On conflict do update with constant input, conflict on UNIQUE WITHOUT INDEX
# columns.
build
INSERT INTO uniq_hidden_pk VALUES (1, 2, 3, 4) ON CONFLICT (a, b, d) DO UPDATE SET a = 10
----
upsert uniq_hidden_pk
 ├── columns: <none>
 ├── arbiter constraints: unique_a_b_d
 ├── canary column: uniq_hidden_pk.rowid:16
 ├── fetch columns: uniq_hidden_pk.a:12 uniq_hidden_pk.b:13 uniq_hidden_pk.c:14 uniq_hidden_pk.d:15 uniq_hidden_pk.rowid:16
 ├── insert-mapping:
 │    ├── column1:7 => uniq_hidden_pk.a:1
 │    ├── column2:8 => uniq_hidden_pk.b:2
 │    ├── column3:9 => uniq_hidden_pk.c:3
 │    ├── column4:10 => uniq_hidden_pk.d:4
 │    └── column11:11 => uniq_hidden_pk.rowid:5
 ├── update-mapping:
 │    └── upsert_a:19 => uniq_hidden_pk.a:1
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_a:19!null upsert_b:20 upsert_c:21 upsert_d:22 upsert_rowid:23 column1:7!null column2:8!null column3:9!null column4:10!null column11:11 uniq_hidden_pk.a:12 uniq_hidden_pk.b:13 uniq_hidden_pk.c:14 uniq_hidden_pk.d:15 uniq_hidden_pk.rowid:16 crdb_internal_mvcc_timestamp:17 a_new:18!null
 │    ├── project
 │    │    ├── columns: a_new:18!null column1:7!null column2:8!null column3:9!null column4:10!null column11:11 uniq_hidden_pk.a:12 uniq_hidden_pk.b:13 uniq_hidden_pk.c:14 uniq_hidden_pk.d:15 uniq_hidden_pk.rowid:16 crdb_internal_mvcc_timestamp:17
 │    │    ├── left-join (hash)
 │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null column4:10!null column11:11 uniq_hidden_pk.a:12 uniq_hidden_pk.b:13 uniq_hidden_pk.c:14 uniq_hidden_pk.d:15 uniq_hidden_pk.rowid:16 crdb_internal_mvcc_timestamp:17
 │    │    │    ├── ensure-upsert-distinct-on
 │    │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null column4:10!null column11:11
 │    │    │    │    ├── grouping columns: column1:7!null column2:8!null column4:10!null
 │    │    │    │    ├── project
 │    │    │    │    │    ├── columns: column11:11 column1:7!null column2:8!null column3:9!null column4:10!null
 │    │    │    │    │    ├── values
 │    │    │    │    │    │    ├── columns: column1:7!null column2:8!null column3:9!null column4:10!null
 │    │    │    │    │    │    └── (1, 2, 3, 4)
 │    │    │    │    │    └── projections
 │    │    │    │    │         └── unique_rowid() [as=column11:11]
 │    │    │    │    └── aggregations
 │    │    │    │         ├── first-agg [as=column3:9]
 │    │    │    │         │    └── column3:9
 │    │    │    │         └── first-agg [as=column11:11]
 │    │    │    │              └── column11:11
 │    │    │    ├── scan uniq_hidden_pk
 │    │    │    │    └── columns: uniq_hidden_pk.a:12 uniq_hidden_pk.b:13 uniq_hidden_pk.c:14 uniq_hidden_pk.d:15 uniq_hidden_pk.rowid:16!null crdb_internal_mvcc_timestamp:17
 │    │    │    └── filters
 │    │    │         ├── column1:7 = uniq_hidden_pk.a:12
 │    │    │         ├── column2:8 = uniq_hidden_pk.b:13
 │    │    │         └── column4:10 = uniq_hidden_pk.d:15
 │    │    └── projections
 │    │         └── 10 [as=a_new:18]
 │    └── projections
 │         ├── CASE WHEN uniq_hidden_pk.rowid:16 IS NULL THEN column1:7 ELSE a_new:18 END [as=upsert_a:19]
 │         ├── CASE WHEN uniq_hidden_pk.rowid:16 IS NULL THEN column2:8 ELSE uniq_hidden_pk.b:13 END [as=upsert_b:20]
 │         ├── CASE WHEN uniq_hidden_pk.rowid:16 IS NULL THEN column3:9 ELSE uniq_hidden_pk.c:14 END [as=upsert_c:21]
 │         ├── CASE WHEN uniq_hidden_pk.rowid:16 IS NULL THEN column4:10 ELSE uniq_hidden_pk.d:15 END [as=upsert_d:22]
 │         └── CASE WHEN uniq_hidden_pk.rowid:16 IS NULL THEN column11:11 ELSE uniq_hidden_pk.rowid:16 END [as=upsert_rowid:23]
 └── unique-checks
      ├── unique-checks-item: uniq_hidden_pk(b,c)
      │    └── semi-join (hash)
      │         ├── columns: a:30!null b:31 c:32 d:33 rowid:34
      │         ├── with-scan &1
      │         │    ├── columns: a:30!null b:31 c:32 d:33 rowid:34
      │         │    └── mapping:
      │         │         ├──  upsert_a:19 => a:30
      │         │         ├──  upsert_b:20 => b:31
      │         │         ├──  upsert_c:21 => c:32
      │         │         ├──  upsert_d:22 => d:33
      │         │         └──  upsert_rowid:23 => rowid:34
      │         ├── scan uniq_hidden_pk
      │         │    └── columns: uniq_hidden_pk.a:24 uniq_hidden_pk.b:25 uniq_hidden_pk.c:26 uniq_hidden_pk.d:27 uniq_hidden_pk.rowid:28!null
      │         └── filters
      │              ├── b:31 = uniq_hidden_pk.b:25
      │              ├── c:32 = uniq_hidden_pk.c:26
      │              └── rowid:34 != uniq_hidden_pk.rowid:28
      ├── unique-checks-item: uniq_hidden_pk(a,b,d)
      │    └── semi-join (hash)
      │         ├── columns: a:41!null b:42 c:43 d:44 rowid:45
      │         ├── with-scan &1
      │         │    ├── columns: a:41!null b:42 c:43 d:44 rowid:45
      │         │    └── mapping:
      │         │         ├──  upsert_a:19 => a:41
      │         │         ├──  upsert_b:20 => b:42
      │         │         ├──  upsert_c:21 => c:43
      │         │         ├──  upsert_d:22 => d:44
      │         │         └──  upsert_rowid:23 => rowid:45
      │         ├── scan uniq_hidden_pk
      │         │    └── columns: uniq_hidden_pk.a:35 uniq_hidden_pk.b:36 uniq_hidden_pk.c:37 uniq_hidden_pk.d:38 uniq_hidden_pk.rowid:39!null
      │         └── filters
      │              ├── a:41 = uniq_hidden_pk.a:35
      │              ├── b:42 = uniq_hidden_pk.b:36
      │              ├── d:44 = uniq_hidden_pk.d:38
      │              └── rowid:45 != uniq_hidden_pk.rowid:39
      └── unique-checks-item: uniq_hidden_pk(a)
           └── semi-join (hash)
                ├── columns: a:52!null b:53 c:54 d:55 rowid:56
                ├── with-scan &1
                │    ├── columns: a:52!null b:53 c:54 d:55 rowid:56
                │    └── mapping:
                │         ├──  upsert_a:19 => a:52
                │         ├──  upsert_b:20 => b:53
                │         ├──  upsert_c:21 => c:54
                │         ├──  upsert_d:22 => d:55
                │         └──  upsert_rowid:23 => rowid:56
                ├── scan uniq_hidden_pk
                │    └── columns: uniq_hidden_pk.a:46 uniq_hidden_pk.b:47 uniq_hidden_pk.c:48 uniq_hidden_pk.d:49 uniq_hidden_pk.rowid:50!null
                └── filters
                     ├── a:52 = uniq_hidden_pk.a:46
                     └── rowid:56 != uniq_hidden_pk.rowid:50

exec-ddl
CREATE TABLE uniq_fk_parent (
  a INT UNIQUE WITHOUT INDEX
)
----

exec-ddl
CREATE TABLE uniq_fk_child (
  k INT PRIMARY KEY,
  a INT REFERENCES uniq_fk_parent (a)
)
----

exec-ddl
CREATE TABLE uniq_fk_grandchild (
  k INT REFERENCES uniq_fk_child (k)
)
----

# We need existing rows since we are updating an inbound foreign key column.
build
UPSERT INTO uniq_fk_parent (a) VALUES (1)
----
upsert uniq_fk_parent
 ├── columns: <none>
 ├── arbiter indexes: primary
 ├── canary column: uniq_fk_parent.rowid:7
 ├── fetch columns: uniq_fk_parent.a:6 uniq_fk_parent.rowid:7
 ├── insert-mapping:
 │    ├── column1:4 => uniq_fk_parent.a:1
 │    └── column5:5 => uniq_fk_parent.rowid:2
 ├── update-mapping:
 │    └── column1:4 => uniq_fk_parent.a:1
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_rowid:9 column1:4!null column5:5 uniq_fk_parent.a:6 uniq_fk_parent.rowid:7 uniq_fk_parent.crdb_internal_mvcc_timestamp:8
 │    ├── left-join (hash)
 │    │    ├── columns: column1:4!null column5:5 uniq_fk_parent.a:6 uniq_fk_parent.rowid:7 uniq_fk_parent.crdb_internal_mvcc_timestamp:8
 │    │    ├── ensure-upsert-distinct-on
 │    │    │    ├── columns: column1:4!null column5:5
 │    │    │    ├── grouping columns: column5:5
 │    │    │    ├── project
 │    │    │    │    ├── columns: column5:5 column1:4!null
 │    │    │    │    ├── values
 │    │    │    │    │    ├── columns: column1:4!null
 │    │    │    │    │    └── (1,)
 │    │    │    │    └── projections
 │    │    │    │         └── unique_rowid() [as=column5:5]
 │    │    │    └── aggregations
 │    │    │         └── first-agg [as=column1:4]
 │    │    │              └── column1:4
 │    │    ├── scan uniq_fk_parent
 │    │    │    └── columns: uniq_fk_parent.a:6 uniq_fk_parent.rowid:7!null uniq_fk_parent.crdb_internal_mvcc_timestamp:8
 │    │    └── filters
 │    │         └── column5:5 = uniq_fk_parent.rowid:7
 │    └── projections
 │         └── CASE WHEN uniq_fk_parent.rowid:7 IS NULL THEN column5:5 ELSE uniq_fk_parent.rowid:7 END [as=upsert_rowid:9]
 ├── unique-checks
 │    └── unique-checks-item: uniq_fk_parent(a)
 │         └── semi-join (hash)
 │              ├── columns: a:13!null rowid:14
 │              ├── with-scan &1
 │              │    ├── columns: a:13!null rowid:14
 │              │    └── mapping:
 │              │         ├──  column1:4 => a:13
 │              │         └──  upsert_rowid:9 => rowid:14
 │              ├── scan uniq_fk_parent
 │              │    └── columns: uniq_fk_parent.a:10 uniq_fk_parent.rowid:11!null
 │              └── filters
 │                   ├── a:13 = uniq_fk_parent.a:10
 │                   └── rowid:14 != uniq_fk_parent.rowid:11
 └── f-k-checks
      └── f-k-checks-item: uniq_fk_child(a) -> uniq_fk_parent(a)
           └── semi-join (hash)
                ├── columns: a:15
                ├── except
                │    ├── columns: a:15
                │    ├── left columns: a:15
                │    ├── right columns: a:16
                │    ├── with-scan &1
                │    │    ├── columns: a:15
                │    │    └── mapping:
                │    │         └──  uniq_fk_parent.a:6 => a:15
                │    └── with-scan &1
                │         ├── columns: a:16!null
                │         └── mapping:
                │              └──  column1:4 => a:16
                ├── scan uniq_fk_child
                │    └── columns: uniq_fk_child.a:18
                └── filters
                     └── a:15 = uniq_fk_child.a:18

# We do not need existing rows since we are not updating an inbound foreign key
# column (k is the UPSERT key column so it's not updated).
build
UPSERT INTO uniq_fk_child (k, a) VALUES (1, 2)
----
upsert uniq_fk_child
 ├── columns: <none>
 ├── upsert-mapping:
 │    ├── column1:4 => k:1
 │    └── column2:5 => uniq_fk_child.a:2
 ├── input binding: &1
 ├── values
 │    ├── columns: column1:4!null column2:5!null
 │    └── (1, 2)
 └── f-k-checks
      └── f-k-checks-item: uniq_fk_child(a) -> uniq_fk_parent(a)
           └── anti-join (hash)
                ├── columns: a:6!null
                ├── with-scan &1
                │    ├── columns: a:6!null
                │    └── mapping:
                │         └──  column2:5 => a:6
                ├── scan uniq_fk_parent
                │    └── columns: uniq_fk_parent.a:7
                └── filters
                     └── a:6 = uniq_fk_parent.a:7

# Check that we choose the unique without index constraint as the arbiter.
exec-ddl
CREATE TABLE t (
  i INT,
  CONSTRAINT i1 UNIQUE (i) WHERE i > 0,
  CONSTRAINT i2 UNIQUE WITHOUT INDEX(i)
)
----

build
INSERT INTO t VALUES (1) ON CONFLICT (i) WHERE i > 0 DO UPDATE SET i = 2
----
upsert t
 ├── columns: <none>
 ├── arbiter constraints: i2
 ├── canary column: t.rowid:7
 ├── fetch columns: t.i:6 t.rowid:7
 ├── insert-mapping:
 │    ├── column1:4 => t.i:1
 │    └── column5:5 => t.rowid:2
 ├── update-mapping:
 │    └── upsert_i:10 => t.i:1
 ├── partial index put columns: partial_index_put1:12
 ├── partial index del columns: partial_index_del1:13
 ├── input binding: &1
 ├── project
 │    ├── columns: partial_index_put1:12!null partial_index_del1:13 column1:4!null column5:5 t.i:6 t.rowid:7 crdb_internal_mvcc_timestamp:8 i_new:9!null upsert_i:10!null upsert_rowid:11
 │    ├── project
 │    │    ├── columns: upsert_i:10!null upsert_rowid:11 column1:4!null column5:5 t.i:6 t.rowid:7 crdb_internal_mvcc_timestamp:8 i_new:9!null
 │    │    ├── project
 │    │    │    ├── columns: i_new:9!null column1:4!null column5:5 t.i:6 t.rowid:7 crdb_internal_mvcc_timestamp:8
 │    │    │    ├── left-join (hash)
 │    │    │    │    ├── columns: column1:4!null column5:5 t.i:6 t.rowid:7 crdb_internal_mvcc_timestamp:8
 │    │    │    │    ├── ensure-upsert-distinct-on
 │    │    │    │    │    ├── columns: column1:4!null column5:5
 │    │    │    │    │    ├── grouping columns: column1:4!null
 │    │    │    │    │    ├── project
 │    │    │    │    │    │    ├── columns: column5:5 column1:4!null
 │    │    │    │    │    │    ├── values
 │    │    │    │    │    │    │    ├── columns: column1:4!null
 │    │    │    │    │    │    │    └── (1,)
 │    │    │    │    │    │    └── projections
 │    │    │    │    │    │         └── unique_rowid() [as=column5:5]
 │    │    │    │    │    └── aggregations
 │    │    │    │    │         └── first-agg [as=column5:5]
 │    │    │    │    │              └── column5:5
 │    │    │    │    ├── scan t
 │    │    │    │    │    ├── columns: t.i:6 t.rowid:7!null crdb_internal_mvcc_timestamp:8
 │    │    │    │    │    └── partial index predicates
 │    │    │    │    │         └── i1: filters
 │    │    │    │    │              └── t.i:6 > 0
 │    │    │    │    └── filters
 │    │    │    │         └── column1:4 = t.i:6
 │    │    │    └── projections
 │    │    │         └── 2 [as=i_new:9]
 │    │    └── projections
 │    │         ├── CASE WHEN t.rowid:7 IS NULL THEN column1:4 ELSE i_new:9 END [as=upsert_i:10]
 │    │         └── CASE WHEN t.rowid:7 IS NULL THEN column5:5 ELSE t.rowid:7 END [as=upsert_rowid:11]
 │    └── projections
 │         ├── upsert_i:10 > 0 [as=partial_index_put1:12]
 │         └── t.i:6 > 0 [as=partial_index_del1:13]
 └── unique-checks
      └── unique-checks-item: t(i)
           └── semi-join (hash)
                ├── columns: i:17!null rowid:18
                ├── with-scan &1
                │    ├── columns: i:17!null rowid:18
                │    └── mapping:
                │         ├──  upsert_i:10 => i:17
                │         └──  upsert_rowid:11 => rowid:18
                ├── scan t
                │    ├── columns: t.i:14 t.rowid:15!null
                │    └── partial index predicates
                │         └── i1: filters
                │              └── t.i:14 > 0
                └── filters
                     ├── i:17 = t.i:14
                     └── rowid:18 != t.rowid:15
