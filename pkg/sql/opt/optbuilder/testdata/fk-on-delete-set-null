exec-ddl
CREATE TABLE parent (p INT PRIMARY KEY)
----

exec-ddl
CREATE TABLE child (c INT PRIMARY KEY, p INT REFERENCES parent(p) ON DELETE SET NULL)
----

build-cascades
DELETE FROM parent WHERE p > 1
----
root
 ├── delete parent
 │    ├── columns: <none>
 │    ├── fetch columns: p:2
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk_p_ref_parent
 │    └── select
 │         ├── columns: p:2!null
 │         ├── scan parent
 │         │    └── columns: p:2!null
 │         └── filters
 │              └── p:2 > 1
 └── cascade
      └── update child
           ├── columns: <none>
           ├── fetch columns: c:5 child.p:6
           ├── update-mapping:
           │    └── p_new:8 => child.p:4
           └── project
                ├── columns: p_new:8 c:5!null child.p:6
                ├── semi-join (hash)
                │    ├── columns: c:5!null child.p:6
                │    ├── scan child
                │    │    └── columns: c:5!null child.p:6
                │    ├── with-scan &1
                │    │    ├── columns: p:7!null
                │    │    └── mapping:
                │    │         └──  parent.p:2 => p:7
                │    └── filters
                │         └── child.p:6 = p:7
                └── projections
                     └── NULL::INT8 [as=p_new:8]

exec-ddl
CREATE TABLE parent_multicol (p INT, q INT, r INT, PRIMARY KEY (p, q, r))
----

exec-ddl
CREATE TABLE child_multicol (
  c INT PRIMARY KEY,
  p INT, q INT, r INT,
  x INT AS (p+q+r) STORED,
  CONSTRAINT fk FOREIGN KEY (p,q,r) REFERENCES parent_multicol(p,q,r) ON DELETE SET NULL,
  CONSTRAINT ch CHECK (c > 100 OR p IS NOT NULL)
)
----

# Verify that:
#  - multiple FK columns are handled correctly;
#  - we recalculate the stored column;
#  - we verify the CHECK expression.
build-cascades
DELETE FROM parent_multicol WHERE p > 1
----
root
 ├── delete parent_multicol
 │    ├── columns: <none>
 │    ├── fetch columns: p:4 q:5 r:6
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── select
 │         ├── columns: p:4!null q:5!null r:6!null
 │         ├── scan parent_multicol
 │         │    └── columns: p:4!null q:5!null r:6!null
 │         └── filters
 │              └── p:4 > 1
 └── cascade
      └── update child_multicol
           ├── columns: <none>
           ├── fetch columns: c:12 child_multicol.p:13 child_multicol.q:14 child_multicol.r:15 x:16
           ├── update-mapping:
           │    ├── p_new:20 => child_multicol.p:8
           │    ├── p_new:20 => child_multicol.q:9
           │    ├── p_new:20 => child_multicol.r:10
           │    └── column21:21 => x:11
           ├── check columns: check1:22
           └── project
                ├── columns: check1:22!null c:12!null child_multicol.p:13 child_multicol.q:14 child_multicol.r:15 x:16 p_new:20 column21:21
                ├── project
                │    ├── columns: column21:21 c:12!null child_multicol.p:13 child_multicol.q:14 child_multicol.r:15 x:16 p_new:20
                │    ├── project
                │    │    ├── columns: p_new:20 c:12!null child_multicol.p:13 child_multicol.q:14 child_multicol.r:15 x:16
                │    │    ├── semi-join (hash)
                │    │    │    ├── columns: c:12!null child_multicol.p:13 child_multicol.q:14 child_multicol.r:15 x:16
                │    │    │    ├── scan child_multicol
                │    │    │    │    ├── columns: c:12!null child_multicol.p:13 child_multicol.q:14 child_multicol.r:15 x:16
                │    │    │    │    ├── check constraint expressions
                │    │    │    │    │    └── (c:12 > 100) OR (child_multicol.p:13 IS NOT NULL)
                │    │    │    │    └── computed column expressions
                │    │    │    │         └── x:16
                │    │    │    │              └── (child_multicol.p:13 + child_multicol.q:14) + child_multicol.r:15
                │    │    │    ├── with-scan &1
                │    │    │    │    ├── columns: p:17!null q:18!null r:19!null
                │    │    │    │    └── mapping:
                │    │    │    │         ├──  parent_multicol.p:4 => p:17
                │    │    │    │         ├──  parent_multicol.q:5 => q:18
                │    │    │    │         └──  parent_multicol.r:6 => r:19
                │    │    │    └── filters
                │    │    │         ├── child_multicol.p:13 = p:17
                │    │    │         ├── child_multicol.q:14 = q:18
                │    │    │         └── child_multicol.r:15 = r:19
                │    │    └── projections
                │    │         └── NULL::INT8 [as=p_new:20]
                │    └── projections
                │         └── (p_new:20 + p_new:20) + p_new:20 [as=column21:21]
                └── projections
                     └── (c:12 > 100) OR (p_new:20 IS NOT NULL) [as=check1:22]
