build-scalar
1
----
const: 1 [type=int]

build-scalar
1 + 2
----
plus [type=int]
 ├── const: 1 [type=int]
 └── const: 2 [type=int]

build-scalar vars=(string)
@1
----
variable: @1 [type=string, outer=(1)]

build-scalar vars=(int)
@1 + 2
----
plus [type=int, outer=(1)]
 ├── variable: @1 [type=int, outer=(1)]
 └── const: 2 [type=int]

build-scalar vars=(int, int)
@1 >= 5 AND @1 <= 10 AND @2 < 4
----
and [type=bool, outer=(1,2)]
 ├── and [type=bool, outer=(1)]
 │    ├── ge [type=bool, outer=(1)]
 │    │    ├── variable: @1 [type=int, outer=(1)]
 │    │    └── const: 5 [type=int]
 │    └── le [type=bool, outer=(1)]
 │         ├── variable: @1 [type=int, outer=(1)]
 │         └── const: 10 [type=int]
 └── lt [type=bool, outer=(2)]
      ├── variable: @2 [type=int, outer=(2)]
      └── const: 4 [type=int]

build-scalar vars=(int, int)
(@1, @2) = (1, 2)
----
eq [type=bool, outer=(1,2)]
 ├── tuple [type=tuple{int, int}, outer=(1,2)]
 │    ├── variable: @1 [type=int, outer=(1)]
 │    └── variable: @2 [type=int, outer=(2)]
 └── tuple [type=tuple{int, int}]
      ├── const: 1 [type=int]
      └── const: 2 [type=int]

build-scalar vars=(int)
@1 IN (1, 2)
----
in [type=bool, outer=(1)]
 ├── variable: @1 [type=int, outer=(1)]
 └── tuple [type=tuple{int, int}]
      ├── const: 1 [type=int]
      └── const: 2 [type=int]

build-scalar vars=(int, int)
(@1, @2) IN ((1, 2), (3, 4))
----
in [type=bool, outer=(1,2)]
 ├── tuple [type=tuple{int, int}, outer=(1,2)]
 │    ├── variable: @1 [type=int, outer=(1)]
 │    └── variable: @2 [type=int, outer=(2)]
 └── tuple [type=tuple{tuple{int, int}, tuple{int, int}}]
      ├── tuple [type=tuple{int, int}]
      │    ├── const: 1 [type=int]
      │    └── const: 2 [type=int]
      └── tuple [type=tuple{int, int}]
           ├── const: 3 [type=int]
           └── const: 4 [type=int]

build-scalar vars=(int, int, int, int)
(@1, @2 + @3, 5 + @4 * 2) = (@2 + @3, 8, @1 - @4)
----
eq [type=bool, outer=(1-4)]
 ├── tuple [type=tuple{int, int, int}, outer=(1-4)]
 │    ├── variable: @1 [type=int, outer=(1)]
 │    ├── plus [type=int, outer=(2,3)]
 │    │    ├── variable: @2 [type=int, outer=(2)]
 │    │    └── variable: @3 [type=int, outer=(3)]
 │    └── plus [type=int, outer=(4)]
 │         ├── const: 5 [type=int]
 │         └── mult [type=int, outer=(4)]
 │              ├── variable: @4 [type=int, outer=(4)]
 │              └── const: 2 [type=int]
 └── tuple [type=tuple{int, int, int}, outer=(1-4)]
      ├── plus [type=int, outer=(2,3)]
      │    ├── variable: @2 [type=int, outer=(2)]
      │    └── variable: @3 [type=int, outer=(3)]
      ├── const: 8 [type=int]
      └── minus [type=int, outer=(1,4)]
           ├── variable: @1 [type=int, outer=(1)]
           └── variable: @4 [type=int, outer=(4)]

build-scalar vars=(int, int, int, int)
((@1, @2), (@3, @4)) = ((1, 2), (3, 4))
----
eq [type=bool, outer=(1-4)]
 ├── tuple [type=tuple{tuple{int, int}, tuple{int, int}}, outer=(1-4)]
 │    ├── tuple [type=tuple{int, int}, outer=(1,2)]
 │    │    ├── variable: @1 [type=int, outer=(1)]
 │    │    └── variable: @2 [type=int, outer=(2)]
 │    └── tuple [type=tuple{int, int}, outer=(3,4)]
 │         ├── variable: @3 [type=int, outer=(3)]
 │         └── variable: @4 [type=int, outer=(4)]
 └── tuple [type=tuple{tuple{int, int}, tuple{int, int}}]
      ├── tuple [type=tuple{int, int}]
      │    ├── const: 1 [type=int]
      │    └── const: 2 [type=int]
      └── tuple [type=tuple{int, int}]
           ├── const: 3 [type=int]
           └── const: 4 [type=int]

build-scalar vars=(int, int, int, string)
(@1, (@2, 'a'), (@3, 'b', 5)) = (9, (@1 + @3, @4), (5, @4, @1))
----
eq [type=bool, outer=(1-4)]
 ├── tuple [type=tuple{int, tuple{int, string}, tuple{int, string, int}}, outer=(1-3)]
 │    ├── variable: @1 [type=int, outer=(1)]
 │    ├── tuple [type=tuple{int, string}, outer=(2)]
 │    │    ├── variable: @2 [type=int, outer=(2)]
 │    │    └── const: 'a' [type=string]
 │    └── tuple [type=tuple{int, string, int}, outer=(3)]
 │         ├── variable: @3 [type=int, outer=(3)]
 │         ├── const: 'b' [type=string]
 │         └── const: 5 [type=int]
 └── tuple [type=tuple{int, tuple{int, string}, tuple{int, string, int}}, outer=(1,3,4)]
      ├── const: 9 [type=int]
      ├── tuple [type=tuple{int, string}, outer=(1,3,4)]
      │    ├── plus [type=int, outer=(1,3)]
      │    │    ├── variable: @1 [type=int, outer=(1)]
      │    │    └── variable: @3 [type=int, outer=(3)]
      │    └── variable: @4 [type=string, outer=(4)]
      └── tuple [type=tuple{int, string, int}, outer=(1,4)]
           ├── const: 5 [type=int]
           ├── variable: @4 [type=string, outer=(4)]
           └── variable: @1 [type=int, outer=(1)]

build-scalar vars=(int, int)
@1 IS NULL
----
is [type=bool, outer=(1)]
 ├── variable: @1 [type=int, outer=(1)]
 └── null [type=unknown]

build-scalar vars=(int, int)
@1 IS NOT DISTINCT FROM NULL
----
is [type=bool, outer=(1)]
 ├── variable: @1 [type=int, outer=(1)]
 └── null [type=unknown]

build-scalar vars=(int, int)
@1 IS NOT DISTINCT FROM @2
----
is [type=bool, outer=(1,2)]
 ├── variable: @1 [type=int, outer=(1)]
 └── variable: @2 [type=int, outer=(2)]

build-scalar vars=(int, int)
@1 IS NOT NULL
----
is-not [type=bool, outer=(1)]
 ├── variable: @1 [type=int, outer=(1)]
 └── null [type=unknown]

build-scalar vars=(int, int)
@1 IS DISTINCT FROM NULL
----
is-not [type=bool, outer=(1)]
 ├── variable: @1 [type=int, outer=(1)]
 └── null [type=unknown]

build-scalar vars=(int, int)
@1 IS DISTINCT FROM @2
----
is-not [type=bool, outer=(1,2)]
 ├── variable: @1 [type=int, outer=(1)]
 └── variable: @2 [type=int, outer=(2)]

build-scalar vars=(int, int)
+ @1 + (- @2)
----
plus [type=int, outer=(1,2)]
 ├── variable: @1 [type=int, outer=(1)]
 └── unary-minus [type=int, outer=(2)]
      └── variable: @2 [type=int, outer=(2)]

build-scalar vars=(int, int)
CASE WHEN @1 = 2 THEN 1 ELSE 2 END
----
case [type=int, outer=(1)]
 ├── true [type=bool]
 ├── when [type=int, outer=(1)]
 │    ├── eq [type=bool, outer=(1)]
 │    │    ├── variable: @1 [type=int, outer=(1)]
 │    │    └── const: 2 [type=int]
 │    └── const: 1 [type=int]
 └── const: 2 [type=int]


build-scalar vars=(string)
LENGTH(@1) = 2
----
eq [type=bool, outer=(1)]
 ├── function: length [type=int, outer=(1)]
 │    └── variable: @1 [type=string, outer=(1)]
 └── const: 2 [type=int]


build-scalar vars=(jsonb)
@1 @> '{"a":1}'
----
contains [type=bool, outer=(1)]
 ├── variable: @1 [type=jsonb, outer=(1)]
 └── const: '{"a": 1}' [type=jsonb]


build-scalar vars=(jsonb)
'{"a":1}' <@ @1
----
contains [type=bool, outer=(1)]
 ├── variable: @1 [type=jsonb, outer=(1)]
 └── const: '{"a": 1}' [type=jsonb]


build-scalar
TRUE
----
true [type=bool]


build-scalar
FALSE
----
false [type=bool]

build-scalar
1::decimal
----
cast: decimal [type=decimal]
 └── const: 1 [type=decimal]

build-scalar
1::float
----
cast: float [type=float]
 └── const: 1.0 [type=float]

build-scalar
1.1::int
----
cast: int [type=int]
 └── const: 1.1 [type=decimal]

build-scalar
'2010-05-12'::timestamp
----
const: '2010-05-12 00:00:00+00:00' [type=timestamp]

build-scalar
'123'::int
----
cast: int [type=int]
 └── const: 123 [type=int]

build-scalar vars=(int, int)
IFNULL(@1, @2)
----
coalesce [type=int, outer=(1,2)]
 ├── variable: @1 [type=int, outer=(1)]
 └── variable: @2 [type=int, outer=(2)]

build-scalar vars=(int, int, int)
COALESCE(@1, @2, @3)
----
coalesce [type=int, outer=(1-3)]
 ├── variable: @1 [type=int, outer=(1)]
 ├── variable: @2 [type=int, outer=(2)]
 └── variable: @3 [type=int, outer=(3)]

build-scalar vars=(int)
CASE WHEN @1 > 5 THEN 1 ELSE -1 END
----
case [type=int, outer=(1)]
 ├── true [type=bool]
 ├── when [type=int, outer=(1)]
 │    ├── gt [type=bool, outer=(1)]
 │    │    ├── variable: @1 [type=int, outer=(1)]
 │    │    └── const: 5 [type=int]
 │    └── const: 1 [type=int]
 └── unary-minus [type=int]
      └── const: 1 [type=int]

build-scalar vars=(int)
CASE WHEN @1 > 5 THEN 1 WHEN @1 < 0 THEN 2 ELSE -1 END
----
case [type=int, outer=(1)]
 ├── true [type=bool]
 ├── when [type=int, outer=(1)]
 │    ├── gt [type=bool, outer=(1)]
 │    │    ├── variable: @1 [type=int, outer=(1)]
 │    │    └── const: 5 [type=int]
 │    └── const: 1 [type=int]
 ├── when [type=int, outer=(1)]
 │    ├── lt [type=bool, outer=(1)]
 │    │    ├── variable: @1 [type=int, outer=(1)]
 │    │    └── const: 0 [type=int]
 │    └── const: 2 [type=int]
 └── unary-minus [type=int]
      └── const: 1 [type=int]

build-scalar vars=(int)
CASE @1 WHEN 5 THEN 1 ELSE -1 END
----
case [type=int, outer=(1)]
 ├── variable: @1 [type=int, outer=(1)]
 ├── when [type=int]
 │    ├── const: 5 [type=int]
 │    └── const: 1 [type=int]
 └── unary-minus [type=int]
      └── const: 1 [type=int]

build-scalar vars=(int, int)
CASE @1 + 3 WHEN 5 * @2 THEN 1 % @2 WHEN 6 THEN 2 ELSE -1 END
----
case [type=int, outer=(1,2)]
 ├── plus [type=int, outer=(1)]
 │    ├── variable: @1 [type=int, outer=(1)]
 │    └── const: 3 [type=int]
 ├── when [type=int, outer=(2)]
 │    ├── mult [type=int, outer=(2)]
 │    │    ├── const: 5 [type=int]
 │    │    └── variable: @2 [type=int, outer=(2)]
 │    └── mod [type=int, outer=(2)]
 │         ├── const: 1 [type=int]
 │         └── variable: @2 [type=int, outer=(2)]
 ├── when [type=int]
 │    ├── const: 6 [type=int]
 │    └── const: 2 [type=int]
 └── unary-minus [type=int]
      └── const: 1 [type=int]

# Tests for CASE with no ELSE statement
build-scalar vars=(int)
CASE WHEN @1 > 5 THEN 1 END
----
case [type=int, outer=(1)]
 ├── true [type=bool]
 ├── when [type=int, outer=(1)]
 │    ├── gt [type=bool, outer=(1)]
 │    │    ├── variable: @1 [type=int, outer=(1)]
 │    │    └── const: 5 [type=int]
 │    └── const: 1 [type=int]
 └── null [type=unknown]

build-scalar vars=(int)
CASE @1 WHEN 5 THEN 1 END
----
case [type=int, outer=(1)]
 ├── variable: @1 [type=int, outer=(1)]
 ├── when [type=int]
 │    ├── const: 5 [type=int]
 │    └── const: 1 [type=int]
 └── null [type=unknown]

build-scalar vars=(json) allow-unsupported
@1->>'a' = 'b'
----
eq [type=bool]
 ├── unsupported-expr: @1->>'a' [type=string]
 └── const: 'b' [type=string]

build-scalar vars=(json) allow-unsupported
@1 ? 'a'
----
unsupported-expr: @1 ? 'a' [type=bool]
