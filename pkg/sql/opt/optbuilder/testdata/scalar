build-scalar
1
----
const: 1 [type=int]

build-scalar
1 + 2
----
const: 3 [type=int]

build-scalar vars=(string)
@1
----
variable: "@1":1 [type=string]

build-scalar vars=(int)
@1 + 2
----
plus [type=int]
 ├── variable: "@1":1 [type=int]
 └── const: 2 [type=int]

build-scalar vars=(int, int)
@1 >= 5 AND @1 <= 10 AND @2 < 4
----
and [type=bool]
 ├── and [type=bool]
 │    ├── ge [type=bool]
 │    │    ├── variable: "@1":1 [type=int]
 │    │    └── const: 5 [type=int]
 │    └── le [type=bool]
 │         ├── variable: "@1":1 [type=int]
 │         └── const: 10 [type=int]
 └── lt [type=bool]
      ├── variable: "@2":2 [type=int]
      └── const: 4 [type=int]

build-scalar vars=(int, int)
(@1, @2) = (1, 2)
----
eq [type=bool]
 ├── tuple [type=tuple{int, int}]
 │    ├── variable: "@1":1 [type=int]
 │    └── variable: "@2":2 [type=int]
 └── tuple [type=tuple{int, int}]
      ├── const: 1 [type=int]
      └── const: 2 [type=int]

build-scalar vars=(int)
@1 IN (1, 2)
----
in [type=bool]
 ├── variable: "@1":1 [type=int]
 └── tuple [type=tuple{int, int}]
      ├── const: 1 [type=int]
      └── const: 2 [type=int]

build-scalar vars=(int, int)
(@1, @2) IN ((1, 2), (3, 4))
----
in [type=bool]
 ├── tuple [type=tuple{int, int}]
 │    ├── variable: "@1":1 [type=int]
 │    └── variable: "@2":2 [type=int]
 └── tuple [type=tuple{tuple{int, int}, tuple{int, int}}]
      ├── tuple [type=tuple{int, int}]
      │    ├── const: 1 [type=int]
      │    └── const: 2 [type=int]
      └── tuple [type=tuple{int, int}]
           ├── const: 3 [type=int]
           └── const: 4 [type=int]

build-scalar vars=(int, int, int, int)
(@1, @2 + @3, 5 + @4 * 2) = (@2 + @3, 8, @1 - @4)
----
eq [type=bool]
 ├── tuple [type=tuple{int, int, int}]
 │    ├── variable: "@1":1 [type=int]
 │    ├── plus [type=int]
 │    │    ├── variable: "@2":2 [type=int]
 │    │    └── variable: "@3":3 [type=int]
 │    └── plus [type=int]
 │         ├── const: 5 [type=int]
 │         └── mult [type=int]
 │              ├── variable: "@4":4 [type=int]
 │              └── const: 2 [type=int]
 └── tuple [type=tuple{int, int, int}]
      ├── plus [type=int]
      │    ├── variable: "@2":2 [type=int]
      │    └── variable: "@3":3 [type=int]
      ├── const: 8 [type=int]
      └── minus [type=int]
           ├── variable: "@1":1 [type=int]
           └── variable: "@4":4 [type=int]

build-scalar vars=(int, int, int, int)
((@1, @2), (@3, @4)) = ((1, 2), (3, 4))
----
eq [type=bool]
 ├── tuple [type=tuple{tuple{int, int}, tuple{int, int}}]
 │    ├── tuple [type=tuple{int, int}]
 │    │    ├── variable: "@1":1 [type=int]
 │    │    └── variable: "@2":2 [type=int]
 │    └── tuple [type=tuple{int, int}]
 │         ├── variable: "@3":3 [type=int]
 │         └── variable: "@4":4 [type=int]
 └── tuple [type=tuple{tuple{int, int}, tuple{int, int}}]
      ├── tuple [type=tuple{int, int}]
      │    ├── const: 1 [type=int]
      │    └── const: 2 [type=int]
      └── tuple [type=tuple{int, int}]
           ├── const: 3 [type=int]
           └── const: 4 [type=int]

build-scalar vars=(int, int, int, string)
(@1, (@2, 'a'), (@3, 'b', 5)) = (9, (@1 + @3, @4), (5, @4, @1))
----
eq [type=bool]
 ├── tuple [type=tuple{int, tuple{int, string}, tuple{int, string, int}}]
 │    ├── variable: "@1":1 [type=int]
 │    ├── tuple [type=tuple{int, string}]
 │    │    ├── variable: "@2":2 [type=int]
 │    │    └── const: 'a' [type=string]
 │    └── tuple [type=tuple{int, string, int}]
 │         ├── variable: "@3":3 [type=int]
 │         ├── const: 'b' [type=string]
 │         └── const: 5 [type=int]
 └── tuple [type=tuple{int, tuple{int, string}, tuple{int, string, int}}]
      ├── const: 9 [type=int]
      ├── tuple [type=tuple{int, string}]
      │    ├── plus [type=int]
      │    │    ├── variable: "@1":1 [type=int]
      │    │    └── variable: "@3":3 [type=int]
      │    └── variable: "@4":4 [type=string]
      └── tuple [type=tuple{int, string, int}]
           ├── const: 5 [type=int]
           ├── variable: "@4":4 [type=string]
           └── variable: "@1":1 [type=int]

build-scalar vars=(int, int)
@1 IS NULL
----
is [type=bool]
 ├── variable: "@1":1 [type=int]
 └── null [type=unknown]

build-scalar vars=(int, int)
@1 IS NOT DISTINCT FROM NULL
----
is [type=bool]
 ├── variable: "@1":1 [type=int]
 └── null [type=unknown]

build-scalar vars=(int, int)
@1 IS NOT DISTINCT FROM @2
----
is [type=bool]
 ├── variable: "@1":1 [type=int]
 └── variable: "@2":2 [type=int]

build-scalar vars=(int, int)
@1 IS NOT NULL
----
is-not [type=bool]
 ├── variable: "@1":1 [type=int]
 └── null [type=unknown]

build-scalar vars=(int, int)
@1 IS DISTINCT FROM NULL
----
is-not [type=bool]
 ├── variable: "@1":1 [type=int]
 └── null [type=unknown]

build-scalar vars=(int, int)
@1 IS DISTINCT FROM @2
----
is-not [type=bool]
 ├── variable: "@1":1 [type=int]
 └── variable: "@2":2 [type=int]

build-scalar vars=(int, int)
(@1, @2) IS NULL
----
is-tuple-null [type=bool]
 └── tuple [type=tuple{int, int}]
      ├── variable: "@1":1 [type=int]
      └── variable: "@2":2 [type=int]

build-scalar vars=(int, int)
(@1, @2) IS NOT NULL
----
is-tuple-not-null [type=bool]
 └── tuple [type=tuple{int, int}]
      ├── variable: "@1":1 [type=int]
      └── variable: "@2":2 [type=int]

build-scalar vars=(int, int)
+ @1 + (- @2)
----
plus [type=int]
 ├── variable: "@1":1 [type=int]
 └── unary-minus [type=int]
      └── variable: "@2":2 [type=int]

build-scalar vars=(int, int)
CASE WHEN @1 = 2 THEN 1 ELSE 2 END
----
case [type=int]
 ├── true [type=bool]
 ├── when [type=int]
 │    ├── eq [type=bool]
 │    │    ├── variable: "@1":1 [type=int]
 │    │    └── const: 2 [type=int]
 │    └── const: 1 [type=int]
 └── const: 2 [type=int]

build-scalar
if(true, 1, 2)
----
case [type=int]
 ├── true [type=bool]
 ├── when [type=int]
 │    ├── true [type=bool]
 │    └── const: 1 [type=int]
 └── const: 2 [type=int]

build-scalar
if(false, NULL, 1)
----
case [type=int]
 ├── false [type=bool]
 ├── when [type=unknown]
 │    ├── true [type=bool]
 │    └── null [type=unknown]
 └── const: 1 [type=int]

build-scalar
if(true, NULL, 1)
----
case [type=int]
 ├── true [type=bool]
 ├── when [type=unknown]
 │    ├── true [type=bool]
 │    └── null [type=unknown]
 └── const: 1 [type=int]

build-scalar
if(false, 1, NULL)
----
case [type=int]
 ├── false [type=bool]
 ├── when [type=int]
 │    ├── true [type=bool]
 │    └── const: 1 [type=int]
 └── null [type=unknown]

build-scalar
nullif(1, 2)
----
case [type=int]
 ├── const: 1 [type=int]
 ├── when [type=unknown]
 │    ├── const: 2 [type=int]
 │    └── null [type=unknown]
 └── const: 1 [type=int]

build-scalar
nullif(NULL, 0)
----
case [type=int]
 ├── cast: INT8 [type=int]
 │    └── null [type=unknown]
 ├── when [type=unknown]
 │    ├── const: 0 [type=int]
 │    └── null [type=unknown]
 └── cast: INT8 [type=int]
      └── null [type=unknown]

build-scalar
nullif(0, NULL)
----
case [type=int]
 ├── const: 0 [type=int]
 ├── when [type=unknown]
 │    ├── null [type=unknown]
 │    └── null [type=unknown]
 └── const: 0 [type=int]

build-scalar vars=(string)
length(@1) = 2
----
eq [type=bool]
 ├── function: length [type=int]
 │    └── variable: "@1":1 [type=string]
 └── const: 2 [type=int]

build-scalar vars=(jsonb)
@1 @> '{"a":1}'
----
contains [type=bool]
 ├── variable: "@1":1 [type=jsonb]
 └── const: '{"a": 1}' [type=jsonb]

build-scalar vars=(jsonb)
'{"a":1}' <@ @1
----
contains [type=bool]
 ├── variable: "@1":1 [type=jsonb]
 └── const: '{"a": 1}' [type=jsonb]

build-scalar vars=(jsonb)
@1 ? 'a'
----
json-exists [type=bool]
 ├── variable: "@1":1 [type=jsonb]
 └── const: 'a' [type=string]

build-scalar vars=(jsonb)
@1 ?| ARRAY['a', 'b', 'c']
----
json-some-exists [type=bool]
 ├── variable: "@1":1 [type=jsonb]
 └── array: [type=string[]]
      ├── const: 'a' [type=string]
      ├── const: 'b' [type=string]
      └── const: 'c' [type=string]

build-scalar vars=(jsonb)
@1 ?& ARRAY['a', 'b', 'c']
----
json-all-exists [type=bool]
 ├── variable: "@1":1 [type=jsonb]
 └── array: [type=string[]]
      ├── const: 'a' [type=string]
      ├── const: 'b' [type=string]
      └── const: 'c' [type=string]

build-scalar
TRUE
----
true [type=bool]


build-scalar
FALSE
----
false [type=bool]

build-scalar
1::decimal
----
cast: DECIMAL [type=decimal]
 └── const: 1 [type=decimal]

build-scalar
1::float
----
cast: FLOAT8 [type=float]
 └── const: 1.0 [type=float]

build-scalar
1.1::int
----
cast: INT8 [type=int]
 └── const: 1.1 [type=decimal]

build-scalar
'2010-05-12'::timestamp
----
const: '2010-05-12 00:00:00+00:00' [type=timestamp]

build-scalar
'123'::int
----
cast: INT8 [type=int]
 └── const: 123 [type=int]

build-scalar vars=(int, int)
IFNULL(@1, @2)
----
coalesce [type=int]
 ├── variable: "@1":1 [type=int]
 └── variable: "@2":2 [type=int]

build-scalar vars=(int, int, int)
COALESCE(@1, @2, @3)
----
coalesce [type=int]
 ├── variable: "@1":1 [type=int]
 ├── variable: "@2":2 [type=int]
 └── variable: "@3":3 [type=int]

build-scalar vars=(int)
CASE WHEN @1 > 5 THEN 1 ELSE -1 END
----
case [type=int]
 ├── true [type=bool]
 ├── when [type=int]
 │    ├── gt [type=bool]
 │    │    ├── variable: "@1":1 [type=int]
 │    │    └── const: 5 [type=int]
 │    └── const: 1 [type=int]
 └── const: -1 [type=int]

build-scalar vars=(int)
CASE WHEN @1 > 5 THEN 1 WHEN @1 < 0 THEN 2 ELSE -1 END
----
case [type=int]
 ├── true [type=bool]
 ├── when [type=int]
 │    ├── gt [type=bool]
 │    │    ├── variable: "@1":1 [type=int]
 │    │    └── const: 5 [type=int]
 │    └── const: 1 [type=int]
 ├── when [type=int]
 │    ├── lt [type=bool]
 │    │    ├── variable: "@1":1 [type=int]
 │    │    └── const: 0 [type=int]
 │    └── const: 2 [type=int]
 └── const: -1 [type=int]

build-scalar vars=(int)
CASE @1 WHEN 5 THEN 1 ELSE -1 END
----
case [type=int]
 ├── variable: "@1":1 [type=int]
 ├── when [type=int]
 │    ├── const: 5 [type=int]
 │    └── const: 1 [type=int]
 └── const: -1 [type=int]

build-scalar vars=(int, int)
CASE @1 + 3 WHEN 5 * @2 THEN 1 % @2 WHEN 6 THEN 2 ELSE -1 END
----
case [type=int]
 ├── plus [type=int]
 │    ├── variable: "@1":1 [type=int]
 │    └── const: 3 [type=int]
 ├── when [type=int]
 │    ├── mult [type=int]
 │    │    ├── const: 5 [type=int]
 │    │    └── variable: "@2":2 [type=int]
 │    └── mod [type=int]
 │         ├── const: 1 [type=int]
 │         └── variable: "@2":2 [type=int]
 ├── when [type=int]
 │    ├── const: 6 [type=int]
 │    └── const: 2 [type=int]
 └── const: -1 [type=int]

# Tests for CASE with no ELSE statement
build-scalar vars=(int)
CASE WHEN @1 > 5 THEN 1 END
----
case [type=int]
 ├── true [type=bool]
 ├── when [type=int]
 │    ├── gt [type=bool]
 │    │    ├── variable: "@1":1 [type=int]
 │    │    └── const: 5 [type=int]
 │    └── const: 1 [type=int]
 └── null [type=unknown]

build-scalar vars=(int)
CASE @1 WHEN 5 THEN 1 END
----
case [type=int]
 ├── variable: "@1":1 [type=int]
 ├── when [type=int]
 │    ├── const: 5 [type=int]
 │    └── const: 1 [type=int]
 └── null [type=unknown]

build-scalar vars=(int)
@1 BETWEEN 1 AND 4
----
and [type=bool]
 ├── ge [type=bool]
 │    ├── variable: "@1":1 [type=int]
 │    └── const: 1 [type=int]
 └── le [type=bool]
      ├── variable: "@1":1 [type=int]
      └── const: 4 [type=int]

build-scalar vars=(int)
@1 NOT BETWEEN 1 AND 4
----
not [type=bool]
 └── and [type=bool]
      ├── ge [type=bool]
      │    ├── variable: "@1":1 [type=int]
      │    └── const: 1 [type=int]
      └── le [type=bool]
           ├── variable: "@1":1 [type=int]
           └── const: 4 [type=int]

build-scalar vars=(int)
@1 BETWEEN SYMMETRIC 1 AND 4
----
or [type=bool]
 ├── and [type=bool]
 │    ├── ge [type=bool]
 │    │    ├── variable: "@1":1 [type=int]
 │    │    └── const: 1 [type=int]
 │    └── le [type=bool]
 │         ├── variable: "@1":1 [type=int]
 │         └── const: 4 [type=int]
 └── and [type=bool]
      ├── ge [type=bool]
      │    ├── variable: "@1":1 [type=int]
      │    └── const: 4 [type=int]
      └── le [type=bool]
           ├── variable: "@1":1 [type=int]
           └── const: 1 [type=int]

build-scalar vars=(int)
@1 NOT BETWEEN SYMMETRIC 1 AND 4
----
not [type=bool]
 └── or [type=bool]
      ├── and [type=bool]
      │    ├── ge [type=bool]
      │    │    ├── variable: "@1":1 [type=int]
      │    │    └── const: 1 [type=int]
      │    └── le [type=bool]
      │         ├── variable: "@1":1 [type=int]
      │         └── const: 4 [type=int]
      └── and [type=bool]
           ├── ge [type=bool]
           │    ├── variable: "@1":1 [type=int]
           │    └── const: 4 [type=int]
           └── le [type=bool]
                ├── variable: "@1":1 [type=int]
                └── const: 1 [type=int]

build-scalar vars=(int, int, int)
@1 BETWEEN @2 AND @3
----
and [type=bool]
 ├── ge [type=bool]
 │    ├── variable: "@1":1 [type=int]
 │    └── variable: "@2":2 [type=int]
 └── le [type=bool]
      ├── variable: "@1":1 [type=int]
      └── variable: "@3":3 [type=int]

build-scalar vars=(int, int, int)
(@1 + @2) BETWEEN (@2 + @3) AND (@3 + @1)
----
and [type=bool]
 ├── ge [type=bool]
 │    ├── plus [type=int]
 │    │    ├── variable: "@1":1 [type=int]
 │    │    └── variable: "@2":2 [type=int]
 │    └── plus [type=int]
 │         ├── variable: "@2":2 [type=int]
 │         └── variable: "@3":3 [type=int]
 └── le [type=bool]
      ├── plus [type=int]
      │    ├── variable: "@1":1 [type=int]
      │    └── variable: "@2":2 [type=int]
      └── plus [type=int]
           ├── variable: "@3":3 [type=int]
           └── variable: "@1":1 [type=int]

build-scalar vars=(int, int, int)
(@1 + @2) BETWEEN SYMMETRIC (@2 + @3) AND (@3 + @1)
----
or [type=bool]
 ├── and [type=bool]
 │    ├── ge [type=bool]
 │    │    ├── plus [type=int]
 │    │    │    ├── variable: "@1":1 [type=int]
 │    │    │    └── variable: "@2":2 [type=int]
 │    │    └── plus [type=int]
 │    │         ├── variable: "@2":2 [type=int]
 │    │         └── variable: "@3":3 [type=int]
 │    └── le [type=bool]
 │         ├── plus [type=int]
 │         │    ├── variable: "@1":1 [type=int]
 │         │    └── variable: "@2":2 [type=int]
 │         └── plus [type=int]
 │              ├── variable: "@3":3 [type=int]
 │              └── variable: "@1":1 [type=int]
 └── and [type=bool]
      ├── ge [type=bool]
      │    ├── plus [type=int]
      │    │    ├── variable: "@1":1 [type=int]
      │    │    └── variable: "@2":2 [type=int]
      │    └── plus [type=int]
      │         ├── variable: "@3":3 [type=int]
      │         └── variable: "@1":1 [type=int]
      └── le [type=bool]
           ├── plus [type=int]
           │    ├── variable: "@1":1 [type=int]
           │    └── variable: "@2":2 [type=int]
           └── plus [type=int]
                ├── variable: "@2":2 [type=int]
                └── variable: "@3":3 [type=int]

build-scalar vars=(int, int, int)
(@1, @2) BETWEEN (1, 2) AND (3, 4)
----
and [type=bool]
 ├── ge [type=bool]
 │    ├── tuple [type=tuple{int, int}]
 │    │    ├── variable: "@1":1 [type=int]
 │    │    └── variable: "@2":2 [type=int]
 │    └── tuple [type=tuple{int, int}]
 │         ├── const: 1 [type=int]
 │         └── const: 2 [type=int]
 └── le [type=bool]
      ├── tuple [type=tuple{int, int}]
      │    ├── variable: "@1":1 [type=int]
      │    └── variable: "@2":2 [type=int]
      └── tuple [type=tuple{int, int}]
           ├── const: 3 [type=int]
           └── const: 4 [type=int]

build-scalar vars=(int, int, int)
(@1, @2) NOT BETWEEN SYMMETRIC (1, 2) AND (3, 4)
----
not [type=bool]
 └── or [type=bool]
      ├── and [type=bool]
      │    ├── ge [type=bool]
      │    │    ├── tuple [type=tuple{int, int}]
      │    │    │    ├── variable: "@1":1 [type=int]
      │    │    │    └── variable: "@2":2 [type=int]
      │    │    └── tuple [type=tuple{int, int}]
      │    │         ├── const: 1 [type=int]
      │    │         └── const: 2 [type=int]
      │    └── le [type=bool]
      │         ├── tuple [type=tuple{int, int}]
      │         │    ├── variable: "@1":1 [type=int]
      │         │    └── variable: "@2":2 [type=int]
      │         └── tuple [type=tuple{int, int}]
      │              ├── const: 3 [type=int]
      │              └── const: 4 [type=int]
      └── and [type=bool]
           ├── ge [type=bool]
           │    ├── tuple [type=tuple{int, int}]
           │    │    ├── variable: "@1":1 [type=int]
           │    │    └── variable: "@2":2 [type=int]
           │    └── tuple [type=tuple{int, int}]
           │         ├── const: 3 [type=int]
           │         └── const: 4 [type=int]
           └── le [type=bool]
                ├── tuple [type=tuple{int, int}]
                │    ├── variable: "@1":1 [type=int]
                │    └── variable: "@2":2 [type=int]
                └── tuple [type=tuple{int, int}]
                     ├── const: 1 [type=int]
                     └── const: 2 [type=int]

# The left side of BETWEEN is typed differently in the two comparisons.
build-scalar
'' BETWEEN ''::BYTES AND ''
----
and [type=bool]
 ├── ge [type=bool]
 │    ├── const: '\x' [type=bytes]
 │    └── const: '\x' [type=bytes]
 └── le [type=bool]
      ├── const: '' [type=string]
      └── const: '' [type=string]

build-scalar
'' BETWEEN SYMMETRIC ''::BYTES AND ''
----
or [type=bool]
 ├── and [type=bool]
 │    ├── ge [type=bool]
 │    │    ├── const: '\x' [type=bytes]
 │    │    └── const: '\x' [type=bytes]
 │    └── le [type=bool]
 │         ├── const: '' [type=string]
 │         └── const: '' [type=string]
 └── and [type=bool]
      ├── ge [type=bool]
      │    ├── const: '' [type=string]
      │    └── const: '' [type=string]
      └── le [type=bool]
           ├── const: '\x' [type=bytes]
           └── const: '\x' [type=bytes]

build-scalar
NULL
----
null [type=unknown]

build-scalar
NULL::int
----
cast: INT8 [type=int]
 └── null [type=unknown]

build-scalar vars=(int[])
@1 = ARRAY[1, 2, 3]
----
eq [type=bool]
 ├── variable: "@1":1 [type=int[]]
 └── array: [type=int[]]
      ├── const: 1 [type=int]
      ├── const: 2 [type=int]
      └── const: 3 [type=int]

build-scalar vars=(int[])
@1 = ARRAY[1, 1.0, '1']
----
eq [type=bool]
 ├── variable: "@1":1 [type=int[]]
 └── array: [type=int[]]
      ├── const: 1 [type=int]
      ├── const: 1 [type=int]
      └── const: 1 [type=int]

build-scalar vars=(float[])
@1 = ARRAY[1, 1.1, '1.123']
----
eq [type=bool]
 ├── variable: "@1":1 [type=float[]]
 └── array: [type=float[]]
      ├── const: 1.0 [type=float]
      ├── const: 1.1 [type=float]
      └── const: 1.123 [type=float]

build-scalar vars=(int[])
@1 = ARRAY[]
----
eq [type=bool]
 ├── variable: "@1":1 [type=int[]]
 └── array: [type=int[]]

build-scalar vars=(string[])
@1 = ARRAY['foo', 'bar', 'baz']
----
eq [type=bool]
 ├── variable: "@1":1 [type=string[]]
 └── array: [type=string[]]
      ├── const: 'foo' [type=string]
      ├── const: 'bar' [type=string]
      └── const: 'baz' [type=string]

build-scalar vars=(json)
@1->>'a' = 'b'
----
eq [type=bool]
 ├── fetch-text [type=string]
 │    ├── variable: "@1":1 [type=jsonb]
 │    └── const: 'a' [type=string]
 └── const: 'b' [type=string]

build-scalar vars=(json)
@1->'a' = '"b"'
----
eq [type=bool]
 ├── fetch-val [type=jsonb]
 │    ├── variable: "@1":1 [type=jsonb]
 │    └── const: 'a' [type=string]
 └── const: '"b"' [type=jsonb]

build-scalar vars=(json)
@1#>ARRAY['a'] = '"b"'
----
eq [type=bool]
 ├── fetch-val-path [type=jsonb]
 │    ├── variable: "@1":1 [type=jsonb]
 │    └── array: [type=string[]]
 │         └── const: 'a' [type=string]
 └── const: '"b"' [type=jsonb]

build-scalar vars=(json)
@1#>>ARRAY['a'] = 'b'
----
eq [type=bool]
 ├── fetch-text-path [type=string]
 │    ├── variable: "@1":1 [type=jsonb]
 │    └── array: [type=string[]]
 │         └── const: 'a' [type=string]
 └── const: 'b' [type=string]

build-scalar vars=(json, json)
@1 || @2
----
concat [type=jsonb]
 ├── variable: "@1":1 [type=jsonb]
 └── variable: "@2":2 [type=jsonb]

build-scalar allow-unsupported
'hello' COLLATE en
----
collate [type=collatedstring{en}]
 └── const: 'hello' [type=string]

build-scalar
random()
----
function: random [type=float]

build-scalar
ARRAY[1, 2] || NULL
----
concat [type=int[]]
 ├── array: [type=int[]]
 │    ├── const: 1 [type=int]
 │    └── const: 2 [type=int]
 └── cast: INT8[] [type=int[]]
      └── null [type=unknown]

build-scalar
NULL || ARRAY[1, 2]
----
concat [type=int[]]
 ├── cast: INT8[] [type=int[]]
 │    └── null [type=unknown]
 └── array: [type=int[]]
      ├── const: 1 [type=int]
      └── const: 2 [type=int]

build-scalar
ARRAY[1, 2] || NULL::smallint
----
concat [type=int[]]
 ├── array: [type=int[]]
 │    ├── const: 1 [type=int]
 │    └── const: 2 [type=int]
 └── cast: INT2 [type=int2]
      └── null [type=unknown]

build-scalar
NULL::oid || ARRAY[1, 2]
----
concat [type=oid[]]
 ├── cast: OID [type=oid]
 │    └── null [type=unknown]
 └── array: [type=oid[]]
      ├── const: 1 [type=oid]
      └── const: 2 [type=oid]

build-scalar
ARRAY['"foo"'::jsonb]
----
error: unimplemented: arrays of jsonb not allowed

build-scalar
ARRAY['"foo"'::json]
----
error: unimplemented: arrays of jsonb not allowed

opt
SELECT -((-9223372036854775808):::int)
----
values
 ├── columns: "?column?":1
 └── (-(-9223372036854775808),)

# TODO(justin): modify build-scalar to handle subqueries
# so this can use it.
build
SELECT ARRAY(SELECT 1)
----
project
 ├── columns: array:2
 ├── values
 │    └── ()
 └── projections
      └── array-flatten [as=array:2]
           └── project
                ├── columns: "?column?":1!null
                ├── values
                │    └── ()
                └── projections
                     └── 1 [as="?column?":1]

exec-ddl
CREATE TABLE x (a INT PRIMARY KEY)
----

exec-ddl
CREATE TABLE y (b INT PRIMARY KEY)
----

build
SELECT b, ARRAY(SELECT a FROM x WHERE x.a = y.b) FROM y
----
project
 ├── columns: b:1!null array:3
 ├── scan y
 │    └── columns: b:1!null
 └── projections
      └── array-flatten [as=array:3]
           └── select
                ├── columns: a:2!null
                ├── scan x
                │    └── columns: a:2!null
                └── filters
                     └── a:2 = b:1

build
SELECT b, ARRAY(SELECT a FROM x ORDER BY a) FROM y
----
project
 ├── columns: b:1!null array:3
 ├── scan y
 │    └── columns: b:1!null
 └── projections
      └── array-flatten [as=array:3]
           └── scan x
                ├── columns: a:2!null
                └── ordering: +2

build
SELECT ARRAY(VALUES ('foo'), ('bar'), ('baz'))
----
project
 ├── columns: array:2
 ├── values
 │    └── ()
 └── projections
      └── array-flatten [as=array:2]
           └── values
                ├── columns: column1:1!null
                ├── ('foo',)
                ├── ('bar',)
                └── ('baz',)

build
SELECT ARRAY(VALUES (ARRAY[1]))
----
project
 ├── columns: array:2
 ├── values
 │    └── ()
 └── projections
      └── array-flatten [as=array:2]
           └── values
                ├── columns: column1:1
                └── (ARRAY[1],)

build
SELECT ARRAY(SELECT (1, 2))
----
project
 ├── columns: array:2
 ├── values
 │    └── ()
 └── projections
      └── array-flatten [as=array:2]
           └── project
                ├── columns: "?column?":1!null
                ├── values
                │    └── ()
                └── projections
                     └── (1, 2) [as="?column?":1]

build
SELECT ARRAY(VALUES ((1, 2)))
----
project
 ├── columns: array:2
 ├── values
 │    └── ()
 └── projections
      └── array-flatten [as=array:2]
           └── values
                ├── columns: column1:1
                └── ((1, 2),)

build
SELECT ARRAY(VALUES ('{}'::JSONB))
----
error (0A000): unimplemented: arrays of jsonb not allowed

build
SELECT ARRAY(SELECT 1, 2)
----
error (42601): subquery must return only one column, found 2

build
SELECT ARRAY(SELECT generate_series(1,100) ORDER BY 1 DESC)
----
project
 ├── columns: array:2
 ├── values
 │    └── ()
 └── projections
      └── array-flatten [as=array:2]
           └── sort
                ├── columns: generate_series:1
                ├── ordering: -1
                └── project-set
                     ├── columns: generate_series:1
                     ├── values
                     │    └── ()
                     └── zip
                          └── generate_series(1, 100)

build-scalar
1 = ANY ARRAY[1, 2, 3]
----
any-scalar: eq [type=bool]
 ├── const: 1 [type=int]
 └── array: [type=int[]]
      ├── const: 1 [type=int]
      ├── const: 2 [type=int]
      └── const: 3 [type=int]

build-scalar
1 > ANY ARRAY[1, 2, 3]
----
any-scalar: gt [type=bool]
 ├── const: 1 [type=int]
 └── array: [type=int[]]
      ├── const: 1 [type=int]
      ├── const: 2 [type=int]
      └── const: 3 [type=int]

build-scalar
1 = ALL ARRAY[1, 2, 3]
----
not [type=bool]
 └── any-scalar: ne [type=bool]
      ├── const: 1 [type=int]
      └── array: [type=int[]]
           ├── const: 1 [type=int]
           ├── const: 2 [type=int]
           └── const: 3 [type=int]

build-scalar
1 > ALL ARRAY[1, 2, 3]
----
not [type=bool]
 └── any-scalar: le [type=bool]
      ├── const: 1 [type=int]
      └── array: [type=int[]]
           ├── const: 1 [type=int]
           ├── const: 2 [type=int]
           └── const: 3 [type=int]

build-scalar
1 = ANY (1, 2, 3)
----
any-scalar: eq [type=bool]
 ├── const: 1 [type=int]
 └── tuple [type=tuple{int, int, int}]
      ├── const: 1 [type=int]
      ├── const: 2 [type=int]
      └── const: 3 [type=int]

build-scalar
'foo' = ANY ('foo', 'bar', 'baz')
----
any-scalar: eq [type=bool]
 ├── const: 'foo' [type=string]
 └── tuple [type=tuple{string, string, string}]
      ├── const: 'foo' [type=string]
      ├── const: 'bar' [type=string]
      └── const: 'baz' [type=string]


build-scalar
1 = ANY ()
----
any-scalar: eq [type=bool]
 ├── const: 1 [type=int]
 └── tuple [type=tuple]

build
SELECT 1 > ALL ARRAY['foo']
----
error (22023): unsupported comparison operator: 1 > ALL ARRAY['foo']: could not parse "foo" as type int: strconv.ParseInt: parsing "foo": invalid syntax

build-scalar vars=(int[], string[], float[], int)
(@1[1], @2[1+1], @3[@4])
----
tuple [type=tuple{int, string, float}]
 ├── indirection [type=int]
 │    ├── variable: "@1":1 [type=int[]]
 │    └── const: 1 [type=int]
 ├── indirection [type=string]
 │    ├── variable: "@2":2 [type=string[]]
 │    └── const: 2 [type=int]
 └── indirection [type=float]
      ├── variable: "@3":3 [type=float[]]
      └── variable: "@4":4 [type=int]

build-scalar vars=(int,string,int[])
(
    (@1 IS OF (INT), @1 IS OF (INT, STRING), @1 IS OF (STRING)),
    (@1 IS NOT OF (INT), @1 IS NOT OF (INT, STRING), @1 IS NOT OF (STRING)),
    (@2 IS NOT OF (INT), @2 IS NOT OF (INT, STRING), @2 IS NOT OF (STRING)),
    (@3 IS NOT OF (INT[]), @3 IS OF (INT[]), @3 IS OF (STRING[]))
)
----
tuple [type=tuple{tuple{bool, bool, bool}, tuple{bool, bool, bool}, tuple{bool, bool, bool}, tuple{bool, bool, bool}}]
 ├── tuple [type=tuple{bool, bool, bool}]
 │    ├── true [type=bool]
 │    ├── true [type=bool]
 │    └── false [type=bool]
 ├── tuple [type=tuple{bool, bool, bool}]
 │    ├── false [type=bool]
 │    ├── false [type=bool]
 │    └── true [type=bool]
 ├── tuple [type=tuple{bool, bool, bool}]
 │    ├── true [type=bool]
 │    ├── false [type=bool]
 │    └── false [type=bool]
 └── tuple [type=tuple{bool, bool, bool}]
      ├── false [type=bool]
      ├── true [type=bool]
      └── false [type=bool]

build-scalar vars=(string)
@1 COLLATE en
----
collate [type=collatedstring{en}]
 └── variable: "@1":1 [type=string]

exec-ddl
CREATE TABLE u (x INT)
----

exec-ddl
CREATE TABLE v (y INT[])
----

build
SELECT ARRAY(SELECT x FROM u ORDER BY x)
----
project
 ├── columns: array:3
 ├── values
 │    └── ()
 └── projections
      └── array-flatten [as=array:3]
           └── sort
                ├── columns: x:1
                ├── ordering: +1
                └── project
                     ├── columns: x:1
                     └── scan u
                          └── columns: x:1 rowid:2!null

build
SELECT * FROM v WHERE y = ARRAY(SELECT x FROM u ORDER BY x)
----
project
 ├── columns: y:1!null
 └── select
      ├── columns: y:1!null v.rowid:2!null
      ├── scan v
      │    └── columns: y:1 v.rowid:2!null
      └── filters
           └── eq
                ├── y:1
                └── array-flatten
                     └── sort
                          ├── columns: x:3
                          ├── ordering: +3
                          └── project
                               ├── columns: x:3
                               └── scan u
                                    └── columns: x:3 u.rowid:4!null

build
SELECT ARRAY(SELECT (y, 2) FROM u ORDER BY x) FROM v
----
error (0A000): unimplemented: can't execute a correlated ARRAY(...) over tuple{int[], int}

build
SELECT ARRAY(SELECT y FROM u ORDER BY x) FROM v
----
error (0A000): unimplemented: can't execute a correlated ARRAY(...) over int[]

build-scalar
ISERROR(1/0)
----
if-err [type=bool]
 └── div [type=decimal]
      ├── const: 1 [type=int]
      └── const: 0 [type=int]

build-scalar
ISERROR(1/0, '22012')
----
if-err [type=bool]
 ├── div [type=decimal]
 │    ├── const: 1 [type=int]
 │    └── const: 0 [type=int]
 └── err-code
      └── const: '22012' [type=string]

build-scalar vars=(decimal)
IFERROR(1/0, @1)
----
if-err [type=decimal]
 ├── div [type=decimal]
 │    ├── const: 1 [type=int]
 │    └── const: 0 [type=int]
 └── else
      └── variable: "@1":1 [type=decimal]

build-scalar vars=(decimal, string)
IFERROR(1/0, @1, @2)
----
if-err [type=decimal]
 ├── div [type=decimal]
 │    ├── const: 1 [type=int]
 │    └── const: 0 [type=int]
 ├── else
 │    └── variable: "@1":1 [type=decimal]
 └── err-code
      └── variable: "@2":2 [type=string]

build-scalar vars=(decimal)
IFERROR(1/0, @1, '10000')
----
if-err [type=decimal]
 ├── div [type=decimal]
 │    ├── const: 1 [type=int]
 │    └── const: 0 [type=int]
 ├── else
 │    └── variable: "@1":1 [type=decimal]
 └── err-code
      └── const: '10000' [type=string]
