# tests adapted from logictest -- aggregate

exec-ddl
CREATE TABLE kv (
  k INT PRIMARY KEY,
  v INT,
  w INT,
  s STRING
)
----
TABLE kv
 ├── k int not null
 ├── v int
 ├── w int
 ├── s string
 └── INDEX primary
      └── k int not null

# Presence of HAVING triggers aggregation, reducing results to one row (even without GROUP BY).
build
SELECT 3 FROM kv HAVING TRUE
----
project
 ├── columns: "3":5(int!null)
 ├── select
 │    ├── group-by
 │    │    └── project
 │    │         └── scan kv
 │    │              └── columns: k:1(int!null) v:2(int) w:3(int) s:4(string)
 │    └── filters [type=bool]
 │         └── true [type=bool]
 └── projections
      └── const: 3 [type=int]

build
SELECT s, COUNT(*) FROM kv GROUP BY s HAVING COUNT(*) > 1
----
select
 ├── columns: s:4(string) count:5(int!null)
 ├── group-by
 │    ├── columns: s:4(string) column5:5(int)
 │    ├── grouping columns: s:4(string)
 │    ├── project
 │    │    ├── columns: s:4(string)
 │    │    └── scan kv
 │    │         └── columns: k:1(int!null) v:2(int) w:3(int) s:4(string)
 │    └── aggregations
 │         └── count-rows [type=int]
 └── filters [type=bool]
      └── gt [type=bool]
           ├── variable: column5 [type=int]
           └── const: 1 [type=int]

build
SELECT MAX(k), MIN(v) FROM kv HAVING MIN(v) > 2
----
project
 ├── columns: max:6(int) min:5(int!null)
 └── select
      ├── columns: column5:5(int!null) max:6(int)
      ├── group-by
      │    ├── columns: column5:5(int) max:6(int)
      │    ├── project
      │    │    ├── columns: k:1(int!null) v:2(int)
      │    │    └── scan kv
      │    │         └── columns: k:1(int!null) v:2(int) w:3(int) s:4(string)
      │    └── aggregations
      │         ├── min [type=int]
      │         │    └── variable: kv.v [type=int]
      │         └── max [type=int]
      │              └── variable: kv.k [type=int]
      └── filters [type=bool]
           └── gt [type=bool]
                ├── variable: column5 [type=int]
                └── const: 2 [type=int]

build
SELECT MAX(k), MIN(v) FROM kv HAVING MAX(v) > 2
----
project
 ├── columns: max:6(int) min:7(int)
 └── select
      ├── columns: column5:5(int!null) max:6(int) min:7(int)
      ├── group-by
      │    ├── columns: column5:5(int) max:6(int) min:7(int)
      │    ├── project
      │    │    ├── columns: k:1(int!null) v:2(int)
      │    │    └── scan kv
      │    │         └── columns: k:1(int!null) v:2(int) w:3(int) s:4(string)
      │    └── aggregations
      │         ├── max [type=int]
      │         │    └── variable: kv.v [type=int]
      │         ├── max [type=int]
      │         │    └── variable: kv.k [type=int]
      │         └── min [type=int]
      │              └── variable: kv.v [type=int]
      └── filters [type=bool]
           └── gt [type=bool]
                ├── variable: column5 [type=int]
                └── const: 2 [type=int]

build
SELECT MAX(k), MIN(v) FROM kv HAVING MAX(MIN(v)) > 2
----
error (42803): aggregate function calls cannot be nested

build
SELECT MAX(k), MIN(v) FROM kv HAVING k
----
error (42804): argument of HAVING must be type bool, not type int

# Expressions listed in the HAVING clause must conform to same validation as the SELECT clause (grouped or aggregated).
build
SELECT 3 FROM kv GROUP BY v HAVING k > 5
----
error: column "k" must appear in the GROUP BY clause or be used in an aggregate function

# pg has a special case for grouping on primary key, which would allow this, but we do not.
# See http://www.postgresql.org/docs/current/static/sql-select.html#SQL-GROUPBY
build
SELECT 3 FROM kv GROUP BY k HAVING v > 2
----
error: column "v" must appear in the GROUP BY clause or be used in an aggregate function

build
SELECT k FROM kv HAVING k > 7
----
error: column "k" must appear in the GROUP BY clause or be used in an aggregate function

build
SELECT count(*), k+w FROM kv GROUP BY k+w HAVING (k+w) > 5
----
project
 ├── columns: count:6(int) "k + w":5(int!null)
 └── select
      ├── columns: column5:5(int!null) count:6(int)
      ├── group-by
      │    ├── columns: column5:5(int) count:6(int)
      │    ├── grouping columns: column5:5(int)
      │    ├── project
      │    │    ├── columns: column5:5(int)
      │    │    ├── scan kv
      │    │    │    └── columns: k:1(int!null) v:2(int) w:3(int) s:4(string)
      │    │    └── projections
      │    │         └── plus [type=int]
      │    │              ├── variable: kv.k [type=int]
      │    │              └── variable: kv.w [type=int]
      │    └── aggregations
      │         └── count-rows [type=int]
      └── filters [type=bool]
           └── gt [type=bool]
                ├── variable: column5 [type=int]
                └── const: 5 [type=int]

build
SELECT count(*), k+w FROM kv GROUP BY k+w HAVING (k+v) > 5
----
error: column "k" must appear in the GROUP BY clause or be used in an aggregate function

# Check that everything still works with differently qualified names
build
SELECT MAX(kv.v) FROM kv GROUP BY v HAVING kv.v > 5
----
project
 ├── columns: max:5(int)
 └── select
      ├── columns: v:2(int!null) max:5(int)
      ├── group-by
      │    ├── columns: v:2(int) max:5(int)
      │    ├── grouping columns: v:2(int)
      │    ├── project
      │    │    ├── columns: v:2(int)
      │    │    └── scan kv
      │    │         └── columns: k:1(int!null) v:2(int) w:3(int) s:4(string)
      │    └── aggregations
      │         └── max [type=int]
      │              └── variable: kv.v [type=int]
      └── filters [type=bool]
           └── gt [type=bool]
                ├── variable: kv.v [type=int]
                └── const: 5 [type=int]

build
SELECT SUM(kv.w) FROM kv GROUP BY LOWER(s) HAVING LOWER(kv.s) LIKE 'test%'
----
project
 ├── columns: sum:6(decimal)
 └── select
      ├── columns: column5:5(string) sum:6(decimal)
      ├── group-by
      │    ├── columns: column5:5(string) sum:6(decimal)
      │    ├── grouping columns: column5:5(string)
      │    ├── project
      │    │    ├── columns: column5:5(string) w:3(int)
      │    │    ├── scan kv
      │    │    │    └── columns: k:1(int!null) v:2(int) w:3(int) s:4(string)
      │    │    └── projections
      │    │         └── function: lower [type=string]
      │    │              └── variable: kv.s [type=string]
      │    └── aggregations
      │         └── sum [type=decimal]
      │              └── variable: kv.w [type=int]
      └── filters [type=bool]
           └── like [type=bool]
                ├── variable: column5 [type=string]
                └── const: 'test%' [type=string]

build
SELECT SUM(kv.w) FROM kv GROUP BY LOWER(s) HAVING SUM(w) IN (4, 5, 6)
----
project
 ├── columns: sum:6(decimal!null)
 └── select
      ├── columns: column5:5(string) column6:6(decimal!null)
      ├── group-by
      │    ├── columns: column5:5(string) column6:6(decimal)
      │    ├── grouping columns: column5:5(string)
      │    ├── project
      │    │    ├── columns: column5:5(string) w:3(int)
      │    │    ├── scan kv
      │    │    │    └── columns: k:1(int!null) v:2(int) w:3(int) s:4(string)
      │    │    └── projections
      │    │         └── function: lower [type=string]
      │    │              └── variable: kv.s [type=string]
      │    └── aggregations
      │         └── sum [type=decimal]
      │              └── variable: kv.w [type=int]
      └── filters [type=bool]
           └── in [type=bool]
                ├── variable: column6 [type=decimal]
                └── tuple [type=tuple{decimal, decimal, decimal}]
                     ├── const: 4 [type=decimal]
                     ├── const: 5 [type=decimal]
                     └── const: 6 [type=decimal]

build fully-qualify-names
SELECT t.kv.v FROM t.kv GROUP BY v, kv.k * w HAVING k * kv.w > 5
----
project
 ├── columns: v:2(int)
 └── select
      ├── columns: t.public.kv.v:2(int) column5:5(int!null)
      ├── group-by
      │    ├── columns: t.public.kv.v:2(int) column5:5(int)
      │    ├── grouping columns: t.public.kv.v:2(int) column5:5(int)
      │    └── project
      │         ├── columns: column5:5(int) t.public.kv.v:2(int)
      │         ├── scan kv
      │         │    └── columns: t.public.kv.k:1(int!null) t.public.kv.v:2(int) t.public.kv.w:3(int) t.public.kv.s:4(string)
      │         └── projections
      │              └── mult [type=int]
      │                   ├── variable: t.public.kv.k [type=int]
      │                   └── variable: t.public.kv.w [type=int]
      └── filters [type=bool]
           └── gt [type=bool]
                ├── variable: column5 [type=int]
                └── const: 5 [type=int]

build fully-qualify-names
SELECT t.kv.v FROM t.kv GROUP BY v, kv.k * w HAVING w > 5
----
error: column "w" must appear in the GROUP BY clause or be used in an aggregate function

build fully-qualify-names
SELECT UPPER(s), COUNT(s), COUNT(UPPER(s)) FROM t.kv GROUP BY UPPER(s) HAVING COUNT(s) > 1
----
select
 ├── columns: upper:5(string) count:6(int!null) count:7(int)
 ├── group-by
 │    ├── columns: column5:5(string) column6:6(int) count:7(int)
 │    ├── grouping columns: column5:5(string)
 │    ├── project
 │    │    ├── columns: column5:5(string) t.public.kv.s:4(string)
 │    │    ├── scan kv
 │    │    │    └── columns: t.public.kv.k:1(int!null) t.public.kv.v:2(int) t.public.kv.w:3(int) t.public.kv.s:4(string)
 │    │    └── projections
 │    │         └── function: upper [type=string]
 │    │              └── variable: t.public.kv.s [type=string]
 │    └── aggregations
 │         ├── count [type=int]
 │         │    └── variable: t.public.kv.s [type=string]
 │         └── count [type=int]
 │              └── variable: column5 [type=string]
 └── filters [type=bool]
      └── gt [type=bool]
           ├── variable: column6 [type=int]
           └── const: 1 [type=int]

# Check that ordering by an alias of an aggregate works when HAVING is present.
build
SELECT SUM(k) AS mk FROM kv GROUP BY v HAVING SUM(k)=10 ORDER BY mk
----
sort
 ├── columns: mk:5(decimal!null)
 ├── ordering: +5
 └── project
      ├── columns: column5:5(decimal!null)
      └── select
           ├── columns: v:2(int) column5:5(decimal!null)
           ├── group-by
           │    ├── columns: v:2(int) column5:5(decimal)
           │    ├── grouping columns: v:2(int)
           │    ├── project
           │    │    ├── columns: k:1(int!null) v:2(int)
           │    │    └── scan kv
           │    │         └── columns: k:1(int!null) v:2(int) w:3(int) s:4(string)
           │    └── aggregations
           │         └── sum [type=decimal]
           │              └── variable: kv.k [type=int]
           └── filters [type=bool]
                └── eq [type=bool]
                     ├── variable: column5 [type=decimal]
                     └── const: 10 [type=decimal]

build
SELECT SUM(k) AS mk FROM kv GROUP BY v HAVING MAX(k) > 10 ORDER BY mk
----
sort
 ├── columns: mk:6(decimal)
 ├── ordering: +6
 └── project
      ├── columns: mk:6(decimal)
      └── select
           ├── columns: v:2(int) column5:5(int!null) mk:6(decimal)
           ├── group-by
           │    ├── columns: v:2(int) column5:5(int) mk:6(decimal)
           │    ├── grouping columns: v:2(int)
           │    ├── project
           │    │    ├── columns: k:1(int!null) v:2(int)
           │    │    └── scan kv
           │    │         └── columns: k:1(int!null) v:2(int) w:3(int) s:4(string)
           │    └── aggregations
           │         ├── max [type=int]
           │         │    └── variable: kv.k [type=int]
           │         └── sum [type=decimal]
           │              └── variable: kv.k [type=int]
           └── filters [type=bool]
                └── gt [type=bool]
                     ├── variable: column5 [type=int]
                     └── const: 10 [type=int]

build
SELECT SUM(k) AS mk FROM kv GROUP BY v HAVING v > 10 ORDER BY mk
----
sort
 ├── columns: mk:5(decimal)
 ├── ordering: +5
 └── project
      ├── columns: mk:5(decimal)
      └── select
           ├── columns: v:2(int!null) mk:5(decimal)
           ├── group-by
           │    ├── columns: v:2(int) mk:5(decimal)
           │    ├── grouping columns: v:2(int)
           │    ├── project
           │    │    ├── columns: k:1(int!null) v:2(int)
           │    │    └── scan kv
           │    │         └── columns: k:1(int!null) v:2(int) w:3(int) s:4(string)
           │    └── aggregations
           │         └── sum [type=decimal]
           │              └── variable: kv.k [type=int]
           └── filters [type=bool]
                └── gt [type=bool]
                     ├── variable: kv.v [type=int]
                     └── const: 10 [type=int]

build
SELECT MAX(k) AS mk1, MAX(k) AS mk2 FROM kv GROUP BY v HAVING MAX(k) > 10 ORDER BY mk1
----
sort
 ├── columns: mk1:5(int!null) mk2:5(int!null)
 ├── ordering: +5
 └── project
      ├── columns: column5:5(int!null)
      └── select
           ├── columns: v:2(int) column5:5(int!null)
           ├── group-by
           │    ├── columns: v:2(int) column5:5(int)
           │    ├── grouping columns: v:2(int)
           │    ├── project
           │    │    ├── columns: k:1(int!null) v:2(int)
           │    │    └── scan kv
           │    │         └── columns: k:1(int!null) v:2(int) w:3(int) s:4(string)
           │    └── aggregations
           │         └── max [type=int]
           │              └── variable: kv.k [type=int]
           └── filters [type=bool]
                └── gt [type=bool]
                     ├── variable: column5 [type=int]
                     └── const: 10 [type=int]

build
SELECT MAX(k) AS mk1, MAX(k) AS mk2 FROM kv GROUP BY v HAVING MAX(k) > 10 ORDER BY mk2
----
sort
 ├── columns: mk1:5(int!null) mk2:5(int!null)
 ├── ordering: +5
 └── project
      ├── columns: column5:5(int!null)
      └── select
           ├── columns: v:2(int) column5:5(int!null)
           ├── group-by
           │    ├── columns: v:2(int) column5:5(int)
           │    ├── grouping columns: v:2(int)
           │    ├── project
           │    │    ├── columns: k:1(int!null) v:2(int)
           │    │    └── scan kv
           │    │         └── columns: k:1(int!null) v:2(int) w:3(int) s:4(string)
           │    └── aggregations
           │         └── max [type=int]
           │              └── variable: kv.k [type=int]
           └── filters [type=bool]
                └── gt [type=bool]
                     ├── variable: column5 [type=int]
                     └── const: 10 [type=int]
