exec-ddl
CREATE TABLE parent (p INT PRIMARY KEY)
----

exec-ddl
CREATE TABLE child (c INT PRIMARY KEY, p INT NOT NULL REFERENCES parent(p) ON UPDATE SET NULL)
----

build-cascades
UPDATE parent SET p = p * 10 WHERE p > 1
----
root
 ├── update parent
 │    ├── columns: <none>
 │    ├── fetch columns: p:2
 │    ├── update-mapping:
 │    │    └── p_new:3 => p:1
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk_p_ref_parent
 │    └── project
 │         ├── columns: p_new:3!null p:2!null
 │         ├── select
 │         │    ├── columns: p:2!null
 │         │    ├── scan parent
 │         │    │    └── columns: p:2!null
 │         │    └── filters
 │         │         └── p:2 > 1
 │         └── projections
 │              └── p:2 * 10 [as=p_new:3]
 └── cascade
      └── update child
           ├── columns: <none>
           ├── fetch columns: c:6 child.p:7
           ├── update-mapping:
           │    └── p_new:10 => child.p:5
           └── project
                ├── columns: p_new:10 c:6!null child.p:7!null p:8!null p_new:9!null
                ├── inner-join (hash)
                │    ├── columns: c:6!null child.p:7!null p:8!null p_new:9!null
                │    ├── scan child
                │    │    └── columns: c:6!null child.p:7!null
                │    ├── select
                │    │    ├── columns: p:8!null p_new:9!null
                │    │    ├── with-scan &1
                │    │    │    ├── columns: p:8!null p_new:9!null
                │    │    │    └── mapping:
                │    │    │         ├──  parent.p:2 => p:8
                │    │    │         └──  p_new:3 => p_new:9
                │    │    └── filters
                │    │         └── p:8 IS DISTINCT FROM p_new:9
                │    └── filters
                │         └── child.p:7 = p:8
                └── projections
                     └── NULL::INT8 [as=p_new:10]

exec-ddl
CREATE TABLE parent_multi (
  pk INT PRIMARY KEY,
  p INT, q INT,
  UNIQUE (p, q),
  FAMILY (pk),
  FAMILY (p),
  FAMILY (q)
)
----

exec-ddl
CREATE TABLE child_multi (
  c INT PRIMARY KEY,
  p INT, q INT,
  UNIQUE (c, q),
  CONSTRAINT fk FOREIGN KEY (p, q) REFERENCES parent_multi(p, q) ON UPDATE SET NULL 
)
----

build-cascades
UPDATE parent_multi SET p = p * 10, q = q + 1 WHERE pk > 1
----
root
 ├── update parent_multi
 │    ├── columns: <none>
 │    ├── fetch columns: pk:4 p:5 q:6
 │    ├── update-mapping:
 │    │    ├── p_new:7 => p:2
 │    │    └── q_new:8 => q:3
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: p_new:7 q_new:8 pk:4!null p:5 q:6
 │         ├── select
 │         │    ├── columns: pk:4!null p:5 q:6
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:4!null p:5 q:6
 │         │    └── filters
 │         │         └── pk:4 > 1
 │         └── projections
 │              ├── p:5 * 10 [as=p_new:7]
 │              └── q:6 + 1 [as=q_new:8]
 └── cascade
      └── update child_multi
           ├── columns: <none>
           ├── fetch columns: c:12 child_multi.p:13 child_multi.q:14
           ├── update-mapping:
           │    ├── p_new:19 => child_multi.p:10
           │    └── p_new:19 => child_multi.q:11
           └── project
                ├── columns: p_new:19 c:12!null child_multi.p:13!null child_multi.q:14!null p:15!null q:16!null p_new:17 q_new:18
                ├── inner-join (hash)
                │    ├── columns: c:12!null child_multi.p:13!null child_multi.q:14!null p:15!null q:16!null p_new:17 q_new:18
                │    ├── scan child_multi
                │    │    └── columns: c:12!null child_multi.p:13 child_multi.q:14
                │    ├── select
                │    │    ├── columns: p:15 q:16 p_new:17 q_new:18
                │    │    ├── with-scan &1
                │    │    │    ├── columns: p:15 q:16 p_new:17 q_new:18
                │    │    │    └── mapping:
                │    │    │         ├──  parent_multi.p:5 => p:15
                │    │    │         ├──  parent_multi.q:6 => q:16
                │    │    │         ├──  p_new:7 => p_new:17
                │    │    │         └──  q_new:8 => q_new:18
                │    │    └── filters
                │    │         └── (p:15 IS DISTINCT FROM p_new:17) OR (q:16 IS DISTINCT FROM q_new:18)
                │    └── filters
                │         ├── child_multi.p:13 = p:15
                │         └── child_multi.q:14 = q:16
                └── projections
                     └── NULL::INT8 [as=p_new:19]

# Update only one of the two FK columns.
build-cascades
UPDATE parent_multi SET p = p * 10 WHERE p > 1
----
root
 ├── update parent_multi
 │    ├── columns: <none>
 │    ├── fetch columns: pk:4 p:5 q:6
 │    ├── update-mapping:
 │    │    └── p_new:7 => p:2
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: p_new:7!null pk:4!null p:5!null q:6
 │         ├── select
 │         │    ├── columns: pk:4!null p:5!null q:6
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:4!null p:5 q:6
 │         │    └── filters
 │         │         └── p:5 > 1
 │         └── projections
 │              └── p:5 * 10 [as=p_new:7]
 └── cascade
      └── update child_multi
           ├── columns: <none>
           ├── fetch columns: c:11 child_multi.p:12 child_multi.q:13
           ├── update-mapping:
           │    ├── p_new:18 => child_multi.p:9
           │    └── p_new:18 => child_multi.q:10
           └── project
                ├── columns: p_new:18 c:11!null child_multi.p:12!null child_multi.q:13!null p:14!null q:15!null p_new:16!null q:17
                ├── inner-join (hash)
                │    ├── columns: c:11!null child_multi.p:12!null child_multi.q:13!null p:14!null q:15!null p_new:16!null q:17
                │    ├── scan child_multi
                │    │    └── columns: c:11!null child_multi.p:12 child_multi.q:13
                │    ├── select
                │    │    ├── columns: p:14!null q:15 p_new:16!null q:17
                │    │    ├── with-scan &1
                │    │    │    ├── columns: p:14!null q:15 p_new:16!null q:17
                │    │    │    └── mapping:
                │    │    │         ├──  parent_multi.p:5 => p:14
                │    │    │         ├──  parent_multi.q:6 => q:15
                │    │    │         ├──  p_new:7 => p_new:16
                │    │    │         └──  parent_multi.q:6 => q:17
                │    │    └── filters
                │    │         └── (p:14 IS DISTINCT FROM p_new:16) OR (q:15 IS DISTINCT FROM q:17)
                │    └── filters
                │         ├── child_multi.p:12 = p:14
                │         └── child_multi.q:13 = q:15
                └── projections
                     └── NULL::INT8 [as=p_new:18]

# Test a two-level cascade.
exec-ddl
CREATE TABLE grandchild (
  g INT PRIMARY KEY,
  c INT, q INT,
  CONSTRAINT fk2 FOREIGN KEY (c, q) REFERENCES child_multi(c, q) ON UPDATE SET NULL
)
----

build-cascades
UPDATE parent_multi SET q = q * 10 WHERE p > 1
----
root
 ├── update parent_multi
 │    ├── columns: <none>
 │    ├── fetch columns: pk:4 p:5 q:6
 │    ├── update-mapping:
 │    │    └── q_new:7 => q:3
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: q_new:7 pk:4!null p:5!null q:6
 │         ├── select
 │         │    ├── columns: pk:4!null p:5!null q:6
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:4!null p:5 q:6
 │         │    └── filters
 │         │         └── p:5 > 1
 │         └── projections
 │              └── q:6 * 10 [as=q_new:7]
 └── cascade
      ├── update child_multi
      │    ├── columns: <none>
      │    ├── fetch columns: c:11 child_multi.p:12 child_multi.q:13
      │    ├── update-mapping:
      │    │    ├── p_new:18 => child_multi.p:9
      │    │    └── p_new:18 => child_multi.q:10
      │    ├── input binding: &2
      │    ├── cascades
      │    │    └── fk2
      │    └── project
      │         ├── columns: p_new:18 c:11!null child_multi.p:12!null child_multi.q:13!null p:14!null q:15!null p:16!null q_new:17
      │         ├── inner-join (hash)
      │         │    ├── columns: c:11!null child_multi.p:12!null child_multi.q:13!null p:14!null q:15!null p:16!null q_new:17
      │         │    ├── scan child_multi
      │         │    │    └── columns: c:11!null child_multi.p:12 child_multi.q:13
      │         │    ├── select
      │         │    │    ├── columns: p:14!null q:15 p:16!null q_new:17
      │         │    │    ├── with-scan &1
      │         │    │    │    ├── columns: p:14!null q:15 p:16!null q_new:17
      │         │    │    │    └── mapping:
      │         │    │    │         ├──  parent_multi.p:5 => p:14
      │         │    │    │         ├──  parent_multi.q:6 => q:15
      │         │    │    │         ├──  parent_multi.p:5 => p:16
      │         │    │    │         └──  q_new:7 => q_new:17
      │         │    │    └── filters
      │         │    │         └── (p:14 IS DISTINCT FROM p:16) OR (q:15 IS DISTINCT FROM q_new:17)
      │         │    └── filters
      │         │         ├── child_multi.p:12 = p:14
      │         │         └── child_multi.q:13 = q:15
      │         └── projections
      │              └── NULL::INT8 [as=p_new:18]
      └── cascade
           └── update grandchild
                ├── columns: <none>
                ├── fetch columns: g:22 grandchild.c:23 grandchild.q:24
                ├── update-mapping:
                │    ├── c_new:29 => grandchild.c:20
                │    └── c_new:29 => grandchild.q:21
                └── project
                     ├── columns: c_new:29 g:22!null grandchild.c:23!null grandchild.q:24!null c:25!null q:26!null c:27!null p_new:28
                     ├── inner-join (hash)
                     │    ├── columns: g:22!null grandchild.c:23!null grandchild.q:24!null c:25!null q:26!null c:27!null p_new:28
                     │    ├── scan grandchild
                     │    │    └── columns: g:22!null grandchild.c:23 grandchild.q:24
                     │    ├── select
                     │    │    ├── columns: c:25!null q:26!null c:27!null p_new:28
                     │    │    ├── with-scan &2
                     │    │    │    ├── columns: c:25!null q:26!null c:27!null p_new:28
                     │    │    │    └── mapping:
                     │    │    │         ├──  child_multi.c:11 => c:25
                     │    │    │         ├──  child_multi.q:13 => q:26
                     │    │    │         ├──  child_multi.c:11 => c:27
                     │    │    │         └──  p_new:18 => p_new:28
                     │    │    └── filters
                     │    │         └── (c:25 IS DISTINCT FROM c:27) OR (q:26 IS DISTINCT FROM p_new:28)
                     │    └── filters
                     │         ├── grandchild.c:23 = c:25
                     │         └── grandchild.q:24 = q:26
                     └── projections
                          └── NULL::INT8 [as=c_new:29]
