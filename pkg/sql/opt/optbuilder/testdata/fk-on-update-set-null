exec-ddl
CREATE TABLE parent (p INT PRIMARY KEY)
----

exec-ddl
CREATE TABLE child (c INT PRIMARY KEY, p INT NOT NULL REFERENCES parent(p) ON UPDATE SET NULL)
----

build-cascades
UPDATE parent SET p = p * 10 WHERE p > 1
----
root
 ├── update parent
 │    ├── columns: <none>
 │    ├── fetch columns: p:3
 │    ├── update-mapping:
 │    │    └── p_new:5 => p:1
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk_p_ref_parent
 │    └── project
 │         ├── columns: p_new:5!null p:3!null crdb_internal_mvcc_timestamp:4
 │         ├── select
 │         │    ├── columns: p:3!null crdb_internal_mvcc_timestamp:4
 │         │    ├── scan parent
 │         │    │    └── columns: p:3!null crdb_internal_mvcc_timestamp:4
 │         │    └── filters
 │         │         └── p:3 > 1
 │         └── projections
 │              └── p:3 * 10 [as=p_new:5]
 └── cascade
      └── update child
           ├── columns: <none>
           ├── fetch columns: c:9 child.p:10
           ├── update-mapping:
           │    └── p_new:14 => child.p:7
           └── project
                ├── columns: p_new:14 c:9!null child.p:10!null p:12!null p_new:13!null
                ├── inner-join (hash)
                │    ├── columns: c:9!null child.p:10!null p:12!null p_new:13!null
                │    ├── scan child
                │    │    └── columns: c:9!null child.p:10!null
                │    ├── select
                │    │    ├── columns: p:12!null p_new:13!null
                │    │    ├── with-scan &1
                │    │    │    ├── columns: p:12!null p_new:13!null
                │    │    │    └── mapping:
                │    │    │         ├──  parent.p:3 => p:12
                │    │    │         └──  p_new:5 => p_new:13
                │    │    └── filters
                │    │         └── p:12 IS DISTINCT FROM p_new:13
                │    └── filters
                │         └── child.p:10 = p:12
                └── projections
                     └── NULL::INT8 [as=p_new:14]

exec-ddl
CREATE TABLE parent_multi (
  pk INT PRIMARY KEY,
  p INT, q INT,
  UNIQUE (p, q),
  FAMILY (pk),
  FAMILY (p),
  FAMILY (q)
)
----

exec-ddl
CREATE TABLE child_multi (
  c INT PRIMARY KEY,
  p INT, q INT,
  UNIQUE (c, q),
  CONSTRAINT fk FOREIGN KEY (p, q) REFERENCES parent_multi(p, q) ON UPDATE SET NULL 
)
----

build-cascades
UPDATE parent_multi SET p = p * 10, q = q + 1 WHERE pk > 1
----
root
 ├── update parent_multi
 │    ├── columns: <none>
 │    ├── fetch columns: pk:5 p:6 q:7
 │    ├── update-mapping:
 │    │    ├── p_new:9 => p:2
 │    │    └── q_new:10 => q:3
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: p_new:9 q_new:10 pk:5!null p:6 q:7 crdb_internal_mvcc_timestamp:8
 │         ├── select
 │         │    ├── columns: pk:5!null p:6 q:7 crdb_internal_mvcc_timestamp:8
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:5!null p:6 q:7 crdb_internal_mvcc_timestamp:8
 │         │    └── filters
 │         │         └── pk:5 > 1
 │         └── projections
 │              ├── p:6 * 10 [as=p_new:9]
 │              └── q:7 + 1 [as=q_new:10]
 └── cascade
      └── update child_multi
           ├── columns: <none>
           ├── fetch columns: c:15 child_multi.p:16 child_multi.q:17
           ├── update-mapping:
           │    ├── p_new:23 => child_multi.p:12
           │    └── p_new:23 => child_multi.q:13
           └── project
                ├── columns: p_new:23 c:15!null child_multi.p:16!null child_multi.q:17!null p:19!null q:20!null p_new:21 q_new:22
                ├── inner-join (hash)
                │    ├── columns: c:15!null child_multi.p:16!null child_multi.q:17!null p:19!null q:20!null p_new:21 q_new:22
                │    ├── scan child_multi
                │    │    └── columns: c:15!null child_multi.p:16 child_multi.q:17
                │    ├── select
                │    │    ├── columns: p:19 q:20 p_new:21 q_new:22
                │    │    ├── with-scan &1
                │    │    │    ├── columns: p:19 q:20 p_new:21 q_new:22
                │    │    │    └── mapping:
                │    │    │         ├──  parent_multi.p:6 => p:19
                │    │    │         ├──  parent_multi.q:7 => q:20
                │    │    │         ├──  p_new:9 => p_new:21
                │    │    │         └──  q_new:10 => q_new:22
                │    │    └── filters
                │    │         └── (p:19 IS DISTINCT FROM p_new:21) OR (q:20 IS DISTINCT FROM q_new:22)
                │    └── filters
                │         ├── child_multi.p:16 = p:19
                │         └── child_multi.q:17 = q:20
                └── projections
                     └── NULL::INT8 [as=p_new:23]

# Update only one of the two FK columns.
build-cascades
UPDATE parent_multi SET p = p * 10 WHERE p > 1
----
root
 ├── update parent_multi
 │    ├── columns: <none>
 │    ├── fetch columns: pk:5 p:6 q:7
 │    ├── update-mapping:
 │    │    └── p_new:9 => p:2
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: p_new:9!null pk:5!null p:6!null q:7 crdb_internal_mvcc_timestamp:8
 │         ├── select
 │         │    ├── columns: pk:5!null p:6!null q:7 crdb_internal_mvcc_timestamp:8
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:5!null p:6 q:7 crdb_internal_mvcc_timestamp:8
 │         │    └── filters
 │         │         └── p:6 > 1
 │         └── projections
 │              └── p:6 * 10 [as=p_new:9]
 └── cascade
      └── update child_multi
           ├── columns: <none>
           ├── fetch columns: c:14 child_multi.p:15 child_multi.q:16
           ├── update-mapping:
           │    ├── p_new:22 => child_multi.p:11
           │    └── p_new:22 => child_multi.q:12
           └── project
                ├── columns: p_new:22 c:14!null child_multi.p:15!null child_multi.q:16!null p:18!null q:19!null p_new:20!null q:21
                ├── inner-join (hash)
                │    ├── columns: c:14!null child_multi.p:15!null child_multi.q:16!null p:18!null q:19!null p_new:20!null q:21
                │    ├── scan child_multi
                │    │    └── columns: c:14!null child_multi.p:15 child_multi.q:16
                │    ├── select
                │    │    ├── columns: p:18!null q:19 p_new:20!null q:21
                │    │    ├── with-scan &1
                │    │    │    ├── columns: p:18!null q:19 p_new:20!null q:21
                │    │    │    └── mapping:
                │    │    │         ├──  parent_multi.p:6 => p:18
                │    │    │         ├──  parent_multi.q:7 => q:19
                │    │    │         ├──  p_new:9 => p_new:20
                │    │    │         └──  parent_multi.q:7 => q:21
                │    │    └── filters
                │    │         └── (p:18 IS DISTINCT FROM p_new:20) OR (q:19 IS DISTINCT FROM q:21)
                │    └── filters
                │         ├── child_multi.p:15 = p:18
                │         └── child_multi.q:16 = q:19
                └── projections
                     └── NULL::INT8 [as=p_new:22]

# Test a two-level cascade.
exec-ddl
CREATE TABLE grandchild (
  g INT PRIMARY KEY,
  c INT, q INT,
  CONSTRAINT fk2 FOREIGN KEY (c, q) REFERENCES child_multi(c, q) ON UPDATE SET NULL
)
----

build-cascades
UPDATE parent_multi SET q = q * 10 WHERE p > 1
----
root
 ├── update parent_multi
 │    ├── columns: <none>
 │    ├── fetch columns: pk:5 p:6 q:7
 │    ├── update-mapping:
 │    │    └── q_new:9 => q:3
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: q_new:9 pk:5!null p:6!null q:7 crdb_internal_mvcc_timestamp:8
 │         ├── select
 │         │    ├── columns: pk:5!null p:6!null q:7 crdb_internal_mvcc_timestamp:8
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:5!null p:6 q:7 crdb_internal_mvcc_timestamp:8
 │         │    └── filters
 │         │         └── p:6 > 1
 │         └── projections
 │              └── q:7 * 10 [as=q_new:9]
 └── cascade
      ├── update child_multi
      │    ├── columns: <none>
      │    ├── fetch columns: c:14 child_multi.p:15 child_multi.q:16
      │    ├── update-mapping:
      │    │    ├── p_new:22 => child_multi.p:11
      │    │    └── p_new:22 => child_multi.q:12
      │    ├── input binding: &2
      │    ├── cascades
      │    │    └── fk2
      │    └── project
      │         ├── columns: p_new:22 c:14!null child_multi.p:15!null child_multi.q:16!null p:18!null q:19!null p:20!null q_new:21
      │         ├── inner-join (hash)
      │         │    ├── columns: c:14!null child_multi.p:15!null child_multi.q:16!null p:18!null q:19!null p:20!null q_new:21
      │         │    ├── scan child_multi
      │         │    │    └── columns: c:14!null child_multi.p:15 child_multi.q:16
      │         │    ├── select
      │         │    │    ├── columns: p:18!null q:19 p:20!null q_new:21
      │         │    │    ├── with-scan &1
      │         │    │    │    ├── columns: p:18!null q:19 p:20!null q_new:21
      │         │    │    │    └── mapping:
      │         │    │    │         ├──  parent_multi.p:6 => p:18
      │         │    │    │         ├──  parent_multi.q:7 => q:19
      │         │    │    │         ├──  parent_multi.p:6 => p:20
      │         │    │    │         └──  q_new:9 => q_new:21
      │         │    │    └── filters
      │         │    │         └── (p:18 IS DISTINCT FROM p:20) OR (q:19 IS DISTINCT FROM q_new:21)
      │         │    └── filters
      │         │         ├── child_multi.p:15 = p:18
      │         │         └── child_multi.q:16 = q:19
      │         └── projections
      │              └── NULL::INT8 [as=p_new:22]
      └── cascade
           └── update grandchild
                ├── columns: <none>
                ├── fetch columns: g:27 grandchild.c:28 grandchild.q:29
                ├── update-mapping:
                │    ├── c_new:35 => grandchild.c:24
                │    └── c_new:35 => grandchild.q:25
                └── project
                     ├── columns: c_new:35 g:27!null grandchild.c:28!null grandchild.q:29!null c:31!null q:32!null c:33!null p_new:34
                     ├── inner-join (hash)
                     │    ├── columns: g:27!null grandchild.c:28!null grandchild.q:29!null c:31!null q:32!null c:33!null p_new:34
                     │    ├── scan grandchild
                     │    │    └── columns: g:27!null grandchild.c:28 grandchild.q:29
                     │    ├── select
                     │    │    ├── columns: c:31!null q:32!null c:33!null p_new:34
                     │    │    ├── with-scan &2
                     │    │    │    ├── columns: c:31!null q:32!null c:33!null p_new:34
                     │    │    │    └── mapping:
                     │    │    │         ├──  child_multi.c:14 => c:31
                     │    │    │         ├──  child_multi.q:16 => q:32
                     │    │    │         ├──  child_multi.c:14 => c:33
                     │    │    │         └──  p_new:22 => p_new:34
                     │    │    └── filters
                     │    │         └── (c:31 IS DISTINCT FROM c:33) OR (q:32 IS DISTINCT FROM p_new:34)
                     │    └── filters
                     │         ├── grandchild.c:28 = c:31
                     │         └── grandchild.q:29 = q:32
                     └── projections
                          └── NULL::INT8 [as=c_new:35]

build-cascades
UPSERT INTO parent_multi VALUES (1, 10, 10), (2, 20, 20)
----
root
 ├── upsert parent_multi
 │    ├── columns: <none>
 │    ├── arbiter indexes: primary
 │    ├── canary column: pk:8
 │    ├── fetch columns: pk:8 p:9 q:10
 │    ├── insert-mapping:
 │    │    ├── column1:5 => pk:1
 │    │    ├── column2:6 => p:2
 │    │    └── column3:7 => q:3
 │    ├── update-mapping:
 │    │    ├── column2:6 => p:2
 │    │    └── column3:7 => q:3
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: upsert_pk:12 column1:5!null column2:6!null column3:7!null pk:8 p:9 q:10 crdb_internal_mvcc_timestamp:11
 │         ├── left-join (hash)
 │         │    ├── columns: column1:5!null column2:6!null column3:7!null pk:8 p:9 q:10 crdb_internal_mvcc_timestamp:11
 │         │    ├── ensure-upsert-distinct-on
 │         │    │    ├── columns: column1:5!null column2:6!null column3:7!null
 │         │    │    ├── grouping columns: column1:5!null
 │         │    │    ├── values
 │         │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null
 │         │    │    │    ├── (1, 10, 10)
 │         │    │    │    └── (2, 20, 20)
 │         │    │    └── aggregations
 │         │    │         ├── first-agg [as=column2:6]
 │         │    │         │    └── column2:6
 │         │    │         └── first-agg [as=column3:7]
 │         │    │              └── column3:7
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:8!null p:9 q:10 crdb_internal_mvcc_timestamp:11
 │         │    └── filters
 │         │         └── column1:5 = pk:8
 │         └── projections
 │              └── CASE WHEN pk:8 IS NULL THEN column1:5 ELSE pk:8 END [as=upsert_pk:12]
 └── cascade
      ├── update child_multi
      │    ├── columns: <none>
      │    ├── fetch columns: c:17 child_multi.p:18 child_multi.q:19
      │    ├── update-mapping:
      │    │    ├── p_new:25 => child_multi.p:14
      │    │    └── p_new:25 => child_multi.q:15
      │    ├── input binding: &2
      │    ├── cascades
      │    │    └── fk2
      │    └── project
      │         ├── columns: p_new:25 c:17!null child_multi.p:18!null child_multi.q:19!null p:21!null q:22!null column2:23!null column3:24!null
      │         ├── inner-join (hash)
      │         │    ├── columns: c:17!null child_multi.p:18!null child_multi.q:19!null p:21!null q:22!null column2:23!null column3:24!null
      │         │    ├── scan child_multi
      │         │    │    └── columns: c:17!null child_multi.p:18 child_multi.q:19
      │         │    ├── select
      │         │    │    ├── columns: p:21 q:22 column2:23!null column3:24!null
      │         │    │    ├── with-scan &1
      │         │    │    │    ├── columns: p:21 q:22 column2:23!null column3:24!null
      │         │    │    │    └── mapping:
      │         │    │    │         ├──  parent_multi.p:9 => p:21
      │         │    │    │         ├──  parent_multi.q:10 => q:22
      │         │    │    │         ├──  column2:6 => column2:23
      │         │    │    │         └──  column3:7 => column3:24
      │         │    │    └── filters
      │         │    │         └── (p:21 IS DISTINCT FROM column2:23) OR (q:22 IS DISTINCT FROM column3:24)
      │         │    └── filters
      │         │         ├── child_multi.p:18 = p:21
      │         │         └── child_multi.q:19 = q:22
      │         └── projections
      │              └── NULL::INT8 [as=p_new:25]
      └── cascade
           └── update grandchild
                ├── columns: <none>
                ├── fetch columns: g:30 grandchild.c:31 grandchild.q:32
                ├── update-mapping:
                │    ├── c_new:38 => grandchild.c:27
                │    └── c_new:38 => grandchild.q:28
                └── project
                     ├── columns: c_new:38 g:30!null grandchild.c:31!null grandchild.q:32!null c:34!null q:35!null c:36!null p_new:37
                     ├── inner-join (hash)
                     │    ├── columns: g:30!null grandchild.c:31!null grandchild.q:32!null c:34!null q:35!null c:36!null p_new:37
                     │    ├── scan grandchild
                     │    │    └── columns: g:30!null grandchild.c:31 grandchild.q:32
                     │    ├── select
                     │    │    ├── columns: c:34!null q:35!null c:36!null p_new:37
                     │    │    ├── with-scan &2
                     │    │    │    ├── columns: c:34!null q:35!null c:36!null p_new:37
                     │    │    │    └── mapping:
                     │    │    │         ├──  child_multi.c:17 => c:34
                     │    │    │         ├──  child_multi.q:19 => q:35
                     │    │    │         ├──  child_multi.c:17 => c:36
                     │    │    │         └──  p_new:25 => p_new:37
                     │    │    └── filters
                     │    │         └── (c:34 IS DISTINCT FROM c:36) OR (q:35 IS DISTINCT FROM p_new:37)
                     │    └── filters
                     │         ├── grandchild.c:31 = c:34
                     │         └── grandchild.q:32 = q:35
                     └── projections
                          └── NULL::INT8 [as=c_new:38]

# Upsert that only touches one of the FK columns.
build-cascades
UPSERT INTO parent_multi(pk, p) VALUES (1, 10), (2, 20)
----
root
 ├── upsert parent_multi
 │    ├── columns: <none>
 │    ├── arbiter indexes: primary
 │    ├── canary column: pk:8
 │    ├── fetch columns: pk:8 p:9 q:10
 │    ├── insert-mapping:
 │    │    ├── column1:5 => pk:1
 │    │    ├── column2:6 => p:2
 │    │    └── column7:7 => q:3
 │    ├── update-mapping:
 │    │    └── column2:6 => p:2
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: upsert_pk:12 upsert_q:13 column1:5!null column2:6!null column7:7 pk:8 p:9 q:10 crdb_internal_mvcc_timestamp:11
 │         ├── left-join (hash)
 │         │    ├── columns: column1:5!null column2:6!null column7:7 pk:8 p:9 q:10 crdb_internal_mvcc_timestamp:11
 │         │    ├── ensure-upsert-distinct-on
 │         │    │    ├── columns: column1:5!null column2:6!null column7:7
 │         │    │    ├── grouping columns: column1:5!null
 │         │    │    ├── project
 │         │    │    │    ├── columns: column7:7 column1:5!null column2:6!null
 │         │    │    │    ├── values
 │         │    │    │    │    ├── columns: column1:5!null column2:6!null
 │         │    │    │    │    ├── (1, 10)
 │         │    │    │    │    └── (2, 20)
 │         │    │    │    └── projections
 │         │    │    │         └── NULL::INT8 [as=column7:7]
 │         │    │    └── aggregations
 │         │    │         ├── first-agg [as=column2:6]
 │         │    │         │    └── column2:6
 │         │    │         └── first-agg [as=column7:7]
 │         │    │              └── column7:7
 │         │    ├── scan parent_multi
 │         │    │    └── columns: pk:8!null p:9 q:10 crdb_internal_mvcc_timestamp:11
 │         │    └── filters
 │         │         └── column1:5 = pk:8
 │         └── projections
 │              ├── CASE WHEN pk:8 IS NULL THEN column1:5 ELSE pk:8 END [as=upsert_pk:12]
 │              └── CASE WHEN pk:8 IS NULL THEN column7:7 ELSE q:10 END [as=upsert_q:13]
 └── cascade
      ├── update child_multi
      │    ├── columns: <none>
      │    ├── fetch columns: c:18 child_multi.p:19 child_multi.q:20
      │    ├── update-mapping:
      │    │    ├── p_new:26 => child_multi.p:15
      │    │    └── p_new:26 => child_multi.q:16
      │    ├── input binding: &2
      │    ├── cascades
      │    │    └── fk2
      │    └── project
      │         ├── columns: p_new:26 c:18!null child_multi.p:19!null child_multi.q:20!null p:22!null q:23!null column2:24!null q:25
      │         ├── inner-join (hash)
      │         │    ├── columns: c:18!null child_multi.p:19!null child_multi.q:20!null p:22!null q:23!null column2:24!null q:25
      │         │    ├── scan child_multi
      │         │    │    └── columns: c:18!null child_multi.p:19 child_multi.q:20
      │         │    ├── select
      │         │    │    ├── columns: p:22 q:23 column2:24!null q:25
      │         │    │    ├── with-scan &1
      │         │    │    │    ├── columns: p:22 q:23 column2:24!null q:25
      │         │    │    │    └── mapping:
      │         │    │    │         ├──  parent_multi.p:9 => p:22
      │         │    │    │         ├──  parent_multi.q:10 => q:23
      │         │    │    │         ├──  column2:6 => column2:24
      │         │    │    │         └──  parent_multi.q:10 => q:25
      │         │    │    └── filters
      │         │    │         └── (p:22 IS DISTINCT FROM column2:24) OR (q:23 IS DISTINCT FROM q:25)
      │         │    └── filters
      │         │         ├── child_multi.p:19 = p:22
      │         │         └── child_multi.q:20 = q:23
      │         └── projections
      │              └── NULL::INT8 [as=p_new:26]
      └── cascade
           └── update grandchild
                ├── columns: <none>
                ├── fetch columns: g:31 grandchild.c:32 grandchild.q:33
                ├── update-mapping:
                │    ├── c_new:39 => grandchild.c:28
                │    └── c_new:39 => grandchild.q:29
                └── project
                     ├── columns: c_new:39 g:31!null grandchild.c:32!null grandchild.q:33!null c:35!null q:36!null c:37!null p_new:38
                     ├── inner-join (hash)
                     │    ├── columns: g:31!null grandchild.c:32!null grandchild.q:33!null c:35!null q:36!null c:37!null p_new:38
                     │    ├── scan grandchild
                     │    │    └── columns: g:31!null grandchild.c:32 grandchild.q:33
                     │    ├── select
                     │    │    ├── columns: c:35!null q:36!null c:37!null p_new:38
                     │    │    ├── with-scan &2
                     │    │    │    ├── columns: c:35!null q:36!null c:37!null p_new:38
                     │    │    │    └── mapping:
                     │    │    │         ├──  child_multi.c:18 => c:35
                     │    │    │         ├──  child_multi.q:20 => q:36
                     │    │    │         ├──  child_multi.c:18 => c:37
                     │    │    │         └──  p_new:26 => p_new:38
                     │    │    └── filters
                     │    │         └── (c:35 IS DISTINCT FROM c:37) OR (q:36 IS DISTINCT FROM p_new:38)
                     │    └── filters
                     │         ├── grandchild.c:32 = c:35
                     │         └── grandchild.q:33 = q:36
                     └── projections
                          └── NULL::INT8 [as=c_new:39]

build-cascades
INSERT INTO parent_multi VALUES (1, 10, 10), (2, 20, 20) ON CONFLICT (p,q) DO UPDATE SET p = 100
----
root
 ├── upsert parent_multi
 │    ├── columns: <none>
 │    ├── arbiter indexes: secondary
 │    ├── canary column: pk:8
 │    ├── fetch columns: pk:8 p:9 q:10
 │    ├── insert-mapping:
 │    │    ├── column1:5 => pk:1
 │    │    ├── column2:6 => p:2
 │    │    └── column3:7 => q:3
 │    ├── update-mapping:
 │    │    └── upsert_p:14 => p:2
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk
 │    └── project
 │         ├── columns: upsert_pk:13 upsert_p:14!null upsert_q:15 column1:5!null column2:6!null column3:7!null pk:8 p:9 q:10 crdb_internal_mvcc_timestamp:11 p_new:12!null
 │         ├── project
 │         │    ├── columns: p_new:12!null column1:5!null column2:6!null column3:7!null pk:8 p:9 q:10 crdb_internal_mvcc_timestamp:11
 │         │    ├── left-join (hash)
 │         │    │    ├── columns: column1:5!null column2:6!null column3:7!null pk:8 p:9 q:10 crdb_internal_mvcc_timestamp:11
 │         │    │    ├── ensure-upsert-distinct-on
 │         │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null
 │         │    │    │    ├── grouping columns: column2:6!null column3:7!null
 │         │    │    │    ├── values
 │         │    │    │    │    ├── columns: column1:5!null column2:6!null column3:7!null
 │         │    │    │    │    ├── (1, 10, 10)
 │         │    │    │    │    └── (2, 20, 20)
 │         │    │    │    └── aggregations
 │         │    │    │         └── first-agg [as=column1:5]
 │         │    │    │              └── column1:5
 │         │    │    ├── scan parent_multi
 │         │    │    │    └── columns: pk:8!null p:9 q:10 crdb_internal_mvcc_timestamp:11
 │         │    │    └── filters
 │         │    │         ├── column2:6 = p:9
 │         │    │         └── column3:7 = q:10
 │         │    └── projections
 │         │         └── 100 [as=p_new:12]
 │         └── projections
 │              ├── CASE WHEN pk:8 IS NULL THEN column1:5 ELSE pk:8 END [as=upsert_pk:13]
 │              ├── CASE WHEN pk:8 IS NULL THEN column2:6 ELSE p_new:12 END [as=upsert_p:14]
 │              └── CASE WHEN pk:8 IS NULL THEN column3:7 ELSE q:10 END [as=upsert_q:15]
 └── cascade
      ├── update child_multi
      │    ├── columns: <none>
      │    ├── fetch columns: c:20 child_multi.p:21 child_multi.q:22
      │    ├── update-mapping:
      │    │    ├── p_new:28 => child_multi.p:17
      │    │    └── p_new:28 => child_multi.q:18
      │    ├── input binding: &2
      │    ├── cascades
      │    │    └── fk2
      │    └── project
      │         ├── columns: p_new:28 c:20!null child_multi.p:21!null child_multi.q:22!null p:24!null q:25!null upsert_p:26!null q:27
      │         ├── inner-join (hash)
      │         │    ├── columns: c:20!null child_multi.p:21!null child_multi.q:22!null p:24!null q:25!null upsert_p:26!null q:27
      │         │    ├── scan child_multi
      │         │    │    └── columns: c:20!null child_multi.p:21 child_multi.q:22
      │         │    ├── select
      │         │    │    ├── columns: p:24 q:25 upsert_p:26!null q:27
      │         │    │    ├── with-scan &1
      │         │    │    │    ├── columns: p:24 q:25 upsert_p:26!null q:27
      │         │    │    │    └── mapping:
      │         │    │    │         ├──  parent_multi.p:9 => p:24
      │         │    │    │         ├──  parent_multi.q:10 => q:25
      │         │    │    │         ├──  upsert_p:14 => upsert_p:26
      │         │    │    │         └──  parent_multi.q:10 => q:27
      │         │    │    └── filters
      │         │    │         └── (p:24 IS DISTINCT FROM upsert_p:26) OR (q:25 IS DISTINCT FROM q:27)
      │         │    └── filters
      │         │         ├── child_multi.p:21 = p:24
      │         │         └── child_multi.q:22 = q:25
      │         └── projections
      │              └── NULL::INT8 [as=p_new:28]
      └── cascade
           └── update grandchild
                ├── columns: <none>
                ├── fetch columns: g:33 grandchild.c:34 grandchild.q:35
                ├── update-mapping:
                │    ├── c_new:41 => grandchild.c:30
                │    └── c_new:41 => grandchild.q:31
                └── project
                     ├── columns: c_new:41 g:33!null grandchild.c:34!null grandchild.q:35!null c:37!null q:38!null c:39!null p_new:40
                     ├── inner-join (hash)
                     │    ├── columns: g:33!null grandchild.c:34!null grandchild.q:35!null c:37!null q:38!null c:39!null p_new:40
                     │    ├── scan grandchild
                     │    │    └── columns: g:33!null grandchild.c:34 grandchild.q:35
                     │    ├── select
                     │    │    ├── columns: c:37!null q:38!null c:39!null p_new:40
                     │    │    ├── with-scan &2
                     │    │    │    ├── columns: c:37!null q:38!null c:39!null p_new:40
                     │    │    │    └── mapping:
                     │    │    │         ├──  child_multi.c:20 => c:37
                     │    │    │         ├──  child_multi.q:22 => q:38
                     │    │    │         ├──  child_multi.c:20 => c:39
                     │    │    │         └──  p_new:28 => p_new:40
                     │    │    └── filters
                     │    │         └── (c:37 IS DISTINCT FROM c:39) OR (q:38 IS DISTINCT FROM p_new:40)
                     │    └── filters
                     │         ├── grandchild.c:34 = c:37
                     │         └── grandchild.q:35 = q:38
                     └── projections
                          └── NULL::INT8 [as=c_new:41]

# Test a cascade to a child with a partial index.
exec-ddl
CREATE TABLE parent_partial (p INT PRIMARY KEY)
----

exec-ddl
CREATE TABLE child_partial (
  c INT PRIMARY KEY,
  p INT DEFAULT 0 NOT NULL REFERENCES parent_partial(p) ON UPDATE SET NULL,
  i INT,
  INDEX (p) WHERE i > 0,
  INDEX (i) WHERE p > 0
)
----

build-cascades
UPDATE parent_partial SET p = p * 10 WHERE p > 1
----
root
 ├── update parent_partial
 │    ├── columns: <none>
 │    ├── fetch columns: p:3
 │    ├── update-mapping:
 │    │    └── p_new:5 => p:1
 │    ├── input binding: &1
 │    ├── cascades
 │    │    └── fk_p_ref_parent_partial
 │    └── project
 │         ├── columns: p_new:5!null p:3!null crdb_internal_mvcc_timestamp:4
 │         ├── select
 │         │    ├── columns: p:3!null crdb_internal_mvcc_timestamp:4
 │         │    ├── scan parent_partial
 │         │    │    └── columns: p:3!null crdb_internal_mvcc_timestamp:4
 │         │    └── filters
 │         │         └── p:3 > 1
 │         └── projections
 │              └── p:3 * 10 [as=p_new:5]
 └── cascade
      └── update child_partial
           ├── columns: <none>
           ├── fetch columns: c:10 child_partial.p:11 i:12
           ├── update-mapping:
           │    └── p_new:16 => child_partial.p:7
           ├── partial index put columns: partial_index_put1:17 partial_index_put2:18
           ├── partial index del columns: partial_index_put1:17 partial_index_del2:19
           └── project
                ├── columns: partial_index_put1:17 partial_index_put2:18 partial_index_del2:19!null c:10!null child_partial.p:11!null i:12 p:14!null p_new:15!null p_new:16
                ├── project
                │    ├── columns: p_new:16 c:10!null child_partial.p:11!null i:12 p:14!null p_new:15!null
                │    ├── inner-join (hash)
                │    │    ├── columns: c:10!null child_partial.p:11!null i:12 p:14!null p_new:15!null
                │    │    ├── scan child_partial
                │    │    │    ├── columns: c:10!null child_partial.p:11!null i:12
                │    │    │    └── partial index predicates
                │    │    │         ├── secondary: filters
                │    │    │         │    └── i:12 > 0
                │    │    │         └── secondary: filters
                │    │    │              └── child_partial.p:11 > 0
                │    │    ├── select
                │    │    │    ├── columns: p:14!null p_new:15!null
                │    │    │    ├── with-scan &1
                │    │    │    │    ├── columns: p:14!null p_new:15!null
                │    │    │    │    └── mapping:
                │    │    │    │         ├──  parent_partial.p:3 => p:14
                │    │    │    │         └──  p_new:5 => p_new:15
                │    │    │    └── filters
                │    │    │         └── p:14 IS DISTINCT FROM p_new:15
                │    │    └── filters
                │    │         └── child_partial.p:11 = p:14
                │    └── projections
                │         └── NULL::INT8 [as=p_new:16]
                └── projections
                     ├── i:12 > 0 [as=partial_index_put1:17]
                     ├── p_new:16 > 0 [as=partial_index_put2:18]
                     └── child_partial.p:11 > 0 [as=partial_index_del2:19]
