exec-ddl
CREATE TABLE parent (p INT PRIMARY KEY, other INT)
----

exec-ddl
CREATE TABLE child (c INT PRIMARY KEY, p INT NOT NULL REFERENCES parent(p), i INT)
----

build
UPSERT INTO child VALUES (100, 1), (200, 1)
----
upsert child
 ├── columns: <none>
 ├── canary column: 7
 ├── fetch columns: child.c:7(int) child.p:8(int) i:9(int)
 ├── insert-mapping:
 │    ├──  column1:4 => child.c:1
 │    ├──  column2:5 => child.p:2
 │    └──  column6:6 => i:3
 ├── update-mapping:
 │    ├──  column2:5 => child.p:2
 │    └──  column6:6 => i:3
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_c:10(int) column1:4(int!null) column2:5(int!null) column6:6(int) child.c:7(int) child.p:8(int) i:9(int)
 │    ├── left-join (hash)
 │    │    ├── columns: column1:4(int!null) column2:5(int!null) column6:6(int) child.c:7(int) child.p:8(int) i:9(int)
 │    │    ├── project
 │    │    │    ├── columns: column6:6(int) column1:4(int!null) column2:5(int!null)
 │    │    │    ├── values
 │    │    │    │    ├── columns: column1:4(int!null) column2:5(int!null)
 │    │    │    │    ├── tuple [type=tuple{int, int}]
 │    │    │    │    │    ├── const: 100 [type=int]
 │    │    │    │    │    └── const: 1 [type=int]
 │    │    │    │    └── tuple [type=tuple{int, int}]
 │    │    │    │         ├── const: 200 [type=int]
 │    │    │    │         └── const: 1 [type=int]
 │    │    │    └── projections
 │    │    │         └── cast: INT8 [type=int]
 │    │    │              └── null [type=unknown]
 │    │    ├── scan child
 │    │    │    └── columns: child.c:7(int!null) child.p:8(int!null) i:9(int)
 │    │    └── filters
 │    │         └── eq [type=bool]
 │    │              ├── variable: column1 [type=int]
 │    │              └── variable: child.c [type=int]
 │    └── projections
 │         └── case [type=int]
 │              ├── true [type=bool]
 │              ├── when [type=int]
 │              │    ├── is [type=bool]
 │              │    │    ├── variable: child.c [type=int]
 │              │    │    └── null [type=unknown]
 │              │    └── variable: column1 [type=int]
 │              └── variable: child.c [type=int]
 └── f-k-checks
      ├── f-k-checks-item: child(p) -> parent(p)
      │    └── anti-join (hash)
      │         ├── columns: column2:11(int!null)
      │         ├── project
      │         │    ├── columns: column2:11(int!null)
      │         │    └── project
      │         │         ├── columns: column2:11(int!null)
      │         │         └── select
      │         │              ├── columns: column2:11(int!null) c:12(int)
      │         │              ├── with-scan &1
      │         │              │    ├── columns: column2:11(int!null) c:12(int)
      │         │              │    └── mapping:
      │         │              │         ├──  column2:5(int) => column2:11(int)
      │         │              │         └──  child.c:7(int) => c:12(int)
      │         │              └── filters
      │         │                   └── is [type=bool]
      │         │                        ├── variable: c [type=int]
      │         │                        └── null [type=unknown]
      │         ├── scan parent
      │         │    └── columns: parent.p:13(int!null)
      │         └── filters
      │              └── eq [type=bool]
      │                   ├── variable: column2 [type=int]
      │                   └── variable: parent.p [type=int]
      └── f-k-checks-item: child(p) -> parent(p)
           └── anti-join (hash)
                ├── columns: column2:15(int!null)
                ├── project
                │    ├── columns: column2:15(int!null)
                │    └── project
                │         ├── columns: column2:15(int!null)
                │         └── select
                │              ├── columns: column2:15(int!null) c:16(int!null)
                │              ├── with-scan &1
                │              │    ├── columns: column2:15(int!null) c:16(int)
                │              │    └── mapping:
                │              │         ├──  column2:5(int) => column2:15(int)
                │              │         └──  child.c:7(int) => c:16(int)
                │              └── filters
                │                   └── is-not [type=bool]
                │                        ├── variable: c [type=int]
                │                        └── null [type=unknown]
                ├── scan parent
                │    └── columns: parent.p:17(int!null)
                └── filters
                     └── eq [type=bool]
                          ├── variable: column2 [type=int]
                          └── variable: parent.p [type=int]

# Use a non-constant input.
exec-ddl
CREATE TABLE xy (x INT, y INT)
----

build
UPSERT INTO child SELECT x, y FROM xy
----
upsert child
 ├── columns: <none>
 ├── canary column: 8
 ├── fetch columns: child.c:8(int) child.p:9(int) i:10(int)
 ├── insert-mapping:
 │    ├──  x:4 => child.c:1
 │    ├──  xy.y:5 => child.p:2
 │    └──  column7:7 => i:3
 ├── update-mapping:
 │    ├──  xy.y:5 => child.p:2
 │    └──  column7:7 => i:3
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_c:11(int) x:4(int) xy.y:5(int) column7:7(int) child.c:8(int) child.p:9(int) i:10(int)
 │    ├── left-join (hash)
 │    │    ├── columns: x:4(int) xy.y:5(int) column7:7(int) child.c:8(int) child.p:9(int) i:10(int)
 │    │    ├── project
 │    │    │    ├── columns: column7:7(int) x:4(int) xy.y:5(int)
 │    │    │    ├── project
 │    │    │    │    ├── columns: x:4(int) xy.y:5(int)
 │    │    │    │    └── scan xy
 │    │    │    │         └── columns: x:4(int) xy.y:5(int) rowid:6(int!null)
 │    │    │    └── projections
 │    │    │         └── cast: INT8 [type=int]
 │    │    │              └── null [type=unknown]
 │    │    ├── scan child
 │    │    │    └── columns: child.c:8(int!null) child.p:9(int!null) i:10(int)
 │    │    └── filters
 │    │         └── eq [type=bool]
 │    │              ├── variable: x [type=int]
 │    │              └── variable: child.c [type=int]
 │    └── projections
 │         └── case [type=int]
 │              ├── true [type=bool]
 │              ├── when [type=int]
 │              │    ├── is [type=bool]
 │              │    │    ├── variable: child.c [type=int]
 │              │    │    └── null [type=unknown]
 │              │    └── variable: x [type=int]
 │              └── variable: child.c [type=int]
 └── f-k-checks
      ├── f-k-checks-item: child(p) -> parent(p)
      │    └── anti-join (hash)
      │         ├── columns: y:12(int)
      │         ├── project
      │         │    ├── columns: y:12(int)
      │         │    └── project
      │         │         ├── columns: y:12(int)
      │         │         └── select
      │         │              ├── columns: y:12(int) c:13(int)
      │         │              ├── with-scan &1
      │         │              │    ├── columns: y:12(int) c:13(int)
      │         │              │    └── mapping:
      │         │              │         ├──  xy.y:5(int) => y:12(int)
      │         │              │         └──  child.c:8(int) => c:13(int)
      │         │              └── filters
      │         │                   └── is [type=bool]
      │         │                        ├── variable: c [type=int]
      │         │                        └── null [type=unknown]
      │         ├── scan parent
      │         │    └── columns: parent.p:14(int!null)
      │         └── filters
      │              └── eq [type=bool]
      │                   ├── variable: y [type=int]
      │                   └── variable: parent.p [type=int]
      └── f-k-checks-item: child(p) -> parent(p)
           └── anti-join (hash)
                ├── columns: y:16(int)
                ├── project
                │    ├── columns: y:16(int)
                │    └── project
                │         ├── columns: y:16(int)
                │         └── select
                │              ├── columns: y:16(int) c:17(int!null)
                │              ├── with-scan &1
                │              │    ├── columns: y:16(int) c:17(int)
                │              │    └── mapping:
                │              │         ├──  xy.y:5(int) => y:16(int)
                │              │         └──  child.c:8(int) => c:17(int)
                │              └── filters
                │                   └── is-not [type=bool]
                │                        ├── variable: c [type=int]
                │                        └── null [type=unknown]
                ├── scan parent
                │    └── columns: parent.p:18(int!null)
                └── filters
                     └── eq [type=bool]
                          ├── variable: y [type=int]
                          └── variable: parent.p [type=int]

# Use a non-constant input.
exec-ddl
CREATE TABLE uv (u INT NOT NULL, v INT NOT NULL)
----

build
INSERT INTO child SELECT u, v FROM uv ON CONFLICT (c) DO UPDATE SET i = child.c + 1
----
upsert child
 ├── columns: <none>
 ├── canary column: 8
 ├── fetch columns: child.c:8(int) child.p:9(int) i:10(int)
 ├── insert-mapping:
 │    ├──  u:4 => child.c:1
 │    ├──  uv.v:5 => child.p:2
 │    └──  column7:7 => i:3
 ├── update-mapping:
 │    └──  upsert_i:14 => i:3
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_c:12(int) upsert_p:13(int) upsert_i:14(int) u:4(int!null) uv.v:5(int!null) column7:7(int) child.c:8(int) child.p:9(int) i:10(int) column11:11(int)
 │    ├── project
 │    │    ├── columns: column11:11(int) u:4(int!null) uv.v:5(int!null) column7:7(int) child.c:8(int) child.p:9(int) i:10(int)
 │    │    ├── left-join (hash)
 │    │    │    ├── columns: u:4(int!null) uv.v:5(int!null) column7:7(int) child.c:8(int) child.p:9(int) i:10(int)
 │    │    │    ├── project
 │    │    │    │    ├── columns: column7:7(int) u:4(int!null) uv.v:5(int!null)
 │    │    │    │    ├── project
 │    │    │    │    │    ├── columns: u:4(int!null) uv.v:5(int!null)
 │    │    │    │    │    └── scan uv
 │    │    │    │    │         └── columns: u:4(int!null) uv.v:5(int!null) rowid:6(int!null)
 │    │    │    │    └── projections
 │    │    │    │         └── cast: INT8 [type=int]
 │    │    │    │              └── null [type=unknown]
 │    │    │    ├── scan child
 │    │    │    │    └── columns: child.c:8(int!null) child.p:9(int!null) i:10(int)
 │    │    │    └── filters
 │    │    │         └── eq [type=bool]
 │    │    │              ├── variable: u [type=int]
 │    │    │              └── variable: child.c [type=int]
 │    │    └── projections
 │    │         └── plus [type=int]
 │    │              ├── variable: child.c [type=int]
 │    │              └── const: 1 [type=int]
 │    └── projections
 │         ├── case [type=int]
 │         │    ├── true [type=bool]
 │         │    ├── when [type=int]
 │         │    │    ├── is [type=bool]
 │         │    │    │    ├── variable: child.c [type=int]
 │         │    │    │    └── null [type=unknown]
 │         │    │    └── variable: u [type=int]
 │         │    └── variable: child.c [type=int]
 │         ├── case [type=int]
 │         │    ├── true [type=bool]
 │         │    ├── when [type=int]
 │         │    │    ├── is [type=bool]
 │         │    │    │    ├── variable: child.c [type=int]
 │         │    │    │    └── null [type=unknown]
 │         │    │    └── variable: uv.v [type=int]
 │         │    └── variable: child.p [type=int]
 │         └── case [type=int]
 │              ├── true [type=bool]
 │              ├── when [type=int]
 │              │    ├── is [type=bool]
 │              │    │    ├── variable: child.c [type=int]
 │              │    │    └── null [type=unknown]
 │              │    └── variable: column7 [type=int]
 │              └── variable: column11 [type=int]
 └── f-k-checks
      ├── f-k-checks-item: child(p) -> parent(p)
      │    └── anti-join (hash)
      │         ├── columns: v:15(int!null)
      │         ├── project
      │         │    ├── columns: v:15(int!null)
      │         │    └── project
      │         │         ├── columns: v:15(int!null)
      │         │         └── select
      │         │              ├── columns: v:15(int!null) c:16(int)
      │         │              ├── with-scan &1
      │         │              │    ├── columns: v:15(int!null) c:16(int)
      │         │              │    └── mapping:
      │         │              │         ├──  uv.v:5(int) => v:15(int)
      │         │              │         └──  child.c:8(int) => c:16(int)
      │         │              └── filters
      │         │                   └── is [type=bool]
      │         │                        ├── variable: c [type=int]
      │         │                        └── null [type=unknown]
      │         ├── scan parent
      │         │    └── columns: parent.p:17(int!null)
      │         └── filters
      │              └── eq [type=bool]
      │                   ├── variable: v [type=int]
      │                   └── variable: parent.p [type=int]
      └── f-k-checks-item: child(p) -> parent(p)
           └── anti-join (hash)
                ├── columns: p:19(int)
                ├── project
                │    ├── columns: p:19(int)
                │    └── project
                │         ├── columns: p:19(int)
                │         └── select
                │              ├── columns: p:19(int) c:20(int!null)
                │              ├── with-scan &1
                │              │    ├── columns: p:19(int) c:20(int)
                │              │    └── mapping:
                │              │         ├──  child.p:9(int) => p:19(int)
                │              │         └──  child.c:8(int) => c:20(int)
                │              └── filters
                │                   └── is-not [type=bool]
                │                        ├── variable: c [type=int]
                │                        └── null [type=unknown]
                ├── scan parent
                │    └── columns: parent.p:21(int!null)
                └── filters
                     └── eq [type=bool]
                          ├── variable: p [type=int]
                          └── variable: parent.p [type=int]

exec-ddl
CREATE TABLE parent2 (p INT PRIMARY KEY)
----

exec-ddl
CREATE TABLE child2 (c INT PRIMARY KEY, FOREIGN KEY (c) REFERENCES PARENT(p))
----

build
INSERT INTO child2 VALUES (1), (2) ON CONFLICT (c) DO UPDATE SET c = 1
----
upsert child2
 ├── columns: <none>
 ├── canary column: 3
 ├── fetch columns: child2.c:3(int)
 ├── insert-mapping:
 │    └──  column1:2 => child2.c:1
 ├── update-mapping:
 │    └──  upsert_c:5 => child2.c:1
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_c:5(int!null) column1:2(int!null) child2.c:3(int) column4:4(int!null)
 │    ├── project
 │    │    ├── columns: column4:4(int!null) column1:2(int!null) child2.c:3(int)
 │    │    ├── left-join (hash)
 │    │    │    ├── columns: column1:2(int!null) child2.c:3(int)
 │    │    │    ├── values
 │    │    │    │    ├── columns: column1:2(int!null)
 │    │    │    │    ├── tuple [type=tuple{int}]
 │    │    │    │    │    └── const: 1 [type=int]
 │    │    │    │    └── tuple [type=tuple{int}]
 │    │    │    │         └── const: 2 [type=int]
 │    │    │    ├── scan child2
 │    │    │    │    └── columns: child2.c:3(int!null)
 │    │    │    └── filters
 │    │    │         └── eq [type=bool]
 │    │    │              ├── variable: column1 [type=int]
 │    │    │              └── variable: child2.c [type=int]
 │    │    └── projections
 │    │         └── const: 1 [type=int]
 │    └── projections
 │         └── case [type=int]
 │              ├── true [type=bool]
 │              ├── when [type=int]
 │              │    ├── is [type=bool]
 │              │    │    ├── variable: child2.c [type=int]
 │              │    │    └── null [type=unknown]
 │              │    └── variable: column1 [type=int]
 │              └── variable: column4 [type=int]
 └── f-k-checks
      ├── f-k-checks-item: child2(c) -> parent(p)
      │    └── anti-join (hash)
      │         ├── columns: column1:6(int!null)
      │         ├── project
      │         │    ├── columns: column1:6(int!null)
      │         │    └── project
      │         │         ├── columns: column1:6(int!null)
      │         │         └── select
      │         │              ├── columns: column1:6(int!null) c:7(int)
      │         │              ├── with-scan &1
      │         │              │    ├── columns: column1:6(int!null) c:7(int)
      │         │              │    └── mapping:
      │         │              │         ├──  column1:2(int) => column1:6(int)
      │         │              │         └──  child2.c:3(int) => c:7(int)
      │         │              └── filters
      │         │                   └── is [type=bool]
      │         │                        ├── variable: c [type=int]
      │         │                        └── null [type=unknown]
      │         ├── scan parent
      │         │    └── columns: p:8(int!null)
      │         └── filters
      │              └── eq [type=bool]
      │                   ├── variable: column1 [type=int]
      │                   └── variable: p [type=int]
      └── f-k-checks-item: child2(c) -> parent(p)
           └── anti-join (hash)
                ├── columns: upsert_c:10(int!null)
                ├── project
                │    ├── columns: upsert_c:10(int!null)
                │    └── project
                │         ├── columns: upsert_c:10(int!null)
                │         └── select
                │              ├── columns: upsert_c:10(int!null) c:11(int!null)
                │              ├── with-scan &1
                │              │    ├── columns: upsert_c:10(int!null) c:11(int)
                │              │    └── mapping:
                │              │         ├──  upsert_c:5(int) => upsert_c:10(int)
                │              │         └──  child2.c:3(int) => c:11(int)
                │              └── filters
                │                   └── is-not [type=bool]
                │                        ├── variable: c [type=int]
                │                        └── null [type=unknown]
                ├── scan parent
                │    └── columns: p:12(int!null)
                └── filters
                     └── eq [type=bool]
                          ├── variable: upsert_c [type=int]
                          └── variable: p [type=int]

exec-ddl
CREATE TABLE child_nullable (c INT PRIMARY KEY, p INT REFERENCES parent(p));
----

# Because the input column can be NULL (in which case it requires no FK match),
# we have to add an extra filter.
norm
UPSERT INTO child_nullable VALUES (100, 1), (200, NULL)
----
upsert child_nullable
 ├── columns: <none>
 ├── canary column: 5
 ├── fetch columns: child_nullable.c:5(int) child_nullable.p:6(int)
 ├── insert-mapping:
 │    ├──  column1:3 => child_nullable.c:1
 │    └──  column2:4 => child_nullable.p:2
 ├── update-mapping:
 │    └──  column2:4 => child_nullable.p:2
 ├── input binding: &1
 ├── left-join (hash)
 │    ├── columns: column1:3(int!null) column2:4(int) child_nullable.c:5(int) child_nullable.p:6(int)
 │    ├── values
 │    │    ├── columns: column1:3(int!null) column2:4(int)
 │    │    ├── tuple [type=tuple{int, int}]
 │    │    │    ├── const: 100 [type=int]
 │    │    │    └── const: 1 [type=int]
 │    │    └── tuple [type=tuple{int, int}]
 │    │         ├── const: 200 [type=int]
 │    │         └── null [type=int]
 │    ├── scan child_nullable
 │    │    └── columns: child_nullable.c:5(int!null) child_nullable.p:6(int)
 │    └── filters
 │         └── eq [type=bool]
 │              ├── variable: column1 [type=int]
 │              └── variable: child_nullable.c [type=int]
 └── f-k-checks
      ├── f-k-checks-item: child_nullable(p) -> parent(p)
      │    └── anti-join (hash)
      │         ├── columns: column2:8(int!null)
      │         ├── project
      │         │    ├── columns: column2:8(int!null)
      │         │    └── select
      │         │         ├── columns: column2:8(int!null) c:9(int)
      │         │         ├── with-scan &1
      │         │         │    ├── columns: column2:8(int) c:9(int)
      │         │         │    └── mapping:
      │         │         │         ├──  column2:4(int) => column2:8(int)
      │         │         │         └──  child_nullable.c:5(int) => c:9(int)
      │         │         └── filters
      │         │              ├── is [type=bool]
      │         │              │    ├── variable: c [type=int]
      │         │              │    └── null [type=unknown]
      │         │              └── is-not [type=bool]
      │         │                   ├── variable: column2 [type=int]
      │         │                   └── null [type=unknown]
      │         ├── scan parent
      │         │    └── columns: parent.p:10(int!null)
      │         └── filters
      │              └── eq [type=bool]
      │                   ├── variable: column2 [type=int]
      │                   └── variable: parent.p [type=int]
      └── f-k-checks-item: child_nullable(p) -> parent(p)
           └── anti-join (hash)
                ├── columns: column2:12(int!null)
                ├── project
                │    ├── columns: column2:12(int!null)
                │    └── select
                │         ├── columns: column2:12(int!null) c:13(int!null)
                │         ├── with-scan &1
                │         │    ├── columns: column2:12(int) c:13(int)
                │         │    └── mapping:
                │         │         ├──  column2:4(int) => column2:12(int)
                │         │         └──  child_nullable.c:5(int) => c:13(int)
                │         └── filters
                │              ├── is-not [type=bool]
                │              │    ├── variable: c [type=int]
                │              │    └── null [type=unknown]
                │              └── is-not [type=bool]
                │                   ├── variable: column2 [type=int]
                │                   └── null [type=unknown]
                ├── scan parent
                │    └── columns: parent.p:14(int!null)
                └── filters
                     └── eq [type=bool]
                          ├── variable: column2 [type=int]
                          └── variable: parent.p [type=int]

# Tests with multicolumn FKs.
exec-ddl
CREATE TABLE multi_col_parent (p INT, q INT, r INT, other INT, PRIMARY KEY (p, q, r))
----

exec-ddl
CREATE TABLE multi_col_child  (
  c INT PRIMARY KEY,
  p INT, q INT, r INT,
  CONSTRAINT fk FOREIGN KEY (p,q,r) REFERENCES multi_col_parent(p,q,r) MATCH SIMPLE
)
----

# All columns are nullable and must be part of the filter.
build
UPSERT INTO multi_col_child VALUES (4, NULL, NULL, NULL)
----
upsert multi_col_child
 ├── columns: <none>
 ├── canary column: 9
 ├── fetch columns: multi_col_child.c:9(int) multi_col_child.p:10(int) multi_col_child.q:11(int) multi_col_child.r:12(int)
 ├── insert-mapping:
 │    ├──  column1:5 => multi_col_child.c:1
 │    ├──  column2:6 => multi_col_child.p:2
 │    ├──  column3:7 => multi_col_child.q:3
 │    └──  column4:8 => multi_col_child.r:4
 ├── update-mapping:
 │    ├──  column2:6 => multi_col_child.p:2
 │    ├──  column3:7 => multi_col_child.q:3
 │    └──  column4:8 => multi_col_child.r:4
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_c:13(int) column1:5(int!null) column2:6(int) column3:7(int) column4:8(int) multi_col_child.c:9(int) multi_col_child.p:10(int) multi_col_child.q:11(int) multi_col_child.r:12(int)
 │    ├── left-join (hash)
 │    │    ├── columns: column1:5(int!null) column2:6(int) column3:7(int) column4:8(int) multi_col_child.c:9(int) multi_col_child.p:10(int) multi_col_child.q:11(int) multi_col_child.r:12(int)
 │    │    ├── values
 │    │    │    ├── columns: column1:5(int!null) column2:6(int) column3:7(int) column4:8(int)
 │    │    │    └── tuple [type=tuple{int, int, int, int}]
 │    │    │         ├── const: 4 [type=int]
 │    │    │         ├── cast: INT8 [type=int]
 │    │    │         │    └── null [type=unknown]
 │    │    │         ├── cast: INT8 [type=int]
 │    │    │         │    └── null [type=unknown]
 │    │    │         └── cast: INT8 [type=int]
 │    │    │              └── null [type=unknown]
 │    │    ├── scan multi_col_child
 │    │    │    └── columns: multi_col_child.c:9(int!null) multi_col_child.p:10(int) multi_col_child.q:11(int) multi_col_child.r:12(int)
 │    │    └── filters
 │    │         └── eq [type=bool]
 │    │              ├── variable: column1 [type=int]
 │    │              └── variable: multi_col_child.c [type=int]
 │    └── projections
 │         └── case [type=int]
 │              ├── true [type=bool]
 │              ├── when [type=int]
 │              │    ├── is [type=bool]
 │              │    │    ├── variable: multi_col_child.c [type=int]
 │              │    │    └── null [type=unknown]
 │              │    └── variable: column1 [type=int]
 │              └── variable: multi_col_child.c [type=int]
 └── f-k-checks
      ├── f-k-checks-item: multi_col_child(p,q,r) -> multi_col_parent(p,q,r)
      │    └── anti-join (hash)
      │         ├── columns: column2:14(int!null) column3:15(int!null) column4:16(int!null)
      │         ├── select
      │         │    ├── columns: column2:14(int!null) column3:15(int!null) column4:16(int!null)
      │         │    ├── project
      │         │    │    ├── columns: column2:14(int) column3:15(int) column4:16(int)
      │         │    │    └── project
      │         │    │         ├── columns: column2:14(int) column3:15(int) column4:16(int)
      │         │    │         └── select
      │         │    │              ├── columns: column2:14(int) column3:15(int) column4:16(int) c:17(int)
      │         │    │              ├── with-scan &1
      │         │    │              │    ├── columns: column2:14(int) column3:15(int) column4:16(int) c:17(int)
      │         │    │              │    └── mapping:
      │         │    │              │         ├──  column2:6(int) => column2:14(int)
      │         │    │              │         ├──  column3:7(int) => column3:15(int)
      │         │    │              │         ├──  column4:8(int) => column4:16(int)
      │         │    │              │         └──  multi_col_child.c:9(int) => c:17(int)
      │         │    │              └── filters
      │         │    │                   └── is [type=bool]
      │         │    │                        ├── variable: c [type=int]
      │         │    │                        └── null [type=unknown]
      │         │    └── filters
      │         │         ├── is-not [type=bool]
      │         │         │    ├── variable: column2 [type=int]
      │         │         │    └── null [type=unknown]
      │         │         ├── is-not [type=bool]
      │         │         │    ├── variable: column3 [type=int]
      │         │         │    └── null [type=unknown]
      │         │         └── is-not [type=bool]
      │         │              ├── variable: column4 [type=int]
      │         │              └── null [type=unknown]
      │         ├── scan multi_col_parent
      │         │    └── columns: multi_col_parent.p:18(int!null) multi_col_parent.q:19(int!null) multi_col_parent.r:20(int!null)
      │         └── filters
      │              ├── eq [type=bool]
      │              │    ├── variable: column2 [type=int]
      │              │    └── variable: multi_col_parent.p [type=int]
      │              ├── eq [type=bool]
      │              │    ├── variable: column3 [type=int]
      │              │    └── variable: multi_col_parent.q [type=int]
      │              └── eq [type=bool]
      │                   ├── variable: column4 [type=int]
      │                   └── variable: multi_col_parent.r [type=int]
      └── f-k-checks-item: multi_col_child(p,q,r) -> multi_col_parent(p,q,r)
           └── anti-join (hash)
                ├── columns: column2:22(int!null) column3:23(int!null) column4:24(int!null)
                ├── select
                │    ├── columns: column2:22(int!null) column3:23(int!null) column4:24(int!null)
                │    ├── project
                │    │    ├── columns: column2:22(int) column3:23(int) column4:24(int)
                │    │    └── project
                │    │         ├── columns: column2:22(int) column3:23(int) column4:24(int)
                │    │         └── select
                │    │              ├── columns: column2:22(int) column3:23(int) column4:24(int) c:25(int!null)
                │    │              ├── with-scan &1
                │    │              │    ├── columns: column2:22(int) column3:23(int) column4:24(int) c:25(int)
                │    │              │    └── mapping:
                │    │              │         ├──  column2:6(int) => column2:22(int)
                │    │              │         ├──  column3:7(int) => column3:23(int)
                │    │              │         ├──  column4:8(int) => column4:24(int)
                │    │              │         └──  multi_col_child.c:9(int) => c:25(int)
                │    │              └── filters
                │    │                   └── is-not [type=bool]
                │    │                        ├── variable: c [type=int]
                │    │                        └── null [type=unknown]
                │    └── filters
                │         ├── is-not [type=bool]
                │         │    ├── variable: column2 [type=int]
                │         │    └── null [type=unknown]
                │         ├── is-not [type=bool]
                │         │    ├── variable: column3 [type=int]
                │         │    └── null [type=unknown]
                │         └── is-not [type=bool]
                │              ├── variable: column4 [type=int]
                │              └── null [type=unknown]
                ├── scan multi_col_parent
                │    └── columns: multi_col_parent.p:26(int!null) multi_col_parent.q:27(int!null) multi_col_parent.r:28(int!null)
                └── filters
                     ├── eq [type=bool]
                     │    ├── variable: column2 [type=int]
                     │    └── variable: multi_col_parent.p [type=int]
                     ├── eq [type=bool]
                     │    ├── variable: column3 [type=int]
                     │    └── variable: multi_col_parent.q [type=int]
                     └── eq [type=bool]
                          ├── variable: column4 [type=int]
                          └── variable: multi_col_parent.r [type=int]

# Only p and q are nullable.
build
UPSERT INTO multi_col_child VALUES (2, NULL, 20, 20), (3, 20, NULL, 20)
----
upsert multi_col_child
 ├── columns: <none>
 ├── canary column: 9
 ├── fetch columns: multi_col_child.c:9(int) multi_col_child.p:10(int) multi_col_child.q:11(int) multi_col_child.r:12(int)
 ├── insert-mapping:
 │    ├──  column1:5 => multi_col_child.c:1
 │    ├──  column2:6 => multi_col_child.p:2
 │    ├──  column3:7 => multi_col_child.q:3
 │    └──  column4:8 => multi_col_child.r:4
 ├── update-mapping:
 │    ├──  column2:6 => multi_col_child.p:2
 │    ├──  column3:7 => multi_col_child.q:3
 │    └──  column4:8 => multi_col_child.r:4
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_c:13(int) column1:5(int!null) column2:6(int) column3:7(int) column4:8(int!null) multi_col_child.c:9(int) multi_col_child.p:10(int) multi_col_child.q:11(int) multi_col_child.r:12(int)
 │    ├── left-join (hash)
 │    │    ├── columns: column1:5(int!null) column2:6(int) column3:7(int) column4:8(int!null) multi_col_child.c:9(int) multi_col_child.p:10(int) multi_col_child.q:11(int) multi_col_child.r:12(int)
 │    │    ├── values
 │    │    │    ├── columns: column1:5(int!null) column2:6(int) column3:7(int) column4:8(int!null)
 │    │    │    ├── tuple [type=tuple{int, int, int, int}]
 │    │    │    │    ├── const: 2 [type=int]
 │    │    │    │    ├── cast: INT8 [type=int]
 │    │    │    │    │    └── null [type=unknown]
 │    │    │    │    ├── const: 20 [type=int]
 │    │    │    │    └── const: 20 [type=int]
 │    │    │    └── tuple [type=tuple{int, int, int, int}]
 │    │    │         ├── const: 3 [type=int]
 │    │    │         ├── const: 20 [type=int]
 │    │    │         ├── cast: INT8 [type=int]
 │    │    │         │    └── null [type=unknown]
 │    │    │         └── const: 20 [type=int]
 │    │    ├── scan multi_col_child
 │    │    │    └── columns: multi_col_child.c:9(int!null) multi_col_child.p:10(int) multi_col_child.q:11(int) multi_col_child.r:12(int)
 │    │    └── filters
 │    │         └── eq [type=bool]
 │    │              ├── variable: column1 [type=int]
 │    │              └── variable: multi_col_child.c [type=int]
 │    └── projections
 │         └── case [type=int]
 │              ├── true [type=bool]
 │              ├── when [type=int]
 │              │    ├── is [type=bool]
 │              │    │    ├── variable: multi_col_child.c [type=int]
 │              │    │    └── null [type=unknown]
 │              │    └── variable: column1 [type=int]
 │              └── variable: multi_col_child.c [type=int]
 └── f-k-checks
      ├── f-k-checks-item: multi_col_child(p,q,r) -> multi_col_parent(p,q,r)
      │    └── anti-join (hash)
      │         ├── columns: column2:14(int!null) column3:15(int!null) column4:16(int!null)
      │         ├── select
      │         │    ├── columns: column2:14(int!null) column3:15(int!null) column4:16(int!null)
      │         │    ├── project
      │         │    │    ├── columns: column2:14(int) column3:15(int) column4:16(int!null)
      │         │    │    └── project
      │         │    │         ├── columns: column2:14(int) column3:15(int) column4:16(int!null)
      │         │    │         └── select
      │         │    │              ├── columns: column2:14(int) column3:15(int) column4:16(int!null) c:17(int)
      │         │    │              ├── with-scan &1
      │         │    │              │    ├── columns: column2:14(int) column3:15(int) column4:16(int!null) c:17(int)
      │         │    │              │    └── mapping:
      │         │    │              │         ├──  column2:6(int) => column2:14(int)
      │         │    │              │         ├──  column3:7(int) => column3:15(int)
      │         │    │              │         ├──  column4:8(int) => column4:16(int)
      │         │    │              │         └──  multi_col_child.c:9(int) => c:17(int)
      │         │    │              └── filters
      │         │    │                   └── is [type=bool]
      │         │    │                        ├── variable: c [type=int]
      │         │    │                        └── null [type=unknown]
      │         │    └── filters
      │         │         ├── is-not [type=bool]
      │         │         │    ├── variable: column2 [type=int]
      │         │         │    └── null [type=unknown]
      │         │         └── is-not [type=bool]
      │         │              ├── variable: column3 [type=int]
      │         │              └── null [type=unknown]
      │         ├── scan multi_col_parent
      │         │    └── columns: multi_col_parent.p:18(int!null) multi_col_parent.q:19(int!null) multi_col_parent.r:20(int!null)
      │         └── filters
      │              ├── eq [type=bool]
      │              │    ├── variable: column2 [type=int]
      │              │    └── variable: multi_col_parent.p [type=int]
      │              ├── eq [type=bool]
      │              │    ├── variable: column3 [type=int]
      │              │    └── variable: multi_col_parent.q [type=int]
      │              └── eq [type=bool]
      │                   ├── variable: column4 [type=int]
      │                   └── variable: multi_col_parent.r [type=int]
      └── f-k-checks-item: multi_col_child(p,q,r) -> multi_col_parent(p,q,r)
           └── anti-join (hash)
                ├── columns: column2:22(int!null) column3:23(int!null) column4:24(int!null)
                ├── select
                │    ├── columns: column2:22(int!null) column3:23(int!null) column4:24(int!null)
                │    ├── project
                │    │    ├── columns: column2:22(int) column3:23(int) column4:24(int!null)
                │    │    └── project
                │    │         ├── columns: column2:22(int) column3:23(int) column4:24(int!null)
                │    │         └── select
                │    │              ├── columns: column2:22(int) column3:23(int) column4:24(int!null) c:25(int!null)
                │    │              ├── with-scan &1
                │    │              │    ├── columns: column2:22(int) column3:23(int) column4:24(int!null) c:25(int)
                │    │              │    └── mapping:
                │    │              │         ├──  column2:6(int) => column2:22(int)
                │    │              │         ├──  column3:7(int) => column3:23(int)
                │    │              │         ├──  column4:8(int) => column4:24(int)
                │    │              │         └──  multi_col_child.c:9(int) => c:25(int)
                │    │              └── filters
                │    │                   └── is-not [type=bool]
                │    │                        ├── variable: c [type=int]
                │    │                        └── null [type=unknown]
                │    └── filters
                │         ├── is-not [type=bool]
                │         │    ├── variable: column2 [type=int]
                │         │    └── null [type=unknown]
                │         └── is-not [type=bool]
                │              ├── variable: column3 [type=int]
                │              └── null [type=unknown]
                ├── scan multi_col_parent
                │    └── columns: multi_col_parent.p:26(int!null) multi_col_parent.q:27(int!null) multi_col_parent.r:28(int!null)
                └── filters
                     ├── eq [type=bool]
                     │    ├── variable: column2 [type=int]
                     │    └── variable: multi_col_parent.p [type=int]
                     ├── eq [type=bool]
                     │    ├── variable: column3 [type=int]
                     │    └── variable: multi_col_parent.q [type=int]
                     └── eq [type=bool]
                          ├── variable: column4 [type=int]
                          └── variable: multi_col_parent.r [type=int]

# All the FK columns are not-null; no filter necessary.
build
UPSERT INTO multi_col_child VALUES (1, 10, 10, 10)
----
upsert multi_col_child
 ├── columns: <none>
 ├── canary column: 9
 ├── fetch columns: multi_col_child.c:9(int) multi_col_child.p:10(int) multi_col_child.q:11(int) multi_col_child.r:12(int)
 ├── insert-mapping:
 │    ├──  column1:5 => multi_col_child.c:1
 │    ├──  column2:6 => multi_col_child.p:2
 │    ├──  column3:7 => multi_col_child.q:3
 │    └──  column4:8 => multi_col_child.r:4
 ├── update-mapping:
 │    ├──  column2:6 => multi_col_child.p:2
 │    ├──  column3:7 => multi_col_child.q:3
 │    └──  column4:8 => multi_col_child.r:4
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_c:13(int) column1:5(int!null) column2:6(int!null) column3:7(int!null) column4:8(int!null) multi_col_child.c:9(int) multi_col_child.p:10(int) multi_col_child.q:11(int) multi_col_child.r:12(int)
 │    ├── left-join (hash)
 │    │    ├── columns: column1:5(int!null) column2:6(int!null) column3:7(int!null) column4:8(int!null) multi_col_child.c:9(int) multi_col_child.p:10(int) multi_col_child.q:11(int) multi_col_child.r:12(int)
 │    │    ├── values
 │    │    │    ├── columns: column1:5(int!null) column2:6(int!null) column3:7(int!null) column4:8(int!null)
 │    │    │    └── tuple [type=tuple{int, int, int, int}]
 │    │    │         ├── const: 1 [type=int]
 │    │    │         ├── const: 10 [type=int]
 │    │    │         ├── const: 10 [type=int]
 │    │    │         └── const: 10 [type=int]
 │    │    ├── scan multi_col_child
 │    │    │    └── columns: multi_col_child.c:9(int!null) multi_col_child.p:10(int) multi_col_child.q:11(int) multi_col_child.r:12(int)
 │    │    └── filters
 │    │         └── eq [type=bool]
 │    │              ├── variable: column1 [type=int]
 │    │              └── variable: multi_col_child.c [type=int]
 │    └── projections
 │         └── case [type=int]
 │              ├── true [type=bool]
 │              ├── when [type=int]
 │              │    ├── is [type=bool]
 │              │    │    ├── variable: multi_col_child.c [type=int]
 │              │    │    └── null [type=unknown]
 │              │    └── variable: column1 [type=int]
 │              └── variable: multi_col_child.c [type=int]
 └── f-k-checks
      ├── f-k-checks-item: multi_col_child(p,q,r) -> multi_col_parent(p,q,r)
      │    └── anti-join (hash)
      │         ├── columns: column2:14(int!null) column3:15(int!null) column4:16(int!null)
      │         ├── project
      │         │    ├── columns: column2:14(int!null) column3:15(int!null) column4:16(int!null)
      │         │    └── project
      │         │         ├── columns: column2:14(int!null) column3:15(int!null) column4:16(int!null)
      │         │         └── select
      │         │              ├── columns: column2:14(int!null) column3:15(int!null) column4:16(int!null) c:17(int)
      │         │              ├── with-scan &1
      │         │              │    ├── columns: column2:14(int!null) column3:15(int!null) column4:16(int!null) c:17(int)
      │         │              │    └── mapping:
      │         │              │         ├──  column2:6(int) => column2:14(int)
      │         │              │         ├──  column3:7(int) => column3:15(int)
      │         │              │         ├──  column4:8(int) => column4:16(int)
      │         │              │         └──  multi_col_child.c:9(int) => c:17(int)
      │         │              └── filters
      │         │                   └── is [type=bool]
      │         │                        ├── variable: c [type=int]
      │         │                        └── null [type=unknown]
      │         ├── scan multi_col_parent
      │         │    └── columns: multi_col_parent.p:18(int!null) multi_col_parent.q:19(int!null) multi_col_parent.r:20(int!null)
      │         └── filters
      │              ├── eq [type=bool]
      │              │    ├── variable: column2 [type=int]
      │              │    └── variable: multi_col_parent.p [type=int]
      │              ├── eq [type=bool]
      │              │    ├── variable: column3 [type=int]
      │              │    └── variable: multi_col_parent.q [type=int]
      │              └── eq [type=bool]
      │                   ├── variable: column4 [type=int]
      │                   └── variable: multi_col_parent.r [type=int]
      └── f-k-checks-item: multi_col_child(p,q,r) -> multi_col_parent(p,q,r)
           └── anti-join (hash)
                ├── columns: column2:22(int!null) column3:23(int!null) column4:24(int!null)
                ├── project
                │    ├── columns: column2:22(int!null) column3:23(int!null) column4:24(int!null)
                │    └── project
                │         ├── columns: column2:22(int!null) column3:23(int!null) column4:24(int!null)
                │         └── select
                │              ├── columns: column2:22(int!null) column3:23(int!null) column4:24(int!null) c:25(int!null)
                │              ├── with-scan &1
                │              │    ├── columns: column2:22(int!null) column3:23(int!null) column4:24(int!null) c:25(int)
                │              │    └── mapping:
                │              │         ├──  column2:6(int) => column2:22(int)
                │              │         ├──  column3:7(int) => column3:23(int)
                │              │         ├──  column4:8(int) => column4:24(int)
                │              │         └──  multi_col_child.c:9(int) => c:25(int)
                │              └── filters
                │                   └── is-not [type=bool]
                │                        ├── variable: c [type=int]
                │                        └── null [type=unknown]
                ├── scan multi_col_parent
                │    └── columns: multi_col_parent.p:26(int!null) multi_col_parent.q:27(int!null) multi_col_parent.r:28(int!null)
                └── filters
                     ├── eq [type=bool]
                     │    ├── variable: column2 [type=int]
                     │    └── variable: multi_col_parent.p [type=int]
                     ├── eq [type=bool]
                     │    ├── variable: column3 [type=int]
                     │    └── variable: multi_col_parent.q [type=int]
                     └── eq [type=bool]
                          ├── variable: column4 [type=int]
                          └── variable: multi_col_parent.r [type=int]

exec-ddl
CREATE TABLE multi_ref_parent_a (a INT PRIMARY KEY, other INT)
----

exec-ddl
CREATE TABLE multi_ref_parent_bc (b INT, c INT, PRIMARY KEY (b,c), other INT)
----

exec-ddl
CREATE TABLE multi_ref_child (
  k INT PRIMARY KEY,
  a INT,
  b INT,
  c INT,
  CONSTRAINT fk FOREIGN KEY (a) REFERENCES multi_ref_parent_a(a),
  CONSTRAINT fk FOREIGN KEY (b,c) REFERENCES multi_ref_parent_bc(b,c)
)
----

build
UPSERT INTO multi_ref_child VALUES (1, NULL, NULL, NULL)
----
upsert multi_ref_child
 ├── columns: <none>
 ├── canary column: 9
 ├── fetch columns: multi_ref_child.k:9(int) multi_ref_child.a:10(int) multi_ref_child.b:11(int) multi_ref_child.c:12(int)
 ├── insert-mapping:
 │    ├──  column1:5 => multi_ref_child.k:1
 │    ├──  column2:6 => multi_ref_child.a:2
 │    ├──  column3:7 => multi_ref_child.b:3
 │    └──  column4:8 => multi_ref_child.c:4
 ├── update-mapping:
 │    ├──  column2:6 => multi_ref_child.a:2
 │    ├──  column3:7 => multi_ref_child.b:3
 │    └──  column4:8 => multi_ref_child.c:4
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_k:13(int) column1:5(int!null) column2:6(int) column3:7(int) column4:8(int) multi_ref_child.k:9(int) multi_ref_child.a:10(int) multi_ref_child.b:11(int) multi_ref_child.c:12(int)
 │    ├── left-join (hash)
 │    │    ├── columns: column1:5(int!null) column2:6(int) column3:7(int) column4:8(int) multi_ref_child.k:9(int) multi_ref_child.a:10(int) multi_ref_child.b:11(int) multi_ref_child.c:12(int)
 │    │    ├── values
 │    │    │    ├── columns: column1:5(int!null) column2:6(int) column3:7(int) column4:8(int)
 │    │    │    └── tuple [type=tuple{int, int, int, int}]
 │    │    │         ├── const: 1 [type=int]
 │    │    │         ├── cast: INT8 [type=int]
 │    │    │         │    └── null [type=unknown]
 │    │    │         ├── cast: INT8 [type=int]
 │    │    │         │    └── null [type=unknown]
 │    │    │         └── cast: INT8 [type=int]
 │    │    │              └── null [type=unknown]
 │    │    ├── scan multi_ref_child
 │    │    │    └── columns: multi_ref_child.k:9(int!null) multi_ref_child.a:10(int) multi_ref_child.b:11(int) multi_ref_child.c:12(int)
 │    │    └── filters
 │    │         └── eq [type=bool]
 │    │              ├── variable: column1 [type=int]
 │    │              └── variable: multi_ref_child.k [type=int]
 │    └── projections
 │         └── case [type=int]
 │              ├── true [type=bool]
 │              ├── when [type=int]
 │              │    ├── is [type=bool]
 │              │    │    ├── variable: multi_ref_child.k [type=int]
 │              │    │    └── null [type=unknown]
 │              │    └── variable: column1 [type=int]
 │              └── variable: multi_ref_child.k [type=int]
 └── f-k-checks
      ├── f-k-checks-item: multi_ref_child(a) -> multi_ref_parent_a(a)
      │    └── anti-join (hash)
      │         ├── columns: column2:14(int!null)
      │         ├── select
      │         │    ├── columns: column2:14(int!null)
      │         │    ├── project
      │         │    │    ├── columns: column2:14(int)
      │         │    │    └── project
      │         │    │         ├── columns: column2:14(int)
      │         │    │         └── select
      │         │    │              ├── columns: column2:14(int) k:15(int)
      │         │    │              ├── with-scan &1
      │         │    │              │    ├── columns: column2:14(int) k:15(int)
      │         │    │              │    └── mapping:
      │         │    │              │         ├──  column2:6(int) => column2:14(int)
      │         │    │              │         └──  multi_ref_child.k:9(int) => k:15(int)
      │         │    │              └── filters
      │         │    │                   └── is [type=bool]
      │         │    │                        ├── variable: k [type=int]
      │         │    │                        └── null [type=unknown]
      │         │    └── filters
      │         │         └── is-not [type=bool]
      │         │              ├── variable: column2 [type=int]
      │         │              └── null [type=unknown]
      │         ├── scan multi_ref_parent_a
      │         │    └── columns: multi_ref_parent_a.a:16(int!null)
      │         └── filters
      │              └── eq [type=bool]
      │                   ├── variable: column2 [type=int]
      │                   └── variable: multi_ref_parent_a.a [type=int]
      ├── f-k-checks-item: multi_ref_child(b,c) -> multi_ref_parent_bc(b,c)
      │    └── anti-join (hash)
      │         ├── columns: column3:18(int!null) column4:19(int!null)
      │         ├── select
      │         │    ├── columns: column3:18(int!null) column4:19(int!null)
      │         │    ├── project
      │         │    │    ├── columns: column3:18(int) column4:19(int)
      │         │    │    └── project
      │         │    │         ├── columns: column3:18(int) column4:19(int)
      │         │    │         └── select
      │         │    │              ├── columns: column3:18(int) column4:19(int) k:20(int)
      │         │    │              ├── with-scan &1
      │         │    │              │    ├── columns: column3:18(int) column4:19(int) k:20(int)
      │         │    │              │    └── mapping:
      │         │    │              │         ├──  column3:7(int) => column3:18(int)
      │         │    │              │         ├──  column4:8(int) => column4:19(int)
      │         │    │              │         └──  multi_ref_child.k:9(int) => k:20(int)
      │         │    │              └── filters
      │         │    │                   └── is [type=bool]
      │         │    │                        ├── variable: k [type=int]
      │         │    │                        └── null [type=unknown]
      │         │    └── filters
      │         │         ├── is-not [type=bool]
      │         │         │    ├── variable: column3 [type=int]
      │         │         │    └── null [type=unknown]
      │         │         └── is-not [type=bool]
      │         │              ├── variable: column4 [type=int]
      │         │              └── null [type=unknown]
      │         ├── scan multi_ref_parent_bc
      │         │    └── columns: multi_ref_parent_bc.b:21(int!null) multi_ref_parent_bc.c:22(int!null)
      │         └── filters
      │              ├── eq [type=bool]
      │              │    ├── variable: column3 [type=int]
      │              │    └── variable: multi_ref_parent_bc.b [type=int]
      │              └── eq [type=bool]
      │                   ├── variable: column4 [type=int]
      │                   └── variable: multi_ref_parent_bc.c [type=int]
      ├── f-k-checks-item: multi_ref_child(a) -> multi_ref_parent_a(a)
      │    └── anti-join (hash)
      │         ├── columns: column2:24(int!null)
      │         ├── select
      │         │    ├── columns: column2:24(int!null)
      │         │    ├── project
      │         │    │    ├── columns: column2:24(int)
      │         │    │    └── project
      │         │    │         ├── columns: column2:24(int)
      │         │    │         └── select
      │         │    │              ├── columns: column2:24(int) k:25(int!null)
      │         │    │              ├── with-scan &1
      │         │    │              │    ├── columns: column2:24(int) k:25(int)
      │         │    │              │    └── mapping:
      │         │    │              │         ├──  column2:6(int) => column2:24(int)
      │         │    │              │         └──  multi_ref_child.k:9(int) => k:25(int)
      │         │    │              └── filters
      │         │    │                   └── is-not [type=bool]
      │         │    │                        ├── variable: k [type=int]
      │         │    │                        └── null [type=unknown]
      │         │    └── filters
      │         │         └── is-not [type=bool]
      │         │              ├── variable: column2 [type=int]
      │         │              └── null [type=unknown]
      │         ├── scan multi_ref_parent_a
      │         │    └── columns: multi_ref_parent_a.a:26(int!null)
      │         └── filters
      │              └── eq [type=bool]
      │                   ├── variable: column2 [type=int]
      │                   └── variable: multi_ref_parent_a.a [type=int]
      └── f-k-checks-item: multi_ref_child(b,c) -> multi_ref_parent_bc(b,c)
           └── anti-join (hash)
                ├── columns: column3:28(int!null) column4:29(int!null)
                ├── select
                │    ├── columns: column3:28(int!null) column4:29(int!null)
                │    ├── project
                │    │    ├── columns: column3:28(int) column4:29(int)
                │    │    └── project
                │    │         ├── columns: column3:28(int) column4:29(int)
                │    │         └── select
                │    │              ├── columns: column3:28(int) column4:29(int) k:30(int!null)
                │    │              ├── with-scan &1
                │    │              │    ├── columns: column3:28(int) column4:29(int) k:30(int)
                │    │              │    └── mapping:
                │    │              │         ├──  column3:7(int) => column3:28(int)
                │    │              │         ├──  column4:8(int) => column4:29(int)
                │    │              │         └──  multi_ref_child.k:9(int) => k:30(int)
                │    │              └── filters
                │    │                   └── is-not [type=bool]
                │    │                        ├── variable: k [type=int]
                │    │                        └── null [type=unknown]
                │    └── filters
                │         ├── is-not [type=bool]
                │         │    ├── variable: column3 [type=int]
                │         │    └── null [type=unknown]
                │         └── is-not [type=bool]
                │              ├── variable: column4 [type=int]
                │              └── null [type=unknown]
                ├── scan multi_ref_parent_bc
                │    └── columns: multi_ref_parent_bc.b:31(int!null) multi_ref_parent_bc.c:32(int!null)
                └── filters
                     ├── eq [type=bool]
                     │    ├── variable: column3 [type=int]
                     │    └── variable: multi_ref_parent_bc.b [type=int]
                     └── eq [type=bool]
                          ├── variable: column4 [type=int]
                          └── variable: multi_ref_parent_bc.c [type=int]

exec-ddl
CREATE TABLE parent_d (a int primary key, b int, unique (b))
----

exec-ddl
CREATE TABLE child_d (a int primary key, b int references parent_d(b))
----

build
INSERT INTO parent_d VALUES (1, 3) ON CONFLICT (a) DO UPDATE SET b = 3
----
upsert parent_d
 ├── columns: <none>
 ├── canary column: 5
 ├── fetch columns: parent_d.a:5(int) parent_d.b:6(int)
 ├── insert-mapping:
 │    ├──  column1:3 => parent_d.a:1
 │    └──  column2:4 => parent_d.b:2
 ├── update-mapping:
 │    └──  upsert_b:9 => parent_d.b:2
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_a:8(int) upsert_b:9(int!null) column1:3(int!null) column2:4(int!null) parent_d.a:5(int) parent_d.b:6(int) column7:7(int!null)
 │    ├── project
 │    │    ├── columns: column7:7(int!null) column1:3(int!null) column2:4(int!null) parent_d.a:5(int) parent_d.b:6(int)
 │    │    ├── left-join (hash)
 │    │    │    ├── columns: column1:3(int!null) column2:4(int!null) parent_d.a:5(int) parent_d.b:6(int)
 │    │    │    ├── values
 │    │    │    │    ├── columns: column1:3(int!null) column2:4(int!null)
 │    │    │    │    └── tuple [type=tuple{int, int}]
 │    │    │    │         ├── const: 1 [type=int]
 │    │    │    │         └── const: 3 [type=int]
 │    │    │    ├── scan parent_d
 │    │    │    │    └── columns: parent_d.a:5(int!null) parent_d.b:6(int)
 │    │    │    └── filters
 │    │    │         └── eq [type=bool]
 │    │    │              ├── variable: column1 [type=int]
 │    │    │              └── variable: parent_d.a [type=int]
 │    │    └── projections
 │    │         └── const: 3 [type=int]
 │    └── projections
 │         ├── case [type=int]
 │         │    ├── true [type=bool]
 │         │    ├── when [type=int]
 │         │    │    ├── is [type=bool]
 │         │    │    │    ├── variable: parent_d.a [type=int]
 │         │    │    │    └── null [type=unknown]
 │         │    │    └── variable: column1 [type=int]
 │         │    └── variable: parent_d.a [type=int]
 │         └── case [type=int]
 │              ├── true [type=bool]
 │              ├── when [type=int]
 │              │    ├── is [type=bool]
 │              │    │    ├── variable: parent_d.a [type=int]
 │              │    │    └── null [type=unknown]
 │              │    └── variable: column2 [type=int]
 │              └── variable: column7 [type=int]
 └── f-k-checks
      └── f-k-checks-item: child_d(b) -> parent_d(b)
           └── semi-join (hash)
                ├── columns: b:10(int)
                ├── except
                │    ├── columns: b:10(int)
                │    ├── left columns: b:10(int)
                │    ├── right columns: upsert_b:15(int)
                │    ├── with-scan &1
                │    │    ├── columns: b:10(int)
                │    │    └── mapping:
                │    │         └──  parent_d.b:6(int) => b:10(int)
                │    └── union-all
                │         ├── columns: upsert_b:15(int!null)
                │         ├── left columns: upsert_b:11(int)
                │         ├── right columns: upsert_b:13(int)
                │         ├── project
                │         │    ├── columns: upsert_b:11(int!null)
                │         │    └── select
                │         │         ├── columns: upsert_b:11(int!null) a:12(int)
                │         │         ├── with-scan &1
                │         │         │    ├── columns: upsert_b:11(int!null) a:12(int)
                │         │         │    └── mapping:
                │         │         │         ├──  upsert_b:9(int) => upsert_b:11(int)
                │         │         │         └──  parent_d.a:5(int) => a:12(int)
                │         │         └── filters
                │         │              └── is [type=bool]
                │         │                   ├── variable: a [type=int]
                │         │                   └── null [type=unknown]
                │         └── project
                │              ├── columns: upsert_b:13(int!null)
                │              └── select
                │                   ├── columns: upsert_b:13(int!null) a:14(int!null)
                │                   ├── with-scan &1
                │                   │    ├── columns: upsert_b:13(int!null) a:14(int)
                │                   │    └── mapping:
                │                   │         ├──  upsert_b:9(int) => upsert_b:13(int)
                │                   │         └──  parent_d.a:5(int) => a:14(int)
                │                   └── filters
                │                        └── is-not [type=bool]
                │                             ├── variable: a [type=int]
                │                             └── null [type=unknown]
                ├── scan child_d
                │    └── columns: child_d.b:17(int)
                └── filters
                     └── eq [type=bool]
                          ├── variable: b [type=int]
                          └── variable: child_d.b [type=int]

build
UPSERT INTO parent_d VALUES (1, 3)
----
upsert parent_d
 ├── columns: <none>
 ├── canary column: 5
 ├── fetch columns: parent_d.a:5(int) parent_d.b:6(int)
 ├── insert-mapping:
 │    ├──  column1:3 => parent_d.a:1
 │    └──  column2:4 => parent_d.b:2
 ├── update-mapping:
 │    └──  column2:4 => parent_d.b:2
 ├── input binding: &1
 ├── project
 │    ├── columns: upsert_a:7(int) column1:3(int!null) column2:4(int!null) parent_d.a:5(int) parent_d.b:6(int)
 │    ├── left-join (hash)
 │    │    ├── columns: column1:3(int!null) column2:4(int!null) parent_d.a:5(int) parent_d.b:6(int)
 │    │    ├── values
 │    │    │    ├── columns: column1:3(int!null) column2:4(int!null)
 │    │    │    └── tuple [type=tuple{int, int}]
 │    │    │         ├── const: 1 [type=int]
 │    │    │         └── const: 3 [type=int]
 │    │    ├── scan parent_d
 │    │    │    └── columns: parent_d.a:5(int!null) parent_d.b:6(int)
 │    │    └── filters
 │    │         └── eq [type=bool]
 │    │              ├── variable: column1 [type=int]
 │    │              └── variable: parent_d.a [type=int]
 │    └── projections
 │         └── case [type=int]
 │              ├── true [type=bool]
 │              ├── when [type=int]
 │              │    ├── is [type=bool]
 │              │    │    ├── variable: parent_d.a [type=int]
 │              │    │    └── null [type=unknown]
 │              │    └── variable: column1 [type=int]
 │              └── variable: parent_d.a [type=int]
 └── f-k-checks
      └── f-k-checks-item: child_d(b) -> parent_d(b)
           └── semi-join (hash)
                ├── columns: b:8(int)
                ├── except
                │    ├── columns: b:8(int)
                │    ├── left columns: b:8(int)
                │    ├── right columns: column2:13(int)
                │    ├── with-scan &1
                │    │    ├── columns: b:8(int)
                │    │    └── mapping:
                │    │         └──  parent_d.b:6(int) => b:8(int)
                │    └── union-all
                │         ├── columns: column2:13(int!null)
                │         ├── left columns: column2:9(int)
                │         ├── right columns: column2:11(int)
                │         ├── project
                │         │    ├── columns: column2:9(int!null)
                │         │    └── select
                │         │         ├── columns: column2:9(int!null) a:10(int)
                │         │         ├── with-scan &1
                │         │         │    ├── columns: column2:9(int!null) a:10(int)
                │         │         │    └── mapping:
                │         │         │         ├──  column2:4(int) => column2:9(int)
                │         │         │         └──  parent_d.a:5(int) => a:10(int)
                │         │         └── filters
                │         │              └── is [type=bool]
                │         │                   ├── variable: a [type=int]
                │         │                   └── null [type=unknown]
                │         └── project
                │              ├── columns: column2:11(int!null)
                │              └── select
                │                   ├── columns: column2:11(int!null) a:12(int!null)
                │                   ├── with-scan &1
                │                   │    ├── columns: column2:11(int!null) a:12(int)
                │                   │    └── mapping:
                │                   │         ├──  column2:4(int) => column2:11(int)
                │                   │         └──  parent_d.a:5(int) => a:12(int)
                │                   └── filters
                │                        └── is-not [type=bool]
                │                             ├── variable: a [type=int]
                │                             └── null [type=unknown]
                ├── scan child_d
                │    └── columns: child_d.b:15(int)
                └── filters
                     └── eq [type=bool]
                          ├── variable: b [type=int]
                          └── variable: child_d.b [type=int]
