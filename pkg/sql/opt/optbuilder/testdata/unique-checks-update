exec-ddl
CREATE TABLE uniq (
  k INT PRIMARY KEY,
  v INT UNIQUE,
  w INT UNIQUE WITHOUT INDEX,
  x INT,
  y INT,
  UNIQUE WITHOUT INDEX (x, y)
)
----

# None of the updated values have nulls.
build
UPDATE uniq SET w = 1, x = 2
----
update uniq
 ├── columns: <none>
 ├── fetch columns: uniq.k:7 uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11
 ├── update-mapping:
 │    ├── w_new:13 => uniq.w:3
 │    └── x_new:14 => uniq.x:4
 ├── input binding: &1
 ├── project
 │    ├── columns: w_new:13!null x_new:14!null uniq.k:7!null uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11 crdb_internal_mvcc_timestamp:12
 │    ├── scan uniq
 │    │    └── columns: uniq.k:7!null uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11 crdb_internal_mvcc_timestamp:12
 │    └── projections
 │         ├── 1 [as=w_new:13]
 │         └── 2 [as=x_new:14]
 └── unique-checks
      ├── unique-checks-item: uniq(w)
      │    └── project
      │         ├── columns: w:23!null
      │         └── semi-join (hash)
      │              ├── columns: k:21!null v:22 w:23!null x:24!null y:25
      │              ├── with-scan &1
      │              │    ├── columns: k:21!null v:22 w:23!null x:24!null y:25
      │              │    └── mapping:
      │              │         ├──  uniq.k:7 => k:21
      │              │         ├──  uniq.v:8 => v:22
      │              │         ├──  w_new:13 => w:23
      │              │         ├──  x_new:14 => x:24
      │              │         └──  uniq.y:11 => y:25
      │              ├── scan uniq
      │              │    └── columns: uniq.k:15!null uniq.v:16 uniq.w:17 uniq.x:18 uniq.y:19
      │              └── filters
      │                   ├── w:23 = uniq.w:17
      │                   └── k:21 != uniq.k:15
      └── unique-checks-item: uniq(x,y)
           └── project
                ├── columns: x:35!null y:36
                └── semi-join (hash)
                     ├── columns: k:32!null v:33 w:34!null x:35!null y:36
                     ├── with-scan &1
                     │    ├── columns: k:32!null v:33 w:34!null x:35!null y:36
                     │    └── mapping:
                     │         ├──  uniq.k:7 => k:32
                     │         ├──  uniq.v:8 => v:33
                     │         ├──  w_new:13 => w:34
                     │         ├──  x_new:14 => x:35
                     │         └──  uniq.y:11 => y:36
                     ├── scan uniq
                     │    └── columns: uniq.k:26!null uniq.v:27 uniq.w:28 uniq.x:29 uniq.y:30
                     └── filters
                          ├── x:35 = uniq.x:29
                          ├── y:36 = uniq.y:30
                          └── k:32 != uniq.k:26

# No need to plan checks for w since it's always null.
build
UPDATE uniq SET w = NULL, x = 1
----
update uniq
 ├── columns: <none>
 ├── fetch columns: uniq.k:7 uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11
 ├── update-mapping:
 │    ├── w_new:13 => uniq.w:3
 │    └── x_new:14 => uniq.x:4
 ├── input binding: &1
 ├── project
 │    ├── columns: w_new:13 x_new:14!null uniq.k:7!null uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11 crdb_internal_mvcc_timestamp:12
 │    ├── scan uniq
 │    │    └── columns: uniq.k:7!null uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11 crdb_internal_mvcc_timestamp:12
 │    └── projections
 │         ├── NULL::INT8 [as=w_new:13]
 │         └── 1 [as=x_new:14]
 └── unique-checks
      └── unique-checks-item: uniq(x,y)
           └── project
                ├── columns: x:24!null y:25
                └── semi-join (hash)
                     ├── columns: k:21!null v:22 w:23 x:24!null y:25
                     ├── with-scan &1
                     │    ├── columns: k:21!null v:22 w:23 x:24!null y:25
                     │    └── mapping:
                     │         ├──  uniq.k:7 => k:21
                     │         ├──  uniq.v:8 => v:22
                     │         ├──  w_new:13 => w:23
                     │         ├──  x_new:14 => x:24
                     │         └──  uniq.y:11 => y:25
                     ├── scan uniq
                     │    └── columns: uniq.k:15!null uniq.v:16 uniq.w:17 uniq.x:18 uniq.y:19
                     └── filters
                          ├── x:24 = uniq.x:18
                          ├── y:25 = uniq.y:19
                          └── k:21 != uniq.k:15

# No need to plan checks for x,y since x is always null.
# Also update the primary key.
build
UPDATE uniq SET k = 1, w = 2, x = NULL
----
update uniq
 ├── columns: <none>
 ├── fetch columns: uniq.k:7 uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11
 ├── update-mapping:
 │    ├── k_new:13 => uniq.k:1
 │    ├── w_new:14 => uniq.w:3
 │    └── x_new:15 => uniq.x:4
 ├── input binding: &1
 ├── project
 │    ├── columns: k_new:13!null w_new:14!null x_new:15 uniq.k:7!null uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11 crdb_internal_mvcc_timestamp:12
 │    ├── scan uniq
 │    │    └── columns: uniq.k:7!null uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11 crdb_internal_mvcc_timestamp:12
 │    └── projections
 │         ├── 1 [as=k_new:13]
 │         ├── 2 [as=w_new:14]
 │         └── NULL::INT8 [as=x_new:15]
 └── unique-checks
      └── unique-checks-item: uniq(w)
           └── project
                ├── columns: w:24!null
                └── semi-join (hash)
                     ├── columns: k:22!null v:23 w:24!null x:25 y:26
                     ├── with-scan &1
                     │    ├── columns: k:22!null v:23 w:24!null x:25 y:26
                     │    └── mapping:
                     │         ├──  k_new:13 => k:22
                     │         ├──  uniq.v:8 => v:23
                     │         ├──  w_new:14 => w:24
                     │         ├──  x_new:15 => x:25
                     │         └──  uniq.y:11 => y:26
                     ├── scan uniq
                     │    └── columns: uniq.k:16!null uniq.v:17 uniq.w:18 uniq.x:19 uniq.y:20
                     └── filters
                          ├── w:24 = uniq.w:18
                          └── k:22 != uniq.k:16

# No need to plan checks for x,y since y is always null.
build
UPDATE uniq SET w = 1, y = NULL WHERE k = 1
----
update uniq
 ├── columns: <none>
 ├── fetch columns: uniq.k:7 uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11
 ├── update-mapping:
 │    ├── w_new:13 => uniq.w:3
 │    └── y_new:14 => uniq.y:5
 ├── input binding: &1
 ├── project
 │    ├── columns: w_new:13!null y_new:14 uniq.k:7!null uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11 crdb_internal_mvcc_timestamp:12
 │    ├── select
 │    │    ├── columns: uniq.k:7!null uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11 crdb_internal_mvcc_timestamp:12
 │    │    ├── scan uniq
 │    │    │    └── columns: uniq.k:7!null uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11 crdb_internal_mvcc_timestamp:12
 │    │    └── filters
 │    │         └── uniq.k:7 = 1
 │    └── projections
 │         ├── 1 [as=w_new:13]
 │         └── NULL::INT8 [as=y_new:14]
 └── unique-checks
      └── unique-checks-item: uniq(w)
           └── project
                ├── columns: w:23!null
                └── semi-join (hash)
                     ├── columns: k:21!null v:22 w:23!null x:24 y:25
                     ├── with-scan &1
                     │    ├── columns: k:21!null v:22 w:23!null x:24 y:25
                     │    └── mapping:
                     │         ├──  uniq.k:7 => k:21
                     │         ├──  uniq.v:8 => v:22
                     │         ├──  w_new:13 => w:23
                     │         ├──  uniq.x:10 => x:24
                     │         └──  y_new:14 => y:25
                     ├── scan uniq
                     │    └── columns: uniq.k:15!null uniq.v:16 uniq.w:17 uniq.x:18 uniq.y:19
                     └── filters
                          ├── w:23 = uniq.w:17
                          └── k:21 != uniq.k:15

# No need to plan checks since none of the columns requiring checks are updated.
build
UPDATE uniq SET k = 1, v = 2
----
update uniq
 ├── columns: <none>
 ├── fetch columns: k:7 v:8 w:9 x:10 y:11
 ├── update-mapping:
 │    ├── k_new:13 => k:1
 │    └── v_new:14 => v:2
 └── project
      ├── columns: k_new:13!null v_new:14!null k:7!null v:8 w:9 x:10 y:11 crdb_internal_mvcc_timestamp:12
      ├── scan uniq
      │    └── columns: k:7!null v:8 w:9 x:10 y:11 crdb_internal_mvcc_timestamp:12
      └── projections
           ├── 1 [as=k_new:13]
           └── 2 [as=v_new:14]

exec-ddl
CREATE TABLE other (k INT, v INT, w INT NOT NULL, x INT, y INT)
----

# Update with non-constant input.
build
UPDATE uniq SET w = other.w, x = other.x FROM other
----
update uniq
 ├── columns: <none>
 ├── fetch columns: uniq.k:7 uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11
 ├── update-mapping:
 │    ├── other.w:15 => uniq.w:3
 │    └── other.x:16 => uniq.x:4
 ├── input binding: &1
 ├── distinct-on
 │    ├── columns: uniq.k:7!null uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11 uniq.crdb_internal_mvcc_timestamp:12 other.k:13 other.v:14 other.w:15!null other.x:16 other.y:17 rowid:18!null other.crdb_internal_mvcc_timestamp:19
 │    ├── grouping columns: uniq.k:7!null
 │    ├── inner-join (cross)
 │    │    ├── columns: uniq.k:7!null uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11 uniq.crdb_internal_mvcc_timestamp:12 other.k:13 other.v:14 other.w:15!null other.x:16 other.y:17 rowid:18!null other.crdb_internal_mvcc_timestamp:19
 │    │    ├── scan uniq
 │    │    │    └── columns: uniq.k:7!null uniq.v:8 uniq.w:9 uniq.x:10 uniq.y:11 uniq.crdb_internal_mvcc_timestamp:12
 │    │    ├── scan other
 │    │    │    └── columns: other.k:13 other.v:14 other.w:15!null other.x:16 other.y:17 rowid:18!null other.crdb_internal_mvcc_timestamp:19
 │    │    └── filters (true)
 │    └── aggregations
 │         ├── first-agg [as=uniq.v:8]
 │         │    └── uniq.v:8
 │         ├── first-agg [as=uniq.w:9]
 │         │    └── uniq.w:9
 │         ├── first-agg [as=uniq.x:10]
 │         │    └── uniq.x:10
 │         ├── first-agg [as=uniq.y:11]
 │         │    └── uniq.y:11
 │         ├── first-agg [as=uniq.crdb_internal_mvcc_timestamp:12]
 │         │    └── uniq.crdb_internal_mvcc_timestamp:12
 │         ├── first-agg [as=other.k:13]
 │         │    └── other.k:13
 │         ├── first-agg [as=other.v:14]
 │         │    └── other.v:14
 │         ├── first-agg [as=other.w:15]
 │         │    └── other.w:15
 │         ├── first-agg [as=other.x:16]
 │         │    └── other.x:16
 │         ├── first-agg [as=other.y:17]
 │         │    └── other.y:17
 │         ├── first-agg [as=rowid:18]
 │         │    └── rowid:18
 │         └── first-agg [as=other.crdb_internal_mvcc_timestamp:19]
 │              └── other.crdb_internal_mvcc_timestamp:19
 └── unique-checks
      ├── unique-checks-item: uniq(w)
      │    └── project
      │         ├── columns: w:28!null
      │         └── semi-join (hash)
      │              ├── columns: k:26!null v:27 w:28!null x:29 y:30
      │              ├── with-scan &1
      │              │    ├── columns: k:26!null v:27 w:28!null x:29 y:30
      │              │    └── mapping:
      │              │         ├──  uniq.k:7 => k:26
      │              │         ├──  uniq.v:8 => v:27
      │              │         ├──  other.w:15 => w:28
      │              │         ├──  other.x:16 => x:29
      │              │         └──  uniq.y:11 => y:30
      │              ├── scan uniq
      │              │    └── columns: uniq.k:20!null uniq.v:21 uniq.w:22 uniq.x:23 uniq.y:24
      │              └── filters
      │                   ├── w:28 = uniq.w:22
      │                   └── k:26 != uniq.k:20
      └── unique-checks-item: uniq(x,y)
           └── project
                ├── columns: x:40 y:41
                └── semi-join (hash)
                     ├── columns: k:37!null v:38 w:39!null x:40 y:41
                     ├── with-scan &1
                     │    ├── columns: k:37!null v:38 w:39!null x:40 y:41
                     │    └── mapping:
                     │         ├──  uniq.k:7 => k:37
                     │         ├──  uniq.v:8 => v:38
                     │         ├──  other.w:15 => w:39
                     │         ├──  other.x:16 => x:40
                     │         └──  uniq.y:11 => y:41
                     ├── scan uniq
                     │    └── columns: uniq.k:31!null uniq.v:32 uniq.w:33 uniq.x:34 uniq.y:35
                     └── filters
                          ├── x:40 = uniq.x:34
                          ├── y:41 = uniq.y:35
                          └── k:37 != uniq.k:31

exec-ddl
CREATE TABLE uniq_overlaps_pk (
  a INT,
  b INT,
  c INT,
  d INT,
  PRIMARY KEY (a, b),
  UNIQUE WITHOUT INDEX (b, c),
  UNIQUE WITHOUT INDEX (a, b, d),
  UNIQUE WITHOUT INDEX (a),
  UNIQUE WITHOUT INDEX (c, d)
)
----

# Update with constant input.
# Add inequality filters for the primary key columns that are not part of each
# unique constraint to prevent rows from matching themselves in the semi join.
build
UPDATE uniq_overlaps_pk SET a = 1, b = 2, c = 3, d = 4 WHERE a = 5
----
update uniq_overlaps_pk
 ├── columns: <none>
 ├── fetch columns: uniq_overlaps_pk.a:6 uniq_overlaps_pk.b:7 uniq_overlaps_pk.c:8 uniq_overlaps_pk.d:9
 ├── update-mapping:
 │    ├── a_new:11 => uniq_overlaps_pk.a:1
 │    ├── b_new:12 => uniq_overlaps_pk.b:2
 │    ├── c_new:13 => uniq_overlaps_pk.c:3
 │    └── d_new:14 => uniq_overlaps_pk.d:4
 ├── input binding: &1
 ├── project
 │    ├── columns: a_new:11!null b_new:12!null c_new:13!null d_new:14!null uniq_overlaps_pk.a:6!null uniq_overlaps_pk.b:7!null uniq_overlaps_pk.c:8 uniq_overlaps_pk.d:9 crdb_internal_mvcc_timestamp:10
 │    ├── select
 │    │    ├── columns: uniq_overlaps_pk.a:6!null uniq_overlaps_pk.b:7!null uniq_overlaps_pk.c:8 uniq_overlaps_pk.d:9 crdb_internal_mvcc_timestamp:10
 │    │    ├── scan uniq_overlaps_pk
 │    │    │    └── columns: uniq_overlaps_pk.a:6!null uniq_overlaps_pk.b:7!null uniq_overlaps_pk.c:8 uniq_overlaps_pk.d:9 crdb_internal_mvcc_timestamp:10
 │    │    └── filters
 │    │         └── uniq_overlaps_pk.a:6 = 5
 │    └── projections
 │         ├── 1 [as=a_new:11]
 │         ├── 2 [as=b_new:12]
 │         ├── 3 [as=c_new:13]
 │         └── 4 [as=d_new:14]
 └── unique-checks
      ├── unique-checks-item: uniq_overlaps_pk(b,c)
      │    └── project
      │         ├── columns: b:21!null c:22!null
      │         └── semi-join (hash)
      │              ├── columns: a:20!null b:21!null c:22!null d:23!null
      │              ├── with-scan &1
      │              │    ├── columns: a:20!null b:21!null c:22!null d:23!null
      │              │    └── mapping:
      │              │         ├──  a_new:11 => a:20
      │              │         ├──  b_new:12 => b:21
      │              │         ├──  c_new:13 => c:22
      │              │         └──  d_new:14 => d:23
      │              ├── scan uniq_overlaps_pk
      │              │    └── columns: uniq_overlaps_pk.a:15!null uniq_overlaps_pk.b:16!null uniq_overlaps_pk.c:17 uniq_overlaps_pk.d:18
      │              └── filters
      │                   ├── b:21 = uniq_overlaps_pk.b:16
      │                   ├── c:22 = uniq_overlaps_pk.c:17
      │                   └── a:20 != uniq_overlaps_pk.a:15
      ├── unique-checks-item: uniq_overlaps_pk(a)
      │    └── project
      │         ├── columns: a:29!null
      │         └── semi-join (hash)
      │              ├── columns: a:29!null b:30!null c:31!null d:32!null
      │              ├── with-scan &1
      │              │    ├── columns: a:29!null b:30!null c:31!null d:32!null
      │              │    └── mapping:
      │              │         ├──  a_new:11 => a:29
      │              │         ├──  b_new:12 => b:30
      │              │         ├──  c_new:13 => c:31
      │              │         └──  d_new:14 => d:32
      │              ├── scan uniq_overlaps_pk
      │              │    └── columns: uniq_overlaps_pk.a:24!null uniq_overlaps_pk.b:25!null uniq_overlaps_pk.c:26 uniq_overlaps_pk.d:27
      │              └── filters
      │                   ├── a:29 = uniq_overlaps_pk.a:24
      │                   └── b:30 != uniq_overlaps_pk.b:25
      └── unique-checks-item: uniq_overlaps_pk(c,d)
           └── project
                ├── columns: c:40!null d:41!null
                └── semi-join (hash)
                     ├── columns: a:38!null b:39!null c:40!null d:41!null
                     ├── with-scan &1
                     │    ├── columns: a:38!null b:39!null c:40!null d:41!null
                     │    └── mapping:
                     │         ├──  a_new:11 => a:38
                     │         ├──  b_new:12 => b:39
                     │         ├──  c_new:13 => c:40
                     │         └──  d_new:14 => d:41
                     ├── scan uniq_overlaps_pk
                     │    └── columns: uniq_overlaps_pk.a:33!null uniq_overlaps_pk.b:34!null uniq_overlaps_pk.c:35 uniq_overlaps_pk.d:36
                     └── filters
                          ├── c:40 = uniq_overlaps_pk.c:35
                          ├── d:41 = uniq_overlaps_pk.d:36
                          └── (a:38 != uniq_overlaps_pk.a:33) OR (b:39 != uniq_overlaps_pk.b:34)

# Update with non-constant input.
# No need to add a check for b,c since those columns weren't updated.
# Add inequality filters for the primary key columns that are not part of each
# unique constraint to prevent rows from matching themselves in the semi join.
build
UPDATE uniq_overlaps_pk SET a = k, d = v FROM other
----
update uniq_overlaps_pk
 ├── columns: <none>
 ├── fetch columns: uniq_overlaps_pk.a:6 uniq_overlaps_pk.b:7 uniq_overlaps_pk.c:8 uniq_overlaps_pk.d:9
 ├── update-mapping:
 │    ├── k:11 => uniq_overlaps_pk.a:1
 │    └── v:12 => uniq_overlaps_pk.d:4
 ├── input binding: &1
 ├── distinct-on
 │    ├── columns: uniq_overlaps_pk.a:6!null uniq_overlaps_pk.b:7!null uniq_overlaps_pk.c:8 uniq_overlaps_pk.d:9 uniq_overlaps_pk.crdb_internal_mvcc_timestamp:10 k:11 v:12 w:13!null x:14 y:15 rowid:16!null other.crdb_internal_mvcc_timestamp:17
 │    ├── grouping columns: uniq_overlaps_pk.a:6!null uniq_overlaps_pk.b:7!null
 │    ├── inner-join (cross)
 │    │    ├── columns: uniq_overlaps_pk.a:6!null uniq_overlaps_pk.b:7!null uniq_overlaps_pk.c:8 uniq_overlaps_pk.d:9 uniq_overlaps_pk.crdb_internal_mvcc_timestamp:10 k:11 v:12 w:13!null x:14 y:15 rowid:16!null other.crdb_internal_mvcc_timestamp:17
 │    │    ├── scan uniq_overlaps_pk
 │    │    │    └── columns: uniq_overlaps_pk.a:6!null uniq_overlaps_pk.b:7!null uniq_overlaps_pk.c:8 uniq_overlaps_pk.d:9 uniq_overlaps_pk.crdb_internal_mvcc_timestamp:10
 │    │    ├── scan other
 │    │    │    └── columns: k:11 v:12 w:13!null x:14 y:15 rowid:16!null other.crdb_internal_mvcc_timestamp:17
 │    │    └── filters (true)
 │    └── aggregations
 │         ├── first-agg [as=uniq_overlaps_pk.c:8]
 │         │    └── uniq_overlaps_pk.c:8
 │         ├── first-agg [as=uniq_overlaps_pk.d:9]
 │         │    └── uniq_overlaps_pk.d:9
 │         ├── first-agg [as=uniq_overlaps_pk.crdb_internal_mvcc_timestamp:10]
 │         │    └── uniq_overlaps_pk.crdb_internal_mvcc_timestamp:10
 │         ├── first-agg [as=k:11]
 │         │    └── k:11
 │         ├── first-agg [as=v:12]
 │         │    └── v:12
 │         ├── first-agg [as=w:13]
 │         │    └── w:13
 │         ├── first-agg [as=x:14]
 │         │    └── x:14
 │         ├── first-agg [as=y:15]
 │         │    └── y:15
 │         ├── first-agg [as=rowid:16]
 │         │    └── rowid:16
 │         └── first-agg [as=other.crdb_internal_mvcc_timestamp:17]
 │              └── other.crdb_internal_mvcc_timestamp:17
 └── unique-checks
      ├── unique-checks-item: uniq_overlaps_pk(a)
      │    └── project
      │         ├── columns: a:23
      │         └── semi-join (hash)
      │              ├── columns: a:23 b:24!null c:25 d:26
      │              ├── with-scan &1
      │              │    ├── columns: a:23 b:24!null c:25 d:26
      │              │    └── mapping:
      │              │         ├──  k:11 => a:23
      │              │         ├──  uniq_overlaps_pk.b:7 => b:24
      │              │         ├──  uniq_overlaps_pk.c:8 => c:25
      │              │         └──  v:12 => d:26
      │              ├── scan uniq_overlaps_pk
      │              │    └── columns: uniq_overlaps_pk.a:18!null uniq_overlaps_pk.b:19!null uniq_overlaps_pk.c:20 uniq_overlaps_pk.d:21
      │              └── filters
      │                   ├── a:23 = uniq_overlaps_pk.a:18
      │                   └── b:24 != uniq_overlaps_pk.b:19
      └── unique-checks-item: uniq_overlaps_pk(c,d)
           └── project
                ├── columns: c:34 d:35
                └── semi-join (hash)
                     ├── columns: a:32 b:33!null c:34 d:35
                     ├── with-scan &1
                     │    ├── columns: a:32 b:33!null c:34 d:35
                     │    └── mapping:
                     │         ├──  k:11 => a:32
                     │         ├──  uniq_overlaps_pk.b:7 => b:33
                     │         ├──  uniq_overlaps_pk.c:8 => c:34
                     │         └──  v:12 => d:35
                     ├── scan uniq_overlaps_pk
                     │    └── columns: uniq_overlaps_pk.a:27!null uniq_overlaps_pk.b:28!null uniq_overlaps_pk.c:29 uniq_overlaps_pk.d:30
                     └── filters
                          ├── c:34 = uniq_overlaps_pk.c:29
                          ├── d:35 = uniq_overlaps_pk.d:30
                          └── (a:32 != uniq_overlaps_pk.a:27) OR (b:33 != uniq_overlaps_pk.b:28)

exec-ddl
CREATE TABLE uniq_hidden_pk (
  a INT,
  b INT,
  c INT,
  d INT,
  UNIQUE WITHOUT INDEX (b, c),
  UNIQUE WITHOUT INDEX (a, b, d),
  UNIQUE WITHOUT INDEX (a)
)
----

# Update with constant input.
# No need to add a check for b,c since those columns weren't updated.
# Add inequality filters for the hidden primary key column.
build
UPDATE uniq_hidden_pk SET a = 1
----
update uniq_hidden_pk
 ├── columns: <none>
 ├── fetch columns: uniq_hidden_pk.a:7 uniq_hidden_pk.b:8 uniq_hidden_pk.c:9 uniq_hidden_pk.d:10 uniq_hidden_pk.rowid:11
 ├── update-mapping:
 │    └── a_new:13 => uniq_hidden_pk.a:1
 ├── input binding: &1
 ├── project
 │    ├── columns: a_new:13!null uniq_hidden_pk.a:7 uniq_hidden_pk.b:8 uniq_hidden_pk.c:9 uniq_hidden_pk.d:10 uniq_hidden_pk.rowid:11!null crdb_internal_mvcc_timestamp:12
 │    ├── scan uniq_hidden_pk
 │    │    └── columns: uniq_hidden_pk.a:7 uniq_hidden_pk.b:8 uniq_hidden_pk.c:9 uniq_hidden_pk.d:10 uniq_hidden_pk.rowid:11!null crdb_internal_mvcc_timestamp:12
 │    └── projections
 │         └── 1 [as=a_new:13]
 └── unique-checks
      ├── unique-checks-item: uniq_hidden_pk(a,b,d)
      │    └── project
      │         ├── columns: a:20!null b:21 d:23
      │         └── semi-join (hash)
      │              ├── columns: a:20!null b:21 c:22 d:23 rowid:24!null
      │              ├── with-scan &1
      │              │    ├── columns: a:20!null b:21 c:22 d:23 rowid:24!null
      │              │    └── mapping:
      │              │         ├──  a_new:13 => a:20
      │              │         ├──  uniq_hidden_pk.b:8 => b:21
      │              │         ├──  uniq_hidden_pk.c:9 => c:22
      │              │         ├──  uniq_hidden_pk.d:10 => d:23
      │              │         └──  uniq_hidden_pk.rowid:11 => rowid:24
      │              ├── scan uniq_hidden_pk
      │              │    └── columns: uniq_hidden_pk.a:14 uniq_hidden_pk.b:15 uniq_hidden_pk.c:16 uniq_hidden_pk.d:17 uniq_hidden_pk.rowid:18!null
      │              └── filters
      │                   ├── a:20 = uniq_hidden_pk.a:14
      │                   ├── b:21 = uniq_hidden_pk.b:15
      │                   ├── d:23 = uniq_hidden_pk.d:17
      │                   └── rowid:24 != uniq_hidden_pk.rowid:18
      └── unique-checks-item: uniq_hidden_pk(a)
           └── project
                ├── columns: a:31!null
                └── semi-join (hash)
                     ├── columns: a:31!null b:32 c:33 d:34 rowid:35!null
                     ├── with-scan &1
                     │    ├── columns: a:31!null b:32 c:33 d:34 rowid:35!null
                     │    └── mapping:
                     │         ├──  a_new:13 => a:31
                     │         ├──  uniq_hidden_pk.b:8 => b:32
                     │         ├──  uniq_hidden_pk.c:9 => c:33
                     │         ├──  uniq_hidden_pk.d:10 => d:34
                     │         └──  uniq_hidden_pk.rowid:11 => rowid:35
                     ├── scan uniq_hidden_pk
                     │    └── columns: uniq_hidden_pk.a:25 uniq_hidden_pk.b:26 uniq_hidden_pk.c:27 uniq_hidden_pk.d:28 uniq_hidden_pk.rowid:29!null
                     └── filters
                          ├── a:31 = uniq_hidden_pk.a:25
                          └── rowid:35 != uniq_hidden_pk.rowid:29

# Update with non-constant input.
# No need to add a check for b,c since those columns weren't updated.
# Add inequality filters for the hidden primary key column.
build
UPDATE uniq_hidden_pk SET a = k FROM other
----
update uniq_hidden_pk
 ├── columns: <none>
 ├── fetch columns: uniq_hidden_pk.a:7 uniq_hidden_pk.b:8 uniq_hidden_pk.c:9 uniq_hidden_pk.d:10 uniq_hidden_pk.rowid:11
 ├── update-mapping:
 │    └── k:13 => uniq_hidden_pk.a:1
 ├── input binding: &1
 ├── inner-join (cross)
 │    ├── columns: uniq_hidden_pk.a:7 uniq_hidden_pk.b:8 uniq_hidden_pk.c:9 uniq_hidden_pk.d:10 uniq_hidden_pk.rowid:11!null uniq_hidden_pk.crdb_internal_mvcc_timestamp:12 k:13 v:14 w:15!null x:16 y:17 other.rowid:18!null other.crdb_internal_mvcc_timestamp:19
 │    ├── scan uniq_hidden_pk
 │    │    └── columns: uniq_hidden_pk.a:7 uniq_hidden_pk.b:8 uniq_hidden_pk.c:9 uniq_hidden_pk.d:10 uniq_hidden_pk.rowid:11!null uniq_hidden_pk.crdb_internal_mvcc_timestamp:12
 │    ├── scan other
 │    │    └── columns: k:13 v:14 w:15!null x:16 y:17 other.rowid:18!null other.crdb_internal_mvcc_timestamp:19
 │    └── filters (true)
 └── unique-checks
      ├── unique-checks-item: uniq_hidden_pk(a,b,d)
      │    └── project
      │         ├── columns: a:26 b:27 d:29
      │         └── semi-join (hash)
      │              ├── columns: a:26 b:27 c:28 d:29 rowid:30!null
      │              ├── with-scan &1
      │              │    ├── columns: a:26 b:27 c:28 d:29 rowid:30!null
      │              │    └── mapping:
      │              │         ├──  k:13 => a:26
      │              │         ├──  uniq_hidden_pk.b:8 => b:27
      │              │         ├──  uniq_hidden_pk.c:9 => c:28
      │              │         ├──  uniq_hidden_pk.d:10 => d:29
      │              │         └──  uniq_hidden_pk.rowid:11 => rowid:30
      │              ├── scan uniq_hidden_pk
      │              │    └── columns: uniq_hidden_pk.a:20 uniq_hidden_pk.b:21 uniq_hidden_pk.c:22 uniq_hidden_pk.d:23 uniq_hidden_pk.rowid:24!null
      │              └── filters
      │                   ├── a:26 = uniq_hidden_pk.a:20
      │                   ├── b:27 = uniq_hidden_pk.b:21
      │                   ├── d:29 = uniq_hidden_pk.d:23
      │                   └── rowid:30 != uniq_hidden_pk.rowid:24
      └── unique-checks-item: uniq_hidden_pk(a)
           └── project
                ├── columns: a:37
                └── semi-join (hash)
                     ├── columns: a:37 b:38 c:39 d:40 rowid:41!null
                     ├── with-scan &1
                     │    ├── columns: a:37 b:38 c:39 d:40 rowid:41!null
                     │    └── mapping:
                     │         ├──  k:13 => a:37
                     │         ├──  uniq_hidden_pk.b:8 => b:38
                     │         ├──  uniq_hidden_pk.c:9 => c:39
                     │         ├──  uniq_hidden_pk.d:10 => d:40
                     │         └──  uniq_hidden_pk.rowid:11 => rowid:41
                     ├── scan uniq_hidden_pk
                     │    └── columns: uniq_hidden_pk.a:31 uniq_hidden_pk.b:32 uniq_hidden_pk.c:33 uniq_hidden_pk.d:34 uniq_hidden_pk.rowid:35!null
                     └── filters
                          ├── a:37 = uniq_hidden_pk.a:31
                          └── rowid:41 != uniq_hidden_pk.rowid:35

exec-ddl
CREATE TABLE uniq_partial (
  k INT PRIMARY KEY,
  a INT,
  b INT,
  c INT,
  UNIQUE WITHOUT INDEX (a) WHERE b > 0
)
----

# None of the updated values have nulls.
build
UPDATE uniq_partial SET a = 1
----
update uniq_partial
 ├── columns: <none>
 ├── fetch columns: uniq_partial.k:6 uniq_partial.a:7 uniq_partial.b:8 uniq_partial.c:9
 ├── update-mapping:
 │    └── a_new:11 => uniq_partial.a:2
 ├── input binding: &1
 ├── project
 │    ├── columns: a_new:11!null uniq_partial.k:6!null uniq_partial.a:7 uniq_partial.b:8 uniq_partial.c:9 crdb_internal_mvcc_timestamp:10
 │    ├── scan uniq_partial
 │    │    └── columns: uniq_partial.k:6!null uniq_partial.a:7 uniq_partial.b:8 uniq_partial.c:9 crdb_internal_mvcc_timestamp:10
 │    └── projections
 │         └── 1 [as=a_new:11]
 └── unique-checks
      └── unique-checks-item: uniq_partial(a)
           └── project
                ├── columns: a:18!null
                └── semi-join (hash)
                     ├── columns: k:17!null a:18!null b:19 c:20
                     ├── with-scan &1
                     │    ├── columns: k:17!null a:18!null b:19 c:20
                     │    └── mapping:
                     │         ├──  uniq_partial.k:6 => k:17
                     │         ├──  a_new:11 => a:18
                     │         ├──  uniq_partial.b:8 => b:19
                     │         └──  uniq_partial.c:9 => c:20
                     ├── scan uniq_partial
                     │    └── columns: uniq_partial.k:12!null uniq_partial.a:13 uniq_partial.b:14 uniq_partial.c:15
                     └── filters
                          ├── a:18 = uniq_partial.a:13
                          ├── b:19 > 0
                          ├── uniq_partial.b:14 > 0
                          └── k:17 != uniq_partial.k:12

# Plan a check when a column in the predicate is updated.
build
UPDATE uniq_partial SET b = 1
----
update uniq_partial
 ├── columns: <none>
 ├── fetch columns: uniq_partial.k:6 uniq_partial.a:7 uniq_partial.b:8 uniq_partial.c:9
 ├── update-mapping:
 │    └── b_new:11 => uniq_partial.b:3
 ├── input binding: &1
 ├── project
 │    ├── columns: b_new:11!null uniq_partial.k:6!null uniq_partial.a:7 uniq_partial.b:8 uniq_partial.c:9 crdb_internal_mvcc_timestamp:10
 │    ├── scan uniq_partial
 │    │    └── columns: uniq_partial.k:6!null uniq_partial.a:7 uniq_partial.b:8 uniq_partial.c:9 crdb_internal_mvcc_timestamp:10
 │    └── projections
 │         └── 1 [as=b_new:11]
 └── unique-checks
      └── unique-checks-item: uniq_partial(a)
           └── project
                ├── columns: a:18
                └── semi-join (hash)
                     ├── columns: k:17!null a:18 b:19!null c:20
                     ├── with-scan &1
                     │    ├── columns: k:17!null a:18 b:19!null c:20
                     │    └── mapping:
                     │         ├──  uniq_partial.k:6 => k:17
                     │         ├──  uniq_partial.a:7 => a:18
                     │         ├──  b_new:11 => b:19
                     │         └──  uniq_partial.c:9 => c:20
                     ├── scan uniq_partial
                     │    └── columns: uniq_partial.k:12!null uniq_partial.a:13 uniq_partial.b:14 uniq_partial.c:15
                     └── filters
                          ├── a:18 = uniq_partial.a:13
                          ├── b:19 > 0
                          ├── uniq_partial.b:14 > 0
                          └── k:17 != uniq_partial.k:12

# No need to plan checks for a since it's always null.
build
UPDATE uniq_partial SET a = NULL, b = 1
----
update uniq_partial
 ├── columns: <none>
 ├── fetch columns: k:6 a:7 b:8 c:9
 ├── update-mapping:
 │    ├── a_new:11 => a:2
 │    └── b_new:12 => b:3
 └── project
      ├── columns: a_new:11 b_new:12!null k:6!null a:7 b:8 c:9 crdb_internal_mvcc_timestamp:10
      ├── scan uniq_partial
      │    └── columns: k:6!null a:7 b:8 c:9 crdb_internal_mvcc_timestamp:10
      └── projections
           ├── NULL::INT8 [as=a_new:11]
           └── 1 [as=b_new:12]

# No need to plan checks for a since it's always null.
# Also update the primary key.
build
UPDATE uniq_partial SET k = 1, a = NULL, b = 1
----
update uniq_partial
 ├── columns: <none>
 ├── fetch columns: k:6 a:7 b:8 c:9
 ├── update-mapping:
 │    ├── k_new:11 => k:1
 │    ├── a_new:12 => a:2
 │    └── k_new:11 => b:3
 └── project
      ├── columns: k_new:11!null a_new:12 k:6!null a:7 b:8 c:9 crdb_internal_mvcc_timestamp:10
      ├── scan uniq_partial
      │    └── columns: k:6!null a:7 b:8 c:9 crdb_internal_mvcc_timestamp:10
      └── projections
           ├── 1 [as=k_new:11]
           └── NULL::INT8 [as=a_new:12]

# No need to plan checks since none of the columns in the unique constraint or
# its predicate are updated.
build
UPDATE uniq_partial SET c = 2
----
update uniq_partial
 ├── columns: <none>
 ├── fetch columns: k:6 a:7 b:8 c:9
 ├── update-mapping:
 │    └── c_new:11 => c:4
 └── project
      ├── columns: c_new:11!null k:6!null a:7 b:8 c:9 crdb_internal_mvcc_timestamp:10
      ├── scan uniq_partial
      │    └── columns: k:6!null a:7 b:8 c:9 crdb_internal_mvcc_timestamp:10
      └── projections
           └── 2 [as=c_new:11]

# Update with non-constant input.
build
UPDATE uniq_partial SET a = other.w, b = other.x FROM other
----
update uniq_partial
 ├── columns: <none>
 ├── fetch columns: uniq_partial.k:6 uniq_partial.a:7 uniq_partial.b:8 uniq_partial.c:9
 ├── update-mapping:
 │    ├── w:13 => uniq_partial.a:2
 │    └── x:14 => uniq_partial.b:3
 ├── input binding: &1
 ├── distinct-on
 │    ├── columns: uniq_partial.k:6!null uniq_partial.a:7 uniq_partial.b:8 uniq_partial.c:9 uniq_partial.crdb_internal_mvcc_timestamp:10 other.k:11 v:12 w:13!null x:14 y:15 rowid:16!null other.crdb_internal_mvcc_timestamp:17
 │    ├── grouping columns: uniq_partial.k:6!null
 │    ├── inner-join (cross)
 │    │    ├── columns: uniq_partial.k:6!null uniq_partial.a:7 uniq_partial.b:8 uniq_partial.c:9 uniq_partial.crdb_internal_mvcc_timestamp:10 other.k:11 v:12 w:13!null x:14 y:15 rowid:16!null other.crdb_internal_mvcc_timestamp:17
 │    │    ├── scan uniq_partial
 │    │    │    └── columns: uniq_partial.k:6!null uniq_partial.a:7 uniq_partial.b:8 uniq_partial.c:9 uniq_partial.crdb_internal_mvcc_timestamp:10
 │    │    ├── scan other
 │    │    │    └── columns: other.k:11 v:12 w:13!null x:14 y:15 rowid:16!null other.crdb_internal_mvcc_timestamp:17
 │    │    └── filters (true)
 │    └── aggregations
 │         ├── first-agg [as=uniq_partial.a:7]
 │         │    └── uniq_partial.a:7
 │         ├── first-agg [as=uniq_partial.b:8]
 │         │    └── uniq_partial.b:8
 │         ├── first-agg [as=uniq_partial.c:9]
 │         │    └── uniq_partial.c:9
 │         ├── first-agg [as=uniq_partial.crdb_internal_mvcc_timestamp:10]
 │         │    └── uniq_partial.crdb_internal_mvcc_timestamp:10
 │         ├── first-agg [as=other.k:11]
 │         │    └── other.k:11
 │         ├── first-agg [as=v:12]
 │         │    └── v:12
 │         ├── first-agg [as=w:13]
 │         │    └── w:13
 │         ├── first-agg [as=x:14]
 │         │    └── x:14
 │         ├── first-agg [as=y:15]
 │         │    └── y:15
 │         ├── first-agg [as=rowid:16]
 │         │    └── rowid:16
 │         └── first-agg [as=other.crdb_internal_mvcc_timestamp:17]
 │              └── other.crdb_internal_mvcc_timestamp:17
 └── unique-checks
      └── unique-checks-item: uniq_partial(a)
           └── project
                ├── columns: a:24!null
                └── semi-join (hash)
                     ├── columns: k:23!null a:24!null b:25 c:26
                     ├── with-scan &1
                     │    ├── columns: k:23!null a:24!null b:25 c:26
                     │    └── mapping:
                     │         ├──  uniq_partial.k:6 => k:23
                     │         ├──  w:13 => a:24
                     │         ├──  x:14 => b:25
                     │         └──  uniq_partial.c:9 => c:26
                     ├── scan uniq_partial
                     │    └── columns: uniq_partial.k:18!null uniq_partial.a:19 uniq_partial.b:20 uniq_partial.c:21
                     └── filters
                          ├── a:24 = uniq_partial.a:19
                          ├── b:25 > 0
                          ├── uniq_partial.b:20 > 0
                          └── k:23 != uniq_partial.k:18

exec-ddl
CREATE TABLE uniq_partial_overlaps_pk (
  a INT,
  b INT,
  c INT,
  d INT,
  PRIMARY KEY (a, b),
  UNIQUE WITHOUT INDEX (c) WHERE d > 0,
  UNIQUE WITHOUT INDEX (a) WHERE d > 0,
  UNIQUE WITHOUT INDEX (a, b) WHERE d > 0,
  UNIQUE WITHOUT INDEX (b, c) WHERE d > 0,
  UNIQUE WITHOUT INDEX (a, b, c) WHERE d > 0
)
----

# Update with constant input.
# Do not build uniqueness checks when the primary key columns are a subset of
# the partial unique constraint columns.
# Add inequality filters for the primary key columns that are not part of each
# unique constraint to prevent rows from matching themselves in the semi join.
build
UPDATE uniq_partial_overlaps_pk SET a = 1, b = 2, c = 3, d = 4 WHERE a = 5
----
update uniq_partial_overlaps_pk
 ├── columns: <none>
 ├── fetch columns: uniq_partial_overlaps_pk.a:6 uniq_partial_overlaps_pk.b:7 uniq_partial_overlaps_pk.c:8 uniq_partial_overlaps_pk.d:9
 ├── update-mapping:
 │    ├── a_new:11 => uniq_partial_overlaps_pk.a:1
 │    ├── b_new:12 => uniq_partial_overlaps_pk.b:2
 │    ├── c_new:13 => uniq_partial_overlaps_pk.c:3
 │    └── d_new:14 => uniq_partial_overlaps_pk.d:4
 ├── input binding: &1
 ├── project
 │    ├── columns: a_new:11!null b_new:12!null c_new:13!null d_new:14!null uniq_partial_overlaps_pk.a:6!null uniq_partial_overlaps_pk.b:7!null uniq_partial_overlaps_pk.c:8 uniq_partial_overlaps_pk.d:9 crdb_internal_mvcc_timestamp:10
 │    ├── select
 │    │    ├── columns: uniq_partial_overlaps_pk.a:6!null uniq_partial_overlaps_pk.b:7!null uniq_partial_overlaps_pk.c:8 uniq_partial_overlaps_pk.d:9 crdb_internal_mvcc_timestamp:10
 │    │    ├── scan uniq_partial_overlaps_pk
 │    │    │    └── columns: uniq_partial_overlaps_pk.a:6!null uniq_partial_overlaps_pk.b:7!null uniq_partial_overlaps_pk.c:8 uniq_partial_overlaps_pk.d:9 crdb_internal_mvcc_timestamp:10
 │    │    └── filters
 │    │         └── uniq_partial_overlaps_pk.a:6 = 5
 │    └── projections
 │         ├── 1 [as=a_new:11]
 │         ├── 2 [as=b_new:12]
 │         ├── 3 [as=c_new:13]
 │         └── 4 [as=d_new:14]
 └── unique-checks
      ├── unique-checks-item: uniq_partial_overlaps_pk(c)
      │    └── project
      │         ├── columns: c:22!null
      │         └── semi-join (hash)
      │              ├── columns: a:20!null b:21!null c:22!null d:23!null
      │              ├── with-scan &1
      │              │    ├── columns: a:20!null b:21!null c:22!null d:23!null
      │              │    └── mapping:
      │              │         ├──  a_new:11 => a:20
      │              │         ├──  b_new:12 => b:21
      │              │         ├──  c_new:13 => c:22
      │              │         └──  d_new:14 => d:23
      │              ├── scan uniq_partial_overlaps_pk
      │              │    └── columns: uniq_partial_overlaps_pk.a:15!null uniq_partial_overlaps_pk.b:16!null uniq_partial_overlaps_pk.c:17 uniq_partial_overlaps_pk.d:18
      │              └── filters
      │                   ├── c:22 = uniq_partial_overlaps_pk.c:17
      │                   ├── d:23 > 0
      │                   ├── uniq_partial_overlaps_pk.d:18 > 0
      │                   └── (a:20 != uniq_partial_overlaps_pk.a:15) OR (b:21 != uniq_partial_overlaps_pk.b:16)
      ├── unique-checks-item: uniq_partial_overlaps_pk(a)
      │    └── project
      │         ├── columns: a:29!null
      │         └── semi-join (hash)
      │              ├── columns: a:29!null b:30!null c:31!null d:32!null
      │              ├── with-scan &1
      │              │    ├── columns: a:29!null b:30!null c:31!null d:32!null
      │              │    └── mapping:
      │              │         ├──  a_new:11 => a:29
      │              │         ├──  b_new:12 => b:30
      │              │         ├──  c_new:13 => c:31
      │              │         └──  d_new:14 => d:32
      │              ├── scan uniq_partial_overlaps_pk
      │              │    └── columns: uniq_partial_overlaps_pk.a:24!null uniq_partial_overlaps_pk.b:25!null uniq_partial_overlaps_pk.c:26 uniq_partial_overlaps_pk.d:27
      │              └── filters
      │                   ├── a:29 = uniq_partial_overlaps_pk.a:24
      │                   ├── d:32 > 0
      │                   ├── uniq_partial_overlaps_pk.d:27 > 0
      │                   └── b:30 != uniq_partial_overlaps_pk.b:25
      └── unique-checks-item: uniq_partial_overlaps_pk(b,c)
           └── project
                ├── columns: b:39!null c:40!null
                └── semi-join (hash)
                     ├── columns: a:38!null b:39!null c:40!null d:41!null
                     ├── with-scan &1
                     │    ├── columns: a:38!null b:39!null c:40!null d:41!null
                     │    └── mapping:
                     │         ├──  a_new:11 => a:38
                     │         ├──  b_new:12 => b:39
                     │         ├──  c_new:13 => c:40
                     │         └──  d_new:14 => d:41
                     ├── scan uniq_partial_overlaps_pk
                     │    └── columns: uniq_partial_overlaps_pk.a:33!null uniq_partial_overlaps_pk.b:34!null uniq_partial_overlaps_pk.c:35 uniq_partial_overlaps_pk.d:36
                     └── filters
                          ├── b:39 = uniq_partial_overlaps_pk.b:34
                          ├── c:40 = uniq_partial_overlaps_pk.c:35
                          ├── d:41 > 0
                          ├── uniq_partial_overlaps_pk.d:36 > 0
                          └── a:38 != uniq_partial_overlaps_pk.a:33

# Update with non-constant input.
# Do not build uniqueness checks when the primary key columns are a subset of
# the partial unique constraint columns.
# No need to add a check for b,c since those columns weren't updated.
# Add inequality filters for the primary key columns that are not part of each
# unique constraint to prevent rows from matching themselves in the semi join.
build
UPDATE uniq_partial_overlaps_pk SET a = k FROM other
----
update uniq_partial_overlaps_pk
 ├── columns: <none>
 ├── fetch columns: uniq_partial_overlaps_pk.a:6 uniq_partial_overlaps_pk.b:7 uniq_partial_overlaps_pk.c:8 uniq_partial_overlaps_pk.d:9
 ├── update-mapping:
 │    └── k:11 => uniq_partial_overlaps_pk.a:1
 ├── input binding: &1
 ├── distinct-on
 │    ├── columns: uniq_partial_overlaps_pk.a:6!null uniq_partial_overlaps_pk.b:7!null uniq_partial_overlaps_pk.c:8 uniq_partial_overlaps_pk.d:9 uniq_partial_overlaps_pk.crdb_internal_mvcc_timestamp:10 k:11 v:12 w:13!null x:14 y:15 rowid:16!null other.crdb_internal_mvcc_timestamp:17
 │    ├── grouping columns: uniq_partial_overlaps_pk.a:6!null uniq_partial_overlaps_pk.b:7!null
 │    ├── inner-join (cross)
 │    │    ├── columns: uniq_partial_overlaps_pk.a:6!null uniq_partial_overlaps_pk.b:7!null uniq_partial_overlaps_pk.c:8 uniq_partial_overlaps_pk.d:9 uniq_partial_overlaps_pk.crdb_internal_mvcc_timestamp:10 k:11 v:12 w:13!null x:14 y:15 rowid:16!null other.crdb_internal_mvcc_timestamp:17
 │    │    ├── scan uniq_partial_overlaps_pk
 │    │    │    └── columns: uniq_partial_overlaps_pk.a:6!null uniq_partial_overlaps_pk.b:7!null uniq_partial_overlaps_pk.c:8 uniq_partial_overlaps_pk.d:9 uniq_partial_overlaps_pk.crdb_internal_mvcc_timestamp:10
 │    │    ├── scan other
 │    │    │    └── columns: k:11 v:12 w:13!null x:14 y:15 rowid:16!null other.crdb_internal_mvcc_timestamp:17
 │    │    └── filters (true)
 │    └── aggregations
 │         ├── first-agg [as=uniq_partial_overlaps_pk.c:8]
 │         │    └── uniq_partial_overlaps_pk.c:8
 │         ├── first-agg [as=uniq_partial_overlaps_pk.d:9]
 │         │    └── uniq_partial_overlaps_pk.d:9
 │         ├── first-agg [as=uniq_partial_overlaps_pk.crdb_internal_mvcc_timestamp:10]
 │         │    └── uniq_partial_overlaps_pk.crdb_internal_mvcc_timestamp:10
 │         ├── first-agg [as=k:11]
 │         │    └── k:11
 │         ├── first-agg [as=v:12]
 │         │    └── v:12
 │         ├── first-agg [as=w:13]
 │         │    └── w:13
 │         ├── first-agg [as=x:14]
 │         │    └── x:14
 │         ├── first-agg [as=y:15]
 │         │    └── y:15
 │         ├── first-agg [as=rowid:16]
 │         │    └── rowid:16
 │         └── first-agg [as=other.crdb_internal_mvcc_timestamp:17]
 │              └── other.crdb_internal_mvcc_timestamp:17
 └── unique-checks
      └── unique-checks-item: uniq_partial_overlaps_pk(a)
           └── project
                ├── columns: a:23
                └── semi-join (hash)
                     ├── columns: a:23 b:24!null c:25 d:26
                     ├── with-scan &1
                     │    ├── columns: a:23 b:24!null c:25 d:26
                     │    └── mapping:
                     │         ├──  k:11 => a:23
                     │         ├──  uniq_partial_overlaps_pk.b:7 => b:24
                     │         ├──  uniq_partial_overlaps_pk.c:8 => c:25
                     │         └──  uniq_partial_overlaps_pk.d:9 => d:26
                     ├── scan uniq_partial_overlaps_pk
                     │    └── columns: uniq_partial_overlaps_pk.a:18!null uniq_partial_overlaps_pk.b:19!null uniq_partial_overlaps_pk.c:20 uniq_partial_overlaps_pk.d:21
                     └── filters
                          ├── a:23 = uniq_partial_overlaps_pk.a:18
                          ├── d:26 > 0
                          ├── uniq_partial_overlaps_pk.d:21 > 0
                          └── b:24 != uniq_partial_overlaps_pk.b:19

exec-ddl
CREATE TABLE uniq_partial_hidden_pk (
  a INT,
  b INT,
  UNIQUE WITHOUT INDEX (a) WHERE b > 0
)
----

# Update with constant input.
# Add inequality filters for the hidden primary key column.
build
UPDATE uniq_partial_hidden_pk SET a = 1
----
update uniq_partial_hidden_pk
 ├── columns: <none>
 ├── fetch columns: uniq_partial_hidden_pk.a:5 uniq_partial_hidden_pk.b:6 uniq_partial_hidden_pk.rowid:7
 ├── update-mapping:
 │    └── a_new:9 => uniq_partial_hidden_pk.a:1
 ├── input binding: &1
 ├── project
 │    ├── columns: a_new:9!null uniq_partial_hidden_pk.a:5 uniq_partial_hidden_pk.b:6 uniq_partial_hidden_pk.rowid:7!null crdb_internal_mvcc_timestamp:8
 │    ├── scan uniq_partial_hidden_pk
 │    │    └── columns: uniq_partial_hidden_pk.a:5 uniq_partial_hidden_pk.b:6 uniq_partial_hidden_pk.rowid:7!null crdb_internal_mvcc_timestamp:8
 │    └── projections
 │         └── 1 [as=a_new:9]
 └── unique-checks
      └── unique-checks-item: uniq_partial_hidden_pk(a)
           └── project
                ├── columns: a:14!null
                └── semi-join (hash)
                     ├── columns: a:14!null b:15 rowid:16!null
                     ├── with-scan &1
                     │    ├── columns: a:14!null b:15 rowid:16!null
                     │    └── mapping:
                     │         ├──  a_new:9 => a:14
                     │         ├──  uniq_partial_hidden_pk.b:6 => b:15
                     │         └──  uniq_partial_hidden_pk.rowid:7 => rowid:16
                     ├── scan uniq_partial_hidden_pk
                     │    └── columns: uniq_partial_hidden_pk.a:10 uniq_partial_hidden_pk.b:11 uniq_partial_hidden_pk.rowid:12!null
                     └── filters
                          ├── a:14 = uniq_partial_hidden_pk.a:10
                          ├── b:15 > 0
                          ├── uniq_partial_hidden_pk.b:11 > 0
                          └── rowid:16 != uniq_partial_hidden_pk.rowid:12

# Update with non-constant input.
# Add inequality filters for the hidden primary key column.
build
UPDATE uniq_partial_hidden_pk SET a = k FROM other
----
update uniq_partial_hidden_pk
 ├── columns: <none>
 ├── fetch columns: uniq_partial_hidden_pk.a:5 uniq_partial_hidden_pk.b:6 uniq_partial_hidden_pk.rowid:7
 ├── update-mapping:
 │    └── k:9 => uniq_partial_hidden_pk.a:1
 ├── input binding: &1
 ├── inner-join (cross)
 │    ├── columns: uniq_partial_hidden_pk.a:5 uniq_partial_hidden_pk.b:6 uniq_partial_hidden_pk.rowid:7!null uniq_partial_hidden_pk.crdb_internal_mvcc_timestamp:8 k:9 v:10 w:11!null x:12 y:13 other.rowid:14!null other.crdb_internal_mvcc_timestamp:15
 │    ├── scan uniq_partial_hidden_pk
 │    │    └── columns: uniq_partial_hidden_pk.a:5 uniq_partial_hidden_pk.b:6 uniq_partial_hidden_pk.rowid:7!null uniq_partial_hidden_pk.crdb_internal_mvcc_timestamp:8
 │    ├── scan other
 │    │    └── columns: k:9 v:10 w:11!null x:12 y:13 other.rowid:14!null other.crdb_internal_mvcc_timestamp:15
 │    └── filters (true)
 └── unique-checks
      └── unique-checks-item: uniq_partial_hidden_pk(a)
           └── project
                ├── columns: a:20
                └── semi-join (hash)
                     ├── columns: a:20 b:21 rowid:22!null
                     ├── with-scan &1
                     │    ├── columns: a:20 b:21 rowid:22!null
                     │    └── mapping:
                     │         ├──  k:9 => a:20
                     │         ├──  uniq_partial_hidden_pk.b:6 => b:21
                     │         └──  uniq_partial_hidden_pk.rowid:7 => rowid:22
                     ├── scan uniq_partial_hidden_pk
                     │    └── columns: uniq_partial_hidden_pk.a:16 uniq_partial_hidden_pk.b:17 uniq_partial_hidden_pk.rowid:18!null
                     └── filters
                          ├── a:20 = uniq_partial_hidden_pk.a:16
                          ├── b:21 > 0
                          ├── uniq_partial_hidden_pk.b:17 > 0
                          └── rowid:22 != uniq_partial_hidden_pk.rowid:18

exec-ddl
CREATE TABLE uniq_computed_pk (
  i INT,
  s STRING,
  d DECIMAL,
  c_i_expr STRING AS (CASE WHEN i < 0 THEN 'foo' ELSE 'bar' END) STORED,
  c_s STRING AS (s) VIRTUAL,
  c_d DECIMAL AS (d) STORED,
  c_d_expr STRING AS (d::string) STORED,
  PRIMARY KEY (c_i_expr, i),
  UNIQUE (c_s, s),
  UNIQUE (c_d_expr, d),
  UNIQUE WITHOUT INDEX (i),
  UNIQUE WITHOUT INDEX (s),
  UNIQUE WITHOUT INDEX (d)
)
----

# We can eliminate uniqueness checks for i and s due to functional dependencies.
# We cannot eliminate checks for d, since functional dependencies could not be
# inferred due to composite sensitivity of d::string.
build
UPDATE uniq_computed_pk SET i=1, s='a', d=1.0
----
update uniq_computed_pk
 ├── columns: <none>
 ├── fetch columns: uniq_computed_pk.i:9 uniq_computed_pk.s:10 uniq_computed_pk.d:11 uniq_computed_pk.c_i_expr:12 uniq_computed_pk.c_s:13 uniq_computed_pk.c_d:14 uniq_computed_pk.c_d_expr:15
 ├── update-mapping:
 │    ├── i_new:17 => uniq_computed_pk.i:1
 │    ├── s_new:18 => uniq_computed_pk.s:2
 │    ├── d_new:19 => uniq_computed_pk.d:3
 │    ├── column20:20 => uniq_computed_pk.c_i_expr:4
 │    ├── s_new:18 => uniq_computed_pk.c_s:5
 │    ├── d_new:19 => uniq_computed_pk.c_d:6
 │    └── column21:21 => uniq_computed_pk.c_d_expr:7
 ├── input binding: &1
 ├── project
 │    ├── columns: column20:20!null column21:21!null uniq_computed_pk.i:9!null uniq_computed_pk.s:10 uniq_computed_pk.d:11 uniq_computed_pk.c_i_expr:12!null uniq_computed_pk.c_s:13 uniq_computed_pk.c_d:14 uniq_computed_pk.c_d_expr:15 crdb_internal_mvcc_timestamp:16 i_new:17!null s_new:18!null d_new:19!null
 │    ├── project
 │    │    ├── columns: i_new:17!null s_new:18!null d_new:19!null uniq_computed_pk.i:9!null uniq_computed_pk.s:10 uniq_computed_pk.d:11 uniq_computed_pk.c_i_expr:12!null uniq_computed_pk.c_s:13 uniq_computed_pk.c_d:14 uniq_computed_pk.c_d_expr:15 crdb_internal_mvcc_timestamp:16
 │    │    ├── project
 │    │    │    ├── columns: uniq_computed_pk.c_s:13 uniq_computed_pk.i:9!null uniq_computed_pk.s:10 uniq_computed_pk.d:11 uniq_computed_pk.c_i_expr:12!null uniq_computed_pk.c_d:14 uniq_computed_pk.c_d_expr:15 crdb_internal_mvcc_timestamp:16
 │    │    │    ├── scan uniq_computed_pk
 │    │    │    │    ├── columns: uniq_computed_pk.i:9!null uniq_computed_pk.s:10 uniq_computed_pk.d:11 uniq_computed_pk.c_i_expr:12!null uniq_computed_pk.c_d:14 uniq_computed_pk.c_d_expr:15 crdb_internal_mvcc_timestamp:16
 │    │    │    │    └── computed column expressions
 │    │    │    │         ├── uniq_computed_pk.c_i_expr:12
 │    │    │    │         │    └── CASE WHEN uniq_computed_pk.i:9 < 0 THEN 'foo' ELSE 'bar' END
 │    │    │    │         ├── uniq_computed_pk.c_s:13
 │    │    │    │         │    └── uniq_computed_pk.s:10
 │    │    │    │         ├── uniq_computed_pk.c_d:14
 │    │    │    │         │    └── uniq_computed_pk.d:11
 │    │    │    │         └── uniq_computed_pk.c_d_expr:15
 │    │    │    │              └── uniq_computed_pk.d:11::STRING
 │    │    │    └── projections
 │    │    │         └── uniq_computed_pk.s:10 [as=uniq_computed_pk.c_s:13]
 │    │    └── projections
 │    │         ├── 1 [as=i_new:17]
 │    │         ├── 'a' [as=s_new:18]
 │    │         └── 1.0 [as=d_new:19]
 │    └── projections
 │         ├── CASE WHEN i_new:17 < 0 THEN 'foo' ELSE 'bar' END [as=column20:20]
 │         └── d_new:19::STRING [as=column21:21]
 └── unique-checks
      └── unique-checks-item: uniq_computed_pk(d)
           └── project
                ├── columns: d:48!null
                └── semi-join (hash)
                     ├── columns: i:46!null s:47!null d:48!null c_i_expr:49!null c_s:50!null c_d:51!null c_d_expr:52!null
                     ├── with-scan &1
                     │    ├── columns: i:46!null s:47!null d:48!null c_i_expr:49!null c_s:50!null c_d:51!null c_d_expr:52!null
                     │    └── mapping:
                     │         ├──  i_new:17 => i:46
                     │         ├──  s_new:18 => s:47
                     │         ├──  d_new:19 => d:48
                     │         ├──  column20:20 => c_i_expr:49
                     │         ├──  s_new:18 => c_s:50
                     │         ├──  d_new:19 => c_d:51
                     │         └──  column21:21 => c_d_expr:52
                     ├── project
                     │    ├── columns: uniq_computed_pk.c_s:42 uniq_computed_pk.i:38!null uniq_computed_pk.s:39 uniq_computed_pk.d:40 uniq_computed_pk.c_i_expr:41!null uniq_computed_pk.c_d:43 uniq_computed_pk.c_d_expr:44
                     │    ├── scan uniq_computed_pk
                     │    │    ├── columns: uniq_computed_pk.i:38!null uniq_computed_pk.s:39 uniq_computed_pk.d:40 uniq_computed_pk.c_i_expr:41!null uniq_computed_pk.c_d:43 uniq_computed_pk.c_d_expr:44
                     │    │    └── computed column expressions
                     │    │         ├── uniq_computed_pk.c_i_expr:41
                     │    │         │    └── CASE WHEN uniq_computed_pk.i:38 < 0 THEN 'foo' ELSE 'bar' END
                     │    │         ├── uniq_computed_pk.c_s:42
                     │    │         │    └── uniq_computed_pk.s:39
                     │    │         ├── uniq_computed_pk.c_d:43
                     │    │         │    └── uniq_computed_pk.d:40
                     │    │         └── uniq_computed_pk.c_d_expr:44
                     │    │              └── uniq_computed_pk.d:40::STRING
                     │    └── projections
                     │         └── uniq_computed_pk.s:39 [as=uniq_computed_pk.c_s:42]
                     └── filters
                          ├── d:48 = uniq_computed_pk.d:40
                          └── (i:46 != uniq_computed_pk.i:38) OR (c_i_expr:49 != uniq_computed_pk.c_i_expr:41)
