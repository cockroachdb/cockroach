optsteps
SELECT 1
----
================================================================================
Initial expression
  Cost: 0.05
================================================================================
  project
   ├── columns: "?column?":1(int!null)
   ├── cardinality: [1 - 1]
   ├── key: ()
   ├── fd: ()-->(1)
   ├── values
   │    ├── cardinality: [1 - 1]
   │    ├── key: ()
   │    └── tuple [type=tuple]
   └── projections
        └── const: 1 [type=int]
================================================================================
MergeProjectWithValues
  Cost: 0.02
================================================================================
  -project
  +values
    ├── columns: "?column?":1(int!null)
    ├── cardinality: [1 - 1]
    ├── key: ()
    ├── fd: ()-->(1)
  - ├── values
  - │    ├── cardinality: [1 - 1]
  - │    ├── key: ()
  - │    └── tuple [type=tuple]
  - └── projections
  + └── tuple [type=tuple{int}]
         └── const: 1 [type=int]
================================================================================
Final best expression
  Cost: 0.02
================================================================================
  values
   ├── columns: "?column?":1(int!null)
   ├── cardinality: [1 - 1]
   ├── key: ()
   ├── fd: ()-->(1)
   └── tuple [type=tuple{int}]
        └── const: 1 [type=int]

exec-ddl
CREATE TABLE ab (a INT PRIMARY KEY, b INT, INDEX(b))
----

optsteps
SELECT * FROM ab WHERE b=1
----
================================================================================
Initial expression
  Cost: 1050.03
================================================================================
  select
   ├── columns: a:1(int!null) b:2(int!null)
   ├── key: (1)
   ├── fd: ()-->(2)
   ├── scan ab
   │    ├── columns: a:1(int!null) b:2(int)
   │    ├── key: (1)
   │    └── fd: (1)-->(2)
   └── filters
        └── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
             ├── variable: b [type=int]
             └── const: 1 [type=int]
--------------------------------------------------------------------------------
GenerateIndexScans (higher cost)
--------------------------------------------------------------------------------
   select
    ├── columns: a:1(int!null) b:2(int!null)
    ├── key: (1)
    ├── fd: ()-->(2)
  - ├── scan ab
  + ├── scan ab@secondary
    │    ├── columns: a:1(int!null) b:2(int)
    │    ├── key: (1)
    │    └── fd: (1)-->(2)
    └── filters
         └── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
              ├── variable: b [type=int]
              └── const: 1 [type=int]
--------------------------------------------------------------------------------
GenerateZigzagJoins (no changes)
--------------------------------------------------------------------------------
================================================================================
GenerateConstrainedScans
  Cost: 10.41
================================================================================
  -select
  +scan ab@secondary
    ├── columns: a:1(int!null) b:2(int!null)
  + ├── constraint: /2/1: [/1 - /1]
    ├── key: (1)
  - ├── fd: ()-->(2)
  - ├── scan ab
  - │    ├── columns: a:1(int!null) b:2(int)
  - │    ├── key: (1)
  - │    └── fd: (1)-->(2)
  - └── filters
  -      └── eq [type=bool, outer=(2), constraints=(/2: [/1 - /1]; tight), fd=()-->(2)]
  -           ├── variable: b [type=int]
  -           └── const: 1 [type=int]
  + └── fd: ()-->(2)
================================================================================
Final best expression
  Cost: 10.41
================================================================================
  scan ab@secondary
   ├── columns: a:1(int!null) b:2(int!null)
   ├── constraint: /2/1: [/1 - /1]
   ├── key: (1)
   └── fd: ()-->(2)

exec-ddl
CREATE TABLE customers (                        
    id INT8 NOT NULL,                           
    name STRING NOT NULL,                       
    address STRING NULL,                        
    CONSTRAINT "primary" PRIMARY KEY (id ASC),  
    FAMILY "primary" (id, name, address)        
)                                               
----

exec-ddl
CREATE TABLE orders (                                                                                       
    id INT8 NOT NULL,                                                                                       
    customer_id INT8 NULL,                                                                                  
    status STRING NOT NULL,                                                                                 
    CONSTRAINT "primary" PRIMARY KEY (id ASC),                                                              
    CONSTRAINT fk_customer_id_ref_customers FOREIGN KEY (customer_id) REFERENCES customers(id),             
    INDEX orders_auto_index_fk_customer_id_ref_customers (customer_id ASC),                                 
    FAMILY "primary" (id, customer_id, status),                                                             
    CONSTRAINT check_status CHECK (status IN ('open':::STRING, 'complete':::STRING, 'cancelled':::STRING))  
)                                                                                                           
----

# Verify that we don't crash when a normalization rule runs on a constraint
# expression that is attached to the TableMeta but otherwise not used.
# In this example, the rule is NormalizeInConst.
optsteps
SELECT * FROM orders LEFT JOIN customers ON customer_id = customers.id
----
================================================================================
Initial expression
  Cost: 2160.05
================================================================================
  left-join (hash)
   ├── columns: id:1(int!null) customer_id:2(int) status:3(string!null) id:4(int) name:5(string) address:6(string)
   ├── key: (1,4)
   ├── fd: (1)-->(2,3), (4)-->(5,6)
   ├── scan orders
   │    ├── columns: orders.id:1(int!null) customer_id:2(int) status:3(string!null)
   │    ├── check constraint expressions
   │    │    └── in [type=bool]
   │    │         ├── variable: status [type=string]
   │    │         └── tuple [type=tuple{string, string, string}]
   │    │              ├── const: 'open' [type=string]
   │    │              ├── const: 'complete' [type=string]
   │    │              └── const: 'cancelled' [type=string]
   │    ├── key: (1)
   │    └── fd: (1)-->(2,3)
   ├── scan customers
   │    ├── columns: customers.id:4(int!null) name:5(string!null) address:6(string)
   │    ├── key: (4)
   │    └── fd: (4)-->(5,6)
   └── filters
        └── eq [type=bool, outer=(2,4), constraints=(/2: (/NULL - ]; /4: (/NULL - ]), fd=(2)==(4), (4)==(2)]
             ├── variable: customer_id [type=int]
             └── variable: customers.id [type=int]
================================================================================
NormalizeInConst
  Cost: 2160.05
================================================================================
   left-join (hash)
    ├── columns: id:1(int!null) customer_id:2(int) status:3(string!null) id:4(int) name:5(string) address:6(string)
    ├── key: (1,4)
    ├── fd: (1)-->(2,3), (4)-->(5,6)
    ├── scan orders
    │    ├── columns: orders.id:1(int!null) customer_id:2(int) status:3(string!null)
    │    ├── check constraint expressions
    │    │    └── in [type=bool]
    │    │         ├── variable: status [type=string]
    │    │         └── tuple [type=tuple{string, string, string}]
  - │    │              ├── const: 'open' [type=string]
  + │    │              ├── const: 'cancelled' [type=string]
    │    │              ├── const: 'complete' [type=string]
  - │    │              └── const: 'cancelled' [type=string]
  + │    │              └── const: 'open' [type=string]
    │    ├── key: (1)
    │    └── fd: (1)-->(2,3)
    ├── scan customers
    │    ├── columns: customers.id:4(int!null) name:5(string!null) address:6(string)
    │    ├── key: (4)
    │    └── fd: (4)-->(5,6)
    └── filters
         └── eq [type=bool, outer=(2,4), constraints=(/2: (/NULL - ]; /4: (/NULL - ]), fd=(2)==(4), (4)==(2)]
              ├── variable: customer_id [type=int]
              └── variable: customers.id [type=int]
--------------------------------------------------------------------------------
GenerateIndexScans (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
GenerateIndexScans (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
CommuteLeftJoin (higher cost)
--------------------------------------------------------------------------------
  -left-join (hash)
  +right-join (hash)
    ├── columns: id:1(int!null) customer_id:2(int) status:3(string!null) id:4(int) name:5(string) address:6(string)
    ├── key: (1,4)
    ├── fd: (1)-->(2,3), (4)-->(5,6)
  + ├── scan customers
  + │    ├── columns: customers.id:4(int!null) name:5(string!null) address:6(string)
  + │    ├── key: (4)
  + │    └── fd: (4)-->(5,6)
    ├── scan orders
    │    ├── columns: orders.id:1(int!null) customer_id:2(int) status:3(string!null)
    │    ├── check constraint expressions
    │    │    └── in [type=bool]
    │    │         ├── variable: status [type=string]
    │    │         └── tuple [type=tuple{string, string, string}]
    │    │              ├── const: 'cancelled' [type=string]
    │    │              ├── const: 'complete' [type=string]
    │    │              └── const: 'open' [type=string]
    │    ├── key: (1)
    │    └── fd: (1)-->(2,3)
  - ├── scan customers
  - │    ├── columns: customers.id:4(int!null) name:5(string!null) address:6(string)
  - │    ├── key: (4)
  - │    └── fd: (4)-->(5,6)
    └── filters
         └── eq [type=bool, outer=(2,4), constraints=(/2: (/NULL - ]; /4: (/NULL - ]), fd=(2)==(4), (4)==(2)]
              ├── variable: customer_id [type=int]
              └── variable: customers.id [type=int]
--------------------------------------------------------------------------------
GenerateMergeJoins (no changes)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
GenerateLookupJoins (higher cost)
--------------------------------------------------------------------------------
  -left-join (hash)
  +left-join (lookup customers)
    ├── columns: id:1(int!null) customer_id:2(int) status:3(string!null) id:4(int) name:5(string) address:6(string)
  + ├── key columns: [2] = [4]
  + ├── lookup columns are key
    ├── key: (1,4)
    ├── fd: (1)-->(2,3), (4)-->(5,6)
    ├── scan orders
    │    ├── columns: orders.id:1(int!null) customer_id:2(int) status:3(string!null)
    │    ├── check constraint expressions
    │    │    └── in [type=bool]
    │    │         ├── variable: status [type=string]
    │    │         └── tuple [type=tuple{string, string, string}]
    │    │              ├── const: 'cancelled' [type=string]
    │    │              ├── const: 'complete' [type=string]
    │    │              └── const: 'open' [type=string]
    │    ├── key: (1)
    │    └── fd: (1)-->(2,3)
  - ├── scan customers
  - │    ├── columns: customers.id:4(int!null) name:5(string!null) address:6(string)
  - │    ├── key: (4)
  - │    └── fd: (4)-->(5,6)
  - └── filters
  -      └── eq [type=bool, outer=(2,4), constraints=(/2: (/NULL - ]; /4: (/NULL - ]), fd=(2)==(4), (4)==(2)]
  -           ├── variable: customer_id [type=int]
  -           └── variable: customers.id [type=int]
  + └── filters (true)
--------------------------------------------------------------------------------
GenerateMergeJoins (higher cost)
--------------------------------------------------------------------------------
  -left-join (lookup customers)
  +right-join (merge)
    ├── columns: id:1(int!null) customer_id:2(int) status:3(string!null) id:4(int) name:5(string) address:6(string)
  - ├── key columns: [2] = [4]
  - ├── lookup columns are key
  + ├── left ordering: +4
  + ├── right ordering: +2
    ├── key: (1,4)
    ├── fd: (1)-->(2,3), (4)-->(5,6)
  - ├── scan orders
  + ├── scan customers
  + │    ├── columns: customers.id:4(int!null) name:5(string!null) address:6(string)
  + │    ├── key: (4)
  + │    ├── fd: (4)-->(5,6)
  + │    └── ordering: +4
  + ├── sort
    │    ├── columns: orders.id:1(int!null) customer_id:2(int) status:3(string!null)
  - │    ├── check constraint expressions
  - │    │    └── in [type=bool]
  - │    │         ├── variable: status [type=string]
  - │    │         └── tuple [type=tuple{string, string, string}]
  - │    │              ├── const: 'cancelled' [type=string]
  - │    │              ├── const: 'complete' [type=string]
  - │    │              └── const: 'open' [type=string]
    │    ├── key: (1)
  - │    └── fd: (1)-->(2,3)
  + │    ├── fd: (1)-->(2,3)
  + │    ├── ordering: +2
  + │    └── scan orders
  + │         ├── columns: orders.id:1(int!null) customer_id:2(int) status:3(string!null)
  + │         ├── check constraint expressions
  + │         │    └── in [type=bool]
  + │         │         ├── variable: status [type=string]
  + │         │         └── tuple [type=tuple{string, string, string}]
  + │         │              ├── const: 'cancelled' [type=string]
  + │         │              ├── const: 'complete' [type=string]
  + │         │              └── const: 'open' [type=string]
  + │         ├── key: (1)
  + │         └── fd: (1)-->(2,3)
    └── filters (true)
================================================================================
Final best expression
  Cost: 2160.05
================================================================================
  left-join (hash)
   ├── columns: id:1(int!null) customer_id:2(int) status:3(string!null) id:4(int) name:5(string) address:6(string)
   ├── key: (1,4)
   ├── fd: (1)-->(2,3), (4)-->(5,6)
   ├── scan orders
   │    ├── columns: orders.id:1(int!null) customer_id:2(int) status:3(string!null)
   │    ├── check constraint expressions
   │    │    └── in [type=bool]
   │    │         ├── variable: status [type=string]
   │    │         └── tuple [type=tuple{string, string, string}]
   │    │              ├── const: 'cancelled' [type=string]
   │    │              ├── const: 'complete' [type=string]
   │    │              └── const: 'open' [type=string]
   │    ├── key: (1)
   │    └── fd: (1)-->(2,3)
   ├── scan customers
   │    ├── columns: customers.id:4(int!null) name:5(string!null) address:6(string)
   │    ├── key: (4)
   │    └── fd: (4)-->(5,6)
   └── filters
        └── eq [type=bool, outer=(2,4), constraints=(/2: (/NULL - ]; /4: (/NULL - ]), fd=(2)==(4), (4)==(2)]
             ├── variable: customer_id [type=int]
             └── variable: customers.id [type=int]
