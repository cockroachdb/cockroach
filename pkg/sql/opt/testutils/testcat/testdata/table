exec-ddl
CREATE TABLE kv (
    k INT PRIMARY KEY,
    v INT
)
----

exec-ddl
SHOW CREATE kv
----
TABLE kv
 ├── k int not null
 ├── v int
 ├── crdb_internal_mvcc_timestamp decimal [hidden] [system]
 ├── tableoid oid [hidden] [system]
 └── PRIMARY INDEX primary
      └── k int not null

exec-ddl
CREATE TABLE abcdef (
    a INT NOT NULL,
    b INT,
    c INT DEFAULT (10),
    d INT AS (b + c + 1) STORED,
    e INT AS (a) STORED,
    f INT CHECK (f > 2),
    g INT AS (a+b) VIRTUAL,
    h INT ON UPDATE 3
)
----

exec-ddl
SHOW CREATE abcdef
----
TABLE abcdef
 ├── a int not null
 ├── b int
 ├── c int default ((10))
 ├── d int as ((b + c) + 1) stored
 ├── e int as (a) stored
 ├── f int
 ├── g int as (a + b) virtual
 ├── h int on update (3)
 ├── rowid int not null default (unique_rowid()) [hidden]
 ├── crdb_internal_mvcc_timestamp decimal [hidden] [system]
 ├── tableoid oid [hidden] [system]
 ├── CHECK (f > 2)
 └── PRIMARY INDEX primary
      └── rowid int not null default (unique_rowid()) [hidden]

exec-ddl
CREATE TABLE uvwxy (
    u INT,
    v INT,
    w INT,
    x INT,
    y INT,
    PRIMARY KEY (u,v),
    FAMILY (u,v,w),
    FAMILY (x),
    FAMILY (y)
)
----


exec-ddl
SHOW CREATE uvwxy
----
TABLE uvwxy
 ├── u int not null
 ├── v int not null
 ├── w int
 ├── x int
 ├── y int
 ├── crdb_internal_mvcc_timestamp decimal [hidden] [system]
 ├── tableoid oid [hidden] [system]
 ├── FAMILY family1 (u, v, w, crdb_internal_mvcc_timestamp, tableoid)
 ├── FAMILY family2 (x)
 ├── FAMILY family3 (y)
 └── PRIMARY INDEX primary
      ├── u int not null
      └── v int not null

exec-ddl
CREATE TABLE a (a INT UNIQUE)
----

exec-ddl
SHOW CREATE a
----
TABLE a
 ├── a int
 ├── rowid int not null default (unique_rowid()) [hidden]
 ├── crdb_internal_mvcc_timestamp decimal [hidden] [system]
 ├── tableoid oid [hidden] [system]
 ├── PRIMARY INDEX primary
 │    └── rowid int not null default (unique_rowid()) [hidden]
 └── UNIQUE INDEX a_a_key
      ├── a int
      └── rowid int not null default (unique_rowid()) [hidden] (storing)

exec-ddl
CREATE TABLE part1 (a INT PRIMARY KEY, b INT) PARTITION BY LIST (a) (
  PARTITION p1 VALUES IN (1),
  PARTITION p2 VALUES IN (3, 4, 5),
  PARTITION p3 VALUES IN (DEFAULT)
)
----

exec-ddl
SHOW CREATE part1
----
TABLE part1
 ├── a int not null
 ├── b int
 ├── crdb_internal_mvcc_timestamp decimal [hidden] [system]
 ├── tableoid oid [hidden] [system]
 └── PRIMARY INDEX primary
      ├── a int not null
      └── partitions
           ├── p1
           │    └── partition by list prefixes
           │         └── (1)
           ├── p2
           │    └── partition by list prefixes
           │         ├── (3)
           │         ├── (4)
           │         └── (5)
           └── p3
                └── partition by list prefixes

exec-ddl
CREATE TABLE part2 (
  a STRING,
  b STRING,
  c INT,
  PRIMARY KEY(a,b,c),
  INDEX (c) PARTITION BY LIST (c) (
    PARTITION pi1 VALUES IN (1),
    PARTITION pi2 VALUES IN (3, 4)
  )
) PARTITION BY LIST (a, b) (
  PARTITION p1 VALUES IN (('foo', 'bar'), ('foo', 'baz'), ('qux', 'qux')),
  PARTITION p2 VALUES IN (('waldo', DEFAULT)),
  PARTITION p3 VALUES IN (DEFAULT)
)
----

exec-ddl
SHOW CREATE part2
----
TABLE part2
 ├── a string not null
 ├── b string not null
 ├── c int not null
 ├── crdb_internal_mvcc_timestamp decimal [hidden] [system]
 ├── tableoid oid [hidden] [system]
 ├── PRIMARY INDEX primary
 │    ├── a string not null
 │    ├── b string not null
 │    ├── c int not null
 │    └── partitions
 │         ├── p1
 │         │    └── partition by list prefixes
 │         │         ├── ('foo', 'bar')
 │         │         ├── ('foo', 'baz')
 │         │         └── ('qux', 'qux')
 │         ├── p2
 │         │    └── partition by list prefixes
 │         │         └── ('waldo')
 │         └── p3
 │              └── partition by list prefixes
 └── INDEX secondary
      ├── c int not null
      ├── a string not null
      ├── b string not null
      └── partitions
           ├── pi1
           │    └── partition by list prefixes
           │         └── (1)
           └── pi2
                └── partition by list prefixes
                     ├── (3)
                     └── (4)

exec-ddl
CREATE TABLE inv (
  k INT PRIMARY KEY,
  a INT,
  j JSONB,
  g GEOMETRY,
  INVERTED INDEX(j),
  INVERTED INDEX(g)
)
----

exec-ddl
SHOW CREATE inv
----
TABLE inv
 ├── k int not null
 ├── a int
 ├── j jsonb
 ├── g geometry
 ├── crdb_internal_mvcc_timestamp decimal [hidden] [system]
 ├── tableoid oid [hidden] [system]
 ├── j_inverted_key jsonb not null [inverted]
 ├── g_inverted_key geometry not null [inverted]
 ├── PRIMARY INDEX primary
 │    └── k int not null
 ├── INVERTED INDEX secondary
 │    ├── j_inverted_key jsonb not null [inverted]
 │    └── k int not null
 └── INVERTED INDEX secondary
      ├── g_inverted_key geometry not null [inverted]
      └── k int not null

# Table with inverted indexes and implicit primary index.
exec-ddl
CREATE TABLE inv2 (
  a INT,
  j JSONB,
  g GEOMETRY,
  INVERTED INDEX(j),
  INVERTED INDEX(g)
)
----

exec-ddl
SHOW CREATE inv2
----
TABLE inv2
 ├── a int
 ├── j jsonb
 ├── g geometry
 ├── rowid int not null default (unique_rowid()) [hidden]
 ├── crdb_internal_mvcc_timestamp decimal [hidden] [system]
 ├── tableoid oid [hidden] [system]
 ├── j_inverted_key jsonb not null [inverted]
 ├── g_inverted_key geometry not null [inverted]
 ├── PRIMARY INDEX primary
 │    └── rowid int not null default (unique_rowid()) [hidden]
 ├── INVERTED INDEX secondary
 │    ├── j_inverted_key jsonb not null [inverted]
 │    └── rowid int not null default (unique_rowid()) [hidden]
 └── INVERTED INDEX secondary
      ├── g_inverted_key geometry not null [inverted]
      └── rowid int not null default (unique_rowid()) [hidden]

# Table with unique constraints.
exec-ddl
CREATE TABLE uniq (
  i INT UNIQUE,
  j STRING UNIQUE WITHOUT INDEX,
  k STRING CHECK (k IN ('foo', 'bar', 'baz')),
  l INT,
  m STRING,
  UNIQUE INDEX (k, j),
  UNIQUE WITHOUT INDEX (l, m),
  UNIQUE WITHOUT INDEX (m, l),
  UNIQUE WITHOUT INDEX (l) WHERE l > 0
)
----

exec-ddl
SHOW CREATE uniq
----
TABLE uniq
 ├── i int
 ├── j string
 ├── k string
 ├── l int
 ├── m string
 ├── rowid int not null default (unique_rowid()) [hidden]
 ├── crdb_internal_mvcc_timestamp decimal [hidden] [system]
 ├── tableoid oid [hidden] [system]
 ├── CHECK (k IN ('foo', 'bar', 'baz'))
 ├── PRIMARY INDEX primary
 │    └── rowid int not null default (unique_rowid()) [hidden]
 ├── UNIQUE INDEX uniq_i_key
 │    ├── i int
 │    └── rowid int not null default (unique_rowid()) [hidden] (storing)
 ├── UNIQUE INDEX secondary
 │    ├── k string
 │    ├── j string
 │    └── rowid int not null default (unique_rowid()) [hidden] (storing)
 ├── UNIQUE WITHOUT INDEX (j)
 ├── UNIQUE WITHOUT INDEX (l, m)
 └── UNIQUE WITHOUT INDEX (l)
      └── WHERE l > 0

exec-ddl
CREATE TABLE mutations (
  a INT,
  "b:inaccessible" INT,
  "c:write-only" INT,
  "d:delete-only" INT,
  "v:inaccessible" INT AS (a+1) VIRTUAL,
  INDEX "idxa:write-only" (a),
  INDEX "idxb:delete-only" (b)
)
----

exec-ddl
SHOW CREATE mutations
----
TABLE mutations
 ├── a int
 ├── b int [inaccessible]
 ├── v int as (a + 1) virtual [inaccessible]
 ├── rowid int not null default (unique_rowid()) [hidden]
 ├── c int [write-only]
 ├── d int [delete-only]
 ├── crdb_internal_mvcc_timestamp decimal [hidden] [system]
 ├── tableoid oid [hidden] [system]
 ├── PRIMARY INDEX primary
 │    └── rowid int not null default (unique_rowid()) [hidden]
 ├── INDEX idxa (mutation)
 │    ├── a int
 │    └── rowid int not null default (unique_rowid()) [hidden]
 └── INDEX idxb (mutation)
      ├── b int [inaccessible]
      └── rowid int not null default (unique_rowid()) [hidden]

# Table with generated_as_identity constraints.
exec-ddl
CREATE TABLE generated_as_identity (
  a INT,
  b INT GENERATED ALWAYS AS IDENTITY,
  c INT GENERATED BY DEFAULT AS IDENTITY
)
----

exec-ddl
SHOW CREATE generated_as_identity
----
TABLE generated_as_identity
 ├── a int
 ├── b int not null generated always as identity
 ├── c int not null generated by default as identity
 ├── rowid int not null default (unique_rowid()) [hidden]
 ├── crdb_internal_mvcc_timestamp decimal [hidden] [system]
 ├── tableoid oid [hidden] [system]
 └── PRIMARY INDEX primary
      └── rowid int not null default (unique_rowid()) [hidden]

# Table with generated_as_identity constraints and sequence option.
exec-ddl
CREATE TABLE generated_as_identity_seq_opt (
  a INT,
  b INT GENERATED ALWAYS AS IDENTITY (START 2 INCREMENT 3 CACHE 10),
  c INT GENERATED BY DEFAULT AS IDENTITY (START 3 INCREMENT 4 CACHE 11)
)
----

exec-ddl
SHOW CREATE generated_as_identity_seq_opt
----
TABLE generated_as_identity_seq_opt
 ├── a int
 ├── b int not null generated always as identity (START 2 INCREMENT 3 CACHE 10)
 ├── c int not null generated by default as identity (START 3 INCREMENT 4 CACHE 11)
 ├── rowid int not null default (unique_rowid()) [hidden]
 ├── crdb_internal_mvcc_timestamp decimal [hidden] [system]
 ├── tableoid oid [hidden] [system]
 └── PRIMARY INDEX primary
      └── rowid int not null default (unique_rowid()) [hidden]
