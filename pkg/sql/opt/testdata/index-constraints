build-scalar,normalize,index-constraints vars=(int) index=(@1)
NULL
----

build-scalar,normalize,index-constraints vars=(int) index=(@1)
false
----

build-scalar,normalize,index-constraints vars=(int) index=(@1)
true
----
[ - ]

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1
----
[ - ]
Remaining filter:
variable (0) (type: int)

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 > 2
----
[/3 - ]

build-scalar,normalize,index-constraints vars=(int) index=(@1 desc)
@1 > 2
----
[ - /3]

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 >= 2
----
[/2 - ]

build-scalar,normalize,index-constraints vars=(int) index=(@1 desc)
@1 >= 2
----
[ - /2]

build-scalar,normalize,index-constraints vars=(int) index=(@1 not null)
@1 != 2
----
[ - /1]
[/3 - ]

build-scalar,normalize,index-constraints vars=(int) index=(@1 desc not null)
@1 != 2
----
[ - /3]
[/1 - ]

build-scalar,normalize,index-constraints vars=(int) index=(@1 not null)
@1 < 2
----
[ - /1]

build-scalar,normalize,index-constraints vars=(int) index=(@1 desc not null)
@1 < 2
----
[/1 - ]

build-scalar,normalize,index-constraints vars=(int) index=(@1 not null)
@1 = 2
----
[/2 - /2]

build-scalar,normalize,index-constraints vars=(int) index=(@1 desc not null)
@1 = 2
----
[/2 - /2]

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 != 2
----
(/NULL - /1]
[/3 - ]

build-scalar,normalize,index-constraints vars=(int) index=(@1 desc)
@1 != 2
----
[ - /3]
[/1 - /NULL)

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 < 2
----
(/NULL - /1]

build-scalar,normalize,index-constraints vars=(int) index=(@1 desc)
@1 < 2
----
[/1 - /NULL)

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 = 2
----
[/2 - /2]

build-scalar,normalize,index-constraints vars=(int) index=(@1 desc)
@1 = 2
----
[/2 - /2]

build-scalar,normalize,index-constraints vars=(int) index=(@1)
NULL
----

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 > NULL
----

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 < NULL
----

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 >= NULL
----

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 >= NULL
----

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 = NULL
----

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 != NULL
----

build-scalar,normalize,index-constraints vars=(int, int) index=(@1)
@1 = 1 AND @2 = 2
----
[/1 - /1]
Remaining filter:
eq (type: bool)
 ├── variable (1) (type: int)
 └── const (2) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@2)
@1 = 1 AND @2 = 2
----
[/2 - /2]
Remaining filter:
eq (type: bool)
 ├── variable (0) (type: int)
 └── const (1) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 = 1 AND @2 > NULL
----

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@2 = 1 AND @1 > NULL
----

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 > 2 AND @1 < 4
----
[/3 - /3]

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 >= 2 AND @1 <= 4
----
[/2 - /4]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 > 2 AND @2 > 5
----
[/3/6 - ]
Remaining filter:
gt (type: bool)
 ├── variable (1) (type: int)
 └── const (5) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2 desc)
@1 > 2 AND @2 < 5
----
[/3/4 - ]
Remaining filter:
lt (type: bool)
 ├── variable (1) (type: int)
 └── const (5) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 != 1 AND @2 > 5
----
(/NULL - /0]
[/2/6 - ]
Remaining filter:
gt (type: bool)
 ├── variable (1) (type: int)
 └── const (5) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 != 1 AND @2 < 5
----
(/NULL - /0/4]
(/2/NULL - ]
Remaining filter:
lt (type: bool)
 ├── variable (1) (type: int)
 └── const (5) (type: int)

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 >= 1 AND @1 <= 5 AND @1 != 3
----
[/1 - /2]
[/4 - /5]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 >= 1 AND @1 <= 2 AND @2 >= 8 AND @2 <= 9
----
[/1/8 - /2/9]
Remaining filter:
and (type: bool)
 ├── ge (type: bool)
 │    ├── variable (1) (type: int)
 │    └── const (8) (type: int)
 └── le (type: bool)
      ├── variable (1) (type: int)
      └── const (9) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1 desc, @2)
@1 >= 1 AND @1 <= 2 AND @2 >= 8 AND @2 <= 9
----
[/2/8 - /1/9]
Remaining filter:
and (type: bool)
 ├── ge (type: bool)
 │    ├── variable (1) (type: int)
 │    └── const (8) (type: int)
 └── le (type: bool)
      ├── variable (1) (type: int)
      └── const (9) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2 desc)
@1 >= 1 AND @1 <= 2 AND @2 >= 8 AND @2 <= 9
----
[/1/9 - /2/8]
Remaining filter:
and (type: bool)
 ├── ge (type: bool)
 │    ├── variable (1) (type: int)
 │    └── const (8) (type: int)
 └── le (type: bool)
      ├── variable (1) (type: int)
      └── const (9) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 > 1 AND @1 < 4 AND @2 > 5 AND @2 < 8
----
[/2/6 - /3/7]
Remaining filter:
and (type: bool)
 ├── gt (type: bool)
 │    ├── variable (1) (type: int)
 │    └── const (5) (type: int)
 └── lt (type: bool)
      ├── variable (1) (type: int)
      └── const (8) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 > 1 AND @1 < 4 AND @2 = 5
----
[/2/5 - /3/5]
Remaining filter:
eq (type: bool)
 ├── variable (1) (type: int)
 └── const (5) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 = 1 AND @2 > 3 AND @2 < 5
----
[/1/4 - /1/4]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 = 1 AND @2 > 3 AND @2 < 8
----
[/1/4 - /1/7]

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 > 2 AND @1 < 1
----

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 = 1 AND @2 != 2
----
(/1/NULL - /1/1]
[/1/3 - /1]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 >= 1 AND @1 <= 5 AND @2 != 2
----
(/1/NULL - /5]
Remaining filter:
ne (type: bool)
 ├── variable (1) (type: int)
 └── const (2) (type: int)

# Tests with a type that doesn't support Prev.
build-scalar,normalize,index-constraints vars=(string) index=(@1)
@1 > 'a' AND @1 < 'z'
----
[/e'a\x00' - /'z')

build-scalar,normalize,index-constraints vars=(string, int) index=(@1, @2)
@1 > 'a' AND @1 < 'z' AND @2 = 5
----
[/e'a\x00'/5 - /'z')
Remaining filter:
eq (type: bool)
 ├── variable (1) (type: int)
 └── const (5) (type: int)

build-scalar,normalize,index-constraints vars=(string) index=(@1 desc)
@1 > 'a' AND @1 < 'z'
----
(/'z' - /e'a\x00']

build-scalar,normalize,index-constraints vars=(string, int) index=(@1 desc, @2)
@1 > 'a' AND @1 < 'z' AND @2 = 5
----
(/'z' - /e'a\x00'/5]
Remaining filter:
eq (type: bool)
 ├── variable (1) (type: int)
 └── const (5) (type: int)

# Tests with a type that doesn't support Next or Prev.
build-scalar,normalize,index-constraints vars=(decimal) index=(@1)
@1 > 1.5
----
(/1.5 - ]

build-scalar,normalize,index-constraints vars=(decimal) index=(@1)
@1 > 1.5 AND @1 < 2
----
(/1.5 - /2)

# Note the difference here between decimal and int: we
# can't extend the exclusive start key.
build-scalar,normalize,index-constraints vars=(decimal, decimal) index=(@1, @2)
@1 > 1.5 AND @2 > 2
----
(/1.5 - ]
Remaining filter:
gt (type: bool)
 ├── variable (1) (type: decimal)
 └── const (2) (type: decimal)

# Tests with variable IN tuple.

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 IN (1, 2, 3)
----
[/1 - /1]
[/2 - /2]
[/3 - /3]

build-scalar,normalize,index-constraints vars=(int) index=(@1 desc)
@1 IN (1, 2, 3)
----
[/3 - /3]
[/2 - /2]
[/1 - /1]

legacy-normalize,build-scalar,index-constraints vars=(int) index=(@1)
@1 IN (1, 5, 1, 4)
----
[/1 - /1]
[/4 - /4]
[/5 - /5]

legacy-normalize,build-scalar,index-constraints vars=(int) index=(@1 desc)
@1 IN (1, 5, 1, 4)
----
[/5 - /5]
[/4 - /4]
[/1 - /1]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 = 1 AND @2 IN (1, 2, 3)
----
[/1/1 - /1/1]
[/1/2 - /1/2]
[/1/3 - /1/3]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2 desc)
@1 = 1 AND @2 IN (1, 2, 3)
----
[/1/3 - /1/3]
[/1/2 - /1/2]
[/1/1 - /1/1]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 IN (1, 2) AND @2 IN (1, 2, 3)
----
[/1/1 - /1/1]
[/1/2 - /1/2]
[/1/3 - /1/3]
[/2/1 - /2/1]
[/2/2 - /2/2]
[/2/3 - /2/3]
Remaining filter:
in (type: bool)
 ├── variable (1) (type: int)
 └── ordered-list (type: tuple{int, int, int})
      ├── const (1) (type: int)
      ├── const (2) (type: int)
      └── const (3) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1 desc, @2 desc)
@1 IN (1, 2) AND @2 IN (1, 2, 3)
----
[/2/3 - /2/3]
[/2/2 - /2/2]
[/2/1 - /2/1]
[/1/3 - /1/3]
[/1/2 - /1/2]
[/1/1 - /1/1]
Remaining filter:
in (type: bool)
 ├── variable (1) (type: int)
 └── ordered-list (type: tuple{int, int, int})
      ├── const (1) (type: int)
      ├── const (2) (type: int)
      └── const (3) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 >= 2 AND @1 <= 4 AND @2 IN (1, 2, 3)
----
[/2/1 - /4/3]
Remaining filter:
in (type: bool)
 ├── variable (1) (type: int)
 └── ordered-list (type: tuple{int, int, int})
      ├── const (1) (type: int)
      ├── const (2) (type: int)
      └── const (3) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1 desc, @2 desc)
@1 >= 2 AND @1 <= 4 AND @2 IN (1, 2, 3)
----
[/4/3 - /2/1]
Remaining filter:
in (type: bool)
 ├── variable (1) (type: int)
 └── ordered-list (type: tuple{int, int, int})
      ├── const (1) (type: int)
      ├── const (2) (type: int)
      └── const (3) (type: int)


build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 IN (1, 2, 3) AND @2 = 4
----
[/1/4 - /1/4]
[/2/4 - /2/4]
[/3/4 - /3/4]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1 desc, @2)
@1 IN (1, 2, 3) AND @2 = 4
----
[/3/4 - /3/4]
[/2/4 - /2/4]
[/1/4 - /1/4]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2 desc)
@1 IN (1, 2, 3) AND @2 = 4
----
[/1/4 - /1/4]
[/2/4 - /2/4]
[/3/4 - /3/4]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 IN (1, 2, 3) AND @2 >= 2 AND @2 <= 4
----
[/1/2 - /1/4]
[/2/2 - /2/4]
[/3/2 - /3/4]

# Tests with tuple equality.

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
(@1, @2, @3) = (1, 2, 3)
----
[/1/2/3 - /1/2/3]

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @3)
(@1, @2, @3) = (1, 2, 3)
----
[/1/3 - /1/3]
Remaining filter:
eq (type: bool)
 ├── variable (1) (type: int)
 └── const (2) (type: int)

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@3, @2)
(@1, @2, @3) = (1, 2, 3)
----
[/3/2 - /3/2]
Remaining filter:
eq (type: bool)
 ├── variable (0) (type: int)
 └── const (1) (type: int)

build-scalar,normalize,index-constraints vars=(int, int, int, int, int) index=(@1, @2, @3, @4, @5)
(@1, @2, 3, (4, @5)) = (1, 2, @3, (@4, 5))
----
[/1/2/3/4/5 - /1/2/3/4/5]

build-scalar,normalize,index-constraints vars=(int, int, int, int) index=(@1, @2, @3, @4)
(@1, @2, @3) = (1, 2, 3) AND @4 > 4
----
[/1/2/3/5 - /1/2/3]

build-scalar,normalize,index-constraints vars=(int, int, int, int) index=(@1, @2, @3, @4)
@1 > 5 AND @1 < 10 AND (@2, @3, @4) = (2, 3, 4)
----
[/6/2/3/4 - /9/2/3/4]
Remaining filter:
and (type: bool)
 ├── eq (type: bool)
 │    ├── variable (1) (type: int)
 │    └── const (2) (type: int)
 ├── eq (type: bool)
 │    ├── variable (2) (type: int)
 │    └── const (3) (type: int)
 └── eq (type: bool)
      ├── variable (3) (type: int)
      └── const (4) (type: int)

build-scalar,normalize,index-constraints vars=(int, int, int, int) index=(@1 desc, @2 desc, @3 desc, @4 desc)
@1 > 5 AND @1 < 10 AND (@2, @3, @4) = (2, 3, 4)
----
[/9/2/3/4 - /6/2/3/4]
Remaining filter:
and (type: bool)
 ├── eq (type: bool)
 │    ├── variable (1) (type: int)
 │    └── const (2) (type: int)
 ├── eq (type: bool)
 │    ├── variable (2) (type: int)
 │    └── const (3) (type: int)
 └── eq (type: bool)
      ├── variable (3) (type: int)
      └── const (4) (type: int)

# Tests with tuple inequalities.

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
(@1, @2, @3) >= (1, 2, 3)
----
[/1/2/3 - ]

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
(@1, @2, @3) >= (1, 2, @1)
----
[/1/2 - ]
Remaining filter:
ge (type: bool)
 ├── ordered-list (type: tuple{int, int, int})
 │    ├── variable (0) (type: int)
 │    ├── variable (1) (type: int)
 │    └── variable (2) (type: int)
 └── ordered-list (type: tuple{int, int, int})
      ├── const (1) (type: int)
      ├── const (2) (type: int)
      └── variable (0) (type: int)

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
(@1, @2, @3) > (1, 2, 3)
----
[/1/2/4 - ]

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
(@1, @2, @3) > (1, 2, @1)
----
[/1/2 - ]
Remaining filter:
gt (type: bool)
 ├── ordered-list (type: tuple{int, int, int})
 │    ├── variable (0) (type: int)
 │    ├── variable (1) (type: int)
 │    └── variable (2) (type: int)
 └── ordered-list (type: tuple{int, int, int})
      ├── const (1) (type: int)
      ├── const (2) (type: int)
      └── variable (0) (type: int)

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
(@1, @2, @3) <= (1, 2, 3)
----
[ - /1/2/3]

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
(@1, @2, @3) <= (1, 2, @1)
----
[ - /1/2]
Remaining filter:
le (type: bool)
 ├── ordered-list (type: tuple{int, int, int})
 │    ├── variable (0) (type: int)
 │    ├── variable (1) (type: int)
 │    └── variable (2) (type: int)
 └── ordered-list (type: tuple{int, int, int})
      ├── const (1) (type: int)
      ├── const (2) (type: int)
      └── variable (0) (type: int)

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
(@1, @2, @3) < (1, 2, 3)
----
[ - /1/2/2]

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
(@1, @2, @3) < (1, 2, @1)
----
[ - /1/2]
Remaining filter:
lt (type: bool)
 ├── ordered-list (type: tuple{int, int, int})
 │    ├── variable (0) (type: int)
 │    ├── variable (1) (type: int)
 │    └── variable (2) (type: int)
 └── ordered-list (type: tuple{int, int, int})
      ├── const (1) (type: int)
      ├── const (2) (type: int)
      └── variable (0) (type: int)

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
(@1, @2, @3) != (1, 2, 3)
----
[ - /1/2/2]
[/1/2/4 - ]

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
(@1, @2, @3) != (1, 2, @1)
----
[ - ]
Remaining filter:
ne (type: bool)
 ├── ordered-list (type: tuple{int, int, int})
 │    ├── variable (0) (type: int)
 │    ├── variable (1) (type: int)
 │    └── variable (2) (type: int)
 └── ordered-list (type: tuple{int, int, int})
      ├── const (1) (type: int)
      ├── const (2) (type: int)
      └── variable (0) (type: int)

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1 desc, @2 desc, @3 desc)
(@1, @2, @3) >= (1, 2, 3)
----
[ - /1/2/3]

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1 desc, @2 desc, @3)
(@1, @2, @3) > (1, 2, 3)
----
[ - /1/2]
Remaining filter:
gt (type: bool)
 ├── ordered-list (type: tuple{int, int, int})
 │    ├── variable (0) (type: int)
 │    ├── variable (1) (type: int)
 │    └── variable (2) (type: int)
 └── ordered-list (type: tuple{int, int, int})
      ├── const (1) (type: int)
      ├── const (2) (type: int)
      └── const (3) (type: int)

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3 desc)
(@1, @2, @3) > (1, 2, 3)
----
[/1/2 - ]
Remaining filter:
gt (type: bool)
 ├── ordered-list (type: tuple{int, int, int})
 │    ├── variable (0) (type: int)
 │    ├── variable (1) (type: int)
 │    └── variable (2) (type: int)
 └── ordered-list (type: tuple{int, int, int})
      ├── const (1) (type: int)
      ├── const (2) (type: int)
      └── const (3) (type: int)

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3 desc)
(@2, @3) > (1, 2)
----
[ - ]
Remaining filter:
gt (type: bool)
 ├── ordered-list (type: tuple{int, int})
 │    ├── variable (1) (type: int)
 │    └── variable (2) (type: int)
 └── ordered-list (type: tuple{int, int})
      ├── const (1) (type: int)
      └── const (2) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
(@1, @2) >= (1, 2) AND (@1, @2) <= (3, 4)
----
[/1/2 - /3/4]

legacy-normalize,build-scalar,index-constraints vars=(int, int) index=(@1, @2)
(@1, @2) BETWEEN (1, 2) AND (3, 4)
----
[/1/2 - /3/4]

legacy-normalize,build-scalar,index-constraints vars=(int, int, int, int) index=(@1, @2, @3, @4)
(@1, @2, @4) BETWEEN (1, 2, 3) AND (4, 5, 6)
----
[/1/2 - /4/5]
Remaining filter:
and (type: bool)
 ├── ge (type: bool)
 │    ├── ordered-list (type: tuple{int, int, int})
 │    │    ├── variable (0) (type: int)
 │    │    ├── variable (1) (type: int)
 │    │    └── variable (3) (type: int)
 │    └── ordered-list (type: tuple{int, int, int})
 │         ├── const (1) (type: int)
 │         ├── const (2) (type: int)
 │         └── const (3) (type: int)
 └── le (type: bool)
      ├── ordered-list (type: tuple{int, int, int})
      │    ├── variable (0) (type: int)
      │    ├── variable (1) (type: int)
      │    └── variable (3) (type: int)
      └── ordered-list (type: tuple{int, int, int})
           ├── const (4) (type: int)
           ├── const (5) (type: int)
           └── const (6) (type: int)

# Tests with tuple IN tuple.

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
(@1, @2, @3) IN ((1, 2, 3), (4, 5, 6))
----
[/1/2/3 - /1/2/3]
[/4/5/6 - /4/5/6]

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
(@1, @2, @3) IN ((4, 5, 6), (1, 2, 3))
----
[/1/2/3 - /1/2/3]
[/4/5/6 - /4/5/6]

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
(@1, @2, @3) IN ((1, 2, 3), (1, 2, 3))
----
[/1/2/3 - /1/2/3]

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
(@1, @2, @3) IN ((1, 2, 3), (4, 5, 6), (1, 2, 3))
----
[/1/2/3 - /1/2/3]
[/4/5/6 - /4/5/6]


build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
(@1+5, @1, @1+@2, @2) IN ((1, 5, 1, 6), (2, 7, 2, 8), (3, 9, 3, 10))
----
[/5/6 - /5/6]
[/7/8 - /7/8]
[/9/10 - /9/10]
Remaining filter:
in (type: bool)
 ├── ordered-list (type: tuple{int, int, int, int})
 │    ├── plus (type: int)
 │    │    ├── variable (0) (type: int)
 │    │    └── const (5) (type: int)
 │    ├── variable (0) (type: int)
 │    ├── plus (type: int)
 │    │    ├── variable (0) (type: int)
 │    │    └── variable (1) (type: int)
 │    └── variable (1) (type: int)
 └── ordered-list (type: tuple{tuple{int, int, int, int}, tuple{int, int, int, int}, tuple{int, int, int, int}})
      ├── ordered-list (type: tuple{int, int, int, int})
      │    ├── const (1) (type: int)
      │    ├── const (5) (type: int)
      │    ├── const (1) (type: int)
      │    └── const (6) (type: int)
      ├── ordered-list (type: tuple{int, int, int, int})
      │    ├── const (2) (type: int)
      │    ├── const (7) (type: int)
      │    ├── const (2) (type: int)
      │    └── const (8) (type: int)
      └── ordered-list (type: tuple{int, int, int, int})
           ├── const (3) (type: int)
           ├── const (9) (type: int)
           ├── const (3) (type: int)
           └── const (10) (type: int)

# Verify that we sort and de-duplicate if we "project" the tuples;
# in this case the expression becomes:
#   (@1, @2) IN ((5, 5), (4, 4), (5, 5))
build-scalar,normalize,index-constraints vars=(int, int, int, int) index=(@2, @4)
(@1, @2, @3, @4) IN ((1, 5, 1, 5), (2, 4, 2, 4), (3, 5, 3, 5))
----
[/4/4 - /4/4]
[/5/5 - /5/5]
Remaining filter:
in (type: bool)
 ├── ordered-list (type: tuple{int, int, int, int})
 │    ├── variable (0) (type: int)
 │    ├── variable (1) (type: int)
 │    ├── variable (2) (type: int)
 │    └── variable (3) (type: int)
 └── ordered-list (type: tuple{tuple{int, int, int, int}, tuple{int, int, int, int}, tuple{int, int, int, int}})
      ├── ordered-list (type: tuple{int, int, int, int})
      │    ├── const (1) (type: int)
      │    ├── const (5) (type: int)
      │    ├── const (1) (type: int)
      │    └── const (5) (type: int)
      ├── ordered-list (type: tuple{int, int, int, int})
      │    ├── const (2) (type: int)
      │    ├── const (4) (type: int)
      │    ├── const (2) (type: int)
      │    └── const (4) (type: int)
      └── ordered-list (type: tuple{int, int, int, int})
           ├── const (3) (type: int)
           ├── const (5) (type: int)
           ├── const (3) (type: int)
           └── const (5) (type: int)

build-scalar,normalize,index-constraints vars=(int, int, int, int) index=(@2)
(@1, @2, @3, @4) IN ((1, 5, 1, 5), (2, 4, 2, 4), (3, 5, 3, 5))
----
[/4 - /4]
[/5 - /5]
Remaining filter:
in (type: bool)
 ├── ordered-list (type: tuple{int, int, int, int})
 │    ├── variable (0) (type: int)
 │    ├── variable (1) (type: int)
 │    ├── variable (2) (type: int)
 │    └── variable (3) (type: int)
 └── ordered-list (type: tuple{tuple{int, int, int, int}, tuple{int, int, int, int}, tuple{int, int, int, int}})
      ├── ordered-list (type: tuple{int, int, int, int})
      │    ├── const (1) (type: int)
      │    ├── const (5) (type: int)
      │    ├── const (1) (type: int)
      │    └── const (5) (type: int)
      ├── ordered-list (type: tuple{int, int, int, int})
      │    ├── const (2) (type: int)
      │    ├── const (4) (type: int)
      │    ├── const (2) (type: int)
      │    └── const (4) (type: int)
      └── ordered-list (type: tuple{int, int, int, int})
           ├── const (3) (type: int)
           ├── const (5) (type: int)
           ├── const (3) (type: int)
           └── const (5) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
(@2, @1) IN ((1, 5), (2, 1), (3, 4), (4, 1))
----
[/1/2 - /1/2]
[/1/4 - /1/4]
[/4/3 - /4/3]
[/5/1 - /5/1]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1 desc, @2)
(@2, @1) IN ((1, 5), (2, 1), (3, 4), (4, 1))
----
[/5/1 - /5/1]
[/4/3 - /4/3]
[/1/2 - /1/2]
[/1/4 - /1/4]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2 desc)
(@2, @1) IN ((1, 5), (2, 1), (3, 4), (4, 1))
----
[/1/4 - /1/4]
[/1/2 - /1/2]
[/4/3 - /4/3]
[/5/1 - /5/1]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1 desc, @2 desc)
(@2, @1) IN ((1, 5), (2, 1), (3, 4), (4, 1))
----
[/5/1 - /5/1]
[/4/3 - /4/3]
[/1/4 - /1/4]
[/1/2 - /1/2]

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
@1 = 1 AND (@2, @3) IN ((2, 3), (4, 5), (6, 7))
----
[/1/2/3 - /1/2/3]
[/1/4/5 - /1/4/5]
[/1/6/7 - /1/6/7]

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
@3 = 1 AND (@1, @2) IN ((2, 3), (4, 5), (6, 7))
----
[/2/3/1 - /2/3/1]
[/4/5/1 - /4/5/1]
[/6/7/1 - /6/7/1]

# Here the best we can do is to effectively break up the IN constraint into
# constraints on @1 and on @3, which results in more spans than we need.
build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
@2 = 1 AND (@1, @3) IN ((2, 3), (4, 5), (6, 7))
----
[/2/1/3 - /2/1/3]
[/2/1/5 - /2/1/5]
[/2/1/7 - /2/1/7]
[/4/1/3 - /4/1/3]
[/4/1/5 - /4/1/5]
[/4/1/7 - /4/1/7]
[/6/1/3 - /6/1/3]
[/6/1/5 - /6/1/5]
[/6/1/7 - /6/1/7]
Remaining filter:
in (type: bool)
 ├── ordered-list (type: tuple{int, int})
 │    ├── variable (0) (type: int)
 │    └── variable (2) (type: int)
 └── ordered-list (type: tuple{tuple{int, int}, tuple{int, int}, tuple{int, int}})
      ├── ordered-list (type: tuple{int, int})
      │    ├── const (2) (type: int)
      │    └── const (3) (type: int)
      ├── ordered-list (type: tuple{int, int})
      │    ├── const (4) (type: int)
      │    └── const (5) (type: int)
      └── ordered-list (type: tuple{int, int})
           ├── const (6) (type: int)
           └── const (7) (type: int)

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
@1 > 1 AND (@2, @3) IN ((2, 3), (4, 5), (6, 7))
----
[/2/2/3 - ]
Remaining filter:
in (type: bool)
 ├── ordered-list (type: tuple{int, int})
 │    ├── variable (1) (type: int)
 │    └── variable (2) (type: int)
 └── ordered-list (type: tuple{tuple{int, int}, tuple{int, int}, tuple{int, int}})
      ├── ordered-list (type: tuple{int, int})
      │    ├── const (2) (type: int)
      │    └── const (3) (type: int)
      ├── ordered-list (type: tuple{int, int})
      │    ├── const (4) (type: int)
      │    └── const (5) (type: int)
      └── ordered-list (type: tuple{int, int})
           ├── const (6) (type: int)
           └── const (7) (type: int)

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 IS NULL
----
[/NULL - /NULL]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 IS NULL AND @2 = 2
----
[/NULL/2 - /NULL/2]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 IS NULL AND @2 > 2
----
[/NULL/3 - /NULL]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 = 1 AND @2 IS NULL
----
[/1/NULL - /1/NULL]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@1 >= 1 AND @2 IS NULL
----
[/1/NULL - ]
Remaining filter:
is (type: bool)
 ├── variable (1) (type: int)
 └── const (NULL) (type: NULL)

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 IS NOT DISTINCT FROM NULL
----
[/NULL - /NULL]

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 IS NOT NULL
----
(/NULL - ]

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 IS DISTINCT FROM NULL
----
(/NULL - ]

build-scalar,normalize,index-constraints vars=(int) index=(@1 desc)
@1 IS NOT NULL
----
[ - /NULL)

build-scalar,normalize,index-constraints vars=(int) index=(@1 not null)
@1 IS NULL
----

build-scalar,normalize,index-constraints vars=(int) index=(@1 not null)
@1 IS NOT DISTINCT FROM NULL
----

build-scalar,normalize,index-constraints vars=(int) index=(@1 not null)
@1 IS NOT NULL
----
[ - ]

build-scalar,normalize,index-constraints vars=(int) index=(@1 not null)
@1 IS DISTINCT FROM NULL
----
[ - ]

build-scalar,normalize,index-constraints vars=(int) index=(@1 desc not null)
@1 IS NOT NULL
----
[ - ]

build-scalar,normalize,index-constraints vars=(int) index=(@1 not null)
@1 IS NOT DISTINCT FROM 1
----
[/1 - /1]

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@2 = @1
----
(/NULL - ]
Remaining filter:
eq (type: bool)
 ├── variable (1) (type: int)
 └── variable (0) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1, @2)
@2 < @1
----
(/NULL - ]
Remaining filter:
lt (type: bool)
 ├── variable (1) (type: int)
 └── variable (0) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1 not null, @2)
@1 = @2
----
[ - ]
Remaining filter:
eq (type: bool)
 ├── variable (0) (type: int)
 └── variable (1) (type: int)

# Tests with top-level OR.

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 = 1 OR @1 = 2
----
[/1 - /1]
[/2 - /2]
Remaining filter:
or (type: bool)
 ├── eq (type: bool)
 │    ├── variable (0) (type: int)
 │    └── const (1) (type: int)
 └── eq (type: bool)
      ├── variable (0) (type: int)
      └── const (2) (type: int)

build-scalar,normalize,index-constraints vars=(int) index=(@1)
@1 IS NULL OR @1 = 1
----
[/NULL - /NULL]
[/1 - /1]
Remaining filter:
or (type: bool)
 ├── is (type: bool)
 │    ├── variable (0) (type: int)
 │    └── const (NULL) (type: NULL)
 └── eq (type: bool)
      ├── variable (0) (type: int)
      └── const (1) (type: int)

build-scalar,normalize,index-constraints vars=(int) index=(@1)
(@1 >= 1 AND @1 <= 5) OR (@1 >= 2 AND @1 <= 8)
----
[/1 - /8]
Remaining filter:
or (type: bool)
 ├── le (type: bool)
 │    ├── variable (0) (type: int)
 │    └── const (5) (type: int)
 └── ge (type: bool)
      ├── variable (0) (type: int)
      └── const (2) (type: int)

build-scalar,normalize,index-constraints vars=(int) index=(@1)
(@1 >= 1 AND @1 <= 3) OR (@1 >= 5 AND @1 <= 8)
----
[/1 - /3]
[/5 - /8]
Remaining filter:
or (type: bool)
 ├── le (type: bool)
 │    ├── variable (0) (type: int)
 │    └── const (3) (type: int)
 └── ge (type: bool)
      ├── variable (0) (type: int)
      └── const (5) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@1)
(@1 = 1 AND @2 = 5) OR (@1 = 2 and @2 = 6)
----
[/1 - /1]
[/2 - /2]
Remaining filter:
or (type: bool)
 ├── and (type: bool)
 │    ├── eq (type: bool)
 │    │    ├── variable (0) (type: int)
 │    │    └── const (1) (type: int)
 │    └── eq (type: bool)
 │         ├── variable (1) (type: int)
 │         └── const (5) (type: int)
 └── and (type: bool)
      ├── eq (type: bool)
      │    ├── variable (0) (type: int)
      │    └── const (2) (type: int)
      └── eq (type: bool)
           ├── variable (1) (type: int)
           └── const (6) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@2)
(@1 = 1 AND @2 = 5) OR (@1 = 2 and @2 = 6)
----
[/5 - /5]
[/6 - /6]
Remaining filter:
or (type: bool)
 ├── and (type: bool)
 │    ├── eq (type: bool)
 │    │    ├── variable (0) (type: int)
 │    │    └── const (1) (type: int)
 │    └── eq (type: bool)
 │         ├── variable (1) (type: int)
 │         └── const (5) (type: int)
 └── and (type: bool)
      ├── eq (type: bool)
      │    ├── variable (0) (type: int)
      │    └── const (2) (type: int)
      └── eq (type: bool)
           ├── variable (1) (type: int)
           └── const (6) (type: int)

build-scalar,normalize,index-constraints vars=(int, int) index=(@2)
@1 = 1 OR @2 = 2
----
[ - ]
Remaining filter:
or (type: bool)
 ├── eq (type: bool)
 │    ├── variable (0) (type: int)
 │    └── const (1) (type: int)
 └── eq (type: bool)
      ├── variable (1) (type: int)
      └── const (2) (type: int)

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
@1 = 1 OR (@1, @2, @3) IN ((4, 5, 6), (7, 8, 9))
----
[/1 - /1]
[/4/5/6 - /4/5/6]
[/7/8/9 - /7/8/9]
Remaining filter:
or (type: bool)
 ├── eq (type: bool)
 │    ├── variable (0) (type: int)
 │    └── const (1) (type: int)
 └── in (type: bool)
      ├── ordered-list (type: tuple{int, int, int})
      │    ├── variable (0) (type: int)
      │    ├── variable (1) (type: int)
      │    └── variable (2) (type: int)
      └── ordered-list (type: tuple{tuple{int, int, int}, tuple{int, int, int}})
           ├── ordered-list (type: tuple{int, int, int})
           │    ├── const (4) (type: int)
           │    ├── const (5) (type: int)
           │    └── const (6) (type: int)
           └── ordered-list (type: tuple{int, int, int})
                ├── const (7) (type: int)
                ├── const (8) (type: int)
                └── const (9) (type: int)

build-scalar,normalize,index-constraints vars=(int, int, int) index=(@1, @2, @3)
@1 = 1 OR (@1 = 2 AND (@2, @3) IN ((4, 5), (6, 7))) OR (@1 = 3)
----
[/1 - /1]
[/2/4/5 - /2/4/5]
[/2/6/7 - /2/6/7]
[/3 - /3]
Remaining filter:
or (type: bool)
 ├── eq (type: bool)
 │    ├── variable (0) (type: int)
 │    └── const (1) (type: int)
 ├── and (type: bool)
 │    ├── eq (type: bool)
 │    │    ├── variable (0) (type: int)
 │    │    └── const (2) (type: int)
 │    └── in (type: bool)
 │         ├── ordered-list (type: tuple{int, int})
 │         │    ├── variable (1) (type: int)
 │         │    └── variable (2) (type: int)
 │         └── ordered-list (type: tuple{tuple{int, int}, tuple{int, int}})
 │              ├── ordered-list (type: tuple{int, int})
 │              │    ├── const (4) (type: int)
 │              │    └── const (5) (type: int)
 │              └── ordered-list (type: tuple{int, int})
 │                   ├── const (6) (type: int)
 │                   └── const (7) (type: int)
 └── eq (type: bool)
      ├── variable (0) (type: int)
      └── const (3) (type: int)
