// Code generated by pkg/sql/lexbase/allkeywords. DO NOT EDIT.

package plpgsqllexbase

var KeywordsCategories = map[string]string{
	"absolute":             "U",
	"alias":                "U",
	"all":                  "R",
	"and":                  "U",
	"array":                "U",
	"assert":               "U",
	"backward":             "U",
	"begin":                "R",
	"by":                   "R",
	"call":                 "U",
	"case":                 "R",
	"chain":                "U",
	"close":                "U",
	"collate":              "U",
	"column":               "U",
	"column_name":          "U",
	"commit":               "U",
	"constant":             "U",
	"constraint":           "U",
	"constraint_name":      "U",
	"continue":             "U",
	"current":              "U",
	"cursor":               "U",
	"datatype":             "U",
	"debug":                "U",
	"declare":              "R",
	"default":              "U",
	"detail":               "U",
	"diagnostics":          "U",
	"do":                   "U",
	"dump":                 "U",
	"else":                 "R",
	"elsif":                "U",
	"end":                  "R",
	"end_case":             "R",
	"end_if":               "R",
	"errcode":              "U",
	"error":                "U",
	"exception":            "U",
	"execute":              "R",
	"exit":                 "U",
	"fetch":                "U",
	"first":                "U",
	"for":                  "R",
	"foreach":              "R",
	"forward":              "U",
	"from":                 "R",
	"get":                  "U",
	"hint":                 "U",
	"if":                   "R",
	"import":               "U",
	"in":                   "R",
	"info":                 "U",
	"insert":               "U",
	"into":                 "R",
	"is":                   "U",
	"last":                 "U",
	"log":                  "U",
	"loop":                 "R",
	"merge":                "U",
	"message":              "U",
	"message_text":         "U",
	"move":                 "U",
	"next":                 "U",
	"no":                   "U",
	"not":                  "R",
	"notice":               "U",
	"no_scroll":            "U",
	"null":                 "R",
	"open":                 "U",
	"option":               "U",
	"or":                   "R",
	"perform":              "U",
	"pg_context":           "U",
	"pg_datatype_name":     "U",
	"pg_exception_context": "U",
	"pg_exception_detail":  "U",
	"pg_exception_hint":    "U",
	"print_strict_params":  "U",
	"prior":                "U",
	"query":                "U",
	"raise":                "U",
	"relative":             "U",
	"return":               "U",
	"returned_sqlstate":    "U",
	"return_next":          "U",
	"return_query":         "U",
	"reverse":              "U",
	"rollback":             "U",
	"rowtype":              "U",
	"row_count":            "U",
	"schema":               "U",
	"schema_name":          "U",
	"scroll":               "U",
	"slice":                "U",
	"sqlstate":             "U",
	"stacked":              "U",
	"strict":               "R",
	"table":                "U",
	"table_name":           "U",
	"then":                 "R",
	"to":                   "R",
	"type":                 "U",
	"use_column":           "U",
	"use_variable":         "U",
	"using":                "R",
	"variable_conflict":    "U",
	"warning":              "U",
	"when":                 "R",
	"while":                "R",
}

// KeywordNames contains all keywords sorted, so that pg_get_keywords returns
// deterministic results.
var KeywordNames = []string{
	"absolute",
	"alias",
	"all",
	"and",
	"array",
	"assert",
	"backward",
	"begin",
	"by",
	"call",
	"case",
	"chain",
	"close",
	"collate",
	"column",
	"column_name",
	"commit",
	"constant",
	"constraint",
	"constraint_name",
	"continue",
	"current",
	"cursor",
	"datatype",
	"debug",
	"declare",
	"default",
	"detail",
	"diagnostics",
	"do",
	"dump",
	"else",
	"elsif",
	"end",
	"end_case",
	"end_if",
	"errcode",
	"error",
	"exception",
	"execute",
	"exit",
	"fetch",
	"first",
	"for",
	"foreach",
	"forward",
	"from",
	"get",
	"hint",
	"if",
	"import",
	"in",
	"info",
	"insert",
	"into",
	"is",
	"last",
	"log",
	"loop",
	"merge",
	"message",
	"message_text",
	"move",
	"next",
	"no",
	"not",
	"notice",
	"no_scroll",
	"null",
	"open",
	"option",
	"or",
	"perform",
	"pg_context",
	"pg_datatype_name",
	"pg_exception_context",
	"pg_exception_detail",
	"pg_exception_hint",
	"print_strict_params",
	"prior",
	"query",
	"raise",
	"relative",
	"return",
	"returned_sqlstate",
	"return_next",
	"return_query",
	"reverse",
	"rollback",
	"rowtype",
	"row_count",
	"schema",
	"schema_name",
	"scroll",
	"slice",
	"sqlstate",
	"stacked",
	"strict",
	"table",
	"table_name",
	"then",
	"to",
	"type",
	"use_column",
	"use_variable",
	"using",
	"variable_conflict",
	"warning",
	"when",
	"while",
}

// GetKeywordID returns the lex id of the SQL keyword k or IDENT if k is
// not a keyword.
func GetKeywordID(k string) int32 {
	// The previous implementation generated a map that did a string ->
	// id lookup. Various ideas were benchmarked and the implementation below
	// was the fastest of those, between 3% and 10% faster (at parsing, so the
	// scanning speedup is even more) than the map implementation.
	switch k {
	case "absolute":
		return ABSOLUTE
	case "alias":
		return ALIAS
	case "all":
		return ALL
	case "and":
		return AND
	case "array":
		return ARRAY
	case "assert":
		return ASSERT
	case "backward":
		return BACKWARD
	case "begin":
		return BEGIN
	case "by":
		return BY
	case "call":
		return CALL
	case "case":
		return CASE
	case "chain":
		return CHAIN
	case "close":
		return CLOSE
	case "collate":
		return COLLATE
	case "column":
		return COLUMN
	case "column_name":
		return COLUMN_NAME
	case "commit":
		return COMMIT
	case "constant":
		return CONSTANT
	case "constraint":
		return CONSTRAINT
	case "constraint_name":
		return CONSTRAINT_NAME
	case "continue":
		return CONTINUE
	case "current":
		return CURRENT
	case "cursor":
		return CURSOR
	case "datatype":
		return DATATYPE
	case "debug":
		return DEBUG
	case "declare":
		return DECLARE
	case "default":
		return DEFAULT
	case "detail":
		return DETAIL
	case "diagnostics":
		return DIAGNOSTICS
	case "do":
		return DO
	case "dump":
		return DUMP
	case "else":
		return ELSE
	case "elsif":
		return ELSIF
	case "end":
		return END
	case "end_case":
		return END_CASE
	case "end_if":
		return END_IF
	case "errcode":
		return ERRCODE
	case "error":
		return ERROR
	case "exception":
		return EXCEPTION
	case "execute":
		return EXECUTE
	case "exit":
		return EXIT
	case "fetch":
		return FETCH
	case "first":
		return FIRST
	case "for":
		return FOR
	case "foreach":
		return FOREACH
	case "forward":
		return FORWARD
	case "from":
		return FROM
	case "get":
		return GET
	case "hint":
		return HINT
	case "if":
		return IF
	case "import":
		return IMPORT
	case "in":
		return IN
	case "info":
		return INFO
	case "insert":
		return INSERT
	case "into":
		return INTO
	case "is":
		return IS
	case "last":
		return LAST
	case "log":
		return LOG
	case "loop":
		return LOOP
	case "merge":
		return MERGE
	case "message":
		return MESSAGE
	case "message_text":
		return MESSAGE_TEXT
	case "move":
		return MOVE
	case "next":
		return NEXT
	case "no":
		return NO
	case "not":
		return NOT
	case "notice":
		return NOTICE
	case "no_scroll":
		return NO_SCROLL
	case "null":
		return NULL
	case "open":
		return OPEN
	case "option":
		return OPTION
	case "or":
		return OR
	case "perform":
		return PERFORM
	case "pg_context":
		return PG_CONTEXT
	case "pg_datatype_name":
		return PG_DATATYPE_NAME
	case "pg_exception_context":
		return PG_EXCEPTION_CONTEXT
	case "pg_exception_detail":
		return PG_EXCEPTION_DETAIL
	case "pg_exception_hint":
		return PG_EXCEPTION_HINT
	case "print_strict_params":
		return PRINT_STRICT_PARAMS
	case "prior":
		return PRIOR
	case "query":
		return QUERY
	case "raise":
		return RAISE
	case "relative":
		return RELATIVE
	case "return":
		return RETURN
	case "returned_sqlstate":
		return RETURNED_SQLSTATE
	case "return_next":
		return RETURN_NEXT
	case "return_query":
		return RETURN_QUERY
	case "reverse":
		return REVERSE
	case "rollback":
		return ROLLBACK
	case "rowtype":
		return ROWTYPE
	case "row_count":
		return ROW_COUNT
	case "schema":
		return SCHEMA
	case "schema_name":
		return SCHEMA_NAME
	case "scroll":
		return SCROLL
	case "slice":
		return SLICE
	case "sqlstate":
		return SQLSTATE
	case "stacked":
		return STACKED
	case "strict":
		return STRICT
	case "table":
		return TABLE
	case "table_name":
		return TABLE_NAME
	case "then":
		return THEN
	case "to":
		return TO
	case "type":
		return TYPE
	case "use_column":
		return USE_COLUMN
	case "use_variable":
		return USE_VARIABLE
	case "using":
		return USING
	case "variable_conflict":
		return VARIABLE_CONFLICT
	case "warning":
		return WARNING
	case "when":
		return WHEN
	case "while":
		return WHILE
	default:
		return IDENT
	}
}
