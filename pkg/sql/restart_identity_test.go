// Copyright 2023 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package sql_test

import (
	"context"
	"testing"

	"github.com/cockroachdb/cockroach/pkg/base"
	"github.com/cockroachdb/cockroach/pkg/testutils/serverutils"
	"github.com/cockroachdb/cockroach/pkg/util/leaktest"
	"github.com/cockroachdb/cockroach/pkg/util/log"
	"github.com/stretchr/testify/require"
)

// TestAlterColumnRestart tests the ALTER TABLE ... ALTER COLUMN ... RESTART functionality
// for identity columns, ensuring PostgreSQL compatibility.
// This addresses issue https://github.com/cockroachdb/cockroach/issues/109956
func TestAlterColumnRestart(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	ctx := context.Background()
	s, db, _ := serverutils.StartServer(t, base.TestServerArgs{})
	defer s.Stopper().Stop(ctx)

	// Test RESTART on GENERATED ALWAYS AS IDENTITY
	t.Run("generated_always_restart", func(t *testing.T) {
		_, err := db.Exec(`
			CREATE TABLE test_restart (
				id INTEGER GENERATED ALWAYS AS IDENTITY,
				name TEXT
			)
		`)
		require.NoError(t, err)

		// Insert initial data
		_, err = db.Exec(`INSERT INTO test_restart (name) VALUES ('test1'), ('test2'), ('test3')`)
		require.NoError(t, err)

		// Verify initial values
		rows, err := db.Query(`SELECT id FROM test_restart ORDER BY id`)
		require.NoError(t, err)
		var ids []int
		for rows.Next() {
			var id int
			require.NoError(t, rows.Scan(&id))
			ids = append(ids, id)
		}
		require.NoError(t, rows.Close())
		require.Equal(t, []int{1, 2, 3}, ids)

		// Test RESTART WITH specific value
		_, err = db.Exec(`ALTER TABLE test_restart ALTER COLUMN id RESTART WITH 100`)
		require.NoError(t, err)

		// Insert new row and verify restart worked
		_, err = db.Exec(`INSERT INTO test_restart (name) VALUES ('test4')`)
		require.NoError(t, err)

		var newID int
		err = db.QueryRow(`SELECT id FROM test_restart WHERE name = 'test4'`).Scan(&newID)
		require.NoError(t, err)
		require.Equal(t, 100, newID)

		// Clean up
		_, err = db.Exec(`DROP TABLE test_restart`)
		require.NoError(t, err)
	})

	// Test RESTART on GENERATED BY DEFAULT AS IDENTITY
	t.Run("generated_by_default_restart", func(t *testing.T) {
		_, err := db.Exec(`
			CREATE TABLE test_restart_default (
				id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 5),
				name TEXT
			)
		`)
		require.NoError(t, err)

		// Insert initial data
		_, err = db.Exec(`INSERT INTO test_restart_default (name) VALUES ('default1'), ('default2')`)
		require.NoError(t, err)

		// Test RESTART without value (should restart to START value)
		_, err = db.Exec(`ALTER TABLE test_restart_default ALTER COLUMN id RESTART`)
		require.NoError(t, err)

		// Insert new row and verify restart worked
		_, err = db.Exec(`INSERT INTO test_restart_default (name) VALUES ('default3')`)
		require.NoError(t, err)

		var newID int
		err = db.QueryRow(`SELECT id FROM test_restart_default WHERE name = 'default3'`).Scan(&newID)
		require.NoError(t, err)
		require.Equal(t, 5, newID) // Should restart to START value

		// Clean up
		_, err = db.Exec(`DROP TABLE test_restart_default`)
		require.NoError(t, err)
	})

	// Test RESTART combined with other sequence options
	t.Run("restart_with_multiple_options", func(t *testing.T) {
		_, err := db.Exec(`
			CREATE TABLE test_restart_multi (
				id INTEGER GENERATED ALWAYS AS IDENTITY,
				name TEXT
			)
		`)
		require.NoError(t, err)

		// Test RESTART combined with INCREMENT
		_, err = db.Exec(`ALTER TABLE test_restart_multi ALTER COLUMN id SET INCREMENT BY 5 RESTART WITH 50`)
		require.NoError(t, err)

		// Insert data and verify both options work
		_, err = db.Exec(`INSERT INTO test_restart_multi (name) VALUES ('multi1'), ('multi2')`)
		require.NoError(t, err)

		rows, err := db.Query(`SELECT id FROM test_restart_multi WHERE name IN ('multi1', 'multi2') ORDER BY id`)
		require.NoError(t, err)
		var ids []int
		for rows.Next() {
			var id int
			require.NoError(t, rows.Scan(&id))
			ids = append(ids, id)
		}
		require.NoError(t, rows.Close())
		require.Equal(t, []int{50, 55}, ids) // 50 + 5 increment

		// Clean up
		_, err = db.Exec(`DROP TABLE test_restart_multi`)
		require.NoError(t, err)
	})

	// Test error cases
	t.Run("error_cases", func(t *testing.T) {
		_, err := db.Exec(`
			CREATE TABLE test_restart_errors (
				id INTEGER GENERATED ALWAYS AS IDENTITY,
				name TEXT
			)
		`)
		require.NoError(t, err)

		// Test RESTART on non-identity column
		_, err = db.Exec(`ALTER TABLE test_restart_errors ALTER COLUMN name RESTART`)
		require.Error(t, err)
		require.Contains(t, err.Error(), "is not an identity column")

		// Test RESTART on non-existent column
		_, err = db.Exec(`ALTER TABLE test_restart_errors ALTER COLUMN nonexistent RESTART`)
		require.Error(t, err)
		require.Contains(t, err.Error(), "does not exist")

		// Clean up
		_, err = db.Exec(`DROP TABLE test_restart_errors`)
		require.NoError(t, err)
	})
}