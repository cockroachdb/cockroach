# LogicTest: local

# This file contains test cases that cannot be run with the vectorized
# execution engine.

statement ok
SET experimental_vectorize=off

statement ok
CREATE TABLE xyz (
  x INT PRIMARY KEY,
  y INT,
  z FLOAT,
  INDEX xy (x, y),
  INDEX zyx (z, y, x),
  FAMILY (x),
  FAMILY (y),
  FAMILY (z)
)

statement okSE
INSERT INTO xyz VALUES (1, 2, 3.0), (4, 5, 6.0), (7, NULL, 8.0)

# Verify we only look at one row for MIN when we have an index on that column.
statement ok
SET tracing = on,kv,results; SELECT min(z) FROM xyz; SET tracing = off

query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 ORDER BY message LIKE 'fetched:%' DESC, ordinality ASC
----
fetched: /xyz/zyx/3.0/2/1 -> NULL
output row: [3.0]

# Tests for the single-row optimization.
statement OK
CREATE TABLE ab (
  a INT PRIMARY KEY,
  b INT,
  FAMILY (a),
  FAMILY (b)
)

statement ok
CREATE TABLE abc (
  a CHAR PRIMARY KEY,
  b FLOAT,
  c BOOLEAN,
  d DECIMAL
)

query TTT
SELECT tree, field, description FROM [
EXPLAIN (VERBOSE) SELECT min(a) FROM abc
]
----
group           ·            ·
 │              aggregate 0  min(a)
 │              scalar       ·
 └── render     ·            ·
      │         render 0     test.public.abc.a
      └── scan  ·            ·
·               table        abc@primary
·               spans        ALL
·               limit        1

statement OK
INSERT INTO ab VALUES
  (1, 10),
  (2, 20),
  (3, 30),
  (4, 40),
  (5, 50)

# Verify we only buffer one row.
statement ok
SET tracing = on,kv,results; SELECT min(a) FROM ab; SET tracing = off

query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 ORDER BY message LIKE 'fetched:%' DESC, ordinality ASC
----
fetched: /ab/primary/1 -> NULL
fetched: /ab/primary/1/b -> 10
output row: [1]

query TTT
SELECT tree, field, description FROM [
EXPLAIN (VERBOSE) SELECT max(a) FROM abc
]
----
group              ·            ·
 │                 aggregate 0  max(a)
 │                 scalar       ·
 └── render        ·            ·
      │            render 0     test.public.abc.a
      └── revscan  ·            ·
·                  table        abc@primary
·                  spans        ALL
·                  limit        1

# Verify we only buffer one row.
statement ok
SET tracing = on,kv,results; SELECT max(a) FROM ab; SET tracing = off

query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 ORDER BY message LIKE 'fetched:%' DESC, ordinality ASC
----
fetched: /ab/primary/5/b -> 50
fetched: /ab/primary/5 -> NULL
output row: [5]
