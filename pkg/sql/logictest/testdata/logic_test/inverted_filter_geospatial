# Test cases for using invertedFilterer on an inverted geospatial index.

statement ok
CREATE TABLE geo_table(
  k int primary key,
  geom geometry,
  INVERTED INDEX geom_index(geom)
)

statement ok
INSERT INTO geo_table VALUES
  (1, 'POINT(1.0 1.0)'),
  (2, 'LINESTRING(1.0 1.0, 2.0 2.0)'),
  (3, 'POINT(3.0 3.0)'),
  (4, 'LINESTRING(4.0 4.0, 5.0 5.0)'),
  (5, 'LINESTRING(40.0 40.0, 41.0 41.0)'),
  (6, 'POLYGON((1.0 1.0, 5.0 1.0, 5.0 5.0, 1.0 5.0, 1.0 1.0))')

query I
SELECT k FROM geo_table WHERE ST_Intersects('POINT(3.0 3.0)'::geometry, geom) ORDER BY k
----
3
6

query I
SELECT k FROM geo_table WHERE ST_Intersects('POINT(4.5 4.5)'::geometry, geom) ORDER BY k
----
4
6

query I
SELECT k FROM geo_table WHERE ST_CoveredBy('POINT(4.0 4.5)'::geometry, geom) ORDER BY k
----
6

statement ok
CREATE TABLE geo_table2(
  k int,
  geom geometry,
  k_plus_one int,
  PRIMARY KEY (k, k_plus_one),
  INVERTED INDEX geom_index(geom)
)

statement ok
INSERT INTO geo_table2 VALUES
  (1, 'LINESTRING(1.0 1.0, 2.0 2.0)', 2),
  (2, 'POLYGON((1.0 1.0, 5.0 1.0, 5.0 5.0, 1.0 5.0, 1.0 1.0))', 3)

query I
SELECT k FROM geo_table2 WHERE ST_Intersects('POINT(3.0 3.0)'::geometry, geom)
----
2

query II
SELECT k, k_plus_one FROM geo_table2 WHERE ST_Intersects('POINT(3.0 3.0)'::geometry, geom)
----
2  3

query IIT
SELECT k, k_plus_one, geom FROM geo_table2 WHERE ST_Intersects('POINT(3.0 3.0)'::geometry, geom)
----
2  3  01030000000100000005000000000000000000F03F000000000000F03F0000000000001440000000000000F03F00000000000014400000000000001440000000000000F03F0000000000001440000000000000F03F000000000000F03F
