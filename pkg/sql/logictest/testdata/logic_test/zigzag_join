# ------------------------------------------------------------------------------
# Zigzag join tests on non-inverted indexes.
# ------------------------------------------------------------------------------

statement ok
CREATE TABLE a (n INT PRIMARY KEY, a INT, b INT, c STRING, INDEX a_idx(a), INDEX b_idx(b), INDEX bc_idx(b,c));
INSERT INTO a SELECT a,a,a%3,'foo' FROM generate_series(1,10) AS g(a) ;
SET enable_zigzag_join = true

query III rowsort
SELECT n,a,b FROM a WHERE a = 4 AND b = 1
----
4  4  1

query III rowsort
SELECT n,a,b FROM a WHERE a = 5 AND b = 2
----
5  5  2

query IIIT rowsort
SELECT * FROM a WHERE a = 4 AND b = 1
----
4  4  1  foo

query IIIT rowsort
SELECT * FROM a WHERE a = 4 AND b = 2
----

query IIIT rowsort
SELECT * FROM a WHERE a = 5 AND b = 2 AND c = 'foo'
----
5  5  2  foo

# Turn off zigzag joins and verify output. First with a hint, then with the
# session variable.
query III rowsort
SELECT n,a,b FROM a@{NO_ZIGZAG_JOIN} WHERE a = 4 AND b = 1
----
4  4  1

statement ok
SET enable_zigzag_join = false

query III rowsort
SELECT n,a,b FROM a WHERE a = 4 AND b = 1
----
4  4  1

query III rowsort
SELECT n,a,b FROM a WHERE a = 5 AND b = 2
----
5  5  2

statement ok
SET enable_zigzag_join = true

# Regression test for 42164 ("invalid indexIdx" error).
statement ok
DROP INDEX a@a_idx;
DROP INDEX a@b_idx;
CREATE INDEX c_idx ON a(c);
CREATE INDEX a_idx ON a(a);
CREATE INDEX b_idx ON a(b);
SELECT n,a,b FROM a WHERE a = 4 AND b = 1;

# Regression test for 48003 ("non-values node passed as fixed value to zigzag
# join" error).
statement ok
SELECT n FROM a WHERE b = 1 AND (((a < 1) AND (a > 1)) OR (a >= 2 AND a <= 2))

# ------------------------------------------------------------------------------
# Zigzag join tests on inverted indexes.
# ------------------------------------------------------------------------------

statement ok
CREATE TABLE d (
  a INT PRIMARY KEY,
  b JSONB
)

statement ok
CREATE INVERTED INDEX foo_inv ON d(b)

statement ok
SHOW INDEX FROM d

statement ok
INSERT INTO d VALUES(1, '{"a": "b"}')

statement ok
INSERT INTO d VALUES(2, '[1,2,3,4, "foo"]')

statement ok
INSERT INTO d VALUES(3, '{"a": {"b": "c"}}')

statement ok
INSERT INTO d VALUES(4, '{"a": {"b": [1]}}')

statement ok
INSERT INTO d VALUES(5, '{"a": {"b": [1, [2]]}}')

statement ok
INSERT INTO d VALUES(6, '{"a": {"b": [[2]]}}')

statement ok
INSERT INTO d VALUES(7, '{"a": "b", "c": "d"}')

statement ok
INSERT INTO d VALUES(8, '{"a": {"b":true}}')

statement ok
INSERT INTO d VALUES(9, '{"a": {"b":false}}')

statement ok
INSERT INTO d VALUES(10, '"a"')

statement ok
INSERT INTO d VALUES(11, 'null')

statement ok
INSERT INTO d VALUES(12, 'true')

statement ok
INSERT INTO d VALUES(13, 'false')

statement ok
INSERT INTO d VALUES(14, '1')

statement ok
INSERT INTO d VALUES(15, '1.23')

statement ok
INSERT INTO d VALUES(16, '[{"a": {"b": [1, [2]]}}, "d"]')

statement ok
INSERT INTO d VALUES(17, '{}')

statement ok
INSERT INTO d VALUES(18, '[]')

statement ok
INSERT INTO d VALUES (29,  NULL)

statement ok
INSERT INTO d VALUES (30,  '{"a": []}')

statement ok
INSERT INTO d VALUES (31,  '{"a": {"b": "c", "d": "e"}, "f": "g"}')

## Multi-path contains queries with zigzag joins enabled.

query IT
SELECT * from d where b @> '{"a": {"b": "c"}, "f": "g"}'
----
31  {"a": {"b": "c", "d": "e"}, "f": "g"}

query IT
SELECT * from d where b @> '{"a": {"b": "c", "d": "e"}, "f": "g"}'
----
31  {"a": {"b": "c", "d": "e"}, "f": "g"}

query IT
SELECT * from d where b @> '{"c": "d", "a": "b"}'
----
7  {"a": "b", "c": "d"}

query IT
SELECT * from d where b @> '{"c": "d", "a": "b", "f": "g"}'
----

query IT
SELECT * from d where b @> '{"a": "b", "c": "e"}'
----

query IT
SELECT * from d where b @> '{"a": "e", "c": "d"}'
----

query IT
SELECT * from d where b @> '["d", {"a": {"b": [1]}}]'
----
16  [{"a": {"b": [1, [2]]}}, "d"]

query IT
SELECT * from d where b @> '["d", {"a": {"b": [[2]]}}]'
----
16  [{"a": {"b": [1, [2]]}}, "d"]

query IT
SELECT * from d where b @> '[{"a": {"b": [[2]]}}, "d"]'
----
16  [{"a": {"b": [1, [2]]}}, "d"]

# Zigzag hinting tests, functional tests in opt.xform coster tests, syntax tests
# in parser select_clauses.

statement error index "foo" not found
SELECT * FROM a@{FORCE_ZIGZAG=foo} WHERE a = 3 AND b = 7

# c_idx can't be used to zigzag so this is an error.
statement error could not produce a query plan conforming to the FORCE_ZIGZAG hint
SELECT * FROM a@{FORCE_ZIGZAG=a_idx,FORCE_ZIGZAG=c_idx} WHERE a = 3 AND b = 7

# Need two equalities to plan a zigzag.
statement error could not produce a query plan conforming to the FORCE_ZIGZAG hint
SELECT * FROM a@{FORCE_ZIGZAG=a_idx,FORCE_ZIGZAG=b_idx} WHERE a = 3

# Need two suitable indexes to plan a zigzag.
statement error could not produce a query plan conforming to the FORCE_ZIGZAG hint
SELECT * FROM a@{FORCE_ZIGZAG=a_idx,FORCE_ZIGZAG=bc_idx} WHERE a = 3 AND b = 7

# Basic form w/o indexes.
statement ok
SELECT * FROM a@{FORCE_ZIGZAG} WHERE a = 3 AND b = 7

# Consider this an error, certainly its a typo.
statement error FORCE_ZIGZAG hints not distinct
SELECT * FROM a@{FORCE_ZIGZAG,FORCE_ZIGZAG=a_idx} WHERE a = 3 AND b = 7

# Dupes are an error.
statement error FORCE_ZIGZAG index duplicated
SELECT * FROM a@{FORCE_ZIGZAG=a_idx,FORCE_ZIGZAG=a_idx} WHERE a = 3 AND b = 7

# Full indexes specified.
statement ok
SELECT * FROM a@{FORCE_ZIGZAG=a_idx,FORCE_ZIGZAG=b_idx} WHERE a = 3 AND b = 7

statement ok
DROP INDEX a@c_idx

# Check error if no index.
statement error could not produce a query plan conforming to the FORCE_ZIGZAG hint
SELECT * FROM a@{FORCE_ZIGZAG} WHERE a = 3 AND c = 'foo'

# Dupes are an error.
statement error FORCE_ZIGZAG index duplicated
SELECT * FROM a@{FORCE_ZIGZAG=[1],FORCE_ZIGZAG=[1]} WHERE a = 3 AND b = 7

# Full indexes specified. 6 is a_idx and 7 is b_idx.
statement ok
SELECT * FROM a@{FORCE_ZIGZAG=[6],FORCE_ZIGZAG=[7]} WHERE a = 3 AND b = 7

# Combining name and id is allowed.
statement ok
SELECT * FROM a@{FORCE_ZIGZAG=[6],FORCE_ZIGZAG=b_idx} WHERE a = 3 AND b = 7

# Duplicate name and id is not allowed.
statement error FORCE_ZIGZAG index duplicated
SELECT * FROM a@{FORCE_ZIGZAG=[6],FORCE_ZIGZAG=a_idx} WHERE a = 3 AND b = 7

statement error FORCE_ZIGZAG cannot be specified in conjunction with NO_ZIGZAG_JOIN
SELECT * FROM a@{FORCE_ZIGZAG,NO_ZIGZAG_JOIN} WHERE a = 3 AND b = 7
