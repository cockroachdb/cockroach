# LogicTest: !local-mixed-24.3 !local-mixed-25.1

query T
SELECT pg_typeof(JSONPATH '$.a')
----
jsonpath

query T
SELECT '$.a'::JSONPATH
----
$."a"

statement error pq: value type jsonpath cannot be used for table columns
CREATE TABLE a (j JSONPATH)

statement error pq: value type jsonpath cannot be used for table columns
CREATE TABLE a (j JSONPATH[])

query T
SELECT '$'::JSONPATH
----
$

query T
SELECT 'strict $'::JSONPATH
----
strict $

query T
SELECT 'lax $'::JSONPATH
----
$

query T
SELECT '$.a1[*]'::JSONPATH
----
$."a1"[*]

query B
SELECT '$'::JSONPATH IS NULL
----
false

query B
SELECT '$'::JSONPATH IS NOT NULL
----
true

statement error pq: unsupported comparison operator: jsonpath IS NOT DISTINCT FROM jsonpath
SELECT '$'::JSONPATH IS NOT DISTINCT FROM '$'::JSONPATH

statement error pq: unsupported comparison operator: jsonpath IS DISTINCT FROM jsonpath
SELECT '$'::JSONPATH IS DISTINCT FROM '$'::JSONPATH

query B
SELECT '$'::JSONPATH IS NOT DISTINCT FROM NULL
----
false

query B
SELECT '$'::JSONPATH IS DISTINCT FROM NULL
----
true

statement error pq: could not parse "" as type jsonpath: at or near "EOF": syntax error
SELECT ''::JSONPATH

statement error pq: could not parse "\$\.1a\[\*\]" as type jsonpath
SELECT '$.1a[*]'::JSONPATH

query T
SELECT '$.abc[*].DEF.ghi[*]'::JSONPATH
----
$."abc"[*]."DEF"."ghi"[*]

query T
SELECT '$.ABC[*].DEF.GHI[*]'::JSONPATH
----
$."ABC"[*]."DEF"."GHI"[*]

statement error pgcode 42883 could not identify an ordering operator for type jsonpath
SELECT '$'::JSONPATH AS col ORDER BY col DESC NULLS FIRST;

statement error pgcode 42883 could not identify an ordering operator for type jsonpath
SELECT '$'::JSONPATH ORDER BY 1 ASC;

statement ok
CREATE TABLE t (k INT PRIMARY KEY);

statement ok
INSERT INTO t VALUES (0);

query T
SELECT bpchar('$."a1"[*]':::JSONPATH::JSONPATH)::BPCHAR FROM t ORDER BY 1 NULLS LAST;
----
$."a1"[*]

query T
SELECT bpchar('$.   abc    [*]':::JSONPATH::JSONPATH)::BPCHAR FROM t ORDER BY 1 NULLS LAST;
----
$."abc"[*]

query T
SELECT '$.a[*] ? (@.b == 1 && @.c != 1)'::JSONPATH
----
$."a"[*]?(((@."b" == 1) && (@."c" != 1)))

query T
SELECT '$.a[*] ? (@.b != 1)'::JSONPATH
----
$."a"[*]?((@."b" != 1))

query T
SELECT '$.a[*] ? (@.b < 1)'::JSONPATH
----
$."a"[*]?((@."b" < 1))

query T
SELECT '$.a[*] ? (@.b <= 1)'::JSONPATH
----
$."a"[*]?((@."b" <= 1))

query T
SELECT '$.a[*] ? (@.b > 1)'::JSONPATH
----
$."a"[*]?((@."b" > 1))

query T
SELECT '$.a[*] ? (@.b >= 1)'::JSONPATH
----
$."a"[*]?((@."b" >= 1))

query T
SELECT '$.a ? ($.b == 1)'::JSONPATH
----
$."a"?(($."b" == 1))

query T
SELECT '$.a ? (@.b == 1).c ? (@.d == 2)'::JSONPATH
----
$."a"?((@."b" == 1))."c"?((@."d" == 2))

query T
SELECT '$.a?(@.b==1).c?(@.d==2)'::JSONPATH
----
$."a"?((@."b" == 1))."c"?((@."d" == 2))

query T
SELECT '$  .  a  ?  (  @  .  b  ==  1  )  .  c  ?  (  @  .  d  ==  2  )  '::JSONPATH
----
$."a"?((@."b" == 1))."c"?((@."d" == 2))

statement error pgcode 2201B pq: could not parse .* invalid regular expression: error parsing regexp: missing closing \)
SELECT '$ ? (@ like_regex "(invalid pattern")'::JSONPATH

statement error pgcode 42601 pq: could not parse "last" as type jsonpath: LAST is allowed only in array subscripts
SELECT 'last'::JSONPATH

statement error pgcode 42601 pq: could not parse "@" as type jsonpath: @ is not allowed in root expressions
SELECT '@'::JSONPATH

statement error unimplemented
SELECT '$ ? (@ like_regex ".*" flag "i")'::JSONPATH;

statement error unimplemented
SELECT '$.keyvalue()'::JSONPATH;

statement error unimplemented
SELECT '$.abs()'::JSONPATH;

statement error unimplemented
SELECT '$.ceiling()'::JSONPATH;

statement error unimplemented
SELECT '$.floor()'::JSONPATH;

statement error unimplemented
SELECT '$.bigint()'::JSONPATH;

statement error unimplemented
SELECT '$.boolean()'::JSONPATH;

statement error unimplemented
SELECT '$.date()'::JSONPATH;

statement error unimplemented
SELECT '$.double()'::JSONPATH;

statement error unimplemented
SELECT '$.integer()'::JSONPATH;

statement error unimplemented
SELECT '$.number()'::JSONPATH;

statement error unimplemented
SELECT '$.string()'::JSONPATH;

## When we allow table creation

# statement ok
# SELECT * FROM a WHERE j IS NULL

# statement ok
# INSERT INTO a VALUES ('$.something'), ('$.other.thing'), ('$.another.thing'), ('$.a[*].b.c[*]')

# query T rowsort
# SELECT * FROM a;
# ----
# $.something
# $.other.thing
# $.another.thing
# $.a[*].b.c[*]

# statement error pq: column j is of type jsonpath, which does not support forward indexing
# CREATE TABLE b (j JSONPATH, PRIMARY KEY(j))

# statement error pq: column j is of type jsonpath\[\], which does not support forward indexing
# CREATE TABLE c (j JSONPATH[], PRIMARY KEY(j))

# statement error unsupported comparison operator
# SELECT * FROM a WHERE j = '$.a'

## Unsupported Jsonpath

# query T
# SELECT '$.*'::JSONPATH
# ----
# $.*

# query T
# SELECT '$.a.type()'::JSONPATH
# ----
# $.a.type()
