# LogicTest: !3node-tenant-default-configs !local-mixed-22.2-23.1

query IBIT colnames
SELECT id, active, length(info), name FROM system.tenants ORDER BY id
----
id  active  length  name
1   true    10      system

# Create a few tenants.

statement ok
CREATE TENANT "tenant-one"

statement ok
CREATE TENANT "two"

statement error invalid tenant name
CREATE TENANT "ABC"

statement error invalid tenant name
CREATE TENANT "-a-"

# More than 100 characters.
statement error invalid tenant name
CREATE TENANT "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"

statement error invalid tenant name
CREATE TENANT "invalid_name"

statement error invalid tenant name
CREATE TENANT "invalid.name"

statement ok
CREATE TENANT three

query IBT colnames
SELECT id, active, name
FROM system.tenants
ORDER BY id
----
id  active  name
1   true    system
2   true    tenant-one
3   true    two
4   true    three

query ITTT colnames
SHOW TENANT system
----
id  name    data_state  service_mode
1   system  ready       shared

query ITTT colnames
SHOW TENANT "tenant-one"
----
id  name        data_state  service_mode
2   tenant-one  ready       none

query ITTT colnames
SHOW TENANT "two"
----
id  name  data_state  service_mode
3   two   ready       none

query ITTT colnames
SHOW TENANT two
----
id  name  data_state  service_mode
3   two   ready       none

query ITTT colnames
SHOW TENANT three
----
id  name   data_state  service_mode
4   three  ready       none

query ITTT colnames,rowsort
SHOW TENANTS
----
id  name        data_state  service_mode
1   system      ready       shared
2   tenant-one  ready       none
3   two         ready       none
4   three       ready       none

statement error tenant name cannot be empty
ALTER TENANT [4] RENAME TO ""

statement error tenant name cannot be NULL
ALTER TENANT [4] RENAME TO NULL

statement error invalid tenant name
ALTER TENANT [4] RENAME TO "a.b"

statement ok
ALTER TENANT [4] RENAME TO blux

statement ok
ALTER TENANT blux RENAME TO 'blix'

query ITTT colnames
SELECT * FROM [SHOW TENANTS] WHERE id = 4
----
id  name  data_state  service_mode
4   blix  ready       none

statement ok
ALTER TENANT blix RENAME TO three

query ITTT colnames
SELECT * FROM [SHOW TENANTS] WHERE id = 4
----
id  name   data_state  service_mode
4   three  ready       none

query ITTTT colnames
SELECT id, name, data_state, service_mode, source_tenant_name FROM [SHOW TENANTS WITH REPLICATION STATUS] WHERE id = 4
----
id  name   data_state  service_mode  source_tenant_name
4   three  ready       none          NULL

statement error tenant "seven" does not exist
SHOW TENANT seven

# Test creating a tenant with the same name as an existing tenant, but a unique
# ID.
statement error tenant with name "three" already exists
CREATE TENANT three

# Ignore duplicates (this is a no-op because "three" already exists).
statement ok
CREATE TENANT IF NOT EXISTS three

statement ok
set default_transaction_read_only = on;

statement error cannot execute CREATE VIRTUAL CLUSTER in a read-only transaction
CREATE TENANT four;

statement ok
set default_transaction_read_only = off;

user testuser

statement error user testuser does not have MANAGETENANT privilege on global
CREATE TENANT four

subtest drop_tenant
user root

statement error tenant "dne" does not exist
DROP TENANT dne

statement ok
DROP TENANT IF EXISTS dne

statement ok
CREATE TENANT four

query IBT colnames
SELECT id, active, name
FROM system.tenants WHERE name = 'four'
ORDER BY id
----
id  active  name
5   true    four

statement ok
DROP TENANT four

query IBT colnames
SELECT id, active, name
FROM system.tenants WHERE name = 'four'
ORDER BY id
----
id  active  name

statement error tenant "four" does not exist
SHOW TENANT four

statement ok
CREATE TENANT "five-requiring-quotes"

statement ok
DROP TENANT "five-requiring-quotes"

statement ok
set default_transaction_read_only = on;

statement error cannot execute DROP VIRTUAL CLUSTER in a read-only transaction
DROP TENANT three

statement ok
set default_transaction_read_only = off;

user testuser

statement error user testuser does not have MANAGETENANT privilege on global
DROP TENANT three

statement error user testuser does not have MANAGETENANT privilege on global
SHOW TENANTS

statement error user testuser does not have MANAGETENANT privilege on global
SHOW TENANT 'two'

user root

statement ok
GRANT SYSTEM MANAGETENANT TO testuser

user testuser

query ITTT colnames,rowsort
SHOW TENANTS
----
id  name        data_state  service_mode
1   system      ready       shared
2   tenant-one  ready       none
3   two         ready       none
4   three       ready       none

query ITTT colnames
SHOW TENANT two
----
id  name        data_state  service_mode
3   two         ready       none

user root

statement ok
REVOKE SYSTEM MANAGETENANT FROM testuser

subtest read_only

statement ok
SET default_transaction_read_only = true

statement error cannot execute.*in a read-only transaction
DROP TENANT three

statement error cannot execute.*in a read-only transaction
ALTER TENANT three RENAME TO blah

statement error cannot execute.*in a read-only transaction
CREATE TENANT "read-only"

statement ok
SET default_transaction_read_only = false

subtest reclaim_name

statement ok
CREATE TENANT "to-be-reclaimed"

statement ok
DROP TENANT "to-be-reclaimed"

statement ok
CREATE TENANT "to-be-reclaimed"

query IBTTT colnames
SELECT
  id,
  active,
  name,
  json_extract_path_text(crdb_internal.pb_to_json('cockroach.multitenant.ProtoInfo', info, true), 'deprecatedDataState') AS deprecated_data_state,
  json_extract_path_text(crdb_internal.pb_to_json('cockroach.multitenant.ProtoInfo', info, true), 'droppedName') AS dropped_name
FROM system.tenants
ORDER BY id
----
id  active  name             deprecated_data_state  dropped_name
1   true    system           READY                  ·
2   true    tenant-one       READY                  ·
3   true    two              READY                  ·
4   true    three            READY                  ·
5   false   NULL             DROP                   four
6   false   NULL             DROP                   five-requiring-quotes
7   false   NULL             DROP                   to-be-reclaimed
8   true    to-be-reclaimed  READY                  ·

# More valid tenant names.
statement ok
CREATE TENANT "1";
CREATE TENANT "a-b";
CREATE TENANT "hello-100"

query ITTT colnames,rowsort
SHOW TENANTS
----
id  name             data_state  service_mode
1   system           ready       shared
2   tenant-one       ready       none
3   two              ready       none
4   three            ready       none
8   to-be-reclaimed  ready       none
9   1                ready       none
10  a-b              ready       none
11  hello-100        ready       none

subtest service_mode

statement ok
ALTER TENANT 'tenant-one' START SERVICE EXTERNAL

# operation is idempotent
statement ok
ALTER TENANT 'tenant-one' START SERVICE EXTERNAL

statement ok
ALTER TENANT two START SERVICE SHARED

statement ok
ALTER TENANT two START SERVICE SHARED

statement error cannot change service mode external to shared directly
ALTER TENANT 'tenant-one' START SERVICE SHARED

statement error cannot change service mode shared to external directly
ALTER TENANT two START SERVICE EXTERNAL

statement error cannot drop tenant.*in service mode shared
DROP TENANT two

statement error cannot drop tenant.*in service mode external
DROP TENANT 'tenant-one'

query ITTT colnames,rowsort
SHOW TENANTS
----
id  name             data_state  service_mode
1   system           ready       shared
2   tenant-one       ready       external
3   two              ready       shared
4   three            ready       none
8   to-be-reclaimed  ready       none
9   1                ready       none
10  a-b              ready       none
11  hello-100        ready       none

statement ok
ALTER TENANT two STOP SERVICE

statement ok
ALTER TENANT 'tenant-one' STOP SERVICE

query ITTT colnames,rowsort
SHOW TENANTS
----
id  name             data_state  service_mode
1   system           ready       shared
2   tenant-one       ready       none
3   two              ready       none
4   three            ready       none
8   to-be-reclaimed  ready       none
9   1                ready       none
10  a-b              ready       none
11  hello-100        ready       none

statement ok
DROP TENANT two

statement ok
DROP TENANT 'tenant-one'

subtest tenant_templates

query T
SHOW CLUSTER SETTING sql.create_tenant.default_template
----
·

# Check we can't use the system tenant as template.
statement error using the system tenant as config template
CREATE TENANT othertenant LIKE system

# Create some "interesting" tenant template.
statement ok
CREATE TENANT tmpl;

let $tmplid
SELECT id FROM system.tenants WHERE name = 'tmpl'

statement ok
ALTER TENANT tmpl GRANT CAPABILITY can_view_node_info; -- will be copied
ALTER TENANT tmpl SET CLUSTER SETTING trace.debug.enable = true; -- will be copied
-- Simulate resource limits. Will be copied.
-- Note: we cannot use the update_tenant_resource_limits() builtin
-- directly here because it can only be used from a CCL binary.
INSERT INTO system.tenant_usage(
        tenant_id, instance_id, next_instance_id, last_update,
        ru_burst_limit, ru_refill_rate, ru_current, current_share_sum, total_consumption)
VALUES ($tmplid, 0, 0, now(),
        11, 22, 33, 44, ''::BYTES);
ALTER TENANT tmpl START SERVICE SHARED; -- will not be copied.

# Use it to create a new tenant.
statement ok
CREATE TENANT othertenant LIKE tmpl

let $otherid
SELECT id FROM system.tenants WHERE name = 'othertenant'

# Verify the service mode was not copied.
query BTTT
SELECT id = $otherid, name, data_state, service_mode FROM [SHOW TENANT othertenant]
----
true  othertenant  ready  none

# Verify the new tenant has the same caps as the template
# (by showing there's no difference between the two)
query TT
SELECT capability_name, capability_value FROM [SHOW TENANT tmpl WITH CAPABILITIES]
EXCEPT SELECT capability_name, capability_value FROM [SHOW TENANT othertenant WITH CAPABILITIES];
----

# Check that the setting overrides were copied.
query TTTT rowsort
SELECT variable, value, type, origin FROM [SHOW CLUSTER SETTINGS FOR TENANT othertenant]
WHERE origin != 'no-override'
----
trace.debug.enable  true  b  per-tenant-override

# Check that the resource usage parameters were copied.
query IIRRRRI
SELECT instance_id, next_instance_id,
       ru_burst_limit, ru_refill_rate, ru_current,
       current_share_sum, length(total_consumption)
FROM system.tenant_usage WHERE tenant_id = $otherid
----
0  0  11  22  33  0  0

# Clean up.
statement ok
DROP TENANT othertenant

# Now set the default template and try again.
statement ok
SET CLUSTER SETTING sql.create_tenant.default_template = 'nonexistent';

statement error retrieving default tenant configuration template.*tenant "nonexistent" does not exist
CREATE TENANT othertenant

statement ok
SET CLUSTER SETTING sql.create_tenant.default_template = 'tmpl';

# Create a new tenant - this should use the template implicitly now.
statement ok
CREATE TENANT othertenant

let $otherid
SELECT id FROM system.tenants WHERE name = 'othertenant'

# Verify the service mode was not copied.
query BTTT
SELECT id = $otherid, name, data_state, service_mode FROM [SHOW TENANT othertenant]
----
true  othertenant  ready  none

query TT
SELECT capability_name, capability_value FROM [SHOW TENANT tmpl WITH CAPABILITIES]
EXCEPT SELECT capability_name, capability_value FROM [SHOW TENANT othertenant WITH CAPABILITIES];
----

# Check the setting overrides were taken over.
query TTTT rowsort
SELECT variable, value, type, origin FROM [SHOW CLUSTER SETTINGS FOR TENANT othertenant]
WHERE origin != 'no-override'
----
trace.debug.enable  true  b  per-tenant-override

# Check that the resource usage parameters were copied.
query IIRRRRI
SELECT instance_id, next_instance_id,
       ru_burst_limit, ru_refill_rate, ru_current,
       current_share_sum, length(total_consumption)
FROM system.tenant_usage WHERE tenant_id = $otherid
----
0  0  11  22  33  0  0

# Clean up.
statement ok
DROP TENANT othertenant;
ALTER TENANT tmpl STOP SERVICE;
DROP TENANT tmpl

statement ok
RESET CLUSTER SETTING sql.create_tenant.default_template

subtest block_drop_virtual_cluster

statement ok
SET disable_drop_virtual_cluster = 'true'

statement ok
CREATE TENANT nodelete

statement error rejected.*irreversible data loss
DROP TENANT nodelete

statement ok
RESET disable_drop_virtual_cluster

statement ok
DROP TENANT nodelete

subtest regression_105115

statement ok
CREATE TENANT noservice

statement error shared service not enabled for tenant "noservice"
SET CLUSTER SETTING server.controller.default_tenant = noservice

statement ok
SET CLUSTER SETTING server.controller.default_tenant.check_service.enabled = false

statement ok
SET CLUSTER SETTING server.controller.default_tenant = noservice

statement ok
RESET CLUSTER SETTING server.controller.default_tenant.check_service.enabled

statement ok
RESET CLUSTER SETTING server.controller.default_tenant

statement ok
DROP TENANT noservice;
CREATE TENANT withservice;
ALTER TENANT withservice START SERVICE SHARED

statement ok
SET CLUSTER SETTING server.controller.default_tenant = withservice

statement error cannot stop service while tenant is selected as default
ALTER TENANT withservice STOP SERVICE

statement ok
SET CLUSTER SETTING server.controller.default_tenant.check_service.enabled = false

statement ok
ALTER TENANT withservice STOP SERVICE

# clean up
statement ok
RESET CLUSTER SETTING server.controller.default_tenant.check_service.enabled

statement ok
RESET CLUSTER SETTING server.controller.default_tenant

statement ok
DROP TENANT withservice
