# LogicTest: !3node-tenant-default-configs
query IBIT colnames
SELECT id, active, length(info), name FROM system.tenants ORDER BY id
----
id  active  length  name
1   true    20      system

# Create a few tenants.

statement ok
CREATE TENANT "tenant-one"

statement ok
CREATE TENANT "two"

statement error invalid tenant name
CREATE TENANT "ABC"

statement error invalid tenant name
CREATE TENANT "-a-"

# More than 100 characters.
statement error invalid tenant name
CREATE TENANT "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"

statement error invalid tenant name
CREATE TENANT "invalid_name"

statement error invalid tenant name
CREATE TENANT "invalid.name"

statement ok
CREATE TENANT three

query IBTT colnames
SELECT id, active, name, crdb_internal.pb_to_json('cockroach.sql.sqlbase.TenantInfo', info, true)
FROM system.tenants
ORDER BY id
----
id  active  name        crdb_internal.pb_to_json
1   true    system      {"capabilities": {"canAdminSplit": false}, "dataState": "READY", "droppedName": "", "id": "1", "name": "system", "serviceMode": "EXTERNAL", "tenantReplicationJobId": "0"}
2   true    tenant-one  {"capabilities": {"canAdminSplit": false}, "dataState": "READY", "droppedName": "", "id": "2", "name": "tenant-one", "serviceMode": "NONE", "tenantReplicationJobId": "0"}
3   true    two         {"capabilities": {"canAdminSplit": false}, "dataState": "READY", "droppedName": "", "id": "3", "name": "two", "serviceMode": "NONE", "tenantReplicationJobId": "0"}
4   true    three       {"capabilities": {"canAdminSplit": false}, "dataState": "READY", "droppedName": "", "id": "4", "name": "three", "serviceMode": "NONE", "tenantReplicationJobId": "0"}

query ITTT colnames
SHOW TENANT system
----
id  name    data_status  service_mode
1   system  READY        EXTERNAL

query ITTT colnames
SHOW TENANT "tenant-one"
----
id  name        data_status  service_mode
2   tenant-one  READY        NONE

query ITTT colnames
SHOW TENANT "two"
----
id  name  data_status  service_mode
3   two   READY        NONE

query ITTT colnames
SHOW TENANT two
----
id  name  data_status  service_mode
3   two   READY        NONE

query ITTT colnames
SHOW TENANT three
----
id  name   data_status  service_mode
4   three  READY        NONE

query ITTT colnames
SHOW TENANTS
----
id  name        data_status  service_mode
1   system      READY        EXTERNAL
2   tenant-one  READY        NONE
3   two         READY        NONE
4   three       READY        NONE

statement error tenant name cannot be empty
ALTER TENANT [4] RENAME TO ""

statement error tenant name cannot be NULL
ALTER TENANT [4] RENAME TO NULL

statement error invalid tenant name
ALTER TENANT [4] RENAME TO "a.b"

statement ok
ALTER TENANT [4] RENAME TO blux

statement ok
ALTER TENANT blux RENAME TO 'blix'

query ITTT colnames
SELECT * FROM [SHOW TENANTS] WHERE id = 4
----
id  name  data_status  service_mode
4   blix  READY        NONE

statement ok
ALTER TENANT blix RENAME TO three

query ITTT colnames
SELECT * FROM [SHOW TENANTS] WHERE id = 4
----
id  name   data_status  service_mode
4   three  READY        NONE

statement error tenant "seven" does not exist
SHOW TENANT seven

statement error pq: tenant "tenant-one" does not have an active replication job
SHOW TENANT "tenant-one" WITH REPLICATION STATUS

statement error pq: tenant "two" does not have an active replication job
SHOW TENANT two WITH REPLICATION STATUS

# Test creating a tenant with the same name as an existing tenant, but a unique
# ID.
statement error tenant with name "three" already exists
CREATE TENANT three;

statement ok
set default_transaction_read_only = on;

statement error cannot execute CREATE TENANT in a read-only transaction
CREATE TENANT four;

statement ok
set default_transaction_read_only = off;

user testuser

statement error only users with the admin role are allowed to create tenant
CREATE TENANT four

subtest drop_tenant
user root

statement error tenant "dne" does not exist
DROP TENANT dne

statement ok
DROP TENANT IF EXISTS dne

statement ok
CREATE TENANT four

query IBTT colnames
SELECT id, active, name, crdb_internal.pb_to_json('cockroach.sql.sqlbase.TenantInfo', info, true)
FROM system.tenants WHERE name = 'four'
ORDER BY id
----
id  active  name  crdb_internal.pb_to_json
5   true    four  {"capabilities": {"canAdminSplit": false}, "dataState": "READY", "droppedName": "", "id": "5", "name": "four", "serviceMode": "NONE", "tenantReplicationJobId": "0"}

statement ok
DROP TENANT four

query IBTT colnames
SELECT id, active, name, crdb_internal.pb_to_json('cockroach.sql.sqlbase.TenantInfo', info, true)
FROM system.tenants WHERE name = 'four'
ORDER BY id
----
id  active  name  crdb_internal.pb_to_json

statement error tenant "four" does not exist
SHOW TENANT four

statement ok
CREATE TENANT "five-requiring-quotes"

statement ok
DROP TENANT "five-requiring-quotes"

statement ok
set default_transaction_read_only = on;

statement error cannot execute DROP TENANT in a read-only transaction
DROP TENANT three

statement ok
set default_transaction_read_only = off;

user testuser

statement error only users with the admin role are allowed to drop tenant
DROP TENANT three

statement error only users with the admin role are allowed to show tenant
SHOW TENANTS

user root

subtest read_only

statement ok
SET default_transaction_read_only = true

statement error cannot execute.*in a read-only transaction
DROP TENANT three

statement error cannot execute.*in a read-only transaction
ALTER TENANT three RENAME TO blah

statement error cannot execute.*in a read-only transaction
CREATE TENANT "read-only"

statement ok
SET default_transaction_read_only = false

subtest reclaim_name

statement ok
CREATE TENANT "to-be-reclaimed"

statement ok
DROP TENANT "to-be-reclaimed"

statement ok
CREATE TENANT "to-be-reclaimed"

query IBTT colnames
SELECT id, active, name, crdb_internal.pb_to_json('cockroach.sql.sqlbase.TenantInfo', info, true)
FROM system.tenants
ORDER BY id
----
id  active  name             crdb_internal.pb_to_json
1   true    system           {"capabilities": {"canAdminSplit": false}, "dataState": "READY", "droppedName": "", "id": "1", "name": "system", "serviceMode": "EXTERNAL", "tenantReplicationJobId": "0"}
2   true    tenant-one       {"capabilities": {"canAdminSplit": false}, "dataState": "READY", "droppedName": "", "id": "2", "name": "tenant-one", "serviceMode": "NONE", "tenantReplicationJobId": "0"}
3   true    two              {"capabilities": {"canAdminSplit": false}, "dataState": "READY", "droppedName": "", "id": "3", "name": "two", "serviceMode": "NONE", "tenantReplicationJobId": "0"}
4   true    three            {"capabilities": {"canAdminSplit": false}, "dataState": "READY", "droppedName": "", "id": "4", "name": "three", "serviceMode": "NONE", "tenantReplicationJobId": "0"}
5   false   NULL             {"capabilities": {"canAdminSplit": false}, "dataState": "DROP", "droppedName": "four", "id": "5", "name": "", "serviceMode": "NONE", "tenantReplicationJobId": "0"}
6   false   NULL             {"capabilities": {"canAdminSplit": false}, "dataState": "DROP", "droppedName": "five-requiring-quotes", "id": "6", "name": "", "serviceMode": "NONE", "tenantReplicationJobId": "0"}
7   false   NULL             {"capabilities": {"canAdminSplit": false}, "dataState": "DROP", "droppedName": "to-be-reclaimed", "id": "7", "name": "", "serviceMode": "NONE", "tenantReplicationJobId": "0"}
8   true    to-be-reclaimed  {"capabilities": {"canAdminSplit": false}, "dataState": "READY", "droppedName": "", "id": "8", "name": "to-be-reclaimed", "serviceMode": "NONE", "tenantReplicationJobId": "0"}

# More valid tenant names.
statement ok
CREATE TENANT "1";
CREATE TENANT "a-b";
CREATE TENANT "hello-100"

query ITTT colnames
SHOW TENANTS
----
id  name             data_status  service_mode
1   system           READY        EXTERNAL
2   tenant-one       READY        NONE
3   two              READY        NONE
4   three            READY        NONE
8   to-be-reclaimed  READY        NONE
9   1                READY        NONE
10  a-b              READY        NONE
11  hello-100        READY        NONE
