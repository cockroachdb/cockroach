# LogicTest: !local-mixed-22.2-23.1

subtest select_for_update

# SELECT FOR UPDATE is prohibited under weaker isolation levels until we improve
# locking. See #57031, #75457, #100144, #100193.

statement ok
CREATE TABLE supermarket (
  person STRING PRIMARY KEY,
  aisle INT NOT NULL,
  starts_with STRING GENERATED ALWAYS AS (left(person, 1)) STORED,
  ends_with STRING GENERATED ALWAYS AS (right(person, 3)) STORED,
  INDEX (starts_with),
  INDEX (ends_with)
)

statement ok
INSERT INTO supermarket (person, aisle)
  VALUES ('abbie', 1), ('gideon', 2), ('matilda', 3), ('michael', 4)

# SELECT FOR UPDATE should still work under serializable isolation.
statement ok
BEGIN

query I
SELECT aisle FROM supermarket WHERE person = 'gideon' FOR UPDATE
----
2

statement ok
UPDATE supermarket SET aisle = 2 WHERE person = 'abbie'

statement ok
COMMIT

# It should fail under read committed isolation.
statement ok
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED

query error pgcode 0A000 guaranteed-durable locking not yet implemented
SELECT aisle FROM supermarket WHERE person = 'matilda' FOR UPDATE

statement ok
ROLLBACK

# It should also fail under snapshot isolation.
statement ok
SET CLUSTER SETTING sql.txn.snapshot_isolation.enabled = true

statement ok
BEGIN TRANSACTION ISOLATION LEVEL SNAPSHOT

query error pgcode 0A000 guaranteed-durable locking not yet implemented
SELECT aisle FROM supermarket WHERE person = 'matilda' FOR UPDATE

statement ok
ROLLBACK

statement ok
RESET CLUSTER SETTING sql.txn.snapshot_isolation.enabled

# SELECT FOR UPDATE in a subquery should also fail under read committed.
statement ok
BEGIN TRANSACTION

statement ok
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

query error pgcode 0A000 guaranteed-durable locking not yet implemented
UPDATE supermarket
  SET aisle = (SELECT aisle FROM supermarket WHERE person = 'matilda' FOR UPDATE)
  WHERE person = 'michael'

statement ok
ROLLBACK

# It should also fail in a CTE.
statement ok
BEGIN TRANSACTION

statement ok
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

query error pgcode 0A000 guaranteed-durable locking not yet implemented
WITH s AS
  (SELECT aisle FROM supermarket WHERE person = 'matilda' FOR UPDATE)
SELECT aisle + 1 FROM s

statement ok
ROLLBACK

statement ok
CREATE FUNCTION wrangle (name STRING) RETURNS INT LANGUAGE SQL AS $$
  SELECT aisle FROM supermarket WHERE person = name FOR UPDATE
$$

statement ok
SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL READ COMMITTED

# But calling that function should fail.
query error pgcode 0A000 guaranteed-durable locking not yet implemented
INSERT INTO supermarket (person, aisle) VALUES ('grandma', wrangle('matilda'))

statement ok
SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL SERIALIZABLE

statement ok
DROP FUNCTION wrangle

statement ok
SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL READ COMMITTED

# Preparing a SELECT FOR UPDATE should succeed under read committed.
statement ok
PREPARE psa AS SELECT aisle FROM supermarket WHERE person = $1::STRING FOR UPDATE

# But execution should fail.
query error pgcode 0A000 guaranteed-durable locking not yet implemented
EXECUTE psa('matilda')

statement ok
DEALLOCATE psa

# SELECT FOR UPDATE using a lookup join should also fail.
query error pgcode 0A000 guaranteed-durable locking not yet implemented
WITH names AS MATERIALIZED
  (SELECT 'matilda' AS person)
SELECT aisle
  FROM names
  NATURAL INNER LOOKUP JOIN supermarket
  FOR UPDATE

# SELECT FOR UPDATE using an index join should also fail.
query error pgcode 0A000 guaranteed-durable locking not yet implemented
SELECT aisle
  FROM supermarket@supermarket_starts_with_idx
  WHERE starts_with = 'm'
  FOR UPDATE

# SELECT FOR UPDATE using a zigzag join should also fail.
statement ok
SET enable_zigzag_join = true

query error pgcode 0A000 guaranteed-durable locking not yet implemented
SELECT aisle
  FROM supermarket@{FORCE_ZIGZAG}
  WHERE starts_with = 'm' AND ends_with = 'lda'
  FOR UPDATE

statement ok
RESET enable_zigzag_join

subtest end

subtest schema_changes_implicit

# Schema changes in implicit READ COMMITTED transactions cause the transaction
# to be promoted to SERIALIZABLE.

query T noticetrace
ALTER TABLE supermarket ADD COLUMN age INT
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
CREATE TABLE foo(a INT)
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
DROP TABLE supermarket
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
DROP USER testuser
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
CREATE USER testuser
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
GRANT admin TO testuser
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
GRANT SELECT ON foo TO testuser
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
GRANT USAGE ON SCHEMA public TO testuser
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
CREATE INDEX foo_idx ON foo(a)
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
CREATE FUNCTION f (x INT) RETURNS INT LANGUAGE SQL AS $$
  SELECT x+1
$$
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
ALTER FUNCTION f (x INT) RENAME TO g
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
GRANT EXECUTE ON FUNCTION g (x INT) TO testuser
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
CREATE TYPE typ AS ENUM('a', 'b')
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
ALTER TYPE typ ADD VALUE 'c'
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
GRANT USAGE ON TYPE typ TO testuser
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
CREATE DATABASE foo
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
GRANT CONNECT ON DATABASE foo TO testuser
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
ALTER DATABASE foo RENAME TO foo2
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
CREATE SCHEMA s
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

query T noticetrace
ALTER SCHEMA s RENAME TO foo
----
NOTICE: setting implicit transaction isolation level to SERIALIZABLE due to schema change

subtest schema_changes_explicit
# Schema changes are prohibited under explicit transactions with weak isolation levels.

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
ALTER TABLE supermarket ADD COLUMN age INT

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
CREATE TABLE foo(a INT)

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
DROP TABLE supermarket

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
CREATE USER foo

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
DROP USER testuser

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
GRANT admin TO testuser

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
GRANT SELECT ON supermarket TO testuser

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
GRANT USAGE ON SCHEMA public TO testuser

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
GRANT CONNECT ON DATABASE postgres TO testuser

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
CREATE INDEX foo ON supermarket(ends_with, starts_with)

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
CREATE FUNCTION f (x INT) RETURNS INT LANGUAGE SQL AS $$
  SELECT x+1
$$

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
ALTER FUNCTION f (x INT) RENAME TO g

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
GRANT EXECUTE ON FUNCTION f (x INT) TO testuser

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
CREATE TYPE typ AS ENUM('a', 'b')

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
ALTER TYPE typ ADD VALUE 'c'

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
GRANT USAGE ON TYPE typ TO testuser

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
CREATE DATABASE foo

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
ALTER DATABASE postgres RENAME TO foo

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
CREATE SCHEMA s

statement ok
ROLLBACK

statement error transaction involving a schema change needs to be SERIALIZABLE
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
ALTER SCHEMA s RENAME TO foo

statement ok
ROLLBACK

subtest end

statement ok
SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL SERIALIZABLE
