statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  BEGIN
    RETURN a;
  END
$$ LANGUAGE PLpgSQL;

query I
SELECT f(1, 2);
----
1

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  BEGIN
    RETURN a + b;
  END
$$ LANGUAGE PLpgSQL;

query I
SELECT f(1, 2);
----
3

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    c INT;
  BEGIN
    RETURN c;
  END
$$ LANGUAGE PLpgSQL;

query I
SELECT f(1, 2);
----
NULL

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    c INT := 0;
  BEGIN
    RETURN c;
  END
$$ LANGUAGE PLpgSQL;

query I
SELECT f(1, 2);
----
0

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    c INT;
  BEGIN
    c := 0;
    RETURN c;
  END
$$ LANGUAGE PLpgSQL;

query I
SELECT f(1, 2);
----
0

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    c INT;
  BEGIN
    IF a < b THEN
      c := a;
    END IF;
    RETURN c;
  END
$$ LANGUAGE PLpgSQL;

query II
SELECT f(1, 2), f(4, 3);
----
1  NULL

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    c INT;
  BEGIN
    IF a < b THEN
      c := a;
    ELSE
      c := b;
    END IF;
    RETURN c;
  END
$$ LANGUAGE PLpgSQL;

query II
SELECT f(1, 2), f(4, 3);
----
1  3

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    c INT;
  BEGIN
    IF a < b THEN
      c := a;
    ELSE
      RETURN 100;
    END IF;
    RETURN c;
  END
$$ LANGUAGE PLpgSQL;

query III
SELECT f(1, 2), f(4, 3), f(-1, -1);
----
1  100  100

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    c INT;
  BEGIN
    IF a < b THEN
      RETURN 100;
    ELSE
      c := b;
    END IF;
    RETURN c;
  END
$$ LANGUAGE PLpgSQL;

query III
SELECT f(1, 2), f(4, 3), f(-1, -1);
----
100  3  -1

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    c INT;
  BEGIN
    IF a < b THEN
      RETURN 100;
    ELSE
      RETURN 0;
    END IF;
  END
$$ LANGUAGE PLpgSQL;

query III
SELECT f(1, 2), f(4, 3), f(-1, -1);
----
100  0  0

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    i INT := a;
  BEGIN
    LOOP
      RETURN 100;
    END LOOP;
  END
$$ LANGUAGE PLpgSQL;

query III
SELECT f(1, 5), f(0, 1), f(1, 1);
----
100  100  100

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    i INT := a;
  BEGIN
    LOOP
      IF a < b THEN
        RETURN 0;
      END IF;
      RETURN 100;
    END LOOP;
  END
$$ LANGUAGE PLpgSQL;

query III
SELECT f(0, 1), f(1, 1), f(1, 0);
----
0  100  100

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    i INT := a;
  BEGIN
    LOOP
      IF i >= b THEN EXIT; END IF;
      IF i = 8 THEN RETURN 100; END IF;
      i := i + 1;
    END LOOP;
    RETURN i;
  END
$$ LANGUAGE PLpgSQL;

query IIIII
SELECT f(1, 5), f(0, 1), f(1, 1), f(8, 9), f(1, 100);
----
5  1  1  100  100

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    i INT := a;
  BEGIN
    LOOP
      IF i >= b THEN EXIT; END IF;
      i := i + 1;
    END LOOP;
    RETURN i;
  END
$$ LANGUAGE PLpgSQL;

query III
SELECT f(1, 5), f(0, 1), f(1, 1);
----
5  1  1

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    sum INT := 0;
    i INT := a;
  BEGIN
    IF a IS NOT NULL AND b is NOT NULL THEN
      LOOP
        IF i >= b THEN EXIT; END IF;
        sum := sum + i;
        i := i + 1;
      END LOOP;
    END IF;
    RETURN sum;
  END
$$ LANGUAGE PLpgSQL;

query II
SELECT f(0, 0), f(0, 1);
----
0  0

query II
SELECT f(5, -5), f(10, 10);
----
0  0

query III
SELECT f(NULL, 10), f(0, NULL), f(NULL, NULL);
----
0  0  0

query IIIII
SELECT f(0, 5), f(1, 5), f(1, 6), f(-5, 5), f(-5, 0);
----
10  10  15  -5  -15

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    sum INT := 0;
    i INT := a;
  BEGIN
    LOOP
      IF i >= b THEN EXIT; END IF;
      IF i = 2 THEN 
        i := i + 1;
        CONTINUE;
      END IF;
      sum := sum + i;
      i := i + 1;
    END LOOP;
    RETURN sum;
  END
$$ LANGUAGE PLpgSQL;

query II
SELECT f(5, -5), f(10, 10);
----
0  0

query IIIII
SELECT f(0, 5), f(1, 5), f(1, 6), f(-5, 5), f(-5, 0);
----
8  8  13  -7  -15

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    sum INT := 0;
    i INT := a;
    j INT;
  BEGIN
    LOOP
      IF i >= b THEN EXIT; END IF;
      j := 0;
      LOOP
        IF j >= i THEN EXIT; END IF;
        sum := sum + j;
        j := j + 1;
      END LOOP;
      i := i + 1;
    END LOOP;
    RETURN sum;
  END
$$ LANGUAGE PLpgSQL;

query III
SELECT f(1, 5), f(-5, 5), f(0, 1)
----
10  10  0

# Dijkstra's Algorithm
#
#        ┌─┬────8──┬─┬──7────┬─┐
#  ┌─────┤1│       │2│       │3├─────┐
#  │     └┬┘       └┬┴───┐   └┬┘     │
#  │      │         │    │    │      │
#  4      │         2    │    │      9
#  │      │         │    │    │      │
# ┌┴┐     │        ┌┴┐   │    │     ┌┴┐
# │0│    11    ┌───┤8│   │    14    │4│
# └┬┘     │    │   └┬┘   │    │     └┬┘
#  │      │    7    │    │    │      │
#  8      │    │    6    │    │      10
#  │      │    │    │    │    │      │
#  │     ┌┴┬───┘   ┌┴┐   └───┬┴┐     │
#  └─────┤7│       │6│       │5├─────┘
#        └─┴────1──┴─┴──4────┴─┘
#
# Encode the graph as a series of undirected edges, where "a" and "b" are the
# "to" and "from" nodes and "weight" is the weight of the edge.
statement ok
CREATE TABLE edges (a INT, b INT, weight INT);
INSERT INTO edges VALUES
(0, 1, 4),
(0, 7, 8),
(1, 7, 11),
(1, 2, 8),
(2, 8, 2),
(7, 8, 7),
(7, 6, 1),
(6, 8, 6),
(2, 5, 4),
(5, 6, 2),
(2, 3, 7),
(3, 5, 14),
(3, 4, 9),
(4, 5, 10);

# Get the number of vertexes in the graph.
statement ok
CREATE FUNCTION vertexes() RETURNS INT AS $$ SELECT max(greatest(a, b)) + 1 FROM edges $$ LANGUAGE SQL;

# Get the maximum int32 value.
statement ok
CREATE FUNCTION max_int() RETURNS INT AS $$ SELECT 2147483647 $$ LANGUAGE SQL;

# Get the weight of the edge between the two given nodes, if any.
statement ok
CREATE FUNCTION graph(x INT, y INT) RETURNS INT AS $$
  SELECT coalesce((SELECT weight FROM edges WHERE (a = x AND b = y) OR (a = y AND b = x) LIMIT 1), 0);
$$ LANGUAGE SQL;

# Replace the element at the given index of the array with the given value.
statement ok
CREATE FUNCTION replace(arr INT[], idx INT, val INT) RETURNS INT[] AS $$
  DECLARE
    i INT;
    n INT := array_length(arr, 1);
    res INT[] := ARRAY[]::INT[];
  BEGIN
    i := 0;
    LOOP
      IF i = idx THEN
        res := res || val;
      ELSE
        res := res || arr[i+1];
      END IF;
    i := i + 1;
    IF i >= n THEN EXIT; END IF;
    END LOOP;
    RETURN res;
  END
$$ LANGUAGE PLpgSQL;

# Return the node with the minimum distance from the source node known so far
# out of the nodes that don't already have a shortest path calculated.
statement ok
CREATE FUNCTION min_distance(dist INT[], spt_set INT[]) RETURNS INT AS $$
  DECLARE
    n INT := vertexes();
    i INT;
    min INT := max_int();
    min_index INT := 0;
  BEGIN
    i := 0;
    LOOP
      IF spt_set[i+1] = 0 AND dist[i+1] <= min THEN
        min := dist[i+1];
        min_index := i;
      END IF;
    i := i + 1;
    IF i >= n THEN EXIT; END IF;
    END LOOP;
    RETURN min_index;
  END
$$ LANGUAGE PLPGSQL;

# Implement dijkstra's algorithm using the "edges" table.
statement ok
CREATE FUNCTION dijkstra(src INT) RETURNS INT[] AS $$
  DECLARE
    n INT := vertexes();
    i INT;
    count INT;
    dist INT[] := ARRAY[]::INT[];
    spt_set INT[] := ARRAY[]::INT[];
    u INT;
  BEGIN
    i := 0;
    LOOP
      dist := dist || max_int();
      spt_set := spt_set || 0;
      i := i + 1;
      IF i >= n THEN EXIT; END IF;
    END LOOP;
    dist := replace(dist, src, 0);
    count := 0;
    LOOP
      u := min_distance(dist, spt_set);
      spt_set := replace(spt_set, u, 1);
      i := 0;
      LOOP
        IF
          spt_set[i+1] = 0 AND
          graph(u, i) > 0 AND
          dist[u+1] <> max_int() AND
          dist[u+1] + graph(u, i) < dist[i+1]
        THEN
          dist := replace(dist, i, dist[u+1] + graph(u, i));
        END IF;
      i := i + 1;
      IF i >= n THEN EXIT; END IF;
      END LOOP;
    count := count + 1;
    IF count >= n THEN EXIT; END IF;
    END LOOP;
    RETURN dist;
  END
$$ LANGUAGE PLPGSQL;

# Run dijkstra's algorithm using node 0 as the source.
query II nosort,colnames
SELECT i AS "Vertex", dist[i+1] AS "Distance From Source"
FROM generate_series(0, vertexes() - 1) f(i), dijkstra(0) g(dist);
----
Vertex  Distance From Source
0       0
1       4
2       12
3       19
4       21
5       11
6       9
7       8
8       14

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  BEGIN
  END
$$ LANGUAGE PLpgSQL;

statement error control reached end of function without RETURN
SELECT f(1, 2);

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    i INT;
  BEGIN
    i := a;
  END
$$ LANGUAGE PLpgSQL;

statement error control reached end of function without RETURN
SELECT f(1, 2);

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  BEGIN
    IF a < b THEN
      RETURN a;
    END IF;
  END
$$ LANGUAGE PLpgSQL;

statement error control reached end of function without RETURN
SELECT f(1, 2);

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    i INT;
  BEGIN
    IF a < b THEN
      i := a;
    ELSE
      RETURN 0;
    END IF;
  END
$$ LANGUAGE PLpgSQL;

statement error control reached end of function without RETURN
SELECT f(1, 2);

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  BEGIN
    LOOP
      EXIT;
    END LOOP;
  END
$$ LANGUAGE PLpgSQL;

statement error control reached end of function without RETURN
SELECT f(1, 2);

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  BEGIN
    LOOP
      EXIT;
    END LOOP;
    IF a < b THEN
      RETURN 0;
    END IF;
  END
$$ LANGUAGE PLpgSQL;

statement error control reached end of function without RETURN
SELECT f(1, 2);

statement error PL/pgSQL functions with RECORD input arguments are not yet supported
CREATE FUNCTION f_err(p1 RECORD) RETURNS RECORD AS $$
  BEGIN
   RETURN p1;
 END
$$ LANGUAGE PLpgSQL;
