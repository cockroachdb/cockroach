statement ok
CREATE TABLE xy (x INT, y INT);
INSERT INTO xy VALUES (1, 2), (3, 4);

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  BEGIN
    RETURN a;
  END
$$ LANGUAGE PLpgSQL;

query I
SELECT f(1, 2);
----
1

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  BEGIN
    RETURN a + b;
  END
$$ LANGUAGE PLpgSQL;

query I
SELECT f(1, 2);
----
3

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    c INT;
  BEGIN
    RETURN c;
  END
$$ LANGUAGE PLpgSQL;

query I
SELECT f(1, 2);
----
NULL

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    c INT := 0;
  BEGIN
    RETURN c;
  END
$$ LANGUAGE PLpgSQL;

query I
SELECT f(1, 2);
----
0

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    c INT;
  BEGIN
    c := 0;
    RETURN c;
  END
$$ LANGUAGE PLpgSQL;

query I
SELECT f(1, 2);
----
0

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    c INT;
  BEGIN
    IF a < b THEN
      c := a;
    END IF;
    RETURN c;
  END
$$ LANGUAGE PLpgSQL;

query II
SELECT f(1, 2), f(4, 3);
----
1  NULL

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    c INT;
  BEGIN
    IF a < b THEN
      c := a;
    ELSE
      c := b;
    END IF;
    RETURN c;
  END
$$ LANGUAGE PLpgSQL;

query II
SELECT f(1, 2), f(4, 3);
----
1  3

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    c INT;
  BEGIN
    IF a < b THEN
      c := a;
    ELSE
      RETURN 100;
    END IF;
    RETURN c;
  END
$$ LANGUAGE PLpgSQL;

query III
SELECT f(1, 2), f(4, 3), f(-1, -1);
----
1  100  100

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    c INT;
  BEGIN
    IF a < b THEN
      RETURN 100;
    ELSE
      c := b;
    END IF;
    RETURN c;
  END
$$ LANGUAGE PLpgSQL;

query III
SELECT f(1, 2), f(4, 3), f(-1, -1);
----
100  3  -1

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    c INT;
  BEGIN
    IF a < b THEN
      RETURN 100;
    ELSE
      RETURN 0;
    END IF;
  END
$$ LANGUAGE PLpgSQL;

query III
SELECT f(1, 2), f(4, 3), f(-1, -1);
----
100  0  0

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    i INT := a;
  BEGIN
    LOOP
      RETURN 100;
    END LOOP;
  END
$$ LANGUAGE PLpgSQL;

query III
SELECT f(1, 5), f(0, 1), f(1, 1);
----
100  100  100

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    i INT := a;
  BEGIN
    LOOP
      IF a < b THEN
        RETURN 0;
      END IF;
      RETURN 100;
    END LOOP;
  END
$$ LANGUAGE PLpgSQL;

query III
SELECT f(0, 1), f(1, 1), f(1, 0);
----
0  100  100

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    i INT := a;
  BEGIN
    LOOP
      IF i >= b THEN EXIT; END IF;
      IF i = 8 THEN RETURN 100; END IF;
      i := i + 1;
    END LOOP;
    RETURN i;
  END
$$ LANGUAGE PLpgSQL;

query IIIII
SELECT f(1, 5), f(0, 1), f(1, 1), f(8, 9), f(1, 100);
----
5  1  1  100  100

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    i INT := a;
  BEGIN
    LOOP
      IF i >= b THEN EXIT; END IF;
      i := i + 1;
    END LOOP;
    RETURN i;
  END
$$ LANGUAGE PLpgSQL;

query III
SELECT f(1, 5), f(0, 1), f(1, 1);
----
5  1  1

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    sum INT := 0;
    i INT := a;
  BEGIN
    IF a IS NOT NULL AND b is NOT NULL THEN
      LOOP
        IF i >= b THEN EXIT; END IF;
        sum := sum + i;
        i := i + 1;
      END LOOP;
    END IF;
    RETURN sum;
  END
$$ LANGUAGE PLpgSQL;

query II
SELECT f(0, 0), f(0, 1);
----
0  0

query II
SELECT f(5, -5), f(10, 10);
----
0  0

query III
SELECT f(NULL, 10), f(0, NULL), f(NULL, NULL);
----
0  0  0

query IIIII
SELECT f(0, 5), f(1, 5), f(1, 6), f(-5, 5), f(-5, 0);
----
10  10  15  -5  -15

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    sum INT := 0;
    i INT := a;
  BEGIN
    LOOP
      IF i >= b THEN EXIT; END IF;
      IF i = 2 THEN 
        i := i + 1;
        CONTINUE;
      END IF;
      sum := sum + i;
      i := i + 1;
    END LOOP;
    RETURN sum;
  END
$$ LANGUAGE PLpgSQL;

query II
SELECT f(5, -5), f(10, 10);
----
0  0

query IIIII
SELECT f(0, 5), f(1, 5), f(1, 6), f(-5, 5), f(-5, 0);
----
8  8  13  -7  -15

statement ok
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    sum INT := 0;
    i INT := a;
    j INT;
  BEGIN
    LOOP
      IF i >= b THEN EXIT; END IF;
      j := 0;
      LOOP
        IF j >= i THEN EXIT; END IF;
        sum := sum + j;
        j := j + 1;
      END LOOP;
      i := i + 1;
    END LOOP;
    RETURN sum;
  END
$$ LANGUAGE PLpgSQL;

query III
SELECT f(1, 5), f(-5, 5), f(0, 1)
----
10  10  0

# TODO(drewk): add back the dijkstra test once UDFs calling other UDFs is
# allowed.

statement error pgcode 2F005 control reached end of function without RETURN
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  BEGIN
  END
$$ LANGUAGE PLpgSQL;

statement error pgcode 2F005 control reached end of function without RETURN
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    i INT;
  BEGIN
    i := a;
  END
$$ LANGUAGE PLpgSQL;

statement error pgcode 2F005 control reached end of function without RETURN
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  BEGIN
    IF a < b THEN
      RETURN a;
    END IF;
  END
$$ LANGUAGE PLpgSQL;

statement error pgcode 2F005 control reached end of function without RETURN
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  DECLARE
    i INT;
  BEGIN
    IF a < b THEN
      i := a;
    ELSE
      RETURN 0;
    END IF;
  END
$$ LANGUAGE PLpgSQL;

statement error pgcode 2F005 control reached end of function without RETURN
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  BEGIN
    LOOP
      EXIT;
    END LOOP;
  END
$$ LANGUAGE PLpgSQL;

statement error pgcode 2F005 control reached end of function without RETURN
CREATE OR REPLACE FUNCTION f(a INT, b INT) RETURNS INT AS $$
  BEGIN
    LOOP
      EXIT;
    END LOOP;
    IF a < b THEN
      RETURN 0;
    END IF;
  END
$$ LANGUAGE PLpgSQL;

statement error pgcode 0A000 PL/pgSQL functions with RECORD input arguments are not yet supported
CREATE FUNCTION f_err(p1 RECORD) RETURNS RECORD AS $$
  BEGIN
   RETURN p1;
 END
$$ LANGUAGE PLpgSQL;

# Testing RAISE statements.
statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    RAISE DEBUG 'foo';
    RAISE LOG 'foo';
    RAISE INFO 'foo';
    RAISE NOTICE 'foo';
    RAISE WARNING 'foo';
    return 0;
  END
$$ LANGUAGE PLpgSQL;

query T noticetrace
SELECT f();
----
INFO: foo
NOTICE: foo
WARNING: foo

statement ok
SET client_min_messages = 'debug1';

query T noticetrace
SELECT f();
----
DEBUG1: foo
LOG: foo
INFO: foo
NOTICE: foo
WARNING: foo

statement ok
RESET client_min_messages;

statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    RAISE NOTICE '%', 1;
    RAISE NOTICE 'foo: %, %, %', 1, 2, 3;
    RAISE NOTICE '%%';
    RAISE NOTICE '%%%', 1;
    RAISE NOTICE '%%%foo%% bar%%%% %% %%%% ba%z%', 1, 2, 3;
    RETURN 0;
  END
$$ LANGUAGE PLpgSQL;

query T noticetrace
SELECT f();
----
NOTICE: 1
NOTICE: foo: 1, 2, 3
NOTICE: %
NOTICE: %1
NOTICE: %1foo% bar%% % %% ba2z3

statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    RAISE NOTICE division_by_zero;
    RAISE NOTICE null_value_not_allowed;
    RAISE NOTICE reading_sql_data_not_permitted;
    RAISE NOTICE SQLSTATE '22012';
    RAISE NOTICE SQLSTATE '22004';
    RAISE NOTICE SQLSTATE '39004';
    RAISE NOTICE SQLSTATE '2F004';
    RAISE NOTICE SQLSTATE '38004';
    return 0;
  END
$$ LANGUAGE PLpgSQL;

query T noticetrace
SELECT f();
----
NOTICE: division_by_zero
SQLSTATE: 22012
NOTICE: null_value_not_allowed
SQLSTATE: 22004
NOTICE: reading_sql_data_not_permitted
SQLSTATE: 2F004
NOTICE: 22012
SQLSTATE: 22012
NOTICE: 22004
SQLSTATE: 22004
NOTICE: 39004
SQLSTATE: 39004
NOTICE: 2F004
SQLSTATE: 2F004
NOTICE: 38004
SQLSTATE: 38004

statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    RAISE NOTICE USING MESSAGE = 'foo';
    RAISE NOTICE USING MESSAGE = format('%s %s!','Hello','World');
    RAISE NOTICE USING MESSAGE = 'foo', DETAIL = 'bar', HINT = 'baz';
    RAISE NOTICE 'foo' USING ERRCODE = 'division_by_zero';
    RAISE NOTICE 'foo' USING ERRCODE = '22012';
    -- If no message is specified, the error code is used.
    RAISE NOTICE USING ERRCODE = 'division_by_zero';
    RETURN 0;
  END
$$ LANGUAGE PLpgSQL;

query T noticetrace
SELECT f();
----
NOTICE: foo
NOTICE: Hello World!
NOTICE: foo
DETAIL: bar
HINT: baz
NOTICE: foo
SQLSTATE: 22012
NOTICE: foo
SQLSTATE: 22012
NOTICE: division_by_zero
SQLSTATE: 22012

statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  DECLARE
    i INT := 0;
  BEGIN
    RAISE NOTICE '1: i = %', i;
    i := 100;
    RAISE NOTICE '2: i = %', i;
    i := (SELECT count(*) FROM xy);
    RAISE NOTICE '3: i = %', i;
    RAISE NOTICE 'max_x: %', (SELECT max(x) FROM xy);
    return i;
  END
$$ LANGUAGE PLpgSQL;

query T noticetrace
SELECT f();
----
NOTICE: 1: i = 0
NOTICE: 2: i = 100
NOTICE: 3: i = 2
NOTICE: max_x: 3

statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  DECLARE
    i INT := 0;
  BEGIN
    LOOP
      IF i >= 5 THEN EXIT; END IF;
      RAISE NOTICE 'i = %', i;
      i := i + 1;
    END LOOP;
    RAISE NOTICE 'finished with i = %', i;
    RETURN 0;
  END
$$ LANGUAGE PLpgSQL;

query T noticetrace
SELECT f();
----
NOTICE: i = 0
NOTICE: i = 1
NOTICE: i = 2
NOTICE: i = 3
NOTICE: i = 4
NOTICE: finished with i = 5

# Testing RAISE statement with EXCEPTION log level.
statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    RAISE EXCEPTION 'foo';
    return 0;
  END
$$ LANGUAGE PLpgSQL;

query error pgcode P0001 pq: foo
SELECT f();

statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    RAISE EXCEPTION division_by_zero;
    return 0;
  END
$$ LANGUAGE PLpgSQL;

query error pgcode 22012 pq: division_by_zero
SELECT f();

statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    RAISE EXCEPTION SQLSTATE '22012';
    return 0;
  END
$$ LANGUAGE PLpgSQL;

query error pgcode 22012 pq: 22012
SELECT f();

statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  DECLARE
    i INT := 0;
  BEGIN
    LOOP
      IF i >= 5 THEN EXIT; END IF;
      IF i = 3 THEN
        RAISE EXCEPTION 'i = %', i;
      END IF;
      RAISE NOTICE 'i = %', i;
      i := i + 1;
    END LOOP;
    RAISE NOTICE 'finished with i = %', i;
    RETURN 0;
  END
$$ LANGUAGE PLpgSQL;

query error pgcode P0001 pq: i = 3
SELECT f();

statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    RAISE EXCEPTION USING ERRCODE = 'division_by_zero';
    return 0;
  END
$$ LANGUAGE PLpgSQL;

query error pgcode 22012 pq: division_by_zero
SELECT f();

statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    RAISE EXCEPTION USING ERRCODE = '22012';
    return 0;
  END
$$ LANGUAGE PLpgSQL;

query error pgcode 22012 pq: 22012
SELECT f();

statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    RAISE EXCEPTION USING DETAIL = 'use default errcode for the code and message';
    return 0;
  END
$$ LANGUAGE PLpgSQL;

query error pgcode P0001 pq: P0001\nDETAIL: use default errcode for the code and message
SELECT f();

# The default level is ERROR.
statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    RAISE 'foo';
    return 0;
  END
$$ LANGUAGE PLpgSQL;

query error pgcode P0001 pq: foo
SELECT f();

statement error pgcode 42601 pq: too few parameters specified for RAISE
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    RAISE 'foo% % %', 1, 2;
    RETURN 0;
  END
$$ LANGUAGE PLpgSQL;

statement error pgcode 42601 pq: too many parameters specified for RAISE
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    RAISE 'foo%', 1, 2;
    RETURN 0;
  END
$$ LANGUAGE PLpgSQL;

statement error pgcode 42601 pq: RAISE option already specified: ERRCODE
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    RAISE EXCEPTION USING ERRCODE = '22012', ERRCODE = '22013';
    return 0;
  END
$$ LANGUAGE PLpgSQL;

statement error pgcode 42601 pq: \"i\" is not a known variable
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    i := 0;
    RETURN i;
  END
$$ LANGUAGE PLpgSQL;

statement error pgcode 42601 CONTINUE cannot be used outside a loop
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    CONTINUE;
    RETURN i;
  END
$$ LANGUAGE PLpgSQL;

statement error pgcode 42601 EXIT cannot be used outside a loop, unless it has a label
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  BEGIN
    EXIT;
    RETURN i;
  END
$$ LANGUAGE PLpgSQL;

statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  DECLARE
    i CONSTANT INT;
  BEGIN
    RETURN i;
  END
$$ LANGUAGE PLpgSQL;

query I
SELECT f();
----
NULL

statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  DECLARE
    i CONSTANT INT := 0;
  BEGIN
    RETURN i;
  END
$$ LANGUAGE PLpgSQL;

query I
SELECT f();
----
0

statement ok
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  DECLARE
    i CONSTANT INT := (SELECT x FROM xy ORDER BY x LIMIT 1);
  BEGIN
    RETURN i;
  END
$$ LANGUAGE PLpgSQL;

query I
SELECT f();
----
1

statement ok
CREATE OR REPLACE FUNCTION f(n INT) RETURNS INT AS $$
  DECLARE
    i CONSTANT INT := n;
  BEGIN
    RETURN i;
  END
$$ LANGUAGE PLpgSQL;

query IIIIII
SELECT f(-100), f(-1), f(0), f(1), f(100), f(NULL);
----
-100  -1  0  1  100  NULL

statement error pgcode 22005 pq: variable \"i\" is declared CONSTANT
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  DECLARE
    i CONSTANT INT;
  BEGIN
    i := i + 1;
    RETURN i;
  END
$$ LANGUAGE PLpgSQL;

statement error pgcode 22005 pq: variable \"i\" is declared CONSTANT
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  DECLARE
    i CONSTANT INT := 0;
  BEGIN
    i := i + 1;
    RETURN i;
  END
$$ LANGUAGE PLpgSQL;

statement error pgcode 22005 pq: variable \"i\" is declared CONSTANT
CREATE OR REPLACE FUNCTION f(n INT) RETURNS INT AS $$
  DECLARE
    i CONSTANT INT := 0;
  BEGIN
    IF n > 0 THEN
      i := i + 1;
    END IF;
    RETURN i;
  END
$$ LANGUAGE PLpgSQL;

statement error pgcode 22005 pq: variable \"i\" is declared CONSTANT
CREATE OR REPLACE FUNCTION f() RETURNS INT AS $$
  DECLARE
    i CONSTANT INT := 0;
  BEGIN
    LOOP IF i >= 10 THEN EXIT; END IF;
      i := i + 1;
    END LOOP;
    RETURN i;
  END
$$ LANGUAGE PLpgSQL;
