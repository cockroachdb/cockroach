# LogicTest: !local-mixed-22.2-23.1

statement ok
CREATE PROCEDURE p() LANGUAGE SQL AS 'SELECT 1'

# The isProcedure field of the descriptor should be set to true for a procedure.
query T
SELECT d->'function'->'isProcedure' FROM (
  SELECT crdb_internal.pb_to_json('cockroach.sql.sqlbase.Descriptor', descriptor, false) d
  FROM system.descriptor
) WHERE d->'function'->'name' = '"p"'
----
true

statement ok
CREATE SEQUENCE s

statement ok
CREATE OR REPLACE PROCEDURE p() LANGUAGE SQL AS $$
  SELECT nextval('s');
$$

statement ok
CALL p()

query I
SELECT currval('s')
----
1

statement ok
CREATE OR REPLACE PROCEDURE p() LANGUAGE SQL AS $$
  SELECT 1;
$$

statement ok
CALL p()

# Ensure that the memo for the first execution of p was not re-used.
query I
SELECT currval('s')
----
1

# A procedure can only be used with CALL, unlike a UDF.
statement error pgcode 42809 p\(\) is a procedure\nHINT: To call a procedure, use CALL.
SELECT p()

statement ok
CREATE OR REPLACE PROCEDURE p() LANGUAGE SQL AS ''

# Same test as above, but with an empty procedure.
statement error pgcode 42809 p\(\) is a procedure\nHINT: To call a procedure, use CALL.
SELECT p()

statement ok
CREATE OR REPLACE PROCEDURE p(i INT) LANGUAGE SQL AS ''

statement error pgcode 42809 p\(i: int\) is a procedure\nHINT: To call a procedure, use CALL.
SELECT p(1)

# The error message for a non-existent procedure should mention "procedure" not
# "function".
statement error pgcode 42883 procedure no_exist does not exist\nHINT: No procedure matches the given name and argument types. You might need to add explicit type casts.
CALL no_exist()

# The error message for a non-existent function within a procedure call should
# still mention "function".
statement error pgcode 42883 unknown function: foo\(\)
CALL p(foo())

statement ok
CREATE FUNCTION foo(i INT) RETURNS VOID LANGUAGE SQL AS ''

# This is similar to the test above, but with a non-matching function signature.
statement error pgcode 42883 unknown signature: public.foo\(\) \(desired <int>\)
CALL p(foo())

skipif config local-legacy-schema-changer
skipif config local-mixed-22.2-23.1
statement error pgcode 42723 function "p" already exists with same argument types
CREATE FUNCTION p() RETURNS VOID LANGUAGE SQL AS ''

onlyif config local-legacy-schema-changer
onlyif config local-mixed-22.2-23.1
statement error pgcode 42723 function "p" already exists with same argument types
CREATE FUNCTION p() RETURNS VOID LANGUAGE SQL AS ''

# TODO(mgartner): The error should state "procedure definition" too.
statement error pgcode 0A000 unimplemented: CALL usage inside a function definition
CREATE OR REPLACE PROCEDURE p2() LANGUAGE SQL AS $$
  CALL p();
$$

statement ok
CREATE TABLE t (
  k INT PRIMARY KEY,
  v INT
);
INSERT INTO t VALUES (1, 10);

statement ok
CREATE OR REPLACE PROCEDURE t_update(k_arg INT, v_arg INT) LANGUAGE SQL AS $$
  UPDATE t SET v = v_arg WHERE k = k_arg;
$$

statement ok
CALL t_update(1, 11)

statement ok
CALL t_update(2, 22)

query II
SELECT * FROM t
----
1  11

statement ok
CREATE FUNCTION t_update() RETURNS INT LANGUAGE SQL AS 'SELECT 1'

# The procedure t_update and the function t_update can be disambiguated via the
# number of arguments.
query I
SELECT t_update()
----
1

# The procedure t_update and the function t_update can be disambiguated via the
# number of arguments.
statement ok
CALL t_update(1, 110+1)

query II
SELECT * FROM t
----
1  111

statement ok
CREATE FUNCTION t_update(a STRING, b STRING) RETURNS VOID LANGUAGE SQL AS ''

# The procedure t_update and the function t_update can be disambiguated via the
# argument types.
statement ok
CALL t_update(1, 1111)

query II
SELECT * FROM t
----
1  1111

statement ok
DROP FUNCTION t_update(STRING, STRING);
CREATE FUNCTION t_update(a STRING, b STRING) RETURNS SETOF INT LANGUAGE SQL AS 'SELECT 1'

# TODO(mgartner): This should not be an error. It is due to a limitation in
# several places that require the function class to be known before the function
# has been resolved to a specific overload.
statement error ambiguous function class on t_update
CALL t_update(1, 0)

subtest anonymous_args

statement ok
CREATE TABLE anon_args(k INT PRIMARY KEY, v STRING)

statement ok
CREATE PROCEDURE insert_into_anon_args(INT, STRING) LANGUAGE SQL AS $$
  INSERT INTO anon_args(k, v) VALUES ($1, $2)
$$

statement ok
CALL insert_into_anon_args(1, 'a')

query IT
SELECT * FROM anon_args
----
1  a

statement ok
CREATE PROCEDURE insert_into_anon_args(STRING, INT) LANGUAGE SQL AS $$
  INSERT INTO anon_args(k, v) VALUES ($2, $1)
$$

statement ok
CALL insert_into_anon_args('b', 2)

query IT rowsort
SELECT * FROM anon_args
----
1  a
2  b

statement ok
DROP PROCEDURE insert_into_anon_args(INT, STRING);
DROP PROCEDURE insert_into_anon_args(STRING, INT);
DROP TABLE anon_args;

subtest end
