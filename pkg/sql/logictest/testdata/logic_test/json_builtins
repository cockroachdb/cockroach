# LogicTest: default distsql parallel-stmts

## json_typeof and jsonb_typeof

query T
SELECT json_typeof('-123.4'::JSON)
----
number

query T
SELECT jsonb_typeof('-123.4'::JSON)
----
number

query T
SELECT json_typeof('"-123.4"'::JSON)
----
string

query T
SELECT jsonb_typeof('"-123.4"'::JSON)
----
string

query T
SELECT json_typeof('{"1": {"2": 3}}'::JSON)
----
object

query T
SELECT jsonb_typeof('{"1": {"2": 3}}'::JSON)
----
object

query T
SELECT json_typeof('[1, 2, [3]]'::JSON)
----
array

query T
SELECT jsonb_typeof('[1, 2, [3]]'::JSON)
----
array

query T
SELECT json_typeof('true'::JSON)
----
boolean

query T
SELECT jsonb_typeof('true'::JSON)
----
boolean

query T
SELECT json_typeof('false'::JSON)
----
boolean

query T
SELECT jsonb_typeof('false'::JSON)
----
boolean

query T
SELECT json_typeof('null'::JSON)
----
null

query T
SELECT jsonb_typeof('null'::JSON)
----
null

## to_json and to_jsonb

query T
SELECT to_json(123::INT)
----
123

query T
SELECT to_json('\a'::TEXT)
----
"\\a"

query T
SELECT to_json('\a'::TEXT COLLATE "fr_FR")
----
"\\a"

query T
SELECT to_json(3::OID::INT::OID)
----
"3"

query T
SELECT to_json('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'::UUID);
----
"a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"

query T
SELECT to_json('\x0001'::BYTEA)
----
"\\x0001"

query T
SELECT to_json(true::BOOL)
----
true

query T
SELECT to_json(false::BOOL)
----
false

query T
SELECT to_json('"a"'::JSON)
----
"a"

query T
SELECT to_json(1.234::FLOAT)
----
1.234

query T
SELECT to_json(1.234::DECIMAL)
----
1.234

query T
SELECT to_json('10.1.0.0/16'::INET)
----
"10.1.0.0/16"

query T
SELECT to_json(ARRAY[[1, 2], [3, 4]])
----
[[1,2],[3,4]]

query T
SELECT to_json('2014-05-28 12:22:35.614298'::TIMESTAMP)
----
"2014-05-28 12:22:35.614298+00:00"

query T
SELECT to_json('2014-05-28 12:22:35.614298-04'::TIMESTAMPTZ)
----
"2014-05-28 12:22:35.614298-04:00"

query T
SELECT to_json('2014-05-28'::DATE)
----
"2014-05-28"

query T
SELECT to_json('00:00:00'::TIME)
----
"00:00:00"

query T
SELECT to_json('2h45m2s234ms'::INTERVAL)
----
"2h45m2s234ms"

query T
SELECT to_json((1, 2, 'hello', NULL, NULL))
----
{"f1":1,"f2":2,"f3":"hello","f4":null,"f5":null}

query T
SELECT to_jsonb(123::INT)
----
123

query T
SELECT to_jsonb('\a'::TEXT)
----
"\\a"

query T
SELECT to_jsonb('\a'::TEXT COLLATE "fr_FR")
----
"\\a"

query T
SELECT to_jsonb(3::OID::INT::OID)
----
"3"

query T
SELECT to_jsonb('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'::UUID);
----
"a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"

query T
SELECT to_jsonb('\x0001'::BYTEA)
----
"\\x0001"

query T
SELECT to_jsonb(true::BOOL)
----
true

query T
SELECT to_jsonb(false::BOOL)
----
false

query T
SELECT to_jsonb('"a"'::JSON)
----
"a"

query T
SELECT to_jsonb(1.234::FLOAT)
----
1.234

query T
SELECT to_jsonb(1.234::DECIMAL)
----
1.234

query T
SELECT to_jsonb('10.1.0.0/16'::INET)
----
"10.1.0.0/16"

query T
SELECT to_jsonb(ARRAY[[1, 2], [3, 4]])
----
[[1,2],[3,4]]

query T
SELECT to_jsonb('2014-05-28 12:22:35.614298'::TIMESTAMP)
----
"2014-05-28 12:22:35.614298+00:00"

query T
SELECT to_jsonb('2014-05-28 12:22:35.614298-04'::TIMESTAMPTZ)
----
"2014-05-28 12:22:35.614298-04:00"

query T
SELECT to_jsonb('2014-05-28'::DATE)
----
"2014-05-28"

query T
SELECT to_jsonb('00:00:00'::TIME)
----
"00:00:00"

query T
SELECT to_jsonb('2h45m2s234ms'::INTERVAL)
----
"2h45m2s234ms"

query T
SELECT to_jsonb((1, 2, 'hello', NULL, NULL))
----
{"f1":1,"f2":2,"f3":"hello","f4":null,"f5":null}

## json_array_elements and jsonb_array_elements

query T
SELECT json_array_elements('[1, 2, 3]'::JSON)
----
1
2
3

query T
SELECT jsonb_array_elements('[1, 2, 3]'::JSON)
----
1
2
3

query T
SELECT json_array_elements('[1, true, null, "text", -1.234, {"2": 3, "4": "5"}, [1, 2, 3]]'::JSON)
----
1
true
null
"text"
-1.234
{"2":3,"4":"5"}
[1,2,3]

query T
SELECT json_array_elements('[]'::JSON)
----


query error pq: json_array_elements\(\): cannot be called on a non-array
SELECT json_array_elements('{"1": 2}'::JSON)

query error pq: jsonb_array_elements\(\): cannot be called on a non-array
SELECT jsonb_array_elements('{"1": 2}'::JSON)


## json_array_elements_text and jsonb_array_elements_text

query T
SELECT json_array_elements_text('[1, 2, 3]'::JSON)
----
1
2
3

query T
SELECT json_array_elements_text('[1, 2, 3]'::JSON)
----
1
2
3

query T
SELECT json_array_elements_text('[1, true, null, "text", -1.234, {"2": 3, "4": "5"}, [1, 2, 3]]'::JSON)
----
1
true
NULL
text
-1.234
{"2":3,"4":"5"}
[1,2,3]

query T
SELECT json_array_elements('[]'::JSON)
----

query error pq: json_array_elements_text\(\): cannot be called on a non-array
SELECT json_array_elements_text('{"1": 2}'::JSON)

query error pq: jsonb_array_elements_text\(\): cannot be called on a non-array
SELECT jsonb_array_elements_text('{"1": 2}'::JSON)


## json_object_keys and jsonb_object_keys

query T
SELECT json_object_keys('{"1": 2, "3": 4}'::JSON)
----
1
3

query T
SELECT jsonb_object_keys('{"1": 2, "3": 4}'::JSON)
----
1
3

query T
SELECT json_object_keys('{}'::JSON)
----

query T
SELECT json_object_keys('{"\"1\"": 2}'::JSON)
----
"1"

# Keys are sorted.
query T
SELECT json_object_keys('{"a": 1, "1": 2, "3": {"4": 5, "6": 7}}'::JSON)
----
1
3
a

query error pq: json_object_keys\(\): cannot iterate keys of non-object
SELECT json_object_keys('[1, 2, 3]'::JSON)

query T
SELECT json_extract_path('{"a": 1}', 'a')
----
1

query T
SELECT json_extract_path('{"a": 1}')
----
{"a":1}

query T
SELECT json_extract_path('{"a": {"b": 2}}', 'a')
----
{"b":2}

query T
SELECT json_extract_path('{"a": {"b": 2}}', 'a', 'b')
----
2

query T
SELECT jsonb_extract_path('{"a": {"b": 2}}', 'a', 'b')
----
2

query T
SELECT json_extract_path('{"a": {"b": 2}}', 'a', 'b', 'c')
----
NULL

query T
SELECT jsonb_pretty('{"a": 1}')
----
{
    "a": 1
}

query T
SELECT '[1,2,3]'::JSON || '[4,5,6]'::JSON
----
[1,2,3,4,5,6]

query T
SELECT '{"a": 1, "b": 2}'::JSON || '{"b": 3, "c": 4}'
----
{"a":1,"b":3,"c":4}

query error pgcode 22023 invalid concatenation of jsonb objects
SELECT '{"a": 1, "b": 2}'::JSON || '"c"'
