# LogicTest: !3node-tenant(50047)
##################
# TABLE DDL
##################

# Verify events related to roles
##################

statement ok
CREATE ROLE r

statement ok
CREATE ROLE IF NOT EXISTS r2

statement ok
ALTER ROLE r WITH CONTROLCHANGEFEED

statement ok
DROP ROLE r, r2

query ITT
SELECT "reportingID", "eventType", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" IN ('create_role', 'drop_role', 'alter_role')
ORDER BY "timestamp", info
----
1  create_role  {"EventType": "create_role", "InstanceID": 1, "RoleName": "testuser", "Statement": "CREATE USER 'testuser'", "User": "root"}
1  create_role  {"EventType": "create_role", "InstanceID": 1, "RoleName": "r", "Statement": "CREATE ROLE 'r'", "User": "root"}
1  create_role  {"EventType": "create_role", "InstanceID": 1, "RoleName": "r2", "Statement": "CREATE ROLE IF NOT EXISTS 'r2'", "User": "root"}
1  alter_role   {"EventType": "alter_role", "InstanceID": 1, "Options": ["CONTROLCHANGEFEED"], "RoleName": "r", "Statement": "ALTER ROLE 'r' WITH CONTROLCHANGEFEED", "User": "root"}
1  drop_role    {"EventType": "drop_role", "InstanceID": 1, "RoleName": "r", "Statement": "DROP ROLE 'r', 'r2'", "User": "root"}
1  drop_role    {"EventType": "drop_role", "InstanceID": 1, "RoleName": "r2", "Statement": "DROP ROLE 'r', 'r2'", "User": "root"}

# Create two tables + superfluous "IF NOT EXISTS"
##################

statement ok
CREATE TABLE a (id INT PRIMARY KEY)

statement ok
CREATE TABLE IF NOT EXISTS b (id INT PRIMARY KEY)

statement ok
CREATE TABLE IF NOT EXISTS a (id INT PRIMARY KEY)


# Verify that two create tables were logged - the second
# NOT EXISTS should not result in a log message.
##################

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
  FROM system.eventlog
 WHERE "eventType" = 'create_table'
ORDER BY "timestamp", info
----
1  {"EventType": "create_table", "InstanceID": 1, "Statement": "CREATE TABLE test.public.a (id INT8 PRIMARY KEY)", "TableName": "test.public.a", "User": "root"}
1  {"EventType": "create_table", "InstanceID": 1, "Statement": "CREATE TABLE IF NOT EXISTS test.public.b (id INT8 PRIMARY KEY)", "TableName": "test.public.b", "User": "root"}

# Verify the contents of the 'Info' field of each log message using a LIKE
# statement.
##################

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'create_table'
  AND info::JSONB->>'Statement' LIKE 'CREATE TABLE test.public.a%'
----
1  {"EventType": "create_table", "InstanceID": 1, "Statement": "CREATE TABLE test.public.a (id INT8 PRIMARY KEY)", "TableName": "test.public.a", "User": "root"}

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'create_table'
  AND info::JSONB->>'Statement' LIKE 'CREATE TABLE IF NOT EXISTS test.public.b%'
----
1  {"EventType": "create_table", "InstanceID": 1, "Statement": "CREATE TABLE IF NOT EXISTS test.public.b (id INT8 PRIMARY KEY)", "TableName": "test.public.b", "User": "root"}

# Sanity check - check for a non-matching info value.
##################

query I
SELECT count(*)
FROM system.eventlog
WHERE "eventType" = 'create_table'
  AND info LIKE '%CREATE TABLE badtable%'
----
0

# Alter the table. Expect "alter_table" and "finish_schema_change" events.
##################

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID' FROM system.eventlog
WHERE "eventType" = 'alter_table'
----

statement ok
ALTER TABLE a ADD val INT

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID' FROM system.eventlog
WHERE "eventType" = 'alter_table'
----
1  {"EventType": "alter_table", "InstanceID": 1, "MutationID": 1, "Statement": "ALTER TABLE test.public.a ADD COLUMN val INT8", "TableName": "test.public.a", "User": "root"}

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID' FROM system.eventlog
WHERE "eventType" = 'finish_schema_change'
----
1  {"EventType": "finish_schema_change", "InstanceID": 1, "MutationID": 1}

query I
SELECT "reportingID" FROM system.eventlog
WHERE "eventType" = 'reverse_schema_change'
----

# Verify the contents of the 'Info' field of each log message using a LIKE
# statement.
##################
query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID' FROM system.eventlog
WHERE "eventType" = 'alter_table'
  AND info::JSONB->>'Statement' LIKE 'ALTER TABLE test.public.a%'
----
1  {"EventType": "alter_table", "InstanceID": 1, "MutationID": 1, "Statement": "ALTER TABLE test.public.a ADD COLUMN val INT8", "TableName": "test.public.a", "User": "root"}

# Add a UNIQUE constraint to the table in a way that will ensure the schema
# change is reversed.
##################

statement ok
INSERT INTO a VALUES (1, 1), (2, 1)

statement error pgcode 23505 violates unique constraint \"foo\"
ALTER TABLE a ADD CONSTRAINT foo UNIQUE(val)

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID' FROM system.eventlog
WHERE "eventType" = 'alter_table'
ORDER BY "timestamp", info
----
1  {"EventType": "alter_table", "InstanceID": 1, "MutationID": 1, "Statement": "ALTER TABLE test.public.a ADD COLUMN val INT8", "TableName": "test.public.a", "User": "root"}
1  {"EventType": "alter_table", "InstanceID": 1, "MutationID": 2, "Statement": "ALTER TABLE test.public.a ADD CONSTRAINT foo UNIQUE (val)", "TableName": "test.public.a", "User": "root"}

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'  FROM system.eventlog
WHERE "eventType" = 'finish_schema_change'
----
1  {"EventType": "finish_schema_change", "InstanceID": 1, "MutationID": 1}

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID' - 'Error'
  FROM system.eventlog
WHERE "eventType" = 'reverse_schema_change'
----
1  {"EventType": "reverse_schema_change", "InstanceID": 1, "MutationID": 2, "SQLSTATE": "23505"}


query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID' FROM system.eventlog
WHERE "eventType" = 'finish_schema_change_rollback'
----
1  {"EventType": "finish_schema_change_rollback", "InstanceID": 1, "MutationID": 2}

# Create an Index on the table
#################

statement ok
CREATE INDEX a_foo ON a (val)

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID' FROM system.eventlog
WHERE "eventType" = 'create_index'
  AND info::JSONB->>'Statement' LIKE 'CREATE INDEX %a_foo%'
----
1  {"EventType": "create_index", "IndexName": "a_foo", "InstanceID": 1, "MutationID": 3, "Statement": "CREATE INDEX a_foo ON test.public.a (val)", "TableName": "test.public.a", "User": "root"}

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID' FROM system.eventlog
WHERE "eventType" = 'finish_schema_change'
ORDER BY "timestamp", info
----
1  {"EventType": "finish_schema_change", "InstanceID": 1, "MutationID": 1}
1  {"EventType": "finish_schema_change", "InstanceID": 1, "MutationID": 3}

statement ok
CREATE INDEX ON a (val)

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID' FROM system.eventlog
WHERE "eventType" = 'create_index'
  AND info::JSONB->>'Statement' LIKE 'CREATE INDEX ON%'
----
1  {"EventType": "create_index", "IndexName": "a_val_idx", "InstanceID": 1, "MutationID": 4, "Statement": "CREATE INDEX ON test.public.a (val)", "TableName": "test.public.a", "User": "root"}

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID' FROM system.eventlog
WHERE "eventType" = 'finish_schema_change'
ORDER BY "timestamp", info
----
1  {"EventType": "finish_schema_change", "InstanceID": 1, "MutationID": 1}
1  {"EventType": "finish_schema_change", "InstanceID": 1, "MutationID": 3}
1  {"EventType": "finish_schema_change", "InstanceID": 1, "MutationID": 4}


# Drop the index
#################

statement ok
DROP INDEX a@a_foo

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID' FROM system.eventlog
WHERE "eventType" = 'drop_index'
  AND info::JSONB->>'Statement' LIKE 'DROP INDEX%a_foo'
----
1  {"EventType": "drop_index", "IndexName": "a_foo", "InstanceID": 1, "MutationID": 5, "Statement": "DROP INDEX test.public.a@a_foo", "TableName": "test.public.a", "User": "root"}

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID' FROM system.eventlog
WHERE "eventType" = 'finish_schema_change'
ORDER BY "timestamp", info
----
1  {"EventType": "finish_schema_change", "InstanceID": 1, "MutationID": 1}
1  {"EventType": "finish_schema_change", "InstanceID": 1, "MutationID": 3}
1  {"EventType": "finish_schema_change", "InstanceID": 1, "MutationID": 4}
1  {"EventType": "finish_schema_change", "InstanceID": 1, "MutationID": 5}

# Truncate a table
##################

statement ok
TRUNCATE TABLE a

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'truncate_table'
----
1  {"EventType": "truncate_table", "InstanceID": 1, "Statement": "TRUNCATE TABLE test.public.a", "TableName": "test.public.a", "User": "root"}

# Drop both tables + superfluous "IF EXISTS"
##################

statement ok
DROP TABLE a

statement ok
DROP TABLE IF EXISTS b

statement ok
DROP TABLE IF EXISTS b


# Verify that two drop table events were logged - the second IF EXISTS statement
# should have failed.
##################

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'drop_table'
ORDER BY "timestamp", info
----
1  {"EventType": "drop_table", "InstanceID": 1, "Statement": "DROP TABLE test.public.a", "TableName": "test.public.a", "User": "root"}
1  {"EventType": "drop_table", "InstanceID": 1, "Statement": "DROP TABLE IF EXISTS test.public.b", "TableName": "test.public.b", "User": "root"}

# Verify the contents of the 'info' field of each event.
##################

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'drop_table'
  AND info::JSONB->>'Statement' LIKE 'DROP TABLE test.public.a%'
----
1  {"EventType": "drop_table", "InstanceID": 1, "Statement": "DROP TABLE test.public.a", "TableName": "test.public.a", "User": "root"}

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'drop_table'
  AND info::JSONB->>'Statement' LIKE 'DROP TABLE IF EXISTS test.public.b%'
----
1  {"EventType": "drop_table", "InstanceID": 1, "Statement": "DROP TABLE IF EXISTS test.public.b", "TableName": "test.public.b", "User": "root"}

# Create + Rename table
##################

statement ok
CREATE TABLE toberenamed( id SERIAL PRIMARY KEY );

statement ok
ALTER TABLE toberenamed RENAME TO renamedtable;


# Verify that rename table event is logged
##################

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'rename_table'
  AND info::JSONB->>'Statement' LIKE 'ALTER TABLE %toberenamed% RENAME TO %renamedtable%'
----
1  {"EventType": "rename_table", "InstanceID": 1, "NewTableName": "test.public.renamedtable", "Statement": "ALTER TABLE toberenamed RENAME TO renamedtable", "TableName": "test.public.toberenamed", "User": "root"}


##################
# DATABASE DDL
##################

# Create two databases + superfluous "IF NOT EXISTS"
##################

statement ok
CREATE DATABASE eventlogtest

statement ok
CREATE DATABASE IF NOT EXISTS othereventlogtest

statement ok
CREATE DATABASE IF NOT EXISTS othereventlogtest


# Verify the two events that were logged.
##################

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'create_database'
  AND info::JSONB->>'Statement' LIKE 'CREATE DATABASE eventlogtest%'
----
1  {"DatabaseName": "eventlogtest", "EventType": "create_database", "InstanceID": 1, "Statement": "CREATE DATABASE eventlogtest", "User": "root"}

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'create_database'
  AND info::JSONB->>'Statement' LIKE 'CREATE DATABASE IF NOT EXISTS othereventlogtest%'
----
1  {"DatabaseName": "othereventlogtest", "EventType": "create_database", "InstanceID": 1, "Statement": "CREATE DATABASE IF NOT EXISTS othereventlogtest", "User": "root"}

# Add some tables to eventlogtest.
##################

statement ok
SET DATABASE = eventlogtest

statement ok
CREATE TABLE eventlogtest.testtable (id int PRIMARY KEY)

statement ok
CREATE TABLE eventlogtest.anothertesttable (id int PRIMARY KEY)

# drop both databases.
##################

statement ok
DROP DATABASE eventlogtest CASCADE

statement ok
DROP DATABASE IF EXISTS othereventlogtest CASCADE

statement ok
DROP DATABASE IF EXISTS othereventlogtest CASCADE

# verify contents of drop event
##################

# verify event is there, and cascading table drops are logged.

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'drop_database'
  AND info::JSONB->>'Statement' LIKE 'DROP DATABASE eventlogtest%'
----
1  {"DatabaseName": "eventlogtest", "DroppedSchemaObjects": ["eventlogtest.public.anothertesttable", "eventlogtest.public.testtable"], "EventType": "drop_database", "InstanceID": 1, "Statement": "DROP DATABASE eventlogtest CASCADE", "User": "root"}

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'drop_database'
  AND info::JSONB->>'Statement' LIKE 'DROP DATABASE IF EXISTS othereventlogtest%'
----
1  {"DatabaseName": "othereventlogtest", "EventType": "drop_database", "InstanceID": 1, "Statement": "DROP DATABASE IF EXISTS othereventlogtest CASCADE", "User": "root"}

statement ok
SET DATABASE = test

# Add a database.
##################

statement ok
CREATE DATABASE eventlogtorename

# rename database.
##################

statement ok
ALTER DATABASE eventlogtorename RENAME TO eventlogtonewname

# verify contents of database rename event
##################

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'rename_database'
  AND info::JSONB->>'Statement' LIKE 'ALTER DATABASE %eventlogtorename% RENAME TO %eventlogtonewname%'
----
1  {"DatabaseName": "eventlogtorename", "EventType": "rename_database", "InstanceID": 1, "NewDatabaseName": "eventlogtonewname", "Statement": "ALTER DATABASE eventlogtorename RENAME TO eventlogtonewname", "User": "root"}

statement ok
SET DATABASE = test

# set owner of database.
##################

statement ok
CREATE USER u

statement ok
ALTER DATABASE eventlogtonewname OWNER TO u

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'alter_database_owner'
----
1  {"DatabaseName": "eventlogtonewname", "EventType": "alter_database_owner", "InstanceID": 1, "Owner": "u", "Statement": "ALTER DATABASE eventlogtonewname OWNER TO u", "User": "root"}

# convert database to schema
##################

statement ok
ALTER DATABASE eventlogtonewname CONVERT TO SCHEMA WITH PARENT test

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'convert_to_schema'
----
1  {"DatabaseName": "eventlogtonewname", "EventType": "convert_to_schema", "InstanceID": 1, "NewDatabaseParent": "test", "Statement": "ALTER DATABASE eventlogtonewname CONVERT TO SCHEMA WITH PARENT test", "User": "root"}

statement ok
DROP SCHEMA eventlogtonewname

statement ok
DROP USER u

##################
# Cluster Settings
##################

# Set and unset a cluster setting
##################

statement ok
SET CLUSTER SETTING kv.allocator.load_based_lease_rebalancing.enabled = false

statement ok
SET CLUSTER SETTING kv.allocator.load_based_lease_rebalancing.enabled = DEFAULT

statement ok
PREPARE set_setting AS SET CLUSTER SETTING cluster.organization = $1

statement ok
EXECUTE set_setting('some string')

# verify setting changes are logged
##################
query IIT
SELECT "targetID", "reportingID", "info"::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'set_cluster_setting'
AND info NOT LIKE '%version%' AND info NOT LIKE '%sql.defaults.distsql%' AND info NOT LIKE '%cluster.secret%'
AND info NOT LIKE '%sql.stats.automatic_collection.enabled%'
AND info NOT LIKE '%sql.defaults.vectorize%'
AND info NOT LIKE '%sql.testing%'
AND info NOT LIKE '%sql.defaults.experimental_distsql_planning%'
ORDER BY "timestamp", info
----
0  1  {"EventType": "set_cluster_setting", "InstanceID": 1, "SettingName": "diagnostics.reporting.enabled", "Statement": "SET CLUSTER SETTING \"diagnostics.reporting.enabled\" = true", "User": "root", "Value": "true"}
0  1  {"EventType": "set_cluster_setting", "InstanceID": 1, "SettingName": "kv.range_merge.queue_enabled", "Statement": "SET CLUSTER SETTING \"kv.range_merge.queue_enabled\" = false", "User": "root", "Value": "false"}
0  1  {"EventType": "set_cluster_setting", "InstanceID": 1, "SettingName": "sql.stats.automatic_collection.min_stale_rows", "Statement": "SET CLUSTER SETTING \"sql.stats.automatic_collection.min_stale_rows\" = $1::INT8", "User": "root", "Value": "5"}
0  1  {"EventType": "set_cluster_setting", "InstanceID": 1, "SettingName": "kv.allocator.load_based_lease_rebalancing.enabled", "Statement": "SET CLUSTER SETTING \"kv.allocator.load_based_lease_rebalancing.enabled\" = false", "User": "root", "Value": "false"}
0  1  {"EventType": "set_cluster_setting", "InstanceID": 1, "SettingName": "kv.allocator.load_based_lease_rebalancing.enabled", "Statement": "SET CLUSTER SETTING \"kv.allocator.load_based_lease_rebalancing.enabled\" = DEFAULT", "User": "root", "Value": "DEFAULT"}
0  1  {"EventType": "set_cluster_setting", "InstanceID": 1, "SettingName": "cluster.organization", "Statement": "SET CLUSTER SETTING \"cluster.organization\" = $1", "User": "root", "Value": "'some string'"}

# Set and unset zone configs
##################

statement ok
CREATE TABLE a (id INT PRIMARY KEY)

statement ok
ALTER TABLE a CONFIGURE ZONE USING range_max_bytes = 67108865, range_min_bytes = 16777216

statement ok
ALTER TABLE a CONFIGURE ZONE DISCARD

# verify zone config changes are logged
##################
query IT
SELECT "reportingID", "info"::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'set_zone_config'
ORDER BY "timestamp", info
----
1  {"EventType": "set_zone_config", "InstanceID": 1, "Options": ["range_max_bytes = 67108865", "range_min_bytes = 16777216"], "Statement": "ALTER TABLE \"\".\"\".a CONFIGURE ZONE USING range_max_bytes = 67108865, range_min_bytes = 16777216", "Target": "TABLE test.public.a", "User": "root"}

query IT
SELECT "reportingID", "info"::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'remove_zone_config'
ORDER BY "timestamp", info
----
1  {"EventType": "remove_zone_config", "InstanceID": 1, "Statement": "ALTER TABLE \"\".\"\".a CONFIGURE ZONE DISCARD", "Target": "TABLE test.public.a", "User": "root"}

statement ok
DROP TABLE a

# Sequences

statement ok
CREATE SEQUENCE s

statement ok
ALTER SEQUENCE s START 10

statement ok
DROP SEQUENCE s

query TIT
SELECT "eventType", "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
  FROM system.eventlog
 WHERE "eventType" in ('create_sequence', 'alter_sequence', 'drop_sequence')
ORDER BY "timestamp", info
----
create_sequence  1  {"EventType": "create_sequence", "InstanceID": 1, "SequenceName": "test.public.s", "Statement": "CREATE SEQUENCE test.public.s", "User": "root"}
alter_sequence   1  {"EventType": "alter_sequence", "InstanceID": 1, "SequenceName": "test.public.s", "Statement": "ALTER SEQUENCE test.public.s START 10", "User": "root"}
drop_sequence    1  {"EventType": "drop_sequence", "InstanceID": 1, "SequenceName": "test.public.s", "Statement": "DROP SEQUENCE test.public.s", "User": "root"}

# Views

statement ok
CREATE VIEW v AS SELECT 1

statement ok
DROP VIEW v

query TIT
SELECT "eventType", "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
  FROM system.eventlog
 WHERE "eventType" in ('create_view', 'drop_view')
ORDER BY "timestamp", info
----
create_view  1  {"EventType": "create_view", "InstanceID": 1, "Statement": "CREATE VIEW \"\".\"\".v AS SELECT 1", "User": "root", "ViewName": "test.public.v", "ViewQuery": "SELECT 1"}
drop_view    1  {"EventType": "drop_view", "InstanceID": 1, "Statement": "DROP VIEW test.public.v", "User": "root", "ViewName": "test.public.v"}


# Change privileges
##################

statement ok
CREATE TABLE a (id INT PRIMARY KEY)

statement ok
CREATE TABLE b (id INT PRIMARY KEY)

statement ok
CREATE VIEW c AS SELECT id FROM b

statement ok
CREATE SEQUENCE sq

statement ok
CREATE DATABASE dbt

statement ok
CREATE SCHEMA sc

statement ok
CREATE USER u

statement ok
CREATE USER v

statement ok
GRANT INSERT ON TABLE a,b TO u

statement ok
GRANT SELECT ON TABLE sq TO u

statement ok
GRANT SELECT ON TABLE c TO u

statement ok
GRANT CREATE ON DATABASE dbt TO u

statement ok
GRANT CREATE ON SCHEMA sc TO u

statement ok
REVOKE UPDATE ON TABLE a FROM u,v

statement ok
REVOKE CREATE ON SCHEMA sc FROM u,v

statement ok
REVOKE CREATE ON DATABASE dbt FROM u,v

query ITT
SELECT "reportingID", "info"::JSONB - 'Timestamp' - 'DescriptorID', "eventType"
FROM system.eventlog
WHERE "eventType" LIKE 'change_%_privilege'
ORDER BY "timestamp", info
----
1  {"EventType": "change_table_privilege", "GrantedPrivileges": ["INSERT"], "Grantee": "u", "InstanceID": 1, "Statement": "GRANT INSERT ON TABLE a, b TO u", "TableName": "a", "User": "root"}                  change_table_privilege
1  {"EventType": "change_table_privilege", "GrantedPrivileges": ["INSERT"], "Grantee": "u", "InstanceID": 1, "Statement": "GRANT INSERT ON TABLE a, b TO u", "TableName": "b", "User": "root"}                  change_table_privilege
1  {"EventType": "change_table_privilege", "GrantedPrivileges": ["SELECT"], "Grantee": "u", "InstanceID": 1, "Statement": "GRANT SELECT ON TABLE sq TO u", "TableName": "sq", "User": "root"}                   change_table_privilege
1  {"EventType": "change_table_privilege", "GrantedPrivileges": ["SELECT"], "Grantee": "u", "InstanceID": 1, "Statement": "GRANT SELECT ON TABLE c TO u", "TableName": "c", "User": "root"}                     change_table_privilege
1  {"DatabaseName": "dbt", "EventType": "change_database_privilege", "GrantedPrivileges": ["CREATE"], "Grantee": "u", "InstanceID": 1, "Statement": "GRANT CREATE ON DATABASE dbt TO u", "User": "root"}        change_database_privilege
1  {"EventType": "change_schema_privilege", "GrantedPrivileges": ["CREATE"], "Grantee": "u", "InstanceID": 1, "SchemaName": "sc", "Statement": "GRANT CREATE ON SCHEMA \"\".sc TO u", "User": "root"}           change_schema_privilege
1  {"EventType": "change_table_privilege", "Grantee": "u", "InstanceID": 1, "RevokedPrivileges": ["UPDATE"], "Statement": "REVOKE UPDATE ON TABLE a FROM u, v", "TableName": "a", "User": "root"}               change_table_privilege
1  {"EventType": "change_table_privilege", "Grantee": "v", "InstanceID": 1, "RevokedPrivileges": ["UPDATE"], "Statement": "REVOKE UPDATE ON TABLE a FROM u, v", "TableName": "a", "User": "root"}               change_table_privilege
1  {"EventType": "change_schema_privilege", "Grantee": "u", "InstanceID": 1, "RevokedPrivileges": ["CREATE"], "SchemaName": "sc", "Statement": "REVOKE CREATE ON SCHEMA \"\".sc FROM u, v", "User": "root"}     change_schema_privilege
1  {"EventType": "change_schema_privilege", "Grantee": "v", "InstanceID": 1, "RevokedPrivileges": ["CREATE"], "SchemaName": "sc", "Statement": "REVOKE CREATE ON SCHEMA \"\".sc FROM u, v", "User": "root"}     change_schema_privilege
1  {"DatabaseName": "dbt", "EventType": "change_database_privilege", "Grantee": "u", "InstanceID": 1, "RevokedPrivileges": ["CREATE"], "Statement": "REVOKE CREATE ON DATABASE dbt FROM u, v", "User": "root"}  change_database_privilege
1  {"DatabaseName": "dbt", "EventType": "change_database_privilege", "Grantee": "v", "InstanceID": 1, "RevokedPrivileges": ["CREATE"], "Statement": "REVOKE CREATE ON DATABASE dbt FROM u, v", "User": "root"}  change_database_privilege

statement ok
DROP DATABASE dbt

statement ok
DROP SEQUENCE sq

statement ok
DROP SCHEMA sc

statement ok
DROP VIEW c

statement ok
DROP TABLE a

statement ok
DROP TABLE b

statement ok
DROP USER u

statement ok
DROP USER v

# Schema events
##################

statement ok
CREATE SCHEMA s

statement ok
CREATE USER u

statement ok
CREATE SCHEMA AUTHORIZATION u

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'create_schema'
ORDER BY "timestamp", info
----
1  {"EventType": "create_schema", "InstanceID": 1, "Owner": "root", "SchemaName": "sc", "Statement": "CREATE SCHEMA \"\".sc", "User": "root"}
1  {"EventType": "create_schema", "InstanceID": 1, "Owner": "root", "SchemaName": "s", "Statement": "CREATE SCHEMA \"\".s", "User": "root"}
1  {"EventType": "create_schema", "InstanceID": 1, "Owner": "u", "SchemaName": "u", "Statement": "CREATE SCHEMA AUTHORIZATION u", "User": "root"}

statement ok
ALTER SCHEMA u RENAME TO t

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'rename_schema'
----
1  {"EventType": "rename_schema", "InstanceID": 1, "NewSchemaName": "t", "SchemaName": "u", "Statement": "ALTER SCHEMA \"\".u RENAME TO t", "User": "root"}

statement ok
ALTER SCHEMA t OWNER TO root

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'alter_schema_owner'
----
1  {"EventType": "alter_schema_owner", "InstanceID": 1, "Owner": "root", "SchemaName": "t", "Statement": "ALTER SCHEMA \"\".t OWNER TO root", "User": "root"}

statement ok
DROP SCHEMA s, t

query IT
SELECT "reportingID", info::JSONB - 'Timestamp' - 'DescriptorID'
FROM system.eventlog
WHERE "eventType" = 'drop_schema'
ORDER BY "timestamp", info
----
1  {"EventType": "drop_schema", "InstanceID": 1, "SchemaName": "eventlogtonewname", "Statement": "DROP SCHEMA \"\".eventlogtonewname", "User": "root"}
1  {"EventType": "drop_schema", "InstanceID": 1, "SchemaName": "sc", "Statement": "DROP SCHEMA \"\".sc", "User": "root"}
1  {"EventType": "drop_schema", "InstanceID": 1, "SchemaName": "s", "Statement": "DROP SCHEMA \"\".s, \"\".t", "User": "root"}
1  {"EventType": "drop_schema", "InstanceID": 1, "SchemaName": "t", "Statement": "DROP SCHEMA \"\".s, \"\".t", "User": "root"}
