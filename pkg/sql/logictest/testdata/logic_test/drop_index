statement ok
CREATE TABLE users (
  id    INT PRIMARY KEY,
  name  VARCHAR NOT NULL,
  title VARCHAR,
  INDEX foo (name),
  UNIQUE INDEX bar (id, name),
  INDEX baw (name, title)
)

statement ok
CREATE TABLE othertable (
   x INT,
   y INT,
   INDEX baw (x),
   INDEX yak (y, x)
)

statement error index name "baw" is ambiguous
DROP INDEX baw

statement error index name "baw" is ambiguous
DROP INDEX IF EXISTS baw

statement error index "ark" does not exist
DROP INDEX ark

statement ok
DROP INDEX IF EXISTS ark

statement error index "ark" does not exist
DROP INDEX users@ark

statement ok
DROP INDEX IF EXISTS users@ark

statement ok
DROP INDEX yak

statement ok
CREATE INDEX yak ON othertable (y, x)

statement ok
DROP INDEX IF EXISTS yak

statement ok
DROP TABLE othertable

statement ok
DROP INDEX baw

statement ok
INSERT INTO users VALUES (1, 'tom', 'cat'),(2, 'jerry', 'rat')

query TTBITTBB colnames
SHOW INDEXES FROM users
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit
users       primary     false       1             id           ASC        false    false
users       foo         true        1             name         ASC        false    false
users       foo         true        2             id           ASC        false    true
users       bar         false       1             id           ASC        false    false
users       bar         false       2             name         ASC        false    false

statement error index "zap" does not exist
DROP INDEX users@zap

statement ok
DROP INDEX IF EXISTS users@zap

query TTBITTBB colnames
SHOW INDEXES FROM users
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit
users       primary     false       1             id           ASC        false    false
users       foo         true        1             name         ASC        false    false
users       foo         true        2             id           ASC        false    true
users       bar         false       1             id           ASC        false    false
users       bar         false       2             name         ASC        false    false

# Also test that dropping with a non-existing index still drops 'foo'.

statement ok
DROP INDEX IF EXISTS users@foo, users@zap

query TTBITTBB colnames
SHOW INDEXES FROM users
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit
users       primary     false       1             id           ASC        false    false
users       bar         false       1             id           ASC        false    false
users       bar         false       2             name         ASC        false    false

user testuser

statement error user testuser does not have CREATE privilege on relation users
DROP INDEX users@bar

user root

statement ok
GRANT CREATE ON TABLE users TO testuser

user testuser

statement error in use as unique constraint
DROP INDEX users@bar

statement error in use as unique constraint
DROP INDEX users@bar RESTRICT

statement ok
DROP INDEX users@bar CASCADE

query TTBITTBB colnames
SHOW INDEXES FROM users
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit
users       primary     false       1             id           ASC        false    false

user root

query ITT rowsort
SELECT * FROM users
----
1 tom   cat
2 jerry rat

statement ok
CREATE INDEX foo ON users (name)

statement ok
CREATE INDEX bar ON users (title)

statement ok
CREATE INDEX baz ON users (name, title)

statement ok
DROP INDEX IF EXISTS users@invalid, users@baz

query TTBITTBB colnames
SHOW INDEXES FROM users
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit
users       primary     false       1             id           ASC        false    false
users       foo         true        1             name         ASC        false    false
users       foo         true        2             id           ASC        false    true
users       bar         true        1             title        ASC        false    false
users       bar         true        2             id           ASC        false    true

statement ok
CREATE VIEW v AS SELECT name FROM users@{FORCE_INDEX=foo}

statement error cannot drop index "foo" because view "v" depends on it
DROP INDEX users@foo

statement ok
DROP INDEX users@bar

query TTBITTBB colnames
SHOW INDEXES FROM users
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit
users       primary     false       1             id           ASC        false    false
users       foo         true        1             name         ASC        false    false
users       foo         true        2             id           ASC        false    true

statement ok
CREATE VIEW v2 AS SELECT name FROM v

query TTTTI
SHOW TABLES
----
public  users  table  root  0
public  v      view   root  0
public  v2     view   root  0

statement ok
GRANT ALL ON users to testuser

statement ok
GRANT ALL ON v to testuser

user testuser

statement error user testuser does not have DROP privilege on relation v2
DROP INDEX users@foo CASCADE

user root

statement ok
DROP INDEX users@foo CASCADE

query TTBITTBB colnames
SHOW INDEXES FROM users
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit
users       primary     false       1             id           ASC        false    false

query TTTTI
SHOW TABLES
----
public  users  table  root  0

# Test the syntax without a '@'

statement ok
CREATE INDEX baz ON users (name)

# Also test that dropping with a non-existing index still drops 'baz'.

statement ok
DROP INDEX IF EXISTS baz, zap

query TTBITTBB colnames
SHOW INDEXES FROM users
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit
users       primary     false       1             id           ASC        false    false

# Test that it still succeeds when an index does not exist.

statement ok
DROP INDEX IF EXISTS baz

# Test that presence of a view or sequence doesn't break DROP INDEX (#21834)

statement ok
CREATE DATABASE view_test

statement ok
SET DATABASE = view_test

statement ok
CREATE TABLE t (id INT)

statement ok
CREATE VIEW v AS SELECT id FROM t

statement error pgcode 42704 pq: index "nonexistent_index" does not exist
DROP INDEX nonexistent_index

statement ok
CREATE DATABASE sequence_test

statement ok
SET DATABASE = sequence_test

statement ok
CREATE SEQUENCE s

statement error pgcode 42704 pq: index "nonexistent_index" does not exist
DROP INDEX nonexistent_index

statement ok
CREATE TABLE tu (a INT UNIQUE)

statement ok
CREATE UNIQUE INDEX tu_a ON tu(a)

statement error in use as unique constraint
DROP INDEX tu_a_key

statement ok
DROP INDEX tu_a

# Test that we have more relaxed restrictions on dropping indexes referenced by fks.
subtest fk_drop

# Ensure that DROP INDEX CASCADE does not delete the foreign key when
# there is another index that can satisfy the foreign key constraint.
statement ok
CREATE TABLE fk1 (x int);
CREATE TABLE fk2 (x int PRIMARY KEY);
CREATE INDEX i ON fk1 (x);
CREATE INDEX i2 ON fk1 (x);
ALTER TABLE fk1 ADD CONSTRAINT fk1 FOREIGN KEY (x) REFERENCES fk2 (x);
DROP INDEX fk1@i CASCADE

query TT
SHOW CREATE fk1
----
fk1  CREATE TABLE public.fk1 (
     x INT8 NULL,
     CONSTRAINT fk1 FOREIGN KEY (x) REFERENCES public.fk2(x),
     INDEX i2 (x ASC),
     FAMILY "primary" (x, rowid)
)

# test that notices are generated on index drops
subtest notice_on_drop_index

query T noticetrace
CREATE TABLE drop_index_test(a int); CREATE INDEX drop_index_test_index ON drop_index_test(a); DROP INDEX drop_index_test_index
----
NOTICE: the data for dropped indexes is reclaimed asynchronously
HINT: The reclamation delay can be customized in the zone configuration for the table.

# test correct error reporting from NewUniquenessConstraintViolationError; see #46276
subtest new_uniqueness_constraint_error

statement ok
CREATE TABLE t (a INT PRIMARY KEY, b DECIMAL(10,1) NOT NULL DEFAULT(0), UNIQUE INDEX t_secondary (b), FAMILY (a, b));
INSERT INTO t VALUES (100, 500.5);

statement ok
BEGIN;
DROP INDEX t_secondary CASCADE;
ALTER TABLE t DROP COLUMN b;
INSERT INTO t SELECT a + 1 FROM t;

statement error pgcode 23505 duplicate key value: decoding err=column-id "2" does not exist
UPSERT INTO t SELECT a + 1 FROM t;
