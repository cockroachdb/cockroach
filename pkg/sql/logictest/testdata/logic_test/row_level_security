# LogicTest: !local-legacy-schema-changer !local-mixed-24.3

subtest setup

statement ok
CREATE DATABASE db1;

statement ok
USE db1;

statement ok
GRANT ADMIN to testuser;

statement ok
SET enable_row_level_security = on;

query T
show session enable_row_level_security;
----
on

subtest legacy_fail

let $use_decl_sc
SHOW use_declarative_schema_changer

statement ok
SET use_declarative_schema_changer = 'off';

statement ok
CREATE TABLE legacy();

statement error pq: CREATE POLICY is only implemented in the declarative schema changer
CREATE POLICY p1 on legacy;

statement ok
DROP TABLE legacy;

statement ok
SET use_declarative_schema_changer = $use_decl_sc;

subtest create_drop_sanity

statement ok
CREATE TABLE sanity1();

statement ok
CREATE POLICY p1 on sanity1 USING (true);

statement error pq: policy with name "p1" already exists on table "sanity1"
CREATE POLICY p1 on sanity1 WITH CHECK (true);

statement ok
CREATE POLICY p2 on sanity1 AS PERMISSIVE WITH CHECK (true);

statement notice NOTICE: relation "nonexist" does not exist, skipping
DROP POLICY IF EXISTS notthere on nonexist;

statement notice NOTICE: policy "notthere" for relation "sanity1" does not exist, skipping
DROP POLICY IF EXISTS notthere on sanity1;

statement error pq: policy "notthere" for table "sanity1" does not exist
DROP POLICY notthere on sanity1;

statement ok
DROP POLICY p1 on sanity1;

statement ok
DROP POLICY p2 on sanity1;

statement ok
CREATE POLICY newp1 on sanity1 AS PERMISSIVE USING (true) WITH CHECK (true);

statement ok
DROP TABLE sanity1;

subtest explicit_txn

statement ok
CREATE TABLE explicit1();

let $use_decl_sc
SHOW use_declarative_schema_changer

statement ok
SET use_declarative_schema_changer = 'unsafe_always';

statement ok
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;

statement ok
CREATE POLICY p1 on explicit1;

statement ok
DROP POLICY p1 on explicit1;

statement ok
CREATE POLICY p1 on explicit1 AS PERMISSIVE USING (false);

statement ok
COMMIT;

statement ok
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;

statement ok
DROP POLICY p1 on explicit1;

statement ok
CREATE POLICY p1 on explicit1 USING (false) WITH CHECK (true);

statement ok
COMMIT;

statement ok
DROP TABLE explicit1;

statement ok
SET use_declarative_schema_changer = $use_decl_sc;

subtest policy_type_and_command_ddl

statement ok
CREATE TABLE multi_pol_tab1 (c1 INT NOT NULL PRIMARY KEY)

statement ok
CREATE POLICY "policy 1" ON multi_pol_tab1 AS PERMISSIVE

statement ok
CREATE POLICY "policy 2" ON multi_pol_tab1 AS RESTRICTIVE

statement ok
CREATE POLICY "policy 3" ON multi_pol_tab1 FOR ALL

statement ok
CREATE POLICY "policy 4" ON multi_pol_tab1 FOR INSERT

statement ok
CREATE POLICY "policy 5" ON multi_pol_tab1 FOR UPDATE

statement ok
CREATE POLICY "policy 6" ON multi_pol_tab1 FOR DELETE

statement ok
CREATE POLICY "policy 7" ON multi_pol_tab1 FOR SELECT

query TT
SHOW CREATE TABLE multi_pol_tab1
----
multi_pol_tab1  CREATE TABLE public.multi_pol_tab1 (
                  c1 INT8 NOT NULL,
                  CONSTRAINT multi_pol_tab1_pkey PRIMARY KEY (c1 ASC)
                )

statement ok
DROP POLICY "policy 1" ON multi_pol_tab1

statement ok
DROP POLICY "policy 3" ON multi_pol_tab1

statement ok
DROP POLICY "policy 5" ON multi_pol_tab1

query TT
SHOW CREATE TABLE multi_pol_tab1
----
multi_pol_tab1  CREATE TABLE public.multi_pol_tab1 (
                  c1 INT8 NOT NULL,
                  CONSTRAINT multi_pol_tab1_pkey PRIMARY KEY (c1 ASC)
                )

statement ok
DROP TABLE multi_pol_tab1

subtest drop_role_is_blocked

statement ok
CREATE TABLE drop_role_chk();

statement ok
CREATE USER fred;

statement ok
CREATE USER bob;

statement ok
CREATE POLICY p1 on drop_role_chk to fred,bob;

statement error pq: role "bob" cannot be dropped because some objects depend on it\nDETAIL: target of policy "p1" on table "drop_role_chk"
DROP ROLE bob;

statement error pq: role "fred" cannot be dropped because some objects depend on it\nDETAIL: target of policy "p1" on table "drop_role_chk"
DROP ROLE fred;

statement ok
DROP POLICY p1 on drop_role_chk;

statement ok
DROP ROLE bob,fred;

statement ok
DROP TABLE drop_role_chk;

subtest role_doesnt_exist

statement ok
CREATE TABLE role_exist_chk();

statement error pq: role/user "zeke" does not exist
CREATE POLICY p1 on role_exist_chk to zeke;

statement ok
CREATE USER zeke;

statement ok
CREATE POLICY p1 on role_exist_chk to zeke;

statement ok
DROP TABLE role_exist_chk;

statement ok
DROP ROLE zeke;

subtest current_session_and_user

statement ok
CREATE TABLE target();

statement ok
CREATE USER john;

statement ok
GRANT ALL ON db1.* to testuser;

statement ok
GRANT ALL ON db1.* to john;

statement ok
GRANT SYSTEM MODIFYCLUSTERSETTING TO testuser;

user testuser

statement ok
SET enable_row_level_security = on;

statement ok
USE db1;

statement ok
SET ROLE john;

query TT
SELECT current_user, session_user
----
john testuser

statement ok
CREATE POLICY pol on target TO current_user,session_user;

query TT
SHOW CREATE TABLE target
----
target  CREATE TABLE public.target (
          rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
          CONSTRAINT target_pkey PRIMARY KEY (rowid ASC)
        )

user root

statement ok
SET enable_row_level_security = on;

statement ok
USE db1;

query TT
SELECT current_user, session_user
----
root root

statement error pq: role "john" cannot be dropped because some objects depend on it\nDETAIL: target of policy "pol" on table "target"
DROP ROLE john;

statement error pq: role "testuser" cannot be dropped because some objects depend on it\nDETAIL: target of policy "pol" on table "target"
DROP ROLE testuser;

statement ok
DROP TABLE target;

statement ok
DROP ROLE john;

subtest alter_table_rls_legacy_disabled

let $use_decl_sc
SHOW use_declarative_schema_changer

statement ok
SET use_declarative_schema_changer = 'off';

statement ok
CREATE TABLE roaches();

statement error pq: unimplemented: row-level security mode alteration is not supported
ALTER TABLE roaches ENABLE ROW LEVEL SECURITY;

statement ok
SET use_declarative_schema_changer = $use_decl_sc;

subtest alter_table_rls_enabled_disabled

statement ok
ALTER TABLE roaches ENABLE ROW LEVEL SECURITY;

statement ok
ALTER TABLE roaches DISABLE ROW LEVEL SECURITY;

statement ok
DROP TABLE roaches();

subtest end
