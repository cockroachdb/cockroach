# LogicTest: !local-legacy-schema-changer !local-mixed-24.3 !local-mixed-25.1

subtest setup

let $use_decl_sc
SHOW use_declarative_schema_changer

statement ok
CREATE DATABASE db1;

statement ok
USE db1;

statement ok
GRANT ADMIN to testuser;

statement ok
SET enable_row_level_security = on;

query T
show session enable_row_level_security;
----
on

subtest create_drop_sanity

statement ok
CREATE TABLE sanity1();

statement ok
CREATE POLICY p1 on sanity1 USING (true);

# Verify we log to the event log.
query T retry
select "eventType" from system.eventlog order by timestamp desc limit 1;
----
create_policy

statement error pq: policy with name "p1" already exists on table "sanity1"
CREATE POLICY p1 on sanity1 WITH CHECK (true);

statement ok
CREATE POLICY p2 on sanity1 AS PERMISSIVE WITH CHECK (true);

statement notice NOTICE: relation "nonexist" does not exist, skipping
DROP POLICY IF EXISTS notthere on nonexist;

statement notice NOTICE: policy "notthere" for relation "sanity1" does not exist, skipping
DROP POLICY IF EXISTS notthere on sanity1;

statement error pq: policy "notthere" for table "sanity1" does not exist
DROP POLICY notthere on sanity1;

statement ok
DROP POLICY p1 on sanity1;

# Verify we log to the event log.
query T retry
select "eventType" from system.eventlog order by timestamp desc limit 1;
----
drop_policy

statement ok
DROP POLICY p2 on sanity1;

statement ok
CREATE POLICY newp1 on sanity1 AS PERMISSIVE USING (true) WITH CHECK (true);

statement ok
DROP TABLE sanity1;

subtest explicit_txn

statement ok
CREATE TABLE explicit1();

statement ok
SET use_declarative_schema_changer = 'unsafe_always';

statement ok
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;

statement ok
CREATE POLICY p1 on explicit1;

statement ok
DROP POLICY p1 on explicit1;

statement ok
CREATE POLICY p1 on explicit1 AS PERMISSIVE USING (false);

statement ok
COMMIT;

statement ok
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;

statement ok
DROP POLICY p1 on explicit1;

statement ok
CREATE POLICY p1 on explicit1 USING (false) WITH CHECK (true);

statement ok
COMMIT;

statement ok
DROP TABLE explicit1;

statement ok
SET use_declarative_schema_changer = $use_decl_sc;

subtest policy_type_and_command_ddl

statement ok
CREATE TABLE multi_pol_tab1 (c1 INT NOT NULL PRIMARY KEY)

statement ok
CREATE POLICY "policy 1" ON multi_pol_tab1 AS PERMISSIVE

statement ok
CREATE POLICY "policy 2" ON multi_pol_tab1 AS RESTRICTIVE

statement ok
CREATE POLICY "policy 3" ON multi_pol_tab1 FOR ALL

statement ok
CREATE POLICY "policy 4" ON multi_pol_tab1 FOR INSERT

statement ok
CREATE POLICY "policy 5" ON multi_pol_tab1 FOR UPDATE

statement ok
CREATE POLICY "policy 6" ON multi_pol_tab1 FOR DELETE

statement ok
CREATE POLICY "policy 7" ON multi_pol_tab1 FOR SELECT

statement ok
CREATE USER papa_roach;

statement ok
CREATE POLICY "policy 8" ON multi_pol_tab1 FOR ALL TO papa_roach, public

query TT
SHOW CREATE TABLE multi_pol_tab1
----
multi_pol_tab1  CREATE TABLE public.multi_pol_tab1 (
                  c1 INT8 NOT NULL,
                  CONSTRAINT multi_pol_tab1_pkey PRIMARY KEY (c1 ASC)
                );
                CREATE POLICY "policy 1" ON public.multi_pol_tab1 AS PERMISSIVE FOR ALL TO public;
                CREATE POLICY "policy 2" ON public.multi_pol_tab1 AS RESTRICTIVE FOR ALL TO public;
                CREATE POLICY "policy 3" ON public.multi_pol_tab1 AS PERMISSIVE FOR ALL TO public;
                CREATE POLICY "policy 4" ON public.multi_pol_tab1 AS PERMISSIVE FOR INSERT TO public;
                CREATE POLICY "policy 5" ON public.multi_pol_tab1 AS PERMISSIVE FOR UPDATE TO public;
                CREATE POLICY "policy 6" ON public.multi_pol_tab1 AS PERMISSIVE FOR DELETE TO public;
                CREATE POLICY "policy 7" ON public.multi_pol_tab1 AS PERMISSIVE FOR SELECT TO public;
                CREATE POLICY "policy 8" ON public.multi_pol_tab1 AS PERMISSIVE FOR ALL TO public, papa_roach

statement ok
DROP POLICY "policy 1" ON multi_pol_tab1

statement ok
DROP POLICY "policy 3" ON multi_pol_tab1

statement ok
DROP POLICY "policy 5" ON multi_pol_tab1

query TT
SHOW CREATE TABLE multi_pol_tab1
----
multi_pol_tab1  CREATE TABLE public.multi_pol_tab1 (
                  c1 INT8 NOT NULL,
                  CONSTRAINT multi_pol_tab1_pkey PRIMARY KEY (c1 ASC)
                );
                CREATE POLICY "policy 2" ON public.multi_pol_tab1 AS RESTRICTIVE FOR ALL TO public;
                CREATE POLICY "policy 4" ON public.multi_pol_tab1 AS PERMISSIVE FOR INSERT TO public;
                CREATE POLICY "policy 6" ON public.multi_pol_tab1 AS PERMISSIVE FOR DELETE TO public;
                CREATE POLICY "policy 7" ON public.multi_pol_tab1 AS PERMISSIVE FOR SELECT TO public;
                CREATE POLICY "policy 8" ON public.multi_pol_tab1 AS PERMISSIVE FOR ALL TO public, papa_roach

statement ok
DROP TABLE multi_pol_tab1

subtest drop_role_is_blocked

statement ok
CREATE TABLE drop_role_chk();

statement ok
CREATE USER fred;

statement ok
CREATE USER bob;

statement ok
CREATE POLICY p1 on drop_role_chk to fred,bob;

statement error pq: role "bob" cannot be dropped because some objects depend on it\nDETAIL: target of policy "p1" on table "drop_role_chk"
DROP ROLE bob;

statement error pq: role "fred" cannot be dropped because some objects depend on it\nDETAIL: target of policy "p1" on table "drop_role_chk"
DROP ROLE fred;

statement ok
DROP POLICY p1 on drop_role_chk;

statement ok
DROP ROLE bob,fred;

statement ok
DROP TABLE drop_role_chk;

subtest role_doesnt_exist

statement ok
CREATE TABLE role_exist_chk();

statement error pq: role/user "zeke" does not exist
CREATE POLICY p1 on role_exist_chk to zeke;

statement ok
CREATE USER zeke;

statement ok
CREATE POLICY p1 on role_exist_chk to zeke;

statement ok
DROP TABLE role_exist_chk;

statement ok
DROP ROLE zeke;

subtest current_session_and_user

statement ok
CREATE TABLE target();

statement ok
CREATE USER john;

statement ok
GRANT ALL ON db1.* to testuser;

statement ok
GRANT ALL ON db1.* to john;

statement ok
GRANT SYSTEM MODIFYCLUSTERSETTING TO testuser;

user testuser

statement ok
SET enable_row_level_security = on;

statement ok
USE db1;

statement ok
SET ROLE john;

query TT
SELECT current_user, session_user
----
john testuser

statement ok
CREATE POLICY pol on target TO current_user,session_user;

query TT
SHOW CREATE TABLE target
----
target  CREATE TABLE public.target (
          rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
          CONSTRAINT target_pkey PRIMARY KEY (rowid ASC)
        );
        CREATE POLICY pol ON public.target AS PERMISSIVE FOR ALL TO john, testuser

user root

statement ok
SET enable_row_level_security = on;

statement ok
USE db1;

query TT
SELECT current_user, session_user
----
root root

statement error pq: role "john" cannot be dropped because some objects depend on it\nDETAIL: target of policy "pol" on table "target"
DROP ROLE john;

statement error pq: role "testuser" cannot be dropped because some objects depend on it\nDETAIL: target of policy "pol" on table "target"
DROP ROLE testuser;

statement ok
DROP TABLE target;

statement ok
DROP ROLE john;

subtest udt_ref

statement ok
CREATE TYPE greeting AS ENUM ('hello', 'hi', 'howdy');

statement ok
CREATE TABLE z1 (c1 text);

statement ok
CREATE POLICY p1 on z1 WITH CHECK (c1::greeting = 'hi'::greeting);

statement error pq: cannot drop type "greeting" because other objects \(\[db1\.public\.z1\]\) still depend on it
DROP TYPE greeting;

statement ok
SET use_declarative_schema_changer = 'off';

statement error pq: cannot drop type "greeting" because other objects \(\[db1\.public\.z1\]\) still depend on it
DROP TYPE greeting;

statement ok
SET use_declarative_schema_changer = $use_decl_sc;

statement ok
DROP POLICY p1 on z1;

statement ok
DROP TYPE greeting;

statement error pq: type "greeting" does not exist
CREATE POLICY p1 on z1 WITH CHECK (c1::greeting = 'hi'::greeting);

statement ok
DROP TABLE z1;

subtest seq_ref

statement ok
CREATE SEQUENCE seq1;

statement ok
CREATE TABLE pws ();

statement ok
CREATE POLICY p1 on pws AS RESTRICTIVE WITH CHECK (nextval('seq1') < 100);

statement error pq: cannot drop sequence seq1 because other objects depend on it
DROP SEQUENCE seq1;

statement ok
DROP POLICY p1 on pws;

statement ok
DROP SEQUENCE seq1;

statement ok
DROP TABLE pws;

subtest func_ref

statement ok
CREATE FUNCTION is_valid(n INT) RETURNS BOOL AS $$
BEGIN
  RETURN n < 10;
END;
$$ LANGUAGE PLpgSQL;

statement ok
CREATE TABLE funcref (c1 int);

statement ok
CREATE POLICY pol1 on funcref USING (is_valid(c1)) WITH CHECK (is_valid(c1));

statement error pq: cannot drop function "is_valid" because other objects \(\[db1.public.funcref\]\) still depend on it
DROP FUNCTION is_valid;

statement ok
DROP POLICY pol1 on funcref;

statement ok
DROP FUNCTION is_valid;

statement ok
DROP TABLE funcref;

subtest col_ref

statement ok
CREATE TABLE colref (rename_c1 INT, rename_c2 INT, C3 INT);

statement ok
CREATE POLICY p1 ON colref USING (rename_c1 < 10);

statement ok
CREATE POLICY p2 ON colref WITH CHECK (rename_c2 < 100);

# Attempt to alter/drop column referenced in USING expression
statement ok
ALTER TABLE colref RENAME COLUMN rename_c1 to c1;

statement error pq: cannot drop column "c1" because it is referenced in a policy expression
ALTER TABLE colref DROP COLUMN c1;

statement ok
SET use_declarative_schema_changer = 'off';

statement error pq: cannot drop column "c1" because it is referenced in a policy expression
ALTER TABLE colref DROP COLUMN c1;

statement ok
SET use_declarative_schema_changer = $use_decl_sc;

statement error pq: cannot alter type of column "c1" because it is referenced in a policy expression
ALTER TABLE colref ALTER COLUMN c1 SET DATA TYPE TEXT USING c1::text;

statement ok
DROP POLICY p1 ON colref;

statement ok
ALTER TABLE colref ALTER COLUMN c1 SET DATA TYPE TEXT USING c1::text;

statement ok
ALTER TABLE colref DROP COLUMN c1;

# Repeat for a column referenced with WITH CHECK expression
statement ok
ALTER TABLE colref RENAME COLUMN rename_c2 TO c2;

statement error pq: cannot drop column "c2" because it is referenced in a policy expression
ALTER TABLE colref DROP COLUMN c2;

statement ok
SET use_declarative_schema_changer = 'off';

statement error pq: cannot drop column "c2" because it is referenced in a policy expression
ALTER TABLE colref DROP COLUMN c2;

statement ok
SET use_declarative_schema_changer = $use_decl_sc;

statement error pq: cannot alter type of column "c2" because it is referenced in a policy expression
ALTER TABLE colref ALTER COLUMN c2 SET DATA TYPE TEXT USING c2::text;

statement ok
DROP POLICY p2 ON colref;

statement ok
ALTER TABLE colref ALTER COLUMN c2 SET DATA TYPE TEXT USING c2::text;

statement ok
ALTER TABLE colref DROP COLUMN c2;

statement ok
DROP TABLE colref;

subtest no_subvar_expr

statement ok
CREATE TABLE t1 (c1 int);

statement ok
CREATE TABLE t2 (c1 int);

statement error pq: variable sub-expressions are not allowed in POLICY USING
CREATE POLICY p1 on t1 USING (c1 < (select max(c1) from t1));

statement error pq: variable sub-expressions are not allowed in POLICY WITH CHECK
CREATE POLICY p1 on t1 WITH CHECK (c1 < (select max(c1) from t1));

statement ok
DROP TABLE t1;

statement ok
DROP TABLE t2;

subtest create_policy_udt_using_check

statement ok
create type roach_type as enum('flying','crawling')

statement ok
create table flying_roaches (check ('flying'::roach_type = 'crawling'::roach_type))

statement ok
create policy p1 on flying_roaches using ('flying'::roach_type = 'crawling'::roach_type)

query TT
SHOW CREATE TABLE flying_roaches
----
flying_roaches  CREATE TABLE public.flying_roaches (
                  rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
                  CONSTRAINT flying_roaches_pkey PRIMARY KEY (rowid ASC),
                  CONSTRAINT "check" CHECK ('flying':::public.roach_type = 'crawling':::public.roach_type)
                );
                CREATE POLICY p1 ON public.flying_roaches AS PERMISSIVE FOR ALL TO public USING ('flying':::public.roach_type = 'crawling':::public.roach_type)

query T
select create_statement from crdb_internal.create_statements where descriptor_name='flying_roaches'
----
CREATE TABLE public.flying_roaches (
  rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
  CONSTRAINT flying_roaches_pkey PRIMARY KEY (rowid ASC),
  CONSTRAINT "check" CHECK ('flying':::public.roach_type = 'crawling':::public.roach_type)
);
CREATE POLICY p1 ON public.flying_roaches AS PERMISSIVE FOR ALL TO public USING ('flying':::public.roach_type = 'crawling':::public.roach_type)

query T
select policy_statements from crdb_internal.create_statements where descriptor_name='flying_roaches'
----
{"CREATE POLICY p1 ON public.flying_roaches AS PERMISSIVE FOR ALL TO public USING ('flying':::public.roach_type = 'crawling':::public.roach_type)"}

query T
select alter_statements from crdb_internal.create_statements where descriptor_name='flying_roaches'
----
{}

statement ok
drop table flying_roaches

statement ok
drop type roach_type

subtest alter_table_rls_legacy_unimplemented

statement ok
SET use_declarative_schema_changer = 'off';

statement ok
CREATE TABLE roaches();

statement error pq: ALTER TABLE ... ROW LEVEL SECURITY is only implemented in the declarative schema changer
ALTER TABLE roaches ENABLE ROW LEVEL SECURITY;

statement ok
SET use_declarative_schema_changer = $use_decl_sc;

subtest alter_table_rls_enable_disable

statement ok
ALTER TABLE roaches ENABLE ROW LEVEL SECURITY;

query TT
SHOW CREATE TABLE roaches
----
roaches  CREATE TABLE public.roaches (
           rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
           CONSTRAINT roaches_pkey PRIMARY KEY (rowid ASC)
         );
         ALTER TABLE public.roaches ENABLE ROW LEVEL SECURITY

statement ok
ALTER TABLE roaches DISABLE ROW LEVEL SECURITY;

query TBB
select relname, relrowsecurity, relforcerowsecurity from pg_class where relname = 'roaches';
----
roaches  false  false

query TT
SHOW CREATE TABLE roaches
----
roaches  CREATE TABLE public.roaches (
           rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
           CONSTRAINT roaches_pkey PRIMARY KEY (rowid ASC)
         )

subtest alter_table_rls_force_no_force

statement ok
ALTER TABLE roaches FORCE ROW LEVEL SECURITY;

query TBB
select relname, relrowsecurity, relforcerowsecurity from pg_class where relname = 'roaches';
----
roaches  false  true

query TT
SHOW CREATE TABLE roaches
----
roaches  CREATE TABLE public.roaches (
           rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
           CONSTRAINT roaches_pkey PRIMARY KEY (rowid ASC)
         );
         ALTER TABLE public.roaches FORCE ROW LEVEL SECURITY

statement ok
ALTER TABLE roaches NO FORCE ROW LEVEL SECURITY;

query TBB
select relname, relrowsecurity, relforcerowsecurity from pg_class where relname = 'roaches';
----
roaches  false  false

query TT
SHOW CREATE TABLE roaches
----
roaches  CREATE TABLE public.roaches (
           rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
           CONSTRAINT roaches_pkey PRIMARY KEY (rowid ASC)
         )

subtest alter_table_rls_enable_force

statement ok
ALTER TABLE roaches ENABLE ROW LEVEL SECURITY, FORCE ROW LEVEL SECURITY;

query TT
SHOW CREATE TABLE roaches
----
roaches  CREATE TABLE public.roaches (
           rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
           CONSTRAINT roaches_pkey PRIMARY KEY (rowid ASC)
         );
         ALTER TABLE public.roaches ENABLE ROW LEVEL SECURITY, FORCE ROW LEVEL SECURITY

query TBB
select relname, relrowsecurity, relforcerowsecurity from pg_class where relname = 'roaches';
----
roaches  true  true

query T
select create_statement from crdb_internal.create_statements where descriptor_name='roaches'
----
CREATE TABLE public.roaches (
  rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
  CONSTRAINT roaches_pkey PRIMARY KEY (rowid ASC)
);
ALTER TABLE public.roaches ENABLE ROW LEVEL SECURITY, FORCE ROW LEVEL SECURITY

query TT
select policy_statements, create_nofks from crdb_internal.create_statements where descriptor_name='roaches'
----
{}  CREATE TABLE public.roaches (
      rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
      CONSTRAINT roaches_pkey PRIMARY KEY (rowid ASC)
    )

query T
select alter_statements from crdb_internal.create_statements where descriptor_name='roaches'
----
{"ALTER TABLE public.roaches ENABLE ROW LEVEL SECURITY, FORCE ROW LEVEL SECURITY"}

statement ok
ALTER TABLE roaches DISABLE ROW LEVEL SECURITY, NO FORCE ROW LEVEL SECURITY;

query TT
SHOW CREATE TABLE roaches
----
roaches  CREATE TABLE public.roaches (
           rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
           CONSTRAINT roaches_pkey PRIMARY KEY (rowid ASC)
         )

query T
select create_statement from crdb_internal.create_statements where descriptor_name='roaches'
----
CREATE TABLE public.roaches (
  rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
  CONSTRAINT roaches_pkey PRIMARY KEY (rowid ASC)
)

query T
select policy_statements from crdb_internal.create_statements where descriptor_name='roaches'
----
{}

query T
select alter_statements from crdb_internal.create_statements where descriptor_name='roaches'
----
{}

statement ok
DROP TABLE roaches;

subtest using_expression_applied

statement ok
CREATE TYPE league AS ENUM('AL','NL');

statement ok
CREATE TABLE bbteams (team text, league league, family (team, league));

statement ok
ALTER TABLE bbteams ENABLE ROW LEVEL SECURITY;

statement ok
INSERT INTO bbteams VALUES ('jays', 'AL'), ('tigers', 'AL'), ('cardinals', 'NL'), ('orioles', 'AL'), ('nationals', 'NL');

# Confirm admin user can see all rows
query TT
select team, league from bbteams order by league, team;
----
jays AL
orioles AL
tigers AL
cardinals NL
nationals NL

statement ok
CREATE USER buck;

statement ok
GRANT ALL ON bbteams TO buck;

statement ok
set role buck

# user buck can't see anything because they aren't admin, rls is enabled and no policies are defined.
query TT
select team, league from bbteams order by league, team;
----

statement ok
set role root

# We will create a function and a sequence to include in the expression, as
# these introduce additional dependencies compared to a plain expression using
# basic types.
statement ok
CREATE FUNCTION is_valid(l league) RETURNS BOOL AS $$
BEGIN
  RETURN l = 'AL';
END;
$$ LANGUAGE PLpgSQL;

statement ok
CREATE SEQUENCE seq1;

statement ok
GRANT USAGE ON seq1 TO buck;

statement ok
create policy restrict_select on bbteams for select to buck,current_user,session_user using (is_valid(league) and nextval('seq1') < 1000);

# confirm admin can see all
query TT
select team, league from bbteams where team != 'cardinals' order by league, team;
----
jays AL
orioles AL
tigers AL
nationals NL

statement ok
set role buck

# Retry the same query issue before to ensure memo is properly invalidated.
query TT
select team, league from bbteams where team != 'cardinals' order by league, team;
----
jays AL
orioles AL
tigers AL

# Try another query we know isn't in the statement cache.
query TT
select team, league from bbteams where team != 'astros' order by league, team;
----
jays AL
orioles AL
tigers AL

# Verify that if admin is granted to user buck, it sees all rows because RLS is exempt.
statement ok
set role root

statement ok
GRANT admin TO buck;

statement ok
set role buck;

# This is the same query as before, but since admin changed, we will see all of the rows.
query TT
select team, league from bbteams where team != 'astros' order by league, team;
----
jays AL
orioles AL
tigers AL
cardinals NL
nationals NL

# Retry with a query never tried before so we avoid the statement cache.
query TT
select team, league from bbteams where team != 'mariners' order by league, team;
----
jays AL
orioles AL
tigers AL
cardinals NL
nationals NL

statement ok
set role root

statement ok
REVOKE admin FROM buck;

statement ok
set role buck

# Retry same query we ran before to ensure it's properly invalidated in the statement cache.
query TT
select team, league from bbteams where team != 'mariners' order by league, team;
----
jays AL
orioles AL
tigers AL

statement ok
set role root

# Add policies that apply to other commands. Only SELECT will return rows.
statement ok
CREATE POLICY restrict_insert ON bbteams FOR INSERT TO buck WITH CHECK (false);

statement ok
CREATE POLICY restrict_delete ON bbteams FOR DELETE TO buck USING (false);

statement ok
CREATE POLICY restrict_update ON bbteams FOR UPDATE TO buck USING (false);

statement ok
set role buck

# Verify SELECT will use the original policy that restricts rows just to AL teams
query TT
select team, league from bbteams where team != 'jays' order by league, team;
----
orioles AL
tigers AL

# Try updating a row. The policy for update will prevent us from reading the row.
statement ok
UPDATE bbteams SET team = 'blue jays' where team = 'jays';

query TT
select team, league from bbteams order by league, team;
----
jays AL
orioles AL
tigers AL

# Switch the policy to allow an update, but only for rows in the AL league.
statement ok
set role root

statement ok
DROP POLICY restrict_update on bbteams;

statement ok
create policy restrict_update on bbteams for update to buck using (is_valid(league) and nextval('seq1') < 1000);

statement ok
set role buck

# Allowed
statement ok
UPDATE bbteams SET team = 'Jays' where team = 'jays';

# Not allowed
statement ok
UPDATE bbteams SET team = 'Nationals' where team = 'nationals';

statement ok
set role root

query TT
select team, league from bbteams where team in ('jays', 'Jays', 'nationals', 'Nationals') order by league, team;
----
Jays AL
nationals NL

statement ok
set role buck

# Try to delete the row. The delete policy will prevent us from reading the row.
statement ok
DELETE FROM bbteams;

query TT
select team, league from bbteams order by league, team;
----
Jays     AL
orioles  AL
tigers   AL

# Switch the delete policy to allow deletion of only the tigers
statement ok
set role root

statement ok
DROP POLICY restrict_delete on bbteams;

statement ok
create policy restrict_delete on bbteams for delete to buck using (is_valid(league) and team = 'tigers' and nextval('seq1') < 1000);

statement ok
set role buck

statement ok
DELETE FROM bbteams WHERE team != 'pirates';

query TT
select team, league from bbteams where team != 'pirates' order by league, team;
----
Jays     AL
orioles  AL

query TT
SHOW CREATE TABLE bbteams
----
bbteams  CREATE TABLE public.bbteams (
           team STRING NULL,
           league public.league NULL,
           rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
           CONSTRAINT bbteams_pkey PRIMARY KEY (rowid ASC),
           FAMILY fam_0_team_league_rowid (team, league, rowid)
         );
         ALTER TABLE public.bbteams ENABLE ROW LEVEL SECURITY;
         CREATE POLICY restrict_select ON public.bbteams AS PERMISSIVE FOR SELECT TO buck, root USING (public.is_valid(league) AND (nextval('public.seq1'::REGCLASS) < 1000:::INT8));
         CREATE POLICY restrict_insert ON public.bbteams AS PERMISSIVE FOR INSERT TO buck WITH CHECK (false);
         CREATE POLICY restrict_update ON public.bbteams AS PERMISSIVE FOR UPDATE TO buck USING (public.is_valid(league) AND (nextval('public.seq1'::REGCLASS) < 1000:::INT8));
         CREATE POLICY restrict_delete ON public.bbteams AS PERMISSIVE FOR DELETE TO buck USING ((public.is_valid(league) AND (team = 'tigers':::STRING)) AND (nextval('public.seq1'::REGCLASS) < 1000:::INT8))

statement ok
set role root

statement ok
DROP TABLE bbteams;

statement ok
DROP SEQUENCE seq1;

statement ok
DROP FUNCTION is_valid;

# This subtest verifies proper cleanup of policy elements when dropping with CASCADE.
subtest drop_with_cascade

statement ok
CREATE DATABASE db2;

statement ok
use db2;

statement ok
CREATE TYPE classes AS ENUM('mammals','birds', 'fish', 'reptiles', 'amphibians');

statement ok
CREATE TABLE animals (name text, class classes, family (name, class));

statement ok
ALTER TABLE animals ENABLE ROW LEVEL SECURITY;

statement ok
create policy p1 on animals for select to current_user using (class in ('mammals','birds'));

statement ok
use defaultdb;

statement ok
drop database db2 cascade;

# Ensure that functions defined with security behave as expected
subtest function_security_definer

statement ok
CREATE USER sensitive_user;

statement ok
CREATE TABLE sensitive_data_table (C1 INT);

statement ok
INSERT INTO sensitive_data_table VALUES (0),(1),(2);

statement ok
ALTER TABLE sensitive_data_table ENABLE ROW LEVEL SECURITY;

statement ok
GRANT ALL ON sensitive_data_table TO sensitive_user;

statement ok
CREATE FUNCTION my_sec_definer_function() RETURNS TABLE(ID INT)
LANGUAGE SQL AS
$$
 SELECT * FROM sensitive_data_table
$$ SECURITY DEFINER;

statement ok
CREATE FUNCTION my_non_sec_definer_function() RETURNS TABLE(ID INT)
LANGUAGE SQL AS
$$
 SELECT * FROM sensitive_data_table
$$;

statement ok
SET ROLE sensitive_user;

query I rowsort
SELECT * FROM sensitive_data_table;
----

query I rowsort
SELECT my_sec_definer_function();
----
0
1
2

query I rowsort
SELECT my_non_sec_definer_function();
-----

statement ok
SET ROLE root

statement ok
CREATE POLICY p1 ON sensitive_data_table FOR SELECT TO sensitive_user USING (C1 != 0);

statement ok
SET ROLE sensitive_user;

query I rowsort
SELECT my_sec_definer_function();
----
0
1
2

query I rowsort
SELECT my_non_sec_definer_function()
----
1
2

statement ok
SET ROLE root

statement ok
DROP FUNCTION my_sec_definer_function;

statement ok
DROP FUNCTION my_non_sec_definer_function;

statement ok
DROP TABLE sensitive_data_table;

subtest truncate

statement ok
CREATE TYPE trunc_type AS ENUM('a', 'b', 'c');

statement ok
CREATE TABLE trunc (a INT, b trunc_type, FAMILY (a, b));

statement ok
INSERT INTO trunc VALUES (1, 'a'), (2, 'b'), (3, 'c');

statement ok
CREATE USER deleter;

statement ok
GRANT ALL ON trunc TO deleter;

statement ok
ALTER TABLE trunc ENABLE ROW LEVEL SECURITY, FORCE ROW LEVEL SECURITY;

statement ok
CREATE POLICY p1 ON trunc FOR SELECT TO deleter USING (a % 2 = 1 and b != 'b');

statement ok
CREATE POLICY p2 ON trunc FOR DELETE TO deleter USING (false);

statement ok
CREATE POLICY p3 ON trunc FOR INSERT TO deleter WITH CHECK (true);

statement ok
SET ROLE deleter;

query IT
SELECT a, b FROM trunc ORDER BY a;
----
1  a
3  c

# This should not delete anything because the expression for delete is false.
statement ok
DELETE FROM trunc;

query IT
SELECT a, b FROM trunc ORDER BY a;
----
1  a
3  c

query TT
SHOW CREATE TABLE trunc;
----
trunc  CREATE TABLE public.trunc (
         a INT8 NULL,
         b public.trunc_type NULL,
         rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
         CONSTRAINT trunc_pkey PRIMARY KEY (rowid ASC),
         FAMILY fam_0_a_b_rowid (a, b, rowid)
       );
       ALTER TABLE public.trunc ENABLE ROW LEVEL SECURITY, FORCE ROW LEVEL SECURITY;
       CREATE POLICY p1 ON public.trunc AS PERMISSIVE FOR SELECT TO deleter USING (((a % 2:::INT8) = 1:::INT8) AND (b != 'b':::public.trunc_type));
       CREATE POLICY p2 ON public.trunc AS PERMISSIVE FOR DELETE TO deleter USING (false);
       CREATE POLICY p3 ON public.trunc AS PERMISSIVE FOR INSERT TO deleter WITH CHECK (true)


# Truncate should be allowed, despite the policy to prevent deletes.
statement ok
TRUNCATE TABLE trunc;

query IT
SELECT a, b FROM trunc ORDER BY a;
----

# TRUNCATE is implemented by recreating the table. Verify the same policies exist.
query TT
SHOW CREATE TABLE trunc;
----
trunc  CREATE TABLE public.trunc (
         a INT8 NULL,
         b public.trunc_type NULL,
         rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
         CONSTRAINT trunc_pkey PRIMARY KEY (rowid ASC),
         FAMILY fam_0_a_b_rowid (a, b, rowid)
       );
       ALTER TABLE public.trunc ENABLE ROW LEVEL SECURITY, FORCE ROW LEVEL SECURITY;
       CREATE POLICY p1 ON public.trunc AS PERMISSIVE FOR SELECT TO deleter USING (((a % 2:::INT8) = 1:::INT8) AND (b != 'b':::public.trunc_type));
       CREATE POLICY p2 ON public.trunc AS PERMISSIVE FOR DELETE TO deleter USING (false);
       CREATE POLICY p3 ON public.trunc AS PERMISSIVE FOR INSERT TO deleter WITH CHECK (true)

# Ensure the policies are still enforced.
statement ok
INSERT INTO trunc VALUES (7, 'a'), (8, 'b'), (9, 'c');

query IT
SELECT a, b FROM trunc ORDER BY a;
----
7  a
9  c

statement ok
DELETE FROM trunc;

query IT
SELECT a, b FROM TRUNC ORDER BY a;
----
7  a
9  c

statement ok
SET ROLE root;

statement ok
DROP TABLE trunc;

statement ok
DROP USER deleter;

subtest validate_statement_cache_after_rls_changes

statement ok
CREATE TABLE rls_cache_test (c1 TEXT);

statement ok
INSERT INTO rls_cache_test VALUES ('a'), ('b'), ('c');

statement ok
CREATE USER rls_cache_user;

statement ok
GRANT ALL ON rls_cache_test TO rls_cache_user;

statement ok
SET ROLE rls_cache_user;

# Prime the cache
query T
SELECT * FROM rls_cache_test ORDER BY c1;
----
a
b
c

statement ok
SET ROLE root

statement ok
ALTER TABLE rls_cache_test ENABLE ROW LEVEL SECURITY;

statement ok
SET ROLE rls_cache_user;

# The cache should be invalidated
query T
SELECT * FROM rls_cache_test ORDER BY c1;
----

statement ok
SET ROLE root

statement ok
CREATE POLICY rls_cache_policy ON rls_cache_test FOR SELECT TO rls_cache_user USING (c1 != 'a');

statement ok
SET ROLE rls_cache_user;

# The cache should be invalidated (again)
query T
SELECT * FROM rls_cache_test ORDER BY c1;
----
b
c

statement ok
SET ROLE root

statement ok
ALTER TABLE rls_cache_test DISABLE ROW LEVEL SECURITY;

statement ok
SET ROLE rls_cache_user;

# The cache should be invalidated (again)
query T
SELECT * FROM rls_cache_test ORDER BY c1;
----
a
b
c

statement ok
SET ROLE root

# Ensure that the cache is invalidated when table is dropped
statement ok
DROP TABLE rls_cache_test;

statement ok
SET ROLE rls_cache_user;

statement error pq: relation "rls_cache_test" does not exist
SELECT * FROM rls_cache_test ORDER BY c1;

statement ok
SET ROLE root

statement ok
DROP ROLE rls_cache_user;

subtest block_invalid_expressions

statement ok
CREATE TABLE blocker();

statement error pq: only WITH CHECK expression allowed for INSERT
CREATE POLICY p_insert on blocker FOR INSERT USING (1 = 1);

statement error pq: WITH CHECK cannot be applied to SELECT or DELETE
CREATE POLICY p_select on blocker FOR SELECT WITH CHECK (false);

statement error pq: WITH CHECK cannot be applied to SELECT or DELETE
CREATE POLICY p_delete on blocker FOR DELETE WITH CHECK (1 = 1);

statement ok
DROP TABLE blocker;

subtest block_import

statement ok
CREATE TABLE importer (c1 INT);

statement ok
ALTER TABLE importer ENABLE ROW LEVEL SECURITY;

statement ok
CREATE USER z;

statement ok
GRANT ALL ON importer TO z;

statement ok
GRANT SYSTEM EXTERNALIOIMPLICITACCESS TO z;

# Ensure non-admin's are blocked
statement ok
SET ROLE z;

let $exp_file
WITH cte AS (EXPORT INTO CSV 'nodelocal://1/rls-importer' FROM select 99 UNION ALL SELECT 98 UNION ALL SELECT 97) SELECT filename FROM cte;

statement error pq: IMPORT INTO not supported with row-level security for non-admin users
IMPORT INTO importer CSV DATA ('nodelocal://1/rls-importer/$exp_file');

# Ensure import from the admin role works
statement
SET ROLE root;

# In general, IMPORT isn't compatible with the fake span resolver. So we skip
# in those configs.
skipif config fakedist fakedist-disk fakedist-vec-off
statement ok
IMPORT INTO importer CSV DATA ('nodelocal://1/rls-importer/$exp_file');

skipif config fakedist fakedist-disk fakedist-vec-off
query I
SELECT c1 FROM importer ORDER BY c1;
----
97
98
99

statement ok
DROP TABLE importer;

statement ok
REVOKE SYSTEM EXTERNALIOIMPLICITACCESS FROM z;

statement ok
DROP USER z;

subtest end
