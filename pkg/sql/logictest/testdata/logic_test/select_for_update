# Cockroach currently supports all of the row locking modes as no-ops, so just
# test that they parse and run.
query I
SELECT 1 FOR UPDATE
----
1

query I
SELECT 1 FOR NO KEY UPDATE
----
1

query I
SELECT 1 FOR SHARE
----
1

query I
SELECT 1 FOR KEY SHARE
----
1

query I
SELECT 1 FOR UPDATE FOR SHARE FOR NO KEY UPDATE FOR KEY SHARE
----
1

# Postgres gives an error if you specify a table that isn't available in the
# FROM list for the OF ... clause, but since we're ignoring this list anyway,
# we didn't bother to add that behavior.

query I
SELECT 1 FOR UPDATE OF a
----
1

query I
SELECT 1 FOR SHARE OF a, b
----
1

query I
SELECT 1 FOR UPDATE OF a FOR SHARE OF b, c FOR NO KEY UPDATE OF d FOR KEY SHARE OF e, f
----
1

# We can't support SKIP LOCKED or NOWAIT, since they would actually behave
# differently - NOWAIT returns an error to the client instead of blocking,
# and SKIP LOCKED returns an inconsistent view.

query error unimplemented: SKIP LOCKED lock wait policy is not supported
SELECT 1 FOR UPDATE SKIP LOCKED

query error unimplemented: SKIP LOCKED lock wait policy is not supported
SELECT 1 FOR NO KEY UPDATE SKIP LOCKED

query error unimplemented: SKIP LOCKED lock wait policy is not supported
SELECT 1 FOR SHARE SKIP LOCKED

query error unimplemented: SKIP LOCKED lock wait policy is not supported
SELECT 1 FOR KEY SHARE SKIP LOCKED

query error unimplemented: SKIP LOCKED lock wait policy is not supported
SELECT 1 FOR UPDATE OF a SKIP LOCKED

query error unimplemented: SKIP LOCKED lock wait policy is not supported
SELECT 1 FOR UPDATE OF a SKIP LOCKED FOR NO KEY UPDATE OF b SKIP LOCKED

query error unimplemented: SKIP LOCKED lock wait policy is not supported
SELECT 1 FOR UPDATE OF a SKIP LOCKED FOR NO KEY UPDATE OF b NOWAIT

query error unimplemented: NOWAIT lock wait policy is not supported
SELECT 1 FOR UPDATE NOWAIT

query error unimplemented: NOWAIT lock wait policy is not supported
SELECT 1 FOR NO KEY UPDATE NOWAIT

query error unimplemented: NOWAIT lock wait policy is not supported
SELECT 1 FOR SHARE NOWAIT

query error unimplemented: NOWAIT lock wait policy is not supported
SELECT 1 FOR KEY SHARE NOWAIT

query error unimplemented: NOWAIT lock wait policy is not supported
SELECT 1 FOR UPDATE OF a NOWAIT

query error unimplemented: NOWAIT lock wait policy is not supported
SELECT 1 FOR UPDATE OF a NOWAIT FOR NO KEY UPDATE OF b NOWAIT

# FOR READ ONLY is ignored, like in Postgres.
query I
SELECT 1 FOR READ ONLY
----
1

# Various operations are not supported when locking clauses are provided.
# FeatureNotSupported errors are thrown for each of them.

statement error pgcode 0A000 FOR UPDATE is not allowed with UNION/INTERSECT/EXCEPT
SELECT 1 UNION SELECT 1 FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with VALUES
VALUES (1) FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with DISTINCT clause
SELECT DISTINCT 1 FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with HAVING clause
SELECT 1 HAVING TRUE FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with aggregate functions
SELECT count(1) FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with window functions
SELECT count(1) OVER () FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with set-returning functions in the target list
SELECT generate_series(1, 2) FOR UPDATE

# Set-returning functions in the from list are allowed.
query I
SELECT * FROM generate_series(1, 2) FOR UPDATE
----
1
2
