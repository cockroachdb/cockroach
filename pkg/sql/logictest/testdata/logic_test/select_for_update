# Cockroach currently supports all of the row locking modes as no-ops, so just
# test that they parse and run.
query I
SELECT 1 FOR UPDATE
----
1

query I
SELECT 1 FOR NO KEY UPDATE
----
1

query I
SELECT 1 FOR SHARE
----
1

query I
SELECT 1 FOR KEY SHARE
----
1

query I
SELECT 1 FOR UPDATE FOR SHARE FOR NO KEY UPDATE FOR KEY SHARE
----
1

query error pgcode 42P01 relation "a" in FOR UPDATE clause not found in FROM clause
SELECT 1 FOR UPDATE OF a

query error pgcode 42P01 relation "a" in FOR SHARE clause not found in FROM clause
SELECT 1 FOR SHARE OF a, b

query error pgcode 42P01 relation "a" in FOR UPDATE clause not found in FROM clause
SELECT 1 FOR UPDATE OF a FOR SHARE OF b, c FOR NO KEY UPDATE OF d FOR KEY SHARE OF e, f

query I
SELECT 1 FROM
    (SELECT 1) a,
    (SELECT 1) b,
    (SELECT 1) c,
    (SELECT 1) d,
    (SELECT 1) e,
    (SELECT 1) f
FOR UPDATE OF a FOR SHARE OF b, c FOR NO KEY UPDATE OF d FOR KEY SHARE OF e, f
----
1

# However, we do mirror Postgres in that we require FOR UPDATE targets to be
# unqualified names and reject anything else.

query error pgcode 42601 FOR UPDATE must specify unqualified relation names
SELECT 1 FOR UPDATE OF public.a

query error pgcode 42601 FOR UPDATE must specify unqualified relation names
SELECT 1 FOR UPDATE OF db.public.a

# We don't currently support SKIP LOCKED, since it returns an inconsistent view
# and generally has strange semantics with respect to serializable isolation.
# Support may be added in the future.

query error unimplemented: SKIP LOCKED lock wait policy is not supported
SELECT 1 FOR UPDATE SKIP LOCKED

query error unimplemented: SKIP LOCKED lock wait policy is not supported
SELECT 1 FOR NO KEY UPDATE SKIP LOCKED

query error unimplemented: SKIP LOCKED lock wait policy is not supported
SELECT 1 FOR SHARE SKIP LOCKED

query error unimplemented: SKIP LOCKED lock wait policy is not supported
SELECT 1 FOR KEY SHARE SKIP LOCKED

query error unimplemented: SKIP LOCKED lock wait policy is not supported
SELECT 1 FOR UPDATE OF a SKIP LOCKED

query error unimplemented: SKIP LOCKED lock wait policy is not supported
SELECT 1 FOR UPDATE OF a SKIP LOCKED FOR NO KEY UPDATE OF b SKIP LOCKED

query error unimplemented: SKIP LOCKED lock wait policy is not supported
SELECT 1 FOR UPDATE OF a SKIP LOCKED FOR NO KEY UPDATE OF b NOWAIT

query I
SELECT 1 FOR UPDATE NOWAIT
----
1

query I
SELECT 1 FOR NO KEY UPDATE NOWAIT
----
1

query I
SELECT 1 FOR SHARE NOWAIT
----
1

query I
SELECT 1 FOR KEY SHARE NOWAIT
----
1

query error pgcode 42P01 relation "a" in FOR UPDATE clause not found in FROM clause
SELECT 1 FOR UPDATE OF a NOWAIT

query error pgcode 42P01 relation "a" in FOR UPDATE clause not found in FROM clause
SELECT 1 FOR UPDATE OF a NOWAIT FOR NO KEY UPDATE OF b NOWAIT

query error pgcode 42P01 relation "a" in FOR UPDATE clause not found in FROM clause
SELECT 1 FOR UPDATE OF a NOWAIT FOR SHARE OF b, c NOWAIT FOR NO KEY UPDATE OF d NOWAIT  FOR KEY SHARE OF e, f NOWAIT 

# Locking clauses both inside and outside of parenthesis are handled correctly.

query error unimplemented: SKIP LOCKED lock wait policy is not supported
((SELECT 1)) FOR UPDATE SKIP LOCKED

query error unimplemented: SKIP LOCKED lock wait policy is not supported
((SELECT 1) FOR UPDATE SKIP LOCKED)

query error unimplemented: SKIP LOCKED lock wait policy is not supported
((SELECT 1 FOR UPDATE SKIP LOCKED))

# FOR READ ONLY is ignored, like in Postgres.
query I
SELECT 1 FOR READ ONLY
----
1

# Various operations are not supported when locking clauses are provided.
# FeatureNotSupported errors are thrown for each of them.

statement error pgcode 0A000 FOR UPDATE is not allowed with UNION/INTERSECT/EXCEPT
SELECT 1 UNION SELECT 1 FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with UNION/INTERSECT/EXCEPT
SELECT * FROM (SELECT 1 UNION SELECT 1) a FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with VALUES
VALUES (1) FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with VALUES
SELECT * FROM (VALUES (1)) a FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with DISTINCT clause
SELECT DISTINCT 1 FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with DISTINCT clause
SELECT * FROM (SELECT DISTINCT 1) a FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with GROUP BY clause
SELECT 1 GROUP BY 1 FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with GROUP BY clause
SELECT * FROM (SELECT 1 GROUP BY 1) a FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with HAVING clause
SELECT 1 HAVING TRUE FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with HAVING clause
SELECT * FROM (SELECT 1 HAVING TRUE) a FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with aggregate functions
SELECT count(1) FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with aggregate functions
SELECT * FROM (SELECT count(1)) a FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with window functions
SELECT count(1) OVER () FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with window functions
SELECT * FROM (SELECT count(1) OVER ()) a FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with set-returning functions in the target list
SELECT generate_series(1, 2) FOR UPDATE

statement error pgcode 0A000 FOR UPDATE is not allowed with set-returning functions in the target list
SELECT * FROM (SELECT generate_series(1, 2)) a FOR UPDATE

# Set-returning functions in the from list are allowed.
query I
SELECT * FROM generate_series(1, 2) FOR UPDATE
----
1
2

query I
SELECT * FROM (SELECT * FROM generate_series(1, 2)) a FOR UPDATE
----
1
2

# Use of SELECT FOR UPDATE/SHARE requires SELECT and UPDATE privileges.

statement ok
CREATE TABLE t (k INT PRIMARY KEY, v int)

user testuser

statement error pgcode 42501 user testuser does not have SELECT privilege on relation t
SELECT * FROM t

statement error pgcode 42501 user testuser does not have SELECT privilege on relation t
SELECT * FROM t FOR UPDATE

statement error pgcode 42501 user testuser does not have SELECT privilege on relation t
SELECT * FROM t FOR SHARE

user root

statement ok
GRANT SELECT ON t TO testuser

user testuser

statement ok
SELECT * FROM t

statement error pgcode 42501 user testuser does not have UPDATE privilege on relation t
SELECT * FROM t FOR UPDATE

statement error pgcode 42501 user testuser does not have UPDATE privilege on relation t
SELECT * FROM t FOR SHARE

user root

statement ok
REVOKE SELECT ON t FROM testuser

statement ok
GRANT UPDATE ON t TO testuser

user testuser

statement error pgcode 42501 user testuser does not have SELECT privilege on relation t
SELECT * FROM t

statement error pgcode 42501 user testuser does not have SELECT privilege on relation t
SELECT * FROM t FOR UPDATE

statement error pgcode 42501 user testuser does not have SELECT privilege on relation t
SELECT * FROM t FOR SHARE

user root

statement ok
GRANT SELECT ON t TO testuser

user testuser

statement ok
SELECT * FROM t

statement ok
SELECT * FROM t FOR UPDATE

statement ok
SELECT * FROM t FOR SHARE

user root

# Use of SELECT FOR UPDATE/SHARE in ReadOnly Transaction

statement ok
BEGIN READ ONLY

statement error cannot execute FOR UPDATE in a read-only transaction
SELECT * FROM t FOR UPDATE

statement ok
ROLLBACK

statement ok
BEGIN READ ONLY

statement error cannot execute FOR NO KEY UPDATE in a read-only transaction
SELECT * FROM t FOR NO KEY UPDATE

statement ok
ROLLBACK

statement ok
BEGIN READ ONLY

statement error cannot execute FOR SHARE in a read-only transaction
SELECT * FROM t FOR SHARE

statement ok
ROLLBACK

statement ok
BEGIN READ ONLY

statement error cannot execute FOR KEY SHARE in a read-only transaction
SELECT * FROM t FOR KEY SHARE

statement ok
ROLLBACK

# The NOWAIT wait policy returns error when conflicting lock is encountered.

statement ok
INSERT INTO t VALUES (1, 1)

statement ok
BEGIN; UPDATE t SET v = 2 WHERE k = 1

user testuser

query error pgcode 55P03 could not obtain lock on row \(k\)=\(1\) in t@primary
SELECT * FROM t FOR UPDATE NOWAIT

query error pgcode 55P03 could not obtain lock on row \(k\)=\(1\) in t@primary
SELECT * FROM t FOR SHARE FOR UPDATE OF t NOWAIT

query error pgcode 55P03 could not obtain lock on row \(k\)=\(1\) in t@primary
SELECT * FROM t FOR SHARE NOWAIT FOR UPDATE OF t

query error pgcode 55P03 could not obtain lock on row \(k\)=\(1\) in t@primary
BEGIN; SELECT * FROM t FOR UPDATE NOWAIT

statement ok
ROLLBACK

user root

statement ok
ROLLBACK

# The NOWAIT wait policy can be applied to a subset of the tables being locked.

statement ok
CREATE TABLE t2 (k INT PRIMARY KEY, v2 int)

statement ok
GRANT SELECT ON t2 TO testuser

statement ok
GRANT UPDATE ON t2 TO testuser

statement ok
INSERT INTO t2 VALUES (1, 11)

statement ok
BEGIN; UPDATE t SET v = 2 WHERE k = 1

user testuser

query error pgcode 55P03 could not obtain lock on row \(k\)=\(1\) in t@primary
SELECT v, v2 FROM t JOIN t2 USING (k) FOR SHARE FOR SHARE OF t NOWAIT

query error pgcode 55P03 could not obtain lock on row \(k\)=\(1\) in t@primary
SELECT v, v2 FROM t JOIN t2 USING (k) FOR SHARE OF t2 FOR SHARE OF t NOWAIT

query error pgcode 55P03 could not obtain lock on row \(k\)=\(1\) in t@primary
SELECT v, v2 FROM t JOIN t2 USING (k) FOR SHARE NOWAIT FOR SHARE OF t

query error pgcode 55P03 could not obtain lock on row \(k\)=\(1\) in t@primary
SELECT v, v2 FROM t JOIN t2 USING (k) FOR SHARE NOWAIT FOR SHARE OF t2

statement ok
SET statement_timeout = '10ms'

query error pgcode 57014 query execution canceled due to statement timeout
SELECT v, v2 FROM t JOIN t2 USING (k) FOR SHARE FOR SHARE OF t2 NOWAIT

query error pgcode 57014 query execution canceled due to statement timeout
SELECT v, v2 FROM t JOIN t2 USING (k) FOR SHARE OF t FOR SHARE OF t2 NOWAIT

statement ok
SET statement_timeout = 0

user root

statement ok
ROLLBACK
