# LogicTest: default parallel-stmts distsql

statement ok
CREATE TABLE with_no_column_refs (
  a INT,
  b INT,
  c INT AS (3) STORED
)

query TT
SHOW CREATE TABLE with_no_column_refs
----
with_no_column_refs CREATE TABLE with_no_column_refs (
                      a INT NULL,
                      b INT NULL,
                      c INT NULL AS (3) STORED,
                      FAMILY "primary" (a, b, c, rowid)
                    )

statement error TODO\(justin\)
INSERT INTO with_no_column_refs (c) VALUES (1)

statement error TODO\(justin\)
INSERT INTO with_no_column_refs (a, b) VALUES (1, 2)

statement ok
CREATE TABLE x (
  a INT DEFAULT 3,
  b INT DEFAULT 7,
  c INT AS a STORED,
  d INT AS a + b STORED
)

query TT
SHOW CREATE TABLE x
----
x CREATE TABLE x (
    a INT NULL DEFAULT 3:::INT,
    b INT NULL DEFAULT 7:::INT,
    c INT NULL AS a STORED,
    d INT NULL AS a + b STORED,
    FAMILY "primary" (a, b, c, d, rowid)
  )

statement error TODO\(justin\)
INSERT INTO x (c) VALUES (1)

statement error TODO\(justin\)
INSERT INTO x (a, b) VALUES (1, 2)

statement error TODO\(justin\)
DELETE FROM x

statement error TODO\(justin\)
INSERT INTO x VALUES (DEFAULT)

statement error TODO\(justin\)
DELETE FROM x

statement error TODO\(justin\)
INSERT INTO x VALUES (1, 2, DEFAULT, DEFAULT)

statement ok
DROP TABLE x

# Check with upserts
statement ok
CREATE TABLE x (
  a INT PRIMARY KEY,
  b INT,
  c INT AS b + 1 STORED,
  d INT AS b - 1 STORED
)

statement error TODO\(justin\)
INSERT INTO x (a, b) VALUES (1, 1) ON CONFLICT (a) DO UPDATE SET b = excluded.b + 1

statement error TODO\(justin\)
INSERT INTO x (a, b) VALUES (1, 1) ON CONFLICT (a) DO UPDATE SET b = excluded.b + 1

statement error TODO\(justin\)
INSERT INTO x (a, b) VALUES (1, 1) ON CONFLICT (a) DO UPDATE SET b = x.b + 1

# Update.

statement error TODO\(justin\)
UPDATE x SET b = 3

statement error TODO\(justin\)
UPDATE x SET b = c

statement error TODO\(justin\)
UPDATE x SET (b, c) = (1, DEFAULT)

statement ok
DROP TABLE x

statement ok
CREATE TABLE x (
  b INT AS a STORED,
  a INT
)

statement error TODO\(justin\)
INSERT INTO x VALUES (DEFAULT, 1)

statement error TODO\(justin\)
INSERT INTO x VALUES (DEFAULT, '2')

statement ok
DROP TABLE x

statement error expected computed column expression to have type int, but .* has type string
CREATE TABLE y (
  a INT AS 'not an integer!'::STRING STORED
)

# We utilize the types from other columns.

statement error expected computed column expression to have type int, but .* has type string
CREATE TABLE y (
  a STRING,
  b INT AS a STORED
)

statement error computed column a contains impure functions: now\(\)
CREATE TABLE y (
  a TIMESTAMP AS now() STORED
)

statement error computed column a contains impure functions: now\(\), uuid_v4\(\)
CREATE TABLE y (
  a STRING AS CONCAT(now()::STRING, uuid_v4()::STRING) STORED
)

statement error computed columns cannot reference other computed columns
CREATE TABLE y (
  a INT AS 3 STORED,
  b INT AS a STORED
)

statement error column "a" not found, referenced in "a"
CREATE TABLE y (
  b INT AS a STORED
)

statement error computed columns cannot have default values
CREATE TABLE y (
  a INT AS 3 STORED DEFAULT 4
)

# TODO(justin,bram): this should be allowed.
statement ok
CREATE TABLE x (a INT PRIMARY KEY)

statement error computed columns cannot reference non-restricted FK columns
CREATE TABLE y (
  q INT REFERENCES x (a) ON UPDATE CASCADE,
  r INT AS q STORED
)

statement error computed columns cannot reference non-restricted FK columns
CREATE TABLE y (
  q INT REFERENCES x (a) ON DELETE CASCADE,
  r INT AS q STORED
)

# It's ok if they exist and we don't reference them.
statement ok
CREATE TABLE y (
  q INT REFERENCES x (a) ON UPDATE CASCADE,
  r INT AS 3 STORED
)

statement ok
DROP TABLE y

statement ok
DROP TABLE x

# Indexes on computed columns
statement ok
CREATE TABLE x (
  k INT PRIMARY KEY,
  a JSON,
  b TEXT AS (a->>'q') STORED,
  INDEX (b) STORING (k)
)

query TTT
EXPLAIN SELECT b FROM x ORDER BY b
----
render     ·      ·
 └── scan  ·      ·
·          table  x@x_b_idx
·          spans  ALL

statement ok
DROP TABLE x

# Check that computed columns are resilient to column renames.
statement ok
CREATE TABLE x (
  a INT,
  b INT AS a STORED
)

statement ok
ALTER TABLE x RENAME COLUMN a TO c

query TT
SHOW CREATE TABLE x
----
x CREATE TABLE x (
    c INT NULL,
    b INT NULL AS c STORED,
    FAMILY "primary" (c, b, rowid)
  )

statement ok
DROP TABLE x

# TODO(justin): adding computed columns.
