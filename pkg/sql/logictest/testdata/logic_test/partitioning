# LogicTest: default

statement error syntax
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST ()

statement error syntax
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) ()

statement error syntax
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN ()
)

# NB: This table gets the automatic, hidden unique_rowid PK, so `a` is not a prefix.
statement error declared partition columns must match index being partitioned
CREATE TABLE t (a INT, b INT, c INT) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (0)
)

statement error declared partition columns must match index being partitioned
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a, b, c) (
    PARTITION p1 VALUES IN (0)
)

statement error declared partition columns must match index being partitioned
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (b) (
    PARTITION p1 VALUES IN (0)
)

statement error declared partition columns must match index being partitioned
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (c) (
    PARTITION p1 VALUES IN (0)
)

statement error declared partition columns must match index being partitioned
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (0) PARTITION BY LIST (a) (
        PARTITION p1_1 VALUES IN (0)
    )
)

statement error declared partition columns must match index being partitioned
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (0) PARTITION BY LIST (c) (
        PARTITION p1_1 VALUES IN (0)
    )
)

statement error PARTITION p1: name must be unique
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (1),
    PARTITION p1 VALUES IN (2)
)

statement error PARTITION p1: name must be unique
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (1),
    PARTITION P1 VALUES IN (2)
)

statement error PARTITION p1: name must be unique
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (1) PARTITION BY LIST (b) (
        PARTITION p1 VALUES IN (2)
    )
)

statement error PARTITION p1: cannot subpartition a range partition
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES < 1 PARTITION BY LIST (b) (
        PARTITION p2 VALUES IN (2)
    )
)

statement ok
CREATE TABLE interleave_root (a INT PRIMARY KEY) PARTITION BY LIST (a) (
    PARTITION p0 VALUES IN (0)
)

statement ok
CREATE TABLE interleave_child (a INT PRIMARY KEY) INTERLEAVE IN PARENT interleave_root (a)

statement error cannot set a zone config for interleaved index primary; set it on the root of the interleaved hierarchy instead
CREATE TABLE t (a INT PRIMARY KEY) INTERLEAVE IN PARENT interleave_root (a) PARTITION BY LIST (a) (
    PARTITION p0 VALUES IN (0)
)

statement error PARTITION p1: partition has 1 columns but 2 values were supplied
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN ((0, 1))
)

statement error PARTITION p1: partition has 2 columns but 1 values were supplied
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a, b) (
    PARTITION p1 VALUES IN (0)
)

statement error \(1\) cannot be present in more than one partition
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (1),
    PARTITION p2 VALUES IN (1)
)

statement error prefix \(DEFAULT\) cannot be present in more than one partition
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (DEFAULT),
    PARTITION p2 VALUES IN (DEFAULT)
)

statement error prefix \(1, 2, DEFAULT\) cannot be present in more than one partition
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b, c)) PARTITION BY LIST (a, b, c) (
    PARTITION p1 VALUES IN ((1, 2, DEFAULT)),
    PARTITION p2 VALUES IN ((1, 2, DEFAULT))
)

statement error prefix \(1, DEFAULT\) cannot be present in more than one partition
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b, c)) PARTITION BY LIST (a, b, c) (
    PARTITION p1 VALUES IN ((1, DEFAULT, DEFAULT)),
    PARTITION p2 VALUES IN ((1, DEFAULT, DEFAULT))
)

statement error \(1.000\) cannot be present in more than one partition
CREATE TABLE t (a DECIMAL PRIMARY KEY) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (1.0:::decimal),
    PARTITION p2 VALUES IN (1.000:::decimal)
)

statement error PARTITION p1: non-DEFAULT value \(1\) not allowed after DEFAULT
CREATE TABLE t (a INT, b INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a, b) (
    PARTITION p1 VALUES IN ((DEFAULT, 1))
)

statement error values must be strictly increasing: \(1\) is out of order
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES < 2,
    PARTITION p2 VALUES < 1
)

statement error values must be strictly increasing: \(1\) is out of order
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES < MAXVALUE,
    PARTITION p2 VALUES < 1
)

statement error \(1\) cannot be present in more than one partition
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES < 1,
    PARTITION p2 VALUES < 1
)

statement error prefix \(1, 2, MAXVALUE\) cannot be present in more than one partition
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b, c)) PARTITION BY RANGE (a, b, c) (
    PARTITION p1 VALUES < (1, 2, MAXVALUE),
    PARTITION p2 VALUES < (1, 2, MAXVALUE)
)

statement error prefix \(1, MAXVALUE\) cannot be present in more than one partition
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b, c)) PARTITION BY RANGE (a, b, c) (
    PARTITION p1 VALUES < (1, MAXVALUE, MAXVALUE),
    PARTITION p2 VALUES < (1, MAXVALUE, MAXVALUE)
)

statement error \(1.000\) cannot be present in more than one partition
CREATE TABLE t (a DECIMAL PRIMARY KEY) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES < 1.0:::decimal,
    PARTITION p2 VALUES < 1.000:::decimal
)

statement error PARTITION p1: non-MAXVALUE value \(1\) not allowed after MAXVALUE
CREATE TABLE t (a INT, b INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a, b) (
    PARTITION p1 VALUES < (MAXVALUE, 1)
)

statement error values must be strictly increasing: \('x' COLLATE da\) is out of order
CREATE TABLE t (a STRING COLLATE da PRIMARY KEY) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES < ('端' COLLATE da),
    PARTITION p2 VALUES < ('x' COLLATE da)
)

statement ok
CREATE TABLE collate_da (a STRING COLLATE da PRIMARY KEY) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES < ('x' COLLATE da),
    PARTITION p2 VALUES < ('端' COLLATE da)
)

statement error values must be strictly increasing: \(e'\\u00FC' COLLATE de\) is out of order
CREATE TABLE t (a STRING COLLATE de PRIMARY KEY) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES < ('x' COLLATE de),
    PARTITION p2 VALUES < ('端' COLLATE de)
)

statement ok
CREATE TABLE collate_de (a STRING COLLATE de PRIMARY KEY) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES < ('端' COLLATE de),
    PARTITION p2 VALUES < ('x' COLLATE de)
)

statement error value type decimal doesn't match type INT of column "a"
CREATE TABLE foo (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (1.2)
)

statement error value type decimal doesn't match type INT of column "b"
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (0) PARTITION BY LIST (b) (
        PARTITION p1_1 VALUES IN (1.2)
    )
)

statement error PARTITION p1: MAXVALUE cannot be used with PARTITION BY LIST
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (MAXVALUE)
)

statement error PARTITION p1: MAXVALUE cannot be used with PARTITION BY LIST
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (((MAXVALUE)))
)

statement error PARTITION p1: DEFAULT cannot be used with PARTITION BY RANGE
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES < DEFAULT
)

statement error PARTITION p1: DEFAULT cannot be used with PARTITION BY RANGE
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES < (DEFAULT)
)

statement error PARTITION p1: DEFAULT cannot be used with PARTITION BY RANGE
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES < (((DEFAULT)))
)

statement error unimplemented: placeholders are not supported in PARTITION BY
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN ($1)
)

statement ok
CREATE TABLE ok1 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (1),
    PARTITION p2 VALUES IN (2)
)

query TT
SHOW CREATE TABLE ok1
----
ok1  CREATE TABLE ok1 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY LIST (a) (
   PARTITION p1 VALUES IN ((1)),
   PARTITION p2 VALUES IN ((2))
)

statement ok
CREATE TABLE ok2 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN ((1)),
    PARTITION p2 VALUES IN (((2)))
)

query TT
SHOW CREATE TABLE ok2
----
ok2  CREATE TABLE ok2 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY LIST (a) (
   PARTITION p1 VALUES IN ((1)),
   PARTITION p2 VALUES IN ((2))
)

statement ok
CREATE TABLE ok3 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (1),
    PARTITION p2 VALUES IN (DEFAULT)
)

query TT
SHOW CREATE TABLE ok3
----
ok3  CREATE TABLE ok3 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY LIST (a) (
   PARTITION p1 VALUES IN ((1)),
   PARTITION p2 VALUES IN ((DEFAULT))
)

statement ok
CREATE TABLE ok4 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a, b) (
    PARTITION p1 VALUES IN ((1, 1)),
    PARTITION p2 VALUES IN ((1, DEFAULT)),
    PARTITION p3 VALUES IN ((2, 3)),
    PARTITION p4 VALUES IN ((DEFAULT, DEFAULT))
)

query TT
SHOW CREATE TABLE ok4
----
ok4  CREATE TABLE ok4 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY LIST (ab) (
   PARTITION p1 VALUES IN ((1, 1)),
   PARTITION p2 VALUES IN ((1, DEFAULT)),
   PARTITION p3 VALUES IN ((2, 3)),
   PARTITION p4 VALUES IN ((DEFAULT, DEFAULT))
)

statement ok
CREATE TABLE ok5 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (1) PARTITION BY LIST (b) (
        PARTITION p1_1 VALUES IN (1),
        PARTITION p1_2 VALUES IN (DEFAULT)
    ),
    PARTITION p2 VALUES IN (2) PARTITION BY LIST (b) (
        PARTITION p2_1 VALUES IN (3)
    ),
    PARTITION p3 VALUES IN (DEFAULT)
)

query TT
SHOW CREATE TABLE ok5
----
ok5  CREATE TABLE ok5 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY LIST (a) (
   PARTITION p1 VALUES IN ((1)) PARTITION BY LIST (b) (
     PARTITION p1_1 VALUES IN ((1)),
     PARTITION p1_2 VALUES IN ((DEFAULT))
   ),
   PARTITION p2 VALUES IN ((2)) PARTITION BY LIST (b) (
     PARTITION p2_1 VALUES IN ((3))
   ),
   PARTITION p3 VALUES IN ((DEFAULT))
)

statement ok
CREATE TABLE ok6 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES < 1,
    PARTITION p2 VALUES < 2
)

query TT
SHOW CREATE TABLE ok6
----
ok6  CREATE TABLE ok6 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY RANGE (a) (
   PARTITION p1 VALUES < (1),
   PARTITION p2 VALUES < (2)
)

statement ok
CREATE TABLE ok7 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES < ((1)),
    PARTITION p2 VALUES < (((2)))
)

query TT
SHOW CREATE TABLE ok7
----
ok7  CREATE TABLE ok7 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY RANGE (a) (
   PARTITION p1 VALUES < (1),
   PARTITION p2 VALUES < (2)
)

statement ok
CREATE TABLE ok8 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES < 1,
    PARTITION p2 VALUES < 2,
    PARTITION p3 VALUES < MAXVALUE
)

query TT
SHOW CREATE TABLE ok8
----
ok8  CREATE TABLE ok8 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY RANGE (a) (
   PARTITION p1 VALUES < (1),
   PARTITION p2 VALUES < (2),
   PARTITION p3 VALUES < (MAXVALUE)
)

statement ok
CREATE TABLE ok9 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES < (1),
    PARTITION p2 VALUES < (2),
    PARTITION p3 VALUES < (MAXVALUE)
)

query TT
SHOW CREATE TABLE ok9
----
ok9  CREATE TABLE ok9 (
     a INT NOT NULL,
     b INT NOT NULL,
     c INT NULL,
     CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
     FAMILY "primary" (a, b, c)
) PARTITION BY RANGE (a) (
   PARTITION p1 VALUES < (1),
   PARTITION p2 VALUES < (2),
   PARTITION p3 VALUES < (MAXVALUE)
)

statement ok
CREATE TABLE ok10 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a, b) (
    PARTITION p1 VALUES < (1, 1),
    PARTITION p2 VALUES < (1, MAXVALUE),
    PARTITION p3 VALUES < (2, MAXVALUE),
    PARTITION p4 VALUES < (3, 4),
    PARTITION p5 VALUES < (MAXVALUE, MAXVALUE)
)

query TT
SHOW CREATE TABLE ok10
----
ok10  CREATE TABLE ok10 (
      a INT NOT NULL,
      b INT NOT NULL,
      c INT NULL,
      CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
      FAMILY "primary" (a, b, c)
) PARTITION BY RANGE (ab) (
   PARTITION p1 VALUES < (1, 1),
   PARTITION p2 VALUES < (1, MAXVALUE),
   PARTITION p3 VALUES < (2, MAXVALUE),
   PARTITION p4 VALUES < (3, 4),
   PARTITION p5 VALUES < (MAXVALUE, MAXVALUE)
)

statement ok
CREATE TABLE ok11 (a INT, b INT, c INT, PRIMARY KEY (a, b, c)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (1) PARTITION BY LIST (b) (
        PARTITION p1_1 VALUES IN (3) PARTITION BY LIST (c) (
            PARTITION p1_1_1 VALUES IN (8)
        ),
        PARTITION p1_2 VALUES IN (4)
    ),
    PARTITION p2 VALUES IN (6) PARTITION BY RANGE (b) (
        PARTITION p2_1 VALUES < 7,
        PARTITION p2_2 VALUES < MAXVALUE
    )
)

query TT
SHOW CREATE TABLE ok11
----
ok11  CREATE TABLE ok11 (
      a INT NOT NULL,
      b INT NOT NULL,
      c INT NOT NULL,
      CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC, c ASC),
      FAMILY "primary" (a, b, c)
) PARTITION BY LIST (a) (
   PARTITION p1 VALUES IN ((1)) PARTITION BY LIST (b) (
     PARTITION p1_1 VALUES IN ((3)) PARTITION BY LIST (c) (
       PARTITION p1_1_1 VALUES IN ((8))
     ),
     PARTITION p1_2 VALUES IN ((4))
   ),
   PARTITION p2 VALUES IN ((6)) PARTITION BY RANGE (b) (
     PARTITION p2_1 VALUES < (7),
     PARTITION p2_2 VALUES < (MAXVALUE)
   )
)

statement ok
CREATE TABLE IF NOT EXISTS ok12 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES IN (1),
    PARTITION p2 VALUES IN (2)
)


query TT
SHOW CREATE TABLE ok12
----
ok12  CREATE TABLE ok12 (
      a INT NOT NULL,
      b INT NOT NULL,
      c INT NULL,
      CONSTRAINT "primary" PRIMARY KEY (a ASC, b ASC),
      FAMILY "primary" (a, b, c)
) PARTITION BY LIST (a) (
   PARTITION p1 VALUES IN ((1)),
   PARTITION p2 VALUES IN ((2))
)

# TODO(dan): Partition names should follow the same foldings and uniqueness
# rules as table names. Add some more tests to the `case_sensitive_names` logic
# test.
