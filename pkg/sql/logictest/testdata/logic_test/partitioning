# LogicTest: default

statement error syntax
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST ()

statement error syntax
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) ()

statement error syntax
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES ()
)

statement error declared partition columns must match index being partitioned
CREATE TABLE t (a INT, b INT, c INT) PARTITION BY LIST (a) (
    PARTITION p1 VALUES (0)
)

statement error declared partition columns must match index being partitioned
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a, b, c) (
    PARTITION p1 VALUES (0)
)

statement error declared partition columns must match index being partitioned
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (b) (
    PARTITION p1 VALUES (0)
)

statement error declared partition columns must match index being partitioned
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (c) (
    PARTITION p1 VALUES (0)
)

statement error declared partition columns must match index being partitioned
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES (0) PARTITION BY LIST (a) (
        PARTITION p1_1 VALUES (0)
    )
)

statement error declared partition columns must match index being partitioned
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES (0) PARTITION BY LIST (c) (
        PARTITION p1_1 VALUES (0)
    )
)

statement error partition name p1 must be unique
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES (1),
    PARTITION p1 VALUES (2)
)

statement error partition name p1 must be unique
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES (1),
    PARTITION P1 VALUES (2)
)

statement error partition name p1 must be unique
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES (1) PARTITION BY LIST (b) (
        PARTITION p1 VALUES (2)
    )
)

statement error partition has 1 column\(s\) but 2 value\(s\) were supplied
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES (0, 1)
)

statement error partition has 2 column\(s\) but 1 value\(s\) were supplied
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a, b) (
    PARTITION p1 VALUES (0)
)

statement error cannot be present in more than one partition
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES (1),
    PARTITION p2 VALUES (1)
)

statement error cannot be present in more than one partition
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES (DEFAULT),
    PARTITION p2 VALUES (DEFAULT)
)

statement error cannot be present in more than one partition
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a, b) (
    PARTITION p1 VALUES (1, DEFAULT),
    PARTITION p2 VALUES (1, DEFAULT)
)

statement error cannot be present in more than one partition
CREATE TABLE t (a DECIMAL PRIMARY KEY) PARTITION BY LIST (a) (
    PARTITION p1 VALUES (1.0:::decimal),
    PARTITION p2 VALUES (1.000:::decimal)
)

# TODO(dan): DEFAULT not DEFAULT/MAXVALUE
statement error not allowed after DEFAULT/MAXVALUE
CREATE TABLE t (a INT, b INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a, b) (
    PARTITION pd VALUES (DEFAULT, 1)
)

statement error values must be strictly increasing
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES LESS THAN (2),
    PARTITION p2 VALUES LESS THAN (1)
)

statement error values must be strictly increasing
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES LESS THAN (MAXVALUE),
    PARTITION p2 VALUES LESS THAN (1)
)

statement error cannot be present in more than one partition
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES LESS THAN (1),
    PARTITION p2 VALUES LESS THAN (1)
)

statement error cannot be present in more than one partition
CREATE TABLE t (a DECIMAL PRIMARY KEY) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES LESS THAN (1.0:::decimal),
    PARTITION p2 VALUES LESS THAN (1.000:::decimal)
)

# TODO(dan): MAXVALUE not DEFAULT/MAXVALUE
statement error not allowed after DEFAULT/MAXVALUE
CREATE TABLE t (a INT, b INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a, b) (
    PARTITION pd VALUES LESS THAN (MAXVALUE, 1)
)

statement error values must be strictly increasing
CREATE TABLE t (a STRING COLLATE da PRIMARY KEY) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES LESS THAN ('端' COLLATE da),
    PARTITION p2 VALUES LESS THAN ('x' COLLATE da)
)

statement ok
CREATE TABLE collate_da (a STRING COLLATE da PRIMARY KEY) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES LESS THAN ('x' COLLATE da),
    PARTITION p2 VALUES LESS THAN ('端' COLLATE da)
)

statement error values must be strictly increasing
CREATE TABLE t (a STRING COLLATE de PRIMARY KEY) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES LESS THAN ('x' COLLATE de),
    PARTITION p2 VALUES LESS THAN ('端' COLLATE de)
)

statement ok
CREATE TABLE collate_de (a STRING COLLATE de PRIMARY KEY) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES LESS THAN ('端' COLLATE de),
    PARTITION p2 VALUES LESS THAN ('x' COLLATE de)
)

statement error value type decimal doesn't match type INT of column "a"
CREATE TABLE foo (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES (1.2)
)

statement error value type decimal doesn't match type INT of column "b"
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES (0) PARTITION BY LIST (b) (
        PARTITION p1_1 VALUES (1.2)
    )
)

# TODO(dan): this should error
# statement error TODO
# CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
#     PARTITION p1 VALUES (MAXVALUE)
# )

# TODO(dan): this should error
# statement error TODO
# CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
#     PARTITION p1 VALUES LESS THAN (DEFAULT)
# )

# TODO(dan): Support placeholders.
statement error placeholders are not supported in PARTITION BY
CREATE TABLE t (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES ($1)
)

statement ok
CREATE TABLE ok1 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES (1),
    PARTITION p2 VALUES (2)
)

statement ok
CREATE TABLE ok2 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES (1),
    PARTITION p2 VALUES (DEFAULT)
)

statement ok
CREATE TABLE ok3 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a, b) (
    PARTITION p1 VALUES (1, 1),
    PARTITION p2 VALUES (1, DEFAULT),
    PARTITION p3 VALUES (2, 3),
    PARTITION p4 VALUES (DEFAULT, DEFAULT)
)

statement ok
CREATE TABLE ok4 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES (1) PARTITION BY LIST (b) (
        PARTITION p1_1 VALUES (1),
        PARTITION p1_2 VALUES (DEFAULT)
    ),
    PARTITION p2 VALUES (2) PARTITION BY LIST (b) (
        PARTITION p2_1 VALUES (3)
    ),
    PARTITION p3 VALUES (DEFAULT)
)

statement ok
CREATE TABLE ok5 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES LESS THAN (1),
    PARTITION p2 VALUES LESS THAN (2)
)

statement ok
CREATE TABLE ok6 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a) (
    PARTITION p1 VALUES LESS THAN (1),
    PARTITION p2 VALUES LESS THAN (MAXVALUE)
)

statement ok
CREATE TABLE ok7 (a INT, b INT, c INT, PRIMARY KEY (a, b)) PARTITION BY RANGE (a, b) (
    PARTITION p1 VALUES LESS THAN (1, 1),
    PARTITION p2 VALUES LESS THAN (1, MAXVALUE),
    PARTITION p3 VALUES LESS THAN (2, 3),
    PARTITION p4 VALUES LESS THAN (MAXVALUE, MAXVALUE)
)

statement ok
CREATE TABLE ok8 (a INT, b INT, c INT, PRIMARY KEY (a, b, c)) PARTITION BY LIST (a) (
    PARTITION p1 VALUES (1) PARTITION BY LIST (b) (
        PARTITION p1_1 VALUES (3),
        PARTITION p1_2 VALUES (4)
    ),
    PARTITION p2 VALUES (6) PARTITION BY RANGE (b) (
        PARTITION p2_1 VALUES LESS THAN (7) PARTITION BY LIST (c) (
            PARTITION p2_1_1 VALUES (8)
        )
    )
)

# TODO(dan): Partition names should follow the same foldings and uniqueness
# rules as table names. Add some more tests to the `case_sensitive_names` logic
# test.
