statement ok
CREATE TABLE t (
  a INT REFERENCES t,
  FAMILY "primary" (a, rowid)
)

statement ok
CREATE TABLE v (
  "'" INT REFERENCES t, s STRING UNIQUE REFERENCES v (s),
  FAMILY "primary" ("'", s, rowid)
)

statement ok
CREATE TABLE c (
	a INT NOT NULL,
	b INT NULL,
	INDEX c_a_b_idx (a ASC, b ASC),
	FAMILY fam_0_a_rowid (a, rowid),
	FAMILY fam_1_b (b)
)

statement ok
COMMENT ON TABLE c IS 'table'

statement ok
COMMENT ON COLUMN c.a IS 'column'

statement ok
COMMENT ON INDEX c_a_b_idx IS 'index'

query TTTT colnames
SELECT
  create_statement, create_nofks, alter_statements, validate_statements
FROM
  crdb_internal.create_statements
WHERE
  database_name = 'test'
AND
  schema_name NOT IN ('pg_catalog', 'crdb_internal', 'information_schema')
----
create_statement                                                       create_nofks                                               alter_statements                                                                                                                                                                           validate_statements
CREATE TABLE pg_extension.geography_columns (                          CREATE TABLE pg_extension.geography_columns (              {}                                                                                                                                                                                         {}
  f_table_catalog NAME NULL,                                             f_table_catalog NAME NULL,
  f_table_schema NAME NULL,                                              f_table_schema NAME NULL,
  f_table_name NAME NULL,                                                f_table_name NAME NULL,
  f_geography_column NAME NULL,                                          f_geography_column NAME NULL,
  coord_dimension INT8 NULL,                                             coord_dimension INT8 NULL,
  srid INT8 NULL,                                                        srid INT8 NULL,
  type STRING NULL                                                       type STRING NULL
)                                                                      )
CREATE TABLE pg_extension.geometry_columns (                           CREATE TABLE pg_extension.geometry_columns (               {}                                                                                                                                                                                         {}
  f_table_catalog NAME NULL,                                             f_table_catalog NAME NULL,
  f_table_schema NAME NULL,                                              f_table_schema NAME NULL,
  f_table_name NAME NULL,                                                f_table_name NAME NULL,
  f_geometry_column NAME NULL,                                           f_geometry_column NAME NULL,
  coord_dimension INT8 NULL,                                             coord_dimension INT8 NULL,
  srid INT8 NULL,                                                        srid INT8 NULL,
  type STRING NULL                                                       type STRING NULL
)                                                                      )
CREATE TABLE pg_extension.spatial_ref_sys (                            CREATE TABLE pg_extension.spatial_ref_sys (                {}                                                                                                                                                                                         {}
  srid INT8 NULL,                                                        srid INT8 NULL,
  auth_name VARCHAR(256) NULL,                                           auth_name VARCHAR(256) NULL,
  auth_srid INT8 NULL,                                                   auth_srid INT8 NULL,
  srtext VARCHAR(2048) NULL,                                             srtext VARCHAR(2048) NULL,
  proj4text VARCHAR(2048) NULL                                           proj4text VARCHAR(2048) NULL
)                                                                      )
CREATE TABLE public.t (                                                CREATE TABLE public.t (                                    {"ALTER TABLE public.t ADD CONSTRAINT t_a_fkey FOREIGN KEY (a) REFERENCES public.t(rowid)"}                                                                                                {"ALTER TABLE public.t VALIDATE CONSTRAINT t_a_fkey"}
  a INT8 NULL,                                                           a INT8 NULL,
  rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),                rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
  CONSTRAINT t_pkey PRIMARY KEY (rowid ASC),                             CONSTRAINT t_pkey PRIMARY KEY (rowid ASC)
  CONSTRAINT t_a_fkey FOREIGN KEY (a) REFERENCES public.t(rowid)       )
)
CREATE TABLE public.v (                                                CREATE TABLE public.v (                                    {"ALTER TABLE public.v ADD CONSTRAINT \"v_'_fkey\" FOREIGN KEY (\"'\") REFERENCES public.t(rowid)","ALTER TABLE public.v ADD CONSTRAINT v_s_fkey FOREIGN KEY (s) REFERENCES public.v(s)"}  {"ALTER TABLE public.v VALIDATE CONSTRAINT \"v_'_fkey\"","ALTER TABLE public.v VALIDATE CONSTRAINT v_s_fkey"}
  "'" INT8 NULL,                                                         "'" INT8 NULL,
  s STRING NULL,                                                         s STRING NULL,
  rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),                rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
  CONSTRAINT v_pkey PRIMARY KEY (rowid ASC),                             CONSTRAINT v_pkey PRIMARY KEY (rowid ASC),
  CONSTRAINT "v_'_fkey" FOREIGN KEY ("'") REFERENCES public.t(rowid),    UNIQUE INDEX v_s_key (s ASC)
  CONSTRAINT v_s_fkey FOREIGN KEY (s) REFERENCES public.v(s),          )
  UNIQUE INDEX v_s_key (s ASC)
)
CREATE TABLE public.c (                                                CREATE TABLE public.c (                                    {}                                                                                                                                                                                         {}
  a INT8 NOT NULL,                                                       a INT8 NOT NULL,
  b INT8 NULL,                                                           b INT8 NULL,
  rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),                rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
  CONSTRAINT c_pkey PRIMARY KEY (rowid ASC),                             CONSTRAINT c_pkey PRIMARY KEY (rowid ASC),
  INDEX c_a_b_idx (a ASC, b ASC),                                        INDEX c_a_b_idx (a ASC, b ASC),
  FAMILY fam_0_a_rowid (a, rowid),                                       FAMILY fam_0_a_rowid (a, rowid),
  FAMILY fam_1_b (b)                                                     FAMILY fam_1_b (b)
);                                                                     );
COMMENT ON TABLE public.c IS 'table';                                  COMMENT ON TABLE public.c IS 'table';
COMMENT ON COLUMN public.c.a IS 'column';                              COMMENT ON COLUMN public.c.a IS 'column';
COMMENT ON INDEX public.c@c_a_b_idx IS 'index'                         COMMENT ON INDEX public.c@c_a_b_idx IS 'index'

query T noticetrace
CREATE UNLOGGED TABLE unlogged_tbl (col int PRIMARY KEY)
----
NOTICE: UNLOGGED TABLE will behave as a regular table in CockroachDB

query TT
SHOW CREATE TABLE unlogged_tbl
----
unlogged_tbl  CREATE TABLE public.unlogged_tbl (
                col INT8 NOT NULL,
                CONSTRAINT unlogged_tbl_pkey PRIMARY KEY (col ASC)
              )

statement error pgcode 22023 invalid storage parameter "foo"
CREATE TABLE a (b INT) WITH (foo=100);

statement error parameter "fillfactor" requires a float value
CREATE TABLE a (b INT) WITH (fillfactor=true);

statement error unimplemented: storage parameter "toast_tuple_target"
CREATE TABLE a (b INT) WITH (toast_tuple_target=100);

query T noticetrace
CREATE TABLE a (b INT) WITH (fillfactor=99.9)
----
NOTICE: storage parameter "fillfactor" is ignored

query T noticetrace
CREATE INDEX a_idx ON a(b) WITH (fillfactor=50)
----
NOTICE: storage parameter "fillfactor" is ignored

statement ok
DROP TABLE a CASCADE;

query T noticetrace
CREATE TABLE a (b INT) WITH (autovacuum_enabled=off)
----
NOTICE: storage parameter "autovacuum_enabled = 'off'" is ignored

statement ok
DROP TABLE a CASCADE;

query T noticetrace
CREATE TABLE a (b INT) WITH (autovacuum_enabled=on)
----

statement ok
DROP TABLE a CASCADE;

statement error parameter "autovacuum_enabled" requires a Boolean value
CREATE TABLE a (b INT) WITH (autovacuum_enabled='11')
