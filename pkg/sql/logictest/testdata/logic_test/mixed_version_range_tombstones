# LogicTest: cockroach-go-testserver-upgrade-to-master

# This test should only be executed to test upgrades from 22.2 -> 23.2
# (experimental version skipping).
skip 103956

query I
SELECT 1
----
1

query T
SELECT crdb_internal.node_executable_version()
----
22.2

# By default, range tombstones are not enabled.

query B
SHOW CLUSTER SETTING storage.mvcc.range_tombstones.enabled;
----
false

# Upgrade one node to 23.1.

upgrade 0

query B nodeidx=0
SELECT crdb_internal.node_executable_version() SIMILAR TO '1000023.1-%'
----
true

# Range tombstones remain disabled.

query B
SHOW CLUSTER SETTING storage.mvcc.range_tombstones.enabled;
----
false

# Create a table, write something to it, then drop it.

statement ok
CREATE TABLE foo (bar INT);

statement ok
INSERT INTO foo VALUES (123);

statement ok
DROP TABLE foo;

# Assuming that a range tombstone _would_ be written, provide enough time for
# the async job responsible for dropping the table to complete. Ideally the
# following sleep would not be required. However, without it, the test is prone
# to flaking.

sleep 10s

# We do not expect there to be range tombstones written.

query B
SELECT sum((crdb_internal.range_stats(start_key)->>'range_key_count')::INT) = 0
FROM crdb_internal.ranges_no_leases;
----
true

# Enable the cluster setting.

statement ok
SET CLUSTER SETTING storage.mvcc.range_tombstones.enabled = 'true';

# Performing the same table drop this time results in range tombstones being
# written.

statement ok
CREATE TABLE foo (bar INT);

statement ok
INSERT INTO foo VALUES (123);

statement ok
DROP TABLE foo;

sleep 10s

query B
SELECT sum((crdb_internal.range_stats(start_key)->>'range_key_count')::INT) > 0
FROM crdb_internal.ranges_no_leases;
----
true
