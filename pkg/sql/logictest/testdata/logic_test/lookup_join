# LogicTest: 5node-distsql

########################
#  LOOKUP JOIN FORCED  #
########################
statement ok
SET experimental_force_lookup_join = true;

statement ok
CREATE TABLE data (a INT, b INT, c INT, d INT, PRIMARY KEY (a, b, c, d))

# Split into ten parts.
statement ok
ALTER TABLE data SPLIT AT SELECT i FROM GENERATE_SERIES(1, 9) AS g(i)

# Relocate the ten parts to the five nodes.
statement ok
ALTER TABLE data TESTING_RELOCATE
  SELECT ARRAY[i%5+1], i FROM GENERATE_SERIES(0, 9) AS g(i)

# Generate all combinations of values 1 to 10.
statement ok
INSERT INTO data SELECT a, b, c, d FROM
   GENERATE_SERIES(1, 10) AS A(a),
   GENERATE_SERIES(1, 10) AS B(b),
   GENERATE_SERIES(1, 10) AS C(c),
   GENERATE_SERIES(1, 10) AS D(d)


statement ok
CREATE TABLE distsql_lookup_test_1 (a INT, b INT, c INT, PRIMARY KEY (a, c)); INSERT INTO distsql_lookup_test_1 VALUES (1, 1, 2), (2, 1, 1), (2, NULL, 2)


statement ok
CREATE TABLE distsql_lookup_test_2 (d INT, e INT, f INT, PRIMARY KEY (f, e)); INSERT INTO distsql_lookup_test_2 VALUES (1, 1, 2), (2, 1, 1), (NULL, 2, 1)


query IIIIII rowsort
SELECT * FROM distsql_lookup_test_1 JOIN distsql_lookup_test_2 ON f = b
----
1  1  2  2  1  1
2  1  1  2  1  1
1  1  2  NULL  2  1
2  1  1  NULL  2  1


query IIIIII rowsort
SELECT * FROM distsql_lookup_test_1 JOIN distsql_lookup_test_2 ON f = b WHERE a > 1 AND e > 1
----
2  1  1  NULL  2  1


query IIIIII rowsort
SELECT * FROM distsql_lookup_test_1 JOIN distsql_lookup_test_2 ON f = b AND a > 1 AND e > 1
----
2  1  1  NULL  2  1


# Filter right side of a lookup join with a restriction on an indexed column.
query IIIIII rowsort
SELECT * FROM distsql_lookup_test_1 JOIN distsql_lookup_test_2 ON f = a WHERE f > 1
----
2  1  1  1  1  2
2  NULL  2  1  1  2


# Test lookup join with restriction relating the left and right side.
query IIIIII rowsort
SELECT * FROM distsql_lookup_test_1 JOIN distsql_lookup_test_2 ON f = b WHERE a >= e
----
1  1  2  2  1  1
2  1  1  2  1  1
2  1  1  NULL  2  1


# Test lookup join with restriction relating the left and right side.
query IIIIII rowsort
SELECT * FROM distsql_lookup_test_1 JOIN distsql_lookup_test_2 ON f = b AND a >= e
----
1  1  2  2  1  1
2  1  1  2  1  1
2  1  1  NULL  2  1


# Test lookup join with selecting a subset of the columns.
query III rowsort
SELECT a, b, e FROM distsql_lookup_test_1 JOIN distsql_lookup_test_2 ON f = b WHERE a >= e
----
1  1  1
2  1  1
2  1  2


# Ensure lookup join is planned.
query T rowsort
SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM distsql_lookup_test_1 JOIN distsql_lookup_test_2 ON f = b]
----
https://cockroachdb.github.io/distsqlplan/decode.html?eJyUkU9Lw0AUxO9-ijDnJzSp9bCnvVakleJNQonZR1lN9627G1BKvrs0e7AVG_X4_vxmBuYAJ4ZXzZ4j1BNKEBaoCT5IyzFKOK7z09K8Q80I1vk-Hdc1oZXAUAckmzqGwkquxYNgODW2G58GgvTpC4mp2THUfKAT2XJa9rF57njDjeFwJg4f7L4JH9rYmOJbt-1EXnu_TRzTtsQl7_I_3ndi3U_W96NV8SLWgcbJul3R-0KcKqZyVSCs-6QKXZKuSM9J35BekL69GLg6C_xLBxuOXlzkP9UwG2oCmx3nnqP0oeWHIO1ok8f1yI0LwzHl6zwPS5dPx4CncDkJV9NwNQnPvsH1cPUZAAD__1iQ7RQ=


query T rowsort
SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM distsql_lookup_test_1 JOIN distsql_lookup_test_2 ON f = b WHERE a > 1 AND e > 1]
----
https://cockroachdb.github.io/distsqlplan/decode.html?eJyUkk9L80AQxu_vp1jmPC9kE-thT3sSKtJK6U1DidmhrKY76_4BpeS7S5KDrdiox3l2fs8zw-wRHBtaNQeKoB5AAsICagQfuKUYOQzy1LQ0b6AKBOt8ToNcI7QcCNQRkk0dgYIV_2cPCIZSY7uxqUfgnD6RmJo9gap6PLGV87bb5qmjDTWGwpk5-GAPTXjXxsYUX7tdx_yS_S5RTDsJl7LlX7Jv2brvou_GKPHM1gGOlXV7kb1gp8TcXCUg3NguUVBCL8RjLoqKhFRKLVdbQFjnpISWqEvUFeor1AvU1xeXKc-W-eE-G4qeXaRfnajoawQye5r-QOQcWroP3I4xU7keuVEwFNP0Wk3F0k1Pw4CnsJyFy3m4nIWLL3Dd__sIAAD__3tR9Iw=


# Ensure lookup join is planned on a multi-node cluster.
query T rowsort
SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM data JOIN data AS data2 on data.b = data2.a]
----
https://cockroachdb.github.io/distsqlplan/decode.html?eJzMlMtq8zAQhff_U5hZzw_xJZd6pW1KSUrornihWkNwm2iMJENL8LsX24vUIZEDAePlSDr-js8McwLNijbySBbSdwgBIQKEGBASQJhDhlAazslaNs2TTrBW35DOEApdVq45zhByNgTpCVzhDgQpvMmPA-1IKjKAoMjJ4tBCSlMcpfkRSjoJWY3AlTt_xjq5J0jDGu9HPXOhr5FemL-qMvjkQgO2VaH3QVUGrNOgZwNhW7k0ECGKCEWMIkExR7FAsUSxuukyuunybK7SbBQZUj1vWX3lPzb8n8uLZ9fBcQ8cjteJAdREOhGNF8gAaiKBxOMFMoCaSCDJeIEMoCYSyMCK3ZEtWVu6azvNmuVGak_dJrRcmZxeDectpiu3ra49UGRddxt2xVp3V43Bv-LQK4564vBSHPnJA-jYq0784uQR33OveOEnLx4hL73ilZ-8eoT85O_VbGBM_EN2yc7qf78BAAD___4S9XY=


# Ensure join performs properly on input that has more than 100 rows.
query I
SELECT COUNT(*) FROM data as d1 NATURAL JOIN data as d2
----
10000


query T
SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT COUNT(*) FROM data as d1 NATURAL JOIN data as d2]
----
https://cockroachdb.github.io/distsqlplan/decode.html?eJy8lc_rmzAYxu_7K-Q9fQc5fKO2az117NSx1dEf7DCkZOZF3NpEkggbxf99qIdOqclKuxyT-OTz-OSB9wJCctywM2pIvgEFAiEQiIBADARmkBGolMxRa6naT3rBmv-C5JVAKaratNsZgVwqhOQCpjQnhAT27PsJt8g4KiDA0bDy1EEqVZ6Z-r3izDDIGgKyNtdrtGEFQkIb8u-oj7IUt0ifpPxZV8EPWQog3aoURVBXgRRJMLBBIK1NEkzaCe-x874oFBbMyJGdD-lhsz9u06-7l7eTpGiSdAXUQiqOCvng_qy5w8vu8Pm43uxfVnTaSjywQv09twPl-7kddp743KG_jB0o3xk77Dwx48hfxg6U74wddp6YcewvYwfKd8YOO_9pNNwgbVFXUmgcjYjbN7-2owN5gf2c0bJWOX5RMu8w_TLtdN0GR236U9ov1qI_ag3-LaZWcWgXh1ZxNBDTsTiy257b0bFVPbOLZ1axgzx_5KffWcULO3lhFS_t4uUjtqmjY66S2VtGHTWjD_WMOooWO-D2plFH1ai9a2PvWfPmTwAAAP__U933rg==


statement ok
CREATE TABLE foo (a int, b int); INSERT INTO foo VALUES (0, 1), (0, 2), (1, 1)

statement ok
CREATE TABLE bar (a int PRIMARY KEY, c int); INSERT INTO bar VALUES (0, 1), (1, 2), (2, 1)

query III rowsort
SELECT * FROM foo NATURAL JOIN bar
----
0  1  1
0  2  1
1  1  2


query T
SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM foo NATURAL JOIN bar]
----
https://cockroachdb.github.io/distsqlplan/decode.html?eJyUkU9LAzEQxe9-iuWdR-hu9ZLTXivSSvEme0g3Y4m2mZA_oJT97tINYit21eO8zO-9x-QAJ4aXes8R6gk1CLfoCD5IzzFKOMplaWHeoGYE63xOR7kj9BIY6oBk046hsJRr8SAYTtruxqWBIDl9ITHpLUPNBzqxradtH_Vmx2vWhsOZOXywex3e22cREFY5qaqtqW1wKbb-T-ydWPdT6r3Ia_bVi1gHGifrtlX2lThVfVba6HBWidqbi62as1a_3HjN0YuL_Kczz4aOwGbL5R-j5NDzQ5B-jCnjauRGwXBM5XVehoUrT8eCp3A9CTfTcDMJz77B3XD1EQAA___QIt9j


# Ensure lookup join is not planned when no index is available.
query T
SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM bar NATURAL JOIN foo]
----
https://cockroachdb.github.io/distsqlplan/decode.html?eJyskTFr-zAQxff_p_hzUwsqRLa7CAoemw5JCd2KB8W6OAJHZ04ytAR_92JrSGxqp4Vu0ul-997TncGRwY0-oQf1DhIEPEIhoGEq0Xvivhyb1uYD1EqAdU0b-nIhoCRGUGcINtQICjb0QA0IMBi0rYemTgC14YL4oCsElXXiaqxcHvum9zXuUBvk0XBo2J40f-Z7zTCnJP9U6UAEArZtUP9zKfJkVjaZlb2otY7YIKOZftntlm-8P2t_fCHrptZrPIS7XN4_sa2Ow2mUQOTZbIh0FOLG8nfoG3Ief7T_VZ8ATYXxRzy1XOIrUznIxOt24IaCQR_iaxYvaxefeoPXsFyE0xEsp3DyCziZwukivJrYLrp_XwEAAP__eocm5g==


statement ok
CREATE TABLE books (title STRING, edition INT, shelf INT, PRIMARY KEY (title, edition)); INSERT INTO books VALUES ('SICP', 1, 2), ('Intro to Algo', 1, 1), ('Intro to Algo', 2, 1), ('Intro to Algo', 3, 2), ('Art of Computer Programming', 1, 2), ('Art of Computer Programming', 2, 2)


statement ok
CREATE TABLE authors (name STRING, book STRING); INSERT INTO authors VALUES ('Hal Abelson', 'SICP'), ('Geral Jay Sussman', 'SICP'), ('Thomas H Cormen', 'Intro to Algo'), ('Charles E Leiserson', 'Intro to Algo'), ('Ronald Rivest', 'Intro to Algo'), ('Clifford Stein', 'Intro to Algo'), ('Donald Knuth', 'Art of Computer Programming')


query T rowsort
SELECT DISTINCT(b1.title) FROM books as b1 JOIN books as b2 ON b1.title = b2.title WHERE b1.shelf <> b2.shelf
----
Intro to Algo


# Filter on a column that is not returned or in the equality columns.
query T rowsort
SELECT DISTINCT(b1.title) FROM books as b1 JOIN books as b2 USING(title) WHERE b1.shelf <> b2.shelf
----
Intro to Algo


query T rowsort
SELECT DISTINCT(authors.name) FROM authors, books AS b1, books AS b2 WHERE b1.title = b2.title AND authors.book = b1.title AND b1.shelf <> b2.shelf
----
Thomas H Cormen
Charles E Leiserson
Ronald Rivest
Clifford Stein

query T rowsort
SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT DISTINCT(authors.name) FROM authors, books AS b1, books AS b2 WHERE b1.title = b2.title AND authors.book = b1.title AND b1.shelf <> b2.shelf]
----
https://cockroachdb.github.io/distsqlplan/decode.html?eJysks9qwkAQh-99ijAnhS2YxHgIFHLooZaiRXorHtbsNG6NO2H_QIv47iXJQRPMqtDjbuab7zeTPYAigQu-RwPpJ4TAIIE1g0pTjsaQrq_born4gXTCQKrK2fp6zSAnjZAewEpbIqSwoEeqgIFAy2XZFB0ZkLMnxFheIKSzIztrG_rbfvBNiSvkAnWnOVRa7rn-zbiz2zorg6WzaZCFLItgSB3-q3pDtOuI40FxdI_4laS65H0j2rkq-CapgDUnqYrAVQGpNBgINZgoHkx0CuIUaYEaRf-_Xi-5MNYLN9t6tP5YJX7ZURaNn7QstnaUheMb4k_vWeizNFaq3Ha9nu5Jp_uVl79CU5EyeNPjn9SbQVFgu2lDTuf4rilvNO1x2XDNhUBj26-z9jBX7ac64DkceuFpBw77cOSFY785vsMc9eGpF0785sQLT3rw-vjwFwAA__-spKPU


query TTT
EXPLAIN (EXPRS) SELECT DISTINCT(authors.name) FROM authors, books AS b1, books AS b2 WHERE b1.title = b2.title AND authors.book = b1.title AND b1.shelf <> b2.shelf
----
distinct                  ·               ·
 └── render               ·               ·
      │                   render 0        "name"
      └── join            ·               ·
           │              type            inner
           │              equality        (book) = (title)
           ├── scan       ·               ·
           │              table           authors@primary
           │              spans           ALL
           └── join       ·               ·
                │         type            inner
                │         equality        (title) = (title)
                │         mergeJoinOrder  +"(title=title)"
                │         pred            b1.shelf != b2.shelf
                ├── scan  ·               ·
                │         table           books@primary
                │         spans           ALL
                └── scan  ·               ·
·                         table           books@primary
·                         spans           ALL


# Ensure lookup join preserves sort from the left side.
query T
SELECT DISTINCT(a.name) FROM (SELECT * FROM authors ORDER BY name) AS a JOIN books AS b1 ON a.book = b1.title
----
Charles E Leiserson
Clifford Stein
Ronald Rivest
Thomas H Cormen
Donald Knuth
Geral Jay Sussman
Hal Abelson


# Cross joins should not be planned as lookup joins.
query T
SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM books as b1 CROSS JOIN books as b2]
----
https://cockroachdb.github.io/distsqlplan/decode.html?eJy8kbFOwzAQhneeAt18SHWSMnjySBlaVLGhDG58KhGpL7IdCVTl3VHioY1FUlgYfb7v_k93Z7BsaKtP5EG-gQCENZQIreOKvGc3lGPTxnyCXCHUtu3CUC4RKnYE8gyhDg2BhC0_cAsIhoKum7GpR-AuXBAf9JFAFj1ejRXLY1_1oaE9aUNuMhxaV5-0-1IH5g8Pc1niH7Oy2axLRGfZGXJk0k3dbvlB-En792eubeq764K8VwJVhipHVaBao3qcFc8n4jfuvCffsvX0q1OvBmsyR4pb8Ny5il4cV2NMfO5GbiwY8iH-FvGxsfFrELyGxSKcT2CRwtkf4CyF80V4lWiX_d13AAAA__8mRSGA


# Outer joins should not be planned as lookup joins.
query T
SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM books as b1 LEFT OUTER JOIN books as b2 ON b1.title = b2.title]
----
https://cockroachdb.github.io/distsqlplan/decode.html?eJy8ksFKw0AQhu8-RZiT4gjdpPWwIOylQos2UuJJekizYwymmbC7AUvpu0uyh7bBpnrxtjsz3_z_DLODijUt0g1ZkG8gAGECK4TacEbWsmnDvmimv0COEIqqblwbXiFkbAjkDlzhSgIJC77jGhA0ubQou6I9AjfugFiX5gRyvMejtmK4bZKuS1pSqsmcNIfaFJvUbNWa-dPCOS3xj1rhWa2DRFOx0WRI9zd1ueQHw89kcppzUfUNJ9uaZPA0fUyC-DWZLoN5PFsAQknv7lqJ25sHU-Qf_gkIceNkoASqEFWEaoxqgur-7KDRyaAX7mJJtubK0q9OY9ROSTonvzXLjcnoxXDWyfhv3HFdQJN1Pjv2n1nlU63BY1gMwtEJLPpw-Ac47MPRIDzq2V7tr74DAAD__97WLtI=


query T rowsort
SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM authors INNER JOIN books ON books.edition = 1 WHERE books.title = authors.book]
----
https://cockroachdb.github.io/distsqlplan/decode.html?eJyUkU1Lw0AQhu_-imXOIzRpe1kQ9iRUpJXSm-SwTYa6Nt1Z9gOUkv8uySI2YqMe5-OZ94E5g-WG1vpEAeQzFICwhArBea4pBPZ9Oy-tmjeQMwRjXYp9u0Ko2RPIM0QTWwIJa75lBwgNRW3aYalD4BS_kBD1gUDOO7w4W0yf3el9S1vSDfnRcXDenLR_VzrFl94VYZOiFKpAVcK16OI_0Q9s7E_Jj8zH5MQrGws4VMYeRHKCrRSfWnvmYy91b9pIXgq1EHeikFKu1ruRK6o5qgWq5VXpciT9yxu2FBzbQH_6xKyrEKg5UH514ORrevJcDzG53Azc0GgoxDyd52Jl86gXvISLSbichstJePYNrrqbjwAAAP__MC3pOQ==


statement ok
SET experimental_force_lookup_join = false;


##########################
#  LOOKUP JOIN DISABLED  #
##########################


# Simple joins should no longer be planned as lookup joins.
query T
SELECT "URL" FROM [EXPLAIN (DISTSQL) SELECT * FROM foo JOIN bar USING(a)]
----
https://cockroachdb.github.io/distsqlplan/decode.html?eJyskUFr8zAMhu_fr_jQaQMP6iS7GAY5rju0o-w2cnBjNTWkVpAd2Cj57yPxoU1Y0g12syU9el9JZ3BkcKNP6EG9gwQBj1AIaJhK9J64D8eitfkAtRJgXdOGPlwIKIkR1BmCDTWCgg09UAMCDAZt66GoE0BtuCA-6ApBZZ24aiuX277pfY071AZ51BwatifNn_mBCARs26D-51LkCczJyj-V3WueVUpmlS4CrSM2yGimK7td8o3dZ-2PL2Td1G2Nh3CXy_snttVxeI12JfJsdoh0NMSN4-_QN-Q8_uj-q34CNBXGjXhqucRXpnKQid_twA0Bgz7EbBY_axdTvcFrWC7C6QiWUzj5BZxM4XQRXk1sF92_rwAAAP__990m5g==
