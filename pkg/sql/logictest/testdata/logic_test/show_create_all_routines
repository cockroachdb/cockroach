statement ok
CREATE DATABASE d

statement ok
USE d

query T colnames
SHOW CREATE ALL ROUTINES;
----
create_statement

statement ok
CREATE FUNCTION add_one(x INT) RETURNS INT AS 'SELECT x + 1' LANGUAGE SQL;

query T colnames
SHOW CREATE ALL ROUTINES;
----
create_statement
CREATE FUNCTION public.add_one(x INT8) RETURNS INT8 VOLATILE NOT LEAKPROOF CALLED ON NULL INPUT LANGUAGE SQL SECURITY INVOKER AS $$ SELECT x + 1;

statement ok
CREATE TYPE comp AS (x INT, y STRING);

statement ok
CREATE OR REPLACE PROCEDURE proc() LANGUAGE PLpgSQL AS $$ DECLARE v = comp : ROW(1, 'foo'); BEGIN RAISE NOTICE '%', v; END $$;

query T colnames,rowsort
SHOW CREATE ALL ROUTINES;
----
create_statement
CREATE FUNCTION public.add_one(x INT8) RETURNS INT8 VOLATILE NOT LEAKPROOF CALLED ON NULL INPUT LANGUAGE SQL SECURITY INVOKER AS $$ SELECT x + 1;
CREATE PROCEDURE public.proc() LANGUAGE plpgsql SECURITY INVOKER AS $$ DECLARE v public.comp := (1:::INT8, 'foo':::STRING); BEGIN RAISE NOTICE '%', v; END;

statement ok
CREATE FUNCTION add_one(x FLOAT) RETURNS FLOAT AS 'SELECT x + 1' LANGUAGE SQL;

query T colnames, rowsort
SHOW CREATE ALL ROUTINES;
----
create_statement
CREATE FUNCTION public.add_one(x INT8) RETURNS INT8 VOLATILE NOT LEAKPROOF CALLED ON NULL INPUT LANGUAGE SQL SECURITY INVOKER AS $$ SELECT x + 1;
CREATE FUNCTION public.add_one(x FLOAT8) RETURNS FLOAT8 VOLATILE NOT LEAKPROOF CALLED ON NULL INPUT LANGUAGE SQL SECURITY INVOKER AS $$ SELECT x + 1;
CREATE PROCEDURE public.proc() LANGUAGE plpgsql SECURITY INVOKER AS $$ DECLARE v public.comp := (1:::INT8, 'foo':::STRING); BEGIN RAISE NOTICE '%', v; END;

#test dropping routines
statement ok
DROP FUNCTION add_one(x INT8);

statement ok
DROP FUNCTION add_one(x FLOAT8);

query T colnames
SHOW CREATE ALL ROUTINES;
----
create_statement
CREATE PROCEDURE public.proc() LANGUAGE plpgsql SECURITY INVOKER AS $$ DECLARE v public.comp := (1:::INT8, 'foo':::STRING); BEGIN RAISE NOTICE '%', v; END;

statement ok
DROP PROCEDURE proc;

query T colnames
SHOW CREATE ALL ROUTINES;
----
create_statement


# test user defined schema
statement ok
CREATE SCHEMA s;

statement ok
CREATE FUNCTION add_one(x INT) RETURNS INT AS 'SELECT x + 1' LANGUAGE SQL;

statement ok
CREATE FUNCTION s.add_one(x INT) RETURNS INT AS 'SELECT x + 1' LANGUAGE SQL;

query T colnames, rowsort
SHOW CREATE ALL ROUTINES;
----
create_statement
CREATE FUNCTION public.add_one(x INT8) RETURNS INT8 VOLATILE NOT LEAKPROOF CALLED ON NULL INPUT LANGUAGE SQL SECURITY INVOKER AS $$ SELECT x + 1;
CREATE FUNCTION s.add_one(x INT8) RETURNS INT8 VOLATILE NOT LEAKPROOF CALLED ON NULL INPUT LANGUAGE SQL SECURITY INVOKER AS $$ SELECT x + 1;


