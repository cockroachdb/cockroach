# Tests for assignment casts.
subtest assignment_casts

statement ok
CREATE TABLE assn_cast (
  c CHAR,
  vc VARCHAR(1),
  qc "char",
  b BIT,
  i INT,
  t timestamp,
  d DECIMAL(10, 0),
  a DECIMAL(10, 0)[],
  s STRING
)

statement ok
INSERT INTO assn_cast(c) VALUES ('a')

statement ok
INSERT INTO assn_cast(c) VALUES (null), ('b')

statement error value too long for type CHAR
INSERT INTO assn_cast(c) VALUES ('abc')

query T
INSERT INTO assn_cast(c) VALUES (1) RETURNING c
----
1

statement error value too long for type CHAR
INSERT INTO assn_cast(c) VALUES (123)

statement ok
PREPARE insert_c AS INSERT INTO assn_cast(c) VALUES ($1)

statement error value too long for type CHAR
EXECUTE insert_c('foo')

statement error value too long for type CHAR
EXECUTE insert_c('foo'::STRING)

statement ok
DELETE FROM assn_cast

statement
EXECUTE insert_c(' ')

statement
EXECUTE insert_c(' '::STRING)

query T
SELECT concat('"', c, '"') FROM assn_cast
----
""
""

statement ok
INSERT INTO assn_cast(vc) VALUES ('a')

statement ok
INSERT INTO assn_cast(vc) VALUES (null), ('b')

statement error value too long for type VARCHAR\(1\)
INSERT INTO assn_cast(vc) VALUES ('abc')

query T
INSERT INTO assn_cast(vc) VALUES (1) RETURNING vc
----
1

statement error value too long for type VARCHAR\(1\)
INSERT INTO assn_cast(vc) VALUES (123)

statement ok
INSERT INTO assn_cast(qc) VALUES ('a')

statement ok
INSERT INTO assn_cast(qc) VALUES (null), ('b')

query T
INSERT INTO assn_cast(qc) VALUES ('abc') RETURNING qc
----
a

# Note: This statement fails in Postgres because the default integer type is an
# INT4, and the INT4 -> "char" cast is explicit. Our default integer type
# is an INT8 and INT8 -> "char" is an assignment cast.
query T
INSERT INTO assn_cast(qc) VALUES (123) RETURNING qc
----
{

statement error \"char\" out of range
INSERT INTO assn_cast(qc) VALUES (1234)

statement ok
PREPARE insert_qc AS INSERT INTO assn_cast(qc) VALUES ($1)

statement ok
DELETE FROM assn_cast

statement ok
EXECUTE insert_qc('foo')

statement ok
EXECUTE insert_qc('foo'::STRING)

query T
SELECT qc FROM assn_cast
----
f
f

statement ok
INSERT into assn_cast(b) VALUES ('1')

statement ok
INSERT INTO assn_cast(b) VALUES (null), ('1')

# TODO(mgartner): To match Postgres behavior, this statement should fail with
# the message "value too long for type BIT".
statement ok
INSERT into assn_cast(b) VALUES ('01')

statement error value type int doesn't match type bit of column \"b\"
INSERT into assn_cast(b) VALUES (1)

statement ok
INSERT INTO assn_cast(i) VALUES ('1')

statement ok
INSERT INTO assn_cast(i) VALUES (null), ('1')

statement ok
PREPARE insert_i AS INSERT INTO assn_cast(i) VALUES ($1)

statement ok
EXECUTE insert_i('1')

statement error value type string doesn't match type int of column \"i\"
INSERT INTO assn_cast(i) VALUES ('1'::STRING)

statement ok
INSERT INTO assn_cast(t) VALUES ('1970-01-01'::timestamptz)

statement ok
INSERT INTO assn_cast(d) VALUES (11.22), (88.99)

statement ok
INSERT INTO assn_cast(d) VALUES (22.33::DECIMAL(10, 0)), (99.11::DECIMAL(10, 2))

statement ok
INSERT INTO assn_cast(d) VALUES (33.11::DECIMAL(10, 0)), (44.44::DECIMAL(10, 0))

statement ok
PREPARE insert_d AS INSERT INTO assn_cast(d) VALUES ($1)

statement ok
EXECUTE insert_d(123.45)

statement ok
PREPARE insert_d2 AS INSERT INTO assn_cast(d) SELECT * FROM (VALUES ($1::DECIMAL(10, 2)))

statement ok
EXECUTE insert_d2(67.89)

query F rowsort
SELECT d FROM assn_cast WHERE d IS NOT NULL
----
11
89
22
99
33
44
123
68

statement ok
INSERT INTO assn_cast(a) VALUES (ARRAY[2.88, NULL, 15])

statement ok
INSERT INTO assn_cast(a) VALUES (ARRAY[3.99, NULL, 16]::DECIMAL(10, 2)[])

statement ok
INSERT INTO assn_cast(a) VALUES (ARRAY[5.55, 6.66::DECIMAL(10, 2)])

statement ok
PREPARE insert_a AS INSERT INTO assn_cast(a) VALUES ($1)

statement ok
EXECUTE insert_a(ARRAY[7.77, 8.88::DECIMAL(10, 2)])

query T rowsort
SELECT a FROM assn_cast WHERE a IS NOT NULL
----
{3,NULL,15}
{4,NULL,16}
{6,7}
{8,9}

statement ok
INSERT INTO assn_cast(s) VALUES (1)

statement ok
PREPARE insert_s AS INSERT INTO assn_cast(s) VALUES ($1)

# TODO(mgartner): This should succeed to match the behavior of Postgres.
statement error expected EXECUTE parameter expression to have type string, but \'1\' has type int
EXECUTE insert_s(1)

subtest regressions

statement ok
CREATE TABLE t45837 AS SELECT 1.25::decimal AS d

# Test that decimals get rounded when casting.
query T
SELECT d::decimal(10,1) FROM t45837
----
1.3

statement ok
CREATE TABLE t2 AS SELECT 18446744073709551616::FLOAT AS f

statement error pgcode 22003 integer out of range
SELECT f::int FROM t2

statement error integer out of range
SELECT 23414123414::int2

# Regression test for #47327. Test that negative intervals are correctly
# cast to a decimal.
statement ok
CREATE TABLE t0(c0 DECIMAL UNIQUE); INSERT INTO t0(c0) VALUES(0);

statement ok
CREATE TABLE t1(c0 DECIMAL); INSERT INTO t1(c0) VALUES(0);

# Both of these queries should return no rows.
query T
SELECT t0.c0 FROM t0 WHERE t0.c0 BETWEEN t0.c0 AND INTERVAL '-1'::DECIMAL
----

query T
SELECT t1.c0 FROM t1 WHERE t1.c0 BETWEEN t1.c0 AND INTERVAL '-1'::DECIMAL
----

# Regression test for incorrectly casting integers out of range (#64429).
statement ok
CREATE TABLE t64429 (_int8 INT8, _int4 INT4);
INSERT INTO t64429 VALUES (3000000000, 300000);

statement error integer out of range for type int2
SELECT _int8::INT2 FROM t64429

statement error integer out of range for type int4
SELECT _int8::INT4 FROM t64429

statement error integer out of range for type int2
SELECT _int4::INT2 FROM t64429

# Also check the negative overflow.
statement ok
DELETE FROM t64429 WHERE true;
INSERT INTO t64429 VALUES (-3000000000, -300000);

statement error integer out of range for type int2
SELECT _int8::INT2 FROM t64429

statement error integer out of range for type int4
SELECT _int8::INT4 FROM t64429

statement error integer out of range for type int2
SELECT _int4::INT2 FROM t64429

# Regression test for #66067. Ensure that there is no correctness bug due to
# improper casting of CHAR and VARCHAR.
statement ok
CREATE TABLE t66067_a (
  a INT,
  c CHAR(26),
  CONSTRAINT c UNIQUE (c)
);
CREATE TABLE t66067_b (
  a INT,
  v VARCHAR(40)
);
INSERT INTO t66067_a VALUES (1, 'foo');
INSERT INTO t66067_b VALUES (1, 'bar');

query ITIT
SELECT * FROM t66067_b b
INNER LOOKUP JOIN t66067_a a ON b.a = a.a
WHERE b.v = 'bar' AND a.c = 'foo'
----
1  bar  1  foo

query ITI
SELECT i, i::"char"::bytea, length(i::"char")
FROM (VALUES (32), (97), (127), (0), (-1), (-127), (-128)) v(i);
----
32           1
97    a      1
127         1
0     Â·      0
-1    [255]  1
-127  [129]  1
-128  [128]  1

statement error pgcode 22003 \"char\" out of range
SELECT 128::"char";

statement error pgcode 22003 \"char\" out of range
SELECT (-129)::"char";

query IFRB
SELECT ' 1 '::int, ' 1.2 '::float, ' 2.3 '::decimal, ' true '::bool
----
1  1.2  2.3  true

query IOTOOOOOO
SELECT i, i::oid, i::oid::text,
  i::oid::regproc, i::oid::regprocedure, i::oid::regnamespace, i::oid::regclass, i::oid::regtype, i::oid::regrole
FROM (VALUES (0), (1)) v(i)
----
0  0  0  -  -  -  -  -  -
1  1  1  1  1  1  1  1  1

query TOOOOOOOOOOOO
SELECT i, i::regproc::oid, i::regprocedure::oid, i::regnamespace::oid, i::regtype::oid, i::regclass::oid, i::regrole::oid,
  i::regproc, i::regprocedure, i::regnamespace, i::regtype, i::regclass, i::regrole
FROM (VALUES ('-')) v(i)
----
-  0  0  0  0  0  0  -  -  -  -  -  -

statement error invalid input syntax for type oid: "-"
SELECT i, i::oid FROM (VALUES ('-')) v(i)

statement error invalid input syntax for type oid: "-"
SELECT '-'::oid

query OOOOOOOOOOOO
SELECT '-'::regclass, '-'::regclass::oid,
  '-'::regproc, '-'::regproc::oid,
  '-'::regprocedure, '-'::regprocedure::oid,
  '-'::regnamespace, '-'::regnamespace::oid,
  '-'::regtype, '-'::regtype::oid,
  '-'::regrole, '-'::regrole::oid
----
-  0  -  0  -  0  -  0  -  0  -  0
