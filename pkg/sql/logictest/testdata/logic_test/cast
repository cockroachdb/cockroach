# Tests for assignment casts.
subtest assignment_casts

statement ok
CREATE TABLE assn_cast (
  c CHAR,
  vc VARCHAR(1),
  qc "char",
  b BIT,
  i INT,
  i2 INT2,
  f4 FLOAT4,
  t timestamp,
  d DECIMAL(10, 0),
  a DECIMAL(10, 0)[],
  s STRING
)

statement ok
INSERT INTO assn_cast(c) VALUES ('a')

statement ok
INSERT INTO assn_cast(c) VALUES (null), ('b')

statement error value too long for type CHAR
INSERT INTO assn_cast(c) VALUES ('abc')

query T
INSERT INTO assn_cast(c) VALUES (1) RETURNING c
----
1

statement error value too long for type CHAR
INSERT INTO assn_cast(c) VALUES (123)

statement ok
PREPARE insert_c AS INSERT INTO assn_cast(c) VALUES ($1)

statement error value too long for type CHAR
EXECUTE insert_c('foo')

statement error value too long for type CHAR
EXECUTE insert_c('foo'::STRING)

statement ok
DELETE FROM assn_cast

statement ok
EXECUTE insert_c(' ')

statement ok
EXECUTE insert_c(' '::STRING)

query T
SELECT concat('"', c, '"') FROM assn_cast
----
""
""

statement ok
INSERT INTO assn_cast(vc) VALUES ('a')

statement ok
INSERT INTO assn_cast(vc) VALUES (null), ('b')

statement error value too long for type VARCHAR\(1\)
INSERT INTO assn_cast(vc) VALUES ('abc')

query T
INSERT INTO assn_cast(vc) VALUES (1) RETURNING vc
----
1

statement error value too long for type VARCHAR\(1\)
INSERT INTO assn_cast(vc) VALUES (123)

statement ok
INSERT INTO assn_cast(qc) VALUES ('a')

statement ok
INSERT INTO assn_cast(qc) VALUES (null), ('b')

query T
INSERT INTO assn_cast(qc) VALUES ('abc') RETURNING qc
----
a

# Note: This statement fails in Postgres because the default integer type is an
# INT4, and the INT4 -> "char" cast is explicit. Our default integer type
# is an INT8 and INT8 -> "char" is an assignment cast.
query T
INSERT INTO assn_cast(qc) VALUES (123) RETURNING qc
----
{

# An integer to "char" cast converts the integer into the corresponding 7-bit
# ASCII character. Anything greater than 127 is out of range.
statement error \"char\" out of range
INSERT INTO assn_cast(qc) VALUES (1234)

statement ok
PREPARE insert_qc AS INSERT INTO assn_cast(qc) VALUES ($1)

statement ok
DELETE FROM assn_cast

statement ok
EXECUTE insert_qc('foo')

statement ok
EXECUTE insert_qc('foo'::STRING)

query T
SELECT qc FROM assn_cast
----
f
f

statement ok
INSERT into assn_cast(b) VALUES ('1')

statement ok
INSERT INTO assn_cast(b) VALUES (null), ('1')

# TODO(mgartner): To match Postgres behavior, this statement should fail with
# the message "value too long for type BIT".
statement ok
INSERT into assn_cast(b) VALUES ('01')

statement error value type int doesn't match type bit of column \"b\"
INSERT into assn_cast(b) VALUES (1)

statement ok
INSERT INTO assn_cast(i) VALUES ('1')

statement ok
INSERT INTO assn_cast(i) VALUES (null), ('1')

statement ok
PREPARE insert_i AS INSERT INTO assn_cast(i) VALUES ($1)

statement ok
EXECUTE insert_i('1')

statement error value type string doesn't match type int of column \"i\"
INSERT INTO assn_cast(i) VALUES ('1'::STRING)

statement error integer out of range for type int2
INSERT INTO assn_cast(i2) VALUES (999999999)

statement ok
PREPARE insert_i2 AS INSERT INTO assn_cast(i2) VALUES ($1)

statement error integer out of range for type int2
EXECUTE insert_i2(99999999)

statement ok
INSERT INTO assn_cast(f4) VALUES (18754999.99)

statement ok
PREPARE insert_f4 AS INSERT INTO assn_cast(f4) VALUES ($1)

statement ok
EXECUTE insert_f4(18754999.99)

# TODO(mgartner): Values are not correctly truncated when cast to FLOAT4, either
# in an assignment or explicit context. The columns should have a value of
# 1.8755e+07. See #73743.
query F
SELECT f4 FROM assn_cast WHERE f4 IS NOT NULL
----
1.875499999e+07
1.875499999e+07

statement ok
INSERT INTO assn_cast(t) VALUES ('1970-01-01'::timestamptz)

statement ok
INSERT INTO assn_cast(d) VALUES (11.22), (88.99)

statement ok
INSERT INTO assn_cast(d) VALUES (22.33::DECIMAL(10, 0)), (99.11::DECIMAL(10, 2))

statement ok
INSERT INTO assn_cast(d) VALUES (33.11::DECIMAL(10, 0)), (44.44::DECIMAL(10, 0))

statement ok
PREPARE insert_d AS INSERT INTO assn_cast(d) VALUES ($1)

statement ok
EXECUTE insert_d(123.45)

statement ok
PREPARE insert_d2 AS INSERT INTO assn_cast(d) SELECT * FROM (VALUES ($1::DECIMAL(10, 2)))

statement ok
EXECUTE insert_d2(67.89)

query F rowsort
SELECT d FROM assn_cast WHERE d IS NOT NULL
----
11
89
22
99
33
44
123
68

statement ok
INSERT INTO assn_cast(a) VALUES (ARRAY[])

statement ok
INSERT INTO assn_cast(a) VALUES (ARRAY[NULL])

statement ok
INSERT INTO assn_cast(a) VALUES (ARRAY[1.1])

statement ok
INSERT INTO assn_cast(a) VALUES (ARRAY[2.88, NULL, 15])

statement ok
INSERT INTO assn_cast(a) VALUES (ARRAY[3.99, NULL, 16]::DECIMAL(10, 2)[])

statement ok
INSERT INTO assn_cast(a) VALUES (ARRAY[5.55, 6.66::DECIMAL(10, 2)])

statement ok
PREPARE insert_a AS INSERT INTO assn_cast(a) VALUES ($1)

statement ok
EXECUTE insert_a(ARRAY[7.77, 8.88::DECIMAL(10, 2)])

statement ok
PREPARE insert_a2 AS INSERT INTO assn_cast(a) VALUES (ARRAY[$1])

statement ok
EXECUTE insert_a2(20.2)

statement ok
PREPARE insert_a3 AS INSERT INTO assn_cast(a) VALUES (ARRAY[30.12, $1, 32.1])

statement ok
EXECUTE insert_a3(30.9)

query T rowsort
SELECT a FROM assn_cast WHERE a IS NOT NULL
----
{}
{NULL}
{1}
{3,NULL,15}
{4,NULL,16}
{6,7}
{8,9}
{20}
{30,31,32}

statement ok
INSERT INTO assn_cast(s) VALUES (1)

statement ok
PREPARE insert_s AS INSERT INTO assn_cast(s) VALUES ($1)

# TODO(mgartner): This should succeed to match the behavior of Postgres.
statement error expected EXECUTE parameter expression to have type string, but \'1\' has type int
EXECUTE insert_s(1)

# Tests for assignment casts of DEFAULT expressions.
subtest assignment_casts_default

statement ok
CREATE TABLE assn_cast_int_default (
  k INT,
  -- TODO(mgartner): This should not cause the CREATE TABLE statement to fail.
  -- See #74090.
  -- i1 INT2 DEFAULT 9999999,
  i2 INT2 DEFAULT 9999999::INT
)

statement error integer out of range for type int2
INSERT INTO assn_cast_int_default(k) VALUES (1)

statement ok
CREATE TABLE assn_cast_char_default (
  c CHAR DEFAULT 'foo'::TEXT,
  c2 CHAR(2) DEFAULT 'bar',
  qc "char" DEFAULT 'baz'
)

# The default value of c is too long.
statement error value too long for type CHAR
INSERT INTO assn_cast_char_default(c2) VALUES ('ab')

# The default value of c2 is too long.
statement error value too long for type CHAR\(2\)
INSERT INTO assn_cast_char_default(c) VALUES ('a')

# The default value of qc is truncated when inserted.
statement ok
INSERT INTO assn_cast_char_default(c, c2) VALUES ('a', 'ab')

query TTT
SELECT * FROM assn_cast_char_default
----
a ab b

statement ok
CREATE TABLE assn_cast_dec_default (
  k INT,
  d DECIMAL(10, 0) DEFAULT 1.56::DECIMAL(10, 2),
  d1 DECIMAL(10, 1) DEFAULT 1.58
)

statement ok
INSERT INTO assn_cast_dec_default(k) VALUES (1)

query IRR
SELECT * FROM assn_cast_dec_default
----
1  2  1.6

# Tests for assignment casts of computed columns.
subtest assignment_casts_computed

statement ok
CREATE TABLE assn_cast_comp (
  i INT,
  i2 INT2 AS (i + 9999999) STORED,
  t TEXT,
  c CHAR AS (t) STORED,
  d DECIMAL(10, 0),
  d_comp DECIMAL(10, 2) AS (d) STORED,
  d2 DECIMAL(10, 2),
  d2_comp DECIMAL(10, 0) AS (d2) STORED
)

statement error integer out of range for type int2
INSERT INTO assn_cast_comp(i) VALUES (1)

statement error value too long for type CHAR
INSERT INTO assn_cast_comp(t) VALUES ('foo')

statement ok
INSERT INTO assn_cast_comp(d, d2) VALUES (1.56, 2.78)

query RRRR
SELECT d, d_comp, d2, d2_comp FROM assn_cast_comp
----
2  2.00  2.78  3


# Tests for assignment casts in UPDATEs.
subtest assignment_casts_update

statement ok
DELETE FROM assn_cast

statement ok
INSERT INTO assn_cast (c) VALUES (NULL)

statement error value too long for type CHAR
UPDATE assn_cast SET c = 'abc'

query T
UPDATE assn_cast SET c = 1 RETURNING c
----
1

statement error value too long for type CHAR
UPDATE assn_cast SET c = 123

statement ok
UPDATE assn_cast SET c = NULL

statement ok
PREPARE update_c AS UPDATE assn_cast SET c = $1

statement error value too long for type CHAR
EXECUTE update_c('foo')

statement error value too long for type CHAR
EXECUTE update_c('foo'::STRING)

statement ok
EXECUTE update_c(' ')

query T
SELECT concat('"', c, '"') FROM assn_cast
----
""

statement ok
EXECUTE update_c(' '::STRING)

query T
SELECT concat('"', c, '"') FROM assn_cast
----
""

statement ok
UPDATE assn_cast SET qc = 'a'

query T
UPDATE assn_cast SET qc = 'abc' RETURNING qc
----
a

# An integer to "char" cast converts the integer into the corresponding 7-bit
# ASCII character. Anything greater than 127 is out of range.
statement error \"char\" out of range
UPDATE assn_cast SET qc = 1234

statement ok
PREPARE update_qc AS UPDATE assn_cast SET qc = $1

statement ok
EXECUTE update_qc('foo')

query T
SELECT qc FROM assn_cast
----
f

statement ok
EXECUTE update_qc('foo'::STRING)

query T
SELECT qc FROM assn_cast
----
f

statement ok
UPDATE assn_cast SET i = '1'

statement ok
PREPARE update_i AS UPDATE assn_cast SET i = $1

statement ok
EXECUTE update_i('1')

statement error value type string doesn't match type int of column \"i\"
UPDATE assn_cast SET i = '1'::STRING

statement error integer out of range for type int2
UPDATE assn_cast SET i2 = 999999999

statement ok
PREPARE update_i2 AS UPDATE assn_cast SET i2 = $1

statement error integer out of range for type int2
EXECUTE update_i2(99999999)

query F
UPDATE assn_cast SET d = 11.22 RETURNING d
----
11

query F
UPDATE assn_cast SET d = 11.22::DECIMAL(10, 0) RETURNING d
----
11

query F
UPDATE assn_cast SET d = 11.22::DECIMAL(10, 2) RETURNING d
----
11

statement ok
PREPARE update_d AS UPDATE assn_cast SET d = $1

statement ok
EXECUTE update_d(123.45)

query F
SELECT d FROM assn_cast
----
123

statement ok
PREPARE update_d2 AS UPDATE assn_cast SET d = (SELECT * FROM (VALUES ($1::DECIMAL(10, 2))))

statement ok
EXECUTE update_d2(67.89)

query F
SELECT d FROM assn_cast
----
68

query T
UPDATE assn_cast SET a = ARRAY[] RETURNING a
----
{}

query T
UPDATE assn_cast SET a = ARRAY[NULL] RETURNING a
----
{NULL}

query T
UPDATE assn_cast SET a = ARRAY[1.1] RETURNING a
----
{1}

query T
UPDATE assn_cast SET a = ARRAY[2.88, NULL, 15] RETURNING a
----
{3,NULL,15}

query T
UPDATE assn_cast SET a = ARRAY[3.99, NULL, 16]::DECIMAL(10, 2)[] RETURNING a
----
{4,NULL,16}

query T
UPDATE assn_cast SET a = ARRAY[5.55, 6.66::DECIMAL(10, 2)] RETURNING a
----
{6,7}

statement ok
PREPARE update_a AS UPDATE assn_cast SET a = $1

statement ok
EXECUTE update_a(ARRAY[7.77, 8.88::DECIMAL(10, 2)])

query T
SELECT a FROM assn_cast
----
{8,9}

statement ok
PREPARE update_a2 AS UPDATE assn_cast SET a = ARRAY[$1]

statement ok
EXECUTE update_a2(20.2)

query T
SELECT a FROM assn_cast
----
{20}

statement ok
PREPARE update_a3 AS UPDATE assn_cast SET a = ARRAY[30.12, $1, 32.1]

statement ok
EXECUTE update_a3(30.9)

query T
SELECT a FROM assn_cast
----
{30,31,32}

statement error value type tuple{int, int} doesn't match type timestamp of column "t"
UPDATE assn_cast SET t = (SELECT (10, 11))

statement error value type decimal doesn't match type timestamp of column "t"
UPDATE assn_cast SET t = 3.2

statement error value type decimal doesn't match type timestamp of column "t"
UPDATE assn_cast SET (i, t) = (1, 3.2)

# Tests for assignment casts in cascading UPDATEs.
subtest assignment_casts_update_cascade

statement ok
CREATE TABLE assn_cast_p (p DECIMAL(10, 2) PRIMARY KEY);
INSERT INTO assn_cast_p VALUES (1.0);

# Test ON UPDATE CASCADE.
statement ok
CREATE TABLE assn_cast_c (c INT PRIMARY KEY, p DECIMAL(10, 0) REFERENCES assn_cast_p(p) ON UPDATE CASCADE);
INSERT INTO assn_cast_c VALUES (1, 1.0);

statement error update on table "assn_cast_c" violates foreign key constraint "assn_cast_c_p_fkey"
UPDATE assn_cast_p SET p = 1.2

statement ok
UPDATE assn_cast_p SET p = 2.0

query IF
SELECT * FROM assn_cast_c
----
1  2

# Test ON UPDATE SET DEFAULT.
statement ok
DROP TABLE assn_cast_c;
CREATE TABLE assn_cast_c (c INT PRIMARY KEY, p DECIMAL(10, 0) DEFAULT 3.1 REFERENCES assn_cast_p(p) ON UPDATE SET DEFAULT);
INSERT INTO assn_cast_c VALUES (2, 2.0);

statement error update on table "assn_cast_c" violates foreign key constraint "assn_cast_c_p_fkey"
UPDATE assn_cast_p SET p = 1.2

statement ok
UPDATE assn_cast_p SET p = 3.0

query IF
SELECT * FROM assn_cast_c
----
2  3


# Regression tests.
subtest regressions

statement ok
CREATE TABLE t45837 AS SELECT 1.25::decimal AS d

# Test that decimals get rounded when casting.
query T
SELECT d::decimal(10,1) FROM t45837
----
1.3

statement ok
CREATE TABLE t2 AS SELECT 18446744073709551616::FLOAT AS f

statement error pgcode 22003 integer out of range
SELECT f::int FROM t2

statement error integer out of range
SELECT 23414123414::int2

# Regression test for #47327. Test that negative intervals are correctly
# cast to a decimal.
statement ok
CREATE TABLE t0(c0 DECIMAL UNIQUE); INSERT INTO t0(c0) VALUES(0);

statement ok
CREATE TABLE t1(c0 DECIMAL); INSERT INTO t1(c0) VALUES(0);

# Both of these queries should return no rows.
query T
SELECT t0.c0 FROM t0 WHERE t0.c0 BETWEEN t0.c0 AND INTERVAL '-1'::DECIMAL
----

query T
SELECT t1.c0 FROM t1 WHERE t1.c0 BETWEEN t1.c0 AND INTERVAL '-1'::DECIMAL
----

# Regression test for incorrectly casting integers out of range (#64429).
statement ok
CREATE TABLE t64429 (_int8 INT8, _int4 INT4);
INSERT INTO t64429 VALUES (3000000000, 300000);

statement error integer out of range for type int2
SELECT _int8::INT2 FROM t64429

statement error integer out of range for type int4
SELECT _int8::INT4 FROM t64429

statement error integer out of range for type int2
SELECT _int4::INT2 FROM t64429

# Also check the negative overflow.
statement ok
DELETE FROM t64429 WHERE true;
INSERT INTO t64429 VALUES (-3000000000, -300000);

statement error integer out of range for type int2
SELECT _int8::INT2 FROM t64429

statement error integer out of range for type int4
SELECT _int8::INT4 FROM t64429

statement error integer out of range for type int2
SELECT _int4::INT2 FROM t64429

# Regression test for #66067. Ensure that there is no correctness bug due to
# improper casting of CHAR and VARCHAR.
statement ok
CREATE TABLE t66067_a (
  a INT,
  c CHAR(26),
  CONSTRAINT c UNIQUE (c)
);
CREATE TABLE t66067_b (
  a INT,
  v VARCHAR(40)
);
INSERT INTO t66067_a VALUES (1, 'foo');
INSERT INTO t66067_b VALUES (1, 'bar');

query ITIT
SELECT * FROM t66067_b b
INNER LOOKUP JOIN t66067_a a ON b.a = a.a
WHERE b.v = 'bar' AND a.c = 'foo'
----
1  bar  1  foo

query ITI
SELECT i, i::"char"::bytea, length(i::"char")
FROM (VALUES (32), (97), (127), (0), (-1), (-127), (-128)) v(i);
----
32           1
97    a      1
127         1
0     ·      0
-1    [255]  1
-127  [129]  1
-128  [128]  1

statement error pgcode 22003 \"char\" out of range
SELECT 128::"char";

statement error pgcode 22003 \"char\" out of range
SELECT (-129)::"char";

query IFRB
SELECT ' 1 '::int, ' 1.2 '::float, ' 2.3 '::decimal, ' true '::bool
----
1  1.2  2.3  true

query IOTOOOOOO
SELECT i, i::oid, i::oid::text,
  i::oid::regproc, i::oid::regprocedure, i::oid::regnamespace, i::oid::regclass, i::oid::regtype, i::oid::regrole
FROM (VALUES (0), (1)) v(i)
----
0  0  0  -  -  -  -  -  -
1  1  1  1  1  1  1  1  1

query TOOOOOOOOOOOO
SELECT i, i::regproc::oid, i::regprocedure::oid, i::regnamespace::oid, i::regtype::oid, i::regclass::oid, i::regrole::oid,
  i::regproc, i::regprocedure, i::regnamespace, i::regtype, i::regclass, i::regrole
FROM (VALUES ('-')) v(i)
----
-  0  0  0  0  0  0  -  -  -  -  -  -

statement error invalid input syntax for type oid: "-"
SELECT i, i::oid FROM (VALUES ('-')) v(i)

statement error invalid input syntax for type oid: "-"
SELECT '-'::oid

query OOOOOOOOOOOO
SELECT '-'::regclass, '-'::regclass::oid,
  '-'::regproc, '-'::regproc::oid,
  '-'::regprocedure, '-'::regprocedure::oid,
  '-'::regnamespace, '-'::regnamespace::oid,
  '-'::regtype, '-'::regtype::oid,
  '-'::regrole, '-'::regrole::oid
----
-  0  -  0  -  0  -  0  -  0  -  0

# Regression test for #73450. Eliding casts should not cause incorrect results.
subtest regression_73450

statement ok
PREPARE s73450_a AS SELECT $1::INT2

statement error integer out of range for type int2
EXECUTE s73450_a(999999)

statement ok
PREPARE s73450_b AS SELECT $1::CHAR

query T
EXECUTE s73450_b('foo')
----
f

statement ok
CREATE TABLE t73450 (c CHAR);
INSERT INTO t73450 VALUES ('f')

query T
SELECT * FROM t73450 WHERE c = 'foo'::CHAR
----
f

statement ok
PREPARE s73450_c AS SELECT * FROM t73450 WHERE c = $1::CHAR

query T
EXECUTE s73450_c('foo')
----
f

# Regression test for #74470. Casts to and from ENUMs should have stable
# volatility so that they are not allowed in check constraints, computed column
# expressions, and partial index predicates.
statement ok
CREATE TYPE typ74470 AS ENUM ('foo', 'bar');

statement error context-dependent operators are not allowed in computed column
CREATE TABLE tab74470 (a typ74470, b TEXT AS (a::TEXT) STORED);

statement error context-dependent operators are not allowed in computed column
CREATE TABLE tab74470 (a TEXT, b typ74470 AS (a::typ74470) STORED);
