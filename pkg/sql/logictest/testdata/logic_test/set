# LogicTest: default opt

statement error unknown variable: "foo"
SET foo = bar

statement error unknown variable: "foo"
SHOW foo

statement error database "foo" does not exist
SET database = foo

# Ensure that the failing SET DATABASE call did not alter the session.
# The default session.database value is "test".
statement ok
SHOW TABLES

statement ok
CREATE DATABASE foo

statement ok
SET database = foo

# Create a table in the session database.
statement ok
CREATE TABLE bar (k INT PRIMARY KEY)

# Verify that the table is indeed in "foo".
query T colnames
SHOW TABLES FROM foo
----
Table
bar

# Verify set to empty string.
statement ok
SET database = ""

query T colnames
SHOW DATABASE
----
database
·

statement error no database specified
SHOW TABLES

# Verify SHOW TABLES FROM works when there is no current database.
query T
SHOW TABLES FROM foo
----
bar

# SET statement succeeds, CREATE TABLE fails.
statement error pgcode 42P07 relation \"bar\" already exists
SET database = foo; CREATE TABLE bar (k INT PRIMARY KEY)

query T colnames
SHOW database
----
database
foo

# SET succeeds
query T colnames
SHOW TABLES from foo
----
Table
bar

statement error invalid variable name: ""
SET ROW (1, TRUE, NULL)

statement ok
SET application_name = helloworld

query T colnames
SHOW application_name
----
application_name
helloworld

query TT
SHOW ALL
----
application_name                helloworld
client_encoding                 UTF8
client_min_messages             ·
database                        foo
datestyle                       ISO
default_transaction_isolation   serializable
default_transaction_read_only   off
distsql                         off
experimental_force_lookup_join  off
experimental_force_zigzag_join  off
experimental_opt                off
extra_float_digits              ·
intervalstyle                   postgres
max_index_keys                  32
node_id                         1
search_path                     public
server_version                  9.5.0
server_version_num              90500
session_user                    root
sql_safe_updates                false
standard_conforming_strings     on
statement_timeout               0s
timezone                        UTC
tracing                         off
transaction_isolation           serializable
transaction_priority            normal
transaction_read_only           off
transaction_status              NoTxn

# SESSION_USER is a special keyword, check that SHOW knows about it.
query T
SHOW session_user
----
root

## Test SET ... TO DEFAULT works

statement ok
SET distsql TO ON

query T colnames
SHOW distsql
----
distsql
on

statement ok
SET distsql TO DEFAULT

query T colnames
SHOW distsql
----
distsql
off

## Test that our no-op compatibility vars work

statement ok
SET application_name = 'hello'

statement ok
SET extra_float_digits = 3

statement ok
SET client_min_messages = 'debug'

statement ok
SET standard_conforming_strings = 'on'

statement error set standard_conforming_strings: "off" not supported
SET standard_conforming_strings = 'off'

statement ok
SET client_encoding = 'UTF8'

statement ok
SET client_encoding = 'unicode'

statement error non-UTF8 encoding other not supported
SET client_encoding = 'other'

statement ok
SET datestyle = 'ISO'

statement error non-ISO date style other not supported
SET datestyle = 'other'

statement ok
SET intervalstyle = 'postgres'

statement error non-postgres interval style other not supported
SET intervalstyle = 'other'

statement ok
SET search_path = 'blah'

statement ok
SET distsql = always

statement ok
SET distsql = on

statement ok
SET distsql = off

statement error not supported
SET distsql = bogus

statement ok
SET experimental_opt = on

statement ok
SET experimental_opt = local

statement ok
SET experimental_opt = off

statement error not supported
SET experimental_opt = bogus

query T colnames
SHOW server_version
----
server_version
9.5.0

query T colnames
SHOW server_version_num
----
server_version_num
90500

# Test read-only variables
statement error variable "max_index_keys" cannot be changed
SET max_index_keys = 32

statement error variable "node_id" cannot be changed
SET node_id = 123

query TT
SELECT name, value FROM system.settings WHERE name = 'testing.str'
----

# quoted identifiers
statement ok
SET "timezone" = 'UTC'

# even quoted in postgres the session variable names are
# case-insensitive for SET and SHOW.
statement ok
SET "TIMEZONE" = 'UTC'

query T
SHOW "TIMEZONE"
----
UTC

# without quoted identifiers
statement ok
SET timezone = 'UTC'

query T
SHOW timezone
----
UTC

# TIMEZONE alias - TIME ZONE two words/tokens
statement ok
SET TIME ZONE 'UTC'

query T
SHOW TIME ZONE
----
UTC

# Regression test for #19727 - invalid EvalContext used to evaluate arguments to set.
statement ok
SET application_name = current_timestamp()::string

# Test statement_timeout on a long-running query.
statement ok
SET statement_timeout = 1

statement error query execution canceled due to statement timeout
SELECT * FROM generate_series(1,1000000)

# Test that statement_timeout can be set with an interval string.
statement ok
SET statement_timeout = '0ms'
