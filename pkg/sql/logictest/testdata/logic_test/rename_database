# LogicTest: !fakedist-metadata

statement ok
SET CLUSTER SETTING sql.cross_db_views.enabled = TRUE

query TTTTT
SHOW DATABASES
----
defaultdb  root  NULL  {}  NULL
postgres   root  NULL  {}  NULL
system     node  NULL  {}  NULL
test       root  NULL  {}  NULL

query TTT
SHOW GRANTS ON DATABASE test
----
test  admin  ALL
test  root   ALL

statement ok
CREATE TABLE kv (
  k INT PRIMARY KEY,
  v INT
)

statement ok
INSERT INTO kv VALUES (1, 2), (3, 4), (5, 6), (7, 8)

query II rowsort
SELECT * FROM kv
----
1 2
3 4
5 6
7 8

statement ok
SET sql_safe_updates = TRUE;

statement error RENAME DATABASE on current database
ALTER DATABASE test RENAME TO u

statement ok
SET sql_safe_updates = FALSE;
 ALTER DATABASE test RENAME TO u

statement error pgcode 42P01 relation "kv" does not exist
SELECT * FROM kv

statement error target database or schema does not exist
SHOW GRANTS ON DATABASE test

query TTTTT
SHOW DATABASES
----
defaultdb  root  NULL  {}  NULL
postgres   root  NULL  {}  NULL
system     node  NULL  {}  NULL
u          root  NULL  {}  NULL

# check the name in descriptor is also changed
query TTT
SHOW GRANTS ON DATABASE u
----
u  admin  ALL
u  root   ALL

statement ok
SET DATABASE = u

query II rowsort
SELECT * FROM kv
----
1 2
3 4
5 6
7 8

statement error pgcode 42601 empty database name
ALTER DATABASE "" RENAME TO u

statement error pgcode 42601 empty database name
ALTER DATABASE u RENAME TO ""

statement ok
ALTER DATABASE u RENAME TO u

statement ok
CREATE DATABASE t

statement error the new database name "u" already exists
ALTER DATABASE t RENAME TO u

statement ok
GRANT ALL ON DATABASE t TO testuser

user testuser

statement error must be owner of database t
ALTER DATABASE t RENAME TO v

query TTTTT
SHOW DATABASES
----
t  root  NULL  {}  NULL

# Test that owners can rename databases as long as they have the CREATEDB
# privilege.
user root

statement ok
ALTER USER testuser CREATEDB

user testuser

statement ok
CREATE DATABASE testuserdb

statement ok
ALTER DATABASE testuserdb RENAME TO testuserdb2

user root

statement ok
ALTER USER testuser NOCREATEDB

user testuser

statement error permission denied to rename database
ALTER DATABASE testuserdb2 RENAME TO testuserdb3

user root

statement ok
DROP DATABASE testuserdb2

# Test that renames aren't allowed while views refer to any of a DB's tables,
# both for views in that database and for views in a different database.

statement ok
CREATE VIEW t.v AS SELECT k,v FROM u.kv

query TTTTIT
SHOW TABLES FROM u
----
public  kv  table  root  0  NULL

statement error cannot rename database because relation "t.public.v" depends on relation "u.public.kv"
ALTER DATABASE u RENAME TO v

statement ok
DROP VIEW t.v

statement ok
ALTER DATABASE u RENAME TO v

statement ok
CREATE VIEW v.v AS SELECT k,v FROM v.kv

statement error cannot rename database because relation "v.public.v" depends on relation "v.public.kv"\s.*you can drop "v.public.v" instead
ALTER DATABASE v RENAME TO u

# Check that the default databases can be renamed like any other.
statement ok
ALTER DATABASE defaultdb RENAME TO w;
  ALTER DATABASE postgres RENAME TO defaultdb;
  ALTER DATABASE w RENAME TO postgres

query TTTTT
SHOW DATABASES
----
defaultdb  root  NULL  {}  NULL
postgres   root  NULL  {}  NULL
system     node  NULL  {}  NULL
t          root  NULL  {}  NULL
v          root  NULL  {}  NULL

statement ok
SET vectorize=on

query T
EXPLAIN ALTER DATABASE v RENAME TO x
----
distribution: local
vectorized: true
·
• rename database

statement ok
RESET vectorize

# Verify that the EXPLAIN above does not actually rename the database (#30543)
query TTTTT colnames
SHOW DATABASES
----
database_name  owner  primary_region  regions  survival_goal
defaultdb      root   NULL            {}       NULL
postgres       root   NULL            {}       NULL
system         node   NULL            {}       NULL
t              root   NULL            {}       NULL
v              root   NULL            {}       NULL

# Test dependent sequences on different databases upon renames
# are allowed now, as well as testing
# renaming databases with sequences in the same DB is successful.
subtest regression_45411

statement ok
CREATE DATABASE db1; CREATE SEQUENCE db1.seq

statement ok
CREATE DATABASE db2; CREATE TABLE db2.tbl (a int DEFAULT nextval('db1.seq'))

statement ok
ALTER DATABASE db1 RENAME TO db3

statement ok
DROP DATABASE db2 CASCADE; DROP DATABASE db3 CASCADE

statement ok
CREATE DATABASE db1; CREATE SEQUENCE db1.a_seq; CREATE SEQUENCE db1.b_seq; USE db1;

statement ok
CREATE TABLE db1.a (a int default nextval('a_seq') + nextval('b_seq') + 1); ALTER DATABASE db1 RENAME TO db2; USE db2;

statement ok
DROP TABLE db2.a; CREATE TABLE db2.a (a int default nextval('a_seq') + nextval('db2.b_seq') + 1); ALTER DATABASE db2 RENAME TO db1; ALTER DATABASE db1 RENAME TO db2

statement ok
DROP TABLE db2.a; CREATE TABLE db2.a (a int default nextval('a_seq') + nextval('db2.public.b_seq') + 1); ALTER DATABASE db2 RENAME TO db1; ALTER DATABASE db1 RENAME TO db2

statement ok
DROP TABLE db2.a; CREATE TABLE db2.a (a int default nextval('a_seq') + nextval('public.b_seq') + 1); ALTER DATABASE db2 RENAME TO db1

statement ok
USE defaultdb; DROP DATABASE db1 CASCADE

# Test that names cannot be reused within the same transaction.

statement ok
CREATE DATABASE foo; CREATE DATABASE bar

# rename foo -> baz, create foo

statement ok
BEGIN

statement ok
ALTER DATABASE foo RENAME TO baz

statement error pgcode 42P04 database "foo" already exists
CREATE DATABASE foo

statement ok
ROLLBACK

# drop foo, rename bar -> foo

statement ok
BEGIN

statement ok
DROP DATABASE foo

statement error pgcode 42P04 the new database name "foo" already exists
ALTER DATABASE bar RENAME TO foo

statement ok
ROLLBACK

# rename foo -> baz, rename bar -> foo

statement ok
BEGIN

statement ok
ALTER DATABASE foo RENAME TO baz

statement error pgcode 42P04 the new database name "foo" already exists
ALTER DATABASE bar RENAME TO foo

statement ok
ROLLBACK

# drop foo, create foo

statement ok
BEGIN

statement ok
DROP DATABASE foo

statement error pgcode 42P04 database "foo" already exists
CREATE DATABASE foo

statement ok
ROLLBACK

statement ok
DROP DATABASE foo; DROP DATABASE bar
