# LogicTest: default distsql parallel-stmts

statement ok
CREATE TABLE t (
  a INT PRIMARY KEY,
  b INT,
  c INT,
  FAMILY (a),
  FAMILY (b)
)

statement ok
INSERT INTO t VALUES (1,1,1)

statement ok
CREATE INDEX foo ON t (b)

statement error pq: column b is of type INT and thus is not indexable with an inverted index
CREATE INVERTED INDEX foo_inv ON t(b)

statement error pq: column b is of type INT and thus is not indexable with an inverted index
CREATE INDEX foo_inv2 ON t(b) USING GIN

statement error pq: syntax error at or near "inverted"
CREATE UNIQUE INVERTED INDEX foo_inv ON t(b)

statement ok
CREATE TABLE c (
  id INT PRIMARY KEY,
  foo JSON,
  bar JSON,
  INVERTED INDEX (foo),
  INVERTED INDEX (bar)
)

query TT
SHOW CREATE TABLE c
----
c  CREATE TABLE c (
     id INT NOT NULL,
     foo JSON NULL,
     bar JSON NULL,
     CONSTRAINT "primary" PRIMARY KEY (id ASC),
     INVERTED INDEX c_foo_idx (foo),
     INVERTED INDEX c_bar_idx (bar),
     FAMILY "primary" (id, foo, bar)
   )

statement error indexing more than one column with an inverted index is not supported
CREATE TABLE d (
  id INT PRIMARY KEY,
  foo JSONB,
  bar JSONB,
  INVERTED INDEX (foo, bar)
)

statement error column foo is of type INT and thus is not indexable with an inverted index
CREATE TABLE d (
  id INT PRIMARY KEY,
  foo INT,
  INVERTED INDEX (foo)
)

statement ok
CREATE TABLE t1 (id1 INT PRIMARY KEY, id2 INT, id3 INT);

statement error pq: inverted indexes don't support interleaved tables
CREATE INDEX c on t1 (id2)
   STORING (id1,id3)
   INTERLEAVE in PARENT t1 (id2) USING GIN;

statement error pq: inverted indexes don't support stored columns
CREATE INDEX c on t1 (id2) STORING (id1,id3) USING GIN;

statement error pq: syntax error at or near "storing"
CREATE INVERTED INDEX c on t1 (id2) STORING (id1,id3);

statement error pq: inverted indexes can't be unique
CREATE UNIQUE INDEX foo_inv2 ON t(b) USING GIN

statement ok
CREATE TABLE d (
  a INT PRIMARY KEY,
  b JSONB
)

statement ok
CREATE INVERTED INDEX foo_inv ON d(b)

statement ok
SHOW INDEX FROM d

statement ok
INSERT INTO d VALUES(1, '{"a": "b"}')

statement ok
INSERT INTO d VALUES(2, '[1,2,3,4, "foo"]')

statement ok
INSERT INTO d VALUES(3, '{"a": {"b": "c"}}')

statement ok
INSERT INTO d VALUES(4, '{"a": {"b": [1]}}')

statement ok
INSERT INTO d VALUES(5, '{"a": {"b": [1, [2]]}}')

statement ok
INSERT INTO d VALUES(6, '{"a": {"b": [[2]]}}')

statement ok
INSERT INTO d VALUES(7, '{"a": "b", "c": "d"}')

statement ok
INSERT INTO d VALUES(8, '{"a": {"b":true}}')

statement ok
INSERT INTO d VALUES(9, '{"a": {"b":false}}')

statement ok
INSERT INTO d VALUES(10, '"a"')

statement ok
INSERT INTO d VALUES(11, 'null')

statement ok
INSERT INTO d VALUES(12, 'true')

statement ok
INSERT INTO d VALUES(13, 'false')

statement ok
INSERT INTO d VALUES(14, '1')

statement ok
INSERT INTO d VALUES(15, '1.23')

statement ok
INSERT INTO d VALUES(16, '[{"a": {"b": [1, [2]]}}, "d"]')

statement ok
INSERT INTO d VALUES(17, '{}')

statement ok
INSERT INTO d VALUES(18, '[]')

statement ok
INSERT INTO d VALUES (29,  NULL)

query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where b @>'{"a": "b"}'
----
index-join  0  index-join  ·      ·                                            (a, b)           b=CONST; a!=NULL; key(a)
 ├── scan   1  scan        ·      ·                                            (a, b[omitted])  b=CONST; a!=NULL; key(a)
 │          1  ·           table  d@foo_inv                                    ·                ·
 │          1  ·           spans  /"a"/"b"-/"a"/"b"/PrefixEnd  ·                ·
 └── scan   1  scan        ·      ·                                            (a, b)           ·
·           1  ·           table  d@primary                                    ·                ·

query IT
SELECT * from d where b @>'{"a": "b"}' ORDER BY a;
----
1  {"a": "b"}
7  {"a": "b", "c": "d"}


query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where b @>'{"a": {"b": [1]}}'
----
index-join  0  index-join  ·      ·                                                                        (a, b)           b=CONST; a!=NULL; key(a)
 ├── scan   1  scan        ·      ·                                                                        (a, b[omitted])  b=CONST; a!=NULL; key(a)
 │          1  ·           table  d@foo_inv                                                                ·                ·
 │          1  ·           spans  /"a"/"b"/Arr/1-/"a"/"b"/Arr/1/PrefixEnd  ·                ·
 └── scan   1  scan        ·      ·                                                                        (a, b)           ·
·           1  ·           table  d@primary                                                                ·                ·

query IT
SELECT * from d where b @> '{"a": {"b": [1]}}' ORDER BY a;
----
4  {"a": {"b": [1]}}
5  {"a": {"b": [1, [2]]}}

query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where b @> '{"a": {"b": [[2]]}}';
----
index-join  0  index-join  ·      ·                                                                                (a, b)           b=CONST; a!=NULL; key(a)
 ├── scan   1  scan        ·      ·                                                                                (a, b[omitted])  b=CONST; a!=NULL; key(a)
 │          1  ·           table  d@foo_inv                                                                        ·                ·
 │          1  ·           spans  /"a"/"b"/Arr/Arr/2-/"a"/"b"/Arr/Arr/2/PrefixEnd  ·                ·
 └── scan   1  scan        ·      ·                                                                                (a, b)           ·
·           1  ·           table  d@primary                                                                        ·                ·

query IT
SELECT * from d where b @> '{"a": {"b": [[2]]}}' ORDER BY a;
----
5  {"a": {"b": [1, [2]]}}
6  {"a": {"b": [[2]]}}

query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where b @> '{"a": {"b":true}}';
----
index-join  0  index-join  ·      ·                                                             (a, b)           b=CONST; a!=NULL; key(a)
 ├── scan   1  scan        ·      ·                                                             (a, b[omitted])  b=CONST; a!=NULL; key(a)
 │          1  ·           table  d@foo_inv                                                     ·                ·
 │          1  ·           spans  /"a"/"b"/True-/"a"/"b"/False  ·                ·
 └── scan   1  scan        ·      ·                                                             (a, b)           ·
·           1  ·           table  d@primary                                                     ·                ·

query IT
SELECT * from d where b @> '{"a": {"b": true}}' ORDER BY a;
----
8  {"a": {"b": true}}

query IT
SELECT * from d where b @> '{"a": {"b": [[2]]}}' ORDER BY a;
----
5  {"a": {"b": [1, [2]]}}
6  {"a": {"b": [[2]]}}

query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where b @>'[1]'
----
index-join  0  index-join  ·      ·                        (a, b)           b=CONST; a!=NULL; key(a)
 ├── scan   1  scan        ·      ·                        (a, b[omitted])  b=CONST; a!=NULL; key(a)
 │          1  ·           table  d@foo_inv                ·                ·
 │          1  ·           spans  /Arr/1-/Arr/1/PrefixEnd  ·                ·
 └── scan   1  scan        ·      ·                        (a, b)           ·
·           1  ·           table  d@primary                ·                ·

query IT
SELECT * from d where b @>'[1]' ORDER BY a;
----
2  [1, 2, 3, 4, "foo"]

query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where b @>'[{"a": {"b": [1]}}]'
----
index-join  0  index-join  ·      ·                                                                                (a, b)           b=CONST; a!=NULL; key(a)
 ├── scan   1  scan        ·      ·                                                                                (a, b[omitted])  b=CONST; a!=NULL; key(a)
 │          1  ·           table  d@foo_inv                                                                        ·                ·
 │          1  ·           spans  /Arr/"a"/"b"/Arr/1-/Arr/"a"/"b"/Arr/1/PrefixEnd  ·                ·
 └── scan   1  scan        ·      ·                                                                                (a, b)           ·
·           1  ·           table  d@primary                                                                        ·                ·

query IT
SELECT * from d where b @>'[{"a": {"b": [1]}}]' ORDER BY a;
----
16  [{"a": {"b": [1, [2]]}}, "d"]

statement ok
DELETE from d WHERE a=1;

query IT
SELECT * from d where b @>'{"a": "b"}' ORDER BY a;
----
7  {"a": "b", "c": "d"}

statement ok
DELETE from d WHERE a=6;

query IT
SELECT * from d where b @> '{"a": {"b": [[2]]}}' ORDER BY a;
----
5  {"a": {"b": [1, [2]]}}

query IT
SELECT * from d where b @> '"a"' ORDER BY a;
----
10  "a"

query IT
SELECT * from d where b @> 'null' ORDER BY a;
----
11  null

query IT
SELECT * from d where b @> 'true' ORDER BY a;
----
12  true

query IT
SELECT * from d where b @> 'false' ORDER BY a;
----
13  false

query IT
SELECT * from d where b @> '1' ORDER BY a;
----
2   [1, 2, 3, 4, "foo"]
14  1

query IT
SELECT * from d where b @> '1.23' ORDER BY a;
----
15  1.23

query IT
SELECT * from d where b @> '{}' ORDER BY a;
----
17  {}

query IT
SELECT * from d where b @> '[]' ORDER BY a;
----
18  []

statement ok
INSERT INTO d VALUES (19, '["a", "a"]')

query IT
SELECT * from d where b @> '["a"]' ORDER BY a;
----
19  ["a", "a"]

statement ok
INSERT INTO d VALUES (20, '[{"a": "a"}, {"a": "a"}]')

query IT
SELECT * from d where b @> '[{"a": "a"}]' ORDER BY a;
----
20  [{"a": "a"}, {"a": "a"}]

statement ok
INSERT INTO d VALUES (21,  '[[[["a"]]], [[["a"]]]]')

query IT
SELECT * from d where b @> '[[[["a"]]]]' ORDER BY a;
----
21  [[[["a"]]], [[["a"]]]]

statement ok
INSERT INTO d VALUES (22,  '[1,2,3,1]')

query IT
SELECT * from d where b @> '[[[["a"]]]]' ORDER BY a;
----
21  [[[["a"]]], [[["a"]]]]

query IT
SELECT * from d where b->'a' = '"b"'
----
7  {"a": "b", "c": "d"}

query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where b->'a' = '"b"'
----
index-join  0  index-join  ·      ·                                        (a, b)           b=CONST; a!=NULL; key(a)
 ├── scan   1  scan        ·      ·                                        (a, b[omitted])  b=CONST; a!=NULL; key(a)
 │          1  ·           table  d@foo_inv                                ·                ·
 │          1  ·           spans  /"a"/"b"-/"a"/"b"/PrefixEnd  ·                ·
 └── scan   1  scan        ·      ·                                        (a, b)           ·
·           1  ·           table  d@primary                                ·                ·

query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where '"b"' = b->'a'
----
index-join  0  index-join  ·      ·                                        (a, b)           b=CONST; a!=NULL; key(a)
 ├── scan   1  scan        ·      ·                                        (a, b[omitted])  b=CONST; a!=NULL; key(a)
 │          1  ·           table  d@foo_inv                                ·                ·
 │          1  ·           spans  /"a"/"b"-/"a"/"b"/PrefixEnd  ·                ·
 └── scan   1  scan        ·      ·                                        (a, b)           ·
·           1  ·           table  d@primary                                ·                ·

statement ok
INSERT INTO d VALUES (23,  '{"a": 123.123}')

statement ok
INSERT INTO d VALUES (24,  '{"a": 123.123000}')

query IT
SELECT * from d where b @> '{"a": 123.123}' ORDER BY a;
----
23  {"a": 123.123}
24  {"a": 123.123000}

query IT
SELECT * from d where b @> '{"a": 123.123000}' ORDER BY a;
----
23  {"a": 123.123}
24  {"a": 123.123000}

statement ok
INSERT INTO d VALUES (25,  '{"a": [{}]}')

statement ok
INSERT INTO d VALUES (26,  '[[], {}]')

query IT
SELECT * from d where b @> '{"a": [{}]}' ORDER BY a;
----
25  {"a": [{}]}

query IT
SELECT * from d where b @> '[{}]' ORDER BY a;
----
26  [[], {}]

query IT
SELECT * from d where b @> '[[]]' ORDER BY a;
----
26  [[], {}]

statement ok
INSERT INTO d VALUES (27,  '[true, false, null, 1.23, "a"]')

query IT
SELECT * from d where b @> 'true' ORDER BY a;
----
12  true
27  [true, false, null, 1.23, "a"]

query IT
SELECT * from d where b @> 'false' ORDER BY a;
----
13  false
27  [true, false, null, 1.23, "a"]

query IT
SELECT * from d where b @> '1.23' ORDER BY a;
----
15  1.23
27  [true, false, null, 1.23, "a"]

query IT
SELECT * from d where b @> '"a"' ORDER BY a;
----
10  "a"
19  ["a", "a"]
27  [true, false, null, 1.23, "a"]

query IT
SELECT * from d where b IS NULL;
----
29  NULL

query IT
SELECT * from d where b = NULL;
----

query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where b IS NULL
----
index-join  0  index-join  ·       ·          (a, b)           a!=NULL; weak-key(a,b)
 ├── scan   1  scan        ·       ·          (a, b[omitted])  a!=NULL; weak-key(a,b)
 │          1  ·           table   d@foo_inv  ·                ·
 │          1  ·           spans   ALL        ·                ·
 └── scan   1  scan        ·       ·          (a, b)           ·
·           1  ·           table   d@primary  ·                ·
·           1  ·           filter  b IS NULL  ·                ·


query IT
SELECT * from d where b @> NULL;
----

query IT
SELECT * from d where b @> 'null' ORDER BY a;
----
11  null
27  [true, false, null, 1.23, "a"]

statement ok
CREATE TABLE users (
  profile_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  last_updated TIMESTAMP DEFAULT now(),
  user_profile JSONB
);

statement ok
INSERT INTO users (user_profile) VALUES  ('{"first_name": "Lola", "last_name": "Dog", "location": "NYC", "online" : true, "friends" : 547}'),
                                         ('{"first_name": "Ernie", "status": "Looking for treats", "location" : "Brooklyn"}');

statement ok
CREATE INVERTED INDEX dogs on users(user_profile);

query T
SELECT user_profile from users where user_profile @> '{"first_name":"Lola"}';
----
{"first_name": "Lola", "friends": 547, "last_name": "Dog", "location": "NYC", "online": true}

query T
SELECT user_profile from users where user_profile @> '{"first_name":"Ernie"}';
----
 {"first_name": "Ernie", "location": "Brooklyn", "status": "Looking for treats"}
