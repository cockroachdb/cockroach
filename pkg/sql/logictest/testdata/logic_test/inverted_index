# LogicTest: default distsql parallel-stmts

statement ok
CREATE TABLE t (
  a INT PRIMARY KEY,
  b INT,
  c INT,
  FAMILY (a),
  FAMILY (b)
)

statement ok
INSERT INTO t VALUES (1,1,1)

statement ok
CREATE INDEX foo ON t (b)

statement error pq: column b is of type INT and thus is not indexable with an inverted index
CREATE INVERTED INDEX foo_inv ON t(b)

statement error pq: column b is of type INT and thus is not indexable with an inverted index
CREATE INDEX foo_inv2 ON t(b) USING GIN

statement error pq: syntax error at or near "inverted"
CREATE UNIQUE INVERTED INDEX foo_inv ON t(b)

statement ok
CREATE TABLE c (
  id INT PRIMARY KEY,
  foo JSON,
  bar JSON,
  INVERTED INDEX (foo),
  INVERTED INDEX (bar)
)

query TT
SHOW CREATE TABLE c
----
c  CREATE TABLE c (
     id INT NOT NULL,
     foo JSON NULL,
     bar JSON NULL,
     CONSTRAINT "primary" PRIMARY KEY (id ASC),
     INVERTED INDEX c_foo_idx (foo),
     INVERTED INDEX c_bar_idx (bar),
     FAMILY "primary" (id, foo, bar)
   )

statement error indexing more than one column with an inverted index is not supported
CREATE TABLE d (
  id INT PRIMARY KEY,
  foo JSONB,
  bar JSONB,
  INVERTED INDEX (foo, bar)
)

statement error column foo is of type INT and thus is not indexable with an inverted index
CREATE TABLE d (
  id INT PRIMARY KEY,
  foo INT,
  INVERTED INDEX (foo)
)

statement ok
CREATE TABLE t1 (id1 INT PRIMARY KEY, id2 INT, id3 INT);

statement error pq: inverted indexes don't support interleaved tables
CREATE INDEX c on t1 (id2)
   STORING (id1,id3)
   INTERLEAVE in PARENT t1 (id2) USING GIN;

statement error pq: inverted indexes don't support stored columns
CREATE INDEX c on t1 (id2) STORING (id1,id3) USING GIN;

statement error pq: syntax error at or near "storing"
CREATE INVERTED INDEX c on t1 (id2) STORING (id1,id3);

statement error pq: inverted indexes can't be unique
CREATE UNIQUE INDEX foo_inv2 ON t(b) USING GIN

statement ok
CREATE TABLE d (
  a INT PRIMARY KEY,
  b JSONB
)

statement ok
CREATE INVERTED INDEX foo_inv ON d(b)

statement ok
SHOW INDEX FROM d

statement ok
INSERT INTO d VALUES(1, '{"a": "b"}')

statement ok
INSERT INTO d VALUES(2, '[1,2,3,4,"foo"]')

statement ok
INSERT INTO d VALUES(3, '{"a": {"b":"c"}}')

statement ok
INSERT INTO d VALUES(4, '{"a":{"b":[1]}}')

statement ok
INSERT INTO d VALUES(5, '{"a":{"b":[1,[2]]}}')

statement ok
INSERT INTO d VALUES(6, '{"a":{"b":[[2]]}}')

statement ok
INSERT INTO d VALUES(7, '{"a":"b", "c":"d"}')

statement ok
INSERT INTO d VALUES(8, '{"a":{"b":true}}')

statement ok
INSERT INTO d VALUES(9, '{"a":{"b":false}}')

statement ok
INSERT INTO d VALUES(10, '"a"')

statement ok
INSERT INTO d VALUES(11, 'null')

statement ok
INSERT INTO d VALUES(12, 'true')

statement ok
INSERT INTO d VALUES(13, 'false')

statement ok
INSERT INTO d VALUES(14, '1')

statement ok
INSERT INTO d VALUES(15, '1.23')

statement ok
INSERT INTO d VALUES(17, '[{"a":{"b":[1,[2]]}}, "d"]')

statement error pq: attempted access to empty key
INSERT INTO d VALUES(16, '{}')

statement error pq: attempted access to empty key
INSERT INTO d VALUES(16, '[]')

query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where b @>'{"a":"b"}'
----
index-join  0  index-join  ·      ·                                        (a, b)           b=CONST; a!=NULL; key(a)
 ├── scan   1  scan        ·      ·                                        (a, b[omitted])  b=CONST; a!=NULL; key(a)
 │          1  ·           table  d@foo_inv                                ·                ·
 │          1  ·           spans  /!NULL/"a"/"b"-/!NULL/"a"/"b"/PrefixEnd  ·                ·
 └── scan   1  scan        ·      ·                                        (a, b)           ·
·           1  ·           table  d@primary                                ·                ·

query IT
SELECT * from d where b @>'{"a": "b"}' ORDER BY a;
----
1  {"a":"b"}
7  {"a":"b","c":"d"}


query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where b @>'{"a":{"b":[1]}}'
----
index-join  0  index-join  ·      ·                                                                (a, b)           b=CONST; a!=NULL; key(a)
 ├── scan   1  scan        ·      ·                                                                (a, b[omitted])  b=CONST; a!=NULL; key(a)
 │          1  ·           table  d@foo_inv                                                        ·                ·
 │          1  ·           spans  /!NULL/"a"/!NULL/"b"/Arr/1-/!NULL/"a"/!NULL/"b"/Arr/1/PrefixEnd  ·                ·
 └── scan   1  scan        ·      ·                                                                (a, b)           ·
·           1  ·           table  d@primary                                                        ·                ·

query IT
SELECT * from d where b @> '{"a":{"b":[1]}}' ORDER BY a;
----
4  {"a":{"b":[1]}}
5  {"a":{"b":[1,[2]]}}

query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where b @> '{"a":{"b":[[2]]}}';
----
index-join  0  index-join  ·      ·                                                                        (a, b)           b=CONST; a!=NULL; key(a)
 ├── scan   1  scan        ·      ·                                                                        (a, b[omitted])  b=CONST; a!=NULL; key(a)
 │          1  ·           table  d@foo_inv                                                                ·                ·
 │          1  ·           spans  /!NULL/"a"/!NULL/"b"/Arr/Arr/2-/!NULL/"a"/!NULL/"b"/Arr/Arr/2/PrefixEnd  ·                ·
 └── scan   1  scan        ·      ·                                                                        (a, b)           ·
·           1  ·           table  d@primary                                                                ·                ·

query IT
SELECT * from d where b @> '{"a":{"b":[[2]]}}' ORDER BY a;
----
5  {"a":{"b":[1,[2]]}}
6  {"a":{"b":[[2]]}}

query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where b @> '{"a":{"b":true}}';
----
index-join  0  index-join  ·      ·                                                     (a, b)           b=CONST; a!=NULL; key(a)
 ├── scan   1  scan        ·      ·                                                     (a, b[omitted])  b=CONST; a!=NULL; key(a)
 │          1  ·           table  d@foo_inv                                             ·                ·
 │          1  ·           spans  /!NULL/"a"/!NULL/"b"/True-/!NULL/"a"/!NULL/"b"/False  ·                ·
 └── scan   1  scan        ·      ·                                                     (a, b)           ·
·           1  ·           table  d@primary                                             ·                ·

query IT
SELECT * from d where b @> '{"a":{"b":true}}' ORDER BY a;
----
8  {"a":{"b":true}}

query IT
SELECT * from d where b @> '{"a":{"b":[[2]]}}' ORDER BY a;
----
5  {"a":{"b":[1,[2]]}}
6  {"a":{"b":[[2]]}}

query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where b @>'[1]'
----
index-join  0  index-join  ·      ·                        (a, b)           b=CONST; a!=NULL; key(a)
 ├── scan   1  scan        ·      ·                        (a, b[omitted])  b=CONST; a!=NULL; key(a)
 │          1  ·           table  d@foo_inv                ·                ·
 │          1  ·           spans  /Arr/1-/Arr/1/PrefixEnd  ·                ·
 └── scan   1  scan        ·      ·                        (a, b)           ·
·           1  ·           table  d@primary                ·                ·

query IT
SELECT * from d where b @>'[1]' ORDER BY a;
----
2  [1,2,3,4,"foo"]

query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where b @>'[{"a":{"b":[1]}}]'
----
index-join  0  index-join  ·      ·                                                                        (a, b)           b=CONST; a!=NULL; key(a)
 ├── scan   1  scan        ·      ·                                                                        (a, b[omitted])  b=CONST; a!=NULL; key(a)
 │          1  ·           table  d@foo_inv                                                                ·                ·
 │          1  ·           spans  /Arr/!NULL/"a"/!NULL/"b"/Arr/1-/Arr/!NULL/"a"/!NULL/"b"/Arr/1/PrefixEnd  ·                ·
 └── scan   1  scan        ·      ·                                                                        (a, b)           ·
·           1  ·           table  d@primary                                                                ·                ·

query IT
SELECT * from d where b @>'[{"a":{"b":[1]}}]' ORDER BY a;
----
17  [{"a":{"b":[1,[2]]}},"d"]

statement ok
DELETE from d WHERE a=1;

query IT
SELECT * from d where b @>'{"a": "b"}' ORDER BY a;
----
7  {"a":"b","c":"d"}

statement ok
DELETE from d WHERE a=6;

query IT
SELECT * from d where b @> '{"a":{"b":[[2]]}}' ORDER BY a;
----
5  {"a":{"b":[1,[2]]}}

query IT
SELECT * from d where b @> '"a"' ORDER BY a;
----
10  "a"

query IT
SELECT * from d where b @> 'null' ORDER BY a;
----
11  null

query IT
SELECT * from d where b @> 'true' ORDER BY a;
----
12  true

query IT
SELECT * from d where b @> 'false' ORDER BY a;
----
13  false

query IT
SELECT * from d where b @> '1' ORDER BY a;
----
14  1

query IT
SELECT * from d where b @> '1.23' ORDER BY a;
----
15  1.23

statement error pq: constraints = , .*: can't look up empty JSON
SELECT * from d where b @> '{}' ORDER BY a;

statement error pq: constraints = , .*: can't look up empty JSON
SELECT * from d where b @> '[]' ORDER BY a;

statement ok
INSERT INTO d VALUES (20, '["a", "a"]')

query IT
SELECT * from d where b @> '["a"]' ORDER BY a;
----
20  ["a","a"]

statement ok
INSERT INTO d VALUES (21, '[{"a":"a"}, {"a":"a"}]')

query IT
SELECT * from d where b @> '[{"a":"a"}]' ORDER BY a;
----
21  [{"a":"a"},{"a":"a"}]

statement ok
INSERT INTO d VALUES (22,  '[[[["a"]]],[[["a"]]]]')

query IT
SELECT * from d where b @> '[[[["a"]]]]' ORDER BY a;
----
22  [[[["a"]]],[[["a"]]]]

statement ok
INSERT INTO d VALUES (23,  '[1,2,3,1]')

query IT
SELECT * from d where b @> '[[[["a"]]]]' ORDER BY a;
----
22  [[[["a"]]],[[["a"]]]]

query IT
SELECT * from d where b->'a' = '"b"'
----
7  {"a":"b","c":"d"}

query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where b->'a' = '"b"'
----
index-join  0  index-join  ·      ·                                        (a, b)           b=CONST; a!=NULL; key(a)
 ├── scan   1  scan        ·      ·                                        (a, b[omitted])  b=CONST; a!=NULL; key(a)
 │          1  ·           table  d@foo_inv                                ·                ·
 │          1  ·           spans  /!NULL/"a"/"b"-/!NULL/"a"/"b"/PrefixEnd  ·                ·
 └── scan   1  scan        ·      ·                                        (a, b)           ·
·           1  ·           table  d@primary                                ·                ·

query TITTTTT
EXPLAIN (VERBOSE) SELECT * from d where '"b"' = b->'a'
----
index-join  0  index-join  ·      ·                                        (a, b)           b=CONST; a!=NULL; key(a)
 ├── scan   1  scan        ·      ·                                        (a, b[omitted])  b=CONST; a!=NULL; key(a)
 │          1  ·           table  d@foo_inv                                ·                ·
 │          1  ·           spans  /!NULL/"a"/"b"-/!NULL/"a"/"b"/PrefixEnd  ·                ·
 └── scan   1  scan        ·      ·                                        (a, b)           ·
·           1  ·           table  d@primary                                ·                ·
