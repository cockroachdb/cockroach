statement error pq: invalid locale bad_locale: language: subtag "locale" is well-formed but unknown
SELECT 'a' COLLATE bad_locale

statement error pq: unsupported comparison operator: <collatedstring{en}> = <string>
SELECT 'A' COLLATE en = 'a'

statement error pq: unsupported comparison operator: <collatedstring{en}> = <collatedstring{de}>
SELECT 'A' COLLATE en = 'a' COLLATE de

statement error pq: unsupported comparison operator: \('a' COLLATE en_u_ks_level1\) IN \('A' COLLATE en_u_ks_level1, 'b' COLLATE en\): expected 'b' COLLATE en to be of type collatedstring\{en_u_ks_level1\}, found type collatedstring\{en\}
SELECT ('a' COLLATE en_u_ks_level1) IN ('A' COLLATE en_u_ks_level1, 'b' COLLATE en)

statement error pq: tuples \('a' COLLATE en_u_ks_level1, 'a' COLLATE en\), \('A' COLLATE en, 'B' COLLATE en\) are not comparable at index 1: unsupported comparison operator: <collatedstring\{en_u_ks_level1\}> < <collatedstring\{en\}>
SELECT ('a' COLLATE en_u_ks_level1, 'a' COLLATE en) < ('A' COLLATE en, 'B' COLLATE en)


query T
SELECT 'A' COLLATE en
----
A

query T
SELECT ('A' COLLATE de) COLLATE en
----
A

query T
SELECT NAME 'A' COLLATE en
----
A

query T
SELECT (NAME 'A' COLLATE de) COLLATE en
----
A

query T
SELECT NULL COLLATE en
----
NULL

query B
SELECT 'a' COLLATE en < ('B' COLLATE de) COLLATE en
----
true


query B
SELECT (1, 'a' COLLATE en) < (1, 'B' COLLATE en)
----
true

query B
SELECT ('a' COLLATE en_u_ks_level1, 'a' COLLATE en) < ('A' COLLATE en_u_ks_level1, 'B' COLLATE en)
----
true


query B
SELECT 'A' COLLATE en_u_ks_level1 = 'a' COLLATE en_u_ks_level1
----
true

query B
SELECT 'A' COLLATE en_u_ks_level1 <> 'a' COLLATE en_u_ks_level1
----
false

query B
SELECT 'A' COLLATE en_u_ks_level1 < 'a' COLLATE en_u_ks_level1
----
false

query B
SELECT 'A' COLLATE en_u_ks_level1 >= 'a' COLLATE en_u_ks_level1
----
true

query B
SELECT 'A' COLLATE en_u_ks_level1 <= 'a' COLLATE en_u_ks_level1
----
true

query B
SELECT 'A' COLLATE en_u_ks_level1 > 'a' COLLATE en_u_ks_level1
----
false


query B
SELECT 'a' COLLATE en_u_ks_level1 = 'B' COLLATE en_u_ks_level1
----
false

query B
SELECT 'a' COLLATE en_u_ks_level1 <> 'B' COLLATE en_u_ks_level1
----
true

query B
SELECT 'a' COLLATE en_u_ks_level1 < 'B' COLLATE en_u_ks_level1
----
true

query B
SELECT 'a' COLLATE en_u_ks_level1 >= 'B' COLLATE en_u_ks_level1
----
false

query B
SELECT 'a' COLLATE en_u_ks_level1 <= 'B' COLLATE en_u_ks_level1
----
true

query B
SELECT 'a' COLLATE en_u_ks_level1 > 'B' COLLATE en_u_ks_level1
----
false


query B
SELECT 'B' COLLATE en_u_ks_level1 = 'A' COLLATE en_u_ks_level1
----
false

query B
SELECT 'B' COLLATE en_u_ks_level1 <> 'A' COLLATE en_u_ks_level1
----
true

query B
SELECT 'B' COLLATE en_u_ks_level1 < 'A' COLLATE en_u_ks_level1
----
false

query B
SELECT 'B' COLLATE en_u_ks_level1 >= 'A' COLLATE en_u_ks_level1
----
true

query B
SELECT 'B' COLLATE en_u_ks_level1 <= 'A' COLLATE en_u_ks_level1
----
false

query B
SELECT 'B' COLLATE en_u_ks_level1 > 'A' COLLATE en_u_ks_level1
----
true


query B
SELECT ('a' COLLATE en_u_ks_level1) IN ('A' COLLATE en_u_ks_level1, 'b' COLLATE en_u_ks_level1)
----
true

query B
SELECT ('a' COLLATE en_u_ks_level1) NOT IN ('A' COLLATE en_u_ks_level1, 'b' COLLATE en_u_ks_level1)
----
false

query B
SELECT ('a' COLLATE en) IN ('A' COLLATE en, 'b' COLLATE en)
----
false

query B
SELECT ('a' COLLATE en) NOT IN ('A' COLLATE en, 'b' COLLATE en)
----
true


query B
SELECT 'Fussball' COLLATE de = 'Fu√üball' COLLATE de
----
false

query B
SELECT 'Fussball' COLLATE de_u_ks_level1 = 'Fu√üball' COLLATE de_u_ks_level1
----
true


query B
SELECT '√º' COLLATE da < 'x' COLLATE da
----
false

query B
SELECT '√º' COLLATE de < 'x' COLLATE de
----
true


statement error syntax error: invalid locale e: language: tag is not well-formed
CREATE TABLE e1 (
  a STRING COLLATE e
)

statement error multiple COLLATE declarations for column "a"
CREATE TABLE e2 (
  a STRING COLLATE en COLLATE de
)

statement error COLLATE declaration for non-string-typed column "a"
CREATE TABLE e3 (
  a INT COLLATE en
)

statement ok
CREATE TABLE t (
  a STRING COLLATE en
)

query TT
SHOW CREATE TABLE t
----
t  CREATE TABLE public.t (
   a STRING COLLATE en NULL,
   FAMILY "primary" (a, rowid)
)

statement ok
INSERT INTO t VALUES
  ('A' COLLATE en),
  ('B' COLLATE en),
  ('a' COLLATE en),
  ('b' COLLATE en),
  ('x' COLLATE en),
  ('√º' COLLATE en)

statement error value type collatedstring{de} doesn't match type collatedstring{en} of column "a"
INSERT INTO t VALUES ('X' COLLATE de)

query T
SELECT a FROM t ORDER BY t.a
----
a
A
b
B
√º
x

query T
SELECT a FROM t ORDER BY t.a COLLATE da
----
a
A
b
B
x
√º

query T
SELECT a FROM t WHERE a = 'A' COLLATE en;
----
A

query T
SELECT 'a' COLLATE en::STRING || 'b'
----
ab

query T
SELECT 'aüêõbüè†c' COLLATE en::VARCHAR(3)
----
aüêõb

query B
SELECT 't' COLLATE en::BOOLEAN
----
true

query I
SELECT '42' COLLATE en::INTEGER
----
42

query R
SELECT '42.0' COLLATE en::FLOAT
----
42

query R
SELECT '42.0' COLLATE en::DECIMAL
----
42.0

query T
SELECT 'a' COLLATE en::BYTES
----
a

query T
SELECT '2017-01-10 16:05:50.734049+00:00' COLLATE en::TIMESTAMP
----
2017-01-10 16:05:50.734049 +0000 +0000

query T
SELECT '2017-01-10 16:05:50.734049+00:00' COLLATE en::TIMESTAMPTZ
----
2017-01-10 16:05:50.734049 +0000 UTC

query T
SELECT '40 days' COLLATE en::INTERVAL
----
40 days

statement ok
CREATE TABLE foo(a STRING COLLATE en_u_ks_level2)

statement ok
PREPARE x AS INSERT INTO foo VALUES ($1 COLLATE en_u_ks_level2) RETURNING a

query T
EXECUTE x(NULL)
----
NULL

query T
SELECT a FROM foo
----
NULL

# Regression test for #24449

statement ok
INSERT INTO foo VALUES ('aBcD' COLLATE en_u_ks_level2)

query T
SELECT * FROM foo WHERE a = 'aBcD' COLLATE en_u_ks_level2
----
aBcD

query T
SELECT * FROM foo WHERE a = 'abcd' COLLATE en_u_ks_level2
----
aBcD

# Test quoted collations.

statement ok
CREATE TABLE quoted_coll (
  a STRING COLLATE "en",
  b STRING COLLATE "en_US",
  c STRING COLLATE "en-Us" DEFAULT ('c' COLLATE "en-Us"),
  d STRING COLLATE "en-u-ks-level1" DEFAULT ('d'::STRING COLLATE "en-u-ks-level1"),
  e STRING COLLATE "en-us" AS (a COLLATE "en-us") STORED,
  FAMILY "primary" (a, b, c, d, e, rowid)
)

query TT
SHOW CREATE TABLE quoted_coll
----
quoted_coll  CREATE TABLE public.quoted_coll (
             a STRING COLLATE en NULL,
             b STRING COLLATE en_US NULL,
             c STRING COLLATE en_US NULL DEFAULT 'c':::STRING COLLATE en_US,
             d STRING COLLATE en_u_ks_level1 NULL DEFAULT 'd':::STRING COLLATE en_u_ks_level1,
             e STRING COLLATE en_US NULL AS (a COLLATE en_US) STORED,
             FAMILY "primary" (a, b, c, d, e, rowid)
)

# Regression for #46570.
statement ok
CREATE TABLE t46570(c0 BOOL, c1 STRING COLLATE en);
CREATE INDEX ON t46570(rowid, c1 DESC);
INSERT INTO t46570(c1, rowid) VALUES('' COLLATE en, 0);
UPSERT INTO t46570(rowid) VALUES (0), (1)

# Test trailing spaces are truncated for char types.
subtest regression_50015

query T
SELECT
	t
FROM
	(
		VALUES
			('hello '::CHAR(100) COLLATE en_US),
			('hello t'::CHAR(100) COLLATE en_US),
			('hello '::STRING::CHAR(100) COLLATE en_US),
			('hello t'::STRING::CHAR(100) COLLATE en_US)
	) g(t)
----
hello
hello t
hello
hello t

statement ok
CREATE TABLE t50015(id int PRIMARY KEY, a char(100), b char(100) COLLATE en);
INSERT INTO t50015 VALUES
  (1, 'hello', 'hello' COLLATE en),
  (2, 'hello ', 'hello ' COLLATE en),
  (3, repeat('hello ', 2), repeat('hello ', 2) COLLATE en)

query ITITI
SELECT id, a, length(a), b, length(b::string) FROM t50015 ORDER BY id ASC
----
1  hello                                                                                                 5   hello        5
2  hello                                                                                                 5   hello        5
3  hello hello                                                                                           11  hello hello  11

statement ok
CREATE TABLE t54989(
  no_collation_str text,
  no_collation_str_array text[],
  collated_str text COLLATE en,
  default_collation text COLLATE "default"
)

query TT
SELECT
    a.attname AS column_name,
    collname AS collation
FROM pg_attribute a
LEFT JOIN pg_collation co ON a.attcollation = co.oid
JOIN pg_class c ON a.attrelid = c.oid
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE c.relname = 't54989'
ORDER BY column_name
----
collated_str            en
default_collation       default
no_collation_str        default
no_collation_str_array  default
rowid                   NULL

# Regression test for collated string lowercase and hyphen/underscore equality.
subtest nocase_strings

statement ok
CREATE TABLE nocase_strings (s STRING COLLATE "en-US-u-ks-level2");

statement ok
INSERT INTO nocase_strings VALUES ('Aaa' COLLATE "en-US-u-ks-level2"), ('Bbb' COLLATE "en-US-u-ks-level2");

query T
SELECT s FROM nocase_strings WHERE s = ('bbb' COLLATE "en-US-u-ks-level2")
----
Bbb

query T
SELECT s FROM nocase_strings WHERE s = ('bbb' COLLATE "en-us-u-ks-level2")
----
Bbb

query T
SELECT s FROM nocase_strings WHERE s = ('bbb' COLLATE "en_US_u_ks_level2")
----
Bbb

statement ok
CREATE TABLE collation_name_case (s STRING COLLATE en_us_u_ks_level2);

query TT
SHOW CREATE TABLE collation_name_case
----
collation_name_case   CREATE TABLE public.collation_name_case (
                      s STRING COLLATE en_US_u_ks_level2 NULL,
                      FAMILY "primary" (s, rowid)
)

statement error invalid locale en-US-u-ks-le"vel2: language: tag is not well-formed
CREATE TABLE nocase_strings (s STRING COLLATE "en-US-u-ks-le""vel2");

statement error syntax error: invalid locale en-US-u-ks-le: language: tag is not well-formed
CREATE TABLE nocase_strings (s STRING COLLATE "en-US-u-ks-le"vel2");

statement error invalid locale en-us-u-ks-l"evel2: language: tag is not well-formed
SELECT s FROM nocase_strings WHERE s = ('bbb' COLLATE "en-us-u-ks-l""evel2")

statement error at or near "evel2": syntax error
SELECT s FROM nocase_strings WHERE s = ('bbb' COLLATE "en-us-u-ks-l"evel2")

statement error DEFAULT collations are not supported
SELECT 'default collate'::text collate "default"
