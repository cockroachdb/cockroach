# cluster-opt: disable-mvcc-range-tombstones-for-point-deletes

statement ok
SET kv_transaction_buffered_writes_enabled=true

statement ok
CREATE TABLE t1 (pk int primary key, v int, FAMILY (pk, v))

subtest point_delete

statement ok
INSERT INTO t1 VALUES (1,1)

statement ok
BEGIN

statement count 1
DELETE FROM t1 WHERE pk = 1

statement count 0
DELETE FROM t1 WHERE pk = 3

statement ok
COMMIT

subtest repeated_point_delete

statement ok
INSERT INTO t1 VALUES (1,1)

statement ok
BEGIN

statement count 1
DELETE FROM t1 WHERE pk = 1

# The second delete should be served from the write buffer and observe
# the buffered tombstone.
statement count 0
DELETE FROM t1 WHERE pk = 1

statement ok
COMMIT

subtest point_delete_after_write

statement ok
BEGIN

statement ok
INSERT INTO t1 VALUES (1,1)

statement count 1
DELETE FROM t1 WHERE pk = 1

# The second delete should be served from the write buffer and observe
# the buffered tombstone.
statement count 0
DELETE FROM t1 WHERE pk = 1

statement ok
COMMIT

subtest delete_then_insert

statement ok
INSERT INTO t1 VALUES (1,1)

statement ok
BEGIN

statement count 1
DELETE FROM t1 WHERE pk = 1

statement ok
INSERT INTO t1 VALUES (1,1)

statement ok
COMMIT

query II rowsort
SELECT * FROM t1
----
1 1

statement ok
CREATE TABLE t2 (k INT PRIMARY KEY);

statement ok
BEGIN;

statement error pgcode 23505 duplicate key value violates unique constraint "t2_pkey"
INSERT INTO t2 VALUES (1), (1);

statement ok
ROLLBACK;

statement ok
BEGIN;

statement ok
INSERT INTO t2 VALUES (1);

statement error pgcode 23505 duplicate key value violates unique constraint "t2_pkey"
INSERT INTO t2 VALUES (1);

statement ok
ROLLBACK;

statement ok
BEGIN;

statement ok
INSERT INTO t2 VALUES (1);

statement ok
DELETE FROM t2 WHERE k = 1;

statement ok
INSERT INTO t2 VALUES (1);

statement ok
COMMIT;

query I rowsort
SELECT * FROM t2
----
1

# Ensure that DeleteRange requests work correctly with buffered writes. In
# particular, a DeleteRange request results in a buffer flush.

statement ok
CREATE TABLE t3 (k INT PRIMARY KEY)

statement ok
INSERT INTO t3 VALUES (1)

statement ok
BEGIN

statement ok
INSERT INTO t3 VALUES (2)

statement count 0
DELETE FROM t3 WHERE k = 3

statement count 2
DELETE FROM t3 WHERE k < 10 AND k > 0

statement ok
COMMIT

query I rowsort
SELECT count(*) from t3
----
0

# Test savepoints, and in particular savepoint rollbacks, with buffered writes. 
# We test both intermediate selects after rollbacks and the final state
# the transaction has been committed.
statement ok
BEGIN; 
INSERT INTO t3 VALUES(1), (2), (3);
SAVEPOINT s1; 
INSERT INTO t3 VALUES(4), (5), (6)

query I rowsort
SELECT * FROM t3
----
1
2
3
4
5
6

statement ok
SAVEPOINT s2; 
INSERT INTO t3 VALUES(7), (8), (9)

query I rowsort
SELECT * FROM t3
----
1
2
3
4
5
6
7
8
9

statement ok
ROLLBACK TO SAVEPOINT s2; 

query I rowsort
SELECT * FROM t3
----
1
2
3
4
5
6

statement ok
ROLLBACK TO SAVEPOINT s1;

query I rowsort
SELECT * FROM t3
----
1
2
3

statement ok
COMMIT

query I rowsort
SELECT * FROM t3
----
1
2
3
