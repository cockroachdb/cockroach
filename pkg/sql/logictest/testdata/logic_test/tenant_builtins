# LogicTest: !3node-tenant-default-configs
query IBIT colnames
SELECT id, active, length(info), name FROM system.tenants ORDER BY id
----
id  active  length  name
1   true    10      system

# Create three tenants.

query I
SELECT crdb_internal.create_tenant(5)
----
5

# Verify that DROP TENANT is blocked when the service is not NONE.
statement error cannot drop tenant.*in service mode external
DROP TENANT [5]

# create_tenant auto-sets the service for backward-compatibility.
# Reset it here so the tests below don't get confused.
statement ok
ALTER TENANT [5] STOP SERVICE

query error invalid tenant name
SELECT crdb_internal.create_tenant(10, 'ABC')

query error invalid tenant name
SELECT crdb_internal.create_tenant(10, 'invalid_name')

query error invalid tenant name
SELECT crdb_internal.create_tenant(10, 'invalid.name')

query I
SELECT crdb_internal.create_tenant(10, 'tenant-number-ten')
----
10

query I
SELECT crdb_internal.create_tenant('tenant-number-eleven')
----
2

query IBTIIT colnames
SELECT id, active, name, data_state, service_mode,
       crdb_internal.pb_to_json('cockroach.multitenant.ProtoInfo', info, true)
FROM system.tenants
ORDER BY id
----
id  active  name                  data_state  service_mode  crdb_internal.pb_to_json
1   true    system                1           2             {"capabilities": {"canAdminScatter": false, "canAdminSplit": false, "canAdminUnsplit": false, "canViewNodeInfo": false, "canViewTsdbMetrics": false, "spanConfigBounds": null}, "deprecatedDataState": "READY", "deprecatedId": "1", "droppedName": "", "tenantReplicationJobId": "0"}
2   true    tenant-number-eleven  1           0             {"capabilities": {"canAdminScatter": false, "canAdminSplit": false, "canAdminUnsplit": false, "canViewNodeInfo": false, "canViewTsdbMetrics": false, "spanConfigBounds": null}, "deprecatedDataState": "READY", "deprecatedId": "2", "droppedName": "", "tenantReplicationJobId": "0"}
5   true    tenant-5              1           0             {"capabilities": {"canAdminScatter": false, "canAdminSplit": false, "canAdminUnsplit": false, "canViewNodeInfo": false, "canViewTsdbMetrics": false, "spanConfigBounds": null}, "deprecatedDataState": "READY", "deprecatedId": "5", "droppedName": "", "tenantReplicationJobId": "0"}
10  true    tenant-number-ten     1           0             {"capabilities": {"canAdminScatter": false, "canAdminSplit": false, "canAdminUnsplit": false, "canViewNodeInfo": false, "canViewTsdbMetrics": false, "spanConfigBounds": null}, "deprecatedDataState": "READY", "deprecatedId": "10", "droppedName": "", "tenantReplicationJobId": "0"}

# Check we can add a name where none existed before.
statement ok
ALTER TENANT [5] RENAME TO "my-tenant"

query IBT colnames
SELECT id, active, name FROM system.tenants ORDER BY id
----
id  active  name
1   true    system
2   true    tenant-number-eleven
5   true    my-tenant
10  true    tenant-number-ten


# Check we can change the name when there was one before.
statement ok
ALTER TENANT [5] RENAME TO "my-new-tenant-name"

statement error invalid tenant name
ALTER TENANT [5] RENAME TO 'AAA'

statement error invalid tenant name
ALTER TENANT [5] RENAME TO '-a-'

statement error invalid tenant name
ALTER TENANT [5] RENAME TO '11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'

statement error invalid tenant name
ALTER TENANT [5] RENAME TO 'invalid_name'

statement error invalid tenant name
ALTER TENANT [5] RENAME TO 'invalid.name'

# Check for duplicate names.
statement error name "tenant-number-ten" is already taken
ALTER TENANT [5] RENAME TO 'tenant-number-ten'

query error tenant with name "tenant-number-eleven" already exists
SELECT crdb_internal.create_tenant('tenant-number-eleven')

query IBT colnames
SELECT id, active, name FROM system.tenants ORDER BY id
----
id  active  name
1   true    system
2   true    tenant-number-eleven
5   true    my-new-tenant-name
10  true    tenant-number-ten

# Garbage collect a non-drop tenant fails.

query error tenant 5 is not in data state DROP
SELECT crdb_internal.gc_tenant(5)

# Note this just marks the tenant as dropped but does not call GC.

statement ok
DROP TENANT [5]

query IBTIIT colnames
SELECT id, active, name, data_state, service_mode,
       crdb_internal.pb_to_json('cockroach.multitenant.ProtoInfo', info, true)
FROM system.tenants
ORDER BY id
----
id  active  name                  data_state  service_mode  crdb_internal.pb_to_json
1   true    system                1           2             {"capabilities": {"canAdminScatter": false, "canAdminSplit": false, "canAdminUnsplit": false, "canViewNodeInfo": false, "canViewTsdbMetrics": false, "spanConfigBounds": null}, "deprecatedDataState": "READY", "deprecatedId": "1", "droppedName": "", "tenantReplicationJobId": "0"}
2   true    tenant-number-eleven  1           0             {"capabilities": {"canAdminScatter": false, "canAdminSplit": false, "canAdminUnsplit": false, "canViewNodeInfo": false, "canViewTsdbMetrics": false, "spanConfigBounds": null}, "deprecatedDataState": "READY", "deprecatedId": "2", "droppedName": "", "tenantReplicationJobId": "0"}
5   false   NULL                  2           0             {"capabilities": {"canAdminScatter": false, "canAdminSplit": false, "canAdminUnsplit": false, "canViewNodeInfo": false, "canViewTsdbMetrics": false, "spanConfigBounds": null}, "deprecatedDataState": "DROP", "deprecatedId": "5", "droppedName": "my-new-tenant-name", "tenantReplicationJobId": "0"}
10  true    tenant-number-ten     1           0             {"capabilities": {"canAdminScatter": false, "canAdminSplit": false, "canAdminUnsplit": false, "canViewNodeInfo": false, "canViewTsdbMetrics": false, "spanConfigBounds": null}, "deprecatedDataState": "READY", "deprecatedId": "10", "droppedName": "", "tenantReplicationJobId": "0"}


# Try to recreate an existing tenant.
# GC job for tenant 5 has not run yet.
query error pgcode 42710 a tenant with ID 5 or with name "tenant-5" already exists
SELECT crdb_internal.create_tenant(5)

query error pgcode 42710 a tenant with ID 10 or with name "tenant-10" already exists
SELECT crdb_internal.create_tenant(10)

query error pgcode 42710 a tenant with ID 11 or with name "tenant-number-ten" already exists
SELECT crdb_internal.create_tenant(11, 'tenant-number-ten')

# Try to manipulate system.tenants directly as the root user.

statement error pgcode 42501 user root does not have INSERT privilege on relation tenants
INSERT INTO system.tenants VALUES (15)

statement error pgcode 42501 user root does not have INSERT privilege on relation tenants
UPSERT INTO system.tenants VALUES (20)

statement error pgcode 42501 user root does not have UPDATE privilege on relation tenants
UPDATE system.tenants SET active = false WHERE id = 10

statement error pgcode 42501 user root does not have DELETE privilege on relation tenants
DELETE FROM system.tenants WHERE id = 10

# The system tenant cannot be created or destroyed.

query error pgcode 22023 cannot create tenant "1", ID assigned to system tenant
SELECT crdb_internal.create_tenant(1)

statement error pgcode 22023 cannot rename tenant "1", ID assigned to system tenant
ALTER TENANT [1] RENAME TO hello

statement error pgcode 22023 cannot destroy tenant "1", ID assigned to system tenant
DROP TENANT [1]

# Verify that tenants are able to set in-memory cluster settings in logic tests.

statement ok
SET CLUSTER SETTING sql.defaults.vectorize='off'

query T
SHOW CLUSTER SETTING sql.defaults.vectorize
----
off

statement ok
RESET CLUSTER SETTING sql.defaults.vectorize

query T
SHOW CLUSTER SETTING sql.defaults.vectorize
----
on

# Manipulate the tenants zone configurations

query TT
SHOW ZONE CONFIGURATION FOR RANGE tenants
----
RANGE default  ALTER RANGE default CONFIGURE ZONE USING
                 range_min_bytes = 134217728,
                 range_max_bytes = 536870912,
                 gc.ttlseconds = 14400,
                 num_replicas = 3,
                 constraints = '[]',
                 lease_preferences = '[]'

statement ok
ALTER RANGE tenants CONFIGURE ZONE USING gc.ttlseconds = 1

query TT
SHOW ZONE CONFIGURATION FOR RANGE tenants
----
RANGE tenants  ALTER RANGE tenants CONFIGURE ZONE USING
               range_min_bytes = 134217728,
               range_max_bytes = 536870912,
               gc.ttlseconds = 1,
               num_replicas = 3,
               constraints = '[]',
               lease_preferences = '[]'

# Set the jobs adopt interval so that this test doesn't take 30 seconds.
statement ok
SET CLUSTER SETTING jobs.registry.interval.adopt = '1s'

query T
SELECT status FROM [
  SHOW JOB WHEN COMPLETE (
      SELECT job_id FROM crdb_internal.jobs
      WHERE description = 'GC for tenant 5'
  )
]
----
succeeded

statement error pgcode 42704 tenant "5" does not exist
DROP TENANT [5]

query IBTIIT colnames
SELECT id, active, name, data_state, service_mode,
       crdb_internal.pb_to_json('cockroach.multitenant.ProtoInfo', info, true)
FROM system.tenants
ORDER BY id
----
id  active  name                  data_state  service_mode  crdb_internal.pb_to_json
1   true    system                1           2             {"capabilities": {"canAdminScatter": false, "canAdminSplit": false, "canAdminUnsplit": false, "canViewNodeInfo": false, "canViewTsdbMetrics": false, "spanConfigBounds": null}, "deprecatedDataState": "READY", "deprecatedId": "1", "droppedName": "", "tenantReplicationJobId": "0"}
2   true    tenant-number-eleven  1           0             {"capabilities": {"canAdminScatter": false, "canAdminSplit": false, "canAdminUnsplit": false, "canViewNodeInfo": false, "canViewTsdbMetrics": false, "spanConfigBounds": null}, "deprecatedDataState": "READY", "deprecatedId": "2", "droppedName": "", "tenantReplicationJobId": "0"}
10  true    tenant-number-ten     1           0             {"capabilities": {"canAdminScatter": false, "canAdminSplit": false, "canAdminUnsplit": false, "canViewNodeInfo": false, "canViewTsdbMetrics": false, "spanConfigBounds": null}, "deprecatedDataState": "READY", "deprecatedId": "10", "droppedName": "", "tenantReplicationJobId": "0"}

query error tenant resource limits require a CCL binary
SELECT crdb_internal.update_tenant_resource_limits(10, 1000, 100, 0, now(), 0)

user testuser

statement error only users with the admin role are allowed to create tenant
SELECT crdb_internal.create_tenant(314)

statement error only users with the admin role are allowed to create tenant
SELECT crdb_internal.create_tenant('not-allowed')

statement error only users with the admin role are allowed to drop tenant
DROP TENANT [1]

statement error only users with the admin role are allowed to gc tenant
SELECT crdb_internal.gc_tenant(314)

subtest regression_97873

user root

# Verify that destroy_tenant works even in the default service mode,
# for compatibility with CC serverless.
query I
SELECT crdb_internal.create_tenant(97873)
----
97873

query I
SELECT crdb_internal.destroy_tenant(97873)
----
97873
