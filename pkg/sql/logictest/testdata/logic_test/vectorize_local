# LogicTest: local

statement ok
CREATE TABLE a (a INT, b INT, c INT4, PRIMARY KEY (a, b))

statement ok
CREATE TABLE c (a INT, b INT, c INT, d INT, PRIMARY KEY (a, c), INDEX sec (b))

statement ok
CREATE TABLE d (a INT, b INT, PRIMARY KEY (b, a))

statement ok
INSERT INTO a SELECT g//2, g, g FROM generate_series(0,2000) g(g)

statement ok
INSERT INTO c VALUES (1, 1, 1, 0), (2, 1, 2, 0)

statement ok
ALTER TABLE c INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 1,
    "distinct_count": 1
  }
]'

statement ok
INSERT INTO d VALUES (1, 1), (1, 2)

# Test that vectorized stats are collected correctly.
statement ok
SET vectorize = on

statement ok
SET distsql = on

query T
EXPLAIN ANALYZE (DISTSQL) SELECT a FROM a
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
·
• scan
  actual row count: 2,001
  KV rows read: 2,001
  KV bytes read: 16 KiB
  missing stats
  table: a@primary
  spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkMFK80AUhff_UwxnfX9MXLiYVVEqlKqVtriRLKaZSx1IM-PcCVhCHssX8MkkmSi4EFye7975Lmd6yGsDjd3ybnmzV0bdbjf3yoDQessP5sQC_YwSFSFEX7OIjyPqp4WVfYMuCK4NXRpxRah9ZOgeyaWGobE3h4a3bCzHiwIEy8m4ZtKaRYjuZOIZhF0wrWj1H4RNl7RalCCsn1RyJ9aq-HiXOXehYVGRjdXqkopi3juc0zcur9TaXYNwMKl-YVG-S2GUjvdnwRfKimogZDK3kGSODF0O9PemW5bgW-EfJX8zF0NFYHvk_Jviu1jzY_T1dCbHzfRuApYl5WmZw6rNo6Ea_n0GAAD___sUkUk=
·
WARNING: this statement is experimental!

query T
EXPLAIN ANALYZE (DISTSQL) SELECT c.a FROM c JOIN d ON d.b = c.b
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
·
• lookup join
│ actual row count: 2
│ KV rows read: 1
│ table: d@primary
│ equality: (b) = (b)
│
└── • scan
      actual row count: 2
      KV rows read: 2
      KV bytes read: 16 B
      estimated row count: 1
      table: c@sec
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJykUsGKFDEUvPsVjzrHcXoOHgLCoKww6zots4sX6UM6eazRniQmadhl6M_yB_wy6U4UR3FR9liVV_VeFTkhfRkgcX1xdfHqhvRK0etD-5Y0Xba7PRlq92RWPb0gveoh4LzhvTpygvyABp1AiF5zSj7O1GkZ2Jk7yLWAdWHMM90JaB8Z8oRs88CQuFH9wAdWhuOzNQQMZ2WHxVZvE2sIXAflkqSnEGjHLGnbiO0GAm_eU7ZHlrT-9jVVPIaBE0VWRlKd6e_zT6p5Ti8h0KusP3IiP-YwO86Lq_QHtUE3CRRUT09Z3TJkM4l_j3fpravpmvN0ZhuiPap4D4Er7z-PgT5568g7SUu8mhV1Qc1WYhUmZTUMf3bwUCezHd-xHrP17nz0UaVs_qeUA6fgXeKzQv7mvJ46ATa3XP5V8mPU_C56vawpsF10C2E45fLaFLBz5Wk-8Fdx86B485u4m558DwAA__8LvQQW
·
WARNING: this statement is experimental!

query T
EXPLAIN ANALYZE (DISTSQL) SELECT c.a FROM c INNER MERGE JOIN d ON c.a = d.b
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
·
• merge join
│ actual row count: 2
│ equality: (a) = (b)
│
├── • scan
│     actual row count: 2
│     KV rows read: 2
│     KV bytes read: 16 B
│     estimated row count: 1
│     table: c@primary
│     spans: FULL SCAN
│
└── • scan
      actual row count: 2
      KV rows read: 2
      KV bytes read: 16 B
      missing stats
      table: d@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzEUk1v1DAQvfMrRnMCYdoklThYqrQCBbSFTVBacUE5eO1ha5HEYexIu1rtz-IP8MtQnOUjpRQVDr1l3rw3k_c8e_SfG5R4mb_NX16BPlHwqipXoGFZFHkFq7x6ncNFuSzAQFlEwjmYkzUK7JyhQrXkUX7AFGuBPTtN3jseoX0kLM0WZSLQdv0QRrgWqB0Tyj0GGxpCiVdq3VBFyhCfJijQUFC2iWP1omfbKt6hwMtedV7CMxRYDkHCIkWBb95DsC1JSL5-8cd66BvywKSMhGzC1rvwA0qfwwsUuFZBX5MHN4R-HDduPkq_QxnWB4FTdfx3H9SGUKYH8W_-0rk_c5e_7OH8ZX_099PW0Dk2xGRmlupR-TfKLSGtiDd04WxHfJrNQ2roY3i8SJ8-OWe7uZ4-Z0dAW9JDsK6bZ9WqLbTUOt6BahqnVSAjIYnpjD2vecwIjPWffmf8V35n97mPinzvOk83c7x1cjKGR2ZD02N4N7Cmd-x0XDOVZdRFwJAPUzebimUXW_GAfxWn9xBnN8XZneKzmTg51IdH3wIAAP__L1Fycg==
·
WARNING: this statement is experimental!

statement ok
RESET vectorize; RESET distsql

statement ok
SET tracing=off

# Making sure that colBatchScan operator can parallelize scans.
# This test is similar to that in testplannerlogic/select
statement ok
CREATE TABLE tpar (
    a INT PRIMARY KEY, item STRING, price FLOAT, FAMILY (a, item, price),
    UNIQUE INDEX item (item), UNIQUE INDEX p (price)
)

statement ok
ALTER TABLE tpar SPLIT AT VALUES(5)

# Run a select to prime the range cache to simplify the trace below.
statement ok
SELECT * FROM tpar

# Make sure that the scan actually gets parallelized.
statement ok
SET tracing = on; SELECT * FROM tpar WHERE a = 0 OR a = 10; SET tracing = off

# The span "sending partial batch" means that the scan was parallelized.
# Note that table ID here is hardcoded, so if a new table is created before
# tpar, this query will need an adjustment.
query T
SELECT message FROM [SHOW TRACE FOR SESSION] WHERE message IN
    ('querying next range at /Table/56/1/0',
     'querying next range at /Table/56/1/10',
     '=== SPAN START: kv.DistSender: sending partial batch ==='
    )
----
querying next range at /Table/56/1/0
=== SPAN START: kv.DistSender: sending partial batch ===
querying next range at /Table/56/1/10

# Regression test for #46123 (rowexec.TableReader not implementing
# execinfra.OpNode interface).
statement ok
CREATE TABLE t46123(c0 INT)

query T
EXPLAIN (VEC) SELECT stddev(0) FROM t46123 WHERE ('' COLLATE en)::BOOL
----
│
└ Node 1
  └ *colexec.orderedAggregator
    └ *colexec.distinctChainOps
      └ *colexec.constInt64Op
        └ *rowexec.filtererProcessor
          └ *colfetcher.ColBatchScan

# Regression test for #46122.
statement ok
CREATE TABLE t46122_0(c0 STRING); CREATE TABLE t46122_1(c0 STRING)

query T
EXPLAIN (VEC) SELECT t46122_0.c0 FROM t46122_0, t46122_1
----
│
└ Node 1
  └ *colexec.crossJoiner
    ├ *colfetcher.ColBatchScan
    └ *colfetcher.ColBatchScan

statement ok
CREATE TABLE t46404_0(c0 INT); CREATE TABLE t46404_1(c0 INT)

query T
EXPLAIN (VEC) SELECT stddev((t46404_1.c0 > ANY (0, 0))::INT) FROM t46404_0, t46404_1 GROUP BY t46404_0.rowid
----
│
└ Node 1
  └ *colexec.hashAggregator
    └ *colexec.castBoolInt64Op
      └ *colexec.defaultCmpRConstProjOp
        └ *colexec.crossJoiner
          ├ *colfetcher.ColBatchScan
          └ *colfetcher.ColBatchScan

statement ok
CREATE TABLE xyz (
  x INT,
  y INT,
  z TEXT
)

# Check that we fallback gracefully to row-by-row engine on a join type with
# ON expression that we don't support.
query T
EXPLAIN (VEC) SELECT * FROM xyz AS t1 FULL OUTER JOIN xyz AS t2 ON t1.x = t2.x AND t1.x + t2.x = 0
----
│
└ Node 1
  └ *rowexec.hashJoiner
    ├ *colfetcher.ColBatchScan
    └ *colfetcher.ColBatchScan

# Verify that the vectorized engine is used (there is a mismatch between
# argument type width and the result).
query T
EXPLAIN (VEC) SELECT max(c) FROM a
----
│
└ Node 1
  └ *colexec.orderedAggregator
    └ *colexec.distinctChainOps
      └ *colfetcher.ColBatchScan

# Verify that binary operations on integers of any width return INT8.
statement ok
CREATE TABLE ints (_int2 INT2, _int4 INT4, _int8 INT8);
INSERT INTO ints VALUES (1, 1, 1), (2, 2, 2)

query T
SELECT pg_typeof(_int2 - _int2) FROM ints LIMIT 1
----
bigint

query T
EXPLAIN (VEC) SELECT _int2 * _int2 FROM ints WHERE _int4 + _int4 = _int8 + 2
----
│
└ Node 1
  └ *colexec.projMultInt64Int64Op
    └ *colexec.castInt16Int64Op
      └ *colexec.castInt16Int64Op
        └ *colexec.selEQInt64Int64Op
          └ *colexec.projPlusInt64Int64ConstOp
            └ *colexec.projPlusInt64Int64Op
              └ *colexec.castInt32Int64Op
                └ *colexec.castInt32Int64Op
                  └ *colfetcher.ColBatchScan

query I
SELECT _int2 * _int2 FROM ints WHERE _int4 + _int4 = _int8 + 2
----
4

# Check that joinReader core is wrapped into the plan when vectorize is set to
# `experimental_always` - that core is the only exception to disabling of
# wrapping.

query T
EXPLAIN (VEC) SELECT c.a FROM c JOIN d ON d.b = c.b
----
│
└ Node 1
  └ *rowexec.joinReader
    └ *colfetcher.ColBatchScan

statement ok
SET vectorize = experimental_always

statement ok
SELECT c.a FROM c JOIN d ON d.b = c.b

statement ok
RESET vectorize

statement ok
CREATE TABLE bytes_string(_group INT, _bytes BYTES, _string STRING)

query T
EXPLAIN (VEC) SELECT concat_agg(_bytes), concat_agg(_string) FROM bytes_string GROUP BY _group
----
│
└ Node 1
  └ *colexec.hashAggregator
    └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC) SELECT concat_agg(_bytes), concat_agg(_string) FROM bytes_string
----
│
└ Node 1
  └ *colexec.orderedAggregator
    └ *colexec.distinctChainOps
      └ *colfetcher.ColBatchScan
