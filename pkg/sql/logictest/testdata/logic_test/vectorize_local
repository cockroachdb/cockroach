# LogicTest: local

statement ok
CREATE TABLE a (a INT, b INT, c INT4, PRIMARY KEY (a, b))

statement ok
CREATE TABLE c (a INT, b INT, c INT, d INT, PRIMARY KEY (a, c), INDEX sec (b))

statement ok
CREATE TABLE d (a INT, b INT, PRIMARY KEY (b, a))

statement ok
INSERT INTO a SELECT g//2, g, g FROM generate_series(0,2000) g(g)

statement ok
INSERT INTO c VALUES (1, 1, 1, 0), (2, 1, 2, 0)

statement ok
ALTER TABLE c INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 1,
    "distinct_count": 1
  }
]'

statement ok
INSERT INTO d VALUES (1, 1), (1, 2)

# Test that vectorized stats are collected correctly.
statement ok
SET vectorize = on

statement ok
SET distsql = on

statement ok
SET vectorize_row_count_threshold = 0

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT a FROM a]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkLFOwzAQhneewvonkAw4jJ5aQZAihbY0HYAqg5ucSiQ3DvYFUVV5d5S4AwxIjPfd9599d0L4sNAo0jy934jeW_G4Xj6JbfqyyufZQswX8_z1LRWXD1mxKZ7zK3FWTRRNCYnW1bQwBwrQWyQoJTrvKgrB-RGdJiGrv6CVRNN2PY-4lKicJ-gTuGFL0NiYnaU1mZr8rYJETWwaO43tfHMw_jgzkCg60wYtriGx7FmLWQKJneHqnYJwPXcjHPPcd_YHulNqNANZqrj5bPiohbpRoxnYWCu4OZAWKqAcJGLq_NPAZk_QySD_v82aQufaQL8W-WuyGkoJqvcULxZc7ytaeVdNz8RyOeUmUFPg2E1ikbWxNZTDxXcAAAD__76-lf0=

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT c.a FROM c JOIN d ON d.b = c.b]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJykkt-LEzEQx9_9K8Z5Uoi93T4GhBatsMe6e7YV1GMf0mQ4o2myZrLao_R_l_2BtoJyco_zne93Mp8hR-RvDiVuVuXq1Ra66ODNun4Lt6sPN-WyqGBZLcuPn1bw7HWx2W7elc9hsuqZGq0aruuiAgN1BWa2g5egZ7sGBfpgqFJ7YpS3mGMjsI1BE3OIvXQcDIU5oMwEWt92qZcbgTpEQnnEZJMjlLhVO0drUobiVYYCDSVl3TCWSS80Cty0yrOEq6fV-7J8gQLrLklY5GIxR4E7lfRnYghdanu9H5K61p1JvY3JkU72u033ErJZ1ts4Kecg2T1JyBibk8AxMu3KSd0RyvwkHs5zHayfcPJLnDbavYr3C4MCyxC-di18CdZD8BIGkgnrcUx0IN0lG_xvLoEx_GCIpMyUu-TugQwd4MyV_xIfeKP5_9xoTdwGz3Rxn79Nzk6NQDJ3NP4rDl3UdBODHp4Zy3rIDYIhTmM3H4vCj61-wfNw_s_w_I9wc3ryMwAA__8HPw5w

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT c.a FROM c INNER MERGE JOIN d ON c.a = d.b]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJy8klFr2zAUhd_3Ky73qWVaartvgkLC5g2XxO6cPGwrflCku1SgWJ4kj5aQ_z4sF9aUbCVj9M06Op-sc6526H8Y5LjM5_n7FfTOwMe6WsBt_uVmPitKmJWz-ddvOZx9KJar5ef5OTxa5USMVglFWeY1LPL6Uw7XVVGCgqqMhitQk3WDDFurqBRb8shvMcWGYeesJO-tG6RdNBTqHnnCULddHwa5YSitI-Q7DDoYQo4rsTZUk1DkLhJkqCgIbeKxndNb4R6mEhkuO9F6Du-QYdUHDtMUGa5FkHfkwfahG8SBD31nnkgZMvRkSAb9U4cHDskkGWw-CGMg6C1xSDw2e4Yj8nhNH8SGkKd79m9R0uNR1LEo2atEyf4Y5XeCvrVOkSN1cPtmIF-yHOljQW5D11a35C6ywz4MfQ9n0_Tt-ZXTm7vx83-Nlu5J9kHb9uVOLk8Zb02-s62n590cPTkZCiG1obFgb3sn6cZZGX8zLqvIRUGRD-NuNi6KNm7F9_cUTk-As-dw9lf48gBO9s3-za8AAAD__9VqYx8=

statement ok
RESET vectorize; RESET distsql; RESET vectorize_row_count_threshold

statement ok
SET tracing=off

# Making sure that colBatchScan operator can parallelize scans.
# This test is similar to that in testplannerlogic/select
statement ok
CREATE TABLE tpar (
    a INT PRIMARY KEY, item STRING, price FLOAT, FAMILY (a, item, price),
    UNIQUE INDEX item (item), UNIQUE INDEX p (price)
)

statement ok
ALTER TABLE tpar SPLIT AT VALUES(5)

# Run a select to prime the range cache to simplify the trace below.
statement ok
SELECT * FROM tpar

# Make sure that the scan actually gets parallelized.
statement ok
SET tracing = on; SELECT * FROM tpar WHERE a = 0 OR a = 10; SET tracing = off

# The span "sending partial batch" means that the scan was parallelized.
# Note that table ID here is hardcoded, so if a new table is created before
# tpar, this query will need an adjustment.
query T
SELECT message FROM [SHOW TRACE FOR SESSION] WHERE message IN
    ('querying next range at /Table/56/1/0',
     'querying next range at /Table/56/1/10',
     '=== SPAN START: kv.DistSender: sending partial batch ==='
    )
----
querying next range at /Table/56/1/0
=== SPAN START: kv.DistSender: sending partial batch ===
querying next range at /Table/56/1/10

# Regression test for #46123 (rowexec.TableReader not implementing
# execinfra.OpNode interface).
statement ok
CREATE TABLE t46123(c0 INT)

query T
EXPLAIN (VEC) SELECT stddev(0) FROM t46123 WHERE ('' COLLATE en)::BOOL
----
│
└ Node 1
└ *rowexec.orderedAggregator
  └ *rowexec.tableReader

# Regression test for #46122 (checking that we gracefully fallback to row
# execution on cross joins).
statement ok
CREATE TABLE t46122_0(c0 STRING); CREATE TABLE t46122_1(c0 STRING)

query T
EXPLAIN (VEC) SELECT t46122_0.c0 FROM t46122_0, t46122_1
----
│
└ Node 1
└ *rowexec.hashJoiner
  ├ *colexec.colBatchScan
  └ *colexec.colBatchScan

# Regression test for #46404 (rowexec.noopProcessor not implementing
# execinfra.OpNode interface).
statement ok
CREATE TABLE t46404_0(c0 INT); CREATE TABLE t46404_1(c0 INT)

query T
EXPLAIN (VEC) SELECT stddev((t46404_1.c0 > ANY (0, 0))::INT) FROM t46404_0, t46404_1 GROUP BY t46404_0.rowid
----
│
└ Node 1
└ *rowexec.hashAggregator
  └ *rowexec.noopProcessor
    └ *colexec.hashJoiner
      ├ *colexec.colBatchScan
      └ *colexec.colBatchScan

statement ok
CREATE TABLE xyz (
  x INT,
  y INT,
  z TEXT
)

# Check that we fallback gracefully to row-by-row engine on a join type with
# ON expression that we don't support.
query T
EXPLAIN (VEC) SELECT * FROM xyz AS t1 FULL OUTER JOIN xyz AS t2 ON t1.x = t2.x AND t1.x + t2.x = 0
----
│
└ Node 1
  └ *rowexec.hashJoiner
    ├ *colexec.colBatchScan
    └ *colexec.colBatchScan
