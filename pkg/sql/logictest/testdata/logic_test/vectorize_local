# LogicTest: local

statement ok
CREATE TABLE a (a INT, b INT, c INT4, PRIMARY KEY (a, b))

statement ok
CREATE TABLE c (a INT, b INT, c INT, d INT, PRIMARY KEY (a, c), INDEX sec (b))

statement ok
CREATE TABLE d (a INT, b INT, PRIMARY KEY (b, a))

statement ok
INSERT INTO a SELECT g//2, g, g FROM generate_series(0,2000) g(g)

statement ok
INSERT INTO c VALUES (1, 1, 1, 0), (2, 1, 2, 0)

statement ok
ALTER TABLE c INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 1,
    "distinct_count": 1
  }
]'

statement ok
INSERT INTO d VALUES (1, 1), (1, 2)

# Test that vectorized stats are collected correctly.
statement ok
SET vectorize = on

statement ok
SET distsql = on

statement ok
SET vectorize_row_count_threshold = 0

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT a FROM a]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkE9L80AQxu_vpxie0yuumHjcU4tGCMSmNj2oJYdtMtRAml33D1RKvrsk24MeBI_zm9_MPjtnuI8eElVWZPdbCranx035RLvsZV0s8xUtV8vi9S2j_w95ta2eiyu6qCqKqobAoFteqSM7yB1S1ALG6oad03ZC51nI2xNkItANJvgJ1wKNtgx5hu98z5DYqn3PG1Yt29sEAi171fXzWrUwtjsq-wmByqjBSbqBQBm8pEUKgb3yzTs70sGbCU7zPpj-G7pLksnMS7omPnETfKcH8t2RJSUO9SgQ1Us859WBIdNR_P0LG3ZGD45_pP9tczLWAtweOJ7J6WAbXlvdzM_EspznZtCy87GbxiIfYmusx39fAQAA__9sdZJ3

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT c.a FROM c JOIN d ON d.b = c.b]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkkGP0zAQhe_8itE7gTCl6dESUisoUlYhWdoegFUOrj1aAqkdbEcUVf3vKHEEXRBoe5w3702-PPmE8K2FxHZdrF_vqPctvd1U7-hu_eG2WOUlrcpV8fHTmp6-ybe77fviGU1WPVPJqummyksyVJVkZnt6RXq2ryFgneFSHThA3iFDLdB5pzkE5wfpNBpyc4ScCzS26-Mg1wLaeYY8ITaxZUjs1L7lDSvD_uUcAoajatrxrF4G1hDYdsoGSS8gUPVR0jITywUE9irqzxzI9bEb9CEe-669kAZbXtFz4iPrPjbOUmwOLGkeUJ8Fkm9CC1HdM2R2Fo_Hv3GNneizh_Rm2fnmoPwPCBTOfe07-uIaS85KGvGnf4GAd98DeVYmAYeo2vY35wBg-EgXruyX-Jf3kaVc0cfimj42HDpnAz_o4l-X5-dagM09pycTXO8133qnx8-ksRpzo2A4xLTN0pDbtBoAL8PZf8OLP8L1-cnPAAAA__8TBwMi

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT c.a FROM c INNER MERGE JOIN d ON c.a = d.b]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJy0kl9r2zAUxd_3KS73qaVaa7tvgkLC5g2XxO6cPGwrflCku9TgSJ7-QEfIdx-WC6tL15HA3qyjc-SfztUe3c8OOa7yRf5hDcF28KmulnCff71bzIsS5uV88e17Dmcfi9V69WVxDk9WeSlGq4SiLPMalnn9OYfbqihBQVVGww2oy02DDLVRVIodOeT3mGLDsLdGknPGDtI-Ggr1iDxh2Oo--EFuGEpjCfkefes7Qo5rsemoJqHIXiXIUJEXbRePlbPetjthfyHDVS-04_AeGVbBc5ilyHAjvHwgByb4fhCHvA9990zKkGFRwQXQI8ngW6PBtzvikDhsDgxH3xOb82JLyNMDO40_nfKrt_iz_8ef_ZX_D3bQxiqypCbIzZD8l-WVEpZkt3RrWk32KpuW0NEPfzZLL85vbLt9GD9PGeIR978-Zn41ud5oRy97ePXkZLg8qS2NZToTrKQ7a2T8zbisYi4Kipwfd7NxUei4FR_Y83B6RDh7Gc7eDF9PwsmhObz7HQAA__-4IlXW

statement ok
RESET vectorize; RESET distsql; RESET vectorize_row_count_threshold

statement ok
SET tracing=off

# Making sure that colBatchScan operator can parallelize scans.
# This test is similar to that in testplannerlogic/select
statement ok
CREATE TABLE tpar (
    a INT PRIMARY KEY, item STRING, price FLOAT, FAMILY (a, item, price),
    UNIQUE INDEX item (item), UNIQUE INDEX p (price)
)

statement ok
ALTER TABLE tpar SPLIT AT VALUES(5)

# Run a select to prime the range cache to simplify the trace below.
statement ok
SELECT * FROM tpar

# Make sure that the scan actually gets parallelized.
statement ok
SET tracing = on; SELECT * FROM tpar WHERE a = 0 OR a = 10; SET tracing = off

# The span "sending partial batch" means that the scan was parallelized.
# Note that table ID here is hardcoded, so if a new table is created before
# tpar, this query will need an adjustment.
query T
SELECT message FROM [SHOW TRACE FOR SESSION] WHERE message IN
    ('querying next range at /Table/56/1/0',
     'querying next range at /Table/56/1/10',
     '=== SPAN START: kv.DistSender: sending partial batch ==='
    )
----
querying next range at /Table/56/1/0
=== SPAN START: kv.DistSender: sending partial batch ===
querying next range at /Table/56/1/10

# Regression test for #46123 (rowexec.TableReader not implementing
# execinfra.OpNode interface).
statement ok
CREATE TABLE t46123(c0 INT)

query T
EXPLAIN (VEC) SELECT stddev(0) FROM t46123 WHERE ('' COLLATE en)::BOOL
----
│
└ Node 1
  └ *colexec.orderedAggregator
    └ *colexec.distinctChainOps
      └ *rowexec.tableReader

# Regression test for #46122 (checking that we gracefully fallback to row
# execution on cross joins).
statement ok
CREATE TABLE t46122_0(c0 STRING); CREATE TABLE t46122_1(c0 STRING)

query T
EXPLAIN (VEC) SELECT t46122_0.c0 FROM t46122_0, t46122_1
----
│
└ Node 1
  └ *rowexec.hashJoiner
    ├ *colfetcher.ColBatchScan
    └ *colfetcher.ColBatchScan

statement ok
CREATE TABLE t46404_0(c0 INT); CREATE TABLE t46404_1(c0 INT)

query T
EXPLAIN (VEC) SELECT stddev((t46404_1.c0 > ANY (0, 0))::INT) FROM t46404_0, t46404_1 GROUP BY t46404_0.rowid
----
│
└ Node 1
  └ *colexec.hashAggregator
    └ *colexec.castBoolInt64Op
      └ *colexec.defaultCmpRConstProjOp
        └ *colexec.hashJoiner
          ├ *colfetcher.ColBatchScan
          └ *colfetcher.ColBatchScan

statement ok
CREATE TABLE xyz (
  x INT,
  y INT,
  z TEXT
)

# Check that we fallback gracefully to row-by-row engine on a join type with
# ON expression that we don't support.
query T
EXPLAIN (VEC) SELECT * FROM xyz AS t1 FULL OUTER JOIN xyz AS t2 ON t1.x = t2.x AND t1.x + t2.x = 0
----
│
└ Node 1
  └ *rowexec.hashJoiner
    ├ *colfetcher.ColBatchScan
    └ *colfetcher.ColBatchScan

# Verify that the vectorized engine is used (there is a mismatch between
# argument type width and the result).
query T
EXPLAIN (VEC) SELECT max(c) FROM a
----
│
└ Node 1
  └ *colexec.orderedAggregator
    └ *colexec.distinctChainOps
      └ *colfetcher.ColBatchScan

# Verify that binary operations on integers of any width return INT8.
statement ok
CREATE TABLE ints (_int2 INT2, _int4 INT4, _int8 INT8);
INSERT INTO ints VALUES (1, 1, 1), (2, 2, 2)

query T
SELECT pg_typeof(_int2 - _int2) FROM ints LIMIT 1
----
bigint

query T
EXPLAIN (VEC) SELECT _int2 * _int2 FROM ints WHERE _int4 + _int4 = _int8 + 2
----
│
└ Node 1
  └ *colexec.projMultInt64Int64Op
    └ *colexec.castInt16Int64Op
      └ *colexec.castInt16Int64Op
        └ *colexec.selEQInt64Int64Op
          └ *colexec.projPlusInt64Int64ConstOp
            └ *colexec.projPlusInt64Int64Op
              └ *colexec.castInt32Int64Op
                └ *colexec.castInt32Int64Op
                  └ *colfetcher.ColBatchScan

query I
SELECT _int2 * _int2 FROM ints WHERE _int4 + _int4 = _int8 + 2
----
4

# Check that joinReader core is wrapped into the plan when vectorize is set to
# `experimental_always` - that core is the only exception to disabling of
# wrapping.

query T
EXPLAIN (VEC) SELECT c.a FROM c JOIN d ON d.b = c.b
----
│
└ Node 1
  └ *rowexec.joinReader
    └ *colfetcher.ColBatchScan

statement ok
SET vectorize = experimental_always

statement ok
SELECT c.a FROM c JOIN d ON d.b = c.b

statement ok
RESET vectorize

statement ok
CREATE TABLE bytes_string(_group INT, _bytes BYTES, _string STRING)

query T
EXPLAIN (VEC) SELECT concat_agg(_bytes), concat_agg(_string) FROM bytes_string GROUP BY _group
----
│
└ Node 1
  └ *colexec.hashAggregator
    └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC) SELECT concat_agg(_bytes), concat_agg(_string) FROM bytes_string
----
│
└ Node 1
  └ *colexec.orderedAggregator
    └ *colexec.distinctChainOps
      └ *colfetcher.ColBatchScan
