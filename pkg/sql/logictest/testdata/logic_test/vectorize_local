# LogicTest: local

statement ok
CREATE TABLE a (a INT, b INT, c INT4, PRIMARY KEY (a, b))

statement ok
CREATE TABLE c (a INT, b INT, c INT, d INT, PRIMARY KEY (a, c), INDEX sec (b))

statement ok
CREATE TABLE d (a INT, b INT, PRIMARY KEY (b, a))

statement ok
INSERT INTO a SELECT g//2, g, g FROM generate_series(0,2000) g(g)

statement ok
INSERT INTO c VALUES (1, 1, 1, 0), (2, 1, 2, 0)

statement ok
ALTER TABLE c INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 1,
    "distinct_count": 1
  }
]'

statement ok
INSERT INTO d VALUES (1, 1), (1, 2)

# Test that vectorized stats are collected correctly.
statement ok
SET vectorize = on

statement ok
SET distsql = on

statement ok
SET vectorize_row_count_threshold = 0

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT a FROM a]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkEFL60AUhffvV1zO6j2Yh4kLF7Nq1Qihsa1NEbVkMU0uNZBmxpkJWEr-uyQTBReCy_Pdc8_l3DPcWwOJPMmSmy11tqG7zeqedsnTOpunS5ov59nzS0J_b9N8mz9k_2iyqmBUBQRaXfFSHdlB7hCjEDBWl-yctgM6j4a0eoeMBOrWdH7AhUCpLUOe4WvfMCS2at_whlXF9iKCQMVe1c0Yq2bG1kdlTxDIjWqdpP8QWHVe0iyGwOKRfH1kSZGbVGcadmRZVZIuo2gy7U_-i8ZXtKivIbBXvnxlR7rzZkgcjk_7n2hMKHqBAKYGzqsDQ8a9-H3LDTujW8ffCv6UHPWFAFcHDp90urMlr60uxzNBrsa9EVTsfJjGQaRtGPVF_-cjAAD___JWm9M=

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT c.a FROM c JOIN d ON d.b = c.b]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkkGP0zAQhe_8itE7gWRK0wMHS0gtUKQuIVnaCgGrHBx7tATSONiOtKuq_x0lNmh3oQiO8zxvZr4nH-G_t5DYrfP1qz0NrqU32_IdXa0_XuarTUGrYpV_-rymx683u_3uff6EUqueqdiq6aLcFGSoLMjManpBelZXEOis4UId2ENeIUMl0Dur2XvrRuk4NWzMDeRcoOn6IYxyJaCtY8gjQhNahsRe1S1vWRl2z-YQMBxU005j9dKzhsCuV52X9BQC5RAkLTOxXEDg7QcKzYElzX2qhr5lT46VkZQ66tvwS8qe00sI1CroL-zJDqEf541rk_WntEB1EohVOtwHdc2Q2Un8O9yFbbrElt1nM8veNQflbiGQW_tt6OmrbTqynaQJLpEiLUhsESsqPqi2fZjA-TyyP1EK8A3rITS2u-v9PaFzcSz-J44t-952nu9FcW7y_FQJsLnm-J-8HZzmS2f1tCaW5eSbBMM-xNcsFpsuPo0H3jVnfzUvHpir06MfAQAA__-JZQqT

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT c.a FROM c INNER MERGE JOIN d ON c.a = d.b]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzEUsFu00AQvfMVozm1YmltV-KwUqUEMMglsYsTIaDyYbM7pBa21-yupURR_h15HaAupShw4OZ5896M39vZof1aIcdFPItfLqEzFbzOszncxB-uZ9MkhWk6nX38FMPJq2SxXLybncKBKs_EQJWQpGmcwzzO38RwlSUpKMhST7gEdbYqkGGjFaWiJov8BkMsGLZGS7JWmx7aeUKiNsgDhmXTdq6HC4ZSG0K-Q1e6ipDjUqwqykkoMucBMlTkRFn5sXLSmrIWZosMF61oLIdnyDDrHIdJiAzfvgdX1sQhsIeqayuyYEgoDtGArbbuBxQ-hxfIcCWcvCULunNtP6zfe5B-hyIs9gyH6vDn1ok1IQ_37O_chWN36jF30f9yF_3W3U9TXaONIkNqZKjolX-iPBDRnMyarnTZkDmPxhFV9NmdTMKnp5emXN8On6MDoA3JzpW6uZtULTZQU63NFkRVaSkcKQ6Bz6bvWWn6hECV9suvjH9K7-KY28jJtrqxdD_FBycHfXSk1jQ8hdWdkXRttPRrhjLzOg8osm7oRkORNL7lj_euODxCHN0XR4-KL0biYF_sn3wLAAD__xHsemY=

statement ok
RESET vectorize; RESET distsql; RESET vectorize_row_count_threshold

statement ok
SET tracing=off

# Making sure that colBatchScan operator can parallelize scans.
# This test is similar to that in testplannerlogic/select
statement ok
CREATE TABLE tpar (
    a INT PRIMARY KEY, item STRING, price FLOAT, FAMILY (a, item, price),
    UNIQUE INDEX item (item), UNIQUE INDEX p (price)
)

statement ok
ALTER TABLE tpar SPLIT AT VALUES(5)

# Run a select to prime the range cache to simplify the trace below.
statement ok
SELECT * FROM tpar

# Make sure that the scan actually gets parallelized.
statement ok
SET tracing = on; SELECT * FROM tpar WHERE a = 0 OR a = 10; SET tracing = off

# The span "sending partial batch" means that the scan was parallelized.
# Note that table ID here is hardcoded, so if a new table is created before
# tpar, this query will need an adjustment.
query T
SELECT message FROM [SHOW TRACE FOR SESSION] WHERE message IN
    ('querying next range at /Table/56/1/0',
     'querying next range at /Table/56/1/10',
     '=== SPAN START: kv.DistSender: sending partial batch ==='
    )
----
querying next range at /Table/56/1/0
=== SPAN START: kv.DistSender: sending partial batch ===
querying next range at /Table/56/1/10

# Regression test for #46123 (rowexec.TableReader not implementing
# execinfra.OpNode interface).
statement ok
CREATE TABLE t46123(c0 INT)

query T
EXPLAIN (VEC) SELECT stddev(0) FROM t46123 WHERE ('' COLLATE en)::BOOL
----
│
└ Node 1
  └ *colexec.orderedAggregator
    └ *colexec.distinctChainOps
      └ *rowexec.tableReader

# Regression test for #46122 (checking that we gracefully fallback to row
# execution on cross joins).
statement ok
CREATE TABLE t46122_0(c0 STRING); CREATE TABLE t46122_1(c0 STRING)

query T
EXPLAIN (VEC) SELECT t46122_0.c0 FROM t46122_0, t46122_1
----
│
└ Node 1
  └ *rowexec.hashJoiner
    ├ *colfetcher.ColBatchScan
    └ *colfetcher.ColBatchScan

statement ok
CREATE TABLE t46404_0(c0 INT); CREATE TABLE t46404_1(c0 INT)

query T
EXPLAIN (VEC) SELECT stddev((t46404_1.c0 > ANY (0, 0))::INT) FROM t46404_0, t46404_1 GROUP BY t46404_0.rowid
----
│
└ Node 1
  └ *colexec.hashAggregator
    └ *colexec.castBoolInt64Op
      └ *colexec.defaultCmpRConstProjOp
        └ *colexec.hashJoiner
          ├ *colfetcher.ColBatchScan
          └ *colfetcher.ColBatchScan

statement ok
CREATE TABLE xyz (
  x INT,
  y INT,
  z TEXT
)

# Check that we fallback gracefully to row-by-row engine on a join type with
# ON expression that we don't support.
query T
EXPLAIN (VEC) SELECT * FROM xyz AS t1 FULL OUTER JOIN xyz AS t2 ON t1.x = t2.x AND t1.x + t2.x = 0
----
│
└ Node 1
  └ *rowexec.hashJoiner
    ├ *colfetcher.ColBatchScan
    └ *colfetcher.ColBatchScan

# Verify that the vectorized engine is used (there is a mismatch between
# argument type width and the result).
query T
EXPLAIN (VEC) SELECT max(c) FROM a
----
│
└ Node 1
  └ *colexec.orderedAggregator
    └ *colexec.distinctChainOps
      └ *colfetcher.ColBatchScan

# Verify that binary operations on integers of any width return INT8.
statement ok
CREATE TABLE ints (_int2 INT2, _int4 INT4, _int8 INT8);
INSERT INTO ints VALUES (1, 1, 1), (2, 2, 2)

query T
SELECT pg_typeof(_int2 - _int2) FROM ints LIMIT 1
----
bigint

query T
EXPLAIN (VEC) SELECT _int2 * _int2 FROM ints WHERE _int4 + _int4 = _int8 + 2
----
│
└ Node 1
  └ *colexec.projMultInt64Int64Op
    └ *colexec.castInt16Int64Op
      └ *colexec.castInt16Int64Op
        └ *colexec.selEQInt64Int64Op
          └ *colexec.projPlusInt64Int64ConstOp
            └ *colexec.projPlusInt64Int64Op
              └ *colexec.castInt32Int64Op
                └ *colexec.castInt32Int64Op
                  └ *colfetcher.ColBatchScan

query I
SELECT _int2 * _int2 FROM ints WHERE _int4 + _int4 = _int8 + 2
----
4

# Check that joinReader core is wrapped into the plan when vectorize is set to
# `experimental_always` - that core is the only exception to disabling of
# wrapping.

query T
EXPLAIN (VEC) SELECT c.a FROM c JOIN d ON d.b = c.b
----
│
└ Node 1
  └ *rowexec.joinReader
    └ *colfetcher.ColBatchScan

statement ok
SET vectorize = experimental_always

statement ok
SELECT c.a FROM c JOIN d ON d.b = c.b

statement ok
RESET vectorize

statement ok
CREATE TABLE bytes_string(_group INT, _bytes BYTES, _string STRING)

query T
EXPLAIN (VEC) SELECT concat_agg(_bytes), concat_agg(_string) FROM bytes_string GROUP BY _group
----
│
└ Node 1
  └ *colexec.hashAggregator
    └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC) SELECT concat_agg(_bytes), concat_agg(_string) FROM bytes_string
----
│
└ Node 1
  └ *colexec.orderedAggregator
    └ *colexec.distinctChainOps
      └ *colfetcher.ColBatchScan
