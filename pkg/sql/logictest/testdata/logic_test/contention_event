# LogicTest: 5node-pretend59315IsFixed
#
# Verify that ContentionEvents are emitted. This is mostly a sanity check - look
# for the datadriven tests in `pkg/kv/kvserver/concurrency` for the actual events
# that do get emitted in various contention scenarios.

statement ok
GRANT ADMIN TO testuser

statement ok
CREATE TABLE kv (k VARCHAR PRIMARY KEY, v VARCHAR);
ALTER TABLE kv SPLIT AT VALUES ('b'), ('d'), ('q'), ('z')

query TT
SELECT * FROM kv
----

user testuser

statement ok
BEGIN

statement ok
INSERT INTO kv VALUES('k', 'v')

user root

# Scan all ranges of the table (note that we have intentionally
# split it into at least six ranges). This is better than a point
# lookup in that it gives tracing more of a chance to get things
# wrong due to DistSender parallelism.
statement ok
BEGIN;
SET TRANSACTION PRIORITY HIGH;
SELECT * FROM kv

user testuser

statement ok
ROLLBACK

user root

# Check that there is at least 1 contention event payload in all spans in the
# open trace.
#
# NB: the contention event is not in our trace span but in one of its
# children, so it wouldn't be found if we filtered by the trace span ID.
#
# NB: this needs the 5node-pretend59315 config because otherwise the span is not
# tracked.
query T
WITH spans AS (
  SELECT span_id
  FROM crdb_internal.node_inflight_trace_spans
  WHERE trace_id = crdb_internal.trace_id()
), payloads AS (
  SELECT *
  FROM spans, LATERAL crdb_internal.payloads_for_span(spans.span_id)
) SELECT
  -- Strip the first prefix because we don't want to have this test
  -- become sensitive to changes in descriptor ID allocation.
  crdb_internal.pretty_key(decode(payload_jsonb->>'key', 'base64'), 1)
  FROM payloads
  WHERE payload_type = 'roachpb.ContentionEvent'
  LIMIT 1
----
/1/"k"/0

let $curr_trace_id
SELECT * FROM crdb_internal.trace_id()

# SHOW PAYLOADS FOR TRACE is syntactic sugar for most of the above statement.
query ITT
SHOW PAYLOADS FOR TRACE curr_trace_id
----
