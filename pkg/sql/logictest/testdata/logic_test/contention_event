# LogicTest: 5node-pretend59315IsFixed
#
# Verify that ContentionEvents are emitted. This is mostly a sanity check - look
# for the datadriven tests in `pkg/kv/kvserver/concurrency` for the actual events
# that do get emitted in various contention scenarios.

statement ok
GRANT ADMIN TO testuser

statement ok
CREATE TABLE kv (k VARCHAR PRIMARY KEY, v VARCHAR);
ALTER TABLE kv SPLIT AT VALUES ('b'), ('d'), ('q'), ('z');

query TT
SELECT * FROM kv
----

user testuser

statement ok
BEGIN;

statement ok
INSERT INTO kv VALUES('k', 'v')

user root

# Scan all ranges of the table (note that we have intentionally
# split it into at least six ranges). This is better than a point
# lookup in that it gives tracing more of a chance to get things
# wrong due to DistSender parallelism.
statement ok
BEGIN;
SET TRANSACTION PRIORITY HIGH;
SELECT * FROM kv;

user testuser

statement ok
ROLLBACK

user root

# Check that the number of payloads in the open trace is at least 1.
# TODO(angelapwen): when we have a way to pull particular payloads for
# a trace, we should verify that we're seeing the right contention event.
# As is, the payloads could be something else (though we verified manually
# and there is a contention event).
#
# NB: the contention event is not in our trace span but in one of its
# children, so it wouldn't be found if we filtered by the trace span ID.
#
# NB: this needs the 5node-pretend59315 config because otherwise the span is not
# tracked.
query B
SELECT count(num_payloads) > 0 FROM crdb_internal.node_inflight_trace_spans WHERE trace_id = crdb_internal.trace_id();
----
true
