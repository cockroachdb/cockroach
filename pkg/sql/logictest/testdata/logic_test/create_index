statement ok
CREATE TABLE t (
  a INT PRIMARY KEY,
  b INT,
  FAMILY (a),
  FAMILY (b)
)

statement ok
INSERT INTO t VALUES (1,1)

user root

statement ok
CREATE INDEX foo ON t (b)

statement error pgcode 42P07 index with name \"foo\" already exists
CREATE INDEX foo ON t (a)

statement error column "c" does not exist
CREATE INDEX bar ON t (c)

statement error index \"bar\" contains duplicate column \"b\"
CREATE INDEX bar ON t (b, b);

query TTBITTBB colnames
SHOW INDEXES FROM t
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit
t           foo         true        1             b            ASC        false    false
t           foo         true        2             a            ASC        false    true
t           t_pkey      false       1             a            ASC        false    false
t           t_pkey      false       2             b            N/A        true     false

statement ok
INSERT INTO t VALUES (2,1)

statement error pgcode 23505 violates unique constraint "bar"
CREATE UNIQUE INDEX bar ON t (b)

query TTBITTBB colnames
SHOW INDEXES FROM t
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit
t           foo         true        1             b            ASC        false    false
t           foo         true        2             a            ASC        false    true
t           t_pkey      false       1             a            ASC        false    false
t           t_pkey      false       2             b            N/A        true     false

# test for DESC index

statement ok
DROP TABLE t

statement ok
CREATE TABLE t (
  a INT PRIMARY KEY,
  b INT,
  c INT
)

statement ok
INSERT INTO t VALUES (1,1,1), (2,2,2)

statement ok
CREATE INDEX b_desc ON t (b DESC)

statement ok
CREATE INDEX b_asc ON t (b ASC, c DESC)

query TTBITTBB colnames
SHOW INDEXES FROM t
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit
t           b_asc       true        1             b            ASC        false    false
t           b_asc       true        2             c            DESC       false    false
t           b_asc       true        3             a            ASC        false    true
t           b_desc      true        1             b            DESC       false    false
t           b_desc      true        2             a            ASC        false    true
t           t_pkey      false       1             a            ASC        false    false
t           t_pkey      false       2             b            N/A        true     false
t           t_pkey      false       3             c            N/A        true     false

statement error pgcode 42P01 relation "foo" does not exist
CREATE INDEX fail ON foo (b DESC)

statement ok
CREATE VIEW v AS SELECT a,b FROM t

statement error pgcode 42809 "v" is not a table or materialized view
CREATE INDEX failview ON v (b DESC)

statement ok
CREATE TABLE privs (a INT PRIMARY KEY, b INT)

user testuser

statement error user testuser does not have CREATE privilege on relation privs
CREATE INDEX foo ON privs (b)

user root

query TTBITTBB colnames
SHOW INDEXES FROM privs
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit
privs       privs_pkey  false       1             a            ASC        false    false
privs       privs_pkey  false       2             b            N/A        true     false

statement ok
GRANT CREATE ON privs TO testuser

user testuser

statement ok
CREATE INDEX foo ON privs (b)

query TTBITTBB colnames
SHOW INDEXES FROM privs
----
table_name  index_name  non_unique  seq_in_index  column_name  direction  storing  implicit
privs       foo         true        1             b            ASC        false    false
privs       foo         true        2             a            ASC        false    true
privs       privs_pkey  false       1             a            ASC        false    false
privs       privs_pkey  false       2             b            N/A        true     false


user root

statement ok
SET experimental_enable_hash_sharded_indexes = true;
CREATE TABLE telemetry (
  x INT PRIMARY KEY,
  y INT,
  z JSONB
)

statement ok
CREATE INVERTED INDEX ON telemetry (z);
CREATE INDEX ON telemetry (y) USING HASH WITH BUCKET_COUNT = 4

query T rowsort
SELECT feature_name FROM crdb_internal.feature_usage
WHERE feature_name IN (
  'sql.schema.inverted_index',
  'sql.schema.hash_sharded_index'
)
----
sql.schema.inverted_index
sql.schema.hash_sharded_index

subtest create_index_concurrently

statement ok
CREATE TABLE create_index_concurrently_tbl (a int)

query T noticetrace
CREATE INDEX CONCURRENTLY create_index_concurrently_idx ON create_index_concurrently_tbl(a)
----
NOTICE: CONCURRENTLY is not required as all indexes are created concurrently

query T noticetrace
CREATE INDEX CONCURRENTLY IF NOT EXISTS create_index_concurrently_idx ON create_index_concurrently_tbl(a)
----

query TT
SHOW CREATE TABLE create_index_concurrently_tbl
----
create_index_concurrently_tbl  CREATE TABLE public.create_index_concurrently_tbl (
                               a INT8 NULL,
                               rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
                               CONSTRAINT create_index_concurrently_tbl_pkey PRIMARY KEY (rowid ASC),
                               INDEX create_index_concurrently_idx (a ASC),
                               FAMILY "primary" (a, rowid)
)

query T noticetrace
DROP INDEX CONCURRENTLY create_index_concurrently_idx
----
NOTICE: CONCURRENTLY is not required as all indexes are dropped concurrently
NOTICE: the data for dropped indexes is reclaimed asynchronously
HINT: The reclamation delay can be customized in the zone configuration for the table.

query T noticetrace
DROP INDEX CONCURRENTLY IF EXISTS create_index_concurrently_idx
----
NOTICE: CONCURRENTLY is not required as all indexes are dropped concurrently

query TT
SHOW CREATE TABLE create_index_concurrently_tbl
----
create_index_concurrently_tbl  CREATE TABLE public.create_index_concurrently_tbl (
                               a INT8 NULL,
                               rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
                               CONSTRAINT create_index_concurrently_tbl_pkey PRIMARY KEY (rowid ASC),
                               FAMILY "primary" (a, rowid)
)

statement ok
DROP TABLE create_index_concurrently_tbl

# Test that creating an index on a column which is currently being dropped
# causes an error.
subtest create_index_on_dropping_column

statement ok
CREATE TABLE create_idx_drop_column (c0 INT PRIMARY KEY, c1 INT);

statement ok
begin; ALTER TABLE create_idx_drop_column DROP COLUMN c1;

statement error column "c1" does not exist
CREATE INDEX idx_create_idx_drop_column ON create_idx_drop_column (c1);

statement ok
ROLLBACK;

statement ok
DROP TABLE create_idx_drop_column;

subtest names-with-escaped-chars

# Similarly try using special characters making an index for a new table, we
# will attempt to recreate it and expect the look up to find the old one.
statement ok
CREATE TABLE "'t1-esc'"(name int);

statement ok
CREATE INDEX "'t1-esc-index'" ON "'t1-esc'"(name)

statement error index with name "'t1-esc-index'" already exists
CREATE INDEX "'t1-esc-index'" ON "'t1-esc'"(name)

subtest resume-with-diff-tenant-resume-spans

let $schema_changer_state
SELECT value FROM information_schema.session_variables where variable='experimental_use_new_schema_changer'

# Intentionally, disable the declarative schema changer for this
# part of the test, since we are pausing jobs intentionally below.
statement ok
SET experimental_use_new_schema_changer = 'off'

statement ok
SET CLUSTER SETTING jobs.registry.interval.adopt = '50ms';

# Lower the job registry loop interval to accelerate the test.
statement ok
SET CLUSTER SETTING jobs.registry.interval.cancel = '50ms'

statement ok
SET CLUSTER SETTING jobs.registry.interval.cancel = '50ms';

statement ok
SET CLUSTER SETTING jobs.debug.pausepoints = 'indexbackfill.before_flow';

statement ok
CREATE TABLE tbl (i INT PRIMARY KEY, j INT NOT NULL);

statement ok
INSERT INTO tbl VALUES (1, 100), (2, 200), (3, 300);

statement error job .* was paused before it completed with reason: pause point "indexbackfill.before_flow" hit
CREATE INDEX pauseidx ON tbl(j);

# clear the pause point now that the job is paused.
statement ok
RESET CLUSTER SETTING jobs.debug.pausepoints 

# while the backfill is paused, go in and replace the resume spans with some new
# spans that both the wrong tenant ID or no tenant ID before resuming it to make
# sure that on resume it re-keys the spans correctly. We pretty_key these below
# to confirm/show what is in them.
statement ok 
UPDATE system.jobs 
  SET payload = crdb_internal.json_to_pb(
    'cockroach.sql.jobs.jobspb.Payload',
      json_set(
        crdb_internal.pb_to_json('cockroach.sql.jobs.jobspb.Payload', payload), 
        ARRAY['schemaChange', 'resumeSpanList', '0'], 
        '{"resumeSpans": [{"key": "/u/IiQ==", "endKey": "/u/Iiew="}, {"key": "yIns", "endKey" : "yIo="}]}'::jsonb
      )
    )
WHERE crdb_internal.pb_to_json('cockroach.sql.jobs.jobspb.Payload', payload)->>'description' LIKE 'CREATE INDEX pauseidx%';

# confirm we see these bogus start and end keys in the job, both for the wrong
# tenant and for no tenant.
query TTTT
SELECT 
  crdb_internal.pretty_key(decode(j->'schemaChange'->'resumeSpanList'->0->'resumeSpans'->0->>'key', 'base64'), 0),
  crdb_internal.pretty_key(decode(j->'schemaChange'->'resumeSpanList'->0->'resumeSpans'->0->>'endKey', 'base64'), 0),
  crdb_internal.pretty_key(decode(j->'schemaChange'->'resumeSpanList'->0->'resumeSpans'->1->>'key', 'base64'), 0),
  crdb_internal.pretty_key(decode(j->'schemaChange'->'resumeSpanList'->0->'resumeSpans'->1->>'endKey', 'base64'), 0)
FROM (
  SELECT crdb_internal.pb_to_json('cockroach.sql.jobs.jobspb.Payload', payload) j FROM system.jobs 
) WHERE j->>'description' LIKE 'CREATE INDEX pauseidx%';
----
/103/Table/64/1   /103/Table/64/1/100   /64/1/100   /64/2

# resume the job and ensure it completes, which includes validation.
statement ok 
RESUME JOB (SELECT job_id FROM crdb_internal.jobs WHERE description LIKE 'CREATE INDEX pauseidx%');

query T
SELECT status FROM [SHOW JOB WHEN COMPLETE (SELECT job_id FROM crdb_internal.jobs WHERE description LIKE 'CREATE INDEX pauseidx%')];
----
succeeded

statement ok
SET CLUSTER SETTING jobs.registry.interval.cancel = DEFAULT;

# Restore the schema changer state back.
statement ok
SET experimental_use_new_schema_changer = $schema_changer_state
