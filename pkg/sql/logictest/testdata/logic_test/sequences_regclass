# Test that sequences referenced via their IDs are printed properly.
subtest show_sequences

statement ok
CREATE SEQUENCE test_seq

let $test_seq_id
SELECT 'test_seq'::regclass::int

statement ok
CREATE TABLE test_table (a INT NOT NULL DEFAULT nextval($test_seq_id::regclass))

query TT
SHOW CREATE TABLE test_table
----
test_table  CREATE TABLE public.test_table (
              a INT8 NOT NULL DEFAULT nextval('test.public.test_seq':::STRING),
              FAMILY "primary" (a, rowid)
)


# Test that sequences created by SERIAL are referenced
# via their IDs and are displayed properly.
subtest serial_sequences

statement ok
SET serial_normalization = 'sql_sequence'

statement ok
CREATE TABLE foo (i SERIAL PRIMARY KEY)

statement ok
ALTER TABLE foo ADD COLUMN bar SERIAL

query TT
SHOW CREATE TABLE foo
----
foo  CREATE TABLE public.foo (
     i INT8 NOT NULL DEFAULT nextval('test.public.foo_i_seq':::STRING),
     bar INT8 NOT NULL DEFAULT nextval('test.public.foo_bar_seq':::STRING),
     CONSTRAINT "primary" PRIMARY KEY (i ASC),
     FAMILY "primary" (i, bar)
)


# Test that references are still correctly created for
# sequences referenced via their IDs.
subtest sequence_references

statement ok
SET serial_normalization = 'sql_sequence'

statement ok
CREATE SEQUENCE dep_seq

let $dep_seq_id
SELECT 'dep_seq'::regclass::int

statement ok
CREATE TABLE seq_table (i SERIAL PRIMARY KEY, j INT NOT NULL DEFAULT nextval($dep_seq_id::regclass))

query TT
SELECT pg_get_serial_sequence('seq_table', 'i'), pg_get_serial_sequence('seq_table', 'j')
----
public.seq_table_i_seq  public.dep_seq


# Test that sequences referenced only by their IDs can be renamed,
# but sequences referenced by name cannot be renamed.
subtest sequence_renames

statement ok
SET serial_normalization = 'sql_sequence'

statement ok
CREATE TABLE bar (i SERIAL PRIMARY KEY, j INT NOT NULL DEFAULT nextval($test_seq_id::regclass), FAMILY (i, j))

statement ok
ALTER SEQUENCE bar_i_seq RENAME TO new_bar_seq

statement ok
ALTER SEQUENCE test_seq RENAME TO seq

query TT
SHOW CREATE TABLE bar
----
bar  CREATE TABLE public.bar (
     i INT8 NOT NULL DEFAULT nextval('test.public.new_bar_seq':::STRING),
     j INT8 NOT NULL DEFAULT nextval('test.public.seq':::STRING),
     CONSTRAINT "primary" PRIMARY KEY (i ASC),
     FAMILY fam_0_i_j (i, j)
)

statement ok
CREATE TABLE baz (i INT NOT NULL DEFAULT nextval('seq'))

statement error pq: cannot rename relation "seq" because view "baz" depends on it
ALTER SEQUENCE seq RENAME TO new_seq


# Test that databases with sequences referenced only by
# their IDs can be renamed, but databases with sequences
# referenced by name name still cannot be renamed.
subtest database_renames

statement ok
SET serial_normalization = 'sql_sequence'

statement ok
CREATE DATABASE other_db

statement ok
CREATE SEQUENCE other_db.s

let $s_id
SELECT 'other_db.s'::regclass::int

statement ok
CREATE TABLE other_db.t (i SERIAL PRIMARY KEY, j INT NOT NULL DEFAULT nextval($s_id::regclass))

statement ok
ALTER DATABASE other_db RENAME TO new_other_db

statement ok
CREATE TABLE new_other_db.tb (i INT NOT NULL DEFAULT nextval('new_other_db.s'))

statement error cannot rename database because relation "new_other_db.public.tb" depends on relation "new_other_db.public.s"
ALTER DATABASE new_other_db RENAME TO newer_other_db


# Test that sequences referenced only by their IDs can change schemas,
# but sequences referenced by name still cannot change their schemas.
subtest alter_sequence_schema

statement ok
SET serial_normalization = 'sql_sequence'

statement ok
CREATE SEQUENCE s

statement ok
CREATE SCHEMA test_schema

let $s_id
SELECT 's'::regclass::int

statement ok
CREATE TABLE tb (i SERIAL PRIMARY KEY, j INT NOT NULL DEFAULT nextval($s_id::regclass), FAMILY (i, j))

statement ok
ALTER SEQUENCE s SET SCHEMA test_schema

statement ok
ALTER SEQUENCE tb_i_seq SET SCHEMA test_schema

statement ok
CREATE TABLE tb2 (j INT NOT NULL DEFAULT nextval('test_schema.s'))

statement error cannot set schema on relation "s" because view "tb2" depends on it
ALTER SEQUENCE test_schema.s SET SCHEMA public
