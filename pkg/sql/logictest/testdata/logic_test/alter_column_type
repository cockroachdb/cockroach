# A basic sanity check to demonstrate column type changes.
subtest SanityCheck

statement ok
CREATE TABLE t (s STRING, sl STRING(5), t TIME, ts TIMESTAMP)

statement ok
SET TIME ZONE 'Europe/Amsterdam'

statement ok
INSERT INTO t VALUES ('some string', 'short', TIME '20:16:27', '2018-05-23 20:16:27.658082')

query TTTT
SELECT * FROM t
----
some string  short  0000-01-01 20:16:27 +0000 UTC  2018-05-23 20:16:27.658082 +0000 +0000

# Not using TIMETZ until #26074 and #25224 are resolved.
statement ok
ALTER TABLE t ALTER s TYPE STRING, ALTER sl TYPE STRING(6), ALTER ts TYPE TIMESTAMPTZ

query TTBTTTB colnames
SHOW COLUMNS FROM t
----
column_name  data_type    is_nullable  column_default  generation_expression  indices    is_hidden
s            STRING       true         NULL            ·                      {}         false
sl           STRING(6)    true         NULL            ·                      {}         false
t            TIME         true         NULL            ·                      {}         false
ts           TIMESTAMPTZ  true         NULL            ·                      {}         false
rowid        INT8         false        unique_rowid()  ·                      {primary}  true

query TTTT
SELECT * FROM t
----
some string  short  0000-01-01 20:16:27 +0000 UTC  2018-05-23 22:16:27.658082 +0200 CEST

statement ok
DROP TABLE t


# Demonstrate manual flow for non-trivial column change
subtest ManualGeneralChange

statement ok
CREATE TABLE t (a INT PRIMARY KEY, b STRING, FAMILY "primary" (a, b))

statement ok
CREATE INDEX idx ON t (b)

statement ok
INSERT INTO t VALUES (1, '01'), (2, '002'), (3, '0003')

query IT colnames
SELECT * from t ORDER BY b DESC
----
a  b
1  01
2  002
3  0003

statement ok
ALTER TABLE t ADD COLUMN i INT as (b::INT) STORED

statement ok
CREATE INDEX idx2 ON t (i)

statement ok
ALTER TABLE t ALTER COLUMN i DROP STORED, DROP COLUMN b CASCADE

query TT colnames
show create table t
----
table_name  create_statement
t           CREATE TABLE public.t (
            a INT8 NOT NULL,
            i INT8 NULL,
            CONSTRAINT "primary" PRIMARY KEY (a ASC),
            INDEX idx2 (i ASC),
            FAMILY "primary" (a, i)
)

statement ok
ALTER TABLE t RENAME COLUMN i TO b

statement ok
ALTER INDEX idx2 RENAME TO idx

query II colnames
SELECT * from t ORDER BY b DESC
----
a  b
3  3
2  2
1  1

statement ok
DROP TABLE t CASCADE


# Demonstrate that we can change to an alias of a type
subtest ChangeVisibleColumnType

statement ok
CREATE TABLE t (a INT)

query TTBTTTB colnames
SHOW COLUMNS FROM t
----
column_name  data_type  is_nullable  column_default  generation_expression  indices    is_hidden
a            INT8       true         NULL            ·                      {}         false
rowid        INT8       false        unique_rowid()  ·                      {primary}  true

statement ok
ALTER TABLE t ALTER a TYPE INTEGER

query TTBTTTB colnames
SHOW COLUMNS FROM t
----
column_name  data_type  is_nullable  column_default  generation_expression  indices    is_hidden
a            INT8       true         NULL            ·                      {}         false
rowid        INT8       false        unique_rowid()  ·                      {primary}  true

statement ok
DROP TABLE t


# Verify error handling when a bad COLLATE is used
subtest BadStringLocale

statement ok
CREATE TABLE t (s STRING)

statement error pq: invalid locale bad_locale
ALTER TABLE t ALTER s TYPE STRING COLLATE bad_locale

statement ok
DROP TABLE t


# Verify error handling when a silly COLLATE is used
subtest BadCollateOnNotString

statement ok
CREATE TABLE t (i INT)

statement error pq: COLLATE can only be used with string types
ALTER TABLE t ALTER i TYPE INT COLLATE nope

statement ok
DROP TABLE t


# Verify that making a no-op change is ok
subtest NoOpColumnChange

statement ok
CREATE TABLE t (s STRING)

statement ok
ALTER TABLE t ALTER s TYPE STRING

statement ok
DROP TABLE t

subtest alter_column_type_general

# Check that alter column general is disabled by default.
statement ok
CREATE TABLE t1 (date string)

statement ok
INSERT INTO t1 VALUES ('hello')

statement error pq: ALTER COLUMN TYPE from string to timestamp is only supported experimentally
ALTER TABLE t1 ALTER COLUMN date TYPE timestamp

# After setting enable_experimental_alter_column_type_general, ALTER COLUMN TYPE should work.
statement ok
SET enable_experimental_alter_column_type_general = true

statement error pq: parsing as type timestamp: could not parse "hello"
ALTER TABLE t1 ALTER COLUMN date TYPE timestamp

# Verify ALTER COLUMN TYPE from INT to STRING works correctly.
statement ok
CREATE TABLE t2 (id int)

statement ok
INSERT INTO t2 VALUES (1), (2), (3), (4)

statement ok
ALTER TABLE t2 ALTER COLUMN id TYPE STRING

query TTBTTTB
SHOW COLUMNS FROM t2
----
id     STRING  true   NULL            ·  {}         false
rowid  INT8    false  unique_rowid()  ·  {primary}  true

statement ok
INSERT INTO t2 VALUES ('5')

statement error pq: value type int doesn't match type string of column "id"
INSERT INTO t2 VALUES (6)

# Verify ALTER COLUMN TYPE from INT to STRING works correctly.
# Column order should stay the same.
statement ok
CREATE TABLE t3 (id int, id2 int, id3 int)

statement ok
INSERT INTO t3 VALUES (1,1,1), (2,2,2), (3,3,3)

statement ok
ALTER TABLE t3 ALTER COLUMN id2 TYPE string

query TTBTTTB
SHOW COLUMNS FROM t3
----
id     INT8    true   NULL            ·  {}         false
id2    STRING  true   NULL            ·  {}         false
id3    INT8    true   NULL            ·  {}         false
rowid  INT8    false  unique_rowid()  ·  {primary}  true

statement ok
INSERT INTO t3 VALUES (4,'4',4)

query ITI
SELECT * FROM t3 ORDER BY id
----
1  1  1
2  2  2
3  3  3
4  4  4

# Ensure ALTER COLUMN TYPE correctly changes the precision of TIMESTAMPTZ.
statement ok
CREATE TABLE t5 (x TIMESTAMPTZ(6));
INSERT INTO t5 VALUES ('2016-01-25 10:10:10.555555-05:00');
INSERT INTO t5 VALUES ('2016-01-26 10:10:10.555555-05:00');
ALTER TABLE t5 ALTER COLUMN x TYPE TIMESTAMPTZ(3);
INSERT INTO t5 VALUES ('2016-01-26 10:10:10.55-05:00');

query T
SELECT * FROM t5 ORDER BY x
----
2016-01-25 16:10:10.556 +0100 CET
2016-01-26 16:10:10.55 +0100 CET
2016-01-26 16:10:10.556 +0100 CET

# Ensure column families stay the same.
statement ok
CREATE TABLE t6(id INT, id2 INT, FAMILY f1 (id), FAMILY f2 (id2));
INSERT INTO t6 VALUES (1), (2), (3);
ALTER TABLE t6 ALTER COLUMN id2 TYPE STRING;

query TT
SHOW CREATE TABLE t6
----
t6  CREATE TABLE public.t6 (
    id INT8 NULL,
    id2 STRING NULL,
    rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
    CONSTRAINT "primary" PRIMARY KEY (rowid ASC),
    FAMILY f1 (id, rowid),
    FAMILY f2 (id2)
)

# Ensure default expressions are casted correctly.
statement ok
CREATE TABLE t7 (x INT DEFAULT 1, y INT);
INSERT INTO t7 (y) VALUES (1), (2), (3);
ALTER TABLE t7 ALTER COLUMN x TYPE DATE;
INSERT INTO t7 (y) VALUES (4);

query TI
SELECT * FROM t7 ORDER BY y
----
1970-01-02 00:00:00 +0000 +0000  1
1970-01-02 00:00:00 +0000 +0000  2
1970-01-02 00:00:00 +0000 +0000  3
1970-01-02 00:00:00 +0000 +0000  4

# Ensure a runtime error correctly rolls back and the table is unchanged.
statement ok
CREATE TABLE t8 (x STRING)

statement ok
INSERT INTO t8 VALUES ('hello')

statement error pq: could not parse "hello" as type int: strconv.ParseInt: parsing "hello": invalid syntax
ALTER TABLE t8 ALTER COLUMN x TYPE INT

query TT
SHOW CREATE TABLE t8
----
t8  CREATE TABLE public.t8 (
    x STRING NULL,
    rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
    CONSTRAINT "primary" PRIMARY KEY (rowid ASC),
    FAMILY "primary" (x, rowid)
)

# Ensure ALTER COLUMN TYPE is disallowed if column is part of primary key.
statement ok
CREATE TABLE t9 (x INT PRIMARY KEY)

statement error pq: unimplemented: ALTER COLUMN TYPE requiring rewrite of on-disk data is currently not supported for columns that are part of an index
ALTER TABLE t9 ALTER COLUMN x TYPE STRING

# Ensure ALTER COLUMN TYPE is disallowed if column is part of an index.
statement ok
CREATE TABLE t10 (x INT, y INT, INDEX(x, y))

statement error pq: unimplemented: ALTER COLUMN TYPE requiring rewrite of on-disk data is currently not supported for columns that are part of an index
ALTER TABLE t10 ALTER COLUMN y TYPE STRING

# Ensure ALTER COLUMN TYPE is disallowed if an expression was provided.
statement ok
CREATE TABLE t11 (x INT)

# Ensure ALTER COLUMN TYPE is disallowed if the column has a constraint.
statement ok
CREATE TABLE t12 (x INT check (x > 0))

statement error pq: unimplemented: ALTER COLUMN TYPE for a column that has a constraint is currently not supported
ALTER TABLE t12 ALTER COLUMN x TYPE STRING

statement ok
SET experimental_enable_unique_without_index_constraints = true;
CREATE TABLE uniq (x INT, y INT, UNIQUE WITHOUT INDEX (x, y))

statement error pq: unimplemented: ALTER COLUMN TYPE for a column that has a constraint is currently not supported
ALTER TABLE uniq ALTER COLUMN x TYPE STRING

# Ensure ALTER COLUMN TYPE works correctly for interleaved tables.
statement ok
CREATE TABLE t13 (x INT PRIMARY KEY, y INT);
INSERT INTO t13 VALUES (1, 1), (2, 2);
CREATE TABLE t14 (x INT, y INT, z STRING, PRIMARY KEY(y, x)) INTERLEAVE IN PARENT t13 (y);
INSERT INTO t14 VALUES (1, 1, '1'), (2, 2, '2')

# Ensure we can change the column type of an interleaved child if the
# column is not part of the primary key.
statement ok
ALTER TABLE t14 ALTER COLUMN z TYPE INT

query III
SELECT x, y, z FROM t14 ORDER BY x
----
1  1  1
2  2  2

# Ensure we can change the column type of an interleaved parent if the
# column is not part of the primary key.
statement ok
ALTER TABLE t13 ALTER COLUMN y TYPE STRING

query IT
SELECT x, y FROM t13 ORDER BY x
----
1  1
2  2

# Ensure we can change the column type of a column stored in a secondary index.
statement ok
CREATE TABLE t15 (x INT, y INT);
CREATE INDEX ON t15 (x) STORING (y);
INSERT INTO t15 VALUES (1, 1), (2, 2)

statement ok
ALTER TABLE t15 ALTER COLUMN y TYPE STRING;

query IT
SELECT x, y FROM t15 ORDER BY x
----
1  1
2  2

# Ensure ALTER COLUMN TYPE works for collated strings.
statement ok
CREATE TABLE t16 (x STRING);
INSERT INTO t16 VALUES ('Backhaus'), ('Bär'), ('Baz');

query T
SELECT x FROM t16 ORDER BY x
----
Backhaus
Baz
Bär

statement ok
ALTER TABLE t16 ALTER COLUMN x TYPE STRING COLLATE de

query T
SELECT x FROM t16 ORDER BY x
----
Backhaus
Bär
Baz

# Ensure ALTER COLUMN TYPE fails if the DEFAULT EXPR cannot be casted to the new type.
statement ok
CREATE TABLE t17 (x STRING DEFAULT 'HELLO');

statement error pq: could not parse "HELLO" as type int: strconv.ParseInt: parsing "HELLO": invalid syntax
ALTER TABLE t17 ALTER COLUMN x TYPE INT

query TT colnames
show create table t17
----
table_name  create_statement
t17         CREATE TABLE public.t17 (
            x STRING NULL DEFAULT 'HELLO':::STRING,
            rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
            CONSTRAINT "primary" PRIMARY KEY (rowid ASC),
            FAMILY "primary" (x, rowid)
)

# Ensure ALTER COLUMN TYPE fails if the column is part of an FK relationship.
statement ok
CREATE TABLE t18 (x INT NOT NULL PRIMARY KEY);
CREATE TABLE t19 (y INT NOT NULL REFERENCES t18 (x), INDEX(y));

statement error pq: unimplemented: ALTER COLUMN TYPE requiring rewrite of on-disk data is currently not supported for columns that are part of an index
ALTER TABLE t18 ALTER COLUMN x TYPE STRING

statement error pq: unimplemented: ALTER COLUMN TYPE for a column that has a constraint is currently not supported
ALTER TABLE t19 ALTER COLUMN y TYPE STRING

# Ensure ALTER COLUMN TYPE does not work inside a transaction.
statement ok
CREATE TABLE t20 (x INT);
BEGIN

statement error pq: unimplemented: ALTER COLUMN TYPE is not supported inside a transaction
ALTER TABLE t20 ALTER COLUMN x TYPE STRING

statement ok
ROLLBACK

# Ensure ALTER COLUMN TYPE cannot be used in combination with other ALTER TABLE commands.
statement ok
CREATE TABLE t21 (x INT);

statement error pq: unimplemented: ALTER COLUMN TYPE cannot be used in combination with other ALTER TABLE commands
ALTER TABLE t21 ALTER COLUMN x TYPE STRING, ALTER COLUMN x SET NOT NULL;

statement ok
CREATE TABLE t22 (x INT);

statement error pq: unimplemented: ALTER COLUMN TYPE cannot be used in combination with other ALTER TABLE commands
ALTER TABLE t22 ALTER COLUMN x SET NOT NULL, ALTER COLUMN x TYPE STRING;

# Ensure ALTER COLUMN TYPE USING EXPRESSION works.
statement ok
CREATE TABLE t23 (x INT);
INSERT INTO t23 VALUES (-3), (-2), (-1), (0), (1), (2), (3)

statement ok
ALTER TABLE t23 ALTER COLUMN x TYPE BOOL USING (x > 0)

query B
SELECT x FROM t23 ORDER BY x
----
false
false
false
false
true
true
true

# Ensure ALTER COLUMN TYPE rolls back if is not applicable to value in the column.
statement ok
CREATE TABLE t24 (x STRING);
INSERT INTO t24 VALUES ('1'), ('hello');

statement error pq: could not parse "hello" as type int: strconv.ParseInt: parsing "hello": invalid syntax
ALTER TABLE t24  ALTER COLUMN x TYPE INT USING (x::int + 5)

query TT colnames
show create table t24
----
table_name  create_statement
t24         CREATE TABLE public.t24 (
            x STRING NULL,
            rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
            CONSTRAINT "primary" PRIMARY KEY (rowid ASC),
            FAMILY "primary" (x, rowid)
)

# Ensure USING EXPRESSION rolls back if the USING EXPRESSION does not conform
# to the new type of the column.
statement ok
CREATE TABLE t25 (x INT);
INSERT INTO t25 VALUES (1);

statement error pq: expected ALTER COLUMN TYPE USING EXPRESSION expression to have type string, but '\(x\)' has type int
ALTER TABLE t25 ALTER COLUMN x TYPE STRING USING (x);

statement ok
CREATE TABLE t26 (x INT);
CREATE TABLE t27 (x INT);

# Ensure USING EXPRESSION cannot reference columns that do not exist in the
# table being altered.
statement error pq: column "y" does not exist
ALTER TABLE t26 ALTER COLUMN x TYPE BOOL USING (y > 0);

# Ensure USING EXPRESSION cannot reference other tables.
statement error pq: no data source matches prefix: t26 in this context
ALTER TABLE t27 ALTER COLUMN x TYPE BOOL USING (t26.x > 0);

# Ensure USING EXPRESSION cannot reference columns with a database or column
# specified.

statement error pq: no data source matches prefix: db.schema.t in this context
ALTER TABLE t27 ALTER COLUMN x TYPE STRING USING (db.schema.t.x::STRING)

statement error pq: no data source matches prefix: schema.t in this context
ALTER TABLE t27 ALTER COLUMN x TYPE STRING USING (schema.t.x::STRING)

statement ok
ALTER TABLE t27 ALTER COLUMN x TYPE STRING USING (x::STRING)

# Ensure ALTER COLUMN TYPE ... USING EXPRESSION does not perform a no-op when
# converting to the same type.
statement ok
CREATE TABLE t28(x INT);
INSERT INTO t28 VALUES (1), (2), (3);
ALTER TABLE t28 ALTER COLUMN x TYPE INT USING (x * 5)

query I
SELECT x FROM t28 ORDER BY x
----
5
10
15

# Regression 50277, ensure ColumnConversionValidate type conversion doesn't
# error before running the online schema change.
statement ok
CREATE TABLE t29 (x INT8);
INSERT INTO t29 VALUES (1), (2), (3);
ALTER TABLE t29 ALTER COLUMN x TYPE INT4;

query I
SELECT x FROM t29 ORDER BY x
----
1
2
3

# ColumnConversionValidate should error out if the conversion is not valid.
# STRING -> BYTES is a ColumnConversionValidate type conversion, it should
# try the conversion and error out if the cast cannot be applied.
statement ok
CREATE TABLE t30 (x STRING);
INSERT INTO t30 VALUES (e'a\\01');

statement error pq: could not parse "a\\\\01" as type bytes: bytea encoded value ends with incomplete escape sequence
ALTER TABLE t30 ALTER COLUMN x TYPE BYTES

# Ensure that dependent views prevent column type modification.

statement ok
CREATE VIEW v AS SELECT x FROM t29

statement error cannot alter type of column "x" because view "v" depends on it
ALTER TABLE t29 ALTER COLUMN x TYPE INT2

statement ok
DROP VIEW v

statement ok
CREATE MATERIALIZED VIEW v AS SELECT x FROM t29

statement error cannot alter type of column "x" because view "v" depends on it
ALTER TABLE t29 ALTER COLUMN x TYPE INT2

statement ok
CREATE TABLE regression_54844 (i int8);
INSERT INTO regression_54844 VALUES (-9223372036854775807)

statement error integer out of range for type int2
ALTER TABLE regression_54844 ALTER COLUMN i TYPE int2
