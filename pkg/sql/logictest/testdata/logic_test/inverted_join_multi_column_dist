# LogicTest: 5node-default-configs !5node-metadata

statement ok
SET experimental_enable_multi_column_inverted_indexes=true

statement ok
CREATE TABLE j1 (
  k INT PRIMARY KEY,
  j JSON
)

# Insert many types of JSON values.
statement ok
INSERT INTO j1 VALUES
  (1, '{"a": "b"}'),
  (2, '[1,2,3,4, "foo"]'),
  (3, '{"a": {"b": "c"}}'),
  (4, '{"a": {"b": [1]}}'),
  (5, '{"a": {"b": [1, [2]]}}'),
  (6, '{"a": {"b": [[2]]}}'),
  (7, '{"a": "b", "c": "d"}'),
  (8, '{"a": {"b":true}}'),
  (9, '{"a": {"b":false}}'),
  (10, '"a"'),
  (11, 'null'),
  (12, 'true'),
  (13, 'false'),
  (14, '1'),
  (15, '1.23'),
  (16, '[{"a": {"b": [1, [2]]}}, "d"]'),
  (17, '{}'),
  (18, '[]'),
  (19, '["a", "a"]'),
  (20, '[{"a": "a"}, {"a": "a"}]'),
  (21, '[[[["a"]]], [[["a"]]]]'),
  (22, '[1,2,3,1]'),
  (23, '{"a": 123.123}'),
  (24, '{"a": 123.123000}'),
  (25, '{"a": [{}]}'),
  (26, '[[], {}]'),
  (27, '[true, false, null, 1.23, "a"]'),
  (28, '{"a": {}}'),
  (29, NULL),
  (30, '{"a": []}'),
  (31, '{"a": {"b": "c", "d": "e"}, "f": "g"}'),
  (32, '{"a": [1]}'),
  (33, '[1, "bar"]'),
  (34, '{"a": 1}'),
  (35, '[1]'),
  (36, '[2]'),
  (37, '[[1]]'),
  (38, '[[2]]'),
  (39, '["a"]'),
  (40, '{"a": [[]]}'),
  (41, '[[1, 2]]'),
  (42, '[[1], [2]]'),
  (43, '[{"a": "b", "c": "d"}]'),
  (44, '[{"a": "b"}, {"c": "d"}]')

statement ok
CREATE TABLE j2 (
  k INT PRIMARY KEY,
  i INT,
  j JSON,
  INVERTED INDEX ij_idx (i, j)
)

# Insert combinations of i and j. The first 3 primes after 44 are used to avoid
# primary key collisions.
statement ok
INSERT INTO j2 (
  SELECT k * i, i, j FROM j1
  CROSS JOIN (VALUES (47), (53), (59)) t1(i)
)

statement ok
ALTER TABLE j2 SPLIT AT VALUES (44), (88)

statement ok
ALTER TABLE j2 EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 44), (ARRAY[3], 88)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder
FROM [SHOW EXPERIMENTAL_RANGES FROM TABLE j2] ORDER BY lease_holder
----
start_key  end_key  replicas  lease_holder
NULL       /44      {1}       1
/44        /88      {2}       2
/88        NULL     {3}       3

# This query performs an inverted join.
query T
EXPLAIN (DISTSQL)
SELECT * FROM j2@ij_idx, j1 WHERE i IN (2, 3) AND j2.j @> j1.j ORDER BY j1.k, j2.k
----
distribution: full
vectorized: true
·
• sort
│ order: +k,+k
│
└── • lookup join
    │ table: j2@primary
    │ equality: (k) = (k)
    │ equality cols are key
    │ pred: j @> j
    │
    └── • inverted join
        │ table: j2@ij_idx
        │
        └── • cross join
            │
            ├── • scan
            │     missing stats
            │     table: j1@primary
            │     spans: FULL SCAN
            │
            └── • values
                  size: 1 column, 2 rows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUk12Pk0AUhu_9FSfnqnXHFgZwE65m12K2prYrbfyIEoPlZBfancEZMDVN_7sB1tZWwe3lfDzzPjm8bNF8X6OPwcfbydV4Cr3ReL6Yv5v0YR5MglcLeA6vw9lbyLhIs69psmGQ2fDhJggD6KVQEZyB0-_D1XQEvYwPMhBfSstyCDJ7kPVhFo6CEK4_VcsVg4wPVshQqoSm8QMZ9D-jjRHDXKslGaN0tbWtL4yTDfoWw1TmZVFtRwyXShP6WyzSYk3o4yL-tqaQ4oT00EKGCRVxuq6fzWyR6_Qh1j-R4TyPpfHhBUY7hqosDi-aIr4j9O0de3rq-3hdkhnax4EuXEOPw_K-lCvTb02yWpMOAaVUOiFNyVFCVJH_u_IP3ZvY3L9RqSQ95MfKs7LwQdhMcCacVmN-zmzG8gfpgpLHQOfko_wuErL9zWCTaxDevjiikmzMXCY8Vvu1yjnnyFVSj21x_xI7tGWi1KrMIVOpBCWrCVVGUxCXB0l3L9mM75IJhwm31dM9x3OudEF66B07CveCCfuiNcI7JyIkkytp6LRhLZ2NGFJyR01NjSr1km61WtYxzXJWc_VGQqZoTnmzGMv6qP7J_oTtM2B-CvNO2DmCrVPY6YTdbtjthL1u2OuEX57A0e7ZrwAAAP__CFHMsg==

statement ok
CREATE TABLE a1 (
  k INT PRIMARY KEY,
  a INT[]
)

statement ok
INSERT INTO a1 VALUES
  (1, '{}'),
  (2, '{1}'),
  (3, '{2}'),
  (4, '{1, 2}'),
  (5, '{1, 3}'),
  (6, '{1, 2, 3, 4}'),
  (7, ARRAY[NULL]::INT[]),
  (8, NULL)

statement ok
CREATE TABLE a2 (
  k INT PRIMARY KEY,
  i INT,
  a INT[],
  INVERTED INDEX ia_idx (i, a)
)

# Insert combinations of i and a. The first 3 primes after 44 are used to avoid
# primary key collisions.
statement ok
INSERT INTO a2 (
  SELECT k*i, i, a FROM a1
  CROSS JOIN (VALUES (47), (53), (59)) t1(i)
)

statement ok
ALTER TABLE a2 SPLIT AT VALUES (8), (16)

statement ok
ALTER TABLE a2 EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 8), (ARRAY[3], 16)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder
FROM [SHOW EXPERIMENTAL_RANGES FROM TABLE a2] ORDER BY lease_holder
----
start_key  end_key  replicas  lease_holder
NULL       /8       {1}       1
/8         /16      {2}       2
/16        NULL     {3}       3

# This query performs an inverted join.
query T
EXPLAIN (DISTSQL)
SELECT * FROM a2@ia_idx, a1 WHERE i IN (2, 3) AND a2.a @> a1.a ORDER BY a1.k, a2.k
----
distribution: full
vectorized: true
·
• sort
│ order: +k,+k
│
└── • lookup join
    │ table: a2@primary
    │ equality: (k) = (k)
    │ equality cols are key
    │ pred: a @> a
    │
    └── • inverted join
        │ table: a2@ia_idx
        │
        └── • cross join
            │
            ├── • scan
            │     missing stats
            │     table: a1@primary
            │     spans: FULL SCAN
            │
            └── • values
                  size: 1 column, 2 rows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUk12P0kAUhu_9FSfnCtwR2mnrJr2aXalZDMJaiB_Rxoz0ZLfCztSZ1mAI_920XUHQVrmcj2feJ6dvt2i_rTHE6P3t5Go8hd5oPF_M30z6MI8m0YsFPIWX8ew1SC4y-TlLNwykC-9uojiCXgYVwRl4_T5cTUfQk3wgQXwqHccjkO5A9mEWj6IYrj9UyxUDyQcrZKh0SlP5QBbDj-hiwjA3eknWalNtbesL43SDocMwU3lZVNsJw6U2hOEWi6xYE4a4kF_WFJNMyQwdZJhSIbN1_ax0RW6yB2l-IMN5LpUN4RkmO4a6LA4v2kLeEYbujv1_6lu5LskO3eNAH66hx2F5X6qV7bcmOa1Jh4BSaZOSofQoIanIf135i-6NtPevdKbIDPmx8qwsQhAuE5wJr9WYnzObsfpOpqD0MdA7-Si_ioRsfzPa5AZEsC-OqCQbM5-JgNV-rXLeOXKV1GNb_D_EDm2ZaL0qc_iqMwVaVROqjKYgLg-S_l6yGd8lEx4Tfqunf47nXJuCzDA4dhT-BRPuRWtEcE5ETDbXytJpw1o6mzCk9I6amlpdmiXdGr2sY5rlrObqjZRs0ZzyZjFW9VH9k_0Ou2fA_BTmnbB3BDunsNcJ-92w3wkH3XDQCT8_gZPdk58BAAD__9uezD0=
