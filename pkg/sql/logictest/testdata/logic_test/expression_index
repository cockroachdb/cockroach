statement ok
CREATE TABLE t (
  k INT PRIMARY KEY,
  a INT,
  b INT,
  c STRING,
  j JSON,
  comp INT AS (a + 10) VIRTUAL,
  FAMILY (k, a, b, c, j)
)

statement error unimplemented: only simple columns are supported as index elements
CREATE INDEX err ON t ((a + b))

statement ok
SET experimental_enable_expression_indexes=true

statement ok
CREATE INDEX t_a_plus_b_idx ON t ((a + b))

statement ok
CREATE INDEX t_lower_c_idx ON t (lower(c))

statement ok
CREATE INDEX t_lower_c_a_plus_b_idx ON t (lower(c), (a + b))

statement ok
CREATE INDEX t_a_plus_ten_idx ON t ((a + 10))

query T
SELECT create_statement FROM [SHOW CREATE TABLE t]
----
CREATE TABLE public.t (
   k INT8 NOT NULL,
   a INT8 NULL,
   b INT8 NULL,
   c STRING NULL,
   j JSONB NULL,
   comp INT8 NULL AS (a + 10:::INT8) VIRTUAL,
   CONSTRAINT "primary" PRIMARY KEY (k ASC),
   INDEX t_a_plus_b_idx ((a + b) ASC),
   INDEX t_lower_c_idx (lower(c) ASC),
   INDEX t_lower_c_a_plus_b_idx (lower(c) ASC, (a + b) ASC),
   INDEX t_a_plus_ten_idx ((a + 10:::INT8) ASC),
   FAMILY fam_0_k_a_b_c_j (k, a, b, c, j)
)

statement error volatile functions are not allowed in index element
CREATE INDEX err ON t ((a + random()::INT))

statement error column \"z\" does not exist
CREATE INDEX err ON t ((a + z))

statement error index element expression cannot reference computed columns
CREATE INDEX err ON t ((comp + 10))

statement error type of index element NULL is ambiguous.*\nHINT: consider adding a type cast to the expression
CREATE INDEX err ON t (a, (NULL), b)

statement ok
CREATE INDEX t_cast_idx ON t (a, (NULL::TEXT), b)

statement error index element j->'a' of type jsonb is not indexable
CREATE INDEX err ON t (a, (j->'a'));

statement error index element \(a, b\) of type record is not indexable
CREATE INDEX err ON t (a, (row(a, b)));

statement error index element j->'a' of type jsonb is not allowed as a prefix column in an inverted index.*\nHINT: see the documentation for more information about inverted indexes: https://www.cockroachlabs.com/docs/.*/inverted-indexes.html
CREATE INVERTED INDEX err ON t ((j->'a'), j);

statement error index element a \+ b of type int is not allowed as the last column in an inverted index.*\nHINT: see the documentation for more information about inverted indexes: https://www.cockroachlabs.com/docs/.*/inverted-indexes.html
CREATE INVERTED INDEX err ON t (a, (a + b));

statement error index element \(a, b\) of type record is not allowed as the last column in an inverted index.*\nHINT: see the documentation for more information about inverted indexes: https://www.cockroachlabs.com/docs/.*/inverted-indexes.html
CREATE INVERTED INDEX err ON t (a, (row(a, b)));

statement ok
CREATE TABLE other (
  a INT
)

# An expression index cannot reference columns in other tables.
statement error no data source matches prefix: t in this context
CREATE INDEX err ON other ((t.a + 10))

# An inaccessible column used in an expression index cannot be referenced in
# queries.
statement error column \"crdb_internal_idx_expr\" does not exist
SELECT * FROM t WHERE crdb_internal_idx_expr > 0

# Test anonymous index name generation.

statement ok
CREATE TABLE anon (
  k INT PRIMARY KEY,
  a INT,
  b INT,
  c STRING,
  FAMILY (k, a, b, c)
);
CREATE INDEX ON anon ((a + b));
CREATE INDEX ON anon ((a + 10), b);
CREATE UNIQUE INDEX ON anon (lower(c), b);
CREATE INDEX ON anon ((a + 10), b, lower(c));
CREATE INDEX ON anon ((a + 10), (b + 100), lower(c));

query T
SELECT create_statement FROM [SHOW CREATE TABLE anon]
----
CREATE TABLE public.anon (
   k INT8 NOT NULL,
   a INT8 NULL,
   b INT8 NULL,
   c STRING NULL,
   CONSTRAINT "primary" PRIMARY KEY (k ASC),
   INDEX anon_expr_idx ((a + b) ASC),
   INDEX anon_expr_b_idx ((a + 10:::INT8) ASC, b ASC),
   UNIQUE INDEX anon_expr_b_key (lower(c) ASC, b ASC),
   INDEX anon_expr_b_expr1_idx ((a + 10:::INT8) ASC, b ASC, lower(c) ASC),
   INDEX anon_expr_expr1_expr2_idx ((a + 10:::INT8) ASC, (b + 100:::INT8) ASC, lower(c) ASC),
   FAMILY fam_0_k_a_b_c (k, a, b, c)
)

# Querying expression indexes.

statement ok
INSERT INTO t VALUES
  (1, 10, 100, 'Foo'),
  (2, 20, 200, 'FOO'),
  (3, 10, 100, 'foo'),
  (4, 40, 400, 'BAR'),
  (5, 100, 10, 'Food')

query IIITI colnames,rowsort
SELECT k, a, b, c, comp FROM t@t_a_plus_b_idx WHERE a + b = 110
----
k  a    b    c     comp
1  10   100  Foo   20
3  10   100  foo   20
5  100  10   Food  110

query IIITI colnames,rowsort
SELECT k, a, b, c, comp FROM t@t_a_plus_b_idx WHERE a + b > 110
----
k  a   b    c    comp
2  20  200  FOO  30
4  40  400  BAR  50

query IIITI colnames,rowsort
SELECT k, a, b, c, comp FROM t@t_lower_c_idx WHERE lower(c) = 'foo'
----
k  a   b    c    comp
1  10  100  Foo  20
2  20  200  FOO  30
3  10  100  foo  20

query IIITI colnames,rowsort
SELECT k, a, b, c, comp FROM t@t_lower_c_idx WHERE lower(c) LIKE 'foo%'
----
k  a    b    c     comp
1  10   100  Foo   20
2  20   200  FOO   30
3  10   100  foo   20
5  100  10   Food  110

query IIITI colnames,rowsort
SELECT k, a, b, c, comp FROM t@t_lower_c_a_plus_b_idx WHERE lower(c) = 'foo' AND a + b > 110
----
k  a   b    c    comp
2  20  200  FOO  30

# Backfilling expression indexes.

statement ok
CREATE INDEX t_a_times_two_idx ON t ((a * 2))

query IIITI colnames,rowsort
SELECT k, a, b, c, comp FROM t@t_a_times_two_idx WHERE a * 2 = 20
----
k  a   b    c    comp
1  10  100  Foo  20
3  10  100  foo  20

query IIITI colnames,rowsort
SELECT k, a, b, c, comp FROM t@t_a_times_two_idx WHERE a * 2 < 100
----
k  a   b    c    comp
1  10  100  Foo  20
2  20  200  FOO  30
3  10  100  foo  20
4  40  400  BAR  50
