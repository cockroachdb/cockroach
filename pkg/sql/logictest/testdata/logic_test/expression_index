statement ok
CREATE TABLE t (
  k INT PRIMARY KEY,
  a INT,
  b INT,
  c STRING,
  j JSON,
  comp INT AS (a + 10) VIRTUAL,
  FAMILY (k, a, b, c, j)
)

statement error unimplemented: only simple columns are supported as index elements
CREATE INDEX err ON t ((a + b))

statement ok
SET experimental_enable_expression_indexes=true

statement ok
CREATE INDEX t_a_plus_b_idx ON t ((a + b))

statement ok
CREATE INDEX t_lower_c_idx ON t (lower(c))

statement ok
CREATE INDEX t_lower_c_a_plus_b_idx ON t (lower(c), (a + b))

statement ok
CREATE INDEX t_a_plus_ten_idx ON t ((a + 10))

# TODO(mgartner): The expression should be printed in expression indexes instead
# of the virtual column name.
query T
SELECT create_statement FROM [SHOW CREATE TABLE t]
----
CREATE TABLE public.t (
   k INT8 NOT NULL,
   a INT8 NULL,
   b INT8 NULL,
   c STRING NULL,
   j JSONB NULL,
   comp INT8 NULL AS (a + 10:::INT8) VIRTUAL,
   CONSTRAINT "primary" PRIMARY KEY (k ASC),
   INDEX t_a_plus_b_idx (crdb_internal_idx_expr ASC),
   INDEX t_lower_c_idx (crdb_internal_idx_expr_1 ASC),
   INDEX t_lower_c_a_plus_b_idx (crdb_internal_idx_expr_2 ASC, crdb_internal_idx_expr_3 ASC),
   INDEX t_a_plus_ten_idx (crdb_internal_idx_expr_4 ASC),
   FAMILY fam_0_k_a_b_c_j (k, a, b, c, j)
)

# Referencing an inaccessible column in a CHECK constraint is not allowed.
statement error column \"crdb_internal_idx_expr_4\" is inaccessible and cannot be referenced
ALTER TABLE t ADD CONSTRAINT err CHECK (crdb_internal_idx_expr_4 > 0)

# Referencing an inaccessible column in a UNIQUE constraint is not allowed.
statement error column \"crdb_internal_idx_expr_4\" is inaccessible and cannot be referenced by a unique constraint
ALTER TABLE t ADD CONSTRAINT err UNIQUE (crdb_internal_idx_expr_4)

# Referencing an inaccessible column in a computed column expression is not
# allowed.
statement error column \"crdb_internal_idx_expr_4\" is inaccessible and cannot be referenced in a computed column expression
ALTER TABLE t ADD COLUMN err INT AS (crdb_internal_idx_expr_4 + 10) STORED

# Referencing an inaccessible column in an index is not allowed.
statement error column \"crdb_internal_idx_expr_4\" is inaccessible and cannot be indexed
CREATE INDEX err ON t (crdb_internal_idx_expr_4)

# Referencing an inaccessible column in a partial index predicate expression is
# not allowed.
statement error column \"crdb_internal_idx_expr_4\" is inaccessible and cannot be referenced
CREATE INDEX err ON t (a) WHERE crdb_internal_idx_expr_4 > 0

# Referencing an inaccessible column in a FK is not allowed.
statement error column \"crdb_internal_idx_expr_4\" is inaccessible and cannot be referenced by a foreign key
CREATE TABLE child (a INT REFERENCES t(crdb_internal_idx_expr_4))

statement ok
CREATE TABLE child (a INT)

statement error column \"crdb_internal_idx_expr_4\" is inaccessible and cannot be referenced by a foreign key
ALTER TABLE child ADD CONSTRAINT err FOREIGN KEY (a) REFERENCES t(crdb_internal_idx_expr_4)

# Adding a column with the same name as one of the inaccessible columns created
# for an expression index is not allowed.
statement error column \"crdb_internal_idx_expr_4\" of relation \"t\" already exists
ALTER TABLE t ADD COLUMN crdb_internal_idx_expr_4 INT

query T
SELECT * FROM (
  SELECT json_array_elements(
    crdb_internal.pb_to_json('cockroach.sql.sqlbase.Descriptor', descriptor, false)->'table'->'columns'
  ) AS desc FROM system.descriptor WHERE id = 't'::REGCLASS
) AS cols WHERE cols.desc->'name' = '"crdb_internal_idx_expr_4"'
----
{"computeExpr": "a + 10:::INT8", "id": 11, "inaccessible": true, "name": "crdb_internal_idx_expr_4", "nullable": true, "type": {"family": "IntFamily", "oid": 20, "width": 64}, "virtual": true}

statement ok
DROP INDEX t_a_plus_ten_idx

# Verify that the inaccessible column created for t_a_plus_ten_idx no longer
# exists in the descriptor.
query T
SELECT * FROM (
  SELECT json_array_elements(
    crdb_internal.pb_to_json('cockroach.sql.sqlbase.Descriptor', descriptor, false)->'table'->'columns'
  ) AS desc FROM system.descriptor WHERE id = 't'::REGCLASS
) AS cols WHERE cols.desc->'name' = '"crdb_internal_idx_expr_4"'
----

# Adding a column with the same name as one of the inaccessible columns created
# for an expression index is allowed after the index has been dropped.
statement ok
ALTER TABLE t ADD COLUMN crd_internal_idx_expr_4 INT

statement error volatile functions are not allowed in index element
CREATE INDEX err ON t ((a + random()::INT))

statement error column \"z\" does not exist
CREATE INDEX err ON t ((a + z))

statement error index element expression cannot reference computed columns
CREATE INDEX err ON t ((comp + 10))

statement error type of index element NULL is ambiguous.*\nHINT: consider adding a type cast to the expression
CREATE INDEX err ON t (a, (NULL), b)

statement ok
CREATE INDEX t_cast_idx ON t (a, (NULL::TEXT), b)

statement error index element j->'a' of type jsonb is not indexable
CREATE INDEX err ON t (a, (j->'a'));

statement error index element \(a, b\) of type record is not indexable
CREATE INDEX err ON t (a, (row(a, b)));

statement error index element j->'a' of type jsonb is not allowed as a prefix column in an inverted index.*\nHINT: see the documentation for more information about inverted indexes: https://www.cockroachlabs.com/docs/.*/inverted-indexes.html
CREATE INVERTED INDEX err ON t ((j->'a'), j);

statement error index element a \+ b of type int is not allowed as the last column in an inverted index.*\nHINT: see the documentation for more information about inverted indexes: https://www.cockroachlabs.com/docs/.*/inverted-indexes.html
CREATE INVERTED INDEX err ON t (a, (a + b));

statement error index element \(a, b\) of type record is not allowed as the last column in an inverted index.*\nHINT: see the documentation for more information about inverted indexes: https://www.cockroachlabs.com/docs/.*/inverted-indexes.html
CREATE INVERTED INDEX err ON t (a, (row(a, b)));

statement ok
CREATE TABLE other (
  a INT
)

# An expression index cannot reference columns in other tables.
statement error no data source matches prefix: t in this context
CREATE INDEX err ON other ((t.a + 10))

# An inaccessible column used in an expression index cannot be referenced in
# queries.
statement error column \"crdb_internal_idx_expr\" does not exist
SELECT * FROM t WHERE crdb_internal_idx_expr > 0

# Querying expression indexes.

statement ok
INSERT INTO t VALUES
  (1, 10, 100, 'Foo'),
  (2, 20, 200, 'FOO'),
  (3, 10, 100, 'foo'),
  (4, 40, 400, 'BAR'),
  (5, 100, 10, 'Food')

query IIITI colnames,rowsort
SELECT k, a, b, c, comp FROM t@t_a_plus_b_idx WHERE a + b = 110
----
k  a    b    c     comp
1  10   100  Foo   20
3  10   100  foo   20
5  100  10   Food  110

query IIITI colnames,rowsort
SELECT k, a, b, c, comp FROM t@t_a_plus_b_idx WHERE a + b > 110
----
k  a   b    c    comp
2  20  200  FOO  30
4  40  400  BAR  50

query IIITI colnames,rowsort
SELECT k, a, b, c, comp FROM t@t_lower_c_idx WHERE lower(c) = 'foo'
----
k  a   b    c    comp
1  10  100  Foo  20
2  20  200  FOO  30
3  10  100  foo  20

query IIITI colnames,rowsort
SELECT k, a, b, c, comp FROM t@t_lower_c_idx WHERE lower(c) LIKE 'foo%'
----
k  a    b    c     comp
1  10   100  Foo   20
2  20   200  FOO   30
3  10   100  foo   20
5  100  10   Food  110

query IIITI colnames,rowsort
SELECT k, a, b, c, comp FROM t@t_lower_c_a_plus_b_idx WHERE lower(c) = 'foo' AND a + b > 110
----
k  a   b    c    comp
2  20  200  FOO  30

# Backfilling expression indexes.

statement ok
CREATE INDEX t_a_times_two_idx ON t ((a * 2))

query IIITI colnames,rowsort
SELECT k, a, b, c, comp FROM t@t_a_times_two_idx WHERE a * 2 = 20
----
k  a   b    c    comp
1  10  100  Foo  20
3  10  100  foo  20

query IIITI colnames,rowsort
SELECT k, a, b, c, comp FROM t@t_a_times_two_idx WHERE a * 2 < 100
----
k  a   b    c    comp
1  10  100  Foo  20
2  20  200  FOO  30
3  10  100  foo  20
4  40  400  BAR  50
