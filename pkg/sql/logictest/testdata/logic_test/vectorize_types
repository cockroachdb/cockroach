# LogicTest: local fakedist

# Check that all native types as well as some datum-backed types can be read
# correctly.
statement ok
CREATE TABLE all_types (
    _bool        BOOL,
    _bytes       BYTES,
    _date        DATE,
    _decimal     DECIMAL,
    _int2        INT2,
    _int4        INT4,
    _int         INT8,
    _oid         OID,
    _float       FLOAT8,
    _string      STRING,
    _uuid        UUID,
    _timestamp   TIMESTAMP,
    _timestamptz TIMESTAMPTZ,
    _interval    INTERVAL,
    _inet        INet,
    _json        JSON
)

statement ok
INSERT
  INTO all_types
VALUES (
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL
       ),
       (
       false,
       '123',
       '2019-10-22',
       1.23,
       123,
       123,
       123,
       123,
       1.23,
       '123',
       '63616665-6630-3064-6465-616462656562',
       '1-1-18 1:00:00.001',
       '1-1-18 1:00:00.001-8',
       '12:34:56.123456',
       '127.0.0.1',
       '[1, "hello", {"a": ["foo", {"b": 3}]}]'
       )

query BTTRIIIORTTTTTTT
SELECT * FROM all_types ORDER BY 1
----
NULL   NULL  NULL                             NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL                                  NULL                                 NULL                               NULL             NULL       NULL
false  123   2019-10-22 00:00:00 +0000 +0000  1.23  123   123   123   123   1.23  123   63616665-6630-3064-6465-616462656562  2001-01-18 01:00:00.001 +0000 +0000  2001-01-18 09:00:00.001 +0000 UTC  12:34:56.123456  127.0.0.1  [1, "hello", {"a": ["foo", {"b": 3}]}]

# Regression test for #44904 (mismatched physical types between materializer's
# input and output, root of the problem is outside of the vectorized engine).
# We should fallback to the row-by-row engine.
statement ok
SET default_int_size = 4; CREATE TABLE t44904(c0 INT); INSERT INTO t44904 VALUES(0)

query I
SELECT CAST(0 BETWEEN(CASE NULL WHEN c0 = 0 THEN NULL END) AND 0 IS TRUE AS INT) FROM t44904
----
0

# Regression test for #45038 (mismatched physical types between expected and
# actual physical types when wrapping unsupported processor cores).
statement ok
CREATE TABLE t45038(c0 INT); INSERT INTO t45038 VALUES(NULL)

query R
SELECT sum(c) FROM (SELECT CAST((IF(IF(false, false, c0 IS NULL), NULL, NULL)) BETWEEN 0 AND 0 IS TRUE AS INT) c FROM t45038)
----
0

statement ok
RESET default_int_size

# Regression test for #46714 (mismatched expected logical and actual physical
# integer types "inside" of the vectorized flow).
statement ok
CREATE TABLE t46714_0(c0 INT4); CREATE TABLE t46714_1(c0 INT4); INSERT INTO t46714_0 VALUES (0); INSERT INTO t46714_1 VALUES (0)

query I
SELECT 1 FROM t46714_0, t46714_1 GROUP BY t46714_0.c0 * t46714_1.c0
----
1

query I
SELECT * FROM t46714_0 ORDER BY c0 + c0
----
0

# Regression test for #47131 (mismatched expected logical and actual physical
# integer types on mixed-width integer binary expressions).
statement ok
CREATE TABLE t47131_0(c0 INT2 UNIQUE); INSERT INTO t47131_0 VALUES(1)

query I
SELECT * FROM t47131_0 WHERE (t47131_0.c0 + t47131_0.c0::INT4) = 0
----
