statement ok
SET experimental_enable_unique_without_index_constraints = true

statement ok
CREATE TABLE c (
  a INT NOT NULL,
  b INT NULL,
  INDEX c_a_b_idx (a ASC, b ASC),
  UNIQUE WITHOUT INDEX (a, b),
  CONSTRAINT unique_a_partial UNIQUE WITHOUT INDEX (a) WHERE b > 0,
  FAMILY fam_0_a_rowid (a, rowid),
  FAMILY fam_1_b (b)
)

statement ok
COMMENT ON TABLE c IS 'table'

statement ok
COMMENT ON COLUMN c.a IS 'column'

statement ok
COMMENT ON INDEX c_a_b_idx IS 'index'

statement ok
CREATE TABLE d (d INT PRIMARY KEY)

query TT colnames
SHOW CREATE c
----
table_name  create_statement
c           CREATE TABLE public.c (
              a INT8 NOT NULL,
              b INT8 NULL,
              rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
              CONSTRAINT c_pkey PRIMARY KEY (rowid ASC),
              INDEX c_a_b_idx (a ASC, b ASC),
              FAMILY fam_0_a_rowid (a, rowid),
              FAMILY fam_1_b (b),
              CONSTRAINT unique_a_b UNIQUE WITHOUT INDEX (a, b),
              CONSTRAINT unique_a_partial UNIQUE WITHOUT INDEX (a) WHERE b > 0:::INT8
            );
            COMMENT ON TABLE public.c IS 'table';
            COMMENT ON COLUMN public.c.a IS 'column';
            COMMENT ON INDEX public.c@c_a_b_idx IS 'index'

statement ok
ALTER TABLE c ADD CONSTRAINT check_b CHECK (b IN (1, 2, 3)) NOT VALID;
ALTER TABLE c ADD CONSTRAINT fk_a FOREIGN KEY (a) REFERENCES d (d) NOT VALID;
ALTER TABLE c ADD CONSTRAINT unique_a UNIQUE (a);
ALTER TABLE c ADD CONSTRAINT unique_b UNIQUE WITHOUT INDEX (b) NOT VALID;
ALTER TABLE c ADD CONSTRAINT unique_b_partial UNIQUE WITHOUT INDEX (b) WHERE a > 0 NOT VALID;

query TT
SHOW CREATE c
----
c  CREATE TABLE public.c (
     a INT8 NOT NULL,
     b INT8 NULL,
     rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
     CONSTRAINT c_pkey PRIMARY KEY (rowid ASC),
     CONSTRAINT fk_a FOREIGN KEY (a) REFERENCES public.d(d) NOT VALID,
     INDEX c_a_b_idx (a ASC, b ASC),
     UNIQUE INDEX unique_a (a ASC),
     FAMILY fam_0_a_rowid (a, rowid),
     FAMILY fam_1_b (b),
     CONSTRAINT check_b CHECK (b IN (1:::INT8, 2:::INT8, 3:::INT8)) NOT VALID,
     CONSTRAINT unique_a_b UNIQUE WITHOUT INDEX (a, b),
     CONSTRAINT unique_a_partial UNIQUE WITHOUT INDEX (a) WHERE b > 0:::INT8,
     CONSTRAINT unique_b UNIQUE WITHOUT INDEX (b) NOT VALID,
     CONSTRAINT unique_b_partial UNIQUE WITHOUT INDEX (b) WHERE a > 0:::INT8 NOT VALID
   );
   COMMENT ON TABLE public.c IS 'table';
   COMMENT ON COLUMN public.c.a IS 'column';
   COMMENT ON INDEX public.c@c_a_b_idx IS 'index'

statement ok
ALTER TABLE c VALIDATE CONSTRAINT check_b;
ALTER TABLE c VALIDATE CONSTRAINT fk_a;
ALTER TABLE c VALIDATE CONSTRAINT unique_a;
ALTER TABLE c VALIDATE CONSTRAINT unique_b;
ALTER TABLE c VALIDATE CONSTRAINT unique_a_b;
ALTER TABLE c VALIDATE CONSTRAINT unique_b_partial;

query TT
SHOW CREATE c
----
c  CREATE TABLE public.c (
     a INT8 NOT NULL,
     b INT8 NULL,
     rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
     CONSTRAINT c_pkey PRIMARY KEY (rowid ASC),
     CONSTRAINT fk_a FOREIGN KEY (a) REFERENCES public.d(d),
     INDEX c_a_b_idx (a ASC, b ASC),
     UNIQUE INDEX unique_a (a ASC),
     FAMILY fam_0_a_rowid (a, rowid),
     FAMILY fam_1_b (b),
     CONSTRAINT check_b CHECK (b IN (1:::INT8, 2:::INT8, 3:::INT8)),
     CONSTRAINT unique_a_b UNIQUE WITHOUT INDEX (a, b),
     CONSTRAINT unique_a_partial UNIQUE WITHOUT INDEX (a) WHERE b > 0:::INT8,
     CONSTRAINT unique_b UNIQUE WITHOUT INDEX (b),
     CONSTRAINT unique_b_partial UNIQUE WITHOUT INDEX (b) WHERE a > 0:::INT8
   );
   COMMENT ON TABLE public.c IS 'table';
   COMMENT ON COLUMN public.c.a IS 'column';
   COMMENT ON INDEX public.c@c_a_b_idx IS 'index'

query TT
SHOW CREATE c WITH REDACT
----
c  CREATE TABLE public.c (
     a INT8 NOT NULL,
     b INT8 NULL,
     rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
     CONSTRAINT c_pkey PRIMARY KEY (rowid ASC),
     CONSTRAINT fk_a FOREIGN KEY (a) REFERENCES public.d(d),
     INDEX c_a_b_idx (a ASC, b ASC),
     UNIQUE INDEX unique_a (a ASC),
     FAMILY fam_0_a_rowid (a, rowid),
     FAMILY fam_1_b (b),
     CONSTRAINT check_b CHECK (b IN (‹×›:::INT8, ‹×›:::INT8, ‹×›:::INT8)),
     CONSTRAINT unique_a_b UNIQUE WITHOUT INDEX (a, b),
     CONSTRAINT unique_a_partial UNIQUE WITHOUT INDEX (a) WHERE b > ‹×›:::INT8,
     CONSTRAINT unique_b UNIQUE WITHOUT INDEX (b),
     CONSTRAINT unique_b_partial UNIQUE WITHOUT INDEX (b) WHERE a > ‹×›:::INT8
   );
   COMMENT ON TABLE public.c IS 'table';
   COMMENT ON COLUMN public.c.a IS 'column';
   COMMENT ON INDEX public.c@c_a_b_idx IS 'index'

subtest alter_column_type_not_break_show_create

statement ok
SET enable_experimental_alter_column_type_general = true;

statement ok
CREATE TABLE t (c INT);

statement ok
COMMENT ON COLUMN t.c IS 'first comment';

query T
SELECT create_statement FROM [SHOW CREATE TABLE t];
----
CREATE TABLE public.t (
  c INT8 NULL,
  rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
  CONSTRAINT t_pkey PRIMARY KEY (rowid ASC)
);
COMMENT ON COLUMN public.t.c IS 'first comment'

statement ok
ALTER TABLE t ALTER COLUMN c TYPE character varying;

query T
SELECT create_statement FROM [SHOW CREATE TABLE t];
----
CREATE TABLE public.t (
  c VARCHAR NULL,
  rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
  CONSTRAINT t_pkey PRIMARY KEY (rowid ASC)
);
COMMENT ON COLUMN public.t.c IS 'first comment'

query T
SELECT create_statement FROM [SHOW CREATE TABLE t WITH REDACT];
----
CREATE TABLE public.t (
  c VARCHAR NULL,
  rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
  CONSTRAINT t_pkey PRIMARY KEY (rowid ASC)
);
COMMENT ON COLUMN public.t.c IS 'first comment'


statement ok
CREATE TABLE t1 (
  k INT PRIMARY KEY,
  a INT UNIQUE,
  b STRING,
  INDEX (a, b)
)

query TT
SELECT * FROM [SHOW CREATE INDEXES FROM t1] ORDER BY index_name
----
t1_a_b_idx  CREATE INDEX t1_a_b_idx ON public.t1 (a ASC, b ASC)
t1_a_key    CREATE UNIQUE INDEX t1_a_key ON public.t1 (a ASC)
t1_pkey     CREATE UNIQUE INDEX t1_pkey ON public.t1 (k ASC)

query TT
SELECT * FROM [SHOW CREATE SECONDARY INDEXES FROM t1] ORDER BY index_name
----
t1_a_b_idx  CREATE INDEX t1_a_b_idx ON public.t1 (a ASC, b ASC)
t1_a_key    CREATE UNIQUE INDEX t1_a_key ON public.t1 (a ASC)

statement error relation "nonexistent" does not exist
SHOW CREATE INDEXES FROM nonexistent

statement error relation "nonexistent" does not exist
SHOW CREATE SECONDARY INDEXES FROM nonexistent

statement ok
CREATE FUNCTION r1() RETURNS INT LANGUAGE SQL AS 'SELECT 1'

statement ok
CREATE FUNCTION r1(i INT) RETURNS INT LANGUAGE SQL AS 'SELECT 1'

skipif config local-mixed-23.1
statement ok
CREATE PROCEDURE r1(s STRING) LANGUAGE SQL AS 'SELECT 1'

skipif config local-mixed-23.1
statement ok
CREATE PROCEDURE r1(s STRING, i INT) LANGUAGE SQL AS 'SELECT 1'

query TT
SELECT * FROM [SHOW CREATE FUNCTION r1] ORDER BY 2
----
r1  CREATE FUNCTION public.r1()
      RETURNS INT8
      VOLATILE
      NOT LEAKPROOF
      CALLED ON NULL INPUT
      LANGUAGE SQL
      AS $$
      SELECT 1;
    $$
r1  CREATE FUNCTION public.r1(IN i INT8)
      RETURNS INT8
      VOLATILE
      NOT LEAKPROOF
      CALLED ON NULL INPUT
      LANGUAGE SQL
      AS $$
      SELECT 1;
    $$

skipif config local-mixed-23.1
query TT
SELECT * FROM [SHOW CREATE PROCEDURE r1] ORDER BY 2
----
r1  CREATE PROCEDURE public.r1(IN s STRING)
      LANGUAGE SQL
      AS $$
      SELECT 1;
    $$
r1  CREATE PROCEDURE public.r1(IN s STRING, IN i INT8)
      LANGUAGE SQL
      AS $$
      SELECT 1;
    $$

statement ok
CREATE SCHEMA sc

statement ok
CREATE FUNCTION sc.r2() RETURNS INT LANGUAGE SQL AS 'SELECT 1'

skipif config local-mixed-23.1
statement ok
CREATE PROCEDURE sc.r2(s STRING) LANGUAGE SQL AS 'SELECT 1'

statement error pgcode 42883 pq: unknown function: r2()
SHOW CREATE FUNCTION r2;

skipif config local-mixed-23.1
statement error pgcode 42883 pq: unknown procedure: r2()
SHOW CREATE PROCEDURE r2;

statement ok
SET search_path = sc;

query TT
SHOW CREATE FUNCTION r2
----
r2  CREATE FUNCTION sc.r2()
      RETURNS INT8
      VOLATILE
      NOT LEAKPROOF
      CALLED ON NULL INPUT
      LANGUAGE SQL
      AS $$
      SELECT 1;
    $$

skipif config local-mixed-23.1
query TT
SHOW CREATE PROCEDURE r2
----
r2  CREATE PROCEDURE sc.r2(IN s STRING)
      LANGUAGE SQL
      AS $$
      SELECT 1;
    $$

# Regression test for #112134 - correctly parse and display PLpgSQL.
skipif config local-mixed-23.1
statement ok
CREATE FUNCTION f112134() RETURNS INT AS $$
  DECLARE
    x INT := 0;
    i INT := 0;
  BEGIN
    WHILE i < 3 LOOP
      x := x + i;
      i := i + 1;
    END LOOP;
    RETURN x;
  END
$$ LANGUAGE PLpgSQL;

# TODO(112136): Fix the formatting.
skipif config local-mixed-23.1
query TT
SHOW CREATE FUNCTION f112134;
----
f112134  CREATE FUNCTION sc.f112134()
           RETURNS INT8
           VOLATILE
           NOT LEAKPROOF
           CALLED ON NULL INPUT
           LANGUAGE plpgsql
           AS $$
           DECLARE
           x INT8 := 0;
           i INT8 := 0;
           BEGIN
           WHILE i < 3 LOOP
           x := x + i;
           i := i + 1;
           END LOOP;
           RETURN x;
           END
         $$
