# LogicTest: 5node 5node-disk

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT)

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i)

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT)

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify that EXPLAIN ANALYZE (DISTSQL) works in a distributed setting.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT count(*) FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 5 (40 B)
maximum memory usage: <hidden>
network usage: <hidden>
·
• group (scalar)
│ cluster nodes: <hidden>
│ actual row count: 1
│
└── • scan
      cluster nodes: <hidden>
      actual row count: 5
      KV rows read: 5
      KV bytes read: 40 B
      KV MVCC keys read: 0
      KV MVCC seeks: 0
      missing stats
      table: kv@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzslt9u0zAUxu95CutcbchV869bl6vBNKQJ1qK2gwtUTZ5zFKKmdrCdbmXqY_ECPBlKsoykG0kQQkNllz4nX87x7zu2fAv6Sww-TE_fnZ7MCJepMHsv98mbyficLFZAQcgAR2yJGvxPYAMFByi4QMEDCgOYU0iU5Ki1VNknt7ngLLgB36IQiSQ1WXhOgUuF4N-CiUyM4MOMXcU4QRag6ltAIUDDojgvs1gdJypaMrUGCtOECe2TXj8rPE6NT0ZSIFB4-4GYaIk-sb5_08WaS2FQmEiKB6nlinOywLUmClngE6sS1ogLfR9S8rr8yC4iV2uDZWhIXgOFK2b4Z9REpibJWsqkua4M2DDfUChWdwC0YSGCb29od0ivwlBhyIxU_UGd0cn4YjS7nIw_Tvf2gQLeIE8fbvwP-nR-2efP9lIhVYAKg1pv803zTuwtu6cX55dno9nesf13duLWdmJ3H0u7fSz7Tq_v7uJgtmCq2HnwpIPpdLfT6WCn2-t7u2hnC6aKnYdPaqfb3U63g51eL783d87OFkwVO4dPaqfX3U6vg52D3i6a2QKpYubRP_MGeKTPCepECo1bb4HH_2xlbwQMQiweFFqmiuN7JXlepliOc10eCFCbImsXizNRpLIGq2K7UezUxPa22Gmu3FLabVR7zWLvd_rOKeZAQaC5lmpBYmZQ8PW96WX8mkWmPg4BalQRi6Ov7OGslLK7-ecYrfDuDJSp8iCUueIwlNklas3C2gdW5xmsIxk0Ijlo5nnwzHMbyWEjkmEzz-Ezz20kR823hdVyUTVfc_8H0fnmxY8AAAD__0ZQeWU=

query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv JOIN kw ON kv.k = kw.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
·
• merge join
│ cluster nodes: <hidden>
│ actual row count: 5
│ equality: (k) = (k)
│ left cols are key
│ right cols are key
│
├── • scan
│     cluster nodes: <hidden>
│     actual row count: 5
│     KV rows read: 5
│     KV bytes read: 40 B
│     KV MVCC keys read: 0
│     KV MVCC seeks: 0
│     missing stats
│     table: kv@primary
│     spans: FULL SCAN
│
└── • scan
      cluster nodes: <hidden>
      actual row count: 5
      KV rows read: 5
      KV bytes read: 40 B
      KV MVCC keys read: 0
      KV MVCC seeks: 0
      missing stats
      table: kw@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsmt1u2zYUx-_3FMS52la5MiU7TQwUMDZ0QLo1HtJiN4MvGOnMFiSLLknb8YI81l5gTzbIqtL6Q5_oQlbyXUSK0uGP53_0N8MHkB8jGMH7N7-9-fkD-ZH8cjt5R8I1eTu5viHhhkxuSLh-GZLXJNy8DMGCmPt4wxYoYfQnULDAAQtcsGAAFgxhasFScA-l5CK55WE34Nq_h1HfgiBerlTSPLXA4wJh9AAqUBHCCD6wuwhvkfko7D5Y4KNiQbR7TbgeL0WwYGILFrxfsliOSM9OXvzrH0QFCxyR_r__yPTa47HCWAU8PuparD2PhLiVRCDzR6T_RbNEDOVTk-Cb7CaattxtFWZNl-QnsOCOKW-OkvCVWq5UOnQ3LmugMH20IL1KWWRzvduSOZPz_VmOk_unFkjFZggj-mg1g3dxAG9zDM-mrcfn5OL7_BwufBToHz7nRfLiSnedWIl3KGb4lgcxCpse5HGEf6nvx_TFD69FMJunf4IFk2S2Y2qNHWvsWuNESHiP3up4ERbsnixwwcWWsCjiHlOYrMOOZ9InP0ZE4WJJ_ECGZCXZDLPu2rg_o3QroFzFpzCdJHTDe3xp0-E-m5wZl4Y9zA17sBc2rS4gWl59bKdnu-0WEG2K71WF-tN-fE4uvmesP7SF9cepnolOBSG7PXvQ7kykTfFdVhBy-_E5ufieUchOC4XsVs9Et4KQBz172O5MpE3xXVUQcvvxObn4nlHIbguFPKieiYMKQh722p2HtCm8YbmMezYlLPYJJVzNUbQbpJML8hkFPWihoEs2m25RLnks8eCn_ukn9xOC6M8wXRfJV8LD3wX3dq9JLye7cbtfST5KlfY66cV1nHVJxVTRVsH_Sa6f5kv16C9yo49RbbgIScQUxt72KfysfcMCtT8xHyWKgEXB3-x41tmwT3r0MFjjJ-FmXZkwn_p2c856FygTFIeDvz6SK81IaAGSy6-ChNZFQvOTvLNpQoddZEJr1ELHuFpYHP1FbvSdXdArzUi01MJiJDQ_yTubJge1sCNMnEMm_S-ZuPufh8PBbuFgul-L-sZV0kFDT9zidChGkm-0v4UF1e2JDVzQbnriEia6PbEWvzBs6IlbnCbFSPKNthm1sDh63Z7YwAXtpicuYaLbE2uphRd1PHE3kLw6W-V6SDq5J12MJN9_m_HFLI5eu1U2UPfarbKWLL88W-V6SDq5J12MJN9_m1ELi6PXbpW11MISJrqtspYsvzpb5aP_MjQ9atHiNClhotssm5gnndytLmFS4MHN-GyWxd9Jv0ybnrfoLhPdjllPQTT7GIeJeVJgxA0piOczFyeg1Dp00RHxH50lMco1m8hEt2vWo51iJt10zcVMtO9cGwkl34ob8uWsczqtKw6xzvG0rpiJOofezkyM2L42Ekq-FTekIB4dVemga54-fvdfAAAA___ZB-8A

# Verify execution.
statement ok
SET vectorize = experimental_always

query I rowsort
SELECT kv.k FROM kv JOIN kw ON kv.k = kw.k
----
1
2
3
4
5

statement ok
RESET vectorize

# Regression test for #38919.
statement ok
SET optimizer = on

query B
SELECT EXISTS(SELECT * FROM kv WHERE k > 2)
----
true

statement ok
RESET optimizer

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.InvariantsChecker
│     └ *colexec.orderedAggregator
│       └ *colexecbase.distinctChainOps
│         └ *colexec.InvariantsChecker
│           └ *colexec.ParallelUnorderedSynchronizer
│             ├ *colexec.InvariantsChecker
│             │ └ *colexec.countOp
│             │   └ *colexec.InvariantsChecker
│             │     └ *colexecbase.simpleProjectOp
│             │       └ *colexecutils.CancelChecker
│             │         └ *colexec.InvariantsChecker
│             │           └ *colfetcher.ColBatchScan
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             └ *colexec.InvariantsChecker
│               └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecutils.CancelChecker
│               └ *colexec.InvariantsChecker
│                 └ *colfetcher.ColBatchScan
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecutils.CancelChecker
│               └ *colexec.InvariantsChecker
│                 └ *colfetcher.ColBatchScan
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecutils.CancelChecker
│               └ *colexec.InvariantsChecker
│                 └ *colfetcher.ColBatchScan
└ Node 5
  └ *colrpc.Outbox
    └ *colexecutils.deselectorOp
      └ *colexec.InvariantsChecker
        └ *colexec.countOp
          └ *colexec.InvariantsChecker
            └ *colexecbase.simpleProjectOp
              └ *colexecutils.CancelChecker
                └ *colexec.InvariantsChecker
                  └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv NATURAL INNER HASH JOIN kv kv2
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.InvariantsChecker
│     └ *colexec.orderedAggregator
│       └ *colexecbase.distinctChainOps
│         └ *colexec.InvariantsChecker
│           └ *colexec.ParallelUnorderedSynchronizer
│             ├ *colexec.InvariantsChecker
│             │ └ *colexec.countOp
│             │   └ *colexec.InvariantsChecker
│             │     └ *colexecbase.simpleProjectOp
│             │       └ *colexec.diskSpillerBase
│             │         ├ *colexecjoin.hashJoiner
│             │         │ ├ *colexec.InvariantsChecker
│             │         │ │ └ *colexec.ParallelUnorderedSynchronizer
│             │         │ │   ├ *colexec.InvariantsChecker
│             │         │ │   │ └ *colflow.routerOutputOp
│             │         │ │   │   └ *colflow.HashRouter
│             │         │ │   │     └ *colexec.InvariantsChecker
│             │         │ │   │       └ *colexecutils.CancelChecker
│             │         │ │   │         └ *colexec.InvariantsChecker
│             │         │ │   │           └ *colfetcher.ColBatchScan
│             │         │ │   ├ *colexec.InvariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   ├ *colexec.InvariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   ├ *colexec.InvariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   └ *colexec.InvariantsChecker
│             │         │ │     └ *colrpc.Inbox
│             │         │ └ *colexec.InvariantsChecker
│             │         │   └ *colexec.ParallelUnorderedSynchronizer
│             │         │     ├ *colexec.InvariantsChecker
│             │         │     │ └ *colflow.routerOutputOp
│             │         │     │   └ *colflow.HashRouter
│             │         │     │     └ *colexec.InvariantsChecker
│             │         │     │       └ *colexecutils.CancelChecker
│             │         │     │         └ *colexec.InvariantsChecker
│             │         │     │           └ *colfetcher.ColBatchScan
│             │         │     ├ *colexec.InvariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     ├ *colexec.InvariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     ├ *colexec.InvariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     └ *colexec.InvariantsChecker
│             │         │       └ *colrpc.Inbox
│             │         ├ *colexec.InvariantsChecker
│             │         ├ *colexec.InvariantsChecker
│             │         └ *colexec.hashBasedPartitioner
│             │           ├ *colexec.bufferExportingOperator
│             │           └ *colexec.bufferExportingOperator
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             └ *colexec.InvariantsChecker
│               └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexec.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.InvariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.InvariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.InvariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   └ *colexec.InvariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.InvariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.InvariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.InvariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     └ *colexec.InvariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.InvariantsChecker
│               ├ *colexec.InvariantsChecker
│               └ *colexec.hashBasedPartitioner
│                 ├ *colexec.bufferExportingOperator
│                 └ *colexec.bufferExportingOperator
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexec.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.InvariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.InvariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.InvariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   └ *colexec.InvariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.InvariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.InvariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.InvariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     └ *colexec.InvariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.InvariantsChecker
│               ├ *colexec.InvariantsChecker
│               └ *colexec.hashBasedPartitioner
│                 ├ *colexec.bufferExportingOperator
│                 └ *colexec.bufferExportingOperator
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexec.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.InvariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.InvariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.InvariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   └ *colexec.InvariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.InvariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.InvariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.InvariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     └ *colexec.InvariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.InvariantsChecker
│               ├ *colexec.InvariantsChecker
│               └ *colexec.hashBasedPartitioner
│                 ├ *colexec.bufferExportingOperator
│                 └ *colexec.bufferExportingOperator
└ Node 5
  └ *colrpc.Outbox
    └ *colexecutils.deselectorOp
      └ *colexec.InvariantsChecker
        └ *colexec.countOp
          └ *colexec.InvariantsChecker
            └ *colexecbase.simpleProjectOp
              └ *colexec.diskSpillerBase
                ├ *colexecjoin.hashJoiner
                │ ├ *colexec.InvariantsChecker
                │ │ └ *colexec.ParallelUnorderedSynchronizer
                │ │   ├ *colexec.InvariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.InvariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.InvariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.InvariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   └ *colexec.InvariantsChecker
                │ │     └ *colflow.routerOutputOp
                │ │       └ *colflow.HashRouter
                │ │         └ *colexec.InvariantsChecker
                │ │           └ *colexecutils.CancelChecker
                │ │             └ *colexec.InvariantsChecker
                │ │               └ *colfetcher.ColBatchScan
                │ └ *colexec.InvariantsChecker
                │   └ *colexec.ParallelUnorderedSynchronizer
                │     ├ *colexec.InvariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.InvariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.InvariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.InvariantsChecker
                │     │ └ *colrpc.Inbox
                │     └ *colexec.InvariantsChecker
                │       └ *colflow.routerOutputOp
                │         └ *colflow.HashRouter
                │           └ *colexec.InvariantsChecker
                │             └ *colexecutils.CancelChecker
                │               └ *colexec.InvariantsChecker
                │                 └ *colfetcher.ColBatchScan
                ├ *colexec.InvariantsChecker
                ├ *colexec.InvariantsChecker
                └ *colexec.hashBasedPartitioner
                  ├ *colexec.bufferExportingOperator
                  └ *colexec.bufferExportingOperator

# Test that SelOnDest flag of coldata.SliceArgs is respected when setting
# nulls.
statement ok
CREATE TABLE t1(a INT PRIMARY KEY, b INT)

statement ok
INSERT INTO t1 VALUES (1, NULL), (2, NULL)

query I rowsort
SELECT CASE WHEN a>1 THEN b*2 ELSE b*10 END FROM t1
----
NULL
NULL
