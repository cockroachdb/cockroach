# LogicTest: 5node 5node-disk

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT)

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i)

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT)

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify that EXPLAIN ANALYZE works in a distributed setting.
query T
SELECT url FROM [EXPLAIN ANALYZE SELECT count(*) FROM kv]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzclV1v2jwUx--fT2GdK_rIKOSFluaqrGMSGg0doXurospNjljUEGe2Q9shvvuUBLqAuiTVNMF66WP_c87__E7sJcjvEdjgDkaD8ylJRUTeTcYX5Hrw-XLUHzqk7_RHX74OSOvt0J26H0ZHZH3U52msWv8fFefvFh5QiHmADpujBPsadKBgAAUTKFhAoQsehURwH6XkIjuyzAXD4AHsDoUwTlKVhT0KPhcI9hJUqCIEG6bsNsIJsgCF1gEKASoWRnmau8VZIsI5E49AwU1YLG3S1rLE41TZxOExAoX3H4kK52iTjlyv0iRCSQSywCZ6Ebt9VE-hHnkDFG6Z8r-hJDxVSfa1LPdauQnp4K0oFKt19VKxGYKtr2hzh_3ZTOCMKS607rbB8_GVM72ZjD-5rSOggA_opyrkcdnQH9Vp_LbOX-WlMRcBCgy2avNW1U70HVbu1cXN0Jm2zvS_48TccqI3nym9fqY0o62ZBzdVNR5LLI73OlVGcxZGAxZmW7MOjkWNxxKLk72yMJuzMBuwsNr5jXVYLGo8llj09srCas7CasCi2z44EjUOSyROD-bde6bOCcqExxJ33r_nv9zJ3kUMZlg8opKnwsdLwf08TbEc57o8EKBUxa5eLIZxsZUVWBbrlWJjS6zvio3qzDWpzUq1VS22XlJ33sW8oRCjuufijtyzUJWxByhRhCwKf7DdidhInubcx3CB61nfbG4GfrP3sqHf9tat9HZc3ZjjV9yYk0pvverG9F5xY06rf8ROzR1QfYP8Y63xVv_9DAAA__-A7b52

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT * FROM kv JOIN kw ON kv.k = kw.k]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzcmt9v4kYQx9_7V6zm6a63nFkbcomlk0jbVOKag2sSVW1PPGzwNFg2Nt1dQtIo_3tlHJJA8A8sYXb9Ftu7eD8z85182eUB5L8huHB5dn728xWZi5D8ejH8Sr6f_fnt_LQ_IKeD0_O__j4j737pX15d_n7-njwN_TEdGNySL8P-gAQLMhyQ4PZjQD6TYPExGAGFKPZwwKcowf0ODCjYQMEBCh2g0IURhZmIxyhlLJIhD8sJfe8O3DYFP5rNVXJ7RGEcCwT3AZSvQgQXrvh1iBfIPRRWGyh4qLgfLl8T3PZmwp9ycQ8ULmc8ki5pWcmLf_uDKH-KLmnLp6v5LERJBHLPJSy9d32vnm8dk5-AwjVX4wlKEs_VbK5ckrzvaebqFoPRI4X0KgVZLfT6nky4nKwvsZeMH1GQit8guOyRViM_2iBfvCW3mN7sdib7y-fEwkOB3ubnfEheXGrUljB-RXGDX2I_QmGxjQoK8R_1rsc-vP8s_JtJ-idQGCa0PUZ7Nu05tJeUMN7heK78OHod3Cm_I1OcxuKe8DCMx1yh55L2Mp7JMzkWSVSJ58vg7YgKEX-JplMimvNoW6S2BmkQt-KZxbrr4dkKXWLZ3cxld9aWzcoLgBVL37JblqOxAFhV9k8lxK85u53JXqP4WTPFb5evJLuEipyW1dG4klhV9uMSKtKc3c5kr1FFdjNV5JSvJKeEijotq6txJbGq7CclVKQ5u53JXqOKnGaqqFO-kjolVNRtaVxHrCp5t1hDLYsRHnmEkVhNUGgcBTszCjWqqdNMNRVsEFygnMWRxI2vd9s_uZ0EEb0bTFMj47kY4zcRj5evSS-Hy3lLf-6hVOlTO73oR6tHUnGV_fVw78Frp1VTHuAoEyBCtYhFQBbcV68ZPJQofB76__FNvNWUZ_WN0b9drv_Vw5UMn5_tje2kFjaWw7Zbm9mFjWVXnvmJY12j4dgOLcPWsWXkAxxlApifnJNa2PbVMvLZWHblmZ-4jZZhGpy9Cdd-Deest8PNyU7uZLau17aODadT0WSZkNp8tmz_ZUhy6jFZh0mO4SarAK4ek7Wv_3XdiibLhMTls2X7L21aRj5APSbrMMkx3GQVwNVjsvbVMo52MVmGsX1qsIPKZzN7ByufLdtcadPq8wFqclCHUZXh21THDXZQ-Wxm72Dls2WbK21aRj5ATQ5qXy2jAM7sbaqTBjsoVvWkz4TEFcDV46EOlDmzd6gK4HIMljb9vgjBbBvFqh73NQCuHiO1t76hw1nggTKX47L06RuNPvJjO535mSatN2eSBzBTB4Ize0OqAM5wM5UPZ_h5XxFdts_Sp-Xv8ksA4_zGLj8FMO7f2S4_E2gYnOGHfkV02T5Ln77x5uDSZDM1evzh_wAAAP__EReExg==

# Verify execution.
statement ok
SET vectorize = experimental_always

query I rowsort
SELECT kv.k FROM kv JOIN kw ON kv.k = kw.k
----
1
2
3
4
5

statement ok
RESET vectorize

# Regression test for #38919.
statement ok
SET optimizer = on

query B
SELECT EXISTS(SELECT * FROM kv WHERE k > 2)
----
true

statement ok
RESET optimizer

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.oneShotOp
│       └ *colexec.distinctChainOps
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.countOp
│           │ └ *colexec.simpleProjectOp
│           │   └ *colexec.CancelChecker
│           │     └ *colfetcher.ColBatchScan
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.CancelChecker
            └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv NATURAL INNER HASH JOIN kv kv2
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.oneShotOp
│       └ *colexec.distinctChainOps
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.countOp
│           │ └ *colexec.simpleProjectOp
│           │   └ *colexec.diskSpillerBase
│           │     ├ *colexec.hashJoiner
│           │     │ ├ *colexec.ParallelUnorderedSynchronizer
│           │     │ │ ├ *colexec.routerOutputOp
│           │     │ │ │ └ *colexec.HashRouter
│           │     │ │ │   └ *colexec.CancelChecker
│           │     │ │ │     └ *colfetcher.ColBatchScan
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ └ *colrpc.Inbox
│           │     │ └ *colexec.ParallelUnorderedSynchronizer
│           │     │   ├ *colexec.routerOutputOp
│           │     │   │ └ *colexec.HashRouter
│           │     │   │   └ *colexec.CancelChecker
│           │     │   │     └ *colfetcher.ColBatchScan
│           │     │   ├ *colrpc.Inbox
│           │     │   ├ *colrpc.Inbox
│           │     │   ├ *colrpc.Inbox
│           │     │   └ *colrpc.Inbox
│           │     ├ *colexec.ParallelUnorderedSynchronizer
│           │     ├ *colexec.ParallelUnorderedSynchronizer
│           │     └ *colexec.externalHashJoiner
│           │       ├ *colexec.bufferExportingOperator
│           │       └ *colexec.bufferExportingOperator
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.diskSpillerBase
            ├ *colexec.hashJoiner
            │ ├ *colexec.ParallelUnorderedSynchronizer
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ └ *colexec.routerOutputOp
            │ │   └ *colexec.HashRouter
            │ │     └ *colexec.CancelChecker
            │ │       └ *colfetcher.ColBatchScan
            │ └ *colexec.ParallelUnorderedSynchronizer
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   └ *colexec.routerOutputOp
            │     └ *colexec.HashRouter
            │       └ *colexec.CancelChecker
            │         └ *colfetcher.ColBatchScan
            ├ *colexec.ParallelUnorderedSynchronizer
            ├ *colexec.ParallelUnorderedSynchronizer
            └ *colexec.externalHashJoiner
              ├ *colexec.bufferExportingOperator
              └ *colexec.bufferExportingOperator

# Test that SelOnDest flag of coldata.SliceArgs is respected when setting
# nulls.
statement ok
CREATE TABLE t1(a INT PRIMARY KEY, b INT)

statement ok
INSERT INTO t1 VALUES (1, NULL), (2, NULL)

query I rowsort
SELECT CASE WHEN a>1 THEN b*2 ELSE b*10 END FROM t1
----
NULL
NULL
