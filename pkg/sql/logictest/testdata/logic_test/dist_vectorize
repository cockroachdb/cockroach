# LogicTest: 5node 5node-disk

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT)

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i)

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT)

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify that EXPLAIN ANALYZE (DISTSQL) works in a distributed setting.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT count(*) FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 5 (40 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• group (scalar)
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 1
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows read: 5
      KV bytes read: 40 B
      MVCC step count: 0
      MVCC seek count: 0
      missing stats
      table: kv@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzslk9u2zoQxvfvFMSskgca-uvE0SqtkQJBG7uwnXRRGAEjDVTBMqmSVBLX8LF6gZ6ssGSlkp1KKorChZslZ_Rphr9vSHAJ6nMMHowv3l30J8QXKddH_x-TN6PhFZndAwUuAhywOSrwPoIFFGyg4AAFFyh0YUohkcJHpYRcf7LMBJfBI3gmhYgnqV6HpxR8IRG8JehIxwgeTNhdjCNkAUrDBAoBahbFWZnZ_XkiozmTC6AwThhXHukY68LDVHtkIDgChbc3REdz9Ij57avK177gGrmOBN9JSfGgiEQWeMTKI3cLjUWoR14Dhaubfp8ojUkOwiPmUxBxVg7eMe1_QkVEqpN0E8sqFAELpisK-WoDQGkWInjWiraH9CoMJYZMC2l0q4z6w-vB5HY0_DA-OgYK-Ih-urvx3-jT_mmfP9pLuZABSgwqvU1X9TuxtuweX1_dXg4mR-fWn9mJU9mJ1X4sreaxNOyO4RziYDZgKtl5stfBtNvbabew0-kY7iHa2YCpZOfpXu102tvptLDT7WT35sHZ2YCpZGdvr3a67e10W9jZ7RyimQ2QSmae_TVvgGf6HKFKBFe49RZ4_s_m-o2AQYj5g0KJVPr4Xgo_K5Mvh5kuCwSodJ618sUlz1PrBstiq1ZsV8TWttiur9xQ2qlVu_Vi91f6zihmQIGjfhByRmKmkfuLJ9OL-AOLdHUcAlQoIxZHX9jurBSyzUnxMbrHzWkpUsWRKXL5sSmyc1SKhZUP2p-VKpJuLZKTep4nLzy3kZzWIunV8-y98NxGclZ_W5gNF1X9NfdvEJ2u_vseAAD__x7aeMo=

query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv JOIN kw ON kv.k = kw.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• merge join
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ equality: (k) = (k)
│ left cols are key
│ right cols are key
│
├── • scan
│     nodes: <hidden>
│     regions: <hidden>
│     actual row count: 5
│     KV time: 0µs
│     KV contention time: 0µs
│     KV rows read: 5
│     KV bytes read: 40 B
│     MVCC step count: 0
│     MVCC seek count: 0
│     missing stats
│     table: kv@primary
│     spans: FULL SCAN
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows read: 5
      KV bytes read: 40 B
      MVCC step count: 0
      MVCC seek count: 0
      missing stats
      table: kw@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsmt1u2zYUx-_3FMS52la5MiU7TQQUMBZ0QLolGdKiN4MvGOnMFiSLLknH8YI81l5gTzbIqtP4Q5_oQlbyXUSK0uGP53_0N8MHkJ9j8ODDu9_fnX8kP5Nfb64vSXRH3l9fXJFoSa6vSHT3OiJvSbR8HYEFCQ_wis1QgvcnULDAAQtcsGAAFgxhbMFccB-l5CK95WE94CK4B69vQZjMFyptHlvgc4HgPYAKVYzgwUd2G-MNsgCF3QcLAlQsjNevie5GcxHOmFiBBR_mLJEe6dnpi3_7RFQ4Q4_0__1HZtc-TxQmKuTJXpfgS0kEssAjNGu5XSncNJ2SX8CCy0_n50QqnBOfLxLlkf5TI2L0vPGWKX-KkvCFmi--tK3fsGmgMH60ILvKWGzmersiUyan27McpfePLZCKTRA8-mg1g3eyA2-5D8-mrcfn5OL7-hwuAhQY7D7nVfriSncdWIlLFBN8z8MEhU138jjGv9SPI_rqp7cinEyzP8GC63S2I2qNHGvkWqNUSHiP_mJ_EWbsnsxwxsWKsDjmPlMYeKS_Jp_2yc8xUTibkyCUEVlINsFNd23cX1G6FVAukkOYDhK64j0-t-lwm03OjEvDHuaGPdgKm1YXEC2vPrbTs912C4g2xfemQv1pPz4nF98L1h_awvrjVM9Ep4KQ3Z49aHcm0qb4TisIuf34nFx8Lyhkp4VCdqtnoltByIOePWx3JtKm-M4qCLn9-JxcfC8oZLeFQh5Uz8RBBSEPe-3OQ9oU3rBcxj2bEpYEhBKupijaDdLJBfmCgh60UNAlm003KOc8kbjzU__wk_spQQwmmK2L5Avh4x-C--vXZJfX63HrX0kBSpX1OtnFRbLpkoqpoq2C_5NcP8uX6tGf5EafoFpyEZGYKUz81VP4m_YlC9X2xAKUKEIWh3-z_Vlvhn1Rro_h3Xraz7o2En7qW8950ztDmaLYHfztkZxpRkILkJx-EyS0LhKan-SdTRM67CITWqMWOsbVwuLoT3Kj7-yCnmlGoqUWFiOh-Une2TTZqYUdYeLsMuk_Z-Jufx52B7uFg-l2LeobV0kHDT1xi9OhGEm-0f4eFlS3JzZwQbvpiUuY6PbEWvzCsKEnbnGaFCPJN9pm1MLi6HV7YgMXtJueuISJbk-spRae1PHE3UDy5miV6yHp5J50MZJ8_23GF7M4eu1W2UDda7fKWrL89GiV6yHp5J50MZJ8_21GLSyOXrtV1lILS5jotspasvzsaJX3_svQ9KhFi9OkhIlus2xinnRyt7qESYEHN-OzWRZ_J_0ybXreortMdDtmPQXR7GMcJuZJgRE3pCAez1wcgFLr0EVHxL93lsQo12wiE92uWY92ipl00zUXM9G-c20klHwrbsiXs87ptK44xDrH07piJuocejsyMWL72kgo-VbckIK4d1Slg655_PjDfwEAAP__o-Ptyg==

# Verify execution.
statement ok
SET vectorize = experimental_always

query I rowsort
SELECT kv.k FROM kv JOIN kw ON kv.k = kw.k
----
1
2
3
4
5

statement ok
RESET vectorize

# Regression test for #38919.
query B
SELECT EXISTS(SELECT * FROM kv WHERE k > 2)
----
true

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv
----
│
├ Node 1
│ └ *colflow.BatchFlowCoordinator
│   └ *colexec.InvariantsChecker
│     └ *colexec.orderedAggregator
│       └ *colexecbase.distinctChainOps
│         └ *colexec.InvariantsChecker
│           └ *colexec.ParallelUnorderedSynchronizer
│             ├ *colexec.InvariantsChecker
│             │ └ *colexec.countOp
│             │   └ *colexec.InvariantsChecker
│             │     └ *colexecbase.simpleProjectOp
│             │       └ *colexecutils.CancelChecker
│             │         └ *colexec.InvariantsChecker
│             │           └ *colfetcher.ColBatchScan
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             └ *colexec.InvariantsChecker
│               └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecutils.CancelChecker
│               └ *colexec.InvariantsChecker
│                 └ *colfetcher.ColBatchScan
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecutils.CancelChecker
│               └ *colexec.InvariantsChecker
│                 └ *colfetcher.ColBatchScan
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecutils.CancelChecker
│               └ *colexec.InvariantsChecker
│                 └ *colfetcher.ColBatchScan
└ Node 5
  └ *colrpc.Outbox
    └ *colexecutils.deselectorOp
      └ *colexec.InvariantsChecker
        └ *colexec.countOp
          └ *colexec.InvariantsChecker
            └ *colexecbase.simpleProjectOp
              └ *colexecutils.CancelChecker
                └ *colexec.InvariantsChecker
                  └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv NATURAL INNER HASH JOIN kv kv2
----
│
├ Node 1
│ └ *colflow.BatchFlowCoordinator
│   └ *colexec.InvariantsChecker
│     └ *colexec.orderedAggregator
│       └ *colexecbase.distinctChainOps
│         └ *colexec.InvariantsChecker
│           └ *colexec.ParallelUnorderedSynchronizer
│             ├ *colexec.InvariantsChecker
│             │ └ *colexec.countOp
│             │   └ *colexec.InvariantsChecker
│             │     └ *colexecbase.simpleProjectOp
│             │       └ *colexec.diskSpillerBase
│             │         ├ *colexecjoin.hashJoiner
│             │         │ ├ *colexec.InvariantsChecker
│             │         │ │ └ *colexec.ParallelUnorderedSynchronizer
│             │         │ │   ├ *colexec.InvariantsChecker
│             │         │ │   │ └ *colflow.routerOutputOp
│             │         │ │   │   └ *colflow.HashRouter
│             │         │ │   │     └ *colexec.InvariantsChecker
│             │         │ │   │       └ *colexecutils.CancelChecker
│             │         │ │   │         └ *colexec.InvariantsChecker
│             │         │ │   │           └ *colfetcher.ColBatchScan
│             │         │ │   ├ *colexec.InvariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   ├ *colexec.InvariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   ├ *colexec.InvariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   └ *colexec.InvariantsChecker
│             │         │ │     └ *colrpc.Inbox
│             │         │ └ *colexec.InvariantsChecker
│             │         │   └ *colexec.ParallelUnorderedSynchronizer
│             │         │     ├ *colexec.InvariantsChecker
│             │         │     │ └ *colflow.routerOutputOp
│             │         │     │   └ *colflow.HashRouter
│             │         │     │     └ *colexec.InvariantsChecker
│             │         │     │       └ *colexecutils.CancelChecker
│             │         │     │         └ *colexec.InvariantsChecker
│             │         │     │           └ *colfetcher.ColBatchScan
│             │         │     ├ *colexec.InvariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     ├ *colexec.InvariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     ├ *colexec.InvariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     └ *colexec.InvariantsChecker
│             │         │       └ *colrpc.Inbox
│             │         ├ *colexec.InvariantsChecker
│             │         ├ *colexec.InvariantsChecker
│             │         └ *colexec.hashBasedPartitioner
│             │           ├ *colexec.bufferExportingOperator
│             │           └ *colexec.bufferExportingOperator
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             └ *colexec.InvariantsChecker
│               └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexec.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.InvariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.InvariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.InvariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   └ *colexec.InvariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.InvariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.InvariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.InvariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     └ *colexec.InvariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.InvariantsChecker
│               ├ *colexec.InvariantsChecker
│               └ *colexec.hashBasedPartitioner
│                 ├ *colexec.bufferExportingOperator
│                 └ *colexec.bufferExportingOperator
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexec.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.InvariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.InvariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.InvariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   └ *colexec.InvariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.InvariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.InvariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.InvariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     └ *colexec.InvariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.InvariantsChecker
│               ├ *colexec.InvariantsChecker
│               └ *colexec.hashBasedPartitioner
│                 ├ *colexec.bufferExportingOperator
│                 └ *colexec.bufferExportingOperator
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexec.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.InvariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.InvariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.InvariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   └ *colexec.InvariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.InvariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.InvariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.InvariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     └ *colexec.InvariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.InvariantsChecker
│               ├ *colexec.InvariantsChecker
│               └ *colexec.hashBasedPartitioner
│                 ├ *colexec.bufferExportingOperator
│                 └ *colexec.bufferExportingOperator
└ Node 5
  └ *colrpc.Outbox
    └ *colexecutils.deselectorOp
      └ *colexec.InvariantsChecker
        └ *colexec.countOp
          └ *colexec.InvariantsChecker
            └ *colexecbase.simpleProjectOp
              └ *colexec.diskSpillerBase
                ├ *colexecjoin.hashJoiner
                │ ├ *colexec.InvariantsChecker
                │ │ └ *colexec.ParallelUnorderedSynchronizer
                │ │   ├ *colexec.InvariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.InvariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.InvariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.InvariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   └ *colexec.InvariantsChecker
                │ │     └ *colflow.routerOutputOp
                │ │       └ *colflow.HashRouter
                │ │         └ *colexec.InvariantsChecker
                │ │           └ *colexecutils.CancelChecker
                │ │             └ *colexec.InvariantsChecker
                │ │               └ *colfetcher.ColBatchScan
                │ └ *colexec.InvariantsChecker
                │   └ *colexec.ParallelUnorderedSynchronizer
                │     ├ *colexec.InvariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.InvariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.InvariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.InvariantsChecker
                │     │ └ *colrpc.Inbox
                │     └ *colexec.InvariantsChecker
                │       └ *colflow.routerOutputOp
                │         └ *colflow.HashRouter
                │           └ *colexec.InvariantsChecker
                │             └ *colexecutils.CancelChecker
                │               └ *colexec.InvariantsChecker
                │                 └ *colfetcher.ColBatchScan
                ├ *colexec.InvariantsChecker
                ├ *colexec.InvariantsChecker
                └ *colexec.hashBasedPartitioner
                  ├ *colexec.bufferExportingOperator
                  └ *colexec.bufferExportingOperator

# Test that SelOnDest flag of coldata.SliceArgs is respected when setting
# nulls.
statement ok
CREATE TABLE t1(a INT PRIMARY KEY, b INT)

statement ok
INSERT INTO t1 VALUES (1, NULL), (2, NULL)

query I rowsort
SELECT CASE WHEN a>1 THEN b*2 ELSE b*10 END FROM t1
----
NULL
NULL
