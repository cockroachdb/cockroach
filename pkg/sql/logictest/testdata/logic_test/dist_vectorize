# LogicTest: 5node 5node-disk

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT)

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i)

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT)

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify that EXPLAIN ANALYZE works in a distributed setting.
query T
SELECT url FROM [EXPLAIN ANALYZE SELECT count(*) FROM kv]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzMlV1vm0wQhe_fX7GaK-fVWpgPJw5XcVNXQnIgNY76EaFoAyMXhbB0d0mTWv7vFZCq2E0WehNxybCHOYdnYLYgv2fgQrhYLs7XpBQZ-bAKLsj14vPlcu75ZO7Pl1--LsjovReuw4_LI_J8NOZlrkb_HzXn7x4ioJDzBH12jxLcazCBggUUbKDgAIUpRBQKwWOUkovqyLYWeMkjuBMKaV6UqipHFGIuENwtqFRlCC6s2W2GK2QJCmMCFBJULM3qNncPZ4VI75l4AgphwXLpkrFRNQ5K5RKf5wgUbpmKv6EkvFRFVa4eosoia5Uqv15AVHqPLpnISvSkUBKBLHHJjLwDCoL_-F0wIdpRaMTPrqViGwTX3NH-yeabjcANU1wY0_1g58GVv75ZBZ_C0VH_BPiIcalSnuuCvObcetX5H8NlzkWCApM9t9FOn808oBZeXdx4_np0Zr5VNnsvm9l_3szueTOssWEPZuI6srWoHA9s4qz-VKweVOyx4QyGSke2FpWTgVGx-1Oxe1BxxvWfbhhUOrK1qMwGRsXpT8XpQWU6HgyTjmQtJqcDY9Kx61coC55LPNicLz95Um1UTDbYrF_JSxHjpeBx3aa5DGpdXUhQquau2Vx4eXOrMtgWm1qxtSc2D8WWvnNHa1urdvRi519812-xfqEvTkGCEkXKsvQn6wL_9wTv25pqbR3rMx0PM9OJ1tZMn2k2zEyn-smddHw0-k_u7VJFu_9-BQAA__90Om5P

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT * FROM kv JOIN kw ON kv.k = kw.k]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzUWF1v2zYUfd-vIO5Tu9KVqI80EVDA2ZYBLlK7S_KwrfCDYnG2YEXSSCpuFuS_D7IWNHZsidRIWX6LbVLnnqtzTsj7CPzvBAK4vri8-PkGFSxBv15NPqOvF79_uTwfjdH5-Pzyjz8v0JtfRtc3179dvkX_Lf2xWri8R58mozFartBkjJb375foI1qu3i-ngCHNIjoO7yiH4CsQwOAABhcweIDBhymGnGUzynnGyiWP6w2j6BsENoY4zQtRfj3FMMsYheARRCwSCgHchLcJvaJhRJllA4aIijBO1jDL-2HO4ruQPQCG6zxMeYAGVgl8G4rZgnKUFSIvRIDKjaLIkxdflTWOJkjEdzRANi83PQjKEaNhFKBT9BNgYNnq-QsC0ycM1eaKwHOBtw9oEfLFZmnDcv0UAxfhnEJAnnA7xidbjFevGVukn5ydvZy_PydjEWU02n7OuxJYatWO9n2mbE4_ZXFKmUW2FJPQv8SbIXn39iOL54vqT8AwKZszJHjo4KGLh558N-k3OitEnKV1Td3s4vcOuRIdKtJd7HcSH2eDLLeIv0lZgogvQ8Sza5h4G0yIvL5Js6MtZ2C5PdQ3acv5g4Sne8rZ2cu5Q0-T4_G0I68KR8IJ7sBS4HEgJyhwPpVwQk85O3s5d-gE53ic4MqrwpVwgjew_B6qgrTlfCbhhJ5ydvZy7tAJ7vE4wZNXhSfhBH_QQ02Qtoz9Zh8MLILCNEIEZWJBWQ_ZO3vZd-gI73gc0XAfvqI8z1JOt25Au59sl42h0ZxW7eZZwWb0C8tma5jq42S9b31-jSgX1a9O9WGUPv_ERShkb1D27oas36V8CSdKJUSUUxaHSfxP-L9Qz_SgyjhKpSyi9kJ0dYP4hmCJgvocM-qrL-FEqQRdxM_0oKqrr74sovZCdHVjS336YJ1tWPslrLup-e3Nbu1msikc24x2PY3hLd-2elS1vDZCXFN4K6Iay-YGWE3ZrB4Wvsbwlu9GPapaXrdUX30JmsJbEdVYNjfAaspmdfWdqIR3d2V9OEgk16OaOkLXo6qlcEsr1pegK5J1y8DYefr0IJFcj2rqCF2PqpbCLdVXX4KuSFZXX0Ndps7TZ_2MZKJzxqFwqelkrqG9HaYOzw2wilHd9rJ_qDmHzkGHNlhNydxCgp2MP1RhFfO6rQQPNOwgStOODrXwapBiIp2112XqTN0Aayyd62GNzTaacNUCua0lVeZoXcakyqRNY1KoTNc6gzU3fFaar5n6r_BqzHKgdJ4-_fBvAAAA__-yKNYP

# Verify execution.
statement ok
SET vectorize = experimental_always

query I rowsort
SELECT kv.k FROM kv JOIN kw ON kv.k = kw.k
----
1
2
3
4
5

statement ok
RESET vectorize

# Regression test for #38919.
statement ok
SET optimizer = on

query B
SELECT EXISTS(SELECT * FROM kv WHERE k > 2)
----
true

statement ok
RESET optimizer

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.oneShotOp
│       └ *colexec.distinctChainOps
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.countOp
│           │ └ *colexec.simpleProjectOp
│           │   └ *colexec.CancelChecker
│           │     └ *colfetcher.ColBatchScan
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.CancelChecker
            └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv NATURAL INNER HASH JOIN kv kv2
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.oneShotOp
│       └ *colexec.distinctChainOps
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.countOp
│           │ └ *colexec.simpleProjectOp
│           │   └ *colexec.diskSpillerBase
│           │     ├ *colexec.hashJoiner
│           │     │ ├ *colexec.ParallelUnorderedSynchronizer
│           │     │ │ ├ *colexec.routerOutputOp
│           │     │ │ │ └ *colexec.HashRouter
│           │     │ │ │   └ *colexec.CancelChecker
│           │     │ │ │     └ *colfetcher.ColBatchScan
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ └ *colrpc.Inbox
│           │     │ └ *colexec.ParallelUnorderedSynchronizer
│           │     │   ├ *colexec.routerOutputOp
│           │     │   │ └ *colexec.HashRouter
│           │     │   │   └ *colexec.CancelChecker
│           │     │   │     └ *colfetcher.ColBatchScan
│           │     │   ├ *colrpc.Inbox
│           │     │   ├ *colrpc.Inbox
│           │     │   ├ *colrpc.Inbox
│           │     │   └ *colrpc.Inbox
│           │     ├ *colexec.ParallelUnorderedSynchronizer
│           │     ├ *colexec.ParallelUnorderedSynchronizer
│           │     └ *colexec.externalHashJoiner
│           │       ├ *colexec.bufferExportingOperator
│           │       └ *colexec.bufferExportingOperator
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.diskSpillerBase
            ├ *colexec.hashJoiner
            │ ├ *colexec.ParallelUnorderedSynchronizer
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ └ *colexec.routerOutputOp
            │ │   └ *colexec.HashRouter
            │ │     └ *colexec.CancelChecker
            │ │       └ *colfetcher.ColBatchScan
            │ └ *colexec.ParallelUnorderedSynchronizer
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   └ *colexec.routerOutputOp
            │     └ *colexec.HashRouter
            │       └ *colexec.CancelChecker
            │         └ *colfetcher.ColBatchScan
            ├ *colexec.ParallelUnorderedSynchronizer
            ├ *colexec.ParallelUnorderedSynchronizer
            └ *colexec.externalHashJoiner
              ├ *colexec.bufferExportingOperator
              └ *colexec.bufferExportingOperator

# Test that SelOnDest flag of coldata.SliceArgs is respected when setting
# nulls.
statement ok
CREATE TABLE t1(a INT PRIMARY KEY, b INT)

statement ok
INSERT INTO t1 VALUES (1, NULL), (2, NULL)

query I rowsort
SELECT CASE WHEN a>1 THEN b*2 ELSE b*10 END FROM t1
----
NULL
NULL
