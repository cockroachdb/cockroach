# LogicTest: 5node 5node-disk

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT)

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i)

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT)

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify that EXPLAIN ANALYZE works in a distributed setting.
query T
SELECT url FROM [EXPLAIN ANALYZE SELECT count(*) FROM kv]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzklVtP20wQhu-_X7Gaq_BpI8eHQPAVKU2lqMGhcegJWWixR6mF8bq7aw5F-e-VT9SJqG1UVUTlcmf9euadZ3b3AeT3CGxwJ7PJ8ZKkIiLvFvMTcj75fDobTx0ydsazL18npPd26i7dD7M9Un7q8zRWvf_3iu-vbjygEPMAHXaNEuxz0IGCARRMoGABhSF4FBLBfZSSi-yTh1wwDe7AHlAI4yRVWdij4HOBYD-AClWEYMOSXUa4QBag0AZAIUDFwihPc3VzlIjwmol7oOAmLJY26WtZ4nmqbOLwGIHC-49Ehddok4EsV2kSoSQCWWATvYhd3qvH0Ii8AQqXTPnfUBKeqiT7W5a7VFYhHbw1hWJVVi8VWyHY-pp2dzherQSumOJCG24aPJ6fOcuLxfyT29sDCniHfqpCHtcN_VGdxm_r_FVeGnMRoMBgozZv3exE32Llnp1cTJ1l70j_O07MDSd695nS22dKM_qauXNT1eKxxmL_RafK6M7C6MDC7GvWzrFo8VhjcfCiLMzuLMwOLKx-fmPtFosWjzUWoxdlYXVnYXVgMezvHIkWhzUShzvz7j1R5wJlwmOJW-_f038eZO8iBissHlHJU-HjqeB-nqZYznNdHghQqmJXLxbTuNjKCqyL9UaxsSHWt8VGc-aW1Gaj2moWW8-pO-9i3lCIUd1ycUUipjD270voVfSWhao-DAFKFCGLwh9se04qyeP0-xjeYHkCqs3qGFR7zzsKm46HjY73m9u1_-raddDoeNTcrtGra9dh81EetNwizXfQP9Ewb_3fzwAAAP__jk7ckg==

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT * FROM kv JOIN kw ON kv.k = kw.k]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzkmt9v2zYQx9_3VxD31K50ZUp22ggo4GzLAHep3SXBsK3wAyPdYkGy5JF0HC_I_z7IitPYsX5YgCOGfosk0tLn7r6nb0jdgfw3AhcuTs9Of74kMxGRX8-HX8i30z-_np30B-RkcHL219-n5M0v_YvLi9_P3pKHoT9mA8Mb8nnYH5BwToYDEt68D8knEs7fhyOgECc-DvgEJbjfgAEFGyg4QKEDFLowojAViYdSJiIdcrec0PdvwW1TCOLpTKWnRxS8RCC4d6ACFSG4cMmvIjxH7qOw2kDBR8WDaHmb8KY3FcGEiwVQuJjyWLqkZaU3_u0PooIJuqQtH45m0wglEch9l7Ds3NVCPZ76SH4CCldceWOUJJmp6Uy5JL3fw8zVKQajewrZUQayetCrBRlzOV5_xF46fkRBKn6N4LJ7Wo_8aIN8_pzcYnqz27ns338nET4K9Dd_511640qjtoTxC4pr_JwEMQqLbVRQhP-oNz327u0nEVyPsz-BwjCl7THas2nPob20hPEWvZkKkvhpcCf8lkxwkogF4VGUeFyh75L2Mp7pNemJNKrED2T4fESNiH-PplMhmrN4W6S2BmmQtJKpxbrr4dkKXeGxu7mP3Vl7bFZdAKxc-pbdshyNBcDqsn-oIH7N2e1c9hcUPzNT_Hb1SrIrqMhpWR2NK4nVZf9YQUWas9u57C-oIttMFTnVK8mpoKJOy-pqXEmsLvtxBRVpzm7nsr-gihwzVdSpXkmdCirqtjSuI1aXvFuuoZbFCI99wkiixig0joKdG4UXVFPHTDWVLBCco5wmscSNf--2_3I7DSL615ilRiYz4eFXkXjL22SHw-W8pT_3Uarsqp0d9OPVJam4yv_3cO_Ba2dVUx3gKBcgRjVPREgirjD2Fg8Eq7NzHqinZD5KFAGPgv_4JvRqyqMmPQxullRPLq7E-Xhtb8THDRKzAuLdWtIuxCy_Sk1NMusaiMx2aEW2jq2oGOAoF8DUlB03SLyvVlRMzPKr1NQkb7QiM5DtTeT2U2RnvfluTnYKJ7P1PtDWsZF1aprC15vwYuJ8F_lKUtakKWwmZUaawhLkJk3hvt633Zqm8PUmuZg430Vq04qKAZo0hc2kzEhTWILcpCncVys62sUUGkH84eB8YDGxiauJxcT5xlGb100xQKM-sBldGrk4-PHgfGAxsYmricXE-cZRm1ZUDNCoD9xXKypBNnFx8PjgfCCru0v8epNcgtykE2woyyauIZYgF5hHbd45ZQgmmkFWd6vYWOQm7eDe-pG-u8sNZbnAQerTjw5wu5jttF9shjif7XJrYwkbQjZxcbAE2UhLWIxs5L5yGXO-h9TntbPLNyuG-KNdPlox5EW7y2cuB4Fs5OZyGXO-h9SnHz3bIDfPEo7uf_g_AAD__2cz0Ak=

# Verify execution.
statement ok
SET vectorize = experimental_always

query I rowsort
SELECT kv.k FROM kv JOIN kw ON kv.k = kw.k
----
1
2
3
4
5

statement ok
RESET vectorize

# Regression test for #38919.
statement ok
SET optimizer = on

query B
SELECT EXISTS(SELECT * FROM kv WHERE k > 2)
----
true

statement ok
RESET optimizer

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.oneShotOp
│       └ *colexec.distinctChainOps
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.countOp
│           │ └ *colexec.simpleProjectOp
│           │   └ *colexec.CancelChecker
│           │     └ *colfetcher.ColBatchScan
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.CancelChecker
            └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv NATURAL INNER HASH JOIN kv kv2
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.oneShotOp
│       └ *colexec.distinctChainOps
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.countOp
│           │ └ *colexec.simpleProjectOp
│           │   └ *colexec.diskSpillerBase
│           │     ├ *colexec.hashJoiner
│           │     │ ├ *colexec.ParallelUnorderedSynchronizer
│           │     │ │ ├ *colexec.routerOutputOp
│           │     │ │ │ └ *colexec.HashRouter
│           │     │ │ │   └ *colexec.CancelChecker
│           │     │ │ │     └ *colfetcher.ColBatchScan
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ └ *colrpc.Inbox
│           │     │ └ *colexec.ParallelUnorderedSynchronizer
│           │     │   ├ *colexec.routerOutputOp
│           │     │   │ └ *colexec.HashRouter
│           │     │   │   └ *colexec.CancelChecker
│           │     │   │     └ *colfetcher.ColBatchScan
│           │     │   ├ *colrpc.Inbox
│           │     │   ├ *colrpc.Inbox
│           │     │   ├ *colrpc.Inbox
│           │     │   └ *colrpc.Inbox
│           │     ├ *colexec.ParallelUnorderedSynchronizer
│           │     ├ *colexec.ParallelUnorderedSynchronizer
│           │     └ *colexec.externalHashJoiner
│           │       ├ *colexec.bufferExportingOperator
│           │       └ *colexec.bufferExportingOperator
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.diskSpillerBase
            ├ *colexec.hashJoiner
            │ ├ *colexec.ParallelUnorderedSynchronizer
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ └ *colexec.routerOutputOp
            │ │   └ *colexec.HashRouter
            │ │     └ *colexec.CancelChecker
            │ │       └ *colfetcher.ColBatchScan
            │ └ *colexec.ParallelUnorderedSynchronizer
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   └ *colexec.routerOutputOp
            │     └ *colexec.HashRouter
            │       └ *colexec.CancelChecker
            │         └ *colfetcher.ColBatchScan
            ├ *colexec.ParallelUnorderedSynchronizer
            ├ *colexec.ParallelUnorderedSynchronizer
            └ *colexec.externalHashJoiner
              ├ *colexec.bufferExportingOperator
              └ *colexec.bufferExportingOperator

# Test that SelOnDest flag of coldata.SliceArgs is respected when setting
# nulls.
statement ok
CREATE TABLE t1(a INT PRIMARY KEY, b INT)

statement ok
INSERT INTO t1 VALUES (1, NULL), (2, NULL)

query I rowsort
SELECT CASE WHEN a>1 THEN b*2 ELSE b*10 END FROM t1
----
NULL
NULL
