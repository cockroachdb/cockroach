# LogicTest: 5node 5node-disk

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT)

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i)

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT)

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify that EXPLAIN ANALYZE works in a distributed setting.
query T
SELECT url FROM [EXPLAIN ANALYZE SELECT count(*) FROM kv]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzMld1um0AQhe_7FKu5squ1MD92bK7ipq6E5EBqHPUnQhGBkYuCWbq7pIksv3sFpAq2HKCqGnPJsIc5h29gtiB-xmCCO1_ML1Yk4zH5tHQuyc3869ViZtlkZs8W377PSe-j5a7cz4s-eT4asCyRvff98vz9gwcUEhai7W9QgHkDKlDQgIIOFAygMAKPQspZgEIwnh_ZFgIrfARzSCFK0kzmZY9CwDiCuQUZyRjBhJV_F-MS_RC5MgQKIUo_ios29w_nKY82Pn8CCm7qJ8IkAyVv7GTSJDZLECjc-TL4gYKwTKZ5OX-IzNK4Usr9Wg6R0QZNMhS56EmiIBz90CTalHwACpz9-lNRwdtRKNXPtoX01wimuqPto83Wa45rXzKujPaTXTjX9up26Xxxe_32EfARg0xGLHlJ8ppP7VWfL_ayhPEQOYZ73rxdfRL1AJJ7fXlr2aveufp_kuh7SdT2w6Q2D5OiDRS9O-PUEK4CYXzScdLaQ9BaQNAHitEdCA3hKhDOTgpBbw9BbwHBGBT_qI5AaAhXgTA5KQSjPQSjBYTRoDsIGqJVEEw7s9uO-FyiSFki8GDHHX_yMN99GK6xXJSCZTzAK86Cok156RS6ohCikOVdtbywkvJWbrAqVmvF2p5YPRRr9Z0bWuu1aqNebPyN7-ItFi_038dWHWlH53bf3qjW3rg-27jb2c5q7U3qs026nW1aP9HDho-p_lN8-3Te7t3vAAAA__8nPFQM

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT * FROM kv JOIN kw ON kv.k = kw.k]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzMWNFu2zYUfd9XEPepXelKpKQ0FlDA2ZYBLlK7i_OwrfCDYnG2YEfSKCpuEOTfB1kLEjs2RZmipbdYJnXOuT73hLyPkP27Ah8ml1eXv96gnK_Q79fjr-j75Z_fri6GI3Qxurj66-9L9O634eRm8sfVe_T_0p_Lhct79GU8HKHlGo1HaHn_cYk-o-X643IKGOIkZKPgjmXgfwcCGChgcACDCxg8mGJIeTJjWZbwYsnjZsMw_AG-jSGK01wUj6cYZgln4D-CiMSKgQ83we2KXbMgZNyyAUPIRBCtNjDL-0HKo7uAPwCGSRrEmY96VgF8G4jZgmUoyUWaCx8VG0Werl49KjgOx0hEd8xHdlZsehAsQ5wFoY9oH_0CGHiyfn5CYPqEodxdKnhmePuAFkG22OY2KNZPMWQimDPwyRM-TvLZjuT1W8kW6ahoelD0y3sSHjLOwt33fCiAlVbtqd9XxufsSxLFjFtkxzMr9o94NyAf3n_m0XxR_gkYxkV1BgQPKB44eOCql5P9YLNcREn8UtXtmr3Uw1GoRx7v07pX5ijpJalFvG2BCrS9erTdLdpE3bukul0t2rOcLnqXHCv6k0LDdlU0PSj6hA1LutqwVN0EVMH5Ts-qwbot59cQfa7g_K6KpgdFn9D5tKvOd9RN4Cg43-1ZXhdNQI4V3VdwfldF04OiT-h8p6vOd9VN4Co43-t10QLkWMlete97FkFBHCKCErFgvIvy6UH5J-wAt6sdUHFXvWZZmsQZ27mu7H-zXZSBhXNWFjdLcj5j33gy28CUH8ebfZvTZ8gyUX5Lyw_D-PmrTARC9bpjH5Rfh8KZLoXXhq6J3dfBrmgm-3xvN9WhR7R_Ho3aEM8oOKnhS2rGl3IKZ7oUNOT3dbCb8KWcHtH-eTRqs-PLpsHpLrj9GtzZ7ondzY50M9m2lG3G1a7ZwJcWT46tnfT68rUCX1O-4TSvANdK8yYixTMb-NLayLG1k17Fl3IKWoGvKd9wmleAa6V5E748qxP4TdJzqK1A71OLcS7HNntwl2Nr57hKy8op6MV5E86t4Gf2_H7eYpzLsc0e3OXY2jmu4ks5Bb04b8KXFfzMnt_73Y5zYngeI79YGZzENHLrNDit0S2O_uldaSTR7kzG8FBGB1wr1Rsxp8GRjW5x9I_wSuZsdTBDak1mWkj2N8Of5pK9Ef_K-Zk9zVeAG052ObjhuUwVunakK7VunalgG-FaZ3LYeLLUmRmeGNz0qL3W1NDU_5U3I6KWk3369NN_AQAA__-DJN1Z

# Verify execution.
statement ok
SET vectorize = experimental_always

query I rowsort
SELECT kv.k FROM kv JOIN kw ON kv.k = kw.k
----
1
2
3
4
5

statement ok
RESET vectorize

# Regression test for #38919.
statement ok
SET optimizer = on

query B
SELECT EXISTS(SELECT * FROM kv WHERE k > 2)
----
true

statement ok
RESET optimizer

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.oneShotOp
│       └ *colexec.distinctChainOps
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.countOp
│           │ └ *colexec.simpleProjectOp
│           │   └ *colexec.CancelChecker
│           │     └ *colfetcher.ColBatchScan
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.CancelChecker
            └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv NATURAL INNER HASH JOIN kv kv2
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.oneShotOp
│       └ *colexec.distinctChainOps
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.countOp
│           │ └ *colexec.simpleProjectOp
│           │   └ *colexec.diskSpillerBase
│           │     ├ *colexec.hashJoiner
│           │     │ ├ *colexec.ParallelUnorderedSynchronizer
│           │     │ │ ├ *colexec.routerOutputOp
│           │     │ │ │ └ *colexec.HashRouter
│           │     │ │ │   └ *colexec.CancelChecker
│           │     │ │ │     └ *colfetcher.ColBatchScan
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ └ *colrpc.Inbox
│           │     │ └ *colexec.ParallelUnorderedSynchronizer
│           │     │   ├ *colexec.routerOutputOp
│           │     │   │ └ *colexec.HashRouter
│           │     │   │   └ *colexec.CancelChecker
│           │     │   │     └ *colfetcher.ColBatchScan
│           │     │   ├ *colrpc.Inbox
│           │     │   ├ *colrpc.Inbox
│           │     │   ├ *colrpc.Inbox
│           │     │   └ *colrpc.Inbox
│           │     ├ *colexec.ParallelUnorderedSynchronizer
│           │     ├ *colexec.ParallelUnorderedSynchronizer
│           │     └ *colexec.externalHashJoiner
│           │       ├ *colexec.bufferExportingOperator
│           │       └ *colexec.bufferExportingOperator
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.diskSpillerBase
            ├ *colexec.hashJoiner
            │ ├ *colexec.ParallelUnorderedSynchronizer
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ └ *colexec.routerOutputOp
            │ │   └ *colexec.HashRouter
            │ │     └ *colexec.CancelChecker
            │ │       └ *colfetcher.ColBatchScan
            │ └ *colexec.ParallelUnorderedSynchronizer
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   └ *colexec.routerOutputOp
            │     └ *colexec.HashRouter
            │       └ *colexec.CancelChecker
            │         └ *colfetcher.ColBatchScan
            ├ *colexec.ParallelUnorderedSynchronizer
            ├ *colexec.ParallelUnorderedSynchronizer
            └ *colexec.externalHashJoiner
              ├ *colexec.bufferExportingOperator
              └ *colexec.bufferExportingOperator

# Test that SelOnDest flag of coldata.SliceArgs is respected when setting
# nulls.
statement ok
CREATE TABLE t1(a INT PRIMARY KEY, b INT)

statement ok
INSERT INTO t1 VALUES (1, NULL), (2, NULL)

query I rowsort
SELECT CASE WHEN a>1 THEN b*2 ELSE b*10 END FROM t1
----
NULL
NULL
