# LogicTest: 5node 5node-disk

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT)

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i)

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT)

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify that EXPLAIN ANALYZE (DISTSQL) works in a distributed setting.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT count(*) FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
·
• group (scalar)
│ actual row count: 1
│
└── • scan
      actual row count: 5
      KV rows read: 5
      KV bytes read: 40 B
      missing stats
      table: kv@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsVd1u2kwQvf-eYjVX5NMi_0KIr9JGqYTaQAWkvahQtNgj18J43d01CUU8Vl-gT1bZxhRTajuqKpCay53x8cw5Z3ZnDfJLCA6Mb9_d3kyIy5NItf6_IG9GwzsyXwKFiHs4YAuU4HwCAyiYQMECCjZQ6MCUQiy4i1JykX6yzgB97wkcnUIQxYlKw1MKLhcIzhpUoEIEByZsFuIImYdC04GCh4oFYVZmvryORbBgYgUUxjGLpEPaWlp4mCiHDHiEQOHtB6KCBTpE__5Nbs9JHKIkApnnECOPzVZqF-qR10BhxpT7GSXhiYrT_6XVt8giZMB0QyE_bfuXivkIjrGhzTm-8n2BPlNcaJ0yxZvh_WDyMBp-HLcugAI-oZuogEdlSn_UqfnbTn82mERceCjQK3U33VRzMQ78Gt_fPfQHk9a18be4WCUuRvPJMuonSzPbmnWGs1XDcs-P7olny2zuh9nAD6ut2WfoRw3LPT8uT-yH1dwPq4Efdjt7vc7NjxqWe370TuyH3dwPu4EfnfYZulHDcc-NqzPahEc6HaGMeSTxYCMe_7Oebkr0fMzXquSJcPG94G5WJj8OM1wW8FCqPGvkh36Up9IG98FGJdgsgY1DsFlduaa0VYm2q8H2c_rOVMwEhQjVIxdzEjKFkbva2V7EH1mgygPhoUQRsDD4yn6dlgK2uwUuBkvc3oQiWVyHIpdfiSK7QCmZX_pAf8YclmXpVMrSrda0-6LpMU0vK2XpVWvae9H0mKZX1S-HXvNoVT95_46q081_PwIAAP__TWwdhQ==
·
WARNING: this statement is experimental!

query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv JOIN kw ON kv.k = kw.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
·
• merge join
│ actual row count: 5
│ equality: (k) = (k)
│ left cols are key
│ right cols are key
│
├── • scan
│     actual row count: 5
│     KV rows read: 5
│     KV bytes read: 40 B
│     missing stats
│     table: kv@primary
│     spans: FULL SCAN
│
└── • scan
      actual row count: 5
      KV rows read: 5
      KV bytes read: 40 B
      missing stats
      table: kw@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsmt9u2zYUxu_3FMS52la6MiU7TQQUMDZ0QLs1HtJiN4MvGOnMFixLHknH8YI81l5gTzbIqtP6DyVZWEPO9F0kipK-H885-sycB5B_phDChze_vPnxI_me_HQzfE-md-Td8O01mS7J8JpM715OyWsyXb6cAoUsj_Gaz1BC-DswoOADhQAo9IBCH0YU5iKPUMpcFJc8rCe8je8h7FJIsvlCFadHFKJcIIQPoBKVIoTwkd-meIM8RuF1gUKMiifp-jHTu8FcJDMuVkDhw5xnMiQdr3jwz78RlcwwJN1__pafjhfzFCURyOOQsPLc7Uo9nbokPwCFW66iCUqSL9R8oUJSPPHTzM0pBqNHCuVRKWXzqrcrMuFysv2Sg-L6EQWp-BghZI-0nfaLHe3Lfe0es129r1X_-T65iFFgvHufF8WDG111AOR7FGN8lycZCo_tRFGKf6hvB-zFd69FMp6UfwKFYaF2wOjAp4OADoowxnuMFirJs228M35PZjjLxYrwNM0jrjAOSXdNtBiTkSi4kjiR0_0rWjD_zDNowHORHWJ1ENN13snnHutvA9LIbvDife2L97ZenDVPA1ZfAjy_4wVWpwFrq_5VgyJgvXpfq_4ZiwA71SLgN48mv0EuBR2vZ3U0sbbqLxvkkvXqfa36Z8wl_1RzKWgeTUGDXOp1vL7V0cTaqr9qkEvWq_e16p8xl4JTzaVe82jqNcilfsfqWGJttffrM6njMcKzmDCSqwkKqzn4Wg7PmFO9U82pmu2DG5TzPJO488Pv8J27BUaMx1gujswXIsJfRR6tH1MeDtfz1p49RqnKUb88eJtthqTiquqH41fH1y0jp7mEC62EDNUyF1OScoVZtHrSsDm_5InaVhejRJHwNPmL70vfTHvKzgiTu7W2LwY3afo0tta9GZ2hlHy8N_lrYLkyjoVVYLn8j7CwY7EwfcQ7HS6s7yoXdkSB9O0skNUSLrQSnF7ZK-NYDBXIaixMH_FOh8tOgXSIi7_Lpfsll2D7u7E7OaiczLZrU9fO8tpraaFPPC6qseht-f9mZc1baCtX1l0LXcPFvIU25Cj6LS30iYdLNRa9LbeoQFZLMG-hrVxZdy10DRfzFtpQgbw4xkK7g-XV2VgfyqJqLM7ud1dj0Zt1iz6n1RIsMNZWFgILjLWhkL88G-vjsTi7312NRW_WLSqQ1RIsMNaGCmQNF_PG2lDIX52N9cF_8bTt-jjxcKnhYt5a2xkvzm6E13CpMOwWfVPrRDjrrlnb1g-3uZj316aqpO0NJXbGS4Vrt6lKnts_NGCO6v9wqBrstbZY5rHt5GLeY5vKo2ou7nrsai4WbIpbCkbv2236rB7TPOeSlzyme84lt3FMS96Zi0U745aC0ft2m6rkXuOMox579PjNvwEAAP__B9GLyg==
·
WARNING: this statement is experimental!

# Verify execution.
statement ok
SET vectorize = experimental_always

query I rowsort
SELECT kv.k FROM kv JOIN kw ON kv.k = kw.k
----
1
2
3
4
5

statement ok
RESET vectorize

# Regression test for #38919.
statement ok
SET optimizer = on

query B
SELECT EXISTS(SELECT * FROM kv WHERE k > 2)
----
true

statement ok
RESET optimizer

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.distinctChainOps
│       └ *colexec.ParallelUnorderedSynchronizer
│         ├ *colexec.countOp
│         │ └ *colexec.simpleProjectOp
│         │   └ *colexec.CancelChecker
│         │     └ *colfetcher.ColBatchScan
│         ├ *colrpc.Inbox
│         ├ *colrpc.Inbox
│         ├ *colrpc.Inbox
│         └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.CancelChecker
            └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv NATURAL INNER HASH JOIN kv kv2
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.distinctChainOps
│       └ *colexec.ParallelUnorderedSynchronizer
│         ├ *colexec.countOp
│         │ └ *colexec.simpleProjectOp
│         │   └ *colexec.diskSpillerBase
│         │     ├ *colexec.hashJoiner
│         │     │ ├ *colexec.ParallelUnorderedSynchronizer
│         │     │ │ ├ *colexec.routerOutputOp
│         │     │ │ │ └ *colexec.HashRouter
│         │     │ │ │   └ *colexec.CancelChecker
│         │     │ │ │     └ *colfetcher.ColBatchScan
│         │     │ │ ├ *colrpc.Inbox
│         │     │ │ ├ *colrpc.Inbox
│         │     │ │ ├ *colrpc.Inbox
│         │     │ │ └ *colrpc.Inbox
│         │     │ └ *colexec.ParallelUnorderedSynchronizer
│         │     │   ├ *colexec.routerOutputOp
│         │     │   │ └ *colexec.HashRouter
│         │     │   │   └ *colexec.CancelChecker
│         │     │   │     └ *colfetcher.ColBatchScan
│         │     │   ├ *colrpc.Inbox
│         │     │   ├ *colrpc.Inbox
│         │     │   ├ *colrpc.Inbox
│         │     │   └ *colrpc.Inbox
│         │     ├ *colexec.ParallelUnorderedSynchronizer
│         │     ├ *colexec.ParallelUnorderedSynchronizer
│         │     └ *colexec.hashBasedPartitioner
│         │       ├ *colexec.bufferExportingOperator
│         │       └ *colexec.bufferExportingOperator
│         ├ *colrpc.Inbox
│         ├ *colrpc.Inbox
│         ├ *colrpc.Inbox
│         └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.hashBasedPartitioner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.hashBasedPartitioner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.hashBasedPartitioner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.diskSpillerBase
            ├ *colexec.hashJoiner
            │ ├ *colexec.ParallelUnorderedSynchronizer
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ └ *colexec.routerOutputOp
            │ │   └ *colexec.HashRouter
            │ │     └ *colexec.CancelChecker
            │ │       └ *colfetcher.ColBatchScan
            │ └ *colexec.ParallelUnorderedSynchronizer
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   └ *colexec.routerOutputOp
            │     └ *colexec.HashRouter
            │       └ *colexec.CancelChecker
            │         └ *colfetcher.ColBatchScan
            ├ *colexec.ParallelUnorderedSynchronizer
            ├ *colexec.ParallelUnorderedSynchronizer
            └ *colexec.hashBasedPartitioner
              ├ *colexec.bufferExportingOperator
              └ *colexec.bufferExportingOperator

# Test that SelOnDest flag of coldata.SliceArgs is respected when setting
# nulls.
statement ok
CREATE TABLE t1(a INT PRIMARY KEY, b INT)

statement ok
INSERT INTO t1 VALUES (1, NULL), (2, NULL)

query I rowsort
SELECT CASE WHEN a>1 THEN b*2 ELSE b*10 END FROM t1
----
NULL
NULL
