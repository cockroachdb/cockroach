# LogicTest: 5node 5node-disk

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT)

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i)

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT)

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify that EXPLAIN ANALYZE (DISTSQL) works in a distributed setting.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT count(*) FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
·
• group (scalar)
│ actual row count: 1
│
└── • scan
      actual row count: 5
      KV rows read: 5
      KV bytes read: 40 B
      missing stats
      table: kv@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzkVd1u2kwQvf-eYjVXyadFxj8Q4qu0USqhNlABaS8qFC32iFqYXXd3TUIRj9UX6JNVtjHFkNqOqorSXO6Mj2fOOTO7K1BfQnBhePPu5npEPBFzffb_OXkz6N-S2QIocOFjj81RgfsJTKBgAQUbKDhAoQVjCpEUHiolZPLJKgV0_UdwmxQCHsU6CY8peEIiuCvQgQ4RXBixSYgDZD5KowkUfNQsCNMys8VVJIM5k0ugMIwYVy5pGEnhfqxd0hMcgcLbD0QHc3RJ8_s3lZ09wTVyHQh-kNJxFKIiEpnvEjOLTZZ6G-qQ10BhwrT3GRURsY6SUkljG2QeMmG8ppCdNtSUZlME11zT-vRfTacSp0wLabSK7K_7d73R_aD_cXh2DhTwEb34kNJvdWr9stOfDcZcSB8l-oXuxutyLuaelcO72_tub3R2Zf4pLnaBi1l_6MzqoTOshmGf1thVCLBjVfvIY2fVt8qqYZXdMJzTsqpCgB2rLo5slV3fKruGVU4jvfNOyKoKAXas6hzZKqe-VU4Nq1qN0zKqgv6OUZd_0av7RKcDVJHgCvde36f_3ExeZfSnmD3hSsTSw_dSeGmZ7NhPcWnAR6WzrJkdujxLJQ3ugs1SsFUAm_tgq7xyRWm7FO2Ug53n9J2qmAoKHPWDkDMSMo3cW25tz-MPLNDFgfBRoQxYGHxlh9OSw7Zb4GGwwM0m5Ml8HfLc81aiyLtVyrtdLlr7hYp2Ucq7Uy5a54WKdlm-3M2Ke6X8VvqHZBuv__sRAAD__64PIoI=
·
WARNING: this statement is experimental!

query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv JOIN kw ON kv.k = kw.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
·
• merge join
│ actual row count: 5
│ equality: (k) = (k)
│ left cols are key
│ right cols are key
│
├── • scan
│     actual row count: 5
│     KV rows read: 5
│     KV bytes read: 40 B
│     missing stats
│     table: kv@primary
│     spans: FULL SCAN
│
└── • scan
      actual row count: 5
      KV rows read: 5
      KV bytes read: 40 B
      missing stats
      table: kw@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzkmt9u4kYUxu_7FKNz1XbNmrEhm1haCbXaStl2Q5Vd9abiYmKfBgvjoTNDCI3yWH2BPlllvGQDxGNjyRl7uMMeD_bvO3_8McMDyL8TCODzh98-_PyF_Eh-uR5_IrM78nF8eUVmKzK-IrO7tzPynsxWb2fgQMojvGJzlBD8CRQc8MABHxwYgANDmDiwEDxEKbnILnnYTLiM7iHoOxCni6XKTk8cCLlACB5AxSpBCOALu0nwGlmEwu2DAxEqFieb28zuRgsRz5lYgwOfFyyVAem52Y1__YOoeI4B6f_3r8yPQ54qTFXM04MhtVwkKIlAFgWE5udu1urp1Dn5CRy4YSqcoiR8qRZLFZDsYb7O3J6iMHl0ID_KKbcUN2syZXK6-_yj7PqJA1KxW4SAPjr1ZDnbk2V1KItLOyyMVyjMt-_hIkKB0f73vMluXOmqFzT-hOIWP_I4ReHSvdxL8C_1_Yi--eG9iG-n-UdwYJzRjqgz8pyR74yy5Md7DJeH8s7ZPZnjnIs1YUnCQ6YwCkh_o2g2JkOR6UqiWM4Or6ih-Tc9_Qp6LtOXtHpRpive4wuXDncFKsCu8ODDwgcf7Dw4rV4htLxxuF7P9btaIbSuMO8qtI4uC-MVCvOKrYPa2jq86onmVahAv-cOuppotK4w5xUqsMvCeIXCvGIFerZWoF890fwKFTjoucOuJhqtK8xFhQrssjBeoTCvWIG-rRU4qJ5ogwoVOOx1Nc1oXVmG5fXXcylhaUQo4WqKoqsSeYUSvWIlDmytxJIVk2uUC55K3PtB-_I39zMZMbrFPDiSL0WIvwsebm6TH4438za_KiKUKh_18oPLdDskFVO6H8SNy9fPM6c6wlkhQopqxcWMJExhGq6fGLbnVyxWu3QRShQxS-J_2CH6dtpTdYYY323Yng1uy_RprDHuC-PcVMN9XIs6hpsW56zdAadDa8HpEU3Ka2eT0iOcFSLYHboL49xNNSk9Ny3OWbsDvtekbAL39sH7z8H93ea8P9nXTqa7_aHfzhY3qGklux54PXex_-xM6MxbSTOhs9hKloCbt5JNvZeHNa1k1wOu5y72ny1qUnoE81bSTOgstpIl4OatZFNN6uwYK2kR97sTdZB6bntXMPXcxbazRS8lPUILHKSZWm2Bg2wqac9P1EHque1dwdRzF9vOFjUpPUILHGRTTaoE3LyDbCppL07UQdK6-9ldD3gJuHkPaSji9q5dloBrrGeL3kxlEPbaSFp3U9tycPNGsrFO1fa9cEMR1_jPNnWqk93YpkftbNtUsAe78i0zk4bAzZvJxlJdD26xmdSDt2Ad0xR5sQNt08vpmP_eWOWpjvnzjVUv5WP-snNC4C1YzDRFXuxA29SpDjb1bTWTk8fv_g8AAP__IgoNyQ==
·
WARNING: this statement is experimental!

# Verify execution.
statement ok
SET vectorize = experimental_always

query I rowsort
SELECT kv.k FROM kv JOIN kw ON kv.k = kw.k
----
1
2
3
4
5

statement ok
RESET vectorize

# Regression test for #38919.
statement ok
SET optimizer = on

query B
SELECT EXISTS(SELECT * FROM kv WHERE k > 2)
----
true

statement ok
RESET optimizer

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.distinctChainOps
│       └ *colexec.ParallelUnorderedSynchronizer
│         ├ *colexec.countOp
│         │ └ *colexec.simpleProjectOp
│         │   └ *colexec.CancelChecker
│         │     └ *colfetcher.ColBatchScan
│         ├ *colrpc.Inbox
│         ├ *colrpc.Inbox
│         ├ *colrpc.Inbox
│         └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.CancelChecker
            └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv NATURAL INNER HASH JOIN kv kv2
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.distinctChainOps
│       └ *colexec.ParallelUnorderedSynchronizer
│         ├ *colexec.countOp
│         │ └ *colexec.simpleProjectOp
│         │   └ *colexec.diskSpillerBase
│         │     ├ *colexec.hashJoiner
│         │     │ ├ *colexec.ParallelUnorderedSynchronizer
│         │     │ │ ├ *colexec.routerOutputOp
│         │     │ │ │ └ *colexec.HashRouter
│         │     │ │ │   └ *colexec.CancelChecker
│         │     │ │ │     └ *colfetcher.ColBatchScan
│         │     │ │ ├ *colrpc.Inbox
│         │     │ │ ├ *colrpc.Inbox
│         │     │ │ ├ *colrpc.Inbox
│         │     │ │ └ *colrpc.Inbox
│         │     │ └ *colexec.ParallelUnorderedSynchronizer
│         │     │   ├ *colexec.routerOutputOp
│         │     │   │ └ *colexec.HashRouter
│         │     │   │   └ *colexec.CancelChecker
│         │     │   │     └ *colfetcher.ColBatchScan
│         │     │   ├ *colrpc.Inbox
│         │     │   ├ *colrpc.Inbox
│         │     │   ├ *colrpc.Inbox
│         │     │   └ *colrpc.Inbox
│         │     ├ *colexec.ParallelUnorderedSynchronizer
│         │     ├ *colexec.ParallelUnorderedSynchronizer
│         │     └ *colexec.hashBasedPartitioner
│         │       ├ *colexec.bufferExportingOperator
│         │       └ *colexec.bufferExportingOperator
│         ├ *colrpc.Inbox
│         ├ *colrpc.Inbox
│         ├ *colrpc.Inbox
│         └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.hashBasedPartitioner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.hashBasedPartitioner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.hashBasedPartitioner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.diskSpillerBase
            ├ *colexec.hashJoiner
            │ ├ *colexec.ParallelUnorderedSynchronizer
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ └ *colexec.routerOutputOp
            │ │   └ *colexec.HashRouter
            │ │     └ *colexec.CancelChecker
            │ │       └ *colfetcher.ColBatchScan
            │ └ *colexec.ParallelUnorderedSynchronizer
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   └ *colexec.routerOutputOp
            │     └ *colexec.HashRouter
            │       └ *colexec.CancelChecker
            │         └ *colfetcher.ColBatchScan
            ├ *colexec.ParallelUnorderedSynchronizer
            ├ *colexec.ParallelUnorderedSynchronizer
            └ *colexec.hashBasedPartitioner
              ├ *colexec.bufferExportingOperator
              └ *colexec.bufferExportingOperator

# Test that SelOnDest flag of coldata.SliceArgs is respected when setting
# nulls.
statement ok
CREATE TABLE t1(a INT PRIMARY KEY, b INT)

statement ok
INSERT INTO t1 VALUES (1, NULL), (2, NULL)

query I rowsort
SELECT CASE WHEN a>1 THEN b*2 ELSE b*10 END FROM t1
----
NULL
NULL
