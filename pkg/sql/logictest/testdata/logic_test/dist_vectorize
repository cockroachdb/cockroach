# LogicTest: 5node 5node-disk

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT)

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i)

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT)

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify that EXPLAIN ANALYZE (DISTSQL) works in a distributed setting.
query T
SELECT url FROM [EXPLAIN ANALYZE (DISTSQL) SELECT count(*) FROM kv]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzkVdtO20AQfe9XrOYpVBslvgSCn0hpKkUNCY1Db8hCiz1KLcyuu7vmUpTP6g_0yyrbMY2B2kZVRVMed8bHM-ecmd0bUF8jcMAdjof7c5LIiLyZTQ_I8fDj4XgwmpDBZDD-9HlIWq9H7tx9N94iq099kXDdermVf3924QEFLgKcsHNU4ByDARRMoGABBRso9MCjEEvho1JCpp_cZIBRcAVOl0LI40SnYY-CLySCcwM61BGCA3N2GuEMWYCy0wUKAWoWRlmZs4u9WIbnTF4DBTdmXDmk3UkLTxPtkIngCBTevic6PEeHdH98V_nZF1wj16Hg91I6iSNURCILHGLksdNrfRvqk1dA4ZRp_wsqIhIdp6XSxlbIImSAt6SQn1bUlGYLBMdY0ub0B4uFxAXTQnZ6Zfb706PJ_GQ2_eC2toACXqGf3Kf0R52av-30V4MJFzJAiUGpO29ZzcW4Y6V7dHAymsxbe8bf4mKVuBjNh86oH7qO2e5YmzV2NQKsWbX9xGNnNrfKbGCV1e7Ym2VVjQBrVu08sVVWc6usBlbZ7ezO2yCragRYs6r_xFbZza2yG1jVa2-WUTX014za_Yde3Qc6naGKBVd45_V9-M_d9FXGYIH5E65EIn08lMLPyuTHaYbLAgEqnWeN_DDieSptcB1sVILNEti4CzarK9eUtirRdjXYfkzfmYqZoMBRXwp5RiKmkfvXt7YX8UsW6vJABKhQhiwKv7H701LAbrfAx_ACV5tQJIt1KHKPW4ky714l7-1q0bafqWg7lbz71aL1n6lou9XL3a25V6pvpf9INm_54mcAAAD__-ZmLts=

query T
SELECT url FROM [EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv JOIN kw ON kv.k = kw.k]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzkmt9u4kYUxu_7FKNztds1a8aGbGJpJdI2lbLNwjaJqrYrLib2abAwNp0ZQmiUx-oL9Mkq4yW7QDwYS87Ywx22Z7B_3_njjxkeQPwdgQdXZxdnP16TGY_Iz5eDj-Tz2e-fLk7P--S0f3rxx59n5NVP51fXV79evCZfhn6fDRzfkQ-D8z4Zz8mgT8Z3b8fkPRnP346HYEGcBNhnExTgfQYKFjhggQsWdMCCLgwtmPLERyESng55WE44D-7Ba1sQxtOZTE8PLfATjuA9gAxlhODBNbuJ8BJZgNxugwUBShZGy9uM73pTHk4YX4AFV1MWC4-07PTGv_xGZDhBj7T_-1dkx34SS4xlmMRbl-RsGqEgHFngEZqdu1nIp1PH5Aew4IZJf4SCJDM5nUmPpA_zZebqFIXhowXZUUa5orhZkBETo_Xn76XjhxYIyW4RPPpolZPlaEOW-bYsNm2wME6uMF-_J-EBcgw2v-dNeuNCo57R-CPyW_yQhDFym27kXoR_yVc9-ub1ex7ejrKPYMEgpe1Rq-dYPdfqpcmP9-jPtuWdsHsywUnCF4RFUeIziYFH2ktF02vC56muJAjFeHtECc2_6ukW0HMWP6fVszL1k1YytWl3XaAc7AIP3s198M7ag9PiFUJ3Nw7badluUyuElhXmXYHW0WRhnFxhXrB1UFNbh1M80ZwCFei27E5TE42WFea4QAU2WRgnV5gXrEDH1Ap0iyeaW6ACOy2729REo2WFOSlQgU0WxskV5gUr0DW1AjvFE61ToAK7raamGS0rS3d3_bVsSlgcEEoSOULeVImcXIlesBI7plbijhWTSxTTJBa48YP2-W9upzJicItZcEQy4z5-4om_vE12OFjOW_6qCFDI7KqTHZzHq0tCMqn6QVy5fO0sc4ojHOUixCjnCR-TiEmM_cUTw-r8nIVynS5AgTxkUfgP20ZfTXuqTh_DuyXbNxdXZfp0rTLuE-3cVMG9X4vah5vm56zZAaddY8HpHk3KqWeTUiMc5SKYHboT7dxVNSk1N83PWbMDvtGkTAJ3NsHb34K76815c7KrnEzX-0O7ni2uU9JKNj3wau58_9mY0Om3knpCZ7CV3AGu30pW9V7ulrSSTQ-4mjvff9aoSakR9FtJPaEz2EruANdvJatqUkf7WEmDuN8dqINUc5u7gqnmzredNXopqRFq4CD11GoNHGRVSXt8oA5SzW3uCqaaO9921qhJqRFq4CCralI7wPU7yKqS9uRAHSQtu5_d9IDvANfvITVF3Ny1yx3gCutZozfTLghzbSQtu6ltOLh-I1lZp6r7XrimiCv8Z5061cFubNO9drZNKtitXfmamUlN4PrNZGWprgY32EyqwWuwjqmLPN-B1unltM9_b4zyVPv8-caol_I-f9k5IPAaLGbqIs93oHXqVFub-qaayeHjd_8HAAD__6LdGiI=

# Verify execution.
statement ok
SET vectorize = experimental_always

query I rowsort
SELECT kv.k FROM kv JOIN kw ON kv.k = kw.k
----
1
2
3
4
5

statement ok
RESET vectorize

# Regression test for #38919.
statement ok
SET optimizer = on

query B
SELECT EXISTS(SELECT * FROM kv WHERE k > 2)
----
true

statement ok
RESET optimizer

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.oneShotOp
│       └ *colexec.distinctChainOps
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.countOp
│           │ └ *colexec.simpleProjectOp
│           │   └ *colexec.CancelChecker
│           │     └ *colfetcher.ColBatchScan
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.CancelChecker
            └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv NATURAL INNER HASH JOIN kv kv2
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.oneShotOp
│       └ *colexec.distinctChainOps
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.countOp
│           │ └ *colexec.simpleProjectOp
│           │   └ *colexec.diskSpillerBase
│           │     ├ *colexec.hashJoiner
│           │     │ ├ *colexec.ParallelUnorderedSynchronizer
│           │     │ │ ├ *colexec.routerOutputOp
│           │     │ │ │ └ *colexec.HashRouter
│           │     │ │ │   └ *colexec.CancelChecker
│           │     │ │ │     └ *colfetcher.ColBatchScan
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ └ *colrpc.Inbox
│           │     │ └ *colexec.ParallelUnorderedSynchronizer
│           │     │   ├ *colexec.routerOutputOp
│           │     │   │ └ *colexec.HashRouter
│           │     │   │   └ *colexec.CancelChecker
│           │     │   │     └ *colfetcher.ColBatchScan
│           │     │   ├ *colrpc.Inbox
│           │     │   ├ *colrpc.Inbox
│           │     │   ├ *colrpc.Inbox
│           │     │   └ *colrpc.Inbox
│           │     ├ *colexec.ParallelUnorderedSynchronizer
│           │     ├ *colexec.ParallelUnorderedSynchronizer
│           │     └ *colexec.externalHashJoiner
│           │       ├ *colexec.bufferExportingOperator
│           │       └ *colexec.bufferExportingOperator
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.diskSpillerBase
            ├ *colexec.hashJoiner
            │ ├ *colexec.ParallelUnorderedSynchronizer
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ └ *colexec.routerOutputOp
            │ │   └ *colexec.HashRouter
            │ │     └ *colexec.CancelChecker
            │ │       └ *colfetcher.ColBatchScan
            │ └ *colexec.ParallelUnorderedSynchronizer
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   └ *colexec.routerOutputOp
            │     └ *colexec.HashRouter
            │       └ *colexec.CancelChecker
            │         └ *colfetcher.ColBatchScan
            ├ *colexec.ParallelUnorderedSynchronizer
            ├ *colexec.ParallelUnorderedSynchronizer
            └ *colexec.externalHashJoiner
              ├ *colexec.bufferExportingOperator
              └ *colexec.bufferExportingOperator

# Test that SelOnDest flag of coldata.SliceArgs is respected when setting
# nulls.
statement ok
CREATE TABLE t1(a INT PRIMARY KEY, b INT)

statement ok
INSERT INTO t1 VALUES (1, NULL), (2, NULL)

query I rowsort
SELECT CASE WHEN a>1 THEN b*2 ELSE b*10 END FROM t1
----
NULL
NULL
