# LogicTest: 5node 5node-disk

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT)

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i)

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT)

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify that EXPLAIN ANALYZE works in a distributed setting.
query T
SELECT url FROM [EXPLAIN ANALYZE SELECT count(*) FROM kv]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzMlVtvm0AQhd_7K1bz5FRrYS5OHJ5ipa6E5EBqHPUSoYjAyEXGLN1dcpHl_14BqYKtZKFSK_zI7hzmnM-DZwviVwo2-LP57HJJCp6SzwvvitzOvl3Pp45Lpu50_v3HjAw-Of7S_zI_IS-lESsyOfh4UtevHwKgkLEY3XCDAuxb0IGCARRMoGABhTEEFHLOIhSC8bJkWwmc-AnsEYUkywtZHgcUIsYR7C3IRKYINizD-xQXGMbItRFQiFGGSVq1WT9c5DzZhPwZKPh5mAmbDLWysVdIm7gsQ6BwH8roJwrCCpmXx-VLZJGnjaPSr-MRmWzQJiMBFDh7FIRjGJeXwY5CXfriUchwhWDrO9o9x3S14rgKJePaeD_GpXfjLu8W3ld_cNLdLz5hVMiEZa-23_NpvOvz1V6RMR4jx3jPW7BTJ9EPfhH_5urOcZeDC_3_JDH3kujdJ0dvnxzNGGpmT7PTkqRB_LTX2TG6Ezc6EDeHmtUT8ZYkDeJnvRI3uxM3OxC3htW_Tx_EW5I0iE96JW51J251ID4e9sS7JUeD9_nR7KM3fC5Q5CwTeLCX3n7zqNxXGK-wXm6CFTzCa86iqk396FW66iBGIetbvX5wsvqqNNgU60qxsSfWD8WGunNLa1OpttRi6298VxQroP9gRilkKB8ZX5M0lJhFz38mYt_gWGnwVJ3u9NjTnSkNTtTpJsee7lw916OWT0r9QfaRL9h9-B0AAP__08pAKg==

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT * FROM kv JOIN kw ON kv.k = kw.k]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzMmV9vm0gUxd_3U4zuU7sdFw9_0gapkqPdrOQqtbtxHna38gMxszaCMOwwxI2ifPcVplVix4aBAYa32h7gd-6c4fTePEL6XwQuLC6vLn-7QRmP0B_X8y_o2-VfX68upjN0Mbu4-vufS_Tm9-niZvHn1Vv0Y-mvxcLwHn2eT2co3KL5DIX370P0CYXb9-ESMMTMpzPvjqbgfgMCGEzAYAEGGzA4sMSQcLaiacp4vuRxd8HU_w7uGEMQJ5nIv15iWDFOwX0EEYiIggs33m1Er6nnU26MAYNPhRdEu8eE95OEB3cefwAMi8SLUxeNjPzBt55YbWiKWCaSTLgov1BkSfTiq5xxOkciuKMuGqeAgbNtijj1_PzH5ROGYmmB-xPn9gFtvHSzDzLJ1y8xpMJbU3DJE26m7-xA3_a1PoMMQaF5UuHzfRj3Kaf-4X3e5Q-WWnWkWF8oX9PPLIgpN8iBGyL6r3gzIe_efuLBelP8EzDM81JMCJ6YeGLhiS1fO_qdrjIRsPi5hPs1e66HJVGPLD6m9ajMGRuxxCDOvkAJbKcetr2HTeSNSqoPomGODEu7UUlThR8kjuIgFJonFfZ4FMlQj6Ipv-OmhKetkVGDuhdP11D4UcLTg1BonlTYo6fNoXrakt9xS8LT9shwtO84aarwXMLTg1BonlTYo6etoXralt9xW8LTzkj7fpOm-pxqR48MgrzYRwQxsaFcu1bzpNYevW0P1dsVDeA1TRMWp_SgLTh-53FeBuqvaVHclGV8Rb9ytto9pvg43123-7-gT1NR_GoWH6bxz59S4QnZtmJ8Un4dhDNVhH33xlRsGQ9R5Akarx6aEJ2rEFWcp1YAifK2tV4z4mhAIjW8bXbj7XKEM1WE1otyrkLUjrfLAYnytrVeswNv94NkHiKNXyJZ-6ft8GKr9GKyb8txNyfD7jZ4GpS0nEg5h9SLohQ8nRRFS9JUICklTTuvMKfb4GlQs3Ii5RyS8XY5glLwdFIULUlTgaSUNO14-6xO8OgA_DC4YCkn0tHglBMp54zM66AcQS1Y-jCSlo7m4-CCpZxIR4NTTqScMzLeLkdQC5Z2vF1BqKOjOR96sJCOZ2VNGtMOZ2e9FE1HS1OBpN7TSA2Ghjgv63hg1j6SUr60ZPAOB2rdFE29sZEy-ACHZqTW1EyLm16N5trLmF4IdXQzFUhaMqYcScvcrIpJOXKkXgt15r56Xuh15sA9vbfqzIUHgaTnzzS1JsNd5d6rEZ72jFk-_fJ_AAAA__9VGqKu

# Verify execution.
statement ok
SET vectorize = experimental_always

query I rowsort
SELECT kv.k FROM kv JOIN kw ON kv.k = kw.k
----
1
2
3
4
5

statement ok
RESET vectorize

# Regression test for #38919.
statement ok
SET optimizer = on

query B
SELECT EXISTS(SELECT * FROM kv WHERE k > 2)
----
true

statement ok
RESET optimizer

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.oneShotOp
│       └ *colexec.distinctChainOps
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.countOp
│           │ └ *colexec.simpleProjectOp
│           │   └ *colexec.CancelChecker
│           │     └ *colfetcher.ColBatchScan
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colfetcher.ColBatchScan
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.CancelChecker
            └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv NATURAL INNER HASH JOIN kv kv2
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.oneShotOp
│       └ *colexec.distinctChainOps
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.countOp
│           │ └ *colexec.simpleProjectOp
│           │   └ *colexec.diskSpillerBase
│           │     ├ *colexec.hashJoiner
│           │     │ ├ *colexec.ParallelUnorderedSynchronizer
│           │     │ │ ├ *colexec.routerOutputOp
│           │     │ │ │ └ *colexec.HashRouter
│           │     │ │ │   └ *colexec.CancelChecker
│           │     │ │ │     └ *colfetcher.ColBatchScan
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ ├ *colrpc.Inbox
│           │     │ │ └ *colrpc.Inbox
│           │     │ └ *colexec.ParallelUnorderedSynchronizer
│           │     │   ├ *colexec.routerOutputOp
│           │     │   │ └ *colexec.HashRouter
│           │     │   │   └ *colexec.CancelChecker
│           │     │   │     └ *colfetcher.ColBatchScan
│           │     │   ├ *colrpc.Inbox
│           │     │   ├ *colrpc.Inbox
│           │     │   ├ *colrpc.Inbox
│           │     │   └ *colrpc.Inbox
│           │     ├ *colexec.ParallelUnorderedSynchronizer
│           │     ├ *colexec.ParallelUnorderedSynchronizer
│           │     └ *colexec.externalHashJoiner
│           │       ├ *colexec.bufferExportingOperator
│           │       └ *colexec.bufferExportingOperator
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ ├ *colrpc.Inbox
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   ├ *colrpc.Inbox
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.diskSpillerBase
│           ├ *colexec.hashJoiner
│           │ ├ *colexec.ParallelUnorderedSynchronizer
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colrpc.Inbox
│           │ │ ├ *colexec.routerOutputOp
│           │ │ │ └ *colexec.HashRouter
│           │ │ │   └ *colexec.CancelChecker
│           │ │ │     └ *colfetcher.ColBatchScan
│           │ │ └ *colrpc.Inbox
│           │ └ *colexec.ParallelUnorderedSynchronizer
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colrpc.Inbox
│           │   ├ *colexec.routerOutputOp
│           │   │ └ *colexec.HashRouter
│           │   │   └ *colexec.CancelChecker
│           │   │     └ *colfetcher.ColBatchScan
│           │   └ *colrpc.Inbox
│           ├ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.ParallelUnorderedSynchronizer
│           └ *colexec.externalHashJoiner
│             ├ *colexec.bufferExportingOperator
│             └ *colexec.bufferExportingOperator
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.diskSpillerBase
            ├ *colexec.hashJoiner
            │ ├ *colexec.ParallelUnorderedSynchronizer
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ ├ *colrpc.Inbox
            │ │ └ *colexec.routerOutputOp
            │ │   └ *colexec.HashRouter
            │ │     └ *colexec.CancelChecker
            │ │       └ *colfetcher.ColBatchScan
            │ └ *colexec.ParallelUnorderedSynchronizer
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   ├ *colrpc.Inbox
            │   └ *colexec.routerOutputOp
            │     └ *colexec.HashRouter
            │       └ *colexec.CancelChecker
            │         └ *colfetcher.ColBatchScan
            ├ *colexec.ParallelUnorderedSynchronizer
            ├ *colexec.ParallelUnorderedSynchronizer
            └ *colexec.externalHashJoiner
              ├ *colexec.bufferExportingOperator
              └ *colexec.bufferExportingOperator

# Test that SelOnDest flag of coldata.SliceArgs is respected when setting
# nulls.
statement ok
CREATE TABLE t1(a INT PRIMARY KEY, b INT)

statement ok
INSERT INTO t1 VALUES (1, NULL), (2, NULL)

query I rowsort
SELECT CASE WHEN a>1 THEN b*2 ELSE b*10 END FROM t1
----
NULL
NULL
