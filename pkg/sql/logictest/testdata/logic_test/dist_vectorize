# LogicTest: 5node-dist-vec

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT)

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i)

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT)

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify that EXPLAIN ANALYZE works in a distributed setting.
query T
SELECT url FROM [EXPLAIN ANALYZE SELECT count(*) FROM kv]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzMld9r4k4Uxd-_f8Vwn_TLuPmptXmqdF0QbOway_4ooaTJxQ2NM9mZibSI__uSpLBG6CQgrD7mzhzPOXwuzg7k7ww8CKbz6e2KFCIjX5aLO_I4_X4_n8x8MvEn8x8_p6T3eRasgq_zPnm_GvOCqd7__fr-yzYECown6EcblOA9ggUUbKDgAAUXKAwhpJALHqOUXJRXdpVglryCZ1JIWV6ochxSiLlA8HagUpUheLCKnjNcYpSgMEygkKCK0qyyyUW6icTbzcsWKAR5xKRHBkZpvCiUR3zOECg8Ryr-hZLwQuXluAynijw7GknMMFbpNlVvHjE_maWXVFGWEZVu0COmhHBPoZa8Z5UqWiN41p527zNZrwWuI8WFMWzWuV08-Kun5eJb0OuflhtfMS5Uyll7dvvD7H8jF4yLBAUmzbwpUxDu9RWtI2TBw93TzF_1bqx_V9FpVLS6r5vVvm6GPTCcMy9cS6MDGqOLWzi7Ow27Aw1nYLhnptHS6IDG1cXRcLrTcDrQcAfVX9w5abQ0OqAxvjgabncabgcaw8GZWbT0OWBxfXEsWh71JcqcM4mN3B_9slm-mZissX5lJS9EjPeCx5VN_bmodNUgQanqU6v-mLH6qAx4KLa0Yrshto7Ftt65xdrRql292D0l91ArHumdR6c4X2nFY73z-BTnaz0rs2VN9Et27B3u__sTAAD__5-G9jI=

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT * FROM kv JOIN kw ON kv.k = kw.k]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzUl01v6kYUhvf9FaOzurcZYo8_SLAUyVFLJSICaciibcTCwVOwcGzXHpNEEf-9Mm6UAvEcm9EVZhEpgB973sPzSod3yP4JwYFJf9j_5YHkaUh-ux_fksf-H3fD68GIXI-uh3_-1Sfffh1MHia_D7-T_y79ubxwuSI348GILF_IeESWq_MluSLLl_PlFChEsc9H3jPPwHkEBhQMoGACBQso2DClkKTxjGdZnBaXvG-Agf8Kjk4hiJJcFG9PKczilIPzDiIQIQcHHrynkN9zz-eppgMFnwsvCDePSdLg2Uvf3OUKKEwSL8oc0tGKBz95YrbgGYlzkeTCIcWBRJ6EO29lPOQzEawC8eYQ_Vwv7p8JLwyJCJ65Q_QMpmsKJVIe--NYT29k4WWL7QO5DKbr6eYecw4OW9PDcnYrcr585tRYm5IalUk_7xOnPk-5v32fIBI0iARQcNlZcYSG138xyFuezvlNHEQ81diOMSH_W3xz2dn3qzSYL8p_gcK4GJPLqGtQ16SupTZX_spnuQjiqGq2n3Mza8wtj2ST-Pj7ehajuBMnGrO30d1s9n42Wz2btZWN1bef4S3XjI5mtsZ-dmjSixo9b1VSozLpkXvOTqnnRn1DjBpdMDuaYpIf1oUGSS9rdKFVSY3KpEfugnFKXTDrG2LW6ILV0ezWGMIOTdqr0YVWJTUqkx65C-YpdcGqb4hVowt2pzV-sENz2ngTOhojXuQTRmKx4GlrMhuVmY_cCeuUOoH8ar7nWRJHGd-KVHVnvRgN9-e8_BKyOE9n_C6NZ5vHlC_HG26z2_o8E-WnRvliEJUfFQesD3dV4J4KzJTOzWw5zRqMzGgGd1XgngrMlM69M7I92til9f_TpnzephRm2zPTd2lLRXA5jAguhxHB5TAmOEIjgtsqgsthRHA5jAguhzHBERoRvKsi-IWKonIYUVQOI4rKYUxRhEYUvVRRVA4jisphRFE5jCmK0IiiPRVFmdKegNCIpAiNWIrQmKYYju0KasuC2ragti4o7gtqCwNT2hjY3srQyFY5jdkqpzFb5TRqK4JjtjZZlva_sybbUlMas7XRvtQYx2zdWx6ktk7XP_0bAAD__zfQBW8=

# Verify execution.
statement ok
SET vectorize = experimental_always

query I rowsort
SELECT kv.k FROM kv JOIN kw ON kv.k = kw.k
----
1
2
3
4
5

statement ok
RESET vectorize

# Regression test for #38919.
statement ok
SET optimizer = on

query B
SELECT EXISTS(SELECT * FROM kv WHERE k > 2)
----
true

statement ok
RESET optimizer

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.oneShotOp
│       └ *colexec.distinctChainOps
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.countOp
│           │ └ *colexec.simpleProjectOp
│           │   └ *colexec.CancelChecker
│           │     └ *colexec.colBatchScan
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colexec.colBatchScan
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colexec.colBatchScan
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.simpleProjectOp
│         └ *colexec.CancelChecker
│           └ *colexec.colBatchScan
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.simpleProjectOp
          └ *colexec.CancelChecker
            └ *colexec.colBatchScan

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv NATURAL INNER HASH JOIN kv kv2
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.orderedAggregator
│     └ *colexec.oneShotOp
│       └ *colexec.distinctChainOps
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colexec.countOp
│           │ └ *colexec.hashJoinEqOp
│           │   ├ *colexec.ParallelUnorderedSynchronizer
│           │   │ ├ *colexec.routerOutputOp
│           │   │ │ └ *colexec.HashRouter
│           │   │ │   └ *colexec.CancelChecker
│           │   │ │     └ *colexec.colBatchScan
│           │   │ ├ *colrpc.Inbox
│           │   │ ├ *colrpc.Inbox
│           │   │ ├ *colrpc.Inbox
│           │   │ └ *colrpc.Inbox
│           │   └ *colexec.ParallelUnorderedSynchronizer
│           │     ├ *colexec.routerOutputOp
│           │     │ └ *colexec.HashRouter
│           │     │   └ *colexec.CancelChecker
│           │     │     └ *colexec.colBatchScan
│           │     ├ *colrpc.Inbox
│           │     ├ *colrpc.Inbox
│           │     ├ *colrpc.Inbox
│           │     └ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.hashJoinEqOp
│         ├ *colexec.ParallelUnorderedSynchronizer
│         │ ├ *colrpc.Inbox
│         │ ├ *colexec.routerOutputOp
│         │ │ └ *colexec.HashRouter
│         │ │   └ *colexec.CancelChecker
│         │ │     └ *colexec.colBatchScan
│         │ ├ *colrpc.Inbox
│         │ ├ *colrpc.Inbox
│         │ └ *colrpc.Inbox
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colrpc.Inbox
│           ├ *colexec.routerOutputOp
│           │ └ *colexec.HashRouter
│           │   └ *colexec.CancelChecker
│           │     └ *colexec.colBatchScan
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           └ *colrpc.Inbox
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.hashJoinEqOp
│         ├ *colexec.ParallelUnorderedSynchronizer
│         │ ├ *colrpc.Inbox
│         │ ├ *colrpc.Inbox
│         │ ├ *colexec.routerOutputOp
│         │ │ └ *colexec.HashRouter
│         │ │   └ *colexec.CancelChecker
│         │ │     └ *colexec.colBatchScan
│         │ ├ *colrpc.Inbox
│         │ └ *colrpc.Inbox
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colexec.routerOutputOp
│           │ └ *colexec.HashRouter
│           │   └ *colexec.CancelChecker
│           │     └ *colexec.colBatchScan
│           ├ *colrpc.Inbox
│           └ *colrpc.Inbox
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexec.deselectorOp
│     └ *colexec.countOp
│       └ *colexec.hashJoinEqOp
│         ├ *colexec.ParallelUnorderedSynchronizer
│         │ ├ *colrpc.Inbox
│         │ ├ *colrpc.Inbox
│         │ ├ *colrpc.Inbox
│         │ ├ *colexec.routerOutputOp
│         │ │ └ *colexec.HashRouter
│         │ │   └ *colexec.CancelChecker
│         │ │     └ *colexec.colBatchScan
│         │ └ *colrpc.Inbox
│         └ *colexec.ParallelUnorderedSynchronizer
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colrpc.Inbox
│           ├ *colexec.routerOutputOp
│           │ └ *colexec.HashRouter
│           │   └ *colexec.CancelChecker
│           │     └ *colexec.colBatchScan
│           └ *colrpc.Inbox
└ Node 5
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.countOp
        └ *colexec.hashJoinEqOp
          ├ *colexec.ParallelUnorderedSynchronizer
          │ ├ *colrpc.Inbox
          │ ├ *colrpc.Inbox
          │ ├ *colrpc.Inbox
          │ ├ *colrpc.Inbox
          │ └ *colexec.routerOutputOp
          │   └ *colexec.HashRouter
          │     └ *colexec.CancelChecker
          │       └ *colexec.colBatchScan
          └ *colexec.ParallelUnorderedSynchronizer
            ├ *colrpc.Inbox
            ├ *colrpc.Inbox
            ├ *colrpc.Inbox
            ├ *colrpc.Inbox
            └ *colexec.routerOutputOp
              └ *colexec.HashRouter
                └ *colexec.CancelChecker
                  └ *colexec.colBatchScan

# Test that SelOnDest flag of coldata.SliceArgs is respected when setting
# nulls.
statement ok
CREATE TABLE t1(a INT PRIMARY KEY, b INT)

statement ok
INSERT INTO t1 VALUES (1, NULL), (2, NULL)

query I rowsort
SELECT CASE WHEN a>1 THEN b*2 ELSE b*10 END FROM t1
----
NULL
NULL
