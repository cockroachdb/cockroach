# LogicTest: 5node 5node-disk

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT)

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i)

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT)

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify that EXPLAIN ANALYZE (DISTSQL) works in a distributed setting.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT count(*) FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 5 (40 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• group (scalar)
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 1
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows read: 5
      KV bytes read: 40 B
      missing stats
      table: kv@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzslt1u0zAUx-95CutcdchVPrt1uRpUQ5pgLWq7cYGqyUuOQtTUDrazD6o-Fi_Ak6EkDTTtlgQhVKTu0uf45Pzz-x9bXoL6GoMHk_MP54Mp8UXKdef1EXk3Hl2S-R1Q4CLAIVugAu8zWEDBBgoOUHCBQg9mFBIpfFRKyGzLMi-4CB7AMylEPEl1Fp5R8IVE8JagIx0jeDBltzGOkQUoDRMoBKhZFOdt5ndniYwWTD4ChUnCuPJI18gaj1LtkaHgCBTeXxMdLdAj5o_vqlj7gmvkOhJ8JyXFvSISWeARq4jcPmosQ33yFihcXg8GRGlMChCkgw_aiLg-8oiZayw2IM6f23DLtP8FFRGpTjKpWSzvXAYsmK0oFKs1GKVZiOBZK9oe3pswlBgyLaTRq7IbjK6G05vx6NOkcwQU8AH9dBfIX-i0n9X5W17KhQxQYlDRNlvV_4m1NQaTq8ubi-G0c2b9mz9xKn9itR9Xq3lcDbtrOIc0sA34Nmw-3uvA2u1ttlvY7HQN95BsbsC3YfPJXm122tvstLDZ7eb37MHY3IBvw-b-Xm1229vstrC51z0kkxvgbZh8-t-8MZ7QOUaVCK5w663x9JfN7A2CQYjFg0WJVPr4UQo_b1MsR3ldHghQ6SJrFYsLXqQygZvFVm2xXSm2tovt-s4NrZ3aare-2P0T3TnFHChw1PdCzknMNHL_8ZfpZfyeRbo6DgEqlBGLo29sd1bKsvUJ8jG6w_UpKlPlUSpzxXEqswtUioWVDe3PShVJrxbJcT3P4xee20hOapH063n2X3huIzmtvy3Mhouq_po7DKKz1aufAQAA__9JnpzY

query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv JOIN kw ON kv.k = kw.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• merge join
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ equality: (k) = (k)
│ left cols are key
│ right cols are key
│
├── • scan
│     nodes: <hidden>
│     regions: <hidden>
│     actual row count: 5
│     KV time: 0µs
│     KV contention time: 0µs
│     KV rows read: 5
│     KV bytes read: 40 B
│     missing stats
│     table: kv@primary
│     spans: FULL SCAN
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows read: 5
      KV bytes read: 40 B
      missing stats
      table: kw@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsmt1u2zYUx-_3FASv2lWuTMlOEwEFjAUdkG6Jh7TozeALRjqzBcmiS9JxvCCPtRfYkw2S5rb-oL7QhZzpu4gf4uGP5xz9Q59HLD6nOMAf3v367vIj-hH9fDu-Rsk9ej--ukHJCo1vUHL_OkFvUbJ6nWAHZyyCGzoHgYPfMcEO9rCDfezgAXbwEE8cvOAsBCEYz4c8FhOuogcc9B0cZ4ulzJsnDg4ZBxw8YhnLFHCAP9K7FG6BRsDdPnZwBJLGabFMcj9a8HhO-Ro7-MOCZiJAPTdf-JdPSMZzCFD_779E-RyyTEImY5btdXG2EogDjQJEypa7tYRN0zn6CTv4-tPlJRISFihky0yiF_Ag3TiTLwPUL-wqBwAkqgF3VIYzEIgt5WIpA5S3FStvGgiePDm4fCoZbRjcrdGMitn27kf5-ImDhaRTwAF5crpBPduButqH6hJrsXpKrF_fw3gEHKLd97zKF2406sAJXQOfwnsWZ8BdsuP3KfwhX4zIq5dveTydlX9iB4_z3Y6IM_Kcke-M8sCDBwiX-4czpw9oDnPG14imKQuphChA_eJE8j7xOUUS5gsUxSJBS0GnsOlujfsrSr8BymV2CNNBQjesxxYuGW6zUey41uyh0uzBltmkeWCR-mzlej3XtzOwSFesbxrkK3uxekqsz5ivyBHmK6-5h3oNAt_vuQM7PZR0xXreIPDtxeopsT5j4HtHGPh-cw_1GwT-oOcO7fRQ0hXrRYPAtxerp8T6jIHvH2HgD5p76KBB4A97dvon6Qp1WB_2PZcgmkWIICZnwO0E7CkBP2MCGBxhAqi5RLsFsWCZgJ2risNv7ucEIZpCeS6CLXkIv3EWFsuUj-NiXvFfWwRClr1e-XCVbbqEpLLqquO_JNcv_aW59WdK6zOQK8YTlFIJWbj-Yv6mfUVjub2xCATwmKbxn3R_15tp_0Z0CPF9se1vujah_aWv2POmdw4iR7E7-fsjudCMhFQgOf8uSEhbJETt5Na6CRnayIS0yIWecbmw2vozpfXWHuiFZiRacmE1EqJ2cmvdZCcXWsLE22XS_5aJv_152J3sV04m27mob1wmHXTUxEfsDtVI1EL7_3CgujWxgQdqpyauYaJbE2vRC8OOmviI3aQaiVpom5ELq63XrYkNPFA7NXENE92aWEsuPGujie1A8uYkldshsfJOuhqJWn-b8cWstl67VDYw7rVLZS1efn6Syu2QWHknXY1Erb_NyIXV1muXylpyYQ0T3VJZi5dfnKTy3q8MXUstjthNapjoFssm-omVt9U1TCo0uBmfzTr7rdTLpGu9hb1MdCtmPQnR7DIOE_2kQogbkhBPNRcHoLQqurAk-PdqSYxSzSYy0a2a9cRONRM7VXM1E-0310ZCUUtxQ76cbarTbFGIbcrTbBETbYreTkyMuL42EopaihuSEPdKVSxUzZOnH_4JAAD__xHXNfU=

# Verify execution.
statement ok
SET vectorize = experimental_always

query I rowsort
SELECT kv.k FROM kv JOIN kw ON kv.k = kw.k
----
1
2
3
4
5

statement ok
RESET vectorize

# Regression test for #38919.
query B
SELECT EXISTS(SELECT * FROM kv WHERE k > 2)
----
true

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv
----
│
├ Node 1
│ └ *colflow.BatchFlowCoordinator
│   └ *colexec.InvariantsChecker
│     └ *colexec.orderedAggregator
│       └ *colexecbase.distinctChainOps
│         └ *colexec.InvariantsChecker
│           └ *colexec.ParallelUnorderedSynchronizer
│             ├ *colexec.InvariantsChecker
│             │ └ *colexec.countOp
│             │   └ *colexec.InvariantsChecker
│             │     └ *colexecbase.simpleProjectOp
│             │       └ *colexecutils.CancelChecker
│             │         └ *colexec.InvariantsChecker
│             │           └ *colfetcher.ColBatchScan
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             └ *colexec.InvariantsChecker
│               └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecutils.CancelChecker
│               └ *colexec.InvariantsChecker
│                 └ *colfetcher.ColBatchScan
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecutils.CancelChecker
│               └ *colexec.InvariantsChecker
│                 └ *colfetcher.ColBatchScan
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexecutils.CancelChecker
│               └ *colexec.InvariantsChecker
│                 └ *colfetcher.ColBatchScan
└ Node 5
  └ *colrpc.Outbox
    └ *colexecutils.deselectorOp
      └ *colexec.InvariantsChecker
        └ *colexec.countOp
          └ *colexec.InvariantsChecker
            └ *colexecbase.simpleProjectOp
              └ *colexecutils.CancelChecker
                └ *colexec.InvariantsChecker
                  └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC, VERBOSE) SELECT count(*) FROM kv NATURAL INNER HASH JOIN kv kv2
----
│
├ Node 1
│ └ *colflow.BatchFlowCoordinator
│   └ *colexec.InvariantsChecker
│     └ *colexec.orderedAggregator
│       └ *colexecbase.distinctChainOps
│         └ *colexec.InvariantsChecker
│           └ *colexec.ParallelUnorderedSynchronizer
│             ├ *colexec.InvariantsChecker
│             │ └ *colexec.countOp
│             │   └ *colexec.InvariantsChecker
│             │     └ *colexecbase.simpleProjectOp
│             │       └ *colexec.diskSpillerBase
│             │         ├ *colexecjoin.hashJoiner
│             │         │ ├ *colexec.InvariantsChecker
│             │         │ │ └ *colexec.ParallelUnorderedSynchronizer
│             │         │ │   ├ *colexec.InvariantsChecker
│             │         │ │   │ └ *colflow.routerOutputOp
│             │         │ │   │   └ *colflow.HashRouter
│             │         │ │   │     └ *colexec.InvariantsChecker
│             │         │ │   │       └ *colexecutils.CancelChecker
│             │         │ │   │         └ *colexec.InvariantsChecker
│             │         │ │   │           └ *colfetcher.ColBatchScan
│             │         │ │   ├ *colexec.InvariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   ├ *colexec.InvariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   ├ *colexec.InvariantsChecker
│             │         │ │   │ └ *colrpc.Inbox
│             │         │ │   └ *colexec.InvariantsChecker
│             │         │ │     └ *colrpc.Inbox
│             │         │ └ *colexec.InvariantsChecker
│             │         │   └ *colexec.ParallelUnorderedSynchronizer
│             │         │     ├ *colexec.InvariantsChecker
│             │         │     │ └ *colflow.routerOutputOp
│             │         │     │   └ *colflow.HashRouter
│             │         │     │     └ *colexec.InvariantsChecker
│             │         │     │       └ *colexecutils.CancelChecker
│             │         │     │         └ *colexec.InvariantsChecker
│             │         │     │           └ *colfetcher.ColBatchScan
│             │         │     ├ *colexec.InvariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     ├ *colexec.InvariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     ├ *colexec.InvariantsChecker
│             │         │     │ └ *colrpc.Inbox
│             │         │     └ *colexec.InvariantsChecker
│             │         │       └ *colrpc.Inbox
│             │         ├ *colexec.InvariantsChecker
│             │         ├ *colexec.InvariantsChecker
│             │         └ *colexec.hashBasedPartitioner
│             │           ├ *colexec.bufferExportingOperator
│             │           └ *colexec.bufferExportingOperator
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             ├ *colexec.InvariantsChecker
│             │ └ *colrpc.Inbox
│             └ *colexec.InvariantsChecker
│               └ *colrpc.Inbox
├ Node 2
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexec.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.InvariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.InvariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.InvariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   └ *colexec.InvariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.InvariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.InvariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.InvariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     └ *colexec.InvariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.InvariantsChecker
│               ├ *colexec.InvariantsChecker
│               └ *colexec.hashBasedPartitioner
│                 ├ *colexec.bufferExportingOperator
│                 └ *colexec.bufferExportingOperator
├ Node 3
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexec.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.InvariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.InvariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.InvariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   └ *colexec.InvariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.InvariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.InvariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.InvariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     └ *colexec.InvariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.InvariantsChecker
│               ├ *colexec.InvariantsChecker
│               └ *colexec.hashBasedPartitioner
│                 ├ *colexec.bufferExportingOperator
│                 └ *colexec.bufferExportingOperator
├ Node 4
│ └ *colrpc.Outbox
│   └ *colexecutils.deselectorOp
│     └ *colexec.InvariantsChecker
│       └ *colexec.countOp
│         └ *colexec.InvariantsChecker
│           └ *colexecbase.simpleProjectOp
│             └ *colexec.diskSpillerBase
│               ├ *colexecjoin.hashJoiner
│               │ ├ *colexec.InvariantsChecker
│               │ │ └ *colexec.ParallelUnorderedSynchronizer
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colrpc.Inbox
│               │ │   ├ *colexec.InvariantsChecker
│               │ │   │ └ *colflow.routerOutputOp
│               │ │   │   └ *colflow.HashRouter
│               │ │   │     └ *colexec.InvariantsChecker
│               │ │   │       └ *colexecutils.CancelChecker
│               │ │   │         └ *colexec.InvariantsChecker
│               │ │   │           └ *colfetcher.ColBatchScan
│               │ │   └ *colexec.InvariantsChecker
│               │ │     └ *colrpc.Inbox
│               │ └ *colexec.InvariantsChecker
│               │   └ *colexec.ParallelUnorderedSynchronizer
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colrpc.Inbox
│               │     ├ *colexec.InvariantsChecker
│               │     │ └ *colflow.routerOutputOp
│               │     │   └ *colflow.HashRouter
│               │     │     └ *colexec.InvariantsChecker
│               │     │       └ *colexecutils.CancelChecker
│               │     │         └ *colexec.InvariantsChecker
│               │     │           └ *colfetcher.ColBatchScan
│               │     └ *colexec.InvariantsChecker
│               │       └ *colrpc.Inbox
│               ├ *colexec.InvariantsChecker
│               ├ *colexec.InvariantsChecker
│               └ *colexec.hashBasedPartitioner
│                 ├ *colexec.bufferExportingOperator
│                 └ *colexec.bufferExportingOperator
└ Node 5
  └ *colrpc.Outbox
    └ *colexecutils.deselectorOp
      └ *colexec.InvariantsChecker
        └ *colexec.countOp
          └ *colexec.InvariantsChecker
            └ *colexecbase.simpleProjectOp
              └ *colexec.diskSpillerBase
                ├ *colexecjoin.hashJoiner
                │ ├ *colexec.InvariantsChecker
                │ │ └ *colexec.ParallelUnorderedSynchronizer
                │ │   ├ *colexec.InvariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.InvariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.InvariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   ├ *colexec.InvariantsChecker
                │ │   │ └ *colrpc.Inbox
                │ │   └ *colexec.InvariantsChecker
                │ │     └ *colflow.routerOutputOp
                │ │       └ *colflow.HashRouter
                │ │         └ *colexec.InvariantsChecker
                │ │           └ *colexecutils.CancelChecker
                │ │             └ *colexec.InvariantsChecker
                │ │               └ *colfetcher.ColBatchScan
                │ └ *colexec.InvariantsChecker
                │   └ *colexec.ParallelUnorderedSynchronizer
                │     ├ *colexec.InvariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.InvariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.InvariantsChecker
                │     │ └ *colrpc.Inbox
                │     ├ *colexec.InvariantsChecker
                │     │ └ *colrpc.Inbox
                │     └ *colexec.InvariantsChecker
                │       └ *colflow.routerOutputOp
                │         └ *colflow.HashRouter
                │           └ *colexec.InvariantsChecker
                │             └ *colexecutils.CancelChecker
                │               └ *colexec.InvariantsChecker
                │                 └ *colfetcher.ColBatchScan
                ├ *colexec.InvariantsChecker
                ├ *colexec.InvariantsChecker
                └ *colexec.hashBasedPartitioner
                  ├ *colexec.bufferExportingOperator
                  └ *colexec.bufferExportingOperator

# Test that SelOnDest flag of coldata.SliceArgs is respected when setting
# nulls.
statement ok
CREATE TABLE t1(a INT PRIMARY KEY, b INT)

statement ok
INSERT INTO t1 VALUES (1, NULL), (2, NULL)

query I rowsort
SELECT CASE WHEN a>1 THEN b*2 ELSE b*10 END FROM t1
----
NULL
NULL

# Regression test for the wrapped row-execution processor not satisfying the
# width of an integer column during a cast and the vectorized engine not
# performing the cast to the integer of the desired width (#66306).
statement ok
CREATE TABLE t66306 (s STRING);
INSERT INTO t66306 VALUES ('foo');
ALTER TABLE t66306 EXPERIMENTAL_RELOCATE VALUES (ARRAY[2], 1);

query IT
SELECT 1::INT2, s COLLATE en FROM t66306;
----
1  foo

# Sanity check that the wrapped processor is planned for the query above. If it
# no longer is, we should adjust the query here and above.
query T
EXPLAIN (VEC) SELECT 1::INT2, s COLLATE en FROM t66306;
----
│
├ Node 1
│ └ *colrpc.Inbox
└ Node 2
  └ *colrpc.Outbox
    └ *colexecbase.castInt64Int16Op
      └ *rowexec.noopProcessor
        └ *colfetcher.ColBatchScan
