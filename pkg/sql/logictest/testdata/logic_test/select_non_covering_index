# LogicTest: default parallel-stmts distsql distsql-metadata

statement ok
CREATE TABLE t (
  a INT PRIMARY KEY,
  b INT,
  c INT,
  d INT,
  INDEX b (b),
  UNIQUE INDEX c (c),
  FAMILY (a),
  FAMILY (b),
  FAMILY (c),
  FAMILY (d)
)

statement ok
INSERT INTO t VALUES (1, 2, 3, 4), (5, 6, 7, 8)

query TTT
EXPLAIN SELECT * FROM t WHERE b = 2
----
index-join  ·      ·
 ├── scan   ·      ·
 │          table  t@b
 │          spans  /2-/3
 └── scan   ·      ·
·           table  t@primary

query T
SELECT message FROM [SHOW KV TRACE FOR SELECT * FROM t WHERE b = 2]
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
----
fetched: /t/b/2/1 -> NULL
fetched: /t/primary/1 -> NULL
fetched: /t/primary/1/b -> 2
fetched: /t/primary/1/c -> 3
fetched: /t/primary/1/d -> 4
output row: [1 2 3 4]

query IIII
SELECT * FROM t WHERE b = 2
----
1 2 3 4

query TTT
EXPLAIN SELECT * FROM t WHERE c = 6
----
index-join  ·      ·
 ├── scan   ·      ·
 │          table  t@c
 │          spans  /6-/7
 └── scan   ·      ·
·           table  t@primary

query T
SELECT message FROM [SHOW KV TRACE FOR SELECT * FROM t WHERE c = 7]
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
----
fetched: /t/c/7 -> /5
fetched: /t/primary/5 -> NULL
fetched: /t/primary/5/b -> 6
fetched: /t/primary/5/c -> 7
fetched: /t/primary/5/d -> 8
output row: [5 6 7 8]

query IIII
SELECT * FROM t WHERE c = 7
----
5 6 7 8

query TITTTTT
EXPLAIN (METADATA) SELECT * FROM t WHERE c > 0 ORDER BY c DESC
----
index-join    0  index-join  ·      ·          (a, b, c, d)                             c!=NULL; key(c); -c
 ├── revscan  1  revscan     ·      ·          (a, b[omitted], c[omitted], d[omitted])  c!=NULL; key(c); -c
 │            1  ·           table  t@c        ·                                        ·
 │            1  ·           spans  /1-        ·                                        ·
 └── scan     1  scan        ·      ·          (a, b, c, d)                             ·
·             1  ·           table  t@primary  ·                                        ·

query IIII
SELECT * FROM t WHERE c > 0 ORDER BY c DESC
----
5 6 7 8
1 2 3 4

query TTT
EXPLAIN SELECT * FROM t WHERE c > 0 ORDER BY c
----
index-join  ·      ·
 ├── scan   ·      ·
 │          table  t@c
 │          spans  /1-
 └── scan   ·      ·
·           table  t@primary

query IIII
SELECT * FROM t WHERE c > 0 AND d = 8
----
5 6 7 8

query TTT
EXPLAIN SELECT * FROM t WHERE c > 0 AND d = 8
----
index-join  ·      ·
 ├── scan   ·      ·
 │          table  t@c
 │          spans  /1-
 └── scan   ·      ·
·           table  t@primary

# The following testcases verify that when we have a small limit, we prefer an
# order-matching index.

query TTT
EXPLAIN SELECT * FROM t ORDER BY c
----
sort       ·      ·
 │         order  +c
 └── scan  ·      ·
·          table  t@primary
·          spans  ALL

query TTT
EXPLAIN SELECT * FROM t ORDER BY c LIMIT 5
----
limit            ·      ·
 └── index-join  ·      ·
      ├── scan   ·      ·
      │          table  t@c
      │          spans  ALL
      │          limit  5
      └── scan   ·      ·
·                table  t@primary

query TTT
EXPLAIN (EXPRS) SELECT * FROM t ORDER BY c OFFSET 5
----
limit           ·       ·
 │              offset  5
 └── sort       ·       ·
      │         order   +c
      └── scan  ·       ·
·               table   t@primary
·               spans   ALL

query TTT
EXPLAIN (EXPRS) SELECT * FROM t ORDER BY c LIMIT 5 OFFSET 5
----
limit            ·       ·
 │               count   5
 │               offset  5
 └── index-join  ·       ·
      ├── scan   ·       ·
      │          table   t@c
      │          spans   ALL
      │          limit   10
      └── scan   ·       ·
·                table   t@primary

query TTT
EXPLAIN (EXPRS) SELECT * FROM t ORDER BY c LIMIT 1000000
----
limit           ·         ·
 │              count     1000000
 └── sort       ·         ·
      │         order     +c
      │         strategy  top 1000000
      └── scan  ·         ·
·               table     t@primary
·               spans     ALL
