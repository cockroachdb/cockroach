statement ok
CREATE TABLE t()

# Ensure old role must exist.
statement error pq: role/user "fake_old_role" does not exist
REASSIGN OWNED BY fake_old_role TO new_role

statement ok
CREATE ROLE old_role

# Ensure the current user is a member of the role we're setting from.
statement error pq: must be member of role "old_role"
REASSIGN OWNED BY old_role TO new_role

# Make testuser a member of old_role.
statement ok
GRANT old_role TO testuser

user testuser

# Ensure new role must exist.
statement error pq: role/user "fake_new_role" does not exist
REASSIGN OWNED BY old_role TO fake_new_role

user root

statement ok
CREATE ROLE new_role

user testuser

# Ensure the current user is a member of the role we're setting to.
statement error pq: must be member of role "new_role"
REASSIGN OWNED BY old_role TO new_role

user root

# Make testuser a member of new_role.
statement ok
GRANT new_role TO testuser

user testuser

# All checks passed - reassign empty.
statement ok
REASSIGN OWNED BY old_role TO new_role

user root

statement ok
GRANT testuser TO root

statement ok
CREATE ROLE testuser2 WITH LOGIN

statement ok
GRANT testuser2 TO root

# Create database for old role and reassign.
statement ok
CREATE DATABASE d

statement ok
ALTER DATABASE d OWNER TO testuser

statement ok
REASSIGN OWNED BY testuser TO testuser2

user testuser2

# Ensure new_role is owner by dropping db as testuser2.
statement ok
DROP DATABASE d

user root

# Ensure old_role no longer owns anything.
statement ok
DROP ROLE testuser

# ------------------------------------------------------------------------------
# TODO(angelaw): This next part is pending checking if current role is a
# member of itself â€” right now signed in as root, cannot reassign from root
# because it's not a member of itself. Confirm when Solon's PR pushed

# Can reassign from more than one old role to new role.
# statement ok
# CREATE ROLE testuser

# statement ok
# GRANT testuser TO root

# create database for testuser and one for root.
# statement ok
# CREATE DATABASE d1

# statement ok
# ALTER DATABASE d1 OWNER TO testuser

# statement ok
# CREATE DATABASE d2

# statement ok
# REASSIGN OWNED BY testuser, root TO testuser2

# user testuser2

# Ensure testuser2 is new owner by dropping.
# statement ok
# DROP DATABASE d1

# statement ok
# DROP DATABASE d2

# user root

# Ensure testuser no longer owns anything.
# statement ok
# DROP ROLE testuser

# ------------------------------------------------------------------------------
# Confirm tables, schemas, types are reassigned together.

user root

statement ok
CREATE ROLE testuser

# TODO(angelaw) Should not be necessary but leaving it until authorization file fixed
statement ok
GRANT testuser TO root

# TODO(angelaw) Should not be necessary but leaving it until authorization file fixed
statement ok
GRANT testuser2 to testuser

statement ok
GRANT CREATE ON DATABASE test TO testuser, testuser2

statement ok
CREATE DATABASE d

statement ok
ALTER DATABASE d OWNER TO testuser

statement ok
CREATE SCHEMA s

statement ok
ALTER SCHEMA s OWNER TO testuser

statement ok
CREATE TABLE s.t()

statement ok
ALTER TABLE s.t OWNER TO testuser

statement ok
CREATE TYPE s.typ AS ENUM ()

statement ok
ALTER TYPE s.typ OWNER to testuser

statement ok
REASSIGN OWNED BY testuser TO testuser2

# Ensure testuser2 is owner by dropping as member of testuser2.
user testuser2

statement ok
DROP DATABASE d

statement ok
DROP TABLE s.t

statement ok
DROP TYPE s.typ

statement ok
DROP SCHEMA s

# Ensure old_role no longer owns anything.
user root

statement ok
REVOKE CREATE ON DATABASE test FROM testuser, testuser2

statement ok
DROP ROLE testuser

# ------------------------------------------------------------------------------
# Make sure command is all or nothing if one object hits an error.
user root

statement ok
CREATE ROLE testuser

statement ok
GRANT testuser TO root

# TODO(angelaw) Should not be necessary but leaving it because of bad check in authorization file
statement ok
GRANT testuser2 to testuser

statement ok
GRANT CREATE ON DATABASE test TO testuser

user testuser

statement ok
CREATE SCHEMA s

user root

statement ok
CREATE DATABASE d

statement ok
ALTER DATABASE d OWNER TO testuser

statement error pq: user testuser2 does not have CREATE privilege on database test
REASSIGN OWNED BY testuser TO testuser2

user testuser

# testuser should still have ownership of schema and new database d.

statement ok
DROP SCHEMA s

statement ok
DROP DATABASE d

user root

# testuser2 should not own any objects.
statement ok
DROP ROLE testuser2
