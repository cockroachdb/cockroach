# LogicTest: 5node

# These tests are different from explain_analyze because they require manual
# data placement.

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT, FAMILY (k, v))

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i);

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT, FAMILY (k, w))

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify that EXPLAIN ANALYZE (DISTSQL) annotates plans with collected
# statistics.

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
start_key  end_key  replicas  lease_holder
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
start_key  end_key  replicas  lease_holder
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# This query verifies stat collection for the tableReader, mergeJoiner, and
# aggregator.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT kv.k, avg(kw.k) FROM kv JOIN kw ON kv.k=kw.k GROUP BY kv.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
·
• group
│ cluster nodes: <hidden>
│ actual row count: 5
│ group by: k
│ ordered: +k
│
└── • merge join
    │ cluster nodes: <hidden>
    │ actual row count: 5
    │ equality: (k) = (k)
    │ left cols are key
    │ right cols are key
    │
    ├── • scan
    │     cluster nodes: <hidden>
    │     actual row count: 5
    │     KV rows read: 5
    │     KV bytes read: 40 B
    │     missing stats
    │     table: kv@primary
    │     spans: FULL SCAN
    │
    └── • scan
          cluster nodes: <hidden>
          actual row count: 5
          KV rows read: 5
          KV bytes read: 40 B
          missing stats
          table: kw@primary
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm39v2rgfx___PgrLf3VaWLADHY00iW3a99TdClN_nDSdUOUSH42AhDmmtFf1Yd0TuEd2SigrEGInrKudOP81cUzsl99-O_7403sYfZ9AF559-vLp4zkY37wZW4DcjA7GizfjV-D_p_0TML4Bn_vHPTBegH4veQS8A3E5-O20f_EVfPiW3IQWDEKP9siURtD9EyJoQQwt6EALtqAF23BgwRkLhzSKQhY_cp9UOPZuodu0oB_M5jy-PbDgMGQUuveQ-3xCoQvPydWEnlLiUWY3oQU9yok_SV4zvunOmD8l7A5a8GxGgsgFDTt-cX_OXdCNm_H7H4D7U-qC5r__RMvrYRhwGnA_DFJFLFxEgFHiueCx8tUdp6tbHfABWvCK8OE1jUA457P4NXGjknqrGwgOHiy4vFr2ddWXqztwTaLrzV504-cHFow4GVHoogdrPziHW3AWaTg2Kj0enInn6XdC5lFGve3feR2_ONdTO0ifUDain0M_oMxGWzqc0L_4QRe9fvWO-aPr5Z9PlK1ujJze0uE8DXVKbsGUTkN2B8hkEg4Jp54LmgnJuCz6PgGcTmfA86MxmEdkRN1VeWHSTxSdIiJ7PxoxOiI8ZDZqpwbHgv0lyEdFve99u-z1zy97F1--HHRRDOLs4uSgi-O_PvYveuePf2cQ-cX6af2cfsR4cPPn8JxdnFwex4Cc-OqUBh5liYRAF9td5xmhPQFp5wAyD3Yh2UmjFzbCmY23dLJvs9uZzT7caDbKb5NIvobYuGE75bZJtC-etzlWkfLjwZl4XnAVQdVaRSQiW19FDqu1ihTWj2QVQWVfRXB-v8E57Nhp2K1y-w3aF08nhx2XHw_OxPOCdoyrZccSka3b8dtq2XFh_UjsGJfdjp38fuPksONWw26X22_QvniOcthx-fHgTDwvaMdOtexYIrJ1O-5Uy44L60dix07Z7biV329aOey43Si326B94bTlZtywESCBBxAI-TVl5QaFM0G9oC23qmXLErmt2_JRtWy5sH4kttwquy1LTkFOaTQLg4huhcB3_3IzpkW9EV3SjcI5G9KvLBwmr1le9pN6SfTIoxFfluLlxXGwKoo44aIQ-i-dRc2lbeRvfiez-QHli5CNwYRwGgzvfrR_dX9BfL7ZM49GlPlk4v9N0t1eVXu05SH1b5J-rxWt_PlHWdLnVemURjGL7crPjwQ5ipkgAZPOszBBhZnUOknPfNU6UcIEFXBDrJ8bipvfyWy-sSO65YYvz0SJG0qY1DqRuaEhTPA2k-Y6k00kze3KjhBoS6sPyx1zRNx81DRxdZQwaddMUr5R6yTNxEidtIReuoVku3JbWBkfbjqxft-lh3sGGSqsBzGS7A1pKUZUeZBBwyE1M8ggmfmqdaJk-_V2zyBDhWUiRpK9IdXEDcXNVx5k0HBIzQwySGa-ap0occOO8Nv2SBxkONozyFBhjYmRCAIXmgReJO03cvMoZmJmkEHCxEidoNSZnijKYMb6goqc6ZmikyIHhTUTSUhDk02IrAOqR1XL2a86AKFG6qmDvToCIWFi5HZVwkQQ19DFEiUdUD2qaixRMvtVRyHUSD11Zrnx5Yxa4jgESh3v1YEICRMzUyhkULK3aJqEZyQdMDMWIYOieuOtBoo4a0E1EzVrb50JUZSJmdvWOr-iOBTtk2Zks9_MUa3TIYoyMXPbWidZFIeifeaMbPabOarinAgkSYpAdVZEGuneaREGQ1G9RdMRiiDAoUuEps6M2PGvbHVmRJqJ3pkROjJRHYxQM3f2zowwGEqtlEIBDk22I1jvzAg1llhnRhRlYmYwQgalVkqhAIculijOjMCSzAhcZ0akkdaZEcWhqN6i6QjFzGwLGRTtc2hwnRkxeBg8_O-_AAAA__8KQ_L5

# This query verifies stats collection for the hashJoiner, distinct and sorter.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT DISTINCT(kw.w) FROM kv JOIN kw ON kv.k = kw.w ORDER BY kw.w
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
·
• sort
│ cluster nodes: <hidden>
│ actual row count: 5
│ order: +w
│
└── • distinct
    │ cluster nodes: <hidden>
    │ actual row count: 5
    │ distinct on: w
    │
    └── • hash join
        │ cluster nodes: <hidden>
        │ actual row count: 5
        │ equality: (k) = (w)
        │ left cols are key
        │
        ├── • scan
        │     cluster nodes: <hidden>
        │     actual row count: 5
        │     KV rows read: 5
        │     KV bytes read: 40 B
        │     missing stats
        │     table: kv@primary
        │     spans: FULL SCAN
        │
        └── • scan
              cluster nodes: <hidden>
              actual row count: 5
              KV rows read: 5
              KV bytes read: 40 B
              missing stats
              table: kw@primary
              spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm99u27YXx-9_T0HwqsVPrkxKdhwBBYL-GZZui4ckGDAMvlAkLhZsS65Ex8mCPNZeYE82SK7qyLR4pKQLWdF3kRna5Occni_1pXSPs89z7OGLjz9_fH-JPpxeXJ6evb9Er2brN-vX6Ifz8S9odoM-jU_P0GyNxmdodvNmht6ivB2Nzz98PEfvfi-usIXjJGRn_oJl2PsDE2xhii3sYAu72MIDPLHwMk0ClmVJmv_LfdHhNLzFXt_CUbxc8fzjiYWDJGXYu8c84nOGPXzpX83ZOfNDltp9bOGQcT-aFz8zuzlZptHCT--whS-Wfpx5qGfnPzxecQ-d5MP46TfEowXzUP-fv7PNdZDEnMU8SmKhKU3WGUqZH3roS-erO87Kj0boHbbwlc-DKctQsuLL_GfyQRX9yg8InjxYeHO1mWs5l6s7NPWzaXUWJ_n_Tyyccf-aYY88WE-DM9yBsxbh2OQxHvo94qG1eLbfs4qTNGQpCyvfNMl7Qv-yh_GPfjb9lEQxS22yk4Bz9id_dUJev02j62nxVwUuu2XBSgS58G_Rgi2S9A7583kS-JyFHuoX9PK27PMccbZYojDKZmiV-dfMK9tb092Sc9ok1oco41EccJsMhHDoMbF2aeM-I21keGhfUzzbqQ_axP0iSTlLbSpE_f_azWvYIKT7AlpMZm9Uz5JesrSdnZDWzBoc-aB25EeVkZPmJZ7A-mfTnu10SQFb4DlqoIAVPB1QQPLCCkg6o4BAYm0VcKhpiX-OArZLG6kCEk3x1CkgEPdSAYWo666AtHmhpA10xOnZbpd0pAWeUQMdqeDpgI7QF9YR2hkdARJrqyNHmhbK5-hIu7SR6gjVFE-djgBxL3VEiLruOuI0L5ROAx1xe_agSzrSAs9xAx2p4OmAjjgvrCNOZ3QESKytjow0LZTP0ZF2aSPVEUdTPHU6AsS91BEh6rrriNu8ULoNdGTQ65KKtIAzgFWkZxPkxyEiKOFTlnZJT9wX1hO3M3oCpNhWT441LZjP0ZN2aSPVE1dTPHV6AsS91BMh6rrrCXBydc6yZRJnbLci7P3mfh5yFl6zTX5kySoN2K9pEhQ_s7kcF_0KvzBkGd-00s3FaVw2ZdznsmOi_xRdHxclr_nwj2uHHzO-TtIZmvucxcHd1_GXn6_9iFdnFrKMpZE_j_7yxWmX3b7oScCim2Lej5pKYfnaVsy5bF2wLGex2_nbIyEDxUyIhMnomzAhbZlQcsgTgcmRiUxIi2pI9auG8uEf1w7f2IjuVMOXZ6KkGgJZTg55AlRDQ5jQXSb9x0ycCpL-bmdHCtTVamO5Z43Ih0-M3DEATIzcMciZUOfARGBi5F2ZK62lA3ktHUg7D6s8dzsP5VW8Wsn6-m1qj57oUHQ4meRI6tfXdxFR5Q6FhiE106EAmKjebyi5dxs90aHocJrIkdS7HppUQ_nwlTsUGobUTIcCYKLaoVBSDY-le1vSl2-ridwCr_coOpxlABOJ8aGJcQNNQPWuQceommlTQFCM9CmIYIRXSyoFSqrcMx6auGUngB9mZJrJmZi59AB_vd4X0eROBkp01SaGlqvfzP2IYIcfbAyAiZlPb8iZSMwRXUoikOiqnQw1JRGAotrKUJPq8kM-MgQ23sIx38HLAJiY-RAHBKV-P6KLwSOfgKFeBgDFzBsq4QCxWlJHQEkVHPeDl0EEx_3gZQBMVC89HfPEzGc8oMWj19nKEyZgpJdB27xCZ8jNDMBEtZehpCQCTMx80ANaPPX-iCYlEZqAkV4GlR8iUuAQkQqHiAcvA2BippcBQTFzPyKHIvFHNDF4oAmovqFSE1XhGLFaUl2gpMrfPzHSy6CC466Vl6EjEzOXnpyJmV4GtHjM3I8AUPQ6W9k3AeAYwcj7djkT1V6GmkQHDhHN9DKAxaP6WQ8todT7I7qURPkhIgUOEan8tR0zvQzglTcz9w4AFDO9DOClNyOf9YCg6PX-_74dlfy1PQd4bc8RLHcDvYzJw__-DQAA__8Zn8kG

# This query verifies stats collection for WITH ORDINALITY and the hashJoiner.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv WITH ORDINALITY AS a, kv WITH ORDINALITY AS b
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
·
• cross join
│ cluster nodes: <hidden>
│ actual row count: 25
│
├── • ordinality
│   │ cluster nodes: <hidden>
│   │ actual row count: 5
│   │
│   └── • scan
│         cluster nodes: <hidden>
│         actual row count: 5
│         KV rows read: 5
│         KV bytes read: 40 B
│         missing stats
│         table: kv@primary
│         spans: FULL SCAN
│
└── • ordinality
    │ cluster nodes: <hidden>
    │ actual row count: 5
    │
    └── • scan
          cluster nodes: <hidden>
          actual row count: 5
          KV rows read: 5
          KV bytes read: 40 B
          missing stats
          table: kv@primary
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzUUcFu00AQvfMVozmiRYkdm8OeXKCohlKjJAIh5MPGO0pXsXfd3XVJFOWz-AG-DNkmokmblIA49Djv7dt5b94a3U2JHCfnl-evp_Ac3o6zD7C4hc_p9AKy8Zv06uwynX6BswkIdoCYIUNtJF2JihzyrxhgzrC2piDnjG2hdfcglUvkQ4ZK141v4ZxhYSwhX6NXviTkOBWzksYkJNnBEBlK8kKV3beL26S2qhJ2hQwntdCOwwtk-P4TeFURh-GP766fC6M9aa-MvkdZ882BJSE5xD0yW3naQtEQXiHDmfDFNTkwja8bz6F10gm3QIz5hmE__UrivJgT8mDD_jxtZqXSolR-NQh2w9KSiuZ-gH8wFp5i7G4N4VOsYfSXNYz-dw3RQWO__TTaWEmW5I6ZvFU-9uSBdBfCXb8zSpMdRLvpstZqErAkZMmIJRFLYpa8RHYodiWWUFFl7ApEWZpCeJIc-q5azt2U4KmqQSq3gMaJOfEt_-jJwsM3i08pc0yuNtrR_u0e_HnYHozknPoCnGlsQR-tKbo1_Zh1ug6Q5HzPBv2Q6p5qDd4VB0fF0Y442BeHR8Wj45tHJ2wO98XRUXG8tznfPPsZAAD__zX-Di8=

# Verify that EXPLAIN ANALYZE on an unsupported query doesn't return an error.
statement ok
EXPLAIN ANALYZE (DISTSQL) SHOW QUERIES;

statement ok
EXPLAIN ANALYZE (DISTSQL) EXPLAIN SELECT 1

# This query verifies support for zeroNode in DistSQL.
query T
EXPLAIN (DISTSQL) SELECT sum(k) FROM kv WHERE FALSE
----
distribution: full
vectorized: true
·
• group (scalar)
│ estimated row count: 1
│
└── • norows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkE1LxDAQhu_-ijCnLgS28ZiTq1YsdD9s1w-QHkI71tJuUzOJCKX_XZoeVoUVPc47eebJzAD01oKE6GmXrOINC67jbJ_dJQuWRUl0tWfkDkGzYDfpds2ad_Z4G6URe1EtIXDodIkbdUAC-QwCcg690QUSaTNFg38Qlx8gQw511zs7xTmHQhsEOYCtbYsg4UG1DmkZAocSrapbPzFklywIWfHquoYWkI8ctLPHKWRVhSDDkf_dtKoqg5Wy2izFd1t2vw4uxGmN-I8mRep15490VJxeIOeAZYXz0Ug7U-DO6MJr5nLrOR-USHbuirmIu7k1ffArLH6Fz3_A-Xj2GQAA__8VEanA

# This query verifies stat collection for the tableReader and windower.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT avg(k) OVER () FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 5 (40 B)
maximum memory usage: <hidden>
network usage: <hidden>
·
• window
│ cluster nodes: <hidden>
│ actual row count: 5
│
└── • scan
      cluster nodes: <hidden>
      actual row count: 5
      KV rows read: 5
      KV bytes read: 40 B
      missing stats
      table: kv@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzslU1u2zwQhvffKYhZJQAN_X8ouEpbpEXQHxdOkC4KLxhx4BKWSIWk7LiBj9UL9GSFKMuN7KRWlwa8nBm-Hr7P0KNHsPcFMLi-_Hj59obwxexsfk7Gt5cTcnZO3k3Gn8h8ARSUFviZl2iBfYMIKMRAIQEKKVDIYEqhMjpHa7Vpjjx6wZV4ABZSkKqqXZOeUsi1QWCP4KQrEBjc8LsCJ8gFmiAECgIdl4VvM19cVEaW3KyAwnXFlWVkFDSNx7Vj5KK5xodb4mSJjIS_fto2zrVyqJzUaq9k9NISg1wwshHfrRx2qVfkDVC44y7_jpbo2lVNm-ZSXtclIpiuKbTRxpR1fIbAojV9wfgfv7XSRqBB0fM6XT-D5qtUQi_RBFmfy-vb92cX0fmWQ0PEd_L-GMm2sXW8KPoU8AHzeh9OyR9IiaU2K8KLQufcoWAk9ESamr0viMOyIkLaOaktnyHr6geJZS8Si3vEouFPJTr8VIJ4FCTH8lji4dbjAdaTUZAei_VkuPVkgPV05P8vR2E9HW49HWA9Gx2L8QMfhQnaSiuLOzvy-V8Om92JYobtorW6Njl-MTr3bdpw7HU-IdC6thq1wZXyJX_Bp-Lor-L_e-JwVxz_S2dvxbsChW6pzZwU3KHKV9sBdfkll64_OoEWjeSF_MH359rJNsPNUS5wM-Cu1E25q7WT7qol2mbXPz0QDn4IfSTJCckukvSEZBdJdkKynq7_-x0AAP__cwfZzQ==

# Very simple query to make it easier to spot regressions when rewriting results
# in test files.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT k FROM kv WHERE k = 0
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
maximum memory usage: <hidden>
network usage: <hidden>
·
• scan
  cluster nodes: <hidden>
  actual row count: 0
  KV rows read: 0
  KV bytes read: 0 B
  missing stats
  table: kv@primary
  spans: [/0 - /0]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkFFLwzAUhd_9FZfzHGn7GhCGUnFsbtLN-SB9yNrLLO2SmqTTMfqz_AP-MmkjiojgS-B8J_dczj3BPTeQWKXz9GpNNV1ny1uqD_Rwk2Yp1XRBMQS0KXmh9uwgH5EgF2itKdg5Ywd0Gj9My1fIWKDSbecHnAsUxjLkCb7yDUNirbYNZ6xKttEQXLJXVTPG1odJa6u9skcIrFqlnaQojuLz4YkW9_M5BJadlzRJIDDbkK_2LCl-f3NBF0Z71r4y-pdlzYsjy6qUY5_ZhrZHz1-ILiGwVb54Ykem8-2wZvg4zn2DvBcI6rOf82rHkEkv_n-DjF1rtOMf9f9KjvtcgMsdhzs709mC76wpxjVBLse5EZTsfHCTIKY6WH3en30EAAD___6pnbQ=

# Test a query that has a subquery and a postquery.
statement ok
CREATE TABLE parent (p INT PRIMARY KEY);
INSERT INTO parent VALUES (1), (2);
CREATE TABLE child (c INT PRIMARY KEY, p INT REFERENCES parent(p))

query T
EXPLAIN ANALYZE (DISTSQL) INSERT INTO child VALUES (1, (SELECT min(p) FROM parent))
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 2 (16 B)
maximum memory usage: <hidden>
network usage: <hidden>
·
• root
│
├── • insert
│   │ cluster nodes: <hidden>
│   │ actual row count: 1
│   │ into: child(c, p)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 2 columns, 1 row
│
├── • subquery
│   │ id: @S1
│   │ original sql: (SELECT min(p) FROM parent)
│   │ exec mode: one row
│   │
│   └── • group (scalar)
│       │ cluster nodes: <hidden>
│       │ actual row count: 1
│       │
│       └── • scan
│             cluster nodes: <hidden>
│             actual row count: 1
│             KV rows read: 1
│             KV bytes read: 8 B
│             missing stats
│             table: parent@primary
│             spans: LIMITED SCAN
│             limit: 1
│
└── • constraint-check
    │
    └── • error if rows
        │ cluster nodes: <hidden>
        │ actual row count: 0
        │
        └── • lookup join (anti)
            │ cluster nodes: <hidden>
            │ actual row count: 0
            │ KV rows read: 1
            │ KV bytes read: 8 B
            │ table: parent@primary
            │ equality: (column2) = (p)
            │ equality cols are key
            │
            └── • filter
                │ cluster nodes: <hidden>
                │ actual row count: 1
                │ estimated row count: 1
                │ filter: column2 IS NOT NULL
                │
                └── • scan buffer
                      cluster nodes: <hidden>
                      actual row count: 1
                      label: buffer 1
·
Diagram 1 (subquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJysUtGK2zAQfO9XiH1KQEfsHIWip0tLCiGuUxJfoBRzKPLiE7UlV1o3l4Z8Vn-gX1Zsx-2Zo2lL71EzGmlmd47gPxcgYBFv5uuELeJkxdS9LjK2nUW38w0bhZyNNvNo_iZhpTajaszerlfvWCUdGhqPgYOxGcayRA_iI4TA4SWkHCpnFXpvXQMf20uL7AFEwEGbqqYGTjko6xDEEUhTgSAgtle2mkyBQ4YkddE-ig-oatLWMNIlChZ8_-aBw06SukfPbE1VTYIFwMHZ_S8ghPTEoTud__MkcwRxfeKPPIWXPSVyV-AaZYZuEgyddWO4qZwupTsAh00ljRfsCjhEutTEmoEst0Pjyy1T1hCap5mWW9ZGcCgz0Yt3B8IeesVe_1_08F-iz_LcYS7Jukk4TD6LP9zFq-Quvo2i0U3YFOH51zQdeP1DddboK2s8Dnz-7uXglHLALMeunt7WTuF7Z1X7TXdctboWyNBTx153h4XpqMbgY3F4UTy9LJ5eFAdDcRulTQUGaW_dJ1ZIQqMOPyff43upabiTDD06LQv9VT5dWC87F1Gh_oLnMvZU38ie61rZsyV6L_PBheBvi5CeXvwIAAD__2aUhTI=
Diagram 2 (main-query): https://cockroachdb.github.io/distsqlplan/decode.html#eJyMj89K80AUxfffU1zOqoWBL9nOTiRCoLbSVjeSRZxc2oF0bpy5wULJY_kCPpk0I4gLweX53Tl_5oL02sOiXu-q7Z7q9X5D7uj7jp5uVo_VjhalocWuWlW3ezr5sBiWdLfd3NPQRg66XMIgSMfr9sQJ9hklGoMhiuOUJF7RZX5Qd2fYwsCHYdQrbgycRIa9QL32DIteXNuTkzEoFf8LGHSsre_nYD6zG9VLIPUntlR8vCcYvLTqjpxIRh1GtXR1RXn7BiWaySCrr96k7YFhy8n8fduW0yAh8Y9RvyUXU2PA3YHz_5OM0fFDFDfXZLmZfTPoOGm-llnUIZ-mZvr3GQAA__9Sm4hi
Diagram 3 (postquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJy0k9Fu2jAUhu_3FEfnCiRLJNCLyVd0E0gpWTJBys3EhXEOrbdgZ7ajFSEeay-wJ5sSt9pY1Who6x3_b__Hn3-TI7qvFXJMstVsWUCSFTnIe1WVsL5Ob2crGMQMBqtZOntfwF7pQT2E-TL_ALWwpP1wiAy1KSkTe3LIP2GMG4a1NZKcM7a1jt2GpHxAHjFUum58a28YSmMJ-RG98hUhx8pIUYGTQsO22e3IQjSKkGFJXqiqG583nsN0jAzpgWTjldHg1Z44RD--O2S4FV7ekwPT-Lrd2-at-fbLiHFzYhjUI4fz4o6Qxyf296xzVXmyZEfxOWDwOUxjSFaQ5QVkt2n6KrzjS3hvjNJLEiXZ0ficuDjUxCGdzQu4zooEbvIkQ4bhgae1VXthD8gwNeZLU8NnozQY3d4Q2eN7tL-6w6FFb5mftPOiqs5vvFg_09JoT_p5OYt1NxAsiTJMXaxhe_D0ZL2Fd_9QbfRitZNLqg1_W7LWWFC7QByPJuct_3_Gq0sYl-Rqox2dQb00OTptGFJ5R-Hzdaaxkj5aI7tjgsy7XGeU5HxYjYNIdFhqAX8Px73hcX943Bue9IcnveGrP8Kb05ufAQAA__9GX6z9
