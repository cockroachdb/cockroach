# LogicTest: 5node

# These tests are different from explain_analyze because they require manual
# data placement.

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT, FAMILY (k, v))

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i);

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT, FAMILY (k, w))

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify that EXPLAIN ANALYZE (DISTSQL) annotates plans with collected
# statistics.

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
start_key  end_key  replicas  lease_holder
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
start_key  end_key  replicas  lease_holder
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# This query verifies stat collection for the tableReader, mergeJoiner, and
# aggregator.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT kv.k, avg(kw.k) FROM kv JOIN kw ON kv.k=kw.k GROUP BY kv.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• group
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ group by: k
│ ordered: +k
│
└── • merge join
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ equality: (k) = (k)
    │ left cols are key
    │ right cols are key
    │
    ├── • scan
    │     nodes: <hidden>
    │     regions: <hidden>
    │     actual row count: 5
    │     KV time: 0µs
    │     KV contention time: 0µs
    │     KV rows read: 5
    │     KV bytes read: 40 B
    │     missing stats
    │     table: kv@primary
    │     spans: FULL SCAN
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV rows read: 5
          KV bytes read: 40 B
          missing stats
          table: kw@primary
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm99u4jgbxs-_q7B81NGECXagpUgjMTOab9XZFkb9s9JohSqXeGkEJIxjSrtVL2tvYK9slVCmkBA7yXRqN85ZE2N48_Pjx_Hrt_cw_D6FXXj2-fjzp3MwuXk3sQC5Ge9Nlu8mb8D_TwcnYHIDvgyO-mCyBIN-_BHwHkTt4LfTwcVX8PFbfBNa0A9c2iczGsLunxBBC2JoQQdasAUt2IZDC85ZMKJhGLDoI_dxhyP3FnabFvT8-YJHt4cWHAWMwu495B6fUtiF5-RqSk8pcSmzm9CCLuXEm8Y_M7npzZk3I-wOWvBsTvywCxp29MODBe-CXhTG738A7s1oFzT__SdcXY8Cn1Ofe4GfamLBMgSMErcLHjtf3XG6vtUBH6EFZ-QWzOgsYHeATKfBiHDqdkEzbrsifHRNQxAs-DwKIQo4_s71DQSHDxZcXa04rJ_z6g5ck_B6-wl70eeHFgw5GVPYRQ9WOXD7CXDLNDgbVRodzkT39D0BcymjbvJ73kY_nOtTO0bhhLIx_RJ4PmU2Suh3Sv_iez309s175o2vV38-jYDVi4aD3tLRIg1cRDJqC79PAaezOXC9cAIWIRnT0qCfIDpF9PdhPGZ0THjAbNROjY0FByuOj2L70P922R-cX_Yvjo_3eijicHZxstfD0V-fBhf988e_M4D8Yvm0fk4-Yjy4-XN4zi5OLo8iQE50dUp9l7JYQaCH7Z7zjNCegLRzAFn4u5DspNEPGsHcxgmdlA27nRn2_lbYKL-DIvnSY-OG7VTXQVFZdAc5Fp9qo8OZ6F5w8UGVWnwk-ttcfPartfgUlo9k8UGvffHB-a0I53Bxp2G3qmtFqCy6Tg4XrzY6nInuBV0cV8rFJfrbdPGDarl4YflIXBy_dhd38luRk8PFWw27XV0rQmXRHeZw8Wqjw5noXtDFnUq5uER_my7eqZaLF5aPxMWd1-7irfxW1Mrh4u1GdY0IlQXXlnt4w0aA-C5AIODXlFUXIs6E-IJu3qqUm0uUuOnmh9Vy88Lykbh567W7ueSE55SG88APaSK9v_ubmxEt6o7pim4YLNiIfmXBKP6Z1eUg7henuFwa8lUrXl0c-eumkBMuOh74lZOouTKN_NF3MqP3KV8GbAKmhFN_dPcj_PX9JfH49oO5NKTMI1Pvb5J-6nW3R8MeUe8mfuyNprVz_2iLn3ndOqNhhCLZ-fmRIEcxEyRg0nkWJqgwk1on6YmvWidKmKACZoi1M0Nx9J3M6I0d0IQZvjwTJWYoYVLrRGaGhjDBSSbNTSbbSJrJzo4QaEun18odU0QcPWqauDZKmLRrJinbqHWSZmKkTlpCK00gSXZuCzvj_W0j1u6tdL9kgqHCchAjyd6NvoYBVZ5g0HBEzUwwSCa-ap0o2XsdlEwwVFgmYiTZu1E9zFAcvfIEg4YjamaCQTLxVetEiRl2hC-2h-IEw2HJBEOFNSZGIsha6JF0kYRv5MZRzMTMBIOEiZE6QanTPFGGwYzlBRU5zTNFJ0XOCGsmkoSGHlsQWfyqB1XLya86-6BG6akjvTr9IGFi5GZVwkSQ1dDEESXxqx5UNY4omfyqUxBqlJ46rdx6b0YtcRICpQ726iyEhImZxRMyKNkbND1yM5L4zUxEyKCo3nWrgSIuV1DNRM3SW9dAFGVi5qa1Lq0oDkX3chnZ5DdzUOtCiKJMzNy01vUVxaHoXjMjm_xmDqq4GgJJyiFQXQ-RRlq6IMJgKKo3aDpCEaQ3NEnP1DURO_5_ra6JSDPRuyZCRyaqMxFq5k7pmgiDodRKKZTe0GMzgvWuiVDjiHVNRFEmZmYiZFBqpRRKb2jiiOKaCCypicB1TUQaaV0TURyK6g2ajlDMLLSQQdG9egbXNRHDh-HD__4LAAD__xCkSa4=

# This query verifies stats collection for the hashJoiner, distinct and sorter.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT DISTINCT(kw.w) FROM kv JOIN kw ON kv.k = kw.w ORDER BY kw.w
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• sort
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ order: +w
│
└── • distinct
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ distinct on: w
    │
    └── • hash join
        │ nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 5
        │ equality: (k) = (w)
        │ left cols are key
        │
        ├── • scan
        │     nodes: <hidden>
        │     regions: <hidden>
        │     actual row count: 5
        │     KV time: 0µs
        │     KV contention time: 0µs
        │     KV rows read: 5
        │     KV bytes read: 40 B
        │     missing stats
        │     table: kv@primary
        │     spans: FULL SCAN
        │
        └── • scan
              nodes: <hidden>
              regions: <hidden>
              actual row count: 5
              KV time: 0µs
              KV contention time: 0µs
              KV rows read: 5
              KV bytes read: 40 B
              missing stats
              table: kw@primary
              spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm99u2zYUxu_3FASvWkyuTEp2HAMFgv4Zlm6LhyQYMAy-UCwuFmxLrkjHyYI81l5gTzZIrurItHikpAs50XeRFdmHv3N4PuqjdI_55zke4ouPP398f4k-nF5cnp69v0SvZus369foh_PRL2h2gz6NTs_QbI1GZ2h282aG3qLsPBqdf_h4jt79nh9hB8dJyM6CBeN4-Acm2MEUO9jDDvaxg3t47OBlmkwY50ma_ct9fsFpeIuHXQdH8XIlso_HDp4kKcPDeywiMWd4iC-Dqzk7Z0HIUreLHRwyEUTz_GdmNyfLNFoE6R128MUyiPkQddzsh0crMUQnWRg__YZEtGBD1P3nb745niSxYLGIklg6lSZrjlIWhEP05eKrO8GKjwboHXbwIrhFC7ZI0jsUzOfJJBAsHKJufu4qEJMp4yhZiWUWQhZw_p3FBwSPHxy8OdpwKMZ5dYemAZ-WR3iS_f_YwVwE1wwPyYPzNHD9HXBrGZxLHqOjbUNHK9Ftv2cVJ2nIUhaWvmmcXQn9yx7-PwZ8-imJYpa6ZKdw5-xP8eqEvH6bRtfT_K8SeHbLJisZsopedo5_niPBFksURnyGVjy4Zk-GuwXnNam5DxEXUTwRLulJ2TBiXM2Kxn9G0ajo0K6ZdLYj7zXJ-kWSCpa6VMr596YNq18jofvSmY9lb07Pkk6ydL2dhFYMGoy8Vxn5USlyUr_1E1gzXdpxPVtUswG6oxqqWULXctUkL6yapC2qCdTcVjX7ZurCc1SzWdEoVZOYSadKNYGsF6op5dxw1aT1GyitoT1ex_Vt0Z4G6AY1tKeEruXaQ19Ye2hbtAeoua32HJnZXZ-jPc2KRqk91Ew6VdoDZL3QHinnhmuPV7-BejW0x--4PVu0pwG64xraU0LXcu3xXlh7vLZoD1BzW-0ZmNldn6M9zYpGqT2emXSqtAfIeqE9Us4N1x6_fgP1a2hPr2OL8jQA14OVp-MSFMQhIigRU5baokH-C2uQ3xYNAqpvq0HHZnbZ52hQs6JRapBvJp0qDQKyXmiQlHPDNQjYiDtnfJnEnO12g73f3M0SzsJrtqkOnqzSCfs1TSb5z2wOR_l1uZUZMi42Z-nm4DQuTnERCNW2139Jrovzblc_-uPK6GMm1kk6Q_NAsHhy9zX84vN1EInywELGWRoF8-ivQB51cdkXmZmw6CYf9qNThd58PZePuTi7YDxDsXvxt0dCepqZEAWTwTdhQpoyoeRQJxKTIxuZkAbNkBrXDNXRH1dGb21Cd5rhyzPR0gyBIieHOgGaoSVM6C6T7mMmXglJd_diTwnUN2lZuWeKqKMnVq4XACZWrhfUTKh3YCIxsfKezFe20p66lfaUF_fLPHcv7qubeLmTdY1b0h490Z1ocS2pkVRPr_9DQrW7EwZm1E53AmCie7Wh5cZt8ER3osVlokZSbXmY0QzV0Wt3JwzMqJ3uBMBEtzuhpRkeKxe2pKteUxO1-13tT7S4ygAmCtfDDNMGil_3msHEpNppUUBQrPQoiOSBlzsqBTqq2i7u27hgJ4AXZmWZqZnYOfUAb73aFTHjPgaqc90OhpGT387liOSEHzwMgImdz22omSisEUM6IlDnum0MPR0RgKLbx9BT6ertPdIHlt3SBt_ByACY2Pn4BgSlejliiLujjt9SIwOAYufdlLR3WO6oA6CjSm77wcggktt-MDIAJrqnnol1YufjHdDkMWpf5QnxW2lk0CbvzVlyKwMw0W1kaOmIABM7n_GAJk-1O2JGR4Tit9LIoOr9QwrsH1Jp__BgZABM7DQyICh2LkfUUBTuiBnuDhS_7rspPUmVdhDLHdUHOqr6rRMrjQwque1GGRkmMrFz6qmZ2GlkQJPHzuUIAMWofZV98QNbCFbetKuZ6DYy9NQ5sH9op5EBTB7dj3kYCaXaHTGkI6r3Dymwf0jVb-vYaWQAb7rZuXIAoNhpZADvuln5mAcExaiX_vetp9Qv63nAy3qeZLdbaGSMH777NwAA__-E3RxV

# This query verifies stats collection for WITH ORDINALITY and the hashJoiner.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv WITH ORDINALITY AS a, kv WITH ORDINALITY AS b
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• cross join
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 25
│
├── • ordinality
│   │ nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 5
│   │
│   └── • scan
│         nodes: <hidden>
│         regions: <hidden>
│         actual row count: 5
│         KV time: 0µs
│         KV contention time: 0µs
│         KV rows read: 5
│         KV bytes read: 40 B
│         missing stats
│         table: kv@primary
│         spans: FULL SCAN
│
└── • ordinality
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV rows read: 5
          KV bytes read: 40 B
          missing stats
          table: kv@primary
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzcUUFv00wQvX-_YjTHT4sSOzaHPblAUQ2lRkkEQsiHjXeUrmLvurvrkijKz-IP8MuQbSqatDENiAvHeW_fzpv3tuhuSuQ4O788fzmH_-H1NHsHq1v4mM4vIJu-Sq_OLtP5JzibgWBHiAUy1EbSlajIIf-MAeYMa2sKcs7YFtp2D1K5Rj5mqHTd-BbOGRbGEvIteuVLQo5zsShpSkKSHY2RoSQvVNl9u7pNaqsqYTfIcFYL7Tg8Q4ZvP4BXFXEYf_vq-rkw2pP2yugHlDVfHFgSkkPcI4uNpzsoGsMLZFiJNVRUGbsBUZamEJ4kh55bCF9ckwPT-LrxHFqX3ad3QIz5jmE__bjSebEk5MGOPT2JzEqlRan8ZhTsB0FrKpqHx_2BsfAUY_crCv-1iia_WdHkb1cUHTX200-jjZVkSe6ZyVvlr548ct2FcNdvjNJkR9H-dVlrNQlYErJkwpKIJTFLniM7dvZQVy3nbkrwVNUglVtB48SSnlxleDyy-JQup-Rqox0dRvfoz-M2L5JL6vN3prEFvbem6Nb0Y9bpOkCS8z0b9EOqe6o1eF8cDIqjPXFwKA4HxZPhzZMTNoeH4mhQHB9sznf_fQ8AAP__6tMgPQ==

# Verify that EXPLAIN ANALYZE on an unsupported query doesn't return an error.
statement ok
EXPLAIN ANALYZE (DISTSQL) SHOW QUERIES;

statement ok
EXPLAIN ANALYZE (DISTSQL) EXPLAIN SELECT 1

# This query verifies support for zeroNode in DistSQL.
query T
EXPLAIN (DISTSQL) SELECT sum(k) FROM kv WHERE FALSE
----
distribution: full
vectorized: true
·
• group (scalar)
│ estimated row count: 1
│
└── • norows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkE1LxDAQhu_-ijCnLgS28ZiTq1YsdD9s1w-QHkI71tJuUzOJCKX_XZoeVoUVPc47eebJzAD01oKE6GmXrOINC67jbJ_dJQuWRUl0tWfkDkGzYDfpds2ad_Z4G6URe1EtIXDodIkbdUAC-QwCcg690QUSaTNFg38Qlx8gQw511zs7xTmHQhsEOYCtbYsg4UG1DmkZAocSrapbPzFklywIWfHquoYWkI8ctLPHKWRVhSDDkf_dtKoqg5Wy2izFd1t2vw4uxGmN-I8mRep15490VJxeIOeAZYXz0Ug7U-DO6MJr5nLrOR-USHbuirmIu7k1ffArLH6Fz3_A-Xj2GQAA__8VEanA

# This query verifies stat collection for the tableReader and windower.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT avg(k) OVER () FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 5 (40 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• window
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows read: 5
      KV bytes read: 40 B
      missing stats
      table: kv@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzslduO2jwQx--_p7DmapGMcuRTlSvailarHqjYFb2ouDDxiFokdtZ2OBTxWH2BPlkVh2w3sIf0sohLzz__zMxvJs4OzF0GCdyMPo7e3hK2Wlwte2Q8HU3IVY-8m4w_keUKKEjF8TPL0UDyDQKgEAKFCCjEQGEAMwqFVikao3T1yM4ZrvkGEp-CkEVpq_CMQqo0QrIDK2yGkMAtm2c4QcZRez5Q4GiZyFya5WpYaJEzvQUKNwWTJiF9r0o8Lm1ChlUZH6bEihwT4v_6aepzqqRFaYWSJ5JWa0M0Mp6Qg3m-tdiEXpE3QCFnG5JjrvSWsCxTKbPIE-I7bc5s-h0NUaUtqhKqgt07m0AAsz2F-nRo2Fi2QEiCPX0Cyh8WpVSao0be4jDbP4Ltq5BcrVF7gzaz19P3V8Ogd8-oooUbTMtTHs81WmnmLiMW84JwYZakNGyBnTkMnuQQtjgE3ZcjeHk5vLDvReewHmF3LGEHLFHfi88BS9QdS9QBS9x3X88_jyXujiXugGXQPwcoL_x2JmgKJQ0e3bSPv9mvbmDkC6yva6NKneIXrVKXpj6Onc8FOBpbq0F9uJZOcgU-NAfPmv9vmf1jc_g3mV0rriuQaNdKL0nGLMp0ez-8Jr5mwrbHytGgFiwTP9jpzBvbYfApihUeht9IzQY0Wr0FjZqjqX4tDx_wOy9CG0l0QXKMJL4gOUYyuCDZz_b__Q4AAP__hj_5Cg==

# Very simple query to make it easier to spot regressions when rewriting results
# in test files.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT k FROM kv WHERE k = 0
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• scan
  nodes: <hidden>
  regions: <hidden>
  actual row count: 0
  KV time: 0µs
  KV contention time: 0µs
  KV rows read: 0
  KV bytes read: 0 B
  missing stats
  table: kv@primary
  spans: [/0 - /0]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkMFq6zAQRffvK4ZZC2JvBQ_Ce7g0pG2KE9JF8UKRhtTYllxpnCYEf1Z_oF9WLJWUUgpd3ntHRzP3jOG5RYnr4qb4v4EGrsrVLTQHeLguygIa-AsZCrTO0J3qKKB8xBwrgb13mkJwfrLOcWBhjigzgbXtB57sSqB2nlCekWtuCSVu1K6lkpQhP5vAhljVbcQ2h3nv6075Ewpc98oGCbMsTq0GljDPUeByC1x3JCF7ew1Ja2eZLNfOfou8ewngSRkZr1huYXdiuljwDwV26ggddc6fQLWt04rpku0U6ycK4AbupxUmSGR-GtUoMKmPiwOrPaHMR_H7VkoKvbOBvhTyEzkbK4Fk9pSaD27wmu690_GbJFfxXTQMBU5pnsTCpmisxj_vAQAA__9rTqSD

# Test a query that has a subquery and a postquery.
statement ok
CREATE TABLE parent (p INT PRIMARY KEY);
INSERT INTO parent VALUES (1), (2);
CREATE TABLE child (c INT PRIMARY KEY, p INT REFERENCES parent(p))

query T
EXPLAIN ANALYZE (DISTSQL) INSERT INTO child VALUES (1, (SELECT min(p) FROM parent))
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 2 (16 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• root
│
├── • insert
│   │ nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 1
│   │ into: child(c, p)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 2 columns, 1 row
│
├── • subquery
│   │ id: @S1
│   │ original sql: (SELECT min(p) FROM parent)
│   │ exec mode: one row
│   │
│   └── • group (scalar)
│       │ nodes: <hidden>
│       │ regions: <hidden>
│       │ actual row count: 1
│       │
│       └── • scan
│             nodes: <hidden>
│             regions: <hidden>
│             actual row count: 1
│             KV time: 0µs
│             KV contention time: 0µs
│             KV rows read: 1
│             KV bytes read: 8 B
│             missing stats
│             table: parent@primary
│             spans: LIMITED SCAN
│             limit: 1
│
└── • constraint-check
    │
    └── • error if rows
        │ nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 0
        │
        └── • lookup join (anti)
            │ nodes: <hidden>
            │ regions: <hidden>
            │ actual row count: 0
            │ KV time: 0µs
            │ KV contention time: 0µs
            │ KV rows read: 1
            │ KV bytes read: 8 B
            │ table: parent@primary
            │ equality: (column2) = (p)
            │ equality cols are key
            │
            └── • filter
                │ nodes: <hidden>
                │ regions: <hidden>
                │ actual row count: 1
                │ estimated row count: 1
                │ filter: column2 IS NOT NULL
                │
                └── • scan buffer
                      nodes: <hidden>
                      regions: <hidden>
                      actual row count: 1
                      label: buffer 1
·
Diagram 1 (subquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJysUuGK2zwQ_P89xbK_EtARO8cHRb8uLSmEpE5JcoFSwqHIi0_Ullxp0yQNeay-QJ-s2I7bM0fTlvanZjTS7OycMHzMUeIkWY4XK5gkqznoR5OnsB7N7sdL6MUCesvxbPxqBYWxvbIPrxfzN1AqT5b7fRRoXUqJKiigfI8xCvwfNwJL7zSF4HwFn-pLk_SAMhJobLnjCt4I1M4TyhOy4ZxQYuJuXDkYosCUWJm8fpQOpHdsnAU2BUmIvn4JKHCrWD9SALfjcscSIhTo3f4HEOPmLLA5Xf4LrDJCeXsWTzzF1z2t1DanBamU_CDqOmtiuCu9KZQ_osBlqWyQcIMCZ6YwDFUg03XX-HQN2lkm-3ym6RrqETypVLbi7ZGphV7ASxRYqAMUVDh_BJXnTiumVEJUc38RS_wnsYyyzFOm2PlB3E1llLx7SOarh-R-NuvdxVVJ_v0Khx2vv6jVgkLpbKCOz5-9HJ03AinNqKlucDuv6a13uv6mOc5rXQ2kFLhhb5vDxDZUZfCpOL4qHl4XD6-Ko664HqWeCi3x3vkPkCsmq4_fk2_xvTLc3UlKgbxRufmsni-slV1Kqsl8oktRW6pta8s1jW3ZgkJQWedC9LtF2Jz_-xYAAP__g4SOVg==
Diagram 2 (main-query): https://cockroachdb.github.io/distsqlplan/decode.html#eJyMj89K80AUxfffU1zOqoWBL9nOTiRCoLbSVjeSRZxc2oF0bpy5wULJY_kCPpk0I4gLweX53Tl_5oL02sOiXu-q7Z7q9X5D7uj7jp5uVo_VjhalocWuWlW3ezr5sBiWdLfd3NPQRg66XMIgSMfr9sQJ9hklGoMhiuOUJF7RZX5Qd2fYwsCHYdQrbgycRIa9QL32DIteXNuTkzEoFf8LGHSsre_nYD6zG9VLIPUntlR8vCcYvLTqjpxIRh1GtXR1RXn7BiWaySCrr96k7YFhy8n8fduW0yAh8Y9RvyUXU2PA3YHz_5OM0fFDFDfXZLmZfTPoOGm-llnUIZ-mZvr3GQAA__9Sm4hi
Diagram 3 (postquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJy0k9Fu2jAUhu_3FEfnCiRLJNCLyVd0E0gpWTJBys3EhXEOrbdgZ7ajFSEeay-wJ5sSt9pY1Who6x3_b__Hn3-TI7qvFXJMstVsWUCSFTnIe1WVsL5Ob2crGMQMBqtZOntfwF7pQT2E-TL_ALWwpP1wiAy1KSkTe3LIP2GMG4a1NZKcM7a1jt2GpHxAHjFUum58a28YSmMJ-RG98hUhx8pIUYGTQsO22e3IQjSKkGFJXqiqG583nsN0jAzpgWTjldHg1Z44RD--O2S4FV7ekwPT-Lrd2-at-fbLiHFzYhjUI4fz4o6Qxyf296xzVXmyZEfxOWDwOUxjSFaQ5QVkt2n6KrzjS3hvjNJLEiXZ0ficuDjUxCGdzQu4zooEbvIkQ4bhgae1VXthD8gwNeZLU8NnozQY3d4Q2eN7tL-6w6FFb5mftPOiqs5vvFg_09JoT_p5OYt1NxAsiTJMXaxhe_D0ZL2Fd_9QbfRitZNLqg1_W7LWWFC7QByPJuct_3_Gq0sYl-Rqox2dQb00OTptGFJ5R-Hzdaaxkj5aI7tjgsy7XGeU5HxYjYNIdFhqAX8Px73hcX943Bue9IcnveGrP8Kb05ufAQAA__9GX6z9
