# LogicTest: 5node

# These tests are different from explain_analyze because they require manual
# data placement.

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT, FAMILY (k, v))

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i);

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT, FAMILY (k, w))

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify that EXPLAIN ANALYZE (DISTSQL) annotates plans with collected
# statistics.

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
start_key  end_key  replicas  lease_holder
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
start_key  end_key  replicas  lease_holder
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# This query verifies stat collection for the tableReader, mergeJoiner, and
# aggregator.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT kv.k, avg(kw.k) FROM kv JOIN kw ON kv.k=kw.k GROUP BY kv.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• group
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ group by: k
│ ordered: +k
│
└── • merge join
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ equality: (k) = (k)
    │ left cols are key
    │ right cols are key
    │
    ├── • scan
    │     nodes: <hidden>
    │     regions: <hidden>
    │     actual row count: 5
    │     KV time: 0µs
    │     KV contention time: 0µs
    │     KV rows read: 5
    │     KV bytes read: 40 B
    │     MVCC step count: 0
    │     MVCC seek count: 0
    │     missing stats
    │     table: kv@primary
    │     spans: FULL SCAN
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV rows read: 5
          KV bytes read: 40 B
          MVCC step count: 0
          MVCC seek count: 0
          missing stats
          table: kw@primary
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm29v2jgcx5_fq7D8qNPCgh3oaKRJbNXu1N0KU_9Mmk5oSsnvaAQkzDGlvaov697AvbJTQmmBEDthXe3iPGvsmDgff_11_POvtzj-McIuPv34-ePhGRpevRlayLsa7A1nb4av0O8n3WM0vEKfukcdNJyhbie9Bb1DST3646R7_gV9-JYWYguHkQ8dbwwxdv_CBFuYYgs72MINbOEm7ll4wqI-xHHEkltu0wZH_jV26xYOwsmUJ8U9C_cjBti9xTzgI8AuPvMuRnACng_MrmML-8C9YJQ-ZnjVnrBg7LEbbOHTiRfGLqrZyYO7U-6idtKNP78iHozBRfX__o3n1_0o5BDyIAozVSyaxYiB57vovvHFDYdFUQt9wBY-_np4iGIOE9SPpiF3Uf2hEGC4XHjh8f4lxCia8sn0vix9wqKA4N6dhedXcyqLt764QZdefLn6vu3k_p6FY-4NALvkztoO4_4axlkWo00MAklzQT7-TsR8YOCv_87r5MGF7towJsfABvApCkJgNlnT9gj-5ntt8vrVOxYMLud_Po6H1U4GB66hP83iH3vXaAzjiN0gbzSK-h4H30X1lHlSF_8YIQ7jCfKDeIimsTeARXVp0I8QnTJqfD8YMBh4PGI2aWbGxsLdOcd76b3vfPve6Z5975x__rzXJgmH0_PjvTZN_jrsnnfO7v_OAfKL5dP4OfmI8dD6z-E5PT_-fpQAcpKrEwh9YKmCUJvabecJoT0CaRYAMg03IdlIoxPVoolN13Sybbebud3eX-k2Ke6nRL4s2bRmO6b4KdkW5NsCC5NJIGkuyGdcmMhOLUwSNS4vTPu7tTCVlo9kYSIvfWGixY2JFnB4p2Y3TDEmsi3IVgGHNwkkzQX5jA5Pd8rhJWpcdvi3u-XwpeUjcXj60h3eKW5MTgGHb9TspinGRLYFeVDA4U0CSXNBPqPDOzvl8BI1Ljt8a7ccvrR8JA7vvHSHbxQ3pkYBh2_WTLElsi3GptzfazZBXugjgiJ-CcwUpDQX6TM6fWOnnF6iy2WnP9gtpy8tH4nTN16600tOlE4gnkRhDGvHCZt_uZ7QAn8Ac7pxNGV9-MKifvqY-WU3bZeGzXyI-byWzi-OwkVVzD0uOo74lZOoPjeN4r1v5fY-BD6L2BCNPA5h_-ah-4vymRfw1RfzIQYWeKPgHy_71otm9_bdh-Aqfe2lqoWPP9Sl77yoHUOcoFhv_PRIiKOYCREwaT0JE1KaSaWT7MRXrRMlTEgJM6TamaG4963c3hs7oGtm-PxMlJihhEmlE5kZGsKErjOpLzNZRVJfb-wIgTZ0-qzcMEXEvSd1E9dGCZNmxSRjG5VOskyM1ElDaKVrSNYbN4WN6f6qEWv3Vbq_ZYBhh-UgRpK_G30JA6o8wKDhiJoZYJBMfNU6UbL3ertlgGGHZSJGkr8b1cMMxb1XHmDQcETNDDBIJr5qnSgxw5bww_ZAHGA42DLAsMMaEyMRRC30CLpIum_kxlHMxMwAg4SJkTohmdM8UYTBjOWFlDnNM0UnZc4IKyaSgIYeWxBZ_1UPqpaTX3X0QY3SM0d6VfhBwsTIzaqEiSCqoYkjSvqvelDVOKJk8qsOQahReua0cuW7mTTEQQiSOdirohASJmYmT8ig5G_Q9IjNSPpvZiBCBkX1rlsNFHG6gmomapbeKgeiLBMzN61VakV5KLqny8gmv5mDWiVClGVi5qa1yq8oD0X3nBnZ5DdzUMXZEESSDkGqfIgs0q0TIgyGonqDpiMUQXhDk_BMlROx4f_XqpyILBO9cyJ0ZKI6EqFm7mydE2EwlEoppcIbemxGqN45EWocscqJKMvEzEiEDEqllFLhDU0cUZwTQSU5EbTKicgirXIiykNRvUHTEYqZiRYyKLpnz9AqJ6J317v77f8AAAD__wKcax4=

# This query verifies stats collection for the hashJoiner, distinct and sorter.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT DISTINCT(kw.w) FROM kv JOIN kw ON kv.k = kw.w ORDER BY kw.w
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• sort
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ order: +w
│
└── • distinct
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ distinct on: w
    │
    └── • hash join
        │ nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 5
        │ equality: (k) = (w)
        │ left cols are key
        │
        ├── • scan
        │     nodes: <hidden>
        │     regions: <hidden>
        │     actual row count: 5
        │     KV time: 0µs
        │     KV contention time: 0µs
        │     KV rows read: 5
        │     KV bytes read: 40 B
        │     MVCC step count: 0
        │     MVCC seek count: 0
        │     missing stats
        │     table: kv@primary
        │     spans: FULL SCAN
        │
        └── • scan
              nodes: <hidden>
              regions: <hidden>
              actual row count: 5
              KV time: 0µs
              KV contention time: 0µs
              KV rows read: 5
              KV bytes read: 40 B
              MVCC step count: 0
              MVCC seek count: 0
              missing stats
              table: kw@primary
              spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm9Fu2zYUhu_3FASvWkyuREp2HAEFgqYdlm6NhyQoMAy-UCQuFmxLrkjHyYI81l5gTzZYjuLIsnikpAs503exGNrkdw7PT_2U7jD_NsE-Pv_066fjC_Tx5Pzi5PT4Ar0ZL94t3qKfzgZf0PgafR6cnKLxAg1O0fj63Ri9R8t2NDj7-OkMffg9_4QtnKQROw2mjGP_D0ywhSm2sIst7GELd_HQwrMsDRnnabb8l7u8w0l0g33HwnEym4vl5aGFwzRj2L_DIhYThn18EVxO2BkLIpbZDrZwxEQQT_KfGV8fzbJ4GmS32MLnsyDhPurYyx8ezIWPjpbD-OUrEvGU-cj552---hymiWCJiNOk0pSlC44yFkQ-euh8eStYcamPPmALf_l6fIy4YDMUpvNE-Mh5vMjY-OnFy0CEI8ZROhez-cO1_BeKCwQP7y28-rSiUsz68haNAj4qz_do-f9DC3MRXDHsk3vreRh7GxgXVYw2eQqS7jZIWgty_T3zJM0ilrGo9E3DZU_oX7ZE4-eAjz6nccIym2wk9YT9Kd4ckbfvs_hqlP9VCgO7YeG8inwa3KApm6bZLQomkzQMBIt85OScl2382wQJNp2hKOZjNOfBFSuaW8Ndg3PbZODHmIs4CYVNupVoaDGvdknjvSBpZHSooyed9cy7baJ-nmaCZTatxPxH3abVaxDQbeHM57I1pqdpJ53Z7kZAayYNjrxbO_KD0shJcyEgsJ7atGO7ZipqC5AHDRS1BNIoRSWvrKhkVxQVyMC1ovb01IyXKGq7pJEqKtGTTp2iAlEvFLUSc80VlTYvp7SBLrkd2zNTl1qA7DfQpRJIo3SJvrIu0V3RJSAD17p0oGflfYkutUsaqS5RPenU6RIQ9UKXKjHXXJfc5uXUbaBLXsfumqlLLUAeNtClEkijdMl9ZV1yd0WXgAxc61Jfz8r7El1qlzRSXXL1pFOnS0DUC12qxFxzXfKal1OvgS51O2aqUguMXViVOjZBQRIhglIxYpmZ-uS9sj55u6JPQC6u9elQzwr8En1qlzRSffL0pFOnT0DUC32qxFxzfQIO_s4Yn6UJZ5vVYOs3O8uAs-iKrbKDp_MsZL9laZj_zOrjIO-X26MR42LVSlcfTpKiiYtAyI7Z_ktyDs6rXfPRH9aOPmFikWZjNAkES8Lbx-EX1xdBLMoTixhnWRxM4r-C6qyLbg-iE7L4Op_2k6ZCfR7b8jkXrVPGlyg2O39_JKSrmAmRMOl_FyakLRNK9nlSYXJgIhPSohhS7YqhfPSHtaM3NqAbxfD1mSgphkCSk32eAMXQECZ0k4nzlIlbQuJsdnalQD2dtpVbloh89MTI_QLAxMj9gpwJdfdMKkyMvCfzpKW0Ky-lXWnnXpnnZueevIiXK5mj3Zb24JnuxA7nkhxJ_fL6PwRUuTuhYUTNdCcAJqp3G0pu3PrPdCd2OE3kSOotDz2KoXz0yt0JDSNqpjsBMFHtTigphofSjS1x5HtqIne_6_2JHc4ygInE9dDDtIHGr3rPoGNQzbQoIChGehSk4oGXKyoFKqrcLu6ZuGEngBdmZJrJmZi59ABvvd4V0eM-Bspz1Q6GlovfzO1IxQnfexgAEzOf25AzkVgjmlREIM9V2xhqKiIARbWPoSbT5cd7pAdsuysHfHsjA2Bi5uMbEJT67Ygm7o58_IYaGQAUM--mKmeH5YraBypqxW3fGxmk4rbvjQyAieqlp2OemPl4B7R4tDpXecb4jTQyaJv35gy5lQGYqDYylFREgImZz3hAi6feHdGjIkLjN9LIoPLzQwqcH9LK-eHeyACYmGlkQFDM3I7IoUjcET3cHWj8qu-m1AS1coJYrqgeUFHlb50YaWTQituulZGhIxMzl56ciZlGBrR4zNyOAFC0OlfZNn7gCMHIm3Y5E9VGhpo8B84PzTQygMWj-jEPLaHUuyOaVET5-SEFzg-p_G0dM40M4E03M3cOABQzjQzgXTcjH_OAoGj10v-2_ZT8ZT0XeFnPrdjtBhoZw_sf_g0AAP__LVM9xQ==

# This query verifies stats collection for WITH ORDINALITY and the hashJoiner.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv WITH ORDINALITY AS a, kv WITH ORDINALITY AS b
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• cross join
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 25
│
├── • ordinality
│   │ nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 5
│   │
│   └── • scan
│         nodes: <hidden>
│         regions: <hidden>
│         actual row count: 5
│         KV time: 0µs
│         KV contention time: 0µs
│         KV rows read: 5
│         KV bytes read: 40 B
│         MVCC step count: 0
│         MVCC seek count: 0
│         missing stats
│         table: kv@primary
│         spans: FULL SCAN
│
└── • ordinality
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV rows read: 5
          KV bytes read: 40 B
          MVCC step count: 0
          MVCC seek count: 0
          missing stats
          table: kv@primary
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzcUcFu00AQvfMVozmiRbEdh8OeXEJRA22DkqgIIR823lG6ir3r7q5LoiifxQ_wZch2A0napATEheO8t2_nzXsrdHc5chyfX573J_AS3o2GVzC_h0-DyQUMR28H12eXg8lnOBuDYAeIKTLURtK1KMgh_4IhpgxLazJyztgaWjUPBnKBPGCodFn5Gk4ZZsYS8hV65XNCjhMxzWlEQpLtBMhQkhcqb76d3yelVYWwS2Q4LoV2HF4hww834FVBHILv31w7Z0Z70l4Z_Yiy5qsDS0Jy6LXIdOlpA8UBvEGGVzf9PjhPJWSm0p5D8BMkmm-DU-GzW3JgKl9WD1izYgP0MF0zbKeHm50XM0Iertnv5zK0UmmRK7_shLux0IKy6vGpf2EsOsXYdmHR_11Y9w8L6_7rwuKDxn75qbSxkizJHTNprXzuyRPXXQh3-94oTbYT7143rK0mIUsilnRZErOkx5LXyA6dXYgFFFQYuwSR5yYTniSHttWac3c5eCpKkMrNoXJiRhv62cSiw5H1TulyRK402tF-dE_-HNR5kZxRm78zlc3oozVZs6Ydh42uASQ537JhOwx0S9UGt8XhUXG8Iw73xdFRcff45u4Jm6N9cXxU3NvbnK5f_AgAAP__518m7Q==

# Verify that EXPLAIN ANALYZE on an unsupported query doesn't return an error.
statement ok
EXPLAIN ANALYZE (DISTSQL) SHOW QUERIES;

statement ok
EXPLAIN ANALYZE (DISTSQL) EXPLAIN SELECT 1

# This query verifies support for zeroNode in DistSQL.
query T
EXPLAIN (DISTSQL) SELECT sum(k) FROM kv WHERE FALSE
----
distribution: full
vectorized: true
·
• group (scalar)
│ estimated row count: 1
│
└── • norows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkE1LxDAQhu_-ijCnLgS28ZiTq1YsdD9s1w-QHkI71tJuUzOJCKX_XZoeVoUVPc47eebJzAD01oKE6GmXrOINC67jbJ_dJQuWRUl0tWfkDkGzYDfpds2ad_Z4G6URe1EtIXDodIkbdUAC-QwCcg690QUSaTNFg38Qlx8gQw511zs7xTmHQhsEOYCtbYsg4UG1DmkZAocSrapbPzFklywIWfHquoYWkI8ctLPHKWRVhSDDkf_dtKoqg5Wy2izFd1t2vw4uxGmN-I8mRep15490VJxeIOeAZYXz0Ug7U-DO6MJr5nLrOR-USHbuirmIu7k1ffArLH6Fz3_A-Xj2GQAA__8VEanA

# This query verifies stat collection for the tableReader and windower.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT avg(k) OVER () FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 5 (40 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• window
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows read: 5
      KV bytes read: 40 B
      MVCC step count: 0
      MVCC seek count: 0
      missing stats
      table: kv@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzslU9u2zwQxfffKQazSgAalvznQ8FV2iAtgjZ14QTuovCCEQcuIYlUSMqOG_hYvUBPVoiy3MhJGnVreDnz9Dzkj8_kA7q7DDleX3y6OL8BsVycpKcwmV1M4eQU3k8nV5AukaE2kj6LnBzybxgjwwEyHCLDETIc45xhYU1CzhlbffIQDJfyHnnEUOmi9FV7zjAxlpA_oFc-I-R4I24zmpKQZPsRMpTkhcrCmHR5VliVC7tGhteF0I5Dr18NnpSew1m1jI8z8ConDtGvn66uE6M9aa-MfiJZs3JgSUgOW_Pt2lPTegPvkOHV7PwcnKcCElNqzyHaNYnSx81b4ZPv5MCUvii3vTChacQ43zCsq-32nRcLQh5v2AuI_pAptbGSLMkWlfnmGYhflZZmRbY_bhN8O_twchaf7ohV7MKkQILDeFc7L7KszYvuKSmfYszFPeSUG7sGkWUmEZ4khyiwqzR3l4GnvACpXAqlEwtq5FeBjV8ENmgBi7tnKn49U_1Brz88vFQNukMadIA07PVHhwdp2B3SsAOkUS_8BQ8M0qg7pFEHSOPe4SF65ZWbkiuMdrR3lT__y1F1xZNcUP0eOFPahL5Yk4QxdTkJvtCQ5HytxnVxqYMUFvjYHP_V_H_LHO2bB_8yOWwl7Ao1-ZWxKWTCk07Wu6Ns-iuhfPuQJTmySmTqh3iagMa2jUFCaknbKDRSk4dGqzPRqDm56kl6_EH3ILSRDI9I9pGMjkj2kYyPSDbzzX-_AwAA__9eWBgO

# Very simple query to make it easier to spot regressions when rewriting results
# in test files.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT k FROM kv WHERE k = 0
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• scan
  nodes: <hidden>
  regions: <hidden>
  actual row count: 0
  KV time: 0µs
  KV contention time: 0µs
  KV rows read: 0
  KV bytes read: 0 B
  MVCC step count: 0
  MVCC seek count: 0
  missing stats
  table: kv@primary
  spans: [/0 - /0]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkU1qwzAQhfc9xTBrFdtbQSE0uDTkrzhpuiheKPaQGjuSK43ThuBj9QI9WbEU-kMpdCN43xu9QU8ndM8NSlyls3S8hhpusuUc6gM83KZZCjVcQYwCtSlpofbkUD5igrnA1pqCnDN2QCc_MClfUcYCK912POBcYGEsoTwhV9wQSlyrbUMZqZJsNASXxKpqfGx9GLW22it7RIGrVmknIYqj-HI4osX9bIYClx1LGCUocLoBrvYkIX5_c0EXRjNproz-ZVnz4sCSKqV_z3QD2yPTJ4JrFDjfjMfgmFooTKc5TAZIVH-HW8XFEzkwHbfdmfkNXyDvBQZ1bsKx2hHKpBf_bysj1xrt6EdRfyXHfS6Qyh2FH3GmswXdWVP4NUEu_T0PSnIc3CSIiQ5Wn_cXHwEAAP__kieqMA==

# Test a query that has a subquery and a postquery.
statement ok
CREATE TABLE parent (p INT PRIMARY KEY);
INSERT INTO parent VALUES (1), (2);
CREATE TABLE child (c INT PRIMARY KEY, p INT REFERENCES parent(p))

query T
EXPLAIN ANALYZE (DISTSQL) INSERT INTO child VALUES (1, (SELECT min(p) FROM parent))
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 2 (16 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• root
│
├── • insert
│   │ nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 1
│   │ into: child(c, p)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 2 columns, 1 row
│
├── • subquery
│   │ id: @S1
│   │ original sql: (SELECT min(p) FROM parent)
│   │ exec mode: one row
│   │
│   └── • group (scalar)
│       │ nodes: <hidden>
│       │ regions: <hidden>
│       │ actual row count: 1
│       │
│       └── • scan
│             nodes: <hidden>
│             regions: <hidden>
│             actual row count: 1
│             KV time: 0µs
│             KV contention time: 0µs
│             KV rows read: 1
│             KV bytes read: 8 B
│             MVCC step count: 0
│             MVCC seek count: 0
│             missing stats
│             table: parent@primary
│             spans: LIMITED SCAN
│             limit: 1
│
└── • constraint-check
    │
    └── • error if rows
        │ nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 0
        │
        └── • lookup join (anti)
            │ nodes: <hidden>
            │ regions: <hidden>
            │ actual row count: 0
            │ KV time: 0µs
            │ KV contention time: 0µs
            │ KV rows read: 1
            │ KV bytes read: 8 B
            │ MVCC step count: 0
            │ MVCC seek count: 0
            │ table: parent@primary
            │ equality: (column2) = (p)
            │ equality cols are key
            │
            └── • filter
                │ nodes: <hidden>
                │ regions: <hidden>
                │ actual row count: 1
                │ estimated row count: 1
                │ filter: column2 IS NOT NULL
                │
                └── • scan buffer
                      nodes: <hidden>
                      regions: <hidden>
                      actual row count: 1
                      label: buffer 1
·
Diagram 1 (subquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJysUtGK2zAQfO9XLPuUAx2xcxSKny4NKYTknJLkAqWEQ5EXnzhbcqV1c2nIZ_UH-mXFdtzGHE1b2kfNaqSZ2Tmg_5RhhJN4OV6sYBKv5qAedZbAeji7Hy-hFwroLcez8WgFuTa94greLeZ3UEhHhq-uUKCxCcUyJ4_RRwxR4GvcCCycVeS9dRV8qC9NkmeMAoHaFCVX8Eagso4wOiBrzggjjO21LfoDFJgQS53Vj9IzqZK1NcA6pwiCb189CtxKVo_kwZZclBxBgAKd3f0EQtwcBTan03-eZUoY3RzFmabwsqaV3Ga0IJmQ6wddZU0Mt4XTuXR7FLgspPERXKPAmc41QxXIdN0VPl2DsobJvPQ0XUNtwZFMopa83TO10Bt4iwLv1qMReKYClC3NyXsDEj2dg_8QUvg3IQ3T1FEq2bp-2M1oGH94iOerh_h-NuvdhlVl_v9CBx2tvynZgnxhjaeOzl-9HBw3AilJqSmyt6VT9N5ZVX_THOc1rwYS8txMb5rDxDSjSuA5ObxIHlwmDy6Sgy65tlK7QkO8s-4JMslk1P5H8i2-k5q7O0nIk9My01_ky4W1tFNlFenPdKptO2q7286a_rbTnLyXaefCH5d2c3z1PQAA__9GdJGu
Diagram 2 (main-query): https://cockroachdb.github.io/distsqlplan/decode.html#eJyMj89K80AUxfffU1zOqoWBL9nOTiRCoLbSVjeSRZxc2oF0bpy5wULJY_kCPpk0I4gLweX53Tl_5oL02sOiXu-q7Z7q9X5D7uj7jp5uVo_VjhalocWuWlW3ezr5sBiWdLfd3NPQRg66XMIgSMfr9sQJ9hklGoMhiuOUJF7RZX5Qd2fYwsCHYdQrbgycRIa9QL32DIteXNuTkzEoFf8LGHSsre_nYD6zG9VLIPUntlR8vCcYvLTqjpxIRh1GtXR1RXn7BiWaySCrr96k7YFhy8n8fduW0yAh8Y9RvyUXU2PA3YHz_5OM0fFDFDfXZLmZfTPoOGm-llnUIZ-mZvr3GQAA__9Sm4hi
Diagram 3 (postquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJy0k9Fu2jAUhu_3FEfnCiRLJNCLKVd0CKSUNJkg5WbiwjiH1muwM9vRihCPtRfYk02JqVZWNRrTepfz2__xd_zHB7TfSowwTpfTRQ5xmmcgHmRZwOo6uZsuoRcy6C2nyXSSw06qXtWH2SK7hYobUq7fR4ZKF5TyHVmMvmCIa4aV0YKs1aaRDu2GuHjCKGAoVVW7Rl4zFNoQRgd00pWEEZZa8BKs4Ao29XZLBoJBgAwLclyWbfusdhGMh8iQnkjUTmoFTu4oguDnD4sMN9yJB7Kga1c1exu_0d9_CyGujwx9deKwjt8TRuGR_T3rTJaODJlBeA7o9QjGIcRLSLMc0rskeRfe4SW8N1qqBfGCzGB4TpzvK4ogmc5yuE7zGG6yOEWGPuBxZeSOmz0yTLR-rCv4qqUCrZoJkZ3yaL7aw6FBb5ifa-t4WZ5PPF-9qoVWjtTry5mv2oZgiBe-63wFm72jZ-kjfEKGt6vJBKyjCoSu1ekSvUj0-FL81xCCN0MYXRKC_8HJGG1Abv1s4WB0nsf_Z7y6hHFBttLK0hnUW52D45ohFffkH7rVtRH02WjRHuPLrPW1QkHW-dXQF7HySw3gS3PYaR52m4ed5lG3edRpvvrDvD5--BUAAP__ymy5eQ==
