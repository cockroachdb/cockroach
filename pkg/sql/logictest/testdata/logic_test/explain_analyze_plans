# LogicTest: 5node

# These tests are different from explain_analyze because they require manual
# data placement.

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT, FAMILY (k, v))

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i);

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT, FAMILY (k, w))

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify that EXPLAIN ANALYZE (DISTSQL) annotates plans with collected
# statistics.

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
start_key  end_key  replicas  lease_holder
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
start_key  end_key  replicas  lease_holder
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# This query verifies stat collection for the tableReader, mergeJoiner, and
# aggregator.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT kv.k, avg(kw.k) FROM kv JOIN kw ON kv.k=kw.k GROUP BY kv.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
·
• group
│ cluster nodes: <hidden>
│ actual row count: 5
│ group by: k
│ ordered: +k
│
└── • merge join
    │ cluster nodes: <hidden>
    │ actual row count: 5
    │ equality: (k) = (k)
    │ left cols are key
    │ right cols are key
    │
    ├── • scan
    │     cluster nodes: <hidden>
    │     actual row count: 5
    │     KV rows read: 5
    │     KV bytes read: 40 B
    │     missing stats
    │     table: kv@primary
    │     spans: FULL SCAN
    │
    └── • scan
          cluster nodes: <hidden>
          actual row count: 5
          KV rows read: 5
          KV bytes read: 40 B
          missing stats
          table: kw@primary
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm-9um7obx9__rsLyq04jIzZJl0aalG3a76g7azL1z5Gmo6hyg0-KEiAzTtOeqpd1buBc2RGkWRMINrCuBsy7gHHg-fjL1_HjJ_cw-D6HfXj26cunj-dgdvNmZgByMz2Yrd7MXoH_n45OwOwGfB4dD8FsBUbD6BLwDoTt4LfT0cVX8OFbdBIa0PNtOiQuDWD_T4igATE0oAUN2IEG7MKxARfMn9Ag8Fl4yX3U4di-hf22AR1vseTh6bEBJz6jsH8PucPnFPbhObma01NKbMrMNjSgTTlx5tFtZjeDBXNcwu6gAc8WxAv6oGWGNx4teR8Mwsf4_Q_AHZf2Qfvff4L18cT3OPW443uJJuavAsAosfvgsfPVHaebUz3wARrwivDJNQ2Av-SL8DbhQ0X9NicQHD8YcH20jnUTy9UduCbB9W4Ug_D6sQEDTqYU9tGDUQzOYQzOKgnHRJXHg1PxPH2Pz2zKqB3_ntfhjTNdtYf0CWVT-tl3PMpMFNPhnP7FDwbo9at3zJlerz8-UTYGIXJ6SyfLJFSX3AKXuj67A2Q-9yeEU7sP2hFJl9w67tIFwfc54NRdANsJZmAZkCndXJIb9hNIK4_O3k-njE4J95mJuonxMeBozfJRVO-H3y6Ho_PL4cWXLwcDFLI4uzg5GODw08fRxfD88XMKlF8soc7PSUiMB7d_Ds_ZxcnlcQjICo9OqWdTFqkIDLA5sJ4R2hOQbgYgS28fkr00hn7LX5g4ppOij91NfezDncdG2Z0SyacRE7dMq9pOiYrieZthIqk-HpyK5wUnElS7iUSis-2J5LBeE0luCUkmElT1iQRntxycwZGtltmptuWgonh6GRy5-nhwKp4XdGRcO0eW6Gzbkd_Wy5FzS0jiyLjqjmxltxwrgyN3Wma32paDiuI5yuDI1ceDU_G8oCNbtXNkic62HblXL0fOLSGJI1tVd-ROdsvpZHDkbqvahoOKwunK_bhlIkA8GyDg82vKqg0Kp4J6QWfu1M6ZJYrbduajejlzbglJnLlTdWeW7Iic0mDhewGNpcP3f3M7pEXtKV3TDfwlm9CvzJ9Et1kfjqJ-URrJpgFft-L1wbG3aQo44aJ0-q9-kdpr88geQS81Ao_ylc9mYE449SZ3P0LYnF8Rh-8GZ9OAMofMnb9JMvJNt0dznlDnJgp9q2nj0j_aopg3rS4NQhTxzs-PBFmKmSABk96zMEG5mTQ6Sb78qnWihAnKYYi4lIYojqCXGoG2gxozxJdnosQQJUwancgMURMmOM6kvc1kF0k73tkSAu2U7eflntdEHAFq6zhHSph0GyYJ62h0kmSipU46QjuNIYl37go748NdM1bvp3viPyyYcKixJMRI0lemVRlU5QmHEo6qngkHycuvWidK1mFvCyYcaiwTMZL0lWl5DFEcgfKEQwlHVc-Eg-TlV60TJYbYE_7IPRInHI4KJhxqrDExEkEGozxJGEkIWi4kxUz0TDhImGipE5TY5RNlHPSYYlCeXT5ddJJn37BhIklslGcpIotB9cCW0gBUZyLUqD2x1dekIiRMtFy0SpgIshslckVJDKoHVo0rSgxAdTpCjdoTu5g7v59RR5yQQIkNvyYjIWGiZ1GFDEr6Qq08eRpJDHomJWRQVK_A1UARlzKoZqJm-m1qI_Iy0XPx2pRb5IdShTIamQHoObBNgUReJnouXpuai_xQqlBLIzMAPQdWXCWBJGUSqKmTSCItXCihMRTVC7UyQhGkOUqUqmlqJfb8162plUgyKXetRBmZqM5KqHl3CtdKaAylUUquNEd5FiW43LUSalyxqZXIy0TPrIQMSqOUXGmOErmiuFYCS2olcFMrkUTa1Erkh6J6oVZGKHoWX8igVKGqBje1EuOH8cP__gsAAP__wBESXg==

# This query verifies stats collection for the hashJoiner, distinct and sorter.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT DISTINCT(kw.w) FROM kv JOIN kw ON kv.k = kw.w ORDER BY kw.w
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
·
• sort
│ cluster nodes: <hidden>
│ actual row count: 5
│ order: +w
│
└── • distinct
    │ cluster nodes: <hidden>
    │ actual row count: 5
    │ distinct on: w
    │
    └── • hash join
        │ cluster nodes: <hidden>
        │ actual row count: 5
        │ equality: (k) = (w)
        │ left cols are key
        │
        ├── • scan
        │     cluster nodes: <hidden>
        │     actual row count: 5
        │     KV rows read: 5
        │     KV bytes read: 40 B
        │     missing stats
        │     table: kv@primary
        │     spans: FULL SCAN
        │
        └── • scan
              cluster nodes: <hidden>
              actual row count: 5
              KV rows read: 5
              KV bytes read: 40 B
              missing stats
              table: kw@primary
              spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsnNFu2zYXx--_pyB41eKTK5OSHcdAgaBthqXb4iEJBgyDLxSLiwXbkivScbIgj7UX2JMNlqs6Mi0eKelCWvRdZZmxzu8cnj_1p9QHzL9McR9fnv58-vEKfTq7vDo7_3iF3kyW75Zv0Q8Xg1_Q5BZ9Hpydo8kSDc7R5PbdBL1Hq_NocPHp9AJ9-D07wg6Ok5CdBzPGcf8PTLCDKXawhx3sYwd38NDB8zQZMc6TdPWVh2zAWXiH-20HR_F8IVYfDx08SlKG-w9YRGLKcB9fBddTdsGCkKVuGzs4ZCKIptnPTG5P5mk0C9J77ODLeRDzPmq5qx8eLEQfnawu46ffkIhmrI_a__zN18ejJBYsFlESS6fSZMlRyoKwj74Ovr4XLP-ohz5gB18HYjRmHCULMV_9zOqisnH5BwQPHx28PlrHmsdyfY_GAR8XozhZfX_oYC6CG4b75NF5HpzuFpylDMclT_HQfcRDS_Fs_s4iTtKQpSws_KXhaiT0lR2Mfwz4-HMSxSx1yVYBTtmf4s0Jefs-jW7G2b8KcNkdGy1kkLPgDs3YLEnvUTCdJqNAsLCP2hm9WXAXzRYzxL9MkWCzOQojPkELHtyw_Cu1AW_geXVq61PERRSPhEs6UkaMia1e8fgvKB4VIdo2l9Am-k6d7F8mqWCpS6Xc_9_E0LoVErsrrVk8O3N7nrSSuettJbYkcPDKO6VXflS4clK93RNYC13acr0mqWENPEcV1LCApwFqSF5ZDUmT1BCorY0ads3t9S9Rw3rFo1RDYi6hMjUEsp-roZT7PVBDWr1p0gqa4rVcv0maUgNPr4KmFPA0QFPoK2sKbZKmALW10ZQjczvmSzSlXvEoNYWaS6hMU4Ds55oi5X4PNMWr3jS9Cprit9xOkzSlBp7jCppSwNMATfFeWVO8JmkKUFsbTemZ2zFfoin1ikepKZ65hMo0Bch-rilS7vdAU_zqTdOvoCmdVpMUpQacDqwoLZegIA4RQYkYs7RJ2uK_srb4TdIWoMo22nJsbud8ibbUKx6ltvjmEirTFiD7ubZIud8DbQE2uy4YnycxZ9vdYedfbq8Sz8Ibtq4SnizSEfs1TUbZz6wPB9m4zFYMGRfrs3R9cBbnp7gIhGpb6b-m18ZZB6wewXFpBDETyySdoGkgWDy6_xZC_vkyiEQxuJBxlkbBNPorkCPPh32VlxGLbrPQn5zKdebbuSzm_OyM8RWK7cHfHwnpaGZCFEx634UJqcuEkkOdSEyObGRCajREamRDVEdwXBqBtUndaoivz0RLQwQKnRzqBGiIljCh20zaT5l4BSTt7cGeEqhv2vJyxzRRR0CsXDcATKxcN6iZUO_ARGJi5b2Zr2ynHXU77SgHd4s8twd31Y282Mna-pvxDnhHz3QrGlxPaiTlU2xfkqrdrTAwq3a6FQAT3asOLTdxvWe6FQ0uEzWScvvDnIaojkC7W2FgVu10KwAmut0KLQ3xWLnIJW31-pqoHfFyv6LBVQYwUTgg5pg4UAy61w4mJtZOywKCYqVnQSRfvNhVKdBV1RZy18aFOwG8MSvLTM3EzqkHeO3l7og59zNQret2M4xsAHYuSSR3_OBnAEzsfJ5DzURhkRjUFYFa121p6OmKABTdnoaealdv-5EusPyWNv4OpgbAxM7HOiAo5UsSg5wedQyWmhoAFDvvrKT9xGJX7QFdVXLfD6YGkdz3g6kBMNE99UysEzsf-YAmj3H7LM-IwUpTg9Z5x86SWxqAiW5TQ0tXBJjY-dwHNHnKXRJzuiIUg5WmBlXvKVJgT5FKe4oHUwNgYqepAUGxc0mihqJwScxxeqAYdN9Z6UmstKtY7Ko-0FXVb6dYaWpQyX03ytQwkYmdU0_NxE5TA5o8di5JACjG7bPsigHYUrDyBl7NRLepoafWgT1FO00NYPLofvTDSCjlLolBXVG9p0iBPUWqfqPHTlMDeBvOzhUEAMVOUwN4H87KRz8gKMb9BwG71lXql_o84KU-T7LfLTQ1ho__-zcAAP__1cX-vg==

# This query verifies stats collection for WITH ORDINALITY and the hashJoiner.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv WITH ORDINALITY AS a, kv WITH ORDINALITY AS b
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
·
• cross join
│ cluster nodes: <hidden>
│ actual row count: 25
│
├── • ordinality
│   │ cluster nodes: <hidden>
│   │ actual row count: 5
│   │
│   └── • scan
│         cluster nodes: <hidden>
│         actual row count: 5
│         KV rows read: 5
│         KV bytes read: 40 B
│         missing stats
│         table: kv@primary
│         spans: FULL SCAN
│
└── • ordinality
    │ cluster nodes: <hidden>
    │ actual row count: 5
    │
    └── • scan
          cluster nodes: <hidden>
          actual row count: 5
          KV rows read: 5
          KV bytes read: 40 B
          missing stats
          table: kv@primary
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzUUcFu00AQvfMVozmiRYkdh8OeXKCogVKjJAIh5MPGO0pX8e66u-uSKMpn8QN8GbJNRJM2KQFx6HHezJt5b94a_U2JHCfnl-evp_Ac3o6zD7C4hc-j6QVk4zejq7PL0fQLnE1AsAONGTI0VtKV0OSRf8UIc4aVswV5b10DrduBkVwi7zNUpqpDA-cMC-sI-RqDCiUhx6mYlTQmIcn1-shQUhCqbNcubtPKKS3cChlOKmE8hxfI8P0nCEoTh_6P776rC2sCmaCsuddy9psHR0JyGHbIbBVoCyV9eIUMZyIU1-TB1qGqA4dGSUvcAkPMNwy76pcTH8SckEcb9uduMyeVEaUKq160a5aWVNT3DfyDsPgUYXdjiJ9iDIO_jGHwv2NIDgr7rac21klyJHfE5A3zsZEH3F0If_3OKkOul-y6yxqpacTSmKUDliYsHbL0JbJDtrVYgiZt3QpEWdpCBJIcuqy0WCpda_A3JQTSFUjlF1B7MaftyKNfiw-_bXhKnmPylTWe9t_34OZ-8zOSc-oy8LZ2BX10tmjPdGXW8lpAkg9dN-qKkelajcC75OgoOdkhR_vk-Ch5cPzy4ITL8T45OUoe7l3ON89-BgAA__9TNw-t

# Verify that EXPLAIN ANALYZE on an unsupported query doesn't return an error.
statement ok
EXPLAIN ANALYZE (DISTSQL) SHOW QUERIES;

statement ok
EXPLAIN ANALYZE (DISTSQL) EXPLAIN SELECT 1

# This query verifies support for zeroNode in DistSQL.
query T
EXPLAIN (DISTSQL) SELECT sum(k) FROM kv WHERE FALSE
----
distribution: full
vectorized: true
·
• group (scalar)
│ estimated row count: 1
│
└── • norows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkE1LxDAQhu_-ijCnLgS28ZiTq1YsdD9s1w-QHkI71tJuUzOJCKX_XZoeVoUVPc47eebJzAD01oKE6GmXrOINC67jbJ_dJQuWRUl0tWfkDkGzYDfpds2ad_Z4G6URe1EtIXDodIkbdUAC-QwCcg690QUSaTNFg38Qlx8gQw511zs7xTmHQhsEOYCtbYsg4UG1DmkZAocSrapbPzFklywIWfHquoYWkI8ctLPHKWRVhSDDkf_dtKoqg5Wy2izFd1t2vw4uxGmN-I8mRep15490VJxeIOeAZYXz0Ug7U-DO6MJr5nLrOR-USHbuirmIu7k1ffArLH6Fz3_A-Xj2GQAA__8VEanA

# This query verifies stat collection for the tableReader and windower.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT avg(k) OVER () FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 5 (40 B)
maximum memory usage: <hidden>
network usage: <hidden>
·
• window
│ cluster nodes: <hidden>
│ actual row count: 5
│
└── • scan
      cluster nodes: <hidden>
      actual row count: 5
      KV rows read: 5
      KV bytes read: 40 B
      missing stats
      table: kv@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzslctu2zoQhvfnKYhZJQAN3Q8KrtIWaRH04sIJ0kXhBSMOXMISqZCULw38WH2BPlkhykojO6nVpQEvZ4a_h_839OgB7H0BDK4vP16-vSF8MTubn5Px7eWEnJ2Td5PxJzJfAAWlBX7mJVpg3yACCjFQSIBCChQymFKojM7RWm2aIw9ecCVWwEIKUlW1a9JTCrk2COwBnHQFAoMbflfgBLlAE4RAQaDjsvBt5ouLysiSmzVQuK64soyMgqbxuHaMXDTX-HBLnCyRkfDXT9vGuVYOlZNa7ZWMXlpikAtGtuK7tcMu9Yq8AQp33OXf0RJdu6pp01zK67pEBNMNhTbamrKOzxBYtKEvGP_jt1baCDQoel6nm2fQfJVK6CWaIOtzeX37_uwiOn_k0BDxnbw_RrLH2DpeFH0KuMK83odT8hUpsdRmTXhR6Jw7FIyEnkjJV7KsS2LvC-KwrIiQdk5qy2fYHTkILXsRWtyDFg1_LdHh1xLEoyA5lvcSD7ceD7CejIL0WKwnw60nA6ynI_-XOQrr6XDr6QDr2ehYjB_4LkzQVlpZ3FmTz_9y2KxPFDNsd63Vtcnxi9G5b9OGY6_zCYHWtdWoDa6UL_kLPhVHfxX_3xOHu-L4Xzp7K94VKHRLbeak4A5Vvn4cUJdfcun6oxNo0UheyB98f66dbDvcHOUCtwPuSt2Uu1o76a5aom1W_dMD4eCH0EeSnJDsIklPSHaRZCckm-nmv98BAAD__5by20s=

# Very simple query to make it easier to spot regressions when rewriting results
# in test files.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT k FROM kv WHERE k = 0
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
maximum memory usage: <hidden>
network usage: <hidden>
·
• scan
  cluster nodes: <hidden>
  actual row count: 0
  KV rows read: 0
  KV bytes read: 0 B
  missing stats
  table: kv@primary
  spans: [/0 - /0]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkFFLwzAUhd_9FZfzHGn7GhCGUnFsbtLN-SB9yNrLLO2SmqTTMfqz_AP-MmkjiojgS-B8J_dczj3BPTeQWKXz9GpNNV1ny1uqD_Rwk2Yp1XRBMQS0KXmh9uwgH5EgF2itKdg5Ywd0Gj9My1fIWKDSbecHnAsUxjLkCb7yDUNirbYNZ6xKttEQXLJXVTPG1odJa6u9skcIrFqlnaQojuLz4YkW9_M5BJadlzRJIDDbkK_2LCl-f3NBF0Z71r4y-pdlzYsjy6qUY5_ZhrZHz1-ILiGwVb54Ykem8-2wZvg4zn2DvBcI6rOf82rHkEkv_n-DjF1rtOMf9f9KjvtcgMsdhzs709mC76wpxjVBLse5EZTsfHCTIKY6WH3en30EAAD___6pnbQ=

# Test a query that has a subquery and a postquery.
statement ok
CREATE TABLE parent (p INT PRIMARY KEY);
INSERT INTO parent VALUES (1), (2);
CREATE TABLE child (c INT PRIMARY KEY, p INT REFERENCES parent(p))

query T
EXPLAIN ANALYZE (DISTSQL) INSERT INTO child VALUES (1, (SELECT min(p) FROM parent))
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 2 (16 B)
maximum memory usage: <hidden>
network usage: <hidden>
·
• root
│
├── • insert
│   │ cluster nodes: <hidden>
│   │ actual row count: 1
│   │ into: child(c, p)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 2 columns, 1 row
│
├── • subquery
│   │ id: @S1
│   │ original sql: (SELECT min(p) FROM parent)
│   │ exec mode: one row
│   │
│   └── • group (scalar)
│       │ cluster nodes: <hidden>
│       │ actual row count: 1
│       │
│       └── • scan
│             cluster nodes: <hidden>
│             actual row count: 1
│             KV rows read: 1
│             KV bytes read: 8 B
│             missing stats
│             table: parent@primary
│             spans: LIMITED SCAN
│             limit: 1
│
└── • constraint-check
    │
    └── • error if rows
        │ cluster nodes: <hidden>
        │ actual row count: 0
        │
        └── • lookup join (anti)
            │ cluster nodes: <hidden>
            │ actual row count: 0
            │ KV rows read: 1
            │ KV bytes read: 8 B
            │ table: parent@primary
            │ equality: (column2) = (p)
            │ equality cols are key
            │
            └── • filter
                │ cluster nodes: <hidden>
                │ actual row count: 1
                │ estimated row count: 1
                │ filter: column2 IS NOT NULL
                │
                └── • scan buffer
                      cluster nodes: <hidden>
                      actual row count: 1
                      label: buffer 1
·
Diagram 1 (subquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJysUtGK2zAQfO9XiH1KQEfsHIWip0tLCiGuUxJfoBRzKPLiE7UlV1o3l4Z8Vn-gX1Zsx-2Zo2lL71EzGmlmd47gPxcgYBFv5uuELeJkxdS9LjK2nUW38w0bhZyNNvNo_iZhpTajaszerlfvWCUdGhqPgYOxGcayRA_iI4TA4SWkHCpnFXpvXQMf20uL7AFEwEGbqqYGTjko6xDEEUhTgSAgtle2mkyBQ4YkddE-ig-oatLWMNIlChZ8_-aBw06SukfPbE1VTYIFwMHZ_S8ghPTEoTud__MkcwRxfeKPPIWXPSVyV-AaZYZuEgyddWO4qZwupTsAh00ljRfsCjhEutTEmoEst0Pjyy1T1hCap5mWW9ZGcCgz0Yt3B8IeesVe_1_08F-iz_LcYS7Jukk4TD6LP9zFq-Quvo2i0U3YFOH51zQdeP1DddboK2s8Dnz-7uXglHLALMeunt7WTuF7Z1X7TXdctboWyNBTx153h4XpqMbgY3F4UTy9LJ5eFAdDcRulTQUGaW_dJ1ZIQqMOPyff43upabiTDD06LQv9VT5dWC87F1Gh_oLnMvZU38ie61rZsyV6L_PBheBvi5CeXvwIAAD__2aUhTI=
Diagram 2 (main-query): https://cockroachdb.github.io/distsqlplan/decode.html#eJyMj89K80AUxfffU1zOqoWBL9nOTiRCoLbSVjeSRZxc2oF0bpy5wULJY_kCPpk0I4gLweX53Tl_5oL02sOiXu-q7Z7q9X5D7uj7jp5uVo_VjhalocWuWlW3ezr5sBiWdLfd3NPQRg66XMIgSMfr9sQJ9hklGoMhiuOUJF7RZX5Qd2fYwsCHYdQrbgycRIa9QL32DIteXNuTkzEoFf8LGHSsre_nYD6zG9VLIPUntlR8vCcYvLTqjpxIRh1GtXR1RXn7BiWaySCrr96k7YFhy8n8fduW0yAh8Y9RvyUXU2PA3YHz_5OM0fFDFDfXZLmZfTPoOGm-llnUIZ-mZvr3GQAA__9Sm4hi
Diagram 3 (postquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJy0k9Fu2jAUhu_3FEfnCiRLJNCLyVd0E0gpWTJBys3EhXEOrbdgZ7ajFSEeay-wJ5sSt9pY1Who6x3_b__Hn3-TI7qvFXJMstVsWUCSFTnIe1WVsL5Ob2crGMQMBqtZOntfwF7pQT2E-TL_ALWwpP1wiAy1KSkTe3LIP2GMG4a1NZKcM7a1jt2GpHxAHjFUum58a28YSmMJ-RG98hUhx8pIUYGTQsO22e3IQjSKkGFJXqiqG583nsN0jAzpgWTjldHg1Z44RD--O2S4FV7ekwPT-Lrd2-at-fbLiHFzYhjUI4fz4o6Qxyf296xzVXmyZEfxOWDwOUxjSFaQ5QVkt2n6KrzjS3hvjNJLEiXZ0ficuDjUxCGdzQu4zooEbvIkQ4bhgae1VXthD8gwNeZLU8NnozQY3d4Q2eN7tL-6w6FFb5mftPOiqs5vvFg_09JoT_p5OYt1NxAsiTJMXaxhe_D0ZL2Fd_9QbfRitZNLqg1_W7LWWFC7QByPJuct_3_Gq0sYl-Rqox2dQb00OTptGFJ5R-Hzdaaxkj5aI7tjgsy7XGeU5HxYjYNIdFhqAX8Px73hcX943Bue9IcnveGrP8Kb05ufAQAA__9GX6z9
