# LogicTest: 5node

# These tests are different from explain_analyze because they require manual
# data placement.

statement ok
CREATE TABLE kv (k INT PRIMARY KEY, v INT, FAMILY (k, v))

statement ok
INSERT INTO kv SELECT i, i FROM generate_series(1,5) AS g(i);

statement ok
CREATE TABLE kw (k INT PRIMARY KEY, w INT, FAMILY (k, w))

statement ok
INSERT INTO kw SELECT i, i FROM generate_series(1,5) AS g(i)

# Split into 5 parts, each row from each table goes to one node.
statement ok
ALTER TABLE kv SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kw SPLIT AT SELECT i FROM generate_series(1,5) AS g(i)

statement ok
ALTER TABLE kv EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

statement ok
ALTER TABLE kw EXPERIMENTAL_RELOCATE SELECT ARRAY[i], i FROM generate_series(1, 5) as g(i)

# Verify that EXPLAIN ANALYZE (DISTSQL) annotates plans with collected
# statistics.

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kv]
----
start_key  end_key  replicas  lease_holder
NULL       /1       {1}       1
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# Verify data placement.
query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder from [SHOW RANGES FROM TABLE kw]
----
start_key  end_key  replicas  lease_holder
NULL       /1       {5}       5
/1         /2       {1}       1
/2         /3       {2}       2
/3         /4       {3}       3
/4         /5       {4}       4
/5         NULL     {5}       5

# This query verifies stat collection for the tableReader, mergeJoiner, and
# aggregator.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT kv.k, avg(kw.k) FROM kv JOIN kw ON kv.k=kw.k GROUP BY kv.k
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• group
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ group by: k
│ ordered: +k
│
└── • merge join
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ equality: (k) = (k)
    │ left cols are key
    │ right cols are key
    │
    ├── • scan
    │     nodes: <hidden>
    │     regions: <hidden>
    │     actual row count: 5
    │     KV time: 0µs
    │     KV contention time: 0µs
    │     KV rows read: 5
    │     KV bytes read: 40 B
    │     missing stats
    │     table: kv@primary
    │     spans: FULL SCAN
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV rows read: 5
          KV bytes read: 40 B
          missing stats
          table: kw@primary
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm39v2jgYx_-_V2H5r04LC06go5EmsVW7U3ctTP0xaTqhKiXP0QhImGNKe1Vf1r2Be2WnhLJCAnbCutnF_o_EcfLk48fPN378cI-TbyPs4bOPxx8Pz9Hw5s3QQv7NYG84ezN8hX4_7Z6g4Q361D3qoOEMdTvZJegdStvRH6fdi8_ow9fsJLZwFAfQ8ceQYO8vTLCFHWxhF1u4gS3cxD0LT2jchySJaXrJfdbhKLjFXt3CYTSZsvR0z8L9mAL27jEL2Qiwh8_9qxGcgh8AtevYwgEwPxxljxnetCc0HPv0Dlv4bOJHiYdqdvrg7pR5qJ2a8ecXxMIxeKj-37_J_LgfRwwiFsZRoYnGswRR8AMPPXa-umOwONVCH7CFT74cHqKEwQT142nE0B7cMjuM2CsP1TML5xcADDddcOWz_jUkKJ6ySWpoei578uIEwb0HC8-P5rQWNK7u0LWfXK9yaKfX9yycMH8A2CMP1nZ493N4Z0W8NjGAPWcj4Kf7xDQACkH-Pq_TB5e6as1YnQAdwKc4jIDaJDcXRvA322uT16_e0XBwPf_5NE5WOx00uIX-tDgsY_8WjWEc0zvkj0Zx32cQeKiejUXalnwbIQbjCQrCZIimiT-ARXNl0E8Q3Spe-n4woDDwWUxt0iyMjYW7c46PLvm-8_Wy0z2_7FwcH--1Scrh7OJkr-2kvw67F53zx98bgPxk92n8mPvw8Tj1H8NzdnFyeZQCctOjU4gCoJkHobZjt91nhPYEpFkCyDRah2QtjU5ciye2k_OTbc1ubjR7f8VsUj7OErGM2U7NdnWPs2RbwG9LCJkBnBcyIkfIyE4JmcBLl4Vsf7eErLL7CISMvHQhc8oHLKeEIrg1u6F7wCLbAm6VUAQDOK8IjhxFcHZKEQReuqwIb3dLESq7j0ARnJeuCG75gOWWUIRGzW7qHrDItoAPSiiCAZxXBFeOIrg7pQgCL11WhNZuKUJl9xEogvvSFaFRPmA1SihCs6Z7uCLb4m2K9aBmE-RHASIoZtdAdUftbET9C5WhsVPKIPDXZWU42C1lqOw-AmVovHRlEOyInUIyiaMEctsh6-9cT2lBMIA53SSe0j58pnE_e8z8sJv1y9J4ASRs3urMD46iRVPCfMbbTvmZk6g-DxrlrW9ttD4CNovpEI18BlH_7rv5i_MzP2SrLxZAAjT0R-E_fvGtF90ew3ofwpvstZeaFvH9e1v2zovWMSQpinzn50dCXMlMCIdJ61mYkMpMjJ8UJ75sP5HChFQIho5ywZBvfWuj9doOaC4Y_nomUoKhgInxE1Ew1ISJk2dSX2ayiqSe7-xygTZU-qxcM0X41pO6jtooYNI0TAphw_hJkYmWftLghtIcknznJrezs78aiJX7Kt3fMsGww-7AR7J5NfoSBlR6gkHBEdUzwSCY-LL9RMra6-2WCYYddhM-ks2rUTWCId966QkGBUdUzwSDYOLL9hMpwbDF_bA94CcYDrZMMOywj_GRcLIWaiRdBOZruXDkM9EzwSBgoqWfkMJuHi_DoIe8kCq7ebr4SZU9QsNEkNBQYwkisl_2oCo5-WVnH-R4emFLz6QfBEy0XKwKmHCyGopERIH9sgdVTkQUTH7ZKQg5nl7YrVz5biYNfhKCFDb2TBZCwETP4gkRlM0LNDVyMwL79UxEiKDIXnXLgcIvV5DNRI70mhqIqkz0XLSa0orqUFQvlxFNfj0H1RRCVGWi56LV1FdUh6J6zYxo8us5qPxqCCIohyCmHqKIdOuCCI2hyF6gqQiFk95QJD1jaiLW_H_N1EQUmahdE6EiE9mZCDlzZ-uaCI2hGE-plN5QYzHiqF0TIScimpqIqkz0zESIoBhPqZTeUCQi8msiHEFNhGNqIopITU1EdSiyF2gqQtGz0EIERfXqGcfURPQeeg-__R8AAP__iGyzOg==

# This query verifies stats collection for the hashJoiner, distinct and sorter.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT DISTINCT(kw.w) FROM kv JOIN kw ON kv.k = kw.w ORDER BY kw.w
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• sort
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│ order: +w
│
└── • distinct
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │ distinct on: w
    │
    └── • hash join
        │ nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 5
        │ equality: (k) = (w)
        │ left cols are key
        │
        ├── • scan
        │     nodes: <hidden>
        │     regions: <hidden>
        │     actual row count: 5
        │     KV time: 0µs
        │     KV contention time: 0µs
        │     KV rows read: 5
        │     KV bytes read: 40 B
        │     missing stats
        │     table: kv@primary
        │     spans: FULL SCAN
        │
        └── • scan
              nodes: <hidden>
              regions: <hidden>
              actual row count: 5
              KV time: 0µs
              KV contention time: 0µs
              KV rows read: 5
              KV bytes read: 40 B
              missing stats
              table: kw@primary
              spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzsm99uo0YUxu_7FKO5SlS8MIPtOEgrRZukarbduEqilarKFwSmMbINXmYcJ43yWH2BPlkFXtYBzBzsbMPUw134Fx9-58z5hm_gCfMvU-zg6_Nfz09v0NnF9c3F5ekNOpgs3y0P0U9Xw09oco8-Di8u0WSJhpdocv9ugt6j5DgaXp2dX6EPv6db2MBh5LNLd8Y4dv7ABBuYYgPb2MBdbOAeHhl4Hkce4zyKk1Oe0gsu_AfsWAYOwvlCJLtHBvaimGHnCYtATBl28I17O2VXzPVZbFrYwD4TbjBNf2ZyfzKPg5kbP2IDX8_dkDuoYyY_PFwIB50kYfzyGYlgxhxk_fM3X217UShYKIIoLB2KoyVHMXN9B329-PZRsGzXAH3ABv70-fQUccHmyIsWoUAH7EGYQSgOHWSlEa5OYGxSdcKtK7wx4yhaiHkSaLIv_eVsB8GjZwOvtla0Mhq3j2js8nGew0ly_sjAXLh3DDvk2dgNb7-Ad1nGa5KXgKmegGkl4PX_WYRR7LOY-bn_NEquhE7ZkKWfXT7-GAUhi01SGART9qc4OCGH7-Pgbpz-lUsPe2DeopyKmfuAZmwWxY_InU4jzxXMd5CV8k-O8S9TJNhsjvyAT9CCu3csO7w13DU4e5vKPAu4CEJPmKRXyoYS97Vd0XRfUTQyOtRSk876znvbZP06igWLTVrK-Y-q3Va_RkI3pTO9l405vYw60dy0CwmtuGkw8l5l5Ee5yEl9gSCw_pq0Y9qtAu8I-KiGAucAtwpcAPwWCkz2RYGBylwrcF9NjXmNAm9XNFIFJmrSqVJgIOuZApdyrrgC0_ptltbQMbtjdlsd2xHwoIaO5QC3OlYA_BY6RvdFx4DKXOvYkZqd-jU6tl3RSHWMqkmnSseArGc6Vsq54jpm12-zdg0d63bMXqtjOwI-rqFjOcCtjhUAv4WO2fuiY0BlrnVsoGanfo2ObVc0Uh2z1aRTpWNA1jMdK-VccR3r1m-z3Ro61uu0KrYj3h6sYh2TIDf0EUGRGLO41bMq1G-hZ9190TOgRtd6dqxmx36Nnm1XNFI966pJp0rPgKxnelbKueJ6BixcXjE-j0LOit1g43-2koQz_46tqoNHi9hjv8WRl_7ManOYXpfatT7jYnWUrjYuwuwQF66QLRP-l-QsnHa7-tEfV0YfMrGM4gmauoKF3uO38LP9SzcQ-RvzGWdx4E6Dv9zyXWeXfRUjjwX36W2_OJSp0rdj6T1nR2eMJyiKF39_JKTXMBMiYTL4LkzItkwoaeukxORIRyZki2ZIlWuG8uiPK6PXNqGFZvj2TBpphkCRk7ZOgGaoCRNaZGK9ZGLnkFjFi20p0K5K08oNQ0QePdFyvgAw0XK-IGdC7ZZJiYmWz2RdaSvtyVtpT3pxP8-zeHFf3sTzncxSbkp7tKM7sce1JEdSPbz-Dwlt3J1QMKN6uhMAk6ZnG408uA12dCf2uEzkSKotDzWaoTz6xt0JBTOqpzsBMGnanWikGR5LJ7bEks-pidz9rvYn9rjKACYS10MN0waKv-k5g4pJ1dOigKBo6VGQkgee76gU6Khyu7iv44SdAF6YlmUmZ6Ln0AO89WpXRI3nGKjOm3YwlBz8ek5HSk5462EATPR8b0PORGKNKNIRgTpv2sZopiMCUJr2MZqpdPnyHukD0-7SAl9rZABM9Hx9A4JSPR1RxN2Rx6-pkQFA0fNpqrR2mO-oA6Cjltz21sggJbe9NTIAJk0PPRXrRM_XO6DBo9S6yg7xa2lk0G2-m9PkUQZg0rSR0UhHBJjo-Y4HNHiq3RE1OiIUv5ZGBpWvH1Jg_ZCW1g9bIwNgoqeRAUHRczoihyJxR9Rwd6D4m36aaiappRXEfEftAh1V_tWJlkYGLbntShkZKjLRc-jJmehpZECDR8_pCABFqXWVTfEDSwhaPrTLmTRtZDRT58D6oZ5GBjB4mn7NQ0ko1e6IIh1Rvn5IgfVDKv9aR08jA_jSTc-ZAwBFTyMD-NZNy9c8IChKffS_aT4l_1jPBj7Ws0t2u4ZGxuj5h38DAAD__10QheE=

# This query verifies stats collection for WITH ORDINALITY and the hashJoiner.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT * FROM kv WITH ORDINALITY AS a, kv WITH ORDINALITY AS b
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 10 (80 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• cross join
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 25
│
├── • ordinality
│   │ nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 5
│   │
│   └── • scan
│         nodes: <hidden>
│         regions: <hidden>
│         actual row count: 5
│         KV time: 0µs
│         KV contention time: 0µs
│         KV rows read: 5
│         KV bytes read: 40 B
│         missing stats
│         table: kv@primary
│         spans: FULL SCAN
│
└── • ordinality
    │ nodes: <hidden>
    │ regions: <hidden>
    │ actual row count: 5
    │
    └── • scan
          nodes: <hidden>
          regions: <hidden>
          actual row count: 5
          KV time: 0µs
          KV contention time: 0µs
          KV rows read: 5
          KV bytes read: 40 B
          missing stats
          table: kv@primary
          spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzkUcFuEzEQvfMVozkBMsruZsPBpy2lqIG2QUlUhFAOznqUWtm1t7a3JIryWfwAX4Z2TUSTNikBceI4783zPL-3QndbIMfR2cXZ6Rhewrvh4BLmd_CpPz6HwfBt_-rkoj_-DCcjEGwPMUWG2ki6EiU55F8wxgnDypqcnDO2gVbtQl8ukEcMla5q38AThrmxhHyFXvmCkONYTAsakpBkOxEylOSFKtpn53dZZVUp7BIZjiqhHYdXyPDDNXhVEofo-zcX5txoT9orox9Q1nx1YElIDr2ATJeeNlAawRtkeHl9egrOUwW5qbWH57TwHaX9Cw5RayssEM33LUyFz2_Igal9VXsODdae3gA9nKwZhulnFs6LGSGP1-z38xpYqbQolF924u24aEF5_TCCvzCWHGPsfpHJ_1lk9w-L7P7rItO9xn75qbWxkizJLTOTRvnUyiO_Oxfu5r1Rmmwn3f7doLGaxSxLWNZlWcqyHsteI9v37VIsoKTS2CWIojC58CQ5hLYbzt0W4KmsQCo3h9qJGW3oJxNL9kfWO6bLIbnKaEe70T36ctTkRXJGIX9napvTR2vy9kwYB62uBSQ5H9g4DH0dqMbgfXF8UJxuieNdcXJQ3D18uXvE5WRXnB4U93YuT9bPfgQAAP__3Jk1WQ==

# Verify that EXPLAIN ANALYZE on an unsupported query doesn't return an error.
statement ok
EXPLAIN ANALYZE (DISTSQL) SHOW QUERIES;

statement ok
EXPLAIN ANALYZE (DISTSQL) EXPLAIN SELECT 1

# This query verifies support for zeroNode in DistSQL.
query T
EXPLAIN (DISTSQL) SELECT sum(k) FROM kv WHERE FALSE
----
distribution: full
vectorized: true
·
• group (scalar)
│ estimated row count: 1
│
└── • norows
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyUkE1LxDAQhu_-ijCnLgS28ZiTq1YsdD9s1w-QHkI71tJuUzOJCKX_XZoeVoUVPc47eebJzAD01oKE6GmXrOINC67jbJ_dJQuWRUl0tWfkDkGzYDfpds2ad_Z4G6URe1EtIXDodIkbdUAC-QwCcg690QUSaTNFg38Qlx8gQw511zs7xTmHQhsEOYCtbYsg4UG1DmkZAocSrapbPzFklywIWfHquoYWkI8ctLPHKWRVhSDDkf_dtKoqg5Wy2izFd1t2vw4uxGmN-I8mRep15490VJxeIOeAZYXz0Ug7U-DO6MJr5nLrOR-USHbuirmIu7k1ffArLH6Fz3_A-Xj2GQAA__8VEanA

# This query verifies stat collection for the tableReader and windower.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT avg(k) OVER () FROM kv
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 5 (40 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• window
│ nodes: <hidden>
│ regions: <hidden>
│ actual row count: 5
│
└── • scan
      nodes: <hidden>
      regions: <hidden>
      actual row count: 5
      KV time: 0µs
      KV contention time: 0µs
      KV rows read: 5
      KV bytes read: 40 B
      missing stats
      table: kv@primary
      spans: FULL SCAN
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzslc9u2zgQxu_7FIM52QANSf6zWPCU3SBbBG3qwgncQ-EDIw5cwhKpkJT_NPBj9QX6ZIUoK42cpFHPznHm4-ehfvyMuUd3lyHH64sPF-c3INbL3qoP0_nFDHp9-H82vYLVGhlqI-mjyMkh_4IJMhwiwxEyHCPDCS4YFtak5Jyx1ZH7YLiUW-QxQ6WL0lftBcPUWEJ-j175jJDjjbjNaEZCko1iZCjJC5WFMav1WWFVLuwOGV4XQjsOg6gaPC09h7PqGu_n4FVOHOIf311dp0Z70l4Z_USyZuPAkpAcDubbnaem9Q_8hwyv5ufn4DwVkJpSe-jR1kdK-z6HONywPkC0eunArfDpV3JgSl9UF616YXLTSHCxZ1hXByzOiyUhT_bsBXS_iJXaWEmWZIvWYv8M3M9KS7MhG03aZP-dv-udJf0HkhXTMCkQ4jB5qJ0XWdbmSFtKy6d4c7GFnHJjdyCyzKTCk-QQB6aV5u4y8JQXIJVbQenEkhr5VWCTF4ENW8CS7llLXs9aNBxEo9NJ27A7vGEHeKNBND4deKPu8EYd4I0H4S97IvDG3eGNO8CbDE4H3SvbdUauMNrR0ap4_pfjaoWQXFK9b5wpbUqfrEnDmLqcBl9oSHK-VpO6uNRBChd8bE5-a_67ZY6PzcM_mRw-JXwVavIbY1eQCU863T08cdPfCOXbjy_JkVUiU9_E02Q0tkM8UlJrOkSkkZqcNFqdlUbNyVUr7_GB7kFoIxm9ITlGMn5Dcoxk8oZkv9j_9TMAAP__8988HA==

# Very simple query to make it easier to spot regressions when rewriting results
# in test files.
query T
EXPLAIN ANALYZE (DISTSQL) SELECT k FROM kv WHERE k = 0
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• scan
  nodes: <hidden>
  regions: <hidden>
  actual row count: 0
  KV time: 0µs
  KV contention time: 0µs
  KV rows read: 0
  KV bytes read: 0 B
  missing stats
  table: kv@primary
  spans: [/0 - /0]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkc1q6zAQhff3KYZZ3Qu62N4KCqHBpSF_xUnTRfFCsYfU2JFcaZwmBD9WX6BPViyVllIC3QjON6Mzo6MzuucGJa7SWTpeQw032XIO9QEebtMshRquIEaB2pS0UHtyKB8xwVxga01Bzhk7oLNvmJRHlLHASrcdDzgXWBhLKM_IFTeEEtdq21BGqiQbDcYlsaoab1sfRq2t9sqeUOCqVdpJiOIo_j8c0eJ-NkOBy44ljBIUON0AV3uSEL-9uqALo5k0V0b_KFnz4sCSKqV_z3QD2xPTJ4JrFDjfjMfgmFooTKcZ_tKRo0rzPwmxXzY0ENWXGraKiydyYDpuh0UH5id_gbwXGNRHQo7VjlAmvfh9ihm51mhH3wK85Bz3uUAqdxR-ypnOFnRnTeHHBLn09zwoyXGoJkFMdCj1ef_nPQAA__88krFm

# Test a query that has a subquery and a postquery.
statement ok
CREATE TABLE parent (p INT PRIMARY KEY);
INSERT INTO parent VALUES (1), (2);
CREATE TABLE child (c INT PRIMARY KEY, p INT REFERENCES parent(p))

query T
EXPLAIN ANALYZE (DISTSQL) INSERT INTO child VALUES (1, (SELECT min(p) FROM parent))
----
planning time: 10µs
execution time: 100µs
distribution: <hidden>
vectorized: <hidden>
rows read from KV: 2 (16 B)
maximum memory usage: <hidden>
network usage: <hidden>
regions: <hidden>
·
• root
│
├── • insert
│   │ nodes: <hidden>
│   │ regions: <hidden>
│   │ actual row count: 1
│   │ into: child(c, p)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 2 columns, 1 row
│
├── • subquery
│   │ id: @S1
│   │ original sql: (SELECT min(p) FROM parent)
│   │ exec mode: one row
│   │
│   └── • group (scalar)
│       │ nodes: <hidden>
│       │ regions: <hidden>
│       │ actual row count: 1
│       │
│       └── • scan
│             nodes: <hidden>
│             regions: <hidden>
│             actual row count: 1
│             KV time: 0µs
│             KV contention time: 0µs
│             KV rows read: 1
│             KV bytes read: 8 B
│             missing stats
│             table: parent@primary
│             spans: LIMITED SCAN
│             limit: 1
│
└── • constraint-check
    │
    └── • error if rows
        │ nodes: <hidden>
        │ regions: <hidden>
        │ actual row count: 0
        │
        └── • lookup join (anti)
            │ nodes: <hidden>
            │ regions: <hidden>
            │ actual row count: 0
            │ KV time: 0µs
            │ KV contention time: 0µs
            │ KV rows read: 1
            │ KV bytes read: 8 B
            │ table: parent@primary
            │ equality: (column2) = (p)
            │ equality cols are key
            │
            └── • filter
                │ nodes: <hidden>
                │ regions: <hidden>
                │ actual row count: 1
                │ estimated row count: 1
                │ filter: column2 IS NOT NULL
                │
                └── • scan buffer
                      nodes: <hidden>
                      regions: <hidden>
                      actual row count: 1
                      label: buffer 1
·
Diagram 1 (subquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJysUmGL2kAQ_d5fMcwnhT1MPAoln86KBdGLRT2hFDnWzZBbLtlNdydVK_6s_oH-smJi2gvH2Zbex3kzb_fNm3dA_yXDCMfxYjRfwjhezkA96CyB1WB6N1pAJxTQWYymo-EScm06RRc-zGe3UEhHhrtdFGhsQrHMyWP0GUMU-BbXAgtnFXlv3Qk-VEPjZIdRIFCbouQTvBaorCOMDsiaM8IIY3tli14fBSbEUmfVo7QjVbK2BljnFEHw47tHgRvJ6oE82JKLkiMIUKCz299AiOujwLo6_-dZpoTR9VE80RRe1rSUm4zmJBNyvaCtrLbhpnA6l26PAheFND6CKxQ41blmOBkyWbWFT1agrGEyz3earKBawZFMooa82TM10Dt4jwJvV8MheKYClC0NQ4d23NOGuxEElcZ6gOjxpYH_MC_8F_MGaeoolWxdL2x7N4g_3cez5X18N512bsJTlF7_0P2W1j-Eb06-sMZTS-dLLwfHtUBKUqoD7m3pFH10VlXf1OWs4lVAQp7r7nVdjE3dOgl8Sg4vkvuXyf2L5KBNrlaptkJDvLXuETLJZNT-l_MNvpWa2zdJyJPTMtPf5PODNbRzlBXpr3SOc9NqMt306lw33Zy8l2lr4K9Duz6--RkAAP__sVSY5A==
Diagram 2 (main-query): https://cockroachdb.github.io/distsqlplan/decode.html#eJyMj89K80AUxfffU1zOqoWBL9nOTiRCoLbSVjeSRZxc2oF0bpy5wULJY_kCPpk0I4gLweX53Tl_5oL02sOiXu-q7Z7q9X5D7uj7jp5uVo_VjhalocWuWlW3ezr5sBiWdLfd3NPQRg66XMIgSMfr9sQJ9hklGoMhiuOUJF7RZX5Qd2fYwsCHYdQrbgycRIa9QL32DIteXNuTkzEoFf8LGHSsre_nYD6zG9VLIPUntlR8vCcYvLTqjpxIRh1GtXR1RXn7BiWaySCrr96k7YFhy8n8fduW0yAh8Y9RvyUXU2PA3YHz_5OM0fFDFDfXZLmZfTPoOGm-llnUIZ-mZvr3GQAA__9Sm4hi
Diagram 3 (postquery): https://cockroachdb.github.io/distsqlplan/decode.html#eJy0lMGO2jAQhu99itGcQLJEAnuofNrtipWyZJMKslwqDsYZdt0Ndmo7KgjxWH2BPlmVmFVLV6BStTfm9_zjb_it7NB9qZBjks3G0wKSrMhBPquqhPlN-jieQS9m0JuN0_FtAWule3Uf7qb5A9TCkvb9PjLUpqRMrMkh_4QxLhjW1khyzthW2nUNSblBHjFUum58Ky8YSmMJ-Q698hUhx8pIUYGTQsOyWa3IQjSIkGFJXqiqG583nsP1EBnShmTjldHg1Zo4RN-_OWS4FF4-kwPT-Lrtbf3WfP0pxLjYMwzVgcN58UTI4z37c9Y7VXmyZAfxMWDQOVzHkMwgywvIHtP0v_AOL-G9N0pPSZRkB8Nj4mJbE4d0fFfATVYkcJ8nGTIMAV_XVq2F3SLD1JiXpobPRmkwut0Q2SGP9ld3ObToLfNr7byoquONJ_M3tTTak37750zm3UCwJMowdTKH5dbTq_QePiDDh_ntLThPNUjTaA892viB0r7PDw8oNBC9nGr423Cik-GMLgknPHyy1lhQq7BzPBgd5_TvGa8uYZySq412dAR1anK0XzCk8onCB8CZxkr6aI3srgll3vk6oSTnw2kcikSHoxbwV3N81jw8bx6eNY_Om0dnzVe_mRf7dz8CAAD__4iLwK8=
