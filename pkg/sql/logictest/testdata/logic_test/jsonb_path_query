# LogicTest: local

query T
SELECT jsonb_path_query('{}', '$')
----
{}

statement error pgcode 2203A JSON object does not contain key "a"
SELECT jsonb_path_query('{}', 'strict $.a')

query T
SELECT jsonb_path_query('{"a": "b"}', '$')
----
{"a": "b"}

query T
SELECT jsonb_path_query('{"a": ["b", true, false, null]}', '$')
----
{"a": ["b", true, false, null]}

# WITH a AS (
#     SELECT '{
#         "a": {
#             "aa": {
#                 "aaa": "s1",
#                 "aab": 123,
#                 "aac": true,
#                 "aad": false,
#                 "aae": null,
#                 "aaf": [1, 2, 3],
#                 "aag": {
#                     "aaga": "s2"
#                 }
#             },
#             "ab": "s3"
#         },
#         "b": "s4",
#         "c": [
#             {"ca": "s5"},
#             {"ca": "s6"},
#             1,
#             true,
#         ],
#         "d": 123.45,
#     }'::JSONB AS data
# )

statement ok
CREATE TABLE a AS SELECT '{"a": {"aa": {"aaa": "s1", "aab": 123, "aac": true, "aad": false, "aae": null, "aaf": [1, 2, 3], "aag": {"aaga": "s2"}}, "ab": "s3"}, "b": "s4", "c": [{"ca": "s5"}, {"ca": "s6"}, 1, true], "d": 123.45}'::JSONB AS data

query T
SELECT jsonb_path_query(data, '$.a.aa.aaa') FROM a
----
"s1"

query T
SELECT jsonb_path_query(data, '$.a.aa.aab') FROM a
----
123

query T
SELECT jsonb_path_query(data, '$.a.aa.aac') FROM a
----
true

query T
SELECT jsonb_path_query(data, '$.a.aa.aad') FROM a
----
false

query T
SELECT jsonb_path_query(data, '$.a.aa.aae') FROM a
----
null

query T
SELECT jsonb_path_query(data, '$.a.aa.aaf') FROM a
----
[1, 2, 3]

query T
SELECT jsonb_path_query(data, '$.a.aa.aag') FROM a
----
{"aaga": "s2"}

query T
SELECT jsonb_path_query(data, '$.c') FROM a
----
[{"ca": "s5"}, {"ca": "s6"}, 1, true]

query T
SELECT jsonb_path_query(data, '$.d') FROM a
----
123.45

query T rowsort
SELECT jsonb_path_query(data, '$.c[*].ca') FROM a
----
"s5"
"s6"

statement error pgcode 2203A JSON object does not contain key "aa"
SELECT jsonb_path_query(data, 'strict $.aa') FROM a

statement error pgcode 2203A JSON object does not contain key "aa"
SELECT jsonb_path_query(data, 'strict $.aa.aaa.aaaa') FROM a

query empty
SELECT jsonb_path_query('{}', '$.a')

statement ok
CREATE TABLE b (j JSONB)

statement ok
INSERT INTO b VALUES ('{"a": [1, 2, 3], "b": "hello"}'), ('{"a": false}')

query T rowsort
SELECT jsonb_path_query(j, '$.a') FROM b
----
[1, 2, 3]
false

query T
SELECT jsonb_path_query(j, '$.b') FROM b
----
"hello"

query T rowsort
SELECT jsonb_path_query('{"a": [1, 2, {"b": [4, 5]}, null, [true, false]]}', '$.a[*]')
----
1
2
{"b": [4, 5]}
null
[true, false]

query T rowsort
SELECT jsonb_path_query('{"a": [1, 2, {"b": [{"c": true}, {"c": false}]}, null, [true, false], {"b": [{"c": 0.1}, {"d": null}, {"c": 10}]}]}', '$.a[*].b[*].c')
----
true
false
0.1
10

query T
SELECT jsonb_path_query('{"a": [1]}', '$.a', '{}');
----
[1]

statement error pgcode 22023 "vars" argument is not an object
SELECT jsonb_path_query('{"a": [1]}', '$.a', '[]');

query T
SELECT jsonb_path_query('{"a": [1]}', '$.b', '{}', false);
----

query T
SELECT jsonb_path_query('{"a": [1]}', '$.b', '{}', true);
----

statement error pgcode 2203A JSON object does not contain key "b"
SELECT jsonb_path_query('{"a": [1]}', 'strict $.b', '{}', false);

query T
SELECT jsonb_path_query('{"a": [1]}', 'strict $.b', '{}', true);
----


query T rowsort
SELECT jsonb_path_query('{"a": {"b": [1, 2, 3]}}', '$.a[*].b[*]');
----
1
2
3

statement error pgcode 22039 jsonpath wildcard array accessor can only be applied to an array
SELECT jsonb_path_query('{"a": {"b": [1, 2, 3]}}', 'strict $.a[*].b[*]');

query T
SELECT jsonb_path_query('{"a": [1, 2, 3, 4, 5]}', '$.a[0]');
----
1

query T rowsort
SELECT jsonb_path_query('[1, 2, 3, 4, 5]', '$[1 to 3, 2, 1 to 3]');
----
2
3
4
3
2
3
4

query empty
SELECT jsonb_path_query('[1, 2, 3, 4, 5]', '$[3 to 1]');

query T rowsort
SELECT jsonb_path_query('[1, 2, 3, 4, 5]', '$[4 to 4]');
----
5

query T
SELECT jsonb_path_query('{"a": "hello"}', '$.a[0 to 0]');
----
"hello"

query T rowsort
SELECT jsonb_path_query('{"a": [[5, 4], [7, 6], [6, 7], [10], []]}', '$.a[*][0]');
----
5
7
6
10

statement error pgcode 22033 jsonpath array subscript is out of bounds
SELECT jsonb_path_query('{"a": [[5, 4], [7, 6], [6, 7], [10], []]}', 'strict $.a[*][0]');

query T rowsort
SELECT jsonb_path_query('{"a": [{}, [5, 4], [7, 6], [6, 7], [10], []]}', '$.a[*][0]');
----
{}
5
7
6
10

statement error pgcode 22039 jsonpath array accessor can only be applied to an array
SELECT jsonb_path_query('{"a": [{}, [5, 4], [7, 6], [6, 7], [10], []]}', 'strict $.a[*][0]');

query T rowsort
SELECT jsonb_path_query('{"a": ["hello", [5, 4], [7, 6], [6, 7], [10], []]}', '$.a[*][0]');
----
"hello"
5
7
6
10

query T rowsort
SELECT jsonb_path_query('{"a": ["hello", [5, 4], [7, 6], [6, 7], [10], []]}', '$.a[*][1]');
----
4
6
7

statement error pgcode 22039 jsonpath array accessor can only be applied to an array
SELECT jsonb_path_query('{"a": "hello"}', 'strict $.a[1 to 3]');

statement error pgcode 22039 jsonpath array accessor can only be applied to an array
SELECT jsonb_path_query('{"a": [1, 2, 3, 4, 5]}', 'strict $[3 to 1]');

query empty
SELECT jsonb_path_query('{"a": [1, 2, 3]}', '$.a.b');

statement error pgcode 2203A jsonpath member accessor can only be applied to an object
SELECT jsonb_path_query('{"a": [1, 2, 3]}', 'strict $.a.b');

query T
SELECT jsonb_path_query('[1, 2, 3, 4, 5]', '$[1]');
----
2

# TODO(normanchenn): this will be changed after floats are supported.
statement error pq: jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('{"a": [10, 9, 8, 7]}', '$.a[0.99]')

# TODO(normanchenn): this will be changed after floats are supported.
statement error pq: jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('{"a": [10, 9, 8, 7]}', '$.a[1.01]')

query T
SELECT jsonb_path_query('{"a": [10, 9, 8, 7]}', '$.a[$varInt]', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')
----
9

# TODO(normanchenn): this will be changed after floats are supported.
statement error pgcode 22033 jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('{"a": [10, 9, 8, 7]}', '$.a[$varFloat]', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')

statement error pgcode 22033 jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('{"a": [10, 9, 8, 7]}', '$.a[$varString]', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')

statement error pgcode 22033 jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('{"a": [10, 9, 8, 7]}', '$.a[$varBool]', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')

statement error pgcode 22033 jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('{"a": [10, 9, 8, 7]}', '$.a[$varNull]', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')

query T
SELECT jsonb_path_query('{"foo": [{"bar": "value"}]}', '$.foo.bar');
----
"value"

query T rowsort
SELECT jsonb_path_query('{"foo": [{"bar": "value"}, {"bar": "value2"}, {"baz": "value3"}]}', '$.foo.bar');
----
"value"
"value2"

statement error pgcode 2203A jsonpath member accessor can only be applied to an object
SELECT jsonb_path_query('{"foo": [{"bar": "value"}, {"bar": "value2"}]}', 'strict $.foo.bar');

statement error pgcode 22033 pq: jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('{"a": [1, 2, 3, 4, 5]}', '$.a[$.a]');

query T
SELECT jsonb_path_query('{}', '$"true"', '{"true": "hello"}');
----
"hello"

statement error pgcode 22033 pq: jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('{"a": []}', '$.a[true]');

statement error pgcode 42704 pq: could not find jsonpath variable "undefined_var"
SELECT jsonb_path_query('[{"a": 1}]', '$undefined_var');

query T
SELECT jsonb_path_query('{}', '2')
----
2

query T
SELECT jsonb_path_query('{}'::jsonb, '8.73'::jsonpath);
----
8.73

query T
SELECT jsonb_path_query('{}', 'false')
----
false

query T
SELECT jsonb_path_query('{}', '$varInt', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')
----
1

query T
SELECT jsonb_path_query('{}', '$varFloat', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')
----
2.3

query T
SELECT jsonb_path_query('{}', '$varString', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')
----
"a"

query T
SELECT jsonb_path_query('{}', '$varBool', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')
----
true

query T
SELECT jsonb_path_query('{}', '1 < 1');
----
false

query T
SELECT jsonb_path_query('{}', '1 <= 1');
----
true

query T
SELECT jsonb_path_query('{}', '1 > 1');
----
false

query T
SELECT jsonb_path_query('{}', '1 >= 1');
----
true

query T
SELECT jsonb_path_query('{}', '1 != 1');
----
false

query T
SELECT jsonb_path_query('{}', '1 == 1');
----
true

query T
SELECT jsonb_path_query('{}', '(true < false)');
----
false

query T
SELECT jsonb_path_query('{}', '((true <= false))');
----
false

query T
SELECT jsonb_path_query('{}', '(((true > false)))');
----
true

query T
SELECT jsonb_path_query('{}', 'true >= false');
----
true

query T
SELECT jsonb_path_query('{}', 'true != false');
----
true

query T
SELECT jsonb_path_query('{}', 'true == false');
----
false

query T
SELECT jsonb_path_query('{}', '$ < 1');
----
null

query T
SELECT jsonb_path_query('{}', '$ == $');
----
null

query T
SELECT jsonb_path_query('{}', '1 < 2');
----
true

query T
SELECT jsonb_path_query('{}', '1 <= 2');
----
true

query T
SELECT jsonb_path_query('{}', '2 > 1');
----
true

query T
SELECT jsonb_path_query('{}', '2 >= 1');
----
true

query T
SELECT jsonb_path_query('{}', '1 == 2');
----
false

query T
SELECT jsonb_path_query('{}', '1 != 2');
----
true

query T
SELECT jsonb_path_query('{}', '((1 < 2))');
----
true

query T
SELECT jsonb_path_query('{}', '((2 > 1))');
----
true

query T
SELECT jsonb_path_query('{}', '1.5 > 1');
----
true

query T
SELECT jsonb_path_query('{}', '1.5 < 2');
----
true

query T
SELECT jsonb_path_query('{}', '1.5 == 1.5');
----
true

query T
SELECT jsonb_path_query('{}', '1.5 != 1.5');
----
false

query T
SELECT jsonb_path_query('{}', '1.0 == 1.0000');
----
true

query T
SELECT jsonb_path_query('{}', '$var == $var2', '{"var": 1, "var2": 1}');
----
true

query T
SELECT jsonb_path_query('{}', '$var != $var2', '{"var": 1, "var2": 1}');
----
false

query T
SELECT jsonb_path_query('{}', '$var < $var2', '{"var": 1, "var2": 2}');
----
true

query T
SELECT jsonb_path_query('{}', '$var <= $var2', '{"var": 1, "var2": 2}');
----
true

query T
SELECT jsonb_path_query('{}', '$var > $var2', '{"var": 1, "var2": 2}');
----
false

query T
SELECT jsonb_path_query('{}', '$var >= $var2', '{"var": 1, "var2": 2}');
----
false

query T
SELECT jsonb_path_query('{"a": {"b": 5}}', '$.a.b > 3');
----
true

query T
SELECT jsonb_path_query('{"a": {"b": 5}}', '$.a.b <= 3');
----
false

query T
SELECT jsonb_path_query('{"arr": [1,2,3,4]}', '$.arr[0] == 1');
----
true

query T
SELECT jsonb_path_query('{"arr": [1,2,3,4]}', '$.arr[3] >= 4');
----
true

query T
SELECT jsonb_path_query('{"a": {"b": [10,20,30]}}', '$.a.b[1] < $.a.b[2]');
----
true

query T
SELECT jsonb_path_query('{"x": 5, "y": 5}', '$.x == $.y');
----
true

query T
SELECT jsonb_path_query('{"vals": [{"a": 1}, {"a": 2}]}', '$.vals[0].a != $.vals[1].a');
----
true

query T
SELECT jsonb_path_query('{"outer": {"inner": {"val": 100}}}', '$.outer.inner.val >= 100');
----
true

query T
SELECT jsonb_path_query('{"a": [2, 3]}', '$.a == 2');
----
true

query T
SELECT jsonb_path_query('{"a": [1, 3]}', '$.a == 2');
----
false

query T
SELECT jsonb_path_query('{"a": [2, 3]}', 'strict $.a == 2');
----
null

query T
SELECT jsonb_path_query('{"a": [1, 3]}', 'strict $.a == 2');
----
null

query T
SELECT jsonb_path_query('{"a": 5, "b": 10}', '$.a == 5 && $.b == 10');
----
true

query T
SELECT jsonb_path_query('{"a": 5, "b": 10}', '$.a == 5 && $.b == 5');
----
false

query T
SELECT jsonb_path_query('{"a": 5, "b": 10}', '$.a == 5 || $.b == 5');
----
true

query T
SELECT jsonb_path_query('{"a": 5, "b": 10}', '$.a == 1 || $.b == 1');
----
false

query T
SELECT jsonb_path_query('{"a": 5}', '!($.a == 1)');
----
true

query T
SELECT jsonb_path_query('{"a": 5}', '!($.a == 5)');
----
false

query T
SELECT jsonb_path_query('{"a": 5, "b": 10}', '(1.5 > 1.2 && (!($.a == 1) || $.b == 1))');
----
true

query T rowsort
SELECT jsonb_path_query('{"a": [1,2,3]}', '$.a ? (1 == 1)');
----
1
2
3

query empty
SELECT jsonb_path_query('{"a": [1,2,3]}', '$.a ? (1 != 1)');

query T
SELECT jsonb_path_query('{"a": [1,2,3]}', 'strict $.a ? (1 == 1)');
----
[1, 2, 3]

query empty
SELECT jsonb_path_query('{"a": [1,2,3]}', 'strict $.a ? (1 != 1)');

query T rowsort
SELECT jsonb_path_query('{"a": [{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]}', '$.a[*] ? (@.b == 1)');
----
{"b": 1, "c": "hello"}
{"b": 1, "c": "!"}

query empty
SELECT jsonb_path_query('{"a": [{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]}', 'strict $.a ? (@.b == 1)');

query T rowsort
SELECT jsonb_path_query('{"a": [{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]}', '$.a ? (@.b == 1)');
----
{"b": 1, "c": "hello"}
{"b": 1, "c": "!"}

query T rowsort
SELECT jsonb_path_query('{"a": [[{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}], [{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]]}', '$.a ? (@.b == 1)');
----
[{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]
[{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]

query T rowsort
SELECT jsonb_path_query('{"a": [[{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}], [{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]]}', '$.a[*] ? (@.b == 1)');
----
{"b": 1, "c": "hello"}
{"b": 1, "c": "!"}
{"b": 1, "c": "hello"}
{"b": 1, "c": "!"}

query empty
SELECT jsonb_path_query('{"a": [[{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}], [{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]]}', 'strict $.a ? (@.b == 1)');

query empty
SELECT jsonb_path_query('{"a": [[{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}], [{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]]}', 'strict $.a[*] ? (@.b == 1)');

query T rowsort
SELECT jsonb_path_query('{"a": [1,2,3,4,5]}', '$.a ? (@ > 3)');
----
4
5

query T rowsort
SELECT jsonb_path_query('{"a": [{"b": 1, "c": 10}, {"b": 2, "c": 20}, {"b": 3, "c": 30}]}', '$.a ? (@.c > 15)');
----
{"b": 2, "c": 20}
{"b": 3, "c": 30}

query T rowsort
SELECT jsonb_path_query('{"a": [{"b": "x", "c": true}, {"b": "y", "c": false}, {"b": "z", "c": true}]}', '$.a ? (@.c == true)');
----
{"b": "x", "c": true}
{"b": "z", "c": true}

query T
SELECT jsonb_path_query('{"c": {"a": 1, "b":1}}', '$.c ? ($.c.a == @.b)');
----
{"a": 1, "b": 1}

query empty
SELECT jsonb_path_query('{"a": [1,2,3]}', '$.a ? (@ > 10)');

query empty
SELECT jsonb_path_query('{"a": [{"b": 1, "c": 10}, {"b": 2, "c": 20}]}', '$.a ? (@.c > 100)');

query empty
SELECT jsonb_path_query('{"a": [[[{"b": 1}], [{"b": 2}]], [[{"b": 2}], [{"b": 1}]]]}', '$.a ? (@.b == 1)');

query empty
SELECT jsonb_path_query('{"a": [[[[[[{"b": 1}]]]]]]}', '$.a ? (@.b == 1)');

query empty
SELECT jsonb_path_query('{"a": [[[{"b": 1}], [{"b": 2}]]]}', '$.a ? (@.b == 1)');

# when string literals are supported
# query T rowsort
# SELECT jsonb_path_query('{"data": [{"val": "a", "num": 1}, {"val": "b", "num": 2}, {"val": "a", "num": 3}]}'::jsonb, '$.data ? (@.val == "a")'::jsonpath);
# ----
# {"num": 1, "val": "a"}
# {"num": 3, "val": "a"}

# select jsonb_path_query('[1, 2, 3, 4, 5]', '$[-1]');
# select jsonb_path_query('[1, 2, 3, 4, 5]', 'strict $[-1]');

# interesting functionality
# select jsonb_path_query('{"a": [1, 2], "b": "hello"}', '$.a ? ($.b == "hello") ');
# select jsonb_path_query('{"a": [1, 2], "b": "hello"}', '$.a');
