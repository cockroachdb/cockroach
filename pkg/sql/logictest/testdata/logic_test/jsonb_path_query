# LogicTest: !local-mixed-24.3 !local-mixed-25.1

query T
SELECT jsonb_path_query('{}', '$')
----
{}

statement error pgcode 2203A JSON object does not contain key "a"
SELECT jsonb_path_query('{}', 'strict $.a')

query T
SELECT jsonb_path_query('{"a": "b"}', '$')
----
{"a": "b"}

query T
SELECT jsonb_path_query('{"a": ["b", true, false, null]}', '$')
----
{"a": ["b", true, false, null]}

# WITH a AS (
#     SELECT '{
#         "a": {
#             "aa": {
#                 "aaa": "s1",
#                 "aab": 123,
#                 "aac": true,
#                 "aad": false,
#                 "aae": null,
#                 "aaf": [1, 2, 3],
#                 "aag": {
#                     "aaga": "s2"
#                 }
#             },
#             "ab": "s3"
#         },
#         "b": "s4",
#         "c": [
#             {"ca": "s5"},
#             {"ca": "s6"},
#             1,
#             true,
#         ],
#         "d": 123.45,
#     }'::JSONB AS data
# )

statement ok
CREATE TABLE a AS SELECT '{"a": {"aa": {"aaa": "s1", "aab": 123, "aac": true, "aad": false, "aae": null, "aaf": [1, 2, 3], "aag": {"aaga": "s2"}}, "ab": "s3"}, "b": "s4", "c": [{"ca": "s5"}, {"ca": "s6"}, 1, true], "d": 123.45}'::JSONB AS data

query T
SELECT jsonb_path_query(data, '$.a.aa.aaa') FROM a
----
"s1"

query T
SELECT jsonb_path_query(data, '$.a.aa.aab') FROM a
----
123

query T
SELECT jsonb_path_query(data, '$.a.aa.aac') FROM a
----
true

query T
SELECT jsonb_path_query(data, '$.a.aa.aad') FROM a
----
false

query T
SELECT jsonb_path_query(data, '$.a.aa.aae') FROM a
----
null

query T
SELECT jsonb_path_query(data, '$.a.aa.aaf') FROM a
----
[1, 2, 3]

query T
SELECT jsonb_path_query(data, '$.a.aa.aag') FROM a
----
{"aaga": "s2"}

query T
SELECT jsonb_path_query(data, '$.c') FROM a
----
[{"ca": "s5"}, {"ca": "s6"}, 1, true]

query T
SELECT jsonb_path_query(data, '$.d') FROM a
----
123.45

query T rowsort
SELECT jsonb_path_query(data, '$.c[*].ca') FROM a
----
"s5"
"s6"

statement error pgcode 2203A JSON object does not contain key "aa"
SELECT jsonb_path_query(data, 'strict $.aa') FROM a

statement error pgcode 2203A JSON object does not contain key "aa"
SELECT jsonb_path_query(data, 'strict $.aa.aaa.aaaa') FROM a

query empty
SELECT jsonb_path_query('{}', '$.a')

query empty
SELECT jsonb_path_query('[]', '$.a')

statement ok
CREATE TABLE b (j JSONB)

statement ok
INSERT INTO b VALUES ('{"a": [1, 2, 3], "b": "hello"}'), ('{"a": false}')

query T rowsort
SELECT jsonb_path_query(j, '$.a') FROM b
----
[1, 2, 3]
false

query T
SELECT jsonb_path_query(j, '$.b') FROM b
----
"hello"

query T rowsort
SELECT jsonb_path_query('{"a": [1, 2, {"b": [4, 5]}, null, [true, false]]}', '$.a[*]')
----
1
2
{"b": [4, 5]}
null
[true, false]

query T rowsort
SELECT jsonb_path_query('{"a": [1, 2, {"b": [{"c": true}, {"c": false}]}, null, [true, false], {"b": [{"c": 0.1}, {"d": null}, {"c": 10}]}]}', '$.a[*].b[*].c')
----
true
false
0.1
10

query T
SELECT jsonb_path_query('{"a": [1]}', '$.a', '{}');
----
[1]

statement error pgcode 22023 "vars" argument is not an object
SELECT jsonb_path_query('{"a": [1]}', '$.a', '[]');

query T
SELECT jsonb_path_query('{"a": [1]}', '$.b', '{}', false);
----

query T
SELECT jsonb_path_query('{"a": [1]}', '$.b', '{}', true);
----

statement error pgcode 2203A JSON object does not contain key "b"
SELECT jsonb_path_query('{"a": [1]}', 'strict $.b', '{}', false);

query T
SELECT jsonb_path_query('{"a": [1]}', 'strict $.b', '{}', true);
----


query T rowsort
SELECT jsonb_path_query('{"a": {"b": [1, 2, 3]}}', '$.a[*].b[*]');
----
1
2
3

statement error pgcode 22039 jsonpath wildcard array accessor can only be applied to an array
SELECT jsonb_path_query('{"a": {"b": [1, 2, 3]}}', 'strict $.a[*].b[*]');

query T
SELECT jsonb_path_query('{"a": [1, 2, 3, 4, 5]}', '$.a[0]');
----
1

query T rowsort
SELECT jsonb_path_query('[1, 2, 3, 4, 5]', '$[1 to 3, 2, 1 to 3]');
----
2
3
4
3
2
3
4

query empty
SELECT jsonb_path_query('[1, 2, 3, 4, 5]', '$[3 to 1]');

query T rowsort
SELECT jsonb_path_query('[1, 2, 3, 4, 5]', '$[4 to 4]');
----
5

query T
SELECT jsonb_path_query('{"a": "hello"}', '$.a[0 to 0]');
----
"hello"

query T rowsort
SELECT jsonb_path_query('{"a": [[5, 4], [7, 6], [6, 7], [10], []]}', '$.a[*][0]');
----
5
7
6
10

statement error pgcode 22033 jsonpath array subscript is out of bounds
SELECT jsonb_path_query('{"a": [[5, 4], [7, 6], [6, 7], [10], []]}', 'strict $.a[*][0]');

query T rowsort
SELECT jsonb_path_query('{"a": [{}, [5, 4], [7, 6], [6, 7], [10], []]}', '$.a[*][0]');
----
{}
5
7
6
10

statement error pgcode 22039 jsonpath array accessor can only be applied to an array
SELECT jsonb_path_query('{"a": [{}, [5, 4], [7, 6], [6, 7], [10], []]}', 'strict $.a[*][0]');

query T rowsort
SELECT jsonb_path_query('{"a": ["hello", [5, 4], [7, 6], [6, 7], [10], []]}', '$.a[*][0]');
----
"hello"
5
7
6
10

query T rowsort
SELECT jsonb_path_query('{"a": ["hello", [5, 4], [7, 6], [6, 7], [10], []]}', '$.a[*][1]');
----
4
6
7

statement error pgcode 22039 jsonpath array accessor can only be applied to an array
SELECT jsonb_path_query('{"a": "hello"}', 'strict $.a[1 to 3]');

statement error pgcode 22039 jsonpath array accessor can only be applied to an array
SELECT jsonb_path_query('{"a": [1, 2, 3, 4, 5]}', 'strict $[3 to 1]');

query empty
SELECT jsonb_path_query('{"a": [1, 2, 3]}', '$.a.b');

statement error pgcode 2203A jsonpath member accessor can only be applied to an object
SELECT jsonb_path_query('{"a": [1, 2, 3]}', 'strict $.a.b');

query T
SELECT jsonb_path_query('[1, 2, 3, 4, 5]', '$[1]');
----
2

# TODO(normanchenn): this will be changed after floats are supported.
statement error pq: jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('{"a": [10, 9, 8, 7]}', '$.a[0.99]')

# TODO(normanchenn): this will be changed after floats are supported.
statement error pq: jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('{"a": [10, 9, 8, 7]}', '$.a[1.01]')

query T
SELECT jsonb_path_query('{"a": [10, 9, 8, 7]}', '$.a[$varInt]', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')
----
9

# TODO(normanchenn): this will be changed after floats are supported.
statement error pgcode 22033 jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('{"a": [10, 9, 8, 7]}', '$.a[$varFloat]', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')

statement error pgcode 22033 jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('{"a": [10, 9, 8, 7]}', '$.a[$varString]', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')

statement error pgcode 22033 jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('{"a": [10, 9, 8, 7]}', '$.a[$varBool]', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')

statement error pgcode 22033 jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('{"a": [10, 9, 8, 7]}', '$.a[$varNull]', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')

query T
SELECT jsonb_path_query('{"foo": [{"bar": "value"}]}', '$.foo.bar');
----
"value"

query T rowsort
SELECT jsonb_path_query('{"foo": [{"bar": "value"}, {"bar": "value2"}, {"baz": "value3"}]}', '$.foo.bar');
----
"value"
"value2"

statement error pgcode 2203A jsonpath member accessor can only be applied to an object
SELECT jsonb_path_query('{"foo": [{"bar": "value"}, {"bar": "value2"}]}', 'strict $.foo.bar');

statement error pgcode 22033 pq: jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('{"a": [1, 2, 3, 4, 5]}', '$.a[$.a]');

query T
SELECT jsonb_path_query('{}', '$"true"', '{"true": "hello"}');
----
"hello"

statement error pgcode 22033 pq: jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('{"a": []}', '$.a[true]');

statement error pgcode 42704 pq: could not find jsonpath variable "undefined_var"
SELECT jsonb_path_query('[{"a": 1}]', '$undefined_var');

query T
SELECT jsonb_path_query('{}', '2')
----
2

query T
SELECT jsonb_path_query('{}'::jsonb, '8.73'::jsonpath);
----
8.73

query T
SELECT jsonb_path_query('{}', 'false')
----
false

query T
SELECT jsonb_path_query('{}', '$varInt', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')
----
1

query T
SELECT jsonb_path_query('{}', '$varFloat', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')
----
2.3

query T
SELECT jsonb_path_query('{}', '$varString', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')
----
"a"

query T
SELECT jsonb_path_query('{}', '$varBool', '{"varInt": 1, "varFloat": 2.3, "varString": "a", "varBool": true, "varNull": null}')
----
true

query T
SELECT jsonb_path_query('{}', '1 < 1');
----
false

query T
SELECT jsonb_path_query('{}', '1 <= 1');
----
true

query T
SELECT jsonb_path_query('{}', '1 > 1');
----
false

query T
SELECT jsonb_path_query('{}', '1 >= 1');
----
true

query T
SELECT jsonb_path_query('{}', '1 != 1');
----
false

query T
SELECT jsonb_path_query('{}', '1 == 1');
----
true

query T
SELECT jsonb_path_query('{}', '(true < false)');
----
false

query T
SELECT jsonb_path_query('{}', '((true <= false))');
----
false

query T
SELECT jsonb_path_query('{}', '(((true > false)))');
----
true

query T
SELECT jsonb_path_query('{}', 'true >= false');
----
true

query T
SELECT jsonb_path_query('{}', 'true != false');
----
true

query T
SELECT jsonb_path_query('{}', 'true == false');
----
false

query T
SELECT jsonb_path_query('{}', '$ < 1');
----
null

query T
SELECT jsonb_path_query('{}', '$ == $');
----
null

query T
SELECT jsonb_path_query('{}', '1 < 2');
----
true

query T
SELECT jsonb_path_query('{}', '1 <= 2');
----
true

query T
SELECT jsonb_path_query('{}', '2 > 1');
----
true

query T
SELECT jsonb_path_query('{}', '2 >= 1');
----
true

query T
SELECT jsonb_path_query('{}', '1 == 2');
----
false

query T
SELECT jsonb_path_query('{}', '1 != 2');
----
true

query T
SELECT jsonb_path_query('{}', '((1 < 2))');
----
true

query T
SELECT jsonb_path_query('{}', '((2 > 1))');
----
true

query T
SELECT jsonb_path_query('{}', '1.5 > 1');
----
true

query T
SELECT jsonb_path_query('{}', '1.5 < 2');
----
true

query T
SELECT jsonb_path_query('{}', '1.5 == 1.5');
----
true

query T
SELECT jsonb_path_query('{}', '1.5 != 1.5');
----
false

query T
SELECT jsonb_path_query('{}', '1.0 == 1.0000');
----
true

query T
SELECT jsonb_path_query('{}', '$var == $var2', '{"var": 1, "var2": 1}');
----
true

query T
SELECT jsonb_path_query('{}', '$var != $var2', '{"var": 1, "var2": 1}');
----
false

query T
SELECT jsonb_path_query('{}', '$var < $var2', '{"var": 1, "var2": 2}');
----
true

query T
SELECT jsonb_path_query('{}', '$var <= $var2', '{"var": 1, "var2": 2}');
----
true

query T
SELECT jsonb_path_query('{}', '$var > $var2', '{"var": 1, "var2": 2}');
----
false

query T
SELECT jsonb_path_query('{}', '$var >= $var2', '{"var": 1, "var2": 2}');
----
false

query T
SELECT jsonb_path_query('{"a": {"b": 5}}', '$.a.b > 3');
----
true

query T
SELECT jsonb_path_query('{"a": {"b": 5}}', '$.a.b <= 3');
----
false

query T
SELECT jsonb_path_query('{"arr": [1,2,3,4]}', '$.arr[0] == 1');
----
true

query T
SELECT jsonb_path_query('{"arr": [1,2,3,4]}', '$.arr[3] >= 4');
----
true

query T
SELECT jsonb_path_query('{"a": {"b": [10,20,30]}}', '$.a.b[1] < $.a.b[2]');
----
true

query T
SELECT jsonb_path_query('{"x": 5, "y": 5}', '$.x == $.y');
----
true

query T
SELECT jsonb_path_query('{"vals": [{"a": 1}, {"a": 2}]}', '$.vals[0].a != $.vals[1].a');
----
true

query T
SELECT jsonb_path_query('{"outer": {"inner": {"val": 100}}}', '$.outer.inner.val >= 100');
----
true

query T
SELECT jsonb_path_query('{"a": [2, 3]}', '$.a == 2');
----
true

query T
SELECT jsonb_path_query('{"a": [1, 3]}', '$.a == 2');
----
false

query T
SELECT jsonb_path_query('{"a": [2, 3]}', 'strict $.a == 2');
----
null

query T
SELECT jsonb_path_query('{"a": [1, 3]}', 'strict $.a == 2');
----
null

query T
SELECT jsonb_path_query('{"a": 5, "b": 10}', '$.a == 5 && $.b == 10');
----
true

query T
SELECT jsonb_path_query('{"a": 5, "b": 10}', '$.a == 5 && $.b == 5');
----
false

query T
SELECT jsonb_path_query('{"a": 5, "b": 10}', '$.a == 5 || $.b == 5');
----
true

query T
SELECT jsonb_path_query('{"a": 5, "b": 10}', '$.a == 1 || $.b == 1');
----
false

query T
SELECT jsonb_path_query('{"a": 5}', '!($.a == 1)');
----
true

query T
SELECT jsonb_path_query('{"a": 5}', '!($.a == 5)');
----
false

query T
SELECT jsonb_path_query('{"a": 5, "b": 10}', '(1.5 > 1.2 && (!($.a == 1) || $.b == 1))');
----
true

query T rowsort
SELECT jsonb_path_query('{"a": [1,2,3]}', '$.a ? (1 == 1)');
----
1
2
3

query empty
SELECT jsonb_path_query('{"a": [1,2,3]}', '$.a ? (1 != 1)');

query T
SELECT jsonb_path_query('{"a": [1,2,3]}', 'strict $.a ? (1 == 1)');
----
[1, 2, 3]

query empty
SELECT jsonb_path_query('{"a": [1,2,3]}', 'strict $.a ? (1 != 1)');

query T rowsort
SELECT jsonb_path_query('{"a": [{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]}', '$.a[*] ? (@.b == 1)');
----
{"b": 1, "c": "hello"}
{"b": 1, "c": "!"}

query empty
SELECT jsonb_path_query('{"a": [{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]}', 'strict $.a ? (@.b == 1)');

query T rowsort
SELECT jsonb_path_query('{"a": [{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]}', '$.a ? (@.b == 1)');
----
{"b": 1, "c": "hello"}
{"b": 1, "c": "!"}

query T rowsort
SELECT jsonb_path_query('{"a": [[{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}], [{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]]}', '$.a ? (@.b == 1)');
----
[{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]
[{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]

query T rowsort
SELECT jsonb_path_query('{"a": [[{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}], [{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]]}', '$.a[*] ? (@.b == 1)');
----
{"b": 1, "c": "hello"}
{"b": 1, "c": "!"}
{"b": 1, "c": "hello"}
{"b": 1, "c": "!"}

query empty
SELECT jsonb_path_query('{"a": [[{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}], [{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]]}', 'strict $.a ? (@.b == 1)');

query empty
SELECT jsonb_path_query('{"a": [[{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}], [{"b": 1, "c": "hello"}, {"b": 2, "c": "world"}, {"b": 1, "c": "!"}]]}', 'strict $.a[*] ? (@.b == 1)');

query T rowsort
SELECT jsonb_path_query('{"a": [1,2,3,4,5]}', '$.a ? (@ > 3)');
----
4
5

query T rowsort
SELECT jsonb_path_query('{"a": [{"b": 1, "c": 10}, {"b": 2, "c": 20}, {"b": 3, "c": 30}]}', '$.a ? (@.c > 15)');
----
{"b": 2, "c": 20}
{"b": 3, "c": 30}

query T rowsort
SELECT jsonb_path_query('{"a": [{"b": "x", "c": true}, {"b": "y", "c": false}, {"b": "z", "c": true}]}', '$.a ? (@.c == true)');
----
{"b": "x", "c": true}
{"b": "z", "c": true}

query T
SELECT jsonb_path_query('{"c": {"a": 1, "b":1}}', '$.c ? ($.c.a == @.b)');
----
{"a": 1, "b": 1}

query empty
SELECT jsonb_path_query('{"a": [1,2,3]}', '$.a ? (@ > 10)');

query empty
SELECT jsonb_path_query('{"a": [{"b": 1, "c": 10}, {"b": 2, "c": 20}]}', '$.a ? (@.c > 100)');

query empty
SELECT jsonb_path_query('{"a": [[[{"b": 1}], [{"b": 2}]], [[{"b": 2}], [{"b": 1}]]]}', '$.a ? (@.b == 1)');

query empty
SELECT jsonb_path_query('{"a": [[[[[[{"b": 1}]]]]]]}', '$.a ? (@.b == 1)');

query empty
SELECT jsonb_path_query('{"a": [[[{"b": 1}], [{"b": 2}]]]}', '$.a ? (@.b == 1)');

query T
SELECT jsonb_path_query('{}', '1 + 2');
----
3

query T
SELECT jsonb_path_query('{}', '1 - 2');
----
-1

query T
SELECT jsonb_path_query('{}', '1 * 2');
----
2

query T
SELECT jsonb_path_query('{}', '1 / 2');
----
0.50000000000000000000

query T
SELECT jsonb_path_query('{}', '3 % 2');
----
1

statement error pgcode 22012 pq: division by zero
SELECT jsonb_path_query('{}', '1 % 0');

query T
SELECT jsonb_path_query('{"a": 4, "b": 5}', '$.a + $.b');
----
9

query T
SELECT jsonb_path_query('{"a": 4, "b": 5, "c": [9, 8, 7]}', '$.c[0] + $.c[1]');
----
17

query T
SELECT jsonb_path_query('{"a": 4, "b": 5, "c": [9, 8, 7]}', '$.c[$.b - $.a]');
----
8

query T
SELECT jsonb_path_query('{"a": 4, "b": 5, "c": [9, 8, 7]}', '$.c[$.b - $.a] + $var', '{"var": 10}');
----
18

statement error pgcode 22012 pq: division by zero
SELECT jsonb_path_query('{}', '1 / 0');

statement error pgcode 22038 pq: left operand of jsonpath operator / is not a single numeric value
SELECT jsonb_path_query('[1, 2]', '$[*] / 2');

statement error pgcode 22038 pq: right operand of jsonpath operator \+ is not a single numeric value
SELECT jsonb_path_query('[1, 2]', '2 + $[*]');

statement error pgcode 22038 pq: left operand of jsonpath operator / is not a single numeric value
SELECT jsonb_path_query('{"a": "hello"}', '$.a / 2');

statement error pgcode 22038 pq: right operand of jsonpath operator \+ is not a single numeric value
SELECT jsonb_path_query('{"a": null}', '2 + $.a');

query T
SELECT jsonb_path_query('{}', '"a" == "b"');
----
false

query T
SELECT jsonb_path_query('{}', '"a" < "b"');
----
true

query T
SELECT jsonb_path_query('{}', '"a" > "b"');
----
false

statement error pgcode 22038 pq: left operand of jsonpath operator \+ is not a single numeric value
SELECT jsonb_path_query('{}', '"a" + "b"');

query T rowsort
SELECT jsonb_path_query('{"data": [{"val": "a", "num": 1}, {"val": "b", "num": 2}, {"val": "a", "num": 3}]}', '$.data ? (@.val == "a")');
----
{"num": 1, "val": "a"}
{"num": 3, "val": "a"}

query T
SELECT jsonb_path_query('{}', 'null == null');
----
true

query T
SELECT jsonb_path_query('{}', 'null != null');
----
false

query T
SELECT jsonb_path_query('{}', 'null != 1');
----
true

query T
SELECT jsonb_path_query('{}', 'null <= "null"');
----
false

statement error pgcode 22038 pq: left operand of jsonpath operator \% is not a single numeric value
SELECT jsonb_path_query('{}', 'null % 1');

query T
SELECT jsonb_path_query('{}', 'null like_regex "^he.*$"');
----
null

query T
SELECT jsonb_path_query('{}', '"hello" like_regex "^he.*$"');
----
true

query T
SELECT jsonb_path_query('{}', '"ahello" like_regex "^he.*$"');
----
false

query T
SELECT jsonb_path_query('{"a": "e"}', '$.a ? (@ like_regex "^[aeiou]")');
----
"e"

query T
SELECT jsonb_path_query('{"a": {"b": "e"}}', '$.a ? (@.b like_regex "^[aeiou]")');
----
{"b": "e"}

query empty
SELECT jsonb_path_query('{"a": {"b": "r"}}', '$.a ? (@.b like_regex "^[aeiou]")');

query T rowsort
SELECT jsonb_path_query('["apple", "banana", "orange", "umbrella", "grape"]', 'strict $[*] ? (@ like_regex "^[aeiou]")');
----
"apple"
"orange"
"umbrella"

query T rowsort
SELECT jsonb_path_query('[{"balance": "987_650", "name": "a"}, {"balance": "987_424", "name": "b"}, {"balance": "100", "name": "c"}]', '$[*] ? (@.balance like_regex "987_.*").balance');
----
"987_650"
"987_424"

query T
SELECT jsonb_path_query('{"ab\\c": "hello"}', '$."ab\\c"');
----
"hello"

query empty
SELECT jsonb_path_query('"a\nb"', '$ ? (@ like_regex "^.*$")');

query T
SELECT jsonb_path_query('"\\"', '$ ? (@ like_regex "^\\\\$")');
----
"\\"

query T
SELECT jsonb_path_query('"\\\\"', '$ ? (@ like_regex "^\\\\\\\\$")');
----
"\\\\"

query T
SELECT jsonb_path_query('{"paths": ["C:\\Program Files", "D:\\Data"]}', '$.paths[*] ? (@ like_regex "^[A-Z]:\\\\[A-Za-z]+$")');
----
"D:\\Data"

query T rowsort
SELECT jsonb_path_query('{"paths": ["C:\\Program Files (x86)\\", "D:\\My Documents\\", "E:\\Test!@#$"]}', '$.paths[*] ? (@ like_regex "^[A-Z]:\\\\.*\\\\$")');
----
"C:\\Program Files (x86)\\"
"D:\\My Documents\\"

query T rowsort
SELECT jsonb_path_query('{"urls": ["http:\/\/example.com", "https:\/\/test.com\/path"]}', '$.urls[*] ? (@ like_regex "^https?:\/\/.*\.com")');
----
"http://example.com"
"https://test.com/path"

query T rowsort
SELECT jsonb_path_query('{"mixed": ["C:/path\\to/file", "D:\\path/to\\file"]}', '$.mixed[*] ? (@ like_regex "^[A-Z]:[/\\\\].*")');
----
"C:/path\\to/file"
"D:\\path/to\\file"

query T rowsort
SELECT jsonb_path_query('["a+b", "a*b", "a?b", "a.b", "a[b]", "a{b}"]', '$[*] ? (@ like_regex "^a[\\+\\*\\?\\.]b$|^a\\[b\\]$|^a\\{b\\}$")');
----
"a+b"
"a*b"
"a?b"
"a.b"
"a[b]"
"a{b}"

query T rowsort
SELECT jsonb_path_query('[null, 1, "abc", "abd", "aBdC", "abdacb", "babc", "adc\nabc", "ab\nadc"]', 'lax $[*] ? (@ like_regex "^ab.*c")');
----
"abc"
"abdacb"

query T
SELECT jsonb_path_query('"He said \"Hello\\World!\""', '$ ? (@ like_regex ".*\"H.*\\\\.*!.*\".*")');
----
"He said \"Hello\\World!\""

query T
SELECT jsonb_path_query('["hello", "a"]', '$ like_regex "he"');
----
true

query T
SELECT jsonb_path_query('["hello", "a"]', 'strict $ like_regex "he"');
----
null

query T rowsort
SELECT jsonb_path_query('{"a": [1, 2], "b": "hello"}', '$.a ? ($.b == "hello") ');
----
1
2

query T
SELECT jsonb_path_query('{"a": [1, 2], "b": "hello"}', 'strict $.a ? ($.b == "hello") ');
----
[1, 2]

query T rowsort
SELECT jsonb_path_query('{"a": "world", "b": 2, "c": true}', '$.*');
----
"world"
2
true

query T rowsort
SELECT jsonb_path_query('{"a": ["hello", "world"], "b": [2, 5], "c": [true, false], "d": "non-array"}', '$.*[1]');
----
"world"
5
false

query T
SELECT jsonb_path_query('{"a": {"ab": 1}, "b": {"bc": 2}, "c": {"cd": 3}}', '$.*.bc');
----
2

query empty
SELECT jsonb_path_query('{}', '$.*');

query empty
SELECT jsonb_path_query('[1, 2, 3, 4, 5]', '$.*');

query T rowsort
SELECT jsonb_path_query('{"a": {"x": {"y": 1}}, "b": {"x": {"z": 2}}}', '$.*.x.*');
----
1
2

query T
SELECT jsonb_path_query('{}', '-1');
----
-1

query T rowsort
SELECT jsonb_path_query('[1, 2, 3]', '-$[*]');
----
-1
-2
-3

query T rowsort
SELECT jsonb_path_query('[1, 2, 3]', '-$');
----
-1
-2
-3

query T
SELECT jsonb_path_query('{}', '1 + 2 * -4');
----
-7

query T
SELECT jsonb_path_query('{"a": -10, "b": -5}', '$.a * -2 + $.b');
----
15

query T rowsort
SELECT jsonb_path_query('[1, -2, 3, -4]', '$[*] ? (@ < -1)');
----
-2
-4

query T
SELECT jsonb_path_query('{"x": 5, "y": -3}', '(-$.x * 2 + $.y) / -1')
----
13.000000000000000000

statement error pgcode 22012 pq: division by zero
SELECT jsonb_path_query('{"x": 5, "y": -3}', '(-$.x * 2 + $.y) / -0')

query empty
SELECT jsonb_path_query('[1, 2, 3, 4, 5]', '$[-1]');

statement error pgcode 22033 pq: jsonpath array subscript is out of bounds
SELECT jsonb_path_query('[1, 2, 3, 4, 5]', 'strict $[-1]');

statement error pgcode 2203B pq: operand of unary jsonpath operator - is not a numeric value
SELECT jsonb_path_query('[1, 2, 3, 4, "hello"]', '-$[*]');

statement error pgcode 2203B pq: operand of unary jsonpath operator \+ is not a numeric value
SELECT jsonb_path_query('null', '+$');

query T
SELECT jsonb_path_query('{}', '+1');
----
1

query T rowsort
SELECT jsonb_path_query('[1, 2, 3]', '+$[*]');
----
1
2
3

query T
SELECT jsonb_path_query('{}', '+1 + 2 * +4');
----
9

query T rowsort
SELECT jsonb_path_query('[1, 2, 3, 4]', '$[*] ? (@ > +2)');
----
3
4

statement error pgcode 42601 pq: jsonb_path_query\(\): could not parse "last" as type jsonpath: LAST is allowed only in array subscripts
SELECT jsonb_path_query('{}', 'last'::JSONPATH);

statement error pgcode 42601 pq: jsonb_path_query\(\): could not parse "@" as type jsonpath: @ is not allowed in root expressions
SELECT jsonb_path_query('{}', '@'::JSONPATH);

query T
SELECT jsonb_path_query('[1, 2, 3, 4]', '$[last]');
----
4

query T
SELECT jsonb_path_query('"hello"', '$[last]');
----
"hello"

query T rowsort
SELECT jsonb_path_query('[1, 2, 3, 4]', '$[1 to last, last to last]');
----
2
3
4
4

query T
SELECT jsonb_path_query('[1, 2, 3]', 'exists($[*])');
----
true

query T
SELECT jsonb_path_query('[]', 'exists($[*])');
----
false

query T
SELECT jsonb_path_query('[{"items": [{"id": 1}, {"id": 2}]}, {"items": []}]', '$[*] ? (exists(@.items[*].id))');
----
{"items": [{"id": 1}, {"id": 2}]}

query T
SELECT jsonb_path_query('[{"a": 1, "b": 2}, {"a": 1}, {"b": 2}, {}]', '$[*] ? (exists(@.a) && exists(@.b))');
----
{"a": 1, "b": 2}

query T
SELECT jsonb_path_query('{}', '(1 + 2 == 3) is unknown');
----
false

query T
SELECT jsonb_path_query('{}', '($ < 1) is unknown');
----
true

query T
SELECT jsonb_path_query('{}', '(null like_regex "^he.*$") is unknown');
----
true

query T
SELECT jsonb_path_query('"abcdef"', '$ starts with "abc"');
----
true

query T
SELECT jsonb_path_query('"abc"', '$ starts with "abc"');
----
true

query T
SELECT jsonb_path_query('"ab"', '$ starts with "abc"');
----
false

query T
SELECT jsonb_path_query('"abcdef"', '$ starts with $var', '{"var": "abc"}');
----
true

query T
SELECT jsonb_path_query('"abc"', '$ starts with $var', '{"var": "abc"}');
----
true

query T
SELECT jsonb_path_query('"ab"', '$ starts with $var', '{"var": "abc"}');
----
false

query T
SELECT jsonb_path_query('["ab", "abc"]', '$ starts with $var', '{"var": "abc"}');
----
true

query T
SELECT jsonb_path_query('["ab", "a"]', '$ starts with $var', '{"var": "abc"}');
----
false

query T
SELECT jsonb_path_query('["ab", "abc"]', 'strict $ starts with $var', '{"var": "abc"}');
----
null

query T
SELECT jsonb_path_query('["ab", "abc"]', 'strict $ starts with $var', '{"var": 1}');
----
null

query T
SELECT jsonb_path_query('["ab", 1]', 'strict $ starts with $var', '{"var": "abc"}');
----
null

query T
SELECT jsonb_path_query('{}', 'exists(2 + "3")');
----
null

query T
SELECT jsonb_path_query('{}', '2 / 0 > 0');
----
null

query T rowsort
SELECT jsonb_path_query('{"g": [{"x": 2}, {"y": 3}]}', 'lax $.g ? ((exists (@.x + "3")) is unknown)');
----
{"x": 2}
{"y": 3}

query T
SELECT jsonb_path_query('{"g": [{"x": 2}, {"y": 3}]}', 'strict $.g[*] ? ((exists (@.x)) is unknown)');
----
{"y": 3}

query T
SELECT jsonb_path_query('{"g": [{"x": 2}, {"y": 3}]}', 'strict $.g ? ((exists (@[*].x)) is unknown)');
----
[{"x": 2}, {"y": 3}]

query T
SELECT jsonb_path_query('[1,2,0,3]', '$[*] ? ((2 / @ > 0) is unknown)');
----
0

statement error pgcode 2203A pq: JSON object does not contain key "a"
SELECT jsonb_path_query('{}', 'strict $.a', '{}', false);

query empty
SELECT jsonb_path_query('{}', 'strict $.a', '{}', true);

query empty
SELECT jsonb_path_query('{}', '$.a', '{}', false);

query empty
SELECT jsonb_path_query('{}', '$.a', '{}', true);

query empty
SELECT jsonb_path_query('{}', 'strict 0 / 0', '{}', true);

statement error pgcode 22012 pq: division by zero
SELECT jsonb_path_query('{}', 'strict 0 / 0', '{}', false);

query empty
SELECT jsonb_path_query('{}', '0 / 0', '{}', true);

statement error pgcode 22012 pq: division by zero
SELECT jsonb_path_query('{}', '0 / 0', '{}', false);

query T
SELECT jsonb_path_query('{}', 'strict (0 / 0) < (0 / 0)', '{}', true);
----
null

query T
SELECT jsonb_path_query('{}', 'strict (0 / 0) < (0 / 0)', '{}', false);
----
null

query T
SELECT jsonb_path_query('{}', '(0 / 0) < (0 / 0)', '{}', true);
----
null

query T
SELECT jsonb_path_query('{}', '(0 / 0) < (0 / 0)', '{}', false);
----
null

query empty
SELECT jsonb_path_query('{}', 'strict $[*]', '{}', true);

statement error pgcode 22039 pq: jsonpath wildcard array accessor can only be applied to an array
SELECT jsonb_path_query('{}', 'strict $[*]', '{}', false);

query T
SELECT jsonb_path_query('{}', '$[*]', '{}', true);
----
{}

query T
SELECT jsonb_path_query('{}', '$[*]', '{}', false);
----
{}

query empty
SELECT jsonb_path_query('{"a": 1}', 'strict $[0]', '{}', true);

statement error pgcode 22039 pq: jsonpath array accessor can only be applied to an array
SELECT jsonb_path_query('{"a": 1}', 'strict $[0]', '{}', false);

query T
SELECT jsonb_path_query('{"a": 1}', '$[0]', '{}', true);
----
{"a": 1}

query T
SELECT jsonb_path_query('{"a": 1}', '$[0]', '{}', false);
----
{"a": 1}

query empty
SELECT jsonb_path_query('[1, 2, 3]', 'strict $[3]', '{}', true);

statement error pgcode 22033 pq: jsonpath array subscript is out of bounds
SELECT jsonb_path_query('[1, 2, 3]', 'strict $[3]', '{}', false);

query empty
SELECT jsonb_path_query('[1, 2, 3]', '$[3]', '{}', true);

query empty
SELECT jsonb_path_query('[1, 2, 3]', '$[3]', '{}', false);

query empty
SELECT jsonb_path_query('[1, 2, 3]', 'strict $["a"]', '{}', true);

statement error pgcode 22033 pq: jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('[1, 2, 3]', 'strict $["a"]', '{}', false);

query empty
SELECT jsonb_path_query('[1, 2, 3]', '$["a"]', '{}', true);

statement error pgcode 22033 pq: jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('[1, 2, 3]', '$["a"]', '{}', false);

query empty
SELECT jsonb_path_query('{"a": "hello"}', 'strict $.a[1 to 3]', '{}', true);

statement error pgcode 22039 pq: jsonpath array accessor can only be applied to an array
SELECT jsonb_path_query('{"a": "hello"}', 'strict $.a[1 to 3]', '{}', false);

query empty
SELECT jsonb_path_query('{"a": "hello"}', '$.a[1 to 3]', '{}', true);

query empty
SELECT jsonb_path_query('{"a": "hello"}', '$.a[1 to 3]', '{}', false);

query empty
SELECT jsonb_path_query('"abc"', 'strict $.a', '{}', true);

statement error pgcode 2203A pq: jsonpath member accessor can only be applied to an object
SELECT jsonb_path_query('"abc"', 'strict $.a', '{}', false);

query empty
SELECT jsonb_path_query('"abc"', '$.a', '{}', true);

query empty
SELECT jsonb_path_query('"abc"', '$.a', '{}', false);

query empty
SELECT jsonb_path_query('"abc"', 'strict $.*', '{}', true);

statement error pgcode 2203C pq: jsonpath wildcard member accessor can only be applied to an object
SELECT jsonb_path_query('"abc"', 'strict $.*', '{}', false);

query empty
SELECT jsonb_path_query('"abc"', '$.*', '{}', true);

query empty
SELECT jsonb_path_query('"abc"', '$.*', '{}', false);

query empty
SELECT jsonb_path_query('{}', 'strict -$', '{}', true);

statement error pgcode 2203B pq: operand of unary jsonpath operator - is not a numeric value
SELECT jsonb_path_query('{}', 'strict -$', '{}', false);

query empty
SELECT jsonb_path_query('{}', '-$', '{}', true);

statement error pgcode 2203B pq: operand of unary jsonpath operator - is not a numeric value
SELECT jsonb_path_query('{}', '-$', '{}', false);

query empty
SELECT jsonb_path_query('{}', 'strict $ - 1', '{}', true);

statement error pgcode 22038 pq: left operand of jsonpath operator - is not a single numeric value
SELECT jsonb_path_query('{}', 'strict $ - 1', '{}', false);

query empty
SELECT jsonb_path_query('{}', '$ - 1', '{}', true);

statement error pgcode 22038 pq: left operand of jsonpath operator - is not a single numeric value
SELECT jsonb_path_query('{}', '$ - 1', '{}', false);

query empty
SELECT jsonb_path_query('{}', 'strict 1 - $', '{}', true);

statement error pgcode 22038 pq: right operand of jsonpath operator - is not a single numeric value
SELECT jsonb_path_query('{}', 'strict 1 - $', '{}', false);

query empty
SELECT jsonb_path_query('{}', '1 - $', '{}', true);

statement error pgcode 22038 pq: right operand of jsonpath operator - is not a single numeric value
SELECT jsonb_path_query('{}', '1 - $', '{}', false);

statement error pgcode 42704 pq: could not find jsonpath variable "var"
SELECT jsonb_path_query('{}', 'strict $var', '{}', true);

statement error pgcode 42704 pq: could not find jsonpath variable "var"
SELECT jsonb_path_query('{}', 'strict $var', '{}', false);

statement error pgcode 42704 pq: could not find jsonpath variable "var"
SELECT jsonb_path_query('{}', '$var', '{}', true);

statement error pgcode 42704 pq: could not find jsonpath variable "var"
SELECT jsonb_path_query('{}', '$var', '{}', false);

query T
SELECT jsonb_path_query('[1, 2, 3]', '($[*] > 2) ? (@ == true)');
----
true

query T
SELECT jsonb_path_query('[1, 2, 3]', '((($[*] > (2)))) ? ((@ == true))');
----
true

query T
SELECT jsonb_path_query('{"a": {"b": {"c": 1}}}', '($.a.b).c');
----
1

query T rowsort
SELECT jsonb_path_query('{"a": {"b": {"c": 1, "d": 2}}}', '($.a.b).*');
----
1
2

query T
SELECT jsonb_path_query('{"a": [10, 20, 30]}', '($.a)[1]');
----
20

query T
SELECT jsonb_path_query('{"a": {"b": [{"c": 1}, {"c": 2}]}}', '($.a.b[1]).c');
----
2

statement error pgcode 22033 pq: jsonpath array subscript is out of integer range
SELECT jsonb_path_query('[1]', 'lax $[10000000000000000]');

statement error pgcode 22033 pq: jsonpath array subscript is out of integer range
SELECT jsonb_path_query('[1]', 'lax $[-10000000000000000]');

# MaxInt32
query empty
SELECT jsonb_path_query('[1]', '$[2147483647]');

# MaxInt32 + 1
statement error pgcode 22033 pq: jsonpath array subscript is out of integer range
SELECT jsonb_path_query('[1]', '$[2147483648]');

# MinInt32
query empty
SELECT jsonb_path_query('[1]', '$[-2147483648]');

# MinInt32 - 1
statement error pgcode 22033 pq: jsonpath array subscript is out of integer range
SELECT jsonb_path_query('[1]', '$[-2147483649]');

query T
SELECT jsonb_path_query('[1, 2]', '$.size()');
----
2

query T
SELECT jsonb_path_query('[]', '$.size()');
----
0

query T
SELECT jsonb_path_query('{}', '$.size()');
----
1

statement error pgcode 22039 pq: jsonpath item method .size\(\) can only be applied to an array
SELECT jsonb_path_query('{}', 'strict $.size()');

query T rowsort
SELECT jsonb_path_query('[1,null,true,"11",[],[1],[1,2,3],{},{"a":1,"b":2}]', 'lax $[*].size()');
----
1
1
1
1
0
1
3
1
1

statement error pgcode 22039 pq: jsonpath item method .size\(\) can only be applied to an array
SELECT jsonb_path_query('[1,null,true,"11",[],[1],[1,2,3],{},{"a":1,"b":2}]', 'strict $[*].size()');

query T rowsort
SELECT jsonb_path_query('[12, {"a": 13}, {"b": 14}, "ccc", true]', '$[2 - 1 to $.size() - 2]');
----
{"a": 13}
{"b": 14}
"ccc"

query T
SELECT jsonb_path_query('{}', '$.type()');
----
"object"

query T
SELECT jsonb_path_query('[]', '$.type()');
----
"array"

query T
SELECT jsonb_path_query('"hello"', '$.type()');
----
"string"

query T
SELECT jsonb_path_query('0', '$.type()');
----
"number"

query T
SELECT jsonb_path_query('0.1', '$.type()');
----
"number"

query T
SELECT jsonb_path_query('true', '$.type()');
----
"boolean"

query T
SELECT jsonb_path_query('false', '$.type()');
----
"boolean"

query T
SELECT jsonb_path_query('null', '$.type()');
----
"null"

query T
SELECT jsonb_path_query('null', '"123".type()');
----
"string"

query T
SELECT jsonb_path_query('null', '(123).type()');
----
"number"

query T
SELECT jsonb_path_query('null', 'true.type()');
----
"boolean"

query T
SELECT jsonb_path_query('null', 'null.type()');
----
"null"

query T rowsort
SELECT jsonb_path_query('[null,1,true,"a",[],{}]', '$[*].type()');
----
"null"
"number"
"boolean"
"string"
"array"
"object"

query T
SELECT jsonb_path_query('[null,1,true,"a",[],{}]', 'lax $.type()');
----
"array"

statement error pgcode 22033 pq: jsonpath array subscript is not a single numeric value
SELECT jsonb_path_query('[1,2,3]', '$[last ? (@.type() == "string")]');

query T
SELECT jsonb_path_query('[1,2,3]', '$[last ? (@.type() == "number")]');
----
3
