# LogicTest: local-udf

statement ok
CREATE TABLE ab (
  a INT PRIMARY KEY,
  b INT
)

statement error pq: unimplemented: replacing function
CREATE OR REPLACE FUNCTION f(a int) RETURNS INT LANGUAGE SQL AS 'SELECT 1'

statement error pq: cannot create leakproof function with non-immutable volatility: STABLE
CREATE FUNCTION f(a int) RETURNS INT LEAKPROOF STABLE LANGUAGE SQL AS 'SELECT 1'

statement error pq: return type mismatch in function declared to return int\nDETAIL: Actual return type is string
CREATE FUNCTION f() RETURNS INT IMMUTABLE LANGUAGE SQL AS $$ SELECT 'hello' $$

statement ok
CREATE FUNCTION a(i INT) RETURNS INT LANGUAGE SQL AS 'SELECT i'

statement ok
CREATE FUNCTION b(i INT) RETURNS INT LANGUAGE SQL AS 'SELECT a FROM ab WHERE a = i'

statement ok
CREATE FUNCTION c(i INT, j INT) RETURNS INT LANGUAGE SQL AS 'SELECT i - j'

statement error column \"j\" does not exist
CREATE FUNCTION err(i INT) RETURNS INT LANGUAGE SQL AS 'SELECT j'

statement error column \"j\" does not exist
CREATE FUNCTION err(i INT) RETURNS INT LANGUAGE SQL AS 'SELECT * FROM ab WHERE a = j'

statement ok
CREATE FUNCTION d(i INT2) RETURNS INT4 LANGUAGE SQL AS 'SELECT i'

# TODO(mgartner): This should be allowed because the cast from INT2::FLOAT4 is
# allowed in implicit contexts.
statement error return type mismatch in function declared to return float4\nDETAIL: Actual return type is int2
CREATE FUNCTION e(i INT2) RETURNS FLOAT4 LANGUAGE SQL AS 'SELECT i'

# TODO(mgartner): This should be allowed because the cast from BOOL::STRING is
# allowed in assignment contexts.
statement error return type mismatch in function declared to return string\nDETAIL: Actual return type is bool
CREATE FUNCTION f(b BOOL) RETURNS STRING LANGUAGE SQL AS 'SELECT b'

statement error return type mismatch in function declared to return bool\nDETAIL: Actual return type is int
CREATE FUNCTION err(i INT, j INT) RETURNS BOOL LANGUAGE SQL AS 'SELECT i - j'

statement error return type mismatch in function declared to return int\nDETAIL: Actual return type is bool
CREATE FUNCTION err(b BOOL) RETURNS INT LANGUAGE SQL AS 'SELECT b'

statement error return type mismatch in function declared to return bool\nDETAIL: Actual return type is int
CREATE FUNCTION err(i INT, j INT) RETURNS BOOL LANGUAGE SQL AS 'SELECT i - j'

# Make sure using table name as tuple type name works properly.
# It should pass the return type validation and stored as a tuple type.
statement ok
CREATE TABLE t_implicit_type(a INT PRIMARY KEY, b STRING);

statement error pq: return type mismatch in function declared to return int\nDETAIL: Actual return type is record
CREATE FUNCTION f() RETURNS INT IMMUTABLE LANGUAGE SQL AS $$ SELECT a, b from t_implicit_type $$

statement ok
CREATE FUNCTION f() RETURNS t_implicit_type IMMUTABLE LANGUAGE SQL AS $$ SELECT * from t_implicit_type $$

statement ok
CREATE FUNCTION f() RETURNS t_implicit_type IMMUTABLE LANGUAGE SQL AS $$ SELECT a, b from t_implicit_type $$

let $max_desc_id
SELECT max_desc_id FROM [SELECT max(id) as max_desc_id FROM system.descriptor];

# TODO (Chengxiong) replace this test with `SHOW CREATE FUNCTION` when we have
# function resolution in place.
query T
SELECT jsonb_pretty(
 crdb_internal.pb_to_json('cockroach.sql.sqlbase.Descriptor', descriptor, false)
)::string
FROM system.descriptor
WHERE id = $max_desc_id;
----
{
    "function": {
        "dependsOn": [
            112,
            112
        ],
        "functionBody": "SELECT a, b FROM test.public.t_implicit_type;",
        "id": 114,
        "lang": "SQL",
        "modificationTime": {},
        "name": "f",
        "nullInputBehavior": "CALLED_ON_NULL_INPUT",
        "parentId": 104,
        "parentSchemaId": 105,
        "privileges": {
            "ownerProto": "root",
            "users": [
                {
                    "privileges": 2,
                    "userProto": "admin",
                    "withGrantOption": 2
                },
                {
                    "privileges": 2,
                    "userProto": "root",
                    "withGrantOption": 2
                }
            ],
            "version": 2
        },
        "returnType": {
            "type": {
                "family": "TupleFamily",
                "oid": 100112,
                "tupleContents": [
                    {
                        "family": "IntFamily",
                        "oid": 20,
                        "width": 64
                    },
                    {
                        "family": "StringFamily",
                        "oid": 25
                    }
                ],
                "tupleLabels": [
                    "a",
                    "b"
                ]
            }
        },
        "version": "1",
        "volatility": "IMMUTABLE"
    }
}

# Create function with no references.
statement ok
CREATE FUNCTION f(a int) RETURNS INT IMMUTABLE AS 'SELECT 1' LANGUAGE SQL

let $max_desc_id
SELECT max_desc_id FROM [SELECT max(id) as max_desc_id FROM system.descriptor];

# TODO (Chengxiong) replace this test with `SHOW CREATE FUNCTION` when we have
# function resolution in place.
query T
SELECT jsonb_pretty(
 crdb_internal.pb_to_json('cockroach.sql.sqlbase.Descriptor', descriptor, false)
)::string
FROM system.descriptor
WHERE id = $max_desc_id;
----
{
    "function": {
        "args": [
            {
                "class": "IN",
                "name": "a",
                "type": {
                    "family": "IntFamily",
                    "oid": 20,
                    "width": 64
                }
            }
        ],
        "functionBody": "SELECT 1;",
        "id": 115,
        "lang": "SQL",
        "modificationTime": {},
        "name": "f",
        "nullInputBehavior": "CALLED_ON_NULL_INPUT",
        "parentId": 104,
        "parentSchemaId": 105,
        "privileges": {
            "ownerProto": "root",
            "users": [
                {
                    "privileges": 2,
                    "userProto": "admin",
                    "withGrantOption": 2
                },
                {
                    "privileges": 2,
                    "userProto": "root",
                    "withGrantOption": 2
                }
            ],
            "version": 2
        },
        "returnType": {
            "type": {
                "family": "IntFamily",
                "oid": 20,
                "width": 64
            }
        },
        "version": "1",
        "volatility": "IMMUTABLE"
    }
}

# Make sure that names are qualified, references are tracked and sequence
# expression is rewritten.
statement ok
CREATE TABLE t(
  a INT PRIMARY KEY,
  b INT,
  C INT,
  INDEX t_idx_b(b),
  INDEX t_idx_c(c)
);

statement ok
CREATE SEQUENCE sq1;

statement ok
CREATE TYPE notmyworkday AS ENUM ('Monday', 'Tuesday');

statement ok
CREATE FUNCTION f(a notmyworkday) RETURNS INT IMMUTABLE LANGUAGE SQL AS $$
 SELECT a FROM t;
 SELECT b FROM t@t_idx_b;
 SELECT c FROM t@t_idx_c;
 SELECT nextval('sq1');
$$

let $max_desc_id
SELECT max_desc_id FROM [SELECT max(id) as max_desc_id FROM system.descriptor];

# TODO (Chengxiong) replace this test with `SHOW CREATE FUNCTION` when we have
# function resolution in place.
query T
SELECT jsonb_pretty(
  crdb_internal.pb_to_json('cockroach.sql.sqlbase.Descriptor', descriptor, false)
)::string
FROM system.descriptor
WHERE id = $max_desc_id;
----
{
    "function": {
        "args": [
            {
                "class": "IN",
                "name": "a",
                "type": {
                    "family": "EnumFamily",
                    "oid": 100118,
                    "udtMetadata": {
                        "arrayTypeOid": 100119
                    }
                }
            }
        ],
        "dependsOn": [
            116,
            117
        ],
        "dependsOnTypes": [
            118,
            119
        ],
        "functionBody": "SELECT a FROM test.public.t;\nSELECT b FROM test.public.t@t_idx_b;\nSELECT c FROM test.public.t@t_idx_c;\nSELECT nextval(117:::REGCLASS);",
        "id": 120,
        "lang": "SQL",
        "modificationTime": {},
        "name": "f",
        "nullInputBehavior": "CALLED_ON_NULL_INPUT",
        "parentId": 104,
        "parentSchemaId": 105,
        "privileges": {
            "ownerProto": "root",
            "users": [
                {
                    "privileges": 2,
                    "userProto": "admin",
                    "withGrantOption": 2
                },
                {
                    "privileges": 2,
                    "userProto": "root",
                    "withGrantOption": 2
                }
            ],
            "version": 2
        },
        "returnType": {
            "type": {
                "family": "IntFamily",
                "oid": 20,
                "width": 64
            }
        },
        "version": "1",
        "volatility": "IMMUTABLE"
    }
}

statement error pq: unimplemented: drop function not supported.*
DROP FUNCTION f

statement error pq: unimplemented: alter function not supported.*
ALTER FUNCTION f() IMMUTABLE

statement error pq: unimplemented: alter function rename to not supported.*
ALTER FUNCTION f() RENAME TO g

statement error pq: unimplemented: alter function owner to not supported.*
ALTER FUNCTION f() OWNER TO CURRENT_USER

statement error pq: unimplemented: alter function set schema not supported.*
ALTER FUNCTION f() SET SCHEMA test_sc

statement error pq: unimplemented: alter function depends on extension not supported.*
ALTER FUNCTION f() DEPENDS ON EXTENSION postgis

subtest execution

statement ok
INSERT INTO ab VALUES (1, 1), (2, 2), (3, 3), (4, 1), (5, 1)

statement ok
CREATE FUNCTION one() RETURNS INT LANGUAGE SQL AS 'SELECT 2-1';

query I
SELECT one()
----
1

query I colnames
SELECT * FROM one()
----
one
1

query III colnames
SELECT *, one() FROM ab WHERE a = one()
----
a  b  one
1  1  1

query III colnames
SELECT *, one() FROM ab WHERE b = one()
----
a  b  one
1  1  1
4  1  1
5  1  1

query II colnames
SELECT * FROM ab WHERE b = one() + 1
----
a  b
2  2

statement ok
CREATE FUNCTION max_in_values() RETURNS INT LANGUAGE SQL AS $$
  SELECT i FROM (VALUES (1, 0), (2, 0), (3, 0)) AS v(i, j) ORDER BY i DESC
$$

query I
SELECT max_in_values()
----
3

statement ok
CREATE FUNCTION fetch_one_then_two() RETURNS INT LANGUAGE SQL AS $$
  SELECT b FROM ab WHERE a = 1;
  SELECT b FROM ab WHERE a = 2;
$$

query II
SELECT i, fetch_one_then_two()
FROM (VALUES (1), (2), (3)) AS v(i)
WHERE i = fetch_one_then_two()
----
2  2

query I colnames
SELECT * FROM fetch_one_then_two()
----
fetch_one_then_two
2

subtest udf_pg_proc

statement ok
CREATE FUNCTION proc_f(INT) RETURNS INT LANGUAGE SQL AS $$ SELECT 1 $$;

statement
CREATE FUNCTION proc_f(STRING, b INT) RETURNS SETOF STRING STRICT IMMUTABLE LEAKPROOF LANGUAGE SQL AS $$ SELECT 'hello' $$;

statement ok
CREATE SCHEMA sc;

statement
CREATE FUNCTION sc.proc_f_2(STRING) RETURNS STRING LANGUAGE SQL AS $$ SELECT 'hello' $$;

query TTTTTBBBTITTTTT
SELECT oid, proname, pronamespace, proowner, prolang, proleakproof, proisstrict, proretset, provolatile, pronargs, prorettype, proargtypes, proargmodes, proargnames, prosrc
FROM pg_catalog.pg_proc WHERE proname IN ('proc_f', 'proc_f_2');
----
100115  proc_f    4101115737  1546506610  14  false  false  false  v  1  20  20     {i}    NULL    SELECT 1;
100116  proc_f    4101115737  1546506610  14  true   true   true   i  2  25  25 20  {i,i}  {"",b}  SELECT 'hello';
100118  proc_f_2  131273696   1546506610  14  false  false  false  v  1  25  25     {i}    NULL    SELECT 'hello';
