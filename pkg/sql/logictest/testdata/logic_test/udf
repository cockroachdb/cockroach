# LogicTest: local-udf

statement error pq: unimplemented: replacing function
CREATE OR REPLACE FUNCTION f(a int) RETURNS INT LANGUAGE SQL AS 'SELECT 1'

statement error pq: cannot create leakproof function with non-immutable volatility: STABLE
CREATE FUNCTION f(a int) RETURNS INT LEAKPROOF STABLE LANGUAGE SQL AS 'SELECT 1'

statement error pq: return type mismatch in function declared to return int\nDETAIL: Actual return type is string
CREATE FUNCTION f() RETURNS INT IMMUTABLE LANGUAGE SQL AS $$ SELECT 'hello' $$

# Make sure using table name as tuple type name works properly.
# It should pass the return type validation and stored as a tuple type.
statement ok
CREATE TABLE t_implicit_type(a INT PRIMARY KEY, b STRING);

statement error pq: return type mismatch in function declared to return int\nDETAIL: Actual return type is record
CREATE FUNCTION f() RETURNS INT IMMUTABLE LANGUAGE SQL AS $$ SELECT a, b from t_implicit_type $$

statement error pq: unimplemented: functions do not currently support \* expressions.*
CREATE FUNCTION f() RETURNS t_implicit_type IMMUTABLE LANGUAGE SQL AS $$ SELECT * from t_implicit_type $$

statement ok
CREATE FUNCTION f() RETURNS t_implicit_type IMMUTABLE LANGUAGE SQL AS $$ SELECT a, b from t_implicit_type $$

let $max_desc_id
SELECT max_desc_id FROM [SELECT max(id) as max_desc_id FROM system.descriptor];

# TODO (Chengxiong) replace this test with `SHOW CREATE FUNCTION` when we have
# function resolution in place.
query T
SELECT jsonb_pretty(
 crdb_internal.pb_to_json('cockroach.sql.sqlbase.Descriptor', descriptor, false)
)::string
FROM system.descriptor
WHERE id = $max_desc_id;
----
{
    "function": {
        "dependsOn": [
            107,
            107
        ],
        "functionBody": "SELECT a, b FROM test.public.t_implicit_type;",
        "id": 108,
        "lang": "SQL",
        "modificationTime": {},
        "name": "f",
        "nullInputBehavior": "CALLED_ON_NULL_INPUT",
        "parentId": 104,
        "parentSchemaId": 105,
        "privileges": {
            "ownerProto": "root",
            "users": [
                {
                    "privileges": 2,
                    "userProto": "admin",
                    "withGrantOption": 2
                },
                {
                    "privileges": 2,
                    "userProto": "root",
                    "withGrantOption": 2
                }
            ],
            "version": 2
        },
        "returnType": {
            "type": {
                "family": "TupleFamily",
                "oid": 100107,
                "tupleContents": [
                    {
                        "family": "IntFamily",
                        "oid": 20,
                        "width": 64
                    },
                    {
                        "family": "StringFamily",
                        "oid": 25
                    }
                ],
                "tupleLabels": [
                    "a",
                    "b"
                ]
            }
        },
        "version": "1",
        "volatility": "IMMUTABLE"
    }
}

# Create function with no references.
statement ok
CREATE FUNCTION f(a int) RETURNS INT IMMUTABLE AS 'SELECT 1' LANGUAGE SQL

let $max_desc_id
SELECT max_desc_id FROM [SELECT max(id) as max_desc_id FROM system.descriptor];

# TODO (Chengxiong) replace this test with `SHOW CREATE FUNCTION` when we have
# function resolution in place.
query T
SELECT jsonb_pretty(
 crdb_internal.pb_to_json('cockroach.sql.sqlbase.Descriptor', descriptor, false)
)::string
FROM system.descriptor
WHERE id = $max_desc_id;
----
{
    "function": {
        "args": [
            {
                "class": "IN",
                "name": "a",
                "type": {
                    "family": "IntFamily",
                    "oid": 20,
                    "width": 64
                }
            }
        ],
        "functionBody": "SELECT 1;",
        "id": 109,
        "lang": "SQL",
        "modificationTime": {},
        "name": "f",
        "nullInputBehavior": "CALLED_ON_NULL_INPUT",
        "parentId": 104,
        "parentSchemaId": 105,
        "privileges": {
            "ownerProto": "root",
            "users": [
                {
                    "privileges": 2,
                    "userProto": "admin",
                    "withGrantOption": 2
                },
                {
                    "privileges": 2,
                    "userProto": "root",
                    "withGrantOption": 2
                }
            ],
            "version": 2
        },
        "returnType": {
            "type": {
                "family": "IntFamily",
                "oid": 20,
                "width": 64
            }
        },
        "version": "1",
        "volatility": "IMMUTABLE"
    }
}

# Make sure that names are qualified, references are tracked and sequence
# expression is rewritten.
statement ok
CREATE TABLE t(
  a INT PRIMARY KEY,
  b INT,
  C INT,
  INDEX t_idx_b(b),
  INDEX t_idx_c(c)
);

statement ok
CREATE SEQUENCE sq1;

statement ok
CREATE TYPE notmyworkday AS ENUM ('Monday', 'Tuesday');

statement ok
CREATE FUNCTION f(a notmyworkday) RETURNS INT IMMUTABLE LANGUAGE SQL AS $$
 SELECT a FROM t;
 SELECT b FROM t@t_idx_b;
 SELECT c FROM t@t_idx_c;
 SELECT nextval('sq1');
$$

let $max_desc_id
SELECT max_desc_id FROM [SELECT max(id) as max_desc_id FROM system.descriptor];

# TODO (Chengxiong) replace this test with `SHOW CREATE FUNCTION` when we have
# function resolution in place.
query T
SELECT jsonb_pretty(
  crdb_internal.pb_to_json('cockroach.sql.sqlbase.Descriptor', descriptor, false)
)::string
FROM system.descriptor
WHERE id = $max_desc_id;
----
{
    "function": {
        "args": [
            {
                "class": "IN",
                "name": "a",
                "type": {
                    "family": "EnumFamily",
                    "oid": 100112,
                    "udtMetadata": {
                        "arrayTypeOid": 100113
                    }
                }
            }
        ],
        "dependsOn": [
            110,
            111
        ],
        "dependsOnTypes": [
            112,
            113
        ],
        "functionBody": "SELECT a FROM test.public.t;\nSELECT b FROM test.public.t@t_idx_b;\nSELECT c FROM test.public.t@t_idx_c;\nSELECT nextval(111:::REGCLASS);",
        "id": 114,
        "lang": "SQL",
        "modificationTime": {},
        "name": "f",
        "nullInputBehavior": "CALLED_ON_NULL_INPUT",
        "parentId": 104,
        "parentSchemaId": 105,
        "privileges": {
            "ownerProto": "root",
            "users": [
                {
                    "privileges": 2,
                    "userProto": "admin",
                    "withGrantOption": 2
                },
                {
                    "privileges": 2,
                    "userProto": "root",
                    "withGrantOption": 2
                }
            ],
            "version": 2
        },
        "returnType": {
            "type": {
                "family": "IntFamily",
                "oid": 20,
                "width": 64
            }
        },
        "version": "1",
        "volatility": "IMMUTABLE"
    }
}

statement error pq: unimplemented: drop function not supported.*
DROP FUNCTION f

statement error pq: unimplemented: alter function not supported.*
ALTER FUNCTION f() IMMUTABLE

statement error pq: unimplemented: alter function rename to not supported.*
ALTER FUNCTION f() RENAME TO g

statement error pq: unimplemented: alter function owner to not supported.*
ALTER FUNCTION f() OWNER TO CURRENT_USER

statement error pq: unimplemented: alter function set schema not supported.*
ALTER FUNCTION f() SET SCHEMA test_sc

statement error pq: unimplemented: alter function depends on extension not supported.*
ALTER FUNCTION f() DEPENDS ON EXTENSION postgis

subtest udf_pg_proc

statement ok
CREATE FUNCTION proc_f(INT) RETURNS INT LANGUAGE SQL AS $$ SELECT 1 $$;

statement
CREATE FUNCTION proc_f(STRING, b INT) RETURNS SETOF STRING STRICT IMMUTABLE LEAKPROOF LANGUAGE SQL AS $$ SELECT 'hello' $$;

statement ok
CREATE FUNCTION proc_implicit() RETURNS t_implicit_type IMMUTABLE LANGUAGE SQL AS $$ SELECT a, b from t_implicit_type $$

statement ok
CREATE SCHEMA sc;

statement
CREATE FUNCTION sc.proc_f_2(STRING) RETURNS STRING LANGUAGE SQL AS $$ SELECT 'hello' $$;

query TTTTTBBBTITTTTT
SELECT oid, proname, pronamespace, proowner, prolang, proleakproof, proisstrict, proretset, provolatile, pronargs, prorettype, proargtypes, proargmodes, proargnames, prosrc
FROM pg_catalog.pg_proc WHERE proname IN ('proc_f', 'proc_f_2');
----
100115  proc_f    4101115737  1546506610  14  false  false  false  v  1  20  20     {i}    NULL    SELECT 1;
100116  proc_f    4101115737  1546506610  14  true   true   true   i  2  25  25 20  {i,i}  {"",b}  SELECT 'hello';
100119  proc_f_2  131273696   1546506610  14  false  false  false  v  1  25  25     {i}    NULL    SELECT 'hello';

subtest create_function_statements

statement ok
CREATE FUNCTION proc_implicit() RETURNS t_implicit_type IMMUTABLE LANGUAGE SQL AS $$ SELECT a, b from t_implicit_type $$

query TITITIT
SELECT create_statement, database_id, database_name, schema_id, schema_name, function_id, function_name
FROM crdb_internal.create_function_statements
WHERE function_name IN ('proc_f', 'proc_f_2')
ORDER BY function_name;
----
CREATE FUNCTION public.proc_f(IN INT8)
    RETURNS INT8
    VOLATILE
    NOT LEAKPROOF
    CALLED ON NULL INPUT
    AS $$
    SELECT 1;
$$  104  test  105  public  115  proc_f
CREATE FUNCTION public.proc_f(IN STRING, IN b INT8)
    RETURNS SETOF STRING
    IMMUTABLE
    LEAKPROOF
    STRICT
    AS $$
    SELECT 'hello';
$$  104  test  105  public  116  proc_f
CREATE FUNCTION sc.proc_f_2(IN STRING)
    RETURNS STRING
    VOLATILE
    NOT LEAKPROOF
    CALLED ON NULL INPUT
    AS $$
    SELECT 'hello';
$$  104  test  118  sc  119  proc_f_2

subtest show_create_function

query T
SELECT @2 FROM [SHOW CREATE FUNCTION proc_f];
----
CREATE FUNCTION public.proc_f(IN INT8)
    RETURNS INT8
    VOLATILE
    NOT LEAKPROOF
    CALLED ON NULL INPUT
    AS $$
    SELECT 1;
$$
CREATE FUNCTION public.proc_f(IN STRING, IN b INT8)
    RETURNS SETOF STRING
    IMMUTABLE
    LEAKPROOF
    STRICT
    AS $$
    SELECT 'hello';
$$

statement error pq: unknown function: proc_f_2()
SHOW CREATE FUNCTION proc_f_2;

query T
SELECT @2 FROM [SHOW CREATE FUNCTION sc.proc_f_2];
----
CREATE FUNCTION sc.proc_f_2(IN STRING)
    RETURNS STRING
    VOLATILE
    NOT LEAKPROOF
    CALLED ON NULL INPUT
    AS $$
    SELECT 'hello';
$$

statement ok
SET search_path = sc;

query T
SELECT @2 FROM [SHOW CREATE FUNCTION proc_f_2];
----
CREATE FUNCTION sc.proc_f_2(IN STRING)
    RETURNS STRING
    VOLATILE
    NOT LEAKPROOF
    CALLED ON NULL INPUT
    AS $$
    SELECT 'hello';
$$

statement ok
SET search_path = public;
