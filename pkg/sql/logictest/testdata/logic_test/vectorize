# LogicTest: local local-vec

# Disable automatic stats.
statement ok
SET CLUSTER SETTING sql.stats.automatic_collection.enabled = false

statement ok
CREATE TABLE a (a INT, b INT, PRIMARY KEY (a, b))

statement ok
INSERT INTO a SELECT g//2, g FROM generate_series(0,2000) g(g)

statement ok
CREATE TABLE bools (b BOOL, i INT, PRIMARY KEY (b, i)); INSERT INTO bools VALUES (true, 0), (false, 1), (true, 2), (false, 3);

statement ok
CREATE TABLE nulls (a INT, b INT)

statement ok
INSERT INTO nulls VALUES (NULL, NULL), (NULL, 1), (1, NULL), (1, 1)

query I
SELECT count(*) FROM a
----
2001

query I
SELECT count(*) FROM (SELECT DISTINCT a FROM a)
----
1001

query II
SELECT * FROM a LIMIT 10
----
0  0
0  1
1  2
1  3
2  4
2  5
3  6
3  7
4  8
4  9

query II
SELECT DISTINCT(a), b FROM a LIMIT 10
----
0  0
0  1
1  2
1  3
2  4
2  5
3  6
3  7
4  8
4  9

# Simple filter.
query I
SELECT b FROM a WHERE b < 3
----
0
1
2

# Simple filter with nulls.
query I
SELECT a FROM nulls WHERE a < 2
----
1
1

query II
SELECT a, b FROM nulls WHERE a <= b
----
1 1


# Filter on the result of a projection.
query II
SELECT a, b FROM a WHERE a * 2 < b LIMIT 5
----
0  1
1  3
2  5
3  7
4  9

# Simple projection.
query I
SELECT b + 1 FROM a WHERE b < 3
----
1
2
3

# Simple projection with nulls.
query I rowsort
SELECT b + 1 FROM nulls
----
NULL
NULL
2
2

query III rowsort
SELECT a, b, a + b FROM nulls
----
NULL NULL NULL
NULL 1    NULL
1    NULL NULL
1    1    2

# Multiple step projection.
query III
SELECT a, b, (a + 1) * (b + 2) FROM a WHERE a < 3
----
0  0  2
0  1  3
1  2  8
1  3  10
2  4  18
2  5  21

# Mismatched constant type in projection. Not handled yet but should fall back
# gracefully.
query I
SELECT (a + 1.0::DECIMAL)::INT FROM a LIMIT 1
----
1

# Operations with constants on the left work.
query I
SELECT 5 - a FROM a LIMIT 3
----
5
5
4

# Constant projections.
query II
SELECT 5, a FROM a LIMIT 3
----
5  0
5  0
5  1

# Filter on a boolean column.

query BI
SELECT * FROM bools WHERE b
----
true 0
true 2

# Mismatched column types in projection. Not handled yet but should fall back
# gracefully.
statement ok
CREATE TABLE intdec (a INT, b DECIMAL)

statement ok
INSERT INTO intdec VALUES (1, 2.0)

query I
SELECT (a + b)::INT FROM intdec
----
3

# AND expressions.
query II
SELECT a, b FROM a WHERE a < 2 AND b > 0 AND a * b != 3
----
0  1
1  2

statement ok
CREATE TABLE b (a INT, b STRING, PRIMARY KEY (b,a))

statement ok
INSERT INTO b VALUES
  (0, 'a'),
  (1, 'a'),
  (0, 'b'),
  (1, 'b')

query IT
SELECT sum_int(a), b from b group by b
----
1 a
1 b

# Test that lookup joins run fine through columnar execution.

statement ok
CREATE TABLE c (a INT, b INT, c INT, d INT, PRIMARY KEY (a, c), INDEX sec (b))

statement ok
CREATE TABLE d (a INT, b INT, PRIMARY KEY (b, a))

statement ok
INSERT INTO c VALUES (1, 1, 1, 0), (2, 1, 2, 0)

statement ok
INSERT INTO d VALUES (1, 1), (1, 2)

statement ok
ALTER TABLE c INJECT STATISTICS '[
  {
    "columns": ["a"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 1,
    "distinct_count": 1
  }
]'

statement ok
SET optimizer = on

# Ensure that a lookup join is used.
query I
SELECT count(*) FROM [EXPLAIN SELECT c.a FROM c JOIN d ON d.b = c.b] WHERE tree LIKE '%lookup-join%'
----
1

statement ok
SET experimental_vectorize = always

# Simple lookup join.
query I
SELECT c.a FROM c JOIN d ON d.b = c.b
----
1
2

# Index join.
query I
SELECT c.d FROM c@sec
----
0
0

# Lookup join on secondary index, requires an index join into the primary
# index. Both of these should be wrapped and work fine.
query I
SELECT c.d FROM c@sec JOIN d ON d.b = c.b
----
0
0

# Ordinality operator with a filter and limit.
query III
SELECT * FROM a WITH ORDINALITY WHERE a > 1 LIMIT 6
----
2  4  5
2  5  6
3  6  7
3  7  8
4  8  9
4  9  10

# Ensure that lookup joins properly get their postprocessing to select needed
# columns.

query I
SELECT c.a FROM c INNER LOOKUP JOIN c@sec AS s ON c.b=s.b
----
1
1
2
2

# Test that LIKE expressions are properly handled by vectorized execution.
statement ok
RESET experimental_vectorize

statement ok
CREATE TABLE e (x TEXT)

statement ok
INSERT INTO e VALUES ('abc'), ('xyz')

statement ok
SET experimental_vectorize = always

query T
SELECT * FROM e WHERE x LIKE ''
----

query T
SELECT * FROM e WHERE x NOT LIKE '' ORDER BY 1
----
abc
xyz

query T
SELECT * FROM e WHERE x LIKE '%' ORDER BY 1
----
abc
xyz

query T
SELECT * FROM e WHERE x NOT LIKE '%'
----

query T
SELECT * FROM e WHERE x LIKE 'ab%'
----
abc

query T
SELECT * FROM e WHERE x NOT LIKE 'ab%'
----
xyz

query T
SELECT * FROM e WHERE x LIKE '%bc'
----
abc

query T
SELECT * FROM e WHERE x NOT LIKE '%bc'
----
xyz

query T
SELECT * FROM e WHERE x LIKE 'a%c'
----
abc

query T
SELECT * FROM e WHERE x NOT LIKE 'a%c'
----
xyz

# Test that vectorized stats are collected correctly.
statement ok
SET experimental_vectorize = on

statement ok
SET distsql = on

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT a FROM a]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJyMkLFO9DAQhPv_KaKp9weHClxdew2HDjqUwmevDktObHk3iNMp744SU0CBRLnfzow9e8WUAz-6kQX2FT0GQqnZs0iuK2qCffiANYQ4lVlXPBB8rgx7hUZNDIsXd0p8ZBe43hoQAquLaYstNY6uXnYOhOfiJrHdfxAOs9pu14NwcurfWLo8a1nhHQg6l_QdGbMqhRN7je9RL7YzNw_3K1OXUqdxZNsZwbAQmuvrp6LuzLD9Qn9vc2QpeRL-UeS3ZLMMBA5nbheTPFfPTzX77Zk2HjbfBgKLtm3fhv3UVsuw_PsMAAD__9Tug2M=

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT c.a FROM c JOIN d ON d.b = c.b]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJykkj9P8zAQxvf3U1jP7BeSjp6yFiGKChvK4DqnYkhty3dBrap8d5S4Q4vEPzH6ufvd3U_yESF2dGd3xDBPqNFqpBwdMcc8RaVh2e1hKg0f0iBT3Gq4mAnmCPHSEwwe7aanNdmO8nUFjY7E-n4ey-QaB42HZAMb9R8aq0GMamrdLKCxseKeiVUcJE15DQ0ZUn8WTW1MPTnxb14ORlVX1bSFxfa9Er8joypGO2oU5HQli90STD3qn5vcRB9OIvWlSMp-Z_Oh6aBxG-PrkNRL9EHFYNRsctL6mxPtyQ3iY_jea_EbrzVxioHpwumzydXYalC3pfILOA7Z0X2Obl5TnquZm4OOWEq1Lo9lKKXpwHO4_hJefIDb8d97AAAA__8MFtxW

query T
SELECT url FROM [EXPLAIN ANALYZE SELECT c.a FROM c INNER MERGE JOIN d ON c.a = d.b]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJy8kkFr4zAQhe_7K8ycdlm1sZ2boJBrCm1K2lvxQZGmjkCRjDQqCcH_vcgqNAluQ0rpzXrSNzPvjfdgncJ7scEA_BkqaBh03kkMwfkk5QdztQVeMtC2i5TkhoF0HoHvgTQZBA5PYmVwiUKhn5TAQCEJbYayndcb4XczCQweO2EDL66AwSISL2YVMFgJkmsMhYvUJTFpFDtzINXAIKBBSfpV044X5XWZ2gQSxhSkN8iLMkDTM8jI-5iBRIvAq559z0o1bkWNWal_xUr9qZUPB9E6r9CjOpq-SeS5JyN53KFv8dZpi35SH-dh8IX-zqr__268btf586dWi1uUkbSz5zOZXrLeJYbO2YCn2YxWLlMgqFrMAQcXvcQH7-TQJh8XAzcICgPl2zof5na4Gv6_Q7i6AK5P4fpLeHoEl33T_3kLAAD__6RFR6I=

statement ok
RESET optimizer; RESET experimental_vectorize; RESET distsql

# Regression test for composite null handling
# https://github.com/cockroachdb/cockroach/issues/37358
statement ok
CREATE TABLE composite (d DECIMAL, INDEX d_idx (d))

statement ok
INSERT INTO composite VALUES (NULL), (1), (1.0), (1.00)

query T rowsort
SELECT d FROM composite@primary
----
NULL
1
1.0
1.00

query T rowsort
SELECT d FROM composite@d_idx
----
NULL
1
1.0
1.00

# Test unhandled type conversion. (Should fall back to distsql.)
query T
SELECT ARRAY(SELECT 1) FROM a LIMIT 1
----
{1}

# Regression test for decoding OID type.
statement ok
CREATE TABLE t38754 (a OID PRIMARY KEY)

statement ok
INSERT INTO t38754 VALUES (1)

query O
SELECT * FROM t38754
----
1

# Test integer division. (Should fall back due to decimal result.)
query T
SELECT a/b FROM a WHERE b = 2
----
0.5

# Test mixed types comparison. (Should also fall back.)
query I
SELECT b FROM a WHERE b < 0.5
----
0

# Test unsupported scrub (should fall back to distsql).
statement ok
CREATE TABLE t38626 (id int PRIMARY KEY, name STRING, CONSTRAINT abc CHECK (name > 'he'))

statement ok
INSERT INTO t38626 VALUES (1, 'hello')

statement ok
EXPERIMENTAL SCRUB TABLE t38626

# Regression test for issue with reading from system tables that have no
# sentinel keys.
query T
SELECT "hashedPassword" FROM system.users LIMIT 1
----
Â·

query ITI
SELECT * FROM system.namespace LIMIT 1
----
0  defaultdb  50

# Regression test for issue with fetching from unique indexes with embedded
# nulls.
statement ok
CREATE TABLE t38753 (x INT PRIMARY KEY, y INT, UNIQUE INDEX (y)); INSERT INTO t38753 VALUES (0, NULL)

query II
SELECT * FROM t38753 ORDER BY y;
----
0  NULL

# Regression test for #38752.
query IIBB
SELECT count(*), count(*) + 1, count(*) > 4, count(*) + 1 > 4 FROM b
----
4  5  false  true

query I
SELECT * FROM (SELECT count(*) AS x FROM b) WHERE x > 0;
----
4

# Regression test for #38908
statement ok
CREATE TABLE t38908 (x INT)

statement ok
INSERT INTO t38908 VALUES (1)

statement ok
SET experimental_vectorize=always

query I
SELECT * FROM t38908 WHERE x IN (1, 2)
----
1

statement ok
RESET experimental_vectorize

# Test that an aggregate with no aggregate functions is handled correctly.
query III
SELECT 0, 1 + 2, 3 * 4 FROM a HAVING true
----
0 3 12

# Testing some builtin functions.
statement ok
CREATE TABLE builtin_test (x STRING, y INT)

statement ok
INSERT INTO builtin_test VALUES ('Hello', 3), ('There', 2)

query T
SELECT substring(x, 1, y) FROM builtin_test
----
Hel
Th

query T
SELECT substring(x, 1, abs(y)) FROM builtin_test
----
Hel
Th

query I
SELECT abs(y) FROM builtin_test
----
3
2

statement ok
CREATE TABLE extract_test (x DATE)

statement ok
INSERT INTO extract_test VALUES ('2017-01-01')

query I
SELECT EXTRACT(YEAR FROM x) FROM extract_test
----
2017

# Regression test for #38937
statement ok
CREATE TABLE t38937 (_int2) AS SELECT 1::INT2

query I
SELECT sum_int(_int2) FROM t38937
----
1

# Regression tests for #38959

statement ok
CREATE TABLE t38959 (a INT PRIMARY KEY, b INT, c INT, d INT, INDEX b_idx (b) STORING (c, d), UNIQUE INDEX c_idx (c) STORING (b, d))

statement ok
INSERT INTO t38959 VALUES (1, 2, 3, 4)

statement ok
SET tracing=on,kv,results

query IIII
SELECT * FROM t38959@c_idx
----
1 2 3 4

statement ok
SET tracing=off

statement ok
CREATE TABLE t38959_2 (x INT PRIMARY KEY, y INT, z FLOAT, INDEX xy (x, y), INDEX zyx (z, y, x), FAMILY (x), FAMILY (y), FAMILY (z))

statement ok
INSERT INTO t38959_2 VALUES (1, 2, 3.0), (4, 5, 6.0), (7, NULL, 8.0)

statement ok
SET tracing=on,kv,results

query I
SELECT min(x) FROM t38959_2 WHERE (y, z) = (2, 3.0)
----
1

statement ok
SET tracing=off
