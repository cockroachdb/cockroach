# LogicTest: 5node

# This family of test validates an optimization for scanning indexes via
# crdb_internal.scan which will modify these queries to use DistSQL processing.
subtest query-indexes

statement ok
CREATE TABLE q1(val int primary key, n varchar(25), FAMILY "primary" (val, n));

let $q_id
SELECT id FROM system.namespace WHERE name = 'q1';

query TTT
SELECT * FROM crdb_internal.scan(crdb_internal.index_span($q_id,1));
----

query TTT
SELECT * FROM crdb_internal.scan(crdb_internal.table_span($q_id));
----

statement ok
INSERT INTO q1 VALUES (1, 'cat'),(2, 'cow'),(3, 'mouse'),(4, 'lion'),(5, 'tiger'),(6, 'wolf');

statement ok
CREATE INDEX i1 on q1(val, n)

query I
SELECT count(*) FROM crdb_internal.scan(crdb_internal.index_span($q_id,1));
----
6

query I
SELECT count(*)  FROM crdb_internal.scan(crdb_internal.index_span($q_id,2));
----
6

query I
SELECT count(*) FROM crdb_internal.scan(crdb_internal.table_span($q_id));
----
12


query TT
SELECT crdb_internal.pretty_key(key, 0), encode(value, 'hex') FROM crdb_internal.scan(crdb_internal.table_span($q_id));
----
/106/1/1/0          56f874340a2603636174
/106/1/2/0          dffd0fe30a2603636f77
/106/1/3/0          18d02d720a26056d6f757365
/106/1/4/0          5e1bbc380a26046c696f6e
/106/1/5/0          ddbcb0140a26057469676572
/106/1/6/0          d68ee3630a2604776f6c66
/106/2/1/"cat"/0    0000000003
/106/2/2/"cow"/0    0000000003
/106/2/3/"mouse"/0  0000000003
/106/2/4/"lion"/0   0000000003
/106/2/5/"tiger"/0  0000000003
/106/2/6/"wolf"/0   0000000003

query TT
SELECT crdb_internal.pretty_key(key, 0),  encode(value, 'hex') FROM crdb_internal.scan(crdb_internal.index_span($q_id, 1));
----
/106/1/1/0  56f874340a2603636174
/106/1/2/0  dffd0fe30a2603636f77
/106/1/3/0  18d02d720a26056d6f757365
/106/1/4/0  5e1bbc380a26046c696f6e
/106/1/5/0  ddbcb0140a26057469676572
/106/1/6/0  d68ee3630a2604776f6c66
