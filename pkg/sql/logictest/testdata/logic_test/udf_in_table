statement ok
CREATE FUNCTION f1() RETURNS INT IMMUTABLE LANGUAGE SQL AS $$ SELECT 1 $$;

statement ok
CREATE VIEW v_col_fn_ids AS
SELECT
id,
(json_array_elements(
  crdb_internal.pb_to_json(
    'cockroach.sql.sqlbase.Descriptor',
    descriptor,
    false
  )->'table'->'columns'
)->'id')::INT as col_id,
json_array_elements(
  crdb_internal.pb_to_json(
    'cockroach.sql.sqlbase.Descriptor',
    descriptor,
    false
  )->'table'->'columns'
)->'defaultExpr' as default_expr,
json_array_elements(
  crdb_internal.pb_to_json(
    'cockroach.sql.sqlbase.Descriptor',
    descriptor,
    false
  )->'table'->'columns'
)->'onUpdateExpr' as on_update_expr,
json_array_elements(
  crdb_internal.pb_to_json(
    'cockroach.sql.sqlbase.Descriptor',
    descriptor,
    false
  )->'table'->'columns'
)->'computeExpr' as compute_expr,
json_array_elements(
  crdb_internal.pb_to_json(
    'cockroach.sql.sqlbase.Descriptor',
    descriptor,
    false
  )->'table'->'columns'
)->'usesFunctionIds' as uses_fn_ids
FROM system.descriptor

statement ok
CREATE FUNCTION get_col_fn_ids(table_id INT) RETURNS SETOF v_col_fn_ids
LANGUAGE SQL
AS $$
  SELECT *
  FROM v_col_fn_ids
  WHERE id = table_id
$$;

statement ok
CREATE VIEW v_fn_depended_on_by AS
SELECT
     id,
     jsonb_pretty(
       crdb_internal.pb_to_json(
         'cockroach.sql.sqlbase.Descriptor',
         descriptor,
         false
       )->'function'->'dependedOnBy'
     ) as depended_on_by
FROM system.descriptor

statement ok
CREATE FUNCTION get_fn_depended_on_by(function_id INT) RETURNS STRING
LANGUAGE SQL
AS $$
  SELECT depended_on_by
  FROM v_fn_depended_on_by
  WHERE id = function_id
$$;

# Make sure that column DEFAULT and ON UPDATE expressions are properly serialized
# and deserialized.
skipif config local-mixed-25.2 
statement ok
CREATE TABLE t1(
  a INT PRIMARY KEY,
  b INT DEFAULT f1(),
  c INT,
  d INT NULL ON UPDATE public.f1(),
  e INT,
  FAMILY fam_0 (a, b, c, d, e)
);

onlyif config local-mixed-25.2
statement ok
CREATE TABLE t1(
  a INT PRIMARY KEY,
  b INT DEFAULT f1(),
  c INT,
  d INT NULL,
  e INT,
  FAMILY fam_0 (a, b, c, d, e)
);

skipif config local-mixed-25.2 
let $tbl_id
SELECT id FROM system.namespace WHERE name = 't1';

skipif config local-mixed-25.2 
query IITTTT colnames
SELECT * FROM get_col_fn_ids($tbl_id) ORDER BY 1, 2;
----
id   col_id  default_expr           on_update_expr         compute_expr  uses_fn_ids
111  1       NULL                   NULL                   NULL          NULL
111  2       "[FUNCTION 100106]()"  NULL                   NULL          [106]
111  3       NULL                   NULL                   NULL          NULL
111  4       NULL                   "[FUNCTION 100106]()"  NULL          [106]
111  5       NULL                   NULL                   NULL          NULL

skipif config schema-locked-disabled
query T
SELECT create_statement FROM [SHOW CREATE TABLE t1];
----
CREATE TABLE public.t1 (
  a INT8 NOT NULL,
  b INT8 NULL DEFAULT public.f1(),
  c INT8 NULL,
  d INT8 NULL ON UPDATE public.f1(),
  e INT8 NULL,
  CONSTRAINT t1_pkey PRIMARY KEY (a ASC),
  FAMILY fam_0 (a, b, c, d, e)
) WITH (schema_locked = true);

onlyif config local-schema-locked
query T
SELECT create_statement FROM [SHOW CREATE TABLE t1];
----
CREATE TABLE public.t1 (
  a INT8 NOT NULL,
  b INT8 NULL DEFAULT public.f1(),
  c INT8 NULL,
  d INT8 NULL ON UPDATE public.f1(),
  e INT8 NULL,
  CONSTRAINT t1_pkey PRIMARY KEY (a ASC),
  FAMILY fam_0 (a, b, c, d, e)
);

# Make sure that back references are tracked properly.
let $fn_id
SELECT oid::int - 100000 FROM pg_catalog.pg_proc WHERE proname = 'f1';

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            2,
            4
        ],
        "id": 111
    }
]

# Make sure SET DEFAULT sets cross references properly.
skipif config local-mixed-25.2 
statement ok
ALTER TABLE t1 ALTER COLUMN c SET DEFAULT f1();

skipif config local-mixed-25.2 
query IITTTT colnames
SELECT * FROM get_col_fn_ids($tbl_id) ORDER BY 1, 2;
----
id   col_id  default_expr           on_update_expr         compute_expr  uses_fn_ids
111  1       NULL                   NULL                   NULL          NULL
111  2       "[FUNCTION 100106]()"  NULL                   NULL          [106]
111  3       "[FUNCTION 100106]()"  NULL                   NULL          [106]
111  4       NULL                   "[FUNCTION 100106]()"  NULL          [106]
111  5       NULL                   NULL                   NULL          NULL

skipif config schema-locked-disabled
query T
SELECT create_statement FROM [SHOW CREATE TABLE t1];
----
CREATE TABLE public.t1 (
  a INT8 NOT NULL,
  b INT8 NULL DEFAULT public.f1(),
  c INT8 NULL DEFAULT public.f1(),
  d INT8 NULL ON UPDATE public.f1(),
  e INT8 NULL,
  CONSTRAINT t1_pkey PRIMARY KEY (a ASC),
  FAMILY fam_0 (a, b, c, d, e)
) WITH (schema_locked = true);

onlyif config local-legacy-schema-changer
query T
SELECT create_statement FROM [SHOW CREATE TABLE t1];
----
CREATE TABLE public.t1 (
  a INT8 NOT NULL,
  b INT8 NULL DEFAULT public.f1(),
  c INT8 NULL DEFAULT public.f1(),
  d INT8 NULL ON UPDATE public.f1(),
  e INT8 NULL,
  CONSTRAINT t1_pkey PRIMARY KEY (a ASC),
  FAMILY fam_0 (a, b, c, d, e)
);

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            2,
            3,
            4
        ],
        "id": 111
    }
]

# Make sure SET ON UPDATE sets cross references properly.
skipif config local-mixed-25.2 
statement ok
ALTER TABLE t1 ALTER COLUMN e SET ON UPDATE f1();

skipif config local-mixed-25.2 
query IITTTT colnames
SELECT * FROM get_col_fn_ids($tbl_id) ORDER BY 1, 2;
----
id   col_id  default_expr           on_update_expr         compute_expr  uses_fn_ids
111  1       NULL                   NULL                   NULL          NULL
111  2       "[FUNCTION 100106]()"  NULL                   NULL          [106]
111  3       "[FUNCTION 100106]()"  NULL                   NULL          [106]
111  4       NULL                   "[FUNCTION 100106]()"  NULL          [106]
111  5       NULL                   "[FUNCTION 100106]()"  NULL          [106]

skipif config schema-locked-disabled
query T
SELECT create_statement FROM [SHOW CREATE TABLE t1];
----
CREATE TABLE public.t1 (
  a INT8 NOT NULL,
  b INT8 NULL DEFAULT public.f1(),
  c INT8 NULL DEFAULT public.f1(),
  d INT8 NULL ON UPDATE public.f1(),
  e INT8 NULL ON UPDATE public.f1(),
  CONSTRAINT t1_pkey PRIMARY KEY (a ASC),
  FAMILY fam_0 (a, b, c, d, e)
) WITH (schema_locked = true);

# Make sure cross references are properly removed with SET DEFAULT.
skipif config local-mixed-25.2 
statement ok
ALTER TABLE t1 ALTER COLUMN c SET DEFAULT NULL;

skipif config local-mixed-25.2 
query IITTTT colnames
SELECT * FROM get_col_fn_ids($tbl_id) ORDER BY 1, 2;
----
id   col_id  default_expr           on_update_expr         compute_expr  uses_fn_ids
111  1       NULL                   NULL                   NULL          NULL
111  2       "[FUNCTION 100106]()"  NULL                   NULL          [106]
111  3       NULL                   NULL                   NULL          NULL
111  4       NULL                   "[FUNCTION 100106]()"  NULL          [106]
111  5       NULL                   "[FUNCTION 100106]()"  NULL          [106]

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            2,
            4,
            5
        ],
        "id": 111
    }
]

# Make sure cross references are properly removed with SET ON UPDATE.
skipif config local-mixed-25.2 
statement ok
ALTER TABLE t1 ALTER COLUMN e SET ON UPDATE NULL;

skipif config local-mixed-25.2 
query IITTTT colnames
SELECT * FROM get_col_fn_ids($tbl_id) ORDER BY 1, 2;
----
id   col_id  default_expr           on_update_expr         compute_expr  uses_fn_ids
111  1       NULL                   NULL                   NULL          NULL
111  2       "[FUNCTION 100106]()"  NULL                   NULL          [106]
111  3       NULL                   NULL                   NULL          NULL
111  4       NULL                   "[FUNCTION 100106]()"  NULL          [106]
111  5       NULL                   "NULL"                 NULL          NULL

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            2,
            4
        ],
        "id": 111
    }
]

# Make sure cross references are properly removed with DROP DEFAULT.
skipif config local-mixed-25.2 
statement ok
ALTER TABLE t1 ALTER COLUMN b DROP DEFAULT;

skipif config local-mixed-25.2 
query IITTTT colnames
SELECT * FROM get_col_fn_ids($tbl_id) ORDER BY 1, 2;
----
id   col_id  default_expr  on_update_expr         compute_expr  uses_fn_ids
111  1       NULL          NULL                   NULL          NULL
111  2       NULL          NULL                   NULL          NULL
111  3       NULL          NULL                   NULL          NULL
111  4       NULL          "[FUNCTION 100106]()"  NULL          [106]
111  5       NULL          "NULL"                 NULL          NULL

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            4
        ],
        "id": 111
    }
]

# Make sure cross references are properly removed with DROP ON UPDATE.
skipif config local-mixed-25.2 
statement ok
ALTER TABLE t1 ALTER COLUMN d DROP ON UPDATE;

skipif config local-mixed-25.2 
query IITTTT colnames
SELECT * FROM get_col_fn_ids($tbl_id) ORDER BY 1, 2;
----
id   col_id  default_expr  on_update_expr  compute_expr  uses_fn_ids
111  1       NULL          NULL            NULL          NULL
111  2       NULL          NULL            NULL          NULL
111  3       NULL          NULL            NULL          NULL
111  4       NULL          NULL            NULL          NULL
111  5       NULL          "NULL"          NULL          NULL

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_id)
----
NULL

# Re-add references for the next test.
skipif config local-mixed-25.2 
statement ok
ALTER TABLE t1 ALTER COLUMN b SET DEFAULT f1();

skipif config local-mixed-25.2 
statement ok
ALTER TABLE t1 ALTER COLUMN d SET ON UPDATE f1();

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            2,
            4
        ],
        "id": 111
    }
]

# Make sure cross references are properly removed with DROP COLUMN.
skipif config local-mixed-25.2 
statement ok
ALTER TABLE t1 ALTER COLUMN c SET DEFAULT f1();

skipif config local-mixed-25.2 
query IITTTT colnames
SELECT * FROM get_col_fn_ids($tbl_id) ORDER BY 1, 2;
----
id   col_id  default_expr           on_update_expr         compute_expr  uses_fn_ids
111  1       NULL                   NULL                   NULL          NULL
111  2       "[FUNCTION 100106]()"  NULL                   NULL          [106]
111  3       "[FUNCTION 100106]()"  NULL                   NULL          [106]
111  4       NULL                   "[FUNCTION 100106]()"  NULL          [106]
111  5       NULL                   "NULL"                 NULL          NULL

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            2,
            3,
            4
        ],
        "id": 111
    }
]

skipif config local-mixed-25.2 
statement ok
ALTER TABLE t1 DROP COLUMN c;

skipif config local-mixed-25.2 
query IITTTT colnames
SELECT * FROM get_col_fn_ids($tbl_id) ORDER BY 1, 2;
----
id   col_id  default_expr           on_update_expr         compute_expr  uses_fn_ids
111  1       NULL                   NULL                   NULL          NULL
111  2       "[FUNCTION 100106]()"  NULL                   NULL          [106]
111  4       NULL                   "[FUNCTION 100106]()"  NULL          [106]
111  5       NULL                   "NULL"                 NULL          NULL

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            2,
            4
        ],
        "id": 111
    }
]

# Make sure adding a computed column, column with DEFAULT, and column with
# ON UPDATE updates function references.
skipif config local-mixed-25.2 
statement ok
ALTER TABLE t1 ADD COLUMN f int AS (f1()) VIRTUAL;

skipif config local-mixed-25.2 
statement ok
ALTER TABLE t1 ADD COLUMN g int DEFAULT (f1());

skipif config local-mixed-25.2 
statement ok
ALTER TABLE t1 ADD COLUMN h int ON UPDATE (f1());

skipif config local-mixed-25.2 
query IITTTT colnames
SELECT * FROM get_col_fn_ids($tbl_id) ORDER BY 1, 2;
----
id   col_id  default_expr           on_update_expr         compute_expr           uses_fn_ids
111  1       NULL                   NULL                   NULL                   NULL
111  2       "[FUNCTION 100106]()"  NULL                   NULL                   [106]
111  4       NULL                   "[FUNCTION 100106]()"  NULL                   [106]
111  5       NULL                   "NULL"                 NULL                   NULL
111  6       NULL                   NULL                   "[FUNCTION 100106]()"  [106]
111  7       "[FUNCTION 100106]()"  NULL                   NULL                   [106]
111  8       NULL                   "[FUNCTION 100106]()"  NULL                   [106]

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            2,
            4,
            6,
            7,
            8
        ],
        "id": 111
    }
]

# Make sure that cross references are properly remove with DROP TABLE.
skipif config local-mixed-25.2 
statement ok
ALTER TABLE t1 ALTER COLUMN b SET DEFAULT f1();

skipif config local-mixed-25.2 
query IITTTT colnames
SELECT * FROM get_col_fn_ids($tbl_id) ORDER BY 1, 2;
----
id   col_id  default_expr           on_update_expr         compute_expr           uses_fn_ids
111  1       NULL                   NULL                   NULL                   NULL
111  2       "[FUNCTION 100106]()"  NULL                   NULL                   [106]
111  4       NULL                   "[FUNCTION 100106]()"  NULL                   [106]
111  5       NULL                   "NULL"                 NULL                   NULL
111  6       NULL                   NULL                   "[FUNCTION 100106]()"  [106]
111  7       "[FUNCTION 100106]()"  NULL                   NULL                   [106]
111  8       NULL                   "[FUNCTION 100106]()"  NULL                   [106]

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            2,
            4,
            6,
            7,
            8
        ],
        "id": 111
    }
]

statement ok
DROP TABLE t1;

query T
SELECT get_fn_depended_on_by($fn_id)
----
NULL

# Make sure function used by multiple tables can handle cross-references
# properly.

statement ok
CREATE TABLE t1(
  a INT PRIMARY KEY,
  b INT DEFAULT f1(),
  FAMILY fam_0 (a, b)
);
CREATE TABLE t2(
  a INT PRIMARY KEY,
  b INT DEFAULT f1(),
  FAMILY fam_0 (a, b)
);

query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            2
        ],
        "id": 112
    },
    {
        "columnIds": [
            2
        ],
        "id": 113
    }
]

statement ok
DROP TABLE t1;
DROp TABLE t2;

query T
SELECT get_fn_depended_on_by($fn_id)
----
NULL

# Make sure table uses multiple functions can handle cross-references properly.
statement ok
CREATE FUNCTION f2() RETURNS INT LANGUAGE SQL AS $$ SELECT 1 $$;

let $fn_id_2
SELECT oid::int - 100000 FROM pg_catalog.pg_proc WHERE proname = 'f2';

skipif config local-mixed-25.2 
statement ok
CREATE TABLE t1(
  a INT PRIMARY KEY,
  b INT DEFAULT f1(),
  c INT ON UPDATE f2(),
  FAMILY fam_0 (a, b, c)
);

onlyif config local-mixed-25.2
statement ok
CREATE TABLE t1(
  a INT PRIMARY KEY,
  b INT DEFAULT f1(),
  c INT,
  FAMILY fam_0 (a, b, c)
);

query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            2
        ],
        "id": 115
    }
]

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_id_2)
----
[
    {
        "columnIds": [
            3
        ],
        "id": 115
    }
]

statement ok
DROP TABLE t1;

query T
SELECT get_fn_depended_on_by($fn_id)
----
NULL

query T
SELECT get_fn_depended_on_by($fn_id_2)
----
NULL

# Make sure function cannot be dropped if used in constraints
statement ok
CREATE TABLE t1(
  a INT PRIMARY KEY,
  b INT DEFAULT f1(),
  FAMILY fam_0 (a, b)
);
CREATE TABLE t2(
  a INT PRIMARY KEY,
  b INT DEFAULT f1(),
  FAMILY fam_0 (a, b)
);

statement error pgcode 2BP01 cannot drop function "f1" because other objects \(\[test.public.t1, test.public.t2\]\) still depend on it
DROP FUNCTION f1;

statement ok
ALTER TABLE t1 ALTER COLUMN b SET DEFAULT NULL;
ALTER TABLE t2 ALTER COLUMN b SET DEFAULT NULL;

statement ok
DROP FUNCTION f1;
DROP TABLE t1;
DROP TABLE t2;

# Make sure that CREATE FUNCTION and CREATE TABLE works in one txn.
statement ok
BEGIN;
CREATE FUNCTION f1() RETURNS INT LANGUAGE SQL AS $$ SELECT 1 $$;
CREATE TABLE t1(
  a INT PRIMARY KEY,
  b INT DEFAULT f1(),
  FAMILY fam_0 (a, b)
);
END;

let $tbl_id
SELECT id FROM system.namespace WHERE name = 't1';

let $fn_id
SELECT oid::int - 100000 FROM pg_catalog.pg_proc WHERE proname = 'f1';

query IITTTT colnames
SELECT * FROM get_col_fn_ids($tbl_id) ORDER BY 1, 2;
----
id   col_id  default_expr           on_update_expr  compute_expr  uses_fn_ids
119  1       NULL                   NULL            NULL          NULL
119  2       "[FUNCTION 100118]()"  NULL            NULL          [118]

query T
SELECT get_fn_depended_on_by($fn_id);
----
[
    {
        "columnIds": [
            2
        ],
        "id": 119
    }
]

statement ok
BEGIN;
DROP TABLE t1;
DROP FUNCTION f1;
END;

# Make sure that CREATE FUNCTION and SET DEFAULT works in one txn.
statement ok
CREATE TABLE t1 (
  a INT PRIMARY KEY,
  b INT,
  FAMILY fam_0 (a, b)
);

statement ok
CREATE FUNCTION f1() RETURNS INT LANGUAGE SQL AS $$ SELECT 1 $$;
ALTER TABLE t1 ALTER COLUMN b SET DEFAULT f1();

let $tbl_id
SELECT id FROM system.namespace WHERE name = 't1';

let $fn_id
SELECT oid::int - 100000 FROM pg_catalog.pg_proc WHERE proname = 'f1';

query IITTTT colnames
SELECT * FROM get_col_fn_ids($tbl_id) ORDER BY 1, 2;
----
id   col_id  default_expr           on_update_expr  compute_expr  uses_fn_ids
120  1       NULL                   NULL            NULL          NULL
120  2       "[FUNCTION 100121]()"  NULL            NULL          [121]

query T
SELECT get_fn_depended_on_by($fn_id);
----
[
    {
        "columnIds": [
            2
        ],
        "id": 120
    }
]

skipif config local-legacy-schema-changer
statement ok
SET use_declarative_schema_changer = 'unsafe_always';

statement ok
BEGIN;
ALTER TABLE t1 DROP COLUMN b;
DROP FUNCTION f1;
END;

skipif config local-legacy-schema-changer
statement ok
SET use_declarative_schema_changer = 'on';

# Make sure column DEFAULT works properly with insert.
statement ok
DROP TABLE t1;

statement ok
CREATE FUNCTION f1() RETURNS INT LANGUAGE SQL AS $$ SELECT 1 $$;
CREATE TABLE t1 (
  a INT PRIMARY KEY,
  b INT DEFAULT f1(),
  FAMILY fam_0 (a, b)
);

statement ok
INSERT INTO t1 VALUES (1), (2)

query II
SELECT * FROM t1 ORDER BY a;
----
1  1
2  1

# Make sure that renaming a function is fine.
statement ok
ALTER FUNCTION f1() RENAME TO f1_new;

skipif config schema-locked-disabled
query T
SELECT create_statement FROM [SHOW CREATE TABLE t1]
----
CREATE TABLE public.t1 (
  a INT8 NOT NULL,
  b INT8 NULL DEFAULT public.f1_new(),
  CONSTRAINT t1_pkey PRIMARY KEY (a ASC),
  FAMILY fam_0 (a, b)
) WITH (schema_locked = true);

onlyif config schema-locked-disabled
query T
SELECT create_statement FROM [SHOW CREATE TABLE t1]
----
CREATE TABLE public.t1 (
  a INT8 NOT NULL,
  b INT8 NULL DEFAULT public.f1_new(),
  CONSTRAINT t1_pkey PRIMARY KEY (a ASC),
  FAMILY fam_0 (a, b)
);

statement ok
INSERT INTO t1 VALUES (3)

query II
SELECT * FROM t1 ORDER BY a;
----
1  1
2  1
3  1

# Test UDFs in computed columns.
statement ok
CREATE FUNCTION f_compute(x INT) RETURNS INT LANGUAGE SQL AS $$ SELECT x * 2 $$ IMMUTABLE;

skipif config local-mixed-25.2 
statement ok
CREATE TABLE t_computed(
  a INT PRIMARY KEY,
  b INT,
  c INT AS (f_compute(a)) STORED,
  d INT AS (f_compute(b)) VIRTUAL
);

skipif config local-mixed-25.2 
let $tbl_computed_id
SELECT id FROM system.namespace WHERE name = 't_computed';

# Check that computed column expressions track function usage.
skipif config local-mixed-25.2 
query IITTTT colnames
SELECT * FROM get_col_fn_ids($tbl_computed_id) ORDER BY 1, 2;
----
id   col_id  default_expr  on_update_expr  compute_expr            uses_fn_ids
125  1       NULL          NULL            NULL                    NULL
125  2       NULL          NULL            NULL                    NULL
125  3       NULL          NULL            "[FUNCTION 100124](a)"  [124]
125  4       NULL          NULL            "[FUNCTION 100124](b)"  [124]

# Check function back references include computed columns.
skipif config local-mixed-25.2 
let $fn_compute_id
SELECT oid::int - 100000 FROM pg_catalog.pg_proc WHERE proname = 'f_compute';

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_compute_id)
----
[
    {
        "columnIds": [
            3,
            4
        ],
        "id": 125
    }
]

# Test dropping computed column removes function references.
skipif config local-mixed-25.2 
statement ok
ALTER TABLE t_computed DROP COLUMN c;

skipif config local-mixed-25.2 
query IITTTT colnames
SELECT * FROM get_col_fn_ids($tbl_computed_id) ORDER BY 1, 2;
----
id   col_id  default_expr  on_update_expr  compute_expr            uses_fn_ids
125  1       NULL          NULL            NULL                    NULL
125  2       NULL          NULL            NULL                    NULL
125  4       NULL          NULL            "[FUNCTION 100124](b)"  [124]

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_compute_id)
----
[
    {
        "columnIds": [
            4
        ],
        "id": 125
    }
]

# Test dropping table removes all function references.
skipif config local-mixed-25.2 
statement ok
DROP TABLE t_computed;

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_compute_id)
----
NULL

# Test computed column with multiple function references.
skipif config local-mixed-25.2 
statement ok
CREATE FUNCTION f_add(x INT, y INT) RETURNS INT LANGUAGE SQL AS $$ SELECT x + y $$ IMMUTABLE;

skipif config local-mixed-25.2 
statement ok
CREATE TABLE t_multi_fn(
  a INT PRIMARY KEY,
  b INT,
  c INT AS (f_compute(a) + f_add(a, b)) STORED
);

# Verify we can use the table.
skipif config local-mixed-25.2 
statement ok
INSERT INTO t_multi_fn (a, b) VALUES (1, 2), (3, 4), (5, 6);

skipif config local-mixed-25.2 
query III
SELECT * FROM t_multi_fn ORDER BY a;
----
1  2  5
3  4  13
5  6  21

skipif config local-mixed-25.2 
let $tbl_multi_fn_id
SELECT id FROM system.namespace WHERE name = 't_multi_fn';

skipif config local-mixed-25.2 
let $fn_add_id
SELECT oid::int - 100000 FROM pg_catalog.pg_proc WHERE proname = 'f_add';

# Check that computed column tracks multiple function references.
skipif config local-mixed-25.2 
query IITTTT colnames
SELECT * FROM get_col_fn_ids($tbl_multi_fn_id) ORDER BY 1, 2;
----
id   col_id  default_expr  on_update_expr  compute_expr                                      uses_fn_ids
127  1       NULL          NULL            NULL                                              NULL
127  2       NULL          NULL            NULL                                              NULL
127  3       NULL          NULL            "[FUNCTION 100124](a) + [FUNCTION 100126](a, b)"  [124, 126]

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_compute_id)
----
[
    {
        "columnIds": [
            3
        ],
        "id": 127
    }
]

skipif config local-mixed-25.2 
query T
SELECT get_fn_depended_on_by($fn_add_id)
----
[
    {
        "columnIds": [
            3
        ],
        "id": 127
    }
]

skipif config local-mixed-25.2 
statement ok
DROP TABLE t_multi_fn;

# Make sure dependency circle is not allowed.
statement ok
CREATE TABLE t_circle(a INT PRIMARY KEY, b INT);
CREATE FUNCTION f_circle() RETURNS INT LANGUAGE SQL AS $$ SELECT a FROM t_circle $$;

statement error pgcode 42P13 pq: .*cannot add dependency from descriptor \d+ to function f_circle \(\d+\) because there will be a dependency cycle.*
ALTER TABLE t_circle ALTER COLUMN b SET DEFAULT f_circle();
