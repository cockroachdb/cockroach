# TestConfigs: default distsql distsql-metadata

statement ok
CREATE TABLE kv(k INT PRIMARY KEY, v INT); CREATE INDEX foo ON kv(v DESC)

query TTTTT
EXPLAIN (VERBOSE) SELECT v FROM kv ORDER BY PRIMARY KEY kv
----
nosort          ·         ·                 (v)     ·
 │              order     +k                ·       ·
 └── render     ·         ·                 (v, k)  k!=NULL; key(k); +k
      │         render 0  test.public.kv.v  ·       ·
      │         render 1  test.public.kv.k  ·       ·
      └── scan  ·         ·                 (k, v)  k!=NULL; key(k); +k
·               table     kv@primary        ·       ·
·               spans     ALL               ·       ·

query TTTTT
EXPLAIN (VERBOSE) SELECT v FROM kv ORDER BY PRIMARY KEY kv ASC
----
nosort          ·         ·                 (v)     ·
 │              order     +k                ·       ·
 └── render     ·         ·                 (v, k)  k!=NULL; key(k); +k
      │         render 0  test.public.kv.v  ·       ·
      │         render 1  test.public.kv.k  ·       ·
      └── scan  ·         ·                 (k, v)  k!=NULL; key(k); +k
·               table     kv@primary        ·       ·
·               spans     ALL               ·       ·

query TTTTT
EXPLAIN (VERBOSE) SELECT v FROM kv ORDER BY PRIMARY KEY kv DESC
----
nosort             ·         ·                 (v)     ·
 │                 order     -k                ·       ·
 └── render        ·         ·                 (v, k)  k!=NULL; key(k); -k
      │            render 0  test.public.kv.v  ·       ·
      │            render 1  test.public.kv.k  ·       ·
      └── revscan  ·         ·                 (k, v)  k!=NULL; key(k); -k
·                  table     kv@primary        ·       ·
·                  spans     ALL               ·       ·

query TTTTT
EXPLAIN (VERBOSE) SELECT k FROM kv ORDER BY v, PRIMARY KEY kv, v-2
----
sort               ·         ·                     (k)              k!=NULL
 │                 order     +v,+k,+"v - 2"        ·                ·
 └── render        ·         ·                     (k, v, "v - 2")  k!=NULL; weak-key(k,v); +v
      │            render 0  test.public.kv.k      ·                ·
      │            render 1  test.public.kv.v      ·                ·
      │            render 2  test.public.kv.v - 2  ·                ·
      └── revscan  ·         ·                     (k, v)           k!=NULL; weak-key(k,v); +v
·                  table     kv@foo                ·                ·
·                  spans     ALL                   ·                ·

query TTTTT
EXPLAIN (VERBOSE) SELECT k FROM kv ORDER BY INDEX kv@foo
----
nosort     ·      ·       (k)     k!=NULL
 │         order  -v      ·       ·
 └── scan  ·      ·       (k, v)  k!=NULL; weak-key(k,v); -v
·          table  kv@foo  ·       ·
·          spans  ALL     ·       ·

query TTTTT
EXPLAIN (VERBOSE) SELECT k FROM kv ORDER BY INDEX kv@foo ASC
----
nosort     ·      ·       (k)     k!=NULL
 │         order  -v      ·       ·
 └── scan  ·      ·       (k, v)  k!=NULL; weak-key(k,v); -v
·          table  kv@foo  ·       ·
·          spans  ALL     ·       ·

query TTTTT
EXPLAIN (VERBOSE) SELECT k FROM kv ORDER BY INDEX kv@foo DESC
----
nosort        ·      ·       (k)     k!=NULL
 │            order  +v      ·       ·
 └── revscan  ·      ·       (k, v)  k!=NULL; weak-key(k,v); +v
·             table  kv@foo  ·       ·
·             spans  ALL     ·       ·

query TTTTT
EXPLAIN (VERBOSE) SELECT k FROM kv ORDER BY INDEX kv@foo, k
----
nosort     ·      ·       (k)     k!=NULL
 │         order  -v,+k   ·       ·
 └── scan  ·      ·       (k, v)  k!=NULL; weak-key(k,v); -v,+k
·          table  kv@foo  ·       ·
·          spans  ALL     ·       ·

# Check the syntax can be used with joins.
#
# Note: an ORDER BY INDEX clause on the result of the join
# does not imply use of that index by the underlying scan.
#

query TTTTT
EXPLAIN (VERBOSE) SELECT k FROM kv JOIN (VALUES (1,2)) AS z(a,b) ON kv.k = z.a ORDER BY INDEX kv@foo
----
sort                   ·              ·                 (k)                             ·
 │                     order          -v                ·                               ·
 └── render            ·              ·                 (k, v)                          ·
      │                render 0       test.public.kv.k  ·                               ·
      │                render 1       test.public.kv.v  ·                               ·
      └── join         ·              ·                 (k, v, a[omitted], b[omitted])  ·
           │           type           inner             ·                               ·
           │           equality       (k) = (a)         ·                               ·
           ├── scan    ·              ·                 (k, v)                          k!=NULL; key(k)
           │           table          kv@primary        ·                               ·
           │           spans          ALL               ·                               ·
           └── values  ·              ·                 (column1, column2[omitted])     ·
·                      size           2 columns, 1 row  ·                               ·
·                      row 0, expr 0  1                 ·                               ·

query TTTTT
EXPLAIN (VERBOSE) SELECT k FROM kv a NATURAL JOIN kv ORDER BY INDEX kv@foo
----
sort                 ·               ·                 (k)                             k!=NULL; key(k)
 │                   order           -v                ·                               ·
 └── render          ·               ·                 (k, v)                          k!=NULL; v!=NULL; key(k)
      │              render 0        a.k               ·                               ·
      │              render 1        test.public.kv.v  ·                               ·
      └── join       ·               ·                 (k, v[omitted], k[omitted], v)  k=k; v=v; k!=NULL; v!=NULL; key(k)
           │         type            inner             ·                               ·
           │         equality        (k, v) = (k, v)   ·                               ·
           │         mergeJoinOrder  +"(k=k)"          ·                               ·
           ├── scan  ·               ·                 (k, v)                          k!=NULL; key(k); +k
           │         table           kv@primary        ·                               ·
           │         spans           ALL               ·                               ·
           └── scan  ·               ·                 (k, v)                          k!=NULL; key(k); +k
·                    table           kv@primary        ·                               ·
·                    spans           ALL               ·                               ·

# The underlying index can be forced manually, of course.
query TTTTT
EXPLAIN (VERBOSE) SELECT k FROM kv@foo a NATURAL JOIN kv@foo ORDER BY INDEX kv@foo
----
nosort               ·               ·                  (k)                             k!=NULL
 │                   order           -v                 ·                               ·
 └── render          ·               ·                  (k, v)                          k!=NULL; v!=NULL; -v
      │              render 0        a.k                ·                               ·
      │              render 1        test.public.kv.v   ·                               ·
      └── join       ·               ·                  (k, v[omitted], k[omitted], v)  k=k; v=v; k!=NULL; v!=NULL; -v
           │         type            inner              ·                               ·
           │         equality        (k, v) = (k, v)    ·                               ·
           │         mergeJoinOrder  -"(v=v)",+"(k=k)"  ·                               ·
           ├── scan  ·               ·                  (k, v)                          k!=NULL; weak-key(k,v); -v,+k
           │         table           kv@foo             ·                               ·
           │         spans           ALL                ·                               ·
           └── scan  ·               ·                  (k, v)                          k!=NULL; weak-key(k,v); -v,+k
·                    table           kv@foo             ·                               ·
·                    spans           ALL                ·                               ·

# Check the extended syntax cannot be used in case of renames.
statement error no data source matches prefix: test.public.kv
SELECT * FROM kv AS a, kv AS b ORDER BY PRIMARY KEY kv

# The INDEX/PRIMARY syntax can only be used when the data source
# is a real table, not an alias.
#
statement error no data source matches prefix: test.public.kv
SELECT k FROM (SELECT @1, @1 FROM generate_series(1,10)) AS kv(k,v) ORDER BY PRIMARY KEY kv

statement error no data source matches prefix: test.public.kv
CREATE TABLE unrelated(x INT); SELECT * FROM unrelated ORDER BY PRIMARY KEY kv

# Check that prepare doesn't crash on ORDER BY PK clauses #17312
statement ok
PREPARE a AS (TABLE kv) ORDER BY PRIMARY KEY kv

statement error ORDER BY INDEX in window definition is not supported
SELECT avg(k) OVER (ORDER BY PRIMARY KEY kv) FROM kv
