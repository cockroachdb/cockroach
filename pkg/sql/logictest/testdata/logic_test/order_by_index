# LogicTest: default distsql

statement ok
CREATE TABLE kv(k INT PRIMARY KEY, v INT); CREATE INDEX foo ON kv(v DESC)

query TITTTTT
EXPLAIN (METADATA) SELECT v FROM kv ORDER BY PRIMARY KEY kv
----
render               0  render  ·      ·           (v)     ·
 └── nosort          1  nosort  ·      ·           (v, k)  k!=NULL; key(k); +k
      │              1  ·       order  +k          ·       ·
      └── render     2  render  ·      ·           (v, k)  k!=NULL; key(k); +k
           └── scan  3  scan    ·      ·           (k, v)  k!=NULL; key(k); +k
·                    3  ·       table  kv@primary  ·       ·
·                    3  ·       spans  ALL         ·       ·

query TITTTTT
EXPLAIN (METADATA) SELECT v FROM kv ORDER BY PRIMARY KEY kv ASC
----
render               0  render  ·      ·           (v)     ·
 └── nosort          1  nosort  ·      ·           (v, k)  k!=NULL; key(k); +k
      │              1  ·       order  +k          ·       ·
      └── render     2  render  ·      ·           (v, k)  k!=NULL; key(k); +k
           └── scan  3  scan    ·      ·           (k, v)  k!=NULL; key(k); +k
·                    3  ·       table  kv@primary  ·       ·
·                    3  ·       spans  ALL         ·       ·

query TITTTTT
EXPLAIN (METADATA) SELECT v FROM kv ORDER BY PRIMARY KEY kv DESC
----
render                  0  render   ·      ·           (v)     ·
 └── nosort             1  nosort   ·      ·           (v, k)  k!=NULL; key(k); -k
      │                 1  ·        order  -k          ·       ·
      └── render        2  render   ·      ·           (v, k)  k!=NULL; key(k); -k
           └── revscan  3  revscan  ·      ·           (k, v)  k!=NULL; key(k); -k
·                       3  ·        table  kv@primary  ·       ·
·                       3  ·        spans  ALL         ·       ·

query TITTTTT
EXPLAIN (METADATA) SELECT k FROM kv ORDER BY v, PRIMARY KEY kv, v-2
----
render                  0  render   ·      ·               (k)              k!=NULL
 └── sort               1  sort     ·      ·               (k, v, "v - 2")  k!=NULL; weak-key(k,v); +v,+k,+"v - 2"
      │                 1  ·        order  +v,+k,+"v - 2"  ·                ·
      └── render        2  render   ·      ·               (k, v, "v - 2")  k!=NULL; weak-key(k,v); +v
           └── revscan  3  revscan  ·      ·               (k, v)           k!=NULL; weak-key(k,v); +v
·                       3  ·        table  kv@foo          ·                ·
·                       3  ·        spans  ALL             ·                ·

query TITTTTT
EXPLAIN (METADATA) SELECT k FROM kv ORDER BY INDEX kv@foo
----
render          0  render  ·      ·       (k)     k!=NULL
 └── nosort     1  nosort  ·      ·       (k, v)  k!=NULL; weak-key(k,v); -v
      │         1  ·       order  -v      ·       ·
      └── scan  2  scan    ·      ·       (k, v)  k!=NULL; weak-key(k,v); -v
·               2  ·       table  kv@foo  ·       ·
·               2  ·       spans  ALL     ·       ·

query TITTTTT
EXPLAIN (METADATA) SELECT k FROM kv ORDER BY INDEX kv@foo ASC
----
render          0  render  ·      ·       (k)     k!=NULL
 └── nosort     1  nosort  ·      ·       (k, v)  k!=NULL; weak-key(k,v); -v
      │         1  ·       order  -v      ·       ·
      └── scan  2  scan    ·      ·       (k, v)  k!=NULL; weak-key(k,v); -v
·               2  ·       table  kv@foo  ·       ·
·               2  ·       spans  ALL     ·       ·

query TITTTTT
EXPLAIN (METADATA) SELECT k FROM kv ORDER BY INDEX kv@foo DESC
----
render             0  render   ·      ·       (k)     k!=NULL
 └── nosort        1  nosort   ·      ·       (k, v)  k!=NULL; weak-key(k,v); +v
      │            1  ·        order  +v      ·       ·
      └── revscan  2  revscan  ·      ·       (k, v)  k!=NULL; weak-key(k,v); +v
·                  2  ·        table  kv@foo  ·       ·
·                  2  ·        spans  ALL     ·       ·

query TITTTTT
EXPLAIN (METADATA) SELECT k FROM kv ORDER BY INDEX kv@foo, k
----
render          0  render  ·      ·       (k)     k!=NULL
 └── nosort     1  nosort  ·      ·       (k, v)  k!=NULL; weak-key(k,v); -v,+k
      │         1  ·       order  -v,+k   ·       ·
      └── scan  2  scan    ·      ·       (k, v)  k!=NULL; weak-key(k,v); -v,+k
·               2  ·       table  kv@foo  ·       ·
·               2  ·       spans  ALL     ·       ·

# Check the syntax can be used with joins.
#
# Note: an ORDER BY INDEX clause on the result of the join
# does not imply use of that index by the underlying scan.
#

query TITTTTT
EXPLAIN(METADATA) SELECT k FROM kv JOIN (VALUES (1,2)) AS z(a,b) ON kv.k = z.a ORDER BY INDEX kv@foo
----
render                      0  render  ·         ·                 (k)                             ·
 └── sort                   1  sort    ·         ·                 (k, v)                          -v
      │                     1  ·       order     -v                ·                               ·
      └── render            2  render  ·         ·                 (k, v)                          ·
           └── join         3  join    ·         ·                 (k, v, a[omitted], b[omitted])  ·
                │           3  ·       type      inner             ·                               ·
                │           3  ·       equality  (k) = (a)         ·                               ·
                ├── scan    4  scan    ·         ·                 (k, v)                          k!=NULL; key(k)
                │           4  ·       table     kv@primary        ·                               ·
                │           4  ·       spans     ALL               ·                               ·
                └── values  4  values  ·         ·                 (column1, column2[omitted])     ·
·                           4  ·       size      2 columns, 1 row  ·                               ·

query TITTTTT
EXPLAIN(METADATA) SELECT k FROM kv a NATURAL JOIN kv ORDER BY INDEX kv@foo
----
render                    0  render  ·               ·                (k)                             k!=NULL; key(k)
 └── sort                 1  sort    ·               ·                (k, v)                          k!=NULL; v!=NULL; key(k); -v
      │                   1  ·       order           -v               ·                               ·
      └── render          2  render  ·               ·                (k, v)                          k!=NULL; v!=NULL; key(k)
           └── join       3  join    ·               ·                (k, v[omitted], k[omitted], v)  k=k; v=v; k!=NULL; v!=NULL; key(k)
                │         3  ·       type            inner            ·                               ·
                │         3  ·       equality        (k, v) = (k, v)  ·                               ·
                │         3  ·       mergeJoinOrder  +"(k=k)"         ·                               ·
                ├── scan  4  scan    ·               ·                (k, v)                          k!=NULL; key(k); +k
                │         4  ·       table           kv@primary       ·                               ·
                │         4  ·       spans           ALL              ·                               ·
                └── scan  4  scan    ·               ·                (k, v)                          k!=NULL; key(k); +k
·                         4  ·       table           kv@primary       ·                               ·
·                         4  ·       spans           ALL              ·                               ·

# The underlying index can be forced manually, of course.
query TITTTTT
EXPLAIN(METADATA) SELECT k FROM kv@foo a NATURAL JOIN kv@foo ORDER BY INDEX kv@foo
----
render                    0  render  ·               ·                  (k)                             k!=NULL
 └── nosort               1  nosort  ·               ·                  (k, v)                          k!=NULL; v!=NULL; -v
      │                   1  ·       order           -v                 ·                               ·
      └── render          2  render  ·               ·                  (k, v)                          k!=NULL; v!=NULL; -v
           └── join       3  join    ·               ·                  (k, v[omitted], k[omitted], v)  k=k; v=v; k!=NULL; v!=NULL; -v
                │         3  ·       type            inner              ·                               ·
                │         3  ·       equality        (k, v) = (k, v)    ·                               ·
                │         3  ·       mergeJoinOrder  -"(v=v)",+"(k=k)"  ·                               ·
                ├── scan  4  scan    ·               ·                  (k, v)                          k!=NULL; weak-key(k,v); -v,+k
                │         4  ·       table           kv@foo             ·                               ·
                │         4  ·       spans           ALL                ·                               ·
                └── scan  4  scan    ·               ·                  (k, v)                          k!=NULL; weak-key(k,v); -v,+k
·                         4  ·       table           kv@foo             ·                               ·
·                         4  ·       spans           ALL                ·                               ·

# Check the extended syntax cannot be used in case of renames.
statement error source name "kv" not found in FROM clause
SELECT * FROM kv AS a, kv AS b ORDER BY PRIMARY KEY kv

# The INDEX/PRIMARY syntax can only be used when the data source
# is a real table, not an alias.
#
statement error source name "kv" not found in FROM clause
SELECT k FROM (SELECT @1, @1 FROM generate_series(1,10)) AS kv(k,v) ORDER BY PRIMARY KEY kv

statement error source name "kv" not found in FROM clause
CREATE TABLE unrelated(x INT); SELECT * FROM unrelated ORDER BY PRIMARY KEY kv

# Check that prepare doesn't crash on ORDER BY PK clauses #17312
statement ok
PREPARE a AS (TABLE kv) ORDER BY PRIMARY KEY kv

statement error ORDER BY INDEX in window definition is not supported
SELECT avg(k) OVER (ORDER BY PRIMARY KEY kv) FROM kv
