# LogicTest: default distsql

statement ok
CREATE TABLE kv(k INT PRIMARY KEY, v INT); CREATE INDEX foo ON kv(v DESC)

query TITTTTT
EXPLAIN (METADATA) SELECT v FROM kv ORDER BY PRIMARY KEY kv
----
nosort          0  nosort  ·      ·           (v)  ·
 │              0  ·       order  +k          ·    ·
 └── render     1  render  ·      ·           (v)  ·
      └── scan  2  scan    ·      ·           (v)  ·
·               2  ·       table  kv@primary  ·    ·
·               2  ·       spans  ALL         ·    ·

query TITTTTT
EXPLAIN (METADATA) SELECT v FROM kv ORDER BY PRIMARY KEY kv ASC
----
nosort          0  nosort  ·      ·           (v)  ·
 │              0  ·       order  +k          ·    ·
 └── render     1  render  ·      ·           (v)  ·
      └── scan  2  scan    ·      ·           (v)  ·
·               2  ·       table  kv@primary  ·    ·
·               2  ·       spans  ALL         ·    ·

query TITTTTT
EXPLAIN (METADATA) SELECT v FROM kv ORDER BY PRIMARY KEY kv DESC
----
nosort             0  nosort   ·      ·           (v)  ·
 │                 0  ·        order  -k          ·    ·
 └── render        1  render   ·      ·           (v)  ·
      └── revscan  2  revscan  ·      ·           (v)  ·
·                  2  ·        table  kv@primary  ·    ·
·                  2  ·        spans  ALL         ·    ·

query TITTTTT
EXPLAIN (METADATA) SELECT k FROM kv ORDER BY v, PRIMARY KEY kv, v-2
----
sort               0  sort     ·      ·               (k)  k!=NULL
 │                 0  ·        order  +v,+k,+"v - 2"  ·    ·
 └── render        1  render   ·      ·               (k)  k!=NULL
      └── revscan  2  revscan  ·      ·               (k)  k!=NULL
·                  2  ·        table  kv@foo          ·    ·
·                  2  ·        spans  ALL             ·    ·

query TITTTTT
EXPLAIN (METADATA) SELECT k FROM kv ORDER BY INDEX kv@foo
----
nosort     0  nosort  ·      ·       (k)  k!=NULL
 │         0  ·       order  -v      ·    ·
 └── scan  1  scan    ·      ·       (k)  k!=NULL
·          1  ·       table  kv@foo  ·    ·
·          1  ·       spans  ALL     ·    ·

query TITTTTT
EXPLAIN (METADATA) SELECT k FROM kv ORDER BY INDEX kv@foo ASC
----
nosort     0  nosort  ·      ·       (k)  k!=NULL
 │         0  ·       order  -v      ·    ·
 └── scan  1  scan    ·      ·       (k)  k!=NULL
·          1  ·       table  kv@foo  ·    ·
·          1  ·       spans  ALL     ·    ·

query TITTTTT
EXPLAIN (METADATA) SELECT k FROM kv ORDER BY INDEX kv@foo DESC
----
nosort        0  nosort   ·      ·       (k)  k!=NULL
 │            0  ·        order  +v      ·    ·
 └── revscan  1  revscan  ·      ·       (k)  k!=NULL
·             1  ·        table  kv@foo  ·    ·
·             1  ·        spans  ALL     ·    ·

query TITTTTT
EXPLAIN (METADATA) SELECT k FROM kv ORDER BY INDEX kv@foo, k
----
nosort     0  nosort  ·      ·       (k)  k!=NULL
 │         0  ·       order  -v,+k   ·    ·
 └── scan  1  scan    ·      ·       (k)  k!=NULL
·          1  ·       table  kv@foo  ·    ·
·          1  ·       spans  ALL     ·    ·

# Check the syntax can be used with joins.
#
# Note: an ORDER BY INDEX clause on the result of the join
# does not imply use of that index by the underlying scan.
#

query TITTTTT
EXPLAIN(METADATA) SELECT k FROM kv JOIN (VALUES (1,2)) AS z(a,b) ON kv.k = z.a ORDER BY INDEX kv@foo
----
sort                   0  sort    ·         ·                 (k)  ·
 │                     0  ·       order     -v                ·    ·
 └── render            1  render  ·         ·                 (k)  ·
      └── join         2  join    ·         ·                 (k)  ·
           │           2  ·       type      inner             ·    ·
           │           2  ·       equality  (k) = (a)         ·    ·
           ├── scan    3  scan    ·         ·                 (k)  ·
           │           3  ·       table     kv@primary        ·    ·
           │           3  ·       spans     ALL               ·    ·
           └── values  3  values  ·         ·                 (k)  ·
·                      3  ·       size      2 columns, 1 row  ·    ·

query TITTTTT
EXPLAIN(METADATA) SELECT k FROM kv a NATURAL JOIN kv ORDER BY INDEX kv@foo
----
sort                 0  sort    ·               ·                (k)  k!=NULL; key(k)
 │                   0  ·       order           -v               ·    ·
 └── render          1  render  ·               ·                (k)  k!=NULL; key(k)
      └── join       2  join    ·               ·                (k)  k!=NULL; key(k)
           │         2  ·       type            inner            ·    ·
           │         2  ·       equality        (k, v) = (k, v)  ·    ·
           │         2  ·       mergeJoinOrder  +"(k=k)"         ·    ·
           ├── scan  3  scan    ·               ·                (k)  k!=NULL; key(k)
           │         3  ·       table           kv@primary       ·    ·
           │         3  ·       spans           ALL              ·    ·
           └── scan  3  scan    ·               ·                (k)  k!=NULL; key(k)
·                    3  ·       table           kv@primary       ·    ·
·                    3  ·       spans           ALL              ·    ·

# The underlying index can be forced manually, of course.
query TITTTTT
EXPLAIN(METADATA) SELECT k FROM kv@foo a NATURAL JOIN kv@foo ORDER BY INDEX kv@foo
----
nosort               0  nosort  ·               ·                  (k)  k!=NULL
 │                   0  ·       order           -v                 ·    ·
 └── render          1  render  ·               ·                  (k)  k!=NULL
      └── join       2  join    ·               ·                  (k)  k!=NULL
           │         2  ·       type            inner              ·    ·
           │         2  ·       equality        (k, v) = (k, v)    ·    ·
           │         2  ·       mergeJoinOrder  -"(v=v)",+"(k=k)"  ·    ·
           ├── scan  3  scan    ·               ·                  (k)  k!=NULL
           │         3  ·       table           kv@foo             ·    ·
           │         3  ·       spans           ALL                ·    ·
           └── scan  3  scan    ·               ·                  (k)  k!=NULL
·                    3  ·       table           kv@foo             ·    ·
·                    3  ·       spans           ALL                ·    ·

# Check the extended syntax cannot be used in case of renames.
statement error source name "kv" not found in FROM clause
SELECT * FROM kv AS a, kv AS b ORDER BY PRIMARY KEY kv

# The INDEX/PRIMARY syntax can only be used when the data source
# is a real table, not an alias.
#
statement error source name "kv" not found in FROM clause
SELECT k FROM (SELECT @1, @1 FROM generate_series(1,10)) AS kv(k,v) ORDER BY PRIMARY KEY kv

statement error source name "kv" not found in FROM clause
CREATE TABLE unrelated(x INT); SELECT * FROM unrelated ORDER BY PRIMARY KEY kv

# Check that prepare doesn't crash on ORDER BY PK clauses #17312
statement ok
PREPARE a AS (TABLE kv) ORDER BY PRIMARY KEY kv

statement error ORDER BY INDEX in window definition is not supported
SELECT avg(k) OVER (ORDER BY PRIMARY KEY kv) FROM kv
