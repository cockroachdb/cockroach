# LogicTest: default parallel-stmts distsql distsql-metadata distsql-disk

statement ok
CREATE TABLE t (
  a INT PRIMARY KEY,
  b INT,
  c BOOLEAN
)

statement ok
INSERT INTO t VALUES (1, 9, true), (2, 8, false), (3, 7, NULL)

query B
SELECT c FROM t ORDER BY c
----
NULL
false
true

# The following test ensures that the "rowsort" directive
# in TestLogic does its work properly.
query B rowsort
SELECT c FROM t ORDER BY c
----
false
NULL
true

query B
SELECT c FROM t ORDER BY c DESC
----
true
false
NULL

query II
SELECT a, b FROM t ORDER BY b
----
3 7
2 8
1 9

query TTT
EXPLAIN SELECT a, b FROM t ORDER BY b
----
sort            ·      ·
 │              order  +b
 └── render     ·      ·
      └── scan  ·      ·
·               table  t@primary
·               spans  ALL

query II
SELECT a, b FROM t ORDER BY b DESC
----
1 9
2 8
3 7

query TTT
EXPLAIN SELECT a, b FROM t ORDER BY b DESC
----
sort            ·      ·
 │              order  -b
 └── render     ·      ·
      └── scan  ·      ·
·               table  t@primary
·               spans  ALL

query I
SELECT a FROM t ORDER BY 1 DESC
----
3
2
1

query TTT
EXPLAIN SELECT a, b FROM t ORDER BY b LIMIT 2
----
limit                ·         ·
 └── sort            ·         ·
      │              order     +b
      │              strategy  top 2
      └── render     ·         ·
           └── scan  ·         ·
·                    table     t@primary
·                    spans     ALL

query II
SELECT a, b FROM t ORDER BY b DESC LIMIT 2
----
1 9
2 8

query TITTTTT
EXPLAIN (VERBOSE) SELECT DISTINCT c FROM t ORDER BY b LIMIT 2
----
limit                     0  limit     ·         ·                (c)                 weak-key(c)
 │                        0  ·         count     2                ·                   ·
 └── distinct             1  distinct  ·         ·                (c)                 weak-key(c)
      └── sort            2  sort      ·         ·                (c)                 ·
           │              2  ·         order     +b               ·                   ·
           │              2  ·         strategy  iterative        ·                   ·
           └── render     3  render    ·         ·                (c, b)              ·
                │         3  ·         render 0  test.public.t.c  ·                   ·
                │         3  ·         render 1  test.public.t.b  ·                   ·
                └── scan  4  scan      ·         ·                (a[omitted], b, c)  a!=NULL; key(a)
·                         4  ·         table     t@primary        ·                   ·
·                         4  ·         spans     ALL              ·                   ·

query B
SELECT DISTINCT c FROM t ORDER BY b DESC LIMIT 2
----
true
false

query II
SELECT a AS foo, b FROM t ORDER BY foo DESC
----
3 7
2 8
1 9

# Check that ambiguous references to renders are properly reported.
query error ORDER BY "foo" is ambiguous
SELECT a AS foo, b AS foo FROM t ORDER BY foo

# Check that no ambiguity is reported if the ORDER BY name refers
# to two or more equivalent renders (special case in SQL92).
query II
SELECT a AS foo, (a) AS foo FROM t ORDER BY foo LIMIT 1
----
1 1

query II
SELECT a AS "foo.bar", b FROM t ORDER BY "foo.bar" DESC
----
3 7
2 8
1 9

query II
SELECT a AS foo, b FROM t ORDER BY a DESC
----
3 7
2 8
1 9

query I
SELECT b FROM t ORDER BY a DESC
----
7
8
9

query TTT
EXPLAIN SELECT b FROM t ORDER BY a DESC
----
nosort             ·      ·
 │                 order  -a
 └── render        ·      ·
      └── revscan  ·      ·
·                  table  t@primary
·                  spans  ALL

# Check that LIMIT propagates past nosort nodes.
query TTT
EXPLAIN SELECT b FROM t ORDER BY a LIMIT 1
----
limit                ·      ·
 └── nosort          ·      ·
      │              order  +a
      └── render     ·      ·
           └── scan  ·      ·
·                    table  t@primary
·                    spans  ALL
·                    limit  1

query TTT
EXPLAIN SELECT b FROM t ORDER BY a DESC, b ASC
----
nosort             ·      ·
 │                 order  -a,+b
 └── render        ·      ·
      └── revscan  ·      ·
·                  table  t@primary
·                  spans  ALL

query TTT
EXPLAIN SELECT b FROM t ORDER BY a DESC, b DESC
----
nosort             ·      ·
 │                 order  -a,-b
 └── render        ·      ·
      └── revscan  ·      ·
·                  table  t@primary
·                  spans  ALL

query TITTTTT
EXPLAIN (VERBOSE) SELECT * FROM t ORDER BY (b, t.*)
----
sort       0  sort  ·      ·          (a, b, c)  a!=NULL; key(a); +b,+a
 │         0  ·     order  +b,+a,+c   ·          ·
 └── scan  1  scan  ·      ·          (a, b, c)  a!=NULL; key(a)
·          1  ·     table  t@primary  ·          ·
·          1  ·     spans  ALL        ·          ·

query TITTTTT
EXPLAIN (VERBOSE) SELECT * FROM t ORDER BY (b, a), c
----
sort       0  sort  ·      ·          (a, b, c)  a!=NULL; key(a); +b,+a
 │         0  ·     order  +b,+a,+c   ·          ·
 └── scan  1  scan  ·      ·          (a, b, c)  a!=NULL; key(a)
·          1  ·     table  t@primary  ·          ·
·          1  ·     spans  ALL        ·          ·

query TITTTTT
EXPLAIN (VERBOSE) SELECT * FROM t ORDER BY b, (a, c)
----
sort       0  sort  ·      ·          (a, b, c)  a!=NULL; key(a); +b,+a
 │         0  ·     order  +b,+a,+c   ·          ·
 └── scan  1  scan  ·      ·          (a, b, c)  a!=NULL; key(a)
·          1  ·     table  t@primary  ·          ·
·          1  ·     spans  ALL        ·          ·

query TITTTTT
EXPLAIN (VERBOSE) SELECT * FROM t ORDER BY (b, (a, c))
----
sort       0  sort  ·      ·          (a, b, c)  a!=NULL; key(a); +b,+a
 │         0  ·     order  +b,+a,+c   ·          ·
 └── scan  1  scan  ·      ·          (a, b, c)  a!=NULL; key(a)
·          1  ·     table  t@primary  ·          ·
·          1  ·     spans  ALL        ·          ·

statement ok
INSERT INTO t VALUES (4, 7), (5, 7)

query II
SELECT a, b FROM t WHERE b = 7 ORDER BY b, a
----
3 7
4 7
5 7

query II
SELECT a, b FROM t ORDER BY b, a DESC
----
5 7
4 7
3 7
2 8
1 9

query III
SELECT a, b, a+b AS ab FROM t WHERE b = 7 ORDER BY ab DESC, a
----
5 7 12
4 7 11
3 7 10

query I
SELECT a FROM t ORDER BY a+b DESC, a
----
5
4
1
2
3

query I
SELECT a FROM t ORDER BY (((a)))
----
1
2
3
4
5

query I
(((SELECT a FROM t))) ORDER BY a DESC LIMIT 4
----
5
4
3
2

query I
(((SELECT a FROM t ORDER BY a DESC LIMIT 4)))
----
5
4
3
2

query error multiple ORDER BY clauses not allowed
((SELECT a FROM t ORDER BY a)) ORDER BY a

query error expected c to be of type int, found type bool
SELECT CASE a WHEN 1 THEN b ELSE c END as val FROM t ORDER BY val

query error ORDER BY position 0 is not in select list
SELECT * FROM t ORDER BY 0

query error non-integer constant in ORDER BY: true
SELECT * FROM t ORDER BY true

query error non-integer constant in ORDER BY: 'a'
SELECT * FROM t ORDER BY 'a'

query error non-integer constant in ORDER BY: 2\.5
SELECT * FROM t ORDER BY 2.5

query error column name "foo" not found
SELECT * FROM t ORDER BY foo

query error no data source matches prefix: a
SELECT a FROM t ORDER BY a.b

query error can't order by column type int\[\]
SELECT GENERATE_SERIES FROM GENERATE_SERIES(1, 100) ORDER BY ARRAY[GENERATE_SERIES]

query error can't order by column type int\[\]
SELECT ARRAY[GENERATE_SERIES] FROM GENERATE_SERIES(1, 100) ORDER BY ARRAY[GENERATE_SERIES]

query error can't order by column type int\[\]
SELECT ARRAY[GENERATE_SERIES] FROM GENERATE_SERIES(1, 100) ORDER BY 1

query error can't order by column type int\[\]
SELECT ARRAY[GENERATE_SERIES] AS a FROM GENERATE_SERIES(1, 100) ORDER BY a

query IT
SELECT GENERATE_SERIES, ARRAY[GENERATE_SERIES] FROM GENERATE_SERIES(1, 1) ORDER BY 1
----
1 {1}

query IT
SELECT GENERATE_SERIES, ARRAY[GENERATE_SERIES] FROM GENERATE_SERIES(1, 1) ORDER BY GENERATE_SERIES
----
1 {1}

query IT
SELECT GENERATE_SERIES, ARRAY[GENERATE_SERIES] FROM GENERATE_SERIES(1, 1) ORDER BY -GENERATE_SERIES
----
1 {1}


# Check that sort is skipped if the ORDER BY clause is constant.
query TTT
EXPLAIN SELECT * FROM t ORDER BY 1+2
----
nosort          ·      ·
 │              order  +"1 + 2"
 └── render     ·      ·
      └── scan  ·      ·
·               table  t@primary
·               spans  ALL

query TTT
EXPLAIN SELECT 1, * FROM t ORDER BY 1
----
render     ·      ·
 └── scan  ·      ·
·          table  t@primary
·          spans  ALL

query TTT
EXPLAIN SELECT * FROM t ORDER BY length('abc')
----
nosort          ·      ·
 │              order  +length
 └── render     ·      ·
      └── scan  ·      ·
·               table  t@primary
·               spans  ALL

# Check that the sort key reuses the existing render.
query TITTTTT
EXPLAIN (VERBOSE) SELECT b+2 FROM t ORDER BY b+2
----
sort            0  sort    ·         ·                    ("b + 2")                    +"b + 2"
 │              0  ·       order     +"b + 2"             ·                            ·
 └── render     1  render  ·         ·                    ("b + 2")                    ·
      │         1  ·       render 0  test.public.t.b + 2  ·                            ·
      └── scan  2  scan    ·         ·                    (a[omitted], b, c[omitted])  a!=NULL; key(a)
·               2  ·       table     t@primary            ·                            ·
·               2  ·       spans     ALL                  ·                            ·

# Check that the sort picks up a renamed render properly.
query TITTTTT
EXPLAIN (VERBOSE) SELECT b+2 AS y FROM t ORDER BY y
----
sort            0  sort    ·         ·                    (y)                          +y
 │              0  ·       order     +y                   ·                            ·
 └── render     1  render  ·         ·                    (y)                          ·
      │         1  ·       render 0  test.public.t.b + 2  ·                            ·
      └── scan  2  scan    ·         ·                    (a[omitted], b, c[omitted])  a!=NULL; key(a)
·               2  ·       table     t@primary            ·                            ·
·               2  ·       spans     ALL                  ·                            ·

# Check that the sort reuses a render behind a rename properly.
query TITTTTT
EXPLAIN (VERBOSE) SELECT b+2 AS y FROM t ORDER BY b+2
----
sort            0  sort    ·         ·                    (y)                          +y
 │              0  ·       order     +y                   ·                            ·
 └── render     1  render  ·         ·                    (y)                          ·
      │         1  ·       render 0  test.public.t.b + 2  ·                            ·
      └── scan  2  scan    ·         ·                    (a[omitted], b, c[omitted])  a!=NULL; key(a)
·               2  ·       table     t@primary            ·                            ·
·               2  ·       spans     ALL                  ·                            ·

statement ok
CREATE TABLE abc (
  a INT,
  b INT,
  c INT,
  d CHAR,
  PRIMARY KEY (a, b, c),
  UNIQUE INDEX bc (b, c),
  INDEX ba (b, a),
  FAMILY (a, b, c),
  FAMILY (d)
)

statement ok
INSERT INTO abc VALUES (1, 2, 3, 'one'), (4, 5, 6, 'Two')

query T
SELECT d FROM abc ORDER BY LOWER(d)
----
one
Two

query T
SELECT message FROM [SHOW KV TRACE FOR SELECT * FROM abc ORDER BY a]
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
----
fetched: /abc/primary/1/2/3 -> NULL
fetched: /abc/primary/1/2/3/d -> 'one'
output row: [1 2 3 'one']
fetched: /abc/primary/4/5/6 -> NULL
fetched: /abc/primary/4/5/6/d -> 'Two'
output row: [4 5 6 'Two']

query TTT
EXPLAIN SELECT * FROM abc ORDER BY a
----
scan  ·      ·
·     table  abc@primary
·     spans  ALL

query T
SELECT message FROM [SHOW KV TRACE FOR SELECT a, b FROM abc ORDER BY b, a]
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
----
fetched: /abc/ba/2/1/3 -> NULL
output row: [1 2]
fetched: /abc/ba/5/4/6 -> NULL
output row: [4 5]

query TTT
EXPLAIN SELECT a, b FROM abc ORDER BY b, a
----
render     ·      ·
 └── scan  ·      ·
·          table  abc@ba
·          spans  ALL

# The non-unique index ba includes column c (required to make the keys unique)
# so the results will already be sorted.
query TTT
EXPLAIN SELECT a, b, c FROM abc ORDER BY b, a, c
----
render     ·      ·
 └── scan  ·      ·
·          table  abc@ba
·          spans  ALL

# We use the WHERE condition to force the use of index ba.
query TTT
EXPLAIN SELECT a, b, c FROM abc WHERE b > 10 ORDER BY b, a, d
----
sort             ·      ·
 │               order  +b,+a,+d
 └── index-join  ·      ·
      ├── scan   ·      ·
      │          table  abc@bc
      │          spans  /11-
      └── scan   ·      ·
·                table  abc@primary

# We cannot have rows with identical values for a,b,c so we don't need to
# sort for d.
query TTT
EXPLAIN SELECT a, b, c, d FROM abc WHERE b > 10 ORDER BY b, a, c, d
----
index-join  ·      ·
 ├── scan   ·      ·
 │          table  abc@ba
 │          spans  /11-
 └── scan   ·      ·
·           table  abc@primary

query TTT
EXPLAIN SELECT a, b FROM abc ORDER BY b, c
----
nosort          ·      ·
 │              order  +b,+c
 └── render     ·      ·
      └── scan  ·      ·
·               table  abc@bc
·               spans  ALL

query TITTTTT
EXPLAIN (VERBOSE) SELECT a, b FROM abc ORDER BY b, c
----
nosort          0  nosort  ·         ·                  (a, b)                 b!=NULL; +b
 │              0  ·       order     +b,+c              ·                      ·
 └── render     1  render  ·         ·                  (a, b, c)              b!=NULL; c!=NULL; key(b,c); +b,+c
      │         1  ·       render 0  test.public.abc.a  ·                      ·
      │         1  ·       render 1  test.public.abc.b  ·                      ·
      │         1  ·       render 2  test.public.abc.c  ·                      ·
      └── scan  2  scan    ·         ·                  (a, b, c, d[omitted])  b!=NULL; c!=NULL; key(b,c); +b,+c
·               2  ·       table     abc@bc             ·                      ·
·               2  ·       spans     ALL                ·                      ·

query TTT
EXPLAIN SELECT a, b FROM abc ORDER BY b, c, a
----
nosort          ·      ·
 │              order  +b,+c,+a
 └── render     ·      ·
      └── scan  ·      ·
·               table  abc@bc
·               spans  ALL

query TTT
EXPLAIN SELECT a, b FROM abc ORDER BY b, c, a DESC
----
nosort          ·      ·
 │              order  +b,+c,-a
 └── render     ·      ·
      └── scan  ·      ·
·               table  abc@bc
·               spans  ALL

query T
SELECT message FROM [SHOW KV TRACE FOR SELECT b, c FROM abc ORDER BY b, c]
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
----
fetched: /abc/bc/2/3 -> /1
output row: [2 3]
fetched: /abc/bc/5/6 -> /4
output row: [5 6]

query T
SELECT message FROM [SHOW KV TRACE FOR SELECT a, b, c FROM abc ORDER BY b]
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
----
fetched: /abc/bc/2/3 -> /1
output row: [1 2 3]
fetched: /abc/bc/5/6 -> /4
output row: [4 5 6]

query T
SELECT message FROM [SHOW KV TRACE FOR SELECT a FROM abc ORDER BY a DESC]
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
----
fetched: /abc/primary/4/5/6/d -> 'Two'
fetched: /abc/primary/4/5/6 -> NULL
output row: [4]
fetched: /abc/primary/1/2/3/d -> 'one'
fetched: /abc/primary/1/2/3 -> NULL
output row: [1]

query TTT
EXPLAIN SELECT a FROM abc ORDER BY a DESC
----
render        ·      ·
 └── revscan  ·      ·
·             table  abc@primary
·             spans  ALL

query I
SELECT a FROM abc ORDER BY a DESC
----
4
1

query I
SELECT a FROM abc ORDER BY a DESC LIMIT 1
----
4

query I
SELECT a FROM abc ORDER BY a DESC OFFSET 1
----
1

query TTT
EXPLAIN SELECT c FROM abc WHERE b = 2 ORDER BY c
----
render     ·      ·
 └── scan  ·      ·
·          table  abc@bc
·          spans  /2-/3

query TTT
EXPLAIN SELECT c FROM abc WHERE b = 2 ORDER BY c DESC
----
render        ·      ·
 └── revscan  ·      ·
·             table  abc@bc
·             spans  /2-/3

# Verify that the ordering of the primary index is still used for the outer sort.
query TITTTTT
EXPLAIN (VERBOSE) SELECT * FROM (SELECT b, c FROM abc WHERE a=1 ORDER BY a,b) ORDER BY b,c
----
nosort          0  nosort  ·         ·                  (b, c)                          b!=NULL; c!=NULL; key(b,c); +b,+c
 │              0  ·       order     +b,+c              ·                               ·
 └── render     1  render  ·         ·                  (b, c, a[omitted])              a=CONST; b!=NULL; c!=NULL; key(b,c); +b,+c
      │         1  ·       render 0  test.public.abc.b  ·                               ·
      │         1  ·       render 1  test.public.abc.c  ·                               ·
      │         1  ·       render 2  NULL               ·                               ·
      └── scan  2  scan    ·         ·                  (a[omitted], b, c, d[omitted])  a=CONST; b!=NULL; c!=NULL; key(b,c); +b,+c
·               2  ·       table     abc@primary        ·                               ·
·               2  ·       spans     /1-/2              ·                               ·

statement ok
CREATE TABLE bar (id INT PRIMARY KEY, baz STRING, UNIQUE INDEX i_bar (baz))

statement ok
INSERT INTO bar VALUES (0, NULL), (1, NULL)

query TITTTTT
EXPLAIN (VERBOSE) SELECT * FROM bar ORDER BY baz, id
----
sort       0  sort  ·      ·          (id, baz)  weak-key(baz); +baz,+id
 │         0  ·     order  +baz,+id   ·          ·
 └── scan  1  scan  ·      ·          (id, baz)  weak-key(baz); +baz
·          1  ·     table  bar@i_bar  ·          ·
·          1  ·     spans  ALL        ·          ·

# Here rowsort is needed because the ORDER BY clause does not guarantee any
# relative ordering between rows where baz is NULL. As we see above, because
# this is a unique index, the ordering `+baz,+id` is deemed equivalent to just
# `+baz`.
query IT rowsort
SELECT * FROM bar ORDER BY baz, id
----
0 NULL
1 NULL

statement ok
CREATE TABLE abcd (
  a INT PRIMARY KEY,
  b INT,
  c INT,
  d INT,
  INDEX abc (a, b, c)
)

statement ok
INSERT INTO abcd VALUES (1, 4, 2, 3), (2, 3, 4, 1), (3, 2, 1, 2), (4, 4, 1, 1)

# Verify that render expressions after sorts perform correctly. We need the
# rowsort as we're attempting to force a RENDER expression after the first
# ORDER BY, to ensure it renders correctly, but the outer query doesn't
# guarantee that it will preserve the order.

query I rowsort
SELECT a+b FROM (SELECT * FROM abcd ORDER BY d)
----
5
5
5
8

query I rowsort
SELECT b+d FROM (SELECT * FROM abcd ORDER BY a,d)
----
7
4
4
5

# The following tests verify we recognize that sorting is not necessary
query TTT
EXPLAIN SELECT a, b, c FROM abcd@abc WHERE (a, b) = (1, 4) ORDER BY c
----
render     ·      ·
 └── scan  ·      ·
·          table  abcd@abc
·          spans  /1/4-/1/5

query TTT
EXPLAIN SELECT a, b, c FROM abcd@abc WHERE (a, b) = (1, 4) ORDER BY c, b, a
----
render     ·      ·
 └── scan  ·      ·
·          table  abcd@abc
·          spans  /1/4-/1/5

query TTT
EXPLAIN SELECT a, b, c FROM abcd@abc WHERE (a, b) = (1, 4) ORDER BY b, a, c
----
render     ·      ·
 └── scan  ·      ·
·          table  abcd@abc
·          spans  /1/4-/1/5

query TTT
EXPLAIN SELECT a, b, c FROM abcd@abc WHERE (a, b) = (1, 4) ORDER BY b, c, a
----
render     ·      ·
 └── scan  ·      ·
·          table  abcd@abc
·          spans  /1/4-/1/5

statement ok
CREATE TABLE nan (id INT PRIMARY KEY, x REAL)

statement ok
INSERT INTO nan VALUES (1, 0/0), (2, -1), (3, 1), (4, 0/0)

query R
SELECT x FROM nan ORDER BY x
----
NaN
NaN
-1
1

query TITTTTT
EXPLAIN (VERBOSE) SELECT * FROM (SELECT * FROM (VALUES ('a'), ('b'), ('c')) AS c(x) ORDER BY x)
----
sort         0  sort    ·              ·                 (x)  +x
 │           0  ·       order          +x                ·    ·
 └── values  1  values  ·              ·                 (x)  ·
·            1  ·       size           1 column, 3 rows  ·    ·
·            1  ·       row 0, expr 0  'a'               ·    ·
·            1  ·       row 1, expr 0  'b'               ·    ·
·            1  ·       row 2, expr 0  'c'               ·    ·

query TTT
EXPLAIN SELECT * FROM (VALUES ('a'), ('b'), ('c')) WITH ORDINALITY ORDER BY ordinality ASC
----
ordinality   ·     ·
 └── values  ·     ·
·            size  1 column, 3 rows

query TTT
EXPLAIN SELECT * FROM (VALUES ('a'), ('b'), ('c')) WITH ORDINALITY ORDER BY ordinality DESC
----
sort              ·      ·
 │                order  -"ordinality"
 └── ordinality   ·      ·
      └── values  ·      ·
·                 size   1 column, 3 rows

query TITTTTT
EXPLAIN (VERBOSE) SELECT * FROM (SELECT * FROM (VALUES ('a'), ('b'), ('c')) AS c(x)) WITH ORDINALITY
----
ordinality   0  ordinality  ·              ·                 (x, "ordinality")  weak-key("ordinality")
 └── values  1  values      ·              ·                 (x)                ·
·            1  ·           size           1 column, 3 rows  ·                  ·
·            1  ·           row 0, expr 0  'a'               ·                  ·
·            1  ·           row 1, expr 0  'b'               ·                  ·
·            1  ·           row 2, expr 0  'c'               ·                  ·

query TITTTTT
EXPLAIN (VERBOSE) SELECT * FROM (SELECT * FROM (VALUES ('a'), ('b'), ('c')) AS c(x) ORDER BY x) WITH ORDINALITY
----
ordinality        0  ordinality  ·              ·                 (x, "ordinality")  weak-key("ordinality")
 └── sort         1  sort        ·              ·                 (x)                +x
      │           1  ·           order          +x                ·                  ·
      └── values  2  values      ·              ·                 (x)                ·
·                 2  ·           size           1 column, 3 rows  ·                  ·
·                 2  ·           row 0, expr 0  'a'               ·                  ·
·                 2  ·           row 1, expr 0  'b'               ·                  ·
·                 2  ·           row 2, expr 0  'c'               ·                  ·

# Check that the ordering of the source does not propagate blindly to RETURNING.
query TITTTTT
EXPLAIN (VERBOSE) INSERT INTO t(a, b) SELECT * FROM (SELECT 1 AS x, 2 AS y) ORDER BY x RETURNING b
----
render                        0  render    ·         ·                (b)        ·
 │                            0  ·         render 0  test.public.t.b  ·          ·
 └── run                      1  run       ·         ·                (a, b, c)  ·
      └── insert              2  insert    ·         ·                (a, b, c)  ·
           │                  2  ·         into      t(a, b)          ·          ·
           └── render         3  render    ·         ·                (x, y)     x=CONST; y=CONST
                │             3  ·         render 0  1                ·          ·
                │             3  ·         render 1  2                ·          ·
                └── emptyrow  4  emptyrow  ·         ·                ()         ·

query TITTTTT
EXPLAIN (VERBOSE) DELETE FROM t WHERE a = 3 RETURNING b
----
render               0  render  ·         ·                (b)        key()
 │                   0  ·       render 0  test.public.t.b  ·          ·
 └── run             1  run     ·         ·                (a, b, c)  a=CONST; key()
      └── delete     2  delete  ·         ·                (a, b, c)  a=CONST; key()
           │         2  ·       from      t                ·          ·
           └── scan  3  scan    ·         ·                (a, b, c)  a=CONST; key()
·                    3  ·       table     t@primary        ·          ·
·                    3  ·       spans     /3-/3/#          ·          ·

query TITTTTT
EXPLAIN (VERBOSE) UPDATE t SET c = TRUE RETURNING b
----
render                    0  render  ·         ·                (b)                ·
 │                        0  ·       render 0  test.public.t.b  ·                  ·
 └── run                  1  run     ·         ·                (a, b, c)          ·
      └── update          2  update  ·         ·                (a, b, c)          ·
           │              2  ·       table     t                ·                  ·
           │              2  ·       set       c                ·                  ·
           └── render     3  render  ·         ·                (a, b, c, "true")  "true"=CONST; a!=NULL; key(a)
                │         3  ·       render 0  test.public.t.a  ·                  ·
                │         3  ·       render 1  test.public.t.b  ·                  ·
                │         3  ·       render 2  test.public.t.c  ·                  ·
                │         3  ·       render 3  true             ·                  ·
                └── scan  4  scan    ·         ·                (a, b, c)          a!=NULL; key(a)
·                         4  ·       table     t@primary        ·                  ·
·                         4  ·       spans     ALL              ·                  ·

statement ok
CREATE TABLE uvwxyz (
  u INT,
  v INT,
  w INT,
  x INT,
  y INT,
  z INT,
  INDEX ywxz (y, w, x, z, u, v),
  INDEX ywz (y, w, z, x)
)

# Verify that the outer ordering is propagated to index selection and we choose
# the index that avoids any sorting.
query TITTTTT
EXPLAIN (VERBOSE) SELECT * FROM (SELECT y, w, x FROM uvwxyz WHERE y = 1 ORDER BY w) ORDER BY w, x
----
render     0  render  ·         ·                     (y, w, x)                                                             y=CONST; +w,+x
 │         0  ·       render 0  test.public.uvwxyz.y  ·                                                                     ·
 │         0  ·       render 1  test.public.uvwxyz.w  ·                                                                     ·
 │         0  ·       render 2  test.public.uvwxyz.x  ·                                                                     ·
 └── scan  1  scan    ·         ·                     (u[omitted], v[omitted], w, x, y, z[omitted], rowid[hidden,omitted])  y=CONST; rowid!=NULL; weak-key(u,v,w,x,z,rowid); +w,+x
·          1  ·       table     uvwxyz@ywxz           ·                                                                     ·
·          1  ·       spans     /1-/2                 ·                                                                     ·


statement ok
CREATE TABLE blocks (
  block_id  INT,
  writer_id STRING,
  block_num INT,
  raw_bytes BYTES,
  PRIMARY KEY (block_id, writer_id, block_num)
)

# Test that ordering goes "through" a renderNode that has a duplicate render of
# an order-by column (#13696).
query TITTTTT
EXPLAIN (VERBOSE) SELECT block_id,writer_id,block_num,block_id FROM blocks ORDER BY block_id, writer_id, block_num LIMIT 1
----
limit           0  limit   ·         ·                             (block_id, writer_id, block_num, block_id)            block_id=block_id; block_id!=NULL; writer_id!=NULL; block_num!=NULL; key(block_id,writer_id,block_num); +block_id,+writer_id,+block_num
 │              0  ·       count     1                             ·                                                     ·
 └── render     1  render  ·         ·                             (block_id, writer_id, block_num, block_id)            block_id=block_id; block_id!=NULL; writer_id!=NULL; block_num!=NULL; key(block_id,writer_id,block_num); +block_id,+writer_id,+block_num
      │         1  ·       render 0  test.public.blocks.block_id   ·                                                     ·
      │         1  ·       render 1  test.public.blocks.writer_id  ·                                                     ·
      │         1  ·       render 2  test.public.blocks.block_num  ·                                                     ·
      │         1  ·       render 3  test.public.blocks.block_id   ·                                                     ·
      └── scan  2  scan    ·         ·                             (block_id, writer_id, block_num, raw_bytes[omitted])  block_id!=NULL; writer_id!=NULL; block_num!=NULL; key(block_id,writer_id,block_num); +block_id,+writer_id,+block_num
·               2  ·       table     blocks@primary                ·                                                     ·
·               2  ·       spans     ALL                           ·                                                     ·
·               2  ·       limit     1                             ·                                                     ·
