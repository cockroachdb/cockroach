statement ok
SET experimental_enable_virtual_columns = true

# Test that we don't allow FAMILY constraints with virtual columns.
statement error virtual computed column "v" cannot be part of a family
CREATE TABLE t (
  a INT PRIMARY KEY,
  b INT,
  v INT AS (a+b) VIRTUAL,
  FAMILY (a, b, v)
)

statement error virtual computed column "v" cannot be part of a family
CREATE TABLE t (
  a INT PRIMARY KEY,
  b INT,
  v INT AS (a+b) VIRTUAL,
  FAMILY (a),
  FAMILY (b),
  FAMILY (v)
)

statement error primary index column "v" cannot be virtual
CREATE TABLE t (
  a INT,
  b INT,
  v INT AS (a+b) VIRTUAL,
  PRIMARY KEY (b,v)
)

statement error index "t_b_idx" cannot store virtual column "v"
CREATE TABLE t (
  a INT PRIMARY KEY,
  b INT,
  v INT AS (a+b) VIRTUAL,
  INDEX (b) STORING (v)
)

statement ok
CREATE TABLE t (
  a INT PRIMARY KEY,
  b INT,
  v INT AS (a+b) VIRTUAL
)

statement ok
INSERT INTO t VALUES (1, 1)

statement ok
INSERT INTO t(a,b) VALUES (2, 2)

statement error cannot write directly to computed column
INSERT INTO t(a,b,v) VALUES (2, 2, 0)

# Ensure that the virtual column is produced.
query III colnames,rowsort
SELECT * FROM t
----
a  b  v
1  1  2
2  2  4

statement ok
DELETE FROM t WHERE a > 0

statement ok
INSERT INTO t VALUES (1, 10), (2, 20), (3, 30), (4, 40)

query I rowsort
DELETE FROM t WHERE a = 1 RETURNING v
----
11

query III colnames,rowsort
SELECT * FROM t
----
a  b   v
2  20  22
3  30  33
4  40  44

statement ok
DELETE FROM t WHERE v = 33

query III colnames,rowsort
SELECT * FROM t
----
a  b   v
2  20  22
4  40  44

statement error cannot write directly to computed column
UPDATE t SET v=1

statement ok
UPDATE t SET a=a+1

query III colnames,rowsort
SELECT * FROM t
----
a   b   v
3  20  23
5  40  45

query III colnames,rowsort
UPDATE t SET b=b+1 WHERE v=45 RETURNING a,b,v
----
a  b   v
5  41  46

# Tests with an index on the virtual column.
statement ok
CREATE TABLE t_idx (
  a INT PRIMARY KEY,
  b INT,
  c INT,
  v INT AS (a+b) VIRTUAL,
  w INT AS (c+1) VIRTUAL,
  INDEX (v),
  UNIQUE (w)
)

statement ok
INSERT INTO t_idx VALUES (1, 1, 1), (2, 8, 2), (3, 3, 3), (4, 6, 4), (5, 0, 5)

statement error duplicate key value violates unique constraint
INSERT INTO t_idx VALUES (10, 10, 1)

# Queries which should use the index on v. Note that there are corresponding
# execbuilder tests which verify the query plans.
query I rowsort
SELECT a FROM t_idx WHERE a+b=10
----
2
4

query I rowsort
SELECT a FROM t_idx WHERE v=10
----
2
4

query I rowsort
SELECT a FROM t_idx WHERE w IN (4,6)
----
3
5

statement ok
DELETE FROM t_idx WHERE v = 6

query IIIII colnames,rowsort
SELECT * FROM t_idx
----
a  b  c  v   w
1  1  1  2   2
2  8  2  10  3
4  6  4  10  5
5  0  5  5   6

statement ok
DELETE FROM t_idx WHERE a+b = 10

query IIIII colnames,rowsort
SELECT * FROM t_idx
----
a  b  c  v  w
1  1  1  2  2
5  0  5  5  6

# Update PK; ensure indexes are updated.
statement ok
UPDATE t_idx SET a=a+1

query IIIII colnames,rowsort
SELECT * FROM t_idx
----
a  b  c  v  w
2  1  1  3  2
6  0  5  6  6

query I
SELECT a FROM t_idx WHERE v=3
----
2

query I
SELECT a FROM t_idx WHERE w=2
----
2

# Update b, which affects only v.
statement ok
UPDATE t_idx SET b=b+1

query IIIII colnames,rowsort
SELECT * FROM t_idx
----
a  b  c  v  w
2  2  1  4  2
6  1  5  7  6

query I
SELECT a FROM t_idx WHERE v=4
----
2

query I
SELECT a FROM t_idx WHERE w=2
----
2

# Update c, which affects only w.
statement ok
UPDATE t_idx SET c=c+1

query IIIII colnames,rowsort
SELECT * FROM t_idx
----
a  b  c  v  w
2  2  2  4  3
6  1  6  7  7

query I
SELECT a FROM t_idx WHERE v=4
----
2

query I
SELECT a FROM t_idx WHERE w=3
----
2

statement error duplicate key value violates unique constraint
UPDATE t_idx SET c=6 WHERE a=2

# Test UPDATE .. RETURNING.
query III colnames,rowsort
UPDATE t_idx SET a=a+1 RETURNING a,v,w
----
a  v  w
3  5  3
7  8  7

query I rowsort
UPDATE t_idx SET b=b+1 RETURNING w
----
3
7
