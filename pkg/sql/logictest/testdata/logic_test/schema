statement ok
SET experimental_enable_user_defined_schemas = true;
SET experimental_enable_enums = true;
SET experimental_enable_temp_tables = true;

statement ok
CREATE SCHEMA IF NOT EXISTS public

statement ok
CREATE SCHEMA IF NOT EXISTS crdb_internal

statement ok
CREATE SCHEMA IF NOT EXISTS pg_catalog

statement ok
CREATE SCHEMA IF NOT EXISTS information_schema

statement ok
CREATE SCHEMA derp

statement ok
CREATE SCHEMA IF NOT EXISTS derp

statement error schema \"derp\" already exists
CREATE SCHEMA derp

statement error schema .* already exists
CREATE SCHEMA public

statement error schema .* already exists
CREATE SCHEMA crdb_internal

statement error schema .* already exists
CREATE SCHEMA pg_catalog

statement error schema .* already exists
CREATE SCHEMA information_schema

statement error pq: unacceptable schema name \"pg_temp\"
CREATE SCHEMA pg_temp

# Create some tables and types in a user defined schema, and resolve them.
statement ok
CREATE SCHEMA myschema;
CREATE TABLE myschema.tb (x INT);
CREATE TYPE myschema.typ AS ENUM ('user', 'defined', 'schema');
CREATE VIEW myschema.v AS SELECT x FROM myschema.tb;
CREATE SEQUENCE myschema.s

query I
SELECT * FROM myschema.tb
----

query I
SELECT * FROM myschema.v
----

query I
SELECT last_value FROM myschema.s
----
0

query TT
SELECT 'user'::myschema.typ, ARRAY['defined']::myschema._typ
----
user {defined}

# Set the search path to have myschema at the front.
statement ok
SET search_path TO myschema,public

# Now we should be able to resolve tb and typ without qualification.
query I
SELECT * FROM tb
----

query TT
SELECT 'user'::typ, ARRAY['defined']::_typ
----
user {defined}

# New objects should be created into tb2 by default.
statement ok
CREATE TABLE tb2 (x typ)

query T
SELECT * FROM tb2
----

query T
SELECT * FROM myschema.tb2
----

# Reset the search path.
statement ok
SET search_path TO public

# Try to create a temp table in a user defined schema.
statement error pq: cannot create temporary relation in non-temporary schema
CREATE TEMP TABLE myschema.tmp (x int)

# We should error out trying to modify any virtual schemas.
statement error pq: schema cannot be modified: "pg_catalog"
CREATE TABLE pg_catalog.bad (x int)

# We shouldn't be able to alter virtual or public schemas.
statement error pq: cannot modify schema "public"
ALTER SCHEMA public RENAME TO private

statement error pq: cannot modify schema "pg_catalog"
ALTER SCHEMA pg_catalog RENAME TO mysql_catalog

# We can't rename a schema to a pg_temp prefixed name.
statement error pq: unacceptable schema name "pg_temp_not_temp"
ALTER SCHEMA myschema RENAME TO pg_temp_not_temp

# We can't rename to schemas that already exist.
statement error pq: schema "public" already exists
ALTER SCHEMA myschema RENAME TO public

statement ok
CREATE SCHEMA yourschema

statement error pq: schema "yourschema" already exists
ALTER SCHEMA myschema RENAME TO yourschema

statement ok
ALTER SCHEMA myschema RENAME TO myschema2

# We should be able to resolve objects under the new schema name.
query T
SELECT * FROM myschema2.tb2
----

# The names should be drained after executing, so we should be able
# to make another schema with the old name.
statement ok
CREATE SCHEMA myschema

statement ok
BEGIN

statement ok
ALTER SCHEMA myschema RENAME TO another_schema

statement ok
ALTER SCHEMA another_schema RENAME TO another_one

# The names should be draining, so we can't use the old ones
# anymore.
statement error pq: schema "myschema" already exists
ALTER SCHEMA another_one RENAME TO myschema

statement ok
ROLLBACK

# We should be able to drop an empty schema without CASCADE.
statement ok
CREATE SCHEMA empty;
DROP SCHEMA empty

let $schema_id
SELECT id FROM system.namespace WHERE name = 'myschema'

# Create some objects under myschema, and have them reference some objects
# in other schemas.
statement ok
CREATE TABLE myschema.myschema_t1 (x INT);
CREATE TABLE myschema.myschema_t2 (x INT);
CREATE SEQUENCE myschema.myschema_seq1;
CREATE TABLE myschema.myschema_t3 (x INT DEFAULT nextval('myschema.myschema_seq1'));
CREATE TYPE myschema.myschema_ty1 AS ENUM ('schema');
CREATE SCHEMA otherschema;
CREATE VIEW otherschema.otherschema_v1 AS SELECT x FROM myschema.myschema_t1;
CREATE TABLE otherschema.otherschema_t1 (x INT);
CREATE SEQUENCE otherschema.otherschema_seq1 OWNED BY myschema.myschema_t1.x;

statement error pq: schema "myschema" is not empty and CASCADE was not specified
DROP SCHEMA myschema

# Now drop with cascade.
statement ok
DROP SCHEMA myschema CASCADE

query T
SELECT table_name FROM [SHOW TABLES] WHERE table_name LIKE 'myschema%' OR table_name LIKE 'otherschema%'
----
otherschema_t1

query T
SELECT name FROM [SHOW ENUMS] WHERE name LIKE 'myschema%'

# The schema should be gone.
query I
SELECT id FROM system.namespace WHERE name = 'myschema'

query IT
SELECT * FROM system.descriptor WHERE id = $schema_id

# We can't resolve a schema dropped in the same transaction.
statement ok
CREATE SCHEMA dropped;
BEGIN

statement ok
DROP SCHEMA dropped

statement error pq: cannot create "dropped.t" because the target database or schema does not exist
CREATE TABLE dropped.t (x INT)

statement ok
ROLLBACK

# We shouldn't be able to create a conflicting schema name in the same transaction
# that it is dropped in.
statement ok
BEGIN

statement ok
DROP SCHEMA dropped

statement error pq: schema "dropped" already exists
CREATE SCHEMA dropped

statement ok
ROLLBACK

# Test that we can drop multiple schemas as part of a single DROP statement.
statement ok
CREATE SCHEMA scdrop1;
CREATE SCHEMA scdrop2;
CREATE SCHEMA scdrop3;
CREATE TABLE scdrop1.scdrop1_t1 (x INT);
CREATE TABLE scdrop1.scdrop1_t2 (x INT);
CREATE TABLE scdrop2.scdrop2_t1 (x INT);
CREATE VIEW scdrop2.scdrop2_v1 AS SELECT x FROM scdrop1.scdrop1_t1;
CREATE VIEW scdrop3.scdrop3_v1 AS SELECT x FROM scdrop2.scdrop2_v1;

statement ok
DROP SCHEMA scdrop1, scdrop2, scdrop3 CASCADE

query T
SELECT table_name FROM [SHOW TABLES] WHERE table_name LIKE 'scdrop%'

# Test privilege interactions with schemas.
subtest privileges

# Have root create a schema.
statement ok
CREATE SCHEMA privs

statement ok
GRANT CREATE ON DATABASE test TO testuser

# Test user shouldn't be able to create in privs yet.
user testuser

statement error pq: user testuser does not have CREATE privilege on schema privs
CREATE TABLE privs.denied (x INT)

statement error pq: user testuser does not have CREATE privilege on schema privs
SET experimental_enable_enums = true;
CREATE TYPE privs.denied AS ENUM ('denied');

user root

statement ok
GRANT CREATE ON SCHEMA privs TO testuser

user testuser

# Now the testuser can create objects.
statement ok
CREATE TABLE privs.tbl (x INT)

statement ok
SET experimental_enable_enums = true;
CREATE TYPE privs.typ AS ENUM ('allowed');

# Now revoke the permissions.
user root

statement ok
REVOKE CREATE ON SCHEMA privs FROM testuser

user testuser

statement error pq: user testuser does not have CREATE privilege on schema privs
CREATE TABLE privs.denied (x INT)

statement error pq: user testuser does not have CREATE privilege on schema privs
SET experimental_enable_enums = true;
CREATE TYPE privs.denied AS ENUM ('denied');

# The testuser shouldn't be able to alter or drop the schema.
statement error pq: must be owner of schema "privs"
ALTER SCHEMA privs RENAME TO denied

statement error pq: permission denied to drop schema "privs"
DROP SCHEMA privs

# TODO (rohany): Test the usage privilege here.

