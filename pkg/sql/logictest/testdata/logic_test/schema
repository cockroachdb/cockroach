statement ok
SET experimental_enable_user_defined_schemas = true;
SET experimental_enable_enums = true;
SET experimental_enable_temp_tables = true;

statement ok
CREATE SCHEMA IF NOT EXISTS public

statement ok
CREATE SCHEMA IF NOT EXISTS crdb_internal

statement ok
CREATE SCHEMA IF NOT EXISTS pg_catalog

statement ok
CREATE SCHEMA IF NOT EXISTS information_schema

statement ok
CREATE SCHEMA derp

statement ok
CREATE SCHEMA IF NOT EXISTS derp

statement error schema \"derp\" already exists
CREATE SCHEMA derp

statement error schema .* already exists
CREATE SCHEMA public

statement error schema .* already exists
CREATE SCHEMA crdb_internal

statement error schema .* already exists
CREATE SCHEMA pg_catalog

statement error schema .* already exists
CREATE SCHEMA information_schema

statement error pq: unacceptable schema name \"pg_temp\"
CREATE SCHEMA pg_temp

# Create some tables and types in a user defined schema, and resolve them.
statement ok
CREATE SCHEMA myschema;
CREATE TABLE myschema.tb (x INT);
CREATE TYPE myschema.typ AS ENUM ('user', 'defined', 'schema');
CREATE VIEW myschema.v AS SELECT x FROM myschema.tb;
CREATE SEQUENCE myschema.s

query I
SELECT * FROM myschema.tb
----

query I
SELECT * FROM myschema.v
----

query I
SELECT last_value FROM myschema.s
----
0

query TT
SELECT 'user'::myschema.typ, ARRAY['defined']::myschema._typ
----
user {defined}

# Set the search path to have myschema at the front.
statement ok
SET search_path TO myschema,public

# Now we should be able to resolve tb and typ without qualification.
query I
SELECT * FROM tb
----

query TT
SELECT 'user'::typ, ARRAY['defined']::_typ
----
user {defined}

# New objects should be created into tb2 by default.
statement ok
CREATE TABLE tb2 (x typ)

query T
SELECT * FROM tb2
----

query T
SELECT * FROM myschema.tb2
----

# Reset the search path.
statement ok
SET search_path TO public

# Try to create a temp table in a user defined schema.
statement error pq: cannot create temporary relation in non-temporary schema
CREATE TEMP TABLE myschema.tmp (x int)

# We should error out trying to modify any virtual schemas.
statement error pq: schema cannot be modified: "pg_catalog"
CREATE TABLE pg_catalog.bad (x int)

# We shouldn't be able to alter virtual or public schemas.
statement error pq: cannot modify schema "public"
ALTER SCHEMA public RENAME TO private

statement error pq: cannot modify schema "pg_catalog"
ALTER SCHEMA pg_catalog RENAME TO mysql_catalog

# We can't rename a schema to a pg_temp prefixed name.
statement error pq: unacceptable schema name "pg_temp_not_temp"
ALTER SCHEMA myschema RENAME TO pg_temp_not_temp

# We can't rename to schemas that already exist.
statement error pq: schema "public" already exists
ALTER SCHEMA myschema RENAME TO public

statement ok
CREATE SCHEMA yourschema

statement error pq: schema "yourschema" already exists
ALTER SCHEMA myschema RENAME TO yourschema

statement ok
ALTER SCHEMA myschema RENAME TO myschema2

# We should be able to resolve objects under the new schema name.
query T
SELECT * FROM myschema2.tb2
----

# The names should be drained after executing, so we should be able
# to make another schema with the old name.
statement ok
CREATE SCHEMA myschema

statement ok
BEGIN

statement ok
ALTER SCHEMA myschema RENAME TO another_schema

statement ok
ALTER SCHEMA another_schema RENAME TO another_one

# The names should be draining, so we can't use the old ones
# anymore.
statement error pq: schema "myschema" already exists
ALTER SCHEMA another_one RENAME TO myschema

statement ok
ROLLBACK
