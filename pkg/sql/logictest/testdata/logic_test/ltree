statement ok
CREATE TABLE l (lt LTREE);

statement ok
CREATE TABLE la (lta LTREE[]);

statement ok
INSERT INTO l VALUES ('A'), ('A.B'), ('A.B.C'), ('A.B.D'), ('Z');

statement ok
INSERT INTO la VALUES (ARRAY['A', 'A.B']), (ARRAY['A.B.C', 'A.B.D', 'Z']), (ARRAY['X', 'Y']), (ARRAY[]), (ARRAY['']);

query T
SELECT * FROM l ORDER BY lt;
----
A
A.B
A.B.C
A.B.D
Z

query T
SELECT * FROM la ORDER BY lta;
----
{}
{""}
{A,A.B}
{A.B.C,A.B.D,Z}
{X,Y}

query T
SELECT pg_typeof(lt) FROM l LIMIT 1;
----
ltree

query T
SELECT pg_typeof(lta) FROM la LIMIT 1;
----
ltree[]

query error label length is 1001, must be at most 1000
INSERT INTO l VALUES (repeat('A', 1001)::LTREE)

query error number of ltree labels \(65536\) exceeds the maximum allowed \(65535\)
INSERT INTO l VALUES ((SELECT string_agg('A', '.') FROM generate_series(1, 65536))::LTREE)

query T
SELECT * FROM l WHERE lt @> 'A.B'::LTREE ORDER BY lt;
----
A
A.B

query T
SELECT * FROM l WHERE lt <@ 'A.B'::LTREE ORDER BY lt;
----
A.B
A.B.C
A.B.D

query T
SELECT * FROM la WHERE lta @> 'A.B'::LTREE ORDER BY lta;
----
{""}
{A,A.B}

query T
SELECT * FROM la WHERE lta <@ 'A.B'::LTREE ORDER BY lta;
----
{A,A.B}
{A.B.C,A.B.D,Z}

query B
SELECT 'A.B.C'::LTREE = 'A.B.C'
----
true

query B
SELECT 'A.B.C'::LTREE = 'A.B'
----
false

query B
SELECT 'A.B.C'::LTREE < 'A.B'
----
false

query B
SELECT 'A.B'::LTREE < 'A.B.C'
----
true

query B
SELECT ARRAY['A', 'A.B']::LTREE[] = ARRAY['A', 'A.B']
----
true

query B
SELECT ARRAY['A', 'A.B']::LTREE[] = ARRAY['A.B', 'A']
----
false

query B
SELECT ARRAY['A', 'A.B']::LTREE[] < ARRAY['A', 'A.B.C']
----
true

# In the future, LQUERY should be supported as a column type and usable type.
query error cannot use lquery type as table column
CREATE TABLE lq (lq LQUERY);

query error invalid cast: string -> lquery
SELECT '*{1,}.A'::LQUERY

# In the future, LTXTQUERY should be supported as a column type and usable type.
query error cannot use ltxtquery type as table column
CREATE TABLE ltq (ltq LTXTQUERY);

query error invalid cast: string -> ltxtquery
SELECT 'A & B'::LTXTQUERY;
