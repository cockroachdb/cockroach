# LogicTest: default parallel-stmts distsql distsql-metadata distsql-disk

subtest unlabeled_tuple

# TODO(bram): We don't pretty print tuples the same way as postgres. See #25522.
query TT colnames
SELECT (1, 2, 'hello', NULL, NULL), (true, NULL, (false, 6.6, false))
----
(1, 2, 'hello', NULL, NULL)  (true, NULL, (false, 6.6, false))
(1,2,'hello',,)              (true,,(false, 6.6, false))

query BBBBBBBBB colnames
SELECT
  (2, 2) < (1, 1),
  (2, 2) < (1, 2),
  (2, 2) < (1, 3),
  (2, 2) < (2, 1),
  (2, 2) < (2, 2),
  (2, 2) < (2, 3),
  (2, 2) < (3, 1),
  (2, 2) < (3, 2),
  (2, 2) < (3, 3)
----
(2, 2) < (1, 1)  (2, 2) < (1, 2)  (2, 2) < (1, 3)  (2, 2) < (2, 1)  (2, 2) < (2, 2)  (2, 2) < (2, 3)  (2, 2) < (3, 1)  (2, 2) < (3, 2)  (2, 2) < (3, 3)
false            false            false            false            false            true             true             true             true

query BBBBBBBBB colnames
SELECT
  (2, 2) > (1, 1),
  (2, 2) > (1, 2),
  (2, 2) > (1, 3),
  (2, 2) > (2, 1),
  (2, 2) > (2, 2),
  (2, 2) > (2, 3),
  (2, 2) > (3, 1),
  (2, 2) > (3, 2),
  (2, 2) > (3, 3)
----
(2, 2) > (1, 1)  (2, 2) > (1, 2)  (2, 2) > (1, 3)  (2, 2) > (2, 1)  (2, 2) > (2, 2)  (2, 2) > (2, 3)  (2, 2) > (3, 1)  (2, 2) > (3, 2)  (2, 2) > (3, 3)
true             true             true             true             false            false            false            false            false

query BBBBBBBBB colnames
SELECT
  (2, 2) <= (1, 1),
  (2, 2) <= (1, 2),
  (2, 2) <= (1, 3),
  (2, 2) <= (2, 1),
  (2, 2) <= (2, 2),
  (2, 2) <= (2, 3),
  (2, 2) <= (3, 1),
  (2, 2) <= (3, 2),
  (2, 2) <= (3, 3)
----
(2, 2) <= (1, 1)  (2, 2) <= (1, 2)  (2, 2) <= (1, 3)  (2, 2) <= (2, 1)  (2, 2) <= (2, 2)  (2, 2) <= (2, 3)  (2, 2) <= (3, 1)  (2, 2) <= (3, 2)  (2, 2) <= (3, 3)
false             false             false             false             true              true              true              true              true

query BBBBBBBBB colnames
SELECT
  (2, 2) >= (1, 1),
  (2, 2) >= (1, 2),
  (2, 2) >= (1, 3),
  (2, 2) >= (2, 1),
  (2, 2) >= (2, 2),
  (2, 2) >= (2, 3),
  (2, 2) >= (3, 1),
  (2, 2) >= (3, 2),
  (2, 2) >= (3, 3)
----
(2, 2) >= (1, 1)  (2, 2) >= (1, 2)  (2, 2) >= (1, 3)  (2, 2) >= (2, 1)  (2, 2) >= (2, 2)  (2, 2) >= (2, 3)  (2, 2) >= (3, 1)  (2, 2) >= (3, 2)  (2, 2) >= (3, 3)
true              true              true              true              true              false             false             false             false

query BBBBBBBBB colnames
SELECT
  (2, 2) = (1, 1),
  (2, 2) = (1, 2),
  (2, 2) = (1, 3),
  (2, 2) = (2, 1),
  (2, 2) = (2, 2),
  (2, 2) = (2, 3),
  (2, 2) = (3, 1),
  (2, 2) = (3, 2),
  (2, 2) = (3, 3)
----
(2, 2) = (1, 1)  (2, 2) = (1, 2)  (2, 2) = (1, 3)  (2, 2) = (2, 1)  (2, 2) = (2, 2)  (2, 2) = (2, 3)  (2, 2) = (3, 1)  (2, 2) = (3, 2)  (2, 2) = (3, 3)
false            false            false            false            true             false            false            false            false

query BBBBBBBBB colnames
SELECT
  (2, 2) != (1, 1),
  (2, 2) != (1, 2),
  (2, 2) != (1, 3),
  (2, 2) != (2, 1),
  (2, 2) != (2, 2),
  (2, 2) != (2, 3),
  (2, 2) != (3, 1),
  (2, 2) != (3, 2),
  (2, 2) != (3, 3)
----
(2, 2) != (1, 1)  (2, 2) != (1, 2)  (2, 2) != (1, 3)  (2, 2) != (2, 1)  (2, 2) != (2, 2)  (2, 2) != (2, 3)  (2, 2) != (3, 1)  (2, 2) != (3, 2)  (2, 2) != (3, 3)
true              true              true              true              false             true              true              true              true

query BBBB colnames
SELECT
  (1, 1) > (0, NULL),
  (1, 1) > (1, NULL),
  (1, 1) > (2, NULL),
  (1, 1) > (NULL, 0)
----
(1, 1) > (0, NULL)  (1, 1) > (1, NULL)  (1, 1) > (2, NULL)  (1, 1) > (NULL, 0)
true                NULL                false               NULL

statement error pq: tuples \(1, 2\), \(1, 'hi'\) are not comparable at index 2: unsupported comparison operator
SELECT (1, 2) > (1, 'hi')

statement error pq: expected tuple \(1, 2, 3\) to have a length of 2
SELECT (1, 2) > (1, 2, 3)

statement ok
CREATE TABLE t (a int, b int, c int)

statement ok
INSERT INTO t VALUES (1, 2, 3), (2, 3, 1), (3, 1, 2)

query III colnames
SELECT * FROM t ORDER BY a, b, c
----
a b c
1 2 3
2 3 1
3 1 2

query III colnames
SELECT * FROM t WHERE (a, b, c) > (1, 2, 3) ORDER BY a, b, c
----
a b c
2 3 1
3 1 2

query BB colnames
SELECT ((1, 2), 'equal') = ((1, 2.0), 'equal'), ((1, 2), 'equal') = ((1, 2.0), 'not equal')
----
((1, 2), 'equal') = ((1, 2.0), 'equal')  ((1, 2), 'equal') = ((1, 2.0), 'not equal')
true                                     false

query B colnames
SELECT ((1, 2), 'equal') = ((1, 2.1), 'equal')
----
((1, 2), 'equal') = ((1, 2.1), 'equal')
false

query B colnames
SELECT (ROW(POW(1, 10.0) + 9), 'a' || 'b') = (ROW(SQRT(100.0)), 'ab')
----
(ROW(pow(1, 10.0) + 9), 'a' || 'b') = (ROW(sqrt(100.0)), 'ab')
true

query B colnames
SELECT (ROW(SQRT(100.0)), 'ab') = (ROW(POW(1, 10.0) + 9), 'a' || 'b')
----
(ROW(sqrt(100.0)), 'ab') = (ROW(pow(1, 10.0) + 9), 'a' || 'b')
true

query error pq: tuples \(\(1, 2\), 'equal'\), \(\(1, 'huh'\), 'equal'\) are not comparable at index 1: tuples \(1, 2\), \(1, 'huh'\) are not comparable at index 2: unsupported comparison operator
SELECT ((1, 2), 'equal') = ((1, 'huh'), 'equal')

# Issue #3568

statement ok
CREATE TABLE kv (
  k INT PRIMARY KEY,
  v INT
)

statement ok
INSERT INTO kv VALUES (1, 2)

query II colnames
SELECT k, v FROM kv WHERE (k, v) = (1, 100)
----
k  v

query II colnames
SELECT k, v FROM kv WHERE (k, v) IN ((1, 100))
----
k  v

statement ok
DROP TABLE kv

# Issue #12295

query B colnames
SELECT 'foo' IN (x, 'aaa') FROM (SELECT 'foo' AS x)
----
'foo' IN (x, 'aaa')
true

query B colnames
SELECT 'foo' IN (x, 'zzz') FROM (SELECT 'foo' AS x)
----
'foo' IN (x, 'zzz')
true

# Subquery tuples are already sorted

query B colnames
SELECT 3 IN (SELECT c FROM t ORDER BY 1 ASC)
----
3 IN (SELECT c FROM t ORDER BY 1 ASC)
true

query B colnames
SELECT 4 IN (SELECT c FROM t ORDER BY 1 DESC)
----
4 IN (SELECT c FROM t ORDER BY 1 DESC)
false

query B colnames
SELECT (1, 2) IN (SELECT a, b FROM t ORDER BY 1 ASC, 2 ASC)
----
(1, 2) IN (SELECT a, b FROM t ORDER BY 1 ASC, 2 ASC)
true

query B colnames
SELECT (1, 2) IN (SELECT a, b FROM t ORDER BY 1 DESC, 2 DESC)
----
(1, 2) IN (SELECT a, b FROM t ORDER BY 1 DESC, 2 DESC)
true

statement ok
DROP TABLE t

# Issue #12302

query B colnames
SELECT 1 IN (2, NULL)
----
1 IN (2, NULL)
NULL

query B colnames
SELECT 1 IN (2, x) FROM (SELECT NULL AS x)
----
1 IN (2, x)
NULL

# Issue 10407: tuple comparisons should not require homogeneous types
query B colnames
SELECT (now(), 2) = ((now() :: timestamp), 2)
----
(now(), 2) = ((now()::TIMESTAMP), 2)
true

query B colnames
SELECT (1, 2) > (1.0, 2.0)
----
(1, 2) > (1.0, 2.0)
false

statement ok
CREATE TABLE uvw (
  u INT,
  v INT,
  w INT,
  INDEX (u,v,w)
)

statement ok
INSERT INTO uvw SELECT u, v, w FROM
  GENERATE_SERIES(0, 3) AS u,
  GENERATE_SERIES(0, 3) AS v,
  GENERATE_SERIES(0, 3) AS w;
UPDATE uvw SET u = NULL WHERE u = 0;
UPDATE uvw SET v = NULL WHERE v = 0;
UPDATE uvw SET w = NULL WHERE w = 0

query III colnames
SELECT * FROM uvw ORDER BY u, v, w
----
u     v     w
NULL  NULL  NULL
NULL  NULL  1
NULL  NULL  2
NULL  NULL  3
NULL  1     NULL
NULL  1     1
NULL  1     2
NULL  1     3
NULL  2     NULL
NULL  2     1
NULL  2     2
NULL  2     3
NULL  3     NULL
NULL  3     1
NULL  3     2
NULL  3     3
1     NULL  NULL
1     NULL  1
1     NULL  2
1     NULL  3
1     1     NULL
1     1     1
1     1     2
1     1     3
1     2     NULL
1     2     1
1     2     2
1     2     3
1     3     NULL
1     3     1
1     3     2
1     3     3
2     NULL  NULL
2     NULL  1
2     NULL  2
2     NULL  3
2     1     NULL
2     1     1
2     1     2
2     1     3
2     2     NULL
2     2     1
2     2     2
2     2     3
2     3     NULL
2     3     1
2     3     2
2     3     3
3     NULL  NULL
3     NULL  1
3     NULL  2
3     NULL  3
3     1     NULL
3     1     1
3     1     2
3     1     3
3     2     NULL
3     2     1
3     2     2
3     2     3
3     3     NULL
3     3     1
3     3     2
3     3     3

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM uvw WHERE (u, v, w) >= (1, 2, 3) ORDER BY u, v, w
----
render     ·         ·                  (u, v, w)                         +u,+v,+w
 │         render 0  test.public.uvw.u  ·                                 ·
 │         render 1  test.public.uvw.v  ·                                 ·
 │         render 2  test.public.uvw.w  ·                                 ·
 └── scan  ·         ·                  (u, v, w, rowid[hidden,omitted])  rowid!=NULL; weak-key(u,v,w,rowid); +u,+v,+w
·          table     uvw@uvw_u_v_w_idx  ·                                 ·
·          spans     /1/2/3-            ·                                 ·

query III colnames
SELECT * FROM uvw WHERE (u, v, w) >= (1, 2, 3) ORDER BY u, v, w
----
u  v     w
1  2     3
1  3     NULL
1  3     1
1  3     2
1  3     3
2  NULL  NULL
2  NULL  1
2  NULL  2
2  NULL  3
2  1     NULL
2  1     1
2  1     2
2  1     3
2  2     NULL
2  2     1
2  2     2
2  2     3
2  3     NULL
2  3     1
2  3     2
2  3     3
3  NULL  NULL
3  NULL  1
3  NULL  2
3  NULL  3
3  1     NULL
3  1     1
3  1     2
3  1     3
3  2     NULL
3  2     1
3  2     2
3  2     3
3  3     NULL
3  3     1
3  3     2
3  3     3

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM uvw WHERE (u, v, w) > (2, 1, 1) ORDER BY u, v, w
----
render     ·         ·                  (u, v, w)                         +u,+v,+w
 │         render 0  test.public.uvw.u  ·                                 ·
 │         render 1  test.public.uvw.v  ·                                 ·
 │         render 2  test.public.uvw.w  ·                                 ·
 └── scan  ·         ·                  (u, v, w, rowid[hidden,omitted])  rowid!=NULL; weak-key(u,v,w,rowid); +u,+v,+w
·          table     uvw@uvw_u_v_w_idx  ·                                 ·
·          spans     /2/1/2-            ·                                 ·

query III colnames
SELECT * FROM uvw WHERE (u, v, w) > (2, 1, 1) ORDER BY u, v, w
----
u  v     w
2  1     2
2  1     3
2  2     NULL
2  2     1
2  2     2
2  2     3
2  3     NULL
2  3     1
2  3     2
2  3     3
3  NULL  NULL
3  NULL  1
3  NULL  2
3  NULL  3
3  1     NULL
3  1     1
3  1     2
3  1     3
3  2     NULL
3  2     1
3  2     2
3  2     3
3  3     NULL
3  3     1
3  3     2
3  3     3

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM uvw WHERE (u, v, w) <= (2, 3, 1) ORDER BY u, v, w
----
render     ·         ·                       (u, v, w)                         +u,+v,+w
 │         render 0  test.public.uvw.u       ·                                 ·
 │         render 1  test.public.uvw.v       ·                                 ·
 │         render 2  test.public.uvw.w       ·                                 ·
 └── scan  ·         ·                       (u, v, w, rowid[hidden,omitted])  rowid!=NULL; weak-key(u,v,w,rowid); +u,+v,+w
·          table     uvw@uvw_u_v_w_idx       ·                                 ·
·          spans     /!NULL-/2/3/2           ·                                 ·
·          filter    (u, v, w) <= (2, 3, 1)  ·                                 ·

query III colnames
SELECT * FROM uvw WHERE (u, v, w) <= (2, 3, 1) ORDER BY u, v, w
----
u  v     w
1  NULL  NULL
1  NULL  1
1  NULL  2
1  NULL  3
1  1     NULL
1  1     1
1  1     2
1  1     3
1  2     NULL
1  2     1
1  2     2
1  2     3
1  3     NULL
1  3     1
1  3     2
1  3     3
2  1     NULL
2  1     1
2  1     2
2  1     3
2  2     NULL
2  2     1
2  2     2
2  2     3
2  3     1

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM uvw WHERE (u, v, w) < (2, 2, 2) ORDER BY u, v, w
----
render     ·         ·                      (u, v, w)                         +u,+v,+w
 │         render 0  test.public.uvw.u      ·                                 ·
 │         render 1  test.public.uvw.v      ·                                 ·
 │         render 2  test.public.uvw.w      ·                                 ·
 └── scan  ·         ·                      (u, v, w, rowid[hidden,omitted])  rowid!=NULL; weak-key(u,v,w,rowid); +u,+v,+w
·          table     uvw@uvw_u_v_w_idx      ·                                 ·
·          spans     /!NULL-/2/2/2          ·                                 ·
·          filter    (u, v, w) < (2, 2, 2)  ·                                 ·

query III colnames
SELECT * FROM uvw WHERE (u, v, w) < (2, 2, 2) ORDER BY u, v, w
----
u  v     w
1  NULL  NULL
1  NULL  1
1  NULL  2
1  NULL  3
1  1     NULL
1  1     1
1  1     2
1  1     3
1  2     NULL
1  2     1
1  2     2
1  2     3
1  3     NULL
1  3     1
1  3     2
1  3     3
2  1     NULL
2  1     1
2  1     2
2  1     3
2  2     1

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM uvw WHERE (u, v, w) != (1, 2, 3) ORDER BY u, v, w
----
render     ·         ·                       (u, v, w)                         +u,+v,+w
 │         render 0  test.public.uvw.u       ·                                 ·
 │         render 1  test.public.uvw.v       ·                                 ·
 │         render 2  test.public.uvw.w       ·                                 ·
 └── scan  ·         ·                       (u, v, w, rowid[hidden,omitted])  rowid!=NULL; weak-key(u,v,w,rowid); +u,+v,+w
·          table     uvw@uvw_u_v_w_idx       ·                                 ·
·          spans     -/1/2/3 /1/2/4-         ·                                 ·
·          filter    (u, v, w) != (1, 2, 3)  ·                                 ·

query III colnames
SELECT * FROM uvw WHERE (u, v, w) != (1, 2, 3) ORDER BY u, v, w
----
u     v     w
NULL  NULL  1
NULL  NULL  2
NULL  1     NULL
NULL  1     1
NULL  1     2
NULL  1     3
NULL  2     1
NULL  2     2
NULL  3     NULL
NULL  3     1
NULL  3     2
NULL  3     3
1     NULL  1
1     NULL  2
1     1     NULL
1     1     1
1     1     2
1     1     3
1     2     1
1     2     2
1     3     NULL
1     3     1
1     3     2
1     3     3
2     NULL  NULL
2     NULL  1
2     NULL  2
2     NULL  3
2     1     NULL
2     1     1
2     1     2
2     1     3
2     2     NULL
2     2     1
2     2     2
2     2     3
2     3     NULL
2     3     1
2     3     2
2     3     3
3     NULL  NULL
3     NULL  1
3     NULL  2
3     NULL  3
3     1     NULL
3     1     1
3     1     2
3     1     3
3     2     NULL
3     2     1
3     2     2
3     2     3
3     3     NULL
3     3     1
3     3     2
3     3     3

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM uvw WHERE (u, v, w) >= (1, NULL, 3) ORDER BY u, v, w
----
render     ·         ·                  (u, v, w)                         +u,+v,+w
 │         render 0  test.public.uvw.u  ·                                 ·
 │         render 1  test.public.uvw.v  ·                                 ·
 │         render 2  test.public.uvw.w  ·                                 ·
 └── scan  ·         ·                  (u, v, w, rowid[hidden,omitted])  rowid!=NULL; weak-key(u,v,w,rowid); +u,+v,+w
·          table     uvw@uvw_u_v_w_idx  ·                                 ·
·          spans     /2-                ·                                 ·

query III colnames
SELECT * FROM uvw WHERE (u, v, w) >= (1, NULL, 3) ORDER BY u, v, w
----
u  v     w
2  NULL  NULL
2  NULL  1
2  NULL  2
2  NULL  3
2  1     NULL
2  1     1
2  1     2
2  1     3
2  2     NULL
2  2     1
2  2     2
2  2     3
2  3     NULL
2  3     1
2  3     2
2  3     3
3  NULL  NULL
3  NULL  1
3  NULL  2
3  NULL  3
3  1     NULL
3  1     1
3  1     2
3  1     3
3  2     NULL
3  2     1
3  2     2
3  2     3
3  3     NULL
3  3     1
3  3     2
3  3     3

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM uvw WHERE (u, v, w) < (2, NULL, 3) ORDER BY u, v, w
----
render     ·         ·                  (u, v, w)                         +u,+v,+w
 │         render 0  test.public.uvw.u  ·                                 ·
 │         render 1  test.public.uvw.v  ·                                 ·
 │         render 2  test.public.uvw.w  ·                                 ·
 └── scan  ·         ·                  (u, v, w, rowid[hidden,omitted])  rowid!=NULL; weak-key(u,v,w,rowid); +u,+v,+w
·          table     uvw@uvw_u_v_w_idx  ·                                 ·
·          spans     /!NULL-/2          ·                                 ·

query III colnames
SELECT * FROM uvw WHERE (u, v, w) < (2, NULL, 3) ORDER BY u, v, w
----
u  v     w
1  NULL  NULL
1  NULL  1
1  NULL  2
1  NULL  3
1  1     NULL
1  1     1
1  1     2
1  1     3
1  2     NULL
1  2     1
1  2     2
1  2     3
1  3     NULL
1  3     1
1  3     2
1  3     3

statement ok
DROP TABLE uvw

# Regression test for #6390.
statement ok
CREATE TABLE abc (a INT, b INT, c INT, INDEX(a, b))

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM abc WHERE (a, b, c) > (1, 2, 3);
----
render           ·         ·                      (a, b, c)                          ·
 │               render 0  test.public.abc.a      ·                                  ·
 │               render 1  test.public.abc.b      ·                                  ·
 │               render 2  test.public.abc.c      ·                                  ·
 └── index-join  ·         ·                      (a, b, c, rowid[hidden,omitted])   rowid!=NULL; weak-key(a,b,rowid)
      ├── scan   ·         ·                      (a, b, c[omitted], rowid[hidden])  rowid!=NULL; weak-key(a,b,rowid)
      │          table     abc@abc_a_b_idx        ·                                  ·
      │          spans     /1/2-                  ·                                  ·
      │          filter    (a, b) >= (1, 2)       ·                                  ·
      └── scan   ·         ·                      (a, b, c, rowid[hidden,omitted])   ·
·                table     abc@primary            ·                                  ·
·                filter    (a, b, c) > (1, 2, 3)  ·                                  ·

statement ok
DROP TABLE abc

statement ok
CREATE TABLE abc (a INT, b INT, c INT, INDEX(a, b DESC, c))

query TTTTT
EXPLAIN (VERBOSE) SELECT * FROM abc WHERE (a, b, c) > (1, 2, 3)
----
render     ·         ·                      (a, b, c)                         ·
 │         render 0  test.public.abc.a      ·                                 ·
 │         render 1  test.public.abc.b      ·                                 ·
 │         render 2  test.public.abc.c      ·                                 ·
 └── scan  ·         ·                      (a, b, c, rowid[hidden,omitted])  rowid!=NULL; weak-key(a,b,c,rowid)
·          table     abc@abc_a_b_c_idx      ·                                 ·
·          spans     /1-                    ·                                 ·
·          filter    (a, b, c) > (1, 2, 3)  ·                                 ·

statement ok
DROP TABLE abc

subtest tuple_placeholders

statement ok
PREPARE x AS SELECT $1 = (1,2)

statement ok
PREPARE y AS SELECT (1,2) = $1

query B colnames
EXECUTE x((1,2))
----
$1 = (1, 2)
true

query B colnames
EXECUTE y((1,2))
----
(1, 2) = $1
true

query error expected EXECUTE parameter expression to have type tuple\{int, int\}, but '\(1, 2, 3\)' has type tuple\{int, int, int\}
EXECUTE x((1,2,3))

subtest labeled_tuple

# Selecting two tuples
query TT colnames
SELECT ((1, 2, 'hello', NULL, NULL) AS a1, b2, c3, d4, e5), ((true, NULL, (false, 6.6, false)) AS a1, b2, c3)
----
((1, 2, 'hello', NULL, NULL) AS a1, b2, c3, d4, e5)  ((true, NULL, (false, 6.6, false)) AS a1, b2, c3)
(1,2,'hello',,)                                      (true,,(false, 6.6, false))

# Comparing tuples
query BBB colnames
SELECT ((2, 2) AS a, b) < ((1, 1) AS c, d)
      ,((2, 2) AS a, b) < (1, 2)
      ,(2, 2) < ((1, 3) AS c, d)
----
((2, 2) AS a, b) < ((1, 1) AS c, d)  ((2, 2) AS a, b) < (1, 2)  (2, 2) < ((1, 3) AS c, d)
false                                false                      false

statement error pq: tuples \(\(1, 2\) AS a, b\), \(\(1, 'hi'\) AS c, d\) are not comparable at index 2: unsupported comparison operator: <int> > <string>
SELECT ((1, 2) AS a, b) > ((1, 'hi') AS c, d)

statement error pq: expected tuple \(\(1, 2, 3\) AS a, b, c\) to have a length of 2
SELECT ((1, 2) AS a, b, c) > ((1, 2, 3) AS a, b, c)

query BBBBBBBBBBBBBBBB colnames
SELECT ((((1, 2) AS a, b), 'value') AS c, d) = ((((1, 2) AS e, f), 'value') AS g, h) AS nnnn
      ,((((1, 2) AS a, b), 'value') AS c, d) = (((1, 2) AS e, f), 'value')           AS nnnu
      ,((((1, 2) AS a, b), 'value') AS c, d) = (((1, 2), 'value') AS g, h)           AS nnun
      ,((((1, 2) AS a, b), 'value') AS c, d) = ((1, 2), 'value')                     AS nnuu
      ,(((1, 2) AS a, b), 'value')           = ((((1, 2) AS e, f), 'value') AS g, h) AS nunn
      ,(((1, 2) AS a, b), 'value')           = (((1, 2) AS e, f), 'value')           AS nunu
      ,(((1, 2) AS a, b), 'value')           = (((1, 2), 'value') AS g, h)           AS nuun
      ,(((1, 2) AS a, b), 'value')           = ((1, 2), 'value')                     AS nuuu
      ,(((1, 2), 'value') AS c, d)           = ((((1, 2) AS e, f), 'value') AS g, h) AS unnn
      ,(((1, 2), 'value') AS c, d)           = (((1, 2) AS e, f), 'value')           AS unnu
      ,(((1, 2), 'value') AS c, d)           = (((1, 2), 'value') AS g, h)           AS unun
      ,(((1, 2), 'value') AS c, d)           = ((1, 2), 'value')                     AS unuu
      ,((1, 2), 'value')                     = ((((1, 2) AS e, f), 'value') AS g, h) AS uunn
      ,((1, 2), 'value')                     = (((1, 2) AS e, f), 'value')           AS uunu
      ,((1, 2), 'value')                     = (((1, 2), 'value') AS g, h)           AS uuun
      ,((1, 2), 'value')                     = ((1, 2), 'value')                     AS uuuu
----
nnnn  nnnu  nnun  nnuu  nunn  nunu  nuun  nuuu  unnn  unnu  unun  unuu  uunn  uunu  uuun  uuuu
true  true  true  true  true  true  true  true  true  true  true  true  true  true  true  true

query BB colnames
SELECT (((ROW(POW(1, 10.0) + 9) AS t1), 'a' || 'b') AS t2, t3) = (((ROW(SQRT(100.0)) AS t4), 'ab') AS t5, t6)
      ,(ROW(POW(1, 10.0) + 9), 'a' || 'b') = (((ROW(SQRT(100.0)) AS t4), 'ab') AS t5, t6)
----
(((ROW(pow(1, 10.0) + 9) AS t1), 'a' || 'b') AS t2, t3) = (((ROW(sqrt(100.0)) AS t4), 'ab') AS t5, t6)  (ROW(pow(1, 10.0) + 9), 'a' || 'b') = (((ROW(sqrt(100.0)) AS t4), 'ab') AS t5, t6)
true                                                                                                    true

query error pq: tuples \(\(\(\(1, 2\) AS a, b\), 'equal'\) AS c, d\), \(\(\(\(1, 'huh'\) AS e, f\), 'equal'\) AS g, h\) are not comparable at index 1: tuples \(\(1, 2\) AS a, b\), \(\(1, 'huh'\) AS e, f\) are not comparable at index 2: unsupported comparison operator: <int> = <string>
SELECT ((((1, 2) AS a, b), 'equal') AS c, d) = ((((1, 'huh') AS e, f), 'equal') AS g, h)

# Try giving everything the same name for a fairly well nested tuple.
query T colnames
SELECT ((((((1, '2', 3) AS a, a, a), ((4,'5') AS a, a), (ROW(6) AS a)) AS a, a, a), ((7, 8) AS a, a), (ROW('9') AS a)) AS a, a, a)
----
((((((1, '2', 3) AS a, a, a), ((4, '5') AS a, a), (ROW(6) AS a)) AS a, a, a), ((7, 8) AS a, a), (ROW('9') AS a)) AS a, a, a)
(((1, '2', 3), (4, '5'), (6)),(7, 8),('9'))
