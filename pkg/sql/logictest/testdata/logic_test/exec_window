# LogicTest: local-vec

statement ok
CREATE TABLE t (a INT, b INT, c INT PRIMARY KEY)

statement ok
INSERT INTO t VALUES
  (0, 1, 0),
  (1, 1, 1),
  (0, 2, 2),
  (1, 2, 3)

statement ok
SET vectorize=experimental_always

# Test that non-default window frames are not supported.
statement error window functions with non-default window frames are not supported
SELECT rank() OVER (ROWS UNBOUNDED PRECEDING) FROM t

statement error window functions with non-default window frames are not supported
SELECT rank() OVER (RANGE CURRENT ROW) FROM t

statement error window functions with non-default window frames are not supported
SELECT rank() OVER (ORDER BY a RANGE BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) FROM t

# We sort the output on all queries to get deterministic results.
query III
SELECT a, b, row_number() OVER (ORDER BY a, b) FROM t ORDER BY a, b
----
0 1 1
0 2 2
1 1 3
1 2 4

query III
SELECT a, b, row_number() OVER (PARTITION BY a ORDER BY b) FROM t ORDER BY a, b
----
0 1 1
0 2 2
1 1 1
1 2 2

query III
SELECT a, b, row_number() OVER (PARTITION BY a, b) FROM t ORDER BY a, b
----
0 1 1
0 2 1
1 1 1
1 2 1

query III
SELECT a, b, rank() OVER () FROM t ORDER BY a, b
----
0 1 1
0 2 1
1 1 1
1 2 1

query III
SELECT a, b, rank() OVER (ORDER BY a) FROM t ORDER BY a, b
----
0 1 1
0 2 1
1 1 3
1 2 3

query IIII
SELECT a, b, c, rank() OVER (PARTITION BY a ORDER BY c) FROM t ORDER BY a, b
----
0 1 0 1
0 2 2 2
1 1 1 1
1 2 3 2

query III
SELECT a, b, dense_rank() OVER () FROM t ORDER BY a, b
----
0 1 1
0 2 1
1 1 1
1 2 1

query III
SELECT a, b, dense_rank() OVER (ORDER BY a) FROM t ORDER BY a, b
----
0 1 1
0 2 1
1 1 2
1 2 2

query IIII
SELECT a, b, c, dense_rank() OVER (PARTITION BY a ORDER BY c) FROM t ORDER BY a, b
----
0 1 0 1
0 2 2 2
1 1 1 1
1 2 3 2
