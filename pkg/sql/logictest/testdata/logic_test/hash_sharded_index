statement ok
SET experimental_enable_hash_sharded_indexes = true

# Tests for creating a hash sharded primary key
statement ok 
CREATE TABLE sharded_primary (a INT PRIMARY KEY USING HASH WITH BUCKET_COUNT = 10)

query TT
SHOW CREATE TABLE sharded_primary
----
sharded_primary  CREATE TABLE public.sharded_primary (
                 crdb_internal_a_shard_10 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(a AS STRING), '':::STRING)), 10:::INT8)) STORED,
                 a INT8 NOT NULL,
                 CONSTRAINT "primary" PRIMARY KEY (a ASC) USING HASH WITH BUCKET_COUNT = 10,
                 FAMILY "primary" (crdb_internal_a_shard_10, a)
)

statement error pgcode 22023 BUCKET_COUNT must be an integer greater than 1
CREATE TABLE invalid_bucket_count (k INT PRIMARY KEY USING HASH WITH BUCKET_COUNT=-1)

statement error pgcode 22023 BUCKET_COUNT must be an integer greater than 1
CREATE TABLE invalid_bucket_count (k INT PRIMARY KEY USING HASH WITH BUCKET_COUNT=1)

statement error expected BUCKET_COUNT expression to have type int, but '2.32' has type decimal
CREATE TABLE fractional_bucket_count (k INT PRIMARY KEY USING HASH WITH BUCKET_COUNT=2.32)

statement error variable sub-expressions are not allowed in BUCKET_COUNT
CREATE TABLE invalid_bucket_count (k INT PRIMARY KEY USING HASH WITH BUCKET_COUNT=(SELECT 1))

# Ensure that this is round-tripable
statement ok
DROP TABLE sharded_primary

statement ok
CREATE TABLE sharded_primary (
                a INT8 NOT NULL,
                CONSTRAINT "primary" PRIMARY KEY (a ASC) USING HASH WITH BUCKET_COUNT = 10,
                FAMILY "primary" (crdb_internal_a_shard_10, a)
)

query TT
SHOW CREATE TABLE sharded_primary
----
sharded_primary  CREATE TABLE public.sharded_primary (
                 a INT8 NOT NULL,
                 crdb_internal_a_shard_10 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(a AS STRING), '':::STRING)), 10:::INT8)) STORED,
                 CONSTRAINT "primary" PRIMARY KEY (a ASC) USING HASH WITH BUCKET_COUNT = 10,
                 FAMILY "primary" (crdb_internal_a_shard_10, a)
)

query TTT colnames
SELECT
  tablename, indexname, indexdef
FROM pg_indexes
WHERE tablename = 'sharded_primary'
ORDER BY 1, 2, 3
----
tablename        indexname  indexdef
sharded_primary  primary    CREATE UNIQUE INDEX "primary" ON test.public.sharded_primary USING btree (a ASC)

query TTB
SELECT index_name, column_name, implicit FROM [SHOW INDEXES FROM sharded_primary]
ORDER BY index_name, seq_in_index
----
primary  crdb_internal_a_shard_10  true
primary  a                         false

query TTB colnames
SELECT index_name, column_name, implicit FROM crdb_internal.index_columns
WHERE descriptor_name = 'sharded_primary' AND column_type = 'key'
ORDER BY 1, 2
----
index_name  column_name               implicit
primary     a                         false
primary     crdb_internal_a_shard_10  true

statement ok
INSERT INTO sharded_primary values (1), (2), (3)

query error pq: duplicate key value violates unique constraint "primary"\nDETAIL: Key \(a\)=\(1\) already exists\.
INSERT INTO sharded_primary values (1)

# Ensure that the shard column is assigned into the column family of the first column in
# the index column set.
statement ok
CREATE TABLE specific_family (
    a INT,
    b INT,
    INDEX (b) USING HASH WITH BUCKET_COUNT=10,
    FAMILY "a_family" (a),
    FAMILY "b_family" (b)
)

query TT
SHOW CREATE TABLE specific_family
----
specific_family  CREATE TABLE public.specific_family (
                 a INT8 NULL,
                 b INT8 NULL,
                 crdb_internal_b_shard_10 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(b AS STRING), '':::STRING)), 10:::INT8)) STORED,
                 rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
                 CONSTRAINT "primary" PRIMARY KEY (rowid ASC),
                 INDEX specific_family_b_idx (b ASC) USING HASH WITH BUCKET_COUNT = 10,
                 FAMILY a_family (a, rowid),
                 FAMILY b_family (b, crdb_internal_b_shard_10)
)

# Tests for secondary sharded indexes
statement ok
CREATE TABLE sharded_secondary (a INT, INDEX (a) USING HASH WITH BUCKET_COUNT=4)

query TT
SHOW CREATE TABLE sharded_secondary
----
sharded_secondary  CREATE TABLE public.sharded_secondary (
                   a INT8 NULL,
                   crdb_internal_a_shard_4 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(a AS STRING), '':::STRING)), 4:::INT8)) STORED,
                   rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
                   CONSTRAINT "primary" PRIMARY KEY (rowid ASC),
                   INDEX sharded_secondary_a_idx (a ASC) USING HASH WITH BUCKET_COUNT = 4,
                   FAMILY "primary" (a, crdb_internal_a_shard_4, rowid)
)

statement ok
DROP TABLE sharded_secondary

statement ok
CREATE TABLE sharded_secondary (
                        a INT8 NULL,
                        INDEX sharded_secondary_crdb_internal_a_shard_4_a_idx (a ASC) USING HASH WITH BUCKET_COUNT = 4,
                        FAMILY "primary" (a, crdb_internal_a_shard_4, rowid)
)

query TT
SHOW CREATE TABLE sharded_secondary
----
sharded_secondary  CREATE TABLE public.sharded_secondary (
                   a INT8 NULL,
                   crdb_internal_a_shard_4 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(a AS STRING), '':::STRING)), 4:::INT8)) STORED,
                   rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
                   CONSTRAINT "primary" PRIMARY KEY (rowid ASC),
                   INDEX sharded_secondary_crdb_internal_a_shard_4_a_idx (a ASC) USING HASH WITH BUCKET_COUNT = 4,
                   FAMILY "primary" (a, crdb_internal_a_shard_4, rowid)
)

statement ok
INSERT INTO sharded_secondary values (1), (2), (1)

statement ok
DROP TABLE sharded_secondary

statement ok
CREATE TABLE sharded_secondary (
    a INT
)

statement ok
CREATE INDEX ON sharded_secondary (a) USING HASH WITH BUCKET_COUNT = 10

statement ok
INSERT INTO sharded_secondary values (1), (2), (1)

query TT
SHOW CREATE TABLE sharded_secondary
----
sharded_secondary  CREATE TABLE public.sharded_secondary (
                   a INT8 NULL,
                   rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
                   crdb_internal_a_shard_10 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(a AS STRING), '':::STRING)), 10:::INT8)) STORED,
                   CONSTRAINT "primary" PRIMARY KEY (rowid ASC),
                   INDEX sharded_secondary_a_idx (a ASC) USING HASH WITH BUCKET_COUNT = 10,
                   FAMILY "primary" (a, rowid, crdb_internal_a_shard_10)
)

statement ok
INSERT INTO sharded_secondary values (3), (2), (1)

# Test multiple indexes on the same column set
statement ok
CREATE INDEX ON sharded_secondary (a) USING HASH WITH BUCKET_COUNT = 4

query TT
SHOW CREATE TABLE sharded_secondary
----
sharded_secondary  CREATE TABLE public.sharded_secondary (
                   a INT8 NULL,
                   rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
                   crdb_internal_a_shard_10 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(a AS STRING), '':::STRING)), 10:::INT8)) STORED,
                   crdb_internal_a_shard_4 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(a AS STRING), '':::STRING)), 4:::INT8)) STORED,
                   CONSTRAINT "primary" PRIMARY KEY (rowid ASC),
                   INDEX sharded_secondary_a_idx (a ASC) USING HASH WITH BUCKET_COUNT = 10,
                   INDEX sharded_secondary_a_idx1 (a ASC) USING HASH WITH BUCKET_COUNT = 4,
                   FAMILY "primary" (a, rowid, crdb_internal_a_shard_10, crdb_internal_a_shard_4)
)

# Drop a sharded index and ensure that the shard column is dropped with it.
statement ok
DROP INDEX sharded_secondary_a_idx

query TT
SHOW CREATE TABLE sharded_secondary
----
sharded_secondary  CREATE TABLE public.sharded_secondary (
                   a INT8 NULL,
                   rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
                   crdb_internal_a_shard_4 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(a AS STRING), '':::STRING)), 4:::INT8)) STORED,
                   CONSTRAINT "primary" PRIMARY KEY (rowid ASC),
                   INDEX sharded_secondary_a_idx1 (a ASC) USING HASH WITH BUCKET_COUNT = 4,
                   FAMILY "primary" (a, rowid, crdb_internal_a_shard_4)
)

statement ok
DROP INDEX sharded_secondary_a_idx1


query TT
SHOW CREATE TABLE sharded_secondary
----
sharded_secondary  CREATE TABLE public.sharded_secondary (
                   a INT8 NULL,
                   rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
                   CONSTRAINT "primary" PRIMARY KEY (rowid ASC),
                   FAMILY "primary" (a, rowid)
)

# Ensure that the shard column cannot be used in the same txn if its dropped along with
# the sharded index.
statement ok
CREATE INDEX idx on sharded_secondary (a) USING HASH WITH BUCKET_COUNT = 3

statement ok
BEGIN

statement ok
SELECT crdb_internal_a_shard_3 FROM sharded_secondary

statement ok
DROP INDEX sharded_secondary@idx

statement error pq: column "crdb_internal_a_shard_3" does not exist
SELECT crdb_internal_a_shard_3 FROM sharded_secondary

statement ok
ROLLBACK

statement ok
DROP INDEX sharded_secondary@idx

# Ensure that multiple (> 2) identical indexes can be created.
statement ok
CREATE INDEX ON sharded_secondary (a) USING HASH WITH BUCKET_COUNT=10

statement ok
CREATE INDEX ON sharded_secondary (a) USING HASH WITH BUCKET_COUNT=10

statement ok
CREATE INDEX ON sharded_secondary (a) USING HASH WITH BUCKET_COUNT=10

query TT
SHOW CREATE TABLE sharded_secondary
----
sharded_secondary  CREATE TABLE public.sharded_secondary (
                   a INT8 NULL,
                   rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
                   crdb_internal_a_shard_10 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(a AS STRING), '':::STRING)), 10:::INT8)) STORED,
                   CONSTRAINT "primary" PRIMARY KEY (rowid ASC),
                   INDEX sharded_secondary_a_idx (a ASC) USING HASH WITH BUCKET_COUNT = 10,
                   INDEX sharded_secondary_a_idx1 (a ASC) USING HASH WITH BUCKET_COUNT = 10,
                   INDEX sharded_secondary_a_idx2 (a ASC) USING HASH WITH BUCKET_COUNT = 10,
                   FAMILY "primary" (a, rowid, crdb_internal_a_shard_10)
)


# Ensure that the table descriptor was left in a "valid" state
query I
SELECT count(*) FROM sharded_secondary
----
6

statement ok
CREATE INDEX ON sharded_primary (a) USING HASH WITH BUCKET_COUNT = 4;

query TT
SHOW CREATE TABLE sharded_primary
----
sharded_primary  CREATE TABLE public.sharded_primary (
                 a INT8 NOT NULL,
                 crdb_internal_a_shard_10 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(a AS STRING), '':::STRING)), 10:::INT8)) STORED,
                 crdb_internal_a_shard_4 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(a AS STRING), '':::STRING)), 4:::INT8)) STORED,
                 CONSTRAINT "primary" PRIMARY KEY (a ASC) USING HASH WITH BUCKET_COUNT = 10,
                 INDEX sharded_primary_a_idx (a ASC) USING HASH WITH BUCKET_COUNT = 4,
                 FAMILY "primary" (crdb_internal_a_shard_10, a, crdb_internal_a_shard_4)
)

statement ok
DROP INDEX sharded_primary_a_idx

statement ok
SELECT count(*) FROM sharded_primary

query TT
SHOW CREATE TABLE sharded_primary
----
sharded_primary  CREATE TABLE public.sharded_primary (
                 a INT8 NOT NULL,
                 crdb_internal_a_shard_10 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(a AS STRING), '':::STRING)), 10:::INT8)) STORED,
                 CONSTRAINT "primary" PRIMARY KEY (a ASC) USING HASH WITH BUCKET_COUNT = 10,
                 FAMILY "primary" (crdb_internal_a_shard_10, a)
)

statement ok
CREATE INDEX on sharded_primary (a) USING HASH WITH BUCKET_COUNT=10;

query TT
SHOW CREATE TABLE sharded_primary
----
sharded_primary  CREATE TABLE public.sharded_primary (
                 a INT8 NOT NULL,
                 crdb_internal_a_shard_10 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(a AS STRING), '':::STRING)), 10:::INT8)) STORED,
                 CONSTRAINT "primary" PRIMARY KEY (a ASC) USING HASH WITH BUCKET_COUNT = 10,
                 INDEX sharded_primary_a_idx (a ASC) USING HASH WITH BUCKET_COUNT = 10,
                 FAMILY "primary" (crdb_internal_a_shard_10, a)
)

statement ok
DROP INDEX sharded_primary_a_idx

# Ensure that the table descriptor was left in a "valid" state
statement ok
SELECT count(*) FROM sharded_primary

statement ok
DROP TABLE sharded_secondary

statement ok
CREATE TABLE sharded_secondary (a INT8, INDEX (a) USING HASH WITH BUCKET_COUNT=12)

# Ensure that hash sharded indexes can be created on columns that are added in the same
# statement, just like non-sharded indexes.
statement ok
BEGIN TRANSACTION

statement ok
ALTER TABLE sharded_secondary ADD COLUMN b INT

statement ok
CREATE INDEX ON sharded_secondary (a, b) USING HASH WITH BUCKET_COUNT=12

statement ok
COMMIT TRANSACTION

# Ensure that sharded indexes cannot be created on computed columns
statement ok
ALTER TABLE sharded_secondary ADD COLUMN c INT AS (mod(a, 100)) STORED

statement error cannot create a sharded index on a computed column
CREATE INDEX ON sharded_secondary (a, c) USING HASH WITH BUCKET_COUNT=12;

# Ensure that sharded indexes cannot be created on computed columns 
# in the same txn
statement error cannot create a sharded index on a computed column
CREATE TABLE shard_on_computed_column (
    a INT,
    b INT AS (a % 5) STORED,
    INDEX (b) USING HASH WITH BUCKET_COUNT=10
)

statement ok
BEGIN TRANSACTION

statement ok
ALTER TABLE sharded_secondary ADD COLUMN d INT AS (mod(a, 100)) STORED

statement error cannot create a sharded index on a computed column
CREATE INDEX ON sharded_secondary (a, d) USING HASH WITH BUCKET_COUNT=12;

statement ok
ROLLBACK TRANSACTION

# Ensure that the shard column isn't dropped even if its being used by a non-sharded index
statement ok
CREATE TABLE column_used_on_unsharded (
    a INT,
    INDEX foo (a) USING HASH WITH BUCKET_COUNT=10
)

statement ok
CREATE INDEX on column_used_on_unsharded (crdb_internal_a_shard_10)

statement ok
DROP INDEX column_used_on_unsharded@foo

query TT
SHOW CREATE TABLE column_used_on_unsharded
----
column_used_on_unsharded  CREATE TABLE public.column_used_on_unsharded (
                          a INT8 NULL,
                          crdb_internal_a_shard_10 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(a AS STRING), '':::STRING)), 10:::INT8)) STORED,
                          rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
                          CONSTRAINT "primary" PRIMARY KEY (rowid ASC),
                          INDEX column_used_on_unsharded_crdb_internal_a_shard_10_idx (crdb_internal_a_shard_10 ASC),
                          FAMILY "primary" (a, crdb_internal_a_shard_10, rowid)
)

statement ok
DROP INDEX column_used_on_unsharded_crdb_internal_a_shard_10_idx

statement ok
CREATE TABLE column_used_on_unsharded_create_table (
    a INT,
    INDEX foo (a) USING HASH WITH BUCKET_COUNT=10,
    INDEX (crdb_internal_a_shard_10)
)

statement ok
DROP INDEX column_used_on_unsharded_create_table@foo

query TT
SHOW CREATE TABLE column_used_on_unsharded_create_table
----
column_used_on_unsharded_create_table  CREATE TABLE public.column_used_on_unsharded_create_table (
                                       a INT8 NULL,
                                       crdb_internal_a_shard_10 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(a AS STRING), '':::STRING)), 10:::INT8)) STORED,
                                       rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
                                       CONSTRAINT "primary" PRIMARY KEY (rowid ASC),
                                       INDEX column_used_on_unsharded_create_table_crdb_internal_a_shard_10_idx (crdb_internal_a_shard_10 ASC),
                                       FAMILY "primary" (a, crdb_internal_a_shard_10, rowid)
)

statement ok
DROP INDEX column_used_on_unsharded_create_table_crdb_internal_a_shard_10_idx

statement ok
DROP TABLE sharded_primary

statement ok
SET experimental_enable_hash_sharded_indexes = false

statement error pq: hash sharded indexes require the experimental_enable_hash_sharded_indexes session variable
CREATE TABLE disabled (k INT PRIMARY KEY USING HASH WITH BUCKET_COUNT = 10)

statement ok
CREATE TABLE disabled_secondary (k INT, v BYTES)

statement error pq: hash sharded indexes require the experimental_enable_hash_sharded_indexes session variable
CREATE INDEX failure on disabled_secondary (k) USING HASH WITH BUCKET_COUNT = 12

statement error pq: hash sharded indexes require the experimental_enable_hash_sharded_indexes session variable
CREATE TABLE disabled (k INT, INDEX (k) USING HASH WITH BUCKET_COUNT = 10)

# Ensure everything works with weird column names
statement ok
SET experimental_enable_hash_sharded_indexes = true

statement ok
CREATE TABLE weird_names (
    "I am a column with spaces" INT PRIMARY KEY USING HASH WITH BUCKET_COUNT = 12,
    "'quotes' in the column's name" INT,
    FAMILY "primary" ("I am a column with spaces", "'quotes' in the column's name")
    )

statement ok
CREATE INDEX foo on weird_names ("'quotes' in the column's name") USING HASH WITH BUCKET_COUNT = 4

statement ok
INSERT INTO weird_names VALUES (1, 2)

query I
SELECT count(*) from weird_names WHERE "'quotes' in the column's name" = 2
----
1

query TT
SHOW CREATE TABLE weird_names
----
weird_names  CREATE TABLE public.weird_names (
             "crdb_internal_I am a column with spaces_shard_12" INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST("I am a column with spaces" AS STRING), '':::STRING)), 12:::INT8)) STORED,
             "I am a column with spaces" INT8 NOT NULL,
             "'quotes' in the column's name" INT8 NULL,
             "crdb_internal_'quotes' in the column's name_shard_4" INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST("'quotes' in the column's name" AS STRING), '':::STRING)), 4:::INT8)) STORED,
             CONSTRAINT "primary" PRIMARY KEY ("I am a column with spaces" ASC) USING HASH WITH BUCKET_COUNT = 12,
             INDEX foo ("'quotes' in the column's name" ASC) USING HASH WITH BUCKET_COUNT = 4,
             FAMILY "primary" ("I am a column with spaces", "'quotes' in the column's name", "crdb_internal_I am a column with spaces_shard_12", "crdb_internal_'quotes' in the column's name_shard_4")
)

subtest interleave_disabled

statement ok
CREATE TABLE parent (x INT PRIMARY KEY);

statement error pq: interleaved indexes cannot also be hash sharded
CREATE TABLE t (x INT PRIMARY KEY USING HASH WITH BUCKET_COUNT = 10) INTERLEAVE IN PARENT parent (x)

statement error pq: interleaved indexes cannot also be hash sharded
CREATE TABLE t (x INT, y INT, PRIMARY KEY (x, y) USING HASH WITH BUCKET_COUNT = 10) INTERLEAVE IN PARENT parent (x)

statement error pq: interleaved indexes cannot also be hash sharded
CREATE INDEX ON parent (x) USING HASH WITH BUCKET_COUNT = 10 INTERLEAVE IN PARENT parent(x)

statement ok
DROP TABLE parent;

# This test ensures that the appropriate error is returned when trying to create
# a hash sharded index with a column which does not exist.
subtest column_does_not_exist

statement ok
CREATE TABLE t0();

statement error column "c0" does not exist
CREATE INDEX ON t0 (c0) USING HASH WITH BUCKET_COUNT = 8;

statement ok
DROP TABLE t0;

# Test that creating an index on a column which is currently being dropped
# causes an error.
subtest create_hash_index_on_dropping_column

statement ok
CREATE TABLE create_idx_drop_column (c0 INT PRIMARY KEY, c1 INT);

statement ok
begin; ALTER TABLE create_idx_drop_column DROP COLUMN c1;

statement error column "c1" does not exist
CREATE INDEX idx_create_idx_drop_column ON create_idx_drop_column (c1) USING HASH WITH BUCKET_COUNT = 8;

statement ok
ROLLBACK;

statement ok
DROP TABLE create_idx_drop_column;

# Test that NULL values can be a part of a hash-sharded index.
subtest null_values_in_sharded_columns

statement ok
CREATE TABLE sharded_index_with_nulls (
     a INT8 PRIMARY KEY,
     b INT8,
     INDEX (b) USING HASH WITH BUCKET_COUNT = 8
)

statement ok
INSERT INTO sharded_index_with_nulls VALUES (1, NULL);

statement ok
DROP TABLE sharded_index_with_nulls;

# Test that renaming a column which is a member of a hash sharded index works.
subtest rename_column

statement ok
CREATE TABLE rename_column (
    c0 INT,
    c1 INT,
    c2 INT,
    PRIMARY KEY (c0, c1) USING HASH WITH BUCKET_COUNT = 8,
    INDEX (c2) USING HASH WITH BUCKET_COUNT = 8,
    FAMILY "primary" (c0, c1, c2)
);

statement ok
INSERT INTO rename_column VALUES (1, 2, 3);

query TT
SHOW CREATE TABLE rename_column
----
rename_column  CREATE TABLE public.rename_column (
               c0 INT8 NOT NULL,
               c1 INT8 NOT NULL,
               c2 INT8 NULL,
               crdb_internal_c0_c1_shard_8 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(c0 AS STRING), '':::STRING)) + fnv32(COALESCE(CAST(c1 AS STRING), '':::STRING)), 8:::INT8)) STORED,
               crdb_internal_c2_shard_8 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(c2 AS STRING), '':::STRING)), 8:::INT8)) STORED,
               CONSTRAINT "primary" PRIMARY KEY (c0 ASC, c1 ASC) USING HASH WITH BUCKET_COUNT = 8,
               INDEX rename_column_c2_idx (c2 ASC) USING HASH WITH BUCKET_COUNT = 8,
               FAMILY "primary" (c0, c1, c2, crdb_internal_c0_c1_shard_8, crdb_internal_c2_shard_8)
)

statement ok
ALTER TABLE rename_column RENAME c2 TO c3;

# Test mucking with primary key columns.
statement ok
ALTER TABLE rename_column RENAME c1 TO c2;

statement ok
ALTER TABLE rename_column RENAME c0 TO c1;

query TT
SHOW CREATE TABLE rename_column
----
rename_column  CREATE TABLE public.rename_column (
               c1 INT8 NOT NULL,
               c2 INT8 NOT NULL,
               c3 INT8 NULL,
               crdb_internal_c1_c2_shard_8 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(c1 AS STRING), '':::STRING)) + fnv32(COALESCE(CAST(c2 AS STRING), '':::STRING)), 8:::INT8)) STORED,
               crdb_internal_c3_shard_8 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(c3 AS STRING), '':::STRING)), 8:::INT8)) STORED,
               CONSTRAINT "primary" PRIMARY KEY (c1 ASC, c2 ASC) USING HASH WITH BUCKET_COUNT = 8,
               INDEX rename_column_c2_idx (c3 ASC) USING HASH WITH BUCKET_COUNT = 8,
               FAMILY "primary" (c1, c2, c3, crdb_internal_c1_c2_shard_8, crdb_internal_c3_shard_8)
)

query III
SELECT c3, c2, c1 FROM rename_column
----
3 2 1

# Test both at the same time.
statement ok
ALTER TABLE rename_column RENAME c1 TO c0, RENAME c2 TO c1, RENAME c3 TO c2;

query TT
SHOW CREATE TABLE rename_column
----
rename_column  CREATE TABLE public.rename_column (
               c0 INT8 NOT NULL,
               c1 INT8 NOT NULL,
               c2 INT8 NULL,
               crdb_internal_c0_c1_shard_8 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(c0 AS STRING), '':::STRING)) + fnv32(COALESCE(CAST(c1 AS STRING), '':::STRING)), 8:::INT8)) STORED,
               crdb_internal_c2_shard_8 INT4 NOT VISIBLE NOT NULL AS (mod(fnv32(COALESCE(CAST(c2 AS STRING), '':::STRING)), 8:::INT8)) STORED,
               CONSTRAINT "primary" PRIMARY KEY (c0 ASC, c1 ASC) USING HASH WITH BUCKET_COUNT = 8,
               INDEX rename_column_c2_idx (c2 ASC) USING HASH WITH BUCKET_COUNT = 8,
               FAMILY "primary" (c0, c1, c2, crdb_internal_c0_c1_shard_8, crdb_internal_c2_shard_8)
)

query III
SELECT c2, c1, c0 FROM rename_column
----
3 2 1

# Ensure that renaming a shard column fails.
statement error cannot rename shard column
ALTER TABLE rename_column RENAME crdb_internal_c2_shard_8 TO foo;

statement ok
DROP TABLE rename_column;

# This is a regression test for a bug whereby the dropping of a hash column
# could result in an invalid descriptor and would fail. The underlying bug was
# due to a column descriptor pointer to a slice being clobbered. See #55766.
subtest drop_earlier_column_due_to_hash_sharded_index

statement ok
CREATE TABLE IF NOT EXISTS drop_earlier_hash_column (
    i INT PRIMARY KEY,
    j INT,
    k INT
);

statement ok
CREATE INDEX h1 ON drop_earlier_hash_column(j) USING HASH WITH BUCKET_COUNT = 8

statement ok
CREATE INDEX h2 ON drop_earlier_hash_column(k) USING HASH WITH BUCKET_COUNT = 8

statement ok
DROP INDEX h1
