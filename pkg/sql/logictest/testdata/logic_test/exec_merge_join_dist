# LogicTest: 5node-dist-vec

# Regression test for #39317.

statement ok
CREATE TABLE l (a INT PRIMARY KEY, b INT)

statement ok
CREATE TABLE r (a INT PRIMARY KEY, b INT)

statement ok
INSERT INTO l VALUES (1, 10), (2, 20), (3, 30)

statement ok
INSERT INTO r VALUES (2, 200), (3, 300), (4, 400)

statement ok
ALTER TABLE l SPLIT AT VALUES (2), (3)

statement ok
ALTER TABLE r SPLIT AT VALUES (2), (3)

statement ok
ALTER TABLE l EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 2), (ARRAY[3], 3)

statement ok
ALTER TABLE r EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 2), (ARRAY[2], 3), (ARRAY[3], 1)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder from [SHOW EXPERIMENTAL_RANGES FROM TABLE l] ORDER BY lease_holder
----
start_key  end_key  replicas  lease_holder
NULL       /2       {1}       1
/2         /3       {2}       2
/3         NULL     {3}       3

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder from [SHOW EXPERIMENTAL_RANGES FROM TABLE r] ORDER BY lease_holder
----
start_key  end_key  replicas  lease_holder
/2         /3       {1}       1
/3         NULL     {2}       2
NULL       /2       {3}       3

query T
SELECT url FROM [EXPLAIN (DISTSQL, TYPES) SELECT * FROM l LEFT OUTER JOIN r USING(a) WHERE a = 2]
----
https://cockroachdb.github.io/distsqlplan/decode.html#eJzEk1GLm0AQx9_7KZbpS9LuoWvsi3Bgab3WI6eperTl8GEvThPBc-3uCg0h3724HqSmiSRwcC_i7s7vv_Ofmd2C-l2BB2kwDz5lpJUVuUniO_IQ_FjMP4YRmXwO0yz9Nqck-7kI0il5jnzXx1VkHtxk5DYOIyLJfRpGX8iET8n3r0ESEE6uiZMDhVoUGPEnVOA9AAMKDuQUGimWqJSQ3fbWBIXFH_BsCmXdtLrbzikshUTwtqBLXSF4kPHHChPkBUqr0ypQ87Iy0o0sn7jc-BIopA2vlUcs58pyrLeQ7yiIVj_L7tUeN2TN1Xqo4zPIdzkFpfkKwXN29ER6e522FrJAicVQqaw1UPPNO5ELoo84v0O5wltR1iit2ZDMNg16fTPi-yxITEuAQoW_9MRn76fXslyt-1-gELfaIz6jvkN996A2e9-zl_A94icSV6Kx3AF5Khd3kAs7f0Ts4yNSveyIsJPpvd6IOK86IkeSS1A1olZ4VsPtzh4WK-yLqEQrl7iQYmmu6Zex4Uy9C1S6P3X7RVibI_N2z4fZOMwOYftf2BnA7BB2RuEPA9g-hGcXeP7v5nGYjcPuRZ7z3Zu_AQAA___kZwi5

query T
EXPLAIN (VEC, VERBOSE) SELECT * FROM l LEFT OUTER JOIN r USING(a) WHERE a = 2
----
│
├ Node 1
│ └ *colexec.Materializer
│   └ *colexec.noopOperator
│     └ *colexec.ParallelUnorderedSynchronizer
│       ├ *colrpc.Inbox
│       └ *colexec.mergeJoinLeftOuterOp
│         ├ *colrpc.Inbox
│         └ *colexec.routerOutputOp
│           └ *colexec.HashRouter
│             └ *colexec.CancelChecker
│               └ *colexec.colBatchScan
└ Node 2
  └ *colrpc.Outbox
    └ *colexec.deselectorOp
      └ *colexec.mergeJoinLeftOuterOp
        ├ *colexec.routerOutputOp
        │ └ *colexec.HashRouter
        │   └ *colexec.CancelChecker
        │     └ *colexec.colBatchScan
        └ *colrpc.Inbox

query III
SELECT * FROM l LEFT OUTER JOIN r USING(a) WHERE a = 2
----
2 20 200

# Test that LEFT SEMI merge join outputs batches only with the columns from the
# left side.
query II rowsort
SELECT * FROM l WHERE EXISTS(SELECT * FROM r WHERE r.a=l.a)
----
2  20
3  30
