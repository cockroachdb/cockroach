# LogicTest: 5node

# Regression test for #39317.

statement ok
CREATE TABLE l (a INT PRIMARY KEY, b INT, FAMILY (a, b))

statement ok
CREATE TABLE r (a INT PRIMARY KEY, b INT, FAMILY (a, b))

statement ok
INSERT INTO l VALUES (1, 10), (2, 20), (3, 30)

statement ok
INSERT INTO r VALUES (2, 200), (3, 300), (4, 400)

statement ok
ALTER TABLE l SPLIT AT VALUES (2), (3)

statement ok
ALTER TABLE r SPLIT AT VALUES (2), (3)

statement ok
ALTER TABLE l EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1), (ARRAY[2], 2), (ARRAY[3], 3)

statement ok
ALTER TABLE r EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 2), (ARRAY[2], 3), (ARRAY[3], 1)

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder from [SHOW EXPERIMENTAL_RANGES FROM TABLE l] ORDER BY lease_holder
----
start_key  end_key  replicas  lease_holder
NULL       /2       {1}       1
/2         /3       {2}       2
/3         NULL     {3}       3

query TTTI colnames
SELECT start_key, end_key, replicas, lease_holder from [SHOW EXPERIMENTAL_RANGES FROM TABLE r] ORDER BY lease_holder
----
start_key  end_key  replicas  lease_holder
/2         /3       {1}       1
/3         NULL     {2}       2
NULL       /2       {3}       3

query T
EXPLAIN (DISTSQL) SELECT * FROM l LEFT OUTER JOIN r USING(a) WHERE a = 2
----
distribution: full
vectorized: true
·
• merge join (left outer)
│ equality: (a) = (a)
│ left cols are key
│ right cols are key
│
├── • scan
│     missing stats
│     table: l@primary
│     spans: [/2 - /2]
│
└── • scan
      missing stats
      table: r@primary
      spans: [/2 - /2]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJzEk9GPk0AQxt_9KzbjS6t7gd3iyyaXYJRTLj04gYsmhoe9MrYkHIu7S2LT9H83gEkFe7UXo76xu_P7Zr5vwg7M1woEBJ9ul6_DiMzehmmWfljOSRosgzcZeUGukviGVGQZXGXkOg4josldGkbvyEzOycf3QRIQSS4JBwq1KjCSD2hAfAYGFDjkFBqtVmiM0t31ri8Ki28gXApl3bS2u84prJRGEDuwpa0QBGTyvsIEZYHa6bQKtLKsemntN7p8kHoLFNJG1kYQh1843HkO-Z6Cau0P2YPa_ZZspNmMdXwG-T6nYKxcIwi-p4-Md9Bpa6UL1FiMlPKO_F3JEY83qNd4rcoatbMYz5ZtGxRD6vFdFiR99kChwi925rOX80tdrjfDJ1CIWyuIz6jPqe9NUjg4XPyBwyPjR-pCNY43jeJoa2_Ump2_e3ecS_V3ds8eHe9f7J7_190fGS5B06ja4FmrdTt7WKxxiMuoVq_wVqtV32Y4xj3XJ1ugscOrNxzCun_qf7_zYXYaZlPY_RnmI5hNYX4SfjWC3Sm8eILnXzqfhtlp2HuS53z_7HsAAAD___ZW7z0=

# Test that we can handle merge joins with equality columns of integers with
# different widths.
statement ok
CREATE TABLE numbers (_int2 INT2, _int4 INT4, _int8 INT8, _float FLOAT, _decimal DECIMAL);
INSERT INTO numbers VALUES (1, 1, 1, 1, 1)

# Place the single range on node 1 for determinism.
statement ok
ALTER TABLE numbers EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 1)

query T
EXPLAIN (VEC) SELECT * FROM numbers AS t1 INNER MERGE JOIN numbers AS t2 ON t1._int2 = t2._int4
----
│
└ Node 1
  └ *colexec.mergeJoinInnerOp
    ├ *colexec.castInt16Int32Op
    │ └ *colexec.sortOp
    │   └ *colfetcher.ColBatchScan
    └ *colexec.sortOp
      └ *colfetcher.ColBatchScan

query T
EXPLAIN (VEC) SELECT * FROM numbers AS t1 INNER MERGE JOIN numbers AS t2 ON t1._int8 = t2._int2
----
│
└ Node 1
  └ *colexec.mergeJoinInnerOp
    ├ *colexec.sortOp
    │ └ *colfetcher.ColBatchScan
    └ *colexec.castInt16Int64Op
      └ *colexec.sortOp
        └ *colfetcher.ColBatchScan

# Also check that we cannot plan a merge join with other numeric types.
statement error could not produce a query plan conforming to the MERGE JOIN hint
EXPLAIN SELECT * FROM numbers AS t1 INNER MERGE JOIN numbers AS t2 ON t1._int8 = t2._float

statement error could not produce a query plan conforming to the MERGE JOIN hint
EXPLAIN SELECT * FROM numbers AS t1 INNER MERGE JOIN numbers AS t2 ON t1._int8 = t2._decimal

statement error could not produce a query plan conforming to the MERGE JOIN hint
EXPLAIN SELECT * FROM numbers AS t1 INNER MERGE JOIN numbers AS t2 ON t1._float = t2._decimal
