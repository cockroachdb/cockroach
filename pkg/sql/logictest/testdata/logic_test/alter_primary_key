statement ok
SET experimental_enable_primary_key_changes = true

statement ok
CREATE TABLE t (x INT PRIMARY KEY, y INT NOT NULL, z INT NOT NULL, w INT, INDEX i (x), INDEX i2 (z))

statement ok
INSERT INTO t VALUES (1, 2, 3, 4), (5, 6, 7, 8)

statement ok
ALTER TABLE t ALTER PRIMARY KEY USING COLUMNS (y, z)

query IIII rowsort
SELECT * FROM t@primary
----
1 2 3 4
5 6 7 8

statement ok
INSERT INTO t VALUES (9, 10, 11, 12)

query IIII rowsort
SELECT * from t@primary
----
1 2 3 4
5 6 7 8
9 10 11 12

statement ok
UPDATE t SET x = 2 WHERE z = 7

query IIII rowsort
SELECT * from t@primary
----
1 2 3 4
2 6 7 8
9 10 11 12

# Test primary key changes on storing indexes with different column families (the randomizer will do this for us).
statement ok
DROP TABLE t;
CREATE TABLE t (
  x INT PRIMARY KEY, y INT, z INT NOT NULL, w INT, v INT,
  INDEX i1 (y) STORING (w, v), INDEX i2 (z) STORING (y, v)
);
INSERT INTO t VALUES (1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15);
ALTER TABLE t ALTER PRIMARY KEY USING COLUMNS (z);
INSERT INTO t VALUES (16, 17, 18, 19, 20)

query III rowsort
SELECT y, w, v FROM t@i1
----
2 4 5
7 9 10
12 14 15
17 19 20

query III rowsort
SELECT y, z, v FROM t@i2
----
2 3 5
7 8 10
12 13 15
17 18 20

# Test that composite values are encoded correctly in covering indexes.
statement ok
CREATE TABLE t_composite (x INT PRIMARY KEY, y DECIMAL NOT NULL);
INSERT INTO t_composite VALUES (1, 1.0), (2, 1.001)

statement ok
ALTER TABLE t_composite ALTER PRIMARY KEY USING COLUMNS (y)

query IT rowsort
SELECT * FROM t_composite@primary
----
1 1.0
2 1.001

# Test that we can drop tables after a primary key change.
statement ok
DROP TABLE t_composite

# Test altering a primary key interleaving into another table.
statement ok
CREATE TABLE parent (x INT, y INT, PRIMARY KEY (x, y), FAMILY (x, y));
CREATE TABLE child (x INT PRIMARY KEY, y INT NOT NULL, z INT NOT NULL, FAMILY (x, y, z));
INSERT INTO parent VALUES (1, 2), (4, 5);
INSERT INTO child VALUES (1, 2, 3), (4, 5, 6);
ALTER TABLE child ALTER PRIMARY KEY USING COLUMNS (x, y, z) INTERLEAVE IN PARENT parent(x, y)

query TT
SHOW CREATE child
----
child  CREATE TABLE child (
           x INT8 NOT NULL,
           y INT8 NOT NULL,
           z INT8 NOT NULL,
           CONSTRAINT "primary" PRIMARY KEY (x ASC, y ASC, z ASC),
           UNIQUE INDEX old_primary_key (x ASC),
           FAMILY fam_0_x_y_z (x, y, z)
       ) INTERLEAVE IN PARENT parent (x, y)


query II rowsort
SELECT * FROM parent
----
1 2
4 5

query TTT
SELECT * FROM [EXPLAIN SELECT * FROM child WHERE x >= 1 AND x < 5 AND y >= 2 AND y <= 6] OFFSET 2
----
scan  ·            ·
·     table        child@primary
·     spans        /1/2/#/57/2-/4/6/#/57/3
·     filter       (y >= 2) AND (y <= 6)

query III rowsort
SELECT * FROM child WHERE x >= 1 AND x < 5 AND y >= 2 AND y <= 6
----
1 2 3
4 5 6

statement error pq: cannot change the primary key of an interleaved parent
ALTER TABLE parent ALTER PRIMARY KEY USING COLUMNS (x)

statement error pq: unimplemented: "parent" is interleaved by table "child"
DROP TABLE parent

statement ok
DROP TABLE parent CASCADE

# Test that we can change the primary key of an interleaved child.
statement ok
DROP TABLE IF EXISTS child;
CREATE TABLE parent (x INT, y INT, PRIMARY KEY (x, y), FAMILY (x, y));
CREATE TABLE child (
  x INT, y INT NOT NULL, z INT NOT NULL,
  FAMILY (x, y, z), PRIMARY KEY (x, y, z)
) INTERLEAVE IN PARENT parent (x, y);
INSERT INTO parent VALUES (1, 2), (4, 5);
INSERT INTO child VALUES (1, 2, 3), (4, 5, 6);
ALTER TABLE child ALTER PRIMARY KEY USING COLUMNS (y, z)

query TT
SHOW CREATE child
----
child  CREATE TABLE child (
       x INT8 NOT NULL,
       y INT8 NOT NULL,
       z INT8 NOT NULL,
       CONSTRAINT "primary" PRIMARY KEY (y ASC, z ASC),
       FAMILY fam_0_x_y_z (x, y, z)
)

query TTT
SELECT * FROM [EXPLAIN SELECT * FROM child WHERE y >=2 AND y <= 6] OFFSET 2
----
scan  ·      ·
·     table  child@primary
·     spans  /2-/7

query III rowsort
SELECT * FROM child WHERE y >=2 AND y <= 6
----
1 2 3
4 5 6

# We can drop parent because it isn't an interleaved parent anymore.
statement ok
DROP TABLE parent

# Test that we can change the primary key of an interleaved child
# that also has a secondary index interleaved.
statement ok
DROP TABLE IF EXISTS child;
CREATE TABLE parent (x INT PRIMARY KEY);
CREATE TABLE child (
  x INT, y INT, PRIMARY KEY (x, y), z INT NOT NULL, W INT,
  FAMILY (x, y, z, w)
) INTERLEAVE IN PARENT parent (x);
CREATE INDEX i ON child (x, w) INTERLEAVE IN PARENT parent (x);
INSERT INTO parent VALUES (1);
INSERT INTO child VALUES (1, 2, 3, 4);
ALTER TABLE child ALTER PRIMARY KEY USING COLUMNS (x, y, z) INTERLEAVE IN PARENT parent (x)

query TT
SHOW CREATE child
----
child  CREATE TABLE child (
         x INT8 NOT NULL,
         y INT8 NOT NULL,
         z INT8 NOT NULL,
         w INT8 NULL,
         CONSTRAINT "primary" PRIMARY KEY (x ASC, y ASC, z ASC),
         INDEX i (x ASC, w ASC) INTERLEAVE IN PARENT parent (x),
         FAMILY fam_0_x_y_z_w (x, y, z, w)
       ) INTERLEAVE IN PARENT parent (x)

# If child@i was not properly rewritten, we wouldn't be able to select
# all columns in child from it without an index join
query TTT
SELECT * FROM [EXPLAIN SELECT * FROM child@i] OFFSET 2
----
scan  ·      ·
·     table  child@i
·     spans  ALL

query IIII
SELECT * FROM child@i
----
1 2 3 4
