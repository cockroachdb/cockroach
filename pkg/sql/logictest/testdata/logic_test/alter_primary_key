statement ok
SET experimental_enable_primary_key_changes = true

statement ok
CREATE TABLE t (x INT PRIMARY KEY, y INT NOT NULL, z INT NOT NULL, w INT, INDEX i (x), INDEX i2 (z))

statement ok
INSERT INTO t VALUES (1, 2, 3, 4), (5, 6, 7, 8)

statement ok
ALTER TABLE t ALTER PRIMARY KEY USING COLUMNS (y, z)

query IIII rowsort
SELECT * FROM t@primary
----
1 2 3 4
5 6 7 8

statement ok
INSERT INTO t VALUES (9, 10, 11, 12)

query IIII rowsort
SELECT * from t@primary
----
1 2 3 4
5 6 7 8
9 10 11 12

statement ok
UPDATE t SET x = 2 WHERE z = 7

query IIII rowsort
SELECT * from t@primary
----
1 2 3 4
2 6 7 8
9 10 11 12

query T
SELECT feature_name FROM crdb_internal.feature_usage
WHERE feature_name IN ('sql.schema.alter_table.alter_primary_key') AND usage_count > 0
ORDER BY feature_name
----
sql.schema.alter_table.alter_primary_key

# Test primary key changes on storing indexes with different column families (the randomizer will do this for us).
statement ok
DROP TABLE t;
CREATE TABLE t (
  x INT PRIMARY KEY, y INT, z INT NOT NULL, w INT, v INT,
  INDEX i1 (y) STORING (w, v), INDEX i2 (z) STORING (y, v)
);
INSERT INTO t VALUES (1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15);
ALTER TABLE t ALTER PRIMARY KEY USING COLUMNS (z);
INSERT INTO t VALUES (16, 17, 18, 19, 20)

query III rowsort
SELECT y, w, v FROM t@i1
----
2 4 5
7 9 10
12 14 15
17 19 20

query III rowsort
SELECT y, z, v FROM t@i2
----
2 3 5
7 8 10
12 13 15
17 18 20

# Test that composite values are encoded correctly in covering indexes.
statement ok
CREATE TABLE t_composite (x INT PRIMARY KEY, y DECIMAL NOT NULL);
INSERT INTO t_composite VALUES (1, 1.0), (2, 1.001)

statement ok
ALTER TABLE t_composite ALTER PRIMARY KEY USING COLUMNS (y)

query IT rowsort
SELECT * FROM t_composite@primary
----
1 1.0
2 1.001

# Test that we can drop tables after a primary key change.
statement ok
DROP TABLE t_composite

# Test altering a primary key interleaving into another table.
statement ok
CREATE TABLE parent (x INT, y INT, PRIMARY KEY (x, y), FAMILY (x, y));
CREATE TABLE child (x INT PRIMARY KEY, y INT NOT NULL, z INT NOT NULL, FAMILY (x, y, z));
INSERT INTO parent VALUES (1, 2), (4, 5);
INSERT INTO child VALUES (1, 2, 3), (4, 5, 6);
ALTER TABLE child ALTER PRIMARY KEY USING COLUMNS (x, y, z) INTERLEAVE IN PARENT parent(x, y)

query TT
SHOW CREATE child
----
child  CREATE TABLE child (
           x INT8 NOT NULL,
           y INT8 NOT NULL,
           z INT8 NOT NULL,
           CONSTRAINT "primary" PRIMARY KEY (x ASC, y ASC, z ASC),
           UNIQUE INDEX child_x_key (x ASC),
           FAMILY fam_0_x_y_z (x, y, z)
       ) INTERLEAVE IN PARENT parent (x, y)


query II rowsort
SELECT * FROM parent
----
1 2
4 5

query TTT
SELECT * FROM [EXPLAIN SELECT * FROM child WHERE x >= 1 AND x < 5 AND y >= 2 AND y <= 6] OFFSET 2
----
scan  ·            ·
·     table        child@primary
·     spans        /1/2/#/57/2-/4/6/#/57/3
·     filter       (y >= 2) AND (y <= 6)

query III rowsort
SELECT * FROM child WHERE x >= 1 AND x < 5 AND y >= 2 AND y <= 6
----
1 2 3
4 5 6

statement error pq: cannot change the primary key of an interleaved parent
ALTER TABLE parent ALTER PRIMARY KEY USING COLUMNS (x)

statement error pq: unimplemented: "parent" is interleaved by table "child"
DROP TABLE parent

statement ok
DROP TABLE parent CASCADE

# Test that we can change the primary key of an interleaved child.
statement ok
DROP TABLE IF EXISTS child;
CREATE TABLE parent (x INT, y INT, PRIMARY KEY (x, y), FAMILY (x, y));
CREATE TABLE child (
  x INT, y INT NOT NULL, z INT NOT NULL,
  FAMILY (x, y, z), PRIMARY KEY (x, y, z)
) INTERLEAVE IN PARENT parent (x, y);
INSERT INTO parent VALUES (1, 2), (4, 5);
INSERT INTO child VALUES (1, 2, 3), (4, 5, 6);
ALTER TABLE child ALTER PRIMARY KEY USING COLUMNS (y, z)

query TT
SHOW CREATE child
----
child  CREATE TABLE child (
       x INT8 NOT NULL,
       y INT8 NOT NULL,
       z INT8 NOT NULL,
       CONSTRAINT "primary" PRIMARY KEY (y ASC, z ASC),
       UNIQUE INDEX child_x_y_z_key (x ASC, y ASC, z ASC),
       FAMILY fam_0_x_y_z (x, y, z)
)

query TTT
SELECT * FROM [EXPLAIN SELECT * FROM child WHERE y >=2 AND y <= 6] OFFSET 2
----
scan  ·      ·
·     table  child@primary
·     spans  /2-/7

query III rowsort
SELECT * FROM child WHERE y >=2 AND y <= 6
----
1 2 3
4 5 6

# We can drop parent because it isn't an interleaved parent anymore.
statement ok
DROP TABLE parent

# Test that we can change the primary key of an interleaved child
# that also has a secondary index interleaved.
statement ok
DROP TABLE IF EXISTS child;
CREATE TABLE parent (x INT PRIMARY KEY);
CREATE TABLE child (
  x INT, y INT, PRIMARY KEY (x, y), z INT NOT NULL, W INT,
  FAMILY (x, y, z, w)
) INTERLEAVE IN PARENT parent (x);
CREATE INDEX i ON child (x, w) INTERLEAVE IN PARENT parent (x);
INSERT INTO parent VALUES (1);
INSERT INTO child VALUES (1, 2, 3, 4);
ALTER TABLE child ALTER PRIMARY KEY USING COLUMNS (x, y, z) INTERLEAVE IN PARENT parent (x)

query TT
SHOW CREATE child
----
child  CREATE TABLE child (
         x INT8 NOT NULL,
         y INT8 NOT NULL,
         z INT8 NOT NULL,
         w INT8 NULL,
         CONSTRAINT "primary" PRIMARY KEY (x ASC, y ASC, z ASC),
         UNIQUE INDEX child_x_y_key (x ASC, y ASC),
         INDEX i (x ASC, w ASC) INTERLEAVE IN PARENT parent (x),
         FAMILY fam_0_x_y_z_w (x, y, z, w)
       ) INTERLEAVE IN PARENT parent (x)

# If child@i was not properly rewritten, we wouldn't be able to select
# all columns in child from it without an index join
query TTT
SELECT * FROM [EXPLAIN SELECT * FROM child@i] OFFSET 2
----
scan  ·      ·
·     table  child@i
·     spans  ALL

query IIII
SELECT * FROM child@i
----
1 2 3 4

subtest foreign_keys

# Test primary key changes on tables with inbound and outbound FK's.
statement ok
CREATE TABLE fk1 (x INT NOT NULL);
CREATE TABLE fk2 (x INT NOT NULL, UNIQUE INDEX i (x));
ALTER TABLE fk1 ADD CONSTRAINT fk FOREIGN KEY (x) REFERENCES fk2(x);
INSERT INTO fk2 VALUES (1);
INSERT INTO fk1 VALUES (1)

statement ok
ALTER TABLE fk1 ALTER PRIMARY KEY USING COLUMNS (x)

statement ok
INSERT INTO fk2 VALUES (2);
INSERT INTO fk1 VALUES (2)

statement ok
ALTER TABLE fk2 ALTER PRIMARY KEY USING COLUMNS (x)

statement ok
INSERT INTO fk2 VALUES (3);
INSERT INTO fk1 VALUES (3)

# Test some self-referencing foreign keys.
statement ok
CREATE TABLE self (a INT PRIMARY KEY, x INT, y INT, z INT, w INT NOT NULL,
  INDEX (x), UNIQUE INDEX (y), INDEX (z));
INSERT INTO self VALUES (1, 1, 1, 1, 1);
ALTER TABLE self ADD CONSTRAINT fk1 FOREIGN KEY (z) REFERENCES self (y);
ALTER TABLE self ADD CONSTRAINT fk2 FOREIGN KEY (x) REFERENCES self (y);

statement ok
ALTER TABLE self ALTER PRIMARY KEY USING COLUMNS (w)

statement ok
INSERT INTO self VALUES (2, 1, 2, 1, 2);
INSERT INTO self VALUES (3, 2, 3, 2, 3)

# Set up a bunch of foreign key references pointing into and out of a table.
statement ok
CREATE TABLE t1 (x INT PRIMARY KEY, y INT NOT NULL, z INT, w INT, INDEX (y), INDEX (z), UNIQUE INDEX (w));
CREATE TABLE t2 (y INT, UNIQUE INDEX (y));
CREATE TABLE t3 (z INT, UNIQUE INDEX (z));
CREATE TABLE t4 (w INT, INDEX (w));
CREATE TABLE t5 (x INT, INDEX (x));
INSERT INTO t1 VALUES (1, 1, 1, 1);
INSERT INTO t2 VALUES (1);
INSERT INTO t3 VALUES (1);
INSERT INTO t4 VALUES (1);
INSERT INTO t5 VALUES (1);
ALTER TABLE t1 ADD CONSTRAINT fk1 FOREIGN KEY (y) REFERENCES t2(y);
ALTER TABLE t1 ADD CONSTRAINT fk2 FOREIGN KEY (z) REFERENCES t3(z);
ALTER TABLE t4 ADD CONSTRAINT fk3 FOREIGN KEY (w) REFERENCES t1(w);
ALTER TABLE t5 ADD CONSTRAINT fk4 FOREIGN KEY (x) REFERENCES t1(x);
ALTER TABLE t1 ALTER PRIMARY KEY USING COLUMNS (y)

statement ok
INSERT INTO t2 VALUES (5);
INSERT INTO t3 VALUES (6);
INSERT INTO t1 VALUES (7, 5, 6, 8);
INSERT INTO t4 VALUES (8);
INSERT INTO t5 VALUES (7)

statement error insert on table "t1" violates foreign key constraint "fk1"
INSERT INTO t1 VALUES (100, 100, 100, 100)

statement error insert on table "t4" violates foreign key constraint "fk3"
INSERT INTO t4 VALUES (101)

# Ensure that we still rewrite a primary index if the index column has name "rowid".
statement ok
DROP TABLE IF EXISTS t;
CREATE TABLE t (rowid INT PRIMARY KEY, y INT NOT NULL, FAMILY (rowid, y));
ALTER TABLE t ALTER PRIMARY KEY USING COLUMNS (y)

query TT
SHOW CREATE t
----
t  CREATE TABLE t (
   rowid INT8 NOT NULL,
   y INT8 NOT NULL,
   CONSTRAINT "primary" PRIMARY KEY (y ASC),
   UNIQUE INDEX t_rowid_key (rowid ASC),
   FAMILY fam_0_rowid_y (rowid, y)
)

subtest index_rewrites
# Test that indexes that need to get rewritten indeed get rewritten.
statement ok
DROP TABLE IF EXISTS t;
CREATE TABLE t (
  x INT PRIMARY KEY,
  y INT NOT NULL, -- will be new primary key.
  z INT NOT NULL,
  w INT,
  v JSONB,
  INDEX i1 (w), -- will get rewritten.
  INDEX i2 (y), -- will get rewritten.
  UNIQUE INDEX i3 (z) STORING (y), -- will not be rewritten.
  UNIQUE INDEX i4 (z), -- will be rewritten.
  UNIQUE INDEX i5 (w) STORING (y), -- will be rewritten.
  INVERTED INDEX i6 (v) -- will be rewritten.
);
INSERT INTO t VALUES (1, 2, 3, 4, '{}');
ALTER TABLE t ALTER PRIMARY KEY USING COLUMNS (y)

# Test that the indexes we expect got rewritten. All but i3 should have been rewritten,
# so all but i3's indexID should be larger than 7.

query IT
SELECT index_id, index_name FROM crdb_internal.table_indexes WHERE descriptor_name = 't' ORDER BY index_id
----
4 i3
8 primary
9 t_x_key
10 i1
11 i2
12 i4
13 i5
14 i6

# Make sure that each index can index join against the new primary key;

query TTT
SELECT * FROM [EXPLAIN SELECT * FROM t@i1] OFFSET 2
----
index-join  ·            ·
 │          table        t@primary
 │          key columns  y
 └── scan   ·            ·
·           table        t@i1
·           spans        ALL

query IIIIT
SELECT * FROM t@i1
----
1 2 3 4 {}

query TTT
SELECT * FROM [EXPLAIN SELECT * FROM t@i2] OFFSET 2
----
index-join  ·            ·
 │          table        t@primary
 │          key columns  y
 └── scan   ·            ·
·           table        t@i2
·           spans        ALL

query IIIIT
SELECT * FROM t@i2
----
1 2 3 4 {}

query TTT
SELECT * FROM [EXPLAIN SELECT * FROM t@i3] OFFSET 2
----
index-join  ·            ·
 │          table        t@primary
 │          key columns  y
 └── scan   ·            ·
·           table        t@i3
·           spans        ALL

query IIIIT
SELECT * FROM t@i3
----
1 2 3 4 {}

query TTT
SELECT * FROM [EXPLAIN SELECT * FROM t@i4] OFFSET 2
----
index-join  ·            ·
 │          table        t@primary
 │          key columns  y
 └── scan   ·            ·
·           table        t@i4
·           spans        ALL

query IIIIT
SELECT * FROM t@i4
----
1 2 3 4 {}

query TTT
SELECT * FROM [EXPLAIN SELECT * FROM t@i5] OFFSET 2
----
index-join  ·            ·
 │          table        t@primary
 │          key columns  y
 └── scan   ·            ·
·           table        t@i5
·           spans        ALL

query IIIIT
SELECT * FROM t@i5
----
1 2 3 4 {}

# Regression test for #44782

statement ok
BEGIN

statement ok
CREATE TABLE t44782 (x INT PRIMARY KEY, y INT NOT NULL)

statement error pq: cannot create table and change it's primary key in the same transaction
ALTER TABLE t44782 ALTER PRIMARY KEY USING COLUMNS (y)

statement ok
ROLLBACK

subtest add_drop_pk

# Test adding and dropping primary keys.

statement ok
DROP TABLE IF EXISTS t;
CREATE TABLE t (x INT PRIMARY KEY, y INT NOT NULL, FAMILY (x), FAMILY (y))

statement error pq: primary key of table t dropped without subsequent addition of new primary key
ALTER TABLE t DROP CONSTRAINT "primary"

statement error pq: multiple primary keys for table t are not allowed
ALTER TABLE t ADD CONSTRAINT "primary" PRIMARY KEY (y), DROP CONSTRAINT "primary"

statement error pq: multiple primary keys for table t are not allowed
ALTER TABLE t ADD CONSTRAINT "primary" PRIMARY KEY (y)

statement ok
ALTER TABLE t DROP CONSTRAINT "primary", ADD CONSTRAINT "primary" PRIMARY KEY (y)

query TT
SHOW CREATE t
----
t  CREATE TABLE t (
   x INT8 NOT NULL,
   y INT8 NOT NULL,
   CONSTRAINT "primary" PRIMARY KEY (y ASC),
   FAMILY fam_0_x (x),
   FAMILY fam_1_y (y)
)

statement ok
DROP TABLE t;
CREATE TABLE t (x INT PRIMARY KEY, y INT NOT NULL, FAMILY (x), FAMILY (y))

statement ok
BEGIN

statement ok
ALTER TABLE t DROP CONSTRAINT "primary"

statement ok
ALTER TABLE t ADD CONSTRAINT "primary" PRIMARY KEY (y)

statement error pq: cannot drop the primary key of a table multiple times in a transaction
ALTER TABLE t DROP CONSTRAINT "primary"

statement ok
ROLLBACK

statement ok
BEGIN

statement ok
ALTER TABLE t DROP CONSTRAINT "primary"

statement ok
INSERT INTO t VALUES (1, 2)

statement error pq: primary key of table t dropped without subsequent addition of new primary key
COMMIT

query II
SELECT * FROM t
----

statement ok
BEGIN

statement ok
ALTER TABLE t DROP CONSTRAINT "primary"

statement ok
ALTER TABLE t ADD CONSTRAINT "primary" PRIMARY KEY (y)

statement ok
COMMIT

query TT
SHOW CREATE t
----
t  CREATE TABLE t (
   x INT8 NOT NULL,
   y INT8 NOT NULL,
   CONSTRAINT "primary" PRIMARY KEY (y ASC),
   FAMILY fam_0_x (x),
   FAMILY fam_1_y (y)
)

statement ok
DROP TABLE IF EXISTS t, t2 CASCADE;
CREATE TABLE t (x INT PRIMARY KEY);
CREATE TABLE t2 (x INT PRIMARY KEY, y INT NOT NULL, FAMILY (x), FAMILY (y));
ALTER TABLE t2 DROP CONSTRAINT "primary", ADD CONSTRAINT "primary" PRIMARY KEY (x, y) INTERLEAVE IN PARENT t(x)

query TT
SHOW CREATE t2
----
t2  CREATE TABLE t2 (
    x INT8 NOT NULL,
    y INT8 NOT NULL,
    CONSTRAINT "primary" PRIMARY KEY (x ASC, y ASC),
    FAMILY fam_0_x (x),
    FAMILY fam_1_y (y)
) INTERLEAVE IN PARENT t (x)
