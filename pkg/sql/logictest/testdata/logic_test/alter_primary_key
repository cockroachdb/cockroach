statement ok
SET enable_primary_key_changes = true

statement ok
CREATE TABLE t (x INT PRIMARY KEY, y INT NOT NULL, z INT NOT NULL, w INT, INDEX i (x), INDEX i2 (z))

statement ok
INSERT INTO t VALUES (1, 2, 3, 4), (5, 6, 7, 8)

statement ok
ALTER TABLE t ALTER PRIMARY KEY USING COLUMNS (y, z)

query IIII rowsort
SELECT * FROM t@primary
----
1 2 3 4
5 6 7 8

statement ok
INSERT INTO t VALUES (9, 10, 11, 12)

query IIII rowsort
SELECT * from t@primary
----
1 2 3 4
5 6 7 8
9 10 11 12

statement ok
UPDATE t SET x = 2 WHERE z = 7

query IIII rowsort
SELECT * from t@primary
----
1 2 3 4
2 6 7 8
9 10 11 12

# Test primary key changes on storing indexes with different column families (the randomizer will do this for us).
statement ok
DROP TABLE t;
CREATE TABLE t (
  x INT PRIMARY KEY, y INT, z INT NOT NULL, w INT, v INT,
  INDEX i1 (y) STORING (w, v), INDEX i2 (z) STORING (y, v)
);
INSERT INTO t VALUES (1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15);
ALTER TABLE t ALTER PRIMARY KEY USING COLUMNS (z);
INSERT INTO t VALUES (16, 17, 18, 19, 20)

query III rowsort
SELECT y, w, v FROM t@i1
----
2 4 5
7 9 10
12 14 15
17 19 20

query III rowsort
SELECT y, z, v FROM t@i2
----
2 3 5
7 8 10
12 13 15
17 18 20

# Test that composite values are encoded correctly in covering indexes.
statement ok
CREATE TABLE t_composite (x INT PRIMARY KEY, y DECIMAL NOT NULL);
INSERT INTO t_composite VALUES (1, 1.0), (2, 1.001)

statement ok
ALTER TABLE t_composite ALTER PRIMARY KEY USING COLUMNS (y)

query IT rowsort
SELECT * FROM t_composite@primary
----
1 1.0
2 1.001

# Test that we can drop tables after a primary key change.
statement ok
DROP TABLE t_composite
