subtest ttl_expire_after_must_be_interval

statement error value of "ttl_expire_after" must be an interval
CREATE TABLE tbl (id INT PRIMARY KEY) WITH (ttl_expire_after = ' xx invalid interval xx')

subtest end

subtest ttl_expire_after_must_be_at_least_zero

statement error value of "ttl_expire_after" must be at least zero
CREATE TABLE tbl (id INT PRIMARY KEY) WITH (ttl_expire_after = '-10 minutes')

subtest end

subtest ttl_expiration_expression_must_be_string

statement error parameter "ttl_expiration_expression" requires a string value
CREATE TABLE tbl (id INT PRIMARY KEY) WITH (ttl_expiration_expression = 0)

subtest end

subtest ttl_expiration_expression_must_be_valid_expression

statement error ttl_expiration_expression "; DROP DATABASE defaultdb" must be a valid expression: at or near "EOF": syntax error
CREATE TABLE tbl (id INT PRIMARY KEY) WITH (ttl_expiration_expression = '; DROP DATABASE defaultdb')

statement error ttl_expiration_expression "now\(\), now\(\)" must be a single expression
CREATE TABLE tbl (id INT PRIMARY KEY) WITH (ttl_expiration_expression = 'now(), now()')

subtest end

subtest ttl_expiration_expression_must_be_timestamptz

statement error expected ttl_expiration_expression expression to have type timestamptz, but 'id' has type int
CREATE TABLE tbl (id INT PRIMARY KEY) WITH (ttl_expiration_expression = 'id')

subtest end

subtest ttl_expire_after_or_ttl_expiration_expression_must_be_set

statement error "ttl_expire_after" and/or "ttl_expiration_expression" must be set
CREATE TABLE tbl (id INT PRIMARY KEY) WITH (ttl = 'on')

subtest end

subtest ttl_automatic_column_notice

query T noticetrace
CREATE TABLE tbl_ttl_automatic_column (id INT PRIMARY KEY) WITH (ttl_automatic_column = 'on')
----
NOTICE: ttl_automatic_column is no longer used. Setting ttl_expire_after automatically creates a TTL column. Resetting ttl_expire_after removes the automatically created column.

query T noticetrace
ALTER TABLE tbl_ttl_automatic_column RESET (ttl_automatic_column)
----
NOTICE: ttl_automatic_column is no longer used. Setting ttl_expire_after automatically creates a TTL column. Resetting ttl_expire_after removes the automatically created column.

subtest end

subtest ttl_range_concurrency_notice

query T noticetrace
CREATE TABLE tbl_ttl_range_concurrency (id INT PRIMARY KEY) WITH (ttl_range_concurrency = 2)
----
NOTICE: ttl_range_concurrency is no longer configurable.

query T noticetrace
ALTER TABLE tbl_ttl_range_concurrency RESET (ttl_range_concurrency)
----
NOTICE: ttl_range_concurrency is no longer configurable.

subtest end

subtest create_table_crdb_internal_expiration_incorrect_explicit_default

statement error expected DEFAULT expression of crdb_internal_expiration to be current_timestamp\(\):::TIMESTAMPTZ \+ '00:10:00':::INTERVAL
CREATE TABLE tbl (
  id INT PRIMARY KEY,
  crdb_internal_expiration TIMESTAMPTZ
) WITH (ttl_expire_after = '10 minutes')

subtest end

subtest create_table_crdb_internal_expiration_incorrect_explicit_on_update

statement error expected ON UPDATE expression of crdb_internal_expiration to be current_timestamp\(\):::TIMESTAMPTZ \+ '00:10:00':::INTERVAL
CREATE TABLE tbl (
  id INT PRIMARY KEY,
  crdb_internal_expiration TIMESTAMPTZ DEFAULT current_timestamp() + '10 minutes'
) WITH (ttl_expire_after = '10 minutes')

subtest end

subtest crdb_internal_functions

statement ok
CREATE TABLE crdb_internal_functions_tbl (
  id INT PRIMARY KEY
) WITH (ttl_expire_after = '10 minutes')

query T
SELECT create_statement FROM [SHOW CREATE TABLE crdb_internal_functions_tbl]
----
CREATE TABLE public.crdb_internal_functions_tbl (
  id INT8 NOT NULL,
  crdb_internal_expiration TIMESTAMPTZ NOT VISIBLE NOT NULL DEFAULT current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL ON UPDATE current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL,
  CONSTRAINT crdb_internal_functions_tbl_pkey PRIMARY KEY (id ASC)
) WITH (ttl = 'on', ttl_expire_after = '00:10:00':::INTERVAL, ttl_job_cron = '@hourly')

statement ok
SELECT crdb_internal.validate_ttl_scheduled_jobs()

statement ok
SELECT crdb_internal.repair_ttl_table_scheduled_job('crdb_internal_functions_tbl'::regclass::oid)

statement ok
SELECT crdb_internal.validate_ttl_scheduled_jobs()

let $crdb_internal_functions_tbl_oid
SELECT 'crdb_internal_functions_tbl'::regclass::oid

user testuser

statement error insufficient privilege
SELECT crdb_internal.repair_ttl_table_scheduled_job($crdb_internal_functions_tbl_oid)

statement error insufficient privilege
SELECT crdb_internal.validate_ttl_scheduled_jobs()

user root

subtest end

subtest ttl_expire_after_required

statement ok
CREATE TABLE ttl_expire_after_required() WITH (ttl_expire_after='10 minutes')

statement error "ttl_expire_after" and/or "ttl_expiration_expression" must be set
ALTER TABLE ttl_expire_after_required RESET (ttl_expire_after)

subtest end

subtest ttl_expiration_expression_required

statement ok
CREATE TABLE ttl_expiration_expression_required(expire_at TIMESTAMPTZ) WITH (ttl_expiration_expression='expire_at')

statement error "ttl_expire_after" and/or "ttl_expiration_expression" must be set
ALTER TABLE ttl_expiration_expression_required RESET (ttl_expiration_expression)

subtest end

subtest alter_table_crdb_internal_expiration_incorrect_explicit_default

statement ok
CREATE TABLE alter_table_crdb_internal_expiration_incorrect_explicit_default() WITH (ttl_expire_after='10 minutes')

statement error cannot alter column crdb_internal_expiration while ttl_expire_after is set
ALTER TABLE alter_table_crdb_internal_expiration_incorrect_explicit_default ALTER COLUMN crdb_internal_expiration SET DEFAULT current_timestamp()

subtest end

subtest alter_table_crdb_internal_expiration_incorrect_explicit_on_update

statement ok
CREATE TABLE alter_table_crdb_internal_expiration_incorrect_explicit_on_update() WITH (ttl_expire_after='10 minutes')

statement error cannot alter column crdb_internal_expiration while ttl_expire_after is set
ALTER TABLE alter_table_crdb_internal_expiration_incorrect_explicit_on_update ALTER COLUMN crdb_internal_expiration SET ON UPDATE current_timestamp()

subtest end

subtest drop_column_crdb_internal_expiration

statement ok
CREATE TABLE drop_column_crdb_internal_expiration() WITH (ttl_expire_after='10 minutes')

statement error cannot drop column crdb_internal_expiration while ttl_expire_after is set
ALTER TABLE drop_column_crdb_internal_expiration DROP COLUMN crdb_internal_expiration

subtest end

subtest alter_column_crdb_internal_expiration_set_not_null

statement ok
CREATE TABLE alter_column_crdb_internal_expiration() WITH (ttl_expire_after='10 minutes')

statement error cannot alter column crdb_internal_expiration while ttl_expire_after is set
ALTER TABLE alter_column_crdb_internal_expiration ALTER COLUMN crdb_internal_expiration SET NOT NULL

subtest end

subtest alter_column_crdb_internal_expiration_rename

statement ok
CREATE TABLE alter_column_crdb_internal_expiration_rename() WITH (ttl_expire_after='10 minutes')

statement error cannot rename column crdb_internal_expiration while ttl_expire_after is set
ALTER TABLE alter_column_crdb_internal_expiration_rename RENAME COLUMN crdb_internal_expiration TO crdb_internal_expiration_2

subtest end

subtest reloptions

statement ok
CREATE TABLE tbl_reloptions (
  id INT PRIMARY KEY
) WITH (ttl_expire_after = '10 minutes', ttl_select_batch_size = 10, ttl_delete_batch_size=20, ttl_delete_rate_limit = 30, ttl_pause = true, ttl_row_stats_poll_interval = '1 minute', ttl_label_metrics = true)

query T
SELECT reloptions FROM pg_class WHERE relname = 'tbl_reloptions'
----
{ttl='on',ttl_expire_after='00:10:00':::INTERVAL,ttl_job_cron='@hourly',ttl_select_batch_size=10,ttl_delete_batch_size=20,ttl_delete_rate_limit=30,ttl_pause=true,ttl_row_stats_poll_interval='1m0s',ttl_label_metrics=true}

subtest end

subtest schedules

statement ok
CREATE TABLE tbl_schedules (
  id INT PRIMARY KEY
) WITH (ttl_expire_after = '10 minutes')

let $table_id
SELECT oid FROM pg_class WHERE relname = 'tbl_schedules'

query I
SELECT count(1) FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'
----
1

let $schedule_id
SELECT id FROM [SHOW SCHEDULES] WHERE label = 'row-level-ttl-$table_id'

statement error cannot drop a row level TTL schedule\nHINT: use ALTER TABLE test\.public\.tbl_schedules RESET \(ttl\) instead
DROP SCHEDULE $schedule_id

subtest end

subtest existing_ttl_concurrent_schema_change

statement ok
CREATE TABLE tbl_existing_ttl_concurrent_schema_change (
  id INT PRIMARY KEY
) WITH (ttl_expire_after = '10 minutes')

statement error cannot modify TTL settings while another schema change on the table is being processed
ALTER TABLE tbl_existing_ttl_concurrent_schema_change RESET (ttl), RESET (ttl_expire_after)

statement error cannot modify TTL settings while another schema change on the table is being processed
BEGIN;
ALTER TABLE tbl_existing_ttl_concurrent_schema_change RESET (ttl);
ALTER TABLE tbl_existing_ttl_concurrent_schema_change SET (ttl_select_batch_size = 200)

statement ok
ROLLBACK

statement error cannot perform other schema changes in the same transaction as a TTL mutation
BEGIN;
ALTER TABLE tbl_existing_ttl_concurrent_schema_change RESET (ttl);
CREATE INDEX tbl_idx ON tbl_existing_ttl_concurrent_schema_change (id)

statement ok
ROLLBACK

subtest end

subtest add_ttl_concurrent_schema_change

statement ok
CREATE TABLE tbl_add_ttl_concurrent_schema_change (
   id INT PRIMARY KEY
)

statement error cannot modify TTL settings while another schema change on the table is being processed
ALTER TABLE tbl_add_ttl_concurrent_schema_change SET (ttl_expire_after = '10 minutes'), SET (ttl_select_batch_size = 200)

statement error cannot modify TTL settings while another schema change on the table is being processed
BEGIN;
ALTER TABLE tbl_add_ttl_concurrent_schema_change SET (ttl_expire_after = '10 minutes');
ALTER TABLE tbl_add_ttl_concurrent_schema_change RESET (ttl_select_batch_size)

statement ok
ROLLBACK

statement error cannot modify TTL settings while another schema change on the table is being processed
BEGIN;
CREATE INDEX tbl_idx ON tbl_add_ttl_concurrent_schema_change (id);
ALTER TABLE tbl_add_ttl_concurrent_schema_change SET (ttl_expire_after = '10 minutes');

statement ok
ROLLBACK

statement error cannot perform other schema changes in the same transaction as a TTL mutation
BEGIN;
ALTER TABLE tbl_add_ttl_concurrent_schema_change SET (ttl_expire_after = '10 minutes');
CREATE INDEX tbl_idx ON tbl_add_ttl_concurrent_schema_change (id)

statement ok
ROLLBACK

subtest end

subtest reset_ttl

statement ok
CREATE TABLE tbl_reset_ttl (
  id INT PRIMARY KEY
) WITH (ttl_expire_after = '10 minutes')

let $table_id
SELECT oid FROM pg_class WHERE relname = 'tbl_reset_ttl'

query I
SELECT count(1) FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'
----
1

# Cannot reset TTL with SET (ttl = off)
statement error setting "ttl = 'off'" is not permitted
ALTER TABLE tbl_reset_ttl SET (ttl = 'off')

# Test when we drop the TTL, ensure column is dropped and the scheduled job is removed.
statement ok
ALTER TABLE tbl_reset_ttl RESET (ttl)

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_reset_ttl]
----
CREATE TABLE public.tbl_reset_ttl (
  id INT8 NOT NULL,
  CONSTRAINT tbl_reset_ttl_pkey PRIMARY KEY (id ASC)
)

statement ok
SELECT crdb_internal.validate_ttl_scheduled_jobs()

query I
SELECT count(1) FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'
----
0

subtest end

subtest drop_table

# Ensure schedules are removed on DROP TABLE.
statement ok
CREATE TABLE tbl_drop_table (
  id INT PRIMARY KEY
) WITH (ttl_expire_after = '10 minutes')

let $table_id
SELECT oid FROM pg_class WHERE relname = 'tbl_drop_table'

query I
SELECT count(1) FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'
----
1

statement ok
DROP TABLE tbl_drop_table

query I
SELECT count(1) FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'
----
0

subtest end

subtest drop_schema

# Create TTL on a different schema and ensure schedules are removed when dropped.
statement ok
CREATE SCHEMA drop_me

statement ok
CREATE TABLE drop_me.tbl () WITH (ttl_expire_after = '10 minutes');
CREATE TABLE drop_me.tbl2 () WITH (ttl_expire_after = '10 minutes')

let $table_id
SELECT oid FROM pg_class WHERE relname = 'tbl'

let $table_id2
SELECT oid FROM pg_class WHERE relname = 'tbl2'

query I
SELECT count(1) FROM [SHOW SCHEDULES]
WHERE label IN ('row-level-ttl-$table_id', 'row-level-ttl-$table_id2')
----
2

statement ok
DROP SCHEMA drop_me CASCADE

query I
SELECT count(1) FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'
----
0

subtest end

subtest drop_database

# Create TTL on a different database and ensure schedules are removed when dropped.
statement ok
CREATE DATABASE drop_me

statement ok
USE drop_me

statement ok
CREATE TABLE tbl () WITH (ttl_expire_after = '10 minutes');
CREATE TABLE tbl2 () WITH (ttl_expire_after = '10 minutes')

let $table_id
SELECT oid FROM pg_class WHERE relname = 'tbl'

let $table_id2
SELECT oid FROM pg_class WHERE relname = 'tbl2'

query I
SELECT count(1) FROM [SHOW SCHEDULES]
WHERE label IN ('row-level-ttl-$table_id', 'row-level-ttl-$table_id2')
----
2

statement ok
USE test;
DROP DATABASE drop_me CASCADE

query I
SELECT count(1) FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'
----
0

subtest end

subtest crdb_internal_expiration_invalid_type

statement error table crdb_internal_expiration has TTL defined, but column crdb_internal_expiration is not a TIMESTAMPTZ
CREATE TABLE tbl (
  id INT PRIMARY KEY,
  crdb_internal_expiration INTERVAL
) WITH (ttl_expire_after = '10 minutes')

subtest end

subtest ttl_on_noop

statement ok
CREATE TABLE tbl_ttl_on_noop (
  id INT PRIMARY KEY
) WITH (ttl_expire_after = '10 minutes')

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_ttl_on_noop]
----
CREATE TABLE public.tbl_ttl_on_noop (
  id INT8 NOT NULL,
  crdb_internal_expiration TIMESTAMPTZ NOT VISIBLE NOT NULL DEFAULT current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL ON UPDATE current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL,
  CONSTRAINT tbl_ttl_on_noop_pkey PRIMARY KEY (id ASC)
) WITH (ttl = 'on', ttl_expire_after = '00:10:00':::INTERVAL, ttl_job_cron = '@hourly')

# Test no-ops.
statement ok
ALTER TABLE tbl_ttl_on_noop SET (ttl = 'on')

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_ttl_on_noop]
----
CREATE TABLE public.tbl_ttl_on_noop (
  id INT8 NOT NULL,
  crdb_internal_expiration TIMESTAMPTZ NOT VISIBLE NOT NULL DEFAULT current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL ON UPDATE current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL,
  CONSTRAINT tbl_ttl_on_noop_pkey PRIMARY KEY (id ASC)
) WITH (ttl = 'on', ttl_expire_after = '00:10:00':::INTERVAL, ttl_job_cron = '@hourly')

let $table_id
SELECT oid FROM pg_class WHERE relname = 'tbl_ttl_on_noop'

query TTT
SELECT schedule_status, recurrence, owner FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'
----
ACTIVE  @hourly  root

let $schedule_id
SELECT id FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'

query T
SELECT create_statement FROM [SHOW CREATE SCHEDULE $schedule_id]
----
ALTER TABLE test.public.tbl_ttl_on_noop WITH (ttl = 'on', ...)

subtest end

subtest ttl_job_cron

statement error invalid cron expression for "ttl_job_cron"
CREATE TABLE tbl () WITH (ttl_expire_after = '10 seconds', ttl_job_cron = 'bad expr')

statement ok
CREATE TABLE tbl_ttl_job_cron (
  id INT PRIMARY KEY
) WITH (ttl_expire_after = '10 minutes', ttl_job_cron = '@daily')

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_ttl_job_cron]
----
CREATE TABLE public.tbl_ttl_job_cron (
  id INT8 NOT NULL,
  crdb_internal_expiration TIMESTAMPTZ NOT VISIBLE NOT NULL DEFAULT current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL ON UPDATE current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL,
  CONSTRAINT tbl_ttl_job_cron_pkey PRIMARY KEY (id ASC)
) WITH (ttl = 'on', ttl_expire_after = '00:10:00':::INTERVAL, ttl_job_cron = '@daily')

let $table_id
SELECT oid FROM pg_class WHERE relname = 'tbl_ttl_job_cron'

query TTT
SELECT schedule_status, recurrence, owner FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'
----
ACTIVE  @daily  root

statement ok
ALTER TABLE tbl_ttl_job_cron SET (ttl_job_cron = '@weekly')

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_ttl_job_cron]
----
CREATE TABLE public.tbl_ttl_job_cron (
  id INT8 NOT NULL,
  crdb_internal_expiration TIMESTAMPTZ NOT VISIBLE NOT NULL DEFAULT current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL ON UPDATE current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL,
  CONSTRAINT tbl_ttl_job_cron_pkey PRIMARY KEY (id ASC)
) WITH (ttl = 'on', ttl_expire_after = '00:10:00':::INTERVAL, ttl_job_cron = '@weekly')


query TTT
SELECT schedule_status, recurrence, owner FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'
----
ACTIVE  @weekly  root

statement ok
ALTER TABLE tbl_ttl_job_cron RESET (ttl_job_cron)

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_ttl_job_cron]
----
CREATE TABLE public.tbl_ttl_job_cron (
  id INT8 NOT NULL,
  crdb_internal_expiration TIMESTAMPTZ NOT VISIBLE NOT NULL DEFAULT current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL ON UPDATE current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL,
  CONSTRAINT tbl_ttl_job_cron_pkey PRIMARY KEY (id ASC)
) WITH (ttl = 'on', ttl_expire_after = '00:10:00':::INTERVAL, ttl_job_cron = '@hourly')

query TTT
SELECT schedule_status, recurrence, owner FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'
----
ACTIVE  @hourly  root

subtest end

subtest ttl_must_be_set

statement ok
CREATE TABLE no_ttl_table ()

statement error "ttl_expire_after" and/or "ttl_expiration_expression" must be set
ALTER TABLE no_ttl_table SET (ttl_select_batch_size = 50)

statement error "ttl_expire_after" and/or "ttl_expiration_expression" must be set
ALTER TABLE no_ttl_table SET (ttl_delete_batch_size = 50)

statement error "ttl_expire_after" and/or "ttl_expiration_expression" must be set
ALTER TABLE no_ttl_table SET (ttl_job_cron = '@weekly')

statement error "ttl_expire_after" and/or "ttl_expiration_expression" must be set
ALTER TABLE no_ttl_table SET (ttl_pause = true)

statement error "ttl_expire_after" and/or "ttl_expiration_expression" must be set
ALTER TABLE no_ttl_table SET (ttl_label_metrics = true)

subtest end

subtest ttl_params_positive

statement ok
CREATE TABLE tbl_ttl_params_positive (
  id INT PRIMARY KEY
) WITH (ttl_expire_after = '10 minutes')

statement error "ttl_select_batch_size" must be at least 1
ALTER TABLE tbl_ttl_params_positive SET (ttl_select_batch_size = -1)

statement error "ttl_delete_batch_size" must be at least 1
ALTER TABLE tbl_ttl_params_positive SET (ttl_delete_batch_size = -1)

statement error "ttl_delete_rate_limit" must be at least 1
ALTER TABLE tbl_ttl_params_positive SET (ttl_delete_rate_limit = -1)

statement error "ttl_row_stats_poll_interval" must be at least 1
ALTER TABLE tbl_ttl_params_positive SET (ttl_row_stats_poll_interval = '-1 second')

subtest end

subtest set_ttl_params

statement ok
CREATE TABLE tbl_set_ttl_params (
  id INT PRIMARY KEY
) WITH (ttl_expire_after = '10 minutes', ttl_select_batch_size = 10, ttl_delete_batch_size=20, ttl_delete_rate_limit = 30, ttl_pause = true, ttl_row_stats_poll_interval = '1 minute', ttl_label_metrics = true)

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_set_ttl_params]
----
CREATE TABLE public.tbl_set_ttl_params (
  id INT8 NOT NULL,
  crdb_internal_expiration TIMESTAMPTZ NOT VISIBLE NOT NULL DEFAULT current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL ON UPDATE current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL,
  CONSTRAINT tbl_set_ttl_params_pkey PRIMARY KEY (id ASC)
) WITH (ttl = 'on', ttl_expire_after = '00:10:00':::INTERVAL, ttl_job_cron = '@hourly', ttl_select_batch_size = 10, ttl_delete_batch_size = 20, ttl_delete_rate_limit = 30, ttl_pause = true, ttl_row_stats_poll_interval = '1m0s', ttl_label_metrics = true)

statement ok
ALTER TABLE tbl_set_ttl_params SET (ttl_select_batch_size = 110, ttl_delete_batch_size = 120, ttl_delete_rate_limit = 130, ttl_row_stats_poll_interval = '2m0s')

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_set_ttl_params]
----
CREATE TABLE public.tbl_set_ttl_params (
  id INT8 NOT NULL,
  crdb_internal_expiration TIMESTAMPTZ NOT VISIBLE NOT NULL DEFAULT current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL ON UPDATE current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL,
  CONSTRAINT tbl_set_ttl_params_pkey PRIMARY KEY (id ASC)
) WITH (ttl = 'on', ttl_expire_after = '00:10:00':::INTERVAL, ttl_job_cron = '@hourly', ttl_select_batch_size = 110, ttl_delete_batch_size = 120, ttl_delete_rate_limit = 130, ttl_pause = true, ttl_row_stats_poll_interval = '2m0s', ttl_label_metrics = true)

statement ok
ALTER TABLE tbl_set_ttl_params RESET (ttl_select_batch_size, ttl_delete_batch_size, ttl_delete_rate_limit, ttl_pause, ttl_row_stats_poll_interval)

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_set_ttl_params]
----
CREATE TABLE public.tbl_set_ttl_params (
  id INT8 NOT NULL,
  crdb_internal_expiration TIMESTAMPTZ NOT VISIBLE NOT NULL DEFAULT current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL ON UPDATE current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL,
  CONSTRAINT tbl_set_ttl_params_pkey PRIMARY KEY (id ASC)
) WITH (ttl = 'on', ttl_expire_after = '00:10:00':::INTERVAL, ttl_job_cron = '@hourly', ttl_label_metrics = true)

subtest end

subtest create_table_ttl_expiration_expression

statement ok
CREATE TABLE tbl_create_table_ttl_expiration_expression (
  id INT PRIMARY KEY,
  expire_at TIMESTAMPTZ,
  FAMILY (id, expire_at)
) WITH (ttl_expiration_expression = 'expire_at')

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_create_table_ttl_expiration_expression]
----
CREATE TABLE public.tbl_create_table_ttl_expiration_expression (
  id INT8 NOT NULL,
  expire_at TIMESTAMPTZ NULL,
  CONSTRAINT tbl_create_table_ttl_expiration_expression_pkey PRIMARY KEY (id ASC),
  FAMILY fam_0_id_expire_at (id, expire_at)
) WITH (ttl = 'on', ttl_expiration_expression = 'expire_at', ttl_job_cron = '@hourly')

statement ok
ALTER TABLE tbl_create_table_ttl_expiration_expression RESET (ttl)

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_create_table_ttl_expiration_expression]
----
CREATE TABLE public.tbl_create_table_ttl_expiration_expression (
  id INT8 NOT NULL,
  expire_at TIMESTAMPTZ NULL,
  CONSTRAINT tbl_create_table_ttl_expiration_expression_pkey PRIMARY KEY (id ASC),
  FAMILY fam_0_id_expire_at (id, expire_at)
)

subtest end

subtest create_table_ttl_expiration_expression_escape_sql

statement ok
CREATE TABLE tbl_create_table_ttl_expiration_expression_escape_sql (
  id INT PRIMARY KEY,
  expire_at TIMESTAMPTZ,
  FAMILY (id, expire_at)
) WITH (ttl_expiration_expression = 'IF(expire_at > parse_timestamp(''2020-01-01 00:00:00'') AT TIME ZONE ''UTC'', expire_at, NULL)')

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_create_table_ttl_expiration_expression_escape_sql]
----
CREATE TABLE public.tbl_create_table_ttl_expiration_expression_escape_sql (
  id INT8 NOT NULL,
  expire_at TIMESTAMPTZ NULL,
  CONSTRAINT tbl_create_table_ttl_expiration_expression_escape_sql_pkey PRIMARY KEY (id ASC),
  FAMILY fam_0_id_expire_at (id, expire_at)
) WITH (ttl = 'on', ttl_expiration_expression = e'IF(expire_at > parse_timestamp(\'2020-01-01 00:00:00\') AT TIME ZONE \'UTC\', expire_at, NULL)', ttl_job_cron = '@hourly')

subtest end

subtest alter_table_ttl_expiration_expression

statement ok
CREATE TABLE tbl_alter_table_ttl_expiration_expression (
  id INT PRIMARY KEY,
  expire_at TIMESTAMPTZ,
  FAMILY (id, expire_at)
)

statement error expected ttl_expiration_expression expression to have type timestamptz, but 'id' has type int
ALTER TABLE tbl_alter_table_ttl_expiration_expression SET (ttl_expiration_expression = 'id')

statement ok
ALTER TABLE tbl_alter_table_ttl_expiration_expression SET (ttl_expiration_expression = 'expire_at')

# Tested below anyway, so we can skip this statement for legacy schema changer.
skipif config local-legacy-schema-changer
statement error cannot drop column "expire_at" referenced by row-level TTL expiration expression "expire_at"
ALTER TABLE tbl_alter_table_ttl_expiration_expression DROP COLUMN expire_at

statement ok
SET use_declarative_schema_changer = 'off'

statement error column "expire_at" is referenced by row-level TTL expiration expression "expire_at"
ALTER TABLE tbl_alter_table_ttl_expiration_expression DROP COLUMN expire_at

statement ok
SET use_declarative_schema_changer = 'on'

statement ok
SET enable_experimental_alter_column_type_general = 'on'

statement error column "expire_at" is referenced by row-level TTL expiration expression "expire_at"
ALTER TABLE tbl_alter_table_ttl_expiration_expression ALTER expire_at TYPE TIMESTAMP USING (expire_at AT TIME ZONE 'UTC')

statement ok
SET enable_experimental_alter_column_type_general = 'off'

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_alter_table_ttl_expiration_expression]
----
CREATE TABLE public.tbl_alter_table_ttl_expiration_expression (
  id INT8 NOT NULL,
  expire_at TIMESTAMPTZ NULL,
  CONSTRAINT tbl_alter_table_ttl_expiration_expression_pkey PRIMARY KEY (id ASC),
  FAMILY fam_0_id_expire_at (id, expire_at)
) WITH (ttl = 'on', ttl_expiration_expression = 'expire_at', ttl_job_cron = '@hourly')

# try setting it again
statement ok
ALTER TABLE tbl_alter_table_ttl_expiration_expression SET (ttl_expiration_expression = '((expire_at AT TIME ZONE ''UTC'') + ''5 minutes'':::INTERVAL) AT TIME ZONE ''UTC''')

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_alter_table_ttl_expiration_expression]
----
CREATE TABLE public.tbl_alter_table_ttl_expiration_expression (
  id INT8 NOT NULL,
  expire_at TIMESTAMPTZ NULL,
  CONSTRAINT tbl_alter_table_ttl_expiration_expression_pkey PRIMARY KEY (id ASC),
  FAMILY fam_0_id_expire_at (id, expire_at)
) WITH (ttl = 'on', ttl_expiration_expression = e'((expire_at AT TIME ZONE \'UTC\') + \'5 minutes\':::INTERVAL) AT TIME ZONE \'UTC\'', ttl_job_cron = '@hourly')

statement ok
ALTER TABLE tbl_alter_table_ttl_expiration_expression RESET (ttl)

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_alter_table_ttl_expiration_expression]
----
CREATE TABLE public.tbl_alter_table_ttl_expiration_expression (
  id INT8 NOT NULL,
  expire_at TIMESTAMPTZ NULL,
  CONSTRAINT tbl_alter_table_ttl_expiration_expression_pkey PRIMARY KEY (id ASC),
  FAMILY fam_0_id_expire_at (id, expire_at)
)

subtest end

subtest add_ttl_expiration_expression_to_ttl_expire_after

statement ok
CREATE TABLE tbl_add_ttl_expiration_expression_to_ttl_expire_after (
  id INT PRIMARY KEY,
  expire_at TIMESTAMPTZ,
  FAMILY (id, expire_at)
) WITH (ttl_expire_after = '10 minutes')

statement ok
ALTER TABLE tbl_add_ttl_expiration_expression_to_ttl_expire_after SET (ttl_expiration_expression = 'crdb_internal_expiration')

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_add_ttl_expiration_expression_to_ttl_expire_after]
----
CREATE TABLE public.tbl_add_ttl_expiration_expression_to_ttl_expire_after (
  id INT8 NOT NULL,
  expire_at TIMESTAMPTZ NULL,
  crdb_internal_expiration TIMESTAMPTZ NOT VISIBLE NOT NULL DEFAULT current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL ON UPDATE current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL,
  CONSTRAINT tbl_add_ttl_expiration_expression_to_ttl_expire_after_pkey PRIMARY KEY (id ASC),
  FAMILY fam_0_id_expire_at_crdb_internal_expiration (id, expire_at, crdb_internal_expiration)
) WITH (ttl = 'on', ttl_expire_after = '00:10:00':::INTERVAL, ttl_expiration_expression = 'crdb_internal_expiration', ttl_job_cron = '@hourly')

statement ok
ALTER TABLE tbl_add_ttl_expiration_expression_to_ttl_expire_after RESET (ttl_expiration_expression)

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_add_ttl_expiration_expression_to_ttl_expire_after]
----
CREATE TABLE public.tbl_add_ttl_expiration_expression_to_ttl_expire_after (
  id INT8 NOT NULL,
  expire_at TIMESTAMPTZ NULL,
  crdb_internal_expiration TIMESTAMPTZ NOT VISIBLE NOT NULL DEFAULT current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL ON UPDATE current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL,
  CONSTRAINT tbl_add_ttl_expiration_expression_to_ttl_expire_after_pkey PRIMARY KEY (id ASC),
  FAMILY fam_0_id_expire_at_crdb_internal_expiration (id, expire_at, crdb_internal_expiration)
) WITH (ttl = 'on', ttl_expire_after = '00:10:00':::INTERVAL, ttl_job_cron = '@hourly')

subtest end

subtest add_ttl_expire_after_to_ttl_expiration_expression

statement ok
CREATE TABLE tbl_add_ttl_expire_after_to_ttl_expiration_expression (
  id INT PRIMARY KEY,
  expire_at TIMESTAMPTZ,
  FAMILY (id, expire_at)
) WITH (ttl_expiration_expression = 'expire_at')

statement ok
ALTER TABLE tbl_add_ttl_expire_after_to_ttl_expiration_expression SET (ttl_expire_after = '10 minutes')

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_add_ttl_expire_after_to_ttl_expiration_expression]
----
CREATE TABLE public.tbl_add_ttl_expire_after_to_ttl_expiration_expression (
  id INT8 NOT NULL,
  expire_at TIMESTAMPTZ NULL,
  crdb_internal_expiration TIMESTAMPTZ NOT VISIBLE NOT NULL DEFAULT current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL ON UPDATE current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL,
  CONSTRAINT tbl_add_ttl_expire_after_to_ttl_expiration_expression_pkey PRIMARY KEY (id ASC),
  FAMILY fam_0_id_expire_at (id, expire_at, crdb_internal_expiration)
) WITH (ttl = 'on', ttl_expire_after = '00:10:00':::INTERVAL, ttl_expiration_expression = 'expire_at', ttl_job_cron = '@hourly')

statement ok
ALTER TABLE tbl_add_ttl_expire_after_to_ttl_expiration_expression RESET (ttl_expire_after)

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_add_ttl_expire_after_to_ttl_expiration_expression]
----
CREATE TABLE public.tbl_add_ttl_expire_after_to_ttl_expiration_expression (
  id INT8 NOT NULL,
  expire_at TIMESTAMPTZ NULL,
  CONSTRAINT tbl_add_ttl_expire_after_to_ttl_expiration_expression_pkey PRIMARY KEY (id ASC),
  FAMILY fam_0_id_expire_at (id, expire_at)
)

subtest end

subtest create_table_ttl_expire_after_and_ttl_expiration_expression

statement ok
CREATE TABLE create_table_ttl_expire_after_and_ttl_expiration_expression (
  id INT PRIMARY KEY
) WITH (ttl_expire_after = '10 minutes', ttl_expiration_expression = 'crdb_internal_expiration')

query T
SELECT create_statement FROM [SHOW CREATE TABLE create_table_ttl_expire_after_and_ttl_expiration_expression]
----
CREATE TABLE public.create_table_ttl_expire_after_and_ttl_expiration_expression (
  id INT8 NOT NULL,
  crdb_internal_expiration TIMESTAMPTZ NOT VISIBLE NOT NULL DEFAULT current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL ON UPDATE current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL,
  CONSTRAINT create_table_ttl_expire_after_and_ttl_expiration_expression_pkey PRIMARY KEY (id ASC)
) WITH (ttl = 'on', ttl_expire_after = '00:10:00':::INTERVAL, ttl_expiration_expression = 'crdb_internal_expiration', ttl_job_cron = '@hourly')

statement ok
ALTER TABLE create_table_ttl_expire_after_and_ttl_expiration_expression RESET (ttl)

query T
SELECT create_statement FROM [SHOW CREATE TABLE create_table_ttl_expire_after_and_ttl_expiration_expression]
----
CREATE TABLE public.create_table_ttl_expire_after_and_ttl_expiration_expression (
  id INT8 NOT NULL,
  CONSTRAINT create_table_ttl_expire_after_and_ttl_expiration_expression_pkey PRIMARY KEY (id ASC)
)

subtest end

subtest alter_table_ttl_expire_after_and_ttl_expiration_expression

statement ok
CREATE TABLE tbl_alter_table_ttl_expire_after_and_ttl_expiration_expression (
  id INT PRIMARY KEY
)

statement ok
ALTER TABLE tbl_alter_table_ttl_expire_after_and_ttl_expiration_expression SET (ttl_expire_after = '10 minutes', ttl_expiration_expression = 'crdb_internal_expiration')

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_alter_table_ttl_expire_after_and_ttl_expiration_expression]
----
CREATE TABLE public.tbl_alter_table_ttl_expire_after_and_ttl_expiration_expression (
  id INT8 NOT NULL,
  crdb_internal_expiration TIMESTAMPTZ NOT VISIBLE NOT NULL DEFAULT current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL ON UPDATE current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL,
  CONSTRAINT tbl_alter_table_ttl_expire_after_and_ttl_expiration_expression_pkey PRIMARY KEY (id ASC)
) WITH (ttl = 'on', ttl_expire_after = '00:10:00':::INTERVAL, ttl_expiration_expression = 'crdb_internal_expiration', ttl_job_cron = '@hourly')

statement ok
ALTER TABLE tbl_alter_table_ttl_expire_after_and_ttl_expiration_expression RESET (ttl)

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_alter_table_ttl_expire_after_and_ttl_expiration_expression]
----
CREATE TABLE public.tbl_alter_table_ttl_expire_after_and_ttl_expiration_expression (
  id INT8 NOT NULL,
  CONSTRAINT tbl_alter_table_ttl_expire_after_and_ttl_expiration_expression_pkey PRIMARY KEY (id ASC)
)

subtest end

subtest ttl_expiration_expression_rename

statement ok
CREATE TABLE tbl_ttl_expiration_expression_renamed (
  id INT PRIMARY KEY,
  expires_at TIMESTAMPTZ,
  FAMILY fam (id, expires_at)
) WITH (ttl_expiration_expression = 'expires_at')

statement ok
ALTER TABLE tbl_ttl_expiration_expression_renamed RENAME expires_at TO expires_at_renamed

query T
SELECT create_statement FROM [SHOW CREATE TABLE tbl_ttl_expiration_expression_renamed]
----
CREATE TABLE public.tbl_ttl_expiration_expression_renamed (
  id INT8 NOT NULL,
  expires_at_renamed TIMESTAMPTZ NULL,
  CONSTRAINT tbl_ttl_expiration_expression_renamed_pkey PRIMARY KEY (id ASC),
  FAMILY fam (id, expires_at_renamed)
) WITH (ttl = 'on', ttl_expiration_expression = 'expires_at_renamed', ttl_job_cron = '@hourly')

subtest end

subtest crdb_internal_expiration_already_defined

statement ok
CREATE TABLE tbl_crdb_internal_expiration_already_defined (
  id INT PRIMARY KEY,
  crdb_internal_expiration TIMESTAMPTZ
)

statement error cannot add TTL to table with the crdb_internal_expiration column already defined
ALTER TABLE tbl_crdb_internal_expiration_already_defined SET (ttl_expire_after = '10 minutes')

subtest end

subtest desc_pk_with_ttl

statement error non-ascending ordering on PRIMARY KEYs are not supported
CREATE TABLE tbl_desc_pk_with_ttl (id INT, id2 INT, PRIMARY KEY (id, id2 DESC)) WITH (ttl_expire_after = '10 minutes')

subtest end

subtest desc_pk_without_ttl_add_ttl

statement ok
CREATE TABLE tbl_desc_pk_without_ttl_add_ttl (id INT, id2 INT, PRIMARY KEY (id, id2 DESC))

statement error non-ascending ordering on PRIMARY KEYs are not supported
ALTER TABLE tbl_desc_pk_without_ttl_add_ttl SET (ttl_expire_after = '10 minutes')

subtest end

subtest asc_pk_alter_desc_pk

statement ok
CREATE TABLE tbl_asc_pk_alter_desc_pk (id INT, id2 INT, PRIMARY KEY (id, id2)) WITH (ttl_expire_after = '10 minutes')

statement error non-ascending ordering on PRIMARY KEYs are not supported
ALTER TABLE tbl_asc_pk_alter_desc_pk ALTER PRIMARY KEY USING COLUMNS (id, id2 DESC)

subtest end

subtest create_table_no_ttl_set_ttl_expire_after

statement ok
CREATE TABLE create_table_no_ttl_set_ttl_expire_after (
   id INT PRIMARY KEY
)

statement ok
ALTER TABLE create_table_no_ttl_set_ttl_expire_after SET (ttl_expire_after = '10 minutes')

query T
SELECT create_statement FROM [SHOW CREATE TABLE create_table_no_ttl_set_ttl_expire_after]
----
CREATE TABLE public.create_table_no_ttl_set_ttl_expire_after (
  id INT8 NOT NULL,
  crdb_internal_expiration TIMESTAMPTZ NOT VISIBLE NOT NULL DEFAULT current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL ON UPDATE current_timestamp():::TIMESTAMPTZ + '00:10:00':::INTERVAL,
  CONSTRAINT create_table_no_ttl_set_ttl_expire_after_pkey PRIMARY KEY (id ASC)
) WITH (ttl = 'on', ttl_expire_after = '00:10:00':::INTERVAL, ttl_job_cron = '@hourly')

let $table_id
SELECT oid FROM pg_class WHERE relname = 'create_table_no_ttl_set_ttl_expire_after'

query TTT
SELECT schedule_status, recurrence, owner FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'
----
ACTIVE  @hourly  root

statement ok
ALTER TABLE create_table_no_ttl_set_ttl_expire_after RESET (ttl)

query TTT
SELECT schedule_status, recurrence, owner FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'
----

subtest end

subtest create_table_no_ttl_set_ttl_expiration_expression

statement ok
CREATE TABLE create_table_no_ttl_set_ttl_expiration_expression (
   id INT PRIMARY KEY,
   expire_at TIMESTAMPTZ,
   FAMILY (id, expire_at)
)

statement ok
ALTER TABLE create_table_no_ttl_set_ttl_expiration_expression SET (ttl_expiration_expression = 'expire_at')

query T
SELECT create_statement FROM [SHOW CREATE TABLE create_table_no_ttl_set_ttl_expiration_expression]
----
CREATE TABLE public.create_table_no_ttl_set_ttl_expiration_expression (
  id INT8 NOT NULL,
  expire_at TIMESTAMPTZ NULL,
  CONSTRAINT create_table_no_ttl_set_ttl_expiration_expression_pkey PRIMARY KEY (id ASC),
  FAMILY fam_0_id_expire_at (id, expire_at)
) WITH (ttl = 'on', ttl_expiration_expression = 'expire_at', ttl_job_cron = '@hourly')

let $table_id
SELECT oid FROM pg_class WHERE relname = 'create_table_no_ttl_set_ttl_expiration_expression'

query TTT
SELECT schedule_status, recurrence, owner FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'
----
ACTIVE  @hourly  root

statement ok
ALTER TABLE create_table_no_ttl_set_ttl_expiration_expression RESET (ttl)

query TTT
SELECT schedule_status, recurrence, owner FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'
----

subtest end

subtest special_table_name

statement ok
CREATE TABLE "Table-Name" (id INT PRIMARY KEY) WITH (ttl_expire_after = '10 hours')

let $table_id
SELECT oid FROM pg_class WHERE relname = 'Table-Name'

let $schedule_id
SELECT id FROM [SHOW SCHEDULES]
WHERE label = 'row-level-ttl-$table_id'

query T
SELECT create_statement FROM [SHOW CREATE SCHEDULE $schedule_id]
----
ALTER TABLE test.public."Table-Name" WITH (ttl = 'on', ...)

statement ok
DROP TABLE "Table-Name"

subtest end
