subtest lost_table_data

statement ok
CREATE TABLE corruptdesc (v INT8)

statement ok
CREATE TABLE lostdata (v INT8)

statement ok
INSERT INTO lostdata VALUES (3);

statement ok
INSERT INTO lostdata VALUES (5);

statement ok
INSERT INTO lostdata VALUES (23);

let $t_id
SELECT id FROM system.namespace WHERE name = 'lostdata';

let $corrupt_id
SELECT id FROM system.namespace WHERE name = 'corruptdesc';

let $parentID
SELECT pid FROM system.namespace AS n(pid,psid,name,id) WHERE id = $t_id;

let $parentSchemaID
SELECT psid FROM system.namespace AS n(pid,psid,name,id) WHERE id = $t_id;

query I
SELECT * FROM crdb_internal.lost_descriptors_with_data;
----

# Lost descriptor
let $json_t
WITH
	descs
		AS (
			SELECT
				id,
				crdb_internal.pb_to_json(
					'cockroach.sql.sqlbase.Descriptor',
					descriptor
				)
					AS descriptor
			FROM
				system.descriptor
		)
SELECT
	descriptor
FROM
	descs
WHERE
	id = $t_id;

# Intentionally corrupt descriptor
let $json_corrupt
WITH
  descs
    AS (
      SELECT
        id,
        crdb_internal.pb_to_json(
          'cockroach.sql.sqlbase.Descriptor',
          descriptor
        )
          AS descriptor
      FROM
        system.descriptor
    )
SELECT
  descriptor
FROM
  descs
WHERE
  id = $corrupt_id;

# Delete our corrupt descriptor
query B
SELECT * FROM ROWS FROM (crdb_internal.unsafe_delete_descriptor($corrupt_id));
----
true

# Force delete the descriptor
query B
SELECT * FROM ROWS FROM (crdb_internal.unsafe_delete_descriptor($t_id));
----
true

# Corrupt the descriptor with fake ID's
let $json_t_corrupt
SELECT CAST(replace('$json_corrupt','"name": "corruptdesc",', '') AS JSONB)

# Inject our corrupt descriptor with the wrong ID
statement ok
SELECT * FROM crdb_internal.unsafe_upsert_descriptor($corrupt_id, crdb_internal.json_to_pb( 'cockroach.sql.sqlbase.Descriptor','$json_t_corrupt'), true)


query I
SELECT count(*) FROM crdb_internal.lost_descriptors_with_data WHERE descid = $t_id;
----
1

query I
SELECT count(*) FROM crdb_internal.lost_descriptors_with_data WHERE descid != $t_id
----
0

statement ok
SELECT * FROM crdb_internal.unsafe_upsert_descriptor($t_id, crdb_internal.json_to_pb( 'cockroach.sql.sqlbase.Descriptor','$json_t'))

# Recover the corrupted descriptor
statement ok
SELECT * FROM crdb_internal.unsafe_upsert_descriptor($corrupt_id, crdb_internal.json_to_pb( 'cockroach.sql.sqlbase.Descriptor','$json_corrupt'), true)

statement ok
SELECT * FROM corruptdesc;

# Test the crdb_internal.force_delete_table_data function
subtest force_delete_data

statement ok
CREATE TABLE forcedeletemydata (v int)

statement ok
INSERT INTO forcedeletemydata VALUES(5)

statement ok
INSERT INTO forcedeletemydata VALUES(7)

query I
SELECT * FROM forcedeletemydata ORDER BY v ASC
----
5
7

# Blocked since ID was not used
statement error descriptor id was never used
select * from crdb_internal.force_delete_table_data(6666)


let $t_id
select id from system.namespace where name='forcedeletemydata'

# Descriptor exists so operation is blocked
statement error descriptor still exists force deletion is blocked
select * from crdb_internal.force_delete_table_data($t_id)

query I
SELECT * FROM forcedeletemydata ORDER BY v ASC
----
5
7

let $parentID
SELECT pid FROM system.namespace AS n(pid,psid,name,id) WHERE id = $t_id;

let $parentSchemaID
SELECT psid FROM system.namespace AS n(pid,psid,name,id) WHERE id = $t_id;

let $json
WITH descs AS (
                SELECT id,
                       crdb_internal.pb_to_json(
                        'cockroach.sql.sqlbase.Descriptor',
                        descriptor
                       ) AS descriptor
                  FROM system.descriptor
             )
select descriptor from descs where id=$t_id;


# Force delete the descriptor
query B
select * from crdb_internal.unsafe_delete_descriptor($t_id);
----
true

query B
select * from crdb_internal.force_delete_table_data($t_id)
----
true

statement ok
select * from crdb_internal.unsafe_upsert_descriptor($t_id, crdb_internal.json_to_pb( 'cockroach.sql.sqlbase.Descriptor','$json'))

query I
SELECT * FROM forcedeletemydata ORDER BY v ASC
----

# Test that corrupt back-references should not prevent objects from being queried.
subtest queryable_despite_corrupt_back_refs

statement ok
CREATE TABLE corrupt_backref_fk (k INT PRIMARY KEY, v STRING);
INSERT INTO corrupt_backref_fk (k, v) VALUES (1, 'a');
CREATE TABLE corrupt_fk (k INT NOT NULL, FOREIGN KEY (k) REFERENCES corrupt_backref_fk (k));

query BB
SELECT
	crdb_internal.unsafe_delete_descriptor(id),
	crdb_internal.unsafe_delete_namespace_entry("parentID", "parentSchemaID", name, id)
FROM
	system.namespace
WHERE
	name = 'corrupt_fk'
----
true true

query IT
SELECT * FROM corrupt_backref_fk
----
1 a

statement error invalid foreign key backreference
DROP TABLE corrupt_backref_fk

statement ok
CREATE TABLE corrupt_backref_view (k INT PRIMARY KEY, v STRING);
INSERT INTO corrupt_backref_view (k, v) VALUES (1, 'a');
CREATE VIEW corrupt_view AS SELECT k, v FROM corrupt_backref_view

query BB
SELECT
	crdb_internal.unsafe_delete_descriptor(id),
	crdb_internal.unsafe_delete_namespace_entry("parentID", "parentSchemaID", name, id)
FROM
	system.namespace
WHERE
	name = 'corrupt_view'
----
true true

query IT
SELECT * FROM corrupt_backref_view
----
1 a

statement error pgcode XX000 invalid depended-on-by relation back reference
DROP TABLE corrupt_backref_view

statement ok
CREATE TYPE corrupt_backref_typ AS ENUM ('a', 'b');
CREATE TABLE corrupt_typ (k INT PRIMARY KEY, v corrupt_backref_typ);

query BB
SELECT
	crdb_internal.unsafe_delete_descriptor(id),
	crdb_internal.unsafe_delete_namespace_entry("parentID", "parentSchemaID", name, id)
FROM
	system.namespace
WHERE
	name = 'corrupt_typ'
----
true true

query T
SELECT 'a'::corrupt_backref_typ
----
a

statement error pgcode XXUUU referenced descriptor not found
ALTER TYPE corrupt_backref_typ DROP VALUE 'b'

# This is required to pass the validation tests when the logic test completes.
subtest cleanup

query TB
SELECT
  name,
	crdb_internal.unsafe_delete_descriptor(id, true)
FROM
	system.namespace
WHERE
	name LIKE '%corrupt_backref_%'
ORDER BY
  name
----
_corrupt_backref_typ  true
corrupt_backref_fk    true
corrupt_backref_typ   true
corrupt_backref_view  true

query TBB
SELECT
  name,
	crdb_internal.force_delete_table_data(id),
	crdb_internal.unsafe_delete_namespace_entry("parentID", "parentSchemaID", name, id)
FROM
	system.namespace
WHERE
	name LIKE '%corrupt_backref_%'
ORDER BY
  name
----
_corrupt_backref_typ  true  true
corrupt_backref_fk    true  true
corrupt_backref_typ   true  true
corrupt_backref_view  true  true
