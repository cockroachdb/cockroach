# LogicTest: default opt parallel-stmts distsql distsql-metadata distsql-opt

subtest generate_series

query I colnames
SELECT * FROM GENERATE_SERIES(1, 3)
----
generate_series
1
2
3

query T colnames
SELECT * FROM GENERATE_SERIES('2017-11-11 00:00:00'::TIMESTAMP, '2017-11-11 03:00:00'::TIMESTAMP, '1 hour')
----
generate_series
2017-11-11 00:00:00 +0000 +0000
2017-11-11 01:00:00 +0000 +0000
2017-11-11 02:00:00 +0000 +0000
2017-11-11 03:00:00 +0000 +0000

query T colnames
SELECT * FROM GENERATE_SERIES('2017-11-11 03:00:00'::TIMESTAMP, '2017-11-11 00:00:00'::TIMESTAMP, '-1 hour')
----
generate_series
2017-11-11 03:00:00 +0000 +0000
2017-11-11 02:00:00 +0000 +0000
2017-11-11 01:00:00 +0000 +0000
2017-11-11 00:00:00 +0000 +0000

query T colnames
SELECT * FROM GENERATE_SERIES('2017-11-11 00:00:00'::TIMESTAMP, '2017-11-11 03:00:00'::TIMESTAMP, '-1 hour')
----
generate_series

query II colnames
SELECT * FROM GENERATE_SERIES(1, 2), GENERATE_SERIES(1, 2)
----
generate_series  generate_series
1                1
1                2
2                1
2                2

query I colnames
SELECT * FROM GENERATE_SERIES(3, 1, -1)
----
generate_series
3
2
1

query I colnames
SELECT * FROM GENERATE_SERIES(3, 1)
----
generate_series

query error step cannot be 0
SELECT * FROM GENERATE_SERIES(1, 3, 0)

query I colnames
SELECT * FROM PG_CATALOG.GENERATE_SERIES(1, 3)
----
generate_series
1
2
3

query I colnames
SELECT * FROM GENERATE_SERIES(1, 1) AS c(x)
----
x
1

query II colnames
SELECT * FROM GENERATE_SERIES(1, 1) WITH ORDINALITY
----
generate_series  ordinality
1                1

query II colnames
SELECT * FROM GENERATE_SERIES(1, 1) WITH ORDINALITY AS c(x, y)
----
x y
1 1

query error argument of LIMIT must be type int, not type setof
SELECT * FROM (VALUES (1)) LIMIT GENERATE_SERIES(1, 3)

query I colnames
SELECT GENERATE_SERIES(1, 2)
----
generate_series
1
2

subtest multiple_SRFs
# See #20511

# query II colnames
# SELECT GENERATE_SERIES(1, 2), GENERATE_SERIES(3, 4)
# ----
# generate_series             generate_series
# 1                           3
# 2                           4

query error pq: unimplemented: cannot use multiple set-returning functions in a single SELECT clause: "generate_series\(3, 4\)"
SELECT GENERATE_SERIES(1, 2), GENERATE_SERIES(3, 4)

statement ok
CREATE TABLE t (a string)

statement ok
CREATE TABLE u (b string)

statement ok
INSERT INTO t VALUES ('cat')

statement ok
INSERT INTO u VALUES ('bird')

# The following two queries should have the same result. This exercises the
# transformation that moves generator expressions in render positions to cross
# joins.
# query TTII colnames
# SELECT t.*, u.*, generate_series(1,2), generate_series(3, 4) FROM t, u
# ----
# a    b     generate_series generate_series
# cat  bird  1               3
# cat  bird  2               4

query error pq: unimplemented: cannot use multiple set-returning functions in a single SELECT clause: "generate_series\(3, 4\)"
SELECT t.*, u.*, generate_series(1,2), generate_series(3, 4) FROM t, u

query TTII colnames
SELECT t.*, u.*, a.*, b.* FROM t, u, generate_series(1, 2) AS a, generate_series(3, 4) AS b
----
a    b     a  b
cat  bird  1  3
cat  bird  1  4
cat  bird  2  3
cat  bird  2  4

query I colnames
SELECT 3 + x FROM generate_series(1,2) AS a(x)
----
3 + x
4
5

query I colnames
SELECT 3 + generate_series(1,2)
----
3 + generate_series.generate_series
4
5

query I colnames
SELECT 3 + (3 * generate_series(1,3))
----
3 + (3 * generate_series.generate_series)
6
9
12

subtest unnest

query I colnames
SELECT * from unnest(ARRAY[1,2])
----
unnest
1
2

# Also see #20511
# query IT colnames
# SELECT unnest(ARRAY[1,2]), unnest(ARRAY['a', 'b'])
# ----
# unnest unnest
# 1      a
# 2      b

query error pq: unimplemented: cannot use multiple set-returning functions in a single SELECT clause: "unnest\(ARRAY\['a', 'b'\]\)"
SELECT unnest(ARRAY[1,2]), unnest(ARRAY['a', 'b'])

query I colnames
SELECT unnest(ARRAY[3,4]) - 2
----
unnest.unnest - 2
1
2

# Again #20511
# query II colnames
# SELECT 1 + generate_series(0, 1), unnest(ARRAY[2, 4]) - 1
# ----
# generate_series unnest - 1
# 1               1
# 2               3

query error pq: unimplemented: cannot use multiple set-returning functions in a single SELECT clause: "unnest\(ARRAY\[2, 4\]\)"
SELECT 1 + generate_series(0, 1), unnest(ARRAY[2, 4]) - 1

query I colnames
SELECT ascii(unnest(ARRAY['a', 'b', 'c']));
----
ascii
97
98
99

subtest nested_SRF
# See #20511

query error pq: unimplemented: cannot use multiple set-returning functions in a single SELECT clause: "generate_series\(generate_series.generate_series, 3\)"
SELECT generate_series(generate_series(1, 3), 3)

query error pq: unimplemented: cannot use multiple set-returning functions in a single SELECT clause: "generate_series\(1, 3\)"
SELECT generate_series(1, 3) + generate_series(1, 3)

query error pq: column "generate_series" does not exist
SELECT generate_series(1, 3) FROM t WHERE generate_series > 3

# Regressions for #15900: ensure that null parameters to generate_series don't
# cause issues.

query T colnames
SELECT * from generate_series(1, (select * from generate_series(1, 0)))
----
generate_series

# The following query is designed to produce a null array argument to unnest
# in a way that the type system can't detect before evaluation.
query T colnames
SELECT unnest((SELECT current_schemas((SELECT isnan((SELECT round(3.4, (SELECT generate_series(1, 0)))))))));
----
unnest

# Regression for #18021.
query I colnames
SELECT GENERATE_SERIES(9223372036854775807::int, -9223372036854775807::int, -9223372036854775807::int)
----
generate_series
9223372036854775807
0
-9223372036854775807

subtest pg_get_keywords

# pg_get_keywords for compatibility (#10291)
query TTT colnames
SELECT * FROM pg_get_keywords() WHERE word IN ('alter', 'and', 'between', 'cross') ORDER BY word
----
word     catcode catdesc
alter    U       unreserved
and      R       reserved
between  C       unreserved (cannot be function or type name)
cross    T       reserved (can be function or type name)

# Postgres enables renaming both the source and the column name for
# single-column generators, but not for multi-column generators.
query IITTT colnames
SELECT a.*, b.*, c.* FROM generate_series(1,1) a, unnest(ARRAY[1]) b, pg_get_keywords() c LIMIT 0
----
a  b  word  catcode  catdesc

# Beware of multi-valued SRFs in render position (#19149)
query TTT colnames
SELECT 'a', pg_get_keywords(), 'c' LIMIT 1
----
'a'  (pg_get_keywords.word, pg_get_keywords.catcode, pg_get_keywords.catdesc)  'c'
a    ('abort','U','unreserved')                                                c

query TTT colnames
SELECT 'a', pg_get_keywords() b, 'c' LIMIT 1
----
'a'  b                           'c'
a    ('abort','U','unreserved')  c

subtest unary_table

query TTT colnames
SELECT 'a', crdb_internal.unary_table() b, 'c' LIMIT 1
----
'a'  b   'c'
a    ()  c

subtest upper

# Regular scalar functions can be used as functions too. #22312
query T colnames
SELECT * FROM upper('abc')
----
upper
ABC

subtest current_schema

query TI colnames
SELECT * FROM current_schema() WITH ORDINALITY AS a(b)
----
b      ordinality
public 1

subtest expandArray

query error pq: unknown signature: information_schema._pg_expandarray()
SELECT information_schema._pg_expandarray()

query error pq: unknown signature: information_schema._pg_expandarray()
SELECT * FROM information_schema._pg_expandarray()

query error pq: information_schema\._pg_expandarray\(\): cannot determine type of empty array\. Consider annotating with the desired type, for example ARRAY\[\]:::int\[\]
SELECT information_schema._pg_expandarray(ARRAY[])

query error pq: information_schema\._pg_expandarray\(\): cannot determine type of empty array\. Consider annotating with the desired type, for example ARRAY\[\]:::int\[\]
SELECT * FROM information_schema._pg_expandarray(ARRAY[])

query I colnames
SELECT information_schema._pg_expandarray(ARRAY[]:::int[])
----
 ("information_schema._pg_expandarray".x, "information_schema._pg_expandarray".n)

query II colnames
SELECT * FROM information_schema._pg_expandarray(ARRAY[]:::int[])
----
x  n

query T colnames
SELECT information_schema._pg_expandarray(ARRAY[100])
----
("information_schema._pg_expandarray".x, "information_schema._pg_expandarray".n)
(100,1)

query II colnames
SELECT * FROM information_schema._pg_expandarray(ARRAY[100])
----
x   n
100 1

query T colnames
SELECT information_schema._pg_expandarray(ARRAY[2, 1])
----
("information_schema._pg_expandarray".x, "information_schema._pg_expandarray".n)
(2,1)
(1,2)

query II colnames
SELECT * FROM information_schema._pg_expandarray(ARRAY[2, 1])
----
x n
2 1
1 2

query T colnames
SELECT information_schema._pg_expandarray(ARRAY[3, 2, 1])
----
("information_schema._pg_expandarray".x, "information_schema._pg_expandarray".n)
(3,1)
(2,2)
(1,3)

query II colnames
SELECT * FROM information_schema._pg_expandarray(ARRAY[3, 2, 1])
----
x n
3 1
2 2
1 3

query T colnames
SELECT information_schema._pg_expandarray(ARRAY['a'])
----
("information_schema._pg_expandarray".x, "information_schema._pg_expandarray".n)
('a',1)

query TI colnames
SELECT * FROM information_schema._pg_expandarray(ARRAY['a'])
----
x n
a 1

query T colnames
SELECT information_schema._pg_expandarray(ARRAY['b', 'a'])
----
("information_schema._pg_expandarray".x, "information_schema._pg_expandarray".n)
('b',1)
('a',2)

query TI colnames
SELECT * FROM information_schema._pg_expandarray(ARRAY['b', 'a'])
----
x n
b 1
a 2

query T colnames
SELECT information_schema._pg_expandarray(ARRAY['c', 'b', 'a'])
----
("information_schema._pg_expandarray".x, "information_schema._pg_expandarray".n)
('c',1)
('b',2)
('a',3)

query TI colnames
SELECT * FROM information_schema._pg_expandarray(ARRAY['c', 'b', 'a'])
----
x n
c 1
b 2
a 3

subtest srf_accessor

query error pq: type int is not composite
SELECT (1).*

query error pq: type int is not composite
SELECT ((1)).*

query error pq: type int is not composite
SELECT (1).x

query error pq: type int is not composite
SELECT ((1)).x

query error pq: type string is not composite
SELECT ('a').*

query error pq: type string is not composite
SELECT (('a')).*

query error pq: type string is not composite
SELECT ('a').x

query error pq: type string is not composite
SELECT (('a')).x

query error pq: unnest\(\): cannot determine type of empty array. Consider annotating with the desired type, for example ARRAY\[\]:::int\[\]
SELECT (unnest(ARRAY[])).*

query I colnames
SELECT (unnest(ARRAY[]:::INT[])).*
----
unnest

query TI colnames
SELECT (information_schema._pg_expandarray(ARRAY['c', 'b', 'a'])).*
----
x  n
c  1
b  2
a  3

query T colnames
SELECT (information_schema._pg_expandarray(ARRAY['c', 'b', 'a'])).x
----
x
c
b
a

query I colnames
SELECT (information_schema._pg_expandarray(ARRAY['c', 'b', 'a'])).n
----
n
1
2
3

query error pq: column "information_schema._pg_expandarray.other" does not exist
SELECT (information_schema._pg_expandarray(ARRAY['c', 'b', 'a'])).other

query T colnames
SELECT temp.x from information_schema._pg_expandarray(array['c','b','a']) AS temp;
----
x
c
b
a

query I colnames
SELECT temp.n from information_schema._pg_expandarray(array['c','b','a']) AS temp;
----
n
1
2
3

query error pq: column "temp.other" does not exist
SELECT temp.other from information_schema._pg_expandarray(array['c','b','a']) AS temp;

query TI colnames
SELECT temp.* from information_schema._pg_expandarray(array['c','b','a']) AS temp;
----
x n
c 1
b 2
a 3

query TI colnames
SELECT * from information_schema._pg_expandarray(array['c','b','a']) AS temp;
----
x n
c 1
b 2
a 3

subtest 24866

# TODO(bram): #24866
# query I colnames
# SELECT (i.keys).n FROM (SELECT information_schema._pg_expandarray(ARRAY[3,2,1]) AS keys) AS i;
# ----
# n
# 3
# 2
# 1

subtest generate_subscripts

# Basic use cases

query I colnames
SELECT * FROM generate_subscripts(ARRAY[3,2,1])
----
generate_subscripts
1
2
3

query I colnames
SELECT * FROM generate_subscripts(ARRAY[3,2,1], 1)
----
generate_subscripts
1
2
3

query I colnames
SELECT * FROM generate_subscripts(ARRAY[3,2,1], 1, false)
----
generate_subscripts
1
2
3

query I colnames
SELECT * FROM generate_subscripts(ARRAY[3,2,1], 1, true)
----
generate_subscripts
3
2
1

query I colnames
SELECT generate_subscripts('{NULL,1,NULL,2}'::int[], 1) AS s
----
s
1
2
3
4

query I colnames
SELECT generate_subscripts('{NULL,1,NULL,2}'::int[], 1, true) AS s
----
s
4
3
2
1

# With a non-valid dimension (only 1 should return any rows)

query I colnames
SELECT * FROM generate_subscripts(ARRAY[3,2,1], 2)
----
generate_subscripts

query I colnames
SELECT * FROM generate_subscripts(ARRAY[3,2,1], 2, false)
----
generate_subscripts

query I colnames
SELECT * FROM generate_subscripts(ARRAY[3,2,1], 2, true)
----
generate_subscripts

query I colnames
SELECT * FROM generate_subscripts(ARRAY[3,2,1], 0)
----
generate_subscripts

query I colnames
SELECT * FROM generate_subscripts(ARRAY[3,2,1], 0, false)
----
generate_subscripts

query I colnames
SELECT * FROM generate_subscripts(ARRAY[3,2,1], 0, true)
----
generate_subscripts

query I colnames
SELECT * FROM generate_subscripts(ARRAY[3,2,1], -1)
----
generate_subscripts

query I colnames
SELECT * FROM generate_subscripts(ARRAY[3,2,1], -1, false)
----
generate_subscripts

query I colnames
SELECT * FROM generate_subscripts(ARRAY[3,2,1], -1, true)
----
generate_subscripts

# With an empty array
query I colnames
SELECT * FROM generate_subscripts(ARRAY[]:::int[])
----
generate_subscripts

query I colnames
SELECT * FROM generate_subscripts(ARRAY[]:::int[], 1)
----
generate_subscripts

query I colnames
SELECT * FROM generate_subscripts(ARRAY[]:::string[], 1, false)
----
generate_subscripts

query I colnames
SELECT * FROM generate_subscripts(ARRAY[]:::bool[], 1, true)
----
generate_subscripts

query I colnames
SELECT * FROM generate_subscripts(ARRAY[]:::int[], 0)
----
generate_subscripts

query I colnames
SELECT * FROM generate_subscripts(ARRAY[]:::string[], -1, false)
----
generate_subscripts

query I colnames
SELECT * FROM generate_subscripts(ARRAY[]:::bool[], 2, true)
----
generate_subscripts

# With an array with only one value
query I colnames
SELECT * FROM generate_subscripts(ARRAY[100])
----
generate_subscripts
1

query I colnames
SELECT * FROM generate_subscripts(ARRAY[100], 1)
----
generate_subscripts
1

query I colnames
SELECT * FROM generate_subscripts(ARRAY['b'], 1, false)
----
generate_subscripts
1

query I colnames
SELECT * FROM generate_subscripts(ARRAY[true], 1, true)
----
generate_subscripts
1
