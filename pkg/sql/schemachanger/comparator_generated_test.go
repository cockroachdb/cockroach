// Copyright 2023 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

// Code generated by sccomparatortestgen, DO NOT EDIT.

package schemachanger_test

import (
	"path/filepath"
	"testing"

	"github.com/cockroachdb/cockroach/pkg/build/bazel"
	"github.com/cockroachdb/cockroach/pkg/sql/schemachanger/sctest"
	"github.com/cockroachdb/cockroach/pkg/testutils/skip"
	"github.com/cockroachdb/cockroach/pkg/util/envutil"
	"github.com/cockroachdb/cockroach/pkg/util/leaktest"
	"github.com/cockroachdb/cockroach/pkg/util/log"
	"github.com/stretchr/testify/require"
)

func TestSchemaChangeComparator_aggregate(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/aggregate"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alias_types(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alias_types"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_column_type(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_column_type"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_database_convert_to_schema(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_database_convert_to_schema"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_database_owner(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_database_owner"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_default_privileges_for_all_roles(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_default_privileges_for_all_roles"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_default_privileges_for_schema(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_default_privileges_for_schema"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_default_privileges_for_sequence(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_default_privileges_for_sequence"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_default_privileges_for_table(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_default_privileges_for_table"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_default_privileges_for_type(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_default_privileges_for_type"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_default_privileges_in_schema(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_default_privileges_in_schema"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_default_privileges_with_grant_option(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_default_privileges_with_grant_option"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_primary_key(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_primary_key"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_role(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_role"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_role_set(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_role_set"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_schema_owner(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_schema_owner"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_sequence(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_sequence"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_sequence_owner(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_sequence_owner"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_table(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_table"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_table_owner(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_table_owner"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_type(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_type"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_type_owner(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_type_owner"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_alter_view_owner(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/alter_view_owner"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_and_or(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/and_or"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_apply_join(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/apply_join"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_array(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/array"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_as_of(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/as_of"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_asyncpg(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/asyncpg"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_auto_span_config_reconciliation_job(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/auto_span_config_reconciliation_job"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_bit(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/bit"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_builtin_function(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/builtin_function"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_builtin_function_notenant(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/builtin_function_notenant"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_bytes(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/bytes"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_cascade(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/cascade"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_case_sensitive_names(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/case_sensitive_names"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_cast(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/cast"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_ccl(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/ccl"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_check_constraints(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/check_constraints"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_cluster_locks(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/cluster_locks"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_cluster_settings(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/cluster_settings"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_collatedstring(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/collatedstring"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_collatedstring_constraint(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/collatedstring_constraint"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_collatedstring_index1(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/collatedstring_index1"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_collatedstring_index2(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/collatedstring_index2"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_collatedstring_normalization(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/collatedstring_normalization"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_collatedstring_nullinindex(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/collatedstring_nullinindex"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_collatedstring_uniqueindex1(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/collatedstring_uniqueindex1"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_collatedstring_uniqueindex2(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/collatedstring_uniqueindex2"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_column_families(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/column_families"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_comment_on(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/comment_on"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_composite_types(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/composite_types"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_computed(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/computed"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_conditional(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/conditional"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_connect_privilege(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/connect_privilege"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_contention_event(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/contention_event"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_crdb_internal(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/crdb_internal"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_crdb_internal_catalog(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/crdb_internal_catalog"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_crdb_internal_default_privileges(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/crdb_internal_default_privileges"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_create_as(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/create_as"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_create_as_non_metamorphic(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/create_as_non_metamorphic"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_create_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/create_index"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_create_statements(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/create_statements"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_create_table(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/create_table"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_cross_join(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/cross_join"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_cursor(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/cursor"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_custom_escape_character(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/custom_escape_character"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_dangerous_statements(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/dangerous_statements"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_database(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/database"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_datetime(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/datetime"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_decimal(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/decimal"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/default"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_delete(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/delete"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_delete_batch(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/delete_batch"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_dependencies(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/dependencies"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_discard(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/discard"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_disjunction_in_join(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/disjunction_in_join"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_dist_vectorize(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/dist_vectorize"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distinct(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distinct"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distinct_on(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distinct_on"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_agg(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_agg"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_automatic_stats(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_automatic_stats"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_builtin(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_builtin"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_crdb_internal(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_crdb_internal"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_datetime(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_datetime"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_distinct_on(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_distinct_on"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_enum(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_enum"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_event_log(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_event_log"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_expr(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_expr"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_join(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_join"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_numtables(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_numtables"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_srfs(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_srfs"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_stats(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_stats"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_subquery(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_subquery"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_tenant(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_tenant"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_tenant_locality(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_tenant_locality"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_distsql_union(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/distsql_union"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_drop_database(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/drop_database"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_drop_function(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/drop_function"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_drop_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/drop_index"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_drop_owned_by(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/drop_owned_by"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_drop_procedure(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/drop_procedure"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_drop_role_with_default_privileges(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/drop_role_with_default_privileges"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_drop_role_with_default_privileges_in_schema(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/drop_role_with_default_privileges_in_schema"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_drop_schema(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/drop_schema"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_drop_sequence(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/drop_sequence"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_drop_table(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/drop_table"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_drop_temp(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/drop_temp"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_drop_type(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/drop_type"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_drop_user(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/drop_user"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_drop_view(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/drop_view"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_edge(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/edge"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_enums(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/enums"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_errors(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/errors"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_event_log(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/event_log"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_event_log_legacy(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/event_log_legacy"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_exclude_data_from_backup(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/exclude_data_from_backup"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_experimental_distsql_planning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/experimental_distsql_planning"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_experimental_distsql_planning_5node(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/experimental_distsql_planning_5node"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_explain(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/explain"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_explain_analyze(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/explain_analyze"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_export(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/export"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_expression_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/expression_index"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_external_connection_privileges(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/external_connection_privileges"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_family(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/family"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_feature_counts(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/feature_counts"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_fk(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/fk"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_fk_read_committed(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/fk_read_committed"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_float(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/float"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_format(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/format"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_function_lookup(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/function_lookup"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_fuzzystrmatch(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/fuzzystrmatch"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_gc_job_mixed(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/gc_job_mixed"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_gen_test_objects(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/gen_test_objects"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_generator_probe_ranges(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/generator_probe_ranges"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_geospatial(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/geospatial"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_geospatial_bbox(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/geospatial_bbox"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_geospatial_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/geospatial_index"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_geospatial_meta(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/geospatial_meta"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_geospatial_regression(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/geospatial_regression"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_geospatial_zm(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/geospatial_zm"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_grant_database(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/grant_database"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_grant_in_txn(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/grant_in_txn"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_grant_inherited(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/grant_inherited"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_grant_on_all_sequences_in_schema(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/grant_on_all_sequences_in_schema"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_grant_on_all_tables_in_schema(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/grant_on_all_tables_in_schema"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_grant_revoke_with_grant_option(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/grant_revoke_with_grant_option"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_grant_role(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/grant_role"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_grant_schema(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/grant_schema"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_grant_sequence(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/grant_sequence"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_grant_table(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/grant_table"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_grant_type(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/grant_type"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_group_join(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/group_join"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_guardrails(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/guardrails"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_hash_join(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/hash_join"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_hash_join_dist(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/hash_join_dist"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_hash_sharded_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/hash_sharded_index"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_hash_sharded_index_read_committed(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/hash_sharded_index_read_committed"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_hidden_columns(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/hidden_columns"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_impure(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/impure"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_index_join(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/index_join"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_inet(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/inet"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_inflight_trace_spans(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/inflight_trace_spans"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_information_schema(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/information_schema"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_inner_join(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/inner-join"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_insert(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/insert"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_int_size(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/int_size"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_internal_executor(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/internal_executor"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_interval(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/interval"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_inv_stats(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/inv_stats"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_inverted_filter_geospatial(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/inverted_filter_geospatial"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_inverted_filter_geospatial_dist(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/inverted_filter_geospatial_dist"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_inverted_filter_json_array(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/inverted_filter_json_array"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_inverted_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/inverted_index"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_inverted_index_geospatial(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/inverted_index_geospatial"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_inverted_index_multi_column(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/inverted_index_multi_column"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_inverted_join_geospatial(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/inverted_join_geospatial"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_inverted_join_geospatial_bbox(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/inverted_join_geospatial_bbox"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_inverted_join_geospatial_dist(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/inverted_join_geospatial_dist"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_inverted_join_json_array(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/inverted_join_json_array"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_inverted_join_multi_column(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/inverted_join_multi_column"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_jobs(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/jobs"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_join(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/join"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_json(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/json"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_json_builtins(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/json_builtins"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_json_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/json_index"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_json_index_local_mixed(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/json_index_local_mixed"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_kv_builtin_functions(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/kv_builtin_functions"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_kv_builtin_functions_local(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/kv_builtin_functions_local"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_kv_builtin_functions_tenant(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/kv_builtin_functions_tenant"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_limit(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/limit"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_locality(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/locality"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_lock_timeout(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/lock_timeout"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_lookup_join(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/lookup_join"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_lookup_join_local(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/lookup_join_local"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_lookup_join_spans(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/lookup_join_spans"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_manual_retry(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/manual_retry"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_materialized_view(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/materialized_view"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_merge_join(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/merge_join"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_merge_join_dist(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/merge_join_dist"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_mixed_version_bootstrap_tenant(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/mixed_version_bootstrap_tenant"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_mixed_version_can_login(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/mixed_version_can_login"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_mixed_version_database_role_settings_role_id(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/mixed_version_database_role_settings_role_id"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_mixed_version_external_connections_owner_id(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/mixed_version_external_connections_owner_id"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_mixed_version_insights_queries(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/mixed_version_insights_queries"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_mixed_version_partially_visible_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/mixed_version_partially_visible_index"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_mixed_version_plpgsql(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/mixed_version_plpgsql"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_mixed_version_procedure(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/mixed_version_procedure"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_mixed_version_refcursor(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/mixed_version_refcursor"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_mixed_version_role_members_user_ids(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/mixed_version_role_members_user_ids"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_mixed_version_schedule_details(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/mixed_version_schedule_details"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_mixed_version_system_privileges_user_id(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/mixed_version_system_privileges_user_id"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_mixed_version_udf_execute_privileges(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/mixed_version_udf_execute_privileges"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_mixed_version_udf_mutations(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/mixed_version_udf_mutations"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_mixed_version_upgrade_repair_descriptors(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/mixed_version_upgrade_repair_descriptors"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_multi_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/multi_region"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_multi_statement(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/multi_statement"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_multiregion_invalid_locality(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/multiregion_invalid_locality"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_name_escapes(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/name_escapes"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_namespace(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/namespace"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_new_schema_changer(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/new_schema_changer"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_no_primary_key(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/no_primary_key"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_notice(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/notice"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_numeric_references(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/numeric_references"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_on_update(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/on_update"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_operator(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/operator"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_optimizer_timeout(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/optimizer_timeout"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_order_by(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/order_by"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_ordinal_references(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/ordinal_references"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_ordinality(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/ordinality"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_orms(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/orms"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_overflow(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/overflow"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_overlaps(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/overlaps"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_owner(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/owner"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_parallel_stmts_compat(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/parallel_stmts_compat"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_partial_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/partial_index"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_partial_txn_commit(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/partial_txn_commit"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/partitioning"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_pg_builtins(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/pg_builtins"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_pg_catalog(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/pg_catalog"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_pg_catalog_pg_default_acl(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/pg_catalog_pg_default_acl"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_pg_catalog_pg_default_acl_with_grant_option(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/pg_catalog_pg_default_acl_with_grant_option"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_pg_extension(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/pg_extension"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_pg_lsn(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/pg_lsn"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_pg_lsn_mixed(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/pg_lsn_mixed"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_pgcrypto_builtins(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/pgcrypto_builtins"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_pgoidtype(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/pgoidtype"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_plpgsql_builtins(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/plpgsql_builtins"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_plpgsql_cursor(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/plpgsql_cursor"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_poison_after_push(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/poison_after_push"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_postgres_jsonb(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/postgres_jsonb"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_postgresjoin(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/postgresjoin"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_prepare(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/prepare"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_privilege_builtins(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/privilege_builtins"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_privileges_comments(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/privileges_comments"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_privileges_table(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/privileges_table"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_procedure(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/procedure"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_procedure_plpgsql(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/procedure_plpgsql"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_procedure_privileges(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/procedure_privileges"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_procedure_schema_change(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/procedure_schema_change"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_propagate_input_ordering(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/propagate_input_ordering"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_rand_ident(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/rand_ident"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_ranges(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/ranges"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_read_committed(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/read_committed"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_reassign_owned_by(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/reassign_owned_by"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_record(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/record"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_redact_descriptor(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/redact_descriptor"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_refcursor(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/refcursor"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_rename_atomic(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/rename_atomic"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_rename_column(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/rename_column"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_rename_constraint(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/rename_constraint"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_rename_database(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/rename_database"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_rename_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/rename_index"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_rename_sequence(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/rename_sequence"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_rename_table(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/rename_table"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_rename_view(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/rename_view"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_reset(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/reset"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_retry(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/retry"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_returning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/returning"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_role(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/role"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_routine_schema_change(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/routine_schema_change"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_row_level_ttl(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/row_level_ttl"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_rows_from(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/rows_from"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_run_control(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/run_control"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_save_table(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/save_table"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_savepoints(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/savepoints"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_scale(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/scale"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_scatter(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/scatter"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_schema(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/schema"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_schema_change_feature_flags(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/schema_change_feature_flags"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_schema_change_in_txn(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/schema_change_in_txn"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_schema_change_retry(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/schema_change_retry"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_schema_locked(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/schema_locked"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_schema_repair(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/schema_repair"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_scrub(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/scrub"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_secondary_index_column_families(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/secondary_index_column_families"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_select(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/select"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_select_for_share(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/select_for_share"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_select_for_update(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/select_for_update"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_select_for_update_read_committed(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/select_for_update_read_committed"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_select_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/select_index"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_select_index_flags(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/select_index_flags"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_select_search_path(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/select_search_path"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_select_table_alias(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/select_table_alias"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_sequences(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/sequences"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_sequences_distsql(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/sequences_distsql"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_sequences_regclass(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/sequences_regclass"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_serial(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/serial"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_serializable_eager_restart(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/serializable_eager_restart"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_set(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/set"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_set_local(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/set_local"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_set_role(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/set_role"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_set_schema(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/set_schema"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_set_time_zone(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/set_time_zone"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_shift(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/shift"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_commit_timestamp(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_commit_timestamp"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_completions(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_completions"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_create(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_create"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_create_all_schemas(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_create_all_schemas"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_create_all_tables(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_create_all_tables"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_create_all_tables_builtin(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_create_all_tables_builtin"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_create_all_types(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_create_all_types"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_create_redact(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_create_redact"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_default_privileges(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_default_privileges"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_fingerprints(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_fingerprints"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_grants_on_virtual_table(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_grants_on_virtual_table"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_grants_synthetic(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_grants_synthetic"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_indexes(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_indexes"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_ranges(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_ranges"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_source(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_source"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_tables(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_tables"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_tenant_fingerprints(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_tenant_fingerprints"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_transfer_state(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_transfer_state"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_show_var(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/show_var"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_skip_on_retry(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/skip_on_retry"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_span_builtins(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/span_builtins"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_split_at(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/split_at"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_sql_keys(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/sql_keys"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_sqllite(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/sqllite"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_sqlsmith(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/sqlsmith"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_srfs(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/srfs"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_statement_source(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/statement_source"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_statement_statistics(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/statement_statistics"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_statement_statistics_errors(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/statement_statistics_errors"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_statement_statistics_errors_redacted(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/statement_statistics_errors_redacted"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_stats(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/stats"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_storing(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/storing"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_strict_ddl_atomicity(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/strict_ddl_atomicity"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_suboperators(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/suboperators"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_subquery(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/subquery"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_subquery_correlated(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/subquery_correlated"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_synthetic_privileges(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/synthetic_privileges"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_system(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/system"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_system_columns(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/system_columns"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_system_namespace(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/system_namespace"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_table(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/table"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_target_names(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/target_names"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_temp_table(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/temp_table"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_temp_table_txn(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/temp_table_txn"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_tenant(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/tenant"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_tenant_builtins(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/tenant_builtins"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_tenant_from_tenant(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/tenant_from_tenant"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_tenant_from_tenant_hint(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/tenant_from_tenant_hint"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_tenant_slow_repro(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/tenant_slow_repro"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_tenant_span_stats(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/tenant_span_stats"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_time(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/time"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_timestamp(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/timestamp"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_timetz(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/timetz"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_trigram_builtins(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/trigram_builtins"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_trigram_indexes(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/trigram_indexes"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_truncate(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/truncate"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_truncate_with_concurrent_mutation(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/truncate_with_concurrent_mutation"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_tsvector(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/tsvector"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_tuple(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/tuple"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_tuple_local(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/tuple_local"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_txn(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/txn"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_txn_as_of(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/txn_as_of"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_txn_retry(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/txn_retry"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_txn_stats(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/txn_stats"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_type_privileges(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/type_privileges"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_typing(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/typing"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_delete(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_delete"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_fk(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_fk"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_in_column_defaults(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_in_column_defaults"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_in_constraints(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_in_constraints"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_insert(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_insert"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_observability(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_observability"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_oid_ref(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_oid_ref"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_options(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_options"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_plpgsql(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_plpgsql"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_prepare(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_prepare"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_privileges(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_privileges"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_privileges_mutations(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_privileges_mutations"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_record(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_record"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_regressions(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_regressions"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_schema_change(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_schema_change"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_setof(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_setof"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_star(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_star"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_subquery(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_subquery"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_unsupported(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_unsupported"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_update(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_update"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_upsert(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_upsert"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_udf_volatility_check(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/udf_volatility_check"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_union(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/union"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_unique(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/unique"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_unique_read_committed(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/unique_read_committed"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_update(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/update"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_update_from(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/update_from"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_upsert(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/upsert"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_upsert_non_metamorphic(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/upsert_non_metamorphic"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_user(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/user"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_uuid(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/uuid"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_values(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/values"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_vectorize(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/vectorize"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_vectorize_agg(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/vectorize_agg"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_vectorize_local(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/vectorize_local"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_vectorize_overloads(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/vectorize_overloads"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_vectorize_shutdown(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/vectorize_shutdown"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_vectorize_types(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/vectorize_types"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_vectorize_unsupported(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/vectorize_unsupported"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_vectorize_window(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/vectorize_window"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_views(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/views"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_virtual_columns(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/virtual_columns"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_virtual_table_privileges(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/virtual_table_privileges"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_void(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/void"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_where(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/where"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_window(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/window"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_with(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/with"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_workload_indexrecs(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/workload_indexrecs"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_zero(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/zero"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_zigzag_join(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/zigzag_join"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_zone_config(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/zone_config"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
func TestSchemaChangeComparator_zone_config_system_tenant(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)

	var logicTestFile = "pkg/sql/logictest/testdata/logic_test/zone_config_system_tenant"

	var path string
	if bazel.BuiltWithBazel() {
		var err error
		path, err = bazel.Runfile(logicTestFile)
		require.NoError(t, err)
	} else {
		path = "../../../" + logicTestFile
	}
	basename := filepath.Base(path)

	var skipComparatorTest = envutil.EnvOrDefaultBool("COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP", true)
	if skipComparatorTest {
		skip.IgnoreLint(t, "requires COCKROACH_SCHEMA_CHANGE_COMPARATOR_SKIP to be set")
	}

	if skipEntry, skipReason := shouldSkipLogicTestCorpusEntry(basename); skipEntry {
		skip.IgnoreLint(t, skipReason)
	}

	stmts, err := collectStmtsFrom(path)
	require.NoError(t, err)

	ss := &staticSQLStmtLineProvider{
		stmts: stmts,
	}
	sctest.CompareLegacyAndDeclarative(t, ss)
}
