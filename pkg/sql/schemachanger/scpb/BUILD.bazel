load("@rules_proto//proto:defs.bzl", "proto_library")
load("@io_bazel_rules_go//proto:def.bzl", "go_proto_library")
load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "scpb",
    srcs = [
        "attr.go",
        "attr_values.go",
        "element_attrs.go",
        "elements.go",
        "entity.go",
        "format.go",
        ":gen-attr-stringer",  # keep
    ],
    embed = [":scpb_go_proto"],
    importpath = "github.com/cockroachdb/cockroach/pkg/sql/schemachanger/scpb",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/sql/catalog/descpb",
        "//pkg/sql/schemachanger/eav",
        "//pkg/util/protoutil",
        "@com_github_cockroachdb_errors//:errors",
        "@org_golang_google_protobuf//proto",
    ],
)

go_proto_library(
    name = "scpb_go_proto",
    compilers = ["//pkg/cmd/protoc-gen-gogoroach:protoc-gen-gogoroach_compiler"],
    importpath = "github.com/cockroachdb/cockroach/pkg/sql/schemachanger/scpb",
    proto = ":scpb_proto",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/sql/catalog/descpb",
        "@com_github_gogo_protobuf//gogoproto",
    ],
)

go_test(
    name = "scpb_test",
    size = "small",
    srcs = [
        "attribute_test.go",
        "elements_test.go",
        "query_test.go",
        "tree_test.go",
    ],
    embed = [":scpb"],
    deps = [
        "//pkg/sql/catalog/descpb",
        "//pkg/sql/schemachanger/eav",
        "//pkg/sql/schemachanger/eav/eavquery",
        "//pkg/util/iterutil",
        "@com_github_stretchr_testify//require",
    ],
)

proto_library(
    name = "scpb_proto",
    srcs = ["scpb.proto"],
    strip_import_prefix = "/pkg",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/sql/catalog/descpb:descpb_proto",
        "@com_github_gogo_protobuf//gogoproto:gogo_proto",
    ],
)

# Keep this genrule and not using common string function due to extra flags eg: trimprefix
genrule(
    name = "gen-attr-stringer",
    srcs = [
        "attr.go",
    ],
    outs = ["attr_string.go"],
    # golang.org/x/tools executes commands via
    # golang.org/x/sys/execabs which requires all PATH lookups to
    # result in absolute paths. To account for this, we resolve the
    # relative path returned by location to an absolute path.
    cmd = """
       GO_REL_PATH=`dirname $(location @go_sdk//:bin/go)`
       GO_ABS_PATH=`cd $$GO_REL_PATH && pwd`
       # Set GOPATH to something to workaround https://github.com/golang/go/issues/43938
       env PATH=$$GO_ABS_PATH HOME=$(GENDIR) GOPATH=/nonexist-gopath \
       $(location @org_golang_x_tools//cmd/stringer:stringer) -output=$@ -type=Attr -trimprefix Attr $<
    """,
    exec_tools = [
        "@go_sdk//:bin/go",
        "@org_golang_x_tools//cmd/stringer",
    ],
)
