// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/schemachanger/scpb/scpb.proto

package scpb

import (
	fmt "fmt"
	descpb "github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb"
	github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb "github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb"
	types "github.com/cockroachdb/cockroach/pkg/sql/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_UNKNOWN               Status = 0
	Status_ABSENT                Status = 1
	Status_DROPPED               Status = 2
	Status_DELETE_ONLY           Status = 3
	Status_DELETE_AND_WRITE_ONLY Status = 4
	Status_BACKFILLED            Status = 5
	Status_VALIDATED             Status = 6
	Status_TXN_DROPPED           Status = 7
	Status_PUBLIC                Status = 8
)

var Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "ABSENT",
	2: "DROPPED",
	3: "DELETE_ONLY",
	4: "DELETE_AND_WRITE_ONLY",
	5: "BACKFILLED",
	6: "VALIDATED",
	7: "TXN_DROPPED",
	8: "PUBLIC",
}

var Status_value = map[string]int32{
	"UNKNOWN":               0,
	"ABSENT":                1,
	"DROPPED":               2,
	"DELETE_ONLY":           3,
	"DELETE_AND_WRITE_ONLY": 4,
	"BACKFILLED":            5,
	"VALIDATED":             6,
	"TXN_DROPPED":           7,
	"PUBLIC":                8,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{0}
}

type ConstraintType int32

const (
	ConstraintType_Invalid            ConstraintType = 0
	ConstraintType_UniqueWithoutIndex ConstraintType = 1
	ConstraintType_Check              ConstraintType = 2
)

var ConstraintType_name = map[int32]string{
	0: "Invalid",
	1: "UniqueWithoutIndex",
	2: "Check",
}

var ConstraintType_value = map[string]int32{
	"Invalid":            0,
	"UniqueWithoutIndex": 1,
	"Check":              2,
}

func (x ConstraintType) String() string {
	return proto.EnumName(ConstraintType_name, int32(x))
}

func (ConstraintType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{1}
}

type Target_Direction int32

const (
	Target_UNKNOWN Target_Direction = 0
	Target_ADD     Target_Direction = 1
	Target_DROP    Target_Direction = 2
	Target_STATIC  Target_Direction = 3
)

var Target_Direction_name = map[int32]string{
	0: "UNKNOWN",
	1: "ADD",
	2: "DROP",
	3: "STATIC",
}

var Target_Direction_value = map[string]int32{
	"UNKNOWN": 0,
	"ADD":     1,
	"DROP":    2,
	"STATIC":  3,
}

func (x Target_Direction) String() string {
	return proto.EnumName(Target_Direction_name, int32(x))
}

func (Target_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{1, 0}
}

// The direction of a column in the index.
type PrimaryIndex_Direction int32

const (
	PrimaryIndex_ASC  PrimaryIndex_Direction = 0
	PrimaryIndex_DESC PrimaryIndex_Direction = 1
)

var PrimaryIndex_Direction_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}

var PrimaryIndex_Direction_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (x PrimaryIndex_Direction) String() string {
	return proto.EnumName(PrimaryIndex_Direction_name, int32(x))
}

func (PrimaryIndex_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{3, 0}
}

// The direction of a column in the index.
type SecondaryIndex_Direction int32

const (
	SecondaryIndex_ASC  SecondaryIndex_Direction = 0
	SecondaryIndex_DESC SecondaryIndex_Direction = 1
)

var SecondaryIndex_Direction_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}

var SecondaryIndex_Direction_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (x SecondaryIndex_Direction) String() string {
	return proto.EnumName(SecondaryIndex_Direction_name, int32(x))
}

func (SecondaryIndex_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{4, 0}
}

type SequenceDependency_Type int32

const (
	SequenceDependency_UNKNOWN SequenceDependency_Type = 0
	SequenceDependency_USES    SequenceDependency_Type = 1
	SequenceDependency_OWNS    SequenceDependency_Type = 2
)

var SequenceDependency_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "USES",
	2: "OWNS",
}

var SequenceDependency_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"USES":    1,
	"OWNS":    2,
}

func (x SequenceDependency_Type) String() string {
	return proto.EnumName(SequenceDependency_Type_name, int32(x))
}

func (SequenceDependency_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{5, 0}
}

type ElementProto struct {
	Column                       *Column                       `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty" parent:"Table"`
	PrimaryIndex                 *PrimaryIndex                 `protobuf:"bytes,2,opt,name=primary_index,json=primaryIndex,proto3" json:"primary_index,omitempty" parent:"Table"`
	SecondaryIndex               *SecondaryIndex               `protobuf:"bytes,3,opt,name=secondary_index,json=secondaryIndex,proto3" json:"secondary_index,omitempty" parent:"Table"`
	SequenceDependency           *SequenceDependency           `protobuf:"bytes,4,opt,name=sequence_dependency,json=sequenceDependency,proto3" json:"sequence_dependency,omitempty" parent:"Column, Table"`
	UniqueConstraint             *UniqueConstraint             `protobuf:"bytes,5,opt,name=unique_constraint,json=uniqueConstraint,proto3" json:"unique_constraint,omitempty" parent:"SecondaryIndex, Table"`
	CheckConstraint              *CheckConstraint              `protobuf:"bytes,6,opt,name=check_constraint,json=checkConstraint,proto3" json:"check_constraint,omitempty" parent:"Table"`
	Sequence                     *Sequence                     `protobuf:"bytes,7,opt,name=sequence,proto3" json:"sequence,omitempty"`
	DefaultExpression            *DefaultExpression            `protobuf:"bytes,8,opt,name=default_expression,json=defaultExpression,proto3" json:"default_expression,omitempty" parent:"Column"`
	View                         *View                         `protobuf:"bytes,9,opt,name=view,proto3" json:"view,omitempty"`
	Table                        *Table                        `protobuf:"bytes,10,opt,name=table,proto3" json:"table,omitempty"`
	OutForeignKey                *ForeignKey                   `protobuf:"bytes,11,opt,name=outForeignKey,proto3" json:"outForeignKey,omitempty" parent:"Table"`
	InForeignKey                 *ForeignKeyBackReference      `protobuf:"bytes,12,opt,name=inForeignKey,proto3" json:"inForeignKey,omitempty" parent:"Table"`
	RelationDependedOnBy         *RelationDependedOnBy         `protobuf:"bytes,13,opt,name=relationDependedOnBy,proto3" json:"relationDependedOnBy,omitempty" parent:"Table, View"`
	SequenceOwner                *SequenceOwnedBy              `protobuf:"bytes,45,opt,name=sequenceOwner,proto3" json:"sequenceOwner,omitempty" parent:"Column, Sequence"`
	Type                         *Type                         `protobuf:"bytes,15,opt,name=type,proto3" json:"type,omitempty"`
	Schema                       *Schema                       `protobuf:"bytes,16,opt,name=schema,proto3" json:"schema,omitempty"`
	Database                     *Database                     `protobuf:"bytes,17,opt,name=database,proto3" json:"database,omitempty"`
	Partitioning                 *Partitioning                 `protobuf:"bytes,18,opt,name=partitioning,proto3" json:"partitioning,omitempty" parent:"PrimaryIndex, SecondaryIndex"`
	Namespace                    *Namespace                    `protobuf:"bytes,19,opt,name=namespace,proto3" json:"namespace,omitempty" parent:"Table, View, Sequence, Database, Schema, Type"`
	Owner                        *Owner                        `protobuf:"bytes,20,opt,name=owner,proto3" json:"owner,omitempty" parent:"Table, View, Sequence, Database, Schema"`
	UserPrivileges               *UserPrivileges               `protobuf:"bytes,21,opt,name=UserPrivileges,proto3" json:"UserPrivileges,omitempty" parent:"Table, View, Sequence, Database, Schema"`
	ColumnName                   *ColumnName                   `protobuf:"bytes,22,opt,name=columnName,proto3" json:"columnName,omitempty" parent:"Column"`
	Locality                     *Locality                     `protobuf:"bytes,23,opt,name=locality,proto3" json:"locality,omitempty" parent:"Table"`
	IndexName                    *IndexName                    `protobuf:"bytes,24,opt,name=indexName,proto3" json:"indexName,omitempty" parent:"PrimaryIndex, SecondaryIndex"`
	ConstraintName               *ConstraintName               `protobuf:"bytes,25,opt,name=constraintName,proto3" json:"constraintName,omitempty" parent:"UniqueConstraint, CheckConstraint"`
	DefaultExprTypeRef           *DefaultExprTypeReference     `protobuf:"bytes,26,opt,name=defaultExprTypeRef,proto3" json:"defaultExprTypeRef,omitempty" parent:"Column, Type"`
	OnUpdateTypeReference        *OnUpdateExprTypeReference    `protobuf:"bytes,27,opt,name=onUpdateTypeReference,proto3" json:"onUpdateTypeReference,omitempty" parent:"Column, Type"`
	ComputedExprTypeReference    *ComputedExprTypeReference    `protobuf:"bytes,28,opt,name=computedExprTypeReference,proto3" json:"computedExprTypeReference,omitempty" parent:"Column, Type"`
	ViewDependsOnType            *ViewDependsOnType            `protobuf:"bytes,29,opt,name=viewDependsOnType,proto3" json:"viewDependsOnType,omitempty" parent:"View, Type"`
	ColumnTypeReference          *ColumnTypeReference          `protobuf:"bytes,30,opt,name=columnTypeReference,proto3" json:"columnTypeReference,omitempty" parent:"Column, Type"`
	SchemaEntry                  *DatabaseSchemaEntry          `protobuf:"bytes,31,opt,name=schemaEntry,proto3" json:"schemaEntry,omitempty" parent:"Database, Schema"`
	CheckConstraintTypeReference *CheckConstraintTypeReference `protobuf:"bytes,32,opt,name=checkConstraintTypeReference,proto3" json:"checkConstraintTypeReference,omitempty" parent:"Table, Type"`
}

func (m *ElementProto) Reset()         { *m = ElementProto{} }
func (m *ElementProto) String() string { return proto.CompactTextString(m) }
func (*ElementProto) ProtoMessage()    {}
func (*ElementProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{0}
}
func (m *ElementProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElementProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ElementProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementProto.Merge(m, src)
}
func (m *ElementProto) XXX_Size() int {
	return m.Size()
}
func (m *ElementProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementProto.DiscardUnknown(m)
}

var xxx_messageInfo_ElementProto proto.InternalMessageInfo

type Target struct {
	ElementProto `protobuf:"bytes,1,opt,name=element_proto,json=elementProto,proto3,embedded=element_proto" json:"element_proto"`
	Metadata     TargetMetadata   `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata"`
	Direction    Target_Direction `protobuf:"varint,4,opt,name=direction,proto3,enum=cockroach.sql.schemachanger.scpb.Target_Direction" json:"direction,omitempty"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{1}
}
func (m *Target) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(m, src)
}
func (m *Target) XXX_Size() int {
	return m.Size()
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

type Column struct {
	TableID                           github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID                      `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	ColumnID                          github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID                `protobuf:"varint,3,opt,name=column_id,json=columnId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_id,omitempty"`
	FamilyID                          github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.FamilyID                `protobuf:"varint,4,opt,name=family_id,json=familyId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.FamilyID" json:"family_id,omitempty"`
	FamilyName                        string                                                                          `protobuf:"bytes,5,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	Type                              *types.T                                                                        `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Nullable                          bool                                                                            `protobuf:"varint,7,opt,name=nullable,proto3" json:"nullable,omitempty"`
	DefaultExpr                       string                                                                          `protobuf:"bytes,8,opt,name=default_expr,json=defaultExpr,proto3" json:"default_expr,omitempty"`
	OnUpdateExpr                      string                                                                          `protobuf:"bytes,9,opt,name=on_update_expr,json=onUpdateExpr,proto3" json:"on_update_expr,omitempty"`
	Hidden                            bool                                                                            `protobuf:"varint,10,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Inaccessible                      bool                                                                            `protobuf:"varint,11,opt,name=inaccessible,proto3" json:"inaccessible,omitempty"`
	GeneratedAsIdentityType           github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.GeneratedAsIdentityType `protobuf:"varint,12,opt,name=generated_as_identity_type,json=generatedAsIdentityType,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.GeneratedAsIdentityType" json:"generated_as_identity_type,omitempty"`
	GeneratedAsIdentitySequenceOption string                                                                          `protobuf:"bytes,13,opt,name=generated_as_identity_sequence_option,json=generatedAsIdentitySequenceOption,proto3" json:"generated_as_identity_sequence_option,omitempty"`
	UsesSequenceIds                   []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID                    `protobuf:"varint,14,rep,packed,name=uses_sequence_ids,json=usesSequenceIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"uses_sequence_ids,omitempty"`
	ComputerExpr                      string                                                                          `protobuf:"bytes,15,opt,name=computerExpr,proto3" json:"computerExpr,omitempty"`
	PgAttributeNum                    uint32                                                                          `protobuf:"varint,16,opt,name=pg_attribute_num,json=pgAttributeNum,proto3" json:"pg_attribute_num,omitempty"`
	SystemColumnKind                  github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.SystemColumnKind        `protobuf:"varint,17,opt,name=system_column_kind,json=systemColumnKind,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.SystemColumnKind" json:"system_column_kind,omitempty"`
	Virtual                           bool                                                                            `protobuf:"varint,18,opt,name=virtual,proto3" json:"virtual,omitempty"`
}

func (m *Column) Reset()         { *m = Column{} }
func (m *Column) String() string { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()    {}
func (*Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{2}
}
func (m *Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Column.Merge(m, src)
}
func (m *Column) XXX_Size() int {
	return m.Size()
}
func (m *Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Column.DiscardUnknown(m)
}

var xxx_messageInfo_Column proto.InternalMessageInfo

type PrimaryIndex struct {
	TableID             github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID         `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	IndexID             github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID    `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.IndexID" json:"index_id,omitempty"`
	Unique              bool                                                               `protobuf:"varint,3,opt,name=unique,proto3" json:"unique,omitempty"`
	KeyColumnIDs        []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,4,rep,packed,name=key_column_ids,json=keyColumnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"key_column_ids,omitempty"`
	KeyColumnDirections []PrimaryIndex_Direction                                           `protobuf:"varint,5,rep,packed,name=key_column_direction,json=keyColumnDirection,proto3,enum=cockroach.sql.schemachanger.scpb.PrimaryIndex_Direction" json:"key_column_direction,omitempty"`
	KeySuffixColumnIDs  []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,6,rep,packed,name=key_suffix_column_ids,json=keySuffixColumnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"key_suffix_column_ids,omitempty"`
	ShardedDescriptor   *descpb.ShardedDescriptor                                          `protobuf:"bytes,7,opt,name=sharded_descriptor,json=shardedDescriptor,proto3" json:"sharded_descriptor,omitempty"`
	StoringColumnIDs    []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,8,rep,packed,name=storing_column_ids,json=storingColumnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"storing_column_ids,omitempty"`
	CompositeColumnIDs  []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,9,rep,packed,name=composite_column_ids,json=compositeColumnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"composite_column_ids,omitempty"`
	Inverted            bool                                                               `protobuf:"varint,10,opt,name=inverted,proto3" json:"inverted,omitempty"`
	Concurrently        bool                                                               `protobuf:"varint,11,opt,name=concurrently,proto3" json:"concurrently,omitempty"`
}

func (m *PrimaryIndex) Reset()         { *m = PrimaryIndex{} }
func (m *PrimaryIndex) String() string { return proto.CompactTextString(m) }
func (*PrimaryIndex) ProtoMessage()    {}
func (*PrimaryIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{3}
}
func (m *PrimaryIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimaryIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PrimaryIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimaryIndex.Merge(m, src)
}
func (m *PrimaryIndex) XXX_Size() int {
	return m.Size()
}
func (m *PrimaryIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimaryIndex.DiscardUnknown(m)
}

var xxx_messageInfo_PrimaryIndex proto.InternalMessageInfo

type SecondaryIndex struct {
	TableID             github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID         `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	IndexID             github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID    `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.IndexID" json:"index_id,omitempty"`
	Unique              bool                                                               `protobuf:"varint,3,opt,name=unique,proto3" json:"unique,omitempty"`
	KeyColumnIDs        []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,4,rep,packed,name=key_column_ids,json=keyColumnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"key_column_ids,omitempty"`
	KeyColumnDirections []SecondaryIndex_Direction                                         `protobuf:"varint,5,rep,packed,name=key_column_direction,json=keyColumnDirection,proto3,enum=cockroach.sql.schemachanger.scpb.SecondaryIndex_Direction" json:"key_column_direction,omitempty"`
	KeySuffixColumnIDs  []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,6,rep,packed,name=key_suffix_column_ids,json=keySuffixColumnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"key_suffix_column_ids,omitempty"`
	ShardedDescriptor   *descpb.ShardedDescriptor                                          `protobuf:"bytes,7,opt,name=sharded_descriptor,json=shardedDescriptor,proto3" json:"sharded_descriptor,omitempty"`
	StoringColumnIDs    []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,8,rep,packed,name=storing_column_ids,json=storingColumnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"storing_column_ids,omitempty"`
	CompositeColumnIDs  []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,9,rep,packed,name=composite_column_ids,json=compositeColumnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"composite_column_ids,omitempty"`
	Inverted            bool                                                               `protobuf:"varint,10,opt,name=inverted,proto3" json:"inverted,omitempty"`
	Concurrently        bool                                                               `protobuf:"varint,11,opt,name=concurrently,proto3" json:"concurrently,omitempty"`
}

func (m *SecondaryIndex) Reset()         { *m = SecondaryIndex{} }
func (m *SecondaryIndex) String() string { return proto.CompactTextString(m) }
func (*SecondaryIndex) ProtoMessage()    {}
func (*SecondaryIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{4}
}
func (m *SecondaryIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecondaryIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SecondaryIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecondaryIndex.Merge(m, src)
}
func (m *SecondaryIndex) XXX_Size() int {
	return m.Size()
}
func (m *SecondaryIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_SecondaryIndex.DiscardUnknown(m)
}

var xxx_messageInfo_SecondaryIndex proto.InternalMessageInfo

type SequenceDependency struct {
	TableID    github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	ColumnID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,2,opt,name=column_id,json=columnId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_id,omitempty"`
	SequenceID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"sequence_id,omitempty"`
	Type       SequenceDependency_Type                                          `protobuf:"varint,4,opt,name=type,proto3,enum=cockroach.sql.schemachanger.scpb.SequenceDependency_Type" json:"type,omitempty"`
}

func (m *SequenceDependency) Reset()         { *m = SequenceDependency{} }
func (m *SequenceDependency) String() string { return proto.CompactTextString(m) }
func (*SequenceDependency) ProtoMessage()    {}
func (*SequenceDependency) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{5}
}
func (m *SequenceDependency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SequenceDependency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SequenceDependency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequenceDependency.Merge(m, src)
}
func (m *SequenceDependency) XXX_Size() int {
	return m.Size()
}
func (m *SequenceDependency) XXX_DiscardUnknown() {
	xxx_messageInfo_SequenceDependency.DiscardUnknown(m)
}

var xxx_messageInfo_SequenceDependency proto.InternalMessageInfo

type UniqueConstraint struct {
	ConstraintType    ConstraintType                                                     `protobuf:"varint,1,opt,name=constraint_type,json=constraintType,proto3,enum=cockroach.sql.schemachanger.scpb.ConstraintType" json:"constraint_type,omitempty"`
	ConstraintOrdinal uint32                                                             `protobuf:"varint,2,opt,name=constraint_ordinal,json=constraintOrdinal,proto3" json:"constraint_ordinal,omitempty"`
	TableID           github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID         `protobuf:"varint,3,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	IndexID           github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID    `protobuf:"varint,4,opt,name=index_id,json=indexId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.IndexID" json:"index_id,omitempty"`
	ColumnIDs         []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,5,rep,packed,name=column_ids,json=columnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_ids,omitempty"`
}

func (m *UniqueConstraint) Reset()         { *m = UniqueConstraint{} }
func (m *UniqueConstraint) String() string { return proto.CompactTextString(m) }
func (*UniqueConstraint) ProtoMessage()    {}
func (*UniqueConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{6}
}
func (m *UniqueConstraint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniqueConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UniqueConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniqueConstraint.Merge(m, src)
}
func (m *UniqueConstraint) XXX_Size() int {
	return m.Size()
}
func (m *UniqueConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_UniqueConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_UniqueConstraint proto.InternalMessageInfo

type CheckConstraint struct {
	ConstraintType    ConstraintType                                                     `protobuf:"varint,1,opt,name=constraint_type,json=constraintType,proto3,enum=cockroach.sql.schemachanger.scpb.ConstraintType" json:"constraint_type,omitempty"`
	ConstraintOrdinal uint32                                                             `protobuf:"varint,2,opt,name=constraint_ordinal,json=constraintOrdinal,proto3" json:"constraint_ordinal,omitempty"`
	TableID           github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID         `protobuf:"varint,3,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	Name              string                                                             `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Expr              string                                                             `protobuf:"bytes,5,opt,name=expr,proto3" json:"expr,omitempty"`
	ColumnIDs         []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,6,rep,packed,name=column_ids,json=columnIds,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_ids,omitempty"`
	Validated         bool                                                               `protobuf:"varint,7,opt,name=validated,proto3" json:"validated,omitempty"`
}

func (m *CheckConstraint) Reset()         { *m = CheckConstraint{} }
func (m *CheckConstraint) String() string { return proto.CompactTextString(m) }
func (*CheckConstraint) ProtoMessage()    {}
func (*CheckConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{7}
}
func (m *CheckConstraint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CheckConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckConstraint.Merge(m, src)
}
func (m *CheckConstraint) XXX_Size() int {
	return m.Size()
}
func (m *CheckConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_CheckConstraint proto.InternalMessageInfo

type Sequence struct {
	SequenceID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"sequence_id,omitempty"`
}

func (m *Sequence) Reset()         { *m = Sequence{} }
func (m *Sequence) String() string { return proto.CompactTextString(m) }
func (*Sequence) ProtoMessage()    {}
func (*Sequence) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{8}
}
func (m *Sequence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sequence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Sequence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sequence.Merge(m, src)
}
func (m *Sequence) XXX_Size() int {
	return m.Size()
}
func (m *Sequence) XXX_DiscardUnknown() {
	xxx_messageInfo_Sequence.DiscardUnknown(m)
}

var xxx_messageInfo_Sequence proto.InternalMessageInfo

type DefaultExpression struct {
	TableID         github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	ColumnID        github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,2,opt,name=column_id,json=columnId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_id,omitempty"`
	UsesSequenceIDs []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID     `protobuf:"varint,3,rep,packed,name=usesSequenceIDs,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"usesSequenceIDs,omitempty"`
	DefaultExpr     string                                                           `protobuf:"bytes,4,opt,name=default_expr,json=defaultExpr,proto3" json:"default_expr,omitempty"`
}

func (m *DefaultExpression) Reset()         { *m = DefaultExpression{} }
func (m *DefaultExpression) String() string { return proto.CompactTextString(m) }
func (*DefaultExpression) ProtoMessage()    {}
func (*DefaultExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{9}
}
func (m *DefaultExpression) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DefaultExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultExpression.Merge(m, src)
}
func (m *DefaultExpression) XXX_Size() int {
	return m.Size()
}
func (m *DefaultExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultExpression.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultExpression proto.InternalMessageInfo

type View struct {
	TableID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
}

func (m *View) Reset()         { *m = View{} }
func (m *View) String() string { return proto.CompactTextString(m) }
func (*View) ProtoMessage()    {}
func (*View) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{10}
}
func (m *View) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *View) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *View) XXX_Merge(src proto.Message) {
	xxx_messageInfo_View.Merge(m, src)
}
func (m *View) XXX_Size() int {
	return m.Size()
}
func (m *View) XXX_DiscardUnknown() {
	xxx_messageInfo_View.DiscardUnknown(m)
}

var xxx_messageInfo_View proto.InternalMessageInfo

type Table struct {
	TableID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
}

func (m *Table) Reset()         { *m = Table{} }
func (m *Table) String() string { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()    {}
func (*Table) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{11}
}
func (m *Table) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Table) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Table) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Table.Merge(m, src)
}
func (m *Table) XXX_Size() int {
	return m.Size()
}
func (m *Table) XXX_DiscardUnknown() {
	xxx_messageInfo_Table.DiscardUnknown(m)
}

var xxx_messageInfo_Table proto.InternalMessageInfo

type OnUpdateExprTypeReference struct {
	TableID  github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	ColumnID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,2,opt,name=column_id,json=columnId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_id,omitempty"`
	TypeID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,3,opt,name=type_id,json=typeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"type_id,omitempty"`
}

func (m *OnUpdateExprTypeReference) Reset()         { *m = OnUpdateExprTypeReference{} }
func (m *OnUpdateExprTypeReference) String() string { return proto.CompactTextString(m) }
func (*OnUpdateExprTypeReference) ProtoMessage()    {}
func (*OnUpdateExprTypeReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{12}
}
func (m *OnUpdateExprTypeReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnUpdateExprTypeReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OnUpdateExprTypeReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnUpdateExprTypeReference.Merge(m, src)
}
func (m *OnUpdateExprTypeReference) XXX_Size() int {
	return m.Size()
}
func (m *OnUpdateExprTypeReference) XXX_DiscardUnknown() {
	xxx_messageInfo_OnUpdateExprTypeReference.DiscardUnknown(m)
}

var xxx_messageInfo_OnUpdateExprTypeReference proto.InternalMessageInfo

type ComputedExprTypeReference struct {
	TableID  github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	ColumnID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,2,opt,name=column_id,json=columnId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_id,omitempty"`
	TypeID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,3,opt,name=type_id,json=typeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"type_id,omitempty"`
}

func (m *ComputedExprTypeReference) Reset()         { *m = ComputedExprTypeReference{} }
func (m *ComputedExprTypeReference) String() string { return proto.CompactTextString(m) }
func (*ComputedExprTypeReference) ProtoMessage()    {}
func (*ComputedExprTypeReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{13}
}
func (m *ComputedExprTypeReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputedExprTypeReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ComputedExprTypeReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputedExprTypeReference.Merge(m, src)
}
func (m *ComputedExprTypeReference) XXX_Size() int {
	return m.Size()
}
func (m *ComputedExprTypeReference) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputedExprTypeReference.DiscardUnknown(m)
}

var xxx_messageInfo_ComputedExprTypeReference proto.InternalMessageInfo

type DefaultExprTypeReference struct {
	TableID  github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	ColumnID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,2,opt,name=column_id,json=columnId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_id,omitempty"`
	TypeID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,3,opt,name=type_id,json=typeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"type_id,omitempty"`
}

func (m *DefaultExprTypeReference) Reset()         { *m = DefaultExprTypeReference{} }
func (m *DefaultExprTypeReference) String() string { return proto.CompactTextString(m) }
func (*DefaultExprTypeReference) ProtoMessage()    {}
func (*DefaultExprTypeReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{14}
}
func (m *DefaultExprTypeReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultExprTypeReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DefaultExprTypeReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultExprTypeReference.Merge(m, src)
}
func (m *DefaultExprTypeReference) XXX_Size() int {
	return m.Size()
}
func (m *DefaultExprTypeReference) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultExprTypeReference.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultExprTypeReference proto.InternalMessageInfo

type ColumnTypeReference struct {
	TableID  github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	ColumnID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,2,opt,name=column_id,json=columnId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_id,omitempty"`
	TypeID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,3,opt,name=type_id,json=typeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"type_id,omitempty"`
}

func (m *ColumnTypeReference) Reset()         { *m = ColumnTypeReference{} }
func (m *ColumnTypeReference) String() string { return proto.CompactTextString(m) }
func (*ColumnTypeReference) ProtoMessage()    {}
func (*ColumnTypeReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{15}
}
func (m *ColumnTypeReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnTypeReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ColumnTypeReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnTypeReference.Merge(m, src)
}
func (m *ColumnTypeReference) XXX_Size() int {
	return m.Size()
}
func (m *ColumnTypeReference) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnTypeReference.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnTypeReference proto.InternalMessageInfo

type CheckConstraintTypeReference struct {
	TableID           github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	ConstraintOrdinal uint32                                                     `protobuf:"varint,2,opt,name=constraint_ordinal,json=constraintOrdinal,proto3" json:"constraint_ordinal,omitempty"`
	TypeID            github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,3,opt,name=type_id,json=typeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"type_id,omitempty"`
}

func (m *CheckConstraintTypeReference) Reset()         { *m = CheckConstraintTypeReference{} }
func (m *CheckConstraintTypeReference) String() string { return proto.CompactTextString(m) }
func (*CheckConstraintTypeReference) ProtoMessage()    {}
func (*CheckConstraintTypeReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{16}
}
func (m *CheckConstraintTypeReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckConstraintTypeReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CheckConstraintTypeReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckConstraintTypeReference.Merge(m, src)
}
func (m *CheckConstraintTypeReference) XXX_Size() int {
	return m.Size()
}
func (m *CheckConstraintTypeReference) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckConstraintTypeReference.DiscardUnknown(m)
}

var xxx_messageInfo_CheckConstraintTypeReference proto.InternalMessageInfo

type ViewDependsOnType struct {
	TableID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	TypeID  github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,3,opt,name=type_id,json=typeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"type_id,omitempty"`
}

func (m *ViewDependsOnType) Reset()         { *m = ViewDependsOnType{} }
func (m *ViewDependsOnType) String() string { return proto.CompactTextString(m) }
func (*ViewDependsOnType) ProtoMessage()    {}
func (*ViewDependsOnType) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{17}
}
func (m *ViewDependsOnType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewDependsOnType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ViewDependsOnType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewDependsOnType.Merge(m, src)
}
func (m *ViewDependsOnType) XXX_Size() int {
	return m.Size()
}
func (m *ViewDependsOnType) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewDependsOnType.DiscardUnknown(m)
}

var xxx_messageInfo_ViewDependsOnType proto.InternalMessageInfo

type ForeignKey struct {
	OriginID         github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID                         `protobuf:"varint,1,opt,name=origin_id,json=originId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"origin_id,omitempty"`
	OriginColumns    []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID                 `protobuf:"varint,3,rep,packed,name=origin_columns,json=originColumns,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"origin_columns,omitempty"`
	ReferenceID      github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID                         `protobuf:"varint,4,opt,name=reference_id,json=referenceId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"reference_id,omitempty"`
	ReferenceColumns []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID                 `protobuf:"varint,5,rep,packed,name=reference_columns,json=referenceColumns,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"reference_columns,omitempty"`
	OnUpdate         github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ForeignKeyReference_Action `protobuf:"varint,6,opt,name=on_update,json=onUpdate,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ForeignKeyReference_Action" json:"on_update,omitempty"`
	OnDelete         github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ForeignKeyReference_Action `protobuf:"varint,7,opt,name=on_delete,json=onDelete,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ForeignKeyReference_Action" json:"on_delete,omitempty"`
	Name             string                                                                             `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ForeignKey) Reset()         { *m = ForeignKey{} }
func (m *ForeignKey) String() string { return proto.CompactTextString(m) }
func (*ForeignKey) ProtoMessage()    {}
func (*ForeignKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{18}
}
func (m *ForeignKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForeignKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ForeignKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForeignKey.Merge(m, src)
}
func (m *ForeignKey) XXX_Size() int {
	return m.Size()
}
func (m *ForeignKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ForeignKey.DiscardUnknown(m)
}

var xxx_messageInfo_ForeignKey proto.InternalMessageInfo

type ForeignKeyBackReference struct {
	OriginID         github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID                         `protobuf:"varint,1,opt,name=origin_id,json=originId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"origin_id,omitempty"`
	OriginColumns    []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID                 `protobuf:"varint,3,rep,packed,name=origin_columns,json=originColumns,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"origin_columns,omitempty"`
	ReferenceID      github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID                         `protobuf:"varint,4,opt,name=reference_id,json=referenceId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"reference_id,omitempty"`
	ReferenceColumns []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID                 `protobuf:"varint,5,rep,packed,name=reference_columns,json=referenceColumns,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"reference_columns,omitempty"`
	OnUpdate         github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ForeignKeyReference_Action `protobuf:"varint,6,opt,name=on_update,json=onUpdate,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ForeignKeyReference_Action" json:"on_update,omitempty"`
	OnDelete         github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ForeignKeyReference_Action `protobuf:"varint,7,opt,name=on_delete,json=onDelete,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ForeignKeyReference_Action" json:"on_delete,omitempty"`
	Name             string                                                                             `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ForeignKeyBackReference) Reset()         { *m = ForeignKeyBackReference{} }
func (m *ForeignKeyBackReference) String() string { return proto.CompactTextString(m) }
func (*ForeignKeyBackReference) ProtoMessage()    {}
func (*ForeignKeyBackReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{19}
}
func (m *ForeignKeyBackReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForeignKeyBackReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ForeignKeyBackReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForeignKeyBackReference.Merge(m, src)
}
func (m *ForeignKeyBackReference) XXX_Size() int {
	return m.Size()
}
func (m *ForeignKeyBackReference) XXX_DiscardUnknown() {
	xxx_messageInfo_ForeignKeyBackReference.DiscardUnknown(m)
}

var xxx_messageInfo_ForeignKeyBackReference proto.InternalMessageInfo

type SequenceOwnedBy struct {
	SequenceID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"sequence_id,omitempty"`
	OwnerTableID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,2,opt,name=owner_table_id,json=ownerTableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"owner_table_id,omitempty"`
}

func (m *SequenceOwnedBy) Reset()         { *m = SequenceOwnedBy{} }
func (m *SequenceOwnedBy) String() string { return proto.CompactTextString(m) }
func (*SequenceOwnedBy) ProtoMessage()    {}
func (*SequenceOwnedBy) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{20}
}
func (m *SequenceOwnedBy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SequenceOwnedBy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SequenceOwnedBy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequenceOwnedBy.Merge(m, src)
}
func (m *SequenceOwnedBy) XXX_Size() int {
	return m.Size()
}
func (m *SequenceOwnedBy) XXX_DiscardUnknown() {
	xxx_messageInfo_SequenceOwnedBy.DiscardUnknown(m)
}

var xxx_messageInfo_SequenceOwnedBy proto.InternalMessageInfo

type RelationDependedOnBy struct {
	TableID      github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	DependedOnBy github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,2,opt,name=dependedOn,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"dependedOn,omitempty"`
	ColumnID     github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,3,opt,name=columnID,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"columnID,omitempty"`
}

func (m *RelationDependedOnBy) Reset()         { *m = RelationDependedOnBy{} }
func (m *RelationDependedOnBy) String() string { return proto.CompactTextString(m) }
func (*RelationDependedOnBy) ProtoMessage()    {}
func (*RelationDependedOnBy) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{21}
}
func (m *RelationDependedOnBy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationDependedOnBy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RelationDependedOnBy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationDependedOnBy.Merge(m, src)
}
func (m *RelationDependedOnBy) XXX_Size() int {
	return m.Size()
}
func (m *RelationDependedOnBy) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationDependedOnBy.DiscardUnknown(m)
}

var xxx_messageInfo_RelationDependedOnBy proto.InternalMessageInfo

type Type struct {
	TypeID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=type_id,json=typeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"type_id,omitempty"`
}

func (m *Type) Reset()         { *m = Type{} }
func (m *Type) String() string { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()    {}
func (*Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{22}
}
func (m *Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Type.Merge(m, src)
}
func (m *Type) XXX_Size() int {
	return m.Size()
}
func (m *Type) XXX_DiscardUnknown() {
	xxx_messageInfo_Type.DiscardUnknown(m)
}

var xxx_messageInfo_Type proto.InternalMessageInfo

type Schema struct {
	SchemaID         github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID   `protobuf:"varint,1,opt,name=schema_id,json=schemaId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"schema_id,omitempty"`
	DependentObjects []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,3,rep,packed,name=dependentObjects,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"dependentObjects,omitempty"`
}

func (m *Schema) Reset()         { *m = Schema{} }
func (m *Schema) String() string { return proto.CompactTextString(m) }
func (*Schema) ProtoMessage()    {}
func (*Schema) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{23}
}
func (m *Schema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Schema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Schema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schema.Merge(m, src)
}
func (m *Schema) XXX_Size() int {
	return m.Size()
}
func (m *Schema) XXX_DiscardUnknown() {
	xxx_messageInfo_Schema.DiscardUnknown(m)
}

var xxx_messageInfo_Schema proto.InternalMessageInfo

type Database struct {
	DatabaseID       github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID   `protobuf:"varint,1,opt,name=database_id,json=databaseId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"database_id,omitempty"`
	DependentObjects []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,3,rep,packed,name=dependentObjects,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"dependentObjects,omitempty"`
}

func (m *Database) Reset()         { *m = Database{} }
func (m *Database) String() string { return proto.CompactTextString(m) }
func (*Database) ProtoMessage()    {}
func (*Database) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{24}
}
func (m *Database) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Database) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Database) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Database.Merge(m, src)
}
func (m *Database) XXX_Size() int {
	return m.Size()
}
func (m *Database) XXX_DiscardUnknown() {
	xxx_messageInfo_Database.DiscardUnknown(m)
}

var xxx_messageInfo_Database proto.InternalMessageInfo

type Authorization struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	AppName  string `protobuf:"bytes,2,opt,name=appName,proto3" json:"appName,omitempty"`
}

func (m *Authorization) Reset()         { *m = Authorization{} }
func (m *Authorization) String() string { return proto.CompactTextString(m) }
func (*Authorization) ProtoMessage()    {}
func (*Authorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{25}
}
func (m *Authorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Authorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Authorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Authorization.Merge(m, src)
}
func (m *Authorization) XXX_Size() int {
	return m.Size()
}
func (m *Authorization) XXX_DiscardUnknown() {
	xxx_messageInfo_Authorization.DiscardUnknown(m)
}

var xxx_messageInfo_Authorization proto.InternalMessageInfo

// Contains SQL statements for which a schema change is being executed.
type Statement struct {
	Statement         string `protobuf:"bytes,1,opt,name=statement,proto3" json:"statement,omitempty"`
	RedactedStatement string `protobuf:"bytes,2,opt,name=redactedStatement,proto3" json:"redactedStatement,omitempty"`
	StatementTag      string `protobuf:"bytes,3,opt,name=statement_tag,json=statementTag,proto3" json:"statement_tag,omitempty"`
}

func (m *Statement) Reset()         { *m = Statement{} }
func (m *Statement) String() string { return proto.CompactTextString(m) }
func (*Statement) ProtoMessage()    {}
func (*Statement) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{26}
}
func (m *Statement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Statement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Statement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Statement.Merge(m, src)
}
func (m *Statement) XXX_Size() int {
	return m.Size()
}
func (m *Statement) XXX_DiscardUnknown() {
	xxx_messageInfo_Statement.DiscardUnknown(m)
}

var xxx_messageInfo_Statement proto.InternalMessageInfo

// TargetMetaData refers to the metadata for individual elements, where
// some fields like statement_id are indexes into the the full declarative
// schema changer State.
type TargetMetadata struct {
	// SubWorkID identifies the individual portions of a statement that this
	// target belongs too. For example, if multiple objects such as tables or
	// schemas are dropped in a single statement (i.e. such as DROP TABLE A, B)
	//  then this counter will increment  for each of those objects.
	SubWorkID uint32 `protobuf:"varint,1,opt,name=sub_work_id,json=subWorkId,proto3" json:"sub_work_id,omitempty"`
	// SourceElementID identifies the parent element responsible for generating
	// an element, which will be used to track cascaded drops. For example
	// if database is being dropped, then any schemas that are dropped will have
	// this reference ID. Note: These ID's do not correspond to descriptor ID's
	// and are incremented as new elements are added into the State.
	SourceElementID SourceElementID `protobuf:"varint,2,opt,name=source_element_id,json=sourceElementId,proto3,casttype=SourceElementID" json:"source_element_id,omitempty"`
	// StatementID refers to the statement that produced this element, where
	// the ID indexes into the State structure.
	StatementID uint32 `protobuf:"varint,3,opt,name=statement_id,json=statementId,proto3" json:"statement_id,omitempty"`
}

func (m *TargetMetadata) Reset()         { *m = TargetMetadata{} }
func (m *TargetMetadata) String() string { return proto.CompactTextString(m) }
func (*TargetMetadata) ProtoMessage()    {}
func (*TargetMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{27}
}
func (m *TargetMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TargetMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TargetMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetMetadata.Merge(m, src)
}
func (m *TargetMetadata) XXX_Size() int {
	return m.Size()
}
func (m *TargetMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TargetMetadata proto.InternalMessageInfo

type ListPartition struct {
	Name string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Expr []string `protobuf:"bytes,2,rep,name=expr,proto3" json:"expr,omitempty"`
}

func (m *ListPartition) Reset()         { *m = ListPartition{} }
func (m *ListPartition) String() string { return proto.CompactTextString(m) }
func (*ListPartition) ProtoMessage()    {}
func (*ListPartition) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{28}
}
func (m *ListPartition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPartition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ListPartition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPartition.Merge(m, src)
}
func (m *ListPartition) XXX_Size() int {
	return m.Size()
}
func (m *ListPartition) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPartition.DiscardUnknown(m)
}

var xxx_messageInfo_ListPartition proto.InternalMessageInfo

type RangePartitions struct {
	Name string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=To,proto3" json:"To,omitempty"`
	From []string `protobuf:"bytes,3,rep,name=From,proto3" json:"From,omitempty"`
}

func (m *RangePartitions) Reset()         { *m = RangePartitions{} }
func (m *RangePartitions) String() string { return proto.CompactTextString(m) }
func (*RangePartitions) ProtoMessage()    {}
func (*RangePartitions) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{29}
}
func (m *RangePartitions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangePartitions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RangePartitions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangePartitions.Merge(m, src)
}
func (m *RangePartitions) XXX_Size() int {
	return m.Size()
}
func (m *RangePartitions) XXX_DiscardUnknown() {
	xxx_messageInfo_RangePartitions.DiscardUnknown(m)
}

var xxx_messageInfo_RangePartitions proto.InternalMessageInfo

type Partitioning struct {
	TableID         github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID      `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	IndexID         github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.IndexID" json:"index_id,omitempty"`
	Fields          []string                                                        `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	ListPartitions  []*ListPartition                                                `protobuf:"bytes,4,rep,name=list_partitions,json=listPartitions,proto3" json:"list_partitions,omitempty"`
	RangePartitions []*RangePartitions                                              `protobuf:"bytes,5,rep,name=range_partitions,json=rangePartitions,proto3" json:"range_partitions,omitempty"`
}

func (m *Partitioning) Reset()         { *m = Partitioning{} }
func (m *Partitioning) String() string { return proto.CompactTextString(m) }
func (*Partitioning) ProtoMessage()    {}
func (*Partitioning) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{30}
}
func (m *Partitioning) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Partitioning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Partitioning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Partitioning.Merge(m, src)
}
func (m *Partitioning) XXX_Size() int {
	return m.Size()
}
func (m *Partitioning) XXX_DiscardUnknown() {
	xxx_messageInfo_Partitioning.DiscardUnknown(m)
}

var xxx_messageInfo_Partitioning proto.InternalMessageInfo

type Namespace struct {
	DatabaseID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=database_id,json=databaseId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"database_id,omitempty"`
	SchemaID     github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,2,opt,name=schema_id,json=schemaId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"schema_id,omitempty"`
	DescriptorID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,3,opt,name=descriptor_id,json=descriptorId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"descriptor_id,omitempty"`
	Name         string                                                     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Namespace) Reset()         { *m = Namespace{} }
func (m *Namespace) String() string { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()    {}
func (*Namespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{31}
}
func (m *Namespace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Namespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Namespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Namespace.Merge(m, src)
}
func (m *Namespace) XXX_Size() int {
	return m.Size()
}
func (m *Namespace) XXX_DiscardUnknown() {
	xxx_messageInfo_Namespace.DiscardUnknown(m)
}

var xxx_messageInfo_Namespace proto.InternalMessageInfo

type Owner struct {
	DescriptorID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=descriptor_id,json=descriptorId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"descriptor_id,omitempty"`
	Owner        string                                                     `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *Owner) Reset()         { *m = Owner{} }
func (m *Owner) String() string { return proto.CompactTextString(m) }
func (*Owner) ProtoMessage()    {}
func (*Owner) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{32}
}
func (m *Owner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Owner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Owner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Owner.Merge(m, src)
}
func (m *Owner) XXX_Size() int {
	return m.Size()
}
func (m *Owner) XXX_DiscardUnknown() {
	xxx_messageInfo_Owner.DiscardUnknown(m)
}

var xxx_messageInfo_Owner proto.InternalMessageInfo

type UserPrivileges struct {
	DescriptorID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=descriptor_id,json=descriptorId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"descriptor_id,omitempty"`
	Username     string                                                     `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Privileges   uint32                                                     `protobuf:"varint,3,opt,name=privileges,proto3" json:"privileges,omitempty"`
}

func (m *UserPrivileges) Reset()         { *m = UserPrivileges{} }
func (m *UserPrivileges) String() string { return proto.CompactTextString(m) }
func (*UserPrivileges) ProtoMessage()    {}
func (*UserPrivileges) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{33}
}
func (m *UserPrivileges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPrivileges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UserPrivileges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPrivileges.Merge(m, src)
}
func (m *UserPrivileges) XXX_Size() int {
	return m.Size()
}
func (m *UserPrivileges) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPrivileges.DiscardUnknown(m)
}

var xxx_messageInfo_UserPrivileges proto.InternalMessageInfo

type Locality struct {
	DescriptorID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID                              `protobuf:"varint,1,opt,name=descriptor_id,json=descriptorId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"descriptor_id,omitempty"`
	Locality     *github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.TableDescriptor_LocalityConfig `protobuf:"bytes,2,opt,name=Locality,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.TableDescriptor_LocalityConfig" json:"Locality,omitempty"`
}

func (m *Locality) Reset()         { *m = Locality{} }
func (m *Locality) String() string { return proto.CompactTextString(m) }
func (*Locality) ProtoMessage()    {}
func (*Locality) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{34}
}
func (m *Locality) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Locality) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Locality) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Locality.Merge(m, src)
}
func (m *Locality) XXX_Size() int {
	return m.Size()
}
func (m *Locality) XXX_DiscardUnknown() {
	xxx_messageInfo_Locality.DiscardUnknown(m)
}

var xxx_messageInfo_Locality proto.InternalMessageInfo

type ColumnName struct {
	TableID  github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID       `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	ColumnID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID `protobuf:"varint,2,opt,name=column_id,json=columnId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ColumnID" json:"column_id,omitempty"`
	Name     string                                                           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ColumnName) Reset()         { *m = ColumnName{} }
func (m *ColumnName) String() string { return proto.CompactTextString(m) }
func (*ColumnName) ProtoMessage()    {}
func (*ColumnName) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{35}
}
func (m *ColumnName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ColumnName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnName.Merge(m, src)
}
func (m *ColumnName) XXX_Size() int {
	return m.Size()
}
func (m *ColumnName) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnName.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnName proto.InternalMessageInfo

type IndexName struct {
	TableID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID      `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	IndexID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.IndexID" json:"index_id,omitempty"`
	Name    string                                                          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *IndexName) Reset()         { *m = IndexName{} }
func (m *IndexName) String() string { return proto.CompactTextString(m) }
func (*IndexName) ProtoMessage()    {}
func (*IndexName) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{36}
}
func (m *IndexName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IndexName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexName.Merge(m, src)
}
func (m *IndexName) XXX_Size() int {
	return m.Size()
}
func (m *IndexName) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexName.DiscardUnknown(m)
}

var xxx_messageInfo_IndexName proto.InternalMessageInfo

type ConstraintName struct {
	TableID           github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	ConstraintType    ConstraintType                                             `protobuf:"varint,2,opt,name=constraint_type,json=constraintType,proto3,enum=cockroach.sql.schemachanger.scpb.ConstraintType" json:"constraint_type,omitempty"`
	ConstraintOrdinal uint32                                                     `protobuf:"varint,3,opt,name=constraint_ordinal,json=constraintOrdinal,proto3" json:"constraint_ordinal,omitempty"`
	Name              string                                                     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ConstraintName) Reset()         { *m = ConstraintName{} }
func (m *ConstraintName) String() string { return proto.CompactTextString(m) }
func (*ConstraintName) ProtoMessage()    {}
func (*ConstraintName) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{37}
}
func (m *ConstraintName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConstraintName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConstraintName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConstraintName.Merge(m, src)
}
func (m *ConstraintName) XXX_Size() int {
	return m.Size()
}
func (m *ConstraintName) XXX_DiscardUnknown() {
	xxx_messageInfo_ConstraintName.DiscardUnknown(m)
}

var xxx_messageInfo_ConstraintName proto.InternalMessageInfo

type DefaultPrivilege struct {
	DescriptorID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=descriptor_id,json=descriptorId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"descriptor_id,omitempty"`
	// Types that are valid to be assigned to Role:
	//	*DefaultPrivilege_ExplicitRole
	//	*DefaultPrivilege_ForAllRoles
	Role                isDefaultPrivilege_Role                             `protobuf_oneof:"role"`
	PrivilegesPerObject map[uint32]*DefaultPrivilege_DefaultObjectPrivilege `protobuf:"bytes,4,rep,name=privileges_per_object,json=privilegesPerObject,proto3" json:"privileges_per_object,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DefaultPrivilege) Reset()         { *m = DefaultPrivilege{} }
func (m *DefaultPrivilege) String() string { return proto.CompactTextString(m) }
func (*DefaultPrivilege) ProtoMessage()    {}
func (*DefaultPrivilege) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{38}
}
func (m *DefaultPrivilege) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultPrivilege) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DefaultPrivilege) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultPrivilege.Merge(m, src)
}
func (m *DefaultPrivilege) XXX_Size() int {
	return m.Size()
}
func (m *DefaultPrivilege) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultPrivilege.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultPrivilege proto.InternalMessageInfo

type isDefaultPrivilege_Role interface {
	isDefaultPrivilege_Role()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DefaultPrivilege_ExplicitRole struct {
	ExplicitRole *descpb.DefaultPrivilegesForRole_ExplicitRole `protobuf:"bytes,2,opt,name=explicit_role,json=explicitRole,proto3,oneof" json:"explicit_role,omitempty"`
}
type DefaultPrivilege_ForAllRoles struct {
	ForAllRoles *descpb.DefaultPrivilegesForRole_ForAllRolesPseudoRole `protobuf:"bytes,3,opt,name=for_all_roles,json=forAllRoles,proto3,oneof" json:"for_all_roles,omitempty"`
}

func (*DefaultPrivilege_ExplicitRole) isDefaultPrivilege_Role() {}
func (*DefaultPrivilege_ForAllRoles) isDefaultPrivilege_Role()  {}

func (m *DefaultPrivilege) GetRole() isDefaultPrivilege_Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *DefaultPrivilege) GetExplicitRole() *descpb.DefaultPrivilegesForRole_ExplicitRole {
	if x, ok := m.GetRole().(*DefaultPrivilege_ExplicitRole); ok {
		return x.ExplicitRole
	}
	return nil
}

func (m *DefaultPrivilege) GetForAllRoles() *descpb.DefaultPrivilegesForRole_ForAllRolesPseudoRole {
	if x, ok := m.GetRole().(*DefaultPrivilege_ForAllRoles); ok {
		return x.ForAllRoles
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DefaultPrivilege) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DefaultPrivilege_ExplicitRole)(nil),
		(*DefaultPrivilege_ForAllRoles)(nil),
	}
}

type DefaultPrivilege_DefaultObjectPrivilege struct {
	Privileges []*UserPrivileges `protobuf:"bytes,1,rep,name=privileges,proto3" json:"privileges,omitempty"`
}

func (m *DefaultPrivilege_DefaultObjectPrivilege) Reset() {
	*m = DefaultPrivilege_DefaultObjectPrivilege{}
}
func (m *DefaultPrivilege_DefaultObjectPrivilege) String() string { return proto.CompactTextString(m) }
func (*DefaultPrivilege_DefaultObjectPrivilege) ProtoMessage()    {}
func (*DefaultPrivilege_DefaultObjectPrivilege) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{38, 0}
}
func (m *DefaultPrivilege_DefaultObjectPrivilege) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultPrivilege_DefaultObjectPrivilege) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DefaultPrivilege_DefaultObjectPrivilege) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultPrivilege_DefaultObjectPrivilege.Merge(m, src)
}
func (m *DefaultPrivilege_DefaultObjectPrivilege) XXX_Size() int {
	return m.Size()
}
func (m *DefaultPrivilege_DefaultObjectPrivilege) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultPrivilege_DefaultObjectPrivilege.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultPrivilege_DefaultObjectPrivilege proto.InternalMessageInfo

type DatabaseSchemaEntry struct {
	DatabaseID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=database_id,json=databaseId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"database_id,omitempty"`
	SchemaID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,2,opt,name=schema_id,json=schemaId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"schema_id,omitempty"`
}

func (m *DatabaseSchemaEntry) Reset()         { *m = DatabaseSchemaEntry{} }
func (m *DatabaseSchemaEntry) String() string { return proto.CompactTextString(m) }
func (*DatabaseSchemaEntry) ProtoMessage()    {}
func (*DatabaseSchemaEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_5413c88842564e28, []int{39}
}
func (m *DatabaseSchemaEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatabaseSchemaEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DatabaseSchemaEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseSchemaEntry.Merge(m, src)
}
func (m *DatabaseSchemaEntry) XXX_Size() int {
	return m.Size()
}
func (m *DatabaseSchemaEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseSchemaEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseSchemaEntry proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.sql.schemachanger.scpb.Status", Status_name, Status_value)
	proto.RegisterEnum("cockroach.sql.schemachanger.scpb.ConstraintType", ConstraintType_name, ConstraintType_value)
	proto.RegisterEnum("cockroach.sql.schemachanger.scpb.Target_Direction", Target_Direction_name, Target_Direction_value)
	proto.RegisterEnum("cockroach.sql.schemachanger.scpb.PrimaryIndex_Direction", PrimaryIndex_Direction_name, PrimaryIndex_Direction_value)
	proto.RegisterEnum("cockroach.sql.schemachanger.scpb.SecondaryIndex_Direction", SecondaryIndex_Direction_name, SecondaryIndex_Direction_value)
	proto.RegisterEnum("cockroach.sql.schemachanger.scpb.SequenceDependency_Type", SequenceDependency_Type_name, SequenceDependency_Type_value)
	proto.RegisterType((*ElementProto)(nil), "cockroach.sql.schemachanger.scpb.ElementProto")
	proto.RegisterType((*Target)(nil), "cockroach.sql.schemachanger.scpb.Target")
	proto.RegisterType((*Column)(nil), "cockroach.sql.schemachanger.scpb.Column")
	proto.RegisterType((*PrimaryIndex)(nil), "cockroach.sql.schemachanger.scpb.PrimaryIndex")
	proto.RegisterType((*SecondaryIndex)(nil), "cockroach.sql.schemachanger.scpb.SecondaryIndex")
	proto.RegisterType((*SequenceDependency)(nil), "cockroach.sql.schemachanger.scpb.SequenceDependency")
	proto.RegisterType((*UniqueConstraint)(nil), "cockroach.sql.schemachanger.scpb.UniqueConstraint")
	proto.RegisterType((*CheckConstraint)(nil), "cockroach.sql.schemachanger.scpb.CheckConstraint")
	proto.RegisterType((*Sequence)(nil), "cockroach.sql.schemachanger.scpb.Sequence")
	proto.RegisterType((*DefaultExpression)(nil), "cockroach.sql.schemachanger.scpb.DefaultExpression")
	proto.RegisterType((*View)(nil), "cockroach.sql.schemachanger.scpb.View")
	proto.RegisterType((*Table)(nil), "cockroach.sql.schemachanger.scpb.Table")
	proto.RegisterType((*OnUpdateExprTypeReference)(nil), "cockroach.sql.schemachanger.scpb.OnUpdateExprTypeReference")
	proto.RegisterType((*ComputedExprTypeReference)(nil), "cockroach.sql.schemachanger.scpb.ComputedExprTypeReference")
	proto.RegisterType((*DefaultExprTypeReference)(nil), "cockroach.sql.schemachanger.scpb.DefaultExprTypeReference")
	proto.RegisterType((*ColumnTypeReference)(nil), "cockroach.sql.schemachanger.scpb.ColumnTypeReference")
	proto.RegisterType((*CheckConstraintTypeReference)(nil), "cockroach.sql.schemachanger.scpb.CheckConstraintTypeReference")
	proto.RegisterType((*ViewDependsOnType)(nil), "cockroach.sql.schemachanger.scpb.ViewDependsOnType")
	proto.RegisterType((*ForeignKey)(nil), "cockroach.sql.schemachanger.scpb.ForeignKey")
	proto.RegisterType((*ForeignKeyBackReference)(nil), "cockroach.sql.schemachanger.scpb.ForeignKeyBackReference")
	proto.RegisterType((*SequenceOwnedBy)(nil), "cockroach.sql.schemachanger.scpb.SequenceOwnedBy")
	proto.RegisterType((*RelationDependedOnBy)(nil), "cockroach.sql.schemachanger.scpb.RelationDependedOnBy")
	proto.RegisterType((*Type)(nil), "cockroach.sql.schemachanger.scpb.Type")
	proto.RegisterType((*Schema)(nil), "cockroach.sql.schemachanger.scpb.Schema")
	proto.RegisterType((*Database)(nil), "cockroach.sql.schemachanger.scpb.Database")
	proto.RegisterType((*Authorization)(nil), "cockroach.sql.schemachanger.scpb.Authorization")
	proto.RegisterType((*Statement)(nil), "cockroach.sql.schemachanger.scpb.Statement")
	proto.RegisterType((*TargetMetadata)(nil), "cockroach.sql.schemachanger.scpb.TargetMetadata")
	proto.RegisterType((*ListPartition)(nil), "cockroach.sql.schemachanger.scpb.ListPartition")
	proto.RegisterType((*RangePartitions)(nil), "cockroach.sql.schemachanger.scpb.RangePartitions")
	proto.RegisterType((*Partitioning)(nil), "cockroach.sql.schemachanger.scpb.Partitioning")
	proto.RegisterType((*Namespace)(nil), "cockroach.sql.schemachanger.scpb.Namespace")
	proto.RegisterType((*Owner)(nil), "cockroach.sql.schemachanger.scpb.Owner")
	proto.RegisterType((*UserPrivileges)(nil), "cockroach.sql.schemachanger.scpb.UserPrivileges")
	proto.RegisterType((*Locality)(nil), "cockroach.sql.schemachanger.scpb.Locality")
	proto.RegisterType((*ColumnName)(nil), "cockroach.sql.schemachanger.scpb.ColumnName")
	proto.RegisterType((*IndexName)(nil), "cockroach.sql.schemachanger.scpb.IndexName")
	proto.RegisterType((*ConstraintName)(nil), "cockroach.sql.schemachanger.scpb.ConstraintName")
	proto.RegisterType((*DefaultPrivilege)(nil), "cockroach.sql.schemachanger.scpb.DefaultPrivilege")
	proto.RegisterMapType((map[uint32]*DefaultPrivilege_DefaultObjectPrivilege)(nil), "cockroach.sql.schemachanger.scpb.DefaultPrivilege.PrivilegesPerObjectEntry")
	proto.RegisterType((*DefaultPrivilege_DefaultObjectPrivilege)(nil), "cockroach.sql.schemachanger.scpb.DefaultPrivilege.DefaultObjectPrivilege")
	proto.RegisterType((*DatabaseSchemaEntry)(nil), "cockroach.sql.schemachanger.scpb.DatabaseSchemaEntry")
}

func init() { proto.RegisterFile("sql/schemachanger/scpb/scpb.proto", fileDescriptor_5413c88842564e28) }

var fileDescriptor_5413c88842564e28 = []byte{
	// 3691 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0xdd, 0x6f, 0x23, 0x59,
	0x56, 0x4f, 0xd9, 0x8e, 0x63, 0x1f, 0x7f, 0xe6, 0x26, 0xe9, 0xae, 0x0e, 0xd9, 0x54, 0xc6, 0xab,
	0x99, 0x6d, 0x86, 0x8c, 0x33, 0xf4, 0xce, 0x0e, 0xbb, 0x61, 0x59, 0x26, 0x15, 0x27, 0x8c, 0xe9,
	0x4c, 0x92, 0x2d, 0x3b, 0xdd, 0xbb, 0x23, 0x21, 0x53, 0x71, 0xdd, 0x38, 0x35, 0x29, 0x57, 0xb9,
	0xab, 0xca, 0xe9, 0xf1, 0xb0, 0x30, 0x82, 0x65, 0x10, 0x48, 0xb0, 0x5a, 0x10, 0xda, 0x07, 0xb4,
	0x0f, 0x48, 0x3c, 0xf0, 0xc4, 0x1f, 0x80, 0x78, 0x40, 0x3c, 0x00, 0xf3, 0x38, 0x12, 0x12, 0x1a,
	0x5e, 0x4a, 0x8b, 0x47, 0x48, 0x08, 0xc1, 0x03, 0x79, 0x40, 0xa2, 0x79, 0x41, 0xf7, 0xde, 0xfa,
	0xb4, 0x9d, 0x89, 0xf3, 0xd9, 0xab, 0x9e, 0xbc, 0x44, 0xae, 0x7b, 0xef, 0x39, 0xbf, 0x73, 0xcf,
	0xbd, 0xf7, 0x7c, 0xdc, 0x8f, 0xc0, 0x4b, 0xd6, 0x13, 0x6d, 0xc5, 0x6a, 0x1e, 0xe2, 0xb6, 0xdc,
	0x3c, 0x94, 0xf5, 0x16, 0x36, 0x57, 0xac, 0x66, 0x67, 0x9f, 0xfe, 0x29, 0x77, 0x4c, 0xc3, 0x36,
	0xd0, 0x52, 0xd3, 0x68, 0x1e, 0x99, 0x86, 0xdc, 0x3c, 0x2c, 0x5b, 0x4f, 0xb4, 0x72, 0xa4, 0x71,
	0x99, 0xb4, 0x9b, 0xff, 0x32, 0x61, 0xd2, 0x94, 0x6d, 0x59, 0x33, 0x5a, 0x2b, 0x0a, 0x66, 0x0c,
	0x6c, 0xb3, 0xdb, 0xb4, 0xbb, 0x26, 0x56, 0x18, 0x9b, 0xf9, 0x39, 0xd2, 0xc8, 0xee, 0x75, 0xb0,
	0xc5, 0xfe, 0xba, 0xc5, 0xa5, 0x11, 0xb4, 0x1d, 0x53, 0x3d, 0x56, 0x35, 0xdc, 0xc2, 0x6e, 0x9b,
	0xd9, 0x96, 0xd1, 0x32, 0xe8, 0xcf, 0x15, 0xf2, 0x8b, 0x95, 0x96, 0xfe, 0x6a, 0x01, 0xb2, 0x1b,
	0x1a, 0x6e, 0x63, 0xdd, 0xde, 0xa5, 0x82, 0xd6, 0x21, 0xd9, 0x34, 0xb4, 0x6e, 0x5b, 0xe7, 0xb9,
	0x25, 0xee, 0x7e, 0xe6, 0xc1, 0xfd, 0xf2, 0x59, 0x92, 0x97, 0xd7, 0x69, 0x7b, 0x11, 0x9d, 0x38,
	0x42, 0xbe, 0x23, 0x9b, 0x58, 0xb7, 0x57, 0x4b, 0x75, 0x79, 0x5f, 0xc3, 0x25, 0xc9, 0xe5, 0x85,
	0x5a, 0x90, 0xeb, 0x98, 0x6a, 0x5b, 0x36, 0x7b, 0x0d, 0x55, 0x57, 0xf0, 0xfb, 0x7c, 0x8c, 0x32,
	0x2f, 0x9f, 0xcd, 0x7c, 0x97, 0x91, 0x55, 0x09, 0xd5, 0x48, 0x88, 0x6c, 0x27, 0xd4, 0x02, 0xb5,
	0xa1, 0x60, 0xe1, 0xa6, 0xa1, 0x2b, 0x01, 0x54, 0x9c, 0x42, 0xbd, 0x7e, 0x36, 0x54, 0xcd, 0x23,
	0x3c, 0x1d, 0x2c, 0x6f, 0x45, 0xda, 0xa0, 0xdf, 0xe6, 0x60, 0xc6, 0xc2, 0x4f, 0xba, 0x58, 0x6f,
	0xe2, 0x86, 0x82, 0x3b, 0x58, 0x57, 0xb0, 0xde, 0xec, 0xf1, 0x09, 0x8a, 0xf9, 0xc6, 0x38, 0x98,
	0x8c, 0xb8, 0xe2, 0xd3, 0x8a, 0xf3, 0x27, 0x8e, 0x70, 0xc7, 0xc3, 0x65, 0xba, 0x5d, 0x5e, 0x72,
	0xf1, 0x91, 0x35, 0xd4, 0x1e, 0x7d, 0x9f, 0x83, 0xe9, 0xae, 0xae, 0x3e, 0xe9, 0xe2, 0x46, 0xd3,
	0xd0, 0x2d, 0xdb, 0x94, 0x55, 0xdd, 0xe6, 0x27, 0xa9, 0x04, 0x0f, 0xce, 0x96, 0x60, 0x8f, 0x92,
	0xae, 0xfb, 0x94, 0x62, 0xe9, 0xc4, 0x11, 0x16, 0x3d, 0xfc, 0xa8, 0x4e, 0x7c, 0x39, 0x8a, 0xdd,
	0x01, 0x2a, 0xd4, 0x81, 0x62, 0xf3, 0x10, 0x37, 0x8f, 0xc2, 0x32, 0x24, 0xa9, 0x0c, 0x3f, 0x3f,
	0xc6, 0x0c, 0x22, 0x94, 0x21, 0x11, 0x46, 0xa9, 0xbe, 0xd0, 0x8c, 0x36, 0x42, 0x9b, 0x90, 0xf2,
	0xb4, 0xc1, 0x4f, 0x51, 0xa4, 0x57, 0xc7, 0xd7, 0xb7, 0xe4, 0xd3, 0xa2, 0xa7, 0x80, 0x14, 0x7c,
	0x20, 0x77, 0x35, 0xbb, 0x81, 0xdf, 0xef, 0x98, 0xd8, 0xb2, 0x54, 0x43, 0xe7, 0x53, 0x94, 0xe3,
	0x57, 0xcf, 0xe6, 0x58, 0x61, 0xb4, 0x1b, 0x3e, 0xa9, 0x38, 0x73, 0xe2, 0x08, 0x85, 0xe8, 0x00,
	0x96, 0xa4, 0x69, 0x65, 0xb0, 0x1d, 0x5a, 0x85, 0xc4, 0xb1, 0x8a, 0x9f, 0xf2, 0x69, 0x0a, 0xf5,
	0xca, 0xd9, 0x50, 0x8f, 0x54, 0xfc, 0x54, 0xa2, 0x34, 0xe8, 0x97, 0x60, 0xd2, 0x26, 0x7a, 0xe1,
	0x81, 0x12, 0x7f, 0xe5, 0x6c, 0x62, 0xaa, 0x46, 0x89, 0x51, 0xa1, 0x03, 0xc8, 0x19, 0x5d, 0x7b,
	0xd3, 0x30, 0xb1, 0xda, 0xd2, 0x1f, 0xe2, 0x1e, 0x9f, 0xa1, 0x6c, 0x96, 0xcf, 0x66, 0x13, 0xd0,
	0x8c, 0x1c, 0xa5, 0x28, 0x5b, 0xf4, 0x04, 0xb2, 0xaa, 0x1e, 0x82, 0xc9, 0x52, 0x98, 0x6f, 0x9c,
	0x0b, 0x46, 0x6e, 0x1e, 0x49, 0xf8, 0x00, 0x9b, 0x64, 0xb0, 0x46, 0x5b, 0x80, 0x30, 0x04, 0xfa,
	0x5d, 0x0e, 0x66, 0x4d, 0xac, 0xc9, 0xb6, 0x6a, 0xe8, 0xee, 0x2a, 0x51, 0x76, 0x74, 0xb1, 0xc7,
	0xe7, 0x28, 0xf6, 0x9b, 0x67, 0x63, 0x4b, 0x23, 0xa8, 0x45, 0xfe, 0xc4, 0x11, 0x66, 0x23, 0xc0,
	0xcb, 0x4b, 0x64, 0x3c, 0x4a, 0xd2, 0x48, 0x34, 0x74, 0x0c, 0x39, 0x6f, 0x86, 0xed, 0x3c, 0xd5,
	0xb1, 0xc9, 0xbf, 0x36, 0xee, 0x62, 0xa8, 0x85, 0xc8, 0x14, 0xb1, 0x27, 0x7e, 0xe9, 0xc4, 0x11,
	0xee, 0x0d, 0xda, 0x03, 0xaf, 0x51, 0x49, 0x8a, 0xc2, 0x90, 0x49, 0x45, 0x3c, 0x03, 0x5f, 0x18,
	0x77, 0x52, 0xd5, 0x7b, 0x1d, 0x2c, 0x51, 0x1a, 0xf4, 0x16, 0x24, 0x59, 0x03, 0xbe, 0x38, 0xae,
	0xed, 0xaf, 0xd1, 0x22, 0xc9, 0xa5, 0x23, 0x6b, 0x52, 0x91, 0x6d, 0x79, 0x5f, 0xb6, 0x30, 0x3f,
	0x3d, 0xee, 0x9a, 0xac, 0xb8, 0x14, 0x92, 0x4f, 0x8b, 0x7e, 0x13, 0xb2, 0x1d, 0xd9, 0xb4, 0x55,
	0xa2, 0x56, 0x55, 0x6f, 0xf1, 0x68, 0x6c, 0x77, 0x11, 0xa2, 0x12, 0x7f, 0xf6, 0xc4, 0x11, 0x5e,
	0xf6, 0x34, 0x17, 0x76, 0x24, 0x44, 0x7f, 0x61, 0xbb, 0x46, 0xbc, 0x48, 0x88, 0x10, 0x7d, 0xc4,
	0x41, 0x5a, 0x97, 0xdb, 0xd8, 0xea, 0xc8, 0x4d, 0xcc, 0xcf, 0x50, 0xf0, 0x9f, 0x3b, 0x1b, 0x7c,
	0xdb, 0x23, 0x11, 0x57, 0x4f, 0x1c, 0xe1, 0xcd, 0x11, 0xb3, 0x25, 0x18, 0xb8, 0xe5, 0x25, 0xaf,
	0xdb, 0xcb, 0x4b, 0x4c, 0x89, 0xcb, 0x4b, 0x64, 0x28, 0x4a, 0x52, 0x80, 0x8c, 0x2c, 0x98, 0x34,
	0xe8, 0xe4, 0x99, 0x1d, 0x77, 0x95, 0xd3, 0x49, 0x20, 0xbe, 0x71, 0xe2, 0x08, 0xaf, 0x9f, 0x13,
	0xbe, 0x24, 0x31, 0x2c, 0xf4, 0x03, 0x0e, 0xf2, 0x7b, 0x16, 0x36, 0x77, 0xbd, 0x00, 0xc2, 0xe2,
	0xe7, 0xc6, 0x75, 0xa1, 0x51, 0xba, 0x0b, 0xca, 0x31, 0x80, 0x8e, 0x64, 0x00, 0x16, 0x46, 0x10,
	0xfd, 0xf2, 0x77, 0xc6, 0xb5, 0x54, 0xeb, 0x3e, 0xcd, 0x68, 0x8b, 0x1c, 0x62, 0x8a, 0xde, 0x85,
	0x94, 0x66, 0x34, 0x65, 0x4d, 0xb5, 0x7b, 0xfc, 0xdd, 0x71, 0xe7, 0xed, 0x96, 0x4b, 0x31, 0xd2,
	0x28, 0xf9, 0xfc, 0x90, 0x0d, 0x69, 0x1a, 0x88, 0x50, 0xe9, 0xf9, 0x71, 0xe7, 0x52, 0xd5, 0x23,
	0x39, 0xcf, 0x2c, 0x0e, 0x80, 0xd0, 0xef, 0x73, 0x90, 0x0f, 0x5c, 0x31, 0xc5, 0xbe, 0x37, 0xee,
	0x28, 0xae, 0x47, 0xe8, 0xc4, 0xf2, 0x89, 0x23, 0xbc, 0xea, 0x09, 0x30, 0x18, 0x2e, 0x2c, 0x2f,
	0x0d, 0x38, 0xef, 0x92, 0x34, 0x80, 0x4b, 0x56, 0x13, 0x0a, 0x79, 0x3f, 0x6a, 0x70, 0xf0, 0x01,
	0x3f, 0x4f, 0xc5, 0x59, 0x3d, 0x97, 0x87, 0x75, 0x69, 0x5d, 0x67, 0x70, 0xef, 0xc4, 0x11, 0xe6,
	0x86, 0x22, 0x25, 0xba, 0x88, 0x46, 0x00, 0xa2, 0x3f, 0xe4, 0x60, 0xce, 0xd0, 0xf7, 0x3a, 0x8a,
	0x6c, 0xe3, 0x08, 0x23, 0xfe, 0x67, 0xa8, 0x28, 0xbf, 0x38, 0xc6, 0xf2, 0x72, 0xc9, 0xcf, 0x25,
	0xcb, 0x68, 0x50, 0xf4, 0xa7, 0x1c, 0xdc, 0x6b, 0x1a, 0xed, 0x4e, 0xd7, 0xc6, 0xca, 0x10, 0x3f,
	0x7e, 0x61, 0x5c, 0x91, 0xd6, 0x4f, 0x63, 0xf1, 0x79, 0x22, 0x9d, 0x0e, 0x8c, 0x3e, 0x80, 0x69,
	0x12, 0x61, 0x30, 0x67, 0x66, 0xed, 0xe8, 0xa4, 0x96, 0xff, 0xd2, 0xb8, 0xd1, 0xd0, 0xa3, 0x41,
	0x52, 0xf1, 0xee, 0x89, 0x23, 0xcc, 0x78, 0x52, 0xb0, 0xc5, 0xcf, 0x64, 0x18, 0x86, 0x41, 0xbf,
	0xc3, 0xc1, 0x0c, 0x5b, 0x95, 0x51, 0x65, 0x2c, 0x52, 0xf8, 0xaf, 0x8d, 0xbb, 0xe6, 0xc7, 0x56,
	0xc3, 0x28, 0x30, 0x74, 0x0c, 0x19, 0xc6, 0x79, 0x43, 0xb7, 0xcd, 0x1e, 0x2f, 0x8c, 0x8b, 0xed,
	0x19, 0xb2, 0x5a, 0x40, 0x1c, 0xf5, 0xdd, 0xc3, 0x96, 0x2e, 0x0c, 0x84, 0x7e, 0xcc, 0xc1, 0xc2,
	0x40, 0x8c, 0x1b, 0xd5, 0xc2, 0x12, 0x95, 0xe4, 0x5b, 0xe7, 0x0e, 0xa7, 0xa3, 0xea, 0x18, 0x15,
	0xc8, 0x30, 0x6d, 0x7c, 0x2e, 0xfa, 0x6a, 0xe2, 0xe3, 0x3f, 0x17, 0xb8, 0xd2, 0x3f, 0xc4, 0x20,
	0x59, 0x97, 0xcd, 0x16, 0xb6, 0xd1, 0xaf, 0x41, 0x0e, 0xb3, 0xcc, 0xb1, 0x41, 0x73, 0x49, 0x37,
	0x61, 0x1c, 0xc3, 0x49, 0x87, 0x13, 0x4e, 0x31, 0xf5, 0xb1, 0x23, 0x4c, 0x7c, 0xe2, 0x08, 0x9c,
	0x94, 0xc5, 0xe1, 0x44, 0x54, 0x82, 0x54, 0x1b, 0xdb, 0x32, 0x09, 0x09, 0xdc, 0x6c, 0xf1, 0xf5,
	0x71, 0x82, 0x5c, 0x22, 0xda, 0x3b, 0x2e, 0x9d, 0x98, 0x20, 0xbc, 0x25, 0x9f, 0x0f, 0xda, 0x85,
	0xb4, 0xa2, 0x9a, 0xb8, 0x49, 0xfc, 0x3c, 0xcd, 0xd1, 0xf2, 0xe3, 0x64, 0x48, 0x8c, 0x69, 0xb9,
	0xe2, 0x51, 0x4a, 0x01, 0x93, 0xd2, 0x2f, 0x40, 0xda, 0x2f, 0x47, 0x19, 0x98, 0xda, 0xdb, 0x7e,
	0xb8, 0xbd, 0xf3, 0x78, 0xbb, 0x38, 0x81, 0xa6, 0x20, 0xbe, 0x56, 0xa9, 0x14, 0x39, 0x94, 0x82,
	0x44, 0x45, 0xda, 0xd9, 0x2d, 0xc6, 0x10, 0x40, 0xb2, 0x56, 0x5f, 0xab, 0x57, 0xd7, 0x8b, 0xf1,
	0xd2, 0xdf, 0xa7, 0x21, 0xc9, 0x26, 0x23, 0x52, 0x20, 0x45, 0xa3, 0xf2, 0x86, 0xaa, 0x50, 0x1d,
	0xe6, 0xc4, 0x6a, 0xdf, 0x11, 0xa6, 0xe8, 0xd8, 0x54, 0x2b, 0xcf, 0x1c, 0x61, 0xb5, 0xa5, 0xda,
	0x87, 0xdd, 0xfd, 0x72, 0xd3, 0x68, 0xaf, 0xf8, 0xd2, 0x2a, 0xfb, 0xc1, 0xef, 0x95, 0xce, 0x51,
	0x6b, 0x65, 0x78, 0x0f, 0xa0, 0x5c, 0xad, 0x48, 0x53, 0x94, 0x75, 0x55, 0x41, 0x6d, 0x48, 0xb3,
	0xd9, 0x4e, 0x60, 0xe2, 0x14, 0x66, 0xb7, 0xef, 0x08, 0x29, 0x26, 0x04, 0xc5, 0x79, 0xeb, 0xa2,
	0x38, 0x1e, 0x0f, 0x29, 0xc5, 0x20, 0x18, 0xdc, 0x81, 0xdc, 0x56, 0xb5, 0x1e, 0x81, 0x4b, 0x04,
	0x70, 0x9b, 0xb4, 0xf0, 0x72, 0x70, 0x1e, 0x0f, 0x29, 0xc5, 0x20, 0xaa, 0x0a, 0x12, 0x20, 0xe3,
	0xc2, 0x91, 0xe8, 0x89, 0x66, 0xbf, 0x69, 0x09, 0x58, 0x11, 0x75, 0x42, 0x65, 0x37, 0x2e, 0x66,
	0x39, 0xe9, 0xfc, 0xe0, 0xa8, 0xe3, 0x76, 0x99, 0x6d, 0xa8, 0xd4, 0xdd, 0x58, 0x78, 0x1e, 0x52,
	0x7a, 0x57, 0xd3, 0x68, 0x8e, 0x45, 0xb2, 0xcb, 0x94, 0xe4, 0x7f, 0xa3, 0x07, 0x90, 0x0d, 0x67,
	0x8c, 0x34, 0x57, 0x4c, 0x8b, 0x85, 0xbe, 0x23, 0x64, 0x42, 0xbe, 0x4a, 0xca, 0x84, 0x7c, 0x10,
	0x7a, 0x13, 0xf2, 0x86, 0xde, 0xe8, 0x52, 0x3f, 0xc0, 0xa8, 0xd2, 0x94, 0xaa, 0xd8, 0x77, 0x84,
	0x6c, 0xd8, 0xad, 0x48, 0x59, 0x23, 0xf4, 0x85, 0xee, 0x40, 0xf2, 0x50, 0x55, 0x14, 0xac, 0xd3,
	0x4c, 0x2f, 0x25, 0xb9, 0x5f, 0xa8, 0x44, 0x32, 0x2b, 0xb9, 0xd9, 0x24, 0xb9, 0x24, 0x91, 0x31,
	0x43, 0x6b, 0x23, 0x65, 0xe8, 0x87, 0x1c, 0xcc, 0xb7, 0xb0, 0x8e, 0x4d, 0xd9, 0xc6, 0x4a, 0x43,
	0xb6, 0x1a, 0xaa, 0x82, 0x75, 0x5b, 0xb5, 0x7b, 0x0d, 0xaa, 0x8a, 0x2c, 0x1d, 0x95, 0xda, 0x33,
	0x47, 0xd8, 0xb9, 0xe8, 0x48, 0xfc, 0x8a, 0xc7, 0x7d, 0xcd, 0xaa, 0xba, 0xbc, 0xa9, 0xd5, 0xb8,
	0xdb, 0x1a, 0x5d, 0x81, 0x76, 0xe1, 0xe5, 0xd1, 0x12, 0xf9, 0xbb, 0x28, 0x46, 0x87, 0xae, 0xce,
	0x1c, 0x1d, 0xc1, 0x97, 0x46, 0xf0, 0xf1, 0xf3, 0x23, 0xda, 0x10, 0xbd, 0x07, 0xd3, 0x5d, 0x0b,
	0x5b, 0x01, 0x03, 0x55, 0xb1, 0xf8, 0xfc, 0x52, 0xfc, 0x7e, 0x4e, 0xfc, 0xd6, 0x25, 0xd7, 0x4e,
	0x81, 0x30, 0xf6, 0xe0, 0xaa, 0x8a, 0x45, 0x94, 0xee, 0x3a, 0x4e, 0x93, 0x0c, 0x0e, 0x4d, 0xb2,
	0xd2, 0x52, 0xa4, 0x0c, 0x7d, 0x13, 0x8a, 0x9d, 0x56, 0x43, 0xb6, 0x6d, 0x53, 0xdd, 0xef, 0xda,
	0xb8, 0xa1, 0x77, 0xdb, 0x34, 0x9d, 0xca, 0x89, 0xa8, 0xef, 0x08, 0xf9, 0xdd, 0xd6, 0x9a, 0x57,
	0xb5, 0xdd, 0x6d, 0x4b, 0xf9, 0x4e, 0xe4, 0x9b, 0x04, 0xdf, 0xc8, 0xea, 0x59, 0x36, 0x6e, 0x37,
	0xdc, 0xd5, 0x7a, 0xa4, 0xea, 0x0a, 0xcd, 0xa5, 0x72, 0xe2, 0xaf, 0xf7, 0x1d, 0xa1, 0x58, 0xa3,
	0xb5, 0x6c, 0xc5, 0x3d, 0x54, 0x75, 0xe5, 0x99, 0x23, 0xbc, 0x7d, 0xd1, 0x3e, 0x0e, 0xf2, 0x92,
	0x8a, 0xd6, 0x40, 0x09, 0xe2, 0x61, 0xea, 0x58, 0x35, 0xed, 0xae, 0xac, 0xd1, 0x24, 0x2c, 0x25,
	0x79, 0x9f, 0xab, 0x89, 0x7f, 0x27, 0x0e, 0xe1, 0x2f, 0xd2, 0x90, 0x0d, 0x07, 0xa5, 0x37, 0x64,
	0xcd, 0x54, 0x48, 0xd1, 0x58, 0x97, 0xa0, 0xc4, 0x28, 0xca, 0x36, 0x41, 0xa1, 0x22, 0x50, 0x94,
	0x5f, 0xbe, 0x30, 0x0a, 0x63, 0x21, 0x4d, 0x51, 0xfe, 0x55, 0x05, 0x95, 0x20, 0xc9, 0x76, 0xbb,
	0xa8, 0xd5, 0x4c, 0x89, 0xd0, 0x77, 0x84, 0x24, 0x0b, 0x83, 0x25, 0xb7, 0x06, 0x7d, 0x00, 0xf9,
	0x23, 0xdc, 0x6b, 0xf8, 0x06, 0xd6, 0xe2, 0x13, 0x74, 0x06, 0xd6, 0xc9, 0xea, 0x7e, 0x88, 0x7b,
	0x9e, 0x81, 0xb4, 0xae, 0xc4, 0xca, 0x66, 0x8f, 0x7c, 0x8e, 0x8a, 0x85, 0xbe, 0xcf, 0xc1, 0x6c,
	0x08, 0x3c, 0x70, 0x70, 0x93, 0x4b, 0xf1, 0xfb, 0xf9, 0x07, 0x5f, 0x3f, 0xdf, 0x1e, 0x6b, 0xe0,
	0xe6, 0xc4, 0xbb, 0x7d, 0x47, 0x98, 0xf1, 0x85, 0xf7, 0xcb, 0x2d, 0x09, 0x1d, 0x0d, 0x15, 0xa2,
	0x3f, 0xe2, 0x60, 0x8e, 0x48, 0x61, 0x75, 0x0f, 0x0e, 0xd4, 0xf7, 0xc3, 0x9a, 0x48, 0x52, 0x4d,
	0xbc, 0xdb, 0x77, 0x04, 0xf4, 0x10, 0xf7, 0x6a, 0xb4, 0xfe, 0x6a, 0xf5, 0x41, 0xe4, 0x89, 0xf0,
	0x55, 0x2c, 0xa4, 0x03, 0xb2, 0x0e, 0x65, 0x53, 0xc1, 0x4a, 0x83, 0x34, 0x37, 0xd5, 0x8e, 0x6d,
	0x98, 0xee, 0x3e, 0xe1, 0xd0, 0xbe, 0xc6, 0x13, 0x8d, 0xc4, 0x65, 0xe5, 0x1a, 0x23, 0xa8, 0xf8,
	0xed, 0xc5, 0xb9, 0xbe, 0x23, 0x4c, 0x0f, 0x15, 0x4b, 0xd3, 0xd6, 0x60, 0x11, 0xfa, 0x3d, 0xb2,
	0x70, 0x6d, 0xc3, 0x54, 0xf5, 0x56, 0xb8, 0xf3, 0x29, 0xda, 0xf9, 0xef, 0xd0, 0x85, 0xcb, 0x6a,
	0xaf, 0xb6, 0xeb, 0x45, 0x2b, 0xc2, 0x55, 0xb1, 0x48, 0x96, 0x33, 0x4b, 0x0c, 0x92, 0x61, 0xa9,
	0x36, 0x0e, 0x8b, 0x92, 0x0e, 0xc6, 0x61, 0xdd, 0xab, 0xbf, 0xe2, 0x71, 0x68, 0x0e, 0xf0, 0x55,
	0x2c, 0x74, 0x9f, 0x2c, 0xd4, 0x63, 0x6c, 0xda, 0x58, 0x61, 0x1e, 0x4c, 0xcc, 0x92, 0x30, 0xa0,
	0xea, 0x96, 0x49, 0x7e, 0x2d, 0x7a, 0x83, 0x18, 0x57, 0xbd, 0xd9, 0x35, 0x49, 0x68, 0xaa, 0xb1,
	0x2d, 0xc9, 0x14, 0xf3, 0x8f, 0xeb, 0xa1, 0x72, 0x29, 0xd2, 0xaa, 0xb4, 0x18, 0x0e, 0xc0, 0x48,
	0xcc, 0x55, 0x5b, 0x2f, 0x4e, 0xd0, 0x98, 0x6b, 0xa3, 0xb6, 0x5e, 0xe4, 0x5c, 0x2b, 0xf5, 0x97,
	0x69, 0xc8, 0x47, 0x93, 0xe5, 0x5b, 0x3b, 0x75, 0xd3, 0x76, 0xea, 0xa3, 0xcf, 0xb7, 0x53, 0xab,
	0xe7, 0x3d, 0xa0, 0xb9, 0xb5, 0x54, 0xb7, 0x96, 0xea, 0xc5, 0xb3, 0x54, 0xff, 0x1c, 0x07, 0x34,
	0x7c, 0x28, 0xf8, 0x3c, 0x72, 0xc4, 0xd8, 0x0d, 0xe4, 0x88, 0x99, 0x50, 0xd4, 0xee, 0x26, 0xa5,
	0x5b, 0x7d, 0x47, 0x00, 0x3f, 0xe8, 0xbe, 0x6c, 0xd7, 0xc0, 0xf2, 0xc3, 0x77, 0xf4, 0x8e, 0x9b,
	0x02, 0xb2, 0xc4, 0xff, 0x1b, 0x17, 0x39, 0x9c, 0x0d, 0x9d, 0x96, 0x94, 0xbe, 0x02, 0x09, 0x9a,
	0xd2, 0x44, 0xb2, 0xfe, 0x14, 0x24, 0xf6, 0x6a, 0x1b, 0x35, 0x96, 0xf6, 0xef, 0x3c, 0xde, 0xae,
	0x15, 0x63, 0xee, 0xc0, 0xfe, 0x5b, 0x1c, 0x8a, 0x83, 0x9b, 0xa7, 0xe8, 0xbb, 0x50, 0x08, 0x36,
	0x4b, 0x59, 0x56, 0xc6, 0x51, 0xe9, 0xce, 0xb5, 0x4b, 0x4b, 0x85, 0x0a, 0xed, 0xba, 0x52, 0xb1,
	0x5e, 0x03, 0x14, 0x62, 0x6d, 0x98, 0x8a, 0xaa, 0xcb, 0x1a, 0x1b, 0x54, 0x69, 0x3a, 0xa8, 0xd9,
	0x61, 0x15, 0x91, 0x09, 0x16, 0xbf, 0x11, 0x77, 0x98, 0xb8, 0x5e, 0x77, 0xd8, 0xf1, 0x4e, 0x0d,
	0xa8, 0x49, 0x99, 0xa4, 0x26, 0xe5, 0xdb, 0x7d, 0x47, 0x48, 0x5f, 0xad, 0x25, 0x49, 0x7b, 0xb3,
	0xd9, 0x72, 0xc7, 0xf9, 0x6f, 0xe3, 0x50, 0x18, 0xd8, 0x80, 0xfb, 0xc2, 0x0d, 0x33, 0x82, 0x04,
	0xdd, 0x86, 0x49, 0xd0, 0xfc, 0x98, 0xfe, 0x26, 0x65, 0x74, 0xdb, 0x83, 0x6d, 0xcd, 0xd0, 0xdf,
	0x03, 0x63, 0x94, 0xbc, 0xfe, 0x31, 0x42, 0x0b, 0x90, 0x3e, 0x96, 0x35, 0x55, 0x91, 0x89, 0x95,
	0x67, 0xfb, 0x3a, 0x41, 0x81, 0x3b, 0x82, 0x1f, 0x42, 0xca, 0x5b, 0xf9, 0x83, 0x26, 0x8a, 0xbb,
	0x5e, 0x13, 0xe5, 0x0a, 0xf0, 0x83, 0x38, 0x4c, 0x0f, 0x5d, 0x2b, 0x78, 0x31, 0x5d, 0xc0, 0x6f,
	0x40, 0x74, 0x93, 0xa5, 0x62, 0xf1, 0x71, 0x7f, 0x1a, 0x14, 0xf6, 0xa2, 0x55, 0x57, 0xba, 0x9d,
	0x53, 0xb1, 0xd0, 0x4b, 0x03, 0xfb, 0x78, 0x6c, 0xba, 0x86, 0xb7, 0xed, 0xdc, 0x01, 0x31, 0x21,
	0xf1, 0x48, 0xc5, 0x4f, 0x6f, 0x66, 0x08, 0x5c, 0x4c, 0x0b, 0x26, 0x29, 0xdf, 0x1b, 0x05, 0xfd,
	0x97, 0x18, 0xdc, 0x3b, 0xf5, 0x8c, 0xeb, 0xc5, 0x9c, 0x81, 0x32, 0x4c, 0x11, 0x83, 0x1c, 0x18,
	0xc4, 0xb7, 0x49, 0xde, 0x44, 0x3a, 0x7e, 0xe9, 0x2e, 0x25, 0x09, 0xe3, 0x88, 0x6e, 0x4f, 0x3d,
	0xac, 0xbb, 0xd5, 0xed, 0xa5, 0x74, 0xfb, 0x69, 0x0c, 0xf8, 0xd3, 0x8e, 0x89, 0x6f, 0x55, 0x7b,
	0x29, 0xd5, 0xfe, 0x53, 0x0c, 0x66, 0x46, 0x1c, 0xab, 0xde, 0x6a, 0xf5, 0x52, 0x5a, 0xfd, 0x71,
	0x0c, 0x16, 0x3e, 0xef, 0x98, 0xf6, 0x86, 0xd4, 0x7b, 0xce, 0xe8, 0xf1, 0xc6, 0xd4, 0xd3, 0xe7,
	0x60, 0x7a, 0xe8, 0x2a, 0xc1, 0x0d, 0xe9, 0xe4, 0xc6, 0x3a, 0xf9, 0x07, 0x49, 0x80, 0xd0, 0xc5,
	0xc5, 0x16, 0xa4, 0x0d, 0x53, 0x6d, 0xa9, 0x7a, 0xd0, 0xbd, 0x5f, 0x25, 0x53, 0x7d, 0x87, 0x16,
	0x5e, 0x1a, 0x3b, 0xc5, 0x98, 0x57, 0x15, 0xf4, 0x3d, 0xc8, 0xbb, 0x40, 0x6c, 0xde, 0x7b, 0x21,
	0xd7, 0x5e, 0xdf, 0x11, 0x72, 0x0c, 0x8d, 0x2d, 0x8d, 0xab, 0x89, 0xbe, 0x73, 0x46, 0x98, 0x25,
	0xea, 0x40, 0xd6, 0xf4, 0x66, 0x79, 0x90, 0x06, 0xbe, 0xd3, 0x77, 0x84, 0x8c, 0x3f, 0xfb, 0x2f,
	0xdd, 0xd9, 0x8c, 0x0f, 0x51, 0x55, 0xd0, 0x47, 0x1c, 0x4c, 0x07, 0x90, 0x5e, 0x9f, 0x27, 0x83,
	0xfd, 0x2e, 0x1f, 0xf7, 0x2a, 0xbb, 0x5d, 0x34, 0x07, 0xb8, 0xa2, 0x0f, 0x21, 0xed, 0x1f, 0x01,
	0xd3, 0x73, 0xe8, 0x9c, 0xb8, 0x4f, 0x07, 0xd8, 0x0d, 0xb8, 0x9e, 0x39, 0x82, 0x74, 0xe1, 0x23,
	0x71, 0x7f, 0x1e, 0xf9, 0x9d, 0x69, 0xac, 0xb1, 0xdb, 0x0a, 0x29, 0xef, 0x3c, 0xd9, 0x15, 0x40,
	0xc1, 0x1a, 0xb6, 0xd9, 0xa1, 0xb6, 0x2f, 0x40, 0x85, 0x96, 0x5d, 0x9f, 0x00, 0x8c, 0xbf, 0x9f,
	0x17, 0xa6, 0x82, 0xbc, 0xd0, 0x5d, 0x0b, 0x3f, 0x4a, 0xc2, 0xdd, 0x53, 0xee, 0xfc, 0xde, 0x2e,
	0x8c, 0xdb, 0x85, 0xf1, 0xc5, 0x5d, 0x18, 0xff, 0xc3, 0x41, 0x61, 0xe0, 0x46, 0xf8, 0x0d, 0x6f,
	0x4a, 0x20, 0x1b, 0xf2, 0xf4, 0x66, 0x70, 0xc3, 0x77, 0xbe, 0xc1, 0x49, 0x56, 0x96, 0x5e, 0x38,
	0xbe, 0x1a, 0x0f, 0x9c, 0x35, 0x02, 0x5e, 0x4a, 0xe9, 0x27, 0x31, 0x98, 0x1d, 0x75, 0x13, 0xff,
	0x86, 0xa2, 0x00, 0x1d, 0x40, 0xf1, 0x51, 0xc3, 0x1d, 0x0e, 0xcb, 0x72, 0x59, 0x25, 0x07, 0x08,
	0x48, 0x03, 0x2f, 0x0a, 0xad, 0x5c, 0xfb, 0xed, 0xac, 0x8a, 0x3b, 0xb7, 0x54, 0x77, 0x07, 0x3b,
	0x14, 0xf1, 0x70, 0xd7, 0x13, 0xf1, 0x94, 0xfe, 0x9b, 0x83, 0x24, 0xbb, 0xf5, 0x48, 0xcc, 0x39,
	0xdb, 0xe6, 0x1c, 0x30, 0xe7, 0xac, 0xfa, 0xf2, 0xe6, 0x9c, 0x31, 0xaf, 0x2a, 0xe8, 0xb7, 0xa0,
	0xe8, 0x3d, 0xc9, 0xb2, 0x77, 0xf6, 0xdf, 0xc3, 0x4d, 0xdb, 0x33, 0xe8, 0x12, 0x31, 0x6e, 0x95,
	0x81, 0xba, 0x4b, 0xe2, 0x0e, 0x61, 0x95, 0xfe, 0x97, 0x83, 0x94, 0x77, 0xe7, 0x93, 0xac, 0x59,
	0xef, 0x75, 0xc3, 0xc0, 0x9a, 0xf5, 0x9a, 0x5c, 0x7e, 0xcd, 0x7a, 0x00, 0x3f, 0x05, 0x7d, 0x97,
	0x20, 0xb7, 0xd6, 0xb5, 0x0f, 0x0d, 0x53, 0xfd, 0x80, 0xae, 0x60, 0x34, 0x0f, 0xa9, 0xae, 0x85,
	0x4d, 0x6a, 0xe5, 0x38, 0x6a, 0xe5, 0xfc, 0x6f, 0xf4, 0x32, 0x4c, 0xc9, 0x9d, 0x0e, 0xbd, 0xa3,
	0x1e, 0xa3, 0x97, 0xe2, 0x32, 0x64, 0x41, 0xaf, 0xb1, 0x22, 0xc9, 0xab, 0x2b, 0x7d, 0x0f, 0xd2,
	0x35, 0x5b, 0xb6, 0xe9, 0x1d, 0x51, 0xb4, 0x00, 0x69, 0xcb, 0xfb, 0x70, 0x19, 0x06, 0x05, 0x68,
	0x99, 0x38, 0x36, 0x45, 0x6e, 0xda, 0x58, 0xf1, 0x49, 0x18, 0x6f, 0x69, 0xb8, 0x02, 0x7d, 0x19,
	0x72, 0x3e, 0x69, 0xc3, 0x96, 0x5b, 0x74, 0x01, 0xa6, 0xa5, 0xac, 0x5f, 0x58, 0x97, 0x5b, 0xa5,
	0x7f, 0xe4, 0x20, 0x1f, 0xbd, 0x5e, 0x8a, 0x5e, 0x83, 0x8c, 0xd5, 0xdd, 0x6f, 0x3c, 0x35, 0xcc,
	0xa3, 0x60, 0x4c, 0x73, 0x7d, 0x47, 0x48, 0xd7, 0xba, 0xfb, 0x8f, 0x0d, 0xf3, 0xa8, 0x5a, 0x91,
	0xd2, 0x96, 0xfb, 0x53, 0x41, 0x12, 0x4c, 0x5b, 0x46, 0xd7, 0x6c, 0xe2, 0x86, 0x77, 0x6f, 0xd6,
	0x37, 0xa5, 0xaf, 0xf4, 0x1d, 0xa1, 0x50, 0xa3, 0x95, 0xee, 0xe5, 0x58, 0x3a, 0x1b, 0x06, 0x8b,
	0xa4, 0x82, 0x15, 0x29, 0x50, 0xd0, 0x03, 0x08, 0xa4, 0x0c, 0x32, 0x16, 0x7a, 0x15, 0xd1, 0xef,
	0x1f, 0x71, 0xfb, 0x7e, 0xa3, 0xaa, 0x52, 0xfa, 0x36, 0xe4, 0xb6, 0x54, 0xcb, 0xf6, 0x9f, 0xca,
	0xa0, 0x05, 0xd7, 0xfb, 0x50, 0x35, 0x8a, 0xa9, 0xbe, 0x23, 0x24, 0xa8, 0xe6, 0xd9, 0xc6, 0xfd,
	0x82, 0xbb, 0x71, 0x1f, 0x5b, 0x8a, 0x7b, 0xb5, 0xf4, 0x9e, 0x22, 0x2d, 0x75, 0x2d, 0xc9, 0x11,
	0x14, 0x24, 0x59, 0x6f, 0x61, 0x9f, 0xa7, 0x75, 0x06, 0xd3, 0x3b, 0x10, 0xab, 0x1b, 0x2e, 0xcb,
	0x64, 0xdf, 0x11, 0x62, 0x75, 0x43, 0x8a, 0xd5, 0x0d, 0x42, 0xb5, 0x69, 0x1a, 0x6d, 0x3a, 0x57,
	0x5d, 0x2a, 0xf2, 0x2d, 0xd1, 0xbf, 0x2e, 0xd8, 0x7f, 0xc4, 0x21, 0x1b, 0x7e, 0xe7, 0xf3, 0x42,
	0x5e, 0xe5, 0x38, 0x50, 0xb1, 0xa6, 0x58, 0xae, 0x1e, 0xe8, 0x55, 0x8e, 0x4d, 0x5a, 0x22, 0xb9,
	0x35, 0x48, 0x83, 0x82, 0xa6, 0x5a, 0x76, 0xc3, 0x7f, 0xb8, 0xc4, 0xee, 0x72, 0x64, 0x1e, 0xac,
	0x8c, 0xf1, 0x72, 0x25, 0x3c, 0xfc, 0xec, 0x5e, 0x62, 0xa4, 0xc8, 0x92, 0xf2, 0x5a, 0xe4, 0x1b,
	0x3d, 0x81, 0xa2, 0x49, 0x18, 0x84, 0xe1, 0x26, 0x29, 0xdc, 0x18, 0x2f, 0xda, 0x06, 0xa6, 0x86,
	0x38, 0x43, 0x66, 0xfb, 0x40, 0xa1, 0x54, 0x30, 0xa3, 0x05, 0xee, 0x60, 0xff, 0x67, 0x0c, 0xd2,
	0xfe, 0xbb, 0xaa, 0x9b, 0xb6, 0xa2, 0x11, 0x57, 0x15, 0xbb, 0x46, 0x57, 0x65, 0x41, 0x2e, 0xb8,
	0xfb, 0x11, 0xac, 0x63, 0x37, 0xe0, 0xf0, 0x2a, 0x2e, 0x1f, 0x61, 0x05, 0x20, 0xa3, 0x4f, 0xe9,
	0x4a, 0x7f, 0xc2, 0xc1, 0x24, 0x7b, 0x48, 0x38, 0x24, 0x12, 0x77, 0x03, 0x22, 0xcd, 0x7a, 0x0f,
	0xde, 0x98, 0xad, 0x66, 0x1f, 0xa5, 0xbf, 0x1b, 0x7a, 0x91, 0xf6, 0x7c, 0xa4, 0x0b, 0xfb, 0xb0,
	0xd8, 0x80, 0x0f, 0x5b, 0x04, 0xe8, 0x04, 0x0f, 0xe6, 0xe8, 0xf0, 0x49, 0xa1, 0x92, 0xd2, 0xdf,
	0xc4, 0x20, 0xe5, 0x3d, 0x18, 0x7b, 0x3e, 0xd2, 0xff, 0x35, 0x17, 0x48, 0xe0, 0xbe, 0xa8, 0xf8,
	0xda, 0x29, 0xd7, 0x8b, 0xa8, 0xe5, 0x0c, 0x04, 0xf1, 0x5f, 0xba, 0xad, 0x1b, 0xfa, 0x81, 0xda,
	0x12, 0x0f, 0xc8, 0x1a, 0xf0, 0xca, 0x9e, 0x39, 0xc2, 0xa3, 0x8b, 0xca, 0x38, 0x80, 0xd3, 0x88,
	0xe2, 0x48, 0x3e, 0x46, 0xe9, 0xff, 0x38, 0x80, 0xe0, 0x3d, 0xdf, 0x8b, 0xb9, 0xf7, 0xec, 0x2d,
	0xc7, 0xf8, 0xa8, 0x1c, 0x30, 0xed, 0xbf, 0x07, 0x7c, 0xf1, 0xbc, 0xdd, 0xe9, 0x1d, 0xff, 0xb3,
	0x18, 0xe4, 0xa3, 0x8f, 0x11, 0x6f, 0xa8, 0xf7, 0x23, 0x2e, 0x6c, 0xc4, 0xae, 0xf5, 0xc2, 0x46,
	0xfc, 0xb4, 0x2d, 0xf7, 0x11, 0x46, 0xda, 0xdb, 0x23, 0x9f, 0x84, 0xa2, 0x7b, 0xe6, 0xe5, 0x1b,
	0xc6, 0xe7, 0x63, 0x59, 0x9a, 0x90, 0xc3, 0xef, 0x77, 0x34, 0xb5, 0xa9, 0xda, 0x0d, 0xd3, 0xd0,
	0xb0, 0x6b, 0x5d, 0xbe, 0x79, 0x8a, 0x75, 0x19, 0x14, 0xda, 0xda, 0x34, 0x4c, 0xc9, 0xd0, 0x70,
	0x79, 0xc3, 0x65, 0x42, 0x3e, 0xde, 0x9e, 0x90, 0xb2, 0x38, 0xf4, 0x8d, 0x8e, 0x20, 0x77, 0x60,
	0x98, 0x0d, 0x59, 0xd3, 0x28, 0x86, 0xe5, 0xfe, 0x5f, 0x8f, 0x8d, 0xf3, 0x82, 0x6c, 0x1a, 0xe6,
	0x9a, 0xa6, 0x91, 0x9f, 0xd6, 0xae, 0x85, 0xbb, 0x8a, 0xe1, 0xa2, 0x65, 0x0e, 0x82, 0x0a, 0xf4,
	0x21, 0xcc, 0x05, 0xb6, 0xbb, 0xd1, 0xc1, 0x66, 0xc3, 0xa0, 0x89, 0x8d, 0x1b, 0x62, 0x3d, 0x1c,
	0xfb, 0xd1, 0xaa, 0x8f, 0x5f, 0x0e, 0x24, 0xd9, 0xc5, 0x26, 0x4b, 0x93, 0xe8, 0xbb, 0x3f, 0x69,
	0xa6, 0x33, 0x5c, 0x33, 0xff, 0x1e, 0xdc, 0x71, 0x39, 0xb0, 0x82, 0x60, 0x84, 0x77, 0x23, 0x8e,
	0x86, 0xa3, 0xf2, 0x9c, 0xfb, 0x65, 0x76, 0xd8, 0x35, 0xcd, 0xff, 0x31, 0x07, 0xfc, 0x69, 0xd2,
	0xa1, 0x22, 0xc4, 0x8f, 0x70, 0x8f, 0x4d, 0x23, 0x89, 0xfc, 0x44, 0x0d, 0x98, 0x3c, 0x96, 0xb5,
	0xae, 0x37, 0xca, 0xd5, 0x0b, 0xe8, 0x62, 0x74, 0xd7, 0x24, 0xc6, 0x77, 0x35, 0xf6, 0x75, 0x4e,
	0x4c, 0x42, 0x82, 0x8c, 0x72, 0xe9, 0xbf, 0x38, 0x98, 0x19, 0xf1, 0xb0, 0xf2, 0x45, 0x0d, 0x04,
	0x5f, 0xfd, 0x11, 0x07, 0x49, 0x92, 0xb8, 0x75, 0xad, 0xe8, 0xbd, 0x42, 0x80, 0xe4, 0x9a, 0x58,
	0xdb, 0xd8, 0xae, 0x17, 0x39, 0x52, 0x51, 0x91, 0x76, 0x76, 0x77, 0x37, 0x2a, 0xc5, 0x18, 0x2a,
	0x40, 0xa6, 0xb2, 0xb1, 0xb5, 0x51, 0xdf, 0x68, 0xec, 0x6c, 0x6f, 0x7d, 0xb7, 0x18, 0x47, 0xf7,
	0x60, 0xce, 0x2d, 0x58, 0xdb, 0xae, 0x34, 0x1e, 0x4b, 0x55, 0xaf, 0x2a, 0x81, 0xf2, 0x00, 0xe2,
	0xda, 0xfa, 0xc3, 0xcd, 0xea, 0xd6, 0xd6, 0x46, 0xa5, 0x38, 0x89, 0x72, 0x90, 0x7e, 0xb4, 0xb6,
	0x55, 0xad, 0xac, 0xd5, 0x37, 0x2a, 0xc5, 0x24, 0x61, 0x55, 0xff, 0xce, 0x76, 0xc3, 0xe3, 0x3d,
	0x45, 0x40, 0x77, 0xf7, 0xc4, 0xad, 0xea, 0x7a, 0x31, 0xf5, 0xea, 0x5b, 0x61, 0x4b, 0xec, 0xdd,
	0x7b, 0xac, 0xea, 0xf4, 0xee, 0x54, 0x71, 0x02, 0xdd, 0x01, 0xc4, 0x2e, 0x37, 0x3e, 0x56, 0xed,
	0x43, 0xa3, 0x6b, 0x53, 0x23, 0x5f, 0xe4, 0x50, 0x1a, 0x26, 0xe9, 0x31, 0x67, 0x31, 0x26, 0xbe,
	0xf2, 0xf1, 0xbf, 0x2e, 0x4e, 0x7c, 0xdc, 0x5f, 0xe4, 0x3e, 0xe9, 0x2f, 0x72, 0x9f, 0xf6, 0x17,
	0xb9, 0x9f, 0xf4, 0x17, 0xb9, 0x1f, 0x7e, 0xb6, 0x38, 0xf1, 0xc9, 0x67, 0x8b, 0x13, 0x9f, 0x7e,
	0xb6, 0x38, 0xf1, 0x6e, 0x82, 0xe8, 0x63, 0x3f, 0x49, 0x5f, 0x93, 0x7e, 0xf5, 0xff, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x9e, 0x11, 0xbd, 0xa6, 0x56, 0x49, 0x00, 0x00,
}

func (this *Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column)
	if !ok {
		that2, ok := that.(Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.ColumnID != that1.ColumnID {
		return false
	}
	if this.FamilyID != that1.FamilyID {
		return false
	}
	if this.FamilyName != that1.FamilyName {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	if this.Nullable != that1.Nullable {
		return false
	}
	if this.DefaultExpr != that1.DefaultExpr {
		return false
	}
	if this.OnUpdateExpr != that1.OnUpdateExpr {
		return false
	}
	if this.Hidden != that1.Hidden {
		return false
	}
	if this.Inaccessible != that1.Inaccessible {
		return false
	}
	if this.GeneratedAsIdentityType != that1.GeneratedAsIdentityType {
		return false
	}
	if this.GeneratedAsIdentitySequenceOption != that1.GeneratedAsIdentitySequenceOption {
		return false
	}
	if len(this.UsesSequenceIds) != len(that1.UsesSequenceIds) {
		return false
	}
	for i := range this.UsesSequenceIds {
		if this.UsesSequenceIds[i] != that1.UsesSequenceIds[i] {
			return false
		}
	}
	if this.ComputerExpr != that1.ComputerExpr {
		return false
	}
	if this.PgAttributeNum != that1.PgAttributeNum {
		return false
	}
	if this.SystemColumnKind != that1.SystemColumnKind {
		return false
	}
	if this.Virtual != that1.Virtual {
		return false
	}
	return true
}
func (this *PrimaryIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrimaryIndex)
	if !ok {
		that2, ok := that.(PrimaryIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.IndexID != that1.IndexID {
		return false
	}
	if this.Unique != that1.Unique {
		return false
	}
	if len(this.KeyColumnIDs) != len(that1.KeyColumnIDs) {
		return false
	}
	for i := range this.KeyColumnIDs {
		if this.KeyColumnIDs[i] != that1.KeyColumnIDs[i] {
			return false
		}
	}
	if len(this.KeyColumnDirections) != len(that1.KeyColumnDirections) {
		return false
	}
	for i := range this.KeyColumnDirections {
		if this.KeyColumnDirections[i] != that1.KeyColumnDirections[i] {
			return false
		}
	}
	if len(this.KeySuffixColumnIDs) != len(that1.KeySuffixColumnIDs) {
		return false
	}
	for i := range this.KeySuffixColumnIDs {
		if this.KeySuffixColumnIDs[i] != that1.KeySuffixColumnIDs[i] {
			return false
		}
	}
	if !this.ShardedDescriptor.Equal(that1.ShardedDescriptor) {
		return false
	}
	if len(this.StoringColumnIDs) != len(that1.StoringColumnIDs) {
		return false
	}
	for i := range this.StoringColumnIDs {
		if this.StoringColumnIDs[i] != that1.StoringColumnIDs[i] {
			return false
		}
	}
	if len(this.CompositeColumnIDs) != len(that1.CompositeColumnIDs) {
		return false
	}
	for i := range this.CompositeColumnIDs {
		if this.CompositeColumnIDs[i] != that1.CompositeColumnIDs[i] {
			return false
		}
	}
	if this.Inverted != that1.Inverted {
		return false
	}
	if this.Concurrently != that1.Concurrently {
		return false
	}
	return true
}
func (this *SecondaryIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecondaryIndex)
	if !ok {
		that2, ok := that.(SecondaryIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.IndexID != that1.IndexID {
		return false
	}
	if this.Unique != that1.Unique {
		return false
	}
	if len(this.KeyColumnIDs) != len(that1.KeyColumnIDs) {
		return false
	}
	for i := range this.KeyColumnIDs {
		if this.KeyColumnIDs[i] != that1.KeyColumnIDs[i] {
			return false
		}
	}
	if len(this.KeyColumnDirections) != len(that1.KeyColumnDirections) {
		return false
	}
	for i := range this.KeyColumnDirections {
		if this.KeyColumnDirections[i] != that1.KeyColumnDirections[i] {
			return false
		}
	}
	if len(this.KeySuffixColumnIDs) != len(that1.KeySuffixColumnIDs) {
		return false
	}
	for i := range this.KeySuffixColumnIDs {
		if this.KeySuffixColumnIDs[i] != that1.KeySuffixColumnIDs[i] {
			return false
		}
	}
	if !this.ShardedDescriptor.Equal(that1.ShardedDescriptor) {
		return false
	}
	if len(this.StoringColumnIDs) != len(that1.StoringColumnIDs) {
		return false
	}
	for i := range this.StoringColumnIDs {
		if this.StoringColumnIDs[i] != that1.StoringColumnIDs[i] {
			return false
		}
	}
	if len(this.CompositeColumnIDs) != len(that1.CompositeColumnIDs) {
		return false
	}
	for i := range this.CompositeColumnIDs {
		if this.CompositeColumnIDs[i] != that1.CompositeColumnIDs[i] {
			return false
		}
	}
	if this.Inverted != that1.Inverted {
		return false
	}
	if this.Concurrently != that1.Concurrently {
		return false
	}
	return true
}
func (this *SequenceDependency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SequenceDependency)
	if !ok {
		that2, ok := that.(SequenceDependency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.ColumnID != that1.ColumnID {
		return false
	}
	if this.SequenceID != that1.SequenceID {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *UniqueConstraint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UniqueConstraint)
	if !ok {
		that2, ok := that.(UniqueConstraint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConstraintType != that1.ConstraintType {
		return false
	}
	if this.ConstraintOrdinal != that1.ConstraintOrdinal {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.IndexID != that1.IndexID {
		return false
	}
	if len(this.ColumnIDs) != len(that1.ColumnIDs) {
		return false
	}
	for i := range this.ColumnIDs {
		if this.ColumnIDs[i] != that1.ColumnIDs[i] {
			return false
		}
	}
	return true
}
func (this *CheckConstraint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckConstraint)
	if !ok {
		that2, ok := that.(CheckConstraint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConstraintType != that1.ConstraintType {
		return false
	}
	if this.ConstraintOrdinal != that1.ConstraintOrdinal {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Expr != that1.Expr {
		return false
	}
	if len(this.ColumnIDs) != len(that1.ColumnIDs) {
		return false
	}
	for i := range this.ColumnIDs {
		if this.ColumnIDs[i] != that1.ColumnIDs[i] {
			return false
		}
	}
	if this.Validated != that1.Validated {
		return false
	}
	return true
}
func (this *Sequence) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Sequence)
	if !ok {
		that2, ok := that.(Sequence)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SequenceID != that1.SequenceID {
		return false
	}
	return true
}
func (this *DefaultExpression) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultExpression)
	if !ok {
		that2, ok := that.(DefaultExpression)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.ColumnID != that1.ColumnID {
		return false
	}
	if len(this.UsesSequenceIDs) != len(that1.UsesSequenceIDs) {
		return false
	}
	for i := range this.UsesSequenceIDs {
		if this.UsesSequenceIDs[i] != that1.UsesSequenceIDs[i] {
			return false
		}
	}
	if this.DefaultExpr != that1.DefaultExpr {
		return false
	}
	return true
}
func (this *View) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*View)
	if !ok {
		that2, ok := that.(View)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	return true
}
func (this *Table) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Table)
	if !ok {
		that2, ok := that.(Table)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	return true
}
func (this *OnUpdateExprTypeReference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OnUpdateExprTypeReference)
	if !ok {
		that2, ok := that.(OnUpdateExprTypeReference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.ColumnID != that1.ColumnID {
		return false
	}
	if this.TypeID != that1.TypeID {
		return false
	}
	return true
}
func (this *ComputedExprTypeReference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ComputedExprTypeReference)
	if !ok {
		that2, ok := that.(ComputedExprTypeReference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.ColumnID != that1.ColumnID {
		return false
	}
	if this.TypeID != that1.TypeID {
		return false
	}
	return true
}
func (this *DefaultExprTypeReference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DefaultExprTypeReference)
	if !ok {
		that2, ok := that.(DefaultExprTypeReference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.ColumnID != that1.ColumnID {
		return false
	}
	if this.TypeID != that1.TypeID {
		return false
	}
	return true
}
func (this *ColumnTypeReference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ColumnTypeReference)
	if !ok {
		that2, ok := that.(ColumnTypeReference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.ColumnID != that1.ColumnID {
		return false
	}
	if this.TypeID != that1.TypeID {
		return false
	}
	return true
}
func (this *CheckConstraintTypeReference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckConstraintTypeReference)
	if !ok {
		that2, ok := that.(CheckConstraintTypeReference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.ConstraintOrdinal != that1.ConstraintOrdinal {
		return false
	}
	if this.TypeID != that1.TypeID {
		return false
	}
	return true
}
func (this *ViewDependsOnType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViewDependsOnType)
	if !ok {
		that2, ok := that.(ViewDependsOnType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.TypeID != that1.TypeID {
		return false
	}
	return true
}
func (this *ForeignKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForeignKey)
	if !ok {
		that2, ok := that.(ForeignKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OriginID != that1.OriginID {
		return false
	}
	if len(this.OriginColumns) != len(that1.OriginColumns) {
		return false
	}
	for i := range this.OriginColumns {
		if this.OriginColumns[i] != that1.OriginColumns[i] {
			return false
		}
	}
	if this.ReferenceID != that1.ReferenceID {
		return false
	}
	if len(this.ReferenceColumns) != len(that1.ReferenceColumns) {
		return false
	}
	for i := range this.ReferenceColumns {
		if this.ReferenceColumns[i] != that1.ReferenceColumns[i] {
			return false
		}
	}
	if this.OnUpdate != that1.OnUpdate {
		return false
	}
	if this.OnDelete != that1.OnDelete {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ForeignKeyBackReference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForeignKeyBackReference)
	if !ok {
		that2, ok := that.(ForeignKeyBackReference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OriginID != that1.OriginID {
		return false
	}
	if len(this.OriginColumns) != len(that1.OriginColumns) {
		return false
	}
	for i := range this.OriginColumns {
		if this.OriginColumns[i] != that1.OriginColumns[i] {
			return false
		}
	}
	if this.ReferenceID != that1.ReferenceID {
		return false
	}
	if len(this.ReferenceColumns) != len(that1.ReferenceColumns) {
		return false
	}
	for i := range this.ReferenceColumns {
		if this.ReferenceColumns[i] != that1.ReferenceColumns[i] {
			return false
		}
	}
	if this.OnUpdate != that1.OnUpdate {
		return false
	}
	if this.OnDelete != that1.OnDelete {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *RelationDependedOnBy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RelationDependedOnBy)
	if !ok {
		that2, ok := that.(RelationDependedOnBy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.DependedOnBy != that1.DependedOnBy {
		return false
	}
	if this.ColumnID != that1.ColumnID {
		return false
	}
	return true
}
func (this *ListPartition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListPartition)
	if !ok {
		that2, ok := that.(ListPartition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Expr) != len(that1.Expr) {
		return false
	}
	for i := range this.Expr {
		if this.Expr[i] != that1.Expr[i] {
			return false
		}
	}
	return true
}
func (this *RangePartitions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RangePartitions)
	if !ok {
		that2, ok := that.(RangePartitions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.To) != len(that1.To) {
		return false
	}
	for i := range this.To {
		if this.To[i] != that1.To[i] {
			return false
		}
	}
	if len(this.From) != len(that1.From) {
		return false
	}
	for i := range this.From {
		if this.From[i] != that1.From[i] {
			return false
		}
	}
	return true
}
func (this *Partitioning) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Partitioning)
	if !ok {
		that2, ok := that.(Partitioning)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.IndexID != that1.IndexID {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if this.Fields[i] != that1.Fields[i] {
			return false
		}
	}
	if len(this.ListPartitions) != len(that1.ListPartitions) {
		return false
	}
	for i := range this.ListPartitions {
		if !this.ListPartitions[i].Equal(that1.ListPartitions[i]) {
			return false
		}
	}
	if len(this.RangePartitions) != len(that1.RangePartitions) {
		return false
	}
	for i := range this.RangePartitions {
		if !this.RangePartitions[i].Equal(that1.RangePartitions[i]) {
			return false
		}
	}
	return true
}
func (this *ColumnName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ColumnName)
	if !ok {
		that2, ok := that.(ColumnName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.ColumnID != that1.ColumnID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *IndexName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IndexName)
	if !ok {
		that2, ok := that.(IndexName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.IndexID != that1.IndexID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ConstraintName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConstraintName)
	if !ok {
		that2, ok := that.(ConstraintName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if this.ConstraintType != that1.ConstraintType {
		return false
	}
	if this.ConstraintOrdinal != that1.ConstraintOrdinal {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (m *ElementProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElementProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElementProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SequenceOwner != nil {
		{
			size, err := m.SequenceOwner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.CheckConstraintTypeReference != nil {
		{
			size, err := m.CheckConstraintTypeReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.SchemaEntry != nil {
		{
			size, err := m.SchemaEntry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.ColumnTypeReference != nil {
		{
			size, err := m.ColumnTypeReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.ViewDependsOnType != nil {
		{
			size, err := m.ViewDependsOnType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.ComputedExprTypeReference != nil {
		{
			size, err := m.ComputedExprTypeReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.OnUpdateTypeReference != nil {
		{
			size, err := m.OnUpdateTypeReference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.DefaultExprTypeRef != nil {
		{
			size, err := m.DefaultExprTypeRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.ConstraintName != nil {
		{
			size, err := m.ConstraintName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.IndexName != nil {
		{
			size, err := m.IndexName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.Locality != nil {
		{
			size, err := m.Locality.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.ColumnName != nil {
		{
			size, err := m.ColumnName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.UserPrivileges != nil {
		{
			size, err := m.UserPrivileges.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Namespace != nil {
		{
			size, err := m.Namespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Partitioning != nil {
		{
			size, err := m.Partitioning.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Database != nil {
		{
			size, err := m.Database.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Schema != nil {
		{
			size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.RelationDependedOnBy != nil {
		{
			size, err := m.RelationDependedOnBy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.InForeignKey != nil {
		{
			size, err := m.InForeignKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.OutForeignKey != nil {
		{
			size, err := m.OutForeignKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Table != nil {
		{
			size, err := m.Table.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.View != nil {
		{
			size, err := m.View.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.DefaultExpression != nil {
		{
			size, err := m.DefaultExpression.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Sequence != nil {
		{
			size, err := m.Sequence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CheckConstraint != nil {
		{
			size, err := m.CheckConstraint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.UniqueConstraint != nil {
		{
			size, err := m.UniqueConstraint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SequenceDependency != nil {
		{
			size, err := m.SequenceDependency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SecondaryIndex != nil {
		{
			size, err := m.SecondaryIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PrimaryIndex != nil {
		{
			size, err := m.PrimaryIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Column != nil {
		{
			size, err := m.Column.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Target) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Target) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Target) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Direction != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintScpb(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ElementProto.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintScpb(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Column) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Virtual {
		i--
		if m.Virtual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.SystemColumnKind != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.SystemColumnKind))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.PgAttributeNum != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.PgAttributeNum))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.ComputerExpr) > 0 {
		i -= len(m.ComputerExpr)
		copy(dAtA[i:], m.ComputerExpr)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.ComputerExpr)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.UsesSequenceIds) > 0 {
		dAtA36 := make([]byte, len(m.UsesSequenceIds)*10)
		var j35 int
		for _, num := range m.UsesSequenceIds {
			for num >= 1<<7 {
				dAtA36[j35] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j35++
			}
			dAtA36[j35] = uint8(num)
			j35++
		}
		i -= j35
		copy(dAtA[i:], dAtA36[:j35])
		i = encodeVarintScpb(dAtA, i, uint64(j35))
		i--
		dAtA[i] = 0x72
	}
	if len(m.GeneratedAsIdentitySequenceOption) > 0 {
		i -= len(m.GeneratedAsIdentitySequenceOption)
		copy(dAtA[i:], m.GeneratedAsIdentitySequenceOption)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.GeneratedAsIdentitySequenceOption)))
		i--
		dAtA[i] = 0x6a
	}
	if m.GeneratedAsIdentityType != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.GeneratedAsIdentityType))
		i--
		dAtA[i] = 0x60
	}
	if m.Inaccessible {
		i--
		if m.Inaccessible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Hidden {
		i--
		if m.Hidden {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.OnUpdateExpr) > 0 {
		i -= len(m.OnUpdateExpr)
		copy(dAtA[i:], m.OnUpdateExpr)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.OnUpdateExpr)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DefaultExpr) > 0 {
		i -= len(m.DefaultExpr)
		copy(dAtA[i:], m.DefaultExpr)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.DefaultExpr)))
		i--
		dAtA[i] = 0x42
	}
	if m.Nullable {
		i--
		if m.Nullable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.FamilyName) > 0 {
		i -= len(m.FamilyName)
		copy(dAtA[i:], m.FamilyName)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.FamilyName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.FamilyID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.FamilyID))
		i--
		dAtA[i] = 0x20
	}
	if m.ColumnID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ColumnID))
		i--
		dAtA[i] = 0x18
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrimaryIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimaryIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Concurrently {
		i--
		if m.Concurrently {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Inverted {
		i--
		if m.Inverted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.CompositeColumnIDs) > 0 {
		dAtA39 := make([]byte, len(m.CompositeColumnIDs)*10)
		var j38 int
		for _, num := range m.CompositeColumnIDs {
			for num >= 1<<7 {
				dAtA39[j38] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j38++
			}
			dAtA39[j38] = uint8(num)
			j38++
		}
		i -= j38
		copy(dAtA[i:], dAtA39[:j38])
		i = encodeVarintScpb(dAtA, i, uint64(j38))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.StoringColumnIDs) > 0 {
		dAtA41 := make([]byte, len(m.StoringColumnIDs)*10)
		var j40 int
		for _, num := range m.StoringColumnIDs {
			for num >= 1<<7 {
				dAtA41[j40] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j40++
			}
			dAtA41[j40] = uint8(num)
			j40++
		}
		i -= j40
		copy(dAtA[i:], dAtA41[:j40])
		i = encodeVarintScpb(dAtA, i, uint64(j40))
		i--
		dAtA[i] = 0x42
	}
	if m.ShardedDescriptor != nil {
		{
			size, err := m.ShardedDescriptor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.KeySuffixColumnIDs) > 0 {
		dAtA44 := make([]byte, len(m.KeySuffixColumnIDs)*10)
		var j43 int
		for _, num := range m.KeySuffixColumnIDs {
			for num >= 1<<7 {
				dAtA44[j43] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j43++
			}
			dAtA44[j43] = uint8(num)
			j43++
		}
		i -= j43
		copy(dAtA[i:], dAtA44[:j43])
		i = encodeVarintScpb(dAtA, i, uint64(j43))
		i--
		dAtA[i] = 0x32
	}
	if len(m.KeyColumnDirections) > 0 {
		dAtA46 := make([]byte, len(m.KeyColumnDirections)*10)
		var j45 int
		for _, num := range m.KeyColumnDirections {
			for num >= 1<<7 {
				dAtA46[j45] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j45++
			}
			dAtA46[j45] = uint8(num)
			j45++
		}
		i -= j45
		copy(dAtA[i:], dAtA46[:j45])
		i = encodeVarintScpb(dAtA, i, uint64(j45))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.KeyColumnIDs) > 0 {
		dAtA48 := make([]byte, len(m.KeyColumnIDs)*10)
		var j47 int
		for _, num := range m.KeyColumnIDs {
			for num >= 1<<7 {
				dAtA48[j47] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j47++
			}
			dAtA48[j47] = uint8(num)
			j47++
		}
		i -= j47
		copy(dAtA[i:], dAtA48[:j47])
		i = encodeVarintScpb(dAtA, i, uint64(j47))
		i--
		dAtA[i] = 0x22
	}
	if m.Unique {
		i--
		if m.Unique {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IndexID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.IndexID))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SecondaryIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecondaryIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecondaryIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Concurrently {
		i--
		if m.Concurrently {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Inverted {
		i--
		if m.Inverted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.CompositeColumnIDs) > 0 {
		dAtA50 := make([]byte, len(m.CompositeColumnIDs)*10)
		var j49 int
		for _, num := range m.CompositeColumnIDs {
			for num >= 1<<7 {
				dAtA50[j49] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j49++
			}
			dAtA50[j49] = uint8(num)
			j49++
		}
		i -= j49
		copy(dAtA[i:], dAtA50[:j49])
		i = encodeVarintScpb(dAtA, i, uint64(j49))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.StoringColumnIDs) > 0 {
		dAtA52 := make([]byte, len(m.StoringColumnIDs)*10)
		var j51 int
		for _, num := range m.StoringColumnIDs {
			for num >= 1<<7 {
				dAtA52[j51] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j51++
			}
			dAtA52[j51] = uint8(num)
			j51++
		}
		i -= j51
		copy(dAtA[i:], dAtA52[:j51])
		i = encodeVarintScpb(dAtA, i, uint64(j51))
		i--
		dAtA[i] = 0x42
	}
	if m.ShardedDescriptor != nil {
		{
			size, err := m.ShardedDescriptor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.KeySuffixColumnIDs) > 0 {
		dAtA55 := make([]byte, len(m.KeySuffixColumnIDs)*10)
		var j54 int
		for _, num := range m.KeySuffixColumnIDs {
			for num >= 1<<7 {
				dAtA55[j54] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j54++
			}
			dAtA55[j54] = uint8(num)
			j54++
		}
		i -= j54
		copy(dAtA[i:], dAtA55[:j54])
		i = encodeVarintScpb(dAtA, i, uint64(j54))
		i--
		dAtA[i] = 0x32
	}
	if len(m.KeyColumnDirections) > 0 {
		dAtA57 := make([]byte, len(m.KeyColumnDirections)*10)
		var j56 int
		for _, num := range m.KeyColumnDirections {
			for num >= 1<<7 {
				dAtA57[j56] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j56++
			}
			dAtA57[j56] = uint8(num)
			j56++
		}
		i -= j56
		copy(dAtA[i:], dAtA57[:j56])
		i = encodeVarintScpb(dAtA, i, uint64(j56))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.KeyColumnIDs) > 0 {
		dAtA59 := make([]byte, len(m.KeyColumnIDs)*10)
		var j58 int
		for _, num := range m.KeyColumnIDs {
			for num >= 1<<7 {
				dAtA59[j58] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j58++
			}
			dAtA59[j58] = uint8(num)
			j58++
		}
		i -= j58
		copy(dAtA[i:], dAtA59[:j58])
		i = encodeVarintScpb(dAtA, i, uint64(j58))
		i--
		dAtA[i] = 0x22
	}
	if m.Unique {
		i--
		if m.Unique {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IndexID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.IndexID))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SequenceDependency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SequenceDependency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SequenceDependency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.SequenceID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.SequenceID))
		i--
		dAtA[i] = 0x18
	}
	if m.ColumnID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ColumnID))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UniqueConstraint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniqueConstraint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniqueConstraint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ColumnIDs) > 0 {
		dAtA61 := make([]byte, len(m.ColumnIDs)*10)
		var j60 int
		for _, num := range m.ColumnIDs {
			for num >= 1<<7 {
				dAtA61[j60] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j60++
			}
			dAtA61[j60] = uint8(num)
			j60++
		}
		i -= j60
		copy(dAtA[i:], dAtA61[:j60])
		i = encodeVarintScpb(dAtA, i, uint64(j60))
		i--
		dAtA[i] = 0x2a
	}
	if m.IndexID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.IndexID))
		i--
		dAtA[i] = 0x20
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x18
	}
	if m.ConstraintOrdinal != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ConstraintOrdinal))
		i--
		dAtA[i] = 0x10
	}
	if m.ConstraintType != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ConstraintType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckConstraint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckConstraint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckConstraint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Validated {
		i--
		if m.Validated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.ColumnIDs) > 0 {
		dAtA63 := make([]byte, len(m.ColumnIDs)*10)
		var j62 int
		for _, num := range m.ColumnIDs {
			for num >= 1<<7 {
				dAtA63[j62] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j62++
			}
			dAtA63[j62] = uint8(num)
			j62++
		}
		i -= j62
		copy(dAtA[i:], dAtA63[:j62])
		i = encodeVarintScpb(dAtA, i, uint64(j62))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Expr) > 0 {
		i -= len(m.Expr)
		copy(dAtA[i:], m.Expr)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.Expr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x18
	}
	if m.ConstraintOrdinal != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ConstraintOrdinal))
		i--
		dAtA[i] = 0x10
	}
	if m.ConstraintType != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ConstraintType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Sequence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sequence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sequence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SequenceID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.SequenceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DefaultExpression) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultExpression) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultExpression) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefaultExpr) > 0 {
		i -= len(m.DefaultExpr)
		copy(dAtA[i:], m.DefaultExpr)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.DefaultExpr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UsesSequenceIDs) > 0 {
		dAtA65 := make([]byte, len(m.UsesSequenceIDs)*10)
		var j64 int
		for _, num := range m.UsesSequenceIDs {
			for num >= 1<<7 {
				dAtA65[j64] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j64++
			}
			dAtA65[j64] = uint8(num)
			j64++
		}
		i -= j64
		copy(dAtA[i:], dAtA65[:j64])
		i = encodeVarintScpb(dAtA, i, uint64(j64))
		i--
		dAtA[i] = 0x1a
	}
	if m.ColumnID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ColumnID))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *View) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *View) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *View) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Table) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Table) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Table) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OnUpdateExprTypeReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnUpdateExprTypeReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnUpdateExprTypeReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypeID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TypeID))
		i--
		dAtA[i] = 0x18
	}
	if m.ColumnID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ColumnID))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ComputedExprTypeReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputedExprTypeReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComputedExprTypeReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypeID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TypeID))
		i--
		dAtA[i] = 0x18
	}
	if m.ColumnID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ColumnID))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DefaultExprTypeReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultExprTypeReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultExprTypeReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypeID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TypeID))
		i--
		dAtA[i] = 0x18
	}
	if m.ColumnID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ColumnID))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ColumnTypeReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnTypeReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColumnTypeReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypeID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TypeID))
		i--
		dAtA[i] = 0x18
	}
	if m.ColumnID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ColumnID))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckConstraintTypeReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckConstraintTypeReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckConstraintTypeReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypeID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TypeID))
		i--
		dAtA[i] = 0x18
	}
	if m.ConstraintOrdinal != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ConstraintOrdinal))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ViewDependsOnType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewDependsOnType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewDependsOnType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypeID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TypeID))
		i--
		dAtA[i] = 0x18
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForeignKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForeignKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForeignKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x42
	}
	if m.OnDelete != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.OnDelete))
		i--
		dAtA[i] = 0x38
	}
	if m.OnUpdate != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.OnUpdate))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ReferenceColumns) > 0 {
		dAtA67 := make([]byte, len(m.ReferenceColumns)*10)
		var j66 int
		for _, num := range m.ReferenceColumns {
			for num >= 1<<7 {
				dAtA67[j66] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j66++
			}
			dAtA67[j66] = uint8(num)
			j66++
		}
		i -= j66
		copy(dAtA[i:], dAtA67[:j66])
		i = encodeVarintScpb(dAtA, i, uint64(j66))
		i--
		dAtA[i] = 0x2a
	}
	if m.ReferenceID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ReferenceID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OriginColumns) > 0 {
		dAtA69 := make([]byte, len(m.OriginColumns)*10)
		var j68 int
		for _, num := range m.OriginColumns {
			for num >= 1<<7 {
				dAtA69[j68] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j68++
			}
			dAtA69[j68] = uint8(num)
			j68++
		}
		i -= j68
		copy(dAtA[i:], dAtA69[:j68])
		i = encodeVarintScpb(dAtA, i, uint64(j68))
		i--
		dAtA[i] = 0x1a
	}
	if m.OriginID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.OriginID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForeignKeyBackReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForeignKeyBackReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForeignKeyBackReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x42
	}
	if m.OnDelete != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.OnDelete))
		i--
		dAtA[i] = 0x38
	}
	if m.OnUpdate != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.OnUpdate))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ReferenceColumns) > 0 {
		dAtA71 := make([]byte, len(m.ReferenceColumns)*10)
		var j70 int
		for _, num := range m.ReferenceColumns {
			for num >= 1<<7 {
				dAtA71[j70] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j70++
			}
			dAtA71[j70] = uint8(num)
			j70++
		}
		i -= j70
		copy(dAtA[i:], dAtA71[:j70])
		i = encodeVarintScpb(dAtA, i, uint64(j70))
		i--
		dAtA[i] = 0x2a
	}
	if m.ReferenceID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ReferenceID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OriginColumns) > 0 {
		dAtA73 := make([]byte, len(m.OriginColumns)*10)
		var j72 int
		for _, num := range m.OriginColumns {
			for num >= 1<<7 {
				dAtA73[j72] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j72++
			}
			dAtA73[j72] = uint8(num)
			j72++
		}
		i -= j72
		copy(dAtA[i:], dAtA73[:j72])
		i = encodeVarintScpb(dAtA, i, uint64(j72))
		i--
		dAtA[i] = 0x1a
	}
	if m.OriginID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.OriginID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SequenceOwnedBy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SequenceOwnedBy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SequenceOwnedBy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OwnerTableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.OwnerTableID))
		i--
		dAtA[i] = 0x10
	}
	if m.SequenceID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.SequenceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RelationDependedOnBy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationDependedOnBy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationDependedOnBy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ColumnID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ColumnID))
		i--
		dAtA[i] = 0x18
	}
	if m.DependedOnBy != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.DependedOnBy))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Type) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Type) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypeID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TypeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Schema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Schema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Schema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DependentObjects) > 0 {
		dAtA75 := make([]byte, len(m.DependentObjects)*10)
		var j74 int
		for _, num := range m.DependentObjects {
			for num >= 1<<7 {
				dAtA75[j74] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j74++
			}
			dAtA75[j74] = uint8(num)
			j74++
		}
		i -= j74
		copy(dAtA[i:], dAtA75[:j74])
		i = encodeVarintScpb(dAtA, i, uint64(j74))
		i--
		dAtA[i] = 0x1a
	}
	if m.SchemaID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.SchemaID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Database) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Database) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Database) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DependentObjects) > 0 {
		dAtA77 := make([]byte, len(m.DependentObjects)*10)
		var j76 int
		for _, num := range m.DependentObjects {
			for num >= 1<<7 {
				dAtA77[j76] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j76++
			}
			dAtA77[j76] = uint8(num)
			j76++
		}
		i -= j76
		copy(dAtA[i:], dAtA77[:j76])
		i = encodeVarintScpb(dAtA, i, uint64(j76))
		i--
		dAtA[i] = 0x1a
	}
	if m.DatabaseID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.DatabaseID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Authorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Authorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Authorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Statement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Statement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Statement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatementTag) > 0 {
		i -= len(m.StatementTag)
		copy(dAtA[i:], m.StatementTag)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.StatementTag)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RedactedStatement) > 0 {
		i -= len(m.RedactedStatement)
		copy(dAtA[i:], m.RedactedStatement)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.RedactedStatement)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Statement) > 0 {
		i -= len(m.Statement)
		copy(dAtA[i:], m.Statement)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.Statement)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TargetMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TargetMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StatementID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.StatementID))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceElementID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.SourceElementID))
		i--
		dAtA[i] = 0x10
	}
	if m.SubWorkID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.SubWorkID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListPartition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPartition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPartition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Expr) > 0 {
		for iNdEx := len(m.Expr) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Expr[iNdEx])
			copy(dAtA[i:], m.Expr[iNdEx])
			i = encodeVarintScpb(dAtA, i, uint64(len(m.Expr[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RangePartitions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangePartitions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangePartitions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		for iNdEx := len(m.From) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.From[iNdEx])
			copy(dAtA[i:], m.From[iNdEx])
			i = encodeVarintScpb(dAtA, i, uint64(len(m.From[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.To) > 0 {
		for iNdEx := len(m.To) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.To[iNdEx])
			copy(dAtA[i:], m.To[iNdEx])
			i = encodeVarintScpb(dAtA, i, uint64(len(m.To[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Partitioning) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Partitioning) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Partitioning) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RangePartitions) > 0 {
		for iNdEx := len(m.RangePartitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RangePartitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintScpb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ListPartitions) > 0 {
		for iNdEx := len(m.ListPartitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ListPartitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintScpb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintScpb(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.IndexID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.IndexID))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Namespace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Namespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Namespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.DescriptorID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.DescriptorID))
		i--
		dAtA[i] = 0x18
	}
	if m.SchemaID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.SchemaID))
		i--
		dAtA[i] = 0x10
	}
	if m.DatabaseID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.DatabaseID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Owner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Owner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Owner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.DescriptorID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.DescriptorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserPrivileges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPrivileges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPrivileges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Privileges != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.Privileges))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if m.DescriptorID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.DescriptorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Locality) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Locality) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Locality) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Locality != nil {
		{
			size, err := m.Locality.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DescriptorID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.DescriptorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ColumnName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColumnName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ColumnID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ColumnID))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IndexName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IndexID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.IndexID))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConstraintName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConstraintName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConstraintName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintScpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.ConstraintOrdinal != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ConstraintOrdinal))
		i--
		dAtA[i] = 0x18
	}
	if m.ConstraintType != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.ConstraintType))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DefaultPrivilege) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultPrivilege) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultPrivilege) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrivilegesPerObject) > 0 {
		keysForPrivilegesPerObject := make([]uint32, 0, len(m.PrivilegesPerObject))
		for k := range m.PrivilegesPerObject {
			keysForPrivilegesPerObject = append(keysForPrivilegesPerObject, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForPrivilegesPerObject)
		for iNdEx := len(keysForPrivilegesPerObject) - 1; iNdEx >= 0; iNdEx-- {
			v := m.PrivilegesPerObject[uint32(keysForPrivilegesPerObject[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintScpb(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintScpb(dAtA, i, uint64(keysForPrivilegesPerObject[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintScpb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Role != nil {
		{
			size := m.Role.Size()
			i -= size
			if _, err := m.Role.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DescriptorID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.DescriptorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DefaultPrivilege_ExplicitRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultPrivilege_ExplicitRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExplicitRole != nil {
		{
			size, err := m.ExplicitRole.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DefaultPrivilege_ForAllRoles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultPrivilege_ForAllRoles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForAllRoles != nil {
		{
			size, err := m.ForAllRoles.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DefaultPrivilege_DefaultObjectPrivilege) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultPrivilege_DefaultObjectPrivilege) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultPrivilege_DefaultObjectPrivilege) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Privileges) > 0 {
		for iNdEx := len(m.Privileges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Privileges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintScpb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DatabaseSchemaEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatabaseSchemaEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatabaseSchemaEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchemaID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.SchemaID))
		i--
		dAtA[i] = 0x10
	}
	if m.DatabaseID != 0 {
		i = encodeVarintScpb(dAtA, i, uint64(m.DatabaseID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintScpb(dAtA []byte, offset int, v uint64) int {
	offset -= sovScpb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ElementProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Column != nil {
		l = m.Column.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.PrimaryIndex != nil {
		l = m.PrimaryIndex.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.SecondaryIndex != nil {
		l = m.SecondaryIndex.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.SequenceDependency != nil {
		l = m.SequenceDependency.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.UniqueConstraint != nil {
		l = m.UniqueConstraint.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.CheckConstraint != nil {
		l = m.CheckConstraint.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.Sequence != nil {
		l = m.Sequence.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.DefaultExpression != nil {
		l = m.DefaultExpression.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.View != nil {
		l = m.View.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.Table != nil {
		l = m.Table.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.OutForeignKey != nil {
		l = m.OutForeignKey.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.InForeignKey != nil {
		l = m.InForeignKey.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.RelationDependedOnBy != nil {
		l = m.RelationDependedOnBy.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.Database != nil {
		l = m.Database.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.Partitioning != nil {
		l = m.Partitioning.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.Namespace != nil {
		l = m.Namespace.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.UserPrivileges != nil {
		l = m.UserPrivileges.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.ColumnName != nil {
		l = m.ColumnName.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.Locality != nil {
		l = m.Locality.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.IndexName != nil {
		l = m.IndexName.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.ConstraintName != nil {
		l = m.ConstraintName.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.DefaultExprTypeRef != nil {
		l = m.DefaultExprTypeRef.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.OnUpdateTypeReference != nil {
		l = m.OnUpdateTypeReference.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.ComputedExprTypeReference != nil {
		l = m.ComputedExprTypeReference.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.ViewDependsOnType != nil {
		l = m.ViewDependsOnType.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.ColumnTypeReference != nil {
		l = m.ColumnTypeReference.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.SchemaEntry != nil {
		l = m.SchemaEntry.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.CheckConstraintTypeReference != nil {
		l = m.CheckConstraintTypeReference.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	if m.SequenceOwner != nil {
		l = m.SequenceOwner.Size()
		n += 2 + l + sovScpb(uint64(l))
	}
	return n
}

func (m *Target) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ElementProto.Size()
	n += 1 + l + sovScpb(uint64(l))
	l = m.Metadata.Size()
	n += 1 + l + sovScpb(uint64(l))
	if m.Direction != 0 {
		n += 1 + sovScpb(uint64(m.Direction))
	}
	return n
}

func (m *Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.ColumnID != 0 {
		n += 1 + sovScpb(uint64(m.ColumnID))
	}
	if m.FamilyID != 0 {
		n += 1 + sovScpb(uint64(m.FamilyID))
	}
	l = len(m.FamilyName)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.Nullable {
		n += 2
	}
	l = len(m.DefaultExpr)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	l = len(m.OnUpdateExpr)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.Hidden {
		n += 2
	}
	if m.Inaccessible {
		n += 2
	}
	if m.GeneratedAsIdentityType != 0 {
		n += 1 + sovScpb(uint64(m.GeneratedAsIdentityType))
	}
	l = len(m.GeneratedAsIdentitySequenceOption)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	if len(m.UsesSequenceIds) > 0 {
		l = 0
		for _, e := range m.UsesSequenceIds {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	l = len(m.ComputerExpr)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.PgAttributeNum != 0 {
		n += 2 + sovScpb(uint64(m.PgAttributeNum))
	}
	if m.SystemColumnKind != 0 {
		n += 2 + sovScpb(uint64(m.SystemColumnKind))
	}
	if m.Virtual {
		n += 3
	}
	return n
}

func (m *PrimaryIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.IndexID != 0 {
		n += 1 + sovScpb(uint64(m.IndexID))
	}
	if m.Unique {
		n += 2
	}
	if len(m.KeyColumnIDs) > 0 {
		l = 0
		for _, e := range m.KeyColumnIDs {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	if len(m.KeyColumnDirections) > 0 {
		l = 0
		for _, e := range m.KeyColumnDirections {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	if len(m.KeySuffixColumnIDs) > 0 {
		l = 0
		for _, e := range m.KeySuffixColumnIDs {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	if m.ShardedDescriptor != nil {
		l = m.ShardedDescriptor.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if len(m.StoringColumnIDs) > 0 {
		l = 0
		for _, e := range m.StoringColumnIDs {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	if len(m.CompositeColumnIDs) > 0 {
		l = 0
		for _, e := range m.CompositeColumnIDs {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	if m.Inverted {
		n += 2
	}
	if m.Concurrently {
		n += 2
	}
	return n
}

func (m *SecondaryIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.IndexID != 0 {
		n += 1 + sovScpb(uint64(m.IndexID))
	}
	if m.Unique {
		n += 2
	}
	if len(m.KeyColumnIDs) > 0 {
		l = 0
		for _, e := range m.KeyColumnIDs {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	if len(m.KeyColumnDirections) > 0 {
		l = 0
		for _, e := range m.KeyColumnDirections {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	if len(m.KeySuffixColumnIDs) > 0 {
		l = 0
		for _, e := range m.KeySuffixColumnIDs {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	if m.ShardedDescriptor != nil {
		l = m.ShardedDescriptor.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	if len(m.StoringColumnIDs) > 0 {
		l = 0
		for _, e := range m.StoringColumnIDs {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	if len(m.CompositeColumnIDs) > 0 {
		l = 0
		for _, e := range m.CompositeColumnIDs {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	if m.Inverted {
		n += 2
	}
	if m.Concurrently {
		n += 2
	}
	return n
}

func (m *SequenceDependency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.ColumnID != 0 {
		n += 1 + sovScpb(uint64(m.ColumnID))
	}
	if m.SequenceID != 0 {
		n += 1 + sovScpb(uint64(m.SequenceID))
	}
	if m.Type != 0 {
		n += 1 + sovScpb(uint64(m.Type))
	}
	return n
}

func (m *UniqueConstraint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConstraintType != 0 {
		n += 1 + sovScpb(uint64(m.ConstraintType))
	}
	if m.ConstraintOrdinal != 0 {
		n += 1 + sovScpb(uint64(m.ConstraintOrdinal))
	}
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.IndexID != 0 {
		n += 1 + sovScpb(uint64(m.IndexID))
	}
	if len(m.ColumnIDs) > 0 {
		l = 0
		for _, e := range m.ColumnIDs {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	return n
}

func (m *CheckConstraint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConstraintType != 0 {
		n += 1 + sovScpb(uint64(m.ConstraintType))
	}
	if m.ConstraintOrdinal != 0 {
		n += 1 + sovScpb(uint64(m.ConstraintOrdinal))
	}
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	l = len(m.Expr)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	if len(m.ColumnIDs) > 0 {
		l = 0
		for _, e := range m.ColumnIDs {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	if m.Validated {
		n += 2
	}
	return n
}

func (m *Sequence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SequenceID != 0 {
		n += 1 + sovScpb(uint64(m.SequenceID))
	}
	return n
}

func (m *DefaultExpression) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.ColumnID != 0 {
		n += 1 + sovScpb(uint64(m.ColumnID))
	}
	if len(m.UsesSequenceIDs) > 0 {
		l = 0
		for _, e := range m.UsesSequenceIDs {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	l = len(m.DefaultExpr)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	return n
}

func (m *View) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	return n
}

func (m *Table) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	return n
}

func (m *OnUpdateExprTypeReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.ColumnID != 0 {
		n += 1 + sovScpb(uint64(m.ColumnID))
	}
	if m.TypeID != 0 {
		n += 1 + sovScpb(uint64(m.TypeID))
	}
	return n
}

func (m *ComputedExprTypeReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.ColumnID != 0 {
		n += 1 + sovScpb(uint64(m.ColumnID))
	}
	if m.TypeID != 0 {
		n += 1 + sovScpb(uint64(m.TypeID))
	}
	return n
}

func (m *DefaultExprTypeReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.ColumnID != 0 {
		n += 1 + sovScpb(uint64(m.ColumnID))
	}
	if m.TypeID != 0 {
		n += 1 + sovScpb(uint64(m.TypeID))
	}
	return n
}

func (m *ColumnTypeReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.ColumnID != 0 {
		n += 1 + sovScpb(uint64(m.ColumnID))
	}
	if m.TypeID != 0 {
		n += 1 + sovScpb(uint64(m.TypeID))
	}
	return n
}

func (m *CheckConstraintTypeReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.ConstraintOrdinal != 0 {
		n += 1 + sovScpb(uint64(m.ConstraintOrdinal))
	}
	if m.TypeID != 0 {
		n += 1 + sovScpb(uint64(m.TypeID))
	}
	return n
}

func (m *ViewDependsOnType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.TypeID != 0 {
		n += 1 + sovScpb(uint64(m.TypeID))
	}
	return n
}

func (m *ForeignKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OriginID != 0 {
		n += 1 + sovScpb(uint64(m.OriginID))
	}
	if len(m.OriginColumns) > 0 {
		l = 0
		for _, e := range m.OriginColumns {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	if m.ReferenceID != 0 {
		n += 1 + sovScpb(uint64(m.ReferenceID))
	}
	if len(m.ReferenceColumns) > 0 {
		l = 0
		for _, e := range m.ReferenceColumns {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	if m.OnUpdate != 0 {
		n += 1 + sovScpb(uint64(m.OnUpdate))
	}
	if m.OnDelete != 0 {
		n += 1 + sovScpb(uint64(m.OnDelete))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	return n
}

func (m *ForeignKeyBackReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OriginID != 0 {
		n += 1 + sovScpb(uint64(m.OriginID))
	}
	if len(m.OriginColumns) > 0 {
		l = 0
		for _, e := range m.OriginColumns {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	if m.ReferenceID != 0 {
		n += 1 + sovScpb(uint64(m.ReferenceID))
	}
	if len(m.ReferenceColumns) > 0 {
		l = 0
		for _, e := range m.ReferenceColumns {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	if m.OnUpdate != 0 {
		n += 1 + sovScpb(uint64(m.OnUpdate))
	}
	if m.OnDelete != 0 {
		n += 1 + sovScpb(uint64(m.OnDelete))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	return n
}

func (m *SequenceOwnedBy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SequenceID != 0 {
		n += 1 + sovScpb(uint64(m.SequenceID))
	}
	if m.OwnerTableID != 0 {
		n += 1 + sovScpb(uint64(m.OwnerTableID))
	}
	return n
}

func (m *RelationDependedOnBy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.DependedOnBy != 0 {
		n += 1 + sovScpb(uint64(m.DependedOnBy))
	}
	if m.ColumnID != 0 {
		n += 1 + sovScpb(uint64(m.ColumnID))
	}
	return n
}

func (m *Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeID != 0 {
		n += 1 + sovScpb(uint64(m.TypeID))
	}
	return n
}

func (m *Schema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchemaID != 0 {
		n += 1 + sovScpb(uint64(m.SchemaID))
	}
	if len(m.DependentObjects) > 0 {
		l = 0
		for _, e := range m.DependentObjects {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	return n
}

func (m *Database) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DatabaseID != 0 {
		n += 1 + sovScpb(uint64(m.DatabaseID))
	}
	if len(m.DependentObjects) > 0 {
		l = 0
		for _, e := range m.DependentObjects {
			l += sovScpb(uint64(e))
		}
		n += 1 + sovScpb(uint64(l)) + l
	}
	return n
}

func (m *Authorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	return n
}

func (m *Statement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Statement)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	l = len(m.RedactedStatement)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	l = len(m.StatementTag)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	return n
}

func (m *TargetMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubWorkID != 0 {
		n += 1 + sovScpb(uint64(m.SubWorkID))
	}
	if m.SourceElementID != 0 {
		n += 1 + sovScpb(uint64(m.SourceElementID))
	}
	if m.StatementID != 0 {
		n += 1 + sovScpb(uint64(m.StatementID))
	}
	return n
}

func (m *ListPartition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	if len(m.Expr) > 0 {
		for _, s := range m.Expr {
			l = len(s)
			n += 1 + l + sovScpb(uint64(l))
		}
	}
	return n
}

func (m *RangePartitions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovScpb(uint64(l))
		}
	}
	if len(m.From) > 0 {
		for _, s := range m.From {
			l = len(s)
			n += 1 + l + sovScpb(uint64(l))
		}
	}
	return n
}

func (m *Partitioning) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.IndexID != 0 {
		n += 1 + sovScpb(uint64(m.IndexID))
	}
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovScpb(uint64(l))
		}
	}
	if len(m.ListPartitions) > 0 {
		for _, e := range m.ListPartitions {
			l = e.Size()
			n += 1 + l + sovScpb(uint64(l))
		}
	}
	if len(m.RangePartitions) > 0 {
		for _, e := range m.RangePartitions {
			l = e.Size()
			n += 1 + l + sovScpb(uint64(l))
		}
	}
	return n
}

func (m *Namespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DatabaseID != 0 {
		n += 1 + sovScpb(uint64(m.DatabaseID))
	}
	if m.SchemaID != 0 {
		n += 1 + sovScpb(uint64(m.SchemaID))
	}
	if m.DescriptorID != 0 {
		n += 1 + sovScpb(uint64(m.DescriptorID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	return n
}

func (m *Owner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DescriptorID != 0 {
		n += 1 + sovScpb(uint64(m.DescriptorID))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	return n
}

func (m *UserPrivileges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DescriptorID != 0 {
		n += 1 + sovScpb(uint64(m.DescriptorID))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	if m.Privileges != 0 {
		n += 1 + sovScpb(uint64(m.Privileges))
	}
	return n
}

func (m *Locality) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DescriptorID != 0 {
		n += 1 + sovScpb(uint64(m.DescriptorID))
	}
	if m.Locality != nil {
		l = m.Locality.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	return n
}

func (m *ColumnName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.ColumnID != 0 {
		n += 1 + sovScpb(uint64(m.ColumnID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	return n
}

func (m *IndexName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.IndexID != 0 {
		n += 1 + sovScpb(uint64(m.IndexID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	return n
}

func (m *ConstraintName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovScpb(uint64(m.TableID))
	}
	if m.ConstraintType != 0 {
		n += 1 + sovScpb(uint64(m.ConstraintType))
	}
	if m.ConstraintOrdinal != 0 {
		n += 1 + sovScpb(uint64(m.ConstraintOrdinal))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScpb(uint64(l))
	}
	return n
}

func (m *DefaultPrivilege) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DescriptorID != 0 {
		n += 1 + sovScpb(uint64(m.DescriptorID))
	}
	if m.Role != nil {
		n += m.Role.Size()
	}
	if len(m.PrivilegesPerObject) > 0 {
		for k, v := range m.PrivilegesPerObject {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovScpb(uint64(l))
			}
			mapEntrySize := 1 + sovScpb(uint64(k)) + l
			n += mapEntrySize + 1 + sovScpb(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DefaultPrivilege_ExplicitRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExplicitRole != nil {
		l = m.ExplicitRole.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	return n
}
func (m *DefaultPrivilege_ForAllRoles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForAllRoles != nil {
		l = m.ForAllRoles.Size()
		n += 1 + l + sovScpb(uint64(l))
	}
	return n
}
func (m *DefaultPrivilege_DefaultObjectPrivilege) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Privileges) > 0 {
		for _, e := range m.Privileges {
			l = e.Size()
			n += 1 + l + sovScpb(uint64(l))
		}
	}
	return n
}

func (m *DatabaseSchemaEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DatabaseID != 0 {
		n += 1 + sovScpb(uint64(m.DatabaseID))
	}
	if m.SchemaID != 0 {
		n += 1 + sovScpb(uint64(m.SchemaID))
	}
	return n
}

func sovScpb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozScpb(x uint64) (n int) {
	return sovScpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ElementProto) GetValue() interface{} {
	if this.Column != nil {
		return this.Column
	}
	if this.PrimaryIndex != nil {
		return this.PrimaryIndex
	}
	if this.SecondaryIndex != nil {
		return this.SecondaryIndex
	}
	if this.SequenceDependency != nil {
		return this.SequenceDependency
	}
	if this.UniqueConstraint != nil {
		return this.UniqueConstraint
	}
	if this.CheckConstraint != nil {
		return this.CheckConstraint
	}
	if this.Sequence != nil {
		return this.Sequence
	}
	if this.DefaultExpression != nil {
		return this.DefaultExpression
	}
	if this.View != nil {
		return this.View
	}
	if this.Table != nil {
		return this.Table
	}
	if this.OutForeignKey != nil {
		return this.OutForeignKey
	}
	if this.InForeignKey != nil {
		return this.InForeignKey
	}
	if this.RelationDependedOnBy != nil {
		return this.RelationDependedOnBy
	}
	if this.Type != nil {
		return this.Type
	}
	if this.Schema != nil {
		return this.Schema
	}
	if this.Database != nil {
		return this.Database
	}
	if this.Partitioning != nil {
		return this.Partitioning
	}
	if this.Namespace != nil {
		return this.Namespace
	}
	if this.Owner != nil {
		return this.Owner
	}
	if this.UserPrivileges != nil {
		return this.UserPrivileges
	}
	if this.ColumnName != nil {
		return this.ColumnName
	}
	if this.Locality != nil {
		return this.Locality
	}
	if this.IndexName != nil {
		return this.IndexName
	}
	if this.ConstraintName != nil {
		return this.ConstraintName
	}
	if this.DefaultExprTypeRef != nil {
		return this.DefaultExprTypeRef
	}
	if this.OnUpdateTypeReference != nil {
		return this.OnUpdateTypeReference
	}
	if this.ComputedExprTypeReference != nil {
		return this.ComputedExprTypeReference
	}
	if this.ViewDependsOnType != nil {
		return this.ViewDependsOnType
	}
	if this.ColumnTypeReference != nil {
		return this.ColumnTypeReference
	}
	if this.SchemaEntry != nil {
		return this.SchemaEntry
	}
	if this.CheckConstraintTypeReference != nil {
		return this.CheckConstraintTypeReference
	}
	if this.SequenceOwner != nil {
		return this.SequenceOwner
	}
	return nil
}

func (this *ElementProto) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *Column:
		this.Column = vt
	case *PrimaryIndex:
		this.PrimaryIndex = vt
	case *SecondaryIndex:
		this.SecondaryIndex = vt
	case *SequenceDependency:
		this.SequenceDependency = vt
	case *UniqueConstraint:
		this.UniqueConstraint = vt
	case *CheckConstraint:
		this.CheckConstraint = vt
	case *Sequence:
		this.Sequence = vt
	case *DefaultExpression:
		this.DefaultExpression = vt
	case *View:
		this.View = vt
	case *Table:
		this.Table = vt
	case *ForeignKey:
		this.OutForeignKey = vt
	case *ForeignKeyBackReference:
		this.InForeignKey = vt
	case *RelationDependedOnBy:
		this.RelationDependedOnBy = vt
	case *Type:
		this.Type = vt
	case *Schema:
		this.Schema = vt
	case *Database:
		this.Database = vt
	case *Partitioning:
		this.Partitioning = vt
	case *Namespace:
		this.Namespace = vt
	case *Owner:
		this.Owner = vt
	case *UserPrivileges:
		this.UserPrivileges = vt
	case *ColumnName:
		this.ColumnName = vt
	case *Locality:
		this.Locality = vt
	case *IndexName:
		this.IndexName = vt
	case *ConstraintName:
		this.ConstraintName = vt
	case *DefaultExprTypeReference:
		this.DefaultExprTypeRef = vt
	case *OnUpdateExprTypeReference:
		this.OnUpdateTypeReference = vt
	case *ComputedExprTypeReference:
		this.ComputedExprTypeReference = vt
	case *ViewDependsOnType:
		this.ViewDependsOnType = vt
	case *ColumnTypeReference:
		this.ColumnTypeReference = vt
	case *DatabaseSchemaEntry:
		this.SchemaEntry = vt
	case *CheckConstraintTypeReference:
		this.CheckConstraintTypeReference = vt
	case *SequenceOwnedBy:
		this.SequenceOwner = vt
	default:
		return false
	}
	return true
}
func (m *ElementProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElementProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElementProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Column == nil {
				m.Column = &Column{}
			}
			if err := m.Column.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrimaryIndex == nil {
				m.PrimaryIndex = &PrimaryIndex{}
			}
			if err := m.PrimaryIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecondaryIndex == nil {
				m.SecondaryIndex = &SecondaryIndex{}
			}
			if err := m.SecondaryIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceDependency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SequenceDependency == nil {
				m.SequenceDependency = &SequenceDependency{}
			}
			if err := m.SequenceDependency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueConstraint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UniqueConstraint == nil {
				m.UniqueConstraint = &UniqueConstraint{}
			}
			if err := m.UniqueConstraint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckConstraint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckConstraint == nil {
				m.CheckConstraint = &CheckConstraint{}
			}
			if err := m.CheckConstraint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sequence == nil {
				m.Sequence = &Sequence{}
			}
			if err := m.Sequence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultExpression", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultExpression == nil {
				m.DefaultExpression = &DefaultExpression{}
			}
			if err := m.DefaultExpression.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.View == nil {
				m.View = &View{}
			}
			if err := m.View.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Table == nil {
				m.Table = &Table{}
			}
			if err := m.Table.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutForeignKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutForeignKey == nil {
				m.OutForeignKey = &ForeignKey{}
			}
			if err := m.OutForeignKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InForeignKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InForeignKey == nil {
				m.InForeignKey = &ForeignKeyBackReference{}
			}
			if err := m.InForeignKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationDependedOnBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelationDependedOnBy == nil {
				m.RelationDependedOnBy = &RelationDependedOnBy{}
			}
			if err := m.RelationDependedOnBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &Type{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schema == nil {
				m.Schema = &Schema{}
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Database == nil {
				m.Database = &Database{}
			}
			if err := m.Database.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitioning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Partitioning == nil {
				m.Partitioning = &Partitioning{}
			}
			if err := m.Partitioning.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Namespace == nil {
				m.Namespace = &Namespace{}
			}
			if err := m.Namespace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Owner{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPrivileges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserPrivileges == nil {
				m.UserPrivileges = &UserPrivileges{}
			}
			if err := m.UserPrivileges.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ColumnName == nil {
				m.ColumnName = &ColumnName{}
			}
			if err := m.ColumnName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locality", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Locality == nil {
				m.Locality = &Locality{}
			}
			if err := m.Locality.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndexName == nil {
				m.IndexName = &IndexName{}
			}
			if err := m.IndexName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstraintName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConstraintName == nil {
				m.ConstraintName = &ConstraintName{}
			}
			if err := m.ConstraintName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultExprTypeRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultExprTypeRef == nil {
				m.DefaultExprTypeRef = &DefaultExprTypeReference{}
			}
			if err := m.DefaultExprTypeRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnUpdateTypeReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OnUpdateTypeReference == nil {
				m.OnUpdateTypeReference = &OnUpdateExprTypeReference{}
			}
			if err := m.OnUpdateTypeReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputedExprTypeReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ComputedExprTypeReference == nil {
				m.ComputedExprTypeReference = &ComputedExprTypeReference{}
			}
			if err := m.ComputedExprTypeReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewDependsOnType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewDependsOnType == nil {
				m.ViewDependsOnType = &ViewDependsOnType{}
			}
			if err := m.ViewDependsOnType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnTypeReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ColumnTypeReference == nil {
				m.ColumnTypeReference = &ColumnTypeReference{}
			}
			if err := m.ColumnTypeReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchemaEntry == nil {
				m.SchemaEntry = &DatabaseSchemaEntry{}
			}
			if err := m.SchemaEntry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckConstraintTypeReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckConstraintTypeReference == nil {
				m.CheckConstraintTypeReference = &CheckConstraintTypeReference{}
			}
			if err := m.CheckConstraintTypeReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceOwner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SequenceOwner == nil {
				m.SequenceOwner = &SequenceOwnedBy{}
			}
			if err := m.SequenceOwner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Target) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Target: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Target: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementProto", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ElementProto.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= Target_Direction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnID", wireType)
			}
			m.ColumnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyID", wireType)
			}
			m.FamilyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FamilyID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.FamilyID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FamilyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &types.T{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nullable = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultExpr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnUpdateExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnUpdateExpr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hidden", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hidden = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inaccessible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inaccessible = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeneratedAsIdentityType", wireType)
			}
			m.GeneratedAsIdentityType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GeneratedAsIdentityType |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.GeneratedAsIdentityType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeneratedAsIdentitySequenceOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GeneratedAsIdentitySequenceOption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UsesSequenceIds = append(m.UsesSequenceIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UsesSequenceIds) == 0 {
					m.UsesSequenceIds = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UsesSequenceIds = append(m.UsesSequenceIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UsesSequenceIds", wireType)
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputerExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComputerExpr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PgAttributeNum", wireType)
			}
			m.PgAttributeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PgAttributeNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemColumnKind", wireType)
			}
			m.SystemColumnKind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SystemColumnKind |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.SystemColumnKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Virtual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Virtual = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimaryIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimaryIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimaryIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexID", wireType)
			}
			m.IndexID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unique", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unique = bool(v != 0)
		case 4:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyColumnIDs = append(m.KeyColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.KeyColumnIDs) == 0 {
					m.KeyColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyColumnIDs = append(m.KeyColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyColumnIDs", wireType)
			}
		case 5:
			if wireType == 0 {
				var v PrimaryIndex_Direction
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PrimaryIndex_Direction(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyColumnDirections = append(m.KeyColumnDirections, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.KeyColumnDirections) == 0 {
					m.KeyColumnDirections = make([]PrimaryIndex_Direction, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PrimaryIndex_Direction
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PrimaryIndex_Direction(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyColumnDirections = append(m.KeyColumnDirections, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyColumnDirections", wireType)
			}
		case 6:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeySuffixColumnIDs = append(m.KeySuffixColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.KeySuffixColumnIDs) == 0 {
					m.KeySuffixColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeySuffixColumnIDs = append(m.KeySuffixColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySuffixColumnIDs", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardedDescriptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShardedDescriptor == nil {
				m.ShardedDescriptor = &descpb.ShardedDescriptor{}
			}
			if err := m.ShardedDescriptor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StoringColumnIDs = append(m.StoringColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StoringColumnIDs) == 0 {
					m.StoringColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StoringColumnIDs = append(m.StoringColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StoringColumnIDs", wireType)
			}
		case 9:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CompositeColumnIDs = append(m.CompositeColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CompositeColumnIDs) == 0 {
					m.CompositeColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CompositeColumnIDs = append(m.CompositeColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CompositeColumnIDs", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inverted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inverted = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Concurrently", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Concurrently = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecondaryIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecondaryIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecondaryIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexID", wireType)
			}
			m.IndexID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unique", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unique = bool(v != 0)
		case 4:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyColumnIDs = append(m.KeyColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.KeyColumnIDs) == 0 {
					m.KeyColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyColumnIDs = append(m.KeyColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyColumnIDs", wireType)
			}
		case 5:
			if wireType == 0 {
				var v SecondaryIndex_Direction
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= SecondaryIndex_Direction(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyColumnDirections = append(m.KeyColumnDirections, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.KeyColumnDirections) == 0 {
					m.KeyColumnDirections = make([]SecondaryIndex_Direction, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v SecondaryIndex_Direction
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= SecondaryIndex_Direction(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyColumnDirections = append(m.KeyColumnDirections, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyColumnDirections", wireType)
			}
		case 6:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeySuffixColumnIDs = append(m.KeySuffixColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.KeySuffixColumnIDs) == 0 {
					m.KeySuffixColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeySuffixColumnIDs = append(m.KeySuffixColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySuffixColumnIDs", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardedDescriptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShardedDescriptor == nil {
				m.ShardedDescriptor = &descpb.ShardedDescriptor{}
			}
			if err := m.ShardedDescriptor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StoringColumnIDs = append(m.StoringColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StoringColumnIDs) == 0 {
					m.StoringColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StoringColumnIDs = append(m.StoringColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StoringColumnIDs", wireType)
			}
		case 9:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CompositeColumnIDs = append(m.CompositeColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CompositeColumnIDs) == 0 {
					m.CompositeColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CompositeColumnIDs = append(m.CompositeColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CompositeColumnIDs", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inverted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inverted = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Concurrently", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Concurrently = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SequenceDependency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SequenceDependency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SequenceDependency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnID", wireType)
			}
			m.ColumnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceID", wireType)
			}
			m.SequenceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SequenceDependency_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniqueConstraint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniqueConstraint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniqueConstraint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstraintType", wireType)
			}
			m.ConstraintType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConstraintType |= ConstraintType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstraintOrdinal", wireType)
			}
			m.ConstraintOrdinal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConstraintOrdinal |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexID", wireType)
			}
			m.IndexID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnIDs = append(m.ColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ColumnIDs) == 0 {
					m.ColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnIDs = append(m.ColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckConstraint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckConstraint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckConstraint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstraintType", wireType)
			}
			m.ConstraintType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConstraintType |= ConstraintType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstraintOrdinal", wireType)
			}
			m.ConstraintOrdinal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConstraintOrdinal |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnIDs = append(m.ColumnIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ColumnIDs) == 0 {
					m.ColumnIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnIDs = append(m.ColumnIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIDs", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Validated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sequence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sequence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sequence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceID", wireType)
			}
			m.SequenceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultExpression) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultExpression: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultExpression: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnID", wireType)
			}
			m.ColumnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UsesSequenceIDs = append(m.UsesSequenceIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UsesSequenceIDs) == 0 {
					m.UsesSequenceIDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UsesSequenceIDs = append(m.UsesSequenceIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UsesSequenceIDs", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultExpr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *View) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: View: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: View: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Table) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Table: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Table: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnUpdateExprTypeReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnUpdateExprTypeReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnUpdateExprTypeReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnID", wireType)
			}
			m.ColumnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputedExprTypeReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputedExprTypeReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputedExprTypeReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnID", wireType)
			}
			m.ColumnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultExprTypeReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultExprTypeReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultExprTypeReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnID", wireType)
			}
			m.ColumnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnTypeReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnTypeReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnTypeReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnID", wireType)
			}
			m.ColumnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckConstraintTypeReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckConstraintTypeReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckConstraintTypeReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstraintOrdinal", wireType)
			}
			m.ConstraintOrdinal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConstraintOrdinal |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewDependsOnType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewDependsOnType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewDependsOnType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForeignKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForeignKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForeignKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginID", wireType)
			}
			m.OriginID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OriginColumns = append(m.OriginColumns, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OriginColumns) == 0 {
					m.OriginColumns = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OriginColumns = append(m.OriginColumns, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginColumns", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceID", wireType)
			}
			m.ReferenceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReferenceID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReferenceColumns = append(m.ReferenceColumns, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReferenceColumns) == 0 {
					m.ReferenceColumns = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReferenceColumns = append(m.ReferenceColumns, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceColumns", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnUpdate", wireType)
			}
			m.OnUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnUpdate |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ForeignKeyReference_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnDelete", wireType)
			}
			m.OnDelete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnDelete |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ForeignKeyReference_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForeignKeyBackReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForeignKeyBackReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForeignKeyBackReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginID", wireType)
			}
			m.OriginID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OriginColumns = append(m.OriginColumns, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OriginColumns) == 0 {
					m.OriginColumns = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OriginColumns = append(m.OriginColumns, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginColumns", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceID", wireType)
			}
			m.ReferenceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReferenceID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReferenceColumns = append(m.ReferenceColumns, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReferenceColumns) == 0 {
					m.ReferenceColumns = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReferenceColumns = append(m.ReferenceColumns, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceColumns", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnUpdate", wireType)
			}
			m.OnUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnUpdate |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ForeignKeyReference_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnDelete", wireType)
			}
			m.OnDelete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnDelete |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ForeignKeyReference_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SequenceOwnedBy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SequenceOwnedBy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SequenceOwnedBy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceID", wireType)
			}
			m.SequenceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerTableID", wireType)
			}
			m.OwnerTableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerTableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationDependedOnBy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationDependedOnBy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationDependedOnBy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DependedOnBy", wireType)
			}
			m.DependedOnBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DependedOnBy |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnID", wireType)
			}
			m.ColumnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Schema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Schema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Schema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaID", wireType)
			}
			m.SchemaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DependentObjects = append(m.DependentObjects, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DependentObjects) == 0 {
					m.DependentObjects = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DependentObjects = append(m.DependentObjects, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DependentObjects", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Database) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Database: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Database: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseID", wireType)
			}
			m.DatabaseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DatabaseID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DependentObjects = append(m.DependentObjects, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DependentObjects) == 0 {
					m.DependentObjects = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DependentObjects = append(m.DependentObjects, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DependentObjects", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Authorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Authorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Authorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Statement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Statement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Statement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedactedStatement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedactedStatement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatementTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatementTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubWorkID", wireType)
			}
			m.SubWorkID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubWorkID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceElementID", wireType)
			}
			m.SourceElementID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceElementID |= SourceElementID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatementID", wireType)
			}
			m.StatementID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatementID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPartition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPartition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPartition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expr = append(m.Expr, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangePartitions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangePartitions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangePartitions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = append(m.To, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Partitioning) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Partitioning: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Partitioning: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexID", wireType)
			}
			m.IndexID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListPartitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListPartitions = append(m.ListPartitions, &ListPartition{})
			if err := m.ListPartitions[len(m.ListPartitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangePartitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RangePartitions = append(m.RangePartitions, &RangePartitions{})
			if err := m.RangePartitions[len(m.RangePartitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Namespace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Namespace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Namespace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseID", wireType)
			}
			m.DatabaseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DatabaseID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaID", wireType)
			}
			m.SchemaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorID", wireType)
			}
			m.DescriptorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescriptorID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Owner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Owner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Owner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorID", wireType)
			}
			m.DescriptorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescriptorID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPrivileges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPrivileges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPrivileges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorID", wireType)
			}
			m.DescriptorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescriptorID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			m.Privileges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Privileges |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Locality) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Locality: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Locality: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorID", wireType)
			}
			m.DescriptorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescriptorID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locality", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Locality == nil {
				m.Locality = &github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.TableDescriptor_LocalityConfig{}
			}
			if err := m.Locality.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnID", wireType)
			}
			m.ColumnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ColumnID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexID", wireType)
			}
			m.IndexID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConstraintName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConstraintName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConstraintName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstraintType", wireType)
			}
			m.ConstraintType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConstraintType |= ConstraintType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstraintOrdinal", wireType)
			}
			m.ConstraintOrdinal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConstraintOrdinal |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultPrivilege) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultPrivilege: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultPrivilege: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorID", wireType)
			}
			m.DescriptorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescriptorID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplicitRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &descpb.DefaultPrivilegesForRole_ExplicitRole{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Role = &DefaultPrivilege_ExplicitRole{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForAllRoles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &descpb.DefaultPrivilegesForRole_ForAllRolesPseudoRole{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Role = &DefaultPrivilege_ForAllRoles{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivilegesPerObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivilegesPerObject == nil {
				m.PrivilegesPerObject = make(map[uint32]*DefaultPrivilege_DefaultObjectPrivilege)
			}
			var mapkey uint32
			var mapvalue *DefaultPrivilege_DefaultObjectPrivilege
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthScpb
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthScpb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DefaultPrivilege_DefaultObjectPrivilege{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipScpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthScpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PrivilegesPerObject[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultPrivilege_DefaultObjectPrivilege) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultObjectPrivilege: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultObjectPrivilege: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Privileges = append(m.Privileges, &UserPrivileges{})
			if err := m.Privileges[len(m.Privileges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatabaseSchemaEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatabaseSchemaEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatabaseSchemaEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseID", wireType)
			}
			m.DatabaseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DatabaseID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaID", wireType)
			}
			m.SchemaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthScpb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupScpb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthScpb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthScpb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScpb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupScpb = fmt.Errorf("proto: unexpected end of group")
)
