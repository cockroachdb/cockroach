// Copyright 2020 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.sql.schemachanger.scpb;
option go_package = "github.com/cockroachdb/cockroach/pkg/sql/schemachanger/scpb";

import "sql/catalog/catenumpb/index.proto";
import "sql/catalog/catpb/catalog.proto";
import "sql/sem/semenumpb/constraint.proto";
import "sql/catalog/catpb/function.proto";
import "sql/types/types.proto";
import "gogoproto/gogo.proto";
import "geo/geoindex/config.proto";

option (gogoproto.equal_all) = true;

// ElementProto is the union type of all _elements_, which are the foundation
// of how we model schema changes in the declarative schema changer.
//
// A core design principle is that each element owns its back-references, that
// is to say, it is responsible for updating any back-references in the
// descriptors that it references as part of its lifecycle, i.e. going from
// ABSENT to PUBLIC or vice-versa. As a corollary, back-references are not
// modelled as elements at all, they exist purely as a side-effect. In an ideal
// world, they would be modelled as elements just like everything else, however
// we currently don't have 1:1 relationships between forward and back-references
// in all cases: we do for foreign keys for example, but we don't for type
// references (back-references are modelled as a set in the type descriptor).
//
// Regardless, this principle does have the inherent virtue of keeping the
// element model relatively simple, if at the expense of pushing the complexity
// down to the execution layer in scmutationexec. This trade-off is acceptable
// though: the back-reference update code is quite self-contained and the
// added complexity consists in making these operations work on a best-effort
// basis, i.e. with not many assumptions about whether something is dropped or
// not, etc.
//
// A less strong principle is that each element should remain immutable
// throughout its lifecycle. In practice we sometimes deviate from this for
// elements which have only just had targets defined for them and thus haven't
// yet undergone any status changes. In any case, that kind of hackery is best
// kept at a minimum.
message ElementProto {
  oneof element_one_of {
    // Top-level elements.
    // A.k.a descriptor-elements.
    // These elements own a corresponding descriptor in the catalog.
    Database database = 1;
    Schema schema = 2;
    View view = 3;
    Sequence sequence = 4;
    Table table = 5;
    EnumType enum_type = 6;
    AliasType alias_type = 7;
    CompositeType composite_type = 8;
    Function function = 9;

    // Relation elements.
    ColumnFamily column_family = 20 [(gogoproto.moretags) = "parent:\"Table\""];
    Column column = 21 [(gogoproto.moretags) = "parent:\"Table, View\""];
    PrimaryIndex primary_index = 22 [(gogoproto.moretags) = "parent:\"Table, View\""];
    SecondaryIndex secondary_index = 23 [(gogoproto.moretags) = "parent:\"Table, View\""];
    TemporaryIndex temporary_index = 24 [(gogoproto.moretags) = "parent:\"Table, View\""];
    UniqueWithoutIndexConstraint unique_without_index_constraint = 25 [(gogoproto.moretags) = "parent:\"Table\""];
    UniqueWithoutIndexConstraintUnvalidated unique_without_index_constraint_unvalidated = 171 [(gogoproto.moretags) = "parent:\"Table\""];
    CheckConstraint check_constraint = 26 [(gogoproto.moretags) = "parent:\"Table\""];
    CheckConstraintUnvalidated check_constraint_unvalidated = 170 [(gogoproto.moretags) = "parent:\"Table\""];
    ForeignKeyConstraint foreign_key_constraint = 27 [(gogoproto.moretags) = "parent:\"Table\""];
    ForeignKeyConstraintUnvalidated foreign_key_constraint_unvalidated = 172 [(gogoproto.moretags) = "parent:\"Table\""];
    TableComment table_comment = 28 [(gogoproto.moretags) = "parent:\"Table, View, Sequence\""];
    RowLevelTTL row_level_ttl = 29 [(gogoproto.customname) = "RowLevelTTL", (gogoproto.moretags) = "parent:\"Table\""];
    TableZoneConfig table_zone_config = 121 [(gogoproto.moretags) = "parent:\"Table, View\""];
    IndexZoneConfig index_zone_config = 122 [(gogoproto.moretags) = "parent:\"Index\""];
    TableData table_data = 131 [(gogoproto.customname) = "TableData", (gogoproto.moretags) = "parent:\"Table, View, Sequence\""];
    TablePartitioning table_partitioning = 132 [(gogoproto.customname) = "TablePartitioning", (gogoproto.moretags) = "parent:\"Table\""];
    TableSchemaLocked table_schema_locked = 133 [(gogoproto.customname) = "TableSchemaLocked", (gogoproto.moretags) = "parent:\"Table\""];

    // Multi-region elements.
    TableLocalityGlobal table_locality_global = 110 [(gogoproto.moretags) = "parent:\"Table\""];
    TableLocalityPrimaryRegion table_locality_primary_region = 111 [(gogoproto.moretags) = "parent:\"Table\""];
    TableLocalitySecondaryRegion table_locality_secondary_region = 112 [(gogoproto.moretags) = "parent:\"Table\""];
    TableLocalityRegionalByRow table_locality_regional_by_row = 113 [(gogoproto.moretags) = "parent:\"Table\""];

    // Column elements.
    ColumnName column_name = 30 [(gogoproto.moretags) = "parent:\"Column\""];
    ColumnType column_type = 31 [(gogoproto.moretags) = "parent:\"Column\""];
    ColumnDefaultExpression column_default_expression = 32 [(gogoproto.moretags) = "parent:\"Column\""];
    ColumnOnUpdateExpression column_on_update_expression = 33 [(gogoproto.moretags) = "parent:\"Column\""];
    SequenceOwner sequence_owner = 34 [(gogoproto.moretags) = "parent:\"Column\""];
    ColumnComment column_comment = 35 [(gogoproto.moretags) = "parent:\"Column\""];
    ColumnNotNull column_not_null = 36 [(gogoproto.moretags) = "parent:\"Column\""];

    // Sequence elements.
    SequenceOption sequence_option = 37 [(gogoproto.moretags) = "parent:\"Sequence\""];


    // Index elements.
    IndexName index_name = 40 [(gogoproto.moretags) = "parent:\"PrimaryIndex, SecondaryIndex\""];
    IndexPartitioning index_partitioning = 41 [(gogoproto.moretags) = "parent:\"PrimaryIndex, SecondaryIndex\""];
    SecondaryIndexPartial secondary_index_partial = 42 [(gogoproto.moretags) = "parent:\"SecondaryIndex\""];
    IndexComment index_comment = 43 [(gogoproto.moretags) = "parent:\"PrimaryIndex, SecondaryIndex\""];
    IndexColumn index_column = 44 [(gogoproto.moretags) = "parent:\"PrimaryIndex, SecondaryIndex, TemporaryIndex, Column\""];
    IndexData index_data = 45 [(gogoproto.customname) = "IndexData", (gogoproto.moretags) = "parent:\"PrimaryIndex, SecondaryIndex, TemporaryIndex\""];

    // Constraint elements.
    ConstraintWithoutIndexName constraint_without_index_name = 51 [(gogoproto.moretags) = "parent:\"UniqueWithoutIndexConstraint, CheckConstraint, ForeignKeyConstraint\""];
    ConstraintComment constraint_comment = 52 [(gogoproto.moretags) = "parent:\"PrimaryIndex, SecondaryIndex, UniqueWithoutIndexConstraint, CheckConstraint, ForeignKeyConstraint\""];

    // Common elements.
    Namespace namespace = 60 [(gogoproto.moretags) = "parent:\"Table, View, Sequence, Database, Schema, AliasType, EnumType\""];
    Owner owner = 61 [(gogoproto.moretags) = "parent:\"Table, View, Sequence, Database, Schema, AliasType, EnumType\""];
    UserPrivileges user_privileges = 62 [(gogoproto.moretags) = "parent:\"Table, View, Sequence, Database, Schema, AliasType, EnumType\""];

    // Database elements.
    DatabaseRegionConfig database_region_config = 80 [(gogoproto.moretags) = "parent:\"Database\""];
    DatabaseRoleSetting database_role_setting = 81 [(gogoproto.moretags) = "parent:\"Database\""];
    DatabaseComment database_comment = 82 [(gogoproto.moretags) = "parent:\"Database\""];
    DatabaseData database_data = 83 [(gogoproto.customname) = "DatabaseData", (gogoproto.moretags) = "parent:\"Database\""];

    // Schema elements.
    SchemaParent schema_parent = 90 [(gogoproto.moretags) = "parent:\"Schema\""];
    SchemaComment schema_comment = 91 [(gogoproto.moretags) = "parent:\"Schema\""];


    // SchemaChild elements.
    SchemaChild schema_child = 100 [(gogoproto.moretags) = "parent:\"AliasType, EnumType, Table, View, Sequence\""];

    // Enum type elements.
    EnumTypeValue enum_type_value = 120 [(gogoproto.moretags) = "parent:\"EnumType\""];

    // Composite type elements.
    CompositeTypeAttrType composite_type_attr_type = 140 [(gogoproto.moretags) = "parent:\"CompositeType\""];
    CompositeTypeAttrName composite_type_attr_name = 141 [(gogoproto.moretags) = "parent:\"CompositeType\""];

    // Function elements.
    FunctionName function_name = 160 [(gogoproto.moretags) = "parent:\"Function\""];
    FunctionVolatility function_volatility = 161 [(gogoproto.moretags) = "parent:\"Function\""];
    FunctionLeakProof function_leak_proof = 162 [(gogoproto.moretags) = "parent:\"Function\""];
    FunctionNullInputBehavior function_null_input_behavior = 163 [(gogoproto.moretags) = "parent:\"Function\""];
    FunctionBody function_body = 164 [(gogoproto.moretags) = "parent:\"Function\""];
    FunctionParamDefaultExpression function_param_default_expression = 165 [(gogoproto.moretags) = "parent:\"Function\""];

    // Next element group start id: 180
  }
}

// TypeT is a wrapper for a types.T which contains its user-defined type ID
// closure, explicitly keeping track of the IDs of all the type descriptors
// which will have a back-reference to the owner of the TypeT.
// For example, a wrapped type.Int will have an empty type ID closure, but
// a wrapped user-defined enum type will have the IDs of the enum type and
// its array alias type in the closure.
message TypeT {
  sql.sem.types.T type = 1;
  repeated uint32 closed_type_ids = 2 [(gogoproto.customname) = "ClosedTypeIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
}

// Expression is a wrapper for a column or check constraint expression, which,
// much like the TypeT wrapper, tracks its dependent descriptor IDs. Here these
// include also sequence descriptor IDs.
message Expression {
  string expr = 1 [(gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/catalog/catpb.Expression"];
  repeated uint32 uses_type_ids = 2 [(gogoproto.customname) = "UsesTypeIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  repeated uint32 uses_sequence_ids = 3 [(gogoproto.customname) = "UsesSequenceIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];

  // ReferencedColumnIDs stores the IDs of the columns referenced by the expression.
  repeated uint32 referenced_column_ids = 4 [(gogoproto.customname) = "ReferencedColumnIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];

  repeated uint32 uses_function_ids = 5 [(gogoproto.customname) = "UsesFunctionIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
}

message Column {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 column_id = 2 [(gogoproto.customname) = "ColumnID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  bool is_hidden = 3;
  bool is_inaccessible = 4;
  uint32 generated_as_identity_type = 5 [(gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/catalog/catpb.GeneratedAsIdentityType"];
  string generated_as_identity_sequence_option = 6;
  uint32 pg_attribute_num = 7 [(gogoproto.customname) = "PgAttributeNum", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.PGAttributeNum"];
  bool is_system_column = 8;
}

// ColumnType needs to be an element distinct from Column although they have a
// 1:1 relationship because their lifecycle is not the same.
// Column transitions through the two-version-invariant status path:
//   PUBLIC -> WRITE_ONLY -> DELETE_ONLY -> ABSENT
// regardless of whether only the column is dropped (meaning ABSENT is reached
// post-commit) or whether the whole table is dropped. We accommodate the
// latter case by having ColumnType reach ABSENT in the pre-commit phase
// independently of its sister column element. This is important, because this
// clears back-references in referenced type descriptors for columns which
// have user-defined types, or reference user-defined types in their compute
// expression.
message ColumnType {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 family_id = 2 [(gogoproto.customname) = "FamilyID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.FamilyID"];
  uint32 column_id = 3 [(gogoproto.customname) = "ColumnID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  TypeT embedded_type_t = 4 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // Deprecated
  // We changed element modelling for NOT NULL constraint in V23_1 and thus
  // deprecated `is_nullable`. The new way is to handle NOT NULL constraint
  // through a newly introduced `ColumnNotNull` element. This change is
  // necessary to support adding/dropping NOT NULL constraint on an existing
  // column.
  bool is_nullable = 5 [deprecated = true];
  Expression compute_expr = 6;
  bool is_virtual = 7;
  reserved 8, 9, 10;
  // ElementCreationMetadata stores information about when this element is created.
  // It can be used in a similar way to version gates to ensure compatibility
  // in mixed version state.
  ElementCreationMetadata element_creation_metadata= 11;
}

message ColumnFamily {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 family_id = 2 [(gogoproto.customname) = "FamilyID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.FamilyID"];
  string name = 3;
}

// Index is a wrapper for index definition data that gets embedded in both
// PrimaryIndex and SecondaryIndex. These two are not so different, but need
// to be distinguished by type (instead of, say, via a boolean flag in the
// element) to make for sane dependency rules.
message Index {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 index_id = 2 [(gogoproto.customname) = "IndexID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];

  bool is_unique = 10;
  bool is_inverted = 11;
  cockroach.sql.catalog.catpb.ShardedDescriptor sharding = 12;

  // IsCreatedExplicitly specifies whether this index was created explicitly
  // (i.e. via 'CREATE INDEX' statement) and not implicitly (i.e. created for
  // unique constraint).
  bool is_created_explicitly = 13;
  // ConstraintID is only set for primary keys and unique secondary indexes. It
  // can be used to uniquely identify a constraint.
  uint32 constraint_id = 14 [(gogoproto.customname) = "ConstraintID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ConstraintID"];

  // Spec fields.
  // These fields only make sense if the element is for ABSENT -> PUBLIC.
  //
  // TODO(postamar): try to get rid of these altogether
  //  Perhaps move these to the target metadata instead?
  bool is_concurrently = 20;
  uint32 source_index_id = 21 [(gogoproto.customname) = "SourceIndexID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];
  uint32 temporary_index_id = 22 [(gogoproto.customname) = "TemporaryIndexID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];

  cockroach.geo.geoindex.Config geo_config = 24 [(gogoproto.nullable) = true];

  // IsNotVisible specifies whether this index is not visible.
  // NOTE: THIS FIELD IS DEPRECATED in favor of invisibility.
  bool is_not_visible = 23 [deprecated = true];

  // Invisibility specifies index invisibility to the optimizer.
  double invisibility = 25;

  reserved 3, 4, 5, 6, 7;
}

message PrimaryIndex {
  Index embedded_index = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

message SecondaryIndex {
  Index embedded_index = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  Expression embedded_expr = 3 [(gogoproto.nullable) = true];
}

message TemporaryIndex {
  Index embedded_index = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  bool is_using_secondary_encoding = 2;
}

message SecondaryIndexPartial {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 index_id = 2 [(gogoproto.customname) = "IndexID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];
  Expression embedded_expr = 3 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  reserved 10;
}

// SchemaParent models the schema to parent database relationship.
// Every schema has a parent, so there is a 1:1 relationship between
// the Schema and the SchemaParent relationship. This is modeled as a separate
// element because this one owns the updating of the corresponding
// back-reference in the parent database descriptor as part of its lifecycle.
message SchemaParent {
  uint32 schema_id = 1 [(gogoproto.customname) = "SchemaID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 parent_database_id = 2 [(gogoproto.customname) = "ParentDatabaseID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
}

// SchemaChild is like SchemaParent but for objects.
// This is a bit useless since schemas don't maintain a set of back-references
// to their children. Still, it exists as a convenient join relation.
message SchemaChild {
  uint32 child_object_id = 1 [(gogoproto.customname) = "ChildObjectID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 schema_id = 2 [(gogoproto.customname) = "SchemaID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
}

message Sequence {
  uint32 sequence_id = 1 [(gogoproto.customname) = "SequenceID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  int64 restart_with = 2;
  bool use_restart_with = 3;
  bool is_temporary = 10;
}

message SequenceOption {
  uint32 sequence_id = 1 [(gogoproto.customname) = "SequenceID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  string key = 2;
  string value = 3;
}


message SequenceOwner {
  uint32 sequence_id = 1 [(gogoproto.customname) = "SequenceID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 table_id = 2 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 column_id = 3 [(gogoproto.customname) = "ColumnID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
}

message ColumnDefaultExpression {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 column_id = 2 [(gogoproto.customname) = "ColumnID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  Expression embedded_expr = 3 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

message ColumnOnUpdateExpression {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 column_id = 2 [(gogoproto.customname) = "ColumnID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  Expression embedded_expr = 3 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

message View {
  uint32 view_id = 1 [(gogoproto.customname) = "ViewID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  repeated uint32 uses_type_ids = 2 [(gogoproto.customname) = "UsesTypeIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  repeated uint32 uses_relation_ids = 3 [(gogoproto.customname) = "UsesRelationIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];

  // a reference from this view to another relation, tracked down to index/column level.
  message Reference {
    option (gogoproto.equal) = true;
    uint32 to_id = 1 [
      (gogoproto.customname) = "ToID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
    // If applicable, the ID of `ToID` relation's index that is referenced by this view.
    uint32 index_id = 2 [
      (gogoproto.customname) = "IndexID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];
    // The IDs of `ToID` relation's columns that are referenced by this view.
    repeated uint32 column_ids = 3 [(gogoproto.customname) = "ColumnIDs",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  }
  // all forward reference from this view -- it gives more details of those references than just
  // referenced relation ids (which is stored in `uses_relation_ids`).
  repeated Reference forward_references = 4 [(gogoproto.customname) = "ForwardReferences"];

  bool is_temporary = 10;
  bool is_materialized = 11;
}

message Table {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];

  bool is_temporary = 10;
}

message UniqueWithoutIndexConstraint {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 constraint_id = 2 [(gogoproto.customname) = "ConstraintID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ConstraintID"];
  repeated uint32 column_ids = 3 [(gogoproto.customname) = "ColumnIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  // Predicate, if non-nil, means a partial uniqueness constraint.
  Expression predicate = 4 [(gogoproto.customname) = "Predicate"];
  // IndexIDForValidation is the index id to hint to the unique_without_index
  // constraint validation SQL query about which index to validate against.
  // It is used exclusively by sql.validateUniqueConstraint.
  uint32 index_id_for_validation = 5 [(gogoproto.customname) = "IndexIDForValidation", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];
}

message UniqueWithoutIndexConstraintUnvalidated {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 constraint_id = 2 [(gogoproto.customname) = "ConstraintID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ConstraintID"];
  repeated uint32 column_ids = 3 [(gogoproto.customname) = "ColumnIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  // Predicate, if non-nil, means a partial uniqueness constraint.
  Expression predicate = 4 [(gogoproto.customname) = "Predicate"];
}

message CheckConstraint {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 constraint_id = 2 [(gogoproto.customname) = "ConstraintID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ConstraintID"];
  repeated uint32 column_ids = 3 [(gogoproto.customname) = "ColumnIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  Expression embedded_expr = 4 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // FromHashShardedColumn indicates whether this check constraint comes from a hash sharded column.
  bool from_hash_sharded_column = 5;
  // IndexIDForValidation is the index id to hint to the check constraint validation SQL query about which index
  // to check against. It is used exclusively by sql.validateCheckExpr.
  uint32 index_id_for_validation = 6 [(gogoproto.customname) = "IndexIDForValidation", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];
}

message CheckConstraintUnvalidated {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 constraint_id = 2 [(gogoproto.customname) = "ConstraintID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ConstraintID"];
  repeated uint32 column_ids = 3 [(gogoproto.customname) = "ColumnIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  Expression embedded_expr = 4 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

message ForeignKeyConstraint {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 constraint_id = 2 [(gogoproto.customname) = "ConstraintID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ConstraintID"];
  repeated uint32 column_ids = 3 [(gogoproto.customname) = "ColumnIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  uint32 referenced_table_id = 4 [(gogoproto.customname) = "ReferencedTableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  repeated uint32 referenced_column_ids = 5 [(gogoproto.customname) = "ReferencedColumnIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  cockroach.sql.sem.semenumpb.ForeignKeyAction on_update_action = 6 [(gogoproto.customname) = "OnUpdateAction"];
  cockroach.sql.sem.semenumpb.ForeignKeyAction on_delete_action = 7 [(gogoproto.customname) = "OnDeleteAction"];
  cockroach.sql.sem.semenumpb.Match composite_key_match_method = 8 [(gogoproto.customname) = "CompositeKeyMatchMethod"];
  // IndexIDForValidation is the index id to hint to the foreign key constraint validation SQL query about which index
  // to validate against. It is used exclusively by sql.validateFKExpr.
  uint32 index_id_for_validation = 9 [(gogoproto.customname) = "IndexIDForValidation", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];
}

message ForeignKeyConstraintUnvalidated {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 constraint_id = 2 [(gogoproto.customname) = "ConstraintID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ConstraintID"];
  repeated uint32 column_ids = 3 [(gogoproto.customname) = "ColumnIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  uint32 referenced_table_id = 4 [(gogoproto.customname) = "ReferencedTableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  repeated uint32 referenced_column_ids = 5 [(gogoproto.customname) = "ReferencedColumnIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  cockroach.sql.sem.semenumpb.ForeignKeyAction on_update_action = 6 [(gogoproto.customname) = "OnUpdateAction"];
  cockroach.sql.sem.semenumpb.ForeignKeyAction on_delete_action = 7 [(gogoproto.customname) = "OnDeleteAction"];
  cockroach.sql.sem.semenumpb.Match composite_key_match_method = 8 [(gogoproto.customname) = "CompositeKeyMatchMethod"];
}

message EnumType {
  uint32 type_id = 1 [(gogoproto.customname) = "TypeID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 array_type_id = 2 [(gogoproto.customname) = "ArrayTypeID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  bool is_multi_region = 3;
}

message AliasType {
  uint32 type_id = 1 [(gogoproto.customname) = "TypeID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  TypeT embedded_type_t = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

message CompositeType {
  uint32 type_id = 1 [(gogoproto.customname) = "TypeID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 array_type_id = 2 [(gogoproto.customname) = "ArrayTypeID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
}

message Schema {
  uint32 schema_id = 1 [(gogoproto.customname) = "SchemaID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];

  bool is_temporary = 10;
  bool is_public = 11;
  bool is_virtual = 12;
}

message Database {
  uint32 database_id = 1 [(gogoproto.customname) = "DatabaseID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
}

message Namespace {
  uint32 database_id = 1 [(gogoproto.customname) = "DatabaseID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 schema_id = 2 [(gogoproto.customname) = "SchemaID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 descriptor_id = 3 [(gogoproto.customname) = "DescriptorID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  string name = 4;
}

message Owner {
  uint32 descriptor_id = 1 [(gogoproto.customname) = "DescriptorID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  string owner = 2;
}

message UserPrivileges {
  uint32 descriptor_id = 1 [(gogoproto.customname) = "DescriptorID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  string user_name = 2;
  uint64 privileges = 3;
  uint64 with_grant_option = 4;
}

message TableLocalityGlobal {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
}

message TableLocalityPrimaryRegion {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
}

message TableLocalitySecondaryRegion {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 region_enum_type_id = 2 [(gogoproto.customname) = "RegionEnumTypeID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  string region_name = 3 [(gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/catalog/catpb.RegionName"];
}

message TableLocalityRegionalByRow {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  string as = 2;
}

message IndexPartitioning {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 index_id = 2 [(gogoproto.customname) = "IndexID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];
  cockroach.sql.catalog.catpb.PartitioningDescriptor partitioning = 3 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

message RowLevelTTL {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  cockroach.sql.catalog.catpb.RowLevelTTL row_level_ttl = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

message ColumnName {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 column_id = 2 [(gogoproto.customname) = "ColumnID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  string name = 3;
}

message IndexName {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 index_id = 2 [(gogoproto.customname) = "IndexID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];
  string name = 3;
}

message ConstraintWithoutIndexName {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 constraint_id = 2 [(gogoproto.customname) = "ConstraintID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ConstraintID"];
  string name = 4;
}

message TableComment {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  string comment = 2;
}

message DatabaseComment {
  uint32 database_id = 1 [(gogoproto.customname) = "DatabaseID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  string comment = 2;
}

message SchemaComment {
  uint32 schema_id = 1 [(gogoproto.customname) = "SchemaID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  string comment = 2;
}

message IndexComment {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 index_id = 2 [(gogoproto.customname) = "IndexID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];
  string comment = 3;
}

message ColumnComment {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 column_id = 2 [(gogoproto.customname) = "ColumnID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  string comment = 3;
  uint32 pg_attribute_num = 4 [(gogoproto.customname) = "PgAttributeNum", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.PGAttributeNum"];
}

message ColumnNotNull {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 column_id = 2 [(gogoproto.customname) = "ColumnID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  // IndexIDForValidation is the index id to hint to the check constraint validation SQL query about which index
  // to check against the not-null-ness of the column. It is used exclusively by sql.validateCheckExpr.
  uint32 index_id_for_validation = 3 [(gogoproto.customname) = "IndexIDForValidation", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];
}

message ConstraintComment {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 constraint_id = 2 [(gogoproto.customname) = "ConstraintID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ConstraintID"];
  string comment = 3;
}

message DatabaseRegionConfig {
  uint32 database_id = 1 [(gogoproto.customname) = "DatabaseID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 region_enum_type_id = 2 [(gogoproto.customname) = "RegionEnumTypeID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
}

message DatabaseRoleSetting {
  uint32 database_id = 1 [(gogoproto.customname) = "DatabaseID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  string role_name = 2;
}

// IndexColumn models column membership in an index.
message IndexColumn {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 index_id = 2 [(gogoproto.customname) = "IndexID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];
  uint32 column_id = 3  [(gogoproto.customname) = "ColumnID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];

  // OrdinalInKind is the slice index of this column in the relevant slice
  // as indicated by the IndexColumn's Kind.
  uint32 ordinal_in_kind = 4;
  enum Kind {
    KEY = 0;
    KEY_SUFFIX = 1;
    STORED = 2;
  }
  Kind kind = 5;

  // Direction is only populated for KEY columns.
  sql.catalog.catpb.IndexColumn.Direction direction = 6;

  // Indicates if this column is implicitly included within the index for
  // partitioning.
  bool implicit = 7;

  // InvertedKind determines if this column is inverted and how the information
  // is stored.
  uint32 inverted_kind =  8 [(gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/catalog/catpb.InvertedIndexColumnKind"];
}

message EnumTypeValue {
  uint32 type_id = 1 [(gogoproto.customname) = "TypeID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  bytes physical_representation = 2;
  string logical_representation = 3;
}

message CompositeTypeAttrName {
  uint32 composite_type_id = 1 [(gogoproto.customname) = "CompositeTypeID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  string name = 2;
}

message CompositeTypeAttrType {
  uint32 composite_type_id = 1 [(gogoproto.customname) = "CompositeTypeID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  TypeT embedded_type_t = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

message TableZoneConfig {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
}

message IndexZoneConfig {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 index_id = 2 [(gogoproto.customname) = "IndexID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];
  string partition_name = 3;
}

// DatabaseData models what needs to be GCed when a database is dropped.
message DatabaseData {
  uint32 database_id = 1 [(gogoproto.customname) = "DatabaseID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
}

// TableData models what needs to be GCed when a table is dropped.
message TableData {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 database_id = 2 [(gogoproto.customname) = "DatabaseID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
}

// IndexData models what needs to be GCed when an index is dropped.
message IndexData {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  uint32 index_id = 2 [(gogoproto.customname) = "IndexID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];
}

message TablePartitioning {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
}

// TableSchemaLocked models storage parameter `schema_locked` of a table.
message TableSchemaLocked {
  uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
}

message Function {
  message Parameter {
    string name = 1;
    cockroach.sql.catalog.catpb.FunctionParamClass class = 2 [(gogoproto.nullable) = false];
    TypeT type = 3 [(gogoproto.nullable) = false];
  }

  uint32 function_id = 1 [(gogoproto.customname) = "FunctionID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  repeated Parameter params = 2 [(gogoproto.nullable) = false];

  bool return_set = 3;
  TypeT return_type = 4 [(gogoproto.nullable) = false];
}

message FunctionName {
  uint32 function_id = 1 [(gogoproto.customname) = "FunctionID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  string name = 2;
}

message FunctionVolatility {
  uint32 function_id = 1 [(gogoproto.customname) = "FunctionID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  cockroach.sql.catalog.catpb.FunctionVolatility volatility = 2 [(gogoproto.nullable) = false];
}

message FunctionLeakProof {
  uint32 function_id = 1 [(gogoproto.customname) = "FunctionID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  bool leak_proof = 2;
}

message FunctionNullInputBehavior {
  uint32 function_id = 1 [(gogoproto.customname) = "FunctionID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  cockroach.sql.catalog.catpb.FunctionNullInputBehavior null_input_behavior = 11 [(gogoproto.nullable) = false];
}

message FunctionBody {
  message TableReference {
    uint32 table_id = 1 [(gogoproto.customname) = "TableID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
    repeated uint32 column_ids = 2 [(gogoproto.customname) = "ColumnIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
    uint32 index_id = 3 [(gogoproto.customname) = "IndexID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];
  }

  message ViewReference {
    uint32 view_id = 1 [(gogoproto.customname) = "ViewID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
    repeated uint32 column_ids = 2 [(gogoproto.customname) = "ColumnIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  }

  uint32 function_id = 1 [(gogoproto.customname) = "FunctionID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  string body = 2;
  cockroach.sql.catalog.catpb.FunctionLanguage lang = 3 [(gogoproto.nullable) = false];

  repeated TableReference uses_tables = 4 [(gogoproto.nullable) = false];
  repeated ViewReference uses_views = 5 [(gogoproto.nullable) = false];
  repeated uint32 uses_sequence_ids = 6 [(gogoproto.customname) = "UsesSequenceIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  repeated uint32 uses_type_ids = 7 [(gogoproto.customname) = "UsesTypeIDs", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
}

message FunctionParamDefaultExpression {
  uint32 function_id = 1 [(gogoproto.customname) = "FunctionID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  // This is the 0-indexed ordinal of the function parameter in function
  // signatures. With this we'd be able to tell which parameter this expression
  // belongs to.
  uint32 ordinal = 2;
  Expression embedded_expr = 3 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

message ElementCreationMetadata {
  bool in_23_1_or_later = 1;
}
