// Copyright 2020 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.sql.schemachanger.scpb;
option go_package = "github.com/cockroachdb/cockroach/pkg/sql/schemachanger/scpb";

import "sql/schemachanger/scpb/elements.proto";
import "gogoproto/gogo.proto";

option (gogoproto.equal_all) = true;

message Target {
  ElementProto element_proto = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  TargetMetadata metadata = 2 [(gogoproto.nullable) = false];
  Status target_status = 3;
}

enum Status {
  UNKNOWN = 0;

  // OFFLINE exists only as a part of decomposition to detect importing
  // descriptors.
  OFFLINE = 15;

  // Target states are ABSENT, PUBLIC or TRANSIENT_ABSENT.
  // These are the desired final end states of a schema change.
  ABSENT = 1;
  PUBLIC = 2;
  // TRANSIENT_ABSENT is like ABSENT->TRANSIENT_ABSENT; the element is not
  // persisted once the schema change involving it is complete.
  TRANSIENT_ABSENT = 3;

  // Intermediate states on the descriptor dropping path.
  DROPPED = 5;
  // TXN_DROPPED only exists to service the 22.2 rule set.
  // Deprecated.
  TXN_DROPPED = 4 [deprecated = true];

  // Intermediate states on the column and index dropping and adding paths.
  // WRITE_ONLY is also used on constraint adding and dropping paths.
  WRITE_ONLY = 6;
  DELETE_ONLY = 7;

  // Intermediate states on the index dropping and adding paths.
  // VALIDATED is also used on constraint adding and dropping paths.
  VALIDATED = 8;
  MERGED = 9;
  MERGE_ONLY = 10;
  BACKFILLED = 11;
  BACKFILL_ONLY = 12;

  // Intermediate states on the transient index dropping path
  TRANSIENT_DELETE_ONLY = 13;
  TRANSIENT_WRITE_ONLY = 14;
  TRANSIENT_BACKFILL_ONLY = 16;
  TRANSIENT_BACKFILLED = 17;
  TRANSIENT_MERGE_ONLY = 18;
  TRANSIENT_MERGED = 19;
  TRANSIENT_VALIDATED = 20;
  TRANSIENT_PUBLIC = 21;
  TRANSIENT_DROPPED = 22;

  // When a basic descriptor (the object element) is first created before all
  // the other dependent elements become public.
  DESCRIPTOR_ADDED = 23;
}

// TargetMetadata refers to the metadata for individual elements, where
// some fields like statement_id are indexes into the the full declarative
// schema changer State.
message TargetMetadata {
  option (gogoproto.equal) = true;
  // SubWorkID identifies the individual portions of a statement that this
  // target belongs too. For example, if multiple objects such as tables or
  // schemas are dropped in a single statement (i.e. such as DROP TABLE A, B)
  //  then this counter will increment  for each of those objects.
  uint32 sub_work_id = 1 [(gogoproto.customname) = "SubWorkID"];
  // SourceElementID identifies the parent element responsible for generating
  // an element, which will be used to track cascaded drops. For example
  // if database is being dropped, then any schemas that are dropped will have
  // this reference ID. Note: These ID's do not correspond to descriptor ID's
  // and are incremented as new elements are added into the State.
  uint32 source_element_id = 2 [(gogoproto.customname) = "SourceElementID", (gogoproto.casttype) = "SourceElementID"];
  // StatementID refers to the statement that produced this element, where
  // the ID indexes into the State structure.
  //
  // TODO(ajwerner): Potentially multiple statements in a transaction affect
  // the same target. We'll need to retain a set of ids to deal with that case.
  // Fortunately making a field repeated is backwards compatible.
  uint32 statement_id = 3 [(gogoproto.customname) = "StatementID"];
}

message TargetState {
  repeated Target targets = 1 [(gogoproto.nullable) = false];
  repeated Statement statements = 2 [(gogoproto.nullable) = false];
  Authorization authorization = 3 [(gogoproto.nullable) = false];
  repeated NameMapping name_mappings = 4 [(gogoproto.nullable) = false];
}

message Statement {
  string statement = 1;
  string redacted_statement = 2;
  string statement_tag = 3;
}

message Authorization {
  string user_name = 1;
  string app_name = 2;
}

// NameMapping maps IDs to names for the purpose of generating
// human-readable output based on the TargetState or a plan.
message NameMapping {
  uint32 id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.DescID"];
  string name = 2;

  map<uint32,string> columns = 10 [(gogoproto.castkey) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ColumnID"];
  map<uint32,string> families = 11 [(gogoproto.castkey) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.FamilyID"];
  map<uint32,string> indexes = 12 [(gogoproto.castkey) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.IndexID"];
  map<uint32,string> constraints = 13 [(gogoproto.castkey) = "github.com/cockroachdb/cockroach/pkg/sql/sem/catid.ConstraintID"];
}

// DescriptorState contains the portion of a schema change state
// corresponding to an individual descriptor. The combination of
// these messages for all descriptors involved in a schema change produces the
// current state of the entire schema change.
message DescriptorState {

  // JobID is the ID of the job responsible for this DescriptorState.
  int64 job_id = 5 [
    (gogoproto.customname) = "JobID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/sql/catalog/catpb.JobID"];

  // Revertible captures whether the job is currently revertible.
  // This is important to facilitate constructing the job in the appropriate
  // way upon restore.
  bool revertible = 7;

  // InRollback captures whether the job is currently rolling back.
  // This is important to ensure that the job can be moved to the proper
  // failed state upon restore.
  //
  // Note, if this value is true, the targets have had their directions
  // flipped already.
  //
  bool in_rollback = 8;

  // Targets is the set of targets in the schema change belonging to this
  // descriptor.
  repeated Target targets = 1 [(gogoproto.nullable) = false];

  // CurrentStatuses is parallel to Targets and stores the current status for
  // those targets.
  repeated Status current_statuses = 4;

  // TargetRanks is parallel to Targets and stores the rank of the target in
  // the complete schema change. These ranks are used to deterministically
  // reconstruct the complete TargetState from a collection of DescriptorState
  // messages.
  repeated uint32 target_ranks = 6;

  // Statement is a statement which is associated with one or more targets
  // in the current DescriptorState.
  message Statement {

    // Statement is a statement that is relevant to one or more targets
    // in this descriptor.
    scpb.Statement statement = 1 [(gogoproto.nullable) = false];

    // StatementRank is the rank of the statement in the transaction.
    uint32 statement_rank = 2;
  }

  // RelevantStatements is the set of statements which are relevant to any of
  // the targets. It is sorted internally by StatementRank.
  repeated Statement relevant_statements = 2  [(gogoproto.nullable) = false];

  // Authorization is information about the creator of the schema change.
  Authorization authorization = 3 [(gogoproto.nullable) = false];

  // NameMapping contains labels used to decorate any of the targets.
  NameMapping name_mapping = 9 [(gogoproto.nullable) = false];
}

// CorpusState is used to serialize the current state object for the purpose,
// of testing. See scpb.CurrentState for the object layout, this variant is
// meant only for serialization in tests.
message CorpusState {
  string name = 1;
  TargetState target_state = 2;
  repeated Status status = 3;
  bool revertible = 4;
  bool in_rollback = 5;
}

// CorpusDisk is the disk format used for storing the declarative schema changer
// corpuses.
message CorpusDisk {
  repeated CorpusState corpus_array = 1;
}

