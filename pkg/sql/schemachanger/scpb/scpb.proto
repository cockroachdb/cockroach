// Copyright 2020 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.sql.schemachanger.scpb;
option go_package = "scpb";

import "sql/schemachanger/scpb/elements.proto";
import "gogoproto/gogo.proto";

message Target {
  ElementProto element_proto = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  TargetMetadata metadata = 2 [(gogoproto.nullable) = false];
  Status target_status = 3;
}

enum Status {
  UNKNOWN = 0;
  ABSENT = 1;
  DROPPED = 2;
  DELETE_ONLY = 3;
  DELETE_AND_WRITE_ONLY = 4;
  BACKFILLED = 5;
  VALIDATED = 6;
  TXN_DROPPED = 7;
  PUBLIC = 8;
}

// TargetMetadata refers to the metadata for individual elements, where
// some fields like statement_id are indexes into the the full declarative
// schema changer State.
message TargetMetadata {
  // SubWorkID identifies the individual portions of a statement that this
  // target belongs too. For example, if multiple objects such as tables or
  // schemas are dropped in a single statement (i.e. such as DROP TABLE A, B)
  //  then this counter will increment  for each of those objects.
  uint32 sub_work_id = 1 [(gogoproto.customname) = "SubWorkID"];
  // SourceElementID identifies the parent element responsible for generating
  // an element, which will be used to track cascaded drops. For example
  // if database is being dropped, then any schemas that are dropped will have
  // this reference ID. Note: These ID's do not correspond to descriptor ID's
  // and are incremented as new elements are added into the State.
  uint32 source_element_id = 2 [(gogoproto.customname) = "SourceElementID", (gogoproto.casttype) = "SourceElementID"];
  // StatementID refers to the statement that produced this element, where
  // the ID indexes into the State structure.
  uint32 statement_id = 3 [(gogoproto.customname) = "StatementID"];
}

message TargetState {
  repeated Target targets = 1 [(gogoproto.nullable) = false];
  repeated Statement statements = 2 [(gogoproto.nullable) = false];
  Authorization authorization = 3 [(gogoproto.nullable) = false];
}

message Statement {
  string statement = 1;
}

message Authorization {
  string user_name = 1;
  string app_name = 2;
}
