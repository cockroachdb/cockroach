load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "eav",
    srcs = [
        "compare.go",
        "eav.go",
        "ordinal_set.go",
        "tree.go",
        "types.go",
        "values.go",
        ":gen-type-stringer",  # keep
    ],
    importpath = "github.com/cockroachdb/cockroach/pkg/sql/schemachanger/eav",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/util/iterutil",
        "@com_github_cockroachdb_errors//:errors",
        "@com_github_google_btree//:btree",
    ],
)

go_test(
    name = "eav_test",
    srcs = ["datadriven_test.go"],
    data = glob(["testdata/**"]),
    deps = [
        "//pkg/sql/schemachanger/eav/eavtest",
        "//pkg/testutils",
        "@com_github_cockroachdb_datadriven//:datadriven",
    ],
)

# Keep this genrule and not using common string function due to extra flags eg: trimprefix
genrule(
    name = "gen-type-stringer",
    srcs = [
        "types.go",
    ],
    outs = ["type_string.go"],
    # golang.org/x/tools executes commands via
    # golang.org/x/sys/execabs which requires all PATH lookups to
    # result in absolute paths. To account for this, we resolve the
    # relative path returned by location to an absolute path.
    cmd = """
       GO_REL_PATH=`dirname $(location @go_sdk//:bin/go)`
       GO_ABS_PATH=`cd $$GO_REL_PATH && pwd`
       # Set GOPATH to something to workaround https://github.com/golang/go/issues/43938
       env PATH=$$GO_ABS_PATH HOME=$(GENDIR) GOPATH=/nonexist-gopath \
       $(location @org_golang_x_tools//cmd/stringer:stringer) -output=$@ -type=Type -trimprefix Type $<
    """,
    exec_tools = [
        "@go_sdk//:bin/go",
        "@org_golang_x_tools//cmd/stringer",
    ],
)
