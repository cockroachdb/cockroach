setup
CREATE DATABASE db;
CREATE SCHEMA db.sc;
----
...
+database {0 0 db} -> 104
+schema {104 0 public} -> 105
+schema {104 0 sc} -> 106

test
DROP SCHEMA db.sc;
----
checking for feature: DROP SCHEMA
begin transaction #1
# begin StatementPhase
## StatementPhase stage 1 of 1 with 2 MutationType ops
delete comment for descriptor #106 of type SchemaCommentType
# end StatementPhase
# begin PreCommitPhase
## PreCommitPhase stage 1 of 1 with 5 MutationType ops
create job #1: "schema change job"
  descriptor IDs: [104 106]
upsert descriptor #104
  ...
       public:
         id: 105
  -    sc:
  -      id: 106
  -  version: "2"
  +  version: "3"
upsert descriptor #106
  ...
         withGrantOption: 2
       version: 2
  -  version: "1"
  +  state: DROP
  +  version: "2"
# end PreCommitPhase
commit transaction #1
# begin PostCommitPhase
begin transaction #2
## PostCommitNonRevertiblePhase stage 1 of 1 with 6 MutationType ops
write *eventpb.DropSchema to event log for descriptor #106: DROP SCHEMA ‹db›.‹sc›
update progress of schema change job #1
set schema change job #1 to non-cancellable
delete schema namespace entry {104 0 sc} -> 106
delete descriptor #106
commit transaction #2
# end PostCommitPhase

setup
CREATE SCHEMA db.sc;
CREATE TABLE db.sc.t (k INT, v STRING);
CREATE TYPE db.sc.e AS ENUM('a', 'b', 'c');
----
...
+schema {104 0 sc} -> 107
+object {104 107 t} -> 108
+object {104 107 e} -> 109
+object {104 107 _e} -> 110

test
DROP TABLE db.sc.t;
----
checking for feature: DROP TABLE
begin transaction #1
# begin StatementPhase
## StatementPhase stage 1 of 1 with 6 MutationType ops
delete comment for descriptor #108 of type TableCommentType
delete comment for descriptor #108 of type ColumnCommentType
delete comment for descriptor #108 of type ColumnCommentType
delete comment for descriptor #108 of type IndexCommentType
delete comment for constraint on #108, name: t_pkey, type: PrimaryKey
# end StatementPhase
# begin PreCommitPhase
## PreCommitPhase stage 1 of 1 with 4 MutationType ops
create job #1: "schema change job"
  descriptor IDs: [108]
delete object namespace entry {104 107 t} -> 108
upsert descriptor #108
  ...
     modificationTime: {}
     name: t
  +  newSchemaChangeJobId: "1"
     nextColumnId: 4
     nextFamilyId: 1
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 107
  -  version: "1"
  +  version: "2"
# end PreCommitPhase
commit transaction #1
# begin PostCommitPhase
begin transaction #2
## PostCommitNonRevertiblePhase stage 1 of 1 with 4 MutationType ops
create job #2: "GC for dropping descriptor 108"
  descriptor IDs: [108]
write *eventpb.DropTable to event log for descriptor #108: DROP TABLE ‹db›.‹sc›.‹t›
update progress of schema change job #1
set schema change job #1 to non-cancellable
upsert descriptor #108
  ...
     modificationTime: {}
     name: t
  -  newSchemaChangeJobId: "1"
     nextColumnId: 4
     nextFamilyId: 1
  ...
     state: DROP
     unexposedParentSchemaId: 107
  -  version: "2"
  +  version: "3"
commit transaction #2
# end PostCommitPhase

test
DROP SCHEMA db.sc CASCADE;
----
checking for feature: DROP SCHEMA
begin transaction #1
# begin StatementPhase
## StatementPhase stage 1 of 1 with 4 MutationType ops
delete comment for descriptor #107 of type SchemaCommentType
# end StatementPhase
# begin PreCommitPhase
## PreCommitPhase stage 1 of 1 with 11 MutationType ops
create job #1: "schema change job"
  descriptor IDs: [104 107 109 110]
delete object namespace entry {104 107 e} -> 109
delete object namespace entry {104 107 _e} -> 110
upsert descriptor #104
  ...
       public:
         id: 105
  -    sc:
  -      id: 107
  -  version: "4"
  +  version: "5"
upsert descriptor #107
  ...
         withGrantOption: 2
       version: 2
  -  version: "1"
  +  state: DROP
  +  version: "2"
upsert descriptor #109
  ...
         withGrantOption: 2
       version: 2
  -  version: "1"
  +  state: DROP
  +  version: "2"
upsert descriptor #110
  ...
         withGrantOption: 2
       version: 2
  -  version: "1"
  +  state: DROP
  +  version: "2"
# end PreCommitPhase
commit transaction #1
# begin PostCommitPhase
begin transaction #2
## PostCommitNonRevertiblePhase stage 1 of 1 with 12 MutationType ops
write *eventpb.DropSchema to event log for descriptor #107: DROP SCHEMA ‹db›.‹sc› CASCADE
write *eventpb.DropType to event log for descriptor #110: DROP SCHEMA ‹db›.‹sc› CASCADE
update progress of schema change job #1
set schema change job #1 to non-cancellable
delete schema namespace entry {104 0 sc} -> 107
delete descriptor #107
delete descriptor #109
delete descriptor #110
commit transaction #2
# end PostCommitPhase

test
DROP DATABASE db CASCADE;
----
checking for feature: DROP DATABASE
begin transaction #1
# begin StatementPhase
## StatementPhase stage 1 of 1 with 5 MutationType ops
delete comment for descriptor #105 of type SchemaCommentType
delete comment for descriptor #104 of type DatabaseCommentType
delete role settings for database on #104
# end StatementPhase
# begin PreCommitPhase
## PreCommitPhase stage 1 of 1 with 6 MutationType ops
create job #1: "schema change job"
  descriptor IDs: [104 105]
upsert descriptor #104
  ...
         withGrantOption: 2
       version: 2
  -  schemas:
  -    public:
  -      id: 105
  -  version: "5"
  +  schemas: {}
  +  state: DROP
  +  version: "6"
upsert descriptor #105
  ...
         withGrantOption: 2
       version: 2
  -  version: "1"
  +  state: DROP
  +  version: "2"
# end PreCommitPhase
commit transaction #1
# begin PostCommitPhase
begin transaction #2
## PostCommitNonRevertiblePhase stage 1 of 1 with 9 MutationType ops
create job #2: "GC for dropping descriptors and parent database 104"
  descriptor IDs: []
write *eventpb.DropDatabase to event log for descriptor #104: DROP DATABASE ‹db› CASCADE
update progress of schema change job #1
set schema change job #1 to non-cancellable
delete database namespace entry {0 0 db} -> 104
delete schema namespace entry {104 0 public} -> 105
upsert descriptor #104
  ...
       version: 2
     state: DROP
  -  version: "6"
  +  version: "7"
delete descriptor #105
commit transaction #2
# end PostCommitPhase

setup
CREATE DATABASE db1;
CREATE SCHEMA db1.sc1;
CREATE SEQUENCE db1.public.sq1;
CREATE SEQUENCE db1.sc1.sq1;
CREATE TABLE db1.sc1.t1 (id INT PRIMARY KEY, name varchar(256), val int DEFAULT nextval('db1.sc1.sq1'));
CREATE TABLE db1.public.t1 (id INT PRIMARY KEY, name varchar(256), val int DEFAULT nextval('db1.public.sq1'));
CREATE VIEW db1.sc1.v1 AS (SELECT name FROM db1.sc1.t1);
CREATE VIEW db1.sc1.v2 AS (SELECT name AS n1, name AS n2 FROM db1.sc1.v1);
CREATE VIEW db1.sc1.v3 AS (SELECT name, n1 FROM db1.sc1.v1, db1.sc1.v2);
CREATE VIEW db1.sc1.v4 AS (SELECT n2, n1 FROM db1.sc1.v2);
CREATE TYPE db1.sc1.typ AS ENUM('a');
CREATE VIEW db1.sc1.v5 AS (SELECT 'a'::db1.sc1.typ::string AS k, n2, n1 from db1.sc1.v4);
----
...
+database {0 0 db1} -> 111
+schema {111 0 public} -> 112
+schema {111 0 sc1} -> 113
+object {111 112 sq1} -> 114
+object {111 113 sq1} -> 115
+object {111 113 t1} -> 116
+object {111 112 t1} -> 117
+object {111 113 v1} -> 118
+object {111 113 v2} -> 119
+object {111 113 v3} -> 120
+object {111 113 v4} -> 121
+object {111 113 typ} -> 122
+object {111 113 _typ} -> 123
+object {111 113 v5} -> 124

test
DROP DATABASE db1 CASCADE
----
checking for feature: DROP DATABASE
begin transaction #1
# begin StatementPhase
## StatementPhase stage 1 of 1 with 37 MutationType ops
delete comment for descriptor #114 of type TableCommentType
delete comment for descriptor #117 of type TableCommentType
delete comment for descriptor #117 of type ColumnCommentType
delete comment for descriptor #117 of type ColumnCommentType
delete comment for descriptor #117 of type ColumnCommentType
delete comment for descriptor #117 of type IndexCommentType
delete comment for descriptor #112 of type SchemaCommentType
delete comment for descriptor #115 of type TableCommentType
delete comment for descriptor #116 of type TableCommentType
delete comment for descriptor #116 of type ColumnCommentType
delete comment for descriptor #116 of type ColumnCommentType
delete comment for descriptor #116 of type ColumnCommentType
delete comment for descriptor #116 of type IndexCommentType
delete comment for descriptor #118 of type TableCommentType
delete comment for descriptor #119 of type TableCommentType
delete comment for descriptor #120 of type TableCommentType
delete comment for descriptor #121 of type TableCommentType
delete comment for descriptor #124 of type TableCommentType
delete comment for descriptor #113 of type SchemaCommentType
delete comment for descriptor #111 of type DatabaseCommentType
delete comment for constraint on #117, name: t1_pkey, type: PrimaryKey
delete comment for constraint on #116, name: t1_pkey, type: PrimaryKey
delete role settings for database on #111
# end StatementPhase
# begin PreCommitPhase
## PreCommitPhase stage 1 of 1 with 56 MutationType ops
create job #1: "schema change job"
  descriptor IDs: [111 112 113 114 115 116 117 118 119 120 121 122 123 124]
delete object namespace entry {111 112 sq1} -> 114
delete object namespace entry {111 113 sq1} -> 115
delete object namespace entry {111 113 t1} -> 116
delete object namespace entry {111 112 t1} -> 117
delete object namespace entry {111 113 v1} -> 118
delete object namespace entry {111 113 v2} -> 119
delete object namespace entry {111 113 v3} -> 120
delete object namespace entry {111 113 v4} -> 121
delete object namespace entry {111 113 typ} -> 122
delete object namespace entry {111 113 _typ} -> 123
delete object namespace entry {111 113 v5} -> 124
upsert descriptor #111
  ...
         withGrantOption: 2
       version: 2
  -  schemas:
  -    public:
  -      id: 112
  -    sc1:
  -      id: 113
  -  version: "2"
  +  schemas: {}
  +  state: DROP
  +  version: "3"
upsert descriptor #112
  ...
         withGrantOption: 2
       version: 2
  -  version: "1"
  +  state: DROP
  +  version: "2"
upsert descriptor #113
  ...
         withGrantOption: 2
       version: 2
  -  version: "1"
  +  state: DROP
  +  version: "2"
upsert descriptor #114
  ...
     createAsOfTime:
       wallTime: "1"
  -  dependedOnBy:
  -  - byId: true
  -    columnIds:
  -    - 3
  -    id: 117
     families:
     - columnIds:
  ...
     modificationTime: {}
     name: sq1
  +  newSchemaChangeJobId: "1"
     parentId: 111
     primaryIndex:
  ...
       sequenceOwner: {}
       start: "1"
  +  state: DROP
     unexposedParentSchemaId: 112
  -  version: "2"
  +  version: "3"
upsert descriptor #115
  ...
     createAsOfTime:
       wallTime: "1"
  -  dependedOnBy:
  -  - byId: true
  -    columnIds:
  -    - 3
  -    id: 116
     families:
     - columnIds:
  ...
     modificationTime: {}
     name: sq1
  +  newSchemaChangeJobId: "1"
     parentId: 111
     primaryIndex:
  ...
       sequenceOwner: {}
       start: "1"
  +  state: DROP
     unexposedParentSchemaId: 113
  -  version: "2"
  +  version: "3"
upsert descriptor #116
  ...
         visibleType: 7
         width: 256
  -  - defaultExpr: nextval(115:::REGCLASS)
  -    id: 3
  +  - id: 3
       name: val
       nullable: true
  ...
         oid: 20
         width: 64
  -    usesSequenceIds:
  -    - 115
     createAsOfTime:
       wallTime: "1"
     dependedOnBy:
  -  - columnIds:
  -    - 2
  -    id: 118
  +  - {}
     families:
     - columnIds:
  ...
     modificationTime: {}
     name: t1
  +  newSchemaChangeJobId: "1"
     nextColumnId: 4
     nextFamilyId: 1
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 113
  -  version: "2"
  +  version: "3"
upsert descriptor #117
  ...
         visibleType: 7
         width: 256
  -  - defaultExpr: nextval(114:::REGCLASS)
  -    id: 3
  +  - id: 3
       name: val
       nullable: true
  ...
         oid: 20
         width: 64
  -    usesSequenceIds:
  -    - 114
     createAsOfTime:
       wallTime: "1"
  +  dependedOnBy: []
     families:
     - columnIds:
  ...
     modificationTime: {}
     name: t1
  +  newSchemaChangeJobId: "1"
     nextColumnId: 4
     nextFamilyId: 1
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 112
  -  version: "1"
  +  version: "2"
upsert descriptor #118
  ...
     createAsOfTime:
       wallTime: "1"
  -  dependedOnBy:
  -  - columnIds:
  -    - 1
  -    id: 119
  -  - columnIds:
  -    - 1
  -    id: 120
  -  dependsOn:
  -  - 116
     formatVersion: 3
     id: 118
     modificationTime: {}
     name: v1
  +  newSchemaChangeJobId: "1"
     nextColumnId: 2
     nextMutationId: 1
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 113
  -  version: "3"
  +  version: "4"
     viewQuery: (SELECT name FROM db1.sc1.t1)
upsert descriptor #119
  ...
     createAsOfTime:
       wallTime: "1"
  -  dependedOnBy:
  -  - columnIds:
  -    - 1
  -    - 2
  -    id: 120
  -  - columnIds:
  -    - 1
  -    - 2
  -    id: 121
  -  dependsOn:
  -  - 118
     formatVersion: 3
     id: 119
     modificationTime: {}
     name: v2
  +  newSchemaChangeJobId: "1"
     nextColumnId: 3
     nextMutationId: 1
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 113
  -  version: "3"
  +  version: "4"
     viewQuery: (SELECT name AS n1, name AS n2 FROM db1.sc1.v1)
upsert descriptor #120
  ...
     createAsOfTime:
       wallTime: "1"
  -  dependsOn:
  -  - 118
  -  - 119
     formatVersion: 3
     id: 120
     modificationTime: {}
     name: v3
  +  newSchemaChangeJobId: "1"
     nextColumnId: 3
     nextMutationId: 1
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 113
  -  version: "1"
  +  version: "2"
     viewQuery: (SELECT name, n1 FROM db1.sc1.v1, db1.sc1.v2)
upsert descriptor #121
  ...
     createAsOfTime:
       wallTime: "1"
  -  dependedOnBy:
  -  - columnIds:
  -    - 1
  -    - 2
  -    id: 124
  -  dependsOn:
  -  - 119
     formatVersion: 3
     id: 121
     modificationTime: {}
     name: v4
  +  newSchemaChangeJobId: "1"
     nextColumnId: 3
     nextMutationId: 1
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 113
  -  version: "2"
  +  version: "3"
     viewQuery: (SELECT n2, n1 FROM db1.sc1.v2)
upsert descriptor #122
  ...
         withGrantOption: 2
       version: 2
  -  referencingDescriptorIds:
  -  - 124
  -  version: "2"
  +  referencingDescriptorIds: []
  +  state: DROP
  +  version: "3"
upsert descriptor #123
  ...
         withGrantOption: 2
       version: 2
  -  referencingDescriptorIds:
  -  - 124
  -  version: "2"
  +  referencingDescriptorIds: []
  +  state: DROP
  +  version: "3"
upsert descriptor #124
  ...
     createAsOfTime:
       wallTime: "1"
  -  dependsOn:
  -  - 121
     dependsOnTypes:
     - 122
  ...
     modificationTime: {}
     name: v5
  +  newSchemaChangeJobId: "1"
     nextColumnId: 4
     nextMutationId: 1
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 113
  -  version: "1"
  +  version: "2"
     viewQuery: (SELECT 'a':::sc1.typ::STRING AS k, n2, n1 FROM db1.sc1.v4)
# end PreCommitPhase
commit transaction #1
# begin PostCommitPhase
begin transaction #2
## PostCommitNonRevertiblePhase stage 1 of 1 with 46 MutationType ops
create job #2: "GC for dropping descriptors 114 117 115 116 118 119 120 121 124 and parent database 111"
  descriptor IDs: [114 117 115 116 118 119 120 121 124]
write *eventpb.DropDatabase to event log for descriptor #111: DROP DATABASE ‹db1› CASCADE
write *eventpb.DropType to event log for descriptor #123: DROP DATABASE ‹db1› CASCADE
update progress of schema change job #1
set schema change job #1 to non-cancellable
delete database namespace entry {0 0 db1} -> 111
delete schema namespace entry {111 0 public} -> 112
delete schema namespace entry {111 0 sc1} -> 113
upsert descriptor #111
  ...
       version: 2
     state: DROP
  -  version: "3"
  +  version: "4"
upsert descriptor #114
  ...
     modificationTime: {}
     name: sq1
  -  newSchemaChangeJobId: "1"
     parentId: 111
     primaryIndex:
  ...
     state: DROP
     unexposedParentSchemaId: 112
  -  version: "3"
  +  version: "4"
upsert descriptor #115
  ...
     modificationTime: {}
     name: sq1
  -  newSchemaChangeJobId: "1"
     parentId: 111
     primaryIndex:
  ...
     state: DROP
     unexposedParentSchemaId: 113
  -  version: "3"
  +  version: "4"
upsert descriptor #116
  ...
     modificationTime: {}
     name: t1
  -  newSchemaChangeJobId: "1"
     nextColumnId: 4
     nextFamilyId: 1
  ...
     state: DROP
     unexposedParentSchemaId: 113
  -  version: "3"
  +  version: "4"
upsert descriptor #117
  ...
     modificationTime: {}
     name: t1
  -  newSchemaChangeJobId: "1"
     nextColumnId: 4
     nextFamilyId: 1
  ...
     state: DROP
     unexposedParentSchemaId: 112
  -  version: "2"
  +  version: "3"
upsert descriptor #118
  ...
     modificationTime: {}
     name: v1
  -  newSchemaChangeJobId: "1"
     nextColumnId: 2
     nextMutationId: 1
  ...
     state: DROP
     unexposedParentSchemaId: 113
  -  version: "4"
  +  version: "5"
     viewQuery: (SELECT name FROM db1.sc1.t1)
upsert descriptor #119
  ...
     modificationTime: {}
     name: v2
  -  newSchemaChangeJobId: "1"
     nextColumnId: 3
     nextMutationId: 1
  ...
     state: DROP
     unexposedParentSchemaId: 113
  -  version: "4"
  +  version: "5"
     viewQuery: (SELECT name AS n1, name AS n2 FROM db1.sc1.v1)
upsert descriptor #120
  ...
     modificationTime: {}
     name: v3
  -  newSchemaChangeJobId: "1"
     nextColumnId: 3
     nextMutationId: 1
  ...
     state: DROP
     unexposedParentSchemaId: 113
  -  version: "2"
  +  version: "3"
     viewQuery: (SELECT name, n1 FROM db1.sc1.v1, db1.sc1.v2)
upsert descriptor #121
  ...
     modificationTime: {}
     name: v4
  -  newSchemaChangeJobId: "1"
     nextColumnId: 3
     nextMutationId: 1
  ...
     state: DROP
     unexposedParentSchemaId: 113
  -  version: "3"
  +  version: "4"
     viewQuery: (SELECT n2, n1 FROM db1.sc1.v2)
upsert descriptor #124
  ...
     modificationTime: {}
     name: v5
  -  newSchemaChangeJobId: "1"
     nextColumnId: 4
     nextMutationId: 1
  ...
     state: DROP
     unexposedParentSchemaId: 113
  -  version: "2"
  +  version: "3"
     viewQuery: (SELECT 'a':::sc1.typ::STRING AS k, n2, n1 FROM db1.sc1.v4)
delete descriptor #112
delete descriptor #113
delete descriptor #122
delete descriptor #123
commit transaction #2
# end PostCommitPhase
