setup
CREATE DATABASE db;
CREATE SCHEMA db.sc;
----
...
+database {0 0 db} -> 1004
+schema {1004 0 public} -> 1005
+schema {1004 0 sc} -> 1006

test
DROP SCHEMA db.sc;
----
checking for feature: DROP SCHEMA
begin transaction #1
# begin StatementPhase
## StatementPhase stage 1 of 1 with 2 MutationType ops
delete comment for descriptor #1006 of type SchemaCommentType
# end StatementPhase
# begin PreCommitPhase
## PreCommitPhase stage 1 of 1 with 5 MutationType ops
create job #1: "schema change job"
  descriptor IDs: [1004 1006]
upsert descriptor #1004
  ...
       public:
         id: 1005
  -    sc:
  -      id: 1006
  -  version: "2"
  +  version: "3"
upsert descriptor #1006
  ...
         withGrantOption: 2
       version: 2
  -  version: "1"
  +  state: DROP
  +  version: "2"
# end PreCommitPhase
commit transaction #1
# begin PostCommitPhase
begin transaction #2
## PostCommitNonRevertiblePhase stage 1 of 1 with 6 MutationType ops
write *eventpb.DropSchema to event log for descriptor #1006: DROP SCHEMA ‹db›.‹sc›
update progress of schema change job #1
set schema change job #1 to non-cancellable
delete schema namespace entry {1004 0 sc} -> 1006
delete descriptor #1006
commit transaction #2
# end PostCommitPhase

setup
CREATE SCHEMA db.sc;
CREATE TABLE db.sc.t (k INT, v STRING);
CREATE TYPE db.sc.e AS ENUM('a', 'b', 'c');
----
...
+schema {1004 0 sc} -> 1007
+object {1004 1007 t} -> 1008
+object {1004 1007 e} -> 1009
+object {1004 1007 _e} -> 1010

test
DROP TABLE db.sc.t;
----
checking for feature: DROP TABLE
begin transaction #1
# begin StatementPhase
## StatementPhase stage 1 of 1 with 6 MutationType ops
delete comment for descriptor #1008 of type TableCommentType
delete comment for descriptor #1008 of type ColumnCommentType
delete comment for descriptor #1008 of type ColumnCommentType
delete comment for descriptor #1008 of type IndexCommentType
delete comment for constraint on #1008, name: t_pkey, type: PrimaryKey
# end StatementPhase
# begin PreCommitPhase
## PreCommitPhase stage 1 of 1 with 4 MutationType ops
create job #1: "schema change job"
  descriptor IDs: [1008]
delete object namespace entry {1004 1007 t} -> 1008
upsert descriptor #1008
  ...
     modificationTime: {}
     name: t
  +  newSchemaChangeJobId: "1"
     nextColumnId: 4
     nextFamilyId: 1
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 1007
  -  version: "1"
  +  version: "2"
# end PreCommitPhase
commit transaction #1
# begin PostCommitPhase
begin transaction #2
## PostCommitNonRevertiblePhase stage 1 of 1 with 4 MutationType ops
create job #2: "GC for dropping descriptor 1008"
  descriptor IDs: [1008]
write *eventpb.DropTable to event log for descriptor #1008: DROP TABLE ‹db›.‹sc›.‹t›
update progress of schema change job #1
set schema change job #1 to non-cancellable
upsert descriptor #1008
  ...
     modificationTime: {}
     name: t
  -  newSchemaChangeJobId: "1"
     nextColumnId: 4
     nextFamilyId: 1
  ...
     state: DROP
     unexposedParentSchemaId: 1007
  -  version: "2"
  +  version: "3"
commit transaction #2
# end PostCommitPhase

test
DROP SCHEMA db.sc CASCADE;
----
checking for feature: DROP SCHEMA
begin transaction #1
# begin StatementPhase
## StatementPhase stage 1 of 1 with 4 MutationType ops
delete comment for descriptor #1007 of type SchemaCommentType
# end StatementPhase
# begin PreCommitPhase
## PreCommitPhase stage 1 of 1 with 11 MutationType ops
create job #1: "schema change job"
  descriptor IDs: [1004 1007 1009 1010]
delete object namespace entry {1004 1007 e} -> 1009
delete object namespace entry {1004 1007 _e} -> 1010
upsert descriptor #1004
  ...
       public:
         id: 1005
  -    sc:
  -      id: 1007
  -  version: "4"
  +  version: "5"
upsert descriptor #1007
  ...
         withGrantOption: 2
       version: 2
  -  version: "1"
  +  state: DROP
  +  version: "2"
upsert descriptor #1009
  ...
         withGrantOption: 2
       version: 2
  -  version: "1"
  +  state: DROP
  +  version: "2"
upsert descriptor #1010
  ...
         withGrantOption: 2
       version: 2
  -  version: "1"
  +  state: DROP
  +  version: "2"
# end PreCommitPhase
commit transaction #1
# begin PostCommitPhase
begin transaction #2
## PostCommitNonRevertiblePhase stage 1 of 1 with 12 MutationType ops
write *eventpb.DropSchema to event log for descriptor #1007: DROP SCHEMA ‹db›.‹sc› CASCADE
write *eventpb.DropType to event log for descriptor #1010: DROP SCHEMA ‹db›.‹sc› CASCADE
update progress of schema change job #1
set schema change job #1 to non-cancellable
delete schema namespace entry {1004 0 sc} -> 1007
delete descriptor #1007
delete descriptor #1009
delete descriptor #1010
commit transaction #2
# end PostCommitPhase

test
DROP DATABASE db CASCADE;
----
checking for feature: DROP DATABASE
begin transaction #1
# begin StatementPhase
## StatementPhase stage 1 of 1 with 5 MutationType ops
delete comment for descriptor #1005 of type SchemaCommentType
delete comment for descriptor #1004 of type DatabaseCommentType
delete role settings for database on #1004
# end StatementPhase
# begin PreCommitPhase
## PreCommitPhase stage 1 of 1 with 6 MutationType ops
create job #1: "schema change job"
  descriptor IDs: [1004 1005]
upsert descriptor #1004
  ...
         withGrantOption: 2
       version: 2
  -  schemas:
  -    public:
  -      id: 1005
  -  version: "5"
  +  schemas: {}
  +  state: DROP
  +  version: "6"
upsert descriptor #1005
  ...
         withGrantOption: 2
       version: 2
  -  version: "1"
  +  state: DROP
  +  version: "2"
# end PreCommitPhase
commit transaction #1
# begin PostCommitPhase
begin transaction #2
## PostCommitNonRevertiblePhase stage 1 of 1 with 9 MutationType ops
create job #2: "GC for dropping descriptors and parent database 1004"
  descriptor IDs: []
write *eventpb.DropDatabase to event log for descriptor #1004: DROP DATABASE ‹db› CASCADE
update progress of schema change job #1
set schema change job #1 to non-cancellable
delete database namespace entry {0 0 db} -> 1004
delete schema namespace entry {1004 0 public} -> 1005
upsert descriptor #1004
  ...
       version: 2
     state: DROP
  -  version: "6"
  +  version: "7"
delete descriptor #1005
commit transaction #2
# end PostCommitPhase

setup
CREATE DATABASE db1;
CREATE SCHEMA db1.sc1;
CREATE SEQUENCE db1.public.sq1;
CREATE SEQUENCE db1.sc1.sq1;
CREATE TABLE db1.sc1.t1 (id INT PRIMARY KEY, name varchar(256), val int DEFAULT nextval('db1.sc1.sq1'));
CREATE TABLE db1.public.t1 (id INT PRIMARY KEY, name varchar(256), val int DEFAULT nextval('db1.public.sq1'));
CREATE VIEW db1.sc1.v1 AS (SELECT name FROM db1.sc1.t1);
CREATE VIEW db1.sc1.v2 AS (SELECT name AS n1, name AS n2 FROM db1.sc1.v1);
CREATE VIEW db1.sc1.v3 AS (SELECT name, n1 FROM db1.sc1.v1, db1.sc1.v2);
CREATE VIEW db1.sc1.v4 AS (SELECT n2, n1 FROM db1.sc1.v2);
CREATE TYPE db1.sc1.typ AS ENUM('a');
CREATE VIEW db1.sc1.v5 AS (SELECT 'a'::db1.sc1.typ::string AS k, n2, n1 from db1.sc1.v4);
----
...
+database {0 0 db1} -> 1011
+schema {1011 0 public} -> 1012
+schema {1011 0 sc1} -> 1013
+object {1011 1012 sq1} -> 1014
+object {1011 1013 sq1} -> 1015
+object {1011 1013 t1} -> 1016
+object {1011 1012 t1} -> 1017
+object {1011 1013 v1} -> 1018
+object {1011 1013 v2} -> 1019
+object {1011 1013 v3} -> 1020
+object {1011 1013 v4} -> 1021
+object {1011 1013 typ} -> 1022
+object {1011 1013 _typ} -> 1023
+object {1011 1013 v5} -> 1024

test
DROP DATABASE db1 CASCADE
----
checking for feature: DROP DATABASE
begin transaction #1
# begin StatementPhase
## StatementPhase stage 1 of 1 with 37 MutationType ops
delete comment for descriptor #1014 of type TableCommentType
delete comment for descriptor #1017 of type TableCommentType
delete comment for descriptor #1017 of type ColumnCommentType
delete comment for descriptor #1017 of type ColumnCommentType
delete comment for descriptor #1017 of type ColumnCommentType
delete comment for descriptor #1017 of type IndexCommentType
delete comment for descriptor #1012 of type SchemaCommentType
delete comment for descriptor #1015 of type TableCommentType
delete comment for descriptor #1016 of type TableCommentType
delete comment for descriptor #1016 of type ColumnCommentType
delete comment for descriptor #1016 of type ColumnCommentType
delete comment for descriptor #1016 of type ColumnCommentType
delete comment for descriptor #1016 of type IndexCommentType
delete comment for descriptor #1018 of type TableCommentType
delete comment for descriptor #1019 of type TableCommentType
delete comment for descriptor #1020 of type TableCommentType
delete comment for descriptor #1021 of type TableCommentType
delete comment for descriptor #1024 of type TableCommentType
delete comment for descriptor #1013 of type SchemaCommentType
delete comment for descriptor #1011 of type DatabaseCommentType
delete comment for constraint on #1017, name: t1_pkey, type: PrimaryKey
delete comment for constraint on #1016, name: t1_pkey, type: PrimaryKey
delete role settings for database on #1011
# end StatementPhase
# begin PreCommitPhase
## PreCommitPhase stage 1 of 1 with 56 MutationType ops
create job #1: "schema change job"
  descriptor IDs: [1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024]
delete object namespace entry {1011 1012 sq1} -> 1014
delete object namespace entry {1011 1013 sq1} -> 1015
delete object namespace entry {1011 1013 t1} -> 1016
delete object namespace entry {1011 1012 t1} -> 1017
delete object namespace entry {1011 1013 v1} -> 1018
delete object namespace entry {1011 1013 v2} -> 1019
delete object namespace entry {1011 1013 v3} -> 1020
delete object namespace entry {1011 1013 v4} -> 1021
delete object namespace entry {1011 1013 typ} -> 1022
delete object namespace entry {1011 1013 _typ} -> 1023
delete object namespace entry {1011 1013 v5} -> 1024
upsert descriptor #1011
  ...
         withGrantOption: 2
       version: 2
  -  schemas:
  -    public:
  -      id: 1012
  -    sc1:
  -      id: 1013
  -  version: "2"
  +  schemas: {}
  +  state: DROP
  +  version: "3"
upsert descriptor #1012
  ...
         withGrantOption: 2
       version: 2
  -  version: "1"
  +  state: DROP
  +  version: "2"
upsert descriptor #1013
  ...
         withGrantOption: 2
       version: 2
  -  version: "1"
  +  state: DROP
  +  version: "2"
upsert descriptor #1014
  ...
     createAsOfTime:
       wallTime: "1"
  -  dependedOnBy:
  -  - byId: true
  -    columnIds:
  -    - 3
  -    id: 1017
     families:
     - columnIds:
  ...
     modificationTime: {}
     name: sq1
  +  newSchemaChangeJobId: "1"
     parentId: 1011
     primaryIndex:
  ...
       sequenceOwner: {}
       start: "1"
  +  state: DROP
     unexposedParentSchemaId: 1012
  -  version: "2"
  +  version: "3"
upsert descriptor #1015
  ...
     createAsOfTime:
       wallTime: "1"
  -  dependedOnBy:
  -  - byId: true
  -    columnIds:
  -    - 3
  -    id: 1016
     families:
     - columnIds:
  ...
     modificationTime: {}
     name: sq1
  +  newSchemaChangeJobId: "1"
     parentId: 1011
     primaryIndex:
  ...
       sequenceOwner: {}
       start: "1"
  +  state: DROP
     unexposedParentSchemaId: 1013
  -  version: "2"
  +  version: "3"
upsert descriptor #1016
  ...
         visibleType: 7
         width: 256
  -  - defaultExpr: nextval(1015:::REGCLASS)
  -    id: 3
  +  - id: 3
       name: val
       nullable: true
  ...
         oid: 20
         width: 64
  -    usesSequenceIds:
  -    - 1015
     createAsOfTime:
       wallTime: "1"
     dependedOnBy:
  -  - columnIds:
  -    - 2
  -    id: 1018
  +  - {}
     families:
     - columnIds:
  ...
     modificationTime: {}
     name: t1
  +  newSchemaChangeJobId: "1"
     nextColumnId: 4
     nextFamilyId: 1
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 1013
  -  version: "2"
  +  version: "3"
upsert descriptor #1017
  ...
         visibleType: 7
         width: 256
  -  - defaultExpr: nextval(1014:::REGCLASS)
  -    id: 3
  +  - id: 3
       name: val
       nullable: true
  ...
         oid: 20
         width: 64
  -    usesSequenceIds:
  -    - 1014
     createAsOfTime:
       wallTime: "1"
  +  dependedOnBy: []
     families:
     - columnIds:
  ...
     modificationTime: {}
     name: t1
  +  newSchemaChangeJobId: "1"
     nextColumnId: 4
     nextFamilyId: 1
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 1012
  -  version: "1"
  +  version: "2"
upsert descriptor #1018
  ...
     createAsOfTime:
       wallTime: "1"
  -  dependedOnBy:
  -  - columnIds:
  -    - 1
  -    id: 1019
  -  - columnIds:
  -    - 1
  -    id: 1020
  -  dependsOn:
  -  - 1016
     formatVersion: 3
     id: 1018
     modificationTime: {}
     name: v1
  +  newSchemaChangeJobId: "1"
     nextColumnId: 2
     nextMutationId: 1
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 1013
  -  version: "3"
  +  version: "4"
     viewQuery: (SELECT name FROM db1.sc1.t1)
upsert descriptor #1019
  ...
     createAsOfTime:
       wallTime: "1"
  -  dependedOnBy:
  -  - columnIds:
  -    - 1
  -    - 2
  -    id: 1020
  -  - columnIds:
  -    - 1
  -    - 2
  -    id: 1021
  -  dependsOn:
  -  - 1018
     formatVersion: 3
     id: 1019
     modificationTime: {}
     name: v2
  +  newSchemaChangeJobId: "1"
     nextColumnId: 3
     nextMutationId: 1
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 1013
  -  version: "3"
  +  version: "4"
     viewQuery: (SELECT name AS n1, name AS n2 FROM db1.sc1.v1)
upsert descriptor #1020
  ...
     createAsOfTime:
       wallTime: "1"
  -  dependsOn:
  -  - 1018
  -  - 1019
     formatVersion: 3
     id: 1020
     modificationTime: {}
     name: v3
  +  newSchemaChangeJobId: "1"
     nextColumnId: 3
     nextMutationId: 1
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 1013
  -  version: "1"
  +  version: "2"
     viewQuery: (SELECT name, n1 FROM db1.sc1.v1, db1.sc1.v2)
upsert descriptor #1021
  ...
     createAsOfTime:
       wallTime: "1"
  -  dependedOnBy:
  -  - columnIds:
  -    - 1
  -    - 2
  -    id: 1024
  -  dependsOn:
  -  - 1019
     formatVersion: 3
     id: 1021
     modificationTime: {}
     name: v4
  +  newSchemaChangeJobId: "1"
     nextColumnId: 3
     nextMutationId: 1
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 1013
  -  version: "2"
  +  version: "3"
     viewQuery: (SELECT n2, n1 FROM db1.sc1.v2)
upsert descriptor #1022
  ...
         withGrantOption: 2
       version: 2
  -  referencingDescriptorIds:
  -  - 1024
  -  version: "2"
  +  referencingDescriptorIds: []
  +  state: DROP
  +  version: "3"
upsert descriptor #1023
  ...
         withGrantOption: 2
       version: 2
  -  referencingDescriptorIds:
  -  - 1024
  -  version: "2"
  +  referencingDescriptorIds: []
  +  state: DROP
  +  version: "3"
upsert descriptor #1024
  ...
     createAsOfTime:
       wallTime: "1"
  -  dependsOn:
  -  - 1021
     dependsOnTypes:
     - 1022
  ...
     modificationTime: {}
     name: v5
  +  newSchemaChangeJobId: "1"
     nextColumnId: 4
     nextMutationId: 1
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 1013
  -  version: "1"
  +  version: "2"
     viewQuery: (SELECT 'a':::sc1.typ::STRING AS k, n2, n1 FROM db1.sc1.v4)
# end PreCommitPhase
commit transaction #1
# begin PostCommitPhase
begin transaction #2
## PostCommitNonRevertiblePhase stage 1 of 1 with 46 MutationType ops
create job #2: "GC for dropping descriptors 1014 1017 1015 1016 1018 1019 1020 1021 1024 and parent database 1011"
  descriptor IDs: [1014 1017 1015 1016 1018 1019 1020 1021 1024]
write *eventpb.DropDatabase to event log for descriptor #1011: DROP DATABASE ‹db1› CASCADE
write *eventpb.DropType to event log for descriptor #1023: DROP DATABASE ‹db1› CASCADE
update progress of schema change job #1
set schema change job #1 to non-cancellable
delete database namespace entry {0 0 db1} -> 1011
delete schema namespace entry {1011 0 public} -> 1012
delete schema namespace entry {1011 0 sc1} -> 1013
upsert descriptor #1011
  ...
       version: 2
     state: DROP
  -  version: "3"
  +  version: "4"
upsert descriptor #1014
  ...
     modificationTime: {}
     name: sq1
  -  newSchemaChangeJobId: "1"
     parentId: 1011
     primaryIndex:
  ...
     state: DROP
     unexposedParentSchemaId: 1012
  -  version: "3"
  +  version: "4"
upsert descriptor #1015
  ...
     modificationTime: {}
     name: sq1
  -  newSchemaChangeJobId: "1"
     parentId: 1011
     primaryIndex:
  ...
     state: DROP
     unexposedParentSchemaId: 1013
  -  version: "3"
  +  version: "4"
upsert descriptor #1016
  ...
     modificationTime: {}
     name: t1
  -  newSchemaChangeJobId: "1"
     nextColumnId: 4
     nextFamilyId: 1
  ...
     state: DROP
     unexposedParentSchemaId: 1013
  -  version: "3"
  +  version: "4"
upsert descriptor #1017
  ...
     modificationTime: {}
     name: t1
  -  newSchemaChangeJobId: "1"
     nextColumnId: 4
     nextFamilyId: 1
  ...
     state: DROP
     unexposedParentSchemaId: 1012
  -  version: "2"
  +  version: "3"
upsert descriptor #1018
  ...
     modificationTime: {}
     name: v1
  -  newSchemaChangeJobId: "1"
     nextColumnId: 2
     nextMutationId: 1
  ...
     state: DROP
     unexposedParentSchemaId: 1013
  -  version: "4"
  +  version: "5"
     viewQuery: (SELECT name FROM db1.sc1.t1)
upsert descriptor #1019
  ...
     modificationTime: {}
     name: v2
  -  newSchemaChangeJobId: "1"
     nextColumnId: 3
     nextMutationId: 1
  ...
     state: DROP
     unexposedParentSchemaId: 1013
  -  version: "4"
  +  version: "5"
     viewQuery: (SELECT name AS n1, name AS n2 FROM db1.sc1.v1)
upsert descriptor #1020
  ...
     modificationTime: {}
     name: v3
  -  newSchemaChangeJobId: "1"
     nextColumnId: 3
     nextMutationId: 1
  ...
     state: DROP
     unexposedParentSchemaId: 1013
  -  version: "2"
  +  version: "3"
     viewQuery: (SELECT name, n1 FROM db1.sc1.v1, db1.sc1.v2)
upsert descriptor #1021
  ...
     modificationTime: {}
     name: v4
  -  newSchemaChangeJobId: "1"
     nextColumnId: 3
     nextMutationId: 1
  ...
     state: DROP
     unexposedParentSchemaId: 1013
  -  version: "3"
  +  version: "4"
     viewQuery: (SELECT n2, n1 FROM db1.sc1.v2)
upsert descriptor #1024
  ...
     modificationTime: {}
     name: v5
  -  newSchemaChangeJobId: "1"
     nextColumnId: 4
     nextMutationId: 1
  ...
     state: DROP
     unexposedParentSchemaId: 1013
  -  version: "2"
  +  version: "3"
     viewQuery: (SELECT 'a':::sc1.typ::STRING AS k, n2, n1 FROM db1.sc1.v4)
delete descriptor #1012
delete descriptor #1013
delete descriptor #1022
delete descriptor #1023
commit transaction #2
# end PostCommitPhase
