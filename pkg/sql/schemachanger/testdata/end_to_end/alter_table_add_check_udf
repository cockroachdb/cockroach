setup
CREATE TABLE t (i INT PRIMARY KEY, b INT);
CREATE FUNCTION f(b INT) RETURNS INT LANGUAGE SQL AS $$ SELECT b + 1 $$;
----
...
+object {100 101 t} -> 104

test
ALTER TABLE t ADD CONSTRAINT check_b CHECK (f(b) > 1);
----
begin transaction #1
# begin StatementPhase
checking for feature: ALTER TABLE
increment telemetry for sql.schema.alter_table
increment telemetry for sql.schema.alter_table.add_constraint
write *eventpb.AlterTable to event log:
  mutationId: 1
  sql:
    descriptorId: 104
    statement: ALTER TABLE ‹defaultdb›.‹public›.‹t› ADD CONSTRAINT ‹check_b› CHECK (f(‹b›)
      > ‹1›)
    tag: ALTER TABLE
    user: root
  tableName: defaultdb.public.t
## StatementPhase stage 1 of 1 with 2 MutationType ops
upsert descriptor #104
   table:
  +  checks:
  +  - columnIds:
  +    - 2
  +    constraintId: 2
  +    expr: '[FUNCTION 100105](b) > 1:::INT8'
  +    name: crdb_internal_constraint_2_name_placeholder
  +    validity: Validating
     columns:
     - id: 1
  ...
     id: 104
     modificationTime: {}
  +  mutations:
  +  - constraint:
  +      check:
  +        columnIds:
  +        - 2
  +        constraintId: 2
  +        expr: '[FUNCTION 100105](b) > 1:::INT8'
  +        name: crdb_internal_constraint_2_name_placeholder
  +        validity: Validating
  +      foreignKey: {}
  +      name: crdb_internal_constraint_2_name_placeholder
  +      uniqueWithoutIndexConstraint: {}
  +    direction: ADD
  +    mutationId: 1
  +    state: WRITE_ONLY
     name: t
     nextColumnId: 3
  -  nextConstraintId: 2
  +  nextConstraintId: 3
     nextFamilyId: 1
     nextIndexId: 2
  ...
       time: {}
     unexposedParentSchemaId: 101
  -  version: "1"
  +  version: "2"
upsert descriptor #105
   function:
  +  dependedOnBy:
  +  - constraintIds:
  +    - 2
  +    id: 104
     functionBody: SELECT b + 1;
     id: 105
  ...
         oid: 20
         width: 64
  -  version: "1"
  +  version: "2"
     volatility: VOLATILE
# end StatementPhase
# begin PreCommitPhase
## PreCommitPhase stage 1 of 2 with 1 MutationType op
undo all catalog changes within txn #1
persist all catalog changes to storage
## PreCommitPhase stage 2 of 2 with 5 MutationType ops
upsert descriptor #104
   table:
  +  checks:
  +  - columnIds:
  +    - 2
  +    constraintId: 2
  +    expr: '[FUNCTION 100105](b) > 1:::INT8'
  +    name: crdb_internal_constraint_2_name_placeholder
  +    validity: Validating
     columns:
     - id: 1
  ...
     createAsOfTime:
       wallTime: "1640995200000000000"
  +  declarativeSchemaChangerState:
  +    authorization:
  +      userName: root
  +    currentStatuses: <redacted>
  +    jobId: "1"
  +    relevantStatements:
  +    - statement:
  +        redactedStatement: ALTER TABLE ‹defaultdb›.‹public›.‹t› ADD CONSTRAINT ‹check_b›
  +          CHECK (f(‹b›) > ‹1›)
  +        statement: ALTER TABLE t ADD CONSTRAINT check_b CHECK (f(b) > 1)
  +        statementTag: ALTER TABLE
  +    revertible: true
  +    targetRanks: <redacted>
  +    targets: <redacted>
     families:
     - columnIds:
  ...
     id: 104
     modificationTime: {}
  +  mutations:
  +  - constraint:
  +      check:
  +        columnIds:
  +        - 2
  +        constraintId: 2
  +        expr: '[FUNCTION 100105](b) > 1:::INT8'
  +        name: crdb_internal_constraint_2_name_placeholder
  +        validity: Validating
  +      foreignKey: {}
  +      name: crdb_internal_constraint_2_name_placeholder
  +      uniqueWithoutIndexConstraint: {}
  +    direction: ADD
  +    mutationId: 1
  +    state: WRITE_ONLY
     name: t
     nextColumnId: 3
  -  nextConstraintId: 2
  +  nextConstraintId: 3
     nextFamilyId: 1
     nextIndexId: 2
  ...
       time: {}
     unexposedParentSchemaId: 101
  -  version: "1"
  +  version: "2"
upsert descriptor #105
   function:
  +  declarativeSchemaChangerState:
  +    authorization:
  +      userName: root
  +    jobId: "1"
  +    revertible: true
  +  dependedOnBy:
  +  - constraintIds:
  +    - 2
  +    id: 104
     functionBody: SELECT b + 1;
     id: 105
  ...
         oid: 20
         width: 64
  -  version: "1"
  +  version: "2"
     volatility: VOLATILE
persist all catalog changes to storage
create job #1 (non-cancelable: false): "ALTER TABLE defaultdb.public.t ADD CONSTRAINT check_b CHECK (f(b) > 1)"
  descriptor IDs: [104 105]
# end PreCommitPhase
commit transaction #1
notified job registry to adopt jobs: [1]
# begin PostCommitPhase
begin transaction #2
commit transaction #2
begin transaction #3
## PostCommitPhase stage 1 of 2 with 1 ValidationType op
validate CHECK constraint crdb_internal_constraint_2_name_placeholder in table #104
commit transaction #3
begin transaction #4
## PostCommitPhase stage 2 of 2 with 5 MutationType ops
upsert descriptor #104
  ...
       constraintId: 2
       expr: '[FUNCTION 100105](b) > 1:::INT8'
  -    name: crdb_internal_constraint_2_name_placeholder
  -    validity: Validating
  +    name: check_b
     columns:
     - id: 1
  ...
     createAsOfTime:
       wallTime: "1640995200000000000"
  -  declarativeSchemaChangerState:
  -    authorization:
  -      userName: root
  -    currentStatuses: <redacted>
  -    jobId: "1"
  -    relevantStatements:
  -    - statement:
  -        redactedStatement: ALTER TABLE ‹defaultdb›.‹public›.‹t› ADD CONSTRAINT ‹check_b›
  -          CHECK (f(‹b›) > ‹1›)
  -        statement: ALTER TABLE t ADD CONSTRAINT check_b CHECK (f(b) > 1)
  -        statementTag: ALTER TABLE
  -    revertible: true
  -    targetRanks: <redacted>
  -    targets: <redacted>
     families:
     - columnIds:
  ...
     id: 104
     modificationTime: {}
  -  mutations:
  -  - constraint:
  -      check:
  -        columnIds:
  -        - 2
  -        constraintId: 2
  -        expr: '[FUNCTION 100105](b) > 1:::INT8'
  -        name: crdb_internal_constraint_2_name_placeholder
  -        validity: Validating
  -      foreignKey: {}
  -      name: crdb_internal_constraint_2_name_placeholder
  -      uniqueWithoutIndexConstraint: {}
  -    direction: ADD
  -    mutationId: 1
  -    state: WRITE_ONLY
     name: t
     nextColumnId: 3
  ...
       time: {}
     unexposedParentSchemaId: 101
  -  version: "2"
  +  version: "3"
upsert descriptor #105
   function:
  -  declarativeSchemaChangerState:
  -    authorization:
  -      userName: root
  -    jobId: "1"
  -    revertible: true
     dependedOnBy:
     - constraintIds:
  ...
         oid: 20
         width: 64
  -  version: "2"
  +  version: "3"
     volatility: VOLATILE
persist all catalog changes to storage
update progress of schema change job #1: "all stages completed"
set schema change job #1 to non-cancellable
updated schema change job #1 descriptor IDs to []
write *eventpb.FinishSchemaChange to event log:
  sc:
    descriptorId: 104
commit transaction #4
# end PostCommitPhase
