/* setup */
CREATE USER foo WITH LOGIN PASSWORD 'bar';
----
...

/* test */
CREATE DATABASE db;
CREATE SCHEMA db.sc AUTHORIZATION foo;
CREATE FUNCTION t() RETURNS INT LANGUAGE SQL AS $$ SELECT 1 $$;
CREATE SEQUENCE db.sc.sq1 MINVALUE 1 MAXVALUE 9223372036854775807 INCREMENT 1 START 32;
----
begin transaction #1
# begin StatementPhase
checking for feature: CREATE DATABASE
checking current user "root" has system privilege "CREATEDB" or the corresponding legacy role option
increment telemetry for sql.schema.create_database
checking role/user "root" exists
write *eventpb.CreateDatabase to event log:
  databaseName: db
  sql:
    descriptorId: 104
    statement: CREATE DATABASE ‹db›
    tag: CREATE DATABASE
    user: root
## StatementPhase stage 1 of 1 with 17 MutationType ops
add database namespace entry {0 0 db} -> 104
add schema namespace entry {104 0 public} -> 105
upsert descriptor #104
  -
  +database:
  +  defaultPrivileges: {}
  +  id: 104
  +  modificationTime: {}
  +  name: db
  +  privileges:
  +    ownerProto: root
  +    users:
  +    - privileges: "2"
  +      userProto: admin
  +      withGrantOption: "2"
  +    - privileges: "2048"
  +      userProto: public
  +    - privileges: "2"
  +      userProto: root
  +      withGrantOption: "2"
  +    version: 3
  +  schemas:
  +    public:
  +      id: 105
  +  version: "1"
upsert descriptor #105
  -
  +schema:
  +  id: 105
  +  modificationTime: {}
  +  name: public
  +  parentId: 104
  +  privileges:
  +    ownerProto: admin
  +    users:
  +    - privileges: "2"
  +      userProto: admin
  +      withGrantOption: "2"
  +    - privileges: "516"
  +      userProto: public
  +    - privileges: "2"
  +      userProto: root
  +      withGrantOption: "2"
  +    version: 3
  +  version: "1"
checking for feature: CREATE SCHEMA
increment telemetry for sql.schema.create_schema
checking role/user "foo" exists
write *eventpb.CreateSchema to event log:
  owner: foo
  schemaName: db.sc
  sql:
    descriptorId: 106
    statement: CREATE SCHEMA ‹db›.‹sc› AUTHORIZATION foo
    tag: CREATE SCHEMA
    user: root
## StatementPhase stage 1 of 1 with 8 MutationType ops
add schema namespace entry {104 0 sc} -> 106
upsert descriptor #106
  -
  +schema:
  +  id: 106
  +  modificationTime: {}
  +  name: sc
  +  parentId: 104
  +  privileges:
  +    ownerProto: foo
  +    users:
  +    - privileges: "2"
  +      userProto: admin
  +      withGrantOption: "2"
  +    - privileges: "2"
  +      userProto: root
  +      withGrantOption: "2"
  +    version: 3
  +  version: "1"
upsert descriptor #104
  ...
       public:
         id: 105
  +    sc:
  +      id: 106
     version: "1"
checking for feature: CREATE FUNCTION
increment telemetry for sql.schema.create_function
write *eventpb.CreateFunction to event log:
  functionName: defaultdb.public.t
  sql:
    descriptorId: 107
    statement: "CREATE FUNCTION ‹defaultdb›.‹public›.‹t›()\n\tRETURNS INT8\n\tLANGUAGE SQL\n\tAS $$SELECT ‹1›;$$"
    tag: CREATE FUNCTION
    user: root
## StatementPhase stage 1 of 1 with 11 MutationType ops
upsert descriptor #107
  -
  +function:
  +  functionBody: SELECT 1;
  +  id: 107
  +  lang: SQL
  +  modificationTime: {}
  +  name: t
  +  nullInputBehavior: CALLED_ON_NULL_INPUT
  +  params: []
  +  parentId: 100
  +  parentSchemaId: 101
  +  privileges:
  +    ownerProto: root
  +    users:
  +    - privileges: "2"
  +      userProto: admin
  +      withGrantOption: "2"
  +    - privileges: "1048576"
  +      userProto: public
  +    - privileges: "2"
  +      userProto: root
  +      withGrantOption: "2"
  +    version: 3
  +  returnType:
  +    type:
  +      family: IntFamily
  +      oid: 20
  +      width: 64
  +  version: "1"
  +  volatility: VOLATILE
upsert descriptor #101
   schema:
  +  functions:
  +    t:
  +      signatures:
  +      - argTypes: []
  +        id: 107
  +        returnType:
  +          family: IntFamily
  +          oid: 20
  +          width: 64
     id: 101
     modificationTime: {}
  ...
         withGrantOption: "2"
       version: 3
  -  version: "1"
  +  version: "2"
checking for feature: CREATE SEQUENCE
write *eventpb.CreateSequence to event log:
  sequenceName: db.sc.sq1
  sql:
    descriptorId: 108
    statement: CREATE SEQUENCE ‹db›.‹sc›.‹sq1› MINVALUE 1 MAXVALUE 9223372036854775807 INCREMENT 1 START 32
    tag: CREATE SEQUENCE
    user: root
## StatementPhase stage 1 of 1 with 24 MutationType ops
initializing sequence 108 with starting value of 31
add object namespace entry {104 106 sq1} -> 108
upsert descriptor #108
  -
  +table:
  +  checks: []
  +  columns:
  +  - id: 1
  +    name: value
  +    type:
  +      family: IntFamily
  +      oid: 20
  +      width: 64
  +  createAsOfTime: {}
  +  formatVersion: 3
  +  id: 108
  +  modificationTime: {}
  +  mutations: []
  +  name: sq1
  +  nextColumnId: 2
  +  nextConstraintId: 1
  +  nextIndexId: 2
  +  parentId: 104
  +  primaryIndex:
  +    createdExplicitly: true
  +    encodingType: 1
  +    foreignKey: {}
  +    geoConfig: {}
  +    id: 1
  +    interleave: {}
  +    keyColumnDirections:
  +    - ASC
  +    keyColumnIds:
  +    - 1
  +    keyColumnNames:
  +    - value
  +    name: primary
  +    partitioning: {}
  +    sharded: {}
  +    storeColumnNames: []
  +    unique: true
  +    version: 4
  +  privileges:
  +    ownerProto: root
  +    users:
  +    - privileges: "2"
  +      userProto: admin
  +      withGrantOption: "2"
  +    - privileges: "2"
  +      userProto: root
  +      withGrantOption: "2"
  +    version: 3
  +  replacementOf:
  +    time: {}
  +  sequenceOpts:
  +    cacheSize: "1"
  +    increment: "1"
  +    maxValue: "9223372036854775807"
  +    minValue: "1"
  +    sequenceOwner: {}
  +    start: "32"
  +  unexposedParentSchemaId: 106
  +  version: "1"
# end StatementPhase
# begin PreCommitPhase
## PreCommitPhase stage 1 of 2 with 1 MutationType op
undo all catalog changes within txn #1
persist all catalog changes to storage
## PreCommitPhase stage 2 of 2 with 60 MutationType ops
initializing sequence 108 with starting value of 31
add database namespace entry {0 0 db} -> 104
add schema namespace entry {104 0 public} -> 105
add schema namespace entry {104 0 sc} -> 106
add object namespace entry {104 106 sq1} -> 108
upsert descriptor #104
  -
  +database:
  +  defaultPrivileges: {}
  +  id: 104
  +  modificationTime: {}
  +  name: db
  +  privileges:
  +    ownerProto: root
  +    users:
  +    - privileges: "2"
  +      userProto: admin
  +      withGrantOption: "2"
  +    - privileges: "2048"
  +      userProto: public
  +    - privileges: "2"
  +      userProto: root
  +      withGrantOption: "2"
  +    version: 3
  +  schemas:
  +    public:
  +      id: 105
  +    sc:
  +      id: 106
  +  version: "1"
upsert descriptor #105
  -
  +schema:
  +  id: 105
  +  modificationTime: {}
  +  name: public
  +  parentId: 104
  +  privileges:
  +    ownerProto: admin
  +    users:
  +    - privileges: "2"
  +      userProto: admin
  +      withGrantOption: "2"
  +    - privileges: "516"
  +      userProto: public
  +    - privileges: "2"
  +      userProto: root
  +      withGrantOption: "2"
  +    version: 3
  +  version: "1"
upsert descriptor #106
  -
  +schema:
  +  id: 106
  +  modificationTime: {}
  +  name: sc
  +  parentId: 104
  +  privileges:
  +    ownerProto: foo
  +    users:
  +    - privileges: "2"
  +      userProto: admin
  +      withGrantOption: "2"
  +    - privileges: "2"
  +      userProto: root
  +      withGrantOption: "2"
  +    version: 3
  +  version: "1"
upsert descriptor #107
  -
  +function:
  +  functionBody: SELECT 1;
  +  id: 107
  +  lang: SQL
  +  modificationTime: {}
  +  name: t
  +  nullInputBehavior: CALLED_ON_NULL_INPUT
  +  params: []
  +  parentId: 100
  +  parentSchemaId: 101
  +  privileges:
  +    ownerProto: root
  +    users:
  +    - privileges: "2"
  +      userProto: admin
  +      withGrantOption: "2"
  +    - privileges: "1048576"
  +      userProto: public
  +    - privileges: "2"
  +      userProto: root
  +      withGrantOption: "2"
  +    version: 3
  +  returnType:
  +    type:
  +      family: IntFamily
  +      oid: 20
  +      width: 64
  +  version: "1"
  +  volatility: VOLATILE
upsert descriptor #108
  -
  +table:
  +  checks: []
  +  columns:
  +  - id: 1
  +    name: value
  +    type:
  +      family: IntFamily
  +      oid: 20
  +      width: 64
  +  createAsOfTime: {}
  +  formatVersion: 3
  +  id: 108
  +  modificationTime: {}
  +  mutations: []
  +  name: sq1
  +  nextColumnId: 2
  +  nextConstraintId: 1
  +  nextIndexId: 2
  +  parentId: 104
  +  primaryIndex:
  +    createdExplicitly: true
  +    encodingType: 1
  +    foreignKey: {}
  +    geoConfig: {}
  +    id: 1
  +    interleave: {}
  +    keyColumnDirections:
  +    - ASC
  +    keyColumnIds:
  +    - 1
  +    keyColumnNames:
  +    - value
  +    name: primary
  +    partitioning: {}
  +    sharded: {}
  +    storeColumnNames: []
  +    unique: true
  +    version: 4
  +  privileges:
  +    ownerProto: root
  +    users:
  +    - privileges: "2"
  +      userProto: admin
  +      withGrantOption: "2"
  +    - privileges: "2"
  +      userProto: root
  +      withGrantOption: "2"
  +    version: 3
  +  replacementOf:
  +    time: {}
  +  sequenceOpts:
  +    cacheSize: "1"
  +    increment: "1"
  +    maxValue: "9223372036854775807"
  +    minValue: "1"
  +    sequenceOwner: {}
  +    start: "32"
  +  unexposedParentSchemaId: 106
  +  version: "1"
upsert descriptor #101
   schema:
  +  functions:
  +    t:
  +      signatures:
  +      - argTypes: []
  +        id: 107
  +        returnType:
  +          family: IntFamily
  +          oid: 20
  +          width: 64
     id: 101
     modificationTime: {}
  ...
         withGrantOption: "2"
       version: 3
  -  version: "1"
  +  version: "2"
persist all catalog changes to storage
# end PreCommitPhase
commit transaction #1
