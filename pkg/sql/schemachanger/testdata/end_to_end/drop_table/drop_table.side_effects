/* setup */
CREATE DATABASE db;
CREATE SCHEMA db.sc;
CREATE TABLE db.sc.t (k INT, v STRING);
COMMENT ON TABLE db.sc.t IS 't has a comment';
CREATE TYPE db.sc.e AS ENUM('a', 'b', 'c');
----
...
+database {0 0 db} -> 10000
+schema {10000 0 public} -> 10001
+schema {10000 0 sc} -> 10002
+object {10000 10002 t} -> 10003
+object {10000 10002 e} -> 10004
+object {10000 10002 _e} -> 10005

/* test */
DROP TABLE db.sc.t;
----
begin transaction #1
# begin StatementPhase
checking for feature: DROP TABLE
increment telemetry for sql.schema.drop_table
write *eventpb.DropTable to event log:
  sql:
    descriptorId: 10003
    statement: DROP TABLE ‹db›.‹sc›.‹t›
    tag: DROP TABLE
    user: root
  tableName: db.sc.t
## StatementPhase stage 1 of 1 with 38 MutationType ops
delete object namespace entry {10000 10002 t} -> 10003
upsert descriptor #10003
  ...
     createAsOfTime:
       wallTime: "1640995200000000000"
  +  dropTime: <redacted>"
     families:
     - columnIds:
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 10002
  -  version: "1"
  +  version: "2"
delete comment TableCommentType(objID: 10003, subID: 0)
# end StatementPhase
# begin PreCommitPhase
## PreCommitPhase stage 1 of 2 with 1 MutationType op
undo all catalog changes within txn #1
persist all catalog changes to storage
## PreCommitPhase stage 2 of 2 with 40 MutationType ops
delete object namespace entry {10000 10002 t} -> 10003
upsert descriptor #10003
  ...
     createAsOfTime:
       wallTime: "1640995200000000000"
  +  declarativeSchemaChangerState:
  +    authorization:
  +      userName: root
  +    currentStatuses: <redacted>
  +    jobId: "1"
  +    nameMapping:
  +      id: 10003
  +      name: t
  +    relevantStatements:
  +    - statement:
  +        redactedStatement: DROP TABLE ‹db›.‹sc›.‹t›
  +        statement: DROP TABLE db.sc.t
  +        statementTag: DROP TABLE
  +    targetRanks: <redacted>
  +    targets: <redacted>
  +  dropTime: <redacted>"
     families:
     - columnIds:
  ...
     replacementOf:
       time: {}
  +  state: DROP
     unexposedParentSchemaId: 10002
  -  version: "1"
  +  version: "2"
delete comment TableCommentType(objID: 10003, subID: 0)
persist all catalog changes to storage
create job #1 (non-cancelable: true): "DROP TABLE db.sc.t"
  descriptor IDs: [10003]
# end PreCommitPhase
commit transaction #1
notified job registry to adopt jobs: [1]
# begin PostCommitPhase
begin transaction #2
commit transaction #2
begin transaction #3
## PostCommitNonRevertiblePhase stage 1 of 1 with 4 MutationType ops
upsert descriptor #10003
  ...
     createAsOfTime:
       wallTime: "1640995200000000000"
  -  declarativeSchemaChangerState:
  -    authorization:
  -      userName: root
  -    currentStatuses: <redacted>
  -    jobId: "1"
  -    nameMapping:
  -      id: 10003
  -      name: t
  -    relevantStatements:
  -    - statement:
  -        redactedStatement: DROP TABLE ‹db›.‹sc›.‹t›
  -        statement: DROP TABLE db.sc.t
  -        statementTag: DROP TABLE
  -    targetRanks: <redacted>
  -    targets: <redacted>
     dropTime: <redacted>"
     families:
  ...
     state: DROP
     unexposedParentSchemaId: 10002
  -  version: "2"
  +  version: "3"
persist all catalog changes to storage
create job #2 (non-cancelable: true): "GC for DROP TABLE db.sc.t"
  descriptor IDs: [10003]
update progress of schema change job #1: "all stages completed"
set schema change job #1 to non-cancellable
updated schema change job #1 descriptor IDs to []
write *eventpb.FinishSchemaChange to event log:
  sc:
    descriptorId: 10003
commit transaction #3
notified job registry to adopt jobs: [2]
# end PostCommitPhase
