/* setup */
CREATE DATABASE db;
CREATE SCHEMA db.sc;
----
...
+database {0 0 db} -> 104
+schema {104 0 public} -> 105
+schema {104 0 sc} -> 106

/* test */
DROP SCHEMA db.sc;
----
begin transaction #1
# begin StatementPhase
checking for feature: DROP SCHEMA
increment telemetry for sql.schema.drop_schema
increment telemetry for sql.uds.drop_schema
getting all objects in schema: 106
write *eventpb.DropSchema to event log:
  schemaName: db.sc
  sql:
    descriptorId: 106
    statement: DROP SCHEMA ‹db›.‹sc›
    tag: DROP SCHEMA
    user: root
## StatementPhase stage 1 of 1 with 6 MutationType ops
delete schema namespace entry {104 0 sc} -> 106
upsert descriptor #104
  ...
       public:
         id: 105
  -    sc:
  -      id: 106
  -  version: "2"
  +  version: "3"
upsert descriptor #106
  ...
         withGrantOption: "2"
       version: 2
  -  version: "1"
  +  state: DROP
  +  version: "2"
# end StatementPhase
# begin PreCommitPhase
## PreCommitPhase stage 1 of 2 with 1 MutationType op
undo all catalog changes within txn #1
persist all catalog changes to storage
## PreCommitPhase stage 2 of 2 with 9 MutationType ops
delete schema namespace entry {104 0 sc} -> 106
upsert descriptor #104
   database:
  +  declarativeSchemaChangerState:
  +    authorization:
  +      userName: root
  +    jobId: "1"
  +    nameMapping:
  +      id: 104
  +      name: db
     defaultPrivileges: {}
     id: 104
  ...
       public:
         id: 105
  -    sc:
  -      id: 106
  -  version: "2"
  +  version: "3"
upsert descriptor #106
   schema:
  +  declarativeSchemaChangerState:
  +    authorization:
  +      userName: root
  +    currentStatuses: <redacted>
  +    jobId: "1"
  +    nameMapping:
  +      id: 106
  +      name: sc
  +    relevantStatements:
  +    - statement:
  +        redactedStatement: DROP SCHEMA ‹db›.‹sc›
  +        statement: DROP SCHEMA db.sc
  +        statementTag: DROP SCHEMA
  +    targetRanks: <redacted>
  +    targets: <redacted>
     id: 106
     modificationTime: {}
  ...
         withGrantOption: "2"
       version: 2
  -  version: "1"
  +  state: DROP
  +  version: "2"
persist all catalog changes to storage
create job #1 (non-cancelable: true): "DROP SCHEMA db.sc"
  descriptor IDs: [104 106]
# end PreCommitPhase
commit transaction #1
notified job registry to adopt jobs: [1]
# begin PostCommitPhase
begin transaction #2
commit transaction #2
begin transaction #3
## PostCommitNonRevertiblePhase stage 1 of 1 with 4 MutationType ops
upsert descriptor #104
   database:
  -  declarativeSchemaChangerState:
  -    authorization:
  -      userName: root
  -    jobId: "1"
  -    nameMapping:
  -      id: 104
  -      name: db
     defaultPrivileges: {}
     id: 104
  ...
       public:
         id: 105
  -  version: "3"
  +  version: "4"
delete descriptor #106
persist all catalog changes to storage
update progress of schema change job #1: "all stages completed"
set schema change job #1 to non-cancellable
updated schema change job #1 descriptor IDs to []
write *eventpb.FinishSchemaChange to event log:
  sc:
    descriptorId: 106
commit transaction #3
# end PostCommitPhase
