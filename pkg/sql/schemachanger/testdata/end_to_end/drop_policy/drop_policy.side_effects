/* setup */
CREATE TABLE t1 (tenant_id uuid, c1 int);
CREATE USER user1;
CREATE USER user2;
CREATE POLICY "policy 1" on t1 AS PERMISSIVE FOR ALL TO PUBLIC USING (true);
CREATE POLICY "policy 2" on t1 AS PERMISSIVE FOR INSERT TO user1,user2 WITH CHECK (true);
----
...
+object {100 101 t1} -> 104

/* test */
DROP POLICY "policy 2" on t1;
----
begin transaction #1
# begin StatementPhase
checking for feature: DROP POLICY
increment telemetry for sql.schema.drop_policy
write *eventpb.DropPolicy to event log:
  policyName: policy 2
  sql:
    descriptorId: 104
    statement: DROP POLICY ‹"policy 2"› ON ‹t1›
    tag: DROP POLICY
    user: root
  tableName: defaultdb.public.t1
## StatementPhase stage 1 of 1 with 5 MutationType ops
upsert descriptor #104
  ...
       type: PERMISSIVE
       usingExpr: "true"
  -  - command: INSERT
  -    id: 2
  -    name: policy 2
  -    roleNames:
  -    - user1
  -    - user2
  -    type: PERMISSIVE
  -    withCheckExpr: "true"
     primaryIndex:
       constraintId: 1
  ...
       time: {}
     unexposedParentSchemaId: 101
  -  version: "3"
  +  version: "4"
# end StatementPhase
# begin PreCommitPhase
## PreCommitPhase stage 1 of 2 with 1 MutationType op
undo all catalog changes within txn #1
persist all catalog changes to storage
## PreCommitPhase stage 2 of 2 with 5 MutationType ops
upsert descriptor #104
  ...
       type: PERMISSIVE
       usingExpr: "true"
  -  - command: INSERT
  -    id: 2
  -    name: policy 2
  -    roleNames:
  -    - user1
  -    - user2
  -    type: PERMISSIVE
  -    withCheckExpr: "true"
     primaryIndex:
       constraintId: 1
  ...
       time: {}
     unexposedParentSchemaId: 101
  -  version: "3"
  +  version: "4"
persist all catalog changes to storage
# end PreCommitPhase
commit transaction #1
