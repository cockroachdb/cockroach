/* setup */
CREATE SEQUENCE s;
CREATE TYPE typ AS ENUM ('a', 'b');
CREATE TABLE t (i INT PRIMARY KEY, j STRING);

/* test */
EXPLAIN (DDL) ALTER TABLE t ADD CHECK (i > nextval('s') OR j::typ = 'a');
----
Schema change plan for ALTER TABLE ‹defaultdb›.‹public›.‹t› ADD CHECK ((‹i› > nextval(‹'s'›)) OR (‹j›::‹typ› = ‹'a'›));
 ├── StatementPhase
 │    └── Stage 1 of 1 in StatementPhase
 │         ├── 2 elements transitioning toward PUBLIC
 │         │    ├── ABSENT → WRITE_ONLY CheckConstraint:{DescID: 10003 (t), ReferencedTypeIDs: [10001 (typ), 10002 (_typ)], IndexID: 0, ConstraintID: 2 (check_i_j+), ReferencedSequenceIDs: [10000 (s)]}
 │         │    └── ABSENT → PUBLIC     ConstraintWithoutIndexName:{DescID: 10003 (t), Name: "check_i_j", ConstraintID: 2 (check_i_j+)}
 │         └── 4 Mutation operations
 │              ├── AddCheckConstraint {"CheckExpr":"(i \u003e nextval(100...","ConstraintID":2,"TableID":10003,"Validity":2}
 │              ├── UpdateTableBackReferencesInTypes {"BackReferencedTableID":10003}
 │              ├── UpdateTableBackReferencesInSequences {"BackReferencedTableID":10003}
 │              └── SetConstraintName {"ConstraintID":2,"Name":"check_i_j","TableID":10003}
 ├── PreCommitPhase
 │    ├── Stage 1 of 2 in PreCommitPhase
 │    │    ├── 2 elements transitioning toward PUBLIC
 │    │    │    ├── WRITE_ONLY → ABSENT CheckConstraint:{DescID: 10003 (t), ReferencedTypeIDs: [10001 (typ), 10002 (_typ)], IndexID: 0, ConstraintID: 2 (check_i_j+), ReferencedSequenceIDs: [10000 (s)]}
 │    │    │    └── PUBLIC     → ABSENT ConstraintWithoutIndexName:{DescID: 10003 (t), Name: "check_i_j", ConstraintID: 2 (check_i_j+)}
 │    │    └── 1 Mutation operation
 │    │         └── UndoAllInTxnImmediateMutationOpSideEffects
 │    └── Stage 2 of 2 in PreCommitPhase
 │         ├── 2 elements transitioning toward PUBLIC
 │         │    ├── ABSENT → WRITE_ONLY CheckConstraint:{DescID: 10003 (t), ReferencedTypeIDs: [10001 (typ), 10002 (_typ)], IndexID: 0, ConstraintID: 2 (check_i_j+), ReferencedSequenceIDs: [10000 (s)]}
 │         │    └── ABSENT → PUBLIC     ConstraintWithoutIndexName:{DescID: 10003 (t), Name: "check_i_j", ConstraintID: 2 (check_i_j+)}
 │         └── 9 Mutation operations
 │              ├── AddCheckConstraint {"CheckExpr":"(i \u003e nextval(100...","ConstraintID":2,"TableID":10003,"Validity":2}
 │              ├── UpdateTableBackReferencesInTypes {"BackReferencedTableID":10003}
 │              ├── UpdateTableBackReferencesInSequences {"BackReferencedTableID":10003}
 │              ├── SetConstraintName {"ConstraintID":2,"Name":"check_i_j","TableID":10003}
 │              ├── SetJobStateOnDescriptor {"DescriptorID":10000,"Initialize":true}
 │              ├── SetJobStateOnDescriptor {"DescriptorID":10001,"Initialize":true}
 │              ├── SetJobStateOnDescriptor {"DescriptorID":10002,"Initialize":true}
 │              ├── SetJobStateOnDescriptor {"DescriptorID":10003,"Initialize":true}
 │              └── CreateSchemaChangerJob {"RunningStatus":"PostCommitPhase ..."}
 └── PostCommitPhase
      ├── Stage 1 of 2 in PostCommitPhase
      │    ├── 1 element transitioning toward PUBLIC
      │    │    └── WRITE_ONLY → VALIDATED CheckConstraint:{DescID: 10003 (t), ReferencedTypeIDs: [10001 (typ), 10002 (_typ)], IndexID: 0, ConstraintID: 2 (check_i_j+), ReferencedSequenceIDs: [10000 (s)]}
      │    └── 1 Validation operation
      │         └── ValidateConstraint {"ConstraintID":2,"TableID":10003}
      └── Stage 2 of 2 in PostCommitPhase
           ├── 1 element transitioning toward PUBLIC
           │    └── VALIDATED → PUBLIC CheckConstraint:{DescID: 10003 (t), ReferencedTypeIDs: [10001 (typ), 10002 (_typ)], IndexID: 0, ConstraintID: 2 (check_i_j+), ReferencedSequenceIDs: [10000 (s)]}
           └── 6 Mutation operations
                ├── MakeValidatedCheckConstraintPublic {"ConstraintID":2,"TableID":10003}
                ├── RemoveJobStateFromDescriptor {"DescriptorID":10000}
                ├── RemoveJobStateFromDescriptor {"DescriptorID":10001}
                ├── RemoveJobStateFromDescriptor {"DescriptorID":10002}
                ├── RemoveJobStateFromDescriptor {"DescriptorID":10003}
                └── UpdateSchemaChangerJob {"IsNonCancelable":true,"RunningStatus":"all stages compl..."}
