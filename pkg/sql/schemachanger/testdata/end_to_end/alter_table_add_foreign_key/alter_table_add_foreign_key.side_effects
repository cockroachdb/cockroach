/* setup */
CREATE TABLE t1 (i INT PRIMARY KEY);
CREATE TABLE t2 (i INT PRIMARY KEY);
INSERT INTO t2 (i) VALUES(-1), (-2), (-3);
INSERT INTO t1 (i) VALUES(-1), (-2), (-3);
----
...
+object {100 101 t1} -> 104
+object {100 101 t2} -> 105

/* test */
ALTER TABLE t1 ADD FOREIGN KEY (i) REFERENCES t2(i);
----
begin transaction #1
# begin StatementPhase
checking for feature: ALTER TABLE
increment telemetry for sql.schema.alter_table
increment telemetry for sql.schema.alter_table.add_constraint
write *eventpb.AlterTable to event log:
  mutationId: 1
  sql:
    descriptorId: 104
    statement: ALTER TABLE ‹defaultdb›.‹public›.‹t1› ADD CONSTRAINT ‹t1_i_fkey› FOREIGN
      KEY (‹i›) REFERENCES ‹defaultdb›.‹public›.‹t2› (‹i›)
    tag: ALTER TABLE
    user: root
  tableName: defaultdb.public.t1
## StatementPhase stage 1 of 1 with 2 MutationType ops
upsert descriptor #104
  ...
     id: 104
     modificationTime: {}
  +  mutations:
  +  - constraint:
  +      check: {}
  +      constraintType: FOREIGN_KEY
  +      foreignKey:
  +        constraintId: 2
  +        name: t1_i_fkey
  +        originColumnIds:
  +        - 1
  +        originTableId: 104
  +        referencedColumnIds:
  +        - 1
  +        referencedTableId: 105
  +        validity: Validating
  +      name: crdb_internal_constraint_2_name_placeholder
  +      uniqueWithoutIndexConstraint: {}
  +    direction: ADD
  +    mutationId: 1
  +    state: WRITE_ONLY
     name: t1
     nextColumnId: 2
  -  nextConstraintId: 2
  +  nextConstraintId: 3
     nextFamilyId: 1
     nextIndexId: 2
  ...
       time: {}
     unexposedParentSchemaId: 101
  -  version: "1"
  +  version: "2"
upsert descriptor #105
  ...
     formatVersion: 3
     id: 105
  +  inboundFks:
  +  - constraintId: 2
  +    name: t1_i_fkey
  +    originColumnIds:
  +    - 1
  +    originTableId: 104
  +    referencedColumnIds:
  +    - 1
  +    referencedTableId: 105
  +    validity: Validating
     modificationTime: {}
     name: t2
  ...
       time: {}
     unexposedParentSchemaId: 101
  -  version: "1"
  +  version: "2"
# end StatementPhase
# begin PreCommitPhase
## PreCommitPhase stage 1 of 2 with 1 MutationType op
undo all catalog changes within txn #1
persist all catalog changes to storage
## PreCommitPhase stage 2 of 2 with 5 MutationType ops
upsert descriptor #104
  ...
     createAsOfTime:
       wallTime: "1640995200000000000"
  +  declarativeSchemaChangerState:
  +    authorization:
  +      userName: root
  +    currentStatuses: <redacted>
  +    jobId: "1"
  +    nameMapping:
  +      columns:
  +        "1": i
  +        "4294967294": tableoid
  +        "4294967295": crdb_internal_mvcc_timestamp
  +      constraints:
  +        "2": t1_i_fkey
  +      families:
  +        "0": primary
  +      id: 104
  +      indexes:
  +        "1": t1_pkey
  +      name: t1
  +    relevantStatements:
  +    - statement:
  +        redactedStatement: ALTER TABLE ‹defaultdb›.‹public›.‹t1› ADD CONSTRAINT ‹t1_i_fkey›
  +          FOREIGN KEY (‹i›) REFERENCES ‹defaultdb›.‹public›.‹t2› (‹i›)
  +        statement: ALTER TABLE t1 ADD FOREIGN KEY (i) REFERENCES t2 (i)
  +        statementTag: ALTER TABLE
  +    revertible: true
  +    targetRanks: <redacted>
  +    targets: <redacted>
     families:
     - columnIds:
  ...
     id: 104
     modificationTime: {}
  +  mutations:
  +  - constraint:
  +      check: {}
  +      constraintType: FOREIGN_KEY
  +      foreignKey:
  +        constraintId: 2
  +        name: t1_i_fkey
  +        originColumnIds:
  +        - 1
  +        originTableId: 104
  +        referencedColumnIds:
  +        - 1
  +        referencedTableId: 105
  +        validity: Validating
  +      name: crdb_internal_constraint_2_name_placeholder
  +      uniqueWithoutIndexConstraint: {}
  +    direction: ADD
  +    mutationId: 1
  +    state: WRITE_ONLY
     name: t1
     nextColumnId: 2
  -  nextConstraintId: 2
  +  nextConstraintId: 3
     nextFamilyId: 1
     nextIndexId: 2
  ...
       time: {}
     unexposedParentSchemaId: 101
  -  version: "1"
  +  version: "2"
upsert descriptor #105
  ...
     createAsOfTime:
       wallTime: "1640995200000000000"
  +  declarativeSchemaChangerState:
  +    authorization:
  +      userName: root
  +    jobId: "1"
  +    nameMapping:
  +      columns:
  +        "1": i
  +        "4294967294": tableoid
  +        "4294967295": crdb_internal_mvcc_timestamp
  +      families:
  +        "0": primary
  +      id: 105
  +      indexes:
  +        "1": t2_pkey
  +      name: t2
  +    revertible: true
     families:
     - columnIds:
  ...
     formatVersion: 3
     id: 105
  +  inboundFks:
  +  - constraintId: 2
  +    name: t1_i_fkey
  +    originColumnIds:
  +    - 1
  +    originTableId: 104
  +    referencedColumnIds:
  +    - 1
  +    referencedTableId: 105
  +    validity: Validating
     modificationTime: {}
     name: t2
  ...
       time: {}
     unexposedParentSchemaId: 101
  -  version: "1"
  +  version: "2"
persist all catalog changes to storage
create job #1 (non-cancelable: false): "ALTER TABLE defaultdb.public.t1 ADD CONSTRAINT t1_i_fkey FOREIGN KEY (i) REFERENCES defaultdb.public.t2 (i)"
  descriptor IDs: [104 105]
# end PreCommitPhase
commit transaction #1
notified job registry to adopt jobs: [1]
# begin PostCommitPhase
begin transaction #2
commit transaction #2
begin transaction #3
## PostCommitPhase stage 1 of 2 with 1 ValidationType op
validate FOREIGN KEY constraint t1_i_fkey in table #104
commit transaction #3
begin transaction #4
## PostCommitPhase stage 2 of 2 with 4 MutationType ops
upsert descriptor #104
  ...
     createAsOfTime:
       wallTime: "1640995200000000000"
  -  declarativeSchemaChangerState:
  -    authorization:
  -      userName: root
  -    currentStatuses: <redacted>
  -    jobId: "1"
  -    nameMapping:
  -      columns:
  -        "1": i
  -        "4294967294": tableoid
  -        "4294967295": crdb_internal_mvcc_timestamp
  -      constraints:
  -        "2": t1_i_fkey
  -      families:
  -        "0": primary
  -      id: 104
  -      indexes:
  -        "1": t1_pkey
  -      name: t1
  -    relevantStatements:
  -    - statement:
  -        redactedStatement: ALTER TABLE ‹defaultdb›.‹public›.‹t1› ADD CONSTRAINT ‹t1_i_fkey›
  -          FOREIGN KEY (‹i›) REFERENCES ‹defaultdb›.‹public›.‹t2› (‹i›)
  -        statement: ALTER TABLE t1 ADD FOREIGN KEY (i) REFERENCES t2 (i)
  -        statementTag: ALTER TABLE
  -    revertible: true
  -    targetRanks: <redacted>
  -    targets: <redacted>
     families:
     - columnIds:
  ...
     id: 104
     modificationTime: {}
  -  mutations:
  -  - constraint:
  -      check: {}
  -      constraintType: FOREIGN_KEY
  -      foreignKey:
  -        constraintId: 2
  -        name: t1_i_fkey
  -        originColumnIds:
  -        - 1
  -        originTableId: 104
  -        referencedColumnIds:
  -        - 1
  -        referencedTableId: 105
  -        validity: Validating
  -      name: crdb_internal_constraint_2_name_placeholder
  -      uniqueWithoutIndexConstraint: {}
  -    direction: ADD
  -    mutationId: 1
  -    state: WRITE_ONLY
     name: t1
     nextColumnId: 2
  ...
     nextIndexId: 2
     nextMutationId: 1
  +  outboundFks:
  +  - constraintId: 2
  +    name: t1_i_fkey
  +    originColumnIds:
  +    - 1
  +    originTableId: 104
  +    referencedColumnIds:
  +    - 1
  +    referencedTableId: 105
     parentId: 100
     primaryIndex:
  ...
       time: {}
     unexposedParentSchemaId: 101
  -  version: "2"
  +  version: "3"
upsert descriptor #105
  ...
     createAsOfTime:
       wallTime: "1640995200000000000"
  -  declarativeSchemaChangerState:
  -    authorization:
  -      userName: root
  -    jobId: "1"
  -    nameMapping:
  -      columns:
  -        "1": i
  -        "4294967294": tableoid
  -        "4294967295": crdb_internal_mvcc_timestamp
  -      families:
  -        "0": primary
  -      id: 105
  -      indexes:
  -        "1": t2_pkey
  -      name: t2
  -    revertible: true
     families:
     - columnIds:
  ...
       - 1
       referencedTableId: 105
  -    validity: Validating
     modificationTime: {}
     name: t2
  ...
       time: {}
     unexposedParentSchemaId: 101
  -  version: "2"
  +  version: "3"
persist all catalog changes to storage
update progress of schema change job #1: "all stages completed"
set schema change job #1 to non-cancellable
updated schema change job #1 descriptor IDs to []
write *eventpb.FinishSchemaChange to event log:
  sc:
    descriptorId: 104
commit transaction #4
# end PostCommitPhase
