create-table
CREATE TABLE defaultdb.customers (id INT PRIMARY KEY, email STRING UNIQUE);
----

create-table
CREATE TABLE IF NOT EXISTS defaultdb.orders (
    id INT PRIMARY KEY,
    customer INT UNIQUE NOT NULL REFERENCES customers (id),
    orderTotal DECIMAL(9,2),
    INDEX (customer)
  );
----

create-sequence
CREATE SEQUENCE defaultdb.SQ2;
----

create-table
CREATE TABLE defaultdb.shipments (
    tracking_number UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    carrier STRING,
    status STRING,
    customer_id INT,
    randcol INT DEFAULT nextval('defaultdb.sq2'),
    CONSTRAINT fk_customers FOREIGN KEY (customer_id) REFERENCES customers(id),
    CONSTRAINT fk_orders FOREIGN KEY (customer_id) REFERENCES orders(customer)
  );
----

create-sequence
CREATE SEQUENCE defaultdb.SQ1 OWNED BY defaultdb.shipments.carrier
----

create-view
CREATE VIEW v1 as (select customer_id, carrier from defaultdb.shipments);
----

ops
DROP TABLE defaultdb.shipments CASCADE;
----
Stage 1 of 3
  transitions:
    [Table:{DescID: 57}, PUBLIC, DROP] -> TXN_DROPPED
    [ColumnName:{DescID: 57, ColumnID: 1, Name: tracking_number}, PUBLIC, DROP] -> ABSENT
    [Column:{DescID: 57, ColumnID: 1}, PUBLIC, DROP] -> DELETE_AND_WRITE_ONLY
    [ColumnName:{DescID: 57, ColumnID: 2, Name: carrier}, PUBLIC, DROP] -> ABSENT
    [Column:{DescID: 57, ColumnID: 2}, PUBLIC, DROP] -> DELETE_AND_WRITE_ONLY
    [ColumnName:{DescID: 57, ColumnID: 3, Name: status}, PUBLIC, DROP] -> ABSENT
    [Column:{DescID: 57, ColumnID: 3}, PUBLIC, DROP] -> DELETE_AND_WRITE_ONLY
    [ColumnName:{DescID: 57, ColumnID: 4, Name: customer_id}, PUBLIC, DROP] -> ABSENT
    [Column:{DescID: 57, ColumnID: 4}, PUBLIC, DROP] -> DELETE_AND_WRITE_ONLY
    [ColumnName:{DescID: 57, ColumnID: 5, Name: randcol}, PUBLIC, DROP] -> ABSENT
    [Column:{DescID: 57, ColumnID: 5}, PUBLIC, DROP] -> DELETE_AND_WRITE_ONLY
    [PrimaryIndex:{DescID: 57, IndexID: 1}, PUBLIC, DROP] -> DELETE_AND_WRITE_ONLY
    [IndexName:{DescID: 57, IndexID: 1, Name: shipments_pkey}, PUBLIC, DROP] -> ABSENT
    [Locality:{DescID: 57}, PUBLIC, DROP] -> ABSENT
    [View:{DescID: 59}, PUBLIC, DROP] -> TXN_DROPPED
    [Locality:{DescID: 59}, PUBLIC, DROP] -> ABSENT
  ops:
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 57
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 59
Stage 2 of 3 (non-revertible)
  transitions:
    [Table:{DescID: 57}, TXN_DROPPED, DROP] -> DROPPED
    [Namespace:{DescID: 57, Name: shipments}, PUBLIC, DROP] -> ABSENT
    [Owner:{DescID: 57}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 57, Username: admin}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 57, Username: public}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 57, Username: root}, PUBLIC, DROP] -> ABSENT
    [Column:{DescID: 57, ColumnID: 1}, DELETE_AND_WRITE_ONLY, DROP] -> DELETE_ONLY
    [DefaultExpression:{DescID: 57, ColumnID: 1}, PUBLIC, DROP] -> ABSENT
    [Column:{DescID: 57, ColumnID: 2}, DELETE_AND_WRITE_ONLY, DROP] -> DELETE_ONLY
    [SequenceOwnedBy:{DescID: 58, ReferencedDescID: 57}, PUBLIC, DROP] -> ABSENT
    [Column:{DescID: 57, ColumnID: 3}, DELETE_AND_WRITE_ONLY, DROP] -> DELETE_ONLY
    [Column:{DescID: 57, ColumnID: 4}, DELETE_AND_WRITE_ONLY, DROP] -> DELETE_ONLY
    [Column:{DescID: 57, ColumnID: 5}, DELETE_AND_WRITE_ONLY, DROP] -> DELETE_ONLY
    [DefaultExpression:{DescID: 57, ColumnID: 5}, PUBLIC, DROP] -> ABSENT
    [RelationDependedOnBy:{DescID: 56, ReferencedDescID: 57}, PUBLIC, DROP] -> ABSENT
    [PrimaryIndex:{DescID: 57, IndexID: 1}, DELETE_AND_WRITE_ONLY, DROP] -> DELETE_ONLY
    [ForeignKey:{DescID: 57, ReferencedDescID: 54, Name: fk_customers}, PUBLIC, DROP] -> ABSENT
    [ForeignKey:{DescID: 57, ReferencedDescID: 55, Name: fk_orders}, PUBLIC, DROP] -> ABSENT
    [RelationDependedOnBy:{DescID: 57, ReferencedDescID: 59}, PUBLIC, DROP] -> ABSENT
    [View:{DescID: 59}, TXN_DROPPED, DROP] -> DROPPED
    [Namespace:{DescID: 59, Name: v1}, PUBLIC, DROP] -> ABSENT
    [Owner:{DescID: 59}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 59, Username: admin}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 59, Username: public}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 59, Username: root}, PUBLIC, DROP] -> ABSENT
  ops:
    *scop.MarkDescriptorAsDropped
      DescID: 57
    *scop.DrainDescriptorName
      TableID: 57
    *scop.RemoveColumnDefaultExpression
      ColumnID: 1
      TableID: 57
    *scop.UpdateRelationDeps
      TableID: 57
    *scop.RemoveSequenceOwnedBy
      TableID: 58
    *scop.RemoveColumnDefaultExpression
      ColumnID: 5
      TableID: 57
    *scop.UpdateRelationDeps
      TableID: 57
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 57
      TableID: 56
    *scop.MarkDescriptorAsDropped
      DescID: 59
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 59
      TableID: 57
    *scop.DrainDescriptorName
      TableID: 59
Stage 3 of 3 (non-revertible)
  transitions:
    [Table:{DescID: 57}, DROPPED, DROP] -> ABSENT
    [Column:{DescID: 57, ColumnID: 1}, DELETE_ONLY, DROP] -> ABSENT
    [Column:{DescID: 57, ColumnID: 2}, DELETE_ONLY, DROP] -> ABSENT
    [Column:{DescID: 57, ColumnID: 3}, DELETE_ONLY, DROP] -> ABSENT
    [Column:{DescID: 57, ColumnID: 4}, DELETE_ONLY, DROP] -> ABSENT
    [Column:{DescID: 57, ColumnID: 5}, DELETE_ONLY, DROP] -> ABSENT
    [PrimaryIndex:{DescID: 57, IndexID: 1}, DELETE_ONLY, DROP] -> ABSENT
    [View:{DescID: 59}, DROPPED, DROP] -> ABSENT
  ops:
    *scop.LogEvent
      DescID: 57
      Direction: 2
      Element:
        table:
          tableId: 57
      Metadata:
        Statement: DROP TABLE defaultdb.shipments CASCADE
        TargetMetadata:
          SourceElementID: 1
          SubWorkID: 1
        Username: root
    *scop.CreateGcJobForDescriptor
      DescID: 57
    *scop.LogEvent
      DescID: 59
      Direction: 2
      Element:
        view:
          tableId: 59
      Metadata:
        Statement: DROP TABLE defaultdb.shipments CASCADE
        TargetMetadata:
          SourceElementID: 3
          SubWorkID: 1
        Username: root
    *scop.CreateGcJobForDescriptor
      DescID: 59

deps
DROP TABLE defaultdb.shipments CASCADE;
----
- from: [DefaultExpression:{DescID: 57, ColumnID: 1}, ABSENT]
  to:   [Table:{DescID: 57}, DROPPED]
  kind: SameStage
  rule: dependency needs relation/type as non-synthetically dropped
- from: [DefaultExpression:{DescID: 57, ColumnID: 5}, ABSENT]
  to:   [Table:{DescID: 57}, DROPPED]
  kind: SameStage
  rule: dependency needs relation/type as non-synthetically dropped
- from: [ForeignKey:{DescID: 57, ReferencedDescID: 54, Name: fk_customers}, ABSENT]
  to:   [Table:{DescID: 57}, DROPPED]
  kind: SameStage
  rule: dependency needs relation/type as non-synthetically dropped
- from: [ForeignKey:{DescID: 57, ReferencedDescID: 55, Name: fk_orders}, ABSENT]
  to:   [Table:{DescID: 57}, DROPPED]
  kind: SameStage
  rule: dependency needs relation/type as non-synthetically dropped
- from: [Namespace:{DescID: 57, Name: shipments}, ABSENT]
  to:   [Table:{DescID: 57}, DROPPED]
  kind: HappensAfter
  rule: namespace needs descriptor to be dropped
- from: [Namespace:{DescID: 59, Name: v1}, ABSENT]
  to:   [View:{DescID: 59}, DROPPED]
  kind: HappensAfter
  rule: namespace needs descriptor to be dropped
- from: [Owner:{DescID: 57}, ABSENT]
  to:   [Table:{DescID: 57}, DROPPED]
  kind: HappensAfter
  rule: table deps removal happens after table marked as dropped
- from: [Owner:{DescID: 59}, ABSENT]
  to:   [View:{DescID: 59}, DROPPED]
  kind: HappensAfter
  rule: table deps removal happens after table marked as dropped
- from: [RelationDependedOnBy:{DescID: 56, ReferencedDescID: 57}, ABSENT]
  to:   [Table:{DescID: 57}, DROPPED]
  kind: SameStage
  rule: dependency needs relation/type as non-synthetically dropped
- from: [RelationDependedOnBy:{DescID: 57, ReferencedDescID: 59}, ABSENT]
  to:   [Table:{DescID: 57}, DROPPED]
  kind: SameStage
  rule: dependency needs relation/type as non-synthetically dropped
- from: [RelationDependedOnBy:{DescID: 57, ReferencedDescID: 59}, ABSENT]
  to:   [View:{DescID: 59}, DROPPED]
  kind: SameStage
  rule: dependency needs relation/type as non-synthetically dropped
- from: [Table:{DescID: 57}, ABSENT]
  to:   [Namespace:{DescID: 57, Name: shipments}, ABSENT]
  kind: HappensAfter
  rule: descriptor can only be cleaned up once the name is drained
- from: [UserPrivileges:{DescID: 57, Username: admin}, ABSENT]
  to:   [Table:{DescID: 57}, DROPPED]
  kind: HappensAfter
  rule: table deps removal happens after table marked as dropped
- from: [UserPrivileges:{DescID: 57, Username: public}, ABSENT]
  to:   [Table:{DescID: 57}, DROPPED]
  kind: HappensAfter
  rule: table deps removal happens after table marked as dropped
- from: [UserPrivileges:{DescID: 57, Username: root}, ABSENT]
  to:   [Table:{DescID: 57}, DROPPED]
  kind: HappensAfter
  rule: table deps removal happens after table marked as dropped
- from: [UserPrivileges:{DescID: 59, Username: admin}, ABSENT]
  to:   [View:{DescID: 59}, DROPPED]
  kind: HappensAfter
  rule: table deps removal happens after table marked as dropped
- from: [UserPrivileges:{DescID: 59, Username: public}, ABSENT]
  to:   [View:{DescID: 59}, DROPPED]
  kind: HappensAfter
  rule: table deps removal happens after table marked as dropped
- from: [UserPrivileges:{DescID: 59, Username: root}, ABSENT]
  to:   [View:{DescID: 59}, DROPPED]
  kind: HappensAfter
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 59}, ABSENT]
  to:   [Namespace:{DescID: 59, Name: v1}, ABSENT]
  kind: HappensAfter
  rule: descriptor can only be cleaned up once the name is drained
