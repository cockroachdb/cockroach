create-table
CREATE TABLE defaultdb.t1 (id INT PRIMARY KEY, name varchar(256), money int)
----

ops
CREATE INDEX id1 on defaultdb.t1(id, name) storing (money)
----
Stage 0
  transitions:
    [SecondaryIndex:{DescID: 52, Name: id1, IndexID: 2}, ABSENT, ADD] -> DELETE_ONLY
  ops:
    *scop.MakeAddedIndexDeleteOnly
      IndexID: 2
      IndexName: id1
      KeyColumnDirections:
      - 0
      - 0
      KeyColumnIDs:
      - 1
      - 2
      SecondaryIndex: true
      StoreColumnIDs:
      - 3
      TableID: 52
Stage 1
  transitions:
    [SecondaryIndex:{DescID: 52, Name: id1, IndexID: 2}, DELETE_ONLY, ADD] -> DELETE_AND_WRITE_ONLY
  ops:
    *scop.MakeAddedIndexDeleteAndWriteOnly
      IndexID: 2
      TableID: 52
Stage 2
  transitions:
    [SecondaryIndex:{DescID: 52, Name: id1, IndexID: 2}, DELETE_AND_WRITE_ONLY, ADD] -> BACKFILLED
  ops:
    *scop.BackfillIndex
      IndexID: 2
      TableID: 52
Stage 3
  transitions:
    [SecondaryIndex:{DescID: 52, Name: id1, IndexID: 2}, BACKFILLED, ADD] -> VALIDATED
  ops:
    *scop.ValidateUniqueIndex
      IndexID: 2
      TableID: 52
Stage 4
  transitions:
    [SecondaryIndex:{DescID: 52, Name: id1, IndexID: 2}, VALIDATED, ADD] -> PUBLIC
  ops:
    *scop.MakeAddedSecondaryIndexPublic
      IndexID: 2
      TableID: 52

deps
CREATE INDEX id1 on  defaultdb.t1(id, name) storing (money)
----

ops
CREATE INVERTED INDEX concurrently id1 on defaultdb.t1(id, name) storing (money)
----
Stage 0
  transitions:
    [SecondaryIndex:{DescID: 52, Name: id1, IndexID: 2}, ABSENT, ADD] -> DELETE_ONLY
  ops:
    *scop.MakeAddedIndexDeleteOnly
      Concurrently: true
      IndexID: 2
      IndexName: id1
      Inverted: true
      KeyColumnDirections:
      - 0
      - 0
      KeyColumnIDs:
      - 1
      - 2
      SecondaryIndex: true
      StoreColumnIDs:
      - 3
      TableID: 52
Stage 1
  transitions:
    [SecondaryIndex:{DescID: 52, Name: id1, IndexID: 2}, DELETE_ONLY, ADD] -> DELETE_AND_WRITE_ONLY
  ops:
    *scop.MakeAddedIndexDeleteAndWriteOnly
      IndexID: 2
      TableID: 52
Stage 2
  transitions:
    [SecondaryIndex:{DescID: 52, Name: id1, IndexID: 2}, DELETE_AND_WRITE_ONLY, ADD] -> BACKFILLED
  ops:
    *scop.BackfillIndex
      IndexID: 2
      TableID: 52
Stage 3
  transitions:
    [SecondaryIndex:{DescID: 52, Name: id1, IndexID: 2}, BACKFILLED, ADD] -> VALIDATED
  ops:
    *scop.ValidateUniqueIndex
      IndexID: 2
      TableID: 52
Stage 4
  transitions:
    [SecondaryIndex:{DescID: 52, Name: id1, IndexID: 2}, VALIDATED, ADD] -> PUBLIC
  ops:
    *scop.MakeAddedSecondaryIndexPublic
      IndexID: 2
      TableID: 52

deps
CREATE INDEX id1 on  defaultdb.t1(id, name) storing (money)
----

ops
CREATE INDEX id1 on  defaultdb.t1(id, name) storing (money) PARTITION BY LIST (id) (
                                                              PARTITION p1 VALUES IN (1)
                                                            )
----
Stage 0
  transitions:
    [SecondaryIndex:{DescID: 52, Name: id1, IndexID: 2}, ABSENT, ADD] -> DELETE_ONLY
  ops:
    *scop.MakeAddedIndexDeleteOnly
      IndexID: 2
      IndexName: id1
      KeyColumnDirections:
      - 0
      - 0
      KeyColumnIDs:
      - 1
      - 2
      SecondaryIndex: true
      StoreColumnIDs:
      - 3
      TableID: 52
Stage 1
  transitions:
    [SecondaryIndex:{DescID: 52, Name: id1, IndexID: 2}, DELETE_ONLY, ADD] -> DELETE_AND_WRITE_ONLY
  ops:
    *scop.MakeAddedIndexDeleteAndWriteOnly
      IndexID: 2
      TableID: 52
Stage 2
  transitions:
    [SecondaryIndex:{DescID: 52, Name: id1, IndexID: 2}, DELETE_AND_WRITE_ONLY, ADD] -> BACKFILLED
  ops:
    *scop.BackfillIndex
      IndexID: 2
      TableID: 52
Stage 3
  transitions:
    [SecondaryIndex:{DescID: 52, Name: id1, IndexID: 2}, BACKFILLED, ADD] -> VALIDATED
  ops:
    *scop.ValidateUniqueIndex
      IndexID: 2
      TableID: 52
Stage 4
  transitions:
    [SecondaryIndex:{DescID: 52, Name: id1, IndexID: 2}, VALIDATED, ADD] -> PUBLIC
  ops:
    *scop.MakeAddedSecondaryIndexPublic
      IndexID: 2
      TableID: 52

deps
CREATE INDEX id1 on  defaultdb.t1(id, name) storing (money) PARTITION BY LIST (id) (
                                                              PARTITION p1 VALUES IN (1)
                                                            )
----
