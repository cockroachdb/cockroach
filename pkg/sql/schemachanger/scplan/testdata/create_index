setup
CREATE TABLE defaultdb.t1 (id INT PRIMARY KEY, name varchar(256), money int)
----

ops
CREATE INDEX id1 ON defaultdb.t1 (id, name) STORING (money)
----
StatementPhase stage 1 of 1 with 2 MutationType ops
  transitions:
    [[SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, PUBLIC], ABSENT] -> BACKFILL_ONLY
    [[TemporaryIndex:{DescID: 104, IndexID: 3}, TRANSIENT_ABSENT], ABSENT] -> DELETE_ONLY
  ops:
    *scop.MakeAddedIndexBackfilling
      Index:
        IndexID: 2
        KeyColumnDirections:
        - 0
        - 0
        KeyColumnIDs:
        - 1
        - 2
        SourceIndexID: 1
        StoringColumnIDs:
        - 3
        TableID: 104
        TemporaryIndexID: 3
      IsSecondaryIndex: true
    *scop.MakeAddedTempIndexDeleteOnly
      Index:
        IndexID: 3
        KeyColumnDirections:
        - 0
        - 0
        KeyColumnIDs:
        - 1
        - 2
        SourceIndexID: 1
        StoringColumnIDs:
        - 3
        TableID: 104
      IsSecondaryIndex: true
PreCommitPhase stage 1 of 1 with 2 MutationType ops
  transitions:
  ops:
    *scop.SetJobStateOnDescriptor
      DescriptorID: 104
      Initialize: true
    *scop.CreateSchemaChangerJob
      Authorization:
        UserName: root
      DescriptorIDs:
      - 104
      JobID: 1
      RunningStatus: PostCommitPhase stage 1 of 7 with 1 MutationType op pending
      Statements:
      - statement: CREATE INDEX id1 ON defaultdb.t1 (id, name) STORING (money)
        redactedstatement: CREATE INDEX ‹id1› ON ‹defaultdb›.public.‹t1› (‹id›, ‹name›)
          STORING (‹money›)
        statementtag: CREATE INDEX
PostCommitPhase stage 1 of 7 with 3 MutationType ops
  transitions:
    [[TemporaryIndex:{DescID: 104, IndexID: 3}, TRANSIENT_ABSENT], DELETE_ONLY] -> WRITE_ONLY
  ops:
    *scop.MakeAddedIndexDeleteAndWriteOnly
      IndexID: 3
      TableID: 104
    *scop.SetJobStateOnDescriptor
      DescriptorID: 104
    *scop.UpdateSchemaChangerJob
      JobID: 1
PostCommitPhase stage 2 of 7 with 1 BackfillType op
  transitions:
    [[SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, PUBLIC], BACKFILL_ONLY] -> BACKFILLED
  ops:
    *scop.BackfillIndex
      IndexID: 2
      SourceIndexID: 1
      TableID: 104
PostCommitPhase stage 3 of 7 with 3 MutationType ops
  transitions:
    [[SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, PUBLIC], BACKFILLED] -> DELETE_ONLY
  ops:
    *scop.MakeBackfillingIndexDeleteOnly
      IndexID: 2
      TableID: 104
    *scop.SetJobStateOnDescriptor
      DescriptorID: 104
    *scop.UpdateSchemaChangerJob
      JobID: 1
PostCommitPhase stage 4 of 7 with 3 MutationType ops
  transitions:
    [[SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, PUBLIC], DELETE_ONLY] -> MERGE_ONLY
  ops:
    *scop.MakeAddedIndexDeleteAndWriteOnly
      IndexID: 2
      TableID: 104
    *scop.SetJobStateOnDescriptor
      DescriptorID: 104
    *scop.UpdateSchemaChangerJob
      JobID: 1
PostCommitPhase stage 5 of 7 with 1 BackfillType op
  transitions:
    [[SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, PUBLIC], MERGE_ONLY] -> MERGED
  ops:
    *scop.MergeIndex
      BackfilledIndexID: 2
      TableID: 104
      TemporaryIndexID: 3
PostCommitPhase stage 6 of 7 with 1 ValidationType op
  transitions:
    [[SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, PUBLIC], MERGED] -> VALIDATED
  ops:
    *scop.ValidateUniqueIndex
      IndexID: 2
      TableID: 104
PostCommitPhase stage 7 of 7 with 4 MutationType ops
  transitions:
    [[SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, PUBLIC], VALIDATED] -> PUBLIC
    [[IndexName:{DescID: 104, Name: id1, IndexID: 2}, PUBLIC], ABSENT] -> PUBLIC
  ops:
    *scop.SetIndexName
      IndexID: 2
      Name: id1
      TableID: 104
    *scop.MakeAddedSecondaryIndexPublic
      IndexID: 2
      TableID: 104
    *scop.SetJobStateOnDescriptor
      DescriptorID: 104
    *scop.UpdateSchemaChangerJob
      IsNonCancelable: true
      JobID: 1
PostCommitNonRevertiblePhase stage 1 of 2 with 3 MutationType ops
  transitions:
    [[TemporaryIndex:{DescID: 104, IndexID: 3}, TRANSIENT_ABSENT], WRITE_ONLY] -> TRANSIENT_DELETE_ONLY
  ops:
    *scop.MakeDroppedIndexDeleteOnly
      IndexID: 3
      TableID: 104
    *scop.SetJobStateOnDescriptor
      DescriptorID: 104
    *scop.UpdateSchemaChangerJob
      IsNonCancelable: true
      JobID: 1
PostCommitNonRevertiblePhase stage 2 of 2 with 4 MutationType ops
  transitions:
    [[TemporaryIndex:{DescID: 104, IndexID: 3}, TRANSIENT_ABSENT], TRANSIENT_DELETE_ONLY] -> TRANSIENT_ABSENT
  ops:
    *scop.CreateGcJobForIndex
      IndexID: 3
      TableID: 104
    *scop.MakeIndexAbsent
      IndexID: 3
      TableID: 104
    *scop.RemoveJobStateFromDescriptor
      DescriptorID: 104
      JobID: 1
    *scop.UpdateSchemaChangerJob
      IsNonCancelable: true
      JobID: 1

deps
CREATE INDEX id1 ON defaultdb.t1 (id, name) STORING (money)
----
- from: [IndexName:{DescID: 104, Name: id1, IndexID: 2}, PUBLIC]
  to:   [SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, PUBLIC]
  kind: SameStagePrecedence
  rule: index named right before index becomes public
- from: [SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, BACKFILL_ONLY]
  to:   [IndexName:{DescID: 104, Name: id1, IndexID: 2}, PUBLIC]
  kind: Precedence
  rule: index existence precedes index dependents
- from: [TemporaryIndex:{DescID: 104, IndexID: 3}, WRITE_ONLY]
  to:   [SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, BACKFILLED]
  kind: Precedence
  rule: temp index is WRITE_ONLY before backfill

ops
CREATE INVERTED INDEX CONCURRENTLY id1 ON defaultdb.t1 (id, name) STORING (money)
----
StatementPhase stage 1 of 1 with 2 MutationType ops
  transitions:
    [[SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, PUBLIC], ABSENT] -> BACKFILL_ONLY
    [[TemporaryIndex:{DescID: 104, IndexID: 3}, TRANSIENT_ABSENT], ABSENT] -> DELETE_ONLY
  ops:
    *scop.MakeAddedIndexBackfilling
      Index:
        IndexID: 2
        IsConcurrently: true
        IsInverted: true
        KeyColumnDirections:
        - 0
        - 0
        KeyColumnIDs:
        - 1
        - 2
        SourceIndexID: 1
        StoringColumnIDs:
        - 3
        TableID: 104
        TemporaryIndexID: 3
      IsSecondaryIndex: true
    *scop.MakeAddedTempIndexDeleteOnly
      Index:
        IndexID: 3
        IsConcurrently: true
        IsInverted: true
        KeyColumnDirections:
        - 0
        - 0
        KeyColumnIDs:
        - 1
        - 2
        SourceIndexID: 1
        StoringColumnIDs:
        - 3
        TableID: 104
      IsSecondaryIndex: true
PreCommitPhase stage 1 of 1 with 2 MutationType ops
  transitions:
  ops:
    *scop.SetJobStateOnDescriptor
      DescriptorID: 104
      Initialize: true
    *scop.CreateSchemaChangerJob
      Authorization:
        UserName: root
      DescriptorIDs:
      - 104
      JobID: 1
      RunningStatus: PostCommitPhase stage 1 of 7 with 1 MutationType op pending
      Statements:
      - statement: CREATE INVERTED INDEX CONCURRENTLY id1 ON defaultdb.t1 (id, name) STORING
          (money)
        redactedstatement: CREATE INVERTED INDEX CONCURRENTLY ‹id1› ON ‹defaultdb›.public.‹t1›
          (‹id›, ‹name›) STORING (‹money›)
        statementtag: CREATE INDEX
PostCommitPhase stage 1 of 7 with 3 MutationType ops
  transitions:
    [[TemporaryIndex:{DescID: 104, IndexID: 3}, TRANSIENT_ABSENT], DELETE_ONLY] -> WRITE_ONLY
  ops:
    *scop.MakeAddedIndexDeleteAndWriteOnly
      IndexID: 3
      TableID: 104
    *scop.SetJobStateOnDescriptor
      DescriptorID: 104
    *scop.UpdateSchemaChangerJob
      JobID: 1
PostCommitPhase stage 2 of 7 with 1 BackfillType op
  transitions:
    [[SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, PUBLIC], BACKFILL_ONLY] -> BACKFILLED
  ops:
    *scop.BackfillIndex
      IndexID: 2
      SourceIndexID: 1
      TableID: 104
PostCommitPhase stage 3 of 7 with 3 MutationType ops
  transitions:
    [[SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, PUBLIC], BACKFILLED] -> DELETE_ONLY
  ops:
    *scop.MakeBackfillingIndexDeleteOnly
      IndexID: 2
      TableID: 104
    *scop.SetJobStateOnDescriptor
      DescriptorID: 104
    *scop.UpdateSchemaChangerJob
      JobID: 1
PostCommitPhase stage 4 of 7 with 3 MutationType ops
  transitions:
    [[SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, PUBLIC], DELETE_ONLY] -> MERGE_ONLY
  ops:
    *scop.MakeAddedIndexDeleteAndWriteOnly
      IndexID: 2
      TableID: 104
    *scop.SetJobStateOnDescriptor
      DescriptorID: 104
    *scop.UpdateSchemaChangerJob
      JobID: 1
PostCommitPhase stage 5 of 7 with 1 BackfillType op
  transitions:
    [[SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, PUBLIC], MERGE_ONLY] -> MERGED
  ops:
    *scop.MergeIndex
      BackfilledIndexID: 2
      TableID: 104
      TemporaryIndexID: 3
PostCommitPhase stage 6 of 7 with 1 ValidationType op
  transitions:
    [[SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, PUBLIC], MERGED] -> VALIDATED
  ops:
    *scop.ValidateUniqueIndex
      IndexID: 2
      TableID: 104
PostCommitPhase stage 7 of 7 with 4 MutationType ops
  transitions:
    [[SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, PUBLIC], VALIDATED] -> PUBLIC
    [[IndexName:{DescID: 104, Name: id1, IndexID: 2}, PUBLIC], ABSENT] -> PUBLIC
  ops:
    *scop.SetIndexName
      IndexID: 2
      Name: id1
      TableID: 104
    *scop.MakeAddedSecondaryIndexPublic
      IndexID: 2
      TableID: 104
    *scop.SetJobStateOnDescriptor
      DescriptorID: 104
    *scop.UpdateSchemaChangerJob
      IsNonCancelable: true
      JobID: 1
PostCommitNonRevertiblePhase stage 1 of 2 with 3 MutationType ops
  transitions:
    [[TemporaryIndex:{DescID: 104, IndexID: 3}, TRANSIENT_ABSENT], WRITE_ONLY] -> TRANSIENT_DELETE_ONLY
  ops:
    *scop.MakeDroppedIndexDeleteOnly
      IndexID: 3
      TableID: 104
    *scop.SetJobStateOnDescriptor
      DescriptorID: 104
    *scop.UpdateSchemaChangerJob
      IsNonCancelable: true
      JobID: 1
PostCommitNonRevertiblePhase stage 2 of 2 with 4 MutationType ops
  transitions:
    [[TemporaryIndex:{DescID: 104, IndexID: 3}, TRANSIENT_ABSENT], TRANSIENT_DELETE_ONLY] -> TRANSIENT_ABSENT
  ops:
    *scop.CreateGcJobForIndex
      IndexID: 3
      TableID: 104
    *scop.MakeIndexAbsent
      IndexID: 3
      TableID: 104
    *scop.RemoveJobStateFromDescriptor
      DescriptorID: 104
      JobID: 1
    *scop.UpdateSchemaChangerJob
      IsNonCancelable: true
      JobID: 1

deps
CREATE INDEX id1 ON defaultdb.t1 (id, name) STORING (money)
----
- from: [IndexName:{DescID: 104, Name: id1, IndexID: 2}, PUBLIC]
  to:   [SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, PUBLIC]
  kind: SameStagePrecedence
  rule: index named right before index becomes public
- from: [SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, BACKFILL_ONLY]
  to:   [IndexName:{DescID: 104, Name: id1, IndexID: 2}, PUBLIC]
  kind: Precedence
  rule: index existence precedes index dependents
- from: [TemporaryIndex:{DescID: 104, IndexID: 3}, WRITE_ONLY]
  to:   [SecondaryIndex:{DescID: 104, IndexID: 2, ConstraintID: 0, TemporaryIndexID: 3}, BACKFILLED]
  kind: Precedence
  rule: temp index is WRITE_ONLY before backfill
