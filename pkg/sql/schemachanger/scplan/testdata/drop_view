create-table
CREATE TABLE defaultdb.t1 (id INT PRIMARY KEY, name varchar(256))
----

create-view
CREATE VIEW defaultdb.v1 AS (SELECT name FROM defaultdb.t1)
----

ops
DROP VIEW defaultdb.v1
----
StatementPhase stage 1 of 1 with 2 MutationType ops
  transitions:
    [[View:{DescID: 105}, ABSENT], PUBLIC] -> TXN_DROPPED
    [[TableComment:{DescID: 105}, ABSENT], PUBLIC] -> ABSENT
  ops:
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 105
    *scop.RemoveTableComment
      TableID: 105
PreCommitPhase stage 1 of 1 with 6 MutationType ops
  transitions:
    [[View:{DescID: 105}, ABSENT], TXN_DROPPED] -> DROPPED
    [[Namespace:{DescID: 105, Name: v1}, ABSENT], PUBLIC] -> ABSENT
    [[Owner:{DescID: 105}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 105, Username: admin}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 105, Username: public}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 105, Username: root}, ABSENT], PUBLIC] -> ABSENT
    [[Locality:{DescID: 105}, ABSENT], PUBLIC] -> ABSENT
    [[RelationDependedOnBy:{DescID: 104, ReferencedDescID: 105}, ABSENT], PUBLIC] -> ABSENT
  ops:
    *scop.MarkDescriptorAsDropped
      DescID: 105
    *scop.DrainDescriptorName
      TableID: 105
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 105
      TableID: 104
    *scop.SetJobStateOnDescriptor
      DescriptorID: 104
      Initialize: true
    *scop.SetJobStateOnDescriptor
      DescriptorID: 105
      Initialize: true
    *scop.CreateSchemaChangerJob
      Authorization:
        UserName: root
      DescriptorIDs:
      - 104
      - 105
      JobID: 1
      Statements:
      - statement: DROP VIEW defaultdb.v1
        redactedstatement: DROP VIEW ‹defaultdb›.public.‹v1›
        statementtag: DROP VIEW
PostCommitNonRevertiblePhase stage 1 of 1 with 5 MutationType ops
  transitions:
    [[View:{DescID: 105}, ABSENT], DROPPED] -> ABSENT
  ops:
    *scop.LogEvent
      Authorization:
        UserName: root
      Element:
        View:
          tableId: 105
      Statement: DROP VIEW ‹defaultdb›.public.‹v1›
      StatementTag: DROP VIEW
      TargetMetadata:
        SourceElementID: 1
        SubWorkID: 1
      TargetStatus: 1
    *scop.CreateGcJobForTable
      TableID: 105
    *scop.RemoveJobStateFromDescriptor
      DescriptorID: 104
      JobID: 1
    *scop.RemoveJobStateFromDescriptor
      DescriptorID: 105
      JobID: 1
    *scop.UpdateSchemaChangerJob
      IsNonCancelable: true
      JobID: 1

deps
DROP VIEW defaultdb.v1
----
- from: [Namespace:{DescID: 105, Name: v1}, ABSENT]
  to:   [View:{DescID: 105}, ABSENT]
  kind: Precedence
  rule: name must drain before descriptor deletion
- from: [View:{DescID: 105}, DROPPED]
  to:   [Locality:{DescID: 105}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 105}, DROPPED]
  to:   [Namespace:{DescID: 105, Name: v1}, ABSENT]
  kind: Precedence
  rule: descriptor must be dropped before draining name
- from: [View:{DescID: 105}, DROPPED]
  to:   [Owner:{DescID: 105}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 105}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 104, ReferencedDescID: 105}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 105}, DROPPED]
  to:   [UserPrivileges:{DescID: 105, Username: admin}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 105}, DROPPED]
  to:   [UserPrivileges:{DescID: 105, Username: public}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 105}, DROPPED]
  to:   [UserPrivileges:{DescID: 105, Username: root}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal

create-view
CREATE VIEW defaultdb.v2 AS (SELECT name AS n1, name AS n2 FROM v1)
----

create-view
CREATE VIEW defaultdb.v3 AS (SELECT name, n1 FROM v1, v2);
----

create-view
CREATE VIEW defaultdb.v4 AS (SELECT n2, n1 FROM v2);
----

create-type
CREATE TYPE defaultdb.typ AS ENUM('a')
----

create-view
CREATE VIEW v5 AS (SELECT 'a'::defaultdb.typ::string AS k, n2, n1 from defaultdb.v4)
----

ops
DROP VIEW defaultdb.v1 CASCADE
----
StatementPhase stage 1 of 1 with 10 MutationType ops
  transitions:
    [[View:{DescID: 105}, ABSENT], PUBLIC] -> TXN_DROPPED
    [[TableComment:{DescID: 105}, ABSENT], PUBLIC] -> ABSENT
    [[View:{DescID: 106}, ABSENT], PUBLIC] -> TXN_DROPPED
    [[TableComment:{DescID: 106}, ABSENT], PUBLIC] -> ABSENT
    [[View:{DescID: 107}, ABSENT], PUBLIC] -> TXN_DROPPED
    [[TableComment:{DescID: 107}, ABSENT], PUBLIC] -> ABSENT
    [[View:{DescID: 108}, ABSENT], PUBLIC] -> TXN_DROPPED
    [[TableComment:{DescID: 108}, ABSENT], PUBLIC] -> ABSENT
    [[View:{DescID: 111}, ABSENT], PUBLIC] -> TXN_DROPPED
    [[TableComment:{DescID: 111}, ABSENT], PUBLIC] -> ABSENT
  ops:
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 105
    *scop.RemoveTableComment
      TableID: 105
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 106
    *scop.RemoveTableComment
      TableID: 106
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 107
    *scop.RemoveTableComment
      TableID: 107
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 108
    *scop.RemoveTableComment
      TableID: 108
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 111
    *scop.RemoveTableComment
      TableID: 111
PreCommitPhase stage 1 of 1 with 25 MutationType ops
  transitions:
    [[View:{DescID: 105}, ABSENT], TXN_DROPPED] -> DROPPED
    [[Namespace:{DescID: 105, Name: v1}, ABSENT], PUBLIC] -> ABSENT
    [[Owner:{DescID: 105}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 105, Username: admin}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 105, Username: public}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 105, Username: root}, ABSENT], PUBLIC] -> ABSENT
    [[Locality:{DescID: 105}, ABSENT], PUBLIC] -> ABSENT
    [[RelationDependedOnBy:{DescID: 104, ReferencedDescID: 105}, ABSENT], PUBLIC] -> ABSENT
    [[RelationDependedOnBy:{DescID: 105, ReferencedDescID: 106}, ABSENT], PUBLIC] -> ABSENT
    [[RelationDependedOnBy:{DescID: 105, ReferencedDescID: 107}, ABSENT], PUBLIC] -> ABSENT
    [[View:{DescID: 106}, ABSENT], TXN_DROPPED] -> DROPPED
    [[Namespace:{DescID: 106, Name: v2}, ABSENT], PUBLIC] -> ABSENT
    [[Owner:{DescID: 106}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 106, Username: admin}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 106, Username: public}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 106, Username: root}, ABSENT], PUBLIC] -> ABSENT
    [[Locality:{DescID: 106}, ABSENT], PUBLIC] -> ABSENT
    [[RelationDependedOnBy:{DescID: 106, ReferencedDescID: 107}, ABSENT], PUBLIC] -> ABSENT
    [[RelationDependedOnBy:{DescID: 106, ReferencedDescID: 108}, ABSENT], PUBLIC] -> ABSENT
    [[View:{DescID: 107}, ABSENT], TXN_DROPPED] -> DROPPED
    [[Namespace:{DescID: 107, Name: v3}, ABSENT], PUBLIC] -> ABSENT
    [[Owner:{DescID: 107}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 107, Username: admin}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 107, Username: public}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 107, Username: root}, ABSENT], PUBLIC] -> ABSENT
    [[Locality:{DescID: 107}, ABSENT], PUBLIC] -> ABSENT
    [[View:{DescID: 108}, ABSENT], TXN_DROPPED] -> DROPPED
    [[Namespace:{DescID: 108, Name: v4}, ABSENT], PUBLIC] -> ABSENT
    [[Owner:{DescID: 108}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 108, Username: admin}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 108, Username: public}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 108, Username: root}, ABSENT], PUBLIC] -> ABSENT
    [[Locality:{DescID: 108}, ABSENT], PUBLIC] -> ABSENT
    [[RelationDependedOnBy:{DescID: 108, ReferencedDescID: 111}, ABSENT], PUBLIC] -> ABSENT
    [[View:{DescID: 111}, ABSENT], TXN_DROPPED] -> DROPPED
    [[Namespace:{DescID: 111, Name: v5}, ABSENT], PUBLIC] -> ABSENT
    [[Owner:{DescID: 111}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 111, Username: admin}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 111, Username: public}, ABSENT], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 111, Username: root}, ABSENT], PUBLIC] -> ABSENT
    [[ViewDependsOnType:{DescID: 111, ReferencedDescID: 109}, ABSENT], PUBLIC] -> ABSENT
    [[ViewDependsOnType:{DescID: 111, ReferencedDescID: 110}, ABSENT], PUBLIC] -> ABSENT
    [[Locality:{DescID: 111}, ABSENT], PUBLIC] -> ABSENT
  ops:
    *scop.MarkDescriptorAsDropped
      DescID: 105
    *scop.DrainDescriptorName
      TableID: 105
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 105
      TableID: 104
    *scop.MarkDescriptorAsDropped
      DescID: 106
    *scop.DrainDescriptorName
      TableID: 106
    *scop.MarkDescriptorAsDropped
      DescID: 107
    *scop.DrainDescriptorName
      TableID: 107
    *scop.MarkDescriptorAsDropped
      DescID: 108
    *scop.DrainDescriptorName
      TableID: 108
    *scop.MarkDescriptorAsDropped
      DescID: 111
    *scop.DrainDescriptorName
      TableID: 111
    *scop.RemoveTypeBackRef
      DescID: 111
      TypeID: 109
    *scop.RemoveTypeBackRef
      DescID: 111
      TypeID: 110
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 106
      TableID: 105
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 107
      TableID: 105
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 107
      TableID: 106
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 108
      TableID: 106
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 111
      TableID: 108
    *scop.SetJobStateOnDescriptor
      DescriptorID: 104
      Initialize: true
    *scop.SetJobStateOnDescriptor
      DescriptorID: 105
      Initialize: true
    *scop.SetJobStateOnDescriptor
      DescriptorID: 106
      Initialize: true
    *scop.SetJobStateOnDescriptor
      DescriptorID: 107
      Initialize: true
    *scop.SetJobStateOnDescriptor
      DescriptorID: 108
      Initialize: true
    *scop.SetJobStateOnDescriptor
      DescriptorID: 111
      Initialize: true
    *scop.CreateSchemaChangerJob
      Authorization:
        UserName: root
      DescriptorIDs:
      - 104
      - 105
      - 106
      - 107
      - 108
      - 111
      JobID: 1
      Statements:
      - statement: DROP VIEW defaultdb.v1 CASCADE
        redactedstatement: DROP VIEW ‹defaultdb›.public.‹v1› CASCADE
        statementtag: DROP VIEW
PostCommitNonRevertiblePhase stage 1 of 1 with 17 MutationType ops
  transitions:
    [[View:{DescID: 105}, ABSENT], DROPPED] -> ABSENT
    [[View:{DescID: 106}, ABSENT], DROPPED] -> ABSENT
    [[View:{DescID: 107}, ABSENT], DROPPED] -> ABSENT
    [[View:{DescID: 108}, ABSENT], DROPPED] -> ABSENT
    [[View:{DescID: 111}, ABSENT], DROPPED] -> ABSENT
  ops:
    *scop.LogEvent
      Authorization:
        UserName: root
      Element:
        View:
          tableId: 105
      Statement: DROP VIEW ‹defaultdb›.public.‹v1› CASCADE
      StatementTag: DROP VIEW
      TargetMetadata:
        SourceElementID: 1
        SubWorkID: 1
      TargetStatus: 1
    *scop.CreateGcJobForTable
      TableID: 105
    *scop.LogEvent
      Authorization:
        UserName: root
      Element:
        View:
          tableId: 106
      Statement: DROP VIEW ‹defaultdb›.public.‹v1› CASCADE
      StatementTag: DROP VIEW
      TargetMetadata:
        SourceElementID: 2
        SubWorkID: 1
      TargetStatus: 1
    *scop.CreateGcJobForTable
      TableID: 106
    *scop.LogEvent
      Authorization:
        UserName: root
      Element:
        View:
          tableId: 107
      Statement: DROP VIEW ‹defaultdb›.public.‹v1› CASCADE
      StatementTag: DROP VIEW
      TargetMetadata:
        SourceElementID: 3
        SubWorkID: 1
      TargetStatus: 1
    *scop.CreateGcJobForTable
      TableID: 107
    *scop.LogEvent
      Authorization:
        UserName: root
      Element:
        View:
          tableId: 108
      Statement: DROP VIEW ‹defaultdb›.public.‹v1› CASCADE
      StatementTag: DROP VIEW
      TargetMetadata:
        SourceElementID: 3
        SubWorkID: 1
      TargetStatus: 1
    *scop.CreateGcJobForTable
      TableID: 108
    *scop.LogEvent
      Authorization:
        UserName: root
      Element:
        View:
          tableId: 111
      Statement: DROP VIEW ‹defaultdb›.public.‹v1› CASCADE
      StatementTag: DROP VIEW
      TargetMetadata:
        SourceElementID: 5
        SubWorkID: 1
      TargetStatus: 1
    *scop.CreateGcJobForTable
      TableID: 111
    *scop.RemoveJobStateFromDescriptor
      DescriptorID: 104
      JobID: 1
    *scop.RemoveJobStateFromDescriptor
      DescriptorID: 105
      JobID: 1
    *scop.RemoveJobStateFromDescriptor
      DescriptorID: 106
      JobID: 1
    *scop.RemoveJobStateFromDescriptor
      DescriptorID: 107
      JobID: 1
    *scop.RemoveJobStateFromDescriptor
      DescriptorID: 108
      JobID: 1
    *scop.RemoveJobStateFromDescriptor
      DescriptorID: 111
      JobID: 1
    *scop.UpdateSchemaChangerJob
      IsNonCancelable: true
      JobID: 1

deps
DROP VIEW defaultdb.v1 CASCADE
----
- from: [Namespace:{DescID: 105, Name: v1}, ABSENT]
  to:   [View:{DescID: 105}, ABSENT]
  kind: Precedence
  rule: name must drain before descriptor deletion
- from: [Namespace:{DescID: 106, Name: v2}, ABSENT]
  to:   [View:{DescID: 106}, ABSENT]
  kind: Precedence
  rule: name must drain before descriptor deletion
- from: [Namespace:{DescID: 107, Name: v3}, ABSENT]
  to:   [View:{DescID: 107}, ABSENT]
  kind: Precedence
  rule: name must drain before descriptor deletion
- from: [Namespace:{DescID: 108, Name: v4}, ABSENT]
  to:   [View:{DescID: 108}, ABSENT]
  kind: Precedence
  rule: name must drain before descriptor deletion
- from: [Namespace:{DescID: 111, Name: v5}, ABSENT]
  to:   [View:{DescID: 111}, ABSENT]
  kind: Precedence
  rule: name must drain before descriptor deletion
- from: [View:{DescID: 105}, DROPPED]
  to:   [Locality:{DescID: 105}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 105}, DROPPED]
  to:   [Namespace:{DescID: 105, Name: v1}, ABSENT]
  kind: Precedence
  rule: descriptor must be dropped before draining name
- from: [View:{DescID: 105}, DROPPED]
  to:   [Owner:{DescID: 105}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 105}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 104, ReferencedDescID: 105}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 105}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 105, ReferencedDescID: 106}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 105}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 105, ReferencedDescID: 107}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 105}, DROPPED]
  to:   [UserPrivileges:{DescID: 105, Username: admin}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 105}, DROPPED]
  to:   [UserPrivileges:{DescID: 105, Username: public}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 105}, DROPPED]
  to:   [UserPrivileges:{DescID: 105, Username: root}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 106}, DROPPED]
  to:   [Locality:{DescID: 106}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 106}, DROPPED]
  to:   [Namespace:{DescID: 106, Name: v2}, ABSENT]
  kind: Precedence
  rule: descriptor must be dropped before draining name
- from: [View:{DescID: 106}, DROPPED]
  to:   [Owner:{DescID: 106}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 106}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 105, ReferencedDescID: 106}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 106}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 106, ReferencedDescID: 107}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 106}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 106, ReferencedDescID: 108}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 106}, DROPPED]
  to:   [UserPrivileges:{DescID: 106, Username: admin}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 106}, DROPPED]
  to:   [UserPrivileges:{DescID: 106, Username: public}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 106}, DROPPED]
  to:   [UserPrivileges:{DescID: 106, Username: root}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 107}, DROPPED]
  to:   [Locality:{DescID: 107}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 107}, DROPPED]
  to:   [Namespace:{DescID: 107, Name: v3}, ABSENT]
  kind: Precedence
  rule: descriptor must be dropped before draining name
- from: [View:{DescID: 107}, DROPPED]
  to:   [Owner:{DescID: 107}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 107}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 105, ReferencedDescID: 107}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 107}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 106, ReferencedDescID: 107}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 107}, DROPPED]
  to:   [UserPrivileges:{DescID: 107, Username: admin}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 107}, DROPPED]
  to:   [UserPrivileges:{DescID: 107, Username: public}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 107}, DROPPED]
  to:   [UserPrivileges:{DescID: 107, Username: root}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 108}, DROPPED]
  to:   [Locality:{DescID: 108}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 108}, DROPPED]
  to:   [Namespace:{DescID: 108, Name: v4}, ABSENT]
  kind: Precedence
  rule: descriptor must be dropped before draining name
- from: [View:{DescID: 108}, DROPPED]
  to:   [Owner:{DescID: 108}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 108}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 106, ReferencedDescID: 108}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 108}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 108, ReferencedDescID: 111}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 108}, DROPPED]
  to:   [UserPrivileges:{DescID: 108, Username: admin}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 108}, DROPPED]
  to:   [UserPrivileges:{DescID: 108, Username: public}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 108}, DROPPED]
  to:   [UserPrivileges:{DescID: 108, Username: root}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 111}, DROPPED]
  to:   [Locality:{DescID: 111}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 111}, DROPPED]
  to:   [Namespace:{DescID: 111, Name: v5}, ABSENT]
  kind: Precedence
  rule: descriptor must be dropped before draining name
- from: [View:{DescID: 111}, DROPPED]
  to:   [Owner:{DescID: 111}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 111}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 108, ReferencedDescID: 111}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 111}, DROPPED]
  to:   [UserPrivileges:{DescID: 111, Username: admin}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 111}, DROPPED]
  to:   [UserPrivileges:{DescID: 111, Username: public}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
- from: [View:{DescID: 111}, DROPPED]
  to:   [UserPrivileges:{DescID: 111, Username: root}, ABSENT]
  kind: Precedence
  rule: relation drop precedes relation deps removal
