setup
CREATE TABLE t(
  a INT PRIMARY KEY,
  b INT,
  C INT,
  INDEX t_idx_b(b),
  INDEX t_idx_c(c)
);
CREATE SEQUENCE sq1;
CREATE VIEW v AS SELECT a FROM t;
CREATE TYPE notmyworkday AS ENUM ('Monday', 'Tuesday');
----

ops
CREATE FUNCTION f(a notmyworkday) RETURNS INT VOLATILE LANGUAGE SQL AS $$
  SELECT a FROM t;
  SELECT b FROM t@t_idx_b;
  SELECT c FROM t@t_idx_c;
  SELECT a FROM v;
  SELECT nextval('sq1');
$$;
----
StatementPhase stage 1 of 1 with 12 MutationType ops
  transitions:
    [[Function:{DescID: 10005}, PUBLIC], ABSENT] -> PUBLIC
    [[SchemaChild:{DescID: 10005, ReferencedDescID: 101}, PUBLIC], ABSENT] -> PUBLIC
    [[FunctionName:{DescID: 10005}, PUBLIC], ABSENT] -> PUBLIC
    [[FunctionVolatility:{DescID: 10005}, PUBLIC], ABSENT] -> PUBLIC
    [[Owner:{DescID: 10005}, PUBLIC], ABSENT] -> PUBLIC
    [[UserPrivileges:{DescID: 10005, Name: admin}, PUBLIC], ABSENT] -> PUBLIC
    [[UserPrivileges:{DescID: 10005, Name: public}, PUBLIC], ABSENT] -> PUBLIC
    [[UserPrivileges:{DescID: 10005, Name: root}, PUBLIC], ABSENT] -> PUBLIC
    [[FunctionBody:{DescID: 10005}, PUBLIC], ABSENT] -> PUBLIC
  ops:
    *scop.CreateFunctionDescriptor
      Function:
        FunctionID: 10005
        Params:
        - name: a
          class:
            class: 1
          type:
            type: |
              family: EnumFamily
              width: 0
              precision: 0
              locale: ""
              visible_type: 0
              oid: 110003
              time_precision_is_set: false
              udt_metadata: <
                array_type_oid: 110004
              >
            closedtypeids:
            - 10003
            - 10004
        ReturnType:
          Type:
            family: IntFamily
            oid: 20
            width: 64
    *scop.SetFunctionName
      FunctionID: 10005
      Name: f
    *scop.SetFunctionVolatility
      FunctionID: 10005
      Volatility: 1
    *scop.UpdateOwner
      Owner:
        DescriptorID: 10005
        Owner: root
    *scop.UpdateUserPrivileges
      Privileges:
        DescriptorID: 10005
        Privileges: 2
        UserName: admin
        WithGrantOption: 2
    *scop.UpdateUserPrivileges
      Privileges:
        DescriptorID: 10005
        Privileges: 1048576
        UserName: public
    *scop.UpdateUserPrivileges
      Privileges:
        DescriptorID: 10005
        Privileges: 2
        UserName: root
        WithGrantOption: 2
    *scop.SetFunctionBody
      Body:
        Body: |-
          SELECT a FROM t;
          SELECT b FROM t@t_idx_b;
          SELECT c FROM t@t_idx_c;
          SELECT a FROM v;
          SELECT nextval(10001:::REGCLASS);
        FunctionID: 10005
        Lang:
          Lang: 1
        UsesSequenceIDs:
        - 10001
        UsesTables:
        - tableid: 10000
          columnids:
          - 1
          indexid: 0
        - tableid: 10000
          columnids:
          - 2
          indexid: 2
        - tableid: 10000
          columnids:
          - 3
          indexid: 3
        UsesTypeIDs:
        - 10003
        - 10004
        UsesViews:
        - viewid: 10002
          columnids:
          - 1
    *scop.UpdateFunctionTypeReferences
      FunctionID: 10005
      TypeIDs:
      - 10003
      - 10004
    *scop.UpdateFunctionRelationReferences
      FunctionID: 10005
      SequenceIDs:
      - 10001
      TableReferences:
      - tableid: 10000
        columnids:
        - 1
        indexid: 0
      - tableid: 10000
        columnids:
        - 2
        indexid: 2
      - tableid: 10000
        columnids:
        - 3
        indexid: 3
      ViewReferences:
      - viewid: 10002
        columnids:
        - 1
    *scop.SetObjectParentID
      ObjParent:
        ChildObjectID: 10005
        SchemaID: 101
    *scop.MarkDescriptorAsPublic
      DescriptorID: 10005
PreCommitPhase stage 1 of 2 with 1 MutationType op
  transitions:
    [[Function:{DescID: 10005}, PUBLIC], PUBLIC] -> ABSENT
    [[SchemaChild:{DescID: 10005, ReferencedDescID: 101}, PUBLIC], PUBLIC] -> ABSENT
    [[FunctionName:{DescID: 10005}, PUBLIC], PUBLIC] -> ABSENT
    [[FunctionVolatility:{DescID: 10005}, PUBLIC], PUBLIC] -> ABSENT
    [[Owner:{DescID: 10005}, PUBLIC], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 10005, Name: admin}, PUBLIC], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 10005, Name: public}, PUBLIC], PUBLIC] -> ABSENT
    [[UserPrivileges:{DescID: 10005, Name: root}, PUBLIC], PUBLIC] -> ABSENT
    [[FunctionBody:{DescID: 10005}, PUBLIC], PUBLIC] -> ABSENT
  ops:
    *scop.UndoAllInTxnImmediateMutationOpSideEffects
      {}
PreCommitPhase stage 2 of 2 with 12 MutationType ops
  transitions:
    [[Function:{DescID: 10005}, PUBLIC], ABSENT] -> PUBLIC
    [[SchemaChild:{DescID: 10005, ReferencedDescID: 101}, PUBLIC], ABSENT] -> PUBLIC
    [[FunctionName:{DescID: 10005}, PUBLIC], ABSENT] -> PUBLIC
    [[FunctionVolatility:{DescID: 10005}, PUBLIC], ABSENT] -> PUBLIC
    [[Owner:{DescID: 10005}, PUBLIC], ABSENT] -> PUBLIC
    [[UserPrivileges:{DescID: 10005, Name: admin}, PUBLIC], ABSENT] -> PUBLIC
    [[UserPrivileges:{DescID: 10005, Name: public}, PUBLIC], ABSENT] -> PUBLIC
    [[UserPrivileges:{DescID: 10005, Name: root}, PUBLIC], ABSENT] -> PUBLIC
    [[FunctionBody:{DescID: 10005}, PUBLIC], ABSENT] -> PUBLIC
  ops:
    *scop.CreateFunctionDescriptor
      Function:
        FunctionID: 10005
        Params:
        - name: a
          class:
            class: 1
          type:
            type: |
              family: EnumFamily
              width: 0
              precision: 0
              locale: ""
              visible_type: 0
              oid: 110003
              time_precision_is_set: false
              udt_metadata: <
                array_type_oid: 110004
              >
            closedtypeids:
            - 10003
            - 10004
        ReturnType:
          Type:
            family: IntFamily
            oid: 20
            width: 64
    *scop.SetFunctionName
      FunctionID: 10005
      Name: f
    *scop.SetFunctionVolatility
      FunctionID: 10005
      Volatility: 1
    *scop.UpdateOwner
      Owner:
        DescriptorID: 10005
        Owner: root
    *scop.UpdateUserPrivileges
      Privileges:
        DescriptorID: 10005
        Privileges: 2
        UserName: admin
        WithGrantOption: 2
    *scop.UpdateUserPrivileges
      Privileges:
        DescriptorID: 10005
        Privileges: 1048576
        UserName: public
    *scop.UpdateUserPrivileges
      Privileges:
        DescriptorID: 10005
        Privileges: 2
        UserName: root
        WithGrantOption: 2
    *scop.SetFunctionBody
      Body:
        Body: |-
          SELECT a FROM t;
          SELECT b FROM t@t_idx_b;
          SELECT c FROM t@t_idx_c;
          SELECT a FROM v;
          SELECT nextval(10001:::REGCLASS);
        FunctionID: 10005
        Lang:
          Lang: 1
        UsesSequenceIDs:
        - 10001
        UsesTables:
        - tableid: 10000
          columnids:
          - 1
          indexid: 0
        - tableid: 10000
          columnids:
          - 2
          indexid: 2
        - tableid: 10000
          columnids:
          - 3
          indexid: 3
        UsesTypeIDs:
        - 10003
        - 10004
        UsesViews:
        - viewid: 10002
          columnids:
          - 1
    *scop.UpdateFunctionTypeReferences
      FunctionID: 10005
      TypeIDs:
      - 10003
      - 10004
    *scop.UpdateFunctionRelationReferences
      FunctionID: 10005
      SequenceIDs:
      - 10001
      TableReferences:
      - tableid: 10000
        columnids:
        - 1
        indexid: 0
      - tableid: 10000
        columnids:
        - 2
        indexid: 2
      - tableid: 10000
        columnids:
        - 3
        indexid: 3
      ViewReferences:
      - viewid: 10002
        columnids:
        - 1
    *scop.SetObjectParentID
      ObjParent:
        ChildObjectID: 10005
        SchemaID: 101
    *scop.MarkDescriptorAsPublic
      DescriptorID: 10005

deps
CREATE FUNCTION f(a notmyworkday) RETURNS INT VOLATILE LANGUAGE SQL AS $$
  SELECT a FROM t;
  SELECT b FROM t@t_idx_b;
  SELECT c FROM t@t_idx_c;
  SELECT a FROM v;
  SELECT nextval('sq1');
$$;
----
- from: [Function:{DescID: 10006}, DESCRIPTOR_ADDED]
  to:   [FunctionBody:{DescID: 10006}, PUBLIC]
  kind: Precedence
  rule: descriptor existence precedes dependents
- from: [Function:{DescID: 10006}, DESCRIPTOR_ADDED]
  to:   [FunctionName:{DescID: 10006}, PUBLIC]
  kind: Precedence
  rule: descriptor existence precedes dependents
- from: [Function:{DescID: 10006}, DESCRIPTOR_ADDED]
  to:   [FunctionVolatility:{DescID: 10006}, PUBLIC]
  kind: Precedence
  rule: descriptor existence precedes dependents
- from: [Function:{DescID: 10006}, DESCRIPTOR_ADDED]
  to:   [Owner:{DescID: 10006}, PUBLIC]
  kind: Precedence
  rule: descriptor existence precedes dependents
- from: [Function:{DescID: 10006}, DESCRIPTOR_ADDED]
  to:   [SchemaChild:{DescID: 10006, ReferencedDescID: 101}, PUBLIC]
  kind: Precedence
  rule: descriptor existence precedes dependents
- from: [Function:{DescID: 10006}, DESCRIPTOR_ADDED]
  to:   [UserPrivileges:{DescID: 10006, Name: admin}, PUBLIC]
  kind: Precedence
  rule: descriptor existence precedes dependents
- from: [Function:{DescID: 10006}, DESCRIPTOR_ADDED]
  to:   [UserPrivileges:{DescID: 10006, Name: public}, PUBLIC]
  kind: Precedence
  rule: descriptor existence precedes dependents
- from: [Function:{DescID: 10006}, DESCRIPTOR_ADDED]
  to:   [UserPrivileges:{DescID: 10006, Name: root}, PUBLIC]
  kind: Precedence
  rule: descriptor existence precedes dependents
- from: [FunctionBody:{DescID: 10006}, PUBLIC]
  to:   [Function:{DescID: 10006}, PUBLIC]
  kind: Precedence
  rule: dependents exist before descriptor becomes public
- from: [FunctionName:{DescID: 10006}, PUBLIC]
  to:   [Function:{DescID: 10006}, PUBLIC]
  kind: Precedence
  rule: dependents exist before descriptor becomes public
- from: [FunctionName:{DescID: 10006}, PUBLIC]
  to:   [SchemaChild:{DescID: 10006, ReferencedDescID: 101}, PUBLIC]
  kind: Precedence
  rule: function name should be set before parent ids
- from: [FunctionVolatility:{DescID: 10006}, PUBLIC]
  to:   [Function:{DescID: 10006}, PUBLIC]
  kind: Precedence
  rule: dependents exist before descriptor becomes public
- from: [Owner:{DescID: 10006}, PUBLIC]
  to:   [Function:{DescID: 10006}, PUBLIC]
  kind: Precedence
  rule: dependents exist before descriptor becomes public
- from: [SchemaChild:{DescID: 10006, ReferencedDescID: 101}, PUBLIC]
  to:   [Function:{DescID: 10006}, PUBLIC]
  kind: Precedence
  rule: dependents exist before descriptor becomes public
- from: [UserPrivileges:{DescID: 10006, Name: admin}, PUBLIC]
  to:   [Function:{DescID: 10006}, PUBLIC]
  kind: Precedence
  rule: dependents exist before descriptor becomes public
- from: [UserPrivileges:{DescID: 10006, Name: public}, PUBLIC]
  to:   [Function:{DescID: 10006}, PUBLIC]
  kind: Precedence
  rule: dependents exist before descriptor becomes public
- from: [UserPrivileges:{DescID: 10006, Name: root}, PUBLIC]
  to:   [Function:{DescID: 10006}, PUBLIC]
  kind: Precedence
  rule: dependents exist before descriptor becomes public
