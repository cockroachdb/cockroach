create-database
CREATE DATABASE db1;
----

create-schema
CREATE SCHEMA db1.sc1
----

create-sequence
CREATE SEQUENCE db1.public.SQ1
----


create-sequence
CREATE SEQUENCE db1.sc1.SQ1
----

create-table
CREATE TABLE db1.sc1.t1 (id INT PRIMARY KEY, name varchar(256), val int DEFAULT nextval('db1.sc1.sq1'))
----

create-table
CREATE TABLE db1.public.t1 (id INT PRIMARY KEY, name varchar(256), val int DEFAULT nextval('db1.public.sq1'))
----

create-view
CREATE VIEW db1.sc1.v1 AS (SELECT name FROM db1.sc1.t1)
----

create-view
CREATE VIEW db1.sc1.v2 AS (SELECT name AS n1, name AS n2 FROM db1.sc1.v1)
----

create-view
CREATE VIEW db1.sc1.v3 AS (SELECT name, n1 FROM db1.sc1.v1, db1.sc1.v2);
----

create-view
CREATE VIEW db1.sc1.v4 AS (SELECT n2, n1 FROM db1.sc1.v2);
----

create-type
CREATE TYPE db1.sc1.typ AS ENUM('a')
----

create-view
CREATE VIEW db1.sc1.v5 AS (SELECT 'a'::db1.sc1.typ::string AS k, n2, n1 from db1.sc1.v4)
----

ops
DROP DATABASE db1 CASCADE
----
StatementPhase stage 1 of 1 with 14 MutationType ops
  transitions:
    [Sequence:{DescID: 57}, PUBLIC, DROP] -> TXN_DROPPED
    [Table:{DescID: 60}, PUBLIC, DROP] -> TXN_DROPPED
    [Column:{DescID: 60, ColumnID: 1}, PUBLIC, DROP] -> DELETE_AND_WRITE_ONLY
    [Column:{DescID: 60, ColumnID: 2}, PUBLIC, DROP] -> DELETE_AND_WRITE_ONLY
    [Column:{DescID: 60, ColumnID: 3}, PUBLIC, DROP] -> DELETE_AND_WRITE_ONLY
    [PrimaryIndex:{DescID: 60, IndexID: 1}, PUBLIC, DROP] -> DELETE_AND_WRITE_ONLY
    [Schema:{DescID: 55}, PUBLIC, DROP] -> TXN_DROPPED
    [Sequence:{DescID: 58}, PUBLIC, DROP] -> TXN_DROPPED
    [Table:{DescID: 59}, PUBLIC, DROP] -> TXN_DROPPED
    [Column:{DescID: 59, ColumnID: 1}, PUBLIC, DROP] -> DELETE_AND_WRITE_ONLY
    [Column:{DescID: 59, ColumnID: 2}, PUBLIC, DROP] -> DELETE_AND_WRITE_ONLY
    [Column:{DescID: 59, ColumnID: 3}, PUBLIC, DROP] -> DELETE_AND_WRITE_ONLY
    [PrimaryIndex:{DescID: 59, IndexID: 1}, PUBLIC, DROP] -> DELETE_AND_WRITE_ONLY
    [View:{DescID: 61}, PUBLIC, DROP] -> TXN_DROPPED
    [View:{DescID: 62}, PUBLIC, DROP] -> TXN_DROPPED
    [View:{DescID: 63}, PUBLIC, DROP] -> TXN_DROPPED
    [View:{DescID: 64}, PUBLIC, DROP] -> TXN_DROPPED
    [View:{DescID: 67}, PUBLIC, DROP] -> TXN_DROPPED
    [Type:{DescID: 65}, PUBLIC, DROP] -> TXN_DROPPED
    [Type:{DescID: 66}, PUBLIC, DROP] -> TXN_DROPPED
    [Schema:{DescID: 56}, PUBLIC, DROP] -> TXN_DROPPED
    [Database:{DescID: 54}, PUBLIC, DROP] -> TXN_DROPPED
  ops:
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 57
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 60
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 55
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 58
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 59
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 61
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 62
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 63
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 64
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 67
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 65
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 66
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 56
    *scop.MarkDescriptorAsDroppedSynthetically
      DescID: 54
PreCommitPhase non-revertible stage 1 of 1 with 41 MutationType ops
  transitions:
    [Sequence:{DescID: 57}, TXN_DROPPED, DROP] -> DROPPED
    [Namespace:{DescID: 57, Name: sq1}, PUBLIC, DROP] -> ABSENT
    [Owner:{DescID: 57}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 57, Username: admin}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 57, Username: public}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 57, Username: root}, PUBLIC, DROP] -> ABSENT
    [Locality:{DescID: 57}, PUBLIC, DROP] -> ABSENT
    [RelationDependedOnBy:{DescID: 57, ReferencedDescID: 60}, PUBLIC, DROP] -> ABSENT
    [DefaultExpression:{DescID: 60, ColumnID: 3}, PUBLIC, DROP] -> ABSENT
    [Table:{DescID: 60}, TXN_DROPPED, DROP] -> DROPPED
    [Namespace:{DescID: 60, Name: t1}, PUBLIC, DROP] -> ABSENT
    [Owner:{DescID: 60}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 60, Username: admin}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 60, Username: public}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 60, Username: root}, PUBLIC, DROP] -> ABSENT
    [Locality:{DescID: 60}, PUBLIC, DROP] -> ABSENT
    [Schema:{DescID: 55}, TXN_DROPPED, DROP] -> DROPPED
    [DatabaseSchemaEntry:{DescID: 54, ReferencedDescID: 55}, PUBLIC, DROP] -> ABSENT
    [Sequence:{DescID: 58}, TXN_DROPPED, DROP] -> DROPPED
    [Namespace:{DescID: 58, Name: sq1}, PUBLIC, DROP] -> ABSENT
    [Owner:{DescID: 58}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 58, Username: admin}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 58, Username: public}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 58, Username: root}, PUBLIC, DROP] -> ABSENT
    [Locality:{DescID: 58}, PUBLIC, DROP] -> ABSENT
    [RelationDependedOnBy:{DescID: 58, ReferencedDescID: 59}, PUBLIC, DROP] -> ABSENT
    [DefaultExpression:{DescID: 59, ColumnID: 3}, PUBLIC, DROP] -> ABSENT
    [Table:{DescID: 59}, TXN_DROPPED, DROP] -> DROPPED
    [Namespace:{DescID: 59, Name: t1}, PUBLIC, DROP] -> ABSENT
    [Owner:{DescID: 59}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 59, Username: admin}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 59, Username: public}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 59, Username: root}, PUBLIC, DROP] -> ABSENT
    [Locality:{DescID: 59}, PUBLIC, DROP] -> ABSENT
    [RelationDependedOnBy:{DescID: 59, ReferencedDescID: 61}, PUBLIC, DROP] -> ABSENT
    [View:{DescID: 61}, TXN_DROPPED, DROP] -> DROPPED
    [Namespace:{DescID: 61, Name: v1}, PUBLIC, DROP] -> ABSENT
    [Owner:{DescID: 61}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 61, Username: admin}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 61, Username: public}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 61, Username: root}, PUBLIC, DROP] -> ABSENT
    [Locality:{DescID: 61}, PUBLIC, DROP] -> ABSENT
    [RelationDependedOnBy:{DescID: 61, ReferencedDescID: 62}, PUBLIC, DROP] -> ABSENT
    [RelationDependedOnBy:{DescID: 61, ReferencedDescID: 63}, PUBLIC, DROP] -> ABSENT
    [View:{DescID: 62}, TXN_DROPPED, DROP] -> DROPPED
    [Namespace:{DescID: 62, Name: v2}, PUBLIC, DROP] -> ABSENT
    [Owner:{DescID: 62}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 62, Username: admin}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 62, Username: public}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 62, Username: root}, PUBLIC, DROP] -> ABSENT
    [Locality:{DescID: 62}, PUBLIC, DROP] -> ABSENT
    [RelationDependedOnBy:{DescID: 62, ReferencedDescID: 63}, PUBLIC, DROP] -> ABSENT
    [RelationDependedOnBy:{DescID: 62, ReferencedDescID: 64}, PUBLIC, DROP] -> ABSENT
    [View:{DescID: 63}, TXN_DROPPED, DROP] -> DROPPED
    [Namespace:{DescID: 63, Name: v3}, PUBLIC, DROP] -> ABSENT
    [Owner:{DescID: 63}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 63, Username: admin}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 63, Username: public}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 63, Username: root}, PUBLIC, DROP] -> ABSENT
    [Locality:{DescID: 63}, PUBLIC, DROP] -> ABSENT
    [View:{DescID: 64}, TXN_DROPPED, DROP] -> DROPPED
    [Namespace:{DescID: 64, Name: v4}, PUBLIC, DROP] -> ABSENT
    [Owner:{DescID: 64}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 64, Username: admin}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 64, Username: public}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 64, Username: root}, PUBLIC, DROP] -> ABSENT
    [Locality:{DescID: 64}, PUBLIC, DROP] -> ABSENT
    [RelationDependedOnBy:{DescID: 64, ReferencedDescID: 67}, PUBLIC, DROP] -> ABSENT
    [View:{DescID: 67}, TXN_DROPPED, DROP] -> DROPPED
    [Namespace:{DescID: 67, Name: v5}, PUBLIC, DROP] -> ABSENT
    [Owner:{DescID: 67}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 67, Username: admin}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 67, Username: public}, PUBLIC, DROP] -> ABSENT
    [UserPrivileges:{DescID: 67, Username: root}, PUBLIC, DROP] -> ABSENT
    [ViewDependsOnType:{DescID: 67, ReferencedDescID: 65}, PUBLIC, DROP] -> ABSENT
    [ViewDependsOnType:{DescID: 67, ReferencedDescID: 66}, PUBLIC, DROP] -> ABSENT
    [Locality:{DescID: 67}, PUBLIC, DROP] -> ABSENT
    [Type:{DescID: 65}, TXN_DROPPED, DROP] -> DROPPED
    [Namespace:{DescID: 65, Name: typ}, PUBLIC, DROP] -> ABSENT
    [Type:{DescID: 66}, TXN_DROPPED, DROP] -> DROPPED
    [Namespace:{DescID: 66, Name: _typ}, PUBLIC, DROP] -> ABSENT
    [Schema:{DescID: 56}, TXN_DROPPED, DROP] -> DROPPED
    [DatabaseSchemaEntry:{DescID: 54, ReferencedDescID: 56}, PUBLIC, DROP] -> ABSENT
    [Database:{DescID: 54}, TXN_DROPPED, DROP] -> DROPPED
  ops:
    *scop.MarkDescriptorAsDropped
      DescID: 57
    *scop.DrainDescriptorName
      TableID: 57
    *scop.MarkDescriptorAsDropped
      DescID: 60
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 60
      TableID: 57
    *scop.RemoveColumnDefaultExpression
      ColumnID: 3
      TableID: 60
    *scop.UpdateRelationDeps
      TableID: 60
    *scop.DrainDescriptorName
      TableID: 60
    *scop.MarkDescriptorAsDropped
      DescID: 54
    *scop.DeleteDatabaseSchemaEntry
      DatabaseID: 54
      SchemaID: 55
    *scop.MarkDescriptorAsDropped
      DescID: 55
    *scop.MarkDescriptorAsDropped
      DescID: 58
    *scop.DrainDescriptorName
      TableID: 58
    *scop.MarkDescriptorAsDropped
      DescID: 59
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 59
      TableID: 58
    *scop.RemoveColumnDefaultExpression
      ColumnID: 3
      TableID: 59
    *scop.UpdateRelationDeps
      TableID: 59
    *scop.DrainDescriptorName
      TableID: 59
    *scop.MarkDescriptorAsDropped
      DescID: 61
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 61
      TableID: 59
    *scop.DrainDescriptorName
      TableID: 61
    *scop.MarkDescriptorAsDropped
      DescID: 62
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 62
      TableID: 61
    *scop.MarkDescriptorAsDropped
      DescID: 63
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 63
      TableID: 61
    *scop.DrainDescriptorName
      TableID: 62
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 63
      TableID: 62
    *scop.MarkDescriptorAsDropped
      DescID: 64
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 64
      TableID: 62
    *scop.DrainDescriptorName
      TableID: 63
    *scop.DrainDescriptorName
      TableID: 64
    *scop.MarkDescriptorAsDropped
      DescID: 67
    *scop.RemoveRelationDependedOnBy
      DependedOnBy: 67
      TableID: 64
    *scop.DrainDescriptorName
      TableID: 67
    *scop.MarkDescriptorAsDropped
      DescID: 65
    *scop.RemoveTypeBackRef
      DescID: 67
      TypeID: 65
    *scop.MarkDescriptorAsDropped
      DescID: 66
    *scop.RemoveTypeBackRef
      DescID: 67
      TypeID: 66
    *scop.DrainDescriptorName
      TableID: 65
    *scop.DrainDescriptorName
      TableID: 66
    *scop.DeleteDatabaseSchemaEntry
      DatabaseID: 54
      SchemaID: 56
    *scop.MarkDescriptorAsDropped
      DescID: 56
PostCommitPhase non-revertible stage 1 of 1 with 31 MutationType ops
  transitions:
    [Sequence:{DescID: 57}, DROPPED, DROP] -> ABSENT
    [Table:{DescID: 60}, DROPPED, DROP] -> ABSENT
    [ColumnName:{DescID: 60, ColumnID: 1, Name: id}, PUBLIC, DROP] -> ABSENT
    [Column:{DescID: 60, ColumnID: 1}, DELETE_AND_WRITE_ONLY, DROP] -> ABSENT
    [ColumnName:{DescID: 60, ColumnID: 2, Name: name}, PUBLIC, DROP] -> ABSENT
    [Column:{DescID: 60, ColumnID: 2}, DELETE_AND_WRITE_ONLY, DROP] -> ABSENT
    [ColumnName:{DescID: 60, ColumnID: 3, Name: val}, PUBLIC, DROP] -> ABSENT
    [Column:{DescID: 60, ColumnID: 3}, DELETE_AND_WRITE_ONLY, DROP] -> ABSENT
    [PrimaryIndex:{DescID: 60, IndexID: 1}, DELETE_AND_WRITE_ONLY, DROP] -> ABSENT
    [IndexName:{DescID: 60, IndexID: 1, Name: t1_pkey}, PUBLIC, DROP] -> ABSENT
    [Schema:{DescID: 55}, DROPPED, DROP] -> ABSENT
    [Sequence:{DescID: 58}, DROPPED, DROP] -> ABSENT
    [Table:{DescID: 59}, DROPPED, DROP] -> ABSENT
    [ColumnName:{DescID: 59, ColumnID: 1, Name: id}, PUBLIC, DROP] -> ABSENT
    [Column:{DescID: 59, ColumnID: 1}, DELETE_AND_WRITE_ONLY, DROP] -> ABSENT
    [ColumnName:{DescID: 59, ColumnID: 2, Name: name}, PUBLIC, DROP] -> ABSENT
    [Column:{DescID: 59, ColumnID: 2}, DELETE_AND_WRITE_ONLY, DROP] -> ABSENT
    [ColumnName:{DescID: 59, ColumnID: 3, Name: val}, PUBLIC, DROP] -> ABSENT
    [Column:{DescID: 59, ColumnID: 3}, DELETE_AND_WRITE_ONLY, DROP] -> ABSENT
    [PrimaryIndex:{DescID: 59, IndexID: 1}, DELETE_AND_WRITE_ONLY, DROP] -> ABSENT
    [IndexName:{DescID: 59, IndexID: 1, Name: t1_pkey}, PUBLIC, DROP] -> ABSENT
    [View:{DescID: 61}, DROPPED, DROP] -> ABSENT
    [View:{DescID: 62}, DROPPED, DROP] -> ABSENT
    [View:{DescID: 63}, DROPPED, DROP] -> ABSENT
    [View:{DescID: 64}, DROPPED, DROP] -> ABSENT
    [View:{DescID: 67}, DROPPED, DROP] -> ABSENT
    [Type:{DescID: 65}, DROPPED, DROP] -> ABSENT
    [Type:{DescID: 66}, DROPPED, DROP] -> ABSENT
    [Schema:{DescID: 56}, DROPPED, DROP] -> ABSENT
    [Database:{DescID: 54}, DROPPED, DROP] -> ABSENT
  ops:
    *scop.LogEvent
      DescID: 57
      Direction: 2
      Element:
        sequence:
          sequenceId: 57
      Metadata:
        Statement: DROP DATABASE db1 CASCADE
        TargetMetadata:
          SourceElementID: 3
          SubWorkID: 1
        Username: root
    *scop.CreateGcJobForTable
      TableID: 57
    *scop.LogEvent
      DescID: 60
      Direction: 2
      Element:
        table:
          tableId: 60
      Metadata:
        Statement: DROP DATABASE db1 CASCADE
        TargetMetadata:
          SourceElementID: 3
          SubWorkID: 1
        Username: root
    *scop.CreateGcJobForTable
      TableID: 60
    *scop.DrainDescriptorName
      TableID: 55
    *scop.LogEvent
      DescID: 55
      Direction: 2
      Element:
        schema:
          dependentObjects:
          - 57
          - 60
          schemaId: 55
      Metadata:
        Statement: DROP DATABASE db1 CASCADE
        TargetMetadata:
          SourceElementID: 2
          SubWorkID: 1
        Username: root
    *scop.DeleteDescriptor
      DescriptorID: 55
    *scop.LogEvent
      DescID: 58
      Direction: 2
      Element:
        sequence:
          sequenceId: 58
      Metadata:
        Statement: DROP DATABASE db1 CASCADE
        TargetMetadata:
          SourceElementID: 6
          SubWorkID: 1
        Username: root
    *scop.CreateGcJobForTable
      TableID: 58
    *scop.LogEvent
      DescID: 59
      Direction: 2
      Element:
        table:
          tableId: 59
      Metadata:
        Statement: DROP DATABASE db1 CASCADE
        TargetMetadata:
          SourceElementID: 6
          SubWorkID: 1
        Username: root
    *scop.CreateGcJobForTable
      TableID: 59
    *scop.LogEvent
      DescID: 61
      Direction: 2
      Element:
        view:
          tableId: 61
      Metadata:
        Statement: DROP DATABASE db1 CASCADE
        TargetMetadata:
          SourceElementID: 8
          SubWorkID: 1
        Username: root
    *scop.CreateGcJobForTable
      TableID: 61
    *scop.LogEvent
      DescID: 62
      Direction: 2
      Element:
        view:
          tableId: 62
      Metadata:
        Statement: DROP DATABASE db1 CASCADE
        TargetMetadata:
          SourceElementID: 9
          SubWorkID: 1
        Username: root
    *scop.CreateGcJobForTable
      TableID: 62
    *scop.LogEvent
      DescID: 63
      Direction: 2
      Element:
        view:
          tableId: 63
      Metadata:
        Statement: DROP DATABASE db1 CASCADE
        TargetMetadata:
          SourceElementID: 10
          SubWorkID: 1
        Username: root
    *scop.CreateGcJobForTable
      TableID: 63
    *scop.LogEvent
      DescID: 64
      Direction: 2
      Element:
        view:
          tableId: 64
      Metadata:
        Statement: DROP DATABASE db1 CASCADE
        TargetMetadata:
          SourceElementID: 10
          SubWorkID: 1
        Username: root
    *scop.CreateGcJobForTable
      TableID: 64
    *scop.LogEvent
      DescID: 67
      Direction: 2
      Element:
        view:
          tableId: 67
      Metadata:
        Statement: DROP DATABASE db1 CASCADE
        TargetMetadata:
          SourceElementID: 12
          SubWorkID: 1
        Username: root
    *scop.CreateGcJobForTable
      TableID: 67
    *scop.LogEvent
      DescID: 65
      Direction: 2
      Element:
        type:
          typeId: 65
      Metadata:
        Statement: DROP DATABASE db1 CASCADE
        TargetMetadata:
          SourceElementID: 6
          SubWorkID: 1
        Username: root
    *scop.DeleteDescriptor
      DescriptorID: 65
    *scop.LogEvent
      DescID: 66
      Direction: 2
      Element:
        type:
          typeId: 66
      Metadata:
        Statement: DROP DATABASE db1 CASCADE
        TargetMetadata:
          SourceElementID: 6
          SubWorkID: 1
        Username: root
    *scop.DeleteDescriptor
      DescriptorID: 66
    *scop.DrainDescriptorName
      TableID: 56
    *scop.LogEvent
      DescID: 56
      Direction: 2
      Element:
        schema:
          dependentObjects:
          - 58
          - 59
          - 61
          - 62
          - 63
          - 64
          - 65
          - 66
          - 67
          schemaId: 56
      Metadata:
        Statement: DROP DATABASE db1 CASCADE
        TargetMetadata:
          SourceElementID: 2
          SubWorkID: 1
        Username: root
    *scop.DeleteDescriptor
      DescriptorID: 56
    *scop.DrainDescriptorName
      TableID: 54
    *scop.LogEvent
      DescID: 54
      Direction: 2
      Element:
        database:
          databaseId: 54
          dependentObjects:
          - 55
          - 56
      Metadata:
        Statement: DROP DATABASE db1 CASCADE
        TargetMetadata:
          SourceElementID: 1
          SubWorkID: 1
        Username: root
    *scop.CreateGcJobForDatabase
      DatabaseID: 54

deps
DROP DATABASE db1 CASCADE
----
- from: [Database:{DescID: 54}, DROPPED]
  to:   [DatabaseSchemaEntry:{DescID: 54, ReferencedDescID: 55}, ABSENT]
  kind: Precedence
  rule: schema entry can be dropped after the database has exited synth drop
- from: [Database:{DescID: 54}, DROPPED]
  to:   [DatabaseSchemaEntry:{DescID: 54, ReferencedDescID: 56}, ABSENT]
  kind: Precedence
  rule: schema entry can be dropped after the database has exited synth drop
- from: [DatabaseSchemaEntry:{DescID: 54, ReferencedDescID: 55}, ABSENT]
  to:   [Schema:{DescID: 55}, ABSENT]
  kind: Precedence
  rule: schema can be dropped after schema entry inside the database
- from: [DatabaseSchemaEntry:{DescID: 54, ReferencedDescID: 56}, ABSENT]
  to:   [Schema:{DescID: 56}, ABSENT]
  kind: Precedence
  rule: schema can be dropped after schema entry inside the database
- from: [Namespace:{DescID: 57, Name: sq1}, ABSENT]
  to:   [Sequence:{DescID: 57}, ABSENT]
  kind: Precedence
  rule: descriptor can only be cleaned up once the name is drained
- from: [Namespace:{DescID: 58, Name: sq1}, ABSENT]
  to:   [Sequence:{DescID: 58}, ABSENT]
  kind: Precedence
  rule: descriptor can only be cleaned up once the name is drained
- from: [Namespace:{DescID: 59, Name: t1}, ABSENT]
  to:   [Table:{DescID: 59}, ABSENT]
  kind: Precedence
  rule: descriptor can only be cleaned up once the name is drained
- from: [Namespace:{DescID: 60, Name: t1}, ABSENT]
  to:   [Table:{DescID: 60}, ABSENT]
  kind: Precedence
  rule: descriptor can only be cleaned up once the name is drained
- from: [Namespace:{DescID: 61, Name: v1}, ABSENT]
  to:   [View:{DescID: 61}, ABSENT]
  kind: Precedence
  rule: descriptor can only be cleaned up once the name is drained
- from: [Namespace:{DescID: 62, Name: v2}, ABSENT]
  to:   [View:{DescID: 62}, ABSENT]
  kind: Precedence
  rule: descriptor can only be cleaned up once the name is drained
- from: [Namespace:{DescID: 63, Name: v3}, ABSENT]
  to:   [View:{DescID: 63}, ABSENT]
  kind: Precedence
  rule: descriptor can only be cleaned up once the name is drained
- from: [Namespace:{DescID: 64, Name: v4}, ABSENT]
  to:   [View:{DescID: 64}, ABSENT]
  kind: Precedence
  rule: descriptor can only be cleaned up once the name is drained
- from: [Namespace:{DescID: 65, Name: typ}, ABSENT]
  to:   [Type:{DescID: 65}, ABSENT]
  kind: Precedence
  rule: descriptor can only be cleaned up once the name is drained
- from: [Namespace:{DescID: 66, Name: _typ}, ABSENT]
  to:   [Type:{DescID: 66}, ABSENT]
  kind: Precedence
  rule: descriptor can only be cleaned up once the name is drained
- from: [Namespace:{DescID: 67, Name: v5}, ABSENT]
  to:   [View:{DescID: 67}, ABSENT]
  kind: Precedence
  rule: descriptor can only be cleaned up once the name is drained
- from: [Schema:{DescID: 55}, ABSENT]
  to:   [Database:{DescID: 54}, ABSENT]
  kind: Precedence
  rule: parent dependencies
- from: [Schema:{DescID: 56}, ABSENT]
  to:   [Database:{DescID: 54}, ABSENT]
  kind: Precedence
  rule: parent dependencies
- from: [Sequence:{DescID: 57}, ABSENT]
  to:   [Schema:{DescID: 55}, ABSENT]
  kind: Precedence
  rule: parent dependencies
- from: [Sequence:{DescID: 57}, DROPPED]
  to:   [Locality:{DescID: 57}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Sequence:{DescID: 57}, DROPPED]
  to:   [Namespace:{DescID: 57, Name: sq1}, ABSENT]
  kind: Precedence
  rule: namespace needs descriptor to be dropped
- from: [Sequence:{DescID: 57}, DROPPED]
  to:   [Owner:{DescID: 57}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Sequence:{DescID: 57}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 57, ReferencedDescID: 60}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [Sequence:{DescID: 57}, DROPPED]
  to:   [UserPrivileges:{DescID: 57, Username: admin}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Sequence:{DescID: 57}, DROPPED]
  to:   [UserPrivileges:{DescID: 57, Username: public}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Sequence:{DescID: 57}, DROPPED]
  to:   [UserPrivileges:{DescID: 57, Username: root}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Sequence:{DescID: 58}, ABSENT]
  to:   [Schema:{DescID: 56}, ABSENT]
  kind: Precedence
  rule: parent dependencies
- from: [Sequence:{DescID: 58}, DROPPED]
  to:   [Locality:{DescID: 58}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Sequence:{DescID: 58}, DROPPED]
  to:   [Namespace:{DescID: 58, Name: sq1}, ABSENT]
  kind: Precedence
  rule: namespace needs descriptor to be dropped
- from: [Sequence:{DescID: 58}, DROPPED]
  to:   [Owner:{DescID: 58}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Sequence:{DescID: 58}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 58, ReferencedDescID: 59}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [Sequence:{DescID: 58}, DROPPED]
  to:   [UserPrivileges:{DescID: 58, Username: admin}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Sequence:{DescID: 58}, DROPPED]
  to:   [UserPrivileges:{DescID: 58, Username: public}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Sequence:{DescID: 58}, DROPPED]
  to:   [UserPrivileges:{DescID: 58, Username: root}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Table:{DescID: 59}, ABSENT]
  to:   [Schema:{DescID: 56}, ABSENT]
  kind: Precedence
  rule: parent dependencies
- from: [Table:{DescID: 59}, DROPPED]
  to:   [DefaultExpression:{DescID: 59, ColumnID: 3}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [Table:{DescID: 59}, DROPPED]
  to:   [Locality:{DescID: 59}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Table:{DescID: 59}, DROPPED]
  to:   [Namespace:{DescID: 59, Name: t1}, ABSENT]
  kind: Precedence
  rule: namespace needs descriptor to be dropped
- from: [Table:{DescID: 59}, DROPPED]
  to:   [Owner:{DescID: 59}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Table:{DescID: 59}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 58, ReferencedDescID: 59}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [Table:{DescID: 59}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 59, ReferencedDescID: 61}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [Table:{DescID: 59}, DROPPED]
  to:   [UserPrivileges:{DescID: 59, Username: admin}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Table:{DescID: 59}, DROPPED]
  to:   [UserPrivileges:{DescID: 59, Username: public}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Table:{DescID: 59}, DROPPED]
  to:   [UserPrivileges:{DescID: 59, Username: root}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Table:{DescID: 60}, ABSENT]
  to:   [Schema:{DescID: 55}, ABSENT]
  kind: Precedence
  rule: parent dependencies
- from: [Table:{DescID: 60}, DROPPED]
  to:   [DefaultExpression:{DescID: 60, ColumnID: 3}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [Table:{DescID: 60}, DROPPED]
  to:   [Locality:{DescID: 60}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Table:{DescID: 60}, DROPPED]
  to:   [Namespace:{DescID: 60, Name: t1}, ABSENT]
  kind: Precedence
  rule: namespace needs descriptor to be dropped
- from: [Table:{DescID: 60}, DROPPED]
  to:   [Owner:{DescID: 60}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Table:{DescID: 60}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 57, ReferencedDescID: 60}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [Table:{DescID: 60}, DROPPED]
  to:   [UserPrivileges:{DescID: 60, Username: admin}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Table:{DescID: 60}, DROPPED]
  to:   [UserPrivileges:{DescID: 60, Username: public}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Table:{DescID: 60}, DROPPED]
  to:   [UserPrivileges:{DescID: 60, Username: root}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [Type:{DescID: 65}, ABSENT]
  to:   [Schema:{DescID: 56}, ABSENT]
  kind: Precedence
  rule: parent dependencies
- from: [Type:{DescID: 65}, DROPPED]
  to:   [Namespace:{DescID: 65, Name: typ}, ABSENT]
  kind: Precedence
  rule: namespace needs descriptor to be dropped
- from: [Type:{DescID: 65}, DROPPED]
  to:   [ViewDependsOnType:{DescID: 67, ReferencedDescID: 65}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [Type:{DescID: 66}, ABSENT]
  to:   [Schema:{DescID: 56}, ABSENT]
  kind: Precedence
  rule: parent dependencies
- from: [Type:{DescID: 66}, DROPPED]
  to:   [Namespace:{DescID: 66, Name: _typ}, ABSENT]
  kind: Precedence
  rule: namespace needs descriptor to be dropped
- from: [Type:{DescID: 66}, DROPPED]
  to:   [ViewDependsOnType:{DescID: 67, ReferencedDescID: 66}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 61}, ABSENT]
  to:   [Schema:{DescID: 56}, ABSENT]
  kind: Precedence
  rule: parent dependencies
- from: [View:{DescID: 61}, DROPPED]
  to:   [Locality:{DescID: 61}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 61}, DROPPED]
  to:   [Namespace:{DescID: 61, Name: v1}, ABSENT]
  kind: Precedence
  rule: namespace needs descriptor to be dropped
- from: [View:{DescID: 61}, DROPPED]
  to:   [Owner:{DescID: 61}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 61}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 59, ReferencedDescID: 61}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 61}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 61, ReferencedDescID: 62}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 61}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 61, ReferencedDescID: 63}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 61}, DROPPED]
  to:   [UserPrivileges:{DescID: 61, Username: admin}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 61}, DROPPED]
  to:   [UserPrivileges:{DescID: 61, Username: public}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 61}, DROPPED]
  to:   [UserPrivileges:{DescID: 61, Username: root}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 62}, ABSENT]
  to:   [Schema:{DescID: 56}, ABSENT]
  kind: Precedence
  rule: parent dependencies
- from: [View:{DescID: 62}, DROPPED]
  to:   [Locality:{DescID: 62}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 62}, DROPPED]
  to:   [Namespace:{DescID: 62, Name: v2}, ABSENT]
  kind: Precedence
  rule: namespace needs descriptor to be dropped
- from: [View:{DescID: 62}, DROPPED]
  to:   [Owner:{DescID: 62}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 62}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 61, ReferencedDescID: 62}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 62}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 62, ReferencedDescID: 63}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 62}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 62, ReferencedDescID: 64}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 62}, DROPPED]
  to:   [UserPrivileges:{DescID: 62, Username: admin}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 62}, DROPPED]
  to:   [UserPrivileges:{DescID: 62, Username: public}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 62}, DROPPED]
  to:   [UserPrivileges:{DescID: 62, Username: root}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 63}, ABSENT]
  to:   [Schema:{DescID: 56}, ABSENT]
  kind: Precedence
  rule: parent dependencies
- from: [View:{DescID: 63}, DROPPED]
  to:   [Locality:{DescID: 63}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 63}, DROPPED]
  to:   [Namespace:{DescID: 63, Name: v3}, ABSENT]
  kind: Precedence
  rule: namespace needs descriptor to be dropped
- from: [View:{DescID: 63}, DROPPED]
  to:   [Owner:{DescID: 63}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 63}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 61, ReferencedDescID: 63}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 63}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 62, ReferencedDescID: 63}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 63}, DROPPED]
  to:   [UserPrivileges:{DescID: 63, Username: admin}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 63}, DROPPED]
  to:   [UserPrivileges:{DescID: 63, Username: public}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 63}, DROPPED]
  to:   [UserPrivileges:{DescID: 63, Username: root}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 64}, ABSENT]
  to:   [Schema:{DescID: 56}, ABSENT]
  kind: Precedence
  rule: parent dependencies
- from: [View:{DescID: 64}, DROPPED]
  to:   [Locality:{DescID: 64}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 64}, DROPPED]
  to:   [Namespace:{DescID: 64, Name: v4}, ABSENT]
  kind: Precedence
  rule: namespace needs descriptor to be dropped
- from: [View:{DescID: 64}, DROPPED]
  to:   [Owner:{DescID: 64}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 64}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 62, ReferencedDescID: 64}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 64}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 64, ReferencedDescID: 67}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 64}, DROPPED]
  to:   [UserPrivileges:{DescID: 64, Username: admin}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 64}, DROPPED]
  to:   [UserPrivileges:{DescID: 64, Username: public}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 64}, DROPPED]
  to:   [UserPrivileges:{DescID: 64, Username: root}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 67}, ABSENT]
  to:   [Schema:{DescID: 56}, ABSENT]
  kind: Precedence
  rule: parent dependencies
- from: [View:{DescID: 67}, DROPPED]
  to:   [Locality:{DescID: 67}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 67}, DROPPED]
  to:   [Namespace:{DescID: 67, Name: v5}, ABSENT]
  kind: Precedence
  rule: namespace needs descriptor to be dropped
- from: [View:{DescID: 67}, DROPPED]
  to:   [Owner:{DescID: 67}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 67}, DROPPED]
  to:   [RelationDependedOnBy:{DescID: 64, ReferencedDescID: 67}, ABSENT]
  kind: SameStagePrecedence
  rule: dependency needs relation/type as non-synthetically dropped
- from: [View:{DescID: 67}, DROPPED]
  to:   [UserPrivileges:{DescID: 67, Username: admin}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 67}, DROPPED]
  to:   [UserPrivileges:{DescID: 67, Username: public}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
- from: [View:{DescID: 67}, DROPPED]
  to:   [UserPrivileges:{DescID: 67, Username: root}, ABSENT]
  kind: Precedence
  rule: table deps removal happens after table marked as dropped
