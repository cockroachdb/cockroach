# Trigger these rules by running `make generate PKG=./pkg/sql/ir/irgen` from the
# repository root to ensure your PATH includes vendored binaries.

SHELL = /usr/bin/env bash

TEMPLATES = base/base.tmpl.go base/sexpr.tmpl.go
DEFS = example prims
CONFIGS = defcfg nopack expanded expandedpack onlyextra smallslots
TARGETS = $(foreach C,$(CONFIGS),$(foreach E,$(DEFS),$(foreach T,$(TEMPLATES),tests/$(C)/$(E)/$(T:.tmpl.go=.ir.go))))
TEST_TARGETS = $(foreach C,$(CONFIGS),tests/$(C)/$(C)_cfg_test.go)

all: $(TARGETS) $(TEST_TARGETS)

clean:
	rm -f $(TARGETS)
	rm -f irgen/irgen

irgen/irgen: $(shell find irgen -name \*.go)
	cd irgen && go build

.SUFFIXES: .ir.go .tmpl.go

%_cfg_test.go: tests/irgen_test.go Makefile
	mkdir -p $(notdir $*)
	(echo "// Code generated by make. DO NOT EDIT."; \
	 echo "// GENERATED FILE DO NOT EDIT"; \
	 sed -e "s,ir/tests/defcfg,ir/tests/$(notdir $*),g;s,package main,package $(notdir $*),g" < $<) > $@.tmp
	mv -f $@.tmp $@

# tests/cfg/example/base/base.ir.go -> example
ir_def_base = $(word 3,$(subst /, ,$(1)))

# tests/cfg/example/base/base.ir.go -> cfg
cfg_base = $(word 2,$(subst /, ,$(1)))

# tests/cfg/example/base/base.ir.go -> base/base.tmpl.go
template_path = $(subst .ir,.tmpl,$(subst tests/$(call cfg_base,$(1))/$(call ir_def_base,$(1))/,,$(1)))

# The special phrase ".SECONDEXPANSION" allows one to express rule
# dependencies as a function of the name of the target.
.SECONDEXPANSION:

# The dependencies in the following rules are exactly, in this order:
# - the name of the generator program ./irgen,
# - the configuration file,
# - the source template,
# - the input definition file
# Those three items are then taken together to construct
# a valid command line with $^
%.ir.go: irgen/irgen tests/configs/$$(call cfg_base,$$@) $$(call template_path,$$@) tests/$$(call ir_def_base,$$@).def
	mkdir -p $(dir $@)
	run() { \
	  set -x; \
	  $$1 `cat $$2|grep -v '^#'` $$3 $$4; \
	}; run $^ > $@.tmp
	mv -f $@.tmp $@
	gofmt -s -w $@
	goimports -w $@
