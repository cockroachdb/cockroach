// Code generated by irgen/irgen base/sexpr.tmpl.go example.def. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Copyright 2017 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.

package base

import (
	"bytes"
	"strconv"
)

type SexprFormatter interface {
	FormatSExpr(buf *bytes.Buffer)
}

func FormatSExprInt64(buf *bytes.Buffer, x int64) {
	buf.WriteString(strconv.FormatInt(x, 10))
}

func (x BinOp) FormatSExpr(buf *bytes.Buffer) {
	buf.WriteString(x.String())
}

func (x ConstExpr) FormatSExpr(buf *bytes.Buffer) {
	buf.WriteString("(ConstExpr")

	buf.WriteString(" Datum: ")
	FormatSExprInt64(buf, x.Datum())

	buf.WriteByte(')')
}

func (x BinExpr) FormatSExpr(buf *bytes.Buffer) {
	buf.WriteString("(BinExpr")

	buf.WriteString(" Left: ")
	x.Left().FormatSExpr(buf)

	buf.WriteString(" Op: ")
	x.Op().FormatSExpr(buf)

	buf.WriteString(" Right: ")
	x.Right().FormatSExpr(buf)

	buf.WriteByte(')')
}

func (x All) FormatSExpr(buf *bytes.Buffer) {
	buf.WriteString("(All")

	buf.WriteString(" E: ")
	x.E().FormatSExpr(buf)

	buf.WriteString(" CE: ")
	x.CE().FormatSExpr(buf)

	buf.WriteString(" BE: ")
	x.BE().FormatSExpr(buf)

	buf.WriteString(" BO: ")
	x.BO().FormatSExpr(buf)

	buf.WriteString(" A: ")
	x.A().FormatSExpr(buf)

	buf.WriteByte(')')
}

func (x Expr) FormatSExpr(buf *bytes.Buffer) {
	switch x.Tag() {
	case ExprConstExpr:
		x.MustBeConstExpr().FormatSExpr(buf)
	case ExprBinExpr:
		x.MustBeBinExpr().FormatSExpr(buf)
	}
}

func (x AllOrExpr) FormatSExpr(buf *bytes.Buffer) {
	switch x.Tag() {
	case AllOrExprAll:
		x.MustBeAll().FormatSExpr(buf)
	case AllOrExprBinExpr:
		x.MustBeBinExpr().FormatSExpr(buf)
	}
}
