// Code generated by irgen/irgen base/sexpr.tmpl.go tests/prims.def. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Copyright 2017 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.

package base

import (
	"bytes"
	"fmt"
)

type SexprFormatter interface {
	FormatSExpr(buf *bytes.Buffer)
}

func FormatSExprBool(buf *bytes.Buffer, x bool)       { fmt.Fprintf(buf, "%v", x) }
func FormatSExprInt64(buf *bytes.Buffer, x int64)     { fmt.Fprintf(buf, "%v", x) }
func FormatSExprInt32(buf *bytes.Buffer, x int32)     { fmt.Fprintf(buf, "%v", x) }
func FormatSExprInt16(buf *bytes.Buffer, x int16)     { fmt.Fprintf(buf, "%v", x) }
func FormatSExprInt8(buf *bytes.Buffer, x int8)       { fmt.Fprintf(buf, "%v", x) }
func FormatSExprUint64(buf *bytes.Buffer, x uint64)   { fmt.Fprintf(buf, "%v", x) }
func FormatSExprUint32(buf *bytes.Buffer, x uint32)   { fmt.Fprintf(buf, "%v", x) }
func FormatSExprUint16(buf *bytes.Buffer, x uint16)   { fmt.Fprintf(buf, "%v", x) }
func FormatSExprUint8(buf *bytes.Buffer, x uint8)     { fmt.Fprintf(buf, "%v", x) }
func FormatSExprFloat32(buf *bytes.Buffer, x float32) { fmt.Fprintf(buf, "%v", x) }
func FormatSExprFloat64(buf *bytes.Buffer, x float64) { fmt.Fprintf(buf, "%v", x) }
func FormatSExprString(buf *bytes.Buffer, x string)   { fmt.Fprintf(buf, "%q", x) }

func (x All) FormatSExpr(buf *bytes.Buffer) {
	buf.WriteString("(All")

	buf.WriteString(" B: ")
	FormatSExprBool(buf, x.B())

	buf.WriteString(" I8: ")
	FormatSExprInt8(buf, x.I8())

	buf.WriteString(" U8: ")
	FormatSExprUint8(buf, x.U8())

	buf.WriteString(" I16: ")
	FormatSExprInt16(buf, x.I16())

	buf.WriteString(" U16: ")
	FormatSExprUint16(buf, x.U16())

	buf.WriteString(" I32: ")
	FormatSExprInt32(buf, x.I32())

	buf.WriteString(" U32: ")
	FormatSExprUint32(buf, x.U32())

	buf.WriteString(" I64: ")
	FormatSExprInt64(buf, x.I64())

	buf.WriteString(" U64: ")
	FormatSExprUint64(buf, x.U64())

	buf.WriteString(" S: ")
	FormatSExprString(buf, x.S())

	buf.WriteString(" F32: ")
	FormatSExprFloat32(buf, x.F32())

	buf.WriteString(" F64: ")
	FormatSExprFloat64(buf, x.F64())

	buf.WriteByte(')')
}

func (x SmallBefore) FormatSExpr(buf *bytes.Buffer) {
	buf.WriteString("(SmallBefore")

	buf.WriteString(" A: ")
	FormatSExprBool(buf, x.A())

	buf.WriteString(" B: ")
	FormatSExprBool(buf, x.B())

	buf.WriteString(" C: ")
	FormatSExprUint8(buf, x.C())

	buf.WriteString(" D: ")
	FormatSExprUint8(buf, x.D())

	buf.WriteString(" E: ")
	FormatSExprUint8(buf, x.E())

	buf.WriteString(" F: ")
	FormatSExprUint16(buf, x.F())

	buf.WriteString(" G: ")
	FormatSExprUint16(buf, x.G())

	buf.WriteString(" H: ")
	FormatSExprUint32(buf, x.H())

	buf.WriteString(" I: ")
	FormatSExprUint64(buf, x.I())

	buf.WriteByte(')')
}

func (x BigBefore) FormatSExpr(buf *bytes.Buffer) {
	buf.WriteString("(BigBefore")

	buf.WriteString(" A: ")
	FormatSExprUint64(buf, x.A())

	buf.WriteString(" B: ")
	FormatSExprUint32(buf, x.B())

	buf.WriteString(" C: ")
	FormatSExprUint16(buf, x.C())

	buf.WriteString(" D: ")
	FormatSExprUint16(buf, x.D())

	buf.WriteString(" E: ")
	FormatSExprUint8(buf, x.E())

	buf.WriteString(" F: ")
	FormatSExprUint8(buf, x.F())

	buf.WriteString(" G: ")
	FormatSExprUint8(buf, x.G())

	buf.WriteString(" H: ")
	FormatSExprBool(buf, x.H())

	buf.WriteString(" I: ")
	FormatSExprBool(buf, x.I())

	buf.WriteByte(')')
}

// Codegen parameters:
// {NumNumericSlots:0 NumericSlotSize:64 NumRefSlots:0 NumStrSlots:0 Pack:false}
//
