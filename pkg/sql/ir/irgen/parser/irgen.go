// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line irgen.y:16
package parser

import __yyfmt__ "fmt"

//line irgen.y:16
import "io"

// Parse parses definitions from an io.Reader.
func Parse(filename string, src io.Reader) ([]Def, error) {
	l := newLexer(filename, src)
	irgenParse(l)
	return l.defs, l.firstErr
}

//line irgen.y:29
type irgenSymType struct {
	yys      int
	b        bool
	def      Def
	defs     []Def
	item     DefItem
	itemName ItemNameOccur
	items    []DefItem
	str      strOccur
	tag      TagOccur
	typeName TypeNameOccur
}

const ERROR = 57346
const IDENT = 57347
const STR = 57348
const TAG = 57349
const ENUM = 57350
const FORMAT = 57351
const PRIM = 57352
const RESERVED = 57353
const STRUCT = 57354
const SUM = 57355

var irgenToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ERROR",
	"IDENT",
	"STR",
	"TAG",
	"ENUM",
	"FORMAT",
	"PRIM",
	"RESERVED",
	"STRUCT",
	"SUM",
	"'{'",
	"'}'",
	"'='",
	"'['",
	"']'",
	"'*'",
	"'.'",
	"';'",
}
var irgenStatenames = [...]string{}

const irgenEofCode = 1
const irgenErrCode = 2
const irgenInitialStackSize = 16

//line irgen.y:138

//line yacctab:1
var irgenExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const irgenPrivate = 57344

const irgenLast = 68

var irgenAct = [...]int{

	33, 12, 14, 13, 23, 34, 19, 16, 19, 17,
	58, 52, 36, 20, 21, 15, 37, 35, 60, 26,
	18, 36, 18, 36, 54, 41, 61, 31, 24, 46,
	25, 22, 49, 43, 45, 40, 44, 39, 59, 55,
	50, 8, 47, 9, 53, 10, 11, 56, 35, 28,
	19, 15, 57, 1, 48, 30, 29, 27, 42, 38,
	32, 2, 7, 6, 5, 4, 3, 51,
}
var irgenPact = [...]int{

	-1000, -1000, 33, -18, -1000, -1000, -1000, -1000, 46, 3,
	46, 46, -1000, -1000, 17, -1000, -1000, -16, 45, -1000,
	16, 5, -1000, 44, -16, -1000, -1000, 12, -1000, 1,
	10, -1000, -18, 13, -1000, -1000, 35, 23, -18, -6,
	-1000, -1000, -18, 8, -1000, -1000, 32, -1000, -1000, 41,
	-1000, 43, -8, -1000, 31, -1000, -1000, 2, -1000, -1000,
	19, -1000,
}
var irgenPgo = [...]int{

	0, 67, 66, 65, 64, 63, 62, 61, 60, 5,
	59, 58, 0, 57, 56, 55, 54, 9, 2, 7,
	53, 1,
}
var irgenR1 = [...]int{

	0, 20, 7, 7, 2, 2, 2, 2, 3, 13,
	13, 8, 8, 4, 5, 14, 14, 10, 10, 1,
	1, 16, 16, 6, 15, 15, 11, 11, 18, 19,
	19, 17, 17, 12, 9, 21, 21,
}
var irgenR2 = [...]int{

	0, 1, 0, 3, 1, 1, 1, 1, 5, 0,
	3, 3, 1, 2, 6, 0, 3, 5, 1, 0,
	2, 0, 2, 5, 0, 3, 3, 1, 1, 1,
	2, 1, 3, 1, 2, 0, 1,
}
var irgenChk = [...]int{

	-1000, -20, -7, -2, -3, -4, -5, -6, 8, 10,
	12, 13, -21, 21, -18, 5, -19, -17, 19, 5,
	-18, -18, 14, 20, -17, 14, 14, -13, 5, -14,
	-15, 15, -8, -12, -9, 5, 11, 15, -10, -19,
	-9, 15, -11, -18, -9, -21, 16, 7, -16, 9,
	-21, -1, 17, -21, 16, 7, 6, -12, 18, 7,
	16, 7,
}
var irgenDef = [...]int{

	2, -2, 1, 35, 4, 5, 6, 7, 0, 0,
	0, 0, 3, 36, 0, 28, 13, 29, 0, 31,
	0, 0, 9, 0, 30, 15, 24, 0, 32, 0,
	0, 8, 35, 0, 12, 33, 0, 21, 35, 19,
	18, 23, 35, 0, 27, 10, 0, 34, 14, 0,
	16, 0, 0, 25, 0, 11, 22, 0, 20, 26,
	0, 17,
}
var irgenTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 19, 3, 3, 3, 20, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 21,
	3, 16, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 17, 3, 18, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 14, 3, 15,
}
var irgenTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13,
}
var irgenTok3 = [...]int{
	0,
}

var irgenErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	irgenDebug        = 0
	irgenErrorVerbose = false
)

type irgenLexer interface {
	Lex(lval *irgenSymType) int
	Error(s string)
}

type irgenParser interface {
	Parse(irgenLexer) int
	Lookahead() int
}

type irgenParserImpl struct {
	lval  irgenSymType
	stack [irgenInitialStackSize]irgenSymType
	char  int
}

func (p *irgenParserImpl) Lookahead() int {
	return p.char
}

func irgenNewParser() irgenParser {
	return &irgenParserImpl{}
}

const irgenFlag = -1000

func irgenTokname(c int) string {
	if c >= 1 && c-1 < len(irgenToknames) {
		if irgenToknames[c-1] != "" {
			return irgenToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func irgenStatname(s int) string {
	if s >= 0 && s < len(irgenStatenames) {
		if irgenStatenames[s] != "" {
			return irgenStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func irgenErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !irgenErrorVerbose {
		return "syntax error"
	}

	for _, e := range irgenErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + irgenTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := irgenPact[state]
	for tok := TOKSTART; tok-1 < len(irgenToknames); tok++ {
		if n := base + tok; n >= 0 && n < irgenLast && irgenChk[irgenAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if irgenDef[state] == -2 {
		i := 0
		for irgenExca[i] != -1 || irgenExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; irgenExca[i] >= 0; i += 2 {
			tok := irgenExca[i]
			if tok < TOKSTART || irgenExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if irgenExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += irgenTokname(tok)
	}
	return res
}

func irgenlex1(lex irgenLexer, lval *irgenSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = irgenTok1[0]
		goto out
	}
	if char < len(irgenTok1) {
		token = irgenTok1[char]
		goto out
	}
	if char >= irgenPrivate {
		if char < irgenPrivate+len(irgenTok2) {
			token = irgenTok2[char-irgenPrivate]
			goto out
		}
	}
	for i := 0; i < len(irgenTok3); i += 2 {
		token = irgenTok3[i+0]
		if token == char {
			token = irgenTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = irgenTok2[1] /* unknown char */
	}
	if irgenDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", irgenTokname(token), uint(char))
	}
	return char, token
}

func irgenParse(irgenlex irgenLexer) int {
	return irgenNewParser().Parse(irgenlex)
}

func (irgenrcvr *irgenParserImpl) Parse(irgenlex irgenLexer) int {
	var irgenn int
	var irgenVAL irgenSymType
	var irgenDollar []irgenSymType
	_ = irgenDollar // silence set and not used
	irgenS := irgenrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	irgenstate := 0
	irgenrcvr.char = -1
	irgentoken := -1 // irgenrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		irgenstate = -1
		irgenrcvr.char = -1
		irgentoken = -1
	}()
	irgenp := -1
	goto irgenstack

ret0:
	return 0

ret1:
	return 1

irgenstack:
	/* put a state and value onto the stack */
	if irgenDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", irgenTokname(irgentoken), irgenStatname(irgenstate))
	}

	irgenp++
	if irgenp >= len(irgenS) {
		nyys := make([]irgenSymType, len(irgenS)*2)
		copy(nyys, irgenS)
		irgenS = nyys
	}
	irgenS[irgenp] = irgenVAL
	irgenS[irgenp].yys = irgenstate

irgennewstate:
	irgenn = irgenPact[irgenstate]
	if irgenn <= irgenFlag {
		goto irgendefault /* simple state */
	}
	if irgenrcvr.char < 0 {
		irgenrcvr.char, irgentoken = irgenlex1(irgenlex, &irgenrcvr.lval)
	}
	irgenn += irgentoken
	if irgenn < 0 || irgenn >= irgenLast {
		goto irgendefault
	}
	irgenn = irgenAct[irgenn]
	if irgenChk[irgenn] == irgentoken { /* valid shift */
		irgenrcvr.char = -1
		irgentoken = -1
		irgenVAL = irgenrcvr.lval
		irgenstate = irgenn
		if Errflag > 0 {
			Errflag--
		}
		goto irgenstack
	}

irgendefault:
	/* default state action */
	irgenn = irgenDef[irgenstate]
	if irgenn == -2 {
		if irgenrcvr.char < 0 {
			irgenrcvr.char, irgentoken = irgenlex1(irgenlex, &irgenrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if irgenExca[xi+0] == -1 && irgenExca[xi+1] == irgenstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			irgenn = irgenExca[xi+0]
			if irgenn < 0 || irgenn == irgentoken {
				break
			}
		}
		irgenn = irgenExca[xi+1]
		if irgenn < 0 {
			goto ret0
		}
	}
	if irgenn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			irgenlex.Error(irgenErrorMessage(irgenstate, irgentoken))
			Nerrs++
			if irgenDebug >= 1 {
				__yyfmt__.Printf("%s", irgenStatname(irgenstate))
				__yyfmt__.Printf(" saw %s\n", irgenTokname(irgentoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for irgenp >= 0 {
				irgenn = irgenPact[irgenS[irgenp].yys] + irgenErrCode
				if irgenn >= 0 && irgenn < irgenLast {
					irgenstate = irgenAct[irgenn] /* simulate a shift of "error" */
					if irgenChk[irgenstate] == irgenErrCode {
						goto irgenstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if irgenDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", irgenS[irgenp].yys)
				}
				irgenp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if irgenDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", irgenTokname(irgentoken))
			}
			if irgentoken == irgenEofCode {
				goto ret1
			}
			irgenrcvr.char = -1
			irgentoken = -1
			goto irgennewstate /* try again in the same state */
		}
	}

	/* reduction by production irgenn */
	if irgenDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", irgenn, irgenStatname(irgenstate))
	}

	irgennt := irgenn
	irgenpt := irgenp
	_ = irgenpt // guard against "declared and not used"

	irgenp -= irgenR2[irgenn]
	// irgenp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if irgenp+1 >= len(irgenS) {
		nyys := make([]irgenSymType, len(irgenS)*2)
		copy(nyys, irgenS)
		irgenS = nyys
	}
	irgenVAL = irgenS[irgenp+1]

	/* consult goto table to find next state */
	irgenn = irgenR1[irgenn]
	irgeng := irgenPgo[irgenn]
	irgenj := irgeng + irgenS[irgenp].yys + 1

	if irgenj >= irgenLast {
		irgenstate = irgenAct[irgeng]
	} else {
		irgenstate = irgenAct[irgenj]
		if irgenChk[irgenstate] != -irgenn {
			irgenstate = irgenAct[irgeng]
		}
	}
	// dummy call; replaced with literal code
	switch irgennt {

	case 1:
		irgenDollar = irgenS[irgenpt-1 : irgenpt+1]
		//line irgen.y:57
		{
			irgenlex.(*lexer).defs = irgenDollar[1].defs
		}
	case 2:
		irgenDollar = irgenS[irgenpt-0 : irgenpt+1]
		//line irgen.y:60
		{
			irgenVAL.defs = nil
		}
	case 3:
		irgenDollar = irgenS[irgenpt-3 : irgenpt+1]
		//line irgen.y:61
		{
			irgenVAL.defs = append(irgenDollar[1].defs, irgenDollar[2].def)
		}
	case 8:
		irgenDollar = irgenS[irgenpt-5 : irgenpt+1]
		//line irgen.y:71
		{
			irgenVAL.def = Def{Kind: EnumDef, Name: irgenDollar[2].typeName, Items: irgenDollar[4].items}
		}
	case 9:
		irgenDollar = irgenS[irgenpt-0 : irgenpt+1]
		//line irgen.y:74
		{
			irgenVAL.items = nil
		}
	case 10:
		irgenDollar = irgenS[irgenpt-3 : irgenpt+1]
		//line irgen.y:75
		{
			irgenVAL.items = append(irgenDollar[1].items, irgenDollar[2].item)
		}
	case 11:
		irgenDollar = irgenS[irgenpt-3 : irgenpt+1]
		//line irgen.y:78
		{
			irgenVAL.item = DefItem{Name: irgenDollar[1].itemName, Tag: irgenDollar[3].tag}
		}
	case 13:
		irgenDollar = irgenS[irgenpt-2 : irgenpt+1]
		//line irgen.y:82
		{
			irgenVAL.def = Def{Kind: PrimDef, Name: irgenDollar[2].typeName}
		}
	case 14:
		irgenDollar = irgenS[irgenpt-6 : irgenpt+1]
		//line irgen.y:86
		{
			irgenVAL.def = Def{Kind: StructDef, Name: irgenDollar[2].typeName, Items: irgenDollar[4].items}
		}
	case 15:
		irgenDollar = irgenS[irgenpt-0 : irgenpt+1]
		//line irgen.y:89
		{
			irgenVAL.items = nil
		}
	case 16:
		irgenDollar = irgenS[irgenpt-3 : irgenpt+1]
		//line irgen.y:90
		{
			irgenVAL.items = append(irgenDollar[1].items, irgenDollar[2].item)
		}
	case 17:
		irgenDollar = irgenS[irgenpt-5 : irgenpt+1]
		//line irgen.y:93
		{
			irgenVAL.item = DefItem{Name: irgenDollar[3].itemName, IsSlice: irgenDollar[2].b, Type: irgenDollar[1].typeName, Tag: irgenDollar[5].tag}
		}
	case 19:
		irgenDollar = irgenS[irgenpt-0 : irgenpt+1]
		//line irgen.y:97
		{
			irgenVAL.b = false
		}
	case 20:
		irgenDollar = irgenS[irgenpt-2 : irgenpt+1]
		//line irgen.y:98
		{
			irgenVAL.b = true
		}
	case 21:
		irgenDollar = irgenS[irgenpt-0 : irgenpt+1]
		//line irgen.y:101
		{
			irgenVAL.str = strOccur{}
		}
	case 22:
		irgenDollar = irgenS[irgenpt-2 : irgenpt+1]
		//line irgen.y:102
		{
			irgenVAL.str = irgenDollar[2].str
		}
	case 23:
		irgenDollar = irgenS[irgenpt-5 : irgenpt+1]
		//line irgen.y:106
		{
			irgenVAL.def = Def{Kind: SumDef, Name: irgenDollar[2].typeName, Items: irgenDollar[4].items}
		}
	case 24:
		irgenDollar = irgenS[irgenpt-0 : irgenpt+1]
		//line irgen.y:109
		{
			irgenVAL.items = nil
		}
	case 25:
		irgenDollar = irgenS[irgenpt-3 : irgenpt+1]
		//line irgen.y:110
		{
			irgenVAL.items = append(irgenDollar[1].items, irgenDollar[2].item)
		}
	case 26:
		irgenDollar = irgenS[irgenpt-3 : irgenpt+1]
		//line irgen.y:113
		{
			irgenVAL.item = DefItem{Type: irgenDollar[1].typeName, Tag: irgenDollar[3].tag}
		}
	case 28:
		irgenDollar = irgenS[irgenpt-1 : irgenpt+1]
		//line irgen.y:118
		{
			irgenVAL.typeName = TypeNameOccur{TypeName(irgenDollar[1].str.Str), irgenDollar[1].str.Pos}
		}
	case 29:
		irgenDollar = irgenS[irgenpt-1 : irgenpt+1]
		//line irgen.y:121
		{
			irgenVAL.typeName = TypeNameOccur{TypeName(irgenDollar[1].str.Str), irgenDollar[1].str.Pos}
		}
	case 30:
		irgenDollar = irgenS[irgenpt-2 : irgenpt+1]
		//line irgen.y:122
		{
			irgenVAL.typeName = TypeNameOccur{TypeName("*" + irgenDollar[2].str.Str), irgenDollar[2].str.Pos}
		}
	case 32:
		irgenDollar = irgenS[irgenpt-3 : irgenpt+1]
		//line irgen.y:126
		{
			irgenVAL.str = strOccur{irgenDollar[1].str.Str + "." + irgenDollar[3].str.Str, irgenDollar[3].str.Pos}
		}
	case 33:
		irgenDollar = irgenS[irgenpt-1 : irgenpt+1]
		//line irgen.y:129
		{
			irgenVAL.itemName = ItemNameOccur{ItemName(irgenDollar[1].str.Str), irgenDollar[1].str.Pos}
		}
	case 34:
		irgenDollar = irgenS[irgenpt-2 : irgenpt+1]
		//line irgen.y:132
		{
			irgenVAL.item = DefItem{Tag: irgenDollar[2].tag}
		}
	}
	goto irgenstack /* stack new state and value */
}
