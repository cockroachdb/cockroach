// Code generated by execgen; DO NOT EDIT.
// Copyright 2019 The Cockroach Authors.
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package colexecbase

import (
	"context"
	"fmt"
	"math"

	"github.com/cockroachdb/apd/v2"
	"github.com/cockroachdb/cockroach/pkg/col/coldata"
	"github.com/cockroachdb/cockroach/pkg/col/coldataext"
	"github.com/cockroachdb/cockroach/pkg/col/typeconv"
	"github.com/cockroachdb/cockroach/pkg/sql/colexec/colexecutils"
	"github.com/cockroachdb/cockroach/pkg/sql/colexecerror"
	"github.com/cockroachdb/cockroach/pkg/sql/colexecop"
	"github.com/cockroachdb/cockroach/pkg/sql/colmem"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

// Workaround for bazel auto-generated code. goimports does not automatically
// pick up the right packages when run within the bazel sandbox.
var _ coldataext.Datum

func GetCastOperator(
	allocator *colmem.Allocator,
	input colexecop.Operator,
	colIdx int,
	resultIdx int,
	fromType *types.T,
	toType *types.T,
) (colexecop.Operator, error) {
	input = colexecutils.NewVectorTypeEnforcer(allocator, input, toType, resultIdx)
	if fromType.Family() == types.UnknownFamily {
		return &castOpNullAny{
			OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
			allocator:            allocator,
			colIdx:               colIdx,
			outputIdx:            resultIdx,
		}, nil
	}
	leftType, rightType := fromType, toType
	switch typeconv.TypeFamilyToCanonicalTypeFamily(leftType.Family()) {
	case types.BoolFamily:
		switch leftType.Width() {
		case -1:
		default:
			switch typeconv.TypeFamilyToCanonicalTypeFamily(rightType.Family()) {
			case types.BoolFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castBoolBoolOp{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			case types.FloatFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castBoolFloat64Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			case types.IntFamily:
				switch rightType.Width() {
				case 16:
					return &castBoolInt16Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				case 32:
					return &castBoolInt32Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				case -1:
				default:
					return &castBoolInt64Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			}
		}
	case types.DecimalFamily:
		switch leftType.Width() {
		case -1:
		default:
			switch typeconv.TypeFamilyToCanonicalTypeFamily(rightType.Family()) {
			case types.BoolFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castDecimalBoolOp{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			case types.DecimalFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castDecimalDecimalOp{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			}
		}
	case types.IntFamily:
		switch leftType.Width() {
		case 16:
			switch typeconv.TypeFamilyToCanonicalTypeFamily(rightType.Family()) {
			case types.IntFamily:
				switch rightType.Width() {
				case 16:
					return &castInt16Int16Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				case 32:
					return &castInt16Int32Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				case -1:
				default:
					return &castInt16Int64Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			case types.BoolFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt16BoolOp{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			case types.DecimalFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt16DecimalOp{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			case types.FloatFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt16Float64Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			}
		case 32:
			switch typeconv.TypeFamilyToCanonicalTypeFamily(rightType.Family()) {
			case types.IntFamily:
				switch rightType.Width() {
				case 16:
					return &castInt32Int16Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				case 32:
					return &castInt32Int32Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				case -1:
				default:
					return &castInt32Int64Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			case types.BoolFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt32BoolOp{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			case types.DecimalFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt32DecimalOp{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			case types.FloatFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt32Float64Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			}
		case -1:
		default:
			switch typeconv.TypeFamilyToCanonicalTypeFamily(rightType.Family()) {
			case types.IntFamily:
				switch rightType.Width() {
				case 16:
					return &castInt64Int16Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				case 32:
					return &castInt64Int32Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				case -1:
				default:
					return &castInt64Int64Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			case types.BoolFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt64BoolOp{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			case types.DecimalFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt64DecimalOp{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			case types.FloatFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castInt64Float64Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			}
		}
	case types.FloatFamily:
		switch leftType.Width() {
		case -1:
		default:
			switch typeconv.TypeFamilyToCanonicalTypeFamily(rightType.Family()) {
			case types.FloatFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castFloat64Float64Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			case types.BoolFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castFloat64BoolOp{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			case types.DecimalFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castFloat64DecimalOp{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			case types.IntFamily:
				switch rightType.Width() {
				case 16:
					return &castFloat64Int16Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				case 32:
					return &castFloat64Int32Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				case -1:
				default:
					return &castFloat64Int64Op{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			}
		}
	case typeconv.DatumVecCanonicalTypeFamily:
		switch leftType.Width() {
		case -1:
		default:
			switch typeconv.TypeFamilyToCanonicalTypeFamily(rightType.Family()) {
			case types.BoolFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castDatumBoolOp{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			case typeconv.DatumVecCanonicalTypeFamily:
				switch rightType.Width() {
				case -1:
				default:
					return &castDatumDatumOp{
						OneInputCloserHelper: colexecop.MakeOneInputCloserHelper(input),
						allocator:            allocator,
						colIdx:               colIdx,
						outputIdx:            resultIdx,
						toType:               toType,
					}, nil
				}
			}
		}
	}
	return nil, errors.Errorf("unhandled cast %s -> %s", fromType, toType)
}

type castOpNullAny struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
}

var _ colexecop.ClosableOperator = &castOpNullAny{}

func (c *castOpNullAny) Init() {
	c.Input.Init()
}

func (c *castOpNullAny) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	vec := batch.ColVec(c.colIdx)
	projVec := batch.ColVec(c.outputIdx)
	vecNulls := vec.Nulls()
	projNulls := projVec.Nulls()
	if projVec.MaybeHasNulls() {
		// We need to make sure that there are no left over nulls values in the
		// output vector.
		projNulls.UnsetNulls()
	}
	if sel := batch.Selection(); sel != nil {
		sel = sel[:n]
		for _, i := range sel {
			if vecNulls.NullAt(i) {
				projNulls.SetNull(i)
			} else {
				colexecerror.InternalError(errors.Errorf("unexpected non-null at index %d", i))
			}
		}
	} else {
		for i := 0; i < n; i++ {
			if vecNulls.NullAt(i) {
				projNulls.SetNull(i)
			} else {
				colexecerror.InternalError(fmt.Errorf("unexpected non-null at index %d", i))
			}
		}
	}
	return batch
}

// TODO(yuzefovich): refactor castOp so that it is type-specific (meaning not
// canonical type family specific, but actual type specific). This will
// probably require changing the way we handle cast overloads as well.

type castBoolBoolOp struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castBoolBoolOp{}
var _ colexecop.ClosableOperator = &castBoolBoolOp{}

func (c *castBoolBoolOp) Init() {
	c.Input.Init()
}

func (c *castBoolBoolOp) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castBoolBoolOp) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Bool()
			outputCol := outputVec.Bool()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r bool
						r = v
						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r bool
						r = v
						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r bool
						r = v
						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r bool
						r = v
						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castBoolFloat64Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castBoolFloat64Op{}
var _ colexecop.ClosableOperator = &castBoolFloat64Op{}

func (c *castBoolFloat64Op) Init() {
	c.Input.Init()
}

func (c *castBoolFloat64Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castBoolFloat64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Bool()
			outputCol := outputVec.Float64()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r float64

						r = 0
						if v {
							r = 1
						}

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r float64

						r = 0
						if v {
							r = 1
						}

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r float64

						r = 0
						if v {
							r = 1
						}

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r float64

						r = 0
						if v {
							r = 1
						}

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castBoolInt16Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castBoolInt16Op{}
var _ colexecop.ClosableOperator = &castBoolInt16Op{}

func (c *castBoolInt16Op) Init() {
	c.Input.Init()
}

func (c *castBoolInt16Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castBoolInt16Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Bool()
			outputCol := outputVec.Int16()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r int16

						r = 0
						if v {
							r = 1
						}

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int16

						r = 0
						if v {
							r = 1
						}

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r int16

						r = 0
						if v {
							r = 1
						}

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int16

						r = 0
						if v {
							r = 1
						}

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castBoolInt32Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castBoolInt32Op{}
var _ colexecop.ClosableOperator = &castBoolInt32Op{}

func (c *castBoolInt32Op) Init() {
	c.Input.Init()
}

func (c *castBoolInt32Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castBoolInt32Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Bool()
			outputCol := outputVec.Int32()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r int32

						r = 0
						if v {
							r = 1
						}

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int32

						r = 0
						if v {
							r = 1
						}

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r int32

						r = 0
						if v {
							r = 1
						}

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int32

						r = 0
						if v {
							r = 1
						}

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castBoolInt64Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castBoolInt64Op{}
var _ colexecop.ClosableOperator = &castBoolInt64Op{}

func (c *castBoolInt64Op) Init() {
	c.Input.Init()
}

func (c *castBoolInt64Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castBoolInt64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Bool()
			outputCol := outputVec.Int64()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r int64

						r = 0
						if v {
							r = 1
						}

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int64

						r = 0
						if v {
							r = 1
						}

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r int64

						r = 0
						if v {
							r = 1
						}

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int64

						r = 0
						if v {
							r = 1
						}

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castDecimalBoolOp struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castDecimalBoolOp{}
var _ colexecop.ClosableOperator = &castDecimalBoolOp{}

func (c *castDecimalBoolOp) Init() {
	c.Input.Init()
}

func (c *castDecimalBoolOp) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castDecimalBoolOp) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Decimal()
			outputCol := outputVec.Bool()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r bool
						r = v.Sign() != 0
						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r bool
						r = v.Sign() != 0
						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r bool
						r = v.Sign() != 0
						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r bool
						r = v.Sign() != 0
						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castDecimalDecimalOp struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castDecimalDecimalOp{}
var _ colexecop.ClosableOperator = &castDecimalDecimalOp{}

func (c *castDecimalDecimalOp) Init() {
	c.Input.Init()
}

func (c *castDecimalDecimalOp) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castDecimalDecimalOp) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Decimal()
			outputCol := outputVec.Decimal()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						r.Set(&v)
						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						outputCol[tupleIdx].Set(&r)
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						r.Set(&v)
						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						//gcassert:bce
						outputCol[tupleIdx].Set(&r)
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						r.Set(&v)
						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						outputCol[tupleIdx].Set(&r)
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						r.Set(&v)
						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						//gcassert:bce
						outputCol[tupleIdx].Set(&r)
					}
				}
			}
		},
	)
	return batch
}

type castInt16Int16Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt16Int16Op{}
var _ colexecop.ClosableOperator = &castInt16Int16Op{}

func (c *castInt16Int16Op) Init() {
	c.Input.Init()
}

func (c *castInt16Int16Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt16Int16Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int16()
			outputCol := outputVec.Int16()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r int16
						r = v
						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int16
						r = v
						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r int16
						r = v
						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int16
						r = v
						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt16Int32Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt16Int32Op{}
var _ colexecop.ClosableOperator = &castInt16Int32Op{}

func (c *castInt16Int32Op) Init() {
	c.Input.Init()
}

func (c *castInt16Int32Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt16Int32Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int16()
			outputCol := outputVec.Int32()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r int32

						r = int32(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int32

						r = int32(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r int32

						r = int32(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int32

						r = int32(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt16Int64Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt16Int64Op{}
var _ colexecop.ClosableOperator = &castInt16Int64Op{}

func (c *castInt16Int64Op) Init() {
	c.Input.Init()
}

func (c *castInt16Int64Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt16Int64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int16()
			outputCol := outputVec.Int64()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r int64

						r = int64(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int64

						r = int64(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r int64

						r = int64(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int64

						r = int64(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt16BoolOp struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt16BoolOp{}
var _ colexecop.ClosableOperator = &castInt16BoolOp{}

func (c *castInt16BoolOp) Init() {
	c.Input.Init()
}

func (c *castInt16BoolOp) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt16BoolOp) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int16()
			outputCol := outputVec.Bool()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r bool

						r = v != 0

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r bool

						r = v != 0

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r bool

						r = v != 0

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r bool

						r = v != 0

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt16DecimalOp struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt16DecimalOp{}
var _ colexecop.ClosableOperator = &castInt16DecimalOp{}

func (c *castInt16DecimalOp) Init() {
	c.Input.Init()
}

func (c *castInt16DecimalOp) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt16DecimalOp) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int16()
			outputCol := outputVec.Decimal()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						r.SetInt64(int64(v))

						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						outputCol[tupleIdx].Set(&r)
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						r.SetInt64(int64(v))

						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						//gcassert:bce
						outputCol[tupleIdx].Set(&r)
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						r.SetInt64(int64(v))

						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						outputCol[tupleIdx].Set(&r)
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						r.SetInt64(int64(v))

						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						//gcassert:bce
						outputCol[tupleIdx].Set(&r)
					}
				}
			}
		},
	)
	return batch
}

type castInt16Float64Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt16Float64Op{}
var _ colexecop.ClosableOperator = &castInt16Float64Op{}

func (c *castInt16Float64Op) Init() {
	c.Input.Init()
}

func (c *castInt16Float64Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt16Float64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int16()
			outputCol := outputVec.Float64()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r float64

						r = float64(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r float64

						r = float64(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r float64

						r = float64(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r float64

						r = float64(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt32Int16Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt32Int16Op{}
var _ colexecop.ClosableOperator = &castInt32Int16Op{}

func (c *castInt32Int16Op) Init() {
	c.Input.Init()
}

func (c *castInt32Int16Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt32Int16Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int32()
			outputCol := outputVec.Int16()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r int16

						r = int16(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int16

						r = int16(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r int16

						r = int16(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int16

						r = int16(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt32Int32Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt32Int32Op{}
var _ colexecop.ClosableOperator = &castInt32Int32Op{}

func (c *castInt32Int32Op) Init() {
	c.Input.Init()
}

func (c *castInt32Int32Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt32Int32Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int32()
			outputCol := outputVec.Int32()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r int32
						r = v
						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int32
						r = v
						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r int32
						r = v
						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int32
						r = v
						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt32Int64Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt32Int64Op{}
var _ colexecop.ClosableOperator = &castInt32Int64Op{}

func (c *castInt32Int64Op) Init() {
	c.Input.Init()
}

func (c *castInt32Int64Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt32Int64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int32()
			outputCol := outputVec.Int64()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r int64

						r = int64(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int64

						r = int64(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r int64

						r = int64(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int64

						r = int64(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt32BoolOp struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt32BoolOp{}
var _ colexecop.ClosableOperator = &castInt32BoolOp{}

func (c *castInt32BoolOp) Init() {
	c.Input.Init()
}

func (c *castInt32BoolOp) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt32BoolOp) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int32()
			outputCol := outputVec.Bool()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r bool

						r = v != 0

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r bool

						r = v != 0

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r bool

						r = v != 0

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r bool

						r = v != 0

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt32DecimalOp struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt32DecimalOp{}
var _ colexecop.ClosableOperator = &castInt32DecimalOp{}

func (c *castInt32DecimalOp) Init() {
	c.Input.Init()
}

func (c *castInt32DecimalOp) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt32DecimalOp) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int32()
			outputCol := outputVec.Decimal()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						r.SetInt64(int64(v))

						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						outputCol[tupleIdx].Set(&r)
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						r.SetInt64(int64(v))

						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						//gcassert:bce
						outputCol[tupleIdx].Set(&r)
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						r.SetInt64(int64(v))

						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						outputCol[tupleIdx].Set(&r)
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						r.SetInt64(int64(v))

						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						//gcassert:bce
						outputCol[tupleIdx].Set(&r)
					}
				}
			}
		},
	)
	return batch
}

type castInt32Float64Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt32Float64Op{}
var _ colexecop.ClosableOperator = &castInt32Float64Op{}

func (c *castInt32Float64Op) Init() {
	c.Input.Init()
}

func (c *castInt32Float64Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt32Float64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int32()
			outputCol := outputVec.Float64()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r float64

						r = float64(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r float64

						r = float64(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r float64

						r = float64(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r float64

						r = float64(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt64Int16Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt64Int16Op{}
var _ colexecop.ClosableOperator = &castInt64Int16Op{}

func (c *castInt64Int16Op) Init() {
	c.Input.Init()
}

func (c *castInt64Int16Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt64Int16Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int64()
			outputCol := outputVec.Int16()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r int16

						r = int16(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int16

						r = int16(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r int16

						r = int16(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int16

						r = int16(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt64Int32Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt64Int32Op{}
var _ colexecop.ClosableOperator = &castInt64Int32Op{}

func (c *castInt64Int32Op) Init() {
	c.Input.Init()
}

func (c *castInt64Int32Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt64Int32Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int64()
			outputCol := outputVec.Int32()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r int32

						r = int32(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int32

						r = int32(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r int32

						r = int32(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int32

						r = int32(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt64Int64Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt64Int64Op{}
var _ colexecop.ClosableOperator = &castInt64Int64Op{}

func (c *castInt64Int64Op) Init() {
	c.Input.Init()
}

func (c *castInt64Int64Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt64Int64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int64()
			outputCol := outputVec.Int64()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r int64
						r = v
						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int64
						r = v
						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r int64
						r = v
						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int64
						r = v
						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt64BoolOp struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt64BoolOp{}
var _ colexecop.ClosableOperator = &castInt64BoolOp{}

func (c *castInt64BoolOp) Init() {
	c.Input.Init()
}

func (c *castInt64BoolOp) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt64BoolOp) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int64()
			outputCol := outputVec.Bool()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r bool

						r = v != 0

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r bool

						r = v != 0

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r bool

						r = v != 0

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r bool

						r = v != 0

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castInt64DecimalOp struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt64DecimalOp{}
var _ colexecop.ClosableOperator = &castInt64DecimalOp{}

func (c *castInt64DecimalOp) Init() {
	c.Input.Init()
}

func (c *castInt64DecimalOp) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt64DecimalOp) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int64()
			outputCol := outputVec.Decimal()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						r.SetInt64(int64(v))

						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						outputCol[tupleIdx].Set(&r)
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						r.SetInt64(int64(v))

						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						//gcassert:bce
						outputCol[tupleIdx].Set(&r)
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						r.SetInt64(int64(v))

						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						outputCol[tupleIdx].Set(&r)
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						r.SetInt64(int64(v))

						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						//gcassert:bce
						outputCol[tupleIdx].Set(&r)
					}
				}
			}
		},
	)
	return batch
}

type castInt64Float64Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castInt64Float64Op{}
var _ colexecop.ClosableOperator = &castInt64Float64Op{}

func (c *castInt64Float64Op) Init() {
	c.Input.Init()
}

func (c *castInt64Float64Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castInt64Float64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Int64()
			outputCol := outputVec.Float64()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r float64

						r = float64(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r float64

						r = float64(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r float64

						r = float64(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r float64

						r = float64(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castFloat64Float64Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castFloat64Float64Op{}
var _ colexecop.ClosableOperator = &castFloat64Float64Op{}

func (c *castFloat64Float64Op) Init() {
	c.Input.Init()
}

func (c *castFloat64Float64Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castFloat64Float64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Float64()
			outputCol := outputVec.Float64()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r float64
						r = v
						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r float64
						r = v
						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r float64
						r = v
						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r float64
						r = v
						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castFloat64BoolOp struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castFloat64BoolOp{}
var _ colexecop.ClosableOperator = &castFloat64BoolOp{}

func (c *castFloat64BoolOp) Init() {
	c.Input.Init()
}

func (c *castFloat64BoolOp) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castFloat64BoolOp) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Float64()
			outputCol := outputVec.Bool()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r bool

						r = v != 0

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r bool

						r = v != 0

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r bool

						r = v != 0

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r bool

						r = v != 0

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castFloat64DecimalOp struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castFloat64DecimalOp{}
var _ colexecop.ClosableOperator = &castFloat64DecimalOp{}

func (c *castFloat64DecimalOp) Init() {
	c.Input.Init()
}

func (c *castFloat64DecimalOp) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castFloat64DecimalOp) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Float64()
			outputCol := outputVec.Decimal()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						if _, err := r.SetFloat64(float64(v)); err != nil {
							colexecerror.ExpectedError(err)
						}

						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						outputCol[tupleIdx].Set(&r)
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						if _, err := r.SetFloat64(float64(v)); err != nil {
							colexecerror.ExpectedError(err)
						}

						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						//gcassert:bce
						outputCol[tupleIdx].Set(&r)
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						if _, err := r.SetFloat64(float64(v)); err != nil {
							colexecerror.ExpectedError(err)
						}

						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						outputCol[tupleIdx].Set(&r)
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r apd.Decimal

						if _, err := r.SetFloat64(float64(v)); err != nil {
							colexecerror.ExpectedError(err)
						}

						if err := tree.LimitDecimalWidth(&r, int(c.toType.Precision()), int(c.toType.Scale())); err != nil {
							colexecerror.ExpectedError(err)
						}

						//gcassert:bce
						outputCol[tupleIdx].Set(&r)
					}
				}
			}
		},
	)
	return batch
}

type castFloat64Int16Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castFloat64Int16Op{}
var _ colexecop.ClosableOperator = &castFloat64Int16Op{}

func (c *castFloat64Int16Op) Init() {
	c.Input.Init()
}

func (c *castFloat64Int16Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castFloat64Int16Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Float64()
			outputCol := outputVec.Int16()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r int16

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int16(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int16

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int16(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r int16

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int16(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int16

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int16(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castFloat64Int32Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castFloat64Int32Op{}
var _ colexecop.ClosableOperator = &castFloat64Int32Op{}

func (c *castFloat64Int32Op) Init() {
	c.Input.Init()
}

func (c *castFloat64Int32Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castFloat64Int32Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Float64()
			outputCol := outputVec.Int32()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r int32

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int32(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int32

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int32(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r int32

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int32(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int32

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int32(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castFloat64Int64Op struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castFloat64Int64Op{}
var _ colexecop.ClosableOperator = &castFloat64Int64Op{}

func (c *castFloat64Int64Op) Init() {
	c.Input.Init()
}

func (c *castFloat64Int64Op) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castFloat64Int64Op) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Float64()
			outputCol := outputVec.Int64()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r int64

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int64(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int64

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int64(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r int64

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int64(v)

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r int64

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
							colexecerror.ExpectedError(tree.ErrIntOutOfRange)
						}
						r = int64(v)

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castDatumBoolOp struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castDatumBoolOp{}
var _ colexecop.ClosableOperator = &castDatumBoolOp{}

func (c *castDatumBoolOp) Init() {
	c.Input.Init()
}

func (c *castDatumBoolOp) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castDatumBoolOp) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Datum()
			outputCol := outputVec.Bool()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r bool

						{
							_castedDatum, err := v.(*coldataext.Datum).Cast(inputCol, types.Bool)
							if err != nil {
								colexecerror.ExpectedError(err)
							}
							r = _castedDatum == tree.DBoolTrue
						}

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r bool

						{
							_castedDatum, err := v.(*coldataext.Datum).Cast(inputCol, types.Bool)
							if err != nil {
								colexecerror.ExpectedError(err)
							}
							r = _castedDatum == tree.DBoolTrue
						}

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r bool

						{
							_castedDatum, err := v.(*coldataext.Datum).Cast(inputCol, types.Bool)
							if err != nil {
								colexecerror.ExpectedError(err)
							}
							r = _castedDatum == tree.DBoolTrue
						}

						outputCol[tupleIdx] = r
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r bool

						{
							_castedDatum, err := v.(*coldataext.Datum).Cast(inputCol, types.Bool)
							if err != nil {
								colexecerror.ExpectedError(err)
							}
							r = _castedDatum == tree.DBoolTrue
						}

						//gcassert:bce
						outputCol[tupleIdx] = r
					}
				}
			}
		},
	)
	return batch
}

type castDatumDatumOp struct {
	colexecop.OneInputCloserHelper

	allocator *colmem.Allocator
	colIdx    int
	outputIdx int
	toType    *types.T
}

var _ colexecop.ResettableOperator = &castDatumDatumOp{}
var _ colexecop.ClosableOperator = &castDatumDatumOp{}

func (c *castDatumDatumOp) Init() {
	c.Input.Init()
}

func (c *castDatumDatumOp) Reset(ctx context.Context) {
	if r, ok := c.Input.(colexecop.Resetter); ok {
		r.Reset(ctx)
	}
}

func (c *castDatumDatumOp) Next(ctx context.Context) coldata.Batch {
	batch := c.Input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	sel := batch.Selection()
	inputVec := batch.ColVec(c.colIdx)
	outputVec := batch.ColVec(c.outputIdx)
	c.allocator.PerformOperation(
		[]coldata.Vec{outputVec}, func() {
			inputCol := inputVec.Datum()
			outputCol := outputVec.Datum()
			outputNulls := outputVec.Nulls()
			if inputVec.MaybeHasNulls() {
				inputNulls := inputVec.Nulls()
				outputNulls.Copy(inputNulls)
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						v := inputCol.Get(tupleIdx)
						var r interface{}

						{
							_castedDatum, err := v.(*coldataext.Datum).Cast(inputCol, c.toType)
							if err != nil {
								colexecerror.ExpectedError(err)
							}
							r = _castedDatum
						}

						outputCol.Set(tupleIdx, r)
						// Casting to datum-backed vector might produce a null value on
						// non-null tuple, so we need to check that case after the cast was
						// performed.
						if r == tree.DNull {
							outputNulls.SetNull(tupleIdx)
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						if inputNulls.NullAt(tupleIdx) {
							continue
						}
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r interface{}

						{
							_castedDatum, err := v.(*coldataext.Datum).Cast(inputCol, c.toType)
							if err != nil {
								colexecerror.ExpectedError(err)
							}
							r = _castedDatum
						}

						outputCol.Set(tupleIdx, r)
						// Casting to datum-backed vector might produce a null value on
						// non-null tuple, so we need to check that case after the cast was
						// performed.
						if r == tree.DNull {
							outputNulls.SetNull(tupleIdx)
						}
					}
				}
			} else {
				// We need to make sure that there are no left over null values
				// in the output vector.
				outputNulls.UnsetNulls()
				if sel != nil {
					sel = sel[:n]
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = sel[i]
						v := inputCol.Get(tupleIdx)
						var r interface{}

						{
							_castedDatum, err := v.(*coldataext.Datum).Cast(inputCol, c.toType)
							if err != nil {
								colexecerror.ExpectedError(err)
							}
							r = _castedDatum
						}

						outputCol.Set(tupleIdx, r)
						// Casting to datum-backed vector might produce a null value on
						// non-null tuple, so we need to check that case after the cast was
						// performed.
						if r == tree.DNull {
							outputNulls.SetNull(tupleIdx)
						}
					}
				} else {
					// Remove bounds checks for inputCol[i] and outputCol[i].
					_ = inputCol.Get(n - 1)
					_ = outputCol.Get(n - 1)
					var tupleIdx int
					for i := 0; i < n; i++ {
						tupleIdx = i
						//gcassert:bce
						v := inputCol.Get(tupleIdx)
						var r interface{}

						{
							_castedDatum, err := v.(*coldataext.Datum).Cast(inputCol, c.toType)
							if err != nil {
								colexecerror.ExpectedError(err)
							}
							r = _castedDatum
						}

						outputCol.Set(tupleIdx, r)
						// Casting to datum-backed vector might produce a null value on
						// non-null tuple, so we need to check that case after the cast was
						// performed.
						if r == tree.DNull {
							outputNulls.SetNull(tupleIdx)
						}
					}
				}
			}
		},
	)
	return batch
}
