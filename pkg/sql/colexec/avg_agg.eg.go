// Code generated by execgen; DO NOT EDIT.
// Copyright 2018 The Cockroach Authors.
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package colexec

import (
	"github.com/cockroachdb/apd"
	"github.com/cockroachdb/cockroach/pkg/col/coldata"
	"github.com/cockroachdb/cockroach/pkg/col/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/colexec/execerror"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/pkg/errors"
)

func newAvgAgg(t coltypes.T) (aggregateFunc, error) {
	switch t {
	case coltypes.Decimal:
		return &avgDecimalAgg{}, nil
	case coltypes.Float64:
		return &avgFloat64Agg{}, nil
	default:
		return nil, errors.Errorf("unsupported avg agg type %s", t)
	}
}

type avgDecimalAgg struct {
	done bool

	groups  []bool
	scratch struct {
		curIdx int
		// curSum keeps track of the sum of elements belonging to the current group,
		// so we can index into the slice once per group, instead of on each
		// iteration.
		curSum apd.Decimal
		// curCount keeps track of the number of elements that we've seen
		// belonging to the current group.
		curCount int64
		// vec points to the output vector.
		vec []apd.Decimal
		// nulls points to the output null vector that we are updating.
		nulls *coldata.Nulls
		// foundNonNullForCurrentGroup tracks if we have seen any non-null values
		// for the group that is currently being aggregated.
		foundNonNullForCurrentGroup bool
	}
}

var _ aggregateFunc = &avgDecimalAgg{}

func (a *avgDecimalAgg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.scratch.vec = v.Decimal()
	a.scratch.nulls = v.Nulls()
	a.Reset()
}

func (a *avgDecimalAgg) Reset() {
	copy(a.scratch.vec, zeroDecimalColumn)
	a.scratch.curIdx = -1
	a.scratch.curSum = zeroDecimalColumn[0]
	a.scratch.curCount = 0
	a.scratch.foundNonNullForCurrentGroup = false
	a.scratch.nulls.UnsetNulls()
	a.done = false
}

func (a *avgDecimalAgg) CurrentOutputIndex() int {
	return a.scratch.curIdx
}

func (a *avgDecimalAgg) SetOutputIndex(idx int) {
	if a.scratch.curIdx != -1 {
		a.scratch.curIdx = idx
		a.scratch.nulls.UnsetNullsAfter(uint16(idx + 1))
		copy(a.scratch.vec[idx+1:], zeroDecimalColumn)
	}
}

func (a *avgDecimalAgg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value. If we haven't found
		// any non-nulls for this group so far, the output for this group should be
		// NULL.
		if !a.scratch.foundNonNullForCurrentGroup {
			a.scratch.nulls.SetNull(uint16(a.scratch.curIdx))
		} else {
			a.scratch.vec[a.scratch.curIdx].SetInt64(a.scratch.curCount)
			if _, err := tree.DecimalCtx.Quo(&a.scratch.vec[a.scratch.curIdx], &a.scratch.curSum, &a.scratch.vec[a.scratch.curIdx]); err != nil {
				execerror.VectorizedInternalPanic(err)
			}
		}
		a.scratch.curIdx++
		a.done = true
		return
	}
	vec, sel := b.ColVec(int(inputIdxs[0])), b.Selection()
	col, nulls := vec.Decimal(), vec.Nulls()
	if nulls.MaybeHasNulls() {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If we encounter a new group, and we haven't found any non-nulls for the
					// current group, the output for this group should be null. If
					// a.scratch.curIdx is negative, it means that this is the first group.
					if a.scratch.curIdx >= 0 {
						if !a.scratch.foundNonNullForCurrentGroup {
							a.scratch.nulls.SetNull(uint16(a.scratch.curIdx))
						} else {
							a.scratch.vec[a.scratch.curIdx].SetInt64(a.scratch.curCount)
							if _, err := tree.DecimalCtx.Quo(&a.scratch.vec[a.scratch.curIdx], &a.scratch.curSum, &a.scratch.vec[a.scratch.curIdx]); err != nil {
								execerror.VectorizedInternalPanic(err)
							}
						}
					}
					a.scratch.curIdx++

					a.scratch.foundNonNullForCurrentGroup = false

					// The next element of vec is guaranteed  to be initialized to the zero
					// value. We can't use zero<no value>Column here because this is outside of
					// the earlier template block.
					a.scratch.curSum = a.scratch.vec[a.scratch.curIdx]
					a.scratch.curCount = 0
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !isNull {
					if _, err := tree.ExactCtx.Add(&a.scratch.curSum, &a.scratch.curSum, &col[i]); err != nil {
						execerror.NonVectorizedPanic(err)
					}
					a.scratch.curCount++
					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If we encounter a new group, and we haven't found any non-nulls for the
					// current group, the output for this group should be null. If
					// a.scratch.curIdx is negative, it means that this is the first group.
					if a.scratch.curIdx >= 0 {
						if !a.scratch.foundNonNullForCurrentGroup {
							a.scratch.nulls.SetNull(uint16(a.scratch.curIdx))
						} else {
							a.scratch.vec[a.scratch.curIdx].SetInt64(a.scratch.curCount)
							if _, err := tree.DecimalCtx.Quo(&a.scratch.vec[a.scratch.curIdx], &a.scratch.curSum, &a.scratch.vec[a.scratch.curIdx]); err != nil {
								execerror.VectorizedInternalPanic(err)
							}
						}
					}
					a.scratch.curIdx++

					a.scratch.foundNonNullForCurrentGroup = false

					// The next element of vec is guaranteed  to be initialized to the zero
					// value. We can't use zero<no value>Column here because this is outside of
					// the earlier template block.
					a.scratch.curSum = a.scratch.vec[a.scratch.curIdx]
					a.scratch.curCount = 0
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !isNull {
					if _, err := tree.ExactCtx.Add(&a.scratch.curSum, &a.scratch.curSum, &col[i]); err != nil {
						execerror.NonVectorizedPanic(err)
					}
					a.scratch.curCount++
					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		}
	} else {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If we encounter a new group, and we haven't found any non-nulls for the
					// current group, the output for this group should be null. If
					// a.scratch.curIdx is negative, it means that this is the first group.
					if a.scratch.curIdx >= 0 {
						if !a.scratch.foundNonNullForCurrentGroup {
							a.scratch.nulls.SetNull(uint16(a.scratch.curIdx))
						} else {
							a.scratch.vec[a.scratch.curIdx].SetInt64(a.scratch.curCount)
							if _, err := tree.DecimalCtx.Quo(&a.scratch.vec[a.scratch.curIdx], &a.scratch.curSum, &a.scratch.vec[a.scratch.curIdx]); err != nil {
								execerror.VectorizedInternalPanic(err)
							}
						}
					}
					a.scratch.curIdx++

					// The next element of vec is guaranteed  to be initialized to the zero
					// value. We can't use zero<no value>Column here because this is outside of
					// the earlier template block.
					a.scratch.curSum = a.scratch.vec[a.scratch.curIdx]
					a.scratch.curCount = 0
				}
				var isNull bool
				isNull = false
				if !isNull {
					if _, err := tree.ExactCtx.Add(&a.scratch.curSum, &a.scratch.curSum, &col[i]); err != nil {
						execerror.NonVectorizedPanic(err)
					}
					a.scratch.curCount++
					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If we encounter a new group, and we haven't found any non-nulls for the
					// current group, the output for this group should be null. If
					// a.scratch.curIdx is negative, it means that this is the first group.
					if a.scratch.curIdx >= 0 {
						if !a.scratch.foundNonNullForCurrentGroup {
							a.scratch.nulls.SetNull(uint16(a.scratch.curIdx))
						} else {
							a.scratch.vec[a.scratch.curIdx].SetInt64(a.scratch.curCount)
							if _, err := tree.DecimalCtx.Quo(&a.scratch.vec[a.scratch.curIdx], &a.scratch.curSum, &a.scratch.vec[a.scratch.curIdx]); err != nil {
								execerror.VectorizedInternalPanic(err)
							}
						}
					}
					a.scratch.curIdx++

					// The next element of vec is guaranteed  to be initialized to the zero
					// value. We can't use zero<no value>Column here because this is outside of
					// the earlier template block.
					a.scratch.curSum = a.scratch.vec[a.scratch.curIdx]
					a.scratch.curCount = 0
				}
				var isNull bool
				isNull = false
				if !isNull {
					if _, err := tree.ExactCtx.Add(&a.scratch.curSum, &a.scratch.curSum, &col[i]); err != nil {
						execerror.NonVectorizedPanic(err)
					}
					a.scratch.curCount++
					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *avgDecimalAgg) HandleEmptyInputScalar() {
	a.scratch.nulls.SetNull(0)
}

type avgFloat64Agg struct {
	done bool

	groups  []bool
	scratch struct {
		curIdx int
		// curSum keeps track of the sum of elements belonging to the current group,
		// so we can index into the slice once per group, instead of on each
		// iteration.
		curSum float64
		// curCount keeps track of the number of elements that we've seen
		// belonging to the current group.
		curCount int64
		// vec points to the output vector.
		vec []float64
		// nulls points to the output null vector that we are updating.
		nulls *coldata.Nulls
		// foundNonNullForCurrentGroup tracks if we have seen any non-null values
		// for the group that is currently being aggregated.
		foundNonNullForCurrentGroup bool
	}
}

var _ aggregateFunc = &avgFloat64Agg{}

func (a *avgFloat64Agg) Init(groups []bool, v coldata.Vec) {
	a.groups = groups
	a.scratch.vec = v.Float64()
	a.scratch.nulls = v.Nulls()
	a.Reset()
}

func (a *avgFloat64Agg) Reset() {
	copy(a.scratch.vec, zeroFloat64Column)
	a.scratch.curIdx = -1
	a.scratch.curSum = zeroFloat64Column[0]
	a.scratch.curCount = 0
	a.scratch.foundNonNullForCurrentGroup = false
	a.scratch.nulls.UnsetNulls()
	a.done = false
}

func (a *avgFloat64Agg) CurrentOutputIndex() int {
	return a.scratch.curIdx
}

func (a *avgFloat64Agg) SetOutputIndex(idx int) {
	if a.scratch.curIdx != -1 {
		a.scratch.curIdx = idx
		a.scratch.nulls.UnsetNullsAfter(uint16(idx + 1))
		copy(a.scratch.vec[idx+1:], zeroFloat64Column)
	}
}

func (a *avgFloat64Agg) Compute(b coldata.Batch, inputIdxs []uint32) {
	if a.done {
		return
	}
	inputLen := b.Length()
	if inputLen == 0 {
		// The aggregation is finished. Flush the last value. If we haven't found
		// any non-nulls for this group so far, the output for this group should be
		// NULL.
		if !a.scratch.foundNonNullForCurrentGroup {
			a.scratch.nulls.SetNull(uint16(a.scratch.curIdx))
		} else {
			a.scratch.vec[a.scratch.curIdx] = a.scratch.curSum / float64(a.scratch.curCount)
		}
		a.scratch.curIdx++
		a.done = true
		return
	}
	vec, sel := b.ColVec(int(inputIdxs[0])), b.Selection()
	col, nulls := vec.Float64(), vec.Nulls()
	if nulls.MaybeHasNulls() {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If we encounter a new group, and we haven't found any non-nulls for the
					// current group, the output for this group should be null. If
					// a.scratch.curIdx is negative, it means that this is the first group.
					if a.scratch.curIdx >= 0 {
						if !a.scratch.foundNonNullForCurrentGroup {
							a.scratch.nulls.SetNull(uint16(a.scratch.curIdx))
						} else {
							a.scratch.vec[a.scratch.curIdx] = a.scratch.curSum / float64(a.scratch.curCount)
						}
					}
					a.scratch.curIdx++

					a.scratch.foundNonNullForCurrentGroup = false

					// The next element of vec is guaranteed  to be initialized to the zero
					// value. We can't use zero<no value>Column here because this is outside of
					// the earlier template block.
					a.scratch.curSum = a.scratch.vec[a.scratch.curIdx]
					a.scratch.curCount = 0
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !isNull {
					a.scratch.curSum = float64(a.scratch.curSum) + float64(col[i])
					a.scratch.curCount++
					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If we encounter a new group, and we haven't found any non-nulls for the
					// current group, the output for this group should be null. If
					// a.scratch.curIdx is negative, it means that this is the first group.
					if a.scratch.curIdx >= 0 {
						if !a.scratch.foundNonNullForCurrentGroup {
							a.scratch.nulls.SetNull(uint16(a.scratch.curIdx))
						} else {
							a.scratch.vec[a.scratch.curIdx] = a.scratch.curSum / float64(a.scratch.curCount)
						}
					}
					a.scratch.curIdx++

					a.scratch.foundNonNullForCurrentGroup = false

					// The next element of vec is guaranteed  to be initialized to the zero
					// value. We can't use zero<no value>Column here because this is outside of
					// the earlier template block.
					a.scratch.curSum = a.scratch.vec[a.scratch.curIdx]
					a.scratch.curCount = 0
				}
				var isNull bool
				isNull = nulls.NullAt(uint16(i))
				if !isNull {
					a.scratch.curSum = float64(a.scratch.curSum) + float64(col[i])
					a.scratch.curCount++
					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		}
	} else {
		if sel != nil {
			sel = sel[:inputLen]
			for _, i := range sel {

				if a.groups[i] {
					// If we encounter a new group, and we haven't found any non-nulls for the
					// current group, the output for this group should be null. If
					// a.scratch.curIdx is negative, it means that this is the first group.
					if a.scratch.curIdx >= 0 {
						if !a.scratch.foundNonNullForCurrentGroup {
							a.scratch.nulls.SetNull(uint16(a.scratch.curIdx))
						} else {
							a.scratch.vec[a.scratch.curIdx] = a.scratch.curSum / float64(a.scratch.curCount)
						}
					}
					a.scratch.curIdx++

					// The next element of vec is guaranteed  to be initialized to the zero
					// value. We can't use zero<no value>Column here because this is outside of
					// the earlier template block.
					a.scratch.curSum = a.scratch.vec[a.scratch.curIdx]
					a.scratch.curCount = 0
				}
				var isNull bool
				isNull = false
				if !isNull {
					a.scratch.curSum = float64(a.scratch.curSum) + float64(col[i])
					a.scratch.curCount++
					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			col = col[:inputLen]
			for i := range col {

				if a.groups[i] {
					// If we encounter a new group, and we haven't found any non-nulls for the
					// current group, the output for this group should be null. If
					// a.scratch.curIdx is negative, it means that this is the first group.
					if a.scratch.curIdx >= 0 {
						if !a.scratch.foundNonNullForCurrentGroup {
							a.scratch.nulls.SetNull(uint16(a.scratch.curIdx))
						} else {
							a.scratch.vec[a.scratch.curIdx] = a.scratch.curSum / float64(a.scratch.curCount)
						}
					}
					a.scratch.curIdx++

					// The next element of vec is guaranteed  to be initialized to the zero
					// value. We can't use zero<no value>Column here because this is outside of
					// the earlier template block.
					a.scratch.curSum = a.scratch.vec[a.scratch.curIdx]
					a.scratch.curCount = 0
				}
				var isNull bool
				isNull = false
				if !isNull {
					a.scratch.curSum = float64(a.scratch.curSum) + float64(col[i])
					a.scratch.curCount++
					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *avgFloat64Agg) HandleEmptyInputScalar() {
	a.scratch.nulls.SetNull(0)
}
