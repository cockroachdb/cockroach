// Code generated by execgen; DO NOT EDIT.
// Copyright 2020 The Cockroach Authors.
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package colexec

import (
	"context"
	"fmt"
	"math"
	"reflect"
	"unsafe"

	"github.com/cockroachdb/cockroach/pkg/col/coldata"
	"github.com/cockroachdb/cockroach/pkg/col/coldataext"
	"github.com/cockroachdb/cockroach/pkg/col/typeconv"
	"github.com/cockroachdb/cockroach/pkg/sql/colexecbase/colexecerror"
	"github.com/cockroachdb/cockroach/pkg/sql/sqlbase"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

// rehash takes an element of a key (tuple representing a row of equality
// column values) at a given column and computes a new hash by applying a
// transformation to the existing hash.
func rehash(
	ctx context.Context,
	buckets []uint64,
	col coldata.Vec,
	nKeys int,
	sel []int,
	cancelChecker CancelChecker,
	overloadHelper overloadHelper,
	datumAlloc *sqlbase.DatumAlloc,
) {
	// In order to inline the templated code of overloads, we need to have a
	// "_overloadHelper" local variable of type "overloadHelper".
	_overloadHelper := overloadHelper
	switch col.CanonicalTypeFamily() {
	case types.BoolFamily:
		switch col.Type().Width() {
		case -1:
		default:
			keys, nulls := col.Bool(), col.Nulls()
			if col.MaybeHasNulls() {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						x := 0
						if v {
							x = 1
						}
						p = p*31 + uintptr(x)

						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						x := 0
						if v {
							x = 1
						}
						p = p*31 + uintptr(x)

						buckets[i] = uint64(p)
					}
				}
			} else {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						x := 0
						if v {
							x = 1
						}
						p = p*31 + uintptr(x)

						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						x := 0
						if v {
							x = 1
						}
						p = p*31 + uintptr(x)

						buckets[i] = uint64(p)
					}
				}
			}
		}
	case types.BytesFamily:
		switch col.Type().Width() {
		case -1:
		default:
			keys, nulls := col.Bytes(), col.Nulls()
			if col.MaybeHasNulls() {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						sh := (*reflect.SliceHeader)(unsafe.Pointer(&v))
						p = memhash(unsafe.Pointer(sh.Data), p, uintptr(len(v)))

						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						sh := (*reflect.SliceHeader)(unsafe.Pointer(&v))
						p = memhash(unsafe.Pointer(sh.Data), p, uintptr(len(v)))

						buckets[i] = uint64(p)
					}
				}
			} else {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						sh := (*reflect.SliceHeader)(unsafe.Pointer(&v))
						p = memhash(unsafe.Pointer(sh.Data), p, uintptr(len(v)))

						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						sh := (*reflect.SliceHeader)(unsafe.Pointer(&v))
						p = memhash(unsafe.Pointer(sh.Data), p, uintptr(len(v)))

						buckets[i] = uint64(p)
					}
				}
			}
		}
	case types.DecimalFamily:
		switch col.Type().Width() {
		case -1:
		default:
			keys, nulls := col.Decimal(), col.Nulls()
			if col.MaybeHasNulls() {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						// In order for equal decimals to hash to the same value we need to
						// remove the trailing zeroes if there are any.
						tmpDec := &_overloadHelper.tmpDec1
						tmpDec.Reduce(&v)
						b := []byte(tmpDec.String())
						sh := (*reflect.SliceHeader)(unsafe.Pointer(&b))
						p = memhash(unsafe.Pointer(sh.Data), p, uintptr(len(b)))

						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						// In order for equal decimals to hash to the same value we need to
						// remove the trailing zeroes if there are any.
						tmpDec := &_overloadHelper.tmpDec1
						tmpDec.Reduce(&v)
						b := []byte(tmpDec.String())
						sh := (*reflect.SliceHeader)(unsafe.Pointer(&b))
						p = memhash(unsafe.Pointer(sh.Data), p, uintptr(len(b)))

						buckets[i] = uint64(p)
					}
				}
			} else {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						// In order for equal decimals to hash to the same value we need to
						// remove the trailing zeroes if there are any.
						tmpDec := &_overloadHelper.tmpDec1
						tmpDec.Reduce(&v)
						b := []byte(tmpDec.String())
						sh := (*reflect.SliceHeader)(unsafe.Pointer(&b))
						p = memhash(unsafe.Pointer(sh.Data), p, uintptr(len(b)))

						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						// In order for equal decimals to hash to the same value we need to
						// remove the trailing zeroes if there are any.
						tmpDec := &_overloadHelper.tmpDec1
						tmpDec.Reduce(&v)
						b := []byte(tmpDec.String())
						sh := (*reflect.SliceHeader)(unsafe.Pointer(&b))
						p = memhash(unsafe.Pointer(sh.Data), p, uintptr(len(b)))

						buckets[i] = uint64(p)
					}
				}
			}
		}
	case types.IntFamily:
		switch col.Type().Width() {
		case 16:
			keys, nulls := col.Int16(), col.Nulls()
			if col.MaybeHasNulls() {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						// In order for integers with different widths but of the same value to
						// to hash to the same value, we upcast all of them to int64.
						asInt64 := int64(v)
						p = memhash64(noescape(unsafe.Pointer(&asInt64)), p)
						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						// In order for integers with different widths but of the same value to
						// to hash to the same value, we upcast all of them to int64.
						asInt64 := int64(v)
						p = memhash64(noescape(unsafe.Pointer(&asInt64)), p)
						buckets[i] = uint64(p)
					}
				}
			} else {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						// In order for integers with different widths but of the same value to
						// to hash to the same value, we upcast all of them to int64.
						asInt64 := int64(v)
						p = memhash64(noescape(unsafe.Pointer(&asInt64)), p)
						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						// In order for integers with different widths but of the same value to
						// to hash to the same value, we upcast all of them to int64.
						asInt64 := int64(v)
						p = memhash64(noescape(unsafe.Pointer(&asInt64)), p)
						buckets[i] = uint64(p)
					}
				}
			}
		case 32:
			keys, nulls := col.Int32(), col.Nulls()
			if col.MaybeHasNulls() {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						// In order for integers with different widths but of the same value to
						// to hash to the same value, we upcast all of them to int64.
						asInt64 := int64(v)
						p = memhash64(noescape(unsafe.Pointer(&asInt64)), p)
						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						// In order for integers with different widths but of the same value to
						// to hash to the same value, we upcast all of them to int64.
						asInt64 := int64(v)
						p = memhash64(noescape(unsafe.Pointer(&asInt64)), p)
						buckets[i] = uint64(p)
					}
				}
			} else {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						// In order for integers with different widths but of the same value to
						// to hash to the same value, we upcast all of them to int64.
						asInt64 := int64(v)
						p = memhash64(noescape(unsafe.Pointer(&asInt64)), p)
						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						// In order for integers with different widths but of the same value to
						// to hash to the same value, we upcast all of them to int64.
						asInt64 := int64(v)
						p = memhash64(noescape(unsafe.Pointer(&asInt64)), p)
						buckets[i] = uint64(p)
					}
				}
			}
		case -1:
		default:
			keys, nulls := col.Int64(), col.Nulls()
			if col.MaybeHasNulls() {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						// In order for integers with different widths but of the same value to
						// to hash to the same value, we upcast all of them to int64.
						asInt64 := int64(v)
						p = memhash64(noescape(unsafe.Pointer(&asInt64)), p)
						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						// In order for integers with different widths but of the same value to
						// to hash to the same value, we upcast all of them to int64.
						asInt64 := int64(v)
						p = memhash64(noescape(unsafe.Pointer(&asInt64)), p)
						buckets[i] = uint64(p)
					}
				}
			} else {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						// In order for integers with different widths but of the same value to
						// to hash to the same value, we upcast all of them to int64.
						asInt64 := int64(v)
						p = memhash64(noescape(unsafe.Pointer(&asInt64)), p)
						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						// In order for integers with different widths but of the same value to
						// to hash to the same value, we upcast all of them to int64.
						asInt64 := int64(v)
						p = memhash64(noescape(unsafe.Pointer(&asInt64)), p)
						buckets[i] = uint64(p)
					}
				}
			}
		}
	case types.FloatFamily:
		switch col.Type().Width() {
		case -1:
		default:
			keys, nulls := col.Float64(), col.Nulls()
			if col.MaybeHasNulls() {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						f := v
						if math.IsNaN(float64(f)) {
							f = 0
						}
						p = f64hash(noescape(unsafe.Pointer(&f)), p)

						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						f := v
						if math.IsNaN(float64(f)) {
							f = 0
						}
						p = f64hash(noescape(unsafe.Pointer(&f)), p)

						buckets[i] = uint64(p)
					}
				}
			} else {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						f := v
						if math.IsNaN(float64(f)) {
							f = 0
						}
						p = f64hash(noescape(unsafe.Pointer(&f)), p)

						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						f := v
						if math.IsNaN(float64(f)) {
							f = 0
						}
						p = f64hash(noescape(unsafe.Pointer(&f)), p)

						buckets[i] = uint64(p)
					}
				}
			}
		}
	case types.TimestampTZFamily:
		switch col.Type().Width() {
		case -1:
		default:
			keys, nulls := col.Timestamp(), col.Nulls()
			if col.MaybeHasNulls() {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						s := v.UnixNano()
						p = memhash64(noescape(unsafe.Pointer(&s)), p)

						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						s := v.UnixNano()
						p = memhash64(noescape(unsafe.Pointer(&s)), p)

						buckets[i] = uint64(p)
					}
				}
			} else {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						s := v.UnixNano()
						p = memhash64(noescape(unsafe.Pointer(&s)), p)

						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						s := v.UnixNano()
						p = memhash64(noescape(unsafe.Pointer(&s)), p)

						buckets[i] = uint64(p)
					}
				}
			}
		}
	case types.IntervalFamily:
		switch col.Type().Width() {
		case -1:
		default:
			keys, nulls := col.Interval(), col.Nulls()
			if col.MaybeHasNulls() {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						months, days, nanos := v.Months, v.Days, v.Nanos()
						p = memhash64(noescape(unsafe.Pointer(&months)), p)
						p = memhash64(noescape(unsafe.Pointer(&days)), p)
						p = memhash64(noescape(unsafe.Pointer(&nanos)), p)

						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						months, days, nanos := v.Months, v.Days, v.Nanos()
						p = memhash64(noescape(unsafe.Pointer(&months)), p)
						p = memhash64(noescape(unsafe.Pointer(&days)), p)
						p = memhash64(noescape(unsafe.Pointer(&nanos)), p)

						buckets[i] = uint64(p)
					}
				}
			} else {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						months, days, nanos := v.Months, v.Days, v.Nanos()
						p = memhash64(noescape(unsafe.Pointer(&months)), p)
						p = memhash64(noescape(unsafe.Pointer(&days)), p)
						p = memhash64(noescape(unsafe.Pointer(&nanos)), p)

						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1) //gcassert:inline
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						v := keys.Get(selIdx) //gcassert:inline
						p := uintptr(buckets[i])

						months, days, nanos := v.Months, v.Days, v.Nanos()
						p = memhash64(noescape(unsafe.Pointer(&months)), p)
						p = memhash64(noescape(unsafe.Pointer(&days)), p)
						p = memhash64(noescape(unsafe.Pointer(&nanos)), p)

						buckets[i] = uint64(p)
					}
				}
			}
		}
	case typeconv.DatumVecCanonicalTypeFamily:
		switch col.Type().Width() {
		case -1:
		default:
			keys, nulls := col.Datum(), col.Nulls()
			if col.MaybeHasNulls() {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx)
						p := uintptr(buckets[i])
						b := v.(*coldataext.Datum).Hash(datumAlloc)
						sh := (*reflect.SliceHeader)(unsafe.Pointer(&b))
						p = memhash(unsafe.Pointer(sh.Data), p, uintptr(len(b)))

						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1)
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						if nulls.NullAt(selIdx) {
							continue
						}
						v := keys.Get(selIdx)
						p := uintptr(buckets[i])
						b := v.(*coldataext.Datum).Hash(datumAlloc)
						sh := (*reflect.SliceHeader)(unsafe.Pointer(&b))
						p = memhash(unsafe.Pointer(sh.Data), p, uintptr(len(b)))

						buckets[i] = uint64(p)
					}
				}
			} else {
				if sel != nil {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = sel[nKeys-1]
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = sel[i]
						v := keys.Get(selIdx)
						p := uintptr(buckets[i])
						b := v.(*coldataext.Datum).Hash(datumAlloc)
						sh := (*reflect.SliceHeader)(unsafe.Pointer(&b))
						p = memhash(unsafe.Pointer(sh.Data), p, uintptr(len(b)))

						buckets[i] = uint64(p)
					}
				} else {
					// Early bounds checks.
					_ = buckets[nKeys-1]
					_ = keys.Get(nKeys - 1)
					var selIdx int
					for i := 0; i < nKeys; i++ {
						cancelChecker.check(ctx)
						selIdx = i
						v := keys.Get(selIdx)
						p := uintptr(buckets[i])
						b := v.(*coldataext.Datum).Hash(datumAlloc)
						sh := (*reflect.SliceHeader)(unsafe.Pointer(&b))
						p = memhash(unsafe.Pointer(sh.Data), p, uintptr(len(b)))

						buckets[i] = uint64(p)
					}
				}
			}
		}
	default:
		colexecerror.InternalError(fmt.Sprintf("unhandled type %s", col.Type()))
	}
}
