// Code generated by execgen; DO NOT EDIT.
// Copyright 2020 The Cockroach Authors.
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package colexechash

import (
	"bytes"
	"math"

	"github.com/cockroachdb/cockroach/pkg/col/coldata"
	"github.com/cockroachdb/cockroach/pkg/col/coldataext"
	"github.com/cockroachdb/cockroach/pkg/col/typeconv"
	"github.com/cockroachdb/cockroach/pkg/sql/colexec/colexecutils"
	"github.com/cockroachdb/cockroach/pkg/sql/colexecerror"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

// Workaround for bazel auto-generated code. goimports does not automatically
// pick up the right packages when run within the bazel sandbox.
var (
	_ = typeconv.DatumVecCanonicalTypeFamily
	_ = coldataext.CompareDatum
	_ tree.AggType
)

// checkColAgainstItself is similar to checkCol, but it probes the vector
// against itself.
func (ht *HashTable) checkColAgainstItself(vec coldata.Vec, nToCheck uint64, sel []int) {
	probeVec, buildVec, probeSel := vec, vec, sel
	switch probeVec.CanonicalTypeFamily() {
	case types.BoolFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case types.BoolFamily:
				switch buildVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Bool()
					buildKeys := buildVec.Bool()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	case types.BytesFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case types.BytesFamily:
				switch buildVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Bytes()
					buildKeys := buildVec.Bytes()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	case types.DecimalFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case types.DecimalFamily:
				switch buildVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Decimal()
					buildKeys := buildVec.Decimal()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	case types.IntFamily:
		switch probeVec.Type().Width() {
		case 16:
			switch buildVec.CanonicalTypeFamily() {
			case types.IntFamily:
				switch buildVec.Type().Width() {
				case 16:
					probeKeys := probeVec.Int16()
					buildKeys := buildVec.Int16()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		case 32:
			switch buildVec.CanonicalTypeFamily() {
			case types.IntFamily:
				switch buildVec.Type().Width() {
				case 32:
					probeKeys := probeVec.Int32()
					buildKeys := buildVec.Int32()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case types.IntFamily:
				switch buildVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Int64()
					buildKeys := buildVec.Int64()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	case types.FloatFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case types.FloatFamily:
				switch buildVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Float64()
					buildKeys := buildVec.Float64()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	case types.TimestampTZFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case types.TimestampTZFamily:
				switch buildVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Timestamp()
					buildKeys := buildVec.Timestamp()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	case types.IntervalFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case types.IntervalFamily:
				switch buildVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Interval()
					buildKeys := buildVec.Interval()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	case types.JsonFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case types.JsonFamily:
				switch buildVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.JSON()
					buildKeys := buildVec.JSON()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												var err error
												cmpResult, err = probeVal.Compare(buildVal)
												if err != nil {
													colexecerror.ExpectedError(err)
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												var err error
												cmpResult, err = probeVal.Compare(buildVal)
												if err != nil {
													colexecerror.ExpectedError(err)
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												var err error
												cmpResult, err = probeVal.Compare(buildVal)
												if err != nil {
													colexecerror.ExpectedError(err)
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												var err error
												cmpResult, err = probeVal.Compare(buildVal)
												if err != nil {
													colexecerror.ExpectedError(err)
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												var err error
												cmpResult, err = probeVal.Compare(buildVal)
												if err != nil {
													colexecerror.ExpectedError(err)
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												var err error
												cmpResult, err = probeVal.Compare(buildVal)
												if err != nil {
													colexecerror.ExpectedError(err)
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												var err error
												cmpResult, err = probeVal.Compare(buildVal)
												if err != nil {
													colexecerror.ExpectedError(err)
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												var err error
												cmpResult, err = probeVal.Compare(buildVal)
												if err != nil {
													colexecerror.ExpectedError(err)
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	case typeconv.DatumVecCanonicalTypeFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case typeconv.DatumVecCanonicalTypeFamily:
				switch buildVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Datum()
					buildKeys := buildVec.Datum()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = coldataext.CompareDatum(probeVal, probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = coldataext.CompareDatum(probeVal, probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = coldataext.CompareDatum(probeVal, probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										// The vector is probed against itself, so buildVec has the same
										// selection vector as probeVec.
										buildIdx = probeSel[keyID-1]
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = coldataext.CompareDatum(probeVal, probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = coldataext.CompareDatum(probeVal, probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = coldataext.CompareDatum(probeVal, probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = coldataext.CompareDatum(probeVal, probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = coldataext.CompareDatum(probeVal, probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

func (ht *HashTable) checkColForDistinctTuples(
	probeVec, buildVec coldata.Vec, nToCheck uint64, probeSel []int,
) {
	switch probeVec.CanonicalTypeFamily() {
	case types.BoolFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch probeVec.CanonicalTypeFamily() {
			case types.BoolFamily:
				switch probeVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Bool()
					buildKeys := buildVec.Bool()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					}
				}
			}
		}
	case types.BytesFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch probeVec.CanonicalTypeFamily() {
			case types.BytesFamily:
				switch probeVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Bytes()
					buildKeys := buildVec.Bytes()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					}
				}
			}
		}
	case types.DecimalFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch probeVec.CanonicalTypeFamily() {
			case types.IntFamily:
				switch probeVec.Type().Width() {
				}
			case types.FloatFamily:
				switch probeVec.Type().Width() {
				}
			case types.DecimalFamily:
				switch probeVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Decimal()
					buildKeys := buildVec.Decimal()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					}
				}
			}
		}
	case types.IntFamily:
		switch probeVec.Type().Width() {
		case 16:
			switch probeVec.CanonicalTypeFamily() {
			case types.IntFamily:
				switch probeVec.Type().Width() {
				case 16:
					probeKeys := probeVec.Int16()
					buildKeys := buildVec.Int16()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					}
				}
			case types.FloatFamily:
				switch probeVec.Type().Width() {
				}
			case types.DecimalFamily:
				switch probeVec.Type().Width() {
				}
			}
		case 32:
			switch probeVec.CanonicalTypeFamily() {
			case types.IntFamily:
				switch probeVec.Type().Width() {
				case 32:
					probeKeys := probeVec.Int32()
					buildKeys := buildVec.Int32()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					}
				}
			case types.FloatFamily:
				switch probeVec.Type().Width() {
				}
			case types.DecimalFamily:
				switch probeVec.Type().Width() {
				}
			}
		case -1:
		default:
			switch probeVec.CanonicalTypeFamily() {
			case types.IntFamily:
				switch probeVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Int64()
					buildKeys := buildVec.Int64()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					}
				}
			case types.FloatFamily:
				switch probeVec.Type().Width() {
				}
			case types.DecimalFamily:
				switch probeVec.Type().Width() {
				}
			}
		}
	case types.FloatFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch probeVec.CanonicalTypeFamily() {
			case types.IntFamily:
				switch probeVec.Type().Width() {
				}
			case types.FloatFamily:
				switch probeVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Float64()
					buildKeys := buildVec.Float64()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					}
				}
			case types.DecimalFamily:
				switch probeVec.Type().Width() {
				}
			}
		}
	case types.TimestampTZFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch probeVec.CanonicalTypeFamily() {
			case types.TimestampTZFamily:
				switch probeVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Timestamp()
					buildKeys := buildVec.Timestamp()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					}
				}
			}
		}
	case types.IntervalFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch probeVec.CanonicalTypeFamily() {
			case types.IntervalFamily:
				switch probeVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Interval()
					buildKeys := buildVec.Interval()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					}
				}
			}
		}
	case types.JsonFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch probeVec.CanonicalTypeFamily() {
			case types.JsonFamily:
				switch probeVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.JSON()
					buildKeys := buildVec.JSON()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												var err error
												cmpResult, err = probeVal.Compare(buildVal)
												if err != nil {
													colexecerror.ExpectedError(err)
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												var err error
												cmpResult, err = probeVal.Compare(buildVal)
												if err != nil {
													colexecerror.ExpectedError(err)
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												var err error
												cmpResult, err = probeVal.Compare(buildVal)
												if err != nil {
													colexecerror.ExpectedError(err)
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												var err error
												cmpResult, err = probeVal.Compare(buildVal)
												if err != nil {
													colexecerror.ExpectedError(err)
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												var err error
												cmpResult, err = probeVal.Compare(buildVal)
												if err != nil {
													colexecerror.ExpectedError(err)
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												var err error
												cmpResult, err = probeVal.Compare(buildVal)
												if err != nil {
													colexecerror.ExpectedError(err)
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												var err error
												cmpResult, err = probeVal.Compare(buildVal)
												if err != nil {
													colexecerror.ExpectedError(err)
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												var err error
												cmpResult, err = probeVal.Compare(buildVal)
												if err != nil {
													colexecerror.ExpectedError(err)
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					}
				}
			}
		}
	case typeconv.DatumVecCanonicalTypeFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch probeVec.CanonicalTypeFamily() {
			case typeconv.DatumVecCanonicalTypeFamily:
				switch probeVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Datum()
					buildKeys := buildVec.Datum()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = coldataext.CompareDatum(probeVal, probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = coldataext.CompareDatum(probeVal, probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = coldataext.CompareDatum(probeVal, probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = coldataext.CompareDatum(probeVal, probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = coldataext.CompareDatum(probeVal, probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = coldataext.CompareDatum(probeVal, probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = coldataext.CompareDatum(probeVal, probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if ht.allowNullEquality {
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
										}
										if probeIsNull {
											ht.ProbeScratch.distinct[toCheck] = true
											ht.ProbeScratch.GroupID[toCheck] = toCheck + 1
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = coldataext.CompareDatum(probeVal, probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
									if keyID == 0 {
										ht.ProbeScratch.distinct[toCheck] = true
									}
								}
							}
						}

					}
				}
			}
		}
	}
}

// CheckProbeForDistinct performs a column by column check for duplicated tuples
// in the probe table.
func (ht *HashTable) CheckProbeForDistinct(vecs []coldata.Vec, nToCheck uint64, sel []int) uint64 {
	for i := range ht.keyCols {
		ht.checkColAgainstItself(vecs[i], nToCheck, sel)
	}
	nDiffers := uint64(0)
	toCheckSlice := ht.ProbeScratch.ToCheck
	_ = toCheckSlice[nToCheck-1]
	for toCheckPos := uint64(0); toCheckPos < nToCheck && nDiffers < nToCheck; toCheckPos++ {
		//gcassert:bce
		toCheck := toCheckSlice[toCheckPos]
		if ht.ProbeScratch.distinct[toCheck] {
			ht.ProbeScratch.HeadID[toCheck] = ht.ProbeScratch.GroupID[toCheck]
			continue
		}
		if !ht.ProbeScratch.differs[toCheck] {
			// If the current key matches with the probe key, we want to update HeadID
			// with the current key if it has not been set yet.
			keyID := ht.ProbeScratch.GroupID[toCheck]
			if ht.ProbeScratch.HeadID[toCheck] == 0 {
				ht.ProbeScratch.HeadID[toCheck] = keyID
			}
		}
		if ht.ProbeScratch.differs[toCheck] {
			// Continue probing in this next chain for the probe key.
			ht.ProbeScratch.differs[toCheck] = false
			//gcassert:bce
			toCheckSlice[nDiffers] = toCheck
			nDiffers++
		}
	}
	return nDiffers
}

// updateSel updates the selection vector in the given batch using the HeadID
// buffer. For each nonzero keyID in HeadID, it will be translated to the actual
// key index using the convention keyID = keys.indexOf(key) + 1. If the input
// batch's selection vector is nil, the key index will be directly used to
// populate the selection vector. Otherwise, the selection vector's value at the
// key index will be used. The duplicated keyIDs will be discarded. The
// HashBuffer will also compact and discard hash values of duplicated keys.
func (ht *HashTable) updateSel(b coldata.Batch) {
	if b.Length() == 0 {
		return
	}
	if sel := b.Selection(); sel != nil {
		batchLength := b.Length()
		// Capture the slices in order for BCE to occur.
		HeadIDs := ht.ProbeScratch.HeadID
		hashBuffer := ht.ProbeScratch.HashBuffer
		_ = HeadIDs[batchLength-1]
		_ = hashBuffer[batchLength-1]
		// Reuse the buffer allocated for distinct.
		visited := ht.ProbeScratch.distinct
		copy(visited, colexecutils.ZeroBoolColumn)
		distinctCount := 0
		for i := 0; i < batchLength && distinctCount < batchLength; i++ {
			//gcassert:bce
			HeadID := HeadIDs[i]
			if HeadID != 0 {
				if hasVisited := visited[HeadID-1]; !hasVisited {
					sel[distinctCount] = sel[HeadID-1]
					visited[HeadID-1] = true
					// Compacting and deduplicating hash buffer.
					//gcassert:bce
					hashBuffer[distinctCount] = hashBuffer[i]
					distinctCount++
				}
			}
		}
		b.SetLength(distinctCount)
	} else {
		b.SetSelection(true)
		sel = b.Selection()
		batchLength := b.Length()
		// Capture the slices in order for BCE to occur.
		HeadIDs := ht.ProbeScratch.HeadID
		hashBuffer := ht.ProbeScratch.HashBuffer
		_ = HeadIDs[batchLength-1]
		_ = hashBuffer[batchLength-1]
		// Reuse the buffer allocated for distinct.
		visited := ht.ProbeScratch.distinct
		copy(visited, colexecutils.ZeroBoolColumn)
		distinctCount := 0
		for i := 0; i < batchLength && distinctCount < batchLength; i++ {
			//gcassert:bce
			HeadID := HeadIDs[i]
			if HeadID != 0 {
				if hasVisited := visited[HeadID-1]; !hasVisited {
					sel[distinctCount] = int(HeadID - 1)
					visited[HeadID-1] = true
					// Compacting and deduplicating hash buffer.
					//gcassert:bce
					hashBuffer[distinctCount] = hashBuffer[i]
					distinctCount++
				}
			}
		}
		b.SetLength(distinctCount)
	}
}

// DistinctCheck determines if the current key in the GroupID bucket matches the
// equality column key. If there is a match, then the key is removed from
// ToCheck. If the bucket has reached the end, the key is rejected. The ToCheck
// list is reconstructed to only hold the indices of the eqCol keys that have
// not been found. The new length of ToCheck is returned by this function.
func (ht *HashTable) DistinctCheck(nToCheck uint64, probeSel []int) uint64 {
	ht.checkCols(ht.Keys, nToCheck, probeSel)
	// Select the indices that differ and put them into ToCheck.
	nDiffers := uint64(0)
	toCheckSlice := ht.ProbeScratch.ToCheck
	_ = toCheckSlice[nToCheck-1]
	for toCheckPos := uint64(0); toCheckPos < nToCheck && nDiffers < nToCheck; toCheckPos++ {
		//gcassert:bce
		toCheck := toCheckSlice[toCheckPos]
		if ht.ProbeScratch.differs[toCheck] {
			ht.ProbeScratch.differs[toCheck] = false
			//gcassert:bce
			toCheckSlice[nDiffers] = toCheck
			nDiffers++
		}
	}
	return nDiffers
}
