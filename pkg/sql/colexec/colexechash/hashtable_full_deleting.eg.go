// Code generated by execgen; DO NOT EDIT.
// Copyright 2020 The Cockroach Authors.
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package colexechash

import (
	"bytes"
	"math"

	"github.com/cockroachdb/cockroach/pkg/col/coldata"
	"github.com/cockroachdb/cockroach/pkg/col/coldataext"
	"github.com/cockroachdb/cockroach/pkg/col/typeconv"
	"github.com/cockroachdb/cockroach/pkg/sql/colexecerror"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

// Workaround for bazel auto-generated code. goimports does not automatically
// pick up the right packages when run within the bazel sandbox.
var (
	_ = typeconv.DatumVecCanonicalTypeFamily
	_ coldataext.Datum
	_ tree.AggType
)

// checkColDeleting determines if the current key column in the GroupID buckets
// matches the specified equality column key. If there is no match *or* the key
// has been already used, then the key is added to differs. If the bucket has
// reached the end, the key is rejected. If the HashTable disallows null
// equality, then if any element in the key is null, there is no match.
func (ht *HashTable) checkColDeleting(
	probeVec, buildVec coldata.Vec, keyColIdx int, nToCheck uint64, probeSel []int,
) {
	switch probeVec.CanonicalTypeFamily() {
	case types.BoolFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case types.BoolFamily:
				switch buildVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Bool()
					buildKeys := buildVec.Bool()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													if !probeVal && buildVal {
														cmpResult = -1
													} else if probeVal && !buildVal {
														cmpResult = 1
													} else {
														cmpResult = 0
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													if !probeVal && buildVal {
														cmpResult = -1
													} else if probeVal && !buildVal {
														cmpResult = 1
													} else {
														cmpResult = 0
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													if !probeVal && buildVal {
														cmpResult = -1
													} else if probeVal && !buildVal {
														cmpResult = 1
													} else {
														cmpResult = 0
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													if !probeVal && buildVal {
														cmpResult = -1
													} else if probeVal && !buildVal {
														cmpResult = 1
													} else {
														cmpResult = 0
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if !probeVal && buildVal {
													cmpResult = -1
												} else if probeVal && !buildVal {
													cmpResult = 1
												} else {
													cmpResult = 0
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	case types.BytesFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case types.BytesFamily:
				switch buildVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Bytes()
					buildKeys := buildVec.Bytes()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int
													cmpResult = bytes.Compare(probeVal, buildVal)
													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int
													cmpResult = bytes.Compare(probeVal, buildVal)
													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int
													cmpResult = bytes.Compare(probeVal, buildVal)
													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int
													cmpResult = bytes.Compare(probeVal, buildVal)
													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = bytes.Compare(probeVal, buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	case types.DecimalFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case types.DecimalFamily:
				switch buildVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Decimal()
					buildKeys := buildVec.Decimal()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int
													cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int
													cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int
													cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int
													cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = tree.CompareDecimals(&probeVal, &buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	case types.IntFamily:
		switch probeVec.Type().Width() {
		case 16:
			switch buildVec.CanonicalTypeFamily() {
			case types.IntFamily:
				switch buildVec.Type().Width() {
				case 16:
					probeKeys := probeVec.Int16()
					buildKeys := buildVec.Int16()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				case 32:
					probeKeys := probeVec.Int16()
					buildKeys := buildVec.Int32()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				case -1:
				default:
					probeKeys := probeVec.Int16()
					buildKeys := buildVec.Int64()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		case 32:
			switch buildVec.CanonicalTypeFamily() {
			case types.IntFamily:
				switch buildVec.Type().Width() {
				case 16:
					probeKeys := probeVec.Int32()
					buildKeys := buildVec.Int16()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				case 32:
					probeKeys := probeVec.Int32()
					buildKeys := buildVec.Int32()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				case -1:
				default:
					probeKeys := probeVec.Int32()
					buildKeys := buildVec.Int64()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case types.IntFamily:
				switch buildVec.Type().Width() {
				case 16:
					probeKeys := probeVec.Int64()
					buildKeys := buildVec.Int16()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				case 32:
					probeKeys := probeVec.Int64()
					buildKeys := buildVec.Int32()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				case -1:
				default:
					probeKeys := probeVec.Int64()
					buildKeys := buildVec.Int64()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := int64(probeVal), int64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else {
															cmpResult = 0
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := int64(probeVal), int64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	case types.FloatFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case types.FloatFamily:
				switch buildVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Float64()
					buildKeys := buildVec.Float64()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := float64(probeVal), float64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else if a == b {
															cmpResult = 0
														} else if math.IsNaN(a) {
															if math.IsNaN(b) {
																cmpResult = 0
															} else {
																cmpResult = -1
															}
														} else {
															cmpResult = 1
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := float64(probeVal), float64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else if a == b {
															cmpResult = 0
														} else if math.IsNaN(a) {
															if math.IsNaN(b) {
																cmpResult = 0
															} else {
																cmpResult = -1
															}
														} else {
															cmpResult = 1
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := float64(probeVal), float64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else if a == b {
															cmpResult = 0
														} else if math.IsNaN(a) {
															if math.IsNaN(b) {
																cmpResult = 0
															} else {
																cmpResult = -1
															}
														} else {
															cmpResult = 1
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													{
														a, b := float64(probeVal), float64(buildVal)
														if a < b {
															cmpResult = -1
														} else if a > b {
															cmpResult = 1
														} else if a == b {
															cmpResult = 0
														} else if math.IsNaN(a) {
															if math.IsNaN(b) {
																cmpResult = 0
															} else {
																cmpResult = -1
															}
														} else {
															cmpResult = 1
														}
													}

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												{
													a, b := float64(probeVal), float64(buildVal)
													if a < b {
														cmpResult = -1
													} else if a > b {
														cmpResult = 1
													} else if a == b {
														cmpResult = 0
													} else if math.IsNaN(a) {
														if math.IsNaN(b) {
															cmpResult = 0
														} else {
															cmpResult = -1
														}
													} else {
														cmpResult = 1
													}
												}

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	case types.TimestampTZFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case types.TimestampTZFamily:
				switch buildVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Timestamp()
					buildKeys := buildVec.Timestamp()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													if probeVal.Before(buildVal) {
														cmpResult = -1
													} else if buildVal.Before(probeVal) {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													if probeVal.Before(buildVal) {
														cmpResult = -1
													} else if buildVal.Before(probeVal) {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													if probeVal.Before(buildVal) {
														cmpResult = -1
													} else if buildVal.Before(probeVal) {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													if probeVal.Before(buildVal) {
														cmpResult = -1
													} else if buildVal.Before(probeVal) {
														cmpResult = 1
													} else {
														cmpResult = 0
													}
													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												if probeVal.Before(buildVal) {
													cmpResult = -1
												} else if buildVal.Before(probeVal) {
													cmpResult = 1
												} else {
													cmpResult = 0
												}
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	case types.IntervalFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case types.IntervalFamily:
				switch buildVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Interval()
					buildKeys := buildVec.Interval()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int
													cmpResult = probeVal.Compare(buildVal)
													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int
													cmpResult = probeVal.Compare(buildVal)
													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int
													cmpResult = probeVal.Compare(buildVal)
													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int
													cmpResult = probeVal.Compare(buildVal)
													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int
												cmpResult = probeVal.Compare(buildVal)
												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	case typeconv.DatumVecCanonicalTypeFamily:
		switch probeVec.Type().Width() {
		case -1:
		default:
			switch buildVec.CanonicalTypeFamily() {
			case typeconv.DatumVecCanonicalTypeFamily:
				switch buildVec.Type().Width() {
				case -1:
				default:
					probeKeys := probeVec.Datum()
					buildKeys := buildVec.Datum()
					if probeSel != nil {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													cmpResult = probeVal.(*coldataext.Datum).CompareDatum(probeKeys, buildVal)

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = probeSel[toCheck]
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													cmpResult = probeVal.(*coldataext.Datum).CompareDatum(probeKeys, buildVal)

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = probeVal.(*coldataext.Datum).CompareDatum(probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = probeVal.(*coldataext.Datum).CompareDatum(probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = probeSel[toCheck]
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = probeVal.(*coldataext.Datum).CompareDatum(probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					} else {
						if probeVec.MaybeHasNulls() {
							if buildVec.MaybeHasNulls() {
								if ht.allowNullEquality {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull && buildIsNull {
												// Both values are NULLs, and since we're allowing null equality, we
												// proceed to the next value to check.
												continue
											} else if probeIsNull {
												// Only probing value is NULL, so it is different from the build value
												// (which is non-NULL). We mark it as "different" and proceed to the
												// next value to check. This behavior is special in case of allowing
												// null equality because we don't want to reset the GroupID of the
												// current probing tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													cmpResult = probeVal.(*coldataext.Datum).CompareDatum(probeKeys, buildVal)

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								} else {
									var (
										probeIdx, buildIdx       int
										probeIsNull, buildIsNull bool
									)
									for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
										// keyID of 0 is reserved to represent the end of the next chain.
										keyID := ht.ProbeScratch.GroupID[toCheck]
										if keyID != 0 {
											// the build table key (calculated using keys[keyID - 1] = key) is
											// compared to the corresponding probe table to determine if a match is
											// found.
											if ht.Visited[keyID] {
												// This build tuple has already been matched, so we treat
												// it as different from the probe tuple.
												ht.ProbeScratch.differs[toCheck] = true
												continue
											}

											probeIdx = int(toCheck)
											probeIsNull = probeVec.Nulls().NullAt(probeIdx)
											buildIdx = int(keyID - 1)
											buildIsNull = buildVec.Nulls().NullAt(buildIdx)
											if probeIsNull {
												ht.ProbeScratch.GroupID[toCheck] = 0
											} else if buildIsNull {
												ht.ProbeScratch.differs[toCheck] = true
											} else {
												probeVal := probeKeys.Get(probeIdx)
												buildVal := buildKeys.Get(buildIdx)
												var unique bool

												{
													var cmpResult int

													cmpResult = probeVal.(*coldataext.Datum).CompareDatum(probeKeys, buildVal)

													unique = cmpResult != 0
												}

												ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
											}
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										probeIsNull = probeVec.Nulls().NullAt(probeIdx)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = probeVal.(*coldataext.Datum).CompareDatum(probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						} else {
							if buildVec.MaybeHasNulls() {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										buildIsNull = buildVec.Nulls().NullAt(buildIdx)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = probeVal.(*coldataext.Datum).CompareDatum(probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							} else {
								var (
									probeIdx, buildIdx       int
									probeIsNull, buildIsNull bool
								)
								for _, toCheck := range ht.ProbeScratch.ToCheck[:nToCheck] {
									// keyID of 0 is reserved to represent the end of the next chain.
									keyID := ht.ProbeScratch.GroupID[toCheck]
									if keyID != 0 {
										// the build table key (calculated using keys[keyID - 1] = key) is
										// compared to the corresponding probe table to determine if a match is
										// found.
										if ht.Visited[keyID] {
											// This build tuple has already been matched, so we treat
											// it as different from the probe tuple.
											ht.ProbeScratch.differs[toCheck] = true
											continue
										}

										probeIdx = int(toCheck)
										buildIdx = int(keyID - 1)
										if probeIsNull {
											ht.ProbeScratch.GroupID[toCheck] = 0
										} else if buildIsNull {
											ht.ProbeScratch.differs[toCheck] = true
										} else {
											probeVal := probeKeys.Get(probeIdx)
											buildVal := buildKeys.Get(buildIdx)
											var unique bool

											{
												var cmpResult int

												cmpResult = probeVal.(*coldataext.Datum).CompareDatum(probeKeys, buildVal)

												unique = cmpResult != 0
											}

											ht.ProbeScratch.differs[toCheck] = ht.ProbeScratch.differs[toCheck] || unique
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

// Check performs an equality check between the current key in the GroupID bucket
// and the probe key at that index. If there is a match, the HashTable's same
// array is updated to lazily populate the linked list of identical build
// table keys. The visited flag for corresponding build table key is also set. A
// key is removed from ToCheck if it has already been visited in a previous
// probe, or the bucket has reached the end (key not found in build table). The
// new length of ToCheck is returned by this function.
func (ht *HashTable) Check(probeVecs []coldata.Vec, nToCheck uint64, probeSel []int) uint64 {
	ht.checkCols(probeVecs, nToCheck, probeSel)
	nDiffers := uint64(0)
	switch ht.probeMode {
	case HashTableDefaultProbeMode:
		if ht.Same != nil {
			toCheckSlice := ht.ProbeScratch.ToCheck
			_ = toCheckSlice[nToCheck-1]
			for toCheckPos := uint64(0); toCheckPos < nToCheck && nDiffers < nToCheck; toCheckPos++ {
				//gcassert:bce
				toCheck := toCheckSlice[toCheckPos]
				if !ht.ProbeScratch.differs[toCheck] {
					// If the current key matches with the probe key, we want to update HeadID
					// with the current key if it has not been set yet.
					keyID := ht.ProbeScratch.GroupID[toCheck]
					if ht.ProbeScratch.HeadID[toCheck] == 0 {
						ht.ProbeScratch.HeadID[toCheck] = keyID
					}
					firstID := ht.ProbeScratch.HeadID[toCheck]
					if !ht.Visited[keyID] {
						// We can then add this keyID into the same array at the end of the
						// corresponding linked list and mark this ID as visited. Since there
						// can be multiple keys that match this probe key, we want to mark
						// differs at this position to be true. This way, the prober will
						// continue probing for this key until it reaches the end of the next
						// chain.
						ht.ProbeScratch.differs[toCheck] = true
						ht.Visited[keyID] = true
						if firstID != keyID {
							ht.Same[keyID] = ht.Same[firstID]
							ht.Same[firstID] = keyID
						}
					}
				}
				if ht.ProbeScratch.differs[toCheck] {
					// Continue probing in this next chain for the probe key.
					ht.ProbeScratch.differs[toCheck] = false
					//gcassert:bce
					toCheckSlice[nDiffers] = toCheck
					nDiffers++
				}
			}
		} else {
			toCheckSlice := ht.ProbeScratch.ToCheck
			_ = toCheckSlice[nToCheck-1]
			for toCheckPos := uint64(0); toCheckPos < nToCheck && nDiffers < nToCheck; toCheckPos++ {
				//gcassert:bce
				toCheck := toCheckSlice[toCheckPos]
				if !ht.ProbeScratch.differs[toCheck] {
					// If the current key matches with the probe key, we want to update HeadID
					// with the current key if it has not been set yet.
					keyID := ht.ProbeScratch.GroupID[toCheck]
					if ht.ProbeScratch.HeadID[toCheck] == 0 {
						ht.ProbeScratch.HeadID[toCheck] = keyID
					}
				}
				if ht.ProbeScratch.differs[toCheck] {
					// Continue probing in this next chain for the probe key.
					ht.ProbeScratch.differs[toCheck] = false
					//gcassert:bce
					toCheckSlice[nDiffers] = toCheck
					nDiffers++
				}
			}
		}
	case HashTableDeletingProbeMode:
		if ht.Same != nil {
			toCheckSlice := ht.ProbeScratch.ToCheck
			_ = toCheckSlice[nToCheck-1]
			for toCheckPos := uint64(0); toCheckPos < nToCheck && nDiffers < nToCheck; toCheckPos++ {
				//gcassert:bce
				toCheck := toCheckSlice[toCheckPos]
				if !ht.ProbeScratch.differs[toCheck] {
					// If the current key matches with the probe key, we want to update HeadID
					// with the current key if it has not been set yet.
					keyID := ht.ProbeScratch.GroupID[toCheck]
					// We need to check whether this key hasn't been "deleted" (we
					// reuse 'visited' array for tracking which tuples are deleted).
					// TODO(yuzefovich): rather than reusing 'visited' array to have
					// "deleted" marks we could be actually removing tuples' keyIDs
					// from the hash chains. This will require changing our use of
					// singly linked list 'next' to doubly linked list.
					if !ht.Visited[keyID] {
						// It hasn't been deleted, so we match it with 'ToCheck'
						// probing tuple and "delete" the key.
						ht.ProbeScratch.HeadID[toCheck] = keyID
						ht.Visited[keyID] = true
					} else {
						// It has been deleted, so we need to continue probing on the
						// next chain if it's not the end of the chain already.
						if keyID != 0 {
							//gcassert:bce
							toCheckSlice[nDiffers] = toCheck
							nDiffers++
						}
					}
					continue
				}
				if ht.ProbeScratch.differs[toCheck] {
					// Continue probing in this next chain for the probe key.
					ht.ProbeScratch.differs[toCheck] = false
					//gcassert:bce
					toCheckSlice[nDiffers] = toCheck
					nDiffers++
				}
			}
		} else {
			toCheckSlice := ht.ProbeScratch.ToCheck
			_ = toCheckSlice[nToCheck-1]
			for toCheckPos := uint64(0); toCheckPos < nToCheck && nDiffers < nToCheck; toCheckPos++ {
				//gcassert:bce
				toCheck := toCheckSlice[toCheckPos]
				if !ht.ProbeScratch.differs[toCheck] {
					// If the current key matches with the probe key, we want to update HeadID
					// with the current key if it has not been set yet.
					keyID := ht.ProbeScratch.GroupID[toCheck]
					// We need to check whether this key hasn't been "deleted" (we
					// reuse 'visited' array for tracking which tuples are deleted).
					// TODO(yuzefovich): rather than reusing 'visited' array to have
					// "deleted" marks we could be actually removing tuples' keyIDs
					// from the hash chains. This will require changing our use of
					// singly linked list 'next' to doubly linked list.
					if !ht.Visited[keyID] {
						// It hasn't been deleted, so we match it with 'ToCheck'
						// probing tuple and "delete" the key.
						ht.ProbeScratch.HeadID[toCheck] = keyID
						ht.Visited[keyID] = true
					} else {
						// It has been deleted, so we need to continue probing on the
						// next chain if it's not the end of the chain already.
						if keyID != 0 {
							//gcassert:bce
							toCheckSlice[nDiffers] = toCheck
							nDiffers++
						}
					}
					continue
				}
				if ht.ProbeScratch.differs[toCheck] {
					// Continue probing in this next chain for the probe key.
					ht.ProbeScratch.differs[toCheck] = false
					//gcassert:bce
					toCheckSlice[nDiffers] = toCheck
					nDiffers++
				}
			}
		}
	default:
		colexecerror.InternalError(errors.AssertionFailedf("unsupported hash table probe mode"))
	}
	return nDiffers
}
