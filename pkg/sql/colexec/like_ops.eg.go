// Code generated by execgen; DO NOT EDIT.

package colexec

import (
	"bytes"
	"context"
	"regexp"

	"github.com/cockroachdb/cockroach/pkg/col/coldata"
)

type selPrefixBytesBytesConstOp struct {
	selConstOpBase
	constArg []byte
}

func (p *selPrefixBytesBytesConstOp) Next(ctx context.Context) coldata.Batch {
	// In order to inline the templated code of overloads, we need to have a
	// `_overloadHelper` local variable of type `overloadHelper`.
	_overloadHelper := p.overloadHelper
	// However, the scratch is not used in all of the selection operators, so
	// we add this to go around "unused" error.
	_ = _overloadHelper
	var isNull bool
	for {
		batch := p.input.Next(ctx)
		if batch.Length() == 0 {
			return batch
		}

		vec := batch.ColVec(p.colIdx)
		col := vec.Bytes()
		var idx int
		n := batch.Length()
		if vec.MaybeHasNulls() {
			nulls := vec.Nulls()
			if sel := batch.Selection(); sel != nil {
				sel = sel[:n]
				for _, i := range sel {
					var cmp bool
					arg := col.Get(i)
					cmp = bytes.HasPrefix(arg, p.constArg)
					isNull = nulls.NullAt(i)
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			} else {
				batch.SetSelection(true)
				sel := batch.Selection()
				_ = col.Get(n - 1)
				for i := 0; i < n; i++ {
					var cmp bool
					arg := col.Get(i)
					cmp = bytes.HasPrefix(arg, p.constArg)
					isNull = nulls.NullAt(i)
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			}
		} else {
			if sel := batch.Selection(); sel != nil {
				sel = sel[:n]
				for _, i := range sel {
					var cmp bool
					arg := col.Get(i)
					cmp = bytes.HasPrefix(arg, p.constArg)
					isNull = false
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			} else {
				batch.SetSelection(true)
				sel := batch.Selection()
				_ = col.Get(n - 1)
				for i := 0; i < n; i++ {
					var cmp bool
					arg := col.Get(i)
					cmp = bytes.HasPrefix(arg, p.constArg)
					isNull = false
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			}
		}
		if idx > 0 {
			batch.SetLength(idx)
			return batch
		}
	}
}

func (p *selPrefixBytesBytesConstOp) Init() {
	p.input.Init()
}

type projPrefixBytesBytesConstOp struct {
	projConstOpBase
	constArg []byte
}

func (p projPrefixBytesBytesConstOp) Next(ctx context.Context) coldata.Batch {
	// In order to inline the templated code of overloads, we need to have a
	// `_overloadHelper` local variable of type `overloadHelper`.
	_overloadHelper := p.overloadHelper
	// However, the scratch is not used in all of the projection operators, so
	// we add this to go around "unused" error.
	_ = _overloadHelper
	batch := p.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	vec := batch.ColVec(p.colIdx)
	var col *coldata.Bytes
	col = vec.Bytes()
	projVec := batch.ColVec(p.outputIdx)
	if projVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		projVec.Nulls().UnsetNulls()
	}
	projCol := projVec.Bool()
	// Some operators can result in NULL with non-NULL inputs, like the JSON
	// fetch value operator, ->. Therefore, _outNulls is defined to allow
	// updating the output Nulls from within _ASSIGN functions when the result
	// of a projection is Null.
	_outNulls := projVec.Nulls()
	if vec.Nulls().MaybeHasNulls() {
		colNulls := vec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if !colNulls.NullAt(i) {
					// We only want to perform the projection operation if the value is not null.
					arg := col.Get(i)
					projCol[i] = bytes.HasPrefix(arg, p.constArg)
				}
			}
		} else {
			col = col
			_ = 0
			_ = n
			_ = projCol.Get(n - 1)
			for i := 0; i < n; i++ {
				if !colNulls.NullAt(i) {
					// We only want to perform the projection operation if the value is not null.
					arg := col.Get(i)
					projCol[i] = bytes.HasPrefix(arg, p.constArg)
				}
			}
		}
		// _outNulls has been updated from within the _ASSIGN function to include
		// any NULLs that resulted from the projection.
		// If $hasNulls is true, union _outNulls with the set of input Nulls.
		// If $hasNulls is false, then there are no input Nulls. _outNulls is
		// projVec.Nulls() so there is no need to call projVec.SetNulls().
		projVec.SetNulls(_outNulls.Or(colNulls))
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				arg := col.Get(i)
				projCol[i] = bytes.HasPrefix(arg, p.constArg)
			}
		} else {
			col = col
			_ = 0
			_ = n
			_ = projCol.Get(n - 1)
			for i := 0; i < n; i++ {
				arg := col.Get(i)
				projCol[i] = bytes.HasPrefix(arg, p.constArg)
			}
		}
		// _outNulls has been updated from within the _ASSIGN function to include
		// any NULLs that resulted from the projection.
		// If $hasNulls is true, union _outNulls with the set of input Nulls.
		// If $hasNulls is false, then there are no input Nulls. _outNulls is
		// projVec.Nulls() so there is no need to call projVec.SetNulls().
	}
	// Although we didn't change the length of the batch, it is necessary to set
	// the length anyway (this helps maintaining the invariant of flat bytes).
	batch.SetLength(n)
	return batch
}

func (p projPrefixBytesBytesConstOp) Init() {
	p.input.Init()
}

type selSuffixBytesBytesConstOp struct {
	selConstOpBase
	constArg []byte
}

func (p *selSuffixBytesBytesConstOp) Next(ctx context.Context) coldata.Batch {
	// In order to inline the templated code of overloads, we need to have a
	// `_overloadHelper` local variable of type `overloadHelper`.
	_overloadHelper := p.overloadHelper
	// However, the scratch is not used in all of the selection operators, so
	// we add this to go around "unused" error.
	_ = _overloadHelper
	var isNull bool
	for {
		batch := p.input.Next(ctx)
		if batch.Length() == 0 {
			return batch
		}

		vec := batch.ColVec(p.colIdx)
		col := vec.Bytes()
		var idx int
		n := batch.Length()
		if vec.MaybeHasNulls() {
			nulls := vec.Nulls()
			if sel := batch.Selection(); sel != nil {
				sel = sel[:n]
				for _, i := range sel {
					var cmp bool
					arg := col.Get(i)
					cmp = bytes.HasSuffix(arg, p.constArg)
					isNull = nulls.NullAt(i)
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			} else {
				batch.SetSelection(true)
				sel := batch.Selection()
				_ = col.Get(n - 1)
				for i := 0; i < n; i++ {
					var cmp bool
					arg := col.Get(i)
					cmp = bytes.HasSuffix(arg, p.constArg)
					isNull = nulls.NullAt(i)
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			}
		} else {
			if sel := batch.Selection(); sel != nil {
				sel = sel[:n]
				for _, i := range sel {
					var cmp bool
					arg := col.Get(i)
					cmp = bytes.HasSuffix(arg, p.constArg)
					isNull = false
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			} else {
				batch.SetSelection(true)
				sel := batch.Selection()
				_ = col.Get(n - 1)
				for i := 0; i < n; i++ {
					var cmp bool
					arg := col.Get(i)
					cmp = bytes.HasSuffix(arg, p.constArg)
					isNull = false
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			}
		}
		if idx > 0 {
			batch.SetLength(idx)
			return batch
		}
	}
}

func (p *selSuffixBytesBytesConstOp) Init() {
	p.input.Init()
}

type projSuffixBytesBytesConstOp struct {
	projConstOpBase
	constArg []byte
}

func (p projSuffixBytesBytesConstOp) Next(ctx context.Context) coldata.Batch {
	// In order to inline the templated code of overloads, we need to have a
	// `_overloadHelper` local variable of type `overloadHelper`.
	_overloadHelper := p.overloadHelper
	// However, the scratch is not used in all of the projection operators, so
	// we add this to go around "unused" error.
	_ = _overloadHelper
	batch := p.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	vec := batch.ColVec(p.colIdx)
	var col *coldata.Bytes
	col = vec.Bytes()
	projVec := batch.ColVec(p.outputIdx)
	if projVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		projVec.Nulls().UnsetNulls()
	}
	projCol := projVec.Bool()
	// Some operators can result in NULL with non-NULL inputs, like the JSON
	// fetch value operator, ->. Therefore, _outNulls is defined to allow
	// updating the output Nulls from within _ASSIGN functions when the result
	// of a projection is Null.
	_outNulls := projVec.Nulls()
	if vec.Nulls().MaybeHasNulls() {
		colNulls := vec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if !colNulls.NullAt(i) {
					// We only want to perform the projection operation if the value is not null.
					arg := col.Get(i)
					projCol[i] = bytes.HasSuffix(arg, p.constArg)
				}
			}
		} else {
			col = col
			_ = 0
			_ = n
			_ = projCol.Get(n - 1)
			for i := 0; i < n; i++ {
				if !colNulls.NullAt(i) {
					// We only want to perform the projection operation if the value is not null.
					arg := col.Get(i)
					projCol[i] = bytes.HasSuffix(arg, p.constArg)
				}
			}
		}
		// _outNulls has been updated from within the _ASSIGN function to include
		// any NULLs that resulted from the projection.
		// If $hasNulls is true, union _outNulls with the set of input Nulls.
		// If $hasNulls is false, then there are no input Nulls. _outNulls is
		// projVec.Nulls() so there is no need to call projVec.SetNulls().
		projVec.SetNulls(_outNulls.Or(colNulls))
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				arg := col.Get(i)
				projCol[i] = bytes.HasSuffix(arg, p.constArg)
			}
		} else {
			col = col
			_ = 0
			_ = n
			_ = projCol.Get(n - 1)
			for i := 0; i < n; i++ {
				arg := col.Get(i)
				projCol[i] = bytes.HasSuffix(arg, p.constArg)
			}
		}
		// _outNulls has been updated from within the _ASSIGN function to include
		// any NULLs that resulted from the projection.
		// If $hasNulls is true, union _outNulls with the set of input Nulls.
		// If $hasNulls is false, then there are no input Nulls. _outNulls is
		// projVec.Nulls() so there is no need to call projVec.SetNulls().
	}
	// Although we didn't change the length of the batch, it is necessary to set
	// the length anyway (this helps maintaining the invariant of flat bytes).
	batch.SetLength(n)
	return batch
}

func (p projSuffixBytesBytesConstOp) Init() {
	p.input.Init()
}

type selContainsBytesBytesConstOp struct {
	selConstOpBase
	constArg []byte
}

func (p *selContainsBytesBytesConstOp) Next(ctx context.Context) coldata.Batch {
	// In order to inline the templated code of overloads, we need to have a
	// `_overloadHelper` local variable of type `overloadHelper`.
	_overloadHelper := p.overloadHelper
	// However, the scratch is not used in all of the selection operators, so
	// we add this to go around "unused" error.
	_ = _overloadHelper
	var isNull bool
	for {
		batch := p.input.Next(ctx)
		if batch.Length() == 0 {
			return batch
		}

		vec := batch.ColVec(p.colIdx)
		col := vec.Bytes()
		var idx int
		n := batch.Length()
		if vec.MaybeHasNulls() {
			nulls := vec.Nulls()
			if sel := batch.Selection(); sel != nil {
				sel = sel[:n]
				for _, i := range sel {
					var cmp bool
					arg := col.Get(i)
					cmp = bytes.Contains(arg, p.constArg)
					isNull = nulls.NullAt(i)
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			} else {
				batch.SetSelection(true)
				sel := batch.Selection()
				_ = col.Get(n - 1)
				for i := 0; i < n; i++ {
					var cmp bool
					arg := col.Get(i)
					cmp = bytes.Contains(arg, p.constArg)
					isNull = nulls.NullAt(i)
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			}
		} else {
			if sel := batch.Selection(); sel != nil {
				sel = sel[:n]
				for _, i := range sel {
					var cmp bool
					arg := col.Get(i)
					cmp = bytes.Contains(arg, p.constArg)
					isNull = false
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			} else {
				batch.SetSelection(true)
				sel := batch.Selection()
				_ = col.Get(n - 1)
				for i := 0; i < n; i++ {
					var cmp bool
					arg := col.Get(i)
					cmp = bytes.Contains(arg, p.constArg)
					isNull = false
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			}
		}
		if idx > 0 {
			batch.SetLength(idx)
			return batch
		}
	}
}

func (p *selContainsBytesBytesConstOp) Init() {
	p.input.Init()
}

type projContainsBytesBytesConstOp struct {
	projConstOpBase
	constArg []byte
}

func (p projContainsBytesBytesConstOp) Next(ctx context.Context) coldata.Batch {
	// In order to inline the templated code of overloads, we need to have a
	// `_overloadHelper` local variable of type `overloadHelper`.
	_overloadHelper := p.overloadHelper
	// However, the scratch is not used in all of the projection operators, so
	// we add this to go around "unused" error.
	_ = _overloadHelper
	batch := p.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	vec := batch.ColVec(p.colIdx)
	var col *coldata.Bytes
	col = vec.Bytes()
	projVec := batch.ColVec(p.outputIdx)
	if projVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		projVec.Nulls().UnsetNulls()
	}
	projCol := projVec.Bool()
	// Some operators can result in NULL with non-NULL inputs, like the JSON
	// fetch value operator, ->. Therefore, _outNulls is defined to allow
	// updating the output Nulls from within _ASSIGN functions when the result
	// of a projection is Null.
	_outNulls := projVec.Nulls()
	if vec.Nulls().MaybeHasNulls() {
		colNulls := vec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if !colNulls.NullAt(i) {
					// We only want to perform the projection operation if the value is not null.
					arg := col.Get(i)
					projCol[i] = bytes.Contains(arg, p.constArg)
				}
			}
		} else {
			col = col
			_ = 0
			_ = n
			_ = projCol.Get(n - 1)
			for i := 0; i < n; i++ {
				if !colNulls.NullAt(i) {
					// We only want to perform the projection operation if the value is not null.
					arg := col.Get(i)
					projCol[i] = bytes.Contains(arg, p.constArg)
				}
			}
		}
		// _outNulls has been updated from within the _ASSIGN function to include
		// any NULLs that resulted from the projection.
		// If $hasNulls is true, union _outNulls with the set of input Nulls.
		// If $hasNulls is false, then there are no input Nulls. _outNulls is
		// projVec.Nulls() so there is no need to call projVec.SetNulls().
		projVec.SetNulls(_outNulls.Or(colNulls))
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				arg := col.Get(i)
				projCol[i] = bytes.Contains(arg, p.constArg)
			}
		} else {
			col = col
			_ = 0
			_ = n
			_ = projCol.Get(n - 1)
			for i := 0; i < n; i++ {
				arg := col.Get(i)
				projCol[i] = bytes.Contains(arg, p.constArg)
			}
		}
		// _outNulls has been updated from within the _ASSIGN function to include
		// any NULLs that resulted from the projection.
		// If $hasNulls is true, union _outNulls with the set of input Nulls.
		// If $hasNulls is false, then there are no input Nulls. _outNulls is
		// projVec.Nulls() so there is no need to call projVec.SetNulls().
	}
	// Although we didn't change the length of the batch, it is necessary to set
	// the length anyway (this helps maintaining the invariant of flat bytes).
	batch.SetLength(n)
	return batch
}

func (p projContainsBytesBytesConstOp) Init() {
	p.input.Init()
}

type selRegexpBytesBytesConstOp struct {
	selConstOpBase
	constArg *regexp.Regexp
}

func (p *selRegexpBytesBytesConstOp) Next(ctx context.Context) coldata.Batch {
	// In order to inline the templated code of overloads, we need to have a
	// `_overloadHelper` local variable of type `overloadHelper`.
	_overloadHelper := p.overloadHelper
	// However, the scratch is not used in all of the selection operators, so
	// we add this to go around "unused" error.
	_ = _overloadHelper
	var isNull bool
	for {
		batch := p.input.Next(ctx)
		if batch.Length() == 0 {
			return batch
		}

		vec := batch.ColVec(p.colIdx)
		col := vec.Bytes()
		var idx int
		n := batch.Length()
		if vec.MaybeHasNulls() {
			nulls := vec.Nulls()
			if sel := batch.Selection(); sel != nil {
				sel = sel[:n]
				for _, i := range sel {
					var cmp bool
					arg := col.Get(i)
					cmp = p.constArg.Match(arg)
					isNull = nulls.NullAt(i)
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			} else {
				batch.SetSelection(true)
				sel := batch.Selection()
				_ = col.Get(n - 1)
				for i := 0; i < n; i++ {
					var cmp bool
					arg := col.Get(i)
					cmp = p.constArg.Match(arg)
					isNull = nulls.NullAt(i)
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			}
		} else {
			if sel := batch.Selection(); sel != nil {
				sel = sel[:n]
				for _, i := range sel {
					var cmp bool
					arg := col.Get(i)
					cmp = p.constArg.Match(arg)
					isNull = false
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			} else {
				batch.SetSelection(true)
				sel := batch.Selection()
				_ = col.Get(n - 1)
				for i := 0; i < n; i++ {
					var cmp bool
					arg := col.Get(i)
					cmp = p.constArg.Match(arg)
					isNull = false
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			}
		}
		if idx > 0 {
			batch.SetLength(idx)
			return batch
		}
	}
}

func (p *selRegexpBytesBytesConstOp) Init() {
	p.input.Init()
}

type projRegexpBytesBytesConstOp struct {
	projConstOpBase
	constArg *regexp.Regexp
}

func (p projRegexpBytesBytesConstOp) Next(ctx context.Context) coldata.Batch {
	// In order to inline the templated code of overloads, we need to have a
	// `_overloadHelper` local variable of type `overloadHelper`.
	_overloadHelper := p.overloadHelper
	// However, the scratch is not used in all of the projection operators, so
	// we add this to go around "unused" error.
	_ = _overloadHelper
	batch := p.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	vec := batch.ColVec(p.colIdx)
	var col *coldata.Bytes
	col = vec.Bytes()
	projVec := batch.ColVec(p.outputIdx)
	if projVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		projVec.Nulls().UnsetNulls()
	}
	projCol := projVec.Bool()
	// Some operators can result in NULL with non-NULL inputs, like the JSON
	// fetch value operator, ->. Therefore, _outNulls is defined to allow
	// updating the output Nulls from within _ASSIGN functions when the result
	// of a projection is Null.
	_outNulls := projVec.Nulls()
	if vec.Nulls().MaybeHasNulls() {
		colNulls := vec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if !colNulls.NullAt(i) {
					// We only want to perform the projection operation if the value is not null.
					arg := col.Get(i)
					projCol[i] = p.constArg.Match(arg)
				}
			}
		} else {
			col = col
			_ = 0
			_ = n
			_ = projCol.Get(n - 1)
			for i := 0; i < n; i++ {
				if !colNulls.NullAt(i) {
					// We only want to perform the projection operation if the value is not null.
					arg := col.Get(i)
					projCol[i] = p.constArg.Match(arg)
				}
			}
		}
		// _outNulls has been updated from within the _ASSIGN function to include
		// any NULLs that resulted from the projection.
		// If $hasNulls is true, union _outNulls with the set of input Nulls.
		// If $hasNulls is false, then there are no input Nulls. _outNulls is
		// projVec.Nulls() so there is no need to call projVec.SetNulls().
		projVec.SetNulls(_outNulls.Or(colNulls))
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				arg := col.Get(i)
				projCol[i] = p.constArg.Match(arg)
			}
		} else {
			col = col
			_ = 0
			_ = n
			_ = projCol.Get(n - 1)
			for i := 0; i < n; i++ {
				arg := col.Get(i)
				projCol[i] = p.constArg.Match(arg)
			}
		}
		// _outNulls has been updated from within the _ASSIGN function to include
		// any NULLs that resulted from the projection.
		// If $hasNulls is true, union _outNulls with the set of input Nulls.
		// If $hasNulls is false, then there are no input Nulls. _outNulls is
		// projVec.Nulls() so there is no need to call projVec.SetNulls().
	}
	// Although we didn't change the length of the batch, it is necessary to set
	// the length anyway (this helps maintaining the invariant of flat bytes).
	batch.SetLength(n)
	return batch
}

func (p projRegexpBytesBytesConstOp) Init() {
	p.input.Init()
}

type selNotPrefixBytesBytesConstOp struct {
	selConstOpBase
	constArg []byte
}

func (p *selNotPrefixBytesBytesConstOp) Next(ctx context.Context) coldata.Batch {
	// In order to inline the templated code of overloads, we need to have a
	// `_overloadHelper` local variable of type `overloadHelper`.
	_overloadHelper := p.overloadHelper
	// However, the scratch is not used in all of the selection operators, so
	// we add this to go around "unused" error.
	_ = _overloadHelper
	var isNull bool
	for {
		batch := p.input.Next(ctx)
		if batch.Length() == 0 {
			return batch
		}

		vec := batch.ColVec(p.colIdx)
		col := vec.Bytes()
		var idx int
		n := batch.Length()
		if vec.MaybeHasNulls() {
			nulls := vec.Nulls()
			if sel := batch.Selection(); sel != nil {
				sel = sel[:n]
				for _, i := range sel {
					var cmp bool
					arg := col.Get(i)
					cmp = !bytes.HasPrefix(arg, p.constArg)
					isNull = nulls.NullAt(i)
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			} else {
				batch.SetSelection(true)
				sel := batch.Selection()
				_ = col.Get(n - 1)
				for i := 0; i < n; i++ {
					var cmp bool
					arg := col.Get(i)
					cmp = !bytes.HasPrefix(arg, p.constArg)
					isNull = nulls.NullAt(i)
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			}
		} else {
			if sel := batch.Selection(); sel != nil {
				sel = sel[:n]
				for _, i := range sel {
					var cmp bool
					arg := col.Get(i)
					cmp = !bytes.HasPrefix(arg, p.constArg)
					isNull = false
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			} else {
				batch.SetSelection(true)
				sel := batch.Selection()
				_ = col.Get(n - 1)
				for i := 0; i < n; i++ {
					var cmp bool
					arg := col.Get(i)
					cmp = !bytes.HasPrefix(arg, p.constArg)
					isNull = false
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			}
		}
		if idx > 0 {
			batch.SetLength(idx)
			return batch
		}
	}
}

func (p *selNotPrefixBytesBytesConstOp) Init() {
	p.input.Init()
}

type projNotPrefixBytesBytesConstOp struct {
	projConstOpBase
	constArg []byte
}

func (p projNotPrefixBytesBytesConstOp) Next(ctx context.Context) coldata.Batch {
	// In order to inline the templated code of overloads, we need to have a
	// `_overloadHelper` local variable of type `overloadHelper`.
	_overloadHelper := p.overloadHelper
	// However, the scratch is not used in all of the projection operators, so
	// we add this to go around "unused" error.
	_ = _overloadHelper
	batch := p.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	vec := batch.ColVec(p.colIdx)
	var col *coldata.Bytes
	col = vec.Bytes()
	projVec := batch.ColVec(p.outputIdx)
	if projVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		projVec.Nulls().UnsetNulls()
	}
	projCol := projVec.Bool()
	// Some operators can result in NULL with non-NULL inputs, like the JSON
	// fetch value operator, ->. Therefore, _outNulls is defined to allow
	// updating the output Nulls from within _ASSIGN functions when the result
	// of a projection is Null.
	_outNulls := projVec.Nulls()
	if vec.Nulls().MaybeHasNulls() {
		colNulls := vec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if !colNulls.NullAt(i) {
					// We only want to perform the projection operation if the value is not null.
					arg := col.Get(i)
					projCol[i] = !bytes.HasPrefix(arg, p.constArg)
				}
			}
		} else {
			col = col
			_ = 0
			_ = n
			_ = projCol.Get(n - 1)
			for i := 0; i < n; i++ {
				if !colNulls.NullAt(i) {
					// We only want to perform the projection operation if the value is not null.
					arg := col.Get(i)
					projCol[i] = !bytes.HasPrefix(arg, p.constArg)
				}
			}
		}
		// _outNulls has been updated from within the _ASSIGN function to include
		// any NULLs that resulted from the projection.
		// If $hasNulls is true, union _outNulls with the set of input Nulls.
		// If $hasNulls is false, then there are no input Nulls. _outNulls is
		// projVec.Nulls() so there is no need to call projVec.SetNulls().
		projVec.SetNulls(_outNulls.Or(colNulls))
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				arg := col.Get(i)
				projCol[i] = !bytes.HasPrefix(arg, p.constArg)
			}
		} else {
			col = col
			_ = 0
			_ = n
			_ = projCol.Get(n - 1)
			for i := 0; i < n; i++ {
				arg := col.Get(i)
				projCol[i] = !bytes.HasPrefix(arg, p.constArg)
			}
		}
		// _outNulls has been updated from within the _ASSIGN function to include
		// any NULLs that resulted from the projection.
		// If $hasNulls is true, union _outNulls with the set of input Nulls.
		// If $hasNulls is false, then there are no input Nulls. _outNulls is
		// projVec.Nulls() so there is no need to call projVec.SetNulls().
	}
	// Although we didn't change the length of the batch, it is necessary to set
	// the length anyway (this helps maintaining the invariant of flat bytes).
	batch.SetLength(n)
	return batch
}

func (p projNotPrefixBytesBytesConstOp) Init() {
	p.input.Init()
}

type selNotSuffixBytesBytesConstOp struct {
	selConstOpBase
	constArg []byte
}

func (p *selNotSuffixBytesBytesConstOp) Next(ctx context.Context) coldata.Batch {
	// In order to inline the templated code of overloads, we need to have a
	// `_overloadHelper` local variable of type `overloadHelper`.
	_overloadHelper := p.overloadHelper
	// However, the scratch is not used in all of the selection operators, so
	// we add this to go around "unused" error.
	_ = _overloadHelper
	var isNull bool
	for {
		batch := p.input.Next(ctx)
		if batch.Length() == 0 {
			return batch
		}

		vec := batch.ColVec(p.colIdx)
		col := vec.Bytes()
		var idx int
		n := batch.Length()
		if vec.MaybeHasNulls() {
			nulls := vec.Nulls()
			if sel := batch.Selection(); sel != nil {
				sel = sel[:n]
				for _, i := range sel {
					var cmp bool
					arg := col.Get(i)
					cmp = !bytes.HasSuffix(arg, p.constArg)
					isNull = nulls.NullAt(i)
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			} else {
				batch.SetSelection(true)
				sel := batch.Selection()
				_ = col.Get(n - 1)
				for i := 0; i < n; i++ {
					var cmp bool
					arg := col.Get(i)
					cmp = !bytes.HasSuffix(arg, p.constArg)
					isNull = nulls.NullAt(i)
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			}
		} else {
			if sel := batch.Selection(); sel != nil {
				sel = sel[:n]
				for _, i := range sel {
					var cmp bool
					arg := col.Get(i)
					cmp = !bytes.HasSuffix(arg, p.constArg)
					isNull = false
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			} else {
				batch.SetSelection(true)
				sel := batch.Selection()
				_ = col.Get(n - 1)
				for i := 0; i < n; i++ {
					var cmp bool
					arg := col.Get(i)
					cmp = !bytes.HasSuffix(arg, p.constArg)
					isNull = false
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			}
		}
		if idx > 0 {
			batch.SetLength(idx)
			return batch
		}
	}
}

func (p *selNotSuffixBytesBytesConstOp) Init() {
	p.input.Init()
}

type projNotSuffixBytesBytesConstOp struct {
	projConstOpBase
	constArg []byte
}

func (p projNotSuffixBytesBytesConstOp) Next(ctx context.Context) coldata.Batch {
	// In order to inline the templated code of overloads, we need to have a
	// `_overloadHelper` local variable of type `overloadHelper`.
	_overloadHelper := p.overloadHelper
	// However, the scratch is not used in all of the projection operators, so
	// we add this to go around "unused" error.
	_ = _overloadHelper
	batch := p.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	vec := batch.ColVec(p.colIdx)
	var col *coldata.Bytes
	col = vec.Bytes()
	projVec := batch.ColVec(p.outputIdx)
	if projVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		projVec.Nulls().UnsetNulls()
	}
	projCol := projVec.Bool()
	// Some operators can result in NULL with non-NULL inputs, like the JSON
	// fetch value operator, ->. Therefore, _outNulls is defined to allow
	// updating the output Nulls from within _ASSIGN functions when the result
	// of a projection is Null.
	_outNulls := projVec.Nulls()
	if vec.Nulls().MaybeHasNulls() {
		colNulls := vec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if !colNulls.NullAt(i) {
					// We only want to perform the projection operation if the value is not null.
					arg := col.Get(i)
					projCol[i] = !bytes.HasSuffix(arg, p.constArg)
				}
			}
		} else {
			col = col
			_ = 0
			_ = n
			_ = projCol.Get(n - 1)
			for i := 0; i < n; i++ {
				if !colNulls.NullAt(i) {
					// We only want to perform the projection operation if the value is not null.
					arg := col.Get(i)
					projCol[i] = !bytes.HasSuffix(arg, p.constArg)
				}
			}
		}
		// _outNulls has been updated from within the _ASSIGN function to include
		// any NULLs that resulted from the projection.
		// If $hasNulls is true, union _outNulls with the set of input Nulls.
		// If $hasNulls is false, then there are no input Nulls. _outNulls is
		// projVec.Nulls() so there is no need to call projVec.SetNulls().
		projVec.SetNulls(_outNulls.Or(colNulls))
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				arg := col.Get(i)
				projCol[i] = !bytes.HasSuffix(arg, p.constArg)
			}
		} else {
			col = col
			_ = 0
			_ = n
			_ = projCol.Get(n - 1)
			for i := 0; i < n; i++ {
				arg := col.Get(i)
				projCol[i] = !bytes.HasSuffix(arg, p.constArg)
			}
		}
		// _outNulls has been updated from within the _ASSIGN function to include
		// any NULLs that resulted from the projection.
		// If $hasNulls is true, union _outNulls with the set of input Nulls.
		// If $hasNulls is false, then there are no input Nulls. _outNulls is
		// projVec.Nulls() so there is no need to call projVec.SetNulls().
	}
	// Although we didn't change the length of the batch, it is necessary to set
	// the length anyway (this helps maintaining the invariant of flat bytes).
	batch.SetLength(n)
	return batch
}

func (p projNotSuffixBytesBytesConstOp) Init() {
	p.input.Init()
}

type selNotContainsBytesBytesConstOp struct {
	selConstOpBase
	constArg []byte
}

func (p *selNotContainsBytesBytesConstOp) Next(ctx context.Context) coldata.Batch {
	// In order to inline the templated code of overloads, we need to have a
	// `_overloadHelper` local variable of type `overloadHelper`.
	_overloadHelper := p.overloadHelper
	// However, the scratch is not used in all of the selection operators, so
	// we add this to go around "unused" error.
	_ = _overloadHelper
	var isNull bool
	for {
		batch := p.input.Next(ctx)
		if batch.Length() == 0 {
			return batch
		}

		vec := batch.ColVec(p.colIdx)
		col := vec.Bytes()
		var idx int
		n := batch.Length()
		if vec.MaybeHasNulls() {
			nulls := vec.Nulls()
			if sel := batch.Selection(); sel != nil {
				sel = sel[:n]
				for _, i := range sel {
					var cmp bool
					arg := col.Get(i)
					cmp = !bytes.Contains(arg, p.constArg)
					isNull = nulls.NullAt(i)
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			} else {
				batch.SetSelection(true)
				sel := batch.Selection()
				_ = col.Get(n - 1)
				for i := 0; i < n; i++ {
					var cmp bool
					arg := col.Get(i)
					cmp = !bytes.Contains(arg, p.constArg)
					isNull = nulls.NullAt(i)
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			}
		} else {
			if sel := batch.Selection(); sel != nil {
				sel = sel[:n]
				for _, i := range sel {
					var cmp bool
					arg := col.Get(i)
					cmp = !bytes.Contains(arg, p.constArg)
					isNull = false
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			} else {
				batch.SetSelection(true)
				sel := batch.Selection()
				_ = col.Get(n - 1)
				for i := 0; i < n; i++ {
					var cmp bool
					arg := col.Get(i)
					cmp = !bytes.Contains(arg, p.constArg)
					isNull = false
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			}
		}
		if idx > 0 {
			batch.SetLength(idx)
			return batch
		}
	}
}

func (p *selNotContainsBytesBytesConstOp) Init() {
	p.input.Init()
}

type projNotContainsBytesBytesConstOp struct {
	projConstOpBase
	constArg []byte
}

func (p projNotContainsBytesBytesConstOp) Next(ctx context.Context) coldata.Batch {
	// In order to inline the templated code of overloads, we need to have a
	// `_overloadHelper` local variable of type `overloadHelper`.
	_overloadHelper := p.overloadHelper
	// However, the scratch is not used in all of the projection operators, so
	// we add this to go around "unused" error.
	_ = _overloadHelper
	batch := p.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	vec := batch.ColVec(p.colIdx)
	var col *coldata.Bytes
	col = vec.Bytes()
	projVec := batch.ColVec(p.outputIdx)
	if projVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		projVec.Nulls().UnsetNulls()
	}
	projCol := projVec.Bool()
	// Some operators can result in NULL with non-NULL inputs, like the JSON
	// fetch value operator, ->. Therefore, _outNulls is defined to allow
	// updating the output Nulls from within _ASSIGN functions when the result
	// of a projection is Null.
	_outNulls := projVec.Nulls()
	if vec.Nulls().MaybeHasNulls() {
		colNulls := vec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if !colNulls.NullAt(i) {
					// We only want to perform the projection operation if the value is not null.
					arg := col.Get(i)
					projCol[i] = !bytes.Contains(arg, p.constArg)
				}
			}
		} else {
			col = col
			_ = 0
			_ = n
			_ = projCol.Get(n - 1)
			for i := 0; i < n; i++ {
				if !colNulls.NullAt(i) {
					// We only want to perform the projection operation if the value is not null.
					arg := col.Get(i)
					projCol[i] = !bytes.Contains(arg, p.constArg)
				}
			}
		}
		// _outNulls has been updated from within the _ASSIGN function to include
		// any NULLs that resulted from the projection.
		// If $hasNulls is true, union _outNulls with the set of input Nulls.
		// If $hasNulls is false, then there are no input Nulls. _outNulls is
		// projVec.Nulls() so there is no need to call projVec.SetNulls().
		projVec.SetNulls(_outNulls.Or(colNulls))
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				arg := col.Get(i)
				projCol[i] = !bytes.Contains(arg, p.constArg)
			}
		} else {
			col = col
			_ = 0
			_ = n
			_ = projCol.Get(n - 1)
			for i := 0; i < n; i++ {
				arg := col.Get(i)
				projCol[i] = !bytes.Contains(arg, p.constArg)
			}
		}
		// _outNulls has been updated from within the _ASSIGN function to include
		// any NULLs that resulted from the projection.
		// If $hasNulls is true, union _outNulls with the set of input Nulls.
		// If $hasNulls is false, then there are no input Nulls. _outNulls is
		// projVec.Nulls() so there is no need to call projVec.SetNulls().
	}
	// Although we didn't change the length of the batch, it is necessary to set
	// the length anyway (this helps maintaining the invariant of flat bytes).
	batch.SetLength(n)
	return batch
}

func (p projNotContainsBytesBytesConstOp) Init() {
	p.input.Init()
}

type selNotRegexpBytesBytesConstOp struct {
	selConstOpBase
	constArg *regexp.Regexp
}

func (p *selNotRegexpBytesBytesConstOp) Next(ctx context.Context) coldata.Batch {
	// In order to inline the templated code of overloads, we need to have a
	// `_overloadHelper` local variable of type `overloadHelper`.
	_overloadHelper := p.overloadHelper
	// However, the scratch is not used in all of the selection operators, so
	// we add this to go around "unused" error.
	_ = _overloadHelper
	var isNull bool
	for {
		batch := p.input.Next(ctx)
		if batch.Length() == 0 {
			return batch
		}

		vec := batch.ColVec(p.colIdx)
		col := vec.Bytes()
		var idx int
		n := batch.Length()
		if vec.MaybeHasNulls() {
			nulls := vec.Nulls()
			if sel := batch.Selection(); sel != nil {
				sel = sel[:n]
				for _, i := range sel {
					var cmp bool
					arg := col.Get(i)
					cmp = !p.constArg.Match(arg)
					isNull = nulls.NullAt(i)
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			} else {
				batch.SetSelection(true)
				sel := batch.Selection()
				_ = col.Get(n - 1)
				for i := 0; i < n; i++ {
					var cmp bool
					arg := col.Get(i)
					cmp = !p.constArg.Match(arg)
					isNull = nulls.NullAt(i)
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			}
		} else {
			if sel := batch.Selection(); sel != nil {
				sel = sel[:n]
				for _, i := range sel {
					var cmp bool
					arg := col.Get(i)
					cmp = !p.constArg.Match(arg)
					isNull = false
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			} else {
				batch.SetSelection(true)
				sel := batch.Selection()
				_ = col.Get(n - 1)
				for i := 0; i < n; i++ {
					var cmp bool
					arg := col.Get(i)
					cmp = !p.constArg.Match(arg)
					isNull = false
					if cmp && !isNull {
						sel[idx] = i
						idx++
					}
				}
			}
		}
		if idx > 0 {
			batch.SetLength(idx)
			return batch
		}
	}
}

func (p *selNotRegexpBytesBytesConstOp) Init() {
	p.input.Init()
}

type projNotRegexpBytesBytesConstOp struct {
	projConstOpBase
	constArg *regexp.Regexp
}

func (p projNotRegexpBytesBytesConstOp) Next(ctx context.Context) coldata.Batch {
	// In order to inline the templated code of overloads, we need to have a
	// `_overloadHelper` local variable of type `overloadHelper`.
	_overloadHelper := p.overloadHelper
	// However, the scratch is not used in all of the projection operators, so
	// we add this to go around "unused" error.
	_ = _overloadHelper
	batch := p.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return coldata.ZeroBatch
	}
	vec := batch.ColVec(p.colIdx)
	var col *coldata.Bytes
	col = vec.Bytes()
	projVec := batch.ColVec(p.outputIdx)
	if projVec.MaybeHasNulls() {
		// We need to make sure that there are no left over null values in the
		// output vector.
		projVec.Nulls().UnsetNulls()
	}
	projCol := projVec.Bool()
	// Some operators can result in NULL with non-NULL inputs, like the JSON
	// fetch value operator, ->. Therefore, _outNulls is defined to allow
	// updating the output Nulls from within _ASSIGN functions when the result
	// of a projection is Null.
	_outNulls := projVec.Nulls()
	if vec.Nulls().MaybeHasNulls() {
		colNulls := vec.Nulls()
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				if !colNulls.NullAt(i) {
					// We only want to perform the projection operation if the value is not null.
					arg := col.Get(i)
					projCol[i] = !p.constArg.Match(arg)
				}
			}
		} else {
			col = col
			_ = 0
			_ = n
			_ = projCol.Get(n - 1)
			for i := 0; i < n; i++ {
				if !colNulls.NullAt(i) {
					// We only want to perform the projection operation if the value is not null.
					arg := col.Get(i)
					projCol[i] = !p.constArg.Match(arg)
				}
			}
		}
		// _outNulls has been updated from within the _ASSIGN function to include
		// any NULLs that resulted from the projection.
		// If $hasNulls is true, union _outNulls with the set of input Nulls.
		// If $hasNulls is false, then there are no input Nulls. _outNulls is
		// projVec.Nulls() so there is no need to call projVec.SetNulls().
		projVec.SetNulls(_outNulls.Or(colNulls))
	} else {
		if sel := batch.Selection(); sel != nil {
			sel = sel[:n]
			for _, i := range sel {
				arg := col.Get(i)
				projCol[i] = !p.constArg.Match(arg)
			}
		} else {
			col = col
			_ = 0
			_ = n
			_ = projCol.Get(n - 1)
			for i := 0; i < n; i++ {
				arg := col.Get(i)
				projCol[i] = !p.constArg.Match(arg)
			}
		}
		// _outNulls has been updated from within the _ASSIGN function to include
		// any NULLs that resulted from the projection.
		// If $hasNulls is true, union _outNulls with the set of input Nulls.
		// If $hasNulls is false, then there are no input Nulls. _outNulls is
		// projVec.Nulls() so there is no need to call projVec.SetNulls().
	}
	// Although we didn't change the length of the batch, it is necessary to set
	// the length anyway (this helps maintaining the invariant of flat bytes).
	batch.SetLength(n)
	return batch
}

func (p projNotRegexpBytesBytesConstOp) Init() {
	p.input.Init()
}
