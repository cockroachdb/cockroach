// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/colexec/execpb/stats.proto

package execpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// VectorizedStats represents the stats collected from an operator.
type VectorizedStats struct {
	ID int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// num_batches is the number of batches that this stats collector observed its
	// operator to output.
	NumBatches int64 `protobuf:"varint,2,opt,name=num_batches,json=numBatches,proto3" json:"num_batches,omitempty"`
	// num_tuples is the number of tuples that this stats collector received
	// from its input.
	NumTuples int64         `protobuf:"varint,3,opt,name=num_tuples,json=numTuples,proto3" json:"num_tuples,omitempty"`
	Time      time.Duration `protobuf:"bytes,4,opt,name=time,proto3,stdduration" json:"time"`
	// io indicates whether time contains IO or execution time.
	IO               bool  `protobuf:"varint,5,opt,name=io,proto3" json:"io,omitempty"`
	MaxAllocatedMem  int64 `protobuf:"varint,6,opt,name=max_allocated_mem,json=maxAllocatedMem,proto3" json:"max_allocated_mem,omitempty"`
	MaxAllocatedDisk int64 `protobuf:"varint,7,opt,name=max_allocated_disk,json=maxAllocatedDisk,proto3" json:"max_allocated_disk,omitempty"`
	// bytes_read is the number of bytes read from the disk. It is set only when
	// io is true.
	BytesRead int64 `protobuf:"varint,8,opt,name=bytes_read,json=bytesRead,proto3" json:"bytes_read,omitempty"`
	// rows_read is the number of rows read from the disk. It is set only when
	// io is true.
	RowsRead int64 `protobuf:"varint,9,opt,name=rows_read,json=rowsRead,proto3" json:"rows_read,omitempty"`
	// on_stream indicates whether the stats are shown on a stream. This decides
	// if network latency should be shown or not.
	OnStream bool `protobuf:"varint,10,opt,name=on_stream,json=onStream,proto3" json:"on_stream,omitempty"`
	// network_latency is the latency time between outbox and inbox. It is set
	// only when on_stream is true.
	NetworkLatency int64 `protobuf:"varint,11,opt,name=network_latency,json=networkLatency,proto3" json:"network_latency,omitempty"`
}

func (m *VectorizedStats) Reset()         { *m = VectorizedStats{} }
func (m *VectorizedStats) String() string { return proto.CompactTextString(m) }
func (*VectorizedStats) ProtoMessage()    {}
func (*VectorizedStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_stats_0bdebaa96e7a8ca6, []int{0}
}
func (m *VectorizedStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VectorizedStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *VectorizedStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorizedStats.Merge(dst, src)
}
func (m *VectorizedStats) XXX_Size() int {
	return m.Size()
}
func (m *VectorizedStats) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorizedStats.DiscardUnknown(m)
}

var xxx_messageInfo_VectorizedStats proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VectorizedStats)(nil), "cockroach.sql.execpb.VectorizedStats")
}
func (m *VectorizedStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VectorizedStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.ID))
	}
	if m.NumBatches != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.NumBatches))
	}
	if m.NumTuples != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.NumTuples))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintStats(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.Time)))
	n1, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Time, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.IO {
		dAtA[i] = 0x28
		i++
		if m.IO {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MaxAllocatedMem != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.MaxAllocatedMem))
	}
	if m.MaxAllocatedDisk != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.MaxAllocatedDisk))
	}
	if m.BytesRead != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.BytesRead))
	}
	if m.RowsRead != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.RowsRead))
	}
	if m.OnStream {
		dAtA[i] = 0x50
		i++
		if m.OnStream {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NetworkLatency != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.NetworkLatency))
	}
	return i, nil
}

func encodeVarintStats(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VectorizedStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovStats(uint64(m.ID))
	}
	if m.NumBatches != 0 {
		n += 1 + sovStats(uint64(m.NumBatches))
	}
	if m.NumTuples != 0 {
		n += 1 + sovStats(uint64(m.NumTuples))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Time)
	n += 1 + l + sovStats(uint64(l))
	if m.IO {
		n += 2
	}
	if m.MaxAllocatedMem != 0 {
		n += 1 + sovStats(uint64(m.MaxAllocatedMem))
	}
	if m.MaxAllocatedDisk != 0 {
		n += 1 + sovStats(uint64(m.MaxAllocatedDisk))
	}
	if m.BytesRead != 0 {
		n += 1 + sovStats(uint64(m.BytesRead))
	}
	if m.RowsRead != 0 {
		n += 1 + sovStats(uint64(m.RowsRead))
	}
	if m.OnStream {
		n += 2
	}
	if m.NetworkLatency != 0 {
		n += 1 + sovStats(uint64(m.NetworkLatency))
	}
	return n
}

func sovStats(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStats(x uint64) (n int) {
	return sovStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VectorizedStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VectorizedStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VectorizedStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBatches", wireType)
			}
			m.NumBatches = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBatches |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTuples", wireType)
			}
			m.NumTuples = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTuples |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IO", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IO = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedMem", wireType)
			}
			m.MaxAllocatedMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllocatedMem |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedDisk", wireType)
			}
			m.MaxAllocatedDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllocatedDisk |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRead", wireType)
			}
			m.BytesRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesRead |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsRead", wireType)
			}
			m.RowsRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsRead |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnStream", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnStream = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkLatency", wireType)
			}
			m.NetworkLatency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkLatency |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStats
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStats
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStats(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStats = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStats   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("sql/colexec/execpb/stats.proto", fileDescriptor_stats_0bdebaa96e7a8ca6)
}

var fileDescriptor_stats_0bdebaa96e7a8ca6 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x33, 0xe9, 0x6e, 0x4d, 0xa7, 0x60, 0x75, 0x58, 0x64, 0x5c, 0x71, 0x5a, 0xbc, 0x18,
	0x44, 0x12, 0xd0, 0x83, 0x67, 0x4b, 0x2f, 0x82, 0x22, 0x64, 0xc5, 0x83, 0x97, 0x30, 0x99, 0x3c,
	0xbb, 0xa1, 0x99, 0xbc, 0x6e, 0x66, 0xc2, 0x76, 0xfd, 0x14, 0x9e, 0xc4, 0x8f, 0xd4, 0xe3, 0x1e,
	0xf7, 0x54, 0x35, 0xfd, 0x22, 0x92, 0x49, 0x0b, 0x7a, 0x19, 0xe6, 0xfd, 0xfe, 0xff, 0xc7, 0xfb,
	0xbf, 0x19, 0x2a, 0xcc, 0x55, 0x19, 0x2b, 0x2c, 0x61, 0x03, 0x2a, 0xee, 0x8e, 0x75, 0x16, 0x1b,
	0x2b, 0xad, 0x89, 0xd6, 0x35, 0x5a, 0x64, 0x67, 0x0a, 0xd5, 0xaa, 0x46, 0xa9, 0x2e, 0x23, 0x73,
	0x55, 0x46, 0xbd, 0xe3, 0xfc, 0x6c, 0x89, 0x4b, 0x74, 0x86, 0xb8, 0xbb, 0xf5, 0xde, 0x73, 0xb1,
	0x44, 0x5c, 0x96, 0x10, 0xbb, 0x2a, 0x6b, 0xbe, 0xc6, 0x79, 0x53, 0x4b, 0x5b, 0x60, 0xd5, 0xeb,
	0xcf, 0x7e, 0x0c, 0xe8, 0xe4, 0x33, 0x28, 0x8b, 0x75, 0xf1, 0x0d, 0xf2, 0x8b, 0x6e, 0x0a, 0x7b,
	0x44, 0xfd, 0x22, 0xe7, 0x64, 0x46, 0xc2, 0xd3, 0xf9, 0xb0, 0xdd, 0x4d, 0xfd, 0x77, 0x8b, 0xc4,
	0x2f, 0x72, 0x36, 0xa5, 0xe3, 0xaa, 0xd1, 0x69, 0x26, 0xad, 0xba, 0x04, 0xc3, 0xfd, 0x19, 0x09,
	0x07, 0x09, 0xad, 0x1a, 0x3d, 0xef, 0x09, 0x7b, 0x4a, 0xbb, 0x2a, 0xb5, 0xcd, 0xba, 0x04, 0xc3,
	0x07, 0x4e, 0x1f, 0x55, 0x8d, 0xfe, 0xe4, 0x00, 0x7b, 0x43, 0x4f, 0x6c, 0xa1, 0x81, 0x9f, 0xcc,
	0x48, 0x38, 0x7e, 0xf5, 0x38, 0xea, 0xa3, 0x45, 0xc7, 0x68, 0xd1, 0xe2, 0x10, 0x6d, 0x1e, 0x6c,
	0x77, 0x53, 0xef, 0xe7, 0xaf, 0x29, 0x49, 0x5c, 0x83, 0x0b, 0x84, 0xfc, 0x74, 0x46, 0xc2, 0xe0,
	0x10, 0xe8, 0x63, 0xe2, 0x17, 0xc8, 0x5e, 0xd0, 0x87, 0x5a, 0x6e, 0x52, 0x59, 0x96, 0xa8, 0xa4,
	0x85, 0x3c, 0xd5, 0xa0, 0xf9, 0xd0, 0x8d, 0x9d, 0x68, 0xb9, 0x79, 0x7b, 0xe4, 0x1f, 0x40, 0xb3,
	0x97, 0x94, 0xfd, 0xef, 0xcd, 0x0b, 0xb3, 0xe2, 0xf7, 0x9c, 0xf9, 0xc1, 0xbf, 0xe6, 0x45, 0x61,
	0x56, 0xdd, 0x26, 0xd9, 0x8d, 0x05, 0x93, 0xd6, 0x20, 0x73, 0x1e, 0xf4, 0x9b, 0x38, 0x92, 0x80,
	0xcc, 0xd9, 0x13, 0x3a, 0xaa, 0xf1, 0xfa, 0xa0, 0x8e, 0x9c, 0x1a, 0x74, 0xe0, 0x28, 0x62, 0x95,
	0x1a, 0x5b, 0x83, 0xd4, 0x9c, 0x76, 0xa1, 0x93, 0x00, 0xab, 0x0b, 0x57, 0xb3, 0xe7, 0x74, 0x52,
	0x81, 0xbd, 0xc6, 0x7a, 0x95, 0x96, 0xd2, 0x42, 0xa5, 0x6e, 0xf8, 0xd8, 0xf5, 0xdf, 0x3f, 0xe0,
	0xf7, 0x3d, 0x9d, 0x87, 0xdb, 0x3f, 0xc2, 0xdb, 0xb6, 0x82, 0xdc, 0xb6, 0x82, 0xdc, 0xb5, 0x82,
	0xfc, 0x6e, 0x05, 0xf9, 0xbe, 0x17, 0xde, 0xed, 0x5e, 0x78, 0x77, 0x7b, 0xe1, 0x7d, 0x19, 0xf6,
	0x1f, 0x9f, 0x0d, 0xdd, 0x03, 0xbe, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x22, 0x6a, 0xd3,
	0x37, 0x02, 0x00, 0x00,
}
