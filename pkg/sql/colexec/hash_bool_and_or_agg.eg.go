// Code generated by execgen; DO NOT EDIT.
// Copyright 2020 The Cockroach Authors.
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package colexec

import (
	"unsafe"

	"github.com/cockroachdb/cockroach/pkg/col/coldata"
	"github.com/cockroachdb/cockroach/pkg/sql/colexecbase/colexecerror"
	"github.com/cockroachdb/cockroach/pkg/sql/colmem"
)

// Remove unused warning.
var _ = colexecerror.InternalError

func newBoolAndHashAggAlloc(
	allocator *colmem.Allocator, allocSize int64,
) aggregateFuncAlloc {
	return &boolAndHashAggAlloc{aggAllocBase: aggAllocBase{
		allocator: allocator,
		allocSize: allocSize,
	}}
}

type boolAndHashAgg struct {
	hashAggregateFuncBase
	sawNonNull bool
	vec        []bool
	curAgg     bool
}

var _ aggregateFunc = &boolAndHashAgg{}

func (a *boolAndHashAgg) Init(groups []bool, vec coldata.Vec) {
	a.hashAggregateFuncBase.Init(groups, vec)
	a.vec = vec.Bool()
	a.Reset()
}

func (a *boolAndHashAgg) Reset() {
	a.hashAggregateFuncBase.Reset()
	// true indicates whether we are doing an AND aggregate or OR aggregate.
	// For bool_and the true is true and for bool_or the true is false.
	a.curAgg = true
}

func (a *boolAndHashAgg) Compute(
	vecs []coldata.Vec, inputIdxs []uint32, inputLen int, sel []int,
) {
	vec := vecs[inputIdxs[0]]
	col, nulls := vec.Bool(), vec.Nulls()
	{
		sel = sel[:inputLen]
		if nulls.MaybeHasNulls() {
			for _, i := range sel {

				var isNull bool
				isNull = nulls.NullAt(i)
				if !isNull {
					a.curAgg = a.curAgg && col[i]
					a.sawNonNull = true
				}

			}
		} else {
			for _, i := range sel {

				var isNull bool
				isNull = false
				if !isNull {
					a.curAgg = a.curAgg && col[i]
					a.sawNonNull = true
				}

			}
		}
	}
}

func (a *boolAndHashAgg) Flush(outputIdx int) {
	if !a.sawNonNull {
		a.nulls.SetNull(outputIdx)
	} else {
		a.vec[outputIdx] = a.curAgg
	}
}

type boolAndHashAggAlloc struct {
	aggAllocBase
	aggFuncs []boolAndHashAgg
}

var _ aggregateFuncAlloc = &boolAndHashAggAlloc{}

const sizeOfBoolAndHashAgg = int64(unsafe.Sizeof(boolAndHashAgg{}))
const boolAndHashAggSliceOverhead = int64(unsafe.Sizeof([]boolAndHashAgg{}))

func (a *boolAndHashAggAlloc) newAggFunc() aggregateFunc {
	if len(a.aggFuncs) == 0 {
		a.allocator.AdjustMemoryUsage(boolAndHashAggSliceOverhead + sizeOfBoolAndHashAgg*a.allocSize)
		a.aggFuncs = make([]boolAndHashAgg, a.allocSize)
	}
	f := &a.aggFuncs[0]
	a.aggFuncs = a.aggFuncs[1:]
	return f
}

func newBoolOrHashAggAlloc(
	allocator *colmem.Allocator, allocSize int64,
) aggregateFuncAlloc {
	return &boolOrHashAggAlloc{aggAllocBase: aggAllocBase{
		allocator: allocator,
		allocSize: allocSize,
	}}
}

type boolOrHashAgg struct {
	hashAggregateFuncBase
	sawNonNull bool
	vec        []bool
	curAgg     bool
}

var _ aggregateFunc = &boolOrHashAgg{}

func (a *boolOrHashAgg) Init(groups []bool, vec coldata.Vec) {
	a.hashAggregateFuncBase.Init(groups, vec)
	a.vec = vec.Bool()
	a.Reset()
}

func (a *boolOrHashAgg) Reset() {
	a.hashAggregateFuncBase.Reset()
	// false indicates whether we are doing an AND aggregate or OR aggregate.
	// For bool_and the false is true and for bool_or the false is false.
	a.curAgg = false
}

func (a *boolOrHashAgg) Compute(
	vecs []coldata.Vec, inputIdxs []uint32, inputLen int, sel []int,
) {
	vec := vecs[inputIdxs[0]]
	col, nulls := vec.Bool(), vec.Nulls()
	{
		sel = sel[:inputLen]
		if nulls.MaybeHasNulls() {
			for _, i := range sel {

				var isNull bool
				isNull = nulls.NullAt(i)
				if !isNull {
					a.curAgg = a.curAgg || col[i]
					a.sawNonNull = true
				}

			}
		} else {
			for _, i := range sel {

				var isNull bool
				isNull = false
				if !isNull {
					a.curAgg = a.curAgg || col[i]
					a.sawNonNull = true
				}

			}
		}
	}
}

func (a *boolOrHashAgg) Flush(outputIdx int) {
	if !a.sawNonNull {
		a.nulls.SetNull(outputIdx)
	} else {
		a.vec[outputIdx] = a.curAgg
	}
}

type boolOrHashAggAlloc struct {
	aggAllocBase
	aggFuncs []boolOrHashAgg
}

var _ aggregateFuncAlloc = &boolOrHashAggAlloc{}

const sizeOfBoolOrHashAgg = int64(unsafe.Sizeof(boolOrHashAgg{}))
const boolOrHashAggSliceOverhead = int64(unsafe.Sizeof([]boolOrHashAgg{}))

func (a *boolOrHashAggAlloc) newAggFunc() aggregateFunc {
	if len(a.aggFuncs) == 0 {
		a.allocator.AdjustMemoryUsage(boolOrHashAggSliceOverhead + sizeOfBoolOrHashAgg*a.allocSize)
		a.aggFuncs = make([]boolOrHashAgg, a.allocSize)
	}
	f := &a.aggFuncs[0]
	a.aggFuncs = a.aggFuncs[1:]
	return f
}
