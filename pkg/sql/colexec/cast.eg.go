// Code generated by execgen; DO NOT EDIT.
// Copyright 2019 The Cockroach Authors.
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package colexec

import (
	"context"
	"fmt"
	"math"

	"github.com/cockroachdb/apd"
	"github.com/cockroachdb/cockroach/pkg/col/coldata"
	"github.com/cockroachdb/cockroach/pkg/col/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/colexec/execerror"
	"github.com/cockroachdb/cockroach/pkg/sql/colexec/execgen"
	"github.com/cockroachdb/cockroach/pkg/sql/colexec/typeconv"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	semtypes "github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/pkg/errors"
)

// Use execgen package to remove unused import warning.
var _ interface{} = execgen.UNSAFEGET

func GetCastOperator(
	allocator *Allocator,
	input Operator,
	colIdx int,
	resultIdx int,
	fromType *semtypes.T,
	toType *semtypes.T,
) (Operator, error) {
	if fromType.Family() == semtypes.UnknownFamily {
		return &castOpNullAny{
			OneInputNode: NewOneInputNode(input),
			allocator:    allocator,
			colIdx:       colIdx,
			outputIdx:    resultIdx,
			toType:       typeconv.FromColumnType(toType),
		}, nil
	}
	switch from := typeconv.FromColumnType(fromType); from {
	case coltypes.Bool:
		switch to := typeconv.FromColumnType(toType); to {
		case coltypes.Bool:
			return &castOpBoolBool{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int16:
			return &castOpBoolInt16{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int32:
			return &castOpBoolInt32{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int64:
			return &castOpBoolInt64{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float64:
			return &castOpBoolFloat64{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", from, to)
		}
	case coltypes.Bytes:
		switch to := typeconv.FromColumnType(toType); to {
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", from, to)
		}
	case coltypes.Decimal:
		switch to := typeconv.FromColumnType(toType); to {
		case coltypes.Bool:
			return &castOpDecimalBool{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Decimal:
			return &castOpDecimalDecimal{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", from, to)
		}
	case coltypes.Int16:
		switch to := typeconv.FromColumnType(toType); to {
		case coltypes.Bool:
			return &castOpInt16Bool{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Decimal:
			return &castOpInt16Decimal{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int16:
			return &castOpInt16Int16{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float64:
			return &castOpInt16Float64{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", from, to)
		}
	case coltypes.Int32:
		switch to := typeconv.FromColumnType(toType); to {
		case coltypes.Bool:
			return &castOpInt32Bool{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Decimal:
			return &castOpInt32Decimal{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int32:
			return &castOpInt32Int32{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float64:
			return &castOpInt32Float64{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", from, to)
		}
	case coltypes.Int64:
		switch to := typeconv.FromColumnType(toType); to {
		case coltypes.Bool:
			return &castOpInt64Bool{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Decimal:
			return &castOpInt64Decimal{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int64:
			return &castOpInt64Int64{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float64:
			return &castOpInt64Float64{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", from, to)
		}
	case coltypes.Float64:
		switch to := typeconv.FromColumnType(toType); to {
		case coltypes.Bool:
			return &castOpFloat64Bool{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Decimal:
			return &castOpFloat64Decimal{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int16:
			return &castOpFloat64Int16{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int32:
			return &castOpFloat64Int32{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Int64:
			return &castOpFloat64Int64{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		case coltypes.Float64:
			return &castOpFloat64Float64{
				OneInputNode: NewOneInputNode(input),
				allocator:    allocator,
				colIdx:       colIdx,
				outputIdx:    resultIdx,
				fromType:     from,
				toType:       to,
			}, nil
		default:
			return nil, errors.Errorf("unhandled cast FROM -> TO type: %s -> %s", from, to)
		}
	default:
		return nil, errors.Errorf("unhandled FROM type: %s", from)
	}
}

type castOpNullAny struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	toType    coltypes.T
}

var _ Operator = &castOpNullAny{}

func (c *castOpNullAny) Init() {
	c.input.Init()
}

func (c *castOpNullAny) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, c.toType)
	}
	n := batch.Length()
	if n == 0 {
		return batch
	}
	vec := batch.ColVec(c.colIdx)
	projVec := batch.ColVec(c.outputIdx)
	vecNulls := vec.Nulls()
	projNulls := projVec.Nulls()
	if sel := batch.Selection(); sel != nil {
		sel = sel[:n]
		for _, i := range sel {
			if vecNulls.NullAt(i) {
				projNulls.SetNull(i)
			} else {
				execerror.VectorizedInternalPanic(errors.Errorf("unexpected non-null at index %d", i))
			}
		}
	} else {
		for i := uint16(0); i < n; i++ {
			if vecNulls.NullAt(uint16(i)) {
				projNulls.SetNull(uint16(i))
			} else {
				execerror.VectorizedInternalPanic(fmt.Errorf("unexpected non-null at index %d", i))
			}
		}
	}
	return batch
}

type castOpBoolBool struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpBoolBool{}

func (c *castOpBoolBool) Init() {
	c.input.Init()
}

func (c *castOpBoolBool) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Bool)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Bool()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Bool()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r bool
							r = v
							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r bool
							r = v
							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r bool
						r = v
						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r bool
						r = v
						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpBoolInt16 struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpBoolInt16{}

func (c *castOpBoolInt16) Init() {
	c.input.Init()
}

func (c *castOpBoolInt16) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Int16)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Bool()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int16()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r int16

							r = 0
							if v {
								r = 1
							}

							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r int16

							r = 0
							if v {
								r = 1
							}

							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r int16

						r = 0
						if v {
							r = 1
						}

						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r int16

						r = 0
						if v {
							r = 1
						}

						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpBoolInt32 struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpBoolInt32{}

func (c *castOpBoolInt32) Init() {
	c.input.Init()
}

func (c *castOpBoolInt32) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Int32)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Bool()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int32()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r int32

							r = 0
							if v {
								r = 1
							}

							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r int32

							r = 0
							if v {
								r = 1
							}

							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r int32

						r = 0
						if v {
							r = 1
						}

						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r int32

						r = 0
						if v {
							r = 1
						}

						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpBoolInt64 struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpBoolInt64{}

func (c *castOpBoolInt64) Init() {
	c.input.Init()
}

func (c *castOpBoolInt64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Int64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Bool()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int64()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r int64

							r = 0
							if v {
								r = 1
							}

							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r int64

							r = 0
							if v {
								r = 1
							}

							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r int64

						r = 0
						if v {
							r = 1
						}

						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r int64

						r = 0
						if v {
							r = 1
						}

						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpBoolFloat64 struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpBoolFloat64{}

func (c *castOpBoolFloat64) Init() {
	c.input.Init()
}

func (c *castOpBoolFloat64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Float64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Bool()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float64()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r float64

							r = 0
							if v {
								r = 1
							}

							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r float64

							r = 0
							if v {
								r = 1
							}

							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r float64

						r = 0
						if v {
							r = 1
						}

						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r float64

						r = 0
						if v {
							r = 1
						}

						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpDecimalBool struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpDecimalBool{}

func (c *castOpDecimalBool) Init() {
	c.input.Init()
}

func (c *castOpDecimalBool) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Bool)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Decimal()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Bool()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r bool

							r = v.Sign() != 0

							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r bool

							r = v.Sign() != 0

							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r bool

						r = v.Sign() != 0

						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r bool

						r = v.Sign() != 0

						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpDecimalDecimal struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpDecimalDecimal{}

func (c *castOpDecimalDecimal) Init() {
	c.input.Init()
}

func (c *castOpDecimalDecimal) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Decimal)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Decimal()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Decimal()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r apd.Decimal
							r = v
							projCol[int(i)].Set(&r)
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r apd.Decimal
							r = v
							projCol[int(i)].Set(&r)
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r apd.Decimal
						r = v
						projCol[int(i)].Set(&r)
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r apd.Decimal
						r = v
						projCol[int(i)].Set(&r)
					}
				}
			}
		},
	)
	return batch
}

type castOpInt16Bool struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpInt16Bool{}

func (c *castOpInt16Bool) Init() {
	c.input.Init()
}

func (c *castOpInt16Bool) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Bool)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int16()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Bool()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r bool

							r = v != 0

							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r bool

							r = v != 0

							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r bool

						r = v != 0

						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r bool

						r = v != 0

						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpInt16Decimal struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpInt16Decimal{}

func (c *castOpInt16Decimal) Init() {
	c.input.Init()
}

func (c *castOpInt16Decimal) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Decimal)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int16()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Decimal()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							projCol[int(i)].Set(&r)
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							projCol[int(i)].Set(&r)
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						projCol[int(i)].Set(&r)
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						projCol[int(i)].Set(&r)
					}
				}
			}
		},
	)
	return batch
}

type castOpInt16Int16 struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpInt16Int16{}

func (c *castOpInt16Int16) Init() {
	c.input.Init()
}

func (c *castOpInt16Int16) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Int16)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int16()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int16()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r int16
							r = v
							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r int16
							r = v
							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r int16
						r = v
						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r int16
						r = v
						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpInt16Float64 struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpInt16Float64{}

func (c *castOpInt16Float64) Init() {
	c.input.Init()
}

func (c *castOpInt16Float64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Float64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int16()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float64()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r float64

							r = float64(v)

							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r float64

							r = float64(v)

							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r float64

						r = float64(v)

						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r float64

						r = float64(v)

						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpInt32Bool struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpInt32Bool{}

func (c *castOpInt32Bool) Init() {
	c.input.Init()
}

func (c *castOpInt32Bool) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Bool)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int32()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Bool()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r bool

							r = v != 0

							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r bool

							r = v != 0

							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r bool

						r = v != 0

						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r bool

						r = v != 0

						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpInt32Decimal struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpInt32Decimal{}

func (c *castOpInt32Decimal) Init() {
	c.input.Init()
}

func (c *castOpInt32Decimal) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Decimal)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int32()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Decimal()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							projCol[int(i)].Set(&r)
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							projCol[int(i)].Set(&r)
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						projCol[int(i)].Set(&r)
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						projCol[int(i)].Set(&r)
					}
				}
			}
		},
	)
	return batch
}

type castOpInt32Int32 struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpInt32Int32{}

func (c *castOpInt32Int32) Init() {
	c.input.Init()
}

func (c *castOpInt32Int32) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Int32)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int32()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int32()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r int32
							r = v
							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r int32
							r = v
							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r int32
						r = v
						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r int32
						r = v
						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpInt32Float64 struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpInt32Float64{}

func (c *castOpInt32Float64) Init() {
	c.input.Init()
}

func (c *castOpInt32Float64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Float64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int32()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float64()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r float64

							r = float64(v)

							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r float64

							r = float64(v)

							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r float64

						r = float64(v)

						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r float64

						r = float64(v)

						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpInt64Bool struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpInt64Bool{}

func (c *castOpInt64Bool) Init() {
	c.input.Init()
}

func (c *castOpInt64Bool) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Bool)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Bool()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r bool

							r = v != 0

							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r bool

							r = v != 0

							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r bool

						r = v != 0

						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r bool

						r = v != 0

						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpInt64Decimal struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpInt64Decimal{}

func (c *castOpInt64Decimal) Init() {
	c.input.Init()
}

func (c *castOpInt64Decimal) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Decimal)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Decimal()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							projCol[int(i)].Set(&r)
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r apd.Decimal

							r = *apd.New(int64(v), 0)

							projCol[int(i)].Set(&r)
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						projCol[int(i)].Set(&r)
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r apd.Decimal

						r = *apd.New(int64(v), 0)

						projCol[int(i)].Set(&r)
					}
				}
			}
		},
	)
	return batch
}

type castOpInt64Int64 struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpInt64Int64{}

func (c *castOpInt64Int64) Init() {
	c.input.Init()
}

func (c *castOpInt64Int64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Int64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int64()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r int64
							r = v
							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r int64
							r = v
							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r int64
						r = v
						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r int64
						r = v
						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpInt64Float64 struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpInt64Float64{}

func (c *castOpInt64Float64) Init() {
	c.input.Init()
}

func (c *castOpInt64Float64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Float64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Int64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float64()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r float64

							r = float64(v)

							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r float64

							r = float64(v)

							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r float64

						r = float64(v)

						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r float64

						r = float64(v)

						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpFloat64Bool struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpFloat64Bool{}

func (c *castOpFloat64Bool) Init() {
	c.input.Init()
}

func (c *castOpFloat64Bool) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Bool)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Bool()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r bool

							r = v != 0

							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r bool

							r = v != 0

							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r bool

						r = v != 0

						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r bool

						r = v != 0

						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpFloat64Decimal struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpFloat64Decimal{}

func (c *castOpFloat64Decimal) Init() {
	c.input.Init()
}

func (c *castOpFloat64Decimal) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Decimal)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Decimal()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r apd.Decimal

							{
								var tmpDec apd.Decimal
								_, tmpErr := tmpDec.SetFloat64(float64(v))
								if tmpErr != nil {
									execerror.NonVectorizedPanic(tmpErr)
								}
								r = tmpDec
							}

							projCol[int(i)].Set(&r)
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r apd.Decimal

							{
								var tmpDec apd.Decimal
								_, tmpErr := tmpDec.SetFloat64(float64(v))
								if tmpErr != nil {
									execerror.NonVectorizedPanic(tmpErr)
								}
								r = tmpDec
							}

							projCol[int(i)].Set(&r)
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r apd.Decimal

						{
							var tmpDec apd.Decimal
							_, tmpErr := tmpDec.SetFloat64(float64(v))
							if tmpErr != nil {
								execerror.NonVectorizedPanic(tmpErr)
							}
							r = tmpDec
						}

						projCol[int(i)].Set(&r)
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r apd.Decimal

						{
							var tmpDec apd.Decimal
							_, tmpErr := tmpDec.SetFloat64(float64(v))
							if tmpErr != nil {
								execerror.NonVectorizedPanic(tmpErr)
							}
							r = tmpDec
						}

						projCol[int(i)].Set(&r)
					}
				}
			}
		},
	)
	return batch
}

type castOpFloat64Int16 struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpFloat64Int16{}

func (c *castOpFloat64Int16) Init() {
	c.input.Init()
}

func (c *castOpFloat64Int16) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Int16)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int16()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r int16

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
								execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
							}
							r = int16(v)

							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r int16

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
								execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
							}
							r = int16(v)

							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r int16

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
							execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
						}
						r = int16(v)

						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r int16

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt16) || v >= float64(math.MaxInt16) {
							execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
						}
						r = int16(v)

						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpFloat64Int32 struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpFloat64Int32{}

func (c *castOpFloat64Int32) Init() {
	c.input.Init()
}

func (c *castOpFloat64Int32) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Int32)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int32()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r int32

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
								execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
							}
							r = int32(v)

							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r int32

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
								execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
							}
							r = int32(v)

							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r int32

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
							execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
						}
						r = int32(v)

						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r int32

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt32) || v >= float64(math.MaxInt32) {
							execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
						}
						r = int32(v)

						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpFloat64Int64 struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpFloat64Int64{}

func (c *castOpFloat64Int64) Init() {
	c.input.Init()
}

func (c *castOpFloat64Int64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Int64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Int64()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r int64

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
								execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
							}
							r = int64(v)

							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r int64

							if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
								execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
							}
							r = int64(v)

							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r int64

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
							execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
						}
						r = int64(v)

						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r int64

						if math.IsNaN(float64(v)) || v <= float64(math.MinInt64) || v >= float64(math.MaxInt64) {
							execerror.NonVectorizedPanic(tree.ErrIntOutOfRange)
						}
						r = int64(v)

						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}

type castOpFloat64Float64 struct {
	OneInputNode
	allocator *Allocator
	colIdx    int
	outputIdx int
	fromType  coltypes.T
	toType    coltypes.T
}

var _ Operator = &castOpFloat64Float64{}

func (c *castOpFloat64Float64) Init() {
	c.input.Init()
}

func (c *castOpFloat64Float64) Next(ctx context.Context) coldata.Batch {
	batch := c.input.Next(ctx)
	n := batch.Length()
	if n == 0 {
		return batch
	}
	if c.outputIdx == batch.Width() {
		c.allocator.AppendColumn(batch, coltypes.Float64)
	}
	vec := batch.ColVec(c.colIdx)
	col := vec.Float64()
	projVec := batch.ColVec(c.outputIdx)
	projCol := projVec.Float64()
	c.allocator.performOperation(
		[]coldata.Vec{projVec},
		func() {
			if vec.MaybeHasNulls() {
				vecNulls := vec.Nulls()
				projNulls := projVec.Nulls()
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						if vecNulls.NullAt(i) {
							projNulls.SetNull(i)
						} else {
							v := col[int(i)]
							var r float64
							r = v
							projCol[int(i)] = r
						}
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						if vecNulls.NullAt(uint16(i)) {
							projNulls.SetNull(uint16(i))
						} else {
							v := col[int(i)]
							var r float64
							r = v
							projCol[int(i)] = r
						}
					}
				}
			} else {
				if sel := batch.Selection(); sel != nil {
					sel = sel[:n]
					for _, i := range sel {
						v := col[int(i)]
						var r float64
						r = v
						projCol[int(i)] = r
					}
				} else {
					col = col[0:int(n)]
					for i := range col {
						v := col[int(i)]
						var r float64
						r = v
						projCol[int(i)] = r
					}
				}
			}
		},
	)
	return batch
}
