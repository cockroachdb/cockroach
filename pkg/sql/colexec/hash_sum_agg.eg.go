// Code generated by execgen; DO NOT EDIT.
// Copyright 2018 The Cockroach Authors.
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package colexec

import (
	"strings"
	"unsafe"

	"github.com/cockroachdb/apd/v2"
	"github.com/cockroachdb/cockroach/pkg/col/coldata"
	"github.com/cockroachdb/cockroach/pkg/sql/colexecbase/colexecerror"
	"github.com/cockroachdb/cockroach/pkg/sql/colmem"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/cockroach/pkg/util/duration"
	"github.com/cockroachdb/errors"
)

func newSumHashAggAlloc(
	allocator *colmem.Allocator, t *types.T, allocSize int64,
) (aggregateFuncAlloc, error) {
	allocBase := aggAllocBase{allocator: allocator, allocSize: allocSize}
	switch t.Family() {
	case types.IntFamily:
		switch t.Width() {
		case 16:
			return &sumInt16HashAggAlloc{aggAllocBase: allocBase}, nil
		case 32:
			return &sumInt32HashAggAlloc{aggAllocBase: allocBase}, nil
		default:
			return &sumInt64HashAggAlloc{aggAllocBase: allocBase}, nil
		}
	case types.DecimalFamily:
		return &sumDecimalHashAggAlloc{aggAllocBase: allocBase}, nil
	case types.FloatFamily:
		return &sumFloat64HashAggAlloc{aggAllocBase: allocBase}, nil
	case types.IntervalFamily:
		return &sumIntervalHashAggAlloc{aggAllocBase: allocBase}, nil
	default:
		return nil, errors.Errorf("unsupported sum %s agg type %s", strings.ToLower(""), t.Name())
	}
}

type sumInt16HashAgg struct {
	hashAggregateFuncBase
	scratch struct {
		// curAgg holds the running total, so we can index into the slice once per
		// group, instead of on each iteration.
		curAgg apd.Decimal
		// vec points to the output vector we are updating.
		vec []apd.Decimal
		// foundNonNullForCurrentGroup tracks if we have seen any non-null values
		// for the group that is currently being aggregated.
		foundNonNullForCurrentGroup bool
	}
	overloadHelper overloadHelper
}

var _ aggregateFunc = &sumInt16HashAgg{}

func (a *sumInt16HashAgg) Init(groups []bool, vec coldata.Vec) {
	a.hashAggregateFuncBase.Init(groups, vec)
	a.scratch.vec = vec.Decimal()
	a.Reset()
}

func (a *sumInt16HashAgg) Reset() {
	a.hashAggregateFuncBase.Reset()
	a.scratch.foundNonNullForCurrentGroup = false
}

func (a *sumInt16HashAgg) Compute(
	vecs []coldata.Vec, inputIdxs []uint32, inputLen int, sel []int,
) {
	// In order to inline the templated code of overloads, we need to have a
	// "_overloadHelper" local variable of type "overloadHelper".
	_overloadHelper := a.overloadHelper
	vec := vecs[inputIdxs[0]]
	col, nulls := vec.Int16(), vec.Nulls()
	{
		sel = sel[:inputLen]
		if nulls.MaybeHasNulls() {
			for _, i := range sel {

				var isNull bool
				isNull = nulls.NullAt(i)
				if !isNull {

					{

						tmpDec := &_overloadHelper.tmpDec1
						tmpDec.SetInt64(int64(col[i]))
						if _, err := tree.ExactCtx.Add(&a.scratch.curAgg, &a.scratch.curAgg, tmpDec); err != nil {
							colexecerror.ExpectedError(err)
						}
					}

					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			for _, i := range sel {

				var isNull bool
				isNull = false
				if !isNull {

					{

						tmpDec := &_overloadHelper.tmpDec1
						tmpDec.SetInt64(int64(col[i]))
						if _, err := tree.ExactCtx.Add(&a.scratch.curAgg, &a.scratch.curAgg, tmpDec); err != nil {
							colexecerror.ExpectedError(err)
						}
					}

					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *sumInt16HashAgg) Flush(outputIdx int) {
	// The aggregation is finished. Flush the last value. If we haven't found
	// any non-nulls for this group so far, the output for this group should be
	// null.
	if !a.scratch.foundNonNullForCurrentGroup {
		a.nulls.SetNull(outputIdx)
	} else {
		a.scratch.vec[outputIdx] = a.scratch.curAgg
	}
}

type sumInt16HashAggAlloc struct {
	aggAllocBase
	aggFuncs []sumInt16HashAgg
}

var _ aggregateFuncAlloc = &sumInt16HashAggAlloc{}

const sizeOfSumInt16HashAgg = int64(unsafe.Sizeof(sumInt16HashAgg{}))
const sumInt16HashAggSliceOverhead = int64(unsafe.Sizeof([]sumInt16HashAgg{}))

func (a *sumInt16HashAggAlloc) newAggFunc() aggregateFunc {
	if len(a.aggFuncs) == 0 {
		a.allocator.AdjustMemoryUsage(sumInt16HashAggSliceOverhead + sizeOfSumInt16HashAgg*a.allocSize)
		a.aggFuncs = make([]sumInt16HashAgg, a.allocSize)
	}
	f := &a.aggFuncs[0]
	a.aggFuncs = a.aggFuncs[1:]
	return f
}

type sumInt32HashAgg struct {
	hashAggregateFuncBase
	scratch struct {
		// curAgg holds the running total, so we can index into the slice once per
		// group, instead of on each iteration.
		curAgg apd.Decimal
		// vec points to the output vector we are updating.
		vec []apd.Decimal
		// foundNonNullForCurrentGroup tracks if we have seen any non-null values
		// for the group that is currently being aggregated.
		foundNonNullForCurrentGroup bool
	}
	overloadHelper overloadHelper
}

var _ aggregateFunc = &sumInt32HashAgg{}

func (a *sumInt32HashAgg) Init(groups []bool, vec coldata.Vec) {
	a.hashAggregateFuncBase.Init(groups, vec)
	a.scratch.vec = vec.Decimal()
	a.Reset()
}

func (a *sumInt32HashAgg) Reset() {
	a.hashAggregateFuncBase.Reset()
	a.scratch.foundNonNullForCurrentGroup = false
}

func (a *sumInt32HashAgg) Compute(
	vecs []coldata.Vec, inputIdxs []uint32, inputLen int, sel []int,
) {
	// In order to inline the templated code of overloads, we need to have a
	// "_overloadHelper" local variable of type "overloadHelper".
	_overloadHelper := a.overloadHelper
	vec := vecs[inputIdxs[0]]
	col, nulls := vec.Int32(), vec.Nulls()
	{
		sel = sel[:inputLen]
		if nulls.MaybeHasNulls() {
			for _, i := range sel {

				var isNull bool
				isNull = nulls.NullAt(i)
				if !isNull {

					{

						tmpDec := &_overloadHelper.tmpDec1
						tmpDec.SetInt64(int64(col[i]))
						if _, err := tree.ExactCtx.Add(&a.scratch.curAgg, &a.scratch.curAgg, tmpDec); err != nil {
							colexecerror.ExpectedError(err)
						}
					}

					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			for _, i := range sel {

				var isNull bool
				isNull = false
				if !isNull {

					{

						tmpDec := &_overloadHelper.tmpDec1
						tmpDec.SetInt64(int64(col[i]))
						if _, err := tree.ExactCtx.Add(&a.scratch.curAgg, &a.scratch.curAgg, tmpDec); err != nil {
							colexecerror.ExpectedError(err)
						}
					}

					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *sumInt32HashAgg) Flush(outputIdx int) {
	// The aggregation is finished. Flush the last value. If we haven't found
	// any non-nulls for this group so far, the output for this group should be
	// null.
	if !a.scratch.foundNonNullForCurrentGroup {
		a.nulls.SetNull(outputIdx)
	} else {
		a.scratch.vec[outputIdx] = a.scratch.curAgg
	}
}

type sumInt32HashAggAlloc struct {
	aggAllocBase
	aggFuncs []sumInt32HashAgg
}

var _ aggregateFuncAlloc = &sumInt32HashAggAlloc{}

const sizeOfSumInt32HashAgg = int64(unsafe.Sizeof(sumInt32HashAgg{}))
const sumInt32HashAggSliceOverhead = int64(unsafe.Sizeof([]sumInt32HashAgg{}))

func (a *sumInt32HashAggAlloc) newAggFunc() aggregateFunc {
	if len(a.aggFuncs) == 0 {
		a.allocator.AdjustMemoryUsage(sumInt32HashAggSliceOverhead + sizeOfSumInt32HashAgg*a.allocSize)
		a.aggFuncs = make([]sumInt32HashAgg, a.allocSize)
	}
	f := &a.aggFuncs[0]
	a.aggFuncs = a.aggFuncs[1:]
	return f
}

type sumInt64HashAgg struct {
	hashAggregateFuncBase
	scratch struct {
		// curAgg holds the running total, so we can index into the slice once per
		// group, instead of on each iteration.
		curAgg apd.Decimal
		// vec points to the output vector we are updating.
		vec []apd.Decimal
		// foundNonNullForCurrentGroup tracks if we have seen any non-null values
		// for the group that is currently being aggregated.
		foundNonNullForCurrentGroup bool
	}
	overloadHelper overloadHelper
}

var _ aggregateFunc = &sumInt64HashAgg{}

func (a *sumInt64HashAgg) Init(groups []bool, vec coldata.Vec) {
	a.hashAggregateFuncBase.Init(groups, vec)
	a.scratch.vec = vec.Decimal()
	a.Reset()
}

func (a *sumInt64HashAgg) Reset() {
	a.hashAggregateFuncBase.Reset()
	a.scratch.foundNonNullForCurrentGroup = false
}

func (a *sumInt64HashAgg) Compute(
	vecs []coldata.Vec, inputIdxs []uint32, inputLen int, sel []int,
) {
	// In order to inline the templated code of overloads, we need to have a
	// "_overloadHelper" local variable of type "overloadHelper".
	_overloadHelper := a.overloadHelper
	vec := vecs[inputIdxs[0]]
	col, nulls := vec.Int64(), vec.Nulls()
	{
		sel = sel[:inputLen]
		if nulls.MaybeHasNulls() {
			for _, i := range sel {

				var isNull bool
				isNull = nulls.NullAt(i)
				if !isNull {

					{

						tmpDec := &_overloadHelper.tmpDec1
						tmpDec.SetInt64(int64(col[i]))
						if _, err := tree.ExactCtx.Add(&a.scratch.curAgg, &a.scratch.curAgg, tmpDec); err != nil {
							colexecerror.ExpectedError(err)
						}
					}

					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			for _, i := range sel {

				var isNull bool
				isNull = false
				if !isNull {

					{

						tmpDec := &_overloadHelper.tmpDec1
						tmpDec.SetInt64(int64(col[i]))
						if _, err := tree.ExactCtx.Add(&a.scratch.curAgg, &a.scratch.curAgg, tmpDec); err != nil {
							colexecerror.ExpectedError(err)
						}
					}

					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *sumInt64HashAgg) Flush(outputIdx int) {
	// The aggregation is finished. Flush the last value. If we haven't found
	// any non-nulls for this group so far, the output for this group should be
	// null.
	if !a.scratch.foundNonNullForCurrentGroup {
		a.nulls.SetNull(outputIdx)
	} else {
		a.scratch.vec[outputIdx] = a.scratch.curAgg
	}
}

type sumInt64HashAggAlloc struct {
	aggAllocBase
	aggFuncs []sumInt64HashAgg
}

var _ aggregateFuncAlloc = &sumInt64HashAggAlloc{}

const sizeOfSumInt64HashAgg = int64(unsafe.Sizeof(sumInt64HashAgg{}))
const sumInt64HashAggSliceOverhead = int64(unsafe.Sizeof([]sumInt64HashAgg{}))

func (a *sumInt64HashAggAlloc) newAggFunc() aggregateFunc {
	if len(a.aggFuncs) == 0 {
		a.allocator.AdjustMemoryUsage(sumInt64HashAggSliceOverhead + sizeOfSumInt64HashAgg*a.allocSize)
		a.aggFuncs = make([]sumInt64HashAgg, a.allocSize)
	}
	f := &a.aggFuncs[0]
	a.aggFuncs = a.aggFuncs[1:]
	return f
}

type sumDecimalHashAgg struct {
	hashAggregateFuncBase
	scratch struct {
		// curAgg holds the running total, so we can index into the slice once per
		// group, instead of on each iteration.
		curAgg apd.Decimal
		// vec points to the output vector we are updating.
		vec []apd.Decimal
		// foundNonNullForCurrentGroup tracks if we have seen any non-null values
		// for the group that is currently being aggregated.
		foundNonNullForCurrentGroup bool
	}
}

var _ aggregateFunc = &sumDecimalHashAgg{}

func (a *sumDecimalHashAgg) Init(groups []bool, vec coldata.Vec) {
	a.hashAggregateFuncBase.Init(groups, vec)
	a.scratch.vec = vec.Decimal()
	a.Reset()
}

func (a *sumDecimalHashAgg) Reset() {
	a.hashAggregateFuncBase.Reset()
	a.scratch.foundNonNullForCurrentGroup = false
}

func (a *sumDecimalHashAgg) Compute(
	vecs []coldata.Vec, inputIdxs []uint32, inputLen int, sel []int,
) {
	vec := vecs[inputIdxs[0]]
	col, nulls := vec.Decimal(), vec.Nulls()
	{
		sel = sel[:inputLen]
		if nulls.MaybeHasNulls() {
			for _, i := range sel {

				var isNull bool
				isNull = nulls.NullAt(i)
				if !isNull {

					{

						_, err := tree.ExactCtx.Add(&a.scratch.curAgg, &a.scratch.curAgg, &col[i])
						if err != nil {
							colexecerror.ExpectedError(err)
						}
					}

					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			for _, i := range sel {

				var isNull bool
				isNull = false
				if !isNull {

					{

						_, err := tree.ExactCtx.Add(&a.scratch.curAgg, &a.scratch.curAgg, &col[i])
						if err != nil {
							colexecerror.ExpectedError(err)
						}
					}

					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *sumDecimalHashAgg) Flush(outputIdx int) {
	// The aggregation is finished. Flush the last value. If we haven't found
	// any non-nulls for this group so far, the output for this group should be
	// null.
	if !a.scratch.foundNonNullForCurrentGroup {
		a.nulls.SetNull(outputIdx)
	} else {
		a.scratch.vec[outputIdx] = a.scratch.curAgg
	}
}

type sumDecimalHashAggAlloc struct {
	aggAllocBase
	aggFuncs []sumDecimalHashAgg
}

var _ aggregateFuncAlloc = &sumDecimalHashAggAlloc{}

const sizeOfSumDecimalHashAgg = int64(unsafe.Sizeof(sumDecimalHashAgg{}))
const sumDecimalHashAggSliceOverhead = int64(unsafe.Sizeof([]sumDecimalHashAgg{}))

func (a *sumDecimalHashAggAlloc) newAggFunc() aggregateFunc {
	if len(a.aggFuncs) == 0 {
		a.allocator.AdjustMemoryUsage(sumDecimalHashAggSliceOverhead + sizeOfSumDecimalHashAgg*a.allocSize)
		a.aggFuncs = make([]sumDecimalHashAgg, a.allocSize)
	}
	f := &a.aggFuncs[0]
	a.aggFuncs = a.aggFuncs[1:]
	return f
}

type sumFloat64HashAgg struct {
	hashAggregateFuncBase
	scratch struct {
		// curAgg holds the running total, so we can index into the slice once per
		// group, instead of on each iteration.
		curAgg float64
		// vec points to the output vector we are updating.
		vec []float64
		// foundNonNullForCurrentGroup tracks if we have seen any non-null values
		// for the group that is currently being aggregated.
		foundNonNullForCurrentGroup bool
	}
}

var _ aggregateFunc = &sumFloat64HashAgg{}

func (a *sumFloat64HashAgg) Init(groups []bool, vec coldata.Vec) {
	a.hashAggregateFuncBase.Init(groups, vec)
	a.scratch.vec = vec.Float64()
	a.Reset()
}

func (a *sumFloat64HashAgg) Reset() {
	a.hashAggregateFuncBase.Reset()
	a.scratch.foundNonNullForCurrentGroup = false
}

func (a *sumFloat64HashAgg) Compute(
	vecs []coldata.Vec, inputIdxs []uint32, inputLen int, sel []int,
) {
	vec := vecs[inputIdxs[0]]
	col, nulls := vec.Float64(), vec.Nulls()
	{
		sel = sel[:inputLen]
		if nulls.MaybeHasNulls() {
			for _, i := range sel {

				var isNull bool
				isNull = nulls.NullAt(i)
				if !isNull {

					{

						a.scratch.curAgg = float64(a.scratch.curAgg) + float64(col[i])
					}

					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			for _, i := range sel {

				var isNull bool
				isNull = false
				if !isNull {

					{

						a.scratch.curAgg = float64(a.scratch.curAgg) + float64(col[i])
					}

					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *sumFloat64HashAgg) Flush(outputIdx int) {
	// The aggregation is finished. Flush the last value. If we haven't found
	// any non-nulls for this group so far, the output for this group should be
	// null.
	if !a.scratch.foundNonNullForCurrentGroup {
		a.nulls.SetNull(outputIdx)
	} else {
		a.scratch.vec[outputIdx] = a.scratch.curAgg
	}
}

type sumFloat64HashAggAlloc struct {
	aggAllocBase
	aggFuncs []sumFloat64HashAgg
}

var _ aggregateFuncAlloc = &sumFloat64HashAggAlloc{}

const sizeOfSumFloat64HashAgg = int64(unsafe.Sizeof(sumFloat64HashAgg{}))
const sumFloat64HashAggSliceOverhead = int64(unsafe.Sizeof([]sumFloat64HashAgg{}))

func (a *sumFloat64HashAggAlloc) newAggFunc() aggregateFunc {
	if len(a.aggFuncs) == 0 {
		a.allocator.AdjustMemoryUsage(sumFloat64HashAggSliceOverhead + sizeOfSumFloat64HashAgg*a.allocSize)
		a.aggFuncs = make([]sumFloat64HashAgg, a.allocSize)
	}
	f := &a.aggFuncs[0]
	a.aggFuncs = a.aggFuncs[1:]
	return f
}

type sumIntervalHashAgg struct {
	hashAggregateFuncBase
	scratch struct {
		// curAgg holds the running total, so we can index into the slice once per
		// group, instead of on each iteration.
		curAgg duration.Duration
		// vec points to the output vector we are updating.
		vec []duration.Duration
		// foundNonNullForCurrentGroup tracks if we have seen any non-null values
		// for the group that is currently being aggregated.
		foundNonNullForCurrentGroup bool
	}
}

var _ aggregateFunc = &sumIntervalHashAgg{}

func (a *sumIntervalHashAgg) Init(groups []bool, vec coldata.Vec) {
	a.hashAggregateFuncBase.Init(groups, vec)
	a.scratch.vec = vec.Interval()
	a.Reset()
}

func (a *sumIntervalHashAgg) Reset() {
	a.hashAggregateFuncBase.Reset()
	a.scratch.foundNonNullForCurrentGroup = false
}

func (a *sumIntervalHashAgg) Compute(
	vecs []coldata.Vec, inputIdxs []uint32, inputLen int, sel []int,
) {
	vec := vecs[inputIdxs[0]]
	col, nulls := vec.Interval(), vec.Nulls()
	{
		sel = sel[:inputLen]
		if nulls.MaybeHasNulls() {
			for _, i := range sel {

				var isNull bool
				isNull = nulls.NullAt(i)
				if !isNull {
					a.scratch.curAgg = a.scratch.curAgg.Add(col[i])
					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		} else {
			for _, i := range sel {

				var isNull bool
				isNull = false
				if !isNull {
					a.scratch.curAgg = a.scratch.curAgg.Add(col[i])
					a.scratch.foundNonNullForCurrentGroup = true
				}
			}
		}
	}
}

func (a *sumIntervalHashAgg) Flush(outputIdx int) {
	// The aggregation is finished. Flush the last value. If we haven't found
	// any non-nulls for this group so far, the output for this group should be
	// null.
	if !a.scratch.foundNonNullForCurrentGroup {
		a.nulls.SetNull(outputIdx)
	} else {
		a.scratch.vec[outputIdx] = a.scratch.curAgg
	}
}

type sumIntervalHashAggAlloc struct {
	aggAllocBase
	aggFuncs []sumIntervalHashAgg
}

var _ aggregateFuncAlloc = &sumIntervalHashAggAlloc{}

const sizeOfSumIntervalHashAgg = int64(unsafe.Sizeof(sumIntervalHashAgg{}))
const sumIntervalHashAggSliceOverhead = int64(unsafe.Sizeof([]sumIntervalHashAgg{}))

func (a *sumIntervalHashAggAlloc) newAggFunc() aggregateFunc {
	if len(a.aggFuncs) == 0 {
		a.allocator.AdjustMemoryUsage(sumIntervalHashAggSliceOverhead + sizeOfSumIntervalHashAgg*a.allocSize)
		a.aggFuncs = make([]sumIntervalHashAgg, a.allocSize)
	}
	f := &a.aggFuncs[0]
	a.aggFuncs = a.aggFuncs[1:]
	return f
}
