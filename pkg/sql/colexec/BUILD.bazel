load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
load(":COLEXEC.bzl", "generate", "generate_like_ops")

go_library(
    name = "colexec",
    srcs = [
        "aggregators_util.go",
        "bool_vec_to_sel.go",
        "buffer.go",
        "builtin_funcs.go",
        "cancel_checker.go",
        "case.go",
        "columnarizer.go",
        "constants.go",
        "count.go",
        "deselector.go",
        "disk_spiller.go",
        "expr.go",
        "external_hash_joiner.go",
        "external_sort.go",
        "fn_op.go",
        "hash.go",
        "hash_aggregator.go",
        "hash_utils.go",
        "hashjoiner.go",
        "hashtable.go",
        "invariants_checker.go",
        "like_ops.go",
        "limit.go",
        "materializer.go",
        "mergejoiner.go",
        "mergejoiner_util.go",
        "offset.go",
        "one_shot.go",
        "op_creation.go",
        "operator.go",
        "ordered_aggregator.go",
        "ordinality.go",
        "panic_injector.go",
        "parallel_unordered_synchronizer.go",
        "partially_ordered_distinct.go",
        "partitioner.go",
        "routers.go",
        "serial_unordered_synchronizer.go",
        "simple_project.go",
        "sort.go",
        "sort_chunks.go",
        "sorttopk.go",
        "spilling_queue.go",
        "stats.go",
        "tuple_proj_op.go",
        "unordered_distinct.go",
        "utils.go",
        ":gen-exec",  # keep
    ],
    importpath = "github.com/cockroachdb/cockroach/pkg/sql/colexec",
    visibility = ["//visibility:public"],
    # Pin the dependencies used in auto-generated code.
    deps = [
        "//pkg/col/coldata",
        "//pkg/col/coldataext",  # keep
        "//pkg/col/typeconv",
        "//pkg/server/telemetry",  # keep
        "//pkg/sql/catalog/colinfo",  # keep
        "//pkg/sql/catalog/descpb",
        "//pkg/sql/colcontainer",
        "//pkg/sql/colconv",
        "//pkg/sql/colexec/colexecagg",  # keep
        "//pkg/sql/colexec/execgen",  # keep
        "//pkg/sql/colexecbase",
        "//pkg/sql/colexecbase/colexecerror",
        "//pkg/sql/colmem",
        "//pkg/sql/execinfra",
        "//pkg/sql/execinfrapb",
        "//pkg/sql/parser",
        "//pkg/sql/rowenc",
        "//pkg/sql/sem/tree",
        "//pkg/sql/sqlerrors",
        "//pkg/sql/sqltelemetry",  # keep
        "//pkg/sql/types",
        "//pkg/util/cancelchecker",
        "//pkg/util/duration",  # keep
        "//pkg/util/encoding",  # keep
        "//pkg/util/log",
        "//pkg/util/mon",
        "//pkg/util/randutil",
        "//pkg/util/stringarena",
        "//pkg/util/syncutil",
        "//pkg/util/timeutil",
        "//pkg/util/tracing",
        "//vendor/github.com/cockroachdb/apd/v2:apd",  # keep
        "//vendor/github.com/cockroachdb/errors",
        "//vendor/github.com/marusama/semaphore",
    ],
)

go_test(
    name = "colexec_test",
    srcs = [
        "aggregators_test.go",
        "and_or_projection_test.go",
        "bool_vec_to_sel_test.go",
        "buffer_test.go",
        "builtin_funcs_test.go",
        "cancel_checker_test.go",
        "case_test.go",
        "cast_test.go",
        "columnarizer_test.go",
        "const_test.go",
        "count_test.go",
        "default_agg_test.go",
        "default_cmp_op_test.go",
        "dep_test.go",
        "deselector_test.go",
        "distinct_test.go",
        "external_hash_joiner_test.go",
        "external_sort_test.go",
        "hash_utils_test.go",
        "hashjoiner_test.go",
        "inject_setup_test.go",
        "is_null_ops_test.go",
        "like_ops_test.go",
        "limit_test.go",
        "main_test.go",
        "materializer_test.go",
        "mergejoiner_test.go",
        "offset_test.go",
        "ordered_synchronizer_test.go",
        "ordinality_test.go",
        "parallel_unordered_synchronizer_test.go",
        "projection_ops_test.go",
        "routers_test.go",
        "rowstovec_test.go",
        "select_in_test.go",
        "selection_ops_test.go",
        "serial_unordered_synchronizer_test.go",
        "simple_project_test.go",
        "sort_chunks_test.go",
        "sort_test.go",
        "sorttopk_test.go",
        "spilling_queue_test.go",
        "stats_test.go",
        "types_integration_test.go",
        "utils_test.go",
        "window_functions_test.go",
    ],
    embed = [":colexec"],
    deps = [
        "//pkg/col/coldata",
        "//pkg/col/coldataext",
        "//pkg/col/coldatatestutils",
        "//pkg/col/colserde",
        "//pkg/col/typeconv",
        "//pkg/settings/cluster",
        "//pkg/sql/catalog/colinfo",
        "//pkg/sql/catalog/descpb",
        "//pkg/sql/colcontainer",
        "//pkg/sql/colconv",
        "//pkg/sql/colexec/colbuilder",
        "//pkg/sql/colexec/colexecagg",
        "//pkg/sql/colexec/execgen",
        "//pkg/sql/colexecbase",
        "//pkg/sql/colexecbase/colexecerror",
        "//pkg/sql/colmem",
        "//pkg/sql/execinfra",
        "//pkg/sql/execinfrapb",
        "//pkg/sql/parser",
        "//pkg/sql/rowenc",
        "//pkg/sql/rowexec",
        "//pkg/sql/sem/builtins",
        "//pkg/sql/sem/tree",
        "//pkg/sql/types",
        "//pkg/testutils",
        "//pkg/testutils/buildutil",
        "//pkg/testutils/colcontainerutils",
        "//pkg/testutils/distsqlutils",
        "//pkg/testutils/skip",
        "//pkg/util/cancelchecker",
        "//pkg/util/duration",
        "//pkg/util/encoding",
        "//pkg/util/envutil",
        "//pkg/util/humanizeutil",
        "//pkg/util/json",
        "//pkg/util/leaktest",
        "//pkg/util/log",
        "//pkg/util/mon",
        "//pkg/util/randutil",
        "//pkg/util/syncutil",
        "//pkg/util/timeofday",
        "//pkg/util/timeutil",
        "//pkg/util/timeutil/pgdate",
        "//vendor/github.com/apache/arrow/go/arrow/array",
        "//vendor/github.com/cockroachdb/apd/v2:apd",
        "//vendor/github.com/cockroachdb/errors",
        "//vendor/github.com/marusama/semaphore",
        "//vendor/github.com/pmezard/go-difflib/difflib",
        "//vendor/github.com/stretchr/testify/assert",
        "//vendor/github.com/stretchr/testify/require",
    ],
)

# Define a file group for all the .eg.go targets.
filegroup(
    name = "gen-exec",
    srcs = [
        ":gen-and-or-projection",
        ":gen-cast",
        ":gen-const",
        ":gen-default-cmp-expr",
        ":gen-default-cmp-proj-ops",
        ":gen-default-cmp-sel-ops",
        ":gen-distinct",
        ":gen-hash-aggregator",
        ":gen-hash-utils",
        ":gen-hashjoiner",
        ":gen-hashtable-distinct",
        ":gen-hashtable-full-default",
        ":gen-hashtable-full-deleting",
        ":gen-is-null-ops",
        ":gen-like-ops",
        ":gen-mergejoinbase",
        ":gen-mergejoiner-exceptall",
        ":gen-mergejoiner-fullouter",
        ":gen-mergejoiner-inner",
        ":gen-mergejoiner-intersectall",
        ":gen-mergejoiner-leftanti",
        ":gen-mergejoiner-leftouter",
        ":gen-mergejoiner-leftsemi",
        ":gen-mergejoiner-rightanti",
        ":gen-mergejoiner-rightouter",
        ":gen-mergejoiner-rightsemi",
        ":gen-ordered-synchronizer",
        ":gen-proj-const-left-ops",
        ":gen-proj-const-right-ops",
        ":gen-proj-non-const-ops",
        ":gen-quicksort",
        ":gen-rank",
        ":gen-relative-rank",
        ":gen-row-number",
        ":gen-rowstovec",
        ":gen-select-in",
        ":gen-selection-ops",
        ":gen-sort",
        ":gen-substring",
        ":gen-values-differ",
        ":gen-vec-comparators",
        ":gen-window-peer-grouper",
    ],
)

alias(
    name = "execgen",
    actual = "//pkg/sql/colexec/execgen/cmd/execgen",
)

alias(
    name = "goimports",
    actual = "//vendor/github.com/cockroachdb/gostdlib/x/tools/cmd/goimports",
)

generate(
    name = "gen-and-or-projection",
    output = "and_or_projection.eg.go",
    template = "and_or_projection_tmpl.go",
)

generate(
    name = "gen-cast",
    output = "cast.eg.go",
    template = "cast_tmpl.go",
)

generate(
    name = "gen-const",
    output = "const.eg.go",
    template = "const_tmpl.go",
)

generate(
    name = "gen-default-cmp-expr",
    output = "default_cmp_expr.eg.go",
    template = "default_cmp_expr_tmpl.go",
)

generate(
    name = "gen-default-cmp-proj-ops",
    output = "default_cmp_proj_ops.eg.go",
    template = "default_cmp_proj_ops_tmpl.go",
)

generate(
    name = "gen-default-cmp-sel-ops",
    output = "default_cmp_sel_ops.eg.go",
    template = "default_cmp_sel_ops_tmpl.go",
)

generate(
    name = "gen-distinct",
    output = "distinct.eg.go",
    template = "distinct_tmpl.go",
)

generate(
    name = "gen-hash-aggregator",
    output = "hash_aggregator.eg.go",
    template = "hash_aggregator_tmpl.go",
)

generate(
    name = "gen-hash-utils",
    output = "hash_utils.eg.go",
    template = "hash_utils_tmpl.go",
)

generate(
    name = "gen-hashjoiner",
    output = "hashjoiner.eg.go",
    template = "hashjoiner_tmpl.go",
)

generate(
    name = "gen-hashtable-distinct",
    output = "hashtable_distinct.eg.go",
    template = "hashtable_tmpl.go",
)

generate(
    name = "gen-hashtable-full-default",
    output = "hashtable_full_default.eg.go",
    template = "hashtable_tmpl.go",
)

generate(
    name = "gen-hashtable-full-deleting",
    output = "hashtable_full_deleting.eg.go",
    template = "hashtable_tmpl.go",
)

generate(
    name = "gen-is-null-ops",
    output = "is_null_ops.eg.go",
    template = "is_null_ops_tmpl.go",
)

generate(
    name = "gen-mergejoinbase",
    output = "mergejoinbase.eg.go",
    template = "mergejoinbase_tmpl.go",
)

generate(
    name = "gen-mergejoiner-exceptall",
    output = "mergejoiner_exceptall.eg.go",
    template = "mergejoiner_tmpl.go",
)

generate(
    name = "gen-mergejoiner-fullouter",
    output = "mergejoiner_fullouter.eg.go",
    template = "mergejoiner_tmpl.go",
)

generate(
    name = "gen-mergejoiner-inner",
    output = "mergejoiner_inner.eg.go",
    template = "mergejoiner_tmpl.go",
)

generate(
    name = "gen-mergejoiner-intersectall",
    output = "mergejoiner_intersectall.eg.go",
    template = "mergejoiner_tmpl.go",
)

generate(
    name = "gen-mergejoiner-leftanti",
    output = "mergejoiner_leftanti.eg.go",
    template = "mergejoiner_tmpl.go",
)

generate(
    name = "gen-mergejoiner-leftouter",
    output = "mergejoiner_leftouter.eg.go",
    template = "mergejoiner_tmpl.go",
)

generate(
    name = "gen-mergejoiner-leftsemi",
    output = "mergejoiner_leftsemi.eg.go",
    template = "mergejoiner_tmpl.go",
)

generate(
    name = "gen-mergejoiner-rightanti",
    output = "mergejoiner_rightanti.eg.go",
    template = "mergejoiner_tmpl.go",
)

generate(
    name = "gen-mergejoiner-rightouter",
    output = "mergejoiner_rightouter.eg.go",
    template = "mergejoiner_tmpl.go",
)

generate(
    name = "gen-mergejoiner-rightsemi",
    output = "mergejoiner_rightsemi.eg.go",
    template = "mergejoiner_tmpl.go",
)

generate(
    name = "gen-ordered-synchronizer",
    output = "ordered_synchronizer.eg.go",
    template = "ordered_synchronizer_tmpl.go",
)

generate(
    name = "gen-proj-const-left-ops",
    output = "proj_const_left_ops.eg.go",
    template = "proj_const_ops_tmpl.go",
)

generate(
    name = "gen-proj-const-right-ops",
    output = "proj_const_right_ops.eg.go",
    template = "proj_const_ops_tmpl.go",
)

generate(
    name = "gen-proj-non-const-ops",
    output = "proj_non_const_ops.eg.go",
    template = "proj_non_const_ops_tmpl.go",
)

generate(
    name = "gen-quicksort",
    output = "quicksort.eg.go",
    template = "quicksort_tmpl.go",
)

generate(
    name = "gen-rank",
    output = "rank.eg.go",
    template = "rank_tmpl.go",
)

generate(
    name = "gen-relative-rank",
    output = "relative_rank.eg.go",
    template = "relative_rank_tmpl.go",
)

generate(
    name = "gen-row-number",
    output = "row_number.eg.go",
    template = "row_number_tmpl.go",
)

generate(
    name = "gen-rowstovec",
    output = "rowstovec.eg.go",
    template = "rowstovec_tmpl.go",
)

generate(
    name = "gen-select-in",
    output = "select_in.eg.go",
    template = "select_in_tmpl.go",
)

generate(
    name = "gen-selection-ops",
    output = "selection_ops.eg.go",
    template = "selection_ops_tmpl.go",
)

generate(
    name = "gen-sort",
    output = "sort.eg.go",
    template = "sort_tmpl.go",
)

generate(
    name = "gen-substring",
    output = "substring.eg.go",
    template = "substring_tmpl.go",
)

generate(
    name = "gen-values-differ",
    output = "values_differ.eg.go",
    template = "values_differ_tmpl.go",
)

generate(
    name = "gen-vec-comparators",
    output = "vec_comparators.eg.go",
    template = "vec_comparators_tmpl.go",
)

generate(
    name = "gen-window-peer-grouper",
    output = "window_peer_grouper.eg.go",
    template = "window_peer_grouper_tmpl.go",
)

generate_like_ops(
    name = "gen-like-ops",
    misc = ["proj_const_ops_tmpl.go"],
    output = "like_ops.eg.go",
    template = "selection_ops_tmpl.go",
)
