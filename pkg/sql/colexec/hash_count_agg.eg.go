// Code generated by execgen; DO NOT EDIT.
// Copyright 2018 The Cockroach Authors.
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package colexec

import (
	"unsafe"

	"github.com/cockroachdb/cockroach/pkg/col/coldata"
	"github.com/cockroachdb/cockroach/pkg/sql/colmem"
)

func newCountRowsHashAggAlloc(
	allocator *colmem.Allocator, allocSize int64,
) aggregateFuncAlloc {
	return &countRowsHashAggAlloc{aggAllocBase: aggAllocBase{
		allocator: allocator,
		allocSize: allocSize,
	}}
}

// countRowsHashAgg supports either COUNT(*) or COUNT(col) aggregate.
type countRowsHashAgg struct {
	vec    []int64
	nulls  *coldata.Nulls
	curIdx int
	curAgg int64
}

var _ aggregateFunc = &countRowsHashAgg{}

const sizeOfCountRowsHashAgg = int64(unsafe.Sizeof(countRowsHashAgg{}))

func (a *countRowsHashAgg) Init(groups []bool, vec coldata.Vec) {
	a.vec = vec.Int64()
	a.nulls = vec.Nulls()
	a.Reset()
}

func (a *countRowsHashAgg) Reset() {
	a.curIdx = 0
	a.curAgg = 0
	a.nulls.UnsetNulls()
}

func (a *countRowsHashAgg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *countRowsHashAgg) SetOutputIndex(idx int) {
	a.curIdx = idx
}

func (a *countRowsHashAgg) Compute(b coldata.Batch, inputIdxs []uint32) {
	inputLen := b.Length()
	sel := b.Selection()
	var i int

	{
		if sel != nil {
			for _, i = range sel[:inputLen] {

				var y int64
				y = int64(1)
				a.curAgg += y
			}
		} else {
			for i = 0; i < inputLen; i++ {

				var y int64
				y = int64(1)
				a.curAgg += y
			}
		}
	}
}

func (a *countRowsHashAgg) Flush() {
	a.vec[a.curIdx] = a.curAgg
	a.curIdx++
}

func (a *countRowsHashAgg) HandleEmptyInputScalar() {
	a.vec[0] = 0
}

type countRowsHashAggAlloc struct {
	aggAllocBase
	aggFuncs []countRowsHashAgg
}

var _ aggregateFuncAlloc = &countRowsHashAggAlloc{}

func (a *countRowsHashAggAlloc) newAggFunc() aggregateFunc {
	if len(a.aggFuncs) == 0 {
		a.allocator.AdjustMemoryUsage(sizeOfCountRowsHashAgg * a.allocSize)
		a.aggFuncs = make([]countRowsHashAgg, a.allocSize)
	}
	f := &a.aggFuncs[0]
	a.aggFuncs = a.aggFuncs[1:]
	return f
}

func newCountHashAggAlloc(
	allocator *colmem.Allocator, allocSize int64,
) aggregateFuncAlloc {
	return &countHashAggAlloc{aggAllocBase: aggAllocBase{
		allocator: allocator,
		allocSize: allocSize,
	}}
}

// countHashAgg supports either COUNT(*) or COUNT(col) aggregate.
type countHashAgg struct {
	vec    []int64
	nulls  *coldata.Nulls
	curIdx int
	curAgg int64
}

var _ aggregateFunc = &countHashAgg{}

const sizeOfCountHashAgg = int64(unsafe.Sizeof(countHashAgg{}))

func (a *countHashAgg) Init(groups []bool, vec coldata.Vec) {
	a.vec = vec.Int64()
	a.nulls = vec.Nulls()
	a.Reset()
}

func (a *countHashAgg) Reset() {
	a.curIdx = 0
	a.curAgg = 0
	a.nulls.UnsetNulls()
}

func (a *countHashAgg) CurrentOutputIndex() int {
	return a.curIdx
}

func (a *countHashAgg) SetOutputIndex(idx int) {
	a.curIdx = idx
}

func (a *countHashAgg) Compute(b coldata.Batch, inputIdxs []uint32) {
	inputLen := b.Length()
	sel := b.Selection()
	var i int

	// If this is a COUNT(col) aggregator and there are nulls in this batch,
	// we must check each value for nullity. Note that it is only legal to do a
	// COUNT aggregate on a single column.
	nulls := b.ColVec(int(inputIdxs[0])).Nulls()
	if nulls.MaybeHasNulls() {
		if sel != nil {
			for _, i = range sel[:inputLen] {

				var y int64
				y = int64(0)
				if !nulls.NullAt(i) {
					y = 1
				}
				a.curAgg += y
			}
		} else {
			for i = 0; i < inputLen; i++ {

				var y int64
				y = int64(0)
				if !nulls.NullAt(i) {
					y = 1
				}
				a.curAgg += y
			}
		}
	} else {
		if sel != nil {
			for _, i = range sel[:inputLen] {

				var y int64
				y = int64(1)
				a.curAgg += y
			}
		} else {
			for i = 0; i < inputLen; i++ {

				var y int64
				y = int64(1)
				a.curAgg += y
			}
		}
	}
}

func (a *countHashAgg) Flush() {
	a.vec[a.curIdx] = a.curAgg
	a.curIdx++
}

func (a *countHashAgg) HandleEmptyInputScalar() {
	a.vec[0] = 0
}

type countHashAggAlloc struct {
	aggAllocBase
	aggFuncs []countHashAgg
}

var _ aggregateFuncAlloc = &countHashAggAlloc{}

func (a *countHashAggAlloc) newAggFunc() aggregateFunc {
	if len(a.aggFuncs) == 0 {
		a.allocator.AdjustMemoryUsage(sizeOfCountHashAgg * a.allocSize)
		a.aggFuncs = make([]countHashAgg, a.allocSize)
	}
	f := &a.aggFuncs[0]
	a.aggFuncs = a.aggFuncs[1:]
	return f
}
