// Code generated by execgen; DO NOT EDIT.
// Copyright 2020 The Cockroach Authors.
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package colexec

import (
	"github.com/cockroachdb/cockroach/pkg/col/coldata"
	"github.com/cockroachdb/cockroach/pkg/sql/colexec/execerror"
)

// Dummy import to pull in "execerror" package.
var _ execerror.StorageError

func newBoolAndAgg() aggregateFunc {
	return &booleanAndAgg{}
}

type booleanAndAgg struct {
	done       bool
	sawNonNull bool

	groups []bool
	vec    []bool

	nulls  *coldata.Nulls
	curIdx int
	curAgg bool
}

func (b *booleanAndAgg) Init(groups []bool, vec coldata.Vec) {
	b.groups = groups
	b.vec = vec.Bool()
	b.nulls = vec.Nulls()
	b.Reset()
}

func (b *booleanAndAgg) Reset() {
	b.curIdx = -1
	b.nulls.UnsetNulls()
	b.done = false
	b.curAgg = true
}

func (b *booleanAndAgg) CurrentOutputIndex() int {
	return b.curIdx
}

func (b *booleanAndAgg) SetOutputIndex(idx int) {
	if b.curIdx != -1 {
		b.curIdx = idx
		b.nulls.UnsetNullsAfter(uint16(idx))
	}
}

func (b *booleanAndAgg) Compute(batch coldata.Batch, inputIdxs []uint32) {
	if b.done {
		return
	}
	inputLen := batch.Length()
	if inputLen == 0 {
		if !b.sawNonNull { // if we only have encountered null values so far
			b.nulls.SetNull(uint16(b.curIdx))
		} else {
			b.vec[b.curIdx] = b.curAgg
		}
		b.curIdx++
		b.done = true
		return
	}
	vec, sel := batch.ColVec(int(inputIdxs[0])), batch.Selection()
	col, nulls := vec.Bool(), vec.Nulls()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if b.groups[i] {
				if b.curIdx >= 0 {
					if !b.sawNonNull {
						b.nulls.SetNull(uint16(b.curIdx))
					} else {
						b.vec[b.curIdx] = b.curAgg
					}
				}
				b.curIdx++
				b.curAgg = true
				b.sawNonNull = false
			}
			isNull := nulls.NullAt(uint16(i))
			if !isNull {
				b.curAgg = b.curAgg && col[i]
				b.sawNonNull = true
			}

		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if b.groups[i] {
				if b.curIdx >= 0 {
					if !b.sawNonNull {
						b.nulls.SetNull(uint16(b.curIdx))
					} else {
						b.vec[b.curIdx] = b.curAgg
					}
				}
				b.curIdx++
				b.curAgg = true
				b.sawNonNull = false
			}
			isNull := nulls.NullAt(uint16(i))
			if !isNull {
				b.curAgg = b.curAgg && col[i]
				b.sawNonNull = true
			}

		}
	}
}

func (b *booleanAndAgg) HandleEmptyInputScalar() {
	b.nulls.SetNull(0)
}

func newBoolOrAgg() aggregateFunc {
	return &booleanOrAgg{}
}

type booleanOrAgg struct {
	done       bool
	sawNonNull bool

	groups []bool
	vec    []bool

	nulls  *coldata.Nulls
	curIdx int
	curAgg bool
}

func (b *booleanOrAgg) Init(groups []bool, vec coldata.Vec) {
	b.groups = groups
	b.vec = vec.Bool()
	b.nulls = vec.Nulls()
	b.Reset()
}

func (b *booleanOrAgg) Reset() {
	b.curIdx = -1
	b.nulls.UnsetNulls()
	b.done = false
	b.curAgg = false
}

func (b *booleanOrAgg) CurrentOutputIndex() int {
	return b.curIdx
}

func (b *booleanOrAgg) SetOutputIndex(idx int) {
	if b.curIdx != -1 {
		b.curIdx = idx
		b.nulls.UnsetNullsAfter(uint16(idx))
	}
}

func (b *booleanOrAgg) Compute(batch coldata.Batch, inputIdxs []uint32) {
	if b.done {
		return
	}
	inputLen := batch.Length()
	if inputLen == 0 {
		if !b.sawNonNull { // if we only have encountered null values so far
			b.nulls.SetNull(uint16(b.curIdx))
		} else {
			b.vec[b.curIdx] = b.curAgg
		}
		b.curIdx++
		b.done = true
		return
	}
	vec, sel := batch.ColVec(int(inputIdxs[0])), batch.Selection()
	col, nulls := vec.Bool(), vec.Nulls()
	if sel != nil {
		sel = sel[:inputLen]
		for _, i := range sel {
			if b.groups[i] {
				if b.curIdx >= 0 {
					if !b.sawNonNull {
						b.nulls.SetNull(uint16(b.curIdx))
					} else {
						b.vec[b.curIdx] = b.curAgg
					}
				}
				b.curIdx++
				b.curAgg = false
				b.sawNonNull = false
			}
			isNull := nulls.NullAt(uint16(i))
			if !isNull {
				b.curAgg = b.curAgg || col[i]
				b.sawNonNull = true
			}

		}
	} else {
		col = col[:inputLen]
		for i := range col {
			if b.groups[i] {
				if b.curIdx >= 0 {
					if !b.sawNonNull {
						b.nulls.SetNull(uint16(b.curIdx))
					} else {
						b.vec[b.curIdx] = b.curAgg
					}
				}
				b.curIdx++
				b.curAgg = false
				b.sawNonNull = false
			}
			isNull := nulls.NullAt(uint16(i))
			if !isNull {
				b.curAgg = b.curAgg || col[i]
				b.sawNonNull = true
			}

		}
	}
}

func (b *booleanOrAgg) HandleEmptyInputScalar() {
	b.nulls.SetNull(0)
}
