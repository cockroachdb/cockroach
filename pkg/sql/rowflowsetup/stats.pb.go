// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/rowflowsetup/stats.proto

package rowflowsetup

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// RouterOutputStats are the stats collected by a single router output stream.
type RouterOutputStats struct {
	NumRows          int64 `protobuf:"varint,1,opt,name=num_rows,json=numRows,proto3" json:"num_rows,omitempty"`
	MaxAllocatedMem  int64 `protobuf:"varint,2,opt,name=max_allocated_mem,json=maxAllocatedMem,proto3" json:"max_allocated_mem,omitempty"`
	MaxAllocatedDisk int64 `protobuf:"varint,3,opt,name=max_allocated_disk,json=maxAllocatedDisk,proto3" json:"max_allocated_disk,omitempty"`
}

func (m *RouterOutputStats) Reset()         { *m = RouterOutputStats{} }
func (m *RouterOutputStats) String() string { return proto.CompactTextString(m) }
func (*RouterOutputStats) ProtoMessage()    {}
func (*RouterOutputStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_stats_14d026f3cc298b5b, []int{0}
}
func (m *RouterOutputStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouterOutputStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *RouterOutputStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouterOutputStats.Merge(dst, src)
}
func (m *RouterOutputStats) XXX_Size() int {
	return m.Size()
}
func (m *RouterOutputStats) XXX_DiscardUnknown() {
	xxx_messageInfo_RouterOutputStats.DiscardUnknown(m)
}

var xxx_messageInfo_RouterOutputStats proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RouterOutputStats)(nil), "cockroach.sql.distsqlrun.RouterOutputStats")
}
func (m *RouterOutputStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouterOutputStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumRows != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.NumRows))
	}
	if m.MaxAllocatedMem != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.MaxAllocatedMem))
	}
	if m.MaxAllocatedDisk != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.MaxAllocatedDisk))
	}
	return i, nil
}

func encodeVarintStats(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RouterOutputStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumRows != 0 {
		n += 1 + sovStats(uint64(m.NumRows))
	}
	if m.MaxAllocatedMem != 0 {
		n += 1 + sovStats(uint64(m.MaxAllocatedMem))
	}
	if m.MaxAllocatedDisk != 0 {
		n += 1 + sovStats(uint64(m.MaxAllocatedDisk))
	}
	return n
}

func sovStats(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStats(x uint64) (n int) {
	return sovStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RouterOutputStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouterOutputStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouterOutputStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRows", wireType)
			}
			m.NumRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRows |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedMem", wireType)
			}
			m.MaxAllocatedMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllocatedMem |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedDisk", wireType)
			}
			m.MaxAllocatedDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllocatedDisk |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStats
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStats
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStats(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStats = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStats   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sql/rowflowsetup/stats.proto", fileDescriptor_stats_14d026f3cc298b5b) }

var fileDescriptor_stats_14d026f3cc298b5b = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xcf, 0xb1, 0x4a, 0xc4, 0x40,
	0x10, 0xc6, 0xf1, 0xac, 0x07, 0x2a, 0x8b, 0xa0, 0xb7, 0x58, 0x44, 0x91, 0x45, 0xac, 0x44, 0x24,
	0x29, 0x7c, 0x02, 0xc5, 0x56, 0x84, 0xd8, 0xd9, 0x84, 0x35, 0x59, 0xcf, 0x90, 0xdd, 0x4c, 0xb2,
	0x33, 0x4b, 0xee, 0x11, 0x2c, 0x7d, 0xac, 0x2b, 0xaf, 0xbc, 0x52, 0x93, 0x17, 0x91, 0x5b, 0x11,
	0x72, 0xdd, 0x30, 0xfc, 0xf8, 0xe0, 0xcf, 0x2f, 0xb0, 0x33, 0xa9, 0x83, 0xfe, 0xdd, 0x40, 0x8f,
	0x9a, 0x7c, 0x9b, 0x22, 0x29, 0xc2, 0xa4, 0x75, 0x40, 0x20, 0xe2, 0x02, 0x8a, 0xda, 0x81, 0x2a,
	0x3e, 0x12, 0xec, 0x4c, 0x52, 0x56, 0x48, 0xd8, 0x19, 0xe7, 0x9b, 0xf3, 0xd3, 0x05, 0x2c, 0x20,
	0xa0, 0x74, 0x7b, 0xfd, 0xf9, 0xab, 0x4f, 0xc6, 0xe7, 0x19, 0x78, 0xd2, 0xee, 0xd9, 0x53, 0xeb,
	0xe9, 0x65, 0xbb, 0x25, 0xce, 0xf8, 0x61, 0xe3, 0x6d, 0xee, 0xa0, 0xc7, 0x98, 0x5d, 0xb2, 0xeb,
	0x59, 0x76, 0xd0, 0x78, 0x9b, 0x41, 0x8f, 0xe2, 0x86, 0xcf, 0xad, 0x5a, 0xe6, 0xca, 0x18, 0x28,
	0x14, 0xe9, 0x32, 0xb7, 0xda, 0xc6, 0x7b, 0xc1, 0x1c, 0x5b, 0xb5, 0xbc, 0xff, 0xff, 0x3f, 0x69,
	0x2b, 0x6e, 0xb9, 0xd8, 0xb5, 0x65, 0x85, 0x75, 0x3c, 0x0b, 0xf8, 0x64, 0x8a, 0x1f, 0x2b, 0xac,
	0x1f, 0x92, 0xd5, 0x8f, 0x8c, 0x56, 0x83, 0x64, 0xeb, 0x41, 0xb2, 0xcd, 0x20, 0xd9, 0xf7, 0x20,
	0xd9, 0xd7, 0x28, 0xa3, 0xf5, 0x28, 0xa3, 0xcd, 0x28, 0xa3, 0xd7, 0xa3, 0x69, 0xf6, 0xdb, 0x7e,
	0x28, 0xb8, 0xfb, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x64, 0x12, 0x26, 0x11, 0x01, 0x00, 0x00,
}
