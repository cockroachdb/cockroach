// Copyright 2018 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.

package sql

import (
	"bytes"
	"context"
	"fmt"
	"time"

	"github.com/cockroachdb/cockroach/pkg/settings"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sqlbase"
	"github.com/cockroachdb/cockroach/pkg/util/log"
	"github.com/cockroachdb/cockroach/pkg/util/timeutil"
)

// logStatementsExecuteEnabled causes the Executor to log executed
// statements and, if any, resulting errors.
var logStatementsExecuteEnabled = settings.RegisterBoolSetting(
	"sql.trace.log_statement_execute",
	"set to true to enable logging of executed statements",
	false,
)

var splitExecLog = settings.RegisterBoolSetting("sql.trace.log_statement_execute.split",
	"if set, the execution log enabled by sql.trace.log_statement_execute or vmodule will also go to separate log files", false)

// maybeLogStatement conditionally records the current statemenbt
// (p.curPlan) to the exec / audit logs.
func (p *planner) maybeLogStatement(ctx context.Context, lbl string, rows int, err error) {
	p.maybeLogStatementInternal(
		ctx, lbl, rows, err, p.statsCollector.PhaseTimes()[sessionStartParse])
}

func (p *planner) maybeLogStatementInternal(
	ctx context.Context,
	lbl string,
	rows int,
	err error,
	startTime time.Time,
) {
	// Note: if you find the code below crashing because p.execCfg == nil,
	// do not add a test "if p.execCfg == nil { do nothing }" !
	// Instead, make the logger work. This is critical for auditing - we
	// can't miss any statement.

	s := &p.sessionDataMutator

	// We'll want to share the overhead of generating the statement and
	// placeholders string below.
	var stmtStr string
	var plStr string

	// Are we emitting to the audit log?
	if len(p.curPlan.auditEvents) != 0 {
		// For the audit log, we log:
		// - the label "audit";
		// - the application name;
		// - the list of tables that have triggered the audit event;
		// - the full statement, the placeholder values if any;
		// - result row count;
		// - "OK" or "ERROR" depending on whether an error occurred.
		var buf bytes.Buffer
		sep := ""
		for _, ev := range p.curPlan.auditEvents {
			mode := "READ"
			if ev.writing {
				mode = "READWRITE"
			}
			fmt.Fprintf(&buf, "%s%q[%d]:%s", sep, ev.desc.GetName(), ev.desc.GetID(), mode)
			sep = ", "
		}
		ok := "OK"
		if err != nil {
			ok = "ERROR"
		}
		appName := s.ApplicationName()
		// We log the full statement even though this may expose PII to
		// the audit log, because during an audit it is important to
		// determine how much information was leaked and what information
		// was leaked.
		stmtStr = p.curPlan.AST.String()
		plStr = p.extendedEvalCtx.Placeholders.Values.String()

		// The string fields below are quoted to facilitate parsing,
		// except for the placeholder string which already contains
		// quoted strings.

		logger := p.execCfg.AuditLogger
		logger.Logf(ctx, "audit %q %s %q %s %d %s",
			appName, buf.String(), stmtStr, plStr, rows, ok)
	}

	// Are we emitting to the execution log?
	if log.V(2) || logStatementsExecuteEnabled.Get(&s.settings.SV) {
		logger := p.execCfg.ExecLogger

		// For the execution log, we log:
		// - a label about the caller;
		// - the application name;
		// - the full statement, the placeholder values if any,
		// - time elapsed so far (milliseconds),
		// - result row count,
		// - if an error occurred, the full text of the error.
		appName := s.ApplicationName()
		if len(stmtStr) == 0 {
			// Not yet generated by the audit log above; do it here.
			stmtStr = p.curPlan.AST.String()
			plStr = p.extendedEvalCtx.Placeholders.Values.String()
		}
		age := float64(timeutil.Now().Sub(startTime).Nanoseconds()) / 1e6
		errStr := ""
		if err != nil {
			errStr = err.Error()
		}

		// The string fields below are quoted to facilitate parsing,
		// except for the placeholder string which already contains
		// quoted strings.

		if splitExecLog.Get(&s.settings.SV) {
			logger.Logf(ctx, "%s %q %q %s %.3f %d %q", lbl, appName, stmtStr, plStr, age, rows, errStr)
		} else {
			// Copy to the main log.
			log.VEventf(ctx, 2, "%s %q %q %s %.3f %d %q", lbl, appName, stmtStr, plStr, age, rows, errStr)
		}
	}
}

// maybeAudit marks the current plan being constructed as flagged
// for auditing if the table being touched has an auditing mode set.
// This is later picked up by maybeLogStatement() above.
//
// It is crucial that this gets checked reliably -- we don't want to
// miss any statements! For now, we call this from CheckPrivilege(),
// as this is the function most likely to be called reliably from any
// caller that also uses a descriptor. Future changes that move the
// call to this method elsewhere must find a way to ensure that
// contributors who later add features do not have to remember to call
// this to get it right.
func (p *planner) maybeAudit(desc sqlbase.DescriptorProto, priv privilege.Kind) {
	wantedMode := desc.GetAuditMode()
	if wantedMode == sqlbase.TableDescriptor_DISABLED {
		return
	}

	switch priv {
	case privilege.INSERT, privilege.DELETE, privilege.UPDATE:
		p.curPlan.auditEvents = append(p.curPlan.auditEvents, auditEvent{desc: desc, writing: true})
	default:
		p.curPlan.auditEvents = append(p.curPlan.auditEvents, auditEvent{desc: desc, writing: false})
	}
}

// auditEvent represents an audit event for a single table.
type auditEvent struct {
	// The descriptor being audited.
	desc sqlbase.DescriptorProto
	// Whether the event was for INSERT/DELETE/UPDATE.
	writing bool
}
