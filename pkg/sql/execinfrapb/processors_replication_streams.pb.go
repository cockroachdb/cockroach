// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/execinfrapb/processors_replication_streams.proto

// Beware! This package name must not be changed, even though it doesn't match
// the Go package name, because it defines the Protobuf message names which
// can't be changed without breaking backward compatibility.

package execinfrapb

import (
	fmt "fmt"
	_ "github.com/cockroachdb/cockroach/pkg/jobs/jobspb"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	util "github.com/cockroachdb/cockroach/pkg/util"
	hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StreamPartitionProcessorSpec is the specification for a processor that streams
// changes for a partition of a stream replication.
type StreamPartitionProcessorSpec struct {
	// Initial resolved timestamp to start the replication from
	InitialResolved hlc.Timestamp `protobuf:"bytes,1,opt,name=initial_resolved,json=initialResolved" json:"initial_resolved"`
	// Spans tracked by this stream processor
	TrackedSpans []roachpb.Span `protobuf:"bytes,2,rep,name=tracked_spans,json=trackedSpans" json:"tracked_spans"`
	// ID of the replication stream
	StreamID int64 `protobuf:"varint,4,opt,name=stream_id,json=streamId" json:"stream_id"`
}

func (m *StreamPartitionProcessorSpec) Reset()         { *m = StreamPartitionProcessorSpec{} }
func (m *StreamPartitionProcessorSpec) String() string { return proto.CompactTextString(m) }
func (*StreamPartitionProcessorSpec) ProtoMessage()    {}
func (*StreamPartitionProcessorSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_c77aa03d139763a6, []int{0}
}
func (m *StreamPartitionProcessorSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamPartitionProcessorSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StreamPartitionProcessorSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamPartitionProcessorSpec.Merge(m, src)
}
func (m *StreamPartitionProcessorSpec) XXX_Size() int {
	return m.Size()
}
func (m *StreamPartitionProcessorSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamPartitionProcessorSpec.DiscardUnknown(m)
}

var xxx_messageInfo_StreamPartitionProcessorSpec proto.InternalMessageInfo

type ReplicationStreamSpec struct {
	PartitionSpecs []*ReplicationStreamSpec_PartitionSpec `protobuf:"bytes,1,rep,name=partition_specs,json=partitionSpecs" json:"partition_specs,omitempty"`
}

func (m *ReplicationStreamSpec) Reset()         { *m = ReplicationStreamSpec{} }
func (m *ReplicationStreamSpec) String() string { return proto.CompactTextString(m) }
func (*ReplicationStreamSpec) ProtoMessage()    {}
func (*ReplicationStreamSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_c77aa03d139763a6, []int{1}
}
func (m *ReplicationStreamSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationStreamSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicationStreamSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationStreamSpec.Merge(m, src)
}
func (m *ReplicationStreamSpec) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationStreamSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationStreamSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationStreamSpec proto.InternalMessageInfo

type ReplicationStreamSpec_PartitionSpec struct {
	// ID of the node this partition resides
	NodeID *github_com_cockroachdb_cockroach_pkg_roachpb.NodeID `protobuf:"varint,1,opt,name=node_id,json=nodeId,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	// The SQL address. If empty, indicates that the base address field
	// is also used to accept SQL connections.
	// sql_address should only be visible by the Admin role.
	SQLAddress util.UnresolvedAddr `protobuf:"bytes,2,opt,name=sql_address,json=sqlAddress" json:"sql_address"`
	// Locality of the node
	Locality roachpb.Locality `protobuf:"bytes,3,opt,name=locality" json:"locality"`
	// The spec of the processor responsible for streaming this partition
	StreamProcessorSpec *StreamPartitionProcessorSpec `protobuf:"bytes,4,opt,name=processor_spec,json=processorSpec" json:"processor_spec,omitempty"`
}

func (m *ReplicationStreamSpec_PartitionSpec) Reset()         { *m = ReplicationStreamSpec_PartitionSpec{} }
func (m *ReplicationStreamSpec_PartitionSpec) String() string { return proto.CompactTextString(m) }
func (*ReplicationStreamSpec_PartitionSpec) ProtoMessage()    {}
func (*ReplicationStreamSpec_PartitionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_c77aa03d139763a6, []int{1, 0}
}
func (m *ReplicationStreamSpec_PartitionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationStreamSpec_PartitionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicationStreamSpec_PartitionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationStreamSpec_PartitionSpec.Merge(m, src)
}
func (m *ReplicationStreamSpec_PartitionSpec) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationStreamSpec_PartitionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationStreamSpec_PartitionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationStreamSpec_PartitionSpec proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StreamPartitionProcessorSpec)(nil), "cockroach.sql.distsqlrun.StreamPartitionProcessorSpec")
	proto.RegisterType((*ReplicationStreamSpec)(nil), "cockroach.sql.distsqlrun.ReplicationStreamSpec")
	proto.RegisterType((*ReplicationStreamSpec_PartitionSpec)(nil), "cockroach.sql.distsqlrun.ReplicationStreamSpec.PartitionSpec")
}

func init() {
	proto.RegisterFile("sql/execinfrapb/processors_replication_streams.proto", fileDescriptor_c77aa03d139763a6)
}

var fileDescriptor_c77aa03d139763a6 = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xbd, 0x6e, 0xdb, 0x3c,
	0x14, 0xb5, 0xe2, 0x7c, 0xf9, 0x52, 0xba, 0xf9, 0x81, 0xda, 0x26, 0x82, 0xdb, 0xca, 0x41, 0x26,
	0x2f, 0x91, 0x00, 0xb7, 0xe8, 0x96, 0xc1, 0x42, 0x16, 0x03, 0x41, 0x90, 0xca, 0xed, 0x92, 0x45,
	0xa0, 0x48, 0xc6, 0x66, 0x4d, 0x8b, 0x34, 0x49, 0x07, 0xed, 0x5b, 0xf4, 0xb1, 0x3c, 0x66, 0xcc,
	0x64, 0x34, 0xf2, 0x43, 0x14, 0xed, 0x54, 0x50, 0xa2, 0x6c, 0xa7, 0x48, 0xba, 0xd8, 0x57, 0x97,
	0xe7, 0x5c, 0xdd, 0x73, 0x8e, 0x08, 0xde, 0xab, 0x09, 0x0b, 0xc9, 0x57, 0x82, 0x68, 0x76, 0x2d,
	0xa1, 0x48, 0x43, 0x21, 0x39, 0x22, 0x4a, 0x71, 0xa9, 0x12, 0x49, 0x04, 0xa3, 0x08, 0x6a, 0xca,
	0xb3, 0x44, 0x69, 0x49, 0xe0, 0x58, 0x05, 0x42, 0x72, 0xcd, 0x5d, 0x0f, 0x71, 0x34, 0x92, 0x1c,
	0xa2, 0x61, 0xa0, 0x26, 0x2c, 0xc0, 0x54, 0x69, 0x35, 0x61, 0x72, 0x9a, 0x35, 0x0f, 0xbe, 0xf0,
	0x54, 0x85, 0xe6, 0x47, 0xa4, 0xc5, 0x5f, 0xc9, 0x68, 0xba, 0x05, 0x5a, 0xa4, 0x21, 0x86, 0x1a,
	0xda, 0xde, 0x41, 0xd5, 0x1b, 0x13, 0x0d, 0xd7, 0xfa, 0xde, 0x54, 0x53, 0x16, 0x0e, 0x19, 0x0a,
	0x35, 0x1d, 0x13, 0xa5, 0xe1, 0x58, 0xd8, 0x93, 0x97, 0x03, 0x3e, 0xe0, 0x45, 0x19, 0x9a, 0xca,
	0x76, 0x9b, 0x05, 0x7e, 0x9a, 0x49, 0xa2, 0x38, 0xbb, 0x21, 0x38, 0x81, 0x18, 0xcb, 0xf2, 0xec,
	0xf8, 0xde, 0x01, 0x6f, 0xfa, 0xc5, 0xee, 0x97, 0x50, 0x6a, 0x6a, 0xb4, 0x5c, 0x56, 0x0a, 0xfb,
	0x82, 0x20, 0xf7, 0x02, 0xec, 0xd3, 0x8c, 0x6a, 0x0a, 0x59, 0x52, 0xf1, 0x3d, 0xe7, 0xc8, 0x69,
	0x37, 0x3a, 0x6f, 0x83, 0x95, 0x4a, 0xf3, 0x86, 0x60, 0xc8, 0x50, 0xf0, 0xa9, 0xda, 0x28, 0xda,
	0x9c, 0xcd, 0x5b, 0xb5, 0x78, 0xcf, 0x92, 0x63, 0xcb, 0x75, 0x23, 0xb0, 0xa3, 0x25, 0x44, 0x23,
	0x82, 0x13, 0x25, 0x60, 0xa6, 0xbc, 0x8d, 0xa3, 0x7a, 0xbb, 0xd1, 0x39, 0x5c, 0x1b, 0x66, 0x65,
	0x07, 0x7d, 0x01, 0x33, 0x3b, 0xe6, 0xb9, 0xe5, 0x98, 0x96, 0x72, 0x4f, 0xc0, 0xb3, 0xd2, 0xef,
	0x84, 0x62, 0x6f, 0xf3, 0xc8, 0x69, 0xd7, 0xa3, 0x7d, 0x03, 0xcb, 0xe7, 0xad, 0xed, 0x52, 0x4c,
	0xef, 0x2c, 0xde, 0x2e, 0x21, 0x3d, 0x7c, 0xfc, 0xab, 0x0e, 0x5e, 0xc5, 0xab, 0xac, 0x4a, 0x44,
	0x21, 0xee, 0x1a, 0xec, 0x89, 0x4a, 0x76, 0xa2, 0x04, 0x41, 0xca, 0x73, 0x8a, 0x75, 0x4e, 0x83,
	0xa7, 0x12, 0x0c, 0x1e, 0x9d, 0x14, 0x2c, 0xdd, 0x33, 0x4f, 0xf1, 0xae, 0x58, 0x7f, 0x54, 0xcd,
	0x9f, 0x1b, 0x60, 0xe7, 0x01, 0xc2, 0xbd, 0x02, 0xff, 0x67, 0x1c, 0x13, 0x23, 0xc0, 0xb8, 0xf9,
	0x5f, 0xd4, 0xcd, 0xe7, 0xad, 0xad, 0x0b, 0x8e, 0x49, 0xef, 0xec, 0xf7, 0xbc, 0xf5, 0x6e, 0x40,
	0xf5, 0x70, 0x9a, 0x06, 0x88, 0x8f, 0xc3, 0xe5, 0x26, 0x38, 0x5d, 0xd5, 0xa1, 0x18, 0x0d, 0xc2,
	0xca, 0xa8, 0x92, 0x16, 0x6f, 0x99, 0x89, 0x3d, 0xec, 0xf6, 0x41, 0x43, 0x4d, 0x58, 0x91, 0x32,
	0x51, 0xc6, 0x60, 0x93, 0x96, 0xff, 0x77, 0x5a, 0x9f, 0x97, 0xdf, 0x43, 0x17, 0x63, 0x19, 0xb9,
	0xd6, 0x40, 0xd0, 0xff, 0x78, 0xde, 0x2d, 0x99, 0x31, 0x50, 0x13, 0x66, 0x6b, 0xf7, 0x14, 0x6c,
	0x33, 0x8e, 0x20, 0xa3, 0xfa, 0x9b, 0x57, 0x2f, 0x26, 0xbe, 0x7e, 0x24, 0xb2, 0x73, 0x0b, 0xb1,
	0xb1, 0x2d, 0x29, 0xee, 0x0d, 0xd8, 0x5d, 0xde, 0x9c, 0xc2, 0xe9, 0x22, 0xb7, 0x46, 0xe7, 0xc3,
	0xd3, 0x46, 0xff, 0xeb, 0xb3, 0x8c, 0x0e, 0xf3, 0x79, 0xeb, 0x85, 0x45, 0xac, 0x1f, 0xc4, 0x3b,
	0xe2, 0x01, 0xee, 0x64, 0x76, 0xef, 0xd7, 0x66, 0xb9, 0xef, 0xdc, 0xe6, 0xbe, 0x73, 0x97, 0xfb,
	0xce, 0x8f, 0xdc, 0x77, 0xbe, 0x2f, 0xfc, 0xda, 0xed, 0xc2, 0xaf, 0xdd, 0x2d, 0xfc, 0xda, 0x55,
	0x63, 0xed, 0x76, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x1b, 0x50, 0xfb, 0xef, 0x03, 0x00,
	0x00,
}

func (m *StreamPartitionProcessorSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamPartitionProcessorSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamPartitionProcessorSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintProcessorsReplicationStreams(dAtA, i, uint64(m.StreamID))
	i--
	dAtA[i] = 0x20
	if len(m.TrackedSpans) > 0 {
		for iNdEx := len(m.TrackedSpans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrackedSpans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessorsReplicationStreams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.InitialResolved.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProcessorsReplicationStreams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReplicationStreamSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationStreamSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationStreamSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PartitionSpecs) > 0 {
		for iNdEx := len(m.PartitionSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PartitionSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProcessorsReplicationStreams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationStreamSpec_PartitionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationStreamSpec_PartitionSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationStreamSpec_PartitionSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StreamProcessorSpec != nil {
		{
			size, err := m.StreamProcessorSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessorsReplicationStreams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Locality.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProcessorsReplicationStreams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.SQLAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProcessorsReplicationStreams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.NodeID != nil {
		i = encodeVarintProcessorsReplicationStreams(dAtA, i, uint64(*m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProcessorsReplicationStreams(dAtA []byte, offset int, v uint64) int {
	offset -= sovProcessorsReplicationStreams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StreamPartitionProcessorSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InitialResolved.Size()
	n += 1 + l + sovProcessorsReplicationStreams(uint64(l))
	if len(m.TrackedSpans) > 0 {
		for _, e := range m.TrackedSpans {
			l = e.Size()
			n += 1 + l + sovProcessorsReplicationStreams(uint64(l))
		}
	}
	n += 1 + sovProcessorsReplicationStreams(uint64(m.StreamID))
	return n
}

func (m *ReplicationStreamSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PartitionSpecs) > 0 {
		for _, e := range m.PartitionSpecs {
			l = e.Size()
			n += 1 + l + sovProcessorsReplicationStreams(uint64(l))
		}
	}
	return n
}

func (m *ReplicationStreamSpec_PartitionSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != nil {
		n += 1 + sovProcessorsReplicationStreams(uint64(*m.NodeID))
	}
	l = m.SQLAddress.Size()
	n += 1 + l + sovProcessorsReplicationStreams(uint64(l))
	l = m.Locality.Size()
	n += 1 + l + sovProcessorsReplicationStreams(uint64(l))
	if m.StreamProcessorSpec != nil {
		l = m.StreamProcessorSpec.Size()
		n += 1 + l + sovProcessorsReplicationStreams(uint64(l))
	}
	return n
}

func sovProcessorsReplicationStreams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProcessorsReplicationStreams(x uint64) (n int) {
	return sovProcessorsReplicationStreams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamPartitionProcessorSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessorsReplicationStreams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamPartitionProcessorSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamPartitionProcessorSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialResolved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsReplicationStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessorsReplicationStreams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessorsReplicationStreams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialResolved.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackedSpans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsReplicationStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessorsReplicationStreams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessorsReplicationStreams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackedSpans = append(m.TrackedSpans, roachpb.Span{})
			if err := m.TrackedSpans[len(m.TrackedSpans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamID", wireType)
			}
			m.StreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsReplicationStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProcessorsReplicationStreams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessorsReplicationStreams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationStreamSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessorsReplicationStreams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationStreamSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationStreamSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsReplicationStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessorsReplicationStreams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessorsReplicationStreams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionSpecs = append(m.PartitionSpecs, &ReplicationStreamSpec_PartitionSpec{})
			if err := m.PartitionSpecs[len(m.PartitionSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessorsReplicationStreams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessorsReplicationStreams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationStreamSpec_PartitionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessorsReplicationStreams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var v github_com_cockroachdb_cockroach_pkg_roachpb.NodeID
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsReplicationStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NodeID = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SQLAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsReplicationStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessorsReplicationStreams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessorsReplicationStreams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SQLAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locality", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsReplicationStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessorsReplicationStreams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessorsReplicationStreams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Locality.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamProcessorSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessorsReplicationStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessorsReplicationStreams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessorsReplicationStreams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StreamProcessorSpec == nil {
				m.StreamProcessorSpec = &StreamPartitionProcessorSpec{}
			}
			if err := m.StreamProcessorSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessorsReplicationStreams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessorsReplicationStreams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProcessorsReplicationStreams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProcessorsReplicationStreams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessorsReplicationStreams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessorsReplicationStreams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProcessorsReplicationStreams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProcessorsReplicationStreams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProcessorsReplicationStreams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProcessorsReplicationStreams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProcessorsReplicationStreams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProcessorsReplicationStreams = fmt.Errorf("proto: unexpected end of group")
)
