// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/execinfrapb/component_stats.proto

package execinfrapb

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_base "github.com/cockroachdb/cockroach/pkg/base"
	optional "github.com/cockroachdb/cockroach/pkg/util/optional"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ComponentID_Type int32

const (
	ComponentID_UNSET ComponentID_Type = 0
	// The component is a processor; the ID field corresponds to a processor ID
	// in the plan.
	ComponentID_PROCESSOR ComponentID_Type = 1
	// The component is a stream; the ID field corresponds to a stream ID in the
	// plan.
	ComponentID_STREAM ComponentID_Type = 2
	// The "component" is a flow (specifically, the part of a distributed plan
	// that runs on a given node).
	// TODO(radu): the ID field should correspond to a node ID in the plan.
	ComponentID_FLOW ComponentID_Type = 3
)

var ComponentID_Type_name = map[int32]string{
	0: "UNSET",
	1: "PROCESSOR",
	2: "STREAM",
	3: "FLOW",
}

var ComponentID_Type_value = map[string]int32{
	"UNSET":     0,
	"PROCESSOR": 1,
	"STREAM":    2,
	"FLOW":      3,
}

func (x ComponentID_Type) Enum() *ComponentID_Type {
	p := new(ComponentID_Type)
	*p = x
	return p
}

func (x ComponentID_Type) String() string {
	return proto.EnumName(ComponentID_Type_name, int32(x))
}

func (x *ComponentID_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ComponentID_Type_value, data, "ComponentID_Type")
	if err != nil {
		return err
	}
	*x = ComponentID_Type(value)
	return nil
}

func (ComponentID_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_11ea9e8b662a649a, []int{0, 0}
}

// ComponentID identifies a component in a flow. There are multiple types of
// components (e.g. processors, streams); each component of a certain type has
// an integer identifier.
type ComponentID struct {
	FlowID FlowID           `protobuf:"bytes,1,opt,name=flow_id,json=flowId,customtype=FlowID" json:"flow_id"`
	Type   ComponentID_Type `protobuf:"varint,2,opt,name=type,enum=cockroach.sql.distsqlrun.ComponentID_Type" json:"type"`
	// Identifier of this component, within the domain of components of the same
	// type.
	ID int32 `protobuf:"varint,3,opt,name=id" json:"id"`
	// SQLInstanceID of the node this component is associated with. For cross-node
	// streams, this is the *origin* node for the stream.
	SQLInstanceID github_com_cockroachdb_cockroach_pkg_base.SQLInstanceID `protobuf:"varint,4,opt,name=sql_instance_id,json=sqlInstanceId,casttype=github.com/cockroachdb/cockroach/pkg/base.SQLInstanceID" json:"sql_instance_id"`
}

func (m *ComponentID) Reset()         { *m = ComponentID{} }
func (m *ComponentID) String() string { return proto.CompactTextString(m) }
func (*ComponentID) ProtoMessage()    {}
func (*ComponentID) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ea9e8b662a649a, []int{0}
}
func (m *ComponentID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ComponentID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentID.Merge(m, src)
}
func (m *ComponentID) XXX_Size() int {
	return m.Size()
}
func (m *ComponentID) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentID.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentID proto.InternalMessageInfo

// ComponentStats contains statistics for an execution component. A component is
// an arbitrary unit in the execution infrastructure; it can correspond to an
// operator or a stream.
//
// Depending on the component, not all statistics apply. For all fields, the zero
// value indicates that the particular stat is not available.
type ComponentStats struct {
	Component ComponentID    `protobuf:"bytes,1,opt,name=component" json:"component"`
	NetRx     NetworkRxStats `protobuf:"bytes,2,opt,name=net_rx,json=netRx" json:"net_rx"`
	NetTx     NetworkTxStats `protobuf:"bytes,3,opt,name=net_tx,json=netTx" json:"net_tx"`
	KV        KVStats        `protobuf:"bytes,4,opt,name=kv" json:"kv"`
	Exec      ExecStats      `protobuf:"bytes,5,opt,name=exec" json:"exec"`
	Output    OutputStats    `protobuf:"bytes,6,opt,name=output" json:"output"`
	// Stats for the inputs of an operator (only in the row execution engine).
	Inputs    []InputStats `protobuf:"bytes,7,rep,name=inputs" json:"inputs"`
	FlowStats FlowStats    `protobuf:"bytes,8,opt,name=flow_stats,json=flowStats" json:"flow_stats"`
}

func (m *ComponentStats) Reset()         { *m = ComponentStats{} }
func (m *ComponentStats) String() string { return proto.CompactTextString(m) }
func (*ComponentStats) ProtoMessage()    {}
func (*ComponentStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ea9e8b662a649a, []int{1}
}
func (m *ComponentStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ComponentStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentStats.Merge(m, src)
}
func (m *ComponentStats) XXX_Size() int {
	return m.Size()
}
func (m *ComponentStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentStats.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentStats proto.InternalMessageInfo

// InputStats contains statistics about the rows received as an input to a
// processor. Currently only used in the row execution engine.
type InputStats struct {
	NumTuples optional.Uint `protobuf:"bytes,1,opt,name=num_tuples,json=numTuples" json:"num_tuples"`
	// Cumulated time spent waiting for rows from the input operator.
	WaitTime optional.Duration `protobuf:"bytes,2,opt,name=wait_time,json=waitTime" json:"wait_time"`
}

func (m *InputStats) Reset()         { *m = InputStats{} }
func (m *InputStats) String() string { return proto.CompactTextString(m) }
func (*InputStats) ProtoMessage()    {}
func (*InputStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ea9e8b662a649a, []int{2}
}
func (m *InputStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InputStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputStats.Merge(m, src)
}
func (m *InputStats) XXX_Size() int {
	return m.Size()
}
func (m *InputStats) XXX_DiscardUnknown() {
	xxx_messageInfo_InputStats.DiscardUnknown(m)
}

var xxx_messageInfo_InputStats proto.InternalMessageInfo

// NetworkRxStats contains statistics for components that receive row data
// over the network. Note: Rx is shorthand for Receive.
type NetworkRxStats struct {
	// Observed network latency (round-trip time between the two nodes).
	Latency optional.Duration `protobuf:"bytes,1,opt,name=latency" json:"latency"`
	// Cumulated time spent waiting to receive or transmit tuple data.
	WaitTime optional.Duration `protobuf:"bytes,2,opt,name=wait_time,json=waitTime" json:"wait_time"`
	// Time spent deserializing network data.
	DeserializationTime optional.Duration `protobuf:"bytes,3,opt,name=deserialization_time,json=deserializationTime" json:"deserialization_time"`
	TuplesReceived      optional.Uint     `protobuf:"bytes,4,opt,name=tuples_received,json=tuplesReceived" json:"tuples_received"`
	BytesReceived       optional.Uint     `protobuf:"bytes,5,opt,name=bytes_received,json=bytesReceived" json:"bytes_received"`
	// Number of messages received over the network.
	MessagesReceived optional.Uint `protobuf:"bytes,6,opt,name=messages_received,json=messagesReceived" json:"messages_received"`
}

func (m *NetworkRxStats) Reset()         { *m = NetworkRxStats{} }
func (m *NetworkRxStats) String() string { return proto.CompactTextString(m) }
func (*NetworkRxStats) ProtoMessage()    {}
func (*NetworkRxStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ea9e8b662a649a, []int{3}
}
func (m *NetworkRxStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkRxStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NetworkRxStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkRxStats.Merge(m, src)
}
func (m *NetworkRxStats) XXX_Size() int {
	return m.Size()
}
func (m *NetworkRxStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkRxStats.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkRxStats proto.InternalMessageInfo

// NetworkTxStats contains statistics for components that send row data over the
// network. Note: Tx is shorthand for Transmit.
type NetworkTxStats struct {
	TuplesSent optional.Uint `protobuf:"bytes,1,opt,name=tuples_sent,json=tuplesSent" json:"tuples_sent"`
	BytesSent  optional.Uint `protobuf:"bytes,2,opt,name=bytes_sent,json=bytesSent" json:"bytes_sent"`
	// Number of messages sent over the network.
	MessagesSent optional.Uint `protobuf:"bytes,3,opt,name=messages_sent,json=messagesSent" json:"messages_sent"`
}

func (m *NetworkTxStats) Reset()         { *m = NetworkTxStats{} }
func (m *NetworkTxStats) String() string { return proto.CompactTextString(m) }
func (*NetworkTxStats) ProtoMessage()    {}
func (*NetworkTxStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ea9e8b662a649a, []int{4}
}
func (m *NetworkTxStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkTxStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NetworkTxStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkTxStats.Merge(m, src)
}
func (m *NetworkTxStats) XXX_Size() int {
	return m.Size()
}
func (m *NetworkTxStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkTxStats.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkTxStats proto.InternalMessageInfo

// KVStats contains statistics for components that perform KV operations.
type KVStats struct {
	BytesRead  optional.Uint `protobuf:"bytes,1,opt,name=bytes_read,json=bytesRead" json:"bytes_read"`
	TuplesRead optional.Uint `protobuf:"bytes,2,opt,name=tuples_read,json=tuplesRead" json:"tuples_read"`
	// Cumulated time spent waiting for a KV request. This includes disk IO time
	// and potentially network time (if any of the keys are not local).
	KVTime optional.Duration `protobuf:"bytes,3,opt,name=kv_time,json=kvTime" json:"kv_time"`
	// ContentionTime is the cumulative time a KV request spent contending with
	// other transactions. This time accounts for a portion of KVTime above.
	ContentionTime optional.Duration `protobuf:"bytes,4,opt,name=contention_time,json=contentionTime" json:"contention_time"`
	NumMvccKeys    optional.Uint     `protobuf:"bytes,5,opt,name=num_mvcc_keys,json=numMvccKeys" json:"num_mvcc_keys"`
	NumSeeks       optional.Uint     `protobuf:"bytes,6,opt,name=num_seeks,json=numSeeks" json:"num_seeks"`
}

func (m *KVStats) Reset()         { *m = KVStats{} }
func (m *KVStats) String() string { return proto.CompactTextString(m) }
func (*KVStats) ProtoMessage()    {}
func (*KVStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ea9e8b662a649a, []int{5}
}
func (m *KVStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KVStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVStats.Merge(m, src)
}
func (m *KVStats) XXX_Size() int {
	return m.Size()
}
func (m *KVStats) XXX_DiscardUnknown() {
	xxx_messageInfo_KVStats.DiscardUnknown(m)
}

var xxx_messageInfo_KVStats proto.InternalMessageInfo

// ExecStats contains statistics about the execution of a component.
type ExecStats struct {
	// Time spent executing the component.
	ExecTime optional.Duration `protobuf:"bytes,1,opt,name=exec_time,json=execTime" json:"exec_time"`
	// Maximum memory allocated by the component.
	MaxAllocatedMem optional.Uint `protobuf:"bytes,2,opt,name=max_allocated_mem,json=maxAllocatedMem" json:"max_allocated_mem"`
	// Maximum scratch disk allocated by the component.
	MaxAllocatedDisk optional.Uint `protobuf:"bytes,3,opt,name=max_allocated_disk,json=maxAllocatedDisk" json:"max_allocated_disk"`
}

func (m *ExecStats) Reset()         { *m = ExecStats{} }
func (m *ExecStats) String() string { return proto.CompactTextString(m) }
func (*ExecStats) ProtoMessage()    {}
func (*ExecStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ea9e8b662a649a, []int{6}
}
func (m *ExecStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExecStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecStats.Merge(m, src)
}
func (m *ExecStats) XXX_Size() int {
	return m.Size()
}
func (m *ExecStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecStats.DiscardUnknown(m)
}

var xxx_messageInfo_ExecStats proto.InternalMessageInfo

// OutputStats contains statistics about the output (results) of a component.
type OutputStats struct {
	// Number of batches produced by the component.
	NumBatches optional.Uint `protobuf:"bytes,1,opt,name=num_batches,json=numBatches" json:"num_batches"`
	// Number of tuples produced by the component.
	NumTuples optional.Uint `protobuf:"bytes,2,opt,name=num_tuples,json=numTuples" json:"num_tuples"`
}

func (m *OutputStats) Reset()         { *m = OutputStats{} }
func (m *OutputStats) String() string { return proto.CompactTextString(m) }
func (*OutputStats) ProtoMessage()    {}
func (*OutputStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ea9e8b662a649a, []int{7}
}
func (m *OutputStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutputStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OutputStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputStats.Merge(m, src)
}
func (m *OutputStats) XXX_Size() int {
	return m.Size()
}
func (m *OutputStats) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputStats.DiscardUnknown(m)
}

var xxx_messageInfo_OutputStats proto.InternalMessageInfo

// FlowStats contains flow level statistics.
type FlowStats struct {
	MaxMemUsage  optional.Uint `protobuf:"bytes,1,opt,name=max_mem_usage,json=maxMemUsage" json:"max_mem_usage"`
	MaxDiskUsage optional.Uint `protobuf:"bytes,2,opt,name=max_disk_usage,json=maxDiskUsage" json:"max_disk_usage"`
}

func (m *FlowStats) Reset()         { *m = FlowStats{} }
func (m *FlowStats) String() string { return proto.CompactTextString(m) }
func (*FlowStats) ProtoMessage()    {}
func (*FlowStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ea9e8b662a649a, []int{8}
}
func (m *FlowStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FlowStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowStats.Merge(m, src)
}
func (m *FlowStats) XXX_Size() int {
	return m.Size()
}
func (m *FlowStats) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowStats.DiscardUnknown(m)
}

var xxx_messageInfo_FlowStats proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.sql.distsqlrun.ComponentID_Type", ComponentID_Type_name, ComponentID_Type_value)
	proto.RegisterType((*ComponentID)(nil), "cockroach.sql.distsqlrun.ComponentID")
	proto.RegisterType((*ComponentStats)(nil), "cockroach.sql.distsqlrun.ComponentStats")
	proto.RegisterType((*InputStats)(nil), "cockroach.sql.distsqlrun.InputStats")
	proto.RegisterType((*NetworkRxStats)(nil), "cockroach.sql.distsqlrun.NetworkRxStats")
	proto.RegisterType((*NetworkTxStats)(nil), "cockroach.sql.distsqlrun.NetworkTxStats")
	proto.RegisterType((*KVStats)(nil), "cockroach.sql.distsqlrun.KVStats")
	proto.RegisterType((*ExecStats)(nil), "cockroach.sql.distsqlrun.ExecStats")
	proto.RegisterType((*OutputStats)(nil), "cockroach.sql.distsqlrun.OutputStats")
	proto.RegisterType((*FlowStats)(nil), "cockroach.sql.distsqlrun.FlowStats")
}

func init() {
	proto.RegisterFile("sql/execinfrapb/component_stats.proto", fileDescriptor_11ea9e8b662a649a)
}

var fileDescriptor_11ea9e8b662a649a = []byte{
	// 1043 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0xc7, 0x63, 0x27, 0x4d, 0x9b, 0x27, 0x9b, 0x34, 0x3b, 0xec, 0x21, 0x5a, 0x41, 0xda, 0x35,
	0xac, 0x54, 0x21, 0x91, 0x88, 0x1e, 0xe0, 0xb4, 0x12, 0x4d, 0xd3, 0x65, 0xb3, 0x6d, 0xb7, 0x5d,
	0x27, 0x2d, 0xd2, 0x5e, 0xac, 0x89, 0x3d, 0x6d, 0x2d, 0xbf, 0xd6, 0x33, 0x4e, 0x1d, 0x3e, 0x05,
	0x27, 0x38, 0xf2, 0x3d, 0x10, 0x1f, 0xa0, 0xc7, 0x3d, 0x70, 0x58, 0x71, 0xa8, 0xd8, 0x94, 0xaf,
	0xc0, 0x85, 0x13, 0x9a, 0xb1, 0xe3, 0xb8, 0x45, 0xd1, 0xc6, 0x88, 0xdb, 0x34, 0x9e, 0xff, 0x6f,
	0x9e, 0xf7, 0xa7, 0xf0, 0x94, 0x5e, 0xda, 0x1d, 0x12, 0x11, 0xdd, 0x74, 0xcf, 0x02, 0xec, 0x8f,
	0x3a, 0xba, 0xe7, 0xf8, 0x9e, 0x4b, 0x5c, 0xa6, 0x51, 0x86, 0x19, 0x6d, 0xfb, 0x81, 0xc7, 0x3c,
	0xd4, 0xd4, 0x3d, 0xdd, 0x0a, 0x3c, 0xac, 0x5f, 0xb4, 0xe9, 0xa5, 0xdd, 0x36, 0x4c, 0xca, 0xe8,
	0xa5, 0x1d, 0x84, 0xee, 0xe3, 0x47, 0xe7, 0xde, 0xb9, 0x27, 0x2e, 0x75, 0xf8, 0x29, 0xbe, 0xff,
	0xf8, 0xe3, 0x90, 0x99, 0x76, 0xc7, 0xf3, 0x99, 0xe9, 0xb9, 0x78, 0x7e, 0x88, 0xbf, 0x2a, 0xbf,
	0xc9, 0x50, 0xdd, 0x9d, 0xbd, 0xd3, 0xef, 0xa1, 0x2f, 0x61, 0xf5, 0xcc, 0xf6, 0xae, 0x34, 0xd3,
	0x68, 0x4a, 0x9b, 0xd2, 0xd6, 0x83, 0x6e, 0xf3, 0xfa, 0x66, 0xa3, 0xf0, 0xfb, 0xcd, 0x46, 0xf9,
	0xb9, 0xed, 0x5d, 0xf5, 0x7b, 0xd3, 0xf4, 0xa4, 0x96, 0xf9, 0xc5, 0xbe, 0x81, 0x7a, 0x50, 0x62,
	0x13, 0x9f, 0x34, 0xe5, 0x4d, 0x69, 0xab, 0xbe, 0xfd, 0x79, 0x7b, 0x91, 0x7d, 0xed, 0xcc, 0x3b,
	0xed, 0xe1, 0xc4, 0x27, 0xdd, 0x12, 0x67, 0xab, 0x42, 0x8d, 0x1e, 0x83, 0x6c, 0x1a, 0xcd, 0xe2,
	0xa6, 0xb4, 0xb5, 0xd2, 0x05, 0xfe, 0xfb, 0xf4, 0x66, 0x43, 0xee, 0xf7, 0x54, 0xd9, 0x34, 0x50,
	0x04, 0xeb, 0xf4, 0xd2, 0xd6, 0x4c, 0x97, 0x32, 0xec, 0xea, 0x84, 0x1b, 0x57, 0x12, 0x17, 0x8f,
	0x93, 0x8b, 0xb5, 0xc1, 0xeb, 0x83, 0x7e, 0xf2, 0xb5, 0xdf, 0xfb, 0xfb, 0x66, 0xe3, 0xeb, 0x73,
	0x93, 0x5d, 0x84, 0xa3, 0xb6, 0xee, 0x39, 0x9d, 0xd4, 0x1e, 0x63, 0x34, 0x3f, 0x77, 0x7c, 0xeb,
	0xbc, 0x33, 0xc2, 0x94, 0xb4, 0xef, 0x48, 0xd5, 0x1a, 0xbd, 0xb4, 0xd3, 0x3f, 0x0d, 0xe5, 0x2b,
	0x28, 0x71, 0x4b, 0x51, 0x05, 0x56, 0x4e, 0x5e, 0x0d, 0xf6, 0x86, 0x8d, 0x02, 0xaa, 0x41, 0xe5,
	0x58, 0x3d, 0xda, 0xdd, 0x1b, 0x0c, 0x8e, 0xd4, 0x86, 0x84, 0x00, 0xca, 0x83, 0xa1, 0xba, 0xb7,
	0x73, 0xd8, 0x90, 0xd1, 0x1a, 0x94, 0x9e, 0x1f, 0x1c, 0x7d, 0xd7, 0x28, 0x2a, 0xbf, 0x94, 0xa0,
	0x9e, 0xba, 0x3b, 0xe0, 0xd9, 0x43, 0x7d, 0xa8, 0xa4, 0x09, 0x15, 0xb1, 0xad, 0x6e, 0x3f, 0x5d,
	0x2a, 0x56, 0x49, 0x98, 0xe6, 0x6a, 0xb4, 0x07, 0x65, 0x97, 0x30, 0x2d, 0x88, 0x44, 0xcc, 0xab,
	0xdb, 0x5b, 0x8b, 0x39, 0xaf, 0x08, 0xbb, 0xf2, 0x02, 0x4b, 0x8d, 0x84, 0x11, 0x09, 0x6a, 0xc5,
	0x25, 0x4c, 0x8d, 0x66, 0x18, 0x16, 0x89, 0xb0, 0x2f, 0x83, 0x19, 0xfe, 0x0b, 0x33, 0x8c, 0xd0,
	0x33, 0x90, 0xad, 0xb1, 0x48, 0x48, 0x75, 0xfb, 0xc9, 0x62, 0xc4, 0xfe, 0x69, 0xac, 0x4d, 0x93,
	0xbb, 0x7f, 0xaa, 0xca, 0xd6, 0x18, 0x3d, 0x83, 0x12, 0x2f, 0xfa, 0xe6, 0x8a, 0x00, 0x7c, 0xba,
	0x18, 0xb0, 0x17, 0x11, 0x3d, 0xfb, 0xbc, 0x90, 0xa1, 0x5d, 0x28, 0x7b, 0x21, 0xf3, 0x43, 0xd6,
	0x2c, 0x7f, 0x28, 0xa6, 0x47, 0xe2, 0x5e, 0x16, 0x91, 0x48, 0x51, 0x17, 0xca, 0xa6, 0xeb, 0x87,
	0x8c, 0x36, 0x57, 0x37, 0x8b, 0x5b, 0xd5, 0xed, 0xcf, 0x16, 0x43, 0xfa, 0xee, 0x7d, 0x46, 0xac,
	0x44, 0x2f, 0x00, 0x44, 0xe7, 0x88, 0x5e, 0x6d, 0xae, 0x7d, 0xc8, 0x1b, 0xde, 0x44, 0x59, 0x4c,
	0xe5, 0x6c, 0xf6, 0x83, 0xf2, 0xa3, 0x04, 0x30, 0x7f, 0x06, 0x75, 0x01, 0xdc, 0xd0, 0xd1, 0x58,
	0xe8, 0xdb, 0x84, 0x26, 0x95, 0xf3, 0x49, 0x06, 0xcc, 0xfb, 0xbb, 0x9d, 0xb6, 0xf5, 0x89, 0xe9,
	0xb2, 0x19, 0xd2, 0x0d, 0x9d, 0xa1, 0x50, 0xa1, 0x1e, 0x54, 0xae, 0xb0, 0xc9, 0x34, 0x66, 0x3a,
	0x24, 0x29, 0x9a, 0x27, 0x0b, 0x11, 0xbd, 0x30, 0xc0, 0xfc, 0x98, 0x60, 0xd6, 0xb8, 0x72, 0x68,
	0x3a, 0x44, 0x79, 0x5f, 0x84, 0xfa, 0xdd, 0x82, 0x42, 0x3b, 0xb0, 0x6a, 0x63, 0x46, 0x5c, 0x7d,
	0x92, 0x58, 0xb6, 0x34, 0x76, 0xa6, 0xfb, 0x7f, 0x6c, 0x43, 0x6f, 0xe0, 0x91, 0x41, 0x28, 0x09,
	0x4c, 0x6c, 0x9b, 0xdf, 0x8b, 0x2b, 0x31, 0xb0, 0x98, 0x0f, 0xf8, 0xd1, 0x3d, 0x88, 0x60, 0x1f,
	0xc0, 0x7a, 0x1c, 0x7d, 0x2d, 0x20, 0x3a, 0x31, 0xc7, 0xc4, 0x48, 0xca, 0x7d, 0xa9, 0x34, 0xd4,
	0x63, 0xad, 0x9a, 0x48, 0xd1, 0x4b, 0xa8, 0x8f, 0x26, 0x2c, 0x0b, 0x5b, 0x59, 0x1e, 0x56, 0x13,
	0xd2, 0x94, 0x75, 0x0c, 0x0f, 0x1d, 0x42, 0x29, 0x3e, 0xcf, 0xe2, 0xca, 0xcb, 0xe3, 0x1a, 0x33,
	0xf5, 0x8c, 0xa8, 0xfc, 0x29, 0xa5, 0x39, 0x4e, 0xba, 0x1d, 0xf5, 0xa0, 0x9a, 0xb8, 0x4f, 0xe7,
	0xb3, 0x6b, 0x29, 0x3c, 0xc4, 0xba, 0x01, 0x1f, 0x5a, 0x5d, 0x80, 0xd8, 0x6d, 0x01, 0x91, 0x73,
	0x94, 0xb1, 0x90, 0x09, 0xc6, 0x0b, 0xa8, 0xa5, 0xee, 0x0a, 0x4c, 0x71, 0x79, 0xcc, 0x83, 0x99,
	0x92, 0x93, 0x94, 0x5f, 0x8b, 0xb0, 0x9a, 0x4c, 0xa4, 0xb9, 0x65, 0x01, 0xc1, 0x46, 0xae, 0x06,
	0x4b, 0x92, 0x81, 0x8d, 0x4c, 0x8c, 0x04, 0x44, 0xce, 0x1d, 0x23, 0x41, 0x79, 0x09, 0xab, 0xd6,
	0x38, 0x67, 0xdd, 0xd6, 0x93, 0x79, 0x5a, 0xde, 0x3f, 0xe5, 0xc5, 0xaa, 0x96, 0xad, 0xb1, 0x28,
	0xda, 0x63, 0x58, 0xd7, 0x3d, 0x97, 0x11, 0x77, 0xde, 0x0b, 0xa5, 0x7c, 0xbd, 0x50, 0x9f, 0xeb,
	0x05, 0xf1, 0x5b, 0xa8, 0xf1, 0x41, 0xe4, 0x8c, 0x75, 0x5d, 0xb3, 0xc8, 0x84, 0xe6, 0xa9, 0xdb,
	0xaa, 0x1b, 0x3a, 0x87, 0x63, 0x5d, 0xdf, 0x27, 0x13, 0x8a, 0xbe, 0x01, 0x3e, 0x9a, 0x34, 0x4a,
	0x88, 0x45, 0xf3, 0x54, 0xeb, 0x9a, 0x1b, 0x3a, 0x03, 0x2e, 0x52, 0xfe, 0x92, 0xa0, 0x92, 0xee,
	0x03, 0x3e, 0x41, 0xf8, 0x2e, 0x88, 0x9d, 0xcc, 0x39, 0x86, 0xd6, 0xb8, 0x52, 0xb8, 0x77, 0x04,
	0x0f, 0x1d, 0x1c, 0x69, 0xd8, 0xb6, 0x3d, 0x1d, 0x33, 0x62, 0x68, 0x0e, 0x71, 0xf2, 0x24, 0x72,
	0xdd, 0xc1, 0xd1, 0xce, 0x4c, 0x7c, 0x48, 0x1c, 0xf4, 0x1a, 0xd0, 0x5d, 0xa0, 0x61, 0x52, 0x2b,
	0x4f, 0xc9, 0x36, 0xb2, 0xc4, 0x9e, 0x49, 0x2d, 0xe5, 0x27, 0x09, 0xaa, 0x99, 0x35, 0xc6, 0xcb,
	0x8e, 0x47, 0x72, 0x84, 0x99, 0x7e, 0x91, 0x6f, 0x39, 0xf0, 0x9d, 0xd2, 0x8d, 0x65, 0xf7, 0x36,
	0x8c, 0xfc, 0x5f, 0x36, 0x8c, 0xf2, 0xb3, 0x04, 0x95, 0x74, 0xa7, 0xf1, 0x52, 0xe1, 0xae, 0x3b,
	0xc4, 0xd1, 0x42, 0xde, 0x74, 0x79, 0x2c, 0xab, 0x3a, 0x38, 0x3a, 0x24, 0xce, 0x09, 0xd7, 0xa1,
	0x3e, 0xd4, 0x39, 0x88, 0x47, 0x2e, 0x21, 0xc9, 0x79, 0x5a, 0x1e, 0x47, 0x3c, 0x6c, 0x02, 0xd5,
	0xfd, 0xe2, 0xfa, 0x7d, 0xab, 0x70, 0x3d, 0x6d, 0x49, 0x6f, 0xa7, 0x2d, 0xe9, 0xdd, 0xb4, 0x25,
	0xfd, 0x31, 0x6d, 0x49, 0x3f, 0xdc, 0xb6, 0x0a, 0x6f, 0x6f, 0x5b, 0x85, 0x77, 0xb7, 0xad, 0xc2,
	0x9b, 0x6a, 0xe6, 0xbf, 0xef, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x9b, 0x17, 0xe5, 0x8f,
	0x0b, 0x00, 0x00,
}

func (m *ComponentID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintComponentStats(dAtA, i, uint64(m.SQLInstanceID))
	i--
	dAtA[i] = 0x20
	i = encodeVarintComponentStats(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x18
	i = encodeVarintComponentStats(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x10
	{
		size := m.FlowID.Size()
		i -= size
		if _, err := m.FlowID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ComponentStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FlowStats.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComponentStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Exec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.KV.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.NetTx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.NetRx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Component.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *InputStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.WaitTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.NumTuples.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NetworkRxStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkRxStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkRxStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MessagesReceived.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.BytesReceived.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.TuplesReceived.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.DeserializationTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.WaitTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Latency.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NetworkTxStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkTxStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkTxStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MessagesSent.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.BytesSent.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TuplesSent.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KVStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KVStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NumSeeks.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.NumMvccKeys.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.ContentionTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.KVTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.TuplesRead.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.BytesRead.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ExecStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MaxAllocatedDisk.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.MaxAllocatedMem.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ExecTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OutputStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutputStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutputStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NumTuples.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.NumBatches.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FlowStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MaxDiskUsage.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.MaxMemUsage.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintComponentStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintComponentStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovComponentStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ComponentID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FlowID.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	n += 1 + sovComponentStats(uint64(m.Type))
	n += 1 + sovComponentStats(uint64(m.ID))
	n += 1 + sovComponentStats(uint64(m.SQLInstanceID))
	return n
}

func (m *ComponentStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Component.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.NetRx.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.NetTx.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.KV.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.Exec.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.Output.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovComponentStats(uint64(l))
		}
	}
	l = m.FlowStats.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	return n
}

func (m *InputStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NumTuples.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.WaitTime.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	return n
}

func (m *NetworkRxStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Latency.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.WaitTime.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.DeserializationTime.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.TuplesReceived.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.BytesReceived.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.MessagesReceived.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	return n
}

func (m *NetworkTxStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TuplesSent.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.BytesSent.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.MessagesSent.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	return n
}

func (m *KVStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BytesRead.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.TuplesRead.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.KVTime.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.ContentionTime.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.NumMvccKeys.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.NumSeeks.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	return n
}

func (m *ExecStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExecTime.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.MaxAllocatedMem.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.MaxAllocatedDisk.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	return n
}

func (m *OutputStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NumBatches.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.NumTuples.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	return n
}

func (m *FlowStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MaxMemUsage.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.MaxDiskUsage.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	return n
}

func sovComponentStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComponentStats(x uint64) (n int) {
	return sovComponentStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ComponentID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FlowID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ComponentID_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SQLInstanceID", wireType)
			}
			m.SQLInstanceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SQLInstanceID |= github_com_cockroachdb_cockroach_pkg_base.SQLInstanceID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Component.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetRx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetRx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KV", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KV.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Exec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, InputStats{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FlowStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTuples", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NumTuples.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WaitTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkRxStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkRxStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkRxStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Latency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WaitTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeserializationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeserializationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TuplesReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TuplesReceived.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BytesReceived.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessagesReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MessagesReceived.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkTxStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkTxStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkTxStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TuplesSent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TuplesSent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesSent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BytesSent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessagesSent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MessagesSent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KVStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRead", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BytesRead.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TuplesRead", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TuplesRead.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KVTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KVTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContentionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumMvccKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NumMvccKeys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSeeks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NumSeeks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExecTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedMem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxAllocatedMem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedDisk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxAllocatedDisk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutputStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutputStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutputStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NumBatches.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTuples", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NumTuples.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMemUsage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxMemUsage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDiskUsage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComponentStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxDiskUsage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComponentStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComponentStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComponentStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComponentStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComponentStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComponentStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComponentStats = fmt.Errorf("proto: unexpected end of group")
)
