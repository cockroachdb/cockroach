// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/execinfrapb/component_stats.proto

package execinfrapb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ComponentStats contains statistics for an execution component. A component is
// an arbitrary unit in the execution infrastructure; it can correspond to an
// operator or a stream.
//
// Depending on the component, not all statistics apply. For all fields, the zero
// value indicates that the particular stat is not available.
type ComponentStats struct {
	ComponentID int32          `protobuf:"varint,1,opt,name=component_id,json=componentId" json:"component_id"`
	NetRx       NetworkRxStats `protobuf:"bytes,2,opt,name=net_rx,json=netRx" json:"net_rx"`
	NetTx       NetworkTxStats `protobuf:"bytes,3,opt,name=net_tx,json=netTx" json:"net_tx"`
	KV          KVStats        `protobuf:"bytes,4,opt,name=kv" json:"kv"`
	Exec        ExecStats      `protobuf:"bytes,5,opt,name=exec" json:"exec"`
	Output      OutputStats    `protobuf:"bytes,6,opt,name=output" json:"output"`
	// Stats for the inputs of an operator (only in the row execution engine).
	Inputs []InputStats `protobuf:"bytes,7,rep,name=inputs" json:"inputs"`
}

func (m *ComponentStats) Reset()         { *m = ComponentStats{} }
func (m *ComponentStats) String() string { return proto.CompactTextString(m) }
func (*ComponentStats) ProtoMessage()    {}
func (*ComponentStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_component_stats_df57d1dacf88238d, []int{0}
}
func (m *ComponentStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ComponentStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentStats.Merge(dst, src)
}
func (m *ComponentStats) XXX_Size() int {
	return m.Size()
}
func (m *ComponentStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentStats.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentStats proto.InternalMessageInfo

// InputStats contains statistics about the rows received as an input to a
// processor. Currently only used in the row execution engine.
type InputStats struct {
	NumTuples IntValue `protobuf:"varint,1,opt,name=num_tuples,json=numTuples,customtype=IntValue" json:"num_tuples"`
	// Cumulated time spent waiting for rows from the input operator.
	WaitTime TimeValue `protobuf:"bytes,2,opt,name=wait_time,json=waitTime" json:"wait_time"`
}

func (m *InputStats) Reset()         { *m = InputStats{} }
func (m *InputStats) String() string { return proto.CompactTextString(m) }
func (*InputStats) ProtoMessage()    {}
func (*InputStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_component_stats_df57d1dacf88238d, []int{1}
}
func (m *InputStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *InputStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputStats.Merge(dst, src)
}
func (m *InputStats) XXX_Size() int {
	return m.Size()
}
func (m *InputStats) XXX_DiscardUnknown() {
	xxx_messageInfo_InputStats.DiscardUnknown(m)
}

var xxx_messageInfo_InputStats proto.InternalMessageInfo

// NetworkRxStats contains statistics for components that receive row data
// over the network. Note: Rx is shorthand for Receive.
type NetworkRxStats struct {
	// Observed network latency (round-trip time between the two nodes).
	Latency TimeValue `protobuf:"bytes,1,opt,name=latency" json:"latency"`
	// Cumulated time spent waiting to receive or transmit tuple data.
	WaitTime TimeValue `protobuf:"bytes,2,opt,name=wait_time,json=waitTime" json:"wait_time"`
	// Time spent deserializing network data.
	DeserializationTime TimeValue `protobuf:"bytes,3,opt,name=deserialization_time,json=deserializationTime" json:"deserialization_time"`
	TuplesReceived      IntValue  `protobuf:"varint,4,opt,name=tuples_received,json=tuplesReceived,customtype=IntValue" json:"tuples_received"`
	BytesReceived       IntValue  `protobuf:"varint,5,opt,name=bytes_received,json=bytesReceived,customtype=IntValue" json:"bytes_received"`
}

func (m *NetworkRxStats) Reset()         { *m = NetworkRxStats{} }
func (m *NetworkRxStats) String() string { return proto.CompactTextString(m) }
func (*NetworkRxStats) ProtoMessage()    {}
func (*NetworkRxStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_component_stats_df57d1dacf88238d, []int{2}
}
func (m *NetworkRxStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkRxStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *NetworkRxStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkRxStats.Merge(dst, src)
}
func (m *NetworkRxStats) XXX_Size() int {
	return m.Size()
}
func (m *NetworkRxStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkRxStats.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkRxStats proto.InternalMessageInfo

// NetworkTxStats contains statistics for components that send row data over the
// network. Note: Tx is shorthand for Transmit.
type NetworkTxStats struct {
	TuplesSent IntValue `protobuf:"varint,1,opt,name=tuples_sent,json=tuplesSent,customtype=IntValue" json:"tuples_sent"`
	BytesSent  IntValue `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent,customtype=IntValue" json:"bytes_sent"`
}

func (m *NetworkTxStats) Reset()         { *m = NetworkTxStats{} }
func (m *NetworkTxStats) String() string { return proto.CompactTextString(m) }
func (*NetworkTxStats) ProtoMessage()    {}
func (*NetworkTxStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_component_stats_df57d1dacf88238d, []int{3}
}
func (m *NetworkTxStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkTxStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *NetworkTxStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkTxStats.Merge(dst, src)
}
func (m *NetworkTxStats) XXX_Size() int {
	return m.Size()
}
func (m *NetworkTxStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkTxStats.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkTxStats proto.InternalMessageInfo

// KVStats contains statistics for components that perform KV operations.
type KVStats struct {
	BytesRead  IntValue `protobuf:"varint,1,opt,name=bytes_read,json=bytesRead,customtype=IntValue" json:"bytes_read"`
	TuplesRead IntValue `protobuf:"varint,2,opt,name=tuples_read,json=tuplesRead,customtype=IntValue" json:"tuples_read"`
	// Cumulated time spent waiting for a KV request. This includes disk IO time
	// and potentially network time (if any of the keys are not local).
	KVTime TimeValue `protobuf:"bytes,3,opt,name=kv_time,json=kvTime" json:"kv_time"`
}

func (m *KVStats) Reset()         { *m = KVStats{} }
func (m *KVStats) String() string { return proto.CompactTextString(m) }
func (*KVStats) ProtoMessage()    {}
func (*KVStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_component_stats_df57d1dacf88238d, []int{4}
}
func (m *KVStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *KVStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVStats.Merge(dst, src)
}
func (m *KVStats) XXX_Size() int {
	return m.Size()
}
func (m *KVStats) XXX_DiscardUnknown() {
	xxx_messageInfo_KVStats.DiscardUnknown(m)
}

var xxx_messageInfo_KVStats proto.InternalMessageInfo

// ExecStats contains statistics about the execution of an components.
type ExecStats struct {
	// Time spent executing the component.
	ExecTime TimeValue `protobuf:"bytes,1,opt,name=exec_time,json=execTime" json:"exec_time"`
	// Maximum memory allocated by the component.
	MaxAllocatedMem IntValue `protobuf:"varint,2,opt,name=max_allocated_mem,json=maxAllocatedMem,customtype=IntValue" json:"max_allocated_mem"`
	// Maximum scratch disk allocated by the component.
	MaxAllocatedDisk IntValue `protobuf:"varint,3,opt,name=max_allocated_disk,json=maxAllocatedDisk,customtype=IntValue" json:"max_allocated_disk"`
}

func (m *ExecStats) Reset()         { *m = ExecStats{} }
func (m *ExecStats) String() string { return proto.CompactTextString(m) }
func (*ExecStats) ProtoMessage()    {}
func (*ExecStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_component_stats_df57d1dacf88238d, []int{5}
}
func (m *ExecStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ExecStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecStats.Merge(dst, src)
}
func (m *ExecStats) XXX_Size() int {
	return m.Size()
}
func (m *ExecStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecStats.DiscardUnknown(m)
}

var xxx_messageInfo_ExecStats proto.InternalMessageInfo

// OutputStats contains statistics about the output (results) of an component.
type OutputStats struct {
	// Number of batches produced by the component.
	NumBatches IntValue `protobuf:"varint,1,opt,name=num_batches,json=numBatches,customtype=IntValue" json:"num_batches"`
	// Number of tuples produced by the component.
	NumTuples IntValue `protobuf:"varint,2,opt,name=num_tuples,json=numTuples,customtype=IntValue" json:"num_tuples"`
}

func (m *OutputStats) Reset()         { *m = OutputStats{} }
func (m *OutputStats) String() string { return proto.CompactTextString(m) }
func (*OutputStats) ProtoMessage()    {}
func (*OutputStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_component_stats_df57d1dacf88238d, []int{6}
}
func (m *OutputStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutputStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *OutputStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputStats.Merge(dst, src)
}
func (m *OutputStats) XXX_Size() int {
	return m.Size()
}
func (m *OutputStats) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputStats.DiscardUnknown(m)
}

var xxx_messageInfo_OutputStats proto.InternalMessageInfo

// TimeValue stores an optional time.Duration, used in the ComponentStats
// message.
//
// The underlying value is the logical value plus 1, so that zero remains the
// special case of having no value.
type TimeValue struct {
	// RawValue is the TimeValue's underlying value.
	// DO NOT ACCESS THIS DIRECTLY. Use HasValue and Value instead.
	RawValue time.Duration `protobuf:"bytes,1,opt,name=raw_value,json=rawValue,stdduration" json:"raw_value"`
}

func (m *TimeValue) Reset()      { *m = TimeValue{} }
func (*TimeValue) ProtoMessage() {}
func (*TimeValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_component_stats_df57d1dacf88238d, []int{7}
}
func (m *TimeValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *TimeValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeValue.Merge(dst, src)
}
func (m *TimeValue) XXX_Size() int {
	return m.Size()
}
func (m *TimeValue) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeValue.DiscardUnknown(m)
}

var xxx_messageInfo_TimeValue proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ComponentStats)(nil), "cockroach.sql.distsqlrun.ComponentStats")
	proto.RegisterType((*InputStats)(nil), "cockroach.sql.distsqlrun.InputStats")
	proto.RegisterType((*NetworkRxStats)(nil), "cockroach.sql.distsqlrun.NetworkRxStats")
	proto.RegisterType((*NetworkTxStats)(nil), "cockroach.sql.distsqlrun.NetworkTxStats")
	proto.RegisterType((*KVStats)(nil), "cockroach.sql.distsqlrun.KVStats")
	proto.RegisterType((*ExecStats)(nil), "cockroach.sql.distsqlrun.ExecStats")
	proto.RegisterType((*OutputStats)(nil), "cockroach.sql.distsqlrun.OutputStats")
	proto.RegisterType((*TimeValue)(nil), "cockroach.sql.distsqlrun.TimeValue")
}
func (m *ComponentStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.ComponentID))
	dAtA[i] = 0x12
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.NetRx.Size()))
	n1, err := m.NetRx.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.NetTx.Size()))
	n2, err := m.NetTx.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x22
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.KV.Size()))
	n3, err := m.KV.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x2a
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.Exec.Size()))
	n4, err := m.Exec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x32
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.Output.Size()))
	n5, err := m.Output.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.Inputs) > 0 {
		for _, msg := range m.Inputs {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintComponentStats(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InputStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.NumTuples))
	dAtA[i] = 0x12
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.WaitTime.Size()))
	n6, err := m.WaitTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *NetworkRxStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkRxStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.Latency.Size()))
	n7, err := m.Latency.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x12
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.WaitTime.Size()))
	n8, err := m.WaitTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x1a
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.DeserializationTime.Size()))
	n9, err := m.DeserializationTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x20
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.TuplesReceived))
	dAtA[i] = 0x28
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.BytesReceived))
	return i, nil
}

func (m *NetworkTxStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkTxStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.TuplesSent))
	dAtA[i] = 0x10
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.BytesSent))
	return i, nil
}

func (m *KVStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.BytesRead))
	dAtA[i] = 0x10
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.TuplesRead))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.KVTime.Size()))
	n10, err := m.KVTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func (m *ExecStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.ExecTime.Size()))
	n11, err := m.ExecTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x10
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.MaxAllocatedMem))
	dAtA[i] = 0x18
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.MaxAllocatedDisk))
	return i, nil
}

func (m *OutputStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutputStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.NumBatches))
	dAtA[i] = 0x10
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(m.NumTuples))
	return i, nil
}

func (m *TimeValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintComponentStats(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.RawValue)))
	n12, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.RawValue, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	return i, nil
}

func encodeVarintComponentStats(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ComponentStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovComponentStats(uint64(m.ComponentID))
	l = m.NetRx.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.NetTx.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.KV.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.Exec.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.Output.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovComponentStats(uint64(l))
		}
	}
	return n
}

func (m *InputStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovComponentStats(uint64(m.NumTuples))
	l = m.WaitTime.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	return n
}

func (m *NetworkRxStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Latency.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.WaitTime.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	l = m.DeserializationTime.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	n += 1 + sovComponentStats(uint64(m.TuplesReceived))
	n += 1 + sovComponentStats(uint64(m.BytesReceived))
	return n
}

func (m *NetworkTxStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovComponentStats(uint64(m.TuplesSent))
	n += 1 + sovComponentStats(uint64(m.BytesSent))
	return n
}

func (m *KVStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovComponentStats(uint64(m.BytesRead))
	n += 1 + sovComponentStats(uint64(m.TuplesRead))
	l = m.KVTime.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	return n
}

func (m *ExecStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExecTime.Size()
	n += 1 + l + sovComponentStats(uint64(l))
	n += 1 + sovComponentStats(uint64(m.MaxAllocatedMem))
	n += 1 + sovComponentStats(uint64(m.MaxAllocatedDisk))
	return n
}

func (m *OutputStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovComponentStats(uint64(m.NumBatches))
	n += 1 + sovComponentStats(uint64(m.NumTuples))
	return n
}

func (m *TimeValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.RawValue)
	n += 1 + l + sovComponentStats(uint64(l))
	return n
}

func sovComponentStats(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozComponentStats(x uint64) (n int) {
	return sovComponentStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ComponentStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentID", wireType)
			}
			m.ComponentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComponentID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetRx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetRx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KV", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KV.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Exec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, InputStats{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTuples", wireType)
			}
			m.NumTuples = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTuples |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WaitTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkRxStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkRxStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkRxStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Latency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WaitTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeserializationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeserializationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TuplesReceived", wireType)
			}
			m.TuplesReceived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TuplesReceived |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesReceived", wireType)
			}
			m.BytesReceived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesReceived |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkTxStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkTxStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkTxStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TuplesSent", wireType)
			}
			m.TuplesSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TuplesSent |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesSent", wireType)
			}
			m.BytesSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesSent |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KVStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRead", wireType)
			}
			m.BytesRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesRead |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TuplesRead", wireType)
			}
			m.TuplesRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TuplesRead |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KVTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KVTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExecTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedMem", wireType)
			}
			m.MaxAllocatedMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllocatedMem |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedDisk", wireType)
			}
			m.MaxAllocatedDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllocatedDisk |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutputStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutputStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutputStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBatches", wireType)
			}
			m.NumBatches = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBatches |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTuples", wireType)
			}
			m.NumTuples = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTuples |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponentStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.RawValue, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponentStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComponentStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComponentStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComponentStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponentStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthComponentStats
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowComponentStats
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipComponentStats(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthComponentStats = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComponentStats   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("sql/execinfrapb/component_stats.proto", fileDescriptor_component_stats_df57d1dacf88238d)
}

var fileDescriptor_component_stats_df57d1dacf88238d = []byte{
	// 753 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcb, 0x6e, 0xd3, 0x4c,
	0x18, 0x86, 0x63, 0xe7, 0x3c, 0xf9, 0xff, 0xb4, 0x4c, 0xbb, 0x30, 0x5d, 0x38, 0x25, 0x50, 0x29,
	0x1b, 0x1c, 0xd1, 0x05, 0x08, 0x44, 0x11, 0xa4, 0x2d, 0x52, 0x54, 0x0e, 0x92, 0x1b, 0x65, 0x81,
	0x90, 0xac, 0x89, 0x3d, 0x4d, 0x2d, 0xdb, 0xe3, 0xc4, 0x1e, 0x27, 0x2e, 0x7b, 0xf6, 0x2c, 0xbb,
	0xe4, 0x3e, 0xb8, 0x81, 0x2e, 0xcb, 0xae, 0x42, 0xa2, 0x40, 0x7a, 0x01, 0xdc, 0x02, 0x9a, 0xb1,
	0x93, 0xba, 0xa5, 0x2e, 0x44, 0x62, 0x97, 0xd8, 0xef, 0xfb, 0xcc, 0xe7, 0xef, 0x34, 0x60, 0xcd,
	0x1f, 0xda, 0x4d, 0x1c, 0x62, 0xdd, 0x24, 0x7b, 0x1e, 0x1a, 0xf4, 0x9a, 0xba, 0xeb, 0x0c, 0x5c,
	0x82, 0x09, 0xd5, 0x7c, 0x8a, 0xa8, 0xaf, 0x0c, 0x3c, 0x97, 0xba, 0x50, 0xd2, 0x5d, 0xdd, 0xf2,
	0x5c, 0xa4, 0xef, 0x2b, 0xfe, 0xd0, 0x56, 0x0c, 0xd3, 0xa7, 0xfe, 0xd0, 0xf6, 0x02, 0xb2, 0xb2,
	0xdc, 0x77, 0xfb, 0x2e, 0x17, 0x35, 0xd9, 0xaf, 0x48, 0xbf, 0x22, 0xf7, 0x5d, 0xb7, 0x6f, 0xe3,
	0x26, 0xff, 0xd7, 0x0b, 0xf6, 0x9a, 0x46, 0xe0, 0x21, 0x6a, 0xba, 0x24, 0x7a, 0x5f, 0xff, 0x9a,
	0x05, 0xd5, 0xcd, 0xe9, 0x49, 0xbb, 0xec, 0x20, 0x78, 0x1f, 0xfc, 0x77, 0x7e, 0xb6, 0x69, 0x48,
	0xc2, 0xaa, 0xd0, 0xc8, 0xb7, 0x96, 0x8e, 0x4e, 0x6b, 0x99, 0xc9, 0x69, 0xad, 0x32, 0x53, 0xb7,
	0xb7, 0xd4, 0xca, 0x4c, 0xd8, 0x36, 0xe0, 0x36, 0x28, 0x10, 0x4c, 0x35, 0x2f, 0x94, 0xc4, 0x55,
	0xa1, 0x51, 0x59, 0x6f, 0x28, 0x69, 0xb1, 0x2a, 0xaf, 0x30, 0x1d, 0xbb, 0x9e, 0xa5, 0x86, 0xfc,
	0xc4, 0x56, 0x8e, 0xb1, 0xd5, 0x3c, 0xc1, 0x54, 0x0d, 0xa7, 0x18, 0x1a, 0x4a, 0xd9, 0xbf, 0xc4,
	0x74, 0x7e, 0xc3, 0x74, 0x42, 0xb8, 0x01, 0x44, 0x6b, 0x24, 0xe5, 0x38, 0xe2, 0x56, 0x3a, 0x62,
	0xa7, 0x1b, 0x79, 0x41, 0xfc, 0x79, 0xe2, 0x4e, 0x57, 0x15, 0xad, 0x11, 0xdc, 0x00, 0x39, 0x56,
	0x0c, 0x29, 0xcf, 0x01, 0xb7, 0xd3, 0x01, 0xdb, 0x21, 0xd6, 0x93, 0xc7, 0x73, 0x1b, 0xdc, 0x04,
	0x05, 0x37, 0xa0, 0x83, 0x80, 0x4a, 0x05, 0x0e, 0x58, 0x4b, 0x07, 0xbc, 0xe6, 0xba, 0x24, 0x22,
	0xb6, 0xc2, 0x16, 0x28, 0x98, 0x64, 0x10, 0x50, 0x5f, 0x2a, 0xae, 0x66, 0x1b, 0x95, 0xf5, 0x3b,
	0xe9, 0x90, 0x36, 0xb9, 0xcc, 0x88, 0x9c, 0xf5, 0xf7, 0x02, 0x00, 0xe7, 0x2f, 0x61, 0x13, 0x00,
	0x12, 0x38, 0x1a, 0x0d, 0x06, 0x36, 0xf6, 0x79, 0x65, 0x73, 0xad, 0x45, 0x66, 0xf8, 0x72, 0x5a,
	0x2b, 0xb5, 0x09, 0xed, 0x22, 0x3b, 0xc0, 0x6a, 0x99, 0x04, 0x4e, 0x87, 0x4b, 0xe0, 0x73, 0x50,
	0x1e, 0x23, 0x93, 0x6a, 0xd4, 0x74, 0x70, 0x5c, 0xd7, 0x6b, 0x92, 0xd1, 0x31, 0x1d, 0xcc, 0x11,
	0x71, 0x14, 0x25, 0xe6, 0x65, 0x0f, 0xeb, 0x3f, 0x45, 0x50, 0xbd, 0x58, 0x75, 0xb8, 0x09, 0x8a,
	0x36, 0xa2, 0x98, 0xe8, 0x07, 0x3c, 0x90, 0xb9, 0xc0, 0x53, 0xe7, 0xbf, 0x8a, 0x0f, 0xbe, 0x05,
	0xcb, 0x06, 0xf6, 0xb1, 0x67, 0x22, 0xdb, 0x7c, 0xc7, 0x07, 0x24, 0x42, 0x66, 0xe7, 0x45, 0x2e,
	0x5d, 0xc2, 0x70, 0xfa, 0x43, 0xb0, 0x10, 0xa5, 0x5c, 0xf3, 0xb0, 0x8e, 0xcd, 0x11, 0x36, 0x78,
	0x67, 0x5e, 0x95, 0xfb, 0x6a, 0x24, 0x54, 0x63, 0x1d, 0x7c, 0x00, 0xaa, 0xbd, 0x03, 0x9a, 0x74,
	0xe6, 0x53, 0x9c, 0xff, 0x73, 0xdd, 0xd4, 0x58, 0xa7, 0xb3, 0x84, 0xc7, 0xf3, 0x01, 0xef, 0x81,
	0x4a, 0x1c, 0x85, 0x8f, 0x09, 0x4d, 0xad, 0x3e, 0x88, 0x44, 0xbb, 0x98, 0x50, 0xd6, 0x2f, 0xd1,
	0xe9, 0xdc, 0x21, 0xa6, 0xf5, 0x0b, 0xd7, 0x30, 0x43, 0xfd, 0x93, 0x00, 0x8a, 0xf1, 0x4c, 0x9d,
	0x9b, 0x3d, 0x8c, 0x8c, 0xf4, 0x66, 0x8b, 0xc3, 0x46, 0x46, 0x22, 0x40, 0xee, 0x10, 0xaf, 0x0f,
	0x90, 0x5b, 0x5e, 0x80, 0xa2, 0x35, 0x9a, 0xbb, 0x54, 0xd5, 0x78, 0xda, 0x0b, 0x3b, 0x5d, 0xf6,
	0x50, 0x2d, 0x58, 0x23, 0xde, 0xa5, 0x9f, 0x05, 0x50, 0x9e, 0x0d, 0x34, 0xeb, 0x2d, 0x36, 0xcc,
	0x11, 0x7d, 0xee, 0x16, 0x2d, 0x31, 0x2f, 0xaf, 0xfe, 0x63, 0x70, 0xc3, 0x41, 0xa1, 0x86, 0x6c,
	0xdb, 0xd5, 0x11, 0xc5, 0x86, 0xe6, 0x60, 0x27, 0xf5, 0xe3, 0x16, 0x1c, 0x14, 0x3e, 0x9b, 0x2a,
	0x5f, 0x62, 0x07, 0x3e, 0x01, 0xf0, 0xa2, 0xdb, 0x30, 0x7d, 0x8b, 0x7f, 0xec, 0x55, 0xf6, 0xc5,
	0xa4, 0x7d, 0xcb, 0xf4, 0xad, 0xfa, 0x10, 0x54, 0x12, 0x2b, 0x86, 0xe5, 0x98, 0x6d, 0x80, 0x1e,
	0xa2, 0xfa, 0xfe, 0x35, 0x2b, 0x80, 0xad, 0x89, 0x56, 0xa4, 0xb9, 0xb4, 0x34, 0xc4, 0x3f, 0x2e,
	0x8d, 0xfa, 0x2e, 0x28, 0xcf, 0xb2, 0x01, 0x9f, 0x82, 0xb2, 0x87, 0xc6, 0xda, 0x88, 0xfd, 0x89,
	0xb3, 0x78, 0x53, 0x89, 0x6e, 0x25, 0x65, 0x7a, 0x2b, 0x29, 0x5b, 0xf1, 0xad, 0xd4, 0x2a, 0x31,
	0xee, 0xe1, 0xb7, 0x9a, 0xa0, 0x96, 0x3c, 0x34, 0xe6, 0x84, 0x47, 0xb9, 0xc3, 0x8f, 0xb5, 0x4c,
	0xeb, 0xee, 0xd1, 0x0f, 0x39, 0x73, 0x34, 0x91, 0x85, 0xe3, 0x89, 0x2c, 0x9c, 0x4c, 0x64, 0xe1,
	0xfb, 0x44, 0x16, 0x3e, 0x9c, 0xc9, 0x99, 0xe3, 0x33, 0x39, 0x73, 0x72, 0x26, 0x67, 0xde, 0x54,
	0x12, 0xd7, 0xe7, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x12, 0x64, 0x5e, 0xdd, 0x50, 0x07, 0x00,
	0x00,
}
