// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/execinfrapb/logspy.proto

package execinfrapb

/*
	Beware! This package name must not be changed, even though it doesn't match
	the Go package name, because it defines the Protobuf message names which
	can't be changed without breaking backward compatibility.
*/

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// LogSpySpec is a processor spec for "spying" on logs across the cluster.
type LogSpySpec struct {
	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	VModule string `protobuf:"bytes,2,opt,name=vmodule,proto3" json:"vmodule,omitempty"`
}

func (m *LogSpySpec) Reset()         { *m = LogSpySpec{} }
func (m *LogSpySpec) String() string { return proto.CompactTextString(m) }
func (*LogSpySpec) ProtoMessage()    {}
func (*LogSpySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_logspy_200bd0135a3e883b, []int{0}
}
func (m *LogSpySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogSpySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *LogSpySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogSpySpec.Merge(dst, src)
}
func (m *LogSpySpec) XXX_Size() int {
	return m.Size()
}
func (m *LogSpySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_LogSpySpec.DiscardUnknown(m)
}

var xxx_messageInfo_LogSpySpec proto.InternalMessageInfo

// LogEntryBatch represents a batch of serialized messages.
type LogEntryBatch struct {
	Entries   [][]byte                                            `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	Truncated bool                                                `protobuf:"varint,2,opt,name=truncated,proto3" json:"truncated,omitempty"`
	NodeID    github_com_cockroachdb_cockroach_pkg_roachpb.NodeID `protobuf:"varint,3,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
}

func (m *LogEntryBatch) Reset()         { *m = LogEntryBatch{} }
func (m *LogEntryBatch) String() string { return proto.CompactTextString(m) }
func (*LogEntryBatch) ProtoMessage()    {}
func (*LogEntryBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_logspy_200bd0135a3e883b, []int{1}
}
func (m *LogEntryBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogEntryBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *LogEntryBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntryBatch.Merge(dst, src)
}
func (m *LogEntryBatch) XXX_Size() int {
	return m.Size()
}
func (m *LogEntryBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntryBatch.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntryBatch proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LogSpySpec)(nil), "cockroach.sql.distsqlrun.LogSpySpec")
	proto.RegisterType((*LogEntryBatch)(nil), "cockroach.sql.distsqlrun.LogEntryBatch")
}
func (m *LogSpySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogSpySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pattern) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogspy(dAtA, i, uint64(len(m.Pattern)))
		i += copy(dAtA[i:], m.Pattern)
	}
	if len(m.VModule) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLogspy(dAtA, i, uint64(len(m.VModule)))
		i += copy(dAtA[i:], m.VModule)
	}
	return i, nil
}

func (m *LogEntryBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogEntryBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, b := range m.Entries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLogspy(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Truncated {
		dAtA[i] = 0x10
		i++
		if m.Truncated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NodeID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLogspy(dAtA, i, uint64(m.NodeID))
	}
	return i, nil
}

func encodeVarintLogspy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LogSpySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovLogspy(uint64(l))
	}
	l = len(m.VModule)
	if l > 0 {
		n += 1 + l + sovLogspy(uint64(l))
	}
	return n
}

func (m *LogEntryBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, b := range m.Entries {
			l = len(b)
			n += 1 + l + sovLogspy(uint64(l))
		}
	}
	if m.Truncated {
		n += 2
	}
	if m.NodeID != 0 {
		n += 1 + sovLogspy(uint64(m.NodeID))
	}
	return n
}

func sovLogspy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLogspy(x uint64) (n int) {
	return sovLogspy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogSpySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogspy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogSpySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogSpySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogspy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogspy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VModule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogspy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogspy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VModule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogspy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogspy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogEntryBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogspy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogEntryBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogEntryBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogspy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogspy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, make([]byte, postIndex-iNdEx))
			copy(m.Entries[len(m.Entries)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Truncated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogspy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Truncated = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogspy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogspy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogspy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogspy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogspy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogspy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogspy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLogspy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLogspy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLogspy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLogspy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogspy   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("sql/execinfrapb/logspy.proto", fileDescriptor_logspy_200bd0135a3e883b)
}

var fileDescriptor_logspy_200bd0135a3e883b = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x50, 0xbf, 0x4e, 0xc2, 0x40,
	0x18, 0xef, 0x49, 0xa4, 0x72, 0xe8, 0xd2, 0x38, 0x34, 0x86, 0x1c, 0x84, 0xc4, 0x84, 0xc5, 0x76,
	0xe0, 0x09, 0x6c, 0x74, 0x20, 0x01, 0x87, 0x92, 0x38, 0xb0, 0x98, 0xf6, 0xee, 0x3c, 0x1a, 0xca,
	0x7d, 0xc7, 0xf5, 0x6a, 0xe4, 0x2d, 0x7c, 0x07, 0x5f, 0x86, 0x91, 0x91, 0x89, 0x68, 0x79, 0x0b,
	0x27, 0xd3, 0x92, 0x8a, 0xdb, 0xef, 0xdf, 0xf7, 0x4b, 0xbe, 0x1f, 0xee, 0x64, 0xab, 0xd4, 0xe7,
	0xef, 0x9c, 0x26, 0xf2, 0x55, 0x47, 0x2a, 0xf6, 0x53, 0x10, 0x99, 0x5a, 0x7b, 0x4a, 0x83, 0x01,
	0xc7, 0xa5, 0x40, 0x17, 0x1a, 0x22, 0x3a, 0xf7, 0xb2, 0x55, 0xea, 0xb1, 0x24, 0x33, 0xd9, 0x2a,
	0xd5, 0xb9, 0xbc, 0xb9, 0x16, 0x20, 0xa0, 0x0a, 0xf9, 0x25, 0x3a, 0xe6, 0xfb, 0x13, 0x8c, 0xc7,
	0x20, 0xa6, 0x6a, 0x3d, 0x55, 0x9c, 0x3a, 0x2e, 0xb6, 0x55, 0x64, 0x0c, 0xd7, 0xd2, 0x45, 0x3d,
	0x34, 0x68, 0x85, 0x35, 0x75, 0x6e, 0xb1, 0xfd, 0xb6, 0x04, 0x96, 0xa7, 0xdc, 0x3d, 0x2b, 0x9d,
	0xa0, 0x5d, 0xec, 0xbb, 0xf6, 0xf3, 0xa4, 0x92, 0xc2, 0xda, 0xeb, 0x7f, 0x22, 0x7c, 0x35, 0x06,
	0xf1, 0x28, 0x8d, 0x5e, 0x07, 0x91, 0xa1, 0xf3, 0xb2, 0x92, 0x4b, 0xa3, 0x13, 0x9e, 0xb9, 0xa8,
	0xd7, 0x18, 0x5c, 0x86, 0x35, 0x75, 0x3a, 0xb8, 0x65, 0x74, 0x2e, 0x69, 0x64, 0x38, 0xab, 0x4a,
	0x2f, 0xc2, 0x93, 0xe0, 0xcc, 0xb0, 0x2d, 0x81, 0xf1, 0x97, 0x84, 0xb9, 0x8d, 0x1e, 0x1a, 0x9c,
	0x07, 0xf7, 0xc5, 0xbe, 0xdb, 0x7c, 0x02, 0xc6, 0x47, 0x0f, 0x3f, 0xfb, 0xee, 0x50, 0x24, 0x66,
	0x9e, 0xc7, 0x1e, 0x85, 0xa5, 0xff, 0xf7, 0x32, 0x8b, 0x4f, 0xd8, 0x57, 0x0b, 0xe1, 0x57, 0x48,
	0xc5, 0xde, 0xf1, 0x2c, 0x6c, 0x96, 0x8d, 0x23, 0x16, 0xdc, 0x6d, 0xbe, 0x89, 0xb5, 0x29, 0x08,
	0xda, 0x16, 0x04, 0xed, 0x0a, 0x82, 0xbe, 0x0a, 0x82, 0x3e, 0x0e, 0xc4, 0xda, 0x1e, 0x88, 0xb5,
	0x3b, 0x10, 0x6b, 0xd6, 0xfe, 0x37, 0x70, 0xdc, 0xac, 0xa6, 0x1a, 0xfe, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x1d, 0x41, 0xd9, 0xc7, 0x7a, 0x01, 0x00, 0x00,
}
