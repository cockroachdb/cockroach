// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/sessiondatapb/local_only_session_data.proto

package sessiondatapb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LocalOnlySessionData contains the serializable components of session
// parameters that only influence execution on the gateway nodes.
type LocalOnlySessionData struct {
	// SaveTablesPrefix indicates that a table should be created with the
	// given prefix for the output of each subexpression in a query. If
	// SaveTablesPrefix is empty, no tables are created.
	SaveTablesPrefix string `protobuf:"bytes,1,opt,name=save_tables_prefix,json=saveTablesPrefix,proto3" json:"save_tables_prefix,omitempty"`
	// OptimizerFKCascadesLimit is the maximum number of cascading operations that
	// are run for a single query.
	OptimizerFKCascadesLimit int64 `protobuf:"varint,2,opt,name=optimizer_fk_cascades_limit,json=optimizerFkCascadesLimit,proto3" json:"optimizer_fk_cascades_limit,omitempty"`
	// StmtTimeout is the duration a query is permitted to run before it is
	// canceled by the session. If set to 0, there is no timeout.
	StmtTimeout time.Duration `protobuf:"varint,3,opt,name=stmt_timeout,json=stmtTimeout,proto3,casttype=time.Duration" json:"stmt_timeout,omitempty"`
	// IdleInSessionTimeout is the duration a session is permitted to idle before
	// the session is canceled. If set to 0, there is no timeout.
	IdleInSessionTimeout time.Duration `protobuf:"varint,4,opt,name=idle_in_session_timeout,json=idleInSessionTimeout,proto3,casttype=time.Duration" json:"idle_in_session_timeout,omitempty"`
	// IdleInTransactionSessionTimeout is the duration a session is permitted to
	// idle in a transaction before the session is canceled.
	// If set to 0, there is no timeout.
	IdleInTransactionSessionTimeout time.Duration `protobuf:"varint,5,opt,name=idle_in_transaction_session_timeout,json=idleInTransactionSessionTimeout,proto3,casttype=time.Duration" json:"idle_in_transaction_session_timeout,omitempty"`
	// NoticeDisplaySeverity indicates the level of Severity to send notices for the given
	// session. This should ideally be of type pgnotice.DisplaySeverity, but cannot be done
	// due to a circular dependency.
	NoticeDisplaySeverity uint32 `protobuf:"varint,6,opt,name=notice_display_severity,json=noticeDisplaySeverity,proto3" json:"notice_display_severity,omitempty"`
	// ReorderJoinsLimit indicates the number of joins at which the optimizer should
	// stop attempting to reorder.
	ReorderJoinsLimit int64 `protobuf:"varint,7,opt,name=reorder_joins_limit,json=reorderJoinsLimit,proto3" json:"reorder_joins_limit,omitempty"`
	// DefaultTxnPriority indicates the default priority of newly created
	// transactions.
	// NOTE: we'd prefer to use tree.UserPriority here, but doing so would
	// introduce a package dependency cycle.
	DefaultTxnPriority int64 `protobuf:"varint,8,opt,name=default_txn_priority,json=defaultTxnPriority,proto3" json:"default_txn_priority,omitempty"`
	// DefaultTxnReadOnly indicates the default read-only status of newly
	// created transactions.
	DefaultTxnReadOnly bool `protobuf:"varint,9,opt,name=default_txn_read_only,json=defaultTxnReadOnly,proto3" json:"default_txn_read_only,omitempty"`
	// DefaultTxnUseFollowerReads indicates whether transactions should be
	// created by default using an AS OF SYSTEM TIME clause far enough in the
	// past to facilitate reads against followers. If true, transactions will
	// also default to being read-only.
	DefaultTxnUseFollowerReads bool `protobuf:"varint,10,opt,name=default_txn_use_follower_reads,json=defaultTxnUseFollowerReads,proto3" json:"default_txn_use_follower_reads,omitempty"`
	// PartiallyDistributedPlansDisabled indicates whether the partially
	// distributed plans produced by distSQLSpecExecFactory are disabled. It
	// should be set to 'true' only in tests that verify that the old and the
	// new factories return exactly the same physical plans.
	// TODO(yuzefovich): remove it when deleting old sql.execFactory.
	PartiallyDistributedPlansDisabled bool `protobuf:"varint,11,opt,name=partially_distributed_plans_disabled,json=partiallyDistributedPlansDisabled,proto3" json:"partially_distributed_plans_disabled,omitempty"`
	// OptimizerUseHistograms indicates whether we should use histograms for
	// cardinality estimation in the optimizer.
	OptimizerUseHistograms bool `protobuf:"varint,12,opt,name=optimizer_use_histograms,json=optimizerUseHistograms,proto3" json:"optimizer_use_histograms,omitempty"`
	// OptimizerUseMultiColStats indicates whether we should use multi-column
	// statistics for cardinality estimation in the optimizer.
	OptimizerUseMultiColStats bool `protobuf:"varint,13,opt,name=optimizer_use_multi_col_stats,json=optimizerUseMultiColStats,proto3" json:"optimizer_use_multi_col_stats,omitempty"`
	// LocalityOptimizedSearch indicates that the optimizer will try to plan scans
	// and lookup joins in which local nodes (i.e., nodes in the gateway region)
	// are searched for matching rows before remote nodes, in the hope that the
	// execution engine can avoid visiting remote nodes.
	LocalityOptimizedSearch bool `protobuf:"varint,14,opt,name=locality_optimized_search,json=localityOptimizedSearch,proto3" json:"locality_optimized_search,omitempty"`
	// SafeUpdates causes errors when the client
	// sends syntax that may have unwanted side effects.
	SafeUpdates bool `protobuf:"varint,15,opt,name=safe_updates,json=safeUpdates,proto3" json:"safe_updates,omitempty"`
	// PreferLookupJoinsForFKs causes foreign key operations to prefer lookup
	// joins.
	PreferLookupJoinsForFKs bool `protobuf:"varint,16,opt,name=prefer_lookup_joins_for_fks,json=preferLookupJoinsForFks,proto3" json:"prefer_lookup_joins_for_fks,omitempty"`
	// ZigzagJoinEnabled indicates whether the optimizer should try and plan a
	// zigzag join.
	ZigzagJoinEnabled bool `protobuf:"varint,17,opt,name=zigzag_join_enabled,json=zigzagJoinEnabled,proto3" json:"zigzag_join_enabled,omitempty"`
	// RequireExplicitPrimaryKeys indicates whether CREATE TABLE statements should
	// error out if no primary key is provided.
	RequireExplicitPrimaryKeys bool `protobuf:"varint,18,opt,name=require_explicit_primary_keys,json=requireExplicitPrimaryKeys,proto3" json:"require_explicit_primary_keys,omitempty"`
	// ForceSavepointRestart overrides the default SAVEPOINT behavior
	// for compatibility with certain ORMs. When this flag is set,
	// the savepoint name will no longer be compared against the magic
	// identifier `cockroach_restart` in order use a restartable
	// transaction.
	ForceSavepointRestart bool `protobuf:"varint,19,opt,name=force_savepoint_restart,json=forceSavepointRestart,proto3" json:"force_savepoint_restart,omitempty"`
	// AllowPrepareAsOptPlan must be set to allow use of
	//   PREPARE name AS OPT PLAN '...'
	AllowPrepareAsOptPlan bool `protobuf:"varint,20,opt,name=allow_prepare_as_opt_plan,json=allowPrepareAsOptPlan,proto3" json:"allow_prepare_as_opt_plan,omitempty"`
	// TempTablesEnabled indicates whether temporary tables can be created or not.
	TempTablesEnabled bool `protobuf:"varint,21,opt,name=temp_tables_enabled,json=tempTablesEnabled,proto3" json:"temp_tables_enabled,omitempty"`
	// ImplicitPartitioningEnabled indicates whether implicit column partitioning
	// can be created.
	ImplicitColumnPartitioningEnabled bool `protobuf:"varint,22,opt,name=implicit_column_partitioning_enabled,json=implicitColumnPartitioningEnabled,proto3" json:"implicit_column_partitioning_enabled,omitempty"`
	// DropEnumValueEnabled indicates whether enum values can be dropped.
	DropEnumValueEnabled bool `protobuf:"varint,23,opt,name=drop_enum_value_enabled,json=dropEnumValueEnabled,proto3" json:"drop_enum_value_enabled,omitempty"`
	// OverrideMultiRegionZoneConfigEnabled indicates whether zone configurations can be
	// modified for multi-region databases and tables/indexes/partitions.
	OverrideMultiRegionZoneConfigEnabled bool `protobuf:"varint,24,opt,name=override_multi_region_zone_config_enabled,json=overrideMultiRegionZoneConfigEnabled,proto3" json:"override_multi_region_zone_config_enabled,omitempty"`
	// HashShardedIndexesEnabled indicates whether hash sharded indexes can be created.
	HashShardedIndexesEnabled bool `protobuf:"varint,25,opt,name=hash_sharded_indexes_enabled,json=hashShardedIndexesEnabled,proto3" json:"hash_sharded_indexes_enabled,omitempty"`
	// DisallowFullTableScans indicates whether queries that plan full table scans
	// should be rejected.
	DisallowFullTableScans bool `protobuf:"varint,26,opt,name=disallow_full_table_scans,json=disallowFullTableScans,proto3" json:"disallow_full_table_scans,omitempty"`
	// ImplicitSelectForUpdate is true if FOR UPDATE locking may be used during
	// the row-fetch phase of mutation statements.
	ImplicitSelectForUpdate bool `protobuf:"varint,27,opt,name=implicit_select_for_update,json=implicitSelectForUpdate,proto3" json:"implicit_select_for_update,omitempty"`
	// InsertFastPath is true if the fast path for insert (with VALUES input) may
	// be used.
	InsertFastPath bool `protobuf:"varint,28,opt,name=insert_fast_path,json=insertFastPath,proto3" json:"insert_fast_path,omitempty"`
	// AlterColumnTypeGeneralEnabled is true if ALTER TABLE ... ALTER COLUMN ...
	// TYPE x may be used for general conversions requiring online schema change/
	AlterColumnTypeGeneralEnabled bool `protobuf:"varint,29,opt,name=alter_column_type_general_enabled,json=alterColumnTypeGeneralEnabled,proto3" json:"alter_column_type_general_enabled,omitempty"`
	// SynchronousCommit is a dummy setting for the synchronous_commit var.
	SynchronousCommit bool `protobuf:"varint,30,opt,name=synchronous_commit,json=synchronousCommit,proto3" json:"synchronous_commit,omitempty"`
	// EnableSeqScan is a dummy setting for the enable_seqscan var.
	EnableSeqScan bool `protobuf:"varint,31,opt,name=enable_seq_scan,json=enableSeqScan,proto3" json:"enable_seq_scan,omitempty"`
	// EnableExpressionIndexes indicates whether creating expression indexes is
	// allowed.
	EnableExpressionIndexes bool `protobuf:"varint,32,opt,name=enable_expression_indexes,json=enableExpressionIndexes,proto3" json:"enable_expression_indexes,omitempty"`
	// EnableUniqueWithoutIndexConstraints indicates whether creating unique
	// constraints without an index is allowed.
	// TODO(rytaft): remove this once unique without index constraints are fully
	// supported.
	EnableUniqueWithoutIndexConstraints bool `protobuf:"varint,33,opt,name=enable_unique_without_index_constraints,json=enableUniqueWithoutIndexConstraints,proto3" json:"enable_unique_without_index_constraints,omitempty"`
	// StubCatalogTablesEnabled allows queries against virtual
	// tables that are not yet implemented.
	StubCatalogTablesEnabled bool `protobuf:"varint,34,opt,name=stub_catalog_tables_enabled,json=stubCatalogTablesEnabled,proto3" json:"stub_catalog_tables_enabled,omitempty"`
	// ExperimentalComputedColumnRewrites allows automatic rewriting of computed
	// column expressions in CREATE TABLE and ALTER TABLE statements. See the
	// experimentalComputedColumnRewrites cluster setting for a description of the
	// format.
	ExperimentalComputedColumnRewrites string `protobuf:"bytes,35,opt,name=experimental_computed_column_rewrites,json=experimentalComputedColumnRewrites,proto3" json:"experimental_computed_column_rewrites,omitempty"`
	// CopyPartitioningWhenDeinterleavingTable indicates that when running an
	// ALTER PRIMARY KEY that retains the same columns but removes any
	// interleaving that zone configurations and partitioning from the root
	// of that interleave should be applied to the new primary index.
	CopyPartitioningWhenDeinterleavingTable bool `protobuf:"varint,36,opt,name=copy_partitioning_when_deinterleaving_table,json=copyPartitioningWhenDeinterleavingTable,proto3" json:"copy_partitioning_when_deinterleaving_table,omitempty"`
	// EnableStreamReplication indicates whether to allow setting up a replication
	// stream.
	EnableStreamReplication bool `protobuf:"varint,37,opt,name=enable_stream_replication,json=enableStreamReplication,proto3" json:"enable_stream_replication,omitempty"`
	// ResultsBufferSize specifies the size at which the pgwire results buffer
	// will self-flush.
	ResultsBufferSize int64 `protobuf:"varint,38,opt,name=results_buffer_size,json=resultsBufferSize,proto3" json:"results_buffer_size,omitempty"`
	// ExperimentalDistSQLPlanningMode indicates whether the experimental
	// DistSQL planning driven by the optimizer is enabled.
	ExperimentalDistSQLPlanningMode ExperimentalDistSQLPlanningMode `protobuf:"varint,39,opt,name=experimental_distsql_planning_mode,json=experimentalDistsqlPlanningMode,proto3,casttype=ExperimentalDistSQLPlanningMode" json:"experimental_distsql_planning_mode,omitempty"`
	// DistSQLMode indicates whether to run queries using the distributed
	// execution engine.
	DistSQLMode DistSQLExecMode `protobuf:"varint,40,opt,name=dist_sql_mode,json=distSqlMode,proto3,casttype=DistSQLExecMode" json:"dist_sql_mode,omitempty"`
	// SerialNormalizationMode indicates how to handle the SERIAL pseudo-type.
	SerialNormalizationMode SerialNormalizationMode `protobuf:"varint,41,opt,name=serial_normalization_mode,json=serialNormalizationMode,proto3,casttype=SerialNormalizationMode" json:"serial_normalization_mode,omitempty"`
	// NewSchemaChangerMode indicates whether to use the new schema changer.
	NewSchemaChangerMode NewSchemaChangerMode `protobuf:"varint,42,opt,name=new_schema_changer_mode,json=newSchemaChangerMode,proto3,casttype=NewSchemaChangerMode" json:"new_schema_changer_mode,omitempty"`
	// SequenceCache stores sequence values which have been cached using the
	// CACHE sequence option.
	SequenceCache SequenceCache `protobuf:"bytes,43,rep,name=sequence_cache,json=sequenceCache,proto3,casttype=SequenceCache" json:"sequence_cache,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *LocalOnlySessionData) Reset()         { *m = LocalOnlySessionData{} }
func (m *LocalOnlySessionData) String() string { return proto.CompactTextString(m) }
func (*LocalOnlySessionData) ProtoMessage()    {}
func (*LocalOnlySessionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_21ead158cf36da28, []int{0}
}
func (m *LocalOnlySessionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalOnlySessionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LocalOnlySessionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalOnlySessionData.Merge(m, src)
}
func (m *LocalOnlySessionData) XXX_Size() int {
	return m.Size()
}
func (m *LocalOnlySessionData) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalOnlySessionData.DiscardUnknown(m)
}

var xxx_messageInfo_LocalOnlySessionData proto.InternalMessageInfo

// SequenceCacheEntry is an entry in a SequenceCache.
type SequenceCacheEntry struct {
	// CachedVersion stores the descpb.DescriptorVersion that cached values are associated with.
	// The version is checked to determine if cache needs to be invalidated. The version is stored as
	// a uint32 to prevent an import cycle with the descpb package.
	CachedVersion uint32 `protobuf:"varint,1,opt,name=cached_version,json=cachedVersion,proto3" json:"cached_version,omitempty"`
	// CurrentValue stores the present value of the sequence to be given out.
	CurrentValue int64 `protobuf:"varint,2,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
	// Increment stores the amount to Increment the currentVal by each time the
	// currentVal is used. This value corresponds to descpb.TableDescriptor_SequenceOpts.Increment.
	Increment int64 `protobuf:"varint,3,opt,name=increment,proto3" json:"increment,omitempty"`
	// NumValues represents the number of values to cache. The cache is considered
	// to be empty when NumValues is 0.
	NumValues int64 `protobuf:"varint,4,opt,name=num_values,json=numValues,proto3" json:"num_values,omitempty"`
}

func (m *SequenceCacheEntry) Reset()         { *m = SequenceCacheEntry{} }
func (m *SequenceCacheEntry) String() string { return proto.CompactTextString(m) }
func (*SequenceCacheEntry) ProtoMessage()    {}
func (*SequenceCacheEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_21ead158cf36da28, []int{1}
}
func (m *SequenceCacheEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SequenceCacheEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SequenceCacheEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequenceCacheEntry.Merge(m, src)
}
func (m *SequenceCacheEntry) XXX_Size() int {
	return m.Size()
}
func (m *SequenceCacheEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SequenceCacheEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SequenceCacheEntry proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LocalOnlySessionData)(nil), "cockroach.sql.sessiondatapb.LocalOnlySessionData")
	proto.RegisterMapType((SequenceCache)(nil), "cockroach.sql.sessiondatapb.LocalOnlySessionData.SequenceCacheEntry")
	proto.RegisterType((*SequenceCacheEntry)(nil), "cockroach.sql.sessiondatapb.SequenceCacheEntry")
}

func init() {
	proto.RegisterFile("sql/sessiondatapb/local_only_session_data.proto", fileDescriptor_21ead158cf36da28)
}

var fileDescriptor_21ead158cf36da28 = []byte{
	// 1645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x97, 0xdd, 0x72, 0x1b, 0xb7,
	0x15, 0xc7, 0xcd, 0xa8, 0x49, 0x63, 0xc8, 0xf4, 0x07, 0x22, 0x87, 0x2b, 0xc9, 0x22, 0x65, 0xd9,
	0x8e, 0x95, 0xa6, 0x95, 0xda, 0xf4, 0x63, 0xdc, 0x74, 0x3a, 0x6d, 0x44, 0x89, 0x75, 0x6a, 0x27,
	0x62, 0x96, 0x72, 0x3c, 0x4d, 0x3b, 0x83, 0x81, 0x76, 0x0f, 0x49, 0x54, 0x58, 0x60, 0x09, 0x60,
	0x25, 0x51, 0x17, 0x7d, 0x86, 0xce, 0xf4, 0xba, 0xef, 0x93, 0xcb, 0x5c, 0xe6, 0x4a, 0xd3, 0xca,
	0x6f, 0xe1, 0x99, 0xce, 0x74, 0x70, 0xb0, 0xcb, 0x0f, 0x5b, 0x71, 0xee, 0x44, 0xfc, 0x7f, 0xe7,
	0xbf, 0xc0, 0xc1, 0x39, 0x00, 0x44, 0xb6, 0xed, 0x48, 0x6e, 0x5b, 0xb0, 0x56, 0x68, 0x95, 0x72,
	0xc7, 0xf3, 0xc3, 0x6d, 0xa9, 0x13, 0x2e, 0x99, 0x56, 0x72, 0xcc, 0x4a, 0x81, 0x79, 0x65, 0x2b,
	0x37, 0xda, 0x69, 0xba, 0x9a, 0xe8, 0xe4, 0xc8, 0x68, 0x9e, 0x0c, 0xb7, 0xec, 0x48, 0x6e, 0xcd,
	0x85, 0xae, 0x2c, 0x0d, 0xf4, 0x40, 0x23, 0xb7, 0xed, 0xff, 0x0a, 0x21, 0x1b, 0xff, 0x6b, 0x90,
	0xa5, 0xa7, 0xde, 0x74, 0x5f, 0xc9, 0x71, 0x2f, 0x04, 0xec, 0x72, 0xc7, 0xe9, 0x4f, 0x09, 0xb5,
	0xfc, 0x18, 0x98, 0xe3, 0x87, 0x12, 0x2c, 0xcb, 0x0d, 0xf4, 0xc5, 0x69, 0x54, 0x5b, 0xaf, 0x6d,
	0x5e, 0x8d, 0x6f, 0x7a, 0xe5, 0x00, 0x85, 0x2e, 0x8e, 0xd3, 0xbf, 0x92, 0x55, 0x9d, 0x3b, 0x91,
	0x89, 0x33, 0x30, 0xac, 0x7f, 0xc4, 0x12, 0x6e, 0x13, 0x9e, 0x82, 0x65, 0x52, 0x64, 0xc2, 0x45,
	0x6f, 0xad, 0xd7, 0x36, 0x17, 0x76, 0xee, 0x5c, 0x9c, 0xb7, 0xa2, 0xfd, 0x0a, 0xeb, 0x3c, 0x69,
	0x97, 0xd0, 0x53, 0xcf, 0xc4, 0xd1, 0xc4, 0xa0, 0x73, 0x34, 0xa7, 0xd0, 0x5f, 0x91, 0x6b, 0xd6,
	0x65, 0x8e, 0x39, 0x91, 0x81, 0x2e, 0x5c, 0xb4, 0x80, 0x6e, 0xb7, 0x5e, 0x9e, 0xb7, 0xea, 0x7e,
	0x68, 0x6b, 0xb7, 0x30, 0xdc, 0x09, 0xad, 0xe2, 0x45, 0x8f, 0x1d, 0x04, 0x8a, 0x3e, 0x26, 0x0d,
	0x91, 0x4a, 0x60, 0x42, 0x4d, 0x52, 0x55, 0x19, 0xfc, 0xe8, 0xfb, 0x0c, 0x96, 0x7c, 0xc4, 0x67,
	0xaa, 0xcc, 0x43, 0xe5, 0xc4, 0xc8, 0xbd, 0xca, 0xc9, 0x19, 0xae, 0x2c, 0x4f, 0x3c, 0xfc, 0x9a,
	0xeb, 0xdb, 0xdf, 0xe7, 0xda, 0x0a, 0xae, 0x07, 0xd3, 0xd8, 0x57, 0x3e, 0xf0, 0x1b, 0xd2, 0x50,
	0xda, 0x89, 0x04, 0x58, 0x2a, 0x6c, 0x2e, 0xb9, 0xdf, 0xdc, 0x63, 0x30, 0xc2, 0x8d, 0xa3, 0x77,
	0xd6, 0x6b, 0x9b, 0xf5, 0xf8, 0x76, 0x90, 0x77, 0x83, 0xda, 0x2b, 0x45, 0xba, 0x45, 0xde, 0x33,
	0xa0, 0x4d, 0x0a, 0x86, 0xfd, 0x5d, 0x0b, 0x55, 0x65, 0xfb, 0xc7, 0x7e, 0x22, 0xf1, 0xad, 0x52,
	0xfa, 0xb3, 0x57, 0x42, 0x22, 0x7f, 0x4e, 0x96, 0x52, 0xe8, 0xf3, 0x42, 0x3a, 0xe6, 0x4e, 0x15,
	0xcb, 0x8d, 0xd0, 0xf8, 0x91, 0x77, 0x31, 0x80, 0x96, 0xda, 0xc1, 0xa9, 0xea, 0x96, 0x0a, 0xfd,
	0x05, 0xb9, 0x3d, 0x1b, 0x61, 0x80, 0xa7, 0x58, 0x7d, 0xd1, 0xd5, 0xf5, 0xda, 0xe6, 0xbb, 0xb3,
	0x21, 0x31, 0xf0, 0xd4, 0xd7, 0x10, 0xdd, 0x21, 0xcd, 0xd9, 0x90, 0xc2, 0x02, 0xeb, 0x6b, 0x29,
	0xf5, 0x09, 0x18, 0x8c, 0xb7, 0x11, 0xc1, 0xd8, 0x95, 0x69, 0xec, 0x33, 0x0b, 0x9d, 0x12, 0xf1,
	0x36, 0x96, 0xee, 0x93, 0xfb, 0x39, 0x37, 0x4e, 0x70, 0x29, 0xc7, 0x3e, 0x27, 0xce, 0x88, 0xc3,
	0xc2, 0x41, 0xca, 0x72, 0xc9, 0x95, 0xf5, 0x23, 0xbe, 0xf8, 0xd2, 0x68, 0x11, 0x9d, 0xee, 0x4e,
	0xd8, 0xdd, 0x29, 0xda, 0xf5, 0xe4, 0x6e, 0x09, 0xd2, 0x47, 0x64, 0x5a, 0x5e, 0x38, 0xa5, 0xa1,
	0xb0, 0x4e, 0x0f, 0x0c, 0xcf, 0x6c, 0x74, 0x0d, 0x4d, 0xde, 0x9f, 0xe8, 0xcf, 0x2c, 0x3c, 0x9e,
	0xa8, 0xf4, 0x8f, 0x64, 0x6d, 0x3e, 0x32, 0x2b, 0xa4, 0x13, 0x2c, 0xd1, 0x92, 0x59, 0xc7, 0x9d,
	0x8d, 0xea, 0x18, 0xbe, 0x3c, 0x1b, 0xfe, 0xb9, 0x47, 0xda, 0x5a, 0xf6, 0x3c, 0x40, 0x3f, 0x21,
	0xcb, 0xd8, 0xb6, 0xc2, 0x8d, 0x59, 0x45, 0xa5, 0xcc, 0x02, 0x37, 0xc9, 0x30, 0xba, 0x8e, 0xd1,
	0x8d, 0x0a, 0xa8, 0xba, 0x23, 0xed, 0xa1, 0x4c, 0xef, 0x92, 0x6b, 0x96, 0xf7, 0x81, 0x15, 0x79,
	0xca, 0x1d, 0xd8, 0xe8, 0x06, 0xe2, 0x8b, 0x7e, 0xec, 0x59, 0x18, 0xa2, 0x7f, 0x21, 0xab, 0xbe,
	0x39, 0xc1, 0x30, 0xa9, 0xf5, 0x51, 0x91, 0x97, 0xa5, 0xd0, 0xd7, 0xbe, 0x11, 0x6d, 0x74, 0xd3,
	0x47, 0xec, 0xac, 0x5e, 0x9c, 0xb7, 0x1a, 0x5d, 0xc4, 0x9e, 0x22, 0x85, 0x55, 0xd1, 0xd1, 0xa6,
	0xf3, 0xc4, 0xc6, 0x8d, 0xfc, 0x32, 0xe1, 0xc8, 0xfa, 0xfa, 0x3a, 0x13, 0x83, 0x33, 0x3e, 0x40,
	0x4f, 0x06, 0x2a, 0x64, 0xfd, 0x16, 0x4e, 0xe2, 0x56, 0x90, 0x3c, 0xbf, 0x17, 0x04, 0xfa, 0x29,
	0x59, 0x33, 0x30, 0x2a, 0x84, 0x01, 0x06, 0xa7, 0xb9, 0x14, 0x89, 0x70, 0xbe, 0xc8, 0x32, 0x6e,
	0xc6, 0xec, 0x08, 0xc6, 0x36, 0xa2, 0x61, 0xe7, 0x4b, 0x68, 0xaf, 0x64, 0xba, 0x01, 0x79, 0x02,
	0x63, 0xeb, 0x5b, 0xa1, 0xaf, 0x4d, 0x02, 0xcc, 0x1f, 0x31, 0xb9, 0x16, 0xca, 0x31, 0x03, 0xd6,
	0x71, 0xe3, 0xa2, 0xf7, 0x30, 0xf8, 0x36, 0xca, 0xbd, 0x4a, 0x8d, 0x83, 0x48, 0x1f, 0x91, 0x65,
	0xee, 0x2b, 0xc8, 0x1f, 0x54, 0x39, 0x37, 0xc0, 0xb8, 0xf5, 0xc9, 0xc6, 0x82, 0x89, 0x96, 0x42,
	0x24, 0x02, 0xdd, 0xa0, 0x7f, 0x6a, 0xf7, 0x73, 0xe7, 0x6b, 0xc4, 0x2f, 0xd2, 0x41, 0x96, 0x57,
	0x07, 0x5d, 0xb5, 0xc8, 0xdb, 0x61, 0x91, 0x5e, 0x0a, 0x27, 0x5d, 0xb5, 0xc8, 0x7d, 0x72, 0x5f,
	0x64, 0xe5, 0xe2, 0x12, 0x2d, 0x8b, 0x4c, 0x31, 0xac, 0x3f, 0xdf, 0xd7, 0x42, 0x0d, 0x26, 0x06,
	0xef, 0x87, 0xda, 0xac, 0xd8, 0x36, 0xa2, 0xdd, 0x19, 0xb2, 0x32, 0xfc, 0x35, 0x69, 0xa4, 0x46,
	0xe7, 0x0c, 0x54, 0x91, 0xb1, 0x63, 0x2e, 0x0b, 0x98, 0x78, 0x34, 0xd0, 0x63, 0xc9, 0xcb, 0x7b,
	0xaa, 0xc8, 0xbe, 0xf2, 0x62, 0x15, 0xf6, 0x9c, 0x7c, 0xa8, 0x8f, 0xc1, 0x18, 0x91, 0x56, 0x35,
	0x69, 0x60, 0xe0, 0xcf, 0xa3, 0x33, 0xad, 0x80, 0x25, 0x5a, 0xf5, 0xc5, 0x74, 0x32, 0x11, 0x1a,
	0xdd, 0xaf, 0x02, 0xb0, 0x40, 0x63, 0xc4, 0xbf, 0xd6, 0x0a, 0xda, 0x08, 0x57, 0xc6, 0x7f, 0x20,
	0x77, 0x86, 0xdc, 0x0e, 0x99, 0x1d, 0x72, 0x93, 0x42, 0xca, 0x84, 0x4a, 0xe1, 0x74, 0x26, 0x33,
	0xcb, 0xa1, 0xe0, 0x3d, 0xd3, 0x0b, 0xc8, 0x67, 0x81, 0xa8, 0x0c, 0x7e, 0x4b, 0x96, 0x7d, 0x87,
	0xe2, 0x76, 0xf4, 0x0b, 0x29, 0x43, 0x6a, 0x99, 0x4d, 0xb8, 0xb2, 0xd1, 0x4a, 0xe8, 0xb6, 0x0a,
	0xe8, 0x14, 0x52, 0x62, 0x7e, 0x7b, 0x5e, 0xa5, 0xbf, 0x23, 0x2b, 0x93, 0xe4, 0x5a, 0x90, 0x90,
	0x38, 0x2c, 0xe4, 0x50, 0xfe, 0xd1, 0x6a, 0x68, 0x96, 0x8a, 0xe8, 0x21, 0xd0, 0xd1, 0x26, 0xb4,
	0x02, 0xdd, 0x24, 0x37, 0x85, 0xb2, 0x60, 0x1c, 0xeb, 0x73, 0xeb, 0x58, 0xce, 0xdd, 0x30, 0xba,
	0x83, 0x21, 0xd7, 0xc3, 0x78, 0x87, 0x5b, 0xd7, 0xe5, 0x6e, 0x48, 0x1f, 0x93, 0xbb, 0x5c, 0x3a,
	0x30, 0xd5, 0x06, 0xba, 0x71, 0x0e, 0x6c, 0x00, 0x0a, 0x0c, 0x97, 0x93, 0x75, 0xae, 0x61, 0xe8,
	0x1a, 0x82, 0x61, 0xf7, 0x0e, 0xc6, 0x39, 0xfc, 0x29, 0x50, 0xd5, 0x5a, 0x7f, 0x46, 0xa8, 0x1d,
	0xab, 0x64, 0x68, 0xb4, 0xd2, 0x85, 0x65, 0x89, 0xce, 0xfc, 0x09, 0xdc, 0x0c, 0xc5, 0x33, 0xa3,
	0xb4, 0x51, 0xa0, 0x1f, 0x90, 0x1b, 0xc1, 0x9e, 0x59, 0x18, 0x61, 0x46, 0xa2, 0x16, 0xb2, 0xf5,
	0x30, 0xdc, 0x83, 0x91, 0x4f, 0x84, 0x3f, 0x33, 0x4a, 0x0e, 0x4e, 0x73, 0x53, 0x5e, 0x34, 0xe5,
	0x46, 0x44, 0xeb, 0x21, 0x0d, 0x01, 0xd8, 0x9b, 0xe8, 0xe5, 0x2e, 0xd0, 0x03, 0xf2, 0xb0, 0x8c,
	0x2d, 0x94, 0x18, 0x15, 0xc0, 0x4e, 0x84, 0x1b, 0xea, 0xc2, 0x85, 0x78, 0x5f, 0x19, 0xd6, 0x19,
	0x2e, 0x94, 0xb3, 0xd1, 0x5d, 0x74, 0xba, 0x17, 0xf0, 0x67, 0x48, 0x3f, 0x0f, 0x30, 0x9a, 0xb5,
	0xa7, 0x28, 0xfd, 0x3d, 0x59, 0xb5, 0xae, 0x38, 0x64, 0x09, 0x77, 0x5c, 0xea, 0xc1, 0xab, 0xed,
	0xb2, 0x81, 0x4e, 0x91, 0x47, 0xda, 0x81, 0x98, 0xef, 0x9a, 0x2f, 0xc9, 0x03, 0x38, 0xcd, 0xc1,
	0x88, 0x0c, 0x94, 0xe3, 0xd2, 0x27, 0x2a, 0xc7, 0x13, 0xbd, 0xdc, 0x01, 0x03, 0x27, 0x46, 0xf8,
	0x13, 0xee, 0x1e, 0xbe, 0x30, 0x36, 0x66, 0xe1, 0x76, 0xc9, 0x86, 0x4d, 0x88, 0x4b, 0x92, 0xfe,
	0x8d, 0x7c, 0x94, 0xe8, 0x7c, 0x3c, 0xdf, 0x7d, 0x27, 0x43, 0x50, 0x2c, 0x05, 0xa1, 0x1c, 0x18,
	0x09, 0xfc, 0xd8, 0x8f, 0xe1, 0x54, 0xa3, 0xfb, 0x38, 0xc3, 0x87, 0x3e, 0x64, 0xb6, 0x0b, 0x9f,
	0x0f, 0x41, 0xed, 0xce, 0xf1, 0x38, 0xf1, 0x99, 0x1d, 0xb0, 0xce, 0x00, 0xcf, 0x98, 0x01, 0x5f,
	0x75, 0x78, 0xa3, 0x47, 0x0f, 0x66, 0x77, 0xa0, 0x87, 0x7a, 0x3c, 0x95, 0xc3, 0xbd, 0x6c, 0x0b,
	0xe9, 0x2c, 0x3b, 0x2c, 0xfa, 0xfe, 0x68, 0xb6, 0xe2, 0x0c, 0xa2, 0x0f, 0xaa, 0x7b, 0x19, 0xa5,
	0x1d, 0x54, 0x7a, 0xe2, 0x0c, 0xe8, 0xbf, 0x6a, 0x64, 0x6e, 0xc1, 0x78, 0xe5, 0xd9, 0x91, 0xc4,
	0xd3, 0x0b, 0x97, 0x95, 0xe9, 0x14, 0xa2, 0x87, 0xf8, 0xc0, 0xe8, 0x5c, 0x9c, 0xb7, 0x5a, 0x7b,
	0x33, 0xb4, 0xbf, 0xf4, 0x7a, 0x5f, 0x3e, 0xed, 0x96, 0xec, 0xe7, 0x3a, 0x85, 0x97, 0x3f, 0x8c,
	0xc4, 0x2d, 0x78, 0x05, 0xb0, 0x23, 0x39, 0x0b, 0xd0, 0x0e, 0xa9, 0xfb, 0x79, 0x30, 0x3f, 0x11,
	0xfc, 0xfe, 0x26, 0x7e, 0x7f, 0xe3, 0xe2, 0xbc, 0xb5, 0x58, 0x1a, 0x96, 0xdf, 0xba, 0x51, 0xfe,
	0xdc, 0x3b, 0x85, 0x04, 0xbd, 0x17, 0x7d, 0x60, 0x6f, 0x24, 0xd1, 0xe7, 0x39, 0x59, 0xb6, 0x60,
	0x04, 0x97, 0x4c, 0x69, 0x93, 0x71, 0x29, 0xce, 0x30, 0x4b, 0xc1, 0xf3, 0x43, 0xf4, 0x5c, 0x7d,
	0x79, 0xde, 0x6a, 0xf4, 0x10, 0xfa, 0x62, 0x96, 0x41, 0xb3, 0x86, 0xbd, 0x5c, 0xa0, 0xfb, 0xa4,
	0xa1, 0xe0, 0x84, 0xd9, 0x64, 0x08, 0x19, 0x67, 0xc9, 0x90, 0xab, 0x01, 0x98, 0x60, 0xfb, 0x13,
	0xb4, 0x8d, 0x5e, 0x9e, 0xb7, 0x96, 0xbe, 0x80, 0x93, 0x1e, 0x12, 0xed, 0x00, 0xa0, 0xe7, 0x92,
	0xba, 0x64, 0x94, 0xfe, 0x83, 0x5c, 0xb7, 0x30, 0x2a, 0x40, 0x25, 0xc0, 0x12, 0x9e, 0x0c, 0x21,
	0xfa, 0x68, 0x7d, 0x61, 0x73, 0xf1, 0xe3, 0xdd, 0xad, 0x37, 0x3c, 0xac, 0xb7, 0x2e, 0x7b, 0x3e,
	0x6f, 0xf5, 0x4a, 0x9f, 0xb6, 0xb7, 0xd9, 0x53, 0xce, 0x8c, 0xc3, 0xcb, 0x70, 0x6e, 0x3c, 0xae,
	0xdb, 0xd9, 0x9f, 0x2b, 0x23, 0x42, 0x5f, 0x8f, 0xa3, 0x37, 0xc9, 0xc2, 0x11, 0x8c, 0xf1, 0xe9,
	0x5d, 0x8f, 0xfd, 0x9f, 0x74, 0x8f, 0xbc, 0x8d, 0xf7, 0x04, 0xbe, 0xab, 0x17, 0x3f, 0xde, 0x7e,
	0xe3, 0xf4, 0x5e, 0x77, 0x8c, 0x43, 0xf4, 0x27, 0x6f, 0x3d, 0xaa, 0x6d, 0xfc, 0xbb, 0x76, 0xe9,
	0x37, 0x1f, 0x90, 0xeb, 0x98, 0x80, 0x94, 0x1d, 0x83, 0xf1, 0x66, 0xe5, 0xe7, 0xeb, 0x61, 0xf4,
	0xab, 0x30, 0x48, 0xef, 0x91, 0x7a, 0x52, 0x18, 0x03, 0xca, 0xb1, 0xe9, 0x84, 0x16, 0xe2, 0x6b,
	0xe5, 0x20, 0xde, 0x57, 0xf4, 0x0e, 0xb9, 0x2a, 0x54, 0x62, 0xc0, 0x57, 0x5a, 0x78, 0xbb, 0xc7,
	0xd3, 0x01, 0xba, 0x46, 0xc8, 0xe4, 0xde, 0xb3, 0xe1, 0x65, 0x1e, 0x5f, 0xad, 0xee, 0x3a, 0xbb,
	0xb3, 0xfd, 0xcd, 0x7f, 0x9b, 0x57, 0xbe, 0xb9, 0x68, 0xd6, 0xbe, 0xbd, 0x68, 0xd6, 0xbe, 0xbb,
	0x68, 0xd6, 0xfe, 0x73, 0xd1, 0xac, 0xfd, 0xf3, 0x45, 0xf3, 0xca, 0xb7, 0x2f, 0x9a, 0x57, 0xbe,
	0x7b, 0xd1, 0xbc, 0xf2, 0x75, 0x7d, 0x6e, 0xb9, 0x87, 0xef, 0xe0, 0xff, 0x35, 0xbf, 0xfc, 0x7f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0x18, 0x24, 0x6e, 0x3d, 0x0d, 0x00, 0x00,
}

func (m *LocalOnlySessionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalOnlySessionData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalOnlySessionData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SequenceCache) > 0 {
		keysForSequenceCache := make([]uint32, 0, len(m.SequenceCache))
		for k := range m.SequenceCache {
			keysForSequenceCache = append(keysForSequenceCache, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForSequenceCache)
		for iNdEx := len(keysForSequenceCache) - 1; iNdEx >= 0; iNdEx-- {
			v := m.SequenceCache[uint32(keysForSequenceCache[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(keysForSequenceCache[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xda
		}
	}
	if m.NewSchemaChangerMode != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.NewSchemaChangerMode))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if m.SerialNormalizationMode != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.SerialNormalizationMode))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.DistSQLMode != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.DistSQLMode))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.ExperimentalDistSQLPlanningMode != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.ExperimentalDistSQLPlanningMode))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.ResultsBufferSize != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.ResultsBufferSize))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.EnableStreamReplication {
		i--
		if m.EnableStreamReplication {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.CopyPartitioningWhenDeinterleavingTable {
		i--
		if m.CopyPartitioningWhenDeinterleavingTable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ExperimentalComputedColumnRewrites) > 0 {
		i -= len(m.ExperimentalComputedColumnRewrites)
		copy(dAtA[i:], m.ExperimentalComputedColumnRewrites)
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(len(m.ExperimentalComputedColumnRewrites)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.StubCatalogTablesEnabled {
		i--
		if m.StubCatalogTablesEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.EnableUniqueWithoutIndexConstraints {
		i--
		if m.EnableUniqueWithoutIndexConstraints {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.EnableExpressionIndexes {
		i--
		if m.EnableExpressionIndexes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.EnableSeqScan {
		i--
		if m.EnableSeqScan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.SynchronousCommit {
		i--
		if m.SynchronousCommit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.AlterColumnTypeGeneralEnabled {
		i--
		if m.AlterColumnTypeGeneralEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.InsertFastPath {
		i--
		if m.InsertFastPath {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.ImplicitSelectForUpdate {
		i--
		if m.ImplicitSelectForUpdate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.DisallowFullTableScans {
		i--
		if m.DisallowFullTableScans {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.HashShardedIndexesEnabled {
		i--
		if m.HashShardedIndexesEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.OverrideMultiRegionZoneConfigEnabled {
		i--
		if m.OverrideMultiRegionZoneConfigEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.DropEnumValueEnabled {
		i--
		if m.DropEnumValueEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.ImplicitColumnPartitioningEnabled {
		i--
		if m.ImplicitColumnPartitioningEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.TempTablesEnabled {
		i--
		if m.TempTablesEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.AllowPrepareAsOptPlan {
		i--
		if m.AllowPrepareAsOptPlan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.ForceSavepointRestart {
		i--
		if m.ForceSavepointRestart {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.RequireExplicitPrimaryKeys {
		i--
		if m.RequireExplicitPrimaryKeys {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ZigzagJoinEnabled {
		i--
		if m.ZigzagJoinEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.PreferLookupJoinsForFKs {
		i--
		if m.PreferLookupJoinsForFKs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.SafeUpdates {
		i--
		if m.SafeUpdates {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.LocalityOptimizedSearch {
		i--
		if m.LocalityOptimizedSearch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.OptimizerUseMultiColStats {
		i--
		if m.OptimizerUseMultiColStats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.OptimizerUseHistograms {
		i--
		if m.OptimizerUseHistograms {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.PartiallyDistributedPlansDisabled {
		i--
		if m.PartiallyDistributedPlansDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.DefaultTxnUseFollowerReads {
		i--
		if m.DefaultTxnUseFollowerReads {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.DefaultTxnReadOnly {
		i--
		if m.DefaultTxnReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.DefaultTxnPriority != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.DefaultTxnPriority))
		i--
		dAtA[i] = 0x40
	}
	if m.ReorderJoinsLimit != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.ReorderJoinsLimit))
		i--
		dAtA[i] = 0x38
	}
	if m.NoticeDisplaySeverity != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.NoticeDisplaySeverity))
		i--
		dAtA[i] = 0x30
	}
	if m.IdleInTransactionSessionTimeout != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.IdleInTransactionSessionTimeout))
		i--
		dAtA[i] = 0x28
	}
	if m.IdleInSessionTimeout != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.IdleInSessionTimeout))
		i--
		dAtA[i] = 0x20
	}
	if m.StmtTimeout != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.StmtTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.OptimizerFKCascadesLimit != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.OptimizerFKCascadesLimit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SaveTablesPrefix) > 0 {
		i -= len(m.SaveTablesPrefix)
		copy(dAtA[i:], m.SaveTablesPrefix)
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(len(m.SaveTablesPrefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SequenceCacheEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SequenceCacheEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SequenceCacheEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumValues != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.NumValues))
		i--
		dAtA[i] = 0x20
	}
	if m.Increment != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.Increment))
		i--
		dAtA[i] = 0x18
	}
	if m.CurrentValue != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.CurrentValue))
		i--
		dAtA[i] = 0x10
	}
	if m.CachedVersion != 0 {
		i = encodeVarintLocalOnlySessionData(dAtA, i, uint64(m.CachedVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLocalOnlySessionData(dAtA []byte, offset int, v uint64) int {
	offset -= sovLocalOnlySessionData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LocalOnlySessionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SaveTablesPrefix)
	if l > 0 {
		n += 1 + l + sovLocalOnlySessionData(uint64(l))
	}
	if m.OptimizerFKCascadesLimit != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.OptimizerFKCascadesLimit))
	}
	if m.StmtTimeout != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.StmtTimeout))
	}
	if m.IdleInSessionTimeout != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.IdleInSessionTimeout))
	}
	if m.IdleInTransactionSessionTimeout != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.IdleInTransactionSessionTimeout))
	}
	if m.NoticeDisplaySeverity != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.NoticeDisplaySeverity))
	}
	if m.ReorderJoinsLimit != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.ReorderJoinsLimit))
	}
	if m.DefaultTxnPriority != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.DefaultTxnPriority))
	}
	if m.DefaultTxnReadOnly {
		n += 2
	}
	if m.DefaultTxnUseFollowerReads {
		n += 2
	}
	if m.PartiallyDistributedPlansDisabled {
		n += 2
	}
	if m.OptimizerUseHistograms {
		n += 2
	}
	if m.OptimizerUseMultiColStats {
		n += 2
	}
	if m.LocalityOptimizedSearch {
		n += 2
	}
	if m.SafeUpdates {
		n += 2
	}
	if m.PreferLookupJoinsForFKs {
		n += 3
	}
	if m.ZigzagJoinEnabled {
		n += 3
	}
	if m.RequireExplicitPrimaryKeys {
		n += 3
	}
	if m.ForceSavepointRestart {
		n += 3
	}
	if m.AllowPrepareAsOptPlan {
		n += 3
	}
	if m.TempTablesEnabled {
		n += 3
	}
	if m.ImplicitColumnPartitioningEnabled {
		n += 3
	}
	if m.DropEnumValueEnabled {
		n += 3
	}
	if m.OverrideMultiRegionZoneConfigEnabled {
		n += 3
	}
	if m.HashShardedIndexesEnabled {
		n += 3
	}
	if m.DisallowFullTableScans {
		n += 3
	}
	if m.ImplicitSelectForUpdate {
		n += 3
	}
	if m.InsertFastPath {
		n += 3
	}
	if m.AlterColumnTypeGeneralEnabled {
		n += 3
	}
	if m.SynchronousCommit {
		n += 3
	}
	if m.EnableSeqScan {
		n += 3
	}
	if m.EnableExpressionIndexes {
		n += 3
	}
	if m.EnableUniqueWithoutIndexConstraints {
		n += 3
	}
	if m.StubCatalogTablesEnabled {
		n += 3
	}
	l = len(m.ExperimentalComputedColumnRewrites)
	if l > 0 {
		n += 2 + l + sovLocalOnlySessionData(uint64(l))
	}
	if m.CopyPartitioningWhenDeinterleavingTable {
		n += 3
	}
	if m.EnableStreamReplication {
		n += 3
	}
	if m.ResultsBufferSize != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.ResultsBufferSize))
	}
	if m.ExperimentalDistSQLPlanningMode != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.ExperimentalDistSQLPlanningMode))
	}
	if m.DistSQLMode != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.DistSQLMode))
	}
	if m.SerialNormalizationMode != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.SerialNormalizationMode))
	}
	if m.NewSchemaChangerMode != 0 {
		n += 2 + sovLocalOnlySessionData(uint64(m.NewSchemaChangerMode))
	}
	if len(m.SequenceCache) > 0 {
		for k, v := range m.SequenceCache {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovLocalOnlySessionData(uint64(l))
			}
			mapEntrySize := 1 + sovLocalOnlySessionData(uint64(k)) + l
			n += mapEntrySize + 2 + sovLocalOnlySessionData(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SequenceCacheEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CachedVersion != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.CachedVersion))
	}
	if m.CurrentValue != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.CurrentValue))
	}
	if m.Increment != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.Increment))
	}
	if m.NumValues != 0 {
		n += 1 + sovLocalOnlySessionData(uint64(m.NumValues))
	}
	return n
}

func sovLocalOnlySessionData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLocalOnlySessionData(x uint64) (n int) {
	return sovLocalOnlySessionData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LocalOnlySessionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalOnlySessionData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalOnlySessionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalOnlySessionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveTablesPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaveTablesPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerFKCascadesLimit", wireType)
			}
			m.OptimizerFKCascadesLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OptimizerFKCascadesLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StmtTimeout", wireType)
			}
			m.StmtTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StmtTimeout |= time.Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleInSessionTimeout", wireType)
			}
			m.IdleInSessionTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleInSessionTimeout |= time.Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleInTransactionSessionTimeout", wireType)
			}
			m.IdleInTransactionSessionTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleInTransactionSessionTimeout |= time.Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeDisplaySeverity", wireType)
			}
			m.NoticeDisplaySeverity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoticeDisplaySeverity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReorderJoinsLimit", wireType)
			}
			m.ReorderJoinsLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReorderJoinsLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTxnPriority", wireType)
			}
			m.DefaultTxnPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultTxnPriority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTxnReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultTxnReadOnly = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTxnUseFollowerReads", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultTxnUseFollowerReads = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartiallyDistributedPlansDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PartiallyDistributedPlansDisabled = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseHistograms", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseHistograms = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizerUseMultiColStats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizerUseMultiColStats = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalityOptimizedSearch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalityOptimizedSearch = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafeUpdates", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SafeUpdates = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferLookupJoinsForFKs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreferLookupJoinsForFKs = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZigzagJoinEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ZigzagJoinEnabled = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireExplicitPrimaryKeys", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireExplicitPrimaryKeys = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceSavepointRestart", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceSavepointRestart = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowPrepareAsOptPlan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowPrepareAsOptPlan = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempTablesEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TempTablesEnabled = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImplicitColumnPartitioningEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImplicitColumnPartitioningEnabled = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropEnumValueEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropEnumValueEnabled = bool(v != 0)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverrideMultiRegionZoneConfigEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverrideMultiRegionZoneConfigEnabled = bool(v != 0)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashShardedIndexesEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HashShardedIndexesEnabled = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisallowFullTableScans", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisallowFullTableScans = bool(v != 0)
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImplicitSelectForUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImplicitSelectForUpdate = bool(v != 0)
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertFastPath", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InsertFastPath = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlterColumnTypeGeneralEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlterColumnTypeGeneralEnabled = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SynchronousCommit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SynchronousCommit = bool(v != 0)
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSeqScan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableSeqScan = bool(v != 0)
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableExpressionIndexes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableExpressionIndexes = bool(v != 0)
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableUniqueWithoutIndexConstraints", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableUniqueWithoutIndexConstraints = bool(v != 0)
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StubCatalogTablesEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StubCatalogTablesEnabled = bool(v != 0)
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentalComputedColumnRewrites", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExperimentalComputedColumnRewrites = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyPartitioningWhenDeinterleavingTable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CopyPartitioningWhenDeinterleavingTable = bool(v != 0)
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableStreamReplication", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableStreamReplication = bool(v != 0)
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultsBufferSize", wireType)
			}
			m.ResultsBufferSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultsBufferSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentalDistSQLPlanningMode", wireType)
			}
			m.ExperimentalDistSQLPlanningMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExperimentalDistSQLPlanningMode |= ExperimentalDistSQLPlanningMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistSQLMode", wireType)
			}
			m.DistSQLMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistSQLMode |= DistSQLExecMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNormalizationMode", wireType)
			}
			m.SerialNormalizationMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerialNormalizationMode |= SerialNormalizationMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSchemaChangerMode", wireType)
			}
			m.NewSchemaChangerMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewSchemaChangerMode |= NewSchemaChangerMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceCache", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SequenceCache == nil {
				m.SequenceCache = make(SequenceCache)
			}
			var mapkey uint32
			var mapvalue *SequenceCacheEntry
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLocalOnlySessionData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLocalOnlySessionData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLocalOnlySessionData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLocalOnlySessionData
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLocalOnlySessionData
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SequenceCacheEntry{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLocalOnlySessionData(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLocalOnlySessionData
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SequenceCache[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocalOnlySessionData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SequenceCacheEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalOnlySessionData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SequenceCacheEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SequenceCacheEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CachedVersion", wireType)
			}
			m.CachedVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CachedVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentValue", wireType)
			}
			m.CurrentValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Increment", wireType)
			}
			m.Increment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Increment |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumValues", wireType)
			}
			m.NumValues = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumValues |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocalOnlySessionData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalOnlySessionData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocalOnlySessionData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocalOnlySessionData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocalOnlySessionData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLocalOnlySessionData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLocalOnlySessionData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLocalOnlySessionData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLocalOnlySessionData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocalOnlySessionData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLocalOnlySessionData = fmt.Errorf("proto: unexpected end of group")
)
