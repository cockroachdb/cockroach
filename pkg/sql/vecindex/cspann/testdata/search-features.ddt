# ----------------------------------------------------------------------
# Load 1000 512-dimension features and search them. Use small partition size to
# ensure a deeper tree.
# ----------------------------------------------------------------------
new-index dims=512 min-partition-size=4 max-partition-size=16 quality-samples=8 beam-size=4 load-features=1000 hide-tree
----
Created index with 1000 vectors with 512 dimensions.
3 levels, 107 partitions.
CV stats:
  level 2 - mean: 0.1160, stdev: 0.0241
  level 3 - mean: 0.1595, stdev: 0.0192

# Search with small beam size.
search max-results=1 use-feature=5000 beam-size=1
----
vec771: 0.5624 (centroid=0.63)
23 leaf vectors, 43 vectors, 2 full vectors, 4 partitions

# Search for additional results.
search max-results=6 use-feature=5000 beam-size=1
----
vec771: 0.5624 (centroid=0.63)
vec356: 0.5976 (centroid=0.55)
vec309: 0.7311 (centroid=0.48)
vec637: 0.8039 (centroid=0.59)
vec659: 0.8307 (centroid=0.67)
vec133: 0.8381 (centroid=0.54)
23 leaf vectors, 43 vectors, 12 full vectors, 4 partitions

# Use a larger beam size.
search max-results=6 use-feature=5000 beam-size=4
----
vec771: 0.5624 (centroid=0.63)
vec356: 0.5976 (centroid=0.55)
vec640: 0.6525 (centroid=0.52)
vec329: 0.6871 (centroid=0.52)
vec95: 0.7008 (centroid=0.61)
vec386: 0.7301 (centroid=0.61)
85 leaf vectors, 141 vectors, 13 full vectors, 13 partitions

# Turn off re-ranking, which results in increased inaccuracy.
search max-results=6 use-feature=5000 beam-size=4 skip-rerank
----
vec771: 0.539 ±0.04 (centroid=0.63)
vec356: 0.608 ±0.04 (centroid=0.55)
vec640: 0.6732 ±0.04 (centroid=0.52)
vec386: 0.6753 ±0.04 (centroid=0.61)
vec329: 0.6865 ±0.03 (centroid=0.52)
vec95: 0.7042 ±0.04 (centroid=0.61)
85 leaf vectors, 141 vectors, 0 full vectors, 13 partitions

# Return top 25 results with large beam size.
search max-results=25 use-feature=5000 beam-size=16
----
vec771: 0.5624 (centroid=0.63)
vec356: 0.5976 (centroid=0.55)
vec640: 0.6525 (centroid=0.52)
vec302: 0.6601 (centroid=0.58)
vec329: 0.6871 (centroid=0.52)
vec95: 0.7008 (centroid=0.61)
vec249: 0.7268 (centroid=0.47)
vec386: 0.7301 (centroid=0.61)
vec309: 0.7311 (centroid=0.48)
vec633: 0.7513 (centroid=0.51)
vec117: 0.7576 (centroid=0.56)
vec25: 0.761 (centroid=0.52)
vec872: 0.7707 (centroid=0.62)
vec240: 0.7723 (centroid=0.62)
vec347: 0.7745 (centroid=0.49)
vec11: 0.777 (centroid=0.64)
vec340: 0.7858 (centroid=0.63)
vec239: 0.7878 (centroid=0.54)
vec704: 0.7916 (centroid=0.63)
vec220: 0.7957 (centroid=0.44)
vec848: 0.7958 (centroid=0.58)
vec637: 0.8039 (centroid=0.59)
vec410: 0.8062 (centroid=0.48)
vec52: 0.8068 (centroid=0.71)
vec379: 0.8082 (centroid=0.27)
320 leaf vectors, 429 vectors, 85 full vectors, 42 partitions

# Search for an "easy" result, where adaptive search inspects less partitions.
recall topk=20 use-feature=8601 beam-size=4
----
45.00% recall@20
20.00 leaf vectors, 43.00 vectors, 20.00 full vectors, 4.00 partitions

# Search for a "hard" result, where adaptive search inspects more partitions.
recall topk=20 use-feature=2717 beam-size=4
----
10.00% recall@20
80.00 leaf vectors, 127.00 vectors, 47.00 full vectors, 13.00 partitions

# Test recall at different beam sizes.
recall topk=10 beam-size=2 samples=50
----
37.60% recall@10
27.40 leaf vectors, 56.02 vectors, 16.74 full vectors, 5.36 partitions

recall topk=10 beam-size=4 samples=50
----
59.40% recall@10
56.96 leaf vectors, 103.34 vectors, 19.66 full vectors, 9.90 partitions

recall topk=10 beam-size=8 samples=50
----
79.80% recall@10
116.46 leaf vectors, 197.80 vectors, 24.26 full vectors, 19.08 partitions

recall topk=10 beam-size=16 samples=50
----
91.60% recall@10
227.40 leaf vectors, 328.98 vectors, 26.68 full vectors, 32.28 partitions

recall topk=10 beam-size=32 samples=50
----
98.60% recall@10
452.46 leaf vectors, 560.66 vectors, 29.40 full vectors, 54.96 partitions
