# ----------------------------------------------------------------------
# Load 1000 512-dimension OpenAI embeddings and search them. Use small
# partition size to ensure a deeper tree.
# ----------------------------------------------------------------------
new-index dataset=images-512d-10k.gob dataset-count=1000 min-partition-size=4 max-partition-size=16 quality-samples=8 beam-size=4 hide-tree
----
Created index with 1000 vectors with 512 dimensions.
3 levels, 211 partitions.
CV stats:
  level 2 - mean: 0.0000, stdev: 0.0000
  level 3 - mean: 0.0000, stdev: 0.0000

# Search with small beam size.
search max-results=1 use-dataset=5000 beam-size=1
----
vec309: 0.7311
13 leaf vectors, 37 vectors, 11 full vectors, 3 partitions

# Search for additional results.
search max-results=6 use-dataset=5000 beam-size=1
----
vec309: 0.7311
vec11: 0.777
vec979: 0.8066
vec493: 0.8184
vec879: 0.8291
vec271: 0.84
13 leaf vectors, 37 vectors, 11 full vectors, 3 partitions

# Use a larger beam size.
search max-results=6 use-dataset=5000 beam-size=4
----
vec329: 0.6871
vec95: 0.7008
vec386: 0.7301
vec309: 0.7311
vec240: 0.7723
vec347: 0.7745
35 leaf vectors, 73 vectors, 17 full vectors, 7 partitions

# Turn off re-ranking, which results in increased inaccuracy.
search max-results=6 use-dataset=5000 beam-size=4 skip-rerank
----
vec329: 0.6899 ± 0.03
vec95: 0.6974 ± 0.04
vec386: 0.7323 ± 0.03
vec347: 0.7356 ± 0.03
vec309: 0.7376 ± 0.03
vec11: 0.7755 ± 0.04
35 leaf vectors, 73 vectors, 0 full vectors, 7 partitions

# Return top 25 results with large beam size.
search max-results=25 use-dataset=5000 beam-size=16
----
vec771: 0.5624
vec356: 0.5976
vec640: 0.6525
vec302: 0.6601
vec329: 0.6871
vec95: 0.7008
vec249: 0.7268
vec386: 0.7301
vec309: 0.7311
vec633: 0.7513
vec117: 0.7576
vec25: 0.761
vec859: 0.7708
vec240: 0.7723
vec347: 0.7745
vec11: 0.777
vec340: 0.7858
vec239: 0.7878
vec704: 0.7916
vec387: 0.8038
vec979: 0.8066
vec184: 0.8139
vec493: 0.8184
vec37: 0.8214
vec202: 0.8218
155 leaf vectors, 256 vectors, 58 full vectors, 25 partitions

# Search for an "easy" result, where adaptive search inspects less partitions.
recall topk=20 use-dataset=8601 beam-size=8
----
80.00% recall@20
82 leaf vectors, 133 vectors, 31 full vectors, 13 partitions

# Search for a "hard" result, where adaptive search inspects more partitions.
recall topk=20 use-dataset=2717 beam-size=8
----
70.00% recall@20
93 leaf vectors, 155 vectors, 51 full vectors, 13 partitions

# Test recall at different beam sizes.
recall topk=10 beam-size=2 samples=64
----
33.59% recall@10
21 leaf vectors, 42 vectors, 15 full vectors, 4 partitions

recall topk=10 beam-size=4 samples=64
----
55.94% recall@10
42 leaf vectors, 74 vectors, 19 full vectors, 7 partitions

recall topk=10 beam-size=8 samples=64
----
75.00% recall@10
83 leaf vectors, 138 vectors, 22 full vectors, 13 partitions

recall topk=10 beam-size=16 samples=64
----
88.59% recall@10
165 leaf vectors, 264 vectors, 26 full vectors, 25 partitions

recall topk=10 beam-size=32 samples=64
----
97.19% recall@10
332 leaf vectors, 440 vectors, 30 full vectors, 42 partitions

# ----------------------------------------------------------------------
# Compare orderings of same dataset with different distance metrics.
# ----------------------------------------------------------------------
# L2Squared.
new-index dataset=fashion-784d-1k.gob dataset-count=1000 distance-metric=L2Squared min-partition-size=4 max-partition-size=16 quality-samples=8 beam-size=4 hide-tree
----
Created index with 1000 vectors with 784 dimensions.
3 levels, 214 partitions.
CV stats:
  level 2 - mean: 0.0000, stdev: 0.0000
  level 3 - mean: 0.0000, stdev: 0.0000

# Brute force the search to get perfect matches to compare against.
search max-results=10 use-dataset=999 beam-size=256
----
vec999: 0
vec409: 3008262
vec984: 3107759
vec968: 3186131
vec161: 3206090
vec130: 3392299
vec610: 3558417
vec152: 3574788
vec611: 3682006
vec420: 3781823
1000 leaf vectors, 1109 vectors, 19 full vectors, 110 partitions

# Now use lower beam size.
search max-results=10 use-dataset=999 beam-size=8
----
vec999: 0
vec409: 3008262
vec984: 3107759
vec968: 3186131
vec161: 3206090
vec130: 3392299
vec610: 3558417
vec152: 3574788
vec611: 3682006
vec420: 3781823
84 leaf vectors, 131 vectors, 19 full vectors, 13 partitions

# Cosine.
new-index dataset=fashion-784d-1k.gob dataset-count=1000 distance-metric=Cosine min-partition-size=4 max-partition-size=16 quality-samples=8 beam-size=4 hide-tree
----
Created index with 1000 vectors with 784 dimensions.
3 levels, 209 partitions.
CV stats:
  level 2 - mean: 0.0000, stdev: 0.0000
  level 3 - mean: 0.0000, stdev: 0.0000

# Brute force the search to get perfect matches to compare against.
search max-results=10 use-dataset=999 beam-size=256
----
vec999: 0
vec984: 0.0923
vec968: 0.1013
vec610: 0.1045
vec811: 0.1123
vec660: 0.1129
vec409: 0.1185
vec144: 0.1197
vec476: 0.124
vec109: 0.1273
1000 leaf vectors, 1106 vectors, 17 full vectors, 107 partitions

# Now use lower beam size.
search max-results=10 use-dataset=999 beam-size=8
----
vec999: 0
vec984: 0.0923
vec968: 0.1013
vec610: 0.1045
vec811: 0.1123
vec660: 0.1129
vec409: 0.1185
vec144: 0.1197
vec476: 0.124
vec109: 0.1273
78 leaf vectors, 139 vectors, 17 full vectors, 13 partitions

# InnerProduct.
new-index dataset=fashion-784d-1k.gob dataset-count=1000 distance-metric=InnerProduct min-partition-size=4 max-partition-size=16 quality-samples=8 beam-size=4 hide-tree
----
Created index with 1000 vectors with 784 dimensions.
3 levels, 213 partitions.
CV stats:
  level 2 - mean: 0.0000, stdev: 0.0000
  level 3 - mean: 0.0000, stdev: 0.0000

# Brute force the search to get perfect matches to compare against.
# NOTE: With InnerProduct "distance", a vector can be "closer" to another vector
# than it is to itself! This is why vector 999 is not the top result, as with
# L2Squared and Cosine distances.
search max-results=10 use-dataset=999 beam-size=256
----
vec773: -14979871
vec7: -14608286
vec109: -14526173
vec289: -14343052
vec811: -14265605
vec216: -14251070
vec312: -14063724
vec197: -14040257
vec476: -13816669
vec311: -13589641
1000 leaf vectors, 1109 vectors, 17 full vectors, 110 partitions

# Now use lower beam size.
search max-results=10 use-dataset=999 beam-size=8
----
vec773: -14979871
vec7: -14608286
vec109: -14526173
vec289: -14343052
vec811: -14265605
vec216: -14251070
vec312: -14063724
vec476: -13816669
vec265: -13573769
vec660: -13573067
87 leaf vectors, 137 vectors, 17 full vectors, 13 partitions

# ----------------------------------------------------------------------
# Load 950 1536-dimension image embeddings and search them using Cosine
# distance.
# ----------------------------------------------------------------------

new-index dataset=dbpedia-1536d-1k.gob dataset-count=950 distance-metric=Cosine min-partition-size=4 max-partition-size=16 quality-samples=8 beam-size=4 hide-tree
----
Created index with 950 vectors with 1536 dimensions.
3 levels, 189 partitions.
CV stats:
  level 2 - mean: 0.0000, stdev: 0.0000
  level 3 - mean: 0.0000, stdev: 0.0000

recall topk=10 beam-size=4 samples=50
----
62.40% recall@10
42 leaf vectors, 72 vectors, 18 full vectors, 7 partitions

recall topk=10 beam-size=8 samples=50
----
83.40% recall@10
83 leaf vectors, 133 vectors, 21 full vectors, 13 partitions

recall topk=10 beam-size=16 samples=50
----
92.60% recall@10
166 leaf vectors, 257 vectors, 24 full vectors, 25 partitions

recall topk=10 beam-size=32 samples=50
----
98.20% recall@10
329 leaf vectors, 431 vectors, 25 full vectors, 42 partitions

# ----------------------------------------------------------------------
# Load 950 768-dimension image embeddings and search them using
# InnerProduct distance.
# ----------------------------------------------------------------------

new-index dataset=laion-768d-1k.gob dataset-count=950 distance-metric=InnerProduct min-partition-size=4 max-partition-size=16 quality-samples=8 beam-size=4 hide-tree
----
Created index with 950 vectors with 768 dimensions.
3 levels, 189 partitions.
CV stats:
  level 2 - mean: 0.0000, stdev: 0.0000
  level 3 - mean: 0.0000, stdev: 0.0000

recall topk=10 beam-size=4 samples=50
----
56.80% recall@10
43 leaf vectors, 73 vectors, 20 full vectors, 7 partitions

recall topk=10 beam-size=8 samples=50
----
72.40% recall@10
87 leaf vectors, 136 vectors, 23 full vectors, 13 partitions

recall topk=10 beam-size=16 samples=50
----
88.00% recall@10
169 leaf vectors, 258 vectors, 27 full vectors, 25 partitions

recall topk=10 beam-size=32 samples=50
----
97.00% recall@10
336 leaf vectors, 437 vectors, 30 full vectors, 42 partitions
